p cnf 8372 40902                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1272'
c Var 'sum_hint_00001' direct represents '1' with '1272'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1272'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1273'
c Var 'sum_hint_00002' direct represents '1' with '1273'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1273'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1274'
c Var 'sum_hint_00003' direct represents '1' with '1274'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1274'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1275'
c Var 'sum_hint_00004' direct represents '1' with '1275'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1275'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1276'
c Var 'sum_hint_00005' direct represents '1' with '1276'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1276'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1277'
c Var 'sum_hint_00006' direct represents '1' with '1277'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1277'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1278'
c Var 'sum_hint_00007' direct represents '1' with '1278'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1278'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1279'
c Var 'sum_hint_00008' direct represents '1' with '1279'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1279'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1280'
c Var 'sum_hint_00009' direct represents '1' with '1280'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1280'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1281'
c Var 'sum_hint_00010' direct represents '1' with '1281'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1281'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1282'
c Var 'sum_hint_00011' direct represents '1' with '1282'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1282'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1283'
c Var 'sum_hint_00012' direct represents '1' with '1283'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1283'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1284'
c Var 'sum_hint_00013' direct represents '1' with '1284'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1284'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1285'
c Var 'sum_hint_00014' direct represents '1' with '1285'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1285'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1286'
c Var 'sum_hint_00015' direct represents '1' with '1286'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1286'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1287'
c Var 'sum_hint_00016' direct represents '1' with '1287'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1287'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1288'
c Var 'sum_hint_00017' direct represents '1' with '1288'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1288'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1289'
c Var 'sum_hint_00018' direct represents '1' with '1289'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1289'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1290'
c Var 'sum_hint_00019' direct represents '1' with '1290'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1290'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1291'
c Var 'sum_hint_00020' direct represents '1' with '1291'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1291'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1292'
c Var 'sum_hint_00021' direct represents '1' with '1292'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1292'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1293'
c Var 'sum_hint_00022' direct represents '1' with '1293'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1293'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1294'
c Var 'sum_hint_00023' direct represents '1' with '1294'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1294'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1295'
c Var 'sum_hint_00024' direct represents '1' with '1295'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1295'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1296'
c Var 'sum_hint_00025' direct represents '1' with '1296'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1296'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1297'
c Var 'sum_hint_00026' direct represents '1' with '1297'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1297'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1298'
c Var 'sum_hint_00027' direct represents '1' with '1298'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1298'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1299'
c Var 'sum_hint_00028' direct represents '1' with '1299'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1299'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002 + x_00001_00001 + x_00001_00002)=tv=24))
c Var 'aux0' direct represents '0' with '-1300'
c Var 'aux0' direct represents '1' with '1300'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1300'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00002_00003 + x_00003_00003 + x_00001_00003)=tv=8))
c Var 'aux1' direct represents '0' with '-1301'
c Var 'aux1' direct represents '1' with '1301'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1301'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00002_00004 + x_00003_00004 + x_00001_00004)=tv=18))
c Var 'aux2' direct represents '0' with '-1302'
c Var 'aux2' direct represents '1' with '1302'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1302'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006 + x_00001_00007 + x_00001_00008)=tv=14))
c Var 'aux3' direct represents '0' with '-1303'
c Var 'aux3' direct represents '1' with '1303'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1303'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00008 + x_00002_00009 + x_00001_00009)=tv=21))
c Var 'aux4' direct represents '0' with '-1304'
c Var 'aux4' direct represents '1' with '1304'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1304'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006 + x_00002_00007)=tv=13))
c Var 'aux5' direct represents '0' with '-1305'
c Var 'aux5' direct represents '1' with '1305'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1305'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00003_00001 + x_00004_00001)=tv=10))
c Var 'aux6' direct represents '0' with '-1306'
c Var 'aux6' direct represents '1' with '1306'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1306'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00003_00002 + x_00004_00002)=tv=15))
c Var 'aux7' direct represents '0' with '-1307'
c Var 'aux7' direct represents '1' with '1307'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1307'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)=tv=12))
c Var 'aux8' direct represents '0' with '-1308'
c Var 'aux8' direct represents '1' with '1308'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1308'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00003_00009)=tv=12))
c Var 'aux9' direct represents '0' with '-1309'
c Var 'aux9' direct represents '1' with '1309'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1309'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00004_00003 + x_00004_00004 + x_00005_00004)=tv=18))
c Var 'aux10' direct represents '0' with '-1310'
c Var 'aux10' direct represents '1' with '1310'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1310'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00005 + x_00004_00006)=tv=9))
c Var 'aux11' direct represents '0' with '-1311'
c Var 'aux11' direct represents '1' with '1311'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1311'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00007 + x_00005_00007 + x_00005_00008)=tv=19))
c Var 'aux12' direct represents '0' with '-1312'
c Var 'aux12' direct represents '1' with '1312'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1312'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00008 + x_00004_00009 + x_00005_00009)=tv=13))
c Var 'aux13' direct represents '0' with '-1313'
c Var 'aux13' direct represents '1' with '1313'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1313'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00005_00001 + x_00006_00001 + x_00006_00002)=tv=10))
c Var 'aux14' direct represents '0' with '-1314'
c Var 'aux14' direct represents '1' with '1314'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1314'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00002 + x_00005_00003 + x_00006_00003)=tv=15))
c Var 'aux15' direct represents '0' with '-1315'
c Var 'aux15' direct represents '1' with '1315'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1315'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00005_00005 + x_00006_00004 + x_00006_00005)=tv=17))
c Var 'aux16' direct represents '0' with '-1316'
c Var 'aux16' direct represents '1' with '1316'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1316'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00005_00006 + x_00006_00006 + x_00006_00007)=tv=18))
c Var 'aux17' direct represents '0' with '-1317'
c Var 'aux17' direct represents '1' with '1317'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1317'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00007_00008 + x_00006_00008)=tv=7))
c Var 'aux18' direct represents '0' with '-1318'
c Var 'aux18' direct represents '1' with '1318'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1318'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00009 + x_00006_00009)=tv=12))
c Var 'aux19' direct represents '0' with '-1319'
c Var 'aux19' direct represents '1' with '1319'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1319'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00007_00003)=tv=14))
c Var 'aux20' direct represents '0' with '-1320'
c Var 'aux20' direct represents '1' with '1320'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1320'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005)=tv=5))
c Var 'aux21' direct represents '0' with '-1321'
c Var 'aux21' direct represents '1' with '1321'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1321'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00007_00006 + x_00008_00006 + x_00009_00006)=tv=21))
c Var 'aux22' direct represents '0' with '-1322'
c Var 'aux22' direct represents '1' with '1322'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1322'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00007_00007 + x_00008_00007 + x_00009_00007)=tv=12))
c Var 'aux23' direct represents '0' with '-1323'
c Var 'aux23' direct represents '1' with '1323'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1323'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00009_00001)=tv=13))
c Var 'aux24' direct represents '0' with '-1324'
c Var 'aux24' direct represents '1' with '1324'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1324'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004 + x_00008_00005)=tv=7))
c Var 'aux25' direct represents '0' with '-1325'
c Var 'aux25' direct represents '1' with '1325'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1325'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00008 + x_00008_00009 + x_00009_00008 + x_00009_00009)=tv=18))
c Var 'aux26' direct represents '0' with '-1326'
c Var 'aux26' direct represents '1' with '1326'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1326'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00009_00002 + x_00009_00003 + x_00009_00004 + x_00009_00005)=tv=30))
c Var 'aux27' direct represents '0' with '-1327'
c Var 'aux27' direct represents '1' with '1327'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1327'
c Encoding variable: aux28 with domain: bool (representing constraint (x_00003_00001 != x_00004_00001))
c Var 'aux28' direct represents '0' with '-1328'
c Var 'aux28' direct represents '1' with '1328'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1328'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00003_00002 != x_00004_00002))
c Var 'aux29' direct represents '0' with '-1329'
c Var 'aux29' direct represents '1' with '1329'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1329'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00003_00005 != x_00003_00006))
c Var 'aux30' direct represents '0' with '-1330'
c Var 'aux30' direct represents '1' with '1330'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1330'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00004_00005 != x_00004_00006))
c Var 'aux31' direct represents '0' with '-1331'
c Var 'aux31' direct represents '1' with '1331'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1331'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00007_00008 != x_00006_00008))
c Var 'aux32' direct represents '0' with '-1332'
c Var 'aux32' direct represents '1' with '1332'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1332'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00007_00009 != x_00006_00009))
c Var 'aux33' direct represents '0' with '-1333'
c Var 'aux33' direct represents '1' with '1333'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1333'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00007_00004 != x_00007_00005))
c Var 'aux34' direct represents '0' with '-1334'
c Var 'aux34' direct represents '1' with '1334'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1334'
c Encoding variable: aux35 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux35' direct represents '0' with '-1335'
c Var 'aux35' direct represents '1' with '1335'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1335'
c Encoding variable: aux36 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux36' direct represents '0' with '-1336'
c Var 'aux36' direct represents '1' with '1336'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1336'
c Encoding variable: aux37 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux37' direct represents '0' with '-1337'
c Var 'aux37' direct represents '1' with '1337'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1337'
c Encoding variable: aux38 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux38' direct represents '0' with '-1338'
c Var 'aux38' direct represents '1' with '1338'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1338'
c Encoding variable: aux39 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux39' direct represents '0' with '-1339'
c Var 'aux39' direct represents '1' with '1339'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1339'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux40' direct represents '0' with '-1340'
c Var 'aux40' direct represents '1' with '1340'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1340'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux41' direct represents '0' with '-1341'
c Var 'aux41' direct represents '1' with '1341'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1341'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux42' direct represents '0' with '-1342'
c Var 'aux42' direct represents '1' with '1342'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1342'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux43' direct represents '0' with '-1343'
c Var 'aux43' direct represents '1' with '1343'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1343'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux44' direct represents '0' with '-1344'
c Var 'aux44' direct represents '1' with '1344'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1344'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux45' direct represents '0' with '-1345'
c Var 'aux45' direct represents '1' with '1345'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1345'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux46' direct represents '0' with '-1346'
c Var 'aux46' direct represents '1' with '1346'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1346'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux47' direct represents '0' with '-1347'
c Var 'aux47' direct represents '1' with '1347'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1347'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux48' direct represents '0' with '-1348'
c Var 'aux48' direct represents '1' with '1348'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1348'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux49' direct represents '0' with '-1349'
c Var 'aux49' direct represents '1' with '1349'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1349'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux50' direct represents '0' with '-1350'
c Var 'aux50' direct represents '1' with '1350'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1350'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux51' direct represents '0' with '-1351'
c Var 'aux51' direct represents '1' with '1351'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1351'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux52' direct represents '0' with '-1352'
c Var 'aux52' direct represents '1' with '1352'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1352'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux53' direct represents '0' with '-1353'
c Var 'aux53' direct represents '1' with '1353'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1353'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux54' direct represents '0' with '-1354'
c Var 'aux54' direct represents '1' with '1354'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1354'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux55' direct represents '0' with '-1355'
c Var 'aux55' direct represents '1' with '1355'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1355'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux56' direct represents '0' with '-1356'
c Var 'aux56' direct represents '1' with '1356'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1356'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux57' direct represents '0' with '-1357'
c Var 'aux57' direct represents '1' with '1357'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1357'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux58' direct represents '0' with '-1358'
c Var 'aux58' direct represents '1' with '1358'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1358'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux59' direct represents '0' with '-1359'
c Var 'aux59' direct represents '1' with '1359'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1359'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux60' direct represents '0' with '-1360'
c Var 'aux60' direct represents '1' with '1360'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1360'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux61' direct represents '0' with '-1361'
c Var 'aux61' direct represents '1' with '1361'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1361'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux62' direct represents '0' with '-1362'
c Var 'aux62' direct represents '1' with '1362'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1362'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux63' direct represents '0' with '-1363'
c Var 'aux63' direct represents '1' with '1363'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1363'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux64' direct represents '0' with '-1364'
c Var 'aux64' direct represents '1' with '1364'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1364'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux65' direct represents '0' with '-1365'
c Var 'aux65' direct represents '1' with '1365'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1365'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux66' direct represents '0' with '-1366'
c Var 'aux66' direct represents '1' with '1366'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1366'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux67' direct represents '0' with '-1367'
c Var 'aux67' direct represents '1' with '1367'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1367'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux68' direct represents '0' with '-1368'
c Var 'aux68' direct represents '1' with '1368'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1368'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux69' direct represents '0' with '-1369'
c Var 'aux69' direct represents '1' with '1369'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1369'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux70' direct represents '0' with '-1370'
c Var 'aux70' direct represents '1' with '1370'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1370'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux71' direct represents '0' with '-1371'
c Var 'aux71' direct represents '1' with '1371'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1371'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux72' direct represents '0' with '-1372'
c Var 'aux72' direct represents '1' with '1372'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1372'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux73' direct represents '0' with '-1373'
c Var 'aux73' direct represents '1' with '1373'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1373'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux74' direct represents '0' with '-1374'
c Var 'aux74' direct represents '1' with '1374'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1374'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux75' direct represents '0' with '-1375'
c Var 'aux75' direct represents '1' with '1375'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1375'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux76' direct represents '0' with '-1376'
c Var 'aux76' direct represents '1' with '1376'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1376'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux77' direct represents '0' with '-1377'
c Var 'aux77' direct represents '1' with '1377'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1377'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux78' direct represents '0' with '-1378'
c Var 'aux78' direct represents '1' with '1378'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1378'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux79' direct represents '0' with '-1379'
c Var 'aux79' direct represents '1' with '1379'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1379'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux80' direct represents '0' with '-1380'
c Var 'aux80' direct represents '1' with '1380'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1380'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux81' direct represents '0' with '-1381'
c Var 'aux81' direct represents '1' with '1381'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1381'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux82' direct represents '0' with '-1382'
c Var 'aux82' direct represents '1' with '1382'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1382'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux83' direct represents '0' with '-1383'
c Var 'aux83' direct represents '1' with '1383'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1383'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux84' direct represents '0' with '-1384'
c Var 'aux84' direct represents '1' with '1384'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1384'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux85' direct represents '0' with '-1385'
c Var 'aux85' direct represents '1' with '1385'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1385'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux86' direct represents '0' with '-1386'
c Var 'aux86' direct represents '1' with '1386'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1386'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux87' direct represents '0' with '-1387'
c Var 'aux87' direct represents '1' with '1387'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1387'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux88' direct represents '0' with '-1388'
c Var 'aux88' direct represents '1' with '1388'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1388'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux89' direct represents '0' with '-1389'
c Var 'aux89' direct represents '1' with '1389'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1389'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux90' direct represents '0' with '-1390'
c Var 'aux90' direct represents '1' with '1390'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1390'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux91' direct represents '0' with '-1391'
c Var 'aux91' direct represents '1' with '1391'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1391'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux92' direct represents '0' with '-1392'
c Var 'aux92' direct represents '1' with '1392'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1392'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux93' direct represents '0' with '-1393'
c Var 'aux93' direct represents '1' with '1393'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1393'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux94' direct represents '0' with '-1394'
c Var 'aux94' direct represents '1' with '1394'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1394'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux95' direct represents '0' with '-1395'
c Var 'aux95' direct represents '1' with '1395'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1395'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux96' direct represents '0' with '-1396'
c Var 'aux96' direct represents '1' with '1396'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1396'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux97' direct represents '0' with '-1397'
c Var 'aux97' direct represents '1' with '1397'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1397'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux98' direct represents '0' with '-1398'
c Var 'aux98' direct represents '1' with '1398'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1398'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux99' direct represents '0' with '-1399'
c Var 'aux99' direct represents '1' with '1399'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1399'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux100' direct represents '0' with '-1400'
c Var 'aux100' direct represents '1' with '1400'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1400'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux101' direct represents '0' with '-1401'
c Var 'aux101' direct represents '1' with '1401'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1401'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux102' direct represents '0' with '-1402'
c Var 'aux102' direct represents '1' with '1402'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1402'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux103' direct represents '0' with '-1403'
c Var 'aux103' direct represents '1' with '1403'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1403'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux104' direct represents '0' with '-1404'
c Var 'aux104' direct represents '1' with '1404'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1404'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux105' direct represents '0' with '-1405'
c Var 'aux105' direct represents '1' with '1405'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1405'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux106' direct represents '0' with '-1406'
c Var 'aux106' direct represents '1' with '1406'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1406'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux107' direct represents '0' with '-1407'
c Var 'aux107' direct represents '1' with '1407'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1407'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux108' direct represents '0' with '-1408'
c Var 'aux108' direct represents '1' with '1408'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1408'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux109' direct represents '0' with '-1409'
c Var 'aux109' direct represents '1' with '1409'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1409'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux110' direct represents '0' with '-1410'
c Var 'aux110' direct represents '1' with '1410'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1410'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux111' direct represents '0' with '-1411'
c Var 'aux111' direct represents '1' with '1411'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1411'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux112' direct represents '0' with '-1412'
c Var 'aux112' direct represents '1' with '1412'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1412'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux113' direct represents '0' with '-1413'
c Var 'aux113' direct represents '1' with '1413'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1413'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux114' direct represents '0' with '-1414'
c Var 'aux114' direct represents '1' with '1414'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1414'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux115' direct represents '0' with '-1415'
c Var 'aux115' direct represents '1' with '1415'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1415'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux116' direct represents '0' with '-1416'
c Var 'aux116' direct represents '1' with '1416'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1416'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux117' direct represents '0' with '-1417'
c Var 'aux117' direct represents '1' with '1417'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1417'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux118' direct represents '0' with '-1418'
c Var 'aux118' direct represents '1' with '1418'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1418'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux119' direct represents '0' with '-1419'
c Var 'aux119' direct represents '1' with '1419'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1419'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux120' direct represents '0' with '-1420'
c Var 'aux120' direct represents '1' with '1420'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1420'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux121' direct represents '0' with '-1421'
c Var 'aux121' direct represents '1' with '1421'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1421'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux122' direct represents '0' with '-1422'
c Var 'aux122' direct represents '1' with '1422'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1422'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux123' direct represents '0' with '-1423'
c Var 'aux123' direct represents '1' with '1423'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1423'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux124' direct represents '0' with '-1424'
c Var 'aux124' direct represents '1' with '1424'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1424'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux125' direct represents '0' with '-1425'
c Var 'aux125' direct represents '1' with '1425'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1425'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux126' direct represents '0' with '-1426'
c Var 'aux126' direct represents '1' with '1426'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1426'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux127' direct represents '0' with '-1427'
c Var 'aux127' direct represents '1' with '1427'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1427'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux128' direct represents '0' with '-1428'
c Var 'aux128' direct represents '1' with '1428'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1428'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux129' direct represents '0' with '-1429'
c Var 'aux129' direct represents '1' with '1429'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1429'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux130' direct represents '0' with '-1430'
c Var 'aux130' direct represents '1' with '1430'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1430'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux131' direct represents '0' with '-1431'
c Var 'aux131' direct represents '1' with '1431'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1431'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux132' direct represents '0' with '-1432'
c Var 'aux132' direct represents '1' with '1432'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1432'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux133' direct represents '0' with '-1433'
c Var 'aux133' direct represents '1' with '1433'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1433'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux134' direct represents '0' with '-1434'
c Var 'aux134' direct represents '1' with '1434'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1434'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux135' direct represents '0' with '-1435'
c Var 'aux135' direct represents '1' with '1435'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1435'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux136' direct represents '0' with '-1436'
c Var 'aux136' direct represents '1' with '1436'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1436'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux137' direct represents '0' with '-1437'
c Var 'aux137' direct represents '1' with '1437'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1437'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux138' direct represents '0' with '-1438'
c Var 'aux138' direct represents '1' with '1438'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1438'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux139' direct represents '0' with '-1439'
c Var 'aux139' direct represents '1' with '1439'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1439'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux140' direct represents '0' with '-1440'
c Var 'aux140' direct represents '1' with '1440'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1440'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux141' direct represents '0' with '-1441'
c Var 'aux141' direct represents '1' with '1441'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1441'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux142' direct represents '0' with '-1442'
c Var 'aux142' direct represents '1' with '1442'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1442'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux143' direct represents '0' with '-1443'
c Var 'aux143' direct represents '1' with '1443'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1443'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux144' direct represents '0' with '-1444'
c Var 'aux144' direct represents '1' with '1444'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1444'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux145' direct represents '0' with '-1445'
c Var 'aux145' direct represents '1' with '1445'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1445'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux146' direct represents '0' with '-1446'
c Var 'aux146' direct represents '1' with '1446'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1446'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux147' direct represents '0' with '-1447'
c Var 'aux147' direct represents '1' with '1447'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1447'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux148' direct represents '0' with '-1448'
c Var 'aux148' direct represents '1' with '1448'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1448'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux149' direct represents '0' with '-1449'
c Var 'aux149' direct represents '1' with '1449'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1449'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux150' direct represents '0' with '-1450'
c Var 'aux150' direct represents '1' with '1450'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1450'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux151' direct represents '0' with '-1451'
c Var 'aux151' direct represents '1' with '1451'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1451'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux152' direct represents '0' with '-1452'
c Var 'aux152' direct represents '1' with '1452'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1452'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux153' direct represents '0' with '-1453'
c Var 'aux153' direct represents '1' with '1453'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1453'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux154' direct represents '0' with '-1454'
c Var 'aux154' direct represents '1' with '1454'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1454'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux155' direct represents '0' with '-1455'
c Var 'aux155' direct represents '1' with '1455'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1455'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux156' direct represents '0' with '-1456'
c Var 'aux156' direct represents '1' with '1456'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1456'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux157' direct represents '0' with '-1457'
c Var 'aux157' direct represents '1' with '1457'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1457'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux158' direct represents '0' with '-1458'
c Var 'aux158' direct represents '1' with '1458'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1458'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux159' direct represents '0' with '-1459'
c Var 'aux159' direct represents '1' with '1459'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1459'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux160' direct represents '0' with '-1460'
c Var 'aux160' direct represents '1' with '1460'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1460'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux161' direct represents '0' with '-1461'
c Var 'aux161' direct represents '1' with '1461'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1461'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux162' direct represents '0' with '-1462'
c Var 'aux162' direct represents '1' with '1462'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1462'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux163' direct represents '0' with '-1463'
c Var 'aux163' direct represents '1' with '1463'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1463'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux164' direct represents '0' with '-1464'
c Var 'aux164' direct represents '1' with '1464'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1464'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux165' direct represents '0' with '-1465'
c Var 'aux165' direct represents '1' with '1465'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1465'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux166' direct represents '0' with '-1466'
c Var 'aux166' direct represents '1' with '1466'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1466'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux167' direct represents '0' with '-1467'
c Var 'aux167' direct represents '1' with '1467'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1467'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux168' direct represents '0' with '-1468'
c Var 'aux168' direct represents '1' with '1468'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1468'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux169' direct represents '0' with '-1469'
c Var 'aux169' direct represents '1' with '1469'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1469'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux170' direct represents '0' with '-1470'
c Var 'aux170' direct represents '1' with '1470'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1470'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux171' direct represents '0' with '-1471'
c Var 'aux171' direct represents '1' with '1471'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1471'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux172' direct represents '0' with '-1472'
c Var 'aux172' direct represents '1' with '1472'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1472'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux173' direct represents '0' with '-1473'
c Var 'aux173' direct represents '1' with '1473'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1473'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux174' direct represents '0' with '-1474'
c Var 'aux174' direct represents '1' with '1474'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1474'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux175' direct represents '0' with '-1475'
c Var 'aux175' direct represents '1' with '1475'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1475'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux176' direct represents '0' with '-1476'
c Var 'aux176' direct represents '1' with '1476'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1476'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux177' direct represents '0' with '-1477'
c Var 'aux177' direct represents '1' with '1477'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1477'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux178' direct represents '0' with '-1478'
c Var 'aux178' direct represents '1' with '1478'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1478'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux179' direct represents '0' with '-1479'
c Var 'aux179' direct represents '1' with '1479'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1479'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux180' direct represents '0' with '-1480'
c Var 'aux180' direct represents '1' with '1480'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1480'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux181' direct represents '0' with '-1481'
c Var 'aux181' direct represents '1' with '1481'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1481'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux182' direct represents '0' with '-1482'
c Var 'aux182' direct represents '1' with '1482'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1482'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux183' direct represents '0' with '-1483'
c Var 'aux183' direct represents '1' with '1483'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1483'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux184' direct represents '0' with '-1484'
c Var 'aux184' direct represents '1' with '1484'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1484'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux185' direct represents '0' with '-1485'
c Var 'aux185' direct represents '1' with '1485'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1485'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux186' direct represents '0' with '-1486'
c Var 'aux186' direct represents '1' with '1486'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1486'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux187' direct represents '0' with '-1487'
c Var 'aux187' direct represents '1' with '1487'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1487'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux188' direct represents '0' with '-1488'
c Var 'aux188' direct represents '1' with '1488'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1488'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux189' direct represents '0' with '-1489'
c Var 'aux189' direct represents '1' with '1489'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1489'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux190' direct represents '0' with '-1490'
c Var 'aux190' direct represents '1' with '1490'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1490'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux191' direct represents '0' with '-1491'
c Var 'aux191' direct represents '1' with '1491'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1491'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux192' direct represents '0' with '-1492'
c Var 'aux192' direct represents '1' with '1492'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1492'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux193' direct represents '0' with '-1493'
c Var 'aux193' direct represents '1' with '1493'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1493'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux194' direct represents '0' with '-1494'
c Var 'aux194' direct represents '1' with '1494'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1494'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux195' direct represents '0' with '-1495'
c Var 'aux195' direct represents '1' with '1495'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1495'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux196' direct represents '0' with '-1496'
c Var 'aux196' direct represents '1' with '1496'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1496'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux197' direct represents '0' with '-1497'
c Var 'aux197' direct represents '1' with '1497'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1497'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux198' direct represents '0' with '-1498'
c Var 'aux198' direct represents '1' with '1498'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1498'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux199' direct represents '0' with '-1499'
c Var 'aux199' direct represents '1' with '1499'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1499'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux200' direct represents '0' with '-1500'
c Var 'aux200' direct represents '1' with '1500'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1500'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux201' direct represents '0' with '-1501'
c Var 'aux201' direct represents '1' with '1501'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1501'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux202' direct represents '0' with '-1502'
c Var 'aux202' direct represents '1' with '1502'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1502'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux203' direct represents '0' with '-1503'
c Var 'aux203' direct represents '1' with '1503'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1503'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux204' direct represents '0' with '-1504'
c Var 'aux204' direct represents '1' with '1504'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1504'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux205' direct represents '0' with '-1505'
c Var 'aux205' direct represents '1' with '1505'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1505'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux206' direct represents '0' with '-1506'
c Var 'aux206' direct represents '1' with '1506'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1506'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux207' direct represents '0' with '-1507'
c Var 'aux207' direct represents '1' with '1507'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1507'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux208' direct represents '0' with '-1508'
c Var 'aux208' direct represents '1' with '1508'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1508'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux209' direct represents '0' with '-1509'
c Var 'aux209' direct represents '1' with '1509'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1509'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux210' direct represents '0' with '-1510'
c Var 'aux210' direct represents '1' with '1510'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1510'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux211' direct represents '0' with '-1511'
c Var 'aux211' direct represents '1' with '1511'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1511'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux212' direct represents '0' with '-1512'
c Var 'aux212' direct represents '1' with '1512'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1512'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux213' direct represents '0' with '-1513'
c Var 'aux213' direct represents '1' with '1513'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1513'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux214' direct represents '0' with '-1514'
c Var 'aux214' direct represents '1' with '1514'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1514'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux215' direct represents '0' with '-1515'
c Var 'aux215' direct represents '1' with '1515'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1515'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux216' direct represents '0' with '-1516'
c Var 'aux216' direct represents '1' with '1516'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1516'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux217' direct represents '0' with '-1517'
c Var 'aux217' direct represents '1' with '1517'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1517'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux218' direct represents '0' with '-1518'
c Var 'aux218' direct represents '1' with '1518'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1518'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux219' direct represents '0' with '-1519'
c Var 'aux219' direct represents '1' with '1519'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1519'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux220' direct represents '0' with '-1520'
c Var 'aux220' direct represents '1' with '1520'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1520'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux221' direct represents '0' with '-1521'
c Var 'aux221' direct represents '1' with '1521'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1521'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux222' direct represents '0' with '-1522'
c Var 'aux222' direct represents '1' with '1522'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1522'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux223' direct represents '0' with '-1523'
c Var 'aux223' direct represents '1' with '1523'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1523'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux224' direct represents '0' with '-1524'
c Var 'aux224' direct represents '1' with '1524'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1524'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux225' direct represents '0' with '-1525'
c Var 'aux225' direct represents '1' with '1525'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1525'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux226' direct represents '0' with '-1526'
c Var 'aux226' direct represents '1' with '1526'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1526'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux227' direct represents '0' with '-1527'
c Var 'aux227' direct represents '1' with '1527'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1527'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux228' direct represents '0' with '-1528'
c Var 'aux228' direct represents '1' with '1528'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1528'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux229' direct represents '0' with '-1529'
c Var 'aux229' direct represents '1' with '1529'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1529'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux230' direct represents '0' with '-1530'
c Var 'aux230' direct represents '1' with '1530'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1530'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux231' direct represents '0' with '-1531'
c Var 'aux231' direct represents '1' with '1531'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1531'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux232' direct represents '0' with '-1532'
c Var 'aux232' direct represents '1' with '1532'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1532'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux233' direct represents '0' with '-1533'
c Var 'aux233' direct represents '1' with '1533'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1533'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux234' direct represents '0' with '-1534'
c Var 'aux234' direct represents '1' with '1534'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1534'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux235' direct represents '0' with '-1535'
c Var 'aux235' direct represents '1' with '1535'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1535'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux236' direct represents '0' with '-1536'
c Var 'aux236' direct represents '1' with '1536'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1536'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux237' direct represents '0' with '-1537'
c Var 'aux237' direct represents '1' with '1537'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1537'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux238' direct represents '0' with '-1538'
c Var 'aux238' direct represents '1' with '1538'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1538'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux239' direct represents '0' with '-1539'
c Var 'aux239' direct represents '1' with '1539'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1539'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux240' direct represents '0' with '-1540'
c Var 'aux240' direct represents '1' with '1540'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1540'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux241' direct represents '0' with '-1541'
c Var 'aux241' direct represents '1' with '1541'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1541'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux242' direct represents '0' with '-1542'
c Var 'aux242' direct represents '1' with '1542'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1542'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux243' direct represents '0' with '-1543'
c Var 'aux243' direct represents '1' with '1543'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1543'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux244' direct represents '0' with '-1544'
c Var 'aux244' direct represents '1' with '1544'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1544'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux245' direct represents '0' with '-1545'
c Var 'aux245' direct represents '1' with '1545'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1545'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux246' direct represents '0' with '-1546'
c Var 'aux246' direct represents '1' with '1546'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1546'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux247' direct represents '0' with '-1547'
c Var 'aux247' direct represents '1' with '1547'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1547'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux248' direct represents '0' with '-1548'
c Var 'aux248' direct represents '1' with '1548'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1548'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux249' direct represents '0' with '-1549'
c Var 'aux249' direct represents '1' with '1549'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1549'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux250' direct represents '0' with '-1550'
c Var 'aux250' direct represents '1' with '1550'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1550'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux251' direct represents '0' with '-1551'
c Var 'aux251' direct represents '1' with '1551'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1551'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux252' direct represents '0' with '-1552'
c Var 'aux252' direct represents '1' with '1552'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1552'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux253' direct represents '0' with '-1553'
c Var 'aux253' direct represents '1' with '1553'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1553'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux254' direct represents '0' with '-1554'
c Var 'aux254' direct represents '1' with '1554'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1554'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux255' direct represents '0' with '-1555'
c Var 'aux255' direct represents '1' with '1555'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1555'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux256' direct represents '0' with '-1556'
c Var 'aux256' direct represents '1' with '1556'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1556'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux257' direct represents '0' with '-1557'
c Var 'aux257' direct represents '1' with '1557'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1557'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux258' direct represents '0' with '-1558'
c Var 'aux258' direct represents '1' with '1558'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1558'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux259' direct represents '0' with '-1559'
c Var 'aux259' direct represents '1' with '1559'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1559'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux260' direct represents '0' with '-1560'
c Var 'aux260' direct represents '1' with '1560'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1560'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux261' direct represents '0' with '-1561'
c Var 'aux261' direct represents '1' with '1561'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1561'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux262' direct represents '0' with '-1562'
c Var 'aux262' direct represents '1' with '1562'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1562'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux263' direct represents '0' with '-1563'
c Var 'aux263' direct represents '1' with '1563'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1563'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux264' direct represents '0' with '-1564'
c Var 'aux264' direct represents '1' with '1564'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1564'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux265' direct represents '0' with '-1565'
c Var 'aux265' direct represents '1' with '1565'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1565'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux266' direct represents '0' with '-1566'
c Var 'aux266' direct represents '1' with '1566'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1566'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux267' direct represents '0' with '-1567'
c Var 'aux267' direct represents '1' with '1567'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1567'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux268' direct represents '0' with '-1568'
c Var 'aux268' direct represents '1' with '1568'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1568'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux269' direct represents '0' with '-1569'
c Var 'aux269' direct represents '1' with '1569'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1569'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux270' direct represents '0' with '-1570'
c Var 'aux270' direct represents '1' with '1570'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1570'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux271' direct represents '0' with '-1571'
c Var 'aux271' direct represents '1' with '1571'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1571'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux272' direct represents '0' with '-1572'
c Var 'aux272' direct represents '1' with '1572'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1572'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux273' direct represents '0' with '-1573'
c Var 'aux273' direct represents '1' with '1573'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1573'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux274' direct represents '0' with '-1574'
c Var 'aux274' direct represents '1' with '1574'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1574'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux275' direct represents '0' with '-1575'
c Var 'aux275' direct represents '1' with '1575'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1575'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux276' direct represents '0' with '-1576'
c Var 'aux276' direct represents '1' with '1576'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1576'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux277' direct represents '0' with '-1577'
c Var 'aux277' direct represents '1' with '1577'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1577'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00002_00001=1) + (x_00002_00002=1))<=1))
c Var 'aux278' direct represents '0' with '-1578'
c Var 'aux278' direct represents '1' with '1578'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1578'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00002_00001=2) + (x_00002_00002=2))<=1))
c Var 'aux279' direct represents '0' with '-1579'
c Var 'aux279' direct represents '1' with '1579'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1579'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00002_00001=3) + (x_00002_00002=3))<=1))
c Var 'aux280' direct represents '0' with '-1580'
c Var 'aux280' direct represents '1' with '1580'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1580'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00002_00001=4) + (x_00002_00002=4))<=1))
c Var 'aux281' direct represents '0' with '-1581'
c Var 'aux281' direct represents '1' with '1581'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1581'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00002_00001=5) + (x_00002_00002=5))<=1))
c Var 'aux282' direct represents '0' with '-1582'
c Var 'aux282' direct represents '1' with '1582'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1582'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00002_00001=6) + (x_00002_00002=6))<=1))
c Var 'aux283' direct represents '0' with '-1583'
c Var 'aux283' direct represents '1' with '1583'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1583'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00002_00001=7) + (x_00002_00002=7))<=1))
c Var 'aux284' direct represents '0' with '-1584'
c Var 'aux284' direct represents '1' with '1584'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1584'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00002_00001=8) + (x_00002_00002=8))<=1))
c Var 'aux285' direct represents '0' with '-1585'
c Var 'aux285' direct represents '1' with '1585'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1585'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00002_00001=9) + (x_00002_00002=9))<=1))
c Var 'aux286' direct represents '0' with '-1586'
c Var 'aux286' direct represents '1' with '1586'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1586'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00001_00003=1) + (x_00002_00003=1))<=1))
c Var 'aux287' direct represents '0' with '-1587'
c Var 'aux287' direct represents '1' with '1587'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1587'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00001_00003=2) + (x_00002_00003=2))<=1))
c Var 'aux288' direct represents '0' with '-1588'
c Var 'aux288' direct represents '1' with '1588'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1588'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00001_00003=3) + (x_00002_00003=3))<=1))
c Var 'aux289' direct represents '0' with '-1589'
c Var 'aux289' direct represents '1' with '1589'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1589'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00001_00003=4) + (x_00002_00003=4))<=1))
c Var 'aux290' direct represents '0' with '-1590'
c Var 'aux290' direct represents '1' with '1590'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1590'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00001_00003=5) + (x_00002_00003=5))<=1))
c Var 'aux291' direct represents '0' with '-1591'
c Var 'aux291' direct represents '1' with '1591'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1591'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00001_00003=6) + (x_00002_00003=6))<=1))
c Var 'aux292' direct represents '0' with '-1592'
c Var 'aux292' direct represents '1' with '1592'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1592'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00001_00003=7) + (x_00002_00003=7))<=1))
c Var 'aux293' direct represents '0' with '-1593'
c Var 'aux293' direct represents '1' with '1593'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1593'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00001_00003=8) + (x_00002_00003=8))<=1))
c Var 'aux294' direct represents '0' with '-1594'
c Var 'aux294' direct represents '1' with '1594'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1594'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00001_00003=9) + (x_00002_00003=9))<=1))
c Var 'aux295' direct represents '0' with '-1595'
c Var 'aux295' direct represents '1' with '1595'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1595'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00001_00004=1) + (x_00002_00004=1))<=1))
c Var 'aux296' direct represents '0' with '-1596'
c Var 'aux296' direct represents '1' with '1596'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1596'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00001_00004=2) + (x_00002_00004=2))<=1))
c Var 'aux297' direct represents '0' with '-1597'
c Var 'aux297' direct represents '1' with '1597'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1597'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00001_00004=3) + (x_00002_00004=3))<=1))
c Var 'aux298' direct represents '0' with '-1598'
c Var 'aux298' direct represents '1' with '1598'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1598'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00001_00004=4) + (x_00002_00004=4))<=1))
c Var 'aux299' direct represents '0' with '-1599'
c Var 'aux299' direct represents '1' with '1599'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1599'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00001_00004=5) + (x_00002_00004=5))<=1))
c Var 'aux300' direct represents '0' with '-1600'
c Var 'aux300' direct represents '1' with '1600'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1600'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00001_00004=6) + (x_00002_00004=6))<=1))
c Var 'aux301' direct represents '0' with '-1601'
c Var 'aux301' direct represents '1' with '1601'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1601'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00001_00004=7) + (x_00002_00004=7))<=1))
c Var 'aux302' direct represents '0' with '-1602'
c Var 'aux302' direct represents '1' with '1602'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1602'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00001_00004=8) + (x_00002_00004=8))<=1))
c Var 'aux303' direct represents '0' with '-1603'
c Var 'aux303' direct represents '1' with '1603'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1603'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00001_00004=9) + (x_00002_00004=9))<=1))
c Var 'aux304' direct represents '0' with '-1604'
c Var 'aux304' direct represents '1' with '1604'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1604'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1))<=1))
c Var 'aux305' direct represents '0' with '-1605'
c Var 'aux305' direct represents '1' with '1605'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1605'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2))<=1))
c Var 'aux306' direct represents '0' with '-1606'
c Var 'aux306' direct represents '1' with '1606'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1606'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3))<=1))
c Var 'aux307' direct represents '0' with '-1607'
c Var 'aux307' direct represents '1' with '1607'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1607'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4))<=1))
c Var 'aux308' direct represents '0' with '-1608'
c Var 'aux308' direct represents '1' with '1608'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1608'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5))<=1))
c Var 'aux309' direct represents '0' with '-1609'
c Var 'aux309' direct represents '1' with '1609'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1609'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6))<=1))
c Var 'aux310' direct represents '0' with '-1610'
c Var 'aux310' direct represents '1' with '1610'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1610'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7))<=1))
c Var 'aux311' direct represents '0' with '-1611'
c Var 'aux311' direct represents '1' with '1611'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1611'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8))<=1))
c Var 'aux312' direct represents '0' with '-1612'
c Var 'aux312' direct represents '1' with '1612'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1612'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9))<=1))
c Var 'aux313' direct represents '0' with '-1613'
c Var 'aux313' direct represents '1' with '1613'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1613'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00001_00009=1) + (x_00002_00008=1) + (x_00002_00009=1))<=1))
c Var 'aux314' direct represents '0' with '-1614'
c Var 'aux314' direct represents '1' with '1614'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1614'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00001_00009=2) + (x_00002_00008=2) + (x_00002_00009=2))<=1))
c Var 'aux315' direct represents '0' with '-1615'
c Var 'aux315' direct represents '1' with '1615'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1615'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00001_00009=3) + (x_00002_00008=3) + (x_00002_00009=3))<=1))
c Var 'aux316' direct represents '0' with '-1616'
c Var 'aux316' direct represents '1' with '1616'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1616'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00001_00009=4) + (x_00002_00008=4) + (x_00002_00009=4))<=1))
c Var 'aux317' direct represents '0' with '-1617'
c Var 'aux317' direct represents '1' with '1617'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1617'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00001_00009=5) + (x_00002_00008=5) + (x_00002_00009=5))<=1))
c Var 'aux318' direct represents '0' with '-1618'
c Var 'aux318' direct represents '1' with '1618'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1618'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00001_00009=6) + (x_00002_00008=6) + (x_00002_00009=6))<=1))
c Var 'aux319' direct represents '0' with '-1619'
c Var 'aux319' direct represents '1' with '1619'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1619'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00001_00009=7) + (x_00002_00008=7) + (x_00002_00009=7))<=1))
c Var 'aux320' direct represents '0' with '-1620'
c Var 'aux320' direct represents '1' with '1620'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1620'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00001_00009=8) + (x_00002_00008=8) + (x_00002_00009=8))<=1))
c Var 'aux321' direct represents '0' with '-1621'
c Var 'aux321' direct represents '1' with '1621'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1621'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00001_00009=9) + (x_00002_00008=9) + (x_00002_00009=9))<=1))
c Var 'aux322' direct represents '0' with '-1622'
c Var 'aux322' direct represents '1' with '1622'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1622'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1))<=1))
c Var 'aux323' direct represents '0' with '-1623'
c Var 'aux323' direct represents '1' with '1623'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1623'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2))<=1))
c Var 'aux324' direct represents '0' with '-1624'
c Var 'aux324' direct represents '1' with '1624'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1624'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3))<=1))
c Var 'aux325' direct represents '0' with '-1625'
c Var 'aux325' direct represents '1' with '1625'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1625'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4))<=1))
c Var 'aux326' direct represents '0' with '-1626'
c Var 'aux326' direct represents '1' with '1626'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1626'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5))<=1))
c Var 'aux327' direct represents '0' with '-1627'
c Var 'aux327' direct represents '1' with '1627'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1627'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6))<=1))
c Var 'aux328' direct represents '0' with '-1628'
c Var 'aux328' direct represents '1' with '1628'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1628'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7))<=1))
c Var 'aux329' direct represents '0' with '-1629'
c Var 'aux329' direct represents '1' with '1629'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1629'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8))<=1))
c Var 'aux330' direct represents '0' with '-1630'
c Var 'aux330' direct represents '1' with '1630'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1630'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9))<=1))
c Var 'aux331' direct represents '0' with '-1631'
c Var 'aux331' direct represents '1' with '1631'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1631'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))<=1))
c Var 'aux332' direct represents '0' with '-1632'
c Var 'aux332' direct represents '1' with '1632'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1632'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))<=1))
c Var 'aux333' direct represents '0' with '-1633'
c Var 'aux333' direct represents '1' with '1633'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1633'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))<=1))
c Var 'aux334' direct represents '0' with '-1634'
c Var 'aux334' direct represents '1' with '1634'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1634'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))<=1))
c Var 'aux335' direct represents '0' with '-1635'
c Var 'aux335' direct represents '1' with '1635'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1635'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))<=1))
c Var 'aux336' direct represents '0' with '-1636'
c Var 'aux336' direct represents '1' with '1636'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1636'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))<=1))
c Var 'aux337' direct represents '0' with '-1637'
c Var 'aux337' direct represents '1' with '1637'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1637'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))<=1))
c Var 'aux338' direct represents '0' with '-1638'
c Var 'aux338' direct represents '1' with '1638'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1638'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))<=1))
c Var 'aux339' direct represents '0' with '-1639'
c Var 'aux339' direct represents '1' with '1639'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1639'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))<=1))
c Var 'aux340' direct represents '0' with '-1640'
c Var 'aux340' direct represents '1' with '1640'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1640'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00004_00003=1) + (x_00004_00004=1) + (x_00005_00004=1))<=1))
c Var 'aux341' direct represents '0' with '-1641'
c Var 'aux341' direct represents '1' with '1641'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1641'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00004_00003=2) + (x_00004_00004=2) + (x_00005_00004=2))<=1))
c Var 'aux342' direct represents '0' with '-1642'
c Var 'aux342' direct represents '1' with '1642'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1642'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00004_00003=3) + (x_00004_00004=3) + (x_00005_00004=3))<=1))
c Var 'aux343' direct represents '0' with '-1643'
c Var 'aux343' direct represents '1' with '1643'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1643'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00004_00003=4) + (x_00004_00004=4) + (x_00005_00004=4))<=1))
c Var 'aux344' direct represents '0' with '-1644'
c Var 'aux344' direct represents '1' with '1644'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1644'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00004_00003=5) + (x_00004_00004=5) + (x_00005_00004=5))<=1))
c Var 'aux345' direct represents '0' with '-1645'
c Var 'aux345' direct represents '1' with '1645'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1645'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00004_00003=6) + (x_00004_00004=6) + (x_00005_00004=6))<=1))
c Var 'aux346' direct represents '0' with '-1646'
c Var 'aux346' direct represents '1' with '1646'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1646'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00004_00003=7) + (x_00004_00004=7) + (x_00005_00004=7))<=1))
c Var 'aux347' direct represents '0' with '-1647'
c Var 'aux347' direct represents '1' with '1647'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1647'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00004_00003=8) + (x_00004_00004=8) + (x_00005_00004=8))<=1))
c Var 'aux348' direct represents '0' with '-1648'
c Var 'aux348' direct represents '1' with '1648'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1648'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00004_00003=9) + (x_00004_00004=9) + (x_00005_00004=9))<=1))
c Var 'aux349' direct represents '0' with '-1649'
c Var 'aux349' direct represents '1' with '1649'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1649'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00004_00007=1) + (x_00005_00007=1) + (x_00005_00008=1))<=1))
c Var 'aux350' direct represents '0' with '-1650'
c Var 'aux350' direct represents '1' with '1650'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1650'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00004_00007=2) + (x_00005_00007=2) + (x_00005_00008=2))<=1))
c Var 'aux351' direct represents '0' with '-1651'
c Var 'aux351' direct represents '1' with '1651'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1651'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00004_00007=3) + (x_00005_00007=3) + (x_00005_00008=3))<=1))
c Var 'aux352' direct represents '0' with '-1652'
c Var 'aux352' direct represents '1' with '1652'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1652'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00004_00007=4) + (x_00005_00007=4) + (x_00005_00008=4))<=1))
c Var 'aux353' direct represents '0' with '-1653'
c Var 'aux353' direct represents '1' with '1653'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1653'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00004_00007=5) + (x_00005_00007=5) + (x_00005_00008=5))<=1))
c Var 'aux354' direct represents '0' with '-1654'
c Var 'aux354' direct represents '1' with '1654'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1654'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00004_00007=6) + (x_00005_00007=6) + (x_00005_00008=6))<=1))
c Var 'aux355' direct represents '0' with '-1655'
c Var 'aux355' direct represents '1' with '1655'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1655'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00004_00007=7) + (x_00005_00007=7) + (x_00005_00008=7))<=1))
c Var 'aux356' direct represents '0' with '-1656'
c Var 'aux356' direct represents '1' with '1656'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1656'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00004_00007=8) + (x_00005_00007=8) + (x_00005_00008=8))<=1))
c Var 'aux357' direct represents '0' with '-1657'
c Var 'aux357' direct represents '1' with '1657'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1657'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00004_00007=9) + (x_00005_00007=9) + (x_00005_00008=9))<=1))
c Var 'aux358' direct represents '0' with '-1658'
c Var 'aux358' direct represents '1' with '1658'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1658'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00009=1))<=1))
c Var 'aux359' direct represents '0' with '-1659'
c Var 'aux359' direct represents '1' with '1659'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1659'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00009=2))<=1))
c Var 'aux360' direct represents '0' with '-1660'
c Var 'aux360' direct represents '1' with '1660'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1660'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00009=3))<=1))
c Var 'aux361' direct represents '0' with '-1661'
c Var 'aux361' direct represents '1' with '1661'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1661'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00009=4))<=1))
c Var 'aux362' direct represents '0' with '-1662'
c Var 'aux362' direct represents '1' with '1662'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1662'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00009=5))<=1))
c Var 'aux363' direct represents '0' with '-1663'
c Var 'aux363' direct represents '1' with '1663'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1663'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00009=6))<=1))
c Var 'aux364' direct represents '0' with '-1664'
c Var 'aux364' direct represents '1' with '1664'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1664'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00009=7))<=1))
c Var 'aux365' direct represents '0' with '-1665'
c Var 'aux365' direct represents '1' with '1665'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1665'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00009=8))<=1))
c Var 'aux366' direct represents '0' with '-1666'
c Var 'aux366' direct represents '1' with '1666'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1666'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00009=9))<=1))
c Var 'aux367' direct represents '0' with '-1667'
c Var 'aux367' direct represents '1' with '1667'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1667'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00005_00001=1))<=1))
c Var 'aux368' direct represents '0' with '-1668'
c Var 'aux368' direct represents '1' with '1668'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1668'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00005_00001=2))<=1))
c Var 'aux369' direct represents '0' with '-1669'
c Var 'aux369' direct represents '1' with '1669'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1669'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00005_00001=3))<=1))
c Var 'aux370' direct represents '0' with '-1670'
c Var 'aux370' direct represents '1' with '1670'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1670'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00005_00001=4))<=1))
c Var 'aux371' direct represents '0' with '-1671'
c Var 'aux371' direct represents '1' with '1671'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1671'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00005_00001=5))<=1))
c Var 'aux372' direct represents '0' with '-1672'
c Var 'aux372' direct represents '1' with '1672'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1672'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00005_00001=6))<=1))
c Var 'aux373' direct represents '0' with '-1673'
c Var 'aux373' direct represents '1' with '1673'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1673'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00005_00001=7))<=1))
c Var 'aux374' direct represents '0' with '-1674'
c Var 'aux374' direct represents '1' with '1674'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1674'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00005_00001=8))<=1))
c Var 'aux375' direct represents '0' with '-1675'
c Var 'aux375' direct represents '1' with '1675'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1675'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00005_00001=9))<=1))
c Var 'aux376' direct represents '0' with '-1676'
c Var 'aux376' direct represents '1' with '1676'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1676'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00003=1) + (x_00005_00002=1) + (x_00005_00003=1))<=1))
c Var 'aux377' direct represents '0' with '-1677'
c Var 'aux377' direct represents '1' with '1677'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1677'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00003=2) + (x_00005_00002=2) + (x_00005_00003=2))<=1))
c Var 'aux378' direct represents '0' with '-1678'
c Var 'aux378' direct represents '1' with '1678'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1678'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00003=3) + (x_00005_00002=3) + (x_00005_00003=3))<=1))
c Var 'aux379' direct represents '0' with '-1679'
c Var 'aux379' direct represents '1' with '1679'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1679'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00003=4) + (x_00005_00002=4) + (x_00005_00003=4))<=1))
c Var 'aux380' direct represents '0' with '-1680'
c Var 'aux380' direct represents '1' with '1680'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1680'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00006_00003=5) + (x_00005_00002=5) + (x_00005_00003=5))<=1))
c Var 'aux381' direct represents '0' with '-1681'
c Var 'aux381' direct represents '1' with '1681'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1681'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00006_00003=6) + (x_00005_00002=6) + (x_00005_00003=6))<=1))
c Var 'aux382' direct represents '0' with '-1682'
c Var 'aux382' direct represents '1' with '1682'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1682'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00006_00003=7) + (x_00005_00002=7) + (x_00005_00003=7))<=1))
c Var 'aux383' direct represents '0' with '-1683'
c Var 'aux383' direct represents '1' with '1683'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1683'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00006_00003=8) + (x_00005_00002=8) + (x_00005_00003=8))<=1))
c Var 'aux384' direct represents '0' with '-1684'
c Var 'aux384' direct represents '1' with '1684'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1684'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00006_00003=9) + (x_00005_00002=9) + (x_00005_00003=9))<=1))
c Var 'aux385' direct represents '0' with '-1685'
c Var 'aux385' direct represents '1' with '1685'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1685'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00005_00005=1))<=1))
c Var 'aux386' direct represents '0' with '-1686'
c Var 'aux386' direct represents '1' with '1686'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1686'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00005_00005=2))<=1))
c Var 'aux387' direct represents '0' with '-1687'
c Var 'aux387' direct represents '1' with '1687'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1687'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00005_00005=3))<=1))
c Var 'aux388' direct represents '0' with '-1688'
c Var 'aux388' direct represents '1' with '1688'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1688'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00005_00005=4))<=1))
c Var 'aux389' direct represents '0' with '-1689'
c Var 'aux389' direct represents '1' with '1689'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1689'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00005_00005=5))<=1))
c Var 'aux390' direct represents '0' with '-1690'
c Var 'aux390' direct represents '1' with '1690'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1690'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00005_00005=6))<=1))
c Var 'aux391' direct represents '0' with '-1691'
c Var 'aux391' direct represents '1' with '1691'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1691'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00005_00005=7))<=1))
c Var 'aux392' direct represents '0' with '-1692'
c Var 'aux392' direct represents '1' with '1692'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1692'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00005_00005=8))<=1))
c Var 'aux393' direct represents '0' with '-1693'
c Var 'aux393' direct represents '1' with '1693'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1693'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00005_00005=9))<=1))
c Var 'aux394' direct represents '0' with '-1694'
c Var 'aux394' direct represents '1' with '1694'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1694'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00006_00007=1) + (x_00005_00006=1))<=1))
c Var 'aux395' direct represents '0' with '-1695'
c Var 'aux395' direct represents '1' with '1695'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1695'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00006_00007=2) + (x_00005_00006=2))<=1))
c Var 'aux396' direct represents '0' with '-1696'
c Var 'aux396' direct represents '1' with '1696'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1696'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00006_00007=3) + (x_00005_00006=3))<=1))
c Var 'aux397' direct represents '0' with '-1697'
c Var 'aux397' direct represents '1' with '1697'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1697'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00006_00007=4) + (x_00005_00006=4))<=1))
c Var 'aux398' direct represents '0' with '-1698'
c Var 'aux398' direct represents '1' with '1698'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1698'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00006_00007=5) + (x_00005_00006=5))<=1))
c Var 'aux399' direct represents '0' with '-1699'
c Var 'aux399' direct represents '1' with '1699'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1699'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00006_00007=6) + (x_00005_00006=6))<=1))
c Var 'aux400' direct represents '0' with '-1700'
c Var 'aux400' direct represents '1' with '1700'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1700'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00006_00007=7) + (x_00005_00006=7))<=1))
c Var 'aux401' direct represents '0' with '-1701'
c Var 'aux401' direct represents '1' with '1701'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1701'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00006_00007=8) + (x_00005_00006=8))<=1))
c Var 'aux402' direct represents '0' with '-1702'
c Var 'aux402' direct represents '1' with '1702'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1702'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00006_00007=9) + (x_00005_00006=9))<=1))
c Var 'aux403' direct represents '0' with '-1703'
c Var 'aux403' direct represents '1' with '1703'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1703'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))<=1))
c Var 'aux404' direct represents '0' with '-1704'
c Var 'aux404' direct represents '1' with '1704'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1704'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))<=1))
c Var 'aux405' direct represents '0' with '-1705'
c Var 'aux405' direct represents '1' with '1705'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1705'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))<=1))
c Var 'aux406' direct represents '0' with '-1706'
c Var 'aux406' direct represents '1' with '1706'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1706'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))<=1))
c Var 'aux407' direct represents '0' with '-1707'
c Var 'aux407' direct represents '1' with '1707'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1707'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))<=1))
c Var 'aux408' direct represents '0' with '-1708'
c Var 'aux408' direct represents '1' with '1708'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1708'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))<=1))
c Var 'aux409' direct represents '0' with '-1709'
c Var 'aux409' direct represents '1' with '1709'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1709'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))<=1))
c Var 'aux410' direct represents '0' with '-1710'
c Var 'aux410' direct represents '1' with '1710'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1710'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))<=1))
c Var 'aux411' direct represents '0' with '-1711'
c Var 'aux411' direct represents '1' with '1711'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1711'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))<=1))
c Var 'aux412' direct represents '0' with '-1712'
c Var 'aux412' direct represents '1' with '1712'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1712'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00006=1) + (x_00009_00006=1) + (x_00007_00006=1))<=1))
c Var 'aux413' direct represents '0' with '-1713'
c Var 'aux413' direct represents '1' with '1713'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1713'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00006=2) + (x_00009_00006=2) + (x_00007_00006=2))<=1))
c Var 'aux414' direct represents '0' with '-1714'
c Var 'aux414' direct represents '1' with '1714'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1714'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00006=3) + (x_00009_00006=3) + (x_00007_00006=3))<=1))
c Var 'aux415' direct represents '0' with '-1715'
c Var 'aux415' direct represents '1' with '1715'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1715'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00006=4) + (x_00009_00006=4) + (x_00007_00006=4))<=1))
c Var 'aux416' direct represents '0' with '-1716'
c Var 'aux416' direct represents '1' with '1716'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1716'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00006=5) + (x_00009_00006=5) + (x_00007_00006=5))<=1))
c Var 'aux417' direct represents '0' with '-1717'
c Var 'aux417' direct represents '1' with '1717'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1717'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00008_00006=6) + (x_00009_00006=6) + (x_00007_00006=6))<=1))
c Var 'aux418' direct represents '0' with '-1718'
c Var 'aux418' direct represents '1' with '1718'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1718'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00008_00006=7) + (x_00009_00006=7) + (x_00007_00006=7))<=1))
c Var 'aux419' direct represents '0' with '-1719'
c Var 'aux419' direct represents '1' with '1719'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1719'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00008_00006=8) + (x_00009_00006=8) + (x_00007_00006=8))<=1))
c Var 'aux420' direct represents '0' with '-1720'
c Var 'aux420' direct represents '1' with '1720'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1720'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00008_00006=9) + (x_00009_00006=9) + (x_00007_00006=9))<=1))
c Var 'aux421' direct represents '0' with '-1721'
c Var 'aux421' direct represents '1' with '1721'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1721'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00009_00007=1) + (x_00007_00007=1))<=1))
c Var 'aux422' direct represents '0' with '-1722'
c Var 'aux422' direct represents '1' with '1722'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1722'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00009_00007=2) + (x_00007_00007=2))<=1))
c Var 'aux423' direct represents '0' with '-1723'
c Var 'aux423' direct represents '1' with '1723'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1723'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00009_00007=3) + (x_00007_00007=3))<=1))
c Var 'aux424' direct represents '0' with '-1724'
c Var 'aux424' direct represents '1' with '1724'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1724'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00009_00007=4) + (x_00007_00007=4))<=1))
c Var 'aux425' direct represents '0' with '-1725'
c Var 'aux425' direct represents '1' with '1725'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1725'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00009_00007=5) + (x_00007_00007=5))<=1))
c Var 'aux426' direct represents '0' with '-1726'
c Var 'aux426' direct represents '1' with '1726'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1726'
c Encoding variable: aux427 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00009_00007=6) + (x_00007_00007=6))<=1))
c Var 'aux427' direct represents '0' with '-1727'
c Var 'aux427' direct represents '1' with '1727'
c Var 'aux427' order represents '1' with '1'
c Var 'aux427' order represents '0' with '-1727'
c Encoding variable: aux428 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00009_00007=7) + (x_00007_00007=7))<=1))
c Var 'aux428' direct represents '0' with '-1728'
c Var 'aux428' direct represents '1' with '1728'
c Var 'aux428' order represents '1' with '1'
c Var 'aux428' order represents '0' with '-1728'
c Encoding variable: aux429 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00009_00007=8) + (x_00007_00007=8))<=1))
c Var 'aux429' direct represents '0' with '-1729'
c Var 'aux429' direct represents '1' with '1729'
c Var 'aux429' order represents '1' with '1'
c Var 'aux429' order represents '0' with '-1729'
c Encoding variable: aux430 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00009_00007=9) + (x_00007_00007=9))<=1))
c Var 'aux430' direct represents '0' with '-1730'
c Var 'aux430' direct represents '1' with '1730'
c Var 'aux430' order represents '1' with '1'
c Var 'aux430' order represents '0' with '-1730'
c Encoding variable: aux431 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00009_00001=1))<=1))
c Var 'aux431' direct represents '0' with '-1731'
c Var 'aux431' direct represents '1' with '1731'
c Var 'aux431' order represents '1' with '1'
c Var 'aux431' order represents '0' with '-1731'
c Encoding variable: aux432 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00009_00001=2))<=1))
c Var 'aux432' direct represents '0' with '-1732'
c Var 'aux432' direct represents '1' with '1732'
c Var 'aux432' order represents '1' with '1'
c Var 'aux432' order represents '0' with '-1732'
c Encoding variable: aux433 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00009_00001=3))<=1))
c Var 'aux433' direct represents '0' with '-1733'
c Var 'aux433' direct represents '1' with '1733'
c Var 'aux433' order represents '1' with '1'
c Var 'aux433' order represents '0' with '-1733'
c Encoding variable: aux434 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00009_00001=4))<=1))
c Var 'aux434' direct represents '0' with '-1734'
c Var 'aux434' direct represents '1' with '1734'
c Var 'aux434' order represents '1' with '1'
c Var 'aux434' order represents '0' with '-1734'
c Encoding variable: aux435 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00009_00001=5))<=1))
c Var 'aux435' direct represents '0' with '-1735'
c Var 'aux435' direct represents '1' with '1735'
c Var 'aux435' order represents '1' with '1'
c Var 'aux435' order represents '0' with '-1735'
c Encoding variable: aux436 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00009_00001=6))<=1))
c Var 'aux436' direct represents '0' with '-1736'
c Var 'aux436' direct represents '1' with '1736'
c Var 'aux436' order represents '1' with '1'
c Var 'aux436' order represents '0' with '-1736'
c Encoding variable: aux437 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00009_00001=7))<=1))
c Var 'aux437' direct represents '0' with '-1737'
c Var 'aux437' direct represents '1' with '1737'
c Var 'aux437' order represents '1' with '1'
c Var 'aux437' order represents '0' with '-1737'
c Encoding variable: aux438 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00009_00001=8))<=1))
c Var 'aux438' direct represents '0' with '-1738'
c Var 'aux438' direct represents '1' with '1738'
c Var 'aux438' order represents '1' with '1'
c Var 'aux438' order represents '0' with '-1738'
c Encoding variable: aux439 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00009_00001=9))<=1))
c Var 'aux439' direct represents '0' with '-1739'
c Var 'aux439' direct represents '1' with '1739'
c Var 'aux439' order represents '1' with '1'
c Var 'aux439' order represents '0' with '-1739'
c Encoding variable: aux440 with domain: bool (representing constraint (((x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1))<=1))
c Var 'aux440' direct represents '0' with '-1740'
c Var 'aux440' direct represents '1' with '1740'
c Var 'aux440' order represents '1' with '1'
c Var 'aux440' order represents '0' with '-1740'
c Encoding variable: aux441 with domain: bool (representing constraint (((x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2))<=1))
c Var 'aux441' direct represents '0' with '-1741'
c Var 'aux441' direct represents '1' with '1741'
c Var 'aux441' order represents '1' with '1'
c Var 'aux441' order represents '0' with '-1741'
c Encoding variable: aux442 with domain: bool (representing constraint (((x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3))<=1))
c Var 'aux442' direct represents '0' with '-1742'
c Var 'aux442' direct represents '1' with '1742'
c Var 'aux442' order represents '1' with '1'
c Var 'aux442' order represents '0' with '-1742'
c Encoding variable: aux443 with domain: bool (representing constraint (((x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4))<=1))
c Var 'aux443' direct represents '0' with '-1743'
c Var 'aux443' direct represents '1' with '1743'
c Var 'aux443' order represents '1' with '1'
c Var 'aux443' order represents '0' with '-1743'
c Encoding variable: aux444 with domain: bool (representing constraint (((x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5))<=1))
c Var 'aux444' direct represents '0' with '-1744'
c Var 'aux444' direct represents '1' with '1744'
c Var 'aux444' order represents '1' with '1'
c Var 'aux444' order represents '0' with '-1744'
c Encoding variable: aux445 with domain: bool (representing constraint (((x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6))<=1))
c Var 'aux445' direct represents '0' with '-1745'
c Var 'aux445' direct represents '1' with '1745'
c Var 'aux445' order represents '1' with '1'
c Var 'aux445' order represents '0' with '-1745'
c Encoding variable: aux446 with domain: bool (representing constraint (((x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7))<=1))
c Var 'aux446' direct represents '0' with '-1746'
c Var 'aux446' direct represents '1' with '1746'
c Var 'aux446' order represents '1' with '1'
c Var 'aux446' order represents '0' with '-1746'
c Encoding variable: aux447 with domain: bool (representing constraint (((x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8))<=1))
c Var 'aux447' direct represents '0' with '-1747'
c Var 'aux447' direct represents '1' with '1747'
c Var 'aux447' order represents '1' with '1'
c Var 'aux447' order represents '0' with '-1747'
c Encoding variable: aux448 with domain: bool (representing constraint (((x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9))<=1))
c Var 'aux448' direct represents '0' with '-1748'
c Var 'aux448' direct represents '1' with '1748'
c Var 'aux448' order represents '1' with '1'
c Var 'aux448' order represents '0' with '-1748'
c Encoding variable: aux449 with domain: bool (representing constraint (((x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00008=1) + (x_00009_00009=1))<=1))
c Var 'aux449' direct represents '0' with '-1749'
c Var 'aux449' direct represents '1' with '1749'
c Var 'aux449' order represents '1' with '1'
c Var 'aux449' order represents '0' with '-1749'
c Encoding variable: aux450 with domain: bool (representing constraint (((x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00008=2) + (x_00009_00009=2))<=1))
c Var 'aux450' direct represents '0' with '-1750'
c Var 'aux450' direct represents '1' with '1750'
c Var 'aux450' order represents '1' with '1'
c Var 'aux450' order represents '0' with '-1750'
c Encoding variable: aux451 with domain: bool (representing constraint (((x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00008=3) + (x_00009_00009=3))<=1))
c Var 'aux451' direct represents '0' with '-1751'
c Var 'aux451' direct represents '1' with '1751'
c Var 'aux451' order represents '1' with '1'
c Var 'aux451' order represents '0' with '-1751'
c Encoding variable: aux452 with domain: bool (representing constraint (((x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00008=4) + (x_00009_00009=4))<=1))
c Var 'aux452' direct represents '0' with '-1752'
c Var 'aux452' direct represents '1' with '1752'
c Var 'aux452' order represents '1' with '1'
c Var 'aux452' order represents '0' with '-1752'
c Encoding variable: aux453 with domain: bool (representing constraint (((x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00008=5) + (x_00009_00009=5))<=1))
c Var 'aux453' direct represents '0' with '-1753'
c Var 'aux453' direct represents '1' with '1753'
c Var 'aux453' order represents '1' with '1'
c Var 'aux453' order represents '0' with '-1753'
c Encoding variable: aux454 with domain: bool (representing constraint (((x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00008=6) + (x_00009_00009=6))<=1))
c Var 'aux454' direct represents '0' with '-1754'
c Var 'aux454' direct represents '1' with '1754'
c Var 'aux454' order represents '1' with '1'
c Var 'aux454' order represents '0' with '-1754'
c Encoding variable: aux455 with domain: bool (representing constraint (((x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00008=7) + (x_00009_00009=7))<=1))
c Var 'aux455' direct represents '0' with '-1755'
c Var 'aux455' direct represents '1' with '1755'
c Var 'aux455' order represents '1' with '1'
c Var 'aux455' order represents '0' with '-1755'
c Encoding variable: aux456 with domain: bool (representing constraint (((x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00008=8) + (x_00009_00009=8))<=1))
c Var 'aux456' direct represents '0' with '-1756'
c Var 'aux456' direct represents '1' with '1756'
c Var 'aux456' order represents '1' with '1'
c Var 'aux456' order represents '0' with '-1756'
c Encoding variable: aux457 with domain: bool (representing constraint (((x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00008=9) + (x_00009_00009=9))<=1))
c Var 'aux457' direct represents '0' with '-1757'
c Var 'aux457' direct represents '1' with '1757'
c Var 'aux457' order represents '1' with '1'
c Var 'aux457' order represents '0' with '-1757'
c Encoding variable: aux458 with domain: bool (representing constraint (((x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1))<=1))
c Var 'aux458' direct represents '0' with '-1758'
c Var 'aux458' direct represents '1' with '1758'
c Var 'aux458' order represents '1' with '1'
c Var 'aux458' order represents '0' with '-1758'
c Encoding variable: aux459 with domain: bool (representing constraint (((x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2))<=1))
c Var 'aux459' direct represents '0' with '-1759'
c Var 'aux459' direct represents '1' with '1759'
c Var 'aux459' order represents '1' with '1'
c Var 'aux459' order represents '0' with '-1759'
c Encoding variable: aux460 with domain: bool (representing constraint (((x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3))<=1))
c Var 'aux460' direct represents '0' with '-1760'
c Var 'aux460' direct represents '1' with '1760'
c Var 'aux460' order represents '1' with '1'
c Var 'aux460' order represents '0' with '-1760'
c Encoding variable: aux461 with domain: bool (representing constraint (((x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4))<=1))
c Var 'aux461' direct represents '0' with '-1761'
c Var 'aux461' direct represents '1' with '1761'
c Var 'aux461' order represents '1' with '1'
c Var 'aux461' order represents '0' with '-1761'
c Encoding variable: aux462 with domain: bool (representing constraint (((x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5))<=1))
c Var 'aux462' direct represents '0' with '-1762'
c Var 'aux462' direct represents '1' with '1762'
c Var 'aux462' order represents '1' with '1'
c Var 'aux462' order represents '0' with '-1762'
c Encoding variable: aux463 with domain: bool (representing constraint (((x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6))<=1))
c Var 'aux463' direct represents '0' with '-1763'
c Var 'aux463' direct represents '1' with '1763'
c Var 'aux463' order represents '1' with '1'
c Var 'aux463' order represents '0' with '-1763'
c Encoding variable: aux464 with domain: bool (representing constraint (((x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7))<=1))
c Var 'aux464' direct represents '0' with '-1764'
c Var 'aux464' direct represents '1' with '1764'
c Var 'aux464' order represents '1' with '1'
c Var 'aux464' order represents '0' with '-1764'
c Encoding variable: aux465 with domain: bool (representing constraint (((x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8))<=1))
c Var 'aux465' direct represents '0' with '-1765'
c Var 'aux465' direct represents '1' with '1765'
c Var 'aux465' order represents '1' with '1'
c Var 'aux465' order represents '0' with '-1765'
c Encoding variable: aux466 with domain: bool (representing constraint (((x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9))<=1))
c Var 'aux466' direct represents '0' with '-1766'
c Var 'aux466' direct represents '1' with '1766'
c Var 'aux466' order represents '1' with '1'
c Var 'aux466' order represents '0' with '-1766'
c Encoding variable: aux467 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00001_00002, -1)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '1767'
c Var 'aux467' direct represents '0' with '1767'
c Var 'aux467' order represents '1' with '1768'
-1767 1768 0
c Var 'aux467' direct represents '1' with '1769'
1767 -1768 1769 0
-1769 1768 0
-1769 -1767 0
c Var 'aux467' order represents '2' with '1770'
-1768 1770 0
c Var 'aux467' direct represents '2' with '1771'
1768 -1770 1771 0
-1771 1770 0
-1771 -1768 0
c Var 'aux467' order represents '3' with '1772'
-1770 1772 0
c Var 'aux467' direct represents '3' with '1773'
1770 -1772 1773 0
-1773 1772 0
-1773 -1770 0
c Var 'aux467' order represents '4' with '1774'
-1772 1774 0
c Var 'aux467' direct represents '4' with '1775'
1772 -1774 1775 0
-1775 1774 0
-1775 -1772 0
c Var 'aux467' order represents '5' with '1776'
-1774 1776 0
c Var 'aux467' direct represents '5' with '1777'
1774 -1776 1777 0
-1777 1776 0
-1777 -1774 0
c Var 'aux467' order represents '6' with '1778'
-1776 1778 0
c Var 'aux467' direct represents '6' with '1779'
1776 -1778 1779 0
-1779 1778 0
-1779 -1776 0
c Var 'aux467' order represents '7' with '1780'
-1778 1780 0
c Var 'aux467' direct represents '7' with '1781'
1778 -1780 1781 0
-1781 1780 0
-1781 -1778 0
c Var 'aux467' order represents '8' with '1782'
-1780 1782 0
c Var 'aux467' direct represents '8' with '1783'
1780 -1782 1783 0
-1783 1782 0
-1783 -1780 0
c Var 'aux467' order represents '9' with '1784'
-1782 1784 0
c Var 'aux467' direct represents '9' with '1785'
1782 -1784 1785 0
-1785 1784 0
-1785 -1782 0
c Var 'aux467' order represents '10' with '1786'
-1784 1786 0
c Var 'aux467' direct represents '10' with '1787'
1784 -1786 1787 0
-1787 1786 0
-1787 -1784 0
c Var 'aux467' order represents '11' with '1788'
-1786 1788 0
c Var 'aux467' direct represents '11' with '1789'
1786 -1788 1789 0
-1789 1788 0
-1789 -1786 0
c Var 'aux467' order represents '12' with '1790'
-1788 1790 0
c Var 'aux467' direct represents '12' with '1791'
1788 -1790 1791 0
-1791 1790 0
-1791 -1788 0
c Var 'aux467' order represents '13' with '1792'
-1790 1792 0
c Var 'aux467' direct represents '13' with '1793'
1790 -1792 1793 0
-1793 1792 0
-1793 -1790 0
c Var 'aux467' order represents '14' with '1794'
-1792 1794 0
c Var 'aux467' direct represents '14' with '1795'
1792 -1794 1795 0
-1795 1794 0
-1795 -1792 0
c Var 'aux467' order represents '15' with '1796'
-1794 1796 0
c Var 'aux467' direct represents '15' with '1797'
1794 -1796 1797 0
-1797 1796 0
-1797 -1794 0
c Var 'aux467' direct represents '16' with '-1796'
1767 1769 1771 1773 1775 1777 1779 1781 1783 1785 1787 1789 1791 1793 1795 1797 -1796 0
c Encoding variable: aux468 with domain: int(0..16) (representing constraint (shift(x_00001_00005, -1) + shift(x_00001_00008, -1)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '1798'
c Var 'aux468' direct represents '0' with '1798'
c Var 'aux468' order represents '1' with '1799'
-1798 1799 0
c Var 'aux468' direct represents '1' with '1800'
1798 -1799 1800 0
-1800 1799 0
-1800 -1798 0
c Var 'aux468' order represents '2' with '1801'
-1799 1801 0
c Var 'aux468' direct represents '2' with '1802'
1799 -1801 1802 0
-1802 1801 0
-1802 -1799 0
c Var 'aux468' order represents '3' with '1803'
-1801 1803 0
c Var 'aux468' direct represents '3' with '1804'
1801 -1803 1804 0
-1804 1803 0
-1804 -1801 0
c Var 'aux468' order represents '4' with '1805'
-1803 1805 0
c Var 'aux468' direct represents '4' with '1806'
1803 -1805 1806 0
-1806 1805 0
-1806 -1803 0
c Var 'aux468' order represents '5' with '1807'
-1805 1807 0
c Var 'aux468' direct represents '5' with '1808'
1805 -1807 1808 0
-1808 1807 0
-1808 -1805 0
c Var 'aux468' order represents '6' with '1809'
-1807 1809 0
c Var 'aux468' direct represents '6' with '1810'
1807 -1809 1810 0
-1810 1809 0
-1810 -1807 0
c Var 'aux468' order represents '7' with '1811'
-1809 1811 0
c Var 'aux468' direct represents '7' with '1812'
1809 -1811 1812 0
-1812 1811 0
-1812 -1809 0
c Var 'aux468' order represents '8' with '1813'
-1811 1813 0
c Var 'aux468' direct represents '8' with '1814'
1811 -1813 1814 0
-1814 1813 0
-1814 -1811 0
c Var 'aux468' order represents '9' with '1815'
-1813 1815 0
c Var 'aux468' direct represents '9' with '1816'
1813 -1815 1816 0
-1816 1815 0
-1816 -1813 0
c Var 'aux468' order represents '10' with '1817'
-1815 1817 0
c Var 'aux468' direct represents '10' with '1818'
1815 -1817 1818 0
-1818 1817 0
-1818 -1815 0
c Var 'aux468' order represents '11' with '1819'
-1817 1819 0
c Var 'aux468' direct represents '11' with '1820'
1817 -1819 1820 0
-1820 1819 0
-1820 -1817 0
c Var 'aux468' order represents '12' with '1821'
-1819 1821 0
c Var 'aux468' direct represents '12' with '1822'
1819 -1821 1822 0
-1822 1821 0
-1822 -1819 0
c Var 'aux468' order represents '13' with '1823'
-1821 1823 0
c Var 'aux468' direct represents '13' with '1824'
1821 -1823 1824 0
-1824 1823 0
-1824 -1821 0
c Var 'aux468' order represents '14' with '1825'
-1823 1825 0
c Var 'aux468' direct represents '14' with '1826'
1823 -1825 1826 0
-1826 1825 0
-1826 -1823 0
c Var 'aux468' order represents '15' with '1827'
-1825 1827 0
c Var 'aux468' direct represents '15' with '1828'
1825 -1827 1828 0
-1828 1827 0
-1828 -1825 0
c Var 'aux468' direct represents '16' with '-1827'
1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 -1827 0
c Encoding variable: aux469 with domain: int(0..16) (representing constraint (shift(x_00008_00008, -1) + shift(x_00009_00009, -1)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '1829'
c Var 'aux469' direct represents '0' with '1829'
c Var 'aux469' order represents '1' with '1830'
-1829 1830 0
c Var 'aux469' direct represents '1' with '1831'
1829 -1830 1831 0
-1831 1830 0
-1831 -1829 0
c Var 'aux469' order represents '2' with '1832'
-1830 1832 0
c Var 'aux469' direct represents '2' with '1833'
1830 -1832 1833 0
-1833 1832 0
-1833 -1830 0
c Var 'aux469' order represents '3' with '1834'
-1832 1834 0
c Var 'aux469' direct represents '3' with '1835'
1832 -1834 1835 0
-1835 1834 0
-1835 -1832 0
c Var 'aux469' order represents '4' with '1836'
-1834 1836 0
c Var 'aux469' direct represents '4' with '1837'
1834 -1836 1837 0
-1837 1836 0
-1837 -1834 0
c Var 'aux469' order represents '5' with '1838'
-1836 1838 0
c Var 'aux469' direct represents '5' with '1839'
1836 -1838 1839 0
-1839 1838 0
-1839 -1836 0
c Var 'aux469' order represents '6' with '1840'
-1838 1840 0
c Var 'aux469' direct represents '6' with '1841'
1838 -1840 1841 0
-1841 1840 0
-1841 -1838 0
c Var 'aux469' order represents '7' with '1842'
-1840 1842 0
c Var 'aux469' direct represents '7' with '1843'
1840 -1842 1843 0
-1843 1842 0
-1843 -1840 0
c Var 'aux469' order represents '8' with '1844'
-1842 1844 0
c Var 'aux469' direct represents '8' with '1845'
1842 -1844 1845 0
-1845 1844 0
-1845 -1842 0
c Var 'aux469' order represents '9' with '1846'
-1844 1846 0
c Var 'aux469' direct represents '9' with '1847'
1844 -1846 1847 0
-1847 1846 0
-1847 -1844 0
c Var 'aux469' order represents '10' with '1848'
-1846 1848 0
c Var 'aux469' direct represents '10' with '1849'
1846 -1848 1849 0
-1849 1848 0
-1849 -1846 0
c Var 'aux469' order represents '11' with '1850'
-1848 1850 0
c Var 'aux469' direct represents '11' with '1851'
1848 -1850 1851 0
-1851 1850 0
-1851 -1848 0
c Var 'aux469' order represents '12' with '1852'
-1850 1852 0
c Var 'aux469' direct represents '12' with '1853'
1850 -1852 1853 0
-1853 1852 0
-1853 -1850 0
c Var 'aux469' order represents '13' with '1854'
-1852 1854 0
c Var 'aux469' direct represents '13' with '1855'
1852 -1854 1855 0
-1855 1854 0
-1855 -1852 0
c Var 'aux469' order represents '14' with '1856'
-1854 1856 0
c Var 'aux469' direct represents '14' with '1857'
1854 -1856 1857 0
-1857 1856 0
-1857 -1854 0
c Var 'aux469' order represents '15' with '1858'
-1856 1858 0
c Var 'aux469' direct represents '15' with '1859'
1856 -1858 1859 0
-1859 1858 0
-1859 -1856 0
c Var 'aux469' direct represents '16' with '-1858'
1829 1831 1833 1835 1837 1839 1841 1843 1845 1847 1849 1851 1853 1855 1857 1859 -1858 0
c Encoding variable: aux470 with domain: int(0..16) (representing constraint (shift(x_00009_00002, -1) + shift(x_00009_00005, -1)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '1860'
c Var 'aux470' direct represents '0' with '1860'
c Var 'aux470' order represents '1' with '1861'
-1860 1861 0
c Var 'aux470' direct represents '1' with '1862'
1860 -1861 1862 0
-1862 1861 0
-1862 -1860 0
c Var 'aux470' order represents '2' with '1863'
-1861 1863 0
c Var 'aux470' direct represents '2' with '1864'
1861 -1863 1864 0
-1864 1863 0
-1864 -1861 0
c Var 'aux470' order represents '3' with '1865'
-1863 1865 0
c Var 'aux470' direct represents '3' with '1866'
1863 -1865 1866 0
-1866 1865 0
-1866 -1863 0
c Var 'aux470' order represents '4' with '1867'
-1865 1867 0
c Var 'aux470' direct represents '4' with '1868'
1865 -1867 1868 0
-1868 1867 0
-1868 -1865 0
c Var 'aux470' order represents '5' with '1869'
-1867 1869 0
c Var 'aux470' direct represents '5' with '1870'
1867 -1869 1870 0
-1870 1869 0
-1870 -1867 0
c Var 'aux470' order represents '6' with '1871'
-1869 1871 0
c Var 'aux470' direct represents '6' with '1872'
1869 -1871 1872 0
-1872 1871 0
-1872 -1869 0
c Var 'aux470' order represents '7' with '1873'
-1871 1873 0
c Var 'aux470' direct represents '7' with '1874'
1871 -1873 1874 0
-1874 1873 0
-1874 -1871 0
c Var 'aux470' order represents '8' with '1875'
-1873 1875 0
c Var 'aux470' direct represents '8' with '1876'
1873 -1875 1876 0
-1876 1875 0
-1876 -1873 0
c Var 'aux470' order represents '9' with '1877'
-1875 1877 0
c Var 'aux470' direct represents '9' with '1878'
1875 -1877 1878 0
-1878 1877 0
-1878 -1875 0
c Var 'aux470' order represents '10' with '1879'
-1877 1879 0
c Var 'aux470' direct represents '10' with '1880'
1877 -1879 1880 0
-1880 1879 0
-1880 -1877 0
c Var 'aux470' order represents '11' with '1881'
-1879 1881 0
c Var 'aux470' direct represents '11' with '1882'
1879 -1881 1882 0
-1882 1881 0
-1882 -1879 0
c Var 'aux470' order represents '12' with '1883'
-1881 1883 0
c Var 'aux470' direct represents '12' with '1884'
1881 -1883 1884 0
-1884 1883 0
-1884 -1881 0
c Var 'aux470' order represents '13' with '1885'
-1883 1885 0
c Var 'aux470' direct represents '13' with '1886'
1883 -1885 1886 0
-1886 1885 0
-1886 -1883 0
c Var 'aux470' order represents '14' with '1887'
-1885 1887 0
c Var 'aux470' direct represents '14' with '1888'
1885 -1887 1888 0
-1888 1887 0
-1888 -1885 0
c Var 'aux470' order represents '15' with '1889'
-1887 1889 0
c Var 'aux470' direct represents '15' with '1890'
1887 -1889 1890 0
-1890 1889 0
-1890 -1887 0
c Var 'aux470' direct represents '16' with '-1889'
1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 -1889 0
c Encoding variable: aux471 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '1891'
c Var 'aux471' direct represents '0' with '1891'
c Var 'aux471' order represents '1' with '1892'
-1891 1892 0
c Var 'aux471' direct represents '1' with '1893'
1891 -1892 1893 0
-1893 1892 0
-1893 -1891 0
c Var 'aux471' direct represents '2' with '-1892'
1891 1893 -1892 0
c Encoding variable: aux472 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '1894'
c Var 'aux472' direct represents '0' with '1894'
c Var 'aux472' order represents '1' with '1895'
-1894 1895 0
c Var 'aux472' direct represents '1' with '1896'
1894 -1895 1896 0
-1896 1895 0
-1896 -1894 0
c Var 'aux472' direct represents '2' with '-1895'
1894 1896 -1895 0
c Encoding variable: aux473 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '1897'
c Var 'aux473' direct represents '0' with '1897'
c Var 'aux473' order represents '1' with '1898'
-1897 1898 0
c Var 'aux473' direct represents '1' with '1899'
1897 -1898 1899 0
-1899 1898 0
-1899 -1897 0
c Var 'aux473' direct represents '2' with '-1898'
1897 1899 -1898 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '1900'
c Var 'aux474' direct represents '0' with '1900'
c Var 'aux474' order represents '1' with '1901'
-1900 1901 0
c Var 'aux474' direct represents '1' with '1902'
1900 -1901 1902 0
-1902 1901 0
-1902 -1900 0
c Var 'aux474' direct represents '2' with '-1901'
1900 1902 -1901 0
c Encoding variable: aux475 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux474))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '1903'
c Var 'aux475' direct represents '0' with '1903'
c Var 'aux475' order represents '1' with '1904'
-1903 1904 0
c Var 'aux475' direct represents '1' with '1905'
1903 -1904 1905 0
-1905 1904 0
-1905 -1903 0
c Var 'aux475' order represents '2' with '1906'
-1904 1906 0
c Var 'aux475' direct represents '2' with '1907'
1904 -1906 1907 0
-1907 1906 0
-1907 -1904 0
c Var 'aux475' direct represents '3' with '-1906'
1903 1905 1907 -1906 0
c Encoding variable: aux476 with domain: int(0..4) (representing constraint (aux471 + aux473))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '1908'
c Var 'aux476' direct represents '0' with '1908'
c Var 'aux476' order represents '1' with '1909'
-1908 1909 0
c Var 'aux476' direct represents '1' with '1910'
1908 -1909 1910 0
-1910 1909 0
-1910 -1908 0
c Var 'aux476' order represents '2' with '1911'
-1909 1911 0
c Var 'aux476' direct represents '2' with '1912'
1909 -1911 1912 0
-1912 1911 0
-1912 -1909 0
c Var 'aux476' order represents '3' with '1913'
-1911 1913 0
c Var 'aux476' direct represents '3' with '1914'
1911 -1913 1914 0
-1914 1913 0
-1914 -1911 0
c Var 'aux476' direct represents '4' with '-1913'
1908 1910 1912 1914 -1913 0
c Encoding variable: aux477 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '1915'
c Var 'aux477' direct represents '0' with '1915'
c Var 'aux477' order represents '1' with '1916'
-1915 1916 0
c Var 'aux477' direct represents '1' with '1917'
1915 -1916 1917 0
-1917 1916 0
-1917 -1915 0
c Var 'aux477' direct represents '2' with '-1916'
1915 1917 -1916 0
c Encoding variable: aux478 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '1918'
c Var 'aux478' direct represents '0' with '1918'
c Var 'aux478' order represents '1' with '1919'
-1918 1919 0
c Var 'aux478' direct represents '1' with '1920'
1918 -1919 1920 0
-1920 1919 0
-1920 -1918 0
c Var 'aux478' direct represents '2' with '-1919'
1918 1920 -1919 0
c Encoding variable: aux479 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '1921'
c Var 'aux479' direct represents '0' with '1921'
c Var 'aux479' order represents '1' with '1922'
-1921 1922 0
c Var 'aux479' direct represents '1' with '1923'
1921 -1922 1923 0
-1923 1922 0
-1923 -1921 0
c Var 'aux479' direct represents '2' with '-1922'
1921 1923 -1922 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '1924'
c Var 'aux480' direct represents '0' with '1924'
c Var 'aux480' order represents '1' with '1925'
-1924 1925 0
c Var 'aux480' direct represents '1' with '1926'
1924 -1925 1926 0
-1926 1925 0
-1926 -1924 0
c Var 'aux480' direct represents '2' with '-1925'
1924 1926 -1925 0
c Encoding variable: aux481 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux480))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '1927'
c Var 'aux481' direct represents '0' with '1927'
c Var 'aux481' order represents '1' with '1928'
-1927 1928 0
c Var 'aux481' direct represents '1' with '1929'
1927 -1928 1929 0
-1929 1928 0
-1929 -1927 0
c Var 'aux481' order represents '2' with '1930'
-1928 1930 0
c Var 'aux481' direct represents '2' with '1931'
1928 -1930 1931 0
-1931 1930 0
-1931 -1928 0
c Var 'aux481' direct represents '3' with '-1930'
1927 1929 1931 -1930 0
c Encoding variable: aux482 with domain: int(0..4) (representing constraint (aux477 + aux479))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '1932'
c Var 'aux482' direct represents '0' with '1932'
c Var 'aux482' order represents '1' with '1933'
-1932 1933 0
c Var 'aux482' direct represents '1' with '1934'
1932 -1933 1934 0
-1934 1933 0
-1934 -1932 0
c Var 'aux482' order represents '2' with '1935'
-1933 1935 0
c Var 'aux482' direct represents '2' with '1936'
1933 -1935 1936 0
-1936 1935 0
-1936 -1933 0
c Var 'aux482' order represents '3' with '1937'
-1935 1937 0
c Var 'aux482' direct represents '3' with '1938'
1935 -1937 1938 0
-1938 1937 0
-1938 -1935 0
c Var 'aux482' direct represents '4' with '-1937'
1932 1934 1936 1938 -1937 0
c Encoding variable: aux483 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '1939'
c Var 'aux483' direct represents '0' with '1939'
c Var 'aux483' order represents '1' with '1940'
-1939 1940 0
c Var 'aux483' direct represents '1' with '1941'
1939 -1940 1941 0
-1941 1940 0
-1941 -1939 0
c Var 'aux483' direct represents '2' with '-1940'
1939 1941 -1940 0
c Encoding variable: aux484 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '1942'
c Var 'aux484' direct represents '0' with '1942'
c Var 'aux484' order represents '1' with '1943'
-1942 1943 0
c Var 'aux484' direct represents '1' with '1944'
1942 -1943 1944 0
-1944 1943 0
-1944 -1942 0
c Var 'aux484' direct represents '2' with '-1943'
1942 1944 -1943 0
c Encoding variable: aux485 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '1945'
c Var 'aux485' direct represents '0' with '1945'
c Var 'aux485' order represents '1' with '1946'
-1945 1946 0
c Var 'aux485' direct represents '1' with '1947'
1945 -1946 1947 0
-1947 1946 0
-1947 -1945 0
c Var 'aux485' direct represents '2' with '-1946'
1945 1947 -1946 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '1948'
c Var 'aux486' direct represents '0' with '1948'
c Var 'aux486' order represents '1' with '1949'
-1948 1949 0
c Var 'aux486' direct represents '1' with '1950'
1948 -1949 1950 0
-1950 1949 0
-1950 -1948 0
c Var 'aux486' direct represents '2' with '-1949'
1948 1950 -1949 0
c Encoding variable: aux487 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux486))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '1951'
c Var 'aux487' direct represents '0' with '1951'
c Var 'aux487' order represents '1' with '1952'
-1951 1952 0
c Var 'aux487' direct represents '1' with '1953'
1951 -1952 1953 0
-1953 1952 0
-1953 -1951 0
c Var 'aux487' order represents '2' with '1954'
-1952 1954 0
c Var 'aux487' direct represents '2' with '1955'
1952 -1954 1955 0
-1955 1954 0
-1955 -1952 0
c Var 'aux487' direct represents '3' with '-1954'
1951 1953 1955 -1954 0
c Encoding variable: aux488 with domain: int(0..4) (representing constraint (aux483 + aux485))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '1956'
c Var 'aux488' direct represents '0' with '1956'
c Var 'aux488' order represents '1' with '1957'
-1956 1957 0
c Var 'aux488' direct represents '1' with '1958'
1956 -1957 1958 0
-1958 1957 0
-1958 -1956 0
c Var 'aux488' order represents '2' with '1959'
-1957 1959 0
c Var 'aux488' direct represents '2' with '1960'
1957 -1959 1960 0
-1960 1959 0
-1960 -1957 0
c Var 'aux488' order represents '3' with '1961'
-1959 1961 0
c Var 'aux488' direct represents '3' with '1962'
1959 -1961 1962 0
-1962 1961 0
-1962 -1959 0
c Var 'aux488' direct represents '4' with '-1961'
1956 1958 1960 1962 -1961 0
c Encoding variable: aux489 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '1963'
c Var 'aux489' direct represents '0' with '1963'
c Var 'aux489' order represents '1' with '1964'
-1963 1964 0
c Var 'aux489' direct represents '1' with '1965'
1963 -1964 1965 0
-1965 1964 0
-1965 -1963 0
c Var 'aux489' direct represents '2' with '-1964'
1963 1965 -1964 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '1966'
c Var 'aux490' direct represents '0' with '1966'
c Var 'aux490' order represents '1' with '1967'
-1966 1967 0
c Var 'aux490' direct represents '1' with '1968'
1966 -1967 1968 0
-1968 1967 0
-1968 -1966 0
c Var 'aux490' direct represents '2' with '-1967'
1966 1968 -1967 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '1969'
c Var 'aux491' direct represents '0' with '1969'
c Var 'aux491' order represents '1' with '1970'
-1969 1970 0
c Var 'aux491' direct represents '1' with '1971'
1969 -1970 1971 0
-1971 1970 0
-1971 -1969 0
c Var 'aux491' direct represents '2' with '-1970'
1969 1971 -1970 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '1972'
c Var 'aux492' direct represents '0' with '1972'
c Var 'aux492' order represents '1' with '1973'
-1972 1973 0
c Var 'aux492' direct represents '1' with '1974'
1972 -1973 1974 0
-1974 1973 0
-1974 -1972 0
c Var 'aux492' direct represents '2' with '-1973'
1972 1974 -1973 0
c Encoding variable: aux493 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux492))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '1975'
c Var 'aux493' direct represents '0' with '1975'
c Var 'aux493' order represents '1' with '1976'
-1975 1976 0
c Var 'aux493' direct represents '1' with '1977'
1975 -1976 1977 0
-1977 1976 0
-1977 -1975 0
c Var 'aux493' order represents '2' with '1978'
-1976 1978 0
c Var 'aux493' direct represents '2' with '1979'
1976 -1978 1979 0
-1979 1978 0
-1979 -1976 0
c Var 'aux493' direct represents '3' with '-1978'
1975 1977 1979 -1978 0
c Encoding variable: aux494 with domain: int(0..4) (representing constraint (aux489 + aux491))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '1980'
c Var 'aux494' direct represents '0' with '1980'
c Var 'aux494' order represents '1' with '1981'
-1980 1981 0
c Var 'aux494' direct represents '1' with '1982'
1980 -1981 1982 0
-1982 1981 0
-1982 -1980 0
c Var 'aux494' order represents '2' with '1983'
-1981 1983 0
c Var 'aux494' direct represents '2' with '1984'
1981 -1983 1984 0
-1984 1983 0
-1984 -1981 0
c Var 'aux494' order represents '3' with '1985'
-1983 1985 0
c Var 'aux494' direct represents '3' with '1986'
1983 -1985 1986 0
-1986 1985 0
-1986 -1983 0
c Var 'aux494' direct represents '4' with '-1985'
1980 1982 1984 1986 -1985 0
c Encoding variable: aux495 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '1987'
c Var 'aux495' direct represents '0' with '1987'
c Var 'aux495' order represents '1' with '1988'
-1987 1988 0
c Var 'aux495' direct represents '1' with '1989'
1987 -1988 1989 0
-1989 1988 0
-1989 -1987 0
c Var 'aux495' direct represents '2' with '-1988'
1987 1989 -1988 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '1990'
c Var 'aux496' direct represents '0' with '1990'
c Var 'aux496' order represents '1' with '1991'
-1990 1991 0
c Var 'aux496' direct represents '1' with '1992'
1990 -1991 1992 0
-1992 1991 0
-1992 -1990 0
c Var 'aux496' direct represents '2' with '-1991'
1990 1992 -1991 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '1993'
c Var 'aux497' direct represents '0' with '1993'
c Var 'aux497' order represents '1' with '1994'
-1993 1994 0
c Var 'aux497' direct represents '1' with '1995'
1993 -1994 1995 0
-1995 1994 0
-1995 -1993 0
c Var 'aux497' direct represents '2' with '-1994'
1993 1995 -1994 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '1996'
c Var 'aux498' direct represents '0' with '1996'
c Var 'aux498' order represents '1' with '1997'
-1996 1997 0
c Var 'aux498' direct represents '1' with '1998'
1996 -1997 1998 0
-1998 1997 0
-1998 -1996 0
c Var 'aux498' direct represents '2' with '-1997'
1996 1998 -1997 0
c Encoding variable: aux499 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux498))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '1999'
c Var 'aux499' direct represents '0' with '1999'
c Var 'aux499' order represents '1' with '2000'
-1999 2000 0
c Var 'aux499' direct represents '1' with '2001'
1999 -2000 2001 0
-2001 2000 0
-2001 -1999 0
c Var 'aux499' order represents '2' with '2002'
-2000 2002 0
c Var 'aux499' direct represents '2' with '2003'
2000 -2002 2003 0
-2003 2002 0
-2003 -2000 0
c Var 'aux499' direct represents '3' with '-2002'
1999 2001 2003 -2002 0
c Encoding variable: aux500 with domain: int(0..4) (representing constraint (aux495 + aux497))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2004'
c Var 'aux500' direct represents '0' with '2004'
c Var 'aux500' order represents '1' with '2005'
-2004 2005 0
c Var 'aux500' direct represents '1' with '2006'
2004 -2005 2006 0
-2006 2005 0
-2006 -2004 0
c Var 'aux500' order represents '2' with '2007'
-2005 2007 0
c Var 'aux500' direct represents '2' with '2008'
2005 -2007 2008 0
-2008 2007 0
-2008 -2005 0
c Var 'aux500' order represents '3' with '2009'
-2007 2009 0
c Var 'aux500' direct represents '3' with '2010'
2007 -2009 2010 0
-2010 2009 0
-2010 -2007 0
c Var 'aux500' direct represents '4' with '-2009'
2004 2006 2008 2010 -2009 0
c Encoding variable: aux501 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2011'
c Var 'aux501' direct represents '0' with '2011'
c Var 'aux501' order represents '1' with '2012'
-2011 2012 0
c Var 'aux501' direct represents '1' with '2013'
2011 -2012 2013 0
-2013 2012 0
-2013 -2011 0
c Var 'aux501' direct represents '2' with '-2012'
2011 2013 -2012 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2014'
c Var 'aux502' direct represents '0' with '2014'
c Var 'aux502' order represents '1' with '2015'
-2014 2015 0
c Var 'aux502' direct represents '1' with '2016'
2014 -2015 2016 0
-2016 2015 0
-2016 -2014 0
c Var 'aux502' direct represents '2' with '-2015'
2014 2016 -2015 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2017'
c Var 'aux503' direct represents '0' with '2017'
c Var 'aux503' order represents '1' with '2018'
-2017 2018 0
c Var 'aux503' direct represents '1' with '2019'
2017 -2018 2019 0
-2019 2018 0
-2019 -2017 0
c Var 'aux503' direct represents '2' with '-2018'
2017 2019 -2018 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2020'
c Var 'aux504' direct represents '0' with '2020'
c Var 'aux504' order represents '1' with '2021'
-2020 2021 0
c Var 'aux504' direct represents '1' with '2022'
2020 -2021 2022 0
-2022 2021 0
-2022 -2020 0
c Var 'aux504' direct represents '2' with '-2021'
2020 2022 -2021 0
c Encoding variable: aux505 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux504))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2023'
c Var 'aux505' direct represents '0' with '2023'
c Var 'aux505' order represents '1' with '2024'
-2023 2024 0
c Var 'aux505' direct represents '1' with '2025'
2023 -2024 2025 0
-2025 2024 0
-2025 -2023 0
c Var 'aux505' order represents '2' with '2026'
-2024 2026 0
c Var 'aux505' direct represents '2' with '2027'
2024 -2026 2027 0
-2027 2026 0
-2027 -2024 0
c Var 'aux505' direct represents '3' with '-2026'
2023 2025 2027 -2026 0
c Encoding variable: aux506 with domain: int(0..4) (representing constraint (aux501 + aux503))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2028'
c Var 'aux506' direct represents '0' with '2028'
c Var 'aux506' order represents '1' with '2029'
-2028 2029 0
c Var 'aux506' direct represents '1' with '2030'
2028 -2029 2030 0
-2030 2029 0
-2030 -2028 0
c Var 'aux506' order represents '2' with '2031'
-2029 2031 0
c Var 'aux506' direct represents '2' with '2032'
2029 -2031 2032 0
-2032 2031 0
-2032 -2029 0
c Var 'aux506' order represents '3' with '2033'
-2031 2033 0
c Var 'aux506' direct represents '3' with '2034'
2031 -2033 2034 0
-2034 2033 0
-2034 -2031 0
c Var 'aux506' direct represents '4' with '-2033'
2028 2030 2032 2034 -2033 0
c Encoding variable: aux507 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2035'
c Var 'aux507' direct represents '0' with '2035'
c Var 'aux507' order represents '1' with '2036'
-2035 2036 0
c Var 'aux507' direct represents '1' with '2037'
2035 -2036 2037 0
-2037 2036 0
-2037 -2035 0
c Var 'aux507' direct represents '2' with '-2036'
2035 2037 -2036 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2038'
c Var 'aux508' direct represents '0' with '2038'
c Var 'aux508' order represents '1' with '2039'
-2038 2039 0
c Var 'aux508' direct represents '1' with '2040'
2038 -2039 2040 0
-2040 2039 0
-2040 -2038 0
c Var 'aux508' direct represents '2' with '-2039'
2038 2040 -2039 0
c Encoding variable: aux509 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2041'
c Var 'aux509' direct represents '0' with '2041'
c Var 'aux509' order represents '1' with '2042'
-2041 2042 0
c Var 'aux509' direct represents '1' with '2043'
2041 -2042 2043 0
-2043 2042 0
-2043 -2041 0
c Var 'aux509' direct represents '2' with '-2042'
2041 2043 -2042 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2044'
c Var 'aux510' direct represents '0' with '2044'
c Var 'aux510' order represents '1' with '2045'
-2044 2045 0
c Var 'aux510' direct represents '1' with '2046'
2044 -2045 2046 0
-2046 2045 0
-2046 -2044 0
c Var 'aux510' direct represents '2' with '-2045'
2044 2046 -2045 0
c Encoding variable: aux511 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux510))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2047'
c Var 'aux511' direct represents '0' with '2047'
c Var 'aux511' order represents '1' with '2048'
-2047 2048 0
c Var 'aux511' direct represents '1' with '2049'
2047 -2048 2049 0
-2049 2048 0
-2049 -2047 0
c Var 'aux511' order represents '2' with '2050'
-2048 2050 0
c Var 'aux511' direct represents '2' with '2051'
2048 -2050 2051 0
-2051 2050 0
-2051 -2048 0
c Var 'aux511' direct represents '3' with '-2050'
2047 2049 2051 -2050 0
c Encoding variable: aux512 with domain: int(0..4) (representing constraint (aux507 + aux509))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2052'
c Var 'aux512' direct represents '0' with '2052'
c Var 'aux512' order represents '1' with '2053'
-2052 2053 0
c Var 'aux512' direct represents '1' with '2054'
2052 -2053 2054 0
-2054 2053 0
-2054 -2052 0
c Var 'aux512' order represents '2' with '2055'
-2053 2055 0
c Var 'aux512' direct represents '2' with '2056'
2053 -2055 2056 0
-2056 2055 0
-2056 -2053 0
c Var 'aux512' order represents '3' with '2057'
-2055 2057 0
c Var 'aux512' direct represents '3' with '2058'
2055 -2057 2058 0
-2058 2057 0
-2058 -2055 0
c Var 'aux512' direct represents '4' with '-2057'
2052 2054 2056 2058 -2057 0
c Encoding variable: aux513 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2059'
c Var 'aux513' direct represents '0' with '2059'
c Var 'aux513' order represents '1' with '2060'
-2059 2060 0
c Var 'aux513' direct represents '1' with '2061'
2059 -2060 2061 0
-2061 2060 0
-2061 -2059 0
c Var 'aux513' direct represents '2' with '-2060'
2059 2061 -2060 0
c Encoding variable: aux514 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2062'
c Var 'aux514' direct represents '0' with '2062'
c Var 'aux514' order represents '1' with '2063'
-2062 2063 0
c Var 'aux514' direct represents '1' with '2064'
2062 -2063 2064 0
-2064 2063 0
-2064 -2062 0
c Var 'aux514' direct represents '2' with '-2063'
2062 2064 -2063 0
c Encoding variable: aux515 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2065'
c Var 'aux515' direct represents '0' with '2065'
c Var 'aux515' order represents '1' with '2066'
-2065 2066 0
c Var 'aux515' direct represents '1' with '2067'
2065 -2066 2067 0
-2067 2066 0
-2067 -2065 0
c Var 'aux515' direct represents '2' with '-2066'
2065 2067 -2066 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2068'
c Var 'aux516' direct represents '0' with '2068'
c Var 'aux516' order represents '1' with '2069'
-2068 2069 0
c Var 'aux516' direct represents '1' with '2070'
2068 -2069 2070 0
-2070 2069 0
-2070 -2068 0
c Var 'aux516' direct represents '2' with '-2069'
2068 2070 -2069 0
c Encoding variable: aux517 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux516))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2071'
c Var 'aux517' direct represents '0' with '2071'
c Var 'aux517' order represents '1' with '2072'
-2071 2072 0
c Var 'aux517' direct represents '1' with '2073'
2071 -2072 2073 0
-2073 2072 0
-2073 -2071 0
c Var 'aux517' order represents '2' with '2074'
-2072 2074 0
c Var 'aux517' direct represents '2' with '2075'
2072 -2074 2075 0
-2075 2074 0
-2075 -2072 0
c Var 'aux517' direct represents '3' with '-2074'
2071 2073 2075 -2074 0
c Encoding variable: aux518 with domain: int(0..4) (representing constraint (aux513 + aux515))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2076'
c Var 'aux518' direct represents '0' with '2076'
c Var 'aux518' order represents '1' with '2077'
-2076 2077 0
c Var 'aux518' direct represents '1' with '2078'
2076 -2077 2078 0
-2078 2077 0
-2078 -2076 0
c Var 'aux518' order represents '2' with '2079'
-2077 2079 0
c Var 'aux518' direct represents '2' with '2080'
2077 -2079 2080 0
-2080 2079 0
-2080 -2077 0
c Var 'aux518' order represents '3' with '2081'
-2079 2081 0
c Var 'aux518' direct represents '3' with '2082'
2079 -2081 2082 0
-2082 2081 0
-2082 -2079 0
c Var 'aux518' direct represents '4' with '-2081'
2076 2078 2080 2082 -2081 0
c Encoding variable: aux519 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2083'
c Var 'aux519' direct represents '0' with '2083'
c Var 'aux519' order represents '1' with '2084'
-2083 2084 0
c Var 'aux519' direct represents '1' with '2085'
2083 -2084 2085 0
-2085 2084 0
-2085 -2083 0
c Var 'aux519' direct represents '2' with '-2084'
2083 2085 -2084 0
c Encoding variable: aux520 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2086'
c Var 'aux520' direct represents '0' with '2086'
c Var 'aux520' order represents '1' with '2087'
-2086 2087 0
c Var 'aux520' direct represents '1' with '2088'
2086 -2087 2088 0
-2088 2087 0
-2088 -2086 0
c Var 'aux520' direct represents '2' with '-2087'
2086 2088 -2087 0
c Encoding variable: aux521 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2089'
c Var 'aux521' direct represents '0' with '2089'
c Var 'aux521' order represents '1' with '2090'
-2089 2090 0
c Var 'aux521' direct represents '1' with '2091'
2089 -2090 2091 0
-2091 2090 0
-2091 -2089 0
c Var 'aux521' direct represents '2' with '-2090'
2089 2091 -2090 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2092'
c Var 'aux522' direct represents '0' with '2092'
c Var 'aux522' order represents '1' with '2093'
-2092 2093 0
c Var 'aux522' direct represents '1' with '2094'
2092 -2093 2094 0
-2094 2093 0
-2094 -2092 0
c Var 'aux522' direct represents '2' with '-2093'
2092 2094 -2093 0
c Encoding variable: aux523 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux522))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2095'
c Var 'aux523' direct represents '0' with '2095'
c Var 'aux523' order represents '1' with '2096'
-2095 2096 0
c Var 'aux523' direct represents '1' with '2097'
2095 -2096 2097 0
-2097 2096 0
-2097 -2095 0
c Var 'aux523' order represents '2' with '2098'
-2096 2098 0
c Var 'aux523' direct represents '2' with '2099'
2096 -2098 2099 0
-2099 2098 0
-2099 -2096 0
c Var 'aux523' direct represents '3' with '-2098'
2095 2097 2099 -2098 0
c Encoding variable: aux524 with domain: int(0..4) (representing constraint (aux519 + aux521))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2100'
c Var 'aux524' direct represents '0' with '2100'
c Var 'aux524' order represents '1' with '2101'
-2100 2101 0
c Var 'aux524' direct represents '1' with '2102'
2100 -2101 2102 0
-2102 2101 0
-2102 -2100 0
c Var 'aux524' order represents '2' with '2103'
-2101 2103 0
c Var 'aux524' direct represents '2' with '2104'
2101 -2103 2104 0
-2104 2103 0
-2104 -2101 0
c Var 'aux524' order represents '3' with '2105'
-2103 2105 0
c Var 'aux524' direct represents '3' with '2106'
2103 -2105 2106 0
-2106 2105 0
-2106 -2103 0
c Var 'aux524' direct represents '4' with '-2105'
2100 2102 2104 2106 -2105 0
c Encoding variable: aux525 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2107'
c Var 'aux525' direct represents '0' with '2107'
c Var 'aux525' order represents '1' with '2108'
-2107 2108 0
c Var 'aux525' direct represents '1' with '2109'
2107 -2108 2109 0
-2109 2108 0
-2109 -2107 0
c Var 'aux525' direct represents '2' with '-2108'
2107 2109 -2108 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2110'
c Var 'aux526' direct represents '0' with '2110'
c Var 'aux526' order represents '1' with '2111'
-2110 2111 0
c Var 'aux526' direct represents '1' with '2112'
2110 -2111 2112 0
-2112 2111 0
-2112 -2110 0
c Var 'aux526' direct represents '2' with '-2111'
2110 2112 -2111 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2113'
c Var 'aux527' direct represents '0' with '2113'
c Var 'aux527' order represents '1' with '2114'
-2113 2114 0
c Var 'aux527' direct represents '1' with '2115'
2113 -2114 2115 0
-2115 2114 0
-2115 -2113 0
c Var 'aux527' direct represents '2' with '-2114'
2113 2115 -2114 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2116'
c Var 'aux528' direct represents '0' with '2116'
c Var 'aux528' order represents '1' with '2117'
-2116 2117 0
c Var 'aux528' direct represents '1' with '2118'
2116 -2117 2118 0
-2118 2117 0
-2118 -2116 0
c Var 'aux528' direct represents '2' with '-2117'
2116 2118 -2117 0
c Encoding variable: aux529 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux528))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2119'
c Var 'aux529' direct represents '0' with '2119'
c Var 'aux529' order represents '1' with '2120'
-2119 2120 0
c Var 'aux529' direct represents '1' with '2121'
2119 -2120 2121 0
-2121 2120 0
-2121 -2119 0
c Var 'aux529' order represents '2' with '2122'
-2120 2122 0
c Var 'aux529' direct represents '2' with '2123'
2120 -2122 2123 0
-2123 2122 0
-2123 -2120 0
c Var 'aux529' direct represents '3' with '-2122'
2119 2121 2123 -2122 0
c Encoding variable: aux530 with domain: int(0..4) (representing constraint (aux525 + aux527))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2124'
c Var 'aux530' direct represents '0' with '2124'
c Var 'aux530' order represents '1' with '2125'
-2124 2125 0
c Var 'aux530' direct represents '1' with '2126'
2124 -2125 2126 0
-2126 2125 0
-2126 -2124 0
c Var 'aux530' order represents '2' with '2127'
-2125 2127 0
c Var 'aux530' direct represents '2' with '2128'
2125 -2127 2128 0
-2128 2127 0
-2128 -2125 0
c Var 'aux530' order represents '3' with '2129'
-2127 2129 0
c Var 'aux530' direct represents '3' with '2130'
2127 -2129 2130 0
-2130 2129 0
-2130 -2127 0
c Var 'aux530' direct represents '4' with '-2129'
2124 2126 2128 2130 -2129 0
c Encoding variable: aux531 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2131'
c Var 'aux531' direct represents '0' with '2131'
c Var 'aux531' order represents '1' with '2132'
-2131 2132 0
c Var 'aux531' direct represents '1' with '2133'
2131 -2132 2133 0
-2133 2132 0
-2133 -2131 0
c Var 'aux531' direct represents '2' with '-2132'
2131 2133 -2132 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2134'
c Var 'aux532' direct represents '0' with '2134'
c Var 'aux532' order represents '1' with '2135'
-2134 2135 0
c Var 'aux532' direct represents '1' with '2136'
2134 -2135 2136 0
-2136 2135 0
-2136 -2134 0
c Var 'aux532' direct represents '2' with '-2135'
2134 2136 -2135 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2137'
c Var 'aux533' direct represents '0' with '2137'
c Var 'aux533' order represents '1' with '2138'
-2137 2138 0
c Var 'aux533' direct represents '1' with '2139'
2137 -2138 2139 0
-2139 2138 0
-2139 -2137 0
c Var 'aux533' direct represents '2' with '-2138'
2137 2139 -2138 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2140'
c Var 'aux534' direct represents '0' with '2140'
c Var 'aux534' order represents '1' with '2141'
-2140 2141 0
c Var 'aux534' direct represents '1' with '2142'
2140 -2141 2142 0
-2142 2141 0
-2142 -2140 0
c Var 'aux534' direct represents '2' with '-2141'
2140 2142 -2141 0
c Encoding variable: aux535 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux534))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2143'
c Var 'aux535' direct represents '0' with '2143'
c Var 'aux535' order represents '1' with '2144'
-2143 2144 0
c Var 'aux535' direct represents '1' with '2145'
2143 -2144 2145 0
-2145 2144 0
-2145 -2143 0
c Var 'aux535' order represents '2' with '2146'
-2144 2146 0
c Var 'aux535' direct represents '2' with '2147'
2144 -2146 2147 0
-2147 2146 0
-2147 -2144 0
c Var 'aux535' direct represents '3' with '-2146'
2143 2145 2147 -2146 0
c Encoding variable: aux536 with domain: int(0..4) (representing constraint (aux531 + aux533))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2148'
c Var 'aux536' direct represents '0' with '2148'
c Var 'aux536' order represents '1' with '2149'
-2148 2149 0
c Var 'aux536' direct represents '1' with '2150'
2148 -2149 2150 0
-2150 2149 0
-2150 -2148 0
c Var 'aux536' order represents '2' with '2151'
-2149 2151 0
c Var 'aux536' direct represents '2' with '2152'
2149 -2151 2152 0
-2152 2151 0
-2152 -2149 0
c Var 'aux536' order represents '3' with '2153'
-2151 2153 0
c Var 'aux536' direct represents '3' with '2154'
2151 -2153 2154 0
-2154 2153 0
-2154 -2151 0
c Var 'aux536' direct represents '4' with '-2153'
2148 2150 2152 2154 -2153 0
c Encoding variable: aux537 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2155'
c Var 'aux537' direct represents '0' with '2155'
c Var 'aux537' order represents '1' with '2156'
-2155 2156 0
c Var 'aux537' direct represents '1' with '2157'
2155 -2156 2157 0
-2157 2156 0
-2157 -2155 0
c Var 'aux537' direct represents '2' with '-2156'
2155 2157 -2156 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2158'
c Var 'aux538' direct represents '0' with '2158'
c Var 'aux538' order represents '1' with '2159'
-2158 2159 0
c Var 'aux538' direct represents '1' with '2160'
2158 -2159 2160 0
-2160 2159 0
-2160 -2158 0
c Var 'aux538' direct represents '2' with '-2159'
2158 2160 -2159 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2161'
c Var 'aux539' direct represents '0' with '2161'
c Var 'aux539' order represents '1' with '2162'
-2161 2162 0
c Var 'aux539' direct represents '1' with '2163'
2161 -2162 2163 0
-2163 2162 0
-2163 -2161 0
c Var 'aux539' direct represents '2' with '-2162'
2161 2163 -2162 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2164'
c Var 'aux540' direct represents '0' with '2164'
c Var 'aux540' order represents '1' with '2165'
-2164 2165 0
c Var 'aux540' direct represents '1' with '2166'
2164 -2165 2166 0
-2166 2165 0
-2166 -2164 0
c Var 'aux540' direct represents '2' with '-2165'
2164 2166 -2165 0
c Encoding variable: aux541 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux540))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2167'
c Var 'aux541' direct represents '0' with '2167'
c Var 'aux541' order represents '1' with '2168'
-2167 2168 0
c Var 'aux541' direct represents '1' with '2169'
2167 -2168 2169 0
-2169 2168 0
-2169 -2167 0
c Var 'aux541' order represents '2' with '2170'
-2168 2170 0
c Var 'aux541' direct represents '2' with '2171'
2168 -2170 2171 0
-2171 2170 0
-2171 -2168 0
c Var 'aux541' direct represents '3' with '-2170'
2167 2169 2171 -2170 0
c Encoding variable: aux542 with domain: int(0..4) (representing constraint (aux537 + aux539))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2172'
c Var 'aux542' direct represents '0' with '2172'
c Var 'aux542' order represents '1' with '2173'
-2172 2173 0
c Var 'aux542' direct represents '1' with '2174'
2172 -2173 2174 0
-2174 2173 0
-2174 -2172 0
c Var 'aux542' order represents '2' with '2175'
-2173 2175 0
c Var 'aux542' direct represents '2' with '2176'
2173 -2175 2176 0
-2176 2175 0
-2176 -2173 0
c Var 'aux542' order represents '3' with '2177'
-2175 2177 0
c Var 'aux542' direct represents '3' with '2178'
2175 -2177 2178 0
-2178 2177 0
-2178 -2175 0
c Var 'aux542' direct represents '4' with '-2177'
2172 2174 2176 2178 -2177 0
c Encoding variable: aux543 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2179'
c Var 'aux543' direct represents '0' with '2179'
c Var 'aux543' order represents '1' with '2180'
-2179 2180 0
c Var 'aux543' direct represents '1' with '2181'
2179 -2180 2181 0
-2181 2180 0
-2181 -2179 0
c Var 'aux543' direct represents '2' with '-2180'
2179 2181 -2180 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2182'
c Var 'aux544' direct represents '0' with '2182'
c Var 'aux544' order represents '1' with '2183'
-2182 2183 0
c Var 'aux544' direct represents '1' with '2184'
2182 -2183 2184 0
-2184 2183 0
-2184 -2182 0
c Var 'aux544' direct represents '2' with '-2183'
2182 2184 -2183 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2185'
c Var 'aux545' direct represents '0' with '2185'
c Var 'aux545' order represents '1' with '2186'
-2185 2186 0
c Var 'aux545' direct represents '1' with '2187'
2185 -2186 2187 0
-2187 2186 0
-2187 -2185 0
c Var 'aux545' direct represents '2' with '-2186'
2185 2187 -2186 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2188'
c Var 'aux546' direct represents '0' with '2188'
c Var 'aux546' order represents '1' with '2189'
-2188 2189 0
c Var 'aux546' direct represents '1' with '2190'
2188 -2189 2190 0
-2190 2189 0
-2190 -2188 0
c Var 'aux546' direct represents '2' with '-2189'
2188 2190 -2189 0
c Encoding variable: aux547 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux546))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2191'
c Var 'aux547' direct represents '0' with '2191'
c Var 'aux547' order represents '1' with '2192'
-2191 2192 0
c Var 'aux547' direct represents '1' with '2193'
2191 -2192 2193 0
-2193 2192 0
-2193 -2191 0
c Var 'aux547' order represents '2' with '2194'
-2192 2194 0
c Var 'aux547' direct represents '2' with '2195'
2192 -2194 2195 0
-2195 2194 0
-2195 -2192 0
c Var 'aux547' direct represents '3' with '-2194'
2191 2193 2195 -2194 0
c Encoding variable: aux548 with domain: int(0..4) (representing constraint (aux543 + aux545))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2196'
c Var 'aux548' direct represents '0' with '2196'
c Var 'aux548' order represents '1' with '2197'
-2196 2197 0
c Var 'aux548' direct represents '1' with '2198'
2196 -2197 2198 0
-2198 2197 0
-2198 -2196 0
c Var 'aux548' order represents '2' with '2199'
-2197 2199 0
c Var 'aux548' direct represents '2' with '2200'
2197 -2199 2200 0
-2200 2199 0
-2200 -2197 0
c Var 'aux548' order represents '3' with '2201'
-2199 2201 0
c Var 'aux548' direct represents '3' with '2202'
2199 -2201 2202 0
-2202 2201 0
-2202 -2199 0
c Var 'aux548' direct represents '4' with '-2201'
2196 2198 2200 2202 -2201 0
c Encoding variable: aux549 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2203'
c Var 'aux549' direct represents '0' with '2203'
c Var 'aux549' order represents '1' with '2204'
-2203 2204 0
c Var 'aux549' direct represents '1' with '2205'
2203 -2204 2205 0
-2205 2204 0
-2205 -2203 0
c Var 'aux549' direct represents '2' with '-2204'
2203 2205 -2204 0
c Encoding variable: aux550 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2206'
c Var 'aux550' direct represents '0' with '2206'
c Var 'aux550' order represents '1' with '2207'
-2206 2207 0
c Var 'aux550' direct represents '1' with '2208'
2206 -2207 2208 0
-2208 2207 0
-2208 -2206 0
c Var 'aux550' direct represents '2' with '-2207'
2206 2208 -2207 0
c Encoding variable: aux551 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2209'
c Var 'aux551' direct represents '0' with '2209'
c Var 'aux551' order represents '1' with '2210'
-2209 2210 0
c Var 'aux551' direct represents '1' with '2211'
2209 -2210 2211 0
-2211 2210 0
-2211 -2209 0
c Var 'aux551' direct represents '2' with '-2210'
2209 2211 -2210 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2212'
c Var 'aux552' direct represents '0' with '2212'
c Var 'aux552' order represents '1' with '2213'
-2212 2213 0
c Var 'aux552' direct represents '1' with '2214'
2212 -2213 2214 0
-2214 2213 0
-2214 -2212 0
c Var 'aux552' direct represents '2' with '-2213'
2212 2214 -2213 0
c Encoding variable: aux553 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux552))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2215'
c Var 'aux553' direct represents '0' with '2215'
c Var 'aux553' order represents '1' with '2216'
-2215 2216 0
c Var 'aux553' direct represents '1' with '2217'
2215 -2216 2217 0
-2217 2216 0
-2217 -2215 0
c Var 'aux553' order represents '2' with '2218'
-2216 2218 0
c Var 'aux553' direct represents '2' with '2219'
2216 -2218 2219 0
-2219 2218 0
-2219 -2216 0
c Var 'aux553' direct represents '3' with '-2218'
2215 2217 2219 -2218 0
c Encoding variable: aux554 with domain: int(0..4) (representing constraint (aux549 + aux551))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2220'
c Var 'aux554' direct represents '0' with '2220'
c Var 'aux554' order represents '1' with '2221'
-2220 2221 0
c Var 'aux554' direct represents '1' with '2222'
2220 -2221 2222 0
-2222 2221 0
-2222 -2220 0
c Var 'aux554' order represents '2' with '2223'
-2221 2223 0
c Var 'aux554' direct represents '2' with '2224'
2221 -2223 2224 0
-2224 2223 0
-2224 -2221 0
c Var 'aux554' order represents '3' with '2225'
-2223 2225 0
c Var 'aux554' direct represents '3' with '2226'
2223 -2225 2226 0
-2226 2225 0
-2226 -2223 0
c Var 'aux554' direct represents '4' with '-2225'
2220 2222 2224 2226 -2225 0
c Encoding variable: aux555 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2227'
c Var 'aux555' direct represents '0' with '2227'
c Var 'aux555' order represents '1' with '2228'
-2227 2228 0
c Var 'aux555' direct represents '1' with '2229'
2227 -2228 2229 0
-2229 2228 0
-2229 -2227 0
c Var 'aux555' direct represents '2' with '-2228'
2227 2229 -2228 0
c Encoding variable: aux556 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2230'
c Var 'aux556' direct represents '0' with '2230'
c Var 'aux556' order represents '1' with '2231'
-2230 2231 0
c Var 'aux556' direct represents '1' with '2232'
2230 -2231 2232 0
-2232 2231 0
-2232 -2230 0
c Var 'aux556' direct represents '2' with '-2231'
2230 2232 -2231 0
c Encoding variable: aux557 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2233'
c Var 'aux557' direct represents '0' with '2233'
c Var 'aux557' order represents '1' with '2234'
-2233 2234 0
c Var 'aux557' direct represents '1' with '2235'
2233 -2234 2235 0
-2235 2234 0
-2235 -2233 0
c Var 'aux557' direct represents '2' with '-2234'
2233 2235 -2234 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2236'
c Var 'aux558' direct represents '0' with '2236'
c Var 'aux558' order represents '1' with '2237'
-2236 2237 0
c Var 'aux558' direct represents '1' with '2238'
2236 -2237 2238 0
-2238 2237 0
-2238 -2236 0
c Var 'aux558' direct represents '2' with '-2237'
2236 2238 -2237 0
c Encoding variable: aux559 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux558))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2239'
c Var 'aux559' direct represents '0' with '2239'
c Var 'aux559' order represents '1' with '2240'
-2239 2240 0
c Var 'aux559' direct represents '1' with '2241'
2239 -2240 2241 0
-2241 2240 0
-2241 -2239 0
c Var 'aux559' order represents '2' with '2242'
-2240 2242 0
c Var 'aux559' direct represents '2' with '2243'
2240 -2242 2243 0
-2243 2242 0
-2243 -2240 0
c Var 'aux559' direct represents '3' with '-2242'
2239 2241 2243 -2242 0
c Encoding variable: aux560 with domain: int(0..4) (representing constraint (aux555 + aux557))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2244'
c Var 'aux560' direct represents '0' with '2244'
c Var 'aux560' order represents '1' with '2245'
-2244 2245 0
c Var 'aux560' direct represents '1' with '2246'
2244 -2245 2246 0
-2246 2245 0
-2246 -2244 0
c Var 'aux560' order represents '2' with '2247'
-2245 2247 0
c Var 'aux560' direct represents '2' with '2248'
2245 -2247 2248 0
-2248 2247 0
-2248 -2245 0
c Var 'aux560' order represents '3' with '2249'
-2247 2249 0
c Var 'aux560' direct represents '3' with '2250'
2247 -2249 2250 0
-2250 2249 0
-2250 -2247 0
c Var 'aux560' direct represents '4' with '-2249'
2244 2246 2248 2250 -2249 0
c Encoding variable: aux561 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2251'
c Var 'aux561' direct represents '0' with '2251'
c Var 'aux561' order represents '1' with '2252'
-2251 2252 0
c Var 'aux561' direct represents '1' with '2253'
2251 -2252 2253 0
-2253 2252 0
-2253 -2251 0
c Var 'aux561' direct represents '2' with '-2252'
2251 2253 -2252 0
c Encoding variable: aux562 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2254'
c Var 'aux562' direct represents '0' with '2254'
c Var 'aux562' order represents '1' with '2255'
-2254 2255 0
c Var 'aux562' direct represents '1' with '2256'
2254 -2255 2256 0
-2256 2255 0
-2256 -2254 0
c Var 'aux562' direct represents '2' with '-2255'
2254 2256 -2255 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2257'
c Var 'aux563' direct represents '0' with '2257'
c Var 'aux563' order represents '1' with '2258'
-2257 2258 0
c Var 'aux563' direct represents '1' with '2259'
2257 -2258 2259 0
-2259 2258 0
-2259 -2257 0
c Var 'aux563' direct represents '2' with '-2258'
2257 2259 -2258 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2260'
c Var 'aux564' direct represents '0' with '2260'
c Var 'aux564' order represents '1' with '2261'
-2260 2261 0
c Var 'aux564' direct represents '1' with '2262'
2260 -2261 2262 0
-2262 2261 0
-2262 -2260 0
c Var 'aux564' direct represents '2' with '-2261'
2260 2262 -2261 0
c Encoding variable: aux565 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux564))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2263'
c Var 'aux565' direct represents '0' with '2263'
c Var 'aux565' order represents '1' with '2264'
-2263 2264 0
c Var 'aux565' direct represents '1' with '2265'
2263 -2264 2265 0
-2265 2264 0
-2265 -2263 0
c Var 'aux565' order represents '2' with '2266'
-2264 2266 0
c Var 'aux565' direct represents '2' with '2267'
2264 -2266 2267 0
-2267 2266 0
-2267 -2264 0
c Var 'aux565' direct represents '3' with '-2266'
2263 2265 2267 -2266 0
c Encoding variable: aux566 with domain: int(0..4) (representing constraint (aux561 + aux563))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2268'
c Var 'aux566' direct represents '0' with '2268'
c Var 'aux566' order represents '1' with '2269'
-2268 2269 0
c Var 'aux566' direct represents '1' with '2270'
2268 -2269 2270 0
-2270 2269 0
-2270 -2268 0
c Var 'aux566' order represents '2' with '2271'
-2269 2271 0
c Var 'aux566' direct represents '2' with '2272'
2269 -2271 2272 0
-2272 2271 0
-2272 -2269 0
c Var 'aux566' order represents '3' with '2273'
-2271 2273 0
c Var 'aux566' direct represents '3' with '2274'
2271 -2273 2274 0
-2274 2273 0
-2274 -2271 0
c Var 'aux566' direct represents '4' with '-2273'
2268 2270 2272 2274 -2273 0
c Encoding variable: aux567 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2275'
c Var 'aux567' direct represents '0' with '2275'
c Var 'aux567' order represents '1' with '2276'
-2275 2276 0
c Var 'aux567' direct represents '1' with '2277'
2275 -2276 2277 0
-2277 2276 0
-2277 -2275 0
c Var 'aux567' direct represents '2' with '-2276'
2275 2277 -2276 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2278'
c Var 'aux568' direct represents '0' with '2278'
c Var 'aux568' order represents '1' with '2279'
-2278 2279 0
c Var 'aux568' direct represents '1' with '2280'
2278 -2279 2280 0
-2280 2279 0
-2280 -2278 0
c Var 'aux568' direct represents '2' with '-2279'
2278 2280 -2279 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2281'
c Var 'aux569' direct represents '0' with '2281'
c Var 'aux569' order represents '1' with '2282'
-2281 2282 0
c Var 'aux569' direct represents '1' with '2283'
2281 -2282 2283 0
-2283 2282 0
-2283 -2281 0
c Var 'aux569' direct represents '2' with '-2282'
2281 2283 -2282 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2284'
c Var 'aux570' direct represents '0' with '2284'
c Var 'aux570' order represents '1' with '2285'
-2284 2285 0
c Var 'aux570' direct represents '1' with '2286'
2284 -2285 2286 0
-2286 2285 0
-2286 -2284 0
c Var 'aux570' direct represents '2' with '-2285'
2284 2286 -2285 0
c Encoding variable: aux571 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux570))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2287'
c Var 'aux571' direct represents '0' with '2287'
c Var 'aux571' order represents '1' with '2288'
-2287 2288 0
c Var 'aux571' direct represents '1' with '2289'
2287 -2288 2289 0
-2289 2288 0
-2289 -2287 0
c Var 'aux571' order represents '2' with '2290'
-2288 2290 0
c Var 'aux571' direct represents '2' with '2291'
2288 -2290 2291 0
-2291 2290 0
-2291 -2288 0
c Var 'aux571' direct represents '3' with '-2290'
2287 2289 2291 -2290 0
c Encoding variable: aux572 with domain: int(0..4) (representing constraint (aux567 + aux569))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2292'
c Var 'aux572' direct represents '0' with '2292'
c Var 'aux572' order represents '1' with '2293'
-2292 2293 0
c Var 'aux572' direct represents '1' with '2294'
2292 -2293 2294 0
-2294 2293 0
-2294 -2292 0
c Var 'aux572' order represents '2' with '2295'
-2293 2295 0
c Var 'aux572' direct represents '2' with '2296'
2293 -2295 2296 0
-2296 2295 0
-2296 -2293 0
c Var 'aux572' order represents '3' with '2297'
-2295 2297 0
c Var 'aux572' direct represents '3' with '2298'
2295 -2297 2298 0
-2298 2297 0
-2298 -2295 0
c Var 'aux572' direct represents '4' with '-2297'
2292 2294 2296 2298 -2297 0
c Encoding variable: aux573 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2299'
c Var 'aux573' direct represents '0' with '2299'
c Var 'aux573' order represents '1' with '2300'
-2299 2300 0
c Var 'aux573' direct represents '1' with '2301'
2299 -2300 2301 0
-2301 2300 0
-2301 -2299 0
c Var 'aux573' direct represents '2' with '-2300'
2299 2301 -2300 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2302'
c Var 'aux574' direct represents '0' with '2302'
c Var 'aux574' order represents '1' with '2303'
-2302 2303 0
c Var 'aux574' direct represents '1' with '2304'
2302 -2303 2304 0
-2304 2303 0
-2304 -2302 0
c Var 'aux574' direct represents '2' with '-2303'
2302 2304 -2303 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2305'
c Var 'aux575' direct represents '0' with '2305'
c Var 'aux575' order represents '1' with '2306'
-2305 2306 0
c Var 'aux575' direct represents '1' with '2307'
2305 -2306 2307 0
-2307 2306 0
-2307 -2305 0
c Var 'aux575' direct represents '2' with '-2306'
2305 2307 -2306 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2308'
c Var 'aux576' direct represents '0' with '2308'
c Var 'aux576' order represents '1' with '2309'
-2308 2309 0
c Var 'aux576' direct represents '1' with '2310'
2308 -2309 2310 0
-2310 2309 0
-2310 -2308 0
c Var 'aux576' direct represents '2' with '-2309'
2308 2310 -2309 0
c Encoding variable: aux577 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux576))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2311'
c Var 'aux577' direct represents '0' with '2311'
c Var 'aux577' order represents '1' with '2312'
-2311 2312 0
c Var 'aux577' direct represents '1' with '2313'
2311 -2312 2313 0
-2313 2312 0
-2313 -2311 0
c Var 'aux577' order represents '2' with '2314'
-2312 2314 0
c Var 'aux577' direct represents '2' with '2315'
2312 -2314 2315 0
-2315 2314 0
-2315 -2312 0
c Var 'aux577' direct represents '3' with '-2314'
2311 2313 2315 -2314 0
c Encoding variable: aux578 with domain: int(0..4) (representing constraint (aux573 + aux575))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2316'
c Var 'aux578' direct represents '0' with '2316'
c Var 'aux578' order represents '1' with '2317'
-2316 2317 0
c Var 'aux578' direct represents '1' with '2318'
2316 -2317 2318 0
-2318 2317 0
-2318 -2316 0
c Var 'aux578' order represents '2' with '2319'
-2317 2319 0
c Var 'aux578' direct represents '2' with '2320'
2317 -2319 2320 0
-2320 2319 0
-2320 -2317 0
c Var 'aux578' order represents '3' with '2321'
-2319 2321 0
c Var 'aux578' direct represents '3' with '2322'
2319 -2321 2322 0
-2322 2321 0
-2322 -2319 0
c Var 'aux578' direct represents '4' with '-2321'
2316 2318 2320 2322 -2321 0
c Encoding variable: aux579 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2323'
c Var 'aux579' direct represents '0' with '2323'
c Var 'aux579' order represents '1' with '2324'
-2323 2324 0
c Var 'aux579' direct represents '1' with '2325'
2323 -2324 2325 0
-2325 2324 0
-2325 -2323 0
c Var 'aux579' direct represents '2' with '-2324'
2323 2325 -2324 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2326'
c Var 'aux580' direct represents '0' with '2326'
c Var 'aux580' order represents '1' with '2327'
-2326 2327 0
c Var 'aux580' direct represents '1' with '2328'
2326 -2327 2328 0
-2328 2327 0
-2328 -2326 0
c Var 'aux580' direct represents '2' with '-2327'
2326 2328 -2327 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2329'
c Var 'aux581' direct represents '0' with '2329'
c Var 'aux581' order represents '1' with '2330'
-2329 2330 0
c Var 'aux581' direct represents '1' with '2331'
2329 -2330 2331 0
-2331 2330 0
-2331 -2329 0
c Var 'aux581' direct represents '2' with '-2330'
2329 2331 -2330 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2332'
c Var 'aux582' direct represents '0' with '2332'
c Var 'aux582' order represents '1' with '2333'
-2332 2333 0
c Var 'aux582' direct represents '1' with '2334'
2332 -2333 2334 0
-2334 2333 0
-2334 -2332 0
c Var 'aux582' direct represents '2' with '-2333'
2332 2334 -2333 0
c Encoding variable: aux583 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux582))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2335'
c Var 'aux583' direct represents '0' with '2335'
c Var 'aux583' order represents '1' with '2336'
-2335 2336 0
c Var 'aux583' direct represents '1' with '2337'
2335 -2336 2337 0
-2337 2336 0
-2337 -2335 0
c Var 'aux583' order represents '2' with '2338'
-2336 2338 0
c Var 'aux583' direct represents '2' with '2339'
2336 -2338 2339 0
-2339 2338 0
-2339 -2336 0
c Var 'aux583' direct represents '3' with '-2338'
2335 2337 2339 -2338 0
c Encoding variable: aux584 with domain: int(0..4) (representing constraint (aux579 + aux581))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2340'
c Var 'aux584' direct represents '0' with '2340'
c Var 'aux584' order represents '1' with '2341'
-2340 2341 0
c Var 'aux584' direct represents '1' with '2342'
2340 -2341 2342 0
-2342 2341 0
-2342 -2340 0
c Var 'aux584' order represents '2' with '2343'
-2341 2343 0
c Var 'aux584' direct represents '2' with '2344'
2341 -2343 2344 0
-2344 2343 0
-2344 -2341 0
c Var 'aux584' order represents '3' with '2345'
-2343 2345 0
c Var 'aux584' direct represents '3' with '2346'
2343 -2345 2346 0
-2346 2345 0
-2346 -2343 0
c Var 'aux584' direct represents '4' with '-2345'
2340 2342 2344 2346 -2345 0
c Encoding variable: aux585 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2347'
c Var 'aux585' direct represents '0' with '2347'
c Var 'aux585' order represents '1' with '2348'
-2347 2348 0
c Var 'aux585' direct represents '1' with '2349'
2347 -2348 2349 0
-2349 2348 0
-2349 -2347 0
c Var 'aux585' direct represents '2' with '-2348'
2347 2349 -2348 0
c Encoding variable: aux586 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2350'
c Var 'aux586' direct represents '0' with '2350'
c Var 'aux586' order represents '1' with '2351'
-2350 2351 0
c Var 'aux586' direct represents '1' with '2352'
2350 -2351 2352 0
-2352 2351 0
-2352 -2350 0
c Var 'aux586' direct represents '2' with '-2351'
2350 2352 -2351 0
c Encoding variable: aux587 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2353'
c Var 'aux587' direct represents '0' with '2353'
c Var 'aux587' order represents '1' with '2354'
-2353 2354 0
c Var 'aux587' direct represents '1' with '2355'
2353 -2354 2355 0
-2355 2354 0
-2355 -2353 0
c Var 'aux587' direct represents '2' with '-2354'
2353 2355 -2354 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2356'
c Var 'aux588' direct represents '0' with '2356'
c Var 'aux588' order represents '1' with '2357'
-2356 2357 0
c Var 'aux588' direct represents '1' with '2358'
2356 -2357 2358 0
-2358 2357 0
-2358 -2356 0
c Var 'aux588' direct represents '2' with '-2357'
2356 2358 -2357 0
c Encoding variable: aux589 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux588))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2359'
c Var 'aux589' direct represents '0' with '2359'
c Var 'aux589' order represents '1' with '2360'
-2359 2360 0
c Var 'aux589' direct represents '1' with '2361'
2359 -2360 2361 0
-2361 2360 0
-2361 -2359 0
c Var 'aux589' order represents '2' with '2362'
-2360 2362 0
c Var 'aux589' direct represents '2' with '2363'
2360 -2362 2363 0
-2363 2362 0
-2363 -2360 0
c Var 'aux589' direct represents '3' with '-2362'
2359 2361 2363 -2362 0
c Encoding variable: aux590 with domain: int(0..4) (representing constraint (aux585 + aux587))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2364'
c Var 'aux590' direct represents '0' with '2364'
c Var 'aux590' order represents '1' with '2365'
-2364 2365 0
c Var 'aux590' direct represents '1' with '2366'
2364 -2365 2366 0
-2366 2365 0
-2366 -2364 0
c Var 'aux590' order represents '2' with '2367'
-2365 2367 0
c Var 'aux590' direct represents '2' with '2368'
2365 -2367 2368 0
-2368 2367 0
-2368 -2365 0
c Var 'aux590' order represents '3' with '2369'
-2367 2369 0
c Var 'aux590' direct represents '3' with '2370'
2367 -2369 2370 0
-2370 2369 0
-2370 -2367 0
c Var 'aux590' direct represents '4' with '-2369'
2364 2366 2368 2370 -2369 0
c Encoding variable: aux591 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2371'
c Var 'aux591' direct represents '0' with '2371'
c Var 'aux591' order represents '1' with '2372'
-2371 2372 0
c Var 'aux591' direct represents '1' with '2373'
2371 -2372 2373 0
-2373 2372 0
-2373 -2371 0
c Var 'aux591' direct represents '2' with '-2372'
2371 2373 -2372 0
c Encoding variable: aux592 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2374'
c Var 'aux592' direct represents '0' with '2374'
c Var 'aux592' order represents '1' with '2375'
-2374 2375 0
c Var 'aux592' direct represents '1' with '2376'
2374 -2375 2376 0
-2376 2375 0
-2376 -2374 0
c Var 'aux592' direct represents '2' with '-2375'
2374 2376 -2375 0
c Encoding variable: aux593 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2377'
c Var 'aux593' direct represents '0' with '2377'
c Var 'aux593' order represents '1' with '2378'
-2377 2378 0
c Var 'aux593' direct represents '1' with '2379'
2377 -2378 2379 0
-2379 2378 0
-2379 -2377 0
c Var 'aux593' direct represents '2' with '-2378'
2377 2379 -2378 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2380'
c Var 'aux594' direct represents '0' with '2380'
c Var 'aux594' order represents '1' with '2381'
-2380 2381 0
c Var 'aux594' direct represents '1' with '2382'
2380 -2381 2382 0
-2382 2381 0
-2382 -2380 0
c Var 'aux594' direct represents '2' with '-2381'
2380 2382 -2381 0
c Encoding variable: aux595 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux594))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2383'
c Var 'aux595' direct represents '0' with '2383'
c Var 'aux595' order represents '1' with '2384'
-2383 2384 0
c Var 'aux595' direct represents '1' with '2385'
2383 -2384 2385 0
-2385 2384 0
-2385 -2383 0
c Var 'aux595' order represents '2' with '2386'
-2384 2386 0
c Var 'aux595' direct represents '2' with '2387'
2384 -2386 2387 0
-2387 2386 0
-2387 -2384 0
c Var 'aux595' direct represents '3' with '-2386'
2383 2385 2387 -2386 0
c Encoding variable: aux596 with domain: int(0..4) (representing constraint (aux591 + aux593))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2388'
c Var 'aux596' direct represents '0' with '2388'
c Var 'aux596' order represents '1' with '2389'
-2388 2389 0
c Var 'aux596' direct represents '1' with '2390'
2388 -2389 2390 0
-2390 2389 0
-2390 -2388 0
c Var 'aux596' order represents '2' with '2391'
-2389 2391 0
c Var 'aux596' direct represents '2' with '2392'
2389 -2391 2392 0
-2392 2391 0
-2392 -2389 0
c Var 'aux596' order represents '3' with '2393'
-2391 2393 0
c Var 'aux596' direct represents '3' with '2394'
2391 -2393 2394 0
-2394 2393 0
-2394 -2391 0
c Var 'aux596' direct represents '4' with '-2393'
2388 2390 2392 2394 -2393 0
c Encoding variable: aux597 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2395'
c Var 'aux597' direct represents '0' with '2395'
c Var 'aux597' order represents '1' with '2396'
-2395 2396 0
c Var 'aux597' direct represents '1' with '2397'
2395 -2396 2397 0
-2397 2396 0
-2397 -2395 0
c Var 'aux597' direct represents '2' with '-2396'
2395 2397 -2396 0
c Encoding variable: aux598 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2398'
c Var 'aux598' direct represents '0' with '2398'
c Var 'aux598' order represents '1' with '2399'
-2398 2399 0
c Var 'aux598' direct represents '1' with '2400'
2398 -2399 2400 0
-2400 2399 0
-2400 -2398 0
c Var 'aux598' direct represents '2' with '-2399'
2398 2400 -2399 0
c Encoding variable: aux599 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2401'
c Var 'aux599' direct represents '0' with '2401'
c Var 'aux599' order represents '1' with '2402'
-2401 2402 0
c Var 'aux599' direct represents '1' with '2403'
2401 -2402 2403 0
-2403 2402 0
-2403 -2401 0
c Var 'aux599' direct represents '2' with '-2402'
2401 2403 -2402 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2404'
c Var 'aux600' direct represents '0' with '2404'
c Var 'aux600' order represents '1' with '2405'
-2404 2405 0
c Var 'aux600' direct represents '1' with '2406'
2404 -2405 2406 0
-2406 2405 0
-2406 -2404 0
c Var 'aux600' direct represents '2' with '-2405'
2404 2406 -2405 0
c Encoding variable: aux601 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux600))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2407'
c Var 'aux601' direct represents '0' with '2407'
c Var 'aux601' order represents '1' with '2408'
-2407 2408 0
c Var 'aux601' direct represents '1' with '2409'
2407 -2408 2409 0
-2409 2408 0
-2409 -2407 0
c Var 'aux601' order represents '2' with '2410'
-2408 2410 0
c Var 'aux601' direct represents '2' with '2411'
2408 -2410 2411 0
-2411 2410 0
-2411 -2408 0
c Var 'aux601' direct represents '3' with '-2410'
2407 2409 2411 -2410 0
c Encoding variable: aux602 with domain: int(0..4) (representing constraint (aux597 + aux599))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2412'
c Var 'aux602' direct represents '0' with '2412'
c Var 'aux602' order represents '1' with '2413'
-2412 2413 0
c Var 'aux602' direct represents '1' with '2414'
2412 -2413 2414 0
-2414 2413 0
-2414 -2412 0
c Var 'aux602' order represents '2' with '2415'
-2413 2415 0
c Var 'aux602' direct represents '2' with '2416'
2413 -2415 2416 0
-2416 2415 0
-2416 -2413 0
c Var 'aux602' order represents '3' with '2417'
-2415 2417 0
c Var 'aux602' direct represents '3' with '2418'
2415 -2417 2418 0
-2418 2417 0
-2418 -2415 0
c Var 'aux602' direct represents '4' with '-2417'
2412 2414 2416 2418 -2417 0
c Encoding variable: aux603 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2419'
c Var 'aux603' direct represents '0' with '2419'
c Var 'aux603' order represents '1' with '2420'
-2419 2420 0
c Var 'aux603' direct represents '1' with '2421'
2419 -2420 2421 0
-2421 2420 0
-2421 -2419 0
c Var 'aux603' direct represents '2' with '-2420'
2419 2421 -2420 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2422'
c Var 'aux604' direct represents '0' with '2422'
c Var 'aux604' order represents '1' with '2423'
-2422 2423 0
c Var 'aux604' direct represents '1' with '2424'
2422 -2423 2424 0
-2424 2423 0
-2424 -2422 0
c Var 'aux604' direct represents '2' with '-2423'
2422 2424 -2423 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2425'
c Var 'aux605' direct represents '0' with '2425'
c Var 'aux605' order represents '1' with '2426'
-2425 2426 0
c Var 'aux605' direct represents '1' with '2427'
2425 -2426 2427 0
-2427 2426 0
-2427 -2425 0
c Var 'aux605' direct represents '2' with '-2426'
2425 2427 -2426 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2428'
c Var 'aux606' direct represents '0' with '2428'
c Var 'aux606' order represents '1' with '2429'
-2428 2429 0
c Var 'aux606' direct represents '1' with '2430'
2428 -2429 2430 0
-2430 2429 0
-2430 -2428 0
c Var 'aux606' direct represents '2' with '-2429'
2428 2430 -2429 0
c Encoding variable: aux607 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux606))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2431'
c Var 'aux607' direct represents '0' with '2431'
c Var 'aux607' order represents '1' with '2432'
-2431 2432 0
c Var 'aux607' direct represents '1' with '2433'
2431 -2432 2433 0
-2433 2432 0
-2433 -2431 0
c Var 'aux607' order represents '2' with '2434'
-2432 2434 0
c Var 'aux607' direct represents '2' with '2435'
2432 -2434 2435 0
-2435 2434 0
-2435 -2432 0
c Var 'aux607' direct represents '3' with '-2434'
2431 2433 2435 -2434 0
c Encoding variable: aux608 with domain: int(0..4) (representing constraint (aux603 + aux605))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2436'
c Var 'aux608' direct represents '0' with '2436'
c Var 'aux608' order represents '1' with '2437'
-2436 2437 0
c Var 'aux608' direct represents '1' with '2438'
2436 -2437 2438 0
-2438 2437 0
-2438 -2436 0
c Var 'aux608' order represents '2' with '2439'
-2437 2439 0
c Var 'aux608' direct represents '2' with '2440'
2437 -2439 2440 0
-2440 2439 0
-2440 -2437 0
c Var 'aux608' order represents '3' with '2441'
-2439 2441 0
c Var 'aux608' direct represents '3' with '2442'
2439 -2441 2442 0
-2442 2441 0
-2442 -2439 0
c Var 'aux608' direct represents '4' with '-2441'
2436 2438 2440 2442 -2441 0
c Encoding variable: aux609 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2443'
c Var 'aux609' direct represents '0' with '2443'
c Var 'aux609' order represents '1' with '2444'
-2443 2444 0
c Var 'aux609' direct represents '1' with '2445'
2443 -2444 2445 0
-2445 2444 0
-2445 -2443 0
c Var 'aux609' direct represents '2' with '-2444'
2443 2445 -2444 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2446'
c Var 'aux610' direct represents '0' with '2446'
c Var 'aux610' order represents '1' with '2447'
-2446 2447 0
c Var 'aux610' direct represents '1' with '2448'
2446 -2447 2448 0
-2448 2447 0
-2448 -2446 0
c Var 'aux610' direct represents '2' with '-2447'
2446 2448 -2447 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2449'
c Var 'aux611' direct represents '0' with '2449'
c Var 'aux611' order represents '1' with '2450'
-2449 2450 0
c Var 'aux611' direct represents '1' with '2451'
2449 -2450 2451 0
-2451 2450 0
-2451 -2449 0
c Var 'aux611' direct represents '2' with '-2450'
2449 2451 -2450 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2452'
c Var 'aux612' direct represents '0' with '2452'
c Var 'aux612' order represents '1' with '2453'
-2452 2453 0
c Var 'aux612' direct represents '1' with '2454'
2452 -2453 2454 0
-2454 2453 0
-2454 -2452 0
c Var 'aux612' direct represents '2' with '-2453'
2452 2454 -2453 0
c Encoding variable: aux613 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux612))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2455'
c Var 'aux613' direct represents '0' with '2455'
c Var 'aux613' order represents '1' with '2456'
-2455 2456 0
c Var 'aux613' direct represents '1' with '2457'
2455 -2456 2457 0
-2457 2456 0
-2457 -2455 0
c Var 'aux613' order represents '2' with '2458'
-2456 2458 0
c Var 'aux613' direct represents '2' with '2459'
2456 -2458 2459 0
-2459 2458 0
-2459 -2456 0
c Var 'aux613' direct represents '3' with '-2458'
2455 2457 2459 -2458 0
c Encoding variable: aux614 with domain: int(0..4) (representing constraint (aux609 + aux611))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2460'
c Var 'aux614' direct represents '0' with '2460'
c Var 'aux614' order represents '1' with '2461'
-2460 2461 0
c Var 'aux614' direct represents '1' with '2462'
2460 -2461 2462 0
-2462 2461 0
-2462 -2460 0
c Var 'aux614' order represents '2' with '2463'
-2461 2463 0
c Var 'aux614' direct represents '2' with '2464'
2461 -2463 2464 0
-2464 2463 0
-2464 -2461 0
c Var 'aux614' order represents '3' with '2465'
-2463 2465 0
c Var 'aux614' direct represents '3' with '2466'
2463 -2465 2466 0
-2466 2465 0
-2466 -2463 0
c Var 'aux614' direct represents '4' with '-2465'
2460 2462 2464 2466 -2465 0
c Encoding variable: aux615 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2467'
c Var 'aux615' direct represents '0' with '2467'
c Var 'aux615' order represents '1' with '2468'
-2467 2468 0
c Var 'aux615' direct represents '1' with '2469'
2467 -2468 2469 0
-2469 2468 0
-2469 -2467 0
c Var 'aux615' direct represents '2' with '-2468'
2467 2469 -2468 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2470'
c Var 'aux616' direct represents '0' with '2470'
c Var 'aux616' order represents '1' with '2471'
-2470 2471 0
c Var 'aux616' direct represents '1' with '2472'
2470 -2471 2472 0
-2472 2471 0
-2472 -2470 0
c Var 'aux616' direct represents '2' with '-2471'
2470 2472 -2471 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2473'
c Var 'aux617' direct represents '0' with '2473'
c Var 'aux617' order represents '1' with '2474'
-2473 2474 0
c Var 'aux617' direct represents '1' with '2475'
2473 -2474 2475 0
-2475 2474 0
-2475 -2473 0
c Var 'aux617' direct represents '2' with '-2474'
2473 2475 -2474 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2476'
c Var 'aux618' direct represents '0' with '2476'
c Var 'aux618' order represents '1' with '2477'
-2476 2477 0
c Var 'aux618' direct represents '1' with '2478'
2476 -2477 2478 0
-2478 2477 0
-2478 -2476 0
c Var 'aux618' direct represents '2' with '-2477'
2476 2478 -2477 0
c Encoding variable: aux619 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux618))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2479'
c Var 'aux619' direct represents '0' with '2479'
c Var 'aux619' order represents '1' with '2480'
-2479 2480 0
c Var 'aux619' direct represents '1' with '2481'
2479 -2480 2481 0
-2481 2480 0
-2481 -2479 0
c Var 'aux619' order represents '2' with '2482'
-2480 2482 0
c Var 'aux619' direct represents '2' with '2483'
2480 -2482 2483 0
-2483 2482 0
-2483 -2480 0
c Var 'aux619' direct represents '3' with '-2482'
2479 2481 2483 -2482 0
c Encoding variable: aux620 with domain: int(0..4) (representing constraint (aux615 + aux617))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2484'
c Var 'aux620' direct represents '0' with '2484'
c Var 'aux620' order represents '1' with '2485'
-2484 2485 0
c Var 'aux620' direct represents '1' with '2486'
2484 -2485 2486 0
-2486 2485 0
-2486 -2484 0
c Var 'aux620' order represents '2' with '2487'
-2485 2487 0
c Var 'aux620' direct represents '2' with '2488'
2485 -2487 2488 0
-2488 2487 0
-2488 -2485 0
c Var 'aux620' order represents '3' with '2489'
-2487 2489 0
c Var 'aux620' direct represents '3' with '2490'
2487 -2489 2490 0
-2490 2489 0
-2490 -2487 0
c Var 'aux620' direct represents '4' with '-2489'
2484 2486 2488 2490 -2489 0
c Encoding variable: aux621 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2491'
c Var 'aux621' direct represents '0' with '2491'
c Var 'aux621' order represents '1' with '2492'
-2491 2492 0
c Var 'aux621' direct represents '1' with '2493'
2491 -2492 2493 0
-2493 2492 0
-2493 -2491 0
c Var 'aux621' direct represents '2' with '-2492'
2491 2493 -2492 0
c Encoding variable: aux622 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2494'
c Var 'aux622' direct represents '0' with '2494'
c Var 'aux622' order represents '1' with '2495'
-2494 2495 0
c Var 'aux622' direct represents '1' with '2496'
2494 -2495 2496 0
-2496 2495 0
-2496 -2494 0
c Var 'aux622' direct represents '2' with '-2495'
2494 2496 -2495 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2497'
c Var 'aux623' direct represents '0' with '2497'
c Var 'aux623' order represents '1' with '2498'
-2497 2498 0
c Var 'aux623' direct represents '1' with '2499'
2497 -2498 2499 0
-2499 2498 0
-2499 -2497 0
c Var 'aux623' direct represents '2' with '-2498'
2497 2499 -2498 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2500'
c Var 'aux624' direct represents '0' with '2500'
c Var 'aux624' order represents '1' with '2501'
-2500 2501 0
c Var 'aux624' direct represents '1' with '2502'
2500 -2501 2502 0
-2502 2501 0
-2502 -2500 0
c Var 'aux624' direct represents '2' with '-2501'
2500 2502 -2501 0
c Encoding variable: aux625 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux624))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2503'
c Var 'aux625' direct represents '0' with '2503'
c Var 'aux625' order represents '1' with '2504'
-2503 2504 0
c Var 'aux625' direct represents '1' with '2505'
2503 -2504 2505 0
-2505 2504 0
-2505 -2503 0
c Var 'aux625' order represents '2' with '2506'
-2504 2506 0
c Var 'aux625' direct represents '2' with '2507'
2504 -2506 2507 0
-2507 2506 0
-2507 -2504 0
c Var 'aux625' direct represents '3' with '-2506'
2503 2505 2507 -2506 0
c Encoding variable: aux626 with domain: int(0..4) (representing constraint (aux621 + aux623))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2508'
c Var 'aux626' direct represents '0' with '2508'
c Var 'aux626' order represents '1' with '2509'
-2508 2509 0
c Var 'aux626' direct represents '1' with '2510'
2508 -2509 2510 0
-2510 2509 0
-2510 -2508 0
c Var 'aux626' order represents '2' with '2511'
-2509 2511 0
c Var 'aux626' direct represents '2' with '2512'
2509 -2511 2512 0
-2512 2511 0
-2512 -2509 0
c Var 'aux626' order represents '3' with '2513'
-2511 2513 0
c Var 'aux626' direct represents '3' with '2514'
2511 -2513 2514 0
-2514 2513 0
-2514 -2511 0
c Var 'aux626' direct represents '4' with '-2513'
2508 2510 2512 2514 -2513 0
c Encoding variable: aux627 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2515'
c Var 'aux627' direct represents '0' with '2515'
c Var 'aux627' order represents '1' with '2516'
-2515 2516 0
c Var 'aux627' direct represents '1' with '2517'
2515 -2516 2517 0
-2517 2516 0
-2517 -2515 0
c Var 'aux627' direct represents '2' with '-2516'
2515 2517 -2516 0
c Encoding variable: aux628 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2518'
c Var 'aux628' direct represents '0' with '2518'
c Var 'aux628' order represents '1' with '2519'
-2518 2519 0
c Var 'aux628' direct represents '1' with '2520'
2518 -2519 2520 0
-2520 2519 0
-2520 -2518 0
c Var 'aux628' direct represents '2' with '-2519'
2518 2520 -2519 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2521'
c Var 'aux629' direct represents '0' with '2521'
c Var 'aux629' order represents '1' with '2522'
-2521 2522 0
c Var 'aux629' direct represents '1' with '2523'
2521 -2522 2523 0
-2523 2522 0
-2523 -2521 0
c Var 'aux629' direct represents '2' with '-2522'
2521 2523 -2522 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2524'
c Var 'aux630' direct represents '0' with '2524'
c Var 'aux630' order represents '1' with '2525'
-2524 2525 0
c Var 'aux630' direct represents '1' with '2526'
2524 -2525 2526 0
-2526 2525 0
-2526 -2524 0
c Var 'aux630' direct represents '2' with '-2525'
2524 2526 -2525 0
c Encoding variable: aux631 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux630))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2527'
c Var 'aux631' direct represents '0' with '2527'
c Var 'aux631' order represents '1' with '2528'
-2527 2528 0
c Var 'aux631' direct represents '1' with '2529'
2527 -2528 2529 0
-2529 2528 0
-2529 -2527 0
c Var 'aux631' order represents '2' with '2530'
-2528 2530 0
c Var 'aux631' direct represents '2' with '2531'
2528 -2530 2531 0
-2531 2530 0
-2531 -2528 0
c Var 'aux631' direct represents '3' with '-2530'
2527 2529 2531 -2530 0
c Encoding variable: aux632 with domain: int(0..4) (representing constraint (aux627 + aux629))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2532'
c Var 'aux632' direct represents '0' with '2532'
c Var 'aux632' order represents '1' with '2533'
-2532 2533 0
c Var 'aux632' direct represents '1' with '2534'
2532 -2533 2534 0
-2534 2533 0
-2534 -2532 0
c Var 'aux632' order represents '2' with '2535'
-2533 2535 0
c Var 'aux632' direct represents '2' with '2536'
2533 -2535 2536 0
-2536 2535 0
-2536 -2533 0
c Var 'aux632' order represents '3' with '2537'
-2535 2537 0
c Var 'aux632' direct represents '3' with '2538'
2535 -2537 2538 0
-2538 2537 0
-2538 -2535 0
c Var 'aux632' direct represents '4' with '-2537'
2532 2534 2536 2538 -2537 0
c Encoding variable: aux633 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2539'
c Var 'aux633' direct represents '0' with '2539'
c Var 'aux633' order represents '1' with '2540'
-2539 2540 0
c Var 'aux633' direct represents '1' with '2541'
2539 -2540 2541 0
-2541 2540 0
-2541 -2539 0
c Var 'aux633' direct represents '2' with '-2540'
2539 2541 -2540 0
c Encoding variable: aux634 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2542'
c Var 'aux634' direct represents '0' with '2542'
c Var 'aux634' order represents '1' with '2543'
-2542 2543 0
c Var 'aux634' direct represents '1' with '2544'
2542 -2543 2544 0
-2544 2543 0
-2544 -2542 0
c Var 'aux634' direct represents '2' with '-2543'
2542 2544 -2543 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2545'
c Var 'aux635' direct represents '0' with '2545'
c Var 'aux635' order represents '1' with '2546'
-2545 2546 0
c Var 'aux635' direct represents '1' with '2547'
2545 -2546 2547 0
-2547 2546 0
-2547 -2545 0
c Var 'aux635' direct represents '2' with '-2546'
2545 2547 -2546 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2548'
c Var 'aux636' direct represents '0' with '2548'
c Var 'aux636' order represents '1' with '2549'
-2548 2549 0
c Var 'aux636' direct represents '1' with '2550'
2548 -2549 2550 0
-2550 2549 0
-2550 -2548 0
c Var 'aux636' direct represents '2' with '-2549'
2548 2550 -2549 0
c Encoding variable: aux637 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux636))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2551'
c Var 'aux637' direct represents '0' with '2551'
c Var 'aux637' order represents '1' with '2552'
-2551 2552 0
c Var 'aux637' direct represents '1' with '2553'
2551 -2552 2553 0
-2553 2552 0
-2553 -2551 0
c Var 'aux637' order represents '2' with '2554'
-2552 2554 0
c Var 'aux637' direct represents '2' with '2555'
2552 -2554 2555 0
-2555 2554 0
-2555 -2552 0
c Var 'aux637' direct represents '3' with '-2554'
2551 2553 2555 -2554 0
c Encoding variable: aux638 with domain: int(0..4) (representing constraint (aux633 + aux635))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2556'
c Var 'aux638' direct represents '0' with '2556'
c Var 'aux638' order represents '1' with '2557'
-2556 2557 0
c Var 'aux638' direct represents '1' with '2558'
2556 -2557 2558 0
-2558 2557 0
-2558 -2556 0
c Var 'aux638' order represents '2' with '2559'
-2557 2559 0
c Var 'aux638' direct represents '2' with '2560'
2557 -2559 2560 0
-2560 2559 0
-2560 -2557 0
c Var 'aux638' order represents '3' with '2561'
-2559 2561 0
c Var 'aux638' direct represents '3' with '2562'
2559 -2561 2562 0
-2562 2561 0
-2562 -2559 0
c Var 'aux638' direct represents '4' with '-2561'
2556 2558 2560 2562 -2561 0
c Encoding variable: aux639 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2563'
c Var 'aux639' direct represents '0' with '2563'
c Var 'aux639' order represents '1' with '2564'
-2563 2564 0
c Var 'aux639' direct represents '1' with '2565'
2563 -2564 2565 0
-2565 2564 0
-2565 -2563 0
c Var 'aux639' direct represents '2' with '-2564'
2563 2565 -2564 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2566'
c Var 'aux640' direct represents '0' with '2566'
c Var 'aux640' order represents '1' with '2567'
-2566 2567 0
c Var 'aux640' direct represents '1' with '2568'
2566 -2567 2568 0
-2568 2567 0
-2568 -2566 0
c Var 'aux640' direct represents '2' with '-2567'
2566 2568 -2567 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2569'
c Var 'aux641' direct represents '0' with '2569'
c Var 'aux641' order represents '1' with '2570'
-2569 2570 0
c Var 'aux641' direct represents '1' with '2571'
2569 -2570 2571 0
-2571 2570 0
-2571 -2569 0
c Var 'aux641' direct represents '2' with '-2570'
2569 2571 -2570 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2572'
c Var 'aux642' direct represents '0' with '2572'
c Var 'aux642' order represents '1' with '2573'
-2572 2573 0
c Var 'aux642' direct represents '1' with '2574'
2572 -2573 2574 0
-2574 2573 0
-2574 -2572 0
c Var 'aux642' direct represents '2' with '-2573'
2572 2574 -2573 0
c Encoding variable: aux643 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux642))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2575'
c Var 'aux643' direct represents '0' with '2575'
c Var 'aux643' order represents '1' with '2576'
-2575 2576 0
c Var 'aux643' direct represents '1' with '2577'
2575 -2576 2577 0
-2577 2576 0
-2577 -2575 0
c Var 'aux643' order represents '2' with '2578'
-2576 2578 0
c Var 'aux643' direct represents '2' with '2579'
2576 -2578 2579 0
-2579 2578 0
-2579 -2576 0
c Var 'aux643' direct represents '3' with '-2578'
2575 2577 2579 -2578 0
c Encoding variable: aux644 with domain: int(0..4) (representing constraint (aux639 + aux641))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2580'
c Var 'aux644' direct represents '0' with '2580'
c Var 'aux644' order represents '1' with '2581'
-2580 2581 0
c Var 'aux644' direct represents '1' with '2582'
2580 -2581 2582 0
-2582 2581 0
-2582 -2580 0
c Var 'aux644' order represents '2' with '2583'
-2581 2583 0
c Var 'aux644' direct represents '2' with '2584'
2581 -2583 2584 0
-2584 2583 0
-2584 -2581 0
c Var 'aux644' order represents '3' with '2585'
-2583 2585 0
c Var 'aux644' direct represents '3' with '2586'
2583 -2585 2586 0
-2586 2585 0
-2586 -2583 0
c Var 'aux644' direct represents '4' with '-2585'
2580 2582 2584 2586 -2585 0
c Encoding variable: aux645 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2587'
c Var 'aux645' direct represents '0' with '2587'
c Var 'aux645' order represents '1' with '2588'
-2587 2588 0
c Var 'aux645' direct represents '1' with '2589'
2587 -2588 2589 0
-2589 2588 0
-2589 -2587 0
c Var 'aux645' direct represents '2' with '-2588'
2587 2589 -2588 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2590'
c Var 'aux646' direct represents '0' with '2590'
c Var 'aux646' order represents '1' with '2591'
-2590 2591 0
c Var 'aux646' direct represents '1' with '2592'
2590 -2591 2592 0
-2592 2591 0
-2592 -2590 0
c Var 'aux646' direct represents '2' with '-2591'
2590 2592 -2591 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2593'
c Var 'aux647' direct represents '0' with '2593'
c Var 'aux647' order represents '1' with '2594'
-2593 2594 0
c Var 'aux647' direct represents '1' with '2595'
2593 -2594 2595 0
-2595 2594 0
-2595 -2593 0
c Var 'aux647' direct represents '2' with '-2594'
2593 2595 -2594 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2596'
c Var 'aux648' direct represents '0' with '2596'
c Var 'aux648' order represents '1' with '2597'
-2596 2597 0
c Var 'aux648' direct represents '1' with '2598'
2596 -2597 2598 0
-2598 2597 0
-2598 -2596 0
c Var 'aux648' direct represents '2' with '-2597'
2596 2598 -2597 0
c Encoding variable: aux649 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux648))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2599'
c Var 'aux649' direct represents '0' with '2599'
c Var 'aux649' order represents '1' with '2600'
-2599 2600 0
c Var 'aux649' direct represents '1' with '2601'
2599 -2600 2601 0
-2601 2600 0
-2601 -2599 0
c Var 'aux649' order represents '2' with '2602'
-2600 2602 0
c Var 'aux649' direct represents '2' with '2603'
2600 -2602 2603 0
-2603 2602 0
-2603 -2600 0
c Var 'aux649' direct represents '3' with '-2602'
2599 2601 2603 -2602 0
c Encoding variable: aux650 with domain: int(0..4) (representing constraint (aux645 + aux647))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2604'
c Var 'aux650' direct represents '0' with '2604'
c Var 'aux650' order represents '1' with '2605'
-2604 2605 0
c Var 'aux650' direct represents '1' with '2606'
2604 -2605 2606 0
-2606 2605 0
-2606 -2604 0
c Var 'aux650' order represents '2' with '2607'
-2605 2607 0
c Var 'aux650' direct represents '2' with '2608'
2605 -2607 2608 0
-2608 2607 0
-2608 -2605 0
c Var 'aux650' order represents '3' with '2609'
-2607 2609 0
c Var 'aux650' direct represents '3' with '2610'
2607 -2609 2610 0
-2610 2609 0
-2610 -2607 0
c Var 'aux650' direct represents '4' with '-2609'
2604 2606 2608 2610 -2609 0
c Encoding variable: aux651 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2611'
c Var 'aux651' direct represents '0' with '2611'
c Var 'aux651' order represents '1' with '2612'
-2611 2612 0
c Var 'aux651' direct represents '1' with '2613'
2611 -2612 2613 0
-2613 2612 0
-2613 -2611 0
c Var 'aux651' direct represents '2' with '-2612'
2611 2613 -2612 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2614'
c Var 'aux652' direct represents '0' with '2614'
c Var 'aux652' order represents '1' with '2615'
-2614 2615 0
c Var 'aux652' direct represents '1' with '2616'
2614 -2615 2616 0
-2616 2615 0
-2616 -2614 0
c Var 'aux652' direct represents '2' with '-2615'
2614 2616 -2615 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2617'
c Var 'aux653' direct represents '0' with '2617'
c Var 'aux653' order represents '1' with '2618'
-2617 2618 0
c Var 'aux653' direct represents '1' with '2619'
2617 -2618 2619 0
-2619 2618 0
-2619 -2617 0
c Var 'aux653' direct represents '2' with '-2618'
2617 2619 -2618 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2620'
c Var 'aux654' direct represents '0' with '2620'
c Var 'aux654' order represents '1' with '2621'
-2620 2621 0
c Var 'aux654' direct represents '1' with '2622'
2620 -2621 2622 0
-2622 2621 0
-2622 -2620 0
c Var 'aux654' direct represents '2' with '-2621'
2620 2622 -2621 0
c Encoding variable: aux655 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux654))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2623'
c Var 'aux655' direct represents '0' with '2623'
c Var 'aux655' order represents '1' with '2624'
-2623 2624 0
c Var 'aux655' direct represents '1' with '2625'
2623 -2624 2625 0
-2625 2624 0
-2625 -2623 0
c Var 'aux655' order represents '2' with '2626'
-2624 2626 0
c Var 'aux655' direct represents '2' with '2627'
2624 -2626 2627 0
-2627 2626 0
-2627 -2624 0
c Var 'aux655' direct represents '3' with '-2626'
2623 2625 2627 -2626 0
c Encoding variable: aux656 with domain: int(0..4) (representing constraint (aux651 + aux653))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2628'
c Var 'aux656' direct represents '0' with '2628'
c Var 'aux656' order represents '1' with '2629'
-2628 2629 0
c Var 'aux656' direct represents '1' with '2630'
2628 -2629 2630 0
-2630 2629 0
-2630 -2628 0
c Var 'aux656' order represents '2' with '2631'
-2629 2631 0
c Var 'aux656' direct represents '2' with '2632'
2629 -2631 2632 0
-2632 2631 0
-2632 -2629 0
c Var 'aux656' order represents '3' with '2633'
-2631 2633 0
c Var 'aux656' direct represents '3' with '2634'
2631 -2633 2634 0
-2634 2633 0
-2634 -2631 0
c Var 'aux656' direct represents '4' with '-2633'
2628 2630 2632 2634 -2633 0
c Encoding variable: aux657 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2635'
c Var 'aux657' direct represents '0' with '2635'
c Var 'aux657' order represents '1' with '2636'
-2635 2636 0
c Var 'aux657' direct represents '1' with '2637'
2635 -2636 2637 0
-2637 2636 0
-2637 -2635 0
c Var 'aux657' direct represents '2' with '-2636'
2635 2637 -2636 0
c Encoding variable: aux658 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2638'
c Var 'aux658' direct represents '0' with '2638'
c Var 'aux658' order represents '1' with '2639'
-2638 2639 0
c Var 'aux658' direct represents '1' with '2640'
2638 -2639 2640 0
-2640 2639 0
-2640 -2638 0
c Var 'aux658' direct represents '2' with '-2639'
2638 2640 -2639 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2641'
c Var 'aux659' direct represents '0' with '2641'
c Var 'aux659' order represents '1' with '2642'
-2641 2642 0
c Var 'aux659' direct represents '1' with '2643'
2641 -2642 2643 0
-2643 2642 0
-2643 -2641 0
c Var 'aux659' direct represents '2' with '-2642'
2641 2643 -2642 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2644'
c Var 'aux660' direct represents '0' with '2644'
c Var 'aux660' order represents '1' with '2645'
-2644 2645 0
c Var 'aux660' direct represents '1' with '2646'
2644 -2645 2646 0
-2646 2645 0
-2646 -2644 0
c Var 'aux660' direct represents '2' with '-2645'
2644 2646 -2645 0
c Encoding variable: aux661 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux660))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2647'
c Var 'aux661' direct represents '0' with '2647'
c Var 'aux661' order represents '1' with '2648'
-2647 2648 0
c Var 'aux661' direct represents '1' with '2649'
2647 -2648 2649 0
-2649 2648 0
-2649 -2647 0
c Var 'aux661' order represents '2' with '2650'
-2648 2650 0
c Var 'aux661' direct represents '2' with '2651'
2648 -2650 2651 0
-2651 2650 0
-2651 -2648 0
c Var 'aux661' direct represents '3' with '-2650'
2647 2649 2651 -2650 0
c Encoding variable: aux662 with domain: int(0..4) (representing constraint (aux657 + aux659))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2652'
c Var 'aux662' direct represents '0' with '2652'
c Var 'aux662' order represents '1' with '2653'
-2652 2653 0
c Var 'aux662' direct represents '1' with '2654'
2652 -2653 2654 0
-2654 2653 0
-2654 -2652 0
c Var 'aux662' order represents '2' with '2655'
-2653 2655 0
c Var 'aux662' direct represents '2' with '2656'
2653 -2655 2656 0
-2656 2655 0
-2656 -2653 0
c Var 'aux662' order represents '3' with '2657'
-2655 2657 0
c Var 'aux662' direct represents '3' with '2658'
2655 -2657 2658 0
-2658 2657 0
-2658 -2655 0
c Var 'aux662' direct represents '4' with '-2657'
2652 2654 2656 2658 -2657 0
c Encoding variable: aux663 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2659'
c Var 'aux663' direct represents '0' with '2659'
c Var 'aux663' order represents '1' with '2660'
-2659 2660 0
c Var 'aux663' direct represents '1' with '2661'
2659 -2660 2661 0
-2661 2660 0
-2661 -2659 0
c Var 'aux663' direct represents '2' with '-2660'
2659 2661 -2660 0
c Encoding variable: aux664 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2662'
c Var 'aux664' direct represents '0' with '2662'
c Var 'aux664' order represents '1' with '2663'
-2662 2663 0
c Var 'aux664' direct represents '1' with '2664'
2662 -2663 2664 0
-2664 2663 0
-2664 -2662 0
c Var 'aux664' direct represents '2' with '-2663'
2662 2664 -2663 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2665'
c Var 'aux665' direct represents '0' with '2665'
c Var 'aux665' order represents '1' with '2666'
-2665 2666 0
c Var 'aux665' direct represents '1' with '2667'
2665 -2666 2667 0
-2667 2666 0
-2667 -2665 0
c Var 'aux665' direct represents '2' with '-2666'
2665 2667 -2666 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2668'
c Var 'aux666' direct represents '0' with '2668'
c Var 'aux666' order represents '1' with '2669'
-2668 2669 0
c Var 'aux666' direct represents '1' with '2670'
2668 -2669 2670 0
-2670 2669 0
-2670 -2668 0
c Var 'aux666' direct represents '2' with '-2669'
2668 2670 -2669 0
c Encoding variable: aux667 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux666))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2671'
c Var 'aux667' direct represents '0' with '2671'
c Var 'aux667' order represents '1' with '2672'
-2671 2672 0
c Var 'aux667' direct represents '1' with '2673'
2671 -2672 2673 0
-2673 2672 0
-2673 -2671 0
c Var 'aux667' order represents '2' with '2674'
-2672 2674 0
c Var 'aux667' direct represents '2' with '2675'
2672 -2674 2675 0
-2675 2674 0
-2675 -2672 0
c Var 'aux667' direct represents '3' with '-2674'
2671 2673 2675 -2674 0
c Encoding variable: aux668 with domain: int(0..4) (representing constraint (aux663 + aux665))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2676'
c Var 'aux668' direct represents '0' with '2676'
c Var 'aux668' order represents '1' with '2677'
-2676 2677 0
c Var 'aux668' direct represents '1' with '2678'
2676 -2677 2678 0
-2678 2677 0
-2678 -2676 0
c Var 'aux668' order represents '2' with '2679'
-2677 2679 0
c Var 'aux668' direct represents '2' with '2680'
2677 -2679 2680 0
-2680 2679 0
-2680 -2677 0
c Var 'aux668' order represents '3' with '2681'
-2679 2681 0
c Var 'aux668' direct represents '3' with '2682'
2679 -2681 2682 0
-2682 2681 0
-2682 -2679 0
c Var 'aux668' direct represents '4' with '-2681'
2676 2678 2680 2682 -2681 0
c Encoding variable: aux669 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2683'
c Var 'aux669' direct represents '0' with '2683'
c Var 'aux669' order represents '1' with '2684'
-2683 2684 0
c Var 'aux669' direct represents '1' with '2685'
2683 -2684 2685 0
-2685 2684 0
-2685 -2683 0
c Var 'aux669' direct represents '2' with '-2684'
2683 2685 -2684 0
c Encoding variable: aux670 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2686'
c Var 'aux670' direct represents '0' with '2686'
c Var 'aux670' order represents '1' with '2687'
-2686 2687 0
c Var 'aux670' direct represents '1' with '2688'
2686 -2687 2688 0
-2688 2687 0
-2688 -2686 0
c Var 'aux670' direct represents '2' with '-2687'
2686 2688 -2687 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2689'
c Var 'aux671' direct represents '0' with '2689'
c Var 'aux671' order represents '1' with '2690'
-2689 2690 0
c Var 'aux671' direct represents '1' with '2691'
2689 -2690 2691 0
-2691 2690 0
-2691 -2689 0
c Var 'aux671' direct represents '2' with '-2690'
2689 2691 -2690 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2692'
c Var 'aux672' direct represents '0' with '2692'
c Var 'aux672' order represents '1' with '2693'
-2692 2693 0
c Var 'aux672' direct represents '1' with '2694'
2692 -2693 2694 0
-2694 2693 0
-2694 -2692 0
c Var 'aux672' direct represents '2' with '-2693'
2692 2694 -2693 0
c Encoding variable: aux673 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux672))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2695'
c Var 'aux673' direct represents '0' with '2695'
c Var 'aux673' order represents '1' with '2696'
-2695 2696 0
c Var 'aux673' direct represents '1' with '2697'
2695 -2696 2697 0
-2697 2696 0
-2697 -2695 0
c Var 'aux673' order represents '2' with '2698'
-2696 2698 0
c Var 'aux673' direct represents '2' with '2699'
2696 -2698 2699 0
-2699 2698 0
-2699 -2696 0
c Var 'aux673' direct represents '3' with '-2698'
2695 2697 2699 -2698 0
c Encoding variable: aux674 with domain: int(0..4) (representing constraint (aux669 + aux671))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2700'
c Var 'aux674' direct represents '0' with '2700'
c Var 'aux674' order represents '1' with '2701'
-2700 2701 0
c Var 'aux674' direct represents '1' with '2702'
2700 -2701 2702 0
-2702 2701 0
-2702 -2700 0
c Var 'aux674' order represents '2' with '2703'
-2701 2703 0
c Var 'aux674' direct represents '2' with '2704'
2701 -2703 2704 0
-2704 2703 0
-2704 -2701 0
c Var 'aux674' order represents '3' with '2705'
-2703 2705 0
c Var 'aux674' direct represents '3' with '2706'
2703 -2705 2706 0
-2706 2705 0
-2706 -2703 0
c Var 'aux674' direct represents '4' with '-2705'
2700 2702 2704 2706 -2705 0
c Encoding variable: aux675 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2707'
c Var 'aux675' direct represents '0' with '2707'
c Var 'aux675' order represents '1' with '2708'
-2707 2708 0
c Var 'aux675' direct represents '1' with '2709'
2707 -2708 2709 0
-2709 2708 0
-2709 -2707 0
c Var 'aux675' direct represents '2' with '-2708'
2707 2709 -2708 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2710'
c Var 'aux676' direct represents '0' with '2710'
c Var 'aux676' order represents '1' with '2711'
-2710 2711 0
c Var 'aux676' direct represents '1' with '2712'
2710 -2711 2712 0
-2712 2711 0
-2712 -2710 0
c Var 'aux676' direct represents '2' with '-2711'
2710 2712 -2711 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2713'
c Var 'aux677' direct represents '0' with '2713'
c Var 'aux677' order represents '1' with '2714'
-2713 2714 0
c Var 'aux677' direct represents '1' with '2715'
2713 -2714 2715 0
-2715 2714 0
-2715 -2713 0
c Var 'aux677' direct represents '2' with '-2714'
2713 2715 -2714 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2716'
c Var 'aux678' direct represents '0' with '2716'
c Var 'aux678' order represents '1' with '2717'
-2716 2717 0
c Var 'aux678' direct represents '1' with '2718'
2716 -2717 2718 0
-2718 2717 0
-2718 -2716 0
c Var 'aux678' direct represents '2' with '-2717'
2716 2718 -2717 0
c Encoding variable: aux679 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux678))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2719'
c Var 'aux679' direct represents '0' with '2719'
c Var 'aux679' order represents '1' with '2720'
-2719 2720 0
c Var 'aux679' direct represents '1' with '2721'
2719 -2720 2721 0
-2721 2720 0
-2721 -2719 0
c Var 'aux679' order represents '2' with '2722'
-2720 2722 0
c Var 'aux679' direct represents '2' with '2723'
2720 -2722 2723 0
-2723 2722 0
-2723 -2720 0
c Var 'aux679' direct represents '3' with '-2722'
2719 2721 2723 -2722 0
c Encoding variable: aux680 with domain: int(0..4) (representing constraint (aux675 + aux677))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2724'
c Var 'aux680' direct represents '0' with '2724'
c Var 'aux680' order represents '1' with '2725'
-2724 2725 0
c Var 'aux680' direct represents '1' with '2726'
2724 -2725 2726 0
-2726 2725 0
-2726 -2724 0
c Var 'aux680' order represents '2' with '2727'
-2725 2727 0
c Var 'aux680' direct represents '2' with '2728'
2725 -2727 2728 0
-2728 2727 0
-2728 -2725 0
c Var 'aux680' order represents '3' with '2729'
-2727 2729 0
c Var 'aux680' direct represents '3' with '2730'
2727 -2729 2730 0
-2730 2729 0
-2730 -2727 0
c Var 'aux680' direct represents '4' with '-2729'
2724 2726 2728 2730 -2729 0
c Encoding variable: aux681 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2731'
c Var 'aux681' direct represents '0' with '2731'
c Var 'aux681' order represents '1' with '2732'
-2731 2732 0
c Var 'aux681' direct represents '1' with '2733'
2731 -2732 2733 0
-2733 2732 0
-2733 -2731 0
c Var 'aux681' direct represents '2' with '-2732'
2731 2733 -2732 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '2734'
c Var 'aux682' direct represents '0' with '2734'
c Var 'aux682' order represents '1' with '2735'
-2734 2735 0
c Var 'aux682' direct represents '1' with '2736'
2734 -2735 2736 0
-2736 2735 0
-2736 -2734 0
c Var 'aux682' direct represents '2' with '-2735'
2734 2736 -2735 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '2737'
c Var 'aux683' direct represents '0' with '2737'
c Var 'aux683' order represents '1' with '2738'
-2737 2738 0
c Var 'aux683' direct represents '1' with '2739'
2737 -2738 2739 0
-2739 2738 0
-2739 -2737 0
c Var 'aux683' direct represents '2' with '-2738'
2737 2739 -2738 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '2740'
c Var 'aux684' direct represents '0' with '2740'
c Var 'aux684' order represents '1' with '2741'
-2740 2741 0
c Var 'aux684' direct represents '1' with '2742'
2740 -2741 2742 0
-2742 2741 0
-2742 -2740 0
c Var 'aux684' direct represents '2' with '-2741'
2740 2742 -2741 0
c Encoding variable: aux685 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux684))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '2743'
c Var 'aux685' direct represents '0' with '2743'
c Var 'aux685' order represents '1' with '2744'
-2743 2744 0
c Var 'aux685' direct represents '1' with '2745'
2743 -2744 2745 0
-2745 2744 0
-2745 -2743 0
c Var 'aux685' order represents '2' with '2746'
-2744 2746 0
c Var 'aux685' direct represents '2' with '2747'
2744 -2746 2747 0
-2747 2746 0
-2747 -2744 0
c Var 'aux685' direct represents '3' with '-2746'
2743 2745 2747 -2746 0
c Encoding variable: aux686 with domain: int(0..4) (representing constraint (aux681 + aux683))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '2748'
c Var 'aux686' direct represents '0' with '2748'
c Var 'aux686' order represents '1' with '2749'
-2748 2749 0
c Var 'aux686' direct represents '1' with '2750'
2748 -2749 2750 0
-2750 2749 0
-2750 -2748 0
c Var 'aux686' order represents '2' with '2751'
-2749 2751 0
c Var 'aux686' direct represents '2' with '2752'
2749 -2751 2752 0
-2752 2751 0
-2752 -2749 0
c Var 'aux686' order represents '3' with '2753'
-2751 2753 0
c Var 'aux686' direct represents '3' with '2754'
2751 -2753 2754 0
-2754 2753 0
-2754 -2751 0
c Var 'aux686' direct represents '4' with '-2753'
2748 2750 2752 2754 -2753 0
c Encoding variable: aux687 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '2755'
c Var 'aux687' direct represents '0' with '2755'
c Var 'aux687' order represents '1' with '2756'
-2755 2756 0
c Var 'aux687' direct represents '1' with '2757'
2755 -2756 2757 0
-2757 2756 0
-2757 -2755 0
c Var 'aux687' direct represents '2' with '-2756'
2755 2757 -2756 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '2758'
c Var 'aux688' direct represents '0' with '2758'
c Var 'aux688' order represents '1' with '2759'
-2758 2759 0
c Var 'aux688' direct represents '1' with '2760'
2758 -2759 2760 0
-2760 2759 0
-2760 -2758 0
c Var 'aux688' direct represents '2' with '-2759'
2758 2760 -2759 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '2761'
c Var 'aux689' direct represents '0' with '2761'
c Var 'aux689' order represents '1' with '2762'
-2761 2762 0
c Var 'aux689' direct represents '1' with '2763'
2761 -2762 2763 0
-2763 2762 0
-2763 -2761 0
c Var 'aux689' direct represents '2' with '-2762'
2761 2763 -2762 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '2764'
c Var 'aux690' direct represents '0' with '2764'
c Var 'aux690' order represents '1' with '2765'
-2764 2765 0
c Var 'aux690' direct represents '1' with '2766'
2764 -2765 2766 0
-2766 2765 0
-2766 -2764 0
c Var 'aux690' direct represents '2' with '-2765'
2764 2766 -2765 0
c Encoding variable: aux691 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux690))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '2767'
c Var 'aux691' direct represents '0' with '2767'
c Var 'aux691' order represents '1' with '2768'
-2767 2768 0
c Var 'aux691' direct represents '1' with '2769'
2767 -2768 2769 0
-2769 2768 0
-2769 -2767 0
c Var 'aux691' order represents '2' with '2770'
-2768 2770 0
c Var 'aux691' direct represents '2' with '2771'
2768 -2770 2771 0
-2771 2770 0
-2771 -2768 0
c Var 'aux691' direct represents '3' with '-2770'
2767 2769 2771 -2770 0
c Encoding variable: aux692 with domain: int(0..4) (representing constraint (aux687 + aux689))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '2772'
c Var 'aux692' direct represents '0' with '2772'
c Var 'aux692' order represents '1' with '2773'
-2772 2773 0
c Var 'aux692' direct represents '1' with '2774'
2772 -2773 2774 0
-2774 2773 0
-2774 -2772 0
c Var 'aux692' order represents '2' with '2775'
-2773 2775 0
c Var 'aux692' direct represents '2' with '2776'
2773 -2775 2776 0
-2776 2775 0
-2776 -2773 0
c Var 'aux692' order represents '3' with '2777'
-2775 2777 0
c Var 'aux692' direct represents '3' with '2778'
2775 -2777 2778 0
-2778 2777 0
-2778 -2775 0
c Var 'aux692' direct represents '4' with '-2777'
2772 2774 2776 2778 -2777 0
c Encoding variable: aux693 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '2779'
c Var 'aux693' direct represents '0' with '2779'
c Var 'aux693' order represents '1' with '2780'
-2779 2780 0
c Var 'aux693' direct represents '1' with '2781'
2779 -2780 2781 0
-2781 2780 0
-2781 -2779 0
c Var 'aux693' direct represents '2' with '-2780'
2779 2781 -2780 0
c Encoding variable: aux694 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '2782'
c Var 'aux694' direct represents '0' with '2782'
c Var 'aux694' order represents '1' with '2783'
-2782 2783 0
c Var 'aux694' direct represents '1' with '2784'
2782 -2783 2784 0
-2784 2783 0
-2784 -2782 0
c Var 'aux694' direct represents '2' with '-2783'
2782 2784 -2783 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '2785'
c Var 'aux695' direct represents '0' with '2785'
c Var 'aux695' order represents '1' with '2786'
-2785 2786 0
c Var 'aux695' direct represents '1' with '2787'
2785 -2786 2787 0
-2787 2786 0
-2787 -2785 0
c Var 'aux695' direct represents '2' with '-2786'
2785 2787 -2786 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '2788'
c Var 'aux696' direct represents '0' with '2788'
c Var 'aux696' order represents '1' with '2789'
-2788 2789 0
c Var 'aux696' direct represents '1' with '2790'
2788 -2789 2790 0
-2790 2789 0
-2790 -2788 0
c Var 'aux696' direct represents '2' with '-2789'
2788 2790 -2789 0
c Encoding variable: aux697 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux696))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '2791'
c Var 'aux697' direct represents '0' with '2791'
c Var 'aux697' order represents '1' with '2792'
-2791 2792 0
c Var 'aux697' direct represents '1' with '2793'
2791 -2792 2793 0
-2793 2792 0
-2793 -2791 0
c Var 'aux697' order represents '2' with '2794'
-2792 2794 0
c Var 'aux697' direct represents '2' with '2795'
2792 -2794 2795 0
-2795 2794 0
-2795 -2792 0
c Var 'aux697' direct represents '3' with '-2794'
2791 2793 2795 -2794 0
c Encoding variable: aux698 with domain: int(0..4) (representing constraint (aux693 + aux695))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '2796'
c Var 'aux698' direct represents '0' with '2796'
c Var 'aux698' order represents '1' with '2797'
-2796 2797 0
c Var 'aux698' direct represents '1' with '2798'
2796 -2797 2798 0
-2798 2797 0
-2798 -2796 0
c Var 'aux698' order represents '2' with '2799'
-2797 2799 0
c Var 'aux698' direct represents '2' with '2800'
2797 -2799 2800 0
-2800 2799 0
-2800 -2797 0
c Var 'aux698' order represents '3' with '2801'
-2799 2801 0
c Var 'aux698' direct represents '3' with '2802'
2799 -2801 2802 0
-2802 2801 0
-2802 -2799 0
c Var 'aux698' direct represents '4' with '-2801'
2796 2798 2800 2802 -2801 0
c Encoding variable: aux699 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '2803'
c Var 'aux699' direct represents '0' with '2803'
c Var 'aux699' order represents '1' with '2804'
-2803 2804 0
c Var 'aux699' direct represents '1' with '2805'
2803 -2804 2805 0
-2805 2804 0
-2805 -2803 0
c Var 'aux699' direct represents '2' with '-2804'
2803 2805 -2804 0
c Encoding variable: aux700 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '2806'
c Var 'aux700' direct represents '0' with '2806'
c Var 'aux700' order represents '1' with '2807'
-2806 2807 0
c Var 'aux700' direct represents '1' with '2808'
2806 -2807 2808 0
-2808 2807 0
-2808 -2806 0
c Var 'aux700' direct represents '2' with '-2807'
2806 2808 -2807 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '2809'
c Var 'aux701' direct represents '0' with '2809'
c Var 'aux701' order represents '1' with '2810'
-2809 2810 0
c Var 'aux701' direct represents '1' with '2811'
2809 -2810 2811 0
-2811 2810 0
-2811 -2809 0
c Var 'aux701' direct represents '2' with '-2810'
2809 2811 -2810 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '2812'
c Var 'aux702' direct represents '0' with '2812'
c Var 'aux702' order represents '1' with '2813'
-2812 2813 0
c Var 'aux702' direct represents '1' with '2814'
2812 -2813 2814 0
-2814 2813 0
-2814 -2812 0
c Var 'aux702' direct represents '2' with '-2813'
2812 2814 -2813 0
c Encoding variable: aux703 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux702))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '2815'
c Var 'aux703' direct represents '0' with '2815'
c Var 'aux703' order represents '1' with '2816'
-2815 2816 0
c Var 'aux703' direct represents '1' with '2817'
2815 -2816 2817 0
-2817 2816 0
-2817 -2815 0
c Var 'aux703' order represents '2' with '2818'
-2816 2818 0
c Var 'aux703' direct represents '2' with '2819'
2816 -2818 2819 0
-2819 2818 0
-2819 -2816 0
c Var 'aux703' direct represents '3' with '-2818'
2815 2817 2819 -2818 0
c Encoding variable: aux704 with domain: int(0..4) (representing constraint (aux699 + aux701))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '2820'
c Var 'aux704' direct represents '0' with '2820'
c Var 'aux704' order represents '1' with '2821'
-2820 2821 0
c Var 'aux704' direct represents '1' with '2822'
2820 -2821 2822 0
-2822 2821 0
-2822 -2820 0
c Var 'aux704' order represents '2' with '2823'
-2821 2823 0
c Var 'aux704' direct represents '2' with '2824'
2821 -2823 2824 0
-2824 2823 0
-2824 -2821 0
c Var 'aux704' order represents '3' with '2825'
-2823 2825 0
c Var 'aux704' direct represents '3' with '2826'
2823 -2825 2826 0
-2826 2825 0
-2826 -2823 0
c Var 'aux704' direct represents '4' with '-2825'
2820 2822 2824 2826 -2825 0
c Encoding variable: aux705 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '2827'
c Var 'aux705' direct represents '0' with '2827'
c Var 'aux705' order represents '1' with '2828'
-2827 2828 0
c Var 'aux705' direct represents '1' with '2829'
2827 -2828 2829 0
-2829 2828 0
-2829 -2827 0
c Var 'aux705' direct represents '2' with '-2828'
2827 2829 -2828 0
c Encoding variable: aux706 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '2830'
c Var 'aux706' direct represents '0' with '2830'
c Var 'aux706' order represents '1' with '2831'
-2830 2831 0
c Var 'aux706' direct represents '1' with '2832'
2830 -2831 2832 0
-2832 2831 0
-2832 -2830 0
c Var 'aux706' direct represents '2' with '-2831'
2830 2832 -2831 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '2833'
c Var 'aux707' direct represents '0' with '2833'
c Var 'aux707' order represents '1' with '2834'
-2833 2834 0
c Var 'aux707' direct represents '1' with '2835'
2833 -2834 2835 0
-2835 2834 0
-2835 -2833 0
c Var 'aux707' direct represents '2' with '-2834'
2833 2835 -2834 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '2836'
c Var 'aux708' direct represents '0' with '2836'
c Var 'aux708' order represents '1' with '2837'
-2836 2837 0
c Var 'aux708' direct represents '1' with '2838'
2836 -2837 2838 0
-2838 2837 0
-2838 -2836 0
c Var 'aux708' direct represents '2' with '-2837'
2836 2838 -2837 0
c Encoding variable: aux709 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux708))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '2839'
c Var 'aux709' direct represents '0' with '2839'
c Var 'aux709' order represents '1' with '2840'
-2839 2840 0
c Var 'aux709' direct represents '1' with '2841'
2839 -2840 2841 0
-2841 2840 0
-2841 -2839 0
c Var 'aux709' order represents '2' with '2842'
-2840 2842 0
c Var 'aux709' direct represents '2' with '2843'
2840 -2842 2843 0
-2843 2842 0
-2843 -2840 0
c Var 'aux709' direct represents '3' with '-2842'
2839 2841 2843 -2842 0
c Encoding variable: aux710 with domain: int(0..4) (representing constraint (aux705 + aux707))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '2844'
c Var 'aux710' direct represents '0' with '2844'
c Var 'aux710' order represents '1' with '2845'
-2844 2845 0
c Var 'aux710' direct represents '1' with '2846'
2844 -2845 2846 0
-2846 2845 0
-2846 -2844 0
c Var 'aux710' order represents '2' with '2847'
-2845 2847 0
c Var 'aux710' direct represents '2' with '2848'
2845 -2847 2848 0
-2848 2847 0
-2848 -2845 0
c Var 'aux710' order represents '3' with '2849'
-2847 2849 0
c Var 'aux710' direct represents '3' with '2850'
2847 -2849 2850 0
-2850 2849 0
-2850 -2847 0
c Var 'aux710' direct represents '4' with '-2849'
2844 2846 2848 2850 -2849 0
c Encoding variable: aux711 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '2851'
c Var 'aux711' direct represents '0' with '2851'
c Var 'aux711' order represents '1' with '2852'
-2851 2852 0
c Var 'aux711' direct represents '1' with '2853'
2851 -2852 2853 0
-2853 2852 0
-2853 -2851 0
c Var 'aux711' direct represents '2' with '-2852'
2851 2853 -2852 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '2854'
c Var 'aux712' direct represents '0' with '2854'
c Var 'aux712' order represents '1' with '2855'
-2854 2855 0
c Var 'aux712' direct represents '1' with '2856'
2854 -2855 2856 0
-2856 2855 0
-2856 -2854 0
c Var 'aux712' direct represents '2' with '-2855'
2854 2856 -2855 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '2857'
c Var 'aux713' direct represents '0' with '2857'
c Var 'aux713' order represents '1' with '2858'
-2857 2858 0
c Var 'aux713' direct represents '1' with '2859'
2857 -2858 2859 0
-2859 2858 0
-2859 -2857 0
c Var 'aux713' direct represents '2' with '-2858'
2857 2859 -2858 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '2860'
c Var 'aux714' direct represents '0' with '2860'
c Var 'aux714' order represents '1' with '2861'
-2860 2861 0
c Var 'aux714' direct represents '1' with '2862'
2860 -2861 2862 0
-2862 2861 0
-2862 -2860 0
c Var 'aux714' direct represents '2' with '-2861'
2860 2862 -2861 0
c Encoding variable: aux715 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux714))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '2863'
c Var 'aux715' direct represents '0' with '2863'
c Var 'aux715' order represents '1' with '2864'
-2863 2864 0
c Var 'aux715' direct represents '1' with '2865'
2863 -2864 2865 0
-2865 2864 0
-2865 -2863 0
c Var 'aux715' order represents '2' with '2866'
-2864 2866 0
c Var 'aux715' direct represents '2' with '2867'
2864 -2866 2867 0
-2867 2866 0
-2867 -2864 0
c Var 'aux715' direct represents '3' with '-2866'
2863 2865 2867 -2866 0
c Encoding variable: aux716 with domain: int(0..4) (representing constraint (aux711 + aux713))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '2868'
c Var 'aux716' direct represents '0' with '2868'
c Var 'aux716' order represents '1' with '2869'
-2868 2869 0
c Var 'aux716' direct represents '1' with '2870'
2868 -2869 2870 0
-2870 2869 0
-2870 -2868 0
c Var 'aux716' order represents '2' with '2871'
-2869 2871 0
c Var 'aux716' direct represents '2' with '2872'
2869 -2871 2872 0
-2872 2871 0
-2872 -2869 0
c Var 'aux716' order represents '3' with '2873'
-2871 2873 0
c Var 'aux716' direct represents '3' with '2874'
2871 -2873 2874 0
-2874 2873 0
-2874 -2871 0
c Var 'aux716' direct represents '4' with '-2873'
2868 2870 2872 2874 -2873 0
c Encoding variable: aux717 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '2875'
c Var 'aux717' direct represents '0' with '2875'
c Var 'aux717' order represents '1' with '2876'
-2875 2876 0
c Var 'aux717' direct represents '1' with '2877'
2875 -2876 2877 0
-2877 2876 0
-2877 -2875 0
c Var 'aux717' direct represents '2' with '-2876'
2875 2877 -2876 0
c Encoding variable: aux718 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '2878'
c Var 'aux718' direct represents '0' with '2878'
c Var 'aux718' order represents '1' with '2879'
-2878 2879 0
c Var 'aux718' direct represents '1' with '2880'
2878 -2879 2880 0
-2880 2879 0
-2880 -2878 0
c Var 'aux718' direct represents '2' with '-2879'
2878 2880 -2879 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '2881'
c Var 'aux719' direct represents '0' with '2881'
c Var 'aux719' order represents '1' with '2882'
-2881 2882 0
c Var 'aux719' direct represents '1' with '2883'
2881 -2882 2883 0
-2883 2882 0
-2883 -2881 0
c Var 'aux719' direct represents '2' with '-2882'
2881 2883 -2882 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '2884'
c Var 'aux720' direct represents '0' with '2884'
c Var 'aux720' order represents '1' with '2885'
-2884 2885 0
c Var 'aux720' direct represents '1' with '2886'
2884 -2885 2886 0
-2886 2885 0
-2886 -2884 0
c Var 'aux720' direct represents '2' with '-2885'
2884 2886 -2885 0
c Encoding variable: aux721 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux720))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '2887'
c Var 'aux721' direct represents '0' with '2887'
c Var 'aux721' order represents '1' with '2888'
-2887 2888 0
c Var 'aux721' direct represents '1' with '2889'
2887 -2888 2889 0
-2889 2888 0
-2889 -2887 0
c Var 'aux721' order represents '2' with '2890'
-2888 2890 0
c Var 'aux721' direct represents '2' with '2891'
2888 -2890 2891 0
-2891 2890 0
-2891 -2888 0
c Var 'aux721' direct represents '3' with '-2890'
2887 2889 2891 -2890 0
c Encoding variable: aux722 with domain: int(0..4) (representing constraint (aux717 + aux719))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '2892'
c Var 'aux722' direct represents '0' with '2892'
c Var 'aux722' order represents '1' with '2893'
-2892 2893 0
c Var 'aux722' direct represents '1' with '2894'
2892 -2893 2894 0
-2894 2893 0
-2894 -2892 0
c Var 'aux722' order represents '2' with '2895'
-2893 2895 0
c Var 'aux722' direct represents '2' with '2896'
2893 -2895 2896 0
-2896 2895 0
-2896 -2893 0
c Var 'aux722' order represents '3' with '2897'
-2895 2897 0
c Var 'aux722' direct represents '3' with '2898'
2895 -2897 2898 0
-2898 2897 0
-2898 -2895 0
c Var 'aux722' direct represents '4' with '-2897'
2892 2894 2896 2898 -2897 0
c Encoding variable: aux723 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '2899'
c Var 'aux723' direct represents '0' with '2899'
c Var 'aux723' order represents '1' with '2900'
-2899 2900 0
c Var 'aux723' direct represents '1' with '2901'
2899 -2900 2901 0
-2901 2900 0
-2901 -2899 0
c Var 'aux723' direct represents '2' with '-2900'
2899 2901 -2900 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '2902'
c Var 'aux724' direct represents '0' with '2902'
c Var 'aux724' order represents '1' with '2903'
-2902 2903 0
c Var 'aux724' direct represents '1' with '2904'
2902 -2903 2904 0
-2904 2903 0
-2904 -2902 0
c Var 'aux724' direct represents '2' with '-2903'
2902 2904 -2903 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '2905'
c Var 'aux725' direct represents '0' with '2905'
c Var 'aux725' order represents '1' with '2906'
-2905 2906 0
c Var 'aux725' direct represents '1' with '2907'
2905 -2906 2907 0
-2907 2906 0
-2907 -2905 0
c Var 'aux725' direct represents '2' with '-2906'
2905 2907 -2906 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '2908'
c Var 'aux726' direct represents '0' with '2908'
c Var 'aux726' order represents '1' with '2909'
-2908 2909 0
c Var 'aux726' direct represents '1' with '2910'
2908 -2909 2910 0
-2910 2909 0
-2910 -2908 0
c Var 'aux726' direct represents '2' with '-2909'
2908 2910 -2909 0
c Encoding variable: aux727 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux726))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '2911'
c Var 'aux727' direct represents '0' with '2911'
c Var 'aux727' order represents '1' with '2912'
-2911 2912 0
c Var 'aux727' direct represents '1' with '2913'
2911 -2912 2913 0
-2913 2912 0
-2913 -2911 0
c Var 'aux727' order represents '2' with '2914'
-2912 2914 0
c Var 'aux727' direct represents '2' with '2915'
2912 -2914 2915 0
-2915 2914 0
-2915 -2912 0
c Var 'aux727' direct represents '3' with '-2914'
2911 2913 2915 -2914 0
c Encoding variable: aux728 with domain: int(0..4) (representing constraint (aux723 + aux725))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '2916'
c Var 'aux728' direct represents '0' with '2916'
c Var 'aux728' order represents '1' with '2917'
-2916 2917 0
c Var 'aux728' direct represents '1' with '2918'
2916 -2917 2918 0
-2918 2917 0
-2918 -2916 0
c Var 'aux728' order represents '2' with '2919'
-2917 2919 0
c Var 'aux728' direct represents '2' with '2920'
2917 -2919 2920 0
-2920 2919 0
-2920 -2917 0
c Var 'aux728' order represents '3' with '2921'
-2919 2921 0
c Var 'aux728' direct represents '3' with '2922'
2919 -2921 2922 0
-2922 2921 0
-2922 -2919 0
c Var 'aux728' direct represents '4' with '-2921'
2916 2918 2920 2922 -2921 0
c Encoding variable: aux729 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '2923'
c Var 'aux729' direct represents '0' with '2923'
c Var 'aux729' order represents '1' with '2924'
-2923 2924 0
c Var 'aux729' direct represents '1' with '2925'
2923 -2924 2925 0
-2925 2924 0
-2925 -2923 0
c Var 'aux729' direct represents '2' with '-2924'
2923 2925 -2924 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '2926'
c Var 'aux730' direct represents '0' with '2926'
c Var 'aux730' order represents '1' with '2927'
-2926 2927 0
c Var 'aux730' direct represents '1' with '2928'
2926 -2927 2928 0
-2928 2927 0
-2928 -2926 0
c Var 'aux730' direct represents '2' with '-2927'
2926 2928 -2927 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '2929'
c Var 'aux731' direct represents '0' with '2929'
c Var 'aux731' order represents '1' with '2930'
-2929 2930 0
c Var 'aux731' direct represents '1' with '2931'
2929 -2930 2931 0
-2931 2930 0
-2931 -2929 0
c Var 'aux731' direct represents '2' with '-2930'
2929 2931 -2930 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '2932'
c Var 'aux732' direct represents '0' with '2932'
c Var 'aux732' order represents '1' with '2933'
-2932 2933 0
c Var 'aux732' direct represents '1' with '2934'
2932 -2933 2934 0
-2934 2933 0
-2934 -2932 0
c Var 'aux732' direct represents '2' with '-2933'
2932 2934 -2933 0
c Encoding variable: aux733 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux732))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '2935'
c Var 'aux733' direct represents '0' with '2935'
c Var 'aux733' order represents '1' with '2936'
-2935 2936 0
c Var 'aux733' direct represents '1' with '2937'
2935 -2936 2937 0
-2937 2936 0
-2937 -2935 0
c Var 'aux733' order represents '2' with '2938'
-2936 2938 0
c Var 'aux733' direct represents '2' with '2939'
2936 -2938 2939 0
-2939 2938 0
-2939 -2936 0
c Var 'aux733' direct represents '3' with '-2938'
2935 2937 2939 -2938 0
c Encoding variable: aux734 with domain: int(0..4) (representing constraint (aux729 + aux731))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '2940'
c Var 'aux734' direct represents '0' with '2940'
c Var 'aux734' order represents '1' with '2941'
-2940 2941 0
c Var 'aux734' direct represents '1' with '2942'
2940 -2941 2942 0
-2942 2941 0
-2942 -2940 0
c Var 'aux734' order represents '2' with '2943'
-2941 2943 0
c Var 'aux734' direct represents '2' with '2944'
2941 -2943 2944 0
-2944 2943 0
-2944 -2941 0
c Var 'aux734' order represents '3' with '2945'
-2943 2945 0
c Var 'aux734' direct represents '3' with '2946'
2943 -2945 2946 0
-2946 2945 0
-2946 -2943 0
c Var 'aux734' direct represents '4' with '-2945'
2940 2942 2944 2946 -2945 0
c Encoding variable: aux735 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '2947'
c Var 'aux735' direct represents '0' with '2947'
c Var 'aux735' order represents '1' with '2948'
-2947 2948 0
c Var 'aux735' direct represents '1' with '2949'
2947 -2948 2949 0
-2949 2948 0
-2949 -2947 0
c Var 'aux735' direct represents '2' with '-2948'
2947 2949 -2948 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '2950'
c Var 'aux736' direct represents '0' with '2950'
c Var 'aux736' order represents '1' with '2951'
-2950 2951 0
c Var 'aux736' direct represents '1' with '2952'
2950 -2951 2952 0
-2952 2951 0
-2952 -2950 0
c Var 'aux736' direct represents '2' with '-2951'
2950 2952 -2951 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '2953'
c Var 'aux737' direct represents '0' with '2953'
c Var 'aux737' order represents '1' with '2954'
-2953 2954 0
c Var 'aux737' direct represents '1' with '2955'
2953 -2954 2955 0
-2955 2954 0
-2955 -2953 0
c Var 'aux737' direct represents '2' with '-2954'
2953 2955 -2954 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '2956'
c Var 'aux738' direct represents '0' with '2956'
c Var 'aux738' order represents '1' with '2957'
-2956 2957 0
c Var 'aux738' direct represents '1' with '2958'
2956 -2957 2958 0
-2958 2957 0
-2958 -2956 0
c Var 'aux738' direct represents '2' with '-2957'
2956 2958 -2957 0
c Encoding variable: aux739 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux738))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '2959'
c Var 'aux739' direct represents '0' with '2959'
c Var 'aux739' order represents '1' with '2960'
-2959 2960 0
c Var 'aux739' direct represents '1' with '2961'
2959 -2960 2961 0
-2961 2960 0
-2961 -2959 0
c Var 'aux739' order represents '2' with '2962'
-2960 2962 0
c Var 'aux739' direct represents '2' with '2963'
2960 -2962 2963 0
-2963 2962 0
-2963 -2960 0
c Var 'aux739' direct represents '3' with '-2962'
2959 2961 2963 -2962 0
c Encoding variable: aux740 with domain: int(0..4) (representing constraint (aux735 + aux737))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '2964'
c Var 'aux740' direct represents '0' with '2964'
c Var 'aux740' order represents '1' with '2965'
-2964 2965 0
c Var 'aux740' direct represents '1' with '2966'
2964 -2965 2966 0
-2966 2965 0
-2966 -2964 0
c Var 'aux740' order represents '2' with '2967'
-2965 2967 0
c Var 'aux740' direct represents '2' with '2968'
2965 -2967 2968 0
-2968 2967 0
-2968 -2965 0
c Var 'aux740' order represents '3' with '2969'
-2967 2969 0
c Var 'aux740' direct represents '3' with '2970'
2967 -2969 2970 0
-2970 2969 0
-2970 -2967 0
c Var 'aux740' direct represents '4' with '-2969'
2964 2966 2968 2970 -2969 0
c Encoding variable: aux741 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '2971'
c Var 'aux741' direct represents '0' with '2971'
c Var 'aux741' order represents '1' with '2972'
-2971 2972 0
c Var 'aux741' direct represents '1' with '2973'
2971 -2972 2973 0
-2973 2972 0
-2973 -2971 0
c Var 'aux741' direct represents '2' with '-2972'
2971 2973 -2972 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '2974'
c Var 'aux742' direct represents '0' with '2974'
c Var 'aux742' order represents '1' with '2975'
-2974 2975 0
c Var 'aux742' direct represents '1' with '2976'
2974 -2975 2976 0
-2976 2975 0
-2976 -2974 0
c Var 'aux742' direct represents '2' with '-2975'
2974 2976 -2975 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '2977'
c Var 'aux743' direct represents '0' with '2977'
c Var 'aux743' order represents '1' with '2978'
-2977 2978 0
c Var 'aux743' direct represents '1' with '2979'
2977 -2978 2979 0
-2979 2978 0
-2979 -2977 0
c Var 'aux743' direct represents '2' with '-2978'
2977 2979 -2978 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '2980'
c Var 'aux744' direct represents '0' with '2980'
c Var 'aux744' order represents '1' with '2981'
-2980 2981 0
c Var 'aux744' direct represents '1' with '2982'
2980 -2981 2982 0
-2982 2981 0
-2982 -2980 0
c Var 'aux744' direct represents '2' with '-2981'
2980 2982 -2981 0
c Encoding variable: aux745 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux744))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '2983'
c Var 'aux745' direct represents '0' with '2983'
c Var 'aux745' order represents '1' with '2984'
-2983 2984 0
c Var 'aux745' direct represents '1' with '2985'
2983 -2984 2985 0
-2985 2984 0
-2985 -2983 0
c Var 'aux745' order represents '2' with '2986'
-2984 2986 0
c Var 'aux745' direct represents '2' with '2987'
2984 -2986 2987 0
-2987 2986 0
-2987 -2984 0
c Var 'aux745' direct represents '3' with '-2986'
2983 2985 2987 -2986 0
c Encoding variable: aux746 with domain: int(0..4) (representing constraint (aux741 + aux743))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '2988'
c Var 'aux746' direct represents '0' with '2988'
c Var 'aux746' order represents '1' with '2989'
-2988 2989 0
c Var 'aux746' direct represents '1' with '2990'
2988 -2989 2990 0
-2990 2989 0
-2990 -2988 0
c Var 'aux746' order represents '2' with '2991'
-2989 2991 0
c Var 'aux746' direct represents '2' with '2992'
2989 -2991 2992 0
-2992 2991 0
-2992 -2989 0
c Var 'aux746' order represents '3' with '2993'
-2991 2993 0
c Var 'aux746' direct represents '3' with '2994'
2991 -2993 2994 0
-2994 2993 0
-2994 -2991 0
c Var 'aux746' direct represents '4' with '-2993'
2988 2990 2992 2994 -2993 0
c Encoding variable: aux747 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '2995'
c Var 'aux747' direct represents '0' with '2995'
c Var 'aux747' order represents '1' with '2996'
-2995 2996 0
c Var 'aux747' direct represents '1' with '2997'
2995 -2996 2997 0
-2997 2996 0
-2997 -2995 0
c Var 'aux747' direct represents '2' with '-2996'
2995 2997 -2996 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '2998'
c Var 'aux748' direct represents '0' with '2998'
c Var 'aux748' order represents '1' with '2999'
-2998 2999 0
c Var 'aux748' direct represents '1' with '3000'
2998 -2999 3000 0
-3000 2999 0
-3000 -2998 0
c Var 'aux748' direct represents '2' with '-2999'
2998 3000 -2999 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3001'
c Var 'aux749' direct represents '0' with '3001'
c Var 'aux749' order represents '1' with '3002'
-3001 3002 0
c Var 'aux749' direct represents '1' with '3003'
3001 -3002 3003 0
-3003 3002 0
-3003 -3001 0
c Var 'aux749' direct represents '2' with '-3002'
3001 3003 -3002 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3004'
c Var 'aux750' direct represents '0' with '3004'
c Var 'aux750' order represents '1' with '3005'
-3004 3005 0
c Var 'aux750' direct represents '1' with '3006'
3004 -3005 3006 0
-3006 3005 0
-3006 -3004 0
c Var 'aux750' direct represents '2' with '-3005'
3004 3006 -3005 0
c Encoding variable: aux751 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux750))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3007'
c Var 'aux751' direct represents '0' with '3007'
c Var 'aux751' order represents '1' with '3008'
-3007 3008 0
c Var 'aux751' direct represents '1' with '3009'
3007 -3008 3009 0
-3009 3008 0
-3009 -3007 0
c Var 'aux751' order represents '2' with '3010'
-3008 3010 0
c Var 'aux751' direct represents '2' with '3011'
3008 -3010 3011 0
-3011 3010 0
-3011 -3008 0
c Var 'aux751' direct represents '3' with '-3010'
3007 3009 3011 -3010 0
c Encoding variable: aux752 with domain: int(0..4) (representing constraint (aux747 + aux749))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3012'
c Var 'aux752' direct represents '0' with '3012'
c Var 'aux752' order represents '1' with '3013'
-3012 3013 0
c Var 'aux752' direct represents '1' with '3014'
3012 -3013 3014 0
-3014 3013 0
-3014 -3012 0
c Var 'aux752' order represents '2' with '3015'
-3013 3015 0
c Var 'aux752' direct represents '2' with '3016'
3013 -3015 3016 0
-3016 3015 0
-3016 -3013 0
c Var 'aux752' order represents '3' with '3017'
-3015 3017 0
c Var 'aux752' direct represents '3' with '3018'
3015 -3017 3018 0
-3018 3017 0
-3018 -3015 0
c Var 'aux752' direct represents '4' with '-3017'
3012 3014 3016 3018 -3017 0
c Encoding variable: aux753 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3019'
c Var 'aux753' direct represents '0' with '3019'
c Var 'aux753' order represents '1' with '3020'
-3019 3020 0
c Var 'aux753' direct represents '1' with '3021'
3019 -3020 3021 0
-3021 3020 0
-3021 -3019 0
c Var 'aux753' direct represents '2' with '-3020'
3019 3021 -3020 0
c Encoding variable: aux754 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3022'
c Var 'aux754' direct represents '0' with '3022'
c Var 'aux754' order represents '1' with '3023'
-3022 3023 0
c Var 'aux754' direct represents '1' with '3024'
3022 -3023 3024 0
-3024 3023 0
-3024 -3022 0
c Var 'aux754' direct represents '2' with '-3023'
3022 3024 -3023 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3025'
c Var 'aux755' direct represents '0' with '3025'
c Var 'aux755' order represents '1' with '3026'
-3025 3026 0
c Var 'aux755' direct represents '1' with '3027'
3025 -3026 3027 0
-3027 3026 0
-3027 -3025 0
c Var 'aux755' direct represents '2' with '-3026'
3025 3027 -3026 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3028'
c Var 'aux756' direct represents '0' with '3028'
c Var 'aux756' order represents '1' with '3029'
-3028 3029 0
c Var 'aux756' direct represents '1' with '3030'
3028 -3029 3030 0
-3030 3029 0
-3030 -3028 0
c Var 'aux756' direct represents '2' with '-3029'
3028 3030 -3029 0
c Encoding variable: aux757 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux756))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3031'
c Var 'aux757' direct represents '0' with '3031'
c Var 'aux757' order represents '1' with '3032'
-3031 3032 0
c Var 'aux757' direct represents '1' with '3033'
3031 -3032 3033 0
-3033 3032 0
-3033 -3031 0
c Var 'aux757' order represents '2' with '3034'
-3032 3034 0
c Var 'aux757' direct represents '2' with '3035'
3032 -3034 3035 0
-3035 3034 0
-3035 -3032 0
c Var 'aux757' direct represents '3' with '-3034'
3031 3033 3035 -3034 0
c Encoding variable: aux758 with domain: int(0..4) (representing constraint (aux753 + aux755))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3036'
c Var 'aux758' direct represents '0' with '3036'
c Var 'aux758' order represents '1' with '3037'
-3036 3037 0
c Var 'aux758' direct represents '1' with '3038'
3036 -3037 3038 0
-3038 3037 0
-3038 -3036 0
c Var 'aux758' order represents '2' with '3039'
-3037 3039 0
c Var 'aux758' direct represents '2' with '3040'
3037 -3039 3040 0
-3040 3039 0
-3040 -3037 0
c Var 'aux758' order represents '3' with '3041'
-3039 3041 0
c Var 'aux758' direct represents '3' with '3042'
3039 -3041 3042 0
-3042 3041 0
-3042 -3039 0
c Var 'aux758' direct represents '4' with '-3041'
3036 3038 3040 3042 -3041 0
c Encoding variable: aux759 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3043'
c Var 'aux759' direct represents '0' with '3043'
c Var 'aux759' order represents '1' with '3044'
-3043 3044 0
c Var 'aux759' direct represents '1' with '3045'
3043 -3044 3045 0
-3045 3044 0
-3045 -3043 0
c Var 'aux759' direct represents '2' with '-3044'
3043 3045 -3044 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3046'
c Var 'aux760' direct represents '0' with '3046'
c Var 'aux760' order represents '1' with '3047'
-3046 3047 0
c Var 'aux760' direct represents '1' with '3048'
3046 -3047 3048 0
-3048 3047 0
-3048 -3046 0
c Var 'aux760' direct represents '2' with '-3047'
3046 3048 -3047 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3049'
c Var 'aux761' direct represents '0' with '3049'
c Var 'aux761' order represents '1' with '3050'
-3049 3050 0
c Var 'aux761' direct represents '1' with '3051'
3049 -3050 3051 0
-3051 3050 0
-3051 -3049 0
c Var 'aux761' direct represents '2' with '-3050'
3049 3051 -3050 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3052'
c Var 'aux762' direct represents '0' with '3052'
c Var 'aux762' order represents '1' with '3053'
-3052 3053 0
c Var 'aux762' direct represents '1' with '3054'
3052 -3053 3054 0
-3054 3053 0
-3054 -3052 0
c Var 'aux762' direct represents '2' with '-3053'
3052 3054 -3053 0
c Encoding variable: aux763 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux762))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3055'
c Var 'aux763' direct represents '0' with '3055'
c Var 'aux763' order represents '1' with '3056'
-3055 3056 0
c Var 'aux763' direct represents '1' with '3057'
3055 -3056 3057 0
-3057 3056 0
-3057 -3055 0
c Var 'aux763' order represents '2' with '3058'
-3056 3058 0
c Var 'aux763' direct represents '2' with '3059'
3056 -3058 3059 0
-3059 3058 0
-3059 -3056 0
c Var 'aux763' direct represents '3' with '-3058'
3055 3057 3059 -3058 0
c Encoding variable: aux764 with domain: int(0..4) (representing constraint (aux759 + aux761))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3060'
c Var 'aux764' direct represents '0' with '3060'
c Var 'aux764' order represents '1' with '3061'
-3060 3061 0
c Var 'aux764' direct represents '1' with '3062'
3060 -3061 3062 0
-3062 3061 0
-3062 -3060 0
c Var 'aux764' order represents '2' with '3063'
-3061 3063 0
c Var 'aux764' direct represents '2' with '3064'
3061 -3063 3064 0
-3064 3063 0
-3064 -3061 0
c Var 'aux764' order represents '3' with '3065'
-3063 3065 0
c Var 'aux764' direct represents '3' with '3066'
3063 -3065 3066 0
-3066 3065 0
-3066 -3063 0
c Var 'aux764' direct represents '4' with '-3065'
3060 3062 3064 3066 -3065 0
c Encoding variable: aux765 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3067'
c Var 'aux765' direct represents '0' with '3067'
c Var 'aux765' order represents '1' with '3068'
-3067 3068 0
c Var 'aux765' direct represents '1' with '3069'
3067 -3068 3069 0
-3069 3068 0
-3069 -3067 0
c Var 'aux765' direct represents '2' with '-3068'
3067 3069 -3068 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3070'
c Var 'aux766' direct represents '0' with '3070'
c Var 'aux766' order represents '1' with '3071'
-3070 3071 0
c Var 'aux766' direct represents '1' with '3072'
3070 -3071 3072 0
-3072 3071 0
-3072 -3070 0
c Var 'aux766' direct represents '2' with '-3071'
3070 3072 -3071 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3073'
c Var 'aux767' direct represents '0' with '3073'
c Var 'aux767' order represents '1' with '3074'
-3073 3074 0
c Var 'aux767' direct represents '1' with '3075'
3073 -3074 3075 0
-3075 3074 0
-3075 -3073 0
c Var 'aux767' direct represents '2' with '-3074'
3073 3075 -3074 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3076'
c Var 'aux768' direct represents '0' with '3076'
c Var 'aux768' order represents '1' with '3077'
-3076 3077 0
c Var 'aux768' direct represents '1' with '3078'
3076 -3077 3078 0
-3078 3077 0
-3078 -3076 0
c Var 'aux768' direct represents '2' with '-3077'
3076 3078 -3077 0
c Encoding variable: aux769 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux768))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3079'
c Var 'aux769' direct represents '0' with '3079'
c Var 'aux769' order represents '1' with '3080'
-3079 3080 0
c Var 'aux769' direct represents '1' with '3081'
3079 -3080 3081 0
-3081 3080 0
-3081 -3079 0
c Var 'aux769' order represents '2' with '3082'
-3080 3082 0
c Var 'aux769' direct represents '2' with '3083'
3080 -3082 3083 0
-3083 3082 0
-3083 -3080 0
c Var 'aux769' direct represents '3' with '-3082'
3079 3081 3083 -3082 0
c Encoding variable: aux770 with domain: int(0..4) (representing constraint (aux765 + aux767))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3084'
c Var 'aux770' direct represents '0' with '3084'
c Var 'aux770' order represents '1' with '3085'
-3084 3085 0
c Var 'aux770' direct represents '1' with '3086'
3084 -3085 3086 0
-3086 3085 0
-3086 -3084 0
c Var 'aux770' order represents '2' with '3087'
-3085 3087 0
c Var 'aux770' direct represents '2' with '3088'
3085 -3087 3088 0
-3088 3087 0
-3088 -3085 0
c Var 'aux770' order represents '3' with '3089'
-3087 3089 0
c Var 'aux770' direct represents '3' with '3090'
3087 -3089 3090 0
-3090 3089 0
-3090 -3087 0
c Var 'aux770' direct represents '4' with '-3089'
3084 3086 3088 3090 -3089 0
c Encoding variable: aux771 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3091'
c Var 'aux771' direct represents '0' with '3091'
c Var 'aux771' order represents '1' with '3092'
-3091 3092 0
c Var 'aux771' direct represents '1' with '3093'
3091 -3092 3093 0
-3093 3092 0
-3093 -3091 0
c Var 'aux771' direct represents '2' with '-3092'
3091 3093 -3092 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3094'
c Var 'aux772' direct represents '0' with '3094'
c Var 'aux772' order represents '1' with '3095'
-3094 3095 0
c Var 'aux772' direct represents '1' with '3096'
3094 -3095 3096 0
-3096 3095 0
-3096 -3094 0
c Var 'aux772' direct represents '2' with '-3095'
3094 3096 -3095 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3097'
c Var 'aux773' direct represents '0' with '3097'
c Var 'aux773' order represents '1' with '3098'
-3097 3098 0
c Var 'aux773' direct represents '1' with '3099'
3097 -3098 3099 0
-3099 3098 0
-3099 -3097 0
c Var 'aux773' direct represents '2' with '-3098'
3097 3099 -3098 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3100'
c Var 'aux774' direct represents '0' with '3100'
c Var 'aux774' order represents '1' with '3101'
-3100 3101 0
c Var 'aux774' direct represents '1' with '3102'
3100 -3101 3102 0
-3102 3101 0
-3102 -3100 0
c Var 'aux774' direct represents '2' with '-3101'
3100 3102 -3101 0
c Encoding variable: aux775 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux774))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3103'
c Var 'aux775' direct represents '0' with '3103'
c Var 'aux775' order represents '1' with '3104'
-3103 3104 0
c Var 'aux775' direct represents '1' with '3105'
3103 -3104 3105 0
-3105 3104 0
-3105 -3103 0
c Var 'aux775' order represents '2' with '3106'
-3104 3106 0
c Var 'aux775' direct represents '2' with '3107'
3104 -3106 3107 0
-3107 3106 0
-3107 -3104 0
c Var 'aux775' direct represents '3' with '-3106'
3103 3105 3107 -3106 0
c Encoding variable: aux776 with domain: int(0..4) (representing constraint (aux771 + aux773))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3108'
c Var 'aux776' direct represents '0' with '3108'
c Var 'aux776' order represents '1' with '3109'
-3108 3109 0
c Var 'aux776' direct represents '1' with '3110'
3108 -3109 3110 0
-3110 3109 0
-3110 -3108 0
c Var 'aux776' order represents '2' with '3111'
-3109 3111 0
c Var 'aux776' direct represents '2' with '3112'
3109 -3111 3112 0
-3112 3111 0
-3112 -3109 0
c Var 'aux776' order represents '3' with '3113'
-3111 3113 0
c Var 'aux776' direct represents '3' with '3114'
3111 -3113 3114 0
-3114 3113 0
-3114 -3111 0
c Var 'aux776' direct represents '4' with '-3113'
3108 3110 3112 3114 -3113 0
c Encoding variable: aux777 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3115'
c Var 'aux777' direct represents '0' with '3115'
c Var 'aux777' order represents '1' with '3116'
-3115 3116 0
c Var 'aux777' direct represents '1' with '3117'
3115 -3116 3117 0
-3117 3116 0
-3117 -3115 0
c Var 'aux777' direct represents '2' with '-3116'
3115 3117 -3116 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3118'
c Var 'aux778' direct represents '0' with '3118'
c Var 'aux778' order represents '1' with '3119'
-3118 3119 0
c Var 'aux778' direct represents '1' with '3120'
3118 -3119 3120 0
-3120 3119 0
-3120 -3118 0
c Var 'aux778' direct represents '2' with '-3119'
3118 3120 -3119 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3121'
c Var 'aux779' direct represents '0' with '3121'
c Var 'aux779' order represents '1' with '3122'
-3121 3122 0
c Var 'aux779' direct represents '1' with '3123'
3121 -3122 3123 0
-3123 3122 0
-3123 -3121 0
c Var 'aux779' direct represents '2' with '-3122'
3121 3123 -3122 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3124'
c Var 'aux780' direct represents '0' with '3124'
c Var 'aux780' order represents '1' with '3125'
-3124 3125 0
c Var 'aux780' direct represents '1' with '3126'
3124 -3125 3126 0
-3126 3125 0
-3126 -3124 0
c Var 'aux780' direct represents '2' with '-3125'
3124 3126 -3125 0
c Encoding variable: aux781 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux780))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3127'
c Var 'aux781' direct represents '0' with '3127'
c Var 'aux781' order represents '1' with '3128'
-3127 3128 0
c Var 'aux781' direct represents '1' with '3129'
3127 -3128 3129 0
-3129 3128 0
-3129 -3127 0
c Var 'aux781' order represents '2' with '3130'
-3128 3130 0
c Var 'aux781' direct represents '2' with '3131'
3128 -3130 3131 0
-3131 3130 0
-3131 -3128 0
c Var 'aux781' direct represents '3' with '-3130'
3127 3129 3131 -3130 0
c Encoding variable: aux782 with domain: int(0..4) (representing constraint (aux777 + aux779))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3132'
c Var 'aux782' direct represents '0' with '3132'
c Var 'aux782' order represents '1' with '3133'
-3132 3133 0
c Var 'aux782' direct represents '1' with '3134'
3132 -3133 3134 0
-3134 3133 0
-3134 -3132 0
c Var 'aux782' order represents '2' with '3135'
-3133 3135 0
c Var 'aux782' direct represents '2' with '3136'
3133 -3135 3136 0
-3136 3135 0
-3136 -3133 0
c Var 'aux782' order represents '3' with '3137'
-3135 3137 0
c Var 'aux782' direct represents '3' with '3138'
3135 -3137 3138 0
-3138 3137 0
-3138 -3135 0
c Var 'aux782' direct represents '4' with '-3137'
3132 3134 3136 3138 -3137 0
c Encoding variable: aux783 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3139'
c Var 'aux783' direct represents '0' with '3139'
c Var 'aux783' order represents '1' with '3140'
-3139 3140 0
c Var 'aux783' direct represents '1' with '3141'
3139 -3140 3141 0
-3141 3140 0
-3141 -3139 0
c Var 'aux783' direct represents '2' with '-3140'
3139 3141 -3140 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3142'
c Var 'aux784' direct represents '0' with '3142'
c Var 'aux784' order represents '1' with '3143'
-3142 3143 0
c Var 'aux784' direct represents '1' with '3144'
3142 -3143 3144 0
-3144 3143 0
-3144 -3142 0
c Var 'aux784' direct represents '2' with '-3143'
3142 3144 -3143 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3145'
c Var 'aux785' direct represents '0' with '3145'
c Var 'aux785' order represents '1' with '3146'
-3145 3146 0
c Var 'aux785' direct represents '1' with '3147'
3145 -3146 3147 0
-3147 3146 0
-3147 -3145 0
c Var 'aux785' direct represents '2' with '-3146'
3145 3147 -3146 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3148'
c Var 'aux786' direct represents '0' with '3148'
c Var 'aux786' order represents '1' with '3149'
-3148 3149 0
c Var 'aux786' direct represents '1' with '3150'
3148 -3149 3150 0
-3150 3149 0
-3150 -3148 0
c Var 'aux786' direct represents '2' with '-3149'
3148 3150 -3149 0
c Encoding variable: aux787 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux786))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3151'
c Var 'aux787' direct represents '0' with '3151'
c Var 'aux787' order represents '1' with '3152'
-3151 3152 0
c Var 'aux787' direct represents '1' with '3153'
3151 -3152 3153 0
-3153 3152 0
-3153 -3151 0
c Var 'aux787' order represents '2' with '3154'
-3152 3154 0
c Var 'aux787' direct represents '2' with '3155'
3152 -3154 3155 0
-3155 3154 0
-3155 -3152 0
c Var 'aux787' direct represents '3' with '-3154'
3151 3153 3155 -3154 0
c Encoding variable: aux788 with domain: int(0..4) (representing constraint (aux783 + aux785))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3156'
c Var 'aux788' direct represents '0' with '3156'
c Var 'aux788' order represents '1' with '3157'
-3156 3157 0
c Var 'aux788' direct represents '1' with '3158'
3156 -3157 3158 0
-3158 3157 0
-3158 -3156 0
c Var 'aux788' order represents '2' with '3159'
-3157 3159 0
c Var 'aux788' direct represents '2' with '3160'
3157 -3159 3160 0
-3160 3159 0
-3160 -3157 0
c Var 'aux788' order represents '3' with '3161'
-3159 3161 0
c Var 'aux788' direct represents '3' with '3162'
3159 -3161 3162 0
-3162 3161 0
-3162 -3159 0
c Var 'aux788' direct represents '4' with '-3161'
3156 3158 3160 3162 -3161 0
c Encoding variable: aux789 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3163'
c Var 'aux789' direct represents '0' with '3163'
c Var 'aux789' order represents '1' with '3164'
-3163 3164 0
c Var 'aux789' direct represents '1' with '3165'
3163 -3164 3165 0
-3165 3164 0
-3165 -3163 0
c Var 'aux789' direct represents '2' with '-3164'
3163 3165 -3164 0
c Encoding variable: aux790 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3166'
c Var 'aux790' direct represents '0' with '3166'
c Var 'aux790' order represents '1' with '3167'
-3166 3167 0
c Var 'aux790' direct represents '1' with '3168'
3166 -3167 3168 0
-3168 3167 0
-3168 -3166 0
c Var 'aux790' direct represents '2' with '-3167'
3166 3168 -3167 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3169'
c Var 'aux791' direct represents '0' with '3169'
c Var 'aux791' order represents '1' with '3170'
-3169 3170 0
c Var 'aux791' direct represents '1' with '3171'
3169 -3170 3171 0
-3171 3170 0
-3171 -3169 0
c Var 'aux791' direct represents '2' with '-3170'
3169 3171 -3170 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3172'
c Var 'aux792' direct represents '0' with '3172'
c Var 'aux792' order represents '1' with '3173'
-3172 3173 0
c Var 'aux792' direct represents '1' with '3174'
3172 -3173 3174 0
-3174 3173 0
-3174 -3172 0
c Var 'aux792' direct represents '2' with '-3173'
3172 3174 -3173 0
c Encoding variable: aux793 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux792))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3175'
c Var 'aux793' direct represents '0' with '3175'
c Var 'aux793' order represents '1' with '3176'
-3175 3176 0
c Var 'aux793' direct represents '1' with '3177'
3175 -3176 3177 0
-3177 3176 0
-3177 -3175 0
c Var 'aux793' order represents '2' with '3178'
-3176 3178 0
c Var 'aux793' direct represents '2' with '3179'
3176 -3178 3179 0
-3179 3178 0
-3179 -3176 0
c Var 'aux793' direct represents '3' with '-3178'
3175 3177 3179 -3178 0
c Encoding variable: aux794 with domain: int(0..4) (representing constraint (aux789 + aux791))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3180'
c Var 'aux794' direct represents '0' with '3180'
c Var 'aux794' order represents '1' with '3181'
-3180 3181 0
c Var 'aux794' direct represents '1' with '3182'
3180 -3181 3182 0
-3182 3181 0
-3182 -3180 0
c Var 'aux794' order represents '2' with '3183'
-3181 3183 0
c Var 'aux794' direct represents '2' with '3184'
3181 -3183 3184 0
-3184 3183 0
-3184 -3181 0
c Var 'aux794' order represents '3' with '3185'
-3183 3185 0
c Var 'aux794' direct represents '3' with '3186'
3183 -3185 3186 0
-3186 3185 0
-3186 -3183 0
c Var 'aux794' direct represents '4' with '-3185'
3180 3182 3184 3186 -3185 0
c Encoding variable: aux795 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3187'
c Var 'aux795' direct represents '0' with '3187'
c Var 'aux795' order represents '1' with '3188'
-3187 3188 0
c Var 'aux795' direct represents '1' with '3189'
3187 -3188 3189 0
-3189 3188 0
-3189 -3187 0
c Var 'aux795' direct represents '2' with '-3188'
3187 3189 -3188 0
c Encoding variable: aux796 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3190'
c Var 'aux796' direct represents '0' with '3190'
c Var 'aux796' order represents '1' with '3191'
-3190 3191 0
c Var 'aux796' direct represents '1' with '3192'
3190 -3191 3192 0
-3192 3191 0
-3192 -3190 0
c Var 'aux796' direct represents '2' with '-3191'
3190 3192 -3191 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3193'
c Var 'aux797' direct represents '0' with '3193'
c Var 'aux797' order represents '1' with '3194'
-3193 3194 0
c Var 'aux797' direct represents '1' with '3195'
3193 -3194 3195 0
-3195 3194 0
-3195 -3193 0
c Var 'aux797' direct represents '2' with '-3194'
3193 3195 -3194 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3196'
c Var 'aux798' direct represents '0' with '3196'
c Var 'aux798' order represents '1' with '3197'
-3196 3197 0
c Var 'aux798' direct represents '1' with '3198'
3196 -3197 3198 0
-3198 3197 0
-3198 -3196 0
c Var 'aux798' direct represents '2' with '-3197'
3196 3198 -3197 0
c Encoding variable: aux799 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux798))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3199'
c Var 'aux799' direct represents '0' with '3199'
c Var 'aux799' order represents '1' with '3200'
-3199 3200 0
c Var 'aux799' direct represents '1' with '3201'
3199 -3200 3201 0
-3201 3200 0
-3201 -3199 0
c Var 'aux799' order represents '2' with '3202'
-3200 3202 0
c Var 'aux799' direct represents '2' with '3203'
3200 -3202 3203 0
-3203 3202 0
-3203 -3200 0
c Var 'aux799' direct represents '3' with '-3202'
3199 3201 3203 -3202 0
c Encoding variable: aux800 with domain: int(0..4) (representing constraint (aux795 + aux797))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3204'
c Var 'aux800' direct represents '0' with '3204'
c Var 'aux800' order represents '1' with '3205'
-3204 3205 0
c Var 'aux800' direct represents '1' with '3206'
3204 -3205 3206 0
-3206 3205 0
-3206 -3204 0
c Var 'aux800' order represents '2' with '3207'
-3205 3207 0
c Var 'aux800' direct represents '2' with '3208'
3205 -3207 3208 0
-3208 3207 0
-3208 -3205 0
c Var 'aux800' order represents '3' with '3209'
-3207 3209 0
c Var 'aux800' direct represents '3' with '3210'
3207 -3209 3210 0
-3210 3209 0
-3210 -3207 0
c Var 'aux800' direct represents '4' with '-3209'
3204 3206 3208 3210 -3209 0
c Encoding variable: aux801 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3211'
c Var 'aux801' direct represents '0' with '3211'
c Var 'aux801' order represents '1' with '3212'
-3211 3212 0
c Var 'aux801' direct represents '1' with '3213'
3211 -3212 3213 0
-3213 3212 0
-3213 -3211 0
c Var 'aux801' direct represents '2' with '-3212'
3211 3213 -3212 0
c Encoding variable: aux802 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3214'
c Var 'aux802' direct represents '0' with '3214'
c Var 'aux802' order represents '1' with '3215'
-3214 3215 0
c Var 'aux802' direct represents '1' with '3216'
3214 -3215 3216 0
-3216 3215 0
-3216 -3214 0
c Var 'aux802' direct represents '2' with '-3215'
3214 3216 -3215 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3217'
c Var 'aux803' direct represents '0' with '3217'
c Var 'aux803' order represents '1' with '3218'
-3217 3218 0
c Var 'aux803' direct represents '1' with '3219'
3217 -3218 3219 0
-3219 3218 0
-3219 -3217 0
c Var 'aux803' direct represents '2' with '-3218'
3217 3219 -3218 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3220'
c Var 'aux804' direct represents '0' with '3220'
c Var 'aux804' order represents '1' with '3221'
-3220 3221 0
c Var 'aux804' direct represents '1' with '3222'
3220 -3221 3222 0
-3222 3221 0
-3222 -3220 0
c Var 'aux804' direct represents '2' with '-3221'
3220 3222 -3221 0
c Encoding variable: aux805 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux804))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3223'
c Var 'aux805' direct represents '0' with '3223'
c Var 'aux805' order represents '1' with '3224'
-3223 3224 0
c Var 'aux805' direct represents '1' with '3225'
3223 -3224 3225 0
-3225 3224 0
-3225 -3223 0
c Var 'aux805' order represents '2' with '3226'
-3224 3226 0
c Var 'aux805' direct represents '2' with '3227'
3224 -3226 3227 0
-3227 3226 0
-3227 -3224 0
c Var 'aux805' direct represents '3' with '-3226'
3223 3225 3227 -3226 0
c Encoding variable: aux806 with domain: int(0..4) (representing constraint (aux801 + aux803))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3228'
c Var 'aux806' direct represents '0' with '3228'
c Var 'aux806' order represents '1' with '3229'
-3228 3229 0
c Var 'aux806' direct represents '1' with '3230'
3228 -3229 3230 0
-3230 3229 0
-3230 -3228 0
c Var 'aux806' order represents '2' with '3231'
-3229 3231 0
c Var 'aux806' direct represents '2' with '3232'
3229 -3231 3232 0
-3232 3231 0
-3232 -3229 0
c Var 'aux806' order represents '3' with '3233'
-3231 3233 0
c Var 'aux806' direct represents '3' with '3234'
3231 -3233 3234 0
-3234 3233 0
-3234 -3231 0
c Var 'aux806' direct represents '4' with '-3233'
3228 3230 3232 3234 -3233 0
c Encoding variable: aux807 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3235'
c Var 'aux807' direct represents '0' with '3235'
c Var 'aux807' order represents '1' with '3236'
-3235 3236 0
c Var 'aux807' direct represents '1' with '3237'
3235 -3236 3237 0
-3237 3236 0
-3237 -3235 0
c Var 'aux807' direct represents '2' with '-3236'
3235 3237 -3236 0
c Encoding variable: aux808 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3238'
c Var 'aux808' direct represents '0' with '3238'
c Var 'aux808' order represents '1' with '3239'
-3238 3239 0
c Var 'aux808' direct represents '1' with '3240'
3238 -3239 3240 0
-3240 3239 0
-3240 -3238 0
c Var 'aux808' direct represents '2' with '-3239'
3238 3240 -3239 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3241'
c Var 'aux809' direct represents '0' with '3241'
c Var 'aux809' order represents '1' with '3242'
-3241 3242 0
c Var 'aux809' direct represents '1' with '3243'
3241 -3242 3243 0
-3243 3242 0
-3243 -3241 0
c Var 'aux809' direct represents '2' with '-3242'
3241 3243 -3242 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3244'
c Var 'aux810' direct represents '0' with '3244'
c Var 'aux810' order represents '1' with '3245'
-3244 3245 0
c Var 'aux810' direct represents '1' with '3246'
3244 -3245 3246 0
-3246 3245 0
-3246 -3244 0
c Var 'aux810' direct represents '2' with '-3245'
3244 3246 -3245 0
c Encoding variable: aux811 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux810))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3247'
c Var 'aux811' direct represents '0' with '3247'
c Var 'aux811' order represents '1' with '3248'
-3247 3248 0
c Var 'aux811' direct represents '1' with '3249'
3247 -3248 3249 0
-3249 3248 0
-3249 -3247 0
c Var 'aux811' order represents '2' with '3250'
-3248 3250 0
c Var 'aux811' direct represents '2' with '3251'
3248 -3250 3251 0
-3251 3250 0
-3251 -3248 0
c Var 'aux811' direct represents '3' with '-3250'
3247 3249 3251 -3250 0
c Encoding variable: aux812 with domain: int(0..4) (representing constraint (aux807 + aux809))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3252'
c Var 'aux812' direct represents '0' with '3252'
c Var 'aux812' order represents '1' with '3253'
-3252 3253 0
c Var 'aux812' direct represents '1' with '3254'
3252 -3253 3254 0
-3254 3253 0
-3254 -3252 0
c Var 'aux812' order represents '2' with '3255'
-3253 3255 0
c Var 'aux812' direct represents '2' with '3256'
3253 -3255 3256 0
-3256 3255 0
-3256 -3253 0
c Var 'aux812' order represents '3' with '3257'
-3255 3257 0
c Var 'aux812' direct represents '3' with '3258'
3255 -3257 3258 0
-3258 3257 0
-3258 -3255 0
c Var 'aux812' direct represents '4' with '-3257'
3252 3254 3256 3258 -3257 0
c Encoding variable: aux813 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3259'
c Var 'aux813' direct represents '0' with '3259'
c Var 'aux813' order represents '1' with '3260'
-3259 3260 0
c Var 'aux813' direct represents '1' with '3261'
3259 -3260 3261 0
-3261 3260 0
-3261 -3259 0
c Var 'aux813' direct represents '2' with '-3260'
3259 3261 -3260 0
c Encoding variable: aux814 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3262'
c Var 'aux814' direct represents '0' with '3262'
c Var 'aux814' order represents '1' with '3263'
-3262 3263 0
c Var 'aux814' direct represents '1' with '3264'
3262 -3263 3264 0
-3264 3263 0
-3264 -3262 0
c Var 'aux814' direct represents '2' with '-3263'
3262 3264 -3263 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3265'
c Var 'aux815' direct represents '0' with '3265'
c Var 'aux815' order represents '1' with '3266'
-3265 3266 0
c Var 'aux815' direct represents '1' with '3267'
3265 -3266 3267 0
-3267 3266 0
-3267 -3265 0
c Var 'aux815' direct represents '2' with '-3266'
3265 3267 -3266 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3268'
c Var 'aux816' direct represents '0' with '3268'
c Var 'aux816' order represents '1' with '3269'
-3268 3269 0
c Var 'aux816' direct represents '1' with '3270'
3268 -3269 3270 0
-3270 3269 0
-3270 -3268 0
c Var 'aux816' direct represents '2' with '-3269'
3268 3270 -3269 0
c Encoding variable: aux817 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux816))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3271'
c Var 'aux817' direct represents '0' with '3271'
c Var 'aux817' order represents '1' with '3272'
-3271 3272 0
c Var 'aux817' direct represents '1' with '3273'
3271 -3272 3273 0
-3273 3272 0
-3273 -3271 0
c Var 'aux817' order represents '2' with '3274'
-3272 3274 0
c Var 'aux817' direct represents '2' with '3275'
3272 -3274 3275 0
-3275 3274 0
-3275 -3272 0
c Var 'aux817' direct represents '3' with '-3274'
3271 3273 3275 -3274 0
c Encoding variable: aux818 with domain: int(0..4) (representing constraint (aux813 + aux815))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3276'
c Var 'aux818' direct represents '0' with '3276'
c Var 'aux818' order represents '1' with '3277'
-3276 3277 0
c Var 'aux818' direct represents '1' with '3278'
3276 -3277 3278 0
-3278 3277 0
-3278 -3276 0
c Var 'aux818' order represents '2' with '3279'
-3277 3279 0
c Var 'aux818' direct represents '2' with '3280'
3277 -3279 3280 0
-3280 3279 0
-3280 -3277 0
c Var 'aux818' order represents '3' with '3281'
-3279 3281 0
c Var 'aux818' direct represents '3' with '3282'
3279 -3281 3282 0
-3282 3281 0
-3282 -3279 0
c Var 'aux818' direct represents '4' with '-3281'
3276 3278 3280 3282 -3281 0
c Encoding variable: aux819 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3283'
c Var 'aux819' direct represents '0' with '3283'
c Var 'aux819' order represents '1' with '3284'
-3283 3284 0
c Var 'aux819' direct represents '1' with '3285'
3283 -3284 3285 0
-3285 3284 0
-3285 -3283 0
c Var 'aux819' direct represents '2' with '-3284'
3283 3285 -3284 0
c Encoding variable: aux820 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3286'
c Var 'aux820' direct represents '0' with '3286'
c Var 'aux820' order represents '1' with '3287'
-3286 3287 0
c Var 'aux820' direct represents '1' with '3288'
3286 -3287 3288 0
-3288 3287 0
-3288 -3286 0
c Var 'aux820' direct represents '2' with '-3287'
3286 3288 -3287 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3289'
c Var 'aux821' direct represents '0' with '3289'
c Var 'aux821' order represents '1' with '3290'
-3289 3290 0
c Var 'aux821' direct represents '1' with '3291'
3289 -3290 3291 0
-3291 3290 0
-3291 -3289 0
c Var 'aux821' direct represents '2' with '-3290'
3289 3291 -3290 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3292'
c Var 'aux822' direct represents '0' with '3292'
c Var 'aux822' order represents '1' with '3293'
-3292 3293 0
c Var 'aux822' direct represents '1' with '3294'
3292 -3293 3294 0
-3294 3293 0
-3294 -3292 0
c Var 'aux822' direct represents '2' with '-3293'
3292 3294 -3293 0
c Encoding variable: aux823 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux822))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3295'
c Var 'aux823' direct represents '0' with '3295'
c Var 'aux823' order represents '1' with '3296'
-3295 3296 0
c Var 'aux823' direct represents '1' with '3297'
3295 -3296 3297 0
-3297 3296 0
-3297 -3295 0
c Var 'aux823' order represents '2' with '3298'
-3296 3298 0
c Var 'aux823' direct represents '2' with '3299'
3296 -3298 3299 0
-3299 3298 0
-3299 -3296 0
c Var 'aux823' direct represents '3' with '-3298'
3295 3297 3299 -3298 0
c Encoding variable: aux824 with domain: int(0..4) (representing constraint (aux819 + aux821))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3300'
c Var 'aux824' direct represents '0' with '3300'
c Var 'aux824' order represents '1' with '3301'
-3300 3301 0
c Var 'aux824' direct represents '1' with '3302'
3300 -3301 3302 0
-3302 3301 0
-3302 -3300 0
c Var 'aux824' order represents '2' with '3303'
-3301 3303 0
c Var 'aux824' direct represents '2' with '3304'
3301 -3303 3304 0
-3304 3303 0
-3304 -3301 0
c Var 'aux824' order represents '3' with '3305'
-3303 3305 0
c Var 'aux824' direct represents '3' with '3306'
3303 -3305 3306 0
-3306 3305 0
-3306 -3303 0
c Var 'aux824' direct represents '4' with '-3305'
3300 3302 3304 3306 -3305 0
c Encoding variable: aux825 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3307'
c Var 'aux825' direct represents '0' with '3307'
c Var 'aux825' order represents '1' with '3308'
-3307 3308 0
c Var 'aux825' direct represents '1' with '3309'
3307 -3308 3309 0
-3309 3308 0
-3309 -3307 0
c Var 'aux825' direct represents '2' with '-3308'
3307 3309 -3308 0
c Encoding variable: aux826 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3310'
c Var 'aux826' direct represents '0' with '3310'
c Var 'aux826' order represents '1' with '3311'
-3310 3311 0
c Var 'aux826' direct represents '1' with '3312'
3310 -3311 3312 0
-3312 3311 0
-3312 -3310 0
c Var 'aux826' direct represents '2' with '-3311'
3310 3312 -3311 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3313'
c Var 'aux827' direct represents '0' with '3313'
c Var 'aux827' order represents '1' with '3314'
-3313 3314 0
c Var 'aux827' direct represents '1' with '3315'
3313 -3314 3315 0
-3315 3314 0
-3315 -3313 0
c Var 'aux827' direct represents '2' with '-3314'
3313 3315 -3314 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3316'
c Var 'aux828' direct represents '0' with '3316'
c Var 'aux828' order represents '1' with '3317'
-3316 3317 0
c Var 'aux828' direct represents '1' with '3318'
3316 -3317 3318 0
-3318 3317 0
-3318 -3316 0
c Var 'aux828' direct represents '2' with '-3317'
3316 3318 -3317 0
c Encoding variable: aux829 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux828))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3319'
c Var 'aux829' direct represents '0' with '3319'
c Var 'aux829' order represents '1' with '3320'
-3319 3320 0
c Var 'aux829' direct represents '1' with '3321'
3319 -3320 3321 0
-3321 3320 0
-3321 -3319 0
c Var 'aux829' order represents '2' with '3322'
-3320 3322 0
c Var 'aux829' direct represents '2' with '3323'
3320 -3322 3323 0
-3323 3322 0
-3323 -3320 0
c Var 'aux829' direct represents '3' with '-3322'
3319 3321 3323 -3322 0
c Encoding variable: aux830 with domain: int(0..4) (representing constraint (aux825 + aux827))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3324'
c Var 'aux830' direct represents '0' with '3324'
c Var 'aux830' order represents '1' with '3325'
-3324 3325 0
c Var 'aux830' direct represents '1' with '3326'
3324 -3325 3326 0
-3326 3325 0
-3326 -3324 0
c Var 'aux830' order represents '2' with '3327'
-3325 3327 0
c Var 'aux830' direct represents '2' with '3328'
3325 -3327 3328 0
-3328 3327 0
-3328 -3325 0
c Var 'aux830' order represents '3' with '3329'
-3327 3329 0
c Var 'aux830' direct represents '3' with '3330'
3327 -3329 3330 0
-3330 3329 0
-3330 -3327 0
c Var 'aux830' direct represents '4' with '-3329'
3324 3326 3328 3330 -3329 0
c Encoding variable: aux831 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3331'
c Var 'aux831' direct represents '0' with '3331'
c Var 'aux831' order represents '1' with '3332'
-3331 3332 0
c Var 'aux831' direct represents '1' with '3333'
3331 -3332 3333 0
-3333 3332 0
-3333 -3331 0
c Var 'aux831' direct represents '2' with '-3332'
3331 3333 -3332 0
c Encoding variable: aux832 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3334'
c Var 'aux832' direct represents '0' with '3334'
c Var 'aux832' order represents '1' with '3335'
-3334 3335 0
c Var 'aux832' direct represents '1' with '3336'
3334 -3335 3336 0
-3336 3335 0
-3336 -3334 0
c Var 'aux832' direct represents '2' with '-3335'
3334 3336 -3335 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3337'
c Var 'aux833' direct represents '0' with '3337'
c Var 'aux833' order represents '1' with '3338'
-3337 3338 0
c Var 'aux833' direct represents '1' with '3339'
3337 -3338 3339 0
-3339 3338 0
-3339 -3337 0
c Var 'aux833' direct represents '2' with '-3338'
3337 3339 -3338 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3340'
c Var 'aux834' direct represents '0' with '3340'
c Var 'aux834' order represents '1' with '3341'
-3340 3341 0
c Var 'aux834' direct represents '1' with '3342'
3340 -3341 3342 0
-3342 3341 0
-3342 -3340 0
c Var 'aux834' direct represents '2' with '-3341'
3340 3342 -3341 0
c Encoding variable: aux835 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux834))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3343'
c Var 'aux835' direct represents '0' with '3343'
c Var 'aux835' order represents '1' with '3344'
-3343 3344 0
c Var 'aux835' direct represents '1' with '3345'
3343 -3344 3345 0
-3345 3344 0
-3345 -3343 0
c Var 'aux835' order represents '2' with '3346'
-3344 3346 0
c Var 'aux835' direct represents '2' with '3347'
3344 -3346 3347 0
-3347 3346 0
-3347 -3344 0
c Var 'aux835' direct represents '3' with '-3346'
3343 3345 3347 -3346 0
c Encoding variable: aux836 with domain: int(0..4) (representing constraint (aux831 + aux833))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3348'
c Var 'aux836' direct represents '0' with '3348'
c Var 'aux836' order represents '1' with '3349'
-3348 3349 0
c Var 'aux836' direct represents '1' with '3350'
3348 -3349 3350 0
-3350 3349 0
-3350 -3348 0
c Var 'aux836' order represents '2' with '3351'
-3349 3351 0
c Var 'aux836' direct represents '2' with '3352'
3349 -3351 3352 0
-3352 3351 0
-3352 -3349 0
c Var 'aux836' order represents '3' with '3353'
-3351 3353 0
c Var 'aux836' direct represents '3' with '3354'
3351 -3353 3354 0
-3354 3353 0
-3354 -3351 0
c Var 'aux836' direct represents '4' with '-3353'
3348 3350 3352 3354 -3353 0
c Encoding variable: aux837 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3355'
c Var 'aux837' direct represents '0' with '3355'
c Var 'aux837' order represents '1' with '3356'
-3355 3356 0
c Var 'aux837' direct represents '1' with '3357'
3355 -3356 3357 0
-3357 3356 0
-3357 -3355 0
c Var 'aux837' direct represents '2' with '-3356'
3355 3357 -3356 0
c Encoding variable: aux838 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3358'
c Var 'aux838' direct represents '0' with '3358'
c Var 'aux838' order represents '1' with '3359'
-3358 3359 0
c Var 'aux838' direct represents '1' with '3360'
3358 -3359 3360 0
-3360 3359 0
-3360 -3358 0
c Var 'aux838' direct represents '2' with '-3359'
3358 3360 -3359 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3361'
c Var 'aux839' direct represents '0' with '3361'
c Var 'aux839' order represents '1' with '3362'
-3361 3362 0
c Var 'aux839' direct represents '1' with '3363'
3361 -3362 3363 0
-3363 3362 0
-3363 -3361 0
c Var 'aux839' direct represents '2' with '-3362'
3361 3363 -3362 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3364'
c Var 'aux840' direct represents '0' with '3364'
c Var 'aux840' order represents '1' with '3365'
-3364 3365 0
c Var 'aux840' direct represents '1' with '3366'
3364 -3365 3366 0
-3366 3365 0
-3366 -3364 0
c Var 'aux840' direct represents '2' with '-3365'
3364 3366 -3365 0
c Encoding variable: aux841 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux840))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3367'
c Var 'aux841' direct represents '0' with '3367'
c Var 'aux841' order represents '1' with '3368'
-3367 3368 0
c Var 'aux841' direct represents '1' with '3369'
3367 -3368 3369 0
-3369 3368 0
-3369 -3367 0
c Var 'aux841' order represents '2' with '3370'
-3368 3370 0
c Var 'aux841' direct represents '2' with '3371'
3368 -3370 3371 0
-3371 3370 0
-3371 -3368 0
c Var 'aux841' direct represents '3' with '-3370'
3367 3369 3371 -3370 0
c Encoding variable: aux842 with domain: int(0..4) (representing constraint (aux837 + aux839))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3372'
c Var 'aux842' direct represents '0' with '3372'
c Var 'aux842' order represents '1' with '3373'
-3372 3373 0
c Var 'aux842' direct represents '1' with '3374'
3372 -3373 3374 0
-3374 3373 0
-3374 -3372 0
c Var 'aux842' order represents '2' with '3375'
-3373 3375 0
c Var 'aux842' direct represents '2' with '3376'
3373 -3375 3376 0
-3376 3375 0
-3376 -3373 0
c Var 'aux842' order represents '3' with '3377'
-3375 3377 0
c Var 'aux842' direct represents '3' with '3378'
3375 -3377 3378 0
-3378 3377 0
-3378 -3375 0
c Var 'aux842' direct represents '4' with '-3377'
3372 3374 3376 3378 -3377 0
c Encoding variable: aux843 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3379'
c Var 'aux843' direct represents '0' with '3379'
c Var 'aux843' order represents '1' with '3380'
-3379 3380 0
c Var 'aux843' direct represents '1' with '3381'
3379 -3380 3381 0
-3381 3380 0
-3381 -3379 0
c Var 'aux843' direct represents '2' with '-3380'
3379 3381 -3380 0
c Encoding variable: aux844 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3382'
c Var 'aux844' direct represents '0' with '3382'
c Var 'aux844' order represents '1' with '3383'
-3382 3383 0
c Var 'aux844' direct represents '1' with '3384'
3382 -3383 3384 0
-3384 3383 0
-3384 -3382 0
c Var 'aux844' direct represents '2' with '-3383'
3382 3384 -3383 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3385'
c Var 'aux845' direct represents '0' with '3385'
c Var 'aux845' order represents '1' with '3386'
-3385 3386 0
c Var 'aux845' direct represents '1' with '3387'
3385 -3386 3387 0
-3387 3386 0
-3387 -3385 0
c Var 'aux845' direct represents '2' with '-3386'
3385 3387 -3386 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3388'
c Var 'aux846' direct represents '0' with '3388'
c Var 'aux846' order represents '1' with '3389'
-3388 3389 0
c Var 'aux846' direct represents '1' with '3390'
3388 -3389 3390 0
-3390 3389 0
-3390 -3388 0
c Var 'aux846' direct represents '2' with '-3389'
3388 3390 -3389 0
c Encoding variable: aux847 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux846))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3391'
c Var 'aux847' direct represents '0' with '3391'
c Var 'aux847' order represents '1' with '3392'
-3391 3392 0
c Var 'aux847' direct represents '1' with '3393'
3391 -3392 3393 0
-3393 3392 0
-3393 -3391 0
c Var 'aux847' order represents '2' with '3394'
-3392 3394 0
c Var 'aux847' direct represents '2' with '3395'
3392 -3394 3395 0
-3395 3394 0
-3395 -3392 0
c Var 'aux847' direct represents '3' with '-3394'
3391 3393 3395 -3394 0
c Encoding variable: aux848 with domain: int(0..4) (representing constraint (aux843 + aux845))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3396'
c Var 'aux848' direct represents '0' with '3396'
c Var 'aux848' order represents '1' with '3397'
-3396 3397 0
c Var 'aux848' direct represents '1' with '3398'
3396 -3397 3398 0
-3398 3397 0
-3398 -3396 0
c Var 'aux848' order represents '2' with '3399'
-3397 3399 0
c Var 'aux848' direct represents '2' with '3400'
3397 -3399 3400 0
-3400 3399 0
-3400 -3397 0
c Var 'aux848' order represents '3' with '3401'
-3399 3401 0
c Var 'aux848' direct represents '3' with '3402'
3399 -3401 3402 0
-3402 3401 0
-3402 -3399 0
c Var 'aux848' direct represents '4' with '-3401'
3396 3398 3400 3402 -3401 0
c Encoding variable: aux849 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3403'
c Var 'aux849' direct represents '0' with '3403'
c Var 'aux849' order represents '1' with '3404'
-3403 3404 0
c Var 'aux849' direct represents '1' with '3405'
3403 -3404 3405 0
-3405 3404 0
-3405 -3403 0
c Var 'aux849' direct represents '2' with '-3404'
3403 3405 -3404 0
c Encoding variable: aux850 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3406'
c Var 'aux850' direct represents '0' with '3406'
c Var 'aux850' order represents '1' with '3407'
-3406 3407 0
c Var 'aux850' direct represents '1' with '3408'
3406 -3407 3408 0
-3408 3407 0
-3408 -3406 0
c Var 'aux850' direct represents '2' with '-3407'
3406 3408 -3407 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3409'
c Var 'aux851' direct represents '0' with '3409'
c Var 'aux851' order represents '1' with '3410'
-3409 3410 0
c Var 'aux851' direct represents '1' with '3411'
3409 -3410 3411 0
-3411 3410 0
-3411 -3409 0
c Var 'aux851' direct represents '2' with '-3410'
3409 3411 -3410 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3412'
c Var 'aux852' direct represents '0' with '3412'
c Var 'aux852' order represents '1' with '3413'
-3412 3413 0
c Var 'aux852' direct represents '1' with '3414'
3412 -3413 3414 0
-3414 3413 0
-3414 -3412 0
c Var 'aux852' direct represents '2' with '-3413'
3412 3414 -3413 0
c Encoding variable: aux853 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux852))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3415'
c Var 'aux853' direct represents '0' with '3415'
c Var 'aux853' order represents '1' with '3416'
-3415 3416 0
c Var 'aux853' direct represents '1' with '3417'
3415 -3416 3417 0
-3417 3416 0
-3417 -3415 0
c Var 'aux853' order represents '2' with '3418'
-3416 3418 0
c Var 'aux853' direct represents '2' with '3419'
3416 -3418 3419 0
-3419 3418 0
-3419 -3416 0
c Var 'aux853' direct represents '3' with '-3418'
3415 3417 3419 -3418 0
c Encoding variable: aux854 with domain: int(0..4) (representing constraint (aux849 + aux851))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3420'
c Var 'aux854' direct represents '0' with '3420'
c Var 'aux854' order represents '1' with '3421'
-3420 3421 0
c Var 'aux854' direct represents '1' with '3422'
3420 -3421 3422 0
-3422 3421 0
-3422 -3420 0
c Var 'aux854' order represents '2' with '3423'
-3421 3423 0
c Var 'aux854' direct represents '2' with '3424'
3421 -3423 3424 0
-3424 3423 0
-3424 -3421 0
c Var 'aux854' order represents '3' with '3425'
-3423 3425 0
c Var 'aux854' direct represents '3' with '3426'
3423 -3425 3426 0
-3426 3425 0
-3426 -3423 0
c Var 'aux854' direct represents '4' with '-3425'
3420 3422 3424 3426 -3425 0
c Encoding variable: aux855 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3427'
c Var 'aux855' direct represents '0' with '3427'
c Var 'aux855' order represents '1' with '3428'
-3427 3428 0
c Var 'aux855' direct represents '1' with '3429'
3427 -3428 3429 0
-3429 3428 0
-3429 -3427 0
c Var 'aux855' direct represents '2' with '-3428'
3427 3429 -3428 0
c Encoding variable: aux856 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3430'
c Var 'aux856' direct represents '0' with '3430'
c Var 'aux856' order represents '1' with '3431'
-3430 3431 0
c Var 'aux856' direct represents '1' with '3432'
3430 -3431 3432 0
-3432 3431 0
-3432 -3430 0
c Var 'aux856' direct represents '2' with '-3431'
3430 3432 -3431 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3433'
c Var 'aux857' direct represents '0' with '3433'
c Var 'aux857' order represents '1' with '3434'
-3433 3434 0
c Var 'aux857' direct represents '1' with '3435'
3433 -3434 3435 0
-3435 3434 0
-3435 -3433 0
c Var 'aux857' direct represents '2' with '-3434'
3433 3435 -3434 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3436'
c Var 'aux858' direct represents '0' with '3436'
c Var 'aux858' order represents '1' with '3437'
-3436 3437 0
c Var 'aux858' direct represents '1' with '3438'
3436 -3437 3438 0
-3438 3437 0
-3438 -3436 0
c Var 'aux858' direct represents '2' with '-3437'
3436 3438 -3437 0
c Encoding variable: aux859 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux858))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3439'
c Var 'aux859' direct represents '0' with '3439'
c Var 'aux859' order represents '1' with '3440'
-3439 3440 0
c Var 'aux859' direct represents '1' with '3441'
3439 -3440 3441 0
-3441 3440 0
-3441 -3439 0
c Var 'aux859' order represents '2' with '3442'
-3440 3442 0
c Var 'aux859' direct represents '2' with '3443'
3440 -3442 3443 0
-3443 3442 0
-3443 -3440 0
c Var 'aux859' direct represents '3' with '-3442'
3439 3441 3443 -3442 0
c Encoding variable: aux860 with domain: int(0..4) (representing constraint (aux855 + aux857))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3444'
c Var 'aux860' direct represents '0' with '3444'
c Var 'aux860' order represents '1' with '3445'
-3444 3445 0
c Var 'aux860' direct represents '1' with '3446'
3444 -3445 3446 0
-3446 3445 0
-3446 -3444 0
c Var 'aux860' order represents '2' with '3447'
-3445 3447 0
c Var 'aux860' direct represents '2' with '3448'
3445 -3447 3448 0
-3448 3447 0
-3448 -3445 0
c Var 'aux860' order represents '3' with '3449'
-3447 3449 0
c Var 'aux860' direct represents '3' with '3450'
3447 -3449 3450 0
-3450 3449 0
-3450 -3447 0
c Var 'aux860' direct represents '4' with '-3449'
3444 3446 3448 3450 -3449 0
c Encoding variable: aux861 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3451'
c Var 'aux861' direct represents '0' with '3451'
c Var 'aux861' order represents '1' with '3452'
-3451 3452 0
c Var 'aux861' direct represents '1' with '3453'
3451 -3452 3453 0
-3453 3452 0
-3453 -3451 0
c Var 'aux861' direct represents '2' with '-3452'
3451 3453 -3452 0
c Encoding variable: aux862 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3454'
c Var 'aux862' direct represents '0' with '3454'
c Var 'aux862' order represents '1' with '3455'
-3454 3455 0
c Var 'aux862' direct represents '1' with '3456'
3454 -3455 3456 0
-3456 3455 0
-3456 -3454 0
c Var 'aux862' direct represents '2' with '-3455'
3454 3456 -3455 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3457'
c Var 'aux863' direct represents '0' with '3457'
c Var 'aux863' order represents '1' with '3458'
-3457 3458 0
c Var 'aux863' direct represents '1' with '3459'
3457 -3458 3459 0
-3459 3458 0
-3459 -3457 0
c Var 'aux863' direct represents '2' with '-3458'
3457 3459 -3458 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3460'
c Var 'aux864' direct represents '0' with '3460'
c Var 'aux864' order represents '1' with '3461'
-3460 3461 0
c Var 'aux864' direct represents '1' with '3462'
3460 -3461 3462 0
-3462 3461 0
-3462 -3460 0
c Var 'aux864' direct represents '2' with '-3461'
3460 3462 -3461 0
c Encoding variable: aux865 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux864))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3463'
c Var 'aux865' direct represents '0' with '3463'
c Var 'aux865' order represents '1' with '3464'
-3463 3464 0
c Var 'aux865' direct represents '1' with '3465'
3463 -3464 3465 0
-3465 3464 0
-3465 -3463 0
c Var 'aux865' order represents '2' with '3466'
-3464 3466 0
c Var 'aux865' direct represents '2' with '3467'
3464 -3466 3467 0
-3467 3466 0
-3467 -3464 0
c Var 'aux865' direct represents '3' with '-3466'
3463 3465 3467 -3466 0
c Encoding variable: aux866 with domain: int(0..4) (representing constraint (aux861 + aux863))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3468'
c Var 'aux866' direct represents '0' with '3468'
c Var 'aux866' order represents '1' with '3469'
-3468 3469 0
c Var 'aux866' direct represents '1' with '3470'
3468 -3469 3470 0
-3470 3469 0
-3470 -3468 0
c Var 'aux866' order represents '2' with '3471'
-3469 3471 0
c Var 'aux866' direct represents '2' with '3472'
3469 -3471 3472 0
-3472 3471 0
-3472 -3469 0
c Var 'aux866' order represents '3' with '3473'
-3471 3473 0
c Var 'aux866' direct represents '3' with '3474'
3471 -3473 3474 0
-3474 3473 0
-3474 -3471 0
c Var 'aux866' direct represents '4' with '-3473'
3468 3470 3472 3474 -3473 0
c Encoding variable: aux867 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3475'
c Var 'aux867' direct represents '0' with '3475'
c Var 'aux867' order represents '1' with '3476'
-3475 3476 0
c Var 'aux867' direct represents '1' with '3477'
3475 -3476 3477 0
-3477 3476 0
-3477 -3475 0
c Var 'aux867' direct represents '2' with '-3476'
3475 3477 -3476 0
c Encoding variable: aux868 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3478'
c Var 'aux868' direct represents '0' with '3478'
c Var 'aux868' order represents '1' with '3479'
-3478 3479 0
c Var 'aux868' direct represents '1' with '3480'
3478 -3479 3480 0
-3480 3479 0
-3480 -3478 0
c Var 'aux868' direct represents '2' with '-3479'
3478 3480 -3479 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3481'
c Var 'aux869' direct represents '0' with '3481'
c Var 'aux869' order represents '1' with '3482'
-3481 3482 0
c Var 'aux869' direct represents '1' with '3483'
3481 -3482 3483 0
-3483 3482 0
-3483 -3481 0
c Var 'aux869' direct represents '2' with '-3482'
3481 3483 -3482 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3484'
c Var 'aux870' direct represents '0' with '3484'
c Var 'aux870' order represents '1' with '3485'
-3484 3485 0
c Var 'aux870' direct represents '1' with '3486'
3484 -3485 3486 0
-3486 3485 0
-3486 -3484 0
c Var 'aux870' direct represents '2' with '-3485'
3484 3486 -3485 0
c Encoding variable: aux871 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux870))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3487'
c Var 'aux871' direct represents '0' with '3487'
c Var 'aux871' order represents '1' with '3488'
-3487 3488 0
c Var 'aux871' direct represents '1' with '3489'
3487 -3488 3489 0
-3489 3488 0
-3489 -3487 0
c Var 'aux871' order represents '2' with '3490'
-3488 3490 0
c Var 'aux871' direct represents '2' with '3491'
3488 -3490 3491 0
-3491 3490 0
-3491 -3488 0
c Var 'aux871' direct represents '3' with '-3490'
3487 3489 3491 -3490 0
c Encoding variable: aux872 with domain: int(0..4) (representing constraint (aux867 + aux869))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3492'
c Var 'aux872' direct represents '0' with '3492'
c Var 'aux872' order represents '1' with '3493'
-3492 3493 0
c Var 'aux872' direct represents '1' with '3494'
3492 -3493 3494 0
-3494 3493 0
-3494 -3492 0
c Var 'aux872' order represents '2' with '3495'
-3493 3495 0
c Var 'aux872' direct represents '2' with '3496'
3493 -3495 3496 0
-3496 3495 0
-3496 -3493 0
c Var 'aux872' order represents '3' with '3497'
-3495 3497 0
c Var 'aux872' direct represents '3' with '3498'
3495 -3497 3498 0
-3498 3497 0
-3498 -3495 0
c Var 'aux872' direct represents '4' with '-3497'
3492 3494 3496 3498 -3497 0
c Encoding variable: aux873 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3499'
c Var 'aux873' direct represents '0' with '3499'
c Var 'aux873' order represents '1' with '3500'
-3499 3500 0
c Var 'aux873' direct represents '1' with '3501'
3499 -3500 3501 0
-3501 3500 0
-3501 -3499 0
c Var 'aux873' direct represents '2' with '-3500'
3499 3501 -3500 0
c Encoding variable: aux874 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3502'
c Var 'aux874' direct represents '0' with '3502'
c Var 'aux874' order represents '1' with '3503'
-3502 3503 0
c Var 'aux874' direct represents '1' with '3504'
3502 -3503 3504 0
-3504 3503 0
-3504 -3502 0
c Var 'aux874' direct represents '2' with '-3503'
3502 3504 -3503 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3505'
c Var 'aux875' direct represents '0' with '3505'
c Var 'aux875' order represents '1' with '3506'
-3505 3506 0
c Var 'aux875' direct represents '1' with '3507'
3505 -3506 3507 0
-3507 3506 0
-3507 -3505 0
c Var 'aux875' direct represents '2' with '-3506'
3505 3507 -3506 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3508'
c Var 'aux876' direct represents '0' with '3508'
c Var 'aux876' order represents '1' with '3509'
-3508 3509 0
c Var 'aux876' direct represents '1' with '3510'
3508 -3509 3510 0
-3510 3509 0
-3510 -3508 0
c Var 'aux876' direct represents '2' with '-3509'
3508 3510 -3509 0
c Encoding variable: aux877 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux876))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3511'
c Var 'aux877' direct represents '0' with '3511'
c Var 'aux877' order represents '1' with '3512'
-3511 3512 0
c Var 'aux877' direct represents '1' with '3513'
3511 -3512 3513 0
-3513 3512 0
-3513 -3511 0
c Var 'aux877' order represents '2' with '3514'
-3512 3514 0
c Var 'aux877' direct represents '2' with '3515'
3512 -3514 3515 0
-3515 3514 0
-3515 -3512 0
c Var 'aux877' direct represents '3' with '-3514'
3511 3513 3515 -3514 0
c Encoding variable: aux878 with domain: int(0..4) (representing constraint (aux873 + aux875))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3516'
c Var 'aux878' direct represents '0' with '3516'
c Var 'aux878' order represents '1' with '3517'
-3516 3517 0
c Var 'aux878' direct represents '1' with '3518'
3516 -3517 3518 0
-3518 3517 0
-3518 -3516 0
c Var 'aux878' order represents '2' with '3519'
-3517 3519 0
c Var 'aux878' direct represents '2' with '3520'
3517 -3519 3520 0
-3520 3519 0
-3520 -3517 0
c Var 'aux878' order represents '3' with '3521'
-3519 3521 0
c Var 'aux878' direct represents '3' with '3522'
3519 -3521 3522 0
-3522 3521 0
-3522 -3519 0
c Var 'aux878' direct represents '4' with '-3521'
3516 3518 3520 3522 -3521 0
c Encoding variable: aux879 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3523'
c Var 'aux879' direct represents '0' with '3523'
c Var 'aux879' order represents '1' with '3524'
-3523 3524 0
c Var 'aux879' direct represents '1' with '3525'
3523 -3524 3525 0
-3525 3524 0
-3525 -3523 0
c Var 'aux879' direct represents '2' with '-3524'
3523 3525 -3524 0
c Encoding variable: aux880 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3526'
c Var 'aux880' direct represents '0' with '3526'
c Var 'aux880' order represents '1' with '3527'
-3526 3527 0
c Var 'aux880' direct represents '1' with '3528'
3526 -3527 3528 0
-3528 3527 0
-3528 -3526 0
c Var 'aux880' direct represents '2' with '-3527'
3526 3528 -3527 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3529'
c Var 'aux881' direct represents '0' with '3529'
c Var 'aux881' order represents '1' with '3530'
-3529 3530 0
c Var 'aux881' direct represents '1' with '3531'
3529 -3530 3531 0
-3531 3530 0
-3531 -3529 0
c Var 'aux881' direct represents '2' with '-3530'
3529 3531 -3530 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3532'
c Var 'aux882' direct represents '0' with '3532'
c Var 'aux882' order represents '1' with '3533'
-3532 3533 0
c Var 'aux882' direct represents '1' with '3534'
3532 -3533 3534 0
-3534 3533 0
-3534 -3532 0
c Var 'aux882' direct represents '2' with '-3533'
3532 3534 -3533 0
c Encoding variable: aux883 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux882))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3535'
c Var 'aux883' direct represents '0' with '3535'
c Var 'aux883' order represents '1' with '3536'
-3535 3536 0
c Var 'aux883' direct represents '1' with '3537'
3535 -3536 3537 0
-3537 3536 0
-3537 -3535 0
c Var 'aux883' order represents '2' with '3538'
-3536 3538 0
c Var 'aux883' direct represents '2' with '3539'
3536 -3538 3539 0
-3539 3538 0
-3539 -3536 0
c Var 'aux883' direct represents '3' with '-3538'
3535 3537 3539 -3538 0
c Encoding variable: aux884 with domain: int(0..4) (representing constraint (aux879 + aux881))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3540'
c Var 'aux884' direct represents '0' with '3540'
c Var 'aux884' order represents '1' with '3541'
-3540 3541 0
c Var 'aux884' direct represents '1' with '3542'
3540 -3541 3542 0
-3542 3541 0
-3542 -3540 0
c Var 'aux884' order represents '2' with '3543'
-3541 3543 0
c Var 'aux884' direct represents '2' with '3544'
3541 -3543 3544 0
-3544 3543 0
-3544 -3541 0
c Var 'aux884' order represents '3' with '3545'
-3543 3545 0
c Var 'aux884' direct represents '3' with '3546'
3543 -3545 3546 0
-3546 3545 0
-3546 -3543 0
c Var 'aux884' direct represents '4' with '-3545'
3540 3542 3544 3546 -3545 0
c Encoding variable: aux885 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3547'
c Var 'aux885' direct represents '0' with '3547'
c Var 'aux885' order represents '1' with '3548'
-3547 3548 0
c Var 'aux885' direct represents '1' with '3549'
3547 -3548 3549 0
-3549 3548 0
-3549 -3547 0
c Var 'aux885' direct represents '2' with '-3548'
3547 3549 -3548 0
c Encoding variable: aux886 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3550'
c Var 'aux886' direct represents '0' with '3550'
c Var 'aux886' order represents '1' with '3551'
-3550 3551 0
c Var 'aux886' direct represents '1' with '3552'
3550 -3551 3552 0
-3552 3551 0
-3552 -3550 0
c Var 'aux886' direct represents '2' with '-3551'
3550 3552 -3551 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3553'
c Var 'aux887' direct represents '0' with '3553'
c Var 'aux887' order represents '1' with '3554'
-3553 3554 0
c Var 'aux887' direct represents '1' with '3555'
3553 -3554 3555 0
-3555 3554 0
-3555 -3553 0
c Var 'aux887' direct represents '2' with '-3554'
3553 3555 -3554 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3556'
c Var 'aux888' direct represents '0' with '3556'
c Var 'aux888' order represents '1' with '3557'
-3556 3557 0
c Var 'aux888' direct represents '1' with '3558'
3556 -3557 3558 0
-3558 3557 0
-3558 -3556 0
c Var 'aux888' direct represents '2' with '-3557'
3556 3558 -3557 0
c Encoding variable: aux889 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux888))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3559'
c Var 'aux889' direct represents '0' with '3559'
c Var 'aux889' order represents '1' with '3560'
-3559 3560 0
c Var 'aux889' direct represents '1' with '3561'
3559 -3560 3561 0
-3561 3560 0
-3561 -3559 0
c Var 'aux889' order represents '2' with '3562'
-3560 3562 0
c Var 'aux889' direct represents '2' with '3563'
3560 -3562 3563 0
-3563 3562 0
-3563 -3560 0
c Var 'aux889' direct represents '3' with '-3562'
3559 3561 3563 -3562 0
c Encoding variable: aux890 with domain: int(0..4) (representing constraint (aux885 + aux887))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3564'
c Var 'aux890' direct represents '0' with '3564'
c Var 'aux890' order represents '1' with '3565'
-3564 3565 0
c Var 'aux890' direct represents '1' with '3566'
3564 -3565 3566 0
-3566 3565 0
-3566 -3564 0
c Var 'aux890' order represents '2' with '3567'
-3565 3567 0
c Var 'aux890' direct represents '2' with '3568'
3565 -3567 3568 0
-3568 3567 0
-3568 -3565 0
c Var 'aux890' order represents '3' with '3569'
-3567 3569 0
c Var 'aux890' direct represents '3' with '3570'
3567 -3569 3570 0
-3570 3569 0
-3570 -3567 0
c Var 'aux890' direct represents '4' with '-3569'
3564 3566 3568 3570 -3569 0
c Encoding variable: aux891 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3571'
c Var 'aux891' direct represents '0' with '3571'
c Var 'aux891' order represents '1' with '3572'
-3571 3572 0
c Var 'aux891' direct represents '1' with '3573'
3571 -3572 3573 0
-3573 3572 0
-3573 -3571 0
c Var 'aux891' direct represents '2' with '-3572'
3571 3573 -3572 0
c Encoding variable: aux892 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3574'
c Var 'aux892' direct represents '0' with '3574'
c Var 'aux892' order represents '1' with '3575'
-3574 3575 0
c Var 'aux892' direct represents '1' with '3576'
3574 -3575 3576 0
-3576 3575 0
-3576 -3574 0
c Var 'aux892' direct represents '2' with '-3575'
3574 3576 -3575 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3577'
c Var 'aux893' direct represents '0' with '3577'
c Var 'aux893' order represents '1' with '3578'
-3577 3578 0
c Var 'aux893' direct represents '1' with '3579'
3577 -3578 3579 0
-3579 3578 0
-3579 -3577 0
c Var 'aux893' direct represents '2' with '-3578'
3577 3579 -3578 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3580'
c Var 'aux894' direct represents '0' with '3580'
c Var 'aux894' order represents '1' with '3581'
-3580 3581 0
c Var 'aux894' direct represents '1' with '3582'
3580 -3581 3582 0
-3582 3581 0
-3582 -3580 0
c Var 'aux894' direct represents '2' with '-3581'
3580 3582 -3581 0
c Encoding variable: aux895 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux894))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3583'
c Var 'aux895' direct represents '0' with '3583'
c Var 'aux895' order represents '1' with '3584'
-3583 3584 0
c Var 'aux895' direct represents '1' with '3585'
3583 -3584 3585 0
-3585 3584 0
-3585 -3583 0
c Var 'aux895' order represents '2' with '3586'
-3584 3586 0
c Var 'aux895' direct represents '2' with '3587'
3584 -3586 3587 0
-3587 3586 0
-3587 -3584 0
c Var 'aux895' direct represents '3' with '-3586'
3583 3585 3587 -3586 0
c Encoding variable: aux896 with domain: int(0..4) (representing constraint (aux891 + aux893))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3588'
c Var 'aux896' direct represents '0' with '3588'
c Var 'aux896' order represents '1' with '3589'
-3588 3589 0
c Var 'aux896' direct represents '1' with '3590'
3588 -3589 3590 0
-3590 3589 0
-3590 -3588 0
c Var 'aux896' order represents '2' with '3591'
-3589 3591 0
c Var 'aux896' direct represents '2' with '3592'
3589 -3591 3592 0
-3592 3591 0
-3592 -3589 0
c Var 'aux896' order represents '3' with '3593'
-3591 3593 0
c Var 'aux896' direct represents '3' with '3594'
3591 -3593 3594 0
-3594 3593 0
-3594 -3591 0
c Var 'aux896' direct represents '4' with '-3593'
3588 3590 3592 3594 -3593 0
c Encoding variable: aux897 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3595'
c Var 'aux897' direct represents '0' with '3595'
c Var 'aux897' order represents '1' with '3596'
-3595 3596 0
c Var 'aux897' direct represents '1' with '3597'
3595 -3596 3597 0
-3597 3596 0
-3597 -3595 0
c Var 'aux897' direct represents '2' with '-3596'
3595 3597 -3596 0
c Encoding variable: aux898 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3598'
c Var 'aux898' direct represents '0' with '3598'
c Var 'aux898' order represents '1' with '3599'
-3598 3599 0
c Var 'aux898' direct represents '1' with '3600'
3598 -3599 3600 0
-3600 3599 0
-3600 -3598 0
c Var 'aux898' direct represents '2' with '-3599'
3598 3600 -3599 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3601'
c Var 'aux899' direct represents '0' with '3601'
c Var 'aux899' order represents '1' with '3602'
-3601 3602 0
c Var 'aux899' direct represents '1' with '3603'
3601 -3602 3603 0
-3603 3602 0
-3603 -3601 0
c Var 'aux899' direct represents '2' with '-3602'
3601 3603 -3602 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3604'
c Var 'aux900' direct represents '0' with '3604'
c Var 'aux900' order represents '1' with '3605'
-3604 3605 0
c Var 'aux900' direct represents '1' with '3606'
3604 -3605 3606 0
-3606 3605 0
-3606 -3604 0
c Var 'aux900' direct represents '2' with '-3605'
3604 3606 -3605 0
c Encoding variable: aux901 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux900))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3607'
c Var 'aux901' direct represents '0' with '3607'
c Var 'aux901' order represents '1' with '3608'
-3607 3608 0
c Var 'aux901' direct represents '1' with '3609'
3607 -3608 3609 0
-3609 3608 0
-3609 -3607 0
c Var 'aux901' order represents '2' with '3610'
-3608 3610 0
c Var 'aux901' direct represents '2' with '3611'
3608 -3610 3611 0
-3611 3610 0
-3611 -3608 0
c Var 'aux901' direct represents '3' with '-3610'
3607 3609 3611 -3610 0
c Encoding variable: aux902 with domain: int(0..4) (representing constraint (aux897 + aux899))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3612'
c Var 'aux902' direct represents '0' with '3612'
c Var 'aux902' order represents '1' with '3613'
-3612 3613 0
c Var 'aux902' direct represents '1' with '3614'
3612 -3613 3614 0
-3614 3613 0
-3614 -3612 0
c Var 'aux902' order represents '2' with '3615'
-3613 3615 0
c Var 'aux902' direct represents '2' with '3616'
3613 -3615 3616 0
-3616 3615 0
-3616 -3613 0
c Var 'aux902' order represents '3' with '3617'
-3615 3617 0
c Var 'aux902' direct represents '3' with '3618'
3615 -3617 3618 0
-3618 3617 0
-3618 -3615 0
c Var 'aux902' direct represents '4' with '-3617'
3612 3614 3616 3618 -3617 0
c Encoding variable: aux903 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3619'
c Var 'aux903' direct represents '0' with '3619'
c Var 'aux903' order represents '1' with '3620'
-3619 3620 0
c Var 'aux903' direct represents '1' with '3621'
3619 -3620 3621 0
-3621 3620 0
-3621 -3619 0
c Var 'aux903' direct represents '2' with '-3620'
3619 3621 -3620 0
c Encoding variable: aux904 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3622'
c Var 'aux904' direct represents '0' with '3622'
c Var 'aux904' order represents '1' with '3623'
-3622 3623 0
c Var 'aux904' direct represents '1' with '3624'
3622 -3623 3624 0
-3624 3623 0
-3624 -3622 0
c Var 'aux904' direct represents '2' with '-3623'
3622 3624 -3623 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3625'
c Var 'aux905' direct represents '0' with '3625'
c Var 'aux905' order represents '1' with '3626'
-3625 3626 0
c Var 'aux905' direct represents '1' with '3627'
3625 -3626 3627 0
-3627 3626 0
-3627 -3625 0
c Var 'aux905' direct represents '2' with '-3626'
3625 3627 -3626 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3628'
c Var 'aux906' direct represents '0' with '3628'
c Var 'aux906' order represents '1' with '3629'
-3628 3629 0
c Var 'aux906' direct represents '1' with '3630'
3628 -3629 3630 0
-3630 3629 0
-3630 -3628 0
c Var 'aux906' direct represents '2' with '-3629'
3628 3630 -3629 0
c Encoding variable: aux907 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux906))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3631'
c Var 'aux907' direct represents '0' with '3631'
c Var 'aux907' order represents '1' with '3632'
-3631 3632 0
c Var 'aux907' direct represents '1' with '3633'
3631 -3632 3633 0
-3633 3632 0
-3633 -3631 0
c Var 'aux907' order represents '2' with '3634'
-3632 3634 0
c Var 'aux907' direct represents '2' with '3635'
3632 -3634 3635 0
-3635 3634 0
-3635 -3632 0
c Var 'aux907' direct represents '3' with '-3634'
3631 3633 3635 -3634 0
c Encoding variable: aux908 with domain: int(0..4) (representing constraint (aux903 + aux905))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3636'
c Var 'aux908' direct represents '0' with '3636'
c Var 'aux908' order represents '1' with '3637'
-3636 3637 0
c Var 'aux908' direct represents '1' with '3638'
3636 -3637 3638 0
-3638 3637 0
-3638 -3636 0
c Var 'aux908' order represents '2' with '3639'
-3637 3639 0
c Var 'aux908' direct represents '2' with '3640'
3637 -3639 3640 0
-3640 3639 0
-3640 -3637 0
c Var 'aux908' order represents '3' with '3641'
-3639 3641 0
c Var 'aux908' direct represents '3' with '3642'
3639 -3641 3642 0
-3642 3641 0
-3642 -3639 0
c Var 'aux908' direct represents '4' with '-3641'
3636 3638 3640 3642 -3641 0
c Encoding variable: aux909 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3643'
c Var 'aux909' direct represents '0' with '3643'
c Var 'aux909' order represents '1' with '3644'
-3643 3644 0
c Var 'aux909' direct represents '1' with '3645'
3643 -3644 3645 0
-3645 3644 0
-3645 -3643 0
c Var 'aux909' direct represents '2' with '-3644'
3643 3645 -3644 0
c Encoding variable: aux910 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3646'
c Var 'aux910' direct represents '0' with '3646'
c Var 'aux910' order represents '1' with '3647'
-3646 3647 0
c Var 'aux910' direct represents '1' with '3648'
3646 -3647 3648 0
-3648 3647 0
-3648 -3646 0
c Var 'aux910' direct represents '2' with '-3647'
3646 3648 -3647 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3649'
c Var 'aux911' direct represents '0' with '3649'
c Var 'aux911' order represents '1' with '3650'
-3649 3650 0
c Var 'aux911' direct represents '1' with '3651'
3649 -3650 3651 0
-3651 3650 0
-3651 -3649 0
c Var 'aux911' direct represents '2' with '-3650'
3649 3651 -3650 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3652'
c Var 'aux912' direct represents '0' with '3652'
c Var 'aux912' order represents '1' with '3653'
-3652 3653 0
c Var 'aux912' direct represents '1' with '3654'
3652 -3653 3654 0
-3654 3653 0
-3654 -3652 0
c Var 'aux912' direct represents '2' with '-3653'
3652 3654 -3653 0
c Encoding variable: aux913 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux912))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3655'
c Var 'aux913' direct represents '0' with '3655'
c Var 'aux913' order represents '1' with '3656'
-3655 3656 0
c Var 'aux913' direct represents '1' with '3657'
3655 -3656 3657 0
-3657 3656 0
-3657 -3655 0
c Var 'aux913' order represents '2' with '3658'
-3656 3658 0
c Var 'aux913' direct represents '2' with '3659'
3656 -3658 3659 0
-3659 3658 0
-3659 -3656 0
c Var 'aux913' direct represents '3' with '-3658'
3655 3657 3659 -3658 0
c Encoding variable: aux914 with domain: int(0..4) (representing constraint (aux909 + aux911))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3660'
c Var 'aux914' direct represents '0' with '3660'
c Var 'aux914' order represents '1' with '3661'
-3660 3661 0
c Var 'aux914' direct represents '1' with '3662'
3660 -3661 3662 0
-3662 3661 0
-3662 -3660 0
c Var 'aux914' order represents '2' with '3663'
-3661 3663 0
c Var 'aux914' direct represents '2' with '3664'
3661 -3663 3664 0
-3664 3663 0
-3664 -3661 0
c Var 'aux914' order represents '3' with '3665'
-3663 3665 0
c Var 'aux914' direct represents '3' with '3666'
3663 -3665 3666 0
-3666 3665 0
-3666 -3663 0
c Var 'aux914' direct represents '4' with '-3665'
3660 3662 3664 3666 -3665 0
c Encoding variable: aux915 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3667'
c Var 'aux915' direct represents '0' with '3667'
c Var 'aux915' order represents '1' with '3668'
-3667 3668 0
c Var 'aux915' direct represents '1' with '3669'
3667 -3668 3669 0
-3669 3668 0
-3669 -3667 0
c Var 'aux915' direct represents '2' with '-3668'
3667 3669 -3668 0
c Encoding variable: aux916 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3670'
c Var 'aux916' direct represents '0' with '3670'
c Var 'aux916' order represents '1' with '3671'
-3670 3671 0
c Var 'aux916' direct represents '1' with '3672'
3670 -3671 3672 0
-3672 3671 0
-3672 -3670 0
c Var 'aux916' direct represents '2' with '-3671'
3670 3672 -3671 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3673'
c Var 'aux917' direct represents '0' with '3673'
c Var 'aux917' order represents '1' with '3674'
-3673 3674 0
c Var 'aux917' direct represents '1' with '3675'
3673 -3674 3675 0
-3675 3674 0
-3675 -3673 0
c Var 'aux917' direct represents '2' with '-3674'
3673 3675 -3674 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3676'
c Var 'aux918' direct represents '0' with '3676'
c Var 'aux918' order represents '1' with '3677'
-3676 3677 0
c Var 'aux918' direct represents '1' with '3678'
3676 -3677 3678 0
-3678 3677 0
-3678 -3676 0
c Var 'aux918' direct represents '2' with '-3677'
3676 3678 -3677 0
c Encoding variable: aux919 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux918))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3679'
c Var 'aux919' direct represents '0' with '3679'
c Var 'aux919' order represents '1' with '3680'
-3679 3680 0
c Var 'aux919' direct represents '1' with '3681'
3679 -3680 3681 0
-3681 3680 0
-3681 -3679 0
c Var 'aux919' order represents '2' with '3682'
-3680 3682 0
c Var 'aux919' direct represents '2' with '3683'
3680 -3682 3683 0
-3683 3682 0
-3683 -3680 0
c Var 'aux919' direct represents '3' with '-3682'
3679 3681 3683 -3682 0
c Encoding variable: aux920 with domain: int(0..4) (representing constraint (aux915 + aux917))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3684'
c Var 'aux920' direct represents '0' with '3684'
c Var 'aux920' order represents '1' with '3685'
-3684 3685 0
c Var 'aux920' direct represents '1' with '3686'
3684 -3685 3686 0
-3686 3685 0
-3686 -3684 0
c Var 'aux920' order represents '2' with '3687'
-3685 3687 0
c Var 'aux920' direct represents '2' with '3688'
3685 -3687 3688 0
-3688 3687 0
-3688 -3685 0
c Var 'aux920' order represents '3' with '3689'
-3687 3689 0
c Var 'aux920' direct represents '3' with '3690'
3687 -3689 3690 0
-3690 3689 0
-3690 -3687 0
c Var 'aux920' direct represents '4' with '-3689'
3684 3686 3688 3690 -3689 0
c Encoding variable: aux921 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3691'
c Var 'aux921' direct represents '0' with '3691'
c Var 'aux921' order represents '1' with '3692'
-3691 3692 0
c Var 'aux921' direct represents '1' with '3693'
3691 -3692 3693 0
-3693 3692 0
-3693 -3691 0
c Var 'aux921' direct represents '2' with '-3692'
3691 3693 -3692 0
c Encoding variable: aux922 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3694'
c Var 'aux922' direct represents '0' with '3694'
c Var 'aux922' order represents '1' with '3695'
-3694 3695 0
c Var 'aux922' direct represents '1' with '3696'
3694 -3695 3696 0
-3696 3695 0
-3696 -3694 0
c Var 'aux922' direct represents '2' with '-3695'
3694 3696 -3695 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3697'
c Var 'aux923' direct represents '0' with '3697'
c Var 'aux923' order represents '1' with '3698'
-3697 3698 0
c Var 'aux923' direct represents '1' with '3699'
3697 -3698 3699 0
-3699 3698 0
-3699 -3697 0
c Var 'aux923' direct represents '2' with '-3698'
3697 3699 -3698 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3700'
c Var 'aux924' direct represents '0' with '3700'
c Var 'aux924' order represents '1' with '3701'
-3700 3701 0
c Var 'aux924' direct represents '1' with '3702'
3700 -3701 3702 0
-3702 3701 0
-3702 -3700 0
c Var 'aux924' direct represents '2' with '-3701'
3700 3702 -3701 0
c Encoding variable: aux925 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux924))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3703'
c Var 'aux925' direct represents '0' with '3703'
c Var 'aux925' order represents '1' with '3704'
-3703 3704 0
c Var 'aux925' direct represents '1' with '3705'
3703 -3704 3705 0
-3705 3704 0
-3705 -3703 0
c Var 'aux925' order represents '2' with '3706'
-3704 3706 0
c Var 'aux925' direct represents '2' with '3707'
3704 -3706 3707 0
-3707 3706 0
-3707 -3704 0
c Var 'aux925' direct represents '3' with '-3706'
3703 3705 3707 -3706 0
c Encoding variable: aux926 with domain: int(0..4) (representing constraint (aux921 + aux923))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3708'
c Var 'aux926' direct represents '0' with '3708'
c Var 'aux926' order represents '1' with '3709'
-3708 3709 0
c Var 'aux926' direct represents '1' with '3710'
3708 -3709 3710 0
-3710 3709 0
-3710 -3708 0
c Var 'aux926' order represents '2' with '3711'
-3709 3711 0
c Var 'aux926' direct represents '2' with '3712'
3709 -3711 3712 0
-3712 3711 0
-3712 -3709 0
c Var 'aux926' order represents '3' with '3713'
-3711 3713 0
c Var 'aux926' direct represents '3' with '3714'
3711 -3713 3714 0
-3714 3713 0
-3714 -3711 0
c Var 'aux926' direct represents '4' with '-3713'
3708 3710 3712 3714 -3713 0
c Encoding variable: aux927 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3715'
c Var 'aux927' direct represents '0' with '3715'
c Var 'aux927' order represents '1' with '3716'
-3715 3716 0
c Var 'aux927' direct represents '1' with '3717'
3715 -3716 3717 0
-3717 3716 0
-3717 -3715 0
c Var 'aux927' direct represents '2' with '-3716'
3715 3717 -3716 0
c Encoding variable: aux928 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3718'
c Var 'aux928' direct represents '0' with '3718'
c Var 'aux928' order represents '1' with '3719'
-3718 3719 0
c Var 'aux928' direct represents '1' with '3720'
3718 -3719 3720 0
-3720 3719 0
-3720 -3718 0
c Var 'aux928' direct represents '2' with '-3719'
3718 3720 -3719 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3721'
c Var 'aux929' direct represents '0' with '3721'
c Var 'aux929' order represents '1' with '3722'
-3721 3722 0
c Var 'aux929' direct represents '1' with '3723'
3721 -3722 3723 0
-3723 3722 0
-3723 -3721 0
c Var 'aux929' direct represents '2' with '-3722'
3721 3723 -3722 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3724'
c Var 'aux930' direct represents '0' with '3724'
c Var 'aux930' order represents '1' with '3725'
-3724 3725 0
c Var 'aux930' direct represents '1' with '3726'
3724 -3725 3726 0
-3726 3725 0
-3726 -3724 0
c Var 'aux930' direct represents '2' with '-3725'
3724 3726 -3725 0
c Encoding variable: aux931 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux930))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3727'
c Var 'aux931' direct represents '0' with '3727'
c Var 'aux931' order represents '1' with '3728'
-3727 3728 0
c Var 'aux931' direct represents '1' with '3729'
3727 -3728 3729 0
-3729 3728 0
-3729 -3727 0
c Var 'aux931' order represents '2' with '3730'
-3728 3730 0
c Var 'aux931' direct represents '2' with '3731'
3728 -3730 3731 0
-3731 3730 0
-3731 -3728 0
c Var 'aux931' direct represents '3' with '-3730'
3727 3729 3731 -3730 0
c Encoding variable: aux932 with domain: int(0..4) (representing constraint (aux927 + aux929))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '3732'
c Var 'aux932' direct represents '0' with '3732'
c Var 'aux932' order represents '1' with '3733'
-3732 3733 0
c Var 'aux932' direct represents '1' with '3734'
3732 -3733 3734 0
-3734 3733 0
-3734 -3732 0
c Var 'aux932' order represents '2' with '3735'
-3733 3735 0
c Var 'aux932' direct represents '2' with '3736'
3733 -3735 3736 0
-3736 3735 0
-3736 -3733 0
c Var 'aux932' order represents '3' with '3737'
-3735 3737 0
c Var 'aux932' direct represents '3' with '3738'
3735 -3737 3738 0
-3738 3737 0
-3738 -3735 0
c Var 'aux932' direct represents '4' with '-3737'
3732 3734 3736 3738 -3737 0
c Encoding variable: aux933 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '3739'
c Var 'aux933' direct represents '0' with '3739'
c Var 'aux933' order represents '1' with '3740'
-3739 3740 0
c Var 'aux933' direct represents '1' with '3741'
3739 -3740 3741 0
-3741 3740 0
-3741 -3739 0
c Var 'aux933' direct represents '2' with '-3740'
3739 3741 -3740 0
c Encoding variable: aux934 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '3742'
c Var 'aux934' direct represents '0' with '3742'
c Var 'aux934' order represents '1' with '3743'
-3742 3743 0
c Var 'aux934' direct represents '1' with '3744'
3742 -3743 3744 0
-3744 3743 0
-3744 -3742 0
c Var 'aux934' direct represents '2' with '-3743'
3742 3744 -3743 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '3745'
c Var 'aux935' direct represents '0' with '3745'
c Var 'aux935' order represents '1' with '3746'
-3745 3746 0
c Var 'aux935' direct represents '1' with '3747'
3745 -3746 3747 0
-3747 3746 0
-3747 -3745 0
c Var 'aux935' direct represents '2' with '-3746'
3745 3747 -3746 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '3748'
c Var 'aux936' direct represents '0' with '3748'
c Var 'aux936' order represents '1' with '3749'
-3748 3749 0
c Var 'aux936' direct represents '1' with '3750'
3748 -3749 3750 0
-3750 3749 0
-3750 -3748 0
c Var 'aux936' direct represents '2' with '-3749'
3748 3750 -3749 0
c Encoding variable: aux937 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux936))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '3751'
c Var 'aux937' direct represents '0' with '3751'
c Var 'aux937' order represents '1' with '3752'
-3751 3752 0
c Var 'aux937' direct represents '1' with '3753'
3751 -3752 3753 0
-3753 3752 0
-3753 -3751 0
c Var 'aux937' order represents '2' with '3754'
-3752 3754 0
c Var 'aux937' direct represents '2' with '3755'
3752 -3754 3755 0
-3755 3754 0
-3755 -3752 0
c Var 'aux937' direct represents '3' with '-3754'
3751 3753 3755 -3754 0
c Encoding variable: aux938 with domain: int(0..4) (representing constraint (aux933 + aux935))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '3756'
c Var 'aux938' direct represents '0' with '3756'
c Var 'aux938' order represents '1' with '3757'
-3756 3757 0
c Var 'aux938' direct represents '1' with '3758'
3756 -3757 3758 0
-3758 3757 0
-3758 -3756 0
c Var 'aux938' order represents '2' with '3759'
-3757 3759 0
c Var 'aux938' direct represents '2' with '3760'
3757 -3759 3760 0
-3760 3759 0
-3760 -3757 0
c Var 'aux938' order represents '3' with '3761'
-3759 3761 0
c Var 'aux938' direct represents '3' with '3762'
3759 -3761 3762 0
-3762 3761 0
-3762 -3759 0
c Var 'aux938' direct represents '4' with '-3761'
3756 3758 3760 3762 -3761 0
c Encoding variable: aux939 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '3763'
c Var 'aux939' direct represents '0' with '3763'
c Var 'aux939' order represents '1' with '3764'
-3763 3764 0
c Var 'aux939' direct represents '1' with '3765'
3763 -3764 3765 0
-3765 3764 0
-3765 -3763 0
c Var 'aux939' direct represents '2' with '-3764'
3763 3765 -3764 0
c Encoding variable: aux940 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '3766'
c Var 'aux940' direct represents '0' with '3766'
c Var 'aux940' order represents '1' with '3767'
-3766 3767 0
c Var 'aux940' direct represents '1' with '3768'
3766 -3767 3768 0
-3768 3767 0
-3768 -3766 0
c Var 'aux940' direct represents '2' with '-3767'
3766 3768 -3767 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '3769'
c Var 'aux941' direct represents '0' with '3769'
c Var 'aux941' order represents '1' with '3770'
-3769 3770 0
c Var 'aux941' direct represents '1' with '3771'
3769 -3770 3771 0
-3771 3770 0
-3771 -3769 0
c Var 'aux941' direct represents '2' with '-3770'
3769 3771 -3770 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '3772'
c Var 'aux942' direct represents '0' with '3772'
c Var 'aux942' order represents '1' with '3773'
-3772 3773 0
c Var 'aux942' direct represents '1' with '3774'
3772 -3773 3774 0
-3774 3773 0
-3774 -3772 0
c Var 'aux942' direct represents '2' with '-3773'
3772 3774 -3773 0
c Encoding variable: aux943 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux942))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '3775'
c Var 'aux943' direct represents '0' with '3775'
c Var 'aux943' order represents '1' with '3776'
-3775 3776 0
c Var 'aux943' direct represents '1' with '3777'
3775 -3776 3777 0
-3777 3776 0
-3777 -3775 0
c Var 'aux943' order represents '2' with '3778'
-3776 3778 0
c Var 'aux943' direct represents '2' with '3779'
3776 -3778 3779 0
-3779 3778 0
-3779 -3776 0
c Var 'aux943' direct represents '3' with '-3778'
3775 3777 3779 -3778 0
c Encoding variable: aux944 with domain: int(0..4) (representing constraint (aux939 + aux941))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '3780'
c Var 'aux944' direct represents '0' with '3780'
c Var 'aux944' order represents '1' with '3781'
-3780 3781 0
c Var 'aux944' direct represents '1' with '3782'
3780 -3781 3782 0
-3782 3781 0
-3782 -3780 0
c Var 'aux944' order represents '2' with '3783'
-3781 3783 0
c Var 'aux944' direct represents '2' with '3784'
3781 -3783 3784 0
-3784 3783 0
-3784 -3781 0
c Var 'aux944' order represents '3' with '3785'
-3783 3785 0
c Var 'aux944' direct represents '3' with '3786'
3783 -3785 3786 0
-3786 3785 0
-3786 -3783 0
c Var 'aux944' direct represents '4' with '-3785'
3780 3782 3784 3786 -3785 0
c Encoding variable: aux945 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '3787'
c Var 'aux945' direct represents '0' with '3787'
c Var 'aux945' order represents '1' with '3788'
-3787 3788 0
c Var 'aux945' direct represents '1' with '3789'
3787 -3788 3789 0
-3789 3788 0
-3789 -3787 0
c Var 'aux945' direct represents '2' with '-3788'
3787 3789 -3788 0
c Encoding variable: aux946 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '3790'
c Var 'aux946' direct represents '0' with '3790'
c Var 'aux946' order represents '1' with '3791'
-3790 3791 0
c Var 'aux946' direct represents '1' with '3792'
3790 -3791 3792 0
-3792 3791 0
-3792 -3790 0
c Var 'aux946' direct represents '2' with '-3791'
3790 3792 -3791 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '3793'
c Var 'aux947' direct represents '0' with '3793'
c Var 'aux947' order represents '1' with '3794'
-3793 3794 0
c Var 'aux947' direct represents '1' with '3795'
3793 -3794 3795 0
-3795 3794 0
-3795 -3793 0
c Var 'aux947' direct represents '2' with '-3794'
3793 3795 -3794 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '3796'
c Var 'aux948' direct represents '0' with '3796'
c Var 'aux948' order represents '1' with '3797'
-3796 3797 0
c Var 'aux948' direct represents '1' with '3798'
3796 -3797 3798 0
-3798 3797 0
-3798 -3796 0
c Var 'aux948' direct represents '2' with '-3797'
3796 3798 -3797 0
c Encoding variable: aux949 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux948))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '3799'
c Var 'aux949' direct represents '0' with '3799'
c Var 'aux949' order represents '1' with '3800'
-3799 3800 0
c Var 'aux949' direct represents '1' with '3801'
3799 -3800 3801 0
-3801 3800 0
-3801 -3799 0
c Var 'aux949' order represents '2' with '3802'
-3800 3802 0
c Var 'aux949' direct represents '2' with '3803'
3800 -3802 3803 0
-3803 3802 0
-3803 -3800 0
c Var 'aux949' direct represents '3' with '-3802'
3799 3801 3803 -3802 0
c Encoding variable: aux950 with domain: int(0..4) (representing constraint (aux945 + aux947))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '3804'
c Var 'aux950' direct represents '0' with '3804'
c Var 'aux950' order represents '1' with '3805'
-3804 3805 0
c Var 'aux950' direct represents '1' with '3806'
3804 -3805 3806 0
-3806 3805 0
-3806 -3804 0
c Var 'aux950' order represents '2' with '3807'
-3805 3807 0
c Var 'aux950' direct represents '2' with '3808'
3805 -3807 3808 0
-3808 3807 0
-3808 -3805 0
c Var 'aux950' order represents '3' with '3809'
-3807 3809 0
c Var 'aux950' direct represents '3' with '3810'
3807 -3809 3810 0
-3810 3809 0
-3810 -3807 0
c Var 'aux950' direct represents '4' with '-3809'
3804 3806 3808 3810 -3809 0
c Encoding variable: aux951 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '3811'
c Var 'aux951' direct represents '0' with '3811'
c Var 'aux951' order represents '1' with '3812'
-3811 3812 0
c Var 'aux951' direct represents '1' with '3813'
3811 -3812 3813 0
-3813 3812 0
-3813 -3811 0
c Var 'aux951' direct represents '2' with '-3812'
3811 3813 -3812 0
c Encoding variable: aux952 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '3814'
c Var 'aux952' direct represents '0' with '3814'
c Var 'aux952' order represents '1' with '3815'
-3814 3815 0
c Var 'aux952' direct represents '1' with '3816'
3814 -3815 3816 0
-3816 3815 0
-3816 -3814 0
c Var 'aux952' direct represents '2' with '-3815'
3814 3816 -3815 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '3817'
c Var 'aux953' direct represents '0' with '3817'
c Var 'aux953' order represents '1' with '3818'
-3817 3818 0
c Var 'aux953' direct represents '1' with '3819'
3817 -3818 3819 0
-3819 3818 0
-3819 -3817 0
c Var 'aux953' direct represents '2' with '-3818'
3817 3819 -3818 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '3820'
c Var 'aux954' direct represents '0' with '3820'
c Var 'aux954' order represents '1' with '3821'
-3820 3821 0
c Var 'aux954' direct represents '1' with '3822'
3820 -3821 3822 0
-3822 3821 0
-3822 -3820 0
c Var 'aux954' direct represents '2' with '-3821'
3820 3822 -3821 0
c Encoding variable: aux955 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux954))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '3823'
c Var 'aux955' direct represents '0' with '3823'
c Var 'aux955' order represents '1' with '3824'
-3823 3824 0
c Var 'aux955' direct represents '1' with '3825'
3823 -3824 3825 0
-3825 3824 0
-3825 -3823 0
c Var 'aux955' order represents '2' with '3826'
-3824 3826 0
c Var 'aux955' direct represents '2' with '3827'
3824 -3826 3827 0
-3827 3826 0
-3827 -3824 0
c Var 'aux955' direct represents '3' with '-3826'
3823 3825 3827 -3826 0
c Encoding variable: aux956 with domain: int(0..4) (representing constraint (aux951 + aux953))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '3828'
c Var 'aux956' direct represents '0' with '3828'
c Var 'aux956' order represents '1' with '3829'
-3828 3829 0
c Var 'aux956' direct represents '1' with '3830'
3828 -3829 3830 0
-3830 3829 0
-3830 -3828 0
c Var 'aux956' order represents '2' with '3831'
-3829 3831 0
c Var 'aux956' direct represents '2' with '3832'
3829 -3831 3832 0
-3832 3831 0
-3832 -3829 0
c Var 'aux956' order represents '3' with '3833'
-3831 3833 0
c Var 'aux956' direct represents '3' with '3834'
3831 -3833 3834 0
-3834 3833 0
-3834 -3831 0
c Var 'aux956' direct represents '4' with '-3833'
3828 3830 3832 3834 -3833 0
c Encoding variable: aux957 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '3835'
c Var 'aux957' direct represents '0' with '3835'
c Var 'aux957' order represents '1' with '3836'
-3835 3836 0
c Var 'aux957' direct represents '1' with '3837'
3835 -3836 3837 0
-3837 3836 0
-3837 -3835 0
c Var 'aux957' direct represents '2' with '-3836'
3835 3837 -3836 0
c Encoding variable: aux958 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '3838'
c Var 'aux958' direct represents '0' with '3838'
c Var 'aux958' order represents '1' with '3839'
-3838 3839 0
c Var 'aux958' direct represents '1' with '3840'
3838 -3839 3840 0
-3840 3839 0
-3840 -3838 0
c Var 'aux958' direct represents '2' with '-3839'
3838 3840 -3839 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '3841'
c Var 'aux959' direct represents '0' with '3841'
c Var 'aux959' order represents '1' with '3842'
-3841 3842 0
c Var 'aux959' direct represents '1' with '3843'
3841 -3842 3843 0
-3843 3842 0
-3843 -3841 0
c Var 'aux959' direct represents '2' with '-3842'
3841 3843 -3842 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '3844'
c Var 'aux960' direct represents '0' with '3844'
c Var 'aux960' order represents '1' with '3845'
-3844 3845 0
c Var 'aux960' direct represents '1' with '3846'
3844 -3845 3846 0
-3846 3845 0
-3846 -3844 0
c Var 'aux960' direct represents '2' with '-3845'
3844 3846 -3845 0
c Encoding variable: aux961 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux960))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '3847'
c Var 'aux961' direct represents '0' with '3847'
c Var 'aux961' order represents '1' with '3848'
-3847 3848 0
c Var 'aux961' direct represents '1' with '3849'
3847 -3848 3849 0
-3849 3848 0
-3849 -3847 0
c Var 'aux961' order represents '2' with '3850'
-3848 3850 0
c Var 'aux961' direct represents '2' with '3851'
3848 -3850 3851 0
-3851 3850 0
-3851 -3848 0
c Var 'aux961' direct represents '3' with '-3850'
3847 3849 3851 -3850 0
c Encoding variable: aux962 with domain: int(0..4) (representing constraint (aux957 + aux959))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '3852'
c Var 'aux962' direct represents '0' with '3852'
c Var 'aux962' order represents '1' with '3853'
-3852 3853 0
c Var 'aux962' direct represents '1' with '3854'
3852 -3853 3854 0
-3854 3853 0
-3854 -3852 0
c Var 'aux962' order represents '2' with '3855'
-3853 3855 0
c Var 'aux962' direct represents '2' with '3856'
3853 -3855 3856 0
-3856 3855 0
-3856 -3853 0
c Var 'aux962' order represents '3' with '3857'
-3855 3857 0
c Var 'aux962' direct represents '3' with '3858'
3855 -3857 3858 0
-3858 3857 0
-3858 -3855 0
c Var 'aux962' direct represents '4' with '-3857'
3852 3854 3856 3858 -3857 0
c Encoding variable: aux963 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '3859'
c Var 'aux963' direct represents '0' with '3859'
c Var 'aux963' order represents '1' with '3860'
-3859 3860 0
c Var 'aux963' direct represents '1' with '3861'
3859 -3860 3861 0
-3861 3860 0
-3861 -3859 0
c Var 'aux963' direct represents '2' with '-3860'
3859 3861 -3860 0
c Encoding variable: aux964 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '3862'
c Var 'aux964' direct represents '0' with '3862'
c Var 'aux964' order represents '1' with '3863'
-3862 3863 0
c Var 'aux964' direct represents '1' with '3864'
3862 -3863 3864 0
-3864 3863 0
-3864 -3862 0
c Var 'aux964' direct represents '2' with '-3863'
3862 3864 -3863 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '3865'
c Var 'aux965' direct represents '0' with '3865'
c Var 'aux965' order represents '1' with '3866'
-3865 3866 0
c Var 'aux965' direct represents '1' with '3867'
3865 -3866 3867 0
-3867 3866 0
-3867 -3865 0
c Var 'aux965' direct represents '2' with '-3866'
3865 3867 -3866 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '3868'
c Var 'aux966' direct represents '0' with '3868'
c Var 'aux966' order represents '1' with '3869'
-3868 3869 0
c Var 'aux966' direct represents '1' with '3870'
3868 -3869 3870 0
-3870 3869 0
-3870 -3868 0
c Var 'aux966' direct represents '2' with '-3869'
3868 3870 -3869 0
c Encoding variable: aux967 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux966))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '3871'
c Var 'aux967' direct represents '0' with '3871'
c Var 'aux967' order represents '1' with '3872'
-3871 3872 0
c Var 'aux967' direct represents '1' with '3873'
3871 -3872 3873 0
-3873 3872 0
-3873 -3871 0
c Var 'aux967' order represents '2' with '3874'
-3872 3874 0
c Var 'aux967' direct represents '2' with '3875'
3872 -3874 3875 0
-3875 3874 0
-3875 -3872 0
c Var 'aux967' direct represents '3' with '-3874'
3871 3873 3875 -3874 0
c Encoding variable: aux968 with domain: int(0..4) (representing constraint (aux963 + aux965))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '3876'
c Var 'aux968' direct represents '0' with '3876'
c Var 'aux968' order represents '1' with '3877'
-3876 3877 0
c Var 'aux968' direct represents '1' with '3878'
3876 -3877 3878 0
-3878 3877 0
-3878 -3876 0
c Var 'aux968' order represents '2' with '3879'
-3877 3879 0
c Var 'aux968' direct represents '2' with '3880'
3877 -3879 3880 0
-3880 3879 0
-3880 -3877 0
c Var 'aux968' order represents '3' with '3881'
-3879 3881 0
c Var 'aux968' direct represents '3' with '3882'
3879 -3881 3882 0
-3882 3881 0
-3882 -3879 0
c Var 'aux968' direct represents '4' with '-3881'
3876 3878 3880 3882 -3881 0
c Encoding variable: aux969 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '3883'
c Var 'aux969' direct represents '0' with '3883'
c Var 'aux969' order represents '1' with '3884'
-3883 3884 0
c Var 'aux969' direct represents '1' with '3885'
3883 -3884 3885 0
-3885 3884 0
-3885 -3883 0
c Var 'aux969' direct represents '2' with '-3884'
3883 3885 -3884 0
c Encoding variable: aux970 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '3886'
c Var 'aux970' direct represents '0' with '3886'
c Var 'aux970' order represents '1' with '3887'
-3886 3887 0
c Var 'aux970' direct represents '1' with '3888'
3886 -3887 3888 0
-3888 3887 0
-3888 -3886 0
c Var 'aux970' direct represents '2' with '-3887'
3886 3888 -3887 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '3889'
c Var 'aux971' direct represents '0' with '3889'
c Var 'aux971' order represents '1' with '3890'
-3889 3890 0
c Var 'aux971' direct represents '1' with '3891'
3889 -3890 3891 0
-3891 3890 0
-3891 -3889 0
c Var 'aux971' direct represents '2' with '-3890'
3889 3891 -3890 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '3892'
c Var 'aux972' direct represents '0' with '3892'
c Var 'aux972' order represents '1' with '3893'
-3892 3893 0
c Var 'aux972' direct represents '1' with '3894'
3892 -3893 3894 0
-3894 3893 0
-3894 -3892 0
c Var 'aux972' direct represents '2' with '-3893'
3892 3894 -3893 0
c Encoding variable: aux973 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux972))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '3895'
c Var 'aux973' direct represents '0' with '3895'
c Var 'aux973' order represents '1' with '3896'
-3895 3896 0
c Var 'aux973' direct represents '1' with '3897'
3895 -3896 3897 0
-3897 3896 0
-3897 -3895 0
c Var 'aux973' order represents '2' with '3898'
-3896 3898 0
c Var 'aux973' direct represents '2' with '3899'
3896 -3898 3899 0
-3899 3898 0
-3899 -3896 0
c Var 'aux973' direct represents '3' with '-3898'
3895 3897 3899 -3898 0
c Encoding variable: aux974 with domain: int(0..4) (representing constraint (aux969 + aux971))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '3900'
c Var 'aux974' direct represents '0' with '3900'
c Var 'aux974' order represents '1' with '3901'
-3900 3901 0
c Var 'aux974' direct represents '1' with '3902'
3900 -3901 3902 0
-3902 3901 0
-3902 -3900 0
c Var 'aux974' order represents '2' with '3903'
-3901 3903 0
c Var 'aux974' direct represents '2' with '3904'
3901 -3903 3904 0
-3904 3903 0
-3904 -3901 0
c Var 'aux974' order represents '3' with '3905'
-3903 3905 0
c Var 'aux974' direct represents '3' with '3906'
3903 -3905 3906 0
-3906 3905 0
-3906 -3903 0
c Var 'aux974' direct represents '4' with '-3905'
3900 3902 3904 3906 -3905 0
c Encoding variable: aux975 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '3907'
c Var 'aux975' direct represents '0' with '3907'
c Var 'aux975' order represents '1' with '3908'
-3907 3908 0
c Var 'aux975' direct represents '1' with '3909'
3907 -3908 3909 0
-3909 3908 0
-3909 -3907 0
c Var 'aux975' direct represents '2' with '-3908'
3907 3909 -3908 0
c Encoding variable: aux976 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '3910'
c Var 'aux976' direct represents '0' with '3910'
c Var 'aux976' order represents '1' with '3911'
-3910 3911 0
c Var 'aux976' direct represents '1' with '3912'
3910 -3911 3912 0
-3912 3911 0
-3912 -3910 0
c Var 'aux976' direct represents '2' with '-3911'
3910 3912 -3911 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '3913'
c Var 'aux977' direct represents '0' with '3913'
c Var 'aux977' order represents '1' with '3914'
-3913 3914 0
c Var 'aux977' direct represents '1' with '3915'
3913 -3914 3915 0
-3915 3914 0
-3915 -3913 0
c Var 'aux977' direct represents '2' with '-3914'
3913 3915 -3914 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '3916'
c Var 'aux978' direct represents '0' with '3916'
c Var 'aux978' order represents '1' with '3917'
-3916 3917 0
c Var 'aux978' direct represents '1' with '3918'
3916 -3917 3918 0
-3918 3917 0
-3918 -3916 0
c Var 'aux978' direct represents '2' with '-3917'
3916 3918 -3917 0
c Encoding variable: aux979 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux978))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '3919'
c Var 'aux979' direct represents '0' with '3919'
c Var 'aux979' order represents '1' with '3920'
-3919 3920 0
c Var 'aux979' direct represents '1' with '3921'
3919 -3920 3921 0
-3921 3920 0
-3921 -3919 0
c Var 'aux979' order represents '2' with '3922'
-3920 3922 0
c Var 'aux979' direct represents '2' with '3923'
3920 -3922 3923 0
-3923 3922 0
-3923 -3920 0
c Var 'aux979' direct represents '3' with '-3922'
3919 3921 3923 -3922 0
c Encoding variable: aux980 with domain: int(0..4) (representing constraint (aux975 + aux977))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '3924'
c Var 'aux980' direct represents '0' with '3924'
c Var 'aux980' order represents '1' with '3925'
-3924 3925 0
c Var 'aux980' direct represents '1' with '3926'
3924 -3925 3926 0
-3926 3925 0
-3926 -3924 0
c Var 'aux980' order represents '2' with '3927'
-3925 3927 0
c Var 'aux980' direct represents '2' with '3928'
3925 -3927 3928 0
-3928 3927 0
-3928 -3925 0
c Var 'aux980' order represents '3' with '3929'
-3927 3929 0
c Var 'aux980' direct represents '3' with '3930'
3927 -3929 3930 0
-3930 3929 0
-3930 -3927 0
c Var 'aux980' direct represents '4' with '-3929'
3924 3926 3928 3930 -3929 0
c Encoding variable: aux981 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '3931'
c Var 'aux981' direct represents '0' with '3931'
c Var 'aux981' order represents '1' with '3932'
-3931 3932 0
c Var 'aux981' direct represents '1' with '3933'
3931 -3932 3933 0
-3933 3932 0
-3933 -3931 0
c Var 'aux981' direct represents '2' with '-3932'
3931 3933 -3932 0
c Encoding variable: aux982 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '3934'
c Var 'aux982' direct represents '0' with '3934'
c Var 'aux982' order represents '1' with '3935'
-3934 3935 0
c Var 'aux982' direct represents '1' with '3936'
3934 -3935 3936 0
-3936 3935 0
-3936 -3934 0
c Var 'aux982' direct represents '2' with '-3935'
3934 3936 -3935 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '3937'
c Var 'aux983' direct represents '0' with '3937'
c Var 'aux983' order represents '1' with '3938'
-3937 3938 0
c Var 'aux983' direct represents '1' with '3939'
3937 -3938 3939 0
-3939 3938 0
-3939 -3937 0
c Var 'aux983' direct represents '2' with '-3938'
3937 3939 -3938 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '3940'
c Var 'aux984' direct represents '0' with '3940'
c Var 'aux984' order represents '1' with '3941'
-3940 3941 0
c Var 'aux984' direct represents '1' with '3942'
3940 -3941 3942 0
-3942 3941 0
-3942 -3940 0
c Var 'aux984' direct represents '2' with '-3941'
3940 3942 -3941 0
c Encoding variable: aux985 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux984))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '3943'
c Var 'aux985' direct represents '0' with '3943'
c Var 'aux985' order represents '1' with '3944'
-3943 3944 0
c Var 'aux985' direct represents '1' with '3945'
3943 -3944 3945 0
-3945 3944 0
-3945 -3943 0
c Var 'aux985' order represents '2' with '3946'
-3944 3946 0
c Var 'aux985' direct represents '2' with '3947'
3944 -3946 3947 0
-3947 3946 0
-3947 -3944 0
c Var 'aux985' direct represents '3' with '-3946'
3943 3945 3947 -3946 0
c Encoding variable: aux986 with domain: int(0..4) (representing constraint (aux981 + aux983))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '3948'
c Var 'aux986' direct represents '0' with '3948'
c Var 'aux986' order represents '1' with '3949'
-3948 3949 0
c Var 'aux986' direct represents '1' with '3950'
3948 -3949 3950 0
-3950 3949 0
-3950 -3948 0
c Var 'aux986' order represents '2' with '3951'
-3949 3951 0
c Var 'aux986' direct represents '2' with '3952'
3949 -3951 3952 0
-3952 3951 0
-3952 -3949 0
c Var 'aux986' order represents '3' with '3953'
-3951 3953 0
c Var 'aux986' direct represents '3' with '3954'
3951 -3953 3954 0
-3954 3953 0
-3954 -3951 0
c Var 'aux986' direct represents '4' with '-3953'
3948 3950 3952 3954 -3953 0
c Encoding variable: aux987 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '3955'
c Var 'aux987' direct represents '0' with '3955'
c Var 'aux987' order represents '1' with '3956'
-3955 3956 0
c Var 'aux987' direct represents '1' with '3957'
3955 -3956 3957 0
-3957 3956 0
-3957 -3955 0
c Var 'aux987' direct represents '2' with '-3956'
3955 3957 -3956 0
c Encoding variable: aux988 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '3958'
c Var 'aux988' direct represents '0' with '3958'
c Var 'aux988' order represents '1' with '3959'
-3958 3959 0
c Var 'aux988' direct represents '1' with '3960'
3958 -3959 3960 0
-3960 3959 0
-3960 -3958 0
c Var 'aux988' direct represents '2' with '-3959'
3958 3960 -3959 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '3961'
c Var 'aux989' direct represents '0' with '3961'
c Var 'aux989' order represents '1' with '3962'
-3961 3962 0
c Var 'aux989' direct represents '1' with '3963'
3961 -3962 3963 0
-3963 3962 0
-3963 -3961 0
c Var 'aux989' direct represents '2' with '-3962'
3961 3963 -3962 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '3964'
c Var 'aux990' direct represents '0' with '3964'
c Var 'aux990' order represents '1' with '3965'
-3964 3965 0
c Var 'aux990' direct represents '1' with '3966'
3964 -3965 3966 0
-3966 3965 0
-3966 -3964 0
c Var 'aux990' direct represents '2' with '-3965'
3964 3966 -3965 0
c Encoding variable: aux991 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux990))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '3967'
c Var 'aux991' direct represents '0' with '3967'
c Var 'aux991' order represents '1' with '3968'
-3967 3968 0
c Var 'aux991' direct represents '1' with '3969'
3967 -3968 3969 0
-3969 3968 0
-3969 -3967 0
c Var 'aux991' order represents '2' with '3970'
-3968 3970 0
c Var 'aux991' direct represents '2' with '3971'
3968 -3970 3971 0
-3971 3970 0
-3971 -3968 0
c Var 'aux991' direct represents '3' with '-3970'
3967 3969 3971 -3970 0
c Encoding variable: aux992 with domain: int(0..4) (representing constraint (aux987 + aux989))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '3972'
c Var 'aux992' direct represents '0' with '3972'
c Var 'aux992' order represents '1' with '3973'
-3972 3973 0
c Var 'aux992' direct represents '1' with '3974'
3972 -3973 3974 0
-3974 3973 0
-3974 -3972 0
c Var 'aux992' order represents '2' with '3975'
-3973 3975 0
c Var 'aux992' direct represents '2' with '3976'
3973 -3975 3976 0
-3976 3975 0
-3976 -3973 0
c Var 'aux992' order represents '3' with '3977'
-3975 3977 0
c Var 'aux992' direct represents '3' with '3978'
3975 -3977 3978 0
-3978 3977 0
-3978 -3975 0
c Var 'aux992' direct represents '4' with '-3977'
3972 3974 3976 3978 -3977 0
c Encoding variable: aux993 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '3979'
c Var 'aux993' direct represents '0' with '3979'
c Var 'aux993' order represents '1' with '3980'
-3979 3980 0
c Var 'aux993' direct represents '1' with '3981'
3979 -3980 3981 0
-3981 3980 0
-3981 -3979 0
c Var 'aux993' direct represents '2' with '-3980'
3979 3981 -3980 0
c Encoding variable: aux994 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '3982'
c Var 'aux994' direct represents '0' with '3982'
c Var 'aux994' order represents '1' with '3983'
-3982 3983 0
c Var 'aux994' direct represents '1' with '3984'
3982 -3983 3984 0
-3984 3983 0
-3984 -3982 0
c Var 'aux994' direct represents '2' with '-3983'
3982 3984 -3983 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '3985'
c Var 'aux995' direct represents '0' with '3985'
c Var 'aux995' order represents '1' with '3986'
-3985 3986 0
c Var 'aux995' direct represents '1' with '3987'
3985 -3986 3987 0
-3987 3986 0
-3987 -3985 0
c Var 'aux995' direct represents '2' with '-3986'
3985 3987 -3986 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '3988'
c Var 'aux996' direct represents '0' with '3988'
c Var 'aux996' order represents '1' with '3989'
-3988 3989 0
c Var 'aux996' direct represents '1' with '3990'
3988 -3989 3990 0
-3990 3989 0
-3990 -3988 0
c Var 'aux996' direct represents '2' with '-3989'
3988 3990 -3989 0
c Encoding variable: aux997 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux996))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '3991'
c Var 'aux997' direct represents '0' with '3991'
c Var 'aux997' order represents '1' with '3992'
-3991 3992 0
c Var 'aux997' direct represents '1' with '3993'
3991 -3992 3993 0
-3993 3992 0
-3993 -3991 0
c Var 'aux997' order represents '2' with '3994'
-3992 3994 0
c Var 'aux997' direct represents '2' with '3995'
3992 -3994 3995 0
-3995 3994 0
-3995 -3992 0
c Var 'aux997' direct represents '3' with '-3994'
3991 3993 3995 -3994 0
c Encoding variable: aux998 with domain: int(0..4) (representing constraint (aux993 + aux995))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '3996'
c Var 'aux998' direct represents '0' with '3996'
c Var 'aux998' order represents '1' with '3997'
-3996 3997 0
c Var 'aux998' direct represents '1' with '3998'
3996 -3997 3998 0
-3998 3997 0
-3998 -3996 0
c Var 'aux998' order represents '2' with '3999'
-3997 3999 0
c Var 'aux998' direct represents '2' with '4000'
3997 -3999 4000 0
-4000 3999 0
-4000 -3997 0
c Var 'aux998' order represents '3' with '4001'
-3999 4001 0
c Var 'aux998' direct represents '3' with '4002'
3999 -4001 4002 0
-4002 4001 0
-4002 -3999 0
c Var 'aux998' direct represents '4' with '-4001'
3996 3998 4000 4002 -4001 0
c Encoding variable: aux999 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4003'
c Var 'aux999' direct represents '0' with '4003'
c Var 'aux999' order represents '1' with '4004'
-4003 4004 0
c Var 'aux999' direct represents '1' with '4005'
4003 -4004 4005 0
-4005 4004 0
-4005 -4003 0
c Var 'aux999' direct represents '2' with '-4004'
4003 4005 -4004 0
c Encoding variable: aux1000 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4006'
c Var 'aux1000' direct represents '0' with '4006'
c Var 'aux1000' order represents '1' with '4007'
-4006 4007 0
c Var 'aux1000' direct represents '1' with '4008'
4006 -4007 4008 0
-4008 4007 0
-4008 -4006 0
c Var 'aux1000' direct represents '2' with '-4007'
4006 4008 -4007 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4009'
c Var 'aux1001' direct represents '0' with '4009'
c Var 'aux1001' order represents '1' with '4010'
-4009 4010 0
c Var 'aux1001' direct represents '1' with '4011'
4009 -4010 4011 0
-4011 4010 0
-4011 -4009 0
c Var 'aux1001' direct represents '2' with '-4010'
4009 4011 -4010 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4012'
c Var 'aux1002' direct represents '0' with '4012'
c Var 'aux1002' order represents '1' with '4013'
-4012 4013 0
c Var 'aux1002' direct represents '1' with '4014'
4012 -4013 4014 0
-4014 4013 0
-4014 -4012 0
c Var 'aux1002' direct represents '2' with '-4013'
4012 4014 -4013 0
c Encoding variable: aux1003 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux1002))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4015'
c Var 'aux1003' direct represents '0' with '4015'
c Var 'aux1003' order represents '1' with '4016'
-4015 4016 0
c Var 'aux1003' direct represents '1' with '4017'
4015 -4016 4017 0
-4017 4016 0
-4017 -4015 0
c Var 'aux1003' order represents '2' with '4018'
-4016 4018 0
c Var 'aux1003' direct represents '2' with '4019'
4016 -4018 4019 0
-4019 4018 0
-4019 -4016 0
c Var 'aux1003' direct represents '3' with '-4018'
4015 4017 4019 -4018 0
c Encoding variable: aux1004 with domain: int(0..4) (representing constraint (aux999 + aux1001))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4020'
c Var 'aux1004' direct represents '0' with '4020'
c Var 'aux1004' order represents '1' with '4021'
-4020 4021 0
c Var 'aux1004' direct represents '1' with '4022'
4020 -4021 4022 0
-4022 4021 0
-4022 -4020 0
c Var 'aux1004' order represents '2' with '4023'
-4021 4023 0
c Var 'aux1004' direct represents '2' with '4024'
4021 -4023 4024 0
-4024 4023 0
-4024 -4021 0
c Var 'aux1004' order represents '3' with '4025'
-4023 4025 0
c Var 'aux1004' direct represents '3' with '4026'
4023 -4025 4026 0
-4026 4025 0
-4026 -4023 0
c Var 'aux1004' direct represents '4' with '-4025'
4020 4022 4024 4026 -4025 0
c Encoding variable: aux1005 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4027'
c Var 'aux1005' direct represents '0' with '4027'
c Var 'aux1005' order represents '1' with '4028'
-4027 4028 0
c Var 'aux1005' direct represents '1' with '4029'
4027 -4028 4029 0
-4029 4028 0
-4029 -4027 0
c Var 'aux1005' direct represents '2' with '-4028'
4027 4029 -4028 0
c Encoding variable: aux1006 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4030'
c Var 'aux1006' direct represents '0' with '4030'
c Var 'aux1006' order represents '1' with '4031'
-4030 4031 0
c Var 'aux1006' direct represents '1' with '4032'
4030 -4031 4032 0
-4032 4031 0
-4032 -4030 0
c Var 'aux1006' direct represents '2' with '-4031'
4030 4032 -4031 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4033'
c Var 'aux1007' direct represents '0' with '4033'
c Var 'aux1007' order represents '1' with '4034'
-4033 4034 0
c Var 'aux1007' direct represents '1' with '4035'
4033 -4034 4035 0
-4035 4034 0
-4035 -4033 0
c Var 'aux1007' direct represents '2' with '-4034'
4033 4035 -4034 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4036'
c Var 'aux1008' direct represents '0' with '4036'
c Var 'aux1008' order represents '1' with '4037'
-4036 4037 0
c Var 'aux1008' direct represents '1' with '4038'
4036 -4037 4038 0
-4038 4037 0
-4038 -4036 0
c Var 'aux1008' direct represents '2' with '-4037'
4036 4038 -4037 0
c Encoding variable: aux1009 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux1008))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4039'
c Var 'aux1009' direct represents '0' with '4039'
c Var 'aux1009' order represents '1' with '4040'
-4039 4040 0
c Var 'aux1009' direct represents '1' with '4041'
4039 -4040 4041 0
-4041 4040 0
-4041 -4039 0
c Var 'aux1009' order represents '2' with '4042'
-4040 4042 0
c Var 'aux1009' direct represents '2' with '4043'
4040 -4042 4043 0
-4043 4042 0
-4043 -4040 0
c Var 'aux1009' direct represents '3' with '-4042'
4039 4041 4043 -4042 0
c Encoding variable: aux1010 with domain: int(0..4) (representing constraint (aux1005 + aux1007))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4044'
c Var 'aux1010' direct represents '0' with '4044'
c Var 'aux1010' order represents '1' with '4045'
-4044 4045 0
c Var 'aux1010' direct represents '1' with '4046'
4044 -4045 4046 0
-4046 4045 0
-4046 -4044 0
c Var 'aux1010' order represents '2' with '4047'
-4045 4047 0
c Var 'aux1010' direct represents '2' with '4048'
4045 -4047 4048 0
-4048 4047 0
-4048 -4045 0
c Var 'aux1010' order represents '3' with '4049'
-4047 4049 0
c Var 'aux1010' direct represents '3' with '4050'
4047 -4049 4050 0
-4050 4049 0
-4050 -4047 0
c Var 'aux1010' direct represents '4' with '-4049'
4044 4046 4048 4050 -4049 0
c Encoding variable: aux1011 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4051'
c Var 'aux1011' direct represents '0' with '4051'
c Var 'aux1011' order represents '1' with '4052'
-4051 4052 0
c Var 'aux1011' direct represents '1' with '4053'
4051 -4052 4053 0
-4053 4052 0
-4053 -4051 0
c Var 'aux1011' direct represents '2' with '-4052'
4051 4053 -4052 0
c Encoding variable: aux1012 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4054'
c Var 'aux1012' direct represents '0' with '4054'
c Var 'aux1012' order represents '1' with '4055'
-4054 4055 0
c Var 'aux1012' direct represents '1' with '4056'
4054 -4055 4056 0
-4056 4055 0
-4056 -4054 0
c Var 'aux1012' direct represents '2' with '-4055'
4054 4056 -4055 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4057'
c Var 'aux1013' direct represents '0' with '4057'
c Var 'aux1013' order represents '1' with '4058'
-4057 4058 0
c Var 'aux1013' direct represents '1' with '4059'
4057 -4058 4059 0
-4059 4058 0
-4059 -4057 0
c Var 'aux1013' direct represents '2' with '-4058'
4057 4059 -4058 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4060'
c Var 'aux1014' direct represents '0' with '4060'
c Var 'aux1014' order represents '1' with '4061'
-4060 4061 0
c Var 'aux1014' direct represents '1' with '4062'
4060 -4061 4062 0
-4062 4061 0
-4062 -4060 0
c Var 'aux1014' direct represents '2' with '-4061'
4060 4062 -4061 0
c Encoding variable: aux1015 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux1014))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4063'
c Var 'aux1015' direct represents '0' with '4063'
c Var 'aux1015' order represents '1' with '4064'
-4063 4064 0
c Var 'aux1015' direct represents '1' with '4065'
4063 -4064 4065 0
-4065 4064 0
-4065 -4063 0
c Var 'aux1015' order represents '2' with '4066'
-4064 4066 0
c Var 'aux1015' direct represents '2' with '4067'
4064 -4066 4067 0
-4067 4066 0
-4067 -4064 0
c Var 'aux1015' direct represents '3' with '-4066'
4063 4065 4067 -4066 0
c Encoding variable: aux1016 with domain: int(0..4) (representing constraint (aux1011 + aux1013))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4068'
c Var 'aux1016' direct represents '0' with '4068'
c Var 'aux1016' order represents '1' with '4069'
-4068 4069 0
c Var 'aux1016' direct represents '1' with '4070'
4068 -4069 4070 0
-4070 4069 0
-4070 -4068 0
c Var 'aux1016' order represents '2' with '4071'
-4069 4071 0
c Var 'aux1016' direct represents '2' with '4072'
4069 -4071 4072 0
-4072 4071 0
-4072 -4069 0
c Var 'aux1016' order represents '3' with '4073'
-4071 4073 0
c Var 'aux1016' direct represents '3' with '4074'
4071 -4073 4074 0
-4074 4073 0
-4074 -4071 0
c Var 'aux1016' direct represents '4' with '-4073'
4068 4070 4072 4074 -4073 0
c Encoding variable: aux1017 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4075'
c Var 'aux1017' direct represents '0' with '4075'
c Var 'aux1017' order represents '1' with '4076'
-4075 4076 0
c Var 'aux1017' direct represents '1' with '4077'
4075 -4076 4077 0
-4077 4076 0
-4077 -4075 0
c Var 'aux1017' direct represents '2' with '-4076'
4075 4077 -4076 0
c Encoding variable: aux1018 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4078'
c Var 'aux1018' direct represents '0' with '4078'
c Var 'aux1018' order represents '1' with '4079'
-4078 4079 0
c Var 'aux1018' direct represents '1' with '4080'
4078 -4079 4080 0
-4080 4079 0
-4080 -4078 0
c Var 'aux1018' direct represents '2' with '-4079'
4078 4080 -4079 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4081'
c Var 'aux1019' direct represents '0' with '4081'
c Var 'aux1019' order represents '1' with '4082'
-4081 4082 0
c Var 'aux1019' direct represents '1' with '4083'
4081 -4082 4083 0
-4083 4082 0
-4083 -4081 0
c Var 'aux1019' direct represents '2' with '-4082'
4081 4083 -4082 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4084'
c Var 'aux1020' direct represents '0' with '4084'
c Var 'aux1020' order represents '1' with '4085'
-4084 4085 0
c Var 'aux1020' direct represents '1' with '4086'
4084 -4085 4086 0
-4086 4085 0
-4086 -4084 0
c Var 'aux1020' direct represents '2' with '-4085'
4084 4086 -4085 0
c Encoding variable: aux1021 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux1020))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4087'
c Var 'aux1021' direct represents '0' with '4087'
c Var 'aux1021' order represents '1' with '4088'
-4087 4088 0
c Var 'aux1021' direct represents '1' with '4089'
4087 -4088 4089 0
-4089 4088 0
-4089 -4087 0
c Var 'aux1021' order represents '2' with '4090'
-4088 4090 0
c Var 'aux1021' direct represents '2' with '4091'
4088 -4090 4091 0
-4091 4090 0
-4091 -4088 0
c Var 'aux1021' direct represents '3' with '-4090'
4087 4089 4091 -4090 0
c Encoding variable: aux1022 with domain: int(0..4) (representing constraint (aux1017 + aux1019))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4092'
c Var 'aux1022' direct represents '0' with '4092'
c Var 'aux1022' order represents '1' with '4093'
-4092 4093 0
c Var 'aux1022' direct represents '1' with '4094'
4092 -4093 4094 0
-4094 4093 0
-4094 -4092 0
c Var 'aux1022' order represents '2' with '4095'
-4093 4095 0
c Var 'aux1022' direct represents '2' with '4096'
4093 -4095 4096 0
-4096 4095 0
-4096 -4093 0
c Var 'aux1022' order represents '3' with '4097'
-4095 4097 0
c Var 'aux1022' direct represents '3' with '4098'
4095 -4097 4098 0
-4098 4097 0
-4098 -4095 0
c Var 'aux1022' direct represents '4' with '-4097'
4092 4094 4096 4098 -4097 0
c Encoding variable: aux1023 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4099'
c Var 'aux1023' direct represents '0' with '4099'
c Var 'aux1023' order represents '1' with '4100'
-4099 4100 0
c Var 'aux1023' direct represents '1' with '4101'
4099 -4100 4101 0
-4101 4100 0
-4101 -4099 0
c Var 'aux1023' direct represents '2' with '-4100'
4099 4101 -4100 0
c Encoding variable: aux1024 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4102'
c Var 'aux1024' direct represents '0' with '4102'
c Var 'aux1024' order represents '1' with '4103'
-4102 4103 0
c Var 'aux1024' direct represents '1' with '4104'
4102 -4103 4104 0
-4104 4103 0
-4104 -4102 0
c Var 'aux1024' direct represents '2' with '-4103'
4102 4104 -4103 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4105'
c Var 'aux1025' direct represents '0' with '4105'
c Var 'aux1025' order represents '1' with '4106'
-4105 4106 0
c Var 'aux1025' direct represents '1' with '4107'
4105 -4106 4107 0
-4107 4106 0
-4107 -4105 0
c Var 'aux1025' direct represents '2' with '-4106'
4105 4107 -4106 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4108'
c Var 'aux1026' direct represents '0' with '4108'
c Var 'aux1026' order represents '1' with '4109'
-4108 4109 0
c Var 'aux1026' direct represents '1' with '4110'
4108 -4109 4110 0
-4110 4109 0
-4110 -4108 0
c Var 'aux1026' direct represents '2' with '-4109'
4108 4110 -4109 0
c Encoding variable: aux1027 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux1026))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4111'
c Var 'aux1027' direct represents '0' with '4111'
c Var 'aux1027' order represents '1' with '4112'
-4111 4112 0
c Var 'aux1027' direct represents '1' with '4113'
4111 -4112 4113 0
-4113 4112 0
-4113 -4111 0
c Var 'aux1027' order represents '2' with '4114'
-4112 4114 0
c Var 'aux1027' direct represents '2' with '4115'
4112 -4114 4115 0
-4115 4114 0
-4115 -4112 0
c Var 'aux1027' direct represents '3' with '-4114'
4111 4113 4115 -4114 0
c Encoding variable: aux1028 with domain: int(0..4) (representing constraint (aux1023 + aux1025))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4116'
c Var 'aux1028' direct represents '0' with '4116'
c Var 'aux1028' order represents '1' with '4117'
-4116 4117 0
c Var 'aux1028' direct represents '1' with '4118'
4116 -4117 4118 0
-4118 4117 0
-4118 -4116 0
c Var 'aux1028' order represents '2' with '4119'
-4117 4119 0
c Var 'aux1028' direct represents '2' with '4120'
4117 -4119 4120 0
-4120 4119 0
-4120 -4117 0
c Var 'aux1028' order represents '3' with '4121'
-4119 4121 0
c Var 'aux1028' direct represents '3' with '4122'
4119 -4121 4122 0
-4122 4121 0
-4122 -4119 0
c Var 'aux1028' direct represents '4' with '-4121'
4116 4118 4120 4122 -4121 0
c Encoding variable: aux1029 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4123'
c Var 'aux1029' direct represents '0' with '4123'
c Var 'aux1029' order represents '1' with '4124'
-4123 4124 0
c Var 'aux1029' direct represents '1' with '4125'
4123 -4124 4125 0
-4125 4124 0
-4125 -4123 0
c Var 'aux1029' direct represents '2' with '-4124'
4123 4125 -4124 0
c Encoding variable: aux1030 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4126'
c Var 'aux1030' direct represents '0' with '4126'
c Var 'aux1030' order represents '1' with '4127'
-4126 4127 0
c Var 'aux1030' direct represents '1' with '4128'
4126 -4127 4128 0
-4128 4127 0
-4128 -4126 0
c Var 'aux1030' direct represents '2' with '-4127'
4126 4128 -4127 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4129'
c Var 'aux1031' direct represents '0' with '4129'
c Var 'aux1031' order represents '1' with '4130'
-4129 4130 0
c Var 'aux1031' direct represents '1' with '4131'
4129 -4130 4131 0
-4131 4130 0
-4131 -4129 0
c Var 'aux1031' direct represents '2' with '-4130'
4129 4131 -4130 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4132'
c Var 'aux1032' direct represents '0' with '4132'
c Var 'aux1032' order represents '1' with '4133'
-4132 4133 0
c Var 'aux1032' direct represents '1' with '4134'
4132 -4133 4134 0
-4134 4133 0
-4134 -4132 0
c Var 'aux1032' direct represents '2' with '-4133'
4132 4134 -4133 0
c Encoding variable: aux1033 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux1032))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4135'
c Var 'aux1033' direct represents '0' with '4135'
c Var 'aux1033' order represents '1' with '4136'
-4135 4136 0
c Var 'aux1033' direct represents '1' with '4137'
4135 -4136 4137 0
-4137 4136 0
-4137 -4135 0
c Var 'aux1033' order represents '2' with '4138'
-4136 4138 0
c Var 'aux1033' direct represents '2' with '4139'
4136 -4138 4139 0
-4139 4138 0
-4139 -4136 0
c Var 'aux1033' direct represents '3' with '-4138'
4135 4137 4139 -4138 0
c Encoding variable: aux1034 with domain: int(0..4) (representing constraint (aux1029 + aux1031))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4140'
c Var 'aux1034' direct represents '0' with '4140'
c Var 'aux1034' order represents '1' with '4141'
-4140 4141 0
c Var 'aux1034' direct represents '1' with '4142'
4140 -4141 4142 0
-4142 4141 0
-4142 -4140 0
c Var 'aux1034' order represents '2' with '4143'
-4141 4143 0
c Var 'aux1034' direct represents '2' with '4144'
4141 -4143 4144 0
-4144 4143 0
-4144 -4141 0
c Var 'aux1034' order represents '3' with '4145'
-4143 4145 0
c Var 'aux1034' direct represents '3' with '4146'
4143 -4145 4146 0
-4146 4145 0
-4146 -4143 0
c Var 'aux1034' direct represents '4' with '-4145'
4140 4142 4144 4146 -4145 0
c Encoding variable: aux1035 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4147'
c Var 'aux1035' direct represents '0' with '4147'
c Var 'aux1035' order represents '1' with '4148'
-4147 4148 0
c Var 'aux1035' direct represents '1' with '4149'
4147 -4148 4149 0
-4149 4148 0
-4149 -4147 0
c Var 'aux1035' direct represents '2' with '-4148'
4147 4149 -4148 0
c Encoding variable: aux1036 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4150'
c Var 'aux1036' direct represents '0' with '4150'
c Var 'aux1036' order represents '1' with '4151'
-4150 4151 0
c Var 'aux1036' direct represents '1' with '4152'
4150 -4151 4152 0
-4152 4151 0
-4152 -4150 0
c Var 'aux1036' direct represents '2' with '-4151'
4150 4152 -4151 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4153'
c Var 'aux1037' direct represents '0' with '4153'
c Var 'aux1037' order represents '1' with '4154'
-4153 4154 0
c Var 'aux1037' direct represents '1' with '4155'
4153 -4154 4155 0
-4155 4154 0
-4155 -4153 0
c Var 'aux1037' direct represents '2' with '-4154'
4153 4155 -4154 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4156'
c Var 'aux1038' direct represents '0' with '4156'
c Var 'aux1038' order represents '1' with '4157'
-4156 4157 0
c Var 'aux1038' direct represents '1' with '4158'
4156 -4157 4158 0
-4158 4157 0
-4158 -4156 0
c Var 'aux1038' direct represents '2' with '-4157'
4156 4158 -4157 0
c Encoding variable: aux1039 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1038))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4159'
c Var 'aux1039' direct represents '0' with '4159'
c Var 'aux1039' order represents '1' with '4160'
-4159 4160 0
c Var 'aux1039' direct represents '1' with '4161'
4159 -4160 4161 0
-4161 4160 0
-4161 -4159 0
c Var 'aux1039' order represents '2' with '4162'
-4160 4162 0
c Var 'aux1039' direct represents '2' with '4163'
4160 -4162 4163 0
-4163 4162 0
-4163 -4160 0
c Var 'aux1039' direct represents '3' with '-4162'
4159 4161 4163 -4162 0
c Encoding variable: aux1040 with domain: int(0..4) (representing constraint (aux1035 + aux1037))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4164'
c Var 'aux1040' direct represents '0' with '4164'
c Var 'aux1040' order represents '1' with '4165'
-4164 4165 0
c Var 'aux1040' direct represents '1' with '4166'
4164 -4165 4166 0
-4166 4165 0
-4166 -4164 0
c Var 'aux1040' order represents '2' with '4167'
-4165 4167 0
c Var 'aux1040' direct represents '2' with '4168'
4165 -4167 4168 0
-4168 4167 0
-4168 -4165 0
c Var 'aux1040' order represents '3' with '4169'
-4167 4169 0
c Var 'aux1040' direct represents '3' with '4170'
4167 -4169 4170 0
-4170 4169 0
-4170 -4167 0
c Var 'aux1040' direct represents '4' with '-4169'
4164 4166 4168 4170 -4169 0
c Encoding variable: aux1041 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4171'
c Var 'aux1041' direct represents '0' with '4171'
c Var 'aux1041' order represents '1' with '4172'
-4171 4172 0
c Var 'aux1041' direct represents '1' with '4173'
4171 -4172 4173 0
-4173 4172 0
-4173 -4171 0
c Var 'aux1041' direct represents '2' with '-4172'
4171 4173 -4172 0
c Encoding variable: aux1042 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4174'
c Var 'aux1042' direct represents '0' with '4174'
c Var 'aux1042' order represents '1' with '4175'
-4174 4175 0
c Var 'aux1042' direct represents '1' with '4176'
4174 -4175 4176 0
-4176 4175 0
-4176 -4174 0
c Var 'aux1042' direct represents '2' with '-4175'
4174 4176 -4175 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4177'
c Var 'aux1043' direct represents '0' with '4177'
c Var 'aux1043' order represents '1' with '4178'
-4177 4178 0
c Var 'aux1043' direct represents '1' with '4179'
4177 -4178 4179 0
-4179 4178 0
-4179 -4177 0
c Var 'aux1043' direct represents '2' with '-4178'
4177 4179 -4178 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4180'
c Var 'aux1044' direct represents '0' with '4180'
c Var 'aux1044' order represents '1' with '4181'
-4180 4181 0
c Var 'aux1044' direct represents '1' with '4182'
4180 -4181 4182 0
-4182 4181 0
-4182 -4180 0
c Var 'aux1044' direct represents '2' with '-4181'
4180 4182 -4181 0
c Encoding variable: aux1045 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1044))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4183'
c Var 'aux1045' direct represents '0' with '4183'
c Var 'aux1045' order represents '1' with '4184'
-4183 4184 0
c Var 'aux1045' direct represents '1' with '4185'
4183 -4184 4185 0
-4185 4184 0
-4185 -4183 0
c Var 'aux1045' order represents '2' with '4186'
-4184 4186 0
c Var 'aux1045' direct represents '2' with '4187'
4184 -4186 4187 0
-4187 4186 0
-4187 -4184 0
c Var 'aux1045' direct represents '3' with '-4186'
4183 4185 4187 -4186 0
c Encoding variable: aux1046 with domain: int(0..4) (representing constraint (aux1041 + aux1043))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4188'
c Var 'aux1046' direct represents '0' with '4188'
c Var 'aux1046' order represents '1' with '4189'
-4188 4189 0
c Var 'aux1046' direct represents '1' with '4190'
4188 -4189 4190 0
-4190 4189 0
-4190 -4188 0
c Var 'aux1046' order represents '2' with '4191'
-4189 4191 0
c Var 'aux1046' direct represents '2' with '4192'
4189 -4191 4192 0
-4192 4191 0
-4192 -4189 0
c Var 'aux1046' order represents '3' with '4193'
-4191 4193 0
c Var 'aux1046' direct represents '3' with '4194'
4191 -4193 4194 0
-4194 4193 0
-4194 -4191 0
c Var 'aux1046' direct represents '4' with '-4193'
4188 4190 4192 4194 -4193 0
c Encoding variable: aux1047 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4195'
c Var 'aux1047' direct represents '0' with '4195'
c Var 'aux1047' order represents '1' with '4196'
-4195 4196 0
c Var 'aux1047' direct represents '1' with '4197'
4195 -4196 4197 0
-4197 4196 0
-4197 -4195 0
c Var 'aux1047' direct represents '2' with '-4196'
4195 4197 -4196 0
c Encoding variable: aux1048 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4198'
c Var 'aux1048' direct represents '0' with '4198'
c Var 'aux1048' order represents '1' with '4199'
-4198 4199 0
c Var 'aux1048' direct represents '1' with '4200'
4198 -4199 4200 0
-4200 4199 0
-4200 -4198 0
c Var 'aux1048' direct represents '2' with '-4199'
4198 4200 -4199 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4201'
c Var 'aux1049' direct represents '0' with '4201'
c Var 'aux1049' order represents '1' with '4202'
-4201 4202 0
c Var 'aux1049' direct represents '1' with '4203'
4201 -4202 4203 0
-4203 4202 0
-4203 -4201 0
c Var 'aux1049' direct represents '2' with '-4202'
4201 4203 -4202 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4204'
c Var 'aux1050' direct represents '0' with '4204'
c Var 'aux1050' order represents '1' with '4205'
-4204 4205 0
c Var 'aux1050' direct represents '1' with '4206'
4204 -4205 4206 0
-4206 4205 0
-4206 -4204 0
c Var 'aux1050' direct represents '2' with '-4205'
4204 4206 -4205 0
c Encoding variable: aux1051 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1050))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4207'
c Var 'aux1051' direct represents '0' with '4207'
c Var 'aux1051' order represents '1' with '4208'
-4207 4208 0
c Var 'aux1051' direct represents '1' with '4209'
4207 -4208 4209 0
-4209 4208 0
-4209 -4207 0
c Var 'aux1051' order represents '2' with '4210'
-4208 4210 0
c Var 'aux1051' direct represents '2' with '4211'
4208 -4210 4211 0
-4211 4210 0
-4211 -4208 0
c Var 'aux1051' direct represents '3' with '-4210'
4207 4209 4211 -4210 0
c Encoding variable: aux1052 with domain: int(0..4) (representing constraint (aux1047 + aux1049))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4212'
c Var 'aux1052' direct represents '0' with '4212'
c Var 'aux1052' order represents '1' with '4213'
-4212 4213 0
c Var 'aux1052' direct represents '1' with '4214'
4212 -4213 4214 0
-4214 4213 0
-4214 -4212 0
c Var 'aux1052' order represents '2' with '4215'
-4213 4215 0
c Var 'aux1052' direct represents '2' with '4216'
4213 -4215 4216 0
-4216 4215 0
-4216 -4213 0
c Var 'aux1052' order represents '3' with '4217'
-4215 4217 0
c Var 'aux1052' direct represents '3' with '4218'
4215 -4217 4218 0
-4218 4217 0
-4218 -4215 0
c Var 'aux1052' direct represents '4' with '-4217'
4212 4214 4216 4218 -4217 0
c Encoding variable: aux1053 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4219'
c Var 'aux1053' direct represents '0' with '4219'
c Var 'aux1053' order represents '1' with '4220'
-4219 4220 0
c Var 'aux1053' direct represents '1' with '4221'
4219 -4220 4221 0
-4221 4220 0
-4221 -4219 0
c Var 'aux1053' direct represents '2' with '-4220'
4219 4221 -4220 0
c Encoding variable: aux1054 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4222'
c Var 'aux1054' direct represents '0' with '4222'
c Var 'aux1054' order represents '1' with '4223'
-4222 4223 0
c Var 'aux1054' direct represents '1' with '4224'
4222 -4223 4224 0
-4224 4223 0
-4224 -4222 0
c Var 'aux1054' direct represents '2' with '-4223'
4222 4224 -4223 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4225'
c Var 'aux1055' direct represents '0' with '4225'
c Var 'aux1055' order represents '1' with '4226'
-4225 4226 0
c Var 'aux1055' direct represents '1' with '4227'
4225 -4226 4227 0
-4227 4226 0
-4227 -4225 0
c Var 'aux1055' direct represents '2' with '-4226'
4225 4227 -4226 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4228'
c Var 'aux1056' direct represents '0' with '4228'
c Var 'aux1056' order represents '1' with '4229'
-4228 4229 0
c Var 'aux1056' direct represents '1' with '4230'
4228 -4229 4230 0
-4230 4229 0
-4230 -4228 0
c Var 'aux1056' direct represents '2' with '-4229'
4228 4230 -4229 0
c Encoding variable: aux1057 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1056))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4231'
c Var 'aux1057' direct represents '0' with '4231'
c Var 'aux1057' order represents '1' with '4232'
-4231 4232 0
c Var 'aux1057' direct represents '1' with '4233'
4231 -4232 4233 0
-4233 4232 0
-4233 -4231 0
c Var 'aux1057' order represents '2' with '4234'
-4232 4234 0
c Var 'aux1057' direct represents '2' with '4235'
4232 -4234 4235 0
-4235 4234 0
-4235 -4232 0
c Var 'aux1057' direct represents '3' with '-4234'
4231 4233 4235 -4234 0
c Encoding variable: aux1058 with domain: int(0..4) (representing constraint (aux1053 + aux1055))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4236'
c Var 'aux1058' direct represents '0' with '4236'
c Var 'aux1058' order represents '1' with '4237'
-4236 4237 0
c Var 'aux1058' direct represents '1' with '4238'
4236 -4237 4238 0
-4238 4237 0
-4238 -4236 0
c Var 'aux1058' order represents '2' with '4239'
-4237 4239 0
c Var 'aux1058' direct represents '2' with '4240'
4237 -4239 4240 0
-4240 4239 0
-4240 -4237 0
c Var 'aux1058' order represents '3' with '4241'
-4239 4241 0
c Var 'aux1058' direct represents '3' with '4242'
4239 -4241 4242 0
-4242 4241 0
-4242 -4239 0
c Var 'aux1058' direct represents '4' with '-4241'
4236 4238 4240 4242 -4241 0
c Encoding variable: aux1059 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4243'
c Var 'aux1059' direct represents '0' with '4243'
c Var 'aux1059' order represents '1' with '4244'
-4243 4244 0
c Var 'aux1059' direct represents '1' with '4245'
4243 -4244 4245 0
-4245 4244 0
-4245 -4243 0
c Var 'aux1059' direct represents '2' with '-4244'
4243 4245 -4244 0
c Encoding variable: aux1060 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4246'
c Var 'aux1060' direct represents '0' with '4246'
c Var 'aux1060' order represents '1' with '4247'
-4246 4247 0
c Var 'aux1060' direct represents '1' with '4248'
4246 -4247 4248 0
-4248 4247 0
-4248 -4246 0
c Var 'aux1060' direct represents '2' with '-4247'
4246 4248 -4247 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4249'
c Var 'aux1061' direct represents '0' with '4249'
c Var 'aux1061' order represents '1' with '4250'
-4249 4250 0
c Var 'aux1061' direct represents '1' with '4251'
4249 -4250 4251 0
-4251 4250 0
-4251 -4249 0
c Var 'aux1061' direct represents '2' with '-4250'
4249 4251 -4250 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4252'
c Var 'aux1062' direct represents '0' with '4252'
c Var 'aux1062' order represents '1' with '4253'
-4252 4253 0
c Var 'aux1062' direct represents '1' with '4254'
4252 -4253 4254 0
-4254 4253 0
-4254 -4252 0
c Var 'aux1062' direct represents '2' with '-4253'
4252 4254 -4253 0
c Encoding variable: aux1063 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1062))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4255'
c Var 'aux1063' direct represents '0' with '4255'
c Var 'aux1063' order represents '1' with '4256'
-4255 4256 0
c Var 'aux1063' direct represents '1' with '4257'
4255 -4256 4257 0
-4257 4256 0
-4257 -4255 0
c Var 'aux1063' order represents '2' with '4258'
-4256 4258 0
c Var 'aux1063' direct represents '2' with '4259'
4256 -4258 4259 0
-4259 4258 0
-4259 -4256 0
c Var 'aux1063' direct represents '3' with '-4258'
4255 4257 4259 -4258 0
c Encoding variable: aux1064 with domain: int(0..4) (representing constraint (aux1059 + aux1061))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4260'
c Var 'aux1064' direct represents '0' with '4260'
c Var 'aux1064' order represents '1' with '4261'
-4260 4261 0
c Var 'aux1064' direct represents '1' with '4262'
4260 -4261 4262 0
-4262 4261 0
-4262 -4260 0
c Var 'aux1064' order represents '2' with '4263'
-4261 4263 0
c Var 'aux1064' direct represents '2' with '4264'
4261 -4263 4264 0
-4264 4263 0
-4264 -4261 0
c Var 'aux1064' order represents '3' with '4265'
-4263 4265 0
c Var 'aux1064' direct represents '3' with '4266'
4263 -4265 4266 0
-4266 4265 0
-4266 -4263 0
c Var 'aux1064' direct represents '4' with '-4265'
4260 4262 4264 4266 -4265 0
c Encoding variable: aux1065 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4267'
c Var 'aux1065' direct represents '0' with '4267'
c Var 'aux1065' order represents '1' with '4268'
-4267 4268 0
c Var 'aux1065' direct represents '1' with '4269'
4267 -4268 4269 0
-4269 4268 0
-4269 -4267 0
c Var 'aux1065' direct represents '2' with '-4268'
4267 4269 -4268 0
c Encoding variable: aux1066 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4270'
c Var 'aux1066' direct represents '0' with '4270'
c Var 'aux1066' order represents '1' with '4271'
-4270 4271 0
c Var 'aux1066' direct represents '1' with '4272'
4270 -4271 4272 0
-4272 4271 0
-4272 -4270 0
c Var 'aux1066' direct represents '2' with '-4271'
4270 4272 -4271 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4273'
c Var 'aux1067' direct represents '0' with '4273'
c Var 'aux1067' order represents '1' with '4274'
-4273 4274 0
c Var 'aux1067' direct represents '1' with '4275'
4273 -4274 4275 0
-4275 4274 0
-4275 -4273 0
c Var 'aux1067' direct represents '2' with '-4274'
4273 4275 -4274 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4276'
c Var 'aux1068' direct represents '0' with '4276'
c Var 'aux1068' order represents '1' with '4277'
-4276 4277 0
c Var 'aux1068' direct represents '1' with '4278'
4276 -4277 4278 0
-4278 4277 0
-4278 -4276 0
c Var 'aux1068' direct represents '2' with '-4277'
4276 4278 -4277 0
c Encoding variable: aux1069 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1068))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4279'
c Var 'aux1069' direct represents '0' with '4279'
c Var 'aux1069' order represents '1' with '4280'
-4279 4280 0
c Var 'aux1069' direct represents '1' with '4281'
4279 -4280 4281 0
-4281 4280 0
-4281 -4279 0
c Var 'aux1069' order represents '2' with '4282'
-4280 4282 0
c Var 'aux1069' direct represents '2' with '4283'
4280 -4282 4283 0
-4283 4282 0
-4283 -4280 0
c Var 'aux1069' direct represents '3' with '-4282'
4279 4281 4283 -4282 0
c Encoding variable: aux1070 with domain: int(0..4) (representing constraint (aux1065 + aux1067))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4284'
c Var 'aux1070' direct represents '0' with '4284'
c Var 'aux1070' order represents '1' with '4285'
-4284 4285 0
c Var 'aux1070' direct represents '1' with '4286'
4284 -4285 4286 0
-4286 4285 0
-4286 -4284 0
c Var 'aux1070' order represents '2' with '4287'
-4285 4287 0
c Var 'aux1070' direct represents '2' with '4288'
4285 -4287 4288 0
-4288 4287 0
-4288 -4285 0
c Var 'aux1070' order represents '3' with '4289'
-4287 4289 0
c Var 'aux1070' direct represents '3' with '4290'
4287 -4289 4290 0
-4290 4289 0
-4290 -4287 0
c Var 'aux1070' direct represents '4' with '-4289'
4284 4286 4288 4290 -4289 0
c Encoding variable: aux1071 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4291'
c Var 'aux1071' direct represents '0' with '4291'
c Var 'aux1071' order represents '1' with '4292'
-4291 4292 0
c Var 'aux1071' direct represents '1' with '4293'
4291 -4292 4293 0
-4293 4292 0
-4293 -4291 0
c Var 'aux1071' direct represents '2' with '-4292'
4291 4293 -4292 0
c Encoding variable: aux1072 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4294'
c Var 'aux1072' direct represents '0' with '4294'
c Var 'aux1072' order represents '1' with '4295'
-4294 4295 0
c Var 'aux1072' direct represents '1' with '4296'
4294 -4295 4296 0
-4296 4295 0
-4296 -4294 0
c Var 'aux1072' direct represents '2' with '-4295'
4294 4296 -4295 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4297'
c Var 'aux1073' direct represents '0' with '4297'
c Var 'aux1073' order represents '1' with '4298'
-4297 4298 0
c Var 'aux1073' direct represents '1' with '4299'
4297 -4298 4299 0
-4299 4298 0
-4299 -4297 0
c Var 'aux1073' direct represents '2' with '-4298'
4297 4299 -4298 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4300'
c Var 'aux1074' direct represents '0' with '4300'
c Var 'aux1074' order represents '1' with '4301'
-4300 4301 0
c Var 'aux1074' direct represents '1' with '4302'
4300 -4301 4302 0
-4302 4301 0
-4302 -4300 0
c Var 'aux1074' direct represents '2' with '-4301'
4300 4302 -4301 0
c Encoding variable: aux1075 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1074))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4303'
c Var 'aux1075' direct represents '0' with '4303'
c Var 'aux1075' order represents '1' with '4304'
-4303 4304 0
c Var 'aux1075' direct represents '1' with '4305'
4303 -4304 4305 0
-4305 4304 0
-4305 -4303 0
c Var 'aux1075' order represents '2' with '4306'
-4304 4306 0
c Var 'aux1075' direct represents '2' with '4307'
4304 -4306 4307 0
-4307 4306 0
-4307 -4304 0
c Var 'aux1075' direct represents '3' with '-4306'
4303 4305 4307 -4306 0
c Encoding variable: aux1076 with domain: int(0..4) (representing constraint (aux1071 + aux1073))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4308'
c Var 'aux1076' direct represents '0' with '4308'
c Var 'aux1076' order represents '1' with '4309'
-4308 4309 0
c Var 'aux1076' direct represents '1' with '4310'
4308 -4309 4310 0
-4310 4309 0
-4310 -4308 0
c Var 'aux1076' order represents '2' with '4311'
-4309 4311 0
c Var 'aux1076' direct represents '2' with '4312'
4309 -4311 4312 0
-4312 4311 0
-4312 -4309 0
c Var 'aux1076' order represents '3' with '4313'
-4311 4313 0
c Var 'aux1076' direct represents '3' with '4314'
4311 -4313 4314 0
-4314 4313 0
-4314 -4311 0
c Var 'aux1076' direct represents '4' with '-4313'
4308 4310 4312 4314 -4313 0
c Encoding variable: aux1077 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4315'
c Var 'aux1077' direct represents '0' with '4315'
c Var 'aux1077' order represents '1' with '4316'
-4315 4316 0
c Var 'aux1077' direct represents '1' with '4317'
4315 -4316 4317 0
-4317 4316 0
-4317 -4315 0
c Var 'aux1077' direct represents '2' with '-4316'
4315 4317 -4316 0
c Encoding variable: aux1078 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4318'
c Var 'aux1078' direct represents '0' with '4318'
c Var 'aux1078' order represents '1' with '4319'
-4318 4319 0
c Var 'aux1078' direct represents '1' with '4320'
4318 -4319 4320 0
-4320 4319 0
-4320 -4318 0
c Var 'aux1078' direct represents '2' with '-4319'
4318 4320 -4319 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4321'
c Var 'aux1079' direct represents '0' with '4321'
c Var 'aux1079' order represents '1' with '4322'
-4321 4322 0
c Var 'aux1079' direct represents '1' with '4323'
4321 -4322 4323 0
-4323 4322 0
-4323 -4321 0
c Var 'aux1079' direct represents '2' with '-4322'
4321 4323 -4322 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4324'
c Var 'aux1080' direct represents '0' with '4324'
c Var 'aux1080' order represents '1' with '4325'
-4324 4325 0
c Var 'aux1080' direct represents '1' with '4326'
4324 -4325 4326 0
-4326 4325 0
-4326 -4324 0
c Var 'aux1080' direct represents '2' with '-4325'
4324 4326 -4325 0
c Encoding variable: aux1081 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1080))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4327'
c Var 'aux1081' direct represents '0' with '4327'
c Var 'aux1081' order represents '1' with '4328'
-4327 4328 0
c Var 'aux1081' direct represents '1' with '4329'
4327 -4328 4329 0
-4329 4328 0
-4329 -4327 0
c Var 'aux1081' order represents '2' with '4330'
-4328 4330 0
c Var 'aux1081' direct represents '2' with '4331'
4328 -4330 4331 0
-4331 4330 0
-4331 -4328 0
c Var 'aux1081' direct represents '3' with '-4330'
4327 4329 4331 -4330 0
c Encoding variable: aux1082 with domain: int(0..4) (representing constraint (aux1077 + aux1079))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4332'
c Var 'aux1082' direct represents '0' with '4332'
c Var 'aux1082' order represents '1' with '4333'
-4332 4333 0
c Var 'aux1082' direct represents '1' with '4334'
4332 -4333 4334 0
-4334 4333 0
-4334 -4332 0
c Var 'aux1082' order represents '2' with '4335'
-4333 4335 0
c Var 'aux1082' direct represents '2' with '4336'
4333 -4335 4336 0
-4336 4335 0
-4336 -4333 0
c Var 'aux1082' order represents '3' with '4337'
-4335 4337 0
c Var 'aux1082' direct represents '3' with '4338'
4335 -4337 4338 0
-4338 4337 0
-4338 -4335 0
c Var 'aux1082' direct represents '4' with '-4337'
4332 4334 4336 4338 -4337 0
c Encoding variable: aux1083 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4339'
c Var 'aux1083' direct represents '0' with '4339'
c Var 'aux1083' order represents '1' with '4340'
-4339 4340 0
c Var 'aux1083' direct represents '1' with '4341'
4339 -4340 4341 0
-4341 4340 0
-4341 -4339 0
c Var 'aux1083' direct represents '2' with '-4340'
4339 4341 -4340 0
c Encoding variable: aux1084 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4342'
c Var 'aux1084' direct represents '0' with '4342'
c Var 'aux1084' order represents '1' with '4343'
-4342 4343 0
c Var 'aux1084' direct represents '1' with '4344'
4342 -4343 4344 0
-4344 4343 0
-4344 -4342 0
c Var 'aux1084' direct represents '2' with '-4343'
4342 4344 -4343 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4345'
c Var 'aux1085' direct represents '0' with '4345'
c Var 'aux1085' order represents '1' with '4346'
-4345 4346 0
c Var 'aux1085' direct represents '1' with '4347'
4345 -4346 4347 0
-4347 4346 0
-4347 -4345 0
c Var 'aux1085' direct represents '2' with '-4346'
4345 4347 -4346 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4348'
c Var 'aux1086' direct represents '0' with '4348'
c Var 'aux1086' order represents '1' with '4349'
-4348 4349 0
c Var 'aux1086' direct represents '1' with '4350'
4348 -4349 4350 0
-4350 4349 0
-4350 -4348 0
c Var 'aux1086' direct represents '2' with '-4349'
4348 4350 -4349 0
c Encoding variable: aux1087 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1086))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4351'
c Var 'aux1087' direct represents '0' with '4351'
c Var 'aux1087' order represents '1' with '4352'
-4351 4352 0
c Var 'aux1087' direct represents '1' with '4353'
4351 -4352 4353 0
-4353 4352 0
-4353 -4351 0
c Var 'aux1087' order represents '2' with '4354'
-4352 4354 0
c Var 'aux1087' direct represents '2' with '4355'
4352 -4354 4355 0
-4355 4354 0
-4355 -4352 0
c Var 'aux1087' direct represents '3' with '-4354'
4351 4353 4355 -4354 0
c Encoding variable: aux1088 with domain: int(0..4) (representing constraint (aux1083 + aux1085))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4356'
c Var 'aux1088' direct represents '0' with '4356'
c Var 'aux1088' order represents '1' with '4357'
-4356 4357 0
c Var 'aux1088' direct represents '1' with '4358'
4356 -4357 4358 0
-4358 4357 0
-4358 -4356 0
c Var 'aux1088' order represents '2' with '4359'
-4357 4359 0
c Var 'aux1088' direct represents '2' with '4360'
4357 -4359 4360 0
-4360 4359 0
-4360 -4357 0
c Var 'aux1088' order represents '3' with '4361'
-4359 4361 0
c Var 'aux1088' direct represents '3' with '4362'
4359 -4361 4362 0
-4362 4361 0
-4362 -4359 0
c Var 'aux1088' direct represents '4' with '-4361'
4356 4358 4360 4362 -4361 0
c Encoding variable: aux1089 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4363'
c Var 'aux1089' direct represents '0' with '4363'
c Var 'aux1089' order represents '1' with '4364'
-4363 4364 0
c Var 'aux1089' direct represents '1' with '4365'
4363 -4364 4365 0
-4365 4364 0
-4365 -4363 0
c Var 'aux1089' direct represents '2' with '-4364'
4363 4365 -4364 0
c Encoding variable: aux1090 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4366'
c Var 'aux1090' direct represents '0' with '4366'
c Var 'aux1090' order represents '1' with '4367'
-4366 4367 0
c Var 'aux1090' direct represents '1' with '4368'
4366 -4367 4368 0
-4368 4367 0
-4368 -4366 0
c Var 'aux1090' direct represents '2' with '-4367'
4366 4368 -4367 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4369'
c Var 'aux1091' direct represents '0' with '4369'
c Var 'aux1091' order represents '1' with '4370'
-4369 4370 0
c Var 'aux1091' direct represents '1' with '4371'
4369 -4370 4371 0
-4371 4370 0
-4371 -4369 0
c Var 'aux1091' direct represents '2' with '-4370'
4369 4371 -4370 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4372'
c Var 'aux1092' direct represents '0' with '4372'
c Var 'aux1092' order represents '1' with '4373'
-4372 4373 0
c Var 'aux1092' direct represents '1' with '4374'
4372 -4373 4374 0
-4374 4373 0
-4374 -4372 0
c Var 'aux1092' direct represents '2' with '-4373'
4372 4374 -4373 0
c Encoding variable: aux1093 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1092))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4375'
c Var 'aux1093' direct represents '0' with '4375'
c Var 'aux1093' order represents '1' with '4376'
-4375 4376 0
c Var 'aux1093' direct represents '1' with '4377'
4375 -4376 4377 0
-4377 4376 0
-4377 -4375 0
c Var 'aux1093' order represents '2' with '4378'
-4376 4378 0
c Var 'aux1093' direct represents '2' with '4379'
4376 -4378 4379 0
-4379 4378 0
-4379 -4376 0
c Var 'aux1093' direct represents '3' with '-4378'
4375 4377 4379 -4378 0
c Encoding variable: aux1094 with domain: int(0..4) (representing constraint (aux1089 + aux1091))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4380'
c Var 'aux1094' direct represents '0' with '4380'
c Var 'aux1094' order represents '1' with '4381'
-4380 4381 0
c Var 'aux1094' direct represents '1' with '4382'
4380 -4381 4382 0
-4382 4381 0
-4382 -4380 0
c Var 'aux1094' order represents '2' with '4383'
-4381 4383 0
c Var 'aux1094' direct represents '2' with '4384'
4381 -4383 4384 0
-4384 4383 0
-4384 -4381 0
c Var 'aux1094' order represents '3' with '4385'
-4383 4385 0
c Var 'aux1094' direct represents '3' with '4386'
4383 -4385 4386 0
-4386 4385 0
-4386 -4383 0
c Var 'aux1094' direct represents '4' with '-4385'
4380 4382 4384 4386 -4385 0
c Encoding variable: aux1095 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4387'
c Var 'aux1095' direct represents '0' with '4387'
c Var 'aux1095' order represents '1' with '4388'
-4387 4388 0
c Var 'aux1095' direct represents '1' with '4389'
4387 -4388 4389 0
-4389 4388 0
-4389 -4387 0
c Var 'aux1095' direct represents '2' with '-4388'
4387 4389 -4388 0
c Encoding variable: aux1096 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4390'
c Var 'aux1096' direct represents '0' with '4390'
c Var 'aux1096' order represents '1' with '4391'
-4390 4391 0
c Var 'aux1096' direct represents '1' with '4392'
4390 -4391 4392 0
-4392 4391 0
-4392 -4390 0
c Var 'aux1096' direct represents '2' with '-4391'
4390 4392 -4391 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4393'
c Var 'aux1097' direct represents '0' with '4393'
c Var 'aux1097' order represents '1' with '4394'
-4393 4394 0
c Var 'aux1097' direct represents '1' with '4395'
4393 -4394 4395 0
-4395 4394 0
-4395 -4393 0
c Var 'aux1097' direct represents '2' with '-4394'
4393 4395 -4394 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4396'
c Var 'aux1098' direct represents '0' with '4396'
c Var 'aux1098' order represents '1' with '4397'
-4396 4397 0
c Var 'aux1098' direct represents '1' with '4398'
4396 -4397 4398 0
-4398 4397 0
-4398 -4396 0
c Var 'aux1098' direct represents '2' with '-4397'
4396 4398 -4397 0
c Encoding variable: aux1099 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1098))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4399'
c Var 'aux1099' direct represents '0' with '4399'
c Var 'aux1099' order represents '1' with '4400'
-4399 4400 0
c Var 'aux1099' direct represents '1' with '4401'
4399 -4400 4401 0
-4401 4400 0
-4401 -4399 0
c Var 'aux1099' order represents '2' with '4402'
-4400 4402 0
c Var 'aux1099' direct represents '2' with '4403'
4400 -4402 4403 0
-4403 4402 0
-4403 -4400 0
c Var 'aux1099' direct represents '3' with '-4402'
4399 4401 4403 -4402 0
c Encoding variable: aux1100 with domain: int(0..4) (representing constraint (aux1095 + aux1097))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4404'
c Var 'aux1100' direct represents '0' with '4404'
c Var 'aux1100' order represents '1' with '4405'
-4404 4405 0
c Var 'aux1100' direct represents '1' with '4406'
4404 -4405 4406 0
-4406 4405 0
-4406 -4404 0
c Var 'aux1100' order represents '2' with '4407'
-4405 4407 0
c Var 'aux1100' direct represents '2' with '4408'
4405 -4407 4408 0
-4408 4407 0
-4408 -4405 0
c Var 'aux1100' order represents '3' with '4409'
-4407 4409 0
c Var 'aux1100' direct represents '3' with '4410'
4407 -4409 4410 0
-4410 4409 0
-4410 -4407 0
c Var 'aux1100' direct represents '4' with '-4409'
4404 4406 4408 4410 -4409 0
c Encoding variable: aux1101 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4411'
c Var 'aux1101' direct represents '0' with '4411'
c Var 'aux1101' order represents '1' with '4412'
-4411 4412 0
c Var 'aux1101' direct represents '1' with '4413'
4411 -4412 4413 0
-4413 4412 0
-4413 -4411 0
c Var 'aux1101' direct represents '2' with '-4412'
4411 4413 -4412 0
c Encoding variable: aux1102 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4414'
c Var 'aux1102' direct represents '0' with '4414'
c Var 'aux1102' order represents '1' with '4415'
-4414 4415 0
c Var 'aux1102' direct represents '1' with '4416'
4414 -4415 4416 0
-4416 4415 0
-4416 -4414 0
c Var 'aux1102' direct represents '2' with '-4415'
4414 4416 -4415 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4417'
c Var 'aux1103' direct represents '0' with '4417'
c Var 'aux1103' order represents '1' with '4418'
-4417 4418 0
c Var 'aux1103' direct represents '1' with '4419'
4417 -4418 4419 0
-4419 4418 0
-4419 -4417 0
c Var 'aux1103' direct represents '2' with '-4418'
4417 4419 -4418 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4420'
c Var 'aux1104' direct represents '0' with '4420'
c Var 'aux1104' order represents '1' with '4421'
-4420 4421 0
c Var 'aux1104' direct represents '1' with '4422'
4420 -4421 4422 0
-4422 4421 0
-4422 -4420 0
c Var 'aux1104' direct represents '2' with '-4421'
4420 4422 -4421 0
c Encoding variable: aux1105 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1104))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4423'
c Var 'aux1105' direct represents '0' with '4423'
c Var 'aux1105' order represents '1' with '4424'
-4423 4424 0
c Var 'aux1105' direct represents '1' with '4425'
4423 -4424 4425 0
-4425 4424 0
-4425 -4423 0
c Var 'aux1105' order represents '2' with '4426'
-4424 4426 0
c Var 'aux1105' direct represents '2' with '4427'
4424 -4426 4427 0
-4427 4426 0
-4427 -4424 0
c Var 'aux1105' direct represents '3' with '-4426'
4423 4425 4427 -4426 0
c Encoding variable: aux1106 with domain: int(0..4) (representing constraint (aux1101 + aux1103))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4428'
c Var 'aux1106' direct represents '0' with '4428'
c Var 'aux1106' order represents '1' with '4429'
-4428 4429 0
c Var 'aux1106' direct represents '1' with '4430'
4428 -4429 4430 0
-4430 4429 0
-4430 -4428 0
c Var 'aux1106' order represents '2' with '4431'
-4429 4431 0
c Var 'aux1106' direct represents '2' with '4432'
4429 -4431 4432 0
-4432 4431 0
-4432 -4429 0
c Var 'aux1106' order represents '3' with '4433'
-4431 4433 0
c Var 'aux1106' direct represents '3' with '4434'
4431 -4433 4434 0
-4434 4433 0
-4434 -4431 0
c Var 'aux1106' direct represents '4' with '-4433'
4428 4430 4432 4434 -4433 0
c Encoding variable: aux1107 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4435'
c Var 'aux1107' direct represents '0' with '4435'
c Var 'aux1107' order represents '1' with '4436'
-4435 4436 0
c Var 'aux1107' direct represents '1' with '4437'
4435 -4436 4437 0
-4437 4436 0
-4437 -4435 0
c Var 'aux1107' direct represents '2' with '-4436'
4435 4437 -4436 0
c Encoding variable: aux1108 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4438'
c Var 'aux1108' direct represents '0' with '4438'
c Var 'aux1108' order represents '1' with '4439'
-4438 4439 0
c Var 'aux1108' direct represents '1' with '4440'
4438 -4439 4440 0
-4440 4439 0
-4440 -4438 0
c Var 'aux1108' direct represents '2' with '-4439'
4438 4440 -4439 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4441'
c Var 'aux1109' direct represents '0' with '4441'
c Var 'aux1109' order represents '1' with '4442'
-4441 4442 0
c Var 'aux1109' direct represents '1' with '4443'
4441 -4442 4443 0
-4443 4442 0
-4443 -4441 0
c Var 'aux1109' direct represents '2' with '-4442'
4441 4443 -4442 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4444'
c Var 'aux1110' direct represents '0' with '4444'
c Var 'aux1110' order represents '1' with '4445'
-4444 4445 0
c Var 'aux1110' direct represents '1' with '4446'
4444 -4445 4446 0
-4446 4445 0
-4446 -4444 0
c Var 'aux1110' direct represents '2' with '-4445'
4444 4446 -4445 0
c Encoding variable: aux1111 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1110))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4447'
c Var 'aux1111' direct represents '0' with '4447'
c Var 'aux1111' order represents '1' with '4448'
-4447 4448 0
c Var 'aux1111' direct represents '1' with '4449'
4447 -4448 4449 0
-4449 4448 0
-4449 -4447 0
c Var 'aux1111' order represents '2' with '4450'
-4448 4450 0
c Var 'aux1111' direct represents '2' with '4451'
4448 -4450 4451 0
-4451 4450 0
-4451 -4448 0
c Var 'aux1111' direct represents '3' with '-4450'
4447 4449 4451 -4450 0
c Encoding variable: aux1112 with domain: int(0..4) (representing constraint (aux1107 + aux1109))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4452'
c Var 'aux1112' direct represents '0' with '4452'
c Var 'aux1112' order represents '1' with '4453'
-4452 4453 0
c Var 'aux1112' direct represents '1' with '4454'
4452 -4453 4454 0
-4454 4453 0
-4454 -4452 0
c Var 'aux1112' order represents '2' with '4455'
-4453 4455 0
c Var 'aux1112' direct represents '2' with '4456'
4453 -4455 4456 0
-4456 4455 0
-4456 -4453 0
c Var 'aux1112' order represents '3' with '4457'
-4455 4457 0
c Var 'aux1112' direct represents '3' with '4458'
4455 -4457 4458 0
-4458 4457 0
-4458 -4455 0
c Var 'aux1112' direct represents '4' with '-4457'
4452 4454 4456 4458 -4457 0
c Encoding variable: aux1113 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4459'
c Var 'aux1113' direct represents '0' with '4459'
c Var 'aux1113' order represents '1' with '4460'
-4459 4460 0
c Var 'aux1113' direct represents '1' with '4461'
4459 -4460 4461 0
-4461 4460 0
-4461 -4459 0
c Var 'aux1113' direct represents '2' with '-4460'
4459 4461 -4460 0
c Encoding variable: aux1114 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4462'
c Var 'aux1114' direct represents '0' with '4462'
c Var 'aux1114' order represents '1' with '4463'
-4462 4463 0
c Var 'aux1114' direct represents '1' with '4464'
4462 -4463 4464 0
-4464 4463 0
-4464 -4462 0
c Var 'aux1114' direct represents '2' with '-4463'
4462 4464 -4463 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4465'
c Var 'aux1115' direct represents '0' with '4465'
c Var 'aux1115' order represents '1' with '4466'
-4465 4466 0
c Var 'aux1115' direct represents '1' with '4467'
4465 -4466 4467 0
-4467 4466 0
-4467 -4465 0
c Var 'aux1115' direct represents '2' with '-4466'
4465 4467 -4466 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4468'
c Var 'aux1116' direct represents '0' with '4468'
c Var 'aux1116' order represents '1' with '4469'
-4468 4469 0
c Var 'aux1116' direct represents '1' with '4470'
4468 -4469 4470 0
-4470 4469 0
-4470 -4468 0
c Var 'aux1116' direct represents '2' with '-4469'
4468 4470 -4469 0
c Encoding variable: aux1117 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1116))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4471'
c Var 'aux1117' direct represents '0' with '4471'
c Var 'aux1117' order represents '1' with '4472'
-4471 4472 0
c Var 'aux1117' direct represents '1' with '4473'
4471 -4472 4473 0
-4473 4472 0
-4473 -4471 0
c Var 'aux1117' order represents '2' with '4474'
-4472 4474 0
c Var 'aux1117' direct represents '2' with '4475'
4472 -4474 4475 0
-4475 4474 0
-4475 -4472 0
c Var 'aux1117' direct represents '3' with '-4474'
4471 4473 4475 -4474 0
c Encoding variable: aux1118 with domain: int(0..4) (representing constraint (aux1113 + aux1115))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4476'
c Var 'aux1118' direct represents '0' with '4476'
c Var 'aux1118' order represents '1' with '4477'
-4476 4477 0
c Var 'aux1118' direct represents '1' with '4478'
4476 -4477 4478 0
-4478 4477 0
-4478 -4476 0
c Var 'aux1118' order represents '2' with '4479'
-4477 4479 0
c Var 'aux1118' direct represents '2' with '4480'
4477 -4479 4480 0
-4480 4479 0
-4480 -4477 0
c Var 'aux1118' order represents '3' with '4481'
-4479 4481 0
c Var 'aux1118' direct represents '3' with '4482'
4479 -4481 4482 0
-4482 4481 0
-4482 -4479 0
c Var 'aux1118' direct represents '4' with '-4481'
4476 4478 4480 4482 -4481 0
c Encoding variable: aux1119 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4483'
c Var 'aux1119' direct represents '0' with '4483'
c Var 'aux1119' order represents '1' with '4484'
-4483 4484 0
c Var 'aux1119' direct represents '1' with '4485'
4483 -4484 4485 0
-4485 4484 0
-4485 -4483 0
c Var 'aux1119' direct represents '2' with '-4484'
4483 4485 -4484 0
c Encoding variable: aux1120 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4486'
c Var 'aux1120' direct represents '0' with '4486'
c Var 'aux1120' order represents '1' with '4487'
-4486 4487 0
c Var 'aux1120' direct represents '1' with '4488'
4486 -4487 4488 0
-4488 4487 0
-4488 -4486 0
c Var 'aux1120' direct represents '2' with '-4487'
4486 4488 -4487 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4489'
c Var 'aux1121' direct represents '0' with '4489'
c Var 'aux1121' order represents '1' with '4490'
-4489 4490 0
c Var 'aux1121' direct represents '1' with '4491'
4489 -4490 4491 0
-4491 4490 0
-4491 -4489 0
c Var 'aux1121' direct represents '2' with '-4490'
4489 4491 -4490 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4492'
c Var 'aux1122' direct represents '0' with '4492'
c Var 'aux1122' order represents '1' with '4493'
-4492 4493 0
c Var 'aux1122' direct represents '1' with '4494'
4492 -4493 4494 0
-4494 4493 0
-4494 -4492 0
c Var 'aux1122' direct represents '2' with '-4493'
4492 4494 -4493 0
c Encoding variable: aux1123 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1122))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4495'
c Var 'aux1123' direct represents '0' with '4495'
c Var 'aux1123' order represents '1' with '4496'
-4495 4496 0
c Var 'aux1123' direct represents '1' with '4497'
4495 -4496 4497 0
-4497 4496 0
-4497 -4495 0
c Var 'aux1123' order represents '2' with '4498'
-4496 4498 0
c Var 'aux1123' direct represents '2' with '4499'
4496 -4498 4499 0
-4499 4498 0
-4499 -4496 0
c Var 'aux1123' direct represents '3' with '-4498'
4495 4497 4499 -4498 0
c Encoding variable: aux1124 with domain: int(0..4) (representing constraint (aux1119 + aux1121))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4500'
c Var 'aux1124' direct represents '0' with '4500'
c Var 'aux1124' order represents '1' with '4501'
-4500 4501 0
c Var 'aux1124' direct represents '1' with '4502'
4500 -4501 4502 0
-4502 4501 0
-4502 -4500 0
c Var 'aux1124' order represents '2' with '4503'
-4501 4503 0
c Var 'aux1124' direct represents '2' with '4504'
4501 -4503 4504 0
-4504 4503 0
-4504 -4501 0
c Var 'aux1124' order represents '3' with '4505'
-4503 4505 0
c Var 'aux1124' direct represents '3' with '4506'
4503 -4505 4506 0
-4506 4505 0
-4506 -4503 0
c Var 'aux1124' direct represents '4' with '-4505'
4500 4502 4504 4506 -4505 0
c Encoding variable: aux1125 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4507'
c Var 'aux1125' direct represents '0' with '4507'
c Var 'aux1125' order represents '1' with '4508'
-4507 4508 0
c Var 'aux1125' direct represents '1' with '4509'
4507 -4508 4509 0
-4509 4508 0
-4509 -4507 0
c Var 'aux1125' direct represents '2' with '-4508'
4507 4509 -4508 0
c Encoding variable: aux1126 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4510'
c Var 'aux1126' direct represents '0' with '4510'
c Var 'aux1126' order represents '1' with '4511'
-4510 4511 0
c Var 'aux1126' direct represents '1' with '4512'
4510 -4511 4512 0
-4512 4511 0
-4512 -4510 0
c Var 'aux1126' direct represents '2' with '-4511'
4510 4512 -4511 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4513'
c Var 'aux1127' direct represents '0' with '4513'
c Var 'aux1127' order represents '1' with '4514'
-4513 4514 0
c Var 'aux1127' direct represents '1' with '4515'
4513 -4514 4515 0
-4515 4514 0
-4515 -4513 0
c Var 'aux1127' direct represents '2' with '-4514'
4513 4515 -4514 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4516'
c Var 'aux1128' direct represents '0' with '4516'
c Var 'aux1128' order represents '1' with '4517'
-4516 4517 0
c Var 'aux1128' direct represents '1' with '4518'
4516 -4517 4518 0
-4518 4517 0
-4518 -4516 0
c Var 'aux1128' direct represents '2' with '-4517'
4516 4518 -4517 0
c Encoding variable: aux1129 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1128))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4519'
c Var 'aux1129' direct represents '0' with '4519'
c Var 'aux1129' order represents '1' with '4520'
-4519 4520 0
c Var 'aux1129' direct represents '1' with '4521'
4519 -4520 4521 0
-4521 4520 0
-4521 -4519 0
c Var 'aux1129' order represents '2' with '4522'
-4520 4522 0
c Var 'aux1129' direct represents '2' with '4523'
4520 -4522 4523 0
-4523 4522 0
-4523 -4520 0
c Var 'aux1129' direct represents '3' with '-4522'
4519 4521 4523 -4522 0
c Encoding variable: aux1130 with domain: int(0..4) (representing constraint (aux1125 + aux1127))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4524'
c Var 'aux1130' direct represents '0' with '4524'
c Var 'aux1130' order represents '1' with '4525'
-4524 4525 0
c Var 'aux1130' direct represents '1' with '4526'
4524 -4525 4526 0
-4526 4525 0
-4526 -4524 0
c Var 'aux1130' order represents '2' with '4527'
-4525 4527 0
c Var 'aux1130' direct represents '2' with '4528'
4525 -4527 4528 0
-4528 4527 0
-4528 -4525 0
c Var 'aux1130' order represents '3' with '4529'
-4527 4529 0
c Var 'aux1130' direct represents '3' with '4530'
4527 -4529 4530 0
-4530 4529 0
-4530 -4527 0
c Var 'aux1130' direct represents '4' with '-4529'
4524 4526 4528 4530 -4529 0
c Encoding variable: aux1131 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4531'
c Var 'aux1131' direct represents '0' with '4531'
c Var 'aux1131' order represents '1' with '4532'
-4531 4532 0
c Var 'aux1131' direct represents '1' with '4533'
4531 -4532 4533 0
-4533 4532 0
-4533 -4531 0
c Var 'aux1131' direct represents '2' with '-4532'
4531 4533 -4532 0
c Encoding variable: aux1132 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4534'
c Var 'aux1132' direct represents '0' with '4534'
c Var 'aux1132' order represents '1' with '4535'
-4534 4535 0
c Var 'aux1132' direct represents '1' with '4536'
4534 -4535 4536 0
-4536 4535 0
-4536 -4534 0
c Var 'aux1132' direct represents '2' with '-4535'
4534 4536 -4535 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4537'
c Var 'aux1133' direct represents '0' with '4537'
c Var 'aux1133' order represents '1' with '4538'
-4537 4538 0
c Var 'aux1133' direct represents '1' with '4539'
4537 -4538 4539 0
-4539 4538 0
-4539 -4537 0
c Var 'aux1133' direct represents '2' with '-4538'
4537 4539 -4538 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4540'
c Var 'aux1134' direct represents '0' with '4540'
c Var 'aux1134' order represents '1' with '4541'
-4540 4541 0
c Var 'aux1134' direct represents '1' with '4542'
4540 -4541 4542 0
-4542 4541 0
-4542 -4540 0
c Var 'aux1134' direct represents '2' with '-4541'
4540 4542 -4541 0
c Encoding variable: aux1135 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1134))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4543'
c Var 'aux1135' direct represents '0' with '4543'
c Var 'aux1135' order represents '1' with '4544'
-4543 4544 0
c Var 'aux1135' direct represents '1' with '4545'
4543 -4544 4545 0
-4545 4544 0
-4545 -4543 0
c Var 'aux1135' order represents '2' with '4546'
-4544 4546 0
c Var 'aux1135' direct represents '2' with '4547'
4544 -4546 4547 0
-4547 4546 0
-4547 -4544 0
c Var 'aux1135' direct represents '3' with '-4546'
4543 4545 4547 -4546 0
c Encoding variable: aux1136 with domain: int(0..4) (representing constraint (aux1131 + aux1133))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4548'
c Var 'aux1136' direct represents '0' with '4548'
c Var 'aux1136' order represents '1' with '4549'
-4548 4549 0
c Var 'aux1136' direct represents '1' with '4550'
4548 -4549 4550 0
-4550 4549 0
-4550 -4548 0
c Var 'aux1136' order represents '2' with '4551'
-4549 4551 0
c Var 'aux1136' direct represents '2' with '4552'
4549 -4551 4552 0
-4552 4551 0
-4552 -4549 0
c Var 'aux1136' order represents '3' with '4553'
-4551 4553 0
c Var 'aux1136' direct represents '3' with '4554'
4551 -4553 4554 0
-4554 4553 0
-4554 -4551 0
c Var 'aux1136' direct represents '4' with '-4553'
4548 4550 4552 4554 -4553 0
c Encoding variable: aux1137 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4555'
c Var 'aux1137' direct represents '0' with '4555'
c Var 'aux1137' order represents '1' with '4556'
-4555 4556 0
c Var 'aux1137' direct represents '1' with '4557'
4555 -4556 4557 0
-4557 4556 0
-4557 -4555 0
c Var 'aux1137' direct represents '2' with '-4556'
4555 4557 -4556 0
c Encoding variable: aux1138 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4558'
c Var 'aux1138' direct represents '0' with '4558'
c Var 'aux1138' order represents '1' with '4559'
-4558 4559 0
c Var 'aux1138' direct represents '1' with '4560'
4558 -4559 4560 0
-4560 4559 0
-4560 -4558 0
c Var 'aux1138' direct represents '2' with '-4559'
4558 4560 -4559 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4561'
c Var 'aux1139' direct represents '0' with '4561'
c Var 'aux1139' order represents '1' with '4562'
-4561 4562 0
c Var 'aux1139' direct represents '1' with '4563'
4561 -4562 4563 0
-4563 4562 0
-4563 -4561 0
c Var 'aux1139' direct represents '2' with '-4562'
4561 4563 -4562 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4564'
c Var 'aux1140' direct represents '0' with '4564'
c Var 'aux1140' order represents '1' with '4565'
-4564 4565 0
c Var 'aux1140' direct represents '1' with '4566'
4564 -4565 4566 0
-4566 4565 0
-4566 -4564 0
c Var 'aux1140' direct represents '2' with '-4565'
4564 4566 -4565 0
c Encoding variable: aux1141 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1140))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4567'
c Var 'aux1141' direct represents '0' with '4567'
c Var 'aux1141' order represents '1' with '4568'
-4567 4568 0
c Var 'aux1141' direct represents '1' with '4569'
4567 -4568 4569 0
-4569 4568 0
-4569 -4567 0
c Var 'aux1141' order represents '2' with '4570'
-4568 4570 0
c Var 'aux1141' direct represents '2' with '4571'
4568 -4570 4571 0
-4571 4570 0
-4571 -4568 0
c Var 'aux1141' direct represents '3' with '-4570'
4567 4569 4571 -4570 0
c Encoding variable: aux1142 with domain: int(0..4) (representing constraint (aux1137 + aux1139))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4572'
c Var 'aux1142' direct represents '0' with '4572'
c Var 'aux1142' order represents '1' with '4573'
-4572 4573 0
c Var 'aux1142' direct represents '1' with '4574'
4572 -4573 4574 0
-4574 4573 0
-4574 -4572 0
c Var 'aux1142' order represents '2' with '4575'
-4573 4575 0
c Var 'aux1142' direct represents '2' with '4576'
4573 -4575 4576 0
-4576 4575 0
-4576 -4573 0
c Var 'aux1142' order represents '3' with '4577'
-4575 4577 0
c Var 'aux1142' direct represents '3' with '4578'
4575 -4577 4578 0
-4578 4577 0
-4578 -4575 0
c Var 'aux1142' direct represents '4' with '-4577'
4572 4574 4576 4578 -4577 0
c Encoding variable: aux1143 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4579'
c Var 'aux1143' direct represents '0' with '4579'
c Var 'aux1143' order represents '1' with '4580'
-4579 4580 0
c Var 'aux1143' direct represents '1' with '4581'
4579 -4580 4581 0
-4581 4580 0
-4581 -4579 0
c Var 'aux1143' direct represents '2' with '-4580'
4579 4581 -4580 0
c Encoding variable: aux1144 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4582'
c Var 'aux1144' direct represents '0' with '4582'
c Var 'aux1144' order represents '1' with '4583'
-4582 4583 0
c Var 'aux1144' direct represents '1' with '4584'
4582 -4583 4584 0
-4584 4583 0
-4584 -4582 0
c Var 'aux1144' direct represents '2' with '-4583'
4582 4584 -4583 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4585'
c Var 'aux1145' direct represents '0' with '4585'
c Var 'aux1145' order represents '1' with '4586'
-4585 4586 0
c Var 'aux1145' direct represents '1' with '4587'
4585 -4586 4587 0
-4587 4586 0
-4587 -4585 0
c Var 'aux1145' direct represents '2' with '-4586'
4585 4587 -4586 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4588'
c Var 'aux1146' direct represents '0' with '4588'
c Var 'aux1146' order represents '1' with '4589'
-4588 4589 0
c Var 'aux1146' direct represents '1' with '4590'
4588 -4589 4590 0
-4590 4589 0
-4590 -4588 0
c Var 'aux1146' direct represents '2' with '-4589'
4588 4590 -4589 0
c Encoding variable: aux1147 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1146))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4591'
c Var 'aux1147' direct represents '0' with '4591'
c Var 'aux1147' order represents '1' with '4592'
-4591 4592 0
c Var 'aux1147' direct represents '1' with '4593'
4591 -4592 4593 0
-4593 4592 0
-4593 -4591 0
c Var 'aux1147' order represents '2' with '4594'
-4592 4594 0
c Var 'aux1147' direct represents '2' with '4595'
4592 -4594 4595 0
-4595 4594 0
-4595 -4592 0
c Var 'aux1147' direct represents '3' with '-4594'
4591 4593 4595 -4594 0
c Encoding variable: aux1148 with domain: int(0..4) (representing constraint (aux1143 + aux1145))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4596'
c Var 'aux1148' direct represents '0' with '4596'
c Var 'aux1148' order represents '1' with '4597'
-4596 4597 0
c Var 'aux1148' direct represents '1' with '4598'
4596 -4597 4598 0
-4598 4597 0
-4598 -4596 0
c Var 'aux1148' order represents '2' with '4599'
-4597 4599 0
c Var 'aux1148' direct represents '2' with '4600'
4597 -4599 4600 0
-4600 4599 0
-4600 -4597 0
c Var 'aux1148' order represents '3' with '4601'
-4599 4601 0
c Var 'aux1148' direct represents '3' with '4602'
4599 -4601 4602 0
-4602 4601 0
-4602 -4599 0
c Var 'aux1148' direct represents '4' with '-4601'
4596 4598 4600 4602 -4601 0
c Encoding variable: aux1149 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4603'
c Var 'aux1149' direct represents '0' with '4603'
c Var 'aux1149' order represents '1' with '4604'
-4603 4604 0
c Var 'aux1149' direct represents '1' with '4605'
4603 -4604 4605 0
-4605 4604 0
-4605 -4603 0
c Var 'aux1149' direct represents '2' with '-4604'
4603 4605 -4604 0
c Encoding variable: aux1150 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4606'
c Var 'aux1150' direct represents '0' with '4606'
c Var 'aux1150' order represents '1' with '4607'
-4606 4607 0
c Var 'aux1150' direct represents '1' with '4608'
4606 -4607 4608 0
-4608 4607 0
-4608 -4606 0
c Var 'aux1150' direct represents '2' with '-4607'
4606 4608 -4607 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4609'
c Var 'aux1151' direct represents '0' with '4609'
c Var 'aux1151' order represents '1' with '4610'
-4609 4610 0
c Var 'aux1151' direct represents '1' with '4611'
4609 -4610 4611 0
-4611 4610 0
-4611 -4609 0
c Var 'aux1151' direct represents '2' with '-4610'
4609 4611 -4610 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4612'
c Var 'aux1152' direct represents '0' with '4612'
c Var 'aux1152' order represents '1' with '4613'
-4612 4613 0
c Var 'aux1152' direct represents '1' with '4614'
4612 -4613 4614 0
-4614 4613 0
-4614 -4612 0
c Var 'aux1152' direct represents '2' with '-4613'
4612 4614 -4613 0
c Encoding variable: aux1153 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1152))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4615'
c Var 'aux1153' direct represents '0' with '4615'
c Var 'aux1153' order represents '1' with '4616'
-4615 4616 0
c Var 'aux1153' direct represents '1' with '4617'
4615 -4616 4617 0
-4617 4616 0
-4617 -4615 0
c Var 'aux1153' order represents '2' with '4618'
-4616 4618 0
c Var 'aux1153' direct represents '2' with '4619'
4616 -4618 4619 0
-4619 4618 0
-4619 -4616 0
c Var 'aux1153' direct represents '3' with '-4618'
4615 4617 4619 -4618 0
c Encoding variable: aux1154 with domain: int(0..4) (representing constraint (aux1149 + aux1151))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4620'
c Var 'aux1154' direct represents '0' with '4620'
c Var 'aux1154' order represents '1' with '4621'
-4620 4621 0
c Var 'aux1154' direct represents '1' with '4622'
4620 -4621 4622 0
-4622 4621 0
-4622 -4620 0
c Var 'aux1154' order represents '2' with '4623'
-4621 4623 0
c Var 'aux1154' direct represents '2' with '4624'
4621 -4623 4624 0
-4624 4623 0
-4624 -4621 0
c Var 'aux1154' order represents '3' with '4625'
-4623 4625 0
c Var 'aux1154' direct represents '3' with '4626'
4623 -4625 4626 0
-4626 4625 0
-4626 -4623 0
c Var 'aux1154' direct represents '4' with '-4625'
4620 4622 4624 4626 -4625 0
c Encoding variable: aux1155 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4627'
c Var 'aux1155' direct represents '0' with '4627'
c Var 'aux1155' order represents '1' with '4628'
-4627 4628 0
c Var 'aux1155' direct represents '1' with '4629'
4627 -4628 4629 0
-4629 4628 0
-4629 -4627 0
c Var 'aux1155' direct represents '2' with '-4628'
4627 4629 -4628 0
c Encoding variable: aux1156 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4630'
c Var 'aux1156' direct represents '0' with '4630'
c Var 'aux1156' order represents '1' with '4631'
-4630 4631 0
c Var 'aux1156' direct represents '1' with '4632'
4630 -4631 4632 0
-4632 4631 0
-4632 -4630 0
c Var 'aux1156' direct represents '2' with '-4631'
4630 4632 -4631 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4633'
c Var 'aux1157' direct represents '0' with '4633'
c Var 'aux1157' order represents '1' with '4634'
-4633 4634 0
c Var 'aux1157' direct represents '1' with '4635'
4633 -4634 4635 0
-4635 4634 0
-4635 -4633 0
c Var 'aux1157' direct represents '2' with '-4634'
4633 4635 -4634 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4636'
c Var 'aux1158' direct represents '0' with '4636'
c Var 'aux1158' order represents '1' with '4637'
-4636 4637 0
c Var 'aux1158' direct represents '1' with '4638'
4636 -4637 4638 0
-4638 4637 0
-4638 -4636 0
c Var 'aux1158' direct represents '2' with '-4637'
4636 4638 -4637 0
c Encoding variable: aux1159 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1158))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4639'
c Var 'aux1159' direct represents '0' with '4639'
c Var 'aux1159' order represents '1' with '4640'
-4639 4640 0
c Var 'aux1159' direct represents '1' with '4641'
4639 -4640 4641 0
-4641 4640 0
-4641 -4639 0
c Var 'aux1159' order represents '2' with '4642'
-4640 4642 0
c Var 'aux1159' direct represents '2' with '4643'
4640 -4642 4643 0
-4643 4642 0
-4643 -4640 0
c Var 'aux1159' direct represents '3' with '-4642'
4639 4641 4643 -4642 0
c Encoding variable: aux1160 with domain: int(0..4) (representing constraint (aux1155 + aux1157))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4644'
c Var 'aux1160' direct represents '0' with '4644'
c Var 'aux1160' order represents '1' with '4645'
-4644 4645 0
c Var 'aux1160' direct represents '1' with '4646'
4644 -4645 4646 0
-4646 4645 0
-4646 -4644 0
c Var 'aux1160' order represents '2' with '4647'
-4645 4647 0
c Var 'aux1160' direct represents '2' with '4648'
4645 -4647 4648 0
-4648 4647 0
-4648 -4645 0
c Var 'aux1160' order represents '3' with '4649'
-4647 4649 0
c Var 'aux1160' direct represents '3' with '4650'
4647 -4649 4650 0
-4650 4649 0
-4650 -4647 0
c Var 'aux1160' direct represents '4' with '-4649'
4644 4646 4648 4650 -4649 0
c Encoding variable: aux1161 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4651'
c Var 'aux1161' direct represents '0' with '4651'
c Var 'aux1161' order represents '1' with '4652'
-4651 4652 0
c Var 'aux1161' direct represents '1' with '4653'
4651 -4652 4653 0
-4653 4652 0
-4653 -4651 0
c Var 'aux1161' direct represents '2' with '-4652'
4651 4653 -4652 0
c Encoding variable: aux1162 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4654'
c Var 'aux1162' direct represents '0' with '4654'
c Var 'aux1162' order represents '1' with '4655'
-4654 4655 0
c Var 'aux1162' direct represents '1' with '4656'
4654 -4655 4656 0
-4656 4655 0
-4656 -4654 0
c Var 'aux1162' direct represents '2' with '-4655'
4654 4656 -4655 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4657'
c Var 'aux1163' direct represents '0' with '4657'
c Var 'aux1163' order represents '1' with '4658'
-4657 4658 0
c Var 'aux1163' direct represents '1' with '4659'
4657 -4658 4659 0
-4659 4658 0
-4659 -4657 0
c Var 'aux1163' direct represents '2' with '-4658'
4657 4659 -4658 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4660'
c Var 'aux1164' direct represents '0' with '4660'
c Var 'aux1164' order represents '1' with '4661'
-4660 4661 0
c Var 'aux1164' direct represents '1' with '4662'
4660 -4661 4662 0
-4662 4661 0
-4662 -4660 0
c Var 'aux1164' direct represents '2' with '-4661'
4660 4662 -4661 0
c Encoding variable: aux1165 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1164))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4663'
c Var 'aux1165' direct represents '0' with '4663'
c Var 'aux1165' order represents '1' with '4664'
-4663 4664 0
c Var 'aux1165' direct represents '1' with '4665'
4663 -4664 4665 0
-4665 4664 0
-4665 -4663 0
c Var 'aux1165' order represents '2' with '4666'
-4664 4666 0
c Var 'aux1165' direct represents '2' with '4667'
4664 -4666 4667 0
-4667 4666 0
-4667 -4664 0
c Var 'aux1165' direct represents '3' with '-4666'
4663 4665 4667 -4666 0
c Encoding variable: aux1166 with domain: int(0..4) (representing constraint (aux1161 + aux1163))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4668'
c Var 'aux1166' direct represents '0' with '4668'
c Var 'aux1166' order represents '1' with '4669'
-4668 4669 0
c Var 'aux1166' direct represents '1' with '4670'
4668 -4669 4670 0
-4670 4669 0
-4670 -4668 0
c Var 'aux1166' order represents '2' with '4671'
-4669 4671 0
c Var 'aux1166' direct represents '2' with '4672'
4669 -4671 4672 0
-4672 4671 0
-4672 -4669 0
c Var 'aux1166' order represents '3' with '4673'
-4671 4673 0
c Var 'aux1166' direct represents '3' with '4674'
4671 -4673 4674 0
-4674 4673 0
-4674 -4671 0
c Var 'aux1166' direct represents '4' with '-4673'
4668 4670 4672 4674 -4673 0
c Encoding variable: aux1167 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4675'
c Var 'aux1167' direct represents '0' with '4675'
c Var 'aux1167' order represents '1' with '4676'
-4675 4676 0
c Var 'aux1167' direct represents '1' with '4677'
4675 -4676 4677 0
-4677 4676 0
-4677 -4675 0
c Var 'aux1167' direct represents '2' with '-4676'
4675 4677 -4676 0
c Encoding variable: aux1168 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4678'
c Var 'aux1168' direct represents '0' with '4678'
c Var 'aux1168' order represents '1' with '4679'
-4678 4679 0
c Var 'aux1168' direct represents '1' with '4680'
4678 -4679 4680 0
-4680 4679 0
-4680 -4678 0
c Var 'aux1168' direct represents '2' with '-4679'
4678 4680 -4679 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4681'
c Var 'aux1169' direct represents '0' with '4681'
c Var 'aux1169' order represents '1' with '4682'
-4681 4682 0
c Var 'aux1169' direct represents '1' with '4683'
4681 -4682 4683 0
-4683 4682 0
-4683 -4681 0
c Var 'aux1169' direct represents '2' with '-4682'
4681 4683 -4682 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4684'
c Var 'aux1170' direct represents '0' with '4684'
c Var 'aux1170' order represents '1' with '4685'
-4684 4685 0
c Var 'aux1170' direct represents '1' with '4686'
4684 -4685 4686 0
-4686 4685 0
-4686 -4684 0
c Var 'aux1170' direct represents '2' with '-4685'
4684 4686 -4685 0
c Encoding variable: aux1171 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1170))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4687'
c Var 'aux1171' direct represents '0' with '4687'
c Var 'aux1171' order represents '1' with '4688'
-4687 4688 0
c Var 'aux1171' direct represents '1' with '4689'
4687 -4688 4689 0
-4689 4688 0
-4689 -4687 0
c Var 'aux1171' order represents '2' with '4690'
-4688 4690 0
c Var 'aux1171' direct represents '2' with '4691'
4688 -4690 4691 0
-4691 4690 0
-4691 -4688 0
c Var 'aux1171' direct represents '3' with '-4690'
4687 4689 4691 -4690 0
c Encoding variable: aux1172 with domain: int(0..4) (representing constraint (aux1167 + aux1169))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4692'
c Var 'aux1172' direct represents '0' with '4692'
c Var 'aux1172' order represents '1' with '4693'
-4692 4693 0
c Var 'aux1172' direct represents '1' with '4694'
4692 -4693 4694 0
-4694 4693 0
-4694 -4692 0
c Var 'aux1172' order represents '2' with '4695'
-4693 4695 0
c Var 'aux1172' direct represents '2' with '4696'
4693 -4695 4696 0
-4696 4695 0
-4696 -4693 0
c Var 'aux1172' order represents '3' with '4697'
-4695 4697 0
c Var 'aux1172' direct represents '3' with '4698'
4695 -4697 4698 0
-4698 4697 0
-4698 -4695 0
c Var 'aux1172' direct represents '4' with '-4697'
4692 4694 4696 4698 -4697 0
c Encoding variable: aux1173 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4699'
c Var 'aux1173' direct represents '0' with '4699'
c Var 'aux1173' order represents '1' with '4700'
-4699 4700 0
c Var 'aux1173' direct represents '1' with '4701'
4699 -4700 4701 0
-4701 4700 0
-4701 -4699 0
c Var 'aux1173' direct represents '2' with '-4700'
4699 4701 -4700 0
c Encoding variable: aux1174 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4702'
c Var 'aux1174' direct represents '0' with '4702'
c Var 'aux1174' order represents '1' with '4703'
-4702 4703 0
c Var 'aux1174' direct represents '1' with '4704'
4702 -4703 4704 0
-4704 4703 0
-4704 -4702 0
c Var 'aux1174' direct represents '2' with '-4703'
4702 4704 -4703 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4705'
c Var 'aux1175' direct represents '0' with '4705'
c Var 'aux1175' order represents '1' with '4706'
-4705 4706 0
c Var 'aux1175' direct represents '1' with '4707'
4705 -4706 4707 0
-4707 4706 0
-4707 -4705 0
c Var 'aux1175' direct represents '2' with '-4706'
4705 4707 -4706 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4708'
c Var 'aux1176' direct represents '0' with '4708'
c Var 'aux1176' order represents '1' with '4709'
-4708 4709 0
c Var 'aux1176' direct represents '1' with '4710'
4708 -4709 4710 0
-4710 4709 0
-4710 -4708 0
c Var 'aux1176' direct represents '2' with '-4709'
4708 4710 -4709 0
c Encoding variable: aux1177 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1176))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4711'
c Var 'aux1177' direct represents '0' with '4711'
c Var 'aux1177' order represents '1' with '4712'
-4711 4712 0
c Var 'aux1177' direct represents '1' with '4713'
4711 -4712 4713 0
-4713 4712 0
-4713 -4711 0
c Var 'aux1177' order represents '2' with '4714'
-4712 4714 0
c Var 'aux1177' direct represents '2' with '4715'
4712 -4714 4715 0
-4715 4714 0
-4715 -4712 0
c Var 'aux1177' direct represents '3' with '-4714'
4711 4713 4715 -4714 0
c Encoding variable: aux1178 with domain: int(0..4) (representing constraint (aux1173 + aux1175))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4716'
c Var 'aux1178' direct represents '0' with '4716'
c Var 'aux1178' order represents '1' with '4717'
-4716 4717 0
c Var 'aux1178' direct represents '1' with '4718'
4716 -4717 4718 0
-4718 4717 0
-4718 -4716 0
c Var 'aux1178' order represents '2' with '4719'
-4717 4719 0
c Var 'aux1178' direct represents '2' with '4720'
4717 -4719 4720 0
-4720 4719 0
-4720 -4717 0
c Var 'aux1178' order represents '3' with '4721'
-4719 4721 0
c Var 'aux1178' direct represents '3' with '4722'
4719 -4721 4722 0
-4722 4721 0
-4722 -4719 0
c Var 'aux1178' direct represents '4' with '-4721'
4716 4718 4720 4722 -4721 0
c Encoding variable: aux1179 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4723'
c Var 'aux1179' direct represents '0' with '4723'
c Var 'aux1179' order represents '1' with '4724'
-4723 4724 0
c Var 'aux1179' direct represents '1' with '4725'
4723 -4724 4725 0
-4725 4724 0
-4725 -4723 0
c Var 'aux1179' direct represents '2' with '-4724'
4723 4725 -4724 0
c Encoding variable: aux1180 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4726'
c Var 'aux1180' direct represents '0' with '4726'
c Var 'aux1180' order represents '1' with '4727'
-4726 4727 0
c Var 'aux1180' direct represents '1' with '4728'
4726 -4727 4728 0
-4728 4727 0
-4728 -4726 0
c Var 'aux1180' direct represents '2' with '-4727'
4726 4728 -4727 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '4729'
c Var 'aux1181' direct represents '0' with '4729'
c Var 'aux1181' order represents '1' with '4730'
-4729 4730 0
c Var 'aux1181' direct represents '1' with '4731'
4729 -4730 4731 0
-4731 4730 0
-4731 -4729 0
c Var 'aux1181' direct represents '2' with '-4730'
4729 4731 -4730 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '4732'
c Var 'aux1182' direct represents '0' with '4732'
c Var 'aux1182' order represents '1' with '4733'
-4732 4733 0
c Var 'aux1182' direct represents '1' with '4734'
4732 -4733 4734 0
-4734 4733 0
-4734 -4732 0
c Var 'aux1182' direct represents '2' with '-4733'
4732 4734 -4733 0
c Encoding variable: aux1183 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1182))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '4735'
c Var 'aux1183' direct represents '0' with '4735'
c Var 'aux1183' order represents '1' with '4736'
-4735 4736 0
c Var 'aux1183' direct represents '1' with '4737'
4735 -4736 4737 0
-4737 4736 0
-4737 -4735 0
c Var 'aux1183' order represents '2' with '4738'
-4736 4738 0
c Var 'aux1183' direct represents '2' with '4739'
4736 -4738 4739 0
-4739 4738 0
-4739 -4736 0
c Var 'aux1183' direct represents '3' with '-4738'
4735 4737 4739 -4738 0
c Encoding variable: aux1184 with domain: int(0..4) (representing constraint (aux1179 + aux1181))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '4740'
c Var 'aux1184' direct represents '0' with '4740'
c Var 'aux1184' order represents '1' with '4741'
-4740 4741 0
c Var 'aux1184' direct represents '1' with '4742'
4740 -4741 4742 0
-4742 4741 0
-4742 -4740 0
c Var 'aux1184' order represents '2' with '4743'
-4741 4743 0
c Var 'aux1184' direct represents '2' with '4744'
4741 -4743 4744 0
-4744 4743 0
-4744 -4741 0
c Var 'aux1184' order represents '3' with '4745'
-4743 4745 0
c Var 'aux1184' direct represents '3' with '4746'
4743 -4745 4746 0
-4746 4745 0
-4746 -4743 0
c Var 'aux1184' direct represents '4' with '-4745'
4740 4742 4744 4746 -4745 0
c Encoding variable: aux1185 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '4747'
c Var 'aux1185' direct represents '0' with '4747'
c Var 'aux1185' order represents '1' with '4748'
-4747 4748 0
c Var 'aux1185' direct represents '1' with '4749'
4747 -4748 4749 0
-4749 4748 0
-4749 -4747 0
c Var 'aux1185' direct represents '2' with '-4748'
4747 4749 -4748 0
c Encoding variable: aux1186 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '4750'
c Var 'aux1186' direct represents '0' with '4750'
c Var 'aux1186' order represents '1' with '4751'
-4750 4751 0
c Var 'aux1186' direct represents '1' with '4752'
4750 -4751 4752 0
-4752 4751 0
-4752 -4750 0
c Var 'aux1186' direct represents '2' with '-4751'
4750 4752 -4751 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '4753'
c Var 'aux1187' direct represents '0' with '4753'
c Var 'aux1187' order represents '1' with '4754'
-4753 4754 0
c Var 'aux1187' direct represents '1' with '4755'
4753 -4754 4755 0
-4755 4754 0
-4755 -4753 0
c Var 'aux1187' direct represents '2' with '-4754'
4753 4755 -4754 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '4756'
c Var 'aux1188' direct represents '0' with '4756'
c Var 'aux1188' order represents '1' with '4757'
-4756 4757 0
c Var 'aux1188' direct represents '1' with '4758'
4756 -4757 4758 0
-4758 4757 0
-4758 -4756 0
c Var 'aux1188' direct represents '2' with '-4757'
4756 4758 -4757 0
c Encoding variable: aux1189 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1188))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '4759'
c Var 'aux1189' direct represents '0' with '4759'
c Var 'aux1189' order represents '1' with '4760'
-4759 4760 0
c Var 'aux1189' direct represents '1' with '4761'
4759 -4760 4761 0
-4761 4760 0
-4761 -4759 0
c Var 'aux1189' order represents '2' with '4762'
-4760 4762 0
c Var 'aux1189' direct represents '2' with '4763'
4760 -4762 4763 0
-4763 4762 0
-4763 -4760 0
c Var 'aux1189' direct represents '3' with '-4762'
4759 4761 4763 -4762 0
c Encoding variable: aux1190 with domain: int(0..4) (representing constraint (aux1185 + aux1187))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '4764'
c Var 'aux1190' direct represents '0' with '4764'
c Var 'aux1190' order represents '1' with '4765'
-4764 4765 0
c Var 'aux1190' direct represents '1' with '4766'
4764 -4765 4766 0
-4766 4765 0
-4766 -4764 0
c Var 'aux1190' order represents '2' with '4767'
-4765 4767 0
c Var 'aux1190' direct represents '2' with '4768'
4765 -4767 4768 0
-4768 4767 0
-4768 -4765 0
c Var 'aux1190' order represents '3' with '4769'
-4767 4769 0
c Var 'aux1190' direct represents '3' with '4770'
4767 -4769 4770 0
-4770 4769 0
-4770 -4767 0
c Var 'aux1190' direct represents '4' with '-4769'
4764 4766 4768 4770 -4769 0
c Encoding variable: aux1191 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '4771'
c Var 'aux1191' direct represents '0' with '4771'
c Var 'aux1191' order represents '1' with '4772'
-4771 4772 0
c Var 'aux1191' direct represents '1' with '4773'
4771 -4772 4773 0
-4773 4772 0
-4773 -4771 0
c Var 'aux1191' direct represents '2' with '-4772'
4771 4773 -4772 0
c Encoding variable: aux1192 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '4774'
c Var 'aux1192' direct represents '0' with '4774'
c Var 'aux1192' order represents '1' with '4775'
-4774 4775 0
c Var 'aux1192' direct represents '1' with '4776'
4774 -4775 4776 0
-4776 4775 0
-4776 -4774 0
c Var 'aux1192' direct represents '2' with '-4775'
4774 4776 -4775 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '4777'
c Var 'aux1193' direct represents '0' with '4777'
c Var 'aux1193' order represents '1' with '4778'
-4777 4778 0
c Var 'aux1193' direct represents '1' with '4779'
4777 -4778 4779 0
-4779 4778 0
-4779 -4777 0
c Var 'aux1193' direct represents '2' with '-4778'
4777 4779 -4778 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '4780'
c Var 'aux1194' direct represents '0' with '4780'
c Var 'aux1194' order represents '1' with '4781'
-4780 4781 0
c Var 'aux1194' direct represents '1' with '4782'
4780 -4781 4782 0
-4782 4781 0
-4782 -4780 0
c Var 'aux1194' direct represents '2' with '-4781'
4780 4782 -4781 0
c Encoding variable: aux1195 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1194))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '4783'
c Var 'aux1195' direct represents '0' with '4783'
c Var 'aux1195' order represents '1' with '4784'
-4783 4784 0
c Var 'aux1195' direct represents '1' with '4785'
4783 -4784 4785 0
-4785 4784 0
-4785 -4783 0
c Var 'aux1195' order represents '2' with '4786'
-4784 4786 0
c Var 'aux1195' direct represents '2' with '4787'
4784 -4786 4787 0
-4787 4786 0
-4787 -4784 0
c Var 'aux1195' direct represents '3' with '-4786'
4783 4785 4787 -4786 0
c Encoding variable: aux1196 with domain: int(0..4) (representing constraint (aux1191 + aux1193))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '4788'
c Var 'aux1196' direct represents '0' with '4788'
c Var 'aux1196' order represents '1' with '4789'
-4788 4789 0
c Var 'aux1196' direct represents '1' with '4790'
4788 -4789 4790 0
-4790 4789 0
-4790 -4788 0
c Var 'aux1196' order represents '2' with '4791'
-4789 4791 0
c Var 'aux1196' direct represents '2' with '4792'
4789 -4791 4792 0
-4792 4791 0
-4792 -4789 0
c Var 'aux1196' order represents '3' with '4793'
-4791 4793 0
c Var 'aux1196' direct represents '3' with '4794'
4791 -4793 4794 0
-4794 4793 0
-4794 -4791 0
c Var 'aux1196' direct represents '4' with '-4793'
4788 4790 4792 4794 -4793 0
c Encoding variable: aux1197 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '4795'
c Var 'aux1197' direct represents '0' with '4795'
c Var 'aux1197' order represents '1' with '4796'
-4795 4796 0
c Var 'aux1197' direct represents '1' with '4797'
4795 -4796 4797 0
-4797 4796 0
-4797 -4795 0
c Var 'aux1197' direct represents '2' with '-4796'
4795 4797 -4796 0
c Encoding variable: aux1198 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '4798'
c Var 'aux1198' direct represents '0' with '4798'
c Var 'aux1198' order represents '1' with '4799'
-4798 4799 0
c Var 'aux1198' direct represents '1' with '4800'
4798 -4799 4800 0
-4800 4799 0
-4800 -4798 0
c Var 'aux1198' direct represents '2' with '-4799'
4798 4800 -4799 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '4801'
c Var 'aux1199' direct represents '0' with '4801'
c Var 'aux1199' order represents '1' with '4802'
-4801 4802 0
c Var 'aux1199' direct represents '1' with '4803'
4801 -4802 4803 0
-4803 4802 0
-4803 -4801 0
c Var 'aux1199' direct represents '2' with '-4802'
4801 4803 -4802 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '4804'
c Var 'aux1200' direct represents '0' with '4804'
c Var 'aux1200' order represents '1' with '4805'
-4804 4805 0
c Var 'aux1200' direct represents '1' with '4806'
4804 -4805 4806 0
-4806 4805 0
-4806 -4804 0
c Var 'aux1200' direct represents '2' with '-4805'
4804 4806 -4805 0
c Encoding variable: aux1201 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1200))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '4807'
c Var 'aux1201' direct represents '0' with '4807'
c Var 'aux1201' order represents '1' with '4808'
-4807 4808 0
c Var 'aux1201' direct represents '1' with '4809'
4807 -4808 4809 0
-4809 4808 0
-4809 -4807 0
c Var 'aux1201' order represents '2' with '4810'
-4808 4810 0
c Var 'aux1201' direct represents '2' with '4811'
4808 -4810 4811 0
-4811 4810 0
-4811 -4808 0
c Var 'aux1201' direct represents '3' with '-4810'
4807 4809 4811 -4810 0
c Encoding variable: aux1202 with domain: int(0..4) (representing constraint (aux1197 + aux1199))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '4812'
c Var 'aux1202' direct represents '0' with '4812'
c Var 'aux1202' order represents '1' with '4813'
-4812 4813 0
c Var 'aux1202' direct represents '1' with '4814'
4812 -4813 4814 0
-4814 4813 0
-4814 -4812 0
c Var 'aux1202' order represents '2' with '4815'
-4813 4815 0
c Var 'aux1202' direct represents '2' with '4816'
4813 -4815 4816 0
-4816 4815 0
-4816 -4813 0
c Var 'aux1202' order represents '3' with '4817'
-4815 4817 0
c Var 'aux1202' direct represents '3' with '4818'
4815 -4817 4818 0
-4818 4817 0
-4818 -4815 0
c Var 'aux1202' direct represents '4' with '-4817'
4812 4814 4816 4818 -4817 0
c Encoding variable: aux1203 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '4819'
c Var 'aux1203' direct represents '0' with '4819'
c Var 'aux1203' order represents '1' with '4820'
-4819 4820 0
c Var 'aux1203' direct represents '1' with '4821'
4819 -4820 4821 0
-4821 4820 0
-4821 -4819 0
c Var 'aux1203' direct represents '2' with '-4820'
4819 4821 -4820 0
c Encoding variable: aux1204 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '4822'
c Var 'aux1204' direct represents '0' with '4822'
c Var 'aux1204' order represents '1' with '4823'
-4822 4823 0
c Var 'aux1204' direct represents '1' with '4824'
4822 -4823 4824 0
-4824 4823 0
-4824 -4822 0
c Var 'aux1204' direct represents '2' with '-4823'
4822 4824 -4823 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '4825'
c Var 'aux1205' direct represents '0' with '4825'
c Var 'aux1205' order represents '1' with '4826'
-4825 4826 0
c Var 'aux1205' direct represents '1' with '4827'
4825 -4826 4827 0
-4827 4826 0
-4827 -4825 0
c Var 'aux1205' direct represents '2' with '-4826'
4825 4827 -4826 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '4828'
c Var 'aux1206' direct represents '0' with '4828'
c Var 'aux1206' order represents '1' with '4829'
-4828 4829 0
c Var 'aux1206' direct represents '1' with '4830'
4828 -4829 4830 0
-4830 4829 0
-4830 -4828 0
c Var 'aux1206' direct represents '2' with '-4829'
4828 4830 -4829 0
c Encoding variable: aux1207 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1206))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '4831'
c Var 'aux1207' direct represents '0' with '4831'
c Var 'aux1207' order represents '1' with '4832'
-4831 4832 0
c Var 'aux1207' direct represents '1' with '4833'
4831 -4832 4833 0
-4833 4832 0
-4833 -4831 0
c Var 'aux1207' order represents '2' with '4834'
-4832 4834 0
c Var 'aux1207' direct represents '2' with '4835'
4832 -4834 4835 0
-4835 4834 0
-4835 -4832 0
c Var 'aux1207' direct represents '3' with '-4834'
4831 4833 4835 -4834 0
c Encoding variable: aux1208 with domain: int(0..4) (representing constraint (aux1203 + aux1205))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '4836'
c Var 'aux1208' direct represents '0' with '4836'
c Var 'aux1208' order represents '1' with '4837'
-4836 4837 0
c Var 'aux1208' direct represents '1' with '4838'
4836 -4837 4838 0
-4838 4837 0
-4838 -4836 0
c Var 'aux1208' order represents '2' with '4839'
-4837 4839 0
c Var 'aux1208' direct represents '2' with '4840'
4837 -4839 4840 0
-4840 4839 0
-4840 -4837 0
c Var 'aux1208' order represents '3' with '4841'
-4839 4841 0
c Var 'aux1208' direct represents '3' with '4842'
4839 -4841 4842 0
-4842 4841 0
-4842 -4839 0
c Var 'aux1208' direct represents '4' with '-4841'
4836 4838 4840 4842 -4841 0
c Encoding variable: aux1209 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '4843'
c Var 'aux1209' direct represents '0' with '4843'
c Var 'aux1209' order represents '1' with '4844'
-4843 4844 0
c Var 'aux1209' direct represents '1' with '4845'
4843 -4844 4845 0
-4845 4844 0
-4845 -4843 0
c Var 'aux1209' direct represents '2' with '-4844'
4843 4845 -4844 0
c Encoding variable: aux1210 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '4846'
c Var 'aux1210' direct represents '0' with '4846'
c Var 'aux1210' order represents '1' with '4847'
-4846 4847 0
c Var 'aux1210' direct represents '1' with '4848'
4846 -4847 4848 0
-4848 4847 0
-4848 -4846 0
c Var 'aux1210' direct represents '2' with '-4847'
4846 4848 -4847 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '4849'
c Var 'aux1211' direct represents '0' with '4849'
c Var 'aux1211' order represents '1' with '4850'
-4849 4850 0
c Var 'aux1211' direct represents '1' with '4851'
4849 -4850 4851 0
-4851 4850 0
-4851 -4849 0
c Var 'aux1211' direct represents '2' with '-4850'
4849 4851 -4850 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '4852'
c Var 'aux1212' direct represents '0' with '4852'
c Var 'aux1212' order represents '1' with '4853'
-4852 4853 0
c Var 'aux1212' direct represents '1' with '4854'
4852 -4853 4854 0
-4854 4853 0
-4854 -4852 0
c Var 'aux1212' direct represents '2' with '-4853'
4852 4854 -4853 0
c Encoding variable: aux1213 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1212))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '4855'
c Var 'aux1213' direct represents '0' with '4855'
c Var 'aux1213' order represents '1' with '4856'
-4855 4856 0
c Var 'aux1213' direct represents '1' with '4857'
4855 -4856 4857 0
-4857 4856 0
-4857 -4855 0
c Var 'aux1213' order represents '2' with '4858'
-4856 4858 0
c Var 'aux1213' direct represents '2' with '4859'
4856 -4858 4859 0
-4859 4858 0
-4859 -4856 0
c Var 'aux1213' direct represents '3' with '-4858'
4855 4857 4859 -4858 0
c Encoding variable: aux1214 with domain: int(0..4) (representing constraint (aux1209 + aux1211))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '4860'
c Var 'aux1214' direct represents '0' with '4860'
c Var 'aux1214' order represents '1' with '4861'
-4860 4861 0
c Var 'aux1214' direct represents '1' with '4862'
4860 -4861 4862 0
-4862 4861 0
-4862 -4860 0
c Var 'aux1214' order represents '2' with '4863'
-4861 4863 0
c Var 'aux1214' direct represents '2' with '4864'
4861 -4863 4864 0
-4864 4863 0
-4864 -4861 0
c Var 'aux1214' order represents '3' with '4865'
-4863 4865 0
c Var 'aux1214' direct represents '3' with '4866'
4863 -4865 4866 0
-4866 4865 0
-4866 -4863 0
c Var 'aux1214' direct represents '4' with '-4865'
4860 4862 4864 4866 -4865 0
c Encoding variable: aux1215 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '4867'
c Var 'aux1215' direct represents '0' with '4867'
c Var 'aux1215' order represents '1' with '4868'
-4867 4868 0
c Var 'aux1215' direct represents '1' with '4869'
4867 -4868 4869 0
-4869 4868 0
-4869 -4867 0
c Var 'aux1215' direct represents '2' with '-4868'
4867 4869 -4868 0
c Encoding variable: aux1216 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '4870'
c Var 'aux1216' direct represents '0' with '4870'
c Var 'aux1216' order represents '1' with '4871'
-4870 4871 0
c Var 'aux1216' direct represents '1' with '4872'
4870 -4871 4872 0
-4872 4871 0
-4872 -4870 0
c Var 'aux1216' direct represents '2' with '-4871'
4870 4872 -4871 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '4873'
c Var 'aux1217' direct represents '0' with '4873'
c Var 'aux1217' order represents '1' with '4874'
-4873 4874 0
c Var 'aux1217' direct represents '1' with '4875'
4873 -4874 4875 0
-4875 4874 0
-4875 -4873 0
c Var 'aux1217' direct represents '2' with '-4874'
4873 4875 -4874 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '4876'
c Var 'aux1218' direct represents '0' with '4876'
c Var 'aux1218' order represents '1' with '4877'
-4876 4877 0
c Var 'aux1218' direct represents '1' with '4878'
4876 -4877 4878 0
-4878 4877 0
-4878 -4876 0
c Var 'aux1218' direct represents '2' with '-4877'
4876 4878 -4877 0
c Encoding variable: aux1219 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1218))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '4879'
c Var 'aux1219' direct represents '0' with '4879'
c Var 'aux1219' order represents '1' with '4880'
-4879 4880 0
c Var 'aux1219' direct represents '1' with '4881'
4879 -4880 4881 0
-4881 4880 0
-4881 -4879 0
c Var 'aux1219' order represents '2' with '4882'
-4880 4882 0
c Var 'aux1219' direct represents '2' with '4883'
4880 -4882 4883 0
-4883 4882 0
-4883 -4880 0
c Var 'aux1219' direct represents '3' with '-4882'
4879 4881 4883 -4882 0
c Encoding variable: aux1220 with domain: int(0..4) (representing constraint (aux1215 + aux1217))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '4884'
c Var 'aux1220' direct represents '0' with '4884'
c Var 'aux1220' order represents '1' with '4885'
-4884 4885 0
c Var 'aux1220' direct represents '1' with '4886'
4884 -4885 4886 0
-4886 4885 0
-4886 -4884 0
c Var 'aux1220' order represents '2' with '4887'
-4885 4887 0
c Var 'aux1220' direct represents '2' with '4888'
4885 -4887 4888 0
-4888 4887 0
-4888 -4885 0
c Var 'aux1220' order represents '3' with '4889'
-4887 4889 0
c Var 'aux1220' direct represents '3' with '4890'
4887 -4889 4890 0
-4890 4889 0
-4890 -4887 0
c Var 'aux1220' direct represents '4' with '-4889'
4884 4886 4888 4890 -4889 0
c Encoding variable: aux1221 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '4891'
c Var 'aux1221' direct represents '0' with '4891'
c Var 'aux1221' order represents '1' with '4892'
-4891 4892 0
c Var 'aux1221' direct represents '1' with '4893'
4891 -4892 4893 0
-4893 4892 0
-4893 -4891 0
c Var 'aux1221' direct represents '2' with '-4892'
4891 4893 -4892 0
c Encoding variable: aux1222 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '4894'
c Var 'aux1222' direct represents '0' with '4894'
c Var 'aux1222' order represents '1' with '4895'
-4894 4895 0
c Var 'aux1222' direct represents '1' with '4896'
4894 -4895 4896 0
-4896 4895 0
-4896 -4894 0
c Var 'aux1222' direct represents '2' with '-4895'
4894 4896 -4895 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '4897'
c Var 'aux1223' direct represents '0' with '4897'
c Var 'aux1223' order represents '1' with '4898'
-4897 4898 0
c Var 'aux1223' direct represents '1' with '4899'
4897 -4898 4899 0
-4899 4898 0
-4899 -4897 0
c Var 'aux1223' direct represents '2' with '-4898'
4897 4899 -4898 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '4900'
c Var 'aux1224' direct represents '0' with '4900'
c Var 'aux1224' order represents '1' with '4901'
-4900 4901 0
c Var 'aux1224' direct represents '1' with '4902'
4900 -4901 4902 0
-4902 4901 0
-4902 -4900 0
c Var 'aux1224' direct represents '2' with '-4901'
4900 4902 -4901 0
c Encoding variable: aux1225 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1224))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '4903'
c Var 'aux1225' direct represents '0' with '4903'
c Var 'aux1225' order represents '1' with '4904'
-4903 4904 0
c Var 'aux1225' direct represents '1' with '4905'
4903 -4904 4905 0
-4905 4904 0
-4905 -4903 0
c Var 'aux1225' order represents '2' with '4906'
-4904 4906 0
c Var 'aux1225' direct represents '2' with '4907'
4904 -4906 4907 0
-4907 4906 0
-4907 -4904 0
c Var 'aux1225' direct represents '3' with '-4906'
4903 4905 4907 -4906 0
c Encoding variable: aux1226 with domain: int(0..4) (representing constraint (aux1221 + aux1223))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '4908'
c Var 'aux1226' direct represents '0' with '4908'
c Var 'aux1226' order represents '1' with '4909'
-4908 4909 0
c Var 'aux1226' direct represents '1' with '4910'
4908 -4909 4910 0
-4910 4909 0
-4910 -4908 0
c Var 'aux1226' order represents '2' with '4911'
-4909 4911 0
c Var 'aux1226' direct represents '2' with '4912'
4909 -4911 4912 0
-4912 4911 0
-4912 -4909 0
c Var 'aux1226' order represents '3' with '4913'
-4911 4913 0
c Var 'aux1226' direct represents '3' with '4914'
4911 -4913 4914 0
-4914 4913 0
-4914 -4911 0
c Var 'aux1226' direct represents '4' with '-4913'
4908 4910 4912 4914 -4913 0
c Encoding variable: aux1227 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '4915'
c Var 'aux1227' direct represents '0' with '4915'
c Var 'aux1227' order represents '1' with '4916'
-4915 4916 0
c Var 'aux1227' direct represents '1' with '4917'
4915 -4916 4917 0
-4917 4916 0
-4917 -4915 0
c Var 'aux1227' direct represents '2' with '-4916'
4915 4917 -4916 0
c Encoding variable: aux1228 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '4918'
c Var 'aux1228' direct represents '0' with '4918'
c Var 'aux1228' order represents '1' with '4919'
-4918 4919 0
c Var 'aux1228' direct represents '1' with '4920'
4918 -4919 4920 0
-4920 4919 0
-4920 -4918 0
c Var 'aux1228' direct represents '2' with '-4919'
4918 4920 -4919 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '4921'
c Var 'aux1229' direct represents '0' with '4921'
c Var 'aux1229' order represents '1' with '4922'
-4921 4922 0
c Var 'aux1229' direct represents '1' with '4923'
4921 -4922 4923 0
-4923 4922 0
-4923 -4921 0
c Var 'aux1229' direct represents '2' with '-4922'
4921 4923 -4922 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '4924'
c Var 'aux1230' direct represents '0' with '4924'
c Var 'aux1230' order represents '1' with '4925'
-4924 4925 0
c Var 'aux1230' direct represents '1' with '4926'
4924 -4925 4926 0
-4926 4925 0
-4926 -4924 0
c Var 'aux1230' direct represents '2' with '-4925'
4924 4926 -4925 0
c Encoding variable: aux1231 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1230))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '4927'
c Var 'aux1231' direct represents '0' with '4927'
c Var 'aux1231' order represents '1' with '4928'
-4927 4928 0
c Var 'aux1231' direct represents '1' with '4929'
4927 -4928 4929 0
-4929 4928 0
-4929 -4927 0
c Var 'aux1231' order represents '2' with '4930'
-4928 4930 0
c Var 'aux1231' direct represents '2' with '4931'
4928 -4930 4931 0
-4931 4930 0
-4931 -4928 0
c Var 'aux1231' direct represents '3' with '-4930'
4927 4929 4931 -4930 0
c Encoding variable: aux1232 with domain: int(0..4) (representing constraint (aux1227 + aux1229))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '4932'
c Var 'aux1232' direct represents '0' with '4932'
c Var 'aux1232' order represents '1' with '4933'
-4932 4933 0
c Var 'aux1232' direct represents '1' with '4934'
4932 -4933 4934 0
-4934 4933 0
-4934 -4932 0
c Var 'aux1232' order represents '2' with '4935'
-4933 4935 0
c Var 'aux1232' direct represents '2' with '4936'
4933 -4935 4936 0
-4936 4935 0
-4936 -4933 0
c Var 'aux1232' order represents '3' with '4937'
-4935 4937 0
c Var 'aux1232' direct represents '3' with '4938'
4935 -4937 4938 0
-4938 4937 0
-4938 -4935 0
c Var 'aux1232' direct represents '4' with '-4937'
4932 4934 4936 4938 -4937 0
c Encoding variable: aux1233 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '4939'
c Var 'aux1233' direct represents '0' with '4939'
c Var 'aux1233' order represents '1' with '4940'
-4939 4940 0
c Var 'aux1233' direct represents '1' with '4941'
4939 -4940 4941 0
-4941 4940 0
-4941 -4939 0
c Var 'aux1233' direct represents '2' with '-4940'
4939 4941 -4940 0
c Encoding variable: aux1234 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '4942'
c Var 'aux1234' direct represents '0' with '4942'
c Var 'aux1234' order represents '1' with '4943'
-4942 4943 0
c Var 'aux1234' direct represents '1' with '4944'
4942 -4943 4944 0
-4944 4943 0
-4944 -4942 0
c Var 'aux1234' direct represents '2' with '-4943'
4942 4944 -4943 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '4945'
c Var 'aux1235' direct represents '0' with '4945'
c Var 'aux1235' order represents '1' with '4946'
-4945 4946 0
c Var 'aux1235' direct represents '1' with '4947'
4945 -4946 4947 0
-4947 4946 0
-4947 -4945 0
c Var 'aux1235' direct represents '2' with '-4946'
4945 4947 -4946 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '4948'
c Var 'aux1236' direct represents '0' with '4948'
c Var 'aux1236' order represents '1' with '4949'
-4948 4949 0
c Var 'aux1236' direct represents '1' with '4950'
4948 -4949 4950 0
-4950 4949 0
-4950 -4948 0
c Var 'aux1236' direct represents '2' with '-4949'
4948 4950 -4949 0
c Encoding variable: aux1237 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1236))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '4951'
c Var 'aux1237' direct represents '0' with '4951'
c Var 'aux1237' order represents '1' with '4952'
-4951 4952 0
c Var 'aux1237' direct represents '1' with '4953'
4951 -4952 4953 0
-4953 4952 0
-4953 -4951 0
c Var 'aux1237' order represents '2' with '4954'
-4952 4954 0
c Var 'aux1237' direct represents '2' with '4955'
4952 -4954 4955 0
-4955 4954 0
-4955 -4952 0
c Var 'aux1237' direct represents '3' with '-4954'
4951 4953 4955 -4954 0
c Encoding variable: aux1238 with domain: int(0..4) (representing constraint (aux1233 + aux1235))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '4956'
c Var 'aux1238' direct represents '0' with '4956'
c Var 'aux1238' order represents '1' with '4957'
-4956 4957 0
c Var 'aux1238' direct represents '1' with '4958'
4956 -4957 4958 0
-4958 4957 0
-4958 -4956 0
c Var 'aux1238' order represents '2' with '4959'
-4957 4959 0
c Var 'aux1238' direct represents '2' with '4960'
4957 -4959 4960 0
-4960 4959 0
-4960 -4957 0
c Var 'aux1238' order represents '3' with '4961'
-4959 4961 0
c Var 'aux1238' direct represents '3' with '4962'
4959 -4961 4962 0
-4962 4961 0
-4962 -4959 0
c Var 'aux1238' direct represents '4' with '-4961'
4956 4958 4960 4962 -4961 0
c Encoding variable: aux1239 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '4963'
c Var 'aux1239' direct represents '0' with '4963'
c Var 'aux1239' order represents '1' with '4964'
-4963 4964 0
c Var 'aux1239' direct represents '1' with '4965'
4963 -4964 4965 0
-4965 4964 0
-4965 -4963 0
c Var 'aux1239' direct represents '2' with '-4964'
4963 4965 -4964 0
c Encoding variable: aux1240 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '4966'
c Var 'aux1240' direct represents '0' with '4966'
c Var 'aux1240' order represents '1' with '4967'
-4966 4967 0
c Var 'aux1240' direct represents '1' with '4968'
4966 -4967 4968 0
-4968 4967 0
-4968 -4966 0
c Var 'aux1240' direct represents '2' with '-4967'
4966 4968 -4967 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '4969'
c Var 'aux1241' direct represents '0' with '4969'
c Var 'aux1241' order represents '1' with '4970'
-4969 4970 0
c Var 'aux1241' direct represents '1' with '4971'
4969 -4970 4971 0
-4971 4970 0
-4971 -4969 0
c Var 'aux1241' direct represents '2' with '-4970'
4969 4971 -4970 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '4972'
c Var 'aux1242' direct represents '0' with '4972'
c Var 'aux1242' order represents '1' with '4973'
-4972 4973 0
c Var 'aux1242' direct represents '1' with '4974'
4972 -4973 4974 0
-4974 4973 0
-4974 -4972 0
c Var 'aux1242' direct represents '2' with '-4973'
4972 4974 -4973 0
c Encoding variable: aux1243 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1242))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '4975'
c Var 'aux1243' direct represents '0' with '4975'
c Var 'aux1243' order represents '1' with '4976'
-4975 4976 0
c Var 'aux1243' direct represents '1' with '4977'
4975 -4976 4977 0
-4977 4976 0
-4977 -4975 0
c Var 'aux1243' order represents '2' with '4978'
-4976 4978 0
c Var 'aux1243' direct represents '2' with '4979'
4976 -4978 4979 0
-4979 4978 0
-4979 -4976 0
c Var 'aux1243' direct represents '3' with '-4978'
4975 4977 4979 -4978 0
c Encoding variable: aux1244 with domain: int(0..4) (representing constraint (aux1239 + aux1241))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '4980'
c Var 'aux1244' direct represents '0' with '4980'
c Var 'aux1244' order represents '1' with '4981'
-4980 4981 0
c Var 'aux1244' direct represents '1' with '4982'
4980 -4981 4982 0
-4982 4981 0
-4982 -4980 0
c Var 'aux1244' order represents '2' with '4983'
-4981 4983 0
c Var 'aux1244' direct represents '2' with '4984'
4981 -4983 4984 0
-4984 4983 0
-4984 -4981 0
c Var 'aux1244' order represents '3' with '4985'
-4983 4985 0
c Var 'aux1244' direct represents '3' with '4986'
4983 -4985 4986 0
-4986 4985 0
-4986 -4983 0
c Var 'aux1244' direct represents '4' with '-4985'
4980 4982 4984 4986 -4985 0
c Encoding variable: aux1245 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '4987'
c Var 'aux1245' direct represents '0' with '4987'
c Var 'aux1245' order represents '1' with '4988'
-4987 4988 0
c Var 'aux1245' direct represents '1' with '4989'
4987 -4988 4989 0
-4989 4988 0
-4989 -4987 0
c Var 'aux1245' direct represents '2' with '-4988'
4987 4989 -4988 0
c Encoding variable: aux1246 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '4990'
c Var 'aux1246' direct represents '0' with '4990'
c Var 'aux1246' order represents '1' with '4991'
-4990 4991 0
c Var 'aux1246' direct represents '1' with '4992'
4990 -4991 4992 0
-4992 4991 0
-4992 -4990 0
c Var 'aux1246' direct represents '2' with '-4991'
4990 4992 -4991 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '4993'
c Var 'aux1247' direct represents '0' with '4993'
c Var 'aux1247' order represents '1' with '4994'
-4993 4994 0
c Var 'aux1247' direct represents '1' with '4995'
4993 -4994 4995 0
-4995 4994 0
-4995 -4993 0
c Var 'aux1247' direct represents '2' with '-4994'
4993 4995 -4994 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '4996'
c Var 'aux1248' direct represents '0' with '4996'
c Var 'aux1248' order represents '1' with '4997'
-4996 4997 0
c Var 'aux1248' direct represents '1' with '4998'
4996 -4997 4998 0
-4998 4997 0
-4998 -4996 0
c Var 'aux1248' direct represents '2' with '-4997'
4996 4998 -4997 0
c Encoding variable: aux1249 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1248))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '4999'
c Var 'aux1249' direct represents '0' with '4999'
c Var 'aux1249' order represents '1' with '5000'
-4999 5000 0
c Var 'aux1249' direct represents '1' with '5001'
4999 -5000 5001 0
-5001 5000 0
-5001 -4999 0
c Var 'aux1249' order represents '2' with '5002'
-5000 5002 0
c Var 'aux1249' direct represents '2' with '5003'
5000 -5002 5003 0
-5003 5002 0
-5003 -5000 0
c Var 'aux1249' direct represents '3' with '-5002'
4999 5001 5003 -5002 0
c Encoding variable: aux1250 with domain: int(0..4) (representing constraint (aux1245 + aux1247))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5004'
c Var 'aux1250' direct represents '0' with '5004'
c Var 'aux1250' order represents '1' with '5005'
-5004 5005 0
c Var 'aux1250' direct represents '1' with '5006'
5004 -5005 5006 0
-5006 5005 0
-5006 -5004 0
c Var 'aux1250' order represents '2' with '5007'
-5005 5007 0
c Var 'aux1250' direct represents '2' with '5008'
5005 -5007 5008 0
-5008 5007 0
-5008 -5005 0
c Var 'aux1250' order represents '3' with '5009'
-5007 5009 0
c Var 'aux1250' direct represents '3' with '5010'
5007 -5009 5010 0
-5010 5009 0
-5010 -5007 0
c Var 'aux1250' direct represents '4' with '-5009'
5004 5006 5008 5010 -5009 0
c Encoding variable: aux1251 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5011'
c Var 'aux1251' direct represents '0' with '5011'
c Var 'aux1251' order represents '1' with '5012'
-5011 5012 0
c Var 'aux1251' direct represents '1' with '5013'
5011 -5012 5013 0
-5013 5012 0
-5013 -5011 0
c Var 'aux1251' direct represents '2' with '-5012'
5011 5013 -5012 0
c Encoding variable: aux1252 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5014'
c Var 'aux1252' direct represents '0' with '5014'
c Var 'aux1252' order represents '1' with '5015'
-5014 5015 0
c Var 'aux1252' direct represents '1' with '5016'
5014 -5015 5016 0
-5016 5015 0
-5016 -5014 0
c Var 'aux1252' direct represents '2' with '-5015'
5014 5016 -5015 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5017'
c Var 'aux1253' direct represents '0' with '5017'
c Var 'aux1253' order represents '1' with '5018'
-5017 5018 0
c Var 'aux1253' direct represents '1' with '5019'
5017 -5018 5019 0
-5019 5018 0
-5019 -5017 0
c Var 'aux1253' direct represents '2' with '-5018'
5017 5019 -5018 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5020'
c Var 'aux1254' direct represents '0' with '5020'
c Var 'aux1254' order represents '1' with '5021'
-5020 5021 0
c Var 'aux1254' direct represents '1' with '5022'
5020 -5021 5022 0
-5022 5021 0
-5022 -5020 0
c Var 'aux1254' direct represents '2' with '-5021'
5020 5022 -5021 0
c Encoding variable: aux1255 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1254))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5023'
c Var 'aux1255' direct represents '0' with '5023'
c Var 'aux1255' order represents '1' with '5024'
-5023 5024 0
c Var 'aux1255' direct represents '1' with '5025'
5023 -5024 5025 0
-5025 5024 0
-5025 -5023 0
c Var 'aux1255' order represents '2' with '5026'
-5024 5026 0
c Var 'aux1255' direct represents '2' with '5027'
5024 -5026 5027 0
-5027 5026 0
-5027 -5024 0
c Var 'aux1255' direct represents '3' with '-5026'
5023 5025 5027 -5026 0
c Encoding variable: aux1256 with domain: int(0..4) (representing constraint (aux1251 + aux1253))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5028'
c Var 'aux1256' direct represents '0' with '5028'
c Var 'aux1256' order represents '1' with '5029'
-5028 5029 0
c Var 'aux1256' direct represents '1' with '5030'
5028 -5029 5030 0
-5030 5029 0
-5030 -5028 0
c Var 'aux1256' order represents '2' with '5031'
-5029 5031 0
c Var 'aux1256' direct represents '2' with '5032'
5029 -5031 5032 0
-5032 5031 0
-5032 -5029 0
c Var 'aux1256' order represents '3' with '5033'
-5031 5033 0
c Var 'aux1256' direct represents '3' with '5034'
5031 -5033 5034 0
-5034 5033 0
-5034 -5031 0
c Var 'aux1256' direct represents '4' with '-5033'
5028 5030 5032 5034 -5033 0
c Encoding variable: aux1257 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5035'
c Var 'aux1257' direct represents '0' with '5035'
c Var 'aux1257' order represents '1' with '5036'
-5035 5036 0
c Var 'aux1257' direct represents '1' with '5037'
5035 -5036 5037 0
-5037 5036 0
-5037 -5035 0
c Var 'aux1257' direct represents '2' with '-5036'
5035 5037 -5036 0
c Encoding variable: aux1258 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5038'
c Var 'aux1258' direct represents '0' with '5038'
c Var 'aux1258' order represents '1' with '5039'
-5038 5039 0
c Var 'aux1258' direct represents '1' with '5040'
5038 -5039 5040 0
-5040 5039 0
-5040 -5038 0
c Var 'aux1258' direct represents '2' with '-5039'
5038 5040 -5039 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5041'
c Var 'aux1259' direct represents '0' with '5041'
c Var 'aux1259' order represents '1' with '5042'
-5041 5042 0
c Var 'aux1259' direct represents '1' with '5043'
5041 -5042 5043 0
-5043 5042 0
-5043 -5041 0
c Var 'aux1259' direct represents '2' with '-5042'
5041 5043 -5042 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5044'
c Var 'aux1260' direct represents '0' with '5044'
c Var 'aux1260' order represents '1' with '5045'
-5044 5045 0
c Var 'aux1260' direct represents '1' with '5046'
5044 -5045 5046 0
-5046 5045 0
-5046 -5044 0
c Var 'aux1260' direct represents '2' with '-5045'
5044 5046 -5045 0
c Encoding variable: aux1261 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1260))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5047'
c Var 'aux1261' direct represents '0' with '5047'
c Var 'aux1261' order represents '1' with '5048'
-5047 5048 0
c Var 'aux1261' direct represents '1' with '5049'
5047 -5048 5049 0
-5049 5048 0
-5049 -5047 0
c Var 'aux1261' order represents '2' with '5050'
-5048 5050 0
c Var 'aux1261' direct represents '2' with '5051'
5048 -5050 5051 0
-5051 5050 0
-5051 -5048 0
c Var 'aux1261' direct represents '3' with '-5050'
5047 5049 5051 -5050 0
c Encoding variable: aux1262 with domain: int(0..4) (representing constraint (aux1257 + aux1259))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5052'
c Var 'aux1262' direct represents '0' with '5052'
c Var 'aux1262' order represents '1' with '5053'
-5052 5053 0
c Var 'aux1262' direct represents '1' with '5054'
5052 -5053 5054 0
-5054 5053 0
-5054 -5052 0
c Var 'aux1262' order represents '2' with '5055'
-5053 5055 0
c Var 'aux1262' direct represents '2' with '5056'
5053 -5055 5056 0
-5056 5055 0
-5056 -5053 0
c Var 'aux1262' order represents '3' with '5057'
-5055 5057 0
c Var 'aux1262' direct represents '3' with '5058'
5055 -5057 5058 0
-5058 5057 0
-5058 -5055 0
c Var 'aux1262' direct represents '4' with '-5057'
5052 5054 5056 5058 -5057 0
c Encoding variable: aux1263 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5059'
c Var 'aux1263' direct represents '0' with '5059'
c Var 'aux1263' order represents '1' with '5060'
-5059 5060 0
c Var 'aux1263' direct represents '1' with '5061'
5059 -5060 5061 0
-5061 5060 0
-5061 -5059 0
c Var 'aux1263' direct represents '2' with '-5060'
5059 5061 -5060 0
c Encoding variable: aux1264 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5062'
c Var 'aux1264' direct represents '0' with '5062'
c Var 'aux1264' order represents '1' with '5063'
-5062 5063 0
c Var 'aux1264' direct represents '1' with '5064'
5062 -5063 5064 0
-5064 5063 0
-5064 -5062 0
c Var 'aux1264' direct represents '2' with '-5063'
5062 5064 -5063 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5065'
c Var 'aux1265' direct represents '0' with '5065'
c Var 'aux1265' order represents '1' with '5066'
-5065 5066 0
c Var 'aux1265' direct represents '1' with '5067'
5065 -5066 5067 0
-5067 5066 0
-5067 -5065 0
c Var 'aux1265' direct represents '2' with '-5066'
5065 5067 -5066 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5068'
c Var 'aux1266' direct represents '0' with '5068'
c Var 'aux1266' order represents '1' with '5069'
-5068 5069 0
c Var 'aux1266' direct represents '1' with '5070'
5068 -5069 5070 0
-5070 5069 0
-5070 -5068 0
c Var 'aux1266' direct represents '2' with '-5069'
5068 5070 -5069 0
c Encoding variable: aux1267 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1266))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5071'
c Var 'aux1267' direct represents '0' with '5071'
c Var 'aux1267' order represents '1' with '5072'
-5071 5072 0
c Var 'aux1267' direct represents '1' with '5073'
5071 -5072 5073 0
-5073 5072 0
-5073 -5071 0
c Var 'aux1267' order represents '2' with '5074'
-5072 5074 0
c Var 'aux1267' direct represents '2' with '5075'
5072 -5074 5075 0
-5075 5074 0
-5075 -5072 0
c Var 'aux1267' direct represents '3' with '-5074'
5071 5073 5075 -5074 0
c Encoding variable: aux1268 with domain: int(0..4) (representing constraint (aux1263 + aux1265))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5076'
c Var 'aux1268' direct represents '0' with '5076'
c Var 'aux1268' order represents '1' with '5077'
-5076 5077 0
c Var 'aux1268' direct represents '1' with '5078'
5076 -5077 5078 0
-5078 5077 0
-5078 -5076 0
c Var 'aux1268' order represents '2' with '5079'
-5077 5079 0
c Var 'aux1268' direct represents '2' with '5080'
5077 -5079 5080 0
-5080 5079 0
-5080 -5077 0
c Var 'aux1268' order represents '3' with '5081'
-5079 5081 0
c Var 'aux1268' direct represents '3' with '5082'
5079 -5081 5082 0
-5082 5081 0
-5082 -5079 0
c Var 'aux1268' direct represents '4' with '-5081'
5076 5078 5080 5082 -5081 0
c Encoding variable: aux1269 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5083'
c Var 'aux1269' direct represents '0' with '5083'
c Var 'aux1269' order represents '1' with '5084'
-5083 5084 0
c Var 'aux1269' direct represents '1' with '5085'
5083 -5084 5085 0
-5085 5084 0
-5085 -5083 0
c Var 'aux1269' direct represents '2' with '-5084'
5083 5085 -5084 0
c Encoding variable: aux1270 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5086'
c Var 'aux1270' direct represents '0' with '5086'
c Var 'aux1270' order represents '1' with '5087'
-5086 5087 0
c Var 'aux1270' direct represents '1' with '5088'
5086 -5087 5088 0
-5088 5087 0
-5088 -5086 0
c Var 'aux1270' direct represents '2' with '-5087'
5086 5088 -5087 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5089'
c Var 'aux1271' direct represents '0' with '5089'
c Var 'aux1271' order represents '1' with '5090'
-5089 5090 0
c Var 'aux1271' direct represents '1' with '5091'
5089 -5090 5091 0
-5091 5090 0
-5091 -5089 0
c Var 'aux1271' direct represents '2' with '-5090'
5089 5091 -5090 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5092'
c Var 'aux1272' direct represents '0' with '5092'
c Var 'aux1272' order represents '1' with '5093'
-5092 5093 0
c Var 'aux1272' direct represents '1' with '5094'
5092 -5093 5094 0
-5094 5093 0
-5094 -5092 0
c Var 'aux1272' direct represents '2' with '-5093'
5092 5094 -5093 0
c Encoding variable: aux1273 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1272))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5095'
c Var 'aux1273' direct represents '0' with '5095'
c Var 'aux1273' order represents '1' with '5096'
-5095 5096 0
c Var 'aux1273' direct represents '1' with '5097'
5095 -5096 5097 0
-5097 5096 0
-5097 -5095 0
c Var 'aux1273' order represents '2' with '5098'
-5096 5098 0
c Var 'aux1273' direct represents '2' with '5099'
5096 -5098 5099 0
-5099 5098 0
-5099 -5096 0
c Var 'aux1273' direct represents '3' with '-5098'
5095 5097 5099 -5098 0
c Encoding variable: aux1274 with domain: int(0..4) (representing constraint (aux1269 + aux1271))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5100'
c Var 'aux1274' direct represents '0' with '5100'
c Var 'aux1274' order represents '1' with '5101'
-5100 5101 0
c Var 'aux1274' direct represents '1' with '5102'
5100 -5101 5102 0
-5102 5101 0
-5102 -5100 0
c Var 'aux1274' order represents '2' with '5103'
-5101 5103 0
c Var 'aux1274' direct represents '2' with '5104'
5101 -5103 5104 0
-5104 5103 0
-5104 -5101 0
c Var 'aux1274' order represents '3' with '5105'
-5103 5105 0
c Var 'aux1274' direct represents '3' with '5106'
5103 -5105 5106 0
-5106 5105 0
-5106 -5103 0
c Var 'aux1274' direct represents '4' with '-5105'
5100 5102 5104 5106 -5105 0
c Encoding variable: aux1275 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5107'
c Var 'aux1275' direct represents '0' with '5107'
c Var 'aux1275' order represents '1' with '5108'
-5107 5108 0
c Var 'aux1275' direct represents '1' with '5109'
5107 -5108 5109 0
-5109 5108 0
-5109 -5107 0
c Var 'aux1275' direct represents '2' with '-5108'
5107 5109 -5108 0
c Encoding variable: aux1276 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5110'
c Var 'aux1276' direct represents '0' with '5110'
c Var 'aux1276' order represents '1' with '5111'
-5110 5111 0
c Var 'aux1276' direct represents '1' with '5112'
5110 -5111 5112 0
-5112 5111 0
-5112 -5110 0
c Var 'aux1276' direct represents '2' with '-5111'
5110 5112 -5111 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5113'
c Var 'aux1277' direct represents '0' with '5113'
c Var 'aux1277' order represents '1' with '5114'
-5113 5114 0
c Var 'aux1277' direct represents '1' with '5115'
5113 -5114 5115 0
-5115 5114 0
-5115 -5113 0
c Var 'aux1277' direct represents '2' with '-5114'
5113 5115 -5114 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5116'
c Var 'aux1278' direct represents '0' with '5116'
c Var 'aux1278' order represents '1' with '5117'
-5116 5117 0
c Var 'aux1278' direct represents '1' with '5118'
5116 -5117 5118 0
-5118 5117 0
-5118 -5116 0
c Var 'aux1278' direct represents '2' with '-5117'
5116 5118 -5117 0
c Encoding variable: aux1279 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1278))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5119'
c Var 'aux1279' direct represents '0' with '5119'
c Var 'aux1279' order represents '1' with '5120'
-5119 5120 0
c Var 'aux1279' direct represents '1' with '5121'
5119 -5120 5121 0
-5121 5120 0
-5121 -5119 0
c Var 'aux1279' order represents '2' with '5122'
-5120 5122 0
c Var 'aux1279' direct represents '2' with '5123'
5120 -5122 5123 0
-5123 5122 0
-5123 -5120 0
c Var 'aux1279' direct represents '3' with '-5122'
5119 5121 5123 -5122 0
c Encoding variable: aux1280 with domain: int(0..4) (representing constraint (aux1275 + aux1277))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5124'
c Var 'aux1280' direct represents '0' with '5124'
c Var 'aux1280' order represents '1' with '5125'
-5124 5125 0
c Var 'aux1280' direct represents '1' with '5126'
5124 -5125 5126 0
-5126 5125 0
-5126 -5124 0
c Var 'aux1280' order represents '2' with '5127'
-5125 5127 0
c Var 'aux1280' direct represents '2' with '5128'
5125 -5127 5128 0
-5128 5127 0
-5128 -5125 0
c Var 'aux1280' order represents '3' with '5129'
-5127 5129 0
c Var 'aux1280' direct represents '3' with '5130'
5127 -5129 5130 0
-5130 5129 0
-5130 -5127 0
c Var 'aux1280' direct represents '4' with '-5129'
5124 5126 5128 5130 -5129 0
c Encoding variable: aux1281 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5131'
c Var 'aux1281' direct represents '0' with '5131'
c Var 'aux1281' order represents '1' with '5132'
-5131 5132 0
c Var 'aux1281' direct represents '1' with '5133'
5131 -5132 5133 0
-5133 5132 0
-5133 -5131 0
c Var 'aux1281' direct represents '2' with '-5132'
5131 5133 -5132 0
c Encoding variable: aux1282 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5134'
c Var 'aux1282' direct represents '0' with '5134'
c Var 'aux1282' order represents '1' with '5135'
-5134 5135 0
c Var 'aux1282' direct represents '1' with '5136'
5134 -5135 5136 0
-5136 5135 0
-5136 -5134 0
c Var 'aux1282' direct represents '2' with '-5135'
5134 5136 -5135 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5137'
c Var 'aux1283' direct represents '0' with '5137'
c Var 'aux1283' order represents '1' with '5138'
-5137 5138 0
c Var 'aux1283' direct represents '1' with '5139'
5137 -5138 5139 0
-5139 5138 0
-5139 -5137 0
c Var 'aux1283' direct represents '2' with '-5138'
5137 5139 -5138 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5140'
c Var 'aux1284' direct represents '0' with '5140'
c Var 'aux1284' order represents '1' with '5141'
-5140 5141 0
c Var 'aux1284' direct represents '1' with '5142'
5140 -5141 5142 0
-5142 5141 0
-5142 -5140 0
c Var 'aux1284' direct represents '2' with '-5141'
5140 5142 -5141 0
c Encoding variable: aux1285 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1284))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5143'
c Var 'aux1285' direct represents '0' with '5143'
c Var 'aux1285' order represents '1' with '5144'
-5143 5144 0
c Var 'aux1285' direct represents '1' with '5145'
5143 -5144 5145 0
-5145 5144 0
-5145 -5143 0
c Var 'aux1285' order represents '2' with '5146'
-5144 5146 0
c Var 'aux1285' direct represents '2' with '5147'
5144 -5146 5147 0
-5147 5146 0
-5147 -5144 0
c Var 'aux1285' direct represents '3' with '-5146'
5143 5145 5147 -5146 0
c Encoding variable: aux1286 with domain: int(0..4) (representing constraint (aux1281 + aux1283))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5148'
c Var 'aux1286' direct represents '0' with '5148'
c Var 'aux1286' order represents '1' with '5149'
-5148 5149 0
c Var 'aux1286' direct represents '1' with '5150'
5148 -5149 5150 0
-5150 5149 0
-5150 -5148 0
c Var 'aux1286' order represents '2' with '5151'
-5149 5151 0
c Var 'aux1286' direct represents '2' with '5152'
5149 -5151 5152 0
-5152 5151 0
-5152 -5149 0
c Var 'aux1286' order represents '3' with '5153'
-5151 5153 0
c Var 'aux1286' direct represents '3' with '5154'
5151 -5153 5154 0
-5154 5153 0
-5154 -5151 0
c Var 'aux1286' direct represents '4' with '-5153'
5148 5150 5152 5154 -5153 0
c Encoding variable: aux1287 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5155'
c Var 'aux1287' direct represents '0' with '5155'
c Var 'aux1287' order represents '1' with '5156'
-5155 5156 0
c Var 'aux1287' direct represents '1' with '5157'
5155 -5156 5157 0
-5157 5156 0
-5157 -5155 0
c Var 'aux1287' direct represents '2' with '-5156'
5155 5157 -5156 0
c Encoding variable: aux1288 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5158'
c Var 'aux1288' direct represents '0' with '5158'
c Var 'aux1288' order represents '1' with '5159'
-5158 5159 0
c Var 'aux1288' direct represents '1' with '5160'
5158 -5159 5160 0
-5160 5159 0
-5160 -5158 0
c Var 'aux1288' direct represents '2' with '-5159'
5158 5160 -5159 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5161'
c Var 'aux1289' direct represents '0' with '5161'
c Var 'aux1289' order represents '1' with '5162'
-5161 5162 0
c Var 'aux1289' direct represents '1' with '5163'
5161 -5162 5163 0
-5163 5162 0
-5163 -5161 0
c Var 'aux1289' direct represents '2' with '-5162'
5161 5163 -5162 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5164'
c Var 'aux1290' direct represents '0' with '5164'
c Var 'aux1290' order represents '1' with '5165'
-5164 5165 0
c Var 'aux1290' direct represents '1' with '5166'
5164 -5165 5166 0
-5166 5165 0
-5166 -5164 0
c Var 'aux1290' direct represents '2' with '-5165'
5164 5166 -5165 0
c Encoding variable: aux1291 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1290))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5167'
c Var 'aux1291' direct represents '0' with '5167'
c Var 'aux1291' order represents '1' with '5168'
-5167 5168 0
c Var 'aux1291' direct represents '1' with '5169'
5167 -5168 5169 0
-5169 5168 0
-5169 -5167 0
c Var 'aux1291' order represents '2' with '5170'
-5168 5170 0
c Var 'aux1291' direct represents '2' with '5171'
5168 -5170 5171 0
-5171 5170 0
-5171 -5168 0
c Var 'aux1291' direct represents '3' with '-5170'
5167 5169 5171 -5170 0
c Encoding variable: aux1292 with domain: int(0..4) (representing constraint (aux1287 + aux1289))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5172'
c Var 'aux1292' direct represents '0' with '5172'
c Var 'aux1292' order represents '1' with '5173'
-5172 5173 0
c Var 'aux1292' direct represents '1' with '5174'
5172 -5173 5174 0
-5174 5173 0
-5174 -5172 0
c Var 'aux1292' order represents '2' with '5175'
-5173 5175 0
c Var 'aux1292' direct represents '2' with '5176'
5173 -5175 5176 0
-5176 5175 0
-5176 -5173 0
c Var 'aux1292' order represents '3' with '5177'
-5175 5177 0
c Var 'aux1292' direct represents '3' with '5178'
5175 -5177 5178 0
-5178 5177 0
-5178 -5175 0
c Var 'aux1292' direct represents '4' with '-5177'
5172 5174 5176 5178 -5177 0
c Encoding variable: aux1293 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5179'
c Var 'aux1293' direct represents '0' with '5179'
c Var 'aux1293' order represents '1' with '5180'
-5179 5180 0
c Var 'aux1293' direct represents '1' with '5181'
5179 -5180 5181 0
-5181 5180 0
-5181 -5179 0
c Var 'aux1293' direct represents '2' with '-5180'
5179 5181 -5180 0
c Encoding variable: aux1294 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5182'
c Var 'aux1294' direct represents '0' with '5182'
c Var 'aux1294' order represents '1' with '5183'
-5182 5183 0
c Var 'aux1294' direct represents '1' with '5184'
5182 -5183 5184 0
-5184 5183 0
-5184 -5182 0
c Var 'aux1294' direct represents '2' with '-5183'
5182 5184 -5183 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5185'
c Var 'aux1295' direct represents '0' with '5185'
c Var 'aux1295' order represents '1' with '5186'
-5185 5186 0
c Var 'aux1295' direct represents '1' with '5187'
5185 -5186 5187 0
-5187 5186 0
-5187 -5185 0
c Var 'aux1295' direct represents '2' with '-5186'
5185 5187 -5186 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5188'
c Var 'aux1296' direct represents '0' with '5188'
c Var 'aux1296' order represents '1' with '5189'
-5188 5189 0
c Var 'aux1296' direct represents '1' with '5190'
5188 -5189 5190 0
-5190 5189 0
-5190 -5188 0
c Var 'aux1296' direct represents '2' with '-5189'
5188 5190 -5189 0
c Encoding variable: aux1297 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1296))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5191'
c Var 'aux1297' direct represents '0' with '5191'
c Var 'aux1297' order represents '1' with '5192'
-5191 5192 0
c Var 'aux1297' direct represents '1' with '5193'
5191 -5192 5193 0
-5193 5192 0
-5193 -5191 0
c Var 'aux1297' order represents '2' with '5194'
-5192 5194 0
c Var 'aux1297' direct represents '2' with '5195'
5192 -5194 5195 0
-5195 5194 0
-5195 -5192 0
c Var 'aux1297' direct represents '3' with '-5194'
5191 5193 5195 -5194 0
c Encoding variable: aux1298 with domain: int(0..4) (representing constraint (aux1293 + aux1295))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5196'
c Var 'aux1298' direct represents '0' with '5196'
c Var 'aux1298' order represents '1' with '5197'
-5196 5197 0
c Var 'aux1298' direct represents '1' with '5198'
5196 -5197 5198 0
-5198 5197 0
-5198 -5196 0
c Var 'aux1298' order represents '2' with '5199'
-5197 5199 0
c Var 'aux1298' direct represents '2' with '5200'
5197 -5199 5200 0
-5200 5199 0
-5200 -5197 0
c Var 'aux1298' order represents '3' with '5201'
-5199 5201 0
c Var 'aux1298' direct represents '3' with '5202'
5199 -5201 5202 0
-5202 5201 0
-5202 -5199 0
c Var 'aux1298' direct represents '4' with '-5201'
5196 5198 5200 5202 -5201 0
c Encoding variable: aux1299 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5203'
c Var 'aux1299' direct represents '0' with '5203'
c Var 'aux1299' order represents '1' with '5204'
-5203 5204 0
c Var 'aux1299' direct represents '1' with '5205'
5203 -5204 5205 0
-5205 5204 0
-5205 -5203 0
c Var 'aux1299' direct represents '2' with '-5204'
5203 5205 -5204 0
c Encoding variable: aux1300 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5206'
c Var 'aux1300' direct represents '0' with '5206'
c Var 'aux1300' order represents '1' with '5207'
-5206 5207 0
c Var 'aux1300' direct represents '1' with '5208'
5206 -5207 5208 0
-5208 5207 0
-5208 -5206 0
c Var 'aux1300' direct represents '2' with '-5207'
5206 5208 -5207 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5209'
c Var 'aux1301' direct represents '0' with '5209'
c Var 'aux1301' order represents '1' with '5210'
-5209 5210 0
c Var 'aux1301' direct represents '1' with '5211'
5209 -5210 5211 0
-5211 5210 0
-5211 -5209 0
c Var 'aux1301' direct represents '2' with '-5210'
5209 5211 -5210 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5212'
c Var 'aux1302' direct represents '0' with '5212'
c Var 'aux1302' order represents '1' with '5213'
-5212 5213 0
c Var 'aux1302' direct represents '1' with '5214'
5212 -5213 5214 0
-5214 5213 0
-5214 -5212 0
c Var 'aux1302' direct represents '2' with '-5213'
5212 5214 -5213 0
c Encoding variable: aux1303 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1302))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5215'
c Var 'aux1303' direct represents '0' with '5215'
c Var 'aux1303' order represents '1' with '5216'
-5215 5216 0
c Var 'aux1303' direct represents '1' with '5217'
5215 -5216 5217 0
-5217 5216 0
-5217 -5215 0
c Var 'aux1303' order represents '2' with '5218'
-5216 5218 0
c Var 'aux1303' direct represents '2' with '5219'
5216 -5218 5219 0
-5219 5218 0
-5219 -5216 0
c Var 'aux1303' direct represents '3' with '-5218'
5215 5217 5219 -5218 0
c Encoding variable: aux1304 with domain: int(0..4) (representing constraint (aux1299 + aux1301))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5220'
c Var 'aux1304' direct represents '0' with '5220'
c Var 'aux1304' order represents '1' with '5221'
-5220 5221 0
c Var 'aux1304' direct represents '1' with '5222'
5220 -5221 5222 0
-5222 5221 0
-5222 -5220 0
c Var 'aux1304' order represents '2' with '5223'
-5221 5223 0
c Var 'aux1304' direct represents '2' with '5224'
5221 -5223 5224 0
-5224 5223 0
-5224 -5221 0
c Var 'aux1304' order represents '3' with '5225'
-5223 5225 0
c Var 'aux1304' direct represents '3' with '5226'
5223 -5225 5226 0
-5226 5225 0
-5226 -5223 0
c Var 'aux1304' direct represents '4' with '-5225'
5220 5222 5224 5226 -5225 0
c Encoding variable: aux1305 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5227'
c Var 'aux1305' direct represents '0' with '5227'
c Var 'aux1305' order represents '1' with '5228'
-5227 5228 0
c Var 'aux1305' direct represents '1' with '5229'
5227 -5228 5229 0
-5229 5228 0
-5229 -5227 0
c Var 'aux1305' direct represents '2' with '-5228'
5227 5229 -5228 0
c Encoding variable: aux1306 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5230'
c Var 'aux1306' direct represents '0' with '5230'
c Var 'aux1306' order represents '1' with '5231'
-5230 5231 0
c Var 'aux1306' direct represents '1' with '5232'
5230 -5231 5232 0
-5232 5231 0
-5232 -5230 0
c Var 'aux1306' direct represents '2' with '-5231'
5230 5232 -5231 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5233'
c Var 'aux1307' direct represents '0' with '5233'
c Var 'aux1307' order represents '1' with '5234'
-5233 5234 0
c Var 'aux1307' direct represents '1' with '5235'
5233 -5234 5235 0
-5235 5234 0
-5235 -5233 0
c Var 'aux1307' direct represents '2' with '-5234'
5233 5235 -5234 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5236'
c Var 'aux1308' direct represents '0' with '5236'
c Var 'aux1308' order represents '1' with '5237'
-5236 5237 0
c Var 'aux1308' direct represents '1' with '5238'
5236 -5237 5238 0
-5238 5237 0
-5238 -5236 0
c Var 'aux1308' direct represents '2' with '-5237'
5236 5238 -5237 0
c Encoding variable: aux1309 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1308))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5239'
c Var 'aux1309' direct represents '0' with '5239'
c Var 'aux1309' order represents '1' with '5240'
-5239 5240 0
c Var 'aux1309' direct represents '1' with '5241'
5239 -5240 5241 0
-5241 5240 0
-5241 -5239 0
c Var 'aux1309' order represents '2' with '5242'
-5240 5242 0
c Var 'aux1309' direct represents '2' with '5243'
5240 -5242 5243 0
-5243 5242 0
-5243 -5240 0
c Var 'aux1309' direct represents '3' with '-5242'
5239 5241 5243 -5242 0
c Encoding variable: aux1310 with domain: int(0..4) (representing constraint (aux1305 + aux1307))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5244'
c Var 'aux1310' direct represents '0' with '5244'
c Var 'aux1310' order represents '1' with '5245'
-5244 5245 0
c Var 'aux1310' direct represents '1' with '5246'
5244 -5245 5246 0
-5246 5245 0
-5246 -5244 0
c Var 'aux1310' order represents '2' with '5247'
-5245 5247 0
c Var 'aux1310' direct represents '2' with '5248'
5245 -5247 5248 0
-5248 5247 0
-5248 -5245 0
c Var 'aux1310' order represents '3' with '5249'
-5247 5249 0
c Var 'aux1310' direct represents '3' with '5250'
5247 -5249 5250 0
-5250 5249 0
-5250 -5247 0
c Var 'aux1310' direct represents '4' with '-5249'
5244 5246 5248 5250 -5249 0
c Encoding variable: aux1311 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5251'
c Var 'aux1311' direct represents '0' with '5251'
c Var 'aux1311' order represents '1' with '5252'
-5251 5252 0
c Var 'aux1311' direct represents '1' with '5253'
5251 -5252 5253 0
-5253 5252 0
-5253 -5251 0
c Var 'aux1311' direct represents '2' with '-5252'
5251 5253 -5252 0
c Encoding variable: aux1312 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5254'
c Var 'aux1312' direct represents '0' with '5254'
c Var 'aux1312' order represents '1' with '5255'
-5254 5255 0
c Var 'aux1312' direct represents '1' with '5256'
5254 -5255 5256 0
-5256 5255 0
-5256 -5254 0
c Var 'aux1312' direct represents '2' with '-5255'
5254 5256 -5255 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5257'
c Var 'aux1313' direct represents '0' with '5257'
c Var 'aux1313' order represents '1' with '5258'
-5257 5258 0
c Var 'aux1313' direct represents '1' with '5259'
5257 -5258 5259 0
-5259 5258 0
-5259 -5257 0
c Var 'aux1313' direct represents '2' with '-5258'
5257 5259 -5258 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5260'
c Var 'aux1314' direct represents '0' with '5260'
c Var 'aux1314' order represents '1' with '5261'
-5260 5261 0
c Var 'aux1314' direct represents '1' with '5262'
5260 -5261 5262 0
-5262 5261 0
-5262 -5260 0
c Var 'aux1314' direct represents '2' with '-5261'
5260 5262 -5261 0
c Encoding variable: aux1315 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1314))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5263'
c Var 'aux1315' direct represents '0' with '5263'
c Var 'aux1315' order represents '1' with '5264'
-5263 5264 0
c Var 'aux1315' direct represents '1' with '5265'
5263 -5264 5265 0
-5265 5264 0
-5265 -5263 0
c Var 'aux1315' order represents '2' with '5266'
-5264 5266 0
c Var 'aux1315' direct represents '2' with '5267'
5264 -5266 5267 0
-5267 5266 0
-5267 -5264 0
c Var 'aux1315' direct represents '3' with '-5266'
5263 5265 5267 -5266 0
c Encoding variable: aux1316 with domain: int(0..4) (representing constraint (aux1311 + aux1313))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5268'
c Var 'aux1316' direct represents '0' with '5268'
c Var 'aux1316' order represents '1' with '5269'
-5268 5269 0
c Var 'aux1316' direct represents '1' with '5270'
5268 -5269 5270 0
-5270 5269 0
-5270 -5268 0
c Var 'aux1316' order represents '2' with '5271'
-5269 5271 0
c Var 'aux1316' direct represents '2' with '5272'
5269 -5271 5272 0
-5272 5271 0
-5272 -5269 0
c Var 'aux1316' order represents '3' with '5273'
-5271 5273 0
c Var 'aux1316' direct represents '3' with '5274'
5271 -5273 5274 0
-5274 5273 0
-5274 -5271 0
c Var 'aux1316' direct represents '4' with '-5273'
5268 5270 5272 5274 -5273 0
c Encoding variable: aux1317 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5275'
c Var 'aux1317' direct represents '0' with '5275'
c Var 'aux1317' order represents '1' with '5276'
-5275 5276 0
c Var 'aux1317' direct represents '1' with '5277'
5275 -5276 5277 0
-5277 5276 0
-5277 -5275 0
c Var 'aux1317' direct represents '2' with '-5276'
5275 5277 -5276 0
c Encoding variable: aux1318 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5278'
c Var 'aux1318' direct represents '0' with '5278'
c Var 'aux1318' order represents '1' with '5279'
-5278 5279 0
c Var 'aux1318' direct represents '1' with '5280'
5278 -5279 5280 0
-5280 5279 0
-5280 -5278 0
c Var 'aux1318' direct represents '2' with '-5279'
5278 5280 -5279 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5281'
c Var 'aux1319' direct represents '0' with '5281'
c Var 'aux1319' order represents '1' with '5282'
-5281 5282 0
c Var 'aux1319' direct represents '1' with '5283'
5281 -5282 5283 0
-5283 5282 0
-5283 -5281 0
c Var 'aux1319' direct represents '2' with '-5282'
5281 5283 -5282 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5284'
c Var 'aux1320' direct represents '0' with '5284'
c Var 'aux1320' order represents '1' with '5285'
-5284 5285 0
c Var 'aux1320' direct represents '1' with '5286'
5284 -5285 5286 0
-5286 5285 0
-5286 -5284 0
c Var 'aux1320' direct represents '2' with '-5285'
5284 5286 -5285 0
c Encoding variable: aux1321 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1320))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5287'
c Var 'aux1321' direct represents '0' with '5287'
c Var 'aux1321' order represents '1' with '5288'
-5287 5288 0
c Var 'aux1321' direct represents '1' with '5289'
5287 -5288 5289 0
-5289 5288 0
-5289 -5287 0
c Var 'aux1321' order represents '2' with '5290'
-5288 5290 0
c Var 'aux1321' direct represents '2' with '5291'
5288 -5290 5291 0
-5291 5290 0
-5291 -5288 0
c Var 'aux1321' direct represents '3' with '-5290'
5287 5289 5291 -5290 0
c Encoding variable: aux1322 with domain: int(0..4) (representing constraint (aux1317 + aux1319))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5292'
c Var 'aux1322' direct represents '0' with '5292'
c Var 'aux1322' order represents '1' with '5293'
-5292 5293 0
c Var 'aux1322' direct represents '1' with '5294'
5292 -5293 5294 0
-5294 5293 0
-5294 -5292 0
c Var 'aux1322' order represents '2' with '5295'
-5293 5295 0
c Var 'aux1322' direct represents '2' with '5296'
5293 -5295 5296 0
-5296 5295 0
-5296 -5293 0
c Var 'aux1322' order represents '3' with '5297'
-5295 5297 0
c Var 'aux1322' direct represents '3' with '5298'
5295 -5297 5298 0
-5298 5297 0
-5298 -5295 0
c Var 'aux1322' direct represents '4' with '-5297'
5292 5294 5296 5298 -5297 0
c Encoding variable: aux1323 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5299'
c Var 'aux1323' direct represents '0' with '5299'
c Var 'aux1323' order represents '1' with '5300'
-5299 5300 0
c Var 'aux1323' direct represents '1' with '5301'
5299 -5300 5301 0
-5301 5300 0
-5301 -5299 0
c Var 'aux1323' direct represents '2' with '-5300'
5299 5301 -5300 0
c Encoding variable: aux1324 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5302'
c Var 'aux1324' direct represents '0' with '5302'
c Var 'aux1324' order represents '1' with '5303'
-5302 5303 0
c Var 'aux1324' direct represents '1' with '5304'
5302 -5303 5304 0
-5304 5303 0
-5304 -5302 0
c Var 'aux1324' direct represents '2' with '-5303'
5302 5304 -5303 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5305'
c Var 'aux1325' direct represents '0' with '5305'
c Var 'aux1325' order represents '1' with '5306'
-5305 5306 0
c Var 'aux1325' direct represents '1' with '5307'
5305 -5306 5307 0
-5307 5306 0
-5307 -5305 0
c Var 'aux1325' direct represents '2' with '-5306'
5305 5307 -5306 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5308'
c Var 'aux1326' direct represents '0' with '5308'
c Var 'aux1326' order represents '1' with '5309'
-5308 5309 0
c Var 'aux1326' direct represents '1' with '5310'
5308 -5309 5310 0
-5310 5309 0
-5310 -5308 0
c Var 'aux1326' direct represents '2' with '-5309'
5308 5310 -5309 0
c Encoding variable: aux1327 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1326))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5311'
c Var 'aux1327' direct represents '0' with '5311'
c Var 'aux1327' order represents '1' with '5312'
-5311 5312 0
c Var 'aux1327' direct represents '1' with '5313'
5311 -5312 5313 0
-5313 5312 0
-5313 -5311 0
c Var 'aux1327' order represents '2' with '5314'
-5312 5314 0
c Var 'aux1327' direct represents '2' with '5315'
5312 -5314 5315 0
-5315 5314 0
-5315 -5312 0
c Var 'aux1327' direct represents '3' with '-5314'
5311 5313 5315 -5314 0
c Encoding variable: aux1328 with domain: int(0..4) (representing constraint (aux1323 + aux1325))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5316'
c Var 'aux1328' direct represents '0' with '5316'
c Var 'aux1328' order represents '1' with '5317'
-5316 5317 0
c Var 'aux1328' direct represents '1' with '5318'
5316 -5317 5318 0
-5318 5317 0
-5318 -5316 0
c Var 'aux1328' order represents '2' with '5319'
-5317 5319 0
c Var 'aux1328' direct represents '2' with '5320'
5317 -5319 5320 0
-5320 5319 0
-5320 -5317 0
c Var 'aux1328' order represents '3' with '5321'
-5319 5321 0
c Var 'aux1328' direct represents '3' with '5322'
5319 -5321 5322 0
-5322 5321 0
-5322 -5319 0
c Var 'aux1328' direct represents '4' with '-5321'
5316 5318 5320 5322 -5321 0
c Encoding variable: aux1329 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5323'
c Var 'aux1329' direct represents '0' with '5323'
c Var 'aux1329' order represents '1' with '5324'
-5323 5324 0
c Var 'aux1329' direct represents '1' with '5325'
5323 -5324 5325 0
-5325 5324 0
-5325 -5323 0
c Var 'aux1329' direct represents '2' with '-5324'
5323 5325 -5324 0
c Encoding variable: aux1330 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5326'
c Var 'aux1330' direct represents '0' with '5326'
c Var 'aux1330' order represents '1' with '5327'
-5326 5327 0
c Var 'aux1330' direct represents '1' with '5328'
5326 -5327 5328 0
-5328 5327 0
-5328 -5326 0
c Var 'aux1330' direct represents '2' with '-5327'
5326 5328 -5327 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5329'
c Var 'aux1331' direct represents '0' with '5329'
c Var 'aux1331' order represents '1' with '5330'
-5329 5330 0
c Var 'aux1331' direct represents '1' with '5331'
5329 -5330 5331 0
-5331 5330 0
-5331 -5329 0
c Var 'aux1331' direct represents '2' with '-5330'
5329 5331 -5330 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5332'
c Var 'aux1332' direct represents '0' with '5332'
c Var 'aux1332' order represents '1' with '5333'
-5332 5333 0
c Var 'aux1332' direct represents '1' with '5334'
5332 -5333 5334 0
-5334 5333 0
-5334 -5332 0
c Var 'aux1332' direct represents '2' with '-5333'
5332 5334 -5333 0
c Encoding variable: aux1333 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1332))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5335'
c Var 'aux1333' direct represents '0' with '5335'
c Var 'aux1333' order represents '1' with '5336'
-5335 5336 0
c Var 'aux1333' direct represents '1' with '5337'
5335 -5336 5337 0
-5337 5336 0
-5337 -5335 0
c Var 'aux1333' order represents '2' with '5338'
-5336 5338 0
c Var 'aux1333' direct represents '2' with '5339'
5336 -5338 5339 0
-5339 5338 0
-5339 -5336 0
c Var 'aux1333' direct represents '3' with '-5338'
5335 5337 5339 -5338 0
c Encoding variable: aux1334 with domain: int(0..4) (representing constraint (aux1329 + aux1331))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5340'
c Var 'aux1334' direct represents '0' with '5340'
c Var 'aux1334' order represents '1' with '5341'
-5340 5341 0
c Var 'aux1334' direct represents '1' with '5342'
5340 -5341 5342 0
-5342 5341 0
-5342 -5340 0
c Var 'aux1334' order represents '2' with '5343'
-5341 5343 0
c Var 'aux1334' direct represents '2' with '5344'
5341 -5343 5344 0
-5344 5343 0
-5344 -5341 0
c Var 'aux1334' order represents '3' with '5345'
-5343 5345 0
c Var 'aux1334' direct represents '3' with '5346'
5343 -5345 5346 0
-5346 5345 0
-5346 -5343 0
c Var 'aux1334' direct represents '4' with '-5345'
5340 5342 5344 5346 -5345 0
c Encoding variable: aux1335 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5347'
c Var 'aux1335' direct represents '0' with '5347'
c Var 'aux1335' order represents '1' with '5348'
-5347 5348 0
c Var 'aux1335' direct represents '1' with '5349'
5347 -5348 5349 0
-5349 5348 0
-5349 -5347 0
c Var 'aux1335' direct represents '2' with '-5348'
5347 5349 -5348 0
c Encoding variable: aux1336 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5350'
c Var 'aux1336' direct represents '0' with '5350'
c Var 'aux1336' order represents '1' with '5351'
-5350 5351 0
c Var 'aux1336' direct represents '1' with '5352'
5350 -5351 5352 0
-5352 5351 0
-5352 -5350 0
c Var 'aux1336' direct represents '2' with '-5351'
5350 5352 -5351 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5353'
c Var 'aux1337' direct represents '0' with '5353'
c Var 'aux1337' order represents '1' with '5354'
-5353 5354 0
c Var 'aux1337' direct represents '1' with '5355'
5353 -5354 5355 0
-5355 5354 0
-5355 -5353 0
c Var 'aux1337' direct represents '2' with '-5354'
5353 5355 -5354 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5356'
c Var 'aux1338' direct represents '0' with '5356'
c Var 'aux1338' order represents '1' with '5357'
-5356 5357 0
c Var 'aux1338' direct represents '1' with '5358'
5356 -5357 5358 0
-5358 5357 0
-5358 -5356 0
c Var 'aux1338' direct represents '2' with '-5357'
5356 5358 -5357 0
c Encoding variable: aux1339 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1338))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5359'
c Var 'aux1339' direct represents '0' with '5359'
c Var 'aux1339' order represents '1' with '5360'
-5359 5360 0
c Var 'aux1339' direct represents '1' with '5361'
5359 -5360 5361 0
-5361 5360 0
-5361 -5359 0
c Var 'aux1339' order represents '2' with '5362'
-5360 5362 0
c Var 'aux1339' direct represents '2' with '5363'
5360 -5362 5363 0
-5363 5362 0
-5363 -5360 0
c Var 'aux1339' direct represents '3' with '-5362'
5359 5361 5363 -5362 0
c Encoding variable: aux1340 with domain: int(0..4) (representing constraint (aux1335 + aux1337))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5364'
c Var 'aux1340' direct represents '0' with '5364'
c Var 'aux1340' order represents '1' with '5365'
-5364 5365 0
c Var 'aux1340' direct represents '1' with '5366'
5364 -5365 5366 0
-5366 5365 0
-5366 -5364 0
c Var 'aux1340' order represents '2' with '5367'
-5365 5367 0
c Var 'aux1340' direct represents '2' with '5368'
5365 -5367 5368 0
-5368 5367 0
-5368 -5365 0
c Var 'aux1340' order represents '3' with '5369'
-5367 5369 0
c Var 'aux1340' direct represents '3' with '5370'
5367 -5369 5370 0
-5370 5369 0
-5370 -5367 0
c Var 'aux1340' direct represents '4' with '-5369'
5364 5366 5368 5370 -5369 0
c Encoding variable: aux1341 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5371'
c Var 'aux1341' direct represents '0' with '5371'
c Var 'aux1341' order represents '1' with '5372'
-5371 5372 0
c Var 'aux1341' direct represents '1' with '5373'
5371 -5372 5373 0
-5373 5372 0
-5373 -5371 0
c Var 'aux1341' direct represents '2' with '-5372'
5371 5373 -5372 0
c Encoding variable: aux1342 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5374'
c Var 'aux1342' direct represents '0' with '5374'
c Var 'aux1342' order represents '1' with '5375'
-5374 5375 0
c Var 'aux1342' direct represents '1' with '5376'
5374 -5375 5376 0
-5376 5375 0
-5376 -5374 0
c Var 'aux1342' direct represents '2' with '-5375'
5374 5376 -5375 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5377'
c Var 'aux1343' direct represents '0' with '5377'
c Var 'aux1343' order represents '1' with '5378'
-5377 5378 0
c Var 'aux1343' direct represents '1' with '5379'
5377 -5378 5379 0
-5379 5378 0
-5379 -5377 0
c Var 'aux1343' direct represents '2' with '-5378'
5377 5379 -5378 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5380'
c Var 'aux1344' direct represents '0' with '5380'
c Var 'aux1344' order represents '1' with '5381'
-5380 5381 0
c Var 'aux1344' direct represents '1' with '5382'
5380 -5381 5382 0
-5382 5381 0
-5382 -5380 0
c Var 'aux1344' direct represents '2' with '-5381'
5380 5382 -5381 0
c Encoding variable: aux1345 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1344))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5383'
c Var 'aux1345' direct represents '0' with '5383'
c Var 'aux1345' order represents '1' with '5384'
-5383 5384 0
c Var 'aux1345' direct represents '1' with '5385'
5383 -5384 5385 0
-5385 5384 0
-5385 -5383 0
c Var 'aux1345' order represents '2' with '5386'
-5384 5386 0
c Var 'aux1345' direct represents '2' with '5387'
5384 -5386 5387 0
-5387 5386 0
-5387 -5384 0
c Var 'aux1345' direct represents '3' with '-5386'
5383 5385 5387 -5386 0
c Encoding variable: aux1346 with domain: int(0..4) (representing constraint (aux1341 + aux1343))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5388'
c Var 'aux1346' direct represents '0' with '5388'
c Var 'aux1346' order represents '1' with '5389'
-5388 5389 0
c Var 'aux1346' direct represents '1' with '5390'
5388 -5389 5390 0
-5390 5389 0
-5390 -5388 0
c Var 'aux1346' order represents '2' with '5391'
-5389 5391 0
c Var 'aux1346' direct represents '2' with '5392'
5389 -5391 5392 0
-5392 5391 0
-5392 -5389 0
c Var 'aux1346' order represents '3' with '5393'
-5391 5393 0
c Var 'aux1346' direct represents '3' with '5394'
5391 -5393 5394 0
-5394 5393 0
-5394 -5391 0
c Var 'aux1346' direct represents '4' with '-5393'
5388 5390 5392 5394 -5393 0
c Encoding variable: aux1347 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5395'
c Var 'aux1347' direct represents '0' with '5395'
c Var 'aux1347' order represents '1' with '5396'
-5395 5396 0
c Var 'aux1347' direct represents '1' with '5397'
5395 -5396 5397 0
-5397 5396 0
-5397 -5395 0
c Var 'aux1347' direct represents '2' with '-5396'
5395 5397 -5396 0
c Encoding variable: aux1348 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5398'
c Var 'aux1348' direct represents '0' with '5398'
c Var 'aux1348' order represents '1' with '5399'
-5398 5399 0
c Var 'aux1348' direct represents '1' with '5400'
5398 -5399 5400 0
-5400 5399 0
-5400 -5398 0
c Var 'aux1348' direct represents '2' with '-5399'
5398 5400 -5399 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5401'
c Var 'aux1349' direct represents '0' with '5401'
c Var 'aux1349' order represents '1' with '5402'
-5401 5402 0
c Var 'aux1349' direct represents '1' with '5403'
5401 -5402 5403 0
-5403 5402 0
-5403 -5401 0
c Var 'aux1349' direct represents '2' with '-5402'
5401 5403 -5402 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5404'
c Var 'aux1350' direct represents '0' with '5404'
c Var 'aux1350' order represents '1' with '5405'
-5404 5405 0
c Var 'aux1350' direct represents '1' with '5406'
5404 -5405 5406 0
-5406 5405 0
-5406 -5404 0
c Var 'aux1350' direct represents '2' with '-5405'
5404 5406 -5405 0
c Encoding variable: aux1351 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1350))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5407'
c Var 'aux1351' direct represents '0' with '5407'
c Var 'aux1351' order represents '1' with '5408'
-5407 5408 0
c Var 'aux1351' direct represents '1' with '5409'
5407 -5408 5409 0
-5409 5408 0
-5409 -5407 0
c Var 'aux1351' order represents '2' with '5410'
-5408 5410 0
c Var 'aux1351' direct represents '2' with '5411'
5408 -5410 5411 0
-5411 5410 0
-5411 -5408 0
c Var 'aux1351' direct represents '3' with '-5410'
5407 5409 5411 -5410 0
c Encoding variable: aux1352 with domain: int(0..4) (representing constraint (aux1347 + aux1349))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5412'
c Var 'aux1352' direct represents '0' with '5412'
c Var 'aux1352' order represents '1' with '5413'
-5412 5413 0
c Var 'aux1352' direct represents '1' with '5414'
5412 -5413 5414 0
-5414 5413 0
-5414 -5412 0
c Var 'aux1352' order represents '2' with '5415'
-5413 5415 0
c Var 'aux1352' direct represents '2' with '5416'
5413 -5415 5416 0
-5416 5415 0
-5416 -5413 0
c Var 'aux1352' order represents '3' with '5417'
-5415 5417 0
c Var 'aux1352' direct represents '3' with '5418'
5415 -5417 5418 0
-5418 5417 0
-5418 -5415 0
c Var 'aux1352' direct represents '4' with '-5417'
5412 5414 5416 5418 -5417 0
c Encoding variable: aux1353 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5419'
c Var 'aux1353' direct represents '0' with '5419'
c Var 'aux1353' order represents '1' with '5420'
-5419 5420 0
c Var 'aux1353' direct represents '1' with '5421'
5419 -5420 5421 0
-5421 5420 0
-5421 -5419 0
c Var 'aux1353' direct represents '2' with '-5420'
5419 5421 -5420 0
c Encoding variable: aux1354 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5422'
c Var 'aux1354' direct represents '0' with '5422'
c Var 'aux1354' order represents '1' with '5423'
-5422 5423 0
c Var 'aux1354' direct represents '1' with '5424'
5422 -5423 5424 0
-5424 5423 0
-5424 -5422 0
c Var 'aux1354' direct represents '2' with '-5423'
5422 5424 -5423 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5425'
c Var 'aux1355' direct represents '0' with '5425'
c Var 'aux1355' order represents '1' with '5426'
-5425 5426 0
c Var 'aux1355' direct represents '1' with '5427'
5425 -5426 5427 0
-5427 5426 0
-5427 -5425 0
c Var 'aux1355' direct represents '2' with '-5426'
5425 5427 -5426 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5428'
c Var 'aux1356' direct represents '0' with '5428'
c Var 'aux1356' order represents '1' with '5429'
-5428 5429 0
c Var 'aux1356' direct represents '1' with '5430'
5428 -5429 5430 0
-5430 5429 0
-5430 -5428 0
c Var 'aux1356' direct represents '2' with '-5429'
5428 5430 -5429 0
c Encoding variable: aux1357 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1356))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5431'
c Var 'aux1357' direct represents '0' with '5431'
c Var 'aux1357' order represents '1' with '5432'
-5431 5432 0
c Var 'aux1357' direct represents '1' with '5433'
5431 -5432 5433 0
-5433 5432 0
-5433 -5431 0
c Var 'aux1357' order represents '2' with '5434'
-5432 5434 0
c Var 'aux1357' direct represents '2' with '5435'
5432 -5434 5435 0
-5435 5434 0
-5435 -5432 0
c Var 'aux1357' direct represents '3' with '-5434'
5431 5433 5435 -5434 0
c Encoding variable: aux1358 with domain: int(0..4) (representing constraint (aux1353 + aux1355))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5436'
c Var 'aux1358' direct represents '0' with '5436'
c Var 'aux1358' order represents '1' with '5437'
-5436 5437 0
c Var 'aux1358' direct represents '1' with '5438'
5436 -5437 5438 0
-5438 5437 0
-5438 -5436 0
c Var 'aux1358' order represents '2' with '5439'
-5437 5439 0
c Var 'aux1358' direct represents '2' with '5440'
5437 -5439 5440 0
-5440 5439 0
-5440 -5437 0
c Var 'aux1358' order represents '3' with '5441'
-5439 5441 0
c Var 'aux1358' direct represents '3' with '5442'
5439 -5441 5442 0
-5442 5441 0
-5442 -5439 0
c Var 'aux1358' direct represents '4' with '-5441'
5436 5438 5440 5442 -5441 0
c Encoding variable: aux1359 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5443'
c Var 'aux1359' direct represents '0' with '5443'
c Var 'aux1359' order represents '1' with '5444'
-5443 5444 0
c Var 'aux1359' direct represents '1' with '5445'
5443 -5444 5445 0
-5445 5444 0
-5445 -5443 0
c Var 'aux1359' direct represents '2' with '-5444'
5443 5445 -5444 0
c Encoding variable: aux1360 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5446'
c Var 'aux1360' direct represents '0' with '5446'
c Var 'aux1360' order represents '1' with '5447'
-5446 5447 0
c Var 'aux1360' direct represents '1' with '5448'
5446 -5447 5448 0
-5448 5447 0
-5448 -5446 0
c Var 'aux1360' direct represents '2' with '-5447'
5446 5448 -5447 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5449'
c Var 'aux1361' direct represents '0' with '5449'
c Var 'aux1361' order represents '1' with '5450'
-5449 5450 0
c Var 'aux1361' direct represents '1' with '5451'
5449 -5450 5451 0
-5451 5450 0
-5451 -5449 0
c Var 'aux1361' direct represents '2' with '-5450'
5449 5451 -5450 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5452'
c Var 'aux1362' direct represents '0' with '5452'
c Var 'aux1362' order represents '1' with '5453'
-5452 5453 0
c Var 'aux1362' direct represents '1' with '5454'
5452 -5453 5454 0
-5454 5453 0
-5454 -5452 0
c Var 'aux1362' direct represents '2' with '-5453'
5452 5454 -5453 0
c Encoding variable: aux1363 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1362))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5455'
c Var 'aux1363' direct represents '0' with '5455'
c Var 'aux1363' order represents '1' with '5456'
-5455 5456 0
c Var 'aux1363' direct represents '1' with '5457'
5455 -5456 5457 0
-5457 5456 0
-5457 -5455 0
c Var 'aux1363' order represents '2' with '5458'
-5456 5458 0
c Var 'aux1363' direct represents '2' with '5459'
5456 -5458 5459 0
-5459 5458 0
-5459 -5456 0
c Var 'aux1363' direct represents '3' with '-5458'
5455 5457 5459 -5458 0
c Encoding variable: aux1364 with domain: int(0..4) (representing constraint (aux1359 + aux1361))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5460'
c Var 'aux1364' direct represents '0' with '5460'
c Var 'aux1364' order represents '1' with '5461'
-5460 5461 0
c Var 'aux1364' direct represents '1' with '5462'
5460 -5461 5462 0
-5462 5461 0
-5462 -5460 0
c Var 'aux1364' order represents '2' with '5463'
-5461 5463 0
c Var 'aux1364' direct represents '2' with '5464'
5461 -5463 5464 0
-5464 5463 0
-5464 -5461 0
c Var 'aux1364' order represents '3' with '5465'
-5463 5465 0
c Var 'aux1364' direct represents '3' with '5466'
5463 -5465 5466 0
-5466 5465 0
-5466 -5463 0
c Var 'aux1364' direct represents '4' with '-5465'
5460 5462 5464 5466 -5465 0
c Encoding variable: aux1365 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5467'
c Var 'aux1365' direct represents '0' with '5467'
c Var 'aux1365' order represents '1' with '5468'
-5467 5468 0
c Var 'aux1365' direct represents '1' with '5469'
5467 -5468 5469 0
-5469 5468 0
-5469 -5467 0
c Var 'aux1365' direct represents '2' with '-5468'
5467 5469 -5468 0
c Encoding variable: aux1366 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5470'
c Var 'aux1366' direct represents '0' with '5470'
c Var 'aux1366' order represents '1' with '5471'
-5470 5471 0
c Var 'aux1366' direct represents '1' with '5472'
5470 -5471 5472 0
-5472 5471 0
-5472 -5470 0
c Var 'aux1366' direct represents '2' with '-5471'
5470 5472 -5471 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5473'
c Var 'aux1367' direct represents '0' with '5473'
c Var 'aux1367' order represents '1' with '5474'
-5473 5474 0
c Var 'aux1367' direct represents '1' with '5475'
5473 -5474 5475 0
-5475 5474 0
-5475 -5473 0
c Var 'aux1367' direct represents '2' with '-5474'
5473 5475 -5474 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5476'
c Var 'aux1368' direct represents '0' with '5476'
c Var 'aux1368' order represents '1' with '5477'
-5476 5477 0
c Var 'aux1368' direct represents '1' with '5478'
5476 -5477 5478 0
-5478 5477 0
-5478 -5476 0
c Var 'aux1368' direct represents '2' with '-5477'
5476 5478 -5477 0
c Encoding variable: aux1369 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1368))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5479'
c Var 'aux1369' direct represents '0' with '5479'
c Var 'aux1369' order represents '1' with '5480'
-5479 5480 0
c Var 'aux1369' direct represents '1' with '5481'
5479 -5480 5481 0
-5481 5480 0
-5481 -5479 0
c Var 'aux1369' order represents '2' with '5482'
-5480 5482 0
c Var 'aux1369' direct represents '2' with '5483'
5480 -5482 5483 0
-5483 5482 0
-5483 -5480 0
c Var 'aux1369' direct represents '3' with '-5482'
5479 5481 5483 -5482 0
c Encoding variable: aux1370 with domain: int(0..4) (representing constraint (aux1365 + aux1367))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5484'
c Var 'aux1370' direct represents '0' with '5484'
c Var 'aux1370' order represents '1' with '5485'
-5484 5485 0
c Var 'aux1370' direct represents '1' with '5486'
5484 -5485 5486 0
-5486 5485 0
-5486 -5484 0
c Var 'aux1370' order represents '2' with '5487'
-5485 5487 0
c Var 'aux1370' direct represents '2' with '5488'
5485 -5487 5488 0
-5488 5487 0
-5488 -5485 0
c Var 'aux1370' order represents '3' with '5489'
-5487 5489 0
c Var 'aux1370' direct represents '3' with '5490'
5487 -5489 5490 0
-5490 5489 0
-5490 -5487 0
c Var 'aux1370' direct represents '4' with '-5489'
5484 5486 5488 5490 -5489 0
c Encoding variable: aux1371 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5491'
c Var 'aux1371' direct represents '0' with '5491'
c Var 'aux1371' order represents '1' with '5492'
-5491 5492 0
c Var 'aux1371' direct represents '1' with '5493'
5491 -5492 5493 0
-5493 5492 0
-5493 -5491 0
c Var 'aux1371' direct represents '2' with '-5492'
5491 5493 -5492 0
c Encoding variable: aux1372 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5494'
c Var 'aux1372' direct represents '0' with '5494'
c Var 'aux1372' order represents '1' with '5495'
-5494 5495 0
c Var 'aux1372' direct represents '1' with '5496'
5494 -5495 5496 0
-5496 5495 0
-5496 -5494 0
c Var 'aux1372' direct represents '2' with '-5495'
5494 5496 -5495 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5497'
c Var 'aux1373' direct represents '0' with '5497'
c Var 'aux1373' order represents '1' with '5498'
-5497 5498 0
c Var 'aux1373' direct represents '1' with '5499'
5497 -5498 5499 0
-5499 5498 0
-5499 -5497 0
c Var 'aux1373' direct represents '2' with '-5498'
5497 5499 -5498 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5500'
c Var 'aux1374' direct represents '0' with '5500'
c Var 'aux1374' order represents '1' with '5501'
-5500 5501 0
c Var 'aux1374' direct represents '1' with '5502'
5500 -5501 5502 0
-5502 5501 0
-5502 -5500 0
c Var 'aux1374' direct represents '2' with '-5501'
5500 5502 -5501 0
c Encoding variable: aux1375 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1374))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5503'
c Var 'aux1375' direct represents '0' with '5503'
c Var 'aux1375' order represents '1' with '5504'
-5503 5504 0
c Var 'aux1375' direct represents '1' with '5505'
5503 -5504 5505 0
-5505 5504 0
-5505 -5503 0
c Var 'aux1375' order represents '2' with '5506'
-5504 5506 0
c Var 'aux1375' direct represents '2' with '5507'
5504 -5506 5507 0
-5507 5506 0
-5507 -5504 0
c Var 'aux1375' direct represents '3' with '-5506'
5503 5505 5507 -5506 0
c Encoding variable: aux1376 with domain: int(0..4) (representing constraint (aux1371 + aux1373))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5508'
c Var 'aux1376' direct represents '0' with '5508'
c Var 'aux1376' order represents '1' with '5509'
-5508 5509 0
c Var 'aux1376' direct represents '1' with '5510'
5508 -5509 5510 0
-5510 5509 0
-5510 -5508 0
c Var 'aux1376' order represents '2' with '5511'
-5509 5511 0
c Var 'aux1376' direct represents '2' with '5512'
5509 -5511 5512 0
-5512 5511 0
-5512 -5509 0
c Var 'aux1376' order represents '3' with '5513'
-5511 5513 0
c Var 'aux1376' direct represents '3' with '5514'
5511 -5513 5514 0
-5514 5513 0
-5514 -5511 0
c Var 'aux1376' direct represents '4' with '-5513'
5508 5510 5512 5514 -5513 0
c Encoding variable: aux1377 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5515'
c Var 'aux1377' direct represents '0' with '5515'
c Var 'aux1377' order represents '1' with '5516'
-5515 5516 0
c Var 'aux1377' direct represents '1' with '5517'
5515 -5516 5517 0
-5517 5516 0
-5517 -5515 0
c Var 'aux1377' direct represents '2' with '-5516'
5515 5517 -5516 0
c Encoding variable: aux1378 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5518'
c Var 'aux1378' direct represents '0' with '5518'
c Var 'aux1378' order represents '1' with '5519'
-5518 5519 0
c Var 'aux1378' direct represents '1' with '5520'
5518 -5519 5520 0
-5520 5519 0
-5520 -5518 0
c Var 'aux1378' direct represents '2' with '-5519'
5518 5520 -5519 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5521'
c Var 'aux1379' direct represents '0' with '5521'
c Var 'aux1379' order represents '1' with '5522'
-5521 5522 0
c Var 'aux1379' direct represents '1' with '5523'
5521 -5522 5523 0
-5523 5522 0
-5523 -5521 0
c Var 'aux1379' direct represents '2' with '-5522'
5521 5523 -5522 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5524'
c Var 'aux1380' direct represents '0' with '5524'
c Var 'aux1380' order represents '1' with '5525'
-5524 5525 0
c Var 'aux1380' direct represents '1' with '5526'
5524 -5525 5526 0
-5526 5525 0
-5526 -5524 0
c Var 'aux1380' direct represents '2' with '-5525'
5524 5526 -5525 0
c Encoding variable: aux1381 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1380))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5527'
c Var 'aux1381' direct represents '0' with '5527'
c Var 'aux1381' order represents '1' with '5528'
-5527 5528 0
c Var 'aux1381' direct represents '1' with '5529'
5527 -5528 5529 0
-5529 5528 0
-5529 -5527 0
c Var 'aux1381' order represents '2' with '5530'
-5528 5530 0
c Var 'aux1381' direct represents '2' with '5531'
5528 -5530 5531 0
-5531 5530 0
-5531 -5528 0
c Var 'aux1381' direct represents '3' with '-5530'
5527 5529 5531 -5530 0
c Encoding variable: aux1382 with domain: int(0..4) (representing constraint (aux1377 + aux1379))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5532'
c Var 'aux1382' direct represents '0' with '5532'
c Var 'aux1382' order represents '1' with '5533'
-5532 5533 0
c Var 'aux1382' direct represents '1' with '5534'
5532 -5533 5534 0
-5534 5533 0
-5534 -5532 0
c Var 'aux1382' order represents '2' with '5535'
-5533 5535 0
c Var 'aux1382' direct represents '2' with '5536'
5533 -5535 5536 0
-5536 5535 0
-5536 -5533 0
c Var 'aux1382' order represents '3' with '5537'
-5535 5537 0
c Var 'aux1382' direct represents '3' with '5538'
5535 -5537 5538 0
-5538 5537 0
-5538 -5535 0
c Var 'aux1382' direct represents '4' with '-5537'
5532 5534 5536 5538 -5537 0
c Encoding variable: aux1383 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5539'
c Var 'aux1383' direct represents '0' with '5539'
c Var 'aux1383' order represents '1' with '5540'
-5539 5540 0
c Var 'aux1383' direct represents '1' with '5541'
5539 -5540 5541 0
-5541 5540 0
-5541 -5539 0
c Var 'aux1383' direct represents '2' with '-5540'
5539 5541 -5540 0
c Encoding variable: aux1384 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5542'
c Var 'aux1384' direct represents '0' with '5542'
c Var 'aux1384' order represents '1' with '5543'
-5542 5543 0
c Var 'aux1384' direct represents '1' with '5544'
5542 -5543 5544 0
-5544 5543 0
-5544 -5542 0
c Var 'aux1384' direct represents '2' with '-5543'
5542 5544 -5543 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5545'
c Var 'aux1385' direct represents '0' with '5545'
c Var 'aux1385' order represents '1' with '5546'
-5545 5546 0
c Var 'aux1385' direct represents '1' with '5547'
5545 -5546 5547 0
-5547 5546 0
-5547 -5545 0
c Var 'aux1385' direct represents '2' with '-5546'
5545 5547 -5546 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5548'
c Var 'aux1386' direct represents '0' with '5548'
c Var 'aux1386' order represents '1' with '5549'
-5548 5549 0
c Var 'aux1386' direct represents '1' with '5550'
5548 -5549 5550 0
-5550 5549 0
-5550 -5548 0
c Var 'aux1386' direct represents '2' with '-5549'
5548 5550 -5549 0
c Encoding variable: aux1387 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1386))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5551'
c Var 'aux1387' direct represents '0' with '5551'
c Var 'aux1387' order represents '1' with '5552'
-5551 5552 0
c Var 'aux1387' direct represents '1' with '5553'
5551 -5552 5553 0
-5553 5552 0
-5553 -5551 0
c Var 'aux1387' order represents '2' with '5554'
-5552 5554 0
c Var 'aux1387' direct represents '2' with '5555'
5552 -5554 5555 0
-5555 5554 0
-5555 -5552 0
c Var 'aux1387' direct represents '3' with '-5554'
5551 5553 5555 -5554 0
c Encoding variable: aux1388 with domain: int(0..4) (representing constraint (aux1383 + aux1385))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5556'
c Var 'aux1388' direct represents '0' with '5556'
c Var 'aux1388' order represents '1' with '5557'
-5556 5557 0
c Var 'aux1388' direct represents '1' with '5558'
5556 -5557 5558 0
-5558 5557 0
-5558 -5556 0
c Var 'aux1388' order represents '2' with '5559'
-5557 5559 0
c Var 'aux1388' direct represents '2' with '5560'
5557 -5559 5560 0
-5560 5559 0
-5560 -5557 0
c Var 'aux1388' order represents '3' with '5561'
-5559 5561 0
c Var 'aux1388' direct represents '3' with '5562'
5559 -5561 5562 0
-5562 5561 0
-5562 -5559 0
c Var 'aux1388' direct represents '4' with '-5561'
5556 5558 5560 5562 -5561 0
c Encoding variable: aux1389 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5563'
c Var 'aux1389' direct represents '0' with '5563'
c Var 'aux1389' order represents '1' with '5564'
-5563 5564 0
c Var 'aux1389' direct represents '1' with '5565'
5563 -5564 5565 0
-5565 5564 0
-5565 -5563 0
c Var 'aux1389' direct represents '2' with '-5564'
5563 5565 -5564 0
c Encoding variable: aux1390 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5566'
c Var 'aux1390' direct represents '0' with '5566'
c Var 'aux1390' order represents '1' with '5567'
-5566 5567 0
c Var 'aux1390' direct represents '1' with '5568'
5566 -5567 5568 0
-5568 5567 0
-5568 -5566 0
c Var 'aux1390' direct represents '2' with '-5567'
5566 5568 -5567 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5569'
c Var 'aux1391' direct represents '0' with '5569'
c Var 'aux1391' order represents '1' with '5570'
-5569 5570 0
c Var 'aux1391' direct represents '1' with '5571'
5569 -5570 5571 0
-5571 5570 0
-5571 -5569 0
c Var 'aux1391' direct represents '2' with '-5570'
5569 5571 -5570 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5572'
c Var 'aux1392' direct represents '0' with '5572'
c Var 'aux1392' order represents '1' with '5573'
-5572 5573 0
c Var 'aux1392' direct represents '1' with '5574'
5572 -5573 5574 0
-5574 5573 0
-5574 -5572 0
c Var 'aux1392' direct represents '2' with '-5573'
5572 5574 -5573 0
c Encoding variable: aux1393 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1392))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5575'
c Var 'aux1393' direct represents '0' with '5575'
c Var 'aux1393' order represents '1' with '5576'
-5575 5576 0
c Var 'aux1393' direct represents '1' with '5577'
5575 -5576 5577 0
-5577 5576 0
-5577 -5575 0
c Var 'aux1393' order represents '2' with '5578'
-5576 5578 0
c Var 'aux1393' direct represents '2' with '5579'
5576 -5578 5579 0
-5579 5578 0
-5579 -5576 0
c Var 'aux1393' direct represents '3' with '-5578'
5575 5577 5579 -5578 0
c Encoding variable: aux1394 with domain: int(0..4) (representing constraint (aux1389 + aux1391))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5580'
c Var 'aux1394' direct represents '0' with '5580'
c Var 'aux1394' order represents '1' with '5581'
-5580 5581 0
c Var 'aux1394' direct represents '1' with '5582'
5580 -5581 5582 0
-5582 5581 0
-5582 -5580 0
c Var 'aux1394' order represents '2' with '5583'
-5581 5583 0
c Var 'aux1394' direct represents '2' with '5584'
5581 -5583 5584 0
-5584 5583 0
-5584 -5581 0
c Var 'aux1394' order represents '3' with '5585'
-5583 5585 0
c Var 'aux1394' direct represents '3' with '5586'
5583 -5585 5586 0
-5586 5585 0
-5586 -5583 0
c Var 'aux1394' direct represents '4' with '-5585'
5580 5582 5584 5586 -5585 0
c Encoding variable: aux1395 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5587'
c Var 'aux1395' direct represents '0' with '5587'
c Var 'aux1395' order represents '1' with '5588'
-5587 5588 0
c Var 'aux1395' direct represents '1' with '5589'
5587 -5588 5589 0
-5589 5588 0
-5589 -5587 0
c Var 'aux1395' direct represents '2' with '-5588'
5587 5589 -5588 0
c Encoding variable: aux1396 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5590'
c Var 'aux1396' direct represents '0' with '5590'
c Var 'aux1396' order represents '1' with '5591'
-5590 5591 0
c Var 'aux1396' direct represents '1' with '5592'
5590 -5591 5592 0
-5592 5591 0
-5592 -5590 0
c Var 'aux1396' direct represents '2' with '-5591'
5590 5592 -5591 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5593'
c Var 'aux1397' direct represents '0' with '5593'
c Var 'aux1397' order represents '1' with '5594'
-5593 5594 0
c Var 'aux1397' direct represents '1' with '5595'
5593 -5594 5595 0
-5595 5594 0
-5595 -5593 0
c Var 'aux1397' direct represents '2' with '-5594'
5593 5595 -5594 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5596'
c Var 'aux1398' direct represents '0' with '5596'
c Var 'aux1398' order represents '1' with '5597'
-5596 5597 0
c Var 'aux1398' direct represents '1' with '5598'
5596 -5597 5598 0
-5598 5597 0
-5598 -5596 0
c Var 'aux1398' direct represents '2' with '-5597'
5596 5598 -5597 0
c Encoding variable: aux1399 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1398))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5599'
c Var 'aux1399' direct represents '0' with '5599'
c Var 'aux1399' order represents '1' with '5600'
-5599 5600 0
c Var 'aux1399' direct represents '1' with '5601'
5599 -5600 5601 0
-5601 5600 0
-5601 -5599 0
c Var 'aux1399' order represents '2' with '5602'
-5600 5602 0
c Var 'aux1399' direct represents '2' with '5603'
5600 -5602 5603 0
-5603 5602 0
-5603 -5600 0
c Var 'aux1399' direct represents '3' with '-5602'
5599 5601 5603 -5602 0
c Encoding variable: aux1400 with domain: int(0..4) (representing constraint (aux1395 + aux1397))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5604'
c Var 'aux1400' direct represents '0' with '5604'
c Var 'aux1400' order represents '1' with '5605'
-5604 5605 0
c Var 'aux1400' direct represents '1' with '5606'
5604 -5605 5606 0
-5606 5605 0
-5606 -5604 0
c Var 'aux1400' order represents '2' with '5607'
-5605 5607 0
c Var 'aux1400' direct represents '2' with '5608'
5605 -5607 5608 0
-5608 5607 0
-5608 -5605 0
c Var 'aux1400' order represents '3' with '5609'
-5607 5609 0
c Var 'aux1400' direct represents '3' with '5610'
5607 -5609 5610 0
-5610 5609 0
-5610 -5607 0
c Var 'aux1400' direct represents '4' with '-5609'
5604 5606 5608 5610 -5609 0
c Encoding variable: aux1401 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5611'
c Var 'aux1401' direct represents '0' with '5611'
c Var 'aux1401' order represents '1' with '5612'
-5611 5612 0
c Var 'aux1401' direct represents '1' with '5613'
5611 -5612 5613 0
-5613 5612 0
-5613 -5611 0
c Var 'aux1401' direct represents '2' with '-5612'
5611 5613 -5612 0
c Encoding variable: aux1402 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5614'
c Var 'aux1402' direct represents '0' with '5614'
c Var 'aux1402' order represents '1' with '5615'
-5614 5615 0
c Var 'aux1402' direct represents '1' with '5616'
5614 -5615 5616 0
-5616 5615 0
-5616 -5614 0
c Var 'aux1402' direct represents '2' with '-5615'
5614 5616 -5615 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5617'
c Var 'aux1403' direct represents '0' with '5617'
c Var 'aux1403' order represents '1' with '5618'
-5617 5618 0
c Var 'aux1403' direct represents '1' with '5619'
5617 -5618 5619 0
-5619 5618 0
-5619 -5617 0
c Var 'aux1403' direct represents '2' with '-5618'
5617 5619 -5618 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5620'
c Var 'aux1404' direct represents '0' with '5620'
c Var 'aux1404' order represents '1' with '5621'
-5620 5621 0
c Var 'aux1404' direct represents '1' with '5622'
5620 -5621 5622 0
-5622 5621 0
-5622 -5620 0
c Var 'aux1404' direct represents '2' with '-5621'
5620 5622 -5621 0
c Encoding variable: aux1405 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1404))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5623'
c Var 'aux1405' direct represents '0' with '5623'
c Var 'aux1405' order represents '1' with '5624'
-5623 5624 0
c Var 'aux1405' direct represents '1' with '5625'
5623 -5624 5625 0
-5625 5624 0
-5625 -5623 0
c Var 'aux1405' order represents '2' with '5626'
-5624 5626 0
c Var 'aux1405' direct represents '2' with '5627'
5624 -5626 5627 0
-5627 5626 0
-5627 -5624 0
c Var 'aux1405' direct represents '3' with '-5626'
5623 5625 5627 -5626 0
c Encoding variable: aux1406 with domain: int(0..4) (representing constraint (aux1401 + aux1403))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5628'
c Var 'aux1406' direct represents '0' with '5628'
c Var 'aux1406' order represents '1' with '5629'
-5628 5629 0
c Var 'aux1406' direct represents '1' with '5630'
5628 -5629 5630 0
-5630 5629 0
-5630 -5628 0
c Var 'aux1406' order represents '2' with '5631'
-5629 5631 0
c Var 'aux1406' direct represents '2' with '5632'
5629 -5631 5632 0
-5632 5631 0
-5632 -5629 0
c Var 'aux1406' order represents '3' with '5633'
-5631 5633 0
c Var 'aux1406' direct represents '3' with '5634'
5631 -5633 5634 0
-5634 5633 0
-5634 -5631 0
c Var 'aux1406' direct represents '4' with '-5633'
5628 5630 5632 5634 -5633 0
c Encoding variable: aux1407 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5635'
c Var 'aux1407' direct represents '0' with '5635'
c Var 'aux1407' order represents '1' with '5636'
-5635 5636 0
c Var 'aux1407' direct represents '1' with '5637'
5635 -5636 5637 0
-5637 5636 0
-5637 -5635 0
c Var 'aux1407' direct represents '2' with '-5636'
5635 5637 -5636 0
c Encoding variable: aux1408 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5638'
c Var 'aux1408' direct represents '0' with '5638'
c Var 'aux1408' order represents '1' with '5639'
-5638 5639 0
c Var 'aux1408' direct represents '1' with '5640'
5638 -5639 5640 0
-5640 5639 0
-5640 -5638 0
c Var 'aux1408' direct represents '2' with '-5639'
5638 5640 -5639 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5641'
c Var 'aux1409' direct represents '0' with '5641'
c Var 'aux1409' order represents '1' with '5642'
-5641 5642 0
c Var 'aux1409' direct represents '1' with '5643'
5641 -5642 5643 0
-5643 5642 0
-5643 -5641 0
c Var 'aux1409' direct represents '2' with '-5642'
5641 5643 -5642 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5644'
c Var 'aux1410' direct represents '0' with '5644'
c Var 'aux1410' order represents '1' with '5645'
-5644 5645 0
c Var 'aux1410' direct represents '1' with '5646'
5644 -5645 5646 0
-5646 5645 0
-5646 -5644 0
c Var 'aux1410' direct represents '2' with '-5645'
5644 5646 -5645 0
c Encoding variable: aux1411 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1410))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5647'
c Var 'aux1411' direct represents '0' with '5647'
c Var 'aux1411' order represents '1' with '5648'
-5647 5648 0
c Var 'aux1411' direct represents '1' with '5649'
5647 -5648 5649 0
-5649 5648 0
-5649 -5647 0
c Var 'aux1411' order represents '2' with '5650'
-5648 5650 0
c Var 'aux1411' direct represents '2' with '5651'
5648 -5650 5651 0
-5651 5650 0
-5651 -5648 0
c Var 'aux1411' direct represents '3' with '-5650'
5647 5649 5651 -5650 0
c Encoding variable: aux1412 with domain: int(0..4) (representing constraint (aux1407 + aux1409))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5652'
c Var 'aux1412' direct represents '0' with '5652'
c Var 'aux1412' order represents '1' with '5653'
-5652 5653 0
c Var 'aux1412' direct represents '1' with '5654'
5652 -5653 5654 0
-5654 5653 0
-5654 -5652 0
c Var 'aux1412' order represents '2' with '5655'
-5653 5655 0
c Var 'aux1412' direct represents '2' with '5656'
5653 -5655 5656 0
-5656 5655 0
-5656 -5653 0
c Var 'aux1412' order represents '3' with '5657'
-5655 5657 0
c Var 'aux1412' direct represents '3' with '5658'
5655 -5657 5658 0
-5658 5657 0
-5658 -5655 0
c Var 'aux1412' direct represents '4' with '-5657'
5652 5654 5656 5658 -5657 0
c Encoding variable: aux1413 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5659'
c Var 'aux1413' direct represents '0' with '5659'
c Var 'aux1413' order represents '1' with '5660'
-5659 5660 0
c Var 'aux1413' direct represents '1' with '5661'
5659 -5660 5661 0
-5661 5660 0
-5661 -5659 0
c Var 'aux1413' direct represents '2' with '-5660'
5659 5661 -5660 0
c Encoding variable: aux1414 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5662'
c Var 'aux1414' direct represents '0' with '5662'
c Var 'aux1414' order represents '1' with '5663'
-5662 5663 0
c Var 'aux1414' direct represents '1' with '5664'
5662 -5663 5664 0
-5664 5663 0
-5664 -5662 0
c Var 'aux1414' direct represents '2' with '-5663'
5662 5664 -5663 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5665'
c Var 'aux1415' direct represents '0' with '5665'
c Var 'aux1415' order represents '1' with '5666'
-5665 5666 0
c Var 'aux1415' direct represents '1' with '5667'
5665 -5666 5667 0
-5667 5666 0
-5667 -5665 0
c Var 'aux1415' direct represents '2' with '-5666'
5665 5667 -5666 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5668'
c Var 'aux1416' direct represents '0' with '5668'
c Var 'aux1416' order represents '1' with '5669'
-5668 5669 0
c Var 'aux1416' direct represents '1' with '5670'
5668 -5669 5670 0
-5670 5669 0
-5670 -5668 0
c Var 'aux1416' direct represents '2' with '-5669'
5668 5670 -5669 0
c Encoding variable: aux1417 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1416))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5671'
c Var 'aux1417' direct represents '0' with '5671'
c Var 'aux1417' order represents '1' with '5672'
-5671 5672 0
c Var 'aux1417' direct represents '1' with '5673'
5671 -5672 5673 0
-5673 5672 0
-5673 -5671 0
c Var 'aux1417' order represents '2' with '5674'
-5672 5674 0
c Var 'aux1417' direct represents '2' with '5675'
5672 -5674 5675 0
-5675 5674 0
-5675 -5672 0
c Var 'aux1417' direct represents '3' with '-5674'
5671 5673 5675 -5674 0
c Encoding variable: aux1418 with domain: int(0..4) (representing constraint (aux1413 + aux1415))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5676'
c Var 'aux1418' direct represents '0' with '5676'
c Var 'aux1418' order represents '1' with '5677'
-5676 5677 0
c Var 'aux1418' direct represents '1' with '5678'
5676 -5677 5678 0
-5678 5677 0
-5678 -5676 0
c Var 'aux1418' order represents '2' with '5679'
-5677 5679 0
c Var 'aux1418' direct represents '2' with '5680'
5677 -5679 5680 0
-5680 5679 0
-5680 -5677 0
c Var 'aux1418' order represents '3' with '5681'
-5679 5681 0
c Var 'aux1418' direct represents '3' with '5682'
5679 -5681 5682 0
-5682 5681 0
-5682 -5679 0
c Var 'aux1418' direct represents '4' with '-5681'
5676 5678 5680 5682 -5681 0
c Encoding variable: aux1419 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5683'
c Var 'aux1419' direct represents '0' with '5683'
c Var 'aux1419' order represents '1' with '5684'
-5683 5684 0
c Var 'aux1419' direct represents '1' with '5685'
5683 -5684 5685 0
-5685 5684 0
-5685 -5683 0
c Var 'aux1419' direct represents '2' with '-5684'
5683 5685 -5684 0
c Encoding variable: aux1420 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5686'
c Var 'aux1420' direct represents '0' with '5686'
c Var 'aux1420' order represents '1' with '5687'
-5686 5687 0
c Var 'aux1420' direct represents '1' with '5688'
5686 -5687 5688 0
-5688 5687 0
-5688 -5686 0
c Var 'aux1420' direct represents '2' with '-5687'
5686 5688 -5687 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5689'
c Var 'aux1421' direct represents '0' with '5689'
c Var 'aux1421' order represents '1' with '5690'
-5689 5690 0
c Var 'aux1421' direct represents '1' with '5691'
5689 -5690 5691 0
-5691 5690 0
-5691 -5689 0
c Var 'aux1421' direct represents '2' with '-5690'
5689 5691 -5690 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5692'
c Var 'aux1422' direct represents '0' with '5692'
c Var 'aux1422' order represents '1' with '5693'
-5692 5693 0
c Var 'aux1422' direct represents '1' with '5694'
5692 -5693 5694 0
-5694 5693 0
-5694 -5692 0
c Var 'aux1422' direct represents '2' with '-5693'
5692 5694 -5693 0
c Encoding variable: aux1423 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1422))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5695'
c Var 'aux1423' direct represents '0' with '5695'
c Var 'aux1423' order represents '1' with '5696'
-5695 5696 0
c Var 'aux1423' direct represents '1' with '5697'
5695 -5696 5697 0
-5697 5696 0
-5697 -5695 0
c Var 'aux1423' order represents '2' with '5698'
-5696 5698 0
c Var 'aux1423' direct represents '2' with '5699'
5696 -5698 5699 0
-5699 5698 0
-5699 -5696 0
c Var 'aux1423' direct represents '3' with '-5698'
5695 5697 5699 -5698 0
c Encoding variable: aux1424 with domain: int(0..4) (representing constraint (aux1419 + aux1421))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5700'
c Var 'aux1424' direct represents '0' with '5700'
c Var 'aux1424' order represents '1' with '5701'
-5700 5701 0
c Var 'aux1424' direct represents '1' with '5702'
5700 -5701 5702 0
-5702 5701 0
-5702 -5700 0
c Var 'aux1424' order represents '2' with '5703'
-5701 5703 0
c Var 'aux1424' direct represents '2' with '5704'
5701 -5703 5704 0
-5704 5703 0
-5704 -5701 0
c Var 'aux1424' order represents '3' with '5705'
-5703 5705 0
c Var 'aux1424' direct represents '3' with '5706'
5703 -5705 5706 0
-5706 5705 0
-5706 -5703 0
c Var 'aux1424' direct represents '4' with '-5705'
5700 5702 5704 5706 -5705 0
c Encoding variable: aux1425 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5707'
c Var 'aux1425' direct represents '0' with '5707'
c Var 'aux1425' order represents '1' with '5708'
-5707 5708 0
c Var 'aux1425' direct represents '1' with '5709'
5707 -5708 5709 0
-5709 5708 0
-5709 -5707 0
c Var 'aux1425' direct represents '2' with '-5708'
5707 5709 -5708 0
c Encoding variable: aux1426 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5710'
c Var 'aux1426' direct represents '0' with '5710'
c Var 'aux1426' order represents '1' with '5711'
-5710 5711 0
c Var 'aux1426' direct represents '1' with '5712'
5710 -5711 5712 0
-5712 5711 0
-5712 -5710 0
c Var 'aux1426' direct represents '2' with '-5711'
5710 5712 -5711 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5713'
c Var 'aux1427' direct represents '0' with '5713'
c Var 'aux1427' order represents '1' with '5714'
-5713 5714 0
c Var 'aux1427' direct represents '1' with '5715'
5713 -5714 5715 0
-5715 5714 0
-5715 -5713 0
c Var 'aux1427' direct represents '2' with '-5714'
5713 5715 -5714 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5716'
c Var 'aux1428' direct represents '0' with '5716'
c Var 'aux1428' order represents '1' with '5717'
-5716 5717 0
c Var 'aux1428' direct represents '1' with '5718'
5716 -5717 5718 0
-5718 5717 0
-5718 -5716 0
c Var 'aux1428' direct represents '2' with '-5717'
5716 5718 -5717 0
c Encoding variable: aux1429 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1428))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5719'
c Var 'aux1429' direct represents '0' with '5719'
c Var 'aux1429' order represents '1' with '5720'
-5719 5720 0
c Var 'aux1429' direct represents '1' with '5721'
5719 -5720 5721 0
-5721 5720 0
-5721 -5719 0
c Var 'aux1429' order represents '2' with '5722'
-5720 5722 0
c Var 'aux1429' direct represents '2' with '5723'
5720 -5722 5723 0
-5723 5722 0
-5723 -5720 0
c Var 'aux1429' direct represents '3' with '-5722'
5719 5721 5723 -5722 0
c Encoding variable: aux1430 with domain: int(0..4) (representing constraint (aux1425 + aux1427))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5724'
c Var 'aux1430' direct represents '0' with '5724'
c Var 'aux1430' order represents '1' with '5725'
-5724 5725 0
c Var 'aux1430' direct represents '1' with '5726'
5724 -5725 5726 0
-5726 5725 0
-5726 -5724 0
c Var 'aux1430' order represents '2' with '5727'
-5725 5727 0
c Var 'aux1430' direct represents '2' with '5728'
5725 -5727 5728 0
-5728 5727 0
-5728 -5725 0
c Var 'aux1430' order represents '3' with '5729'
-5727 5729 0
c Var 'aux1430' direct represents '3' with '5730'
5727 -5729 5730 0
-5730 5729 0
-5730 -5727 0
c Var 'aux1430' direct represents '4' with '-5729'
5724 5726 5728 5730 -5729 0
c Encoding variable: aux1431 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5731'
c Var 'aux1431' direct represents '0' with '5731'
c Var 'aux1431' order represents '1' with '5732'
-5731 5732 0
c Var 'aux1431' direct represents '1' with '5733'
5731 -5732 5733 0
-5733 5732 0
-5733 -5731 0
c Var 'aux1431' direct represents '2' with '-5732'
5731 5733 -5732 0
c Encoding variable: aux1432 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '5734'
c Var 'aux1432' direct represents '0' with '5734'
c Var 'aux1432' order represents '1' with '5735'
-5734 5735 0
c Var 'aux1432' direct represents '1' with '5736'
5734 -5735 5736 0
-5736 5735 0
-5736 -5734 0
c Var 'aux1432' direct represents '2' with '-5735'
5734 5736 -5735 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '5737'
c Var 'aux1433' direct represents '0' with '5737'
c Var 'aux1433' order represents '1' with '5738'
-5737 5738 0
c Var 'aux1433' direct represents '1' with '5739'
5737 -5738 5739 0
-5739 5738 0
-5739 -5737 0
c Var 'aux1433' direct represents '2' with '-5738'
5737 5739 -5738 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '5740'
c Var 'aux1434' direct represents '0' with '5740'
c Var 'aux1434' order represents '1' with '5741'
-5740 5741 0
c Var 'aux1434' direct represents '1' with '5742'
5740 -5741 5742 0
-5742 5741 0
-5742 -5740 0
c Var 'aux1434' direct represents '2' with '-5741'
5740 5742 -5741 0
c Encoding variable: aux1435 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1434))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '5743'
c Var 'aux1435' direct represents '0' with '5743'
c Var 'aux1435' order represents '1' with '5744'
-5743 5744 0
c Var 'aux1435' direct represents '1' with '5745'
5743 -5744 5745 0
-5745 5744 0
-5745 -5743 0
c Var 'aux1435' order represents '2' with '5746'
-5744 5746 0
c Var 'aux1435' direct represents '2' with '5747'
5744 -5746 5747 0
-5747 5746 0
-5747 -5744 0
c Var 'aux1435' direct represents '3' with '-5746'
5743 5745 5747 -5746 0
c Encoding variable: aux1436 with domain: int(0..4) (representing constraint (aux1431 + aux1433))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '5748'
c Var 'aux1436' direct represents '0' with '5748'
c Var 'aux1436' order represents '1' with '5749'
-5748 5749 0
c Var 'aux1436' direct represents '1' with '5750'
5748 -5749 5750 0
-5750 5749 0
-5750 -5748 0
c Var 'aux1436' order represents '2' with '5751'
-5749 5751 0
c Var 'aux1436' direct represents '2' with '5752'
5749 -5751 5752 0
-5752 5751 0
-5752 -5749 0
c Var 'aux1436' order represents '3' with '5753'
-5751 5753 0
c Var 'aux1436' direct represents '3' with '5754'
5751 -5753 5754 0
-5754 5753 0
-5754 -5751 0
c Var 'aux1436' direct represents '4' with '-5753'
5748 5750 5752 5754 -5753 0
c Encoding variable: aux1437 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '5755'
c Var 'aux1437' direct represents '0' with '5755'
c Var 'aux1437' order represents '1' with '5756'
-5755 5756 0
c Var 'aux1437' direct represents '1' with '5757'
5755 -5756 5757 0
-5757 5756 0
-5757 -5755 0
c Var 'aux1437' direct represents '2' with '-5756'
5755 5757 -5756 0
c Encoding variable: aux1438 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '5758'
c Var 'aux1438' direct represents '0' with '5758'
c Var 'aux1438' order represents '1' with '5759'
-5758 5759 0
c Var 'aux1438' direct represents '1' with '5760'
5758 -5759 5760 0
-5760 5759 0
-5760 -5758 0
c Var 'aux1438' direct represents '2' with '-5759'
5758 5760 -5759 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '5761'
c Var 'aux1439' direct represents '0' with '5761'
c Var 'aux1439' order represents '1' with '5762'
-5761 5762 0
c Var 'aux1439' direct represents '1' with '5763'
5761 -5762 5763 0
-5763 5762 0
-5763 -5761 0
c Var 'aux1439' direct represents '2' with '-5762'
5761 5763 -5762 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '5764'
c Var 'aux1440' direct represents '0' with '5764'
c Var 'aux1440' order represents '1' with '5765'
-5764 5765 0
c Var 'aux1440' direct represents '1' with '5766'
5764 -5765 5766 0
-5766 5765 0
-5766 -5764 0
c Var 'aux1440' direct represents '2' with '-5765'
5764 5766 -5765 0
c Encoding variable: aux1441 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1440))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '5767'
c Var 'aux1441' direct represents '0' with '5767'
c Var 'aux1441' order represents '1' with '5768'
-5767 5768 0
c Var 'aux1441' direct represents '1' with '5769'
5767 -5768 5769 0
-5769 5768 0
-5769 -5767 0
c Var 'aux1441' order represents '2' with '5770'
-5768 5770 0
c Var 'aux1441' direct represents '2' with '5771'
5768 -5770 5771 0
-5771 5770 0
-5771 -5768 0
c Var 'aux1441' direct represents '3' with '-5770'
5767 5769 5771 -5770 0
c Encoding variable: aux1442 with domain: int(0..4) (representing constraint (aux1437 + aux1439))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '5772'
c Var 'aux1442' direct represents '0' with '5772'
c Var 'aux1442' order represents '1' with '5773'
-5772 5773 0
c Var 'aux1442' direct represents '1' with '5774'
5772 -5773 5774 0
-5774 5773 0
-5774 -5772 0
c Var 'aux1442' order represents '2' with '5775'
-5773 5775 0
c Var 'aux1442' direct represents '2' with '5776'
5773 -5775 5776 0
-5776 5775 0
-5776 -5773 0
c Var 'aux1442' order represents '3' with '5777'
-5775 5777 0
c Var 'aux1442' direct represents '3' with '5778'
5775 -5777 5778 0
-5778 5777 0
-5778 -5775 0
c Var 'aux1442' direct represents '4' with '-5777'
5772 5774 5776 5778 -5777 0
c Encoding variable: aux1443 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '5779'
c Var 'aux1443' direct represents '0' with '5779'
c Var 'aux1443' order represents '1' with '5780'
-5779 5780 0
c Var 'aux1443' direct represents '1' with '5781'
5779 -5780 5781 0
-5781 5780 0
-5781 -5779 0
c Var 'aux1443' direct represents '2' with '-5780'
5779 5781 -5780 0
c Encoding variable: aux1444 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '5782'
c Var 'aux1444' direct represents '0' with '5782'
c Var 'aux1444' order represents '1' with '5783'
-5782 5783 0
c Var 'aux1444' direct represents '1' with '5784'
5782 -5783 5784 0
-5784 5783 0
-5784 -5782 0
c Var 'aux1444' direct represents '2' with '-5783'
5782 5784 -5783 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '5785'
c Var 'aux1445' direct represents '0' with '5785'
c Var 'aux1445' order represents '1' with '5786'
-5785 5786 0
c Var 'aux1445' direct represents '1' with '5787'
5785 -5786 5787 0
-5787 5786 0
-5787 -5785 0
c Var 'aux1445' direct represents '2' with '-5786'
5785 5787 -5786 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '5788'
c Var 'aux1446' direct represents '0' with '5788'
c Var 'aux1446' order represents '1' with '5789'
-5788 5789 0
c Var 'aux1446' direct represents '1' with '5790'
5788 -5789 5790 0
-5790 5789 0
-5790 -5788 0
c Var 'aux1446' direct represents '2' with '-5789'
5788 5790 -5789 0
c Encoding variable: aux1447 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1446))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '5791'
c Var 'aux1447' direct represents '0' with '5791'
c Var 'aux1447' order represents '1' with '5792'
-5791 5792 0
c Var 'aux1447' direct represents '1' with '5793'
5791 -5792 5793 0
-5793 5792 0
-5793 -5791 0
c Var 'aux1447' order represents '2' with '5794'
-5792 5794 0
c Var 'aux1447' direct represents '2' with '5795'
5792 -5794 5795 0
-5795 5794 0
-5795 -5792 0
c Var 'aux1447' direct represents '3' with '-5794'
5791 5793 5795 -5794 0
c Encoding variable: aux1448 with domain: int(0..4) (representing constraint (aux1443 + aux1445))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '5796'
c Var 'aux1448' direct represents '0' with '5796'
c Var 'aux1448' order represents '1' with '5797'
-5796 5797 0
c Var 'aux1448' direct represents '1' with '5798'
5796 -5797 5798 0
-5798 5797 0
-5798 -5796 0
c Var 'aux1448' order represents '2' with '5799'
-5797 5799 0
c Var 'aux1448' direct represents '2' with '5800'
5797 -5799 5800 0
-5800 5799 0
-5800 -5797 0
c Var 'aux1448' order represents '3' with '5801'
-5799 5801 0
c Var 'aux1448' direct represents '3' with '5802'
5799 -5801 5802 0
-5802 5801 0
-5802 -5799 0
c Var 'aux1448' direct represents '4' with '-5801'
5796 5798 5800 5802 -5801 0
c Encoding variable: aux1449 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '5803'
c Var 'aux1449' direct represents '0' with '5803'
c Var 'aux1449' order represents '1' with '5804'
-5803 5804 0
c Var 'aux1449' direct represents '1' with '5805'
5803 -5804 5805 0
-5805 5804 0
-5805 -5803 0
c Var 'aux1449' direct represents '2' with '-5804'
5803 5805 -5804 0
c Encoding variable: aux1450 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '5806'
c Var 'aux1450' direct represents '0' with '5806'
c Var 'aux1450' order represents '1' with '5807'
-5806 5807 0
c Var 'aux1450' direct represents '1' with '5808'
5806 -5807 5808 0
-5808 5807 0
-5808 -5806 0
c Var 'aux1450' direct represents '2' with '-5807'
5806 5808 -5807 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '5809'
c Var 'aux1451' direct represents '0' with '5809'
c Var 'aux1451' order represents '1' with '5810'
-5809 5810 0
c Var 'aux1451' direct represents '1' with '5811'
5809 -5810 5811 0
-5811 5810 0
-5811 -5809 0
c Var 'aux1451' direct represents '2' with '-5810'
5809 5811 -5810 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '5812'
c Var 'aux1452' direct represents '0' with '5812'
c Var 'aux1452' order represents '1' with '5813'
-5812 5813 0
c Var 'aux1452' direct represents '1' with '5814'
5812 -5813 5814 0
-5814 5813 0
-5814 -5812 0
c Var 'aux1452' direct represents '2' with '-5813'
5812 5814 -5813 0
c Encoding variable: aux1453 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1452))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '5815'
c Var 'aux1453' direct represents '0' with '5815'
c Var 'aux1453' order represents '1' with '5816'
-5815 5816 0
c Var 'aux1453' direct represents '1' with '5817'
5815 -5816 5817 0
-5817 5816 0
-5817 -5815 0
c Var 'aux1453' order represents '2' with '5818'
-5816 5818 0
c Var 'aux1453' direct represents '2' with '5819'
5816 -5818 5819 0
-5819 5818 0
-5819 -5816 0
c Var 'aux1453' direct represents '3' with '-5818'
5815 5817 5819 -5818 0
c Encoding variable: aux1454 with domain: int(0..4) (representing constraint (aux1449 + aux1451))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '5820'
c Var 'aux1454' direct represents '0' with '5820'
c Var 'aux1454' order represents '1' with '5821'
-5820 5821 0
c Var 'aux1454' direct represents '1' with '5822'
5820 -5821 5822 0
-5822 5821 0
-5822 -5820 0
c Var 'aux1454' order represents '2' with '5823'
-5821 5823 0
c Var 'aux1454' direct represents '2' with '5824'
5821 -5823 5824 0
-5824 5823 0
-5824 -5821 0
c Var 'aux1454' order represents '3' with '5825'
-5823 5825 0
c Var 'aux1454' direct represents '3' with '5826'
5823 -5825 5826 0
-5826 5825 0
-5826 -5823 0
c Var 'aux1454' direct represents '4' with '-5825'
5820 5822 5824 5826 -5825 0
c Encoding variable: aux1455 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '5827'
c Var 'aux1455' direct represents '0' with '5827'
c Var 'aux1455' order represents '1' with '5828'
-5827 5828 0
c Var 'aux1455' direct represents '1' with '5829'
5827 -5828 5829 0
-5829 5828 0
-5829 -5827 0
c Var 'aux1455' direct represents '2' with '-5828'
5827 5829 -5828 0
c Encoding variable: aux1456 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '5830'
c Var 'aux1456' direct represents '0' with '5830'
c Var 'aux1456' order represents '1' with '5831'
-5830 5831 0
c Var 'aux1456' direct represents '1' with '5832'
5830 -5831 5832 0
-5832 5831 0
-5832 -5830 0
c Var 'aux1456' direct represents '2' with '-5831'
5830 5832 -5831 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '5833'
c Var 'aux1457' direct represents '0' with '5833'
c Var 'aux1457' order represents '1' with '5834'
-5833 5834 0
c Var 'aux1457' direct represents '1' with '5835'
5833 -5834 5835 0
-5835 5834 0
-5835 -5833 0
c Var 'aux1457' direct represents '2' with '-5834'
5833 5835 -5834 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '5836'
c Var 'aux1458' direct represents '0' with '5836'
c Var 'aux1458' order represents '1' with '5837'
-5836 5837 0
c Var 'aux1458' direct represents '1' with '5838'
5836 -5837 5838 0
-5838 5837 0
-5838 -5836 0
c Var 'aux1458' direct represents '2' with '-5837'
5836 5838 -5837 0
c Encoding variable: aux1459 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1458))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '5839'
c Var 'aux1459' direct represents '0' with '5839'
c Var 'aux1459' order represents '1' with '5840'
-5839 5840 0
c Var 'aux1459' direct represents '1' with '5841'
5839 -5840 5841 0
-5841 5840 0
-5841 -5839 0
c Var 'aux1459' order represents '2' with '5842'
-5840 5842 0
c Var 'aux1459' direct represents '2' with '5843'
5840 -5842 5843 0
-5843 5842 0
-5843 -5840 0
c Var 'aux1459' direct represents '3' with '-5842'
5839 5841 5843 -5842 0
c Encoding variable: aux1460 with domain: int(0..4) (representing constraint (aux1455 + aux1457))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '5844'
c Var 'aux1460' direct represents '0' with '5844'
c Var 'aux1460' order represents '1' with '5845'
-5844 5845 0
c Var 'aux1460' direct represents '1' with '5846'
5844 -5845 5846 0
-5846 5845 0
-5846 -5844 0
c Var 'aux1460' order represents '2' with '5847'
-5845 5847 0
c Var 'aux1460' direct represents '2' with '5848'
5845 -5847 5848 0
-5848 5847 0
-5848 -5845 0
c Var 'aux1460' order represents '3' with '5849'
-5847 5849 0
c Var 'aux1460' direct represents '3' with '5850'
5847 -5849 5850 0
-5850 5849 0
-5850 -5847 0
c Var 'aux1460' direct represents '4' with '-5849'
5844 5846 5848 5850 -5849 0
c Encoding variable: aux1461 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '5851'
c Var 'aux1461' direct represents '0' with '5851'
c Var 'aux1461' order represents '1' with '5852'
-5851 5852 0
c Var 'aux1461' direct represents '1' with '5853'
5851 -5852 5853 0
-5853 5852 0
-5853 -5851 0
c Var 'aux1461' direct represents '2' with '-5852'
5851 5853 -5852 0
c Encoding variable: aux1462 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '5854'
c Var 'aux1462' direct represents '0' with '5854'
c Var 'aux1462' order represents '1' with '5855'
-5854 5855 0
c Var 'aux1462' direct represents '1' with '5856'
5854 -5855 5856 0
-5856 5855 0
-5856 -5854 0
c Var 'aux1462' direct represents '2' with '-5855'
5854 5856 -5855 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '5857'
c Var 'aux1463' direct represents '0' with '5857'
c Var 'aux1463' order represents '1' with '5858'
-5857 5858 0
c Var 'aux1463' direct represents '1' with '5859'
5857 -5858 5859 0
-5859 5858 0
-5859 -5857 0
c Var 'aux1463' direct represents '2' with '-5858'
5857 5859 -5858 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '5860'
c Var 'aux1464' direct represents '0' with '5860'
c Var 'aux1464' order represents '1' with '5861'
-5860 5861 0
c Var 'aux1464' direct represents '1' with '5862'
5860 -5861 5862 0
-5862 5861 0
-5862 -5860 0
c Var 'aux1464' direct represents '2' with '-5861'
5860 5862 -5861 0
c Encoding variable: aux1465 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1464))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '5863'
c Var 'aux1465' direct represents '0' with '5863'
c Var 'aux1465' order represents '1' with '5864'
-5863 5864 0
c Var 'aux1465' direct represents '1' with '5865'
5863 -5864 5865 0
-5865 5864 0
-5865 -5863 0
c Var 'aux1465' order represents '2' with '5866'
-5864 5866 0
c Var 'aux1465' direct represents '2' with '5867'
5864 -5866 5867 0
-5867 5866 0
-5867 -5864 0
c Var 'aux1465' direct represents '3' with '-5866'
5863 5865 5867 -5866 0
c Encoding variable: aux1466 with domain: int(0..4) (representing constraint (aux1461 + aux1463))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '5868'
c Var 'aux1466' direct represents '0' with '5868'
c Var 'aux1466' order represents '1' with '5869'
-5868 5869 0
c Var 'aux1466' direct represents '1' with '5870'
5868 -5869 5870 0
-5870 5869 0
-5870 -5868 0
c Var 'aux1466' order represents '2' with '5871'
-5869 5871 0
c Var 'aux1466' direct represents '2' with '5872'
5869 -5871 5872 0
-5872 5871 0
-5872 -5869 0
c Var 'aux1466' order represents '3' with '5873'
-5871 5873 0
c Var 'aux1466' direct represents '3' with '5874'
5871 -5873 5874 0
-5874 5873 0
-5874 -5871 0
c Var 'aux1466' direct represents '4' with '-5873'
5868 5870 5872 5874 -5873 0
c Encoding variable: aux1467 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '5875'
c Var 'aux1467' direct represents '0' with '5875'
c Var 'aux1467' order represents '1' with '5876'
-5875 5876 0
c Var 'aux1467' direct represents '1' with '5877'
5875 -5876 5877 0
-5877 5876 0
-5877 -5875 0
c Var 'aux1467' direct represents '2' with '-5876'
5875 5877 -5876 0
c Encoding variable: aux1468 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '5878'
c Var 'aux1468' direct represents '0' with '5878'
c Var 'aux1468' order represents '1' with '5879'
-5878 5879 0
c Var 'aux1468' direct represents '1' with '5880'
5878 -5879 5880 0
-5880 5879 0
-5880 -5878 0
c Var 'aux1468' direct represents '2' with '-5879'
5878 5880 -5879 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '5881'
c Var 'aux1469' direct represents '0' with '5881'
c Var 'aux1469' order represents '1' with '5882'
-5881 5882 0
c Var 'aux1469' direct represents '1' with '5883'
5881 -5882 5883 0
-5883 5882 0
-5883 -5881 0
c Var 'aux1469' direct represents '2' with '-5882'
5881 5883 -5882 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '5884'
c Var 'aux1470' direct represents '0' with '5884'
c Var 'aux1470' order represents '1' with '5885'
-5884 5885 0
c Var 'aux1470' direct represents '1' with '5886'
5884 -5885 5886 0
-5886 5885 0
-5886 -5884 0
c Var 'aux1470' direct represents '2' with '-5885'
5884 5886 -5885 0
c Encoding variable: aux1471 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1470))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '5887'
c Var 'aux1471' direct represents '0' with '5887'
c Var 'aux1471' order represents '1' with '5888'
-5887 5888 0
c Var 'aux1471' direct represents '1' with '5889'
5887 -5888 5889 0
-5889 5888 0
-5889 -5887 0
c Var 'aux1471' order represents '2' with '5890'
-5888 5890 0
c Var 'aux1471' direct represents '2' with '5891'
5888 -5890 5891 0
-5891 5890 0
-5891 -5888 0
c Var 'aux1471' direct represents '3' with '-5890'
5887 5889 5891 -5890 0
c Encoding variable: aux1472 with domain: int(0..4) (representing constraint (aux1467 + aux1469))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '5892'
c Var 'aux1472' direct represents '0' with '5892'
c Var 'aux1472' order represents '1' with '5893'
-5892 5893 0
c Var 'aux1472' direct represents '1' with '5894'
5892 -5893 5894 0
-5894 5893 0
-5894 -5892 0
c Var 'aux1472' order represents '2' with '5895'
-5893 5895 0
c Var 'aux1472' direct represents '2' with '5896'
5893 -5895 5896 0
-5896 5895 0
-5896 -5893 0
c Var 'aux1472' order represents '3' with '5897'
-5895 5897 0
c Var 'aux1472' direct represents '3' with '5898'
5895 -5897 5898 0
-5898 5897 0
-5898 -5895 0
c Var 'aux1472' direct represents '4' with '-5897'
5892 5894 5896 5898 -5897 0
c Encoding variable: aux1473 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '5899'
c Var 'aux1473' direct represents '0' with '5899'
c Var 'aux1473' order represents '1' with '5900'
-5899 5900 0
c Var 'aux1473' direct represents '1' with '5901'
5899 -5900 5901 0
-5901 5900 0
-5901 -5899 0
c Var 'aux1473' direct represents '2' with '-5900'
5899 5901 -5900 0
c Encoding variable: aux1474 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '5902'
c Var 'aux1474' direct represents '0' with '5902'
c Var 'aux1474' order represents '1' with '5903'
-5902 5903 0
c Var 'aux1474' direct represents '1' with '5904'
5902 -5903 5904 0
-5904 5903 0
-5904 -5902 0
c Var 'aux1474' direct represents '2' with '-5903'
5902 5904 -5903 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '5905'
c Var 'aux1475' direct represents '0' with '5905'
c Var 'aux1475' order represents '1' with '5906'
-5905 5906 0
c Var 'aux1475' direct represents '1' with '5907'
5905 -5906 5907 0
-5907 5906 0
-5907 -5905 0
c Var 'aux1475' direct represents '2' with '-5906'
5905 5907 -5906 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '5908'
c Var 'aux1476' direct represents '0' with '5908'
c Var 'aux1476' order represents '1' with '5909'
-5908 5909 0
c Var 'aux1476' direct represents '1' with '5910'
5908 -5909 5910 0
-5910 5909 0
-5910 -5908 0
c Var 'aux1476' direct represents '2' with '-5909'
5908 5910 -5909 0
c Encoding variable: aux1477 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1476))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '5911'
c Var 'aux1477' direct represents '0' with '5911'
c Var 'aux1477' order represents '1' with '5912'
-5911 5912 0
c Var 'aux1477' direct represents '1' with '5913'
5911 -5912 5913 0
-5913 5912 0
-5913 -5911 0
c Var 'aux1477' order represents '2' with '5914'
-5912 5914 0
c Var 'aux1477' direct represents '2' with '5915'
5912 -5914 5915 0
-5915 5914 0
-5915 -5912 0
c Var 'aux1477' direct represents '3' with '-5914'
5911 5913 5915 -5914 0
c Encoding variable: aux1478 with domain: int(0..4) (representing constraint (aux1473 + aux1475))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '5916'
c Var 'aux1478' direct represents '0' with '5916'
c Var 'aux1478' order represents '1' with '5917'
-5916 5917 0
c Var 'aux1478' direct represents '1' with '5918'
5916 -5917 5918 0
-5918 5917 0
-5918 -5916 0
c Var 'aux1478' order represents '2' with '5919'
-5917 5919 0
c Var 'aux1478' direct represents '2' with '5920'
5917 -5919 5920 0
-5920 5919 0
-5920 -5917 0
c Var 'aux1478' order represents '3' with '5921'
-5919 5921 0
c Var 'aux1478' direct represents '3' with '5922'
5919 -5921 5922 0
-5922 5921 0
-5922 -5919 0
c Var 'aux1478' direct represents '4' with '-5921'
5916 5918 5920 5922 -5921 0
c Encoding variable: aux1479 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '5923'
c Var 'aux1479' direct represents '0' with '5923'
c Var 'aux1479' order represents '1' with '5924'
-5923 5924 0
c Var 'aux1479' direct represents '1' with '5925'
5923 -5924 5925 0
-5925 5924 0
-5925 -5923 0
c Var 'aux1479' direct represents '2' with '-5924'
5923 5925 -5924 0
c Encoding variable: aux1480 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '5926'
c Var 'aux1480' direct represents '0' with '5926'
c Var 'aux1480' order represents '1' with '5927'
-5926 5927 0
c Var 'aux1480' direct represents '1' with '5928'
5926 -5927 5928 0
-5928 5927 0
-5928 -5926 0
c Var 'aux1480' direct represents '2' with '-5927'
5926 5928 -5927 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '5929'
c Var 'aux1481' direct represents '0' with '5929'
c Var 'aux1481' order represents '1' with '5930'
-5929 5930 0
c Var 'aux1481' direct represents '1' with '5931'
5929 -5930 5931 0
-5931 5930 0
-5931 -5929 0
c Var 'aux1481' direct represents '2' with '-5930'
5929 5931 -5930 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '5932'
c Var 'aux1482' direct represents '0' with '5932'
c Var 'aux1482' order represents '1' with '5933'
-5932 5933 0
c Var 'aux1482' direct represents '1' with '5934'
5932 -5933 5934 0
-5934 5933 0
-5934 -5932 0
c Var 'aux1482' direct represents '2' with '-5933'
5932 5934 -5933 0
c Encoding variable: aux1483 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1482))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '5935'
c Var 'aux1483' direct represents '0' with '5935'
c Var 'aux1483' order represents '1' with '5936'
-5935 5936 0
c Var 'aux1483' direct represents '1' with '5937'
5935 -5936 5937 0
-5937 5936 0
-5937 -5935 0
c Var 'aux1483' order represents '2' with '5938'
-5936 5938 0
c Var 'aux1483' direct represents '2' with '5939'
5936 -5938 5939 0
-5939 5938 0
-5939 -5936 0
c Var 'aux1483' direct represents '3' with '-5938'
5935 5937 5939 -5938 0
c Encoding variable: aux1484 with domain: int(0..4) (representing constraint (aux1479 + aux1481))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '5940'
c Var 'aux1484' direct represents '0' with '5940'
c Var 'aux1484' order represents '1' with '5941'
-5940 5941 0
c Var 'aux1484' direct represents '1' with '5942'
5940 -5941 5942 0
-5942 5941 0
-5942 -5940 0
c Var 'aux1484' order represents '2' with '5943'
-5941 5943 0
c Var 'aux1484' direct represents '2' with '5944'
5941 -5943 5944 0
-5944 5943 0
-5944 -5941 0
c Var 'aux1484' order represents '3' with '5945'
-5943 5945 0
c Var 'aux1484' direct represents '3' with '5946'
5943 -5945 5946 0
-5946 5945 0
-5946 -5943 0
c Var 'aux1484' direct represents '4' with '-5945'
5940 5942 5944 5946 -5945 0
c Encoding variable: aux1485 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '5947'
c Var 'aux1485' direct represents '0' with '5947'
c Var 'aux1485' order represents '1' with '5948'
-5947 5948 0
c Var 'aux1485' direct represents '1' with '5949'
5947 -5948 5949 0
-5949 5948 0
-5949 -5947 0
c Var 'aux1485' direct represents '2' with '-5948'
5947 5949 -5948 0
c Encoding variable: aux1486 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '5950'
c Var 'aux1486' direct represents '0' with '5950'
c Var 'aux1486' order represents '1' with '5951'
-5950 5951 0
c Var 'aux1486' direct represents '1' with '5952'
5950 -5951 5952 0
-5952 5951 0
-5952 -5950 0
c Var 'aux1486' direct represents '2' with '-5951'
5950 5952 -5951 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '5953'
c Var 'aux1487' direct represents '0' with '5953'
c Var 'aux1487' order represents '1' with '5954'
-5953 5954 0
c Var 'aux1487' direct represents '1' with '5955'
5953 -5954 5955 0
-5955 5954 0
-5955 -5953 0
c Var 'aux1487' direct represents '2' with '-5954'
5953 5955 -5954 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '5956'
c Var 'aux1488' direct represents '0' with '5956'
c Var 'aux1488' order represents '1' with '5957'
-5956 5957 0
c Var 'aux1488' direct represents '1' with '5958'
5956 -5957 5958 0
-5958 5957 0
-5958 -5956 0
c Var 'aux1488' direct represents '2' with '-5957'
5956 5958 -5957 0
c Encoding variable: aux1489 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1488))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '5959'
c Var 'aux1489' direct represents '0' with '5959'
c Var 'aux1489' order represents '1' with '5960'
-5959 5960 0
c Var 'aux1489' direct represents '1' with '5961'
5959 -5960 5961 0
-5961 5960 0
-5961 -5959 0
c Var 'aux1489' order represents '2' with '5962'
-5960 5962 0
c Var 'aux1489' direct represents '2' with '5963'
5960 -5962 5963 0
-5963 5962 0
-5963 -5960 0
c Var 'aux1489' direct represents '3' with '-5962'
5959 5961 5963 -5962 0
c Encoding variable: aux1490 with domain: int(0..4) (representing constraint (aux1485 + aux1487))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '5964'
c Var 'aux1490' direct represents '0' with '5964'
c Var 'aux1490' order represents '1' with '5965'
-5964 5965 0
c Var 'aux1490' direct represents '1' with '5966'
5964 -5965 5966 0
-5966 5965 0
-5966 -5964 0
c Var 'aux1490' order represents '2' with '5967'
-5965 5967 0
c Var 'aux1490' direct represents '2' with '5968'
5965 -5967 5968 0
-5968 5967 0
-5968 -5965 0
c Var 'aux1490' order represents '3' with '5969'
-5967 5969 0
c Var 'aux1490' direct represents '3' with '5970'
5967 -5969 5970 0
-5970 5969 0
-5970 -5967 0
c Var 'aux1490' direct represents '4' with '-5969'
5964 5966 5968 5970 -5969 0
c Encoding variable: aux1491 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '5971'
c Var 'aux1491' direct represents '0' with '5971'
c Var 'aux1491' order represents '1' with '5972'
-5971 5972 0
c Var 'aux1491' direct represents '1' with '5973'
5971 -5972 5973 0
-5973 5972 0
-5973 -5971 0
c Var 'aux1491' direct represents '2' with '-5972'
5971 5973 -5972 0
c Encoding variable: aux1492 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '5974'
c Var 'aux1492' direct represents '0' with '5974'
c Var 'aux1492' order represents '1' with '5975'
-5974 5975 0
c Var 'aux1492' direct represents '1' with '5976'
5974 -5975 5976 0
-5976 5975 0
-5976 -5974 0
c Var 'aux1492' direct represents '2' with '-5975'
5974 5976 -5975 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '5977'
c Var 'aux1493' direct represents '0' with '5977'
c Var 'aux1493' order represents '1' with '5978'
-5977 5978 0
c Var 'aux1493' direct represents '1' with '5979'
5977 -5978 5979 0
-5979 5978 0
-5979 -5977 0
c Var 'aux1493' direct represents '2' with '-5978'
5977 5979 -5978 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '5980'
c Var 'aux1494' direct represents '0' with '5980'
c Var 'aux1494' order represents '1' with '5981'
-5980 5981 0
c Var 'aux1494' direct represents '1' with '5982'
5980 -5981 5982 0
-5982 5981 0
-5982 -5980 0
c Var 'aux1494' direct represents '2' with '-5981'
5980 5982 -5981 0
c Encoding variable: aux1495 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1494))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '5983'
c Var 'aux1495' direct represents '0' with '5983'
c Var 'aux1495' order represents '1' with '5984'
-5983 5984 0
c Var 'aux1495' direct represents '1' with '5985'
5983 -5984 5985 0
-5985 5984 0
-5985 -5983 0
c Var 'aux1495' order represents '2' with '5986'
-5984 5986 0
c Var 'aux1495' direct represents '2' with '5987'
5984 -5986 5987 0
-5987 5986 0
-5987 -5984 0
c Var 'aux1495' direct represents '3' with '-5986'
5983 5985 5987 -5986 0
c Encoding variable: aux1496 with domain: int(0..4) (representing constraint (aux1491 + aux1493))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '5988'
c Var 'aux1496' direct represents '0' with '5988'
c Var 'aux1496' order represents '1' with '5989'
-5988 5989 0
c Var 'aux1496' direct represents '1' with '5990'
5988 -5989 5990 0
-5990 5989 0
-5990 -5988 0
c Var 'aux1496' order represents '2' with '5991'
-5989 5991 0
c Var 'aux1496' direct represents '2' with '5992'
5989 -5991 5992 0
-5992 5991 0
-5992 -5989 0
c Var 'aux1496' order represents '3' with '5993'
-5991 5993 0
c Var 'aux1496' direct represents '3' with '5994'
5991 -5993 5994 0
-5994 5993 0
-5994 -5991 0
c Var 'aux1496' direct represents '4' with '-5993'
5988 5990 5992 5994 -5993 0
c Encoding variable: aux1497 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '5995'
c Var 'aux1497' direct represents '0' with '5995'
c Var 'aux1497' order represents '1' with '5996'
-5995 5996 0
c Var 'aux1497' direct represents '1' with '5997'
5995 -5996 5997 0
-5997 5996 0
-5997 -5995 0
c Var 'aux1497' direct represents '2' with '-5996'
5995 5997 -5996 0
c Encoding variable: aux1498 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '5998'
c Var 'aux1498' direct represents '0' with '5998'
c Var 'aux1498' order represents '1' with '5999'
-5998 5999 0
c Var 'aux1498' direct represents '1' with '6000'
5998 -5999 6000 0
-6000 5999 0
-6000 -5998 0
c Var 'aux1498' direct represents '2' with '-5999'
5998 6000 -5999 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6001'
c Var 'aux1499' direct represents '0' with '6001'
c Var 'aux1499' order represents '1' with '6002'
-6001 6002 0
c Var 'aux1499' direct represents '1' with '6003'
6001 -6002 6003 0
-6003 6002 0
-6003 -6001 0
c Var 'aux1499' direct represents '2' with '-6002'
6001 6003 -6002 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6004'
c Var 'aux1500' direct represents '0' with '6004'
c Var 'aux1500' order represents '1' with '6005'
-6004 6005 0
c Var 'aux1500' direct represents '1' with '6006'
6004 -6005 6006 0
-6006 6005 0
-6006 -6004 0
c Var 'aux1500' direct represents '2' with '-6005'
6004 6006 -6005 0
c Encoding variable: aux1501 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1500))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6007'
c Var 'aux1501' direct represents '0' with '6007'
c Var 'aux1501' order represents '1' with '6008'
-6007 6008 0
c Var 'aux1501' direct represents '1' with '6009'
6007 -6008 6009 0
-6009 6008 0
-6009 -6007 0
c Var 'aux1501' order represents '2' with '6010'
-6008 6010 0
c Var 'aux1501' direct represents '2' with '6011'
6008 -6010 6011 0
-6011 6010 0
-6011 -6008 0
c Var 'aux1501' direct represents '3' with '-6010'
6007 6009 6011 -6010 0
c Encoding variable: aux1502 with domain: int(0..4) (representing constraint (aux1497 + aux1499))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6012'
c Var 'aux1502' direct represents '0' with '6012'
c Var 'aux1502' order represents '1' with '6013'
-6012 6013 0
c Var 'aux1502' direct represents '1' with '6014'
6012 -6013 6014 0
-6014 6013 0
-6014 -6012 0
c Var 'aux1502' order represents '2' with '6015'
-6013 6015 0
c Var 'aux1502' direct represents '2' with '6016'
6013 -6015 6016 0
-6016 6015 0
-6016 -6013 0
c Var 'aux1502' order represents '3' with '6017'
-6015 6017 0
c Var 'aux1502' direct represents '3' with '6018'
6015 -6017 6018 0
-6018 6017 0
-6018 -6015 0
c Var 'aux1502' direct represents '4' with '-6017'
6012 6014 6016 6018 -6017 0
c Encoding variable: aux1503 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6019'
c Var 'aux1503' direct represents '0' with '6019'
c Var 'aux1503' order represents '1' with '6020'
-6019 6020 0
c Var 'aux1503' direct represents '1' with '6021'
6019 -6020 6021 0
-6021 6020 0
-6021 -6019 0
c Var 'aux1503' direct represents '2' with '-6020'
6019 6021 -6020 0
c Encoding variable: aux1504 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6022'
c Var 'aux1504' direct represents '0' with '6022'
c Var 'aux1504' order represents '1' with '6023'
-6022 6023 0
c Var 'aux1504' direct represents '1' with '6024'
6022 -6023 6024 0
-6024 6023 0
-6024 -6022 0
c Var 'aux1504' direct represents '2' with '-6023'
6022 6024 -6023 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6025'
c Var 'aux1505' direct represents '0' with '6025'
c Var 'aux1505' order represents '1' with '6026'
-6025 6026 0
c Var 'aux1505' direct represents '1' with '6027'
6025 -6026 6027 0
-6027 6026 0
-6027 -6025 0
c Var 'aux1505' direct represents '2' with '-6026'
6025 6027 -6026 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6028'
c Var 'aux1506' direct represents '0' with '6028'
c Var 'aux1506' order represents '1' with '6029'
-6028 6029 0
c Var 'aux1506' direct represents '1' with '6030'
6028 -6029 6030 0
-6030 6029 0
-6030 -6028 0
c Var 'aux1506' direct represents '2' with '-6029'
6028 6030 -6029 0
c Encoding variable: aux1507 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1506))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6031'
c Var 'aux1507' direct represents '0' with '6031'
c Var 'aux1507' order represents '1' with '6032'
-6031 6032 0
c Var 'aux1507' direct represents '1' with '6033'
6031 -6032 6033 0
-6033 6032 0
-6033 -6031 0
c Var 'aux1507' order represents '2' with '6034'
-6032 6034 0
c Var 'aux1507' direct represents '2' with '6035'
6032 -6034 6035 0
-6035 6034 0
-6035 -6032 0
c Var 'aux1507' direct represents '3' with '-6034'
6031 6033 6035 -6034 0
c Encoding variable: aux1508 with domain: int(0..4) (representing constraint (aux1503 + aux1505))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6036'
c Var 'aux1508' direct represents '0' with '6036'
c Var 'aux1508' order represents '1' with '6037'
-6036 6037 0
c Var 'aux1508' direct represents '1' with '6038'
6036 -6037 6038 0
-6038 6037 0
-6038 -6036 0
c Var 'aux1508' order represents '2' with '6039'
-6037 6039 0
c Var 'aux1508' direct represents '2' with '6040'
6037 -6039 6040 0
-6040 6039 0
-6040 -6037 0
c Var 'aux1508' order represents '3' with '6041'
-6039 6041 0
c Var 'aux1508' direct represents '3' with '6042'
6039 -6041 6042 0
-6042 6041 0
-6042 -6039 0
c Var 'aux1508' direct represents '4' with '-6041'
6036 6038 6040 6042 -6041 0
c Encoding variable: aux1509 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6043'
c Var 'aux1509' direct represents '0' with '6043'
c Var 'aux1509' order represents '1' with '6044'
-6043 6044 0
c Var 'aux1509' direct represents '1' with '6045'
6043 -6044 6045 0
-6045 6044 0
-6045 -6043 0
c Var 'aux1509' direct represents '2' with '-6044'
6043 6045 -6044 0
c Encoding variable: aux1510 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6046'
c Var 'aux1510' direct represents '0' with '6046'
c Var 'aux1510' order represents '1' with '6047'
-6046 6047 0
c Var 'aux1510' direct represents '1' with '6048'
6046 -6047 6048 0
-6048 6047 0
-6048 -6046 0
c Var 'aux1510' direct represents '2' with '-6047'
6046 6048 -6047 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6049'
c Var 'aux1511' direct represents '0' with '6049'
c Var 'aux1511' order represents '1' with '6050'
-6049 6050 0
c Var 'aux1511' direct represents '1' with '6051'
6049 -6050 6051 0
-6051 6050 0
-6051 -6049 0
c Var 'aux1511' direct represents '2' with '-6050'
6049 6051 -6050 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6052'
c Var 'aux1512' direct represents '0' with '6052'
c Var 'aux1512' order represents '1' with '6053'
-6052 6053 0
c Var 'aux1512' direct represents '1' with '6054'
6052 -6053 6054 0
-6054 6053 0
-6054 -6052 0
c Var 'aux1512' direct represents '2' with '-6053'
6052 6054 -6053 0
c Encoding variable: aux1513 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1512))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6055'
c Var 'aux1513' direct represents '0' with '6055'
c Var 'aux1513' order represents '1' with '6056'
-6055 6056 0
c Var 'aux1513' direct represents '1' with '6057'
6055 -6056 6057 0
-6057 6056 0
-6057 -6055 0
c Var 'aux1513' order represents '2' with '6058'
-6056 6058 0
c Var 'aux1513' direct represents '2' with '6059'
6056 -6058 6059 0
-6059 6058 0
-6059 -6056 0
c Var 'aux1513' direct represents '3' with '-6058'
6055 6057 6059 -6058 0
c Encoding variable: aux1514 with domain: int(0..4) (representing constraint (aux1509 + aux1511))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6060'
c Var 'aux1514' direct represents '0' with '6060'
c Var 'aux1514' order represents '1' with '6061'
-6060 6061 0
c Var 'aux1514' direct represents '1' with '6062'
6060 -6061 6062 0
-6062 6061 0
-6062 -6060 0
c Var 'aux1514' order represents '2' with '6063'
-6061 6063 0
c Var 'aux1514' direct represents '2' with '6064'
6061 -6063 6064 0
-6064 6063 0
-6064 -6061 0
c Var 'aux1514' order represents '3' with '6065'
-6063 6065 0
c Var 'aux1514' direct represents '3' with '6066'
6063 -6065 6066 0
-6066 6065 0
-6066 -6063 0
c Var 'aux1514' direct represents '4' with '-6065'
6060 6062 6064 6066 -6065 0
c Encoding variable: aux1515 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6067'
c Var 'aux1515' direct represents '0' with '6067'
c Var 'aux1515' order represents '1' with '6068'
-6067 6068 0
c Var 'aux1515' direct represents '1' with '6069'
6067 -6068 6069 0
-6069 6068 0
-6069 -6067 0
c Var 'aux1515' direct represents '2' with '-6068'
6067 6069 -6068 0
c Encoding variable: aux1516 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6070'
c Var 'aux1516' direct represents '0' with '6070'
c Var 'aux1516' order represents '1' with '6071'
-6070 6071 0
c Var 'aux1516' direct represents '1' with '6072'
6070 -6071 6072 0
-6072 6071 0
-6072 -6070 0
c Var 'aux1516' direct represents '2' with '-6071'
6070 6072 -6071 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6073'
c Var 'aux1517' direct represents '0' with '6073'
c Var 'aux1517' order represents '1' with '6074'
-6073 6074 0
c Var 'aux1517' direct represents '1' with '6075'
6073 -6074 6075 0
-6075 6074 0
-6075 -6073 0
c Var 'aux1517' direct represents '2' with '-6074'
6073 6075 -6074 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6076'
c Var 'aux1518' direct represents '0' with '6076'
c Var 'aux1518' order represents '1' with '6077'
-6076 6077 0
c Var 'aux1518' direct represents '1' with '6078'
6076 -6077 6078 0
-6078 6077 0
-6078 -6076 0
c Var 'aux1518' direct represents '2' with '-6077'
6076 6078 -6077 0
c Encoding variable: aux1519 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1518))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6079'
c Var 'aux1519' direct represents '0' with '6079'
c Var 'aux1519' order represents '1' with '6080'
-6079 6080 0
c Var 'aux1519' direct represents '1' with '6081'
6079 -6080 6081 0
-6081 6080 0
-6081 -6079 0
c Var 'aux1519' order represents '2' with '6082'
-6080 6082 0
c Var 'aux1519' direct represents '2' with '6083'
6080 -6082 6083 0
-6083 6082 0
-6083 -6080 0
c Var 'aux1519' direct represents '3' with '-6082'
6079 6081 6083 -6082 0
c Encoding variable: aux1520 with domain: int(0..4) (representing constraint (aux1515 + aux1517))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6084'
c Var 'aux1520' direct represents '0' with '6084'
c Var 'aux1520' order represents '1' with '6085'
-6084 6085 0
c Var 'aux1520' direct represents '1' with '6086'
6084 -6085 6086 0
-6086 6085 0
-6086 -6084 0
c Var 'aux1520' order represents '2' with '6087'
-6085 6087 0
c Var 'aux1520' direct represents '2' with '6088'
6085 -6087 6088 0
-6088 6087 0
-6088 -6085 0
c Var 'aux1520' order represents '3' with '6089'
-6087 6089 0
c Var 'aux1520' direct represents '3' with '6090'
6087 -6089 6090 0
-6090 6089 0
-6090 -6087 0
c Var 'aux1520' direct represents '4' with '-6089'
6084 6086 6088 6090 -6089 0
c Encoding variable: aux1521 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6091'
c Var 'aux1521' direct represents '0' with '6091'
c Var 'aux1521' order represents '1' with '6092'
-6091 6092 0
c Var 'aux1521' direct represents '1' with '6093'
6091 -6092 6093 0
-6093 6092 0
-6093 -6091 0
c Var 'aux1521' direct represents '2' with '-6092'
6091 6093 -6092 0
c Encoding variable: aux1522 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6094'
c Var 'aux1522' direct represents '0' with '6094'
c Var 'aux1522' order represents '1' with '6095'
-6094 6095 0
c Var 'aux1522' direct represents '1' with '6096'
6094 -6095 6096 0
-6096 6095 0
-6096 -6094 0
c Var 'aux1522' direct represents '2' with '-6095'
6094 6096 -6095 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6097'
c Var 'aux1523' direct represents '0' with '6097'
c Var 'aux1523' order represents '1' with '6098'
-6097 6098 0
c Var 'aux1523' direct represents '1' with '6099'
6097 -6098 6099 0
-6099 6098 0
-6099 -6097 0
c Var 'aux1523' direct represents '2' with '-6098'
6097 6099 -6098 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6100'
c Var 'aux1524' direct represents '0' with '6100'
c Var 'aux1524' order represents '1' with '6101'
-6100 6101 0
c Var 'aux1524' direct represents '1' with '6102'
6100 -6101 6102 0
-6102 6101 0
-6102 -6100 0
c Var 'aux1524' direct represents '2' with '-6101'
6100 6102 -6101 0
c Encoding variable: aux1525 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1524))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6103'
c Var 'aux1525' direct represents '0' with '6103'
c Var 'aux1525' order represents '1' with '6104'
-6103 6104 0
c Var 'aux1525' direct represents '1' with '6105'
6103 -6104 6105 0
-6105 6104 0
-6105 -6103 0
c Var 'aux1525' order represents '2' with '6106'
-6104 6106 0
c Var 'aux1525' direct represents '2' with '6107'
6104 -6106 6107 0
-6107 6106 0
-6107 -6104 0
c Var 'aux1525' direct represents '3' with '-6106'
6103 6105 6107 -6106 0
c Encoding variable: aux1526 with domain: int(0..4) (representing constraint (aux1521 + aux1523))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6108'
c Var 'aux1526' direct represents '0' with '6108'
c Var 'aux1526' order represents '1' with '6109'
-6108 6109 0
c Var 'aux1526' direct represents '1' with '6110'
6108 -6109 6110 0
-6110 6109 0
-6110 -6108 0
c Var 'aux1526' order represents '2' with '6111'
-6109 6111 0
c Var 'aux1526' direct represents '2' with '6112'
6109 -6111 6112 0
-6112 6111 0
-6112 -6109 0
c Var 'aux1526' order represents '3' with '6113'
-6111 6113 0
c Var 'aux1526' direct represents '3' with '6114'
6111 -6113 6114 0
-6114 6113 0
-6114 -6111 0
c Var 'aux1526' direct represents '4' with '-6113'
6108 6110 6112 6114 -6113 0
c Encoding variable: aux1527 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6115'
c Var 'aux1527' direct represents '0' with '6115'
c Var 'aux1527' order represents '1' with '6116'
-6115 6116 0
c Var 'aux1527' direct represents '1' with '6117'
6115 -6116 6117 0
-6117 6116 0
-6117 -6115 0
c Var 'aux1527' direct represents '2' with '-6116'
6115 6117 -6116 0
c Encoding variable: aux1528 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6118'
c Var 'aux1528' direct represents '0' with '6118'
c Var 'aux1528' order represents '1' with '6119'
-6118 6119 0
c Var 'aux1528' direct represents '1' with '6120'
6118 -6119 6120 0
-6120 6119 0
-6120 -6118 0
c Var 'aux1528' direct represents '2' with '-6119'
6118 6120 -6119 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6121'
c Var 'aux1529' direct represents '0' with '6121'
c Var 'aux1529' order represents '1' with '6122'
-6121 6122 0
c Var 'aux1529' direct represents '1' with '6123'
6121 -6122 6123 0
-6123 6122 0
-6123 -6121 0
c Var 'aux1529' direct represents '2' with '-6122'
6121 6123 -6122 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6124'
c Var 'aux1530' direct represents '0' with '6124'
c Var 'aux1530' order represents '1' with '6125'
-6124 6125 0
c Var 'aux1530' direct represents '1' with '6126'
6124 -6125 6126 0
-6126 6125 0
-6126 -6124 0
c Var 'aux1530' direct represents '2' with '-6125'
6124 6126 -6125 0
c Encoding variable: aux1531 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1530))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6127'
c Var 'aux1531' direct represents '0' with '6127'
c Var 'aux1531' order represents '1' with '6128'
-6127 6128 0
c Var 'aux1531' direct represents '1' with '6129'
6127 -6128 6129 0
-6129 6128 0
-6129 -6127 0
c Var 'aux1531' order represents '2' with '6130'
-6128 6130 0
c Var 'aux1531' direct represents '2' with '6131'
6128 -6130 6131 0
-6131 6130 0
-6131 -6128 0
c Var 'aux1531' direct represents '3' with '-6130'
6127 6129 6131 -6130 0
c Encoding variable: aux1532 with domain: int(0..4) (representing constraint (aux1527 + aux1529))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6132'
c Var 'aux1532' direct represents '0' with '6132'
c Var 'aux1532' order represents '1' with '6133'
-6132 6133 0
c Var 'aux1532' direct represents '1' with '6134'
6132 -6133 6134 0
-6134 6133 0
-6134 -6132 0
c Var 'aux1532' order represents '2' with '6135'
-6133 6135 0
c Var 'aux1532' direct represents '2' with '6136'
6133 -6135 6136 0
-6136 6135 0
-6136 -6133 0
c Var 'aux1532' order represents '3' with '6137'
-6135 6137 0
c Var 'aux1532' direct represents '3' with '6138'
6135 -6137 6138 0
-6138 6137 0
-6138 -6135 0
c Var 'aux1532' direct represents '4' with '-6137'
6132 6134 6136 6138 -6137 0
c Encoding variable: aux1533 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6139'
c Var 'aux1533' direct represents '0' with '6139'
c Var 'aux1533' order represents '1' with '6140'
-6139 6140 0
c Var 'aux1533' direct represents '1' with '6141'
6139 -6140 6141 0
-6141 6140 0
-6141 -6139 0
c Var 'aux1533' direct represents '2' with '-6140'
6139 6141 -6140 0
c Encoding variable: aux1534 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6142'
c Var 'aux1534' direct represents '0' with '6142'
c Var 'aux1534' order represents '1' with '6143'
-6142 6143 0
c Var 'aux1534' direct represents '1' with '6144'
6142 -6143 6144 0
-6144 6143 0
-6144 -6142 0
c Var 'aux1534' direct represents '2' with '-6143'
6142 6144 -6143 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6145'
c Var 'aux1535' direct represents '0' with '6145'
c Var 'aux1535' order represents '1' with '6146'
-6145 6146 0
c Var 'aux1535' direct represents '1' with '6147'
6145 -6146 6147 0
-6147 6146 0
-6147 -6145 0
c Var 'aux1535' direct represents '2' with '-6146'
6145 6147 -6146 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6148'
c Var 'aux1536' direct represents '0' with '6148'
c Var 'aux1536' order represents '1' with '6149'
-6148 6149 0
c Var 'aux1536' direct represents '1' with '6150'
6148 -6149 6150 0
-6150 6149 0
-6150 -6148 0
c Var 'aux1536' direct represents '2' with '-6149'
6148 6150 -6149 0
c Encoding variable: aux1537 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1536))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6151'
c Var 'aux1537' direct represents '0' with '6151'
c Var 'aux1537' order represents '1' with '6152'
-6151 6152 0
c Var 'aux1537' direct represents '1' with '6153'
6151 -6152 6153 0
-6153 6152 0
-6153 -6151 0
c Var 'aux1537' order represents '2' with '6154'
-6152 6154 0
c Var 'aux1537' direct represents '2' with '6155'
6152 -6154 6155 0
-6155 6154 0
-6155 -6152 0
c Var 'aux1537' direct represents '3' with '-6154'
6151 6153 6155 -6154 0
c Encoding variable: aux1538 with domain: int(0..4) (representing constraint (aux1533 + aux1535))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6156'
c Var 'aux1538' direct represents '0' with '6156'
c Var 'aux1538' order represents '1' with '6157'
-6156 6157 0
c Var 'aux1538' direct represents '1' with '6158'
6156 -6157 6158 0
-6158 6157 0
-6158 -6156 0
c Var 'aux1538' order represents '2' with '6159'
-6157 6159 0
c Var 'aux1538' direct represents '2' with '6160'
6157 -6159 6160 0
-6160 6159 0
-6160 -6157 0
c Var 'aux1538' order represents '3' with '6161'
-6159 6161 0
c Var 'aux1538' direct represents '3' with '6162'
6159 -6161 6162 0
-6162 6161 0
-6162 -6159 0
c Var 'aux1538' direct represents '4' with '-6161'
6156 6158 6160 6162 -6161 0
c Encoding variable: aux1539 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6163'
c Var 'aux1539' direct represents '0' with '6163'
c Var 'aux1539' order represents '1' with '6164'
-6163 6164 0
c Var 'aux1539' direct represents '1' with '6165'
6163 -6164 6165 0
-6165 6164 0
-6165 -6163 0
c Var 'aux1539' direct represents '2' with '-6164'
6163 6165 -6164 0
c Encoding variable: aux1540 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6166'
c Var 'aux1540' direct represents '0' with '6166'
c Var 'aux1540' order represents '1' with '6167'
-6166 6167 0
c Var 'aux1540' direct represents '1' with '6168'
6166 -6167 6168 0
-6168 6167 0
-6168 -6166 0
c Var 'aux1540' direct represents '2' with '-6167'
6166 6168 -6167 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6169'
c Var 'aux1541' direct represents '0' with '6169'
c Var 'aux1541' order represents '1' with '6170'
-6169 6170 0
c Var 'aux1541' direct represents '1' with '6171'
6169 -6170 6171 0
-6171 6170 0
-6171 -6169 0
c Var 'aux1541' direct represents '2' with '-6170'
6169 6171 -6170 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6172'
c Var 'aux1542' direct represents '0' with '6172'
c Var 'aux1542' order represents '1' with '6173'
-6172 6173 0
c Var 'aux1542' direct represents '1' with '6174'
6172 -6173 6174 0
-6174 6173 0
-6174 -6172 0
c Var 'aux1542' direct represents '2' with '-6173'
6172 6174 -6173 0
c Encoding variable: aux1543 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1542))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6175'
c Var 'aux1543' direct represents '0' with '6175'
c Var 'aux1543' order represents '1' with '6176'
-6175 6176 0
c Var 'aux1543' direct represents '1' with '6177'
6175 -6176 6177 0
-6177 6176 0
-6177 -6175 0
c Var 'aux1543' order represents '2' with '6178'
-6176 6178 0
c Var 'aux1543' direct represents '2' with '6179'
6176 -6178 6179 0
-6179 6178 0
-6179 -6176 0
c Var 'aux1543' direct represents '3' with '-6178'
6175 6177 6179 -6178 0
c Encoding variable: aux1544 with domain: int(0..4) (representing constraint (aux1539 + aux1541))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6180'
c Var 'aux1544' direct represents '0' with '6180'
c Var 'aux1544' order represents '1' with '6181'
-6180 6181 0
c Var 'aux1544' direct represents '1' with '6182'
6180 -6181 6182 0
-6182 6181 0
-6182 -6180 0
c Var 'aux1544' order represents '2' with '6183'
-6181 6183 0
c Var 'aux1544' direct represents '2' with '6184'
6181 -6183 6184 0
-6184 6183 0
-6184 -6181 0
c Var 'aux1544' order represents '3' with '6185'
-6183 6185 0
c Var 'aux1544' direct represents '3' with '6186'
6183 -6185 6186 0
-6186 6185 0
-6186 -6183 0
c Var 'aux1544' direct represents '4' with '-6185'
6180 6182 6184 6186 -6185 0
c Encoding variable: aux1545 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6187'
c Var 'aux1545' direct represents '0' with '6187'
c Var 'aux1545' order represents '1' with '6188'
-6187 6188 0
c Var 'aux1545' direct represents '1' with '6189'
6187 -6188 6189 0
-6189 6188 0
-6189 -6187 0
c Var 'aux1545' direct represents '2' with '-6188'
6187 6189 -6188 0
c Encoding variable: aux1546 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6190'
c Var 'aux1546' direct represents '0' with '6190'
c Var 'aux1546' order represents '1' with '6191'
-6190 6191 0
c Var 'aux1546' direct represents '1' with '6192'
6190 -6191 6192 0
-6192 6191 0
-6192 -6190 0
c Var 'aux1546' direct represents '2' with '-6191'
6190 6192 -6191 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6193'
c Var 'aux1547' direct represents '0' with '6193'
c Var 'aux1547' order represents '1' with '6194'
-6193 6194 0
c Var 'aux1547' direct represents '1' with '6195'
6193 -6194 6195 0
-6195 6194 0
-6195 -6193 0
c Var 'aux1547' direct represents '2' with '-6194'
6193 6195 -6194 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6196'
c Var 'aux1548' direct represents '0' with '6196'
c Var 'aux1548' order represents '1' with '6197'
-6196 6197 0
c Var 'aux1548' direct represents '1' with '6198'
6196 -6197 6198 0
-6198 6197 0
-6198 -6196 0
c Var 'aux1548' direct represents '2' with '-6197'
6196 6198 -6197 0
c Encoding variable: aux1549 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1548))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6199'
c Var 'aux1549' direct represents '0' with '6199'
c Var 'aux1549' order represents '1' with '6200'
-6199 6200 0
c Var 'aux1549' direct represents '1' with '6201'
6199 -6200 6201 0
-6201 6200 0
-6201 -6199 0
c Var 'aux1549' order represents '2' with '6202'
-6200 6202 0
c Var 'aux1549' direct represents '2' with '6203'
6200 -6202 6203 0
-6203 6202 0
-6203 -6200 0
c Var 'aux1549' direct represents '3' with '-6202'
6199 6201 6203 -6202 0
c Encoding variable: aux1550 with domain: int(0..4) (representing constraint (aux1545 + aux1547))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6204'
c Var 'aux1550' direct represents '0' with '6204'
c Var 'aux1550' order represents '1' with '6205'
-6204 6205 0
c Var 'aux1550' direct represents '1' with '6206'
6204 -6205 6206 0
-6206 6205 0
-6206 -6204 0
c Var 'aux1550' order represents '2' with '6207'
-6205 6207 0
c Var 'aux1550' direct represents '2' with '6208'
6205 -6207 6208 0
-6208 6207 0
-6208 -6205 0
c Var 'aux1550' order represents '3' with '6209'
-6207 6209 0
c Var 'aux1550' direct represents '3' with '6210'
6207 -6209 6210 0
-6210 6209 0
-6210 -6207 0
c Var 'aux1550' direct represents '4' with '-6209'
6204 6206 6208 6210 -6209 0
c Encoding variable: aux1551 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6211'
c Var 'aux1551' direct represents '0' with '6211'
c Var 'aux1551' order represents '1' with '6212'
-6211 6212 0
c Var 'aux1551' direct represents '1' with '6213'
6211 -6212 6213 0
-6213 6212 0
-6213 -6211 0
c Var 'aux1551' direct represents '2' with '-6212'
6211 6213 -6212 0
c Encoding variable: aux1552 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6214'
c Var 'aux1552' direct represents '0' with '6214'
c Var 'aux1552' order represents '1' with '6215'
-6214 6215 0
c Var 'aux1552' direct represents '1' with '6216'
6214 -6215 6216 0
-6216 6215 0
-6216 -6214 0
c Var 'aux1552' direct represents '2' with '-6215'
6214 6216 -6215 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6217'
c Var 'aux1553' direct represents '0' with '6217'
c Var 'aux1553' order represents '1' with '6218'
-6217 6218 0
c Var 'aux1553' direct represents '1' with '6219'
6217 -6218 6219 0
-6219 6218 0
-6219 -6217 0
c Var 'aux1553' direct represents '2' with '-6218'
6217 6219 -6218 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6220'
c Var 'aux1554' direct represents '0' with '6220'
c Var 'aux1554' order represents '1' with '6221'
-6220 6221 0
c Var 'aux1554' direct represents '1' with '6222'
6220 -6221 6222 0
-6222 6221 0
-6222 -6220 0
c Var 'aux1554' direct represents '2' with '-6221'
6220 6222 -6221 0
c Encoding variable: aux1555 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1554))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6223'
c Var 'aux1555' direct represents '0' with '6223'
c Var 'aux1555' order represents '1' with '6224'
-6223 6224 0
c Var 'aux1555' direct represents '1' with '6225'
6223 -6224 6225 0
-6225 6224 0
-6225 -6223 0
c Var 'aux1555' order represents '2' with '6226'
-6224 6226 0
c Var 'aux1555' direct represents '2' with '6227'
6224 -6226 6227 0
-6227 6226 0
-6227 -6224 0
c Var 'aux1555' direct represents '3' with '-6226'
6223 6225 6227 -6226 0
c Encoding variable: aux1556 with domain: int(0..4) (representing constraint (aux1551 + aux1553))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6228'
c Var 'aux1556' direct represents '0' with '6228'
c Var 'aux1556' order represents '1' with '6229'
-6228 6229 0
c Var 'aux1556' direct represents '1' with '6230'
6228 -6229 6230 0
-6230 6229 0
-6230 -6228 0
c Var 'aux1556' order represents '2' with '6231'
-6229 6231 0
c Var 'aux1556' direct represents '2' with '6232'
6229 -6231 6232 0
-6232 6231 0
-6232 -6229 0
c Var 'aux1556' order represents '3' with '6233'
-6231 6233 0
c Var 'aux1556' direct represents '3' with '6234'
6231 -6233 6234 0
-6234 6233 0
-6234 -6231 0
c Var 'aux1556' direct represents '4' with '-6233'
6228 6230 6232 6234 -6233 0
c Encoding variable: aux1557 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6235'
c Var 'aux1557' direct represents '0' with '6235'
c Var 'aux1557' order represents '1' with '6236'
-6235 6236 0
c Var 'aux1557' direct represents '1' with '6237'
6235 -6236 6237 0
-6237 6236 0
-6237 -6235 0
c Var 'aux1557' direct represents '2' with '-6236'
6235 6237 -6236 0
c Encoding variable: aux1558 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6238'
c Var 'aux1558' direct represents '0' with '6238'
c Var 'aux1558' order represents '1' with '6239'
-6238 6239 0
c Var 'aux1558' direct represents '1' with '6240'
6238 -6239 6240 0
-6240 6239 0
-6240 -6238 0
c Var 'aux1558' direct represents '2' with '-6239'
6238 6240 -6239 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6241'
c Var 'aux1559' direct represents '0' with '6241'
c Var 'aux1559' order represents '1' with '6242'
-6241 6242 0
c Var 'aux1559' direct represents '1' with '6243'
6241 -6242 6243 0
-6243 6242 0
-6243 -6241 0
c Var 'aux1559' direct represents '2' with '-6242'
6241 6243 -6242 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6244'
c Var 'aux1560' direct represents '0' with '6244'
c Var 'aux1560' order represents '1' with '6245'
-6244 6245 0
c Var 'aux1560' direct represents '1' with '6246'
6244 -6245 6246 0
-6246 6245 0
-6246 -6244 0
c Var 'aux1560' direct represents '2' with '-6245'
6244 6246 -6245 0
c Encoding variable: aux1561 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1560))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6247'
c Var 'aux1561' direct represents '0' with '6247'
c Var 'aux1561' order represents '1' with '6248'
-6247 6248 0
c Var 'aux1561' direct represents '1' with '6249'
6247 -6248 6249 0
-6249 6248 0
-6249 -6247 0
c Var 'aux1561' order represents '2' with '6250'
-6248 6250 0
c Var 'aux1561' direct represents '2' with '6251'
6248 -6250 6251 0
-6251 6250 0
-6251 -6248 0
c Var 'aux1561' direct represents '3' with '-6250'
6247 6249 6251 -6250 0
c Encoding variable: aux1562 with domain: int(0..4) (representing constraint (aux1557 + aux1559))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6252'
c Var 'aux1562' direct represents '0' with '6252'
c Var 'aux1562' order represents '1' with '6253'
-6252 6253 0
c Var 'aux1562' direct represents '1' with '6254'
6252 -6253 6254 0
-6254 6253 0
-6254 -6252 0
c Var 'aux1562' order represents '2' with '6255'
-6253 6255 0
c Var 'aux1562' direct represents '2' with '6256'
6253 -6255 6256 0
-6256 6255 0
-6256 -6253 0
c Var 'aux1562' order represents '3' with '6257'
-6255 6257 0
c Var 'aux1562' direct represents '3' with '6258'
6255 -6257 6258 0
-6258 6257 0
-6258 -6255 0
c Var 'aux1562' direct represents '4' with '-6257'
6252 6254 6256 6258 -6257 0
c Encoding variable: aux1563 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6259'
c Var 'aux1563' direct represents '0' with '6259'
c Var 'aux1563' order represents '1' with '6260'
-6259 6260 0
c Var 'aux1563' direct represents '1' with '6261'
6259 -6260 6261 0
-6261 6260 0
-6261 -6259 0
c Var 'aux1563' direct represents '2' with '-6260'
6259 6261 -6260 0
c Encoding variable: aux1564 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6262'
c Var 'aux1564' direct represents '0' with '6262'
c Var 'aux1564' order represents '1' with '6263'
-6262 6263 0
c Var 'aux1564' direct represents '1' with '6264'
6262 -6263 6264 0
-6264 6263 0
-6264 -6262 0
c Var 'aux1564' direct represents '2' with '-6263'
6262 6264 -6263 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6265'
c Var 'aux1565' direct represents '0' with '6265'
c Var 'aux1565' order represents '1' with '6266'
-6265 6266 0
c Var 'aux1565' direct represents '1' with '6267'
6265 -6266 6267 0
-6267 6266 0
-6267 -6265 0
c Var 'aux1565' direct represents '2' with '-6266'
6265 6267 -6266 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6268'
c Var 'aux1566' direct represents '0' with '6268'
c Var 'aux1566' order represents '1' with '6269'
-6268 6269 0
c Var 'aux1566' direct represents '1' with '6270'
6268 -6269 6270 0
-6270 6269 0
-6270 -6268 0
c Var 'aux1566' direct represents '2' with '-6269'
6268 6270 -6269 0
c Encoding variable: aux1567 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1566))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6271'
c Var 'aux1567' direct represents '0' with '6271'
c Var 'aux1567' order represents '1' with '6272'
-6271 6272 0
c Var 'aux1567' direct represents '1' with '6273'
6271 -6272 6273 0
-6273 6272 0
-6273 -6271 0
c Var 'aux1567' order represents '2' with '6274'
-6272 6274 0
c Var 'aux1567' direct represents '2' with '6275'
6272 -6274 6275 0
-6275 6274 0
-6275 -6272 0
c Var 'aux1567' direct represents '3' with '-6274'
6271 6273 6275 -6274 0
c Encoding variable: aux1568 with domain: int(0..4) (representing constraint (aux1563 + aux1565))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6276'
c Var 'aux1568' direct represents '0' with '6276'
c Var 'aux1568' order represents '1' with '6277'
-6276 6277 0
c Var 'aux1568' direct represents '1' with '6278'
6276 -6277 6278 0
-6278 6277 0
-6278 -6276 0
c Var 'aux1568' order represents '2' with '6279'
-6277 6279 0
c Var 'aux1568' direct represents '2' with '6280'
6277 -6279 6280 0
-6280 6279 0
-6280 -6277 0
c Var 'aux1568' order represents '3' with '6281'
-6279 6281 0
c Var 'aux1568' direct represents '3' with '6282'
6279 -6281 6282 0
-6282 6281 0
-6282 -6279 0
c Var 'aux1568' direct represents '4' with '-6281'
6276 6278 6280 6282 -6281 0
c Encoding variable: aux1569 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6283'
c Var 'aux1569' direct represents '0' with '6283'
c Var 'aux1569' order represents '1' with '6284'
-6283 6284 0
c Var 'aux1569' direct represents '1' with '6285'
6283 -6284 6285 0
-6285 6284 0
-6285 -6283 0
c Var 'aux1569' direct represents '2' with '-6284'
6283 6285 -6284 0
c Encoding variable: aux1570 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6286'
c Var 'aux1570' direct represents '0' with '6286'
c Var 'aux1570' order represents '1' with '6287'
-6286 6287 0
c Var 'aux1570' direct represents '1' with '6288'
6286 -6287 6288 0
-6288 6287 0
-6288 -6286 0
c Var 'aux1570' direct represents '2' with '-6287'
6286 6288 -6287 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6289'
c Var 'aux1571' direct represents '0' with '6289'
c Var 'aux1571' order represents '1' with '6290'
-6289 6290 0
c Var 'aux1571' direct represents '1' with '6291'
6289 -6290 6291 0
-6291 6290 0
-6291 -6289 0
c Var 'aux1571' direct represents '2' with '-6290'
6289 6291 -6290 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6292'
c Var 'aux1572' direct represents '0' with '6292'
c Var 'aux1572' order represents '1' with '6293'
-6292 6293 0
c Var 'aux1572' direct represents '1' with '6294'
6292 -6293 6294 0
-6294 6293 0
-6294 -6292 0
c Var 'aux1572' direct represents '2' with '-6293'
6292 6294 -6293 0
c Encoding variable: aux1573 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1572))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6295'
c Var 'aux1573' direct represents '0' with '6295'
c Var 'aux1573' order represents '1' with '6296'
-6295 6296 0
c Var 'aux1573' direct represents '1' with '6297'
6295 -6296 6297 0
-6297 6296 0
-6297 -6295 0
c Var 'aux1573' order represents '2' with '6298'
-6296 6298 0
c Var 'aux1573' direct represents '2' with '6299'
6296 -6298 6299 0
-6299 6298 0
-6299 -6296 0
c Var 'aux1573' direct represents '3' with '-6298'
6295 6297 6299 -6298 0
c Encoding variable: aux1574 with domain: int(0..4) (representing constraint (aux1569 + aux1571))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6300'
c Var 'aux1574' direct represents '0' with '6300'
c Var 'aux1574' order represents '1' with '6301'
-6300 6301 0
c Var 'aux1574' direct represents '1' with '6302'
6300 -6301 6302 0
-6302 6301 0
-6302 -6300 0
c Var 'aux1574' order represents '2' with '6303'
-6301 6303 0
c Var 'aux1574' direct represents '2' with '6304'
6301 -6303 6304 0
-6304 6303 0
-6304 -6301 0
c Var 'aux1574' order represents '3' with '6305'
-6303 6305 0
c Var 'aux1574' direct represents '3' with '6306'
6303 -6305 6306 0
-6306 6305 0
-6306 -6303 0
c Var 'aux1574' direct represents '4' with '-6305'
6300 6302 6304 6306 -6305 0
c Encoding variable: aux1575 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6307'
c Var 'aux1575' direct represents '0' with '6307'
c Var 'aux1575' order represents '1' with '6308'
-6307 6308 0
c Var 'aux1575' direct represents '1' with '6309'
6307 -6308 6309 0
-6309 6308 0
-6309 -6307 0
c Var 'aux1575' direct represents '2' with '-6308'
6307 6309 -6308 0
c Encoding variable: aux1576 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6310'
c Var 'aux1576' direct represents '0' with '6310'
c Var 'aux1576' order represents '1' with '6311'
-6310 6311 0
c Var 'aux1576' direct represents '1' with '6312'
6310 -6311 6312 0
-6312 6311 0
-6312 -6310 0
c Var 'aux1576' direct represents '2' with '-6311'
6310 6312 -6311 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6313'
c Var 'aux1577' direct represents '0' with '6313'
c Var 'aux1577' order represents '1' with '6314'
-6313 6314 0
c Var 'aux1577' direct represents '1' with '6315'
6313 -6314 6315 0
-6315 6314 0
-6315 -6313 0
c Var 'aux1577' direct represents '2' with '-6314'
6313 6315 -6314 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6316'
c Var 'aux1578' direct represents '0' with '6316'
c Var 'aux1578' order represents '1' with '6317'
-6316 6317 0
c Var 'aux1578' direct represents '1' with '6318'
6316 -6317 6318 0
-6318 6317 0
-6318 -6316 0
c Var 'aux1578' direct represents '2' with '-6317'
6316 6318 -6317 0
c Encoding variable: aux1579 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1578))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6319'
c Var 'aux1579' direct represents '0' with '6319'
c Var 'aux1579' order represents '1' with '6320'
-6319 6320 0
c Var 'aux1579' direct represents '1' with '6321'
6319 -6320 6321 0
-6321 6320 0
-6321 -6319 0
c Var 'aux1579' order represents '2' with '6322'
-6320 6322 0
c Var 'aux1579' direct represents '2' with '6323'
6320 -6322 6323 0
-6323 6322 0
-6323 -6320 0
c Var 'aux1579' direct represents '3' with '-6322'
6319 6321 6323 -6322 0
c Encoding variable: aux1580 with domain: int(0..4) (representing constraint (aux1575 + aux1577))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6324'
c Var 'aux1580' direct represents '0' with '6324'
c Var 'aux1580' order represents '1' with '6325'
-6324 6325 0
c Var 'aux1580' direct represents '1' with '6326'
6324 -6325 6326 0
-6326 6325 0
-6326 -6324 0
c Var 'aux1580' order represents '2' with '6327'
-6325 6327 0
c Var 'aux1580' direct represents '2' with '6328'
6325 -6327 6328 0
-6328 6327 0
-6328 -6325 0
c Var 'aux1580' order represents '3' with '6329'
-6327 6329 0
c Var 'aux1580' direct represents '3' with '6330'
6327 -6329 6330 0
-6330 6329 0
-6330 -6327 0
c Var 'aux1580' direct represents '4' with '-6329'
6324 6326 6328 6330 -6329 0
c Encoding variable: aux1581 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6331'
c Var 'aux1581' direct represents '0' with '6331'
c Var 'aux1581' order represents '1' with '6332'
-6331 6332 0
c Var 'aux1581' direct represents '1' with '6333'
6331 -6332 6333 0
-6333 6332 0
-6333 -6331 0
c Var 'aux1581' direct represents '2' with '-6332'
6331 6333 -6332 0
c Encoding variable: aux1582 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6334'
c Var 'aux1582' direct represents '0' with '6334'
c Var 'aux1582' order represents '1' with '6335'
-6334 6335 0
c Var 'aux1582' direct represents '1' with '6336'
6334 -6335 6336 0
-6336 6335 0
-6336 -6334 0
c Var 'aux1582' direct represents '2' with '-6335'
6334 6336 -6335 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6337'
c Var 'aux1583' direct represents '0' with '6337'
c Var 'aux1583' order represents '1' with '6338'
-6337 6338 0
c Var 'aux1583' direct represents '1' with '6339'
6337 -6338 6339 0
-6339 6338 0
-6339 -6337 0
c Var 'aux1583' direct represents '2' with '-6338'
6337 6339 -6338 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6340'
c Var 'aux1584' direct represents '0' with '6340'
c Var 'aux1584' order represents '1' with '6341'
-6340 6341 0
c Var 'aux1584' direct represents '1' with '6342'
6340 -6341 6342 0
-6342 6341 0
-6342 -6340 0
c Var 'aux1584' direct represents '2' with '-6341'
6340 6342 -6341 0
c Encoding variable: aux1585 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1584))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6343'
c Var 'aux1585' direct represents '0' with '6343'
c Var 'aux1585' order represents '1' with '6344'
-6343 6344 0
c Var 'aux1585' direct represents '1' with '6345'
6343 -6344 6345 0
-6345 6344 0
-6345 -6343 0
c Var 'aux1585' order represents '2' with '6346'
-6344 6346 0
c Var 'aux1585' direct represents '2' with '6347'
6344 -6346 6347 0
-6347 6346 0
-6347 -6344 0
c Var 'aux1585' direct represents '3' with '-6346'
6343 6345 6347 -6346 0
c Encoding variable: aux1586 with domain: int(0..4) (representing constraint (aux1581 + aux1583))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6348'
c Var 'aux1586' direct represents '0' with '6348'
c Var 'aux1586' order represents '1' with '6349'
-6348 6349 0
c Var 'aux1586' direct represents '1' with '6350'
6348 -6349 6350 0
-6350 6349 0
-6350 -6348 0
c Var 'aux1586' order represents '2' with '6351'
-6349 6351 0
c Var 'aux1586' direct represents '2' with '6352'
6349 -6351 6352 0
-6352 6351 0
-6352 -6349 0
c Var 'aux1586' order represents '3' with '6353'
-6351 6353 0
c Var 'aux1586' direct represents '3' with '6354'
6351 -6353 6354 0
-6354 6353 0
-6354 -6351 0
c Var 'aux1586' direct represents '4' with '-6353'
6348 6350 6352 6354 -6353 0
c Encoding variable: aux1587 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6355'
c Var 'aux1587' direct represents '0' with '6355'
c Var 'aux1587' order represents '1' with '6356'
-6355 6356 0
c Var 'aux1587' direct represents '1' with '6357'
6355 -6356 6357 0
-6357 6356 0
-6357 -6355 0
c Var 'aux1587' direct represents '2' with '-6356'
6355 6357 -6356 0
c Encoding variable: aux1588 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6358'
c Var 'aux1588' direct represents '0' with '6358'
c Var 'aux1588' order represents '1' with '6359'
-6358 6359 0
c Var 'aux1588' direct represents '1' with '6360'
6358 -6359 6360 0
-6360 6359 0
-6360 -6358 0
c Var 'aux1588' direct represents '2' with '-6359'
6358 6360 -6359 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6361'
c Var 'aux1589' direct represents '0' with '6361'
c Var 'aux1589' order represents '1' with '6362'
-6361 6362 0
c Var 'aux1589' direct represents '1' with '6363'
6361 -6362 6363 0
-6363 6362 0
-6363 -6361 0
c Var 'aux1589' direct represents '2' with '-6362'
6361 6363 -6362 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6364'
c Var 'aux1590' direct represents '0' with '6364'
c Var 'aux1590' order represents '1' with '6365'
-6364 6365 0
c Var 'aux1590' direct represents '1' with '6366'
6364 -6365 6366 0
-6366 6365 0
-6366 -6364 0
c Var 'aux1590' direct represents '2' with '-6365'
6364 6366 -6365 0
c Encoding variable: aux1591 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1590))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6367'
c Var 'aux1591' direct represents '0' with '6367'
c Var 'aux1591' order represents '1' with '6368'
-6367 6368 0
c Var 'aux1591' direct represents '1' with '6369'
6367 -6368 6369 0
-6369 6368 0
-6369 -6367 0
c Var 'aux1591' order represents '2' with '6370'
-6368 6370 0
c Var 'aux1591' direct represents '2' with '6371'
6368 -6370 6371 0
-6371 6370 0
-6371 -6368 0
c Var 'aux1591' direct represents '3' with '-6370'
6367 6369 6371 -6370 0
c Encoding variable: aux1592 with domain: int(0..4) (representing constraint (aux1587 + aux1589))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6372'
c Var 'aux1592' direct represents '0' with '6372'
c Var 'aux1592' order represents '1' with '6373'
-6372 6373 0
c Var 'aux1592' direct represents '1' with '6374'
6372 -6373 6374 0
-6374 6373 0
-6374 -6372 0
c Var 'aux1592' order represents '2' with '6375'
-6373 6375 0
c Var 'aux1592' direct represents '2' with '6376'
6373 -6375 6376 0
-6376 6375 0
-6376 -6373 0
c Var 'aux1592' order represents '3' with '6377'
-6375 6377 0
c Var 'aux1592' direct represents '3' with '6378'
6375 -6377 6378 0
-6378 6377 0
-6378 -6375 0
c Var 'aux1592' direct represents '4' with '-6377'
6372 6374 6376 6378 -6377 0
c Encoding variable: aux1593 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6379'
c Var 'aux1593' direct represents '0' with '6379'
c Var 'aux1593' order represents '1' with '6380'
-6379 6380 0
c Var 'aux1593' direct represents '1' with '6381'
6379 -6380 6381 0
-6381 6380 0
-6381 -6379 0
c Var 'aux1593' direct represents '2' with '-6380'
6379 6381 -6380 0
c Encoding variable: aux1594 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6382'
c Var 'aux1594' direct represents '0' with '6382'
c Var 'aux1594' order represents '1' with '6383'
-6382 6383 0
c Var 'aux1594' direct represents '1' with '6384'
6382 -6383 6384 0
-6384 6383 0
-6384 -6382 0
c Var 'aux1594' direct represents '2' with '-6383'
6382 6384 -6383 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6385'
c Var 'aux1595' direct represents '0' with '6385'
c Var 'aux1595' order represents '1' with '6386'
-6385 6386 0
c Var 'aux1595' direct represents '1' with '6387'
6385 -6386 6387 0
-6387 6386 0
-6387 -6385 0
c Var 'aux1595' direct represents '2' with '-6386'
6385 6387 -6386 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6388'
c Var 'aux1596' direct represents '0' with '6388'
c Var 'aux1596' order represents '1' with '6389'
-6388 6389 0
c Var 'aux1596' direct represents '1' with '6390'
6388 -6389 6390 0
-6390 6389 0
-6390 -6388 0
c Var 'aux1596' direct represents '2' with '-6389'
6388 6390 -6389 0
c Encoding variable: aux1597 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1596))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6391'
c Var 'aux1597' direct represents '0' with '6391'
c Var 'aux1597' order represents '1' with '6392'
-6391 6392 0
c Var 'aux1597' direct represents '1' with '6393'
6391 -6392 6393 0
-6393 6392 0
-6393 -6391 0
c Var 'aux1597' order represents '2' with '6394'
-6392 6394 0
c Var 'aux1597' direct represents '2' with '6395'
6392 -6394 6395 0
-6395 6394 0
-6395 -6392 0
c Var 'aux1597' direct represents '3' with '-6394'
6391 6393 6395 -6394 0
c Encoding variable: aux1598 with domain: int(0..4) (representing constraint (aux1593 + aux1595))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6396'
c Var 'aux1598' direct represents '0' with '6396'
c Var 'aux1598' order represents '1' with '6397'
-6396 6397 0
c Var 'aux1598' direct represents '1' with '6398'
6396 -6397 6398 0
-6398 6397 0
-6398 -6396 0
c Var 'aux1598' order represents '2' with '6399'
-6397 6399 0
c Var 'aux1598' direct represents '2' with '6400'
6397 -6399 6400 0
-6400 6399 0
-6400 -6397 0
c Var 'aux1598' order represents '3' with '6401'
-6399 6401 0
c Var 'aux1598' direct represents '3' with '6402'
6399 -6401 6402 0
-6402 6401 0
-6402 -6399 0
c Var 'aux1598' direct represents '4' with '-6401'
6396 6398 6400 6402 -6401 0
c Encoding variable: aux1599 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6403'
c Var 'aux1599' direct represents '0' with '6403'
c Var 'aux1599' order represents '1' with '6404'
-6403 6404 0
c Var 'aux1599' direct represents '1' with '6405'
6403 -6404 6405 0
-6405 6404 0
-6405 -6403 0
c Var 'aux1599' direct represents '2' with '-6404'
6403 6405 -6404 0
c Encoding variable: aux1600 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6406'
c Var 'aux1600' direct represents '0' with '6406'
c Var 'aux1600' order represents '1' with '6407'
-6406 6407 0
c Var 'aux1600' direct represents '1' with '6408'
6406 -6407 6408 0
-6408 6407 0
-6408 -6406 0
c Var 'aux1600' direct represents '2' with '-6407'
6406 6408 -6407 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6409'
c Var 'aux1601' direct represents '0' with '6409'
c Var 'aux1601' order represents '1' with '6410'
-6409 6410 0
c Var 'aux1601' direct represents '1' with '6411'
6409 -6410 6411 0
-6411 6410 0
-6411 -6409 0
c Var 'aux1601' direct represents '2' with '-6410'
6409 6411 -6410 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6412'
c Var 'aux1602' direct represents '0' with '6412'
c Var 'aux1602' order represents '1' with '6413'
-6412 6413 0
c Var 'aux1602' direct represents '1' with '6414'
6412 -6413 6414 0
-6414 6413 0
-6414 -6412 0
c Var 'aux1602' direct represents '2' with '-6413'
6412 6414 -6413 0
c Encoding variable: aux1603 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1602))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6415'
c Var 'aux1603' direct represents '0' with '6415'
c Var 'aux1603' order represents '1' with '6416'
-6415 6416 0
c Var 'aux1603' direct represents '1' with '6417'
6415 -6416 6417 0
-6417 6416 0
-6417 -6415 0
c Var 'aux1603' order represents '2' with '6418'
-6416 6418 0
c Var 'aux1603' direct represents '2' with '6419'
6416 -6418 6419 0
-6419 6418 0
-6419 -6416 0
c Var 'aux1603' direct represents '3' with '-6418'
6415 6417 6419 -6418 0
c Encoding variable: aux1604 with domain: int(0..4) (representing constraint (aux1599 + aux1601))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6420'
c Var 'aux1604' direct represents '0' with '6420'
c Var 'aux1604' order represents '1' with '6421'
-6420 6421 0
c Var 'aux1604' direct represents '1' with '6422'
6420 -6421 6422 0
-6422 6421 0
-6422 -6420 0
c Var 'aux1604' order represents '2' with '6423'
-6421 6423 0
c Var 'aux1604' direct represents '2' with '6424'
6421 -6423 6424 0
-6424 6423 0
-6424 -6421 0
c Var 'aux1604' order represents '3' with '6425'
-6423 6425 0
c Var 'aux1604' direct represents '3' with '6426'
6423 -6425 6426 0
-6426 6425 0
-6426 -6423 0
c Var 'aux1604' direct represents '4' with '-6425'
6420 6422 6424 6426 -6425 0
c Encoding variable: aux1605 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6427'
c Var 'aux1605' direct represents '0' with '6427'
c Var 'aux1605' order represents '1' with '6428'
-6427 6428 0
c Var 'aux1605' direct represents '1' with '6429'
6427 -6428 6429 0
-6429 6428 0
-6429 -6427 0
c Var 'aux1605' direct represents '2' with '-6428'
6427 6429 -6428 0
c Encoding variable: aux1606 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6430'
c Var 'aux1606' direct represents '0' with '6430'
c Var 'aux1606' order represents '1' with '6431'
-6430 6431 0
c Var 'aux1606' direct represents '1' with '6432'
6430 -6431 6432 0
-6432 6431 0
-6432 -6430 0
c Var 'aux1606' direct represents '2' with '-6431'
6430 6432 -6431 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6433'
c Var 'aux1607' direct represents '0' with '6433'
c Var 'aux1607' order represents '1' with '6434'
-6433 6434 0
c Var 'aux1607' direct represents '1' with '6435'
6433 -6434 6435 0
-6435 6434 0
-6435 -6433 0
c Var 'aux1607' direct represents '2' with '-6434'
6433 6435 -6434 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6436'
c Var 'aux1608' direct represents '0' with '6436'
c Var 'aux1608' order represents '1' with '6437'
-6436 6437 0
c Var 'aux1608' direct represents '1' with '6438'
6436 -6437 6438 0
-6438 6437 0
-6438 -6436 0
c Var 'aux1608' direct represents '2' with '-6437'
6436 6438 -6437 0
c Encoding variable: aux1609 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1608))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6439'
c Var 'aux1609' direct represents '0' with '6439'
c Var 'aux1609' order represents '1' with '6440'
-6439 6440 0
c Var 'aux1609' direct represents '1' with '6441'
6439 -6440 6441 0
-6441 6440 0
-6441 -6439 0
c Var 'aux1609' order represents '2' with '6442'
-6440 6442 0
c Var 'aux1609' direct represents '2' with '6443'
6440 -6442 6443 0
-6443 6442 0
-6443 -6440 0
c Var 'aux1609' direct represents '3' with '-6442'
6439 6441 6443 -6442 0
c Encoding variable: aux1610 with domain: int(0..4) (representing constraint (aux1605 + aux1607))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6444'
c Var 'aux1610' direct represents '0' with '6444'
c Var 'aux1610' order represents '1' with '6445'
-6444 6445 0
c Var 'aux1610' direct represents '1' with '6446'
6444 -6445 6446 0
-6446 6445 0
-6446 -6444 0
c Var 'aux1610' order represents '2' with '6447'
-6445 6447 0
c Var 'aux1610' direct represents '2' with '6448'
6445 -6447 6448 0
-6448 6447 0
-6448 -6445 0
c Var 'aux1610' order represents '3' with '6449'
-6447 6449 0
c Var 'aux1610' direct represents '3' with '6450'
6447 -6449 6450 0
-6450 6449 0
-6450 -6447 0
c Var 'aux1610' direct represents '4' with '-6449'
6444 6446 6448 6450 -6449 0
c Encoding variable: aux1611 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6451'
c Var 'aux1611' direct represents '0' with '6451'
c Var 'aux1611' order represents '1' with '6452'
-6451 6452 0
c Var 'aux1611' direct represents '1' with '6453'
6451 -6452 6453 0
-6453 6452 0
-6453 -6451 0
c Var 'aux1611' direct represents '2' with '-6452'
6451 6453 -6452 0
c Encoding variable: aux1612 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6454'
c Var 'aux1612' direct represents '0' with '6454'
c Var 'aux1612' order represents '1' with '6455'
-6454 6455 0
c Var 'aux1612' direct represents '1' with '6456'
6454 -6455 6456 0
-6456 6455 0
-6456 -6454 0
c Var 'aux1612' direct represents '2' with '-6455'
6454 6456 -6455 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6457'
c Var 'aux1613' direct represents '0' with '6457'
c Var 'aux1613' order represents '1' with '6458'
-6457 6458 0
c Var 'aux1613' direct represents '1' with '6459'
6457 -6458 6459 0
-6459 6458 0
-6459 -6457 0
c Var 'aux1613' direct represents '2' with '-6458'
6457 6459 -6458 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6460'
c Var 'aux1614' direct represents '0' with '6460'
c Var 'aux1614' order represents '1' with '6461'
-6460 6461 0
c Var 'aux1614' direct represents '1' with '6462'
6460 -6461 6462 0
-6462 6461 0
-6462 -6460 0
c Var 'aux1614' direct represents '2' with '-6461'
6460 6462 -6461 0
c Encoding variable: aux1615 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1614))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6463'
c Var 'aux1615' direct represents '0' with '6463'
c Var 'aux1615' order represents '1' with '6464'
-6463 6464 0
c Var 'aux1615' direct represents '1' with '6465'
6463 -6464 6465 0
-6465 6464 0
-6465 -6463 0
c Var 'aux1615' order represents '2' with '6466'
-6464 6466 0
c Var 'aux1615' direct represents '2' with '6467'
6464 -6466 6467 0
-6467 6466 0
-6467 -6464 0
c Var 'aux1615' direct represents '3' with '-6466'
6463 6465 6467 -6466 0
c Encoding variable: aux1616 with domain: int(0..4) (representing constraint (aux1611 + aux1613))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6468'
c Var 'aux1616' direct represents '0' with '6468'
c Var 'aux1616' order represents '1' with '6469'
-6468 6469 0
c Var 'aux1616' direct represents '1' with '6470'
6468 -6469 6470 0
-6470 6469 0
-6470 -6468 0
c Var 'aux1616' order represents '2' with '6471'
-6469 6471 0
c Var 'aux1616' direct represents '2' with '6472'
6469 -6471 6472 0
-6472 6471 0
-6472 -6469 0
c Var 'aux1616' order represents '3' with '6473'
-6471 6473 0
c Var 'aux1616' direct represents '3' with '6474'
6471 -6473 6474 0
-6474 6473 0
-6474 -6471 0
c Var 'aux1616' direct represents '4' with '-6473'
6468 6470 6472 6474 -6473 0
c Encoding variable: aux1617 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6475'
c Var 'aux1617' direct represents '0' with '6475'
c Var 'aux1617' order represents '1' with '6476'
-6475 6476 0
c Var 'aux1617' direct represents '1' with '6477'
6475 -6476 6477 0
-6477 6476 0
-6477 -6475 0
c Var 'aux1617' direct represents '2' with '-6476'
6475 6477 -6476 0
c Encoding variable: aux1618 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6478'
c Var 'aux1618' direct represents '0' with '6478'
c Var 'aux1618' order represents '1' with '6479'
-6478 6479 0
c Var 'aux1618' direct represents '1' with '6480'
6478 -6479 6480 0
-6480 6479 0
-6480 -6478 0
c Var 'aux1618' direct represents '2' with '-6479'
6478 6480 -6479 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6481'
c Var 'aux1619' direct represents '0' with '6481'
c Var 'aux1619' order represents '1' with '6482'
-6481 6482 0
c Var 'aux1619' direct represents '1' with '6483'
6481 -6482 6483 0
-6483 6482 0
-6483 -6481 0
c Var 'aux1619' direct represents '2' with '-6482'
6481 6483 -6482 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6484'
c Var 'aux1620' direct represents '0' with '6484'
c Var 'aux1620' order represents '1' with '6485'
-6484 6485 0
c Var 'aux1620' direct represents '1' with '6486'
6484 -6485 6486 0
-6486 6485 0
-6486 -6484 0
c Var 'aux1620' direct represents '2' with '-6485'
6484 6486 -6485 0
c Encoding variable: aux1621 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1620))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6487'
c Var 'aux1621' direct represents '0' with '6487'
c Var 'aux1621' order represents '1' with '6488'
-6487 6488 0
c Var 'aux1621' direct represents '1' with '6489'
6487 -6488 6489 0
-6489 6488 0
-6489 -6487 0
c Var 'aux1621' order represents '2' with '6490'
-6488 6490 0
c Var 'aux1621' direct represents '2' with '6491'
6488 -6490 6491 0
-6491 6490 0
-6491 -6488 0
c Var 'aux1621' direct represents '3' with '-6490'
6487 6489 6491 -6490 0
c Encoding variable: aux1622 with domain: int(0..4) (representing constraint (aux1617 + aux1619))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6492'
c Var 'aux1622' direct represents '0' with '6492'
c Var 'aux1622' order represents '1' with '6493'
-6492 6493 0
c Var 'aux1622' direct represents '1' with '6494'
6492 -6493 6494 0
-6494 6493 0
-6494 -6492 0
c Var 'aux1622' order represents '2' with '6495'
-6493 6495 0
c Var 'aux1622' direct represents '2' with '6496'
6493 -6495 6496 0
-6496 6495 0
-6496 -6493 0
c Var 'aux1622' order represents '3' with '6497'
-6495 6497 0
c Var 'aux1622' direct represents '3' with '6498'
6495 -6497 6498 0
-6498 6497 0
-6498 -6495 0
c Var 'aux1622' direct represents '4' with '-6497'
6492 6494 6496 6498 -6497 0
c Encoding variable: aux1623 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6499'
c Var 'aux1623' direct represents '0' with '6499'
c Var 'aux1623' order represents '1' with '6500'
-6499 6500 0
c Var 'aux1623' direct represents '1' with '6501'
6499 -6500 6501 0
-6501 6500 0
-6501 -6499 0
c Var 'aux1623' direct represents '2' with '-6500'
6499 6501 -6500 0
c Encoding variable: aux1624 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6502'
c Var 'aux1624' direct represents '0' with '6502'
c Var 'aux1624' order represents '1' with '6503'
-6502 6503 0
c Var 'aux1624' direct represents '1' with '6504'
6502 -6503 6504 0
-6504 6503 0
-6504 -6502 0
c Var 'aux1624' direct represents '2' with '-6503'
6502 6504 -6503 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6505'
c Var 'aux1625' direct represents '0' with '6505'
c Var 'aux1625' order represents '1' with '6506'
-6505 6506 0
c Var 'aux1625' direct represents '1' with '6507'
6505 -6506 6507 0
-6507 6506 0
-6507 -6505 0
c Var 'aux1625' direct represents '2' with '-6506'
6505 6507 -6506 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6508'
c Var 'aux1626' direct represents '0' with '6508'
c Var 'aux1626' order represents '1' with '6509'
-6508 6509 0
c Var 'aux1626' direct represents '1' with '6510'
6508 -6509 6510 0
-6510 6509 0
-6510 -6508 0
c Var 'aux1626' direct represents '2' with '-6509'
6508 6510 -6509 0
c Encoding variable: aux1627 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1626))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6511'
c Var 'aux1627' direct represents '0' with '6511'
c Var 'aux1627' order represents '1' with '6512'
-6511 6512 0
c Var 'aux1627' direct represents '1' with '6513'
6511 -6512 6513 0
-6513 6512 0
-6513 -6511 0
c Var 'aux1627' order represents '2' with '6514'
-6512 6514 0
c Var 'aux1627' direct represents '2' with '6515'
6512 -6514 6515 0
-6515 6514 0
-6515 -6512 0
c Var 'aux1627' direct represents '3' with '-6514'
6511 6513 6515 -6514 0
c Encoding variable: aux1628 with domain: int(0..4) (representing constraint (aux1623 + aux1625))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6516'
c Var 'aux1628' direct represents '0' with '6516'
c Var 'aux1628' order represents '1' with '6517'
-6516 6517 0
c Var 'aux1628' direct represents '1' with '6518'
6516 -6517 6518 0
-6518 6517 0
-6518 -6516 0
c Var 'aux1628' order represents '2' with '6519'
-6517 6519 0
c Var 'aux1628' direct represents '2' with '6520'
6517 -6519 6520 0
-6520 6519 0
-6520 -6517 0
c Var 'aux1628' order represents '3' with '6521'
-6519 6521 0
c Var 'aux1628' direct represents '3' with '6522'
6519 -6521 6522 0
-6522 6521 0
-6522 -6519 0
c Var 'aux1628' direct represents '4' with '-6521'
6516 6518 6520 6522 -6521 0
c Encoding variable: aux1629 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6523'
c Var 'aux1629' direct represents '0' with '6523'
c Var 'aux1629' order represents '1' with '6524'
-6523 6524 0
c Var 'aux1629' direct represents '1' with '6525'
6523 -6524 6525 0
-6525 6524 0
-6525 -6523 0
c Var 'aux1629' direct represents '2' with '-6524'
6523 6525 -6524 0
c Encoding variable: aux1630 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6526'
c Var 'aux1630' direct represents '0' with '6526'
c Var 'aux1630' order represents '1' with '6527'
-6526 6527 0
c Var 'aux1630' direct represents '1' with '6528'
6526 -6527 6528 0
-6528 6527 0
-6528 -6526 0
c Var 'aux1630' direct represents '2' with '-6527'
6526 6528 -6527 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6529'
c Var 'aux1631' direct represents '0' with '6529'
c Var 'aux1631' order represents '1' with '6530'
-6529 6530 0
c Var 'aux1631' direct represents '1' with '6531'
6529 -6530 6531 0
-6531 6530 0
-6531 -6529 0
c Var 'aux1631' direct represents '2' with '-6530'
6529 6531 -6530 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6532'
c Var 'aux1632' direct represents '0' with '6532'
c Var 'aux1632' order represents '1' with '6533'
-6532 6533 0
c Var 'aux1632' direct represents '1' with '6534'
6532 -6533 6534 0
-6534 6533 0
-6534 -6532 0
c Var 'aux1632' direct represents '2' with '-6533'
6532 6534 -6533 0
c Encoding variable: aux1633 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1632))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6535'
c Var 'aux1633' direct represents '0' with '6535'
c Var 'aux1633' order represents '1' with '6536'
-6535 6536 0
c Var 'aux1633' direct represents '1' with '6537'
6535 -6536 6537 0
-6537 6536 0
-6537 -6535 0
c Var 'aux1633' order represents '2' with '6538'
-6536 6538 0
c Var 'aux1633' direct represents '2' with '6539'
6536 -6538 6539 0
-6539 6538 0
-6539 -6536 0
c Var 'aux1633' direct represents '3' with '-6538'
6535 6537 6539 -6538 0
c Encoding variable: aux1634 with domain: int(0..4) (representing constraint (aux1629 + aux1631))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6540'
c Var 'aux1634' direct represents '0' with '6540'
c Var 'aux1634' order represents '1' with '6541'
-6540 6541 0
c Var 'aux1634' direct represents '1' with '6542'
6540 -6541 6542 0
-6542 6541 0
-6542 -6540 0
c Var 'aux1634' order represents '2' with '6543'
-6541 6543 0
c Var 'aux1634' direct represents '2' with '6544'
6541 -6543 6544 0
-6544 6543 0
-6544 -6541 0
c Var 'aux1634' order represents '3' with '6545'
-6543 6545 0
c Var 'aux1634' direct represents '3' with '6546'
6543 -6545 6546 0
-6546 6545 0
-6546 -6543 0
c Var 'aux1634' direct represents '4' with '-6545'
6540 6542 6544 6546 -6545 0
c Encoding variable: aux1635 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6547'
c Var 'aux1635' direct represents '0' with '6547'
c Var 'aux1635' order represents '1' with '6548'
-6547 6548 0
c Var 'aux1635' direct represents '1' with '6549'
6547 -6548 6549 0
-6549 6548 0
-6549 -6547 0
c Var 'aux1635' direct represents '2' with '-6548'
6547 6549 -6548 0
c Encoding variable: aux1636 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6550'
c Var 'aux1636' direct represents '0' with '6550'
c Var 'aux1636' order represents '1' with '6551'
-6550 6551 0
c Var 'aux1636' direct represents '1' with '6552'
6550 -6551 6552 0
-6552 6551 0
-6552 -6550 0
c Var 'aux1636' direct represents '2' with '-6551'
6550 6552 -6551 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6553'
c Var 'aux1637' direct represents '0' with '6553'
c Var 'aux1637' order represents '1' with '6554'
-6553 6554 0
c Var 'aux1637' direct represents '1' with '6555'
6553 -6554 6555 0
-6555 6554 0
-6555 -6553 0
c Var 'aux1637' direct represents '2' with '-6554'
6553 6555 -6554 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6556'
c Var 'aux1638' direct represents '0' with '6556'
c Var 'aux1638' order represents '1' with '6557'
-6556 6557 0
c Var 'aux1638' direct represents '1' with '6558'
6556 -6557 6558 0
-6558 6557 0
-6558 -6556 0
c Var 'aux1638' direct represents '2' with '-6557'
6556 6558 -6557 0
c Encoding variable: aux1639 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1638))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6559'
c Var 'aux1639' direct represents '0' with '6559'
c Var 'aux1639' order represents '1' with '6560'
-6559 6560 0
c Var 'aux1639' direct represents '1' with '6561'
6559 -6560 6561 0
-6561 6560 0
-6561 -6559 0
c Var 'aux1639' order represents '2' with '6562'
-6560 6562 0
c Var 'aux1639' direct represents '2' with '6563'
6560 -6562 6563 0
-6563 6562 0
-6563 -6560 0
c Var 'aux1639' direct represents '3' with '-6562'
6559 6561 6563 -6562 0
c Encoding variable: aux1640 with domain: int(0..4) (representing constraint (aux1635 + aux1637))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6564'
c Var 'aux1640' direct represents '0' with '6564'
c Var 'aux1640' order represents '1' with '6565'
-6564 6565 0
c Var 'aux1640' direct represents '1' with '6566'
6564 -6565 6566 0
-6566 6565 0
-6566 -6564 0
c Var 'aux1640' order represents '2' with '6567'
-6565 6567 0
c Var 'aux1640' direct represents '2' with '6568'
6565 -6567 6568 0
-6568 6567 0
-6568 -6565 0
c Var 'aux1640' order represents '3' with '6569'
-6567 6569 0
c Var 'aux1640' direct represents '3' with '6570'
6567 -6569 6570 0
-6570 6569 0
-6570 -6567 0
c Var 'aux1640' direct represents '4' with '-6569'
6564 6566 6568 6570 -6569 0
c Encoding variable: aux1641 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6571'
c Var 'aux1641' direct represents '0' with '6571'
c Var 'aux1641' order represents '1' with '6572'
-6571 6572 0
c Var 'aux1641' direct represents '1' with '6573'
6571 -6572 6573 0
-6573 6572 0
-6573 -6571 0
c Var 'aux1641' direct represents '2' with '-6572'
6571 6573 -6572 0
c Encoding variable: aux1642 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6574'
c Var 'aux1642' direct represents '0' with '6574'
c Var 'aux1642' order represents '1' with '6575'
-6574 6575 0
c Var 'aux1642' direct represents '1' with '6576'
6574 -6575 6576 0
-6576 6575 0
-6576 -6574 0
c Var 'aux1642' direct represents '2' with '-6575'
6574 6576 -6575 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6577'
c Var 'aux1643' direct represents '0' with '6577'
c Var 'aux1643' order represents '1' with '6578'
-6577 6578 0
c Var 'aux1643' direct represents '1' with '6579'
6577 -6578 6579 0
-6579 6578 0
-6579 -6577 0
c Var 'aux1643' direct represents '2' with '-6578'
6577 6579 -6578 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6580'
c Var 'aux1644' direct represents '0' with '6580'
c Var 'aux1644' order represents '1' with '6581'
-6580 6581 0
c Var 'aux1644' direct represents '1' with '6582'
6580 -6581 6582 0
-6582 6581 0
-6582 -6580 0
c Var 'aux1644' direct represents '2' with '-6581'
6580 6582 -6581 0
c Encoding variable: aux1645 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1644))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6583'
c Var 'aux1645' direct represents '0' with '6583'
c Var 'aux1645' order represents '1' with '6584'
-6583 6584 0
c Var 'aux1645' direct represents '1' with '6585'
6583 -6584 6585 0
-6585 6584 0
-6585 -6583 0
c Var 'aux1645' order represents '2' with '6586'
-6584 6586 0
c Var 'aux1645' direct represents '2' with '6587'
6584 -6586 6587 0
-6587 6586 0
-6587 -6584 0
c Var 'aux1645' direct represents '3' with '-6586'
6583 6585 6587 -6586 0
c Encoding variable: aux1646 with domain: int(0..4) (representing constraint (aux1641 + aux1643))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6588'
c Var 'aux1646' direct represents '0' with '6588'
c Var 'aux1646' order represents '1' with '6589'
-6588 6589 0
c Var 'aux1646' direct represents '1' with '6590'
6588 -6589 6590 0
-6590 6589 0
-6590 -6588 0
c Var 'aux1646' order represents '2' with '6591'
-6589 6591 0
c Var 'aux1646' direct represents '2' with '6592'
6589 -6591 6592 0
-6592 6591 0
-6592 -6589 0
c Var 'aux1646' order represents '3' with '6593'
-6591 6593 0
c Var 'aux1646' direct represents '3' with '6594'
6591 -6593 6594 0
-6594 6593 0
-6594 -6591 0
c Var 'aux1646' direct represents '4' with '-6593'
6588 6590 6592 6594 -6593 0
c Encoding variable: aux1647 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6595'
c Var 'aux1647' direct represents '0' with '6595'
c Var 'aux1647' order represents '1' with '6596'
-6595 6596 0
c Var 'aux1647' direct represents '1' with '6597'
6595 -6596 6597 0
-6597 6596 0
-6597 -6595 0
c Var 'aux1647' direct represents '2' with '-6596'
6595 6597 -6596 0
c Encoding variable: aux1648 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6598'
c Var 'aux1648' direct represents '0' with '6598'
c Var 'aux1648' order represents '1' with '6599'
-6598 6599 0
c Var 'aux1648' direct represents '1' with '6600'
6598 -6599 6600 0
-6600 6599 0
-6600 -6598 0
c Var 'aux1648' direct represents '2' with '-6599'
6598 6600 -6599 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6601'
c Var 'aux1649' direct represents '0' with '6601'
c Var 'aux1649' order represents '1' with '6602'
-6601 6602 0
c Var 'aux1649' direct represents '1' with '6603'
6601 -6602 6603 0
-6603 6602 0
-6603 -6601 0
c Var 'aux1649' direct represents '2' with '-6602'
6601 6603 -6602 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6604'
c Var 'aux1650' direct represents '0' with '6604'
c Var 'aux1650' order represents '1' with '6605'
-6604 6605 0
c Var 'aux1650' direct represents '1' with '6606'
6604 -6605 6606 0
-6606 6605 0
-6606 -6604 0
c Var 'aux1650' direct represents '2' with '-6605'
6604 6606 -6605 0
c Encoding variable: aux1651 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1650))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6607'
c Var 'aux1651' direct represents '0' with '6607'
c Var 'aux1651' order represents '1' with '6608'
-6607 6608 0
c Var 'aux1651' direct represents '1' with '6609'
6607 -6608 6609 0
-6609 6608 0
-6609 -6607 0
c Var 'aux1651' order represents '2' with '6610'
-6608 6610 0
c Var 'aux1651' direct represents '2' with '6611'
6608 -6610 6611 0
-6611 6610 0
-6611 -6608 0
c Var 'aux1651' direct represents '3' with '-6610'
6607 6609 6611 -6610 0
c Encoding variable: aux1652 with domain: int(0..4) (representing constraint (aux1647 + aux1649))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6612'
c Var 'aux1652' direct represents '0' with '6612'
c Var 'aux1652' order represents '1' with '6613'
-6612 6613 0
c Var 'aux1652' direct represents '1' with '6614'
6612 -6613 6614 0
-6614 6613 0
-6614 -6612 0
c Var 'aux1652' order represents '2' with '6615'
-6613 6615 0
c Var 'aux1652' direct represents '2' with '6616'
6613 -6615 6616 0
-6616 6615 0
-6616 -6613 0
c Var 'aux1652' order represents '3' with '6617'
-6615 6617 0
c Var 'aux1652' direct represents '3' with '6618'
6615 -6617 6618 0
-6618 6617 0
-6618 -6615 0
c Var 'aux1652' direct represents '4' with '-6617'
6612 6614 6616 6618 -6617 0
c Encoding variable: aux1653 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6619'
c Var 'aux1653' direct represents '0' with '6619'
c Var 'aux1653' order represents '1' with '6620'
-6619 6620 0
c Var 'aux1653' direct represents '1' with '6621'
6619 -6620 6621 0
-6621 6620 0
-6621 -6619 0
c Var 'aux1653' direct represents '2' with '-6620'
6619 6621 -6620 0
c Encoding variable: aux1654 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6622'
c Var 'aux1654' direct represents '0' with '6622'
c Var 'aux1654' order represents '1' with '6623'
-6622 6623 0
c Var 'aux1654' direct represents '1' with '6624'
6622 -6623 6624 0
-6624 6623 0
-6624 -6622 0
c Var 'aux1654' direct represents '2' with '-6623'
6622 6624 -6623 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6625'
c Var 'aux1655' direct represents '0' with '6625'
c Var 'aux1655' order represents '1' with '6626'
-6625 6626 0
c Var 'aux1655' direct represents '1' with '6627'
6625 -6626 6627 0
-6627 6626 0
-6627 -6625 0
c Var 'aux1655' direct represents '2' with '-6626'
6625 6627 -6626 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6628'
c Var 'aux1656' direct represents '0' with '6628'
c Var 'aux1656' order represents '1' with '6629'
-6628 6629 0
c Var 'aux1656' direct represents '1' with '6630'
6628 -6629 6630 0
-6630 6629 0
-6630 -6628 0
c Var 'aux1656' direct represents '2' with '-6629'
6628 6630 -6629 0
c Encoding variable: aux1657 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1656))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6631'
c Var 'aux1657' direct represents '0' with '6631'
c Var 'aux1657' order represents '1' with '6632'
-6631 6632 0
c Var 'aux1657' direct represents '1' with '6633'
6631 -6632 6633 0
-6633 6632 0
-6633 -6631 0
c Var 'aux1657' order represents '2' with '6634'
-6632 6634 0
c Var 'aux1657' direct represents '2' with '6635'
6632 -6634 6635 0
-6635 6634 0
-6635 -6632 0
c Var 'aux1657' direct represents '3' with '-6634'
6631 6633 6635 -6634 0
c Encoding variable: aux1658 with domain: int(0..4) (representing constraint (aux1653 + aux1655))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6636'
c Var 'aux1658' direct represents '0' with '6636'
c Var 'aux1658' order represents '1' with '6637'
-6636 6637 0
c Var 'aux1658' direct represents '1' with '6638'
6636 -6637 6638 0
-6638 6637 0
-6638 -6636 0
c Var 'aux1658' order represents '2' with '6639'
-6637 6639 0
c Var 'aux1658' direct represents '2' with '6640'
6637 -6639 6640 0
-6640 6639 0
-6640 -6637 0
c Var 'aux1658' order represents '3' with '6641'
-6639 6641 0
c Var 'aux1658' direct represents '3' with '6642'
6639 -6641 6642 0
-6642 6641 0
-6642 -6639 0
c Var 'aux1658' direct represents '4' with '-6641'
6636 6638 6640 6642 -6641 0
c Encoding variable: aux1659 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6643'
c Var 'aux1659' direct represents '0' with '6643'
c Var 'aux1659' order represents '1' with '6644'
-6643 6644 0
c Var 'aux1659' direct represents '1' with '6645'
6643 -6644 6645 0
-6645 6644 0
-6645 -6643 0
c Var 'aux1659' direct represents '2' with '-6644'
6643 6645 -6644 0
c Encoding variable: aux1660 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6646'
c Var 'aux1660' direct represents '0' with '6646'
c Var 'aux1660' order represents '1' with '6647'
-6646 6647 0
c Var 'aux1660' direct represents '1' with '6648'
6646 -6647 6648 0
-6648 6647 0
-6648 -6646 0
c Var 'aux1660' direct represents '2' with '-6647'
6646 6648 -6647 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6649'
c Var 'aux1661' direct represents '0' with '6649'
c Var 'aux1661' order represents '1' with '6650'
-6649 6650 0
c Var 'aux1661' direct represents '1' with '6651'
6649 -6650 6651 0
-6651 6650 0
-6651 -6649 0
c Var 'aux1661' direct represents '2' with '-6650'
6649 6651 -6650 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6652'
c Var 'aux1662' direct represents '0' with '6652'
c Var 'aux1662' order represents '1' with '6653'
-6652 6653 0
c Var 'aux1662' direct represents '1' with '6654'
6652 -6653 6654 0
-6654 6653 0
-6654 -6652 0
c Var 'aux1662' direct represents '2' with '-6653'
6652 6654 -6653 0
c Encoding variable: aux1663 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1662))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6655'
c Var 'aux1663' direct represents '0' with '6655'
c Var 'aux1663' order represents '1' with '6656'
-6655 6656 0
c Var 'aux1663' direct represents '1' with '6657'
6655 -6656 6657 0
-6657 6656 0
-6657 -6655 0
c Var 'aux1663' order represents '2' with '6658'
-6656 6658 0
c Var 'aux1663' direct represents '2' with '6659'
6656 -6658 6659 0
-6659 6658 0
-6659 -6656 0
c Var 'aux1663' direct represents '3' with '-6658'
6655 6657 6659 -6658 0
c Encoding variable: aux1664 with domain: int(0..4) (representing constraint (aux1659 + aux1661))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6660'
c Var 'aux1664' direct represents '0' with '6660'
c Var 'aux1664' order represents '1' with '6661'
-6660 6661 0
c Var 'aux1664' direct represents '1' with '6662'
6660 -6661 6662 0
-6662 6661 0
-6662 -6660 0
c Var 'aux1664' order represents '2' with '6663'
-6661 6663 0
c Var 'aux1664' direct represents '2' with '6664'
6661 -6663 6664 0
-6664 6663 0
-6664 -6661 0
c Var 'aux1664' order represents '3' with '6665'
-6663 6665 0
c Var 'aux1664' direct represents '3' with '6666'
6663 -6665 6666 0
-6666 6665 0
-6666 -6663 0
c Var 'aux1664' direct represents '4' with '-6665'
6660 6662 6664 6666 -6665 0
c Encoding variable: aux1665 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6667'
c Var 'aux1665' direct represents '0' with '6667'
c Var 'aux1665' order represents '1' with '6668'
-6667 6668 0
c Var 'aux1665' direct represents '1' with '6669'
6667 -6668 6669 0
-6669 6668 0
-6669 -6667 0
c Var 'aux1665' direct represents '2' with '-6668'
6667 6669 -6668 0
c Encoding variable: aux1666 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6670'
c Var 'aux1666' direct represents '0' with '6670'
c Var 'aux1666' order represents '1' with '6671'
-6670 6671 0
c Var 'aux1666' direct represents '1' with '6672'
6670 -6671 6672 0
-6672 6671 0
-6672 -6670 0
c Var 'aux1666' direct represents '2' with '-6671'
6670 6672 -6671 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6673'
c Var 'aux1667' direct represents '0' with '6673'
c Var 'aux1667' order represents '1' with '6674'
-6673 6674 0
c Var 'aux1667' direct represents '1' with '6675'
6673 -6674 6675 0
-6675 6674 0
-6675 -6673 0
c Var 'aux1667' direct represents '2' with '-6674'
6673 6675 -6674 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6676'
c Var 'aux1668' direct represents '0' with '6676'
c Var 'aux1668' order represents '1' with '6677'
-6676 6677 0
c Var 'aux1668' direct represents '1' with '6678'
6676 -6677 6678 0
-6678 6677 0
-6678 -6676 0
c Var 'aux1668' direct represents '2' with '-6677'
6676 6678 -6677 0
c Encoding variable: aux1669 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1668))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6679'
c Var 'aux1669' direct represents '0' with '6679'
c Var 'aux1669' order represents '1' with '6680'
-6679 6680 0
c Var 'aux1669' direct represents '1' with '6681'
6679 -6680 6681 0
-6681 6680 0
-6681 -6679 0
c Var 'aux1669' order represents '2' with '6682'
-6680 6682 0
c Var 'aux1669' direct represents '2' with '6683'
6680 -6682 6683 0
-6683 6682 0
-6683 -6680 0
c Var 'aux1669' direct represents '3' with '-6682'
6679 6681 6683 -6682 0
c Encoding variable: aux1670 with domain: int(0..4) (representing constraint (aux1665 + aux1667))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6684'
c Var 'aux1670' direct represents '0' with '6684'
c Var 'aux1670' order represents '1' with '6685'
-6684 6685 0
c Var 'aux1670' direct represents '1' with '6686'
6684 -6685 6686 0
-6686 6685 0
-6686 -6684 0
c Var 'aux1670' order represents '2' with '6687'
-6685 6687 0
c Var 'aux1670' direct represents '2' with '6688'
6685 -6687 6688 0
-6688 6687 0
-6688 -6685 0
c Var 'aux1670' order represents '3' with '6689'
-6687 6689 0
c Var 'aux1670' direct represents '3' with '6690'
6687 -6689 6690 0
-6690 6689 0
-6690 -6687 0
c Var 'aux1670' direct represents '4' with '-6689'
6684 6686 6688 6690 -6689 0
c Encoding variable: aux1671 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6691'
c Var 'aux1671' direct represents '0' with '6691'
c Var 'aux1671' order represents '1' with '6692'
-6691 6692 0
c Var 'aux1671' direct represents '1' with '6693'
6691 -6692 6693 0
-6693 6692 0
-6693 -6691 0
c Var 'aux1671' direct represents '2' with '-6692'
6691 6693 -6692 0
c Encoding variable: aux1672 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6694'
c Var 'aux1672' direct represents '0' with '6694'
c Var 'aux1672' order represents '1' with '6695'
-6694 6695 0
c Var 'aux1672' direct represents '1' with '6696'
6694 -6695 6696 0
-6696 6695 0
-6696 -6694 0
c Var 'aux1672' direct represents '2' with '-6695'
6694 6696 -6695 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6697'
c Var 'aux1673' direct represents '0' with '6697'
c Var 'aux1673' order represents '1' with '6698'
-6697 6698 0
c Var 'aux1673' direct represents '1' with '6699'
6697 -6698 6699 0
-6699 6698 0
-6699 -6697 0
c Var 'aux1673' direct represents '2' with '-6698'
6697 6699 -6698 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6700'
c Var 'aux1674' direct represents '0' with '6700'
c Var 'aux1674' order represents '1' with '6701'
-6700 6701 0
c Var 'aux1674' direct represents '1' with '6702'
6700 -6701 6702 0
-6702 6701 0
-6702 -6700 0
c Var 'aux1674' direct represents '2' with '-6701'
6700 6702 -6701 0
c Encoding variable: aux1675 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1674))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6703'
c Var 'aux1675' direct represents '0' with '6703'
c Var 'aux1675' order represents '1' with '6704'
-6703 6704 0
c Var 'aux1675' direct represents '1' with '6705'
6703 -6704 6705 0
-6705 6704 0
-6705 -6703 0
c Var 'aux1675' order represents '2' with '6706'
-6704 6706 0
c Var 'aux1675' direct represents '2' with '6707'
6704 -6706 6707 0
-6707 6706 0
-6707 -6704 0
c Var 'aux1675' direct represents '3' with '-6706'
6703 6705 6707 -6706 0
c Encoding variable: aux1676 with domain: int(0..4) (representing constraint (aux1671 + aux1673))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6708'
c Var 'aux1676' direct represents '0' with '6708'
c Var 'aux1676' order represents '1' with '6709'
-6708 6709 0
c Var 'aux1676' direct represents '1' with '6710'
6708 -6709 6710 0
-6710 6709 0
-6710 -6708 0
c Var 'aux1676' order represents '2' with '6711'
-6709 6711 0
c Var 'aux1676' direct represents '2' with '6712'
6709 -6711 6712 0
-6712 6711 0
-6712 -6709 0
c Var 'aux1676' order represents '3' with '6713'
-6711 6713 0
c Var 'aux1676' direct represents '3' with '6714'
6711 -6713 6714 0
-6714 6713 0
-6714 -6711 0
c Var 'aux1676' direct represents '4' with '-6713'
6708 6710 6712 6714 -6713 0
c Encoding variable: aux1677 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6715'
c Var 'aux1677' direct represents '0' with '6715'
c Var 'aux1677' order represents '1' with '6716'
-6715 6716 0
c Var 'aux1677' direct represents '1' with '6717'
6715 -6716 6717 0
-6717 6716 0
-6717 -6715 0
c Var 'aux1677' direct represents '2' with '-6716'
6715 6717 -6716 0
c Encoding variable: aux1678 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6718'
c Var 'aux1678' direct represents '0' with '6718'
c Var 'aux1678' order represents '1' with '6719'
-6718 6719 0
c Var 'aux1678' direct represents '1' with '6720'
6718 -6719 6720 0
-6720 6719 0
-6720 -6718 0
c Var 'aux1678' direct represents '2' with '-6719'
6718 6720 -6719 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6721'
c Var 'aux1679' direct represents '0' with '6721'
c Var 'aux1679' order represents '1' with '6722'
-6721 6722 0
c Var 'aux1679' direct represents '1' with '6723'
6721 -6722 6723 0
-6723 6722 0
-6723 -6721 0
c Var 'aux1679' direct represents '2' with '-6722'
6721 6723 -6722 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6724'
c Var 'aux1680' direct represents '0' with '6724'
c Var 'aux1680' order represents '1' with '6725'
-6724 6725 0
c Var 'aux1680' direct represents '1' with '6726'
6724 -6725 6726 0
-6726 6725 0
-6726 -6724 0
c Var 'aux1680' direct represents '2' with '-6725'
6724 6726 -6725 0
c Encoding variable: aux1681 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1680))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6727'
c Var 'aux1681' direct represents '0' with '6727'
c Var 'aux1681' order represents '1' with '6728'
-6727 6728 0
c Var 'aux1681' direct represents '1' with '6729'
6727 -6728 6729 0
-6729 6728 0
-6729 -6727 0
c Var 'aux1681' order represents '2' with '6730'
-6728 6730 0
c Var 'aux1681' direct represents '2' with '6731'
6728 -6730 6731 0
-6731 6730 0
-6731 -6728 0
c Var 'aux1681' direct represents '3' with '-6730'
6727 6729 6731 -6730 0
c Encoding variable: aux1682 with domain: int(0..4) (representing constraint (aux1677 + aux1679))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '6732'
c Var 'aux1682' direct represents '0' with '6732'
c Var 'aux1682' order represents '1' with '6733'
-6732 6733 0
c Var 'aux1682' direct represents '1' with '6734'
6732 -6733 6734 0
-6734 6733 0
-6734 -6732 0
c Var 'aux1682' order represents '2' with '6735'
-6733 6735 0
c Var 'aux1682' direct represents '2' with '6736'
6733 -6735 6736 0
-6736 6735 0
-6736 -6733 0
c Var 'aux1682' order represents '3' with '6737'
-6735 6737 0
c Var 'aux1682' direct represents '3' with '6738'
6735 -6737 6738 0
-6738 6737 0
-6738 -6735 0
c Var 'aux1682' direct represents '4' with '-6737'
6732 6734 6736 6738 -6737 0
c Encoding variable: aux1683 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '6739'
c Var 'aux1683' direct represents '0' with '6739'
c Var 'aux1683' order represents '1' with '6740'
-6739 6740 0
c Var 'aux1683' direct represents '1' with '6741'
6739 -6740 6741 0
-6741 6740 0
-6741 -6739 0
c Var 'aux1683' direct represents '2' with '-6740'
6739 6741 -6740 0
c Encoding variable: aux1684 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '6742'
c Var 'aux1684' direct represents '0' with '6742'
c Var 'aux1684' order represents '1' with '6743'
-6742 6743 0
c Var 'aux1684' direct represents '1' with '6744'
6742 -6743 6744 0
-6744 6743 0
-6744 -6742 0
c Var 'aux1684' direct represents '2' with '-6743'
6742 6744 -6743 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '6745'
c Var 'aux1685' direct represents '0' with '6745'
c Var 'aux1685' order represents '1' with '6746'
-6745 6746 0
c Var 'aux1685' direct represents '1' with '6747'
6745 -6746 6747 0
-6747 6746 0
-6747 -6745 0
c Var 'aux1685' direct represents '2' with '-6746'
6745 6747 -6746 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '6748'
c Var 'aux1686' direct represents '0' with '6748'
c Var 'aux1686' order represents '1' with '6749'
-6748 6749 0
c Var 'aux1686' direct represents '1' with '6750'
6748 -6749 6750 0
-6750 6749 0
-6750 -6748 0
c Var 'aux1686' direct represents '2' with '-6749'
6748 6750 -6749 0
c Encoding variable: aux1687 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1686))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '6751'
c Var 'aux1687' direct represents '0' with '6751'
c Var 'aux1687' order represents '1' with '6752'
-6751 6752 0
c Var 'aux1687' direct represents '1' with '6753'
6751 -6752 6753 0
-6753 6752 0
-6753 -6751 0
c Var 'aux1687' order represents '2' with '6754'
-6752 6754 0
c Var 'aux1687' direct represents '2' with '6755'
6752 -6754 6755 0
-6755 6754 0
-6755 -6752 0
c Var 'aux1687' direct represents '3' with '-6754'
6751 6753 6755 -6754 0
c Encoding variable: aux1688 with domain: int(0..4) (representing constraint (aux1683 + aux1685))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '6756'
c Var 'aux1688' direct represents '0' with '6756'
c Var 'aux1688' order represents '1' with '6757'
-6756 6757 0
c Var 'aux1688' direct represents '1' with '6758'
6756 -6757 6758 0
-6758 6757 0
-6758 -6756 0
c Var 'aux1688' order represents '2' with '6759'
-6757 6759 0
c Var 'aux1688' direct represents '2' with '6760'
6757 -6759 6760 0
-6760 6759 0
-6760 -6757 0
c Var 'aux1688' order represents '3' with '6761'
-6759 6761 0
c Var 'aux1688' direct represents '3' with '6762'
6759 -6761 6762 0
-6762 6761 0
-6762 -6759 0
c Var 'aux1688' direct represents '4' with '-6761'
6756 6758 6760 6762 -6761 0
c Encoding variable: aux1689 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '6763'
c Var 'aux1689' direct represents '0' with '6763'
c Var 'aux1689' order represents '1' with '6764'
-6763 6764 0
c Var 'aux1689' direct represents '1' with '6765'
6763 -6764 6765 0
-6765 6764 0
-6765 -6763 0
c Var 'aux1689' direct represents '2' with '-6764'
6763 6765 -6764 0
c Encoding variable: aux1690 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '6766'
c Var 'aux1690' direct represents '0' with '6766'
c Var 'aux1690' order represents '1' with '6767'
-6766 6767 0
c Var 'aux1690' direct represents '1' with '6768'
6766 -6767 6768 0
-6768 6767 0
-6768 -6766 0
c Var 'aux1690' direct represents '2' with '-6767'
6766 6768 -6767 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '6769'
c Var 'aux1691' direct represents '0' with '6769'
c Var 'aux1691' order represents '1' with '6770'
-6769 6770 0
c Var 'aux1691' direct represents '1' with '6771'
6769 -6770 6771 0
-6771 6770 0
-6771 -6769 0
c Var 'aux1691' direct represents '2' with '-6770'
6769 6771 -6770 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '6772'
c Var 'aux1692' direct represents '0' with '6772'
c Var 'aux1692' order represents '1' with '6773'
-6772 6773 0
c Var 'aux1692' direct represents '1' with '6774'
6772 -6773 6774 0
-6774 6773 0
-6774 -6772 0
c Var 'aux1692' direct represents '2' with '-6773'
6772 6774 -6773 0
c Encoding variable: aux1693 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1692))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '6775'
c Var 'aux1693' direct represents '0' with '6775'
c Var 'aux1693' order represents '1' with '6776'
-6775 6776 0
c Var 'aux1693' direct represents '1' with '6777'
6775 -6776 6777 0
-6777 6776 0
-6777 -6775 0
c Var 'aux1693' order represents '2' with '6778'
-6776 6778 0
c Var 'aux1693' direct represents '2' with '6779'
6776 -6778 6779 0
-6779 6778 0
-6779 -6776 0
c Var 'aux1693' direct represents '3' with '-6778'
6775 6777 6779 -6778 0
c Encoding variable: aux1694 with domain: int(0..4) (representing constraint (aux1689 + aux1691))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '6780'
c Var 'aux1694' direct represents '0' with '6780'
c Var 'aux1694' order represents '1' with '6781'
-6780 6781 0
c Var 'aux1694' direct represents '1' with '6782'
6780 -6781 6782 0
-6782 6781 0
-6782 -6780 0
c Var 'aux1694' order represents '2' with '6783'
-6781 6783 0
c Var 'aux1694' direct represents '2' with '6784'
6781 -6783 6784 0
-6784 6783 0
-6784 -6781 0
c Var 'aux1694' order represents '3' with '6785'
-6783 6785 0
c Var 'aux1694' direct represents '3' with '6786'
6783 -6785 6786 0
-6786 6785 0
-6786 -6783 0
c Var 'aux1694' direct represents '4' with '-6785'
6780 6782 6784 6786 -6785 0
c Encoding variable: aux1695 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '6787'
c Var 'aux1695' direct represents '0' with '6787'
c Var 'aux1695' order represents '1' with '6788'
-6787 6788 0
c Var 'aux1695' direct represents '1' with '6789'
6787 -6788 6789 0
-6789 6788 0
-6789 -6787 0
c Var 'aux1695' direct represents '2' with '-6788'
6787 6789 -6788 0
c Encoding variable: aux1696 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '6790'
c Var 'aux1696' direct represents '0' with '6790'
c Var 'aux1696' order represents '1' with '6791'
-6790 6791 0
c Var 'aux1696' direct represents '1' with '6792'
6790 -6791 6792 0
-6792 6791 0
-6792 -6790 0
c Var 'aux1696' direct represents '2' with '-6791'
6790 6792 -6791 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '6793'
c Var 'aux1697' direct represents '0' with '6793'
c Var 'aux1697' order represents '1' with '6794'
-6793 6794 0
c Var 'aux1697' direct represents '1' with '6795'
6793 -6794 6795 0
-6795 6794 0
-6795 -6793 0
c Var 'aux1697' direct represents '2' with '-6794'
6793 6795 -6794 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '6796'
c Var 'aux1698' direct represents '0' with '6796'
c Var 'aux1698' order represents '1' with '6797'
-6796 6797 0
c Var 'aux1698' direct represents '1' with '6798'
6796 -6797 6798 0
-6798 6797 0
-6798 -6796 0
c Var 'aux1698' direct represents '2' with '-6797'
6796 6798 -6797 0
c Encoding variable: aux1699 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1698))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '6799'
c Var 'aux1699' direct represents '0' with '6799'
c Var 'aux1699' order represents '1' with '6800'
-6799 6800 0
c Var 'aux1699' direct represents '1' with '6801'
6799 -6800 6801 0
-6801 6800 0
-6801 -6799 0
c Var 'aux1699' order represents '2' with '6802'
-6800 6802 0
c Var 'aux1699' direct represents '2' with '6803'
6800 -6802 6803 0
-6803 6802 0
-6803 -6800 0
c Var 'aux1699' direct represents '3' with '-6802'
6799 6801 6803 -6802 0
c Encoding variable: aux1700 with domain: int(0..4) (representing constraint (aux1695 + aux1697))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '6804'
c Var 'aux1700' direct represents '0' with '6804'
c Var 'aux1700' order represents '1' with '6805'
-6804 6805 0
c Var 'aux1700' direct represents '1' with '6806'
6804 -6805 6806 0
-6806 6805 0
-6806 -6804 0
c Var 'aux1700' order represents '2' with '6807'
-6805 6807 0
c Var 'aux1700' direct represents '2' with '6808'
6805 -6807 6808 0
-6808 6807 0
-6808 -6805 0
c Var 'aux1700' order represents '3' with '6809'
-6807 6809 0
c Var 'aux1700' direct represents '3' with '6810'
6807 -6809 6810 0
-6810 6809 0
-6810 -6807 0
c Var 'aux1700' direct represents '4' with '-6809'
6804 6806 6808 6810 -6809 0
c Encoding variable: aux1701 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '6811'
c Var 'aux1701' direct represents '0' with '6811'
c Var 'aux1701' order represents '1' with '6812'
-6811 6812 0
c Var 'aux1701' direct represents '1' with '6813'
6811 -6812 6813 0
-6813 6812 0
-6813 -6811 0
c Var 'aux1701' direct represents '2' with '-6812'
6811 6813 -6812 0
c Encoding variable: aux1702 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '6814'
c Var 'aux1702' direct represents '0' with '6814'
c Var 'aux1702' order represents '1' with '6815'
-6814 6815 0
c Var 'aux1702' direct represents '1' with '6816'
6814 -6815 6816 0
-6816 6815 0
-6816 -6814 0
c Var 'aux1702' direct represents '2' with '-6815'
6814 6816 -6815 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '6817'
c Var 'aux1703' direct represents '0' with '6817'
c Var 'aux1703' order represents '1' with '6818'
-6817 6818 0
c Var 'aux1703' direct represents '1' with '6819'
6817 -6818 6819 0
-6819 6818 0
-6819 -6817 0
c Var 'aux1703' direct represents '2' with '-6818'
6817 6819 -6818 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '6820'
c Var 'aux1704' direct represents '0' with '6820'
c Var 'aux1704' order represents '1' with '6821'
-6820 6821 0
c Var 'aux1704' direct represents '1' with '6822'
6820 -6821 6822 0
-6822 6821 0
-6822 -6820 0
c Var 'aux1704' direct represents '2' with '-6821'
6820 6822 -6821 0
c Encoding variable: aux1705 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1704))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '6823'
c Var 'aux1705' direct represents '0' with '6823'
c Var 'aux1705' order represents '1' with '6824'
-6823 6824 0
c Var 'aux1705' direct represents '1' with '6825'
6823 -6824 6825 0
-6825 6824 0
-6825 -6823 0
c Var 'aux1705' order represents '2' with '6826'
-6824 6826 0
c Var 'aux1705' direct represents '2' with '6827'
6824 -6826 6827 0
-6827 6826 0
-6827 -6824 0
c Var 'aux1705' direct represents '3' with '-6826'
6823 6825 6827 -6826 0
c Encoding variable: aux1706 with domain: int(0..4) (representing constraint (aux1701 + aux1703))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '6828'
c Var 'aux1706' direct represents '0' with '6828'
c Var 'aux1706' order represents '1' with '6829'
-6828 6829 0
c Var 'aux1706' direct represents '1' with '6830'
6828 -6829 6830 0
-6830 6829 0
-6830 -6828 0
c Var 'aux1706' order represents '2' with '6831'
-6829 6831 0
c Var 'aux1706' direct represents '2' with '6832'
6829 -6831 6832 0
-6832 6831 0
-6832 -6829 0
c Var 'aux1706' order represents '3' with '6833'
-6831 6833 0
c Var 'aux1706' direct represents '3' with '6834'
6831 -6833 6834 0
-6834 6833 0
-6834 -6831 0
c Var 'aux1706' direct represents '4' with '-6833'
6828 6830 6832 6834 -6833 0
c Encoding variable: aux1707 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '6835'
c Var 'aux1707' direct represents '0' with '6835'
c Var 'aux1707' order represents '1' with '6836'
-6835 6836 0
c Var 'aux1707' direct represents '1' with '6837'
6835 -6836 6837 0
-6837 6836 0
-6837 -6835 0
c Var 'aux1707' direct represents '2' with '-6836'
6835 6837 -6836 0
c Encoding variable: aux1708 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '6838'
c Var 'aux1708' direct represents '0' with '6838'
c Var 'aux1708' order represents '1' with '6839'
-6838 6839 0
c Var 'aux1708' direct represents '1' with '6840'
6838 -6839 6840 0
-6840 6839 0
-6840 -6838 0
c Var 'aux1708' direct represents '2' with '-6839'
6838 6840 -6839 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '6841'
c Var 'aux1709' direct represents '0' with '6841'
c Var 'aux1709' order represents '1' with '6842'
-6841 6842 0
c Var 'aux1709' direct represents '1' with '6843'
6841 -6842 6843 0
-6843 6842 0
-6843 -6841 0
c Var 'aux1709' direct represents '2' with '-6842'
6841 6843 -6842 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '6844'
c Var 'aux1710' direct represents '0' with '6844'
c Var 'aux1710' order represents '1' with '6845'
-6844 6845 0
c Var 'aux1710' direct represents '1' with '6846'
6844 -6845 6846 0
-6846 6845 0
-6846 -6844 0
c Var 'aux1710' direct represents '2' with '-6845'
6844 6846 -6845 0
c Encoding variable: aux1711 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1710))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '6847'
c Var 'aux1711' direct represents '0' with '6847'
c Var 'aux1711' order represents '1' with '6848'
-6847 6848 0
c Var 'aux1711' direct represents '1' with '6849'
6847 -6848 6849 0
-6849 6848 0
-6849 -6847 0
c Var 'aux1711' order represents '2' with '6850'
-6848 6850 0
c Var 'aux1711' direct represents '2' with '6851'
6848 -6850 6851 0
-6851 6850 0
-6851 -6848 0
c Var 'aux1711' direct represents '3' with '-6850'
6847 6849 6851 -6850 0
c Encoding variable: aux1712 with domain: int(0..4) (representing constraint (aux1707 + aux1709))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '6852'
c Var 'aux1712' direct represents '0' with '6852'
c Var 'aux1712' order represents '1' with '6853'
-6852 6853 0
c Var 'aux1712' direct represents '1' with '6854'
6852 -6853 6854 0
-6854 6853 0
-6854 -6852 0
c Var 'aux1712' order represents '2' with '6855'
-6853 6855 0
c Var 'aux1712' direct represents '2' with '6856'
6853 -6855 6856 0
-6856 6855 0
-6856 -6853 0
c Var 'aux1712' order represents '3' with '6857'
-6855 6857 0
c Var 'aux1712' direct represents '3' with '6858'
6855 -6857 6858 0
-6858 6857 0
-6858 -6855 0
c Var 'aux1712' direct represents '4' with '-6857'
6852 6854 6856 6858 -6857 0
c Encoding variable: aux1713 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '6859'
c Var 'aux1713' direct represents '0' with '6859'
c Var 'aux1713' order represents '1' with '6860'
-6859 6860 0
c Var 'aux1713' direct represents '1' with '6861'
6859 -6860 6861 0
-6861 6860 0
-6861 -6859 0
c Var 'aux1713' direct represents '2' with '-6860'
6859 6861 -6860 0
c Encoding variable: aux1714 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '6862'
c Var 'aux1714' direct represents '0' with '6862'
c Var 'aux1714' order represents '1' with '6863'
-6862 6863 0
c Var 'aux1714' direct represents '1' with '6864'
6862 -6863 6864 0
-6864 6863 0
-6864 -6862 0
c Var 'aux1714' direct represents '2' with '-6863'
6862 6864 -6863 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '6865'
c Var 'aux1715' direct represents '0' with '6865'
c Var 'aux1715' order represents '1' with '6866'
-6865 6866 0
c Var 'aux1715' direct represents '1' with '6867'
6865 -6866 6867 0
-6867 6866 0
-6867 -6865 0
c Var 'aux1715' direct represents '2' with '-6866'
6865 6867 -6866 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '6868'
c Var 'aux1716' direct represents '0' with '6868'
c Var 'aux1716' order represents '1' with '6869'
-6868 6869 0
c Var 'aux1716' direct represents '1' with '6870'
6868 -6869 6870 0
-6870 6869 0
-6870 -6868 0
c Var 'aux1716' direct represents '2' with '-6869'
6868 6870 -6869 0
c Encoding variable: aux1717 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1716))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '6871'
c Var 'aux1717' direct represents '0' with '6871'
c Var 'aux1717' order represents '1' with '6872'
-6871 6872 0
c Var 'aux1717' direct represents '1' with '6873'
6871 -6872 6873 0
-6873 6872 0
-6873 -6871 0
c Var 'aux1717' order represents '2' with '6874'
-6872 6874 0
c Var 'aux1717' direct represents '2' with '6875'
6872 -6874 6875 0
-6875 6874 0
-6875 -6872 0
c Var 'aux1717' direct represents '3' with '-6874'
6871 6873 6875 -6874 0
c Encoding variable: aux1718 with domain: int(0..4) (representing constraint (aux1713 + aux1715))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '6876'
c Var 'aux1718' direct represents '0' with '6876'
c Var 'aux1718' order represents '1' with '6877'
-6876 6877 0
c Var 'aux1718' direct represents '1' with '6878'
6876 -6877 6878 0
-6878 6877 0
-6878 -6876 0
c Var 'aux1718' order represents '2' with '6879'
-6877 6879 0
c Var 'aux1718' direct represents '2' with '6880'
6877 -6879 6880 0
-6880 6879 0
-6880 -6877 0
c Var 'aux1718' order represents '3' with '6881'
-6879 6881 0
c Var 'aux1718' direct represents '3' with '6882'
6879 -6881 6882 0
-6882 6881 0
-6882 -6879 0
c Var 'aux1718' direct represents '4' with '-6881'
6876 6878 6880 6882 -6881 0
c Encoding variable: aux1719 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '6883'
c Var 'aux1719' direct represents '0' with '6883'
c Var 'aux1719' order represents '1' with '6884'
-6883 6884 0
c Var 'aux1719' direct represents '1' with '6885'
6883 -6884 6885 0
-6885 6884 0
-6885 -6883 0
c Var 'aux1719' direct represents '2' with '-6884'
6883 6885 -6884 0
c Encoding variable: aux1720 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '6886'
c Var 'aux1720' direct represents '0' with '6886'
c Var 'aux1720' order represents '1' with '6887'
-6886 6887 0
c Var 'aux1720' direct represents '1' with '6888'
6886 -6887 6888 0
-6888 6887 0
-6888 -6886 0
c Var 'aux1720' direct represents '2' with '-6887'
6886 6888 -6887 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '6889'
c Var 'aux1721' direct represents '0' with '6889'
c Var 'aux1721' order represents '1' with '6890'
-6889 6890 0
c Var 'aux1721' direct represents '1' with '6891'
6889 -6890 6891 0
-6891 6890 0
-6891 -6889 0
c Var 'aux1721' direct represents '2' with '-6890'
6889 6891 -6890 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '6892'
c Var 'aux1722' direct represents '0' with '6892'
c Var 'aux1722' order represents '1' with '6893'
-6892 6893 0
c Var 'aux1722' direct represents '1' with '6894'
6892 -6893 6894 0
-6894 6893 0
-6894 -6892 0
c Var 'aux1722' direct represents '2' with '-6893'
6892 6894 -6893 0
c Encoding variable: aux1723 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1722))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '6895'
c Var 'aux1723' direct represents '0' with '6895'
c Var 'aux1723' order represents '1' with '6896'
-6895 6896 0
c Var 'aux1723' direct represents '1' with '6897'
6895 -6896 6897 0
-6897 6896 0
-6897 -6895 0
c Var 'aux1723' order represents '2' with '6898'
-6896 6898 0
c Var 'aux1723' direct represents '2' with '6899'
6896 -6898 6899 0
-6899 6898 0
-6899 -6896 0
c Var 'aux1723' direct represents '3' with '-6898'
6895 6897 6899 -6898 0
c Encoding variable: aux1724 with domain: int(0..4) (representing constraint (aux1719 + aux1721))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '6900'
c Var 'aux1724' direct represents '0' with '6900'
c Var 'aux1724' order represents '1' with '6901'
-6900 6901 0
c Var 'aux1724' direct represents '1' with '6902'
6900 -6901 6902 0
-6902 6901 0
-6902 -6900 0
c Var 'aux1724' order represents '2' with '6903'
-6901 6903 0
c Var 'aux1724' direct represents '2' with '6904'
6901 -6903 6904 0
-6904 6903 0
-6904 -6901 0
c Var 'aux1724' order represents '3' with '6905'
-6903 6905 0
c Var 'aux1724' direct represents '3' with '6906'
6903 -6905 6906 0
-6906 6905 0
-6906 -6903 0
c Var 'aux1724' direct represents '4' with '-6905'
6900 6902 6904 6906 -6905 0
c Encoding variable: aux1725 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '6907'
c Var 'aux1725' direct represents '0' with '6907'
c Var 'aux1725' order represents '1' with '6908'
-6907 6908 0
c Var 'aux1725' direct represents '1' with '6909'
6907 -6908 6909 0
-6909 6908 0
-6909 -6907 0
c Var 'aux1725' direct represents '2' with '-6908'
6907 6909 -6908 0
c Encoding variable: aux1726 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '6910'
c Var 'aux1726' direct represents '0' with '6910'
c Var 'aux1726' order represents '1' with '6911'
-6910 6911 0
c Var 'aux1726' direct represents '1' with '6912'
6910 -6911 6912 0
-6912 6911 0
-6912 -6910 0
c Var 'aux1726' direct represents '2' with '-6911'
6910 6912 -6911 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '6913'
c Var 'aux1727' direct represents '0' with '6913'
c Var 'aux1727' order represents '1' with '6914'
-6913 6914 0
c Var 'aux1727' direct represents '1' with '6915'
6913 -6914 6915 0
-6915 6914 0
-6915 -6913 0
c Var 'aux1727' direct represents '2' with '-6914'
6913 6915 -6914 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '6916'
c Var 'aux1728' direct represents '0' with '6916'
c Var 'aux1728' order represents '1' with '6917'
-6916 6917 0
c Var 'aux1728' direct represents '1' with '6918'
6916 -6917 6918 0
-6918 6917 0
-6918 -6916 0
c Var 'aux1728' direct represents '2' with '-6917'
6916 6918 -6917 0
c Encoding variable: aux1729 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1728))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '6919'
c Var 'aux1729' direct represents '0' with '6919'
c Var 'aux1729' order represents '1' with '6920'
-6919 6920 0
c Var 'aux1729' direct represents '1' with '6921'
6919 -6920 6921 0
-6921 6920 0
-6921 -6919 0
c Var 'aux1729' order represents '2' with '6922'
-6920 6922 0
c Var 'aux1729' direct represents '2' with '6923'
6920 -6922 6923 0
-6923 6922 0
-6923 -6920 0
c Var 'aux1729' direct represents '3' with '-6922'
6919 6921 6923 -6922 0
c Encoding variable: aux1730 with domain: int(0..4) (representing constraint (aux1725 + aux1727))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '6924'
c Var 'aux1730' direct represents '0' with '6924'
c Var 'aux1730' order represents '1' with '6925'
-6924 6925 0
c Var 'aux1730' direct represents '1' with '6926'
6924 -6925 6926 0
-6926 6925 0
-6926 -6924 0
c Var 'aux1730' order represents '2' with '6927'
-6925 6927 0
c Var 'aux1730' direct represents '2' with '6928'
6925 -6927 6928 0
-6928 6927 0
-6928 -6925 0
c Var 'aux1730' order represents '3' with '6929'
-6927 6929 0
c Var 'aux1730' direct represents '3' with '6930'
6927 -6929 6930 0
-6930 6929 0
-6930 -6927 0
c Var 'aux1730' direct represents '4' with '-6929'
6924 6926 6928 6930 -6929 0
c Encoding variable: aux1731 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '6931'
c Var 'aux1731' direct represents '0' with '6931'
c Var 'aux1731' order represents '1' with '6932'
-6931 6932 0
c Var 'aux1731' direct represents '1' with '6933'
6931 -6932 6933 0
-6933 6932 0
-6933 -6931 0
c Var 'aux1731' direct represents '2' with '-6932'
6931 6933 -6932 0
c Encoding variable: aux1732 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '6934'
c Var 'aux1732' direct represents '0' with '6934'
c Var 'aux1732' order represents '1' with '6935'
-6934 6935 0
c Var 'aux1732' direct represents '1' with '6936'
6934 -6935 6936 0
-6936 6935 0
-6936 -6934 0
c Var 'aux1732' direct represents '2' with '-6935'
6934 6936 -6935 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '6937'
c Var 'aux1733' direct represents '0' with '6937'
c Var 'aux1733' order represents '1' with '6938'
-6937 6938 0
c Var 'aux1733' direct represents '1' with '6939'
6937 -6938 6939 0
-6939 6938 0
-6939 -6937 0
c Var 'aux1733' direct represents '2' with '-6938'
6937 6939 -6938 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '6940'
c Var 'aux1734' direct represents '0' with '6940'
c Var 'aux1734' order represents '1' with '6941'
-6940 6941 0
c Var 'aux1734' direct represents '1' with '6942'
6940 -6941 6942 0
-6942 6941 0
-6942 -6940 0
c Var 'aux1734' direct represents '2' with '-6941'
6940 6942 -6941 0
c Encoding variable: aux1735 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1734))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '6943'
c Var 'aux1735' direct represents '0' with '6943'
c Var 'aux1735' order represents '1' with '6944'
-6943 6944 0
c Var 'aux1735' direct represents '1' with '6945'
6943 -6944 6945 0
-6945 6944 0
-6945 -6943 0
c Var 'aux1735' order represents '2' with '6946'
-6944 6946 0
c Var 'aux1735' direct represents '2' with '6947'
6944 -6946 6947 0
-6947 6946 0
-6947 -6944 0
c Var 'aux1735' direct represents '3' with '-6946'
6943 6945 6947 -6946 0
c Encoding variable: aux1736 with domain: int(0..4) (representing constraint (aux1731 + aux1733))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '6948'
c Var 'aux1736' direct represents '0' with '6948'
c Var 'aux1736' order represents '1' with '6949'
-6948 6949 0
c Var 'aux1736' direct represents '1' with '6950'
6948 -6949 6950 0
-6950 6949 0
-6950 -6948 0
c Var 'aux1736' order represents '2' with '6951'
-6949 6951 0
c Var 'aux1736' direct represents '2' with '6952'
6949 -6951 6952 0
-6952 6951 0
-6952 -6949 0
c Var 'aux1736' order represents '3' with '6953'
-6951 6953 0
c Var 'aux1736' direct represents '3' with '6954'
6951 -6953 6954 0
-6954 6953 0
-6954 -6951 0
c Var 'aux1736' direct represents '4' with '-6953'
6948 6950 6952 6954 -6953 0
c Encoding variable: aux1737 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '6955'
c Var 'aux1737' direct represents '0' with '6955'
c Var 'aux1737' order represents '1' with '6956'
-6955 6956 0
c Var 'aux1737' direct represents '1' with '6957'
6955 -6956 6957 0
-6957 6956 0
-6957 -6955 0
c Var 'aux1737' direct represents '2' with '-6956'
6955 6957 -6956 0
c Encoding variable: aux1738 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '6958'
c Var 'aux1738' direct represents '0' with '6958'
c Var 'aux1738' order represents '1' with '6959'
-6958 6959 0
c Var 'aux1738' direct represents '1' with '6960'
6958 -6959 6960 0
-6960 6959 0
-6960 -6958 0
c Var 'aux1738' direct represents '2' with '-6959'
6958 6960 -6959 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '6961'
c Var 'aux1739' direct represents '0' with '6961'
c Var 'aux1739' order represents '1' with '6962'
-6961 6962 0
c Var 'aux1739' direct represents '1' with '6963'
6961 -6962 6963 0
-6963 6962 0
-6963 -6961 0
c Var 'aux1739' direct represents '2' with '-6962'
6961 6963 -6962 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '6964'
c Var 'aux1740' direct represents '0' with '6964'
c Var 'aux1740' order represents '1' with '6965'
-6964 6965 0
c Var 'aux1740' direct represents '1' with '6966'
6964 -6965 6966 0
-6966 6965 0
-6966 -6964 0
c Var 'aux1740' direct represents '2' with '-6965'
6964 6966 -6965 0
c Encoding variable: aux1741 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1740))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '6967'
c Var 'aux1741' direct represents '0' with '6967'
c Var 'aux1741' order represents '1' with '6968'
-6967 6968 0
c Var 'aux1741' direct represents '1' with '6969'
6967 -6968 6969 0
-6969 6968 0
-6969 -6967 0
c Var 'aux1741' order represents '2' with '6970'
-6968 6970 0
c Var 'aux1741' direct represents '2' with '6971'
6968 -6970 6971 0
-6971 6970 0
-6971 -6968 0
c Var 'aux1741' direct represents '3' with '-6970'
6967 6969 6971 -6970 0
c Encoding variable: aux1742 with domain: int(0..4) (representing constraint (aux1737 + aux1739))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '6972'
c Var 'aux1742' direct represents '0' with '6972'
c Var 'aux1742' order represents '1' with '6973'
-6972 6973 0
c Var 'aux1742' direct represents '1' with '6974'
6972 -6973 6974 0
-6974 6973 0
-6974 -6972 0
c Var 'aux1742' order represents '2' with '6975'
-6973 6975 0
c Var 'aux1742' direct represents '2' with '6976'
6973 -6975 6976 0
-6976 6975 0
-6976 -6973 0
c Var 'aux1742' order represents '3' with '6977'
-6975 6977 0
c Var 'aux1742' direct represents '3' with '6978'
6975 -6977 6978 0
-6978 6977 0
-6978 -6975 0
c Var 'aux1742' direct represents '4' with '-6977'
6972 6974 6976 6978 -6977 0
c Encoding variable: aux1743 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '6979'
c Var 'aux1743' direct represents '0' with '6979'
c Var 'aux1743' order represents '1' with '6980'
-6979 6980 0
c Var 'aux1743' direct represents '1' with '6981'
6979 -6980 6981 0
-6981 6980 0
-6981 -6979 0
c Var 'aux1743' direct represents '2' with '-6980'
6979 6981 -6980 0
c Encoding variable: aux1744 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '6982'
c Var 'aux1744' direct represents '0' with '6982'
c Var 'aux1744' order represents '1' with '6983'
-6982 6983 0
c Var 'aux1744' direct represents '1' with '6984'
6982 -6983 6984 0
-6984 6983 0
-6984 -6982 0
c Var 'aux1744' direct represents '2' with '-6983'
6982 6984 -6983 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '6985'
c Var 'aux1745' direct represents '0' with '6985'
c Var 'aux1745' order represents '1' with '6986'
-6985 6986 0
c Var 'aux1745' direct represents '1' with '6987'
6985 -6986 6987 0
-6987 6986 0
-6987 -6985 0
c Var 'aux1745' direct represents '2' with '-6986'
6985 6987 -6986 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '6988'
c Var 'aux1746' direct represents '0' with '6988'
c Var 'aux1746' order represents '1' with '6989'
-6988 6989 0
c Var 'aux1746' direct represents '1' with '6990'
6988 -6989 6990 0
-6990 6989 0
-6990 -6988 0
c Var 'aux1746' direct represents '2' with '-6989'
6988 6990 -6989 0
c Encoding variable: aux1747 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1746))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '6991'
c Var 'aux1747' direct represents '0' with '6991'
c Var 'aux1747' order represents '1' with '6992'
-6991 6992 0
c Var 'aux1747' direct represents '1' with '6993'
6991 -6992 6993 0
-6993 6992 0
-6993 -6991 0
c Var 'aux1747' order represents '2' with '6994'
-6992 6994 0
c Var 'aux1747' direct represents '2' with '6995'
6992 -6994 6995 0
-6995 6994 0
-6995 -6992 0
c Var 'aux1747' direct represents '3' with '-6994'
6991 6993 6995 -6994 0
c Encoding variable: aux1748 with domain: int(0..4) (representing constraint (aux1743 + aux1745))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '6996'
c Var 'aux1748' direct represents '0' with '6996'
c Var 'aux1748' order represents '1' with '6997'
-6996 6997 0
c Var 'aux1748' direct represents '1' with '6998'
6996 -6997 6998 0
-6998 6997 0
-6998 -6996 0
c Var 'aux1748' order represents '2' with '6999'
-6997 6999 0
c Var 'aux1748' direct represents '2' with '7000'
6997 -6999 7000 0
-7000 6999 0
-7000 -6997 0
c Var 'aux1748' order represents '3' with '7001'
-6999 7001 0
c Var 'aux1748' direct represents '3' with '7002'
6999 -7001 7002 0
-7002 7001 0
-7002 -6999 0
c Var 'aux1748' direct represents '4' with '-7001'
6996 6998 7000 7002 -7001 0
c Encoding variable: aux1749 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7003'
c Var 'aux1749' direct represents '0' with '7003'
c Var 'aux1749' order represents '1' with '7004'
-7003 7004 0
c Var 'aux1749' direct represents '1' with '7005'
7003 -7004 7005 0
-7005 7004 0
-7005 -7003 0
c Var 'aux1749' direct represents '2' with '-7004'
7003 7005 -7004 0
c Encoding variable: aux1750 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7006'
c Var 'aux1750' direct represents '0' with '7006'
c Var 'aux1750' order represents '1' with '7007'
-7006 7007 0
c Var 'aux1750' direct represents '1' with '7008'
7006 -7007 7008 0
-7008 7007 0
-7008 -7006 0
c Var 'aux1750' direct represents '2' with '-7007'
7006 7008 -7007 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7009'
c Var 'aux1751' direct represents '0' with '7009'
c Var 'aux1751' order represents '1' with '7010'
-7009 7010 0
c Var 'aux1751' direct represents '1' with '7011'
7009 -7010 7011 0
-7011 7010 0
-7011 -7009 0
c Var 'aux1751' direct represents '2' with '-7010'
7009 7011 -7010 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7012'
c Var 'aux1752' direct represents '0' with '7012'
c Var 'aux1752' order represents '1' with '7013'
-7012 7013 0
c Var 'aux1752' direct represents '1' with '7014'
7012 -7013 7014 0
-7014 7013 0
-7014 -7012 0
c Var 'aux1752' direct represents '2' with '-7013'
7012 7014 -7013 0
c Encoding variable: aux1753 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1752))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7015'
c Var 'aux1753' direct represents '0' with '7015'
c Var 'aux1753' order represents '1' with '7016'
-7015 7016 0
c Var 'aux1753' direct represents '1' with '7017'
7015 -7016 7017 0
-7017 7016 0
-7017 -7015 0
c Var 'aux1753' order represents '2' with '7018'
-7016 7018 0
c Var 'aux1753' direct represents '2' with '7019'
7016 -7018 7019 0
-7019 7018 0
-7019 -7016 0
c Var 'aux1753' direct represents '3' with '-7018'
7015 7017 7019 -7018 0
c Encoding variable: aux1754 with domain: int(0..4) (representing constraint (aux1749 + aux1751))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7020'
c Var 'aux1754' direct represents '0' with '7020'
c Var 'aux1754' order represents '1' with '7021'
-7020 7021 0
c Var 'aux1754' direct represents '1' with '7022'
7020 -7021 7022 0
-7022 7021 0
-7022 -7020 0
c Var 'aux1754' order represents '2' with '7023'
-7021 7023 0
c Var 'aux1754' direct represents '2' with '7024'
7021 -7023 7024 0
-7024 7023 0
-7024 -7021 0
c Var 'aux1754' order represents '3' with '7025'
-7023 7025 0
c Var 'aux1754' direct represents '3' with '7026'
7023 -7025 7026 0
-7026 7025 0
-7026 -7023 0
c Var 'aux1754' direct represents '4' with '-7025'
7020 7022 7024 7026 -7025 0
c Encoding variable: aux1755 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7027'
c Var 'aux1755' direct represents '0' with '7027'
c Var 'aux1755' order represents '1' with '7028'
-7027 7028 0
c Var 'aux1755' direct represents '1' with '7029'
7027 -7028 7029 0
-7029 7028 0
-7029 -7027 0
c Var 'aux1755' direct represents '2' with '-7028'
7027 7029 -7028 0
c Encoding variable: aux1756 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7030'
c Var 'aux1756' direct represents '0' with '7030'
c Var 'aux1756' order represents '1' with '7031'
-7030 7031 0
c Var 'aux1756' direct represents '1' with '7032'
7030 -7031 7032 0
-7032 7031 0
-7032 -7030 0
c Var 'aux1756' direct represents '2' with '-7031'
7030 7032 -7031 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7033'
c Var 'aux1757' direct represents '0' with '7033'
c Var 'aux1757' order represents '1' with '7034'
-7033 7034 0
c Var 'aux1757' direct represents '1' with '7035'
7033 -7034 7035 0
-7035 7034 0
-7035 -7033 0
c Var 'aux1757' direct represents '2' with '-7034'
7033 7035 -7034 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7036'
c Var 'aux1758' direct represents '0' with '7036'
c Var 'aux1758' order represents '1' with '7037'
-7036 7037 0
c Var 'aux1758' direct represents '1' with '7038'
7036 -7037 7038 0
-7038 7037 0
-7038 -7036 0
c Var 'aux1758' direct represents '2' with '-7037'
7036 7038 -7037 0
c Encoding variable: aux1759 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1758))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7039'
c Var 'aux1759' direct represents '0' with '7039'
c Var 'aux1759' order represents '1' with '7040'
-7039 7040 0
c Var 'aux1759' direct represents '1' with '7041'
7039 -7040 7041 0
-7041 7040 0
-7041 -7039 0
c Var 'aux1759' order represents '2' with '7042'
-7040 7042 0
c Var 'aux1759' direct represents '2' with '7043'
7040 -7042 7043 0
-7043 7042 0
-7043 -7040 0
c Var 'aux1759' direct represents '3' with '-7042'
7039 7041 7043 -7042 0
c Encoding variable: aux1760 with domain: int(0..4) (representing constraint (aux1755 + aux1757))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7044'
c Var 'aux1760' direct represents '0' with '7044'
c Var 'aux1760' order represents '1' with '7045'
-7044 7045 0
c Var 'aux1760' direct represents '1' with '7046'
7044 -7045 7046 0
-7046 7045 0
-7046 -7044 0
c Var 'aux1760' order represents '2' with '7047'
-7045 7047 0
c Var 'aux1760' direct represents '2' with '7048'
7045 -7047 7048 0
-7048 7047 0
-7048 -7045 0
c Var 'aux1760' order represents '3' with '7049'
-7047 7049 0
c Var 'aux1760' direct represents '3' with '7050'
7047 -7049 7050 0
-7050 7049 0
-7050 -7047 0
c Var 'aux1760' direct represents '4' with '-7049'
7044 7046 7048 7050 -7049 0
c Encoding variable: aux1761 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7051'
c Var 'aux1761' direct represents '0' with '7051'
c Var 'aux1761' order represents '1' with '7052'
-7051 7052 0
c Var 'aux1761' direct represents '1' with '7053'
7051 -7052 7053 0
-7053 7052 0
-7053 -7051 0
c Var 'aux1761' direct represents '2' with '-7052'
7051 7053 -7052 0
c Encoding variable: aux1762 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7054'
c Var 'aux1762' direct represents '0' with '7054'
c Var 'aux1762' order represents '1' with '7055'
-7054 7055 0
c Var 'aux1762' direct represents '1' with '7056'
7054 -7055 7056 0
-7056 7055 0
-7056 -7054 0
c Var 'aux1762' direct represents '2' with '-7055'
7054 7056 -7055 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7057'
c Var 'aux1763' direct represents '0' with '7057'
c Var 'aux1763' order represents '1' with '7058'
-7057 7058 0
c Var 'aux1763' direct represents '1' with '7059'
7057 -7058 7059 0
-7059 7058 0
-7059 -7057 0
c Var 'aux1763' direct represents '2' with '-7058'
7057 7059 -7058 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7060'
c Var 'aux1764' direct represents '0' with '7060'
c Var 'aux1764' order represents '1' with '7061'
-7060 7061 0
c Var 'aux1764' direct represents '1' with '7062'
7060 -7061 7062 0
-7062 7061 0
-7062 -7060 0
c Var 'aux1764' direct represents '2' with '-7061'
7060 7062 -7061 0
c Encoding variable: aux1765 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1764))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7063'
c Var 'aux1765' direct represents '0' with '7063'
c Var 'aux1765' order represents '1' with '7064'
-7063 7064 0
c Var 'aux1765' direct represents '1' with '7065'
7063 -7064 7065 0
-7065 7064 0
-7065 -7063 0
c Var 'aux1765' order represents '2' with '7066'
-7064 7066 0
c Var 'aux1765' direct represents '2' with '7067'
7064 -7066 7067 0
-7067 7066 0
-7067 -7064 0
c Var 'aux1765' direct represents '3' with '-7066'
7063 7065 7067 -7066 0
c Encoding variable: aux1766 with domain: int(0..4) (representing constraint (aux1761 + aux1763))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7068'
c Var 'aux1766' direct represents '0' with '7068'
c Var 'aux1766' order represents '1' with '7069'
-7068 7069 0
c Var 'aux1766' direct represents '1' with '7070'
7068 -7069 7070 0
-7070 7069 0
-7070 -7068 0
c Var 'aux1766' order represents '2' with '7071'
-7069 7071 0
c Var 'aux1766' direct represents '2' with '7072'
7069 -7071 7072 0
-7072 7071 0
-7072 -7069 0
c Var 'aux1766' order represents '3' with '7073'
-7071 7073 0
c Var 'aux1766' direct represents '3' with '7074'
7071 -7073 7074 0
-7074 7073 0
-7074 -7071 0
c Var 'aux1766' direct represents '4' with '-7073'
7068 7070 7072 7074 -7073 0
c Encoding variable: aux1767 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7075'
c Var 'aux1767' direct represents '0' with '7075'
c Var 'aux1767' order represents '1' with '7076'
-7075 7076 0
c Var 'aux1767' direct represents '1' with '7077'
7075 -7076 7077 0
-7077 7076 0
-7077 -7075 0
c Var 'aux1767' direct represents '2' with '-7076'
7075 7077 -7076 0
c Encoding variable: aux1768 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7078'
c Var 'aux1768' direct represents '0' with '7078'
c Var 'aux1768' order represents '1' with '7079'
-7078 7079 0
c Var 'aux1768' direct represents '1' with '7080'
7078 -7079 7080 0
-7080 7079 0
-7080 -7078 0
c Var 'aux1768' direct represents '2' with '-7079'
7078 7080 -7079 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7081'
c Var 'aux1769' direct represents '0' with '7081'
c Var 'aux1769' order represents '1' with '7082'
-7081 7082 0
c Var 'aux1769' direct represents '1' with '7083'
7081 -7082 7083 0
-7083 7082 0
-7083 -7081 0
c Var 'aux1769' direct represents '2' with '-7082'
7081 7083 -7082 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7084'
c Var 'aux1770' direct represents '0' with '7084'
c Var 'aux1770' order represents '1' with '7085'
-7084 7085 0
c Var 'aux1770' direct represents '1' with '7086'
7084 -7085 7086 0
-7086 7085 0
-7086 -7084 0
c Var 'aux1770' direct represents '2' with '-7085'
7084 7086 -7085 0
c Encoding variable: aux1771 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1770))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7087'
c Var 'aux1771' direct represents '0' with '7087'
c Var 'aux1771' order represents '1' with '7088'
-7087 7088 0
c Var 'aux1771' direct represents '1' with '7089'
7087 -7088 7089 0
-7089 7088 0
-7089 -7087 0
c Var 'aux1771' order represents '2' with '7090'
-7088 7090 0
c Var 'aux1771' direct represents '2' with '7091'
7088 -7090 7091 0
-7091 7090 0
-7091 -7088 0
c Var 'aux1771' direct represents '3' with '-7090'
7087 7089 7091 -7090 0
c Encoding variable: aux1772 with domain: int(0..4) (representing constraint (aux1767 + aux1769))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7092'
c Var 'aux1772' direct represents '0' with '7092'
c Var 'aux1772' order represents '1' with '7093'
-7092 7093 0
c Var 'aux1772' direct represents '1' with '7094'
7092 -7093 7094 0
-7094 7093 0
-7094 -7092 0
c Var 'aux1772' order represents '2' with '7095'
-7093 7095 0
c Var 'aux1772' direct represents '2' with '7096'
7093 -7095 7096 0
-7096 7095 0
-7096 -7093 0
c Var 'aux1772' order represents '3' with '7097'
-7095 7097 0
c Var 'aux1772' direct represents '3' with '7098'
7095 -7097 7098 0
-7098 7097 0
-7098 -7095 0
c Var 'aux1772' direct represents '4' with '-7097'
7092 7094 7096 7098 -7097 0
c Encoding variable: aux1773 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7099'
c Var 'aux1773' direct represents '0' with '7099'
c Var 'aux1773' order represents '1' with '7100'
-7099 7100 0
c Var 'aux1773' direct represents '1' with '7101'
7099 -7100 7101 0
-7101 7100 0
-7101 -7099 0
c Var 'aux1773' direct represents '2' with '-7100'
7099 7101 -7100 0
c Encoding variable: aux1774 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7102'
c Var 'aux1774' direct represents '0' with '7102'
c Var 'aux1774' order represents '1' with '7103'
-7102 7103 0
c Var 'aux1774' direct represents '1' with '7104'
7102 -7103 7104 0
-7104 7103 0
-7104 -7102 0
c Var 'aux1774' direct represents '2' with '-7103'
7102 7104 -7103 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7105'
c Var 'aux1775' direct represents '0' with '7105'
c Var 'aux1775' order represents '1' with '7106'
-7105 7106 0
c Var 'aux1775' direct represents '1' with '7107'
7105 -7106 7107 0
-7107 7106 0
-7107 -7105 0
c Var 'aux1775' direct represents '2' with '-7106'
7105 7107 -7106 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7108'
c Var 'aux1776' direct represents '0' with '7108'
c Var 'aux1776' order represents '1' with '7109'
-7108 7109 0
c Var 'aux1776' direct represents '1' with '7110'
7108 -7109 7110 0
-7110 7109 0
-7110 -7108 0
c Var 'aux1776' direct represents '2' with '-7109'
7108 7110 -7109 0
c Encoding variable: aux1777 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1776))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7111'
c Var 'aux1777' direct represents '0' with '7111'
c Var 'aux1777' order represents '1' with '7112'
-7111 7112 0
c Var 'aux1777' direct represents '1' with '7113'
7111 -7112 7113 0
-7113 7112 0
-7113 -7111 0
c Var 'aux1777' order represents '2' with '7114'
-7112 7114 0
c Var 'aux1777' direct represents '2' with '7115'
7112 -7114 7115 0
-7115 7114 0
-7115 -7112 0
c Var 'aux1777' direct represents '3' with '-7114'
7111 7113 7115 -7114 0
c Encoding variable: aux1778 with domain: int(0..4) (representing constraint (aux1773 + aux1775))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7116'
c Var 'aux1778' direct represents '0' with '7116'
c Var 'aux1778' order represents '1' with '7117'
-7116 7117 0
c Var 'aux1778' direct represents '1' with '7118'
7116 -7117 7118 0
-7118 7117 0
-7118 -7116 0
c Var 'aux1778' order represents '2' with '7119'
-7117 7119 0
c Var 'aux1778' direct represents '2' with '7120'
7117 -7119 7120 0
-7120 7119 0
-7120 -7117 0
c Var 'aux1778' order represents '3' with '7121'
-7119 7121 0
c Var 'aux1778' direct represents '3' with '7122'
7119 -7121 7122 0
-7122 7121 0
-7122 -7119 0
c Var 'aux1778' direct represents '4' with '-7121'
7116 7118 7120 7122 -7121 0
c Encoding variable: aux1779 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7123'
c Var 'aux1779' direct represents '0' with '7123'
c Var 'aux1779' order represents '1' with '7124'
-7123 7124 0
c Var 'aux1779' direct represents '1' with '7125'
7123 -7124 7125 0
-7125 7124 0
-7125 -7123 0
c Var 'aux1779' direct represents '2' with '-7124'
7123 7125 -7124 0
c Encoding variable: aux1780 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7126'
c Var 'aux1780' direct represents '0' with '7126'
c Var 'aux1780' order represents '1' with '7127'
-7126 7127 0
c Var 'aux1780' direct represents '1' with '7128'
7126 -7127 7128 0
-7128 7127 0
-7128 -7126 0
c Var 'aux1780' direct represents '2' with '-7127'
7126 7128 -7127 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7129'
c Var 'aux1781' direct represents '0' with '7129'
c Var 'aux1781' order represents '1' with '7130'
-7129 7130 0
c Var 'aux1781' direct represents '1' with '7131'
7129 -7130 7131 0
-7131 7130 0
-7131 -7129 0
c Var 'aux1781' direct represents '2' with '-7130'
7129 7131 -7130 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7132'
c Var 'aux1782' direct represents '0' with '7132'
c Var 'aux1782' order represents '1' with '7133'
-7132 7133 0
c Var 'aux1782' direct represents '1' with '7134'
7132 -7133 7134 0
-7134 7133 0
-7134 -7132 0
c Var 'aux1782' direct represents '2' with '-7133'
7132 7134 -7133 0
c Encoding variable: aux1783 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1782))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7135'
c Var 'aux1783' direct represents '0' with '7135'
c Var 'aux1783' order represents '1' with '7136'
-7135 7136 0
c Var 'aux1783' direct represents '1' with '7137'
7135 -7136 7137 0
-7137 7136 0
-7137 -7135 0
c Var 'aux1783' order represents '2' with '7138'
-7136 7138 0
c Var 'aux1783' direct represents '2' with '7139'
7136 -7138 7139 0
-7139 7138 0
-7139 -7136 0
c Var 'aux1783' direct represents '3' with '-7138'
7135 7137 7139 -7138 0
c Encoding variable: aux1784 with domain: int(0..4) (representing constraint (aux1779 + aux1781))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7140'
c Var 'aux1784' direct represents '0' with '7140'
c Var 'aux1784' order represents '1' with '7141'
-7140 7141 0
c Var 'aux1784' direct represents '1' with '7142'
7140 -7141 7142 0
-7142 7141 0
-7142 -7140 0
c Var 'aux1784' order represents '2' with '7143'
-7141 7143 0
c Var 'aux1784' direct represents '2' with '7144'
7141 -7143 7144 0
-7144 7143 0
-7144 -7141 0
c Var 'aux1784' order represents '3' with '7145'
-7143 7145 0
c Var 'aux1784' direct represents '3' with '7146'
7143 -7145 7146 0
-7146 7145 0
-7146 -7143 0
c Var 'aux1784' direct represents '4' with '-7145'
7140 7142 7144 7146 -7145 0
c Encoding variable: aux1785 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7147'
c Var 'aux1785' direct represents '0' with '7147'
c Var 'aux1785' order represents '1' with '7148'
-7147 7148 0
c Var 'aux1785' direct represents '1' with '7149'
7147 -7148 7149 0
-7149 7148 0
-7149 -7147 0
c Var 'aux1785' direct represents '2' with '-7148'
7147 7149 -7148 0
c Encoding variable: aux1786 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7150'
c Var 'aux1786' direct represents '0' with '7150'
c Var 'aux1786' order represents '1' with '7151'
-7150 7151 0
c Var 'aux1786' direct represents '1' with '7152'
7150 -7151 7152 0
-7152 7151 0
-7152 -7150 0
c Var 'aux1786' direct represents '2' with '-7151'
7150 7152 -7151 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7153'
c Var 'aux1787' direct represents '0' with '7153'
c Var 'aux1787' order represents '1' with '7154'
-7153 7154 0
c Var 'aux1787' direct represents '1' with '7155'
7153 -7154 7155 0
-7155 7154 0
-7155 -7153 0
c Var 'aux1787' direct represents '2' with '-7154'
7153 7155 -7154 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7156'
c Var 'aux1788' direct represents '0' with '7156'
c Var 'aux1788' order represents '1' with '7157'
-7156 7157 0
c Var 'aux1788' direct represents '1' with '7158'
7156 -7157 7158 0
-7158 7157 0
-7158 -7156 0
c Var 'aux1788' direct represents '2' with '-7157'
7156 7158 -7157 0
c Encoding variable: aux1789 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1788))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7159'
c Var 'aux1789' direct represents '0' with '7159'
c Var 'aux1789' order represents '1' with '7160'
-7159 7160 0
c Var 'aux1789' direct represents '1' with '7161'
7159 -7160 7161 0
-7161 7160 0
-7161 -7159 0
c Var 'aux1789' order represents '2' with '7162'
-7160 7162 0
c Var 'aux1789' direct represents '2' with '7163'
7160 -7162 7163 0
-7163 7162 0
-7163 -7160 0
c Var 'aux1789' direct represents '3' with '-7162'
7159 7161 7163 -7162 0
c Encoding variable: aux1790 with domain: int(0..4) (representing constraint (aux1785 + aux1787))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7164'
c Var 'aux1790' direct represents '0' with '7164'
c Var 'aux1790' order represents '1' with '7165'
-7164 7165 0
c Var 'aux1790' direct represents '1' with '7166'
7164 -7165 7166 0
-7166 7165 0
-7166 -7164 0
c Var 'aux1790' order represents '2' with '7167'
-7165 7167 0
c Var 'aux1790' direct represents '2' with '7168'
7165 -7167 7168 0
-7168 7167 0
-7168 -7165 0
c Var 'aux1790' order represents '3' with '7169'
-7167 7169 0
c Var 'aux1790' direct represents '3' with '7170'
7167 -7169 7170 0
-7170 7169 0
-7170 -7167 0
c Var 'aux1790' direct represents '4' with '-7169'
7164 7166 7168 7170 -7169 0
c Encoding variable: aux1791 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7171'
c Var 'aux1791' direct represents '0' with '7171'
c Var 'aux1791' order represents '1' with '7172'
-7171 7172 0
c Var 'aux1791' direct represents '1' with '7173'
7171 -7172 7173 0
-7173 7172 0
-7173 -7171 0
c Var 'aux1791' direct represents '2' with '-7172'
7171 7173 -7172 0
c Encoding variable: aux1792 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7174'
c Var 'aux1792' direct represents '0' with '7174'
c Var 'aux1792' order represents '1' with '7175'
-7174 7175 0
c Var 'aux1792' direct represents '1' with '7176'
7174 -7175 7176 0
-7176 7175 0
-7176 -7174 0
c Var 'aux1792' direct represents '2' with '-7175'
7174 7176 -7175 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7177'
c Var 'aux1793' direct represents '0' with '7177'
c Var 'aux1793' order represents '1' with '7178'
-7177 7178 0
c Var 'aux1793' direct represents '1' with '7179'
7177 -7178 7179 0
-7179 7178 0
-7179 -7177 0
c Var 'aux1793' direct represents '2' with '-7178'
7177 7179 -7178 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7180'
c Var 'aux1794' direct represents '0' with '7180'
c Var 'aux1794' order represents '1' with '7181'
-7180 7181 0
c Var 'aux1794' direct represents '1' with '7182'
7180 -7181 7182 0
-7182 7181 0
-7182 -7180 0
c Var 'aux1794' direct represents '2' with '-7181'
7180 7182 -7181 0
c Encoding variable: aux1795 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1794))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7183'
c Var 'aux1795' direct represents '0' with '7183'
c Var 'aux1795' order represents '1' with '7184'
-7183 7184 0
c Var 'aux1795' direct represents '1' with '7185'
7183 -7184 7185 0
-7185 7184 0
-7185 -7183 0
c Var 'aux1795' order represents '2' with '7186'
-7184 7186 0
c Var 'aux1795' direct represents '2' with '7187'
7184 -7186 7187 0
-7187 7186 0
-7187 -7184 0
c Var 'aux1795' direct represents '3' with '-7186'
7183 7185 7187 -7186 0
c Encoding variable: aux1796 with domain: int(0..4) (representing constraint (aux1791 + aux1793))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7188'
c Var 'aux1796' direct represents '0' with '7188'
c Var 'aux1796' order represents '1' with '7189'
-7188 7189 0
c Var 'aux1796' direct represents '1' with '7190'
7188 -7189 7190 0
-7190 7189 0
-7190 -7188 0
c Var 'aux1796' order represents '2' with '7191'
-7189 7191 0
c Var 'aux1796' direct represents '2' with '7192'
7189 -7191 7192 0
-7192 7191 0
-7192 -7189 0
c Var 'aux1796' order represents '3' with '7193'
-7191 7193 0
c Var 'aux1796' direct represents '3' with '7194'
7191 -7193 7194 0
-7194 7193 0
-7194 -7191 0
c Var 'aux1796' direct represents '4' with '-7193'
7188 7190 7192 7194 -7193 0
c Encoding variable: aux1797 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7195'
c Var 'aux1797' direct represents '0' with '7195'
c Var 'aux1797' order represents '1' with '7196'
-7195 7196 0
c Var 'aux1797' direct represents '1' with '7197'
7195 -7196 7197 0
-7197 7196 0
-7197 -7195 0
c Var 'aux1797' direct represents '2' with '-7196'
7195 7197 -7196 0
c Encoding variable: aux1798 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7198'
c Var 'aux1798' direct represents '0' with '7198'
c Var 'aux1798' order represents '1' with '7199'
-7198 7199 0
c Var 'aux1798' direct represents '1' with '7200'
7198 -7199 7200 0
-7200 7199 0
-7200 -7198 0
c Var 'aux1798' direct represents '2' with '-7199'
7198 7200 -7199 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7201'
c Var 'aux1799' direct represents '0' with '7201'
c Var 'aux1799' order represents '1' with '7202'
-7201 7202 0
c Var 'aux1799' direct represents '1' with '7203'
7201 -7202 7203 0
-7203 7202 0
-7203 -7201 0
c Var 'aux1799' direct represents '2' with '-7202'
7201 7203 -7202 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7204'
c Var 'aux1800' direct represents '0' with '7204'
c Var 'aux1800' order represents '1' with '7205'
-7204 7205 0
c Var 'aux1800' direct represents '1' with '7206'
7204 -7205 7206 0
-7206 7205 0
-7206 -7204 0
c Var 'aux1800' direct represents '2' with '-7205'
7204 7206 -7205 0
c Encoding variable: aux1801 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1800))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7207'
c Var 'aux1801' direct represents '0' with '7207'
c Var 'aux1801' order represents '1' with '7208'
-7207 7208 0
c Var 'aux1801' direct represents '1' with '7209'
7207 -7208 7209 0
-7209 7208 0
-7209 -7207 0
c Var 'aux1801' order represents '2' with '7210'
-7208 7210 0
c Var 'aux1801' direct represents '2' with '7211'
7208 -7210 7211 0
-7211 7210 0
-7211 -7208 0
c Var 'aux1801' direct represents '3' with '-7210'
7207 7209 7211 -7210 0
c Encoding variable: aux1802 with domain: int(0..4) (representing constraint (aux1797 + aux1799))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7212'
c Var 'aux1802' direct represents '0' with '7212'
c Var 'aux1802' order represents '1' with '7213'
-7212 7213 0
c Var 'aux1802' direct represents '1' with '7214'
7212 -7213 7214 0
-7214 7213 0
-7214 -7212 0
c Var 'aux1802' order represents '2' with '7215'
-7213 7215 0
c Var 'aux1802' direct represents '2' with '7216'
7213 -7215 7216 0
-7216 7215 0
-7216 -7213 0
c Var 'aux1802' order represents '3' with '7217'
-7215 7217 0
c Var 'aux1802' direct represents '3' with '7218'
7215 -7217 7218 0
-7218 7217 0
-7218 -7215 0
c Var 'aux1802' direct represents '4' with '-7217'
7212 7214 7216 7218 -7217 0
c Encoding variable: aux1803 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7219'
c Var 'aux1803' direct represents '0' with '7219'
c Var 'aux1803' order represents '1' with '7220'
-7219 7220 0
c Var 'aux1803' direct represents '1' with '7221'
7219 -7220 7221 0
-7221 7220 0
-7221 -7219 0
c Var 'aux1803' direct represents '2' with '-7220'
7219 7221 -7220 0
c Encoding variable: aux1804 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7222'
c Var 'aux1804' direct represents '0' with '7222'
c Var 'aux1804' order represents '1' with '7223'
-7222 7223 0
c Var 'aux1804' direct represents '1' with '7224'
7222 -7223 7224 0
-7224 7223 0
-7224 -7222 0
c Var 'aux1804' direct represents '2' with '-7223'
7222 7224 -7223 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7225'
c Var 'aux1805' direct represents '0' with '7225'
c Var 'aux1805' order represents '1' with '7226'
-7225 7226 0
c Var 'aux1805' direct represents '1' with '7227'
7225 -7226 7227 0
-7227 7226 0
-7227 -7225 0
c Var 'aux1805' direct represents '2' with '-7226'
7225 7227 -7226 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7228'
c Var 'aux1806' direct represents '0' with '7228'
c Var 'aux1806' order represents '1' with '7229'
-7228 7229 0
c Var 'aux1806' direct represents '1' with '7230'
7228 -7229 7230 0
-7230 7229 0
-7230 -7228 0
c Var 'aux1806' direct represents '2' with '-7229'
7228 7230 -7229 0
c Encoding variable: aux1807 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1806))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7231'
c Var 'aux1807' direct represents '0' with '7231'
c Var 'aux1807' order represents '1' with '7232'
-7231 7232 0
c Var 'aux1807' direct represents '1' with '7233'
7231 -7232 7233 0
-7233 7232 0
-7233 -7231 0
c Var 'aux1807' order represents '2' with '7234'
-7232 7234 0
c Var 'aux1807' direct represents '2' with '7235'
7232 -7234 7235 0
-7235 7234 0
-7235 -7232 0
c Var 'aux1807' direct represents '3' with '-7234'
7231 7233 7235 -7234 0
c Encoding variable: aux1808 with domain: int(0..4) (representing constraint (aux1803 + aux1805))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7236'
c Var 'aux1808' direct represents '0' with '7236'
c Var 'aux1808' order represents '1' with '7237'
-7236 7237 0
c Var 'aux1808' direct represents '1' with '7238'
7236 -7237 7238 0
-7238 7237 0
-7238 -7236 0
c Var 'aux1808' order represents '2' with '7239'
-7237 7239 0
c Var 'aux1808' direct represents '2' with '7240'
7237 -7239 7240 0
-7240 7239 0
-7240 -7237 0
c Var 'aux1808' order represents '3' with '7241'
-7239 7241 0
c Var 'aux1808' direct represents '3' with '7242'
7239 -7241 7242 0
-7242 7241 0
-7242 -7239 0
c Var 'aux1808' direct represents '4' with '-7241'
7236 7238 7240 7242 -7241 0
c Encoding variable: aux1809 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7243'
c Var 'aux1809' direct represents '0' with '7243'
c Var 'aux1809' order represents '1' with '7244'
-7243 7244 0
c Var 'aux1809' direct represents '1' with '7245'
7243 -7244 7245 0
-7245 7244 0
-7245 -7243 0
c Var 'aux1809' direct represents '2' with '-7244'
7243 7245 -7244 0
c Encoding variable: aux1810 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7246'
c Var 'aux1810' direct represents '0' with '7246'
c Var 'aux1810' order represents '1' with '7247'
-7246 7247 0
c Var 'aux1810' direct represents '1' with '7248'
7246 -7247 7248 0
-7248 7247 0
-7248 -7246 0
c Var 'aux1810' direct represents '2' with '-7247'
7246 7248 -7247 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7249'
c Var 'aux1811' direct represents '0' with '7249'
c Var 'aux1811' order represents '1' with '7250'
-7249 7250 0
c Var 'aux1811' direct represents '1' with '7251'
7249 -7250 7251 0
-7251 7250 0
-7251 -7249 0
c Var 'aux1811' direct represents '2' with '-7250'
7249 7251 -7250 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7252'
c Var 'aux1812' direct represents '0' with '7252'
c Var 'aux1812' order represents '1' with '7253'
-7252 7253 0
c Var 'aux1812' direct represents '1' with '7254'
7252 -7253 7254 0
-7254 7253 0
-7254 -7252 0
c Var 'aux1812' direct represents '2' with '-7253'
7252 7254 -7253 0
c Encoding variable: aux1813 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1812))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7255'
c Var 'aux1813' direct represents '0' with '7255'
c Var 'aux1813' order represents '1' with '7256'
-7255 7256 0
c Var 'aux1813' direct represents '1' with '7257'
7255 -7256 7257 0
-7257 7256 0
-7257 -7255 0
c Var 'aux1813' order represents '2' with '7258'
-7256 7258 0
c Var 'aux1813' direct represents '2' with '7259'
7256 -7258 7259 0
-7259 7258 0
-7259 -7256 0
c Var 'aux1813' direct represents '3' with '-7258'
7255 7257 7259 -7258 0
c Encoding variable: aux1814 with domain: int(0..4) (representing constraint (aux1809 + aux1811))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7260'
c Var 'aux1814' direct represents '0' with '7260'
c Var 'aux1814' order represents '1' with '7261'
-7260 7261 0
c Var 'aux1814' direct represents '1' with '7262'
7260 -7261 7262 0
-7262 7261 0
-7262 -7260 0
c Var 'aux1814' order represents '2' with '7263'
-7261 7263 0
c Var 'aux1814' direct represents '2' with '7264'
7261 -7263 7264 0
-7264 7263 0
-7264 -7261 0
c Var 'aux1814' order represents '3' with '7265'
-7263 7265 0
c Var 'aux1814' direct represents '3' with '7266'
7263 -7265 7266 0
-7266 7265 0
-7266 -7263 0
c Var 'aux1814' direct represents '4' with '-7265'
7260 7262 7264 7266 -7265 0
c Encoding variable: aux1815 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7267'
c Var 'aux1815' direct represents '0' with '7267'
c Var 'aux1815' order represents '1' with '7268'
-7267 7268 0
c Var 'aux1815' direct represents '1' with '7269'
7267 -7268 7269 0
-7269 7268 0
-7269 -7267 0
c Var 'aux1815' direct represents '2' with '-7268'
7267 7269 -7268 0
c Encoding variable: aux1816 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7270'
c Var 'aux1816' direct represents '0' with '7270'
c Var 'aux1816' order represents '1' with '7271'
-7270 7271 0
c Var 'aux1816' direct represents '1' with '7272'
7270 -7271 7272 0
-7272 7271 0
-7272 -7270 0
c Var 'aux1816' direct represents '2' with '-7271'
7270 7272 -7271 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7273'
c Var 'aux1817' direct represents '0' with '7273'
c Var 'aux1817' order represents '1' with '7274'
-7273 7274 0
c Var 'aux1817' direct represents '1' with '7275'
7273 -7274 7275 0
-7275 7274 0
-7275 -7273 0
c Var 'aux1817' direct represents '2' with '-7274'
7273 7275 -7274 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7276'
c Var 'aux1818' direct represents '0' with '7276'
c Var 'aux1818' order represents '1' with '7277'
-7276 7277 0
c Var 'aux1818' direct represents '1' with '7278'
7276 -7277 7278 0
-7278 7277 0
-7278 -7276 0
c Var 'aux1818' direct represents '2' with '-7277'
7276 7278 -7277 0
c Encoding variable: aux1819 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1818))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7279'
c Var 'aux1819' direct represents '0' with '7279'
c Var 'aux1819' order represents '1' with '7280'
-7279 7280 0
c Var 'aux1819' direct represents '1' with '7281'
7279 -7280 7281 0
-7281 7280 0
-7281 -7279 0
c Var 'aux1819' order represents '2' with '7282'
-7280 7282 0
c Var 'aux1819' direct represents '2' with '7283'
7280 -7282 7283 0
-7283 7282 0
-7283 -7280 0
c Var 'aux1819' direct represents '3' with '-7282'
7279 7281 7283 -7282 0
c Encoding variable: aux1820 with domain: int(0..4) (representing constraint (aux1815 + aux1817))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7284'
c Var 'aux1820' direct represents '0' with '7284'
c Var 'aux1820' order represents '1' with '7285'
-7284 7285 0
c Var 'aux1820' direct represents '1' with '7286'
7284 -7285 7286 0
-7286 7285 0
-7286 -7284 0
c Var 'aux1820' order represents '2' with '7287'
-7285 7287 0
c Var 'aux1820' direct represents '2' with '7288'
7285 -7287 7288 0
-7288 7287 0
-7288 -7285 0
c Var 'aux1820' order represents '3' with '7289'
-7287 7289 0
c Var 'aux1820' direct represents '3' with '7290'
7287 -7289 7290 0
-7290 7289 0
-7290 -7287 0
c Var 'aux1820' direct represents '4' with '-7289'
7284 7286 7288 7290 -7289 0
c Encoding variable: aux1821 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7291'
c Var 'aux1821' direct represents '0' with '7291'
c Var 'aux1821' order represents '1' with '7292'
-7291 7292 0
c Var 'aux1821' direct represents '1' with '7293'
7291 -7292 7293 0
-7293 7292 0
-7293 -7291 0
c Var 'aux1821' direct represents '2' with '-7292'
7291 7293 -7292 0
c Encoding variable: aux1822 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7294'
c Var 'aux1822' direct represents '0' with '7294'
c Var 'aux1822' order represents '1' with '7295'
-7294 7295 0
c Var 'aux1822' direct represents '1' with '7296'
7294 -7295 7296 0
-7296 7295 0
-7296 -7294 0
c Var 'aux1822' direct represents '2' with '-7295'
7294 7296 -7295 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7297'
c Var 'aux1823' direct represents '0' with '7297'
c Var 'aux1823' order represents '1' with '7298'
-7297 7298 0
c Var 'aux1823' direct represents '1' with '7299'
7297 -7298 7299 0
-7299 7298 0
-7299 -7297 0
c Var 'aux1823' direct represents '2' with '-7298'
7297 7299 -7298 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7300'
c Var 'aux1824' direct represents '0' with '7300'
c Var 'aux1824' order represents '1' with '7301'
-7300 7301 0
c Var 'aux1824' direct represents '1' with '7302'
7300 -7301 7302 0
-7302 7301 0
-7302 -7300 0
c Var 'aux1824' direct represents '2' with '-7301'
7300 7302 -7301 0
c Encoding variable: aux1825 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1824))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7303'
c Var 'aux1825' direct represents '0' with '7303'
c Var 'aux1825' order represents '1' with '7304'
-7303 7304 0
c Var 'aux1825' direct represents '1' with '7305'
7303 -7304 7305 0
-7305 7304 0
-7305 -7303 0
c Var 'aux1825' order represents '2' with '7306'
-7304 7306 0
c Var 'aux1825' direct represents '2' with '7307'
7304 -7306 7307 0
-7307 7306 0
-7307 -7304 0
c Var 'aux1825' direct represents '3' with '-7306'
7303 7305 7307 -7306 0
c Encoding variable: aux1826 with domain: int(0..4) (representing constraint (aux1821 + aux1823))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7308'
c Var 'aux1826' direct represents '0' with '7308'
c Var 'aux1826' order represents '1' with '7309'
-7308 7309 0
c Var 'aux1826' direct represents '1' with '7310'
7308 -7309 7310 0
-7310 7309 0
-7310 -7308 0
c Var 'aux1826' order represents '2' with '7311'
-7309 7311 0
c Var 'aux1826' direct represents '2' with '7312'
7309 -7311 7312 0
-7312 7311 0
-7312 -7309 0
c Var 'aux1826' order represents '3' with '7313'
-7311 7313 0
c Var 'aux1826' direct represents '3' with '7314'
7311 -7313 7314 0
-7314 7313 0
-7314 -7311 0
c Var 'aux1826' direct represents '4' with '-7313'
7308 7310 7312 7314 -7313 0
c Encoding variable: aux1827 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7315'
c Var 'aux1827' direct represents '0' with '7315'
c Var 'aux1827' order represents '1' with '7316'
-7315 7316 0
c Var 'aux1827' direct represents '1' with '7317'
7315 -7316 7317 0
-7317 7316 0
-7317 -7315 0
c Var 'aux1827' direct represents '2' with '-7316'
7315 7317 -7316 0
c Encoding variable: aux1828 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7318'
c Var 'aux1828' direct represents '0' with '7318'
c Var 'aux1828' order represents '1' with '7319'
-7318 7319 0
c Var 'aux1828' direct represents '1' with '7320'
7318 -7319 7320 0
-7320 7319 0
-7320 -7318 0
c Var 'aux1828' direct represents '2' with '-7319'
7318 7320 -7319 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7321'
c Var 'aux1829' direct represents '0' with '7321'
c Var 'aux1829' order represents '1' with '7322'
-7321 7322 0
c Var 'aux1829' direct represents '1' with '7323'
7321 -7322 7323 0
-7323 7322 0
-7323 -7321 0
c Var 'aux1829' direct represents '2' with '-7322'
7321 7323 -7322 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7324'
c Var 'aux1830' direct represents '0' with '7324'
c Var 'aux1830' order represents '1' with '7325'
-7324 7325 0
c Var 'aux1830' direct represents '1' with '7326'
7324 -7325 7326 0
-7326 7325 0
-7326 -7324 0
c Var 'aux1830' direct represents '2' with '-7325'
7324 7326 -7325 0
c Encoding variable: aux1831 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1830))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7327'
c Var 'aux1831' direct represents '0' with '7327'
c Var 'aux1831' order represents '1' with '7328'
-7327 7328 0
c Var 'aux1831' direct represents '1' with '7329'
7327 -7328 7329 0
-7329 7328 0
-7329 -7327 0
c Var 'aux1831' order represents '2' with '7330'
-7328 7330 0
c Var 'aux1831' direct represents '2' with '7331'
7328 -7330 7331 0
-7331 7330 0
-7331 -7328 0
c Var 'aux1831' direct represents '3' with '-7330'
7327 7329 7331 -7330 0
c Encoding variable: aux1832 with domain: int(0..4) (representing constraint (aux1827 + aux1829))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7332'
c Var 'aux1832' direct represents '0' with '7332'
c Var 'aux1832' order represents '1' with '7333'
-7332 7333 0
c Var 'aux1832' direct represents '1' with '7334'
7332 -7333 7334 0
-7334 7333 0
-7334 -7332 0
c Var 'aux1832' order represents '2' with '7335'
-7333 7335 0
c Var 'aux1832' direct represents '2' with '7336'
7333 -7335 7336 0
-7336 7335 0
-7336 -7333 0
c Var 'aux1832' order represents '3' with '7337'
-7335 7337 0
c Var 'aux1832' direct represents '3' with '7338'
7335 -7337 7338 0
-7338 7337 0
-7338 -7335 0
c Var 'aux1832' direct represents '4' with '-7337'
7332 7334 7336 7338 -7337 0
c Encoding variable: aux1833 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7339'
c Var 'aux1833' direct represents '0' with '7339'
c Var 'aux1833' order represents '1' with '7340'
-7339 7340 0
c Var 'aux1833' direct represents '1' with '7341'
7339 -7340 7341 0
-7341 7340 0
-7341 -7339 0
c Var 'aux1833' direct represents '2' with '-7340'
7339 7341 -7340 0
c Encoding variable: aux1834 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7342'
c Var 'aux1834' direct represents '0' with '7342'
c Var 'aux1834' order represents '1' with '7343'
-7342 7343 0
c Var 'aux1834' direct represents '1' with '7344'
7342 -7343 7344 0
-7344 7343 0
-7344 -7342 0
c Var 'aux1834' direct represents '2' with '-7343'
7342 7344 -7343 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7345'
c Var 'aux1835' direct represents '0' with '7345'
c Var 'aux1835' order represents '1' with '7346'
-7345 7346 0
c Var 'aux1835' direct represents '1' with '7347'
7345 -7346 7347 0
-7347 7346 0
-7347 -7345 0
c Var 'aux1835' direct represents '2' with '-7346'
7345 7347 -7346 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7348'
c Var 'aux1836' direct represents '0' with '7348'
c Var 'aux1836' order represents '1' with '7349'
-7348 7349 0
c Var 'aux1836' direct represents '1' with '7350'
7348 -7349 7350 0
-7350 7349 0
-7350 -7348 0
c Var 'aux1836' direct represents '2' with '-7349'
7348 7350 -7349 0
c Encoding variable: aux1837 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1836))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7351'
c Var 'aux1837' direct represents '0' with '7351'
c Var 'aux1837' order represents '1' with '7352'
-7351 7352 0
c Var 'aux1837' direct represents '1' with '7353'
7351 -7352 7353 0
-7353 7352 0
-7353 -7351 0
c Var 'aux1837' order represents '2' with '7354'
-7352 7354 0
c Var 'aux1837' direct represents '2' with '7355'
7352 -7354 7355 0
-7355 7354 0
-7355 -7352 0
c Var 'aux1837' direct represents '3' with '-7354'
7351 7353 7355 -7354 0
c Encoding variable: aux1838 with domain: int(0..4) (representing constraint (aux1833 + aux1835))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7356'
c Var 'aux1838' direct represents '0' with '7356'
c Var 'aux1838' order represents '1' with '7357'
-7356 7357 0
c Var 'aux1838' direct represents '1' with '7358'
7356 -7357 7358 0
-7358 7357 0
-7358 -7356 0
c Var 'aux1838' order represents '2' with '7359'
-7357 7359 0
c Var 'aux1838' direct represents '2' with '7360'
7357 -7359 7360 0
-7360 7359 0
-7360 -7357 0
c Var 'aux1838' order represents '3' with '7361'
-7359 7361 0
c Var 'aux1838' direct represents '3' with '7362'
7359 -7361 7362 0
-7362 7361 0
-7362 -7359 0
c Var 'aux1838' direct represents '4' with '-7361'
7356 7358 7360 7362 -7361 0
c Encoding variable: aux1839 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7363'
c Var 'aux1839' direct represents '0' with '7363'
c Var 'aux1839' order represents '1' with '7364'
-7363 7364 0
c Var 'aux1839' direct represents '1' with '7365'
7363 -7364 7365 0
-7365 7364 0
-7365 -7363 0
c Var 'aux1839' direct represents '2' with '-7364'
7363 7365 -7364 0
c Encoding variable: aux1840 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7366'
c Var 'aux1840' direct represents '0' with '7366'
c Var 'aux1840' order represents '1' with '7367'
-7366 7367 0
c Var 'aux1840' direct represents '1' with '7368'
7366 -7367 7368 0
-7368 7367 0
-7368 -7366 0
c Var 'aux1840' direct represents '2' with '-7367'
7366 7368 -7367 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7369'
c Var 'aux1841' direct represents '0' with '7369'
c Var 'aux1841' order represents '1' with '7370'
-7369 7370 0
c Var 'aux1841' direct represents '1' with '7371'
7369 -7370 7371 0
-7371 7370 0
-7371 -7369 0
c Var 'aux1841' direct represents '2' with '-7370'
7369 7371 -7370 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7372'
c Var 'aux1842' direct represents '0' with '7372'
c Var 'aux1842' order represents '1' with '7373'
-7372 7373 0
c Var 'aux1842' direct represents '1' with '7374'
7372 -7373 7374 0
-7374 7373 0
-7374 -7372 0
c Var 'aux1842' direct represents '2' with '-7373'
7372 7374 -7373 0
c Encoding variable: aux1843 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1842))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7375'
c Var 'aux1843' direct represents '0' with '7375'
c Var 'aux1843' order represents '1' with '7376'
-7375 7376 0
c Var 'aux1843' direct represents '1' with '7377'
7375 -7376 7377 0
-7377 7376 0
-7377 -7375 0
c Var 'aux1843' order represents '2' with '7378'
-7376 7378 0
c Var 'aux1843' direct represents '2' with '7379'
7376 -7378 7379 0
-7379 7378 0
-7379 -7376 0
c Var 'aux1843' direct represents '3' with '-7378'
7375 7377 7379 -7378 0
c Encoding variable: aux1844 with domain: int(0..4) (representing constraint (aux1839 + aux1841))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7380'
c Var 'aux1844' direct represents '0' with '7380'
c Var 'aux1844' order represents '1' with '7381'
-7380 7381 0
c Var 'aux1844' direct represents '1' with '7382'
7380 -7381 7382 0
-7382 7381 0
-7382 -7380 0
c Var 'aux1844' order represents '2' with '7383'
-7381 7383 0
c Var 'aux1844' direct represents '2' with '7384'
7381 -7383 7384 0
-7384 7383 0
-7384 -7381 0
c Var 'aux1844' order represents '3' with '7385'
-7383 7385 0
c Var 'aux1844' direct represents '3' with '7386'
7383 -7385 7386 0
-7386 7385 0
-7386 -7383 0
c Var 'aux1844' direct represents '4' with '-7385'
7380 7382 7384 7386 -7385 0
c Encoding variable: aux1845 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7387'
c Var 'aux1845' direct represents '0' with '7387'
c Var 'aux1845' order represents '1' with '7388'
-7387 7388 0
c Var 'aux1845' direct represents '1' with '7389'
7387 -7388 7389 0
-7389 7388 0
-7389 -7387 0
c Var 'aux1845' direct represents '2' with '-7388'
7387 7389 -7388 0
c Encoding variable: aux1846 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7390'
c Var 'aux1846' direct represents '0' with '7390'
c Var 'aux1846' order represents '1' with '7391'
-7390 7391 0
c Var 'aux1846' direct represents '1' with '7392'
7390 -7391 7392 0
-7392 7391 0
-7392 -7390 0
c Var 'aux1846' direct represents '2' with '-7391'
7390 7392 -7391 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7393'
c Var 'aux1847' direct represents '0' with '7393'
c Var 'aux1847' order represents '1' with '7394'
-7393 7394 0
c Var 'aux1847' direct represents '1' with '7395'
7393 -7394 7395 0
-7395 7394 0
-7395 -7393 0
c Var 'aux1847' direct represents '2' with '-7394'
7393 7395 -7394 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7396'
c Var 'aux1848' direct represents '0' with '7396'
c Var 'aux1848' order represents '1' with '7397'
-7396 7397 0
c Var 'aux1848' direct represents '1' with '7398'
7396 -7397 7398 0
-7398 7397 0
-7398 -7396 0
c Var 'aux1848' direct represents '2' with '-7397'
7396 7398 -7397 0
c Encoding variable: aux1849 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1848))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7399'
c Var 'aux1849' direct represents '0' with '7399'
c Var 'aux1849' order represents '1' with '7400'
-7399 7400 0
c Var 'aux1849' direct represents '1' with '7401'
7399 -7400 7401 0
-7401 7400 0
-7401 -7399 0
c Var 'aux1849' order represents '2' with '7402'
-7400 7402 0
c Var 'aux1849' direct represents '2' with '7403'
7400 -7402 7403 0
-7403 7402 0
-7403 -7400 0
c Var 'aux1849' direct represents '3' with '-7402'
7399 7401 7403 -7402 0
c Encoding variable: aux1850 with domain: int(0..4) (representing constraint (aux1845 + aux1847))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7404'
c Var 'aux1850' direct represents '0' with '7404'
c Var 'aux1850' order represents '1' with '7405'
-7404 7405 0
c Var 'aux1850' direct represents '1' with '7406'
7404 -7405 7406 0
-7406 7405 0
-7406 -7404 0
c Var 'aux1850' order represents '2' with '7407'
-7405 7407 0
c Var 'aux1850' direct represents '2' with '7408'
7405 -7407 7408 0
-7408 7407 0
-7408 -7405 0
c Var 'aux1850' order represents '3' with '7409'
-7407 7409 0
c Var 'aux1850' direct represents '3' with '7410'
7407 -7409 7410 0
-7410 7409 0
-7410 -7407 0
c Var 'aux1850' direct represents '4' with '-7409'
7404 7406 7408 7410 -7409 0
c Encoding variable: aux1851 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7411'
c Var 'aux1851' direct represents '0' with '7411'
c Var 'aux1851' order represents '1' with '7412'
-7411 7412 0
c Var 'aux1851' direct represents '1' with '7413'
7411 -7412 7413 0
-7413 7412 0
-7413 -7411 0
c Var 'aux1851' direct represents '2' with '-7412'
7411 7413 -7412 0
c Encoding variable: aux1852 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7414'
c Var 'aux1852' direct represents '0' with '7414'
c Var 'aux1852' order represents '1' with '7415'
-7414 7415 0
c Var 'aux1852' direct represents '1' with '7416'
7414 -7415 7416 0
-7416 7415 0
-7416 -7414 0
c Var 'aux1852' direct represents '2' with '-7415'
7414 7416 -7415 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7417'
c Var 'aux1853' direct represents '0' with '7417'
c Var 'aux1853' order represents '1' with '7418'
-7417 7418 0
c Var 'aux1853' direct represents '1' with '7419'
7417 -7418 7419 0
-7419 7418 0
-7419 -7417 0
c Var 'aux1853' direct represents '2' with '-7418'
7417 7419 -7418 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7420'
c Var 'aux1854' direct represents '0' with '7420'
c Var 'aux1854' order represents '1' with '7421'
-7420 7421 0
c Var 'aux1854' direct represents '1' with '7422'
7420 -7421 7422 0
-7422 7421 0
-7422 -7420 0
c Var 'aux1854' direct represents '2' with '-7421'
7420 7422 -7421 0
c Encoding variable: aux1855 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1854))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7423'
c Var 'aux1855' direct represents '0' with '7423'
c Var 'aux1855' order represents '1' with '7424'
-7423 7424 0
c Var 'aux1855' direct represents '1' with '7425'
7423 -7424 7425 0
-7425 7424 0
-7425 -7423 0
c Var 'aux1855' order represents '2' with '7426'
-7424 7426 0
c Var 'aux1855' direct represents '2' with '7427'
7424 -7426 7427 0
-7427 7426 0
-7427 -7424 0
c Var 'aux1855' direct represents '3' with '-7426'
7423 7425 7427 -7426 0
c Encoding variable: aux1856 with domain: int(0..4) (representing constraint (aux1851 + aux1853))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7428'
c Var 'aux1856' direct represents '0' with '7428'
c Var 'aux1856' order represents '1' with '7429'
-7428 7429 0
c Var 'aux1856' direct represents '1' with '7430'
7428 -7429 7430 0
-7430 7429 0
-7430 -7428 0
c Var 'aux1856' order represents '2' with '7431'
-7429 7431 0
c Var 'aux1856' direct represents '2' with '7432'
7429 -7431 7432 0
-7432 7431 0
-7432 -7429 0
c Var 'aux1856' order represents '3' with '7433'
-7431 7433 0
c Var 'aux1856' direct represents '3' with '7434'
7431 -7433 7434 0
-7434 7433 0
-7434 -7431 0
c Var 'aux1856' direct represents '4' with '-7433'
7428 7430 7432 7434 -7433 0
c Encoding variable: aux1857 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7435'
c Var 'aux1857' direct represents '0' with '7435'
c Var 'aux1857' order represents '1' with '7436'
-7435 7436 0
c Var 'aux1857' direct represents '1' with '7437'
7435 -7436 7437 0
-7437 7436 0
-7437 -7435 0
c Var 'aux1857' direct represents '2' with '-7436'
7435 7437 -7436 0
c Encoding variable: aux1858 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7438'
c Var 'aux1858' direct represents '0' with '7438'
c Var 'aux1858' order represents '1' with '7439'
-7438 7439 0
c Var 'aux1858' direct represents '1' with '7440'
7438 -7439 7440 0
-7440 7439 0
-7440 -7438 0
c Var 'aux1858' direct represents '2' with '-7439'
7438 7440 -7439 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7441'
c Var 'aux1859' direct represents '0' with '7441'
c Var 'aux1859' order represents '1' with '7442'
-7441 7442 0
c Var 'aux1859' direct represents '1' with '7443'
7441 -7442 7443 0
-7443 7442 0
-7443 -7441 0
c Var 'aux1859' direct represents '2' with '-7442'
7441 7443 -7442 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7444'
c Var 'aux1860' direct represents '0' with '7444'
c Var 'aux1860' order represents '1' with '7445'
-7444 7445 0
c Var 'aux1860' direct represents '1' with '7446'
7444 -7445 7446 0
-7446 7445 0
-7446 -7444 0
c Var 'aux1860' direct represents '2' with '-7445'
7444 7446 -7445 0
c Encoding variable: aux1861 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1860))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7447'
c Var 'aux1861' direct represents '0' with '7447'
c Var 'aux1861' order represents '1' with '7448'
-7447 7448 0
c Var 'aux1861' direct represents '1' with '7449'
7447 -7448 7449 0
-7449 7448 0
-7449 -7447 0
c Var 'aux1861' order represents '2' with '7450'
-7448 7450 0
c Var 'aux1861' direct represents '2' with '7451'
7448 -7450 7451 0
-7451 7450 0
-7451 -7448 0
c Var 'aux1861' direct represents '3' with '-7450'
7447 7449 7451 -7450 0
c Encoding variable: aux1862 with domain: int(0..4) (representing constraint (aux1857 + aux1859))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7452'
c Var 'aux1862' direct represents '0' with '7452'
c Var 'aux1862' order represents '1' with '7453'
-7452 7453 0
c Var 'aux1862' direct represents '1' with '7454'
7452 -7453 7454 0
-7454 7453 0
-7454 -7452 0
c Var 'aux1862' order represents '2' with '7455'
-7453 7455 0
c Var 'aux1862' direct represents '2' with '7456'
7453 -7455 7456 0
-7456 7455 0
-7456 -7453 0
c Var 'aux1862' order represents '3' with '7457'
-7455 7457 0
c Var 'aux1862' direct represents '3' with '7458'
7455 -7457 7458 0
-7458 7457 0
-7458 -7455 0
c Var 'aux1862' direct represents '4' with '-7457'
7452 7454 7456 7458 -7457 0
c Encoding variable: aux1863 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7459'
c Var 'aux1863' direct represents '0' with '7459'
c Var 'aux1863' order represents '1' with '7460'
-7459 7460 0
c Var 'aux1863' direct represents '1' with '7461'
7459 -7460 7461 0
-7461 7460 0
-7461 -7459 0
c Var 'aux1863' direct represents '2' with '-7460'
7459 7461 -7460 0
c Encoding variable: aux1864 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7462'
c Var 'aux1864' direct represents '0' with '7462'
c Var 'aux1864' order represents '1' with '7463'
-7462 7463 0
c Var 'aux1864' direct represents '1' with '7464'
7462 -7463 7464 0
-7464 7463 0
-7464 -7462 0
c Var 'aux1864' direct represents '2' with '-7463'
7462 7464 -7463 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7465'
c Var 'aux1865' direct represents '0' with '7465'
c Var 'aux1865' order represents '1' with '7466'
-7465 7466 0
c Var 'aux1865' direct represents '1' with '7467'
7465 -7466 7467 0
-7467 7466 0
-7467 -7465 0
c Var 'aux1865' direct represents '2' with '-7466'
7465 7467 -7466 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7468'
c Var 'aux1866' direct represents '0' with '7468'
c Var 'aux1866' order represents '1' with '7469'
-7468 7469 0
c Var 'aux1866' direct represents '1' with '7470'
7468 -7469 7470 0
-7470 7469 0
-7470 -7468 0
c Var 'aux1866' direct represents '2' with '-7469'
7468 7470 -7469 0
c Encoding variable: aux1867 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1866))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7471'
c Var 'aux1867' direct represents '0' with '7471'
c Var 'aux1867' order represents '1' with '7472'
-7471 7472 0
c Var 'aux1867' direct represents '1' with '7473'
7471 -7472 7473 0
-7473 7472 0
-7473 -7471 0
c Var 'aux1867' order represents '2' with '7474'
-7472 7474 0
c Var 'aux1867' direct represents '2' with '7475'
7472 -7474 7475 0
-7475 7474 0
-7475 -7472 0
c Var 'aux1867' direct represents '3' with '-7474'
7471 7473 7475 -7474 0
c Encoding variable: aux1868 with domain: int(0..4) (representing constraint (aux1863 + aux1865))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7476'
c Var 'aux1868' direct represents '0' with '7476'
c Var 'aux1868' order represents '1' with '7477'
-7476 7477 0
c Var 'aux1868' direct represents '1' with '7478'
7476 -7477 7478 0
-7478 7477 0
-7478 -7476 0
c Var 'aux1868' order represents '2' with '7479'
-7477 7479 0
c Var 'aux1868' direct represents '2' with '7480'
7477 -7479 7480 0
-7480 7479 0
-7480 -7477 0
c Var 'aux1868' order represents '3' with '7481'
-7479 7481 0
c Var 'aux1868' direct represents '3' with '7482'
7479 -7481 7482 0
-7482 7481 0
-7482 -7479 0
c Var 'aux1868' direct represents '4' with '-7481'
7476 7478 7480 7482 -7481 0
c Encoding variable: aux1869 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7483'
c Var 'aux1869' direct represents '0' with '7483'
c Var 'aux1869' order represents '1' with '7484'
-7483 7484 0
c Var 'aux1869' direct represents '1' with '7485'
7483 -7484 7485 0
-7485 7484 0
-7485 -7483 0
c Var 'aux1869' direct represents '2' with '-7484'
7483 7485 -7484 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7486'
c Var 'aux1870' direct represents '0' with '7486'
c Var 'aux1870' order represents '1' with '7487'
-7486 7487 0
c Var 'aux1870' direct represents '1' with '7488'
7486 -7487 7488 0
-7488 7487 0
-7488 -7486 0
c Var 'aux1870' direct represents '2' with '-7487'
7486 7488 -7487 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7489'
c Var 'aux1871' direct represents '0' with '7489'
c Var 'aux1871' order represents '1' with '7490'
-7489 7490 0
c Var 'aux1871' direct represents '1' with '7491'
7489 -7490 7491 0
-7491 7490 0
-7491 -7489 0
c Var 'aux1871' direct represents '2' with '-7490'
7489 7491 -7490 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7492'
c Var 'aux1872' direct represents '0' with '7492'
c Var 'aux1872' order represents '1' with '7493'
-7492 7493 0
c Var 'aux1872' direct represents '1' with '7494'
7492 -7493 7494 0
-7494 7493 0
-7494 -7492 0
c Var 'aux1872' direct represents '2' with '-7493'
7492 7494 -7493 0
c Encoding variable: aux1873 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1872))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7495'
c Var 'aux1873' direct represents '0' with '7495'
c Var 'aux1873' order represents '1' with '7496'
-7495 7496 0
c Var 'aux1873' direct represents '1' with '7497'
7495 -7496 7497 0
-7497 7496 0
-7497 -7495 0
c Var 'aux1873' order represents '2' with '7498'
-7496 7498 0
c Var 'aux1873' direct represents '2' with '7499'
7496 -7498 7499 0
-7499 7498 0
-7499 -7496 0
c Var 'aux1873' direct represents '3' with '-7498'
7495 7497 7499 -7498 0
c Encoding variable: aux1874 with domain: int(0..4) (representing constraint (aux1869 + aux1871))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7500'
c Var 'aux1874' direct represents '0' with '7500'
c Var 'aux1874' order represents '1' with '7501'
-7500 7501 0
c Var 'aux1874' direct represents '1' with '7502'
7500 -7501 7502 0
-7502 7501 0
-7502 -7500 0
c Var 'aux1874' order represents '2' with '7503'
-7501 7503 0
c Var 'aux1874' direct represents '2' with '7504'
7501 -7503 7504 0
-7504 7503 0
-7504 -7501 0
c Var 'aux1874' order represents '3' with '7505'
-7503 7505 0
c Var 'aux1874' direct represents '3' with '7506'
7503 -7505 7506 0
-7506 7505 0
-7506 -7503 0
c Var 'aux1874' direct represents '4' with '-7505'
7500 7502 7504 7506 -7505 0
c Encoding variable: aux1875 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7507'
c Var 'aux1875' direct represents '0' with '7507'
c Var 'aux1875' order represents '1' with '7508'
-7507 7508 0
c Var 'aux1875' direct represents '1' with '7509'
7507 -7508 7509 0
-7509 7508 0
-7509 -7507 0
c Var 'aux1875' direct represents '2' with '-7508'
7507 7509 -7508 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7510'
c Var 'aux1876' direct represents '0' with '7510'
c Var 'aux1876' order represents '1' with '7511'
-7510 7511 0
c Var 'aux1876' direct represents '1' with '7512'
7510 -7511 7512 0
-7512 7511 0
-7512 -7510 0
c Var 'aux1876' direct represents '2' with '-7511'
7510 7512 -7511 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7513'
c Var 'aux1877' direct represents '0' with '7513'
c Var 'aux1877' order represents '1' with '7514'
-7513 7514 0
c Var 'aux1877' direct represents '1' with '7515'
7513 -7514 7515 0
-7515 7514 0
-7515 -7513 0
c Var 'aux1877' direct represents '2' with '-7514'
7513 7515 -7514 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7516'
c Var 'aux1878' direct represents '0' with '7516'
c Var 'aux1878' order represents '1' with '7517'
-7516 7517 0
c Var 'aux1878' direct represents '1' with '7518'
7516 -7517 7518 0
-7518 7517 0
-7518 -7516 0
c Var 'aux1878' direct represents '2' with '-7517'
7516 7518 -7517 0
c Encoding variable: aux1879 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1878))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7519'
c Var 'aux1879' direct represents '0' with '7519'
c Var 'aux1879' order represents '1' with '7520'
-7519 7520 0
c Var 'aux1879' direct represents '1' with '7521'
7519 -7520 7521 0
-7521 7520 0
-7521 -7519 0
c Var 'aux1879' order represents '2' with '7522'
-7520 7522 0
c Var 'aux1879' direct represents '2' with '7523'
7520 -7522 7523 0
-7523 7522 0
-7523 -7520 0
c Var 'aux1879' direct represents '3' with '-7522'
7519 7521 7523 -7522 0
c Encoding variable: aux1880 with domain: int(0..4) (representing constraint (aux1875 + aux1877))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7524'
c Var 'aux1880' direct represents '0' with '7524'
c Var 'aux1880' order represents '1' with '7525'
-7524 7525 0
c Var 'aux1880' direct represents '1' with '7526'
7524 -7525 7526 0
-7526 7525 0
-7526 -7524 0
c Var 'aux1880' order represents '2' with '7527'
-7525 7527 0
c Var 'aux1880' direct represents '2' with '7528'
7525 -7527 7528 0
-7528 7527 0
-7528 -7525 0
c Var 'aux1880' order represents '3' with '7529'
-7527 7529 0
c Var 'aux1880' direct represents '3' with '7530'
7527 -7529 7530 0
-7530 7529 0
-7530 -7527 0
c Var 'aux1880' direct represents '4' with '-7529'
7524 7526 7528 7530 -7529 0
c Encoding variable: aux1881 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7531'
c Var 'aux1881' direct represents '0' with '7531'
c Var 'aux1881' order represents '1' with '7532'
-7531 7532 0
c Var 'aux1881' direct represents '1' with '7533'
7531 -7532 7533 0
-7533 7532 0
-7533 -7531 0
c Var 'aux1881' direct represents '2' with '-7532'
7531 7533 -7532 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7534'
c Var 'aux1882' direct represents '0' with '7534'
c Var 'aux1882' order represents '1' with '7535'
-7534 7535 0
c Var 'aux1882' direct represents '1' with '7536'
7534 -7535 7536 0
-7536 7535 0
-7536 -7534 0
c Var 'aux1882' direct represents '2' with '-7535'
7534 7536 -7535 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7537'
c Var 'aux1883' direct represents '0' with '7537'
c Var 'aux1883' order represents '1' with '7538'
-7537 7538 0
c Var 'aux1883' direct represents '1' with '7539'
7537 -7538 7539 0
-7539 7538 0
-7539 -7537 0
c Var 'aux1883' direct represents '2' with '-7538'
7537 7539 -7538 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7540'
c Var 'aux1884' direct represents '0' with '7540'
c Var 'aux1884' order represents '1' with '7541'
-7540 7541 0
c Var 'aux1884' direct represents '1' with '7542'
7540 -7541 7542 0
-7542 7541 0
-7542 -7540 0
c Var 'aux1884' direct represents '2' with '-7541'
7540 7542 -7541 0
c Encoding variable: aux1885 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1884))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7543'
c Var 'aux1885' direct represents '0' with '7543'
c Var 'aux1885' order represents '1' with '7544'
-7543 7544 0
c Var 'aux1885' direct represents '1' with '7545'
7543 -7544 7545 0
-7545 7544 0
-7545 -7543 0
c Var 'aux1885' order represents '2' with '7546'
-7544 7546 0
c Var 'aux1885' direct represents '2' with '7547'
7544 -7546 7547 0
-7547 7546 0
-7547 -7544 0
c Var 'aux1885' direct represents '3' with '-7546'
7543 7545 7547 -7546 0
c Encoding variable: aux1886 with domain: int(0..4) (representing constraint (aux1881 + aux1883))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7548'
c Var 'aux1886' direct represents '0' with '7548'
c Var 'aux1886' order represents '1' with '7549'
-7548 7549 0
c Var 'aux1886' direct represents '1' with '7550'
7548 -7549 7550 0
-7550 7549 0
-7550 -7548 0
c Var 'aux1886' order represents '2' with '7551'
-7549 7551 0
c Var 'aux1886' direct represents '2' with '7552'
7549 -7551 7552 0
-7552 7551 0
-7552 -7549 0
c Var 'aux1886' order represents '3' with '7553'
-7551 7553 0
c Var 'aux1886' direct represents '3' with '7554'
7551 -7553 7554 0
-7554 7553 0
-7554 -7551 0
c Var 'aux1886' direct represents '4' with '-7553'
7548 7550 7552 7554 -7553 0
c Encoding variable: aux1887 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7555'
c Var 'aux1887' direct represents '0' with '7555'
c Var 'aux1887' order represents '1' with '7556'
-7555 7556 0
c Var 'aux1887' direct represents '1' with '7557'
7555 -7556 7557 0
-7557 7556 0
-7557 -7555 0
c Var 'aux1887' direct represents '2' with '-7556'
7555 7557 -7556 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7558'
c Var 'aux1888' direct represents '0' with '7558'
c Var 'aux1888' order represents '1' with '7559'
-7558 7559 0
c Var 'aux1888' direct represents '1' with '7560'
7558 -7559 7560 0
-7560 7559 0
-7560 -7558 0
c Var 'aux1888' direct represents '2' with '-7559'
7558 7560 -7559 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7561'
c Var 'aux1889' direct represents '0' with '7561'
c Var 'aux1889' order represents '1' with '7562'
-7561 7562 0
c Var 'aux1889' direct represents '1' with '7563'
7561 -7562 7563 0
-7563 7562 0
-7563 -7561 0
c Var 'aux1889' direct represents '2' with '-7562'
7561 7563 -7562 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7564'
c Var 'aux1890' direct represents '0' with '7564'
c Var 'aux1890' order represents '1' with '7565'
-7564 7565 0
c Var 'aux1890' direct represents '1' with '7566'
7564 -7565 7566 0
-7566 7565 0
-7566 -7564 0
c Var 'aux1890' direct represents '2' with '-7565'
7564 7566 -7565 0
c Encoding variable: aux1891 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1890))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7567'
c Var 'aux1891' direct represents '0' with '7567'
c Var 'aux1891' order represents '1' with '7568'
-7567 7568 0
c Var 'aux1891' direct represents '1' with '7569'
7567 -7568 7569 0
-7569 7568 0
-7569 -7567 0
c Var 'aux1891' order represents '2' with '7570'
-7568 7570 0
c Var 'aux1891' direct represents '2' with '7571'
7568 -7570 7571 0
-7571 7570 0
-7571 -7568 0
c Var 'aux1891' direct represents '3' with '-7570'
7567 7569 7571 -7570 0
c Encoding variable: aux1892 with domain: int(0..4) (representing constraint (aux1887 + aux1889))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7572'
c Var 'aux1892' direct represents '0' with '7572'
c Var 'aux1892' order represents '1' with '7573'
-7572 7573 0
c Var 'aux1892' direct represents '1' with '7574'
7572 -7573 7574 0
-7574 7573 0
-7574 -7572 0
c Var 'aux1892' order represents '2' with '7575'
-7573 7575 0
c Var 'aux1892' direct represents '2' with '7576'
7573 -7575 7576 0
-7576 7575 0
-7576 -7573 0
c Var 'aux1892' order represents '3' with '7577'
-7575 7577 0
c Var 'aux1892' direct represents '3' with '7578'
7575 -7577 7578 0
-7578 7577 0
-7578 -7575 0
c Var 'aux1892' direct represents '4' with '-7577'
7572 7574 7576 7578 -7577 0
c Encoding variable: aux1893 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7579'
c Var 'aux1893' direct represents '0' with '7579'
c Var 'aux1893' order represents '1' with '7580'
-7579 7580 0
c Var 'aux1893' direct represents '1' with '7581'
7579 -7580 7581 0
-7581 7580 0
-7581 -7579 0
c Var 'aux1893' direct represents '2' with '-7580'
7579 7581 -7580 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7582'
c Var 'aux1894' direct represents '0' with '7582'
c Var 'aux1894' order represents '1' with '7583'
-7582 7583 0
c Var 'aux1894' direct represents '1' with '7584'
7582 -7583 7584 0
-7584 7583 0
-7584 -7582 0
c Var 'aux1894' direct represents '2' with '-7583'
7582 7584 -7583 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7585'
c Var 'aux1895' direct represents '0' with '7585'
c Var 'aux1895' order represents '1' with '7586'
-7585 7586 0
c Var 'aux1895' direct represents '1' with '7587'
7585 -7586 7587 0
-7587 7586 0
-7587 -7585 0
c Var 'aux1895' direct represents '2' with '-7586'
7585 7587 -7586 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7588'
c Var 'aux1896' direct represents '0' with '7588'
c Var 'aux1896' order represents '1' with '7589'
-7588 7589 0
c Var 'aux1896' direct represents '1' with '7590'
7588 -7589 7590 0
-7590 7589 0
-7590 -7588 0
c Var 'aux1896' direct represents '2' with '-7589'
7588 7590 -7589 0
c Encoding variable: aux1897 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1896))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7591'
c Var 'aux1897' direct represents '0' with '7591'
c Var 'aux1897' order represents '1' with '7592'
-7591 7592 0
c Var 'aux1897' direct represents '1' with '7593'
7591 -7592 7593 0
-7593 7592 0
-7593 -7591 0
c Var 'aux1897' order represents '2' with '7594'
-7592 7594 0
c Var 'aux1897' direct represents '2' with '7595'
7592 -7594 7595 0
-7595 7594 0
-7595 -7592 0
c Var 'aux1897' direct represents '3' with '-7594'
7591 7593 7595 -7594 0
c Encoding variable: aux1898 with domain: int(0..4) (representing constraint (aux1893 + aux1895))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7596'
c Var 'aux1898' direct represents '0' with '7596'
c Var 'aux1898' order represents '1' with '7597'
-7596 7597 0
c Var 'aux1898' direct represents '1' with '7598'
7596 -7597 7598 0
-7598 7597 0
-7598 -7596 0
c Var 'aux1898' order represents '2' with '7599'
-7597 7599 0
c Var 'aux1898' direct represents '2' with '7600'
7597 -7599 7600 0
-7600 7599 0
-7600 -7597 0
c Var 'aux1898' order represents '3' with '7601'
-7599 7601 0
c Var 'aux1898' direct represents '3' with '7602'
7599 -7601 7602 0
-7602 7601 0
-7602 -7599 0
c Var 'aux1898' direct represents '4' with '-7601'
7596 7598 7600 7602 -7601 0
c Encoding variable: aux1899 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7603'
c Var 'aux1899' direct represents '0' with '7603'
c Var 'aux1899' order represents '1' with '7604'
-7603 7604 0
c Var 'aux1899' direct represents '1' with '7605'
7603 -7604 7605 0
-7605 7604 0
-7605 -7603 0
c Var 'aux1899' direct represents '2' with '-7604'
7603 7605 -7604 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7606'
c Var 'aux1900' direct represents '0' with '7606'
c Var 'aux1900' order represents '1' with '7607'
-7606 7607 0
c Var 'aux1900' direct represents '1' with '7608'
7606 -7607 7608 0
-7608 7607 0
-7608 -7606 0
c Var 'aux1900' direct represents '2' with '-7607'
7606 7608 -7607 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7609'
c Var 'aux1901' direct represents '0' with '7609'
c Var 'aux1901' order represents '1' with '7610'
-7609 7610 0
c Var 'aux1901' direct represents '1' with '7611'
7609 -7610 7611 0
-7611 7610 0
-7611 -7609 0
c Var 'aux1901' direct represents '2' with '-7610'
7609 7611 -7610 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7612'
c Var 'aux1902' direct represents '0' with '7612'
c Var 'aux1902' order represents '1' with '7613'
-7612 7613 0
c Var 'aux1902' direct represents '1' with '7614'
7612 -7613 7614 0
-7614 7613 0
-7614 -7612 0
c Var 'aux1902' direct represents '2' with '-7613'
7612 7614 -7613 0
c Encoding variable: aux1903 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1902))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7615'
c Var 'aux1903' direct represents '0' with '7615'
c Var 'aux1903' order represents '1' with '7616'
-7615 7616 0
c Var 'aux1903' direct represents '1' with '7617'
7615 -7616 7617 0
-7617 7616 0
-7617 -7615 0
c Var 'aux1903' order represents '2' with '7618'
-7616 7618 0
c Var 'aux1903' direct represents '2' with '7619'
7616 -7618 7619 0
-7619 7618 0
-7619 -7616 0
c Var 'aux1903' direct represents '3' with '-7618'
7615 7617 7619 -7618 0
c Encoding variable: aux1904 with domain: int(0..4) (representing constraint (aux1899 + aux1901))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7620'
c Var 'aux1904' direct represents '0' with '7620'
c Var 'aux1904' order represents '1' with '7621'
-7620 7621 0
c Var 'aux1904' direct represents '1' with '7622'
7620 -7621 7622 0
-7622 7621 0
-7622 -7620 0
c Var 'aux1904' order represents '2' with '7623'
-7621 7623 0
c Var 'aux1904' direct represents '2' with '7624'
7621 -7623 7624 0
-7624 7623 0
-7624 -7621 0
c Var 'aux1904' order represents '3' with '7625'
-7623 7625 0
c Var 'aux1904' direct represents '3' with '7626'
7623 -7625 7626 0
-7626 7625 0
-7626 -7623 0
c Var 'aux1904' direct represents '4' with '-7625'
7620 7622 7624 7626 -7625 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7627'
c Var 'aux1905' direct represents '0' with '7627'
c Var 'aux1905' order represents '1' with '7628'
-7627 7628 0
c Var 'aux1905' direct represents '1' with '7629'
7627 -7628 7629 0
-7629 7628 0
-7629 -7627 0
c Var 'aux1905' direct represents '2' with '-7628'
7627 7629 -7628 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7630'
c Var 'aux1906' direct represents '0' with '7630'
c Var 'aux1906' order represents '1' with '7631'
-7630 7631 0
c Var 'aux1906' direct represents '1' with '7632'
7630 -7631 7632 0
-7632 7631 0
-7632 -7630 0
c Var 'aux1906' direct represents '2' with '-7631'
7630 7632 -7631 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7633'
c Var 'aux1907' direct represents '0' with '7633'
c Var 'aux1907' order represents '1' with '7634'
-7633 7634 0
c Var 'aux1907' direct represents '1' with '7635'
7633 -7634 7635 0
-7635 7634 0
-7635 -7633 0
c Var 'aux1907' direct represents '2' with '-7634'
7633 7635 -7634 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7636'
c Var 'aux1908' direct represents '0' with '7636'
c Var 'aux1908' order represents '1' with '7637'
-7636 7637 0
c Var 'aux1908' direct represents '1' with '7638'
7636 -7637 7638 0
-7638 7637 0
-7638 -7636 0
c Var 'aux1908' direct represents '2' with '-7637'
7636 7638 -7637 0
c Encoding variable: aux1909 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1908))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7639'
c Var 'aux1909' direct represents '0' with '7639'
c Var 'aux1909' order represents '1' with '7640'
-7639 7640 0
c Var 'aux1909' direct represents '1' with '7641'
7639 -7640 7641 0
-7641 7640 0
-7641 -7639 0
c Var 'aux1909' order represents '2' with '7642'
-7640 7642 0
c Var 'aux1909' direct represents '2' with '7643'
7640 -7642 7643 0
-7643 7642 0
-7643 -7640 0
c Var 'aux1909' direct represents '3' with '-7642'
7639 7641 7643 -7642 0
c Encoding variable: aux1910 with domain: int(0..4) (representing constraint (aux1905 + aux1907))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7644'
c Var 'aux1910' direct represents '0' with '7644'
c Var 'aux1910' order represents '1' with '7645'
-7644 7645 0
c Var 'aux1910' direct represents '1' with '7646'
7644 -7645 7646 0
-7646 7645 0
-7646 -7644 0
c Var 'aux1910' order represents '2' with '7647'
-7645 7647 0
c Var 'aux1910' direct represents '2' with '7648'
7645 -7647 7648 0
-7648 7647 0
-7648 -7645 0
c Var 'aux1910' order represents '3' with '7649'
-7647 7649 0
c Var 'aux1910' direct represents '3' with '7650'
7647 -7649 7650 0
-7650 7649 0
-7650 -7647 0
c Var 'aux1910' direct represents '4' with '-7649'
7644 7646 7648 7650 -7649 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7651'
c Var 'aux1911' direct represents '0' with '7651'
c Var 'aux1911' order represents '1' with '7652'
-7651 7652 0
c Var 'aux1911' direct represents '1' with '7653'
7651 -7652 7653 0
-7653 7652 0
-7653 -7651 0
c Var 'aux1911' direct represents '2' with '-7652'
7651 7653 -7652 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7654'
c Var 'aux1912' direct represents '0' with '7654'
c Var 'aux1912' order represents '1' with '7655'
-7654 7655 0
c Var 'aux1912' direct represents '1' with '7656'
7654 -7655 7656 0
-7656 7655 0
-7656 -7654 0
c Var 'aux1912' direct represents '2' with '-7655'
7654 7656 -7655 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7657'
c Var 'aux1913' direct represents '0' with '7657'
c Var 'aux1913' order represents '1' with '7658'
-7657 7658 0
c Var 'aux1913' direct represents '1' with '7659'
7657 -7658 7659 0
-7659 7658 0
-7659 -7657 0
c Var 'aux1913' direct represents '2' with '-7658'
7657 7659 -7658 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7660'
c Var 'aux1914' direct represents '0' with '7660'
c Var 'aux1914' order represents '1' with '7661'
-7660 7661 0
c Var 'aux1914' direct represents '1' with '7662'
7660 -7661 7662 0
-7662 7661 0
-7662 -7660 0
c Var 'aux1914' direct represents '2' with '-7661'
7660 7662 -7661 0
c Encoding variable: aux1915 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1914))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7663'
c Var 'aux1915' direct represents '0' with '7663'
c Var 'aux1915' order represents '1' with '7664'
-7663 7664 0
c Var 'aux1915' direct represents '1' with '7665'
7663 -7664 7665 0
-7665 7664 0
-7665 -7663 0
c Var 'aux1915' order represents '2' with '7666'
-7664 7666 0
c Var 'aux1915' direct represents '2' with '7667'
7664 -7666 7667 0
-7667 7666 0
-7667 -7664 0
c Var 'aux1915' direct represents '3' with '-7666'
7663 7665 7667 -7666 0
c Encoding variable: aux1916 with domain: int(0..4) (representing constraint (aux1911 + aux1913))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7668'
c Var 'aux1916' direct represents '0' with '7668'
c Var 'aux1916' order represents '1' with '7669'
-7668 7669 0
c Var 'aux1916' direct represents '1' with '7670'
7668 -7669 7670 0
-7670 7669 0
-7670 -7668 0
c Var 'aux1916' order represents '2' with '7671'
-7669 7671 0
c Var 'aux1916' direct represents '2' with '7672'
7669 -7671 7672 0
-7672 7671 0
-7672 -7669 0
c Var 'aux1916' order represents '3' with '7673'
-7671 7673 0
c Var 'aux1916' direct represents '3' with '7674'
7671 -7673 7674 0
-7674 7673 0
-7674 -7671 0
c Var 'aux1916' direct represents '4' with '-7673'
7668 7670 7672 7674 -7673 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7675'
c Var 'aux1917' direct represents '0' with '7675'
c Var 'aux1917' order represents '1' with '7676'
-7675 7676 0
c Var 'aux1917' direct represents '1' with '7677'
7675 -7676 7677 0
-7677 7676 0
-7677 -7675 0
c Var 'aux1917' direct represents '2' with '-7676'
7675 7677 -7676 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7678'
c Var 'aux1918' direct represents '0' with '7678'
c Var 'aux1918' order represents '1' with '7679'
-7678 7679 0
c Var 'aux1918' direct represents '1' with '7680'
7678 -7679 7680 0
-7680 7679 0
-7680 -7678 0
c Var 'aux1918' direct represents '2' with '-7679'
7678 7680 -7679 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7681'
c Var 'aux1919' direct represents '0' with '7681'
c Var 'aux1919' order represents '1' with '7682'
-7681 7682 0
c Var 'aux1919' direct represents '1' with '7683'
7681 -7682 7683 0
-7683 7682 0
-7683 -7681 0
c Var 'aux1919' direct represents '2' with '-7682'
7681 7683 -7682 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7684'
c Var 'aux1920' direct represents '0' with '7684'
c Var 'aux1920' order represents '1' with '7685'
-7684 7685 0
c Var 'aux1920' direct represents '1' with '7686'
7684 -7685 7686 0
-7686 7685 0
-7686 -7684 0
c Var 'aux1920' direct represents '2' with '-7685'
7684 7686 -7685 0
c Encoding variable: aux1921 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1920))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7687'
c Var 'aux1921' direct represents '0' with '7687'
c Var 'aux1921' order represents '1' with '7688'
-7687 7688 0
c Var 'aux1921' direct represents '1' with '7689'
7687 -7688 7689 0
-7689 7688 0
-7689 -7687 0
c Var 'aux1921' order represents '2' with '7690'
-7688 7690 0
c Var 'aux1921' direct represents '2' with '7691'
7688 -7690 7691 0
-7691 7690 0
-7691 -7688 0
c Var 'aux1921' direct represents '3' with '-7690'
7687 7689 7691 -7690 0
c Encoding variable: aux1922 with domain: int(0..4) (representing constraint (aux1917 + aux1919))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7692'
c Var 'aux1922' direct represents '0' with '7692'
c Var 'aux1922' order represents '1' with '7693'
-7692 7693 0
c Var 'aux1922' direct represents '1' with '7694'
7692 -7693 7694 0
-7694 7693 0
-7694 -7692 0
c Var 'aux1922' order represents '2' with '7695'
-7693 7695 0
c Var 'aux1922' direct represents '2' with '7696'
7693 -7695 7696 0
-7696 7695 0
-7696 -7693 0
c Var 'aux1922' order represents '3' with '7697'
-7695 7697 0
c Var 'aux1922' direct represents '3' with '7698'
7695 -7697 7698 0
-7698 7697 0
-7698 -7695 0
c Var 'aux1922' direct represents '4' with '-7697'
7692 7694 7696 7698 -7697 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7699'
c Var 'aux1923' direct represents '0' with '7699'
c Var 'aux1923' order represents '1' with '7700'
-7699 7700 0
c Var 'aux1923' direct represents '1' with '7701'
7699 -7700 7701 0
-7701 7700 0
-7701 -7699 0
c Var 'aux1923' direct represents '2' with '-7700'
7699 7701 -7700 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '7702'
c Var 'aux1924' direct represents '0' with '7702'
c Var 'aux1924' order represents '1' with '7703'
-7702 7703 0
c Var 'aux1924' direct represents '1' with '7704'
7702 -7703 7704 0
-7704 7703 0
-7704 -7702 0
c Var 'aux1924' direct represents '2' with '-7703'
7702 7704 -7703 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '7705'
c Var 'aux1925' direct represents '0' with '7705'
c Var 'aux1925' order represents '1' with '7706'
-7705 7706 0
c Var 'aux1925' direct represents '1' with '7707'
7705 -7706 7707 0
-7707 7706 0
-7707 -7705 0
c Var 'aux1925' direct represents '2' with '-7706'
7705 7707 -7706 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '7708'
c Var 'aux1926' direct represents '0' with '7708'
c Var 'aux1926' order represents '1' with '7709'
-7708 7709 0
c Var 'aux1926' direct represents '1' with '7710'
7708 -7709 7710 0
-7710 7709 0
-7710 -7708 0
c Var 'aux1926' direct represents '2' with '-7709'
7708 7710 -7709 0
c Encoding variable: aux1927 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1926))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '7711'
c Var 'aux1927' direct represents '0' with '7711'
c Var 'aux1927' order represents '1' with '7712'
-7711 7712 0
c Var 'aux1927' direct represents '1' with '7713'
7711 -7712 7713 0
-7713 7712 0
-7713 -7711 0
c Var 'aux1927' order represents '2' with '7714'
-7712 7714 0
c Var 'aux1927' direct represents '2' with '7715'
7712 -7714 7715 0
-7715 7714 0
-7715 -7712 0
c Var 'aux1927' direct represents '3' with '-7714'
7711 7713 7715 -7714 0
c Encoding variable: aux1928 with domain: int(0..4) (representing constraint (aux1923 + aux1925))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '7716'
c Var 'aux1928' direct represents '0' with '7716'
c Var 'aux1928' order represents '1' with '7717'
-7716 7717 0
c Var 'aux1928' direct represents '1' with '7718'
7716 -7717 7718 0
-7718 7717 0
-7718 -7716 0
c Var 'aux1928' order represents '2' with '7719'
-7717 7719 0
c Var 'aux1928' direct represents '2' with '7720'
7717 -7719 7720 0
-7720 7719 0
-7720 -7717 0
c Var 'aux1928' order represents '3' with '7721'
-7719 7721 0
c Var 'aux1928' direct represents '3' with '7722'
7719 -7721 7722 0
-7722 7721 0
-7722 -7719 0
c Var 'aux1928' direct represents '4' with '-7721'
7716 7718 7720 7722 -7721 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '7723'
c Var 'aux1929' direct represents '0' with '7723'
c Var 'aux1929' order represents '1' with '7724'
-7723 7724 0
c Var 'aux1929' direct represents '1' with '7725'
7723 -7724 7725 0
-7725 7724 0
-7725 -7723 0
c Var 'aux1929' direct represents '2' with '-7724'
7723 7725 -7724 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '7726'
c Var 'aux1930' direct represents '0' with '7726'
c Var 'aux1930' order represents '1' with '7727'
-7726 7727 0
c Var 'aux1930' direct represents '1' with '7728'
7726 -7727 7728 0
-7728 7727 0
-7728 -7726 0
c Var 'aux1930' direct represents '2' with '-7727'
7726 7728 -7727 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '7729'
c Var 'aux1931' direct represents '0' with '7729'
c Var 'aux1931' order represents '1' with '7730'
-7729 7730 0
c Var 'aux1931' direct represents '1' with '7731'
7729 -7730 7731 0
-7731 7730 0
-7731 -7729 0
c Var 'aux1931' direct represents '2' with '-7730'
7729 7731 -7730 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '7732'
c Var 'aux1932' direct represents '0' with '7732'
c Var 'aux1932' order represents '1' with '7733'
-7732 7733 0
c Var 'aux1932' direct represents '1' with '7734'
7732 -7733 7734 0
-7734 7733 0
-7734 -7732 0
c Var 'aux1932' direct represents '2' with '-7733'
7732 7734 -7733 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '7735'
c Var 'aux1933' direct represents '0' with '7735'
c Var 'aux1933' order represents '1' with '7736'
-7735 7736 0
c Var 'aux1933' direct represents '1' with '7737'
7735 -7736 7737 0
-7737 7736 0
-7737 -7735 0
c Var 'aux1933' direct represents '2' with '-7736'
7735 7737 -7736 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '7738'
c Var 'aux1934' direct represents '0' with '7738'
c Var 'aux1934' order represents '1' with '7739'
-7738 7739 0
c Var 'aux1934' direct represents '1' with '7740'
7738 -7739 7740 0
-7740 7739 0
-7740 -7738 0
c Var 'aux1934' direct represents '2' with '-7739'
7738 7740 -7739 0
c Encoding variable: aux1935 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '7741'
c Var 'aux1935' direct represents '0' with '7741'
c Var 'aux1935' order represents '1' with '7742'
-7741 7742 0
c Var 'aux1935' direct represents '1' with '7743'
7741 -7742 7743 0
-7743 7742 0
-7743 -7741 0
c Var 'aux1935' direct represents '2' with '-7742'
7741 7743 -7742 0
c Encoding variable: aux1936 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '7744'
c Var 'aux1936' direct represents '0' with '7744'
c Var 'aux1936' order represents '1' with '7745'
-7744 7745 0
c Var 'aux1936' direct represents '1' with '7746'
7744 -7745 7746 0
-7746 7745 0
-7746 -7744 0
c Var 'aux1936' direct represents '2' with '-7745'
7744 7746 -7745 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '7747'
c Var 'aux1937' direct represents '0' with '7747'
c Var 'aux1937' order represents '1' with '7748'
-7747 7748 0
c Var 'aux1937' direct represents '1' with '7749'
7747 -7748 7749 0
-7749 7748 0
-7749 -7747 0
c Var 'aux1937' direct represents '2' with '-7748'
7747 7749 -7748 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00001_00005=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '7750'
c Var 'aux1938' direct represents '0' with '7750'
c Var 'aux1938' order represents '1' with '7751'
-7750 7751 0
c Var 'aux1938' direct represents '1' with '7752'
7750 -7751 7752 0
-7752 7751 0
-7752 -7750 0
c Var 'aux1938' direct represents '2' with '-7751'
7750 7752 -7751 0
c Encoding variable: aux1939 with domain: int(0..2) (representing constraint ((x_00001_00005=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '7753'
c Var 'aux1939' direct represents '0' with '7753'
c Var 'aux1939' order represents '1' with '7754'
-7753 7754 0
c Var 'aux1939' direct represents '1' with '7755'
7753 -7754 7755 0
-7755 7754 0
-7755 -7753 0
c Var 'aux1939' direct represents '2' with '-7754'
7753 7755 -7754 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00001_00005=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '7756'
c Var 'aux1940' direct represents '0' with '7756'
c Var 'aux1940' order represents '1' with '7757'
-7756 7757 0
c Var 'aux1940' direct represents '1' with '7758'
7756 -7757 7758 0
-7758 7757 0
-7758 -7756 0
c Var 'aux1940' direct represents '2' with '-7757'
7756 7758 -7757 0
c Encoding variable: aux1941 with domain: int(0..2) (representing constraint ((x_00001_00005=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '7759'
c Var 'aux1941' direct represents '0' with '7759'
c Var 'aux1941' order represents '1' with '7760'
-7759 7760 0
c Var 'aux1941' direct represents '1' with '7761'
7759 -7760 7761 0
-7761 7760 0
-7761 -7759 0
c Var 'aux1941' direct represents '2' with '-7760'
7759 7761 -7760 0
c Encoding variable: aux1942 with domain: int(0..2) (representing constraint ((x_00001_00005=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '7762'
c Var 'aux1942' direct represents '0' with '7762'
c Var 'aux1942' order represents '1' with '7763'
-7762 7763 0
c Var 'aux1942' direct represents '1' with '7764'
7762 -7763 7764 0
-7764 7763 0
-7764 -7762 0
c Var 'aux1942' direct represents '2' with '-7763'
7762 7764 -7763 0
c Encoding variable: aux1943 with domain: int(0..2) (representing constraint ((x_00001_00005=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '7765'
c Var 'aux1943' direct represents '0' with '7765'
c Var 'aux1943' order represents '1' with '7766'
-7765 7766 0
c Var 'aux1943' direct represents '1' with '7767'
7765 -7766 7767 0
-7767 7766 0
-7767 -7765 0
c Var 'aux1943' direct represents '2' with '-7766'
7765 7767 -7766 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00001_00005=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '7768'
c Var 'aux1944' direct represents '0' with '7768'
c Var 'aux1944' order represents '1' with '7769'
-7768 7769 0
c Var 'aux1944' direct represents '1' with '7770'
7768 -7769 7770 0
-7770 7769 0
-7770 -7768 0
c Var 'aux1944' direct represents '2' with '-7769'
7768 7770 -7769 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00001_00005=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '7771'
c Var 'aux1945' direct represents '0' with '7771'
c Var 'aux1945' order represents '1' with '7772'
-7771 7772 0
c Var 'aux1945' direct represents '1' with '7773'
7771 -7772 7773 0
-7773 7772 0
-7773 -7771 0
c Var 'aux1945' direct represents '2' with '-7772'
7771 7773 -7772 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00001_00005=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '7774'
c Var 'aux1946' direct represents '0' with '7774'
c Var 'aux1946' order represents '1' with '7775'
-7774 7775 0
c Var 'aux1946' direct represents '1' with '7776'
7774 -7775 7776 0
-7776 7775 0
-7776 -7774 0
c Var 'aux1946' direct represents '2' with '-7775'
7774 7776 -7775 0
c Encoding variable: aux1947 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '7777'
c Var 'aux1947' direct represents '0' with '7777'
c Var 'aux1947' order represents '1' with '7778'
-7777 7778 0
c Var 'aux1947' direct represents '1' with '7779'
7777 -7778 7779 0
-7779 7778 0
-7779 -7777 0
c Var 'aux1947' direct represents '2' with '-7778'
7777 7779 -7778 0
c Encoding variable: aux1948 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '7780'
c Var 'aux1948' direct represents '0' with '7780'
c Var 'aux1948' order represents '1' with '7781'
-7780 7781 0
c Var 'aux1948' direct represents '1' with '7782'
7780 -7781 7782 0
-7782 7781 0
-7782 -7780 0
c Var 'aux1948' direct represents '2' with '-7781'
7780 7782 -7781 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '7783'
c Var 'aux1949' direct represents '0' with '7783'
c Var 'aux1949' order represents '1' with '7784'
-7783 7784 0
c Var 'aux1949' direct represents '1' with '7785'
7783 -7784 7785 0
-7785 7784 0
-7785 -7783 0
c Var 'aux1949' direct represents '2' with '-7784'
7783 7785 -7784 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '7786'
c Var 'aux1950' direct represents '0' with '7786'
c Var 'aux1950' order represents '1' with '7787'
-7786 7787 0
c Var 'aux1950' direct represents '1' with '7788'
7786 -7787 7788 0
-7788 7787 0
-7788 -7786 0
c Var 'aux1950' direct represents '2' with '-7787'
7786 7788 -7787 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '7789'
c Var 'aux1951' direct represents '0' with '7789'
c Var 'aux1951' order represents '1' with '7790'
-7789 7790 0
c Var 'aux1951' direct represents '1' with '7791'
7789 -7790 7791 0
-7791 7790 0
-7791 -7789 0
c Var 'aux1951' direct represents '2' with '-7790'
7789 7791 -7790 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '7792'
c Var 'aux1952' direct represents '0' with '7792'
c Var 'aux1952' order represents '1' with '7793'
-7792 7793 0
c Var 'aux1952' direct represents '1' with '7794'
7792 -7793 7794 0
-7794 7793 0
-7794 -7792 0
c Var 'aux1952' direct represents '2' with '-7793'
7792 7794 -7793 0
c Encoding variable: aux1953 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '7795'
c Var 'aux1953' direct represents '0' with '7795'
c Var 'aux1953' order represents '1' with '7796'
-7795 7796 0
c Var 'aux1953' direct represents '1' with '7797'
7795 -7796 7797 0
-7797 7796 0
-7797 -7795 0
c Var 'aux1953' direct represents '2' with '-7796'
7795 7797 -7796 0
c Encoding variable: aux1954 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '7798'
c Var 'aux1954' direct represents '0' with '7798'
c Var 'aux1954' order represents '1' with '7799'
-7798 7799 0
c Var 'aux1954' direct represents '1' with '7800'
7798 -7799 7800 0
-7800 7799 0
-7800 -7798 0
c Var 'aux1954' direct represents '2' with '-7799'
7798 7800 -7799 0
c Encoding variable: aux1955 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1955' order represents '0' with '7801'
c Var 'aux1955' direct represents '0' with '7801'
c Var 'aux1955' order represents '1' with '7802'
-7801 7802 0
c Var 'aux1955' direct represents '1' with '7803'
7801 -7802 7803 0
-7803 7802 0
-7803 -7801 0
c Var 'aux1955' direct represents '2' with '-7802'
7801 7803 -7802 0
c Encoding variable: aux1956 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1956' order represents '0' with '7804'
c Var 'aux1956' direct represents '0' with '7804'
c Var 'aux1956' order represents '1' with '7805'
-7804 7805 0
c Var 'aux1956' direct represents '1' with '7806'
7804 -7805 7806 0
-7806 7805 0
-7806 -7804 0
c Var 'aux1956' direct represents '2' with '-7805'
7804 7806 -7805 0
c Encoding variable: aux1957 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1957' order represents '0' with '7807'
c Var 'aux1957' direct represents '0' with '7807'
c Var 'aux1957' order represents '1' with '7808'
-7807 7808 0
c Var 'aux1957' direct represents '1' with '7809'
7807 -7808 7809 0
-7809 7808 0
-7809 -7807 0
c Var 'aux1957' direct represents '2' with '-7808'
7807 7809 -7808 0
c Encoding variable: aux1958 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1958' order represents '0' with '7810'
c Var 'aux1958' direct represents '0' with '7810'
c Var 'aux1958' order represents '1' with '7811'
-7810 7811 0
c Var 'aux1958' direct represents '1' with '7812'
7810 -7811 7812 0
-7812 7811 0
-7812 -7810 0
c Var 'aux1958' direct represents '2' with '-7811'
7810 7812 -7811 0
c Encoding variable: aux1959 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1959' order represents '0' with '7813'
c Var 'aux1959' direct represents '0' with '7813'
c Var 'aux1959' order represents '1' with '7814'
-7813 7814 0
c Var 'aux1959' direct represents '1' with '7815'
7813 -7814 7815 0
-7815 7814 0
-7815 -7813 0
c Var 'aux1959' direct represents '2' with '-7814'
7813 7815 -7814 0
c Encoding variable: aux1960 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1960' order represents '0' with '7816'
c Var 'aux1960' direct represents '0' with '7816'
c Var 'aux1960' order represents '1' with '7817'
-7816 7817 0
c Var 'aux1960' direct represents '1' with '7818'
7816 -7817 7818 0
-7818 7817 0
-7818 -7816 0
c Var 'aux1960' direct represents '2' with '-7817'
7816 7818 -7817 0
c Encoding variable: aux1961 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1961' order represents '0' with '7819'
c Var 'aux1961' direct represents '0' with '7819'
c Var 'aux1961' order represents '1' with '7820'
-7819 7820 0
c Var 'aux1961' direct represents '1' with '7821'
7819 -7820 7821 0
-7821 7820 0
-7821 -7819 0
c Var 'aux1961' direct represents '2' with '-7820'
7819 7821 -7820 0
c Encoding variable: aux1962 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1962' order represents '0' with '7822'
c Var 'aux1962' direct represents '0' with '7822'
c Var 'aux1962' order represents '1' with '7823'
-7822 7823 0
c Var 'aux1962' direct represents '1' with '7824'
7822 -7823 7824 0
-7824 7823 0
-7824 -7822 0
c Var 'aux1962' direct represents '2' with '-7823'
7822 7824 -7823 0
c Encoding variable: aux1963 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1963' order represents '0' with '7825'
c Var 'aux1963' direct represents '0' with '7825'
c Var 'aux1963' order represents '1' with '7826'
-7825 7826 0
c Var 'aux1963' direct represents '1' with '7827'
7825 -7826 7827 0
-7827 7826 0
-7827 -7825 0
c Var 'aux1963' direct represents '2' with '-7826'
7825 7827 -7826 0
c Encoding variable: aux1964 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1964' order represents '0' with '7828'
c Var 'aux1964' direct represents '0' with '7828'
c Var 'aux1964' order represents '1' with '7829'
-7828 7829 0
c Var 'aux1964' direct represents '1' with '7830'
7828 -7829 7830 0
-7830 7829 0
-7830 -7828 0
c Var 'aux1964' direct represents '2' with '-7829'
7828 7830 -7829 0
c Encoding variable: aux1965 with domain: bool (representing constraint ((aux467 + shift(x_00001_00001, -1) + shift(x_00002_00002, -1))<=20))
c Var 'aux1965' direct represents '0' with '-7831'
c Var 'aux1965' direct represents '1' with '7831'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-7831'
c Encoding variable: aux1966 with domain: bool (representing constraint (20<=(aux467 + shift(x_00001_00001, -1) + shift(x_00002_00002, -1))))
c Var 'aux1966' direct represents '0' with '-7832'
c Var 'aux1966' direct represents '1' with '7832'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-7832'
c Encoding variable: aux1967 with domain: bool (representing constraint ((x_00002_00003 + x_00003_00003 + x_00001_00003)<=8))
c Var 'aux1967' direct represents '0' with '-7833'
c Var 'aux1967' direct represents '1' with '7833'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-7833'
c Encoding variable: aux1968 with domain: bool (representing constraint (8<=(x_00002_00003 + x_00003_00003 + x_00001_00003)))
c Var 'aux1968' direct represents '0' with '-7834'
c Var 'aux1968' direct represents '1' with '7834'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-7834'
c Encoding variable: aux1969 with domain: bool (representing constraint ((x_00002_00004 + x_00003_00004 + x_00001_00004)<=18))
c Var 'aux1969' direct represents '0' with '-7835'
c Var 'aux1969' direct represents '1' with '7835'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-7835'
c Encoding variable: aux1970 with domain: bool (representing constraint (18<=(x_00002_00004 + x_00003_00004 + x_00001_00004)))
c Var 'aux1970' direct represents '0' with '-7836'
c Var 'aux1970' direct represents '1' with '7836'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-7836'
c Encoding variable: aux1971 with domain: bool (representing constraint ((aux468 + shift(x_00001_00006, -1) + shift(x_00001_00007, -1))<=10))
c Var 'aux1971' direct represents '0' with '-7837'
c Var 'aux1971' direct represents '1' with '7837'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-7837'
c Encoding variable: aux1972 with domain: bool (representing constraint (10<=(aux468 + shift(x_00001_00006, -1) + shift(x_00001_00007, -1))))
c Var 'aux1972' direct represents '0' with '-7838'
c Var 'aux1972' direct represents '1' with '7838'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-7838'
c Encoding variable: aux1973 with domain: bool (representing constraint ((x_00002_00008 + x_00002_00009 + x_00001_00009)<=21))
c Var 'aux1973' direct represents '0' with '-7839'
c Var 'aux1973' direct represents '1' with '7839'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-7839'
c Encoding variable: aux1974 with domain: bool (representing constraint (21<=(x_00002_00008 + x_00002_00009 + x_00001_00009)))
c Var 'aux1974' direct represents '0' with '-7840'
c Var 'aux1974' direct represents '1' with '7840'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-7840'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006 + x_00002_00007)<=13))
c Var 'aux1975' direct represents '0' with '-7841'
c Var 'aux1975' direct represents '1' with '7841'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-7841'
c Encoding variable: aux1976 with domain: bool (representing constraint (13<=(x_00002_00005 + x_00002_00006 + x_00002_00007)))
c Var 'aux1976' direct represents '0' with '-7842'
c Var 'aux1976' direct represents '1' with '7842'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-7842'
c Encoding variable: aux1977 with domain: bool (representing constraint ((x_00003_00001 + x_00004_00001)<=10))
c Var 'aux1977' direct represents '0' with '-7843'
c Var 'aux1977' direct represents '1' with '7843'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-7843'
c Encoding variable: aux1978 with domain: bool (representing constraint (10<=(x_00003_00001 + x_00004_00001)))
c Var 'aux1978' direct represents '0' with '-7844'
c Var 'aux1978' direct represents '1' with '7844'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-7844'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00003_00002 + x_00004_00002)<=15))
c Var 'aux1979' direct represents '0' with '-7845'
c Var 'aux1979' direct represents '1' with '7845'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-7845'
c Encoding variable: aux1980 with domain: bool (representing constraint (15<=(x_00003_00002 + x_00004_00002)))
c Var 'aux1980' direct represents '0' with '-7846'
c Var 'aux1980' direct represents '1' with '7846'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-7846'
c Encoding variable: aux1981 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)<=12))
c Var 'aux1981' direct represents '0' with '-7847'
c Var 'aux1981' direct represents '1' with '7847'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-7847'
c Encoding variable: aux1982 with domain: bool (representing constraint (12<=(x_00003_00005 + x_00003_00006)))
c Var 'aux1982' direct represents '0' with '-7848'
c Var 'aux1982' direct represents '1' with '7848'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-7848'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00003_00009)<=12))
c Var 'aux1983' direct represents '0' with '-7849'
c Var 'aux1983' direct represents '1' with '7849'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-7849'
c Encoding variable: aux1984 with domain: bool (representing constraint (12<=(x_00003_00007 + x_00003_00008 + x_00003_00009)))
c Var 'aux1984' direct represents '0' with '-7850'
c Var 'aux1984' direct represents '1' with '7850'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-7850'
c Encoding variable: aux1985 with domain: bool (representing constraint ((x_00004_00003 + x_00004_00004 + x_00005_00004)<=18))
c Var 'aux1985' direct represents '0' with '-7851'
c Var 'aux1985' direct represents '1' with '7851'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-7851'
c Encoding variable: aux1986 with domain: bool (representing constraint (18<=(x_00004_00003 + x_00004_00004 + x_00005_00004)))
c Var 'aux1986' direct represents '0' with '-7852'
c Var 'aux1986' direct represents '1' with '7852'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-7852'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00004_00005 + x_00004_00006)<=9))
c Var 'aux1987' direct represents '0' with '-7853'
c Var 'aux1987' direct represents '1' with '7853'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-7853'
c Encoding variable: aux1988 with domain: bool (representing constraint (9<=(x_00004_00005 + x_00004_00006)))
c Var 'aux1988' direct represents '0' with '-7854'
c Var 'aux1988' direct represents '1' with '7854'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-7854'
c Encoding variable: aux1989 with domain: bool (representing constraint ((x_00004_00007 + x_00005_00007 + x_00005_00008)<=19))
c Var 'aux1989' direct represents '0' with '-7855'
c Var 'aux1989' direct represents '1' with '7855'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-7855'
c Encoding variable: aux1990 with domain: bool (representing constraint (19<=(x_00004_00007 + x_00005_00007 + x_00005_00008)))
c Var 'aux1990' direct represents '0' with '-7856'
c Var 'aux1990' direct represents '1' with '7856'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-7856'
c Encoding variable: aux1991 with domain: bool (representing constraint ((x_00004_00008 + x_00004_00009 + x_00005_00009)<=13))
c Var 'aux1991' direct represents '0' with '-7857'
c Var 'aux1991' direct represents '1' with '7857'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-7857'
c Encoding variable: aux1992 with domain: bool (representing constraint (13<=(x_00004_00008 + x_00004_00009 + x_00005_00009)))
c Var 'aux1992' direct represents '0' with '-7858'
c Var 'aux1992' direct represents '1' with '7858'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-7858'
c Encoding variable: aux1993 with domain: bool (representing constraint ((x_00005_00001 + x_00006_00001 + x_00006_00002)<=10))
c Var 'aux1993' direct represents '0' with '-7859'
c Var 'aux1993' direct represents '1' with '7859'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-7859'
c Encoding variable: aux1994 with domain: bool (representing constraint (10<=(x_00005_00001 + x_00006_00001 + x_00006_00002)))
c Var 'aux1994' direct represents '0' with '-7860'
c Var 'aux1994' direct represents '1' with '7860'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-7860'
c Encoding variable: aux1995 with domain: bool (representing constraint ((x_00005_00002 + x_00005_00003 + x_00006_00003)<=15))
c Var 'aux1995' direct represents '0' with '-7861'
c Var 'aux1995' direct represents '1' with '7861'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-7861'
c Encoding variable: aux1996 with domain: bool (representing constraint (15<=(x_00005_00002 + x_00005_00003 + x_00006_00003)))
c Var 'aux1996' direct represents '0' with '-7862'
c Var 'aux1996' direct represents '1' with '7862'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-7862'
c Encoding variable: aux1997 with domain: bool (representing constraint ((x_00005_00005 + x_00006_00004 + x_00006_00005)<=17))
c Var 'aux1997' direct represents '0' with '-7863'
c Var 'aux1997' direct represents '1' with '7863'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-7863'
c Encoding variable: aux1998 with domain: bool (representing constraint (17<=(x_00005_00005 + x_00006_00004 + x_00006_00005)))
c Var 'aux1998' direct represents '0' with '-7864'
c Var 'aux1998' direct represents '1' with '7864'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-7864'
c Encoding variable: aux1999 with domain: bool (representing constraint ((x_00005_00006 + x_00006_00006 + x_00006_00007)<=18))
c Var 'aux1999' direct represents '0' with '-7865'
c Var 'aux1999' direct represents '1' with '7865'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-7865'
c Encoding variable: aux2000 with domain: bool (representing constraint (18<=(x_00005_00006 + x_00006_00006 + x_00006_00007)))
c Var 'aux2000' direct represents '0' with '-7866'
c Var 'aux2000' direct represents '1' with '7866'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-7866'
c Encoding variable: aux2001 with domain: bool (representing constraint ((x_00007_00008 + x_00006_00008)<=7))
c Var 'aux2001' direct represents '0' with '-7867'
c Var 'aux2001' direct represents '1' with '7867'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-7867'
c Encoding variable: aux2002 with domain: bool (representing constraint (7<=(x_00007_00008 + x_00006_00008)))
c Var 'aux2002' direct represents '0' with '-7868'
c Var 'aux2002' direct represents '1' with '7868'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-7868'
c Encoding variable: aux2003 with domain: bool (representing constraint ((x_00007_00009 + x_00006_00009)<=12))
c Var 'aux2003' direct represents '0' with '-7869'
c Var 'aux2003' direct represents '1' with '7869'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-7869'
c Encoding variable: aux2004 with domain: bool (representing constraint (12<=(x_00007_00009 + x_00006_00009)))
c Var 'aux2004' direct represents '0' with '-7870'
c Var 'aux2004' direct represents '1' with '7870'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-7870'
c Encoding variable: aux2005 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00007_00003)<=14))
c Var 'aux2005' direct represents '0' with '-7871'
c Var 'aux2005' direct represents '1' with '7871'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-7871'
c Encoding variable: aux2006 with domain: bool (representing constraint (14<=(x_00007_00001 + x_00007_00002 + x_00007_00003)))
c Var 'aux2006' direct represents '0' with '-7872'
c Var 'aux2006' direct represents '1' with '7872'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-7872'
c Encoding variable: aux2007 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005)<=5))
c Var 'aux2007' direct represents '0' with '-7873'
c Var 'aux2007' direct represents '1' with '7873'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-7873'
c Encoding variable: aux2008 with domain: bool (representing constraint (5<=(x_00007_00004 + x_00007_00005)))
c Var 'aux2008' direct represents '0' with '-7874'
c Var 'aux2008' direct represents '1' with '7874'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-7874'
c Encoding variable: aux2009 with domain: bool (representing constraint ((x_00007_00006 + x_00008_00006 + x_00009_00006)<=21))
c Var 'aux2009' direct represents '0' with '-7875'
c Var 'aux2009' direct represents '1' with '7875'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-7875'
c Encoding variable: aux2010 with domain: bool (representing constraint (21<=(x_00007_00006 + x_00008_00006 + x_00009_00006)))
c Var 'aux2010' direct represents '0' with '-7876'
c Var 'aux2010' direct represents '1' with '7876'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-7876'
c Encoding variable: aux2011 with domain: bool (representing constraint ((x_00007_00007 + x_00008_00007 + x_00009_00007)<=12))
c Var 'aux2011' direct represents '0' with '-7877'
c Var 'aux2011' direct represents '1' with '7877'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-7877'
c Encoding variable: aux2012 with domain: bool (representing constraint (12<=(x_00007_00007 + x_00008_00007 + x_00009_00007)))
c Var 'aux2012' direct represents '0' with '-7878'
c Var 'aux2012' direct represents '1' with '7878'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-7878'
c Encoding variable: aux2013 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00009_00001)<=13))
c Var 'aux2013' direct represents '0' with '-7879'
c Var 'aux2013' direct represents '1' with '7879'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-7879'
c Encoding variable: aux2014 with domain: bool (representing constraint (13<=(x_00008_00001 + x_00008_00002 + x_00009_00001)))
c Var 'aux2014' direct represents '0' with '-7880'
c Var 'aux2014' direct represents '1' with '7880'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-7880'
c Encoding variable: aux2015 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004 + x_00008_00005)<=7))
c Var 'aux2015' direct represents '0' with '-7881'
c Var 'aux2015' direct represents '1' with '7881'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-7881'
c Encoding variable: aux2016 with domain: bool (representing constraint (7<=(x_00008_00003 + x_00008_00004 + x_00008_00005)))
c Var 'aux2016' direct represents '0' with '-7882'
c Var 'aux2016' direct represents '1' with '7882'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-7882'
c Encoding variable: aux2017 with domain: bool (representing constraint ((aux469 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1))<=14))
c Var 'aux2017' direct represents '0' with '-7883'
c Var 'aux2017' direct represents '1' with '7883'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-7883'
c Encoding variable: aux2018 with domain: bool (representing constraint (14<=(aux469 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1))))
c Var 'aux2018' direct represents '0' with '-7884'
c Var 'aux2018' direct represents '1' with '7884'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-7884'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux470 + shift(x_00009_00003, -1) + shift(x_00009_00004, -1))<=26))
c Var 'aux2019' direct represents '0' with '-7885'
c Var 'aux2019' direct represents '1' with '7885'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-7885'
c Encoding variable: aux2020 with domain: bool (representing constraint (26<=(aux470 + shift(x_00009_00003, -1) + shift(x_00009_00004, -1))))
c Var 'aux2020' direct represents '0' with '-7886'
c Var 'aux2020' direct represents '1' with '7886'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-7886'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux472 + aux475 + aux476)<=1))
c Var 'aux2021' direct represents '0' with '-7887'
c Var 'aux2021' direct represents '1' with '7887'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-7887'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux472 + aux475 + aux476)))
c Var 'aux2022' direct represents '0' with '-7888'
c Var 'aux2022' direct represents '1' with '7888'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-7888'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux478 + aux481 + aux482)<=1))
c Var 'aux2023' direct represents '0' with '-7889'
c Var 'aux2023' direct represents '1' with '7889'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-7889'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux478 + aux481 + aux482)))
c Var 'aux2024' direct represents '0' with '-7890'
c Var 'aux2024' direct represents '1' with '7890'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-7890'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux484 + aux487 + aux488)<=1))
c Var 'aux2025' direct represents '0' with '-7891'
c Var 'aux2025' direct represents '1' with '7891'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-7891'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux484 + aux487 + aux488)))
c Var 'aux2026' direct represents '0' with '-7892'
c Var 'aux2026' direct represents '1' with '7892'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-7892'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux490 + aux493 + aux494)<=1))
c Var 'aux2027' direct represents '0' with '-7893'
c Var 'aux2027' direct represents '1' with '7893'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-7893'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux490 + aux493 + aux494)))
c Var 'aux2028' direct represents '0' with '-7894'
c Var 'aux2028' direct represents '1' with '7894'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-7894'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux496 + aux499 + aux500)<=1))
c Var 'aux2029' direct represents '0' with '-7895'
c Var 'aux2029' direct represents '1' with '7895'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-7895'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux496 + aux499 + aux500)))
c Var 'aux2030' direct represents '0' with '-7896'
c Var 'aux2030' direct represents '1' with '7896'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-7896'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux502 + aux505 + aux506)<=1))
c Var 'aux2031' direct represents '0' with '-7897'
c Var 'aux2031' direct represents '1' with '7897'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-7897'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux502 + aux505 + aux506)))
c Var 'aux2032' direct represents '0' with '-7898'
c Var 'aux2032' direct represents '1' with '7898'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-7898'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux508 + aux511 + aux512)<=1))
c Var 'aux2033' direct represents '0' with '-7899'
c Var 'aux2033' direct represents '1' with '7899'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-7899'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux508 + aux511 + aux512)))
c Var 'aux2034' direct represents '0' with '-7900'
c Var 'aux2034' direct represents '1' with '7900'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-7900'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux514 + aux517 + aux518)<=1))
c Var 'aux2035' direct represents '0' with '-7901'
c Var 'aux2035' direct represents '1' with '7901'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-7901'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux514 + aux517 + aux518)))
c Var 'aux2036' direct represents '0' with '-7902'
c Var 'aux2036' direct represents '1' with '7902'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-7902'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux520 + aux523 + aux524)<=1))
c Var 'aux2037' direct represents '0' with '-7903'
c Var 'aux2037' direct represents '1' with '7903'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-7903'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux520 + aux523 + aux524)))
c Var 'aux2038' direct represents '0' with '-7904'
c Var 'aux2038' direct represents '1' with '7904'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-7904'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux526 + aux529 + aux530)<=1))
c Var 'aux2039' direct represents '0' with '-7905'
c Var 'aux2039' direct represents '1' with '7905'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-7905'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux526 + aux529 + aux530)))
c Var 'aux2040' direct represents '0' with '-7906'
c Var 'aux2040' direct represents '1' with '7906'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-7906'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux532 + aux535 + aux536)<=1))
c Var 'aux2041' direct represents '0' with '-7907'
c Var 'aux2041' direct represents '1' with '7907'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-7907'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux532 + aux535 + aux536)))
c Var 'aux2042' direct represents '0' with '-7908'
c Var 'aux2042' direct represents '1' with '7908'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-7908'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux538 + aux541 + aux542)<=1))
c Var 'aux2043' direct represents '0' with '-7909'
c Var 'aux2043' direct represents '1' with '7909'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-7909'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux538 + aux541 + aux542)))
c Var 'aux2044' direct represents '0' with '-7910'
c Var 'aux2044' direct represents '1' with '7910'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-7910'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux544 + aux547 + aux548)<=1))
c Var 'aux2045' direct represents '0' with '-7911'
c Var 'aux2045' direct represents '1' with '7911'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-7911'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux544 + aux547 + aux548)))
c Var 'aux2046' direct represents '0' with '-7912'
c Var 'aux2046' direct represents '1' with '7912'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-7912'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux550 + aux553 + aux554)<=1))
c Var 'aux2047' direct represents '0' with '-7913'
c Var 'aux2047' direct represents '1' with '7913'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-7913'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux550 + aux553 + aux554)))
c Var 'aux2048' direct represents '0' with '-7914'
c Var 'aux2048' direct represents '1' with '7914'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-7914'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux556 + aux559 + aux560)<=1))
c Var 'aux2049' direct represents '0' with '-7915'
c Var 'aux2049' direct represents '1' with '7915'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-7915'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux556 + aux559 + aux560)))
c Var 'aux2050' direct represents '0' with '-7916'
c Var 'aux2050' direct represents '1' with '7916'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-7916'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux562 + aux565 + aux566)<=1))
c Var 'aux2051' direct represents '0' with '-7917'
c Var 'aux2051' direct represents '1' with '7917'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-7917'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux562 + aux565 + aux566)))
c Var 'aux2052' direct represents '0' with '-7918'
c Var 'aux2052' direct represents '1' with '7918'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-7918'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux568 + aux571 + aux572)<=1))
c Var 'aux2053' direct represents '0' with '-7919'
c Var 'aux2053' direct represents '1' with '7919'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-7919'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux568 + aux571 + aux572)))
c Var 'aux2054' direct represents '0' with '-7920'
c Var 'aux2054' direct represents '1' with '7920'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-7920'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux574 + aux577 + aux578)<=1))
c Var 'aux2055' direct represents '0' with '-7921'
c Var 'aux2055' direct represents '1' with '7921'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-7921'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux574 + aux577 + aux578)))
c Var 'aux2056' direct represents '0' with '-7922'
c Var 'aux2056' direct represents '1' with '7922'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-7922'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux580 + aux583 + aux584)<=1))
c Var 'aux2057' direct represents '0' with '-7923'
c Var 'aux2057' direct represents '1' with '7923'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-7923'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux580 + aux583 + aux584)))
c Var 'aux2058' direct represents '0' with '-7924'
c Var 'aux2058' direct represents '1' with '7924'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-7924'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux586 + aux589 + aux590)<=1))
c Var 'aux2059' direct represents '0' with '-7925'
c Var 'aux2059' direct represents '1' with '7925'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-7925'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux586 + aux589 + aux590)))
c Var 'aux2060' direct represents '0' with '-7926'
c Var 'aux2060' direct represents '1' with '7926'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-7926'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux592 + aux595 + aux596)<=1))
c Var 'aux2061' direct represents '0' with '-7927'
c Var 'aux2061' direct represents '1' with '7927'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-7927'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux592 + aux595 + aux596)))
c Var 'aux2062' direct represents '0' with '-7928'
c Var 'aux2062' direct represents '1' with '7928'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-7928'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux598 + aux601 + aux602)<=1))
c Var 'aux2063' direct represents '0' with '-7929'
c Var 'aux2063' direct represents '1' with '7929'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-7929'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux598 + aux601 + aux602)))
c Var 'aux2064' direct represents '0' with '-7930'
c Var 'aux2064' direct represents '1' with '7930'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-7930'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux604 + aux607 + aux608)<=1))
c Var 'aux2065' direct represents '0' with '-7931'
c Var 'aux2065' direct represents '1' with '7931'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-7931'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux604 + aux607 + aux608)))
c Var 'aux2066' direct represents '0' with '-7932'
c Var 'aux2066' direct represents '1' with '7932'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-7932'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux610 + aux613 + aux614)<=1))
c Var 'aux2067' direct represents '0' with '-7933'
c Var 'aux2067' direct represents '1' with '7933'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-7933'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux610 + aux613 + aux614)))
c Var 'aux2068' direct represents '0' with '-7934'
c Var 'aux2068' direct represents '1' with '7934'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-7934'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux616 + aux619 + aux620)<=1))
c Var 'aux2069' direct represents '0' with '-7935'
c Var 'aux2069' direct represents '1' with '7935'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-7935'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux616 + aux619 + aux620)))
c Var 'aux2070' direct represents '0' with '-7936'
c Var 'aux2070' direct represents '1' with '7936'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-7936'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux622 + aux625 + aux626)<=1))
c Var 'aux2071' direct represents '0' with '-7937'
c Var 'aux2071' direct represents '1' with '7937'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-7937'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux622 + aux625 + aux626)))
c Var 'aux2072' direct represents '0' with '-7938'
c Var 'aux2072' direct represents '1' with '7938'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-7938'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux628 + aux631 + aux632)<=1))
c Var 'aux2073' direct represents '0' with '-7939'
c Var 'aux2073' direct represents '1' with '7939'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-7939'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux628 + aux631 + aux632)))
c Var 'aux2074' direct represents '0' with '-7940'
c Var 'aux2074' direct represents '1' with '7940'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-7940'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux634 + aux637 + aux638)<=1))
c Var 'aux2075' direct represents '0' with '-7941'
c Var 'aux2075' direct represents '1' with '7941'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-7941'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux634 + aux637 + aux638)))
c Var 'aux2076' direct represents '0' with '-7942'
c Var 'aux2076' direct represents '1' with '7942'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-7942'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux640 + aux643 + aux644)<=1))
c Var 'aux2077' direct represents '0' with '-7943'
c Var 'aux2077' direct represents '1' with '7943'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-7943'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux640 + aux643 + aux644)))
c Var 'aux2078' direct represents '0' with '-7944'
c Var 'aux2078' direct represents '1' with '7944'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-7944'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux646 + aux649 + aux650)<=1))
c Var 'aux2079' direct represents '0' with '-7945'
c Var 'aux2079' direct represents '1' with '7945'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-7945'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux646 + aux649 + aux650)))
c Var 'aux2080' direct represents '0' with '-7946'
c Var 'aux2080' direct represents '1' with '7946'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-7946'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux652 + aux655 + aux656)<=1))
c Var 'aux2081' direct represents '0' with '-7947'
c Var 'aux2081' direct represents '1' with '7947'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-7947'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux652 + aux655 + aux656)))
c Var 'aux2082' direct represents '0' with '-7948'
c Var 'aux2082' direct represents '1' with '7948'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-7948'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux658 + aux661 + aux662)<=1))
c Var 'aux2083' direct represents '0' with '-7949'
c Var 'aux2083' direct represents '1' with '7949'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-7949'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux658 + aux661 + aux662)))
c Var 'aux2084' direct represents '0' with '-7950'
c Var 'aux2084' direct represents '1' with '7950'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-7950'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux664 + aux667 + aux668)<=1))
c Var 'aux2085' direct represents '0' with '-7951'
c Var 'aux2085' direct represents '1' with '7951'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-7951'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux664 + aux667 + aux668)))
c Var 'aux2086' direct represents '0' with '-7952'
c Var 'aux2086' direct represents '1' with '7952'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-7952'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux670 + aux673 + aux674)<=1))
c Var 'aux2087' direct represents '0' with '-7953'
c Var 'aux2087' direct represents '1' with '7953'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-7953'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux670 + aux673 + aux674)))
c Var 'aux2088' direct represents '0' with '-7954'
c Var 'aux2088' direct represents '1' with '7954'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-7954'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux676 + aux679 + aux680)<=1))
c Var 'aux2089' direct represents '0' with '-7955'
c Var 'aux2089' direct represents '1' with '7955'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-7955'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux676 + aux679 + aux680)))
c Var 'aux2090' direct represents '0' with '-7956'
c Var 'aux2090' direct represents '1' with '7956'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-7956'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux682 + aux685 + aux686)<=1))
c Var 'aux2091' direct represents '0' with '-7957'
c Var 'aux2091' direct represents '1' with '7957'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-7957'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux682 + aux685 + aux686)))
c Var 'aux2092' direct represents '0' with '-7958'
c Var 'aux2092' direct represents '1' with '7958'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-7958'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux688 + aux691 + aux692)<=1))
c Var 'aux2093' direct represents '0' with '-7959'
c Var 'aux2093' direct represents '1' with '7959'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-7959'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux688 + aux691 + aux692)))
c Var 'aux2094' direct represents '0' with '-7960'
c Var 'aux2094' direct represents '1' with '7960'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-7960'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux694 + aux697 + aux698)<=1))
c Var 'aux2095' direct represents '0' with '-7961'
c Var 'aux2095' direct represents '1' with '7961'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-7961'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux694 + aux697 + aux698)))
c Var 'aux2096' direct represents '0' with '-7962'
c Var 'aux2096' direct represents '1' with '7962'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-7962'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux700 + aux703 + aux704)<=1))
c Var 'aux2097' direct represents '0' with '-7963'
c Var 'aux2097' direct represents '1' with '7963'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-7963'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux700 + aux703 + aux704)))
c Var 'aux2098' direct represents '0' with '-7964'
c Var 'aux2098' direct represents '1' with '7964'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-7964'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux706 + aux709 + aux710)<=1))
c Var 'aux2099' direct represents '0' with '-7965'
c Var 'aux2099' direct represents '1' with '7965'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-7965'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux706 + aux709 + aux710)))
c Var 'aux2100' direct represents '0' with '-7966'
c Var 'aux2100' direct represents '1' with '7966'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-7966'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux712 + aux715 + aux716)<=1))
c Var 'aux2101' direct represents '0' with '-7967'
c Var 'aux2101' direct represents '1' with '7967'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-7967'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux712 + aux715 + aux716)))
c Var 'aux2102' direct represents '0' with '-7968'
c Var 'aux2102' direct represents '1' with '7968'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-7968'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux718 + aux721 + aux722)<=1))
c Var 'aux2103' direct represents '0' with '-7969'
c Var 'aux2103' direct represents '1' with '7969'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-7969'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux718 + aux721 + aux722)))
c Var 'aux2104' direct represents '0' with '-7970'
c Var 'aux2104' direct represents '1' with '7970'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-7970'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux724 + aux727 + aux728)<=1))
c Var 'aux2105' direct represents '0' with '-7971'
c Var 'aux2105' direct represents '1' with '7971'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-7971'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux724 + aux727 + aux728)))
c Var 'aux2106' direct represents '0' with '-7972'
c Var 'aux2106' direct represents '1' with '7972'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-7972'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux730 + aux733 + aux734)<=1))
c Var 'aux2107' direct represents '0' with '-7973'
c Var 'aux2107' direct represents '1' with '7973'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-7973'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux730 + aux733 + aux734)))
c Var 'aux2108' direct represents '0' with '-7974'
c Var 'aux2108' direct represents '1' with '7974'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-7974'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux736 + aux739 + aux740)<=1))
c Var 'aux2109' direct represents '0' with '-7975'
c Var 'aux2109' direct represents '1' with '7975'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-7975'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux736 + aux739 + aux740)))
c Var 'aux2110' direct represents '0' with '-7976'
c Var 'aux2110' direct represents '1' with '7976'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-7976'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux742 + aux745 + aux746)<=1))
c Var 'aux2111' direct represents '0' with '-7977'
c Var 'aux2111' direct represents '1' with '7977'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-7977'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux742 + aux745 + aux746)))
c Var 'aux2112' direct represents '0' with '-7978'
c Var 'aux2112' direct represents '1' with '7978'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-7978'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux748 + aux751 + aux752)<=1))
c Var 'aux2113' direct represents '0' with '-7979'
c Var 'aux2113' direct represents '1' with '7979'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-7979'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux748 + aux751 + aux752)))
c Var 'aux2114' direct represents '0' with '-7980'
c Var 'aux2114' direct represents '1' with '7980'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-7980'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux754 + aux757 + aux758)<=1))
c Var 'aux2115' direct represents '0' with '-7981'
c Var 'aux2115' direct represents '1' with '7981'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-7981'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux754 + aux757 + aux758)))
c Var 'aux2116' direct represents '0' with '-7982'
c Var 'aux2116' direct represents '1' with '7982'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-7982'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux760 + aux763 + aux764)<=1))
c Var 'aux2117' direct represents '0' with '-7983'
c Var 'aux2117' direct represents '1' with '7983'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-7983'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux760 + aux763 + aux764)))
c Var 'aux2118' direct represents '0' with '-7984'
c Var 'aux2118' direct represents '1' with '7984'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-7984'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux766 + aux769 + aux770)<=1))
c Var 'aux2119' direct represents '0' with '-7985'
c Var 'aux2119' direct represents '1' with '7985'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-7985'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux766 + aux769 + aux770)))
c Var 'aux2120' direct represents '0' with '-7986'
c Var 'aux2120' direct represents '1' with '7986'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-7986'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux772 + aux775 + aux776)<=1))
c Var 'aux2121' direct represents '0' with '-7987'
c Var 'aux2121' direct represents '1' with '7987'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-7987'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux772 + aux775 + aux776)))
c Var 'aux2122' direct represents '0' with '-7988'
c Var 'aux2122' direct represents '1' with '7988'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-7988'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux778 + aux781 + aux782)<=1))
c Var 'aux2123' direct represents '0' with '-7989'
c Var 'aux2123' direct represents '1' with '7989'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-7989'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux778 + aux781 + aux782)))
c Var 'aux2124' direct represents '0' with '-7990'
c Var 'aux2124' direct represents '1' with '7990'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-7990'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux784 + aux787 + aux788)<=1))
c Var 'aux2125' direct represents '0' with '-7991'
c Var 'aux2125' direct represents '1' with '7991'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-7991'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux784 + aux787 + aux788)))
c Var 'aux2126' direct represents '0' with '-7992'
c Var 'aux2126' direct represents '1' with '7992'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-7992'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux790 + aux793 + aux794)<=1))
c Var 'aux2127' direct represents '0' with '-7993'
c Var 'aux2127' direct represents '1' with '7993'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-7993'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux790 + aux793 + aux794)))
c Var 'aux2128' direct represents '0' with '-7994'
c Var 'aux2128' direct represents '1' with '7994'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-7994'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux796 + aux799 + aux800)<=1))
c Var 'aux2129' direct represents '0' with '-7995'
c Var 'aux2129' direct represents '1' with '7995'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-7995'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux796 + aux799 + aux800)))
c Var 'aux2130' direct represents '0' with '-7996'
c Var 'aux2130' direct represents '1' with '7996'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-7996'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux802 + aux805 + aux806)<=1))
c Var 'aux2131' direct represents '0' with '-7997'
c Var 'aux2131' direct represents '1' with '7997'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-7997'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux802 + aux805 + aux806)))
c Var 'aux2132' direct represents '0' with '-7998'
c Var 'aux2132' direct represents '1' with '7998'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-7998'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux808 + aux811 + aux812)<=1))
c Var 'aux2133' direct represents '0' with '-7999'
c Var 'aux2133' direct represents '1' with '7999'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-7999'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux808 + aux811 + aux812)))
c Var 'aux2134' direct represents '0' with '-8000'
c Var 'aux2134' direct represents '1' with '8000'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8000'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux814 + aux817 + aux818)<=1))
c Var 'aux2135' direct represents '0' with '-8001'
c Var 'aux2135' direct represents '1' with '8001'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8001'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux814 + aux817 + aux818)))
c Var 'aux2136' direct represents '0' with '-8002'
c Var 'aux2136' direct represents '1' with '8002'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8002'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux820 + aux823 + aux824)<=1))
c Var 'aux2137' direct represents '0' with '-8003'
c Var 'aux2137' direct represents '1' with '8003'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8003'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux820 + aux823 + aux824)))
c Var 'aux2138' direct represents '0' with '-8004'
c Var 'aux2138' direct represents '1' with '8004'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8004'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux826 + aux829 + aux830)<=1))
c Var 'aux2139' direct represents '0' with '-8005'
c Var 'aux2139' direct represents '1' with '8005'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8005'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux826 + aux829 + aux830)))
c Var 'aux2140' direct represents '0' with '-8006'
c Var 'aux2140' direct represents '1' with '8006'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8006'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux832 + aux835 + aux836)<=1))
c Var 'aux2141' direct represents '0' with '-8007'
c Var 'aux2141' direct represents '1' with '8007'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8007'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux832 + aux835 + aux836)))
c Var 'aux2142' direct represents '0' with '-8008'
c Var 'aux2142' direct represents '1' with '8008'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8008'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux838 + aux841 + aux842)<=1))
c Var 'aux2143' direct represents '0' with '-8009'
c Var 'aux2143' direct represents '1' with '8009'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8009'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux838 + aux841 + aux842)))
c Var 'aux2144' direct represents '0' with '-8010'
c Var 'aux2144' direct represents '1' with '8010'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8010'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux844 + aux847 + aux848)<=1))
c Var 'aux2145' direct represents '0' with '-8011'
c Var 'aux2145' direct represents '1' with '8011'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8011'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux844 + aux847 + aux848)))
c Var 'aux2146' direct represents '0' with '-8012'
c Var 'aux2146' direct represents '1' with '8012'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8012'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux850 + aux853 + aux854)<=1))
c Var 'aux2147' direct represents '0' with '-8013'
c Var 'aux2147' direct represents '1' with '8013'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8013'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux850 + aux853 + aux854)))
c Var 'aux2148' direct represents '0' with '-8014'
c Var 'aux2148' direct represents '1' with '8014'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8014'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux856 + aux859 + aux860)<=1))
c Var 'aux2149' direct represents '0' with '-8015'
c Var 'aux2149' direct represents '1' with '8015'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8015'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux856 + aux859 + aux860)))
c Var 'aux2150' direct represents '0' with '-8016'
c Var 'aux2150' direct represents '1' with '8016'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8016'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux862 + aux865 + aux866)<=1))
c Var 'aux2151' direct represents '0' with '-8017'
c Var 'aux2151' direct represents '1' with '8017'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8017'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux862 + aux865 + aux866)))
c Var 'aux2152' direct represents '0' with '-8018'
c Var 'aux2152' direct represents '1' with '8018'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8018'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux868 + aux871 + aux872)<=1))
c Var 'aux2153' direct represents '0' with '-8019'
c Var 'aux2153' direct represents '1' with '8019'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8019'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux868 + aux871 + aux872)))
c Var 'aux2154' direct represents '0' with '-8020'
c Var 'aux2154' direct represents '1' with '8020'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8020'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux874 + aux877 + aux878)<=1))
c Var 'aux2155' direct represents '0' with '-8021'
c Var 'aux2155' direct represents '1' with '8021'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8021'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux874 + aux877 + aux878)))
c Var 'aux2156' direct represents '0' with '-8022'
c Var 'aux2156' direct represents '1' with '8022'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8022'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux880 + aux883 + aux884)<=1))
c Var 'aux2157' direct represents '0' with '-8023'
c Var 'aux2157' direct represents '1' with '8023'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8023'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux880 + aux883 + aux884)))
c Var 'aux2158' direct represents '0' with '-8024'
c Var 'aux2158' direct represents '1' with '8024'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8024'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux886 + aux889 + aux890)<=1))
c Var 'aux2159' direct represents '0' with '-8025'
c Var 'aux2159' direct represents '1' with '8025'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8025'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux886 + aux889 + aux890)))
c Var 'aux2160' direct represents '0' with '-8026'
c Var 'aux2160' direct represents '1' with '8026'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8026'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux892 + aux895 + aux896)<=1))
c Var 'aux2161' direct represents '0' with '-8027'
c Var 'aux2161' direct represents '1' with '8027'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8027'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux892 + aux895 + aux896)))
c Var 'aux2162' direct represents '0' with '-8028'
c Var 'aux2162' direct represents '1' with '8028'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8028'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux898 + aux901 + aux902)<=1))
c Var 'aux2163' direct represents '0' with '-8029'
c Var 'aux2163' direct represents '1' with '8029'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8029'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux898 + aux901 + aux902)))
c Var 'aux2164' direct represents '0' with '-8030'
c Var 'aux2164' direct represents '1' with '8030'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8030'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux904 + aux907 + aux908)<=1))
c Var 'aux2165' direct represents '0' with '-8031'
c Var 'aux2165' direct represents '1' with '8031'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8031'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux904 + aux907 + aux908)))
c Var 'aux2166' direct represents '0' with '-8032'
c Var 'aux2166' direct represents '1' with '8032'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8032'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux910 + aux913 + aux914)<=1))
c Var 'aux2167' direct represents '0' with '-8033'
c Var 'aux2167' direct represents '1' with '8033'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8033'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux910 + aux913 + aux914)))
c Var 'aux2168' direct represents '0' with '-8034'
c Var 'aux2168' direct represents '1' with '8034'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8034'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux916 + aux919 + aux920)<=1))
c Var 'aux2169' direct represents '0' with '-8035'
c Var 'aux2169' direct represents '1' with '8035'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8035'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux916 + aux919 + aux920)))
c Var 'aux2170' direct represents '0' with '-8036'
c Var 'aux2170' direct represents '1' with '8036'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8036'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux922 + aux925 + aux926)<=1))
c Var 'aux2171' direct represents '0' with '-8037'
c Var 'aux2171' direct represents '1' with '8037'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8037'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux922 + aux925 + aux926)))
c Var 'aux2172' direct represents '0' with '-8038'
c Var 'aux2172' direct represents '1' with '8038'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8038'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux928 + aux931 + aux932)<=1))
c Var 'aux2173' direct represents '0' with '-8039'
c Var 'aux2173' direct represents '1' with '8039'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8039'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux928 + aux931 + aux932)))
c Var 'aux2174' direct represents '0' with '-8040'
c Var 'aux2174' direct represents '1' with '8040'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8040'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux934 + aux937 + aux938)<=1))
c Var 'aux2175' direct represents '0' with '-8041'
c Var 'aux2175' direct represents '1' with '8041'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8041'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux934 + aux937 + aux938)))
c Var 'aux2176' direct represents '0' with '-8042'
c Var 'aux2176' direct represents '1' with '8042'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8042'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux940 + aux943 + aux944)<=1))
c Var 'aux2177' direct represents '0' with '-8043'
c Var 'aux2177' direct represents '1' with '8043'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8043'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux940 + aux943 + aux944)))
c Var 'aux2178' direct represents '0' with '-8044'
c Var 'aux2178' direct represents '1' with '8044'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8044'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux946 + aux949 + aux950)<=1))
c Var 'aux2179' direct represents '0' with '-8045'
c Var 'aux2179' direct represents '1' with '8045'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8045'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux946 + aux949 + aux950)))
c Var 'aux2180' direct represents '0' with '-8046'
c Var 'aux2180' direct represents '1' with '8046'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8046'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux952 + aux955 + aux956)<=1))
c Var 'aux2181' direct represents '0' with '-8047'
c Var 'aux2181' direct represents '1' with '8047'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8047'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux952 + aux955 + aux956)))
c Var 'aux2182' direct represents '0' with '-8048'
c Var 'aux2182' direct represents '1' with '8048'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8048'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux958 + aux961 + aux962)<=1))
c Var 'aux2183' direct represents '0' with '-8049'
c Var 'aux2183' direct represents '1' with '8049'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8049'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux958 + aux961 + aux962)))
c Var 'aux2184' direct represents '0' with '-8050'
c Var 'aux2184' direct represents '1' with '8050'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8050'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux964 + aux967 + aux968)<=1))
c Var 'aux2185' direct represents '0' with '-8051'
c Var 'aux2185' direct represents '1' with '8051'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8051'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux964 + aux967 + aux968)))
c Var 'aux2186' direct represents '0' with '-8052'
c Var 'aux2186' direct represents '1' with '8052'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8052'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux970 + aux973 + aux974)<=1))
c Var 'aux2187' direct represents '0' with '-8053'
c Var 'aux2187' direct represents '1' with '8053'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8053'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux970 + aux973 + aux974)))
c Var 'aux2188' direct represents '0' with '-8054'
c Var 'aux2188' direct represents '1' with '8054'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8054'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux976 + aux979 + aux980)<=1))
c Var 'aux2189' direct represents '0' with '-8055'
c Var 'aux2189' direct represents '1' with '8055'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8055'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux976 + aux979 + aux980)))
c Var 'aux2190' direct represents '0' with '-8056'
c Var 'aux2190' direct represents '1' with '8056'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8056'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux982 + aux985 + aux986)<=1))
c Var 'aux2191' direct represents '0' with '-8057'
c Var 'aux2191' direct represents '1' with '8057'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8057'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux982 + aux985 + aux986)))
c Var 'aux2192' direct represents '0' with '-8058'
c Var 'aux2192' direct represents '1' with '8058'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8058'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux988 + aux991 + aux992)<=1))
c Var 'aux2193' direct represents '0' with '-8059'
c Var 'aux2193' direct represents '1' with '8059'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8059'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux988 + aux991 + aux992)))
c Var 'aux2194' direct represents '0' with '-8060'
c Var 'aux2194' direct represents '1' with '8060'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8060'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux994 + aux997 + aux998)<=1))
c Var 'aux2195' direct represents '0' with '-8061'
c Var 'aux2195' direct represents '1' with '8061'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8061'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux994 + aux997 + aux998)))
c Var 'aux2196' direct represents '0' with '-8062'
c Var 'aux2196' direct represents '1' with '8062'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8062'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux1000 + aux1003 + aux1004)<=1))
c Var 'aux2197' direct represents '0' with '-8063'
c Var 'aux2197' direct represents '1' with '8063'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8063'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux1000 + aux1003 + aux1004)))
c Var 'aux2198' direct represents '0' with '-8064'
c Var 'aux2198' direct represents '1' with '8064'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8064'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux1006 + aux1009 + aux1010)<=1))
c Var 'aux2199' direct represents '0' with '-8065'
c Var 'aux2199' direct represents '1' with '8065'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8065'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux1006 + aux1009 + aux1010)))
c Var 'aux2200' direct represents '0' with '-8066'
c Var 'aux2200' direct represents '1' with '8066'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8066'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux1012 + aux1015 + aux1016)<=1))
c Var 'aux2201' direct represents '0' with '-8067'
c Var 'aux2201' direct represents '1' with '8067'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8067'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux1012 + aux1015 + aux1016)))
c Var 'aux2202' direct represents '0' with '-8068'
c Var 'aux2202' direct represents '1' with '8068'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8068'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux1018 + aux1021 + aux1022)<=1))
c Var 'aux2203' direct represents '0' with '-8069'
c Var 'aux2203' direct represents '1' with '8069'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8069'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux1018 + aux1021 + aux1022)))
c Var 'aux2204' direct represents '0' with '-8070'
c Var 'aux2204' direct represents '1' with '8070'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8070'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux1024 + aux1027 + aux1028)<=1))
c Var 'aux2205' direct represents '0' with '-8071'
c Var 'aux2205' direct represents '1' with '8071'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8071'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux1024 + aux1027 + aux1028)))
c Var 'aux2206' direct represents '0' with '-8072'
c Var 'aux2206' direct represents '1' with '8072'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8072'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux1030 + aux1033 + aux1034)<=1))
c Var 'aux2207' direct represents '0' with '-8073'
c Var 'aux2207' direct represents '1' with '8073'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8073'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux1030 + aux1033 + aux1034)))
c Var 'aux2208' direct represents '0' with '-8074'
c Var 'aux2208' direct represents '1' with '8074'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8074'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux1036 + aux1039 + aux1040)<=1))
c Var 'aux2209' direct represents '0' with '-8075'
c Var 'aux2209' direct represents '1' with '8075'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8075'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux1036 + aux1039 + aux1040)))
c Var 'aux2210' direct represents '0' with '-8076'
c Var 'aux2210' direct represents '1' with '8076'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8076'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux1042 + aux1045 + aux1046)<=1))
c Var 'aux2211' direct represents '0' with '-8077'
c Var 'aux2211' direct represents '1' with '8077'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8077'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux1042 + aux1045 + aux1046)))
c Var 'aux2212' direct represents '0' with '-8078'
c Var 'aux2212' direct represents '1' with '8078'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8078'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux1048 + aux1051 + aux1052)<=1))
c Var 'aux2213' direct represents '0' with '-8079'
c Var 'aux2213' direct represents '1' with '8079'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8079'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux1048 + aux1051 + aux1052)))
c Var 'aux2214' direct represents '0' with '-8080'
c Var 'aux2214' direct represents '1' with '8080'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8080'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux1054 + aux1057 + aux1058)<=1))
c Var 'aux2215' direct represents '0' with '-8081'
c Var 'aux2215' direct represents '1' with '8081'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8081'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux1054 + aux1057 + aux1058)))
c Var 'aux2216' direct represents '0' with '-8082'
c Var 'aux2216' direct represents '1' with '8082'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8082'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1060 + aux1063 + aux1064)<=1))
c Var 'aux2217' direct represents '0' with '-8083'
c Var 'aux2217' direct represents '1' with '8083'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8083'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1060 + aux1063 + aux1064)))
c Var 'aux2218' direct represents '0' with '-8084'
c Var 'aux2218' direct represents '1' with '8084'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8084'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1066 + aux1069 + aux1070)<=1))
c Var 'aux2219' direct represents '0' with '-8085'
c Var 'aux2219' direct represents '1' with '8085'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8085'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1066 + aux1069 + aux1070)))
c Var 'aux2220' direct represents '0' with '-8086'
c Var 'aux2220' direct represents '1' with '8086'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8086'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1072 + aux1075 + aux1076)<=1))
c Var 'aux2221' direct represents '0' with '-8087'
c Var 'aux2221' direct represents '1' with '8087'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8087'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1072 + aux1075 + aux1076)))
c Var 'aux2222' direct represents '0' with '-8088'
c Var 'aux2222' direct represents '1' with '8088'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8088'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1078 + aux1081 + aux1082)<=1))
c Var 'aux2223' direct represents '0' with '-8089'
c Var 'aux2223' direct represents '1' with '8089'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8089'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1078 + aux1081 + aux1082)))
c Var 'aux2224' direct represents '0' with '-8090'
c Var 'aux2224' direct represents '1' with '8090'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8090'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1084 + aux1087 + aux1088)<=1))
c Var 'aux2225' direct represents '0' with '-8091'
c Var 'aux2225' direct represents '1' with '8091'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8091'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1084 + aux1087 + aux1088)))
c Var 'aux2226' direct represents '0' with '-8092'
c Var 'aux2226' direct represents '1' with '8092'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8092'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1090 + aux1093 + aux1094)<=1))
c Var 'aux2227' direct represents '0' with '-8093'
c Var 'aux2227' direct represents '1' with '8093'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8093'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1090 + aux1093 + aux1094)))
c Var 'aux2228' direct represents '0' with '-8094'
c Var 'aux2228' direct represents '1' with '8094'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8094'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1096 + aux1099 + aux1100)<=1))
c Var 'aux2229' direct represents '0' with '-8095'
c Var 'aux2229' direct represents '1' with '8095'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8095'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1096 + aux1099 + aux1100)))
c Var 'aux2230' direct represents '0' with '-8096'
c Var 'aux2230' direct represents '1' with '8096'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8096'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1102 + aux1105 + aux1106)<=1))
c Var 'aux2231' direct represents '0' with '-8097'
c Var 'aux2231' direct represents '1' with '8097'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8097'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1102 + aux1105 + aux1106)))
c Var 'aux2232' direct represents '0' with '-8098'
c Var 'aux2232' direct represents '1' with '8098'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8098'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1108 + aux1111 + aux1112)<=1))
c Var 'aux2233' direct represents '0' with '-8099'
c Var 'aux2233' direct represents '1' with '8099'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8099'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1108 + aux1111 + aux1112)))
c Var 'aux2234' direct represents '0' with '-8100'
c Var 'aux2234' direct represents '1' with '8100'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8100'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1114 + aux1117 + aux1118)<=1))
c Var 'aux2235' direct represents '0' with '-8101'
c Var 'aux2235' direct represents '1' with '8101'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8101'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1114 + aux1117 + aux1118)))
c Var 'aux2236' direct represents '0' with '-8102'
c Var 'aux2236' direct represents '1' with '8102'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8102'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1120 + aux1123 + aux1124)<=1))
c Var 'aux2237' direct represents '0' with '-8103'
c Var 'aux2237' direct represents '1' with '8103'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8103'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1120 + aux1123 + aux1124)))
c Var 'aux2238' direct represents '0' with '-8104'
c Var 'aux2238' direct represents '1' with '8104'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8104'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1126 + aux1129 + aux1130)<=1))
c Var 'aux2239' direct represents '0' with '-8105'
c Var 'aux2239' direct represents '1' with '8105'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8105'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1126 + aux1129 + aux1130)))
c Var 'aux2240' direct represents '0' with '-8106'
c Var 'aux2240' direct represents '1' with '8106'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8106'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1132 + aux1135 + aux1136)<=1))
c Var 'aux2241' direct represents '0' with '-8107'
c Var 'aux2241' direct represents '1' with '8107'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8107'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1132 + aux1135 + aux1136)))
c Var 'aux2242' direct represents '0' with '-8108'
c Var 'aux2242' direct represents '1' with '8108'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8108'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1138 + aux1141 + aux1142)<=1))
c Var 'aux2243' direct represents '0' with '-8109'
c Var 'aux2243' direct represents '1' with '8109'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8109'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1138 + aux1141 + aux1142)))
c Var 'aux2244' direct represents '0' with '-8110'
c Var 'aux2244' direct represents '1' with '8110'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8110'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1144 + aux1147 + aux1148)<=1))
c Var 'aux2245' direct represents '0' with '-8111'
c Var 'aux2245' direct represents '1' with '8111'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8111'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1144 + aux1147 + aux1148)))
c Var 'aux2246' direct represents '0' with '-8112'
c Var 'aux2246' direct represents '1' with '8112'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8112'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1150 + aux1153 + aux1154)<=1))
c Var 'aux2247' direct represents '0' with '-8113'
c Var 'aux2247' direct represents '1' with '8113'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8113'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1150 + aux1153 + aux1154)))
c Var 'aux2248' direct represents '0' with '-8114'
c Var 'aux2248' direct represents '1' with '8114'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8114'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1156 + aux1159 + aux1160)<=1))
c Var 'aux2249' direct represents '0' with '-8115'
c Var 'aux2249' direct represents '1' with '8115'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8115'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1156 + aux1159 + aux1160)))
c Var 'aux2250' direct represents '0' with '-8116'
c Var 'aux2250' direct represents '1' with '8116'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8116'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1162 + aux1165 + aux1166)<=1))
c Var 'aux2251' direct represents '0' with '-8117'
c Var 'aux2251' direct represents '1' with '8117'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8117'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1162 + aux1165 + aux1166)))
c Var 'aux2252' direct represents '0' with '-8118'
c Var 'aux2252' direct represents '1' with '8118'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8118'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1168 + aux1171 + aux1172)<=1))
c Var 'aux2253' direct represents '0' with '-8119'
c Var 'aux2253' direct represents '1' with '8119'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8119'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1168 + aux1171 + aux1172)))
c Var 'aux2254' direct represents '0' with '-8120'
c Var 'aux2254' direct represents '1' with '8120'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8120'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1174 + aux1177 + aux1178)<=1))
c Var 'aux2255' direct represents '0' with '-8121'
c Var 'aux2255' direct represents '1' with '8121'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8121'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1174 + aux1177 + aux1178)))
c Var 'aux2256' direct represents '0' with '-8122'
c Var 'aux2256' direct represents '1' with '8122'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8122'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1180 + aux1183 + aux1184)<=1))
c Var 'aux2257' direct represents '0' with '-8123'
c Var 'aux2257' direct represents '1' with '8123'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8123'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1180 + aux1183 + aux1184)))
c Var 'aux2258' direct represents '0' with '-8124'
c Var 'aux2258' direct represents '1' with '8124'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8124'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1186 + aux1189 + aux1190)<=1))
c Var 'aux2259' direct represents '0' with '-8125'
c Var 'aux2259' direct represents '1' with '8125'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8125'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1186 + aux1189 + aux1190)))
c Var 'aux2260' direct represents '0' with '-8126'
c Var 'aux2260' direct represents '1' with '8126'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8126'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1192 + aux1195 + aux1196)<=1))
c Var 'aux2261' direct represents '0' with '-8127'
c Var 'aux2261' direct represents '1' with '8127'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8127'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1192 + aux1195 + aux1196)))
c Var 'aux2262' direct represents '0' with '-8128'
c Var 'aux2262' direct represents '1' with '8128'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8128'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1198 + aux1201 + aux1202)<=1))
c Var 'aux2263' direct represents '0' with '-8129'
c Var 'aux2263' direct represents '1' with '8129'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8129'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1198 + aux1201 + aux1202)))
c Var 'aux2264' direct represents '0' with '-8130'
c Var 'aux2264' direct represents '1' with '8130'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8130'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1204 + aux1207 + aux1208)<=1))
c Var 'aux2265' direct represents '0' with '-8131'
c Var 'aux2265' direct represents '1' with '8131'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8131'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1204 + aux1207 + aux1208)))
c Var 'aux2266' direct represents '0' with '-8132'
c Var 'aux2266' direct represents '1' with '8132'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8132'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1210 + aux1213 + aux1214)<=1))
c Var 'aux2267' direct represents '0' with '-8133'
c Var 'aux2267' direct represents '1' with '8133'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8133'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1210 + aux1213 + aux1214)))
c Var 'aux2268' direct represents '0' with '-8134'
c Var 'aux2268' direct represents '1' with '8134'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8134'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1216 + aux1219 + aux1220)<=1))
c Var 'aux2269' direct represents '0' with '-8135'
c Var 'aux2269' direct represents '1' with '8135'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8135'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1216 + aux1219 + aux1220)))
c Var 'aux2270' direct represents '0' with '-8136'
c Var 'aux2270' direct represents '1' with '8136'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8136'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1222 + aux1225 + aux1226)<=1))
c Var 'aux2271' direct represents '0' with '-8137'
c Var 'aux2271' direct represents '1' with '8137'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8137'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1222 + aux1225 + aux1226)))
c Var 'aux2272' direct represents '0' with '-8138'
c Var 'aux2272' direct represents '1' with '8138'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8138'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1228 + aux1231 + aux1232)<=1))
c Var 'aux2273' direct represents '0' with '-8139'
c Var 'aux2273' direct represents '1' with '8139'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8139'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1228 + aux1231 + aux1232)))
c Var 'aux2274' direct represents '0' with '-8140'
c Var 'aux2274' direct represents '1' with '8140'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8140'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1234 + aux1237 + aux1238)<=1))
c Var 'aux2275' direct represents '0' with '-8141'
c Var 'aux2275' direct represents '1' with '8141'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8141'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1234 + aux1237 + aux1238)))
c Var 'aux2276' direct represents '0' with '-8142'
c Var 'aux2276' direct represents '1' with '8142'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8142'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1240 + aux1243 + aux1244)<=1))
c Var 'aux2277' direct represents '0' with '-8143'
c Var 'aux2277' direct represents '1' with '8143'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8143'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1240 + aux1243 + aux1244)))
c Var 'aux2278' direct represents '0' with '-8144'
c Var 'aux2278' direct represents '1' with '8144'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8144'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1246 + aux1249 + aux1250)<=1))
c Var 'aux2279' direct represents '0' with '-8145'
c Var 'aux2279' direct represents '1' with '8145'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8145'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1246 + aux1249 + aux1250)))
c Var 'aux2280' direct represents '0' with '-8146'
c Var 'aux2280' direct represents '1' with '8146'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8146'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1252 + aux1255 + aux1256)<=1))
c Var 'aux2281' direct represents '0' with '-8147'
c Var 'aux2281' direct represents '1' with '8147'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8147'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1252 + aux1255 + aux1256)))
c Var 'aux2282' direct represents '0' with '-8148'
c Var 'aux2282' direct represents '1' with '8148'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8148'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1258 + aux1261 + aux1262)<=1))
c Var 'aux2283' direct represents '0' with '-8149'
c Var 'aux2283' direct represents '1' with '8149'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8149'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1258 + aux1261 + aux1262)))
c Var 'aux2284' direct represents '0' with '-8150'
c Var 'aux2284' direct represents '1' with '8150'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8150'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1264 + aux1267 + aux1268)<=1))
c Var 'aux2285' direct represents '0' with '-8151'
c Var 'aux2285' direct represents '1' with '8151'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8151'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1264 + aux1267 + aux1268)))
c Var 'aux2286' direct represents '0' with '-8152'
c Var 'aux2286' direct represents '1' with '8152'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8152'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1270 + aux1273 + aux1274)<=1))
c Var 'aux2287' direct represents '0' with '-8153'
c Var 'aux2287' direct represents '1' with '8153'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8153'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1270 + aux1273 + aux1274)))
c Var 'aux2288' direct represents '0' with '-8154'
c Var 'aux2288' direct represents '1' with '8154'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8154'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1276 + aux1279 + aux1280)<=1))
c Var 'aux2289' direct represents '0' with '-8155'
c Var 'aux2289' direct represents '1' with '8155'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8155'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1276 + aux1279 + aux1280)))
c Var 'aux2290' direct represents '0' with '-8156'
c Var 'aux2290' direct represents '1' with '8156'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8156'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1282 + aux1285 + aux1286)<=1))
c Var 'aux2291' direct represents '0' with '-8157'
c Var 'aux2291' direct represents '1' with '8157'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8157'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1282 + aux1285 + aux1286)))
c Var 'aux2292' direct represents '0' with '-8158'
c Var 'aux2292' direct represents '1' with '8158'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8158'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1288 + aux1291 + aux1292)<=1))
c Var 'aux2293' direct represents '0' with '-8159'
c Var 'aux2293' direct represents '1' with '8159'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8159'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1288 + aux1291 + aux1292)))
c Var 'aux2294' direct represents '0' with '-8160'
c Var 'aux2294' direct represents '1' with '8160'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8160'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1294 + aux1297 + aux1298)<=1))
c Var 'aux2295' direct represents '0' with '-8161'
c Var 'aux2295' direct represents '1' with '8161'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8161'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1294 + aux1297 + aux1298)))
c Var 'aux2296' direct represents '0' with '-8162'
c Var 'aux2296' direct represents '1' with '8162'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8162'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1300 + aux1303 + aux1304)<=1))
c Var 'aux2297' direct represents '0' with '-8163'
c Var 'aux2297' direct represents '1' with '8163'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8163'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1300 + aux1303 + aux1304)))
c Var 'aux2298' direct represents '0' with '-8164'
c Var 'aux2298' direct represents '1' with '8164'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8164'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1306 + aux1309 + aux1310)<=1))
c Var 'aux2299' direct represents '0' with '-8165'
c Var 'aux2299' direct represents '1' with '8165'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8165'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1306 + aux1309 + aux1310)))
c Var 'aux2300' direct represents '0' with '-8166'
c Var 'aux2300' direct represents '1' with '8166'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8166'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1312 + aux1315 + aux1316)<=1))
c Var 'aux2301' direct represents '0' with '-8167'
c Var 'aux2301' direct represents '1' with '8167'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8167'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1312 + aux1315 + aux1316)))
c Var 'aux2302' direct represents '0' with '-8168'
c Var 'aux2302' direct represents '1' with '8168'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8168'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1318 + aux1321 + aux1322)<=1))
c Var 'aux2303' direct represents '0' with '-8169'
c Var 'aux2303' direct represents '1' with '8169'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8169'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1318 + aux1321 + aux1322)))
c Var 'aux2304' direct represents '0' with '-8170'
c Var 'aux2304' direct represents '1' with '8170'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8170'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1324 + aux1327 + aux1328)<=1))
c Var 'aux2305' direct represents '0' with '-8171'
c Var 'aux2305' direct represents '1' with '8171'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8171'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1324 + aux1327 + aux1328)))
c Var 'aux2306' direct represents '0' with '-8172'
c Var 'aux2306' direct represents '1' with '8172'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8172'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1330 + aux1333 + aux1334)<=1))
c Var 'aux2307' direct represents '0' with '-8173'
c Var 'aux2307' direct represents '1' with '8173'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8173'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1330 + aux1333 + aux1334)))
c Var 'aux2308' direct represents '0' with '-8174'
c Var 'aux2308' direct represents '1' with '8174'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8174'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1336 + aux1339 + aux1340)<=1))
c Var 'aux2309' direct represents '0' with '-8175'
c Var 'aux2309' direct represents '1' with '8175'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8175'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1336 + aux1339 + aux1340)))
c Var 'aux2310' direct represents '0' with '-8176'
c Var 'aux2310' direct represents '1' with '8176'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8176'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1342 + aux1345 + aux1346)<=1))
c Var 'aux2311' direct represents '0' with '-8177'
c Var 'aux2311' direct represents '1' with '8177'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8177'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1342 + aux1345 + aux1346)))
c Var 'aux2312' direct represents '0' with '-8178'
c Var 'aux2312' direct represents '1' with '8178'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8178'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1348 + aux1351 + aux1352)<=1))
c Var 'aux2313' direct represents '0' with '-8179'
c Var 'aux2313' direct represents '1' with '8179'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8179'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1348 + aux1351 + aux1352)))
c Var 'aux2314' direct represents '0' with '-8180'
c Var 'aux2314' direct represents '1' with '8180'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8180'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1354 + aux1357 + aux1358)<=1))
c Var 'aux2315' direct represents '0' with '-8181'
c Var 'aux2315' direct represents '1' with '8181'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8181'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1354 + aux1357 + aux1358)))
c Var 'aux2316' direct represents '0' with '-8182'
c Var 'aux2316' direct represents '1' with '8182'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8182'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1360 + aux1363 + aux1364)<=1))
c Var 'aux2317' direct represents '0' with '-8183'
c Var 'aux2317' direct represents '1' with '8183'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8183'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1360 + aux1363 + aux1364)))
c Var 'aux2318' direct represents '0' with '-8184'
c Var 'aux2318' direct represents '1' with '8184'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8184'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1366 + aux1369 + aux1370)<=1))
c Var 'aux2319' direct represents '0' with '-8185'
c Var 'aux2319' direct represents '1' with '8185'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8185'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1366 + aux1369 + aux1370)))
c Var 'aux2320' direct represents '0' with '-8186'
c Var 'aux2320' direct represents '1' with '8186'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8186'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1372 + aux1375 + aux1376)<=1))
c Var 'aux2321' direct represents '0' with '-8187'
c Var 'aux2321' direct represents '1' with '8187'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8187'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1372 + aux1375 + aux1376)))
c Var 'aux2322' direct represents '0' with '-8188'
c Var 'aux2322' direct represents '1' with '8188'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8188'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1378 + aux1381 + aux1382)<=1))
c Var 'aux2323' direct represents '0' with '-8189'
c Var 'aux2323' direct represents '1' with '8189'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8189'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1378 + aux1381 + aux1382)))
c Var 'aux2324' direct represents '0' with '-8190'
c Var 'aux2324' direct represents '1' with '8190'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8190'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1384 + aux1387 + aux1388)<=1))
c Var 'aux2325' direct represents '0' with '-8191'
c Var 'aux2325' direct represents '1' with '8191'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8191'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1384 + aux1387 + aux1388)))
c Var 'aux2326' direct represents '0' with '-8192'
c Var 'aux2326' direct represents '1' with '8192'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8192'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1390 + aux1393 + aux1394)<=1))
c Var 'aux2327' direct represents '0' with '-8193'
c Var 'aux2327' direct represents '1' with '8193'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8193'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1390 + aux1393 + aux1394)))
c Var 'aux2328' direct represents '0' with '-8194'
c Var 'aux2328' direct represents '1' with '8194'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8194'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1396 + aux1399 + aux1400)<=1))
c Var 'aux2329' direct represents '0' with '-8195'
c Var 'aux2329' direct represents '1' with '8195'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8195'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1396 + aux1399 + aux1400)))
c Var 'aux2330' direct represents '0' with '-8196'
c Var 'aux2330' direct represents '1' with '8196'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8196'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1402 + aux1405 + aux1406)<=1))
c Var 'aux2331' direct represents '0' with '-8197'
c Var 'aux2331' direct represents '1' with '8197'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8197'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1402 + aux1405 + aux1406)))
c Var 'aux2332' direct represents '0' with '-8198'
c Var 'aux2332' direct represents '1' with '8198'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8198'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1408 + aux1411 + aux1412)<=1))
c Var 'aux2333' direct represents '0' with '-8199'
c Var 'aux2333' direct represents '1' with '8199'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8199'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1408 + aux1411 + aux1412)))
c Var 'aux2334' direct represents '0' with '-8200'
c Var 'aux2334' direct represents '1' with '8200'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8200'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1414 + aux1417 + aux1418)<=1))
c Var 'aux2335' direct represents '0' with '-8201'
c Var 'aux2335' direct represents '1' with '8201'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8201'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1414 + aux1417 + aux1418)))
c Var 'aux2336' direct represents '0' with '-8202'
c Var 'aux2336' direct represents '1' with '8202'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8202'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1420 + aux1423 + aux1424)<=1))
c Var 'aux2337' direct represents '0' with '-8203'
c Var 'aux2337' direct represents '1' with '8203'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8203'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1420 + aux1423 + aux1424)))
c Var 'aux2338' direct represents '0' with '-8204'
c Var 'aux2338' direct represents '1' with '8204'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8204'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1426 + aux1429 + aux1430)<=1))
c Var 'aux2339' direct represents '0' with '-8205'
c Var 'aux2339' direct represents '1' with '8205'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8205'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1426 + aux1429 + aux1430)))
c Var 'aux2340' direct represents '0' with '-8206'
c Var 'aux2340' direct represents '1' with '8206'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8206'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1432 + aux1435 + aux1436)<=1))
c Var 'aux2341' direct represents '0' with '-8207'
c Var 'aux2341' direct represents '1' with '8207'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8207'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1432 + aux1435 + aux1436)))
c Var 'aux2342' direct represents '0' with '-8208'
c Var 'aux2342' direct represents '1' with '8208'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8208'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1438 + aux1441 + aux1442)<=1))
c Var 'aux2343' direct represents '0' with '-8209'
c Var 'aux2343' direct represents '1' with '8209'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8209'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1438 + aux1441 + aux1442)))
c Var 'aux2344' direct represents '0' with '-8210'
c Var 'aux2344' direct represents '1' with '8210'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8210'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1444 + aux1447 + aux1448)<=1))
c Var 'aux2345' direct represents '0' with '-8211'
c Var 'aux2345' direct represents '1' with '8211'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8211'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1444 + aux1447 + aux1448)))
c Var 'aux2346' direct represents '0' with '-8212'
c Var 'aux2346' direct represents '1' with '8212'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8212'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1450 + aux1453 + aux1454)<=1))
c Var 'aux2347' direct represents '0' with '-8213'
c Var 'aux2347' direct represents '1' with '8213'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8213'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1450 + aux1453 + aux1454)))
c Var 'aux2348' direct represents '0' with '-8214'
c Var 'aux2348' direct represents '1' with '8214'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8214'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1456 + aux1459 + aux1460)<=1))
c Var 'aux2349' direct represents '0' with '-8215'
c Var 'aux2349' direct represents '1' with '8215'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8215'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1456 + aux1459 + aux1460)))
c Var 'aux2350' direct represents '0' with '-8216'
c Var 'aux2350' direct represents '1' with '8216'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8216'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1462 + aux1465 + aux1466)<=1))
c Var 'aux2351' direct represents '0' with '-8217'
c Var 'aux2351' direct represents '1' with '8217'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8217'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1462 + aux1465 + aux1466)))
c Var 'aux2352' direct represents '0' with '-8218'
c Var 'aux2352' direct represents '1' with '8218'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8218'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1468 + aux1471 + aux1472)<=1))
c Var 'aux2353' direct represents '0' with '-8219'
c Var 'aux2353' direct represents '1' with '8219'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8219'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1468 + aux1471 + aux1472)))
c Var 'aux2354' direct represents '0' with '-8220'
c Var 'aux2354' direct represents '1' with '8220'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8220'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1474 + aux1477 + aux1478)<=1))
c Var 'aux2355' direct represents '0' with '-8221'
c Var 'aux2355' direct represents '1' with '8221'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8221'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1474 + aux1477 + aux1478)))
c Var 'aux2356' direct represents '0' with '-8222'
c Var 'aux2356' direct represents '1' with '8222'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8222'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1480 + aux1483 + aux1484)<=1))
c Var 'aux2357' direct represents '0' with '-8223'
c Var 'aux2357' direct represents '1' with '8223'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8223'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1480 + aux1483 + aux1484)))
c Var 'aux2358' direct represents '0' with '-8224'
c Var 'aux2358' direct represents '1' with '8224'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8224'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1486 + aux1489 + aux1490)<=1))
c Var 'aux2359' direct represents '0' with '-8225'
c Var 'aux2359' direct represents '1' with '8225'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8225'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1486 + aux1489 + aux1490)))
c Var 'aux2360' direct represents '0' with '-8226'
c Var 'aux2360' direct represents '1' with '8226'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8226'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1492 + aux1495 + aux1496)<=1))
c Var 'aux2361' direct represents '0' with '-8227'
c Var 'aux2361' direct represents '1' with '8227'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8227'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1492 + aux1495 + aux1496)))
c Var 'aux2362' direct represents '0' with '-8228'
c Var 'aux2362' direct represents '1' with '8228'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8228'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1498 + aux1501 + aux1502)<=1))
c Var 'aux2363' direct represents '0' with '-8229'
c Var 'aux2363' direct represents '1' with '8229'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8229'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1498 + aux1501 + aux1502)))
c Var 'aux2364' direct represents '0' with '-8230'
c Var 'aux2364' direct represents '1' with '8230'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8230'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1504 + aux1507 + aux1508)<=1))
c Var 'aux2365' direct represents '0' with '-8231'
c Var 'aux2365' direct represents '1' with '8231'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8231'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1504 + aux1507 + aux1508)))
c Var 'aux2366' direct represents '0' with '-8232'
c Var 'aux2366' direct represents '1' with '8232'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8232'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1510 + aux1513 + aux1514)<=1))
c Var 'aux2367' direct represents '0' with '-8233'
c Var 'aux2367' direct represents '1' with '8233'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8233'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1510 + aux1513 + aux1514)))
c Var 'aux2368' direct represents '0' with '-8234'
c Var 'aux2368' direct represents '1' with '8234'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8234'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1516 + aux1519 + aux1520)<=1))
c Var 'aux2369' direct represents '0' with '-8235'
c Var 'aux2369' direct represents '1' with '8235'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8235'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1516 + aux1519 + aux1520)))
c Var 'aux2370' direct represents '0' with '-8236'
c Var 'aux2370' direct represents '1' with '8236'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8236'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1522 + aux1525 + aux1526)<=1))
c Var 'aux2371' direct represents '0' with '-8237'
c Var 'aux2371' direct represents '1' with '8237'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8237'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1522 + aux1525 + aux1526)))
c Var 'aux2372' direct represents '0' with '-8238'
c Var 'aux2372' direct represents '1' with '8238'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8238'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1528 + aux1531 + aux1532)<=1))
c Var 'aux2373' direct represents '0' with '-8239'
c Var 'aux2373' direct represents '1' with '8239'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8239'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1528 + aux1531 + aux1532)))
c Var 'aux2374' direct represents '0' with '-8240'
c Var 'aux2374' direct represents '1' with '8240'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8240'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1534 + aux1537 + aux1538)<=1))
c Var 'aux2375' direct represents '0' with '-8241'
c Var 'aux2375' direct represents '1' with '8241'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8241'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1534 + aux1537 + aux1538)))
c Var 'aux2376' direct represents '0' with '-8242'
c Var 'aux2376' direct represents '1' with '8242'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8242'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1540 + aux1543 + aux1544)<=1))
c Var 'aux2377' direct represents '0' with '-8243'
c Var 'aux2377' direct represents '1' with '8243'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8243'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1540 + aux1543 + aux1544)))
c Var 'aux2378' direct represents '0' with '-8244'
c Var 'aux2378' direct represents '1' with '8244'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8244'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1546 + aux1549 + aux1550)<=1))
c Var 'aux2379' direct represents '0' with '-8245'
c Var 'aux2379' direct represents '1' with '8245'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8245'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1546 + aux1549 + aux1550)))
c Var 'aux2380' direct represents '0' with '-8246'
c Var 'aux2380' direct represents '1' with '8246'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8246'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1552 + aux1555 + aux1556)<=1))
c Var 'aux2381' direct represents '0' with '-8247'
c Var 'aux2381' direct represents '1' with '8247'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8247'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1552 + aux1555 + aux1556)))
c Var 'aux2382' direct represents '0' with '-8248'
c Var 'aux2382' direct represents '1' with '8248'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8248'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1558 + aux1561 + aux1562)<=1))
c Var 'aux2383' direct represents '0' with '-8249'
c Var 'aux2383' direct represents '1' with '8249'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8249'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1558 + aux1561 + aux1562)))
c Var 'aux2384' direct represents '0' with '-8250'
c Var 'aux2384' direct represents '1' with '8250'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8250'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1564 + aux1567 + aux1568)<=1))
c Var 'aux2385' direct represents '0' with '-8251'
c Var 'aux2385' direct represents '1' with '8251'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8251'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1564 + aux1567 + aux1568)))
c Var 'aux2386' direct represents '0' with '-8252'
c Var 'aux2386' direct represents '1' with '8252'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8252'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1570 + aux1573 + aux1574)<=1))
c Var 'aux2387' direct represents '0' with '-8253'
c Var 'aux2387' direct represents '1' with '8253'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8253'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1570 + aux1573 + aux1574)))
c Var 'aux2388' direct represents '0' with '-8254'
c Var 'aux2388' direct represents '1' with '8254'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8254'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1576 + aux1579 + aux1580)<=1))
c Var 'aux2389' direct represents '0' with '-8255'
c Var 'aux2389' direct represents '1' with '8255'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8255'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1576 + aux1579 + aux1580)))
c Var 'aux2390' direct represents '0' with '-8256'
c Var 'aux2390' direct represents '1' with '8256'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8256'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1582 + aux1585 + aux1586)<=1))
c Var 'aux2391' direct represents '0' with '-8257'
c Var 'aux2391' direct represents '1' with '8257'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8257'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1582 + aux1585 + aux1586)))
c Var 'aux2392' direct represents '0' with '-8258'
c Var 'aux2392' direct represents '1' with '8258'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8258'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1588 + aux1591 + aux1592)<=1))
c Var 'aux2393' direct represents '0' with '-8259'
c Var 'aux2393' direct represents '1' with '8259'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8259'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1588 + aux1591 + aux1592)))
c Var 'aux2394' direct represents '0' with '-8260'
c Var 'aux2394' direct represents '1' with '8260'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8260'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1594 + aux1597 + aux1598)<=1))
c Var 'aux2395' direct represents '0' with '-8261'
c Var 'aux2395' direct represents '1' with '8261'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8261'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1594 + aux1597 + aux1598)))
c Var 'aux2396' direct represents '0' with '-8262'
c Var 'aux2396' direct represents '1' with '8262'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8262'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1600 + aux1603 + aux1604)<=1))
c Var 'aux2397' direct represents '0' with '-8263'
c Var 'aux2397' direct represents '1' with '8263'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8263'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1600 + aux1603 + aux1604)))
c Var 'aux2398' direct represents '0' with '-8264'
c Var 'aux2398' direct represents '1' with '8264'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8264'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1606 + aux1609 + aux1610)<=1))
c Var 'aux2399' direct represents '0' with '-8265'
c Var 'aux2399' direct represents '1' with '8265'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8265'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1606 + aux1609 + aux1610)))
c Var 'aux2400' direct represents '0' with '-8266'
c Var 'aux2400' direct represents '1' with '8266'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8266'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1612 + aux1615 + aux1616)<=1))
c Var 'aux2401' direct represents '0' with '-8267'
c Var 'aux2401' direct represents '1' with '8267'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8267'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1612 + aux1615 + aux1616)))
c Var 'aux2402' direct represents '0' with '-8268'
c Var 'aux2402' direct represents '1' with '8268'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8268'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1618 + aux1621 + aux1622)<=1))
c Var 'aux2403' direct represents '0' with '-8269'
c Var 'aux2403' direct represents '1' with '8269'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8269'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1618 + aux1621 + aux1622)))
c Var 'aux2404' direct represents '0' with '-8270'
c Var 'aux2404' direct represents '1' with '8270'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8270'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1624 + aux1627 + aux1628)<=1))
c Var 'aux2405' direct represents '0' with '-8271'
c Var 'aux2405' direct represents '1' with '8271'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8271'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1624 + aux1627 + aux1628)))
c Var 'aux2406' direct represents '0' with '-8272'
c Var 'aux2406' direct represents '1' with '8272'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8272'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1630 + aux1633 + aux1634)<=1))
c Var 'aux2407' direct represents '0' with '-8273'
c Var 'aux2407' direct represents '1' with '8273'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8273'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1630 + aux1633 + aux1634)))
c Var 'aux2408' direct represents '0' with '-8274'
c Var 'aux2408' direct represents '1' with '8274'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8274'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1636 + aux1639 + aux1640)<=1))
c Var 'aux2409' direct represents '0' with '-8275'
c Var 'aux2409' direct represents '1' with '8275'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8275'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1636 + aux1639 + aux1640)))
c Var 'aux2410' direct represents '0' with '-8276'
c Var 'aux2410' direct represents '1' with '8276'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8276'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1642 + aux1645 + aux1646)<=1))
c Var 'aux2411' direct represents '0' with '-8277'
c Var 'aux2411' direct represents '1' with '8277'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8277'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1642 + aux1645 + aux1646)))
c Var 'aux2412' direct represents '0' with '-8278'
c Var 'aux2412' direct represents '1' with '8278'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8278'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1648 + aux1651 + aux1652)<=1))
c Var 'aux2413' direct represents '0' with '-8279'
c Var 'aux2413' direct represents '1' with '8279'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8279'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1648 + aux1651 + aux1652)))
c Var 'aux2414' direct represents '0' with '-8280'
c Var 'aux2414' direct represents '1' with '8280'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8280'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1654 + aux1657 + aux1658)<=1))
c Var 'aux2415' direct represents '0' with '-8281'
c Var 'aux2415' direct represents '1' with '8281'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8281'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1654 + aux1657 + aux1658)))
c Var 'aux2416' direct represents '0' with '-8282'
c Var 'aux2416' direct represents '1' with '8282'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8282'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1660 + aux1663 + aux1664)<=1))
c Var 'aux2417' direct represents '0' with '-8283'
c Var 'aux2417' direct represents '1' with '8283'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8283'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1660 + aux1663 + aux1664)))
c Var 'aux2418' direct represents '0' with '-8284'
c Var 'aux2418' direct represents '1' with '8284'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8284'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1666 + aux1669 + aux1670)<=1))
c Var 'aux2419' direct represents '0' with '-8285'
c Var 'aux2419' direct represents '1' with '8285'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8285'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1666 + aux1669 + aux1670)))
c Var 'aux2420' direct represents '0' with '-8286'
c Var 'aux2420' direct represents '1' with '8286'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8286'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1672 + aux1675 + aux1676)<=1))
c Var 'aux2421' direct represents '0' with '-8287'
c Var 'aux2421' direct represents '1' with '8287'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8287'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1672 + aux1675 + aux1676)))
c Var 'aux2422' direct represents '0' with '-8288'
c Var 'aux2422' direct represents '1' with '8288'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8288'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1678 + aux1681 + aux1682)<=1))
c Var 'aux2423' direct represents '0' with '-8289'
c Var 'aux2423' direct represents '1' with '8289'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8289'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1678 + aux1681 + aux1682)))
c Var 'aux2424' direct represents '0' with '-8290'
c Var 'aux2424' direct represents '1' with '8290'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8290'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1684 + aux1687 + aux1688)<=1))
c Var 'aux2425' direct represents '0' with '-8291'
c Var 'aux2425' direct represents '1' with '8291'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8291'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1684 + aux1687 + aux1688)))
c Var 'aux2426' direct represents '0' with '-8292'
c Var 'aux2426' direct represents '1' with '8292'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8292'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1690 + aux1693 + aux1694)<=1))
c Var 'aux2427' direct represents '0' with '-8293'
c Var 'aux2427' direct represents '1' with '8293'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8293'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1690 + aux1693 + aux1694)))
c Var 'aux2428' direct represents '0' with '-8294'
c Var 'aux2428' direct represents '1' with '8294'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8294'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1696 + aux1699 + aux1700)<=1))
c Var 'aux2429' direct represents '0' with '-8295'
c Var 'aux2429' direct represents '1' with '8295'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8295'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1696 + aux1699 + aux1700)))
c Var 'aux2430' direct represents '0' with '-8296'
c Var 'aux2430' direct represents '1' with '8296'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8296'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1702 + aux1705 + aux1706)<=1))
c Var 'aux2431' direct represents '0' with '-8297'
c Var 'aux2431' direct represents '1' with '8297'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8297'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1702 + aux1705 + aux1706)))
c Var 'aux2432' direct represents '0' with '-8298'
c Var 'aux2432' direct represents '1' with '8298'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8298'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1708 + aux1711 + aux1712)<=1))
c Var 'aux2433' direct represents '0' with '-8299'
c Var 'aux2433' direct represents '1' with '8299'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8299'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1708 + aux1711 + aux1712)))
c Var 'aux2434' direct represents '0' with '-8300'
c Var 'aux2434' direct represents '1' with '8300'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8300'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1714 + aux1717 + aux1718)<=1))
c Var 'aux2435' direct represents '0' with '-8301'
c Var 'aux2435' direct represents '1' with '8301'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8301'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1714 + aux1717 + aux1718)))
c Var 'aux2436' direct represents '0' with '-8302'
c Var 'aux2436' direct represents '1' with '8302'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8302'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1720 + aux1723 + aux1724)<=1))
c Var 'aux2437' direct represents '0' with '-8303'
c Var 'aux2437' direct represents '1' with '8303'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8303'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1720 + aux1723 + aux1724)))
c Var 'aux2438' direct represents '0' with '-8304'
c Var 'aux2438' direct represents '1' with '8304'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8304'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1726 + aux1729 + aux1730)<=1))
c Var 'aux2439' direct represents '0' with '-8305'
c Var 'aux2439' direct represents '1' with '8305'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8305'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1726 + aux1729 + aux1730)))
c Var 'aux2440' direct represents '0' with '-8306'
c Var 'aux2440' direct represents '1' with '8306'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8306'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1732 + aux1735 + aux1736)<=1))
c Var 'aux2441' direct represents '0' with '-8307'
c Var 'aux2441' direct represents '1' with '8307'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8307'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1732 + aux1735 + aux1736)))
c Var 'aux2442' direct represents '0' with '-8308'
c Var 'aux2442' direct represents '1' with '8308'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8308'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1738 + aux1741 + aux1742)<=1))
c Var 'aux2443' direct represents '0' with '-8309'
c Var 'aux2443' direct represents '1' with '8309'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8309'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1738 + aux1741 + aux1742)))
c Var 'aux2444' direct represents '0' with '-8310'
c Var 'aux2444' direct represents '1' with '8310'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8310'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1744 + aux1747 + aux1748)<=1))
c Var 'aux2445' direct represents '0' with '-8311'
c Var 'aux2445' direct represents '1' with '8311'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8311'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1744 + aux1747 + aux1748)))
c Var 'aux2446' direct represents '0' with '-8312'
c Var 'aux2446' direct represents '1' with '8312'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8312'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1750 + aux1753 + aux1754)<=1))
c Var 'aux2447' direct represents '0' with '-8313'
c Var 'aux2447' direct represents '1' with '8313'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8313'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1750 + aux1753 + aux1754)))
c Var 'aux2448' direct represents '0' with '-8314'
c Var 'aux2448' direct represents '1' with '8314'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8314'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1756 + aux1759 + aux1760)<=1))
c Var 'aux2449' direct represents '0' with '-8315'
c Var 'aux2449' direct represents '1' with '8315'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8315'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1756 + aux1759 + aux1760)))
c Var 'aux2450' direct represents '0' with '-8316'
c Var 'aux2450' direct represents '1' with '8316'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8316'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1762 + aux1765 + aux1766)<=1))
c Var 'aux2451' direct represents '0' with '-8317'
c Var 'aux2451' direct represents '1' with '8317'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8317'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1762 + aux1765 + aux1766)))
c Var 'aux2452' direct represents '0' with '-8318'
c Var 'aux2452' direct represents '1' with '8318'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8318'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1768 + aux1771 + aux1772)<=1))
c Var 'aux2453' direct represents '0' with '-8319'
c Var 'aux2453' direct represents '1' with '8319'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8319'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1768 + aux1771 + aux1772)))
c Var 'aux2454' direct represents '0' with '-8320'
c Var 'aux2454' direct represents '1' with '8320'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8320'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1774 + aux1777 + aux1778)<=1))
c Var 'aux2455' direct represents '0' with '-8321'
c Var 'aux2455' direct represents '1' with '8321'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8321'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1774 + aux1777 + aux1778)))
c Var 'aux2456' direct represents '0' with '-8322'
c Var 'aux2456' direct represents '1' with '8322'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8322'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1780 + aux1783 + aux1784)<=1))
c Var 'aux2457' direct represents '0' with '-8323'
c Var 'aux2457' direct represents '1' with '8323'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8323'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1780 + aux1783 + aux1784)))
c Var 'aux2458' direct represents '0' with '-8324'
c Var 'aux2458' direct represents '1' with '8324'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8324'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1786 + aux1789 + aux1790)<=1))
c Var 'aux2459' direct represents '0' with '-8325'
c Var 'aux2459' direct represents '1' with '8325'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8325'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1786 + aux1789 + aux1790)))
c Var 'aux2460' direct represents '0' with '-8326'
c Var 'aux2460' direct represents '1' with '8326'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8326'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1792 + aux1795 + aux1796)<=1))
c Var 'aux2461' direct represents '0' with '-8327'
c Var 'aux2461' direct represents '1' with '8327'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8327'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1792 + aux1795 + aux1796)))
c Var 'aux2462' direct represents '0' with '-8328'
c Var 'aux2462' direct represents '1' with '8328'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8328'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1798 + aux1801 + aux1802)<=1))
c Var 'aux2463' direct represents '0' with '-8329'
c Var 'aux2463' direct represents '1' with '8329'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8329'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1798 + aux1801 + aux1802)))
c Var 'aux2464' direct represents '0' with '-8330'
c Var 'aux2464' direct represents '1' with '8330'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8330'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1804 + aux1807 + aux1808)<=1))
c Var 'aux2465' direct represents '0' with '-8331'
c Var 'aux2465' direct represents '1' with '8331'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8331'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1804 + aux1807 + aux1808)))
c Var 'aux2466' direct represents '0' with '-8332'
c Var 'aux2466' direct represents '1' with '8332'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8332'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1810 + aux1813 + aux1814)<=1))
c Var 'aux2467' direct represents '0' with '-8333'
c Var 'aux2467' direct represents '1' with '8333'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8333'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1810 + aux1813 + aux1814)))
c Var 'aux2468' direct represents '0' with '-8334'
c Var 'aux2468' direct represents '1' with '8334'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8334'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1816 + aux1819 + aux1820)<=1))
c Var 'aux2469' direct represents '0' with '-8335'
c Var 'aux2469' direct represents '1' with '8335'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8335'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1816 + aux1819 + aux1820)))
c Var 'aux2470' direct represents '0' with '-8336'
c Var 'aux2470' direct represents '1' with '8336'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8336'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1822 + aux1825 + aux1826)<=1))
c Var 'aux2471' direct represents '0' with '-8337'
c Var 'aux2471' direct represents '1' with '8337'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8337'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1822 + aux1825 + aux1826)))
c Var 'aux2472' direct represents '0' with '-8338'
c Var 'aux2472' direct represents '1' with '8338'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8338'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1828 + aux1831 + aux1832)<=1))
c Var 'aux2473' direct represents '0' with '-8339'
c Var 'aux2473' direct represents '1' with '8339'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8339'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1828 + aux1831 + aux1832)))
c Var 'aux2474' direct represents '0' with '-8340'
c Var 'aux2474' direct represents '1' with '8340'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8340'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1834 + aux1837 + aux1838)<=1))
c Var 'aux2475' direct represents '0' with '-8341'
c Var 'aux2475' direct represents '1' with '8341'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8341'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1834 + aux1837 + aux1838)))
c Var 'aux2476' direct represents '0' with '-8342'
c Var 'aux2476' direct represents '1' with '8342'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8342'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1840 + aux1843 + aux1844)<=1))
c Var 'aux2477' direct represents '0' with '-8343'
c Var 'aux2477' direct represents '1' with '8343'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-8343'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1840 + aux1843 + aux1844)))
c Var 'aux2478' direct represents '0' with '-8344'
c Var 'aux2478' direct represents '1' with '8344'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-8344'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1846 + aux1849 + aux1850)<=1))
c Var 'aux2479' direct represents '0' with '-8345'
c Var 'aux2479' direct represents '1' with '8345'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-8345'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1846 + aux1849 + aux1850)))
c Var 'aux2480' direct represents '0' with '-8346'
c Var 'aux2480' direct represents '1' with '8346'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-8346'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1852 + aux1855 + aux1856)<=1))
c Var 'aux2481' direct represents '0' with '-8347'
c Var 'aux2481' direct represents '1' with '8347'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-8347'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1852 + aux1855 + aux1856)))
c Var 'aux2482' direct represents '0' with '-8348'
c Var 'aux2482' direct represents '1' with '8348'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-8348'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1858 + aux1861 + aux1862)<=1))
c Var 'aux2483' direct represents '0' with '-8349'
c Var 'aux2483' direct represents '1' with '8349'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-8349'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1858 + aux1861 + aux1862)))
c Var 'aux2484' direct represents '0' with '-8350'
c Var 'aux2484' direct represents '1' with '8350'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-8350'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1864 + aux1867 + aux1868)<=1))
c Var 'aux2485' direct represents '0' with '-8351'
c Var 'aux2485' direct represents '1' with '8351'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-8351'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1864 + aux1867 + aux1868)))
c Var 'aux2486' direct represents '0' with '-8352'
c Var 'aux2486' direct represents '1' with '8352'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-8352'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1870 + aux1873 + aux1874)<=1))
c Var 'aux2487' direct represents '0' with '-8353'
c Var 'aux2487' direct represents '1' with '8353'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-8353'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1870 + aux1873 + aux1874)))
c Var 'aux2488' direct represents '0' with '-8354'
c Var 'aux2488' direct represents '1' with '8354'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-8354'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1876 + aux1879 + aux1880)<=1))
c Var 'aux2489' direct represents '0' with '-8355'
c Var 'aux2489' direct represents '1' with '8355'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-8355'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1876 + aux1879 + aux1880)))
c Var 'aux2490' direct represents '0' with '-8356'
c Var 'aux2490' direct represents '1' with '8356'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-8356'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1882 + aux1885 + aux1886)<=1))
c Var 'aux2491' direct represents '0' with '-8357'
c Var 'aux2491' direct represents '1' with '8357'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-8357'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1882 + aux1885 + aux1886)))
c Var 'aux2492' direct represents '0' with '-8358'
c Var 'aux2492' direct represents '1' with '8358'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-8358'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1888 + aux1891 + aux1892)<=1))
c Var 'aux2493' direct represents '0' with '-8359'
c Var 'aux2493' direct represents '1' with '8359'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-8359'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1888 + aux1891 + aux1892)))
c Var 'aux2494' direct represents '0' with '-8360'
c Var 'aux2494' direct represents '1' with '8360'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-8360'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1894 + aux1897 + aux1898)<=1))
c Var 'aux2495' direct represents '0' with '-8361'
c Var 'aux2495' direct represents '1' with '8361'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-8361'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1894 + aux1897 + aux1898)))
c Var 'aux2496' direct represents '0' with '-8362'
c Var 'aux2496' direct represents '1' with '8362'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-8362'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1900 + aux1903 + aux1904)<=1))
c Var 'aux2497' direct represents '0' with '-8363'
c Var 'aux2497' direct represents '1' with '8363'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-8363'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1900 + aux1903 + aux1904)))
c Var 'aux2498' direct represents '0' with '-8364'
c Var 'aux2498' direct represents '1' with '8364'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-8364'
c Encoding variable: aux2499 with domain: bool (representing constraint ((aux1906 + aux1909 + aux1910)<=1))
c Var 'aux2499' direct represents '0' with '-8365'
c Var 'aux2499' direct represents '1' with '8365'
c Var 'aux2499' order represents '1' with '1'
c Var 'aux2499' order represents '0' with '-8365'
c Encoding variable: aux2500 with domain: bool (representing constraint (1<=(aux1906 + aux1909 + aux1910)))
c Var 'aux2500' direct represents '0' with '-8366'
c Var 'aux2500' direct represents '1' with '8366'
c Var 'aux2500' order represents '1' with '1'
c Var 'aux2500' order represents '0' with '-8366'
c Encoding variable: aux2501 with domain: bool (representing constraint ((aux1912 + aux1915 + aux1916)<=1))
c Var 'aux2501' direct represents '0' with '-8367'
c Var 'aux2501' direct represents '1' with '8367'
c Var 'aux2501' order represents '1' with '1'
c Var 'aux2501' order represents '0' with '-8367'
c Encoding variable: aux2502 with domain: bool (representing constraint (1<=(aux1912 + aux1915 + aux1916)))
c Var 'aux2502' direct represents '0' with '-8368'
c Var 'aux2502' direct represents '1' with '8368'
c Var 'aux2502' order represents '1' with '1'
c Var 'aux2502' order represents '0' with '-8368'
c Encoding variable: aux2503 with domain: bool (representing constraint ((aux1918 + aux1921 + aux1922)<=1))
c Var 'aux2503' direct represents '0' with '-8369'
c Var 'aux2503' direct represents '1' with '8369'
c Var 'aux2503' order represents '1' with '1'
c Var 'aux2503' order represents '0' with '-8369'
c Encoding variable: aux2504 with domain: bool (representing constraint (1<=(aux1918 + aux1921 + aux1922)))
c Var 'aux2504' direct represents '0' with '-8370'
c Var 'aux2504' direct represents '1' with '8370'
c Var 'aux2504' order represents '1' with '1'
c Var 'aux2504' order represents '0' with '-8370'
c Encoding variable: aux2505 with domain: bool (representing constraint ((aux1924 + aux1927 + aux1928)<=1))
c Var 'aux2505' direct represents '0' with '-8371'
c Var 'aux2505' direct represents '1' with '8371'
c Var 'aux2505' order represents '1' with '1'
c Var 'aux2505' order represents '0' with '-8371'
c Encoding variable: aux2506 with domain: bool (representing constraint (1<=(aux1924 + aux1927 + aux1928)))
c Var 'aux2506' direct represents '0' with '-8372'
c Var 'aux2506' direct represents '1' with '8372'
c Var 'aux2506' order represents '1' with '1'
c Var 'aux2506' order represents '0' with '-8372'
c (((aux467 + shift(x_00001_00001, -1) + shift(x_00002_00002, -1))<=20)=tv=SATLiteral(7831))
-7831 159 1796 0
-7831 161 1794 0
-7831 163 1792 0
-7831 165 1790 0
-7831 2 157 1796 0
-7831 2 159 1794 0
-7831 2 161 1792 0
-7831 2 163 1790 0
-7831 2 165 1788 0
-7831 3 155 1796 0
-7831 3 157 1794 0
-7831 3 159 1792 0
-7831 3 161 1790 0
-7831 3 163 1788 0
-7831 3 165 1786 0
-7831 5 153 1796 0
-7831 5 155 1794 0
-7831 5 157 1792 0
-7831 5 159 1790 0
-7831 5 161 1788 0
-7831 5 163 1786 0
-7831 5 165 1784 0
-7831 7 152 1796 0
-7831 7 153 1794 0
-7831 7 155 1792 0
-7831 7 157 1790 0
-7831 7 159 1788 0
-7831 7 161 1786 0
-7831 7 163 1784 0
-7831 7 165 1782 0
-7831 9 1796 0
-7831 9 152 1794 0
-7831 9 153 1792 0
-7831 9 155 1790 0
-7831 9 157 1788 0
-7831 9 159 1786 0
-7831 9 161 1784 0
-7831 9 163 1782 0
-7831 9 165 1780 0
-7831 11 1794 0
-7831 11 152 1792 0
-7831 11 153 1790 0
-7831 11 155 1788 0
-7831 11 157 1786 0
-7831 11 159 1784 0
-7831 11 161 1782 0
-7831 11 163 1780 0
-7831 11 165 1778 0
-7831 13 1792 0
-7831 13 152 1790 0
-7831 13 153 1788 0
-7831 13 155 1786 0
-7831 13 157 1784 0
-7831 13 159 1782 0
-7831 13 161 1780 0
-7831 13 163 1778 0
-7831 13 165 1776 0
-7831 15 1790 0
-7831 15 152 1788 0
-7831 15 153 1786 0
-7831 15 155 1784 0
-7831 15 157 1782 0
-7831 15 159 1780 0
-7831 15 161 1778 0
-7831 15 163 1776 0
-7831 15 165 1774 0
7831 -1774 0
7831 -165 -1776 0
7831 -163 -1778 0
7831 -161 -1780 0
7831 -159 -1782 0
7831 -157 -1784 0
7831 -155 -1786 0
7831 -153 -1788 0
7831 -152 -1790 0
7831 -15 -1776 0
7831 -15 -165 -1778 0
7831 -15 -163 -1780 0
7831 -15 -161 -1782 0
7831 -15 -159 -1784 0
7831 -15 -157 -1786 0
7831 -15 -155 -1788 0
7831 -15 -153 -1790 0
7831 -15 -152 -1792 0
7831 -13 -1778 0
7831 -13 -165 -1780 0
7831 -13 -163 -1782 0
7831 -13 -161 -1784 0
7831 -13 -159 -1786 0
7831 -13 -157 -1788 0
7831 -13 -155 -1790 0
7831 -13 -153 -1792 0
7831 -13 -152 -1794 0
7831 -11 -1780 0
7831 -11 -165 -1782 0
7831 -11 -163 -1784 0
7831 -11 -161 -1786 0
7831 -11 -159 -1788 0
7831 -11 -157 -1790 0
7831 -11 -155 -1792 0
7831 -11 -153 -1794 0
7831 -11 -152 -1796 0
7831 -9 -1782 0
7831 -9 -165 -1784 0
7831 -9 -163 -1786 0
7831 -9 -161 -1788 0
7831 -9 -159 -1790 0
7831 -9 -157 -1792 0
7831 -9 -155 -1794 0
7831 -9 -153 -1796 0
7831 -9 -152 0
7831 -7 -1784 0
7831 -7 -165 -1786 0
7831 -7 -163 -1788 0
7831 -7 -161 -1790 0
7831 -7 -159 -1792 0
7831 -7 -157 -1794 0
7831 -7 -155 -1796 0
7831 -7 -153 0
7831 -7 -152 0
7831 -5 -1786 0
7831 -5 -165 -1788 0
7831 -5 -163 -1790 0
7831 -5 -161 -1792 0
7831 -5 -159 -1794 0
7831 -5 -157 -1796 0
7831 -5 -155 0
7831 -5 -153 0
7831 -5 -152 0
7831 -3 -1788 0
7831 -3 -165 -1790 0
7831 -3 -163 -1792 0
7831 -3 -161 -1794 0
7831 -3 -159 -1796 0
7831 -3 -157 0
7831 -3 -155 0
7831 -3 -153 0
7831 -3 -152 0
7831 -2 -1790 0
7831 -2 -165 -1792 0
7831 -2 -163 -1794 0
7831 -2 -161 -1796 0
7831 -2 -159 0
7831 -2 -157 0
7831 -2 -155 0
7831 -2 -153 0
7831 -2 -152 0
c ((20<=(aux467 + shift(x_00001_00001, -1) + shift(x_00002_00002, -1)))=tv=SATLiteral(7832))
-7832 -1772 0
-7832 -165 -1774 0
-7832 -163 -1776 0
-7832 -161 -1778 0
-7832 -159 -1780 0
-7832 -157 -1782 0
-7832 -155 -1784 0
-7832 -153 -1786 0
-7832 -152 -1788 0
-7832 -15 -1774 0
-7832 -15 -165 -1776 0
-7832 -15 -163 -1778 0
-7832 -15 -161 -1780 0
-7832 -15 -159 -1782 0
-7832 -15 -157 -1784 0
-7832 -15 -155 -1786 0
-7832 -15 -153 -1788 0
-7832 -15 -152 -1790 0
-7832 -13 -1776 0
-7832 -13 -165 -1778 0
-7832 -13 -163 -1780 0
-7832 -13 -161 -1782 0
-7832 -13 -159 -1784 0
-7832 -13 -157 -1786 0
-7832 -13 -155 -1788 0
-7832 -13 -153 -1790 0
-7832 -13 -152 -1792 0
-7832 -11 -1778 0
-7832 -11 -165 -1780 0
-7832 -11 -163 -1782 0
-7832 -11 -161 -1784 0
-7832 -11 -159 -1786 0
-7832 -11 -157 -1788 0
-7832 -11 -155 -1790 0
-7832 -11 -153 -1792 0
-7832 -11 -152 -1794 0
-7832 -9 -1780 0
-7832 -9 -165 -1782 0
-7832 -9 -163 -1784 0
-7832 -9 -161 -1786 0
-7832 -9 -159 -1788 0
-7832 -9 -157 -1790 0
-7832 -9 -155 -1792 0
-7832 -9 -153 -1794 0
-7832 -9 -152 -1796 0
-7832 -7 -1782 0
-7832 -7 -165 -1784 0
-7832 -7 -163 -1786 0
-7832 -7 -161 -1788 0
-7832 -7 -159 -1790 0
-7832 -7 -157 -1792 0
-7832 -7 -155 -1794 0
-7832 -7 -153 -1796 0
-7832 -7 -152 0
-7832 -5 -1784 0
-7832 -5 -165 -1786 0
-7832 -5 -163 -1788 0
-7832 -5 -161 -1790 0
-7832 -5 -159 -1792 0
-7832 -5 -157 -1794 0
-7832 -5 -155 -1796 0
-7832 -5 -153 0
-7832 -5 -152 0
-7832 -3 -1786 0
-7832 -3 -165 -1788 0
-7832 -3 -163 -1790 0
-7832 -3 -161 -1792 0
-7832 -3 -159 -1794 0
-7832 -3 -157 -1796 0
-7832 -3 -155 0
-7832 -3 -153 0
-7832 -3 -152 0
-7832 -2 -1788 0
-7832 -2 -165 -1790 0
-7832 -2 -163 -1792 0
-7832 -2 -161 -1794 0
-7832 -2 -159 -1796 0
-7832 -2 -157 0
-7832 -2 -155 0
-7832 -2 -153 0
-7832 -2 -152 0
7832 157 1796 0
7832 159 1794 0
7832 161 1792 0
7832 163 1790 0
7832 165 1788 0
7832 2 155 1796 0
7832 2 157 1794 0
7832 2 159 1792 0
7832 2 161 1790 0
7832 2 163 1788 0
7832 2 165 1786 0
7832 3 153 1796 0
7832 3 155 1794 0
7832 3 157 1792 0
7832 3 159 1790 0
7832 3 161 1788 0
7832 3 163 1786 0
7832 3 165 1784 0
7832 5 152 1796 0
7832 5 153 1794 0
7832 5 155 1792 0
7832 5 157 1790 0
7832 5 159 1788 0
7832 5 161 1786 0
7832 5 163 1784 0
7832 5 165 1782 0
7832 7 1796 0
7832 7 152 1794 0
7832 7 153 1792 0
7832 7 155 1790 0
7832 7 157 1788 0
7832 7 159 1786 0
7832 7 161 1784 0
7832 7 163 1782 0
7832 7 165 1780 0
7832 9 1794 0
7832 9 152 1792 0
7832 9 153 1790 0
7832 9 155 1788 0
7832 9 157 1786 0
7832 9 159 1784 0
7832 9 161 1782 0
7832 9 163 1780 0
7832 9 165 1778 0
7832 11 1792 0
7832 11 152 1790 0
7832 11 153 1788 0
7832 11 155 1786 0
7832 11 157 1784 0
7832 11 159 1782 0
7832 11 161 1780 0
7832 11 163 1778 0
7832 11 165 1776 0
7832 13 1790 0
7832 13 152 1788 0
7832 13 153 1786 0
7832 13 155 1784 0
7832 13 157 1782 0
7832 13 159 1780 0
7832 13 161 1778 0
7832 13 163 1776 0
7832 13 165 1774 0
7832 15 1788 0
7832 15 152 1786 0
7832 15 153 1784 0
7832 15 155 1782 0
7832 15 157 1780 0
7832 15 159 1778 0
7832 15 161 1776 0
7832 15 163 1774 0
7832 15 165 1772 0
c (((x_00002_00003 + x_00003_00003 + x_00001_00003)<=8)=tv=SATLiteral(7833))
-7833 41 0
-7833 302 39 0
-7833 303 37 0
-7833 305 35 0
-7833 307 33 0
-7833 309 32 0
-7833 311 0
-7833 313 0
-7833 315 0
-7833 167 39 0
-7833 167 302 37 0
-7833 167 303 35 0
-7833 167 305 33 0
-7833 167 307 32 0
-7833 167 309 0
-7833 167 311 0
-7833 167 313 0
-7833 167 315 0
-7833 168 37 0
-7833 168 302 35 0
-7833 168 303 33 0
-7833 168 305 32 0
-7833 168 307 0
-7833 168 309 0
-7833 168 311 0
-7833 168 313 0
-7833 168 315 0
-7833 170 35 0
-7833 170 302 33 0
-7833 170 303 32 0
-7833 170 305 0
-7833 170 307 0
-7833 170 309 0
-7833 170 311 0
-7833 170 313 0
-7833 170 315 0
-7833 172 33 0
-7833 172 302 32 0
-7833 172 303 0
-7833 172 305 0
-7833 172 307 0
-7833 172 309 0
-7833 172 311 0
-7833 172 313 0
-7833 172 315 0
-7833 174 32 0
-7833 174 302 0
-7833 174 303 0
-7833 174 305 0
-7833 174 307 0
-7833 174 309 0
-7833 174 311 0
-7833 174 313 0
-7833 174 315 0
-7833 176 0
-7833 176 302 0
-7833 176 303 0
-7833 176 305 0
-7833 176 307 0
-7833 176 309 0
-7833 176 311 0
-7833 176 313 0
-7833 176 315 0
-7833 178 0
-7833 178 302 0
-7833 178 303 0
-7833 178 305 0
-7833 178 307 0
-7833 178 309 0
-7833 178 311 0
-7833 178 313 0
-7833 178 315 0
-7833 180 0
-7833 180 302 0
-7833 180 303 0
-7833 180 305 0
-7833 180 307 0
-7833 180 309 0
-7833 180 311 0
-7833 180 313 0
-7833 180 315 0
7833 -176 -302 -32 0
7833 -174 -303 -32 0
7833 -174 -302 -33 0
7833 -172 -305 -32 0
7833 -172 -303 -33 0
7833 -172 -302 -35 0
7833 -170 -307 -32 0
7833 -170 -305 -33 0
7833 -170 -303 -35 0
7833 -170 -302 -37 0
7833 -168 -309 -32 0
7833 -168 -307 -33 0
7833 -168 -305 -35 0
7833 -168 -303 -37 0
7833 -168 -302 -39 0
7833 -167 -311 -32 0
7833 -167 -309 -33 0
7833 -167 -307 -35 0
7833 -167 -305 -37 0
7833 -167 -303 -39 0
7833 -167 -302 -41 0
c ((8<=(x_00002_00003 + x_00003_00003 + x_00001_00003))=tv=SATLiteral(7834))
-7834 -174 -302 -32 0
-7834 -172 -303 -32 0
-7834 -172 -302 -33 0
-7834 -170 -305 -32 0
-7834 -170 -303 -33 0
-7834 -170 -302 -35 0
-7834 -168 -307 -32 0
-7834 -168 -305 -33 0
-7834 -168 -303 -35 0
-7834 -168 -302 -37 0
-7834 -167 -309 -32 0
-7834 -167 -307 -33 0
-7834 -167 -305 -35 0
-7834 -167 -303 -37 0
-7834 -167 -302 -39 0
7834 39 0
7834 302 37 0
7834 303 35 0
7834 305 33 0
7834 307 32 0
7834 309 0
7834 311 0
7834 313 0
7834 315 0
7834 167 37 0
7834 167 302 35 0
7834 167 303 33 0
7834 167 305 32 0
7834 167 307 0
7834 167 309 0
7834 167 311 0
7834 167 313 0
7834 167 315 0
7834 168 35 0
7834 168 302 33 0
7834 168 303 32 0
7834 168 305 0
7834 168 307 0
7834 168 309 0
7834 168 311 0
7834 168 313 0
7834 168 315 0
7834 170 33 0
7834 170 302 32 0
7834 170 303 0
7834 170 305 0
7834 170 307 0
7834 170 309 0
7834 170 311 0
7834 170 313 0
7834 170 315 0
7834 172 32 0
7834 172 302 0
7834 172 303 0
7834 172 305 0
7834 172 307 0
7834 172 309 0
7834 172 311 0
7834 172 313 0
7834 172 315 0
7834 174 0
7834 174 302 0
7834 174 303 0
7834 174 305 0
7834 174 307 0
7834 174 309 0
7834 174 311 0
7834 174 313 0
7834 174 315 0
7834 176 0
7834 176 302 0
7834 176 303 0
7834 176 305 0
7834 176 307 0
7834 176 309 0
7834 176 311 0
7834 176 313 0
7834 176 315 0
7834 178 0
7834 178 302 0
7834 178 303 0
7834 178 305 0
7834 178 307 0
7834 178 309 0
7834 178 311 0
7834 178 313 0
7834 178 315 0
7834 180 0
7834 180 302 0
7834 180 303 0
7834 180 305 0
7834 180 307 0
7834 180 309 0
7834 180 311 0
7834 180 313 0
7834 180 315 0
c (((x_00002_00004 + x_00003_00004 + x_00001_00004)<=18)=tv=SATLiteral(7835))
-7835 330 60 0
-7835 182 328 60 0
-7835 182 330 58 0
-7835 183 326 60 0
-7835 183 328 58 0
-7835 183 330 56 0
-7835 185 324 60 0
-7835 185 326 58 0
-7835 185 328 56 0
-7835 185 330 54 0
-7835 187 322 60 0
-7835 187 324 58 0
-7835 187 326 56 0
-7835 187 328 54 0
-7835 187 330 52 0
-7835 189 320 60 0
-7835 189 322 58 0
-7835 189 324 56 0
-7835 189 326 54 0
-7835 189 328 52 0
-7835 189 330 50 0
-7835 191 318 60 0
-7835 191 320 58 0
-7835 191 322 56 0
-7835 191 324 54 0
-7835 191 326 52 0
-7835 191 328 50 0
-7835 191 330 48 0
-7835 193 317 60 0
-7835 193 318 58 0
-7835 193 320 56 0
-7835 193 322 54 0
-7835 193 324 52 0
-7835 193 326 50 0
-7835 193 328 48 0
-7835 193 330 47 0
-7835 195 60 0
-7835 195 317 58 0
-7835 195 318 56 0
-7835 195 320 54 0
-7835 195 322 52 0
-7835 195 324 50 0
-7835 195 326 48 0
-7835 195 328 47 0
-7835 195 330 0
7835 -330 -47 0
7835 -328 -48 0
7835 -326 -50 0
7835 -324 -52 0
7835 -322 -54 0
7835 -320 -56 0
7835 -318 -58 0
7835 -317 -60 0
7835 -195 -47 0
7835 -195 -330 -48 0
7835 -195 -328 -50 0
7835 -195 -326 -52 0
7835 -195 -324 -54 0
7835 -195 -322 -56 0
7835 -195 -320 -58 0
7835 -195 -318 -60 0
7835 -195 -317 0
7835 -193 -48 0
7835 -193 -330 -50 0
7835 -193 -328 -52 0
7835 -193 -326 -54 0
7835 -193 -324 -56 0
7835 -193 -322 -58 0
7835 -193 -320 -60 0
7835 -193 -318 0
7835 -193 -317 0
7835 -191 -50 0
7835 -191 -330 -52 0
7835 -191 -328 -54 0
7835 -191 -326 -56 0
7835 -191 -324 -58 0
7835 -191 -322 -60 0
7835 -191 -320 0
7835 -191 -318 0
7835 -191 -317 0
7835 -189 -52 0
7835 -189 -330 -54 0
7835 -189 -328 -56 0
7835 -189 -326 -58 0
7835 -189 -324 -60 0
7835 -189 -322 0
7835 -189 -320 0
7835 -189 -318 0
7835 -189 -317 0
7835 -187 -54 0
7835 -187 -330 -56 0
7835 -187 -328 -58 0
7835 -187 -326 -60 0
7835 -187 -324 0
7835 -187 -322 0
7835 -187 -320 0
7835 -187 -318 0
7835 -187 -317 0
7835 -185 -56 0
7835 -185 -330 -58 0
7835 -185 -328 -60 0
7835 -185 -326 0
7835 -185 -324 0
7835 -185 -322 0
7835 -185 -320 0
7835 -185 -318 0
7835 -185 -317 0
7835 -183 -58 0
7835 -183 -330 -60 0
7835 -183 -328 0
7835 -183 -326 0
7835 -183 -324 0
7835 -183 -322 0
7835 -183 -320 0
7835 -183 -318 0
7835 -183 -317 0
7835 -182 -60 0
7835 -182 -330 0
7835 -182 -328 0
7835 -182 -326 0
7835 -182 -324 0
7835 -182 -322 0
7835 -182 -320 0
7835 -182 -318 0
7835 -182 -317 0
c ((18<=(x_00002_00004 + x_00003_00004 + x_00001_00004))=tv=SATLiteral(7836))
-7836 -328 -47 0
-7836 -326 -48 0
-7836 -324 -50 0
-7836 -322 -52 0
-7836 -320 -54 0
-7836 -318 -56 0
-7836 -317 -58 0
-7836 -195 -330 -47 0
-7836 -195 -328 -48 0
-7836 -195 -326 -50 0
-7836 -195 -324 -52 0
-7836 -195 -322 -54 0
-7836 -195 -320 -56 0
-7836 -195 -318 -58 0
-7836 -195 -317 -60 0
-7836 -193 -47 0
-7836 -193 -330 -48 0
-7836 -193 -328 -50 0
-7836 -193 -326 -52 0
-7836 -193 -324 -54 0
-7836 -193 -322 -56 0
-7836 -193 -320 -58 0
-7836 -193 -318 -60 0
-7836 -193 -317 0
-7836 -191 -48 0
-7836 -191 -330 -50 0
-7836 -191 -328 -52 0
-7836 -191 -326 -54 0
-7836 -191 -324 -56 0
-7836 -191 -322 -58 0
-7836 -191 -320 -60 0
-7836 -191 -318 0
-7836 -191 -317 0
-7836 -189 -50 0
-7836 -189 -330 -52 0
-7836 -189 -328 -54 0
-7836 -189 -326 -56 0
-7836 -189 -324 -58 0
-7836 -189 -322 -60 0
-7836 -189 -320 0
-7836 -189 -318 0
-7836 -189 -317 0
-7836 -187 -52 0
-7836 -187 -330 -54 0
-7836 -187 -328 -56 0
-7836 -187 -326 -58 0
-7836 -187 -324 -60 0
-7836 -187 -322 0
-7836 -187 -320 0
-7836 -187 -318 0
-7836 -187 -317 0
-7836 -185 -54 0
-7836 -185 -330 -56 0
-7836 -185 -328 -58 0
-7836 -185 -326 -60 0
-7836 -185 -324 0
-7836 -185 -322 0
-7836 -185 -320 0
-7836 -185 -318 0
-7836 -185 -317 0
-7836 -183 -56 0
-7836 -183 -330 -58 0
-7836 -183 -328 -60 0
-7836 -183 -326 0
-7836 -183 -324 0
-7836 -183 -322 0
-7836 -183 -320 0
-7836 -183 -318 0
-7836 -183 -317 0
-7836 -182 -58 0
-7836 -182 -330 -60 0
-7836 -182 -328 0
-7836 -182 -326 0
-7836 -182 -324 0
-7836 -182 -322 0
-7836 -182 -320 0
-7836 -182 -318 0
-7836 -182 -317 0
7836 328 60 0
7836 330 58 0
7836 182 326 60 0
7836 182 328 58 0
7836 182 330 56 0
7836 183 324 60 0
7836 183 326 58 0
7836 183 328 56 0
7836 183 330 54 0
7836 185 322 60 0
7836 185 324 58 0
7836 185 326 56 0
7836 185 328 54 0
7836 185 330 52 0
7836 187 320 60 0
7836 187 322 58 0
7836 187 324 56 0
7836 187 326 54 0
7836 187 328 52 0
7836 187 330 50 0
7836 189 318 60 0
7836 189 320 58 0
7836 189 322 56 0
7836 189 324 54 0
7836 189 326 52 0
7836 189 328 50 0
7836 189 330 48 0
7836 191 317 60 0
7836 191 318 58 0
7836 191 320 56 0
7836 191 322 54 0
7836 191 324 52 0
7836 191 326 50 0
7836 191 328 48 0
7836 191 330 47 0
7836 193 60 0
7836 193 317 58 0
7836 193 318 56 0
7836 193 320 54 0
7836 193 322 52 0
7836 193 324 50 0
7836 193 326 48 0
7836 193 328 47 0
7836 193 330 0
7836 195 58 0
7836 195 317 56 0
7836 195 318 54 0
7836 195 320 52 0
7836 195 322 50 0
7836 195 324 48 0
7836 195 326 47 0
7836 195 328 0
7836 195 330 0
c (((aux468 + shift(x_00001_00006, -1) + shift(x_00001_00007, -1))<=10)=tv=SATLiteral(7837))
-7837 1817 0
-7837 92 1815 0
-7837 93 1813 0
-7837 95 1811 0
-7837 97 1809 0
-7837 99 1807 0
-7837 101 1805 0
-7837 103 1803 0
-7837 105 1801 0
-7837 77 1815 0
-7837 77 92 1813 0
-7837 77 93 1811 0
-7837 77 95 1809 0
-7837 77 97 1807 0
-7837 77 99 1805 0
-7837 77 101 1803 0
-7837 77 103 1801 0
-7837 77 105 1799 0
-7837 78 1813 0
-7837 78 92 1811 0
-7837 78 93 1809 0
-7837 78 95 1807 0
-7837 78 97 1805 0
-7837 78 99 1803 0
-7837 78 101 1801 0
-7837 78 103 1799 0
-7837 78 105 1798 0
-7837 80 1811 0
-7837 80 92 1809 0
-7837 80 93 1807 0
-7837 80 95 1805 0
-7837 80 97 1803 0
-7837 80 99 1801 0
-7837 80 101 1799 0
-7837 80 103 1798 0
-7837 80 105 0
-7837 82 1809 0
-7837 82 92 1807 0
-7837 82 93 1805 0
-7837 82 95 1803 0
-7837 82 97 1801 0
-7837 82 99 1799 0
-7837 82 101 1798 0
-7837 82 103 0
-7837 82 105 0
-7837 84 1807 0
-7837 84 92 1805 0
-7837 84 93 1803 0
-7837 84 95 1801 0
-7837 84 97 1799 0
-7837 84 99 1798 0
-7837 84 101 0
-7837 84 103 0
-7837 84 105 0
-7837 86 1805 0
-7837 86 92 1803 0
-7837 86 93 1801 0
-7837 86 95 1799 0
-7837 86 97 1798 0
-7837 86 99 0
-7837 86 101 0
-7837 86 103 0
-7837 86 105 0
-7837 88 1803 0
-7837 88 92 1801 0
-7837 88 93 1799 0
-7837 88 95 1798 0
-7837 88 97 0
-7837 88 99 0
-7837 88 101 0
-7837 88 103 0
-7837 88 105 0
-7837 90 1801 0
-7837 90 92 1799 0
-7837 90 93 1798 0
-7837 90 95 0
-7837 90 97 0
-7837 90 99 0
-7837 90 101 0
-7837 90 103 0
-7837 90 105 0
7837 -95 -1798 0
7837 -93 -1799 0
7837 -92 -1801 0
7837 -90 -97 -1798 0
7837 -90 -95 -1799 0
7837 -90 -93 -1801 0
7837 -90 -92 -1803 0
7837 -88 -99 -1798 0
7837 -88 -97 -1799 0
7837 -88 -95 -1801 0
7837 -88 -93 -1803 0
7837 -88 -92 -1805 0
7837 -86 -101 -1798 0
7837 -86 -99 -1799 0
7837 -86 -97 -1801 0
7837 -86 -95 -1803 0
7837 -86 -93 -1805 0
7837 -86 -92 -1807 0
7837 -84 -103 -1798 0
7837 -84 -101 -1799 0
7837 -84 -99 -1801 0
7837 -84 -97 -1803 0
7837 -84 -95 -1805 0
7837 -84 -93 -1807 0
7837 -84 -92 -1809 0
7837 -82 -105 -1798 0
7837 -82 -103 -1799 0
7837 -82 -101 -1801 0
7837 -82 -99 -1803 0
7837 -82 -97 -1805 0
7837 -82 -95 -1807 0
7837 -82 -93 -1809 0
7837 -82 -92 -1811 0
7837 -80 -1798 0
7837 -80 -105 -1799 0
7837 -80 -103 -1801 0
7837 -80 -101 -1803 0
7837 -80 -99 -1805 0
7837 -80 -97 -1807 0
7837 -80 -95 -1809 0
7837 -80 -93 -1811 0
7837 -80 -92 -1813 0
7837 -78 -1799 0
7837 -78 -105 -1801 0
7837 -78 -103 -1803 0
7837 -78 -101 -1805 0
7837 -78 -99 -1807 0
7837 -78 -97 -1809 0
7837 -78 -95 -1811 0
7837 -78 -93 -1813 0
7837 -78 -92 -1815 0
7837 -77 -1801 0
7837 -77 -105 -1803 0
7837 -77 -103 -1805 0
7837 -77 -101 -1807 0
7837 -77 -99 -1809 0
7837 -77 -97 -1811 0
7837 -77 -95 -1813 0
7837 -77 -93 -1815 0
7837 -77 -92 -1817 0
c ((10<=(aux468 + shift(x_00001_00006, -1) + shift(x_00001_00007, -1)))=tv=SATLiteral(7838))
-7838 -93 -1798 0
-7838 -92 -1799 0
-7838 -90 -95 -1798 0
-7838 -90 -93 -1799 0
-7838 -90 -92 -1801 0
-7838 -88 -97 -1798 0
-7838 -88 -95 -1799 0
-7838 -88 -93 -1801 0
-7838 -88 -92 -1803 0
-7838 -86 -99 -1798 0
-7838 -86 -97 -1799 0
-7838 -86 -95 -1801 0
-7838 -86 -93 -1803 0
-7838 -86 -92 -1805 0
-7838 -84 -101 -1798 0
-7838 -84 -99 -1799 0
-7838 -84 -97 -1801 0
-7838 -84 -95 -1803 0
-7838 -84 -93 -1805 0
-7838 -84 -92 -1807 0
-7838 -82 -103 -1798 0
-7838 -82 -101 -1799 0
-7838 -82 -99 -1801 0
-7838 -82 -97 -1803 0
-7838 -82 -95 -1805 0
-7838 -82 -93 -1807 0
-7838 -82 -92 -1809 0
-7838 -80 -105 -1798 0
-7838 -80 -103 -1799 0
-7838 -80 -101 -1801 0
-7838 -80 -99 -1803 0
-7838 -80 -97 -1805 0
-7838 -80 -95 -1807 0
-7838 -80 -93 -1809 0
-7838 -80 -92 -1811 0
-7838 -78 -1798 0
-7838 -78 -105 -1799 0
-7838 -78 -103 -1801 0
-7838 -78 -101 -1803 0
-7838 -78 -99 -1805 0
-7838 -78 -97 -1807 0
-7838 -78 -95 -1809 0
-7838 -78 -93 -1811 0
-7838 -78 -92 -1813 0
-7838 -77 -1799 0
-7838 -77 -105 -1801 0
-7838 -77 -103 -1803 0
-7838 -77 -101 -1805 0
-7838 -77 -99 -1807 0
-7838 -77 -97 -1809 0
-7838 -77 -95 -1811 0
-7838 -77 -93 -1813 0
-7838 -77 -92 -1815 0
7838 1815 0
7838 92 1813 0
7838 93 1811 0
7838 95 1809 0
7838 97 1807 0
7838 99 1805 0
7838 101 1803 0
7838 103 1801 0
7838 105 1799 0
7838 77 1813 0
7838 77 92 1811 0
7838 77 93 1809 0
7838 77 95 1807 0
7838 77 97 1805 0
7838 77 99 1803 0
7838 77 101 1801 0
7838 77 103 1799 0
7838 77 105 1798 0
7838 78 1811 0
7838 78 92 1809 0
7838 78 93 1807 0
7838 78 95 1805 0
7838 78 97 1803 0
7838 78 99 1801 0
7838 78 101 1799 0
7838 78 103 1798 0
7838 78 105 0
7838 80 1809 0
7838 80 92 1807 0
7838 80 93 1805 0
7838 80 95 1803 0
7838 80 97 1801 0
7838 80 99 1799 0
7838 80 101 1798 0
7838 80 103 0
7838 80 105 0
7838 82 1807 0
7838 82 92 1805 0
7838 82 93 1803 0
7838 82 95 1801 0
7838 82 97 1799 0
7838 82 99 1798 0
7838 82 101 0
7838 82 103 0
7838 82 105 0
7838 84 1805 0
7838 84 92 1803 0
7838 84 93 1801 0
7838 84 95 1799 0
7838 84 97 1798 0
7838 84 99 0
7838 84 101 0
7838 84 103 0
7838 84 105 0
7838 86 1803 0
7838 86 92 1801 0
7838 86 93 1799 0
7838 86 95 1798 0
7838 86 97 0
7838 86 99 0
7838 86 101 0
7838 86 103 0
7838 86 105 0
7838 88 1801 0
7838 88 92 1799 0
7838 88 93 1798 0
7838 88 95 0
7838 88 97 0
7838 88 99 0
7838 88 101 0
7838 88 103 0
7838 88 105 0
7838 90 1799 0
7838 90 92 1798 0
7838 90 93 0
7838 90 95 0
7838 90 97 0
7838 90 99 0
7838 90 101 0
7838 90 103 0
7838 90 105 0
c (((x_00002_00008 + x_00002_00009 + x_00001_00009)<=21)=tv=SATLiteral(7839))
-7839 245 270 135 0
-7839 247 268 135 0
-7839 247 270 133 0
-7839 249 266 135 0
-7839 249 268 133 0
-7839 249 270 131 0
-7839 251 264 135 0
-7839 251 266 133 0
-7839 251 268 131 0
-7839 251 270 129 0
-7839 253 262 135 0
-7839 253 264 133 0
-7839 253 266 131 0
-7839 253 268 129 0
-7839 253 270 127 0
-7839 255 260 135 0
-7839 255 262 133 0
-7839 255 264 131 0
-7839 255 266 129 0
-7839 255 268 127 0
-7839 255 270 125 0
7839 -125 0
7839 -270 -127 0
7839 -268 -129 0
7839 -266 -131 0
7839 -264 -133 0
7839 -262 -135 0
7839 -260 0
7839 -258 0
7839 -257 0
7839 -255 -127 0
7839 -255 -270 -129 0
7839 -255 -268 -131 0
7839 -255 -266 -133 0
7839 -255 -264 -135 0
7839 -255 -262 0
7839 -255 -260 0
7839 -255 -258 0
7839 -255 -257 0
7839 -253 -129 0
7839 -253 -270 -131 0
7839 -253 -268 -133 0
7839 -253 -266 -135 0
7839 -253 -264 0
7839 -253 -262 0
7839 -253 -260 0
7839 -253 -258 0
7839 -253 -257 0
7839 -251 -131 0
7839 -251 -270 -133 0
7839 -251 -268 -135 0
7839 -251 -266 0
7839 -251 -264 0
7839 -251 -262 0
7839 -251 -260 0
7839 -251 -258 0
7839 -251 -257 0
7839 -249 -133 0
7839 -249 -270 -135 0
7839 -249 -268 0
7839 -249 -266 0
7839 -249 -264 0
7839 -249 -262 0
7839 -249 -260 0
7839 -249 -258 0
7839 -249 -257 0
7839 -247 -135 0
7839 -247 -270 0
7839 -247 -268 0
7839 -247 -266 0
7839 -247 -264 0
7839 -247 -262 0
7839 -247 -260 0
7839 -247 -258 0
7839 -247 -257 0
7839 -245 0
7839 -245 -270 0
7839 -245 -268 0
7839 -245 -266 0
7839 -245 -264 0
7839 -245 -262 0
7839 -245 -260 0
7839 -245 -258 0
7839 -245 -257 0
7839 -243 0
7839 -243 -270 0
7839 -243 -268 0
7839 -243 -266 0
7839 -243 -264 0
7839 -243 -262 0
7839 -243 -260 0
7839 -243 -258 0
7839 -243 -257 0
7839 -242 0
7839 -242 -270 0
7839 -242 -268 0
7839 -242 -266 0
7839 -242 -264 0
7839 -242 -262 0
7839 -242 -260 0
7839 -242 -258 0
7839 -242 -257 0
c ((21<=(x_00002_00008 + x_00002_00009 + x_00001_00009))=tv=SATLiteral(7840))
-7840 -123 0
-7840 -270 -125 0
-7840 -268 -127 0
-7840 -266 -129 0
-7840 -264 -131 0
-7840 -262 -133 0
-7840 -260 -135 0
-7840 -258 0
-7840 -257 0
-7840 -255 -125 0
-7840 -255 -270 -127 0
-7840 -255 -268 -129 0
-7840 -255 -266 -131 0
-7840 -255 -264 -133 0
-7840 -255 -262 -135 0
-7840 -255 -260 0
-7840 -255 -258 0
-7840 -255 -257 0
-7840 -253 -127 0
-7840 -253 -270 -129 0
-7840 -253 -268 -131 0
-7840 -253 -266 -133 0
-7840 -253 -264 -135 0
-7840 -253 -262 0
-7840 -253 -260 0
-7840 -253 -258 0
-7840 -253 -257 0
-7840 -251 -129 0
-7840 -251 -270 -131 0
-7840 -251 -268 -133 0
-7840 -251 -266 -135 0
-7840 -251 -264 0
-7840 -251 -262 0
-7840 -251 -260 0
-7840 -251 -258 0
-7840 -251 -257 0
-7840 -249 -131 0
-7840 -249 -270 -133 0
-7840 -249 -268 -135 0
-7840 -249 -266 0
-7840 -249 -264 0
-7840 -249 -262 0
-7840 -249 -260 0
-7840 -249 -258 0
-7840 -249 -257 0
-7840 -247 -133 0
-7840 -247 -270 -135 0
-7840 -247 -268 0
-7840 -247 -266 0
-7840 -247 -264 0
-7840 -247 -262 0
-7840 -247 -260 0
-7840 -247 -258 0
-7840 -247 -257 0
-7840 -245 -135 0
-7840 -245 -270 0
-7840 -245 -268 0
-7840 -245 -266 0
-7840 -245 -264 0
-7840 -245 -262 0
-7840 -245 -260 0
-7840 -245 -258 0
-7840 -245 -257 0
-7840 -243 0
-7840 -243 -270 0
-7840 -243 -268 0
-7840 -243 -266 0
-7840 -243 -264 0
-7840 -243 -262 0
-7840 -243 -260 0
-7840 -243 -258 0
-7840 -243 -257 0
-7840 -242 0
-7840 -242 -270 0
-7840 -242 -268 0
-7840 -242 -266 0
-7840 -242 -264 0
-7840 -242 -262 0
-7840 -242 -260 0
-7840 -242 -258 0
-7840 -242 -257 0
7840 243 270 135 0
7840 245 268 135 0
7840 245 270 133 0
7840 247 266 135 0
7840 247 268 133 0
7840 247 270 131 0
7840 249 264 135 0
7840 249 266 133 0
7840 249 268 131 0
7840 249 270 129 0
7840 251 262 135 0
7840 251 264 133 0
7840 251 266 131 0
7840 251 268 129 0
7840 251 270 127 0
7840 253 260 135 0
7840 253 262 133 0
7840 253 264 131 0
7840 253 266 129 0
7840 253 268 127 0
7840 253 270 125 0
7840 255 258 135 0
7840 255 260 133 0
7840 255 262 131 0
7840 255 264 129 0
7840 255 266 127 0
7840 255 268 125 0
7840 255 270 123 0
c (((x_00002_00005 + x_00002_00006 + x_00002_00007)<=13)=tv=SATLiteral(7841))
-7841 215 240 0
-7841 217 238 0
-7841 219 236 0
-7841 221 234 0
-7841 223 232 0
-7841 225 230 0
-7841 197 213 240 0
-7841 197 215 238 0
-7841 197 217 236 0
-7841 197 219 234 0
-7841 197 221 232 0
-7841 197 223 230 0
-7841 197 225 228 0
-7841 198 212 240 0
-7841 198 213 238 0
-7841 198 215 236 0
-7841 198 217 234 0
-7841 198 219 232 0
-7841 198 221 230 0
-7841 198 223 228 0
-7841 198 225 227 0
-7841 200 240 0
-7841 200 212 238 0
-7841 200 213 236 0
-7841 200 215 234 0
-7841 200 217 232 0
-7841 200 219 230 0
-7841 200 221 228 0
-7841 200 223 227 0
-7841 200 225 0
-7841 202 238 0
-7841 202 212 236 0
-7841 202 213 234 0
-7841 202 215 232 0
-7841 202 217 230 0
-7841 202 219 228 0
-7841 202 221 227 0
-7841 202 223 0
-7841 202 225 0
-7841 204 236 0
-7841 204 212 234 0
-7841 204 213 232 0
-7841 204 215 230 0
-7841 204 217 228 0
-7841 204 219 227 0
-7841 204 221 0
-7841 204 223 0
-7841 204 225 0
-7841 206 234 0
-7841 206 212 232 0
-7841 206 213 230 0
-7841 206 215 228 0
-7841 206 217 227 0
-7841 206 219 0
-7841 206 221 0
-7841 206 223 0
-7841 206 225 0
-7841 208 232 0
-7841 208 212 230 0
-7841 208 213 228 0
-7841 208 215 227 0
-7841 208 217 0
-7841 208 219 0
-7841 208 221 0
-7841 208 223 0
-7841 208 225 0
-7841 210 230 0
-7841 210 212 228 0
-7841 210 213 227 0
-7841 210 215 0
-7841 210 217 0
-7841 210 219 0
-7841 210 221 0
-7841 210 223 0
-7841 210 225 0
7841 -215 -227 0
7841 -213 -228 0
7841 -212 -230 0
7841 -210 -217 -227 0
7841 -210 -215 -228 0
7841 -210 -213 -230 0
7841 -210 -212 -232 0
7841 -208 -219 -227 0
7841 -208 -217 -228 0
7841 -208 -215 -230 0
7841 -208 -213 -232 0
7841 -208 -212 -234 0
7841 -206 -221 -227 0
7841 -206 -219 -228 0
7841 -206 -217 -230 0
7841 -206 -215 -232 0
7841 -206 -213 -234 0
7841 -206 -212 -236 0
7841 -204 -223 -227 0
7841 -204 -221 -228 0
7841 -204 -219 -230 0
7841 -204 -217 -232 0
7841 -204 -215 -234 0
7841 -204 -213 -236 0
7841 -204 -212 -238 0
7841 -202 -225 -227 0
7841 -202 -223 -228 0
7841 -202 -221 -230 0
7841 -202 -219 -232 0
7841 -202 -217 -234 0
7841 -202 -215 -236 0
7841 -202 -213 -238 0
7841 -202 -212 -240 0
7841 -200 -227 0
7841 -200 -225 -228 0
7841 -200 -223 -230 0
7841 -200 -221 -232 0
7841 -200 -219 -234 0
7841 -200 -217 -236 0
7841 -200 -215 -238 0
7841 -200 -213 -240 0
7841 -200 -212 0
7841 -198 -228 0
7841 -198 -225 -230 0
7841 -198 -223 -232 0
7841 -198 -221 -234 0
7841 -198 -219 -236 0
7841 -198 -217 -238 0
7841 -198 -215 -240 0
7841 -198 -213 0
7841 -198 -212 0
7841 -197 -230 0
7841 -197 -225 -232 0
7841 -197 -223 -234 0
7841 -197 -221 -236 0
7841 -197 -219 -238 0
7841 -197 -217 -240 0
7841 -197 -215 0
7841 -197 -213 0
7841 -197 -212 0
c ((13<=(x_00002_00005 + x_00002_00006 + x_00002_00007))=tv=SATLiteral(7842))
-7842 -213 -227 0
-7842 -212 -228 0
-7842 -210 -215 -227 0
-7842 -210 -213 -228 0
-7842 -210 -212 -230 0
-7842 -208 -217 -227 0
-7842 -208 -215 -228 0
-7842 -208 -213 -230 0
-7842 -208 -212 -232 0
-7842 -206 -219 -227 0
-7842 -206 -217 -228 0
-7842 -206 -215 -230 0
-7842 -206 -213 -232 0
-7842 -206 -212 -234 0
-7842 -204 -221 -227 0
-7842 -204 -219 -228 0
-7842 -204 -217 -230 0
-7842 -204 -215 -232 0
-7842 -204 -213 -234 0
-7842 -204 -212 -236 0
-7842 -202 -223 -227 0
-7842 -202 -221 -228 0
-7842 -202 -219 -230 0
-7842 -202 -217 -232 0
-7842 -202 -215 -234 0
-7842 -202 -213 -236 0
-7842 -202 -212 -238 0
-7842 -200 -225 -227 0
-7842 -200 -223 -228 0
-7842 -200 -221 -230 0
-7842 -200 -219 -232 0
-7842 -200 -217 -234 0
-7842 -200 -215 -236 0
-7842 -200 -213 -238 0
-7842 -200 -212 -240 0
-7842 -198 -227 0
-7842 -198 -225 -228 0
-7842 -198 -223 -230 0
-7842 -198 -221 -232 0
-7842 -198 -219 -234 0
-7842 -198 -217 -236 0
-7842 -198 -215 -238 0
-7842 -198 -213 -240 0
-7842 -198 -212 0
-7842 -197 -228 0
-7842 -197 -225 -230 0
-7842 -197 -223 -232 0
-7842 -197 -221 -234 0
-7842 -197 -219 -236 0
-7842 -197 -217 -238 0
-7842 -197 -215 -240 0
-7842 -197 -213 0
-7842 -197 -212 0
7842 213 240 0
7842 215 238 0
7842 217 236 0
7842 219 234 0
7842 221 232 0
7842 223 230 0
7842 225 228 0
7842 197 212 240 0
7842 197 213 238 0
7842 197 215 236 0
7842 197 217 234 0
7842 197 219 232 0
7842 197 221 230 0
7842 197 223 228 0
7842 197 225 227 0
7842 198 240 0
7842 198 212 238 0
7842 198 213 236 0
7842 198 215 234 0
7842 198 217 232 0
7842 198 219 230 0
7842 198 221 228 0
7842 198 223 227 0
7842 198 225 0
7842 200 238 0
7842 200 212 236 0
7842 200 213 234 0
7842 200 215 232 0
7842 200 217 230 0
7842 200 219 228 0
7842 200 221 227 0
7842 200 223 0
7842 200 225 0
7842 202 236 0
7842 202 212 234 0
7842 202 213 232 0
7842 202 215 230 0
7842 202 217 228 0
7842 202 219 227 0
7842 202 221 0
7842 202 223 0
7842 202 225 0
7842 204 234 0
7842 204 212 232 0
7842 204 213 230 0
7842 204 215 228 0
7842 204 217 227 0
7842 204 219 0
7842 204 221 0
7842 204 223 0
7842 204 225 0
7842 206 232 0
7842 206 212 230 0
7842 206 213 228 0
7842 206 215 227 0
7842 206 217 0
7842 206 219 0
7842 206 221 0
7842 206 223 0
7842 206 225 0
7842 208 230 0
7842 208 212 228 0
7842 208 213 227 0
7842 208 215 0
7842 208 217 0
7842 208 219 0
7842 208 221 0
7842 208 223 0
7842 208 225 0
7842 210 228 0
7842 210 212 227 0
7842 210 213 0
7842 210 215 0
7842 210 217 0
7842 210 219 0
7842 210 221 0
7842 210 223 0
7842 210 225 0
c (((x_00003_00001 + x_00004_00001)<=10)=tv=SATLiteral(7843))
-7843 272 420 0
-7843 273 418 0
-7843 275 416 0
-7843 277 414 0
-7843 279 412 0
-7843 281 410 0
-7843 283 408 0
-7843 285 407 0
7843 -407 0
7843 -285 -408 0
7843 -283 -410 0
7843 -281 -412 0
7843 -279 -414 0
7843 -277 -416 0
7843 -275 -418 0
7843 -273 -420 0
7843 -272 0
c ((10<=(x_00003_00001 + x_00004_00001))=tv=SATLiteral(7844))
-7844 -285 -407 0
-7844 -283 -408 0
-7844 -281 -410 0
-7844 -279 -412 0
-7844 -277 -414 0
-7844 -275 -416 0
-7844 -273 -418 0
-7844 -272 -420 0
7844 420 0
7844 272 418 0
7844 273 416 0
7844 275 414 0
7844 277 412 0
7844 279 410 0
7844 281 408 0
7844 283 407 0
7844 285 0
c (((x_00003_00002 + x_00004_00002)<=15)=tv=SATLiteral(7845))
-7845 296 435 0
-7845 298 433 0
-7845 300 431 0
7845 -431 0
7845 -300 -433 0
7845 -298 -435 0
7845 -296 0
7845 -294 0
7845 -292 0
7845 -290 0
7845 -288 0
7845 -287 0
c ((15<=(x_00003_00002 + x_00004_00002))=tv=SATLiteral(7846))
-7846 -429 0
-7846 -300 -431 0
-7846 -298 -433 0
-7846 -296 -435 0
-7846 -294 0
-7846 -292 0
-7846 -290 0
-7846 -288 0
-7846 -287 0
7846 294 435 0
7846 296 433 0
7846 298 431 0
7846 300 429 0
c (((x_00003_00005 + x_00003_00006)<=12)=tv=SATLiteral(7847))
-7847 335 360 0
-7847 337 358 0
-7847 339 356 0
-7847 341 354 0
-7847 343 352 0
-7847 345 350 0
7847 -350 0
7847 -345 -352 0
7847 -343 -354 0
7847 -341 -356 0
7847 -339 -358 0
7847 -337 -360 0
7847 -335 0
7847 -333 0
7847 -332 0
c ((12<=(x_00003_00005 + x_00003_00006))=tv=SATLiteral(7848))
-7848 -348 0
-7848 -345 -350 0
-7848 -343 -352 0
-7848 -341 -354 0
-7848 -339 -356 0
-7848 -337 -358 0
-7848 -335 -360 0
-7848 -333 0
-7848 -332 0
7848 333 360 0
7848 335 358 0
7848 337 356 0
7848 339 354 0
7848 341 352 0
7848 343 350 0
7848 345 348 0
c (((x_00003_00007 + x_00003_00008 + x_00003_00009)<=12)=tv=SATLiteral(7849))
-7849 378 405 0
-7849 380 403 0
-7849 382 401 0
-7849 384 399 0
-7849 386 397 0
-7849 388 395 0
-7849 390 393 0
-7849 362 377 405 0
-7849 362 378 403 0
-7849 362 380 401 0
-7849 362 382 399 0
-7849 362 384 397 0
-7849 362 386 395 0
-7849 362 388 393 0
-7849 362 390 392 0
-7849 363 405 0
-7849 363 377 403 0
-7849 363 378 401 0
-7849 363 380 399 0
-7849 363 382 397 0
-7849 363 384 395 0
-7849 363 386 393 0
-7849 363 388 392 0
-7849 363 390 0
-7849 365 403 0
-7849 365 377 401 0
-7849 365 378 399 0
-7849 365 380 397 0
-7849 365 382 395 0
-7849 365 384 393 0
-7849 365 386 392 0
-7849 365 388 0
-7849 365 390 0
-7849 367 401 0
-7849 367 377 399 0
-7849 367 378 397 0
-7849 367 380 395 0
-7849 367 382 393 0
-7849 367 384 392 0
-7849 367 386 0
-7849 367 388 0
-7849 367 390 0
-7849 369 399 0
-7849 369 377 397 0
-7849 369 378 395 0
-7849 369 380 393 0
-7849 369 382 392 0
-7849 369 384 0
-7849 369 386 0
-7849 369 388 0
-7849 369 390 0
-7849 371 397 0
-7849 371 377 395 0
-7849 371 378 393 0
-7849 371 380 392 0
-7849 371 382 0
-7849 371 384 0
-7849 371 386 0
-7849 371 388 0
-7849 371 390 0
-7849 373 395 0
-7849 373 377 393 0
-7849 373 378 392 0
-7849 373 380 0
-7849 373 382 0
-7849 373 384 0
-7849 373 386 0
-7849 373 388 0
-7849 373 390 0
-7849 375 393 0
-7849 375 377 392 0
-7849 375 378 0
-7849 375 380 0
-7849 375 382 0
-7849 375 384 0
-7849 375 386 0
-7849 375 388 0
-7849 375 390 0
7849 -378 -392 0
7849 -377 -393 0
7849 -375 -380 -392 0
7849 -375 -378 -393 0
7849 -375 -377 -395 0
7849 -373 -382 -392 0
7849 -373 -380 -393 0
7849 -373 -378 -395 0
7849 -373 -377 -397 0
7849 -371 -384 -392 0
7849 -371 -382 -393 0
7849 -371 -380 -395 0
7849 -371 -378 -397 0
7849 -371 -377 -399 0
7849 -369 -386 -392 0
7849 -369 -384 -393 0
7849 -369 -382 -395 0
7849 -369 -380 -397 0
7849 -369 -378 -399 0
7849 -369 -377 -401 0
7849 -367 -388 -392 0
7849 -367 -386 -393 0
7849 -367 -384 -395 0
7849 -367 -382 -397 0
7849 -367 -380 -399 0
7849 -367 -378 -401 0
7849 -367 -377 -403 0
7849 -365 -390 -392 0
7849 -365 -388 -393 0
7849 -365 -386 -395 0
7849 -365 -384 -397 0
7849 -365 -382 -399 0
7849 -365 -380 -401 0
7849 -365 -378 -403 0
7849 -365 -377 -405 0
7849 -363 -392 0
7849 -363 -390 -393 0
7849 -363 -388 -395 0
7849 -363 -386 -397 0
7849 -363 -384 -399 0
7849 -363 -382 -401 0
7849 -363 -380 -403 0
7849 -363 -378 -405 0
7849 -363 -377 0
7849 -362 -393 0
7849 -362 -390 -395 0
7849 -362 -388 -397 0
7849 -362 -386 -399 0
7849 -362 -384 -401 0
7849 -362 -382 -403 0
7849 -362 -380 -405 0
7849 -362 -378 0
7849 -362 -377 0
c ((12<=(x_00003_00007 + x_00003_00008 + x_00003_00009))=tv=SATLiteral(7850))
-7850 -377 -392 0
-7850 -375 -378 -392 0
-7850 -375 -377 -393 0
-7850 -373 -380 -392 0
-7850 -373 -378 -393 0
-7850 -373 -377 -395 0
-7850 -371 -382 -392 0
-7850 -371 -380 -393 0
-7850 -371 -378 -395 0
-7850 -371 -377 -397 0
-7850 -369 -384 -392 0
-7850 -369 -382 -393 0
-7850 -369 -380 -395 0
-7850 -369 -378 -397 0
-7850 -369 -377 -399 0
-7850 -367 -386 -392 0
-7850 -367 -384 -393 0
-7850 -367 -382 -395 0
-7850 -367 -380 -397 0
-7850 -367 -378 -399 0
-7850 -367 -377 -401 0
-7850 -365 -388 -392 0
-7850 -365 -386 -393 0
-7850 -365 -384 -395 0
-7850 -365 -382 -397 0
-7850 -365 -380 -399 0
-7850 -365 -378 -401 0
-7850 -365 -377 -403 0
-7850 -363 -390 -392 0
-7850 -363 -388 -393 0
-7850 -363 -386 -395 0
-7850 -363 -384 -397 0
-7850 -363 -382 -399 0
-7850 -363 -380 -401 0
-7850 -363 -378 -403 0
-7850 -363 -377 -405 0
-7850 -362 -392 0
-7850 -362 -390 -393 0
-7850 -362 -388 -395 0
-7850 -362 -386 -397 0
-7850 -362 -384 -399 0
-7850 -362 -382 -401 0
-7850 -362 -380 -403 0
-7850 -362 -378 -405 0
-7850 -362 -377 0
7850 377 405 0
7850 378 403 0
7850 380 401 0
7850 382 399 0
7850 384 397 0
7850 386 395 0
7850 388 393 0
7850 390 392 0
7850 362 405 0
7850 362 377 403 0
7850 362 378 401 0
7850 362 380 399 0
7850 362 382 397 0
7850 362 384 395 0
7850 362 386 393 0
7850 362 388 392 0
7850 362 390 0
7850 363 403 0
7850 363 377 401 0
7850 363 378 399 0
7850 363 380 397 0
7850 363 382 395 0
7850 363 384 393 0
7850 363 386 392 0
7850 363 388 0
7850 363 390 0
7850 365 401 0
7850 365 377 399 0
7850 365 378 397 0
7850 365 380 395 0
7850 365 382 393 0
7850 365 384 392 0
7850 365 386 0
7850 365 388 0
7850 365 390 0
7850 367 399 0
7850 367 377 397 0
7850 367 378 395 0
7850 367 380 393 0
7850 367 382 392 0
7850 367 384 0
7850 367 386 0
7850 367 388 0
7850 367 390 0
7850 369 397 0
7850 369 377 395 0
7850 369 378 393 0
7850 369 380 392 0
7850 369 382 0
7850 369 384 0
7850 369 386 0
7850 369 388 0
7850 369 390 0
7850 371 395 0
7850 371 377 393 0
7850 371 378 392 0
7850 371 380 0
7850 371 382 0
7850 371 384 0
7850 371 386 0
7850 371 388 0
7850 371 390 0
7850 373 393 0
7850 373 377 392 0
7850 373 378 0
7850 373 380 0
7850 373 382 0
7850 373 384 0
7850 373 386 0
7850 373 388 0
7850 373 390 0
7850 375 392 0
7850 375 377 0
7850 375 378 0
7850 375 380 0
7850 375 382 0
7850 375 384 0
7850 375 386 0
7850 375 388 0
7850 375 390 0
c (((x_00004_00003 + x_00004_00004 + x_00005_00004)<=18)=tv=SATLiteral(7851))
-7851 465 600 0
-7851 437 463 600 0
-7851 437 465 598 0
-7851 438 461 600 0
-7851 438 463 598 0
-7851 438 465 596 0
-7851 440 459 600 0
-7851 440 461 598 0
-7851 440 463 596 0
-7851 440 465 594 0
-7851 442 457 600 0
-7851 442 459 598 0
-7851 442 461 596 0
-7851 442 463 594 0
-7851 442 465 592 0
-7851 444 455 600 0
-7851 444 457 598 0
-7851 444 459 596 0
-7851 444 461 594 0
-7851 444 463 592 0
-7851 444 465 590 0
-7851 446 453 600 0
-7851 446 455 598 0
-7851 446 457 596 0
-7851 446 459 594 0
-7851 446 461 592 0
-7851 446 463 590 0
-7851 446 465 588 0
-7851 448 452 600 0
-7851 448 453 598 0
-7851 448 455 596 0
-7851 448 457 594 0
-7851 448 459 592 0
-7851 448 461 590 0
-7851 448 463 588 0
-7851 448 465 587 0
-7851 450 600 0
-7851 450 452 598 0
-7851 450 453 596 0
-7851 450 455 594 0
-7851 450 457 592 0
-7851 450 459 590 0
-7851 450 461 588 0
-7851 450 463 587 0
-7851 450 465 0
7851 -465 -587 0
7851 -463 -588 0
7851 -461 -590 0
7851 -459 -592 0
7851 -457 -594 0
7851 -455 -596 0
7851 -453 -598 0
7851 -452 -600 0
7851 -450 -587 0
7851 -450 -465 -588 0
7851 -450 -463 -590 0
7851 -450 -461 -592 0
7851 -450 -459 -594 0
7851 -450 -457 -596 0
7851 -450 -455 -598 0
7851 -450 -453 -600 0
7851 -450 -452 0
7851 -448 -588 0
7851 -448 -465 -590 0
7851 -448 -463 -592 0
7851 -448 -461 -594 0
7851 -448 -459 -596 0
7851 -448 -457 -598 0
7851 -448 -455 -600 0
7851 -448 -453 0
7851 -448 -452 0
7851 -446 -590 0
7851 -446 -465 -592 0
7851 -446 -463 -594 0
7851 -446 -461 -596 0
7851 -446 -459 -598 0
7851 -446 -457 -600 0
7851 -446 -455 0
7851 -446 -453 0
7851 -446 -452 0
7851 -444 -592 0
7851 -444 -465 -594 0
7851 -444 -463 -596 0
7851 -444 -461 -598 0
7851 -444 -459 -600 0
7851 -444 -457 0
7851 -444 -455 0
7851 -444 -453 0
7851 -444 -452 0
7851 -442 -594 0
7851 -442 -465 -596 0
7851 -442 -463 -598 0
7851 -442 -461 -600 0
7851 -442 -459 0
7851 -442 -457 0
7851 -442 -455 0
7851 -442 -453 0
7851 -442 -452 0
7851 -440 -596 0
7851 -440 -465 -598 0
7851 -440 -463 -600 0
7851 -440 -461 0
7851 -440 -459 0
7851 -440 -457 0
7851 -440 -455 0
7851 -440 -453 0
7851 -440 -452 0
7851 -438 -598 0
7851 -438 -465 -600 0
7851 -438 -463 0
7851 -438 -461 0
7851 -438 -459 0
7851 -438 -457 0
7851 -438 -455 0
7851 -438 -453 0
7851 -438 -452 0
7851 -437 -600 0
7851 -437 -465 0
7851 -437 -463 0
7851 -437 -461 0
7851 -437 -459 0
7851 -437 -457 0
7851 -437 -455 0
7851 -437 -453 0
7851 -437 -452 0
c ((18<=(x_00004_00003 + x_00004_00004 + x_00005_00004))=tv=SATLiteral(7852))
-7852 -463 -587 0
-7852 -461 -588 0
-7852 -459 -590 0
-7852 -457 -592 0
-7852 -455 -594 0
-7852 -453 -596 0
-7852 -452 -598 0
-7852 -450 -465 -587 0
-7852 -450 -463 -588 0
-7852 -450 -461 -590 0
-7852 -450 -459 -592 0
-7852 -450 -457 -594 0
-7852 -450 -455 -596 0
-7852 -450 -453 -598 0
-7852 -450 -452 -600 0
-7852 -448 -587 0
-7852 -448 -465 -588 0
-7852 -448 -463 -590 0
-7852 -448 -461 -592 0
-7852 -448 -459 -594 0
-7852 -448 -457 -596 0
-7852 -448 -455 -598 0
-7852 -448 -453 -600 0
-7852 -448 -452 0
-7852 -446 -588 0
-7852 -446 -465 -590 0
-7852 -446 -463 -592 0
-7852 -446 -461 -594 0
-7852 -446 -459 -596 0
-7852 -446 -457 -598 0
-7852 -446 -455 -600 0
-7852 -446 -453 0
-7852 -446 -452 0
-7852 -444 -590 0
-7852 -444 -465 -592 0
-7852 -444 -463 -594 0
-7852 -444 -461 -596 0
-7852 -444 -459 -598 0
-7852 -444 -457 -600 0
-7852 -444 -455 0
-7852 -444 -453 0
-7852 -444 -452 0
-7852 -442 -592 0
-7852 -442 -465 -594 0
-7852 -442 -463 -596 0
-7852 -442 -461 -598 0
-7852 -442 -459 -600 0
-7852 -442 -457 0
-7852 -442 -455 0
-7852 -442 -453 0
-7852 -442 -452 0
-7852 -440 -594 0
-7852 -440 -465 -596 0
-7852 -440 -463 -598 0
-7852 -440 -461 -600 0
-7852 -440 -459 0
-7852 -440 -457 0
-7852 -440 -455 0
-7852 -440 -453 0
-7852 -440 -452 0
-7852 -438 -596 0
-7852 -438 -465 -598 0
-7852 -438 -463 -600 0
-7852 -438 -461 0
-7852 -438 -459 0
-7852 -438 -457 0
-7852 -438 -455 0
-7852 -438 -453 0
-7852 -438 -452 0
-7852 -437 -598 0
-7852 -437 -465 -600 0
-7852 -437 -463 0
-7852 -437 -461 0
-7852 -437 -459 0
-7852 -437 -457 0
-7852 -437 -455 0
-7852 -437 -453 0
-7852 -437 -452 0
7852 463 600 0
7852 465 598 0
7852 437 461 600 0
7852 437 463 598 0
7852 437 465 596 0
7852 438 459 600 0
7852 438 461 598 0
7852 438 463 596 0
7852 438 465 594 0
7852 440 457 600 0
7852 440 459 598 0
7852 440 461 596 0
7852 440 463 594 0
7852 440 465 592 0
7852 442 455 600 0
7852 442 457 598 0
7852 442 459 596 0
7852 442 461 594 0
7852 442 463 592 0
7852 442 465 590 0
7852 444 453 600 0
7852 444 455 598 0
7852 444 457 596 0
7852 444 459 594 0
7852 444 461 592 0
7852 444 463 590 0
7852 444 465 588 0
7852 446 452 600 0
7852 446 453 598 0
7852 446 455 596 0
7852 446 457 594 0
7852 446 459 592 0
7852 446 461 590 0
7852 446 463 588 0
7852 446 465 587 0
7852 448 600 0
7852 448 452 598 0
7852 448 453 596 0
7852 448 455 594 0
7852 448 457 592 0
7852 448 459 590 0
7852 448 461 588 0
7852 448 463 587 0
7852 448 465 0
7852 450 598 0
7852 450 452 596 0
7852 450 453 594 0
7852 450 455 592 0
7852 450 457 590 0
7852 450 459 588 0
7852 450 461 587 0
7852 450 463 0
7852 450 465 0
c (((x_00004_00005 + x_00004_00006)<=9)=tv=SATLiteral(7853))
-7853 495 0
-7853 467 493 0
-7853 468 491 0
-7853 470 489 0
-7853 472 487 0
-7853 474 485 0
-7853 476 483 0
-7853 478 482 0
-7853 480 0
7853 -480 -482 0
7853 -478 -483 0
7853 -476 -485 0
7853 -474 -487 0
7853 -472 -489 0
7853 -470 -491 0
7853 -468 -493 0
7853 -467 -495 0
c ((9<=(x_00004_00005 + x_00004_00006))=tv=SATLiteral(7854))
-7854 -478 -482 0
-7854 -476 -483 0
-7854 -474 -485 0
-7854 -472 -487 0
-7854 -470 -489 0
-7854 -468 -491 0
-7854 -467 -493 0
7854 493 0
7854 467 491 0
7854 468 489 0
7854 470 487 0
7854 472 485 0
7854 474 483 0
7854 476 482 0
7854 478 0
7854 480 0
c (((x_00004_00007 + x_00005_00007 + x_00005_00008)<=19)=tv=SATLiteral(7855))
-7855 497 645 660 0
-7855 498 643 660 0
-7855 498 645 658 0
-7855 500 641 660 0
-7855 500 643 658 0
-7855 500 645 656 0
-7855 502 639 660 0
-7855 502 641 658 0
-7855 502 643 656 0
-7855 502 645 654 0
-7855 504 637 660 0
-7855 504 639 658 0
-7855 504 641 656 0
-7855 504 643 654 0
-7855 504 645 652 0
-7855 506 635 660 0
-7855 506 637 658 0
-7855 506 639 656 0
-7855 506 641 654 0
-7855 506 643 652 0
-7855 506 645 650 0
-7855 508 633 660 0
-7855 508 635 658 0
-7855 508 637 656 0
-7855 508 639 654 0
-7855 508 641 652 0
-7855 508 643 650 0
-7855 508 645 648 0
-7855 510 632 660 0
-7855 510 633 658 0
-7855 510 635 656 0
-7855 510 637 654 0
-7855 510 639 652 0
-7855 510 641 650 0
-7855 510 643 648 0
-7855 510 645 647 0
7855 -647 0
7855 -645 -648 0
7855 -643 -650 0
7855 -641 -652 0
7855 -639 -654 0
7855 -637 -656 0
7855 -635 -658 0
7855 -633 -660 0
7855 -632 0
7855 -510 -648 0
7855 -510 -645 -650 0
7855 -510 -643 -652 0
7855 -510 -641 -654 0
7855 -510 -639 -656 0
7855 -510 -637 -658 0
7855 -510 -635 -660 0
7855 -510 -633 0
7855 -510 -632 0
7855 -508 -650 0
7855 -508 -645 -652 0
7855 -508 -643 -654 0
7855 -508 -641 -656 0
7855 -508 -639 -658 0
7855 -508 -637 -660 0
7855 -508 -635 0
7855 -508 -633 0
7855 -508 -632 0
7855 -506 -652 0
7855 -506 -645 -654 0
7855 -506 -643 -656 0
7855 -506 -641 -658 0
7855 -506 -639 -660 0
7855 -506 -637 0
7855 -506 -635 0
7855 -506 -633 0
7855 -506 -632 0
7855 -504 -654 0
7855 -504 -645 -656 0
7855 -504 -643 -658 0
7855 -504 -641 -660 0
7855 -504 -639 0
7855 -504 -637 0
7855 -504 -635 0
7855 -504 -633 0
7855 -504 -632 0
7855 -502 -656 0
7855 -502 -645 -658 0
7855 -502 -643 -660 0
7855 -502 -641 0
7855 -502 -639 0
7855 -502 -637 0
7855 -502 -635 0
7855 -502 -633 0
7855 -502 -632 0
7855 -500 -658 0
7855 -500 -645 -660 0
7855 -500 -643 0
7855 -500 -641 0
7855 -500 -639 0
7855 -500 -637 0
7855 -500 -635 0
7855 -500 -633 0
7855 -500 -632 0
7855 -498 -660 0
7855 -498 -645 0
7855 -498 -643 0
7855 -498 -641 0
7855 -498 -639 0
7855 -498 -637 0
7855 -498 -635 0
7855 -498 -633 0
7855 -498 -632 0
7855 -497 0
7855 -497 -645 0
7855 -497 -643 0
7855 -497 -641 0
7855 -497 -639 0
7855 -497 -637 0
7855 -497 -635 0
7855 -497 -633 0
7855 -497 -632 0
c ((19<=(x_00004_00007 + x_00005_00007 + x_00005_00008))=tv=SATLiteral(7856))
-7856 -645 -647 0
-7856 -643 -648 0
-7856 -641 -650 0
-7856 -639 -652 0
-7856 -637 -654 0
-7856 -635 -656 0
-7856 -633 -658 0
-7856 -632 -660 0
-7856 -510 -647 0
-7856 -510 -645 -648 0
-7856 -510 -643 -650 0
-7856 -510 -641 -652 0
-7856 -510 -639 -654 0
-7856 -510 -637 -656 0
-7856 -510 -635 -658 0
-7856 -510 -633 -660 0
-7856 -510 -632 0
-7856 -508 -648 0
-7856 -508 -645 -650 0
-7856 -508 -643 -652 0
-7856 -508 -641 -654 0
-7856 -508 -639 -656 0
-7856 -508 -637 -658 0
-7856 -508 -635 -660 0
-7856 -508 -633 0
-7856 -508 -632 0
-7856 -506 -650 0
-7856 -506 -645 -652 0
-7856 -506 -643 -654 0
-7856 -506 -641 -656 0
-7856 -506 -639 -658 0
-7856 -506 -637 -660 0
-7856 -506 -635 0
-7856 -506 -633 0
-7856 -506 -632 0
-7856 -504 -652 0
-7856 -504 -645 -654 0
-7856 -504 -643 -656 0
-7856 -504 -641 -658 0
-7856 -504 -639 -660 0
-7856 -504 -637 0
-7856 -504 -635 0
-7856 -504 -633 0
-7856 -504 -632 0
-7856 -502 -654 0
-7856 -502 -645 -656 0
-7856 -502 -643 -658 0
-7856 -502 -641 -660 0
-7856 -502 -639 0
-7856 -502 -637 0
-7856 -502 -635 0
-7856 -502 -633 0
-7856 -502 -632 0
-7856 -500 -656 0
-7856 -500 -645 -658 0
-7856 -500 -643 -660 0
-7856 -500 -641 0
-7856 -500 -639 0
-7856 -500 -637 0
-7856 -500 -635 0
-7856 -500 -633 0
-7856 -500 -632 0
-7856 -498 -658 0
-7856 -498 -645 -660 0
-7856 -498 -643 0
-7856 -498 -641 0
-7856 -498 -639 0
-7856 -498 -637 0
-7856 -498 -635 0
-7856 -498 -633 0
-7856 -498 -632 0
-7856 -497 -660 0
-7856 -497 -645 0
-7856 -497 -643 0
-7856 -497 -641 0
-7856 -497 -639 0
-7856 -497 -637 0
-7856 -497 -635 0
-7856 -497 -633 0
-7856 -497 -632 0
7856 645 660 0
7856 497 643 660 0
7856 497 645 658 0
7856 498 641 660 0
7856 498 643 658 0
7856 498 645 656 0
7856 500 639 660 0
7856 500 641 658 0
7856 500 643 656 0
7856 500 645 654 0
7856 502 637 660 0
7856 502 639 658 0
7856 502 641 656 0
7856 502 643 654 0
7856 502 645 652 0
7856 504 635 660 0
7856 504 637 658 0
7856 504 639 656 0
7856 504 641 654 0
7856 504 643 652 0
7856 504 645 650 0
7856 506 633 660 0
7856 506 635 658 0
7856 506 637 656 0
7856 506 639 654 0
7856 506 641 652 0
7856 506 643 650 0
7856 506 645 648 0
7856 508 632 660 0
7856 508 633 658 0
7856 508 635 656 0
7856 508 637 654 0
7856 508 639 652 0
7856 508 641 650 0
7856 508 643 648 0
7856 508 645 647 0
7856 510 660 0
7856 510 632 658 0
7856 510 633 656 0
7856 510 635 654 0
7856 510 637 652 0
7856 510 639 650 0
7856 510 641 648 0
7856 510 643 647 0
7856 510 645 0
c (((x_00004_00008 + x_00004_00009 + x_00005_00009)<=13)=tv=SATLiteral(7857))
-7857 530 675 0
-7857 532 673 0
-7857 534 671 0
-7857 536 669 0
-7857 538 667 0
-7857 540 665 0
-7857 512 528 675 0
-7857 512 530 673 0
-7857 512 532 671 0
-7857 512 534 669 0
-7857 512 536 667 0
-7857 512 538 665 0
-7857 512 540 663 0
-7857 513 527 675 0
-7857 513 528 673 0
-7857 513 530 671 0
-7857 513 532 669 0
-7857 513 534 667 0
-7857 513 536 665 0
-7857 513 538 663 0
-7857 513 540 662 0
-7857 515 675 0
-7857 515 527 673 0
-7857 515 528 671 0
-7857 515 530 669 0
-7857 515 532 667 0
-7857 515 534 665 0
-7857 515 536 663 0
-7857 515 538 662 0
-7857 515 540 0
-7857 517 673 0
-7857 517 527 671 0
-7857 517 528 669 0
-7857 517 530 667 0
-7857 517 532 665 0
-7857 517 534 663 0
-7857 517 536 662 0
-7857 517 538 0
-7857 517 540 0
-7857 519 671 0
-7857 519 527 669 0
-7857 519 528 667 0
-7857 519 530 665 0
-7857 519 532 663 0
-7857 519 534 662 0
-7857 519 536 0
-7857 519 538 0
-7857 519 540 0
-7857 521 669 0
-7857 521 527 667 0
-7857 521 528 665 0
-7857 521 530 663 0
-7857 521 532 662 0
-7857 521 534 0
-7857 521 536 0
-7857 521 538 0
-7857 521 540 0
-7857 523 667 0
-7857 523 527 665 0
-7857 523 528 663 0
-7857 523 530 662 0
-7857 523 532 0
-7857 523 534 0
-7857 523 536 0
-7857 523 538 0
-7857 523 540 0
-7857 525 665 0
-7857 525 527 663 0
-7857 525 528 662 0
-7857 525 530 0
-7857 525 532 0
-7857 525 534 0
-7857 525 536 0
-7857 525 538 0
-7857 525 540 0
7857 -530 -662 0
7857 -528 -663 0
7857 -527 -665 0
7857 -525 -532 -662 0
7857 -525 -530 -663 0
7857 -525 -528 -665 0
7857 -525 -527 -667 0
7857 -523 -534 -662 0
7857 -523 -532 -663 0
7857 -523 -530 -665 0
7857 -523 -528 -667 0
7857 -523 -527 -669 0
7857 -521 -536 -662 0
7857 -521 -534 -663 0
7857 -521 -532 -665 0
7857 -521 -530 -667 0
7857 -521 -528 -669 0
7857 -521 -527 -671 0
7857 -519 -538 -662 0
7857 -519 -536 -663 0
7857 -519 -534 -665 0
7857 -519 -532 -667 0
7857 -519 -530 -669 0
7857 -519 -528 -671 0
7857 -519 -527 -673 0
7857 -517 -540 -662 0
7857 -517 -538 -663 0
7857 -517 -536 -665 0
7857 -517 -534 -667 0
7857 -517 -532 -669 0
7857 -517 -530 -671 0
7857 -517 -528 -673 0
7857 -517 -527 -675 0
7857 -515 -662 0
7857 -515 -540 -663 0
7857 -515 -538 -665 0
7857 -515 -536 -667 0
7857 -515 -534 -669 0
7857 -515 -532 -671 0
7857 -515 -530 -673 0
7857 -515 -528 -675 0
7857 -515 -527 0
7857 -513 -663 0
7857 -513 -540 -665 0
7857 -513 -538 -667 0
7857 -513 -536 -669 0
7857 -513 -534 -671 0
7857 -513 -532 -673 0
7857 -513 -530 -675 0
7857 -513 -528 0
7857 -513 -527 0
7857 -512 -665 0
7857 -512 -540 -667 0
7857 -512 -538 -669 0
7857 -512 -536 -671 0
7857 -512 -534 -673 0
7857 -512 -532 -675 0
7857 -512 -530 0
7857 -512 -528 0
7857 -512 -527 0
c ((13<=(x_00004_00008 + x_00004_00009 + x_00005_00009))=tv=SATLiteral(7858))
-7858 -528 -662 0
-7858 -527 -663 0
-7858 -525 -530 -662 0
-7858 -525 -528 -663 0
-7858 -525 -527 -665 0
-7858 -523 -532 -662 0
-7858 -523 -530 -663 0
-7858 -523 -528 -665 0
-7858 -523 -527 -667 0
-7858 -521 -534 -662 0
-7858 -521 -532 -663 0
-7858 -521 -530 -665 0
-7858 -521 -528 -667 0
-7858 -521 -527 -669 0
-7858 -519 -536 -662 0
-7858 -519 -534 -663 0
-7858 -519 -532 -665 0
-7858 -519 -530 -667 0
-7858 -519 -528 -669 0
-7858 -519 -527 -671 0
-7858 -517 -538 -662 0
-7858 -517 -536 -663 0
-7858 -517 -534 -665 0
-7858 -517 -532 -667 0
-7858 -517 -530 -669 0
-7858 -517 -528 -671 0
-7858 -517 -527 -673 0
-7858 -515 -540 -662 0
-7858 -515 -538 -663 0
-7858 -515 -536 -665 0
-7858 -515 -534 -667 0
-7858 -515 -532 -669 0
-7858 -515 -530 -671 0
-7858 -515 -528 -673 0
-7858 -515 -527 -675 0
-7858 -513 -662 0
-7858 -513 -540 -663 0
-7858 -513 -538 -665 0
-7858 -513 -536 -667 0
-7858 -513 -534 -669 0
-7858 -513 -532 -671 0
-7858 -513 -530 -673 0
-7858 -513 -528 -675 0
-7858 -513 -527 0
-7858 -512 -663 0
-7858 -512 -540 -665 0
-7858 -512 -538 -667 0
-7858 -512 -536 -669 0
-7858 -512 -534 -671 0
-7858 -512 -532 -673 0
-7858 -512 -530 -675 0
-7858 -512 -528 0
-7858 -512 -527 0
7858 528 675 0
7858 530 673 0
7858 532 671 0
7858 534 669 0
7858 536 667 0
7858 538 665 0
7858 540 663 0
7858 512 527 675 0
7858 512 528 673 0
7858 512 530 671 0
7858 512 532 669 0
7858 512 534 667 0
7858 512 536 665 0
7858 512 538 663 0
7858 512 540 662 0
7858 513 675 0
7858 513 527 673 0
7858 513 528 671 0
7858 513 530 669 0
7858 513 532 667 0
7858 513 534 665 0
7858 513 536 663 0
7858 513 538 662 0
7858 513 540 0
7858 515 673 0
7858 515 527 671 0
7858 515 528 669 0
7858 515 530 667 0
7858 515 532 665 0
7858 515 534 663 0
7858 515 536 662 0
7858 515 538 0
7858 515 540 0
7858 517 671 0
7858 517 527 669 0
7858 517 528 667 0
7858 517 530 665 0
7858 517 532 663 0
7858 517 534 662 0
7858 517 536 0
7858 517 538 0
7858 517 540 0
7858 519 669 0
7858 519 527 667 0
7858 519 528 665 0
7858 519 530 663 0
7858 519 532 662 0
7858 519 534 0
7858 519 536 0
7858 519 538 0
7858 519 540 0
7858 521 667 0
7858 521 527 665 0
7858 521 528 663 0
7858 521 530 662 0
7858 521 532 0
7858 521 534 0
7858 521 536 0
7858 521 538 0
7858 521 540 0
7858 523 665 0
7858 523 527 663 0
7858 523 528 662 0
7858 523 530 0
7858 523 532 0
7858 523 534 0
7858 523 536 0
7858 523 538 0
7858 523 540 0
7858 525 663 0
7858 525 527 662 0
7858 525 528 0
7858 525 530 0
7858 525 532 0
7858 525 534 0
7858 525 536 0
7858 525 538 0
7858 525 540 0
c (((x_00005_00001 + x_00006_00001 + x_00006_00002)<=10)=tv=SATLiteral(7859))
-7859 705 0
-7859 677 703 0
-7859 678 701 0
-7859 680 699 0
-7859 682 697 0
-7859 684 695 0
-7859 686 693 0
-7859 688 692 0
-7859 690 0
-7859 542 703 0
-7859 542 677 701 0
-7859 542 678 699 0
-7859 542 680 697 0
-7859 542 682 695 0
-7859 542 684 693 0
-7859 542 686 692 0
-7859 542 688 0
-7859 542 690 0
-7859 543 701 0
-7859 543 677 699 0
-7859 543 678 697 0
-7859 543 680 695 0
-7859 543 682 693 0
-7859 543 684 692 0
-7859 543 686 0
-7859 543 688 0
-7859 543 690 0
-7859 545 699 0
-7859 545 677 697 0
-7859 545 678 695 0
-7859 545 680 693 0
-7859 545 682 692 0
-7859 545 684 0
-7859 545 686 0
-7859 545 688 0
-7859 545 690 0
-7859 547 697 0
-7859 547 677 695 0
-7859 547 678 693 0
-7859 547 680 692 0
-7859 547 682 0
-7859 547 684 0
-7859 547 686 0
-7859 547 688 0
-7859 547 690 0
-7859 549 695 0
-7859 549 677 693 0
-7859 549 678 692 0
-7859 549 680 0
-7859 549 682 0
-7859 549 684 0
-7859 549 686 0
-7859 549 688 0
-7859 549 690 0
-7859 551 693 0
-7859 551 677 692 0
-7859 551 678 0
-7859 551 680 0
-7859 551 682 0
-7859 551 684 0
-7859 551 686 0
-7859 551 688 0
-7859 551 690 0
-7859 553 692 0
-7859 553 677 0
-7859 553 678 0
-7859 553 680 0
-7859 553 682 0
-7859 553 684 0
-7859 553 686 0
-7859 553 688 0
-7859 553 690 0
-7859 555 0
-7859 555 677 0
-7859 555 678 0
-7859 555 680 0
-7859 555 682 0
-7859 555 684 0
-7859 555 686 0
-7859 555 688 0
-7859 555 690 0
7859 -555 -677 -692 0
7859 -553 -678 -692 0
7859 -553 -677 -693 0
7859 -551 -680 -692 0
7859 -551 -678 -693 0
7859 -551 -677 -695 0
7859 -549 -682 -692 0
7859 -549 -680 -693 0
7859 -549 -678 -695 0
7859 -549 -677 -697 0
7859 -547 -684 -692 0
7859 -547 -682 -693 0
7859 -547 -680 -695 0
7859 -547 -678 -697 0
7859 -547 -677 -699 0
7859 -545 -686 -692 0
7859 -545 -684 -693 0
7859 -545 -682 -695 0
7859 -545 -680 -697 0
7859 -545 -678 -699 0
7859 -545 -677 -701 0
7859 -543 -688 -692 0
7859 -543 -686 -693 0
7859 -543 -684 -695 0
7859 -543 -682 -697 0
7859 -543 -680 -699 0
7859 -543 -678 -701 0
7859 -543 -677 -703 0
7859 -542 -690 -692 0
7859 -542 -688 -693 0
7859 -542 -686 -695 0
7859 -542 -684 -697 0
7859 -542 -682 -699 0
7859 -542 -680 -701 0
7859 -542 -678 -703 0
7859 -542 -677 -705 0
c ((10<=(x_00005_00001 + x_00006_00001 + x_00006_00002))=tv=SATLiteral(7860))
-7860 -553 -677 -692 0
-7860 -551 -678 -692 0
-7860 -551 -677 -693 0
-7860 -549 -680 -692 0
-7860 -549 -678 -693 0
-7860 -549 -677 -695 0
-7860 -547 -682 -692 0
-7860 -547 -680 -693 0
-7860 -547 -678 -695 0
-7860 -547 -677 -697 0
-7860 -545 -684 -692 0
-7860 -545 -682 -693 0
-7860 -545 -680 -695 0
-7860 -545 -678 -697 0
-7860 -545 -677 -699 0
-7860 -543 -686 -692 0
-7860 -543 -684 -693 0
-7860 -543 -682 -695 0
-7860 -543 -680 -697 0
-7860 -543 -678 -699 0
-7860 -543 -677 -701 0
-7860 -542 -688 -692 0
-7860 -542 -686 -693 0
-7860 -542 -684 -695 0
-7860 -542 -682 -697 0
-7860 -542 -680 -699 0
-7860 -542 -678 -701 0
-7860 -542 -677 -703 0
7860 703 0
7860 677 701 0
7860 678 699 0
7860 680 697 0
7860 682 695 0
7860 684 693 0
7860 686 692 0
7860 688 0
7860 690 0
7860 542 701 0
7860 542 677 699 0
7860 542 678 697 0
7860 542 680 695 0
7860 542 682 693 0
7860 542 684 692 0
7860 542 686 0
7860 542 688 0
7860 542 690 0
7860 543 699 0
7860 543 677 697 0
7860 543 678 695 0
7860 543 680 693 0
7860 543 682 692 0
7860 543 684 0
7860 543 686 0
7860 543 688 0
7860 543 690 0
7860 545 697 0
7860 545 677 695 0
7860 545 678 693 0
7860 545 680 692 0
7860 545 682 0
7860 545 684 0
7860 545 686 0
7860 545 688 0
7860 545 690 0
7860 547 695 0
7860 547 677 693 0
7860 547 678 692 0
7860 547 680 0
7860 547 682 0
7860 547 684 0
7860 547 686 0
7860 547 688 0
7860 547 690 0
7860 549 693 0
7860 549 677 692 0
7860 549 678 0
7860 549 680 0
7860 549 682 0
7860 549 684 0
7860 549 686 0
7860 549 688 0
7860 549 690 0
7860 551 692 0
7860 551 677 0
7860 551 678 0
7860 551 680 0
7860 551 682 0
7860 551 684 0
7860 551 686 0
7860 551 688 0
7860 551 690 0
7860 553 0
7860 553 677 0
7860 553 678 0
7860 553 680 0
7860 553 682 0
7860 553 684 0
7860 553 686 0
7860 553 688 0
7860 553 690 0
7860 555 0
7860 555 677 0
7860 555 678 0
7860 555 680 0
7860 555 682 0
7860 555 684 0
7860 555 686 0
7860 555 688 0
7860 555 690 0
c (((x_00005_00002 + x_00005_00003 + x_00006_00003)<=15)=tv=SATLiteral(7861))
-7861 579 720 0
-7861 581 718 0
-7861 583 716 0
-7861 585 714 0
-7861 557 577 720 0
-7861 557 579 718 0
-7861 557 581 716 0
-7861 557 583 714 0
-7861 557 585 712 0
-7861 558 575 720 0
-7861 558 577 718 0
-7861 558 579 716 0
-7861 558 581 714 0
-7861 558 583 712 0
-7861 558 585 710 0
-7861 560 573 720 0
-7861 560 575 718 0
-7861 560 577 716 0
-7861 560 579 714 0
-7861 560 581 712 0
-7861 560 583 710 0
-7861 560 585 708 0
-7861 562 572 720 0
-7861 562 573 718 0
-7861 562 575 716 0
-7861 562 577 714 0
-7861 562 579 712 0
-7861 562 581 710 0
-7861 562 583 708 0
-7861 562 585 707 0
-7861 564 720 0
-7861 564 572 718 0
-7861 564 573 716 0
-7861 564 575 714 0
-7861 564 577 712 0
-7861 564 579 710 0
-7861 564 581 708 0
-7861 564 583 707 0
-7861 564 585 0
-7861 566 718 0
-7861 566 572 716 0
-7861 566 573 714 0
-7861 566 575 712 0
-7861 566 577 710 0
-7861 566 579 708 0
-7861 566 581 707 0
-7861 566 583 0
-7861 566 585 0
-7861 568 716 0
-7861 568 572 714 0
-7861 568 573 712 0
-7861 568 575 710 0
-7861 568 577 708 0
-7861 568 579 707 0
-7861 568 581 0
-7861 568 583 0
-7861 568 585 0
-7861 570 714 0
-7861 570 572 712 0
-7861 570 573 710 0
-7861 570 575 708 0
-7861 570 577 707 0
-7861 570 579 0
-7861 570 581 0
-7861 570 583 0
-7861 570 585 0
7861 -579 -707 0
7861 -577 -708 0
7861 -575 -710 0
7861 -573 -712 0
7861 -572 -714 0
7861 -570 -581 -707 0
7861 -570 -579 -708 0
7861 -570 -577 -710 0
7861 -570 -575 -712 0
7861 -570 -573 -714 0
7861 -570 -572 -716 0
7861 -568 -583 -707 0
7861 -568 -581 -708 0
7861 -568 -579 -710 0
7861 -568 -577 -712 0
7861 -568 -575 -714 0
7861 -568 -573 -716 0
7861 -568 -572 -718 0
7861 -566 -585 -707 0
7861 -566 -583 -708 0
7861 -566 -581 -710 0
7861 -566 -579 -712 0
7861 -566 -577 -714 0
7861 -566 -575 -716 0
7861 -566 -573 -718 0
7861 -566 -572 -720 0
7861 -564 -707 0
7861 -564 -585 -708 0
7861 -564 -583 -710 0
7861 -564 -581 -712 0
7861 -564 -579 -714 0
7861 -564 -577 -716 0
7861 -564 -575 -718 0
7861 -564 -573 -720 0
7861 -564 -572 0
7861 -562 -708 0
7861 -562 -585 -710 0
7861 -562 -583 -712 0
7861 -562 -581 -714 0
7861 -562 -579 -716 0
7861 -562 -577 -718 0
7861 -562 -575 -720 0
7861 -562 -573 0
7861 -562 -572 0
7861 -560 -710 0
7861 -560 -585 -712 0
7861 -560 -583 -714 0
7861 -560 -581 -716 0
7861 -560 -579 -718 0
7861 -560 -577 -720 0
7861 -560 -575 0
7861 -560 -573 0
7861 -560 -572 0
7861 -558 -712 0
7861 -558 -585 -714 0
7861 -558 -583 -716 0
7861 -558 -581 -718 0
7861 -558 -579 -720 0
7861 -558 -577 0
7861 -558 -575 0
7861 -558 -573 0
7861 -558 -572 0
7861 -557 -714 0
7861 -557 -585 -716 0
7861 -557 -583 -718 0
7861 -557 -581 -720 0
7861 -557 -579 0
7861 -557 -577 0
7861 -557 -575 0
7861 -557 -573 0
7861 -557 -572 0
c ((15<=(x_00005_00002 + x_00005_00003 + x_00006_00003))=tv=SATLiteral(7862))
-7862 -577 -707 0
-7862 -575 -708 0
-7862 -573 -710 0
-7862 -572 -712 0
-7862 -570 -579 -707 0
-7862 -570 -577 -708 0
-7862 -570 -575 -710 0
-7862 -570 -573 -712 0
-7862 -570 -572 -714 0
-7862 -568 -581 -707 0
-7862 -568 -579 -708 0
-7862 -568 -577 -710 0
-7862 -568 -575 -712 0
-7862 -568 -573 -714 0
-7862 -568 -572 -716 0
-7862 -566 -583 -707 0
-7862 -566 -581 -708 0
-7862 -566 -579 -710 0
-7862 -566 -577 -712 0
-7862 -566 -575 -714 0
-7862 -566 -573 -716 0
-7862 -566 -572 -718 0
-7862 -564 -585 -707 0
-7862 -564 -583 -708 0
-7862 -564 -581 -710 0
-7862 -564 -579 -712 0
-7862 -564 -577 -714 0
-7862 -564 -575 -716 0
-7862 -564 -573 -718 0
-7862 -564 -572 -720 0
-7862 -562 -707 0
-7862 -562 -585 -708 0
-7862 -562 -583 -710 0
-7862 -562 -581 -712 0
-7862 -562 -579 -714 0
-7862 -562 -577 -716 0
-7862 -562 -575 -718 0
-7862 -562 -573 -720 0
-7862 -562 -572 0
-7862 -560 -708 0
-7862 -560 -585 -710 0
-7862 -560 -583 -712 0
-7862 -560 -581 -714 0
-7862 -560 -579 -716 0
-7862 -560 -577 -718 0
-7862 -560 -575 -720 0
-7862 -560 -573 0
-7862 -560 -572 0
-7862 -558 -710 0
-7862 -558 -585 -712 0
-7862 -558 -583 -714 0
-7862 -558 -581 -716 0
-7862 -558 -579 -718 0
-7862 -558 -577 -720 0
-7862 -558 -575 0
-7862 -558 -573 0
-7862 -558 -572 0
-7862 -557 -712 0
-7862 -557 -585 -714 0
-7862 -557 -583 -716 0
-7862 -557 -581 -718 0
-7862 -557 -579 -720 0
-7862 -557 -577 0
-7862 -557 -575 0
-7862 -557 -573 0
-7862 -557 -572 0
7862 577 720 0
7862 579 718 0
7862 581 716 0
7862 583 714 0
7862 585 712 0
7862 557 575 720 0
7862 557 577 718 0
7862 557 579 716 0
7862 557 581 714 0
7862 557 583 712 0
7862 557 585 710 0
7862 558 573 720 0
7862 558 575 718 0
7862 558 577 716 0
7862 558 579 714 0
7862 558 581 712 0
7862 558 583 710 0
7862 558 585 708 0
7862 560 572 720 0
7862 560 573 718 0
7862 560 575 716 0
7862 560 577 714 0
7862 560 579 712 0
7862 560 581 710 0
7862 560 583 708 0
7862 560 585 707 0
7862 562 720 0
7862 562 572 718 0
7862 562 573 716 0
7862 562 575 714 0
7862 562 577 712 0
7862 562 579 710 0
7862 562 581 708 0
7862 562 583 707 0
7862 562 585 0
7862 564 718 0
7862 564 572 716 0
7862 564 573 714 0
7862 564 575 712 0
7862 564 577 710 0
7862 564 579 708 0
7862 564 581 707 0
7862 564 583 0
7862 564 585 0
7862 566 716 0
7862 566 572 714 0
7862 566 573 712 0
7862 566 575 710 0
7862 566 577 708 0
7862 566 579 707 0
7862 566 581 0
7862 566 583 0
7862 566 585 0
7862 568 714 0
7862 568 572 712 0
7862 568 573 710 0
7862 568 575 708 0
7862 568 577 707 0
7862 568 579 0
7862 568 581 0
7862 568 583 0
7862 568 585 0
7862 570 712 0
7862 570 572 710 0
7862 570 573 708 0
7862 570 575 707 0
7862 570 577 0
7862 570 579 0
7862 570 581 0
7862 570 583 0
7862 570 585 0
c (((x_00005_00005 + x_00006_00004 + x_00006_00005)<=17)=tv=SATLiteral(7863))
-7863 733 750 0
-7863 735 748 0
-7863 602 731 750 0
-7863 602 733 748 0
-7863 602 735 746 0
-7863 603 729 750 0
-7863 603 731 748 0
-7863 603 733 746 0
-7863 603 735 744 0
-7863 605 727 750 0
-7863 605 729 748 0
-7863 605 731 746 0
-7863 605 733 744 0
-7863 605 735 742 0
-7863 607 725 750 0
-7863 607 727 748 0
-7863 607 729 746 0
-7863 607 731 744 0
-7863 607 733 742 0
-7863 607 735 740 0
-7863 609 723 750 0
-7863 609 725 748 0
-7863 609 727 746 0
-7863 609 729 744 0
-7863 609 731 742 0
-7863 609 733 740 0
-7863 609 735 738 0
-7863 611 722 750 0
-7863 611 723 748 0
-7863 611 725 746 0
-7863 611 727 744 0
-7863 611 729 742 0
-7863 611 731 740 0
-7863 611 733 738 0
-7863 611 735 737 0
-7863 613 750 0
-7863 613 722 748 0
-7863 613 723 746 0
-7863 613 725 744 0
-7863 613 727 742 0
-7863 613 729 740 0
-7863 613 731 738 0
-7863 613 733 737 0
-7863 613 735 0
-7863 615 748 0
-7863 615 722 746 0
-7863 615 723 744 0
-7863 615 725 742 0
-7863 615 727 740 0
-7863 615 729 738 0
-7863 615 731 737 0
-7863 615 733 0
-7863 615 735 0
7863 -733 -737 0
7863 -731 -738 0
7863 -729 -740 0
7863 -727 -742 0
7863 -725 -744 0
7863 -723 -746 0
7863 -722 -748 0
7863 -615 -735 -737 0
7863 -615 -733 -738 0
7863 -615 -731 -740 0
7863 -615 -729 -742 0
7863 -615 -727 -744 0
7863 -615 -725 -746 0
7863 -615 -723 -748 0
7863 -615 -722 -750 0
7863 -613 -737 0
7863 -613 -735 -738 0
7863 -613 -733 -740 0
7863 -613 -731 -742 0
7863 -613 -729 -744 0
7863 -613 -727 -746 0
7863 -613 -725 -748 0
7863 -613 -723 -750 0
7863 -613 -722 0
7863 -611 -738 0
7863 -611 -735 -740 0
7863 -611 -733 -742 0
7863 -611 -731 -744 0
7863 -611 -729 -746 0
7863 -611 -727 -748 0
7863 -611 -725 -750 0
7863 -611 -723 0
7863 -611 -722 0
7863 -609 -740 0
7863 -609 -735 -742 0
7863 -609 -733 -744 0
7863 -609 -731 -746 0
7863 -609 -729 -748 0
7863 -609 -727 -750 0
7863 -609 -725 0
7863 -609 -723 0
7863 -609 -722 0
7863 -607 -742 0
7863 -607 -735 -744 0
7863 -607 -733 -746 0
7863 -607 -731 -748 0
7863 -607 -729 -750 0
7863 -607 -727 0
7863 -607 -725 0
7863 -607 -723 0
7863 -607 -722 0
7863 -605 -744 0
7863 -605 -735 -746 0
7863 -605 -733 -748 0
7863 -605 -731 -750 0
7863 -605 -729 0
7863 -605 -727 0
7863 -605 -725 0
7863 -605 -723 0
7863 -605 -722 0
7863 -603 -746 0
7863 -603 -735 -748 0
7863 -603 -733 -750 0
7863 -603 -731 0
7863 -603 -729 0
7863 -603 -727 0
7863 -603 -725 0
7863 -603 -723 0
7863 -603 -722 0
7863 -602 -748 0
7863 -602 -735 -750 0
7863 -602 -733 0
7863 -602 -731 0
7863 -602 -729 0
7863 -602 -727 0
7863 -602 -725 0
7863 -602 -723 0
7863 -602 -722 0
c ((17<=(x_00005_00005 + x_00006_00004 + x_00006_00005))=tv=SATLiteral(7864))
-7864 -731 -737 0
-7864 -729 -738 0
-7864 -727 -740 0
-7864 -725 -742 0
-7864 -723 -744 0
-7864 -722 -746 0
-7864 -615 -733 -737 0
-7864 -615 -731 -738 0
-7864 -615 -729 -740 0
-7864 -615 -727 -742 0
-7864 -615 -725 -744 0
-7864 -615 -723 -746 0
-7864 -615 -722 -748 0
-7864 -613 -735 -737 0
-7864 -613 -733 -738 0
-7864 -613 -731 -740 0
-7864 -613 -729 -742 0
-7864 -613 -727 -744 0
-7864 -613 -725 -746 0
-7864 -613 -723 -748 0
-7864 -613 -722 -750 0
-7864 -611 -737 0
-7864 -611 -735 -738 0
-7864 -611 -733 -740 0
-7864 -611 -731 -742 0
-7864 -611 -729 -744 0
-7864 -611 -727 -746 0
-7864 -611 -725 -748 0
-7864 -611 -723 -750 0
-7864 -611 -722 0
-7864 -609 -738 0
-7864 -609 -735 -740 0
-7864 -609 -733 -742 0
-7864 -609 -731 -744 0
-7864 -609 -729 -746 0
-7864 -609 -727 -748 0
-7864 -609 -725 -750 0
-7864 -609 -723 0
-7864 -609 -722 0
-7864 -607 -740 0
-7864 -607 -735 -742 0
-7864 -607 -733 -744 0
-7864 -607 -731 -746 0
-7864 -607 -729 -748 0
-7864 -607 -727 -750 0
-7864 -607 -725 0
-7864 -607 -723 0
-7864 -607 -722 0
-7864 -605 -742 0
-7864 -605 -735 -744 0
-7864 -605 -733 -746 0
-7864 -605 -731 -748 0
-7864 -605 -729 -750 0
-7864 -605 -727 0
-7864 -605 -725 0
-7864 -605 -723 0
-7864 -605 -722 0
-7864 -603 -744 0
-7864 -603 -735 -746 0
-7864 -603 -733 -748 0
-7864 -603 -731 -750 0
-7864 -603 -729 0
-7864 -603 -727 0
-7864 -603 -725 0
-7864 -603 -723 0
-7864 -603 -722 0
-7864 -602 -746 0
-7864 -602 -735 -748 0
-7864 -602 -733 -750 0
-7864 -602 -731 0
-7864 -602 -729 0
-7864 -602 -727 0
-7864 -602 -725 0
-7864 -602 -723 0
-7864 -602 -722 0
7864 731 750 0
7864 733 748 0
7864 735 746 0
7864 602 729 750 0
7864 602 731 748 0
7864 602 733 746 0
7864 602 735 744 0
7864 603 727 750 0
7864 603 729 748 0
7864 603 731 746 0
7864 603 733 744 0
7864 603 735 742 0
7864 605 725 750 0
7864 605 727 748 0
7864 605 729 746 0
7864 605 731 744 0
7864 605 733 742 0
7864 605 735 740 0
7864 607 723 750 0
7864 607 725 748 0
7864 607 727 746 0
7864 607 729 744 0
7864 607 731 742 0
7864 607 733 740 0
7864 607 735 738 0
7864 609 722 750 0
7864 609 723 748 0
7864 609 725 746 0
7864 609 727 744 0
7864 609 729 742 0
7864 609 731 740 0
7864 609 733 738 0
7864 609 735 737 0
7864 611 750 0
7864 611 722 748 0
7864 611 723 746 0
7864 611 725 744 0
7864 611 727 742 0
7864 611 729 740 0
7864 611 731 738 0
7864 611 733 737 0
7864 611 735 0
7864 613 748 0
7864 613 722 746 0
7864 613 723 744 0
7864 613 725 742 0
7864 613 727 740 0
7864 613 729 738 0
7864 613 731 737 0
7864 613 733 0
7864 613 735 0
7864 615 746 0
7864 615 722 744 0
7864 615 723 742 0
7864 615 725 740 0
7864 615 727 738 0
7864 615 729 737 0
7864 615 731 0
7864 615 733 0
7864 615 735 0
c (((x_00005_00006 + x_00006_00006 + x_00006_00007)<=18)=tv=SATLiteral(7865))
-7865 765 780 0
-7865 617 763 780 0
-7865 617 765 778 0
-7865 618 761 780 0
-7865 618 763 778 0
-7865 618 765 776 0
-7865 620 759 780 0
-7865 620 761 778 0
-7865 620 763 776 0
-7865 620 765 774 0
-7865 622 757 780 0
-7865 622 759 778 0
-7865 622 761 776 0
-7865 622 763 774 0
-7865 622 765 772 0
-7865 624 755 780 0
-7865 624 757 778 0
-7865 624 759 776 0
-7865 624 761 774 0
-7865 624 763 772 0
-7865 624 765 770 0
-7865 626 753 780 0
-7865 626 755 778 0
-7865 626 757 776 0
-7865 626 759 774 0
-7865 626 761 772 0
-7865 626 763 770 0
-7865 626 765 768 0
-7865 628 752 780 0
-7865 628 753 778 0
-7865 628 755 776 0
-7865 628 757 774 0
-7865 628 759 772 0
-7865 628 761 770 0
-7865 628 763 768 0
-7865 628 765 767 0
-7865 630 780 0
-7865 630 752 778 0
-7865 630 753 776 0
-7865 630 755 774 0
-7865 630 757 772 0
-7865 630 759 770 0
-7865 630 761 768 0
-7865 630 763 767 0
-7865 630 765 0
7865 -765 -767 0
7865 -763 -768 0
7865 -761 -770 0
7865 -759 -772 0
7865 -757 -774 0
7865 -755 -776 0
7865 -753 -778 0
7865 -752 -780 0
7865 -630 -767 0
7865 -630 -765 -768 0
7865 -630 -763 -770 0
7865 -630 -761 -772 0
7865 -630 -759 -774 0
7865 -630 -757 -776 0
7865 -630 -755 -778 0
7865 -630 -753 -780 0
7865 -630 -752 0
7865 -628 -768 0
7865 -628 -765 -770 0
7865 -628 -763 -772 0
7865 -628 -761 -774 0
7865 -628 -759 -776 0
7865 -628 -757 -778 0
7865 -628 -755 -780 0
7865 -628 -753 0
7865 -628 -752 0
7865 -626 -770 0
7865 -626 -765 -772 0
7865 -626 -763 -774 0
7865 -626 -761 -776 0
7865 -626 -759 -778 0
7865 -626 -757 -780 0
7865 -626 -755 0
7865 -626 -753 0
7865 -626 -752 0
7865 -624 -772 0
7865 -624 -765 -774 0
7865 -624 -763 -776 0
7865 -624 -761 -778 0
7865 -624 -759 -780 0
7865 -624 -757 0
7865 -624 -755 0
7865 -624 -753 0
7865 -624 -752 0
7865 -622 -774 0
7865 -622 -765 -776 0
7865 -622 -763 -778 0
7865 -622 -761 -780 0
7865 -622 -759 0
7865 -622 -757 0
7865 -622 -755 0
7865 -622 -753 0
7865 -622 -752 0
7865 -620 -776 0
7865 -620 -765 -778 0
7865 -620 -763 -780 0
7865 -620 -761 0
7865 -620 -759 0
7865 -620 -757 0
7865 -620 -755 0
7865 -620 -753 0
7865 -620 -752 0
7865 -618 -778 0
7865 -618 -765 -780 0
7865 -618 -763 0
7865 -618 -761 0
7865 -618 -759 0
7865 -618 -757 0
7865 -618 -755 0
7865 -618 -753 0
7865 -618 -752 0
7865 -617 -780 0
7865 -617 -765 0
7865 -617 -763 0
7865 -617 -761 0
7865 -617 -759 0
7865 -617 -757 0
7865 -617 -755 0
7865 -617 -753 0
7865 -617 -752 0
c ((18<=(x_00005_00006 + x_00006_00006 + x_00006_00007))=tv=SATLiteral(7866))
-7866 -763 -767 0
-7866 -761 -768 0
-7866 -759 -770 0
-7866 -757 -772 0
-7866 -755 -774 0
-7866 -753 -776 0
-7866 -752 -778 0
-7866 -630 -765 -767 0
-7866 -630 -763 -768 0
-7866 -630 -761 -770 0
-7866 -630 -759 -772 0
-7866 -630 -757 -774 0
-7866 -630 -755 -776 0
-7866 -630 -753 -778 0
-7866 -630 -752 -780 0
-7866 -628 -767 0
-7866 -628 -765 -768 0
-7866 -628 -763 -770 0
-7866 -628 -761 -772 0
-7866 -628 -759 -774 0
-7866 -628 -757 -776 0
-7866 -628 -755 -778 0
-7866 -628 -753 -780 0
-7866 -628 -752 0
-7866 -626 -768 0
-7866 -626 -765 -770 0
-7866 -626 -763 -772 0
-7866 -626 -761 -774 0
-7866 -626 -759 -776 0
-7866 -626 -757 -778 0
-7866 -626 -755 -780 0
-7866 -626 -753 0
-7866 -626 -752 0
-7866 -624 -770 0
-7866 -624 -765 -772 0
-7866 -624 -763 -774 0
-7866 -624 -761 -776 0
-7866 -624 -759 -778 0
-7866 -624 -757 -780 0
-7866 -624 -755 0
-7866 -624 -753 0
-7866 -624 -752 0
-7866 -622 -772 0
-7866 -622 -765 -774 0
-7866 -622 -763 -776 0
-7866 -622 -761 -778 0
-7866 -622 -759 -780 0
-7866 -622 -757 0
-7866 -622 -755 0
-7866 -622 -753 0
-7866 -622 -752 0
-7866 -620 -774 0
-7866 -620 -765 -776 0
-7866 -620 -763 -778 0
-7866 -620 -761 -780 0
-7866 -620 -759 0
-7866 -620 -757 0
-7866 -620 -755 0
-7866 -620 -753 0
-7866 -620 -752 0
-7866 -618 -776 0
-7866 -618 -765 -778 0
-7866 -618 -763 -780 0
-7866 -618 -761 0
-7866 -618 -759 0
-7866 -618 -757 0
-7866 -618 -755 0
-7866 -618 -753 0
-7866 -618 -752 0
-7866 -617 -778 0
-7866 -617 -765 -780 0
-7866 -617 -763 0
-7866 -617 -761 0
-7866 -617 -759 0
-7866 -617 -757 0
-7866 -617 -755 0
-7866 -617 -753 0
-7866 -617 -752 0
7866 763 780 0
7866 765 778 0
7866 617 761 780 0
7866 617 763 778 0
7866 617 765 776 0
7866 618 759 780 0
7866 618 761 778 0
7866 618 763 776 0
7866 618 765 774 0
7866 620 757 780 0
7866 620 759 778 0
7866 620 761 776 0
7866 620 763 774 0
7866 620 765 772 0
7866 622 755 780 0
7866 622 757 778 0
7866 622 759 776 0
7866 622 761 774 0
7866 622 763 772 0
7866 622 765 770 0
7866 624 753 780 0
7866 624 755 778 0
7866 624 757 776 0
7866 624 759 774 0
7866 624 761 772 0
7866 624 763 770 0
7866 624 765 768 0
7866 626 752 780 0
7866 626 753 778 0
7866 626 755 776 0
7866 626 757 774 0
7866 626 759 772 0
7866 626 761 770 0
7866 626 763 768 0
7866 626 765 767 0
7866 628 780 0
7866 628 752 778 0
7866 628 753 776 0
7866 628 755 774 0
7866 628 757 772 0
7866 628 759 770 0
7866 628 761 768 0
7866 628 763 767 0
7866 628 765 0
7866 630 778 0
7866 630 752 776 0
7866 630 753 774 0
7866 630 755 772 0
7866 630 757 770 0
7866 630 759 768 0
7866 630 761 767 0
7866 630 763 0
7866 630 765 0
c (((x_00007_00008 + x_00006_00008)<=7)=tv=SATLiteral(7867))
-7867 791 0
-7867 917 789 0
-7867 918 787 0
-7867 920 785 0
-7867 922 783 0
-7867 924 782 0
-7867 926 0
-7867 928 0
-7867 930 0
7867 -926 -782 0
7867 -924 -783 0
7867 -922 -785 0
7867 -920 -787 0
7867 -918 -789 0
7867 -917 -791 0
c ((7<=(x_00007_00008 + x_00006_00008))=tv=SATLiteral(7868))
-7868 -924 -782 0
-7868 -922 -783 0
-7868 -920 -785 0
-7868 -918 -787 0
-7868 -917 -789 0
7868 789 0
7868 917 787 0
7868 918 785 0
7868 920 783 0
7868 922 782 0
7868 924 0
7868 926 0
7868 928 0
7868 930 0
c (((x_00007_00009 + x_00006_00009)<=12)=tv=SATLiteral(7869))
-7869 935 810 0
-7869 937 808 0
-7869 939 806 0
-7869 941 804 0
-7869 943 802 0
-7869 945 800 0
7869 -800 0
7869 -945 -802 0
7869 -943 -804 0
7869 -941 -806 0
7869 -939 -808 0
7869 -937 -810 0
7869 -935 0
7869 -933 0
7869 -932 0
c ((12<=(x_00007_00009 + x_00006_00009))=tv=SATLiteral(7870))
-7870 -798 0
-7870 -945 -800 0
-7870 -943 -802 0
-7870 -941 -804 0
-7870 -939 -806 0
-7870 -937 -808 0
-7870 -935 -810 0
-7870 -933 0
-7870 -932 0
7870 933 810 0
7870 935 808 0
7870 937 806 0
7870 939 804 0
7870 941 802 0
7870 943 800 0
7870 945 798 0
c (((x_00007_00001 + x_00007_00002 + x_00007_00003)<=14)=tv=SATLiteral(7871))
-7871 832 855 0
-7871 834 853 0
-7871 836 851 0
-7871 838 849 0
-7871 840 847 0
-7871 812 830 855 0
-7871 812 832 853 0
-7871 812 834 851 0
-7871 812 836 849 0
-7871 812 838 847 0
-7871 812 840 845 0
-7871 813 828 855 0
-7871 813 830 853 0
-7871 813 832 851 0
-7871 813 834 849 0
-7871 813 836 847 0
-7871 813 838 845 0
-7871 813 840 843 0
-7871 815 827 855 0
-7871 815 828 853 0
-7871 815 830 851 0
-7871 815 832 849 0
-7871 815 834 847 0
-7871 815 836 845 0
-7871 815 838 843 0
-7871 815 840 842 0
-7871 817 855 0
-7871 817 827 853 0
-7871 817 828 851 0
-7871 817 830 849 0
-7871 817 832 847 0
-7871 817 834 845 0
-7871 817 836 843 0
-7871 817 838 842 0
-7871 817 840 0
-7871 819 853 0
-7871 819 827 851 0
-7871 819 828 849 0
-7871 819 830 847 0
-7871 819 832 845 0
-7871 819 834 843 0
-7871 819 836 842 0
-7871 819 838 0
-7871 819 840 0
-7871 821 851 0
-7871 821 827 849 0
-7871 821 828 847 0
-7871 821 830 845 0
-7871 821 832 843 0
-7871 821 834 842 0
-7871 821 836 0
-7871 821 838 0
-7871 821 840 0
-7871 823 849 0
-7871 823 827 847 0
-7871 823 828 845 0
-7871 823 830 843 0
-7871 823 832 842 0
-7871 823 834 0
-7871 823 836 0
-7871 823 838 0
-7871 823 840 0
-7871 825 847 0
-7871 825 827 845 0
-7871 825 828 843 0
-7871 825 830 842 0
-7871 825 832 0
-7871 825 834 0
-7871 825 836 0
-7871 825 838 0
-7871 825 840 0
7871 -832 -842 0
7871 -830 -843 0
7871 -828 -845 0
7871 -827 -847 0
7871 -825 -834 -842 0
7871 -825 -832 -843 0
7871 -825 -830 -845 0
7871 -825 -828 -847 0
7871 -825 -827 -849 0
7871 -823 -836 -842 0
7871 -823 -834 -843 0
7871 -823 -832 -845 0
7871 -823 -830 -847 0
7871 -823 -828 -849 0
7871 -823 -827 -851 0
7871 -821 -838 -842 0
7871 -821 -836 -843 0
7871 -821 -834 -845 0
7871 -821 -832 -847 0
7871 -821 -830 -849 0
7871 -821 -828 -851 0
7871 -821 -827 -853 0
7871 -819 -840 -842 0
7871 -819 -838 -843 0
7871 -819 -836 -845 0
7871 -819 -834 -847 0
7871 -819 -832 -849 0
7871 -819 -830 -851 0
7871 -819 -828 -853 0
7871 -819 -827 -855 0
7871 -817 -842 0
7871 -817 -840 -843 0
7871 -817 -838 -845 0
7871 -817 -836 -847 0
7871 -817 -834 -849 0
7871 -817 -832 -851 0
7871 -817 -830 -853 0
7871 -817 -828 -855 0
7871 -817 -827 0
7871 -815 -843 0
7871 -815 -840 -845 0
7871 -815 -838 -847 0
7871 -815 -836 -849 0
7871 -815 -834 -851 0
7871 -815 -832 -853 0
7871 -815 -830 -855 0
7871 -815 -828 0
7871 -815 -827 0
7871 -813 -845 0
7871 -813 -840 -847 0
7871 -813 -838 -849 0
7871 -813 -836 -851 0
7871 -813 -834 -853 0
7871 -813 -832 -855 0
7871 -813 -830 0
7871 -813 -828 0
7871 -813 -827 0
7871 -812 -847 0
7871 -812 -840 -849 0
7871 -812 -838 -851 0
7871 -812 -836 -853 0
7871 -812 -834 -855 0
7871 -812 -832 0
7871 -812 -830 0
7871 -812 -828 0
7871 -812 -827 0
c ((14<=(x_00007_00001 + x_00007_00002 + x_00007_00003))=tv=SATLiteral(7872))
-7872 -830 -842 0
-7872 -828 -843 0
-7872 -827 -845 0
-7872 -825 -832 -842 0
-7872 -825 -830 -843 0
-7872 -825 -828 -845 0
-7872 -825 -827 -847 0
-7872 -823 -834 -842 0
-7872 -823 -832 -843 0
-7872 -823 -830 -845 0
-7872 -823 -828 -847 0
-7872 -823 -827 -849 0
-7872 -821 -836 -842 0
-7872 -821 -834 -843 0
-7872 -821 -832 -845 0
-7872 -821 -830 -847 0
-7872 -821 -828 -849 0
-7872 -821 -827 -851 0
-7872 -819 -838 -842 0
-7872 -819 -836 -843 0
-7872 -819 -834 -845 0
-7872 -819 -832 -847 0
-7872 -819 -830 -849 0
-7872 -819 -828 -851 0
-7872 -819 -827 -853 0
-7872 -817 -840 -842 0
-7872 -817 -838 -843 0
-7872 -817 -836 -845 0
-7872 -817 -834 -847 0
-7872 -817 -832 -849 0
-7872 -817 -830 -851 0
-7872 -817 -828 -853 0
-7872 -817 -827 -855 0
-7872 -815 -842 0
-7872 -815 -840 -843 0
-7872 -815 -838 -845 0
-7872 -815 -836 -847 0
-7872 -815 -834 -849 0
-7872 -815 -832 -851 0
-7872 -815 -830 -853 0
-7872 -815 -828 -855 0
-7872 -815 -827 0
-7872 -813 -843 0
-7872 -813 -840 -845 0
-7872 -813 -838 -847 0
-7872 -813 -836 -849 0
-7872 -813 -834 -851 0
-7872 -813 -832 -853 0
-7872 -813 -830 -855 0
-7872 -813 -828 0
-7872 -813 -827 0
-7872 -812 -845 0
-7872 -812 -840 -847 0
-7872 -812 -838 -849 0
-7872 -812 -836 -851 0
-7872 -812 -834 -853 0
-7872 -812 -832 -855 0
-7872 -812 -830 0
-7872 -812 -828 0
-7872 -812 -827 0
7872 830 855 0
7872 832 853 0
7872 834 851 0
7872 836 849 0
7872 838 847 0
7872 840 845 0
7872 812 828 855 0
7872 812 830 853 0
7872 812 832 851 0
7872 812 834 849 0
7872 812 836 847 0
7872 812 838 845 0
7872 812 840 843 0
7872 813 827 855 0
7872 813 828 853 0
7872 813 830 851 0
7872 813 832 849 0
7872 813 834 847 0
7872 813 836 845 0
7872 813 838 843 0
7872 813 840 842 0
7872 815 855 0
7872 815 827 853 0
7872 815 828 851 0
7872 815 830 849 0
7872 815 832 847 0
7872 815 834 845 0
7872 815 836 843 0
7872 815 838 842 0
7872 815 840 0
7872 817 853 0
7872 817 827 851 0
7872 817 828 849 0
7872 817 830 847 0
7872 817 832 845 0
7872 817 834 843 0
7872 817 836 842 0
7872 817 838 0
7872 817 840 0
7872 819 851 0
7872 819 827 849 0
7872 819 828 847 0
7872 819 830 845 0
7872 819 832 843 0
7872 819 834 842 0
7872 819 836 0
7872 819 838 0
7872 819 840 0
7872 821 849 0
7872 821 827 847 0
7872 821 828 845 0
7872 821 830 843 0
7872 821 832 842 0
7872 821 834 0
7872 821 836 0
7872 821 838 0
7872 821 840 0
7872 823 847 0
7872 823 827 845 0
7872 823 828 843 0
7872 823 830 842 0
7872 823 832 0
7872 823 834 0
7872 823 836 0
7872 823 838 0
7872 823 840 0
7872 825 845 0
7872 825 827 843 0
7872 825 828 842 0
7872 825 830 0
7872 825 832 0
7872 825 834 0
7872 825 836 0
7872 825 838 0
7872 825 840 0
c (((x_00007_00004 + x_00007_00005)<=5)=tv=SATLiteral(7873))
-7873 877 0
-7873 857 875 0
-7873 858 873 0
-7873 860 872 0
-7873 862 0
-7873 864 0
-7873 866 0
-7873 868 0
-7873 870 0
7873 -862 -872 0
7873 -860 -873 0
7873 -858 -875 0
7873 -857 -877 0
c ((5<=(x_00007_00004 + x_00007_00005))=tv=SATLiteral(7874))
-7874 -860 -872 0
-7874 -858 -873 0
-7874 -857 -875 0
7874 875 0
7874 857 873 0
7874 858 872 0
7874 860 0
7874 862 0
7874 864 0
7874 866 0
7874 868 0
7874 870 0
c (((x_00007_00006 + x_00008_00006 + x_00009_00006)<=21)=tv=SATLiteral(7875))
-7875 890 1035 1170 0
-7875 892 1033 1170 0
-7875 892 1035 1168 0
-7875 894 1031 1170 0
-7875 894 1033 1168 0
-7875 894 1035 1166 0
-7875 896 1029 1170 0
-7875 896 1031 1168 0
-7875 896 1033 1166 0
-7875 896 1035 1164 0
-7875 898 1027 1170 0
-7875 898 1029 1168 0
-7875 898 1031 1166 0
-7875 898 1033 1164 0
-7875 898 1035 1162 0
-7875 900 1025 1170 0
-7875 900 1027 1168 0
-7875 900 1029 1166 0
-7875 900 1031 1164 0
-7875 900 1033 1162 0
-7875 900 1035 1160 0
7875 -1160 0
7875 -1035 -1162 0
7875 -1033 -1164 0
7875 -1031 -1166 0
7875 -1029 -1168 0
7875 -1027 -1170 0
7875 -1025 0
7875 -1023 0
7875 -1022 0
7875 -900 -1162 0
7875 -900 -1035 -1164 0
7875 -900 -1033 -1166 0
7875 -900 -1031 -1168 0
7875 -900 -1029 -1170 0
7875 -900 -1027 0
7875 -900 -1025 0
7875 -900 -1023 0
7875 -900 -1022 0
7875 -898 -1164 0
7875 -898 -1035 -1166 0
7875 -898 -1033 -1168 0
7875 -898 -1031 -1170 0
7875 -898 -1029 0
7875 -898 -1027 0
7875 -898 -1025 0
7875 -898 -1023 0
7875 -898 -1022 0
7875 -896 -1166 0
7875 -896 -1035 -1168 0
7875 -896 -1033 -1170 0
7875 -896 -1031 0
7875 -896 -1029 0
7875 -896 -1027 0
7875 -896 -1025 0
7875 -896 -1023 0
7875 -896 -1022 0
7875 -894 -1168 0
7875 -894 -1035 -1170 0
7875 -894 -1033 0
7875 -894 -1031 0
7875 -894 -1029 0
7875 -894 -1027 0
7875 -894 -1025 0
7875 -894 -1023 0
7875 -894 -1022 0
7875 -892 -1170 0
7875 -892 -1035 0
7875 -892 -1033 0
7875 -892 -1031 0
7875 -892 -1029 0
7875 -892 -1027 0
7875 -892 -1025 0
7875 -892 -1023 0
7875 -892 -1022 0
7875 -890 0
7875 -890 -1035 0
7875 -890 -1033 0
7875 -890 -1031 0
7875 -890 -1029 0
7875 -890 -1027 0
7875 -890 -1025 0
7875 -890 -1023 0
7875 -890 -1022 0
7875 -888 0
7875 -888 -1035 0
7875 -888 -1033 0
7875 -888 -1031 0
7875 -888 -1029 0
7875 -888 -1027 0
7875 -888 -1025 0
7875 -888 -1023 0
7875 -888 -1022 0
7875 -887 0
7875 -887 -1035 0
7875 -887 -1033 0
7875 -887 -1031 0
7875 -887 -1029 0
7875 -887 -1027 0
7875 -887 -1025 0
7875 -887 -1023 0
7875 -887 -1022 0
c ((21<=(x_00007_00006 + x_00008_00006 + x_00009_00006))=tv=SATLiteral(7876))
-7876 -1158 0
-7876 -1035 -1160 0
-7876 -1033 -1162 0
-7876 -1031 -1164 0
-7876 -1029 -1166 0
-7876 -1027 -1168 0
-7876 -1025 -1170 0
-7876 -1023 0
-7876 -1022 0
-7876 -900 -1160 0
-7876 -900 -1035 -1162 0
-7876 -900 -1033 -1164 0
-7876 -900 -1031 -1166 0
-7876 -900 -1029 -1168 0
-7876 -900 -1027 -1170 0
-7876 -900 -1025 0
-7876 -900 -1023 0
-7876 -900 -1022 0
-7876 -898 -1162 0
-7876 -898 -1035 -1164 0
-7876 -898 -1033 -1166 0
-7876 -898 -1031 -1168 0
-7876 -898 -1029 -1170 0
-7876 -898 -1027 0
-7876 -898 -1025 0
-7876 -898 -1023 0
-7876 -898 -1022 0
-7876 -896 -1164 0
-7876 -896 -1035 -1166 0
-7876 -896 -1033 -1168 0
-7876 -896 -1031 -1170 0
-7876 -896 -1029 0
-7876 -896 -1027 0
-7876 -896 -1025 0
-7876 -896 -1023 0
-7876 -896 -1022 0
-7876 -894 -1166 0
-7876 -894 -1035 -1168 0
-7876 -894 -1033 -1170 0
-7876 -894 -1031 0
-7876 -894 -1029 0
-7876 -894 -1027 0
-7876 -894 -1025 0
-7876 -894 -1023 0
-7876 -894 -1022 0
-7876 -892 -1168 0
-7876 -892 -1035 -1170 0
-7876 -892 -1033 0
-7876 -892 -1031 0
-7876 -892 -1029 0
-7876 -892 -1027 0
-7876 -892 -1025 0
-7876 -892 -1023 0
-7876 -892 -1022 0
-7876 -890 -1170 0
-7876 -890 -1035 0
-7876 -890 -1033 0
-7876 -890 -1031 0
-7876 -890 -1029 0
-7876 -890 -1027 0
-7876 -890 -1025 0
-7876 -890 -1023 0
-7876 -890 -1022 0
-7876 -888 0
-7876 -888 -1035 0
-7876 -888 -1033 0
-7876 -888 -1031 0
-7876 -888 -1029 0
-7876 -888 -1027 0
-7876 -888 -1025 0
-7876 -888 -1023 0
-7876 -888 -1022 0
-7876 -887 0
-7876 -887 -1035 0
-7876 -887 -1033 0
-7876 -887 -1031 0
-7876 -887 -1029 0
-7876 -887 -1027 0
-7876 -887 -1025 0
-7876 -887 -1023 0
-7876 -887 -1022 0
7876 888 1035 1170 0
7876 890 1033 1170 0
7876 890 1035 1168 0
7876 892 1031 1170 0
7876 892 1033 1168 0
7876 892 1035 1166 0
7876 894 1029 1170 0
7876 894 1031 1168 0
7876 894 1033 1166 0
7876 894 1035 1164 0
7876 896 1027 1170 0
7876 896 1029 1168 0
7876 896 1031 1166 0
7876 896 1033 1164 0
7876 896 1035 1162 0
7876 898 1025 1170 0
7876 898 1027 1168 0
7876 898 1029 1166 0
7876 898 1031 1164 0
7876 898 1033 1162 0
7876 898 1035 1160 0
7876 900 1023 1170 0
7876 900 1025 1168 0
7876 900 1027 1166 0
7876 900 1029 1164 0
7876 900 1031 1162 0
7876 900 1033 1160 0
7876 900 1035 1158 0
c (((x_00007_00007 + x_00008_00007 + x_00009_00007)<=12)=tv=SATLiteral(7877))
-7877 1038 1185 0
-7877 1040 1183 0
-7877 1042 1181 0
-7877 1044 1179 0
-7877 1046 1177 0
-7877 1048 1175 0
-7877 1050 1173 0
-7877 902 1037 1185 0
-7877 902 1038 1183 0
-7877 902 1040 1181 0
-7877 902 1042 1179 0
-7877 902 1044 1177 0
-7877 902 1046 1175 0
-7877 902 1048 1173 0
-7877 902 1050 1172 0
-7877 903 1185 0
-7877 903 1037 1183 0
-7877 903 1038 1181 0
-7877 903 1040 1179 0
-7877 903 1042 1177 0
-7877 903 1044 1175 0
-7877 903 1046 1173 0
-7877 903 1048 1172 0
-7877 903 1050 0
-7877 905 1183 0
-7877 905 1037 1181 0
-7877 905 1038 1179 0
-7877 905 1040 1177 0
-7877 905 1042 1175 0
-7877 905 1044 1173 0
-7877 905 1046 1172 0
-7877 905 1048 0
-7877 905 1050 0
-7877 907 1181 0
-7877 907 1037 1179 0
-7877 907 1038 1177 0
-7877 907 1040 1175 0
-7877 907 1042 1173 0
-7877 907 1044 1172 0
-7877 907 1046 0
-7877 907 1048 0
-7877 907 1050 0
-7877 909 1179 0
-7877 909 1037 1177 0
-7877 909 1038 1175 0
-7877 909 1040 1173 0
-7877 909 1042 1172 0
-7877 909 1044 0
-7877 909 1046 0
-7877 909 1048 0
-7877 909 1050 0
-7877 911 1177 0
-7877 911 1037 1175 0
-7877 911 1038 1173 0
-7877 911 1040 1172 0
-7877 911 1042 0
-7877 911 1044 0
-7877 911 1046 0
-7877 911 1048 0
-7877 911 1050 0
-7877 913 1175 0
-7877 913 1037 1173 0
-7877 913 1038 1172 0
-7877 913 1040 0
-7877 913 1042 0
-7877 913 1044 0
-7877 913 1046 0
-7877 913 1048 0
-7877 913 1050 0
-7877 915 1173 0
-7877 915 1037 1172 0
-7877 915 1038 0
-7877 915 1040 0
-7877 915 1042 0
-7877 915 1044 0
-7877 915 1046 0
-7877 915 1048 0
-7877 915 1050 0
7877 -1038 -1172 0
7877 -1037 -1173 0
7877 -915 -1040 -1172 0
7877 -915 -1038 -1173 0
7877 -915 -1037 -1175 0
7877 -913 -1042 -1172 0
7877 -913 -1040 -1173 0
7877 -913 -1038 -1175 0
7877 -913 -1037 -1177 0
7877 -911 -1044 -1172 0
7877 -911 -1042 -1173 0
7877 -911 -1040 -1175 0
7877 -911 -1038 -1177 0
7877 -911 -1037 -1179 0
7877 -909 -1046 -1172 0
7877 -909 -1044 -1173 0
7877 -909 -1042 -1175 0
7877 -909 -1040 -1177 0
7877 -909 -1038 -1179 0
7877 -909 -1037 -1181 0
7877 -907 -1048 -1172 0
7877 -907 -1046 -1173 0
7877 -907 -1044 -1175 0
7877 -907 -1042 -1177 0
7877 -907 -1040 -1179 0
7877 -907 -1038 -1181 0
7877 -907 -1037 -1183 0
7877 -905 -1050 -1172 0
7877 -905 -1048 -1173 0
7877 -905 -1046 -1175 0
7877 -905 -1044 -1177 0
7877 -905 -1042 -1179 0
7877 -905 -1040 -1181 0
7877 -905 -1038 -1183 0
7877 -905 -1037 -1185 0
7877 -903 -1172 0
7877 -903 -1050 -1173 0
7877 -903 -1048 -1175 0
7877 -903 -1046 -1177 0
7877 -903 -1044 -1179 0
7877 -903 -1042 -1181 0
7877 -903 -1040 -1183 0
7877 -903 -1038 -1185 0
7877 -903 -1037 0
7877 -902 -1173 0
7877 -902 -1050 -1175 0
7877 -902 -1048 -1177 0
7877 -902 -1046 -1179 0
7877 -902 -1044 -1181 0
7877 -902 -1042 -1183 0
7877 -902 -1040 -1185 0
7877 -902 -1038 0
7877 -902 -1037 0
c ((12<=(x_00007_00007 + x_00008_00007 + x_00009_00007))=tv=SATLiteral(7878))
-7878 -1037 -1172 0
-7878 -915 -1038 -1172 0
-7878 -915 -1037 -1173 0
-7878 -913 -1040 -1172 0
-7878 -913 -1038 -1173 0
-7878 -913 -1037 -1175 0
-7878 -911 -1042 -1172 0
-7878 -911 -1040 -1173 0
-7878 -911 -1038 -1175 0
-7878 -911 -1037 -1177 0
-7878 -909 -1044 -1172 0
-7878 -909 -1042 -1173 0
-7878 -909 -1040 -1175 0
-7878 -909 -1038 -1177 0
-7878 -909 -1037 -1179 0
-7878 -907 -1046 -1172 0
-7878 -907 -1044 -1173 0
-7878 -907 -1042 -1175 0
-7878 -907 -1040 -1177 0
-7878 -907 -1038 -1179 0
-7878 -907 -1037 -1181 0
-7878 -905 -1048 -1172 0
-7878 -905 -1046 -1173 0
-7878 -905 -1044 -1175 0
-7878 -905 -1042 -1177 0
-7878 -905 -1040 -1179 0
-7878 -905 -1038 -1181 0
-7878 -905 -1037 -1183 0
-7878 -903 -1050 -1172 0
-7878 -903 -1048 -1173 0
-7878 -903 -1046 -1175 0
-7878 -903 -1044 -1177 0
-7878 -903 -1042 -1179 0
-7878 -903 -1040 -1181 0
-7878 -903 -1038 -1183 0
-7878 -903 -1037 -1185 0
-7878 -902 -1172 0
-7878 -902 -1050 -1173 0
-7878 -902 -1048 -1175 0
-7878 -902 -1046 -1177 0
-7878 -902 -1044 -1179 0
-7878 -902 -1042 -1181 0
-7878 -902 -1040 -1183 0
-7878 -902 -1038 -1185 0
-7878 -902 -1037 0
7878 1037 1185 0
7878 1038 1183 0
7878 1040 1181 0
7878 1042 1179 0
7878 1044 1177 0
7878 1046 1175 0
7878 1048 1173 0
7878 1050 1172 0
7878 902 1185 0
7878 902 1037 1183 0
7878 902 1038 1181 0
7878 902 1040 1179 0
7878 902 1042 1177 0
7878 902 1044 1175 0
7878 902 1046 1173 0
7878 902 1048 1172 0
7878 902 1050 0
7878 903 1183 0
7878 903 1037 1181 0
7878 903 1038 1179 0
7878 903 1040 1177 0
7878 903 1042 1175 0
7878 903 1044 1173 0
7878 903 1046 1172 0
7878 903 1048 0
7878 903 1050 0
7878 905 1181 0
7878 905 1037 1179 0
7878 905 1038 1177 0
7878 905 1040 1175 0
7878 905 1042 1173 0
7878 905 1044 1172 0
7878 905 1046 0
7878 905 1048 0
7878 905 1050 0
7878 907 1179 0
7878 907 1037 1177 0
7878 907 1038 1175 0
7878 907 1040 1173 0
7878 907 1042 1172 0
7878 907 1044 0
7878 907 1046 0
7878 907 1048 0
7878 907 1050 0
7878 909 1177 0
7878 909 1037 1175 0
7878 909 1038 1173 0
7878 909 1040 1172 0
7878 909 1042 0
7878 909 1044 0
7878 909 1046 0
7878 909 1048 0
7878 909 1050 0
7878 911 1175 0
7878 911 1037 1173 0
7878 911 1038 1172 0
7878 911 1040 0
7878 911 1042 0
7878 911 1044 0
7878 911 1046 0
7878 911 1048 0
7878 911 1050 0
7878 913 1173 0
7878 913 1037 1172 0
7878 913 1038 0
7878 913 1040 0
7878 913 1042 0
7878 913 1044 0
7878 913 1046 0
7878 913 1048 0
7878 913 1050 0
7878 915 1172 0
7878 915 1037 0
7878 915 1038 0
7878 915 1040 0
7878 915 1042 0
7878 915 1044 0
7878 915 1046 0
7878 915 1048 0
7878 915 1050 0
c (((x_00008_00001 + x_00008_00002 + x_00009_00001)<=13)=tv=SATLiteral(7879))
-7879 965 1095 0
-7879 967 1093 0
-7879 969 1091 0
-7879 971 1089 0
-7879 973 1087 0
-7879 975 1085 0
-7879 947 963 1095 0
-7879 947 965 1093 0
-7879 947 967 1091 0
-7879 947 969 1089 0
-7879 947 971 1087 0
-7879 947 973 1085 0
-7879 947 975 1083 0
-7879 948 962 1095 0
-7879 948 963 1093 0
-7879 948 965 1091 0
-7879 948 967 1089 0
-7879 948 969 1087 0
-7879 948 971 1085 0
-7879 948 973 1083 0
-7879 948 975 1082 0
-7879 950 1095 0
-7879 950 962 1093 0
-7879 950 963 1091 0
-7879 950 965 1089 0
-7879 950 967 1087 0
-7879 950 969 1085 0
-7879 950 971 1083 0
-7879 950 973 1082 0
-7879 950 975 0
-7879 952 1093 0
-7879 952 962 1091 0
-7879 952 963 1089 0
-7879 952 965 1087 0
-7879 952 967 1085 0
-7879 952 969 1083 0
-7879 952 971 1082 0
-7879 952 973 0
-7879 952 975 0
-7879 954 1091 0
-7879 954 962 1089 0
-7879 954 963 1087 0
-7879 954 965 1085 0
-7879 954 967 1083 0
-7879 954 969 1082 0
-7879 954 971 0
-7879 954 973 0
-7879 954 975 0
-7879 956 1089 0
-7879 956 962 1087 0
-7879 956 963 1085 0
-7879 956 965 1083 0
-7879 956 967 1082 0
-7879 956 969 0
-7879 956 971 0
-7879 956 973 0
-7879 956 975 0
-7879 958 1087 0
-7879 958 962 1085 0
-7879 958 963 1083 0
-7879 958 965 1082 0
-7879 958 967 0
-7879 958 969 0
-7879 958 971 0
-7879 958 973 0
-7879 958 975 0
-7879 960 1085 0
-7879 960 962 1083 0
-7879 960 963 1082 0
-7879 960 965 0
-7879 960 967 0
-7879 960 969 0
-7879 960 971 0
-7879 960 973 0
-7879 960 975 0
7879 -965 -1082 0
7879 -963 -1083 0
7879 -962 -1085 0
7879 -960 -967 -1082 0
7879 -960 -965 -1083 0
7879 -960 -963 -1085 0
7879 -960 -962 -1087 0
7879 -958 -969 -1082 0
7879 -958 -967 -1083 0
7879 -958 -965 -1085 0
7879 -958 -963 -1087 0
7879 -958 -962 -1089 0
7879 -956 -971 -1082 0
7879 -956 -969 -1083 0
7879 -956 -967 -1085 0
7879 -956 -965 -1087 0
7879 -956 -963 -1089 0
7879 -956 -962 -1091 0
7879 -954 -973 -1082 0
7879 -954 -971 -1083 0
7879 -954 -969 -1085 0
7879 -954 -967 -1087 0
7879 -954 -965 -1089 0
7879 -954 -963 -1091 0
7879 -954 -962 -1093 0
7879 -952 -975 -1082 0
7879 -952 -973 -1083 0
7879 -952 -971 -1085 0
7879 -952 -969 -1087 0
7879 -952 -967 -1089 0
7879 -952 -965 -1091 0
7879 -952 -963 -1093 0
7879 -952 -962 -1095 0
7879 -950 -1082 0
7879 -950 -975 -1083 0
7879 -950 -973 -1085 0
7879 -950 -971 -1087 0
7879 -950 -969 -1089 0
7879 -950 -967 -1091 0
7879 -950 -965 -1093 0
7879 -950 -963 -1095 0
7879 -950 -962 0
7879 -948 -1083 0
7879 -948 -975 -1085 0
7879 -948 -973 -1087 0
7879 -948 -971 -1089 0
7879 -948 -969 -1091 0
7879 -948 -967 -1093 0
7879 -948 -965 -1095 0
7879 -948 -963 0
7879 -948 -962 0
7879 -947 -1085 0
7879 -947 -975 -1087 0
7879 -947 -973 -1089 0
7879 -947 -971 -1091 0
7879 -947 -969 -1093 0
7879 -947 -967 -1095 0
7879 -947 -965 0
7879 -947 -963 0
7879 -947 -962 0
c ((13<=(x_00008_00001 + x_00008_00002 + x_00009_00001))=tv=SATLiteral(7880))
-7880 -963 -1082 0
-7880 -962 -1083 0
-7880 -960 -965 -1082 0
-7880 -960 -963 -1083 0
-7880 -960 -962 -1085 0
-7880 -958 -967 -1082 0
-7880 -958 -965 -1083 0
-7880 -958 -963 -1085 0
-7880 -958 -962 -1087 0
-7880 -956 -969 -1082 0
-7880 -956 -967 -1083 0
-7880 -956 -965 -1085 0
-7880 -956 -963 -1087 0
-7880 -956 -962 -1089 0
-7880 -954 -971 -1082 0
-7880 -954 -969 -1083 0
-7880 -954 -967 -1085 0
-7880 -954 -965 -1087 0
-7880 -954 -963 -1089 0
-7880 -954 -962 -1091 0
-7880 -952 -973 -1082 0
-7880 -952 -971 -1083 0
-7880 -952 -969 -1085 0
-7880 -952 -967 -1087 0
-7880 -952 -965 -1089 0
-7880 -952 -963 -1091 0
-7880 -952 -962 -1093 0
-7880 -950 -975 -1082 0
-7880 -950 -973 -1083 0
-7880 -950 -971 -1085 0
-7880 -950 -969 -1087 0
-7880 -950 -967 -1089 0
-7880 -950 -965 -1091 0
-7880 -950 -963 -1093 0
-7880 -950 -962 -1095 0
-7880 -948 -1082 0
-7880 -948 -975 -1083 0
-7880 -948 -973 -1085 0
-7880 -948 -971 -1087 0
-7880 -948 -969 -1089 0
-7880 -948 -967 -1091 0
-7880 -948 -965 -1093 0
-7880 -948 -963 -1095 0
-7880 -948 -962 0
-7880 -947 -1083 0
-7880 -947 -975 -1085 0
-7880 -947 -973 -1087 0
-7880 -947 -971 -1089 0
-7880 -947 -969 -1091 0
-7880 -947 -967 -1093 0
-7880 -947 -965 -1095 0
-7880 -947 -963 0
-7880 -947 -962 0
7880 963 1095 0
7880 965 1093 0
7880 967 1091 0
7880 969 1089 0
7880 971 1087 0
7880 973 1085 0
7880 975 1083 0
7880 947 962 1095 0
7880 947 963 1093 0
7880 947 965 1091 0
7880 947 967 1089 0
7880 947 969 1087 0
7880 947 971 1085 0
7880 947 973 1083 0
7880 947 975 1082 0
7880 948 1095 0
7880 948 962 1093 0
7880 948 963 1091 0
7880 948 965 1089 0
7880 948 967 1087 0
7880 948 969 1085 0
7880 948 971 1083 0
7880 948 973 1082 0
7880 948 975 0
7880 950 1093 0
7880 950 962 1091 0
7880 950 963 1089 0
7880 950 965 1087 0
7880 950 967 1085 0
7880 950 969 1083 0
7880 950 971 1082 0
7880 950 973 0
7880 950 975 0
7880 952 1091 0
7880 952 962 1089 0
7880 952 963 1087 0
7880 952 965 1085 0
7880 952 967 1083 0
7880 952 969 1082 0
7880 952 971 0
7880 952 973 0
7880 952 975 0
7880 954 1089 0
7880 954 962 1087 0
7880 954 963 1085 0
7880 954 965 1083 0
7880 954 967 1082 0
7880 954 969 0
7880 954 971 0
7880 954 973 0
7880 954 975 0
7880 956 1087 0
7880 956 962 1085 0
7880 956 963 1083 0
7880 956 965 1082 0
7880 956 967 0
7880 956 969 0
7880 956 971 0
7880 956 973 0
7880 956 975 0
7880 958 1085 0
7880 958 962 1083 0
7880 958 963 1082 0
7880 958 965 0
7880 958 967 0
7880 958 969 0
7880 958 971 0
7880 958 973 0
7880 958 975 0
7880 960 1083 0
7880 960 962 1082 0
7880 960 963 0
7880 960 965 0
7880 960 967 0
7880 960 969 0
7880 960 971 0
7880 960 973 0
7880 960 975 0
c (((x_00008_00003 + x_00008_00004 + x_00008_00005)<=7)=tv=SATLiteral(7881))
-7881 1014 0
-7881 992 1012 0
-7881 993 1010 0
-7881 995 1008 0
-7881 997 1007 0
-7881 999 0
-7881 1001 0
-7881 1003 0
-7881 1005 0
-7881 977 1012 0
-7881 977 992 1010 0
-7881 977 993 1008 0
-7881 977 995 1007 0
-7881 977 997 0
-7881 977 999 0
-7881 977 1001 0
-7881 977 1003 0
-7881 977 1005 0
-7881 978 1010 0
-7881 978 992 1008 0
-7881 978 993 1007 0
-7881 978 995 0
-7881 978 997 0
-7881 978 999 0
-7881 978 1001 0
-7881 978 1003 0
-7881 978 1005 0
-7881 980 1008 0
-7881 980 992 1007 0
-7881 980 993 0
-7881 980 995 0
-7881 980 997 0
-7881 980 999 0
-7881 980 1001 0
-7881 980 1003 0
-7881 980 1005 0
-7881 982 1007 0
-7881 982 992 0
-7881 982 993 0
-7881 982 995 0
-7881 982 997 0
-7881 982 999 0
-7881 982 1001 0
-7881 982 1003 0
-7881 982 1005 0
-7881 984 0
-7881 984 992 0
-7881 984 993 0
-7881 984 995 0
-7881 984 997 0
-7881 984 999 0
-7881 984 1001 0
-7881 984 1003 0
-7881 984 1005 0
-7881 986 0
-7881 986 992 0
-7881 986 993 0
-7881 986 995 0
-7881 986 997 0
-7881 986 999 0
-7881 986 1001 0
-7881 986 1003 0
-7881 986 1005 0
-7881 988 0
-7881 988 992 0
-7881 988 993 0
-7881 988 995 0
-7881 988 997 0
-7881 988 999 0
-7881 988 1001 0
-7881 988 1003 0
-7881 988 1005 0
-7881 990 0
-7881 990 992 0
-7881 990 993 0
-7881 990 995 0
-7881 990 997 0
-7881 990 999 0
-7881 990 1001 0
-7881 990 1003 0
-7881 990 1005 0
7881 -984 -992 -1007 0
7881 -982 -993 -1007 0
7881 -982 -992 -1008 0
7881 -980 -995 -1007 0
7881 -980 -993 -1008 0
7881 -980 -992 -1010 0
7881 -978 -997 -1007 0
7881 -978 -995 -1008 0
7881 -978 -993 -1010 0
7881 -978 -992 -1012 0
7881 -977 -999 -1007 0
7881 -977 -997 -1008 0
7881 -977 -995 -1010 0
7881 -977 -993 -1012 0
7881 -977 -992 -1014 0
c ((7<=(x_00008_00003 + x_00008_00004 + x_00008_00005))=tv=SATLiteral(7882))
-7882 -982 -992 -1007 0
-7882 -980 -993 -1007 0
-7882 -980 -992 -1008 0
-7882 -978 -995 -1007 0
-7882 -978 -993 -1008 0
-7882 -978 -992 -1010 0
-7882 -977 -997 -1007 0
-7882 -977 -995 -1008 0
-7882 -977 -993 -1010 0
-7882 -977 -992 -1012 0
7882 1012 0
7882 992 1010 0
7882 993 1008 0
7882 995 1007 0
7882 997 0
7882 999 0
7882 1001 0
7882 1003 0
7882 1005 0
7882 977 1010 0
7882 977 992 1008 0
7882 977 993 1007 0
7882 977 995 0
7882 977 997 0
7882 977 999 0
7882 977 1001 0
7882 977 1003 0
7882 977 1005 0
7882 978 1008 0
7882 978 992 1007 0
7882 978 993 0
7882 978 995 0
7882 978 997 0
7882 978 999 0
7882 978 1001 0
7882 978 1003 0
7882 978 1005 0
7882 980 1007 0
7882 980 992 0
7882 980 993 0
7882 980 995 0
7882 980 997 0
7882 980 999 0
7882 980 1001 0
7882 980 1003 0
7882 980 1005 0
7882 982 0
7882 982 992 0
7882 982 993 0
7882 982 995 0
7882 982 997 0
7882 982 999 0
7882 982 1001 0
7882 982 1003 0
7882 982 1005 0
7882 984 0
7882 984 992 0
7882 984 993 0
7882 984 995 0
7882 984 997 0
7882 984 999 0
7882 984 1001 0
7882 984 1003 0
7882 984 1005 0
7882 986 0
7882 986 992 0
7882 986 993 0
7882 986 995 0
7882 986 997 0
7882 986 999 0
7882 986 1001 0
7882 986 1003 0
7882 986 1005 0
7882 988 0
7882 988 992 0
7882 988 993 0
7882 988 995 0
7882 988 997 0
7882 988 999 0
7882 988 1001 0
7882 988 1003 0
7882 988 1005 0
7882 990 0
7882 990 992 0
7882 990 993 0
7882 990 995 0
7882 990 997 0
7882 990 999 0
7882 990 1001 0
7882 990 1003 0
7882 990 1005 0
c (((aux469 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1))<=14)=tv=SATLiteral(7883))
-7883 1856 0
-7883 1187 1854 0
-7883 1188 1852 0
-7883 1190 1850 0
-7883 1192 1848 0
-7883 1194 1846 0
-7883 1196 1844 0
-7883 1198 1842 0
-7883 1200 1840 0
-7883 1067 1854 0
-7883 1067 1187 1852 0
-7883 1067 1188 1850 0
-7883 1067 1190 1848 0
-7883 1067 1192 1846 0
-7883 1067 1194 1844 0
-7883 1067 1196 1842 0
-7883 1067 1198 1840 0
-7883 1067 1200 1838 0
-7883 1068 1852 0
-7883 1068 1187 1850 0
-7883 1068 1188 1848 0
-7883 1068 1190 1846 0
-7883 1068 1192 1844 0
-7883 1068 1194 1842 0
-7883 1068 1196 1840 0
-7883 1068 1198 1838 0
-7883 1068 1200 1836 0
-7883 1070 1850 0
-7883 1070 1187 1848 0
-7883 1070 1188 1846 0
-7883 1070 1190 1844 0
-7883 1070 1192 1842 0
-7883 1070 1194 1840 0
-7883 1070 1196 1838 0
-7883 1070 1198 1836 0
-7883 1070 1200 1834 0
-7883 1072 1848 0
-7883 1072 1187 1846 0
-7883 1072 1188 1844 0
-7883 1072 1190 1842 0
-7883 1072 1192 1840 0
-7883 1072 1194 1838 0
-7883 1072 1196 1836 0
-7883 1072 1198 1834 0
-7883 1072 1200 1832 0
-7883 1074 1846 0
-7883 1074 1187 1844 0
-7883 1074 1188 1842 0
-7883 1074 1190 1840 0
-7883 1074 1192 1838 0
-7883 1074 1194 1836 0
-7883 1074 1196 1834 0
-7883 1074 1198 1832 0
-7883 1074 1200 1830 0
-7883 1076 1844 0
-7883 1076 1187 1842 0
-7883 1076 1188 1840 0
-7883 1076 1190 1838 0
-7883 1076 1192 1836 0
-7883 1076 1194 1834 0
-7883 1076 1196 1832 0
-7883 1076 1198 1830 0
-7883 1076 1200 1829 0
-7883 1078 1842 0
-7883 1078 1187 1840 0
-7883 1078 1188 1838 0
-7883 1078 1190 1836 0
-7883 1078 1192 1834 0
-7883 1078 1194 1832 0
-7883 1078 1196 1830 0
-7883 1078 1198 1829 0
-7883 1078 1200 0
-7883 1080 1840 0
-7883 1080 1187 1838 0
-7883 1080 1188 1836 0
-7883 1080 1190 1834 0
-7883 1080 1192 1832 0
-7883 1080 1194 1830 0
-7883 1080 1196 1829 0
-7883 1080 1198 0
-7883 1080 1200 0
7883 -1198 -1829 0
7883 -1196 -1830 0
7883 -1194 -1832 0
7883 -1192 -1834 0
7883 -1190 -1836 0
7883 -1188 -1838 0
7883 -1187 -1840 0
7883 -1080 -1200 -1829 0
7883 -1080 -1198 -1830 0
7883 -1080 -1196 -1832 0
7883 -1080 -1194 -1834 0
7883 -1080 -1192 -1836 0
7883 -1080 -1190 -1838 0
7883 -1080 -1188 -1840 0
7883 -1080 -1187 -1842 0
7883 -1078 -1829 0
7883 -1078 -1200 -1830 0
7883 -1078 -1198 -1832 0
7883 -1078 -1196 -1834 0
7883 -1078 -1194 -1836 0
7883 -1078 -1192 -1838 0
7883 -1078 -1190 -1840 0
7883 -1078 -1188 -1842 0
7883 -1078 -1187 -1844 0
7883 -1076 -1830 0
7883 -1076 -1200 -1832 0
7883 -1076 -1198 -1834 0
7883 -1076 -1196 -1836 0
7883 -1076 -1194 -1838 0
7883 -1076 -1192 -1840 0
7883 -1076 -1190 -1842 0
7883 -1076 -1188 -1844 0
7883 -1076 -1187 -1846 0
7883 -1074 -1832 0
7883 -1074 -1200 -1834 0
7883 -1074 -1198 -1836 0
7883 -1074 -1196 -1838 0
7883 -1074 -1194 -1840 0
7883 -1074 -1192 -1842 0
7883 -1074 -1190 -1844 0
7883 -1074 -1188 -1846 0
7883 -1074 -1187 -1848 0
7883 -1072 -1834 0
7883 -1072 -1200 -1836 0
7883 -1072 -1198 -1838 0
7883 -1072 -1196 -1840 0
7883 -1072 -1194 -1842 0
7883 -1072 -1192 -1844 0
7883 -1072 -1190 -1846 0
7883 -1072 -1188 -1848 0
7883 -1072 -1187 -1850 0
7883 -1070 -1836 0
7883 -1070 -1200 -1838 0
7883 -1070 -1198 -1840 0
7883 -1070 -1196 -1842 0
7883 -1070 -1194 -1844 0
7883 -1070 -1192 -1846 0
7883 -1070 -1190 -1848 0
7883 -1070 -1188 -1850 0
7883 -1070 -1187 -1852 0
7883 -1068 -1838 0
7883 -1068 -1200 -1840 0
7883 -1068 -1198 -1842 0
7883 -1068 -1196 -1844 0
7883 -1068 -1194 -1846 0
7883 -1068 -1192 -1848 0
7883 -1068 -1190 -1850 0
7883 -1068 -1188 -1852 0
7883 -1068 -1187 -1854 0
7883 -1067 -1840 0
7883 -1067 -1200 -1842 0
7883 -1067 -1198 -1844 0
7883 -1067 -1196 -1846 0
7883 -1067 -1194 -1848 0
7883 -1067 -1192 -1850 0
7883 -1067 -1190 -1852 0
7883 -1067 -1188 -1854 0
7883 -1067 -1187 -1856 0
c ((14<=(aux469 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1)))=tv=SATLiteral(7884))
-7884 -1196 -1829 0
-7884 -1194 -1830 0
-7884 -1192 -1832 0
-7884 -1190 -1834 0
-7884 -1188 -1836 0
-7884 -1187 -1838 0
-7884 -1080 -1198 -1829 0
-7884 -1080 -1196 -1830 0
-7884 -1080 -1194 -1832 0
-7884 -1080 -1192 -1834 0
-7884 -1080 -1190 -1836 0
-7884 -1080 -1188 -1838 0
-7884 -1080 -1187 -1840 0
-7884 -1078 -1200 -1829 0
-7884 -1078 -1198 -1830 0
-7884 -1078 -1196 -1832 0
-7884 -1078 -1194 -1834 0
-7884 -1078 -1192 -1836 0
-7884 -1078 -1190 -1838 0
-7884 -1078 -1188 -1840 0
-7884 -1078 -1187 -1842 0
-7884 -1076 -1829 0
-7884 -1076 -1200 -1830 0
-7884 -1076 -1198 -1832 0
-7884 -1076 -1196 -1834 0
-7884 -1076 -1194 -1836 0
-7884 -1076 -1192 -1838 0
-7884 -1076 -1190 -1840 0
-7884 -1076 -1188 -1842 0
-7884 -1076 -1187 -1844 0
-7884 -1074 -1830 0
-7884 -1074 -1200 -1832 0
-7884 -1074 -1198 -1834 0
-7884 -1074 -1196 -1836 0
-7884 -1074 -1194 -1838 0
-7884 -1074 -1192 -1840 0
-7884 -1074 -1190 -1842 0
-7884 -1074 -1188 -1844 0
-7884 -1074 -1187 -1846 0
-7884 -1072 -1832 0
-7884 -1072 -1200 -1834 0
-7884 -1072 -1198 -1836 0
-7884 -1072 -1196 -1838 0
-7884 -1072 -1194 -1840 0
-7884 -1072 -1192 -1842 0
-7884 -1072 -1190 -1844 0
-7884 -1072 -1188 -1846 0
-7884 -1072 -1187 -1848 0
-7884 -1070 -1834 0
-7884 -1070 -1200 -1836 0
-7884 -1070 -1198 -1838 0
-7884 -1070 -1196 -1840 0
-7884 -1070 -1194 -1842 0
-7884 -1070 -1192 -1844 0
-7884 -1070 -1190 -1846 0
-7884 -1070 -1188 -1848 0
-7884 -1070 -1187 -1850 0
-7884 -1068 -1836 0
-7884 -1068 -1200 -1838 0
-7884 -1068 -1198 -1840 0
-7884 -1068 -1196 -1842 0
-7884 -1068 -1194 -1844 0
-7884 -1068 -1192 -1846 0
-7884 -1068 -1190 -1848 0
-7884 -1068 -1188 -1850 0
-7884 -1068 -1187 -1852 0
-7884 -1067 -1838 0
-7884 -1067 -1200 -1840 0
-7884 -1067 -1198 -1842 0
-7884 -1067 -1196 -1844 0
-7884 -1067 -1194 -1846 0
-7884 -1067 -1192 -1848 0
-7884 -1067 -1190 -1850 0
-7884 -1067 -1188 -1852 0
-7884 -1067 -1187 -1854 0
7884 1854 0
7884 1187 1852 0
7884 1188 1850 0
7884 1190 1848 0
7884 1192 1846 0
7884 1194 1844 0
7884 1196 1842 0
7884 1198 1840 0
7884 1200 1838 0
7884 1067 1852 0
7884 1067 1187 1850 0
7884 1067 1188 1848 0
7884 1067 1190 1846 0
7884 1067 1192 1844 0
7884 1067 1194 1842 0
7884 1067 1196 1840 0
7884 1067 1198 1838 0
7884 1067 1200 1836 0
7884 1068 1850 0
7884 1068 1187 1848 0
7884 1068 1188 1846 0
7884 1068 1190 1844 0
7884 1068 1192 1842 0
7884 1068 1194 1840 0
7884 1068 1196 1838 0
7884 1068 1198 1836 0
7884 1068 1200 1834 0
7884 1070 1848 0
7884 1070 1187 1846 0
7884 1070 1188 1844 0
7884 1070 1190 1842 0
7884 1070 1192 1840 0
7884 1070 1194 1838 0
7884 1070 1196 1836 0
7884 1070 1198 1834 0
7884 1070 1200 1832 0
7884 1072 1846 0
7884 1072 1187 1844 0
7884 1072 1188 1842 0
7884 1072 1190 1840 0
7884 1072 1192 1838 0
7884 1072 1194 1836 0
7884 1072 1196 1834 0
7884 1072 1198 1832 0
7884 1072 1200 1830 0
7884 1074 1844 0
7884 1074 1187 1842 0
7884 1074 1188 1840 0
7884 1074 1190 1838 0
7884 1074 1192 1836 0
7884 1074 1194 1834 0
7884 1074 1196 1832 0
7884 1074 1198 1830 0
7884 1074 1200 1829 0
7884 1076 1842 0
7884 1076 1187 1840 0
7884 1076 1188 1838 0
7884 1076 1190 1836 0
7884 1076 1192 1834 0
7884 1076 1194 1832 0
7884 1076 1196 1830 0
7884 1076 1198 1829 0
7884 1076 1200 0
7884 1078 1840 0
7884 1078 1187 1838 0
7884 1078 1188 1836 0
7884 1078 1190 1834 0
7884 1078 1192 1832 0
7884 1078 1194 1830 0
7884 1078 1196 1829 0
7884 1078 1198 0
7884 1078 1200 0
7884 1080 1838 0
7884 1080 1187 1836 0
7884 1080 1188 1834 0
7884 1080 1190 1832 0
7884 1080 1192 1830 0
7884 1080 1194 1829 0
7884 1080 1196 0
7884 1080 1198 0
7884 1080 1200 0
c (((aux470 + shift(x_00009_00003, -1) + shift(x_00009_00004, -1))<=26)=tv=SATLiteral(7885))
-7885 1115 1140 1889 0
-7885 1117 1138 1889 0
-7885 1117 1140 1887 0
-7885 1119 1136 1889 0
-7885 1119 1138 1887 0
-7885 1119 1140 1885 0
-7885 1121 1134 1889 0
-7885 1121 1136 1887 0
-7885 1121 1138 1885 0
-7885 1121 1140 1883 0
-7885 1123 1132 1889 0
-7885 1123 1134 1887 0
-7885 1123 1136 1885 0
-7885 1123 1138 1883 0
-7885 1123 1140 1881 0
-7885 1125 1130 1889 0
-7885 1125 1132 1887 0
-7885 1125 1134 1885 0
-7885 1125 1136 1883 0
-7885 1125 1138 1881 0
-7885 1125 1140 1879 0
7885 -1879 0
7885 -1140 -1881 0
7885 -1138 -1883 0
7885 -1136 -1885 0
7885 -1134 -1887 0
7885 -1132 -1889 0
7885 -1130 0
7885 -1128 0
7885 -1127 0
7885 -1125 -1881 0
7885 -1125 -1140 -1883 0
7885 -1125 -1138 -1885 0
7885 -1125 -1136 -1887 0
7885 -1125 -1134 -1889 0
7885 -1125 -1132 0
7885 -1125 -1130 0
7885 -1125 -1128 0
7885 -1125 -1127 0
7885 -1123 -1883 0
7885 -1123 -1140 -1885 0
7885 -1123 -1138 -1887 0
7885 -1123 -1136 -1889 0
7885 -1123 -1134 0
7885 -1123 -1132 0
7885 -1123 -1130 0
7885 -1123 -1128 0
7885 -1123 -1127 0
7885 -1121 -1885 0
7885 -1121 -1140 -1887 0
7885 -1121 -1138 -1889 0
7885 -1121 -1136 0
7885 -1121 -1134 0
7885 -1121 -1132 0
7885 -1121 -1130 0
7885 -1121 -1128 0
7885 -1121 -1127 0
7885 -1119 -1887 0
7885 -1119 -1140 -1889 0
7885 -1119 -1138 0
7885 -1119 -1136 0
7885 -1119 -1134 0
7885 -1119 -1132 0
7885 -1119 -1130 0
7885 -1119 -1128 0
7885 -1119 -1127 0
7885 -1117 -1889 0
7885 -1117 -1140 0
7885 -1117 -1138 0
7885 -1117 -1136 0
7885 -1117 -1134 0
7885 -1117 -1132 0
7885 -1117 -1130 0
7885 -1117 -1128 0
7885 -1117 -1127 0
7885 -1115 0
7885 -1115 -1140 0
7885 -1115 -1138 0
7885 -1115 -1136 0
7885 -1115 -1134 0
7885 -1115 -1132 0
7885 -1115 -1130 0
7885 -1115 -1128 0
7885 -1115 -1127 0
7885 -1113 0
7885 -1113 -1140 0
7885 -1113 -1138 0
7885 -1113 -1136 0
7885 -1113 -1134 0
7885 -1113 -1132 0
7885 -1113 -1130 0
7885 -1113 -1128 0
7885 -1113 -1127 0
7885 -1112 0
7885 -1112 -1140 0
7885 -1112 -1138 0
7885 -1112 -1136 0
7885 -1112 -1134 0
7885 -1112 -1132 0
7885 -1112 -1130 0
7885 -1112 -1128 0
7885 -1112 -1127 0
c ((26<=(aux470 + shift(x_00009_00003, -1) + shift(x_00009_00004, -1)))=tv=SATLiteral(7886))
-7886 -1877 0
-7886 -1140 -1879 0
-7886 -1138 -1881 0
-7886 -1136 -1883 0
-7886 -1134 -1885 0
-7886 -1132 -1887 0
-7886 -1130 -1889 0
-7886 -1128 0
-7886 -1127 0
-7886 -1125 -1879 0
-7886 -1125 -1140 -1881 0
-7886 -1125 -1138 -1883 0
-7886 -1125 -1136 -1885 0
-7886 -1125 -1134 -1887 0
-7886 -1125 -1132 -1889 0
-7886 -1125 -1130 0
-7886 -1125 -1128 0
-7886 -1125 -1127 0
-7886 -1123 -1881 0
-7886 -1123 -1140 -1883 0
-7886 -1123 -1138 -1885 0
-7886 -1123 -1136 -1887 0
-7886 -1123 -1134 -1889 0
-7886 -1123 -1132 0
-7886 -1123 -1130 0
-7886 -1123 -1128 0
-7886 -1123 -1127 0
-7886 -1121 -1883 0
-7886 -1121 -1140 -1885 0
-7886 -1121 -1138 -1887 0
-7886 -1121 -1136 -1889 0
-7886 -1121 -1134 0
-7886 -1121 -1132 0
-7886 -1121 -1130 0
-7886 -1121 -1128 0
-7886 -1121 -1127 0
-7886 -1119 -1885 0
-7886 -1119 -1140 -1887 0
-7886 -1119 -1138 -1889 0
-7886 -1119 -1136 0
-7886 -1119 -1134 0
-7886 -1119 -1132 0
-7886 -1119 -1130 0
-7886 -1119 -1128 0
-7886 -1119 -1127 0
-7886 -1117 -1887 0
-7886 -1117 -1140 -1889 0
-7886 -1117 -1138 0
-7886 -1117 -1136 0
-7886 -1117 -1134 0
-7886 -1117 -1132 0
-7886 -1117 -1130 0
-7886 -1117 -1128 0
-7886 -1117 -1127 0
-7886 -1115 -1889 0
-7886 -1115 -1140 0
-7886 -1115 -1138 0
-7886 -1115 -1136 0
-7886 -1115 -1134 0
-7886 -1115 -1132 0
-7886 -1115 -1130 0
-7886 -1115 -1128 0
-7886 -1115 -1127 0
-7886 -1113 0
-7886 -1113 -1140 0
-7886 -1113 -1138 0
-7886 -1113 -1136 0
-7886 -1113 -1134 0
-7886 -1113 -1132 0
-7886 -1113 -1130 0
-7886 -1113 -1128 0
-7886 -1113 -1127 0
-7886 -1112 0
-7886 -1112 -1140 0
-7886 -1112 -1138 0
-7886 -1112 -1136 0
-7886 -1112 -1134 0
-7886 -1112 -1132 0
-7886 -1112 -1130 0
-7886 -1112 -1128 0
-7886 -1112 -1127 0
7886 1113 1140 1889 0
7886 1115 1138 1889 0
7886 1115 1140 1887 0
7886 1117 1136 1889 0
7886 1117 1138 1887 0
7886 1117 1140 1885 0
7886 1119 1134 1889 0
7886 1119 1136 1887 0
7886 1119 1138 1885 0
7886 1119 1140 1883 0
7886 1121 1132 1889 0
7886 1121 1134 1887 0
7886 1121 1136 1885 0
7886 1121 1138 1883 0
7886 1121 1140 1881 0
7886 1123 1130 1889 0
7886 1123 1132 1887 0
7886 1123 1134 1885 0
7886 1123 1136 1883 0
7886 1123 1138 1881 0
7886 1123 1140 1879 0
7886 1125 1128 1889 0
7886 1125 1130 1887 0
7886 1125 1132 1885 0
7886 1125 1134 1883 0
7886 1125 1136 1881 0
7886 1125 1138 1879 0
7886 1125 1140 1877 0
c (((aux472 + aux475 + aux476)<=1)=tv=SATLiteral(7887))
-7887 1909 0
-7887 1903 1908 0
-7887 1904 0
-7887 1906 0
-7887 1894 1908 0
-7887 1894 1903 0
-7887 1894 1904 0
-7887 1894 1906 0
-7887 1895 0
-7887 1895 1903 0
-7887 1895 1904 0
-7887 1895 1906 0
7887 -1895 -1903 -1908 0
7887 -1894 -1904 -1908 0
7887 -1894 -1903 -1909 0
c ((1<=(aux472 + aux475 + aux476))=tv=SATLiteral(7888))
-7888 -1894 -1903 -1908 0
7888 1908 0
7888 1903 0
7888 1904 0
7888 1906 0
7888 1894 0
7888 1894 1903 0
7888 1894 1904 0
7888 1894 1906 0
7888 1895 0
7888 1895 1903 0
7888 1895 1904 0
7888 1895 1906 0
c (((aux478 + aux481 + aux482)<=1)=tv=SATLiteral(7889))
-7889 1933 0
-7889 1927 1932 0
-7889 1928 0
-7889 1930 0
-7889 1918 1932 0
-7889 1918 1927 0
-7889 1918 1928 0
-7889 1918 1930 0
-7889 1919 0
-7889 1919 1927 0
-7889 1919 1928 0
-7889 1919 1930 0
7889 -1919 -1927 -1932 0
7889 -1918 -1928 -1932 0
7889 -1918 -1927 -1933 0
c ((1<=(aux478 + aux481 + aux482))=tv=SATLiteral(7890))
-7890 -1918 -1927 -1932 0
7890 1932 0
7890 1927 0
7890 1928 0
7890 1930 0
7890 1918 0
7890 1918 1927 0
7890 1918 1928 0
7890 1918 1930 0
7890 1919 0
7890 1919 1927 0
7890 1919 1928 0
7890 1919 1930 0
c (((aux484 + aux487 + aux488)<=1)=tv=SATLiteral(7891))
-7891 1957 0
-7891 1951 1956 0
-7891 1952 0
-7891 1954 0
-7891 1942 1956 0
-7891 1942 1951 0
-7891 1942 1952 0
-7891 1942 1954 0
-7891 1943 0
-7891 1943 1951 0
-7891 1943 1952 0
-7891 1943 1954 0
7891 -1943 -1951 -1956 0
7891 -1942 -1952 -1956 0
7891 -1942 -1951 -1957 0
c ((1<=(aux484 + aux487 + aux488))=tv=SATLiteral(7892))
-7892 -1942 -1951 -1956 0
7892 1956 0
7892 1951 0
7892 1952 0
7892 1954 0
7892 1942 0
7892 1942 1951 0
7892 1942 1952 0
7892 1942 1954 0
7892 1943 0
7892 1943 1951 0
7892 1943 1952 0
7892 1943 1954 0
c (((aux490 + aux493 + aux494)<=1)=tv=SATLiteral(7893))
-7893 1981 0
-7893 1975 1980 0
-7893 1976 0
-7893 1978 0
-7893 1966 1980 0
-7893 1966 1975 0
-7893 1966 1976 0
-7893 1966 1978 0
-7893 1967 0
-7893 1967 1975 0
-7893 1967 1976 0
-7893 1967 1978 0
7893 -1967 -1975 -1980 0
7893 -1966 -1976 -1980 0
7893 -1966 -1975 -1981 0
c ((1<=(aux490 + aux493 + aux494))=tv=SATLiteral(7894))
-7894 -1966 -1975 -1980 0
7894 1980 0
7894 1975 0
7894 1976 0
7894 1978 0
7894 1966 0
7894 1966 1975 0
7894 1966 1976 0
7894 1966 1978 0
7894 1967 0
7894 1967 1975 0
7894 1967 1976 0
7894 1967 1978 0
c (((aux496 + aux499 + aux500)<=1)=tv=SATLiteral(7895))
-7895 2005 0
-7895 1999 2004 0
-7895 2000 0
-7895 2002 0
-7895 1990 2004 0
-7895 1990 1999 0
-7895 1990 2000 0
-7895 1990 2002 0
-7895 1991 0
-7895 1991 1999 0
-7895 1991 2000 0
-7895 1991 2002 0
7895 -1991 -1999 -2004 0
7895 -1990 -2000 -2004 0
7895 -1990 -1999 -2005 0
c ((1<=(aux496 + aux499 + aux500))=tv=SATLiteral(7896))
-7896 -1990 -1999 -2004 0
7896 2004 0
7896 1999 0
7896 2000 0
7896 2002 0
7896 1990 0
7896 1990 1999 0
7896 1990 2000 0
7896 1990 2002 0
7896 1991 0
7896 1991 1999 0
7896 1991 2000 0
7896 1991 2002 0
c (((aux502 + aux505 + aux506)<=1)=tv=SATLiteral(7897))
-7897 2029 0
-7897 2023 2028 0
-7897 2024 0
-7897 2026 0
-7897 2014 2028 0
-7897 2014 2023 0
-7897 2014 2024 0
-7897 2014 2026 0
-7897 2015 0
-7897 2015 2023 0
-7897 2015 2024 0
-7897 2015 2026 0
7897 -2015 -2023 -2028 0
7897 -2014 -2024 -2028 0
7897 -2014 -2023 -2029 0
c ((1<=(aux502 + aux505 + aux506))=tv=SATLiteral(7898))
-7898 -2014 -2023 -2028 0
7898 2028 0
7898 2023 0
7898 2024 0
7898 2026 0
7898 2014 0
7898 2014 2023 0
7898 2014 2024 0
7898 2014 2026 0
7898 2015 0
7898 2015 2023 0
7898 2015 2024 0
7898 2015 2026 0
c (((aux508 + aux511 + aux512)<=1)=tv=SATLiteral(7899))
-7899 2053 0
-7899 2047 2052 0
-7899 2048 0
-7899 2050 0
-7899 2038 2052 0
-7899 2038 2047 0
-7899 2038 2048 0
-7899 2038 2050 0
-7899 2039 0
-7899 2039 2047 0
-7899 2039 2048 0
-7899 2039 2050 0
7899 -2039 -2047 -2052 0
7899 -2038 -2048 -2052 0
7899 -2038 -2047 -2053 0
c ((1<=(aux508 + aux511 + aux512))=tv=SATLiteral(7900))
-7900 -2038 -2047 -2052 0
7900 2052 0
7900 2047 0
7900 2048 0
7900 2050 0
7900 2038 0
7900 2038 2047 0
7900 2038 2048 0
7900 2038 2050 0
7900 2039 0
7900 2039 2047 0
7900 2039 2048 0
7900 2039 2050 0
c (((aux514 + aux517 + aux518)<=1)=tv=SATLiteral(7901))
-7901 2077 0
-7901 2071 2076 0
-7901 2072 0
-7901 2074 0
-7901 2062 2076 0
-7901 2062 2071 0
-7901 2062 2072 0
-7901 2062 2074 0
-7901 2063 0
-7901 2063 2071 0
-7901 2063 2072 0
-7901 2063 2074 0
7901 -2063 -2071 -2076 0
7901 -2062 -2072 -2076 0
7901 -2062 -2071 -2077 0
c ((1<=(aux514 + aux517 + aux518))=tv=SATLiteral(7902))
-7902 -2062 -2071 -2076 0
7902 2076 0
7902 2071 0
7902 2072 0
7902 2074 0
7902 2062 0
7902 2062 2071 0
7902 2062 2072 0
7902 2062 2074 0
7902 2063 0
7902 2063 2071 0
7902 2063 2072 0
7902 2063 2074 0
c (((aux520 + aux523 + aux524)<=1)=tv=SATLiteral(7903))
-7903 2101 0
-7903 2095 2100 0
-7903 2096 0
-7903 2098 0
-7903 2086 2100 0
-7903 2086 2095 0
-7903 2086 2096 0
-7903 2086 2098 0
-7903 2087 0
-7903 2087 2095 0
-7903 2087 2096 0
-7903 2087 2098 0
7903 -2087 -2095 -2100 0
7903 -2086 -2096 -2100 0
7903 -2086 -2095 -2101 0
c ((1<=(aux520 + aux523 + aux524))=tv=SATLiteral(7904))
-7904 -2086 -2095 -2100 0
7904 2100 0
7904 2095 0
7904 2096 0
7904 2098 0
7904 2086 0
7904 2086 2095 0
7904 2086 2096 0
7904 2086 2098 0
7904 2087 0
7904 2087 2095 0
7904 2087 2096 0
7904 2087 2098 0
c (((aux526 + aux529 + aux530)<=1)=tv=SATLiteral(7905))
-7905 2125 0
-7905 2119 2124 0
-7905 2120 0
-7905 2122 0
-7905 2110 2124 0
-7905 2110 2119 0
-7905 2110 2120 0
-7905 2110 2122 0
-7905 2111 0
-7905 2111 2119 0
-7905 2111 2120 0
-7905 2111 2122 0
7905 -2111 -2119 -2124 0
7905 -2110 -2120 -2124 0
7905 -2110 -2119 -2125 0
c ((1<=(aux526 + aux529 + aux530))=tv=SATLiteral(7906))
-7906 -2110 -2119 -2124 0
7906 2124 0
7906 2119 0
7906 2120 0
7906 2122 0
7906 2110 0
7906 2110 2119 0
7906 2110 2120 0
7906 2110 2122 0
7906 2111 0
7906 2111 2119 0
7906 2111 2120 0
7906 2111 2122 0
c (((aux532 + aux535 + aux536)<=1)=tv=SATLiteral(7907))
-7907 2149 0
-7907 2143 2148 0
-7907 2144 0
-7907 2146 0
-7907 2134 2148 0
-7907 2134 2143 0
-7907 2134 2144 0
-7907 2134 2146 0
-7907 2135 0
-7907 2135 2143 0
-7907 2135 2144 0
-7907 2135 2146 0
7907 -2135 -2143 -2148 0
7907 -2134 -2144 -2148 0
7907 -2134 -2143 -2149 0
c ((1<=(aux532 + aux535 + aux536))=tv=SATLiteral(7908))
-7908 -2134 -2143 -2148 0
7908 2148 0
7908 2143 0
7908 2144 0
7908 2146 0
7908 2134 0
7908 2134 2143 0
7908 2134 2144 0
7908 2134 2146 0
7908 2135 0
7908 2135 2143 0
7908 2135 2144 0
7908 2135 2146 0
c (((aux538 + aux541 + aux542)<=1)=tv=SATLiteral(7909))
-7909 2173 0
-7909 2167 2172 0
-7909 2168 0
-7909 2170 0
-7909 2158 2172 0
-7909 2158 2167 0
-7909 2158 2168 0
-7909 2158 2170 0
-7909 2159 0
-7909 2159 2167 0
-7909 2159 2168 0
-7909 2159 2170 0
7909 -2159 -2167 -2172 0
7909 -2158 -2168 -2172 0
7909 -2158 -2167 -2173 0
c ((1<=(aux538 + aux541 + aux542))=tv=SATLiteral(7910))
-7910 -2158 -2167 -2172 0
7910 2172 0
7910 2167 0
7910 2168 0
7910 2170 0
7910 2158 0
7910 2158 2167 0
7910 2158 2168 0
7910 2158 2170 0
7910 2159 0
7910 2159 2167 0
7910 2159 2168 0
7910 2159 2170 0
c (((aux544 + aux547 + aux548)<=1)=tv=SATLiteral(7911))
-7911 2197 0
-7911 2191 2196 0
-7911 2192 0
-7911 2194 0
-7911 2182 2196 0
-7911 2182 2191 0
-7911 2182 2192 0
-7911 2182 2194 0
-7911 2183 0
-7911 2183 2191 0
-7911 2183 2192 0
-7911 2183 2194 0
7911 -2183 -2191 -2196 0
7911 -2182 -2192 -2196 0
7911 -2182 -2191 -2197 0
c ((1<=(aux544 + aux547 + aux548))=tv=SATLiteral(7912))
-7912 -2182 -2191 -2196 0
7912 2196 0
7912 2191 0
7912 2192 0
7912 2194 0
7912 2182 0
7912 2182 2191 0
7912 2182 2192 0
7912 2182 2194 0
7912 2183 0
7912 2183 2191 0
7912 2183 2192 0
7912 2183 2194 0
c (((aux550 + aux553 + aux554)<=1)=tv=SATLiteral(7913))
-7913 2221 0
-7913 2215 2220 0
-7913 2216 0
-7913 2218 0
-7913 2206 2220 0
-7913 2206 2215 0
-7913 2206 2216 0
-7913 2206 2218 0
-7913 2207 0
-7913 2207 2215 0
-7913 2207 2216 0
-7913 2207 2218 0
7913 -2207 -2215 -2220 0
7913 -2206 -2216 -2220 0
7913 -2206 -2215 -2221 0
c ((1<=(aux550 + aux553 + aux554))=tv=SATLiteral(7914))
-7914 -2206 -2215 -2220 0
7914 2220 0
7914 2215 0
7914 2216 0
7914 2218 0
7914 2206 0
7914 2206 2215 0
7914 2206 2216 0
7914 2206 2218 0
7914 2207 0
7914 2207 2215 0
7914 2207 2216 0
7914 2207 2218 0
c (((aux556 + aux559 + aux560)<=1)=tv=SATLiteral(7915))
-7915 2245 0
-7915 2239 2244 0
-7915 2240 0
-7915 2242 0
-7915 2230 2244 0
-7915 2230 2239 0
-7915 2230 2240 0
-7915 2230 2242 0
-7915 2231 0
-7915 2231 2239 0
-7915 2231 2240 0
-7915 2231 2242 0
7915 -2231 -2239 -2244 0
7915 -2230 -2240 -2244 0
7915 -2230 -2239 -2245 0
c ((1<=(aux556 + aux559 + aux560))=tv=SATLiteral(7916))
-7916 -2230 -2239 -2244 0
7916 2244 0
7916 2239 0
7916 2240 0
7916 2242 0
7916 2230 0
7916 2230 2239 0
7916 2230 2240 0
7916 2230 2242 0
7916 2231 0
7916 2231 2239 0
7916 2231 2240 0
7916 2231 2242 0
c (((aux562 + aux565 + aux566)<=1)=tv=SATLiteral(7917))
-7917 2269 0
-7917 2263 2268 0
-7917 2264 0
-7917 2266 0
-7917 2254 2268 0
-7917 2254 2263 0
-7917 2254 2264 0
-7917 2254 2266 0
-7917 2255 0
-7917 2255 2263 0
-7917 2255 2264 0
-7917 2255 2266 0
7917 -2255 -2263 -2268 0
7917 -2254 -2264 -2268 0
7917 -2254 -2263 -2269 0
c ((1<=(aux562 + aux565 + aux566))=tv=SATLiteral(7918))
-7918 -2254 -2263 -2268 0
7918 2268 0
7918 2263 0
7918 2264 0
7918 2266 0
7918 2254 0
7918 2254 2263 0
7918 2254 2264 0
7918 2254 2266 0
7918 2255 0
7918 2255 2263 0
7918 2255 2264 0
7918 2255 2266 0
c (((aux568 + aux571 + aux572)<=1)=tv=SATLiteral(7919))
-7919 2293 0
-7919 2287 2292 0
-7919 2288 0
-7919 2290 0
-7919 2278 2292 0
-7919 2278 2287 0
-7919 2278 2288 0
-7919 2278 2290 0
-7919 2279 0
-7919 2279 2287 0
-7919 2279 2288 0
-7919 2279 2290 0
7919 -2279 -2287 -2292 0
7919 -2278 -2288 -2292 0
7919 -2278 -2287 -2293 0
c ((1<=(aux568 + aux571 + aux572))=tv=SATLiteral(7920))
-7920 -2278 -2287 -2292 0
7920 2292 0
7920 2287 0
7920 2288 0
7920 2290 0
7920 2278 0
7920 2278 2287 0
7920 2278 2288 0
7920 2278 2290 0
7920 2279 0
7920 2279 2287 0
7920 2279 2288 0
7920 2279 2290 0
c (((aux574 + aux577 + aux578)<=1)=tv=SATLiteral(7921))
-7921 2317 0
-7921 2311 2316 0
-7921 2312 0
-7921 2314 0
-7921 2302 2316 0
-7921 2302 2311 0
-7921 2302 2312 0
-7921 2302 2314 0
-7921 2303 0
-7921 2303 2311 0
-7921 2303 2312 0
-7921 2303 2314 0
7921 -2303 -2311 -2316 0
7921 -2302 -2312 -2316 0
7921 -2302 -2311 -2317 0
c ((1<=(aux574 + aux577 + aux578))=tv=SATLiteral(7922))
-7922 -2302 -2311 -2316 0
7922 2316 0
7922 2311 0
7922 2312 0
7922 2314 0
7922 2302 0
7922 2302 2311 0
7922 2302 2312 0
7922 2302 2314 0
7922 2303 0
7922 2303 2311 0
7922 2303 2312 0
7922 2303 2314 0
c (((aux580 + aux583 + aux584)<=1)=tv=SATLiteral(7923))
-7923 2341 0
-7923 2335 2340 0
-7923 2336 0
-7923 2338 0
-7923 2326 2340 0
-7923 2326 2335 0
-7923 2326 2336 0
-7923 2326 2338 0
-7923 2327 0
-7923 2327 2335 0
-7923 2327 2336 0
-7923 2327 2338 0
7923 -2327 -2335 -2340 0
7923 -2326 -2336 -2340 0
7923 -2326 -2335 -2341 0
c ((1<=(aux580 + aux583 + aux584))=tv=SATLiteral(7924))
-7924 -2326 -2335 -2340 0
7924 2340 0
7924 2335 0
7924 2336 0
7924 2338 0
7924 2326 0
7924 2326 2335 0
7924 2326 2336 0
7924 2326 2338 0
7924 2327 0
7924 2327 2335 0
7924 2327 2336 0
7924 2327 2338 0
c (((aux586 + aux589 + aux590)<=1)=tv=SATLiteral(7925))
-7925 2365 0
-7925 2359 2364 0
-7925 2360 0
-7925 2362 0
-7925 2350 2364 0
-7925 2350 2359 0
-7925 2350 2360 0
-7925 2350 2362 0
-7925 2351 0
-7925 2351 2359 0
-7925 2351 2360 0
-7925 2351 2362 0
7925 -2351 -2359 -2364 0
7925 -2350 -2360 -2364 0
7925 -2350 -2359 -2365 0
c ((1<=(aux586 + aux589 + aux590))=tv=SATLiteral(7926))
-7926 -2350 -2359 -2364 0
7926 2364 0
7926 2359 0
7926 2360 0
7926 2362 0
7926 2350 0
7926 2350 2359 0
7926 2350 2360 0
7926 2350 2362 0
7926 2351 0
7926 2351 2359 0
7926 2351 2360 0
7926 2351 2362 0
c (((aux592 + aux595 + aux596)<=1)=tv=SATLiteral(7927))
-7927 2389 0
-7927 2383 2388 0
-7927 2384 0
-7927 2386 0
-7927 2374 2388 0
-7927 2374 2383 0
-7927 2374 2384 0
-7927 2374 2386 0
-7927 2375 0
-7927 2375 2383 0
-7927 2375 2384 0
-7927 2375 2386 0
7927 -2375 -2383 -2388 0
7927 -2374 -2384 -2388 0
7927 -2374 -2383 -2389 0
c ((1<=(aux592 + aux595 + aux596))=tv=SATLiteral(7928))
-7928 -2374 -2383 -2388 0
7928 2388 0
7928 2383 0
7928 2384 0
7928 2386 0
7928 2374 0
7928 2374 2383 0
7928 2374 2384 0
7928 2374 2386 0
7928 2375 0
7928 2375 2383 0
7928 2375 2384 0
7928 2375 2386 0
c (((aux598 + aux601 + aux602)<=1)=tv=SATLiteral(7929))
-7929 2413 0
-7929 2407 2412 0
-7929 2408 0
-7929 2410 0
-7929 2398 2412 0
-7929 2398 2407 0
-7929 2398 2408 0
-7929 2398 2410 0
-7929 2399 0
-7929 2399 2407 0
-7929 2399 2408 0
-7929 2399 2410 0
7929 -2399 -2407 -2412 0
7929 -2398 -2408 -2412 0
7929 -2398 -2407 -2413 0
c ((1<=(aux598 + aux601 + aux602))=tv=SATLiteral(7930))
-7930 -2398 -2407 -2412 0
7930 2412 0
7930 2407 0
7930 2408 0
7930 2410 0
7930 2398 0
7930 2398 2407 0
7930 2398 2408 0
7930 2398 2410 0
7930 2399 0
7930 2399 2407 0
7930 2399 2408 0
7930 2399 2410 0
c (((aux604 + aux607 + aux608)<=1)=tv=SATLiteral(7931))
-7931 2437 0
-7931 2431 2436 0
-7931 2432 0
-7931 2434 0
-7931 2422 2436 0
-7931 2422 2431 0
-7931 2422 2432 0
-7931 2422 2434 0
-7931 2423 0
-7931 2423 2431 0
-7931 2423 2432 0
-7931 2423 2434 0
7931 -2423 -2431 -2436 0
7931 -2422 -2432 -2436 0
7931 -2422 -2431 -2437 0
c ((1<=(aux604 + aux607 + aux608))=tv=SATLiteral(7932))
-7932 -2422 -2431 -2436 0
7932 2436 0
7932 2431 0
7932 2432 0
7932 2434 0
7932 2422 0
7932 2422 2431 0
7932 2422 2432 0
7932 2422 2434 0
7932 2423 0
7932 2423 2431 0
7932 2423 2432 0
7932 2423 2434 0
c (((aux610 + aux613 + aux614)<=1)=tv=SATLiteral(7933))
-7933 2461 0
-7933 2455 2460 0
-7933 2456 0
-7933 2458 0
-7933 2446 2460 0
-7933 2446 2455 0
-7933 2446 2456 0
-7933 2446 2458 0
-7933 2447 0
-7933 2447 2455 0
-7933 2447 2456 0
-7933 2447 2458 0
7933 -2447 -2455 -2460 0
7933 -2446 -2456 -2460 0
7933 -2446 -2455 -2461 0
c ((1<=(aux610 + aux613 + aux614))=tv=SATLiteral(7934))
-7934 -2446 -2455 -2460 0
7934 2460 0
7934 2455 0
7934 2456 0
7934 2458 0
7934 2446 0
7934 2446 2455 0
7934 2446 2456 0
7934 2446 2458 0
7934 2447 0
7934 2447 2455 0
7934 2447 2456 0
7934 2447 2458 0
c (((aux616 + aux619 + aux620)<=1)=tv=SATLiteral(7935))
-7935 2485 0
-7935 2479 2484 0
-7935 2480 0
-7935 2482 0
-7935 2470 2484 0
-7935 2470 2479 0
-7935 2470 2480 0
-7935 2470 2482 0
-7935 2471 0
-7935 2471 2479 0
-7935 2471 2480 0
-7935 2471 2482 0
7935 -2471 -2479 -2484 0
7935 -2470 -2480 -2484 0
7935 -2470 -2479 -2485 0
c ((1<=(aux616 + aux619 + aux620))=tv=SATLiteral(7936))
-7936 -2470 -2479 -2484 0
7936 2484 0
7936 2479 0
7936 2480 0
7936 2482 0
7936 2470 0
7936 2470 2479 0
7936 2470 2480 0
7936 2470 2482 0
7936 2471 0
7936 2471 2479 0
7936 2471 2480 0
7936 2471 2482 0
c (((aux622 + aux625 + aux626)<=1)=tv=SATLiteral(7937))
-7937 2509 0
-7937 2503 2508 0
-7937 2504 0
-7937 2506 0
-7937 2494 2508 0
-7937 2494 2503 0
-7937 2494 2504 0
-7937 2494 2506 0
-7937 2495 0
-7937 2495 2503 0
-7937 2495 2504 0
-7937 2495 2506 0
7937 -2495 -2503 -2508 0
7937 -2494 -2504 -2508 0
7937 -2494 -2503 -2509 0
c ((1<=(aux622 + aux625 + aux626))=tv=SATLiteral(7938))
-7938 -2494 -2503 -2508 0
7938 2508 0
7938 2503 0
7938 2504 0
7938 2506 0
7938 2494 0
7938 2494 2503 0
7938 2494 2504 0
7938 2494 2506 0
7938 2495 0
7938 2495 2503 0
7938 2495 2504 0
7938 2495 2506 0
c (((aux628 + aux631 + aux632)<=1)=tv=SATLiteral(7939))
-7939 2533 0
-7939 2527 2532 0
-7939 2528 0
-7939 2530 0
-7939 2518 2532 0
-7939 2518 2527 0
-7939 2518 2528 0
-7939 2518 2530 0
-7939 2519 0
-7939 2519 2527 0
-7939 2519 2528 0
-7939 2519 2530 0
7939 -2519 -2527 -2532 0
7939 -2518 -2528 -2532 0
7939 -2518 -2527 -2533 0
c ((1<=(aux628 + aux631 + aux632))=tv=SATLiteral(7940))
-7940 -2518 -2527 -2532 0
7940 2532 0
7940 2527 0
7940 2528 0
7940 2530 0
7940 2518 0
7940 2518 2527 0
7940 2518 2528 0
7940 2518 2530 0
7940 2519 0
7940 2519 2527 0
7940 2519 2528 0
7940 2519 2530 0
c (((aux634 + aux637 + aux638)<=1)=tv=SATLiteral(7941))
-7941 2557 0
-7941 2551 2556 0
-7941 2552 0
-7941 2554 0
-7941 2542 2556 0
-7941 2542 2551 0
-7941 2542 2552 0
-7941 2542 2554 0
-7941 2543 0
-7941 2543 2551 0
-7941 2543 2552 0
-7941 2543 2554 0
7941 -2543 -2551 -2556 0
7941 -2542 -2552 -2556 0
7941 -2542 -2551 -2557 0
c ((1<=(aux634 + aux637 + aux638))=tv=SATLiteral(7942))
-7942 -2542 -2551 -2556 0
7942 2556 0
7942 2551 0
7942 2552 0
7942 2554 0
7942 2542 0
7942 2542 2551 0
7942 2542 2552 0
7942 2542 2554 0
7942 2543 0
7942 2543 2551 0
7942 2543 2552 0
7942 2543 2554 0
c (((aux640 + aux643 + aux644)<=1)=tv=SATLiteral(7943))
-7943 2581 0
-7943 2575 2580 0
-7943 2576 0
-7943 2578 0
-7943 2566 2580 0
-7943 2566 2575 0
-7943 2566 2576 0
-7943 2566 2578 0
-7943 2567 0
-7943 2567 2575 0
-7943 2567 2576 0
-7943 2567 2578 0
7943 -2567 -2575 -2580 0
7943 -2566 -2576 -2580 0
7943 -2566 -2575 -2581 0
c ((1<=(aux640 + aux643 + aux644))=tv=SATLiteral(7944))
-7944 -2566 -2575 -2580 0
7944 2580 0
7944 2575 0
7944 2576 0
7944 2578 0
7944 2566 0
7944 2566 2575 0
7944 2566 2576 0
7944 2566 2578 0
7944 2567 0
7944 2567 2575 0
7944 2567 2576 0
7944 2567 2578 0
c (((aux646 + aux649 + aux650)<=1)=tv=SATLiteral(7945))
-7945 2605 0
-7945 2599 2604 0
-7945 2600 0
-7945 2602 0
-7945 2590 2604 0
-7945 2590 2599 0
-7945 2590 2600 0
-7945 2590 2602 0
-7945 2591 0
-7945 2591 2599 0
-7945 2591 2600 0
-7945 2591 2602 0
7945 -2591 -2599 -2604 0
7945 -2590 -2600 -2604 0
7945 -2590 -2599 -2605 0
c ((1<=(aux646 + aux649 + aux650))=tv=SATLiteral(7946))
-7946 -2590 -2599 -2604 0
7946 2604 0
7946 2599 0
7946 2600 0
7946 2602 0
7946 2590 0
7946 2590 2599 0
7946 2590 2600 0
7946 2590 2602 0
7946 2591 0
7946 2591 2599 0
7946 2591 2600 0
7946 2591 2602 0
c (((aux652 + aux655 + aux656)<=1)=tv=SATLiteral(7947))
-7947 2629 0
-7947 2623 2628 0
-7947 2624 0
-7947 2626 0
-7947 2614 2628 0
-7947 2614 2623 0
-7947 2614 2624 0
-7947 2614 2626 0
-7947 2615 0
-7947 2615 2623 0
-7947 2615 2624 0
-7947 2615 2626 0
7947 -2615 -2623 -2628 0
7947 -2614 -2624 -2628 0
7947 -2614 -2623 -2629 0
c ((1<=(aux652 + aux655 + aux656))=tv=SATLiteral(7948))
-7948 -2614 -2623 -2628 0
7948 2628 0
7948 2623 0
7948 2624 0
7948 2626 0
7948 2614 0
7948 2614 2623 0
7948 2614 2624 0
7948 2614 2626 0
7948 2615 0
7948 2615 2623 0
7948 2615 2624 0
7948 2615 2626 0
c (((aux658 + aux661 + aux662)<=1)=tv=SATLiteral(7949))
-7949 2653 0
-7949 2647 2652 0
-7949 2648 0
-7949 2650 0
-7949 2638 2652 0
-7949 2638 2647 0
-7949 2638 2648 0
-7949 2638 2650 0
-7949 2639 0
-7949 2639 2647 0
-7949 2639 2648 0
-7949 2639 2650 0
7949 -2639 -2647 -2652 0
7949 -2638 -2648 -2652 0
7949 -2638 -2647 -2653 0
c ((1<=(aux658 + aux661 + aux662))=tv=SATLiteral(7950))
-7950 -2638 -2647 -2652 0
7950 2652 0
7950 2647 0
7950 2648 0
7950 2650 0
7950 2638 0
7950 2638 2647 0
7950 2638 2648 0
7950 2638 2650 0
7950 2639 0
7950 2639 2647 0
7950 2639 2648 0
7950 2639 2650 0
c (((aux664 + aux667 + aux668)<=1)=tv=SATLiteral(7951))
-7951 2677 0
-7951 2671 2676 0
-7951 2672 0
-7951 2674 0
-7951 2662 2676 0
-7951 2662 2671 0
-7951 2662 2672 0
-7951 2662 2674 0
-7951 2663 0
-7951 2663 2671 0
-7951 2663 2672 0
-7951 2663 2674 0
7951 -2663 -2671 -2676 0
7951 -2662 -2672 -2676 0
7951 -2662 -2671 -2677 0
c ((1<=(aux664 + aux667 + aux668))=tv=SATLiteral(7952))
-7952 -2662 -2671 -2676 0
7952 2676 0
7952 2671 0
7952 2672 0
7952 2674 0
7952 2662 0
7952 2662 2671 0
7952 2662 2672 0
7952 2662 2674 0
7952 2663 0
7952 2663 2671 0
7952 2663 2672 0
7952 2663 2674 0
c (((aux670 + aux673 + aux674)<=1)=tv=SATLiteral(7953))
-7953 2701 0
-7953 2695 2700 0
-7953 2696 0
-7953 2698 0
-7953 2686 2700 0
-7953 2686 2695 0
-7953 2686 2696 0
-7953 2686 2698 0
-7953 2687 0
-7953 2687 2695 0
-7953 2687 2696 0
-7953 2687 2698 0
7953 -2687 -2695 -2700 0
7953 -2686 -2696 -2700 0
7953 -2686 -2695 -2701 0
c ((1<=(aux670 + aux673 + aux674))=tv=SATLiteral(7954))
-7954 -2686 -2695 -2700 0
7954 2700 0
7954 2695 0
7954 2696 0
7954 2698 0
7954 2686 0
7954 2686 2695 0
7954 2686 2696 0
7954 2686 2698 0
7954 2687 0
7954 2687 2695 0
7954 2687 2696 0
7954 2687 2698 0
c (((aux676 + aux679 + aux680)<=1)=tv=SATLiteral(7955))
-7955 2725 0
-7955 2719 2724 0
-7955 2720 0
-7955 2722 0
-7955 2710 2724 0
-7955 2710 2719 0
-7955 2710 2720 0
-7955 2710 2722 0
-7955 2711 0
-7955 2711 2719 0
-7955 2711 2720 0
-7955 2711 2722 0
7955 -2711 -2719 -2724 0
7955 -2710 -2720 -2724 0
7955 -2710 -2719 -2725 0
c ((1<=(aux676 + aux679 + aux680))=tv=SATLiteral(7956))
-7956 -2710 -2719 -2724 0
7956 2724 0
7956 2719 0
7956 2720 0
7956 2722 0
7956 2710 0
7956 2710 2719 0
7956 2710 2720 0
7956 2710 2722 0
7956 2711 0
7956 2711 2719 0
7956 2711 2720 0
7956 2711 2722 0
c (((aux682 + aux685 + aux686)<=1)=tv=SATLiteral(7957))
-7957 2749 0
-7957 2743 2748 0
-7957 2744 0
-7957 2746 0
-7957 2734 2748 0
-7957 2734 2743 0
-7957 2734 2744 0
-7957 2734 2746 0
-7957 2735 0
-7957 2735 2743 0
-7957 2735 2744 0
-7957 2735 2746 0
7957 -2735 -2743 -2748 0
7957 -2734 -2744 -2748 0
7957 -2734 -2743 -2749 0
c ((1<=(aux682 + aux685 + aux686))=tv=SATLiteral(7958))
-7958 -2734 -2743 -2748 0
7958 2748 0
7958 2743 0
7958 2744 0
7958 2746 0
7958 2734 0
7958 2734 2743 0
7958 2734 2744 0
7958 2734 2746 0
7958 2735 0
7958 2735 2743 0
7958 2735 2744 0
7958 2735 2746 0
c (((aux688 + aux691 + aux692)<=1)=tv=SATLiteral(7959))
-7959 2773 0
-7959 2767 2772 0
-7959 2768 0
-7959 2770 0
-7959 2758 2772 0
-7959 2758 2767 0
-7959 2758 2768 0
-7959 2758 2770 0
-7959 2759 0
-7959 2759 2767 0
-7959 2759 2768 0
-7959 2759 2770 0
7959 -2759 -2767 -2772 0
7959 -2758 -2768 -2772 0
7959 -2758 -2767 -2773 0
c ((1<=(aux688 + aux691 + aux692))=tv=SATLiteral(7960))
-7960 -2758 -2767 -2772 0
7960 2772 0
7960 2767 0
7960 2768 0
7960 2770 0
7960 2758 0
7960 2758 2767 0
7960 2758 2768 0
7960 2758 2770 0
7960 2759 0
7960 2759 2767 0
7960 2759 2768 0
7960 2759 2770 0
c (((aux694 + aux697 + aux698)<=1)=tv=SATLiteral(7961))
-7961 2797 0
-7961 2791 2796 0
-7961 2792 0
-7961 2794 0
-7961 2782 2796 0
-7961 2782 2791 0
-7961 2782 2792 0
-7961 2782 2794 0
-7961 2783 0
-7961 2783 2791 0
-7961 2783 2792 0
-7961 2783 2794 0
7961 -2783 -2791 -2796 0
7961 -2782 -2792 -2796 0
7961 -2782 -2791 -2797 0
c ((1<=(aux694 + aux697 + aux698))=tv=SATLiteral(7962))
-7962 -2782 -2791 -2796 0
7962 2796 0
7962 2791 0
7962 2792 0
7962 2794 0
7962 2782 0
7962 2782 2791 0
7962 2782 2792 0
7962 2782 2794 0
7962 2783 0
7962 2783 2791 0
7962 2783 2792 0
7962 2783 2794 0
c (((aux700 + aux703 + aux704)<=1)=tv=SATLiteral(7963))
-7963 2821 0
-7963 2815 2820 0
-7963 2816 0
-7963 2818 0
-7963 2806 2820 0
-7963 2806 2815 0
-7963 2806 2816 0
-7963 2806 2818 0
-7963 2807 0
-7963 2807 2815 0
-7963 2807 2816 0
-7963 2807 2818 0
7963 -2807 -2815 -2820 0
7963 -2806 -2816 -2820 0
7963 -2806 -2815 -2821 0
c ((1<=(aux700 + aux703 + aux704))=tv=SATLiteral(7964))
-7964 -2806 -2815 -2820 0
7964 2820 0
7964 2815 0
7964 2816 0
7964 2818 0
7964 2806 0
7964 2806 2815 0
7964 2806 2816 0
7964 2806 2818 0
7964 2807 0
7964 2807 2815 0
7964 2807 2816 0
7964 2807 2818 0
c (((aux706 + aux709 + aux710)<=1)=tv=SATLiteral(7965))
-7965 2845 0
-7965 2839 2844 0
-7965 2840 0
-7965 2842 0
-7965 2830 2844 0
-7965 2830 2839 0
-7965 2830 2840 0
-7965 2830 2842 0
-7965 2831 0
-7965 2831 2839 0
-7965 2831 2840 0
-7965 2831 2842 0
7965 -2831 -2839 -2844 0
7965 -2830 -2840 -2844 0
7965 -2830 -2839 -2845 0
c ((1<=(aux706 + aux709 + aux710))=tv=SATLiteral(7966))
-7966 -2830 -2839 -2844 0
7966 2844 0
7966 2839 0
7966 2840 0
7966 2842 0
7966 2830 0
7966 2830 2839 0
7966 2830 2840 0
7966 2830 2842 0
7966 2831 0
7966 2831 2839 0
7966 2831 2840 0
7966 2831 2842 0
c (((aux712 + aux715 + aux716)<=1)=tv=SATLiteral(7967))
-7967 2869 0
-7967 2863 2868 0
-7967 2864 0
-7967 2866 0
-7967 2854 2868 0
-7967 2854 2863 0
-7967 2854 2864 0
-7967 2854 2866 0
-7967 2855 0
-7967 2855 2863 0
-7967 2855 2864 0
-7967 2855 2866 0
7967 -2855 -2863 -2868 0
7967 -2854 -2864 -2868 0
7967 -2854 -2863 -2869 0
c ((1<=(aux712 + aux715 + aux716))=tv=SATLiteral(7968))
-7968 -2854 -2863 -2868 0
7968 2868 0
7968 2863 0
7968 2864 0
7968 2866 0
7968 2854 0
7968 2854 2863 0
7968 2854 2864 0
7968 2854 2866 0
7968 2855 0
7968 2855 2863 0
7968 2855 2864 0
7968 2855 2866 0
c (((aux718 + aux721 + aux722)<=1)=tv=SATLiteral(7969))
-7969 2893 0
-7969 2887 2892 0
-7969 2888 0
-7969 2890 0
-7969 2878 2892 0
-7969 2878 2887 0
-7969 2878 2888 0
-7969 2878 2890 0
-7969 2879 0
-7969 2879 2887 0
-7969 2879 2888 0
-7969 2879 2890 0
7969 -2879 -2887 -2892 0
7969 -2878 -2888 -2892 0
7969 -2878 -2887 -2893 0
c ((1<=(aux718 + aux721 + aux722))=tv=SATLiteral(7970))
-7970 -2878 -2887 -2892 0
7970 2892 0
7970 2887 0
7970 2888 0
7970 2890 0
7970 2878 0
7970 2878 2887 0
7970 2878 2888 0
7970 2878 2890 0
7970 2879 0
7970 2879 2887 0
7970 2879 2888 0
7970 2879 2890 0
c (((aux724 + aux727 + aux728)<=1)=tv=SATLiteral(7971))
-7971 2917 0
-7971 2911 2916 0
-7971 2912 0
-7971 2914 0
-7971 2902 2916 0
-7971 2902 2911 0
-7971 2902 2912 0
-7971 2902 2914 0
-7971 2903 0
-7971 2903 2911 0
-7971 2903 2912 0
-7971 2903 2914 0
7971 -2903 -2911 -2916 0
7971 -2902 -2912 -2916 0
7971 -2902 -2911 -2917 0
c ((1<=(aux724 + aux727 + aux728))=tv=SATLiteral(7972))
-7972 -2902 -2911 -2916 0
7972 2916 0
7972 2911 0
7972 2912 0
7972 2914 0
7972 2902 0
7972 2902 2911 0
7972 2902 2912 0
7972 2902 2914 0
7972 2903 0
7972 2903 2911 0
7972 2903 2912 0
7972 2903 2914 0
c (((aux730 + aux733 + aux734)<=1)=tv=SATLiteral(7973))
-7973 2941 0
-7973 2935 2940 0
-7973 2936 0
-7973 2938 0
-7973 2926 2940 0
-7973 2926 2935 0
-7973 2926 2936 0
-7973 2926 2938 0
-7973 2927 0
-7973 2927 2935 0
-7973 2927 2936 0
-7973 2927 2938 0
7973 -2927 -2935 -2940 0
7973 -2926 -2936 -2940 0
7973 -2926 -2935 -2941 0
c ((1<=(aux730 + aux733 + aux734))=tv=SATLiteral(7974))
-7974 -2926 -2935 -2940 0
7974 2940 0
7974 2935 0
7974 2936 0
7974 2938 0
7974 2926 0
7974 2926 2935 0
7974 2926 2936 0
7974 2926 2938 0
7974 2927 0
7974 2927 2935 0
7974 2927 2936 0
7974 2927 2938 0
c (((aux736 + aux739 + aux740)<=1)=tv=SATLiteral(7975))
-7975 2965 0
-7975 2959 2964 0
-7975 2960 0
-7975 2962 0
-7975 2950 2964 0
-7975 2950 2959 0
-7975 2950 2960 0
-7975 2950 2962 0
-7975 2951 0
-7975 2951 2959 0
-7975 2951 2960 0
-7975 2951 2962 0
7975 -2951 -2959 -2964 0
7975 -2950 -2960 -2964 0
7975 -2950 -2959 -2965 0
c ((1<=(aux736 + aux739 + aux740))=tv=SATLiteral(7976))
-7976 -2950 -2959 -2964 0
7976 2964 0
7976 2959 0
7976 2960 0
7976 2962 0
7976 2950 0
7976 2950 2959 0
7976 2950 2960 0
7976 2950 2962 0
7976 2951 0
7976 2951 2959 0
7976 2951 2960 0
7976 2951 2962 0
c (((aux742 + aux745 + aux746)<=1)=tv=SATLiteral(7977))
-7977 2989 0
-7977 2983 2988 0
-7977 2984 0
-7977 2986 0
-7977 2974 2988 0
-7977 2974 2983 0
-7977 2974 2984 0
-7977 2974 2986 0
-7977 2975 0
-7977 2975 2983 0
-7977 2975 2984 0
-7977 2975 2986 0
7977 -2975 -2983 -2988 0
7977 -2974 -2984 -2988 0
7977 -2974 -2983 -2989 0
c ((1<=(aux742 + aux745 + aux746))=tv=SATLiteral(7978))
-7978 -2974 -2983 -2988 0
7978 2988 0
7978 2983 0
7978 2984 0
7978 2986 0
7978 2974 0
7978 2974 2983 0
7978 2974 2984 0
7978 2974 2986 0
7978 2975 0
7978 2975 2983 0
7978 2975 2984 0
7978 2975 2986 0
c (((aux748 + aux751 + aux752)<=1)=tv=SATLiteral(7979))
-7979 3013 0
-7979 3007 3012 0
-7979 3008 0
-7979 3010 0
-7979 2998 3012 0
-7979 2998 3007 0
-7979 2998 3008 0
-7979 2998 3010 0
-7979 2999 0
-7979 2999 3007 0
-7979 2999 3008 0
-7979 2999 3010 0
7979 -2999 -3007 -3012 0
7979 -2998 -3008 -3012 0
7979 -2998 -3007 -3013 0
c ((1<=(aux748 + aux751 + aux752))=tv=SATLiteral(7980))
-7980 -2998 -3007 -3012 0
7980 3012 0
7980 3007 0
7980 3008 0
7980 3010 0
7980 2998 0
7980 2998 3007 0
7980 2998 3008 0
7980 2998 3010 0
7980 2999 0
7980 2999 3007 0
7980 2999 3008 0
7980 2999 3010 0
c (((aux754 + aux757 + aux758)<=1)=tv=SATLiteral(7981))
-7981 3037 0
-7981 3031 3036 0
-7981 3032 0
-7981 3034 0
-7981 3022 3036 0
-7981 3022 3031 0
-7981 3022 3032 0
-7981 3022 3034 0
-7981 3023 0
-7981 3023 3031 0
-7981 3023 3032 0
-7981 3023 3034 0
7981 -3023 -3031 -3036 0
7981 -3022 -3032 -3036 0
7981 -3022 -3031 -3037 0
c ((1<=(aux754 + aux757 + aux758))=tv=SATLiteral(7982))
-7982 -3022 -3031 -3036 0
7982 3036 0
7982 3031 0
7982 3032 0
7982 3034 0
7982 3022 0
7982 3022 3031 0
7982 3022 3032 0
7982 3022 3034 0
7982 3023 0
7982 3023 3031 0
7982 3023 3032 0
7982 3023 3034 0
c (((aux760 + aux763 + aux764)<=1)=tv=SATLiteral(7983))
-7983 3061 0
-7983 3055 3060 0
-7983 3056 0
-7983 3058 0
-7983 3046 3060 0
-7983 3046 3055 0
-7983 3046 3056 0
-7983 3046 3058 0
-7983 3047 0
-7983 3047 3055 0
-7983 3047 3056 0
-7983 3047 3058 0
7983 -3047 -3055 -3060 0
7983 -3046 -3056 -3060 0
7983 -3046 -3055 -3061 0
c ((1<=(aux760 + aux763 + aux764))=tv=SATLiteral(7984))
-7984 -3046 -3055 -3060 0
7984 3060 0
7984 3055 0
7984 3056 0
7984 3058 0
7984 3046 0
7984 3046 3055 0
7984 3046 3056 0
7984 3046 3058 0
7984 3047 0
7984 3047 3055 0
7984 3047 3056 0
7984 3047 3058 0
c (((aux766 + aux769 + aux770)<=1)=tv=SATLiteral(7985))
-7985 3085 0
-7985 3079 3084 0
-7985 3080 0
-7985 3082 0
-7985 3070 3084 0
-7985 3070 3079 0
-7985 3070 3080 0
-7985 3070 3082 0
-7985 3071 0
-7985 3071 3079 0
-7985 3071 3080 0
-7985 3071 3082 0
7985 -3071 -3079 -3084 0
7985 -3070 -3080 -3084 0
7985 -3070 -3079 -3085 0
c ((1<=(aux766 + aux769 + aux770))=tv=SATLiteral(7986))
-7986 -3070 -3079 -3084 0
7986 3084 0
7986 3079 0
7986 3080 0
7986 3082 0
7986 3070 0
7986 3070 3079 0
7986 3070 3080 0
7986 3070 3082 0
7986 3071 0
7986 3071 3079 0
7986 3071 3080 0
7986 3071 3082 0
c (((aux772 + aux775 + aux776)<=1)=tv=SATLiteral(7987))
-7987 3109 0
-7987 3103 3108 0
-7987 3104 0
-7987 3106 0
-7987 3094 3108 0
-7987 3094 3103 0
-7987 3094 3104 0
-7987 3094 3106 0
-7987 3095 0
-7987 3095 3103 0
-7987 3095 3104 0
-7987 3095 3106 0
7987 -3095 -3103 -3108 0
7987 -3094 -3104 -3108 0
7987 -3094 -3103 -3109 0
c ((1<=(aux772 + aux775 + aux776))=tv=SATLiteral(7988))
-7988 -3094 -3103 -3108 0
7988 3108 0
7988 3103 0
7988 3104 0
7988 3106 0
7988 3094 0
7988 3094 3103 0
7988 3094 3104 0
7988 3094 3106 0
7988 3095 0
7988 3095 3103 0
7988 3095 3104 0
7988 3095 3106 0
c (((aux778 + aux781 + aux782)<=1)=tv=SATLiteral(7989))
-7989 3133 0
-7989 3127 3132 0
-7989 3128 0
-7989 3130 0
-7989 3118 3132 0
-7989 3118 3127 0
-7989 3118 3128 0
-7989 3118 3130 0
-7989 3119 0
-7989 3119 3127 0
-7989 3119 3128 0
-7989 3119 3130 0
7989 -3119 -3127 -3132 0
7989 -3118 -3128 -3132 0
7989 -3118 -3127 -3133 0
c ((1<=(aux778 + aux781 + aux782))=tv=SATLiteral(7990))
-7990 -3118 -3127 -3132 0
7990 3132 0
7990 3127 0
7990 3128 0
7990 3130 0
7990 3118 0
7990 3118 3127 0
7990 3118 3128 0
7990 3118 3130 0
7990 3119 0
7990 3119 3127 0
7990 3119 3128 0
7990 3119 3130 0
c (((aux784 + aux787 + aux788)<=1)=tv=SATLiteral(7991))
-7991 3157 0
-7991 3151 3156 0
-7991 3152 0
-7991 3154 0
-7991 3142 3156 0
-7991 3142 3151 0
-7991 3142 3152 0
-7991 3142 3154 0
-7991 3143 0
-7991 3143 3151 0
-7991 3143 3152 0
-7991 3143 3154 0
7991 -3143 -3151 -3156 0
7991 -3142 -3152 -3156 0
7991 -3142 -3151 -3157 0
c ((1<=(aux784 + aux787 + aux788))=tv=SATLiteral(7992))
-7992 -3142 -3151 -3156 0
7992 3156 0
7992 3151 0
7992 3152 0
7992 3154 0
7992 3142 0
7992 3142 3151 0
7992 3142 3152 0
7992 3142 3154 0
7992 3143 0
7992 3143 3151 0
7992 3143 3152 0
7992 3143 3154 0
c (((aux790 + aux793 + aux794)<=1)=tv=SATLiteral(7993))
-7993 3181 0
-7993 3175 3180 0
-7993 3176 0
-7993 3178 0
-7993 3166 3180 0
-7993 3166 3175 0
-7993 3166 3176 0
-7993 3166 3178 0
-7993 3167 0
-7993 3167 3175 0
-7993 3167 3176 0
-7993 3167 3178 0
7993 -3167 -3175 -3180 0
7993 -3166 -3176 -3180 0
7993 -3166 -3175 -3181 0
c ((1<=(aux790 + aux793 + aux794))=tv=SATLiteral(7994))
-7994 -3166 -3175 -3180 0
7994 3180 0
7994 3175 0
7994 3176 0
7994 3178 0
7994 3166 0
7994 3166 3175 0
7994 3166 3176 0
7994 3166 3178 0
7994 3167 0
7994 3167 3175 0
7994 3167 3176 0
7994 3167 3178 0
c (((aux796 + aux799 + aux800)<=1)=tv=SATLiteral(7995))
-7995 3205 0
-7995 3199 3204 0
-7995 3200 0
-7995 3202 0
-7995 3190 3204 0
-7995 3190 3199 0
-7995 3190 3200 0
-7995 3190 3202 0
-7995 3191 0
-7995 3191 3199 0
-7995 3191 3200 0
-7995 3191 3202 0
7995 -3191 -3199 -3204 0
7995 -3190 -3200 -3204 0
7995 -3190 -3199 -3205 0
c ((1<=(aux796 + aux799 + aux800))=tv=SATLiteral(7996))
-7996 -3190 -3199 -3204 0
7996 3204 0
7996 3199 0
7996 3200 0
7996 3202 0
7996 3190 0
7996 3190 3199 0
7996 3190 3200 0
7996 3190 3202 0
7996 3191 0
7996 3191 3199 0
7996 3191 3200 0
7996 3191 3202 0
c (((aux802 + aux805 + aux806)<=1)=tv=SATLiteral(7997))
-7997 3229 0
-7997 3223 3228 0
-7997 3224 0
-7997 3226 0
-7997 3214 3228 0
-7997 3214 3223 0
-7997 3214 3224 0
-7997 3214 3226 0
-7997 3215 0
-7997 3215 3223 0
-7997 3215 3224 0
-7997 3215 3226 0
7997 -3215 -3223 -3228 0
7997 -3214 -3224 -3228 0
7997 -3214 -3223 -3229 0
c ((1<=(aux802 + aux805 + aux806))=tv=SATLiteral(7998))
-7998 -3214 -3223 -3228 0
7998 3228 0
7998 3223 0
7998 3224 0
7998 3226 0
7998 3214 0
7998 3214 3223 0
7998 3214 3224 0
7998 3214 3226 0
7998 3215 0
7998 3215 3223 0
7998 3215 3224 0
7998 3215 3226 0
c (((aux808 + aux811 + aux812)<=1)=tv=SATLiteral(7999))
-7999 3253 0
-7999 3247 3252 0
-7999 3248 0
-7999 3250 0
-7999 3238 3252 0
-7999 3238 3247 0
-7999 3238 3248 0
-7999 3238 3250 0
-7999 3239 0
-7999 3239 3247 0
-7999 3239 3248 0
-7999 3239 3250 0
7999 -3239 -3247 -3252 0
7999 -3238 -3248 -3252 0
7999 -3238 -3247 -3253 0
c ((1<=(aux808 + aux811 + aux812))=tv=SATLiteral(8000))
-8000 -3238 -3247 -3252 0
8000 3252 0
8000 3247 0
8000 3248 0
8000 3250 0
8000 3238 0
8000 3238 3247 0
8000 3238 3248 0
8000 3238 3250 0
8000 3239 0
8000 3239 3247 0
8000 3239 3248 0
8000 3239 3250 0
c (((aux814 + aux817 + aux818)<=1)=tv=SATLiteral(8001))
-8001 3277 0
-8001 3271 3276 0
-8001 3272 0
-8001 3274 0
-8001 3262 3276 0
-8001 3262 3271 0
-8001 3262 3272 0
-8001 3262 3274 0
-8001 3263 0
-8001 3263 3271 0
-8001 3263 3272 0
-8001 3263 3274 0
8001 -3263 -3271 -3276 0
8001 -3262 -3272 -3276 0
8001 -3262 -3271 -3277 0
c ((1<=(aux814 + aux817 + aux818))=tv=SATLiteral(8002))
-8002 -3262 -3271 -3276 0
8002 3276 0
8002 3271 0
8002 3272 0
8002 3274 0
8002 3262 0
8002 3262 3271 0
8002 3262 3272 0
8002 3262 3274 0
8002 3263 0
8002 3263 3271 0
8002 3263 3272 0
8002 3263 3274 0
c (((aux820 + aux823 + aux824)<=1)=tv=SATLiteral(8003))
-8003 3301 0
-8003 3295 3300 0
-8003 3296 0
-8003 3298 0
-8003 3286 3300 0
-8003 3286 3295 0
-8003 3286 3296 0
-8003 3286 3298 0
-8003 3287 0
-8003 3287 3295 0
-8003 3287 3296 0
-8003 3287 3298 0
8003 -3287 -3295 -3300 0
8003 -3286 -3296 -3300 0
8003 -3286 -3295 -3301 0
c ((1<=(aux820 + aux823 + aux824))=tv=SATLiteral(8004))
-8004 -3286 -3295 -3300 0
8004 3300 0
8004 3295 0
8004 3296 0
8004 3298 0
8004 3286 0
8004 3286 3295 0
8004 3286 3296 0
8004 3286 3298 0
8004 3287 0
8004 3287 3295 0
8004 3287 3296 0
8004 3287 3298 0
c (((aux826 + aux829 + aux830)<=1)=tv=SATLiteral(8005))
-8005 3325 0
-8005 3319 3324 0
-8005 3320 0
-8005 3322 0
-8005 3310 3324 0
-8005 3310 3319 0
-8005 3310 3320 0
-8005 3310 3322 0
-8005 3311 0
-8005 3311 3319 0
-8005 3311 3320 0
-8005 3311 3322 0
8005 -3311 -3319 -3324 0
8005 -3310 -3320 -3324 0
8005 -3310 -3319 -3325 0
c ((1<=(aux826 + aux829 + aux830))=tv=SATLiteral(8006))
-8006 -3310 -3319 -3324 0
8006 3324 0
8006 3319 0
8006 3320 0
8006 3322 0
8006 3310 0
8006 3310 3319 0
8006 3310 3320 0
8006 3310 3322 0
8006 3311 0
8006 3311 3319 0
8006 3311 3320 0
8006 3311 3322 0
c (((aux832 + aux835 + aux836)<=1)=tv=SATLiteral(8007))
-8007 3349 0
-8007 3343 3348 0
-8007 3344 0
-8007 3346 0
-8007 3334 3348 0
-8007 3334 3343 0
-8007 3334 3344 0
-8007 3334 3346 0
-8007 3335 0
-8007 3335 3343 0
-8007 3335 3344 0
-8007 3335 3346 0
8007 -3335 -3343 -3348 0
8007 -3334 -3344 -3348 0
8007 -3334 -3343 -3349 0
c ((1<=(aux832 + aux835 + aux836))=tv=SATLiteral(8008))
-8008 -3334 -3343 -3348 0
8008 3348 0
8008 3343 0
8008 3344 0
8008 3346 0
8008 3334 0
8008 3334 3343 0
8008 3334 3344 0
8008 3334 3346 0
8008 3335 0
8008 3335 3343 0
8008 3335 3344 0
8008 3335 3346 0
c (((aux838 + aux841 + aux842)<=1)=tv=SATLiteral(8009))
-8009 3373 0
-8009 3367 3372 0
-8009 3368 0
-8009 3370 0
-8009 3358 3372 0
-8009 3358 3367 0
-8009 3358 3368 0
-8009 3358 3370 0
-8009 3359 0
-8009 3359 3367 0
-8009 3359 3368 0
-8009 3359 3370 0
8009 -3359 -3367 -3372 0
8009 -3358 -3368 -3372 0
8009 -3358 -3367 -3373 0
c ((1<=(aux838 + aux841 + aux842))=tv=SATLiteral(8010))
-8010 -3358 -3367 -3372 0
8010 3372 0
8010 3367 0
8010 3368 0
8010 3370 0
8010 3358 0
8010 3358 3367 0
8010 3358 3368 0
8010 3358 3370 0
8010 3359 0
8010 3359 3367 0
8010 3359 3368 0
8010 3359 3370 0
c (((aux844 + aux847 + aux848)<=1)=tv=SATLiteral(8011))
-8011 3397 0
-8011 3391 3396 0
-8011 3392 0
-8011 3394 0
-8011 3382 3396 0
-8011 3382 3391 0
-8011 3382 3392 0
-8011 3382 3394 0
-8011 3383 0
-8011 3383 3391 0
-8011 3383 3392 0
-8011 3383 3394 0
8011 -3383 -3391 -3396 0
8011 -3382 -3392 -3396 0
8011 -3382 -3391 -3397 0
c ((1<=(aux844 + aux847 + aux848))=tv=SATLiteral(8012))
-8012 -3382 -3391 -3396 0
8012 3396 0
8012 3391 0
8012 3392 0
8012 3394 0
8012 3382 0
8012 3382 3391 0
8012 3382 3392 0
8012 3382 3394 0
8012 3383 0
8012 3383 3391 0
8012 3383 3392 0
8012 3383 3394 0
c (((aux850 + aux853 + aux854)<=1)=tv=SATLiteral(8013))
-8013 3421 0
-8013 3415 3420 0
-8013 3416 0
-8013 3418 0
-8013 3406 3420 0
-8013 3406 3415 0
-8013 3406 3416 0
-8013 3406 3418 0
-8013 3407 0
-8013 3407 3415 0
-8013 3407 3416 0
-8013 3407 3418 0
8013 -3407 -3415 -3420 0
8013 -3406 -3416 -3420 0
8013 -3406 -3415 -3421 0
c ((1<=(aux850 + aux853 + aux854))=tv=SATLiteral(8014))
-8014 -3406 -3415 -3420 0
8014 3420 0
8014 3415 0
8014 3416 0
8014 3418 0
8014 3406 0
8014 3406 3415 0
8014 3406 3416 0
8014 3406 3418 0
8014 3407 0
8014 3407 3415 0
8014 3407 3416 0
8014 3407 3418 0
c (((aux856 + aux859 + aux860)<=1)=tv=SATLiteral(8015))
-8015 3445 0
-8015 3439 3444 0
-8015 3440 0
-8015 3442 0
-8015 3430 3444 0
-8015 3430 3439 0
-8015 3430 3440 0
-8015 3430 3442 0
-8015 3431 0
-8015 3431 3439 0
-8015 3431 3440 0
-8015 3431 3442 0
8015 -3431 -3439 -3444 0
8015 -3430 -3440 -3444 0
8015 -3430 -3439 -3445 0
c ((1<=(aux856 + aux859 + aux860))=tv=SATLiteral(8016))
-8016 -3430 -3439 -3444 0
8016 3444 0
8016 3439 0
8016 3440 0
8016 3442 0
8016 3430 0
8016 3430 3439 0
8016 3430 3440 0
8016 3430 3442 0
8016 3431 0
8016 3431 3439 0
8016 3431 3440 0
8016 3431 3442 0
c (((aux862 + aux865 + aux866)<=1)=tv=SATLiteral(8017))
-8017 3469 0
-8017 3463 3468 0
-8017 3464 0
-8017 3466 0
-8017 3454 3468 0
-8017 3454 3463 0
-8017 3454 3464 0
-8017 3454 3466 0
-8017 3455 0
-8017 3455 3463 0
-8017 3455 3464 0
-8017 3455 3466 0
8017 -3455 -3463 -3468 0
8017 -3454 -3464 -3468 0
8017 -3454 -3463 -3469 0
c ((1<=(aux862 + aux865 + aux866))=tv=SATLiteral(8018))
-8018 -3454 -3463 -3468 0
8018 3468 0
8018 3463 0
8018 3464 0
8018 3466 0
8018 3454 0
8018 3454 3463 0
8018 3454 3464 0
8018 3454 3466 0
8018 3455 0
8018 3455 3463 0
8018 3455 3464 0
8018 3455 3466 0
c (((aux868 + aux871 + aux872)<=1)=tv=SATLiteral(8019))
-8019 3493 0
-8019 3487 3492 0
-8019 3488 0
-8019 3490 0
-8019 3478 3492 0
-8019 3478 3487 0
-8019 3478 3488 0
-8019 3478 3490 0
-8019 3479 0
-8019 3479 3487 0
-8019 3479 3488 0
-8019 3479 3490 0
8019 -3479 -3487 -3492 0
8019 -3478 -3488 -3492 0
8019 -3478 -3487 -3493 0
c ((1<=(aux868 + aux871 + aux872))=tv=SATLiteral(8020))
-8020 -3478 -3487 -3492 0
8020 3492 0
8020 3487 0
8020 3488 0
8020 3490 0
8020 3478 0
8020 3478 3487 0
8020 3478 3488 0
8020 3478 3490 0
8020 3479 0
8020 3479 3487 0
8020 3479 3488 0
8020 3479 3490 0
c (((aux874 + aux877 + aux878)<=1)=tv=SATLiteral(8021))
-8021 3517 0
-8021 3511 3516 0
-8021 3512 0
-8021 3514 0
-8021 3502 3516 0
-8021 3502 3511 0
-8021 3502 3512 0
-8021 3502 3514 0
-8021 3503 0
-8021 3503 3511 0
-8021 3503 3512 0
-8021 3503 3514 0
8021 -3503 -3511 -3516 0
8021 -3502 -3512 -3516 0
8021 -3502 -3511 -3517 0
c ((1<=(aux874 + aux877 + aux878))=tv=SATLiteral(8022))
-8022 -3502 -3511 -3516 0
8022 3516 0
8022 3511 0
8022 3512 0
8022 3514 0
8022 3502 0
8022 3502 3511 0
8022 3502 3512 0
8022 3502 3514 0
8022 3503 0
8022 3503 3511 0
8022 3503 3512 0
8022 3503 3514 0
c (((aux880 + aux883 + aux884)<=1)=tv=SATLiteral(8023))
-8023 3541 0
-8023 3535 3540 0
-8023 3536 0
-8023 3538 0
-8023 3526 3540 0
-8023 3526 3535 0
-8023 3526 3536 0
-8023 3526 3538 0
-8023 3527 0
-8023 3527 3535 0
-8023 3527 3536 0
-8023 3527 3538 0
8023 -3527 -3535 -3540 0
8023 -3526 -3536 -3540 0
8023 -3526 -3535 -3541 0
c ((1<=(aux880 + aux883 + aux884))=tv=SATLiteral(8024))
-8024 -3526 -3535 -3540 0
8024 3540 0
8024 3535 0
8024 3536 0
8024 3538 0
8024 3526 0
8024 3526 3535 0
8024 3526 3536 0
8024 3526 3538 0
8024 3527 0
8024 3527 3535 0
8024 3527 3536 0
8024 3527 3538 0
c (((aux886 + aux889 + aux890)<=1)=tv=SATLiteral(8025))
-8025 3565 0
-8025 3559 3564 0
-8025 3560 0
-8025 3562 0
-8025 3550 3564 0
-8025 3550 3559 0
-8025 3550 3560 0
-8025 3550 3562 0
-8025 3551 0
-8025 3551 3559 0
-8025 3551 3560 0
-8025 3551 3562 0
8025 -3551 -3559 -3564 0
8025 -3550 -3560 -3564 0
8025 -3550 -3559 -3565 0
c ((1<=(aux886 + aux889 + aux890))=tv=SATLiteral(8026))
-8026 -3550 -3559 -3564 0
8026 3564 0
8026 3559 0
8026 3560 0
8026 3562 0
8026 3550 0
8026 3550 3559 0
8026 3550 3560 0
8026 3550 3562 0
8026 3551 0
8026 3551 3559 0
8026 3551 3560 0
8026 3551 3562 0
c (((aux892 + aux895 + aux896)<=1)=tv=SATLiteral(8027))
-8027 3589 0
-8027 3583 3588 0
-8027 3584 0
-8027 3586 0
-8027 3574 3588 0
-8027 3574 3583 0
-8027 3574 3584 0
-8027 3574 3586 0
-8027 3575 0
-8027 3575 3583 0
-8027 3575 3584 0
-8027 3575 3586 0
8027 -3575 -3583 -3588 0
8027 -3574 -3584 -3588 0
8027 -3574 -3583 -3589 0
c ((1<=(aux892 + aux895 + aux896))=tv=SATLiteral(8028))
-8028 -3574 -3583 -3588 0
8028 3588 0
8028 3583 0
8028 3584 0
8028 3586 0
8028 3574 0
8028 3574 3583 0
8028 3574 3584 0
8028 3574 3586 0
8028 3575 0
8028 3575 3583 0
8028 3575 3584 0
8028 3575 3586 0
c (((aux898 + aux901 + aux902)<=1)=tv=SATLiteral(8029))
-8029 3613 0
-8029 3607 3612 0
-8029 3608 0
-8029 3610 0
-8029 3598 3612 0
-8029 3598 3607 0
-8029 3598 3608 0
-8029 3598 3610 0
-8029 3599 0
-8029 3599 3607 0
-8029 3599 3608 0
-8029 3599 3610 0
8029 -3599 -3607 -3612 0
8029 -3598 -3608 -3612 0
8029 -3598 -3607 -3613 0
c ((1<=(aux898 + aux901 + aux902))=tv=SATLiteral(8030))
-8030 -3598 -3607 -3612 0
8030 3612 0
8030 3607 0
8030 3608 0
8030 3610 0
8030 3598 0
8030 3598 3607 0
8030 3598 3608 0
8030 3598 3610 0
8030 3599 0
8030 3599 3607 0
8030 3599 3608 0
8030 3599 3610 0
c (((aux904 + aux907 + aux908)<=1)=tv=SATLiteral(8031))
-8031 3637 0
-8031 3631 3636 0
-8031 3632 0
-8031 3634 0
-8031 3622 3636 0
-8031 3622 3631 0
-8031 3622 3632 0
-8031 3622 3634 0
-8031 3623 0
-8031 3623 3631 0
-8031 3623 3632 0
-8031 3623 3634 0
8031 -3623 -3631 -3636 0
8031 -3622 -3632 -3636 0
8031 -3622 -3631 -3637 0
c ((1<=(aux904 + aux907 + aux908))=tv=SATLiteral(8032))
-8032 -3622 -3631 -3636 0
8032 3636 0
8032 3631 0
8032 3632 0
8032 3634 0
8032 3622 0
8032 3622 3631 0
8032 3622 3632 0
8032 3622 3634 0
8032 3623 0
8032 3623 3631 0
8032 3623 3632 0
8032 3623 3634 0
c (((aux910 + aux913 + aux914)<=1)=tv=SATLiteral(8033))
-8033 3661 0
-8033 3655 3660 0
-8033 3656 0
-8033 3658 0
-8033 3646 3660 0
-8033 3646 3655 0
-8033 3646 3656 0
-8033 3646 3658 0
-8033 3647 0
-8033 3647 3655 0
-8033 3647 3656 0
-8033 3647 3658 0
8033 -3647 -3655 -3660 0
8033 -3646 -3656 -3660 0
8033 -3646 -3655 -3661 0
c ((1<=(aux910 + aux913 + aux914))=tv=SATLiteral(8034))
-8034 -3646 -3655 -3660 0
8034 3660 0
8034 3655 0
8034 3656 0
8034 3658 0
8034 3646 0
8034 3646 3655 0
8034 3646 3656 0
8034 3646 3658 0
8034 3647 0
8034 3647 3655 0
8034 3647 3656 0
8034 3647 3658 0
c (((aux916 + aux919 + aux920)<=1)=tv=SATLiteral(8035))
-8035 3685 0
-8035 3679 3684 0
-8035 3680 0
-8035 3682 0
-8035 3670 3684 0
-8035 3670 3679 0
-8035 3670 3680 0
-8035 3670 3682 0
-8035 3671 0
-8035 3671 3679 0
-8035 3671 3680 0
-8035 3671 3682 0
8035 -3671 -3679 -3684 0
8035 -3670 -3680 -3684 0
8035 -3670 -3679 -3685 0
c ((1<=(aux916 + aux919 + aux920))=tv=SATLiteral(8036))
-8036 -3670 -3679 -3684 0
8036 3684 0
8036 3679 0
8036 3680 0
8036 3682 0
8036 3670 0
8036 3670 3679 0
8036 3670 3680 0
8036 3670 3682 0
8036 3671 0
8036 3671 3679 0
8036 3671 3680 0
8036 3671 3682 0
c (((aux922 + aux925 + aux926)<=1)=tv=SATLiteral(8037))
-8037 3709 0
-8037 3703 3708 0
-8037 3704 0
-8037 3706 0
-8037 3694 3708 0
-8037 3694 3703 0
-8037 3694 3704 0
-8037 3694 3706 0
-8037 3695 0
-8037 3695 3703 0
-8037 3695 3704 0
-8037 3695 3706 0
8037 -3695 -3703 -3708 0
8037 -3694 -3704 -3708 0
8037 -3694 -3703 -3709 0
c ((1<=(aux922 + aux925 + aux926))=tv=SATLiteral(8038))
-8038 -3694 -3703 -3708 0
8038 3708 0
8038 3703 0
8038 3704 0
8038 3706 0
8038 3694 0
8038 3694 3703 0
8038 3694 3704 0
8038 3694 3706 0
8038 3695 0
8038 3695 3703 0
8038 3695 3704 0
8038 3695 3706 0
c (((aux928 + aux931 + aux932)<=1)=tv=SATLiteral(8039))
-8039 3733 0
-8039 3727 3732 0
-8039 3728 0
-8039 3730 0
-8039 3718 3732 0
-8039 3718 3727 0
-8039 3718 3728 0
-8039 3718 3730 0
-8039 3719 0
-8039 3719 3727 0
-8039 3719 3728 0
-8039 3719 3730 0
8039 -3719 -3727 -3732 0
8039 -3718 -3728 -3732 0
8039 -3718 -3727 -3733 0
c ((1<=(aux928 + aux931 + aux932))=tv=SATLiteral(8040))
-8040 -3718 -3727 -3732 0
8040 3732 0
8040 3727 0
8040 3728 0
8040 3730 0
8040 3718 0
8040 3718 3727 0
8040 3718 3728 0
8040 3718 3730 0
8040 3719 0
8040 3719 3727 0
8040 3719 3728 0
8040 3719 3730 0
c (((aux934 + aux937 + aux938)<=1)=tv=SATLiteral(8041))
-8041 3757 0
-8041 3751 3756 0
-8041 3752 0
-8041 3754 0
-8041 3742 3756 0
-8041 3742 3751 0
-8041 3742 3752 0
-8041 3742 3754 0
-8041 3743 0
-8041 3743 3751 0
-8041 3743 3752 0
-8041 3743 3754 0
8041 -3743 -3751 -3756 0
8041 -3742 -3752 -3756 0
8041 -3742 -3751 -3757 0
c ((1<=(aux934 + aux937 + aux938))=tv=SATLiteral(8042))
-8042 -3742 -3751 -3756 0
8042 3756 0
8042 3751 0
8042 3752 0
8042 3754 0
8042 3742 0
8042 3742 3751 0
8042 3742 3752 0
8042 3742 3754 0
8042 3743 0
8042 3743 3751 0
8042 3743 3752 0
8042 3743 3754 0
c (((aux940 + aux943 + aux944)<=1)=tv=SATLiteral(8043))
-8043 3781 0
-8043 3775 3780 0
-8043 3776 0
-8043 3778 0
-8043 3766 3780 0
-8043 3766 3775 0
-8043 3766 3776 0
-8043 3766 3778 0
-8043 3767 0
-8043 3767 3775 0
-8043 3767 3776 0
-8043 3767 3778 0
8043 -3767 -3775 -3780 0
8043 -3766 -3776 -3780 0
8043 -3766 -3775 -3781 0
c ((1<=(aux940 + aux943 + aux944))=tv=SATLiteral(8044))
-8044 -3766 -3775 -3780 0
8044 3780 0
8044 3775 0
8044 3776 0
8044 3778 0
8044 3766 0
8044 3766 3775 0
8044 3766 3776 0
8044 3766 3778 0
8044 3767 0
8044 3767 3775 0
8044 3767 3776 0
8044 3767 3778 0
c (((aux946 + aux949 + aux950)<=1)=tv=SATLiteral(8045))
-8045 3805 0
-8045 3799 3804 0
-8045 3800 0
-8045 3802 0
-8045 3790 3804 0
-8045 3790 3799 0
-8045 3790 3800 0
-8045 3790 3802 0
-8045 3791 0
-8045 3791 3799 0
-8045 3791 3800 0
-8045 3791 3802 0
8045 -3791 -3799 -3804 0
8045 -3790 -3800 -3804 0
8045 -3790 -3799 -3805 0
c ((1<=(aux946 + aux949 + aux950))=tv=SATLiteral(8046))
-8046 -3790 -3799 -3804 0
8046 3804 0
8046 3799 0
8046 3800 0
8046 3802 0
8046 3790 0
8046 3790 3799 0
8046 3790 3800 0
8046 3790 3802 0
8046 3791 0
8046 3791 3799 0
8046 3791 3800 0
8046 3791 3802 0
c (((aux952 + aux955 + aux956)<=1)=tv=SATLiteral(8047))
-8047 3829 0
-8047 3823 3828 0
-8047 3824 0
-8047 3826 0
-8047 3814 3828 0
-8047 3814 3823 0
-8047 3814 3824 0
-8047 3814 3826 0
-8047 3815 0
-8047 3815 3823 0
-8047 3815 3824 0
-8047 3815 3826 0
8047 -3815 -3823 -3828 0
8047 -3814 -3824 -3828 0
8047 -3814 -3823 -3829 0
c ((1<=(aux952 + aux955 + aux956))=tv=SATLiteral(8048))
-8048 -3814 -3823 -3828 0
8048 3828 0
8048 3823 0
8048 3824 0
8048 3826 0
8048 3814 0
8048 3814 3823 0
8048 3814 3824 0
8048 3814 3826 0
8048 3815 0
8048 3815 3823 0
8048 3815 3824 0
8048 3815 3826 0
c (((aux958 + aux961 + aux962)<=1)=tv=SATLiteral(8049))
-8049 3853 0
-8049 3847 3852 0
-8049 3848 0
-8049 3850 0
-8049 3838 3852 0
-8049 3838 3847 0
-8049 3838 3848 0
-8049 3838 3850 0
-8049 3839 0
-8049 3839 3847 0
-8049 3839 3848 0
-8049 3839 3850 0
8049 -3839 -3847 -3852 0
8049 -3838 -3848 -3852 0
8049 -3838 -3847 -3853 0
c ((1<=(aux958 + aux961 + aux962))=tv=SATLiteral(8050))
-8050 -3838 -3847 -3852 0
8050 3852 0
8050 3847 0
8050 3848 0
8050 3850 0
8050 3838 0
8050 3838 3847 0
8050 3838 3848 0
8050 3838 3850 0
8050 3839 0
8050 3839 3847 0
8050 3839 3848 0
8050 3839 3850 0
c (((aux964 + aux967 + aux968)<=1)=tv=SATLiteral(8051))
-8051 3877 0
-8051 3871 3876 0
-8051 3872 0
-8051 3874 0
-8051 3862 3876 0
-8051 3862 3871 0
-8051 3862 3872 0
-8051 3862 3874 0
-8051 3863 0
-8051 3863 3871 0
-8051 3863 3872 0
-8051 3863 3874 0
8051 -3863 -3871 -3876 0
8051 -3862 -3872 -3876 0
8051 -3862 -3871 -3877 0
c ((1<=(aux964 + aux967 + aux968))=tv=SATLiteral(8052))
-8052 -3862 -3871 -3876 0
8052 3876 0
8052 3871 0
8052 3872 0
8052 3874 0
8052 3862 0
8052 3862 3871 0
8052 3862 3872 0
8052 3862 3874 0
8052 3863 0
8052 3863 3871 0
8052 3863 3872 0
8052 3863 3874 0
c (((aux970 + aux973 + aux974)<=1)=tv=SATLiteral(8053))
-8053 3901 0
-8053 3895 3900 0
-8053 3896 0
-8053 3898 0
-8053 3886 3900 0
-8053 3886 3895 0
-8053 3886 3896 0
-8053 3886 3898 0
-8053 3887 0
-8053 3887 3895 0
-8053 3887 3896 0
-8053 3887 3898 0
8053 -3887 -3895 -3900 0
8053 -3886 -3896 -3900 0
8053 -3886 -3895 -3901 0
c ((1<=(aux970 + aux973 + aux974))=tv=SATLiteral(8054))
-8054 -3886 -3895 -3900 0
8054 3900 0
8054 3895 0
8054 3896 0
8054 3898 0
8054 3886 0
8054 3886 3895 0
8054 3886 3896 0
8054 3886 3898 0
8054 3887 0
8054 3887 3895 0
8054 3887 3896 0
8054 3887 3898 0
c (((aux976 + aux979 + aux980)<=1)=tv=SATLiteral(8055))
-8055 3925 0
-8055 3919 3924 0
-8055 3920 0
-8055 3922 0
-8055 3910 3924 0
-8055 3910 3919 0
-8055 3910 3920 0
-8055 3910 3922 0
-8055 3911 0
-8055 3911 3919 0
-8055 3911 3920 0
-8055 3911 3922 0
8055 -3911 -3919 -3924 0
8055 -3910 -3920 -3924 0
8055 -3910 -3919 -3925 0
c ((1<=(aux976 + aux979 + aux980))=tv=SATLiteral(8056))
-8056 -3910 -3919 -3924 0
8056 3924 0
8056 3919 0
8056 3920 0
8056 3922 0
8056 3910 0
8056 3910 3919 0
8056 3910 3920 0
8056 3910 3922 0
8056 3911 0
8056 3911 3919 0
8056 3911 3920 0
8056 3911 3922 0
c (((aux982 + aux985 + aux986)<=1)=tv=SATLiteral(8057))
-8057 3949 0
-8057 3943 3948 0
-8057 3944 0
-8057 3946 0
-8057 3934 3948 0
-8057 3934 3943 0
-8057 3934 3944 0
-8057 3934 3946 0
-8057 3935 0
-8057 3935 3943 0
-8057 3935 3944 0
-8057 3935 3946 0
8057 -3935 -3943 -3948 0
8057 -3934 -3944 -3948 0
8057 -3934 -3943 -3949 0
c ((1<=(aux982 + aux985 + aux986))=tv=SATLiteral(8058))
-8058 -3934 -3943 -3948 0
8058 3948 0
8058 3943 0
8058 3944 0
8058 3946 0
8058 3934 0
8058 3934 3943 0
8058 3934 3944 0
8058 3934 3946 0
8058 3935 0
8058 3935 3943 0
8058 3935 3944 0
8058 3935 3946 0
c (((aux988 + aux991 + aux992)<=1)=tv=SATLiteral(8059))
-8059 3973 0
-8059 3967 3972 0
-8059 3968 0
-8059 3970 0
-8059 3958 3972 0
-8059 3958 3967 0
-8059 3958 3968 0
-8059 3958 3970 0
-8059 3959 0
-8059 3959 3967 0
-8059 3959 3968 0
-8059 3959 3970 0
8059 -3959 -3967 -3972 0
8059 -3958 -3968 -3972 0
8059 -3958 -3967 -3973 0
c ((1<=(aux988 + aux991 + aux992))=tv=SATLiteral(8060))
-8060 -3958 -3967 -3972 0
8060 3972 0
8060 3967 0
8060 3968 0
8060 3970 0
8060 3958 0
8060 3958 3967 0
8060 3958 3968 0
8060 3958 3970 0
8060 3959 0
8060 3959 3967 0
8060 3959 3968 0
8060 3959 3970 0
c (((aux994 + aux997 + aux998)<=1)=tv=SATLiteral(8061))
-8061 3997 0
-8061 3991 3996 0
-8061 3992 0
-8061 3994 0
-8061 3982 3996 0
-8061 3982 3991 0
-8061 3982 3992 0
-8061 3982 3994 0
-8061 3983 0
-8061 3983 3991 0
-8061 3983 3992 0
-8061 3983 3994 0
8061 -3983 -3991 -3996 0
8061 -3982 -3992 -3996 0
8061 -3982 -3991 -3997 0
c ((1<=(aux994 + aux997 + aux998))=tv=SATLiteral(8062))
-8062 -3982 -3991 -3996 0
8062 3996 0
8062 3991 0
8062 3992 0
8062 3994 0
8062 3982 0
8062 3982 3991 0
8062 3982 3992 0
8062 3982 3994 0
8062 3983 0
8062 3983 3991 0
8062 3983 3992 0
8062 3983 3994 0
c (((aux1000 + aux1003 + aux1004)<=1)=tv=SATLiteral(8063))
-8063 4021 0
-8063 4015 4020 0
-8063 4016 0
-8063 4018 0
-8063 4006 4020 0
-8063 4006 4015 0
-8063 4006 4016 0
-8063 4006 4018 0
-8063 4007 0
-8063 4007 4015 0
-8063 4007 4016 0
-8063 4007 4018 0
8063 -4007 -4015 -4020 0
8063 -4006 -4016 -4020 0
8063 -4006 -4015 -4021 0
c ((1<=(aux1000 + aux1003 + aux1004))=tv=SATLiteral(8064))
-8064 -4006 -4015 -4020 0
8064 4020 0
8064 4015 0
8064 4016 0
8064 4018 0
8064 4006 0
8064 4006 4015 0
8064 4006 4016 0
8064 4006 4018 0
8064 4007 0
8064 4007 4015 0
8064 4007 4016 0
8064 4007 4018 0
c (((aux1006 + aux1009 + aux1010)<=1)=tv=SATLiteral(8065))
-8065 4045 0
-8065 4039 4044 0
-8065 4040 0
-8065 4042 0
-8065 4030 4044 0
-8065 4030 4039 0
-8065 4030 4040 0
-8065 4030 4042 0
-8065 4031 0
-8065 4031 4039 0
-8065 4031 4040 0
-8065 4031 4042 0
8065 -4031 -4039 -4044 0
8065 -4030 -4040 -4044 0
8065 -4030 -4039 -4045 0
c ((1<=(aux1006 + aux1009 + aux1010))=tv=SATLiteral(8066))
-8066 -4030 -4039 -4044 0
8066 4044 0
8066 4039 0
8066 4040 0
8066 4042 0
8066 4030 0
8066 4030 4039 0
8066 4030 4040 0
8066 4030 4042 0
8066 4031 0
8066 4031 4039 0
8066 4031 4040 0
8066 4031 4042 0
c (((aux1012 + aux1015 + aux1016)<=1)=tv=SATLiteral(8067))
-8067 4069 0
-8067 4063 4068 0
-8067 4064 0
-8067 4066 0
-8067 4054 4068 0
-8067 4054 4063 0
-8067 4054 4064 0
-8067 4054 4066 0
-8067 4055 0
-8067 4055 4063 0
-8067 4055 4064 0
-8067 4055 4066 0
8067 -4055 -4063 -4068 0
8067 -4054 -4064 -4068 0
8067 -4054 -4063 -4069 0
c ((1<=(aux1012 + aux1015 + aux1016))=tv=SATLiteral(8068))
-8068 -4054 -4063 -4068 0
8068 4068 0
8068 4063 0
8068 4064 0
8068 4066 0
8068 4054 0
8068 4054 4063 0
8068 4054 4064 0
8068 4054 4066 0
8068 4055 0
8068 4055 4063 0
8068 4055 4064 0
8068 4055 4066 0
c (((aux1018 + aux1021 + aux1022)<=1)=tv=SATLiteral(8069))
-8069 4093 0
-8069 4087 4092 0
-8069 4088 0
-8069 4090 0
-8069 4078 4092 0
-8069 4078 4087 0
-8069 4078 4088 0
-8069 4078 4090 0
-8069 4079 0
-8069 4079 4087 0
-8069 4079 4088 0
-8069 4079 4090 0
8069 -4079 -4087 -4092 0
8069 -4078 -4088 -4092 0
8069 -4078 -4087 -4093 0
c ((1<=(aux1018 + aux1021 + aux1022))=tv=SATLiteral(8070))
-8070 -4078 -4087 -4092 0
8070 4092 0
8070 4087 0
8070 4088 0
8070 4090 0
8070 4078 0
8070 4078 4087 0
8070 4078 4088 0
8070 4078 4090 0
8070 4079 0
8070 4079 4087 0
8070 4079 4088 0
8070 4079 4090 0
c (((aux1024 + aux1027 + aux1028)<=1)=tv=SATLiteral(8071))
-8071 4117 0
-8071 4111 4116 0
-8071 4112 0
-8071 4114 0
-8071 4102 4116 0
-8071 4102 4111 0
-8071 4102 4112 0
-8071 4102 4114 0
-8071 4103 0
-8071 4103 4111 0
-8071 4103 4112 0
-8071 4103 4114 0
8071 -4103 -4111 -4116 0
8071 -4102 -4112 -4116 0
8071 -4102 -4111 -4117 0
c ((1<=(aux1024 + aux1027 + aux1028))=tv=SATLiteral(8072))
-8072 -4102 -4111 -4116 0
8072 4116 0
8072 4111 0
8072 4112 0
8072 4114 0
8072 4102 0
8072 4102 4111 0
8072 4102 4112 0
8072 4102 4114 0
8072 4103 0
8072 4103 4111 0
8072 4103 4112 0
8072 4103 4114 0
c (((aux1030 + aux1033 + aux1034)<=1)=tv=SATLiteral(8073))
-8073 4141 0
-8073 4135 4140 0
-8073 4136 0
-8073 4138 0
-8073 4126 4140 0
-8073 4126 4135 0
-8073 4126 4136 0
-8073 4126 4138 0
-8073 4127 0
-8073 4127 4135 0
-8073 4127 4136 0
-8073 4127 4138 0
8073 -4127 -4135 -4140 0
8073 -4126 -4136 -4140 0
8073 -4126 -4135 -4141 0
c ((1<=(aux1030 + aux1033 + aux1034))=tv=SATLiteral(8074))
-8074 -4126 -4135 -4140 0
8074 4140 0
8074 4135 0
8074 4136 0
8074 4138 0
8074 4126 0
8074 4126 4135 0
8074 4126 4136 0
8074 4126 4138 0
8074 4127 0
8074 4127 4135 0
8074 4127 4136 0
8074 4127 4138 0
c (((aux1036 + aux1039 + aux1040)<=1)=tv=SATLiteral(8075))
-8075 4165 0
-8075 4159 4164 0
-8075 4160 0
-8075 4162 0
-8075 4150 4164 0
-8075 4150 4159 0
-8075 4150 4160 0
-8075 4150 4162 0
-8075 4151 0
-8075 4151 4159 0
-8075 4151 4160 0
-8075 4151 4162 0
8075 -4151 -4159 -4164 0
8075 -4150 -4160 -4164 0
8075 -4150 -4159 -4165 0
c ((1<=(aux1036 + aux1039 + aux1040))=tv=SATLiteral(8076))
-8076 -4150 -4159 -4164 0
8076 4164 0
8076 4159 0
8076 4160 0
8076 4162 0
8076 4150 0
8076 4150 4159 0
8076 4150 4160 0
8076 4150 4162 0
8076 4151 0
8076 4151 4159 0
8076 4151 4160 0
8076 4151 4162 0
c (((aux1042 + aux1045 + aux1046)<=1)=tv=SATLiteral(8077))
-8077 4189 0
-8077 4183 4188 0
-8077 4184 0
-8077 4186 0
-8077 4174 4188 0
-8077 4174 4183 0
-8077 4174 4184 0
-8077 4174 4186 0
-8077 4175 0
-8077 4175 4183 0
-8077 4175 4184 0
-8077 4175 4186 0
8077 -4175 -4183 -4188 0
8077 -4174 -4184 -4188 0
8077 -4174 -4183 -4189 0
c ((1<=(aux1042 + aux1045 + aux1046))=tv=SATLiteral(8078))
-8078 -4174 -4183 -4188 0
8078 4188 0
8078 4183 0
8078 4184 0
8078 4186 0
8078 4174 0
8078 4174 4183 0
8078 4174 4184 0
8078 4174 4186 0
8078 4175 0
8078 4175 4183 0
8078 4175 4184 0
8078 4175 4186 0
c (((aux1048 + aux1051 + aux1052)<=1)=tv=SATLiteral(8079))
-8079 4213 0
-8079 4207 4212 0
-8079 4208 0
-8079 4210 0
-8079 4198 4212 0
-8079 4198 4207 0
-8079 4198 4208 0
-8079 4198 4210 0
-8079 4199 0
-8079 4199 4207 0
-8079 4199 4208 0
-8079 4199 4210 0
8079 -4199 -4207 -4212 0
8079 -4198 -4208 -4212 0
8079 -4198 -4207 -4213 0
c ((1<=(aux1048 + aux1051 + aux1052))=tv=SATLiteral(8080))
-8080 -4198 -4207 -4212 0
8080 4212 0
8080 4207 0
8080 4208 0
8080 4210 0
8080 4198 0
8080 4198 4207 0
8080 4198 4208 0
8080 4198 4210 0
8080 4199 0
8080 4199 4207 0
8080 4199 4208 0
8080 4199 4210 0
c (((aux1054 + aux1057 + aux1058)<=1)=tv=SATLiteral(8081))
-8081 4237 0
-8081 4231 4236 0
-8081 4232 0
-8081 4234 0
-8081 4222 4236 0
-8081 4222 4231 0
-8081 4222 4232 0
-8081 4222 4234 0
-8081 4223 0
-8081 4223 4231 0
-8081 4223 4232 0
-8081 4223 4234 0
8081 -4223 -4231 -4236 0
8081 -4222 -4232 -4236 0
8081 -4222 -4231 -4237 0
c ((1<=(aux1054 + aux1057 + aux1058))=tv=SATLiteral(8082))
-8082 -4222 -4231 -4236 0
8082 4236 0
8082 4231 0
8082 4232 0
8082 4234 0
8082 4222 0
8082 4222 4231 0
8082 4222 4232 0
8082 4222 4234 0
8082 4223 0
8082 4223 4231 0
8082 4223 4232 0
8082 4223 4234 0
c (((aux1060 + aux1063 + aux1064)<=1)=tv=SATLiteral(8083))
-8083 4261 0
-8083 4255 4260 0
-8083 4256 0
-8083 4258 0
-8083 4246 4260 0
-8083 4246 4255 0
-8083 4246 4256 0
-8083 4246 4258 0
-8083 4247 0
-8083 4247 4255 0
-8083 4247 4256 0
-8083 4247 4258 0
8083 -4247 -4255 -4260 0
8083 -4246 -4256 -4260 0
8083 -4246 -4255 -4261 0
c ((1<=(aux1060 + aux1063 + aux1064))=tv=SATLiteral(8084))
-8084 -4246 -4255 -4260 0
8084 4260 0
8084 4255 0
8084 4256 0
8084 4258 0
8084 4246 0
8084 4246 4255 0
8084 4246 4256 0
8084 4246 4258 0
8084 4247 0
8084 4247 4255 0
8084 4247 4256 0
8084 4247 4258 0
c (((aux1066 + aux1069 + aux1070)<=1)=tv=SATLiteral(8085))
-8085 4285 0
-8085 4279 4284 0
-8085 4280 0
-8085 4282 0
-8085 4270 4284 0
-8085 4270 4279 0
-8085 4270 4280 0
-8085 4270 4282 0
-8085 4271 0
-8085 4271 4279 0
-8085 4271 4280 0
-8085 4271 4282 0
8085 -4271 -4279 -4284 0
8085 -4270 -4280 -4284 0
8085 -4270 -4279 -4285 0
c ((1<=(aux1066 + aux1069 + aux1070))=tv=SATLiteral(8086))
-8086 -4270 -4279 -4284 0
8086 4284 0
8086 4279 0
8086 4280 0
8086 4282 0
8086 4270 0
8086 4270 4279 0
8086 4270 4280 0
8086 4270 4282 0
8086 4271 0
8086 4271 4279 0
8086 4271 4280 0
8086 4271 4282 0
c (((aux1072 + aux1075 + aux1076)<=1)=tv=SATLiteral(8087))
-8087 4309 0
-8087 4303 4308 0
-8087 4304 0
-8087 4306 0
-8087 4294 4308 0
-8087 4294 4303 0
-8087 4294 4304 0
-8087 4294 4306 0
-8087 4295 0
-8087 4295 4303 0
-8087 4295 4304 0
-8087 4295 4306 0
8087 -4295 -4303 -4308 0
8087 -4294 -4304 -4308 0
8087 -4294 -4303 -4309 0
c ((1<=(aux1072 + aux1075 + aux1076))=tv=SATLiteral(8088))
-8088 -4294 -4303 -4308 0
8088 4308 0
8088 4303 0
8088 4304 0
8088 4306 0
8088 4294 0
8088 4294 4303 0
8088 4294 4304 0
8088 4294 4306 0
8088 4295 0
8088 4295 4303 0
8088 4295 4304 0
8088 4295 4306 0
c (((aux1078 + aux1081 + aux1082)<=1)=tv=SATLiteral(8089))
-8089 4333 0
-8089 4327 4332 0
-8089 4328 0
-8089 4330 0
-8089 4318 4332 0
-8089 4318 4327 0
-8089 4318 4328 0
-8089 4318 4330 0
-8089 4319 0
-8089 4319 4327 0
-8089 4319 4328 0
-8089 4319 4330 0
8089 -4319 -4327 -4332 0
8089 -4318 -4328 -4332 0
8089 -4318 -4327 -4333 0
c ((1<=(aux1078 + aux1081 + aux1082))=tv=SATLiteral(8090))
-8090 -4318 -4327 -4332 0
8090 4332 0
8090 4327 0
8090 4328 0
8090 4330 0
8090 4318 0
8090 4318 4327 0
8090 4318 4328 0
8090 4318 4330 0
8090 4319 0
8090 4319 4327 0
8090 4319 4328 0
8090 4319 4330 0
c (((aux1084 + aux1087 + aux1088)<=1)=tv=SATLiteral(8091))
-8091 4357 0
-8091 4351 4356 0
-8091 4352 0
-8091 4354 0
-8091 4342 4356 0
-8091 4342 4351 0
-8091 4342 4352 0
-8091 4342 4354 0
-8091 4343 0
-8091 4343 4351 0
-8091 4343 4352 0
-8091 4343 4354 0
8091 -4343 -4351 -4356 0
8091 -4342 -4352 -4356 0
8091 -4342 -4351 -4357 0
c ((1<=(aux1084 + aux1087 + aux1088))=tv=SATLiteral(8092))
-8092 -4342 -4351 -4356 0
8092 4356 0
8092 4351 0
8092 4352 0
8092 4354 0
8092 4342 0
8092 4342 4351 0
8092 4342 4352 0
8092 4342 4354 0
8092 4343 0
8092 4343 4351 0
8092 4343 4352 0
8092 4343 4354 0
c (((aux1090 + aux1093 + aux1094)<=1)=tv=SATLiteral(8093))
-8093 4381 0
-8093 4375 4380 0
-8093 4376 0
-8093 4378 0
-8093 4366 4380 0
-8093 4366 4375 0
-8093 4366 4376 0
-8093 4366 4378 0
-8093 4367 0
-8093 4367 4375 0
-8093 4367 4376 0
-8093 4367 4378 0
8093 -4367 -4375 -4380 0
8093 -4366 -4376 -4380 0
8093 -4366 -4375 -4381 0
c ((1<=(aux1090 + aux1093 + aux1094))=tv=SATLiteral(8094))
-8094 -4366 -4375 -4380 0
8094 4380 0
8094 4375 0
8094 4376 0
8094 4378 0
8094 4366 0
8094 4366 4375 0
8094 4366 4376 0
8094 4366 4378 0
8094 4367 0
8094 4367 4375 0
8094 4367 4376 0
8094 4367 4378 0
c (((aux1096 + aux1099 + aux1100)<=1)=tv=SATLiteral(8095))
-8095 4405 0
-8095 4399 4404 0
-8095 4400 0
-8095 4402 0
-8095 4390 4404 0
-8095 4390 4399 0
-8095 4390 4400 0
-8095 4390 4402 0
-8095 4391 0
-8095 4391 4399 0
-8095 4391 4400 0
-8095 4391 4402 0
8095 -4391 -4399 -4404 0
8095 -4390 -4400 -4404 0
8095 -4390 -4399 -4405 0
c ((1<=(aux1096 + aux1099 + aux1100))=tv=SATLiteral(8096))
-8096 -4390 -4399 -4404 0
8096 4404 0
8096 4399 0
8096 4400 0
8096 4402 0
8096 4390 0
8096 4390 4399 0
8096 4390 4400 0
8096 4390 4402 0
8096 4391 0
8096 4391 4399 0
8096 4391 4400 0
8096 4391 4402 0
c (((aux1102 + aux1105 + aux1106)<=1)=tv=SATLiteral(8097))
-8097 4429 0
-8097 4423 4428 0
-8097 4424 0
-8097 4426 0
-8097 4414 4428 0
-8097 4414 4423 0
-8097 4414 4424 0
-8097 4414 4426 0
-8097 4415 0
-8097 4415 4423 0
-8097 4415 4424 0
-8097 4415 4426 0
8097 -4415 -4423 -4428 0
8097 -4414 -4424 -4428 0
8097 -4414 -4423 -4429 0
c ((1<=(aux1102 + aux1105 + aux1106))=tv=SATLiteral(8098))
-8098 -4414 -4423 -4428 0
8098 4428 0
8098 4423 0
8098 4424 0
8098 4426 0
8098 4414 0
8098 4414 4423 0
8098 4414 4424 0
8098 4414 4426 0
8098 4415 0
8098 4415 4423 0
8098 4415 4424 0
8098 4415 4426 0
c (((aux1108 + aux1111 + aux1112)<=1)=tv=SATLiteral(8099))
-8099 4453 0
-8099 4447 4452 0
-8099 4448 0
-8099 4450 0
-8099 4438 4452 0
-8099 4438 4447 0
-8099 4438 4448 0
-8099 4438 4450 0
-8099 4439 0
-8099 4439 4447 0
-8099 4439 4448 0
-8099 4439 4450 0
8099 -4439 -4447 -4452 0
8099 -4438 -4448 -4452 0
8099 -4438 -4447 -4453 0
c ((1<=(aux1108 + aux1111 + aux1112))=tv=SATLiteral(8100))
-8100 -4438 -4447 -4452 0
8100 4452 0
8100 4447 0
8100 4448 0
8100 4450 0
8100 4438 0
8100 4438 4447 0
8100 4438 4448 0
8100 4438 4450 0
8100 4439 0
8100 4439 4447 0
8100 4439 4448 0
8100 4439 4450 0
c (((aux1114 + aux1117 + aux1118)<=1)=tv=SATLiteral(8101))
-8101 4477 0
-8101 4471 4476 0
-8101 4472 0
-8101 4474 0
-8101 4462 4476 0
-8101 4462 4471 0
-8101 4462 4472 0
-8101 4462 4474 0
-8101 4463 0
-8101 4463 4471 0
-8101 4463 4472 0
-8101 4463 4474 0
8101 -4463 -4471 -4476 0
8101 -4462 -4472 -4476 0
8101 -4462 -4471 -4477 0
c ((1<=(aux1114 + aux1117 + aux1118))=tv=SATLiteral(8102))
-8102 -4462 -4471 -4476 0
8102 4476 0
8102 4471 0
8102 4472 0
8102 4474 0
8102 4462 0
8102 4462 4471 0
8102 4462 4472 0
8102 4462 4474 0
8102 4463 0
8102 4463 4471 0
8102 4463 4472 0
8102 4463 4474 0
c (((aux1120 + aux1123 + aux1124)<=1)=tv=SATLiteral(8103))
-8103 4501 0
-8103 4495 4500 0
-8103 4496 0
-8103 4498 0
-8103 4486 4500 0
-8103 4486 4495 0
-8103 4486 4496 0
-8103 4486 4498 0
-8103 4487 0
-8103 4487 4495 0
-8103 4487 4496 0
-8103 4487 4498 0
8103 -4487 -4495 -4500 0
8103 -4486 -4496 -4500 0
8103 -4486 -4495 -4501 0
c ((1<=(aux1120 + aux1123 + aux1124))=tv=SATLiteral(8104))
-8104 -4486 -4495 -4500 0
8104 4500 0
8104 4495 0
8104 4496 0
8104 4498 0
8104 4486 0
8104 4486 4495 0
8104 4486 4496 0
8104 4486 4498 0
8104 4487 0
8104 4487 4495 0
8104 4487 4496 0
8104 4487 4498 0
c (((aux1126 + aux1129 + aux1130)<=1)=tv=SATLiteral(8105))
-8105 4525 0
-8105 4519 4524 0
-8105 4520 0
-8105 4522 0
-8105 4510 4524 0
-8105 4510 4519 0
-8105 4510 4520 0
-8105 4510 4522 0
-8105 4511 0
-8105 4511 4519 0
-8105 4511 4520 0
-8105 4511 4522 0
8105 -4511 -4519 -4524 0
8105 -4510 -4520 -4524 0
8105 -4510 -4519 -4525 0
c ((1<=(aux1126 + aux1129 + aux1130))=tv=SATLiteral(8106))
-8106 -4510 -4519 -4524 0
8106 4524 0
8106 4519 0
8106 4520 0
8106 4522 0
8106 4510 0
8106 4510 4519 0
8106 4510 4520 0
8106 4510 4522 0
8106 4511 0
8106 4511 4519 0
8106 4511 4520 0
8106 4511 4522 0
c (((aux1132 + aux1135 + aux1136)<=1)=tv=SATLiteral(8107))
-8107 4549 0
-8107 4543 4548 0
-8107 4544 0
-8107 4546 0
-8107 4534 4548 0
-8107 4534 4543 0
-8107 4534 4544 0
-8107 4534 4546 0
-8107 4535 0
-8107 4535 4543 0
-8107 4535 4544 0
-8107 4535 4546 0
8107 -4535 -4543 -4548 0
8107 -4534 -4544 -4548 0
8107 -4534 -4543 -4549 0
c ((1<=(aux1132 + aux1135 + aux1136))=tv=SATLiteral(8108))
-8108 -4534 -4543 -4548 0
8108 4548 0
8108 4543 0
8108 4544 0
8108 4546 0
8108 4534 0
8108 4534 4543 0
8108 4534 4544 0
8108 4534 4546 0
8108 4535 0
8108 4535 4543 0
8108 4535 4544 0
8108 4535 4546 0
c (((aux1138 + aux1141 + aux1142)<=1)=tv=SATLiteral(8109))
-8109 4573 0
-8109 4567 4572 0
-8109 4568 0
-8109 4570 0
-8109 4558 4572 0
-8109 4558 4567 0
-8109 4558 4568 0
-8109 4558 4570 0
-8109 4559 0
-8109 4559 4567 0
-8109 4559 4568 0
-8109 4559 4570 0
8109 -4559 -4567 -4572 0
8109 -4558 -4568 -4572 0
8109 -4558 -4567 -4573 0
c ((1<=(aux1138 + aux1141 + aux1142))=tv=SATLiteral(8110))
-8110 -4558 -4567 -4572 0
8110 4572 0
8110 4567 0
8110 4568 0
8110 4570 0
8110 4558 0
8110 4558 4567 0
8110 4558 4568 0
8110 4558 4570 0
8110 4559 0
8110 4559 4567 0
8110 4559 4568 0
8110 4559 4570 0
c (((aux1144 + aux1147 + aux1148)<=1)=tv=SATLiteral(8111))
-8111 4597 0
-8111 4591 4596 0
-8111 4592 0
-8111 4594 0
-8111 4582 4596 0
-8111 4582 4591 0
-8111 4582 4592 0
-8111 4582 4594 0
-8111 4583 0
-8111 4583 4591 0
-8111 4583 4592 0
-8111 4583 4594 0
8111 -4583 -4591 -4596 0
8111 -4582 -4592 -4596 0
8111 -4582 -4591 -4597 0
c ((1<=(aux1144 + aux1147 + aux1148))=tv=SATLiteral(8112))
-8112 -4582 -4591 -4596 0
8112 4596 0
8112 4591 0
8112 4592 0
8112 4594 0
8112 4582 0
8112 4582 4591 0
8112 4582 4592 0
8112 4582 4594 0
8112 4583 0
8112 4583 4591 0
8112 4583 4592 0
8112 4583 4594 0
c (((aux1150 + aux1153 + aux1154)<=1)=tv=SATLiteral(8113))
-8113 4621 0
-8113 4615 4620 0
-8113 4616 0
-8113 4618 0
-8113 4606 4620 0
-8113 4606 4615 0
-8113 4606 4616 0
-8113 4606 4618 0
-8113 4607 0
-8113 4607 4615 0
-8113 4607 4616 0
-8113 4607 4618 0
8113 -4607 -4615 -4620 0
8113 -4606 -4616 -4620 0
8113 -4606 -4615 -4621 0
c ((1<=(aux1150 + aux1153 + aux1154))=tv=SATLiteral(8114))
-8114 -4606 -4615 -4620 0
8114 4620 0
8114 4615 0
8114 4616 0
8114 4618 0
8114 4606 0
8114 4606 4615 0
8114 4606 4616 0
8114 4606 4618 0
8114 4607 0
8114 4607 4615 0
8114 4607 4616 0
8114 4607 4618 0
c (((aux1156 + aux1159 + aux1160)<=1)=tv=SATLiteral(8115))
-8115 4645 0
-8115 4639 4644 0
-8115 4640 0
-8115 4642 0
-8115 4630 4644 0
-8115 4630 4639 0
-8115 4630 4640 0
-8115 4630 4642 0
-8115 4631 0
-8115 4631 4639 0
-8115 4631 4640 0
-8115 4631 4642 0
8115 -4631 -4639 -4644 0
8115 -4630 -4640 -4644 0
8115 -4630 -4639 -4645 0
c ((1<=(aux1156 + aux1159 + aux1160))=tv=SATLiteral(8116))
-8116 -4630 -4639 -4644 0
8116 4644 0
8116 4639 0
8116 4640 0
8116 4642 0
8116 4630 0
8116 4630 4639 0
8116 4630 4640 0
8116 4630 4642 0
8116 4631 0
8116 4631 4639 0
8116 4631 4640 0
8116 4631 4642 0
c (((aux1162 + aux1165 + aux1166)<=1)=tv=SATLiteral(8117))
-8117 4669 0
-8117 4663 4668 0
-8117 4664 0
-8117 4666 0
-8117 4654 4668 0
-8117 4654 4663 0
-8117 4654 4664 0
-8117 4654 4666 0
-8117 4655 0
-8117 4655 4663 0
-8117 4655 4664 0
-8117 4655 4666 0
8117 -4655 -4663 -4668 0
8117 -4654 -4664 -4668 0
8117 -4654 -4663 -4669 0
c ((1<=(aux1162 + aux1165 + aux1166))=tv=SATLiteral(8118))
-8118 -4654 -4663 -4668 0
8118 4668 0
8118 4663 0
8118 4664 0
8118 4666 0
8118 4654 0
8118 4654 4663 0
8118 4654 4664 0
8118 4654 4666 0
8118 4655 0
8118 4655 4663 0
8118 4655 4664 0
8118 4655 4666 0
c (((aux1168 + aux1171 + aux1172)<=1)=tv=SATLiteral(8119))
-8119 4693 0
-8119 4687 4692 0
-8119 4688 0
-8119 4690 0
-8119 4678 4692 0
-8119 4678 4687 0
-8119 4678 4688 0
-8119 4678 4690 0
-8119 4679 0
-8119 4679 4687 0
-8119 4679 4688 0
-8119 4679 4690 0
8119 -4679 -4687 -4692 0
8119 -4678 -4688 -4692 0
8119 -4678 -4687 -4693 0
c ((1<=(aux1168 + aux1171 + aux1172))=tv=SATLiteral(8120))
-8120 -4678 -4687 -4692 0
8120 4692 0
8120 4687 0
8120 4688 0
8120 4690 0
8120 4678 0
8120 4678 4687 0
8120 4678 4688 0
8120 4678 4690 0
8120 4679 0
8120 4679 4687 0
8120 4679 4688 0
8120 4679 4690 0
c (((aux1174 + aux1177 + aux1178)<=1)=tv=SATLiteral(8121))
-8121 4717 0
-8121 4711 4716 0
-8121 4712 0
-8121 4714 0
-8121 4702 4716 0
-8121 4702 4711 0
-8121 4702 4712 0
-8121 4702 4714 0
-8121 4703 0
-8121 4703 4711 0
-8121 4703 4712 0
-8121 4703 4714 0
8121 -4703 -4711 -4716 0
8121 -4702 -4712 -4716 0
8121 -4702 -4711 -4717 0
c ((1<=(aux1174 + aux1177 + aux1178))=tv=SATLiteral(8122))
-8122 -4702 -4711 -4716 0
8122 4716 0
8122 4711 0
8122 4712 0
8122 4714 0
8122 4702 0
8122 4702 4711 0
8122 4702 4712 0
8122 4702 4714 0
8122 4703 0
8122 4703 4711 0
8122 4703 4712 0
8122 4703 4714 0
c (((aux1180 + aux1183 + aux1184)<=1)=tv=SATLiteral(8123))
-8123 4741 0
-8123 4735 4740 0
-8123 4736 0
-8123 4738 0
-8123 4726 4740 0
-8123 4726 4735 0
-8123 4726 4736 0
-8123 4726 4738 0
-8123 4727 0
-8123 4727 4735 0
-8123 4727 4736 0
-8123 4727 4738 0
8123 -4727 -4735 -4740 0
8123 -4726 -4736 -4740 0
8123 -4726 -4735 -4741 0
c ((1<=(aux1180 + aux1183 + aux1184))=tv=SATLiteral(8124))
-8124 -4726 -4735 -4740 0
8124 4740 0
8124 4735 0
8124 4736 0
8124 4738 0
8124 4726 0
8124 4726 4735 0
8124 4726 4736 0
8124 4726 4738 0
8124 4727 0
8124 4727 4735 0
8124 4727 4736 0
8124 4727 4738 0
c (((aux1186 + aux1189 + aux1190)<=1)=tv=SATLiteral(8125))
-8125 4765 0
-8125 4759 4764 0
-8125 4760 0
-8125 4762 0
-8125 4750 4764 0
-8125 4750 4759 0
-8125 4750 4760 0
-8125 4750 4762 0
-8125 4751 0
-8125 4751 4759 0
-8125 4751 4760 0
-8125 4751 4762 0
8125 -4751 -4759 -4764 0
8125 -4750 -4760 -4764 0
8125 -4750 -4759 -4765 0
c ((1<=(aux1186 + aux1189 + aux1190))=tv=SATLiteral(8126))
-8126 -4750 -4759 -4764 0
8126 4764 0
8126 4759 0
8126 4760 0
8126 4762 0
8126 4750 0
8126 4750 4759 0
8126 4750 4760 0
8126 4750 4762 0
8126 4751 0
8126 4751 4759 0
8126 4751 4760 0
8126 4751 4762 0
c (((aux1192 + aux1195 + aux1196)<=1)=tv=SATLiteral(8127))
-8127 4789 0
-8127 4783 4788 0
-8127 4784 0
-8127 4786 0
-8127 4774 4788 0
-8127 4774 4783 0
-8127 4774 4784 0
-8127 4774 4786 0
-8127 4775 0
-8127 4775 4783 0
-8127 4775 4784 0
-8127 4775 4786 0
8127 -4775 -4783 -4788 0
8127 -4774 -4784 -4788 0
8127 -4774 -4783 -4789 0
c ((1<=(aux1192 + aux1195 + aux1196))=tv=SATLiteral(8128))
-8128 -4774 -4783 -4788 0
8128 4788 0
8128 4783 0
8128 4784 0
8128 4786 0
8128 4774 0
8128 4774 4783 0
8128 4774 4784 0
8128 4774 4786 0
8128 4775 0
8128 4775 4783 0
8128 4775 4784 0
8128 4775 4786 0
c (((aux1198 + aux1201 + aux1202)<=1)=tv=SATLiteral(8129))
-8129 4813 0
-8129 4807 4812 0
-8129 4808 0
-8129 4810 0
-8129 4798 4812 0
-8129 4798 4807 0
-8129 4798 4808 0
-8129 4798 4810 0
-8129 4799 0
-8129 4799 4807 0
-8129 4799 4808 0
-8129 4799 4810 0
8129 -4799 -4807 -4812 0
8129 -4798 -4808 -4812 0
8129 -4798 -4807 -4813 0
c ((1<=(aux1198 + aux1201 + aux1202))=tv=SATLiteral(8130))
-8130 -4798 -4807 -4812 0
8130 4812 0
8130 4807 0
8130 4808 0
8130 4810 0
8130 4798 0
8130 4798 4807 0
8130 4798 4808 0
8130 4798 4810 0
8130 4799 0
8130 4799 4807 0
8130 4799 4808 0
8130 4799 4810 0
c (((aux1204 + aux1207 + aux1208)<=1)=tv=SATLiteral(8131))
-8131 4837 0
-8131 4831 4836 0
-8131 4832 0
-8131 4834 0
-8131 4822 4836 0
-8131 4822 4831 0
-8131 4822 4832 0
-8131 4822 4834 0
-8131 4823 0
-8131 4823 4831 0
-8131 4823 4832 0
-8131 4823 4834 0
8131 -4823 -4831 -4836 0
8131 -4822 -4832 -4836 0
8131 -4822 -4831 -4837 0
c ((1<=(aux1204 + aux1207 + aux1208))=tv=SATLiteral(8132))
-8132 -4822 -4831 -4836 0
8132 4836 0
8132 4831 0
8132 4832 0
8132 4834 0
8132 4822 0
8132 4822 4831 0
8132 4822 4832 0
8132 4822 4834 0
8132 4823 0
8132 4823 4831 0
8132 4823 4832 0
8132 4823 4834 0
c (((aux1210 + aux1213 + aux1214)<=1)=tv=SATLiteral(8133))
-8133 4861 0
-8133 4855 4860 0
-8133 4856 0
-8133 4858 0
-8133 4846 4860 0
-8133 4846 4855 0
-8133 4846 4856 0
-8133 4846 4858 0
-8133 4847 0
-8133 4847 4855 0
-8133 4847 4856 0
-8133 4847 4858 0
8133 -4847 -4855 -4860 0
8133 -4846 -4856 -4860 0
8133 -4846 -4855 -4861 0
c ((1<=(aux1210 + aux1213 + aux1214))=tv=SATLiteral(8134))
-8134 -4846 -4855 -4860 0
8134 4860 0
8134 4855 0
8134 4856 0
8134 4858 0
8134 4846 0
8134 4846 4855 0
8134 4846 4856 0
8134 4846 4858 0
8134 4847 0
8134 4847 4855 0
8134 4847 4856 0
8134 4847 4858 0
c (((aux1216 + aux1219 + aux1220)<=1)=tv=SATLiteral(8135))
-8135 4885 0
-8135 4879 4884 0
-8135 4880 0
-8135 4882 0
-8135 4870 4884 0
-8135 4870 4879 0
-8135 4870 4880 0
-8135 4870 4882 0
-8135 4871 0
-8135 4871 4879 0
-8135 4871 4880 0
-8135 4871 4882 0
8135 -4871 -4879 -4884 0
8135 -4870 -4880 -4884 0
8135 -4870 -4879 -4885 0
c ((1<=(aux1216 + aux1219 + aux1220))=tv=SATLiteral(8136))
-8136 -4870 -4879 -4884 0
8136 4884 0
8136 4879 0
8136 4880 0
8136 4882 0
8136 4870 0
8136 4870 4879 0
8136 4870 4880 0
8136 4870 4882 0
8136 4871 0
8136 4871 4879 0
8136 4871 4880 0
8136 4871 4882 0
c (((aux1222 + aux1225 + aux1226)<=1)=tv=SATLiteral(8137))
-8137 4909 0
-8137 4903 4908 0
-8137 4904 0
-8137 4906 0
-8137 4894 4908 0
-8137 4894 4903 0
-8137 4894 4904 0
-8137 4894 4906 0
-8137 4895 0
-8137 4895 4903 0
-8137 4895 4904 0
-8137 4895 4906 0
8137 -4895 -4903 -4908 0
8137 -4894 -4904 -4908 0
8137 -4894 -4903 -4909 0
c ((1<=(aux1222 + aux1225 + aux1226))=tv=SATLiteral(8138))
-8138 -4894 -4903 -4908 0
8138 4908 0
8138 4903 0
8138 4904 0
8138 4906 0
8138 4894 0
8138 4894 4903 0
8138 4894 4904 0
8138 4894 4906 0
8138 4895 0
8138 4895 4903 0
8138 4895 4904 0
8138 4895 4906 0
c (((aux1228 + aux1231 + aux1232)<=1)=tv=SATLiteral(8139))
-8139 4933 0
-8139 4927 4932 0
-8139 4928 0
-8139 4930 0
-8139 4918 4932 0
-8139 4918 4927 0
-8139 4918 4928 0
-8139 4918 4930 0
-8139 4919 0
-8139 4919 4927 0
-8139 4919 4928 0
-8139 4919 4930 0
8139 -4919 -4927 -4932 0
8139 -4918 -4928 -4932 0
8139 -4918 -4927 -4933 0
c ((1<=(aux1228 + aux1231 + aux1232))=tv=SATLiteral(8140))
-8140 -4918 -4927 -4932 0
8140 4932 0
8140 4927 0
8140 4928 0
8140 4930 0
8140 4918 0
8140 4918 4927 0
8140 4918 4928 0
8140 4918 4930 0
8140 4919 0
8140 4919 4927 0
8140 4919 4928 0
8140 4919 4930 0
c (((aux1234 + aux1237 + aux1238)<=1)=tv=SATLiteral(8141))
-8141 4957 0
-8141 4951 4956 0
-8141 4952 0
-8141 4954 0
-8141 4942 4956 0
-8141 4942 4951 0
-8141 4942 4952 0
-8141 4942 4954 0
-8141 4943 0
-8141 4943 4951 0
-8141 4943 4952 0
-8141 4943 4954 0
8141 -4943 -4951 -4956 0
8141 -4942 -4952 -4956 0
8141 -4942 -4951 -4957 0
c ((1<=(aux1234 + aux1237 + aux1238))=tv=SATLiteral(8142))
-8142 -4942 -4951 -4956 0
8142 4956 0
8142 4951 0
8142 4952 0
8142 4954 0
8142 4942 0
8142 4942 4951 0
8142 4942 4952 0
8142 4942 4954 0
8142 4943 0
8142 4943 4951 0
8142 4943 4952 0
8142 4943 4954 0
c (((aux1240 + aux1243 + aux1244)<=1)=tv=SATLiteral(8143))
-8143 4981 0
-8143 4975 4980 0
-8143 4976 0
-8143 4978 0
-8143 4966 4980 0
-8143 4966 4975 0
-8143 4966 4976 0
-8143 4966 4978 0
-8143 4967 0
-8143 4967 4975 0
-8143 4967 4976 0
-8143 4967 4978 0
8143 -4967 -4975 -4980 0
8143 -4966 -4976 -4980 0
8143 -4966 -4975 -4981 0
c ((1<=(aux1240 + aux1243 + aux1244))=tv=SATLiteral(8144))
-8144 -4966 -4975 -4980 0
8144 4980 0
8144 4975 0
8144 4976 0
8144 4978 0
8144 4966 0
8144 4966 4975 0
8144 4966 4976 0
8144 4966 4978 0
8144 4967 0
8144 4967 4975 0
8144 4967 4976 0
8144 4967 4978 0
c (((aux1246 + aux1249 + aux1250)<=1)=tv=SATLiteral(8145))
-8145 5005 0
-8145 4999 5004 0
-8145 5000 0
-8145 5002 0
-8145 4990 5004 0
-8145 4990 4999 0
-8145 4990 5000 0
-8145 4990 5002 0
-8145 4991 0
-8145 4991 4999 0
-8145 4991 5000 0
-8145 4991 5002 0
8145 -4991 -4999 -5004 0
8145 -4990 -5000 -5004 0
8145 -4990 -4999 -5005 0
c ((1<=(aux1246 + aux1249 + aux1250))=tv=SATLiteral(8146))
-8146 -4990 -4999 -5004 0
8146 5004 0
8146 4999 0
8146 5000 0
8146 5002 0
8146 4990 0
8146 4990 4999 0
8146 4990 5000 0
8146 4990 5002 0
8146 4991 0
8146 4991 4999 0
8146 4991 5000 0
8146 4991 5002 0
c (((aux1252 + aux1255 + aux1256)<=1)=tv=SATLiteral(8147))
-8147 5029 0
-8147 5023 5028 0
-8147 5024 0
-8147 5026 0
-8147 5014 5028 0
-8147 5014 5023 0
-8147 5014 5024 0
-8147 5014 5026 0
-8147 5015 0
-8147 5015 5023 0
-8147 5015 5024 0
-8147 5015 5026 0
8147 -5015 -5023 -5028 0
8147 -5014 -5024 -5028 0
8147 -5014 -5023 -5029 0
c ((1<=(aux1252 + aux1255 + aux1256))=tv=SATLiteral(8148))
-8148 -5014 -5023 -5028 0
8148 5028 0
8148 5023 0
8148 5024 0
8148 5026 0
8148 5014 0
8148 5014 5023 0
8148 5014 5024 0
8148 5014 5026 0
8148 5015 0
8148 5015 5023 0
8148 5015 5024 0
8148 5015 5026 0
c (((aux1258 + aux1261 + aux1262)<=1)=tv=SATLiteral(8149))
-8149 5053 0
-8149 5047 5052 0
-8149 5048 0
-8149 5050 0
-8149 5038 5052 0
-8149 5038 5047 0
-8149 5038 5048 0
-8149 5038 5050 0
-8149 5039 0
-8149 5039 5047 0
-8149 5039 5048 0
-8149 5039 5050 0
8149 -5039 -5047 -5052 0
8149 -5038 -5048 -5052 0
8149 -5038 -5047 -5053 0
c ((1<=(aux1258 + aux1261 + aux1262))=tv=SATLiteral(8150))
-8150 -5038 -5047 -5052 0
8150 5052 0
8150 5047 0
8150 5048 0
8150 5050 0
8150 5038 0
8150 5038 5047 0
8150 5038 5048 0
8150 5038 5050 0
8150 5039 0
8150 5039 5047 0
8150 5039 5048 0
8150 5039 5050 0
c (((aux1264 + aux1267 + aux1268)<=1)=tv=SATLiteral(8151))
-8151 5077 0
-8151 5071 5076 0
-8151 5072 0
-8151 5074 0
-8151 5062 5076 0
-8151 5062 5071 0
-8151 5062 5072 0
-8151 5062 5074 0
-8151 5063 0
-8151 5063 5071 0
-8151 5063 5072 0
-8151 5063 5074 0
8151 -5063 -5071 -5076 0
8151 -5062 -5072 -5076 0
8151 -5062 -5071 -5077 0
c ((1<=(aux1264 + aux1267 + aux1268))=tv=SATLiteral(8152))
-8152 -5062 -5071 -5076 0
8152 5076 0
8152 5071 0
8152 5072 0
8152 5074 0
8152 5062 0
8152 5062 5071 0
8152 5062 5072 0
8152 5062 5074 0
8152 5063 0
8152 5063 5071 0
8152 5063 5072 0
8152 5063 5074 0
c (((aux1270 + aux1273 + aux1274)<=1)=tv=SATLiteral(8153))
-8153 5101 0
-8153 5095 5100 0
-8153 5096 0
-8153 5098 0
-8153 5086 5100 0
-8153 5086 5095 0
-8153 5086 5096 0
-8153 5086 5098 0
-8153 5087 0
-8153 5087 5095 0
-8153 5087 5096 0
-8153 5087 5098 0
8153 -5087 -5095 -5100 0
8153 -5086 -5096 -5100 0
8153 -5086 -5095 -5101 0
c ((1<=(aux1270 + aux1273 + aux1274))=tv=SATLiteral(8154))
-8154 -5086 -5095 -5100 0
8154 5100 0
8154 5095 0
8154 5096 0
8154 5098 0
8154 5086 0
8154 5086 5095 0
8154 5086 5096 0
8154 5086 5098 0
8154 5087 0
8154 5087 5095 0
8154 5087 5096 0
8154 5087 5098 0
c (((aux1276 + aux1279 + aux1280)<=1)=tv=SATLiteral(8155))
-8155 5125 0
-8155 5119 5124 0
-8155 5120 0
-8155 5122 0
-8155 5110 5124 0
-8155 5110 5119 0
-8155 5110 5120 0
-8155 5110 5122 0
-8155 5111 0
-8155 5111 5119 0
-8155 5111 5120 0
-8155 5111 5122 0
8155 -5111 -5119 -5124 0
8155 -5110 -5120 -5124 0
8155 -5110 -5119 -5125 0
c ((1<=(aux1276 + aux1279 + aux1280))=tv=SATLiteral(8156))
-8156 -5110 -5119 -5124 0
8156 5124 0
8156 5119 0
8156 5120 0
8156 5122 0
8156 5110 0
8156 5110 5119 0
8156 5110 5120 0
8156 5110 5122 0
8156 5111 0
8156 5111 5119 0
8156 5111 5120 0
8156 5111 5122 0
c (((aux1282 + aux1285 + aux1286)<=1)=tv=SATLiteral(8157))
-8157 5149 0
-8157 5143 5148 0
-8157 5144 0
-8157 5146 0
-8157 5134 5148 0
-8157 5134 5143 0
-8157 5134 5144 0
-8157 5134 5146 0
-8157 5135 0
-8157 5135 5143 0
-8157 5135 5144 0
-8157 5135 5146 0
8157 -5135 -5143 -5148 0
8157 -5134 -5144 -5148 0
8157 -5134 -5143 -5149 0
c ((1<=(aux1282 + aux1285 + aux1286))=tv=SATLiteral(8158))
-8158 -5134 -5143 -5148 0
8158 5148 0
8158 5143 0
8158 5144 0
8158 5146 0
8158 5134 0
8158 5134 5143 0
8158 5134 5144 0
8158 5134 5146 0
8158 5135 0
8158 5135 5143 0
8158 5135 5144 0
8158 5135 5146 0
c (((aux1288 + aux1291 + aux1292)<=1)=tv=SATLiteral(8159))
-8159 5173 0
-8159 5167 5172 0
-8159 5168 0
-8159 5170 0
-8159 5158 5172 0
-8159 5158 5167 0
-8159 5158 5168 0
-8159 5158 5170 0
-8159 5159 0
-8159 5159 5167 0
-8159 5159 5168 0
-8159 5159 5170 0
8159 -5159 -5167 -5172 0
8159 -5158 -5168 -5172 0
8159 -5158 -5167 -5173 0
c ((1<=(aux1288 + aux1291 + aux1292))=tv=SATLiteral(8160))
-8160 -5158 -5167 -5172 0
8160 5172 0
8160 5167 0
8160 5168 0
8160 5170 0
8160 5158 0
8160 5158 5167 0
8160 5158 5168 0
8160 5158 5170 0
8160 5159 0
8160 5159 5167 0
8160 5159 5168 0
8160 5159 5170 0
c (((aux1294 + aux1297 + aux1298)<=1)=tv=SATLiteral(8161))
-8161 5197 0
-8161 5191 5196 0
-8161 5192 0
-8161 5194 0
-8161 5182 5196 0
-8161 5182 5191 0
-8161 5182 5192 0
-8161 5182 5194 0
-8161 5183 0
-8161 5183 5191 0
-8161 5183 5192 0
-8161 5183 5194 0
8161 -5183 -5191 -5196 0
8161 -5182 -5192 -5196 0
8161 -5182 -5191 -5197 0
c ((1<=(aux1294 + aux1297 + aux1298))=tv=SATLiteral(8162))
-8162 -5182 -5191 -5196 0
8162 5196 0
8162 5191 0
8162 5192 0
8162 5194 0
8162 5182 0
8162 5182 5191 0
8162 5182 5192 0
8162 5182 5194 0
8162 5183 0
8162 5183 5191 0
8162 5183 5192 0
8162 5183 5194 0
c (((aux1300 + aux1303 + aux1304)<=1)=tv=SATLiteral(8163))
-8163 5221 0
-8163 5215 5220 0
-8163 5216 0
-8163 5218 0
-8163 5206 5220 0
-8163 5206 5215 0
-8163 5206 5216 0
-8163 5206 5218 0
-8163 5207 0
-8163 5207 5215 0
-8163 5207 5216 0
-8163 5207 5218 0
8163 -5207 -5215 -5220 0
8163 -5206 -5216 -5220 0
8163 -5206 -5215 -5221 0
c ((1<=(aux1300 + aux1303 + aux1304))=tv=SATLiteral(8164))
-8164 -5206 -5215 -5220 0
8164 5220 0
8164 5215 0
8164 5216 0
8164 5218 0
8164 5206 0
8164 5206 5215 0
8164 5206 5216 0
8164 5206 5218 0
8164 5207 0
8164 5207 5215 0
8164 5207 5216 0
8164 5207 5218 0
c (((aux1306 + aux1309 + aux1310)<=1)=tv=SATLiteral(8165))
-8165 5245 0
-8165 5239 5244 0
-8165 5240 0
-8165 5242 0
-8165 5230 5244 0
-8165 5230 5239 0
-8165 5230 5240 0
-8165 5230 5242 0
-8165 5231 0
-8165 5231 5239 0
-8165 5231 5240 0
-8165 5231 5242 0
8165 -5231 -5239 -5244 0
8165 -5230 -5240 -5244 0
8165 -5230 -5239 -5245 0
c ((1<=(aux1306 + aux1309 + aux1310))=tv=SATLiteral(8166))
-8166 -5230 -5239 -5244 0
8166 5244 0
8166 5239 0
8166 5240 0
8166 5242 0
8166 5230 0
8166 5230 5239 0
8166 5230 5240 0
8166 5230 5242 0
8166 5231 0
8166 5231 5239 0
8166 5231 5240 0
8166 5231 5242 0
c (((aux1312 + aux1315 + aux1316)<=1)=tv=SATLiteral(8167))
-8167 5269 0
-8167 5263 5268 0
-8167 5264 0
-8167 5266 0
-8167 5254 5268 0
-8167 5254 5263 0
-8167 5254 5264 0
-8167 5254 5266 0
-8167 5255 0
-8167 5255 5263 0
-8167 5255 5264 0
-8167 5255 5266 0
8167 -5255 -5263 -5268 0
8167 -5254 -5264 -5268 0
8167 -5254 -5263 -5269 0
c ((1<=(aux1312 + aux1315 + aux1316))=tv=SATLiteral(8168))
-8168 -5254 -5263 -5268 0
8168 5268 0
8168 5263 0
8168 5264 0
8168 5266 0
8168 5254 0
8168 5254 5263 0
8168 5254 5264 0
8168 5254 5266 0
8168 5255 0
8168 5255 5263 0
8168 5255 5264 0
8168 5255 5266 0
c (((aux1318 + aux1321 + aux1322)<=1)=tv=SATLiteral(8169))
-8169 5293 0
-8169 5287 5292 0
-8169 5288 0
-8169 5290 0
-8169 5278 5292 0
-8169 5278 5287 0
-8169 5278 5288 0
-8169 5278 5290 0
-8169 5279 0
-8169 5279 5287 0
-8169 5279 5288 0
-8169 5279 5290 0
8169 -5279 -5287 -5292 0
8169 -5278 -5288 -5292 0
8169 -5278 -5287 -5293 0
c ((1<=(aux1318 + aux1321 + aux1322))=tv=SATLiteral(8170))
-8170 -5278 -5287 -5292 0
8170 5292 0
8170 5287 0
8170 5288 0
8170 5290 0
8170 5278 0
8170 5278 5287 0
8170 5278 5288 0
8170 5278 5290 0
8170 5279 0
8170 5279 5287 0
8170 5279 5288 0
8170 5279 5290 0
c (((aux1324 + aux1327 + aux1328)<=1)=tv=SATLiteral(8171))
-8171 5317 0
-8171 5311 5316 0
-8171 5312 0
-8171 5314 0
-8171 5302 5316 0
-8171 5302 5311 0
-8171 5302 5312 0
-8171 5302 5314 0
-8171 5303 0
-8171 5303 5311 0
-8171 5303 5312 0
-8171 5303 5314 0
8171 -5303 -5311 -5316 0
8171 -5302 -5312 -5316 0
8171 -5302 -5311 -5317 0
c ((1<=(aux1324 + aux1327 + aux1328))=tv=SATLiteral(8172))
-8172 -5302 -5311 -5316 0
8172 5316 0
8172 5311 0
8172 5312 0
8172 5314 0
8172 5302 0
8172 5302 5311 0
8172 5302 5312 0
8172 5302 5314 0
8172 5303 0
8172 5303 5311 0
8172 5303 5312 0
8172 5303 5314 0
c (((aux1330 + aux1333 + aux1334)<=1)=tv=SATLiteral(8173))
-8173 5341 0
-8173 5335 5340 0
-8173 5336 0
-8173 5338 0
-8173 5326 5340 0
-8173 5326 5335 0
-8173 5326 5336 0
-8173 5326 5338 0
-8173 5327 0
-8173 5327 5335 0
-8173 5327 5336 0
-8173 5327 5338 0
8173 -5327 -5335 -5340 0
8173 -5326 -5336 -5340 0
8173 -5326 -5335 -5341 0
c ((1<=(aux1330 + aux1333 + aux1334))=tv=SATLiteral(8174))
-8174 -5326 -5335 -5340 0
8174 5340 0
8174 5335 0
8174 5336 0
8174 5338 0
8174 5326 0
8174 5326 5335 0
8174 5326 5336 0
8174 5326 5338 0
8174 5327 0
8174 5327 5335 0
8174 5327 5336 0
8174 5327 5338 0
c (((aux1336 + aux1339 + aux1340)<=1)=tv=SATLiteral(8175))
-8175 5365 0
-8175 5359 5364 0
-8175 5360 0
-8175 5362 0
-8175 5350 5364 0
-8175 5350 5359 0
-8175 5350 5360 0
-8175 5350 5362 0
-8175 5351 0
-8175 5351 5359 0
-8175 5351 5360 0
-8175 5351 5362 0
8175 -5351 -5359 -5364 0
8175 -5350 -5360 -5364 0
8175 -5350 -5359 -5365 0
c ((1<=(aux1336 + aux1339 + aux1340))=tv=SATLiteral(8176))
-8176 -5350 -5359 -5364 0
8176 5364 0
8176 5359 0
8176 5360 0
8176 5362 0
8176 5350 0
8176 5350 5359 0
8176 5350 5360 0
8176 5350 5362 0
8176 5351 0
8176 5351 5359 0
8176 5351 5360 0
8176 5351 5362 0
c (((aux1342 + aux1345 + aux1346)<=1)=tv=SATLiteral(8177))
-8177 5389 0
-8177 5383 5388 0
-8177 5384 0
-8177 5386 0
-8177 5374 5388 0
-8177 5374 5383 0
-8177 5374 5384 0
-8177 5374 5386 0
-8177 5375 0
-8177 5375 5383 0
-8177 5375 5384 0
-8177 5375 5386 0
8177 -5375 -5383 -5388 0
8177 -5374 -5384 -5388 0
8177 -5374 -5383 -5389 0
c ((1<=(aux1342 + aux1345 + aux1346))=tv=SATLiteral(8178))
-8178 -5374 -5383 -5388 0
8178 5388 0
8178 5383 0
8178 5384 0
8178 5386 0
8178 5374 0
8178 5374 5383 0
8178 5374 5384 0
8178 5374 5386 0
8178 5375 0
8178 5375 5383 0
8178 5375 5384 0
8178 5375 5386 0
c (((aux1348 + aux1351 + aux1352)<=1)=tv=SATLiteral(8179))
-8179 5413 0
-8179 5407 5412 0
-8179 5408 0
-8179 5410 0
-8179 5398 5412 0
-8179 5398 5407 0
-8179 5398 5408 0
-8179 5398 5410 0
-8179 5399 0
-8179 5399 5407 0
-8179 5399 5408 0
-8179 5399 5410 0
8179 -5399 -5407 -5412 0
8179 -5398 -5408 -5412 0
8179 -5398 -5407 -5413 0
c ((1<=(aux1348 + aux1351 + aux1352))=tv=SATLiteral(8180))
-8180 -5398 -5407 -5412 0
8180 5412 0
8180 5407 0
8180 5408 0
8180 5410 0
8180 5398 0
8180 5398 5407 0
8180 5398 5408 0
8180 5398 5410 0
8180 5399 0
8180 5399 5407 0
8180 5399 5408 0
8180 5399 5410 0
c (((aux1354 + aux1357 + aux1358)<=1)=tv=SATLiteral(8181))
-8181 5437 0
-8181 5431 5436 0
-8181 5432 0
-8181 5434 0
-8181 5422 5436 0
-8181 5422 5431 0
-8181 5422 5432 0
-8181 5422 5434 0
-8181 5423 0
-8181 5423 5431 0
-8181 5423 5432 0
-8181 5423 5434 0
8181 -5423 -5431 -5436 0
8181 -5422 -5432 -5436 0
8181 -5422 -5431 -5437 0
c ((1<=(aux1354 + aux1357 + aux1358))=tv=SATLiteral(8182))
-8182 -5422 -5431 -5436 0
8182 5436 0
8182 5431 0
8182 5432 0
8182 5434 0
8182 5422 0
8182 5422 5431 0
8182 5422 5432 0
8182 5422 5434 0
8182 5423 0
8182 5423 5431 0
8182 5423 5432 0
8182 5423 5434 0
c (((aux1360 + aux1363 + aux1364)<=1)=tv=SATLiteral(8183))
-8183 5461 0
-8183 5455 5460 0
-8183 5456 0
-8183 5458 0
-8183 5446 5460 0
-8183 5446 5455 0
-8183 5446 5456 0
-8183 5446 5458 0
-8183 5447 0
-8183 5447 5455 0
-8183 5447 5456 0
-8183 5447 5458 0
8183 -5447 -5455 -5460 0
8183 -5446 -5456 -5460 0
8183 -5446 -5455 -5461 0
c ((1<=(aux1360 + aux1363 + aux1364))=tv=SATLiteral(8184))
-8184 -5446 -5455 -5460 0
8184 5460 0
8184 5455 0
8184 5456 0
8184 5458 0
8184 5446 0
8184 5446 5455 0
8184 5446 5456 0
8184 5446 5458 0
8184 5447 0
8184 5447 5455 0
8184 5447 5456 0
8184 5447 5458 0
c (((aux1366 + aux1369 + aux1370)<=1)=tv=SATLiteral(8185))
-8185 5485 0
-8185 5479 5484 0
-8185 5480 0
-8185 5482 0
-8185 5470 5484 0
-8185 5470 5479 0
-8185 5470 5480 0
-8185 5470 5482 0
-8185 5471 0
-8185 5471 5479 0
-8185 5471 5480 0
-8185 5471 5482 0
8185 -5471 -5479 -5484 0
8185 -5470 -5480 -5484 0
8185 -5470 -5479 -5485 0
c ((1<=(aux1366 + aux1369 + aux1370))=tv=SATLiteral(8186))
-8186 -5470 -5479 -5484 0
8186 5484 0
8186 5479 0
8186 5480 0
8186 5482 0
8186 5470 0
8186 5470 5479 0
8186 5470 5480 0
8186 5470 5482 0
8186 5471 0
8186 5471 5479 0
8186 5471 5480 0
8186 5471 5482 0
c (((aux1372 + aux1375 + aux1376)<=1)=tv=SATLiteral(8187))
-8187 5509 0
-8187 5503 5508 0
-8187 5504 0
-8187 5506 0
-8187 5494 5508 0
-8187 5494 5503 0
-8187 5494 5504 0
-8187 5494 5506 0
-8187 5495 0
-8187 5495 5503 0
-8187 5495 5504 0
-8187 5495 5506 0
8187 -5495 -5503 -5508 0
8187 -5494 -5504 -5508 0
8187 -5494 -5503 -5509 0
c ((1<=(aux1372 + aux1375 + aux1376))=tv=SATLiteral(8188))
-8188 -5494 -5503 -5508 0
8188 5508 0
8188 5503 0
8188 5504 0
8188 5506 0
8188 5494 0
8188 5494 5503 0
8188 5494 5504 0
8188 5494 5506 0
8188 5495 0
8188 5495 5503 0
8188 5495 5504 0
8188 5495 5506 0
c (((aux1378 + aux1381 + aux1382)<=1)=tv=SATLiteral(8189))
-8189 5533 0
-8189 5527 5532 0
-8189 5528 0
-8189 5530 0
-8189 5518 5532 0
-8189 5518 5527 0
-8189 5518 5528 0
-8189 5518 5530 0
-8189 5519 0
-8189 5519 5527 0
-8189 5519 5528 0
-8189 5519 5530 0
8189 -5519 -5527 -5532 0
8189 -5518 -5528 -5532 0
8189 -5518 -5527 -5533 0
c ((1<=(aux1378 + aux1381 + aux1382))=tv=SATLiteral(8190))
-8190 -5518 -5527 -5532 0
8190 5532 0
8190 5527 0
8190 5528 0
8190 5530 0
8190 5518 0
8190 5518 5527 0
8190 5518 5528 0
8190 5518 5530 0
8190 5519 0
8190 5519 5527 0
8190 5519 5528 0
8190 5519 5530 0
c (((aux1384 + aux1387 + aux1388)<=1)=tv=SATLiteral(8191))
-8191 5557 0
-8191 5551 5556 0
-8191 5552 0
-8191 5554 0
-8191 5542 5556 0
-8191 5542 5551 0
-8191 5542 5552 0
-8191 5542 5554 0
-8191 5543 0
-8191 5543 5551 0
-8191 5543 5552 0
-8191 5543 5554 0
8191 -5543 -5551 -5556 0
8191 -5542 -5552 -5556 0
8191 -5542 -5551 -5557 0
c ((1<=(aux1384 + aux1387 + aux1388))=tv=SATLiteral(8192))
-8192 -5542 -5551 -5556 0
8192 5556 0
8192 5551 0
8192 5552 0
8192 5554 0
8192 5542 0
8192 5542 5551 0
8192 5542 5552 0
8192 5542 5554 0
8192 5543 0
8192 5543 5551 0
8192 5543 5552 0
8192 5543 5554 0
c (((aux1390 + aux1393 + aux1394)<=1)=tv=SATLiteral(8193))
-8193 5581 0
-8193 5575 5580 0
-8193 5576 0
-8193 5578 0
-8193 5566 5580 0
-8193 5566 5575 0
-8193 5566 5576 0
-8193 5566 5578 0
-8193 5567 0
-8193 5567 5575 0
-8193 5567 5576 0
-8193 5567 5578 0
8193 -5567 -5575 -5580 0
8193 -5566 -5576 -5580 0
8193 -5566 -5575 -5581 0
c ((1<=(aux1390 + aux1393 + aux1394))=tv=SATLiteral(8194))
-8194 -5566 -5575 -5580 0
8194 5580 0
8194 5575 0
8194 5576 0
8194 5578 0
8194 5566 0
8194 5566 5575 0
8194 5566 5576 0
8194 5566 5578 0
8194 5567 0
8194 5567 5575 0
8194 5567 5576 0
8194 5567 5578 0
c (((aux1396 + aux1399 + aux1400)<=1)=tv=SATLiteral(8195))
-8195 5605 0
-8195 5599 5604 0
-8195 5600 0
-8195 5602 0
-8195 5590 5604 0
-8195 5590 5599 0
-8195 5590 5600 0
-8195 5590 5602 0
-8195 5591 0
-8195 5591 5599 0
-8195 5591 5600 0
-8195 5591 5602 0
8195 -5591 -5599 -5604 0
8195 -5590 -5600 -5604 0
8195 -5590 -5599 -5605 0
c ((1<=(aux1396 + aux1399 + aux1400))=tv=SATLiteral(8196))
-8196 -5590 -5599 -5604 0
8196 5604 0
8196 5599 0
8196 5600 0
8196 5602 0
8196 5590 0
8196 5590 5599 0
8196 5590 5600 0
8196 5590 5602 0
8196 5591 0
8196 5591 5599 0
8196 5591 5600 0
8196 5591 5602 0
c (((aux1402 + aux1405 + aux1406)<=1)=tv=SATLiteral(8197))
-8197 5629 0
-8197 5623 5628 0
-8197 5624 0
-8197 5626 0
-8197 5614 5628 0
-8197 5614 5623 0
-8197 5614 5624 0
-8197 5614 5626 0
-8197 5615 0
-8197 5615 5623 0
-8197 5615 5624 0
-8197 5615 5626 0
8197 -5615 -5623 -5628 0
8197 -5614 -5624 -5628 0
8197 -5614 -5623 -5629 0
c ((1<=(aux1402 + aux1405 + aux1406))=tv=SATLiteral(8198))
-8198 -5614 -5623 -5628 0
8198 5628 0
8198 5623 0
8198 5624 0
8198 5626 0
8198 5614 0
8198 5614 5623 0
8198 5614 5624 0
8198 5614 5626 0
8198 5615 0
8198 5615 5623 0
8198 5615 5624 0
8198 5615 5626 0
c (((aux1408 + aux1411 + aux1412)<=1)=tv=SATLiteral(8199))
-8199 5653 0
-8199 5647 5652 0
-8199 5648 0
-8199 5650 0
-8199 5638 5652 0
-8199 5638 5647 0
-8199 5638 5648 0
-8199 5638 5650 0
-8199 5639 0
-8199 5639 5647 0
-8199 5639 5648 0
-8199 5639 5650 0
8199 -5639 -5647 -5652 0
8199 -5638 -5648 -5652 0
8199 -5638 -5647 -5653 0
c ((1<=(aux1408 + aux1411 + aux1412))=tv=SATLiteral(8200))
-8200 -5638 -5647 -5652 0
8200 5652 0
8200 5647 0
8200 5648 0
8200 5650 0
8200 5638 0
8200 5638 5647 0
8200 5638 5648 0
8200 5638 5650 0
8200 5639 0
8200 5639 5647 0
8200 5639 5648 0
8200 5639 5650 0
c (((aux1414 + aux1417 + aux1418)<=1)=tv=SATLiteral(8201))
-8201 5677 0
-8201 5671 5676 0
-8201 5672 0
-8201 5674 0
-8201 5662 5676 0
-8201 5662 5671 0
-8201 5662 5672 0
-8201 5662 5674 0
-8201 5663 0
-8201 5663 5671 0
-8201 5663 5672 0
-8201 5663 5674 0
8201 -5663 -5671 -5676 0
8201 -5662 -5672 -5676 0
8201 -5662 -5671 -5677 0
c ((1<=(aux1414 + aux1417 + aux1418))=tv=SATLiteral(8202))
-8202 -5662 -5671 -5676 0
8202 5676 0
8202 5671 0
8202 5672 0
8202 5674 0
8202 5662 0
8202 5662 5671 0
8202 5662 5672 0
8202 5662 5674 0
8202 5663 0
8202 5663 5671 0
8202 5663 5672 0
8202 5663 5674 0
c (((aux1420 + aux1423 + aux1424)<=1)=tv=SATLiteral(8203))
-8203 5701 0
-8203 5695 5700 0
-8203 5696 0
-8203 5698 0
-8203 5686 5700 0
-8203 5686 5695 0
-8203 5686 5696 0
-8203 5686 5698 0
-8203 5687 0
-8203 5687 5695 0
-8203 5687 5696 0
-8203 5687 5698 0
8203 -5687 -5695 -5700 0
8203 -5686 -5696 -5700 0
8203 -5686 -5695 -5701 0
c ((1<=(aux1420 + aux1423 + aux1424))=tv=SATLiteral(8204))
-8204 -5686 -5695 -5700 0
8204 5700 0
8204 5695 0
8204 5696 0
8204 5698 0
8204 5686 0
8204 5686 5695 0
8204 5686 5696 0
8204 5686 5698 0
8204 5687 0
8204 5687 5695 0
8204 5687 5696 0
8204 5687 5698 0
c (((aux1426 + aux1429 + aux1430)<=1)=tv=SATLiteral(8205))
-8205 5725 0
-8205 5719 5724 0
-8205 5720 0
-8205 5722 0
-8205 5710 5724 0
-8205 5710 5719 0
-8205 5710 5720 0
-8205 5710 5722 0
-8205 5711 0
-8205 5711 5719 0
-8205 5711 5720 0
-8205 5711 5722 0
8205 -5711 -5719 -5724 0
8205 -5710 -5720 -5724 0
8205 -5710 -5719 -5725 0
c ((1<=(aux1426 + aux1429 + aux1430))=tv=SATLiteral(8206))
-8206 -5710 -5719 -5724 0
8206 5724 0
8206 5719 0
8206 5720 0
8206 5722 0
8206 5710 0
8206 5710 5719 0
8206 5710 5720 0
8206 5710 5722 0
8206 5711 0
8206 5711 5719 0
8206 5711 5720 0
8206 5711 5722 0
c (((aux1432 + aux1435 + aux1436)<=1)=tv=SATLiteral(8207))
-8207 5749 0
-8207 5743 5748 0
-8207 5744 0
-8207 5746 0
-8207 5734 5748 0
-8207 5734 5743 0
-8207 5734 5744 0
-8207 5734 5746 0
-8207 5735 0
-8207 5735 5743 0
-8207 5735 5744 0
-8207 5735 5746 0
8207 -5735 -5743 -5748 0
8207 -5734 -5744 -5748 0
8207 -5734 -5743 -5749 0
c ((1<=(aux1432 + aux1435 + aux1436))=tv=SATLiteral(8208))
-8208 -5734 -5743 -5748 0
8208 5748 0
8208 5743 0
8208 5744 0
8208 5746 0
8208 5734 0
8208 5734 5743 0
8208 5734 5744 0
8208 5734 5746 0
8208 5735 0
8208 5735 5743 0
8208 5735 5744 0
8208 5735 5746 0
c (((aux1438 + aux1441 + aux1442)<=1)=tv=SATLiteral(8209))
-8209 5773 0
-8209 5767 5772 0
-8209 5768 0
-8209 5770 0
-8209 5758 5772 0
-8209 5758 5767 0
-8209 5758 5768 0
-8209 5758 5770 0
-8209 5759 0
-8209 5759 5767 0
-8209 5759 5768 0
-8209 5759 5770 0
8209 -5759 -5767 -5772 0
8209 -5758 -5768 -5772 0
8209 -5758 -5767 -5773 0
c ((1<=(aux1438 + aux1441 + aux1442))=tv=SATLiteral(8210))
-8210 -5758 -5767 -5772 0
8210 5772 0
8210 5767 0
8210 5768 0
8210 5770 0
8210 5758 0
8210 5758 5767 0
8210 5758 5768 0
8210 5758 5770 0
8210 5759 0
8210 5759 5767 0
8210 5759 5768 0
8210 5759 5770 0
c (((aux1444 + aux1447 + aux1448)<=1)=tv=SATLiteral(8211))
-8211 5797 0
-8211 5791 5796 0
-8211 5792 0
-8211 5794 0
-8211 5782 5796 0
-8211 5782 5791 0
-8211 5782 5792 0
-8211 5782 5794 0
-8211 5783 0
-8211 5783 5791 0
-8211 5783 5792 0
-8211 5783 5794 0
8211 -5783 -5791 -5796 0
8211 -5782 -5792 -5796 0
8211 -5782 -5791 -5797 0
c ((1<=(aux1444 + aux1447 + aux1448))=tv=SATLiteral(8212))
-8212 -5782 -5791 -5796 0
8212 5796 0
8212 5791 0
8212 5792 0
8212 5794 0
8212 5782 0
8212 5782 5791 0
8212 5782 5792 0
8212 5782 5794 0
8212 5783 0
8212 5783 5791 0
8212 5783 5792 0
8212 5783 5794 0
c (((aux1450 + aux1453 + aux1454)<=1)=tv=SATLiteral(8213))
-8213 5821 0
-8213 5815 5820 0
-8213 5816 0
-8213 5818 0
-8213 5806 5820 0
-8213 5806 5815 0
-8213 5806 5816 0
-8213 5806 5818 0
-8213 5807 0
-8213 5807 5815 0
-8213 5807 5816 0
-8213 5807 5818 0
8213 -5807 -5815 -5820 0
8213 -5806 -5816 -5820 0
8213 -5806 -5815 -5821 0
c ((1<=(aux1450 + aux1453 + aux1454))=tv=SATLiteral(8214))
-8214 -5806 -5815 -5820 0
8214 5820 0
8214 5815 0
8214 5816 0
8214 5818 0
8214 5806 0
8214 5806 5815 0
8214 5806 5816 0
8214 5806 5818 0
8214 5807 0
8214 5807 5815 0
8214 5807 5816 0
8214 5807 5818 0
c (((aux1456 + aux1459 + aux1460)<=1)=tv=SATLiteral(8215))
-8215 5845 0
-8215 5839 5844 0
-8215 5840 0
-8215 5842 0
-8215 5830 5844 0
-8215 5830 5839 0
-8215 5830 5840 0
-8215 5830 5842 0
-8215 5831 0
-8215 5831 5839 0
-8215 5831 5840 0
-8215 5831 5842 0
8215 -5831 -5839 -5844 0
8215 -5830 -5840 -5844 0
8215 -5830 -5839 -5845 0
c ((1<=(aux1456 + aux1459 + aux1460))=tv=SATLiteral(8216))
-8216 -5830 -5839 -5844 0
8216 5844 0
8216 5839 0
8216 5840 0
8216 5842 0
8216 5830 0
8216 5830 5839 0
8216 5830 5840 0
8216 5830 5842 0
8216 5831 0
8216 5831 5839 0
8216 5831 5840 0
8216 5831 5842 0
c (((aux1462 + aux1465 + aux1466)<=1)=tv=SATLiteral(8217))
-8217 5869 0
-8217 5863 5868 0
-8217 5864 0
-8217 5866 0
-8217 5854 5868 0
-8217 5854 5863 0
-8217 5854 5864 0
-8217 5854 5866 0
-8217 5855 0
-8217 5855 5863 0
-8217 5855 5864 0
-8217 5855 5866 0
8217 -5855 -5863 -5868 0
8217 -5854 -5864 -5868 0
8217 -5854 -5863 -5869 0
c ((1<=(aux1462 + aux1465 + aux1466))=tv=SATLiteral(8218))
-8218 -5854 -5863 -5868 0
8218 5868 0
8218 5863 0
8218 5864 0
8218 5866 0
8218 5854 0
8218 5854 5863 0
8218 5854 5864 0
8218 5854 5866 0
8218 5855 0
8218 5855 5863 0
8218 5855 5864 0
8218 5855 5866 0
c (((aux1468 + aux1471 + aux1472)<=1)=tv=SATLiteral(8219))
-8219 5893 0
-8219 5887 5892 0
-8219 5888 0
-8219 5890 0
-8219 5878 5892 0
-8219 5878 5887 0
-8219 5878 5888 0
-8219 5878 5890 0
-8219 5879 0
-8219 5879 5887 0
-8219 5879 5888 0
-8219 5879 5890 0
8219 -5879 -5887 -5892 0
8219 -5878 -5888 -5892 0
8219 -5878 -5887 -5893 0
c ((1<=(aux1468 + aux1471 + aux1472))=tv=SATLiteral(8220))
-8220 -5878 -5887 -5892 0
8220 5892 0
8220 5887 0
8220 5888 0
8220 5890 0
8220 5878 0
8220 5878 5887 0
8220 5878 5888 0
8220 5878 5890 0
8220 5879 0
8220 5879 5887 0
8220 5879 5888 0
8220 5879 5890 0
c (((aux1474 + aux1477 + aux1478)<=1)=tv=SATLiteral(8221))
-8221 5917 0
-8221 5911 5916 0
-8221 5912 0
-8221 5914 0
-8221 5902 5916 0
-8221 5902 5911 0
-8221 5902 5912 0
-8221 5902 5914 0
-8221 5903 0
-8221 5903 5911 0
-8221 5903 5912 0
-8221 5903 5914 0
8221 -5903 -5911 -5916 0
8221 -5902 -5912 -5916 0
8221 -5902 -5911 -5917 0
c ((1<=(aux1474 + aux1477 + aux1478))=tv=SATLiteral(8222))
-8222 -5902 -5911 -5916 0
8222 5916 0
8222 5911 0
8222 5912 0
8222 5914 0
8222 5902 0
8222 5902 5911 0
8222 5902 5912 0
8222 5902 5914 0
8222 5903 0
8222 5903 5911 0
8222 5903 5912 0
8222 5903 5914 0
c (((aux1480 + aux1483 + aux1484)<=1)=tv=SATLiteral(8223))
-8223 5941 0
-8223 5935 5940 0
-8223 5936 0
-8223 5938 0
-8223 5926 5940 0
-8223 5926 5935 0
-8223 5926 5936 0
-8223 5926 5938 0
-8223 5927 0
-8223 5927 5935 0
-8223 5927 5936 0
-8223 5927 5938 0
8223 -5927 -5935 -5940 0
8223 -5926 -5936 -5940 0
8223 -5926 -5935 -5941 0
c ((1<=(aux1480 + aux1483 + aux1484))=tv=SATLiteral(8224))
-8224 -5926 -5935 -5940 0
8224 5940 0
8224 5935 0
8224 5936 0
8224 5938 0
8224 5926 0
8224 5926 5935 0
8224 5926 5936 0
8224 5926 5938 0
8224 5927 0
8224 5927 5935 0
8224 5927 5936 0
8224 5927 5938 0
c (((aux1486 + aux1489 + aux1490)<=1)=tv=SATLiteral(8225))
-8225 5965 0
-8225 5959 5964 0
-8225 5960 0
-8225 5962 0
-8225 5950 5964 0
-8225 5950 5959 0
-8225 5950 5960 0
-8225 5950 5962 0
-8225 5951 0
-8225 5951 5959 0
-8225 5951 5960 0
-8225 5951 5962 0
8225 -5951 -5959 -5964 0
8225 -5950 -5960 -5964 0
8225 -5950 -5959 -5965 0
c ((1<=(aux1486 + aux1489 + aux1490))=tv=SATLiteral(8226))
-8226 -5950 -5959 -5964 0
8226 5964 0
8226 5959 0
8226 5960 0
8226 5962 0
8226 5950 0
8226 5950 5959 0
8226 5950 5960 0
8226 5950 5962 0
8226 5951 0
8226 5951 5959 0
8226 5951 5960 0
8226 5951 5962 0
c (((aux1492 + aux1495 + aux1496)<=1)=tv=SATLiteral(8227))
-8227 5989 0
-8227 5983 5988 0
-8227 5984 0
-8227 5986 0
-8227 5974 5988 0
-8227 5974 5983 0
-8227 5974 5984 0
-8227 5974 5986 0
-8227 5975 0
-8227 5975 5983 0
-8227 5975 5984 0
-8227 5975 5986 0
8227 -5975 -5983 -5988 0
8227 -5974 -5984 -5988 0
8227 -5974 -5983 -5989 0
c ((1<=(aux1492 + aux1495 + aux1496))=tv=SATLiteral(8228))
-8228 -5974 -5983 -5988 0
8228 5988 0
8228 5983 0
8228 5984 0
8228 5986 0
8228 5974 0
8228 5974 5983 0
8228 5974 5984 0
8228 5974 5986 0
8228 5975 0
8228 5975 5983 0
8228 5975 5984 0
8228 5975 5986 0
c (((aux1498 + aux1501 + aux1502)<=1)=tv=SATLiteral(8229))
-8229 6013 0
-8229 6007 6012 0
-8229 6008 0
-8229 6010 0
-8229 5998 6012 0
-8229 5998 6007 0
-8229 5998 6008 0
-8229 5998 6010 0
-8229 5999 0
-8229 5999 6007 0
-8229 5999 6008 0
-8229 5999 6010 0
8229 -5999 -6007 -6012 0
8229 -5998 -6008 -6012 0
8229 -5998 -6007 -6013 0
c ((1<=(aux1498 + aux1501 + aux1502))=tv=SATLiteral(8230))
-8230 -5998 -6007 -6012 0
8230 6012 0
8230 6007 0
8230 6008 0
8230 6010 0
8230 5998 0
8230 5998 6007 0
8230 5998 6008 0
8230 5998 6010 0
8230 5999 0
8230 5999 6007 0
8230 5999 6008 0
8230 5999 6010 0
c (((aux1504 + aux1507 + aux1508)<=1)=tv=SATLiteral(8231))
-8231 6037 0
-8231 6031 6036 0
-8231 6032 0
-8231 6034 0
-8231 6022 6036 0
-8231 6022 6031 0
-8231 6022 6032 0
-8231 6022 6034 0
-8231 6023 0
-8231 6023 6031 0
-8231 6023 6032 0
-8231 6023 6034 0
8231 -6023 -6031 -6036 0
8231 -6022 -6032 -6036 0
8231 -6022 -6031 -6037 0
c ((1<=(aux1504 + aux1507 + aux1508))=tv=SATLiteral(8232))
-8232 -6022 -6031 -6036 0
8232 6036 0
8232 6031 0
8232 6032 0
8232 6034 0
8232 6022 0
8232 6022 6031 0
8232 6022 6032 0
8232 6022 6034 0
8232 6023 0
8232 6023 6031 0
8232 6023 6032 0
8232 6023 6034 0
c (((aux1510 + aux1513 + aux1514)<=1)=tv=SATLiteral(8233))
-8233 6061 0
-8233 6055 6060 0
-8233 6056 0
-8233 6058 0
-8233 6046 6060 0
-8233 6046 6055 0
-8233 6046 6056 0
-8233 6046 6058 0
-8233 6047 0
-8233 6047 6055 0
-8233 6047 6056 0
-8233 6047 6058 0
8233 -6047 -6055 -6060 0
8233 -6046 -6056 -6060 0
8233 -6046 -6055 -6061 0
c ((1<=(aux1510 + aux1513 + aux1514))=tv=SATLiteral(8234))
-8234 -6046 -6055 -6060 0
8234 6060 0
8234 6055 0
8234 6056 0
8234 6058 0
8234 6046 0
8234 6046 6055 0
8234 6046 6056 0
8234 6046 6058 0
8234 6047 0
8234 6047 6055 0
8234 6047 6056 0
8234 6047 6058 0
c (((aux1516 + aux1519 + aux1520)<=1)=tv=SATLiteral(8235))
-8235 6085 0
-8235 6079 6084 0
-8235 6080 0
-8235 6082 0
-8235 6070 6084 0
-8235 6070 6079 0
-8235 6070 6080 0
-8235 6070 6082 0
-8235 6071 0
-8235 6071 6079 0
-8235 6071 6080 0
-8235 6071 6082 0
8235 -6071 -6079 -6084 0
8235 -6070 -6080 -6084 0
8235 -6070 -6079 -6085 0
c ((1<=(aux1516 + aux1519 + aux1520))=tv=SATLiteral(8236))
-8236 -6070 -6079 -6084 0
8236 6084 0
8236 6079 0
8236 6080 0
8236 6082 0
8236 6070 0
8236 6070 6079 0
8236 6070 6080 0
8236 6070 6082 0
8236 6071 0
8236 6071 6079 0
8236 6071 6080 0
8236 6071 6082 0
c (((aux1522 + aux1525 + aux1526)<=1)=tv=SATLiteral(8237))
-8237 6109 0
-8237 6103 6108 0
-8237 6104 0
-8237 6106 0
-8237 6094 6108 0
-8237 6094 6103 0
-8237 6094 6104 0
-8237 6094 6106 0
-8237 6095 0
-8237 6095 6103 0
-8237 6095 6104 0
-8237 6095 6106 0
8237 -6095 -6103 -6108 0
8237 -6094 -6104 -6108 0
8237 -6094 -6103 -6109 0
c ((1<=(aux1522 + aux1525 + aux1526))=tv=SATLiteral(8238))
-8238 -6094 -6103 -6108 0
8238 6108 0
8238 6103 0
8238 6104 0
8238 6106 0
8238 6094 0
8238 6094 6103 0
8238 6094 6104 0
8238 6094 6106 0
8238 6095 0
8238 6095 6103 0
8238 6095 6104 0
8238 6095 6106 0
c (((aux1528 + aux1531 + aux1532)<=1)=tv=SATLiteral(8239))
-8239 6133 0
-8239 6127 6132 0
-8239 6128 0
-8239 6130 0
-8239 6118 6132 0
-8239 6118 6127 0
-8239 6118 6128 0
-8239 6118 6130 0
-8239 6119 0
-8239 6119 6127 0
-8239 6119 6128 0
-8239 6119 6130 0
8239 -6119 -6127 -6132 0
8239 -6118 -6128 -6132 0
8239 -6118 -6127 -6133 0
c ((1<=(aux1528 + aux1531 + aux1532))=tv=SATLiteral(8240))
-8240 -6118 -6127 -6132 0
8240 6132 0
8240 6127 0
8240 6128 0
8240 6130 0
8240 6118 0
8240 6118 6127 0
8240 6118 6128 0
8240 6118 6130 0
8240 6119 0
8240 6119 6127 0
8240 6119 6128 0
8240 6119 6130 0
c (((aux1534 + aux1537 + aux1538)<=1)=tv=SATLiteral(8241))
-8241 6157 0
-8241 6151 6156 0
-8241 6152 0
-8241 6154 0
-8241 6142 6156 0
-8241 6142 6151 0
-8241 6142 6152 0
-8241 6142 6154 0
-8241 6143 0
-8241 6143 6151 0
-8241 6143 6152 0
-8241 6143 6154 0
8241 -6143 -6151 -6156 0
8241 -6142 -6152 -6156 0
8241 -6142 -6151 -6157 0
c ((1<=(aux1534 + aux1537 + aux1538))=tv=SATLiteral(8242))
-8242 -6142 -6151 -6156 0
8242 6156 0
8242 6151 0
8242 6152 0
8242 6154 0
8242 6142 0
8242 6142 6151 0
8242 6142 6152 0
8242 6142 6154 0
8242 6143 0
8242 6143 6151 0
8242 6143 6152 0
8242 6143 6154 0
c (((aux1540 + aux1543 + aux1544)<=1)=tv=SATLiteral(8243))
-8243 6181 0
-8243 6175 6180 0
-8243 6176 0
-8243 6178 0
-8243 6166 6180 0
-8243 6166 6175 0
-8243 6166 6176 0
-8243 6166 6178 0
-8243 6167 0
-8243 6167 6175 0
-8243 6167 6176 0
-8243 6167 6178 0
8243 -6167 -6175 -6180 0
8243 -6166 -6176 -6180 0
8243 -6166 -6175 -6181 0
c ((1<=(aux1540 + aux1543 + aux1544))=tv=SATLiteral(8244))
-8244 -6166 -6175 -6180 0
8244 6180 0
8244 6175 0
8244 6176 0
8244 6178 0
8244 6166 0
8244 6166 6175 0
8244 6166 6176 0
8244 6166 6178 0
8244 6167 0
8244 6167 6175 0
8244 6167 6176 0
8244 6167 6178 0
c (((aux1546 + aux1549 + aux1550)<=1)=tv=SATLiteral(8245))
-8245 6205 0
-8245 6199 6204 0
-8245 6200 0
-8245 6202 0
-8245 6190 6204 0
-8245 6190 6199 0
-8245 6190 6200 0
-8245 6190 6202 0
-8245 6191 0
-8245 6191 6199 0
-8245 6191 6200 0
-8245 6191 6202 0
8245 -6191 -6199 -6204 0
8245 -6190 -6200 -6204 0
8245 -6190 -6199 -6205 0
c ((1<=(aux1546 + aux1549 + aux1550))=tv=SATLiteral(8246))
-8246 -6190 -6199 -6204 0
8246 6204 0
8246 6199 0
8246 6200 0
8246 6202 0
8246 6190 0
8246 6190 6199 0
8246 6190 6200 0
8246 6190 6202 0
8246 6191 0
8246 6191 6199 0
8246 6191 6200 0
8246 6191 6202 0
c (((aux1552 + aux1555 + aux1556)<=1)=tv=SATLiteral(8247))
-8247 6229 0
-8247 6223 6228 0
-8247 6224 0
-8247 6226 0
-8247 6214 6228 0
-8247 6214 6223 0
-8247 6214 6224 0
-8247 6214 6226 0
-8247 6215 0
-8247 6215 6223 0
-8247 6215 6224 0
-8247 6215 6226 0
8247 -6215 -6223 -6228 0
8247 -6214 -6224 -6228 0
8247 -6214 -6223 -6229 0
c ((1<=(aux1552 + aux1555 + aux1556))=tv=SATLiteral(8248))
-8248 -6214 -6223 -6228 0
8248 6228 0
8248 6223 0
8248 6224 0
8248 6226 0
8248 6214 0
8248 6214 6223 0
8248 6214 6224 0
8248 6214 6226 0
8248 6215 0
8248 6215 6223 0
8248 6215 6224 0
8248 6215 6226 0
c (((aux1558 + aux1561 + aux1562)<=1)=tv=SATLiteral(8249))
-8249 6253 0
-8249 6247 6252 0
-8249 6248 0
-8249 6250 0
-8249 6238 6252 0
-8249 6238 6247 0
-8249 6238 6248 0
-8249 6238 6250 0
-8249 6239 0
-8249 6239 6247 0
-8249 6239 6248 0
-8249 6239 6250 0
8249 -6239 -6247 -6252 0
8249 -6238 -6248 -6252 0
8249 -6238 -6247 -6253 0
c ((1<=(aux1558 + aux1561 + aux1562))=tv=SATLiteral(8250))
-8250 -6238 -6247 -6252 0
8250 6252 0
8250 6247 0
8250 6248 0
8250 6250 0
8250 6238 0
8250 6238 6247 0
8250 6238 6248 0
8250 6238 6250 0
8250 6239 0
8250 6239 6247 0
8250 6239 6248 0
8250 6239 6250 0
c (((aux1564 + aux1567 + aux1568)<=1)=tv=SATLiteral(8251))
-8251 6277 0
-8251 6271 6276 0
-8251 6272 0
-8251 6274 0
-8251 6262 6276 0
-8251 6262 6271 0
-8251 6262 6272 0
-8251 6262 6274 0
-8251 6263 0
-8251 6263 6271 0
-8251 6263 6272 0
-8251 6263 6274 0
8251 -6263 -6271 -6276 0
8251 -6262 -6272 -6276 0
8251 -6262 -6271 -6277 0
c ((1<=(aux1564 + aux1567 + aux1568))=tv=SATLiteral(8252))
-8252 -6262 -6271 -6276 0
8252 6276 0
8252 6271 0
8252 6272 0
8252 6274 0
8252 6262 0
8252 6262 6271 0
8252 6262 6272 0
8252 6262 6274 0
8252 6263 0
8252 6263 6271 0
8252 6263 6272 0
8252 6263 6274 0
c (((aux1570 + aux1573 + aux1574)<=1)=tv=SATLiteral(8253))
-8253 6301 0
-8253 6295 6300 0
-8253 6296 0
-8253 6298 0
-8253 6286 6300 0
-8253 6286 6295 0
-8253 6286 6296 0
-8253 6286 6298 0
-8253 6287 0
-8253 6287 6295 0
-8253 6287 6296 0
-8253 6287 6298 0
8253 -6287 -6295 -6300 0
8253 -6286 -6296 -6300 0
8253 -6286 -6295 -6301 0
c ((1<=(aux1570 + aux1573 + aux1574))=tv=SATLiteral(8254))
-8254 -6286 -6295 -6300 0
8254 6300 0
8254 6295 0
8254 6296 0
8254 6298 0
8254 6286 0
8254 6286 6295 0
8254 6286 6296 0
8254 6286 6298 0
8254 6287 0
8254 6287 6295 0
8254 6287 6296 0
8254 6287 6298 0
c (((aux1576 + aux1579 + aux1580)<=1)=tv=SATLiteral(8255))
-8255 6325 0
-8255 6319 6324 0
-8255 6320 0
-8255 6322 0
-8255 6310 6324 0
-8255 6310 6319 0
-8255 6310 6320 0
-8255 6310 6322 0
-8255 6311 0
-8255 6311 6319 0
-8255 6311 6320 0
-8255 6311 6322 0
8255 -6311 -6319 -6324 0
8255 -6310 -6320 -6324 0
8255 -6310 -6319 -6325 0
c ((1<=(aux1576 + aux1579 + aux1580))=tv=SATLiteral(8256))
-8256 -6310 -6319 -6324 0
8256 6324 0
8256 6319 0
8256 6320 0
8256 6322 0
8256 6310 0
8256 6310 6319 0
8256 6310 6320 0
8256 6310 6322 0
8256 6311 0
8256 6311 6319 0
8256 6311 6320 0
8256 6311 6322 0
c (((aux1582 + aux1585 + aux1586)<=1)=tv=SATLiteral(8257))
-8257 6349 0
-8257 6343 6348 0
-8257 6344 0
-8257 6346 0
-8257 6334 6348 0
-8257 6334 6343 0
-8257 6334 6344 0
-8257 6334 6346 0
-8257 6335 0
-8257 6335 6343 0
-8257 6335 6344 0
-8257 6335 6346 0
8257 -6335 -6343 -6348 0
8257 -6334 -6344 -6348 0
8257 -6334 -6343 -6349 0
c ((1<=(aux1582 + aux1585 + aux1586))=tv=SATLiteral(8258))
-8258 -6334 -6343 -6348 0
8258 6348 0
8258 6343 0
8258 6344 0
8258 6346 0
8258 6334 0
8258 6334 6343 0
8258 6334 6344 0
8258 6334 6346 0
8258 6335 0
8258 6335 6343 0
8258 6335 6344 0
8258 6335 6346 0
c (((aux1588 + aux1591 + aux1592)<=1)=tv=SATLiteral(8259))
-8259 6373 0
-8259 6367 6372 0
-8259 6368 0
-8259 6370 0
-8259 6358 6372 0
-8259 6358 6367 0
-8259 6358 6368 0
-8259 6358 6370 0
-8259 6359 0
-8259 6359 6367 0
-8259 6359 6368 0
-8259 6359 6370 0
8259 -6359 -6367 -6372 0
8259 -6358 -6368 -6372 0
8259 -6358 -6367 -6373 0
c ((1<=(aux1588 + aux1591 + aux1592))=tv=SATLiteral(8260))
-8260 -6358 -6367 -6372 0
8260 6372 0
8260 6367 0
8260 6368 0
8260 6370 0
8260 6358 0
8260 6358 6367 0
8260 6358 6368 0
8260 6358 6370 0
8260 6359 0
8260 6359 6367 0
8260 6359 6368 0
8260 6359 6370 0
c (((aux1594 + aux1597 + aux1598)<=1)=tv=SATLiteral(8261))
-8261 6397 0
-8261 6391 6396 0
-8261 6392 0
-8261 6394 0
-8261 6382 6396 0
-8261 6382 6391 0
-8261 6382 6392 0
-8261 6382 6394 0
-8261 6383 0
-8261 6383 6391 0
-8261 6383 6392 0
-8261 6383 6394 0
8261 -6383 -6391 -6396 0
8261 -6382 -6392 -6396 0
8261 -6382 -6391 -6397 0
c ((1<=(aux1594 + aux1597 + aux1598))=tv=SATLiteral(8262))
-8262 -6382 -6391 -6396 0
8262 6396 0
8262 6391 0
8262 6392 0
8262 6394 0
8262 6382 0
8262 6382 6391 0
8262 6382 6392 0
8262 6382 6394 0
8262 6383 0
8262 6383 6391 0
8262 6383 6392 0
8262 6383 6394 0
c (((aux1600 + aux1603 + aux1604)<=1)=tv=SATLiteral(8263))
-8263 6421 0
-8263 6415 6420 0
-8263 6416 0
-8263 6418 0
-8263 6406 6420 0
-8263 6406 6415 0
-8263 6406 6416 0
-8263 6406 6418 0
-8263 6407 0
-8263 6407 6415 0
-8263 6407 6416 0
-8263 6407 6418 0
8263 -6407 -6415 -6420 0
8263 -6406 -6416 -6420 0
8263 -6406 -6415 -6421 0
c ((1<=(aux1600 + aux1603 + aux1604))=tv=SATLiteral(8264))
-8264 -6406 -6415 -6420 0
8264 6420 0
8264 6415 0
8264 6416 0
8264 6418 0
8264 6406 0
8264 6406 6415 0
8264 6406 6416 0
8264 6406 6418 0
8264 6407 0
8264 6407 6415 0
8264 6407 6416 0
8264 6407 6418 0
c (((aux1606 + aux1609 + aux1610)<=1)=tv=SATLiteral(8265))
-8265 6445 0
-8265 6439 6444 0
-8265 6440 0
-8265 6442 0
-8265 6430 6444 0
-8265 6430 6439 0
-8265 6430 6440 0
-8265 6430 6442 0
-8265 6431 0
-8265 6431 6439 0
-8265 6431 6440 0
-8265 6431 6442 0
8265 -6431 -6439 -6444 0
8265 -6430 -6440 -6444 0
8265 -6430 -6439 -6445 0
c ((1<=(aux1606 + aux1609 + aux1610))=tv=SATLiteral(8266))
-8266 -6430 -6439 -6444 0
8266 6444 0
8266 6439 0
8266 6440 0
8266 6442 0
8266 6430 0
8266 6430 6439 0
8266 6430 6440 0
8266 6430 6442 0
8266 6431 0
8266 6431 6439 0
8266 6431 6440 0
8266 6431 6442 0
c (((aux1612 + aux1615 + aux1616)<=1)=tv=SATLiteral(8267))
-8267 6469 0
-8267 6463 6468 0
-8267 6464 0
-8267 6466 0
-8267 6454 6468 0
-8267 6454 6463 0
-8267 6454 6464 0
-8267 6454 6466 0
-8267 6455 0
-8267 6455 6463 0
-8267 6455 6464 0
-8267 6455 6466 0
8267 -6455 -6463 -6468 0
8267 -6454 -6464 -6468 0
8267 -6454 -6463 -6469 0
c ((1<=(aux1612 + aux1615 + aux1616))=tv=SATLiteral(8268))
-8268 -6454 -6463 -6468 0
8268 6468 0
8268 6463 0
8268 6464 0
8268 6466 0
8268 6454 0
8268 6454 6463 0
8268 6454 6464 0
8268 6454 6466 0
8268 6455 0
8268 6455 6463 0
8268 6455 6464 0
8268 6455 6466 0
c (((aux1618 + aux1621 + aux1622)<=1)=tv=SATLiteral(8269))
-8269 6493 0
-8269 6487 6492 0
-8269 6488 0
-8269 6490 0
-8269 6478 6492 0
-8269 6478 6487 0
-8269 6478 6488 0
-8269 6478 6490 0
-8269 6479 0
-8269 6479 6487 0
-8269 6479 6488 0
-8269 6479 6490 0
8269 -6479 -6487 -6492 0
8269 -6478 -6488 -6492 0
8269 -6478 -6487 -6493 0
c ((1<=(aux1618 + aux1621 + aux1622))=tv=SATLiteral(8270))
-8270 -6478 -6487 -6492 0
8270 6492 0
8270 6487 0
8270 6488 0
8270 6490 0
8270 6478 0
8270 6478 6487 0
8270 6478 6488 0
8270 6478 6490 0
8270 6479 0
8270 6479 6487 0
8270 6479 6488 0
8270 6479 6490 0
c (((aux1624 + aux1627 + aux1628)<=1)=tv=SATLiteral(8271))
-8271 6517 0
-8271 6511 6516 0
-8271 6512 0
-8271 6514 0
-8271 6502 6516 0
-8271 6502 6511 0
-8271 6502 6512 0
-8271 6502 6514 0
-8271 6503 0
-8271 6503 6511 0
-8271 6503 6512 0
-8271 6503 6514 0
8271 -6503 -6511 -6516 0
8271 -6502 -6512 -6516 0
8271 -6502 -6511 -6517 0
c ((1<=(aux1624 + aux1627 + aux1628))=tv=SATLiteral(8272))
-8272 -6502 -6511 -6516 0
8272 6516 0
8272 6511 0
8272 6512 0
8272 6514 0
8272 6502 0
8272 6502 6511 0
8272 6502 6512 0
8272 6502 6514 0
8272 6503 0
8272 6503 6511 0
8272 6503 6512 0
8272 6503 6514 0
c (((aux1630 + aux1633 + aux1634)<=1)=tv=SATLiteral(8273))
-8273 6541 0
-8273 6535 6540 0
-8273 6536 0
-8273 6538 0
-8273 6526 6540 0
-8273 6526 6535 0
-8273 6526 6536 0
-8273 6526 6538 0
-8273 6527 0
-8273 6527 6535 0
-8273 6527 6536 0
-8273 6527 6538 0
8273 -6527 -6535 -6540 0
8273 -6526 -6536 -6540 0
8273 -6526 -6535 -6541 0
c ((1<=(aux1630 + aux1633 + aux1634))=tv=SATLiteral(8274))
-8274 -6526 -6535 -6540 0
8274 6540 0
8274 6535 0
8274 6536 0
8274 6538 0
8274 6526 0
8274 6526 6535 0
8274 6526 6536 0
8274 6526 6538 0
8274 6527 0
8274 6527 6535 0
8274 6527 6536 0
8274 6527 6538 0
c (((aux1636 + aux1639 + aux1640)<=1)=tv=SATLiteral(8275))
-8275 6565 0
-8275 6559 6564 0
-8275 6560 0
-8275 6562 0
-8275 6550 6564 0
-8275 6550 6559 0
-8275 6550 6560 0
-8275 6550 6562 0
-8275 6551 0
-8275 6551 6559 0
-8275 6551 6560 0
-8275 6551 6562 0
8275 -6551 -6559 -6564 0
8275 -6550 -6560 -6564 0
8275 -6550 -6559 -6565 0
c ((1<=(aux1636 + aux1639 + aux1640))=tv=SATLiteral(8276))
-8276 -6550 -6559 -6564 0
8276 6564 0
8276 6559 0
8276 6560 0
8276 6562 0
8276 6550 0
8276 6550 6559 0
8276 6550 6560 0
8276 6550 6562 0
8276 6551 0
8276 6551 6559 0
8276 6551 6560 0
8276 6551 6562 0
c (((aux1642 + aux1645 + aux1646)<=1)=tv=SATLiteral(8277))
-8277 6589 0
-8277 6583 6588 0
-8277 6584 0
-8277 6586 0
-8277 6574 6588 0
-8277 6574 6583 0
-8277 6574 6584 0
-8277 6574 6586 0
-8277 6575 0
-8277 6575 6583 0
-8277 6575 6584 0
-8277 6575 6586 0
8277 -6575 -6583 -6588 0
8277 -6574 -6584 -6588 0
8277 -6574 -6583 -6589 0
c ((1<=(aux1642 + aux1645 + aux1646))=tv=SATLiteral(8278))
-8278 -6574 -6583 -6588 0
8278 6588 0
8278 6583 0
8278 6584 0
8278 6586 0
8278 6574 0
8278 6574 6583 0
8278 6574 6584 0
8278 6574 6586 0
8278 6575 0
8278 6575 6583 0
8278 6575 6584 0
8278 6575 6586 0
c (((aux1648 + aux1651 + aux1652)<=1)=tv=SATLiteral(8279))
-8279 6613 0
-8279 6607 6612 0
-8279 6608 0
-8279 6610 0
-8279 6598 6612 0
-8279 6598 6607 0
-8279 6598 6608 0
-8279 6598 6610 0
-8279 6599 0
-8279 6599 6607 0
-8279 6599 6608 0
-8279 6599 6610 0
8279 -6599 -6607 -6612 0
8279 -6598 -6608 -6612 0
8279 -6598 -6607 -6613 0
c ((1<=(aux1648 + aux1651 + aux1652))=tv=SATLiteral(8280))
-8280 -6598 -6607 -6612 0
8280 6612 0
8280 6607 0
8280 6608 0
8280 6610 0
8280 6598 0
8280 6598 6607 0
8280 6598 6608 0
8280 6598 6610 0
8280 6599 0
8280 6599 6607 0
8280 6599 6608 0
8280 6599 6610 0
c (((aux1654 + aux1657 + aux1658)<=1)=tv=SATLiteral(8281))
-8281 6637 0
-8281 6631 6636 0
-8281 6632 0
-8281 6634 0
-8281 6622 6636 0
-8281 6622 6631 0
-8281 6622 6632 0
-8281 6622 6634 0
-8281 6623 0
-8281 6623 6631 0
-8281 6623 6632 0
-8281 6623 6634 0
8281 -6623 -6631 -6636 0
8281 -6622 -6632 -6636 0
8281 -6622 -6631 -6637 0
c ((1<=(aux1654 + aux1657 + aux1658))=tv=SATLiteral(8282))
-8282 -6622 -6631 -6636 0
8282 6636 0
8282 6631 0
8282 6632 0
8282 6634 0
8282 6622 0
8282 6622 6631 0
8282 6622 6632 0
8282 6622 6634 0
8282 6623 0
8282 6623 6631 0
8282 6623 6632 0
8282 6623 6634 0
c (((aux1660 + aux1663 + aux1664)<=1)=tv=SATLiteral(8283))
-8283 6661 0
-8283 6655 6660 0
-8283 6656 0
-8283 6658 0
-8283 6646 6660 0
-8283 6646 6655 0
-8283 6646 6656 0
-8283 6646 6658 0
-8283 6647 0
-8283 6647 6655 0
-8283 6647 6656 0
-8283 6647 6658 0
8283 -6647 -6655 -6660 0
8283 -6646 -6656 -6660 0
8283 -6646 -6655 -6661 0
c ((1<=(aux1660 + aux1663 + aux1664))=tv=SATLiteral(8284))
-8284 -6646 -6655 -6660 0
8284 6660 0
8284 6655 0
8284 6656 0
8284 6658 0
8284 6646 0
8284 6646 6655 0
8284 6646 6656 0
8284 6646 6658 0
8284 6647 0
8284 6647 6655 0
8284 6647 6656 0
8284 6647 6658 0
c (((aux1666 + aux1669 + aux1670)<=1)=tv=SATLiteral(8285))
-8285 6685 0
-8285 6679 6684 0
-8285 6680 0
-8285 6682 0
-8285 6670 6684 0
-8285 6670 6679 0
-8285 6670 6680 0
-8285 6670 6682 0
-8285 6671 0
-8285 6671 6679 0
-8285 6671 6680 0
-8285 6671 6682 0
8285 -6671 -6679 -6684 0
8285 -6670 -6680 -6684 0
8285 -6670 -6679 -6685 0
c ((1<=(aux1666 + aux1669 + aux1670))=tv=SATLiteral(8286))
-8286 -6670 -6679 -6684 0
8286 6684 0
8286 6679 0
8286 6680 0
8286 6682 0
8286 6670 0
8286 6670 6679 0
8286 6670 6680 0
8286 6670 6682 0
8286 6671 0
8286 6671 6679 0
8286 6671 6680 0
8286 6671 6682 0
c (((aux1672 + aux1675 + aux1676)<=1)=tv=SATLiteral(8287))
-8287 6709 0
-8287 6703 6708 0
-8287 6704 0
-8287 6706 0
-8287 6694 6708 0
-8287 6694 6703 0
-8287 6694 6704 0
-8287 6694 6706 0
-8287 6695 0
-8287 6695 6703 0
-8287 6695 6704 0
-8287 6695 6706 0
8287 -6695 -6703 -6708 0
8287 -6694 -6704 -6708 0
8287 -6694 -6703 -6709 0
c ((1<=(aux1672 + aux1675 + aux1676))=tv=SATLiteral(8288))
-8288 -6694 -6703 -6708 0
8288 6708 0
8288 6703 0
8288 6704 0
8288 6706 0
8288 6694 0
8288 6694 6703 0
8288 6694 6704 0
8288 6694 6706 0
8288 6695 0
8288 6695 6703 0
8288 6695 6704 0
8288 6695 6706 0
c (((aux1678 + aux1681 + aux1682)<=1)=tv=SATLiteral(8289))
-8289 6733 0
-8289 6727 6732 0
-8289 6728 0
-8289 6730 0
-8289 6718 6732 0
-8289 6718 6727 0
-8289 6718 6728 0
-8289 6718 6730 0
-8289 6719 0
-8289 6719 6727 0
-8289 6719 6728 0
-8289 6719 6730 0
8289 -6719 -6727 -6732 0
8289 -6718 -6728 -6732 0
8289 -6718 -6727 -6733 0
c ((1<=(aux1678 + aux1681 + aux1682))=tv=SATLiteral(8290))
-8290 -6718 -6727 -6732 0
8290 6732 0
8290 6727 0
8290 6728 0
8290 6730 0
8290 6718 0
8290 6718 6727 0
8290 6718 6728 0
8290 6718 6730 0
8290 6719 0
8290 6719 6727 0
8290 6719 6728 0
8290 6719 6730 0
c (((aux1684 + aux1687 + aux1688)<=1)=tv=SATLiteral(8291))
-8291 6757 0
-8291 6751 6756 0
-8291 6752 0
-8291 6754 0
-8291 6742 6756 0
-8291 6742 6751 0
-8291 6742 6752 0
-8291 6742 6754 0
-8291 6743 0
-8291 6743 6751 0
-8291 6743 6752 0
-8291 6743 6754 0
8291 -6743 -6751 -6756 0
8291 -6742 -6752 -6756 0
8291 -6742 -6751 -6757 0
c ((1<=(aux1684 + aux1687 + aux1688))=tv=SATLiteral(8292))
-8292 -6742 -6751 -6756 0
8292 6756 0
8292 6751 0
8292 6752 0
8292 6754 0
8292 6742 0
8292 6742 6751 0
8292 6742 6752 0
8292 6742 6754 0
8292 6743 0
8292 6743 6751 0
8292 6743 6752 0
8292 6743 6754 0
c (((aux1690 + aux1693 + aux1694)<=1)=tv=SATLiteral(8293))
-8293 6781 0
-8293 6775 6780 0
-8293 6776 0
-8293 6778 0
-8293 6766 6780 0
-8293 6766 6775 0
-8293 6766 6776 0
-8293 6766 6778 0
-8293 6767 0
-8293 6767 6775 0
-8293 6767 6776 0
-8293 6767 6778 0
8293 -6767 -6775 -6780 0
8293 -6766 -6776 -6780 0
8293 -6766 -6775 -6781 0
c ((1<=(aux1690 + aux1693 + aux1694))=tv=SATLiteral(8294))
-8294 -6766 -6775 -6780 0
8294 6780 0
8294 6775 0
8294 6776 0
8294 6778 0
8294 6766 0
8294 6766 6775 0
8294 6766 6776 0
8294 6766 6778 0
8294 6767 0
8294 6767 6775 0
8294 6767 6776 0
8294 6767 6778 0
c (((aux1696 + aux1699 + aux1700)<=1)=tv=SATLiteral(8295))
-8295 6805 0
-8295 6799 6804 0
-8295 6800 0
-8295 6802 0
-8295 6790 6804 0
-8295 6790 6799 0
-8295 6790 6800 0
-8295 6790 6802 0
-8295 6791 0
-8295 6791 6799 0
-8295 6791 6800 0
-8295 6791 6802 0
8295 -6791 -6799 -6804 0
8295 -6790 -6800 -6804 0
8295 -6790 -6799 -6805 0
c ((1<=(aux1696 + aux1699 + aux1700))=tv=SATLiteral(8296))
-8296 -6790 -6799 -6804 0
8296 6804 0
8296 6799 0
8296 6800 0
8296 6802 0
8296 6790 0
8296 6790 6799 0
8296 6790 6800 0
8296 6790 6802 0
8296 6791 0
8296 6791 6799 0
8296 6791 6800 0
8296 6791 6802 0
c (((aux1702 + aux1705 + aux1706)<=1)=tv=SATLiteral(8297))
-8297 6829 0
-8297 6823 6828 0
-8297 6824 0
-8297 6826 0
-8297 6814 6828 0
-8297 6814 6823 0
-8297 6814 6824 0
-8297 6814 6826 0
-8297 6815 0
-8297 6815 6823 0
-8297 6815 6824 0
-8297 6815 6826 0
8297 -6815 -6823 -6828 0
8297 -6814 -6824 -6828 0
8297 -6814 -6823 -6829 0
c ((1<=(aux1702 + aux1705 + aux1706))=tv=SATLiteral(8298))
-8298 -6814 -6823 -6828 0
8298 6828 0
8298 6823 0
8298 6824 0
8298 6826 0
8298 6814 0
8298 6814 6823 0
8298 6814 6824 0
8298 6814 6826 0
8298 6815 0
8298 6815 6823 0
8298 6815 6824 0
8298 6815 6826 0
c (((aux1708 + aux1711 + aux1712)<=1)=tv=SATLiteral(8299))
-8299 6853 0
-8299 6847 6852 0
-8299 6848 0
-8299 6850 0
-8299 6838 6852 0
-8299 6838 6847 0
-8299 6838 6848 0
-8299 6838 6850 0
-8299 6839 0
-8299 6839 6847 0
-8299 6839 6848 0
-8299 6839 6850 0
8299 -6839 -6847 -6852 0
8299 -6838 -6848 -6852 0
8299 -6838 -6847 -6853 0
c ((1<=(aux1708 + aux1711 + aux1712))=tv=SATLiteral(8300))
-8300 -6838 -6847 -6852 0
8300 6852 0
8300 6847 0
8300 6848 0
8300 6850 0
8300 6838 0
8300 6838 6847 0
8300 6838 6848 0
8300 6838 6850 0
8300 6839 0
8300 6839 6847 0
8300 6839 6848 0
8300 6839 6850 0
c (((aux1714 + aux1717 + aux1718)<=1)=tv=SATLiteral(8301))
-8301 6877 0
-8301 6871 6876 0
-8301 6872 0
-8301 6874 0
-8301 6862 6876 0
-8301 6862 6871 0
-8301 6862 6872 0
-8301 6862 6874 0
-8301 6863 0
-8301 6863 6871 0
-8301 6863 6872 0
-8301 6863 6874 0
8301 -6863 -6871 -6876 0
8301 -6862 -6872 -6876 0
8301 -6862 -6871 -6877 0
c ((1<=(aux1714 + aux1717 + aux1718))=tv=SATLiteral(8302))
-8302 -6862 -6871 -6876 0
8302 6876 0
8302 6871 0
8302 6872 0
8302 6874 0
8302 6862 0
8302 6862 6871 0
8302 6862 6872 0
8302 6862 6874 0
8302 6863 0
8302 6863 6871 0
8302 6863 6872 0
8302 6863 6874 0
c (((aux1720 + aux1723 + aux1724)<=1)=tv=SATLiteral(8303))
-8303 6901 0
-8303 6895 6900 0
-8303 6896 0
-8303 6898 0
-8303 6886 6900 0
-8303 6886 6895 0
-8303 6886 6896 0
-8303 6886 6898 0
-8303 6887 0
-8303 6887 6895 0
-8303 6887 6896 0
-8303 6887 6898 0
8303 -6887 -6895 -6900 0
8303 -6886 -6896 -6900 0
8303 -6886 -6895 -6901 0
c ((1<=(aux1720 + aux1723 + aux1724))=tv=SATLiteral(8304))
-8304 -6886 -6895 -6900 0
8304 6900 0
8304 6895 0
8304 6896 0
8304 6898 0
8304 6886 0
8304 6886 6895 0
8304 6886 6896 0
8304 6886 6898 0
8304 6887 0
8304 6887 6895 0
8304 6887 6896 0
8304 6887 6898 0
c (((aux1726 + aux1729 + aux1730)<=1)=tv=SATLiteral(8305))
-8305 6925 0
-8305 6919 6924 0
-8305 6920 0
-8305 6922 0
-8305 6910 6924 0
-8305 6910 6919 0
-8305 6910 6920 0
-8305 6910 6922 0
-8305 6911 0
-8305 6911 6919 0
-8305 6911 6920 0
-8305 6911 6922 0
8305 -6911 -6919 -6924 0
8305 -6910 -6920 -6924 0
8305 -6910 -6919 -6925 0
c ((1<=(aux1726 + aux1729 + aux1730))=tv=SATLiteral(8306))
-8306 -6910 -6919 -6924 0
8306 6924 0
8306 6919 0
8306 6920 0
8306 6922 0
8306 6910 0
8306 6910 6919 0
8306 6910 6920 0
8306 6910 6922 0
8306 6911 0
8306 6911 6919 0
8306 6911 6920 0
8306 6911 6922 0
c (((aux1732 + aux1735 + aux1736)<=1)=tv=SATLiteral(8307))
-8307 6949 0
-8307 6943 6948 0
-8307 6944 0
-8307 6946 0
-8307 6934 6948 0
-8307 6934 6943 0
-8307 6934 6944 0
-8307 6934 6946 0
-8307 6935 0
-8307 6935 6943 0
-8307 6935 6944 0
-8307 6935 6946 0
8307 -6935 -6943 -6948 0
8307 -6934 -6944 -6948 0
8307 -6934 -6943 -6949 0
c ((1<=(aux1732 + aux1735 + aux1736))=tv=SATLiteral(8308))
-8308 -6934 -6943 -6948 0
8308 6948 0
8308 6943 0
8308 6944 0
8308 6946 0
8308 6934 0
8308 6934 6943 0
8308 6934 6944 0
8308 6934 6946 0
8308 6935 0
8308 6935 6943 0
8308 6935 6944 0
8308 6935 6946 0
c (((aux1738 + aux1741 + aux1742)<=1)=tv=SATLiteral(8309))
-8309 6973 0
-8309 6967 6972 0
-8309 6968 0
-8309 6970 0
-8309 6958 6972 0
-8309 6958 6967 0
-8309 6958 6968 0
-8309 6958 6970 0
-8309 6959 0
-8309 6959 6967 0
-8309 6959 6968 0
-8309 6959 6970 0
8309 -6959 -6967 -6972 0
8309 -6958 -6968 -6972 0
8309 -6958 -6967 -6973 0
c ((1<=(aux1738 + aux1741 + aux1742))=tv=SATLiteral(8310))
-8310 -6958 -6967 -6972 0
8310 6972 0
8310 6967 0
8310 6968 0
8310 6970 0
8310 6958 0
8310 6958 6967 0
8310 6958 6968 0
8310 6958 6970 0
8310 6959 0
8310 6959 6967 0
8310 6959 6968 0
8310 6959 6970 0
c (((aux1744 + aux1747 + aux1748)<=1)=tv=SATLiteral(8311))
-8311 6997 0
-8311 6991 6996 0
-8311 6992 0
-8311 6994 0
-8311 6982 6996 0
-8311 6982 6991 0
-8311 6982 6992 0
-8311 6982 6994 0
-8311 6983 0
-8311 6983 6991 0
-8311 6983 6992 0
-8311 6983 6994 0
8311 -6983 -6991 -6996 0
8311 -6982 -6992 -6996 0
8311 -6982 -6991 -6997 0
c ((1<=(aux1744 + aux1747 + aux1748))=tv=SATLiteral(8312))
-8312 -6982 -6991 -6996 0
8312 6996 0
8312 6991 0
8312 6992 0
8312 6994 0
8312 6982 0
8312 6982 6991 0
8312 6982 6992 0
8312 6982 6994 0
8312 6983 0
8312 6983 6991 0
8312 6983 6992 0
8312 6983 6994 0
c (((aux1750 + aux1753 + aux1754)<=1)=tv=SATLiteral(8313))
-8313 7021 0
-8313 7015 7020 0
-8313 7016 0
-8313 7018 0
-8313 7006 7020 0
-8313 7006 7015 0
-8313 7006 7016 0
-8313 7006 7018 0
-8313 7007 0
-8313 7007 7015 0
-8313 7007 7016 0
-8313 7007 7018 0
8313 -7007 -7015 -7020 0
8313 -7006 -7016 -7020 0
8313 -7006 -7015 -7021 0
c ((1<=(aux1750 + aux1753 + aux1754))=tv=SATLiteral(8314))
-8314 -7006 -7015 -7020 0
8314 7020 0
8314 7015 0
8314 7016 0
8314 7018 0
8314 7006 0
8314 7006 7015 0
8314 7006 7016 0
8314 7006 7018 0
8314 7007 0
8314 7007 7015 0
8314 7007 7016 0
8314 7007 7018 0
c (((aux1756 + aux1759 + aux1760)<=1)=tv=SATLiteral(8315))
-8315 7045 0
-8315 7039 7044 0
-8315 7040 0
-8315 7042 0
-8315 7030 7044 0
-8315 7030 7039 0
-8315 7030 7040 0
-8315 7030 7042 0
-8315 7031 0
-8315 7031 7039 0
-8315 7031 7040 0
-8315 7031 7042 0
8315 -7031 -7039 -7044 0
8315 -7030 -7040 -7044 0
8315 -7030 -7039 -7045 0
c ((1<=(aux1756 + aux1759 + aux1760))=tv=SATLiteral(8316))
-8316 -7030 -7039 -7044 0
8316 7044 0
8316 7039 0
8316 7040 0
8316 7042 0
8316 7030 0
8316 7030 7039 0
8316 7030 7040 0
8316 7030 7042 0
8316 7031 0
8316 7031 7039 0
8316 7031 7040 0
8316 7031 7042 0
c (((aux1762 + aux1765 + aux1766)<=1)=tv=SATLiteral(8317))
-8317 7069 0
-8317 7063 7068 0
-8317 7064 0
-8317 7066 0
-8317 7054 7068 0
-8317 7054 7063 0
-8317 7054 7064 0
-8317 7054 7066 0
-8317 7055 0
-8317 7055 7063 0
-8317 7055 7064 0
-8317 7055 7066 0
8317 -7055 -7063 -7068 0
8317 -7054 -7064 -7068 0
8317 -7054 -7063 -7069 0
c ((1<=(aux1762 + aux1765 + aux1766))=tv=SATLiteral(8318))
-8318 -7054 -7063 -7068 0
8318 7068 0
8318 7063 0
8318 7064 0
8318 7066 0
8318 7054 0
8318 7054 7063 0
8318 7054 7064 0
8318 7054 7066 0
8318 7055 0
8318 7055 7063 0
8318 7055 7064 0
8318 7055 7066 0
c (((aux1768 + aux1771 + aux1772)<=1)=tv=SATLiteral(8319))
-8319 7093 0
-8319 7087 7092 0
-8319 7088 0
-8319 7090 0
-8319 7078 7092 0
-8319 7078 7087 0
-8319 7078 7088 0
-8319 7078 7090 0
-8319 7079 0
-8319 7079 7087 0
-8319 7079 7088 0
-8319 7079 7090 0
8319 -7079 -7087 -7092 0
8319 -7078 -7088 -7092 0
8319 -7078 -7087 -7093 0
c ((1<=(aux1768 + aux1771 + aux1772))=tv=SATLiteral(8320))
-8320 -7078 -7087 -7092 0
8320 7092 0
8320 7087 0
8320 7088 0
8320 7090 0
8320 7078 0
8320 7078 7087 0
8320 7078 7088 0
8320 7078 7090 0
8320 7079 0
8320 7079 7087 0
8320 7079 7088 0
8320 7079 7090 0
c (((aux1774 + aux1777 + aux1778)<=1)=tv=SATLiteral(8321))
-8321 7117 0
-8321 7111 7116 0
-8321 7112 0
-8321 7114 0
-8321 7102 7116 0
-8321 7102 7111 0
-8321 7102 7112 0
-8321 7102 7114 0
-8321 7103 0
-8321 7103 7111 0
-8321 7103 7112 0
-8321 7103 7114 0
8321 -7103 -7111 -7116 0
8321 -7102 -7112 -7116 0
8321 -7102 -7111 -7117 0
c ((1<=(aux1774 + aux1777 + aux1778))=tv=SATLiteral(8322))
-8322 -7102 -7111 -7116 0
8322 7116 0
8322 7111 0
8322 7112 0
8322 7114 0
8322 7102 0
8322 7102 7111 0
8322 7102 7112 0
8322 7102 7114 0
8322 7103 0
8322 7103 7111 0
8322 7103 7112 0
8322 7103 7114 0
c (((aux1780 + aux1783 + aux1784)<=1)=tv=SATLiteral(8323))
-8323 7141 0
-8323 7135 7140 0
-8323 7136 0
-8323 7138 0
-8323 7126 7140 0
-8323 7126 7135 0
-8323 7126 7136 0
-8323 7126 7138 0
-8323 7127 0
-8323 7127 7135 0
-8323 7127 7136 0
-8323 7127 7138 0
8323 -7127 -7135 -7140 0
8323 -7126 -7136 -7140 0
8323 -7126 -7135 -7141 0
c ((1<=(aux1780 + aux1783 + aux1784))=tv=SATLiteral(8324))
-8324 -7126 -7135 -7140 0
8324 7140 0
8324 7135 0
8324 7136 0
8324 7138 0
8324 7126 0
8324 7126 7135 0
8324 7126 7136 0
8324 7126 7138 0
8324 7127 0
8324 7127 7135 0
8324 7127 7136 0
8324 7127 7138 0
c (((aux1786 + aux1789 + aux1790)<=1)=tv=SATLiteral(8325))
-8325 7165 0
-8325 7159 7164 0
-8325 7160 0
-8325 7162 0
-8325 7150 7164 0
-8325 7150 7159 0
-8325 7150 7160 0
-8325 7150 7162 0
-8325 7151 0
-8325 7151 7159 0
-8325 7151 7160 0
-8325 7151 7162 0
8325 -7151 -7159 -7164 0
8325 -7150 -7160 -7164 0
8325 -7150 -7159 -7165 0
c ((1<=(aux1786 + aux1789 + aux1790))=tv=SATLiteral(8326))
-8326 -7150 -7159 -7164 0
8326 7164 0
8326 7159 0
8326 7160 0
8326 7162 0
8326 7150 0
8326 7150 7159 0
8326 7150 7160 0
8326 7150 7162 0
8326 7151 0
8326 7151 7159 0
8326 7151 7160 0
8326 7151 7162 0
c (((aux1792 + aux1795 + aux1796)<=1)=tv=SATLiteral(8327))
-8327 7189 0
-8327 7183 7188 0
-8327 7184 0
-8327 7186 0
-8327 7174 7188 0
-8327 7174 7183 0
-8327 7174 7184 0
-8327 7174 7186 0
-8327 7175 0
-8327 7175 7183 0
-8327 7175 7184 0
-8327 7175 7186 0
8327 -7175 -7183 -7188 0
8327 -7174 -7184 -7188 0
8327 -7174 -7183 -7189 0
c ((1<=(aux1792 + aux1795 + aux1796))=tv=SATLiteral(8328))
-8328 -7174 -7183 -7188 0
8328 7188 0
8328 7183 0
8328 7184 0
8328 7186 0
8328 7174 0
8328 7174 7183 0
8328 7174 7184 0
8328 7174 7186 0
8328 7175 0
8328 7175 7183 0
8328 7175 7184 0
8328 7175 7186 0
c (((aux1798 + aux1801 + aux1802)<=1)=tv=SATLiteral(8329))
-8329 7213 0
-8329 7207 7212 0
-8329 7208 0
-8329 7210 0
-8329 7198 7212 0
-8329 7198 7207 0
-8329 7198 7208 0
-8329 7198 7210 0
-8329 7199 0
-8329 7199 7207 0
-8329 7199 7208 0
-8329 7199 7210 0
8329 -7199 -7207 -7212 0
8329 -7198 -7208 -7212 0
8329 -7198 -7207 -7213 0
c ((1<=(aux1798 + aux1801 + aux1802))=tv=SATLiteral(8330))
-8330 -7198 -7207 -7212 0
8330 7212 0
8330 7207 0
8330 7208 0
8330 7210 0
8330 7198 0
8330 7198 7207 0
8330 7198 7208 0
8330 7198 7210 0
8330 7199 0
8330 7199 7207 0
8330 7199 7208 0
8330 7199 7210 0
c (((aux1804 + aux1807 + aux1808)<=1)=tv=SATLiteral(8331))
-8331 7237 0
-8331 7231 7236 0
-8331 7232 0
-8331 7234 0
-8331 7222 7236 0
-8331 7222 7231 0
-8331 7222 7232 0
-8331 7222 7234 0
-8331 7223 0
-8331 7223 7231 0
-8331 7223 7232 0
-8331 7223 7234 0
8331 -7223 -7231 -7236 0
8331 -7222 -7232 -7236 0
8331 -7222 -7231 -7237 0
c ((1<=(aux1804 + aux1807 + aux1808))=tv=SATLiteral(8332))
-8332 -7222 -7231 -7236 0
8332 7236 0
8332 7231 0
8332 7232 0
8332 7234 0
8332 7222 0
8332 7222 7231 0
8332 7222 7232 0
8332 7222 7234 0
8332 7223 0
8332 7223 7231 0
8332 7223 7232 0
8332 7223 7234 0
c (((aux1810 + aux1813 + aux1814)<=1)=tv=SATLiteral(8333))
-8333 7261 0
-8333 7255 7260 0
-8333 7256 0
-8333 7258 0
-8333 7246 7260 0
-8333 7246 7255 0
-8333 7246 7256 0
-8333 7246 7258 0
-8333 7247 0
-8333 7247 7255 0
-8333 7247 7256 0
-8333 7247 7258 0
8333 -7247 -7255 -7260 0
8333 -7246 -7256 -7260 0
8333 -7246 -7255 -7261 0
c ((1<=(aux1810 + aux1813 + aux1814))=tv=SATLiteral(8334))
-8334 -7246 -7255 -7260 0
8334 7260 0
8334 7255 0
8334 7256 0
8334 7258 0
8334 7246 0
8334 7246 7255 0
8334 7246 7256 0
8334 7246 7258 0
8334 7247 0
8334 7247 7255 0
8334 7247 7256 0
8334 7247 7258 0
c (((aux1816 + aux1819 + aux1820)<=1)=tv=SATLiteral(8335))
-8335 7285 0
-8335 7279 7284 0
-8335 7280 0
-8335 7282 0
-8335 7270 7284 0
-8335 7270 7279 0
-8335 7270 7280 0
-8335 7270 7282 0
-8335 7271 0
-8335 7271 7279 0
-8335 7271 7280 0
-8335 7271 7282 0
8335 -7271 -7279 -7284 0
8335 -7270 -7280 -7284 0
8335 -7270 -7279 -7285 0
c ((1<=(aux1816 + aux1819 + aux1820))=tv=SATLiteral(8336))
-8336 -7270 -7279 -7284 0
8336 7284 0
8336 7279 0
8336 7280 0
8336 7282 0
8336 7270 0
8336 7270 7279 0
8336 7270 7280 0
8336 7270 7282 0
8336 7271 0
8336 7271 7279 0
8336 7271 7280 0
8336 7271 7282 0
c (((aux1822 + aux1825 + aux1826)<=1)=tv=SATLiteral(8337))
-8337 7309 0
-8337 7303 7308 0
-8337 7304 0
-8337 7306 0
-8337 7294 7308 0
-8337 7294 7303 0
-8337 7294 7304 0
-8337 7294 7306 0
-8337 7295 0
-8337 7295 7303 0
-8337 7295 7304 0
-8337 7295 7306 0
8337 -7295 -7303 -7308 0
8337 -7294 -7304 -7308 0
8337 -7294 -7303 -7309 0
c ((1<=(aux1822 + aux1825 + aux1826))=tv=SATLiteral(8338))
-8338 -7294 -7303 -7308 0
8338 7308 0
8338 7303 0
8338 7304 0
8338 7306 0
8338 7294 0
8338 7294 7303 0
8338 7294 7304 0
8338 7294 7306 0
8338 7295 0
8338 7295 7303 0
8338 7295 7304 0
8338 7295 7306 0
c (((aux1828 + aux1831 + aux1832)<=1)=tv=SATLiteral(8339))
-8339 7333 0
-8339 7327 7332 0
-8339 7328 0
-8339 7330 0
-8339 7318 7332 0
-8339 7318 7327 0
-8339 7318 7328 0
-8339 7318 7330 0
-8339 7319 0
-8339 7319 7327 0
-8339 7319 7328 0
-8339 7319 7330 0
8339 -7319 -7327 -7332 0
8339 -7318 -7328 -7332 0
8339 -7318 -7327 -7333 0
c ((1<=(aux1828 + aux1831 + aux1832))=tv=SATLiteral(8340))
-8340 -7318 -7327 -7332 0
8340 7332 0
8340 7327 0
8340 7328 0
8340 7330 0
8340 7318 0
8340 7318 7327 0
8340 7318 7328 0
8340 7318 7330 0
8340 7319 0
8340 7319 7327 0
8340 7319 7328 0
8340 7319 7330 0
c (((aux1834 + aux1837 + aux1838)<=1)=tv=SATLiteral(8341))
-8341 7357 0
-8341 7351 7356 0
-8341 7352 0
-8341 7354 0
-8341 7342 7356 0
-8341 7342 7351 0
-8341 7342 7352 0
-8341 7342 7354 0
-8341 7343 0
-8341 7343 7351 0
-8341 7343 7352 0
-8341 7343 7354 0
8341 -7343 -7351 -7356 0
8341 -7342 -7352 -7356 0
8341 -7342 -7351 -7357 0
c ((1<=(aux1834 + aux1837 + aux1838))=tv=SATLiteral(8342))
-8342 -7342 -7351 -7356 0
8342 7356 0
8342 7351 0
8342 7352 0
8342 7354 0
8342 7342 0
8342 7342 7351 0
8342 7342 7352 0
8342 7342 7354 0
8342 7343 0
8342 7343 7351 0
8342 7343 7352 0
8342 7343 7354 0
c (((aux1840 + aux1843 + aux1844)<=1)=tv=SATLiteral(8343))
-8343 7381 0
-8343 7375 7380 0
-8343 7376 0
-8343 7378 0
-8343 7366 7380 0
-8343 7366 7375 0
-8343 7366 7376 0
-8343 7366 7378 0
-8343 7367 0
-8343 7367 7375 0
-8343 7367 7376 0
-8343 7367 7378 0
8343 -7367 -7375 -7380 0
8343 -7366 -7376 -7380 0
8343 -7366 -7375 -7381 0
c ((1<=(aux1840 + aux1843 + aux1844))=tv=SATLiteral(8344))
-8344 -7366 -7375 -7380 0
8344 7380 0
8344 7375 0
8344 7376 0
8344 7378 0
8344 7366 0
8344 7366 7375 0
8344 7366 7376 0
8344 7366 7378 0
8344 7367 0
8344 7367 7375 0
8344 7367 7376 0
8344 7367 7378 0
c (((aux1846 + aux1849 + aux1850)<=1)=tv=SATLiteral(8345))
-8345 7405 0
-8345 7399 7404 0
-8345 7400 0
-8345 7402 0
-8345 7390 7404 0
-8345 7390 7399 0
-8345 7390 7400 0
-8345 7390 7402 0
-8345 7391 0
-8345 7391 7399 0
-8345 7391 7400 0
-8345 7391 7402 0
8345 -7391 -7399 -7404 0
8345 -7390 -7400 -7404 0
8345 -7390 -7399 -7405 0
c ((1<=(aux1846 + aux1849 + aux1850))=tv=SATLiteral(8346))
-8346 -7390 -7399 -7404 0
8346 7404 0
8346 7399 0
8346 7400 0
8346 7402 0
8346 7390 0
8346 7390 7399 0
8346 7390 7400 0
8346 7390 7402 0
8346 7391 0
8346 7391 7399 0
8346 7391 7400 0
8346 7391 7402 0
c (((aux1852 + aux1855 + aux1856)<=1)=tv=SATLiteral(8347))
-8347 7429 0
-8347 7423 7428 0
-8347 7424 0
-8347 7426 0
-8347 7414 7428 0
-8347 7414 7423 0
-8347 7414 7424 0
-8347 7414 7426 0
-8347 7415 0
-8347 7415 7423 0
-8347 7415 7424 0
-8347 7415 7426 0
8347 -7415 -7423 -7428 0
8347 -7414 -7424 -7428 0
8347 -7414 -7423 -7429 0
c ((1<=(aux1852 + aux1855 + aux1856))=tv=SATLiteral(8348))
-8348 -7414 -7423 -7428 0
8348 7428 0
8348 7423 0
8348 7424 0
8348 7426 0
8348 7414 0
8348 7414 7423 0
8348 7414 7424 0
8348 7414 7426 0
8348 7415 0
8348 7415 7423 0
8348 7415 7424 0
8348 7415 7426 0
c (((aux1858 + aux1861 + aux1862)<=1)=tv=SATLiteral(8349))
-8349 7453 0
-8349 7447 7452 0
-8349 7448 0
-8349 7450 0
-8349 7438 7452 0
-8349 7438 7447 0
-8349 7438 7448 0
-8349 7438 7450 0
-8349 7439 0
-8349 7439 7447 0
-8349 7439 7448 0
-8349 7439 7450 0
8349 -7439 -7447 -7452 0
8349 -7438 -7448 -7452 0
8349 -7438 -7447 -7453 0
c ((1<=(aux1858 + aux1861 + aux1862))=tv=SATLiteral(8350))
-8350 -7438 -7447 -7452 0
8350 7452 0
8350 7447 0
8350 7448 0
8350 7450 0
8350 7438 0
8350 7438 7447 0
8350 7438 7448 0
8350 7438 7450 0
8350 7439 0
8350 7439 7447 0
8350 7439 7448 0
8350 7439 7450 0
c (((aux1864 + aux1867 + aux1868)<=1)=tv=SATLiteral(8351))
-8351 7477 0
-8351 7471 7476 0
-8351 7472 0
-8351 7474 0
-8351 7462 7476 0
-8351 7462 7471 0
-8351 7462 7472 0
-8351 7462 7474 0
-8351 7463 0
-8351 7463 7471 0
-8351 7463 7472 0
-8351 7463 7474 0
8351 -7463 -7471 -7476 0
8351 -7462 -7472 -7476 0
8351 -7462 -7471 -7477 0
c ((1<=(aux1864 + aux1867 + aux1868))=tv=SATLiteral(8352))
-8352 -7462 -7471 -7476 0
8352 7476 0
8352 7471 0
8352 7472 0
8352 7474 0
8352 7462 0
8352 7462 7471 0
8352 7462 7472 0
8352 7462 7474 0
8352 7463 0
8352 7463 7471 0
8352 7463 7472 0
8352 7463 7474 0
c (((aux1870 + aux1873 + aux1874)<=1)=tv=SATLiteral(8353))
-8353 7501 0
-8353 7495 7500 0
-8353 7496 0
-8353 7498 0
-8353 7486 7500 0
-8353 7486 7495 0
-8353 7486 7496 0
-8353 7486 7498 0
-8353 7487 0
-8353 7487 7495 0
-8353 7487 7496 0
-8353 7487 7498 0
8353 -7487 -7495 -7500 0
8353 -7486 -7496 -7500 0
8353 -7486 -7495 -7501 0
c ((1<=(aux1870 + aux1873 + aux1874))=tv=SATLiteral(8354))
-8354 -7486 -7495 -7500 0
8354 7500 0
8354 7495 0
8354 7496 0
8354 7498 0
8354 7486 0
8354 7486 7495 0
8354 7486 7496 0
8354 7486 7498 0
8354 7487 0
8354 7487 7495 0
8354 7487 7496 0
8354 7487 7498 0
c (((aux1876 + aux1879 + aux1880)<=1)=tv=SATLiteral(8355))
-8355 7525 0
-8355 7519 7524 0
-8355 7520 0
-8355 7522 0
-8355 7510 7524 0
-8355 7510 7519 0
-8355 7510 7520 0
-8355 7510 7522 0
-8355 7511 0
-8355 7511 7519 0
-8355 7511 7520 0
-8355 7511 7522 0
8355 -7511 -7519 -7524 0
8355 -7510 -7520 -7524 0
8355 -7510 -7519 -7525 0
c ((1<=(aux1876 + aux1879 + aux1880))=tv=SATLiteral(8356))
-8356 -7510 -7519 -7524 0
8356 7524 0
8356 7519 0
8356 7520 0
8356 7522 0
8356 7510 0
8356 7510 7519 0
8356 7510 7520 0
8356 7510 7522 0
8356 7511 0
8356 7511 7519 0
8356 7511 7520 0
8356 7511 7522 0
c (((aux1882 + aux1885 + aux1886)<=1)=tv=SATLiteral(8357))
-8357 7549 0
-8357 7543 7548 0
-8357 7544 0
-8357 7546 0
-8357 7534 7548 0
-8357 7534 7543 0
-8357 7534 7544 0
-8357 7534 7546 0
-8357 7535 0
-8357 7535 7543 0
-8357 7535 7544 0
-8357 7535 7546 0
8357 -7535 -7543 -7548 0
8357 -7534 -7544 -7548 0
8357 -7534 -7543 -7549 0
c ((1<=(aux1882 + aux1885 + aux1886))=tv=SATLiteral(8358))
-8358 -7534 -7543 -7548 0
8358 7548 0
8358 7543 0
8358 7544 0
8358 7546 0
8358 7534 0
8358 7534 7543 0
8358 7534 7544 0
8358 7534 7546 0
8358 7535 0
8358 7535 7543 0
8358 7535 7544 0
8358 7535 7546 0
c (((aux1888 + aux1891 + aux1892)<=1)=tv=SATLiteral(8359))
-8359 7573 0
-8359 7567 7572 0
-8359 7568 0
-8359 7570 0
-8359 7558 7572 0
-8359 7558 7567 0
-8359 7558 7568 0
-8359 7558 7570 0
-8359 7559 0
-8359 7559 7567 0
-8359 7559 7568 0
-8359 7559 7570 0
8359 -7559 -7567 -7572 0
8359 -7558 -7568 -7572 0
8359 -7558 -7567 -7573 0
c ((1<=(aux1888 + aux1891 + aux1892))=tv=SATLiteral(8360))
-8360 -7558 -7567 -7572 0
8360 7572 0
8360 7567 0
8360 7568 0
8360 7570 0
8360 7558 0
8360 7558 7567 0
8360 7558 7568 0
8360 7558 7570 0
8360 7559 0
8360 7559 7567 0
8360 7559 7568 0
8360 7559 7570 0
c (((aux1894 + aux1897 + aux1898)<=1)=tv=SATLiteral(8361))
-8361 7597 0
-8361 7591 7596 0
-8361 7592 0
-8361 7594 0
-8361 7582 7596 0
-8361 7582 7591 0
-8361 7582 7592 0
-8361 7582 7594 0
-8361 7583 0
-8361 7583 7591 0
-8361 7583 7592 0
-8361 7583 7594 0
8361 -7583 -7591 -7596 0
8361 -7582 -7592 -7596 0
8361 -7582 -7591 -7597 0
c ((1<=(aux1894 + aux1897 + aux1898))=tv=SATLiteral(8362))
-8362 -7582 -7591 -7596 0
8362 7596 0
8362 7591 0
8362 7592 0
8362 7594 0
8362 7582 0
8362 7582 7591 0
8362 7582 7592 0
8362 7582 7594 0
8362 7583 0
8362 7583 7591 0
8362 7583 7592 0
8362 7583 7594 0
c (((aux1900 + aux1903 + aux1904)<=1)=tv=SATLiteral(8363))
-8363 7621 0
-8363 7615 7620 0
-8363 7616 0
-8363 7618 0
-8363 7606 7620 0
-8363 7606 7615 0
-8363 7606 7616 0
-8363 7606 7618 0
-8363 7607 0
-8363 7607 7615 0
-8363 7607 7616 0
-8363 7607 7618 0
8363 -7607 -7615 -7620 0
8363 -7606 -7616 -7620 0
8363 -7606 -7615 -7621 0
c ((1<=(aux1900 + aux1903 + aux1904))=tv=SATLiteral(8364))
-8364 -7606 -7615 -7620 0
8364 7620 0
8364 7615 0
8364 7616 0
8364 7618 0
8364 7606 0
8364 7606 7615 0
8364 7606 7616 0
8364 7606 7618 0
8364 7607 0
8364 7607 7615 0
8364 7607 7616 0
8364 7607 7618 0
c (((aux1906 + aux1909 + aux1910)<=1)=tv=SATLiteral(8365))
-8365 7645 0
-8365 7639 7644 0
-8365 7640 0
-8365 7642 0
-8365 7630 7644 0
-8365 7630 7639 0
-8365 7630 7640 0
-8365 7630 7642 0
-8365 7631 0
-8365 7631 7639 0
-8365 7631 7640 0
-8365 7631 7642 0
8365 -7631 -7639 -7644 0
8365 -7630 -7640 -7644 0
8365 -7630 -7639 -7645 0
c ((1<=(aux1906 + aux1909 + aux1910))=tv=SATLiteral(8366))
-8366 -7630 -7639 -7644 0
8366 7644 0
8366 7639 0
8366 7640 0
8366 7642 0
8366 7630 0
8366 7630 7639 0
8366 7630 7640 0
8366 7630 7642 0
8366 7631 0
8366 7631 7639 0
8366 7631 7640 0
8366 7631 7642 0
c (((aux1912 + aux1915 + aux1916)<=1)=tv=SATLiteral(8367))
-8367 7669 0
-8367 7663 7668 0
-8367 7664 0
-8367 7666 0
-8367 7654 7668 0
-8367 7654 7663 0
-8367 7654 7664 0
-8367 7654 7666 0
-8367 7655 0
-8367 7655 7663 0
-8367 7655 7664 0
-8367 7655 7666 0
8367 -7655 -7663 -7668 0
8367 -7654 -7664 -7668 0
8367 -7654 -7663 -7669 0
c ((1<=(aux1912 + aux1915 + aux1916))=tv=SATLiteral(8368))
-8368 -7654 -7663 -7668 0
8368 7668 0
8368 7663 0
8368 7664 0
8368 7666 0
8368 7654 0
8368 7654 7663 0
8368 7654 7664 0
8368 7654 7666 0
8368 7655 0
8368 7655 7663 0
8368 7655 7664 0
8368 7655 7666 0
c (((aux1918 + aux1921 + aux1922)<=1)=tv=SATLiteral(8369))
-8369 7693 0
-8369 7687 7692 0
-8369 7688 0
-8369 7690 0
-8369 7678 7692 0
-8369 7678 7687 0
-8369 7678 7688 0
-8369 7678 7690 0
-8369 7679 0
-8369 7679 7687 0
-8369 7679 7688 0
-8369 7679 7690 0
8369 -7679 -7687 -7692 0
8369 -7678 -7688 -7692 0
8369 -7678 -7687 -7693 0
c ((1<=(aux1918 + aux1921 + aux1922))=tv=SATLiteral(8370))
-8370 -7678 -7687 -7692 0
8370 7692 0
8370 7687 0
8370 7688 0
8370 7690 0
8370 7678 0
8370 7678 7687 0
8370 7678 7688 0
8370 7678 7690 0
8370 7679 0
8370 7679 7687 0
8370 7679 7688 0
8370 7679 7690 0
c (((aux1924 + aux1927 + aux1928)<=1)=tv=SATLiteral(8371))
-8371 7717 0
-8371 7711 7716 0
-8371 7712 0
-8371 7714 0
-8371 7702 7716 0
-8371 7702 7711 0
-8371 7702 7712 0
-8371 7702 7714 0
-8371 7703 0
-8371 7703 7711 0
-8371 7703 7712 0
-8371 7703 7714 0
8371 -7703 -7711 -7716 0
8371 -7702 -7712 -7716 0
8371 -7702 -7711 -7717 0
c ((1<=(aux1924 + aux1927 + aux1928))=tv=SATLiteral(8372))
-8372 -7702 -7711 -7716 0
8372 7716 0
8372 7711 0
8372 7712 0
8372 7714 0
8372 7702 0
8372 7702 7711 0
8372 7702 7712 0
8372 7702 7714 0
8372 7703 0
8372 7703 7711 0
8372 7703 7712 0
8372 7703 7714 0
c ((SATLiteral(7831) /\ SATLiteral(7832))=tv=SATLiteral(1300))
1300 -7831 -7832 0
7831 -1300 0
7832 -1300 0
c ((SATLiteral(7833) /\ SATLiteral(7834))=tv=SATLiteral(1301))
1301 -7833 -7834 0
7833 -1301 0
7834 -1301 0
c ((SATLiteral(7835) /\ SATLiteral(7836))=tv=SATLiteral(1302))
1302 -7835 -7836 0
7835 -1302 0
7836 -1302 0
c ((SATLiteral(7837) /\ SATLiteral(7838))=tv=SATLiteral(1303))
1303 -7837 -7838 0
7837 -1303 0
7838 -1303 0
c ((SATLiteral(7839) /\ SATLiteral(7840))=tv=SATLiteral(1304))
1304 -7839 -7840 0
7839 -1304 0
7840 -1304 0
c ((SATLiteral(7841) /\ SATLiteral(7842))=tv=SATLiteral(1305))
1305 -7841 -7842 0
7841 -1305 0
7842 -1305 0
c ((SATLiteral(7843) /\ SATLiteral(7844))=tv=SATLiteral(1306))
1306 -7843 -7844 0
7843 -1306 0
7844 -1306 0
c ((SATLiteral(7845) /\ SATLiteral(7846))=tv=SATLiteral(1307))
1307 -7845 -7846 0
7845 -1307 0
7846 -1307 0
c ((SATLiteral(7847) /\ SATLiteral(7848))=tv=SATLiteral(1308))
1308 -7847 -7848 0
7847 -1308 0
7848 -1308 0
c ((SATLiteral(7849) /\ SATLiteral(7850))=tv=SATLiteral(1309))
1309 -7849 -7850 0
7849 -1309 0
7850 -1309 0
c ((SATLiteral(7851) /\ SATLiteral(7852))=tv=SATLiteral(1310))
1310 -7851 -7852 0
7851 -1310 0
7852 -1310 0
c ((SATLiteral(7853) /\ SATLiteral(7854))=tv=SATLiteral(1311))
1311 -7853 -7854 0
7853 -1311 0
7854 -1311 0
c ((SATLiteral(7855) /\ SATLiteral(7856))=tv=SATLiteral(1312))
1312 -7855 -7856 0
7855 -1312 0
7856 -1312 0
c ((SATLiteral(7857) /\ SATLiteral(7858))=tv=SATLiteral(1313))
1313 -7857 -7858 0
7857 -1313 0
7858 -1313 0
c ((SATLiteral(7859) /\ SATLiteral(7860))=tv=SATLiteral(1314))
1314 -7859 -7860 0
7859 -1314 0
7860 -1314 0
c ((SATLiteral(7861) /\ SATLiteral(7862))=tv=SATLiteral(1315))
1315 -7861 -7862 0
7861 -1315 0
7862 -1315 0
c ((SATLiteral(7863) /\ SATLiteral(7864))=tv=SATLiteral(1316))
1316 -7863 -7864 0
7863 -1316 0
7864 -1316 0
c ((SATLiteral(7865) /\ SATLiteral(7866))=tv=SATLiteral(1317))
1317 -7865 -7866 0
7865 -1317 0
7866 -1317 0
c ((SATLiteral(7867) /\ SATLiteral(7868))=tv=SATLiteral(1318))
1318 -7867 -7868 0
7867 -1318 0
7868 -1318 0
c ((SATLiteral(7869) /\ SATLiteral(7870))=tv=SATLiteral(1319))
1319 -7869 -7870 0
7869 -1319 0
7870 -1319 0
c ((SATLiteral(7871) /\ SATLiteral(7872))=tv=SATLiteral(1320))
1320 -7871 -7872 0
7871 -1320 0
7872 -1320 0
c ((SATLiteral(7873) /\ SATLiteral(7874))=tv=SATLiteral(1321))
1321 -7873 -7874 0
7873 -1321 0
7874 -1321 0
c ((SATLiteral(7875) /\ SATLiteral(7876))=tv=SATLiteral(1322))
1322 -7875 -7876 0
7875 -1322 0
7876 -1322 0
c ((SATLiteral(7877) /\ SATLiteral(7878))=tv=SATLiteral(1323))
1323 -7877 -7878 0
7877 -1323 0
7878 -1323 0
c ((SATLiteral(7879) /\ SATLiteral(7880))=tv=SATLiteral(1324))
1324 -7879 -7880 0
7879 -1324 0
7880 -1324 0
c ((SATLiteral(7881) /\ SATLiteral(7882))=tv=SATLiteral(1325))
1325 -7881 -7882 0
7881 -1325 0
7882 -1325 0
c ((SATLiteral(7883) /\ SATLiteral(7884))=tv=SATLiteral(1326))
1326 -7883 -7884 0
7883 -1326 0
7884 -1326 0
c ((SATLiteral(7885) /\ SATLiteral(7886))=tv=SATLiteral(1327))
1327 -7885 -7886 0
7885 -1327 0
7886 -1327 0
c ((x_00003_00001 != x_00004_00001)=tv=SATLiteral(1328))
-272 407 1328 0
-274 409 1328 0
-276 411 1328 0
-278 413 1328 0
-280 415 1328 0
-282 417 1328 0
-284 419 1328 0
-286 421 1328 0
285 -420 1328 0
-407 272 1328 0
-409 274 1328 0
-411 276 1328 0
-413 278 1328 0
-415 280 1328 0
-417 282 1328 0
-419 284 1328 0
-421 286 1328 0
420 -285 1328 0
-272 -407 -1328 0
-274 -409 -1328 0
-276 -411 -1328 0
-278 -413 -1328 0
-280 -415 -1328 0
-282 -417 -1328 0
-284 -419 -1328 0
-286 -421 -1328 0
285 420 -1328 0
c ((x_00003_00002 != x_00004_00002)=tv=SATLiteral(1329))
-287 422 1329 0
-289 424 1329 0
-291 426 1329 0
-293 428 1329 0
-295 430 1329 0
-297 432 1329 0
-299 434 1329 0
-301 436 1329 0
300 -435 1329 0
-422 287 1329 0
-424 289 1329 0
-426 291 1329 0
-428 293 1329 0
-430 295 1329 0
-432 297 1329 0
-434 299 1329 0
-436 301 1329 0
435 -300 1329 0
-287 -422 -1329 0
-289 -424 -1329 0
-291 -426 -1329 0
-293 -428 -1329 0
-295 -430 -1329 0
-297 -432 -1329 0
-299 -434 -1329 0
-301 -436 -1329 0
300 435 -1329 0
c ((x_00003_00005 != x_00003_00006)=tv=SATLiteral(1330))
-332 347 1330 0
-334 349 1330 0
-336 351 1330 0
-338 353 1330 0
-340 355 1330 0
-342 357 1330 0
-344 359 1330 0
-346 361 1330 0
345 -360 1330 0
-347 332 1330 0
-349 334 1330 0
-351 336 1330 0
-353 338 1330 0
-355 340 1330 0
-357 342 1330 0
-359 344 1330 0
-361 346 1330 0
360 -345 1330 0
-332 -347 -1330 0
-334 -349 -1330 0
-336 -351 -1330 0
-338 -353 -1330 0
-340 -355 -1330 0
-342 -357 -1330 0
-344 -359 -1330 0
-346 -361 -1330 0
345 360 -1330 0
c ((x_00004_00005 != x_00004_00006)=tv=SATLiteral(1331))
-467 482 1331 0
-469 484 1331 0
-471 486 1331 0
-473 488 1331 0
-475 490 1331 0
-477 492 1331 0
-479 494 1331 0
-481 496 1331 0
480 -495 1331 0
-482 467 1331 0
-484 469 1331 0
-486 471 1331 0
-488 473 1331 0
-490 475 1331 0
-492 477 1331 0
-494 479 1331 0
-496 481 1331 0
495 -480 1331 0
-467 -482 -1331 0
-469 -484 -1331 0
-471 -486 -1331 0
-473 -488 -1331 0
-475 -490 -1331 0
-477 -492 -1331 0
-479 -494 -1331 0
-481 -496 -1331 0
480 495 -1331 0
c ((x_00007_00008 != x_00006_00008)=tv=SATLiteral(1332))
-917 782 1332 0
-919 784 1332 0
-921 786 1332 0
-923 788 1332 0
-925 790 1332 0
-927 792 1332 0
-929 794 1332 0
-931 796 1332 0
930 -795 1332 0
-782 917 1332 0
-784 919 1332 0
-786 921 1332 0
-788 923 1332 0
-790 925 1332 0
-792 927 1332 0
-794 929 1332 0
-796 931 1332 0
795 -930 1332 0
-917 -782 -1332 0
-919 -784 -1332 0
-921 -786 -1332 0
-923 -788 -1332 0
-925 -790 -1332 0
-927 -792 -1332 0
-929 -794 -1332 0
-931 -796 -1332 0
930 795 -1332 0
c ((x_00007_00009 != x_00006_00009)=tv=SATLiteral(1333))
-932 797 1333 0
-934 799 1333 0
-936 801 1333 0
-938 803 1333 0
-940 805 1333 0
-942 807 1333 0
-944 809 1333 0
-946 811 1333 0
945 -810 1333 0
-797 932 1333 0
-799 934 1333 0
-801 936 1333 0
-803 938 1333 0
-805 940 1333 0
-807 942 1333 0
-809 944 1333 0
-811 946 1333 0
810 -945 1333 0
-932 -797 -1333 0
-934 -799 -1333 0
-936 -801 -1333 0
-938 -803 -1333 0
-940 -805 -1333 0
-942 -807 -1333 0
-944 -809 -1333 0
-946 -811 -1333 0
945 810 -1333 0
c ((x_00007_00004 != x_00007_00005)=tv=SATLiteral(1334))
-857 872 1334 0
-859 874 1334 0
-861 876 1334 0
-863 878 1334 0
-865 880 1334 0
-867 882 1334 0
-869 884 1334 0
-871 886 1334 0
870 -885 1334 0
-872 857 1334 0
-874 859 1334 0
-876 861 1334 0
-878 863 1334 0
-880 865 1334 0
-882 867 1334 0
-884 869 1334 0
-886 871 1334 0
885 -870 1334 0
-857 -872 -1334 0
-859 -874 -1334 0
-861 -876 -1334 0
-863 -878 -1334 0
-865 -880 -1334 0
-867 -882 -1334 0
-869 -884 -1334 0
-871 -886 -1334 0
870 885 -1334 0
c ((SATLiteral(7887) /\ SATLiteral(7888))=tv=SATLiteral(1335))
1335 -7887 -7888 0
7887 -1335 0
7888 -1335 0
c ((SATLiteral(7889) /\ SATLiteral(7890))=tv=SATLiteral(1336))
1336 -7889 -7890 0
7889 -1336 0
7890 -1336 0
c ((SATLiteral(7891) /\ SATLiteral(7892))=tv=SATLiteral(1337))
1337 -7891 -7892 0
7891 -1337 0
7892 -1337 0
c ((SATLiteral(7893) /\ SATLiteral(7894))=tv=SATLiteral(1338))
1338 -7893 -7894 0
7893 -1338 0
7894 -1338 0
c ((SATLiteral(7895) /\ SATLiteral(7896))=tv=SATLiteral(1339))
1339 -7895 -7896 0
7895 -1339 0
7896 -1339 0
c ((SATLiteral(7897) /\ SATLiteral(7898))=tv=SATLiteral(1340))
1340 -7897 -7898 0
7897 -1340 0
7898 -1340 0
c ((SATLiteral(7899) /\ SATLiteral(7900))=tv=SATLiteral(1341))
1341 -7899 -7900 0
7899 -1341 0
7900 -1341 0
c ((SATLiteral(7901) /\ SATLiteral(7902))=tv=SATLiteral(1342))
1342 -7901 -7902 0
7901 -1342 0
7902 -1342 0
c ((SATLiteral(7903) /\ SATLiteral(7904))=tv=SATLiteral(1343))
1343 -7903 -7904 0
7903 -1343 0
7904 -1343 0
c ((SATLiteral(7905) /\ SATLiteral(7906))=tv=SATLiteral(1344))
1344 -7905 -7906 0
7905 -1344 0
7906 -1344 0
c ((SATLiteral(7907) /\ SATLiteral(7908))=tv=SATLiteral(1345))
1345 -7907 -7908 0
7907 -1345 0
7908 -1345 0
c ((SATLiteral(7909) /\ SATLiteral(7910))=tv=SATLiteral(1346))
1346 -7909 -7910 0
7909 -1346 0
7910 -1346 0
c ((SATLiteral(7911) /\ SATLiteral(7912))=tv=SATLiteral(1347))
1347 -7911 -7912 0
7911 -1347 0
7912 -1347 0
c ((SATLiteral(7913) /\ SATLiteral(7914))=tv=SATLiteral(1348))
1348 -7913 -7914 0
7913 -1348 0
7914 -1348 0
c ((SATLiteral(7915) /\ SATLiteral(7916))=tv=SATLiteral(1349))
1349 -7915 -7916 0
7915 -1349 0
7916 -1349 0
c ((SATLiteral(7917) /\ SATLiteral(7918))=tv=SATLiteral(1350))
1350 -7917 -7918 0
7917 -1350 0
7918 -1350 0
c ((SATLiteral(7919) /\ SATLiteral(7920))=tv=SATLiteral(1351))
1351 -7919 -7920 0
7919 -1351 0
7920 -1351 0
c ((SATLiteral(7921) /\ SATLiteral(7922))=tv=SATLiteral(1352))
1352 -7921 -7922 0
7921 -1352 0
7922 -1352 0
c ((SATLiteral(7923) /\ SATLiteral(7924))=tv=SATLiteral(1353))
1353 -7923 -7924 0
7923 -1353 0
7924 -1353 0
c ((SATLiteral(7925) /\ SATLiteral(7926))=tv=SATLiteral(1354))
1354 -7925 -7926 0
7925 -1354 0
7926 -1354 0
c ((SATLiteral(7927) /\ SATLiteral(7928))=tv=SATLiteral(1355))
1355 -7927 -7928 0
7927 -1355 0
7928 -1355 0
c ((SATLiteral(7929) /\ SATLiteral(7930))=tv=SATLiteral(1356))
1356 -7929 -7930 0
7929 -1356 0
7930 -1356 0
c ((SATLiteral(7931) /\ SATLiteral(7932))=tv=SATLiteral(1357))
1357 -7931 -7932 0
7931 -1357 0
7932 -1357 0
c ((SATLiteral(7933) /\ SATLiteral(7934))=tv=SATLiteral(1358))
1358 -7933 -7934 0
7933 -1358 0
7934 -1358 0
c ((SATLiteral(7935) /\ SATLiteral(7936))=tv=SATLiteral(1359))
1359 -7935 -7936 0
7935 -1359 0
7936 -1359 0
c ((SATLiteral(7937) /\ SATLiteral(7938))=tv=SATLiteral(1360))
1360 -7937 -7938 0
7937 -1360 0
7938 -1360 0
c ((SATLiteral(7939) /\ SATLiteral(7940))=tv=SATLiteral(1361))
1361 -7939 -7940 0
7939 -1361 0
7940 -1361 0
c ((SATLiteral(7941) /\ SATLiteral(7942))=tv=SATLiteral(1362))
1362 -7941 -7942 0
7941 -1362 0
7942 -1362 0
c ((SATLiteral(7943) /\ SATLiteral(7944))=tv=SATLiteral(1363))
1363 -7943 -7944 0
7943 -1363 0
7944 -1363 0
c ((SATLiteral(7945) /\ SATLiteral(7946))=tv=SATLiteral(1364))
1364 -7945 -7946 0
7945 -1364 0
7946 -1364 0
c ((SATLiteral(7947) /\ SATLiteral(7948))=tv=SATLiteral(1365))
1365 -7947 -7948 0
7947 -1365 0
7948 -1365 0
c ((SATLiteral(7949) /\ SATLiteral(7950))=tv=SATLiteral(1366))
1366 -7949 -7950 0
7949 -1366 0
7950 -1366 0
c ((SATLiteral(7951) /\ SATLiteral(7952))=tv=SATLiteral(1367))
1367 -7951 -7952 0
7951 -1367 0
7952 -1367 0
c ((SATLiteral(7953) /\ SATLiteral(7954))=tv=SATLiteral(1368))
1368 -7953 -7954 0
7953 -1368 0
7954 -1368 0
c ((SATLiteral(7955) /\ SATLiteral(7956))=tv=SATLiteral(1369))
1369 -7955 -7956 0
7955 -1369 0
7956 -1369 0
c ((SATLiteral(7957) /\ SATLiteral(7958))=tv=SATLiteral(1370))
1370 -7957 -7958 0
7957 -1370 0
7958 -1370 0
c ((SATLiteral(7959) /\ SATLiteral(7960))=tv=SATLiteral(1371))
1371 -7959 -7960 0
7959 -1371 0
7960 -1371 0
c ((SATLiteral(7961) /\ SATLiteral(7962))=tv=SATLiteral(1372))
1372 -7961 -7962 0
7961 -1372 0
7962 -1372 0
c ((SATLiteral(7963) /\ SATLiteral(7964))=tv=SATLiteral(1373))
1373 -7963 -7964 0
7963 -1373 0
7964 -1373 0
c ((SATLiteral(7965) /\ SATLiteral(7966))=tv=SATLiteral(1374))
1374 -7965 -7966 0
7965 -1374 0
7966 -1374 0
c ((SATLiteral(7967) /\ SATLiteral(7968))=tv=SATLiteral(1375))
1375 -7967 -7968 0
7967 -1375 0
7968 -1375 0
c ((SATLiteral(7969) /\ SATLiteral(7970))=tv=SATLiteral(1376))
1376 -7969 -7970 0
7969 -1376 0
7970 -1376 0
c ((SATLiteral(7971) /\ SATLiteral(7972))=tv=SATLiteral(1377))
1377 -7971 -7972 0
7971 -1377 0
7972 -1377 0
c ((SATLiteral(7973) /\ SATLiteral(7974))=tv=SATLiteral(1378))
1378 -7973 -7974 0
7973 -1378 0
7974 -1378 0
c ((SATLiteral(7975) /\ SATLiteral(7976))=tv=SATLiteral(1379))
1379 -7975 -7976 0
7975 -1379 0
7976 -1379 0
c ((SATLiteral(7977) /\ SATLiteral(7978))=tv=SATLiteral(1380))
1380 -7977 -7978 0
7977 -1380 0
7978 -1380 0
c ((SATLiteral(7979) /\ SATLiteral(7980))=tv=SATLiteral(1381))
1381 -7979 -7980 0
7979 -1381 0
7980 -1381 0
c ((SATLiteral(7981) /\ SATLiteral(7982))=tv=SATLiteral(1382))
1382 -7981 -7982 0
7981 -1382 0
7982 -1382 0
c ((SATLiteral(7983) /\ SATLiteral(7984))=tv=SATLiteral(1383))
1383 -7983 -7984 0
7983 -1383 0
7984 -1383 0
c ((SATLiteral(7985) /\ SATLiteral(7986))=tv=SATLiteral(1384))
1384 -7985 -7986 0
7985 -1384 0
7986 -1384 0
c ((SATLiteral(7987) /\ SATLiteral(7988))=tv=SATLiteral(1385))
1385 -7987 -7988 0
7987 -1385 0
7988 -1385 0
c ((SATLiteral(7989) /\ SATLiteral(7990))=tv=SATLiteral(1386))
1386 -7989 -7990 0
7989 -1386 0
7990 -1386 0
c ((SATLiteral(7991) /\ SATLiteral(7992))=tv=SATLiteral(1387))
1387 -7991 -7992 0
7991 -1387 0
7992 -1387 0
c ((SATLiteral(7993) /\ SATLiteral(7994))=tv=SATLiteral(1388))
1388 -7993 -7994 0
7993 -1388 0
7994 -1388 0
c ((SATLiteral(7995) /\ SATLiteral(7996))=tv=SATLiteral(1389))
1389 -7995 -7996 0
7995 -1389 0
7996 -1389 0
c ((SATLiteral(7997) /\ SATLiteral(7998))=tv=SATLiteral(1390))
1390 -7997 -7998 0
7997 -1390 0
7998 -1390 0
c ((SATLiteral(7999) /\ SATLiteral(8000))=tv=SATLiteral(1391))
1391 -7999 -8000 0
7999 -1391 0
8000 -1391 0
c ((SATLiteral(8001) /\ SATLiteral(8002))=tv=SATLiteral(1392))
1392 -8001 -8002 0
8001 -1392 0
8002 -1392 0
c ((SATLiteral(8003) /\ SATLiteral(8004))=tv=SATLiteral(1393))
1393 -8003 -8004 0
8003 -1393 0
8004 -1393 0
c ((SATLiteral(8005) /\ SATLiteral(8006))=tv=SATLiteral(1394))
1394 -8005 -8006 0
8005 -1394 0
8006 -1394 0
c ((SATLiteral(8007) /\ SATLiteral(8008))=tv=SATLiteral(1395))
1395 -8007 -8008 0
8007 -1395 0
8008 -1395 0
c ((SATLiteral(8009) /\ SATLiteral(8010))=tv=SATLiteral(1396))
1396 -8009 -8010 0
8009 -1396 0
8010 -1396 0
c ((SATLiteral(8011) /\ SATLiteral(8012))=tv=SATLiteral(1397))
1397 -8011 -8012 0
8011 -1397 0
8012 -1397 0
c ((SATLiteral(8013) /\ SATLiteral(8014))=tv=SATLiteral(1398))
1398 -8013 -8014 0
8013 -1398 0
8014 -1398 0
c ((SATLiteral(8015) /\ SATLiteral(8016))=tv=SATLiteral(1399))
1399 -8015 -8016 0
8015 -1399 0
8016 -1399 0
c ((SATLiteral(8017) /\ SATLiteral(8018))=tv=SATLiteral(1400))
1400 -8017 -8018 0
8017 -1400 0
8018 -1400 0
c ((SATLiteral(8019) /\ SATLiteral(8020))=tv=SATLiteral(1401))
1401 -8019 -8020 0
8019 -1401 0
8020 -1401 0
c ((SATLiteral(8021) /\ SATLiteral(8022))=tv=SATLiteral(1402))
1402 -8021 -8022 0
8021 -1402 0
8022 -1402 0
c ((SATLiteral(8023) /\ SATLiteral(8024))=tv=SATLiteral(1403))
1403 -8023 -8024 0
8023 -1403 0
8024 -1403 0
c ((SATLiteral(8025) /\ SATLiteral(8026))=tv=SATLiteral(1404))
1404 -8025 -8026 0
8025 -1404 0
8026 -1404 0
c ((SATLiteral(8027) /\ SATLiteral(8028))=tv=SATLiteral(1405))
1405 -8027 -8028 0
8027 -1405 0
8028 -1405 0
c ((SATLiteral(8029) /\ SATLiteral(8030))=tv=SATLiteral(1406))
1406 -8029 -8030 0
8029 -1406 0
8030 -1406 0
c ((SATLiteral(8031) /\ SATLiteral(8032))=tv=SATLiteral(1407))
1407 -8031 -8032 0
8031 -1407 0
8032 -1407 0
c ((SATLiteral(8033) /\ SATLiteral(8034))=tv=SATLiteral(1408))
1408 -8033 -8034 0
8033 -1408 0
8034 -1408 0
c ((SATLiteral(8035) /\ SATLiteral(8036))=tv=SATLiteral(1409))
1409 -8035 -8036 0
8035 -1409 0
8036 -1409 0
c ((SATLiteral(8037) /\ SATLiteral(8038))=tv=SATLiteral(1410))
1410 -8037 -8038 0
8037 -1410 0
8038 -1410 0
c ((SATLiteral(8039) /\ SATLiteral(8040))=tv=SATLiteral(1411))
1411 -8039 -8040 0
8039 -1411 0
8040 -1411 0
c ((SATLiteral(8041) /\ SATLiteral(8042))=tv=SATLiteral(1412))
1412 -8041 -8042 0
8041 -1412 0
8042 -1412 0
c ((SATLiteral(8043) /\ SATLiteral(8044))=tv=SATLiteral(1413))
1413 -8043 -8044 0
8043 -1413 0
8044 -1413 0
c ((SATLiteral(8045) /\ SATLiteral(8046))=tv=SATLiteral(1414))
1414 -8045 -8046 0
8045 -1414 0
8046 -1414 0
c ((SATLiteral(8047) /\ SATLiteral(8048))=tv=SATLiteral(1415))
1415 -8047 -8048 0
8047 -1415 0
8048 -1415 0
c ((SATLiteral(8049) /\ SATLiteral(8050))=tv=SATLiteral(1416))
1416 -8049 -8050 0
8049 -1416 0
8050 -1416 0
c ((SATLiteral(8051) /\ SATLiteral(8052))=tv=SATLiteral(1417))
1417 -8051 -8052 0
8051 -1417 0
8052 -1417 0
c ((SATLiteral(8053) /\ SATLiteral(8054))=tv=SATLiteral(1418))
1418 -8053 -8054 0
8053 -1418 0
8054 -1418 0
c ((SATLiteral(8055) /\ SATLiteral(8056))=tv=SATLiteral(1419))
1419 -8055 -8056 0
8055 -1419 0
8056 -1419 0
c ((SATLiteral(8057) /\ SATLiteral(8058))=tv=SATLiteral(1420))
1420 -8057 -8058 0
8057 -1420 0
8058 -1420 0
c ((SATLiteral(8059) /\ SATLiteral(8060))=tv=SATLiteral(1421))
1421 -8059 -8060 0
8059 -1421 0
8060 -1421 0
c ((SATLiteral(8061) /\ SATLiteral(8062))=tv=SATLiteral(1422))
1422 -8061 -8062 0
8061 -1422 0
8062 -1422 0
c ((SATLiteral(8063) /\ SATLiteral(8064))=tv=SATLiteral(1423))
1423 -8063 -8064 0
8063 -1423 0
8064 -1423 0
c ((SATLiteral(8065) /\ SATLiteral(8066))=tv=SATLiteral(1424))
1424 -8065 -8066 0
8065 -1424 0
8066 -1424 0
c ((SATLiteral(8067) /\ SATLiteral(8068))=tv=SATLiteral(1425))
1425 -8067 -8068 0
8067 -1425 0
8068 -1425 0
c ((SATLiteral(8069) /\ SATLiteral(8070))=tv=SATLiteral(1426))
1426 -8069 -8070 0
8069 -1426 0
8070 -1426 0
c ((SATLiteral(8071) /\ SATLiteral(8072))=tv=SATLiteral(1427))
1427 -8071 -8072 0
8071 -1427 0
8072 -1427 0
c ((SATLiteral(8073) /\ SATLiteral(8074))=tv=SATLiteral(1428))
1428 -8073 -8074 0
8073 -1428 0
8074 -1428 0
c ((SATLiteral(8075) /\ SATLiteral(8076))=tv=SATLiteral(1429))
1429 -8075 -8076 0
8075 -1429 0
8076 -1429 0
c ((SATLiteral(8077) /\ SATLiteral(8078))=tv=SATLiteral(1430))
1430 -8077 -8078 0
8077 -1430 0
8078 -1430 0
c ((SATLiteral(8079) /\ SATLiteral(8080))=tv=SATLiteral(1431))
1431 -8079 -8080 0
8079 -1431 0
8080 -1431 0
c ((SATLiteral(8081) /\ SATLiteral(8082))=tv=SATLiteral(1432))
1432 -8081 -8082 0
8081 -1432 0
8082 -1432 0
c ((SATLiteral(8083) /\ SATLiteral(8084))=tv=SATLiteral(1433))
1433 -8083 -8084 0
8083 -1433 0
8084 -1433 0
c ((SATLiteral(8085) /\ SATLiteral(8086))=tv=SATLiteral(1434))
1434 -8085 -8086 0
8085 -1434 0
8086 -1434 0
c ((SATLiteral(8087) /\ SATLiteral(8088))=tv=SATLiteral(1435))
1435 -8087 -8088 0
8087 -1435 0
8088 -1435 0
c ((SATLiteral(8089) /\ SATLiteral(8090))=tv=SATLiteral(1436))
1436 -8089 -8090 0
8089 -1436 0
8090 -1436 0
c ((SATLiteral(8091) /\ SATLiteral(8092))=tv=SATLiteral(1437))
1437 -8091 -8092 0
8091 -1437 0
8092 -1437 0
c ((SATLiteral(8093) /\ SATLiteral(8094))=tv=SATLiteral(1438))
1438 -8093 -8094 0
8093 -1438 0
8094 -1438 0
c ((SATLiteral(8095) /\ SATLiteral(8096))=tv=SATLiteral(1439))
1439 -8095 -8096 0
8095 -1439 0
8096 -1439 0
c ((SATLiteral(8097) /\ SATLiteral(8098))=tv=SATLiteral(1440))
1440 -8097 -8098 0
8097 -1440 0
8098 -1440 0
c ((SATLiteral(8099) /\ SATLiteral(8100))=tv=SATLiteral(1441))
1441 -8099 -8100 0
8099 -1441 0
8100 -1441 0
c ((SATLiteral(8101) /\ SATLiteral(8102))=tv=SATLiteral(1442))
1442 -8101 -8102 0
8101 -1442 0
8102 -1442 0
c ((SATLiteral(8103) /\ SATLiteral(8104))=tv=SATLiteral(1443))
1443 -8103 -8104 0
8103 -1443 0
8104 -1443 0
c ((SATLiteral(8105) /\ SATLiteral(8106))=tv=SATLiteral(1444))
1444 -8105 -8106 0
8105 -1444 0
8106 -1444 0
c ((SATLiteral(8107) /\ SATLiteral(8108))=tv=SATLiteral(1445))
1445 -8107 -8108 0
8107 -1445 0
8108 -1445 0
c ((SATLiteral(8109) /\ SATLiteral(8110))=tv=SATLiteral(1446))
1446 -8109 -8110 0
8109 -1446 0
8110 -1446 0
c ((SATLiteral(8111) /\ SATLiteral(8112))=tv=SATLiteral(1447))
1447 -8111 -8112 0
8111 -1447 0
8112 -1447 0
c ((SATLiteral(8113) /\ SATLiteral(8114))=tv=SATLiteral(1448))
1448 -8113 -8114 0
8113 -1448 0
8114 -1448 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1449))
1449 -8115 -8116 0
8115 -1449 0
8116 -1449 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1450))
1450 -8117 -8118 0
8117 -1450 0
8118 -1450 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1451))
1451 -8119 -8120 0
8119 -1451 0
8120 -1451 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1452))
1452 -8121 -8122 0
8121 -1452 0
8122 -1452 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1453))
1453 -8123 -8124 0
8123 -1453 0
8124 -1453 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1454))
1454 -8125 -8126 0
8125 -1454 0
8126 -1454 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1455))
1455 -8127 -8128 0
8127 -1455 0
8128 -1455 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1456))
1456 -8129 -8130 0
8129 -1456 0
8130 -1456 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1457))
1457 -8131 -8132 0
8131 -1457 0
8132 -1457 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1458))
1458 -8133 -8134 0
8133 -1458 0
8134 -1458 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1459))
1459 -8135 -8136 0
8135 -1459 0
8136 -1459 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1460))
1460 -8137 -8138 0
8137 -1460 0
8138 -1460 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1461))
1461 -8139 -8140 0
8139 -1461 0
8140 -1461 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1462))
1462 -8141 -8142 0
8141 -1462 0
8142 -1462 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1463))
1463 -8143 -8144 0
8143 -1463 0
8144 -1463 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1464))
1464 -8145 -8146 0
8145 -1464 0
8146 -1464 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1465))
1465 -8147 -8148 0
8147 -1465 0
8148 -1465 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1466))
1466 -8149 -8150 0
8149 -1466 0
8150 -1466 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1467))
1467 -8151 -8152 0
8151 -1467 0
8152 -1467 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1468))
1468 -8153 -8154 0
8153 -1468 0
8154 -1468 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1469))
1469 -8155 -8156 0
8155 -1469 0
8156 -1469 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1470))
1470 -8157 -8158 0
8157 -1470 0
8158 -1470 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1471))
1471 -8159 -8160 0
8159 -1471 0
8160 -1471 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1472))
1472 -8161 -8162 0
8161 -1472 0
8162 -1472 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1473))
1473 -8163 -8164 0
8163 -1473 0
8164 -1473 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1474))
1474 -8165 -8166 0
8165 -1474 0
8166 -1474 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1475))
1475 -8167 -8168 0
8167 -1475 0
8168 -1475 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1476))
1476 -8169 -8170 0
8169 -1476 0
8170 -1476 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1477))
1477 -8171 -8172 0
8171 -1477 0
8172 -1477 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1478))
1478 -8173 -8174 0
8173 -1478 0
8174 -1478 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1479))
1479 -8175 -8176 0
8175 -1479 0
8176 -1479 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1480))
1480 -8177 -8178 0
8177 -1480 0
8178 -1480 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1481))
1481 -8179 -8180 0
8179 -1481 0
8180 -1481 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1482))
1482 -8181 -8182 0
8181 -1482 0
8182 -1482 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1483))
1483 -8183 -8184 0
8183 -1483 0
8184 -1483 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1484))
1484 -8185 -8186 0
8185 -1484 0
8186 -1484 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1485))
1485 -8187 -8188 0
8187 -1485 0
8188 -1485 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1486))
1486 -8189 -8190 0
8189 -1486 0
8190 -1486 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1487))
1487 -8191 -8192 0
8191 -1487 0
8192 -1487 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1488))
1488 -8193 -8194 0
8193 -1488 0
8194 -1488 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1489))
1489 -8195 -8196 0
8195 -1489 0
8196 -1489 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1490))
1490 -8197 -8198 0
8197 -1490 0
8198 -1490 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1491))
1491 -8199 -8200 0
8199 -1491 0
8200 -1491 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1492))
1492 -8201 -8202 0
8201 -1492 0
8202 -1492 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1493))
1493 -8203 -8204 0
8203 -1493 0
8204 -1493 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1494))
1494 -8205 -8206 0
8205 -1494 0
8206 -1494 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1495))
1495 -8207 -8208 0
8207 -1495 0
8208 -1495 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1496))
1496 -8209 -8210 0
8209 -1496 0
8210 -1496 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1497))
1497 -8211 -8212 0
8211 -1497 0
8212 -1497 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1498))
1498 -8213 -8214 0
8213 -1498 0
8214 -1498 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1499))
1499 -8215 -8216 0
8215 -1499 0
8216 -1499 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1500))
1500 -8217 -8218 0
8217 -1500 0
8218 -1500 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1501))
1501 -8219 -8220 0
8219 -1501 0
8220 -1501 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1502))
1502 -8221 -8222 0
8221 -1502 0
8222 -1502 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1503))
1503 -8223 -8224 0
8223 -1503 0
8224 -1503 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1504))
1504 -8225 -8226 0
8225 -1504 0
8226 -1504 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1505))
1505 -8227 -8228 0
8227 -1505 0
8228 -1505 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1506))
1506 -8229 -8230 0
8229 -1506 0
8230 -1506 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1507))
1507 -8231 -8232 0
8231 -1507 0
8232 -1507 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1508))
1508 -8233 -8234 0
8233 -1508 0
8234 -1508 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1509))
1509 -8235 -8236 0
8235 -1509 0
8236 -1509 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1510))
1510 -8237 -8238 0
8237 -1510 0
8238 -1510 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1511))
1511 -8239 -8240 0
8239 -1511 0
8240 -1511 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1512))
1512 -8241 -8242 0
8241 -1512 0
8242 -1512 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1513))
1513 -8243 -8244 0
8243 -1513 0
8244 -1513 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1514))
1514 -8245 -8246 0
8245 -1514 0
8246 -1514 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1515))
1515 -8247 -8248 0
8247 -1515 0
8248 -1515 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1516))
1516 -8249 -8250 0
8249 -1516 0
8250 -1516 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1517))
1517 -8251 -8252 0
8251 -1517 0
8252 -1517 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1518))
1518 -8253 -8254 0
8253 -1518 0
8254 -1518 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1519))
1519 -8255 -8256 0
8255 -1519 0
8256 -1519 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1520))
1520 -8257 -8258 0
8257 -1520 0
8258 -1520 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1521))
1521 -8259 -8260 0
8259 -1521 0
8260 -1521 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1522))
1522 -8261 -8262 0
8261 -1522 0
8262 -1522 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1523))
1523 -8263 -8264 0
8263 -1523 0
8264 -1523 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1524))
1524 -8265 -8266 0
8265 -1524 0
8266 -1524 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1525))
1525 -8267 -8268 0
8267 -1525 0
8268 -1525 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1526))
1526 -8269 -8270 0
8269 -1526 0
8270 -1526 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1527))
1527 -8271 -8272 0
8271 -1527 0
8272 -1527 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1528))
1528 -8273 -8274 0
8273 -1528 0
8274 -1528 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1529))
1529 -8275 -8276 0
8275 -1529 0
8276 -1529 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1530))
1530 -8277 -8278 0
8277 -1530 0
8278 -1530 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1531))
1531 -8279 -8280 0
8279 -1531 0
8280 -1531 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1532))
1532 -8281 -8282 0
8281 -1532 0
8282 -1532 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1533))
1533 -8283 -8284 0
8283 -1533 0
8284 -1533 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1534))
1534 -8285 -8286 0
8285 -1534 0
8286 -1534 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1535))
1535 -8287 -8288 0
8287 -1535 0
8288 -1535 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1536))
1536 -8289 -8290 0
8289 -1536 0
8290 -1536 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1537))
1537 -8291 -8292 0
8291 -1537 0
8292 -1537 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1538))
1538 -8293 -8294 0
8293 -1538 0
8294 -1538 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1539))
1539 -8295 -8296 0
8295 -1539 0
8296 -1539 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1540))
1540 -8297 -8298 0
8297 -1540 0
8298 -1540 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1541))
1541 -8299 -8300 0
8299 -1541 0
8300 -1541 0
c ((SATLiteral(8301) /\ SATLiteral(8302))=tv=SATLiteral(1542))
1542 -8301 -8302 0
8301 -1542 0
8302 -1542 0
c ((SATLiteral(8303) /\ SATLiteral(8304))=tv=SATLiteral(1543))
1543 -8303 -8304 0
8303 -1543 0
8304 -1543 0
c ((SATLiteral(8305) /\ SATLiteral(8306))=tv=SATLiteral(1544))
1544 -8305 -8306 0
8305 -1544 0
8306 -1544 0
c ((SATLiteral(8307) /\ SATLiteral(8308))=tv=SATLiteral(1545))
1545 -8307 -8308 0
8307 -1545 0
8308 -1545 0
c ((SATLiteral(8309) /\ SATLiteral(8310))=tv=SATLiteral(1546))
1546 -8309 -8310 0
8309 -1546 0
8310 -1546 0
c ((SATLiteral(8311) /\ SATLiteral(8312))=tv=SATLiteral(1547))
1547 -8311 -8312 0
8311 -1547 0
8312 -1547 0
c ((SATLiteral(8313) /\ SATLiteral(8314))=tv=SATLiteral(1548))
1548 -8313 -8314 0
8313 -1548 0
8314 -1548 0
c ((SATLiteral(8315) /\ SATLiteral(8316))=tv=SATLiteral(1549))
1549 -8315 -8316 0
8315 -1549 0
8316 -1549 0
c ((SATLiteral(8317) /\ SATLiteral(8318))=tv=SATLiteral(1550))
1550 -8317 -8318 0
8317 -1550 0
8318 -1550 0
c ((SATLiteral(8319) /\ SATLiteral(8320))=tv=SATLiteral(1551))
1551 -8319 -8320 0
8319 -1551 0
8320 -1551 0
c ((SATLiteral(8321) /\ SATLiteral(8322))=tv=SATLiteral(1552))
1552 -8321 -8322 0
8321 -1552 0
8322 -1552 0
c ((SATLiteral(8323) /\ SATLiteral(8324))=tv=SATLiteral(1553))
1553 -8323 -8324 0
8323 -1553 0
8324 -1553 0
c ((SATLiteral(8325) /\ SATLiteral(8326))=tv=SATLiteral(1554))
1554 -8325 -8326 0
8325 -1554 0
8326 -1554 0
c ((SATLiteral(8327) /\ SATLiteral(8328))=tv=SATLiteral(1555))
1555 -8327 -8328 0
8327 -1555 0
8328 -1555 0
c ((SATLiteral(8329) /\ SATLiteral(8330))=tv=SATLiteral(1556))
1556 -8329 -8330 0
8329 -1556 0
8330 -1556 0
c ((SATLiteral(8331) /\ SATLiteral(8332))=tv=SATLiteral(1557))
1557 -8331 -8332 0
8331 -1557 0
8332 -1557 0
c ((SATLiteral(8333) /\ SATLiteral(8334))=tv=SATLiteral(1558))
1558 -8333 -8334 0
8333 -1558 0
8334 -1558 0
c ((SATLiteral(8335) /\ SATLiteral(8336))=tv=SATLiteral(1559))
1559 -8335 -8336 0
8335 -1559 0
8336 -1559 0
c ((SATLiteral(8337) /\ SATLiteral(8338))=tv=SATLiteral(1560))
1560 -8337 -8338 0
8337 -1560 0
8338 -1560 0
c ((SATLiteral(8339) /\ SATLiteral(8340))=tv=SATLiteral(1561))
1561 -8339 -8340 0
8339 -1561 0
8340 -1561 0
c ((SATLiteral(8341) /\ SATLiteral(8342))=tv=SATLiteral(1562))
1562 -8341 -8342 0
8341 -1562 0
8342 -1562 0
c ((SATLiteral(8343) /\ SATLiteral(8344))=tv=SATLiteral(1563))
1563 -8343 -8344 0
8343 -1563 0
8344 -1563 0
c ((SATLiteral(8345) /\ SATLiteral(8346))=tv=SATLiteral(1564))
1564 -8345 -8346 0
8345 -1564 0
8346 -1564 0
c ((SATLiteral(8347) /\ SATLiteral(8348))=tv=SATLiteral(1565))
1565 -8347 -8348 0
8347 -1565 0
8348 -1565 0
c ((SATLiteral(8349) /\ SATLiteral(8350))=tv=SATLiteral(1566))
1566 -8349 -8350 0
8349 -1566 0
8350 -1566 0
c ((SATLiteral(8351) /\ SATLiteral(8352))=tv=SATLiteral(1567))
1567 -8351 -8352 0
8351 -1567 0
8352 -1567 0
c ((SATLiteral(8353) /\ SATLiteral(8354))=tv=SATLiteral(1568))
1568 -8353 -8354 0
8353 -1568 0
8354 -1568 0
c ((SATLiteral(8355) /\ SATLiteral(8356))=tv=SATLiteral(1569))
1569 -8355 -8356 0
8355 -1569 0
8356 -1569 0
c ((SATLiteral(8357) /\ SATLiteral(8358))=tv=SATLiteral(1570))
1570 -8357 -8358 0
8357 -1570 0
8358 -1570 0
c ((SATLiteral(8359) /\ SATLiteral(8360))=tv=SATLiteral(1571))
1571 -8359 -8360 0
8359 -1571 0
8360 -1571 0
c ((SATLiteral(8361) /\ SATLiteral(8362))=tv=SATLiteral(1572))
1572 -8361 -8362 0
8361 -1572 0
8362 -1572 0
c ((SATLiteral(8363) /\ SATLiteral(8364))=tv=SATLiteral(1573))
1573 -8363 -8364 0
8363 -1573 0
8364 -1573 0
c ((SATLiteral(8365) /\ SATLiteral(8366))=tv=SATLiteral(1574))
1574 -8365 -8366 0
8365 -1574 0
8366 -1574 0
c ((SATLiteral(8367) /\ SATLiteral(8368))=tv=SATLiteral(1575))
1575 -8367 -8368 0
8367 -1575 0
8368 -1575 0
c ((SATLiteral(8369) /\ SATLiteral(8370))=tv=SATLiteral(1576))
1576 -8369 -8370 0
8369 -1576 0
8370 -1576 0
c ((SATLiteral(8371) /\ SATLiteral(8372))=tv=SATLiteral(1577))
1577 -8371 -8372 0
8371 -1577 0
8372 -1577 0
c (((SATLiteral(17) + aux1929 + SATLiteral(137))<=1)=tv=SATLiteral(1578))
-1578 7724 0
-1578 -137 7723 0
-1578 -17 7723 0
-1578 -17 -137 0
1578 137 -7723 0
1578 17 -7723 0
1578 17 137 -7724 0
c (((SATLiteral(19) + aux1930 + SATLiteral(139))<=1)=tv=SATLiteral(1579))
-1579 7727 0
-1579 -139 7726 0
-1579 -19 7726 0
-1579 -19 -139 0
1579 139 -7726 0
1579 19 -7726 0
1579 19 139 -7727 0
c (((SATLiteral(21) + aux1931 + SATLiteral(141))<=1)=tv=SATLiteral(1580))
-1580 7730 0
-1580 -141 7729 0
-1580 -21 7729 0
-1580 -21 -141 0
1580 141 -7729 0
1580 21 -7729 0
1580 21 141 -7730 0
c (((SATLiteral(23) + aux1932 + SATLiteral(143))<=1)=tv=SATLiteral(1581))
-1581 7733 0
-1581 -143 7732 0
-1581 -23 7732 0
-1581 -23 -143 0
1581 143 -7732 0
1581 23 -7732 0
1581 23 143 -7733 0
c (((SATLiteral(25) + aux1933 + SATLiteral(145))<=1)=tv=SATLiteral(1582))
-1582 7736 0
-1582 -145 7735 0
-1582 -25 7735 0
-1582 -25 -145 0
1582 145 -7735 0
1582 25 -7735 0
1582 25 145 -7736 0
c (((SATLiteral(27) + aux1934 + SATLiteral(147))<=1)=tv=SATLiteral(1583))
-1583 7739 0
-1583 -147 7738 0
-1583 -27 7738 0
-1583 -27 -147 0
1583 147 -7738 0
1583 27 -7738 0
1583 27 147 -7739 0
c (((SATLiteral(29) + aux1935 + SATLiteral(149))<=1)=tv=SATLiteral(1584))
-1584 7742 0
-1584 -149 7741 0
-1584 -29 7741 0
-1584 -29 -149 0
1584 149 -7741 0
1584 29 -7741 0
1584 29 149 -7742 0
c (((SATLiteral(31) + aux1936 + SATLiteral(151))<=1)=tv=SATLiteral(1585))
-1585 7745 0
-1585 -151 7744 0
-1585 -31 7744 0
-1585 -31 -151 0
1585 151 -7744 0
1585 31 -7744 0
1585 31 151 -7745 0
c (((SATLiteral(-30) + aux1937 + SATLiteral(-150))<=1)=tv=SATLiteral(1586))
-1586 7748 0
-1586 150 7747 0
-1586 30 7747 0
-1586 30 150 0
1586 -150 -7747 0
1586 -30 -7747 0
1586 -30 -150 -7748 0
c (((SATLiteral(302) + SATLiteral(32) + SATLiteral(167))<=1)=tv=SATLiteral(1587))
-1587 -32 -167 0
-1587 -302 -167 0
-1587 -302 -32 0
1587 32 167 0
1587 302 167 0
1587 302 32 0
c (((SATLiteral(304) + SATLiteral(34) + SATLiteral(169))<=1)=tv=SATLiteral(1588))
-1588 -34 -169 0
-1588 -304 -169 0
-1588 -304 -34 0
1588 34 169 0
1588 304 169 0
1588 304 34 0
c (((SATLiteral(306) + SATLiteral(36) + SATLiteral(171))<=1)=tv=SATLiteral(1589))
-1589 -36 -171 0
-1589 -306 -171 0
-1589 -306 -36 0
1589 36 171 0
1589 306 171 0
1589 306 36 0
c (((SATLiteral(308) + SATLiteral(38) + SATLiteral(173))<=1)=tv=SATLiteral(1590))
-1590 -38 -173 0
-1590 -308 -173 0
-1590 -308 -38 0
1590 38 173 0
1590 308 173 0
1590 308 38 0
c (((SATLiteral(310) + SATLiteral(40) + SATLiteral(175))<=1)=tv=SATLiteral(1591))
-1591 -40 -175 0
-1591 -310 -175 0
-1591 -310 -40 0
1591 40 175 0
1591 310 175 0
1591 310 40 0
c (((SATLiteral(312) + SATLiteral(42) + SATLiteral(177))<=1)=tv=SATLiteral(1592))
-1592 -42 -177 0
-1592 -312 -177 0
-1592 -312 -42 0
1592 42 177 0
1592 312 177 0
1592 312 42 0
c (((SATLiteral(314) + SATLiteral(44) + SATLiteral(179))<=1)=tv=SATLiteral(1593))
-1593 -44 -179 0
-1593 -314 -179 0
-1593 -314 -44 0
1593 44 179 0
1593 314 179 0
1593 314 44 0
c (((SATLiteral(316) + SATLiteral(46) + SATLiteral(181))<=1)=tv=SATLiteral(1594))
-1594 -46 -181 0
-1594 -316 -181 0
-1594 -316 -46 0
1594 46 181 0
1594 316 181 0
1594 316 46 0
c (((SATLiteral(-315) + SATLiteral(-45) + SATLiteral(-180))<=1)=tv=SATLiteral(1595))
-1595 45 180 0
-1595 315 180 0
-1595 315 45 0
1595 -45 -180 0
1595 -315 -180 0
1595 -315 -45 0
c (((SATLiteral(317) + SATLiteral(47) + SATLiteral(182))<=1)=tv=SATLiteral(1596))
-1596 -47 -182 0
-1596 -317 -182 0
-1596 -317 -47 0
1596 47 182 0
1596 317 182 0
1596 317 47 0
c (((SATLiteral(319) + SATLiteral(49) + SATLiteral(184))<=1)=tv=SATLiteral(1597))
-1597 -49 -184 0
-1597 -319 -184 0
-1597 -319 -49 0
1597 49 184 0
1597 319 184 0
1597 319 49 0
c (((SATLiteral(321) + SATLiteral(51) + SATLiteral(186))<=1)=tv=SATLiteral(1598))
-1598 -51 -186 0
-1598 -321 -186 0
-1598 -321 -51 0
1598 51 186 0
1598 321 186 0
1598 321 51 0
c (((SATLiteral(323) + SATLiteral(53) + SATLiteral(188))<=1)=tv=SATLiteral(1599))
-1599 -53 -188 0
-1599 -323 -188 0
-1599 -323 -53 0
1599 53 188 0
1599 323 188 0
1599 323 53 0
c (((SATLiteral(325) + SATLiteral(55) + SATLiteral(190))<=1)=tv=SATLiteral(1600))
-1600 -55 -190 0
-1600 -325 -190 0
-1600 -325 -55 0
1600 55 190 0
1600 325 190 0
1600 325 55 0
c (((SATLiteral(327) + SATLiteral(57) + SATLiteral(192))<=1)=tv=SATLiteral(1601))
-1601 -57 -192 0
-1601 -327 -192 0
-1601 -327 -57 0
1601 57 192 0
1601 327 192 0
1601 327 57 0
c (((SATLiteral(329) + SATLiteral(59) + SATLiteral(194))<=1)=tv=SATLiteral(1602))
-1602 -59 -194 0
-1602 -329 -194 0
-1602 -329 -59 0
1602 59 194 0
1602 329 194 0
1602 329 59 0
c (((SATLiteral(331) + SATLiteral(61) + SATLiteral(196))<=1)=tv=SATLiteral(1603))
-1603 -61 -196 0
-1603 -331 -196 0
-1603 -331 -61 0
1603 61 196 0
1603 331 196 0
1603 331 61 0
c (((SATLiteral(-330) + SATLiteral(-60) + SATLiteral(-195))<=1)=tv=SATLiteral(1604))
-1604 60 195 0
-1604 330 195 0
-1604 330 60 0
1604 -60 -195 0
1604 -330 -195 0
1604 -330 -60 0
c (((SATLiteral(77) + SATLiteral(92) + aux1938)<=1)=tv=SATLiteral(1605))
-1605 7751 0
-1605 -92 7750 0
-1605 -77 7750 0
-1605 -77 -92 0
1605 92 -7750 0
1605 77 -7750 0
1605 77 92 -7751 0
c (((SATLiteral(79) + SATLiteral(94) + aux1939)<=1)=tv=SATLiteral(1606))
-1606 7754 0
-1606 -94 7753 0
-1606 -79 7753 0
-1606 -79 -94 0
1606 94 -7753 0
1606 79 -7753 0
1606 79 94 -7754 0
c (((SATLiteral(81) + SATLiteral(96) + aux1940)<=1)=tv=SATLiteral(1607))
-1607 7757 0
-1607 -96 7756 0
-1607 -81 7756 0
-1607 -81 -96 0
1607 96 -7756 0
1607 81 -7756 0
1607 81 96 -7757 0
c (((SATLiteral(83) + SATLiteral(98) + aux1941)<=1)=tv=SATLiteral(1608))
-1608 7760 0
-1608 -98 7759 0
-1608 -83 7759 0
-1608 -83 -98 0
1608 98 -7759 0
1608 83 -7759 0
1608 83 98 -7760 0
c (((SATLiteral(85) + SATLiteral(100) + aux1942)<=1)=tv=SATLiteral(1609))
-1609 7763 0
-1609 -100 7762 0
-1609 -85 7762 0
-1609 -85 -100 0
1609 100 -7762 0
1609 85 -7762 0
1609 85 100 -7763 0
c (((SATLiteral(87) + SATLiteral(102) + aux1943)<=1)=tv=SATLiteral(1610))
-1610 7766 0
-1610 -102 7765 0
-1610 -87 7765 0
-1610 -87 -102 0
1610 102 -7765 0
1610 87 -7765 0
1610 87 102 -7766 0
c (((SATLiteral(89) + SATLiteral(104) + aux1944)<=1)=tv=SATLiteral(1611))
-1611 7769 0
-1611 -104 7768 0
-1611 -89 7768 0
-1611 -89 -104 0
1611 104 -7768 0
1611 89 -7768 0
1611 89 104 -7769 0
c (((SATLiteral(91) + SATLiteral(106) + aux1945)<=1)=tv=SATLiteral(1612))
-1612 7772 0
-1612 -106 7771 0
-1612 -91 7771 0
-1612 -91 -106 0
1612 106 -7771 0
1612 91 -7771 0
1612 91 106 -7772 0
c (((SATLiteral(-90) + SATLiteral(-105) + aux1946)<=1)=tv=SATLiteral(1613))
-1613 7775 0
-1613 105 7774 0
-1613 90 7774 0
-1613 90 105 0
1613 -105 -7774 0
1613 -90 -7774 0
1613 -90 -105 -7775 0
c (((SATLiteral(122) + SATLiteral(242) + SATLiteral(257))<=1)=tv=SATLiteral(1614))
-1614 -242 -257 0
-1614 -122 -257 0
-1614 -122 -242 0
1614 242 257 0
1614 122 257 0
1614 122 242 0
c (((SATLiteral(124) + SATLiteral(244) + SATLiteral(259))<=1)=tv=SATLiteral(1615))
-1615 -244 -259 0
-1615 -124 -259 0
-1615 -124 -244 0
1615 244 259 0
1615 124 259 0
1615 124 244 0
c (((SATLiteral(126) + SATLiteral(246) + SATLiteral(261))<=1)=tv=SATLiteral(1616))
-1616 -246 -261 0
-1616 -126 -261 0
-1616 -126 -246 0
1616 246 261 0
1616 126 261 0
1616 126 246 0
c (((SATLiteral(128) + SATLiteral(248) + SATLiteral(263))<=1)=tv=SATLiteral(1617))
-1617 -248 -263 0
-1617 -128 -263 0
-1617 -128 -248 0
1617 248 263 0
1617 128 263 0
1617 128 248 0
c (((SATLiteral(130) + SATLiteral(250) + SATLiteral(265))<=1)=tv=SATLiteral(1618))
-1618 -250 -265 0
-1618 -130 -265 0
-1618 -130 -250 0
1618 250 265 0
1618 130 265 0
1618 130 250 0
c (((SATLiteral(132) + SATLiteral(252) + SATLiteral(267))<=1)=tv=SATLiteral(1619))
-1619 -252 -267 0
-1619 -132 -267 0
-1619 -132 -252 0
1619 252 267 0
1619 132 267 0
1619 132 252 0
c (((SATLiteral(134) + SATLiteral(254) + SATLiteral(269))<=1)=tv=SATLiteral(1620))
-1620 -254 -269 0
-1620 -134 -269 0
-1620 -134 -254 0
1620 254 269 0
1620 134 269 0
1620 134 254 0
c (((SATLiteral(136) + SATLiteral(256) + SATLiteral(271))<=1)=tv=SATLiteral(1621))
-1621 -256 -271 0
-1621 -136 -271 0
-1621 -136 -256 0
1621 256 271 0
1621 136 271 0
1621 136 256 0
c (((SATLiteral(-135) + SATLiteral(-255) + SATLiteral(-270))<=1)=tv=SATLiteral(1622))
-1622 255 270 0
-1622 135 270 0
-1622 135 255 0
1622 -255 -270 0
1622 -135 -270 0
1622 -135 -255 0
c (((SATLiteral(197) + SATLiteral(212) + SATLiteral(227))<=1)=tv=SATLiteral(1623))
-1623 -212 -227 0
-1623 -197 -227 0
-1623 -197 -212 0
1623 212 227 0
1623 197 227 0
1623 197 212 0
c (((SATLiteral(199) + SATLiteral(214) + SATLiteral(229))<=1)=tv=SATLiteral(1624))
-1624 -214 -229 0
-1624 -199 -229 0
-1624 -199 -214 0
1624 214 229 0
1624 199 229 0
1624 199 214 0
c (((SATLiteral(201) + SATLiteral(216) + SATLiteral(231))<=1)=tv=SATLiteral(1625))
-1625 -216 -231 0
-1625 -201 -231 0
-1625 -201 -216 0
1625 216 231 0
1625 201 231 0
1625 201 216 0
c (((SATLiteral(203) + SATLiteral(218) + SATLiteral(233))<=1)=tv=SATLiteral(1626))
-1626 -218 -233 0
-1626 -203 -233 0
-1626 -203 -218 0
1626 218 233 0
1626 203 233 0
1626 203 218 0
c (((SATLiteral(205) + SATLiteral(220) + SATLiteral(235))<=1)=tv=SATLiteral(1627))
-1627 -220 -235 0
-1627 -205 -235 0
-1627 -205 -220 0
1627 220 235 0
1627 205 235 0
1627 205 220 0
c (((SATLiteral(207) + SATLiteral(222) + SATLiteral(237))<=1)=tv=SATLiteral(1628))
-1628 -222 -237 0
-1628 -207 -237 0
-1628 -207 -222 0
1628 222 237 0
1628 207 237 0
1628 207 222 0
c (((SATLiteral(209) + SATLiteral(224) + SATLiteral(239))<=1)=tv=SATLiteral(1629))
-1629 -224 -239 0
-1629 -209 -239 0
-1629 -209 -224 0
1629 224 239 0
1629 209 239 0
1629 209 224 0
c (((SATLiteral(211) + SATLiteral(226) + SATLiteral(241))<=1)=tv=SATLiteral(1630))
-1630 -226 -241 0
-1630 -211 -241 0
-1630 -211 -226 0
1630 226 241 0
1630 211 241 0
1630 211 226 0
c (((SATLiteral(-210) + SATLiteral(-225) + SATLiteral(-240))<=1)=tv=SATLiteral(1631))
-1631 225 240 0
-1631 210 240 0
-1631 210 225 0
1631 -225 -240 0
1631 -210 -240 0
1631 -210 -225 0
c (((SATLiteral(362) + SATLiteral(377) + SATLiteral(392))<=1)=tv=SATLiteral(1632))
-1632 -377 -392 0
-1632 -362 -392 0
-1632 -362 -377 0
1632 377 392 0
1632 362 392 0
1632 362 377 0
c (((SATLiteral(364) + SATLiteral(379) + SATLiteral(394))<=1)=tv=SATLiteral(1633))
-1633 -379 -394 0
-1633 -364 -394 0
-1633 -364 -379 0
1633 379 394 0
1633 364 394 0
1633 364 379 0
c (((SATLiteral(366) + SATLiteral(381) + SATLiteral(396))<=1)=tv=SATLiteral(1634))
-1634 -381 -396 0
-1634 -366 -396 0
-1634 -366 -381 0
1634 381 396 0
1634 366 396 0
1634 366 381 0
c (((SATLiteral(368) + SATLiteral(383) + SATLiteral(398))<=1)=tv=SATLiteral(1635))
-1635 -383 -398 0
-1635 -368 -398 0
-1635 -368 -383 0
1635 383 398 0
1635 368 398 0
1635 368 383 0
c (((SATLiteral(370) + SATLiteral(385) + SATLiteral(400))<=1)=tv=SATLiteral(1636))
-1636 -385 -400 0
-1636 -370 -400 0
-1636 -370 -385 0
1636 385 400 0
1636 370 400 0
1636 370 385 0
c (((SATLiteral(372) + SATLiteral(387) + SATLiteral(402))<=1)=tv=SATLiteral(1637))
-1637 -387 -402 0
-1637 -372 -402 0
-1637 -372 -387 0
1637 387 402 0
1637 372 402 0
1637 372 387 0
c (((SATLiteral(374) + SATLiteral(389) + SATLiteral(404))<=1)=tv=SATLiteral(1638))
-1638 -389 -404 0
-1638 -374 -404 0
-1638 -374 -389 0
1638 389 404 0
1638 374 404 0
1638 374 389 0
c (((SATLiteral(376) + SATLiteral(391) + SATLiteral(406))<=1)=tv=SATLiteral(1639))
-1639 -391 -406 0
-1639 -376 -406 0
-1639 -376 -391 0
1639 391 406 0
1639 376 406 0
1639 376 391 0
c (((SATLiteral(-375) + SATLiteral(-390) + SATLiteral(-405))<=1)=tv=SATLiteral(1640))
-1640 390 405 0
-1640 375 405 0
-1640 375 390 0
1640 -390 -405 0
1640 -375 -405 0
1640 -375 -390 0
c (((SATLiteral(437) + SATLiteral(452) + SATLiteral(587))<=1)=tv=SATLiteral(1641))
-1641 -452 -587 0
-1641 -437 -587 0
-1641 -437 -452 0
1641 452 587 0
1641 437 587 0
1641 437 452 0
c (((SATLiteral(439) + SATLiteral(454) + SATLiteral(589))<=1)=tv=SATLiteral(1642))
-1642 -454 -589 0
-1642 -439 -589 0
-1642 -439 -454 0
1642 454 589 0
1642 439 589 0
1642 439 454 0
c (((SATLiteral(441) + SATLiteral(456) + SATLiteral(591))<=1)=tv=SATLiteral(1643))
-1643 -456 -591 0
-1643 -441 -591 0
-1643 -441 -456 0
1643 456 591 0
1643 441 591 0
1643 441 456 0
c (((SATLiteral(443) + SATLiteral(458) + SATLiteral(593))<=1)=tv=SATLiteral(1644))
-1644 -458 -593 0
-1644 -443 -593 0
-1644 -443 -458 0
1644 458 593 0
1644 443 593 0
1644 443 458 0
c (((SATLiteral(445) + SATLiteral(460) + SATLiteral(595))<=1)=tv=SATLiteral(1645))
-1645 -460 -595 0
-1645 -445 -595 0
-1645 -445 -460 0
1645 460 595 0
1645 445 595 0
1645 445 460 0
c (((SATLiteral(447) + SATLiteral(462) + SATLiteral(597))<=1)=tv=SATLiteral(1646))
-1646 -462 -597 0
-1646 -447 -597 0
-1646 -447 -462 0
1646 462 597 0
1646 447 597 0
1646 447 462 0
c (((SATLiteral(449) + SATLiteral(464) + SATLiteral(599))<=1)=tv=SATLiteral(1647))
-1647 -464 -599 0
-1647 -449 -599 0
-1647 -449 -464 0
1647 464 599 0
1647 449 599 0
1647 449 464 0
c (((SATLiteral(451) + SATLiteral(466) + SATLiteral(601))<=1)=tv=SATLiteral(1648))
-1648 -466 -601 0
-1648 -451 -601 0
-1648 -451 -466 0
1648 466 601 0
1648 451 601 0
1648 451 466 0
c (((SATLiteral(-450) + SATLiteral(-465) + SATLiteral(-600))<=1)=tv=SATLiteral(1649))
-1649 465 600 0
-1649 450 600 0
-1649 450 465 0
1649 -465 -600 0
1649 -450 -600 0
1649 -450 -465 0
c (((SATLiteral(497) + SATLiteral(632) + SATLiteral(647))<=1)=tv=SATLiteral(1650))
-1650 -632 -647 0
-1650 -497 -647 0
-1650 -497 -632 0
1650 632 647 0
1650 497 647 0
1650 497 632 0
c (((SATLiteral(499) + SATLiteral(634) + SATLiteral(649))<=1)=tv=SATLiteral(1651))
-1651 -634 -649 0
-1651 -499 -649 0
-1651 -499 -634 0
1651 634 649 0
1651 499 649 0
1651 499 634 0
c (((SATLiteral(501) + SATLiteral(636) + SATLiteral(651))<=1)=tv=SATLiteral(1652))
-1652 -636 -651 0
-1652 -501 -651 0
-1652 -501 -636 0
1652 636 651 0
1652 501 651 0
1652 501 636 0
c (((SATLiteral(503) + SATLiteral(638) + SATLiteral(653))<=1)=tv=SATLiteral(1653))
-1653 -638 -653 0
-1653 -503 -653 0
-1653 -503 -638 0
1653 638 653 0
1653 503 653 0
1653 503 638 0
c (((SATLiteral(505) + SATLiteral(640) + SATLiteral(655))<=1)=tv=SATLiteral(1654))
-1654 -640 -655 0
-1654 -505 -655 0
-1654 -505 -640 0
1654 640 655 0
1654 505 655 0
1654 505 640 0
c (((SATLiteral(507) + SATLiteral(642) + SATLiteral(657))<=1)=tv=SATLiteral(1655))
-1655 -642 -657 0
-1655 -507 -657 0
-1655 -507 -642 0
1655 642 657 0
1655 507 657 0
1655 507 642 0
c (((SATLiteral(509) + SATLiteral(644) + SATLiteral(659))<=1)=tv=SATLiteral(1656))
-1656 -644 -659 0
-1656 -509 -659 0
-1656 -509 -644 0
1656 644 659 0
1656 509 659 0
1656 509 644 0
c (((SATLiteral(511) + SATLiteral(646) + SATLiteral(661))<=1)=tv=SATLiteral(1657))
-1657 -646 -661 0
-1657 -511 -661 0
-1657 -511 -646 0
1657 646 661 0
1657 511 661 0
1657 511 646 0
c (((SATLiteral(-510) + SATLiteral(-645) + SATLiteral(-660))<=1)=tv=SATLiteral(1658))
-1658 645 660 0
-1658 510 660 0
-1658 510 645 0
1658 -645 -660 0
1658 -510 -660 0
1658 -510 -645 0
c (((SATLiteral(512) + SATLiteral(527) + SATLiteral(662))<=1)=tv=SATLiteral(1659))
-1659 -527 -662 0
-1659 -512 -662 0
-1659 -512 -527 0
1659 527 662 0
1659 512 662 0
1659 512 527 0
c (((SATLiteral(514) + SATLiteral(529) + SATLiteral(664))<=1)=tv=SATLiteral(1660))
-1660 -529 -664 0
-1660 -514 -664 0
-1660 -514 -529 0
1660 529 664 0
1660 514 664 0
1660 514 529 0
c (((SATLiteral(516) + SATLiteral(531) + SATLiteral(666))<=1)=tv=SATLiteral(1661))
-1661 -531 -666 0
-1661 -516 -666 0
-1661 -516 -531 0
1661 531 666 0
1661 516 666 0
1661 516 531 0
c (((SATLiteral(518) + SATLiteral(533) + SATLiteral(668))<=1)=tv=SATLiteral(1662))
-1662 -533 -668 0
-1662 -518 -668 0
-1662 -518 -533 0
1662 533 668 0
1662 518 668 0
1662 518 533 0
c (((SATLiteral(520) + SATLiteral(535) + SATLiteral(670))<=1)=tv=SATLiteral(1663))
-1663 -535 -670 0
-1663 -520 -670 0
-1663 -520 -535 0
1663 535 670 0
1663 520 670 0
1663 520 535 0
c (((SATLiteral(522) + SATLiteral(537) + SATLiteral(672))<=1)=tv=SATLiteral(1664))
-1664 -537 -672 0
-1664 -522 -672 0
-1664 -522 -537 0
1664 537 672 0
1664 522 672 0
1664 522 537 0
c (((SATLiteral(524) + SATLiteral(539) + SATLiteral(674))<=1)=tv=SATLiteral(1665))
-1665 -539 -674 0
-1665 -524 -674 0
-1665 -524 -539 0
1665 539 674 0
1665 524 674 0
1665 524 539 0
c (((SATLiteral(526) + SATLiteral(541) + SATLiteral(676))<=1)=tv=SATLiteral(1666))
-1666 -541 -676 0
-1666 -526 -676 0
-1666 -526 -541 0
1666 541 676 0
1666 526 676 0
1666 526 541 0
c (((SATLiteral(-525) + SATLiteral(-540) + SATLiteral(-675))<=1)=tv=SATLiteral(1667))
-1667 540 675 0
-1667 525 675 0
-1667 525 540 0
1667 -540 -675 0
1667 -525 -675 0
1667 -525 -540 0
c (((SATLiteral(677) + SATLiteral(692) + SATLiteral(542))<=1)=tv=SATLiteral(1668))
-1668 -692 -542 0
-1668 -677 -542 0
-1668 -677 -692 0
1668 692 542 0
1668 677 542 0
1668 677 692 0
c (((SATLiteral(679) + SATLiteral(694) + SATLiteral(544))<=1)=tv=SATLiteral(1669))
-1669 -694 -544 0
-1669 -679 -544 0
-1669 -679 -694 0
1669 694 544 0
1669 679 544 0
1669 679 694 0
c (((SATLiteral(681) + SATLiteral(696) + SATLiteral(546))<=1)=tv=SATLiteral(1670))
-1670 -696 -546 0
-1670 -681 -546 0
-1670 -681 -696 0
1670 696 546 0
1670 681 546 0
1670 681 696 0
c (((SATLiteral(683) + SATLiteral(698) + SATLiteral(548))<=1)=tv=SATLiteral(1671))
-1671 -698 -548 0
-1671 -683 -548 0
-1671 -683 -698 0
1671 698 548 0
1671 683 548 0
1671 683 698 0
c (((SATLiteral(685) + SATLiteral(700) + SATLiteral(550))<=1)=tv=SATLiteral(1672))
-1672 -700 -550 0
-1672 -685 -550 0
-1672 -685 -700 0
1672 700 550 0
1672 685 550 0
1672 685 700 0
c (((SATLiteral(687) + SATLiteral(702) + SATLiteral(552))<=1)=tv=SATLiteral(1673))
-1673 -702 -552 0
-1673 -687 -552 0
-1673 -687 -702 0
1673 702 552 0
1673 687 552 0
1673 687 702 0
c (((SATLiteral(689) + SATLiteral(704) + SATLiteral(554))<=1)=tv=SATLiteral(1674))
-1674 -704 -554 0
-1674 -689 -554 0
-1674 -689 -704 0
1674 704 554 0
1674 689 554 0
1674 689 704 0
c (((SATLiteral(691) + SATLiteral(706) + SATLiteral(556))<=1)=tv=SATLiteral(1675))
-1675 -706 -556 0
-1675 -691 -556 0
-1675 -691 -706 0
1675 706 556 0
1675 691 556 0
1675 691 706 0
c (((SATLiteral(-690) + SATLiteral(-705) + SATLiteral(-555))<=1)=tv=SATLiteral(1676))
-1676 705 555 0
-1676 690 555 0
-1676 690 705 0
1676 -705 -555 0
1676 -690 -555 0
1676 -690 -705 0
c (((SATLiteral(707) + SATLiteral(557) + SATLiteral(572))<=1)=tv=SATLiteral(1677))
-1677 -557 -572 0
-1677 -707 -572 0
-1677 -707 -557 0
1677 557 572 0
1677 707 572 0
1677 707 557 0
c (((SATLiteral(709) + SATLiteral(559) + SATLiteral(574))<=1)=tv=SATLiteral(1678))
-1678 -559 -574 0
-1678 -709 -574 0
-1678 -709 -559 0
1678 559 574 0
1678 709 574 0
1678 709 559 0
c (((SATLiteral(711) + SATLiteral(561) + SATLiteral(576))<=1)=tv=SATLiteral(1679))
-1679 -561 -576 0
-1679 -711 -576 0
-1679 -711 -561 0
1679 561 576 0
1679 711 576 0
1679 711 561 0
c (((SATLiteral(713) + SATLiteral(563) + SATLiteral(578))<=1)=tv=SATLiteral(1680))
-1680 -563 -578 0
-1680 -713 -578 0
-1680 -713 -563 0
1680 563 578 0
1680 713 578 0
1680 713 563 0
c (((SATLiteral(715) + SATLiteral(565) + SATLiteral(580))<=1)=tv=SATLiteral(1681))
-1681 -565 -580 0
-1681 -715 -580 0
-1681 -715 -565 0
1681 565 580 0
1681 715 580 0
1681 715 565 0
c (((SATLiteral(717) + SATLiteral(567) + SATLiteral(582))<=1)=tv=SATLiteral(1682))
-1682 -567 -582 0
-1682 -717 -582 0
-1682 -717 -567 0
1682 567 582 0
1682 717 582 0
1682 717 567 0
c (((SATLiteral(719) + SATLiteral(569) + SATLiteral(584))<=1)=tv=SATLiteral(1683))
-1683 -569 -584 0
-1683 -719 -584 0
-1683 -719 -569 0
1683 569 584 0
1683 719 584 0
1683 719 569 0
c (((SATLiteral(721) + SATLiteral(571) + SATLiteral(586))<=1)=tv=SATLiteral(1684))
-1684 -571 -586 0
-1684 -721 -586 0
-1684 -721 -571 0
1684 571 586 0
1684 721 586 0
1684 721 571 0
c (((SATLiteral(-720) + SATLiteral(-570) + SATLiteral(-585))<=1)=tv=SATLiteral(1685))
-1685 570 585 0
-1685 720 585 0
-1685 720 570 0
1685 -570 -585 0
1685 -720 -585 0
1685 -720 -570 0
c (((SATLiteral(722) + SATLiteral(737) + SATLiteral(602))<=1)=tv=SATLiteral(1686))
-1686 -737 -602 0
-1686 -722 -602 0
-1686 -722 -737 0
1686 737 602 0
1686 722 602 0
1686 722 737 0
c (((SATLiteral(724) + SATLiteral(739) + SATLiteral(604))<=1)=tv=SATLiteral(1687))
-1687 -739 -604 0
-1687 -724 -604 0
-1687 -724 -739 0
1687 739 604 0
1687 724 604 0
1687 724 739 0
c (((SATLiteral(726) + SATLiteral(741) + SATLiteral(606))<=1)=tv=SATLiteral(1688))
-1688 -741 -606 0
-1688 -726 -606 0
-1688 -726 -741 0
1688 741 606 0
1688 726 606 0
1688 726 741 0
c (((SATLiteral(728) + SATLiteral(743) + SATLiteral(608))<=1)=tv=SATLiteral(1689))
-1689 -743 -608 0
-1689 -728 -608 0
-1689 -728 -743 0
1689 743 608 0
1689 728 608 0
1689 728 743 0
c (((SATLiteral(730) + SATLiteral(745) + SATLiteral(610))<=1)=tv=SATLiteral(1690))
-1690 -745 -610 0
-1690 -730 -610 0
-1690 -730 -745 0
1690 745 610 0
1690 730 610 0
1690 730 745 0
c (((SATLiteral(732) + SATLiteral(747) + SATLiteral(612))<=1)=tv=SATLiteral(1691))
-1691 -747 -612 0
-1691 -732 -612 0
-1691 -732 -747 0
1691 747 612 0
1691 732 612 0
1691 732 747 0
c (((SATLiteral(734) + SATLiteral(749) + SATLiteral(614))<=1)=tv=SATLiteral(1692))
-1692 -749 -614 0
-1692 -734 -614 0
-1692 -734 -749 0
1692 749 614 0
1692 734 614 0
1692 734 749 0
c (((SATLiteral(736) + SATLiteral(751) + SATLiteral(616))<=1)=tv=SATLiteral(1693))
-1693 -751 -616 0
-1693 -736 -616 0
-1693 -736 -751 0
1693 751 616 0
1693 736 616 0
1693 736 751 0
c (((SATLiteral(-735) + SATLiteral(-750) + SATLiteral(-615))<=1)=tv=SATLiteral(1694))
-1694 750 615 0
-1694 735 615 0
-1694 735 750 0
1694 -750 -615 0
1694 -735 -615 0
1694 -735 -750 0
c (((SATLiteral(752) + SATLiteral(767) + SATLiteral(617))<=1)=tv=SATLiteral(1695))
-1695 -767 -617 0
-1695 -752 -617 0
-1695 -752 -767 0
1695 767 617 0
1695 752 617 0
1695 752 767 0
c (((SATLiteral(754) + SATLiteral(769) + SATLiteral(619))<=1)=tv=SATLiteral(1696))
-1696 -769 -619 0
-1696 -754 -619 0
-1696 -754 -769 0
1696 769 619 0
1696 754 619 0
1696 754 769 0
c (((SATLiteral(756) + SATLiteral(771) + SATLiteral(621))<=1)=tv=SATLiteral(1697))
-1697 -771 -621 0
-1697 -756 -621 0
-1697 -756 -771 0
1697 771 621 0
1697 756 621 0
1697 756 771 0
c (((SATLiteral(758) + SATLiteral(773) + SATLiteral(623))<=1)=tv=SATLiteral(1698))
-1698 -773 -623 0
-1698 -758 -623 0
-1698 -758 -773 0
1698 773 623 0
1698 758 623 0
1698 758 773 0
c (((SATLiteral(760) + SATLiteral(775) + SATLiteral(625))<=1)=tv=SATLiteral(1699))
-1699 -775 -625 0
-1699 -760 -625 0
-1699 -760 -775 0
1699 775 625 0
1699 760 625 0
1699 760 775 0
c (((SATLiteral(762) + SATLiteral(777) + SATLiteral(627))<=1)=tv=SATLiteral(1700))
-1700 -777 -627 0
-1700 -762 -627 0
-1700 -762 -777 0
1700 777 627 0
1700 762 627 0
1700 762 777 0
c (((SATLiteral(764) + SATLiteral(779) + SATLiteral(629))<=1)=tv=SATLiteral(1701))
-1701 -779 -629 0
-1701 -764 -629 0
-1701 -764 -779 0
1701 779 629 0
1701 764 629 0
1701 764 779 0
c (((SATLiteral(766) + SATLiteral(781) + SATLiteral(631))<=1)=tv=SATLiteral(1702))
-1702 -781 -631 0
-1702 -766 -631 0
-1702 -766 -781 0
1702 781 631 0
1702 766 631 0
1702 766 781 0
c (((SATLiteral(-765) + SATLiteral(-780) + SATLiteral(-630))<=1)=tv=SATLiteral(1703))
-1703 780 630 0
-1703 765 630 0
-1703 765 780 0
1703 -780 -630 0
1703 -765 -630 0
1703 -765 -780 0
c (((SATLiteral(812) + SATLiteral(827) + SATLiteral(842))<=1)=tv=SATLiteral(1704))
-1704 -827 -842 0
-1704 -812 -842 0
-1704 -812 -827 0
1704 827 842 0
1704 812 842 0
1704 812 827 0
c (((SATLiteral(814) + SATLiteral(829) + SATLiteral(844))<=1)=tv=SATLiteral(1705))
-1705 -829 -844 0
-1705 -814 -844 0
-1705 -814 -829 0
1705 829 844 0
1705 814 844 0
1705 814 829 0
c (((SATLiteral(816) + SATLiteral(831) + SATLiteral(846))<=1)=tv=SATLiteral(1706))
-1706 -831 -846 0
-1706 -816 -846 0
-1706 -816 -831 0
1706 831 846 0
1706 816 846 0
1706 816 831 0
c (((SATLiteral(818) + SATLiteral(833) + SATLiteral(848))<=1)=tv=SATLiteral(1707))
-1707 -833 -848 0
-1707 -818 -848 0
-1707 -818 -833 0
1707 833 848 0
1707 818 848 0
1707 818 833 0
c (((SATLiteral(820) + SATLiteral(835) + SATLiteral(850))<=1)=tv=SATLiteral(1708))
-1708 -835 -850 0
-1708 -820 -850 0
-1708 -820 -835 0
1708 835 850 0
1708 820 850 0
1708 820 835 0
c (((SATLiteral(822) + SATLiteral(837) + SATLiteral(852))<=1)=tv=SATLiteral(1709))
-1709 -837 -852 0
-1709 -822 -852 0
-1709 -822 -837 0
1709 837 852 0
1709 822 852 0
1709 822 837 0
c (((SATLiteral(824) + SATLiteral(839) + SATLiteral(854))<=1)=tv=SATLiteral(1710))
-1710 -839 -854 0
-1710 -824 -854 0
-1710 -824 -839 0
1710 839 854 0
1710 824 854 0
1710 824 839 0
c (((SATLiteral(826) + SATLiteral(841) + SATLiteral(856))<=1)=tv=SATLiteral(1711))
-1711 -841 -856 0
-1711 -826 -856 0
-1711 -826 -841 0
1711 841 856 0
1711 826 856 0
1711 826 841 0
c (((SATLiteral(-825) + SATLiteral(-840) + SATLiteral(-855))<=1)=tv=SATLiteral(1712))
-1712 840 855 0
-1712 825 855 0
-1712 825 840 0
1712 -840 -855 0
1712 -825 -855 0
1712 -825 -840 0
c (((SATLiteral(1022) + SATLiteral(1157) + SATLiteral(887))<=1)=tv=SATLiteral(1713))
-1713 -1157 -887 0
-1713 -1022 -887 0
-1713 -1022 -1157 0
1713 1157 887 0
1713 1022 887 0
1713 1022 1157 0
c (((SATLiteral(1024) + SATLiteral(1159) + SATLiteral(889))<=1)=tv=SATLiteral(1714))
-1714 -1159 -889 0
-1714 -1024 -889 0
-1714 -1024 -1159 0
1714 1159 889 0
1714 1024 889 0
1714 1024 1159 0
c (((SATLiteral(1026) + SATLiteral(1161) + SATLiteral(891))<=1)=tv=SATLiteral(1715))
-1715 -1161 -891 0
-1715 -1026 -891 0
-1715 -1026 -1161 0
1715 1161 891 0
1715 1026 891 0
1715 1026 1161 0
c (((SATLiteral(1028) + SATLiteral(1163) + SATLiteral(893))<=1)=tv=SATLiteral(1716))
-1716 -1163 -893 0
-1716 -1028 -893 0
-1716 -1028 -1163 0
1716 1163 893 0
1716 1028 893 0
1716 1028 1163 0
c (((SATLiteral(1030) + SATLiteral(1165) + SATLiteral(895))<=1)=tv=SATLiteral(1717))
-1717 -1165 -895 0
-1717 -1030 -895 0
-1717 -1030 -1165 0
1717 1165 895 0
1717 1030 895 0
1717 1030 1165 0
c (((SATLiteral(1032) + SATLiteral(1167) + SATLiteral(897))<=1)=tv=SATLiteral(1718))
-1718 -1167 -897 0
-1718 -1032 -897 0
-1718 -1032 -1167 0
1718 1167 897 0
1718 1032 897 0
1718 1032 1167 0
c (((SATLiteral(1034) + SATLiteral(1169) + SATLiteral(899))<=1)=tv=SATLiteral(1719))
-1719 -1169 -899 0
-1719 -1034 -899 0
-1719 -1034 -1169 0
1719 1169 899 0
1719 1034 899 0
1719 1034 1169 0
c (((SATLiteral(1036) + SATLiteral(1171) + SATLiteral(901))<=1)=tv=SATLiteral(1720))
-1720 -1171 -901 0
-1720 -1036 -901 0
-1720 -1036 -1171 0
1720 1171 901 0
1720 1036 901 0
1720 1036 1171 0
c (((SATLiteral(-1035) + SATLiteral(-1170) + SATLiteral(-900))<=1)=tv=SATLiteral(1721))
-1721 1170 900 0
-1721 1035 900 0
-1721 1035 1170 0
1721 -1170 -900 0
1721 -1035 -900 0
1721 -1035 -1170 0
c (((SATLiteral(1037) + SATLiteral(1172) + SATLiteral(902))<=1)=tv=SATLiteral(1722))
-1722 -1172 -902 0
-1722 -1037 -902 0
-1722 -1037 -1172 0
1722 1172 902 0
1722 1037 902 0
1722 1037 1172 0
c (((SATLiteral(1039) + SATLiteral(1174) + SATLiteral(904))<=1)=tv=SATLiteral(1723))
-1723 -1174 -904 0
-1723 -1039 -904 0
-1723 -1039 -1174 0
1723 1174 904 0
1723 1039 904 0
1723 1039 1174 0
c (((SATLiteral(1041) + SATLiteral(1176) + SATLiteral(906))<=1)=tv=SATLiteral(1724))
-1724 -1176 -906 0
-1724 -1041 -906 0
-1724 -1041 -1176 0
1724 1176 906 0
1724 1041 906 0
1724 1041 1176 0
c (((SATLiteral(1043) + SATLiteral(1178) + SATLiteral(908))<=1)=tv=SATLiteral(1725))
-1725 -1178 -908 0
-1725 -1043 -908 0
-1725 -1043 -1178 0
1725 1178 908 0
1725 1043 908 0
1725 1043 1178 0
c (((SATLiteral(1045) + SATLiteral(1180) + SATLiteral(910))<=1)=tv=SATLiteral(1726))
-1726 -1180 -910 0
-1726 -1045 -910 0
-1726 -1045 -1180 0
1726 1180 910 0
1726 1045 910 0
1726 1045 1180 0
c (((SATLiteral(1047) + SATLiteral(1182) + SATLiteral(912))<=1)=tv=SATLiteral(1727))
-1727 -1182 -912 0
-1727 -1047 -912 0
-1727 -1047 -1182 0
1727 1182 912 0
1727 1047 912 0
1727 1047 1182 0
c (((SATLiteral(1049) + SATLiteral(1184) + SATLiteral(914))<=1)=tv=SATLiteral(1728))
-1728 -1184 -914 0
-1728 -1049 -914 0
-1728 -1049 -1184 0
1728 1184 914 0
1728 1049 914 0
1728 1049 1184 0
c (((SATLiteral(1051) + SATLiteral(1186) + SATLiteral(916))<=1)=tv=SATLiteral(1729))
-1729 -1186 -916 0
-1729 -1051 -916 0
-1729 -1051 -1186 0
1729 1186 916 0
1729 1051 916 0
1729 1051 1186 0
c (((SATLiteral(-1050) + SATLiteral(-1185) + SATLiteral(-915))<=1)=tv=SATLiteral(1730))
-1730 1185 915 0
-1730 1050 915 0
-1730 1050 1185 0
1730 -1185 -915 0
1730 -1050 -915 0
1730 -1050 -1185 0
c (((SATLiteral(947) + SATLiteral(962) + SATLiteral(1082))<=1)=tv=SATLiteral(1731))
-1731 -962 -1082 0
-1731 -947 -1082 0
-1731 -947 -962 0
1731 962 1082 0
1731 947 1082 0
1731 947 962 0
c (((SATLiteral(949) + SATLiteral(964) + SATLiteral(1084))<=1)=tv=SATLiteral(1732))
-1732 -964 -1084 0
-1732 -949 -1084 0
-1732 -949 -964 0
1732 964 1084 0
1732 949 1084 0
1732 949 964 0
c (((SATLiteral(951) + SATLiteral(966) + SATLiteral(1086))<=1)=tv=SATLiteral(1733))
-1733 -966 -1086 0
-1733 -951 -1086 0
-1733 -951 -966 0
1733 966 1086 0
1733 951 1086 0
1733 951 966 0
c (((SATLiteral(953) + SATLiteral(968) + SATLiteral(1088))<=1)=tv=SATLiteral(1734))
-1734 -968 -1088 0
-1734 -953 -1088 0
-1734 -953 -968 0
1734 968 1088 0
1734 953 1088 0
1734 953 968 0
c (((SATLiteral(955) + SATLiteral(970) + SATLiteral(1090))<=1)=tv=SATLiteral(1735))
-1735 -970 -1090 0
-1735 -955 -1090 0
-1735 -955 -970 0
1735 970 1090 0
1735 955 1090 0
1735 955 970 0
c (((SATLiteral(957) + SATLiteral(972) + SATLiteral(1092))<=1)=tv=SATLiteral(1736))
-1736 -972 -1092 0
-1736 -957 -1092 0
-1736 -957 -972 0
1736 972 1092 0
1736 957 1092 0
1736 957 972 0
c (((SATLiteral(959) + SATLiteral(974) + SATLiteral(1094))<=1)=tv=SATLiteral(1737))
-1737 -974 -1094 0
-1737 -959 -1094 0
-1737 -959 -974 0
1737 974 1094 0
1737 959 1094 0
1737 959 974 0
c (((SATLiteral(961) + SATLiteral(976) + SATLiteral(1096))<=1)=tv=SATLiteral(1738))
-1738 -976 -1096 0
-1738 -961 -1096 0
-1738 -961 -976 0
1738 976 1096 0
1738 961 1096 0
1738 961 976 0
c (((SATLiteral(-960) + SATLiteral(-975) + SATLiteral(-1095))<=1)=tv=SATLiteral(1739))
-1739 975 1095 0
-1739 960 1095 0
-1739 960 975 0
1739 -975 -1095 0
1739 -960 -1095 0
1739 -960 -975 0
c (((SATLiteral(977) + SATLiteral(992) + SATLiteral(1007))<=1)=tv=SATLiteral(1740))
-1740 -992 -1007 0
-1740 -977 -1007 0
-1740 -977 -992 0
1740 992 1007 0
1740 977 1007 0
1740 977 992 0
c (((SATLiteral(979) + SATLiteral(994) + SATLiteral(1009))<=1)=tv=SATLiteral(1741))
-1741 -994 -1009 0
-1741 -979 -1009 0
-1741 -979 -994 0
1741 994 1009 0
1741 979 1009 0
1741 979 994 0
c (((SATLiteral(981) + SATLiteral(996) + SATLiteral(1011))<=1)=tv=SATLiteral(1742))
-1742 -996 -1011 0
-1742 -981 -1011 0
-1742 -981 -996 0
1742 996 1011 0
1742 981 1011 0
1742 981 996 0
c (((SATLiteral(983) + SATLiteral(998) + SATLiteral(1013))<=1)=tv=SATLiteral(1743))
-1743 -998 -1013 0
-1743 -983 -1013 0
-1743 -983 -998 0
1743 998 1013 0
1743 983 1013 0
1743 983 998 0
c (((SATLiteral(985) + SATLiteral(1000) + SATLiteral(1015))<=1)=tv=SATLiteral(1744))
-1744 -1000 -1015 0
-1744 -985 -1015 0
-1744 -985 -1000 0
1744 1000 1015 0
1744 985 1015 0
1744 985 1000 0
c (((SATLiteral(987) + SATLiteral(1002) + SATLiteral(1017))<=1)=tv=SATLiteral(1745))
-1745 -1002 -1017 0
-1745 -987 -1017 0
-1745 -987 -1002 0
1745 1002 1017 0
1745 987 1017 0
1745 987 1002 0
c (((SATLiteral(989) + SATLiteral(1004) + SATLiteral(1019))<=1)=tv=SATLiteral(1746))
-1746 -1004 -1019 0
-1746 -989 -1019 0
-1746 -989 -1004 0
1746 1004 1019 0
1746 989 1019 0
1746 989 1004 0
c (((SATLiteral(991) + SATLiteral(1006) + SATLiteral(1021))<=1)=tv=SATLiteral(1747))
-1747 -1006 -1021 0
-1747 -991 -1021 0
-1747 -991 -1006 0
1747 1006 1021 0
1747 991 1021 0
1747 991 1006 0
c (((SATLiteral(-990) + SATLiteral(-1005) + SATLiteral(-1020))<=1)=tv=SATLiteral(1748))
-1748 1005 1020 0
-1748 990 1020 0
-1748 990 1005 0
1748 -1005 -1020 0
1748 -990 -1020 0
1748 -990 -1005 0
c (((SATLiteral(1067) + aux1947 + SATLiteral(1187))<=1)=tv=SATLiteral(1749))
-1749 7778 0
-1749 -1187 7777 0
-1749 -1067 7777 0
-1749 -1067 -1187 0
1749 1187 -7777 0
1749 1067 -7777 0
1749 1067 1187 -7778 0
c (((SATLiteral(1069) + aux1948 + SATLiteral(1189))<=1)=tv=SATLiteral(1750))
-1750 7781 0
-1750 -1189 7780 0
-1750 -1069 7780 0
-1750 -1069 -1189 0
1750 1189 -7780 0
1750 1069 -7780 0
1750 1069 1189 -7781 0
c (((SATLiteral(1071) + aux1949 + SATLiteral(1191))<=1)=tv=SATLiteral(1751))
-1751 7784 0
-1751 -1191 7783 0
-1751 -1071 7783 0
-1751 -1071 -1191 0
1751 1191 -7783 0
1751 1071 -7783 0
1751 1071 1191 -7784 0
c (((SATLiteral(1073) + aux1950 + SATLiteral(1193))<=1)=tv=SATLiteral(1752))
-1752 7787 0
-1752 -1193 7786 0
-1752 -1073 7786 0
-1752 -1073 -1193 0
1752 1193 -7786 0
1752 1073 -7786 0
1752 1073 1193 -7787 0
c (((SATLiteral(1075) + aux1951 + SATLiteral(1195))<=1)=tv=SATLiteral(1753))
-1753 7790 0
-1753 -1195 7789 0
-1753 -1075 7789 0
-1753 -1075 -1195 0
1753 1195 -7789 0
1753 1075 -7789 0
1753 1075 1195 -7790 0
c (((SATLiteral(1077) + aux1952 + SATLiteral(1197))<=1)=tv=SATLiteral(1754))
-1754 7793 0
-1754 -1197 7792 0
-1754 -1077 7792 0
-1754 -1077 -1197 0
1754 1197 -7792 0
1754 1077 -7792 0
1754 1077 1197 -7793 0
c (((SATLiteral(1079) + aux1953 + SATLiteral(1199))<=1)=tv=SATLiteral(1755))
-1755 7796 0
-1755 -1199 7795 0
-1755 -1079 7795 0
-1755 -1079 -1199 0
1755 1199 -7795 0
1755 1079 -7795 0
1755 1079 1199 -7796 0
c (((SATLiteral(1081) + aux1954 + SATLiteral(1201))<=1)=tv=SATLiteral(1756))
-1756 7799 0
-1756 -1201 7798 0
-1756 -1081 7798 0
-1756 -1081 -1201 0
1756 1201 -7798 0
1756 1081 -7798 0
1756 1081 1201 -7799 0
c (((SATLiteral(-1080) + aux1955 + SATLiteral(-1200))<=1)=tv=SATLiteral(1757))
-1757 7802 0
-1757 1200 7801 0
-1757 1080 7801 0
-1757 1080 1200 0
1757 -1200 -7801 0
1757 -1080 -7801 0
1757 -1080 -1200 -7802 0
c (((aux1956 + SATLiteral(1112) + SATLiteral(1127))<=1)=tv=SATLiteral(1758))
-1758 7805 0
-1758 -1127 7804 0
-1758 -1112 7804 0
-1758 -1112 -1127 0
1758 1127 -7804 0
1758 1112 -7804 0
1758 1112 1127 -7805 0
c (((aux1957 + SATLiteral(1114) + SATLiteral(1129))<=1)=tv=SATLiteral(1759))
-1759 7808 0
-1759 -1129 7807 0
-1759 -1114 7807 0
-1759 -1114 -1129 0
1759 1129 -7807 0
1759 1114 -7807 0
1759 1114 1129 -7808 0
c (((aux1958 + SATLiteral(1116) + SATLiteral(1131))<=1)=tv=SATLiteral(1760))
-1760 7811 0
-1760 -1131 7810 0
-1760 -1116 7810 0
-1760 -1116 -1131 0
1760 1131 -7810 0
1760 1116 -7810 0
1760 1116 1131 -7811 0
c (((aux1959 + SATLiteral(1118) + SATLiteral(1133))<=1)=tv=SATLiteral(1761))
-1761 7814 0
-1761 -1133 7813 0
-1761 -1118 7813 0
-1761 -1118 -1133 0
1761 1133 -7813 0
1761 1118 -7813 0
1761 1118 1133 -7814 0
c (((aux1960 + SATLiteral(1120) + SATLiteral(1135))<=1)=tv=SATLiteral(1762))
-1762 7817 0
-1762 -1135 7816 0
-1762 -1120 7816 0
-1762 -1120 -1135 0
1762 1135 -7816 0
1762 1120 -7816 0
1762 1120 1135 -7817 0
c (((aux1961 + SATLiteral(1122) + SATLiteral(1137))<=1)=tv=SATLiteral(1763))
-1763 7820 0
-1763 -1137 7819 0
-1763 -1122 7819 0
-1763 -1122 -1137 0
1763 1137 -7819 0
1763 1122 -7819 0
1763 1122 1137 -7820 0
c (((aux1962 + SATLiteral(1124) + SATLiteral(1139))<=1)=tv=SATLiteral(1764))
-1764 7823 0
-1764 -1139 7822 0
-1764 -1124 7822 0
-1764 -1124 -1139 0
1764 1139 -7822 0
1764 1124 -7822 0
1764 1124 1139 -7823 0
c (((aux1963 + SATLiteral(1126) + SATLiteral(1141))<=1)=tv=SATLiteral(1765))
-1765 7826 0
-1765 -1141 7825 0
-1765 -1126 7825 0
-1765 -1126 -1141 0
1765 1141 -7825 0
1765 1126 -7825 0
1765 1126 1141 -7826 0
c (((aux1964 + SATLiteral(-1125) + SATLiteral(-1140))<=1)=tv=SATLiteral(1766))
-1766 7829 0
-1766 1140 7828 0
-1766 1125 7828 0
-1766 1125 1140 0
1766 -1140 -7828 0
1766 -1125 -7828 0
1766 -1125 -1140 -7829 0
c (SATLiteral(1272) -> SATLiteral(1300))
-1272 1300 0
c (SATLiteral(1273) -> SATLiteral(1301))
-1273 1301 0
c (SATLiteral(1274) -> SATLiteral(1302))
-1274 1302 0
c (SATLiteral(1275) -> SATLiteral(1303))
-1275 1303 0
c (SATLiteral(1276) -> SATLiteral(1304))
-1276 1304 0
c (SATLiteral(1277) -> SATLiteral(1305))
-1277 1305 0
c (SATLiteral(1278) -> SATLiteral(1306))
-1278 1306 0
c (SATLiteral(1279) -> SATLiteral(1307))
-1279 1307 0
c (SATLiteral(1280) -> SATLiteral(1308))
-1280 1308 0
c (SATLiteral(1281) -> SATLiteral(1309))
-1281 1309 0
c (SATLiteral(1282) -> SATLiteral(1310))
-1282 1310 0
c (SATLiteral(1283) -> SATLiteral(1311))
-1283 1311 0
c (SATLiteral(1284) -> SATLiteral(1312))
-1284 1312 0
c (SATLiteral(1285) -> SATLiteral(1313))
-1285 1313 0
c (SATLiteral(1286) -> SATLiteral(1314))
-1286 1314 0
c (SATLiteral(1287) -> SATLiteral(1315))
-1287 1315 0
c (SATLiteral(1288) -> SATLiteral(1316))
-1288 1316 0
c (SATLiteral(1289) -> SATLiteral(1317))
-1289 1317 0
c (SATLiteral(1290) -> SATLiteral(1318))
-1290 1318 0
c (SATLiteral(1291) -> SATLiteral(1319))
-1291 1319 0
c (SATLiteral(1292) -> SATLiteral(1320))
-1292 1320 0
c (SATLiteral(1293) -> SATLiteral(1321))
-1293 1321 0
c (SATLiteral(1294) -> SATLiteral(1322))
-1294 1322 0
c (SATLiteral(1295) -> SATLiteral(1323))
-1295 1323 0
c (SATLiteral(1296) -> SATLiteral(1324))
-1296 1324 0
c (SATLiteral(1297) -> SATLiteral(1325))
-1297 1325 0
c (SATLiteral(1298) -> SATLiteral(1326))
-1298 1326 0
c (SATLiteral(1299) -> SATLiteral(1327))
-1299 1327 0
c (SATLiteral(1250) -> SATLiteral(1328))
-1250 1328 0
c (SATLiteral(1251) -> SATLiteral(1329))
-1251 1329 0
c (SATLiteral(1252) -> SATLiteral(1330))
-1252 1330 0
c (SATLiteral(1255) -> SATLiteral(1331))
-1255 1331 0
c (SATLiteral(1262) -> SATLiteral(1332))
-1262 1332 0
c (SATLiteral(1263) -> SATLiteral(1333))
-1263 1333 0
c (SATLiteral(1265) -> SATLiteral(1334))
-1265 1334 0
c (SATLiteral(1217) -> SATLiteral(1335))
-1217 1335 0
c (SATLiteral(1217) -> SATLiteral(1336))
-1217 1336 0
c (SATLiteral(1217) -> SATLiteral(1337))
-1217 1337 0
c (SATLiteral(1217) -> SATLiteral(1338))
-1217 1338 0
c (SATLiteral(1217) -> SATLiteral(1339))
-1217 1339 0
c (SATLiteral(1217) -> SATLiteral(1340))
-1217 1340 0
c (SATLiteral(1217) -> SATLiteral(1341))
-1217 1341 0
c (SATLiteral(1217) -> SATLiteral(1342))
-1217 1342 0
c (SATLiteral(1217) -> SATLiteral(1343))
-1217 1343 0
c (SATLiteral(1218) -> SATLiteral(1344))
-1218 1344 0
c (SATLiteral(1218) -> SATLiteral(1345))
-1218 1345 0
c (SATLiteral(1218) -> SATLiteral(1346))
-1218 1346 0
c (SATLiteral(1218) -> SATLiteral(1347))
-1218 1347 0
c (SATLiteral(1218) -> SATLiteral(1348))
-1218 1348 0
c (SATLiteral(1218) -> SATLiteral(1349))
-1218 1349 0
c (SATLiteral(1218) -> SATLiteral(1350))
-1218 1350 0
c (SATLiteral(1218) -> SATLiteral(1351))
-1218 1351 0
c (SATLiteral(1218) -> SATLiteral(1352))
-1218 1352 0
c (SATLiteral(1219) -> SATLiteral(1353))
-1219 1353 0
c (SATLiteral(1219) -> SATLiteral(1354))
-1219 1354 0
c (SATLiteral(1219) -> SATLiteral(1355))
-1219 1355 0
c (SATLiteral(1219) -> SATLiteral(1356))
-1219 1356 0
c (SATLiteral(1219) -> SATLiteral(1357))
-1219 1357 0
c (SATLiteral(1219) -> SATLiteral(1358))
-1219 1358 0
c (SATLiteral(1219) -> SATLiteral(1359))
-1219 1359 0
c (SATLiteral(1219) -> SATLiteral(1360))
-1219 1360 0
c (SATLiteral(1219) -> SATLiteral(1361))
-1219 1361 0
c (SATLiteral(1220) -> SATLiteral(1362))
-1220 1362 0
c (SATLiteral(1220) -> SATLiteral(1363))
-1220 1363 0
c (SATLiteral(1220) -> SATLiteral(1364))
-1220 1364 0
c (SATLiteral(1220) -> SATLiteral(1365))
-1220 1365 0
c (SATLiteral(1220) -> SATLiteral(1366))
-1220 1366 0
c (SATLiteral(1220) -> SATLiteral(1367))
-1220 1367 0
c (SATLiteral(1220) -> SATLiteral(1368))
-1220 1368 0
c (SATLiteral(1220) -> SATLiteral(1369))
-1220 1369 0
c (SATLiteral(1220) -> SATLiteral(1370))
-1220 1370 0
c (SATLiteral(1221) -> SATLiteral(1371))
-1221 1371 0
c (SATLiteral(1221) -> SATLiteral(1372))
-1221 1372 0
c (SATLiteral(1221) -> SATLiteral(1373))
-1221 1373 0
c (SATLiteral(1221) -> SATLiteral(1374))
-1221 1374 0
c (SATLiteral(1221) -> SATLiteral(1375))
-1221 1375 0
c (SATLiteral(1221) -> SATLiteral(1376))
-1221 1376 0
c (SATLiteral(1221) -> SATLiteral(1377))
-1221 1377 0
c (SATLiteral(1221) -> SATLiteral(1378))
-1221 1378 0
c (SATLiteral(1221) -> SATLiteral(1379))
-1221 1379 0
c (SATLiteral(1222) -> SATLiteral(1380))
-1222 1380 0
c (SATLiteral(1222) -> SATLiteral(1381))
-1222 1381 0
c (SATLiteral(1222) -> SATLiteral(1382))
-1222 1382 0
c (SATLiteral(1222) -> SATLiteral(1383))
-1222 1383 0
c (SATLiteral(1222) -> SATLiteral(1384))
-1222 1384 0
c (SATLiteral(1222) -> SATLiteral(1385))
-1222 1385 0
c (SATLiteral(1222) -> SATLiteral(1386))
-1222 1386 0
c (SATLiteral(1222) -> SATLiteral(1387))
-1222 1387 0
c (SATLiteral(1222) -> SATLiteral(1388))
-1222 1388 0
c (SATLiteral(1223) -> SATLiteral(1389))
-1223 1389 0
c (SATLiteral(1223) -> SATLiteral(1390))
-1223 1390 0
c (SATLiteral(1223) -> SATLiteral(1391))
-1223 1391 0
c (SATLiteral(1223) -> SATLiteral(1392))
-1223 1392 0
c (SATLiteral(1223) -> SATLiteral(1393))
-1223 1393 0
c (SATLiteral(1223) -> SATLiteral(1394))
-1223 1394 0
c (SATLiteral(1223) -> SATLiteral(1395))
-1223 1395 0
c (SATLiteral(1223) -> SATLiteral(1396))
-1223 1396 0
c (SATLiteral(1223) -> SATLiteral(1397))
-1223 1397 0
c (SATLiteral(1224) -> SATLiteral(1398))
-1224 1398 0
c (SATLiteral(1224) -> SATLiteral(1399))
-1224 1399 0
c (SATLiteral(1224) -> SATLiteral(1400))
-1224 1400 0
c (SATLiteral(1224) -> SATLiteral(1401))
-1224 1401 0
c (SATLiteral(1224) -> SATLiteral(1402))
-1224 1402 0
c (SATLiteral(1224) -> SATLiteral(1403))
-1224 1403 0
c (SATLiteral(1224) -> SATLiteral(1404))
-1224 1404 0
c (SATLiteral(1224) -> SATLiteral(1405))
-1224 1405 0
c (SATLiteral(1224) -> SATLiteral(1406))
-1224 1406 0
c (SATLiteral(1225) -> SATLiteral(1407))
-1225 1407 0
c (SATLiteral(1225) -> SATLiteral(1408))
-1225 1408 0
c (SATLiteral(1225) -> SATLiteral(1409))
-1225 1409 0
c (SATLiteral(1225) -> SATLiteral(1410))
-1225 1410 0
c (SATLiteral(1225) -> SATLiteral(1411))
-1225 1411 0
c (SATLiteral(1225) -> SATLiteral(1412))
-1225 1412 0
c (SATLiteral(1225) -> SATLiteral(1413))
-1225 1413 0
c (SATLiteral(1225) -> SATLiteral(1414))
-1225 1414 0
c (SATLiteral(1225) -> SATLiteral(1415))
-1225 1415 0
c (SATLiteral(1226) -> SATLiteral(1416))
-1226 1416 0
c (SATLiteral(1226) -> SATLiteral(1417))
-1226 1417 0
c (SATLiteral(1226) -> SATLiteral(1418))
-1226 1418 0
c (SATLiteral(1226) -> SATLiteral(1419))
-1226 1419 0
c (SATLiteral(1226) -> SATLiteral(1420))
-1226 1420 0
c (SATLiteral(1226) -> SATLiteral(1421))
-1226 1421 0
c (SATLiteral(1226) -> SATLiteral(1422))
-1226 1422 0
c (SATLiteral(1226) -> SATLiteral(1423))
-1226 1423 0
c (SATLiteral(1226) -> SATLiteral(1424))
-1226 1424 0
c (SATLiteral(1227) -> SATLiteral(1425))
-1227 1425 0
c (SATLiteral(1227) -> SATLiteral(1426))
-1227 1426 0
c (SATLiteral(1227) -> SATLiteral(1427))
-1227 1427 0
c (SATLiteral(1227) -> SATLiteral(1428))
-1227 1428 0
c (SATLiteral(1227) -> SATLiteral(1429))
-1227 1429 0
c (SATLiteral(1227) -> SATLiteral(1430))
-1227 1430 0
c (SATLiteral(1227) -> SATLiteral(1431))
-1227 1431 0
c (SATLiteral(1227) -> SATLiteral(1432))
-1227 1432 0
c (SATLiteral(1227) -> SATLiteral(1433))
-1227 1433 0
c (SATLiteral(1228) -> SATLiteral(1434))
-1228 1434 0
c (SATLiteral(1228) -> SATLiteral(1435))
-1228 1435 0
c (SATLiteral(1228) -> SATLiteral(1436))
-1228 1436 0
c (SATLiteral(1228) -> SATLiteral(1437))
-1228 1437 0
c (SATLiteral(1228) -> SATLiteral(1438))
-1228 1438 0
c (SATLiteral(1228) -> SATLiteral(1439))
-1228 1439 0
c (SATLiteral(1228) -> SATLiteral(1440))
-1228 1440 0
c (SATLiteral(1228) -> SATLiteral(1441))
-1228 1441 0
c (SATLiteral(1228) -> SATLiteral(1442))
-1228 1442 0
c (SATLiteral(1229) -> SATLiteral(1443))
-1229 1443 0
c (SATLiteral(1229) -> SATLiteral(1444))
-1229 1444 0
c (SATLiteral(1229) -> SATLiteral(1445))
-1229 1445 0
c (SATLiteral(1229) -> SATLiteral(1446))
-1229 1446 0
c (SATLiteral(1229) -> SATLiteral(1447))
-1229 1447 0
c (SATLiteral(1229) -> SATLiteral(1448))
-1229 1448 0
c (SATLiteral(1229) -> SATLiteral(1449))
-1229 1449 0
c (SATLiteral(1229) -> SATLiteral(1450))
-1229 1450 0
c (SATLiteral(1229) -> SATLiteral(1451))
-1229 1451 0
c (SATLiteral(1230) -> SATLiteral(1452))
-1230 1452 0
c (SATLiteral(1230) -> SATLiteral(1453))
-1230 1453 0
c (SATLiteral(1230) -> SATLiteral(1454))
-1230 1454 0
c (SATLiteral(1230) -> SATLiteral(1455))
-1230 1455 0
c (SATLiteral(1230) -> SATLiteral(1456))
-1230 1456 0
c (SATLiteral(1230) -> SATLiteral(1457))
-1230 1457 0
c (SATLiteral(1230) -> SATLiteral(1458))
-1230 1458 0
c (SATLiteral(1230) -> SATLiteral(1459))
-1230 1459 0
c (SATLiteral(1230) -> SATLiteral(1460))
-1230 1460 0
c (SATLiteral(1231) -> SATLiteral(1461))
-1231 1461 0
c (SATLiteral(1231) -> SATLiteral(1462))
-1231 1462 0
c (SATLiteral(1231) -> SATLiteral(1463))
-1231 1463 0
c (SATLiteral(1231) -> SATLiteral(1464))
-1231 1464 0
c (SATLiteral(1231) -> SATLiteral(1465))
-1231 1465 0
c (SATLiteral(1231) -> SATLiteral(1466))
-1231 1466 0
c (SATLiteral(1231) -> SATLiteral(1467))
-1231 1467 0
c (SATLiteral(1231) -> SATLiteral(1468))
-1231 1468 0
c (SATLiteral(1231) -> SATLiteral(1469))
-1231 1469 0
c (SATLiteral(1232) -> SATLiteral(1470))
-1232 1470 0
c (SATLiteral(1232) -> SATLiteral(1471))
-1232 1471 0
c (SATLiteral(1232) -> SATLiteral(1472))
-1232 1472 0
c (SATLiteral(1232) -> SATLiteral(1473))
-1232 1473 0
c (SATLiteral(1232) -> SATLiteral(1474))
-1232 1474 0
c (SATLiteral(1232) -> SATLiteral(1475))
-1232 1475 0
c (SATLiteral(1232) -> SATLiteral(1476))
-1232 1476 0
c (SATLiteral(1232) -> SATLiteral(1477))
-1232 1477 0
c (SATLiteral(1232) -> SATLiteral(1478))
-1232 1478 0
c (SATLiteral(1233) -> SATLiteral(1479))
-1233 1479 0
c (SATLiteral(1233) -> SATLiteral(1480))
-1233 1480 0
c (SATLiteral(1233) -> SATLiteral(1481))
-1233 1481 0
c (SATLiteral(1233) -> SATLiteral(1482))
-1233 1482 0
c (SATLiteral(1233) -> SATLiteral(1483))
-1233 1483 0
c (SATLiteral(1233) -> SATLiteral(1484))
-1233 1484 0
c (SATLiteral(1233) -> SATLiteral(1485))
-1233 1485 0
c (SATLiteral(1233) -> SATLiteral(1486))
-1233 1486 0
c (SATLiteral(1233) -> SATLiteral(1487))
-1233 1487 0
c (SATLiteral(1234) -> SATLiteral(1488))
-1234 1488 0
c (SATLiteral(1234) -> SATLiteral(1489))
-1234 1489 0
c (SATLiteral(1234) -> SATLiteral(1490))
-1234 1490 0
c (SATLiteral(1234) -> SATLiteral(1491))
-1234 1491 0
c (SATLiteral(1234) -> SATLiteral(1492))
-1234 1492 0
c (SATLiteral(1234) -> SATLiteral(1493))
-1234 1493 0
c (SATLiteral(1234) -> SATLiteral(1494))
-1234 1494 0
c (SATLiteral(1234) -> SATLiteral(1495))
-1234 1495 0
c (SATLiteral(1234) -> SATLiteral(1496))
-1234 1496 0
c (SATLiteral(1235) -> SATLiteral(1497))
-1235 1497 0
c (SATLiteral(1235) -> SATLiteral(1498))
-1235 1498 0
c (SATLiteral(1235) -> SATLiteral(1499))
-1235 1499 0
c (SATLiteral(1235) -> SATLiteral(1500))
-1235 1500 0
c (SATLiteral(1235) -> SATLiteral(1501))
-1235 1501 0
c (SATLiteral(1235) -> SATLiteral(1502))
-1235 1502 0
c (SATLiteral(1235) -> SATLiteral(1503))
-1235 1503 0
c (SATLiteral(1235) -> SATLiteral(1504))
-1235 1504 0
c (SATLiteral(1235) -> SATLiteral(1505))
-1235 1505 0
c (SATLiteral(1236) -> SATLiteral(1506))
-1236 1506 0
c (SATLiteral(1236) -> SATLiteral(1507))
-1236 1507 0
c (SATLiteral(1236) -> SATLiteral(1508))
-1236 1508 0
c (SATLiteral(1236) -> SATLiteral(1509))
-1236 1509 0
c (SATLiteral(1236) -> SATLiteral(1510))
-1236 1510 0
c (SATLiteral(1236) -> SATLiteral(1511))
-1236 1511 0
c (SATLiteral(1236) -> SATLiteral(1512))
-1236 1512 0
c (SATLiteral(1236) -> SATLiteral(1513))
-1236 1513 0
c (SATLiteral(1236) -> SATLiteral(1514))
-1236 1514 0
c (SATLiteral(1237) -> SATLiteral(1515))
-1237 1515 0
c (SATLiteral(1237) -> SATLiteral(1516))
-1237 1516 0
c (SATLiteral(1237) -> SATLiteral(1517))
-1237 1517 0
c (SATLiteral(1237) -> SATLiteral(1518))
-1237 1518 0
c (SATLiteral(1237) -> SATLiteral(1519))
-1237 1519 0
c (SATLiteral(1237) -> SATLiteral(1520))
-1237 1520 0
c (SATLiteral(1237) -> SATLiteral(1521))
-1237 1521 0
c (SATLiteral(1237) -> SATLiteral(1522))
-1237 1522 0
c (SATLiteral(1237) -> SATLiteral(1523))
-1237 1523 0
c (SATLiteral(1238) -> SATLiteral(1524))
-1238 1524 0
c (SATLiteral(1238) -> SATLiteral(1525))
-1238 1525 0
c (SATLiteral(1238) -> SATLiteral(1526))
-1238 1526 0
c (SATLiteral(1238) -> SATLiteral(1527))
-1238 1527 0
c (SATLiteral(1238) -> SATLiteral(1528))
-1238 1528 0
c (SATLiteral(1238) -> SATLiteral(1529))
-1238 1529 0
c (SATLiteral(1238) -> SATLiteral(1530))
-1238 1530 0
c (SATLiteral(1238) -> SATLiteral(1531))
-1238 1531 0
c (SATLiteral(1238) -> SATLiteral(1532))
-1238 1532 0
c (SATLiteral(1239) -> SATLiteral(1533))
-1239 1533 0
c (SATLiteral(1239) -> SATLiteral(1534))
-1239 1534 0
c (SATLiteral(1239) -> SATLiteral(1535))
-1239 1535 0
c (SATLiteral(1239) -> SATLiteral(1536))
-1239 1536 0
c (SATLiteral(1239) -> SATLiteral(1537))
-1239 1537 0
c (SATLiteral(1239) -> SATLiteral(1538))
-1239 1538 0
c (SATLiteral(1239) -> SATLiteral(1539))
-1239 1539 0
c (SATLiteral(1239) -> SATLiteral(1540))
-1239 1540 0
c (SATLiteral(1239) -> SATLiteral(1541))
-1239 1541 0
c (SATLiteral(1240) -> SATLiteral(1542))
-1240 1542 0
c (SATLiteral(1240) -> SATLiteral(1543))
-1240 1543 0
c (SATLiteral(1240) -> SATLiteral(1544))
-1240 1544 0
c (SATLiteral(1240) -> SATLiteral(1545))
-1240 1545 0
c (SATLiteral(1240) -> SATLiteral(1546))
-1240 1546 0
c (SATLiteral(1240) -> SATLiteral(1547))
-1240 1547 0
c (SATLiteral(1240) -> SATLiteral(1548))
-1240 1548 0
c (SATLiteral(1240) -> SATLiteral(1549))
-1240 1549 0
c (SATLiteral(1240) -> SATLiteral(1550))
-1240 1550 0
c (SATLiteral(1241) -> SATLiteral(1551))
-1241 1551 0
c (SATLiteral(1241) -> SATLiteral(1552))
-1241 1552 0
c (SATLiteral(1241) -> SATLiteral(1553))
-1241 1553 0
c (SATLiteral(1241) -> SATLiteral(1554))
-1241 1554 0
c (SATLiteral(1241) -> SATLiteral(1555))
-1241 1555 0
c (SATLiteral(1241) -> SATLiteral(1556))
-1241 1556 0
c (SATLiteral(1241) -> SATLiteral(1557))
-1241 1557 0
c (SATLiteral(1241) -> SATLiteral(1558))
-1241 1558 0
c (SATLiteral(1241) -> SATLiteral(1559))
-1241 1559 0
c (SATLiteral(1242) -> SATLiteral(1560))
-1242 1560 0
c (SATLiteral(1242) -> SATLiteral(1561))
-1242 1561 0
c (SATLiteral(1242) -> SATLiteral(1562))
-1242 1562 0
c (SATLiteral(1242) -> SATLiteral(1563))
-1242 1563 0
c (SATLiteral(1242) -> SATLiteral(1564))
-1242 1564 0
c (SATLiteral(1242) -> SATLiteral(1565))
-1242 1565 0
c (SATLiteral(1242) -> SATLiteral(1566))
-1242 1566 0
c (SATLiteral(1242) -> SATLiteral(1567))
-1242 1567 0
c (SATLiteral(1242) -> SATLiteral(1568))
-1242 1568 0
c (SATLiteral(1243) -> SATLiteral(1569))
-1243 1569 0
c (SATLiteral(1243) -> SATLiteral(1570))
-1243 1570 0
c (SATLiteral(1243) -> SATLiteral(1571))
-1243 1571 0
c (SATLiteral(1243) -> SATLiteral(1572))
-1243 1572 0
c (SATLiteral(1243) -> SATLiteral(1573))
-1243 1573 0
c (SATLiteral(1243) -> SATLiteral(1574))
-1243 1574 0
c (SATLiteral(1243) -> SATLiteral(1575))
-1243 1575 0
c (SATLiteral(1243) -> SATLiteral(1576))
-1243 1576 0
c (SATLiteral(1243) -> SATLiteral(1577))
-1243 1577 0
c (SATLiteral(1244) -> SATLiteral(1578))
-1244 1578 0
c (SATLiteral(1244) -> SATLiteral(1579))
-1244 1579 0
c (SATLiteral(1244) -> SATLiteral(1580))
-1244 1580 0
c (SATLiteral(1244) -> SATLiteral(1581))
-1244 1581 0
c (SATLiteral(1244) -> SATLiteral(1582))
-1244 1582 0
c (SATLiteral(1244) -> SATLiteral(1583))
-1244 1583 0
c (SATLiteral(1244) -> SATLiteral(1584))
-1244 1584 0
c (SATLiteral(1244) -> SATLiteral(1585))
-1244 1585 0
c (SATLiteral(1244) -> SATLiteral(1586))
-1244 1586 0
c (SATLiteral(1245) -> SATLiteral(1587))
-1245 1587 0
c (SATLiteral(1245) -> SATLiteral(1588))
-1245 1588 0
c (SATLiteral(1245) -> SATLiteral(1589))
-1245 1589 0
c (SATLiteral(1245) -> SATLiteral(1590))
-1245 1590 0
c (SATLiteral(1245) -> SATLiteral(1591))
-1245 1591 0
c (SATLiteral(1245) -> SATLiteral(1592))
-1245 1592 0
c (SATLiteral(1245) -> SATLiteral(1593))
-1245 1593 0
c (SATLiteral(1245) -> SATLiteral(1594))
-1245 1594 0
c (SATLiteral(1245) -> SATLiteral(1595))
-1245 1595 0
c (SATLiteral(1246) -> SATLiteral(1596))
-1246 1596 0
c (SATLiteral(1246) -> SATLiteral(1597))
-1246 1597 0
c (SATLiteral(1246) -> SATLiteral(1598))
-1246 1598 0
c (SATLiteral(1246) -> SATLiteral(1599))
-1246 1599 0
c (SATLiteral(1246) -> SATLiteral(1600))
-1246 1600 0
c (SATLiteral(1246) -> SATLiteral(1601))
-1246 1601 0
c (SATLiteral(1246) -> SATLiteral(1602))
-1246 1602 0
c (SATLiteral(1246) -> SATLiteral(1603))
-1246 1603 0
c (SATLiteral(1246) -> SATLiteral(1604))
-1246 1604 0
c (SATLiteral(1247) -> SATLiteral(1605))
-1247 1605 0
c (SATLiteral(1247) -> SATLiteral(1606))
-1247 1606 0
c (SATLiteral(1247) -> SATLiteral(1607))
-1247 1607 0
c (SATLiteral(1247) -> SATLiteral(1608))
-1247 1608 0
c (SATLiteral(1247) -> SATLiteral(1609))
-1247 1609 0
c (SATLiteral(1247) -> SATLiteral(1610))
-1247 1610 0
c (SATLiteral(1247) -> SATLiteral(1611))
-1247 1611 0
c (SATLiteral(1247) -> SATLiteral(1612))
-1247 1612 0
c (SATLiteral(1247) -> SATLiteral(1613))
-1247 1613 0
c (SATLiteral(1248) -> SATLiteral(1614))
-1248 1614 0
c (SATLiteral(1248) -> SATLiteral(1615))
-1248 1615 0
c (SATLiteral(1248) -> SATLiteral(1616))
-1248 1616 0
c (SATLiteral(1248) -> SATLiteral(1617))
-1248 1617 0
c (SATLiteral(1248) -> SATLiteral(1618))
-1248 1618 0
c (SATLiteral(1248) -> SATLiteral(1619))
-1248 1619 0
c (SATLiteral(1248) -> SATLiteral(1620))
-1248 1620 0
c (SATLiteral(1248) -> SATLiteral(1621))
-1248 1621 0
c (SATLiteral(1248) -> SATLiteral(1622))
-1248 1622 0
c (SATLiteral(1249) -> SATLiteral(1623))
-1249 1623 0
c (SATLiteral(1249) -> SATLiteral(1624))
-1249 1624 0
c (SATLiteral(1249) -> SATLiteral(1625))
-1249 1625 0
c (SATLiteral(1249) -> SATLiteral(1626))
-1249 1626 0
c (SATLiteral(1249) -> SATLiteral(1627))
-1249 1627 0
c (SATLiteral(1249) -> SATLiteral(1628))
-1249 1628 0
c (SATLiteral(1249) -> SATLiteral(1629))
-1249 1629 0
c (SATLiteral(1249) -> SATLiteral(1630))
-1249 1630 0
c (SATLiteral(1249) -> SATLiteral(1631))
-1249 1631 0
c (SATLiteral(1253) -> SATLiteral(1632))
-1253 1632 0
c (SATLiteral(1253) -> SATLiteral(1633))
-1253 1633 0
c (SATLiteral(1253) -> SATLiteral(1634))
-1253 1634 0
c (SATLiteral(1253) -> SATLiteral(1635))
-1253 1635 0
c (SATLiteral(1253) -> SATLiteral(1636))
-1253 1636 0
c (SATLiteral(1253) -> SATLiteral(1637))
-1253 1637 0
c (SATLiteral(1253) -> SATLiteral(1638))
-1253 1638 0
c (SATLiteral(1253) -> SATLiteral(1639))
-1253 1639 0
c (SATLiteral(1253) -> SATLiteral(1640))
-1253 1640 0
c (SATLiteral(1254) -> SATLiteral(1641))
-1254 1641 0
c (SATLiteral(1254) -> SATLiteral(1642))
-1254 1642 0
c (SATLiteral(1254) -> SATLiteral(1643))
-1254 1643 0
c (SATLiteral(1254) -> SATLiteral(1644))
-1254 1644 0
c (SATLiteral(1254) -> SATLiteral(1645))
-1254 1645 0
c (SATLiteral(1254) -> SATLiteral(1646))
-1254 1646 0
c (SATLiteral(1254) -> SATLiteral(1647))
-1254 1647 0
c (SATLiteral(1254) -> SATLiteral(1648))
-1254 1648 0
c (SATLiteral(1254) -> SATLiteral(1649))
-1254 1649 0
c (SATLiteral(1256) -> SATLiteral(1650))
-1256 1650 0
c (SATLiteral(1256) -> SATLiteral(1651))
-1256 1651 0
c (SATLiteral(1256) -> SATLiteral(1652))
-1256 1652 0
c (SATLiteral(1256) -> SATLiteral(1653))
-1256 1653 0
c (SATLiteral(1256) -> SATLiteral(1654))
-1256 1654 0
c (SATLiteral(1256) -> SATLiteral(1655))
-1256 1655 0
c (SATLiteral(1256) -> SATLiteral(1656))
-1256 1656 0
c (SATLiteral(1256) -> SATLiteral(1657))
-1256 1657 0
c (SATLiteral(1256) -> SATLiteral(1658))
-1256 1658 0
c (SATLiteral(1257) -> SATLiteral(1659))
-1257 1659 0
c (SATLiteral(1257) -> SATLiteral(1660))
-1257 1660 0
c (SATLiteral(1257) -> SATLiteral(1661))
-1257 1661 0
c (SATLiteral(1257) -> SATLiteral(1662))
-1257 1662 0
c (SATLiteral(1257) -> SATLiteral(1663))
-1257 1663 0
c (SATLiteral(1257) -> SATLiteral(1664))
-1257 1664 0
c (SATLiteral(1257) -> SATLiteral(1665))
-1257 1665 0
c (SATLiteral(1257) -> SATLiteral(1666))
-1257 1666 0
c (SATLiteral(1257) -> SATLiteral(1667))
-1257 1667 0
c (SATLiteral(1258) -> SATLiteral(1668))
-1258 1668 0
c (SATLiteral(1258) -> SATLiteral(1669))
-1258 1669 0
c (SATLiteral(1258) -> SATLiteral(1670))
-1258 1670 0
c (SATLiteral(1258) -> SATLiteral(1671))
-1258 1671 0
c (SATLiteral(1258) -> SATLiteral(1672))
-1258 1672 0
c (SATLiteral(1258) -> SATLiteral(1673))
-1258 1673 0
c (SATLiteral(1258) -> SATLiteral(1674))
-1258 1674 0
c (SATLiteral(1258) -> SATLiteral(1675))
-1258 1675 0
c (SATLiteral(1258) -> SATLiteral(1676))
-1258 1676 0
c (SATLiteral(1259) -> SATLiteral(1677))
-1259 1677 0
c (SATLiteral(1259) -> SATLiteral(1678))
-1259 1678 0
c (SATLiteral(1259) -> SATLiteral(1679))
-1259 1679 0
c (SATLiteral(1259) -> SATLiteral(1680))
-1259 1680 0
c (SATLiteral(1259) -> SATLiteral(1681))
-1259 1681 0
c (SATLiteral(1259) -> SATLiteral(1682))
-1259 1682 0
c (SATLiteral(1259) -> SATLiteral(1683))
-1259 1683 0
c (SATLiteral(1259) -> SATLiteral(1684))
-1259 1684 0
c (SATLiteral(1259) -> SATLiteral(1685))
-1259 1685 0
c (SATLiteral(1260) -> SATLiteral(1686))
-1260 1686 0
c (SATLiteral(1260) -> SATLiteral(1687))
-1260 1687 0
c (SATLiteral(1260) -> SATLiteral(1688))
-1260 1688 0
c (SATLiteral(1260) -> SATLiteral(1689))
-1260 1689 0
c (SATLiteral(1260) -> SATLiteral(1690))
-1260 1690 0
c (SATLiteral(1260) -> SATLiteral(1691))
-1260 1691 0
c (SATLiteral(1260) -> SATLiteral(1692))
-1260 1692 0
c (SATLiteral(1260) -> SATLiteral(1693))
-1260 1693 0
c (SATLiteral(1260) -> SATLiteral(1694))
-1260 1694 0
c (SATLiteral(1261) -> SATLiteral(1695))
-1261 1695 0
c (SATLiteral(1261) -> SATLiteral(1696))
-1261 1696 0
c (SATLiteral(1261) -> SATLiteral(1697))
-1261 1697 0
c (SATLiteral(1261) -> SATLiteral(1698))
-1261 1698 0
c (SATLiteral(1261) -> SATLiteral(1699))
-1261 1699 0
c (SATLiteral(1261) -> SATLiteral(1700))
-1261 1700 0
c (SATLiteral(1261) -> SATLiteral(1701))
-1261 1701 0
c (SATLiteral(1261) -> SATLiteral(1702))
-1261 1702 0
c (SATLiteral(1261) -> SATLiteral(1703))
-1261 1703 0
c (SATLiteral(1264) -> SATLiteral(1704))
-1264 1704 0
c (SATLiteral(1264) -> SATLiteral(1705))
-1264 1705 0
c (SATLiteral(1264) -> SATLiteral(1706))
-1264 1706 0
c (SATLiteral(1264) -> SATLiteral(1707))
-1264 1707 0
c (SATLiteral(1264) -> SATLiteral(1708))
-1264 1708 0
c (SATLiteral(1264) -> SATLiteral(1709))
-1264 1709 0
c (SATLiteral(1264) -> SATLiteral(1710))
-1264 1710 0
c (SATLiteral(1264) -> SATLiteral(1711))
-1264 1711 0
c (SATLiteral(1264) -> SATLiteral(1712))
-1264 1712 0
c (SATLiteral(1266) -> SATLiteral(1713))
-1266 1713 0
c (SATLiteral(1266) -> SATLiteral(1714))
-1266 1714 0
c (SATLiteral(1266) -> SATLiteral(1715))
-1266 1715 0
c (SATLiteral(1266) -> SATLiteral(1716))
-1266 1716 0
c (SATLiteral(1266) -> SATLiteral(1717))
-1266 1717 0
c (SATLiteral(1266) -> SATLiteral(1718))
-1266 1718 0
c (SATLiteral(1266) -> SATLiteral(1719))
-1266 1719 0
c (SATLiteral(1266) -> SATLiteral(1720))
-1266 1720 0
c (SATLiteral(1266) -> SATLiteral(1721))
-1266 1721 0
c (SATLiteral(1267) -> SATLiteral(1722))
-1267 1722 0
c (SATLiteral(1267) -> SATLiteral(1723))
-1267 1723 0
c (SATLiteral(1267) -> SATLiteral(1724))
-1267 1724 0
c (SATLiteral(1267) -> SATLiteral(1725))
-1267 1725 0
c (SATLiteral(1267) -> SATLiteral(1726))
-1267 1726 0
c (SATLiteral(1267) -> SATLiteral(1727))
-1267 1727 0
c (SATLiteral(1267) -> SATLiteral(1728))
-1267 1728 0
c (SATLiteral(1267) -> SATLiteral(1729))
-1267 1729 0
c (SATLiteral(1267) -> SATLiteral(1730))
-1267 1730 0
c (SATLiteral(1268) -> SATLiteral(1731))
-1268 1731 0
c (SATLiteral(1268) -> SATLiteral(1732))
-1268 1732 0
c (SATLiteral(1268) -> SATLiteral(1733))
-1268 1733 0
c (SATLiteral(1268) -> SATLiteral(1734))
-1268 1734 0
c (SATLiteral(1268) -> SATLiteral(1735))
-1268 1735 0
c (SATLiteral(1268) -> SATLiteral(1736))
-1268 1736 0
c (SATLiteral(1268) -> SATLiteral(1737))
-1268 1737 0
c (SATLiteral(1268) -> SATLiteral(1738))
-1268 1738 0
c (SATLiteral(1268) -> SATLiteral(1739))
-1268 1739 0
c (SATLiteral(1269) -> SATLiteral(1740))
-1269 1740 0
c (SATLiteral(1269) -> SATLiteral(1741))
-1269 1741 0
c (SATLiteral(1269) -> SATLiteral(1742))
-1269 1742 0
c (SATLiteral(1269) -> SATLiteral(1743))
-1269 1743 0
c (SATLiteral(1269) -> SATLiteral(1744))
-1269 1744 0
c (SATLiteral(1269) -> SATLiteral(1745))
-1269 1745 0
c (SATLiteral(1269) -> SATLiteral(1746))
-1269 1746 0
c (SATLiteral(1269) -> SATLiteral(1747))
-1269 1747 0
c (SATLiteral(1269) -> SATLiteral(1748))
-1269 1748 0
c (SATLiteral(1270) -> SATLiteral(1749))
-1270 1749 0
c (SATLiteral(1270) -> SATLiteral(1750))
-1270 1750 0
c (SATLiteral(1270) -> SATLiteral(1751))
-1270 1751 0
c (SATLiteral(1270) -> SATLiteral(1752))
-1270 1752 0
c (SATLiteral(1270) -> SATLiteral(1753))
-1270 1753 0
c (SATLiteral(1270) -> SATLiteral(1754))
-1270 1754 0
c (SATLiteral(1270) -> SATLiteral(1755))
-1270 1755 0
c (SATLiteral(1270) -> SATLiteral(1756))
-1270 1756 0
c (SATLiteral(1270) -> SATLiteral(1757))
-1270 1757 0
c (SATLiteral(1271) -> SATLiteral(1758))
-1271 1758 0
c (SATLiteral(1271) -> SATLiteral(1759))
-1271 1759 0
c (SATLiteral(1271) -> SATLiteral(1760))
-1271 1760 0
c (SATLiteral(1271) -> SATLiteral(1761))
-1271 1761 0
c (SATLiteral(1271) -> SATLiteral(1762))
-1271 1762 0
c (SATLiteral(1271) -> SATLiteral(1763))
-1271 1763 0
c (SATLiteral(1271) -> SATLiteral(1764))
-1271 1764 0
c (SATLiteral(1271) -> SATLiteral(1765))
-1271 1765 0
c (SATLiteral(1271) -> SATLiteral(1766))
-1271 1766 0
c (( - aux467 + shift(x_00001_00002, -1) + shift(x_00002_00001, -1))<=0)
137 -1767 0
138 -1768 0
140 -1770 0
142 -1772 0
144 -1774 0
146 -1776 0
148 -1778 0
150 -1780 0
17 -1767 0
17 137 -1768 0
17 138 -1770 0
17 140 -1772 0
17 142 -1774 0
17 144 -1776 0
17 146 -1778 0
17 148 -1780 0
17 150 -1782 0
18 -1768 0
18 137 -1770 0
18 138 -1772 0
18 140 -1774 0
18 142 -1776 0
18 144 -1778 0
18 146 -1780 0
18 148 -1782 0
18 150 -1784 0
20 -1770 0
20 137 -1772 0
20 138 -1774 0
20 140 -1776 0
20 142 -1778 0
20 144 -1780 0
20 146 -1782 0
20 148 -1784 0
20 150 -1786 0
22 -1772 0
22 137 -1774 0
22 138 -1776 0
22 140 -1778 0
22 142 -1780 0
22 144 -1782 0
22 146 -1784 0
22 148 -1786 0
22 150 -1788 0
24 -1774 0
24 137 -1776 0
24 138 -1778 0
24 140 -1780 0
24 142 -1782 0
24 144 -1784 0
24 146 -1786 0
24 148 -1788 0
24 150 -1790 0
26 -1776 0
26 137 -1778 0
26 138 -1780 0
26 140 -1782 0
26 142 -1784 0
26 144 -1786 0
26 146 -1788 0
26 148 -1790 0
26 150 -1792 0
28 -1778 0
28 137 -1780 0
28 138 -1782 0
28 140 -1784 0
28 142 -1786 0
28 144 -1788 0
28 146 -1790 0
28 148 -1792 0
28 150 -1794 0
30 -1780 0
30 137 -1782 0
30 138 -1784 0
30 140 -1786 0
30 142 -1788 0
30 144 -1790 0
30 146 -1792 0
30 148 -1794 0
30 150 -1796 0
c (0<=( - aux467 + shift(x_00001_00002, -1) + shift(x_00002_00001, -1)))
-150 1796 0
-148 1794 0
-146 1792 0
-144 1790 0
-142 1788 0
-140 1786 0
-138 1784 0
-137 1782 0
-30 1796 0
-30 -150 1794 0
-30 -148 1792 0
-30 -146 1790 0
-30 -144 1788 0
-30 -142 1786 0
-30 -140 1784 0
-30 -138 1782 0
-30 -137 1780 0
-28 1794 0
-28 -150 1792 0
-28 -148 1790 0
-28 -146 1788 0
-28 -144 1786 0
-28 -142 1784 0
-28 -140 1782 0
-28 -138 1780 0
-28 -137 1778 0
-26 1792 0
-26 -150 1790 0
-26 -148 1788 0
-26 -146 1786 0
-26 -144 1784 0
-26 -142 1782 0
-26 -140 1780 0
-26 -138 1778 0
-26 -137 1776 0
-24 1790 0
-24 -150 1788 0
-24 -148 1786 0
-24 -146 1784 0
-24 -144 1782 0
-24 -142 1780 0
-24 -140 1778 0
-24 -138 1776 0
-24 -137 1774 0
-22 1788 0
-22 -150 1786 0
-22 -148 1784 0
-22 -146 1782 0
-22 -144 1780 0
-22 -142 1778 0
-22 -140 1776 0
-22 -138 1774 0
-22 -137 1772 0
-20 1786 0
-20 -150 1784 0
-20 -148 1782 0
-20 -146 1780 0
-20 -144 1778 0
-20 -142 1776 0
-20 -140 1774 0
-20 -138 1772 0
-20 -137 1770 0
-18 1784 0
-18 -150 1782 0
-18 -148 1780 0
-18 -146 1778 0
-18 -144 1776 0
-18 -142 1774 0
-18 -140 1772 0
-18 -138 1770 0
-18 -137 1768 0
-17 1782 0
-17 -150 1780 0
-17 -148 1778 0
-17 -146 1776 0
-17 -144 1774 0
-17 -142 1772 0
-17 -140 1770 0
-17 -138 1768 0
-17 -137 1767 0
c (( - aux468 + shift(x_00001_00005, -1) + shift(x_00001_00008, -1))<=0)
107 -1798 0
108 -1799 0
110 -1801 0
112 -1803 0
114 -1805 0
116 -1807 0
118 -1809 0
120 -1811 0
62 -1798 0
62 107 -1799 0
62 108 -1801 0
62 110 -1803 0
62 112 -1805 0
62 114 -1807 0
62 116 -1809 0
62 118 -1811 0
62 120 -1813 0
63 -1799 0
63 107 -1801 0
63 108 -1803 0
63 110 -1805 0
63 112 -1807 0
63 114 -1809 0
63 116 -1811 0
63 118 -1813 0
63 120 -1815 0
65 -1801 0
65 107 -1803 0
65 108 -1805 0
65 110 -1807 0
65 112 -1809 0
65 114 -1811 0
65 116 -1813 0
65 118 -1815 0
65 120 -1817 0
67 -1803 0
67 107 -1805 0
67 108 -1807 0
67 110 -1809 0
67 112 -1811 0
67 114 -1813 0
67 116 -1815 0
67 118 -1817 0
67 120 -1819 0
69 -1805 0
69 107 -1807 0
69 108 -1809 0
69 110 -1811 0
69 112 -1813 0
69 114 -1815 0
69 116 -1817 0
69 118 -1819 0
69 120 -1821 0
71 -1807 0
71 107 -1809 0
71 108 -1811 0
71 110 -1813 0
71 112 -1815 0
71 114 -1817 0
71 116 -1819 0
71 118 -1821 0
71 120 -1823 0
73 -1809 0
73 107 -1811 0
73 108 -1813 0
73 110 -1815 0
73 112 -1817 0
73 114 -1819 0
73 116 -1821 0
73 118 -1823 0
73 120 -1825 0
75 -1811 0
75 107 -1813 0
75 108 -1815 0
75 110 -1817 0
75 112 -1819 0
75 114 -1821 0
75 116 -1823 0
75 118 -1825 0
75 120 -1827 0
c (0<=( - aux468 + shift(x_00001_00005, -1) + shift(x_00001_00008, -1)))
-120 1827 0
-118 1825 0
-116 1823 0
-114 1821 0
-112 1819 0
-110 1817 0
-108 1815 0
-107 1813 0
-75 1827 0
-75 -120 1825 0
-75 -118 1823 0
-75 -116 1821 0
-75 -114 1819 0
-75 -112 1817 0
-75 -110 1815 0
-75 -108 1813 0
-75 -107 1811 0
-73 1825 0
-73 -120 1823 0
-73 -118 1821 0
-73 -116 1819 0
-73 -114 1817 0
-73 -112 1815 0
-73 -110 1813 0
-73 -108 1811 0
-73 -107 1809 0
-71 1823 0
-71 -120 1821 0
-71 -118 1819 0
-71 -116 1817 0
-71 -114 1815 0
-71 -112 1813 0
-71 -110 1811 0
-71 -108 1809 0
-71 -107 1807 0
-69 1821 0
-69 -120 1819 0
-69 -118 1817 0
-69 -116 1815 0
-69 -114 1813 0
-69 -112 1811 0
-69 -110 1809 0
-69 -108 1807 0
-69 -107 1805 0
-67 1819 0
-67 -120 1817 0
-67 -118 1815 0
-67 -116 1813 0
-67 -114 1811 0
-67 -112 1809 0
-67 -110 1807 0
-67 -108 1805 0
-67 -107 1803 0
-65 1817 0
-65 -120 1815 0
-65 -118 1813 0
-65 -116 1811 0
-65 -114 1809 0
-65 -112 1807 0
-65 -110 1805 0
-65 -108 1803 0
-65 -107 1801 0
-63 1815 0
-63 -120 1813 0
-63 -118 1811 0
-63 -116 1809 0
-63 -114 1807 0
-63 -112 1805 0
-63 -110 1803 0
-63 -108 1801 0
-63 -107 1799 0
-62 1813 0
-62 -120 1811 0
-62 -118 1809 0
-62 -116 1807 0
-62 -114 1805 0
-62 -112 1803 0
-62 -110 1801 0
-62 -108 1799 0
-62 -107 1798 0
c (( - aux469 + shift(x_00008_00008, -1) + shift(x_00009_00009, -1))<=0)
1202 -1829 0
1203 -1830 0
1205 -1832 0
1207 -1834 0
1209 -1836 0
1211 -1838 0
1213 -1840 0
1215 -1842 0
1052 -1829 0
1052 1202 -1830 0
1052 1203 -1832 0
1052 1205 -1834 0
1052 1207 -1836 0
1052 1209 -1838 0
1052 1211 -1840 0
1052 1213 -1842 0
1052 1215 -1844 0
1053 -1830 0
1053 1202 -1832 0
1053 1203 -1834 0
1053 1205 -1836 0
1053 1207 -1838 0
1053 1209 -1840 0
1053 1211 -1842 0
1053 1213 -1844 0
1053 1215 -1846 0
1055 -1832 0
1055 1202 -1834 0
1055 1203 -1836 0
1055 1205 -1838 0
1055 1207 -1840 0
1055 1209 -1842 0
1055 1211 -1844 0
1055 1213 -1846 0
1055 1215 -1848 0
1057 -1834 0
1057 1202 -1836 0
1057 1203 -1838 0
1057 1205 -1840 0
1057 1207 -1842 0
1057 1209 -1844 0
1057 1211 -1846 0
1057 1213 -1848 0
1057 1215 -1850 0
1059 -1836 0
1059 1202 -1838 0
1059 1203 -1840 0
1059 1205 -1842 0
1059 1207 -1844 0
1059 1209 -1846 0
1059 1211 -1848 0
1059 1213 -1850 0
1059 1215 -1852 0
1061 -1838 0
1061 1202 -1840 0
1061 1203 -1842 0
1061 1205 -1844 0
1061 1207 -1846 0
1061 1209 -1848 0
1061 1211 -1850 0
1061 1213 -1852 0
1061 1215 -1854 0
1063 -1840 0
1063 1202 -1842 0
1063 1203 -1844 0
1063 1205 -1846 0
1063 1207 -1848 0
1063 1209 -1850 0
1063 1211 -1852 0
1063 1213 -1854 0
1063 1215 -1856 0
1065 -1842 0
1065 1202 -1844 0
1065 1203 -1846 0
1065 1205 -1848 0
1065 1207 -1850 0
1065 1209 -1852 0
1065 1211 -1854 0
1065 1213 -1856 0
1065 1215 -1858 0
c (0<=( - aux469 + shift(x_00008_00008, -1) + shift(x_00009_00009, -1)))
-1215 1858 0
-1213 1856 0
-1211 1854 0
-1209 1852 0
-1207 1850 0
-1205 1848 0
-1203 1846 0
-1202 1844 0
-1065 1858 0
-1065 -1215 1856 0
-1065 -1213 1854 0
-1065 -1211 1852 0
-1065 -1209 1850 0
-1065 -1207 1848 0
-1065 -1205 1846 0
-1065 -1203 1844 0
-1065 -1202 1842 0
-1063 1856 0
-1063 -1215 1854 0
-1063 -1213 1852 0
-1063 -1211 1850 0
-1063 -1209 1848 0
-1063 -1207 1846 0
-1063 -1205 1844 0
-1063 -1203 1842 0
-1063 -1202 1840 0
-1061 1854 0
-1061 -1215 1852 0
-1061 -1213 1850 0
-1061 -1211 1848 0
-1061 -1209 1846 0
-1061 -1207 1844 0
-1061 -1205 1842 0
-1061 -1203 1840 0
-1061 -1202 1838 0
-1059 1852 0
-1059 -1215 1850 0
-1059 -1213 1848 0
-1059 -1211 1846 0
-1059 -1209 1844 0
-1059 -1207 1842 0
-1059 -1205 1840 0
-1059 -1203 1838 0
-1059 -1202 1836 0
-1057 1850 0
-1057 -1215 1848 0
-1057 -1213 1846 0
-1057 -1211 1844 0
-1057 -1209 1842 0
-1057 -1207 1840 0
-1057 -1205 1838 0
-1057 -1203 1836 0
-1057 -1202 1834 0
-1055 1848 0
-1055 -1215 1846 0
-1055 -1213 1844 0
-1055 -1211 1842 0
-1055 -1209 1840 0
-1055 -1207 1838 0
-1055 -1205 1836 0
-1055 -1203 1834 0
-1055 -1202 1832 0
-1053 1846 0
-1053 -1215 1844 0
-1053 -1213 1842 0
-1053 -1211 1840 0
-1053 -1209 1838 0
-1053 -1207 1836 0
-1053 -1205 1834 0
-1053 -1203 1832 0
-1053 -1202 1830 0
-1052 1844 0
-1052 -1215 1842 0
-1052 -1213 1840 0
-1052 -1211 1838 0
-1052 -1209 1836 0
-1052 -1207 1834 0
-1052 -1205 1832 0
-1052 -1203 1830 0
-1052 -1202 1829 0
c (( - aux470 + shift(x_00009_00002, -1) + shift(x_00009_00005, -1))<=0)
1142 -1860 0
1143 -1861 0
1145 -1863 0
1147 -1865 0
1149 -1867 0
1151 -1869 0
1153 -1871 0
1155 -1873 0
1097 -1860 0
1097 1142 -1861 0
1097 1143 -1863 0
1097 1145 -1865 0
1097 1147 -1867 0
1097 1149 -1869 0
1097 1151 -1871 0
1097 1153 -1873 0
1097 1155 -1875 0
1098 -1861 0
1098 1142 -1863 0
1098 1143 -1865 0
1098 1145 -1867 0
1098 1147 -1869 0
1098 1149 -1871 0
1098 1151 -1873 0
1098 1153 -1875 0
1098 1155 -1877 0
1100 -1863 0
1100 1142 -1865 0
1100 1143 -1867 0
1100 1145 -1869 0
1100 1147 -1871 0
1100 1149 -1873 0
1100 1151 -1875 0
1100 1153 -1877 0
1100 1155 -1879 0
1102 -1865 0
1102 1142 -1867 0
1102 1143 -1869 0
1102 1145 -1871 0
1102 1147 -1873 0
1102 1149 -1875 0
1102 1151 -1877 0
1102 1153 -1879 0
1102 1155 -1881 0
1104 -1867 0
1104 1142 -1869 0
1104 1143 -1871 0
1104 1145 -1873 0
1104 1147 -1875 0
1104 1149 -1877 0
1104 1151 -1879 0
1104 1153 -1881 0
1104 1155 -1883 0
1106 -1869 0
1106 1142 -1871 0
1106 1143 -1873 0
1106 1145 -1875 0
1106 1147 -1877 0
1106 1149 -1879 0
1106 1151 -1881 0
1106 1153 -1883 0
1106 1155 -1885 0
1108 -1871 0
1108 1142 -1873 0
1108 1143 -1875 0
1108 1145 -1877 0
1108 1147 -1879 0
1108 1149 -1881 0
1108 1151 -1883 0
1108 1153 -1885 0
1108 1155 -1887 0
1110 -1873 0
1110 1142 -1875 0
1110 1143 -1877 0
1110 1145 -1879 0
1110 1147 -1881 0
1110 1149 -1883 0
1110 1151 -1885 0
1110 1153 -1887 0
1110 1155 -1889 0
c (0<=( - aux470 + shift(x_00009_00002, -1) + shift(x_00009_00005, -1)))
-1155 1889 0
-1153 1887 0
-1151 1885 0
-1149 1883 0
-1147 1881 0
-1145 1879 0
-1143 1877 0
-1142 1875 0
-1110 1889 0
-1110 -1155 1887 0
-1110 -1153 1885 0
-1110 -1151 1883 0
-1110 -1149 1881 0
-1110 -1147 1879 0
-1110 -1145 1877 0
-1110 -1143 1875 0
-1110 -1142 1873 0
-1108 1887 0
-1108 -1155 1885 0
-1108 -1153 1883 0
-1108 -1151 1881 0
-1108 -1149 1879 0
-1108 -1147 1877 0
-1108 -1145 1875 0
-1108 -1143 1873 0
-1108 -1142 1871 0
-1106 1885 0
-1106 -1155 1883 0
-1106 -1153 1881 0
-1106 -1151 1879 0
-1106 -1149 1877 0
-1106 -1147 1875 0
-1106 -1145 1873 0
-1106 -1143 1871 0
-1106 -1142 1869 0
-1104 1883 0
-1104 -1155 1881 0
-1104 -1153 1879 0
-1104 -1151 1877 0
-1104 -1149 1875 0
-1104 -1147 1873 0
-1104 -1145 1871 0
-1104 -1143 1869 0
-1104 -1142 1867 0
-1102 1881 0
-1102 -1155 1879 0
-1102 -1153 1877 0
-1102 -1151 1875 0
-1102 -1149 1873 0
-1102 -1147 1871 0
-1102 -1145 1869 0
-1102 -1143 1867 0
-1102 -1142 1865 0
-1100 1879 0
-1100 -1155 1877 0
-1100 -1153 1875 0
-1100 -1151 1873 0
-1100 -1149 1871 0
-1100 -1147 1869 0
-1100 -1145 1867 0
-1100 -1143 1865 0
-1100 -1142 1863 0
-1098 1877 0
-1098 -1155 1875 0
-1098 -1153 1873 0
-1098 -1151 1871 0
-1098 -1149 1869 0
-1098 -1147 1867 0
-1098 -1145 1865 0
-1098 -1143 1863 0
-1098 -1142 1861 0
-1097 1875 0
-1097 -1155 1873 0
-1097 -1153 1871 0
-1097 -1151 1869 0
-1097 -1149 1867 0
-1097 -1147 1865 0
-1097 -1145 1863 0
-1097 -1143 1861 0
-1097 -1142 1860 0
c ((SATLiteral(2) - aux1929 + SATLiteral(152))<=0)
-152 -7723 0
-2 -7723 0
-2 -152 -7724 0
c (0<=(SATLiteral(2) - aux1929 + SATLiteral(152)))
152 7724 0
2 7724 0
2 152 7723 0
c ((SATLiteral(4) - aux1930 + SATLiteral(154))<=0)
-154 -7726 0
-4 -7726 0
-4 -154 -7727 0
c (0<=(SATLiteral(4) - aux1930 + SATLiteral(154)))
154 7727 0
4 7727 0
4 154 7726 0
c ((SATLiteral(6) - aux1931 + SATLiteral(156))<=0)
-156 -7729 0
-6 -7729 0
-6 -156 -7730 0
c (0<=(SATLiteral(6) - aux1931 + SATLiteral(156)))
156 7730 0
6 7730 0
6 156 7729 0
c ((SATLiteral(8) - aux1932 + SATLiteral(158))<=0)
-158 -7732 0
-8 -7732 0
-8 -158 -7733 0
c (0<=(SATLiteral(8) - aux1932 + SATLiteral(158)))
158 7733 0
8 7733 0
8 158 7732 0
c ((SATLiteral(10) - aux1933 + SATLiteral(160))<=0)
-160 -7735 0
-10 -7735 0
-10 -160 -7736 0
c (0<=(SATLiteral(10) - aux1933 + SATLiteral(160)))
160 7736 0
10 7736 0
10 160 7735 0
c ((SATLiteral(12) - aux1934 + SATLiteral(162))<=0)
-162 -7738 0
-12 -7738 0
-12 -162 -7739 0
c (0<=(SATLiteral(12) - aux1934 + SATLiteral(162)))
162 7739 0
12 7739 0
12 162 7738 0
c ((SATLiteral(14) - aux1935 + SATLiteral(164))<=0)
-164 -7741 0
-14 -7741 0
-14 -164 -7742 0
c (0<=(SATLiteral(14) - aux1935 + SATLiteral(164)))
164 7742 0
14 7742 0
14 164 7741 0
c ((SATLiteral(16) - aux1936 + SATLiteral(166))<=0)
-166 -7744 0
-16 -7744 0
-16 -166 -7745 0
c (0<=(SATLiteral(16) - aux1936 + SATLiteral(166)))
166 7745 0
16 7745 0
16 166 7744 0
c ((SATLiteral(-15) - aux1937 + SATLiteral(-165))<=0)
165 -7747 0
15 -7747 0
15 165 -7748 0
c (0<=(SATLiteral(-15) - aux1937 + SATLiteral(-165)))
-165 7748 0
-15 7748 0
-15 -165 7747 0
c ((SATLiteral(62) + SATLiteral(107) - aux1938)<=0)
-107 -7750 0
-62 -7750 0
-62 -107 -7751 0
c (0<=(SATLiteral(62) + SATLiteral(107) - aux1938))
107 7751 0
62 7751 0
62 107 7750 0
c ((SATLiteral(64) + SATLiteral(109) - aux1939)<=0)
-109 -7753 0
-64 -7753 0
-64 -109 -7754 0
c (0<=(SATLiteral(64) + SATLiteral(109) - aux1939))
109 7754 0
64 7754 0
64 109 7753 0
c ((SATLiteral(66) + SATLiteral(111) - aux1940)<=0)
-111 -7756 0
-66 -7756 0
-66 -111 -7757 0
c (0<=(SATLiteral(66) + SATLiteral(111) - aux1940))
111 7757 0
66 7757 0
66 111 7756 0
c ((SATLiteral(68) + SATLiteral(113) - aux1941)<=0)
-113 -7759 0
-68 -7759 0
-68 -113 -7760 0
c (0<=(SATLiteral(68) + SATLiteral(113) - aux1941))
113 7760 0
68 7760 0
68 113 7759 0
c ((SATLiteral(70) + SATLiteral(115) - aux1942)<=0)
-115 -7762 0
-70 -7762 0
-70 -115 -7763 0
c (0<=(SATLiteral(70) + SATLiteral(115) - aux1942))
115 7763 0
70 7763 0
70 115 7762 0
c ((SATLiteral(72) + SATLiteral(117) - aux1943)<=0)
-117 -7765 0
-72 -7765 0
-72 -117 -7766 0
c (0<=(SATLiteral(72) + SATLiteral(117) - aux1943))
117 7766 0
72 7766 0
72 117 7765 0
c ((SATLiteral(74) + SATLiteral(119) - aux1944)<=0)
-119 -7768 0
-74 -7768 0
-74 -119 -7769 0
c (0<=(SATLiteral(74) + SATLiteral(119) - aux1944))
119 7769 0
74 7769 0
74 119 7768 0
c ((SATLiteral(76) + SATLiteral(121) - aux1945)<=0)
-121 -7771 0
-76 -7771 0
-76 -121 -7772 0
c (0<=(SATLiteral(76) + SATLiteral(121) - aux1945))
121 7772 0
76 7772 0
76 121 7771 0
c ((SATLiteral(-75) + SATLiteral(-120) - aux1946)<=0)
120 -7774 0
75 -7774 0
75 120 -7775 0
c (0<=(SATLiteral(-75) + SATLiteral(-120) - aux1946))
-120 7775 0
-75 7775 0
-75 -120 7774 0
c ((SATLiteral(1052) - aux1947 + SATLiteral(1202))<=0)
-1202 -7777 0
-1052 -7777 0
-1052 -1202 -7778 0
c (0<=(SATLiteral(1052) - aux1947 + SATLiteral(1202)))
1202 7778 0
1052 7778 0
1052 1202 7777 0
c ((SATLiteral(1054) - aux1948 + SATLiteral(1204))<=0)
-1204 -7780 0
-1054 -7780 0
-1054 -1204 -7781 0
c (0<=(SATLiteral(1054) - aux1948 + SATLiteral(1204)))
1204 7781 0
1054 7781 0
1054 1204 7780 0
c ((SATLiteral(1056) - aux1949 + SATLiteral(1206))<=0)
-1206 -7783 0
-1056 -7783 0
-1056 -1206 -7784 0
c (0<=(SATLiteral(1056) - aux1949 + SATLiteral(1206)))
1206 7784 0
1056 7784 0
1056 1206 7783 0
c ((SATLiteral(1058) - aux1950 + SATLiteral(1208))<=0)
-1208 -7786 0
-1058 -7786 0
-1058 -1208 -7787 0
c (0<=(SATLiteral(1058) - aux1950 + SATLiteral(1208)))
1208 7787 0
1058 7787 0
1058 1208 7786 0
c ((SATLiteral(1060) - aux1951 + SATLiteral(1210))<=0)
-1210 -7789 0
-1060 -7789 0
-1060 -1210 -7790 0
c (0<=(SATLiteral(1060) - aux1951 + SATLiteral(1210)))
1210 7790 0
1060 7790 0
1060 1210 7789 0
c ((SATLiteral(1062) - aux1952 + SATLiteral(1212))<=0)
-1212 -7792 0
-1062 -7792 0
-1062 -1212 -7793 0
c (0<=(SATLiteral(1062) - aux1952 + SATLiteral(1212)))
1212 7793 0
1062 7793 0
1062 1212 7792 0
c ((SATLiteral(1064) - aux1953 + SATLiteral(1214))<=0)
-1214 -7795 0
-1064 -7795 0
-1064 -1214 -7796 0
c (0<=(SATLiteral(1064) - aux1953 + SATLiteral(1214)))
1214 7796 0
1064 7796 0
1064 1214 7795 0
c ((SATLiteral(1066) - aux1954 + SATLiteral(1216))<=0)
-1216 -7798 0
-1066 -7798 0
-1066 -1216 -7799 0
c (0<=(SATLiteral(1066) - aux1954 + SATLiteral(1216)))
1216 7799 0
1066 7799 0
1066 1216 7798 0
c ((SATLiteral(-1065) - aux1955 + SATLiteral(-1215))<=0)
1215 -7801 0
1065 -7801 0
1065 1215 -7802 0
c (0<=(SATLiteral(-1065) - aux1955 + SATLiteral(-1215)))
-1215 7802 0
-1065 7802 0
-1065 -1215 7801 0
c (( - aux1956 + SATLiteral(1097) + SATLiteral(1142))<=0)
-1142 -7804 0
-1097 -7804 0
-1097 -1142 -7805 0
c (0<=( - aux1956 + SATLiteral(1097) + SATLiteral(1142)))
1142 7805 0
1097 7805 0
1097 1142 7804 0
c (( - aux1957 + SATLiteral(1099) + SATLiteral(1144))<=0)
-1144 -7807 0
-1099 -7807 0
-1099 -1144 -7808 0
c (0<=( - aux1957 + SATLiteral(1099) + SATLiteral(1144)))
1144 7808 0
1099 7808 0
1099 1144 7807 0
c (( - aux1958 + SATLiteral(1101) + SATLiteral(1146))<=0)
-1146 -7810 0
-1101 -7810 0
-1101 -1146 -7811 0
c (0<=( - aux1958 + SATLiteral(1101) + SATLiteral(1146)))
1146 7811 0
1101 7811 0
1101 1146 7810 0
c (( - aux1959 + SATLiteral(1103) + SATLiteral(1148))<=0)
-1148 -7813 0
-1103 -7813 0
-1103 -1148 -7814 0
c (0<=( - aux1959 + SATLiteral(1103) + SATLiteral(1148)))
1148 7814 0
1103 7814 0
1103 1148 7813 0
c (( - aux1960 + SATLiteral(1105) + SATLiteral(1150))<=0)
-1150 -7816 0
-1105 -7816 0
-1105 -1150 -7817 0
c (0<=( - aux1960 + SATLiteral(1105) + SATLiteral(1150)))
1150 7817 0
1105 7817 0
1105 1150 7816 0
c (( - aux1961 + SATLiteral(1107) + SATLiteral(1152))<=0)
-1152 -7819 0
-1107 -7819 0
-1107 -1152 -7820 0
c (0<=( - aux1961 + SATLiteral(1107) + SATLiteral(1152)))
1152 7820 0
1107 7820 0
1107 1152 7819 0
c (( - aux1962 + SATLiteral(1109) + SATLiteral(1154))<=0)
-1154 -7822 0
-1109 -7822 0
-1109 -1154 -7823 0
c (0<=( - aux1962 + SATLiteral(1109) + SATLiteral(1154)))
1154 7823 0
1109 7823 0
1109 1154 7822 0
c (( - aux1963 + SATLiteral(1111) + SATLiteral(1156))<=0)
-1156 -7825 0
-1111 -7825 0
-1111 -1156 -7826 0
c (0<=( - aux1963 + SATLiteral(1111) + SATLiteral(1156)))
1156 7826 0
1111 7826 0
1111 1156 7825 0
c (( - aux1964 + SATLiteral(-1110) + SATLiteral(-1155))<=0)
1155 -7828 0
1110 -7828 0
1110 1155 -7829 0
c (0<=( - aux1964 + SATLiteral(-1110) + SATLiteral(-1155)))
-1155 7829 0
-1110 7829 0
-1110 -1155 7828 0
c ((SATLiteral(272) - aux471 + SATLiteral(542))<=0)
-542 -1891 0
-272 -1891 0
-272 -542 -1892 0
c (0<=(SATLiteral(272) - aux471 + SATLiteral(542)))
542 1892 0
272 1892 0
272 542 1891 0
c ((SATLiteral(947) - aux472 + SATLiteral(812))<=0)
-812 -1894 0
-947 -1894 0
-947 -812 -1895 0
c (0<=(SATLiteral(947) - aux472 + SATLiteral(812)))
812 1895 0
947 1895 0
947 812 1894 0
c (( - aux473 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -1897 0
-677 -1897 0
-677 -137 -1898 0
c (0<=( - aux473 + SATLiteral(677) + SATLiteral(137)))
137 1898 0
677 1898 0
677 137 1897 0
c (( - aux474 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -1900 0
-407 -1900 0
-407 -1082 -1901 0
c (0<=( - aux474 + SATLiteral(407) + SATLiteral(1082)))
1082 1901 0
407 1901 0
407 1082 1900 0
c ((aux474 - aux475 + SATLiteral(2))<=0)
1900 -1903 0
1901 -1904 0
-2 -1903 0
-2 1900 -1904 0
-2 1901 -1906 0
c (0<=(aux474 - aux475 + SATLiteral(2)))
-1901 1906 0
-1900 1904 0
2 1906 0
2 -1901 1904 0
2 -1900 1903 0
c ((aux471 + aux473 - aux476)<=0)
1897 -1908 0
1898 -1909 0
1891 -1908 0
1891 1897 -1909 0
1891 1898 -1911 0
1892 -1909 0
1892 1897 -1911 0
1892 1898 -1913 0
c (0<=(aux471 + aux473 - aux476))
-1898 1913 0
-1897 1911 0
-1892 1913 0
-1892 -1898 1911 0
-1892 -1897 1909 0
-1891 1911 0
-1891 -1898 1909 0
-1891 -1897 1908 0
c ((SATLiteral(274) - aux477 + SATLiteral(544))<=0)
-544 -1915 0
-274 -1915 0
-274 -544 -1916 0
c (0<=(SATLiteral(274) - aux477 + SATLiteral(544)))
544 1916 0
274 1916 0
274 544 1915 0
c ((SATLiteral(949) - aux478 + SATLiteral(814))<=0)
-814 -1918 0
-949 -1918 0
-949 -814 -1919 0
c (0<=(SATLiteral(949) - aux478 + SATLiteral(814)))
814 1919 0
949 1919 0
949 814 1918 0
c (( - aux479 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -1921 0
-679 -1921 0
-679 -139 -1922 0
c (0<=( - aux479 + SATLiteral(679) + SATLiteral(139)))
139 1922 0
679 1922 0
679 139 1921 0
c (( - aux480 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -1924 0
-409 -1924 0
-409 -1084 -1925 0
c (0<=( - aux480 + SATLiteral(409) + SATLiteral(1084)))
1084 1925 0
409 1925 0
409 1084 1924 0
c ((aux480 - aux481 + SATLiteral(4))<=0)
1924 -1927 0
1925 -1928 0
-4 -1927 0
-4 1924 -1928 0
-4 1925 -1930 0
c (0<=(aux480 - aux481 + SATLiteral(4)))
-1925 1930 0
-1924 1928 0
4 1930 0
4 -1925 1928 0
4 -1924 1927 0
c ((aux477 + aux479 - aux482)<=0)
1921 -1932 0
1922 -1933 0
1915 -1932 0
1915 1921 -1933 0
1915 1922 -1935 0
1916 -1933 0
1916 1921 -1935 0
1916 1922 -1937 0
c (0<=(aux477 + aux479 - aux482))
-1922 1937 0
-1921 1935 0
-1916 1937 0
-1916 -1922 1935 0
-1916 -1921 1933 0
-1915 1935 0
-1915 -1922 1933 0
-1915 -1921 1932 0
c ((SATLiteral(276) - aux483 + SATLiteral(546))<=0)
-546 -1939 0
-276 -1939 0
-276 -546 -1940 0
c (0<=(SATLiteral(276) - aux483 + SATLiteral(546)))
546 1940 0
276 1940 0
276 546 1939 0
c ((SATLiteral(951) - aux484 + SATLiteral(816))<=0)
-816 -1942 0
-951 -1942 0
-951 -816 -1943 0
c (0<=(SATLiteral(951) - aux484 + SATLiteral(816)))
816 1943 0
951 1943 0
951 816 1942 0
c (( - aux485 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -1945 0
-681 -1945 0
-681 -141 -1946 0
c (0<=( - aux485 + SATLiteral(681) + SATLiteral(141)))
141 1946 0
681 1946 0
681 141 1945 0
c (( - aux486 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -1948 0
-411 -1948 0
-411 -1086 -1949 0
c (0<=( - aux486 + SATLiteral(411) + SATLiteral(1086)))
1086 1949 0
411 1949 0
411 1086 1948 0
c ((aux486 - aux487 + SATLiteral(6))<=0)
1948 -1951 0
1949 -1952 0
-6 -1951 0
-6 1948 -1952 0
-6 1949 -1954 0
c (0<=(aux486 - aux487 + SATLiteral(6)))
-1949 1954 0
-1948 1952 0
6 1954 0
6 -1949 1952 0
6 -1948 1951 0
c ((aux483 + aux485 - aux488)<=0)
1945 -1956 0
1946 -1957 0
1939 -1956 0
1939 1945 -1957 0
1939 1946 -1959 0
1940 -1957 0
1940 1945 -1959 0
1940 1946 -1961 0
c (0<=(aux483 + aux485 - aux488))
-1946 1961 0
-1945 1959 0
-1940 1961 0
-1940 -1946 1959 0
-1940 -1945 1957 0
-1939 1959 0
-1939 -1946 1957 0
-1939 -1945 1956 0
c ((SATLiteral(278) - aux489 + SATLiteral(548))<=0)
-548 -1963 0
-278 -1963 0
-278 -548 -1964 0
c (0<=(SATLiteral(278) - aux489 + SATLiteral(548)))
548 1964 0
278 1964 0
278 548 1963 0
c ((SATLiteral(953) - aux490 + SATLiteral(818))<=0)
-818 -1966 0
-953 -1966 0
-953 -818 -1967 0
c (0<=(SATLiteral(953) - aux490 + SATLiteral(818)))
818 1967 0
953 1967 0
953 818 1966 0
c (( - aux491 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -1969 0
-683 -1969 0
-683 -143 -1970 0
c (0<=( - aux491 + SATLiteral(683) + SATLiteral(143)))
143 1970 0
683 1970 0
683 143 1969 0
c (( - aux492 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -1972 0
-413 -1972 0
-413 -1088 -1973 0
c (0<=( - aux492 + SATLiteral(413) + SATLiteral(1088)))
1088 1973 0
413 1973 0
413 1088 1972 0
c ((aux492 - aux493 + SATLiteral(8))<=0)
1972 -1975 0
1973 -1976 0
-8 -1975 0
-8 1972 -1976 0
-8 1973 -1978 0
c (0<=(aux492 - aux493 + SATLiteral(8)))
-1973 1978 0
-1972 1976 0
8 1978 0
8 -1973 1976 0
8 -1972 1975 0
c ((aux489 + aux491 - aux494)<=0)
1969 -1980 0
1970 -1981 0
1963 -1980 0
1963 1969 -1981 0
1963 1970 -1983 0
1964 -1981 0
1964 1969 -1983 0
1964 1970 -1985 0
c (0<=(aux489 + aux491 - aux494))
-1970 1985 0
-1969 1983 0
-1964 1985 0
-1964 -1970 1983 0
-1964 -1969 1981 0
-1963 1983 0
-1963 -1970 1981 0
-1963 -1969 1980 0
c ((SATLiteral(280) - aux495 + SATLiteral(550))<=0)
-550 -1987 0
-280 -1987 0
-280 -550 -1988 0
c (0<=(SATLiteral(280) - aux495 + SATLiteral(550)))
550 1988 0
280 1988 0
280 550 1987 0
c ((SATLiteral(955) - aux496 + SATLiteral(820))<=0)
-820 -1990 0
-955 -1990 0
-955 -820 -1991 0
c (0<=(SATLiteral(955) - aux496 + SATLiteral(820)))
820 1991 0
955 1991 0
955 820 1990 0
c (( - aux497 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -1993 0
-685 -1993 0
-685 -145 -1994 0
c (0<=( - aux497 + SATLiteral(685) + SATLiteral(145)))
145 1994 0
685 1994 0
685 145 1993 0
c (( - aux498 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -1996 0
-415 -1996 0
-415 -1090 -1997 0
c (0<=( - aux498 + SATLiteral(415) + SATLiteral(1090)))
1090 1997 0
415 1997 0
415 1090 1996 0
c ((aux498 - aux499 + SATLiteral(10))<=0)
1996 -1999 0
1997 -2000 0
-10 -1999 0
-10 1996 -2000 0
-10 1997 -2002 0
c (0<=(aux498 - aux499 + SATLiteral(10)))
-1997 2002 0
-1996 2000 0
10 2002 0
10 -1997 2000 0
10 -1996 1999 0
c ((aux495 + aux497 - aux500)<=0)
1993 -2004 0
1994 -2005 0
1987 -2004 0
1987 1993 -2005 0
1987 1994 -2007 0
1988 -2005 0
1988 1993 -2007 0
1988 1994 -2009 0
c (0<=(aux495 + aux497 - aux500))
-1994 2009 0
-1993 2007 0
-1988 2009 0
-1988 -1994 2007 0
-1988 -1993 2005 0
-1987 2007 0
-1987 -1994 2005 0
-1987 -1993 2004 0
c ((SATLiteral(282) - aux501 + SATLiteral(552))<=0)
-552 -2011 0
-282 -2011 0
-282 -552 -2012 0
c (0<=(SATLiteral(282) - aux501 + SATLiteral(552)))
552 2012 0
282 2012 0
282 552 2011 0
c ((SATLiteral(957) - aux502 + SATLiteral(822))<=0)
-822 -2014 0
-957 -2014 0
-957 -822 -2015 0
c (0<=(SATLiteral(957) - aux502 + SATLiteral(822)))
822 2015 0
957 2015 0
957 822 2014 0
c (( - aux503 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -2017 0
-687 -2017 0
-687 -147 -2018 0
c (0<=( - aux503 + SATLiteral(687) + SATLiteral(147)))
147 2018 0
687 2018 0
687 147 2017 0
c (( - aux504 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2020 0
-417 -2020 0
-417 -1092 -2021 0
c (0<=( - aux504 + SATLiteral(417) + SATLiteral(1092)))
1092 2021 0
417 2021 0
417 1092 2020 0
c ((aux504 - aux505 + SATLiteral(12))<=0)
2020 -2023 0
2021 -2024 0
-12 -2023 0
-12 2020 -2024 0
-12 2021 -2026 0
c (0<=(aux504 - aux505 + SATLiteral(12)))
-2021 2026 0
-2020 2024 0
12 2026 0
12 -2021 2024 0
12 -2020 2023 0
c ((aux501 + aux503 - aux506)<=0)
2017 -2028 0
2018 -2029 0
2011 -2028 0
2011 2017 -2029 0
2011 2018 -2031 0
2012 -2029 0
2012 2017 -2031 0
2012 2018 -2033 0
c (0<=(aux501 + aux503 - aux506))
-2018 2033 0
-2017 2031 0
-2012 2033 0
-2012 -2018 2031 0
-2012 -2017 2029 0
-2011 2031 0
-2011 -2018 2029 0
-2011 -2017 2028 0
c ((SATLiteral(284) - aux507 + SATLiteral(554))<=0)
-554 -2035 0
-284 -2035 0
-284 -554 -2036 0
c (0<=(SATLiteral(284) - aux507 + SATLiteral(554)))
554 2036 0
284 2036 0
284 554 2035 0
c ((SATLiteral(959) - aux508 + SATLiteral(824))<=0)
-824 -2038 0
-959 -2038 0
-959 -824 -2039 0
c (0<=(SATLiteral(959) - aux508 + SATLiteral(824)))
824 2039 0
959 2039 0
959 824 2038 0
c (( - aux509 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -2041 0
-689 -2041 0
-689 -149 -2042 0
c (0<=( - aux509 + SATLiteral(689) + SATLiteral(149)))
149 2042 0
689 2042 0
689 149 2041 0
c (( - aux510 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2044 0
-419 -2044 0
-419 -1094 -2045 0
c (0<=( - aux510 + SATLiteral(419) + SATLiteral(1094)))
1094 2045 0
419 2045 0
419 1094 2044 0
c ((aux510 - aux511 + SATLiteral(14))<=0)
2044 -2047 0
2045 -2048 0
-14 -2047 0
-14 2044 -2048 0
-14 2045 -2050 0
c (0<=(aux510 - aux511 + SATLiteral(14)))
-2045 2050 0
-2044 2048 0
14 2050 0
14 -2045 2048 0
14 -2044 2047 0
c ((aux507 + aux509 - aux512)<=0)
2041 -2052 0
2042 -2053 0
2035 -2052 0
2035 2041 -2053 0
2035 2042 -2055 0
2036 -2053 0
2036 2041 -2055 0
2036 2042 -2057 0
c (0<=(aux507 + aux509 - aux512))
-2042 2057 0
-2041 2055 0
-2036 2057 0
-2036 -2042 2055 0
-2036 -2041 2053 0
-2035 2055 0
-2035 -2042 2053 0
-2035 -2041 2052 0
c ((SATLiteral(286) - aux513 + SATLiteral(556))<=0)
-556 -2059 0
-286 -2059 0
-286 -556 -2060 0
c (0<=(SATLiteral(286) - aux513 + SATLiteral(556)))
556 2060 0
286 2060 0
286 556 2059 0
c ((SATLiteral(961) - aux514 + SATLiteral(826))<=0)
-826 -2062 0
-961 -2062 0
-961 -826 -2063 0
c (0<=(SATLiteral(961) - aux514 + SATLiteral(826)))
826 2063 0
961 2063 0
961 826 2062 0
c (( - aux515 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2065 0
-691 -2065 0
-691 -151 -2066 0
c (0<=( - aux515 + SATLiteral(691) + SATLiteral(151)))
151 2066 0
691 2066 0
691 151 2065 0
c (( - aux516 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2068 0
-421 -2068 0
-421 -1096 -2069 0
c (0<=( - aux516 + SATLiteral(421) + SATLiteral(1096)))
1096 2069 0
421 2069 0
421 1096 2068 0
c ((aux516 - aux517 + SATLiteral(16))<=0)
2068 -2071 0
2069 -2072 0
-16 -2071 0
-16 2068 -2072 0
-16 2069 -2074 0
c (0<=(aux516 - aux517 + SATLiteral(16)))
-2069 2074 0
-2068 2072 0
16 2074 0
16 -2069 2072 0
16 -2068 2071 0
c ((aux513 + aux515 - aux518)<=0)
2065 -2076 0
2066 -2077 0
2059 -2076 0
2059 2065 -2077 0
2059 2066 -2079 0
2060 -2077 0
2060 2065 -2079 0
2060 2066 -2081 0
c (0<=(aux513 + aux515 - aux518))
-2066 2081 0
-2065 2079 0
-2060 2081 0
-2060 -2066 2079 0
-2060 -2065 2077 0
-2059 2079 0
-2059 -2066 2077 0
-2059 -2065 2076 0
c ((SATLiteral(-285) - aux519 + SATLiteral(-555))<=0)
555 -2083 0
285 -2083 0
285 555 -2084 0
c (0<=(SATLiteral(-285) - aux519 + SATLiteral(-555)))
-555 2084 0
-285 2084 0
-285 -555 2083 0
c ((SATLiteral(-960) - aux520 + SATLiteral(-825))<=0)
825 -2086 0
960 -2086 0
960 825 -2087 0
c (0<=(SATLiteral(-960) - aux520 + SATLiteral(-825)))
-825 2087 0
-960 2087 0
-960 -825 2086 0
c (( - aux521 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2089 0
690 -2089 0
690 150 -2090 0
c (0<=( - aux521 + SATLiteral(-690) + SATLiteral(-150)))
-150 2090 0
-690 2090 0
-690 -150 2089 0
c (( - aux522 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2092 0
420 -2092 0
420 1095 -2093 0
c (0<=( - aux522 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2093 0
-420 2093 0
-420 -1095 2092 0
c ((aux522 - aux523 + SATLiteral(-15))<=0)
2092 -2095 0
2093 -2096 0
15 -2095 0
15 2092 -2096 0
15 2093 -2098 0
c (0<=(aux522 - aux523 + SATLiteral(-15)))
-2093 2098 0
-2092 2096 0
-15 2098 0
-15 -2093 2096 0
-15 -2092 2095 0
c ((aux519 + aux521 - aux524)<=0)
2089 -2100 0
2090 -2101 0
2083 -2100 0
2083 2089 -2101 0
2083 2090 -2103 0
2084 -2101 0
2084 2089 -2103 0
2084 2090 -2105 0
c (0<=(aux519 + aux521 - aux524))
-2090 2105 0
-2089 2103 0
-2084 2105 0
-2084 -2090 2103 0
-2084 -2089 2101 0
-2083 2103 0
-2083 -2090 2101 0
-2083 -2089 2100 0
c ((SATLiteral(287) - aux525 + SATLiteral(557))<=0)
-557 -2107 0
-287 -2107 0
-287 -557 -2108 0
c (0<=(SATLiteral(287) - aux525 + SATLiteral(557)))
557 2108 0
287 2108 0
287 557 2107 0
c ((SATLiteral(962) - aux526 + SATLiteral(827))<=0)
-827 -2110 0
-962 -2110 0
-962 -827 -2111 0
c (0<=(SATLiteral(962) - aux526 + SATLiteral(827)))
827 2111 0
962 2111 0
962 827 2110 0
c (( - aux527 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2113 0
-692 -2113 0
-692 -152 -2114 0
c (0<=( - aux527 + SATLiteral(692) + SATLiteral(152)))
152 2114 0
692 2114 0
692 152 2113 0
c (( - aux528 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2116 0
-422 -2116 0
-422 -1097 -2117 0
c (0<=( - aux528 + SATLiteral(422) + SATLiteral(1097)))
1097 2117 0
422 2117 0
422 1097 2116 0
c ((aux528 - aux529 + SATLiteral(17))<=0)
2116 -2119 0
2117 -2120 0
-17 -2119 0
-17 2116 -2120 0
-17 2117 -2122 0
c (0<=(aux528 - aux529 + SATLiteral(17)))
-2117 2122 0
-2116 2120 0
17 2122 0
17 -2117 2120 0
17 -2116 2119 0
c ((aux525 + aux527 - aux530)<=0)
2113 -2124 0
2114 -2125 0
2107 -2124 0
2107 2113 -2125 0
2107 2114 -2127 0
2108 -2125 0
2108 2113 -2127 0
2108 2114 -2129 0
c (0<=(aux525 + aux527 - aux530))
-2114 2129 0
-2113 2127 0
-2108 2129 0
-2108 -2114 2127 0
-2108 -2113 2125 0
-2107 2127 0
-2107 -2114 2125 0
-2107 -2113 2124 0
c ((SATLiteral(289) - aux531 + SATLiteral(559))<=0)
-559 -2131 0
-289 -2131 0
-289 -559 -2132 0
c (0<=(SATLiteral(289) - aux531 + SATLiteral(559)))
559 2132 0
289 2132 0
289 559 2131 0
c ((SATLiteral(964) - aux532 + SATLiteral(829))<=0)
-829 -2134 0
-964 -2134 0
-964 -829 -2135 0
c (0<=(SATLiteral(964) - aux532 + SATLiteral(829)))
829 2135 0
964 2135 0
964 829 2134 0
c (( - aux533 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2137 0
-694 -2137 0
-694 -154 -2138 0
c (0<=( - aux533 + SATLiteral(694) + SATLiteral(154)))
154 2138 0
694 2138 0
694 154 2137 0
c (( - aux534 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2140 0
-424 -2140 0
-424 -1099 -2141 0
c (0<=( - aux534 + SATLiteral(424) + SATLiteral(1099)))
1099 2141 0
424 2141 0
424 1099 2140 0
c ((aux534 - aux535 + SATLiteral(19))<=0)
2140 -2143 0
2141 -2144 0
-19 -2143 0
-19 2140 -2144 0
-19 2141 -2146 0
c (0<=(aux534 - aux535 + SATLiteral(19)))
-2141 2146 0
-2140 2144 0
19 2146 0
19 -2141 2144 0
19 -2140 2143 0
c ((aux531 + aux533 - aux536)<=0)
2137 -2148 0
2138 -2149 0
2131 -2148 0
2131 2137 -2149 0
2131 2138 -2151 0
2132 -2149 0
2132 2137 -2151 0
2132 2138 -2153 0
c (0<=(aux531 + aux533 - aux536))
-2138 2153 0
-2137 2151 0
-2132 2153 0
-2132 -2138 2151 0
-2132 -2137 2149 0
-2131 2151 0
-2131 -2138 2149 0
-2131 -2137 2148 0
c ((SATLiteral(291) - aux537 + SATLiteral(561))<=0)
-561 -2155 0
-291 -2155 0
-291 -561 -2156 0
c (0<=(SATLiteral(291) - aux537 + SATLiteral(561)))
561 2156 0
291 2156 0
291 561 2155 0
c ((SATLiteral(966) - aux538 + SATLiteral(831))<=0)
-831 -2158 0
-966 -2158 0
-966 -831 -2159 0
c (0<=(SATLiteral(966) - aux538 + SATLiteral(831)))
831 2159 0
966 2159 0
966 831 2158 0
c (( - aux539 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2161 0
-696 -2161 0
-696 -156 -2162 0
c (0<=( - aux539 + SATLiteral(696) + SATLiteral(156)))
156 2162 0
696 2162 0
696 156 2161 0
c (( - aux540 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2164 0
-426 -2164 0
-426 -1101 -2165 0
c (0<=( - aux540 + SATLiteral(426) + SATLiteral(1101)))
1101 2165 0
426 2165 0
426 1101 2164 0
c ((aux540 - aux541 + SATLiteral(21))<=0)
2164 -2167 0
2165 -2168 0
-21 -2167 0
-21 2164 -2168 0
-21 2165 -2170 0
c (0<=(aux540 - aux541 + SATLiteral(21)))
-2165 2170 0
-2164 2168 0
21 2170 0
21 -2165 2168 0
21 -2164 2167 0
c ((aux537 + aux539 - aux542)<=0)
2161 -2172 0
2162 -2173 0
2155 -2172 0
2155 2161 -2173 0
2155 2162 -2175 0
2156 -2173 0
2156 2161 -2175 0
2156 2162 -2177 0
c (0<=(aux537 + aux539 - aux542))
-2162 2177 0
-2161 2175 0
-2156 2177 0
-2156 -2162 2175 0
-2156 -2161 2173 0
-2155 2175 0
-2155 -2162 2173 0
-2155 -2161 2172 0
c ((SATLiteral(293) - aux543 + SATLiteral(563))<=0)
-563 -2179 0
-293 -2179 0
-293 -563 -2180 0
c (0<=(SATLiteral(293) - aux543 + SATLiteral(563)))
563 2180 0
293 2180 0
293 563 2179 0
c ((SATLiteral(968) - aux544 + SATLiteral(833))<=0)
-833 -2182 0
-968 -2182 0
-968 -833 -2183 0
c (0<=(SATLiteral(968) - aux544 + SATLiteral(833)))
833 2183 0
968 2183 0
968 833 2182 0
c (( - aux545 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2185 0
-698 -2185 0
-698 -158 -2186 0
c (0<=( - aux545 + SATLiteral(698) + SATLiteral(158)))
158 2186 0
698 2186 0
698 158 2185 0
c (( - aux546 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2188 0
-428 -2188 0
-428 -1103 -2189 0
c (0<=( - aux546 + SATLiteral(428) + SATLiteral(1103)))
1103 2189 0
428 2189 0
428 1103 2188 0
c ((aux546 - aux547 + SATLiteral(23))<=0)
2188 -2191 0
2189 -2192 0
-23 -2191 0
-23 2188 -2192 0
-23 2189 -2194 0
c (0<=(aux546 - aux547 + SATLiteral(23)))
-2189 2194 0
-2188 2192 0
23 2194 0
23 -2189 2192 0
23 -2188 2191 0
c ((aux543 + aux545 - aux548)<=0)
2185 -2196 0
2186 -2197 0
2179 -2196 0
2179 2185 -2197 0
2179 2186 -2199 0
2180 -2197 0
2180 2185 -2199 0
2180 2186 -2201 0
c (0<=(aux543 + aux545 - aux548))
-2186 2201 0
-2185 2199 0
-2180 2201 0
-2180 -2186 2199 0
-2180 -2185 2197 0
-2179 2199 0
-2179 -2186 2197 0
-2179 -2185 2196 0
c ((SATLiteral(295) - aux549 + SATLiteral(565))<=0)
-565 -2203 0
-295 -2203 0
-295 -565 -2204 0
c (0<=(SATLiteral(295) - aux549 + SATLiteral(565)))
565 2204 0
295 2204 0
295 565 2203 0
c ((SATLiteral(970) - aux550 + SATLiteral(835))<=0)
-835 -2206 0
-970 -2206 0
-970 -835 -2207 0
c (0<=(SATLiteral(970) - aux550 + SATLiteral(835)))
835 2207 0
970 2207 0
970 835 2206 0
c (( - aux551 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2209 0
-700 -2209 0
-700 -160 -2210 0
c (0<=( - aux551 + SATLiteral(700) + SATLiteral(160)))
160 2210 0
700 2210 0
700 160 2209 0
c (( - aux552 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2212 0
-430 -2212 0
-430 -1105 -2213 0
c (0<=( - aux552 + SATLiteral(430) + SATLiteral(1105)))
1105 2213 0
430 2213 0
430 1105 2212 0
c ((aux552 - aux553 + SATLiteral(25))<=0)
2212 -2215 0
2213 -2216 0
-25 -2215 0
-25 2212 -2216 0
-25 2213 -2218 0
c (0<=(aux552 - aux553 + SATLiteral(25)))
-2213 2218 0
-2212 2216 0
25 2218 0
25 -2213 2216 0
25 -2212 2215 0
c ((aux549 + aux551 - aux554)<=0)
2209 -2220 0
2210 -2221 0
2203 -2220 0
2203 2209 -2221 0
2203 2210 -2223 0
2204 -2221 0
2204 2209 -2223 0
2204 2210 -2225 0
c (0<=(aux549 + aux551 - aux554))
-2210 2225 0
-2209 2223 0
-2204 2225 0
-2204 -2210 2223 0
-2204 -2209 2221 0
-2203 2223 0
-2203 -2210 2221 0
-2203 -2209 2220 0
c ((SATLiteral(297) - aux555 + SATLiteral(567))<=0)
-567 -2227 0
-297 -2227 0
-297 -567 -2228 0
c (0<=(SATLiteral(297) - aux555 + SATLiteral(567)))
567 2228 0
297 2228 0
297 567 2227 0
c ((SATLiteral(972) - aux556 + SATLiteral(837))<=0)
-837 -2230 0
-972 -2230 0
-972 -837 -2231 0
c (0<=(SATLiteral(972) - aux556 + SATLiteral(837)))
837 2231 0
972 2231 0
972 837 2230 0
c (( - aux557 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2233 0
-702 -2233 0
-702 -162 -2234 0
c (0<=( - aux557 + SATLiteral(702) + SATLiteral(162)))
162 2234 0
702 2234 0
702 162 2233 0
c (( - aux558 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2236 0
-432 -2236 0
-432 -1107 -2237 0
c (0<=( - aux558 + SATLiteral(432) + SATLiteral(1107)))
1107 2237 0
432 2237 0
432 1107 2236 0
c ((aux558 - aux559 + SATLiteral(27))<=0)
2236 -2239 0
2237 -2240 0
-27 -2239 0
-27 2236 -2240 0
-27 2237 -2242 0
c (0<=(aux558 - aux559 + SATLiteral(27)))
-2237 2242 0
-2236 2240 0
27 2242 0
27 -2237 2240 0
27 -2236 2239 0
c ((aux555 + aux557 - aux560)<=0)
2233 -2244 0
2234 -2245 0
2227 -2244 0
2227 2233 -2245 0
2227 2234 -2247 0
2228 -2245 0
2228 2233 -2247 0
2228 2234 -2249 0
c (0<=(aux555 + aux557 - aux560))
-2234 2249 0
-2233 2247 0
-2228 2249 0
-2228 -2234 2247 0
-2228 -2233 2245 0
-2227 2247 0
-2227 -2234 2245 0
-2227 -2233 2244 0
c ((SATLiteral(299) - aux561 + SATLiteral(569))<=0)
-569 -2251 0
-299 -2251 0
-299 -569 -2252 0
c (0<=(SATLiteral(299) - aux561 + SATLiteral(569)))
569 2252 0
299 2252 0
299 569 2251 0
c ((SATLiteral(974) - aux562 + SATLiteral(839))<=0)
-839 -2254 0
-974 -2254 0
-974 -839 -2255 0
c (0<=(SATLiteral(974) - aux562 + SATLiteral(839)))
839 2255 0
974 2255 0
974 839 2254 0
c (( - aux563 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2257 0
-704 -2257 0
-704 -164 -2258 0
c (0<=( - aux563 + SATLiteral(704) + SATLiteral(164)))
164 2258 0
704 2258 0
704 164 2257 0
c (( - aux564 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2260 0
-434 -2260 0
-434 -1109 -2261 0
c (0<=( - aux564 + SATLiteral(434) + SATLiteral(1109)))
1109 2261 0
434 2261 0
434 1109 2260 0
c ((aux564 - aux565 + SATLiteral(29))<=0)
2260 -2263 0
2261 -2264 0
-29 -2263 0
-29 2260 -2264 0
-29 2261 -2266 0
c (0<=(aux564 - aux565 + SATLiteral(29)))
-2261 2266 0
-2260 2264 0
29 2266 0
29 -2261 2264 0
29 -2260 2263 0
c ((aux561 + aux563 - aux566)<=0)
2257 -2268 0
2258 -2269 0
2251 -2268 0
2251 2257 -2269 0
2251 2258 -2271 0
2252 -2269 0
2252 2257 -2271 0
2252 2258 -2273 0
c (0<=(aux561 + aux563 - aux566))
-2258 2273 0
-2257 2271 0
-2252 2273 0
-2252 -2258 2271 0
-2252 -2257 2269 0
-2251 2271 0
-2251 -2258 2269 0
-2251 -2257 2268 0
c ((SATLiteral(301) - aux567 + SATLiteral(571))<=0)
-571 -2275 0
-301 -2275 0
-301 -571 -2276 0
c (0<=(SATLiteral(301) - aux567 + SATLiteral(571)))
571 2276 0
301 2276 0
301 571 2275 0
c ((SATLiteral(976) - aux568 + SATLiteral(841))<=0)
-841 -2278 0
-976 -2278 0
-976 -841 -2279 0
c (0<=(SATLiteral(976) - aux568 + SATLiteral(841)))
841 2279 0
976 2279 0
976 841 2278 0
c (( - aux569 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2281 0
-706 -2281 0
-706 -166 -2282 0
c (0<=( - aux569 + SATLiteral(706) + SATLiteral(166)))
166 2282 0
706 2282 0
706 166 2281 0
c (( - aux570 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2284 0
-436 -2284 0
-436 -1111 -2285 0
c (0<=( - aux570 + SATLiteral(436) + SATLiteral(1111)))
1111 2285 0
436 2285 0
436 1111 2284 0
c ((aux570 - aux571 + SATLiteral(31))<=0)
2284 -2287 0
2285 -2288 0
-31 -2287 0
-31 2284 -2288 0
-31 2285 -2290 0
c (0<=(aux570 - aux571 + SATLiteral(31)))
-2285 2290 0
-2284 2288 0
31 2290 0
31 -2285 2288 0
31 -2284 2287 0
c ((aux567 + aux569 - aux572)<=0)
2281 -2292 0
2282 -2293 0
2275 -2292 0
2275 2281 -2293 0
2275 2282 -2295 0
2276 -2293 0
2276 2281 -2295 0
2276 2282 -2297 0
c (0<=(aux567 + aux569 - aux572))
-2282 2297 0
-2281 2295 0
-2276 2297 0
-2276 -2282 2295 0
-2276 -2281 2293 0
-2275 2295 0
-2275 -2282 2293 0
-2275 -2281 2292 0
c ((SATLiteral(-300) - aux573 + SATLiteral(-570))<=0)
570 -2299 0
300 -2299 0
300 570 -2300 0
c (0<=(SATLiteral(-300) - aux573 + SATLiteral(-570)))
-570 2300 0
-300 2300 0
-300 -570 2299 0
c ((SATLiteral(-975) - aux574 + SATLiteral(-840))<=0)
840 -2302 0
975 -2302 0
975 840 -2303 0
c (0<=(SATLiteral(-975) - aux574 + SATLiteral(-840)))
-840 2303 0
-975 2303 0
-975 -840 2302 0
c (( - aux575 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2305 0
705 -2305 0
705 165 -2306 0
c (0<=( - aux575 + SATLiteral(-705) + SATLiteral(-165)))
-165 2306 0
-705 2306 0
-705 -165 2305 0
c (( - aux576 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2308 0
435 -2308 0
435 1110 -2309 0
c (0<=( - aux576 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2309 0
-435 2309 0
-435 -1110 2308 0
c ((aux576 - aux577 + SATLiteral(-30))<=0)
2308 -2311 0
2309 -2312 0
30 -2311 0
30 2308 -2312 0
30 2309 -2314 0
c (0<=(aux576 - aux577 + SATLiteral(-30)))
-2309 2314 0
-2308 2312 0
-30 2314 0
-30 -2309 2312 0
-30 -2308 2311 0
c ((aux573 + aux575 - aux578)<=0)
2305 -2316 0
2306 -2317 0
2299 -2316 0
2299 2305 -2317 0
2299 2306 -2319 0
2300 -2317 0
2300 2305 -2319 0
2300 2306 -2321 0
c (0<=(aux573 + aux575 - aux578))
-2306 2321 0
-2305 2319 0
-2300 2321 0
-2300 -2306 2319 0
-2300 -2305 2317 0
-2299 2319 0
-2299 -2306 2317 0
-2299 -2305 2316 0
c ((SATLiteral(302) - aux579 + SATLiteral(572))<=0)
-572 -2323 0
-302 -2323 0
-302 -572 -2324 0
c (0<=(SATLiteral(302) - aux579 + SATLiteral(572)))
572 2324 0
302 2324 0
302 572 2323 0
c ((SATLiteral(977) - aux580 + SATLiteral(842))<=0)
-842 -2326 0
-977 -2326 0
-977 -842 -2327 0
c (0<=(SATLiteral(977) - aux580 + SATLiteral(842)))
842 2327 0
977 2327 0
977 842 2326 0
c (( - aux581 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2329 0
-707 -2329 0
-707 -167 -2330 0
c (0<=( - aux581 + SATLiteral(707) + SATLiteral(167)))
167 2330 0
707 2330 0
707 167 2329 0
c (( - aux582 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2332 0
-437 -2332 0
-437 -1112 -2333 0
c (0<=( - aux582 + SATLiteral(437) + SATLiteral(1112)))
1112 2333 0
437 2333 0
437 1112 2332 0
c ((aux582 - aux583 + SATLiteral(32))<=0)
2332 -2335 0
2333 -2336 0
-32 -2335 0
-32 2332 -2336 0
-32 2333 -2338 0
c (0<=(aux582 - aux583 + SATLiteral(32)))
-2333 2338 0
-2332 2336 0
32 2338 0
32 -2333 2336 0
32 -2332 2335 0
c ((aux579 + aux581 - aux584)<=0)
2329 -2340 0
2330 -2341 0
2323 -2340 0
2323 2329 -2341 0
2323 2330 -2343 0
2324 -2341 0
2324 2329 -2343 0
2324 2330 -2345 0
c (0<=(aux579 + aux581 - aux584))
-2330 2345 0
-2329 2343 0
-2324 2345 0
-2324 -2330 2343 0
-2324 -2329 2341 0
-2323 2343 0
-2323 -2330 2341 0
-2323 -2329 2340 0
c ((SATLiteral(304) - aux585 + SATLiteral(574))<=0)
-574 -2347 0
-304 -2347 0
-304 -574 -2348 0
c (0<=(SATLiteral(304) - aux585 + SATLiteral(574)))
574 2348 0
304 2348 0
304 574 2347 0
c ((SATLiteral(979) - aux586 + SATLiteral(844))<=0)
-844 -2350 0
-979 -2350 0
-979 -844 -2351 0
c (0<=(SATLiteral(979) - aux586 + SATLiteral(844)))
844 2351 0
979 2351 0
979 844 2350 0
c (( - aux587 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2353 0
-709 -2353 0
-709 -169 -2354 0
c (0<=( - aux587 + SATLiteral(709) + SATLiteral(169)))
169 2354 0
709 2354 0
709 169 2353 0
c (( - aux588 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2356 0
-439 -2356 0
-439 -1114 -2357 0
c (0<=( - aux588 + SATLiteral(439) + SATLiteral(1114)))
1114 2357 0
439 2357 0
439 1114 2356 0
c ((aux588 - aux589 + SATLiteral(34))<=0)
2356 -2359 0
2357 -2360 0
-34 -2359 0
-34 2356 -2360 0
-34 2357 -2362 0
c (0<=(aux588 - aux589 + SATLiteral(34)))
-2357 2362 0
-2356 2360 0
34 2362 0
34 -2357 2360 0
34 -2356 2359 0
c ((aux585 + aux587 - aux590)<=0)
2353 -2364 0
2354 -2365 0
2347 -2364 0
2347 2353 -2365 0
2347 2354 -2367 0
2348 -2365 0
2348 2353 -2367 0
2348 2354 -2369 0
c (0<=(aux585 + aux587 - aux590))
-2354 2369 0
-2353 2367 0
-2348 2369 0
-2348 -2354 2367 0
-2348 -2353 2365 0
-2347 2367 0
-2347 -2354 2365 0
-2347 -2353 2364 0
c ((SATLiteral(306) - aux591 + SATLiteral(576))<=0)
-576 -2371 0
-306 -2371 0
-306 -576 -2372 0
c (0<=(SATLiteral(306) - aux591 + SATLiteral(576)))
576 2372 0
306 2372 0
306 576 2371 0
c ((SATLiteral(981) - aux592 + SATLiteral(846))<=0)
-846 -2374 0
-981 -2374 0
-981 -846 -2375 0
c (0<=(SATLiteral(981) - aux592 + SATLiteral(846)))
846 2375 0
981 2375 0
981 846 2374 0
c (( - aux593 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2377 0
-711 -2377 0
-711 -171 -2378 0
c (0<=( - aux593 + SATLiteral(711) + SATLiteral(171)))
171 2378 0
711 2378 0
711 171 2377 0
c (( - aux594 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2380 0
-441 -2380 0
-441 -1116 -2381 0
c (0<=( - aux594 + SATLiteral(441) + SATLiteral(1116)))
1116 2381 0
441 2381 0
441 1116 2380 0
c ((aux594 - aux595 + SATLiteral(36))<=0)
2380 -2383 0
2381 -2384 0
-36 -2383 0
-36 2380 -2384 0
-36 2381 -2386 0
c (0<=(aux594 - aux595 + SATLiteral(36)))
-2381 2386 0
-2380 2384 0
36 2386 0
36 -2381 2384 0
36 -2380 2383 0
c ((aux591 + aux593 - aux596)<=0)
2377 -2388 0
2378 -2389 0
2371 -2388 0
2371 2377 -2389 0
2371 2378 -2391 0
2372 -2389 0
2372 2377 -2391 0
2372 2378 -2393 0
c (0<=(aux591 + aux593 - aux596))
-2378 2393 0
-2377 2391 0
-2372 2393 0
-2372 -2378 2391 0
-2372 -2377 2389 0
-2371 2391 0
-2371 -2378 2389 0
-2371 -2377 2388 0
c ((SATLiteral(308) - aux597 + SATLiteral(578))<=0)
-578 -2395 0
-308 -2395 0
-308 -578 -2396 0
c (0<=(SATLiteral(308) - aux597 + SATLiteral(578)))
578 2396 0
308 2396 0
308 578 2395 0
c ((SATLiteral(983) - aux598 + SATLiteral(848))<=0)
-848 -2398 0
-983 -2398 0
-983 -848 -2399 0
c (0<=(SATLiteral(983) - aux598 + SATLiteral(848)))
848 2399 0
983 2399 0
983 848 2398 0
c (( - aux599 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2401 0
-713 -2401 0
-713 -173 -2402 0
c (0<=( - aux599 + SATLiteral(713) + SATLiteral(173)))
173 2402 0
713 2402 0
713 173 2401 0
c (( - aux600 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2404 0
-443 -2404 0
-443 -1118 -2405 0
c (0<=( - aux600 + SATLiteral(443) + SATLiteral(1118)))
1118 2405 0
443 2405 0
443 1118 2404 0
c ((aux600 - aux601 + SATLiteral(38))<=0)
2404 -2407 0
2405 -2408 0
-38 -2407 0
-38 2404 -2408 0
-38 2405 -2410 0
c (0<=(aux600 - aux601 + SATLiteral(38)))
-2405 2410 0
-2404 2408 0
38 2410 0
38 -2405 2408 0
38 -2404 2407 0
c ((aux597 + aux599 - aux602)<=0)
2401 -2412 0
2402 -2413 0
2395 -2412 0
2395 2401 -2413 0
2395 2402 -2415 0
2396 -2413 0
2396 2401 -2415 0
2396 2402 -2417 0
c (0<=(aux597 + aux599 - aux602))
-2402 2417 0
-2401 2415 0
-2396 2417 0
-2396 -2402 2415 0
-2396 -2401 2413 0
-2395 2415 0
-2395 -2402 2413 0
-2395 -2401 2412 0
c ((SATLiteral(310) - aux603 + SATLiteral(580))<=0)
-580 -2419 0
-310 -2419 0
-310 -580 -2420 0
c (0<=(SATLiteral(310) - aux603 + SATLiteral(580)))
580 2420 0
310 2420 0
310 580 2419 0
c ((SATLiteral(985) - aux604 + SATLiteral(850))<=0)
-850 -2422 0
-985 -2422 0
-985 -850 -2423 0
c (0<=(SATLiteral(985) - aux604 + SATLiteral(850)))
850 2423 0
985 2423 0
985 850 2422 0
c (( - aux605 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2425 0
-715 -2425 0
-715 -175 -2426 0
c (0<=( - aux605 + SATLiteral(715) + SATLiteral(175)))
175 2426 0
715 2426 0
715 175 2425 0
c (( - aux606 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2428 0
-445 -2428 0
-445 -1120 -2429 0
c (0<=( - aux606 + SATLiteral(445) + SATLiteral(1120)))
1120 2429 0
445 2429 0
445 1120 2428 0
c ((aux606 - aux607 + SATLiteral(40))<=0)
2428 -2431 0
2429 -2432 0
-40 -2431 0
-40 2428 -2432 0
-40 2429 -2434 0
c (0<=(aux606 - aux607 + SATLiteral(40)))
-2429 2434 0
-2428 2432 0
40 2434 0
40 -2429 2432 0
40 -2428 2431 0
c ((aux603 + aux605 - aux608)<=0)
2425 -2436 0
2426 -2437 0
2419 -2436 0
2419 2425 -2437 0
2419 2426 -2439 0
2420 -2437 0
2420 2425 -2439 0
2420 2426 -2441 0
c (0<=(aux603 + aux605 - aux608))
-2426 2441 0
-2425 2439 0
-2420 2441 0
-2420 -2426 2439 0
-2420 -2425 2437 0
-2419 2439 0
-2419 -2426 2437 0
-2419 -2425 2436 0
c ((SATLiteral(312) - aux609 + SATLiteral(582))<=0)
-582 -2443 0
-312 -2443 0
-312 -582 -2444 0
c (0<=(SATLiteral(312) - aux609 + SATLiteral(582)))
582 2444 0
312 2444 0
312 582 2443 0
c ((SATLiteral(987) - aux610 + SATLiteral(852))<=0)
-852 -2446 0
-987 -2446 0
-987 -852 -2447 0
c (0<=(SATLiteral(987) - aux610 + SATLiteral(852)))
852 2447 0
987 2447 0
987 852 2446 0
c (( - aux611 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2449 0
-717 -2449 0
-717 -177 -2450 0
c (0<=( - aux611 + SATLiteral(717) + SATLiteral(177)))
177 2450 0
717 2450 0
717 177 2449 0
c (( - aux612 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2452 0
-447 -2452 0
-447 -1122 -2453 0
c (0<=( - aux612 + SATLiteral(447) + SATLiteral(1122)))
1122 2453 0
447 2453 0
447 1122 2452 0
c ((aux612 - aux613 + SATLiteral(42))<=0)
2452 -2455 0
2453 -2456 0
-42 -2455 0
-42 2452 -2456 0
-42 2453 -2458 0
c (0<=(aux612 - aux613 + SATLiteral(42)))
-2453 2458 0
-2452 2456 0
42 2458 0
42 -2453 2456 0
42 -2452 2455 0
c ((aux609 + aux611 - aux614)<=0)
2449 -2460 0
2450 -2461 0
2443 -2460 0
2443 2449 -2461 0
2443 2450 -2463 0
2444 -2461 0
2444 2449 -2463 0
2444 2450 -2465 0
c (0<=(aux609 + aux611 - aux614))
-2450 2465 0
-2449 2463 0
-2444 2465 0
-2444 -2450 2463 0
-2444 -2449 2461 0
-2443 2463 0
-2443 -2450 2461 0
-2443 -2449 2460 0
c ((SATLiteral(314) - aux615 + SATLiteral(584))<=0)
-584 -2467 0
-314 -2467 0
-314 -584 -2468 0
c (0<=(SATLiteral(314) - aux615 + SATLiteral(584)))
584 2468 0
314 2468 0
314 584 2467 0
c ((SATLiteral(989) - aux616 + SATLiteral(854))<=0)
-854 -2470 0
-989 -2470 0
-989 -854 -2471 0
c (0<=(SATLiteral(989) - aux616 + SATLiteral(854)))
854 2471 0
989 2471 0
989 854 2470 0
c (( - aux617 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2473 0
-719 -2473 0
-719 -179 -2474 0
c (0<=( - aux617 + SATLiteral(719) + SATLiteral(179)))
179 2474 0
719 2474 0
719 179 2473 0
c (( - aux618 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2476 0
-449 -2476 0
-449 -1124 -2477 0
c (0<=( - aux618 + SATLiteral(449) + SATLiteral(1124)))
1124 2477 0
449 2477 0
449 1124 2476 0
c ((aux618 - aux619 + SATLiteral(44))<=0)
2476 -2479 0
2477 -2480 0
-44 -2479 0
-44 2476 -2480 0
-44 2477 -2482 0
c (0<=(aux618 - aux619 + SATLiteral(44)))
-2477 2482 0
-2476 2480 0
44 2482 0
44 -2477 2480 0
44 -2476 2479 0
c ((aux615 + aux617 - aux620)<=0)
2473 -2484 0
2474 -2485 0
2467 -2484 0
2467 2473 -2485 0
2467 2474 -2487 0
2468 -2485 0
2468 2473 -2487 0
2468 2474 -2489 0
c (0<=(aux615 + aux617 - aux620))
-2474 2489 0
-2473 2487 0
-2468 2489 0
-2468 -2474 2487 0
-2468 -2473 2485 0
-2467 2487 0
-2467 -2474 2485 0
-2467 -2473 2484 0
c ((SATLiteral(316) - aux621 + SATLiteral(586))<=0)
-586 -2491 0
-316 -2491 0
-316 -586 -2492 0
c (0<=(SATLiteral(316) - aux621 + SATLiteral(586)))
586 2492 0
316 2492 0
316 586 2491 0
c ((SATLiteral(991) - aux622 + SATLiteral(856))<=0)
-856 -2494 0
-991 -2494 0
-991 -856 -2495 0
c (0<=(SATLiteral(991) - aux622 + SATLiteral(856)))
856 2495 0
991 2495 0
991 856 2494 0
c (( - aux623 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2497 0
-721 -2497 0
-721 -181 -2498 0
c (0<=( - aux623 + SATLiteral(721) + SATLiteral(181)))
181 2498 0
721 2498 0
721 181 2497 0
c (( - aux624 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2500 0
-451 -2500 0
-451 -1126 -2501 0
c (0<=( - aux624 + SATLiteral(451) + SATLiteral(1126)))
1126 2501 0
451 2501 0
451 1126 2500 0
c ((aux624 - aux625 + SATLiteral(46))<=0)
2500 -2503 0
2501 -2504 0
-46 -2503 0
-46 2500 -2504 0
-46 2501 -2506 0
c (0<=(aux624 - aux625 + SATLiteral(46)))
-2501 2506 0
-2500 2504 0
46 2506 0
46 -2501 2504 0
46 -2500 2503 0
c ((aux621 + aux623 - aux626)<=0)
2497 -2508 0
2498 -2509 0
2491 -2508 0
2491 2497 -2509 0
2491 2498 -2511 0
2492 -2509 0
2492 2497 -2511 0
2492 2498 -2513 0
c (0<=(aux621 + aux623 - aux626))
-2498 2513 0
-2497 2511 0
-2492 2513 0
-2492 -2498 2511 0
-2492 -2497 2509 0
-2491 2511 0
-2491 -2498 2509 0
-2491 -2497 2508 0
c ((SATLiteral(-315) - aux627 + SATLiteral(-585))<=0)
585 -2515 0
315 -2515 0
315 585 -2516 0
c (0<=(SATLiteral(-315) - aux627 + SATLiteral(-585)))
-585 2516 0
-315 2516 0
-315 -585 2515 0
c ((SATLiteral(-990) - aux628 + SATLiteral(-855))<=0)
855 -2518 0
990 -2518 0
990 855 -2519 0
c (0<=(SATLiteral(-990) - aux628 + SATLiteral(-855)))
-855 2519 0
-990 2519 0
-990 -855 2518 0
c (( - aux629 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2521 0
720 -2521 0
720 180 -2522 0
c (0<=( - aux629 + SATLiteral(-720) + SATLiteral(-180)))
-180 2522 0
-720 2522 0
-720 -180 2521 0
c (( - aux630 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2524 0
450 -2524 0
450 1125 -2525 0
c (0<=( - aux630 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2525 0
-450 2525 0
-450 -1125 2524 0
c ((aux630 - aux631 + SATLiteral(-45))<=0)
2524 -2527 0
2525 -2528 0
45 -2527 0
45 2524 -2528 0
45 2525 -2530 0
c (0<=(aux630 - aux631 + SATLiteral(-45)))
-2525 2530 0
-2524 2528 0
-45 2530 0
-45 -2525 2528 0
-45 -2524 2527 0
c ((aux627 + aux629 - aux632)<=0)
2521 -2532 0
2522 -2533 0
2515 -2532 0
2515 2521 -2533 0
2515 2522 -2535 0
2516 -2533 0
2516 2521 -2535 0
2516 2522 -2537 0
c (0<=(aux627 + aux629 - aux632))
-2522 2537 0
-2521 2535 0
-2516 2537 0
-2516 -2522 2535 0
-2516 -2521 2533 0
-2515 2535 0
-2515 -2522 2533 0
-2515 -2521 2532 0
c ((SATLiteral(317) - aux633 + SATLiteral(587))<=0)
-587 -2539 0
-317 -2539 0
-317 -587 -2540 0
c (0<=(SATLiteral(317) - aux633 + SATLiteral(587)))
587 2540 0
317 2540 0
317 587 2539 0
c ((SATLiteral(992) - aux634 + SATLiteral(857))<=0)
-857 -2542 0
-992 -2542 0
-992 -857 -2543 0
c (0<=(SATLiteral(992) - aux634 + SATLiteral(857)))
857 2543 0
992 2543 0
992 857 2542 0
c (( - aux635 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2545 0
-722 -2545 0
-722 -182 -2546 0
c (0<=( - aux635 + SATLiteral(722) + SATLiteral(182)))
182 2546 0
722 2546 0
722 182 2545 0
c (( - aux636 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2548 0
-452 -2548 0
-452 -1127 -2549 0
c (0<=( - aux636 + SATLiteral(452) + SATLiteral(1127)))
1127 2549 0
452 2549 0
452 1127 2548 0
c ((aux636 - aux637 + SATLiteral(47))<=0)
2548 -2551 0
2549 -2552 0
-47 -2551 0
-47 2548 -2552 0
-47 2549 -2554 0
c (0<=(aux636 - aux637 + SATLiteral(47)))
-2549 2554 0
-2548 2552 0
47 2554 0
47 -2549 2552 0
47 -2548 2551 0
c ((aux633 + aux635 - aux638)<=0)
2545 -2556 0
2546 -2557 0
2539 -2556 0
2539 2545 -2557 0
2539 2546 -2559 0
2540 -2557 0
2540 2545 -2559 0
2540 2546 -2561 0
c (0<=(aux633 + aux635 - aux638))
-2546 2561 0
-2545 2559 0
-2540 2561 0
-2540 -2546 2559 0
-2540 -2545 2557 0
-2539 2559 0
-2539 -2546 2557 0
-2539 -2545 2556 0
c ((SATLiteral(319) - aux639 + SATLiteral(589))<=0)
-589 -2563 0
-319 -2563 0
-319 -589 -2564 0
c (0<=(SATLiteral(319) - aux639 + SATLiteral(589)))
589 2564 0
319 2564 0
319 589 2563 0
c ((SATLiteral(994) - aux640 + SATLiteral(859))<=0)
-859 -2566 0
-994 -2566 0
-994 -859 -2567 0
c (0<=(SATLiteral(994) - aux640 + SATLiteral(859)))
859 2567 0
994 2567 0
994 859 2566 0
c (( - aux641 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2569 0
-724 -2569 0
-724 -184 -2570 0
c (0<=( - aux641 + SATLiteral(724) + SATLiteral(184)))
184 2570 0
724 2570 0
724 184 2569 0
c (( - aux642 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2572 0
-454 -2572 0
-454 -1129 -2573 0
c (0<=( - aux642 + SATLiteral(454) + SATLiteral(1129)))
1129 2573 0
454 2573 0
454 1129 2572 0
c ((aux642 - aux643 + SATLiteral(49))<=0)
2572 -2575 0
2573 -2576 0
-49 -2575 0
-49 2572 -2576 0
-49 2573 -2578 0
c (0<=(aux642 - aux643 + SATLiteral(49)))
-2573 2578 0
-2572 2576 0
49 2578 0
49 -2573 2576 0
49 -2572 2575 0
c ((aux639 + aux641 - aux644)<=0)
2569 -2580 0
2570 -2581 0
2563 -2580 0
2563 2569 -2581 0
2563 2570 -2583 0
2564 -2581 0
2564 2569 -2583 0
2564 2570 -2585 0
c (0<=(aux639 + aux641 - aux644))
-2570 2585 0
-2569 2583 0
-2564 2585 0
-2564 -2570 2583 0
-2564 -2569 2581 0
-2563 2583 0
-2563 -2570 2581 0
-2563 -2569 2580 0
c ((SATLiteral(321) - aux645 + SATLiteral(591))<=0)
-591 -2587 0
-321 -2587 0
-321 -591 -2588 0
c (0<=(SATLiteral(321) - aux645 + SATLiteral(591)))
591 2588 0
321 2588 0
321 591 2587 0
c ((SATLiteral(996) - aux646 + SATLiteral(861))<=0)
-861 -2590 0
-996 -2590 0
-996 -861 -2591 0
c (0<=(SATLiteral(996) - aux646 + SATLiteral(861)))
861 2591 0
996 2591 0
996 861 2590 0
c (( - aux647 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2593 0
-726 -2593 0
-726 -186 -2594 0
c (0<=( - aux647 + SATLiteral(726) + SATLiteral(186)))
186 2594 0
726 2594 0
726 186 2593 0
c (( - aux648 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2596 0
-456 -2596 0
-456 -1131 -2597 0
c (0<=( - aux648 + SATLiteral(456) + SATLiteral(1131)))
1131 2597 0
456 2597 0
456 1131 2596 0
c ((aux648 - aux649 + SATLiteral(51))<=0)
2596 -2599 0
2597 -2600 0
-51 -2599 0
-51 2596 -2600 0
-51 2597 -2602 0
c (0<=(aux648 - aux649 + SATLiteral(51)))
-2597 2602 0
-2596 2600 0
51 2602 0
51 -2597 2600 0
51 -2596 2599 0
c ((aux645 + aux647 - aux650)<=0)
2593 -2604 0
2594 -2605 0
2587 -2604 0
2587 2593 -2605 0
2587 2594 -2607 0
2588 -2605 0
2588 2593 -2607 0
2588 2594 -2609 0
c (0<=(aux645 + aux647 - aux650))
-2594 2609 0
-2593 2607 0
-2588 2609 0
-2588 -2594 2607 0
-2588 -2593 2605 0
-2587 2607 0
-2587 -2594 2605 0
-2587 -2593 2604 0
c ((SATLiteral(323) - aux651 + SATLiteral(593))<=0)
-593 -2611 0
-323 -2611 0
-323 -593 -2612 0
c (0<=(SATLiteral(323) - aux651 + SATLiteral(593)))
593 2612 0
323 2612 0
323 593 2611 0
c ((SATLiteral(998) - aux652 + SATLiteral(863))<=0)
-863 -2614 0
-998 -2614 0
-998 -863 -2615 0
c (0<=(SATLiteral(998) - aux652 + SATLiteral(863)))
863 2615 0
998 2615 0
998 863 2614 0
c (( - aux653 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2617 0
-728 -2617 0
-728 -188 -2618 0
c (0<=( - aux653 + SATLiteral(728) + SATLiteral(188)))
188 2618 0
728 2618 0
728 188 2617 0
c (( - aux654 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2620 0
-458 -2620 0
-458 -1133 -2621 0
c (0<=( - aux654 + SATLiteral(458) + SATLiteral(1133)))
1133 2621 0
458 2621 0
458 1133 2620 0
c ((aux654 - aux655 + SATLiteral(53))<=0)
2620 -2623 0
2621 -2624 0
-53 -2623 0
-53 2620 -2624 0
-53 2621 -2626 0
c (0<=(aux654 - aux655 + SATLiteral(53)))
-2621 2626 0
-2620 2624 0
53 2626 0
53 -2621 2624 0
53 -2620 2623 0
c ((aux651 + aux653 - aux656)<=0)
2617 -2628 0
2618 -2629 0
2611 -2628 0
2611 2617 -2629 0
2611 2618 -2631 0
2612 -2629 0
2612 2617 -2631 0
2612 2618 -2633 0
c (0<=(aux651 + aux653 - aux656))
-2618 2633 0
-2617 2631 0
-2612 2633 0
-2612 -2618 2631 0
-2612 -2617 2629 0
-2611 2631 0
-2611 -2618 2629 0
-2611 -2617 2628 0
c ((SATLiteral(325) - aux657 + SATLiteral(595))<=0)
-595 -2635 0
-325 -2635 0
-325 -595 -2636 0
c (0<=(SATLiteral(325) - aux657 + SATLiteral(595)))
595 2636 0
325 2636 0
325 595 2635 0
c ((SATLiteral(1000) - aux658 + SATLiteral(865))<=0)
-865 -2638 0
-1000 -2638 0
-1000 -865 -2639 0
c (0<=(SATLiteral(1000) - aux658 + SATLiteral(865)))
865 2639 0
1000 2639 0
1000 865 2638 0
c (( - aux659 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2641 0
-730 -2641 0
-730 -190 -2642 0
c (0<=( - aux659 + SATLiteral(730) + SATLiteral(190)))
190 2642 0
730 2642 0
730 190 2641 0
c (( - aux660 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2644 0
-460 -2644 0
-460 -1135 -2645 0
c (0<=( - aux660 + SATLiteral(460) + SATLiteral(1135)))
1135 2645 0
460 2645 0
460 1135 2644 0
c ((aux660 - aux661 + SATLiteral(55))<=0)
2644 -2647 0
2645 -2648 0
-55 -2647 0
-55 2644 -2648 0
-55 2645 -2650 0
c (0<=(aux660 - aux661 + SATLiteral(55)))
-2645 2650 0
-2644 2648 0
55 2650 0
55 -2645 2648 0
55 -2644 2647 0
c ((aux657 + aux659 - aux662)<=0)
2641 -2652 0
2642 -2653 0
2635 -2652 0
2635 2641 -2653 0
2635 2642 -2655 0
2636 -2653 0
2636 2641 -2655 0
2636 2642 -2657 0
c (0<=(aux657 + aux659 - aux662))
-2642 2657 0
-2641 2655 0
-2636 2657 0
-2636 -2642 2655 0
-2636 -2641 2653 0
-2635 2655 0
-2635 -2642 2653 0
-2635 -2641 2652 0
c ((SATLiteral(327) - aux663 + SATLiteral(597))<=0)
-597 -2659 0
-327 -2659 0
-327 -597 -2660 0
c (0<=(SATLiteral(327) - aux663 + SATLiteral(597)))
597 2660 0
327 2660 0
327 597 2659 0
c ((SATLiteral(1002) - aux664 + SATLiteral(867))<=0)
-867 -2662 0
-1002 -2662 0
-1002 -867 -2663 0
c (0<=(SATLiteral(1002) - aux664 + SATLiteral(867)))
867 2663 0
1002 2663 0
1002 867 2662 0
c (( - aux665 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2665 0
-732 -2665 0
-732 -192 -2666 0
c (0<=( - aux665 + SATLiteral(732) + SATLiteral(192)))
192 2666 0
732 2666 0
732 192 2665 0
c (( - aux666 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2668 0
-462 -2668 0
-462 -1137 -2669 0
c (0<=( - aux666 + SATLiteral(462) + SATLiteral(1137)))
1137 2669 0
462 2669 0
462 1137 2668 0
c ((aux666 - aux667 + SATLiteral(57))<=0)
2668 -2671 0
2669 -2672 0
-57 -2671 0
-57 2668 -2672 0
-57 2669 -2674 0
c (0<=(aux666 - aux667 + SATLiteral(57)))
-2669 2674 0
-2668 2672 0
57 2674 0
57 -2669 2672 0
57 -2668 2671 0
c ((aux663 + aux665 - aux668)<=0)
2665 -2676 0
2666 -2677 0
2659 -2676 0
2659 2665 -2677 0
2659 2666 -2679 0
2660 -2677 0
2660 2665 -2679 0
2660 2666 -2681 0
c (0<=(aux663 + aux665 - aux668))
-2666 2681 0
-2665 2679 0
-2660 2681 0
-2660 -2666 2679 0
-2660 -2665 2677 0
-2659 2679 0
-2659 -2666 2677 0
-2659 -2665 2676 0
c ((SATLiteral(329) - aux669 + SATLiteral(599))<=0)
-599 -2683 0
-329 -2683 0
-329 -599 -2684 0
c (0<=(SATLiteral(329) - aux669 + SATLiteral(599)))
599 2684 0
329 2684 0
329 599 2683 0
c ((SATLiteral(1004) - aux670 + SATLiteral(869))<=0)
-869 -2686 0
-1004 -2686 0
-1004 -869 -2687 0
c (0<=(SATLiteral(1004) - aux670 + SATLiteral(869)))
869 2687 0
1004 2687 0
1004 869 2686 0
c (( - aux671 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2689 0
-734 -2689 0
-734 -194 -2690 0
c (0<=( - aux671 + SATLiteral(734) + SATLiteral(194)))
194 2690 0
734 2690 0
734 194 2689 0
c (( - aux672 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2692 0
-464 -2692 0
-464 -1139 -2693 0
c (0<=( - aux672 + SATLiteral(464) + SATLiteral(1139)))
1139 2693 0
464 2693 0
464 1139 2692 0
c ((aux672 - aux673 + SATLiteral(59))<=0)
2692 -2695 0
2693 -2696 0
-59 -2695 0
-59 2692 -2696 0
-59 2693 -2698 0
c (0<=(aux672 - aux673 + SATLiteral(59)))
-2693 2698 0
-2692 2696 0
59 2698 0
59 -2693 2696 0
59 -2692 2695 0
c ((aux669 + aux671 - aux674)<=0)
2689 -2700 0
2690 -2701 0
2683 -2700 0
2683 2689 -2701 0
2683 2690 -2703 0
2684 -2701 0
2684 2689 -2703 0
2684 2690 -2705 0
c (0<=(aux669 + aux671 - aux674))
-2690 2705 0
-2689 2703 0
-2684 2705 0
-2684 -2690 2703 0
-2684 -2689 2701 0
-2683 2703 0
-2683 -2690 2701 0
-2683 -2689 2700 0
c ((SATLiteral(331) - aux675 + SATLiteral(601))<=0)
-601 -2707 0
-331 -2707 0
-331 -601 -2708 0
c (0<=(SATLiteral(331) - aux675 + SATLiteral(601)))
601 2708 0
331 2708 0
331 601 2707 0
c ((SATLiteral(1006) - aux676 + SATLiteral(871))<=0)
-871 -2710 0
-1006 -2710 0
-1006 -871 -2711 0
c (0<=(SATLiteral(1006) - aux676 + SATLiteral(871)))
871 2711 0
1006 2711 0
1006 871 2710 0
c (( - aux677 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2713 0
-736 -2713 0
-736 -196 -2714 0
c (0<=( - aux677 + SATLiteral(736) + SATLiteral(196)))
196 2714 0
736 2714 0
736 196 2713 0
c (( - aux678 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2716 0
-466 -2716 0
-466 -1141 -2717 0
c (0<=( - aux678 + SATLiteral(466) + SATLiteral(1141)))
1141 2717 0
466 2717 0
466 1141 2716 0
c ((aux678 - aux679 + SATLiteral(61))<=0)
2716 -2719 0
2717 -2720 0
-61 -2719 0
-61 2716 -2720 0
-61 2717 -2722 0
c (0<=(aux678 - aux679 + SATLiteral(61)))
-2717 2722 0
-2716 2720 0
61 2722 0
61 -2717 2720 0
61 -2716 2719 0
c ((aux675 + aux677 - aux680)<=0)
2713 -2724 0
2714 -2725 0
2707 -2724 0
2707 2713 -2725 0
2707 2714 -2727 0
2708 -2725 0
2708 2713 -2727 0
2708 2714 -2729 0
c (0<=(aux675 + aux677 - aux680))
-2714 2729 0
-2713 2727 0
-2708 2729 0
-2708 -2714 2727 0
-2708 -2713 2725 0
-2707 2727 0
-2707 -2714 2725 0
-2707 -2713 2724 0
c ((SATLiteral(-330) - aux681 + SATLiteral(-600))<=0)
600 -2731 0
330 -2731 0
330 600 -2732 0
c (0<=(SATLiteral(-330) - aux681 + SATLiteral(-600)))
-600 2732 0
-330 2732 0
-330 -600 2731 0
c ((SATLiteral(-1005) - aux682 + SATLiteral(-870))<=0)
870 -2734 0
1005 -2734 0
1005 870 -2735 0
c (0<=(SATLiteral(-1005) - aux682 + SATLiteral(-870)))
-870 2735 0
-1005 2735 0
-1005 -870 2734 0
c (( - aux683 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2737 0
735 -2737 0
735 195 -2738 0
c (0<=( - aux683 + SATLiteral(-735) + SATLiteral(-195)))
-195 2738 0
-735 2738 0
-735 -195 2737 0
c (( - aux684 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2740 0
465 -2740 0
465 1140 -2741 0
c (0<=( - aux684 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2741 0
-465 2741 0
-465 -1140 2740 0
c ((aux684 - aux685 + SATLiteral(-60))<=0)
2740 -2743 0
2741 -2744 0
60 -2743 0
60 2740 -2744 0
60 2741 -2746 0
c (0<=(aux684 - aux685 + SATLiteral(-60)))
-2741 2746 0
-2740 2744 0
-60 2746 0
-60 -2741 2744 0
-60 -2740 2743 0
c ((aux681 + aux683 - aux686)<=0)
2737 -2748 0
2738 -2749 0
2731 -2748 0
2731 2737 -2749 0
2731 2738 -2751 0
2732 -2749 0
2732 2737 -2751 0
2732 2738 -2753 0
c (0<=(aux681 + aux683 - aux686))
-2738 2753 0
-2737 2751 0
-2732 2753 0
-2732 -2738 2751 0
-2732 -2737 2749 0
-2731 2751 0
-2731 -2738 2749 0
-2731 -2737 2748 0
c ((SATLiteral(332) - aux687 + SATLiteral(602))<=0)
-602 -2755 0
-332 -2755 0
-332 -602 -2756 0
c (0<=(SATLiteral(332) - aux687 + SATLiteral(602)))
602 2756 0
332 2756 0
332 602 2755 0
c ((SATLiteral(1007) - aux688 + SATLiteral(872))<=0)
-872 -2758 0
-1007 -2758 0
-1007 -872 -2759 0
c (0<=(SATLiteral(1007) - aux688 + SATLiteral(872)))
872 2759 0
1007 2759 0
1007 872 2758 0
c (( - aux689 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2761 0
-737 -2761 0
-737 -197 -2762 0
c (0<=( - aux689 + SATLiteral(737) + SATLiteral(197)))
197 2762 0
737 2762 0
737 197 2761 0
c (( - aux690 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2764 0
-467 -2764 0
-467 -1142 -2765 0
c (0<=( - aux690 + SATLiteral(467) + SATLiteral(1142)))
1142 2765 0
467 2765 0
467 1142 2764 0
c ((aux690 - aux691 + SATLiteral(62))<=0)
2764 -2767 0
2765 -2768 0
-62 -2767 0
-62 2764 -2768 0
-62 2765 -2770 0
c (0<=(aux690 - aux691 + SATLiteral(62)))
-2765 2770 0
-2764 2768 0
62 2770 0
62 -2765 2768 0
62 -2764 2767 0
c ((aux687 + aux689 - aux692)<=0)
2761 -2772 0
2762 -2773 0
2755 -2772 0
2755 2761 -2773 0
2755 2762 -2775 0
2756 -2773 0
2756 2761 -2775 0
2756 2762 -2777 0
c (0<=(aux687 + aux689 - aux692))
-2762 2777 0
-2761 2775 0
-2756 2777 0
-2756 -2762 2775 0
-2756 -2761 2773 0
-2755 2775 0
-2755 -2762 2773 0
-2755 -2761 2772 0
c ((SATLiteral(334) - aux693 + SATLiteral(604))<=0)
-604 -2779 0
-334 -2779 0
-334 -604 -2780 0
c (0<=(SATLiteral(334) - aux693 + SATLiteral(604)))
604 2780 0
334 2780 0
334 604 2779 0
c ((SATLiteral(1009) - aux694 + SATLiteral(874))<=0)
-874 -2782 0
-1009 -2782 0
-1009 -874 -2783 0
c (0<=(SATLiteral(1009) - aux694 + SATLiteral(874)))
874 2783 0
1009 2783 0
1009 874 2782 0
c (( - aux695 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2785 0
-739 -2785 0
-739 -199 -2786 0
c (0<=( - aux695 + SATLiteral(739) + SATLiteral(199)))
199 2786 0
739 2786 0
739 199 2785 0
c (( - aux696 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2788 0
-469 -2788 0
-469 -1144 -2789 0
c (0<=( - aux696 + SATLiteral(469) + SATLiteral(1144)))
1144 2789 0
469 2789 0
469 1144 2788 0
c ((aux696 - aux697 + SATLiteral(64))<=0)
2788 -2791 0
2789 -2792 0
-64 -2791 0
-64 2788 -2792 0
-64 2789 -2794 0
c (0<=(aux696 - aux697 + SATLiteral(64)))
-2789 2794 0
-2788 2792 0
64 2794 0
64 -2789 2792 0
64 -2788 2791 0
c ((aux693 + aux695 - aux698)<=0)
2785 -2796 0
2786 -2797 0
2779 -2796 0
2779 2785 -2797 0
2779 2786 -2799 0
2780 -2797 0
2780 2785 -2799 0
2780 2786 -2801 0
c (0<=(aux693 + aux695 - aux698))
-2786 2801 0
-2785 2799 0
-2780 2801 0
-2780 -2786 2799 0
-2780 -2785 2797 0
-2779 2799 0
-2779 -2786 2797 0
-2779 -2785 2796 0
c ((SATLiteral(336) - aux699 + SATLiteral(606))<=0)
-606 -2803 0
-336 -2803 0
-336 -606 -2804 0
c (0<=(SATLiteral(336) - aux699 + SATLiteral(606)))
606 2804 0
336 2804 0
336 606 2803 0
c ((SATLiteral(1011) - aux700 + SATLiteral(876))<=0)
-876 -2806 0
-1011 -2806 0
-1011 -876 -2807 0
c (0<=(SATLiteral(1011) - aux700 + SATLiteral(876)))
876 2807 0
1011 2807 0
1011 876 2806 0
c (( - aux701 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2809 0
-741 -2809 0
-741 -201 -2810 0
c (0<=( - aux701 + SATLiteral(741) + SATLiteral(201)))
201 2810 0
741 2810 0
741 201 2809 0
c (( - aux702 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2812 0
-471 -2812 0
-471 -1146 -2813 0
c (0<=( - aux702 + SATLiteral(471) + SATLiteral(1146)))
1146 2813 0
471 2813 0
471 1146 2812 0
c ((aux702 - aux703 + SATLiteral(66))<=0)
2812 -2815 0
2813 -2816 0
-66 -2815 0
-66 2812 -2816 0
-66 2813 -2818 0
c (0<=(aux702 - aux703 + SATLiteral(66)))
-2813 2818 0
-2812 2816 0
66 2818 0
66 -2813 2816 0
66 -2812 2815 0
c ((aux699 + aux701 - aux704)<=0)
2809 -2820 0
2810 -2821 0
2803 -2820 0
2803 2809 -2821 0
2803 2810 -2823 0
2804 -2821 0
2804 2809 -2823 0
2804 2810 -2825 0
c (0<=(aux699 + aux701 - aux704))
-2810 2825 0
-2809 2823 0
-2804 2825 0
-2804 -2810 2823 0
-2804 -2809 2821 0
-2803 2823 0
-2803 -2810 2821 0
-2803 -2809 2820 0
c ((SATLiteral(338) - aux705 + SATLiteral(608))<=0)
-608 -2827 0
-338 -2827 0
-338 -608 -2828 0
c (0<=(SATLiteral(338) - aux705 + SATLiteral(608)))
608 2828 0
338 2828 0
338 608 2827 0
c ((SATLiteral(1013) - aux706 + SATLiteral(878))<=0)
-878 -2830 0
-1013 -2830 0
-1013 -878 -2831 0
c (0<=(SATLiteral(1013) - aux706 + SATLiteral(878)))
878 2831 0
1013 2831 0
1013 878 2830 0
c (( - aux707 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2833 0
-743 -2833 0
-743 -203 -2834 0
c (0<=( - aux707 + SATLiteral(743) + SATLiteral(203)))
203 2834 0
743 2834 0
743 203 2833 0
c (( - aux708 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2836 0
-473 -2836 0
-473 -1148 -2837 0
c (0<=( - aux708 + SATLiteral(473) + SATLiteral(1148)))
1148 2837 0
473 2837 0
473 1148 2836 0
c ((aux708 - aux709 + SATLiteral(68))<=0)
2836 -2839 0
2837 -2840 0
-68 -2839 0
-68 2836 -2840 0
-68 2837 -2842 0
c (0<=(aux708 - aux709 + SATLiteral(68)))
-2837 2842 0
-2836 2840 0
68 2842 0
68 -2837 2840 0
68 -2836 2839 0
c ((aux705 + aux707 - aux710)<=0)
2833 -2844 0
2834 -2845 0
2827 -2844 0
2827 2833 -2845 0
2827 2834 -2847 0
2828 -2845 0
2828 2833 -2847 0
2828 2834 -2849 0
c (0<=(aux705 + aux707 - aux710))
-2834 2849 0
-2833 2847 0
-2828 2849 0
-2828 -2834 2847 0
-2828 -2833 2845 0
-2827 2847 0
-2827 -2834 2845 0
-2827 -2833 2844 0
c ((SATLiteral(340) - aux711 + SATLiteral(610))<=0)
-610 -2851 0
-340 -2851 0
-340 -610 -2852 0
c (0<=(SATLiteral(340) - aux711 + SATLiteral(610)))
610 2852 0
340 2852 0
340 610 2851 0
c ((SATLiteral(1015) - aux712 + SATLiteral(880))<=0)
-880 -2854 0
-1015 -2854 0
-1015 -880 -2855 0
c (0<=(SATLiteral(1015) - aux712 + SATLiteral(880)))
880 2855 0
1015 2855 0
1015 880 2854 0
c (( - aux713 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2857 0
-745 -2857 0
-745 -205 -2858 0
c (0<=( - aux713 + SATLiteral(745) + SATLiteral(205)))
205 2858 0
745 2858 0
745 205 2857 0
c (( - aux714 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2860 0
-475 -2860 0
-475 -1150 -2861 0
c (0<=( - aux714 + SATLiteral(475) + SATLiteral(1150)))
1150 2861 0
475 2861 0
475 1150 2860 0
c ((aux714 - aux715 + SATLiteral(70))<=0)
2860 -2863 0
2861 -2864 0
-70 -2863 0
-70 2860 -2864 0
-70 2861 -2866 0
c (0<=(aux714 - aux715 + SATLiteral(70)))
-2861 2866 0
-2860 2864 0
70 2866 0
70 -2861 2864 0
70 -2860 2863 0
c ((aux711 + aux713 - aux716)<=0)
2857 -2868 0
2858 -2869 0
2851 -2868 0
2851 2857 -2869 0
2851 2858 -2871 0
2852 -2869 0
2852 2857 -2871 0
2852 2858 -2873 0
c (0<=(aux711 + aux713 - aux716))
-2858 2873 0
-2857 2871 0
-2852 2873 0
-2852 -2858 2871 0
-2852 -2857 2869 0
-2851 2871 0
-2851 -2858 2869 0
-2851 -2857 2868 0
c ((SATLiteral(342) - aux717 + SATLiteral(612))<=0)
-612 -2875 0
-342 -2875 0
-342 -612 -2876 0
c (0<=(SATLiteral(342) - aux717 + SATLiteral(612)))
612 2876 0
342 2876 0
342 612 2875 0
c ((SATLiteral(1017) - aux718 + SATLiteral(882))<=0)
-882 -2878 0
-1017 -2878 0
-1017 -882 -2879 0
c (0<=(SATLiteral(1017) - aux718 + SATLiteral(882)))
882 2879 0
1017 2879 0
1017 882 2878 0
c (( - aux719 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -2881 0
-747 -2881 0
-747 -207 -2882 0
c (0<=( - aux719 + SATLiteral(747) + SATLiteral(207)))
207 2882 0
747 2882 0
747 207 2881 0
c (( - aux720 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -2884 0
-477 -2884 0
-477 -1152 -2885 0
c (0<=( - aux720 + SATLiteral(477) + SATLiteral(1152)))
1152 2885 0
477 2885 0
477 1152 2884 0
c ((aux720 - aux721 + SATLiteral(72))<=0)
2884 -2887 0
2885 -2888 0
-72 -2887 0
-72 2884 -2888 0
-72 2885 -2890 0
c (0<=(aux720 - aux721 + SATLiteral(72)))
-2885 2890 0
-2884 2888 0
72 2890 0
72 -2885 2888 0
72 -2884 2887 0
c ((aux717 + aux719 - aux722)<=0)
2881 -2892 0
2882 -2893 0
2875 -2892 0
2875 2881 -2893 0
2875 2882 -2895 0
2876 -2893 0
2876 2881 -2895 0
2876 2882 -2897 0
c (0<=(aux717 + aux719 - aux722))
-2882 2897 0
-2881 2895 0
-2876 2897 0
-2876 -2882 2895 0
-2876 -2881 2893 0
-2875 2895 0
-2875 -2882 2893 0
-2875 -2881 2892 0
c ((SATLiteral(344) - aux723 + SATLiteral(614))<=0)
-614 -2899 0
-344 -2899 0
-344 -614 -2900 0
c (0<=(SATLiteral(344) - aux723 + SATLiteral(614)))
614 2900 0
344 2900 0
344 614 2899 0
c ((SATLiteral(1019) - aux724 + SATLiteral(884))<=0)
-884 -2902 0
-1019 -2902 0
-1019 -884 -2903 0
c (0<=(SATLiteral(1019) - aux724 + SATLiteral(884)))
884 2903 0
1019 2903 0
1019 884 2902 0
c (( - aux725 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -2905 0
-749 -2905 0
-749 -209 -2906 0
c (0<=( - aux725 + SATLiteral(749) + SATLiteral(209)))
209 2906 0
749 2906 0
749 209 2905 0
c (( - aux726 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -2908 0
-479 -2908 0
-479 -1154 -2909 0
c (0<=( - aux726 + SATLiteral(479) + SATLiteral(1154)))
1154 2909 0
479 2909 0
479 1154 2908 0
c ((aux726 - aux727 + SATLiteral(74))<=0)
2908 -2911 0
2909 -2912 0
-74 -2911 0
-74 2908 -2912 0
-74 2909 -2914 0
c (0<=(aux726 - aux727 + SATLiteral(74)))
-2909 2914 0
-2908 2912 0
74 2914 0
74 -2909 2912 0
74 -2908 2911 0
c ((aux723 + aux725 - aux728)<=0)
2905 -2916 0
2906 -2917 0
2899 -2916 0
2899 2905 -2917 0
2899 2906 -2919 0
2900 -2917 0
2900 2905 -2919 0
2900 2906 -2921 0
c (0<=(aux723 + aux725 - aux728))
-2906 2921 0
-2905 2919 0
-2900 2921 0
-2900 -2906 2919 0
-2900 -2905 2917 0
-2899 2919 0
-2899 -2906 2917 0
-2899 -2905 2916 0
c ((SATLiteral(346) - aux729 + SATLiteral(616))<=0)
-616 -2923 0
-346 -2923 0
-346 -616 -2924 0
c (0<=(SATLiteral(346) - aux729 + SATLiteral(616)))
616 2924 0
346 2924 0
346 616 2923 0
c ((SATLiteral(1021) - aux730 + SATLiteral(886))<=0)
-886 -2926 0
-1021 -2926 0
-1021 -886 -2927 0
c (0<=(SATLiteral(1021) - aux730 + SATLiteral(886)))
886 2927 0
1021 2927 0
1021 886 2926 0
c (( - aux731 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -2929 0
-751 -2929 0
-751 -211 -2930 0
c (0<=( - aux731 + SATLiteral(751) + SATLiteral(211)))
211 2930 0
751 2930 0
751 211 2929 0
c (( - aux732 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -2932 0
-481 -2932 0
-481 -1156 -2933 0
c (0<=( - aux732 + SATLiteral(481) + SATLiteral(1156)))
1156 2933 0
481 2933 0
481 1156 2932 0
c ((aux732 - aux733 + SATLiteral(76))<=0)
2932 -2935 0
2933 -2936 0
-76 -2935 0
-76 2932 -2936 0
-76 2933 -2938 0
c (0<=(aux732 - aux733 + SATLiteral(76)))
-2933 2938 0
-2932 2936 0
76 2938 0
76 -2933 2936 0
76 -2932 2935 0
c ((aux729 + aux731 - aux734)<=0)
2929 -2940 0
2930 -2941 0
2923 -2940 0
2923 2929 -2941 0
2923 2930 -2943 0
2924 -2941 0
2924 2929 -2943 0
2924 2930 -2945 0
c (0<=(aux729 + aux731 - aux734))
-2930 2945 0
-2929 2943 0
-2924 2945 0
-2924 -2930 2943 0
-2924 -2929 2941 0
-2923 2943 0
-2923 -2930 2941 0
-2923 -2929 2940 0
c ((SATLiteral(-345) - aux735 + SATLiteral(-615))<=0)
615 -2947 0
345 -2947 0
345 615 -2948 0
c (0<=(SATLiteral(-345) - aux735 + SATLiteral(-615)))
-615 2948 0
-345 2948 0
-345 -615 2947 0
c ((SATLiteral(-1020) - aux736 + SATLiteral(-885))<=0)
885 -2950 0
1020 -2950 0
1020 885 -2951 0
c (0<=(SATLiteral(-1020) - aux736 + SATLiteral(-885)))
-885 2951 0
-1020 2951 0
-1020 -885 2950 0
c (( - aux737 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -2953 0
750 -2953 0
750 210 -2954 0
c (0<=( - aux737 + SATLiteral(-750) + SATLiteral(-210)))
-210 2954 0
-750 2954 0
-750 -210 2953 0
c (( - aux738 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -2956 0
480 -2956 0
480 1155 -2957 0
c (0<=( - aux738 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 2957 0
-480 2957 0
-480 -1155 2956 0
c ((aux738 - aux739 + SATLiteral(-75))<=0)
2956 -2959 0
2957 -2960 0
75 -2959 0
75 2956 -2960 0
75 2957 -2962 0
c (0<=(aux738 - aux739 + SATLiteral(-75)))
-2957 2962 0
-2956 2960 0
-75 2962 0
-75 -2957 2960 0
-75 -2956 2959 0
c ((aux735 + aux737 - aux740)<=0)
2953 -2964 0
2954 -2965 0
2947 -2964 0
2947 2953 -2965 0
2947 2954 -2967 0
2948 -2965 0
2948 2953 -2967 0
2948 2954 -2969 0
c (0<=(aux735 + aux737 - aux740))
-2954 2969 0
-2953 2967 0
-2948 2969 0
-2948 -2954 2967 0
-2948 -2953 2965 0
-2947 2967 0
-2947 -2954 2965 0
-2947 -2953 2964 0
c ((SATLiteral(347) - aux741 + SATLiteral(617))<=0)
-617 -2971 0
-347 -2971 0
-347 -617 -2972 0
c (0<=(SATLiteral(347) - aux741 + SATLiteral(617)))
617 2972 0
347 2972 0
347 617 2971 0
c ((SATLiteral(1022) - aux742 + SATLiteral(887))<=0)
-887 -2974 0
-1022 -2974 0
-1022 -887 -2975 0
c (0<=(SATLiteral(1022) - aux742 + SATLiteral(887)))
887 2975 0
1022 2975 0
1022 887 2974 0
c (( - aux743 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -2977 0
-752 -2977 0
-752 -212 -2978 0
c (0<=( - aux743 + SATLiteral(752) + SATLiteral(212)))
212 2978 0
752 2978 0
752 212 2977 0
c (( - aux744 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -2980 0
-482 -2980 0
-482 -1157 -2981 0
c (0<=( - aux744 + SATLiteral(482) + SATLiteral(1157)))
1157 2981 0
482 2981 0
482 1157 2980 0
c ((aux744 - aux745 + SATLiteral(77))<=0)
2980 -2983 0
2981 -2984 0
-77 -2983 0
-77 2980 -2984 0
-77 2981 -2986 0
c (0<=(aux744 - aux745 + SATLiteral(77)))
-2981 2986 0
-2980 2984 0
77 2986 0
77 -2981 2984 0
77 -2980 2983 0
c ((aux741 + aux743 - aux746)<=0)
2977 -2988 0
2978 -2989 0
2971 -2988 0
2971 2977 -2989 0
2971 2978 -2991 0
2972 -2989 0
2972 2977 -2991 0
2972 2978 -2993 0
c (0<=(aux741 + aux743 - aux746))
-2978 2993 0
-2977 2991 0
-2972 2993 0
-2972 -2978 2991 0
-2972 -2977 2989 0
-2971 2991 0
-2971 -2978 2989 0
-2971 -2977 2988 0
c ((SATLiteral(349) - aux747 + SATLiteral(619))<=0)
-619 -2995 0
-349 -2995 0
-349 -619 -2996 0
c (0<=(SATLiteral(349) - aux747 + SATLiteral(619)))
619 2996 0
349 2996 0
349 619 2995 0
c ((SATLiteral(1024) - aux748 + SATLiteral(889))<=0)
-889 -2998 0
-1024 -2998 0
-1024 -889 -2999 0
c (0<=(SATLiteral(1024) - aux748 + SATLiteral(889)))
889 2999 0
1024 2999 0
1024 889 2998 0
c (( - aux749 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3001 0
-754 -3001 0
-754 -214 -3002 0
c (0<=( - aux749 + SATLiteral(754) + SATLiteral(214)))
214 3002 0
754 3002 0
754 214 3001 0
c (( - aux750 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3004 0
-484 -3004 0
-484 -1159 -3005 0
c (0<=( - aux750 + SATLiteral(484) + SATLiteral(1159)))
1159 3005 0
484 3005 0
484 1159 3004 0
c ((aux750 - aux751 + SATLiteral(79))<=0)
3004 -3007 0
3005 -3008 0
-79 -3007 0
-79 3004 -3008 0
-79 3005 -3010 0
c (0<=(aux750 - aux751 + SATLiteral(79)))
-3005 3010 0
-3004 3008 0
79 3010 0
79 -3005 3008 0
79 -3004 3007 0
c ((aux747 + aux749 - aux752)<=0)
3001 -3012 0
3002 -3013 0
2995 -3012 0
2995 3001 -3013 0
2995 3002 -3015 0
2996 -3013 0
2996 3001 -3015 0
2996 3002 -3017 0
c (0<=(aux747 + aux749 - aux752))
-3002 3017 0
-3001 3015 0
-2996 3017 0
-2996 -3002 3015 0
-2996 -3001 3013 0
-2995 3015 0
-2995 -3002 3013 0
-2995 -3001 3012 0
c ((SATLiteral(351) - aux753 + SATLiteral(621))<=0)
-621 -3019 0
-351 -3019 0
-351 -621 -3020 0
c (0<=(SATLiteral(351) - aux753 + SATLiteral(621)))
621 3020 0
351 3020 0
351 621 3019 0
c ((SATLiteral(1026) - aux754 + SATLiteral(891))<=0)
-891 -3022 0
-1026 -3022 0
-1026 -891 -3023 0
c (0<=(SATLiteral(1026) - aux754 + SATLiteral(891)))
891 3023 0
1026 3023 0
1026 891 3022 0
c (( - aux755 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3025 0
-756 -3025 0
-756 -216 -3026 0
c (0<=( - aux755 + SATLiteral(756) + SATLiteral(216)))
216 3026 0
756 3026 0
756 216 3025 0
c (( - aux756 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3028 0
-486 -3028 0
-486 -1161 -3029 0
c (0<=( - aux756 + SATLiteral(486) + SATLiteral(1161)))
1161 3029 0
486 3029 0
486 1161 3028 0
c ((aux756 - aux757 + SATLiteral(81))<=0)
3028 -3031 0
3029 -3032 0
-81 -3031 0
-81 3028 -3032 0
-81 3029 -3034 0
c (0<=(aux756 - aux757 + SATLiteral(81)))
-3029 3034 0
-3028 3032 0
81 3034 0
81 -3029 3032 0
81 -3028 3031 0
c ((aux753 + aux755 - aux758)<=0)
3025 -3036 0
3026 -3037 0
3019 -3036 0
3019 3025 -3037 0
3019 3026 -3039 0
3020 -3037 0
3020 3025 -3039 0
3020 3026 -3041 0
c (0<=(aux753 + aux755 - aux758))
-3026 3041 0
-3025 3039 0
-3020 3041 0
-3020 -3026 3039 0
-3020 -3025 3037 0
-3019 3039 0
-3019 -3026 3037 0
-3019 -3025 3036 0
c ((SATLiteral(353) - aux759 + SATLiteral(623))<=0)
-623 -3043 0
-353 -3043 0
-353 -623 -3044 0
c (0<=(SATLiteral(353) - aux759 + SATLiteral(623)))
623 3044 0
353 3044 0
353 623 3043 0
c ((SATLiteral(1028) - aux760 + SATLiteral(893))<=0)
-893 -3046 0
-1028 -3046 0
-1028 -893 -3047 0
c (0<=(SATLiteral(1028) - aux760 + SATLiteral(893)))
893 3047 0
1028 3047 0
1028 893 3046 0
c (( - aux761 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3049 0
-758 -3049 0
-758 -218 -3050 0
c (0<=( - aux761 + SATLiteral(758) + SATLiteral(218)))
218 3050 0
758 3050 0
758 218 3049 0
c (( - aux762 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3052 0
-488 -3052 0
-488 -1163 -3053 0
c (0<=( - aux762 + SATLiteral(488) + SATLiteral(1163)))
1163 3053 0
488 3053 0
488 1163 3052 0
c ((aux762 - aux763 + SATLiteral(83))<=0)
3052 -3055 0
3053 -3056 0
-83 -3055 0
-83 3052 -3056 0
-83 3053 -3058 0
c (0<=(aux762 - aux763 + SATLiteral(83)))
-3053 3058 0
-3052 3056 0
83 3058 0
83 -3053 3056 0
83 -3052 3055 0
c ((aux759 + aux761 - aux764)<=0)
3049 -3060 0
3050 -3061 0
3043 -3060 0
3043 3049 -3061 0
3043 3050 -3063 0
3044 -3061 0
3044 3049 -3063 0
3044 3050 -3065 0
c (0<=(aux759 + aux761 - aux764))
-3050 3065 0
-3049 3063 0
-3044 3065 0
-3044 -3050 3063 0
-3044 -3049 3061 0
-3043 3063 0
-3043 -3050 3061 0
-3043 -3049 3060 0
c ((SATLiteral(355) - aux765 + SATLiteral(625))<=0)
-625 -3067 0
-355 -3067 0
-355 -625 -3068 0
c (0<=(SATLiteral(355) - aux765 + SATLiteral(625)))
625 3068 0
355 3068 0
355 625 3067 0
c ((SATLiteral(1030) - aux766 + SATLiteral(895))<=0)
-895 -3070 0
-1030 -3070 0
-1030 -895 -3071 0
c (0<=(SATLiteral(1030) - aux766 + SATLiteral(895)))
895 3071 0
1030 3071 0
1030 895 3070 0
c (( - aux767 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3073 0
-760 -3073 0
-760 -220 -3074 0
c (0<=( - aux767 + SATLiteral(760) + SATLiteral(220)))
220 3074 0
760 3074 0
760 220 3073 0
c (( - aux768 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3076 0
-490 -3076 0
-490 -1165 -3077 0
c (0<=( - aux768 + SATLiteral(490) + SATLiteral(1165)))
1165 3077 0
490 3077 0
490 1165 3076 0
c ((aux768 - aux769 + SATLiteral(85))<=0)
3076 -3079 0
3077 -3080 0
-85 -3079 0
-85 3076 -3080 0
-85 3077 -3082 0
c (0<=(aux768 - aux769 + SATLiteral(85)))
-3077 3082 0
-3076 3080 0
85 3082 0
85 -3077 3080 0
85 -3076 3079 0
c ((aux765 + aux767 - aux770)<=0)
3073 -3084 0
3074 -3085 0
3067 -3084 0
3067 3073 -3085 0
3067 3074 -3087 0
3068 -3085 0
3068 3073 -3087 0
3068 3074 -3089 0
c (0<=(aux765 + aux767 - aux770))
-3074 3089 0
-3073 3087 0
-3068 3089 0
-3068 -3074 3087 0
-3068 -3073 3085 0
-3067 3087 0
-3067 -3074 3085 0
-3067 -3073 3084 0
c ((SATLiteral(357) - aux771 + SATLiteral(627))<=0)
-627 -3091 0
-357 -3091 0
-357 -627 -3092 0
c (0<=(SATLiteral(357) - aux771 + SATLiteral(627)))
627 3092 0
357 3092 0
357 627 3091 0
c ((SATLiteral(1032) - aux772 + SATLiteral(897))<=0)
-897 -3094 0
-1032 -3094 0
-1032 -897 -3095 0
c (0<=(SATLiteral(1032) - aux772 + SATLiteral(897)))
897 3095 0
1032 3095 0
1032 897 3094 0
c (( - aux773 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3097 0
-762 -3097 0
-762 -222 -3098 0
c (0<=( - aux773 + SATLiteral(762) + SATLiteral(222)))
222 3098 0
762 3098 0
762 222 3097 0
c (( - aux774 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3100 0
-492 -3100 0
-492 -1167 -3101 0
c (0<=( - aux774 + SATLiteral(492) + SATLiteral(1167)))
1167 3101 0
492 3101 0
492 1167 3100 0
c ((aux774 - aux775 + SATLiteral(87))<=0)
3100 -3103 0
3101 -3104 0
-87 -3103 0
-87 3100 -3104 0
-87 3101 -3106 0
c (0<=(aux774 - aux775 + SATLiteral(87)))
-3101 3106 0
-3100 3104 0
87 3106 0
87 -3101 3104 0
87 -3100 3103 0
c ((aux771 + aux773 - aux776)<=0)
3097 -3108 0
3098 -3109 0
3091 -3108 0
3091 3097 -3109 0
3091 3098 -3111 0
3092 -3109 0
3092 3097 -3111 0
3092 3098 -3113 0
c (0<=(aux771 + aux773 - aux776))
-3098 3113 0
-3097 3111 0
-3092 3113 0
-3092 -3098 3111 0
-3092 -3097 3109 0
-3091 3111 0
-3091 -3098 3109 0
-3091 -3097 3108 0
c ((SATLiteral(359) - aux777 + SATLiteral(629))<=0)
-629 -3115 0
-359 -3115 0
-359 -629 -3116 0
c (0<=(SATLiteral(359) - aux777 + SATLiteral(629)))
629 3116 0
359 3116 0
359 629 3115 0
c ((SATLiteral(1034) - aux778 + SATLiteral(899))<=0)
-899 -3118 0
-1034 -3118 0
-1034 -899 -3119 0
c (0<=(SATLiteral(1034) - aux778 + SATLiteral(899)))
899 3119 0
1034 3119 0
1034 899 3118 0
c (( - aux779 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3121 0
-764 -3121 0
-764 -224 -3122 0
c (0<=( - aux779 + SATLiteral(764) + SATLiteral(224)))
224 3122 0
764 3122 0
764 224 3121 0
c (( - aux780 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3124 0
-494 -3124 0
-494 -1169 -3125 0
c (0<=( - aux780 + SATLiteral(494) + SATLiteral(1169)))
1169 3125 0
494 3125 0
494 1169 3124 0
c ((aux780 - aux781 + SATLiteral(89))<=0)
3124 -3127 0
3125 -3128 0
-89 -3127 0
-89 3124 -3128 0
-89 3125 -3130 0
c (0<=(aux780 - aux781 + SATLiteral(89)))
-3125 3130 0
-3124 3128 0
89 3130 0
89 -3125 3128 0
89 -3124 3127 0
c ((aux777 + aux779 - aux782)<=0)
3121 -3132 0
3122 -3133 0
3115 -3132 0
3115 3121 -3133 0
3115 3122 -3135 0
3116 -3133 0
3116 3121 -3135 0
3116 3122 -3137 0
c (0<=(aux777 + aux779 - aux782))
-3122 3137 0
-3121 3135 0
-3116 3137 0
-3116 -3122 3135 0
-3116 -3121 3133 0
-3115 3135 0
-3115 -3122 3133 0
-3115 -3121 3132 0
c ((SATLiteral(361) - aux783 + SATLiteral(631))<=0)
-631 -3139 0
-361 -3139 0
-361 -631 -3140 0
c (0<=(SATLiteral(361) - aux783 + SATLiteral(631)))
631 3140 0
361 3140 0
361 631 3139 0
c ((SATLiteral(1036) - aux784 + SATLiteral(901))<=0)
-901 -3142 0
-1036 -3142 0
-1036 -901 -3143 0
c (0<=(SATLiteral(1036) - aux784 + SATLiteral(901)))
901 3143 0
1036 3143 0
1036 901 3142 0
c (( - aux785 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3145 0
-766 -3145 0
-766 -226 -3146 0
c (0<=( - aux785 + SATLiteral(766) + SATLiteral(226)))
226 3146 0
766 3146 0
766 226 3145 0
c (( - aux786 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3148 0
-496 -3148 0
-496 -1171 -3149 0
c (0<=( - aux786 + SATLiteral(496) + SATLiteral(1171)))
1171 3149 0
496 3149 0
496 1171 3148 0
c ((aux786 - aux787 + SATLiteral(91))<=0)
3148 -3151 0
3149 -3152 0
-91 -3151 0
-91 3148 -3152 0
-91 3149 -3154 0
c (0<=(aux786 - aux787 + SATLiteral(91)))
-3149 3154 0
-3148 3152 0
91 3154 0
91 -3149 3152 0
91 -3148 3151 0
c ((aux783 + aux785 - aux788)<=0)
3145 -3156 0
3146 -3157 0
3139 -3156 0
3139 3145 -3157 0
3139 3146 -3159 0
3140 -3157 0
3140 3145 -3159 0
3140 3146 -3161 0
c (0<=(aux783 + aux785 - aux788))
-3146 3161 0
-3145 3159 0
-3140 3161 0
-3140 -3146 3159 0
-3140 -3145 3157 0
-3139 3159 0
-3139 -3146 3157 0
-3139 -3145 3156 0
c ((SATLiteral(-360) - aux789 + SATLiteral(-630))<=0)
630 -3163 0
360 -3163 0
360 630 -3164 0
c (0<=(SATLiteral(-360) - aux789 + SATLiteral(-630)))
-630 3164 0
-360 3164 0
-360 -630 3163 0
c ((SATLiteral(-1035) - aux790 + SATLiteral(-900))<=0)
900 -3166 0
1035 -3166 0
1035 900 -3167 0
c (0<=(SATLiteral(-1035) - aux790 + SATLiteral(-900)))
-900 3167 0
-1035 3167 0
-1035 -900 3166 0
c (( - aux791 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3169 0
765 -3169 0
765 225 -3170 0
c (0<=( - aux791 + SATLiteral(-765) + SATLiteral(-225)))
-225 3170 0
-765 3170 0
-765 -225 3169 0
c (( - aux792 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3172 0
495 -3172 0
495 1170 -3173 0
c (0<=( - aux792 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3173 0
-495 3173 0
-495 -1170 3172 0
c ((aux792 - aux793 + SATLiteral(-90))<=0)
3172 -3175 0
3173 -3176 0
90 -3175 0
90 3172 -3176 0
90 3173 -3178 0
c (0<=(aux792 - aux793 + SATLiteral(-90)))
-3173 3178 0
-3172 3176 0
-90 3178 0
-90 -3173 3176 0
-90 -3172 3175 0
c ((aux789 + aux791 - aux794)<=0)
3169 -3180 0
3170 -3181 0
3163 -3180 0
3163 3169 -3181 0
3163 3170 -3183 0
3164 -3181 0
3164 3169 -3183 0
3164 3170 -3185 0
c (0<=(aux789 + aux791 - aux794))
-3170 3185 0
-3169 3183 0
-3164 3185 0
-3164 -3170 3183 0
-3164 -3169 3181 0
-3163 3183 0
-3163 -3170 3181 0
-3163 -3169 3180 0
c ((SATLiteral(362) - aux795 + SATLiteral(632))<=0)
-632 -3187 0
-362 -3187 0
-362 -632 -3188 0
c (0<=(SATLiteral(362) - aux795 + SATLiteral(632)))
632 3188 0
362 3188 0
362 632 3187 0
c ((SATLiteral(1037) - aux796 + SATLiteral(902))<=0)
-902 -3190 0
-1037 -3190 0
-1037 -902 -3191 0
c (0<=(SATLiteral(1037) - aux796 + SATLiteral(902)))
902 3191 0
1037 3191 0
1037 902 3190 0
c (( - aux797 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3193 0
-767 -3193 0
-767 -227 -3194 0
c (0<=( - aux797 + SATLiteral(767) + SATLiteral(227)))
227 3194 0
767 3194 0
767 227 3193 0
c (( - aux798 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3196 0
-497 -3196 0
-497 -1172 -3197 0
c (0<=( - aux798 + SATLiteral(497) + SATLiteral(1172)))
1172 3197 0
497 3197 0
497 1172 3196 0
c ((aux798 - aux799 + SATLiteral(92))<=0)
3196 -3199 0
3197 -3200 0
-92 -3199 0
-92 3196 -3200 0
-92 3197 -3202 0
c (0<=(aux798 - aux799 + SATLiteral(92)))
-3197 3202 0
-3196 3200 0
92 3202 0
92 -3197 3200 0
92 -3196 3199 0
c ((aux795 + aux797 - aux800)<=0)
3193 -3204 0
3194 -3205 0
3187 -3204 0
3187 3193 -3205 0
3187 3194 -3207 0
3188 -3205 0
3188 3193 -3207 0
3188 3194 -3209 0
c (0<=(aux795 + aux797 - aux800))
-3194 3209 0
-3193 3207 0
-3188 3209 0
-3188 -3194 3207 0
-3188 -3193 3205 0
-3187 3207 0
-3187 -3194 3205 0
-3187 -3193 3204 0
c ((SATLiteral(364) - aux801 + SATLiteral(634))<=0)
-634 -3211 0
-364 -3211 0
-364 -634 -3212 0
c (0<=(SATLiteral(364) - aux801 + SATLiteral(634)))
634 3212 0
364 3212 0
364 634 3211 0
c ((SATLiteral(1039) - aux802 + SATLiteral(904))<=0)
-904 -3214 0
-1039 -3214 0
-1039 -904 -3215 0
c (0<=(SATLiteral(1039) - aux802 + SATLiteral(904)))
904 3215 0
1039 3215 0
1039 904 3214 0
c (( - aux803 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3217 0
-769 -3217 0
-769 -229 -3218 0
c (0<=( - aux803 + SATLiteral(769) + SATLiteral(229)))
229 3218 0
769 3218 0
769 229 3217 0
c (( - aux804 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3220 0
-499 -3220 0
-499 -1174 -3221 0
c (0<=( - aux804 + SATLiteral(499) + SATLiteral(1174)))
1174 3221 0
499 3221 0
499 1174 3220 0
c ((aux804 - aux805 + SATLiteral(94))<=0)
3220 -3223 0
3221 -3224 0
-94 -3223 0
-94 3220 -3224 0
-94 3221 -3226 0
c (0<=(aux804 - aux805 + SATLiteral(94)))
-3221 3226 0
-3220 3224 0
94 3226 0
94 -3221 3224 0
94 -3220 3223 0
c ((aux801 + aux803 - aux806)<=0)
3217 -3228 0
3218 -3229 0
3211 -3228 0
3211 3217 -3229 0
3211 3218 -3231 0
3212 -3229 0
3212 3217 -3231 0
3212 3218 -3233 0
c (0<=(aux801 + aux803 - aux806))
-3218 3233 0
-3217 3231 0
-3212 3233 0
-3212 -3218 3231 0
-3212 -3217 3229 0
-3211 3231 0
-3211 -3218 3229 0
-3211 -3217 3228 0
c ((SATLiteral(366) - aux807 + SATLiteral(636))<=0)
-636 -3235 0
-366 -3235 0
-366 -636 -3236 0
c (0<=(SATLiteral(366) - aux807 + SATLiteral(636)))
636 3236 0
366 3236 0
366 636 3235 0
c ((SATLiteral(1041) - aux808 + SATLiteral(906))<=0)
-906 -3238 0
-1041 -3238 0
-1041 -906 -3239 0
c (0<=(SATLiteral(1041) - aux808 + SATLiteral(906)))
906 3239 0
1041 3239 0
1041 906 3238 0
c (( - aux809 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3241 0
-771 -3241 0
-771 -231 -3242 0
c (0<=( - aux809 + SATLiteral(771) + SATLiteral(231)))
231 3242 0
771 3242 0
771 231 3241 0
c (( - aux810 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3244 0
-501 -3244 0
-501 -1176 -3245 0
c (0<=( - aux810 + SATLiteral(501) + SATLiteral(1176)))
1176 3245 0
501 3245 0
501 1176 3244 0
c ((aux810 - aux811 + SATLiteral(96))<=0)
3244 -3247 0
3245 -3248 0
-96 -3247 0
-96 3244 -3248 0
-96 3245 -3250 0
c (0<=(aux810 - aux811 + SATLiteral(96)))
-3245 3250 0
-3244 3248 0
96 3250 0
96 -3245 3248 0
96 -3244 3247 0
c ((aux807 + aux809 - aux812)<=0)
3241 -3252 0
3242 -3253 0
3235 -3252 0
3235 3241 -3253 0
3235 3242 -3255 0
3236 -3253 0
3236 3241 -3255 0
3236 3242 -3257 0
c (0<=(aux807 + aux809 - aux812))
-3242 3257 0
-3241 3255 0
-3236 3257 0
-3236 -3242 3255 0
-3236 -3241 3253 0
-3235 3255 0
-3235 -3242 3253 0
-3235 -3241 3252 0
c ((SATLiteral(368) - aux813 + SATLiteral(638))<=0)
-638 -3259 0
-368 -3259 0
-368 -638 -3260 0
c (0<=(SATLiteral(368) - aux813 + SATLiteral(638)))
638 3260 0
368 3260 0
368 638 3259 0
c ((SATLiteral(1043) - aux814 + SATLiteral(908))<=0)
-908 -3262 0
-1043 -3262 0
-1043 -908 -3263 0
c (0<=(SATLiteral(1043) - aux814 + SATLiteral(908)))
908 3263 0
1043 3263 0
1043 908 3262 0
c (( - aux815 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3265 0
-773 -3265 0
-773 -233 -3266 0
c (0<=( - aux815 + SATLiteral(773) + SATLiteral(233)))
233 3266 0
773 3266 0
773 233 3265 0
c (( - aux816 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3268 0
-503 -3268 0
-503 -1178 -3269 0
c (0<=( - aux816 + SATLiteral(503) + SATLiteral(1178)))
1178 3269 0
503 3269 0
503 1178 3268 0
c ((aux816 - aux817 + SATLiteral(98))<=0)
3268 -3271 0
3269 -3272 0
-98 -3271 0
-98 3268 -3272 0
-98 3269 -3274 0
c (0<=(aux816 - aux817 + SATLiteral(98)))
-3269 3274 0
-3268 3272 0
98 3274 0
98 -3269 3272 0
98 -3268 3271 0
c ((aux813 + aux815 - aux818)<=0)
3265 -3276 0
3266 -3277 0
3259 -3276 0
3259 3265 -3277 0
3259 3266 -3279 0
3260 -3277 0
3260 3265 -3279 0
3260 3266 -3281 0
c (0<=(aux813 + aux815 - aux818))
-3266 3281 0
-3265 3279 0
-3260 3281 0
-3260 -3266 3279 0
-3260 -3265 3277 0
-3259 3279 0
-3259 -3266 3277 0
-3259 -3265 3276 0
c ((SATLiteral(370) - aux819 + SATLiteral(640))<=0)
-640 -3283 0
-370 -3283 0
-370 -640 -3284 0
c (0<=(SATLiteral(370) - aux819 + SATLiteral(640)))
640 3284 0
370 3284 0
370 640 3283 0
c ((SATLiteral(1045) - aux820 + SATLiteral(910))<=0)
-910 -3286 0
-1045 -3286 0
-1045 -910 -3287 0
c (0<=(SATLiteral(1045) - aux820 + SATLiteral(910)))
910 3287 0
1045 3287 0
1045 910 3286 0
c (( - aux821 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3289 0
-775 -3289 0
-775 -235 -3290 0
c (0<=( - aux821 + SATLiteral(775) + SATLiteral(235)))
235 3290 0
775 3290 0
775 235 3289 0
c (( - aux822 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3292 0
-505 -3292 0
-505 -1180 -3293 0
c (0<=( - aux822 + SATLiteral(505) + SATLiteral(1180)))
1180 3293 0
505 3293 0
505 1180 3292 0
c ((aux822 - aux823 + SATLiteral(100))<=0)
3292 -3295 0
3293 -3296 0
-100 -3295 0
-100 3292 -3296 0
-100 3293 -3298 0
c (0<=(aux822 - aux823 + SATLiteral(100)))
-3293 3298 0
-3292 3296 0
100 3298 0
100 -3293 3296 0
100 -3292 3295 0
c ((aux819 + aux821 - aux824)<=0)
3289 -3300 0
3290 -3301 0
3283 -3300 0
3283 3289 -3301 0
3283 3290 -3303 0
3284 -3301 0
3284 3289 -3303 0
3284 3290 -3305 0
c (0<=(aux819 + aux821 - aux824))
-3290 3305 0
-3289 3303 0
-3284 3305 0
-3284 -3290 3303 0
-3284 -3289 3301 0
-3283 3303 0
-3283 -3290 3301 0
-3283 -3289 3300 0
c ((SATLiteral(372) - aux825 + SATLiteral(642))<=0)
-642 -3307 0
-372 -3307 0
-372 -642 -3308 0
c (0<=(SATLiteral(372) - aux825 + SATLiteral(642)))
642 3308 0
372 3308 0
372 642 3307 0
c ((SATLiteral(1047) - aux826 + SATLiteral(912))<=0)
-912 -3310 0
-1047 -3310 0
-1047 -912 -3311 0
c (0<=(SATLiteral(1047) - aux826 + SATLiteral(912)))
912 3311 0
1047 3311 0
1047 912 3310 0
c (( - aux827 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3313 0
-777 -3313 0
-777 -237 -3314 0
c (0<=( - aux827 + SATLiteral(777) + SATLiteral(237)))
237 3314 0
777 3314 0
777 237 3313 0
c (( - aux828 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3316 0
-507 -3316 0
-507 -1182 -3317 0
c (0<=( - aux828 + SATLiteral(507) + SATLiteral(1182)))
1182 3317 0
507 3317 0
507 1182 3316 0
c ((aux828 - aux829 + SATLiteral(102))<=0)
3316 -3319 0
3317 -3320 0
-102 -3319 0
-102 3316 -3320 0
-102 3317 -3322 0
c (0<=(aux828 - aux829 + SATLiteral(102)))
-3317 3322 0
-3316 3320 0
102 3322 0
102 -3317 3320 0
102 -3316 3319 0
c ((aux825 + aux827 - aux830)<=0)
3313 -3324 0
3314 -3325 0
3307 -3324 0
3307 3313 -3325 0
3307 3314 -3327 0
3308 -3325 0
3308 3313 -3327 0
3308 3314 -3329 0
c (0<=(aux825 + aux827 - aux830))
-3314 3329 0
-3313 3327 0
-3308 3329 0
-3308 -3314 3327 0
-3308 -3313 3325 0
-3307 3327 0
-3307 -3314 3325 0
-3307 -3313 3324 0
c ((SATLiteral(374) - aux831 + SATLiteral(644))<=0)
-644 -3331 0
-374 -3331 0
-374 -644 -3332 0
c (0<=(SATLiteral(374) - aux831 + SATLiteral(644)))
644 3332 0
374 3332 0
374 644 3331 0
c ((SATLiteral(1049) - aux832 + SATLiteral(914))<=0)
-914 -3334 0
-1049 -3334 0
-1049 -914 -3335 0
c (0<=(SATLiteral(1049) - aux832 + SATLiteral(914)))
914 3335 0
1049 3335 0
1049 914 3334 0
c (( - aux833 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3337 0
-779 -3337 0
-779 -239 -3338 0
c (0<=( - aux833 + SATLiteral(779) + SATLiteral(239)))
239 3338 0
779 3338 0
779 239 3337 0
c (( - aux834 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3340 0
-509 -3340 0
-509 -1184 -3341 0
c (0<=( - aux834 + SATLiteral(509) + SATLiteral(1184)))
1184 3341 0
509 3341 0
509 1184 3340 0
c ((aux834 - aux835 + SATLiteral(104))<=0)
3340 -3343 0
3341 -3344 0
-104 -3343 0
-104 3340 -3344 0
-104 3341 -3346 0
c (0<=(aux834 - aux835 + SATLiteral(104)))
-3341 3346 0
-3340 3344 0
104 3346 0
104 -3341 3344 0
104 -3340 3343 0
c ((aux831 + aux833 - aux836)<=0)
3337 -3348 0
3338 -3349 0
3331 -3348 0
3331 3337 -3349 0
3331 3338 -3351 0
3332 -3349 0
3332 3337 -3351 0
3332 3338 -3353 0
c (0<=(aux831 + aux833 - aux836))
-3338 3353 0
-3337 3351 0
-3332 3353 0
-3332 -3338 3351 0
-3332 -3337 3349 0
-3331 3351 0
-3331 -3338 3349 0
-3331 -3337 3348 0
c ((SATLiteral(376) - aux837 + SATLiteral(646))<=0)
-646 -3355 0
-376 -3355 0
-376 -646 -3356 0
c (0<=(SATLiteral(376) - aux837 + SATLiteral(646)))
646 3356 0
376 3356 0
376 646 3355 0
c ((SATLiteral(1051) - aux838 + SATLiteral(916))<=0)
-916 -3358 0
-1051 -3358 0
-1051 -916 -3359 0
c (0<=(SATLiteral(1051) - aux838 + SATLiteral(916)))
916 3359 0
1051 3359 0
1051 916 3358 0
c (( - aux839 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3361 0
-781 -3361 0
-781 -241 -3362 0
c (0<=( - aux839 + SATLiteral(781) + SATLiteral(241)))
241 3362 0
781 3362 0
781 241 3361 0
c (( - aux840 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3364 0
-511 -3364 0
-511 -1186 -3365 0
c (0<=( - aux840 + SATLiteral(511) + SATLiteral(1186)))
1186 3365 0
511 3365 0
511 1186 3364 0
c ((aux840 - aux841 + SATLiteral(106))<=0)
3364 -3367 0
3365 -3368 0
-106 -3367 0
-106 3364 -3368 0
-106 3365 -3370 0
c (0<=(aux840 - aux841 + SATLiteral(106)))
-3365 3370 0
-3364 3368 0
106 3370 0
106 -3365 3368 0
106 -3364 3367 0
c ((aux837 + aux839 - aux842)<=0)
3361 -3372 0
3362 -3373 0
3355 -3372 0
3355 3361 -3373 0
3355 3362 -3375 0
3356 -3373 0
3356 3361 -3375 0
3356 3362 -3377 0
c (0<=(aux837 + aux839 - aux842))
-3362 3377 0
-3361 3375 0
-3356 3377 0
-3356 -3362 3375 0
-3356 -3361 3373 0
-3355 3375 0
-3355 -3362 3373 0
-3355 -3361 3372 0
c ((SATLiteral(-375) - aux843 + SATLiteral(-645))<=0)
645 -3379 0
375 -3379 0
375 645 -3380 0
c (0<=(SATLiteral(-375) - aux843 + SATLiteral(-645)))
-645 3380 0
-375 3380 0
-375 -645 3379 0
c ((SATLiteral(-1050) - aux844 + SATLiteral(-915))<=0)
915 -3382 0
1050 -3382 0
1050 915 -3383 0
c (0<=(SATLiteral(-1050) - aux844 + SATLiteral(-915)))
-915 3383 0
-1050 3383 0
-1050 -915 3382 0
c (( - aux845 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3385 0
780 -3385 0
780 240 -3386 0
c (0<=( - aux845 + SATLiteral(-780) + SATLiteral(-240)))
-240 3386 0
-780 3386 0
-780 -240 3385 0
c (( - aux846 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3388 0
510 -3388 0
510 1185 -3389 0
c (0<=( - aux846 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3389 0
-510 3389 0
-510 -1185 3388 0
c ((aux846 - aux847 + SATLiteral(-105))<=0)
3388 -3391 0
3389 -3392 0
105 -3391 0
105 3388 -3392 0
105 3389 -3394 0
c (0<=(aux846 - aux847 + SATLiteral(-105)))
-3389 3394 0
-3388 3392 0
-105 3394 0
-105 -3389 3392 0
-105 -3388 3391 0
c ((aux843 + aux845 - aux848)<=0)
3385 -3396 0
3386 -3397 0
3379 -3396 0
3379 3385 -3397 0
3379 3386 -3399 0
3380 -3397 0
3380 3385 -3399 0
3380 3386 -3401 0
c (0<=(aux843 + aux845 - aux848))
-3386 3401 0
-3385 3399 0
-3380 3401 0
-3380 -3386 3399 0
-3380 -3385 3397 0
-3379 3399 0
-3379 -3386 3397 0
-3379 -3385 3396 0
c ((SATLiteral(377) - aux849 + SATLiteral(647))<=0)
-647 -3403 0
-377 -3403 0
-377 -647 -3404 0
c (0<=(SATLiteral(377) - aux849 + SATLiteral(647)))
647 3404 0
377 3404 0
377 647 3403 0
c ((SATLiteral(1052) - aux850 + SATLiteral(917))<=0)
-917 -3406 0
-1052 -3406 0
-1052 -917 -3407 0
c (0<=(SATLiteral(1052) - aux850 + SATLiteral(917)))
917 3407 0
1052 3407 0
1052 917 3406 0
c (( - aux851 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3409 0
-782 -3409 0
-782 -242 -3410 0
c (0<=( - aux851 + SATLiteral(782) + SATLiteral(242)))
242 3410 0
782 3410 0
782 242 3409 0
c (( - aux852 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3412 0
-512 -3412 0
-512 -1187 -3413 0
c (0<=( - aux852 + SATLiteral(512) + SATLiteral(1187)))
1187 3413 0
512 3413 0
512 1187 3412 0
c ((aux852 - aux853 + SATLiteral(107))<=0)
3412 -3415 0
3413 -3416 0
-107 -3415 0
-107 3412 -3416 0
-107 3413 -3418 0
c (0<=(aux852 - aux853 + SATLiteral(107)))
-3413 3418 0
-3412 3416 0
107 3418 0
107 -3413 3416 0
107 -3412 3415 0
c ((aux849 + aux851 - aux854)<=0)
3409 -3420 0
3410 -3421 0
3403 -3420 0
3403 3409 -3421 0
3403 3410 -3423 0
3404 -3421 0
3404 3409 -3423 0
3404 3410 -3425 0
c (0<=(aux849 + aux851 - aux854))
-3410 3425 0
-3409 3423 0
-3404 3425 0
-3404 -3410 3423 0
-3404 -3409 3421 0
-3403 3423 0
-3403 -3410 3421 0
-3403 -3409 3420 0
c ((SATLiteral(379) - aux855 + SATLiteral(649))<=0)
-649 -3427 0
-379 -3427 0
-379 -649 -3428 0
c (0<=(SATLiteral(379) - aux855 + SATLiteral(649)))
649 3428 0
379 3428 0
379 649 3427 0
c ((SATLiteral(1054) - aux856 + SATLiteral(919))<=0)
-919 -3430 0
-1054 -3430 0
-1054 -919 -3431 0
c (0<=(SATLiteral(1054) - aux856 + SATLiteral(919)))
919 3431 0
1054 3431 0
1054 919 3430 0
c (( - aux857 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3433 0
-784 -3433 0
-784 -244 -3434 0
c (0<=( - aux857 + SATLiteral(784) + SATLiteral(244)))
244 3434 0
784 3434 0
784 244 3433 0
c (( - aux858 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3436 0
-514 -3436 0
-514 -1189 -3437 0
c (0<=( - aux858 + SATLiteral(514) + SATLiteral(1189)))
1189 3437 0
514 3437 0
514 1189 3436 0
c ((aux858 - aux859 + SATLiteral(109))<=0)
3436 -3439 0
3437 -3440 0
-109 -3439 0
-109 3436 -3440 0
-109 3437 -3442 0
c (0<=(aux858 - aux859 + SATLiteral(109)))
-3437 3442 0
-3436 3440 0
109 3442 0
109 -3437 3440 0
109 -3436 3439 0
c ((aux855 + aux857 - aux860)<=0)
3433 -3444 0
3434 -3445 0
3427 -3444 0
3427 3433 -3445 0
3427 3434 -3447 0
3428 -3445 0
3428 3433 -3447 0
3428 3434 -3449 0
c (0<=(aux855 + aux857 - aux860))
-3434 3449 0
-3433 3447 0
-3428 3449 0
-3428 -3434 3447 0
-3428 -3433 3445 0
-3427 3447 0
-3427 -3434 3445 0
-3427 -3433 3444 0
c ((SATLiteral(381) - aux861 + SATLiteral(651))<=0)
-651 -3451 0
-381 -3451 0
-381 -651 -3452 0
c (0<=(SATLiteral(381) - aux861 + SATLiteral(651)))
651 3452 0
381 3452 0
381 651 3451 0
c ((SATLiteral(1056) - aux862 + SATLiteral(921))<=0)
-921 -3454 0
-1056 -3454 0
-1056 -921 -3455 0
c (0<=(SATLiteral(1056) - aux862 + SATLiteral(921)))
921 3455 0
1056 3455 0
1056 921 3454 0
c (( - aux863 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3457 0
-786 -3457 0
-786 -246 -3458 0
c (0<=( - aux863 + SATLiteral(786) + SATLiteral(246)))
246 3458 0
786 3458 0
786 246 3457 0
c (( - aux864 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3460 0
-516 -3460 0
-516 -1191 -3461 0
c (0<=( - aux864 + SATLiteral(516) + SATLiteral(1191)))
1191 3461 0
516 3461 0
516 1191 3460 0
c ((aux864 - aux865 + SATLiteral(111))<=0)
3460 -3463 0
3461 -3464 0
-111 -3463 0
-111 3460 -3464 0
-111 3461 -3466 0
c (0<=(aux864 - aux865 + SATLiteral(111)))
-3461 3466 0
-3460 3464 0
111 3466 0
111 -3461 3464 0
111 -3460 3463 0
c ((aux861 + aux863 - aux866)<=0)
3457 -3468 0
3458 -3469 0
3451 -3468 0
3451 3457 -3469 0
3451 3458 -3471 0
3452 -3469 0
3452 3457 -3471 0
3452 3458 -3473 0
c (0<=(aux861 + aux863 - aux866))
-3458 3473 0
-3457 3471 0
-3452 3473 0
-3452 -3458 3471 0
-3452 -3457 3469 0
-3451 3471 0
-3451 -3458 3469 0
-3451 -3457 3468 0
c ((SATLiteral(383) - aux867 + SATLiteral(653))<=0)
-653 -3475 0
-383 -3475 0
-383 -653 -3476 0
c (0<=(SATLiteral(383) - aux867 + SATLiteral(653)))
653 3476 0
383 3476 0
383 653 3475 0
c ((SATLiteral(1058) - aux868 + SATLiteral(923))<=0)
-923 -3478 0
-1058 -3478 0
-1058 -923 -3479 0
c (0<=(SATLiteral(1058) - aux868 + SATLiteral(923)))
923 3479 0
1058 3479 0
1058 923 3478 0
c (( - aux869 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3481 0
-788 -3481 0
-788 -248 -3482 0
c (0<=( - aux869 + SATLiteral(788) + SATLiteral(248)))
248 3482 0
788 3482 0
788 248 3481 0
c (( - aux870 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3484 0
-518 -3484 0
-518 -1193 -3485 0
c (0<=( - aux870 + SATLiteral(518) + SATLiteral(1193)))
1193 3485 0
518 3485 0
518 1193 3484 0
c ((aux870 - aux871 + SATLiteral(113))<=0)
3484 -3487 0
3485 -3488 0
-113 -3487 0
-113 3484 -3488 0
-113 3485 -3490 0
c (0<=(aux870 - aux871 + SATLiteral(113)))
-3485 3490 0
-3484 3488 0
113 3490 0
113 -3485 3488 0
113 -3484 3487 0
c ((aux867 + aux869 - aux872)<=0)
3481 -3492 0
3482 -3493 0
3475 -3492 0
3475 3481 -3493 0
3475 3482 -3495 0
3476 -3493 0
3476 3481 -3495 0
3476 3482 -3497 0
c (0<=(aux867 + aux869 - aux872))
-3482 3497 0
-3481 3495 0
-3476 3497 0
-3476 -3482 3495 0
-3476 -3481 3493 0
-3475 3495 0
-3475 -3482 3493 0
-3475 -3481 3492 0
c ((SATLiteral(385) - aux873 + SATLiteral(655))<=0)
-655 -3499 0
-385 -3499 0
-385 -655 -3500 0
c (0<=(SATLiteral(385) - aux873 + SATLiteral(655)))
655 3500 0
385 3500 0
385 655 3499 0
c ((SATLiteral(1060) - aux874 + SATLiteral(925))<=0)
-925 -3502 0
-1060 -3502 0
-1060 -925 -3503 0
c (0<=(SATLiteral(1060) - aux874 + SATLiteral(925)))
925 3503 0
1060 3503 0
1060 925 3502 0
c (( - aux875 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3505 0
-790 -3505 0
-790 -250 -3506 0
c (0<=( - aux875 + SATLiteral(790) + SATLiteral(250)))
250 3506 0
790 3506 0
790 250 3505 0
c (( - aux876 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3508 0
-520 -3508 0
-520 -1195 -3509 0
c (0<=( - aux876 + SATLiteral(520) + SATLiteral(1195)))
1195 3509 0
520 3509 0
520 1195 3508 0
c ((aux876 - aux877 + SATLiteral(115))<=0)
3508 -3511 0
3509 -3512 0
-115 -3511 0
-115 3508 -3512 0
-115 3509 -3514 0
c (0<=(aux876 - aux877 + SATLiteral(115)))
-3509 3514 0
-3508 3512 0
115 3514 0
115 -3509 3512 0
115 -3508 3511 0
c ((aux873 + aux875 - aux878)<=0)
3505 -3516 0
3506 -3517 0
3499 -3516 0
3499 3505 -3517 0
3499 3506 -3519 0
3500 -3517 0
3500 3505 -3519 0
3500 3506 -3521 0
c (0<=(aux873 + aux875 - aux878))
-3506 3521 0
-3505 3519 0
-3500 3521 0
-3500 -3506 3519 0
-3500 -3505 3517 0
-3499 3519 0
-3499 -3506 3517 0
-3499 -3505 3516 0
c ((SATLiteral(387) - aux879 + SATLiteral(657))<=0)
-657 -3523 0
-387 -3523 0
-387 -657 -3524 0
c (0<=(SATLiteral(387) - aux879 + SATLiteral(657)))
657 3524 0
387 3524 0
387 657 3523 0
c ((SATLiteral(1062) - aux880 + SATLiteral(927))<=0)
-927 -3526 0
-1062 -3526 0
-1062 -927 -3527 0
c (0<=(SATLiteral(1062) - aux880 + SATLiteral(927)))
927 3527 0
1062 3527 0
1062 927 3526 0
c (( - aux881 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3529 0
-792 -3529 0
-792 -252 -3530 0
c (0<=( - aux881 + SATLiteral(792) + SATLiteral(252)))
252 3530 0
792 3530 0
792 252 3529 0
c (( - aux882 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3532 0
-522 -3532 0
-522 -1197 -3533 0
c (0<=( - aux882 + SATLiteral(522) + SATLiteral(1197)))
1197 3533 0
522 3533 0
522 1197 3532 0
c ((aux882 - aux883 + SATLiteral(117))<=0)
3532 -3535 0
3533 -3536 0
-117 -3535 0
-117 3532 -3536 0
-117 3533 -3538 0
c (0<=(aux882 - aux883 + SATLiteral(117)))
-3533 3538 0
-3532 3536 0
117 3538 0
117 -3533 3536 0
117 -3532 3535 0
c ((aux879 + aux881 - aux884)<=0)
3529 -3540 0
3530 -3541 0
3523 -3540 0
3523 3529 -3541 0
3523 3530 -3543 0
3524 -3541 0
3524 3529 -3543 0
3524 3530 -3545 0
c (0<=(aux879 + aux881 - aux884))
-3530 3545 0
-3529 3543 0
-3524 3545 0
-3524 -3530 3543 0
-3524 -3529 3541 0
-3523 3543 0
-3523 -3530 3541 0
-3523 -3529 3540 0
c ((SATLiteral(389) - aux885 + SATLiteral(659))<=0)
-659 -3547 0
-389 -3547 0
-389 -659 -3548 0
c (0<=(SATLiteral(389) - aux885 + SATLiteral(659)))
659 3548 0
389 3548 0
389 659 3547 0
c ((SATLiteral(1064) - aux886 + SATLiteral(929))<=0)
-929 -3550 0
-1064 -3550 0
-1064 -929 -3551 0
c (0<=(SATLiteral(1064) - aux886 + SATLiteral(929)))
929 3551 0
1064 3551 0
1064 929 3550 0
c (( - aux887 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3553 0
-794 -3553 0
-794 -254 -3554 0
c (0<=( - aux887 + SATLiteral(794) + SATLiteral(254)))
254 3554 0
794 3554 0
794 254 3553 0
c (( - aux888 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3556 0
-524 -3556 0
-524 -1199 -3557 0
c (0<=( - aux888 + SATLiteral(524) + SATLiteral(1199)))
1199 3557 0
524 3557 0
524 1199 3556 0
c ((aux888 - aux889 + SATLiteral(119))<=0)
3556 -3559 0
3557 -3560 0
-119 -3559 0
-119 3556 -3560 0
-119 3557 -3562 0
c (0<=(aux888 - aux889 + SATLiteral(119)))
-3557 3562 0
-3556 3560 0
119 3562 0
119 -3557 3560 0
119 -3556 3559 0
c ((aux885 + aux887 - aux890)<=0)
3553 -3564 0
3554 -3565 0
3547 -3564 0
3547 3553 -3565 0
3547 3554 -3567 0
3548 -3565 0
3548 3553 -3567 0
3548 3554 -3569 0
c (0<=(aux885 + aux887 - aux890))
-3554 3569 0
-3553 3567 0
-3548 3569 0
-3548 -3554 3567 0
-3548 -3553 3565 0
-3547 3567 0
-3547 -3554 3565 0
-3547 -3553 3564 0
c ((SATLiteral(391) - aux891 + SATLiteral(661))<=0)
-661 -3571 0
-391 -3571 0
-391 -661 -3572 0
c (0<=(SATLiteral(391) - aux891 + SATLiteral(661)))
661 3572 0
391 3572 0
391 661 3571 0
c ((SATLiteral(1066) - aux892 + SATLiteral(931))<=0)
-931 -3574 0
-1066 -3574 0
-1066 -931 -3575 0
c (0<=(SATLiteral(1066) - aux892 + SATLiteral(931)))
931 3575 0
1066 3575 0
1066 931 3574 0
c (( - aux893 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3577 0
-796 -3577 0
-796 -256 -3578 0
c (0<=( - aux893 + SATLiteral(796) + SATLiteral(256)))
256 3578 0
796 3578 0
796 256 3577 0
c (( - aux894 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3580 0
-526 -3580 0
-526 -1201 -3581 0
c (0<=( - aux894 + SATLiteral(526) + SATLiteral(1201)))
1201 3581 0
526 3581 0
526 1201 3580 0
c ((aux894 - aux895 + SATLiteral(121))<=0)
3580 -3583 0
3581 -3584 0
-121 -3583 0
-121 3580 -3584 0
-121 3581 -3586 0
c (0<=(aux894 - aux895 + SATLiteral(121)))
-3581 3586 0
-3580 3584 0
121 3586 0
121 -3581 3584 0
121 -3580 3583 0
c ((aux891 + aux893 - aux896)<=0)
3577 -3588 0
3578 -3589 0
3571 -3588 0
3571 3577 -3589 0
3571 3578 -3591 0
3572 -3589 0
3572 3577 -3591 0
3572 3578 -3593 0
c (0<=(aux891 + aux893 - aux896))
-3578 3593 0
-3577 3591 0
-3572 3593 0
-3572 -3578 3591 0
-3572 -3577 3589 0
-3571 3591 0
-3571 -3578 3589 0
-3571 -3577 3588 0
c ((SATLiteral(-390) - aux897 + SATLiteral(-660))<=0)
660 -3595 0
390 -3595 0
390 660 -3596 0
c (0<=(SATLiteral(-390) - aux897 + SATLiteral(-660)))
-660 3596 0
-390 3596 0
-390 -660 3595 0
c ((SATLiteral(-1065) - aux898 + SATLiteral(-930))<=0)
930 -3598 0
1065 -3598 0
1065 930 -3599 0
c (0<=(SATLiteral(-1065) - aux898 + SATLiteral(-930)))
-930 3599 0
-1065 3599 0
-1065 -930 3598 0
c (( - aux899 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3601 0
795 -3601 0
795 255 -3602 0
c (0<=( - aux899 + SATLiteral(-795) + SATLiteral(-255)))
-255 3602 0
-795 3602 0
-795 -255 3601 0
c (( - aux900 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3604 0
525 -3604 0
525 1200 -3605 0
c (0<=( - aux900 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3605 0
-525 3605 0
-525 -1200 3604 0
c ((aux900 - aux901 + SATLiteral(-120))<=0)
3604 -3607 0
3605 -3608 0
120 -3607 0
120 3604 -3608 0
120 3605 -3610 0
c (0<=(aux900 - aux901 + SATLiteral(-120)))
-3605 3610 0
-3604 3608 0
-120 3610 0
-120 -3605 3608 0
-120 -3604 3607 0
c ((aux897 + aux899 - aux902)<=0)
3601 -3612 0
3602 -3613 0
3595 -3612 0
3595 3601 -3613 0
3595 3602 -3615 0
3596 -3613 0
3596 3601 -3615 0
3596 3602 -3617 0
c (0<=(aux897 + aux899 - aux902))
-3602 3617 0
-3601 3615 0
-3596 3617 0
-3596 -3602 3615 0
-3596 -3601 3613 0
-3595 3615 0
-3595 -3602 3613 0
-3595 -3601 3612 0
c ((SATLiteral(392) - aux903 + SATLiteral(662))<=0)
-662 -3619 0
-392 -3619 0
-392 -662 -3620 0
c (0<=(SATLiteral(392) - aux903 + SATLiteral(662)))
662 3620 0
392 3620 0
392 662 3619 0
c ((SATLiteral(1067) - aux904 + SATLiteral(932))<=0)
-932 -3622 0
-1067 -3622 0
-1067 -932 -3623 0
c (0<=(SATLiteral(1067) - aux904 + SATLiteral(932)))
932 3623 0
1067 3623 0
1067 932 3622 0
c (( - aux905 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3625 0
-797 -3625 0
-797 -257 -3626 0
c (0<=( - aux905 + SATLiteral(797) + SATLiteral(257)))
257 3626 0
797 3626 0
797 257 3625 0
c (( - aux906 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3628 0
-527 -3628 0
-527 -1202 -3629 0
c (0<=( - aux906 + SATLiteral(527) + SATLiteral(1202)))
1202 3629 0
527 3629 0
527 1202 3628 0
c ((aux906 - aux907 + SATLiteral(122))<=0)
3628 -3631 0
3629 -3632 0
-122 -3631 0
-122 3628 -3632 0
-122 3629 -3634 0
c (0<=(aux906 - aux907 + SATLiteral(122)))
-3629 3634 0
-3628 3632 0
122 3634 0
122 -3629 3632 0
122 -3628 3631 0
c ((aux903 + aux905 - aux908)<=0)
3625 -3636 0
3626 -3637 0
3619 -3636 0
3619 3625 -3637 0
3619 3626 -3639 0
3620 -3637 0
3620 3625 -3639 0
3620 3626 -3641 0
c (0<=(aux903 + aux905 - aux908))
-3626 3641 0
-3625 3639 0
-3620 3641 0
-3620 -3626 3639 0
-3620 -3625 3637 0
-3619 3639 0
-3619 -3626 3637 0
-3619 -3625 3636 0
c ((SATLiteral(394) - aux909 + SATLiteral(664))<=0)
-664 -3643 0
-394 -3643 0
-394 -664 -3644 0
c (0<=(SATLiteral(394) - aux909 + SATLiteral(664)))
664 3644 0
394 3644 0
394 664 3643 0
c ((SATLiteral(1069) - aux910 + SATLiteral(934))<=0)
-934 -3646 0
-1069 -3646 0
-1069 -934 -3647 0
c (0<=(SATLiteral(1069) - aux910 + SATLiteral(934)))
934 3647 0
1069 3647 0
1069 934 3646 0
c (( - aux911 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3649 0
-799 -3649 0
-799 -259 -3650 0
c (0<=( - aux911 + SATLiteral(799) + SATLiteral(259)))
259 3650 0
799 3650 0
799 259 3649 0
c (( - aux912 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3652 0
-529 -3652 0
-529 -1204 -3653 0
c (0<=( - aux912 + SATLiteral(529) + SATLiteral(1204)))
1204 3653 0
529 3653 0
529 1204 3652 0
c ((aux912 - aux913 + SATLiteral(124))<=0)
3652 -3655 0
3653 -3656 0
-124 -3655 0
-124 3652 -3656 0
-124 3653 -3658 0
c (0<=(aux912 - aux913 + SATLiteral(124)))
-3653 3658 0
-3652 3656 0
124 3658 0
124 -3653 3656 0
124 -3652 3655 0
c ((aux909 + aux911 - aux914)<=0)
3649 -3660 0
3650 -3661 0
3643 -3660 0
3643 3649 -3661 0
3643 3650 -3663 0
3644 -3661 0
3644 3649 -3663 0
3644 3650 -3665 0
c (0<=(aux909 + aux911 - aux914))
-3650 3665 0
-3649 3663 0
-3644 3665 0
-3644 -3650 3663 0
-3644 -3649 3661 0
-3643 3663 0
-3643 -3650 3661 0
-3643 -3649 3660 0
c ((SATLiteral(396) - aux915 + SATLiteral(666))<=0)
-666 -3667 0
-396 -3667 0
-396 -666 -3668 0
c (0<=(SATLiteral(396) - aux915 + SATLiteral(666)))
666 3668 0
396 3668 0
396 666 3667 0
c ((SATLiteral(1071) - aux916 + SATLiteral(936))<=0)
-936 -3670 0
-1071 -3670 0
-1071 -936 -3671 0
c (0<=(SATLiteral(1071) - aux916 + SATLiteral(936)))
936 3671 0
1071 3671 0
1071 936 3670 0
c (( - aux917 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3673 0
-801 -3673 0
-801 -261 -3674 0
c (0<=( - aux917 + SATLiteral(801) + SATLiteral(261)))
261 3674 0
801 3674 0
801 261 3673 0
c (( - aux918 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3676 0
-531 -3676 0
-531 -1206 -3677 0
c (0<=( - aux918 + SATLiteral(531) + SATLiteral(1206)))
1206 3677 0
531 3677 0
531 1206 3676 0
c ((aux918 - aux919 + SATLiteral(126))<=0)
3676 -3679 0
3677 -3680 0
-126 -3679 0
-126 3676 -3680 0
-126 3677 -3682 0
c (0<=(aux918 - aux919 + SATLiteral(126)))
-3677 3682 0
-3676 3680 0
126 3682 0
126 -3677 3680 0
126 -3676 3679 0
c ((aux915 + aux917 - aux920)<=0)
3673 -3684 0
3674 -3685 0
3667 -3684 0
3667 3673 -3685 0
3667 3674 -3687 0
3668 -3685 0
3668 3673 -3687 0
3668 3674 -3689 0
c (0<=(aux915 + aux917 - aux920))
-3674 3689 0
-3673 3687 0
-3668 3689 0
-3668 -3674 3687 0
-3668 -3673 3685 0
-3667 3687 0
-3667 -3674 3685 0
-3667 -3673 3684 0
c ((SATLiteral(398) - aux921 + SATLiteral(668))<=0)
-668 -3691 0
-398 -3691 0
-398 -668 -3692 0
c (0<=(SATLiteral(398) - aux921 + SATLiteral(668)))
668 3692 0
398 3692 0
398 668 3691 0
c ((SATLiteral(1073) - aux922 + SATLiteral(938))<=0)
-938 -3694 0
-1073 -3694 0
-1073 -938 -3695 0
c (0<=(SATLiteral(1073) - aux922 + SATLiteral(938)))
938 3695 0
1073 3695 0
1073 938 3694 0
c (( - aux923 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3697 0
-803 -3697 0
-803 -263 -3698 0
c (0<=( - aux923 + SATLiteral(803) + SATLiteral(263)))
263 3698 0
803 3698 0
803 263 3697 0
c (( - aux924 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3700 0
-533 -3700 0
-533 -1208 -3701 0
c (0<=( - aux924 + SATLiteral(533) + SATLiteral(1208)))
1208 3701 0
533 3701 0
533 1208 3700 0
c ((aux924 - aux925 + SATLiteral(128))<=0)
3700 -3703 0
3701 -3704 0
-128 -3703 0
-128 3700 -3704 0
-128 3701 -3706 0
c (0<=(aux924 - aux925 + SATLiteral(128)))
-3701 3706 0
-3700 3704 0
128 3706 0
128 -3701 3704 0
128 -3700 3703 0
c ((aux921 + aux923 - aux926)<=0)
3697 -3708 0
3698 -3709 0
3691 -3708 0
3691 3697 -3709 0
3691 3698 -3711 0
3692 -3709 0
3692 3697 -3711 0
3692 3698 -3713 0
c (0<=(aux921 + aux923 - aux926))
-3698 3713 0
-3697 3711 0
-3692 3713 0
-3692 -3698 3711 0
-3692 -3697 3709 0
-3691 3711 0
-3691 -3698 3709 0
-3691 -3697 3708 0
c ((SATLiteral(400) - aux927 + SATLiteral(670))<=0)
-670 -3715 0
-400 -3715 0
-400 -670 -3716 0
c (0<=(SATLiteral(400) - aux927 + SATLiteral(670)))
670 3716 0
400 3716 0
400 670 3715 0
c ((SATLiteral(1075) - aux928 + SATLiteral(940))<=0)
-940 -3718 0
-1075 -3718 0
-1075 -940 -3719 0
c (0<=(SATLiteral(1075) - aux928 + SATLiteral(940)))
940 3719 0
1075 3719 0
1075 940 3718 0
c (( - aux929 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3721 0
-805 -3721 0
-805 -265 -3722 0
c (0<=( - aux929 + SATLiteral(805) + SATLiteral(265)))
265 3722 0
805 3722 0
805 265 3721 0
c (( - aux930 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3724 0
-535 -3724 0
-535 -1210 -3725 0
c (0<=( - aux930 + SATLiteral(535) + SATLiteral(1210)))
1210 3725 0
535 3725 0
535 1210 3724 0
c ((aux930 - aux931 + SATLiteral(130))<=0)
3724 -3727 0
3725 -3728 0
-130 -3727 0
-130 3724 -3728 0
-130 3725 -3730 0
c (0<=(aux930 - aux931 + SATLiteral(130)))
-3725 3730 0
-3724 3728 0
130 3730 0
130 -3725 3728 0
130 -3724 3727 0
c ((aux927 + aux929 - aux932)<=0)
3721 -3732 0
3722 -3733 0
3715 -3732 0
3715 3721 -3733 0
3715 3722 -3735 0
3716 -3733 0
3716 3721 -3735 0
3716 3722 -3737 0
c (0<=(aux927 + aux929 - aux932))
-3722 3737 0
-3721 3735 0
-3716 3737 0
-3716 -3722 3735 0
-3716 -3721 3733 0
-3715 3735 0
-3715 -3722 3733 0
-3715 -3721 3732 0
c ((SATLiteral(402) - aux933 + SATLiteral(672))<=0)
-672 -3739 0
-402 -3739 0
-402 -672 -3740 0
c (0<=(SATLiteral(402) - aux933 + SATLiteral(672)))
672 3740 0
402 3740 0
402 672 3739 0
c ((SATLiteral(1077) - aux934 + SATLiteral(942))<=0)
-942 -3742 0
-1077 -3742 0
-1077 -942 -3743 0
c (0<=(SATLiteral(1077) - aux934 + SATLiteral(942)))
942 3743 0
1077 3743 0
1077 942 3742 0
c (( - aux935 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3745 0
-807 -3745 0
-807 -267 -3746 0
c (0<=( - aux935 + SATLiteral(807) + SATLiteral(267)))
267 3746 0
807 3746 0
807 267 3745 0
c (( - aux936 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3748 0
-537 -3748 0
-537 -1212 -3749 0
c (0<=( - aux936 + SATLiteral(537) + SATLiteral(1212)))
1212 3749 0
537 3749 0
537 1212 3748 0
c ((aux936 - aux937 + SATLiteral(132))<=0)
3748 -3751 0
3749 -3752 0
-132 -3751 0
-132 3748 -3752 0
-132 3749 -3754 0
c (0<=(aux936 - aux937 + SATLiteral(132)))
-3749 3754 0
-3748 3752 0
132 3754 0
132 -3749 3752 0
132 -3748 3751 0
c ((aux933 + aux935 - aux938)<=0)
3745 -3756 0
3746 -3757 0
3739 -3756 0
3739 3745 -3757 0
3739 3746 -3759 0
3740 -3757 0
3740 3745 -3759 0
3740 3746 -3761 0
c (0<=(aux933 + aux935 - aux938))
-3746 3761 0
-3745 3759 0
-3740 3761 0
-3740 -3746 3759 0
-3740 -3745 3757 0
-3739 3759 0
-3739 -3746 3757 0
-3739 -3745 3756 0
c ((SATLiteral(404) - aux939 + SATLiteral(674))<=0)
-674 -3763 0
-404 -3763 0
-404 -674 -3764 0
c (0<=(SATLiteral(404) - aux939 + SATLiteral(674)))
674 3764 0
404 3764 0
404 674 3763 0
c ((SATLiteral(1079) - aux940 + SATLiteral(944))<=0)
-944 -3766 0
-1079 -3766 0
-1079 -944 -3767 0
c (0<=(SATLiteral(1079) - aux940 + SATLiteral(944)))
944 3767 0
1079 3767 0
1079 944 3766 0
c (( - aux941 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3769 0
-809 -3769 0
-809 -269 -3770 0
c (0<=( - aux941 + SATLiteral(809) + SATLiteral(269)))
269 3770 0
809 3770 0
809 269 3769 0
c (( - aux942 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3772 0
-539 -3772 0
-539 -1214 -3773 0
c (0<=( - aux942 + SATLiteral(539) + SATLiteral(1214)))
1214 3773 0
539 3773 0
539 1214 3772 0
c ((aux942 - aux943 + SATLiteral(134))<=0)
3772 -3775 0
3773 -3776 0
-134 -3775 0
-134 3772 -3776 0
-134 3773 -3778 0
c (0<=(aux942 - aux943 + SATLiteral(134)))
-3773 3778 0
-3772 3776 0
134 3778 0
134 -3773 3776 0
134 -3772 3775 0
c ((aux939 + aux941 - aux944)<=0)
3769 -3780 0
3770 -3781 0
3763 -3780 0
3763 3769 -3781 0
3763 3770 -3783 0
3764 -3781 0
3764 3769 -3783 0
3764 3770 -3785 0
c (0<=(aux939 + aux941 - aux944))
-3770 3785 0
-3769 3783 0
-3764 3785 0
-3764 -3770 3783 0
-3764 -3769 3781 0
-3763 3783 0
-3763 -3770 3781 0
-3763 -3769 3780 0
c ((SATLiteral(406) - aux945 + SATLiteral(676))<=0)
-676 -3787 0
-406 -3787 0
-406 -676 -3788 0
c (0<=(SATLiteral(406) - aux945 + SATLiteral(676)))
676 3788 0
406 3788 0
406 676 3787 0
c ((SATLiteral(1081) - aux946 + SATLiteral(946))<=0)
-946 -3790 0
-1081 -3790 0
-1081 -946 -3791 0
c (0<=(SATLiteral(1081) - aux946 + SATLiteral(946)))
946 3791 0
1081 3791 0
1081 946 3790 0
c (( - aux947 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3793 0
-811 -3793 0
-811 -271 -3794 0
c (0<=( - aux947 + SATLiteral(811) + SATLiteral(271)))
271 3794 0
811 3794 0
811 271 3793 0
c (( - aux948 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3796 0
-541 -3796 0
-541 -1216 -3797 0
c (0<=( - aux948 + SATLiteral(541) + SATLiteral(1216)))
1216 3797 0
541 3797 0
541 1216 3796 0
c ((aux948 - aux949 + SATLiteral(136))<=0)
3796 -3799 0
3797 -3800 0
-136 -3799 0
-136 3796 -3800 0
-136 3797 -3802 0
c (0<=(aux948 - aux949 + SATLiteral(136)))
-3797 3802 0
-3796 3800 0
136 3802 0
136 -3797 3800 0
136 -3796 3799 0
c ((aux945 + aux947 - aux950)<=0)
3793 -3804 0
3794 -3805 0
3787 -3804 0
3787 3793 -3805 0
3787 3794 -3807 0
3788 -3805 0
3788 3793 -3807 0
3788 3794 -3809 0
c (0<=(aux945 + aux947 - aux950))
-3794 3809 0
-3793 3807 0
-3788 3809 0
-3788 -3794 3807 0
-3788 -3793 3805 0
-3787 3807 0
-3787 -3794 3805 0
-3787 -3793 3804 0
c ((SATLiteral(-405) - aux951 + SATLiteral(-675))<=0)
675 -3811 0
405 -3811 0
405 675 -3812 0
c (0<=(SATLiteral(-405) - aux951 + SATLiteral(-675)))
-675 3812 0
-405 3812 0
-405 -675 3811 0
c ((SATLiteral(-1080) - aux952 + SATLiteral(-945))<=0)
945 -3814 0
1080 -3814 0
1080 945 -3815 0
c (0<=(SATLiteral(-1080) - aux952 + SATLiteral(-945)))
-945 3815 0
-1080 3815 0
-1080 -945 3814 0
c (( - aux953 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3817 0
810 -3817 0
810 270 -3818 0
c (0<=( - aux953 + SATLiteral(-810) + SATLiteral(-270)))
-270 3818 0
-810 3818 0
-810 -270 3817 0
c (( - aux954 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3820 0
540 -3820 0
540 1215 -3821 0
c (0<=( - aux954 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3821 0
-540 3821 0
-540 -1215 3820 0
c ((aux954 - aux955 + SATLiteral(-135))<=0)
3820 -3823 0
3821 -3824 0
135 -3823 0
135 3820 -3824 0
135 3821 -3826 0
c (0<=(aux954 - aux955 + SATLiteral(-135)))
-3821 3826 0
-3820 3824 0
-135 3826 0
-135 -3821 3824 0
-135 -3820 3823 0
c ((aux951 + aux953 - aux956)<=0)
3817 -3828 0
3818 -3829 0
3811 -3828 0
3811 3817 -3829 0
3811 3818 -3831 0
3812 -3829 0
3812 3817 -3831 0
3812 3818 -3833 0
c (0<=(aux951 + aux953 - aux956))
-3818 3833 0
-3817 3831 0
-3812 3833 0
-3812 -3818 3831 0
-3812 -3817 3829 0
-3811 3831 0
-3811 -3818 3829 0
-3811 -3817 3828 0
c (( - aux957 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3835 0
-2 -3835 0
-2 -122 -3836 0
c (0<=( - aux957 + SATLiteral(2) + SATLiteral(122)))
122 3836 0
2 3836 0
2 122 3835 0
c (( - aux958 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3838 0
-17 -3838 0
-17 -107 -3839 0
c (0<=( - aux958 + SATLiteral(17) + SATLiteral(107)))
107 3839 0
17 3839 0
17 107 3838 0
c (( - aux959 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3841 0
-47 -3841 0
-47 -92 -3842 0
c (0<=( - aux959 + SATLiteral(47) + SATLiteral(92)))
92 3842 0
47 3842 0
47 92 3841 0
c (( - aux960 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3844 0
-62 -3844 0
-62 -77 -3845 0
c (0<=( - aux960 + SATLiteral(62) + SATLiteral(77)))
77 3845 0
62 3845 0
62 77 3844 0
c ((aux960 - aux961 + SATLiteral(32))<=0)
3844 -3847 0
3845 -3848 0
-32 -3847 0
-32 3844 -3848 0
-32 3845 -3850 0
c (0<=(aux960 - aux961 + SATLiteral(32)))
-3845 3850 0
-3844 3848 0
32 3850 0
32 -3845 3848 0
32 -3844 3847 0
c ((aux957 + aux959 - aux962)<=0)
3841 -3852 0
3842 -3853 0
3835 -3852 0
3835 3841 -3853 0
3835 3842 -3855 0
3836 -3853 0
3836 3841 -3855 0
3836 3842 -3857 0
c (0<=(aux957 + aux959 - aux962))
-3842 3857 0
-3841 3855 0
-3836 3857 0
-3836 -3842 3855 0
-3836 -3841 3853 0
-3835 3855 0
-3835 -3842 3853 0
-3835 -3841 3852 0
c (( - aux963 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3859 0
-4 -3859 0
-4 -124 -3860 0
c (0<=( - aux963 + SATLiteral(4) + SATLiteral(124)))
124 3860 0
4 3860 0
4 124 3859 0
c (( - aux964 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3862 0
-19 -3862 0
-19 -109 -3863 0
c (0<=( - aux964 + SATLiteral(19) + SATLiteral(109)))
109 3863 0
19 3863 0
19 109 3862 0
c (( - aux965 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3865 0
-49 -3865 0
-49 -94 -3866 0
c (0<=( - aux965 + SATLiteral(49) + SATLiteral(94)))
94 3866 0
49 3866 0
49 94 3865 0
c (( - aux966 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3868 0
-64 -3868 0
-64 -79 -3869 0
c (0<=( - aux966 + SATLiteral(64) + SATLiteral(79)))
79 3869 0
64 3869 0
64 79 3868 0
c ((aux966 - aux967 + SATLiteral(34))<=0)
3868 -3871 0
3869 -3872 0
-34 -3871 0
-34 3868 -3872 0
-34 3869 -3874 0
c (0<=(aux966 - aux967 + SATLiteral(34)))
-3869 3874 0
-3868 3872 0
34 3874 0
34 -3869 3872 0
34 -3868 3871 0
c ((aux963 + aux965 - aux968)<=0)
3865 -3876 0
3866 -3877 0
3859 -3876 0
3859 3865 -3877 0
3859 3866 -3879 0
3860 -3877 0
3860 3865 -3879 0
3860 3866 -3881 0
c (0<=(aux963 + aux965 - aux968))
-3866 3881 0
-3865 3879 0
-3860 3881 0
-3860 -3866 3879 0
-3860 -3865 3877 0
-3859 3879 0
-3859 -3866 3877 0
-3859 -3865 3876 0
c (( - aux969 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -3883 0
-6 -3883 0
-6 -126 -3884 0
c (0<=( - aux969 + SATLiteral(6) + SATLiteral(126)))
126 3884 0
6 3884 0
6 126 3883 0
c (( - aux970 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -3886 0
-21 -3886 0
-21 -111 -3887 0
c (0<=( - aux970 + SATLiteral(21) + SATLiteral(111)))
111 3887 0
21 3887 0
21 111 3886 0
c (( - aux971 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -3889 0
-51 -3889 0
-51 -96 -3890 0
c (0<=( - aux971 + SATLiteral(51) + SATLiteral(96)))
96 3890 0
51 3890 0
51 96 3889 0
c (( - aux972 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -3892 0
-66 -3892 0
-66 -81 -3893 0
c (0<=( - aux972 + SATLiteral(66) + SATLiteral(81)))
81 3893 0
66 3893 0
66 81 3892 0
c ((aux972 - aux973 + SATLiteral(36))<=0)
3892 -3895 0
3893 -3896 0
-36 -3895 0
-36 3892 -3896 0
-36 3893 -3898 0
c (0<=(aux972 - aux973 + SATLiteral(36)))
-3893 3898 0
-3892 3896 0
36 3898 0
36 -3893 3896 0
36 -3892 3895 0
c ((aux969 + aux971 - aux974)<=0)
3889 -3900 0
3890 -3901 0
3883 -3900 0
3883 3889 -3901 0
3883 3890 -3903 0
3884 -3901 0
3884 3889 -3903 0
3884 3890 -3905 0
c (0<=(aux969 + aux971 - aux974))
-3890 3905 0
-3889 3903 0
-3884 3905 0
-3884 -3890 3903 0
-3884 -3889 3901 0
-3883 3903 0
-3883 -3890 3901 0
-3883 -3889 3900 0
c (( - aux975 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -3907 0
-8 -3907 0
-8 -128 -3908 0
c (0<=( - aux975 + SATLiteral(8) + SATLiteral(128)))
128 3908 0
8 3908 0
8 128 3907 0
c (( - aux976 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -3910 0
-23 -3910 0
-23 -113 -3911 0
c (0<=( - aux976 + SATLiteral(23) + SATLiteral(113)))
113 3911 0
23 3911 0
23 113 3910 0
c (( - aux977 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -3913 0
-53 -3913 0
-53 -98 -3914 0
c (0<=( - aux977 + SATLiteral(53) + SATLiteral(98)))
98 3914 0
53 3914 0
53 98 3913 0
c (( - aux978 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -3916 0
-68 -3916 0
-68 -83 -3917 0
c (0<=( - aux978 + SATLiteral(68) + SATLiteral(83)))
83 3917 0
68 3917 0
68 83 3916 0
c ((aux978 - aux979 + SATLiteral(38))<=0)
3916 -3919 0
3917 -3920 0
-38 -3919 0
-38 3916 -3920 0
-38 3917 -3922 0
c (0<=(aux978 - aux979 + SATLiteral(38)))
-3917 3922 0
-3916 3920 0
38 3922 0
38 -3917 3920 0
38 -3916 3919 0
c ((aux975 + aux977 - aux980)<=0)
3913 -3924 0
3914 -3925 0
3907 -3924 0
3907 3913 -3925 0
3907 3914 -3927 0
3908 -3925 0
3908 3913 -3927 0
3908 3914 -3929 0
c (0<=(aux975 + aux977 - aux980))
-3914 3929 0
-3913 3927 0
-3908 3929 0
-3908 -3914 3927 0
-3908 -3913 3925 0
-3907 3927 0
-3907 -3914 3925 0
-3907 -3913 3924 0
c (( - aux981 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -3931 0
-10 -3931 0
-10 -130 -3932 0
c (0<=( - aux981 + SATLiteral(10) + SATLiteral(130)))
130 3932 0
10 3932 0
10 130 3931 0
c (( - aux982 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -3934 0
-25 -3934 0
-25 -115 -3935 0
c (0<=( - aux982 + SATLiteral(25) + SATLiteral(115)))
115 3935 0
25 3935 0
25 115 3934 0
c (( - aux983 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -3937 0
-55 -3937 0
-55 -100 -3938 0
c (0<=( - aux983 + SATLiteral(55) + SATLiteral(100)))
100 3938 0
55 3938 0
55 100 3937 0
c (( - aux984 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -3940 0
-70 -3940 0
-70 -85 -3941 0
c (0<=( - aux984 + SATLiteral(70) + SATLiteral(85)))
85 3941 0
70 3941 0
70 85 3940 0
c ((aux984 - aux985 + SATLiteral(40))<=0)
3940 -3943 0
3941 -3944 0
-40 -3943 0
-40 3940 -3944 0
-40 3941 -3946 0
c (0<=(aux984 - aux985 + SATLiteral(40)))
-3941 3946 0
-3940 3944 0
40 3946 0
40 -3941 3944 0
40 -3940 3943 0
c ((aux981 + aux983 - aux986)<=0)
3937 -3948 0
3938 -3949 0
3931 -3948 0
3931 3937 -3949 0
3931 3938 -3951 0
3932 -3949 0
3932 3937 -3951 0
3932 3938 -3953 0
c (0<=(aux981 + aux983 - aux986))
-3938 3953 0
-3937 3951 0
-3932 3953 0
-3932 -3938 3951 0
-3932 -3937 3949 0
-3931 3951 0
-3931 -3938 3949 0
-3931 -3937 3948 0
c (( - aux987 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -3955 0
-12 -3955 0
-12 -132 -3956 0
c (0<=( - aux987 + SATLiteral(12) + SATLiteral(132)))
132 3956 0
12 3956 0
12 132 3955 0
c (( - aux988 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -3958 0
-27 -3958 0
-27 -117 -3959 0
c (0<=( - aux988 + SATLiteral(27) + SATLiteral(117)))
117 3959 0
27 3959 0
27 117 3958 0
c (( - aux989 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -3961 0
-57 -3961 0
-57 -102 -3962 0
c (0<=( - aux989 + SATLiteral(57) + SATLiteral(102)))
102 3962 0
57 3962 0
57 102 3961 0
c (( - aux990 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -3964 0
-72 -3964 0
-72 -87 -3965 0
c (0<=( - aux990 + SATLiteral(72) + SATLiteral(87)))
87 3965 0
72 3965 0
72 87 3964 0
c ((aux990 - aux991 + SATLiteral(42))<=0)
3964 -3967 0
3965 -3968 0
-42 -3967 0
-42 3964 -3968 0
-42 3965 -3970 0
c (0<=(aux990 - aux991 + SATLiteral(42)))
-3965 3970 0
-3964 3968 0
42 3970 0
42 -3965 3968 0
42 -3964 3967 0
c ((aux987 + aux989 - aux992)<=0)
3961 -3972 0
3962 -3973 0
3955 -3972 0
3955 3961 -3973 0
3955 3962 -3975 0
3956 -3973 0
3956 3961 -3975 0
3956 3962 -3977 0
c (0<=(aux987 + aux989 - aux992))
-3962 3977 0
-3961 3975 0
-3956 3977 0
-3956 -3962 3975 0
-3956 -3961 3973 0
-3955 3975 0
-3955 -3962 3973 0
-3955 -3961 3972 0
c (( - aux993 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -3979 0
-14 -3979 0
-14 -134 -3980 0
c (0<=( - aux993 + SATLiteral(14) + SATLiteral(134)))
134 3980 0
14 3980 0
14 134 3979 0
c (( - aux994 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -3982 0
-29 -3982 0
-29 -119 -3983 0
c (0<=( - aux994 + SATLiteral(29) + SATLiteral(119)))
119 3983 0
29 3983 0
29 119 3982 0
c (( - aux995 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -3985 0
-59 -3985 0
-59 -104 -3986 0
c (0<=( - aux995 + SATLiteral(59) + SATLiteral(104)))
104 3986 0
59 3986 0
59 104 3985 0
c (( - aux996 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -3988 0
-74 -3988 0
-74 -89 -3989 0
c (0<=( - aux996 + SATLiteral(74) + SATLiteral(89)))
89 3989 0
74 3989 0
74 89 3988 0
c ((aux996 - aux997 + SATLiteral(44))<=0)
3988 -3991 0
3989 -3992 0
-44 -3991 0
-44 3988 -3992 0
-44 3989 -3994 0
c (0<=(aux996 - aux997 + SATLiteral(44)))
-3989 3994 0
-3988 3992 0
44 3994 0
44 -3989 3992 0
44 -3988 3991 0
c ((aux993 + aux995 - aux998)<=0)
3985 -3996 0
3986 -3997 0
3979 -3996 0
3979 3985 -3997 0
3979 3986 -3999 0
3980 -3997 0
3980 3985 -3999 0
3980 3986 -4001 0
c (0<=(aux993 + aux995 - aux998))
-3986 4001 0
-3985 3999 0
-3980 4001 0
-3980 -3986 3999 0
-3980 -3985 3997 0
-3979 3999 0
-3979 -3986 3997 0
-3979 -3985 3996 0
c (( - aux999 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4003 0
-16 -4003 0
-16 -136 -4004 0
c (0<=( - aux999 + SATLiteral(16) + SATLiteral(136)))
136 4004 0
16 4004 0
16 136 4003 0
c ((SATLiteral(31) + SATLiteral(121) - aux1000)<=0)
-121 -4006 0
-31 -4006 0
-31 -121 -4007 0
c (0<=(SATLiteral(31) + SATLiteral(121) - aux1000))
121 4007 0
31 4007 0
31 121 4006 0
c ((SATLiteral(61) + SATLiteral(106) - aux1001)<=0)
-106 -4009 0
-61 -4009 0
-61 -106 -4010 0
c (0<=(SATLiteral(61) + SATLiteral(106) - aux1001))
106 4010 0
61 4010 0
61 106 4009 0
c ((SATLiteral(76) + SATLiteral(91) - aux1002)<=0)
-91 -4012 0
-76 -4012 0
-76 -91 -4013 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1002))
91 4013 0
76 4013 0
76 91 4012 0
c ((SATLiteral(46) + aux1002 - aux1003)<=0)
4012 -4015 0
4013 -4016 0
-46 -4015 0
-46 4012 -4016 0
-46 4013 -4018 0
c (0<=(SATLiteral(46) + aux1002 - aux1003))
-4013 4018 0
-4012 4016 0
46 4018 0
46 -4013 4016 0
46 -4012 4015 0
c ((aux999 + aux1001 - aux1004)<=0)
4009 -4020 0
4010 -4021 0
4003 -4020 0
4003 4009 -4021 0
4003 4010 -4023 0
4004 -4021 0
4004 4009 -4023 0
4004 4010 -4025 0
c (0<=(aux999 + aux1001 - aux1004))
-4010 4025 0
-4009 4023 0
-4004 4025 0
-4004 -4010 4023 0
-4004 -4009 4021 0
-4003 4023 0
-4003 -4010 4021 0
-4003 -4009 4020 0
c ((SATLiteral(-15) + SATLiteral(-135) - aux1005)<=0)
135 -4027 0
15 -4027 0
15 135 -4028 0
c (0<=(SATLiteral(-15) + SATLiteral(-135) - aux1005))
-135 4028 0
-15 4028 0
-15 -135 4027 0
c ((SATLiteral(-30) + SATLiteral(-120) - aux1006)<=0)
120 -4030 0
30 -4030 0
30 120 -4031 0
c (0<=(SATLiteral(-30) + SATLiteral(-120) - aux1006))
-120 4031 0
-30 4031 0
-30 -120 4030 0
c ((SATLiteral(-60) + SATLiteral(-105) - aux1007)<=0)
105 -4033 0
60 -4033 0
60 105 -4034 0
c (0<=(SATLiteral(-60) + SATLiteral(-105) - aux1007))
-105 4034 0
-60 4034 0
-60 -105 4033 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1008)<=0)
90 -4036 0
75 -4036 0
75 90 -4037 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1008))
-90 4037 0
-75 4037 0
-75 -90 4036 0
c ((SATLiteral(-45) + aux1008 - aux1009)<=0)
4036 -4039 0
4037 -4040 0
45 -4039 0
45 4036 -4040 0
45 4037 -4042 0
c (0<=(SATLiteral(-45) + aux1008 - aux1009))
-4037 4042 0
-4036 4040 0
-45 4042 0
-45 -4037 4040 0
-45 -4036 4039 0
c ((aux1005 + aux1007 - aux1010)<=0)
4033 -4044 0
4034 -4045 0
4027 -4044 0
4027 4033 -4045 0
4027 4034 -4047 0
4028 -4045 0
4028 4033 -4047 0
4028 4034 -4049 0
c (0<=(aux1005 + aux1007 - aux1010))
-4034 4049 0
-4033 4047 0
-4028 4049 0
-4028 -4034 4047 0
-4028 -4033 4045 0
-4027 4047 0
-4027 -4034 4045 0
-4027 -4033 4044 0
c (( - aux1011 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4051 0
-137 -4051 0
-137 -257 -4052 0
c (0<=( - aux1011 + SATLiteral(137) + SATLiteral(257)))
257 4052 0
137 4052 0
137 257 4051 0
c (( - aux1012 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4054 0
-152 -4054 0
-152 -242 -4055 0
c (0<=( - aux1012 + SATLiteral(152) + SATLiteral(242)))
242 4055 0
152 4055 0
152 242 4054 0
c (( - aux1013 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4057 0
-182 -4057 0
-182 -227 -4058 0
c (0<=( - aux1013 + SATLiteral(182) + SATLiteral(227)))
227 4058 0
182 4058 0
182 227 4057 0
c (( - aux1014 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4060 0
-197 -4060 0
-197 -212 -4061 0
c (0<=( - aux1014 + SATLiteral(197) + SATLiteral(212)))
212 4061 0
197 4061 0
197 212 4060 0
c ((aux1014 - aux1015 + SATLiteral(167))<=0)
4060 -4063 0
4061 -4064 0
-167 -4063 0
-167 4060 -4064 0
-167 4061 -4066 0
c (0<=(aux1014 - aux1015 + SATLiteral(167)))
-4061 4066 0
-4060 4064 0
167 4066 0
167 -4061 4064 0
167 -4060 4063 0
c ((aux1011 + aux1013 - aux1016)<=0)
4057 -4068 0
4058 -4069 0
4051 -4068 0
4051 4057 -4069 0
4051 4058 -4071 0
4052 -4069 0
4052 4057 -4071 0
4052 4058 -4073 0
c (0<=(aux1011 + aux1013 - aux1016))
-4058 4073 0
-4057 4071 0
-4052 4073 0
-4052 -4058 4071 0
-4052 -4057 4069 0
-4051 4071 0
-4051 -4058 4069 0
-4051 -4057 4068 0
c (( - aux1017 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4075 0
-139 -4075 0
-139 -259 -4076 0
c (0<=( - aux1017 + SATLiteral(139) + SATLiteral(259)))
259 4076 0
139 4076 0
139 259 4075 0
c (( - aux1018 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4078 0
-154 -4078 0
-154 -244 -4079 0
c (0<=( - aux1018 + SATLiteral(154) + SATLiteral(244)))
244 4079 0
154 4079 0
154 244 4078 0
c (( - aux1019 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4081 0
-184 -4081 0
-184 -229 -4082 0
c (0<=( - aux1019 + SATLiteral(184) + SATLiteral(229)))
229 4082 0
184 4082 0
184 229 4081 0
c (( - aux1020 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4084 0
-199 -4084 0
-199 -214 -4085 0
c (0<=( - aux1020 + SATLiteral(199) + SATLiteral(214)))
214 4085 0
199 4085 0
199 214 4084 0
c ((aux1020 - aux1021 + SATLiteral(169))<=0)
4084 -4087 0
4085 -4088 0
-169 -4087 0
-169 4084 -4088 0
-169 4085 -4090 0
c (0<=(aux1020 - aux1021 + SATLiteral(169)))
-4085 4090 0
-4084 4088 0
169 4090 0
169 -4085 4088 0
169 -4084 4087 0
c ((aux1017 + aux1019 - aux1022)<=0)
4081 -4092 0
4082 -4093 0
4075 -4092 0
4075 4081 -4093 0
4075 4082 -4095 0
4076 -4093 0
4076 4081 -4095 0
4076 4082 -4097 0
c (0<=(aux1017 + aux1019 - aux1022))
-4082 4097 0
-4081 4095 0
-4076 4097 0
-4076 -4082 4095 0
-4076 -4081 4093 0
-4075 4095 0
-4075 -4082 4093 0
-4075 -4081 4092 0
c (( - aux1023 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4099 0
-141 -4099 0
-141 -261 -4100 0
c (0<=( - aux1023 + SATLiteral(141) + SATLiteral(261)))
261 4100 0
141 4100 0
141 261 4099 0
c (( - aux1024 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4102 0
-156 -4102 0
-156 -246 -4103 0
c (0<=( - aux1024 + SATLiteral(156) + SATLiteral(246)))
246 4103 0
156 4103 0
156 246 4102 0
c (( - aux1025 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4105 0
-186 -4105 0
-186 -231 -4106 0
c (0<=( - aux1025 + SATLiteral(186) + SATLiteral(231)))
231 4106 0
186 4106 0
186 231 4105 0
c (( - aux1026 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4108 0
-201 -4108 0
-201 -216 -4109 0
c (0<=( - aux1026 + SATLiteral(201) + SATLiteral(216)))
216 4109 0
201 4109 0
201 216 4108 0
c ((aux1026 - aux1027 + SATLiteral(171))<=0)
4108 -4111 0
4109 -4112 0
-171 -4111 0
-171 4108 -4112 0
-171 4109 -4114 0
c (0<=(aux1026 - aux1027 + SATLiteral(171)))
-4109 4114 0
-4108 4112 0
171 4114 0
171 -4109 4112 0
171 -4108 4111 0
c ((aux1023 + aux1025 - aux1028)<=0)
4105 -4116 0
4106 -4117 0
4099 -4116 0
4099 4105 -4117 0
4099 4106 -4119 0
4100 -4117 0
4100 4105 -4119 0
4100 4106 -4121 0
c (0<=(aux1023 + aux1025 - aux1028))
-4106 4121 0
-4105 4119 0
-4100 4121 0
-4100 -4106 4119 0
-4100 -4105 4117 0
-4099 4119 0
-4099 -4106 4117 0
-4099 -4105 4116 0
c (( - aux1029 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4123 0
-143 -4123 0
-143 -263 -4124 0
c (0<=( - aux1029 + SATLiteral(143) + SATLiteral(263)))
263 4124 0
143 4124 0
143 263 4123 0
c (( - aux1030 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4126 0
-158 -4126 0
-158 -248 -4127 0
c (0<=( - aux1030 + SATLiteral(158) + SATLiteral(248)))
248 4127 0
158 4127 0
158 248 4126 0
c (( - aux1031 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4129 0
-188 -4129 0
-188 -233 -4130 0
c (0<=( - aux1031 + SATLiteral(188) + SATLiteral(233)))
233 4130 0
188 4130 0
188 233 4129 0
c (( - aux1032 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4132 0
-203 -4132 0
-203 -218 -4133 0
c (0<=( - aux1032 + SATLiteral(203) + SATLiteral(218)))
218 4133 0
203 4133 0
203 218 4132 0
c ((aux1032 - aux1033 + SATLiteral(173))<=0)
4132 -4135 0
4133 -4136 0
-173 -4135 0
-173 4132 -4136 0
-173 4133 -4138 0
c (0<=(aux1032 - aux1033 + SATLiteral(173)))
-4133 4138 0
-4132 4136 0
173 4138 0
173 -4133 4136 0
173 -4132 4135 0
c ((aux1029 + aux1031 - aux1034)<=0)
4129 -4140 0
4130 -4141 0
4123 -4140 0
4123 4129 -4141 0
4123 4130 -4143 0
4124 -4141 0
4124 4129 -4143 0
4124 4130 -4145 0
c (0<=(aux1029 + aux1031 - aux1034))
-4130 4145 0
-4129 4143 0
-4124 4145 0
-4124 -4130 4143 0
-4124 -4129 4141 0
-4123 4143 0
-4123 -4130 4141 0
-4123 -4129 4140 0
c (( - aux1035 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4147 0
-145 -4147 0
-145 -265 -4148 0
c (0<=( - aux1035 + SATLiteral(145) + SATLiteral(265)))
265 4148 0
145 4148 0
145 265 4147 0
c (( - aux1036 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4150 0
-160 -4150 0
-160 -250 -4151 0
c (0<=( - aux1036 + SATLiteral(160) + SATLiteral(250)))
250 4151 0
160 4151 0
160 250 4150 0
c (( - aux1037 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4153 0
-190 -4153 0
-190 -235 -4154 0
c (0<=( - aux1037 + SATLiteral(190) + SATLiteral(235)))
235 4154 0
190 4154 0
190 235 4153 0
c (( - aux1038 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4156 0
-205 -4156 0
-205 -220 -4157 0
c (0<=( - aux1038 + SATLiteral(205) + SATLiteral(220)))
220 4157 0
205 4157 0
205 220 4156 0
c ((aux1038 - aux1039 + SATLiteral(175))<=0)
4156 -4159 0
4157 -4160 0
-175 -4159 0
-175 4156 -4160 0
-175 4157 -4162 0
c (0<=(aux1038 - aux1039 + SATLiteral(175)))
-4157 4162 0
-4156 4160 0
175 4162 0
175 -4157 4160 0
175 -4156 4159 0
c ((aux1035 + aux1037 - aux1040)<=0)
4153 -4164 0
4154 -4165 0
4147 -4164 0
4147 4153 -4165 0
4147 4154 -4167 0
4148 -4165 0
4148 4153 -4167 0
4148 4154 -4169 0
c (0<=(aux1035 + aux1037 - aux1040))
-4154 4169 0
-4153 4167 0
-4148 4169 0
-4148 -4154 4167 0
-4148 -4153 4165 0
-4147 4167 0
-4147 -4154 4165 0
-4147 -4153 4164 0
c (( - aux1041 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4171 0
-147 -4171 0
-147 -267 -4172 0
c (0<=( - aux1041 + SATLiteral(147) + SATLiteral(267)))
267 4172 0
147 4172 0
147 267 4171 0
c (( - aux1042 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4174 0
-162 -4174 0
-162 -252 -4175 0
c (0<=( - aux1042 + SATLiteral(162) + SATLiteral(252)))
252 4175 0
162 4175 0
162 252 4174 0
c (( - aux1043 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4177 0
-192 -4177 0
-192 -237 -4178 0
c (0<=( - aux1043 + SATLiteral(192) + SATLiteral(237)))
237 4178 0
192 4178 0
192 237 4177 0
c (( - aux1044 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4180 0
-207 -4180 0
-207 -222 -4181 0
c (0<=( - aux1044 + SATLiteral(207) + SATLiteral(222)))
222 4181 0
207 4181 0
207 222 4180 0
c ((aux1044 - aux1045 + SATLiteral(177))<=0)
4180 -4183 0
4181 -4184 0
-177 -4183 0
-177 4180 -4184 0
-177 4181 -4186 0
c (0<=(aux1044 - aux1045 + SATLiteral(177)))
-4181 4186 0
-4180 4184 0
177 4186 0
177 -4181 4184 0
177 -4180 4183 0
c ((aux1041 + aux1043 - aux1046)<=0)
4177 -4188 0
4178 -4189 0
4171 -4188 0
4171 4177 -4189 0
4171 4178 -4191 0
4172 -4189 0
4172 4177 -4191 0
4172 4178 -4193 0
c (0<=(aux1041 + aux1043 - aux1046))
-4178 4193 0
-4177 4191 0
-4172 4193 0
-4172 -4178 4191 0
-4172 -4177 4189 0
-4171 4191 0
-4171 -4178 4189 0
-4171 -4177 4188 0
c (( - aux1047 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4195 0
-149 -4195 0
-149 -269 -4196 0
c (0<=( - aux1047 + SATLiteral(149) + SATLiteral(269)))
269 4196 0
149 4196 0
149 269 4195 0
c (( - aux1048 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4198 0
-164 -4198 0
-164 -254 -4199 0
c (0<=( - aux1048 + SATLiteral(164) + SATLiteral(254)))
254 4199 0
164 4199 0
164 254 4198 0
c (( - aux1049 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4201 0
-194 -4201 0
-194 -239 -4202 0
c (0<=( - aux1049 + SATLiteral(194) + SATLiteral(239)))
239 4202 0
194 4202 0
194 239 4201 0
c (( - aux1050 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4204 0
-209 -4204 0
-209 -224 -4205 0
c (0<=( - aux1050 + SATLiteral(209) + SATLiteral(224)))
224 4205 0
209 4205 0
209 224 4204 0
c ((aux1050 - aux1051 + SATLiteral(179))<=0)
4204 -4207 0
4205 -4208 0
-179 -4207 0
-179 4204 -4208 0
-179 4205 -4210 0
c (0<=(aux1050 - aux1051 + SATLiteral(179)))
-4205 4210 0
-4204 4208 0
179 4210 0
179 -4205 4208 0
179 -4204 4207 0
c ((aux1047 + aux1049 - aux1052)<=0)
4201 -4212 0
4202 -4213 0
4195 -4212 0
4195 4201 -4213 0
4195 4202 -4215 0
4196 -4213 0
4196 4201 -4215 0
4196 4202 -4217 0
c (0<=(aux1047 + aux1049 - aux1052))
-4202 4217 0
-4201 4215 0
-4196 4217 0
-4196 -4202 4215 0
-4196 -4201 4213 0
-4195 4215 0
-4195 -4202 4213 0
-4195 -4201 4212 0
c (( - aux1053 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4219 0
-151 -4219 0
-151 -271 -4220 0
c (0<=( - aux1053 + SATLiteral(151) + SATLiteral(271)))
271 4220 0
151 4220 0
151 271 4219 0
c (( - aux1054 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4222 0
-166 -4222 0
-166 -256 -4223 0
c (0<=( - aux1054 + SATLiteral(166) + SATLiteral(256)))
256 4223 0
166 4223 0
166 256 4222 0
c (( - aux1055 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4225 0
-196 -4225 0
-196 -241 -4226 0
c (0<=( - aux1055 + SATLiteral(196) + SATLiteral(241)))
241 4226 0
196 4226 0
196 241 4225 0
c (( - aux1056 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4228 0
-211 -4228 0
-211 -226 -4229 0
c (0<=( - aux1056 + SATLiteral(211) + SATLiteral(226)))
226 4229 0
211 4229 0
211 226 4228 0
c ((aux1056 - aux1057 + SATLiteral(181))<=0)
4228 -4231 0
4229 -4232 0
-181 -4231 0
-181 4228 -4232 0
-181 4229 -4234 0
c (0<=(aux1056 - aux1057 + SATLiteral(181)))
-4229 4234 0
-4228 4232 0
181 4234 0
181 -4229 4232 0
181 -4228 4231 0
c ((aux1053 + aux1055 - aux1058)<=0)
4225 -4236 0
4226 -4237 0
4219 -4236 0
4219 4225 -4237 0
4219 4226 -4239 0
4220 -4237 0
4220 4225 -4239 0
4220 4226 -4241 0
c (0<=(aux1053 + aux1055 - aux1058))
-4226 4241 0
-4225 4239 0
-4220 4241 0
-4220 -4226 4239 0
-4220 -4225 4237 0
-4219 4239 0
-4219 -4226 4237 0
-4219 -4225 4236 0
c (( - aux1059 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4243 0
150 -4243 0
150 270 -4244 0
c (0<=( - aux1059 + SATLiteral(-150) + SATLiteral(-270)))
-270 4244 0
-150 4244 0
-150 -270 4243 0
c (( - aux1060 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4246 0
165 -4246 0
165 255 -4247 0
c (0<=( - aux1060 + SATLiteral(-165) + SATLiteral(-255)))
-255 4247 0
-165 4247 0
-165 -255 4246 0
c (( - aux1061 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4249 0
195 -4249 0
195 240 -4250 0
c (0<=( - aux1061 + SATLiteral(-195) + SATLiteral(-240)))
-240 4250 0
-195 4250 0
-195 -240 4249 0
c (( - aux1062 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4252 0
210 -4252 0
210 225 -4253 0
c (0<=( - aux1062 + SATLiteral(-210) + SATLiteral(-225)))
-225 4253 0
-210 4253 0
-210 -225 4252 0
c ((aux1062 - aux1063 + SATLiteral(-180))<=0)
4252 -4255 0
4253 -4256 0
180 -4255 0
180 4252 -4256 0
180 4253 -4258 0
c (0<=(aux1062 - aux1063 + SATLiteral(-180)))
-4253 4258 0
-4252 4256 0
-180 4258 0
-180 -4253 4256 0
-180 -4252 4255 0
c ((aux1059 + aux1061 - aux1064)<=0)
4249 -4260 0
4250 -4261 0
4243 -4260 0
4243 4249 -4261 0
4243 4250 -4263 0
4244 -4261 0
4244 4249 -4263 0
4244 4250 -4265 0
c (0<=(aux1059 + aux1061 - aux1064))
-4250 4265 0
-4249 4263 0
-4244 4265 0
-4244 -4250 4263 0
-4244 -4249 4261 0
-4243 4263 0
-4243 -4250 4261 0
-4243 -4249 4260 0
c ((SATLiteral(272) + SATLiteral(392) - aux1065)<=0)
-392 -4267 0
-272 -4267 0
-272 -392 -4268 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1065))
392 4268 0
272 4268 0
272 392 4267 0
c ((SATLiteral(287) + SATLiteral(377) - aux1066)<=0)
-377 -4270 0
-287 -4270 0
-287 -377 -4271 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1066))
377 4271 0
287 4271 0
287 377 4270 0
c ((SATLiteral(317) + SATLiteral(362) - aux1067)<=0)
-362 -4273 0
-317 -4273 0
-317 -362 -4274 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1067))
362 4274 0
317 4274 0
317 362 4273 0
c ((SATLiteral(332) + SATLiteral(347) - aux1068)<=0)
-347 -4276 0
-332 -4276 0
-332 -347 -4277 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1068))
347 4277 0
332 4277 0
332 347 4276 0
c ((SATLiteral(302) + aux1068 - aux1069)<=0)
4276 -4279 0
4277 -4280 0
-302 -4279 0
-302 4276 -4280 0
-302 4277 -4282 0
c (0<=(SATLiteral(302) + aux1068 - aux1069))
-4277 4282 0
-4276 4280 0
302 4282 0
302 -4277 4280 0
302 -4276 4279 0
c ((aux1065 + aux1067 - aux1070)<=0)
4273 -4284 0
4274 -4285 0
4267 -4284 0
4267 4273 -4285 0
4267 4274 -4287 0
4268 -4285 0
4268 4273 -4287 0
4268 4274 -4289 0
c (0<=(aux1065 + aux1067 - aux1070))
-4274 4289 0
-4273 4287 0
-4268 4289 0
-4268 -4274 4287 0
-4268 -4273 4285 0
-4267 4287 0
-4267 -4274 4285 0
-4267 -4273 4284 0
c ((SATLiteral(274) + SATLiteral(394) - aux1071)<=0)
-394 -4291 0
-274 -4291 0
-274 -394 -4292 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1071))
394 4292 0
274 4292 0
274 394 4291 0
c ((SATLiteral(289) + SATLiteral(379) - aux1072)<=0)
-379 -4294 0
-289 -4294 0
-289 -379 -4295 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1072))
379 4295 0
289 4295 0
289 379 4294 0
c ((SATLiteral(319) + SATLiteral(364) - aux1073)<=0)
-364 -4297 0
-319 -4297 0
-319 -364 -4298 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1073))
364 4298 0
319 4298 0
319 364 4297 0
c ((SATLiteral(334) + SATLiteral(349) - aux1074)<=0)
-349 -4300 0
-334 -4300 0
-334 -349 -4301 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1074))
349 4301 0
334 4301 0
334 349 4300 0
c ((SATLiteral(304) + aux1074 - aux1075)<=0)
4300 -4303 0
4301 -4304 0
-304 -4303 0
-304 4300 -4304 0
-304 4301 -4306 0
c (0<=(SATLiteral(304) + aux1074 - aux1075))
-4301 4306 0
-4300 4304 0
304 4306 0
304 -4301 4304 0
304 -4300 4303 0
c ((aux1071 + aux1073 - aux1076)<=0)
4297 -4308 0
4298 -4309 0
4291 -4308 0
4291 4297 -4309 0
4291 4298 -4311 0
4292 -4309 0
4292 4297 -4311 0
4292 4298 -4313 0
c (0<=(aux1071 + aux1073 - aux1076))
-4298 4313 0
-4297 4311 0
-4292 4313 0
-4292 -4298 4311 0
-4292 -4297 4309 0
-4291 4311 0
-4291 -4298 4309 0
-4291 -4297 4308 0
c ((SATLiteral(276) + SATLiteral(396) - aux1077)<=0)
-396 -4315 0
-276 -4315 0
-276 -396 -4316 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1077))
396 4316 0
276 4316 0
276 396 4315 0
c ((SATLiteral(291) + SATLiteral(381) - aux1078)<=0)
-381 -4318 0
-291 -4318 0
-291 -381 -4319 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1078))
381 4319 0
291 4319 0
291 381 4318 0
c ((SATLiteral(321) + SATLiteral(366) - aux1079)<=0)
-366 -4321 0
-321 -4321 0
-321 -366 -4322 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1079))
366 4322 0
321 4322 0
321 366 4321 0
c ((SATLiteral(336) + SATLiteral(351) - aux1080)<=0)
-351 -4324 0
-336 -4324 0
-336 -351 -4325 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1080))
351 4325 0
336 4325 0
336 351 4324 0
c ((SATLiteral(306) + aux1080 - aux1081)<=0)
4324 -4327 0
4325 -4328 0
-306 -4327 0
-306 4324 -4328 0
-306 4325 -4330 0
c (0<=(SATLiteral(306) + aux1080 - aux1081))
-4325 4330 0
-4324 4328 0
306 4330 0
306 -4325 4328 0
306 -4324 4327 0
c ((aux1077 + aux1079 - aux1082)<=0)
4321 -4332 0
4322 -4333 0
4315 -4332 0
4315 4321 -4333 0
4315 4322 -4335 0
4316 -4333 0
4316 4321 -4335 0
4316 4322 -4337 0
c (0<=(aux1077 + aux1079 - aux1082))
-4322 4337 0
-4321 4335 0
-4316 4337 0
-4316 -4322 4335 0
-4316 -4321 4333 0
-4315 4335 0
-4315 -4322 4333 0
-4315 -4321 4332 0
c ((SATLiteral(278) + SATLiteral(398) - aux1083)<=0)
-398 -4339 0
-278 -4339 0
-278 -398 -4340 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1083))
398 4340 0
278 4340 0
278 398 4339 0
c ((SATLiteral(293) + SATLiteral(383) - aux1084)<=0)
-383 -4342 0
-293 -4342 0
-293 -383 -4343 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1084))
383 4343 0
293 4343 0
293 383 4342 0
c ((SATLiteral(323) + SATLiteral(368) - aux1085)<=0)
-368 -4345 0
-323 -4345 0
-323 -368 -4346 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1085))
368 4346 0
323 4346 0
323 368 4345 0
c ((SATLiteral(338) + SATLiteral(353) - aux1086)<=0)
-353 -4348 0
-338 -4348 0
-338 -353 -4349 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1086))
353 4349 0
338 4349 0
338 353 4348 0
c ((SATLiteral(308) + aux1086 - aux1087)<=0)
4348 -4351 0
4349 -4352 0
-308 -4351 0
-308 4348 -4352 0
-308 4349 -4354 0
c (0<=(SATLiteral(308) + aux1086 - aux1087))
-4349 4354 0
-4348 4352 0
308 4354 0
308 -4349 4352 0
308 -4348 4351 0
c ((aux1083 + aux1085 - aux1088)<=0)
4345 -4356 0
4346 -4357 0
4339 -4356 0
4339 4345 -4357 0
4339 4346 -4359 0
4340 -4357 0
4340 4345 -4359 0
4340 4346 -4361 0
c (0<=(aux1083 + aux1085 - aux1088))
-4346 4361 0
-4345 4359 0
-4340 4361 0
-4340 -4346 4359 0
-4340 -4345 4357 0
-4339 4359 0
-4339 -4346 4357 0
-4339 -4345 4356 0
c ((SATLiteral(280) + SATLiteral(400) - aux1089)<=0)
-400 -4363 0
-280 -4363 0
-280 -400 -4364 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1089))
400 4364 0
280 4364 0
280 400 4363 0
c ((SATLiteral(295) + SATLiteral(385) - aux1090)<=0)
-385 -4366 0
-295 -4366 0
-295 -385 -4367 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1090))
385 4367 0
295 4367 0
295 385 4366 0
c ((SATLiteral(325) + SATLiteral(370) - aux1091)<=0)
-370 -4369 0
-325 -4369 0
-325 -370 -4370 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1091))
370 4370 0
325 4370 0
325 370 4369 0
c ((SATLiteral(340) + SATLiteral(355) - aux1092)<=0)
-355 -4372 0
-340 -4372 0
-340 -355 -4373 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1092))
355 4373 0
340 4373 0
340 355 4372 0
c ((SATLiteral(310) + aux1092 - aux1093)<=0)
4372 -4375 0
4373 -4376 0
-310 -4375 0
-310 4372 -4376 0
-310 4373 -4378 0
c (0<=(SATLiteral(310) + aux1092 - aux1093))
-4373 4378 0
-4372 4376 0
310 4378 0
310 -4373 4376 0
310 -4372 4375 0
c ((aux1089 + aux1091 - aux1094)<=0)
4369 -4380 0
4370 -4381 0
4363 -4380 0
4363 4369 -4381 0
4363 4370 -4383 0
4364 -4381 0
4364 4369 -4383 0
4364 4370 -4385 0
c (0<=(aux1089 + aux1091 - aux1094))
-4370 4385 0
-4369 4383 0
-4364 4385 0
-4364 -4370 4383 0
-4364 -4369 4381 0
-4363 4383 0
-4363 -4370 4381 0
-4363 -4369 4380 0
c ((SATLiteral(282) + SATLiteral(402) - aux1095)<=0)
-402 -4387 0
-282 -4387 0
-282 -402 -4388 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1095))
402 4388 0
282 4388 0
282 402 4387 0
c ((SATLiteral(297) + SATLiteral(387) - aux1096)<=0)
-387 -4390 0
-297 -4390 0
-297 -387 -4391 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1096))
387 4391 0
297 4391 0
297 387 4390 0
c ((SATLiteral(327) + SATLiteral(372) - aux1097)<=0)
-372 -4393 0
-327 -4393 0
-327 -372 -4394 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1097))
372 4394 0
327 4394 0
327 372 4393 0
c ((SATLiteral(342) + SATLiteral(357) - aux1098)<=0)
-357 -4396 0
-342 -4396 0
-342 -357 -4397 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1098))
357 4397 0
342 4397 0
342 357 4396 0
c ((SATLiteral(312) + aux1098 - aux1099)<=0)
4396 -4399 0
4397 -4400 0
-312 -4399 0
-312 4396 -4400 0
-312 4397 -4402 0
c (0<=(SATLiteral(312) + aux1098 - aux1099))
-4397 4402 0
-4396 4400 0
312 4402 0
312 -4397 4400 0
312 -4396 4399 0
c ((aux1095 + aux1097 - aux1100)<=0)
4393 -4404 0
4394 -4405 0
4387 -4404 0
4387 4393 -4405 0
4387 4394 -4407 0
4388 -4405 0
4388 4393 -4407 0
4388 4394 -4409 0
c (0<=(aux1095 + aux1097 - aux1100))
-4394 4409 0
-4393 4407 0
-4388 4409 0
-4388 -4394 4407 0
-4388 -4393 4405 0
-4387 4407 0
-4387 -4394 4405 0
-4387 -4393 4404 0
c ((SATLiteral(284) + SATLiteral(404) - aux1101)<=0)
-404 -4411 0
-284 -4411 0
-284 -404 -4412 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1101))
404 4412 0
284 4412 0
284 404 4411 0
c ((SATLiteral(299) + SATLiteral(389) - aux1102)<=0)
-389 -4414 0
-299 -4414 0
-299 -389 -4415 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1102))
389 4415 0
299 4415 0
299 389 4414 0
c ((SATLiteral(329) + SATLiteral(374) - aux1103)<=0)
-374 -4417 0
-329 -4417 0
-329 -374 -4418 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1103))
374 4418 0
329 4418 0
329 374 4417 0
c ((SATLiteral(344) + SATLiteral(359) - aux1104)<=0)
-359 -4420 0
-344 -4420 0
-344 -359 -4421 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1104))
359 4421 0
344 4421 0
344 359 4420 0
c ((SATLiteral(314) + aux1104 - aux1105)<=0)
4420 -4423 0
4421 -4424 0
-314 -4423 0
-314 4420 -4424 0
-314 4421 -4426 0
c (0<=(SATLiteral(314) + aux1104 - aux1105))
-4421 4426 0
-4420 4424 0
314 4426 0
314 -4421 4424 0
314 -4420 4423 0
c ((aux1101 + aux1103 - aux1106)<=0)
4417 -4428 0
4418 -4429 0
4411 -4428 0
4411 4417 -4429 0
4411 4418 -4431 0
4412 -4429 0
4412 4417 -4431 0
4412 4418 -4433 0
c (0<=(aux1101 + aux1103 - aux1106))
-4418 4433 0
-4417 4431 0
-4412 4433 0
-4412 -4418 4431 0
-4412 -4417 4429 0
-4411 4431 0
-4411 -4418 4429 0
-4411 -4417 4428 0
c ((SATLiteral(286) + SATLiteral(406) - aux1107)<=0)
-406 -4435 0
-286 -4435 0
-286 -406 -4436 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1107))
406 4436 0
286 4436 0
286 406 4435 0
c ((SATLiteral(301) + SATLiteral(391) - aux1108)<=0)
-391 -4438 0
-301 -4438 0
-301 -391 -4439 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1108))
391 4439 0
301 4439 0
301 391 4438 0
c ((SATLiteral(331) + SATLiteral(376) - aux1109)<=0)
-376 -4441 0
-331 -4441 0
-331 -376 -4442 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1109))
376 4442 0
331 4442 0
331 376 4441 0
c ((SATLiteral(346) + SATLiteral(361) - aux1110)<=0)
-361 -4444 0
-346 -4444 0
-346 -361 -4445 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1110))
361 4445 0
346 4445 0
346 361 4444 0
c ((SATLiteral(316) + aux1110 - aux1111)<=0)
4444 -4447 0
4445 -4448 0
-316 -4447 0
-316 4444 -4448 0
-316 4445 -4450 0
c (0<=(SATLiteral(316) + aux1110 - aux1111))
-4445 4450 0
-4444 4448 0
316 4450 0
316 -4445 4448 0
316 -4444 4447 0
c ((aux1107 + aux1109 - aux1112)<=0)
4441 -4452 0
4442 -4453 0
4435 -4452 0
4435 4441 -4453 0
4435 4442 -4455 0
4436 -4453 0
4436 4441 -4455 0
4436 4442 -4457 0
c (0<=(aux1107 + aux1109 - aux1112))
-4442 4457 0
-4441 4455 0
-4436 4457 0
-4436 -4442 4455 0
-4436 -4441 4453 0
-4435 4455 0
-4435 -4442 4453 0
-4435 -4441 4452 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1113)<=0)
405 -4459 0
285 -4459 0
285 405 -4460 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1113))
-405 4460 0
-285 4460 0
-285 -405 4459 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1114)<=0)
390 -4462 0
300 -4462 0
300 390 -4463 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1114))
-390 4463 0
-300 4463 0
-300 -390 4462 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1115)<=0)
375 -4465 0
330 -4465 0
330 375 -4466 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1115))
-375 4466 0
-330 4466 0
-330 -375 4465 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1116)<=0)
360 -4468 0
345 -4468 0
345 360 -4469 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1116))
-360 4469 0
-345 4469 0
-345 -360 4468 0
c ((SATLiteral(-315) + aux1116 - aux1117)<=0)
4468 -4471 0
4469 -4472 0
315 -4471 0
315 4468 -4472 0
315 4469 -4474 0
c (0<=(SATLiteral(-315) + aux1116 - aux1117))
-4469 4474 0
-4468 4472 0
-315 4474 0
-315 -4469 4472 0
-315 -4468 4471 0
c ((aux1113 + aux1115 - aux1118)<=0)
4465 -4476 0
4466 -4477 0
4459 -4476 0
4459 4465 -4477 0
4459 4466 -4479 0
4460 -4477 0
4460 4465 -4479 0
4460 4466 -4481 0
c (0<=(aux1113 + aux1115 - aux1118))
-4466 4481 0
-4465 4479 0
-4460 4481 0
-4460 -4466 4479 0
-4460 -4465 4477 0
-4459 4479 0
-4459 -4466 4477 0
-4459 -4465 4476 0
c (( - aux1119 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4483 0
-407 -4483 0
-407 -527 -4484 0
c (0<=( - aux1119 + SATLiteral(407) + SATLiteral(527)))
527 4484 0
407 4484 0
407 527 4483 0
c (( - aux1120 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4486 0
-422 -4486 0
-422 -512 -4487 0
c (0<=( - aux1120 + SATLiteral(422) + SATLiteral(512)))
512 4487 0
422 4487 0
422 512 4486 0
c (( - aux1121 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4489 0
-452 -4489 0
-452 -497 -4490 0
c (0<=( - aux1121 + SATLiteral(452) + SATLiteral(497)))
497 4490 0
452 4490 0
452 497 4489 0
c (( - aux1122 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4492 0
-467 -4492 0
-467 -482 -4493 0
c (0<=( - aux1122 + SATLiteral(467) + SATLiteral(482)))
482 4493 0
467 4493 0
467 482 4492 0
c ((aux1122 - aux1123 + SATLiteral(437))<=0)
4492 -4495 0
4493 -4496 0
-437 -4495 0
-437 4492 -4496 0
-437 4493 -4498 0
c (0<=(aux1122 - aux1123 + SATLiteral(437)))
-4493 4498 0
-4492 4496 0
437 4498 0
437 -4493 4496 0
437 -4492 4495 0
c ((aux1119 + aux1121 - aux1124)<=0)
4489 -4500 0
4490 -4501 0
4483 -4500 0
4483 4489 -4501 0
4483 4490 -4503 0
4484 -4501 0
4484 4489 -4503 0
4484 4490 -4505 0
c (0<=(aux1119 + aux1121 - aux1124))
-4490 4505 0
-4489 4503 0
-4484 4505 0
-4484 -4490 4503 0
-4484 -4489 4501 0
-4483 4503 0
-4483 -4490 4501 0
-4483 -4489 4500 0
c (( - aux1125 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4507 0
-409 -4507 0
-409 -529 -4508 0
c (0<=( - aux1125 + SATLiteral(409) + SATLiteral(529)))
529 4508 0
409 4508 0
409 529 4507 0
c (( - aux1126 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4510 0
-424 -4510 0
-424 -514 -4511 0
c (0<=( - aux1126 + SATLiteral(424) + SATLiteral(514)))
514 4511 0
424 4511 0
424 514 4510 0
c (( - aux1127 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4513 0
-454 -4513 0
-454 -499 -4514 0
c (0<=( - aux1127 + SATLiteral(454) + SATLiteral(499)))
499 4514 0
454 4514 0
454 499 4513 0
c (( - aux1128 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4516 0
-469 -4516 0
-469 -484 -4517 0
c (0<=( - aux1128 + SATLiteral(469) + SATLiteral(484)))
484 4517 0
469 4517 0
469 484 4516 0
c ((aux1128 - aux1129 + SATLiteral(439))<=0)
4516 -4519 0
4517 -4520 0
-439 -4519 0
-439 4516 -4520 0
-439 4517 -4522 0
c (0<=(aux1128 - aux1129 + SATLiteral(439)))
-4517 4522 0
-4516 4520 0
439 4522 0
439 -4517 4520 0
439 -4516 4519 0
c ((aux1125 + aux1127 - aux1130)<=0)
4513 -4524 0
4514 -4525 0
4507 -4524 0
4507 4513 -4525 0
4507 4514 -4527 0
4508 -4525 0
4508 4513 -4527 0
4508 4514 -4529 0
c (0<=(aux1125 + aux1127 - aux1130))
-4514 4529 0
-4513 4527 0
-4508 4529 0
-4508 -4514 4527 0
-4508 -4513 4525 0
-4507 4527 0
-4507 -4514 4525 0
-4507 -4513 4524 0
c (( - aux1131 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4531 0
-411 -4531 0
-411 -531 -4532 0
c (0<=( - aux1131 + SATLiteral(411) + SATLiteral(531)))
531 4532 0
411 4532 0
411 531 4531 0
c (( - aux1132 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4534 0
-426 -4534 0
-426 -516 -4535 0
c (0<=( - aux1132 + SATLiteral(426) + SATLiteral(516)))
516 4535 0
426 4535 0
426 516 4534 0
c (( - aux1133 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4537 0
-456 -4537 0
-456 -501 -4538 0
c (0<=( - aux1133 + SATLiteral(456) + SATLiteral(501)))
501 4538 0
456 4538 0
456 501 4537 0
c (( - aux1134 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4540 0
-471 -4540 0
-471 -486 -4541 0
c (0<=( - aux1134 + SATLiteral(471) + SATLiteral(486)))
486 4541 0
471 4541 0
471 486 4540 0
c ((aux1134 - aux1135 + SATLiteral(441))<=0)
4540 -4543 0
4541 -4544 0
-441 -4543 0
-441 4540 -4544 0
-441 4541 -4546 0
c (0<=(aux1134 - aux1135 + SATLiteral(441)))
-4541 4546 0
-4540 4544 0
441 4546 0
441 -4541 4544 0
441 -4540 4543 0
c ((aux1131 + aux1133 - aux1136)<=0)
4537 -4548 0
4538 -4549 0
4531 -4548 0
4531 4537 -4549 0
4531 4538 -4551 0
4532 -4549 0
4532 4537 -4551 0
4532 4538 -4553 0
c (0<=(aux1131 + aux1133 - aux1136))
-4538 4553 0
-4537 4551 0
-4532 4553 0
-4532 -4538 4551 0
-4532 -4537 4549 0
-4531 4551 0
-4531 -4538 4549 0
-4531 -4537 4548 0
c (( - aux1137 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4555 0
-413 -4555 0
-413 -533 -4556 0
c (0<=( - aux1137 + SATLiteral(413) + SATLiteral(533)))
533 4556 0
413 4556 0
413 533 4555 0
c (( - aux1138 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4558 0
-428 -4558 0
-428 -518 -4559 0
c (0<=( - aux1138 + SATLiteral(428) + SATLiteral(518)))
518 4559 0
428 4559 0
428 518 4558 0
c (( - aux1139 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4561 0
-458 -4561 0
-458 -503 -4562 0
c (0<=( - aux1139 + SATLiteral(458) + SATLiteral(503)))
503 4562 0
458 4562 0
458 503 4561 0
c (( - aux1140 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4564 0
-473 -4564 0
-473 -488 -4565 0
c (0<=( - aux1140 + SATLiteral(473) + SATLiteral(488)))
488 4565 0
473 4565 0
473 488 4564 0
c ((aux1140 - aux1141 + SATLiteral(443))<=0)
4564 -4567 0
4565 -4568 0
-443 -4567 0
-443 4564 -4568 0
-443 4565 -4570 0
c (0<=(aux1140 - aux1141 + SATLiteral(443)))
-4565 4570 0
-4564 4568 0
443 4570 0
443 -4565 4568 0
443 -4564 4567 0
c ((aux1137 + aux1139 - aux1142)<=0)
4561 -4572 0
4562 -4573 0
4555 -4572 0
4555 4561 -4573 0
4555 4562 -4575 0
4556 -4573 0
4556 4561 -4575 0
4556 4562 -4577 0
c (0<=(aux1137 + aux1139 - aux1142))
-4562 4577 0
-4561 4575 0
-4556 4577 0
-4556 -4562 4575 0
-4556 -4561 4573 0
-4555 4575 0
-4555 -4562 4573 0
-4555 -4561 4572 0
c (( - aux1143 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4579 0
-415 -4579 0
-415 -535 -4580 0
c (0<=( - aux1143 + SATLiteral(415) + SATLiteral(535)))
535 4580 0
415 4580 0
415 535 4579 0
c (( - aux1144 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4582 0
-430 -4582 0
-430 -520 -4583 0
c (0<=( - aux1144 + SATLiteral(430) + SATLiteral(520)))
520 4583 0
430 4583 0
430 520 4582 0
c (( - aux1145 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4585 0
-460 -4585 0
-460 -505 -4586 0
c (0<=( - aux1145 + SATLiteral(460) + SATLiteral(505)))
505 4586 0
460 4586 0
460 505 4585 0
c (( - aux1146 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4588 0
-475 -4588 0
-475 -490 -4589 0
c (0<=( - aux1146 + SATLiteral(475) + SATLiteral(490)))
490 4589 0
475 4589 0
475 490 4588 0
c ((aux1146 - aux1147 + SATLiteral(445))<=0)
4588 -4591 0
4589 -4592 0
-445 -4591 0
-445 4588 -4592 0
-445 4589 -4594 0
c (0<=(aux1146 - aux1147 + SATLiteral(445)))
-4589 4594 0
-4588 4592 0
445 4594 0
445 -4589 4592 0
445 -4588 4591 0
c ((aux1143 + aux1145 - aux1148)<=0)
4585 -4596 0
4586 -4597 0
4579 -4596 0
4579 4585 -4597 0
4579 4586 -4599 0
4580 -4597 0
4580 4585 -4599 0
4580 4586 -4601 0
c (0<=(aux1143 + aux1145 - aux1148))
-4586 4601 0
-4585 4599 0
-4580 4601 0
-4580 -4586 4599 0
-4580 -4585 4597 0
-4579 4599 0
-4579 -4586 4597 0
-4579 -4585 4596 0
c (( - aux1149 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4603 0
-417 -4603 0
-417 -537 -4604 0
c (0<=( - aux1149 + SATLiteral(417) + SATLiteral(537)))
537 4604 0
417 4604 0
417 537 4603 0
c (( - aux1150 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4606 0
-432 -4606 0
-432 -522 -4607 0
c (0<=( - aux1150 + SATLiteral(432) + SATLiteral(522)))
522 4607 0
432 4607 0
432 522 4606 0
c (( - aux1151 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4609 0
-462 -4609 0
-462 -507 -4610 0
c (0<=( - aux1151 + SATLiteral(462) + SATLiteral(507)))
507 4610 0
462 4610 0
462 507 4609 0
c (( - aux1152 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4612 0
-477 -4612 0
-477 -492 -4613 0
c (0<=( - aux1152 + SATLiteral(477) + SATLiteral(492)))
492 4613 0
477 4613 0
477 492 4612 0
c ((aux1152 - aux1153 + SATLiteral(447))<=0)
4612 -4615 0
4613 -4616 0
-447 -4615 0
-447 4612 -4616 0
-447 4613 -4618 0
c (0<=(aux1152 - aux1153 + SATLiteral(447)))
-4613 4618 0
-4612 4616 0
447 4618 0
447 -4613 4616 0
447 -4612 4615 0
c ((aux1149 + aux1151 - aux1154)<=0)
4609 -4620 0
4610 -4621 0
4603 -4620 0
4603 4609 -4621 0
4603 4610 -4623 0
4604 -4621 0
4604 4609 -4623 0
4604 4610 -4625 0
c (0<=(aux1149 + aux1151 - aux1154))
-4610 4625 0
-4609 4623 0
-4604 4625 0
-4604 -4610 4623 0
-4604 -4609 4621 0
-4603 4623 0
-4603 -4610 4621 0
-4603 -4609 4620 0
c (( - aux1155 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4627 0
-419 -4627 0
-419 -539 -4628 0
c (0<=( - aux1155 + SATLiteral(419) + SATLiteral(539)))
539 4628 0
419 4628 0
419 539 4627 0
c (( - aux1156 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4630 0
-434 -4630 0
-434 -524 -4631 0
c (0<=( - aux1156 + SATLiteral(434) + SATLiteral(524)))
524 4631 0
434 4631 0
434 524 4630 0
c (( - aux1157 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4633 0
-464 -4633 0
-464 -509 -4634 0
c (0<=( - aux1157 + SATLiteral(464) + SATLiteral(509)))
509 4634 0
464 4634 0
464 509 4633 0
c (( - aux1158 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4636 0
-479 -4636 0
-479 -494 -4637 0
c (0<=( - aux1158 + SATLiteral(479) + SATLiteral(494)))
494 4637 0
479 4637 0
479 494 4636 0
c ((aux1158 - aux1159 + SATLiteral(449))<=0)
4636 -4639 0
4637 -4640 0
-449 -4639 0
-449 4636 -4640 0
-449 4637 -4642 0
c (0<=(aux1158 - aux1159 + SATLiteral(449)))
-4637 4642 0
-4636 4640 0
449 4642 0
449 -4637 4640 0
449 -4636 4639 0
c ((aux1155 + aux1157 - aux1160)<=0)
4633 -4644 0
4634 -4645 0
4627 -4644 0
4627 4633 -4645 0
4627 4634 -4647 0
4628 -4645 0
4628 4633 -4647 0
4628 4634 -4649 0
c (0<=(aux1155 + aux1157 - aux1160))
-4634 4649 0
-4633 4647 0
-4628 4649 0
-4628 -4634 4647 0
-4628 -4633 4645 0
-4627 4647 0
-4627 -4634 4645 0
-4627 -4633 4644 0
c (( - aux1161 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4651 0
-421 -4651 0
-421 -541 -4652 0
c (0<=( - aux1161 + SATLiteral(421) + SATLiteral(541)))
541 4652 0
421 4652 0
421 541 4651 0
c (( - aux1162 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4654 0
-436 -4654 0
-436 -526 -4655 0
c (0<=( - aux1162 + SATLiteral(436) + SATLiteral(526)))
526 4655 0
436 4655 0
436 526 4654 0
c (( - aux1163 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4657 0
-466 -4657 0
-466 -511 -4658 0
c (0<=( - aux1163 + SATLiteral(466) + SATLiteral(511)))
511 4658 0
466 4658 0
466 511 4657 0
c (( - aux1164 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4660 0
-481 -4660 0
-481 -496 -4661 0
c (0<=( - aux1164 + SATLiteral(481) + SATLiteral(496)))
496 4661 0
481 4661 0
481 496 4660 0
c ((aux1164 - aux1165 + SATLiteral(451))<=0)
4660 -4663 0
4661 -4664 0
-451 -4663 0
-451 4660 -4664 0
-451 4661 -4666 0
c (0<=(aux1164 - aux1165 + SATLiteral(451)))
-4661 4666 0
-4660 4664 0
451 4666 0
451 -4661 4664 0
451 -4660 4663 0
c ((aux1161 + aux1163 - aux1166)<=0)
4657 -4668 0
4658 -4669 0
4651 -4668 0
4651 4657 -4669 0
4651 4658 -4671 0
4652 -4669 0
4652 4657 -4671 0
4652 4658 -4673 0
c (0<=(aux1161 + aux1163 - aux1166))
-4658 4673 0
-4657 4671 0
-4652 4673 0
-4652 -4658 4671 0
-4652 -4657 4669 0
-4651 4671 0
-4651 -4658 4669 0
-4651 -4657 4668 0
c (( - aux1167 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4675 0
420 -4675 0
420 540 -4676 0
c (0<=( - aux1167 + SATLiteral(-420) + SATLiteral(-540)))
-540 4676 0
-420 4676 0
-420 -540 4675 0
c (( - aux1168 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4678 0
435 -4678 0
435 525 -4679 0
c (0<=( - aux1168 + SATLiteral(-435) + SATLiteral(-525)))
-525 4679 0
-435 4679 0
-435 -525 4678 0
c (( - aux1169 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4681 0
465 -4681 0
465 510 -4682 0
c (0<=( - aux1169 + SATLiteral(-465) + SATLiteral(-510)))
-510 4682 0
-465 4682 0
-465 -510 4681 0
c (( - aux1170 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4684 0
480 -4684 0
480 495 -4685 0
c (0<=( - aux1170 + SATLiteral(-480) + SATLiteral(-495)))
-495 4685 0
-480 4685 0
-480 -495 4684 0
c ((aux1170 - aux1171 + SATLiteral(-450))<=0)
4684 -4687 0
4685 -4688 0
450 -4687 0
450 4684 -4688 0
450 4685 -4690 0
c (0<=(aux1170 - aux1171 + SATLiteral(-450)))
-4685 4690 0
-4684 4688 0
-450 4690 0
-450 -4685 4688 0
-450 -4684 4687 0
c ((aux1167 + aux1169 - aux1172)<=0)
4681 -4692 0
4682 -4693 0
4675 -4692 0
4675 4681 -4693 0
4675 4682 -4695 0
4676 -4693 0
4676 4681 -4695 0
4676 4682 -4697 0
c (0<=(aux1167 + aux1169 - aux1172))
-4682 4697 0
-4681 4695 0
-4676 4697 0
-4676 -4682 4695 0
-4676 -4681 4693 0
-4675 4695 0
-4675 -4682 4693 0
-4675 -4681 4692 0
c (( - aux1173 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4699 0
-542 -4699 0
-542 -662 -4700 0
c (0<=( - aux1173 + SATLiteral(542) + SATLiteral(662)))
662 4700 0
542 4700 0
542 662 4699 0
c (( - aux1174 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4702 0
-557 -4702 0
-557 -647 -4703 0
c (0<=( - aux1174 + SATLiteral(557) + SATLiteral(647)))
647 4703 0
557 4703 0
557 647 4702 0
c (( - aux1175 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4705 0
-587 -4705 0
-587 -632 -4706 0
c (0<=( - aux1175 + SATLiteral(587) + SATLiteral(632)))
632 4706 0
587 4706 0
587 632 4705 0
c (( - aux1176 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4708 0
-602 -4708 0
-602 -617 -4709 0
c (0<=( - aux1176 + SATLiteral(602) + SATLiteral(617)))
617 4709 0
602 4709 0
602 617 4708 0
c ((aux1176 - aux1177 + SATLiteral(572))<=0)
4708 -4711 0
4709 -4712 0
-572 -4711 0
-572 4708 -4712 0
-572 4709 -4714 0
c (0<=(aux1176 - aux1177 + SATLiteral(572)))
-4709 4714 0
-4708 4712 0
572 4714 0
572 -4709 4712 0
572 -4708 4711 0
c ((aux1173 + aux1175 - aux1178)<=0)
4705 -4716 0
4706 -4717 0
4699 -4716 0
4699 4705 -4717 0
4699 4706 -4719 0
4700 -4717 0
4700 4705 -4719 0
4700 4706 -4721 0
c (0<=(aux1173 + aux1175 - aux1178))
-4706 4721 0
-4705 4719 0
-4700 4721 0
-4700 -4706 4719 0
-4700 -4705 4717 0
-4699 4719 0
-4699 -4706 4717 0
-4699 -4705 4716 0
c (( - aux1179 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4723 0
-544 -4723 0
-544 -664 -4724 0
c (0<=( - aux1179 + SATLiteral(544) + SATLiteral(664)))
664 4724 0
544 4724 0
544 664 4723 0
c (( - aux1180 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4726 0
-559 -4726 0
-559 -649 -4727 0
c (0<=( - aux1180 + SATLiteral(559) + SATLiteral(649)))
649 4727 0
559 4727 0
559 649 4726 0
c (( - aux1181 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4729 0
-589 -4729 0
-589 -634 -4730 0
c (0<=( - aux1181 + SATLiteral(589) + SATLiteral(634)))
634 4730 0
589 4730 0
589 634 4729 0
c (( - aux1182 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4732 0
-604 -4732 0
-604 -619 -4733 0
c (0<=( - aux1182 + SATLiteral(604) + SATLiteral(619)))
619 4733 0
604 4733 0
604 619 4732 0
c ((aux1182 - aux1183 + SATLiteral(574))<=0)
4732 -4735 0
4733 -4736 0
-574 -4735 0
-574 4732 -4736 0
-574 4733 -4738 0
c (0<=(aux1182 - aux1183 + SATLiteral(574)))
-4733 4738 0
-4732 4736 0
574 4738 0
574 -4733 4736 0
574 -4732 4735 0
c ((aux1179 + aux1181 - aux1184)<=0)
4729 -4740 0
4730 -4741 0
4723 -4740 0
4723 4729 -4741 0
4723 4730 -4743 0
4724 -4741 0
4724 4729 -4743 0
4724 4730 -4745 0
c (0<=(aux1179 + aux1181 - aux1184))
-4730 4745 0
-4729 4743 0
-4724 4745 0
-4724 -4730 4743 0
-4724 -4729 4741 0
-4723 4743 0
-4723 -4730 4741 0
-4723 -4729 4740 0
c (( - aux1185 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4747 0
-546 -4747 0
-546 -666 -4748 0
c (0<=( - aux1185 + SATLiteral(546) + SATLiteral(666)))
666 4748 0
546 4748 0
546 666 4747 0
c (( - aux1186 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4750 0
-561 -4750 0
-561 -651 -4751 0
c (0<=( - aux1186 + SATLiteral(561) + SATLiteral(651)))
651 4751 0
561 4751 0
561 651 4750 0
c (( - aux1187 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4753 0
-591 -4753 0
-591 -636 -4754 0
c (0<=( - aux1187 + SATLiteral(591) + SATLiteral(636)))
636 4754 0
591 4754 0
591 636 4753 0
c (( - aux1188 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4756 0
-606 -4756 0
-606 -621 -4757 0
c (0<=( - aux1188 + SATLiteral(606) + SATLiteral(621)))
621 4757 0
606 4757 0
606 621 4756 0
c ((aux1188 - aux1189 + SATLiteral(576))<=0)
4756 -4759 0
4757 -4760 0
-576 -4759 0
-576 4756 -4760 0
-576 4757 -4762 0
c (0<=(aux1188 - aux1189 + SATLiteral(576)))
-4757 4762 0
-4756 4760 0
576 4762 0
576 -4757 4760 0
576 -4756 4759 0
c ((aux1185 + aux1187 - aux1190)<=0)
4753 -4764 0
4754 -4765 0
4747 -4764 0
4747 4753 -4765 0
4747 4754 -4767 0
4748 -4765 0
4748 4753 -4767 0
4748 4754 -4769 0
c (0<=(aux1185 + aux1187 - aux1190))
-4754 4769 0
-4753 4767 0
-4748 4769 0
-4748 -4754 4767 0
-4748 -4753 4765 0
-4747 4767 0
-4747 -4754 4765 0
-4747 -4753 4764 0
c (( - aux1191 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4771 0
-548 -4771 0
-548 -668 -4772 0
c (0<=( - aux1191 + SATLiteral(548) + SATLiteral(668)))
668 4772 0
548 4772 0
548 668 4771 0
c (( - aux1192 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4774 0
-563 -4774 0
-563 -653 -4775 0
c (0<=( - aux1192 + SATLiteral(563) + SATLiteral(653)))
653 4775 0
563 4775 0
563 653 4774 0
c (( - aux1193 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4777 0
-593 -4777 0
-593 -638 -4778 0
c (0<=( - aux1193 + SATLiteral(593) + SATLiteral(638)))
638 4778 0
593 4778 0
593 638 4777 0
c (( - aux1194 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4780 0
-608 -4780 0
-608 -623 -4781 0
c (0<=( - aux1194 + SATLiteral(608) + SATLiteral(623)))
623 4781 0
608 4781 0
608 623 4780 0
c ((aux1194 - aux1195 + SATLiteral(578))<=0)
4780 -4783 0
4781 -4784 0
-578 -4783 0
-578 4780 -4784 0
-578 4781 -4786 0
c (0<=(aux1194 - aux1195 + SATLiteral(578)))
-4781 4786 0
-4780 4784 0
578 4786 0
578 -4781 4784 0
578 -4780 4783 0
c ((aux1191 + aux1193 - aux1196)<=0)
4777 -4788 0
4778 -4789 0
4771 -4788 0
4771 4777 -4789 0
4771 4778 -4791 0
4772 -4789 0
4772 4777 -4791 0
4772 4778 -4793 0
c (0<=(aux1191 + aux1193 - aux1196))
-4778 4793 0
-4777 4791 0
-4772 4793 0
-4772 -4778 4791 0
-4772 -4777 4789 0
-4771 4791 0
-4771 -4778 4789 0
-4771 -4777 4788 0
c (( - aux1197 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4795 0
-550 -4795 0
-550 -670 -4796 0
c (0<=( - aux1197 + SATLiteral(550) + SATLiteral(670)))
670 4796 0
550 4796 0
550 670 4795 0
c (( - aux1198 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4798 0
-565 -4798 0
-565 -655 -4799 0
c (0<=( - aux1198 + SATLiteral(565) + SATLiteral(655)))
655 4799 0
565 4799 0
565 655 4798 0
c (( - aux1199 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4801 0
-595 -4801 0
-595 -640 -4802 0
c (0<=( - aux1199 + SATLiteral(595) + SATLiteral(640)))
640 4802 0
595 4802 0
595 640 4801 0
c (( - aux1200 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4804 0
-610 -4804 0
-610 -625 -4805 0
c (0<=( - aux1200 + SATLiteral(610) + SATLiteral(625)))
625 4805 0
610 4805 0
610 625 4804 0
c ((aux1200 - aux1201 + SATLiteral(580))<=0)
4804 -4807 0
4805 -4808 0
-580 -4807 0
-580 4804 -4808 0
-580 4805 -4810 0
c (0<=(aux1200 - aux1201 + SATLiteral(580)))
-4805 4810 0
-4804 4808 0
580 4810 0
580 -4805 4808 0
580 -4804 4807 0
c ((aux1197 + aux1199 - aux1202)<=0)
4801 -4812 0
4802 -4813 0
4795 -4812 0
4795 4801 -4813 0
4795 4802 -4815 0
4796 -4813 0
4796 4801 -4815 0
4796 4802 -4817 0
c (0<=(aux1197 + aux1199 - aux1202))
-4802 4817 0
-4801 4815 0
-4796 4817 0
-4796 -4802 4815 0
-4796 -4801 4813 0
-4795 4815 0
-4795 -4802 4813 0
-4795 -4801 4812 0
c (( - aux1203 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4819 0
-552 -4819 0
-552 -672 -4820 0
c (0<=( - aux1203 + SATLiteral(552) + SATLiteral(672)))
672 4820 0
552 4820 0
552 672 4819 0
c (( - aux1204 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4822 0
-567 -4822 0
-567 -657 -4823 0
c (0<=( - aux1204 + SATLiteral(567) + SATLiteral(657)))
657 4823 0
567 4823 0
567 657 4822 0
c (( - aux1205 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4825 0
-597 -4825 0
-597 -642 -4826 0
c (0<=( - aux1205 + SATLiteral(597) + SATLiteral(642)))
642 4826 0
597 4826 0
597 642 4825 0
c (( - aux1206 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4828 0
-612 -4828 0
-612 -627 -4829 0
c (0<=( - aux1206 + SATLiteral(612) + SATLiteral(627)))
627 4829 0
612 4829 0
612 627 4828 0
c ((aux1206 - aux1207 + SATLiteral(582))<=0)
4828 -4831 0
4829 -4832 0
-582 -4831 0
-582 4828 -4832 0
-582 4829 -4834 0
c (0<=(aux1206 - aux1207 + SATLiteral(582)))
-4829 4834 0
-4828 4832 0
582 4834 0
582 -4829 4832 0
582 -4828 4831 0
c ((aux1203 + aux1205 - aux1208)<=0)
4825 -4836 0
4826 -4837 0
4819 -4836 0
4819 4825 -4837 0
4819 4826 -4839 0
4820 -4837 0
4820 4825 -4839 0
4820 4826 -4841 0
c (0<=(aux1203 + aux1205 - aux1208))
-4826 4841 0
-4825 4839 0
-4820 4841 0
-4820 -4826 4839 0
-4820 -4825 4837 0
-4819 4839 0
-4819 -4826 4837 0
-4819 -4825 4836 0
c (( - aux1209 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4843 0
-554 -4843 0
-554 -674 -4844 0
c (0<=( - aux1209 + SATLiteral(554) + SATLiteral(674)))
674 4844 0
554 4844 0
554 674 4843 0
c (( - aux1210 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4846 0
-569 -4846 0
-569 -659 -4847 0
c (0<=( - aux1210 + SATLiteral(569) + SATLiteral(659)))
659 4847 0
569 4847 0
569 659 4846 0
c (( - aux1211 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4849 0
-599 -4849 0
-599 -644 -4850 0
c (0<=( - aux1211 + SATLiteral(599) + SATLiteral(644)))
644 4850 0
599 4850 0
599 644 4849 0
c (( - aux1212 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4852 0
-614 -4852 0
-614 -629 -4853 0
c (0<=( - aux1212 + SATLiteral(614) + SATLiteral(629)))
629 4853 0
614 4853 0
614 629 4852 0
c ((aux1212 - aux1213 + SATLiteral(584))<=0)
4852 -4855 0
4853 -4856 0
-584 -4855 0
-584 4852 -4856 0
-584 4853 -4858 0
c (0<=(aux1212 - aux1213 + SATLiteral(584)))
-4853 4858 0
-4852 4856 0
584 4858 0
584 -4853 4856 0
584 -4852 4855 0
c ((aux1209 + aux1211 - aux1214)<=0)
4849 -4860 0
4850 -4861 0
4843 -4860 0
4843 4849 -4861 0
4843 4850 -4863 0
4844 -4861 0
4844 4849 -4863 0
4844 4850 -4865 0
c (0<=(aux1209 + aux1211 - aux1214))
-4850 4865 0
-4849 4863 0
-4844 4865 0
-4844 -4850 4863 0
-4844 -4849 4861 0
-4843 4863 0
-4843 -4850 4861 0
-4843 -4849 4860 0
c (( - aux1215 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4867 0
-556 -4867 0
-556 -676 -4868 0
c (0<=( - aux1215 + SATLiteral(556) + SATLiteral(676)))
676 4868 0
556 4868 0
556 676 4867 0
c (( - aux1216 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4870 0
-571 -4870 0
-571 -661 -4871 0
c (0<=( - aux1216 + SATLiteral(571) + SATLiteral(661)))
661 4871 0
571 4871 0
571 661 4870 0
c (( - aux1217 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4873 0
-601 -4873 0
-601 -646 -4874 0
c (0<=( - aux1217 + SATLiteral(601) + SATLiteral(646)))
646 4874 0
601 4874 0
601 646 4873 0
c (( - aux1218 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -4876 0
-616 -4876 0
-616 -631 -4877 0
c (0<=( - aux1218 + SATLiteral(616) + SATLiteral(631)))
631 4877 0
616 4877 0
616 631 4876 0
c ((aux1218 - aux1219 + SATLiteral(586))<=0)
4876 -4879 0
4877 -4880 0
-586 -4879 0
-586 4876 -4880 0
-586 4877 -4882 0
c (0<=(aux1218 - aux1219 + SATLiteral(586)))
-4877 4882 0
-4876 4880 0
586 4882 0
586 -4877 4880 0
586 -4876 4879 0
c ((aux1215 + aux1217 - aux1220)<=0)
4873 -4884 0
4874 -4885 0
4867 -4884 0
4867 4873 -4885 0
4867 4874 -4887 0
4868 -4885 0
4868 4873 -4887 0
4868 4874 -4889 0
c (0<=(aux1215 + aux1217 - aux1220))
-4874 4889 0
-4873 4887 0
-4868 4889 0
-4868 -4874 4887 0
-4868 -4873 4885 0
-4867 4887 0
-4867 -4874 4885 0
-4867 -4873 4884 0
c (( - aux1221 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -4891 0
555 -4891 0
555 675 -4892 0
c (0<=( - aux1221 + SATLiteral(-555) + SATLiteral(-675)))
-675 4892 0
-555 4892 0
-555 -675 4891 0
c (( - aux1222 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -4894 0
570 -4894 0
570 660 -4895 0
c (0<=( - aux1222 + SATLiteral(-570) + SATLiteral(-660)))
-660 4895 0
-570 4895 0
-570 -660 4894 0
c (( - aux1223 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -4897 0
600 -4897 0
600 645 -4898 0
c (0<=( - aux1223 + SATLiteral(-600) + SATLiteral(-645)))
-645 4898 0
-600 4898 0
-600 -645 4897 0
c (( - aux1224 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -4900 0
615 -4900 0
615 630 -4901 0
c (0<=( - aux1224 + SATLiteral(-615) + SATLiteral(-630)))
-630 4901 0
-615 4901 0
-615 -630 4900 0
c ((aux1224 - aux1225 + SATLiteral(-585))<=0)
4900 -4903 0
4901 -4904 0
585 -4903 0
585 4900 -4904 0
585 4901 -4906 0
c (0<=(aux1224 - aux1225 + SATLiteral(-585)))
-4901 4906 0
-4900 4904 0
-585 4906 0
-585 -4901 4904 0
-585 -4900 4903 0
c ((aux1221 + aux1223 - aux1226)<=0)
4897 -4908 0
4898 -4909 0
4891 -4908 0
4891 4897 -4909 0
4891 4898 -4911 0
4892 -4909 0
4892 4897 -4911 0
4892 4898 -4913 0
c (0<=(aux1221 + aux1223 - aux1226))
-4898 4913 0
-4897 4911 0
-4892 4913 0
-4892 -4898 4911 0
-4892 -4897 4909 0
-4891 4911 0
-4891 -4898 4909 0
-4891 -4897 4908 0
c ((SATLiteral(677) + SATLiteral(797) - aux1227)<=0)
-797 -4915 0
-677 -4915 0
-677 -797 -4916 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1227))
797 4916 0
677 4916 0
677 797 4915 0
c ((SATLiteral(692) + SATLiteral(782) - aux1228)<=0)
-782 -4918 0
-692 -4918 0
-692 -782 -4919 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1228))
782 4919 0
692 4919 0
692 782 4918 0
c ((SATLiteral(722) + SATLiteral(767) - aux1229)<=0)
-767 -4921 0
-722 -4921 0
-722 -767 -4922 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1229))
767 4922 0
722 4922 0
722 767 4921 0
c ((SATLiteral(737) + SATLiteral(752) - aux1230)<=0)
-752 -4924 0
-737 -4924 0
-737 -752 -4925 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1230))
752 4925 0
737 4925 0
737 752 4924 0
c ((SATLiteral(707) + aux1230 - aux1231)<=0)
4924 -4927 0
4925 -4928 0
-707 -4927 0
-707 4924 -4928 0
-707 4925 -4930 0
c (0<=(SATLiteral(707) + aux1230 - aux1231))
-4925 4930 0
-4924 4928 0
707 4930 0
707 -4925 4928 0
707 -4924 4927 0
c ((aux1227 + aux1229 - aux1232)<=0)
4921 -4932 0
4922 -4933 0
4915 -4932 0
4915 4921 -4933 0
4915 4922 -4935 0
4916 -4933 0
4916 4921 -4935 0
4916 4922 -4937 0
c (0<=(aux1227 + aux1229 - aux1232))
-4922 4937 0
-4921 4935 0
-4916 4937 0
-4916 -4922 4935 0
-4916 -4921 4933 0
-4915 4935 0
-4915 -4922 4933 0
-4915 -4921 4932 0
c ((SATLiteral(679) + SATLiteral(799) - aux1233)<=0)
-799 -4939 0
-679 -4939 0
-679 -799 -4940 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1233))
799 4940 0
679 4940 0
679 799 4939 0
c ((SATLiteral(694) + SATLiteral(784) - aux1234)<=0)
-784 -4942 0
-694 -4942 0
-694 -784 -4943 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1234))
784 4943 0
694 4943 0
694 784 4942 0
c ((SATLiteral(724) + SATLiteral(769) - aux1235)<=0)
-769 -4945 0
-724 -4945 0
-724 -769 -4946 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1235))
769 4946 0
724 4946 0
724 769 4945 0
c ((SATLiteral(739) + SATLiteral(754) - aux1236)<=0)
-754 -4948 0
-739 -4948 0
-739 -754 -4949 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1236))
754 4949 0
739 4949 0
739 754 4948 0
c ((SATLiteral(709) + aux1236 - aux1237)<=0)
4948 -4951 0
4949 -4952 0
-709 -4951 0
-709 4948 -4952 0
-709 4949 -4954 0
c (0<=(SATLiteral(709) + aux1236 - aux1237))
-4949 4954 0
-4948 4952 0
709 4954 0
709 -4949 4952 0
709 -4948 4951 0
c ((aux1233 + aux1235 - aux1238)<=0)
4945 -4956 0
4946 -4957 0
4939 -4956 0
4939 4945 -4957 0
4939 4946 -4959 0
4940 -4957 0
4940 4945 -4959 0
4940 4946 -4961 0
c (0<=(aux1233 + aux1235 - aux1238))
-4946 4961 0
-4945 4959 0
-4940 4961 0
-4940 -4946 4959 0
-4940 -4945 4957 0
-4939 4959 0
-4939 -4946 4957 0
-4939 -4945 4956 0
c ((SATLiteral(681) + SATLiteral(801) - aux1239)<=0)
-801 -4963 0
-681 -4963 0
-681 -801 -4964 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1239))
801 4964 0
681 4964 0
681 801 4963 0
c ((SATLiteral(696) + SATLiteral(786) - aux1240)<=0)
-786 -4966 0
-696 -4966 0
-696 -786 -4967 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1240))
786 4967 0
696 4967 0
696 786 4966 0
c ((SATLiteral(726) + SATLiteral(771) - aux1241)<=0)
-771 -4969 0
-726 -4969 0
-726 -771 -4970 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1241))
771 4970 0
726 4970 0
726 771 4969 0
c ((SATLiteral(741) + SATLiteral(756) - aux1242)<=0)
-756 -4972 0
-741 -4972 0
-741 -756 -4973 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1242))
756 4973 0
741 4973 0
741 756 4972 0
c ((SATLiteral(711) + aux1242 - aux1243)<=0)
4972 -4975 0
4973 -4976 0
-711 -4975 0
-711 4972 -4976 0
-711 4973 -4978 0
c (0<=(SATLiteral(711) + aux1242 - aux1243))
-4973 4978 0
-4972 4976 0
711 4978 0
711 -4973 4976 0
711 -4972 4975 0
c ((aux1239 + aux1241 - aux1244)<=0)
4969 -4980 0
4970 -4981 0
4963 -4980 0
4963 4969 -4981 0
4963 4970 -4983 0
4964 -4981 0
4964 4969 -4983 0
4964 4970 -4985 0
c (0<=(aux1239 + aux1241 - aux1244))
-4970 4985 0
-4969 4983 0
-4964 4985 0
-4964 -4970 4983 0
-4964 -4969 4981 0
-4963 4983 0
-4963 -4970 4981 0
-4963 -4969 4980 0
c ((SATLiteral(683) + SATLiteral(803) - aux1245)<=0)
-803 -4987 0
-683 -4987 0
-683 -803 -4988 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1245))
803 4988 0
683 4988 0
683 803 4987 0
c ((SATLiteral(698) + SATLiteral(788) - aux1246)<=0)
-788 -4990 0
-698 -4990 0
-698 -788 -4991 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1246))
788 4991 0
698 4991 0
698 788 4990 0
c ((SATLiteral(728) + SATLiteral(773) - aux1247)<=0)
-773 -4993 0
-728 -4993 0
-728 -773 -4994 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1247))
773 4994 0
728 4994 0
728 773 4993 0
c ((SATLiteral(743) + SATLiteral(758) - aux1248)<=0)
-758 -4996 0
-743 -4996 0
-743 -758 -4997 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1248))
758 4997 0
743 4997 0
743 758 4996 0
c ((SATLiteral(713) + aux1248 - aux1249)<=0)
4996 -4999 0
4997 -5000 0
-713 -4999 0
-713 4996 -5000 0
-713 4997 -5002 0
c (0<=(SATLiteral(713) + aux1248 - aux1249))
-4997 5002 0
-4996 5000 0
713 5002 0
713 -4997 5000 0
713 -4996 4999 0
c ((aux1245 + aux1247 - aux1250)<=0)
4993 -5004 0
4994 -5005 0
4987 -5004 0
4987 4993 -5005 0
4987 4994 -5007 0
4988 -5005 0
4988 4993 -5007 0
4988 4994 -5009 0
c (0<=(aux1245 + aux1247 - aux1250))
-4994 5009 0
-4993 5007 0
-4988 5009 0
-4988 -4994 5007 0
-4988 -4993 5005 0
-4987 5007 0
-4987 -4994 5005 0
-4987 -4993 5004 0
c ((SATLiteral(685) + SATLiteral(805) - aux1251)<=0)
-805 -5011 0
-685 -5011 0
-685 -805 -5012 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1251))
805 5012 0
685 5012 0
685 805 5011 0
c ((SATLiteral(700) + SATLiteral(790) - aux1252)<=0)
-790 -5014 0
-700 -5014 0
-700 -790 -5015 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1252))
790 5015 0
700 5015 0
700 790 5014 0
c ((SATLiteral(730) + SATLiteral(775) - aux1253)<=0)
-775 -5017 0
-730 -5017 0
-730 -775 -5018 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1253))
775 5018 0
730 5018 0
730 775 5017 0
c ((SATLiteral(745) + SATLiteral(760) - aux1254)<=0)
-760 -5020 0
-745 -5020 0
-745 -760 -5021 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1254))
760 5021 0
745 5021 0
745 760 5020 0
c ((SATLiteral(715) + aux1254 - aux1255)<=0)
5020 -5023 0
5021 -5024 0
-715 -5023 0
-715 5020 -5024 0
-715 5021 -5026 0
c (0<=(SATLiteral(715) + aux1254 - aux1255))
-5021 5026 0
-5020 5024 0
715 5026 0
715 -5021 5024 0
715 -5020 5023 0
c ((aux1251 + aux1253 - aux1256)<=0)
5017 -5028 0
5018 -5029 0
5011 -5028 0
5011 5017 -5029 0
5011 5018 -5031 0
5012 -5029 0
5012 5017 -5031 0
5012 5018 -5033 0
c (0<=(aux1251 + aux1253 - aux1256))
-5018 5033 0
-5017 5031 0
-5012 5033 0
-5012 -5018 5031 0
-5012 -5017 5029 0
-5011 5031 0
-5011 -5018 5029 0
-5011 -5017 5028 0
c ((SATLiteral(687) + SATLiteral(807) - aux1257)<=0)
-807 -5035 0
-687 -5035 0
-687 -807 -5036 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1257))
807 5036 0
687 5036 0
687 807 5035 0
c ((SATLiteral(702) + SATLiteral(792) - aux1258)<=0)
-792 -5038 0
-702 -5038 0
-702 -792 -5039 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1258))
792 5039 0
702 5039 0
702 792 5038 0
c ((SATLiteral(732) + SATLiteral(777) - aux1259)<=0)
-777 -5041 0
-732 -5041 0
-732 -777 -5042 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1259))
777 5042 0
732 5042 0
732 777 5041 0
c ((SATLiteral(747) + SATLiteral(762) - aux1260)<=0)
-762 -5044 0
-747 -5044 0
-747 -762 -5045 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1260))
762 5045 0
747 5045 0
747 762 5044 0
c ((SATLiteral(717) + aux1260 - aux1261)<=0)
5044 -5047 0
5045 -5048 0
-717 -5047 0
-717 5044 -5048 0
-717 5045 -5050 0
c (0<=(SATLiteral(717) + aux1260 - aux1261))
-5045 5050 0
-5044 5048 0
717 5050 0
717 -5045 5048 0
717 -5044 5047 0
c ((aux1257 + aux1259 - aux1262)<=0)
5041 -5052 0
5042 -5053 0
5035 -5052 0
5035 5041 -5053 0
5035 5042 -5055 0
5036 -5053 0
5036 5041 -5055 0
5036 5042 -5057 0
c (0<=(aux1257 + aux1259 - aux1262))
-5042 5057 0
-5041 5055 0
-5036 5057 0
-5036 -5042 5055 0
-5036 -5041 5053 0
-5035 5055 0
-5035 -5042 5053 0
-5035 -5041 5052 0
c ((SATLiteral(689) + SATLiteral(809) - aux1263)<=0)
-809 -5059 0
-689 -5059 0
-689 -809 -5060 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1263))
809 5060 0
689 5060 0
689 809 5059 0
c ((SATLiteral(704) + SATLiteral(794) - aux1264)<=0)
-794 -5062 0
-704 -5062 0
-704 -794 -5063 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1264))
794 5063 0
704 5063 0
704 794 5062 0
c ((SATLiteral(734) + SATLiteral(779) - aux1265)<=0)
-779 -5065 0
-734 -5065 0
-734 -779 -5066 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1265))
779 5066 0
734 5066 0
734 779 5065 0
c ((SATLiteral(749) + SATLiteral(764) - aux1266)<=0)
-764 -5068 0
-749 -5068 0
-749 -764 -5069 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1266))
764 5069 0
749 5069 0
749 764 5068 0
c ((SATLiteral(719) + aux1266 - aux1267)<=0)
5068 -5071 0
5069 -5072 0
-719 -5071 0
-719 5068 -5072 0
-719 5069 -5074 0
c (0<=(SATLiteral(719) + aux1266 - aux1267))
-5069 5074 0
-5068 5072 0
719 5074 0
719 -5069 5072 0
719 -5068 5071 0
c ((aux1263 + aux1265 - aux1268)<=0)
5065 -5076 0
5066 -5077 0
5059 -5076 0
5059 5065 -5077 0
5059 5066 -5079 0
5060 -5077 0
5060 5065 -5079 0
5060 5066 -5081 0
c (0<=(aux1263 + aux1265 - aux1268))
-5066 5081 0
-5065 5079 0
-5060 5081 0
-5060 -5066 5079 0
-5060 -5065 5077 0
-5059 5079 0
-5059 -5066 5077 0
-5059 -5065 5076 0
c ((SATLiteral(691) + SATLiteral(811) - aux1269)<=0)
-811 -5083 0
-691 -5083 0
-691 -811 -5084 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1269))
811 5084 0
691 5084 0
691 811 5083 0
c ((SATLiteral(706) + SATLiteral(796) - aux1270)<=0)
-796 -5086 0
-706 -5086 0
-706 -796 -5087 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1270))
796 5087 0
706 5087 0
706 796 5086 0
c ((SATLiteral(736) + SATLiteral(781) - aux1271)<=0)
-781 -5089 0
-736 -5089 0
-736 -781 -5090 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1271))
781 5090 0
736 5090 0
736 781 5089 0
c ((SATLiteral(751) + SATLiteral(766) - aux1272)<=0)
-766 -5092 0
-751 -5092 0
-751 -766 -5093 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1272))
766 5093 0
751 5093 0
751 766 5092 0
c ((SATLiteral(721) + aux1272 - aux1273)<=0)
5092 -5095 0
5093 -5096 0
-721 -5095 0
-721 5092 -5096 0
-721 5093 -5098 0
c (0<=(SATLiteral(721) + aux1272 - aux1273))
-5093 5098 0
-5092 5096 0
721 5098 0
721 -5093 5096 0
721 -5092 5095 0
c ((aux1269 + aux1271 - aux1274)<=0)
5089 -5100 0
5090 -5101 0
5083 -5100 0
5083 5089 -5101 0
5083 5090 -5103 0
5084 -5101 0
5084 5089 -5103 0
5084 5090 -5105 0
c (0<=(aux1269 + aux1271 - aux1274))
-5090 5105 0
-5089 5103 0
-5084 5105 0
-5084 -5090 5103 0
-5084 -5089 5101 0
-5083 5103 0
-5083 -5090 5101 0
-5083 -5089 5100 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1275)<=0)
810 -5107 0
690 -5107 0
690 810 -5108 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1275))
-810 5108 0
-690 5108 0
-690 -810 5107 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1276)<=0)
795 -5110 0
705 -5110 0
705 795 -5111 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1276))
-795 5111 0
-705 5111 0
-705 -795 5110 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1277)<=0)
780 -5113 0
735 -5113 0
735 780 -5114 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1277))
-780 5114 0
-735 5114 0
-735 -780 5113 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1278)<=0)
765 -5116 0
750 -5116 0
750 765 -5117 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1278))
-765 5117 0
-750 5117 0
-750 -765 5116 0
c ((SATLiteral(-720) + aux1278 - aux1279)<=0)
5116 -5119 0
5117 -5120 0
720 -5119 0
720 5116 -5120 0
720 5117 -5122 0
c (0<=(SATLiteral(-720) + aux1278 - aux1279))
-5117 5122 0
-5116 5120 0
-720 5122 0
-720 -5117 5120 0
-720 -5116 5119 0
c ((aux1275 + aux1277 - aux1280)<=0)
5113 -5124 0
5114 -5125 0
5107 -5124 0
5107 5113 -5125 0
5107 5114 -5127 0
5108 -5125 0
5108 5113 -5127 0
5108 5114 -5129 0
c (0<=(aux1275 + aux1277 - aux1280))
-5114 5129 0
-5113 5127 0
-5108 5129 0
-5108 -5114 5127 0
-5108 -5113 5125 0
-5107 5127 0
-5107 -5114 5125 0
-5107 -5113 5124 0
c (( - aux1281 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5131 0
-812 -5131 0
-812 -932 -5132 0
c (0<=( - aux1281 + SATLiteral(812) + SATLiteral(932)))
932 5132 0
812 5132 0
812 932 5131 0
c (( - aux1282 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5134 0
-827 -5134 0
-827 -917 -5135 0
c (0<=( - aux1282 + SATLiteral(827) + SATLiteral(917)))
917 5135 0
827 5135 0
827 917 5134 0
c (( - aux1283 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5137 0
-857 -5137 0
-857 -902 -5138 0
c (0<=( - aux1283 + SATLiteral(857) + SATLiteral(902)))
902 5138 0
857 5138 0
857 902 5137 0
c (( - aux1284 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5140 0
-872 -5140 0
-872 -887 -5141 0
c (0<=( - aux1284 + SATLiteral(872) + SATLiteral(887)))
887 5141 0
872 5141 0
872 887 5140 0
c ((aux1284 - aux1285 + SATLiteral(842))<=0)
5140 -5143 0
5141 -5144 0
-842 -5143 0
-842 5140 -5144 0
-842 5141 -5146 0
c (0<=(aux1284 - aux1285 + SATLiteral(842)))
-5141 5146 0
-5140 5144 0
842 5146 0
842 -5141 5144 0
842 -5140 5143 0
c ((aux1281 + aux1283 - aux1286)<=0)
5137 -5148 0
5138 -5149 0
5131 -5148 0
5131 5137 -5149 0
5131 5138 -5151 0
5132 -5149 0
5132 5137 -5151 0
5132 5138 -5153 0
c (0<=(aux1281 + aux1283 - aux1286))
-5138 5153 0
-5137 5151 0
-5132 5153 0
-5132 -5138 5151 0
-5132 -5137 5149 0
-5131 5151 0
-5131 -5138 5149 0
-5131 -5137 5148 0
c (( - aux1287 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5155 0
-814 -5155 0
-814 -934 -5156 0
c (0<=( - aux1287 + SATLiteral(814) + SATLiteral(934)))
934 5156 0
814 5156 0
814 934 5155 0
c (( - aux1288 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5158 0
-829 -5158 0
-829 -919 -5159 0
c (0<=( - aux1288 + SATLiteral(829) + SATLiteral(919)))
919 5159 0
829 5159 0
829 919 5158 0
c (( - aux1289 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5161 0
-859 -5161 0
-859 -904 -5162 0
c (0<=( - aux1289 + SATLiteral(859) + SATLiteral(904)))
904 5162 0
859 5162 0
859 904 5161 0
c (( - aux1290 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5164 0
-874 -5164 0
-874 -889 -5165 0
c (0<=( - aux1290 + SATLiteral(874) + SATLiteral(889)))
889 5165 0
874 5165 0
874 889 5164 0
c ((aux1290 - aux1291 + SATLiteral(844))<=0)
5164 -5167 0
5165 -5168 0
-844 -5167 0
-844 5164 -5168 0
-844 5165 -5170 0
c (0<=(aux1290 - aux1291 + SATLiteral(844)))
-5165 5170 0
-5164 5168 0
844 5170 0
844 -5165 5168 0
844 -5164 5167 0
c ((aux1287 + aux1289 - aux1292)<=0)
5161 -5172 0
5162 -5173 0
5155 -5172 0
5155 5161 -5173 0
5155 5162 -5175 0
5156 -5173 0
5156 5161 -5175 0
5156 5162 -5177 0
c (0<=(aux1287 + aux1289 - aux1292))
-5162 5177 0
-5161 5175 0
-5156 5177 0
-5156 -5162 5175 0
-5156 -5161 5173 0
-5155 5175 0
-5155 -5162 5173 0
-5155 -5161 5172 0
c (( - aux1293 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5179 0
-816 -5179 0
-816 -936 -5180 0
c (0<=( - aux1293 + SATLiteral(816) + SATLiteral(936)))
936 5180 0
816 5180 0
816 936 5179 0
c (( - aux1294 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5182 0
-831 -5182 0
-831 -921 -5183 0
c (0<=( - aux1294 + SATLiteral(831) + SATLiteral(921)))
921 5183 0
831 5183 0
831 921 5182 0
c (( - aux1295 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5185 0
-861 -5185 0
-861 -906 -5186 0
c (0<=( - aux1295 + SATLiteral(861) + SATLiteral(906)))
906 5186 0
861 5186 0
861 906 5185 0
c (( - aux1296 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5188 0
-876 -5188 0
-876 -891 -5189 0
c (0<=( - aux1296 + SATLiteral(876) + SATLiteral(891)))
891 5189 0
876 5189 0
876 891 5188 0
c ((aux1296 - aux1297 + SATLiteral(846))<=0)
5188 -5191 0
5189 -5192 0
-846 -5191 0
-846 5188 -5192 0
-846 5189 -5194 0
c (0<=(aux1296 - aux1297 + SATLiteral(846)))
-5189 5194 0
-5188 5192 0
846 5194 0
846 -5189 5192 0
846 -5188 5191 0
c ((aux1293 + aux1295 - aux1298)<=0)
5185 -5196 0
5186 -5197 0
5179 -5196 0
5179 5185 -5197 0
5179 5186 -5199 0
5180 -5197 0
5180 5185 -5199 0
5180 5186 -5201 0
c (0<=(aux1293 + aux1295 - aux1298))
-5186 5201 0
-5185 5199 0
-5180 5201 0
-5180 -5186 5199 0
-5180 -5185 5197 0
-5179 5199 0
-5179 -5186 5197 0
-5179 -5185 5196 0
c (( - aux1299 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5203 0
-818 -5203 0
-818 -938 -5204 0
c (0<=( - aux1299 + SATLiteral(818) + SATLiteral(938)))
938 5204 0
818 5204 0
818 938 5203 0
c (( - aux1300 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5206 0
-833 -5206 0
-833 -923 -5207 0
c (0<=( - aux1300 + SATLiteral(833) + SATLiteral(923)))
923 5207 0
833 5207 0
833 923 5206 0
c (( - aux1301 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5209 0
-863 -5209 0
-863 -908 -5210 0
c (0<=( - aux1301 + SATLiteral(863) + SATLiteral(908)))
908 5210 0
863 5210 0
863 908 5209 0
c (( - aux1302 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5212 0
-878 -5212 0
-878 -893 -5213 0
c (0<=( - aux1302 + SATLiteral(878) + SATLiteral(893)))
893 5213 0
878 5213 0
878 893 5212 0
c ((aux1302 - aux1303 + SATLiteral(848))<=0)
5212 -5215 0
5213 -5216 0
-848 -5215 0
-848 5212 -5216 0
-848 5213 -5218 0
c (0<=(aux1302 - aux1303 + SATLiteral(848)))
-5213 5218 0
-5212 5216 0
848 5218 0
848 -5213 5216 0
848 -5212 5215 0
c ((aux1299 + aux1301 - aux1304)<=0)
5209 -5220 0
5210 -5221 0
5203 -5220 0
5203 5209 -5221 0
5203 5210 -5223 0
5204 -5221 0
5204 5209 -5223 0
5204 5210 -5225 0
c (0<=(aux1299 + aux1301 - aux1304))
-5210 5225 0
-5209 5223 0
-5204 5225 0
-5204 -5210 5223 0
-5204 -5209 5221 0
-5203 5223 0
-5203 -5210 5221 0
-5203 -5209 5220 0
c (( - aux1305 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5227 0
-820 -5227 0
-820 -940 -5228 0
c (0<=( - aux1305 + SATLiteral(820) + SATLiteral(940)))
940 5228 0
820 5228 0
820 940 5227 0
c (( - aux1306 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5230 0
-835 -5230 0
-835 -925 -5231 0
c (0<=( - aux1306 + SATLiteral(835) + SATLiteral(925)))
925 5231 0
835 5231 0
835 925 5230 0
c (( - aux1307 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5233 0
-865 -5233 0
-865 -910 -5234 0
c (0<=( - aux1307 + SATLiteral(865) + SATLiteral(910)))
910 5234 0
865 5234 0
865 910 5233 0
c (( - aux1308 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5236 0
-880 -5236 0
-880 -895 -5237 0
c (0<=( - aux1308 + SATLiteral(880) + SATLiteral(895)))
895 5237 0
880 5237 0
880 895 5236 0
c ((aux1308 - aux1309 + SATLiteral(850))<=0)
5236 -5239 0
5237 -5240 0
-850 -5239 0
-850 5236 -5240 0
-850 5237 -5242 0
c (0<=(aux1308 - aux1309 + SATLiteral(850)))
-5237 5242 0
-5236 5240 0
850 5242 0
850 -5237 5240 0
850 -5236 5239 0
c ((aux1305 + aux1307 - aux1310)<=0)
5233 -5244 0
5234 -5245 0
5227 -5244 0
5227 5233 -5245 0
5227 5234 -5247 0
5228 -5245 0
5228 5233 -5247 0
5228 5234 -5249 0
c (0<=(aux1305 + aux1307 - aux1310))
-5234 5249 0
-5233 5247 0
-5228 5249 0
-5228 -5234 5247 0
-5228 -5233 5245 0
-5227 5247 0
-5227 -5234 5245 0
-5227 -5233 5244 0
c (( - aux1311 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5251 0
-822 -5251 0
-822 -942 -5252 0
c (0<=( - aux1311 + SATLiteral(822) + SATLiteral(942)))
942 5252 0
822 5252 0
822 942 5251 0
c (( - aux1312 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5254 0
-837 -5254 0
-837 -927 -5255 0
c (0<=( - aux1312 + SATLiteral(837) + SATLiteral(927)))
927 5255 0
837 5255 0
837 927 5254 0
c (( - aux1313 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5257 0
-867 -5257 0
-867 -912 -5258 0
c (0<=( - aux1313 + SATLiteral(867) + SATLiteral(912)))
912 5258 0
867 5258 0
867 912 5257 0
c (( - aux1314 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5260 0
-882 -5260 0
-882 -897 -5261 0
c (0<=( - aux1314 + SATLiteral(882) + SATLiteral(897)))
897 5261 0
882 5261 0
882 897 5260 0
c ((aux1314 - aux1315 + SATLiteral(852))<=0)
5260 -5263 0
5261 -5264 0
-852 -5263 0
-852 5260 -5264 0
-852 5261 -5266 0
c (0<=(aux1314 - aux1315 + SATLiteral(852)))
-5261 5266 0
-5260 5264 0
852 5266 0
852 -5261 5264 0
852 -5260 5263 0
c ((aux1311 + aux1313 - aux1316)<=0)
5257 -5268 0
5258 -5269 0
5251 -5268 0
5251 5257 -5269 0
5251 5258 -5271 0
5252 -5269 0
5252 5257 -5271 0
5252 5258 -5273 0
c (0<=(aux1311 + aux1313 - aux1316))
-5258 5273 0
-5257 5271 0
-5252 5273 0
-5252 -5258 5271 0
-5252 -5257 5269 0
-5251 5271 0
-5251 -5258 5269 0
-5251 -5257 5268 0
c (( - aux1317 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5275 0
-824 -5275 0
-824 -944 -5276 0
c (0<=( - aux1317 + SATLiteral(824) + SATLiteral(944)))
944 5276 0
824 5276 0
824 944 5275 0
c (( - aux1318 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5278 0
-839 -5278 0
-839 -929 -5279 0
c (0<=( - aux1318 + SATLiteral(839) + SATLiteral(929)))
929 5279 0
839 5279 0
839 929 5278 0
c (( - aux1319 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5281 0
-869 -5281 0
-869 -914 -5282 0
c (0<=( - aux1319 + SATLiteral(869) + SATLiteral(914)))
914 5282 0
869 5282 0
869 914 5281 0
c (( - aux1320 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5284 0
-884 -5284 0
-884 -899 -5285 0
c (0<=( - aux1320 + SATLiteral(884) + SATLiteral(899)))
899 5285 0
884 5285 0
884 899 5284 0
c ((aux1320 - aux1321 + SATLiteral(854))<=0)
5284 -5287 0
5285 -5288 0
-854 -5287 0
-854 5284 -5288 0
-854 5285 -5290 0
c (0<=(aux1320 - aux1321 + SATLiteral(854)))
-5285 5290 0
-5284 5288 0
854 5290 0
854 -5285 5288 0
854 -5284 5287 0
c ((aux1317 + aux1319 - aux1322)<=0)
5281 -5292 0
5282 -5293 0
5275 -5292 0
5275 5281 -5293 0
5275 5282 -5295 0
5276 -5293 0
5276 5281 -5295 0
5276 5282 -5297 0
c (0<=(aux1317 + aux1319 - aux1322))
-5282 5297 0
-5281 5295 0
-5276 5297 0
-5276 -5282 5295 0
-5276 -5281 5293 0
-5275 5295 0
-5275 -5282 5293 0
-5275 -5281 5292 0
c (( - aux1323 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5299 0
-826 -5299 0
-826 -946 -5300 0
c (0<=( - aux1323 + SATLiteral(826) + SATLiteral(946)))
946 5300 0
826 5300 0
826 946 5299 0
c (( - aux1324 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5302 0
-841 -5302 0
-841 -931 -5303 0
c (0<=( - aux1324 + SATLiteral(841) + SATLiteral(931)))
931 5303 0
841 5303 0
841 931 5302 0
c (( - aux1325 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5305 0
-871 -5305 0
-871 -916 -5306 0
c (0<=( - aux1325 + SATLiteral(871) + SATLiteral(916)))
916 5306 0
871 5306 0
871 916 5305 0
c (( - aux1326 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5308 0
-886 -5308 0
-886 -901 -5309 0
c (0<=( - aux1326 + SATLiteral(886) + SATLiteral(901)))
901 5309 0
886 5309 0
886 901 5308 0
c ((aux1326 - aux1327 + SATLiteral(856))<=0)
5308 -5311 0
5309 -5312 0
-856 -5311 0
-856 5308 -5312 0
-856 5309 -5314 0
c (0<=(aux1326 - aux1327 + SATLiteral(856)))
-5309 5314 0
-5308 5312 0
856 5314 0
856 -5309 5312 0
856 -5308 5311 0
c ((aux1323 + aux1325 - aux1328)<=0)
5305 -5316 0
5306 -5317 0
5299 -5316 0
5299 5305 -5317 0
5299 5306 -5319 0
5300 -5317 0
5300 5305 -5319 0
5300 5306 -5321 0
c (0<=(aux1323 + aux1325 - aux1328))
-5306 5321 0
-5305 5319 0
-5300 5321 0
-5300 -5306 5319 0
-5300 -5305 5317 0
-5299 5319 0
-5299 -5306 5317 0
-5299 -5305 5316 0
c (( - aux1329 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5323 0
825 -5323 0
825 945 -5324 0
c (0<=( - aux1329 + SATLiteral(-825) + SATLiteral(-945)))
-945 5324 0
-825 5324 0
-825 -945 5323 0
c (( - aux1330 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5326 0
840 -5326 0
840 930 -5327 0
c (0<=( - aux1330 + SATLiteral(-840) + SATLiteral(-930)))
-930 5327 0
-840 5327 0
-840 -930 5326 0
c (( - aux1331 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5329 0
870 -5329 0
870 915 -5330 0
c (0<=( - aux1331 + SATLiteral(-870) + SATLiteral(-915)))
-915 5330 0
-870 5330 0
-870 -915 5329 0
c (( - aux1332 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5332 0
885 -5332 0
885 900 -5333 0
c (0<=( - aux1332 + SATLiteral(-885) + SATLiteral(-900)))
-900 5333 0
-885 5333 0
-885 -900 5332 0
c ((aux1332 - aux1333 + SATLiteral(-855))<=0)
5332 -5335 0
5333 -5336 0
855 -5335 0
855 5332 -5336 0
855 5333 -5338 0
c (0<=(aux1332 - aux1333 + SATLiteral(-855)))
-5333 5338 0
-5332 5336 0
-855 5338 0
-855 -5333 5336 0
-855 -5332 5335 0
c ((aux1329 + aux1331 - aux1334)<=0)
5329 -5340 0
5330 -5341 0
5323 -5340 0
5323 5329 -5341 0
5323 5330 -5343 0
5324 -5341 0
5324 5329 -5343 0
5324 5330 -5345 0
c (0<=(aux1329 + aux1331 - aux1334))
-5330 5345 0
-5329 5343 0
-5324 5345 0
-5324 -5330 5343 0
-5324 -5329 5341 0
-5323 5343 0
-5323 -5330 5341 0
-5323 -5329 5340 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1335)<=0)
-1067 -5347 0
-947 -5347 0
-947 -1067 -5348 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1335))
1067 5348 0
947 5348 0
947 1067 5347 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1336)<=0)
-1052 -5350 0
-962 -5350 0
-962 -1052 -5351 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1336))
1052 5351 0
962 5351 0
962 1052 5350 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1337)<=0)
-1037 -5353 0
-992 -5353 0
-992 -1037 -5354 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1337))
1037 5354 0
992 5354 0
992 1037 5353 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1338)<=0)
-1022 -5356 0
-1007 -5356 0
-1007 -1022 -5357 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1338))
1022 5357 0
1007 5357 0
1007 1022 5356 0
c ((SATLiteral(977) + aux1338 - aux1339)<=0)
5356 -5359 0
5357 -5360 0
-977 -5359 0
-977 5356 -5360 0
-977 5357 -5362 0
c (0<=(SATLiteral(977) + aux1338 - aux1339))
-5357 5362 0
-5356 5360 0
977 5362 0
977 -5357 5360 0
977 -5356 5359 0
c ((aux1335 + aux1337 - aux1340)<=0)
5353 -5364 0
5354 -5365 0
5347 -5364 0
5347 5353 -5365 0
5347 5354 -5367 0
5348 -5365 0
5348 5353 -5367 0
5348 5354 -5369 0
c (0<=(aux1335 + aux1337 - aux1340))
-5354 5369 0
-5353 5367 0
-5348 5369 0
-5348 -5354 5367 0
-5348 -5353 5365 0
-5347 5367 0
-5347 -5354 5365 0
-5347 -5353 5364 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1341)<=0)
-1069 -5371 0
-949 -5371 0
-949 -1069 -5372 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1341))
1069 5372 0
949 5372 0
949 1069 5371 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1342)<=0)
-1054 -5374 0
-964 -5374 0
-964 -1054 -5375 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1342))
1054 5375 0
964 5375 0
964 1054 5374 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1343)<=0)
-1039 -5377 0
-994 -5377 0
-994 -1039 -5378 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1343))
1039 5378 0
994 5378 0
994 1039 5377 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1344)<=0)
-1024 -5380 0
-1009 -5380 0
-1009 -1024 -5381 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1344))
1024 5381 0
1009 5381 0
1009 1024 5380 0
c ((SATLiteral(979) + aux1344 - aux1345)<=0)
5380 -5383 0
5381 -5384 0
-979 -5383 0
-979 5380 -5384 0
-979 5381 -5386 0
c (0<=(SATLiteral(979) + aux1344 - aux1345))
-5381 5386 0
-5380 5384 0
979 5386 0
979 -5381 5384 0
979 -5380 5383 0
c ((aux1341 + aux1343 - aux1346)<=0)
5377 -5388 0
5378 -5389 0
5371 -5388 0
5371 5377 -5389 0
5371 5378 -5391 0
5372 -5389 0
5372 5377 -5391 0
5372 5378 -5393 0
c (0<=(aux1341 + aux1343 - aux1346))
-5378 5393 0
-5377 5391 0
-5372 5393 0
-5372 -5378 5391 0
-5372 -5377 5389 0
-5371 5391 0
-5371 -5378 5389 0
-5371 -5377 5388 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1347)<=0)
-1071 -5395 0
-951 -5395 0
-951 -1071 -5396 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1347))
1071 5396 0
951 5396 0
951 1071 5395 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1348)<=0)
-1056 -5398 0
-966 -5398 0
-966 -1056 -5399 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1348))
1056 5399 0
966 5399 0
966 1056 5398 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1349)<=0)
-1041 -5401 0
-996 -5401 0
-996 -1041 -5402 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1349))
1041 5402 0
996 5402 0
996 1041 5401 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1350)<=0)
-1026 -5404 0
-1011 -5404 0
-1011 -1026 -5405 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1350))
1026 5405 0
1011 5405 0
1011 1026 5404 0
c ((SATLiteral(981) + aux1350 - aux1351)<=0)
5404 -5407 0
5405 -5408 0
-981 -5407 0
-981 5404 -5408 0
-981 5405 -5410 0
c (0<=(SATLiteral(981) + aux1350 - aux1351))
-5405 5410 0
-5404 5408 0
981 5410 0
981 -5405 5408 0
981 -5404 5407 0
c ((aux1347 + aux1349 - aux1352)<=0)
5401 -5412 0
5402 -5413 0
5395 -5412 0
5395 5401 -5413 0
5395 5402 -5415 0
5396 -5413 0
5396 5401 -5415 0
5396 5402 -5417 0
c (0<=(aux1347 + aux1349 - aux1352))
-5402 5417 0
-5401 5415 0
-5396 5417 0
-5396 -5402 5415 0
-5396 -5401 5413 0
-5395 5415 0
-5395 -5402 5413 0
-5395 -5401 5412 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1353)<=0)
-1073 -5419 0
-953 -5419 0
-953 -1073 -5420 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1353))
1073 5420 0
953 5420 0
953 1073 5419 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1354)<=0)
-1058 -5422 0
-968 -5422 0
-968 -1058 -5423 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1354))
1058 5423 0
968 5423 0
968 1058 5422 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1355)<=0)
-1043 -5425 0
-998 -5425 0
-998 -1043 -5426 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1355))
1043 5426 0
998 5426 0
998 1043 5425 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1356)<=0)
-1028 -5428 0
-1013 -5428 0
-1013 -1028 -5429 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1356))
1028 5429 0
1013 5429 0
1013 1028 5428 0
c ((SATLiteral(983) + aux1356 - aux1357)<=0)
5428 -5431 0
5429 -5432 0
-983 -5431 0
-983 5428 -5432 0
-983 5429 -5434 0
c (0<=(SATLiteral(983) + aux1356 - aux1357))
-5429 5434 0
-5428 5432 0
983 5434 0
983 -5429 5432 0
983 -5428 5431 0
c ((aux1353 + aux1355 - aux1358)<=0)
5425 -5436 0
5426 -5437 0
5419 -5436 0
5419 5425 -5437 0
5419 5426 -5439 0
5420 -5437 0
5420 5425 -5439 0
5420 5426 -5441 0
c (0<=(aux1353 + aux1355 - aux1358))
-5426 5441 0
-5425 5439 0
-5420 5441 0
-5420 -5426 5439 0
-5420 -5425 5437 0
-5419 5439 0
-5419 -5426 5437 0
-5419 -5425 5436 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1359)<=0)
-1075 -5443 0
-955 -5443 0
-955 -1075 -5444 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1359))
1075 5444 0
955 5444 0
955 1075 5443 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1360)<=0)
-1060 -5446 0
-970 -5446 0
-970 -1060 -5447 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1360))
1060 5447 0
970 5447 0
970 1060 5446 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1361)<=0)
-1045 -5449 0
-1000 -5449 0
-1000 -1045 -5450 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1361))
1045 5450 0
1000 5450 0
1000 1045 5449 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1362)<=0)
-1030 -5452 0
-1015 -5452 0
-1015 -1030 -5453 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1362))
1030 5453 0
1015 5453 0
1015 1030 5452 0
c ((SATLiteral(985) + aux1362 - aux1363)<=0)
5452 -5455 0
5453 -5456 0
-985 -5455 0
-985 5452 -5456 0
-985 5453 -5458 0
c (0<=(SATLiteral(985) + aux1362 - aux1363))
-5453 5458 0
-5452 5456 0
985 5458 0
985 -5453 5456 0
985 -5452 5455 0
c ((aux1359 + aux1361 - aux1364)<=0)
5449 -5460 0
5450 -5461 0
5443 -5460 0
5443 5449 -5461 0
5443 5450 -5463 0
5444 -5461 0
5444 5449 -5463 0
5444 5450 -5465 0
c (0<=(aux1359 + aux1361 - aux1364))
-5450 5465 0
-5449 5463 0
-5444 5465 0
-5444 -5450 5463 0
-5444 -5449 5461 0
-5443 5463 0
-5443 -5450 5461 0
-5443 -5449 5460 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1365)<=0)
-1077 -5467 0
-957 -5467 0
-957 -1077 -5468 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1365))
1077 5468 0
957 5468 0
957 1077 5467 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1366)<=0)
-1062 -5470 0
-972 -5470 0
-972 -1062 -5471 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1366))
1062 5471 0
972 5471 0
972 1062 5470 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1367)<=0)
-1047 -5473 0
-1002 -5473 0
-1002 -1047 -5474 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1367))
1047 5474 0
1002 5474 0
1002 1047 5473 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1368)<=0)
-1032 -5476 0
-1017 -5476 0
-1017 -1032 -5477 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1368))
1032 5477 0
1017 5477 0
1017 1032 5476 0
c ((SATLiteral(987) + aux1368 - aux1369)<=0)
5476 -5479 0
5477 -5480 0
-987 -5479 0
-987 5476 -5480 0
-987 5477 -5482 0
c (0<=(SATLiteral(987) + aux1368 - aux1369))
-5477 5482 0
-5476 5480 0
987 5482 0
987 -5477 5480 0
987 -5476 5479 0
c ((aux1365 + aux1367 - aux1370)<=0)
5473 -5484 0
5474 -5485 0
5467 -5484 0
5467 5473 -5485 0
5467 5474 -5487 0
5468 -5485 0
5468 5473 -5487 0
5468 5474 -5489 0
c (0<=(aux1365 + aux1367 - aux1370))
-5474 5489 0
-5473 5487 0
-5468 5489 0
-5468 -5474 5487 0
-5468 -5473 5485 0
-5467 5487 0
-5467 -5474 5485 0
-5467 -5473 5484 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1371)<=0)
-1079 -5491 0
-959 -5491 0
-959 -1079 -5492 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1371))
1079 5492 0
959 5492 0
959 1079 5491 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1372)<=0)
-1064 -5494 0
-974 -5494 0
-974 -1064 -5495 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1372))
1064 5495 0
974 5495 0
974 1064 5494 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1373)<=0)
-1049 -5497 0
-1004 -5497 0
-1004 -1049 -5498 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1373))
1049 5498 0
1004 5498 0
1004 1049 5497 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1374)<=0)
-1034 -5500 0
-1019 -5500 0
-1019 -1034 -5501 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1374))
1034 5501 0
1019 5501 0
1019 1034 5500 0
c ((SATLiteral(989) + aux1374 - aux1375)<=0)
5500 -5503 0
5501 -5504 0
-989 -5503 0
-989 5500 -5504 0
-989 5501 -5506 0
c (0<=(SATLiteral(989) + aux1374 - aux1375))
-5501 5506 0
-5500 5504 0
989 5506 0
989 -5501 5504 0
989 -5500 5503 0
c ((aux1371 + aux1373 - aux1376)<=0)
5497 -5508 0
5498 -5509 0
5491 -5508 0
5491 5497 -5509 0
5491 5498 -5511 0
5492 -5509 0
5492 5497 -5511 0
5492 5498 -5513 0
c (0<=(aux1371 + aux1373 - aux1376))
-5498 5513 0
-5497 5511 0
-5492 5513 0
-5492 -5498 5511 0
-5492 -5497 5509 0
-5491 5511 0
-5491 -5498 5509 0
-5491 -5497 5508 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1377)<=0)
-1081 -5515 0
-961 -5515 0
-961 -1081 -5516 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1377))
1081 5516 0
961 5516 0
961 1081 5515 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1378)<=0)
-1066 -5518 0
-976 -5518 0
-976 -1066 -5519 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1378))
1066 5519 0
976 5519 0
976 1066 5518 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1379)<=0)
-1051 -5521 0
-1006 -5521 0
-1006 -1051 -5522 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1379))
1051 5522 0
1006 5522 0
1006 1051 5521 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1380)<=0)
-1036 -5524 0
-1021 -5524 0
-1021 -1036 -5525 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1380))
1036 5525 0
1021 5525 0
1021 1036 5524 0
c ((SATLiteral(991) + aux1380 - aux1381)<=0)
5524 -5527 0
5525 -5528 0
-991 -5527 0
-991 5524 -5528 0
-991 5525 -5530 0
c (0<=(SATLiteral(991) + aux1380 - aux1381))
-5525 5530 0
-5524 5528 0
991 5530 0
991 -5525 5528 0
991 -5524 5527 0
c ((aux1377 + aux1379 - aux1382)<=0)
5521 -5532 0
5522 -5533 0
5515 -5532 0
5515 5521 -5533 0
5515 5522 -5535 0
5516 -5533 0
5516 5521 -5535 0
5516 5522 -5537 0
c (0<=(aux1377 + aux1379 - aux1382))
-5522 5537 0
-5521 5535 0
-5516 5537 0
-5516 -5522 5535 0
-5516 -5521 5533 0
-5515 5535 0
-5515 -5522 5533 0
-5515 -5521 5532 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1383)<=0)
1080 -5539 0
960 -5539 0
960 1080 -5540 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1383))
-1080 5540 0
-960 5540 0
-960 -1080 5539 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1384)<=0)
1065 -5542 0
975 -5542 0
975 1065 -5543 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1384))
-1065 5543 0
-975 5543 0
-975 -1065 5542 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1385)<=0)
1050 -5545 0
1005 -5545 0
1005 1050 -5546 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1385))
-1050 5546 0
-1005 5546 0
-1005 -1050 5545 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1386)<=0)
1035 -5548 0
1020 -5548 0
1020 1035 -5549 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1386))
-1035 5549 0
-1020 5549 0
-1020 -1035 5548 0
c ((SATLiteral(-990) + aux1386 - aux1387)<=0)
5548 -5551 0
5549 -5552 0
990 -5551 0
990 5548 -5552 0
990 5549 -5554 0
c (0<=(SATLiteral(-990) + aux1386 - aux1387))
-5549 5554 0
-5548 5552 0
-990 5554 0
-990 -5549 5552 0
-990 -5548 5551 0
c ((aux1383 + aux1385 - aux1388)<=0)
5545 -5556 0
5546 -5557 0
5539 -5556 0
5539 5545 -5557 0
5539 5546 -5559 0
5540 -5557 0
5540 5545 -5559 0
5540 5546 -5561 0
c (0<=(aux1383 + aux1385 - aux1388))
-5546 5561 0
-5545 5559 0
-5540 5561 0
-5540 -5546 5559 0
-5540 -5545 5557 0
-5539 5559 0
-5539 -5546 5557 0
-5539 -5545 5556 0
c (( - aux1389 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5563 0
-1082 -5563 0
-1082 -1202 -5564 0
c (0<=( - aux1389 + SATLiteral(1082) + SATLiteral(1202)))
1202 5564 0
1082 5564 0
1082 1202 5563 0
c (( - aux1390 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5566 0
-1097 -5566 0
-1097 -1187 -5567 0
c (0<=( - aux1390 + SATLiteral(1097) + SATLiteral(1187)))
1187 5567 0
1097 5567 0
1097 1187 5566 0
c (( - aux1391 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5569 0
-1127 -5569 0
-1127 -1172 -5570 0
c (0<=( - aux1391 + SATLiteral(1127) + SATLiteral(1172)))
1172 5570 0
1127 5570 0
1127 1172 5569 0
c (( - aux1392 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5572 0
-1142 -5572 0
-1142 -1157 -5573 0
c (0<=( - aux1392 + SATLiteral(1142) + SATLiteral(1157)))
1157 5573 0
1142 5573 0
1142 1157 5572 0
c ((aux1392 - aux1393 + SATLiteral(1112))<=0)
5572 -5575 0
5573 -5576 0
-1112 -5575 0
-1112 5572 -5576 0
-1112 5573 -5578 0
c (0<=(aux1392 - aux1393 + SATLiteral(1112)))
-5573 5578 0
-5572 5576 0
1112 5578 0
1112 -5573 5576 0
1112 -5572 5575 0
c ((aux1389 + aux1391 - aux1394)<=0)
5569 -5580 0
5570 -5581 0
5563 -5580 0
5563 5569 -5581 0
5563 5570 -5583 0
5564 -5581 0
5564 5569 -5583 0
5564 5570 -5585 0
c (0<=(aux1389 + aux1391 - aux1394))
-5570 5585 0
-5569 5583 0
-5564 5585 0
-5564 -5570 5583 0
-5564 -5569 5581 0
-5563 5583 0
-5563 -5570 5581 0
-5563 -5569 5580 0
c (( - aux1395 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5587 0
-1084 -5587 0
-1084 -1204 -5588 0
c (0<=( - aux1395 + SATLiteral(1084) + SATLiteral(1204)))
1204 5588 0
1084 5588 0
1084 1204 5587 0
c (( - aux1396 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5590 0
-1099 -5590 0
-1099 -1189 -5591 0
c (0<=( - aux1396 + SATLiteral(1099) + SATLiteral(1189)))
1189 5591 0
1099 5591 0
1099 1189 5590 0
c (( - aux1397 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5593 0
-1129 -5593 0
-1129 -1174 -5594 0
c (0<=( - aux1397 + SATLiteral(1129) + SATLiteral(1174)))
1174 5594 0
1129 5594 0
1129 1174 5593 0
c (( - aux1398 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5596 0
-1144 -5596 0
-1144 -1159 -5597 0
c (0<=( - aux1398 + SATLiteral(1144) + SATLiteral(1159)))
1159 5597 0
1144 5597 0
1144 1159 5596 0
c ((aux1398 - aux1399 + SATLiteral(1114))<=0)
5596 -5599 0
5597 -5600 0
-1114 -5599 0
-1114 5596 -5600 0
-1114 5597 -5602 0
c (0<=(aux1398 - aux1399 + SATLiteral(1114)))
-5597 5602 0
-5596 5600 0
1114 5602 0
1114 -5597 5600 0
1114 -5596 5599 0
c ((aux1395 + aux1397 - aux1400)<=0)
5593 -5604 0
5594 -5605 0
5587 -5604 0
5587 5593 -5605 0
5587 5594 -5607 0
5588 -5605 0
5588 5593 -5607 0
5588 5594 -5609 0
c (0<=(aux1395 + aux1397 - aux1400))
-5594 5609 0
-5593 5607 0
-5588 5609 0
-5588 -5594 5607 0
-5588 -5593 5605 0
-5587 5607 0
-5587 -5594 5605 0
-5587 -5593 5604 0
c (( - aux1401 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5611 0
-1086 -5611 0
-1086 -1206 -5612 0
c (0<=( - aux1401 + SATLiteral(1086) + SATLiteral(1206)))
1206 5612 0
1086 5612 0
1086 1206 5611 0
c (( - aux1402 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5614 0
-1101 -5614 0
-1101 -1191 -5615 0
c (0<=( - aux1402 + SATLiteral(1101) + SATLiteral(1191)))
1191 5615 0
1101 5615 0
1101 1191 5614 0
c (( - aux1403 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5617 0
-1131 -5617 0
-1131 -1176 -5618 0
c (0<=( - aux1403 + SATLiteral(1131) + SATLiteral(1176)))
1176 5618 0
1131 5618 0
1131 1176 5617 0
c (( - aux1404 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5620 0
-1146 -5620 0
-1146 -1161 -5621 0
c (0<=( - aux1404 + SATLiteral(1146) + SATLiteral(1161)))
1161 5621 0
1146 5621 0
1146 1161 5620 0
c ((aux1404 - aux1405 + SATLiteral(1116))<=0)
5620 -5623 0
5621 -5624 0
-1116 -5623 0
-1116 5620 -5624 0
-1116 5621 -5626 0
c (0<=(aux1404 - aux1405 + SATLiteral(1116)))
-5621 5626 0
-5620 5624 0
1116 5626 0
1116 -5621 5624 0
1116 -5620 5623 0
c ((aux1401 + aux1403 - aux1406)<=0)
5617 -5628 0
5618 -5629 0
5611 -5628 0
5611 5617 -5629 0
5611 5618 -5631 0
5612 -5629 0
5612 5617 -5631 0
5612 5618 -5633 0
c (0<=(aux1401 + aux1403 - aux1406))
-5618 5633 0
-5617 5631 0
-5612 5633 0
-5612 -5618 5631 0
-5612 -5617 5629 0
-5611 5631 0
-5611 -5618 5629 0
-5611 -5617 5628 0
c (( - aux1407 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5635 0
-1088 -5635 0
-1088 -1208 -5636 0
c (0<=( - aux1407 + SATLiteral(1088) + SATLiteral(1208)))
1208 5636 0
1088 5636 0
1088 1208 5635 0
c (( - aux1408 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5638 0
-1103 -5638 0
-1103 -1193 -5639 0
c (0<=( - aux1408 + SATLiteral(1103) + SATLiteral(1193)))
1193 5639 0
1103 5639 0
1103 1193 5638 0
c (( - aux1409 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5641 0
-1133 -5641 0
-1133 -1178 -5642 0
c (0<=( - aux1409 + SATLiteral(1133) + SATLiteral(1178)))
1178 5642 0
1133 5642 0
1133 1178 5641 0
c (( - aux1410 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5644 0
-1148 -5644 0
-1148 -1163 -5645 0
c (0<=( - aux1410 + SATLiteral(1148) + SATLiteral(1163)))
1163 5645 0
1148 5645 0
1148 1163 5644 0
c ((aux1410 - aux1411 + SATLiteral(1118))<=0)
5644 -5647 0
5645 -5648 0
-1118 -5647 0
-1118 5644 -5648 0
-1118 5645 -5650 0
c (0<=(aux1410 - aux1411 + SATLiteral(1118)))
-5645 5650 0
-5644 5648 0
1118 5650 0
1118 -5645 5648 0
1118 -5644 5647 0
c ((aux1407 + aux1409 - aux1412)<=0)
5641 -5652 0
5642 -5653 0
5635 -5652 0
5635 5641 -5653 0
5635 5642 -5655 0
5636 -5653 0
5636 5641 -5655 0
5636 5642 -5657 0
c (0<=(aux1407 + aux1409 - aux1412))
-5642 5657 0
-5641 5655 0
-5636 5657 0
-5636 -5642 5655 0
-5636 -5641 5653 0
-5635 5655 0
-5635 -5642 5653 0
-5635 -5641 5652 0
c (( - aux1413 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5659 0
-1090 -5659 0
-1090 -1210 -5660 0
c (0<=( - aux1413 + SATLiteral(1090) + SATLiteral(1210)))
1210 5660 0
1090 5660 0
1090 1210 5659 0
c (( - aux1414 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5662 0
-1105 -5662 0
-1105 -1195 -5663 0
c (0<=( - aux1414 + SATLiteral(1105) + SATLiteral(1195)))
1195 5663 0
1105 5663 0
1105 1195 5662 0
c (( - aux1415 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5665 0
-1135 -5665 0
-1135 -1180 -5666 0
c (0<=( - aux1415 + SATLiteral(1135) + SATLiteral(1180)))
1180 5666 0
1135 5666 0
1135 1180 5665 0
c (( - aux1416 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5668 0
-1150 -5668 0
-1150 -1165 -5669 0
c (0<=( - aux1416 + SATLiteral(1150) + SATLiteral(1165)))
1165 5669 0
1150 5669 0
1150 1165 5668 0
c ((aux1416 - aux1417 + SATLiteral(1120))<=0)
5668 -5671 0
5669 -5672 0
-1120 -5671 0
-1120 5668 -5672 0
-1120 5669 -5674 0
c (0<=(aux1416 - aux1417 + SATLiteral(1120)))
-5669 5674 0
-5668 5672 0
1120 5674 0
1120 -5669 5672 0
1120 -5668 5671 0
c ((aux1413 + aux1415 - aux1418)<=0)
5665 -5676 0
5666 -5677 0
5659 -5676 0
5659 5665 -5677 0
5659 5666 -5679 0
5660 -5677 0
5660 5665 -5679 0
5660 5666 -5681 0
c (0<=(aux1413 + aux1415 - aux1418))
-5666 5681 0
-5665 5679 0
-5660 5681 0
-5660 -5666 5679 0
-5660 -5665 5677 0
-5659 5679 0
-5659 -5666 5677 0
-5659 -5665 5676 0
c (( - aux1419 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5683 0
-1092 -5683 0
-1092 -1212 -5684 0
c (0<=( - aux1419 + SATLiteral(1092) + SATLiteral(1212)))
1212 5684 0
1092 5684 0
1092 1212 5683 0
c (( - aux1420 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5686 0
-1107 -5686 0
-1107 -1197 -5687 0
c (0<=( - aux1420 + SATLiteral(1107) + SATLiteral(1197)))
1197 5687 0
1107 5687 0
1107 1197 5686 0
c (( - aux1421 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5689 0
-1137 -5689 0
-1137 -1182 -5690 0
c (0<=( - aux1421 + SATLiteral(1137) + SATLiteral(1182)))
1182 5690 0
1137 5690 0
1137 1182 5689 0
c (( - aux1422 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5692 0
-1152 -5692 0
-1152 -1167 -5693 0
c (0<=( - aux1422 + SATLiteral(1152) + SATLiteral(1167)))
1167 5693 0
1152 5693 0
1152 1167 5692 0
c ((aux1422 - aux1423 + SATLiteral(1122))<=0)
5692 -5695 0
5693 -5696 0
-1122 -5695 0
-1122 5692 -5696 0
-1122 5693 -5698 0
c (0<=(aux1422 - aux1423 + SATLiteral(1122)))
-5693 5698 0
-5692 5696 0
1122 5698 0
1122 -5693 5696 0
1122 -5692 5695 0
c ((aux1419 + aux1421 - aux1424)<=0)
5689 -5700 0
5690 -5701 0
5683 -5700 0
5683 5689 -5701 0
5683 5690 -5703 0
5684 -5701 0
5684 5689 -5703 0
5684 5690 -5705 0
c (0<=(aux1419 + aux1421 - aux1424))
-5690 5705 0
-5689 5703 0
-5684 5705 0
-5684 -5690 5703 0
-5684 -5689 5701 0
-5683 5703 0
-5683 -5690 5701 0
-5683 -5689 5700 0
c (( - aux1425 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5707 0
-1094 -5707 0
-1094 -1214 -5708 0
c (0<=( - aux1425 + SATLiteral(1094) + SATLiteral(1214)))
1214 5708 0
1094 5708 0
1094 1214 5707 0
c (( - aux1426 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5710 0
-1109 -5710 0
-1109 -1199 -5711 0
c (0<=( - aux1426 + SATLiteral(1109) + SATLiteral(1199)))
1199 5711 0
1109 5711 0
1109 1199 5710 0
c (( - aux1427 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5713 0
-1139 -5713 0
-1139 -1184 -5714 0
c (0<=( - aux1427 + SATLiteral(1139) + SATLiteral(1184)))
1184 5714 0
1139 5714 0
1139 1184 5713 0
c (( - aux1428 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5716 0
-1154 -5716 0
-1154 -1169 -5717 0
c (0<=( - aux1428 + SATLiteral(1154) + SATLiteral(1169)))
1169 5717 0
1154 5717 0
1154 1169 5716 0
c ((aux1428 - aux1429 + SATLiteral(1124))<=0)
5716 -5719 0
5717 -5720 0
-1124 -5719 0
-1124 5716 -5720 0
-1124 5717 -5722 0
c (0<=(aux1428 - aux1429 + SATLiteral(1124)))
-5717 5722 0
-5716 5720 0
1124 5722 0
1124 -5717 5720 0
1124 -5716 5719 0
c ((aux1425 + aux1427 - aux1430)<=0)
5713 -5724 0
5714 -5725 0
5707 -5724 0
5707 5713 -5725 0
5707 5714 -5727 0
5708 -5725 0
5708 5713 -5727 0
5708 5714 -5729 0
c (0<=(aux1425 + aux1427 - aux1430))
-5714 5729 0
-5713 5727 0
-5708 5729 0
-5708 -5714 5727 0
-5708 -5713 5725 0
-5707 5727 0
-5707 -5714 5725 0
-5707 -5713 5724 0
c (( - aux1431 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5731 0
-1096 -5731 0
-1096 -1216 -5732 0
c (0<=( - aux1431 + SATLiteral(1096) + SATLiteral(1216)))
1216 5732 0
1096 5732 0
1096 1216 5731 0
c (( - aux1432 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5734 0
-1111 -5734 0
-1111 -1201 -5735 0
c (0<=( - aux1432 + SATLiteral(1111) + SATLiteral(1201)))
1201 5735 0
1111 5735 0
1111 1201 5734 0
c (( - aux1433 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5737 0
-1141 -5737 0
-1141 -1186 -5738 0
c (0<=( - aux1433 + SATLiteral(1141) + SATLiteral(1186)))
1186 5738 0
1141 5738 0
1141 1186 5737 0
c (( - aux1434 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5740 0
-1156 -5740 0
-1156 -1171 -5741 0
c (0<=( - aux1434 + SATLiteral(1156) + SATLiteral(1171)))
1171 5741 0
1156 5741 0
1156 1171 5740 0
c ((aux1434 - aux1435 + SATLiteral(1126))<=0)
5740 -5743 0
5741 -5744 0
-1126 -5743 0
-1126 5740 -5744 0
-1126 5741 -5746 0
c (0<=(aux1434 - aux1435 + SATLiteral(1126)))
-5741 5746 0
-5740 5744 0
1126 5746 0
1126 -5741 5744 0
1126 -5740 5743 0
c ((aux1431 + aux1433 - aux1436)<=0)
5737 -5748 0
5738 -5749 0
5731 -5748 0
5731 5737 -5749 0
5731 5738 -5751 0
5732 -5749 0
5732 5737 -5751 0
5732 5738 -5753 0
c (0<=(aux1431 + aux1433 - aux1436))
-5738 5753 0
-5737 5751 0
-5732 5753 0
-5732 -5738 5751 0
-5732 -5737 5749 0
-5731 5751 0
-5731 -5738 5749 0
-5731 -5737 5748 0
c (( - aux1437 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5755 0
1095 -5755 0
1095 1215 -5756 0
c (0<=( - aux1437 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5756 0
-1095 5756 0
-1095 -1215 5755 0
c (( - aux1438 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5758 0
1110 -5758 0
1110 1200 -5759 0
c (0<=( - aux1438 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5759 0
-1110 5759 0
-1110 -1200 5758 0
c (( - aux1439 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5761 0
1140 -5761 0
1140 1185 -5762 0
c (0<=( - aux1439 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5762 0
-1140 5762 0
-1140 -1185 5761 0
c (( - aux1440 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5764 0
1155 -5764 0
1155 1170 -5765 0
c (0<=( - aux1440 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5765 0
-1155 5765 0
-1155 -1170 5764 0
c ((aux1440 - aux1441 + SATLiteral(-1125))<=0)
5764 -5767 0
5765 -5768 0
1125 -5767 0
1125 5764 -5768 0
1125 5765 -5770 0
c (0<=(aux1440 - aux1441 + SATLiteral(-1125)))
-5765 5770 0
-5764 5768 0
-1125 5770 0
-1125 -5765 5768 0
-1125 -5764 5767 0
c ((aux1437 + aux1439 - aux1442)<=0)
5761 -5772 0
5762 -5773 0
5755 -5772 0
5755 5761 -5773 0
5755 5762 -5775 0
5756 -5773 0
5756 5761 -5775 0
5756 5762 -5777 0
c (0<=(aux1437 + aux1439 - aux1442))
-5762 5777 0
-5761 5775 0
-5756 5777 0
-5756 -5762 5775 0
-5756 -5761 5773 0
-5755 5775 0
-5755 -5762 5773 0
-5755 -5761 5772 0
c ((SATLiteral(272) - aux1443 + SATLiteral(167))<=0)
-167 -5779 0
-272 -5779 0
-272 -167 -5780 0
c (0<=(SATLiteral(272) - aux1443 + SATLiteral(167)))
167 5780 0
272 5780 0
272 167 5779 0
c ((SATLiteral(287) - aux1444 + SATLiteral(152))<=0)
-152 -5782 0
-287 -5782 0
-287 -152 -5783 0
c (0<=(SATLiteral(287) - aux1444 + SATLiteral(152)))
152 5783 0
287 5783 0
287 152 5782 0
c ((SATLiteral(2) - aux1445 + SATLiteral(137))<=0)
-137 -5785 0
-2 -5785 0
-2 -137 -5786 0
c (0<=(SATLiteral(2) - aux1445 + SATLiteral(137)))
137 5786 0
2 5786 0
2 137 5785 0
c ((SATLiteral(17) + SATLiteral(32) - aux1446)<=0)
-32 -5788 0
-17 -5788 0
-17 -32 -5789 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1446))
32 5789 0
17 5789 0
17 32 5788 0
c ((SATLiteral(302) + aux1446 - aux1447)<=0)
5788 -5791 0
5789 -5792 0
-302 -5791 0
-302 5788 -5792 0
-302 5789 -5794 0
c (0<=(SATLiteral(302) + aux1446 - aux1447))
-5789 5794 0
-5788 5792 0
302 5794 0
302 -5789 5792 0
302 -5788 5791 0
c ((aux1443 + aux1445 - aux1448)<=0)
5785 -5796 0
5786 -5797 0
5779 -5796 0
5779 5785 -5797 0
5779 5786 -5799 0
5780 -5797 0
5780 5785 -5799 0
5780 5786 -5801 0
c (0<=(aux1443 + aux1445 - aux1448))
-5786 5801 0
-5785 5799 0
-5780 5801 0
-5780 -5786 5799 0
-5780 -5785 5797 0
-5779 5799 0
-5779 -5786 5797 0
-5779 -5785 5796 0
c ((SATLiteral(274) - aux1449 + SATLiteral(169))<=0)
-169 -5803 0
-274 -5803 0
-274 -169 -5804 0
c (0<=(SATLiteral(274) - aux1449 + SATLiteral(169)))
169 5804 0
274 5804 0
274 169 5803 0
c ((SATLiteral(289) - aux1450 + SATLiteral(154))<=0)
-154 -5806 0
-289 -5806 0
-289 -154 -5807 0
c (0<=(SATLiteral(289) - aux1450 + SATLiteral(154)))
154 5807 0
289 5807 0
289 154 5806 0
c ((SATLiteral(4) - aux1451 + SATLiteral(139))<=0)
-139 -5809 0
-4 -5809 0
-4 -139 -5810 0
c (0<=(SATLiteral(4) - aux1451 + SATLiteral(139)))
139 5810 0
4 5810 0
4 139 5809 0
c ((SATLiteral(19) + SATLiteral(34) - aux1452)<=0)
-34 -5812 0
-19 -5812 0
-19 -34 -5813 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1452))
34 5813 0
19 5813 0
19 34 5812 0
c ((SATLiteral(304) + aux1452 - aux1453)<=0)
5812 -5815 0
5813 -5816 0
-304 -5815 0
-304 5812 -5816 0
-304 5813 -5818 0
c (0<=(SATLiteral(304) + aux1452 - aux1453))
-5813 5818 0
-5812 5816 0
304 5818 0
304 -5813 5816 0
304 -5812 5815 0
c ((aux1449 + aux1451 - aux1454)<=0)
5809 -5820 0
5810 -5821 0
5803 -5820 0
5803 5809 -5821 0
5803 5810 -5823 0
5804 -5821 0
5804 5809 -5823 0
5804 5810 -5825 0
c (0<=(aux1449 + aux1451 - aux1454))
-5810 5825 0
-5809 5823 0
-5804 5825 0
-5804 -5810 5823 0
-5804 -5809 5821 0
-5803 5823 0
-5803 -5810 5821 0
-5803 -5809 5820 0
c ((SATLiteral(276) - aux1455 + SATLiteral(171))<=0)
-171 -5827 0
-276 -5827 0
-276 -171 -5828 0
c (0<=(SATLiteral(276) - aux1455 + SATLiteral(171)))
171 5828 0
276 5828 0
276 171 5827 0
c ((SATLiteral(291) - aux1456 + SATLiteral(156))<=0)
-156 -5830 0
-291 -5830 0
-291 -156 -5831 0
c (0<=(SATLiteral(291) - aux1456 + SATLiteral(156)))
156 5831 0
291 5831 0
291 156 5830 0
c ((SATLiteral(6) - aux1457 + SATLiteral(141))<=0)
-141 -5833 0
-6 -5833 0
-6 -141 -5834 0
c (0<=(SATLiteral(6) - aux1457 + SATLiteral(141)))
141 5834 0
6 5834 0
6 141 5833 0
c ((SATLiteral(21) + SATLiteral(36) - aux1458)<=0)
-36 -5836 0
-21 -5836 0
-21 -36 -5837 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1458))
36 5837 0
21 5837 0
21 36 5836 0
c ((SATLiteral(306) + aux1458 - aux1459)<=0)
5836 -5839 0
5837 -5840 0
-306 -5839 0
-306 5836 -5840 0
-306 5837 -5842 0
c (0<=(SATLiteral(306) + aux1458 - aux1459))
-5837 5842 0
-5836 5840 0
306 5842 0
306 -5837 5840 0
306 -5836 5839 0
c ((aux1455 + aux1457 - aux1460)<=0)
5833 -5844 0
5834 -5845 0
5827 -5844 0
5827 5833 -5845 0
5827 5834 -5847 0
5828 -5845 0
5828 5833 -5847 0
5828 5834 -5849 0
c (0<=(aux1455 + aux1457 - aux1460))
-5834 5849 0
-5833 5847 0
-5828 5849 0
-5828 -5834 5847 0
-5828 -5833 5845 0
-5827 5847 0
-5827 -5834 5845 0
-5827 -5833 5844 0
c ((SATLiteral(278) - aux1461 + SATLiteral(173))<=0)
-173 -5851 0
-278 -5851 0
-278 -173 -5852 0
c (0<=(SATLiteral(278) - aux1461 + SATLiteral(173)))
173 5852 0
278 5852 0
278 173 5851 0
c ((SATLiteral(293) - aux1462 + SATLiteral(158))<=0)
-158 -5854 0
-293 -5854 0
-293 -158 -5855 0
c (0<=(SATLiteral(293) - aux1462 + SATLiteral(158)))
158 5855 0
293 5855 0
293 158 5854 0
c ((SATLiteral(8) - aux1463 + SATLiteral(143))<=0)
-143 -5857 0
-8 -5857 0
-8 -143 -5858 0
c (0<=(SATLiteral(8) - aux1463 + SATLiteral(143)))
143 5858 0
8 5858 0
8 143 5857 0
c ((SATLiteral(23) + SATLiteral(38) - aux1464)<=0)
-38 -5860 0
-23 -5860 0
-23 -38 -5861 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1464))
38 5861 0
23 5861 0
23 38 5860 0
c ((SATLiteral(308) + aux1464 - aux1465)<=0)
5860 -5863 0
5861 -5864 0
-308 -5863 0
-308 5860 -5864 0
-308 5861 -5866 0
c (0<=(SATLiteral(308) + aux1464 - aux1465))
-5861 5866 0
-5860 5864 0
308 5866 0
308 -5861 5864 0
308 -5860 5863 0
c ((aux1461 + aux1463 - aux1466)<=0)
5857 -5868 0
5858 -5869 0
5851 -5868 0
5851 5857 -5869 0
5851 5858 -5871 0
5852 -5869 0
5852 5857 -5871 0
5852 5858 -5873 0
c (0<=(aux1461 + aux1463 - aux1466))
-5858 5873 0
-5857 5871 0
-5852 5873 0
-5852 -5858 5871 0
-5852 -5857 5869 0
-5851 5871 0
-5851 -5858 5869 0
-5851 -5857 5868 0
c ((SATLiteral(280) - aux1467 + SATLiteral(175))<=0)
-175 -5875 0
-280 -5875 0
-280 -175 -5876 0
c (0<=(SATLiteral(280) - aux1467 + SATLiteral(175)))
175 5876 0
280 5876 0
280 175 5875 0
c ((SATLiteral(295) - aux1468 + SATLiteral(160))<=0)
-160 -5878 0
-295 -5878 0
-295 -160 -5879 0
c (0<=(SATLiteral(295) - aux1468 + SATLiteral(160)))
160 5879 0
295 5879 0
295 160 5878 0
c ((SATLiteral(10) - aux1469 + SATLiteral(145))<=0)
-145 -5881 0
-10 -5881 0
-10 -145 -5882 0
c (0<=(SATLiteral(10) - aux1469 + SATLiteral(145)))
145 5882 0
10 5882 0
10 145 5881 0
c ((SATLiteral(25) + SATLiteral(40) - aux1470)<=0)
-40 -5884 0
-25 -5884 0
-25 -40 -5885 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1470))
40 5885 0
25 5885 0
25 40 5884 0
c ((SATLiteral(310) + aux1470 - aux1471)<=0)
5884 -5887 0
5885 -5888 0
-310 -5887 0
-310 5884 -5888 0
-310 5885 -5890 0
c (0<=(SATLiteral(310) + aux1470 - aux1471))
-5885 5890 0
-5884 5888 0
310 5890 0
310 -5885 5888 0
310 -5884 5887 0
c ((aux1467 + aux1469 - aux1472)<=0)
5881 -5892 0
5882 -5893 0
5875 -5892 0
5875 5881 -5893 0
5875 5882 -5895 0
5876 -5893 0
5876 5881 -5895 0
5876 5882 -5897 0
c (0<=(aux1467 + aux1469 - aux1472))
-5882 5897 0
-5881 5895 0
-5876 5897 0
-5876 -5882 5895 0
-5876 -5881 5893 0
-5875 5895 0
-5875 -5882 5893 0
-5875 -5881 5892 0
c ((SATLiteral(282) - aux1473 + SATLiteral(177))<=0)
-177 -5899 0
-282 -5899 0
-282 -177 -5900 0
c (0<=(SATLiteral(282) - aux1473 + SATLiteral(177)))
177 5900 0
282 5900 0
282 177 5899 0
c ((SATLiteral(297) - aux1474 + SATLiteral(162))<=0)
-162 -5902 0
-297 -5902 0
-297 -162 -5903 0
c (0<=(SATLiteral(297) - aux1474 + SATLiteral(162)))
162 5903 0
297 5903 0
297 162 5902 0
c ((SATLiteral(12) - aux1475 + SATLiteral(147))<=0)
-147 -5905 0
-12 -5905 0
-12 -147 -5906 0
c (0<=(SATLiteral(12) - aux1475 + SATLiteral(147)))
147 5906 0
12 5906 0
12 147 5905 0
c ((SATLiteral(27) + SATLiteral(42) - aux1476)<=0)
-42 -5908 0
-27 -5908 0
-27 -42 -5909 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1476))
42 5909 0
27 5909 0
27 42 5908 0
c ((SATLiteral(312) + aux1476 - aux1477)<=0)
5908 -5911 0
5909 -5912 0
-312 -5911 0
-312 5908 -5912 0
-312 5909 -5914 0
c (0<=(SATLiteral(312) + aux1476 - aux1477))
-5909 5914 0
-5908 5912 0
312 5914 0
312 -5909 5912 0
312 -5908 5911 0
c ((aux1473 + aux1475 - aux1478)<=0)
5905 -5916 0
5906 -5917 0
5899 -5916 0
5899 5905 -5917 0
5899 5906 -5919 0
5900 -5917 0
5900 5905 -5919 0
5900 5906 -5921 0
c (0<=(aux1473 + aux1475 - aux1478))
-5906 5921 0
-5905 5919 0
-5900 5921 0
-5900 -5906 5919 0
-5900 -5905 5917 0
-5899 5919 0
-5899 -5906 5917 0
-5899 -5905 5916 0
c ((SATLiteral(284) - aux1479 + SATLiteral(179))<=0)
-179 -5923 0
-284 -5923 0
-284 -179 -5924 0
c (0<=(SATLiteral(284) - aux1479 + SATLiteral(179)))
179 5924 0
284 5924 0
284 179 5923 0
c ((SATLiteral(299) - aux1480 + SATLiteral(164))<=0)
-164 -5926 0
-299 -5926 0
-299 -164 -5927 0
c (0<=(SATLiteral(299) - aux1480 + SATLiteral(164)))
164 5927 0
299 5927 0
299 164 5926 0
c ((SATLiteral(14) - aux1481 + SATLiteral(149))<=0)
-149 -5929 0
-14 -5929 0
-14 -149 -5930 0
c (0<=(SATLiteral(14) - aux1481 + SATLiteral(149)))
149 5930 0
14 5930 0
14 149 5929 0
c ((SATLiteral(29) + SATLiteral(44) - aux1482)<=0)
-44 -5932 0
-29 -5932 0
-29 -44 -5933 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1482))
44 5933 0
29 5933 0
29 44 5932 0
c ((SATLiteral(314) + aux1482 - aux1483)<=0)
5932 -5935 0
5933 -5936 0
-314 -5935 0
-314 5932 -5936 0
-314 5933 -5938 0
c (0<=(SATLiteral(314) + aux1482 - aux1483))
-5933 5938 0
-5932 5936 0
314 5938 0
314 -5933 5936 0
314 -5932 5935 0
c ((aux1479 + aux1481 - aux1484)<=0)
5929 -5940 0
5930 -5941 0
5923 -5940 0
5923 5929 -5941 0
5923 5930 -5943 0
5924 -5941 0
5924 5929 -5943 0
5924 5930 -5945 0
c (0<=(aux1479 + aux1481 - aux1484))
-5930 5945 0
-5929 5943 0
-5924 5945 0
-5924 -5930 5943 0
-5924 -5929 5941 0
-5923 5943 0
-5923 -5930 5941 0
-5923 -5929 5940 0
c ((SATLiteral(286) - aux1485 + SATLiteral(181))<=0)
-181 -5947 0
-286 -5947 0
-286 -181 -5948 0
c (0<=(SATLiteral(286) - aux1485 + SATLiteral(181)))
181 5948 0
286 5948 0
286 181 5947 0
c ((SATLiteral(301) - aux1486 + SATLiteral(166))<=0)
-166 -5950 0
-301 -5950 0
-301 -166 -5951 0
c (0<=(SATLiteral(301) - aux1486 + SATLiteral(166)))
166 5951 0
301 5951 0
301 166 5950 0
c ((SATLiteral(16) - aux1487 + SATLiteral(151))<=0)
-151 -5953 0
-16 -5953 0
-16 -151 -5954 0
c (0<=(SATLiteral(16) - aux1487 + SATLiteral(151)))
151 5954 0
16 5954 0
16 151 5953 0
c ((SATLiteral(31) + SATLiteral(46) - aux1488)<=0)
-46 -5956 0
-31 -5956 0
-31 -46 -5957 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1488))
46 5957 0
31 5957 0
31 46 5956 0
c ((SATLiteral(316) + aux1488 - aux1489)<=0)
5956 -5959 0
5957 -5960 0
-316 -5959 0
-316 5956 -5960 0
-316 5957 -5962 0
c (0<=(SATLiteral(316) + aux1488 - aux1489))
-5957 5962 0
-5956 5960 0
316 5962 0
316 -5957 5960 0
316 -5956 5959 0
c ((aux1485 + aux1487 - aux1490)<=0)
5953 -5964 0
5954 -5965 0
5947 -5964 0
5947 5953 -5965 0
5947 5954 -5967 0
5948 -5965 0
5948 5953 -5967 0
5948 5954 -5969 0
c (0<=(aux1485 + aux1487 - aux1490))
-5954 5969 0
-5953 5967 0
-5948 5969 0
-5948 -5954 5967 0
-5948 -5953 5965 0
-5947 5967 0
-5947 -5954 5965 0
-5947 -5953 5964 0
c ((SATLiteral(-285) - aux1491 + SATLiteral(-180))<=0)
180 -5971 0
285 -5971 0
285 180 -5972 0
c (0<=(SATLiteral(-285) - aux1491 + SATLiteral(-180)))
-180 5972 0
-285 5972 0
-285 -180 5971 0
c ((SATLiteral(-300) - aux1492 + SATLiteral(-165))<=0)
165 -5974 0
300 -5974 0
300 165 -5975 0
c (0<=(SATLiteral(-300) - aux1492 + SATLiteral(-165)))
-165 5975 0
-300 5975 0
-300 -165 5974 0
c ((SATLiteral(-15) - aux1493 + SATLiteral(-150))<=0)
150 -5977 0
15 -5977 0
15 150 -5978 0
c (0<=(SATLiteral(-15) - aux1493 + SATLiteral(-150)))
-150 5978 0
-15 5978 0
-15 -150 5977 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1494)<=0)
45 -5980 0
30 -5980 0
30 45 -5981 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1494))
-45 5981 0
-30 5981 0
-30 -45 5980 0
c ((SATLiteral(-315) + aux1494 - aux1495)<=0)
5980 -5983 0
5981 -5984 0
315 -5983 0
315 5980 -5984 0
315 5981 -5986 0
c (0<=(SATLiteral(-315) + aux1494 - aux1495))
-5981 5986 0
-5980 5984 0
-315 5986 0
-315 -5981 5984 0
-315 -5980 5983 0
c ((aux1491 + aux1493 - aux1496)<=0)
5977 -5988 0
5978 -5989 0
5971 -5988 0
5971 5977 -5989 0
5971 5978 -5991 0
5972 -5989 0
5972 5977 -5991 0
5972 5978 -5993 0
c (0<=(aux1491 + aux1493 - aux1496))
-5978 5993 0
-5977 5991 0
-5972 5993 0
-5972 -5978 5991 0
-5972 -5977 5989 0
-5971 5991 0
-5971 -5978 5989 0
-5971 -5977 5988 0
c ((SATLiteral(317) - aux1497 + SATLiteral(212))<=0)
-212 -5995 0
-317 -5995 0
-317 -212 -5996 0
c (0<=(SATLiteral(317) - aux1497 + SATLiteral(212)))
212 5996 0
317 5996 0
317 212 5995 0
c ((SATLiteral(332) - aux1498 + SATLiteral(197))<=0)
-197 -5998 0
-332 -5998 0
-332 -197 -5999 0
c (0<=(SATLiteral(332) - aux1498 + SATLiteral(197)))
197 5999 0
332 5999 0
332 197 5998 0
c ((SATLiteral(47) - aux1499 + SATLiteral(182))<=0)
-182 -6001 0
-47 -6001 0
-47 -182 -6002 0
c (0<=(SATLiteral(47) - aux1499 + SATLiteral(182)))
182 6002 0
47 6002 0
47 182 6001 0
c ((SATLiteral(62) + SATLiteral(77) - aux1500)<=0)
-77 -6004 0
-62 -6004 0
-62 -77 -6005 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1500))
77 6005 0
62 6005 0
62 77 6004 0
c ((SATLiteral(347) + aux1500 - aux1501)<=0)
6004 -6007 0
6005 -6008 0
-347 -6007 0
-347 6004 -6008 0
-347 6005 -6010 0
c (0<=(SATLiteral(347) + aux1500 - aux1501))
-6005 6010 0
-6004 6008 0
347 6010 0
347 -6005 6008 0
347 -6004 6007 0
c ((aux1497 + aux1499 - aux1502)<=0)
6001 -6012 0
6002 -6013 0
5995 -6012 0
5995 6001 -6013 0
5995 6002 -6015 0
5996 -6013 0
5996 6001 -6015 0
5996 6002 -6017 0
c (0<=(aux1497 + aux1499 - aux1502))
-6002 6017 0
-6001 6015 0
-5996 6017 0
-5996 -6002 6015 0
-5996 -6001 6013 0
-5995 6015 0
-5995 -6002 6013 0
-5995 -6001 6012 0
c ((SATLiteral(319) - aux1503 + SATLiteral(214))<=0)
-214 -6019 0
-319 -6019 0
-319 -214 -6020 0
c (0<=(SATLiteral(319) - aux1503 + SATLiteral(214)))
214 6020 0
319 6020 0
319 214 6019 0
c ((SATLiteral(334) - aux1504 + SATLiteral(199))<=0)
-199 -6022 0
-334 -6022 0
-334 -199 -6023 0
c (0<=(SATLiteral(334) - aux1504 + SATLiteral(199)))
199 6023 0
334 6023 0
334 199 6022 0
c ((SATLiteral(49) - aux1505 + SATLiteral(184))<=0)
-184 -6025 0
-49 -6025 0
-49 -184 -6026 0
c (0<=(SATLiteral(49) - aux1505 + SATLiteral(184)))
184 6026 0
49 6026 0
49 184 6025 0
c ((SATLiteral(64) + SATLiteral(79) - aux1506)<=0)
-79 -6028 0
-64 -6028 0
-64 -79 -6029 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1506))
79 6029 0
64 6029 0
64 79 6028 0
c ((SATLiteral(349) + aux1506 - aux1507)<=0)
6028 -6031 0
6029 -6032 0
-349 -6031 0
-349 6028 -6032 0
-349 6029 -6034 0
c (0<=(SATLiteral(349) + aux1506 - aux1507))
-6029 6034 0
-6028 6032 0
349 6034 0
349 -6029 6032 0
349 -6028 6031 0
c ((aux1503 + aux1505 - aux1508)<=0)
6025 -6036 0
6026 -6037 0
6019 -6036 0
6019 6025 -6037 0
6019 6026 -6039 0
6020 -6037 0
6020 6025 -6039 0
6020 6026 -6041 0
c (0<=(aux1503 + aux1505 - aux1508))
-6026 6041 0
-6025 6039 0
-6020 6041 0
-6020 -6026 6039 0
-6020 -6025 6037 0
-6019 6039 0
-6019 -6026 6037 0
-6019 -6025 6036 0
c ((SATLiteral(321) - aux1509 + SATLiteral(216))<=0)
-216 -6043 0
-321 -6043 0
-321 -216 -6044 0
c (0<=(SATLiteral(321) - aux1509 + SATLiteral(216)))
216 6044 0
321 6044 0
321 216 6043 0
c ((SATLiteral(336) - aux1510 + SATLiteral(201))<=0)
-201 -6046 0
-336 -6046 0
-336 -201 -6047 0
c (0<=(SATLiteral(336) - aux1510 + SATLiteral(201)))
201 6047 0
336 6047 0
336 201 6046 0
c ((SATLiteral(51) - aux1511 + SATLiteral(186))<=0)
-186 -6049 0
-51 -6049 0
-51 -186 -6050 0
c (0<=(SATLiteral(51) - aux1511 + SATLiteral(186)))
186 6050 0
51 6050 0
51 186 6049 0
c ((SATLiteral(66) + SATLiteral(81) - aux1512)<=0)
-81 -6052 0
-66 -6052 0
-66 -81 -6053 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1512))
81 6053 0
66 6053 0
66 81 6052 0
c ((SATLiteral(351) + aux1512 - aux1513)<=0)
6052 -6055 0
6053 -6056 0
-351 -6055 0
-351 6052 -6056 0
-351 6053 -6058 0
c (0<=(SATLiteral(351) + aux1512 - aux1513))
-6053 6058 0
-6052 6056 0
351 6058 0
351 -6053 6056 0
351 -6052 6055 0
c ((aux1509 + aux1511 - aux1514)<=0)
6049 -6060 0
6050 -6061 0
6043 -6060 0
6043 6049 -6061 0
6043 6050 -6063 0
6044 -6061 0
6044 6049 -6063 0
6044 6050 -6065 0
c (0<=(aux1509 + aux1511 - aux1514))
-6050 6065 0
-6049 6063 0
-6044 6065 0
-6044 -6050 6063 0
-6044 -6049 6061 0
-6043 6063 0
-6043 -6050 6061 0
-6043 -6049 6060 0
c ((SATLiteral(323) - aux1515 + SATLiteral(218))<=0)
-218 -6067 0
-323 -6067 0
-323 -218 -6068 0
c (0<=(SATLiteral(323) - aux1515 + SATLiteral(218)))
218 6068 0
323 6068 0
323 218 6067 0
c ((SATLiteral(338) - aux1516 + SATLiteral(203))<=0)
-203 -6070 0
-338 -6070 0
-338 -203 -6071 0
c (0<=(SATLiteral(338) - aux1516 + SATLiteral(203)))
203 6071 0
338 6071 0
338 203 6070 0
c ((SATLiteral(53) - aux1517 + SATLiteral(188))<=0)
-188 -6073 0
-53 -6073 0
-53 -188 -6074 0
c (0<=(SATLiteral(53) - aux1517 + SATLiteral(188)))
188 6074 0
53 6074 0
53 188 6073 0
c ((SATLiteral(68) + SATLiteral(83) - aux1518)<=0)
-83 -6076 0
-68 -6076 0
-68 -83 -6077 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1518))
83 6077 0
68 6077 0
68 83 6076 0
c ((SATLiteral(353) + aux1518 - aux1519)<=0)
6076 -6079 0
6077 -6080 0
-353 -6079 0
-353 6076 -6080 0
-353 6077 -6082 0
c (0<=(SATLiteral(353) + aux1518 - aux1519))
-6077 6082 0
-6076 6080 0
353 6082 0
353 -6077 6080 0
353 -6076 6079 0
c ((aux1515 + aux1517 - aux1520)<=0)
6073 -6084 0
6074 -6085 0
6067 -6084 0
6067 6073 -6085 0
6067 6074 -6087 0
6068 -6085 0
6068 6073 -6087 0
6068 6074 -6089 0
c (0<=(aux1515 + aux1517 - aux1520))
-6074 6089 0
-6073 6087 0
-6068 6089 0
-6068 -6074 6087 0
-6068 -6073 6085 0
-6067 6087 0
-6067 -6074 6085 0
-6067 -6073 6084 0
c ((SATLiteral(325) - aux1521 + SATLiteral(220))<=0)
-220 -6091 0
-325 -6091 0
-325 -220 -6092 0
c (0<=(SATLiteral(325) - aux1521 + SATLiteral(220)))
220 6092 0
325 6092 0
325 220 6091 0
c ((SATLiteral(340) - aux1522 + SATLiteral(205))<=0)
-205 -6094 0
-340 -6094 0
-340 -205 -6095 0
c (0<=(SATLiteral(340) - aux1522 + SATLiteral(205)))
205 6095 0
340 6095 0
340 205 6094 0
c ((SATLiteral(55) - aux1523 + SATLiteral(190))<=0)
-190 -6097 0
-55 -6097 0
-55 -190 -6098 0
c (0<=(SATLiteral(55) - aux1523 + SATLiteral(190)))
190 6098 0
55 6098 0
55 190 6097 0
c ((SATLiteral(70) + SATLiteral(85) - aux1524)<=0)
-85 -6100 0
-70 -6100 0
-70 -85 -6101 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1524))
85 6101 0
70 6101 0
70 85 6100 0
c ((SATLiteral(355) + aux1524 - aux1525)<=0)
6100 -6103 0
6101 -6104 0
-355 -6103 0
-355 6100 -6104 0
-355 6101 -6106 0
c (0<=(SATLiteral(355) + aux1524 - aux1525))
-6101 6106 0
-6100 6104 0
355 6106 0
355 -6101 6104 0
355 -6100 6103 0
c ((aux1521 + aux1523 - aux1526)<=0)
6097 -6108 0
6098 -6109 0
6091 -6108 0
6091 6097 -6109 0
6091 6098 -6111 0
6092 -6109 0
6092 6097 -6111 0
6092 6098 -6113 0
c (0<=(aux1521 + aux1523 - aux1526))
-6098 6113 0
-6097 6111 0
-6092 6113 0
-6092 -6098 6111 0
-6092 -6097 6109 0
-6091 6111 0
-6091 -6098 6109 0
-6091 -6097 6108 0
c ((SATLiteral(327) - aux1527 + SATLiteral(222))<=0)
-222 -6115 0
-327 -6115 0
-327 -222 -6116 0
c (0<=(SATLiteral(327) - aux1527 + SATLiteral(222)))
222 6116 0
327 6116 0
327 222 6115 0
c ((SATLiteral(342) - aux1528 + SATLiteral(207))<=0)
-207 -6118 0
-342 -6118 0
-342 -207 -6119 0
c (0<=(SATLiteral(342) - aux1528 + SATLiteral(207)))
207 6119 0
342 6119 0
342 207 6118 0
c ((SATLiteral(57) - aux1529 + SATLiteral(192))<=0)
-192 -6121 0
-57 -6121 0
-57 -192 -6122 0
c (0<=(SATLiteral(57) - aux1529 + SATLiteral(192)))
192 6122 0
57 6122 0
57 192 6121 0
c ((SATLiteral(72) + SATLiteral(87) - aux1530)<=0)
-87 -6124 0
-72 -6124 0
-72 -87 -6125 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1530))
87 6125 0
72 6125 0
72 87 6124 0
c ((SATLiteral(357) + aux1530 - aux1531)<=0)
6124 -6127 0
6125 -6128 0
-357 -6127 0
-357 6124 -6128 0
-357 6125 -6130 0
c (0<=(SATLiteral(357) + aux1530 - aux1531))
-6125 6130 0
-6124 6128 0
357 6130 0
357 -6125 6128 0
357 -6124 6127 0
c ((aux1527 + aux1529 - aux1532)<=0)
6121 -6132 0
6122 -6133 0
6115 -6132 0
6115 6121 -6133 0
6115 6122 -6135 0
6116 -6133 0
6116 6121 -6135 0
6116 6122 -6137 0
c (0<=(aux1527 + aux1529 - aux1532))
-6122 6137 0
-6121 6135 0
-6116 6137 0
-6116 -6122 6135 0
-6116 -6121 6133 0
-6115 6135 0
-6115 -6122 6133 0
-6115 -6121 6132 0
c ((SATLiteral(329) - aux1533 + SATLiteral(224))<=0)
-224 -6139 0
-329 -6139 0
-329 -224 -6140 0
c (0<=(SATLiteral(329) - aux1533 + SATLiteral(224)))
224 6140 0
329 6140 0
329 224 6139 0
c ((SATLiteral(344) - aux1534 + SATLiteral(209))<=0)
-209 -6142 0
-344 -6142 0
-344 -209 -6143 0
c (0<=(SATLiteral(344) - aux1534 + SATLiteral(209)))
209 6143 0
344 6143 0
344 209 6142 0
c ((SATLiteral(59) - aux1535 + SATLiteral(194))<=0)
-194 -6145 0
-59 -6145 0
-59 -194 -6146 0
c (0<=(SATLiteral(59) - aux1535 + SATLiteral(194)))
194 6146 0
59 6146 0
59 194 6145 0
c ((SATLiteral(74) + SATLiteral(89) - aux1536)<=0)
-89 -6148 0
-74 -6148 0
-74 -89 -6149 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1536))
89 6149 0
74 6149 0
74 89 6148 0
c ((SATLiteral(359) + aux1536 - aux1537)<=0)
6148 -6151 0
6149 -6152 0
-359 -6151 0
-359 6148 -6152 0
-359 6149 -6154 0
c (0<=(SATLiteral(359) + aux1536 - aux1537))
-6149 6154 0
-6148 6152 0
359 6154 0
359 -6149 6152 0
359 -6148 6151 0
c ((aux1533 + aux1535 - aux1538)<=0)
6145 -6156 0
6146 -6157 0
6139 -6156 0
6139 6145 -6157 0
6139 6146 -6159 0
6140 -6157 0
6140 6145 -6159 0
6140 6146 -6161 0
c (0<=(aux1533 + aux1535 - aux1538))
-6146 6161 0
-6145 6159 0
-6140 6161 0
-6140 -6146 6159 0
-6140 -6145 6157 0
-6139 6159 0
-6139 -6146 6157 0
-6139 -6145 6156 0
c ((SATLiteral(331) - aux1539 + SATLiteral(226))<=0)
-226 -6163 0
-331 -6163 0
-331 -226 -6164 0
c (0<=(SATLiteral(331) - aux1539 + SATLiteral(226)))
226 6164 0
331 6164 0
331 226 6163 0
c ((SATLiteral(346) - aux1540 + SATLiteral(211))<=0)
-211 -6166 0
-346 -6166 0
-346 -211 -6167 0
c (0<=(SATLiteral(346) - aux1540 + SATLiteral(211)))
211 6167 0
346 6167 0
346 211 6166 0
c ((SATLiteral(61) - aux1541 + SATLiteral(196))<=0)
-196 -6169 0
-61 -6169 0
-61 -196 -6170 0
c (0<=(SATLiteral(61) - aux1541 + SATLiteral(196)))
196 6170 0
61 6170 0
61 196 6169 0
c ((SATLiteral(76) + SATLiteral(91) - aux1542)<=0)
-91 -6172 0
-76 -6172 0
-76 -91 -6173 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1542))
91 6173 0
76 6173 0
76 91 6172 0
c ((SATLiteral(361) + aux1542 - aux1543)<=0)
6172 -6175 0
6173 -6176 0
-361 -6175 0
-361 6172 -6176 0
-361 6173 -6178 0
c (0<=(SATLiteral(361) + aux1542 - aux1543))
-6173 6178 0
-6172 6176 0
361 6178 0
361 -6173 6176 0
361 -6172 6175 0
c ((aux1539 + aux1541 - aux1544)<=0)
6169 -6180 0
6170 -6181 0
6163 -6180 0
6163 6169 -6181 0
6163 6170 -6183 0
6164 -6181 0
6164 6169 -6183 0
6164 6170 -6185 0
c (0<=(aux1539 + aux1541 - aux1544))
-6170 6185 0
-6169 6183 0
-6164 6185 0
-6164 -6170 6183 0
-6164 -6169 6181 0
-6163 6183 0
-6163 -6170 6181 0
-6163 -6169 6180 0
c ((SATLiteral(-330) - aux1545 + SATLiteral(-225))<=0)
225 -6187 0
330 -6187 0
330 225 -6188 0
c (0<=(SATLiteral(-330) - aux1545 + SATLiteral(-225)))
-225 6188 0
-330 6188 0
-330 -225 6187 0
c ((SATLiteral(-345) - aux1546 + SATLiteral(-210))<=0)
210 -6190 0
345 -6190 0
345 210 -6191 0
c (0<=(SATLiteral(-345) - aux1546 + SATLiteral(-210)))
-210 6191 0
-345 6191 0
-345 -210 6190 0
c ((SATLiteral(-60) - aux1547 + SATLiteral(-195))<=0)
195 -6193 0
60 -6193 0
60 195 -6194 0
c (0<=(SATLiteral(-60) - aux1547 + SATLiteral(-195)))
-195 6194 0
-60 6194 0
-60 -195 6193 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1548)<=0)
90 -6196 0
75 -6196 0
75 90 -6197 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1548))
-90 6197 0
-75 6197 0
-75 -90 6196 0
c ((SATLiteral(-360) + aux1548 - aux1549)<=0)
6196 -6199 0
6197 -6200 0
360 -6199 0
360 6196 -6200 0
360 6197 -6202 0
c (0<=(SATLiteral(-360) + aux1548 - aux1549))
-6197 6202 0
-6196 6200 0
-360 6202 0
-360 -6197 6200 0
-360 -6196 6199 0
c ((aux1545 + aux1547 - aux1550)<=0)
6193 -6204 0
6194 -6205 0
6187 -6204 0
6187 6193 -6205 0
6187 6194 -6207 0
6188 -6205 0
6188 6193 -6207 0
6188 6194 -6209 0
c (0<=(aux1545 + aux1547 - aux1550))
-6194 6209 0
-6193 6207 0
-6188 6209 0
-6188 -6194 6207 0
-6188 -6193 6205 0
-6187 6207 0
-6187 -6194 6205 0
-6187 -6193 6204 0
c ((SATLiteral(362) - aux1551 + SATLiteral(257))<=0)
-257 -6211 0
-362 -6211 0
-362 -257 -6212 0
c (0<=(SATLiteral(362) - aux1551 + SATLiteral(257)))
257 6212 0
362 6212 0
362 257 6211 0
c ((SATLiteral(377) - aux1552 + SATLiteral(242))<=0)
-242 -6214 0
-377 -6214 0
-377 -242 -6215 0
c (0<=(SATLiteral(377) - aux1552 + SATLiteral(242)))
242 6215 0
377 6215 0
377 242 6214 0
c ((SATLiteral(92) - aux1553 + SATLiteral(227))<=0)
-227 -6217 0
-92 -6217 0
-92 -227 -6218 0
c (0<=(SATLiteral(92) - aux1553 + SATLiteral(227)))
227 6218 0
92 6218 0
92 227 6217 0
c ((SATLiteral(107) + SATLiteral(122) - aux1554)<=0)
-122 -6220 0
-107 -6220 0
-107 -122 -6221 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1554))
122 6221 0
107 6221 0
107 122 6220 0
c ((SATLiteral(392) + aux1554 - aux1555)<=0)
6220 -6223 0
6221 -6224 0
-392 -6223 0
-392 6220 -6224 0
-392 6221 -6226 0
c (0<=(SATLiteral(392) + aux1554 - aux1555))
-6221 6226 0
-6220 6224 0
392 6226 0
392 -6221 6224 0
392 -6220 6223 0
c ((aux1551 + aux1553 - aux1556)<=0)
6217 -6228 0
6218 -6229 0
6211 -6228 0
6211 6217 -6229 0
6211 6218 -6231 0
6212 -6229 0
6212 6217 -6231 0
6212 6218 -6233 0
c (0<=(aux1551 + aux1553 - aux1556))
-6218 6233 0
-6217 6231 0
-6212 6233 0
-6212 -6218 6231 0
-6212 -6217 6229 0
-6211 6231 0
-6211 -6218 6229 0
-6211 -6217 6228 0
c ((SATLiteral(364) - aux1557 + SATLiteral(259))<=0)
-259 -6235 0
-364 -6235 0
-364 -259 -6236 0
c (0<=(SATLiteral(364) - aux1557 + SATLiteral(259)))
259 6236 0
364 6236 0
364 259 6235 0
c ((SATLiteral(379) - aux1558 + SATLiteral(244))<=0)
-244 -6238 0
-379 -6238 0
-379 -244 -6239 0
c (0<=(SATLiteral(379) - aux1558 + SATLiteral(244)))
244 6239 0
379 6239 0
379 244 6238 0
c ((SATLiteral(94) - aux1559 + SATLiteral(229))<=0)
-229 -6241 0
-94 -6241 0
-94 -229 -6242 0
c (0<=(SATLiteral(94) - aux1559 + SATLiteral(229)))
229 6242 0
94 6242 0
94 229 6241 0
c ((SATLiteral(109) + SATLiteral(124) - aux1560)<=0)
-124 -6244 0
-109 -6244 0
-109 -124 -6245 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1560))
124 6245 0
109 6245 0
109 124 6244 0
c ((SATLiteral(394) + aux1560 - aux1561)<=0)
6244 -6247 0
6245 -6248 0
-394 -6247 0
-394 6244 -6248 0
-394 6245 -6250 0
c (0<=(SATLiteral(394) + aux1560 - aux1561))
-6245 6250 0
-6244 6248 0
394 6250 0
394 -6245 6248 0
394 -6244 6247 0
c ((aux1557 + aux1559 - aux1562)<=0)
6241 -6252 0
6242 -6253 0
6235 -6252 0
6235 6241 -6253 0
6235 6242 -6255 0
6236 -6253 0
6236 6241 -6255 0
6236 6242 -6257 0
c (0<=(aux1557 + aux1559 - aux1562))
-6242 6257 0
-6241 6255 0
-6236 6257 0
-6236 -6242 6255 0
-6236 -6241 6253 0
-6235 6255 0
-6235 -6242 6253 0
-6235 -6241 6252 0
c ((SATLiteral(366) - aux1563 + SATLiteral(261))<=0)
-261 -6259 0
-366 -6259 0
-366 -261 -6260 0
c (0<=(SATLiteral(366) - aux1563 + SATLiteral(261)))
261 6260 0
366 6260 0
366 261 6259 0
c ((SATLiteral(381) - aux1564 + SATLiteral(246))<=0)
-246 -6262 0
-381 -6262 0
-381 -246 -6263 0
c (0<=(SATLiteral(381) - aux1564 + SATLiteral(246)))
246 6263 0
381 6263 0
381 246 6262 0
c ((SATLiteral(96) - aux1565 + SATLiteral(231))<=0)
-231 -6265 0
-96 -6265 0
-96 -231 -6266 0
c (0<=(SATLiteral(96) - aux1565 + SATLiteral(231)))
231 6266 0
96 6266 0
96 231 6265 0
c ((SATLiteral(111) + SATLiteral(126) - aux1566)<=0)
-126 -6268 0
-111 -6268 0
-111 -126 -6269 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1566))
126 6269 0
111 6269 0
111 126 6268 0
c ((SATLiteral(396) + aux1566 - aux1567)<=0)
6268 -6271 0
6269 -6272 0
-396 -6271 0
-396 6268 -6272 0
-396 6269 -6274 0
c (0<=(SATLiteral(396) + aux1566 - aux1567))
-6269 6274 0
-6268 6272 0
396 6274 0
396 -6269 6272 0
396 -6268 6271 0
c ((aux1563 + aux1565 - aux1568)<=0)
6265 -6276 0
6266 -6277 0
6259 -6276 0
6259 6265 -6277 0
6259 6266 -6279 0
6260 -6277 0
6260 6265 -6279 0
6260 6266 -6281 0
c (0<=(aux1563 + aux1565 - aux1568))
-6266 6281 0
-6265 6279 0
-6260 6281 0
-6260 -6266 6279 0
-6260 -6265 6277 0
-6259 6279 0
-6259 -6266 6277 0
-6259 -6265 6276 0
c ((SATLiteral(368) - aux1569 + SATLiteral(263))<=0)
-263 -6283 0
-368 -6283 0
-368 -263 -6284 0
c (0<=(SATLiteral(368) - aux1569 + SATLiteral(263)))
263 6284 0
368 6284 0
368 263 6283 0
c ((SATLiteral(383) - aux1570 + SATLiteral(248))<=0)
-248 -6286 0
-383 -6286 0
-383 -248 -6287 0
c (0<=(SATLiteral(383) - aux1570 + SATLiteral(248)))
248 6287 0
383 6287 0
383 248 6286 0
c ((SATLiteral(98) - aux1571 + SATLiteral(233))<=0)
-233 -6289 0
-98 -6289 0
-98 -233 -6290 0
c (0<=(SATLiteral(98) - aux1571 + SATLiteral(233)))
233 6290 0
98 6290 0
98 233 6289 0
c ((SATLiteral(113) + SATLiteral(128) - aux1572)<=0)
-128 -6292 0
-113 -6292 0
-113 -128 -6293 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1572))
128 6293 0
113 6293 0
113 128 6292 0
c ((SATLiteral(398) + aux1572 - aux1573)<=0)
6292 -6295 0
6293 -6296 0
-398 -6295 0
-398 6292 -6296 0
-398 6293 -6298 0
c (0<=(SATLiteral(398) + aux1572 - aux1573))
-6293 6298 0
-6292 6296 0
398 6298 0
398 -6293 6296 0
398 -6292 6295 0
c ((aux1569 + aux1571 - aux1574)<=0)
6289 -6300 0
6290 -6301 0
6283 -6300 0
6283 6289 -6301 0
6283 6290 -6303 0
6284 -6301 0
6284 6289 -6303 0
6284 6290 -6305 0
c (0<=(aux1569 + aux1571 - aux1574))
-6290 6305 0
-6289 6303 0
-6284 6305 0
-6284 -6290 6303 0
-6284 -6289 6301 0
-6283 6303 0
-6283 -6290 6301 0
-6283 -6289 6300 0
c ((SATLiteral(370) - aux1575 + SATLiteral(265))<=0)
-265 -6307 0
-370 -6307 0
-370 -265 -6308 0
c (0<=(SATLiteral(370) - aux1575 + SATLiteral(265)))
265 6308 0
370 6308 0
370 265 6307 0
c ((SATLiteral(385) - aux1576 + SATLiteral(250))<=0)
-250 -6310 0
-385 -6310 0
-385 -250 -6311 0
c (0<=(SATLiteral(385) - aux1576 + SATLiteral(250)))
250 6311 0
385 6311 0
385 250 6310 0
c ((SATLiteral(100) - aux1577 + SATLiteral(235))<=0)
-235 -6313 0
-100 -6313 0
-100 -235 -6314 0
c (0<=(SATLiteral(100) - aux1577 + SATLiteral(235)))
235 6314 0
100 6314 0
100 235 6313 0
c ((SATLiteral(115) + SATLiteral(130) - aux1578)<=0)
-130 -6316 0
-115 -6316 0
-115 -130 -6317 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1578))
130 6317 0
115 6317 0
115 130 6316 0
c ((SATLiteral(400) + aux1578 - aux1579)<=0)
6316 -6319 0
6317 -6320 0
-400 -6319 0
-400 6316 -6320 0
-400 6317 -6322 0
c (0<=(SATLiteral(400) + aux1578 - aux1579))
-6317 6322 0
-6316 6320 0
400 6322 0
400 -6317 6320 0
400 -6316 6319 0
c ((aux1575 + aux1577 - aux1580)<=0)
6313 -6324 0
6314 -6325 0
6307 -6324 0
6307 6313 -6325 0
6307 6314 -6327 0
6308 -6325 0
6308 6313 -6327 0
6308 6314 -6329 0
c (0<=(aux1575 + aux1577 - aux1580))
-6314 6329 0
-6313 6327 0
-6308 6329 0
-6308 -6314 6327 0
-6308 -6313 6325 0
-6307 6327 0
-6307 -6314 6325 0
-6307 -6313 6324 0
c ((SATLiteral(372) - aux1581 + SATLiteral(267))<=0)
-267 -6331 0
-372 -6331 0
-372 -267 -6332 0
c (0<=(SATLiteral(372) - aux1581 + SATLiteral(267)))
267 6332 0
372 6332 0
372 267 6331 0
c ((SATLiteral(387) - aux1582 + SATLiteral(252))<=0)
-252 -6334 0
-387 -6334 0
-387 -252 -6335 0
c (0<=(SATLiteral(387) - aux1582 + SATLiteral(252)))
252 6335 0
387 6335 0
387 252 6334 0
c ((SATLiteral(102) - aux1583 + SATLiteral(237))<=0)
-237 -6337 0
-102 -6337 0
-102 -237 -6338 0
c (0<=(SATLiteral(102) - aux1583 + SATLiteral(237)))
237 6338 0
102 6338 0
102 237 6337 0
c ((SATLiteral(117) + SATLiteral(132) - aux1584)<=0)
-132 -6340 0
-117 -6340 0
-117 -132 -6341 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1584))
132 6341 0
117 6341 0
117 132 6340 0
c ((SATLiteral(402) + aux1584 - aux1585)<=0)
6340 -6343 0
6341 -6344 0
-402 -6343 0
-402 6340 -6344 0
-402 6341 -6346 0
c (0<=(SATLiteral(402) + aux1584 - aux1585))
-6341 6346 0
-6340 6344 0
402 6346 0
402 -6341 6344 0
402 -6340 6343 0
c ((aux1581 + aux1583 - aux1586)<=0)
6337 -6348 0
6338 -6349 0
6331 -6348 0
6331 6337 -6349 0
6331 6338 -6351 0
6332 -6349 0
6332 6337 -6351 0
6332 6338 -6353 0
c (0<=(aux1581 + aux1583 - aux1586))
-6338 6353 0
-6337 6351 0
-6332 6353 0
-6332 -6338 6351 0
-6332 -6337 6349 0
-6331 6351 0
-6331 -6338 6349 0
-6331 -6337 6348 0
c ((SATLiteral(374) - aux1587 + SATLiteral(269))<=0)
-269 -6355 0
-374 -6355 0
-374 -269 -6356 0
c (0<=(SATLiteral(374) - aux1587 + SATLiteral(269)))
269 6356 0
374 6356 0
374 269 6355 0
c ((SATLiteral(389) - aux1588 + SATLiteral(254))<=0)
-254 -6358 0
-389 -6358 0
-389 -254 -6359 0
c (0<=(SATLiteral(389) - aux1588 + SATLiteral(254)))
254 6359 0
389 6359 0
389 254 6358 0
c ((SATLiteral(104) - aux1589 + SATLiteral(239))<=0)
-239 -6361 0
-104 -6361 0
-104 -239 -6362 0
c (0<=(SATLiteral(104) - aux1589 + SATLiteral(239)))
239 6362 0
104 6362 0
104 239 6361 0
c ((SATLiteral(119) + SATLiteral(134) - aux1590)<=0)
-134 -6364 0
-119 -6364 0
-119 -134 -6365 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1590))
134 6365 0
119 6365 0
119 134 6364 0
c ((SATLiteral(404) + aux1590 - aux1591)<=0)
6364 -6367 0
6365 -6368 0
-404 -6367 0
-404 6364 -6368 0
-404 6365 -6370 0
c (0<=(SATLiteral(404) + aux1590 - aux1591))
-6365 6370 0
-6364 6368 0
404 6370 0
404 -6365 6368 0
404 -6364 6367 0
c ((aux1587 + aux1589 - aux1592)<=0)
6361 -6372 0
6362 -6373 0
6355 -6372 0
6355 6361 -6373 0
6355 6362 -6375 0
6356 -6373 0
6356 6361 -6375 0
6356 6362 -6377 0
c (0<=(aux1587 + aux1589 - aux1592))
-6362 6377 0
-6361 6375 0
-6356 6377 0
-6356 -6362 6375 0
-6356 -6361 6373 0
-6355 6375 0
-6355 -6362 6373 0
-6355 -6361 6372 0
c ((SATLiteral(376) - aux1593 + SATLiteral(271))<=0)
-271 -6379 0
-376 -6379 0
-376 -271 -6380 0
c (0<=(SATLiteral(376) - aux1593 + SATLiteral(271)))
271 6380 0
376 6380 0
376 271 6379 0
c ((SATLiteral(391) - aux1594 + SATLiteral(256))<=0)
-256 -6382 0
-391 -6382 0
-391 -256 -6383 0
c (0<=(SATLiteral(391) - aux1594 + SATLiteral(256)))
256 6383 0
391 6383 0
391 256 6382 0
c ((SATLiteral(106) - aux1595 + SATLiteral(241))<=0)
-241 -6385 0
-106 -6385 0
-106 -241 -6386 0
c (0<=(SATLiteral(106) - aux1595 + SATLiteral(241)))
241 6386 0
106 6386 0
106 241 6385 0
c ((SATLiteral(121) + SATLiteral(136) - aux1596)<=0)
-136 -6388 0
-121 -6388 0
-121 -136 -6389 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1596))
136 6389 0
121 6389 0
121 136 6388 0
c ((SATLiteral(406) + aux1596 - aux1597)<=0)
6388 -6391 0
6389 -6392 0
-406 -6391 0
-406 6388 -6392 0
-406 6389 -6394 0
c (0<=(SATLiteral(406) + aux1596 - aux1597))
-6389 6394 0
-6388 6392 0
406 6394 0
406 -6389 6392 0
406 -6388 6391 0
c ((aux1593 + aux1595 - aux1598)<=0)
6385 -6396 0
6386 -6397 0
6379 -6396 0
6379 6385 -6397 0
6379 6386 -6399 0
6380 -6397 0
6380 6385 -6399 0
6380 6386 -6401 0
c (0<=(aux1593 + aux1595 - aux1598))
-6386 6401 0
-6385 6399 0
-6380 6401 0
-6380 -6386 6399 0
-6380 -6385 6397 0
-6379 6399 0
-6379 -6386 6397 0
-6379 -6385 6396 0
c ((SATLiteral(-375) - aux1599 + SATLiteral(-270))<=0)
270 -6403 0
375 -6403 0
375 270 -6404 0
c (0<=(SATLiteral(-375) - aux1599 + SATLiteral(-270)))
-270 6404 0
-375 6404 0
-375 -270 6403 0
c ((SATLiteral(-390) - aux1600 + SATLiteral(-255))<=0)
255 -6406 0
390 -6406 0
390 255 -6407 0
c (0<=(SATLiteral(-390) - aux1600 + SATLiteral(-255)))
-255 6407 0
-390 6407 0
-390 -255 6406 0
c ((SATLiteral(-105) - aux1601 + SATLiteral(-240))<=0)
240 -6409 0
105 -6409 0
105 240 -6410 0
c (0<=(SATLiteral(-105) - aux1601 + SATLiteral(-240)))
-240 6410 0
-105 6410 0
-105 -240 6409 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1602)<=0)
135 -6412 0
120 -6412 0
120 135 -6413 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1602))
-135 6413 0
-120 6413 0
-120 -135 6412 0
c ((SATLiteral(-405) + aux1602 - aux1603)<=0)
6412 -6415 0
6413 -6416 0
405 -6415 0
405 6412 -6416 0
405 6413 -6418 0
c (0<=(SATLiteral(-405) + aux1602 - aux1603))
-6413 6418 0
-6412 6416 0
-405 6418 0
-405 -6413 6416 0
-405 -6412 6415 0
c ((aux1599 + aux1601 - aux1604)<=0)
6409 -6420 0
6410 -6421 0
6403 -6420 0
6403 6409 -6421 0
6403 6410 -6423 0
6404 -6421 0
6404 6409 -6423 0
6404 6410 -6425 0
c (0<=(aux1599 + aux1601 - aux1604))
-6410 6425 0
-6409 6423 0
-6404 6425 0
-6404 -6410 6423 0
-6404 -6409 6421 0
-6403 6423 0
-6403 -6410 6421 0
-6403 -6409 6420 0
c ((SATLiteral(677) - aux1605 + SATLiteral(572))<=0)
-572 -6427 0
-677 -6427 0
-677 -572 -6428 0
c (0<=(SATLiteral(677) - aux1605 + SATLiteral(572)))
572 6428 0
677 6428 0
677 572 6427 0
c ((SATLiteral(692) - aux1606 + SATLiteral(557))<=0)
-557 -6430 0
-692 -6430 0
-692 -557 -6431 0
c (0<=(SATLiteral(692) - aux1606 + SATLiteral(557)))
557 6431 0
692 6431 0
692 557 6430 0
c (( - aux1607 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6433 0
-407 -6433 0
-407 -542 -6434 0
c (0<=( - aux1607 + SATLiteral(407) + SATLiteral(542)))
542 6434 0
407 6434 0
407 542 6433 0
c (( - aux1608 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6436 0
-422 -6436 0
-422 -437 -6437 0
c (0<=( - aux1608 + SATLiteral(422) + SATLiteral(437)))
437 6437 0
422 6437 0
422 437 6436 0
c ((SATLiteral(707) + aux1608 - aux1609)<=0)
6436 -6439 0
6437 -6440 0
-707 -6439 0
-707 6436 -6440 0
-707 6437 -6442 0
c (0<=(SATLiteral(707) + aux1608 - aux1609))
-6437 6442 0
-6436 6440 0
707 6442 0
707 -6437 6440 0
707 -6436 6439 0
c ((aux1605 + aux1607 - aux1610)<=0)
6433 -6444 0
6434 -6445 0
6427 -6444 0
6427 6433 -6445 0
6427 6434 -6447 0
6428 -6445 0
6428 6433 -6447 0
6428 6434 -6449 0
c (0<=(aux1605 + aux1607 - aux1610))
-6434 6449 0
-6433 6447 0
-6428 6449 0
-6428 -6434 6447 0
-6428 -6433 6445 0
-6427 6447 0
-6427 -6434 6445 0
-6427 -6433 6444 0
c ((SATLiteral(679) - aux1611 + SATLiteral(574))<=0)
-574 -6451 0
-679 -6451 0
-679 -574 -6452 0
c (0<=(SATLiteral(679) - aux1611 + SATLiteral(574)))
574 6452 0
679 6452 0
679 574 6451 0
c ((SATLiteral(694) - aux1612 + SATLiteral(559))<=0)
-559 -6454 0
-694 -6454 0
-694 -559 -6455 0
c (0<=(SATLiteral(694) - aux1612 + SATLiteral(559)))
559 6455 0
694 6455 0
694 559 6454 0
c (( - aux1613 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6457 0
-409 -6457 0
-409 -544 -6458 0
c (0<=( - aux1613 + SATLiteral(409) + SATLiteral(544)))
544 6458 0
409 6458 0
409 544 6457 0
c (( - aux1614 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6460 0
-424 -6460 0
-424 -439 -6461 0
c (0<=( - aux1614 + SATLiteral(424) + SATLiteral(439)))
439 6461 0
424 6461 0
424 439 6460 0
c ((SATLiteral(709) + aux1614 - aux1615)<=0)
6460 -6463 0
6461 -6464 0
-709 -6463 0
-709 6460 -6464 0
-709 6461 -6466 0
c (0<=(SATLiteral(709) + aux1614 - aux1615))
-6461 6466 0
-6460 6464 0
709 6466 0
709 -6461 6464 0
709 -6460 6463 0
c ((aux1611 + aux1613 - aux1616)<=0)
6457 -6468 0
6458 -6469 0
6451 -6468 0
6451 6457 -6469 0
6451 6458 -6471 0
6452 -6469 0
6452 6457 -6471 0
6452 6458 -6473 0
c (0<=(aux1611 + aux1613 - aux1616))
-6458 6473 0
-6457 6471 0
-6452 6473 0
-6452 -6458 6471 0
-6452 -6457 6469 0
-6451 6471 0
-6451 -6458 6469 0
-6451 -6457 6468 0
c ((SATLiteral(681) - aux1617 + SATLiteral(576))<=0)
-576 -6475 0
-681 -6475 0
-681 -576 -6476 0
c (0<=(SATLiteral(681) - aux1617 + SATLiteral(576)))
576 6476 0
681 6476 0
681 576 6475 0
c ((SATLiteral(696) - aux1618 + SATLiteral(561))<=0)
-561 -6478 0
-696 -6478 0
-696 -561 -6479 0
c (0<=(SATLiteral(696) - aux1618 + SATLiteral(561)))
561 6479 0
696 6479 0
696 561 6478 0
c (( - aux1619 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6481 0
-411 -6481 0
-411 -546 -6482 0
c (0<=( - aux1619 + SATLiteral(411) + SATLiteral(546)))
546 6482 0
411 6482 0
411 546 6481 0
c (( - aux1620 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6484 0
-426 -6484 0
-426 -441 -6485 0
c (0<=( - aux1620 + SATLiteral(426) + SATLiteral(441)))
441 6485 0
426 6485 0
426 441 6484 0
c ((SATLiteral(711) + aux1620 - aux1621)<=0)
6484 -6487 0
6485 -6488 0
-711 -6487 0
-711 6484 -6488 0
-711 6485 -6490 0
c (0<=(SATLiteral(711) + aux1620 - aux1621))
-6485 6490 0
-6484 6488 0
711 6490 0
711 -6485 6488 0
711 -6484 6487 0
c ((aux1617 + aux1619 - aux1622)<=0)
6481 -6492 0
6482 -6493 0
6475 -6492 0
6475 6481 -6493 0
6475 6482 -6495 0
6476 -6493 0
6476 6481 -6495 0
6476 6482 -6497 0
c (0<=(aux1617 + aux1619 - aux1622))
-6482 6497 0
-6481 6495 0
-6476 6497 0
-6476 -6482 6495 0
-6476 -6481 6493 0
-6475 6495 0
-6475 -6482 6493 0
-6475 -6481 6492 0
c ((SATLiteral(683) - aux1623 + SATLiteral(578))<=0)
-578 -6499 0
-683 -6499 0
-683 -578 -6500 0
c (0<=(SATLiteral(683) - aux1623 + SATLiteral(578)))
578 6500 0
683 6500 0
683 578 6499 0
c ((SATLiteral(698) - aux1624 + SATLiteral(563))<=0)
-563 -6502 0
-698 -6502 0
-698 -563 -6503 0
c (0<=(SATLiteral(698) - aux1624 + SATLiteral(563)))
563 6503 0
698 6503 0
698 563 6502 0
c (( - aux1625 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6505 0
-413 -6505 0
-413 -548 -6506 0
c (0<=( - aux1625 + SATLiteral(413) + SATLiteral(548)))
548 6506 0
413 6506 0
413 548 6505 0
c (( - aux1626 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6508 0
-428 -6508 0
-428 -443 -6509 0
c (0<=( - aux1626 + SATLiteral(428) + SATLiteral(443)))
443 6509 0
428 6509 0
428 443 6508 0
c ((SATLiteral(713) + aux1626 - aux1627)<=0)
6508 -6511 0
6509 -6512 0
-713 -6511 0
-713 6508 -6512 0
-713 6509 -6514 0
c (0<=(SATLiteral(713) + aux1626 - aux1627))
-6509 6514 0
-6508 6512 0
713 6514 0
713 -6509 6512 0
713 -6508 6511 0
c ((aux1623 + aux1625 - aux1628)<=0)
6505 -6516 0
6506 -6517 0
6499 -6516 0
6499 6505 -6517 0
6499 6506 -6519 0
6500 -6517 0
6500 6505 -6519 0
6500 6506 -6521 0
c (0<=(aux1623 + aux1625 - aux1628))
-6506 6521 0
-6505 6519 0
-6500 6521 0
-6500 -6506 6519 0
-6500 -6505 6517 0
-6499 6519 0
-6499 -6506 6517 0
-6499 -6505 6516 0
c ((SATLiteral(685) - aux1629 + SATLiteral(580))<=0)
-580 -6523 0
-685 -6523 0
-685 -580 -6524 0
c (0<=(SATLiteral(685) - aux1629 + SATLiteral(580)))
580 6524 0
685 6524 0
685 580 6523 0
c ((SATLiteral(700) - aux1630 + SATLiteral(565))<=0)
-565 -6526 0
-700 -6526 0
-700 -565 -6527 0
c (0<=(SATLiteral(700) - aux1630 + SATLiteral(565)))
565 6527 0
700 6527 0
700 565 6526 0
c (( - aux1631 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6529 0
-415 -6529 0
-415 -550 -6530 0
c (0<=( - aux1631 + SATLiteral(415) + SATLiteral(550)))
550 6530 0
415 6530 0
415 550 6529 0
c (( - aux1632 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6532 0
-430 -6532 0
-430 -445 -6533 0
c (0<=( - aux1632 + SATLiteral(430) + SATLiteral(445)))
445 6533 0
430 6533 0
430 445 6532 0
c ((SATLiteral(715) + aux1632 - aux1633)<=0)
6532 -6535 0
6533 -6536 0
-715 -6535 0
-715 6532 -6536 0
-715 6533 -6538 0
c (0<=(SATLiteral(715) + aux1632 - aux1633))
-6533 6538 0
-6532 6536 0
715 6538 0
715 -6533 6536 0
715 -6532 6535 0
c ((aux1629 + aux1631 - aux1634)<=0)
6529 -6540 0
6530 -6541 0
6523 -6540 0
6523 6529 -6541 0
6523 6530 -6543 0
6524 -6541 0
6524 6529 -6543 0
6524 6530 -6545 0
c (0<=(aux1629 + aux1631 - aux1634))
-6530 6545 0
-6529 6543 0
-6524 6545 0
-6524 -6530 6543 0
-6524 -6529 6541 0
-6523 6543 0
-6523 -6530 6541 0
-6523 -6529 6540 0
c ((SATLiteral(687) - aux1635 + SATLiteral(582))<=0)
-582 -6547 0
-687 -6547 0
-687 -582 -6548 0
c (0<=(SATLiteral(687) - aux1635 + SATLiteral(582)))
582 6548 0
687 6548 0
687 582 6547 0
c ((SATLiteral(702) - aux1636 + SATLiteral(567))<=0)
-567 -6550 0
-702 -6550 0
-702 -567 -6551 0
c (0<=(SATLiteral(702) - aux1636 + SATLiteral(567)))
567 6551 0
702 6551 0
702 567 6550 0
c (( - aux1637 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6553 0
-417 -6553 0
-417 -552 -6554 0
c (0<=( - aux1637 + SATLiteral(417) + SATLiteral(552)))
552 6554 0
417 6554 0
417 552 6553 0
c (( - aux1638 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6556 0
-432 -6556 0
-432 -447 -6557 0
c (0<=( - aux1638 + SATLiteral(432) + SATLiteral(447)))
447 6557 0
432 6557 0
432 447 6556 0
c ((SATLiteral(717) + aux1638 - aux1639)<=0)
6556 -6559 0
6557 -6560 0
-717 -6559 0
-717 6556 -6560 0
-717 6557 -6562 0
c (0<=(SATLiteral(717) + aux1638 - aux1639))
-6557 6562 0
-6556 6560 0
717 6562 0
717 -6557 6560 0
717 -6556 6559 0
c ((aux1635 + aux1637 - aux1640)<=0)
6553 -6564 0
6554 -6565 0
6547 -6564 0
6547 6553 -6565 0
6547 6554 -6567 0
6548 -6565 0
6548 6553 -6567 0
6548 6554 -6569 0
c (0<=(aux1635 + aux1637 - aux1640))
-6554 6569 0
-6553 6567 0
-6548 6569 0
-6548 -6554 6567 0
-6548 -6553 6565 0
-6547 6567 0
-6547 -6554 6565 0
-6547 -6553 6564 0
c ((SATLiteral(689) - aux1641 + SATLiteral(584))<=0)
-584 -6571 0
-689 -6571 0
-689 -584 -6572 0
c (0<=(SATLiteral(689) - aux1641 + SATLiteral(584)))
584 6572 0
689 6572 0
689 584 6571 0
c ((SATLiteral(704) - aux1642 + SATLiteral(569))<=0)
-569 -6574 0
-704 -6574 0
-704 -569 -6575 0
c (0<=(SATLiteral(704) - aux1642 + SATLiteral(569)))
569 6575 0
704 6575 0
704 569 6574 0
c (( - aux1643 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6577 0
-419 -6577 0
-419 -554 -6578 0
c (0<=( - aux1643 + SATLiteral(419) + SATLiteral(554)))
554 6578 0
419 6578 0
419 554 6577 0
c (( - aux1644 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6580 0
-434 -6580 0
-434 -449 -6581 0
c (0<=( - aux1644 + SATLiteral(434) + SATLiteral(449)))
449 6581 0
434 6581 0
434 449 6580 0
c ((SATLiteral(719) + aux1644 - aux1645)<=0)
6580 -6583 0
6581 -6584 0
-719 -6583 0
-719 6580 -6584 0
-719 6581 -6586 0
c (0<=(SATLiteral(719) + aux1644 - aux1645))
-6581 6586 0
-6580 6584 0
719 6586 0
719 -6581 6584 0
719 -6580 6583 0
c ((aux1641 + aux1643 - aux1646)<=0)
6577 -6588 0
6578 -6589 0
6571 -6588 0
6571 6577 -6589 0
6571 6578 -6591 0
6572 -6589 0
6572 6577 -6591 0
6572 6578 -6593 0
c (0<=(aux1641 + aux1643 - aux1646))
-6578 6593 0
-6577 6591 0
-6572 6593 0
-6572 -6578 6591 0
-6572 -6577 6589 0
-6571 6591 0
-6571 -6578 6589 0
-6571 -6577 6588 0
c ((SATLiteral(691) - aux1647 + SATLiteral(586))<=0)
-586 -6595 0
-691 -6595 0
-691 -586 -6596 0
c (0<=(SATLiteral(691) - aux1647 + SATLiteral(586)))
586 6596 0
691 6596 0
691 586 6595 0
c ((SATLiteral(706) - aux1648 + SATLiteral(571))<=0)
-571 -6598 0
-706 -6598 0
-706 -571 -6599 0
c (0<=(SATLiteral(706) - aux1648 + SATLiteral(571)))
571 6599 0
706 6599 0
706 571 6598 0
c (( - aux1649 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6601 0
-421 -6601 0
-421 -556 -6602 0
c (0<=( - aux1649 + SATLiteral(421) + SATLiteral(556)))
556 6602 0
421 6602 0
421 556 6601 0
c (( - aux1650 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6604 0
-436 -6604 0
-436 -451 -6605 0
c (0<=( - aux1650 + SATLiteral(436) + SATLiteral(451)))
451 6605 0
436 6605 0
436 451 6604 0
c ((SATLiteral(721) + aux1650 - aux1651)<=0)
6604 -6607 0
6605 -6608 0
-721 -6607 0
-721 6604 -6608 0
-721 6605 -6610 0
c (0<=(SATLiteral(721) + aux1650 - aux1651))
-6605 6610 0
-6604 6608 0
721 6610 0
721 -6605 6608 0
721 -6604 6607 0
c ((aux1647 + aux1649 - aux1652)<=0)
6601 -6612 0
6602 -6613 0
6595 -6612 0
6595 6601 -6613 0
6595 6602 -6615 0
6596 -6613 0
6596 6601 -6615 0
6596 6602 -6617 0
c (0<=(aux1647 + aux1649 - aux1652))
-6602 6617 0
-6601 6615 0
-6596 6617 0
-6596 -6602 6615 0
-6596 -6601 6613 0
-6595 6615 0
-6595 -6602 6613 0
-6595 -6601 6612 0
c ((SATLiteral(-690) - aux1653 + SATLiteral(-585))<=0)
585 -6619 0
690 -6619 0
690 585 -6620 0
c (0<=(SATLiteral(-690) - aux1653 + SATLiteral(-585)))
-585 6620 0
-690 6620 0
-690 -585 6619 0
c ((SATLiteral(-705) - aux1654 + SATLiteral(-570))<=0)
570 -6622 0
705 -6622 0
705 570 -6623 0
c (0<=(SATLiteral(-705) - aux1654 + SATLiteral(-570)))
-570 6623 0
-705 6623 0
-705 -570 6622 0
c (( - aux1655 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6625 0
420 -6625 0
420 555 -6626 0
c (0<=( - aux1655 + SATLiteral(-420) + SATLiteral(-555)))
-555 6626 0
-420 6626 0
-420 -555 6625 0
c (( - aux1656 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6628 0
435 -6628 0
435 450 -6629 0
c (0<=( - aux1656 + SATLiteral(-435) + SATLiteral(-450)))
-450 6629 0
-435 6629 0
-435 -450 6628 0
c ((SATLiteral(-720) + aux1656 - aux1657)<=0)
6628 -6631 0
6629 -6632 0
720 -6631 0
720 6628 -6632 0
720 6629 -6634 0
c (0<=(SATLiteral(-720) + aux1656 - aux1657))
-6629 6634 0
-6628 6632 0
-720 6634 0
-720 -6629 6632 0
-720 -6628 6631 0
c ((aux1653 + aux1655 - aux1658)<=0)
6625 -6636 0
6626 -6637 0
6619 -6636 0
6619 6625 -6637 0
6619 6626 -6639 0
6620 -6637 0
6620 6625 -6639 0
6620 6626 -6641 0
c (0<=(aux1653 + aux1655 - aux1658))
-6626 6641 0
-6625 6639 0
-6620 6641 0
-6620 -6626 6639 0
-6620 -6625 6637 0
-6619 6639 0
-6619 -6626 6637 0
-6619 -6625 6636 0
c ((SATLiteral(722) - aux1659 + SATLiteral(617))<=0)
-617 -6643 0
-722 -6643 0
-722 -617 -6644 0
c (0<=(SATLiteral(722) - aux1659 + SATLiteral(617)))
617 6644 0
722 6644 0
722 617 6643 0
c ((SATLiteral(737) - aux1660 + SATLiteral(602))<=0)
-602 -6646 0
-737 -6646 0
-737 -602 -6647 0
c (0<=(SATLiteral(737) - aux1660 + SATLiteral(602)))
602 6647 0
737 6647 0
737 602 6646 0
c (( - aux1661 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6649 0
-452 -6649 0
-452 -587 -6650 0
c (0<=( - aux1661 + SATLiteral(452) + SATLiteral(587)))
587 6650 0
452 6650 0
452 587 6649 0
c (( - aux1662 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6652 0
-467 -6652 0
-467 -482 -6653 0
c (0<=( - aux1662 + SATLiteral(467) + SATLiteral(482)))
482 6653 0
467 6653 0
467 482 6652 0
c ((SATLiteral(752) + aux1662 - aux1663)<=0)
6652 -6655 0
6653 -6656 0
-752 -6655 0
-752 6652 -6656 0
-752 6653 -6658 0
c (0<=(SATLiteral(752) + aux1662 - aux1663))
-6653 6658 0
-6652 6656 0
752 6658 0
752 -6653 6656 0
752 -6652 6655 0
c ((aux1659 + aux1661 - aux1664)<=0)
6649 -6660 0
6650 -6661 0
6643 -6660 0
6643 6649 -6661 0
6643 6650 -6663 0
6644 -6661 0
6644 6649 -6663 0
6644 6650 -6665 0
c (0<=(aux1659 + aux1661 - aux1664))
-6650 6665 0
-6649 6663 0
-6644 6665 0
-6644 -6650 6663 0
-6644 -6649 6661 0
-6643 6663 0
-6643 -6650 6661 0
-6643 -6649 6660 0
c ((SATLiteral(724) - aux1665 + SATLiteral(619))<=0)
-619 -6667 0
-724 -6667 0
-724 -619 -6668 0
c (0<=(SATLiteral(724) - aux1665 + SATLiteral(619)))
619 6668 0
724 6668 0
724 619 6667 0
c ((SATLiteral(739) - aux1666 + SATLiteral(604))<=0)
-604 -6670 0
-739 -6670 0
-739 -604 -6671 0
c (0<=(SATLiteral(739) - aux1666 + SATLiteral(604)))
604 6671 0
739 6671 0
739 604 6670 0
c (( - aux1667 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6673 0
-454 -6673 0
-454 -589 -6674 0
c (0<=( - aux1667 + SATLiteral(454) + SATLiteral(589)))
589 6674 0
454 6674 0
454 589 6673 0
c (( - aux1668 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6676 0
-469 -6676 0
-469 -484 -6677 0
c (0<=( - aux1668 + SATLiteral(469) + SATLiteral(484)))
484 6677 0
469 6677 0
469 484 6676 0
c ((SATLiteral(754) + aux1668 - aux1669)<=0)
6676 -6679 0
6677 -6680 0
-754 -6679 0
-754 6676 -6680 0
-754 6677 -6682 0
c (0<=(SATLiteral(754) + aux1668 - aux1669))
-6677 6682 0
-6676 6680 0
754 6682 0
754 -6677 6680 0
754 -6676 6679 0
c ((aux1665 + aux1667 - aux1670)<=0)
6673 -6684 0
6674 -6685 0
6667 -6684 0
6667 6673 -6685 0
6667 6674 -6687 0
6668 -6685 0
6668 6673 -6687 0
6668 6674 -6689 0
c (0<=(aux1665 + aux1667 - aux1670))
-6674 6689 0
-6673 6687 0
-6668 6689 0
-6668 -6674 6687 0
-6668 -6673 6685 0
-6667 6687 0
-6667 -6674 6685 0
-6667 -6673 6684 0
c ((SATLiteral(726) - aux1671 + SATLiteral(621))<=0)
-621 -6691 0
-726 -6691 0
-726 -621 -6692 0
c (0<=(SATLiteral(726) - aux1671 + SATLiteral(621)))
621 6692 0
726 6692 0
726 621 6691 0
c ((SATLiteral(741) - aux1672 + SATLiteral(606))<=0)
-606 -6694 0
-741 -6694 0
-741 -606 -6695 0
c (0<=(SATLiteral(741) - aux1672 + SATLiteral(606)))
606 6695 0
741 6695 0
741 606 6694 0
c (( - aux1673 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6697 0
-456 -6697 0
-456 -591 -6698 0
c (0<=( - aux1673 + SATLiteral(456) + SATLiteral(591)))
591 6698 0
456 6698 0
456 591 6697 0
c (( - aux1674 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6700 0
-471 -6700 0
-471 -486 -6701 0
c (0<=( - aux1674 + SATLiteral(471) + SATLiteral(486)))
486 6701 0
471 6701 0
471 486 6700 0
c ((SATLiteral(756) + aux1674 - aux1675)<=0)
6700 -6703 0
6701 -6704 0
-756 -6703 0
-756 6700 -6704 0
-756 6701 -6706 0
c (0<=(SATLiteral(756) + aux1674 - aux1675))
-6701 6706 0
-6700 6704 0
756 6706 0
756 -6701 6704 0
756 -6700 6703 0
c ((aux1671 + aux1673 - aux1676)<=0)
6697 -6708 0
6698 -6709 0
6691 -6708 0
6691 6697 -6709 0
6691 6698 -6711 0
6692 -6709 0
6692 6697 -6711 0
6692 6698 -6713 0
c (0<=(aux1671 + aux1673 - aux1676))
-6698 6713 0
-6697 6711 0
-6692 6713 0
-6692 -6698 6711 0
-6692 -6697 6709 0
-6691 6711 0
-6691 -6698 6709 0
-6691 -6697 6708 0
c ((SATLiteral(728) - aux1677 + SATLiteral(623))<=0)
-623 -6715 0
-728 -6715 0
-728 -623 -6716 0
c (0<=(SATLiteral(728) - aux1677 + SATLiteral(623)))
623 6716 0
728 6716 0
728 623 6715 0
c ((SATLiteral(743) - aux1678 + SATLiteral(608))<=0)
-608 -6718 0
-743 -6718 0
-743 -608 -6719 0
c (0<=(SATLiteral(743) - aux1678 + SATLiteral(608)))
608 6719 0
743 6719 0
743 608 6718 0
c (( - aux1679 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6721 0
-458 -6721 0
-458 -593 -6722 0
c (0<=( - aux1679 + SATLiteral(458) + SATLiteral(593)))
593 6722 0
458 6722 0
458 593 6721 0
c (( - aux1680 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6724 0
-473 -6724 0
-473 -488 -6725 0
c (0<=( - aux1680 + SATLiteral(473) + SATLiteral(488)))
488 6725 0
473 6725 0
473 488 6724 0
c ((SATLiteral(758) + aux1680 - aux1681)<=0)
6724 -6727 0
6725 -6728 0
-758 -6727 0
-758 6724 -6728 0
-758 6725 -6730 0
c (0<=(SATLiteral(758) + aux1680 - aux1681))
-6725 6730 0
-6724 6728 0
758 6730 0
758 -6725 6728 0
758 -6724 6727 0
c ((aux1677 + aux1679 - aux1682)<=0)
6721 -6732 0
6722 -6733 0
6715 -6732 0
6715 6721 -6733 0
6715 6722 -6735 0
6716 -6733 0
6716 6721 -6735 0
6716 6722 -6737 0
c (0<=(aux1677 + aux1679 - aux1682))
-6722 6737 0
-6721 6735 0
-6716 6737 0
-6716 -6722 6735 0
-6716 -6721 6733 0
-6715 6735 0
-6715 -6722 6733 0
-6715 -6721 6732 0
c ((SATLiteral(730) - aux1683 + SATLiteral(625))<=0)
-625 -6739 0
-730 -6739 0
-730 -625 -6740 0
c (0<=(SATLiteral(730) - aux1683 + SATLiteral(625)))
625 6740 0
730 6740 0
730 625 6739 0
c ((SATLiteral(745) - aux1684 + SATLiteral(610))<=0)
-610 -6742 0
-745 -6742 0
-745 -610 -6743 0
c (0<=(SATLiteral(745) - aux1684 + SATLiteral(610)))
610 6743 0
745 6743 0
745 610 6742 0
c (( - aux1685 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6745 0
-460 -6745 0
-460 -595 -6746 0
c (0<=( - aux1685 + SATLiteral(460) + SATLiteral(595)))
595 6746 0
460 6746 0
460 595 6745 0
c (( - aux1686 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6748 0
-475 -6748 0
-475 -490 -6749 0
c (0<=( - aux1686 + SATLiteral(475) + SATLiteral(490)))
490 6749 0
475 6749 0
475 490 6748 0
c ((SATLiteral(760) + aux1686 - aux1687)<=0)
6748 -6751 0
6749 -6752 0
-760 -6751 0
-760 6748 -6752 0
-760 6749 -6754 0
c (0<=(SATLiteral(760) + aux1686 - aux1687))
-6749 6754 0
-6748 6752 0
760 6754 0
760 -6749 6752 0
760 -6748 6751 0
c ((aux1683 + aux1685 - aux1688)<=0)
6745 -6756 0
6746 -6757 0
6739 -6756 0
6739 6745 -6757 0
6739 6746 -6759 0
6740 -6757 0
6740 6745 -6759 0
6740 6746 -6761 0
c (0<=(aux1683 + aux1685 - aux1688))
-6746 6761 0
-6745 6759 0
-6740 6761 0
-6740 -6746 6759 0
-6740 -6745 6757 0
-6739 6759 0
-6739 -6746 6757 0
-6739 -6745 6756 0
c ((SATLiteral(732) - aux1689 + SATLiteral(627))<=0)
-627 -6763 0
-732 -6763 0
-732 -627 -6764 0
c (0<=(SATLiteral(732) - aux1689 + SATLiteral(627)))
627 6764 0
732 6764 0
732 627 6763 0
c ((SATLiteral(747) - aux1690 + SATLiteral(612))<=0)
-612 -6766 0
-747 -6766 0
-747 -612 -6767 0
c (0<=(SATLiteral(747) - aux1690 + SATLiteral(612)))
612 6767 0
747 6767 0
747 612 6766 0
c (( - aux1691 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6769 0
-462 -6769 0
-462 -597 -6770 0
c (0<=( - aux1691 + SATLiteral(462) + SATLiteral(597)))
597 6770 0
462 6770 0
462 597 6769 0
c (( - aux1692 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6772 0
-477 -6772 0
-477 -492 -6773 0
c (0<=( - aux1692 + SATLiteral(477) + SATLiteral(492)))
492 6773 0
477 6773 0
477 492 6772 0
c ((SATLiteral(762) + aux1692 - aux1693)<=0)
6772 -6775 0
6773 -6776 0
-762 -6775 0
-762 6772 -6776 0
-762 6773 -6778 0
c (0<=(SATLiteral(762) + aux1692 - aux1693))
-6773 6778 0
-6772 6776 0
762 6778 0
762 -6773 6776 0
762 -6772 6775 0
c ((aux1689 + aux1691 - aux1694)<=0)
6769 -6780 0
6770 -6781 0
6763 -6780 0
6763 6769 -6781 0
6763 6770 -6783 0
6764 -6781 0
6764 6769 -6783 0
6764 6770 -6785 0
c (0<=(aux1689 + aux1691 - aux1694))
-6770 6785 0
-6769 6783 0
-6764 6785 0
-6764 -6770 6783 0
-6764 -6769 6781 0
-6763 6783 0
-6763 -6770 6781 0
-6763 -6769 6780 0
c ((SATLiteral(734) - aux1695 + SATLiteral(629))<=0)
-629 -6787 0
-734 -6787 0
-734 -629 -6788 0
c (0<=(SATLiteral(734) - aux1695 + SATLiteral(629)))
629 6788 0
734 6788 0
734 629 6787 0
c ((SATLiteral(749) - aux1696 + SATLiteral(614))<=0)
-614 -6790 0
-749 -6790 0
-749 -614 -6791 0
c (0<=(SATLiteral(749) - aux1696 + SATLiteral(614)))
614 6791 0
749 6791 0
749 614 6790 0
c (( - aux1697 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6793 0
-464 -6793 0
-464 -599 -6794 0
c (0<=( - aux1697 + SATLiteral(464) + SATLiteral(599)))
599 6794 0
464 6794 0
464 599 6793 0
c (( - aux1698 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6796 0
-479 -6796 0
-479 -494 -6797 0
c (0<=( - aux1698 + SATLiteral(479) + SATLiteral(494)))
494 6797 0
479 6797 0
479 494 6796 0
c ((SATLiteral(764) + aux1698 - aux1699)<=0)
6796 -6799 0
6797 -6800 0
-764 -6799 0
-764 6796 -6800 0
-764 6797 -6802 0
c (0<=(SATLiteral(764) + aux1698 - aux1699))
-6797 6802 0
-6796 6800 0
764 6802 0
764 -6797 6800 0
764 -6796 6799 0
c ((aux1695 + aux1697 - aux1700)<=0)
6793 -6804 0
6794 -6805 0
6787 -6804 0
6787 6793 -6805 0
6787 6794 -6807 0
6788 -6805 0
6788 6793 -6807 0
6788 6794 -6809 0
c (0<=(aux1695 + aux1697 - aux1700))
-6794 6809 0
-6793 6807 0
-6788 6809 0
-6788 -6794 6807 0
-6788 -6793 6805 0
-6787 6807 0
-6787 -6794 6805 0
-6787 -6793 6804 0
c ((SATLiteral(736) - aux1701 + SATLiteral(631))<=0)
-631 -6811 0
-736 -6811 0
-736 -631 -6812 0
c (0<=(SATLiteral(736) - aux1701 + SATLiteral(631)))
631 6812 0
736 6812 0
736 631 6811 0
c ((SATLiteral(751) - aux1702 + SATLiteral(616))<=0)
-616 -6814 0
-751 -6814 0
-751 -616 -6815 0
c (0<=(SATLiteral(751) - aux1702 + SATLiteral(616)))
616 6815 0
751 6815 0
751 616 6814 0
c (( - aux1703 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6817 0
-466 -6817 0
-466 -601 -6818 0
c (0<=( - aux1703 + SATLiteral(466) + SATLiteral(601)))
601 6818 0
466 6818 0
466 601 6817 0
c (( - aux1704 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6820 0
-481 -6820 0
-481 -496 -6821 0
c (0<=( - aux1704 + SATLiteral(481) + SATLiteral(496)))
496 6821 0
481 6821 0
481 496 6820 0
c ((SATLiteral(766) + aux1704 - aux1705)<=0)
6820 -6823 0
6821 -6824 0
-766 -6823 0
-766 6820 -6824 0
-766 6821 -6826 0
c (0<=(SATLiteral(766) + aux1704 - aux1705))
-6821 6826 0
-6820 6824 0
766 6826 0
766 -6821 6824 0
766 -6820 6823 0
c ((aux1701 + aux1703 - aux1706)<=0)
6817 -6828 0
6818 -6829 0
6811 -6828 0
6811 6817 -6829 0
6811 6818 -6831 0
6812 -6829 0
6812 6817 -6831 0
6812 6818 -6833 0
c (0<=(aux1701 + aux1703 - aux1706))
-6818 6833 0
-6817 6831 0
-6812 6833 0
-6812 -6818 6831 0
-6812 -6817 6829 0
-6811 6831 0
-6811 -6818 6829 0
-6811 -6817 6828 0
c ((SATLiteral(-735) - aux1707 + SATLiteral(-630))<=0)
630 -6835 0
735 -6835 0
735 630 -6836 0
c (0<=(SATLiteral(-735) - aux1707 + SATLiteral(-630)))
-630 6836 0
-735 6836 0
-735 -630 6835 0
c ((SATLiteral(-750) - aux1708 + SATLiteral(-615))<=0)
615 -6838 0
750 -6838 0
750 615 -6839 0
c (0<=(SATLiteral(-750) - aux1708 + SATLiteral(-615)))
-615 6839 0
-750 6839 0
-750 -615 6838 0
c (( - aux1709 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6841 0
465 -6841 0
465 600 -6842 0
c (0<=( - aux1709 + SATLiteral(-465) + SATLiteral(-600)))
-600 6842 0
-465 6842 0
-465 -600 6841 0
c (( - aux1710 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6844 0
480 -6844 0
480 495 -6845 0
c (0<=( - aux1710 + SATLiteral(-480) + SATLiteral(-495)))
-495 6845 0
-480 6845 0
-480 -495 6844 0
c ((SATLiteral(-765) + aux1710 - aux1711)<=0)
6844 -6847 0
6845 -6848 0
765 -6847 0
765 6844 -6848 0
765 6845 -6850 0
c (0<=(SATLiteral(-765) + aux1710 - aux1711))
-6845 6850 0
-6844 6848 0
-765 6850 0
-765 -6845 6848 0
-765 -6844 6847 0
c ((aux1707 + aux1709 - aux1712)<=0)
6841 -6852 0
6842 -6853 0
6835 -6852 0
6835 6841 -6853 0
6835 6842 -6855 0
6836 -6853 0
6836 6841 -6855 0
6836 6842 -6857 0
c (0<=(aux1707 + aux1709 - aux1712))
-6842 6857 0
-6841 6855 0
-6836 6857 0
-6836 -6842 6855 0
-6836 -6841 6853 0
-6835 6855 0
-6835 -6842 6853 0
-6835 -6841 6852 0
c ((SATLiteral(767) - aux1713 + SATLiteral(662))<=0)
-662 -6859 0
-767 -6859 0
-767 -662 -6860 0
c (0<=(SATLiteral(767) - aux1713 + SATLiteral(662)))
662 6860 0
767 6860 0
767 662 6859 0
c ((SATLiteral(782) - aux1714 + SATLiteral(647))<=0)
-647 -6862 0
-782 -6862 0
-782 -647 -6863 0
c (0<=(SATLiteral(782) - aux1714 + SATLiteral(647)))
647 6863 0
782 6863 0
782 647 6862 0
c (( - aux1715 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6865 0
-497 -6865 0
-497 -632 -6866 0
c (0<=( - aux1715 + SATLiteral(497) + SATLiteral(632)))
632 6866 0
497 6866 0
497 632 6865 0
c (( - aux1716 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6868 0
-512 -6868 0
-512 -527 -6869 0
c (0<=( - aux1716 + SATLiteral(512) + SATLiteral(527)))
527 6869 0
512 6869 0
512 527 6868 0
c ((SATLiteral(797) + aux1716 - aux1717)<=0)
6868 -6871 0
6869 -6872 0
-797 -6871 0
-797 6868 -6872 0
-797 6869 -6874 0
c (0<=(SATLiteral(797) + aux1716 - aux1717))
-6869 6874 0
-6868 6872 0
797 6874 0
797 -6869 6872 0
797 -6868 6871 0
c ((aux1713 + aux1715 - aux1718)<=0)
6865 -6876 0
6866 -6877 0
6859 -6876 0
6859 6865 -6877 0
6859 6866 -6879 0
6860 -6877 0
6860 6865 -6879 0
6860 6866 -6881 0
c (0<=(aux1713 + aux1715 - aux1718))
-6866 6881 0
-6865 6879 0
-6860 6881 0
-6860 -6866 6879 0
-6860 -6865 6877 0
-6859 6879 0
-6859 -6866 6877 0
-6859 -6865 6876 0
c ((SATLiteral(769) - aux1719 + SATLiteral(664))<=0)
-664 -6883 0
-769 -6883 0
-769 -664 -6884 0
c (0<=(SATLiteral(769) - aux1719 + SATLiteral(664)))
664 6884 0
769 6884 0
769 664 6883 0
c ((SATLiteral(784) - aux1720 + SATLiteral(649))<=0)
-649 -6886 0
-784 -6886 0
-784 -649 -6887 0
c (0<=(SATLiteral(784) - aux1720 + SATLiteral(649)))
649 6887 0
784 6887 0
784 649 6886 0
c (( - aux1721 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -6889 0
-499 -6889 0
-499 -634 -6890 0
c (0<=( - aux1721 + SATLiteral(499) + SATLiteral(634)))
634 6890 0
499 6890 0
499 634 6889 0
c (( - aux1722 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -6892 0
-514 -6892 0
-514 -529 -6893 0
c (0<=( - aux1722 + SATLiteral(514) + SATLiteral(529)))
529 6893 0
514 6893 0
514 529 6892 0
c ((SATLiteral(799) + aux1722 - aux1723)<=0)
6892 -6895 0
6893 -6896 0
-799 -6895 0
-799 6892 -6896 0
-799 6893 -6898 0
c (0<=(SATLiteral(799) + aux1722 - aux1723))
-6893 6898 0
-6892 6896 0
799 6898 0
799 -6893 6896 0
799 -6892 6895 0
c ((aux1719 + aux1721 - aux1724)<=0)
6889 -6900 0
6890 -6901 0
6883 -6900 0
6883 6889 -6901 0
6883 6890 -6903 0
6884 -6901 0
6884 6889 -6903 0
6884 6890 -6905 0
c (0<=(aux1719 + aux1721 - aux1724))
-6890 6905 0
-6889 6903 0
-6884 6905 0
-6884 -6890 6903 0
-6884 -6889 6901 0
-6883 6903 0
-6883 -6890 6901 0
-6883 -6889 6900 0
c ((SATLiteral(771) - aux1725 + SATLiteral(666))<=0)
-666 -6907 0
-771 -6907 0
-771 -666 -6908 0
c (0<=(SATLiteral(771) - aux1725 + SATLiteral(666)))
666 6908 0
771 6908 0
771 666 6907 0
c ((SATLiteral(786) - aux1726 + SATLiteral(651))<=0)
-651 -6910 0
-786 -6910 0
-786 -651 -6911 0
c (0<=(SATLiteral(786) - aux1726 + SATLiteral(651)))
651 6911 0
786 6911 0
786 651 6910 0
c (( - aux1727 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -6913 0
-501 -6913 0
-501 -636 -6914 0
c (0<=( - aux1727 + SATLiteral(501) + SATLiteral(636)))
636 6914 0
501 6914 0
501 636 6913 0
c (( - aux1728 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -6916 0
-516 -6916 0
-516 -531 -6917 0
c (0<=( - aux1728 + SATLiteral(516) + SATLiteral(531)))
531 6917 0
516 6917 0
516 531 6916 0
c ((SATLiteral(801) + aux1728 - aux1729)<=0)
6916 -6919 0
6917 -6920 0
-801 -6919 0
-801 6916 -6920 0
-801 6917 -6922 0
c (0<=(SATLiteral(801) + aux1728 - aux1729))
-6917 6922 0
-6916 6920 0
801 6922 0
801 -6917 6920 0
801 -6916 6919 0
c ((aux1725 + aux1727 - aux1730)<=0)
6913 -6924 0
6914 -6925 0
6907 -6924 0
6907 6913 -6925 0
6907 6914 -6927 0
6908 -6925 0
6908 6913 -6927 0
6908 6914 -6929 0
c (0<=(aux1725 + aux1727 - aux1730))
-6914 6929 0
-6913 6927 0
-6908 6929 0
-6908 -6914 6927 0
-6908 -6913 6925 0
-6907 6927 0
-6907 -6914 6925 0
-6907 -6913 6924 0
c ((SATLiteral(773) - aux1731 + SATLiteral(668))<=0)
-668 -6931 0
-773 -6931 0
-773 -668 -6932 0
c (0<=(SATLiteral(773) - aux1731 + SATLiteral(668)))
668 6932 0
773 6932 0
773 668 6931 0
c ((SATLiteral(788) - aux1732 + SATLiteral(653))<=0)
-653 -6934 0
-788 -6934 0
-788 -653 -6935 0
c (0<=(SATLiteral(788) - aux1732 + SATLiteral(653)))
653 6935 0
788 6935 0
788 653 6934 0
c (( - aux1733 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -6937 0
-503 -6937 0
-503 -638 -6938 0
c (0<=( - aux1733 + SATLiteral(503) + SATLiteral(638)))
638 6938 0
503 6938 0
503 638 6937 0
c (( - aux1734 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -6940 0
-518 -6940 0
-518 -533 -6941 0
c (0<=( - aux1734 + SATLiteral(518) + SATLiteral(533)))
533 6941 0
518 6941 0
518 533 6940 0
c ((SATLiteral(803) + aux1734 - aux1735)<=0)
6940 -6943 0
6941 -6944 0
-803 -6943 0
-803 6940 -6944 0
-803 6941 -6946 0
c (0<=(SATLiteral(803) + aux1734 - aux1735))
-6941 6946 0
-6940 6944 0
803 6946 0
803 -6941 6944 0
803 -6940 6943 0
c ((aux1731 + aux1733 - aux1736)<=0)
6937 -6948 0
6938 -6949 0
6931 -6948 0
6931 6937 -6949 0
6931 6938 -6951 0
6932 -6949 0
6932 6937 -6951 0
6932 6938 -6953 0
c (0<=(aux1731 + aux1733 - aux1736))
-6938 6953 0
-6937 6951 0
-6932 6953 0
-6932 -6938 6951 0
-6932 -6937 6949 0
-6931 6951 0
-6931 -6938 6949 0
-6931 -6937 6948 0
c ((SATLiteral(775) - aux1737 + SATLiteral(670))<=0)
-670 -6955 0
-775 -6955 0
-775 -670 -6956 0
c (0<=(SATLiteral(775) - aux1737 + SATLiteral(670)))
670 6956 0
775 6956 0
775 670 6955 0
c ((SATLiteral(790) - aux1738 + SATLiteral(655))<=0)
-655 -6958 0
-790 -6958 0
-790 -655 -6959 0
c (0<=(SATLiteral(790) - aux1738 + SATLiteral(655)))
655 6959 0
790 6959 0
790 655 6958 0
c (( - aux1739 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -6961 0
-505 -6961 0
-505 -640 -6962 0
c (0<=( - aux1739 + SATLiteral(505) + SATLiteral(640)))
640 6962 0
505 6962 0
505 640 6961 0
c (( - aux1740 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -6964 0
-520 -6964 0
-520 -535 -6965 0
c (0<=( - aux1740 + SATLiteral(520) + SATLiteral(535)))
535 6965 0
520 6965 0
520 535 6964 0
c ((SATLiteral(805) + aux1740 - aux1741)<=0)
6964 -6967 0
6965 -6968 0
-805 -6967 0
-805 6964 -6968 0
-805 6965 -6970 0
c (0<=(SATLiteral(805) + aux1740 - aux1741))
-6965 6970 0
-6964 6968 0
805 6970 0
805 -6965 6968 0
805 -6964 6967 0
c ((aux1737 + aux1739 - aux1742)<=0)
6961 -6972 0
6962 -6973 0
6955 -6972 0
6955 6961 -6973 0
6955 6962 -6975 0
6956 -6973 0
6956 6961 -6975 0
6956 6962 -6977 0
c (0<=(aux1737 + aux1739 - aux1742))
-6962 6977 0
-6961 6975 0
-6956 6977 0
-6956 -6962 6975 0
-6956 -6961 6973 0
-6955 6975 0
-6955 -6962 6973 0
-6955 -6961 6972 0
c ((SATLiteral(777) - aux1743 + SATLiteral(672))<=0)
-672 -6979 0
-777 -6979 0
-777 -672 -6980 0
c (0<=(SATLiteral(777) - aux1743 + SATLiteral(672)))
672 6980 0
777 6980 0
777 672 6979 0
c ((SATLiteral(792) - aux1744 + SATLiteral(657))<=0)
-657 -6982 0
-792 -6982 0
-792 -657 -6983 0
c (0<=(SATLiteral(792) - aux1744 + SATLiteral(657)))
657 6983 0
792 6983 0
792 657 6982 0
c (( - aux1745 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -6985 0
-507 -6985 0
-507 -642 -6986 0
c (0<=( - aux1745 + SATLiteral(507) + SATLiteral(642)))
642 6986 0
507 6986 0
507 642 6985 0
c (( - aux1746 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -6988 0
-522 -6988 0
-522 -537 -6989 0
c (0<=( - aux1746 + SATLiteral(522) + SATLiteral(537)))
537 6989 0
522 6989 0
522 537 6988 0
c ((SATLiteral(807) + aux1746 - aux1747)<=0)
6988 -6991 0
6989 -6992 0
-807 -6991 0
-807 6988 -6992 0
-807 6989 -6994 0
c (0<=(SATLiteral(807) + aux1746 - aux1747))
-6989 6994 0
-6988 6992 0
807 6994 0
807 -6989 6992 0
807 -6988 6991 0
c ((aux1743 + aux1745 - aux1748)<=0)
6985 -6996 0
6986 -6997 0
6979 -6996 0
6979 6985 -6997 0
6979 6986 -6999 0
6980 -6997 0
6980 6985 -6999 0
6980 6986 -7001 0
c (0<=(aux1743 + aux1745 - aux1748))
-6986 7001 0
-6985 6999 0
-6980 7001 0
-6980 -6986 6999 0
-6980 -6985 6997 0
-6979 6999 0
-6979 -6986 6997 0
-6979 -6985 6996 0
c ((SATLiteral(779) - aux1749 + SATLiteral(674))<=0)
-674 -7003 0
-779 -7003 0
-779 -674 -7004 0
c (0<=(SATLiteral(779) - aux1749 + SATLiteral(674)))
674 7004 0
779 7004 0
779 674 7003 0
c ((SATLiteral(794) - aux1750 + SATLiteral(659))<=0)
-659 -7006 0
-794 -7006 0
-794 -659 -7007 0
c (0<=(SATLiteral(794) - aux1750 + SATLiteral(659)))
659 7007 0
794 7007 0
794 659 7006 0
c (( - aux1751 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7009 0
-509 -7009 0
-509 -644 -7010 0
c (0<=( - aux1751 + SATLiteral(509) + SATLiteral(644)))
644 7010 0
509 7010 0
509 644 7009 0
c (( - aux1752 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7012 0
-524 -7012 0
-524 -539 -7013 0
c (0<=( - aux1752 + SATLiteral(524) + SATLiteral(539)))
539 7013 0
524 7013 0
524 539 7012 0
c ((SATLiteral(809) + aux1752 - aux1753)<=0)
7012 -7015 0
7013 -7016 0
-809 -7015 0
-809 7012 -7016 0
-809 7013 -7018 0
c (0<=(SATLiteral(809) + aux1752 - aux1753))
-7013 7018 0
-7012 7016 0
809 7018 0
809 -7013 7016 0
809 -7012 7015 0
c ((aux1749 + aux1751 - aux1754)<=0)
7009 -7020 0
7010 -7021 0
7003 -7020 0
7003 7009 -7021 0
7003 7010 -7023 0
7004 -7021 0
7004 7009 -7023 0
7004 7010 -7025 0
c (0<=(aux1749 + aux1751 - aux1754))
-7010 7025 0
-7009 7023 0
-7004 7025 0
-7004 -7010 7023 0
-7004 -7009 7021 0
-7003 7023 0
-7003 -7010 7021 0
-7003 -7009 7020 0
c ((SATLiteral(781) - aux1755 + SATLiteral(676))<=0)
-676 -7027 0
-781 -7027 0
-781 -676 -7028 0
c (0<=(SATLiteral(781) - aux1755 + SATLiteral(676)))
676 7028 0
781 7028 0
781 676 7027 0
c ((SATLiteral(796) - aux1756 + SATLiteral(661))<=0)
-661 -7030 0
-796 -7030 0
-796 -661 -7031 0
c (0<=(SATLiteral(796) - aux1756 + SATLiteral(661)))
661 7031 0
796 7031 0
796 661 7030 0
c (( - aux1757 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7033 0
-511 -7033 0
-511 -646 -7034 0
c (0<=( - aux1757 + SATLiteral(511) + SATLiteral(646)))
646 7034 0
511 7034 0
511 646 7033 0
c (( - aux1758 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7036 0
-526 -7036 0
-526 -541 -7037 0
c (0<=( - aux1758 + SATLiteral(526) + SATLiteral(541)))
541 7037 0
526 7037 0
526 541 7036 0
c ((SATLiteral(811) + aux1758 - aux1759)<=0)
7036 -7039 0
7037 -7040 0
-811 -7039 0
-811 7036 -7040 0
-811 7037 -7042 0
c (0<=(SATLiteral(811) + aux1758 - aux1759))
-7037 7042 0
-7036 7040 0
811 7042 0
811 -7037 7040 0
811 -7036 7039 0
c ((aux1755 + aux1757 - aux1760)<=0)
7033 -7044 0
7034 -7045 0
7027 -7044 0
7027 7033 -7045 0
7027 7034 -7047 0
7028 -7045 0
7028 7033 -7047 0
7028 7034 -7049 0
c (0<=(aux1755 + aux1757 - aux1760))
-7034 7049 0
-7033 7047 0
-7028 7049 0
-7028 -7034 7047 0
-7028 -7033 7045 0
-7027 7047 0
-7027 -7034 7045 0
-7027 -7033 7044 0
c ((SATLiteral(-780) - aux1761 + SATLiteral(-675))<=0)
675 -7051 0
780 -7051 0
780 675 -7052 0
c (0<=(SATLiteral(-780) - aux1761 + SATLiteral(-675)))
-675 7052 0
-780 7052 0
-780 -675 7051 0
c ((SATLiteral(-795) - aux1762 + SATLiteral(-660))<=0)
660 -7054 0
795 -7054 0
795 660 -7055 0
c (0<=(SATLiteral(-795) - aux1762 + SATLiteral(-660)))
-660 7055 0
-795 7055 0
-795 -660 7054 0
c (( - aux1763 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7057 0
510 -7057 0
510 645 -7058 0
c (0<=( - aux1763 + SATLiteral(-510) + SATLiteral(-645)))
-645 7058 0
-510 7058 0
-510 -645 7057 0
c (( - aux1764 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7060 0
525 -7060 0
525 540 -7061 0
c (0<=( - aux1764 + SATLiteral(-525) + SATLiteral(-540)))
-540 7061 0
-525 7061 0
-525 -540 7060 0
c ((SATLiteral(-810) + aux1764 - aux1765)<=0)
7060 -7063 0
7061 -7064 0
810 -7063 0
810 7060 -7064 0
810 7061 -7066 0
c (0<=(SATLiteral(-810) + aux1764 - aux1765))
-7061 7066 0
-7060 7064 0
-810 7066 0
-810 -7061 7064 0
-810 -7060 7063 0
c ((aux1761 + aux1763 - aux1766)<=0)
7057 -7068 0
7058 -7069 0
7051 -7068 0
7051 7057 -7069 0
7051 7058 -7071 0
7052 -7069 0
7052 7057 -7071 0
7052 7058 -7073 0
c (0<=(aux1761 + aux1763 - aux1766))
-7058 7073 0
-7057 7071 0
-7052 7073 0
-7052 -7058 7071 0
-7052 -7057 7069 0
-7051 7071 0
-7051 -7058 7069 0
-7051 -7057 7068 0
c ((SATLiteral(947) - aux1767 + SATLiteral(842))<=0)
-842 -7075 0
-947 -7075 0
-947 -842 -7076 0
c (0<=(SATLiteral(947) - aux1767 + SATLiteral(842)))
842 7076 0
947 7076 0
947 842 7075 0
c ((SATLiteral(962) - aux1768 + SATLiteral(827))<=0)
-827 -7078 0
-962 -7078 0
-962 -827 -7079 0
c (0<=(SATLiteral(962) - aux1768 + SATLiteral(827)))
827 7079 0
962 7079 0
962 827 7078 0
c (( - aux1769 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7081 0
-1082 -7081 0
-1082 -812 -7082 0
c (0<=( - aux1769 + SATLiteral(1082) + SATLiteral(812)))
812 7082 0
1082 7082 0
1082 812 7081 0
c (( - aux1770 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7084 0
-1097 -7084 0
-1097 -1112 -7085 0
c (0<=( - aux1770 + SATLiteral(1097) + SATLiteral(1112)))
1112 7085 0
1097 7085 0
1097 1112 7084 0
c ((SATLiteral(977) + aux1770 - aux1771)<=0)
7084 -7087 0
7085 -7088 0
-977 -7087 0
-977 7084 -7088 0
-977 7085 -7090 0
c (0<=(SATLiteral(977) + aux1770 - aux1771))
-7085 7090 0
-7084 7088 0
977 7090 0
977 -7085 7088 0
977 -7084 7087 0
c ((aux1767 + aux1769 - aux1772)<=0)
7081 -7092 0
7082 -7093 0
7075 -7092 0
7075 7081 -7093 0
7075 7082 -7095 0
7076 -7093 0
7076 7081 -7095 0
7076 7082 -7097 0
c (0<=(aux1767 + aux1769 - aux1772))
-7082 7097 0
-7081 7095 0
-7076 7097 0
-7076 -7082 7095 0
-7076 -7081 7093 0
-7075 7095 0
-7075 -7082 7093 0
-7075 -7081 7092 0
c ((SATLiteral(949) - aux1773 + SATLiteral(844))<=0)
-844 -7099 0
-949 -7099 0
-949 -844 -7100 0
c (0<=(SATLiteral(949) - aux1773 + SATLiteral(844)))
844 7100 0
949 7100 0
949 844 7099 0
c ((SATLiteral(964) - aux1774 + SATLiteral(829))<=0)
-829 -7102 0
-964 -7102 0
-964 -829 -7103 0
c (0<=(SATLiteral(964) - aux1774 + SATLiteral(829)))
829 7103 0
964 7103 0
964 829 7102 0
c (( - aux1775 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7105 0
-1084 -7105 0
-1084 -814 -7106 0
c (0<=( - aux1775 + SATLiteral(1084) + SATLiteral(814)))
814 7106 0
1084 7106 0
1084 814 7105 0
c (( - aux1776 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7108 0
-1099 -7108 0
-1099 -1114 -7109 0
c (0<=( - aux1776 + SATLiteral(1099) + SATLiteral(1114)))
1114 7109 0
1099 7109 0
1099 1114 7108 0
c ((SATLiteral(979) + aux1776 - aux1777)<=0)
7108 -7111 0
7109 -7112 0
-979 -7111 0
-979 7108 -7112 0
-979 7109 -7114 0
c (0<=(SATLiteral(979) + aux1776 - aux1777))
-7109 7114 0
-7108 7112 0
979 7114 0
979 -7109 7112 0
979 -7108 7111 0
c ((aux1773 + aux1775 - aux1778)<=0)
7105 -7116 0
7106 -7117 0
7099 -7116 0
7099 7105 -7117 0
7099 7106 -7119 0
7100 -7117 0
7100 7105 -7119 0
7100 7106 -7121 0
c (0<=(aux1773 + aux1775 - aux1778))
-7106 7121 0
-7105 7119 0
-7100 7121 0
-7100 -7106 7119 0
-7100 -7105 7117 0
-7099 7119 0
-7099 -7106 7117 0
-7099 -7105 7116 0
c ((SATLiteral(951) - aux1779 + SATLiteral(846))<=0)
-846 -7123 0
-951 -7123 0
-951 -846 -7124 0
c (0<=(SATLiteral(951) - aux1779 + SATLiteral(846)))
846 7124 0
951 7124 0
951 846 7123 0
c ((SATLiteral(966) - aux1780 + SATLiteral(831))<=0)
-831 -7126 0
-966 -7126 0
-966 -831 -7127 0
c (0<=(SATLiteral(966) - aux1780 + SATLiteral(831)))
831 7127 0
966 7127 0
966 831 7126 0
c (( - aux1781 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7129 0
-1086 -7129 0
-1086 -816 -7130 0
c (0<=( - aux1781 + SATLiteral(1086) + SATLiteral(816)))
816 7130 0
1086 7130 0
1086 816 7129 0
c (( - aux1782 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7132 0
-1101 -7132 0
-1101 -1116 -7133 0
c (0<=( - aux1782 + SATLiteral(1101) + SATLiteral(1116)))
1116 7133 0
1101 7133 0
1101 1116 7132 0
c ((SATLiteral(981) + aux1782 - aux1783)<=0)
7132 -7135 0
7133 -7136 0
-981 -7135 0
-981 7132 -7136 0
-981 7133 -7138 0
c (0<=(SATLiteral(981) + aux1782 - aux1783))
-7133 7138 0
-7132 7136 0
981 7138 0
981 -7133 7136 0
981 -7132 7135 0
c ((aux1779 + aux1781 - aux1784)<=0)
7129 -7140 0
7130 -7141 0
7123 -7140 0
7123 7129 -7141 0
7123 7130 -7143 0
7124 -7141 0
7124 7129 -7143 0
7124 7130 -7145 0
c (0<=(aux1779 + aux1781 - aux1784))
-7130 7145 0
-7129 7143 0
-7124 7145 0
-7124 -7130 7143 0
-7124 -7129 7141 0
-7123 7143 0
-7123 -7130 7141 0
-7123 -7129 7140 0
c ((SATLiteral(953) - aux1785 + SATLiteral(848))<=0)
-848 -7147 0
-953 -7147 0
-953 -848 -7148 0
c (0<=(SATLiteral(953) - aux1785 + SATLiteral(848)))
848 7148 0
953 7148 0
953 848 7147 0
c ((SATLiteral(968) - aux1786 + SATLiteral(833))<=0)
-833 -7150 0
-968 -7150 0
-968 -833 -7151 0
c (0<=(SATLiteral(968) - aux1786 + SATLiteral(833)))
833 7151 0
968 7151 0
968 833 7150 0
c (( - aux1787 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7153 0
-1088 -7153 0
-1088 -818 -7154 0
c (0<=( - aux1787 + SATLiteral(1088) + SATLiteral(818)))
818 7154 0
1088 7154 0
1088 818 7153 0
c (( - aux1788 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7156 0
-1103 -7156 0
-1103 -1118 -7157 0
c (0<=( - aux1788 + SATLiteral(1103) + SATLiteral(1118)))
1118 7157 0
1103 7157 0
1103 1118 7156 0
c ((SATLiteral(983) + aux1788 - aux1789)<=0)
7156 -7159 0
7157 -7160 0
-983 -7159 0
-983 7156 -7160 0
-983 7157 -7162 0
c (0<=(SATLiteral(983) + aux1788 - aux1789))
-7157 7162 0
-7156 7160 0
983 7162 0
983 -7157 7160 0
983 -7156 7159 0
c ((aux1785 + aux1787 - aux1790)<=0)
7153 -7164 0
7154 -7165 0
7147 -7164 0
7147 7153 -7165 0
7147 7154 -7167 0
7148 -7165 0
7148 7153 -7167 0
7148 7154 -7169 0
c (0<=(aux1785 + aux1787 - aux1790))
-7154 7169 0
-7153 7167 0
-7148 7169 0
-7148 -7154 7167 0
-7148 -7153 7165 0
-7147 7167 0
-7147 -7154 7165 0
-7147 -7153 7164 0
c ((SATLiteral(955) - aux1791 + SATLiteral(850))<=0)
-850 -7171 0
-955 -7171 0
-955 -850 -7172 0
c (0<=(SATLiteral(955) - aux1791 + SATLiteral(850)))
850 7172 0
955 7172 0
955 850 7171 0
c ((SATLiteral(970) - aux1792 + SATLiteral(835))<=0)
-835 -7174 0
-970 -7174 0
-970 -835 -7175 0
c (0<=(SATLiteral(970) - aux1792 + SATLiteral(835)))
835 7175 0
970 7175 0
970 835 7174 0
c (( - aux1793 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7177 0
-1090 -7177 0
-1090 -820 -7178 0
c (0<=( - aux1793 + SATLiteral(1090) + SATLiteral(820)))
820 7178 0
1090 7178 0
1090 820 7177 0
c (( - aux1794 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7180 0
-1105 -7180 0
-1105 -1120 -7181 0
c (0<=( - aux1794 + SATLiteral(1105) + SATLiteral(1120)))
1120 7181 0
1105 7181 0
1105 1120 7180 0
c ((SATLiteral(985) + aux1794 - aux1795)<=0)
7180 -7183 0
7181 -7184 0
-985 -7183 0
-985 7180 -7184 0
-985 7181 -7186 0
c (0<=(SATLiteral(985) + aux1794 - aux1795))
-7181 7186 0
-7180 7184 0
985 7186 0
985 -7181 7184 0
985 -7180 7183 0
c ((aux1791 + aux1793 - aux1796)<=0)
7177 -7188 0
7178 -7189 0
7171 -7188 0
7171 7177 -7189 0
7171 7178 -7191 0
7172 -7189 0
7172 7177 -7191 0
7172 7178 -7193 0
c (0<=(aux1791 + aux1793 - aux1796))
-7178 7193 0
-7177 7191 0
-7172 7193 0
-7172 -7178 7191 0
-7172 -7177 7189 0
-7171 7191 0
-7171 -7178 7189 0
-7171 -7177 7188 0
c ((SATLiteral(957) - aux1797 + SATLiteral(852))<=0)
-852 -7195 0
-957 -7195 0
-957 -852 -7196 0
c (0<=(SATLiteral(957) - aux1797 + SATLiteral(852)))
852 7196 0
957 7196 0
957 852 7195 0
c ((SATLiteral(972) - aux1798 + SATLiteral(837))<=0)
-837 -7198 0
-972 -7198 0
-972 -837 -7199 0
c (0<=(SATLiteral(972) - aux1798 + SATLiteral(837)))
837 7199 0
972 7199 0
972 837 7198 0
c (( - aux1799 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7201 0
-1092 -7201 0
-1092 -822 -7202 0
c (0<=( - aux1799 + SATLiteral(1092) + SATLiteral(822)))
822 7202 0
1092 7202 0
1092 822 7201 0
c (( - aux1800 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7204 0
-1107 -7204 0
-1107 -1122 -7205 0
c (0<=( - aux1800 + SATLiteral(1107) + SATLiteral(1122)))
1122 7205 0
1107 7205 0
1107 1122 7204 0
c ((SATLiteral(987) + aux1800 - aux1801)<=0)
7204 -7207 0
7205 -7208 0
-987 -7207 0
-987 7204 -7208 0
-987 7205 -7210 0
c (0<=(SATLiteral(987) + aux1800 - aux1801))
-7205 7210 0
-7204 7208 0
987 7210 0
987 -7205 7208 0
987 -7204 7207 0
c ((aux1797 + aux1799 - aux1802)<=0)
7201 -7212 0
7202 -7213 0
7195 -7212 0
7195 7201 -7213 0
7195 7202 -7215 0
7196 -7213 0
7196 7201 -7215 0
7196 7202 -7217 0
c (0<=(aux1797 + aux1799 - aux1802))
-7202 7217 0
-7201 7215 0
-7196 7217 0
-7196 -7202 7215 0
-7196 -7201 7213 0
-7195 7215 0
-7195 -7202 7213 0
-7195 -7201 7212 0
c ((SATLiteral(959) - aux1803 + SATLiteral(854))<=0)
-854 -7219 0
-959 -7219 0
-959 -854 -7220 0
c (0<=(SATLiteral(959) - aux1803 + SATLiteral(854)))
854 7220 0
959 7220 0
959 854 7219 0
c ((SATLiteral(974) - aux1804 + SATLiteral(839))<=0)
-839 -7222 0
-974 -7222 0
-974 -839 -7223 0
c (0<=(SATLiteral(974) - aux1804 + SATLiteral(839)))
839 7223 0
974 7223 0
974 839 7222 0
c (( - aux1805 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7225 0
-1094 -7225 0
-1094 -824 -7226 0
c (0<=( - aux1805 + SATLiteral(1094) + SATLiteral(824)))
824 7226 0
1094 7226 0
1094 824 7225 0
c (( - aux1806 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7228 0
-1109 -7228 0
-1109 -1124 -7229 0
c (0<=( - aux1806 + SATLiteral(1109) + SATLiteral(1124)))
1124 7229 0
1109 7229 0
1109 1124 7228 0
c ((SATLiteral(989) + aux1806 - aux1807)<=0)
7228 -7231 0
7229 -7232 0
-989 -7231 0
-989 7228 -7232 0
-989 7229 -7234 0
c (0<=(SATLiteral(989) + aux1806 - aux1807))
-7229 7234 0
-7228 7232 0
989 7234 0
989 -7229 7232 0
989 -7228 7231 0
c ((aux1803 + aux1805 - aux1808)<=0)
7225 -7236 0
7226 -7237 0
7219 -7236 0
7219 7225 -7237 0
7219 7226 -7239 0
7220 -7237 0
7220 7225 -7239 0
7220 7226 -7241 0
c (0<=(aux1803 + aux1805 - aux1808))
-7226 7241 0
-7225 7239 0
-7220 7241 0
-7220 -7226 7239 0
-7220 -7225 7237 0
-7219 7239 0
-7219 -7226 7237 0
-7219 -7225 7236 0
c ((SATLiteral(961) - aux1809 + SATLiteral(856))<=0)
-856 -7243 0
-961 -7243 0
-961 -856 -7244 0
c (0<=(SATLiteral(961) - aux1809 + SATLiteral(856)))
856 7244 0
961 7244 0
961 856 7243 0
c ((SATLiteral(976) - aux1810 + SATLiteral(841))<=0)
-841 -7246 0
-976 -7246 0
-976 -841 -7247 0
c (0<=(SATLiteral(976) - aux1810 + SATLiteral(841)))
841 7247 0
976 7247 0
976 841 7246 0
c (( - aux1811 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7249 0
-1096 -7249 0
-1096 -826 -7250 0
c (0<=( - aux1811 + SATLiteral(1096) + SATLiteral(826)))
826 7250 0
1096 7250 0
1096 826 7249 0
c (( - aux1812 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7252 0
-1111 -7252 0
-1111 -1126 -7253 0
c (0<=( - aux1812 + SATLiteral(1111) + SATLiteral(1126)))
1126 7253 0
1111 7253 0
1111 1126 7252 0
c ((SATLiteral(991) + aux1812 - aux1813)<=0)
7252 -7255 0
7253 -7256 0
-991 -7255 0
-991 7252 -7256 0
-991 7253 -7258 0
c (0<=(SATLiteral(991) + aux1812 - aux1813))
-7253 7258 0
-7252 7256 0
991 7258 0
991 -7253 7256 0
991 -7252 7255 0
c ((aux1809 + aux1811 - aux1814)<=0)
7249 -7260 0
7250 -7261 0
7243 -7260 0
7243 7249 -7261 0
7243 7250 -7263 0
7244 -7261 0
7244 7249 -7263 0
7244 7250 -7265 0
c (0<=(aux1809 + aux1811 - aux1814))
-7250 7265 0
-7249 7263 0
-7244 7265 0
-7244 -7250 7263 0
-7244 -7249 7261 0
-7243 7263 0
-7243 -7250 7261 0
-7243 -7249 7260 0
c ((SATLiteral(-960) - aux1815 + SATLiteral(-855))<=0)
855 -7267 0
960 -7267 0
960 855 -7268 0
c (0<=(SATLiteral(-960) - aux1815 + SATLiteral(-855)))
-855 7268 0
-960 7268 0
-960 -855 7267 0
c ((SATLiteral(-975) - aux1816 + SATLiteral(-840))<=0)
840 -7270 0
975 -7270 0
975 840 -7271 0
c (0<=(SATLiteral(-975) - aux1816 + SATLiteral(-840)))
-840 7271 0
-975 7271 0
-975 -840 7270 0
c (( - aux1817 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7273 0
1095 -7273 0
1095 825 -7274 0
c (0<=( - aux1817 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7274 0
-1095 7274 0
-1095 -825 7273 0
c (( - aux1818 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7276 0
1110 -7276 0
1110 1125 -7277 0
c (0<=( - aux1818 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7277 0
-1110 7277 0
-1110 -1125 7276 0
c ((SATLiteral(-990) + aux1818 - aux1819)<=0)
7276 -7279 0
7277 -7280 0
990 -7279 0
990 7276 -7280 0
990 7277 -7282 0
c (0<=(SATLiteral(-990) + aux1818 - aux1819))
-7277 7282 0
-7276 7280 0
-990 7282 0
-990 -7277 7280 0
-990 -7276 7279 0
c ((aux1815 + aux1817 - aux1820)<=0)
7273 -7284 0
7274 -7285 0
7267 -7284 0
7267 7273 -7285 0
7267 7274 -7287 0
7268 -7285 0
7268 7273 -7287 0
7268 7274 -7289 0
c (0<=(aux1815 + aux1817 - aux1820))
-7274 7289 0
-7273 7287 0
-7268 7289 0
-7268 -7274 7287 0
-7268 -7273 7285 0
-7267 7287 0
-7267 -7274 7285 0
-7267 -7273 7284 0
c ((SATLiteral(992) - aux1821 + SATLiteral(887))<=0)
-887 -7291 0
-992 -7291 0
-992 -887 -7292 0
c (0<=(SATLiteral(992) - aux1821 + SATLiteral(887)))
887 7292 0
992 7292 0
992 887 7291 0
c ((SATLiteral(1007) - aux1822 + SATLiteral(872))<=0)
-872 -7294 0
-1007 -7294 0
-1007 -872 -7295 0
c (0<=(SATLiteral(1007) - aux1822 + SATLiteral(872)))
872 7295 0
1007 7295 0
1007 872 7294 0
c (( - aux1823 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7297 0
-1127 -7297 0
-1127 -857 -7298 0
c (0<=( - aux1823 + SATLiteral(1127) + SATLiteral(857)))
857 7298 0
1127 7298 0
1127 857 7297 0
c (( - aux1824 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7300 0
-1142 -7300 0
-1142 -1157 -7301 0
c (0<=( - aux1824 + SATLiteral(1142) + SATLiteral(1157)))
1157 7301 0
1142 7301 0
1142 1157 7300 0
c ((SATLiteral(1022) + aux1824 - aux1825)<=0)
7300 -7303 0
7301 -7304 0
-1022 -7303 0
-1022 7300 -7304 0
-1022 7301 -7306 0
c (0<=(SATLiteral(1022) + aux1824 - aux1825))
-7301 7306 0
-7300 7304 0
1022 7306 0
1022 -7301 7304 0
1022 -7300 7303 0
c ((aux1821 + aux1823 - aux1826)<=0)
7297 -7308 0
7298 -7309 0
7291 -7308 0
7291 7297 -7309 0
7291 7298 -7311 0
7292 -7309 0
7292 7297 -7311 0
7292 7298 -7313 0
c (0<=(aux1821 + aux1823 - aux1826))
-7298 7313 0
-7297 7311 0
-7292 7313 0
-7292 -7298 7311 0
-7292 -7297 7309 0
-7291 7311 0
-7291 -7298 7309 0
-7291 -7297 7308 0
c ((SATLiteral(994) - aux1827 + SATLiteral(889))<=0)
-889 -7315 0
-994 -7315 0
-994 -889 -7316 0
c (0<=(SATLiteral(994) - aux1827 + SATLiteral(889)))
889 7316 0
994 7316 0
994 889 7315 0
c ((SATLiteral(1009) - aux1828 + SATLiteral(874))<=0)
-874 -7318 0
-1009 -7318 0
-1009 -874 -7319 0
c (0<=(SATLiteral(1009) - aux1828 + SATLiteral(874)))
874 7319 0
1009 7319 0
1009 874 7318 0
c (( - aux1829 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7321 0
-1129 -7321 0
-1129 -859 -7322 0
c (0<=( - aux1829 + SATLiteral(1129) + SATLiteral(859)))
859 7322 0
1129 7322 0
1129 859 7321 0
c (( - aux1830 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7324 0
-1144 -7324 0
-1144 -1159 -7325 0
c (0<=( - aux1830 + SATLiteral(1144) + SATLiteral(1159)))
1159 7325 0
1144 7325 0
1144 1159 7324 0
c ((SATLiteral(1024) + aux1830 - aux1831)<=0)
7324 -7327 0
7325 -7328 0
-1024 -7327 0
-1024 7324 -7328 0
-1024 7325 -7330 0
c (0<=(SATLiteral(1024) + aux1830 - aux1831))
-7325 7330 0
-7324 7328 0
1024 7330 0
1024 -7325 7328 0
1024 -7324 7327 0
c ((aux1827 + aux1829 - aux1832)<=0)
7321 -7332 0
7322 -7333 0
7315 -7332 0
7315 7321 -7333 0
7315 7322 -7335 0
7316 -7333 0
7316 7321 -7335 0
7316 7322 -7337 0
c (0<=(aux1827 + aux1829 - aux1832))
-7322 7337 0
-7321 7335 0
-7316 7337 0
-7316 -7322 7335 0
-7316 -7321 7333 0
-7315 7335 0
-7315 -7322 7333 0
-7315 -7321 7332 0
c ((SATLiteral(996) - aux1833 + SATLiteral(891))<=0)
-891 -7339 0
-996 -7339 0
-996 -891 -7340 0
c (0<=(SATLiteral(996) - aux1833 + SATLiteral(891)))
891 7340 0
996 7340 0
996 891 7339 0
c ((SATLiteral(1011) - aux1834 + SATLiteral(876))<=0)
-876 -7342 0
-1011 -7342 0
-1011 -876 -7343 0
c (0<=(SATLiteral(1011) - aux1834 + SATLiteral(876)))
876 7343 0
1011 7343 0
1011 876 7342 0
c (( - aux1835 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7345 0
-1131 -7345 0
-1131 -861 -7346 0
c (0<=( - aux1835 + SATLiteral(1131) + SATLiteral(861)))
861 7346 0
1131 7346 0
1131 861 7345 0
c (( - aux1836 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7348 0
-1146 -7348 0
-1146 -1161 -7349 0
c (0<=( - aux1836 + SATLiteral(1146) + SATLiteral(1161)))
1161 7349 0
1146 7349 0
1146 1161 7348 0
c ((SATLiteral(1026) + aux1836 - aux1837)<=0)
7348 -7351 0
7349 -7352 0
-1026 -7351 0
-1026 7348 -7352 0
-1026 7349 -7354 0
c (0<=(SATLiteral(1026) + aux1836 - aux1837))
-7349 7354 0
-7348 7352 0
1026 7354 0
1026 -7349 7352 0
1026 -7348 7351 0
c ((aux1833 + aux1835 - aux1838)<=0)
7345 -7356 0
7346 -7357 0
7339 -7356 0
7339 7345 -7357 0
7339 7346 -7359 0
7340 -7357 0
7340 7345 -7359 0
7340 7346 -7361 0
c (0<=(aux1833 + aux1835 - aux1838))
-7346 7361 0
-7345 7359 0
-7340 7361 0
-7340 -7346 7359 0
-7340 -7345 7357 0
-7339 7359 0
-7339 -7346 7357 0
-7339 -7345 7356 0
c ((SATLiteral(998) - aux1839 + SATLiteral(893))<=0)
-893 -7363 0
-998 -7363 0
-998 -893 -7364 0
c (0<=(SATLiteral(998) - aux1839 + SATLiteral(893)))
893 7364 0
998 7364 0
998 893 7363 0
c ((SATLiteral(1013) - aux1840 + SATLiteral(878))<=0)
-878 -7366 0
-1013 -7366 0
-1013 -878 -7367 0
c (0<=(SATLiteral(1013) - aux1840 + SATLiteral(878)))
878 7367 0
1013 7367 0
1013 878 7366 0
c (( - aux1841 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7369 0
-1133 -7369 0
-1133 -863 -7370 0
c (0<=( - aux1841 + SATLiteral(1133) + SATLiteral(863)))
863 7370 0
1133 7370 0
1133 863 7369 0
c (( - aux1842 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7372 0
-1148 -7372 0
-1148 -1163 -7373 0
c (0<=( - aux1842 + SATLiteral(1148) + SATLiteral(1163)))
1163 7373 0
1148 7373 0
1148 1163 7372 0
c ((SATLiteral(1028) + aux1842 - aux1843)<=0)
7372 -7375 0
7373 -7376 0
-1028 -7375 0
-1028 7372 -7376 0
-1028 7373 -7378 0
c (0<=(SATLiteral(1028) + aux1842 - aux1843))
-7373 7378 0
-7372 7376 0
1028 7378 0
1028 -7373 7376 0
1028 -7372 7375 0
c ((aux1839 + aux1841 - aux1844)<=0)
7369 -7380 0
7370 -7381 0
7363 -7380 0
7363 7369 -7381 0
7363 7370 -7383 0
7364 -7381 0
7364 7369 -7383 0
7364 7370 -7385 0
c (0<=(aux1839 + aux1841 - aux1844))
-7370 7385 0
-7369 7383 0
-7364 7385 0
-7364 -7370 7383 0
-7364 -7369 7381 0
-7363 7383 0
-7363 -7370 7381 0
-7363 -7369 7380 0
c ((SATLiteral(1000) - aux1845 + SATLiteral(895))<=0)
-895 -7387 0
-1000 -7387 0
-1000 -895 -7388 0
c (0<=(SATLiteral(1000) - aux1845 + SATLiteral(895)))
895 7388 0
1000 7388 0
1000 895 7387 0
c ((SATLiteral(1015) - aux1846 + SATLiteral(880))<=0)
-880 -7390 0
-1015 -7390 0
-1015 -880 -7391 0
c (0<=(SATLiteral(1015) - aux1846 + SATLiteral(880)))
880 7391 0
1015 7391 0
1015 880 7390 0
c (( - aux1847 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7393 0
-1135 -7393 0
-1135 -865 -7394 0
c (0<=( - aux1847 + SATLiteral(1135) + SATLiteral(865)))
865 7394 0
1135 7394 0
1135 865 7393 0
c (( - aux1848 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7396 0
-1150 -7396 0
-1150 -1165 -7397 0
c (0<=( - aux1848 + SATLiteral(1150) + SATLiteral(1165)))
1165 7397 0
1150 7397 0
1150 1165 7396 0
c ((SATLiteral(1030) + aux1848 - aux1849)<=0)
7396 -7399 0
7397 -7400 0
-1030 -7399 0
-1030 7396 -7400 0
-1030 7397 -7402 0
c (0<=(SATLiteral(1030) + aux1848 - aux1849))
-7397 7402 0
-7396 7400 0
1030 7402 0
1030 -7397 7400 0
1030 -7396 7399 0
c ((aux1845 + aux1847 - aux1850)<=0)
7393 -7404 0
7394 -7405 0
7387 -7404 0
7387 7393 -7405 0
7387 7394 -7407 0
7388 -7405 0
7388 7393 -7407 0
7388 7394 -7409 0
c (0<=(aux1845 + aux1847 - aux1850))
-7394 7409 0
-7393 7407 0
-7388 7409 0
-7388 -7394 7407 0
-7388 -7393 7405 0
-7387 7407 0
-7387 -7394 7405 0
-7387 -7393 7404 0
c ((SATLiteral(1002) - aux1851 + SATLiteral(897))<=0)
-897 -7411 0
-1002 -7411 0
-1002 -897 -7412 0
c (0<=(SATLiteral(1002) - aux1851 + SATLiteral(897)))
897 7412 0
1002 7412 0
1002 897 7411 0
c ((SATLiteral(1017) - aux1852 + SATLiteral(882))<=0)
-882 -7414 0
-1017 -7414 0
-1017 -882 -7415 0
c (0<=(SATLiteral(1017) - aux1852 + SATLiteral(882)))
882 7415 0
1017 7415 0
1017 882 7414 0
c (( - aux1853 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7417 0
-1137 -7417 0
-1137 -867 -7418 0
c (0<=( - aux1853 + SATLiteral(1137) + SATLiteral(867)))
867 7418 0
1137 7418 0
1137 867 7417 0
c (( - aux1854 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7420 0
-1152 -7420 0
-1152 -1167 -7421 0
c (0<=( - aux1854 + SATLiteral(1152) + SATLiteral(1167)))
1167 7421 0
1152 7421 0
1152 1167 7420 0
c ((SATLiteral(1032) + aux1854 - aux1855)<=0)
7420 -7423 0
7421 -7424 0
-1032 -7423 0
-1032 7420 -7424 0
-1032 7421 -7426 0
c (0<=(SATLiteral(1032) + aux1854 - aux1855))
-7421 7426 0
-7420 7424 0
1032 7426 0
1032 -7421 7424 0
1032 -7420 7423 0
c ((aux1851 + aux1853 - aux1856)<=0)
7417 -7428 0
7418 -7429 0
7411 -7428 0
7411 7417 -7429 0
7411 7418 -7431 0
7412 -7429 0
7412 7417 -7431 0
7412 7418 -7433 0
c (0<=(aux1851 + aux1853 - aux1856))
-7418 7433 0
-7417 7431 0
-7412 7433 0
-7412 -7418 7431 0
-7412 -7417 7429 0
-7411 7431 0
-7411 -7418 7429 0
-7411 -7417 7428 0
c ((SATLiteral(1004) - aux1857 + SATLiteral(899))<=0)
-899 -7435 0
-1004 -7435 0
-1004 -899 -7436 0
c (0<=(SATLiteral(1004) - aux1857 + SATLiteral(899)))
899 7436 0
1004 7436 0
1004 899 7435 0
c ((SATLiteral(1019) - aux1858 + SATLiteral(884))<=0)
-884 -7438 0
-1019 -7438 0
-1019 -884 -7439 0
c (0<=(SATLiteral(1019) - aux1858 + SATLiteral(884)))
884 7439 0
1019 7439 0
1019 884 7438 0
c (( - aux1859 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7441 0
-1139 -7441 0
-1139 -869 -7442 0
c (0<=( - aux1859 + SATLiteral(1139) + SATLiteral(869)))
869 7442 0
1139 7442 0
1139 869 7441 0
c (( - aux1860 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7444 0
-1154 -7444 0
-1154 -1169 -7445 0
c (0<=( - aux1860 + SATLiteral(1154) + SATLiteral(1169)))
1169 7445 0
1154 7445 0
1154 1169 7444 0
c ((SATLiteral(1034) + aux1860 - aux1861)<=0)
7444 -7447 0
7445 -7448 0
-1034 -7447 0
-1034 7444 -7448 0
-1034 7445 -7450 0
c (0<=(SATLiteral(1034) + aux1860 - aux1861))
-7445 7450 0
-7444 7448 0
1034 7450 0
1034 -7445 7448 0
1034 -7444 7447 0
c ((aux1857 + aux1859 - aux1862)<=0)
7441 -7452 0
7442 -7453 0
7435 -7452 0
7435 7441 -7453 0
7435 7442 -7455 0
7436 -7453 0
7436 7441 -7455 0
7436 7442 -7457 0
c (0<=(aux1857 + aux1859 - aux1862))
-7442 7457 0
-7441 7455 0
-7436 7457 0
-7436 -7442 7455 0
-7436 -7441 7453 0
-7435 7455 0
-7435 -7442 7453 0
-7435 -7441 7452 0
c ((SATLiteral(1006) - aux1863 + SATLiteral(901))<=0)
-901 -7459 0
-1006 -7459 0
-1006 -901 -7460 0
c (0<=(SATLiteral(1006) - aux1863 + SATLiteral(901)))
901 7460 0
1006 7460 0
1006 901 7459 0
c ((SATLiteral(1021) - aux1864 + SATLiteral(886))<=0)
-886 -7462 0
-1021 -7462 0
-1021 -886 -7463 0
c (0<=(SATLiteral(1021) - aux1864 + SATLiteral(886)))
886 7463 0
1021 7463 0
1021 886 7462 0
c (( - aux1865 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7465 0
-1141 -7465 0
-1141 -871 -7466 0
c (0<=( - aux1865 + SATLiteral(1141) + SATLiteral(871)))
871 7466 0
1141 7466 0
1141 871 7465 0
c (( - aux1866 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7468 0
-1156 -7468 0
-1156 -1171 -7469 0
c (0<=( - aux1866 + SATLiteral(1156) + SATLiteral(1171)))
1171 7469 0
1156 7469 0
1156 1171 7468 0
c ((SATLiteral(1036) + aux1866 - aux1867)<=0)
7468 -7471 0
7469 -7472 0
-1036 -7471 0
-1036 7468 -7472 0
-1036 7469 -7474 0
c (0<=(SATLiteral(1036) + aux1866 - aux1867))
-7469 7474 0
-7468 7472 0
1036 7474 0
1036 -7469 7472 0
1036 -7468 7471 0
c ((aux1863 + aux1865 - aux1868)<=0)
7465 -7476 0
7466 -7477 0
7459 -7476 0
7459 7465 -7477 0
7459 7466 -7479 0
7460 -7477 0
7460 7465 -7479 0
7460 7466 -7481 0
c (0<=(aux1863 + aux1865 - aux1868))
-7466 7481 0
-7465 7479 0
-7460 7481 0
-7460 -7466 7479 0
-7460 -7465 7477 0
-7459 7479 0
-7459 -7466 7477 0
-7459 -7465 7476 0
c ((SATLiteral(-1005) - aux1869 + SATLiteral(-900))<=0)
900 -7483 0
1005 -7483 0
1005 900 -7484 0
c (0<=(SATLiteral(-1005) - aux1869 + SATLiteral(-900)))
-900 7484 0
-1005 7484 0
-1005 -900 7483 0
c ((SATLiteral(-1020) - aux1870 + SATLiteral(-885))<=0)
885 -7486 0
1020 -7486 0
1020 885 -7487 0
c (0<=(SATLiteral(-1020) - aux1870 + SATLiteral(-885)))
-885 7487 0
-1020 7487 0
-1020 -885 7486 0
c (( - aux1871 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7489 0
1140 -7489 0
1140 870 -7490 0
c (0<=( - aux1871 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7490 0
-1140 7490 0
-1140 -870 7489 0
c (( - aux1872 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7492 0
1155 -7492 0
1155 1170 -7493 0
c (0<=( - aux1872 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7493 0
-1155 7493 0
-1155 -1170 7492 0
c ((SATLiteral(-1035) + aux1872 - aux1873)<=0)
7492 -7495 0
7493 -7496 0
1035 -7495 0
1035 7492 -7496 0
1035 7493 -7498 0
c (0<=(SATLiteral(-1035) + aux1872 - aux1873))
-7493 7498 0
-7492 7496 0
-1035 7498 0
-1035 -7493 7496 0
-1035 -7492 7495 0
c ((aux1869 + aux1871 - aux1874)<=0)
7489 -7500 0
7490 -7501 0
7483 -7500 0
7483 7489 -7501 0
7483 7490 -7503 0
7484 -7501 0
7484 7489 -7503 0
7484 7490 -7505 0
c (0<=(aux1869 + aux1871 - aux1874))
-7490 7505 0
-7489 7503 0
-7484 7505 0
-7484 -7490 7503 0
-7484 -7489 7501 0
-7483 7503 0
-7483 -7490 7501 0
-7483 -7489 7500 0
c ((SATLiteral(1037) - aux1875 + SATLiteral(932))<=0)
-932 -7507 0
-1037 -7507 0
-1037 -932 -7508 0
c (0<=(SATLiteral(1037) - aux1875 + SATLiteral(932)))
932 7508 0
1037 7508 0
1037 932 7507 0
c ((SATLiteral(1052) - aux1876 + SATLiteral(917))<=0)
-917 -7510 0
-1052 -7510 0
-1052 -917 -7511 0
c (0<=(SATLiteral(1052) - aux1876 + SATLiteral(917)))
917 7511 0
1052 7511 0
1052 917 7510 0
c (( - aux1877 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7513 0
-1172 -7513 0
-1172 -902 -7514 0
c (0<=( - aux1877 + SATLiteral(1172) + SATLiteral(902)))
902 7514 0
1172 7514 0
1172 902 7513 0
c (( - aux1878 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7516 0
-1187 -7516 0
-1187 -1202 -7517 0
c (0<=( - aux1878 + SATLiteral(1187) + SATLiteral(1202)))
1202 7517 0
1187 7517 0
1187 1202 7516 0
c ((SATLiteral(1067) + aux1878 - aux1879)<=0)
7516 -7519 0
7517 -7520 0
-1067 -7519 0
-1067 7516 -7520 0
-1067 7517 -7522 0
c (0<=(SATLiteral(1067) + aux1878 - aux1879))
-7517 7522 0
-7516 7520 0
1067 7522 0
1067 -7517 7520 0
1067 -7516 7519 0
c ((aux1875 + aux1877 - aux1880)<=0)
7513 -7524 0
7514 -7525 0
7507 -7524 0
7507 7513 -7525 0
7507 7514 -7527 0
7508 -7525 0
7508 7513 -7527 0
7508 7514 -7529 0
c (0<=(aux1875 + aux1877 - aux1880))
-7514 7529 0
-7513 7527 0
-7508 7529 0
-7508 -7514 7527 0
-7508 -7513 7525 0
-7507 7527 0
-7507 -7514 7525 0
-7507 -7513 7524 0
c ((SATLiteral(1039) - aux1881 + SATLiteral(934))<=0)
-934 -7531 0
-1039 -7531 0
-1039 -934 -7532 0
c (0<=(SATLiteral(1039) - aux1881 + SATLiteral(934)))
934 7532 0
1039 7532 0
1039 934 7531 0
c ((SATLiteral(1054) - aux1882 + SATLiteral(919))<=0)
-919 -7534 0
-1054 -7534 0
-1054 -919 -7535 0
c (0<=(SATLiteral(1054) - aux1882 + SATLiteral(919)))
919 7535 0
1054 7535 0
1054 919 7534 0
c (( - aux1883 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7537 0
-1174 -7537 0
-1174 -904 -7538 0
c (0<=( - aux1883 + SATLiteral(1174) + SATLiteral(904)))
904 7538 0
1174 7538 0
1174 904 7537 0
c (( - aux1884 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7540 0
-1189 -7540 0
-1189 -1204 -7541 0
c (0<=( - aux1884 + SATLiteral(1189) + SATLiteral(1204)))
1204 7541 0
1189 7541 0
1189 1204 7540 0
c ((SATLiteral(1069) + aux1884 - aux1885)<=0)
7540 -7543 0
7541 -7544 0
-1069 -7543 0
-1069 7540 -7544 0
-1069 7541 -7546 0
c (0<=(SATLiteral(1069) + aux1884 - aux1885))
-7541 7546 0
-7540 7544 0
1069 7546 0
1069 -7541 7544 0
1069 -7540 7543 0
c ((aux1881 + aux1883 - aux1886)<=0)
7537 -7548 0
7538 -7549 0
7531 -7548 0
7531 7537 -7549 0
7531 7538 -7551 0
7532 -7549 0
7532 7537 -7551 0
7532 7538 -7553 0
c (0<=(aux1881 + aux1883 - aux1886))
-7538 7553 0
-7537 7551 0
-7532 7553 0
-7532 -7538 7551 0
-7532 -7537 7549 0
-7531 7551 0
-7531 -7538 7549 0
-7531 -7537 7548 0
c ((SATLiteral(1041) - aux1887 + SATLiteral(936))<=0)
-936 -7555 0
-1041 -7555 0
-1041 -936 -7556 0
c (0<=(SATLiteral(1041) - aux1887 + SATLiteral(936)))
936 7556 0
1041 7556 0
1041 936 7555 0
c ((SATLiteral(1056) - aux1888 + SATLiteral(921))<=0)
-921 -7558 0
-1056 -7558 0
-1056 -921 -7559 0
c (0<=(SATLiteral(1056) - aux1888 + SATLiteral(921)))
921 7559 0
1056 7559 0
1056 921 7558 0
c (( - aux1889 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7561 0
-1176 -7561 0
-1176 -906 -7562 0
c (0<=( - aux1889 + SATLiteral(1176) + SATLiteral(906)))
906 7562 0
1176 7562 0
1176 906 7561 0
c (( - aux1890 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7564 0
-1191 -7564 0
-1191 -1206 -7565 0
c (0<=( - aux1890 + SATLiteral(1191) + SATLiteral(1206)))
1206 7565 0
1191 7565 0
1191 1206 7564 0
c ((SATLiteral(1071) + aux1890 - aux1891)<=0)
7564 -7567 0
7565 -7568 0
-1071 -7567 0
-1071 7564 -7568 0
-1071 7565 -7570 0
c (0<=(SATLiteral(1071) + aux1890 - aux1891))
-7565 7570 0
-7564 7568 0
1071 7570 0
1071 -7565 7568 0
1071 -7564 7567 0
c ((aux1887 + aux1889 - aux1892)<=0)
7561 -7572 0
7562 -7573 0
7555 -7572 0
7555 7561 -7573 0
7555 7562 -7575 0
7556 -7573 0
7556 7561 -7575 0
7556 7562 -7577 0
c (0<=(aux1887 + aux1889 - aux1892))
-7562 7577 0
-7561 7575 0
-7556 7577 0
-7556 -7562 7575 0
-7556 -7561 7573 0
-7555 7575 0
-7555 -7562 7573 0
-7555 -7561 7572 0
c ((SATLiteral(1043) - aux1893 + SATLiteral(938))<=0)
-938 -7579 0
-1043 -7579 0
-1043 -938 -7580 0
c (0<=(SATLiteral(1043) - aux1893 + SATLiteral(938)))
938 7580 0
1043 7580 0
1043 938 7579 0
c ((SATLiteral(1058) - aux1894 + SATLiteral(923))<=0)
-923 -7582 0
-1058 -7582 0
-1058 -923 -7583 0
c (0<=(SATLiteral(1058) - aux1894 + SATLiteral(923)))
923 7583 0
1058 7583 0
1058 923 7582 0
c (( - aux1895 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7585 0
-1178 -7585 0
-1178 -908 -7586 0
c (0<=( - aux1895 + SATLiteral(1178) + SATLiteral(908)))
908 7586 0
1178 7586 0
1178 908 7585 0
c (( - aux1896 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7588 0
-1193 -7588 0
-1193 -1208 -7589 0
c (0<=( - aux1896 + SATLiteral(1193) + SATLiteral(1208)))
1208 7589 0
1193 7589 0
1193 1208 7588 0
c ((SATLiteral(1073) + aux1896 - aux1897)<=0)
7588 -7591 0
7589 -7592 0
-1073 -7591 0
-1073 7588 -7592 0
-1073 7589 -7594 0
c (0<=(SATLiteral(1073) + aux1896 - aux1897))
-7589 7594 0
-7588 7592 0
1073 7594 0
1073 -7589 7592 0
1073 -7588 7591 0
c ((aux1893 + aux1895 - aux1898)<=0)
7585 -7596 0
7586 -7597 0
7579 -7596 0
7579 7585 -7597 0
7579 7586 -7599 0
7580 -7597 0
7580 7585 -7599 0
7580 7586 -7601 0
c (0<=(aux1893 + aux1895 - aux1898))
-7586 7601 0
-7585 7599 0
-7580 7601 0
-7580 -7586 7599 0
-7580 -7585 7597 0
-7579 7599 0
-7579 -7586 7597 0
-7579 -7585 7596 0
c ((SATLiteral(1045) - aux1899 + SATLiteral(940))<=0)
-940 -7603 0
-1045 -7603 0
-1045 -940 -7604 0
c (0<=(SATLiteral(1045) - aux1899 + SATLiteral(940)))
940 7604 0
1045 7604 0
1045 940 7603 0
c ((SATLiteral(1060) - aux1900 + SATLiteral(925))<=0)
-925 -7606 0
-1060 -7606 0
-1060 -925 -7607 0
c (0<=(SATLiteral(1060) - aux1900 + SATLiteral(925)))
925 7607 0
1060 7607 0
1060 925 7606 0
c (( - aux1901 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7609 0
-1180 -7609 0
-1180 -910 -7610 0
c (0<=( - aux1901 + SATLiteral(1180) + SATLiteral(910)))
910 7610 0
1180 7610 0
1180 910 7609 0
c (( - aux1902 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7612 0
-1195 -7612 0
-1195 -1210 -7613 0
c (0<=( - aux1902 + SATLiteral(1195) + SATLiteral(1210)))
1210 7613 0
1195 7613 0
1195 1210 7612 0
c ((SATLiteral(1075) + aux1902 - aux1903)<=0)
7612 -7615 0
7613 -7616 0
-1075 -7615 0
-1075 7612 -7616 0
-1075 7613 -7618 0
c (0<=(SATLiteral(1075) + aux1902 - aux1903))
-7613 7618 0
-7612 7616 0
1075 7618 0
1075 -7613 7616 0
1075 -7612 7615 0
c ((aux1899 + aux1901 - aux1904)<=0)
7609 -7620 0
7610 -7621 0
7603 -7620 0
7603 7609 -7621 0
7603 7610 -7623 0
7604 -7621 0
7604 7609 -7623 0
7604 7610 -7625 0
c (0<=(aux1899 + aux1901 - aux1904))
-7610 7625 0
-7609 7623 0
-7604 7625 0
-7604 -7610 7623 0
-7604 -7609 7621 0
-7603 7623 0
-7603 -7610 7621 0
-7603 -7609 7620 0
c ((SATLiteral(1047) - aux1905 + SATLiteral(942))<=0)
-942 -7627 0
-1047 -7627 0
-1047 -942 -7628 0
c (0<=(SATLiteral(1047) - aux1905 + SATLiteral(942)))
942 7628 0
1047 7628 0
1047 942 7627 0
c ((SATLiteral(1062) - aux1906 + SATLiteral(927))<=0)
-927 -7630 0
-1062 -7630 0
-1062 -927 -7631 0
c (0<=(SATLiteral(1062) - aux1906 + SATLiteral(927)))
927 7631 0
1062 7631 0
1062 927 7630 0
c (( - aux1907 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7633 0
-1182 -7633 0
-1182 -912 -7634 0
c (0<=( - aux1907 + SATLiteral(1182) + SATLiteral(912)))
912 7634 0
1182 7634 0
1182 912 7633 0
c (( - aux1908 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7636 0
-1197 -7636 0
-1197 -1212 -7637 0
c (0<=( - aux1908 + SATLiteral(1197) + SATLiteral(1212)))
1212 7637 0
1197 7637 0
1197 1212 7636 0
c ((SATLiteral(1077) + aux1908 - aux1909)<=0)
7636 -7639 0
7637 -7640 0
-1077 -7639 0
-1077 7636 -7640 0
-1077 7637 -7642 0
c (0<=(SATLiteral(1077) + aux1908 - aux1909))
-7637 7642 0
-7636 7640 0
1077 7642 0
1077 -7637 7640 0
1077 -7636 7639 0
c ((aux1905 + aux1907 - aux1910)<=0)
7633 -7644 0
7634 -7645 0
7627 -7644 0
7627 7633 -7645 0
7627 7634 -7647 0
7628 -7645 0
7628 7633 -7647 0
7628 7634 -7649 0
c (0<=(aux1905 + aux1907 - aux1910))
-7634 7649 0
-7633 7647 0
-7628 7649 0
-7628 -7634 7647 0
-7628 -7633 7645 0
-7627 7647 0
-7627 -7634 7645 0
-7627 -7633 7644 0
c ((SATLiteral(1049) - aux1911 + SATLiteral(944))<=0)
-944 -7651 0
-1049 -7651 0
-1049 -944 -7652 0
c (0<=(SATLiteral(1049) - aux1911 + SATLiteral(944)))
944 7652 0
1049 7652 0
1049 944 7651 0
c ((SATLiteral(1064) - aux1912 + SATLiteral(929))<=0)
-929 -7654 0
-1064 -7654 0
-1064 -929 -7655 0
c (0<=(SATLiteral(1064) - aux1912 + SATLiteral(929)))
929 7655 0
1064 7655 0
1064 929 7654 0
c (( - aux1913 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7657 0
-1184 -7657 0
-1184 -914 -7658 0
c (0<=( - aux1913 + SATLiteral(1184) + SATLiteral(914)))
914 7658 0
1184 7658 0
1184 914 7657 0
c (( - aux1914 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7660 0
-1199 -7660 0
-1199 -1214 -7661 0
c (0<=( - aux1914 + SATLiteral(1199) + SATLiteral(1214)))
1214 7661 0
1199 7661 0
1199 1214 7660 0
c ((SATLiteral(1079) + aux1914 - aux1915)<=0)
7660 -7663 0
7661 -7664 0
-1079 -7663 0
-1079 7660 -7664 0
-1079 7661 -7666 0
c (0<=(SATLiteral(1079) + aux1914 - aux1915))
-7661 7666 0
-7660 7664 0
1079 7666 0
1079 -7661 7664 0
1079 -7660 7663 0
c ((aux1911 + aux1913 - aux1916)<=0)
7657 -7668 0
7658 -7669 0
7651 -7668 0
7651 7657 -7669 0
7651 7658 -7671 0
7652 -7669 0
7652 7657 -7671 0
7652 7658 -7673 0
c (0<=(aux1911 + aux1913 - aux1916))
-7658 7673 0
-7657 7671 0
-7652 7673 0
-7652 -7658 7671 0
-7652 -7657 7669 0
-7651 7671 0
-7651 -7658 7669 0
-7651 -7657 7668 0
c ((SATLiteral(1051) - aux1917 + SATLiteral(946))<=0)
-946 -7675 0
-1051 -7675 0
-1051 -946 -7676 0
c (0<=(SATLiteral(1051) - aux1917 + SATLiteral(946)))
946 7676 0
1051 7676 0
1051 946 7675 0
c ((SATLiteral(1066) - aux1918 + SATLiteral(931))<=0)
-931 -7678 0
-1066 -7678 0
-1066 -931 -7679 0
c (0<=(SATLiteral(1066) - aux1918 + SATLiteral(931)))
931 7679 0
1066 7679 0
1066 931 7678 0
c (( - aux1919 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7681 0
-1186 -7681 0
-1186 -916 -7682 0
c (0<=( - aux1919 + SATLiteral(1186) + SATLiteral(916)))
916 7682 0
1186 7682 0
1186 916 7681 0
c (( - aux1920 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7684 0
-1201 -7684 0
-1201 -1216 -7685 0
c (0<=( - aux1920 + SATLiteral(1201) + SATLiteral(1216)))
1216 7685 0
1201 7685 0
1201 1216 7684 0
c ((SATLiteral(1081) + aux1920 - aux1921)<=0)
7684 -7687 0
7685 -7688 0
-1081 -7687 0
-1081 7684 -7688 0
-1081 7685 -7690 0
c (0<=(SATLiteral(1081) + aux1920 - aux1921))
-7685 7690 0
-7684 7688 0
1081 7690 0
1081 -7685 7688 0
1081 -7684 7687 0
c ((aux1917 + aux1919 - aux1922)<=0)
7681 -7692 0
7682 -7693 0
7675 -7692 0
7675 7681 -7693 0
7675 7682 -7695 0
7676 -7693 0
7676 7681 -7695 0
7676 7682 -7697 0
c (0<=(aux1917 + aux1919 - aux1922))
-7682 7697 0
-7681 7695 0
-7676 7697 0
-7676 -7682 7695 0
-7676 -7681 7693 0
-7675 7695 0
-7675 -7682 7693 0
-7675 -7681 7692 0
c ((SATLiteral(-1050) - aux1923 + SATLiteral(-945))<=0)
945 -7699 0
1050 -7699 0
1050 945 -7700 0
c (0<=(SATLiteral(-1050) - aux1923 + SATLiteral(-945)))
-945 7700 0
-1050 7700 0
-1050 -945 7699 0
c ((SATLiteral(-1065) - aux1924 + SATLiteral(-930))<=0)
930 -7702 0
1065 -7702 0
1065 930 -7703 0
c (0<=(SATLiteral(-1065) - aux1924 + SATLiteral(-930)))
-930 7703 0
-1065 7703 0
-1065 -930 7702 0
c (( - aux1925 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7705 0
1185 -7705 0
1185 915 -7706 0
c (0<=( - aux1925 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7706 0
-1185 7706 0
-1185 -915 7705 0
c (( - aux1926 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7708 0
1200 -7708 0
1200 1215 -7709 0
c (0<=( - aux1926 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7709 0
-1200 7709 0
-1200 -1215 7708 0
c ((SATLiteral(-1080) + aux1926 - aux1927)<=0)
7708 -7711 0
7709 -7712 0
1080 -7711 0
1080 7708 -7712 0
1080 7709 -7714 0
c (0<=(SATLiteral(-1080) + aux1926 - aux1927))
-7709 7714 0
-7708 7712 0
-1080 7714 0
-1080 -7709 7712 0
-1080 -7708 7711 0
c ((aux1923 + aux1925 - aux1928)<=0)
7705 -7716 0
7706 -7717 0
7699 -7716 0
7699 7705 -7717 0
7699 7706 -7719 0
7700 -7717 0
7700 7705 -7719 0
7700 7706 -7721 0
c (0<=(aux1923 + aux1925 - aux1928))
-7706 7721 0
-7705 7719 0
-7700 7721 0
-7700 -7706 7719 0
-7700 -7705 7717 0
-7699 7719 0
-7699 -7706 7717 0
-7699 -7705 7716 0
