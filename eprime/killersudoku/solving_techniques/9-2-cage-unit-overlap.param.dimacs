p cnf 8300 39816                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' direct represents '2' with '288'
c Var 'x_00003_00002' direct represents '3' with '289'
c Var 'x_00003_00002' direct represents '4' with '290'
c Var 'x_00003_00002' direct represents '5' with '291'
c Var 'x_00003_00002' direct represents '6' with '292'
c Var 'x_00003_00002' direct represents '7' with '293'
c Var 'x_00003_00002' direct represents '8' with '294'
c Var 'x_00003_00002' direct represents '9' with '295'
287 288 289 290 291 292 293 294 295 0
-287 296 0
-287 299 0
-288 297 0
-288 299 0
-289 298 0
-289 299 0
-290 296 0
-290 300 0
-291 297 0
-291 300 0
-292 298 0
-292 300 0
-293 296 0
-293 301 0
-294 297 0
-294 301 0
-295 298 0
-295 301 0
-296 -297 0
-296 -298 0
-297 -298 0
-299 -300 0
-299 -301 0
-300 -301 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' direct represents '2' with '318'
c Var 'x_00003_00004' direct represents '3' with '319'
c Var 'x_00003_00004' direct represents '4' with '320'
c Var 'x_00003_00004' direct represents '5' with '321'
c Var 'x_00003_00004' direct represents '6' with '322'
c Var 'x_00003_00004' direct represents '7' with '323'
c Var 'x_00003_00004' direct represents '8' with '324'
c Var 'x_00003_00004' direct represents '9' with '325'
317 318 319 320 321 322 323 324 325 0
-317 326 0
-317 329 0
-318 327 0
-318 329 0
-319 328 0
-319 329 0
-320 326 0
-320 330 0
-321 327 0
-321 330 0
-322 328 0
-322 330 0
-323 326 0
-323 331 0
-324 327 0
-324 331 0
-325 328 0
-325 331 0
-326 -327 0
-326 -328 0
-327 -328 0
-329 -330 0
-329 -331 0
-330 -331 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
1251 -1251 0
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
1253 -1253 0
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
c Encoding variable: alldiff_hint_00030 with domain: bool (representing constraint )
c Var 'alldiff_hint_00030' direct represents '0' with '-1273'
c Var 'alldiff_hint_00030' direct represents '1' with '1273'
c Var 'alldiff_hint_00030' order represents '1' with '1'
c Var 'alldiff_hint_00030' order represents '0' with '-1273'
c Encoding variable: alldiff_hint_00031 with domain: bool (representing constraint )
c Var 'alldiff_hint_00031' direct represents '0' with '-1274'
c Var 'alldiff_hint_00031' direct represents '1' with '1274'
c Var 'alldiff_hint_00031' order represents '1' with '1'
c Var 'alldiff_hint_00031' order represents '0' with '-1274'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1275'
c Var 'sum_hint_00001' direct represents '1' with '1275'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1275'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1276'
c Var 'sum_hint_00002' direct represents '1' with '1276'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1276'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1277'
c Var 'sum_hint_00003' direct represents '1' with '1277'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1277'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1278'
c Var 'sum_hint_00004' direct represents '1' with '1278'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1278'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1279'
c Var 'sum_hint_00005' direct represents '1' with '1279'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1279'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1280'
c Var 'sum_hint_00006' direct represents '1' with '1280'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1280'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1281'
c Var 'sum_hint_00007' direct represents '1' with '1281'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1281'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1282'
c Var 'sum_hint_00008' direct represents '1' with '1282'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1282'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1283'
c Var 'sum_hint_00009' direct represents '1' with '1283'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1283'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1284'
c Var 'sum_hint_00010' direct represents '1' with '1284'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1284'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1285'
c Var 'sum_hint_00011' direct represents '1' with '1285'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1285'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1286'
c Var 'sum_hint_00012' direct represents '1' with '1286'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1286'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1287'
c Var 'sum_hint_00013' direct represents '1' with '1287'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1287'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1288'
c Var 'sum_hint_00014' direct represents '1' with '1288'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1288'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1289'
c Var 'sum_hint_00015' direct represents '1' with '1289'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1289'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1290'
c Var 'sum_hint_00016' direct represents '1' with '1290'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1290'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1291'
c Var 'sum_hint_00017' direct represents '1' with '1291'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1291'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1292'
c Var 'sum_hint_00018' direct represents '1' with '1292'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1292'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1293'
c Var 'sum_hint_00019' direct represents '1' with '1293'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1293'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1294'
c Var 'sum_hint_00020' direct represents '1' with '1294'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1294'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1295'
c Var 'sum_hint_00021' direct represents '1' with '1295'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1295'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1296'
c Var 'sum_hint_00022' direct represents '1' with '1296'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1296'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1297'
c Var 'sum_hint_00023' direct represents '1' with '1297'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1297'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1298'
c Var 'sum_hint_00024' direct represents '1' with '1298'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1298'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1299'
c Var 'sum_hint_00025' direct represents '1' with '1299'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1299'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1300'
c Var 'sum_hint_00026' direct represents '1' with '1300'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1300'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1301'
c Var 'sum_hint_00027' direct represents '1' with '1301'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1301'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1302'
c Var 'sum_hint_00028' direct represents '1' with '1302'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1302'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1303'
c Var 'sum_hint_00029' direct represents '1' with '1303'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1303'
c Encoding variable: sum_hint_00030 with domain: bool (representing constraint )
c Var 'sum_hint_00030' direct represents '0' with '-1304'
c Var 'sum_hint_00030' direct represents '1' with '1304'
c Var 'sum_hint_00030' order represents '1' with '1'
c Var 'sum_hint_00030' order represents '0' with '-1304'
c Encoding variable: sum_hint_00031 with domain: bool (representing constraint )
c Var 'sum_hint_00031' direct represents '0' with '-1305'
c Var 'sum_hint_00031' direct represents '1' with '1305'
c Var 'sum_hint_00031' order represents '1' with '1'
c Var 'sum_hint_00031' order represents '0' with '-1305'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00002_00001 + x_00003_00001 + x_00001_00001)=tv=13))
c Var 'aux0' direct represents '0' with '-1306'
c Var 'aux0' direct represents '1' with '1306'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1306'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00001_00002 + x_00001_00003)=tv=9))
c Var 'aux1' direct represents '0' with '-1307'
c Var 'aux1' direct represents '1' with '1307'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1307'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00001_00004 + x_00001_00005 + x_00001_00006)=tv=15))
c Var 'aux2' direct represents '0' with '-1308'
c Var 'aux2' direct represents '1' with '1308'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1308'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00006 + x_00002_00007 + x_00001_00007)=tv=13))
c Var 'aux3' direct represents '0' with '-1309'
c Var 'aux3' direct represents '1' with '1309'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1309'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00008 + x_00002_00009 + x_00001_00008 + x_00001_00009)=tv=25))
c Var 'aux4' direct represents '0' with '-1310'
c Var 'aux4' direct represents '1' with '1310'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1310'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003)=tv=13))
c Var 'aux5' direct represents '0' with '-1311'
c Var 'aux5' direct represents '1' with '1311'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1311'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00004 + x_00002_00005)=tv=8))
c Var 'aux6' direct represents '0' with '-1312'
c Var 'aux6' direct represents '1' with '1312'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1312'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00003_00003 + x_00004_00003 + x_00005_00003)=tv=17))
c Var 'aux7' direct represents '0' with '-1313'
c Var 'aux7' direct represents '1' with '1313'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1313'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)=tv=11))
c Var 'aux8' direct represents '0' with '-1314'
c Var 'aux8' direct represents '1' with '1314'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1314'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008)=tv=9))
c Var 'aux9' direct represents '0' with '-1315'
c Var 'aux9' direct represents '1' with '1315'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1315'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00003_00009 + x_00004_00009)=tv=10))
c Var 'aux10' direct represents '0' with '-1316'
c Var 'aux10' direct represents '1' with '1316'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1316'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00005_00001)=tv=17))
c Var 'aux11' direct represents '0' with '-1317'
c Var 'aux11' direct represents '1' with '1317'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1317'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00004 + x_00004_00005 + x_00005_00004 + x_00005_00005)=tv=28))
c Var 'aux12' direct represents '0' with '-1318'
c Var 'aux12' direct represents '1' with '1318'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1318'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00006 + x_00004_00007 + x_00005_00006 + x_00005_00007)=tv=16))
c Var 'aux13' direct represents '0' with '-1319'
c Var 'aux13' direct represents '1' with '1319'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1319'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008 + x_00005_00009)=tv=10))
c Var 'aux14' direct represents '0' with '-1320'
c Var 'aux14' direct represents '1' with '1320'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1320'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002 + x_00006_00003)=tv=13))
c Var 'aux15' direct represents '0' with '-1321'
c Var 'aux15' direct represents '1' with '1321'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1321'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00006_00001)=tv=24))
c Var 'aux16' direct represents '0' with '-1322'
c Var 'aux16' direct represents '1' with '1322'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1322'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00006_00004 + x_00006_00005 + x_00006_00006)=tv=10))
c Var 'aux17' direct represents '0' with '-1323'
c Var 'aux17' direct represents '1' with '1323'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1323'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00007_00007 + x_00006_00007 + x_00006_00008)=tv=23))
c Var 'aux18' direct represents '0' with '-1324'
c Var 'aux18' direct represents '1' with '1324'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1324'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009 + x_00006_00009)=tv=17))
c Var 'aux19' direct represents '0' with '-1325'
c Var 'aux19' direct represents '1' with '1325'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1325'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00003 + x_00007_00004)=tv=5))
c Var 'aux20' direct represents '0' with '-1326'
c Var 'aux20' direct represents '1' with '1326'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1326'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00005 + x_00007_00006)=tv=6))
c Var 'aux21' direct represents '0' with '-1327'
c Var 'aux21' direct represents '1' with '1327'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1327'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00009_00001)=tv=13))
c Var 'aux22' direct represents '0' with '-1328'
c Var 'aux22' direct represents '1' with '1328'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1328'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004 + x_00009_00004)=tv=23))
c Var 'aux23' direct represents '0' with '-1329'
c Var 'aux23' direct represents '1' with '1329'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1329'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00005 + x_00009_00005)=tv=10))
c Var 'aux24' direct represents '0' with '-1330'
c Var 'aux24' direct represents '1' with '1330'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1330'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00006 + x_00009_00006 + x_00009_00007)=tv=18))
c Var 'aux25' direct represents '0' with '-1331'
c Var 'aux25' direct represents '1' with '1331'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1331'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008 + x_00009_00008)=tv=10))
c Var 'aux26' direct represents '0' with '-1332'
c Var 'aux26' direct represents '1' with '1332'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1332'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00009)=tv=9))
c Var 'aux27' direct represents '0' with '-1333'
c Var 'aux27' direct represents '1' with '1333'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1333'
c Encoding variable: aux28 with domain: bool (representing constraint ((x_00009_00002 + x_00009_00003)=tv=7))
c Var 'aux28' direct represents '0' with '-1334'
c Var 'aux28' direct represents '1' with '1334'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1334'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00001_00002 != x_00001_00003))
c Var 'aux29' direct represents '0' with '-1335'
c Var 'aux29' direct represents '1' with '1335'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1335'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00002_00002 != x_00002_00003))
c Var 'aux30' direct represents '0' with '-1336'
c Var 'aux30' direct represents '1' with '1336'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1336'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00002_00004 != x_00002_00005))
c Var 'aux31' direct represents '0' with '-1337'
c Var 'aux31' direct represents '1' with '1337'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1337'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00003_00005 != x_00003_00006))
c Var 'aux32' direct represents '0' with '-1338'
c Var 'aux32' direct represents '1' with '1338'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1338'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00003_00007 != x_00003_00008))
c Var 'aux33' direct represents '0' with '-1339'
c Var 'aux33' direct represents '1' with '1339'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1339'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00003_00009 != x_00004_00009))
c Var 'aux34' direct represents '0' with '-1340'
c Var 'aux34' direct represents '1' with '1340'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1340'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00007_00003 != x_00007_00004))
c Var 'aux35' direct represents '0' with '-1341'
c Var 'aux35' direct represents '1' with '1341'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1341'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00007_00005 != x_00007_00006))
c Var 'aux36' direct represents '0' with '-1342'
c Var 'aux36' direct represents '1' with '1342'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1342'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00008_00005 != x_00009_00005))
c Var 'aux37' direct represents '0' with '-1343'
c Var 'aux37' direct represents '1' with '1343'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1343'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00008_00009 != x_00009_00009))
c Var 'aux38' direct represents '0' with '-1344'
c Var 'aux38' direct represents '1' with '1344'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1344'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00009_00002 != x_00009_00003))
c Var 'aux39' direct represents '0' with '-1345'
c Var 'aux39' direct represents '1' with '1345'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1345'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux40' direct represents '0' with '-1346'
c Var 'aux40' direct represents '1' with '1346'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1346'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux41' direct represents '0' with '-1347'
c Var 'aux41' direct represents '1' with '1347'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1347'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux42' direct represents '0' with '-1348'
c Var 'aux42' direct represents '1' with '1348'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1348'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux43' direct represents '0' with '-1349'
c Var 'aux43' direct represents '1' with '1349'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1349'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux44' direct represents '0' with '-1350'
c Var 'aux44' direct represents '1' with '1350'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1350'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux45' direct represents '0' with '-1351'
c Var 'aux45' direct represents '1' with '1351'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1351'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux46' direct represents '0' with '-1352'
c Var 'aux46' direct represents '1' with '1352'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1352'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux47' direct represents '0' with '-1353'
c Var 'aux47' direct represents '1' with '1353'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1353'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux48' direct represents '0' with '-1354'
c Var 'aux48' direct represents '1' with '1354'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1354'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux49' direct represents '0' with '-1355'
c Var 'aux49' direct represents '1' with '1355'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1355'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux50' direct represents '0' with '-1356'
c Var 'aux50' direct represents '1' with '1356'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1356'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux51' direct represents '0' with '-1357'
c Var 'aux51' direct represents '1' with '1357'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1357'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux52' direct represents '0' with '-1358'
c Var 'aux52' direct represents '1' with '1358'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1358'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux53' direct represents '0' with '-1359'
c Var 'aux53' direct represents '1' with '1359'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1359'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux54' direct represents '0' with '-1360'
c Var 'aux54' direct represents '1' with '1360'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1360'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux55' direct represents '0' with '-1361'
c Var 'aux55' direct represents '1' with '1361'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1361'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux56' direct represents '0' with '-1362'
c Var 'aux56' direct represents '1' with '1362'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1362'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux57' direct represents '0' with '-1363'
c Var 'aux57' direct represents '1' with '1363'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1363'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux58' direct represents '0' with '-1364'
c Var 'aux58' direct represents '1' with '1364'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1364'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux59' direct represents '0' with '-1365'
c Var 'aux59' direct represents '1' with '1365'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1365'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux60' direct represents '0' with '-1366'
c Var 'aux60' direct represents '1' with '1366'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1366'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux61' direct represents '0' with '-1367'
c Var 'aux61' direct represents '1' with '1367'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1367'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux62' direct represents '0' with '-1368'
c Var 'aux62' direct represents '1' with '1368'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1368'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux63' direct represents '0' with '-1369'
c Var 'aux63' direct represents '1' with '1369'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1369'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux64' direct represents '0' with '-1370'
c Var 'aux64' direct represents '1' with '1370'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1370'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux65' direct represents '0' with '-1371'
c Var 'aux65' direct represents '1' with '1371'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1371'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux66' direct represents '0' with '-1372'
c Var 'aux66' direct represents '1' with '1372'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1372'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux67' direct represents '0' with '-1373'
c Var 'aux67' direct represents '1' with '1373'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1373'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux68' direct represents '0' with '-1374'
c Var 'aux68' direct represents '1' with '1374'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1374'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux69' direct represents '0' with '-1375'
c Var 'aux69' direct represents '1' with '1375'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1375'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux70' direct represents '0' with '-1376'
c Var 'aux70' direct represents '1' with '1376'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1376'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux71' direct represents '0' with '-1377'
c Var 'aux71' direct represents '1' with '1377'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1377'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux72' direct represents '0' with '-1378'
c Var 'aux72' direct represents '1' with '1378'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1378'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux73' direct represents '0' with '-1379'
c Var 'aux73' direct represents '1' with '1379'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1379'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux74' direct represents '0' with '-1380'
c Var 'aux74' direct represents '1' with '1380'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1380'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux75' direct represents '0' with '-1381'
c Var 'aux75' direct represents '1' with '1381'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1381'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux76' direct represents '0' with '-1382'
c Var 'aux76' direct represents '1' with '1382'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1382'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux77' direct represents '0' with '-1383'
c Var 'aux77' direct represents '1' with '1383'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1383'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux78' direct represents '0' with '-1384'
c Var 'aux78' direct represents '1' with '1384'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1384'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux79' direct represents '0' with '-1385'
c Var 'aux79' direct represents '1' with '1385'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1385'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux80' direct represents '0' with '-1386'
c Var 'aux80' direct represents '1' with '1386'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1386'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux81' direct represents '0' with '-1387'
c Var 'aux81' direct represents '1' with '1387'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1387'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux82' direct represents '0' with '-1388'
c Var 'aux82' direct represents '1' with '1388'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1388'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux83' direct represents '0' with '-1389'
c Var 'aux83' direct represents '1' with '1389'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1389'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux84' direct represents '0' with '-1390'
c Var 'aux84' direct represents '1' with '1390'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1390'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux85' direct represents '0' with '-1391'
c Var 'aux85' direct represents '1' with '1391'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1391'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux86' direct represents '0' with '-1392'
c Var 'aux86' direct represents '1' with '1392'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1392'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux87' direct represents '0' with '-1393'
c Var 'aux87' direct represents '1' with '1393'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1393'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux88' direct represents '0' with '-1394'
c Var 'aux88' direct represents '1' with '1394'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1394'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux89' direct represents '0' with '-1395'
c Var 'aux89' direct represents '1' with '1395'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1395'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux90' direct represents '0' with '-1396'
c Var 'aux90' direct represents '1' with '1396'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1396'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux91' direct represents '0' with '-1397'
c Var 'aux91' direct represents '1' with '1397'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1397'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux92' direct represents '0' with '-1398'
c Var 'aux92' direct represents '1' with '1398'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1398'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux93' direct represents '0' with '-1399'
c Var 'aux93' direct represents '1' with '1399'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1399'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux94' direct represents '0' with '-1400'
c Var 'aux94' direct represents '1' with '1400'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1400'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux95' direct represents '0' with '-1401'
c Var 'aux95' direct represents '1' with '1401'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1401'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux96' direct represents '0' with '-1402'
c Var 'aux96' direct represents '1' with '1402'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1402'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux97' direct represents '0' with '-1403'
c Var 'aux97' direct represents '1' with '1403'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1403'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux98' direct represents '0' with '-1404'
c Var 'aux98' direct represents '1' with '1404'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1404'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux99' direct represents '0' with '-1405'
c Var 'aux99' direct represents '1' with '1405'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1405'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux100' direct represents '0' with '-1406'
c Var 'aux100' direct represents '1' with '1406'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1406'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux101' direct represents '0' with '-1407'
c Var 'aux101' direct represents '1' with '1407'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1407'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux102' direct represents '0' with '-1408'
c Var 'aux102' direct represents '1' with '1408'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1408'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux103' direct represents '0' with '-1409'
c Var 'aux103' direct represents '1' with '1409'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1409'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux104' direct represents '0' with '-1410'
c Var 'aux104' direct represents '1' with '1410'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1410'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux105' direct represents '0' with '-1411'
c Var 'aux105' direct represents '1' with '1411'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1411'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux106' direct represents '0' with '-1412'
c Var 'aux106' direct represents '1' with '1412'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1412'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux107' direct represents '0' with '-1413'
c Var 'aux107' direct represents '1' with '1413'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1413'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux108' direct represents '0' with '-1414'
c Var 'aux108' direct represents '1' with '1414'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1414'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux109' direct represents '0' with '-1415'
c Var 'aux109' direct represents '1' with '1415'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1415'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux110' direct represents '0' with '-1416'
c Var 'aux110' direct represents '1' with '1416'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1416'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux111' direct represents '0' with '-1417'
c Var 'aux111' direct represents '1' with '1417'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1417'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux112' direct represents '0' with '-1418'
c Var 'aux112' direct represents '1' with '1418'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1418'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux113' direct represents '0' with '-1419'
c Var 'aux113' direct represents '1' with '1419'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1419'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux114' direct represents '0' with '-1420'
c Var 'aux114' direct represents '1' with '1420'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1420'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux115' direct represents '0' with '-1421'
c Var 'aux115' direct represents '1' with '1421'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1421'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux116' direct represents '0' with '-1422'
c Var 'aux116' direct represents '1' with '1422'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1422'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux117' direct represents '0' with '-1423'
c Var 'aux117' direct represents '1' with '1423'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1423'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux118' direct represents '0' with '-1424'
c Var 'aux118' direct represents '1' with '1424'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1424'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux119' direct represents '0' with '-1425'
c Var 'aux119' direct represents '1' with '1425'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1425'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux120' direct represents '0' with '-1426'
c Var 'aux120' direct represents '1' with '1426'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1426'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux121' direct represents '0' with '-1427'
c Var 'aux121' direct represents '1' with '1427'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1427'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux122' direct represents '0' with '-1428'
c Var 'aux122' direct represents '1' with '1428'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1428'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux123' direct represents '0' with '-1429'
c Var 'aux123' direct represents '1' with '1429'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1429'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux124' direct represents '0' with '-1430'
c Var 'aux124' direct represents '1' with '1430'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1430'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux125' direct represents '0' with '-1431'
c Var 'aux125' direct represents '1' with '1431'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1431'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux126' direct represents '0' with '-1432'
c Var 'aux126' direct represents '1' with '1432'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1432'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux127' direct represents '0' with '-1433'
c Var 'aux127' direct represents '1' with '1433'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1433'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux128' direct represents '0' with '-1434'
c Var 'aux128' direct represents '1' with '1434'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1434'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux129' direct represents '0' with '-1435'
c Var 'aux129' direct represents '1' with '1435'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1435'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux130' direct represents '0' with '-1436'
c Var 'aux130' direct represents '1' with '1436'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1436'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux131' direct represents '0' with '-1437'
c Var 'aux131' direct represents '1' with '1437'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1437'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux132' direct represents '0' with '-1438'
c Var 'aux132' direct represents '1' with '1438'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1438'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux133' direct represents '0' with '-1439'
c Var 'aux133' direct represents '1' with '1439'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1439'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux134' direct represents '0' with '-1440'
c Var 'aux134' direct represents '1' with '1440'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1440'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux135' direct represents '0' with '-1441'
c Var 'aux135' direct represents '1' with '1441'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1441'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux136' direct represents '0' with '-1442'
c Var 'aux136' direct represents '1' with '1442'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1442'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux137' direct represents '0' with '-1443'
c Var 'aux137' direct represents '1' with '1443'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1443'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux138' direct represents '0' with '-1444'
c Var 'aux138' direct represents '1' with '1444'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1444'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux139' direct represents '0' with '-1445'
c Var 'aux139' direct represents '1' with '1445'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1445'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux140' direct represents '0' with '-1446'
c Var 'aux140' direct represents '1' with '1446'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1446'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux141' direct represents '0' with '-1447'
c Var 'aux141' direct represents '1' with '1447'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1447'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux142' direct represents '0' with '-1448'
c Var 'aux142' direct represents '1' with '1448'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1448'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux143' direct represents '0' with '-1449'
c Var 'aux143' direct represents '1' with '1449'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1449'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux144' direct represents '0' with '-1450'
c Var 'aux144' direct represents '1' with '1450'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1450'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux145' direct represents '0' with '-1451'
c Var 'aux145' direct represents '1' with '1451'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1451'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux146' direct represents '0' with '-1452'
c Var 'aux146' direct represents '1' with '1452'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1452'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux147' direct represents '0' with '-1453'
c Var 'aux147' direct represents '1' with '1453'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1453'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux148' direct represents '0' with '-1454'
c Var 'aux148' direct represents '1' with '1454'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1454'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux149' direct represents '0' with '-1455'
c Var 'aux149' direct represents '1' with '1455'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1455'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux150' direct represents '0' with '-1456'
c Var 'aux150' direct represents '1' with '1456'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1456'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux151' direct represents '0' with '-1457'
c Var 'aux151' direct represents '1' with '1457'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1457'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux152' direct represents '0' with '-1458'
c Var 'aux152' direct represents '1' with '1458'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1458'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux153' direct represents '0' with '-1459'
c Var 'aux153' direct represents '1' with '1459'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1459'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux154' direct represents '0' with '-1460'
c Var 'aux154' direct represents '1' with '1460'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1460'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux155' direct represents '0' with '-1461'
c Var 'aux155' direct represents '1' with '1461'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1461'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux156' direct represents '0' with '-1462'
c Var 'aux156' direct represents '1' with '1462'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1462'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux157' direct represents '0' with '-1463'
c Var 'aux157' direct represents '1' with '1463'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1463'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux158' direct represents '0' with '-1464'
c Var 'aux158' direct represents '1' with '1464'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1464'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux159' direct represents '0' with '-1465'
c Var 'aux159' direct represents '1' with '1465'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1465'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux160' direct represents '0' with '-1466'
c Var 'aux160' direct represents '1' with '1466'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1466'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux161' direct represents '0' with '-1467'
c Var 'aux161' direct represents '1' with '1467'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1467'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux162' direct represents '0' with '-1468'
c Var 'aux162' direct represents '1' with '1468'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1468'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux163' direct represents '0' with '-1469'
c Var 'aux163' direct represents '1' with '1469'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1469'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux164' direct represents '0' with '-1470'
c Var 'aux164' direct represents '1' with '1470'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1470'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux165' direct represents '0' with '-1471'
c Var 'aux165' direct represents '1' with '1471'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1471'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux166' direct represents '0' with '-1472'
c Var 'aux166' direct represents '1' with '1472'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1472'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux167' direct represents '0' with '-1473'
c Var 'aux167' direct represents '1' with '1473'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1473'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux168' direct represents '0' with '-1474'
c Var 'aux168' direct represents '1' with '1474'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1474'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux169' direct represents '0' with '-1475'
c Var 'aux169' direct represents '1' with '1475'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1475'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux170' direct represents '0' with '-1476'
c Var 'aux170' direct represents '1' with '1476'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1476'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux171' direct represents '0' with '-1477'
c Var 'aux171' direct represents '1' with '1477'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1477'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux172' direct represents '0' with '-1478'
c Var 'aux172' direct represents '1' with '1478'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1478'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux173' direct represents '0' with '-1479'
c Var 'aux173' direct represents '1' with '1479'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1479'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux174' direct represents '0' with '-1480'
c Var 'aux174' direct represents '1' with '1480'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1480'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux175' direct represents '0' with '-1481'
c Var 'aux175' direct represents '1' with '1481'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1481'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux176' direct represents '0' with '-1482'
c Var 'aux176' direct represents '1' with '1482'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1482'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux177' direct represents '0' with '-1483'
c Var 'aux177' direct represents '1' with '1483'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1483'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux178' direct represents '0' with '-1484'
c Var 'aux178' direct represents '1' with '1484'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1484'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux179' direct represents '0' with '-1485'
c Var 'aux179' direct represents '1' with '1485'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1485'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux180' direct represents '0' with '-1486'
c Var 'aux180' direct represents '1' with '1486'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1486'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux181' direct represents '0' with '-1487'
c Var 'aux181' direct represents '1' with '1487'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1487'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux182' direct represents '0' with '-1488'
c Var 'aux182' direct represents '1' with '1488'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1488'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux183' direct represents '0' with '-1489'
c Var 'aux183' direct represents '1' with '1489'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1489'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux184' direct represents '0' with '-1490'
c Var 'aux184' direct represents '1' with '1490'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1490'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux185' direct represents '0' with '-1491'
c Var 'aux185' direct represents '1' with '1491'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1491'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux186' direct represents '0' with '-1492'
c Var 'aux186' direct represents '1' with '1492'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1492'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux187' direct represents '0' with '-1493'
c Var 'aux187' direct represents '1' with '1493'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1493'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux188' direct represents '0' with '-1494'
c Var 'aux188' direct represents '1' with '1494'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1494'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux189' direct represents '0' with '-1495'
c Var 'aux189' direct represents '1' with '1495'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1495'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux190' direct represents '0' with '-1496'
c Var 'aux190' direct represents '1' with '1496'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1496'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux191' direct represents '0' with '-1497'
c Var 'aux191' direct represents '1' with '1497'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1497'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux192' direct represents '0' with '-1498'
c Var 'aux192' direct represents '1' with '1498'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1498'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux193' direct represents '0' with '-1499'
c Var 'aux193' direct represents '1' with '1499'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1499'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux194' direct represents '0' with '-1500'
c Var 'aux194' direct represents '1' with '1500'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1500'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux195' direct represents '0' with '-1501'
c Var 'aux195' direct represents '1' with '1501'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1501'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux196' direct represents '0' with '-1502'
c Var 'aux196' direct represents '1' with '1502'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1502'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux197' direct represents '0' with '-1503'
c Var 'aux197' direct represents '1' with '1503'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1503'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux198' direct represents '0' with '-1504'
c Var 'aux198' direct represents '1' with '1504'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1504'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux199' direct represents '0' with '-1505'
c Var 'aux199' direct represents '1' with '1505'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1505'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux200' direct represents '0' with '-1506'
c Var 'aux200' direct represents '1' with '1506'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1506'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux201' direct represents '0' with '-1507'
c Var 'aux201' direct represents '1' with '1507'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1507'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux202' direct represents '0' with '-1508'
c Var 'aux202' direct represents '1' with '1508'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1508'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux203' direct represents '0' with '-1509'
c Var 'aux203' direct represents '1' with '1509'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1509'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux204' direct represents '0' with '-1510'
c Var 'aux204' direct represents '1' with '1510'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1510'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux205' direct represents '0' with '-1511'
c Var 'aux205' direct represents '1' with '1511'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1511'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux206' direct represents '0' with '-1512'
c Var 'aux206' direct represents '1' with '1512'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1512'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux207' direct represents '0' with '-1513'
c Var 'aux207' direct represents '1' with '1513'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1513'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux208' direct represents '0' with '-1514'
c Var 'aux208' direct represents '1' with '1514'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1514'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux209' direct represents '0' with '-1515'
c Var 'aux209' direct represents '1' with '1515'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1515'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux210' direct represents '0' with '-1516'
c Var 'aux210' direct represents '1' with '1516'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1516'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux211' direct represents '0' with '-1517'
c Var 'aux211' direct represents '1' with '1517'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1517'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux212' direct represents '0' with '-1518'
c Var 'aux212' direct represents '1' with '1518'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1518'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux213' direct represents '0' with '-1519'
c Var 'aux213' direct represents '1' with '1519'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1519'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux214' direct represents '0' with '-1520'
c Var 'aux214' direct represents '1' with '1520'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1520'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux215' direct represents '0' with '-1521'
c Var 'aux215' direct represents '1' with '1521'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1521'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux216' direct represents '0' with '-1522'
c Var 'aux216' direct represents '1' with '1522'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1522'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux217' direct represents '0' with '-1523'
c Var 'aux217' direct represents '1' with '1523'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1523'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux218' direct represents '0' with '-1524'
c Var 'aux218' direct represents '1' with '1524'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1524'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux219' direct represents '0' with '-1525'
c Var 'aux219' direct represents '1' with '1525'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1525'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux220' direct represents '0' with '-1526'
c Var 'aux220' direct represents '1' with '1526'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1526'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux221' direct represents '0' with '-1527'
c Var 'aux221' direct represents '1' with '1527'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1527'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux222' direct represents '0' with '-1528'
c Var 'aux222' direct represents '1' with '1528'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1528'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux223' direct represents '0' with '-1529'
c Var 'aux223' direct represents '1' with '1529'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1529'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux224' direct represents '0' with '-1530'
c Var 'aux224' direct represents '1' with '1530'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1530'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux225' direct represents '0' with '-1531'
c Var 'aux225' direct represents '1' with '1531'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1531'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux226' direct represents '0' with '-1532'
c Var 'aux226' direct represents '1' with '1532'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1532'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux227' direct represents '0' with '-1533'
c Var 'aux227' direct represents '1' with '1533'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1533'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux228' direct represents '0' with '-1534'
c Var 'aux228' direct represents '1' with '1534'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1534'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux229' direct represents '0' with '-1535'
c Var 'aux229' direct represents '1' with '1535'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1535'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux230' direct represents '0' with '-1536'
c Var 'aux230' direct represents '1' with '1536'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1536'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux231' direct represents '0' with '-1537'
c Var 'aux231' direct represents '1' with '1537'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1537'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux232' direct represents '0' with '-1538'
c Var 'aux232' direct represents '1' with '1538'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1538'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux233' direct represents '0' with '-1539'
c Var 'aux233' direct represents '1' with '1539'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1539'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux234' direct represents '0' with '-1540'
c Var 'aux234' direct represents '1' with '1540'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1540'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux235' direct represents '0' with '-1541'
c Var 'aux235' direct represents '1' with '1541'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1541'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux236' direct represents '0' with '-1542'
c Var 'aux236' direct represents '1' with '1542'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1542'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux237' direct represents '0' with '-1543'
c Var 'aux237' direct represents '1' with '1543'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1543'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux238' direct represents '0' with '-1544'
c Var 'aux238' direct represents '1' with '1544'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1544'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux239' direct represents '0' with '-1545'
c Var 'aux239' direct represents '1' with '1545'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1545'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux240' direct represents '0' with '-1546'
c Var 'aux240' direct represents '1' with '1546'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1546'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux241' direct represents '0' with '-1547'
c Var 'aux241' direct represents '1' with '1547'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1547'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux242' direct represents '0' with '-1548'
c Var 'aux242' direct represents '1' with '1548'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1548'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux243' direct represents '0' with '-1549'
c Var 'aux243' direct represents '1' with '1549'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1549'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux244' direct represents '0' with '-1550'
c Var 'aux244' direct represents '1' with '1550'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1550'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux245' direct represents '0' with '-1551'
c Var 'aux245' direct represents '1' with '1551'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1551'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux246' direct represents '0' with '-1552'
c Var 'aux246' direct represents '1' with '1552'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1552'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux247' direct represents '0' with '-1553'
c Var 'aux247' direct represents '1' with '1553'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1553'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux248' direct represents '0' with '-1554'
c Var 'aux248' direct represents '1' with '1554'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1554'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux249' direct represents '0' with '-1555'
c Var 'aux249' direct represents '1' with '1555'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1555'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux250' direct represents '0' with '-1556'
c Var 'aux250' direct represents '1' with '1556'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1556'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux251' direct represents '0' with '-1557'
c Var 'aux251' direct represents '1' with '1557'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1557'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux252' direct represents '0' with '-1558'
c Var 'aux252' direct represents '1' with '1558'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1558'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux253' direct represents '0' with '-1559'
c Var 'aux253' direct represents '1' with '1559'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1559'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux254' direct represents '0' with '-1560'
c Var 'aux254' direct represents '1' with '1560'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1560'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux255' direct represents '0' with '-1561'
c Var 'aux255' direct represents '1' with '1561'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1561'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux256' direct represents '0' with '-1562'
c Var 'aux256' direct represents '1' with '1562'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1562'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux257' direct represents '0' with '-1563'
c Var 'aux257' direct represents '1' with '1563'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1563'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux258' direct represents '0' with '-1564'
c Var 'aux258' direct represents '1' with '1564'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1564'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux259' direct represents '0' with '-1565'
c Var 'aux259' direct represents '1' with '1565'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1565'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux260' direct represents '0' with '-1566'
c Var 'aux260' direct represents '1' with '1566'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1566'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux261' direct represents '0' with '-1567'
c Var 'aux261' direct represents '1' with '1567'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1567'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux262' direct represents '0' with '-1568'
c Var 'aux262' direct represents '1' with '1568'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1568'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux263' direct represents '0' with '-1569'
c Var 'aux263' direct represents '1' with '1569'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1569'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux264' direct represents '0' with '-1570'
c Var 'aux264' direct represents '1' with '1570'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1570'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux265' direct represents '0' with '-1571'
c Var 'aux265' direct represents '1' with '1571'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1571'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux266' direct represents '0' with '-1572'
c Var 'aux266' direct represents '1' with '1572'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1572'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux267' direct represents '0' with '-1573'
c Var 'aux267' direct represents '1' with '1573'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1573'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux268' direct represents '0' with '-1574'
c Var 'aux268' direct represents '1' with '1574'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1574'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux269' direct represents '0' with '-1575'
c Var 'aux269' direct represents '1' with '1575'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1575'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux270' direct represents '0' with '-1576'
c Var 'aux270' direct represents '1' with '1576'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1576'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux271' direct represents '0' with '-1577'
c Var 'aux271' direct represents '1' with '1577'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1577'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux272' direct represents '0' with '-1578'
c Var 'aux272' direct represents '1' with '1578'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1578'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux273' direct represents '0' with '-1579'
c Var 'aux273' direct represents '1' with '1579'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1579'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux274' direct represents '0' with '-1580'
c Var 'aux274' direct represents '1' with '1580'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1580'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux275' direct represents '0' with '-1581'
c Var 'aux275' direct represents '1' with '1581'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1581'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux276' direct represents '0' with '-1582'
c Var 'aux276' direct represents '1' with '1582'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1582'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux277' direct represents '0' with '-1583'
c Var 'aux277' direct represents '1' with '1583'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1583'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux278' direct represents '0' with '-1584'
c Var 'aux278' direct represents '1' with '1584'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1584'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux279' direct represents '0' with '-1585'
c Var 'aux279' direct represents '1' with '1585'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1585'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux280' direct represents '0' with '-1586'
c Var 'aux280' direct represents '1' with '1586'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1586'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux281' direct represents '0' with '-1587'
c Var 'aux281' direct represents '1' with '1587'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1587'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux282' direct represents '0' with '-1588'
c Var 'aux282' direct represents '1' with '1588'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1588'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00001_00001=1) + (x_00002_00001=1))<=1))
c Var 'aux283' direct represents '0' with '-1589'
c Var 'aux283' direct represents '1' with '1589'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1589'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00001_00001=2) + (x_00002_00001=2))<=1))
c Var 'aux284' direct represents '0' with '-1590'
c Var 'aux284' direct represents '1' with '1590'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1590'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00001_00001=3) + (x_00002_00001=3))<=1))
c Var 'aux285' direct represents '0' with '-1591'
c Var 'aux285' direct represents '1' with '1591'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1591'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00001_00001=4) + (x_00002_00001=4))<=1))
c Var 'aux286' direct represents '0' with '-1592'
c Var 'aux286' direct represents '1' with '1592'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1592'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00001_00001=5) + (x_00002_00001=5))<=1))
c Var 'aux287' direct represents '0' with '-1593'
c Var 'aux287' direct represents '1' with '1593'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1593'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00001_00001=6) + (x_00002_00001=6))<=1))
c Var 'aux288' direct represents '0' with '-1594'
c Var 'aux288' direct represents '1' with '1594'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1594'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00001_00001=7) + (x_00002_00001=7))<=1))
c Var 'aux289' direct represents '0' with '-1595'
c Var 'aux289' direct represents '1' with '1595'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1595'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00001_00001=8) + (x_00002_00001=8))<=1))
c Var 'aux290' direct represents '0' with '-1596'
c Var 'aux290' direct represents '1' with '1596'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1596'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00001_00001=9) + (x_00002_00001=9))<=1))
c Var 'aux291' direct represents '0' with '-1597'
c Var 'aux291' direct represents '1' with '1597'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1597'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1))<=1))
c Var 'aux292' direct represents '0' with '-1598'
c Var 'aux292' direct represents '1' with '1598'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1598'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2))<=1))
c Var 'aux293' direct represents '0' with '-1599'
c Var 'aux293' direct represents '1' with '1599'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1599'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3))<=1))
c Var 'aux294' direct represents '0' with '-1600'
c Var 'aux294' direct represents '1' with '1600'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1600'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4))<=1))
c Var 'aux295' direct represents '0' with '-1601'
c Var 'aux295' direct represents '1' with '1601'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1601'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5))<=1))
c Var 'aux296' direct represents '0' with '-1602'
c Var 'aux296' direct represents '1' with '1602'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1602'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6))<=1))
c Var 'aux297' direct represents '0' with '-1603'
c Var 'aux297' direct represents '1' with '1603'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1603'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7))<=1))
c Var 'aux298' direct represents '0' with '-1604'
c Var 'aux298' direct represents '1' with '1604'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1604'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8))<=1))
c Var 'aux299' direct represents '0' with '-1605'
c Var 'aux299' direct represents '1' with '1605'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1605'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9))<=1))
c Var 'aux300' direct represents '0' with '-1606'
c Var 'aux300' direct represents '1' with '1606'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1606'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00001_00007=1) + (x_00002_00006=1) + (x_00002_00007=1))<=1))
c Var 'aux301' direct represents '0' with '-1607'
c Var 'aux301' direct represents '1' with '1607'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1607'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00001_00007=2) + (x_00002_00006=2) + (x_00002_00007=2))<=1))
c Var 'aux302' direct represents '0' with '-1608'
c Var 'aux302' direct represents '1' with '1608'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1608'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00001_00007=3) + (x_00002_00006=3) + (x_00002_00007=3))<=1))
c Var 'aux303' direct represents '0' with '-1609'
c Var 'aux303' direct represents '1' with '1609'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1609'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00001_00007=4) + (x_00002_00006=4) + (x_00002_00007=4))<=1))
c Var 'aux304' direct represents '0' with '-1610'
c Var 'aux304' direct represents '1' with '1610'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1610'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00001_00007=5) + (x_00002_00006=5) + (x_00002_00007=5))<=1))
c Var 'aux305' direct represents '0' with '-1611'
c Var 'aux305' direct represents '1' with '1611'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1611'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00001_00007=6) + (x_00002_00006=6) + (x_00002_00007=6))<=1))
c Var 'aux306' direct represents '0' with '-1612'
c Var 'aux306' direct represents '1' with '1612'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1612'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00001_00007=7) + (x_00002_00006=7) + (x_00002_00007=7))<=1))
c Var 'aux307' direct represents '0' with '-1613'
c Var 'aux307' direct represents '1' with '1613'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1613'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00001_00007=8) + (x_00002_00006=8) + (x_00002_00007=8))<=1))
c Var 'aux308' direct represents '0' with '-1614'
c Var 'aux308' direct represents '1' with '1614'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1614'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00001_00007=9) + (x_00002_00006=9) + (x_00002_00007=9))<=1))
c Var 'aux309' direct represents '0' with '-1615'
c Var 'aux309' direct represents '1' with '1615'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1615'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00008=1) + (x_00002_00009=1))<=1))
c Var 'aux310' direct represents '0' with '-1616'
c Var 'aux310' direct represents '1' with '1616'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1616'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00008=2) + (x_00002_00009=2))<=1))
c Var 'aux311' direct represents '0' with '-1617'
c Var 'aux311' direct represents '1' with '1617'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1617'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00008=3) + (x_00002_00009=3))<=1))
c Var 'aux312' direct represents '0' with '-1618'
c Var 'aux312' direct represents '1' with '1618'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1618'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00008=4) + (x_00002_00009=4))<=1))
c Var 'aux313' direct represents '0' with '-1619'
c Var 'aux313' direct represents '1' with '1619'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1619'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00008=5) + (x_00002_00009=5))<=1))
c Var 'aux314' direct represents '0' with '-1620'
c Var 'aux314' direct represents '1' with '1620'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1620'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00008=6) + (x_00002_00009=6))<=1))
c Var 'aux315' direct represents '0' with '-1621'
c Var 'aux315' direct represents '1' with '1621'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1621'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00008=7) + (x_00002_00009=7))<=1))
c Var 'aux316' direct represents '0' with '-1622'
c Var 'aux316' direct represents '1' with '1622'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1622'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00008=8) + (x_00002_00009=8))<=1))
c Var 'aux317' direct represents '0' with '-1623'
c Var 'aux317' direct represents '1' with '1623'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1623'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00008=9) + (x_00002_00009=9))<=1))
c Var 'aux318' direct represents '0' with '-1624'
c Var 'aux318' direct represents '1' with '1624'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1624'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00004_00003=1) + (x_00005_00003=1))<=1))
c Var 'aux319' direct represents '0' with '-1625'
c Var 'aux319' direct represents '1' with '1625'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1625'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00004_00003=2) + (x_00005_00003=2))<=1))
c Var 'aux320' direct represents '0' with '-1626'
c Var 'aux320' direct represents '1' with '1626'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1626'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00004_00003=3) + (x_00005_00003=3))<=1))
c Var 'aux321' direct represents '0' with '-1627'
c Var 'aux321' direct represents '1' with '1627'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1627'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00004_00003=4) + (x_00005_00003=4))<=1))
c Var 'aux322' direct represents '0' with '-1628'
c Var 'aux322' direct represents '1' with '1628'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1628'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00004_00003=5) + (x_00005_00003=5))<=1))
c Var 'aux323' direct represents '0' with '-1629'
c Var 'aux323' direct represents '1' with '1629'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1629'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00004_00003=6) + (x_00005_00003=6))<=1))
c Var 'aux324' direct represents '0' with '-1630'
c Var 'aux324' direct represents '1' with '1630'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1630'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00004_00003=7) + (x_00005_00003=7))<=1))
c Var 'aux325' direct represents '0' with '-1631'
c Var 'aux325' direct represents '1' with '1631'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1631'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00004_00003=8) + (x_00005_00003=8))<=1))
c Var 'aux326' direct represents '0' with '-1632'
c Var 'aux326' direct represents '1' with '1632'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1632'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00004_00003=9) + (x_00005_00003=9))<=1))
c Var 'aux327' direct represents '0' with '-1633'
c Var 'aux327' direct represents '1' with '1633'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1633'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00005_00001=1))<=1))
c Var 'aux328' direct represents '0' with '-1634'
c Var 'aux328' direct represents '1' with '1634'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1634'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00005_00001=2))<=1))
c Var 'aux329' direct represents '0' with '-1635'
c Var 'aux329' direct represents '1' with '1635'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1635'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00005_00001=3))<=1))
c Var 'aux330' direct represents '0' with '-1636'
c Var 'aux330' direct represents '1' with '1636'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1636'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00005_00001=4))<=1))
c Var 'aux331' direct represents '0' with '-1637'
c Var 'aux331' direct represents '1' with '1637'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1637'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00005_00001=5))<=1))
c Var 'aux332' direct represents '0' with '-1638'
c Var 'aux332' direct represents '1' with '1638'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1638'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00005_00001=6))<=1))
c Var 'aux333' direct represents '0' with '-1639'
c Var 'aux333' direct represents '1' with '1639'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1639'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00005_00001=7))<=1))
c Var 'aux334' direct represents '0' with '-1640'
c Var 'aux334' direct represents '1' with '1640'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1640'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00005_00001=8))<=1))
c Var 'aux335' direct represents '0' with '-1641'
c Var 'aux335' direct represents '1' with '1641'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1641'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00005_00001=9))<=1))
c Var 'aux336' direct represents '0' with '-1642'
c Var 'aux336' direct represents '1' with '1642'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1642'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00004_00004=1) + (x_00004_00005=1) + (x_00005_00004=1) + (x_00005_00005=1))<=1))
c Var 'aux337' direct represents '0' with '-1643'
c Var 'aux337' direct represents '1' with '1643'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1643'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00004_00004=2) + (x_00004_00005=2) + (x_00005_00004=2) + (x_00005_00005=2))<=1))
c Var 'aux338' direct represents '0' with '-1644'
c Var 'aux338' direct represents '1' with '1644'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1644'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00004_00004=3) + (x_00004_00005=3) + (x_00005_00004=3) + (x_00005_00005=3))<=1))
c Var 'aux339' direct represents '0' with '-1645'
c Var 'aux339' direct represents '1' with '1645'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1645'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00004_00004=4) + (x_00004_00005=4) + (x_00005_00004=4) + (x_00005_00005=4))<=1))
c Var 'aux340' direct represents '0' with '-1646'
c Var 'aux340' direct represents '1' with '1646'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1646'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00004_00004=5) + (x_00004_00005=5) + (x_00005_00004=5) + (x_00005_00005=5))<=1))
c Var 'aux341' direct represents '0' with '-1647'
c Var 'aux341' direct represents '1' with '1647'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1647'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00004_00004=6) + (x_00004_00005=6) + (x_00005_00004=6) + (x_00005_00005=6))<=1))
c Var 'aux342' direct represents '0' with '-1648'
c Var 'aux342' direct represents '1' with '1648'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1648'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00004_00004=7) + (x_00004_00005=7) + (x_00005_00004=7) + (x_00005_00005=7))<=1))
c Var 'aux343' direct represents '0' with '-1649'
c Var 'aux343' direct represents '1' with '1649'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1649'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00004_00004=8) + (x_00004_00005=8) + (x_00005_00004=8) + (x_00005_00005=8))<=1))
c Var 'aux344' direct represents '0' with '-1650'
c Var 'aux344' direct represents '1' with '1650'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1650'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00004_00004=9) + (x_00004_00005=9) + (x_00005_00004=9) + (x_00005_00005=9))<=1))
c Var 'aux345' direct represents '0' with '-1651'
c Var 'aux345' direct represents '1' with '1651'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1651'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00004_00006=1) + (x_00004_00007=1) + (x_00005_00006=1) + (x_00005_00007=1))<=1))
c Var 'aux346' direct represents '0' with '-1652'
c Var 'aux346' direct represents '1' with '1652'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1652'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00004_00006=2) + (x_00004_00007=2) + (x_00005_00006=2) + (x_00005_00007=2))<=1))
c Var 'aux347' direct represents '0' with '-1653'
c Var 'aux347' direct represents '1' with '1653'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1653'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00004_00006=3) + (x_00004_00007=3) + (x_00005_00006=3) + (x_00005_00007=3))<=1))
c Var 'aux348' direct represents '0' with '-1654'
c Var 'aux348' direct represents '1' with '1654'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1654'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00004_00006=4) + (x_00004_00007=4) + (x_00005_00006=4) + (x_00005_00007=4))<=1))
c Var 'aux349' direct represents '0' with '-1655'
c Var 'aux349' direct represents '1' with '1655'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1655'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00004_00006=5) + (x_00004_00007=5) + (x_00005_00006=5) + (x_00005_00007=5))<=1))
c Var 'aux350' direct represents '0' with '-1656'
c Var 'aux350' direct represents '1' with '1656'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1656'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00004_00006=6) + (x_00004_00007=6) + (x_00005_00006=6) + (x_00005_00007=6))<=1))
c Var 'aux351' direct represents '0' with '-1657'
c Var 'aux351' direct represents '1' with '1657'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1657'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00004_00006=7) + (x_00004_00007=7) + (x_00005_00006=7) + (x_00005_00007=7))<=1))
c Var 'aux352' direct represents '0' with '-1658'
c Var 'aux352' direct represents '1' with '1658'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1658'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00004_00006=8) + (x_00004_00007=8) + (x_00005_00006=8) + (x_00005_00007=8))<=1))
c Var 'aux353' direct represents '0' with '-1659'
c Var 'aux353' direct represents '1' with '1659'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1659'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00004_00006=9) + (x_00004_00007=9) + (x_00005_00006=9) + (x_00005_00007=9))<=1))
c Var 'aux354' direct represents '0' with '-1660'
c Var 'aux354' direct represents '1' with '1660'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1660'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00004_00008=1) + (x_00005_00008=1) + (x_00005_00009=1))<=1))
c Var 'aux355' direct represents '0' with '-1661'
c Var 'aux355' direct represents '1' with '1661'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1661'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00004_00008=2) + (x_00005_00008=2) + (x_00005_00009=2))<=1))
c Var 'aux356' direct represents '0' with '-1662'
c Var 'aux356' direct represents '1' with '1662'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1662'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00004_00008=3) + (x_00005_00008=3) + (x_00005_00009=3))<=1))
c Var 'aux357' direct represents '0' with '-1663'
c Var 'aux357' direct represents '1' with '1663'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1663'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00004_00008=4) + (x_00005_00008=4) + (x_00005_00009=4))<=1))
c Var 'aux358' direct represents '0' with '-1664'
c Var 'aux358' direct represents '1' with '1664'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1664'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00004_00008=5) + (x_00005_00008=5) + (x_00005_00009=5))<=1))
c Var 'aux359' direct represents '0' with '-1665'
c Var 'aux359' direct represents '1' with '1665'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1665'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00004_00008=6) + (x_00005_00008=6) + (x_00005_00009=6))<=1))
c Var 'aux360' direct represents '0' with '-1666'
c Var 'aux360' direct represents '1' with '1666'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1666'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00004_00008=7) + (x_00005_00008=7) + (x_00005_00009=7))<=1))
c Var 'aux361' direct represents '0' with '-1667'
c Var 'aux361' direct represents '1' with '1667'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1667'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00004_00008=8) + (x_00005_00008=8) + (x_00005_00009=8))<=1))
c Var 'aux362' direct represents '0' with '-1668'
c Var 'aux362' direct represents '1' with '1668'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1668'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00004_00008=9) + (x_00005_00008=9) + (x_00005_00009=9))<=1))
c Var 'aux363' direct represents '0' with '-1669'
c Var 'aux363' direct represents '1' with '1669'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1669'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00006_00002=1) + (x_00006_00003=1) + (x_00005_00002=1))<=1))
c Var 'aux364' direct represents '0' with '-1670'
c Var 'aux364' direct represents '1' with '1670'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1670'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00006_00002=2) + (x_00006_00003=2) + (x_00005_00002=2))<=1))
c Var 'aux365' direct represents '0' with '-1671'
c Var 'aux365' direct represents '1' with '1671'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1671'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00006_00002=3) + (x_00006_00003=3) + (x_00005_00002=3))<=1))
c Var 'aux366' direct represents '0' with '-1672'
c Var 'aux366' direct represents '1' with '1672'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1672'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00006_00002=4) + (x_00006_00003=4) + (x_00005_00002=4))<=1))
c Var 'aux367' direct represents '0' with '-1673'
c Var 'aux367' direct represents '1' with '1673'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1673'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00006_00002=5) + (x_00006_00003=5) + (x_00005_00002=5))<=1))
c Var 'aux368' direct represents '0' with '-1674'
c Var 'aux368' direct represents '1' with '1674'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1674'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00006_00002=6) + (x_00006_00003=6) + (x_00005_00002=6))<=1))
c Var 'aux369' direct represents '0' with '-1675'
c Var 'aux369' direct represents '1' with '1675'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1675'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00006_00002=7) + (x_00006_00003=7) + (x_00005_00002=7))<=1))
c Var 'aux370' direct represents '0' with '-1676'
c Var 'aux370' direct represents '1' with '1676'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1676'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00006_00002=8) + (x_00006_00003=8) + (x_00005_00002=8))<=1))
c Var 'aux371' direct represents '0' with '-1677'
c Var 'aux371' direct represents '1' with '1677'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1677'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00002=9) + (x_00006_00003=9) + (x_00005_00002=9))<=1))
c Var 'aux372' direct represents '0' with '-1678'
c Var 'aux372' direct represents '1' with '1678'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1678'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00007_00001=1) + (x_00007_00002=1))<=1))
c Var 'aux373' direct represents '0' with '-1679'
c Var 'aux373' direct represents '1' with '1679'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1679'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00007_00001=2) + (x_00007_00002=2))<=1))
c Var 'aux374' direct represents '0' with '-1680'
c Var 'aux374' direct represents '1' with '1680'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1680'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00007_00001=3) + (x_00007_00002=3))<=1))
c Var 'aux375' direct represents '0' with '-1681'
c Var 'aux375' direct represents '1' with '1681'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1681'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00007_00001=4) + (x_00007_00002=4))<=1))
c Var 'aux376' direct represents '0' with '-1682'
c Var 'aux376' direct represents '1' with '1682'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1682'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00007_00001=5) + (x_00007_00002=5))<=1))
c Var 'aux377' direct represents '0' with '-1683'
c Var 'aux377' direct represents '1' with '1683'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1683'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00007_00001=6) + (x_00007_00002=6))<=1))
c Var 'aux378' direct represents '0' with '-1684'
c Var 'aux378' direct represents '1' with '1684'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1684'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00007_00001=7) + (x_00007_00002=7))<=1))
c Var 'aux379' direct represents '0' with '-1685'
c Var 'aux379' direct represents '1' with '1685'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1685'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00007_00001=8) + (x_00007_00002=8))<=1))
c Var 'aux380' direct represents '0' with '-1686'
c Var 'aux380' direct represents '1' with '1686'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1686'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00007_00001=9) + (x_00007_00002=9))<=1))
c Var 'aux381' direct represents '0' with '-1687'
c Var 'aux381' direct represents '1' with '1687'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1687'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1))<=1))
c Var 'aux382' direct represents '0' with '-1688'
c Var 'aux382' direct represents '1' with '1688'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1688'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2))<=1))
c Var 'aux383' direct represents '0' with '-1689'
c Var 'aux383' direct represents '1' with '1689'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1689'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3))<=1))
c Var 'aux384' direct represents '0' with '-1690'
c Var 'aux384' direct represents '1' with '1690'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1690'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4))<=1))
c Var 'aux385' direct represents '0' with '-1691'
c Var 'aux385' direct represents '1' with '1691'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1691'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5))<=1))
c Var 'aux386' direct represents '0' with '-1692'
c Var 'aux386' direct represents '1' with '1692'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1692'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6))<=1))
c Var 'aux387' direct represents '0' with '-1693'
c Var 'aux387' direct represents '1' with '1693'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1693'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7))<=1))
c Var 'aux388' direct represents '0' with '-1694'
c Var 'aux388' direct represents '1' with '1694'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1694'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8))<=1))
c Var 'aux389' direct represents '0' with '-1695'
c Var 'aux389' direct represents '1' with '1695'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1695'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9))<=1))
c Var 'aux390' direct represents '0' with '-1696'
c Var 'aux390' direct represents '1' with '1696'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1696'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00007_00007=1))<=1))
c Var 'aux391' direct represents '0' with '-1697'
c Var 'aux391' direct represents '1' with '1697'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1697'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00007_00007=2))<=1))
c Var 'aux392' direct represents '0' with '-1698'
c Var 'aux392' direct represents '1' with '1698'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1698'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00007_00007=3))<=1))
c Var 'aux393' direct represents '0' with '-1699'
c Var 'aux393' direct represents '1' with '1699'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1699'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00007_00007=4))<=1))
c Var 'aux394' direct represents '0' with '-1700'
c Var 'aux394' direct represents '1' with '1700'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1700'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00007_00007=5))<=1))
c Var 'aux395' direct represents '0' with '-1701'
c Var 'aux395' direct represents '1' with '1701'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1701'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00007_00007=6))<=1))
c Var 'aux396' direct represents '0' with '-1702'
c Var 'aux396' direct represents '1' with '1702'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1702'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00007_00007=7))<=1))
c Var 'aux397' direct represents '0' with '-1703'
c Var 'aux397' direct represents '1' with '1703'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1703'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00007_00007=8))<=1))
c Var 'aux398' direct represents '0' with '-1704'
c Var 'aux398' direct represents '1' with '1704'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1704'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00007_00007=9))<=1))
c Var 'aux399' direct represents '0' with '-1705'
c Var 'aux399' direct represents '1' with '1705'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1705'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00006_00009=1) + (x_00007_00008=1) + (x_00007_00009=1))<=1))
c Var 'aux400' direct represents '0' with '-1706'
c Var 'aux400' direct represents '1' with '1706'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1706'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00006_00009=2) + (x_00007_00008=2) + (x_00007_00009=2))<=1))
c Var 'aux401' direct represents '0' with '-1707'
c Var 'aux401' direct represents '1' with '1707'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1707'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00006_00009=3) + (x_00007_00008=3) + (x_00007_00009=3))<=1))
c Var 'aux402' direct represents '0' with '-1708'
c Var 'aux402' direct represents '1' with '1708'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1708'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00006_00009=4) + (x_00007_00008=4) + (x_00007_00009=4))<=1))
c Var 'aux403' direct represents '0' with '-1709'
c Var 'aux403' direct represents '1' with '1709'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1709'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00006_00009=5) + (x_00007_00008=5) + (x_00007_00009=5))<=1))
c Var 'aux404' direct represents '0' with '-1710'
c Var 'aux404' direct represents '1' with '1710'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1710'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00006_00009=6) + (x_00007_00008=6) + (x_00007_00009=6))<=1))
c Var 'aux405' direct represents '0' with '-1711'
c Var 'aux405' direct represents '1' with '1711'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1711'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00006_00009=7) + (x_00007_00008=7) + (x_00007_00009=7))<=1))
c Var 'aux406' direct represents '0' with '-1712'
c Var 'aux406' direct represents '1' with '1712'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1712'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00006_00009=8) + (x_00007_00008=8) + (x_00007_00009=8))<=1))
c Var 'aux407' direct represents '0' with '-1713'
c Var 'aux407' direct represents '1' with '1713'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1713'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00006_00009=9) + (x_00007_00008=9) + (x_00007_00009=9))<=1))
c Var 'aux408' direct represents '0' with '-1714'
c Var 'aux408' direct represents '1' with '1714'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1714'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00009_00001=1))<=1))
c Var 'aux409' direct represents '0' with '-1715'
c Var 'aux409' direct represents '1' with '1715'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1715'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00009_00001=2))<=1))
c Var 'aux410' direct represents '0' with '-1716'
c Var 'aux410' direct represents '1' with '1716'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1716'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00009_00001=3))<=1))
c Var 'aux411' direct represents '0' with '-1717'
c Var 'aux411' direct represents '1' with '1717'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1717'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00009_00001=4))<=1))
c Var 'aux412' direct represents '0' with '-1718'
c Var 'aux412' direct represents '1' with '1718'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1718'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00009_00001=5))<=1))
c Var 'aux413' direct represents '0' with '-1719'
c Var 'aux413' direct represents '1' with '1719'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1719'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00009_00001=6))<=1))
c Var 'aux414' direct represents '0' with '-1720'
c Var 'aux414' direct represents '1' with '1720'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1720'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00009_00001=7))<=1))
c Var 'aux415' direct represents '0' with '-1721'
c Var 'aux415' direct represents '1' with '1721'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1721'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00009_00001=8))<=1))
c Var 'aux416' direct represents '0' with '-1722'
c Var 'aux416' direct represents '1' with '1722'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1722'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00009_00001=9))<=1))
c Var 'aux417' direct represents '0' with '-1723'
c Var 'aux417' direct represents '1' with '1723'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1723'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00008_00003=1) + (x_00008_00004=1) + (x_00009_00004=1))<=1))
c Var 'aux418' direct represents '0' with '-1724'
c Var 'aux418' direct represents '1' with '1724'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1724'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00008_00003=2) + (x_00008_00004=2) + (x_00009_00004=2))<=1))
c Var 'aux419' direct represents '0' with '-1725'
c Var 'aux419' direct represents '1' with '1725'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1725'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00008_00003=3) + (x_00008_00004=3) + (x_00009_00004=3))<=1))
c Var 'aux420' direct represents '0' with '-1726'
c Var 'aux420' direct represents '1' with '1726'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1726'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00008_00003=4) + (x_00008_00004=4) + (x_00009_00004=4))<=1))
c Var 'aux421' direct represents '0' with '-1727'
c Var 'aux421' direct represents '1' with '1727'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1727'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00008_00003=5) + (x_00008_00004=5) + (x_00009_00004=5))<=1))
c Var 'aux422' direct represents '0' with '-1728'
c Var 'aux422' direct represents '1' with '1728'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1728'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00008_00003=6) + (x_00008_00004=6) + (x_00009_00004=6))<=1))
c Var 'aux423' direct represents '0' with '-1729'
c Var 'aux423' direct represents '1' with '1729'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1729'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00008_00003=7) + (x_00008_00004=7) + (x_00009_00004=7))<=1))
c Var 'aux424' direct represents '0' with '-1730'
c Var 'aux424' direct represents '1' with '1730'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1730'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00008_00003=8) + (x_00008_00004=8) + (x_00009_00004=8))<=1))
c Var 'aux425' direct represents '0' with '-1731'
c Var 'aux425' direct represents '1' with '1731'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1731'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00008_00003=9) + (x_00008_00004=9) + (x_00009_00004=9))<=1))
c Var 'aux426' direct represents '0' with '-1732'
c Var 'aux426' direct represents '1' with '1732'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1732'
c Encoding variable: aux427 with domain: bool (representing constraint (((x_00008_00006=1) + (x_00009_00006=1) + (x_00009_00007=1))<=1))
c Var 'aux427' direct represents '0' with '-1733'
c Var 'aux427' direct represents '1' with '1733'
c Var 'aux427' order represents '1' with '1'
c Var 'aux427' order represents '0' with '-1733'
c Encoding variable: aux428 with domain: bool (representing constraint (((x_00008_00006=2) + (x_00009_00006=2) + (x_00009_00007=2))<=1))
c Var 'aux428' direct represents '0' with '-1734'
c Var 'aux428' direct represents '1' with '1734'
c Var 'aux428' order represents '1' with '1'
c Var 'aux428' order represents '0' with '-1734'
c Encoding variable: aux429 with domain: bool (representing constraint (((x_00008_00006=3) + (x_00009_00006=3) + (x_00009_00007=3))<=1))
c Var 'aux429' direct represents '0' with '-1735'
c Var 'aux429' direct represents '1' with '1735'
c Var 'aux429' order represents '1' with '1'
c Var 'aux429' order represents '0' with '-1735'
c Encoding variable: aux430 with domain: bool (representing constraint (((x_00008_00006=4) + (x_00009_00006=4) + (x_00009_00007=4))<=1))
c Var 'aux430' direct represents '0' with '-1736'
c Var 'aux430' direct represents '1' with '1736'
c Var 'aux430' order represents '1' with '1'
c Var 'aux430' order represents '0' with '-1736'
c Encoding variable: aux431 with domain: bool (representing constraint (((x_00008_00006=5) + (x_00009_00006=5) + (x_00009_00007=5))<=1))
c Var 'aux431' direct represents '0' with '-1737'
c Var 'aux431' direct represents '1' with '1737'
c Var 'aux431' order represents '1' with '1'
c Var 'aux431' order represents '0' with '-1737'
c Encoding variable: aux432 with domain: bool (representing constraint (((x_00008_00006=6) + (x_00009_00006=6) + (x_00009_00007=6))<=1))
c Var 'aux432' direct represents '0' with '-1738'
c Var 'aux432' direct represents '1' with '1738'
c Var 'aux432' order represents '1' with '1'
c Var 'aux432' order represents '0' with '-1738'
c Encoding variable: aux433 with domain: bool (representing constraint (((x_00008_00006=7) + (x_00009_00006=7) + (x_00009_00007=7))<=1))
c Var 'aux433' direct represents '0' with '-1739'
c Var 'aux433' direct represents '1' with '1739'
c Var 'aux433' order represents '1' with '1'
c Var 'aux433' order represents '0' with '-1739'
c Encoding variable: aux434 with domain: bool (representing constraint (((x_00008_00006=8) + (x_00009_00006=8) + (x_00009_00007=8))<=1))
c Var 'aux434' direct represents '0' with '-1740'
c Var 'aux434' direct represents '1' with '1740'
c Var 'aux434' order represents '1' with '1'
c Var 'aux434' order represents '0' with '-1740'
c Encoding variable: aux435 with domain: bool (representing constraint (((x_00008_00006=9) + (x_00009_00006=9) + (x_00009_00007=9))<=1))
c Var 'aux435' direct represents '0' with '-1741'
c Var 'aux435' direct represents '1' with '1741'
c Var 'aux435' order represents '1' with '1'
c Var 'aux435' order represents '0' with '-1741'
c Encoding variable: aux436 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00009_00008=1))<=1))
c Var 'aux436' direct represents '0' with '-1742'
c Var 'aux436' direct represents '1' with '1742'
c Var 'aux436' order represents '1' with '1'
c Var 'aux436' order represents '0' with '-1742'
c Encoding variable: aux437 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00009_00008=2))<=1))
c Var 'aux437' direct represents '0' with '-1743'
c Var 'aux437' direct represents '1' with '1743'
c Var 'aux437' order represents '1' with '1'
c Var 'aux437' order represents '0' with '-1743'
c Encoding variable: aux438 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00009_00008=3))<=1))
c Var 'aux438' direct represents '0' with '-1744'
c Var 'aux438' direct represents '1' with '1744'
c Var 'aux438' order represents '1' with '1'
c Var 'aux438' order represents '0' with '-1744'
c Encoding variable: aux439 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00009_00008=4))<=1))
c Var 'aux439' direct represents '0' with '-1745'
c Var 'aux439' direct represents '1' with '1745'
c Var 'aux439' order represents '1' with '1'
c Var 'aux439' order represents '0' with '-1745'
c Encoding variable: aux440 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00009_00008=5))<=1))
c Var 'aux440' direct represents '0' with '-1746'
c Var 'aux440' direct represents '1' with '1746'
c Var 'aux440' order represents '1' with '1'
c Var 'aux440' order represents '0' with '-1746'
c Encoding variable: aux441 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00009_00008=6))<=1))
c Var 'aux441' direct represents '0' with '-1747'
c Var 'aux441' direct represents '1' with '1747'
c Var 'aux441' order represents '1' with '1'
c Var 'aux441' order represents '0' with '-1747'
c Encoding variable: aux442 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00009_00008=7))<=1))
c Var 'aux442' direct represents '0' with '-1748'
c Var 'aux442' direct represents '1' with '1748'
c Var 'aux442' order represents '1' with '1'
c Var 'aux442' order represents '0' with '-1748'
c Encoding variable: aux443 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00009_00008=8))<=1))
c Var 'aux443' direct represents '0' with '-1749'
c Var 'aux443' direct represents '1' with '1749'
c Var 'aux443' order represents '1' with '1'
c Var 'aux443' order represents '0' with '-1749'
c Encoding variable: aux444 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00009_00008=9))<=1))
c Var 'aux444' direct represents '0' with '-1750'
c Var 'aux444' direct represents '1' with '1750'
c Var 'aux444' order represents '1' with '1'
c Var 'aux444' order represents '0' with '-1750'
c Encoding variable: aux445 with domain: int(0..16) (representing constraint (shift(x_00002_00008, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '1751'
c Var 'aux445' direct represents '0' with '1751'
c Var 'aux445' order represents '1' with '1752'
-1751 1752 0
c Var 'aux445' direct represents '1' with '1753'
1751 -1752 1753 0
-1753 1752 0
-1753 -1751 0
c Var 'aux445' order represents '2' with '1754'
-1752 1754 0
c Var 'aux445' direct represents '2' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux445' order represents '3' with '1756'
-1754 1756 0
c Var 'aux445' direct represents '3' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux445' order represents '4' with '1758'
-1756 1758 0
c Var 'aux445' direct represents '4' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux445' order represents '5' with '1760'
-1758 1760 0
c Var 'aux445' direct represents '5' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux445' order represents '6' with '1762'
-1760 1762 0
c Var 'aux445' direct represents '6' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux445' order represents '7' with '1764'
-1762 1764 0
c Var 'aux445' direct represents '7' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux445' order represents '8' with '1766'
-1764 1766 0
c Var 'aux445' direct represents '8' with '1767'
1764 -1766 1767 0
-1767 1766 0
-1767 -1764 0
c Var 'aux445' order represents '9' with '1768'
-1766 1768 0
c Var 'aux445' direct represents '9' with '1769'
1766 -1768 1769 0
-1769 1768 0
-1769 -1766 0
c Var 'aux445' order represents '10' with '1770'
-1768 1770 0
c Var 'aux445' direct represents '10' with '1771'
1768 -1770 1771 0
-1771 1770 0
-1771 -1768 0
c Var 'aux445' order represents '11' with '1772'
-1770 1772 0
c Var 'aux445' direct represents '11' with '1773'
1770 -1772 1773 0
-1773 1772 0
-1773 -1770 0
c Var 'aux445' order represents '12' with '1774'
-1772 1774 0
c Var 'aux445' direct represents '12' with '1775'
1772 -1774 1775 0
-1775 1774 0
-1775 -1772 0
c Var 'aux445' order represents '13' with '1776'
-1774 1776 0
c Var 'aux445' direct represents '13' with '1777'
1774 -1776 1777 0
-1777 1776 0
-1777 -1774 0
c Var 'aux445' order represents '14' with '1778'
-1776 1778 0
c Var 'aux445' direct represents '14' with '1779'
1776 -1778 1779 0
-1779 1778 0
-1779 -1776 0
c Var 'aux445' order represents '15' with '1780'
-1778 1780 0
c Var 'aux445' direct represents '15' with '1781'
1778 -1780 1781 0
-1781 1780 0
-1781 -1778 0
c Var 'aux445' direct represents '16' with '-1780'
1751 1753 1755 1757 1759 1761 1763 1765 1767 1769 1771 1773 1775 1777 1779 1781 -1780 0
c Encoding variable: aux446 with domain: int(0..16) (representing constraint (shift(x_00004_00004, -1) + shift(x_00005_00005, -1)))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '1782'
c Var 'aux446' direct represents '0' with '1782'
c Var 'aux446' order represents '1' with '1783'
-1782 1783 0
c Var 'aux446' direct represents '1' with '1784'
1782 -1783 1784 0
-1784 1783 0
-1784 -1782 0
c Var 'aux446' order represents '2' with '1785'
-1783 1785 0
c Var 'aux446' direct represents '2' with '1786'
1783 -1785 1786 0
-1786 1785 0
-1786 -1783 0
c Var 'aux446' order represents '3' with '1787'
-1785 1787 0
c Var 'aux446' direct represents '3' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux446' order represents '4' with '1789'
-1787 1789 0
c Var 'aux446' direct represents '4' with '1790'
1787 -1789 1790 0
-1790 1789 0
-1790 -1787 0
c Var 'aux446' order represents '5' with '1791'
-1789 1791 0
c Var 'aux446' direct represents '5' with '1792'
1789 -1791 1792 0
-1792 1791 0
-1792 -1789 0
c Var 'aux446' order represents '6' with '1793'
-1791 1793 0
c Var 'aux446' direct represents '6' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux446' order represents '7' with '1795'
-1793 1795 0
c Var 'aux446' direct represents '7' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux446' order represents '8' with '1797'
-1795 1797 0
c Var 'aux446' direct represents '8' with '1798'
1795 -1797 1798 0
-1798 1797 0
-1798 -1795 0
c Var 'aux446' order represents '9' with '1799'
-1797 1799 0
c Var 'aux446' direct represents '9' with '1800'
1797 -1799 1800 0
-1800 1799 0
-1800 -1797 0
c Var 'aux446' order represents '10' with '1801'
-1799 1801 0
c Var 'aux446' direct represents '10' with '1802'
1799 -1801 1802 0
-1802 1801 0
-1802 -1799 0
c Var 'aux446' order represents '11' with '1803'
-1801 1803 0
c Var 'aux446' direct represents '11' with '1804'
1801 -1803 1804 0
-1804 1803 0
-1804 -1801 0
c Var 'aux446' order represents '12' with '1805'
-1803 1805 0
c Var 'aux446' direct represents '12' with '1806'
1803 -1805 1806 0
-1806 1805 0
-1806 -1803 0
c Var 'aux446' order represents '13' with '1807'
-1805 1807 0
c Var 'aux446' direct represents '13' with '1808'
1805 -1807 1808 0
-1808 1807 0
-1808 -1805 0
c Var 'aux446' order represents '14' with '1809'
-1807 1809 0
c Var 'aux446' direct represents '14' with '1810'
1807 -1809 1810 0
-1810 1809 0
-1810 -1807 0
c Var 'aux446' order represents '15' with '1811'
-1809 1811 0
c Var 'aux446' direct represents '15' with '1812'
1809 -1811 1812 0
-1812 1811 0
-1812 -1809 0
c Var 'aux446' direct represents '16' with '-1811'
1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 -1811 0
c Encoding variable: aux447 with domain: int(0..16) (representing constraint (shift(x_00004_00006, -1) + shift(x_00005_00007, -1)))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '1813'
c Var 'aux447' direct represents '0' with '1813'
c Var 'aux447' order represents '1' with '1814'
-1813 1814 0
c Var 'aux447' direct represents '1' with '1815'
1813 -1814 1815 0
-1815 1814 0
-1815 -1813 0
c Var 'aux447' order represents '2' with '1816'
-1814 1816 0
c Var 'aux447' direct represents '2' with '1817'
1814 -1816 1817 0
-1817 1816 0
-1817 -1814 0
c Var 'aux447' order represents '3' with '1818'
-1816 1818 0
c Var 'aux447' direct represents '3' with '1819'
1816 -1818 1819 0
-1819 1818 0
-1819 -1816 0
c Var 'aux447' order represents '4' with '1820'
-1818 1820 0
c Var 'aux447' direct represents '4' with '1821'
1818 -1820 1821 0
-1821 1820 0
-1821 -1818 0
c Var 'aux447' order represents '5' with '1822'
-1820 1822 0
c Var 'aux447' direct represents '5' with '1823'
1820 -1822 1823 0
-1823 1822 0
-1823 -1820 0
c Var 'aux447' order represents '6' with '1824'
-1822 1824 0
c Var 'aux447' direct represents '6' with '1825'
1822 -1824 1825 0
-1825 1824 0
-1825 -1822 0
c Var 'aux447' order represents '7' with '1826'
-1824 1826 0
c Var 'aux447' direct represents '7' with '1827'
1824 -1826 1827 0
-1827 1826 0
-1827 -1824 0
c Var 'aux447' order represents '8' with '1828'
-1826 1828 0
c Var 'aux447' direct represents '8' with '1829'
1826 -1828 1829 0
-1829 1828 0
-1829 -1826 0
c Var 'aux447' order represents '9' with '1830'
-1828 1830 0
c Var 'aux447' direct represents '9' with '1831'
1828 -1830 1831 0
-1831 1830 0
-1831 -1828 0
c Var 'aux447' order represents '10' with '1832'
-1830 1832 0
c Var 'aux447' direct represents '10' with '1833'
1830 -1832 1833 0
-1833 1832 0
-1833 -1830 0
c Var 'aux447' order represents '11' with '1834'
-1832 1834 0
c Var 'aux447' direct represents '11' with '1835'
1832 -1834 1835 0
-1835 1834 0
-1835 -1832 0
c Var 'aux447' order represents '12' with '1836'
-1834 1836 0
c Var 'aux447' direct represents '12' with '1837'
1834 -1836 1837 0
-1837 1836 0
-1837 -1834 0
c Var 'aux447' order represents '13' with '1838'
-1836 1838 0
c Var 'aux447' direct represents '13' with '1839'
1836 -1838 1839 0
-1839 1838 0
-1839 -1836 0
c Var 'aux447' order represents '14' with '1840'
-1838 1840 0
c Var 'aux447' direct represents '14' with '1841'
1838 -1840 1841 0
-1841 1840 0
-1841 -1838 0
c Var 'aux447' order represents '15' with '1842'
-1840 1842 0
c Var 'aux447' direct represents '15' with '1843'
1840 -1842 1843 0
-1843 1842 0
-1843 -1840 0
c Var 'aux447' direct represents '16' with '-1842'
1813 1815 1817 1819 1821 1823 1825 1827 1829 1831 1833 1835 1837 1839 1841 1843 -1842 0
c Encoding variable: aux448 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '1844'
c Var 'aux448' direct represents '0' with '1844'
c Var 'aux448' order represents '1' with '1845'
-1844 1845 0
c Var 'aux448' direct represents '1' with '1846'
1844 -1845 1846 0
-1846 1845 0
-1846 -1844 0
c Var 'aux448' direct represents '2' with '-1845'
1844 1846 -1845 0
c Encoding variable: aux449 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '1847'
c Var 'aux449' direct represents '0' with '1847'
c Var 'aux449' order represents '1' with '1848'
-1847 1848 0
c Var 'aux449' direct represents '1' with '1849'
1847 -1848 1849 0
-1849 1848 0
-1849 -1847 0
c Var 'aux449' direct represents '2' with '-1848'
1847 1849 -1848 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '1850'
c Var 'aux450' direct represents '0' with '1850'
c Var 'aux450' order represents '1' with '1851'
-1850 1851 0
c Var 'aux450' direct represents '1' with '1852'
1850 -1851 1852 0
-1852 1851 0
-1852 -1850 0
c Var 'aux450' direct represents '2' with '-1851'
1850 1852 -1851 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '1853'
c Var 'aux451' direct represents '0' with '1853'
c Var 'aux451' order represents '1' with '1854'
-1853 1854 0
c Var 'aux451' direct represents '1' with '1855'
1853 -1854 1855 0
-1855 1854 0
-1855 -1853 0
c Var 'aux451' direct represents '2' with '-1854'
1853 1855 -1854 0
c Encoding variable: aux452 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux451))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '1856'
c Var 'aux452' direct represents '0' with '1856'
c Var 'aux452' order represents '1' with '1857'
-1856 1857 0
c Var 'aux452' direct represents '1' with '1858'
1856 -1857 1858 0
-1858 1857 0
-1858 -1856 0
c Var 'aux452' order represents '2' with '1859'
-1857 1859 0
c Var 'aux452' direct represents '2' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux452' direct represents '3' with '-1859'
1856 1858 1860 -1859 0
c Encoding variable: aux453 with domain: int(0..4) (representing constraint (aux448 + aux450))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '1861'
c Var 'aux453' direct represents '0' with '1861'
c Var 'aux453' order represents '1' with '1862'
-1861 1862 0
c Var 'aux453' direct represents '1' with '1863'
1861 -1862 1863 0
-1863 1862 0
-1863 -1861 0
c Var 'aux453' order represents '2' with '1864'
-1862 1864 0
c Var 'aux453' direct represents '2' with '1865'
1862 -1864 1865 0
-1865 1864 0
-1865 -1862 0
c Var 'aux453' order represents '3' with '1866'
-1864 1866 0
c Var 'aux453' direct represents '3' with '1867'
1864 -1866 1867 0
-1867 1866 0
-1867 -1864 0
c Var 'aux453' direct represents '4' with '-1866'
1861 1863 1865 1867 -1866 0
c Encoding variable: aux454 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '1868'
c Var 'aux454' direct represents '0' with '1868'
c Var 'aux454' order represents '1' with '1869'
-1868 1869 0
c Var 'aux454' direct represents '1' with '1870'
1868 -1869 1870 0
-1870 1869 0
-1870 -1868 0
c Var 'aux454' direct represents '2' with '-1869'
1868 1870 -1869 0
c Encoding variable: aux455 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '1871'
c Var 'aux455' direct represents '0' with '1871'
c Var 'aux455' order represents '1' with '1872'
-1871 1872 0
c Var 'aux455' direct represents '1' with '1873'
1871 -1872 1873 0
-1873 1872 0
-1873 -1871 0
c Var 'aux455' direct represents '2' with '-1872'
1871 1873 -1872 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '1874'
c Var 'aux456' direct represents '0' with '1874'
c Var 'aux456' order represents '1' with '1875'
-1874 1875 0
c Var 'aux456' direct represents '1' with '1876'
1874 -1875 1876 0
-1876 1875 0
-1876 -1874 0
c Var 'aux456' direct represents '2' with '-1875'
1874 1876 -1875 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '1877'
c Var 'aux457' direct represents '0' with '1877'
c Var 'aux457' order represents '1' with '1878'
-1877 1878 0
c Var 'aux457' direct represents '1' with '1879'
1877 -1878 1879 0
-1879 1878 0
-1879 -1877 0
c Var 'aux457' direct represents '2' with '-1878'
1877 1879 -1878 0
c Encoding variable: aux458 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux457))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '1880'
c Var 'aux458' direct represents '0' with '1880'
c Var 'aux458' order represents '1' with '1881'
-1880 1881 0
c Var 'aux458' direct represents '1' with '1882'
1880 -1881 1882 0
-1882 1881 0
-1882 -1880 0
c Var 'aux458' order represents '2' with '1883'
-1881 1883 0
c Var 'aux458' direct represents '2' with '1884'
1881 -1883 1884 0
-1884 1883 0
-1884 -1881 0
c Var 'aux458' direct represents '3' with '-1883'
1880 1882 1884 -1883 0
c Encoding variable: aux459 with domain: int(0..4) (representing constraint (aux454 + aux456))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '1885'
c Var 'aux459' direct represents '0' with '1885'
c Var 'aux459' order represents '1' with '1886'
-1885 1886 0
c Var 'aux459' direct represents '1' with '1887'
1885 -1886 1887 0
-1887 1886 0
-1887 -1885 0
c Var 'aux459' order represents '2' with '1888'
-1886 1888 0
c Var 'aux459' direct represents '2' with '1889'
1886 -1888 1889 0
-1889 1888 0
-1889 -1886 0
c Var 'aux459' order represents '3' with '1890'
-1888 1890 0
c Var 'aux459' direct represents '3' with '1891'
1888 -1890 1891 0
-1891 1890 0
-1891 -1888 0
c Var 'aux459' direct represents '4' with '-1890'
1885 1887 1889 1891 -1890 0
c Encoding variable: aux460 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '1892'
c Var 'aux460' direct represents '0' with '1892'
c Var 'aux460' order represents '1' with '1893'
-1892 1893 0
c Var 'aux460' direct represents '1' with '1894'
1892 -1893 1894 0
-1894 1893 0
-1894 -1892 0
c Var 'aux460' direct represents '2' with '-1893'
1892 1894 -1893 0
c Encoding variable: aux461 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '1895'
c Var 'aux461' direct represents '0' with '1895'
c Var 'aux461' order represents '1' with '1896'
-1895 1896 0
c Var 'aux461' direct represents '1' with '1897'
1895 -1896 1897 0
-1897 1896 0
-1897 -1895 0
c Var 'aux461' direct represents '2' with '-1896'
1895 1897 -1896 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '1898'
c Var 'aux462' direct represents '0' with '1898'
c Var 'aux462' order represents '1' with '1899'
-1898 1899 0
c Var 'aux462' direct represents '1' with '1900'
1898 -1899 1900 0
-1900 1899 0
-1900 -1898 0
c Var 'aux462' direct represents '2' with '-1899'
1898 1900 -1899 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '1901'
c Var 'aux463' direct represents '0' with '1901'
c Var 'aux463' order represents '1' with '1902'
-1901 1902 0
c Var 'aux463' direct represents '1' with '1903'
1901 -1902 1903 0
-1903 1902 0
-1903 -1901 0
c Var 'aux463' direct represents '2' with '-1902'
1901 1903 -1902 0
c Encoding variable: aux464 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux463))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '1904'
c Var 'aux464' direct represents '0' with '1904'
c Var 'aux464' order represents '1' with '1905'
-1904 1905 0
c Var 'aux464' direct represents '1' with '1906'
1904 -1905 1906 0
-1906 1905 0
-1906 -1904 0
c Var 'aux464' order represents '2' with '1907'
-1905 1907 0
c Var 'aux464' direct represents '2' with '1908'
1905 -1907 1908 0
-1908 1907 0
-1908 -1905 0
c Var 'aux464' direct represents '3' with '-1907'
1904 1906 1908 -1907 0
c Encoding variable: aux465 with domain: int(0..4) (representing constraint (aux460 + aux462))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '1909'
c Var 'aux465' direct represents '0' with '1909'
c Var 'aux465' order represents '1' with '1910'
-1909 1910 0
c Var 'aux465' direct represents '1' with '1911'
1909 -1910 1911 0
-1911 1910 0
-1911 -1909 0
c Var 'aux465' order represents '2' with '1912'
-1910 1912 0
c Var 'aux465' direct represents '2' with '1913'
1910 -1912 1913 0
-1913 1912 0
-1913 -1910 0
c Var 'aux465' order represents '3' with '1914'
-1912 1914 0
c Var 'aux465' direct represents '3' with '1915'
1912 -1914 1915 0
-1915 1914 0
-1915 -1912 0
c Var 'aux465' direct represents '4' with '-1914'
1909 1911 1913 1915 -1914 0
c Encoding variable: aux466 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '1916'
c Var 'aux466' direct represents '0' with '1916'
c Var 'aux466' order represents '1' with '1917'
-1916 1917 0
c Var 'aux466' direct represents '1' with '1918'
1916 -1917 1918 0
-1918 1917 0
-1918 -1916 0
c Var 'aux466' direct represents '2' with '-1917'
1916 1918 -1917 0
c Encoding variable: aux467 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '1919'
c Var 'aux467' direct represents '0' with '1919'
c Var 'aux467' order represents '1' with '1920'
-1919 1920 0
c Var 'aux467' direct represents '1' with '1921'
1919 -1920 1921 0
-1921 1920 0
-1921 -1919 0
c Var 'aux467' direct represents '2' with '-1920'
1919 1921 -1920 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '1922'
c Var 'aux468' direct represents '0' with '1922'
c Var 'aux468' order represents '1' with '1923'
-1922 1923 0
c Var 'aux468' direct represents '1' with '1924'
1922 -1923 1924 0
-1924 1923 0
-1924 -1922 0
c Var 'aux468' direct represents '2' with '-1923'
1922 1924 -1923 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '1925'
c Var 'aux469' direct represents '0' with '1925'
c Var 'aux469' order represents '1' with '1926'
-1925 1926 0
c Var 'aux469' direct represents '1' with '1927'
1925 -1926 1927 0
-1927 1926 0
-1927 -1925 0
c Var 'aux469' direct represents '2' with '-1926'
1925 1927 -1926 0
c Encoding variable: aux470 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux469))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '1928'
c Var 'aux470' direct represents '0' with '1928'
c Var 'aux470' order represents '1' with '1929'
-1928 1929 0
c Var 'aux470' direct represents '1' with '1930'
1928 -1929 1930 0
-1930 1929 0
-1930 -1928 0
c Var 'aux470' order represents '2' with '1931'
-1929 1931 0
c Var 'aux470' direct represents '2' with '1932'
1929 -1931 1932 0
-1932 1931 0
-1932 -1929 0
c Var 'aux470' direct represents '3' with '-1931'
1928 1930 1932 -1931 0
c Encoding variable: aux471 with domain: int(0..4) (representing constraint (aux466 + aux468))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '1933'
c Var 'aux471' direct represents '0' with '1933'
c Var 'aux471' order represents '1' with '1934'
-1933 1934 0
c Var 'aux471' direct represents '1' with '1935'
1933 -1934 1935 0
-1935 1934 0
-1935 -1933 0
c Var 'aux471' order represents '2' with '1936'
-1934 1936 0
c Var 'aux471' direct represents '2' with '1937'
1934 -1936 1937 0
-1937 1936 0
-1937 -1934 0
c Var 'aux471' order represents '3' with '1938'
-1936 1938 0
c Var 'aux471' direct represents '3' with '1939'
1936 -1938 1939 0
-1939 1938 0
-1939 -1936 0
c Var 'aux471' direct represents '4' with '-1938'
1933 1935 1937 1939 -1938 0
c Encoding variable: aux472 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '1940'
c Var 'aux472' direct represents '0' with '1940'
c Var 'aux472' order represents '1' with '1941'
-1940 1941 0
c Var 'aux472' direct represents '1' with '1942'
1940 -1941 1942 0
-1942 1941 0
-1942 -1940 0
c Var 'aux472' direct represents '2' with '-1941'
1940 1942 -1941 0
c Encoding variable: aux473 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '1943'
c Var 'aux473' direct represents '0' with '1943'
c Var 'aux473' order represents '1' with '1944'
-1943 1944 0
c Var 'aux473' direct represents '1' with '1945'
1943 -1944 1945 0
-1945 1944 0
-1945 -1943 0
c Var 'aux473' direct represents '2' with '-1944'
1943 1945 -1944 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '1946'
c Var 'aux474' direct represents '0' with '1946'
c Var 'aux474' order represents '1' with '1947'
-1946 1947 0
c Var 'aux474' direct represents '1' with '1948'
1946 -1947 1948 0
-1948 1947 0
-1948 -1946 0
c Var 'aux474' direct represents '2' with '-1947'
1946 1948 -1947 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '1949'
c Var 'aux475' direct represents '0' with '1949'
c Var 'aux475' order represents '1' with '1950'
-1949 1950 0
c Var 'aux475' direct represents '1' with '1951'
1949 -1950 1951 0
-1951 1950 0
-1951 -1949 0
c Var 'aux475' direct represents '2' with '-1950'
1949 1951 -1950 0
c Encoding variable: aux476 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux475))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '1952'
c Var 'aux476' direct represents '0' with '1952'
c Var 'aux476' order represents '1' with '1953'
-1952 1953 0
c Var 'aux476' direct represents '1' with '1954'
1952 -1953 1954 0
-1954 1953 0
-1954 -1952 0
c Var 'aux476' order represents '2' with '1955'
-1953 1955 0
c Var 'aux476' direct represents '2' with '1956'
1953 -1955 1956 0
-1956 1955 0
-1956 -1953 0
c Var 'aux476' direct represents '3' with '-1955'
1952 1954 1956 -1955 0
c Encoding variable: aux477 with domain: int(0..4) (representing constraint (aux472 + aux474))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '1957'
c Var 'aux477' direct represents '0' with '1957'
c Var 'aux477' order represents '1' with '1958'
-1957 1958 0
c Var 'aux477' direct represents '1' with '1959'
1957 -1958 1959 0
-1959 1958 0
-1959 -1957 0
c Var 'aux477' order represents '2' with '1960'
-1958 1960 0
c Var 'aux477' direct represents '2' with '1961'
1958 -1960 1961 0
-1961 1960 0
-1961 -1958 0
c Var 'aux477' order represents '3' with '1962'
-1960 1962 0
c Var 'aux477' direct represents '3' with '1963'
1960 -1962 1963 0
-1963 1962 0
-1963 -1960 0
c Var 'aux477' direct represents '4' with '-1962'
1957 1959 1961 1963 -1962 0
c Encoding variable: aux478 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '1964'
c Var 'aux478' direct represents '0' with '1964'
c Var 'aux478' order represents '1' with '1965'
-1964 1965 0
c Var 'aux478' direct represents '1' with '1966'
1964 -1965 1966 0
-1966 1965 0
-1966 -1964 0
c Var 'aux478' direct represents '2' with '-1965'
1964 1966 -1965 0
c Encoding variable: aux479 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '1967'
c Var 'aux479' direct represents '0' with '1967'
c Var 'aux479' order represents '1' with '1968'
-1967 1968 0
c Var 'aux479' direct represents '1' with '1969'
1967 -1968 1969 0
-1969 1968 0
-1969 -1967 0
c Var 'aux479' direct represents '2' with '-1968'
1967 1969 -1968 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '1970'
c Var 'aux480' direct represents '0' with '1970'
c Var 'aux480' order represents '1' with '1971'
-1970 1971 0
c Var 'aux480' direct represents '1' with '1972'
1970 -1971 1972 0
-1972 1971 0
-1972 -1970 0
c Var 'aux480' direct represents '2' with '-1971'
1970 1972 -1971 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '1973'
c Var 'aux481' direct represents '0' with '1973'
c Var 'aux481' order represents '1' with '1974'
-1973 1974 0
c Var 'aux481' direct represents '1' with '1975'
1973 -1974 1975 0
-1975 1974 0
-1975 -1973 0
c Var 'aux481' direct represents '2' with '-1974'
1973 1975 -1974 0
c Encoding variable: aux482 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux481))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '1976'
c Var 'aux482' direct represents '0' with '1976'
c Var 'aux482' order represents '1' with '1977'
-1976 1977 0
c Var 'aux482' direct represents '1' with '1978'
1976 -1977 1978 0
-1978 1977 0
-1978 -1976 0
c Var 'aux482' order represents '2' with '1979'
-1977 1979 0
c Var 'aux482' direct represents '2' with '1980'
1977 -1979 1980 0
-1980 1979 0
-1980 -1977 0
c Var 'aux482' direct represents '3' with '-1979'
1976 1978 1980 -1979 0
c Encoding variable: aux483 with domain: int(0..4) (representing constraint (aux478 + aux480))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '1981'
c Var 'aux483' direct represents '0' with '1981'
c Var 'aux483' order represents '1' with '1982'
-1981 1982 0
c Var 'aux483' direct represents '1' with '1983'
1981 -1982 1983 0
-1983 1982 0
-1983 -1981 0
c Var 'aux483' order represents '2' with '1984'
-1982 1984 0
c Var 'aux483' direct represents '2' with '1985'
1982 -1984 1985 0
-1985 1984 0
-1985 -1982 0
c Var 'aux483' order represents '3' with '1986'
-1984 1986 0
c Var 'aux483' direct represents '3' with '1987'
1984 -1986 1987 0
-1987 1986 0
-1987 -1984 0
c Var 'aux483' direct represents '4' with '-1986'
1981 1983 1985 1987 -1986 0
c Encoding variable: aux484 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '1988'
c Var 'aux484' direct represents '0' with '1988'
c Var 'aux484' order represents '1' with '1989'
-1988 1989 0
c Var 'aux484' direct represents '1' with '1990'
1988 -1989 1990 0
-1990 1989 0
-1990 -1988 0
c Var 'aux484' direct represents '2' with '-1989'
1988 1990 -1989 0
c Encoding variable: aux485 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '1991'
c Var 'aux485' direct represents '0' with '1991'
c Var 'aux485' order represents '1' with '1992'
-1991 1992 0
c Var 'aux485' direct represents '1' with '1993'
1991 -1992 1993 0
-1993 1992 0
-1993 -1991 0
c Var 'aux485' direct represents '2' with '-1992'
1991 1993 -1992 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '1994'
c Var 'aux486' direct represents '0' with '1994'
c Var 'aux486' order represents '1' with '1995'
-1994 1995 0
c Var 'aux486' direct represents '1' with '1996'
1994 -1995 1996 0
-1996 1995 0
-1996 -1994 0
c Var 'aux486' direct represents '2' with '-1995'
1994 1996 -1995 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '1997'
c Var 'aux487' direct represents '0' with '1997'
c Var 'aux487' order represents '1' with '1998'
-1997 1998 0
c Var 'aux487' direct represents '1' with '1999'
1997 -1998 1999 0
-1999 1998 0
-1999 -1997 0
c Var 'aux487' direct represents '2' with '-1998'
1997 1999 -1998 0
c Encoding variable: aux488 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux487))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2000'
c Var 'aux488' direct represents '0' with '2000'
c Var 'aux488' order represents '1' with '2001'
-2000 2001 0
c Var 'aux488' direct represents '1' with '2002'
2000 -2001 2002 0
-2002 2001 0
-2002 -2000 0
c Var 'aux488' order represents '2' with '2003'
-2001 2003 0
c Var 'aux488' direct represents '2' with '2004'
2001 -2003 2004 0
-2004 2003 0
-2004 -2001 0
c Var 'aux488' direct represents '3' with '-2003'
2000 2002 2004 -2003 0
c Encoding variable: aux489 with domain: int(0..4) (representing constraint (aux484 + aux486))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2005'
c Var 'aux489' direct represents '0' with '2005'
c Var 'aux489' order represents '1' with '2006'
-2005 2006 0
c Var 'aux489' direct represents '1' with '2007'
2005 -2006 2007 0
-2007 2006 0
-2007 -2005 0
c Var 'aux489' order represents '2' with '2008'
-2006 2008 0
c Var 'aux489' direct represents '2' with '2009'
2006 -2008 2009 0
-2009 2008 0
-2009 -2006 0
c Var 'aux489' order represents '3' with '2010'
-2008 2010 0
c Var 'aux489' direct represents '3' with '2011'
2008 -2010 2011 0
-2011 2010 0
-2011 -2008 0
c Var 'aux489' direct represents '4' with '-2010'
2005 2007 2009 2011 -2010 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2012'
c Var 'aux490' direct represents '0' with '2012'
c Var 'aux490' order represents '1' with '2013'
-2012 2013 0
c Var 'aux490' direct represents '1' with '2014'
2012 -2013 2014 0
-2014 2013 0
-2014 -2012 0
c Var 'aux490' direct represents '2' with '-2013'
2012 2014 -2013 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2015'
c Var 'aux491' direct represents '0' with '2015'
c Var 'aux491' order represents '1' with '2016'
-2015 2016 0
c Var 'aux491' direct represents '1' with '2017'
2015 -2016 2017 0
-2017 2016 0
-2017 -2015 0
c Var 'aux491' direct represents '2' with '-2016'
2015 2017 -2016 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2018'
c Var 'aux492' direct represents '0' with '2018'
c Var 'aux492' order represents '1' with '2019'
-2018 2019 0
c Var 'aux492' direct represents '1' with '2020'
2018 -2019 2020 0
-2020 2019 0
-2020 -2018 0
c Var 'aux492' direct represents '2' with '-2019'
2018 2020 -2019 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2021'
c Var 'aux493' direct represents '0' with '2021'
c Var 'aux493' order represents '1' with '2022'
-2021 2022 0
c Var 'aux493' direct represents '1' with '2023'
2021 -2022 2023 0
-2023 2022 0
-2023 -2021 0
c Var 'aux493' direct represents '2' with '-2022'
2021 2023 -2022 0
c Encoding variable: aux494 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux493))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2024'
c Var 'aux494' direct represents '0' with '2024'
c Var 'aux494' order represents '1' with '2025'
-2024 2025 0
c Var 'aux494' direct represents '1' with '2026'
2024 -2025 2026 0
-2026 2025 0
-2026 -2024 0
c Var 'aux494' order represents '2' with '2027'
-2025 2027 0
c Var 'aux494' direct represents '2' with '2028'
2025 -2027 2028 0
-2028 2027 0
-2028 -2025 0
c Var 'aux494' direct represents '3' with '-2027'
2024 2026 2028 -2027 0
c Encoding variable: aux495 with domain: int(0..4) (representing constraint (aux490 + aux492))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2029'
c Var 'aux495' direct represents '0' with '2029'
c Var 'aux495' order represents '1' with '2030'
-2029 2030 0
c Var 'aux495' direct represents '1' with '2031'
2029 -2030 2031 0
-2031 2030 0
-2031 -2029 0
c Var 'aux495' order represents '2' with '2032'
-2030 2032 0
c Var 'aux495' direct represents '2' with '2033'
2030 -2032 2033 0
-2033 2032 0
-2033 -2030 0
c Var 'aux495' order represents '3' with '2034'
-2032 2034 0
c Var 'aux495' direct represents '3' with '2035'
2032 -2034 2035 0
-2035 2034 0
-2035 -2032 0
c Var 'aux495' direct represents '4' with '-2034'
2029 2031 2033 2035 -2034 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2036'
c Var 'aux496' direct represents '0' with '2036'
c Var 'aux496' order represents '1' with '2037'
-2036 2037 0
c Var 'aux496' direct represents '1' with '2038'
2036 -2037 2038 0
-2038 2037 0
-2038 -2036 0
c Var 'aux496' direct represents '2' with '-2037'
2036 2038 -2037 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2039'
c Var 'aux497' direct represents '0' with '2039'
c Var 'aux497' order represents '1' with '2040'
-2039 2040 0
c Var 'aux497' direct represents '1' with '2041'
2039 -2040 2041 0
-2041 2040 0
-2041 -2039 0
c Var 'aux497' direct represents '2' with '-2040'
2039 2041 -2040 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2042'
c Var 'aux498' direct represents '0' with '2042'
c Var 'aux498' order represents '1' with '2043'
-2042 2043 0
c Var 'aux498' direct represents '1' with '2044'
2042 -2043 2044 0
-2044 2043 0
-2044 -2042 0
c Var 'aux498' direct represents '2' with '-2043'
2042 2044 -2043 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2045'
c Var 'aux499' direct represents '0' with '2045'
c Var 'aux499' order represents '1' with '2046'
-2045 2046 0
c Var 'aux499' direct represents '1' with '2047'
2045 -2046 2047 0
-2047 2046 0
-2047 -2045 0
c Var 'aux499' direct represents '2' with '-2046'
2045 2047 -2046 0
c Encoding variable: aux500 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux499))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2048'
c Var 'aux500' direct represents '0' with '2048'
c Var 'aux500' order represents '1' with '2049'
-2048 2049 0
c Var 'aux500' direct represents '1' with '2050'
2048 -2049 2050 0
-2050 2049 0
-2050 -2048 0
c Var 'aux500' order represents '2' with '2051'
-2049 2051 0
c Var 'aux500' direct represents '2' with '2052'
2049 -2051 2052 0
-2052 2051 0
-2052 -2049 0
c Var 'aux500' direct represents '3' with '-2051'
2048 2050 2052 -2051 0
c Encoding variable: aux501 with domain: int(0..4) (representing constraint (aux496 + aux498))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2053'
c Var 'aux501' direct represents '0' with '2053'
c Var 'aux501' order represents '1' with '2054'
-2053 2054 0
c Var 'aux501' direct represents '1' with '2055'
2053 -2054 2055 0
-2055 2054 0
-2055 -2053 0
c Var 'aux501' order represents '2' with '2056'
-2054 2056 0
c Var 'aux501' direct represents '2' with '2057'
2054 -2056 2057 0
-2057 2056 0
-2057 -2054 0
c Var 'aux501' order represents '3' with '2058'
-2056 2058 0
c Var 'aux501' direct represents '3' with '2059'
2056 -2058 2059 0
-2059 2058 0
-2059 -2056 0
c Var 'aux501' direct represents '4' with '-2058'
2053 2055 2057 2059 -2058 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2060'
c Var 'aux502' direct represents '0' with '2060'
c Var 'aux502' order represents '1' with '2061'
-2060 2061 0
c Var 'aux502' direct represents '1' with '2062'
2060 -2061 2062 0
-2062 2061 0
-2062 -2060 0
c Var 'aux502' direct represents '2' with '-2061'
2060 2062 -2061 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2063'
c Var 'aux503' direct represents '0' with '2063'
c Var 'aux503' order represents '1' with '2064'
-2063 2064 0
c Var 'aux503' direct represents '1' with '2065'
2063 -2064 2065 0
-2065 2064 0
-2065 -2063 0
c Var 'aux503' direct represents '2' with '-2064'
2063 2065 -2064 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2066'
c Var 'aux504' direct represents '0' with '2066'
c Var 'aux504' order represents '1' with '2067'
-2066 2067 0
c Var 'aux504' direct represents '1' with '2068'
2066 -2067 2068 0
-2068 2067 0
-2068 -2066 0
c Var 'aux504' direct represents '2' with '-2067'
2066 2068 -2067 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2069'
c Var 'aux505' direct represents '0' with '2069'
c Var 'aux505' order represents '1' with '2070'
-2069 2070 0
c Var 'aux505' direct represents '1' with '2071'
2069 -2070 2071 0
-2071 2070 0
-2071 -2069 0
c Var 'aux505' direct represents '2' with '-2070'
2069 2071 -2070 0
c Encoding variable: aux506 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux505))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2072'
c Var 'aux506' direct represents '0' with '2072'
c Var 'aux506' order represents '1' with '2073'
-2072 2073 0
c Var 'aux506' direct represents '1' with '2074'
2072 -2073 2074 0
-2074 2073 0
-2074 -2072 0
c Var 'aux506' order represents '2' with '2075'
-2073 2075 0
c Var 'aux506' direct represents '2' with '2076'
2073 -2075 2076 0
-2076 2075 0
-2076 -2073 0
c Var 'aux506' direct represents '3' with '-2075'
2072 2074 2076 -2075 0
c Encoding variable: aux507 with domain: int(0..4) (representing constraint (aux502 + aux504))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2077'
c Var 'aux507' direct represents '0' with '2077'
c Var 'aux507' order represents '1' with '2078'
-2077 2078 0
c Var 'aux507' direct represents '1' with '2079'
2077 -2078 2079 0
-2079 2078 0
-2079 -2077 0
c Var 'aux507' order represents '2' with '2080'
-2078 2080 0
c Var 'aux507' direct represents '2' with '2081'
2078 -2080 2081 0
-2081 2080 0
-2081 -2078 0
c Var 'aux507' order represents '3' with '2082'
-2080 2082 0
c Var 'aux507' direct represents '3' with '2083'
2080 -2082 2083 0
-2083 2082 0
-2083 -2080 0
c Var 'aux507' direct represents '4' with '-2082'
2077 2079 2081 2083 -2082 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2084'
c Var 'aux508' direct represents '0' with '2084'
c Var 'aux508' order represents '1' with '2085'
-2084 2085 0
c Var 'aux508' direct represents '1' with '2086'
2084 -2085 2086 0
-2086 2085 0
-2086 -2084 0
c Var 'aux508' direct represents '2' with '-2085'
2084 2086 -2085 0
c Encoding variable: aux509 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2087'
c Var 'aux509' direct represents '0' with '2087'
c Var 'aux509' order represents '1' with '2088'
-2087 2088 0
c Var 'aux509' direct represents '1' with '2089'
2087 -2088 2089 0
-2089 2088 0
-2089 -2087 0
c Var 'aux509' direct represents '2' with '-2088'
2087 2089 -2088 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2090'
c Var 'aux510' direct represents '0' with '2090'
c Var 'aux510' order represents '1' with '2091'
-2090 2091 0
c Var 'aux510' direct represents '1' with '2092'
2090 -2091 2092 0
-2092 2091 0
-2092 -2090 0
c Var 'aux510' direct represents '2' with '-2091'
2090 2092 -2091 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2093'
c Var 'aux511' direct represents '0' with '2093'
c Var 'aux511' order represents '1' with '2094'
-2093 2094 0
c Var 'aux511' direct represents '1' with '2095'
2093 -2094 2095 0
-2095 2094 0
-2095 -2093 0
c Var 'aux511' direct represents '2' with '-2094'
2093 2095 -2094 0
c Encoding variable: aux512 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux511))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2096'
c Var 'aux512' direct represents '0' with '2096'
c Var 'aux512' order represents '1' with '2097'
-2096 2097 0
c Var 'aux512' direct represents '1' with '2098'
2096 -2097 2098 0
-2098 2097 0
-2098 -2096 0
c Var 'aux512' order represents '2' with '2099'
-2097 2099 0
c Var 'aux512' direct represents '2' with '2100'
2097 -2099 2100 0
-2100 2099 0
-2100 -2097 0
c Var 'aux512' direct represents '3' with '-2099'
2096 2098 2100 -2099 0
c Encoding variable: aux513 with domain: int(0..4) (representing constraint (aux508 + aux510))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2101'
c Var 'aux513' direct represents '0' with '2101'
c Var 'aux513' order represents '1' with '2102'
-2101 2102 0
c Var 'aux513' direct represents '1' with '2103'
2101 -2102 2103 0
-2103 2102 0
-2103 -2101 0
c Var 'aux513' order represents '2' with '2104'
-2102 2104 0
c Var 'aux513' direct represents '2' with '2105'
2102 -2104 2105 0
-2105 2104 0
-2105 -2102 0
c Var 'aux513' order represents '3' with '2106'
-2104 2106 0
c Var 'aux513' direct represents '3' with '2107'
2104 -2106 2107 0
-2107 2106 0
-2107 -2104 0
c Var 'aux513' direct represents '4' with '-2106'
2101 2103 2105 2107 -2106 0
c Encoding variable: aux514 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2108'
c Var 'aux514' direct represents '0' with '2108'
c Var 'aux514' order represents '1' with '2109'
-2108 2109 0
c Var 'aux514' direct represents '1' with '2110'
2108 -2109 2110 0
-2110 2109 0
-2110 -2108 0
c Var 'aux514' direct represents '2' with '-2109'
2108 2110 -2109 0
c Encoding variable: aux515 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2111'
c Var 'aux515' direct represents '0' with '2111'
c Var 'aux515' order represents '1' with '2112'
-2111 2112 0
c Var 'aux515' direct represents '1' with '2113'
2111 -2112 2113 0
-2113 2112 0
-2113 -2111 0
c Var 'aux515' direct represents '2' with '-2112'
2111 2113 -2112 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2114'
c Var 'aux516' direct represents '0' with '2114'
c Var 'aux516' order represents '1' with '2115'
-2114 2115 0
c Var 'aux516' direct represents '1' with '2116'
2114 -2115 2116 0
-2116 2115 0
-2116 -2114 0
c Var 'aux516' direct represents '2' with '-2115'
2114 2116 -2115 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2117'
c Var 'aux517' direct represents '0' with '2117'
c Var 'aux517' order represents '1' with '2118'
-2117 2118 0
c Var 'aux517' direct represents '1' with '2119'
2117 -2118 2119 0
-2119 2118 0
-2119 -2117 0
c Var 'aux517' direct represents '2' with '-2118'
2117 2119 -2118 0
c Encoding variable: aux518 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux517))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2120'
c Var 'aux518' direct represents '0' with '2120'
c Var 'aux518' order represents '1' with '2121'
-2120 2121 0
c Var 'aux518' direct represents '1' with '2122'
2120 -2121 2122 0
-2122 2121 0
-2122 -2120 0
c Var 'aux518' order represents '2' with '2123'
-2121 2123 0
c Var 'aux518' direct represents '2' with '2124'
2121 -2123 2124 0
-2124 2123 0
-2124 -2121 0
c Var 'aux518' direct represents '3' with '-2123'
2120 2122 2124 -2123 0
c Encoding variable: aux519 with domain: int(0..4) (representing constraint (aux514 + aux516))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2125'
c Var 'aux519' direct represents '0' with '2125'
c Var 'aux519' order represents '1' with '2126'
-2125 2126 0
c Var 'aux519' direct represents '1' with '2127'
2125 -2126 2127 0
-2127 2126 0
-2127 -2125 0
c Var 'aux519' order represents '2' with '2128'
-2126 2128 0
c Var 'aux519' direct represents '2' with '2129'
2126 -2128 2129 0
-2129 2128 0
-2129 -2126 0
c Var 'aux519' order represents '3' with '2130'
-2128 2130 0
c Var 'aux519' direct represents '3' with '2131'
2128 -2130 2131 0
-2131 2130 0
-2131 -2128 0
c Var 'aux519' direct represents '4' with '-2130'
2125 2127 2129 2131 -2130 0
c Encoding variable: aux520 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2132'
c Var 'aux520' direct represents '0' with '2132'
c Var 'aux520' order represents '1' with '2133'
-2132 2133 0
c Var 'aux520' direct represents '1' with '2134'
2132 -2133 2134 0
-2134 2133 0
-2134 -2132 0
c Var 'aux520' direct represents '2' with '-2133'
2132 2134 -2133 0
c Encoding variable: aux521 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2135'
c Var 'aux521' direct represents '0' with '2135'
c Var 'aux521' order represents '1' with '2136'
-2135 2136 0
c Var 'aux521' direct represents '1' with '2137'
2135 -2136 2137 0
-2137 2136 0
-2137 -2135 0
c Var 'aux521' direct represents '2' with '-2136'
2135 2137 -2136 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2138'
c Var 'aux522' direct represents '0' with '2138'
c Var 'aux522' order represents '1' with '2139'
-2138 2139 0
c Var 'aux522' direct represents '1' with '2140'
2138 -2139 2140 0
-2140 2139 0
-2140 -2138 0
c Var 'aux522' direct represents '2' with '-2139'
2138 2140 -2139 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2141'
c Var 'aux523' direct represents '0' with '2141'
c Var 'aux523' order represents '1' with '2142'
-2141 2142 0
c Var 'aux523' direct represents '1' with '2143'
2141 -2142 2143 0
-2143 2142 0
-2143 -2141 0
c Var 'aux523' direct represents '2' with '-2142'
2141 2143 -2142 0
c Encoding variable: aux524 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux523))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2144'
c Var 'aux524' direct represents '0' with '2144'
c Var 'aux524' order represents '1' with '2145'
-2144 2145 0
c Var 'aux524' direct represents '1' with '2146'
2144 -2145 2146 0
-2146 2145 0
-2146 -2144 0
c Var 'aux524' order represents '2' with '2147'
-2145 2147 0
c Var 'aux524' direct represents '2' with '2148'
2145 -2147 2148 0
-2148 2147 0
-2148 -2145 0
c Var 'aux524' direct represents '3' with '-2147'
2144 2146 2148 -2147 0
c Encoding variable: aux525 with domain: int(0..4) (representing constraint (aux520 + aux522))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2149'
c Var 'aux525' direct represents '0' with '2149'
c Var 'aux525' order represents '1' with '2150'
-2149 2150 0
c Var 'aux525' direct represents '1' with '2151'
2149 -2150 2151 0
-2151 2150 0
-2151 -2149 0
c Var 'aux525' order represents '2' with '2152'
-2150 2152 0
c Var 'aux525' direct represents '2' with '2153'
2150 -2152 2153 0
-2153 2152 0
-2153 -2150 0
c Var 'aux525' order represents '3' with '2154'
-2152 2154 0
c Var 'aux525' direct represents '3' with '2155'
2152 -2154 2155 0
-2155 2154 0
-2155 -2152 0
c Var 'aux525' direct represents '4' with '-2154'
2149 2151 2153 2155 -2154 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2156'
c Var 'aux526' direct represents '0' with '2156'
c Var 'aux526' order represents '1' with '2157'
-2156 2157 0
c Var 'aux526' direct represents '1' with '2158'
2156 -2157 2158 0
-2158 2157 0
-2158 -2156 0
c Var 'aux526' direct represents '2' with '-2157'
2156 2158 -2157 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2159'
c Var 'aux527' direct represents '0' with '2159'
c Var 'aux527' order represents '1' with '2160'
-2159 2160 0
c Var 'aux527' direct represents '1' with '2161'
2159 -2160 2161 0
-2161 2160 0
-2161 -2159 0
c Var 'aux527' direct represents '2' with '-2160'
2159 2161 -2160 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2162'
c Var 'aux528' direct represents '0' with '2162'
c Var 'aux528' order represents '1' with '2163'
-2162 2163 0
c Var 'aux528' direct represents '1' with '2164'
2162 -2163 2164 0
-2164 2163 0
-2164 -2162 0
c Var 'aux528' direct represents '2' with '-2163'
2162 2164 -2163 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2165'
c Var 'aux529' direct represents '0' with '2165'
c Var 'aux529' order represents '1' with '2166'
-2165 2166 0
c Var 'aux529' direct represents '1' with '2167'
2165 -2166 2167 0
-2167 2166 0
-2167 -2165 0
c Var 'aux529' direct represents '2' with '-2166'
2165 2167 -2166 0
c Encoding variable: aux530 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux529))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2168'
c Var 'aux530' direct represents '0' with '2168'
c Var 'aux530' order represents '1' with '2169'
-2168 2169 0
c Var 'aux530' direct represents '1' with '2170'
2168 -2169 2170 0
-2170 2169 0
-2170 -2168 0
c Var 'aux530' order represents '2' with '2171'
-2169 2171 0
c Var 'aux530' direct represents '2' with '2172'
2169 -2171 2172 0
-2172 2171 0
-2172 -2169 0
c Var 'aux530' direct represents '3' with '-2171'
2168 2170 2172 -2171 0
c Encoding variable: aux531 with domain: int(0..4) (representing constraint (aux526 + aux528))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2173'
c Var 'aux531' direct represents '0' with '2173'
c Var 'aux531' order represents '1' with '2174'
-2173 2174 0
c Var 'aux531' direct represents '1' with '2175'
2173 -2174 2175 0
-2175 2174 0
-2175 -2173 0
c Var 'aux531' order represents '2' with '2176'
-2174 2176 0
c Var 'aux531' direct represents '2' with '2177'
2174 -2176 2177 0
-2177 2176 0
-2177 -2174 0
c Var 'aux531' order represents '3' with '2178'
-2176 2178 0
c Var 'aux531' direct represents '3' with '2179'
2176 -2178 2179 0
-2179 2178 0
-2179 -2176 0
c Var 'aux531' direct represents '4' with '-2178'
2173 2175 2177 2179 -2178 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2180'
c Var 'aux532' direct represents '0' with '2180'
c Var 'aux532' order represents '1' with '2181'
-2180 2181 0
c Var 'aux532' direct represents '1' with '2182'
2180 -2181 2182 0
-2182 2181 0
-2182 -2180 0
c Var 'aux532' direct represents '2' with '-2181'
2180 2182 -2181 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2183'
c Var 'aux533' direct represents '0' with '2183'
c Var 'aux533' order represents '1' with '2184'
-2183 2184 0
c Var 'aux533' direct represents '1' with '2185'
2183 -2184 2185 0
-2185 2184 0
-2185 -2183 0
c Var 'aux533' direct represents '2' with '-2184'
2183 2185 -2184 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2186'
c Var 'aux534' direct represents '0' with '2186'
c Var 'aux534' order represents '1' with '2187'
-2186 2187 0
c Var 'aux534' direct represents '1' with '2188'
2186 -2187 2188 0
-2188 2187 0
-2188 -2186 0
c Var 'aux534' direct represents '2' with '-2187'
2186 2188 -2187 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2189'
c Var 'aux535' direct represents '0' with '2189'
c Var 'aux535' order represents '1' with '2190'
-2189 2190 0
c Var 'aux535' direct represents '1' with '2191'
2189 -2190 2191 0
-2191 2190 0
-2191 -2189 0
c Var 'aux535' direct represents '2' with '-2190'
2189 2191 -2190 0
c Encoding variable: aux536 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux535))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2192'
c Var 'aux536' direct represents '0' with '2192'
c Var 'aux536' order represents '1' with '2193'
-2192 2193 0
c Var 'aux536' direct represents '1' with '2194'
2192 -2193 2194 0
-2194 2193 0
-2194 -2192 0
c Var 'aux536' order represents '2' with '2195'
-2193 2195 0
c Var 'aux536' direct represents '2' with '2196'
2193 -2195 2196 0
-2196 2195 0
-2196 -2193 0
c Var 'aux536' direct represents '3' with '-2195'
2192 2194 2196 -2195 0
c Encoding variable: aux537 with domain: int(0..4) (representing constraint (aux532 + aux534))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2197'
c Var 'aux537' direct represents '0' with '2197'
c Var 'aux537' order represents '1' with '2198'
-2197 2198 0
c Var 'aux537' direct represents '1' with '2199'
2197 -2198 2199 0
-2199 2198 0
-2199 -2197 0
c Var 'aux537' order represents '2' with '2200'
-2198 2200 0
c Var 'aux537' direct represents '2' with '2201'
2198 -2200 2201 0
-2201 2200 0
-2201 -2198 0
c Var 'aux537' order represents '3' with '2202'
-2200 2202 0
c Var 'aux537' direct represents '3' with '2203'
2200 -2202 2203 0
-2203 2202 0
-2203 -2200 0
c Var 'aux537' direct represents '4' with '-2202'
2197 2199 2201 2203 -2202 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2204'
c Var 'aux538' direct represents '0' with '2204'
c Var 'aux538' order represents '1' with '2205'
-2204 2205 0
c Var 'aux538' direct represents '1' with '2206'
2204 -2205 2206 0
-2206 2205 0
-2206 -2204 0
c Var 'aux538' direct represents '2' with '-2205'
2204 2206 -2205 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2207'
c Var 'aux539' direct represents '0' with '2207'
c Var 'aux539' order represents '1' with '2208'
-2207 2208 0
c Var 'aux539' direct represents '1' with '2209'
2207 -2208 2209 0
-2209 2208 0
-2209 -2207 0
c Var 'aux539' direct represents '2' with '-2208'
2207 2209 -2208 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2210'
c Var 'aux540' direct represents '0' with '2210'
c Var 'aux540' order represents '1' with '2211'
-2210 2211 0
c Var 'aux540' direct represents '1' with '2212'
2210 -2211 2212 0
-2212 2211 0
-2212 -2210 0
c Var 'aux540' direct represents '2' with '-2211'
2210 2212 -2211 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2213'
c Var 'aux541' direct represents '0' with '2213'
c Var 'aux541' order represents '1' with '2214'
-2213 2214 0
c Var 'aux541' direct represents '1' with '2215'
2213 -2214 2215 0
-2215 2214 0
-2215 -2213 0
c Var 'aux541' direct represents '2' with '-2214'
2213 2215 -2214 0
c Encoding variable: aux542 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux541))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2216'
c Var 'aux542' direct represents '0' with '2216'
c Var 'aux542' order represents '1' with '2217'
-2216 2217 0
c Var 'aux542' direct represents '1' with '2218'
2216 -2217 2218 0
-2218 2217 0
-2218 -2216 0
c Var 'aux542' order represents '2' with '2219'
-2217 2219 0
c Var 'aux542' direct represents '2' with '2220'
2217 -2219 2220 0
-2220 2219 0
-2220 -2217 0
c Var 'aux542' direct represents '3' with '-2219'
2216 2218 2220 -2219 0
c Encoding variable: aux543 with domain: int(0..4) (representing constraint (aux538 + aux540))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2221'
c Var 'aux543' direct represents '0' with '2221'
c Var 'aux543' order represents '1' with '2222'
-2221 2222 0
c Var 'aux543' direct represents '1' with '2223'
2221 -2222 2223 0
-2223 2222 0
-2223 -2221 0
c Var 'aux543' order represents '2' with '2224'
-2222 2224 0
c Var 'aux543' direct represents '2' with '2225'
2222 -2224 2225 0
-2225 2224 0
-2225 -2222 0
c Var 'aux543' order represents '3' with '2226'
-2224 2226 0
c Var 'aux543' direct represents '3' with '2227'
2224 -2226 2227 0
-2227 2226 0
-2227 -2224 0
c Var 'aux543' direct represents '4' with '-2226'
2221 2223 2225 2227 -2226 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2228'
c Var 'aux544' direct represents '0' with '2228'
c Var 'aux544' order represents '1' with '2229'
-2228 2229 0
c Var 'aux544' direct represents '1' with '2230'
2228 -2229 2230 0
-2230 2229 0
-2230 -2228 0
c Var 'aux544' direct represents '2' with '-2229'
2228 2230 -2229 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2231'
c Var 'aux545' direct represents '0' with '2231'
c Var 'aux545' order represents '1' with '2232'
-2231 2232 0
c Var 'aux545' direct represents '1' with '2233'
2231 -2232 2233 0
-2233 2232 0
-2233 -2231 0
c Var 'aux545' direct represents '2' with '-2232'
2231 2233 -2232 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2234'
c Var 'aux546' direct represents '0' with '2234'
c Var 'aux546' order represents '1' with '2235'
-2234 2235 0
c Var 'aux546' direct represents '1' with '2236'
2234 -2235 2236 0
-2236 2235 0
-2236 -2234 0
c Var 'aux546' direct represents '2' with '-2235'
2234 2236 -2235 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2237'
c Var 'aux547' direct represents '0' with '2237'
c Var 'aux547' order represents '1' with '2238'
-2237 2238 0
c Var 'aux547' direct represents '1' with '2239'
2237 -2238 2239 0
-2239 2238 0
-2239 -2237 0
c Var 'aux547' direct represents '2' with '-2238'
2237 2239 -2238 0
c Encoding variable: aux548 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux547))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2240'
c Var 'aux548' direct represents '0' with '2240'
c Var 'aux548' order represents '1' with '2241'
-2240 2241 0
c Var 'aux548' direct represents '1' with '2242'
2240 -2241 2242 0
-2242 2241 0
-2242 -2240 0
c Var 'aux548' order represents '2' with '2243'
-2241 2243 0
c Var 'aux548' direct represents '2' with '2244'
2241 -2243 2244 0
-2244 2243 0
-2244 -2241 0
c Var 'aux548' direct represents '3' with '-2243'
2240 2242 2244 -2243 0
c Encoding variable: aux549 with domain: int(0..4) (representing constraint (aux544 + aux546))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2245'
c Var 'aux549' direct represents '0' with '2245'
c Var 'aux549' order represents '1' with '2246'
-2245 2246 0
c Var 'aux549' direct represents '1' with '2247'
2245 -2246 2247 0
-2247 2246 0
-2247 -2245 0
c Var 'aux549' order represents '2' with '2248'
-2246 2248 0
c Var 'aux549' direct represents '2' with '2249'
2246 -2248 2249 0
-2249 2248 0
-2249 -2246 0
c Var 'aux549' order represents '3' with '2250'
-2248 2250 0
c Var 'aux549' direct represents '3' with '2251'
2248 -2250 2251 0
-2251 2250 0
-2251 -2248 0
c Var 'aux549' direct represents '4' with '-2250'
2245 2247 2249 2251 -2250 0
c Encoding variable: aux550 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2252'
c Var 'aux550' direct represents '0' with '2252'
c Var 'aux550' order represents '1' with '2253'
-2252 2253 0
c Var 'aux550' direct represents '1' with '2254'
2252 -2253 2254 0
-2254 2253 0
-2254 -2252 0
c Var 'aux550' direct represents '2' with '-2253'
2252 2254 -2253 0
c Encoding variable: aux551 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2255'
c Var 'aux551' direct represents '0' with '2255'
c Var 'aux551' order represents '1' with '2256'
-2255 2256 0
c Var 'aux551' direct represents '1' with '2257'
2255 -2256 2257 0
-2257 2256 0
-2257 -2255 0
c Var 'aux551' direct represents '2' with '-2256'
2255 2257 -2256 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2258'
c Var 'aux552' direct represents '0' with '2258'
c Var 'aux552' order represents '1' with '2259'
-2258 2259 0
c Var 'aux552' direct represents '1' with '2260'
2258 -2259 2260 0
-2260 2259 0
-2260 -2258 0
c Var 'aux552' direct represents '2' with '-2259'
2258 2260 -2259 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2261'
c Var 'aux553' direct represents '0' with '2261'
c Var 'aux553' order represents '1' with '2262'
-2261 2262 0
c Var 'aux553' direct represents '1' with '2263'
2261 -2262 2263 0
-2263 2262 0
-2263 -2261 0
c Var 'aux553' direct represents '2' with '-2262'
2261 2263 -2262 0
c Encoding variable: aux554 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux553))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2264'
c Var 'aux554' direct represents '0' with '2264'
c Var 'aux554' order represents '1' with '2265'
-2264 2265 0
c Var 'aux554' direct represents '1' with '2266'
2264 -2265 2266 0
-2266 2265 0
-2266 -2264 0
c Var 'aux554' order represents '2' with '2267'
-2265 2267 0
c Var 'aux554' direct represents '2' with '2268'
2265 -2267 2268 0
-2268 2267 0
-2268 -2265 0
c Var 'aux554' direct represents '3' with '-2267'
2264 2266 2268 -2267 0
c Encoding variable: aux555 with domain: int(0..4) (representing constraint (aux550 + aux552))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2269'
c Var 'aux555' direct represents '0' with '2269'
c Var 'aux555' order represents '1' with '2270'
-2269 2270 0
c Var 'aux555' direct represents '1' with '2271'
2269 -2270 2271 0
-2271 2270 0
-2271 -2269 0
c Var 'aux555' order represents '2' with '2272'
-2270 2272 0
c Var 'aux555' direct represents '2' with '2273'
2270 -2272 2273 0
-2273 2272 0
-2273 -2270 0
c Var 'aux555' order represents '3' with '2274'
-2272 2274 0
c Var 'aux555' direct represents '3' with '2275'
2272 -2274 2275 0
-2275 2274 0
-2275 -2272 0
c Var 'aux555' direct represents '4' with '-2274'
2269 2271 2273 2275 -2274 0
c Encoding variable: aux556 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2276'
c Var 'aux556' direct represents '0' with '2276'
c Var 'aux556' order represents '1' with '2277'
-2276 2277 0
c Var 'aux556' direct represents '1' with '2278'
2276 -2277 2278 0
-2278 2277 0
-2278 -2276 0
c Var 'aux556' direct represents '2' with '-2277'
2276 2278 -2277 0
c Encoding variable: aux557 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2279'
c Var 'aux557' direct represents '0' with '2279'
c Var 'aux557' order represents '1' with '2280'
-2279 2280 0
c Var 'aux557' direct represents '1' with '2281'
2279 -2280 2281 0
-2281 2280 0
-2281 -2279 0
c Var 'aux557' direct represents '2' with '-2280'
2279 2281 -2280 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2282'
c Var 'aux558' direct represents '0' with '2282'
c Var 'aux558' order represents '1' with '2283'
-2282 2283 0
c Var 'aux558' direct represents '1' with '2284'
2282 -2283 2284 0
-2284 2283 0
-2284 -2282 0
c Var 'aux558' direct represents '2' with '-2283'
2282 2284 -2283 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2285'
c Var 'aux559' direct represents '0' with '2285'
c Var 'aux559' order represents '1' with '2286'
-2285 2286 0
c Var 'aux559' direct represents '1' with '2287'
2285 -2286 2287 0
-2287 2286 0
-2287 -2285 0
c Var 'aux559' direct represents '2' with '-2286'
2285 2287 -2286 0
c Encoding variable: aux560 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux559))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2288'
c Var 'aux560' direct represents '0' with '2288'
c Var 'aux560' order represents '1' with '2289'
-2288 2289 0
c Var 'aux560' direct represents '1' with '2290'
2288 -2289 2290 0
-2290 2289 0
-2290 -2288 0
c Var 'aux560' order represents '2' with '2291'
-2289 2291 0
c Var 'aux560' direct represents '2' with '2292'
2289 -2291 2292 0
-2292 2291 0
-2292 -2289 0
c Var 'aux560' direct represents '3' with '-2291'
2288 2290 2292 -2291 0
c Encoding variable: aux561 with domain: int(0..4) (representing constraint (aux556 + aux558))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2293'
c Var 'aux561' direct represents '0' with '2293'
c Var 'aux561' order represents '1' with '2294'
-2293 2294 0
c Var 'aux561' direct represents '1' with '2295'
2293 -2294 2295 0
-2295 2294 0
-2295 -2293 0
c Var 'aux561' order represents '2' with '2296'
-2294 2296 0
c Var 'aux561' direct represents '2' with '2297'
2294 -2296 2297 0
-2297 2296 0
-2297 -2294 0
c Var 'aux561' order represents '3' with '2298'
-2296 2298 0
c Var 'aux561' direct represents '3' with '2299'
2296 -2298 2299 0
-2299 2298 0
-2299 -2296 0
c Var 'aux561' direct represents '4' with '-2298'
2293 2295 2297 2299 -2298 0
c Encoding variable: aux562 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2300'
c Var 'aux562' direct represents '0' with '2300'
c Var 'aux562' order represents '1' with '2301'
-2300 2301 0
c Var 'aux562' direct represents '1' with '2302'
2300 -2301 2302 0
-2302 2301 0
-2302 -2300 0
c Var 'aux562' direct represents '2' with '-2301'
2300 2302 -2301 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2303'
c Var 'aux563' direct represents '0' with '2303'
c Var 'aux563' order represents '1' with '2304'
-2303 2304 0
c Var 'aux563' direct represents '1' with '2305'
2303 -2304 2305 0
-2305 2304 0
-2305 -2303 0
c Var 'aux563' direct represents '2' with '-2304'
2303 2305 -2304 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2306'
c Var 'aux564' direct represents '0' with '2306'
c Var 'aux564' order represents '1' with '2307'
-2306 2307 0
c Var 'aux564' direct represents '1' with '2308'
2306 -2307 2308 0
-2308 2307 0
-2308 -2306 0
c Var 'aux564' direct represents '2' with '-2307'
2306 2308 -2307 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2309'
c Var 'aux565' direct represents '0' with '2309'
c Var 'aux565' order represents '1' with '2310'
-2309 2310 0
c Var 'aux565' direct represents '1' with '2311'
2309 -2310 2311 0
-2311 2310 0
-2311 -2309 0
c Var 'aux565' direct represents '2' with '-2310'
2309 2311 -2310 0
c Encoding variable: aux566 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux565))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2312'
c Var 'aux566' direct represents '0' with '2312'
c Var 'aux566' order represents '1' with '2313'
-2312 2313 0
c Var 'aux566' direct represents '1' with '2314'
2312 -2313 2314 0
-2314 2313 0
-2314 -2312 0
c Var 'aux566' order represents '2' with '2315'
-2313 2315 0
c Var 'aux566' direct represents '2' with '2316'
2313 -2315 2316 0
-2316 2315 0
-2316 -2313 0
c Var 'aux566' direct represents '3' with '-2315'
2312 2314 2316 -2315 0
c Encoding variable: aux567 with domain: int(0..4) (representing constraint (aux562 + aux564))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2317'
c Var 'aux567' direct represents '0' with '2317'
c Var 'aux567' order represents '1' with '2318'
-2317 2318 0
c Var 'aux567' direct represents '1' with '2319'
2317 -2318 2319 0
-2319 2318 0
-2319 -2317 0
c Var 'aux567' order represents '2' with '2320'
-2318 2320 0
c Var 'aux567' direct represents '2' with '2321'
2318 -2320 2321 0
-2321 2320 0
-2321 -2318 0
c Var 'aux567' order represents '3' with '2322'
-2320 2322 0
c Var 'aux567' direct represents '3' with '2323'
2320 -2322 2323 0
-2323 2322 0
-2323 -2320 0
c Var 'aux567' direct represents '4' with '-2322'
2317 2319 2321 2323 -2322 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2324'
c Var 'aux568' direct represents '0' with '2324'
c Var 'aux568' order represents '1' with '2325'
-2324 2325 0
c Var 'aux568' direct represents '1' with '2326'
2324 -2325 2326 0
-2326 2325 0
-2326 -2324 0
c Var 'aux568' direct represents '2' with '-2325'
2324 2326 -2325 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2327'
c Var 'aux569' direct represents '0' with '2327'
c Var 'aux569' order represents '1' with '2328'
-2327 2328 0
c Var 'aux569' direct represents '1' with '2329'
2327 -2328 2329 0
-2329 2328 0
-2329 -2327 0
c Var 'aux569' direct represents '2' with '-2328'
2327 2329 -2328 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2330'
c Var 'aux570' direct represents '0' with '2330'
c Var 'aux570' order represents '1' with '2331'
-2330 2331 0
c Var 'aux570' direct represents '1' with '2332'
2330 -2331 2332 0
-2332 2331 0
-2332 -2330 0
c Var 'aux570' direct represents '2' with '-2331'
2330 2332 -2331 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2333'
c Var 'aux571' direct represents '0' with '2333'
c Var 'aux571' order represents '1' with '2334'
-2333 2334 0
c Var 'aux571' direct represents '1' with '2335'
2333 -2334 2335 0
-2335 2334 0
-2335 -2333 0
c Var 'aux571' direct represents '2' with '-2334'
2333 2335 -2334 0
c Encoding variable: aux572 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux571))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2336'
c Var 'aux572' direct represents '0' with '2336'
c Var 'aux572' order represents '1' with '2337'
-2336 2337 0
c Var 'aux572' direct represents '1' with '2338'
2336 -2337 2338 0
-2338 2337 0
-2338 -2336 0
c Var 'aux572' order represents '2' with '2339'
-2337 2339 0
c Var 'aux572' direct represents '2' with '2340'
2337 -2339 2340 0
-2340 2339 0
-2340 -2337 0
c Var 'aux572' direct represents '3' with '-2339'
2336 2338 2340 -2339 0
c Encoding variable: aux573 with domain: int(0..4) (representing constraint (aux568 + aux570))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2341'
c Var 'aux573' direct represents '0' with '2341'
c Var 'aux573' order represents '1' with '2342'
-2341 2342 0
c Var 'aux573' direct represents '1' with '2343'
2341 -2342 2343 0
-2343 2342 0
-2343 -2341 0
c Var 'aux573' order represents '2' with '2344'
-2342 2344 0
c Var 'aux573' direct represents '2' with '2345'
2342 -2344 2345 0
-2345 2344 0
-2345 -2342 0
c Var 'aux573' order represents '3' with '2346'
-2344 2346 0
c Var 'aux573' direct represents '3' with '2347'
2344 -2346 2347 0
-2347 2346 0
-2347 -2344 0
c Var 'aux573' direct represents '4' with '-2346'
2341 2343 2345 2347 -2346 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2348'
c Var 'aux574' direct represents '0' with '2348'
c Var 'aux574' order represents '1' with '2349'
-2348 2349 0
c Var 'aux574' direct represents '1' with '2350'
2348 -2349 2350 0
-2350 2349 0
-2350 -2348 0
c Var 'aux574' direct represents '2' with '-2349'
2348 2350 -2349 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2351'
c Var 'aux575' direct represents '0' with '2351'
c Var 'aux575' order represents '1' with '2352'
-2351 2352 0
c Var 'aux575' direct represents '1' with '2353'
2351 -2352 2353 0
-2353 2352 0
-2353 -2351 0
c Var 'aux575' direct represents '2' with '-2352'
2351 2353 -2352 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2354'
c Var 'aux576' direct represents '0' with '2354'
c Var 'aux576' order represents '1' with '2355'
-2354 2355 0
c Var 'aux576' direct represents '1' with '2356'
2354 -2355 2356 0
-2356 2355 0
-2356 -2354 0
c Var 'aux576' direct represents '2' with '-2355'
2354 2356 -2355 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2357'
c Var 'aux577' direct represents '0' with '2357'
c Var 'aux577' order represents '1' with '2358'
-2357 2358 0
c Var 'aux577' direct represents '1' with '2359'
2357 -2358 2359 0
-2359 2358 0
-2359 -2357 0
c Var 'aux577' direct represents '2' with '-2358'
2357 2359 -2358 0
c Encoding variable: aux578 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux577))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2360'
c Var 'aux578' direct represents '0' with '2360'
c Var 'aux578' order represents '1' with '2361'
-2360 2361 0
c Var 'aux578' direct represents '1' with '2362'
2360 -2361 2362 0
-2362 2361 0
-2362 -2360 0
c Var 'aux578' order represents '2' with '2363'
-2361 2363 0
c Var 'aux578' direct represents '2' with '2364'
2361 -2363 2364 0
-2364 2363 0
-2364 -2361 0
c Var 'aux578' direct represents '3' with '-2363'
2360 2362 2364 -2363 0
c Encoding variable: aux579 with domain: int(0..4) (representing constraint (aux574 + aux576))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2365'
c Var 'aux579' direct represents '0' with '2365'
c Var 'aux579' order represents '1' with '2366'
-2365 2366 0
c Var 'aux579' direct represents '1' with '2367'
2365 -2366 2367 0
-2367 2366 0
-2367 -2365 0
c Var 'aux579' order represents '2' with '2368'
-2366 2368 0
c Var 'aux579' direct represents '2' with '2369'
2366 -2368 2369 0
-2369 2368 0
-2369 -2366 0
c Var 'aux579' order represents '3' with '2370'
-2368 2370 0
c Var 'aux579' direct represents '3' with '2371'
2368 -2370 2371 0
-2371 2370 0
-2371 -2368 0
c Var 'aux579' direct represents '4' with '-2370'
2365 2367 2369 2371 -2370 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2372'
c Var 'aux580' direct represents '0' with '2372'
c Var 'aux580' order represents '1' with '2373'
-2372 2373 0
c Var 'aux580' direct represents '1' with '2374'
2372 -2373 2374 0
-2374 2373 0
-2374 -2372 0
c Var 'aux580' direct represents '2' with '-2373'
2372 2374 -2373 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2375'
c Var 'aux581' direct represents '0' with '2375'
c Var 'aux581' order represents '1' with '2376'
-2375 2376 0
c Var 'aux581' direct represents '1' with '2377'
2375 -2376 2377 0
-2377 2376 0
-2377 -2375 0
c Var 'aux581' direct represents '2' with '-2376'
2375 2377 -2376 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2378'
c Var 'aux582' direct represents '0' with '2378'
c Var 'aux582' order represents '1' with '2379'
-2378 2379 0
c Var 'aux582' direct represents '1' with '2380'
2378 -2379 2380 0
-2380 2379 0
-2380 -2378 0
c Var 'aux582' direct represents '2' with '-2379'
2378 2380 -2379 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2381'
c Var 'aux583' direct represents '0' with '2381'
c Var 'aux583' order represents '1' with '2382'
-2381 2382 0
c Var 'aux583' direct represents '1' with '2383'
2381 -2382 2383 0
-2383 2382 0
-2383 -2381 0
c Var 'aux583' direct represents '2' with '-2382'
2381 2383 -2382 0
c Encoding variable: aux584 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux583))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2384'
c Var 'aux584' direct represents '0' with '2384'
c Var 'aux584' order represents '1' with '2385'
-2384 2385 0
c Var 'aux584' direct represents '1' with '2386'
2384 -2385 2386 0
-2386 2385 0
-2386 -2384 0
c Var 'aux584' order represents '2' with '2387'
-2385 2387 0
c Var 'aux584' direct represents '2' with '2388'
2385 -2387 2388 0
-2388 2387 0
-2388 -2385 0
c Var 'aux584' direct represents '3' with '-2387'
2384 2386 2388 -2387 0
c Encoding variable: aux585 with domain: int(0..4) (representing constraint (aux580 + aux582))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2389'
c Var 'aux585' direct represents '0' with '2389'
c Var 'aux585' order represents '1' with '2390'
-2389 2390 0
c Var 'aux585' direct represents '1' with '2391'
2389 -2390 2391 0
-2391 2390 0
-2391 -2389 0
c Var 'aux585' order represents '2' with '2392'
-2390 2392 0
c Var 'aux585' direct represents '2' with '2393'
2390 -2392 2393 0
-2393 2392 0
-2393 -2390 0
c Var 'aux585' order represents '3' with '2394'
-2392 2394 0
c Var 'aux585' direct represents '3' with '2395'
2392 -2394 2395 0
-2395 2394 0
-2395 -2392 0
c Var 'aux585' direct represents '4' with '-2394'
2389 2391 2393 2395 -2394 0
c Encoding variable: aux586 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2396'
c Var 'aux586' direct represents '0' with '2396'
c Var 'aux586' order represents '1' with '2397'
-2396 2397 0
c Var 'aux586' direct represents '1' with '2398'
2396 -2397 2398 0
-2398 2397 0
-2398 -2396 0
c Var 'aux586' direct represents '2' with '-2397'
2396 2398 -2397 0
c Encoding variable: aux587 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2399'
c Var 'aux587' direct represents '0' with '2399'
c Var 'aux587' order represents '1' with '2400'
-2399 2400 0
c Var 'aux587' direct represents '1' with '2401'
2399 -2400 2401 0
-2401 2400 0
-2401 -2399 0
c Var 'aux587' direct represents '2' with '-2400'
2399 2401 -2400 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2402'
c Var 'aux588' direct represents '0' with '2402'
c Var 'aux588' order represents '1' with '2403'
-2402 2403 0
c Var 'aux588' direct represents '1' with '2404'
2402 -2403 2404 0
-2404 2403 0
-2404 -2402 0
c Var 'aux588' direct represents '2' with '-2403'
2402 2404 -2403 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2405'
c Var 'aux589' direct represents '0' with '2405'
c Var 'aux589' order represents '1' with '2406'
-2405 2406 0
c Var 'aux589' direct represents '1' with '2407'
2405 -2406 2407 0
-2407 2406 0
-2407 -2405 0
c Var 'aux589' direct represents '2' with '-2406'
2405 2407 -2406 0
c Encoding variable: aux590 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux589))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2408'
c Var 'aux590' direct represents '0' with '2408'
c Var 'aux590' order represents '1' with '2409'
-2408 2409 0
c Var 'aux590' direct represents '1' with '2410'
2408 -2409 2410 0
-2410 2409 0
-2410 -2408 0
c Var 'aux590' order represents '2' with '2411'
-2409 2411 0
c Var 'aux590' direct represents '2' with '2412'
2409 -2411 2412 0
-2412 2411 0
-2412 -2409 0
c Var 'aux590' direct represents '3' with '-2411'
2408 2410 2412 -2411 0
c Encoding variable: aux591 with domain: int(0..4) (representing constraint (aux586 + aux588))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2413'
c Var 'aux591' direct represents '0' with '2413'
c Var 'aux591' order represents '1' with '2414'
-2413 2414 0
c Var 'aux591' direct represents '1' with '2415'
2413 -2414 2415 0
-2415 2414 0
-2415 -2413 0
c Var 'aux591' order represents '2' with '2416'
-2414 2416 0
c Var 'aux591' direct represents '2' with '2417'
2414 -2416 2417 0
-2417 2416 0
-2417 -2414 0
c Var 'aux591' order represents '3' with '2418'
-2416 2418 0
c Var 'aux591' direct represents '3' with '2419'
2416 -2418 2419 0
-2419 2418 0
-2419 -2416 0
c Var 'aux591' direct represents '4' with '-2418'
2413 2415 2417 2419 -2418 0
c Encoding variable: aux592 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2420'
c Var 'aux592' direct represents '0' with '2420'
c Var 'aux592' order represents '1' with '2421'
-2420 2421 0
c Var 'aux592' direct represents '1' with '2422'
2420 -2421 2422 0
-2422 2421 0
-2422 -2420 0
c Var 'aux592' direct represents '2' with '-2421'
2420 2422 -2421 0
c Encoding variable: aux593 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2423'
c Var 'aux593' direct represents '0' with '2423'
c Var 'aux593' order represents '1' with '2424'
-2423 2424 0
c Var 'aux593' direct represents '1' with '2425'
2423 -2424 2425 0
-2425 2424 0
-2425 -2423 0
c Var 'aux593' direct represents '2' with '-2424'
2423 2425 -2424 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2426'
c Var 'aux594' direct represents '0' with '2426'
c Var 'aux594' order represents '1' with '2427'
-2426 2427 0
c Var 'aux594' direct represents '1' with '2428'
2426 -2427 2428 0
-2428 2427 0
-2428 -2426 0
c Var 'aux594' direct represents '2' with '-2427'
2426 2428 -2427 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2429'
c Var 'aux595' direct represents '0' with '2429'
c Var 'aux595' order represents '1' with '2430'
-2429 2430 0
c Var 'aux595' direct represents '1' with '2431'
2429 -2430 2431 0
-2431 2430 0
-2431 -2429 0
c Var 'aux595' direct represents '2' with '-2430'
2429 2431 -2430 0
c Encoding variable: aux596 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux595))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2432'
c Var 'aux596' direct represents '0' with '2432'
c Var 'aux596' order represents '1' with '2433'
-2432 2433 0
c Var 'aux596' direct represents '1' with '2434'
2432 -2433 2434 0
-2434 2433 0
-2434 -2432 0
c Var 'aux596' order represents '2' with '2435'
-2433 2435 0
c Var 'aux596' direct represents '2' with '2436'
2433 -2435 2436 0
-2436 2435 0
-2436 -2433 0
c Var 'aux596' direct represents '3' with '-2435'
2432 2434 2436 -2435 0
c Encoding variable: aux597 with domain: int(0..4) (representing constraint (aux592 + aux594))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2437'
c Var 'aux597' direct represents '0' with '2437'
c Var 'aux597' order represents '1' with '2438'
-2437 2438 0
c Var 'aux597' direct represents '1' with '2439'
2437 -2438 2439 0
-2439 2438 0
-2439 -2437 0
c Var 'aux597' order represents '2' with '2440'
-2438 2440 0
c Var 'aux597' direct represents '2' with '2441'
2438 -2440 2441 0
-2441 2440 0
-2441 -2438 0
c Var 'aux597' order represents '3' with '2442'
-2440 2442 0
c Var 'aux597' direct represents '3' with '2443'
2440 -2442 2443 0
-2443 2442 0
-2443 -2440 0
c Var 'aux597' direct represents '4' with '-2442'
2437 2439 2441 2443 -2442 0
c Encoding variable: aux598 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2444'
c Var 'aux598' direct represents '0' with '2444'
c Var 'aux598' order represents '1' with '2445'
-2444 2445 0
c Var 'aux598' direct represents '1' with '2446'
2444 -2445 2446 0
-2446 2445 0
-2446 -2444 0
c Var 'aux598' direct represents '2' with '-2445'
2444 2446 -2445 0
c Encoding variable: aux599 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2447'
c Var 'aux599' direct represents '0' with '2447'
c Var 'aux599' order represents '1' with '2448'
-2447 2448 0
c Var 'aux599' direct represents '1' with '2449'
2447 -2448 2449 0
-2449 2448 0
-2449 -2447 0
c Var 'aux599' direct represents '2' with '-2448'
2447 2449 -2448 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2450'
c Var 'aux600' direct represents '0' with '2450'
c Var 'aux600' order represents '1' with '2451'
-2450 2451 0
c Var 'aux600' direct represents '1' with '2452'
2450 -2451 2452 0
-2452 2451 0
-2452 -2450 0
c Var 'aux600' direct represents '2' with '-2451'
2450 2452 -2451 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2453'
c Var 'aux601' direct represents '0' with '2453'
c Var 'aux601' order represents '1' with '2454'
-2453 2454 0
c Var 'aux601' direct represents '1' with '2455'
2453 -2454 2455 0
-2455 2454 0
-2455 -2453 0
c Var 'aux601' direct represents '2' with '-2454'
2453 2455 -2454 0
c Encoding variable: aux602 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux601))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2456'
c Var 'aux602' direct represents '0' with '2456'
c Var 'aux602' order represents '1' with '2457'
-2456 2457 0
c Var 'aux602' direct represents '1' with '2458'
2456 -2457 2458 0
-2458 2457 0
-2458 -2456 0
c Var 'aux602' order represents '2' with '2459'
-2457 2459 0
c Var 'aux602' direct represents '2' with '2460'
2457 -2459 2460 0
-2460 2459 0
-2460 -2457 0
c Var 'aux602' direct represents '3' with '-2459'
2456 2458 2460 -2459 0
c Encoding variable: aux603 with domain: int(0..4) (representing constraint (aux598 + aux600))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2461'
c Var 'aux603' direct represents '0' with '2461'
c Var 'aux603' order represents '1' with '2462'
-2461 2462 0
c Var 'aux603' direct represents '1' with '2463'
2461 -2462 2463 0
-2463 2462 0
-2463 -2461 0
c Var 'aux603' order represents '2' with '2464'
-2462 2464 0
c Var 'aux603' direct represents '2' with '2465'
2462 -2464 2465 0
-2465 2464 0
-2465 -2462 0
c Var 'aux603' order represents '3' with '2466'
-2464 2466 0
c Var 'aux603' direct represents '3' with '2467'
2464 -2466 2467 0
-2467 2466 0
-2467 -2464 0
c Var 'aux603' direct represents '4' with '-2466'
2461 2463 2465 2467 -2466 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2468'
c Var 'aux604' direct represents '0' with '2468'
c Var 'aux604' order represents '1' with '2469'
-2468 2469 0
c Var 'aux604' direct represents '1' with '2470'
2468 -2469 2470 0
-2470 2469 0
-2470 -2468 0
c Var 'aux604' direct represents '2' with '-2469'
2468 2470 -2469 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2471'
c Var 'aux605' direct represents '0' with '2471'
c Var 'aux605' order represents '1' with '2472'
-2471 2472 0
c Var 'aux605' direct represents '1' with '2473'
2471 -2472 2473 0
-2473 2472 0
-2473 -2471 0
c Var 'aux605' direct represents '2' with '-2472'
2471 2473 -2472 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2474'
c Var 'aux606' direct represents '0' with '2474'
c Var 'aux606' order represents '1' with '2475'
-2474 2475 0
c Var 'aux606' direct represents '1' with '2476'
2474 -2475 2476 0
-2476 2475 0
-2476 -2474 0
c Var 'aux606' direct represents '2' with '-2475'
2474 2476 -2475 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2477'
c Var 'aux607' direct represents '0' with '2477'
c Var 'aux607' order represents '1' with '2478'
-2477 2478 0
c Var 'aux607' direct represents '1' with '2479'
2477 -2478 2479 0
-2479 2478 0
-2479 -2477 0
c Var 'aux607' direct represents '2' with '-2478'
2477 2479 -2478 0
c Encoding variable: aux608 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux607))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2480'
c Var 'aux608' direct represents '0' with '2480'
c Var 'aux608' order represents '1' with '2481'
-2480 2481 0
c Var 'aux608' direct represents '1' with '2482'
2480 -2481 2482 0
-2482 2481 0
-2482 -2480 0
c Var 'aux608' order represents '2' with '2483'
-2481 2483 0
c Var 'aux608' direct represents '2' with '2484'
2481 -2483 2484 0
-2484 2483 0
-2484 -2481 0
c Var 'aux608' direct represents '3' with '-2483'
2480 2482 2484 -2483 0
c Encoding variable: aux609 with domain: int(0..4) (representing constraint (aux604 + aux606))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2485'
c Var 'aux609' direct represents '0' with '2485'
c Var 'aux609' order represents '1' with '2486'
-2485 2486 0
c Var 'aux609' direct represents '1' with '2487'
2485 -2486 2487 0
-2487 2486 0
-2487 -2485 0
c Var 'aux609' order represents '2' with '2488'
-2486 2488 0
c Var 'aux609' direct represents '2' with '2489'
2486 -2488 2489 0
-2489 2488 0
-2489 -2486 0
c Var 'aux609' order represents '3' with '2490'
-2488 2490 0
c Var 'aux609' direct represents '3' with '2491'
2488 -2490 2491 0
-2491 2490 0
-2491 -2488 0
c Var 'aux609' direct represents '4' with '-2490'
2485 2487 2489 2491 -2490 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2492'
c Var 'aux610' direct represents '0' with '2492'
c Var 'aux610' order represents '1' with '2493'
-2492 2493 0
c Var 'aux610' direct represents '1' with '2494'
2492 -2493 2494 0
-2494 2493 0
-2494 -2492 0
c Var 'aux610' direct represents '2' with '-2493'
2492 2494 -2493 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2495'
c Var 'aux611' direct represents '0' with '2495'
c Var 'aux611' order represents '1' with '2496'
-2495 2496 0
c Var 'aux611' direct represents '1' with '2497'
2495 -2496 2497 0
-2497 2496 0
-2497 -2495 0
c Var 'aux611' direct represents '2' with '-2496'
2495 2497 -2496 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2498'
c Var 'aux612' direct represents '0' with '2498'
c Var 'aux612' order represents '1' with '2499'
-2498 2499 0
c Var 'aux612' direct represents '1' with '2500'
2498 -2499 2500 0
-2500 2499 0
-2500 -2498 0
c Var 'aux612' direct represents '2' with '-2499'
2498 2500 -2499 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2501'
c Var 'aux613' direct represents '0' with '2501'
c Var 'aux613' order represents '1' with '2502'
-2501 2502 0
c Var 'aux613' direct represents '1' with '2503'
2501 -2502 2503 0
-2503 2502 0
-2503 -2501 0
c Var 'aux613' direct represents '2' with '-2502'
2501 2503 -2502 0
c Encoding variable: aux614 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux613))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2504'
c Var 'aux614' direct represents '0' with '2504'
c Var 'aux614' order represents '1' with '2505'
-2504 2505 0
c Var 'aux614' direct represents '1' with '2506'
2504 -2505 2506 0
-2506 2505 0
-2506 -2504 0
c Var 'aux614' order represents '2' with '2507'
-2505 2507 0
c Var 'aux614' direct represents '2' with '2508'
2505 -2507 2508 0
-2508 2507 0
-2508 -2505 0
c Var 'aux614' direct represents '3' with '-2507'
2504 2506 2508 -2507 0
c Encoding variable: aux615 with domain: int(0..4) (representing constraint (aux610 + aux612))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2509'
c Var 'aux615' direct represents '0' with '2509'
c Var 'aux615' order represents '1' with '2510'
-2509 2510 0
c Var 'aux615' direct represents '1' with '2511'
2509 -2510 2511 0
-2511 2510 0
-2511 -2509 0
c Var 'aux615' order represents '2' with '2512'
-2510 2512 0
c Var 'aux615' direct represents '2' with '2513'
2510 -2512 2513 0
-2513 2512 0
-2513 -2510 0
c Var 'aux615' order represents '3' with '2514'
-2512 2514 0
c Var 'aux615' direct represents '3' with '2515'
2512 -2514 2515 0
-2515 2514 0
-2515 -2512 0
c Var 'aux615' direct represents '4' with '-2514'
2509 2511 2513 2515 -2514 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2516'
c Var 'aux616' direct represents '0' with '2516'
c Var 'aux616' order represents '1' with '2517'
-2516 2517 0
c Var 'aux616' direct represents '1' with '2518'
2516 -2517 2518 0
-2518 2517 0
-2518 -2516 0
c Var 'aux616' direct represents '2' with '-2517'
2516 2518 -2517 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2519'
c Var 'aux617' direct represents '0' with '2519'
c Var 'aux617' order represents '1' with '2520'
-2519 2520 0
c Var 'aux617' direct represents '1' with '2521'
2519 -2520 2521 0
-2521 2520 0
-2521 -2519 0
c Var 'aux617' direct represents '2' with '-2520'
2519 2521 -2520 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2522'
c Var 'aux618' direct represents '0' with '2522'
c Var 'aux618' order represents '1' with '2523'
-2522 2523 0
c Var 'aux618' direct represents '1' with '2524'
2522 -2523 2524 0
-2524 2523 0
-2524 -2522 0
c Var 'aux618' direct represents '2' with '-2523'
2522 2524 -2523 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2525'
c Var 'aux619' direct represents '0' with '2525'
c Var 'aux619' order represents '1' with '2526'
-2525 2526 0
c Var 'aux619' direct represents '1' with '2527'
2525 -2526 2527 0
-2527 2526 0
-2527 -2525 0
c Var 'aux619' direct represents '2' with '-2526'
2525 2527 -2526 0
c Encoding variable: aux620 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux619))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2528'
c Var 'aux620' direct represents '0' with '2528'
c Var 'aux620' order represents '1' with '2529'
-2528 2529 0
c Var 'aux620' direct represents '1' with '2530'
2528 -2529 2530 0
-2530 2529 0
-2530 -2528 0
c Var 'aux620' order represents '2' with '2531'
-2529 2531 0
c Var 'aux620' direct represents '2' with '2532'
2529 -2531 2532 0
-2532 2531 0
-2532 -2529 0
c Var 'aux620' direct represents '3' with '-2531'
2528 2530 2532 -2531 0
c Encoding variable: aux621 with domain: int(0..4) (representing constraint (aux616 + aux618))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2533'
c Var 'aux621' direct represents '0' with '2533'
c Var 'aux621' order represents '1' with '2534'
-2533 2534 0
c Var 'aux621' direct represents '1' with '2535'
2533 -2534 2535 0
-2535 2534 0
-2535 -2533 0
c Var 'aux621' order represents '2' with '2536'
-2534 2536 0
c Var 'aux621' direct represents '2' with '2537'
2534 -2536 2537 0
-2537 2536 0
-2537 -2534 0
c Var 'aux621' order represents '3' with '2538'
-2536 2538 0
c Var 'aux621' direct represents '3' with '2539'
2536 -2538 2539 0
-2539 2538 0
-2539 -2536 0
c Var 'aux621' direct represents '4' with '-2538'
2533 2535 2537 2539 -2538 0
c Encoding variable: aux622 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2540'
c Var 'aux622' direct represents '0' with '2540'
c Var 'aux622' order represents '1' with '2541'
-2540 2541 0
c Var 'aux622' direct represents '1' with '2542'
2540 -2541 2542 0
-2542 2541 0
-2542 -2540 0
c Var 'aux622' direct represents '2' with '-2541'
2540 2542 -2541 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2543'
c Var 'aux623' direct represents '0' with '2543'
c Var 'aux623' order represents '1' with '2544'
-2543 2544 0
c Var 'aux623' direct represents '1' with '2545'
2543 -2544 2545 0
-2545 2544 0
-2545 -2543 0
c Var 'aux623' direct represents '2' with '-2544'
2543 2545 -2544 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2546'
c Var 'aux624' direct represents '0' with '2546'
c Var 'aux624' order represents '1' with '2547'
-2546 2547 0
c Var 'aux624' direct represents '1' with '2548'
2546 -2547 2548 0
-2548 2547 0
-2548 -2546 0
c Var 'aux624' direct represents '2' with '-2547'
2546 2548 -2547 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2549'
c Var 'aux625' direct represents '0' with '2549'
c Var 'aux625' order represents '1' with '2550'
-2549 2550 0
c Var 'aux625' direct represents '1' with '2551'
2549 -2550 2551 0
-2551 2550 0
-2551 -2549 0
c Var 'aux625' direct represents '2' with '-2550'
2549 2551 -2550 0
c Encoding variable: aux626 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux625))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2552'
c Var 'aux626' direct represents '0' with '2552'
c Var 'aux626' order represents '1' with '2553'
-2552 2553 0
c Var 'aux626' direct represents '1' with '2554'
2552 -2553 2554 0
-2554 2553 0
-2554 -2552 0
c Var 'aux626' order represents '2' with '2555'
-2553 2555 0
c Var 'aux626' direct represents '2' with '2556'
2553 -2555 2556 0
-2556 2555 0
-2556 -2553 0
c Var 'aux626' direct represents '3' with '-2555'
2552 2554 2556 -2555 0
c Encoding variable: aux627 with domain: int(0..4) (representing constraint (aux622 + aux624))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2557'
c Var 'aux627' direct represents '0' with '2557'
c Var 'aux627' order represents '1' with '2558'
-2557 2558 0
c Var 'aux627' direct represents '1' with '2559'
2557 -2558 2559 0
-2559 2558 0
-2559 -2557 0
c Var 'aux627' order represents '2' with '2560'
-2558 2560 0
c Var 'aux627' direct represents '2' with '2561'
2558 -2560 2561 0
-2561 2560 0
-2561 -2558 0
c Var 'aux627' order represents '3' with '2562'
-2560 2562 0
c Var 'aux627' direct represents '3' with '2563'
2560 -2562 2563 0
-2563 2562 0
-2563 -2560 0
c Var 'aux627' direct represents '4' with '-2562'
2557 2559 2561 2563 -2562 0
c Encoding variable: aux628 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2564'
c Var 'aux628' direct represents '0' with '2564'
c Var 'aux628' order represents '1' with '2565'
-2564 2565 0
c Var 'aux628' direct represents '1' with '2566'
2564 -2565 2566 0
-2566 2565 0
-2566 -2564 0
c Var 'aux628' direct represents '2' with '-2565'
2564 2566 -2565 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2567'
c Var 'aux629' direct represents '0' with '2567'
c Var 'aux629' order represents '1' with '2568'
-2567 2568 0
c Var 'aux629' direct represents '1' with '2569'
2567 -2568 2569 0
-2569 2568 0
-2569 -2567 0
c Var 'aux629' direct represents '2' with '-2568'
2567 2569 -2568 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2570'
c Var 'aux630' direct represents '0' with '2570'
c Var 'aux630' order represents '1' with '2571'
-2570 2571 0
c Var 'aux630' direct represents '1' with '2572'
2570 -2571 2572 0
-2572 2571 0
-2572 -2570 0
c Var 'aux630' direct represents '2' with '-2571'
2570 2572 -2571 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2573'
c Var 'aux631' direct represents '0' with '2573'
c Var 'aux631' order represents '1' with '2574'
-2573 2574 0
c Var 'aux631' direct represents '1' with '2575'
2573 -2574 2575 0
-2575 2574 0
-2575 -2573 0
c Var 'aux631' direct represents '2' with '-2574'
2573 2575 -2574 0
c Encoding variable: aux632 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux631))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2576'
c Var 'aux632' direct represents '0' with '2576'
c Var 'aux632' order represents '1' with '2577'
-2576 2577 0
c Var 'aux632' direct represents '1' with '2578'
2576 -2577 2578 0
-2578 2577 0
-2578 -2576 0
c Var 'aux632' order represents '2' with '2579'
-2577 2579 0
c Var 'aux632' direct represents '2' with '2580'
2577 -2579 2580 0
-2580 2579 0
-2580 -2577 0
c Var 'aux632' direct represents '3' with '-2579'
2576 2578 2580 -2579 0
c Encoding variable: aux633 with domain: int(0..4) (representing constraint (aux628 + aux630))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2581'
c Var 'aux633' direct represents '0' with '2581'
c Var 'aux633' order represents '1' with '2582'
-2581 2582 0
c Var 'aux633' direct represents '1' with '2583'
2581 -2582 2583 0
-2583 2582 0
-2583 -2581 0
c Var 'aux633' order represents '2' with '2584'
-2582 2584 0
c Var 'aux633' direct represents '2' with '2585'
2582 -2584 2585 0
-2585 2584 0
-2585 -2582 0
c Var 'aux633' order represents '3' with '2586'
-2584 2586 0
c Var 'aux633' direct represents '3' with '2587'
2584 -2586 2587 0
-2587 2586 0
-2587 -2584 0
c Var 'aux633' direct represents '4' with '-2586'
2581 2583 2585 2587 -2586 0
c Encoding variable: aux634 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2588'
c Var 'aux634' direct represents '0' with '2588'
c Var 'aux634' order represents '1' with '2589'
-2588 2589 0
c Var 'aux634' direct represents '1' with '2590'
2588 -2589 2590 0
-2590 2589 0
-2590 -2588 0
c Var 'aux634' direct represents '2' with '-2589'
2588 2590 -2589 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2591'
c Var 'aux635' direct represents '0' with '2591'
c Var 'aux635' order represents '1' with '2592'
-2591 2592 0
c Var 'aux635' direct represents '1' with '2593'
2591 -2592 2593 0
-2593 2592 0
-2593 -2591 0
c Var 'aux635' direct represents '2' with '-2592'
2591 2593 -2592 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2594'
c Var 'aux636' direct represents '0' with '2594'
c Var 'aux636' order represents '1' with '2595'
-2594 2595 0
c Var 'aux636' direct represents '1' with '2596'
2594 -2595 2596 0
-2596 2595 0
-2596 -2594 0
c Var 'aux636' direct represents '2' with '-2595'
2594 2596 -2595 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2597'
c Var 'aux637' direct represents '0' with '2597'
c Var 'aux637' order represents '1' with '2598'
-2597 2598 0
c Var 'aux637' direct represents '1' with '2599'
2597 -2598 2599 0
-2599 2598 0
-2599 -2597 0
c Var 'aux637' direct represents '2' with '-2598'
2597 2599 -2598 0
c Encoding variable: aux638 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux637))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2600'
c Var 'aux638' direct represents '0' with '2600'
c Var 'aux638' order represents '1' with '2601'
-2600 2601 0
c Var 'aux638' direct represents '1' with '2602'
2600 -2601 2602 0
-2602 2601 0
-2602 -2600 0
c Var 'aux638' order represents '2' with '2603'
-2601 2603 0
c Var 'aux638' direct represents '2' with '2604'
2601 -2603 2604 0
-2604 2603 0
-2604 -2601 0
c Var 'aux638' direct represents '3' with '-2603'
2600 2602 2604 -2603 0
c Encoding variable: aux639 with domain: int(0..4) (representing constraint (aux634 + aux636))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2605'
c Var 'aux639' direct represents '0' with '2605'
c Var 'aux639' order represents '1' with '2606'
-2605 2606 0
c Var 'aux639' direct represents '1' with '2607'
2605 -2606 2607 0
-2607 2606 0
-2607 -2605 0
c Var 'aux639' order represents '2' with '2608'
-2606 2608 0
c Var 'aux639' direct represents '2' with '2609'
2606 -2608 2609 0
-2609 2608 0
-2609 -2606 0
c Var 'aux639' order represents '3' with '2610'
-2608 2610 0
c Var 'aux639' direct represents '3' with '2611'
2608 -2610 2611 0
-2611 2610 0
-2611 -2608 0
c Var 'aux639' direct represents '4' with '-2610'
2605 2607 2609 2611 -2610 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2612'
c Var 'aux640' direct represents '0' with '2612'
c Var 'aux640' order represents '1' with '2613'
-2612 2613 0
c Var 'aux640' direct represents '1' with '2614'
2612 -2613 2614 0
-2614 2613 0
-2614 -2612 0
c Var 'aux640' direct represents '2' with '-2613'
2612 2614 -2613 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2615'
c Var 'aux641' direct represents '0' with '2615'
c Var 'aux641' order represents '1' with '2616'
-2615 2616 0
c Var 'aux641' direct represents '1' with '2617'
2615 -2616 2617 0
-2617 2616 0
-2617 -2615 0
c Var 'aux641' direct represents '2' with '-2616'
2615 2617 -2616 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2618'
c Var 'aux642' direct represents '0' with '2618'
c Var 'aux642' order represents '1' with '2619'
-2618 2619 0
c Var 'aux642' direct represents '1' with '2620'
2618 -2619 2620 0
-2620 2619 0
-2620 -2618 0
c Var 'aux642' direct represents '2' with '-2619'
2618 2620 -2619 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2621'
c Var 'aux643' direct represents '0' with '2621'
c Var 'aux643' order represents '1' with '2622'
-2621 2622 0
c Var 'aux643' direct represents '1' with '2623'
2621 -2622 2623 0
-2623 2622 0
-2623 -2621 0
c Var 'aux643' direct represents '2' with '-2622'
2621 2623 -2622 0
c Encoding variable: aux644 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux643))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2624'
c Var 'aux644' direct represents '0' with '2624'
c Var 'aux644' order represents '1' with '2625'
-2624 2625 0
c Var 'aux644' direct represents '1' with '2626'
2624 -2625 2626 0
-2626 2625 0
-2626 -2624 0
c Var 'aux644' order represents '2' with '2627'
-2625 2627 0
c Var 'aux644' direct represents '2' with '2628'
2625 -2627 2628 0
-2628 2627 0
-2628 -2625 0
c Var 'aux644' direct represents '3' with '-2627'
2624 2626 2628 -2627 0
c Encoding variable: aux645 with domain: int(0..4) (representing constraint (aux640 + aux642))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2629'
c Var 'aux645' direct represents '0' with '2629'
c Var 'aux645' order represents '1' with '2630'
-2629 2630 0
c Var 'aux645' direct represents '1' with '2631'
2629 -2630 2631 0
-2631 2630 0
-2631 -2629 0
c Var 'aux645' order represents '2' with '2632'
-2630 2632 0
c Var 'aux645' direct represents '2' with '2633'
2630 -2632 2633 0
-2633 2632 0
-2633 -2630 0
c Var 'aux645' order represents '3' with '2634'
-2632 2634 0
c Var 'aux645' direct represents '3' with '2635'
2632 -2634 2635 0
-2635 2634 0
-2635 -2632 0
c Var 'aux645' direct represents '4' with '-2634'
2629 2631 2633 2635 -2634 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2636'
c Var 'aux646' direct represents '0' with '2636'
c Var 'aux646' order represents '1' with '2637'
-2636 2637 0
c Var 'aux646' direct represents '1' with '2638'
2636 -2637 2638 0
-2638 2637 0
-2638 -2636 0
c Var 'aux646' direct represents '2' with '-2637'
2636 2638 -2637 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2639'
c Var 'aux647' direct represents '0' with '2639'
c Var 'aux647' order represents '1' with '2640'
-2639 2640 0
c Var 'aux647' direct represents '1' with '2641'
2639 -2640 2641 0
-2641 2640 0
-2641 -2639 0
c Var 'aux647' direct represents '2' with '-2640'
2639 2641 -2640 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2642'
c Var 'aux648' direct represents '0' with '2642'
c Var 'aux648' order represents '1' with '2643'
-2642 2643 0
c Var 'aux648' direct represents '1' with '2644'
2642 -2643 2644 0
-2644 2643 0
-2644 -2642 0
c Var 'aux648' direct represents '2' with '-2643'
2642 2644 -2643 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2645'
c Var 'aux649' direct represents '0' with '2645'
c Var 'aux649' order represents '1' with '2646'
-2645 2646 0
c Var 'aux649' direct represents '1' with '2647'
2645 -2646 2647 0
-2647 2646 0
-2647 -2645 0
c Var 'aux649' direct represents '2' with '-2646'
2645 2647 -2646 0
c Encoding variable: aux650 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux649))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2648'
c Var 'aux650' direct represents '0' with '2648'
c Var 'aux650' order represents '1' with '2649'
-2648 2649 0
c Var 'aux650' direct represents '1' with '2650'
2648 -2649 2650 0
-2650 2649 0
-2650 -2648 0
c Var 'aux650' order represents '2' with '2651'
-2649 2651 0
c Var 'aux650' direct represents '2' with '2652'
2649 -2651 2652 0
-2652 2651 0
-2652 -2649 0
c Var 'aux650' direct represents '3' with '-2651'
2648 2650 2652 -2651 0
c Encoding variable: aux651 with domain: int(0..4) (representing constraint (aux646 + aux648))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2653'
c Var 'aux651' direct represents '0' with '2653'
c Var 'aux651' order represents '1' with '2654'
-2653 2654 0
c Var 'aux651' direct represents '1' with '2655'
2653 -2654 2655 0
-2655 2654 0
-2655 -2653 0
c Var 'aux651' order represents '2' with '2656'
-2654 2656 0
c Var 'aux651' direct represents '2' with '2657'
2654 -2656 2657 0
-2657 2656 0
-2657 -2654 0
c Var 'aux651' order represents '3' with '2658'
-2656 2658 0
c Var 'aux651' direct represents '3' with '2659'
2656 -2658 2659 0
-2659 2658 0
-2659 -2656 0
c Var 'aux651' direct represents '4' with '-2658'
2653 2655 2657 2659 -2658 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2660'
c Var 'aux652' direct represents '0' with '2660'
c Var 'aux652' order represents '1' with '2661'
-2660 2661 0
c Var 'aux652' direct represents '1' with '2662'
2660 -2661 2662 0
-2662 2661 0
-2662 -2660 0
c Var 'aux652' direct represents '2' with '-2661'
2660 2662 -2661 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2663'
c Var 'aux653' direct represents '0' with '2663'
c Var 'aux653' order represents '1' with '2664'
-2663 2664 0
c Var 'aux653' direct represents '1' with '2665'
2663 -2664 2665 0
-2665 2664 0
-2665 -2663 0
c Var 'aux653' direct represents '2' with '-2664'
2663 2665 -2664 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2666'
c Var 'aux654' direct represents '0' with '2666'
c Var 'aux654' order represents '1' with '2667'
-2666 2667 0
c Var 'aux654' direct represents '1' with '2668'
2666 -2667 2668 0
-2668 2667 0
-2668 -2666 0
c Var 'aux654' direct represents '2' with '-2667'
2666 2668 -2667 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2669'
c Var 'aux655' direct represents '0' with '2669'
c Var 'aux655' order represents '1' with '2670'
-2669 2670 0
c Var 'aux655' direct represents '1' with '2671'
2669 -2670 2671 0
-2671 2670 0
-2671 -2669 0
c Var 'aux655' direct represents '2' with '-2670'
2669 2671 -2670 0
c Encoding variable: aux656 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux655))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2672'
c Var 'aux656' direct represents '0' with '2672'
c Var 'aux656' order represents '1' with '2673'
-2672 2673 0
c Var 'aux656' direct represents '1' with '2674'
2672 -2673 2674 0
-2674 2673 0
-2674 -2672 0
c Var 'aux656' order represents '2' with '2675'
-2673 2675 0
c Var 'aux656' direct represents '2' with '2676'
2673 -2675 2676 0
-2676 2675 0
-2676 -2673 0
c Var 'aux656' direct represents '3' with '-2675'
2672 2674 2676 -2675 0
c Encoding variable: aux657 with domain: int(0..4) (representing constraint (aux652 + aux654))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2677'
c Var 'aux657' direct represents '0' with '2677'
c Var 'aux657' order represents '1' with '2678'
-2677 2678 0
c Var 'aux657' direct represents '1' with '2679'
2677 -2678 2679 0
-2679 2678 0
-2679 -2677 0
c Var 'aux657' order represents '2' with '2680'
-2678 2680 0
c Var 'aux657' direct represents '2' with '2681'
2678 -2680 2681 0
-2681 2680 0
-2681 -2678 0
c Var 'aux657' order represents '3' with '2682'
-2680 2682 0
c Var 'aux657' direct represents '3' with '2683'
2680 -2682 2683 0
-2683 2682 0
-2683 -2680 0
c Var 'aux657' direct represents '4' with '-2682'
2677 2679 2681 2683 -2682 0
c Encoding variable: aux658 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2684'
c Var 'aux658' direct represents '0' with '2684'
c Var 'aux658' order represents '1' with '2685'
-2684 2685 0
c Var 'aux658' direct represents '1' with '2686'
2684 -2685 2686 0
-2686 2685 0
-2686 -2684 0
c Var 'aux658' direct represents '2' with '-2685'
2684 2686 -2685 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2687'
c Var 'aux659' direct represents '0' with '2687'
c Var 'aux659' order represents '1' with '2688'
-2687 2688 0
c Var 'aux659' direct represents '1' with '2689'
2687 -2688 2689 0
-2689 2688 0
-2689 -2687 0
c Var 'aux659' direct represents '2' with '-2688'
2687 2689 -2688 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2690'
c Var 'aux660' direct represents '0' with '2690'
c Var 'aux660' order represents '1' with '2691'
-2690 2691 0
c Var 'aux660' direct represents '1' with '2692'
2690 -2691 2692 0
-2692 2691 0
-2692 -2690 0
c Var 'aux660' direct represents '2' with '-2691'
2690 2692 -2691 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2693'
c Var 'aux661' direct represents '0' with '2693'
c Var 'aux661' order represents '1' with '2694'
-2693 2694 0
c Var 'aux661' direct represents '1' with '2695'
2693 -2694 2695 0
-2695 2694 0
-2695 -2693 0
c Var 'aux661' direct represents '2' with '-2694'
2693 2695 -2694 0
c Encoding variable: aux662 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux661))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2696'
c Var 'aux662' direct represents '0' with '2696'
c Var 'aux662' order represents '1' with '2697'
-2696 2697 0
c Var 'aux662' direct represents '1' with '2698'
2696 -2697 2698 0
-2698 2697 0
-2698 -2696 0
c Var 'aux662' order represents '2' with '2699'
-2697 2699 0
c Var 'aux662' direct represents '2' with '2700'
2697 -2699 2700 0
-2700 2699 0
-2700 -2697 0
c Var 'aux662' direct represents '3' with '-2699'
2696 2698 2700 -2699 0
c Encoding variable: aux663 with domain: int(0..4) (representing constraint (aux658 + aux660))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2701'
c Var 'aux663' direct represents '0' with '2701'
c Var 'aux663' order represents '1' with '2702'
-2701 2702 0
c Var 'aux663' direct represents '1' with '2703'
2701 -2702 2703 0
-2703 2702 0
-2703 -2701 0
c Var 'aux663' order represents '2' with '2704'
-2702 2704 0
c Var 'aux663' direct represents '2' with '2705'
2702 -2704 2705 0
-2705 2704 0
-2705 -2702 0
c Var 'aux663' order represents '3' with '2706'
-2704 2706 0
c Var 'aux663' direct represents '3' with '2707'
2704 -2706 2707 0
-2707 2706 0
-2707 -2704 0
c Var 'aux663' direct represents '4' with '-2706'
2701 2703 2705 2707 -2706 0
c Encoding variable: aux664 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2708'
c Var 'aux664' direct represents '0' with '2708'
c Var 'aux664' order represents '1' with '2709'
-2708 2709 0
c Var 'aux664' direct represents '1' with '2710'
2708 -2709 2710 0
-2710 2709 0
-2710 -2708 0
c Var 'aux664' direct represents '2' with '-2709'
2708 2710 -2709 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2711'
c Var 'aux665' direct represents '0' with '2711'
c Var 'aux665' order represents '1' with '2712'
-2711 2712 0
c Var 'aux665' direct represents '1' with '2713'
2711 -2712 2713 0
-2713 2712 0
-2713 -2711 0
c Var 'aux665' direct represents '2' with '-2712'
2711 2713 -2712 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2714'
c Var 'aux666' direct represents '0' with '2714'
c Var 'aux666' order represents '1' with '2715'
-2714 2715 0
c Var 'aux666' direct represents '1' with '2716'
2714 -2715 2716 0
-2716 2715 0
-2716 -2714 0
c Var 'aux666' direct represents '2' with '-2715'
2714 2716 -2715 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2717'
c Var 'aux667' direct represents '0' with '2717'
c Var 'aux667' order represents '1' with '2718'
-2717 2718 0
c Var 'aux667' direct represents '1' with '2719'
2717 -2718 2719 0
-2719 2718 0
-2719 -2717 0
c Var 'aux667' direct represents '2' with '-2718'
2717 2719 -2718 0
c Encoding variable: aux668 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux667))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2720'
c Var 'aux668' direct represents '0' with '2720'
c Var 'aux668' order represents '1' with '2721'
-2720 2721 0
c Var 'aux668' direct represents '1' with '2722'
2720 -2721 2722 0
-2722 2721 0
-2722 -2720 0
c Var 'aux668' order represents '2' with '2723'
-2721 2723 0
c Var 'aux668' direct represents '2' with '2724'
2721 -2723 2724 0
-2724 2723 0
-2724 -2721 0
c Var 'aux668' direct represents '3' with '-2723'
2720 2722 2724 -2723 0
c Encoding variable: aux669 with domain: int(0..4) (representing constraint (aux664 + aux666))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2725'
c Var 'aux669' direct represents '0' with '2725'
c Var 'aux669' order represents '1' with '2726'
-2725 2726 0
c Var 'aux669' direct represents '1' with '2727'
2725 -2726 2727 0
-2727 2726 0
-2727 -2725 0
c Var 'aux669' order represents '2' with '2728'
-2726 2728 0
c Var 'aux669' direct represents '2' with '2729'
2726 -2728 2729 0
-2729 2728 0
-2729 -2726 0
c Var 'aux669' order represents '3' with '2730'
-2728 2730 0
c Var 'aux669' direct represents '3' with '2731'
2728 -2730 2731 0
-2731 2730 0
-2731 -2728 0
c Var 'aux669' direct represents '4' with '-2730'
2725 2727 2729 2731 -2730 0
c Encoding variable: aux670 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2732'
c Var 'aux670' direct represents '0' with '2732'
c Var 'aux670' order represents '1' with '2733'
-2732 2733 0
c Var 'aux670' direct represents '1' with '2734'
2732 -2733 2734 0
-2734 2733 0
-2734 -2732 0
c Var 'aux670' direct represents '2' with '-2733'
2732 2734 -2733 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2735'
c Var 'aux671' direct represents '0' with '2735'
c Var 'aux671' order represents '1' with '2736'
-2735 2736 0
c Var 'aux671' direct represents '1' with '2737'
2735 -2736 2737 0
-2737 2736 0
-2737 -2735 0
c Var 'aux671' direct represents '2' with '-2736'
2735 2737 -2736 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2738'
c Var 'aux672' direct represents '0' with '2738'
c Var 'aux672' order represents '1' with '2739'
-2738 2739 0
c Var 'aux672' direct represents '1' with '2740'
2738 -2739 2740 0
-2740 2739 0
-2740 -2738 0
c Var 'aux672' direct represents '2' with '-2739'
2738 2740 -2739 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2741'
c Var 'aux673' direct represents '0' with '2741'
c Var 'aux673' order represents '1' with '2742'
-2741 2742 0
c Var 'aux673' direct represents '1' with '2743'
2741 -2742 2743 0
-2743 2742 0
-2743 -2741 0
c Var 'aux673' direct represents '2' with '-2742'
2741 2743 -2742 0
c Encoding variable: aux674 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux673))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2744'
c Var 'aux674' direct represents '0' with '2744'
c Var 'aux674' order represents '1' with '2745'
-2744 2745 0
c Var 'aux674' direct represents '1' with '2746'
2744 -2745 2746 0
-2746 2745 0
-2746 -2744 0
c Var 'aux674' order represents '2' with '2747'
-2745 2747 0
c Var 'aux674' direct represents '2' with '2748'
2745 -2747 2748 0
-2748 2747 0
-2748 -2745 0
c Var 'aux674' direct represents '3' with '-2747'
2744 2746 2748 -2747 0
c Encoding variable: aux675 with domain: int(0..4) (representing constraint (aux670 + aux672))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2749'
c Var 'aux675' direct represents '0' with '2749'
c Var 'aux675' order represents '1' with '2750'
-2749 2750 0
c Var 'aux675' direct represents '1' with '2751'
2749 -2750 2751 0
-2751 2750 0
-2751 -2749 0
c Var 'aux675' order represents '2' with '2752'
-2750 2752 0
c Var 'aux675' direct represents '2' with '2753'
2750 -2752 2753 0
-2753 2752 0
-2753 -2750 0
c Var 'aux675' order represents '3' with '2754'
-2752 2754 0
c Var 'aux675' direct represents '3' with '2755'
2752 -2754 2755 0
-2755 2754 0
-2755 -2752 0
c Var 'aux675' direct represents '4' with '-2754'
2749 2751 2753 2755 -2754 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2756'
c Var 'aux676' direct represents '0' with '2756'
c Var 'aux676' order represents '1' with '2757'
-2756 2757 0
c Var 'aux676' direct represents '1' with '2758'
2756 -2757 2758 0
-2758 2757 0
-2758 -2756 0
c Var 'aux676' direct represents '2' with '-2757'
2756 2758 -2757 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2759'
c Var 'aux677' direct represents '0' with '2759'
c Var 'aux677' order represents '1' with '2760'
-2759 2760 0
c Var 'aux677' direct represents '1' with '2761'
2759 -2760 2761 0
-2761 2760 0
-2761 -2759 0
c Var 'aux677' direct represents '2' with '-2760'
2759 2761 -2760 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2762'
c Var 'aux678' direct represents '0' with '2762'
c Var 'aux678' order represents '1' with '2763'
-2762 2763 0
c Var 'aux678' direct represents '1' with '2764'
2762 -2763 2764 0
-2764 2763 0
-2764 -2762 0
c Var 'aux678' direct represents '2' with '-2763'
2762 2764 -2763 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2765'
c Var 'aux679' direct represents '0' with '2765'
c Var 'aux679' order represents '1' with '2766'
-2765 2766 0
c Var 'aux679' direct represents '1' with '2767'
2765 -2766 2767 0
-2767 2766 0
-2767 -2765 0
c Var 'aux679' direct represents '2' with '-2766'
2765 2767 -2766 0
c Encoding variable: aux680 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux679))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2768'
c Var 'aux680' direct represents '0' with '2768'
c Var 'aux680' order represents '1' with '2769'
-2768 2769 0
c Var 'aux680' direct represents '1' with '2770'
2768 -2769 2770 0
-2770 2769 0
-2770 -2768 0
c Var 'aux680' order represents '2' with '2771'
-2769 2771 0
c Var 'aux680' direct represents '2' with '2772'
2769 -2771 2772 0
-2772 2771 0
-2772 -2769 0
c Var 'aux680' direct represents '3' with '-2771'
2768 2770 2772 -2771 0
c Encoding variable: aux681 with domain: int(0..4) (representing constraint (aux676 + aux678))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2773'
c Var 'aux681' direct represents '0' with '2773'
c Var 'aux681' order represents '1' with '2774'
-2773 2774 0
c Var 'aux681' direct represents '1' with '2775'
2773 -2774 2775 0
-2775 2774 0
-2775 -2773 0
c Var 'aux681' order represents '2' with '2776'
-2774 2776 0
c Var 'aux681' direct represents '2' with '2777'
2774 -2776 2777 0
-2777 2776 0
-2777 -2774 0
c Var 'aux681' order represents '3' with '2778'
-2776 2778 0
c Var 'aux681' direct represents '3' with '2779'
2776 -2778 2779 0
-2779 2778 0
-2779 -2776 0
c Var 'aux681' direct represents '4' with '-2778'
2773 2775 2777 2779 -2778 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '2780'
c Var 'aux682' direct represents '0' with '2780'
c Var 'aux682' order represents '1' with '2781'
-2780 2781 0
c Var 'aux682' direct represents '1' with '2782'
2780 -2781 2782 0
-2782 2781 0
-2782 -2780 0
c Var 'aux682' direct represents '2' with '-2781'
2780 2782 -2781 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '2783'
c Var 'aux683' direct represents '0' with '2783'
c Var 'aux683' order represents '1' with '2784'
-2783 2784 0
c Var 'aux683' direct represents '1' with '2785'
2783 -2784 2785 0
-2785 2784 0
-2785 -2783 0
c Var 'aux683' direct represents '2' with '-2784'
2783 2785 -2784 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '2786'
c Var 'aux684' direct represents '0' with '2786'
c Var 'aux684' order represents '1' with '2787'
-2786 2787 0
c Var 'aux684' direct represents '1' with '2788'
2786 -2787 2788 0
-2788 2787 0
-2788 -2786 0
c Var 'aux684' direct represents '2' with '-2787'
2786 2788 -2787 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '2789'
c Var 'aux685' direct represents '0' with '2789'
c Var 'aux685' order represents '1' with '2790'
-2789 2790 0
c Var 'aux685' direct represents '1' with '2791'
2789 -2790 2791 0
-2791 2790 0
-2791 -2789 0
c Var 'aux685' direct represents '2' with '-2790'
2789 2791 -2790 0
c Encoding variable: aux686 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux685))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '2792'
c Var 'aux686' direct represents '0' with '2792'
c Var 'aux686' order represents '1' with '2793'
-2792 2793 0
c Var 'aux686' direct represents '1' with '2794'
2792 -2793 2794 0
-2794 2793 0
-2794 -2792 0
c Var 'aux686' order represents '2' with '2795'
-2793 2795 0
c Var 'aux686' direct represents '2' with '2796'
2793 -2795 2796 0
-2796 2795 0
-2796 -2793 0
c Var 'aux686' direct represents '3' with '-2795'
2792 2794 2796 -2795 0
c Encoding variable: aux687 with domain: int(0..4) (representing constraint (aux682 + aux684))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '2797'
c Var 'aux687' direct represents '0' with '2797'
c Var 'aux687' order represents '1' with '2798'
-2797 2798 0
c Var 'aux687' direct represents '1' with '2799'
2797 -2798 2799 0
-2799 2798 0
-2799 -2797 0
c Var 'aux687' order represents '2' with '2800'
-2798 2800 0
c Var 'aux687' direct represents '2' with '2801'
2798 -2800 2801 0
-2801 2800 0
-2801 -2798 0
c Var 'aux687' order represents '3' with '2802'
-2800 2802 0
c Var 'aux687' direct represents '3' with '2803'
2800 -2802 2803 0
-2803 2802 0
-2803 -2800 0
c Var 'aux687' direct represents '4' with '-2802'
2797 2799 2801 2803 -2802 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '2804'
c Var 'aux688' direct represents '0' with '2804'
c Var 'aux688' order represents '1' with '2805'
-2804 2805 0
c Var 'aux688' direct represents '1' with '2806'
2804 -2805 2806 0
-2806 2805 0
-2806 -2804 0
c Var 'aux688' direct represents '2' with '-2805'
2804 2806 -2805 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '2807'
c Var 'aux689' direct represents '0' with '2807'
c Var 'aux689' order represents '1' with '2808'
-2807 2808 0
c Var 'aux689' direct represents '1' with '2809'
2807 -2808 2809 0
-2809 2808 0
-2809 -2807 0
c Var 'aux689' direct represents '2' with '-2808'
2807 2809 -2808 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '2810'
c Var 'aux690' direct represents '0' with '2810'
c Var 'aux690' order represents '1' with '2811'
-2810 2811 0
c Var 'aux690' direct represents '1' with '2812'
2810 -2811 2812 0
-2812 2811 0
-2812 -2810 0
c Var 'aux690' direct represents '2' with '-2811'
2810 2812 -2811 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '2813'
c Var 'aux691' direct represents '0' with '2813'
c Var 'aux691' order represents '1' with '2814'
-2813 2814 0
c Var 'aux691' direct represents '1' with '2815'
2813 -2814 2815 0
-2815 2814 0
-2815 -2813 0
c Var 'aux691' direct represents '2' with '-2814'
2813 2815 -2814 0
c Encoding variable: aux692 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux691))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '2816'
c Var 'aux692' direct represents '0' with '2816'
c Var 'aux692' order represents '1' with '2817'
-2816 2817 0
c Var 'aux692' direct represents '1' with '2818'
2816 -2817 2818 0
-2818 2817 0
-2818 -2816 0
c Var 'aux692' order represents '2' with '2819'
-2817 2819 0
c Var 'aux692' direct represents '2' with '2820'
2817 -2819 2820 0
-2820 2819 0
-2820 -2817 0
c Var 'aux692' direct represents '3' with '-2819'
2816 2818 2820 -2819 0
c Encoding variable: aux693 with domain: int(0..4) (representing constraint (aux688 + aux690))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '2821'
c Var 'aux693' direct represents '0' with '2821'
c Var 'aux693' order represents '1' with '2822'
-2821 2822 0
c Var 'aux693' direct represents '1' with '2823'
2821 -2822 2823 0
-2823 2822 0
-2823 -2821 0
c Var 'aux693' order represents '2' with '2824'
-2822 2824 0
c Var 'aux693' direct represents '2' with '2825'
2822 -2824 2825 0
-2825 2824 0
-2825 -2822 0
c Var 'aux693' order represents '3' with '2826'
-2824 2826 0
c Var 'aux693' direct represents '3' with '2827'
2824 -2826 2827 0
-2827 2826 0
-2827 -2824 0
c Var 'aux693' direct represents '4' with '-2826'
2821 2823 2825 2827 -2826 0
c Encoding variable: aux694 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '2828'
c Var 'aux694' direct represents '0' with '2828'
c Var 'aux694' order represents '1' with '2829'
-2828 2829 0
c Var 'aux694' direct represents '1' with '2830'
2828 -2829 2830 0
-2830 2829 0
-2830 -2828 0
c Var 'aux694' direct represents '2' with '-2829'
2828 2830 -2829 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '2831'
c Var 'aux695' direct represents '0' with '2831'
c Var 'aux695' order represents '1' with '2832'
-2831 2832 0
c Var 'aux695' direct represents '1' with '2833'
2831 -2832 2833 0
-2833 2832 0
-2833 -2831 0
c Var 'aux695' direct represents '2' with '-2832'
2831 2833 -2832 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '2834'
c Var 'aux696' direct represents '0' with '2834'
c Var 'aux696' order represents '1' with '2835'
-2834 2835 0
c Var 'aux696' direct represents '1' with '2836'
2834 -2835 2836 0
-2836 2835 0
-2836 -2834 0
c Var 'aux696' direct represents '2' with '-2835'
2834 2836 -2835 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '2837'
c Var 'aux697' direct represents '0' with '2837'
c Var 'aux697' order represents '1' with '2838'
-2837 2838 0
c Var 'aux697' direct represents '1' with '2839'
2837 -2838 2839 0
-2839 2838 0
-2839 -2837 0
c Var 'aux697' direct represents '2' with '-2838'
2837 2839 -2838 0
c Encoding variable: aux698 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux697))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '2840'
c Var 'aux698' direct represents '0' with '2840'
c Var 'aux698' order represents '1' with '2841'
-2840 2841 0
c Var 'aux698' direct represents '1' with '2842'
2840 -2841 2842 0
-2842 2841 0
-2842 -2840 0
c Var 'aux698' order represents '2' with '2843'
-2841 2843 0
c Var 'aux698' direct represents '2' with '2844'
2841 -2843 2844 0
-2844 2843 0
-2844 -2841 0
c Var 'aux698' direct represents '3' with '-2843'
2840 2842 2844 -2843 0
c Encoding variable: aux699 with domain: int(0..4) (representing constraint (aux694 + aux696))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '2845'
c Var 'aux699' direct represents '0' with '2845'
c Var 'aux699' order represents '1' with '2846'
-2845 2846 0
c Var 'aux699' direct represents '1' with '2847'
2845 -2846 2847 0
-2847 2846 0
-2847 -2845 0
c Var 'aux699' order represents '2' with '2848'
-2846 2848 0
c Var 'aux699' direct represents '2' with '2849'
2846 -2848 2849 0
-2849 2848 0
-2849 -2846 0
c Var 'aux699' order represents '3' with '2850'
-2848 2850 0
c Var 'aux699' direct represents '3' with '2851'
2848 -2850 2851 0
-2851 2850 0
-2851 -2848 0
c Var 'aux699' direct represents '4' with '-2850'
2845 2847 2849 2851 -2850 0
c Encoding variable: aux700 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '2852'
c Var 'aux700' direct represents '0' with '2852'
c Var 'aux700' order represents '1' with '2853'
-2852 2853 0
c Var 'aux700' direct represents '1' with '2854'
2852 -2853 2854 0
-2854 2853 0
-2854 -2852 0
c Var 'aux700' direct represents '2' with '-2853'
2852 2854 -2853 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '2855'
c Var 'aux701' direct represents '0' with '2855'
c Var 'aux701' order represents '1' with '2856'
-2855 2856 0
c Var 'aux701' direct represents '1' with '2857'
2855 -2856 2857 0
-2857 2856 0
-2857 -2855 0
c Var 'aux701' direct represents '2' with '-2856'
2855 2857 -2856 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '2858'
c Var 'aux702' direct represents '0' with '2858'
c Var 'aux702' order represents '1' with '2859'
-2858 2859 0
c Var 'aux702' direct represents '1' with '2860'
2858 -2859 2860 0
-2860 2859 0
-2860 -2858 0
c Var 'aux702' direct represents '2' with '-2859'
2858 2860 -2859 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '2861'
c Var 'aux703' direct represents '0' with '2861'
c Var 'aux703' order represents '1' with '2862'
-2861 2862 0
c Var 'aux703' direct represents '1' with '2863'
2861 -2862 2863 0
-2863 2862 0
-2863 -2861 0
c Var 'aux703' direct represents '2' with '-2862'
2861 2863 -2862 0
c Encoding variable: aux704 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux703))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '2864'
c Var 'aux704' direct represents '0' with '2864'
c Var 'aux704' order represents '1' with '2865'
-2864 2865 0
c Var 'aux704' direct represents '1' with '2866'
2864 -2865 2866 0
-2866 2865 0
-2866 -2864 0
c Var 'aux704' order represents '2' with '2867'
-2865 2867 0
c Var 'aux704' direct represents '2' with '2868'
2865 -2867 2868 0
-2868 2867 0
-2868 -2865 0
c Var 'aux704' direct represents '3' with '-2867'
2864 2866 2868 -2867 0
c Encoding variable: aux705 with domain: int(0..4) (representing constraint (aux700 + aux702))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '2869'
c Var 'aux705' direct represents '0' with '2869'
c Var 'aux705' order represents '1' with '2870'
-2869 2870 0
c Var 'aux705' direct represents '1' with '2871'
2869 -2870 2871 0
-2871 2870 0
-2871 -2869 0
c Var 'aux705' order represents '2' with '2872'
-2870 2872 0
c Var 'aux705' direct represents '2' with '2873'
2870 -2872 2873 0
-2873 2872 0
-2873 -2870 0
c Var 'aux705' order represents '3' with '2874'
-2872 2874 0
c Var 'aux705' direct represents '3' with '2875'
2872 -2874 2875 0
-2875 2874 0
-2875 -2872 0
c Var 'aux705' direct represents '4' with '-2874'
2869 2871 2873 2875 -2874 0
c Encoding variable: aux706 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '2876'
c Var 'aux706' direct represents '0' with '2876'
c Var 'aux706' order represents '1' with '2877'
-2876 2877 0
c Var 'aux706' direct represents '1' with '2878'
2876 -2877 2878 0
-2878 2877 0
-2878 -2876 0
c Var 'aux706' direct represents '2' with '-2877'
2876 2878 -2877 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '2879'
c Var 'aux707' direct represents '0' with '2879'
c Var 'aux707' order represents '1' with '2880'
-2879 2880 0
c Var 'aux707' direct represents '1' with '2881'
2879 -2880 2881 0
-2881 2880 0
-2881 -2879 0
c Var 'aux707' direct represents '2' with '-2880'
2879 2881 -2880 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '2882'
c Var 'aux708' direct represents '0' with '2882'
c Var 'aux708' order represents '1' with '2883'
-2882 2883 0
c Var 'aux708' direct represents '1' with '2884'
2882 -2883 2884 0
-2884 2883 0
-2884 -2882 0
c Var 'aux708' direct represents '2' with '-2883'
2882 2884 -2883 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '2885'
c Var 'aux709' direct represents '0' with '2885'
c Var 'aux709' order represents '1' with '2886'
-2885 2886 0
c Var 'aux709' direct represents '1' with '2887'
2885 -2886 2887 0
-2887 2886 0
-2887 -2885 0
c Var 'aux709' direct represents '2' with '-2886'
2885 2887 -2886 0
c Encoding variable: aux710 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux709))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '2888'
c Var 'aux710' direct represents '0' with '2888'
c Var 'aux710' order represents '1' with '2889'
-2888 2889 0
c Var 'aux710' direct represents '1' with '2890'
2888 -2889 2890 0
-2890 2889 0
-2890 -2888 0
c Var 'aux710' order represents '2' with '2891'
-2889 2891 0
c Var 'aux710' direct represents '2' with '2892'
2889 -2891 2892 0
-2892 2891 0
-2892 -2889 0
c Var 'aux710' direct represents '3' with '-2891'
2888 2890 2892 -2891 0
c Encoding variable: aux711 with domain: int(0..4) (representing constraint (aux706 + aux708))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '2893'
c Var 'aux711' direct represents '0' with '2893'
c Var 'aux711' order represents '1' with '2894'
-2893 2894 0
c Var 'aux711' direct represents '1' with '2895'
2893 -2894 2895 0
-2895 2894 0
-2895 -2893 0
c Var 'aux711' order represents '2' with '2896'
-2894 2896 0
c Var 'aux711' direct represents '2' with '2897'
2894 -2896 2897 0
-2897 2896 0
-2897 -2894 0
c Var 'aux711' order represents '3' with '2898'
-2896 2898 0
c Var 'aux711' direct represents '3' with '2899'
2896 -2898 2899 0
-2899 2898 0
-2899 -2896 0
c Var 'aux711' direct represents '4' with '-2898'
2893 2895 2897 2899 -2898 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '2900'
c Var 'aux712' direct represents '0' with '2900'
c Var 'aux712' order represents '1' with '2901'
-2900 2901 0
c Var 'aux712' direct represents '1' with '2902'
2900 -2901 2902 0
-2902 2901 0
-2902 -2900 0
c Var 'aux712' direct represents '2' with '-2901'
2900 2902 -2901 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '2903'
c Var 'aux713' direct represents '0' with '2903'
c Var 'aux713' order represents '1' with '2904'
-2903 2904 0
c Var 'aux713' direct represents '1' with '2905'
2903 -2904 2905 0
-2905 2904 0
-2905 -2903 0
c Var 'aux713' direct represents '2' with '-2904'
2903 2905 -2904 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '2906'
c Var 'aux714' direct represents '0' with '2906'
c Var 'aux714' order represents '1' with '2907'
-2906 2907 0
c Var 'aux714' direct represents '1' with '2908'
2906 -2907 2908 0
-2908 2907 0
-2908 -2906 0
c Var 'aux714' direct represents '2' with '-2907'
2906 2908 -2907 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '2909'
c Var 'aux715' direct represents '0' with '2909'
c Var 'aux715' order represents '1' with '2910'
-2909 2910 0
c Var 'aux715' direct represents '1' with '2911'
2909 -2910 2911 0
-2911 2910 0
-2911 -2909 0
c Var 'aux715' direct represents '2' with '-2910'
2909 2911 -2910 0
c Encoding variable: aux716 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux715))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '2912'
c Var 'aux716' direct represents '0' with '2912'
c Var 'aux716' order represents '1' with '2913'
-2912 2913 0
c Var 'aux716' direct represents '1' with '2914'
2912 -2913 2914 0
-2914 2913 0
-2914 -2912 0
c Var 'aux716' order represents '2' with '2915'
-2913 2915 0
c Var 'aux716' direct represents '2' with '2916'
2913 -2915 2916 0
-2916 2915 0
-2916 -2913 0
c Var 'aux716' direct represents '3' with '-2915'
2912 2914 2916 -2915 0
c Encoding variable: aux717 with domain: int(0..4) (representing constraint (aux712 + aux714))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '2917'
c Var 'aux717' direct represents '0' with '2917'
c Var 'aux717' order represents '1' with '2918'
-2917 2918 0
c Var 'aux717' direct represents '1' with '2919'
2917 -2918 2919 0
-2919 2918 0
-2919 -2917 0
c Var 'aux717' order represents '2' with '2920'
-2918 2920 0
c Var 'aux717' direct represents '2' with '2921'
2918 -2920 2921 0
-2921 2920 0
-2921 -2918 0
c Var 'aux717' order represents '3' with '2922'
-2920 2922 0
c Var 'aux717' direct represents '3' with '2923'
2920 -2922 2923 0
-2923 2922 0
-2923 -2920 0
c Var 'aux717' direct represents '4' with '-2922'
2917 2919 2921 2923 -2922 0
c Encoding variable: aux718 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '2924'
c Var 'aux718' direct represents '0' with '2924'
c Var 'aux718' order represents '1' with '2925'
-2924 2925 0
c Var 'aux718' direct represents '1' with '2926'
2924 -2925 2926 0
-2926 2925 0
-2926 -2924 0
c Var 'aux718' direct represents '2' with '-2925'
2924 2926 -2925 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '2927'
c Var 'aux719' direct represents '0' with '2927'
c Var 'aux719' order represents '1' with '2928'
-2927 2928 0
c Var 'aux719' direct represents '1' with '2929'
2927 -2928 2929 0
-2929 2928 0
-2929 -2927 0
c Var 'aux719' direct represents '2' with '-2928'
2927 2929 -2928 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '2930'
c Var 'aux720' direct represents '0' with '2930'
c Var 'aux720' order represents '1' with '2931'
-2930 2931 0
c Var 'aux720' direct represents '1' with '2932'
2930 -2931 2932 0
-2932 2931 0
-2932 -2930 0
c Var 'aux720' direct represents '2' with '-2931'
2930 2932 -2931 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '2933'
c Var 'aux721' direct represents '0' with '2933'
c Var 'aux721' order represents '1' with '2934'
-2933 2934 0
c Var 'aux721' direct represents '1' with '2935'
2933 -2934 2935 0
-2935 2934 0
-2935 -2933 0
c Var 'aux721' direct represents '2' with '-2934'
2933 2935 -2934 0
c Encoding variable: aux722 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux721))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '2936'
c Var 'aux722' direct represents '0' with '2936'
c Var 'aux722' order represents '1' with '2937'
-2936 2937 0
c Var 'aux722' direct represents '1' with '2938'
2936 -2937 2938 0
-2938 2937 0
-2938 -2936 0
c Var 'aux722' order represents '2' with '2939'
-2937 2939 0
c Var 'aux722' direct represents '2' with '2940'
2937 -2939 2940 0
-2940 2939 0
-2940 -2937 0
c Var 'aux722' direct represents '3' with '-2939'
2936 2938 2940 -2939 0
c Encoding variable: aux723 with domain: int(0..4) (representing constraint (aux718 + aux720))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '2941'
c Var 'aux723' direct represents '0' with '2941'
c Var 'aux723' order represents '1' with '2942'
-2941 2942 0
c Var 'aux723' direct represents '1' with '2943'
2941 -2942 2943 0
-2943 2942 0
-2943 -2941 0
c Var 'aux723' order represents '2' with '2944'
-2942 2944 0
c Var 'aux723' direct represents '2' with '2945'
2942 -2944 2945 0
-2945 2944 0
-2945 -2942 0
c Var 'aux723' order represents '3' with '2946'
-2944 2946 0
c Var 'aux723' direct represents '3' with '2947'
2944 -2946 2947 0
-2947 2946 0
-2947 -2944 0
c Var 'aux723' direct represents '4' with '-2946'
2941 2943 2945 2947 -2946 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '2948'
c Var 'aux724' direct represents '0' with '2948'
c Var 'aux724' order represents '1' with '2949'
-2948 2949 0
c Var 'aux724' direct represents '1' with '2950'
2948 -2949 2950 0
-2950 2949 0
-2950 -2948 0
c Var 'aux724' direct represents '2' with '-2949'
2948 2950 -2949 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '2951'
c Var 'aux725' direct represents '0' with '2951'
c Var 'aux725' order represents '1' with '2952'
-2951 2952 0
c Var 'aux725' direct represents '1' with '2953'
2951 -2952 2953 0
-2953 2952 0
-2953 -2951 0
c Var 'aux725' direct represents '2' with '-2952'
2951 2953 -2952 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '2954'
c Var 'aux726' direct represents '0' with '2954'
c Var 'aux726' order represents '1' with '2955'
-2954 2955 0
c Var 'aux726' direct represents '1' with '2956'
2954 -2955 2956 0
-2956 2955 0
-2956 -2954 0
c Var 'aux726' direct represents '2' with '-2955'
2954 2956 -2955 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '2957'
c Var 'aux727' direct represents '0' with '2957'
c Var 'aux727' order represents '1' with '2958'
-2957 2958 0
c Var 'aux727' direct represents '1' with '2959'
2957 -2958 2959 0
-2959 2958 0
-2959 -2957 0
c Var 'aux727' direct represents '2' with '-2958'
2957 2959 -2958 0
c Encoding variable: aux728 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux727))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '2960'
c Var 'aux728' direct represents '0' with '2960'
c Var 'aux728' order represents '1' with '2961'
-2960 2961 0
c Var 'aux728' direct represents '1' with '2962'
2960 -2961 2962 0
-2962 2961 0
-2962 -2960 0
c Var 'aux728' order represents '2' with '2963'
-2961 2963 0
c Var 'aux728' direct represents '2' with '2964'
2961 -2963 2964 0
-2964 2963 0
-2964 -2961 0
c Var 'aux728' direct represents '3' with '-2963'
2960 2962 2964 -2963 0
c Encoding variable: aux729 with domain: int(0..4) (representing constraint (aux724 + aux726))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '2965'
c Var 'aux729' direct represents '0' with '2965'
c Var 'aux729' order represents '1' with '2966'
-2965 2966 0
c Var 'aux729' direct represents '1' with '2967'
2965 -2966 2967 0
-2967 2966 0
-2967 -2965 0
c Var 'aux729' order represents '2' with '2968'
-2966 2968 0
c Var 'aux729' direct represents '2' with '2969'
2966 -2968 2969 0
-2969 2968 0
-2969 -2966 0
c Var 'aux729' order represents '3' with '2970'
-2968 2970 0
c Var 'aux729' direct represents '3' with '2971'
2968 -2970 2971 0
-2971 2970 0
-2971 -2968 0
c Var 'aux729' direct represents '4' with '-2970'
2965 2967 2969 2971 -2970 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '2972'
c Var 'aux730' direct represents '0' with '2972'
c Var 'aux730' order represents '1' with '2973'
-2972 2973 0
c Var 'aux730' direct represents '1' with '2974'
2972 -2973 2974 0
-2974 2973 0
-2974 -2972 0
c Var 'aux730' direct represents '2' with '-2973'
2972 2974 -2973 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '2975'
c Var 'aux731' direct represents '0' with '2975'
c Var 'aux731' order represents '1' with '2976'
-2975 2976 0
c Var 'aux731' direct represents '1' with '2977'
2975 -2976 2977 0
-2977 2976 0
-2977 -2975 0
c Var 'aux731' direct represents '2' with '-2976'
2975 2977 -2976 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '2978'
c Var 'aux732' direct represents '0' with '2978'
c Var 'aux732' order represents '1' with '2979'
-2978 2979 0
c Var 'aux732' direct represents '1' with '2980'
2978 -2979 2980 0
-2980 2979 0
-2980 -2978 0
c Var 'aux732' direct represents '2' with '-2979'
2978 2980 -2979 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '2981'
c Var 'aux733' direct represents '0' with '2981'
c Var 'aux733' order represents '1' with '2982'
-2981 2982 0
c Var 'aux733' direct represents '1' with '2983'
2981 -2982 2983 0
-2983 2982 0
-2983 -2981 0
c Var 'aux733' direct represents '2' with '-2982'
2981 2983 -2982 0
c Encoding variable: aux734 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux733))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '2984'
c Var 'aux734' direct represents '0' with '2984'
c Var 'aux734' order represents '1' with '2985'
-2984 2985 0
c Var 'aux734' direct represents '1' with '2986'
2984 -2985 2986 0
-2986 2985 0
-2986 -2984 0
c Var 'aux734' order represents '2' with '2987'
-2985 2987 0
c Var 'aux734' direct represents '2' with '2988'
2985 -2987 2988 0
-2988 2987 0
-2988 -2985 0
c Var 'aux734' direct represents '3' with '-2987'
2984 2986 2988 -2987 0
c Encoding variable: aux735 with domain: int(0..4) (representing constraint (aux730 + aux732))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '2989'
c Var 'aux735' direct represents '0' with '2989'
c Var 'aux735' order represents '1' with '2990'
-2989 2990 0
c Var 'aux735' direct represents '1' with '2991'
2989 -2990 2991 0
-2991 2990 0
-2991 -2989 0
c Var 'aux735' order represents '2' with '2992'
-2990 2992 0
c Var 'aux735' direct represents '2' with '2993'
2990 -2992 2993 0
-2993 2992 0
-2993 -2990 0
c Var 'aux735' order represents '3' with '2994'
-2992 2994 0
c Var 'aux735' direct represents '3' with '2995'
2992 -2994 2995 0
-2995 2994 0
-2995 -2992 0
c Var 'aux735' direct represents '4' with '-2994'
2989 2991 2993 2995 -2994 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '2996'
c Var 'aux736' direct represents '0' with '2996'
c Var 'aux736' order represents '1' with '2997'
-2996 2997 0
c Var 'aux736' direct represents '1' with '2998'
2996 -2997 2998 0
-2998 2997 0
-2998 -2996 0
c Var 'aux736' direct represents '2' with '-2997'
2996 2998 -2997 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '2999'
c Var 'aux737' direct represents '0' with '2999'
c Var 'aux737' order represents '1' with '3000'
-2999 3000 0
c Var 'aux737' direct represents '1' with '3001'
2999 -3000 3001 0
-3001 3000 0
-3001 -2999 0
c Var 'aux737' direct represents '2' with '-3000'
2999 3001 -3000 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3002'
c Var 'aux738' direct represents '0' with '3002'
c Var 'aux738' order represents '1' with '3003'
-3002 3003 0
c Var 'aux738' direct represents '1' with '3004'
3002 -3003 3004 0
-3004 3003 0
-3004 -3002 0
c Var 'aux738' direct represents '2' with '-3003'
3002 3004 -3003 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3005'
c Var 'aux739' direct represents '0' with '3005'
c Var 'aux739' order represents '1' with '3006'
-3005 3006 0
c Var 'aux739' direct represents '1' with '3007'
3005 -3006 3007 0
-3007 3006 0
-3007 -3005 0
c Var 'aux739' direct represents '2' with '-3006'
3005 3007 -3006 0
c Encoding variable: aux740 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux739))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3008'
c Var 'aux740' direct represents '0' with '3008'
c Var 'aux740' order represents '1' with '3009'
-3008 3009 0
c Var 'aux740' direct represents '1' with '3010'
3008 -3009 3010 0
-3010 3009 0
-3010 -3008 0
c Var 'aux740' order represents '2' with '3011'
-3009 3011 0
c Var 'aux740' direct represents '2' with '3012'
3009 -3011 3012 0
-3012 3011 0
-3012 -3009 0
c Var 'aux740' direct represents '3' with '-3011'
3008 3010 3012 -3011 0
c Encoding variable: aux741 with domain: int(0..4) (representing constraint (aux736 + aux738))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3013'
c Var 'aux741' direct represents '0' with '3013'
c Var 'aux741' order represents '1' with '3014'
-3013 3014 0
c Var 'aux741' direct represents '1' with '3015'
3013 -3014 3015 0
-3015 3014 0
-3015 -3013 0
c Var 'aux741' order represents '2' with '3016'
-3014 3016 0
c Var 'aux741' direct represents '2' with '3017'
3014 -3016 3017 0
-3017 3016 0
-3017 -3014 0
c Var 'aux741' order represents '3' with '3018'
-3016 3018 0
c Var 'aux741' direct represents '3' with '3019'
3016 -3018 3019 0
-3019 3018 0
-3019 -3016 0
c Var 'aux741' direct represents '4' with '-3018'
3013 3015 3017 3019 -3018 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3020'
c Var 'aux742' direct represents '0' with '3020'
c Var 'aux742' order represents '1' with '3021'
-3020 3021 0
c Var 'aux742' direct represents '1' with '3022'
3020 -3021 3022 0
-3022 3021 0
-3022 -3020 0
c Var 'aux742' direct represents '2' with '-3021'
3020 3022 -3021 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3023'
c Var 'aux743' direct represents '0' with '3023'
c Var 'aux743' order represents '1' with '3024'
-3023 3024 0
c Var 'aux743' direct represents '1' with '3025'
3023 -3024 3025 0
-3025 3024 0
-3025 -3023 0
c Var 'aux743' direct represents '2' with '-3024'
3023 3025 -3024 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3026'
c Var 'aux744' direct represents '0' with '3026'
c Var 'aux744' order represents '1' with '3027'
-3026 3027 0
c Var 'aux744' direct represents '1' with '3028'
3026 -3027 3028 0
-3028 3027 0
-3028 -3026 0
c Var 'aux744' direct represents '2' with '-3027'
3026 3028 -3027 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3029'
c Var 'aux745' direct represents '0' with '3029'
c Var 'aux745' order represents '1' with '3030'
-3029 3030 0
c Var 'aux745' direct represents '1' with '3031'
3029 -3030 3031 0
-3031 3030 0
-3031 -3029 0
c Var 'aux745' direct represents '2' with '-3030'
3029 3031 -3030 0
c Encoding variable: aux746 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux745))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3032'
c Var 'aux746' direct represents '0' with '3032'
c Var 'aux746' order represents '1' with '3033'
-3032 3033 0
c Var 'aux746' direct represents '1' with '3034'
3032 -3033 3034 0
-3034 3033 0
-3034 -3032 0
c Var 'aux746' order represents '2' with '3035'
-3033 3035 0
c Var 'aux746' direct represents '2' with '3036'
3033 -3035 3036 0
-3036 3035 0
-3036 -3033 0
c Var 'aux746' direct represents '3' with '-3035'
3032 3034 3036 -3035 0
c Encoding variable: aux747 with domain: int(0..4) (representing constraint (aux742 + aux744))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3037'
c Var 'aux747' direct represents '0' with '3037'
c Var 'aux747' order represents '1' with '3038'
-3037 3038 0
c Var 'aux747' direct represents '1' with '3039'
3037 -3038 3039 0
-3039 3038 0
-3039 -3037 0
c Var 'aux747' order represents '2' with '3040'
-3038 3040 0
c Var 'aux747' direct represents '2' with '3041'
3038 -3040 3041 0
-3041 3040 0
-3041 -3038 0
c Var 'aux747' order represents '3' with '3042'
-3040 3042 0
c Var 'aux747' direct represents '3' with '3043'
3040 -3042 3043 0
-3043 3042 0
-3043 -3040 0
c Var 'aux747' direct represents '4' with '-3042'
3037 3039 3041 3043 -3042 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3044'
c Var 'aux748' direct represents '0' with '3044'
c Var 'aux748' order represents '1' with '3045'
-3044 3045 0
c Var 'aux748' direct represents '1' with '3046'
3044 -3045 3046 0
-3046 3045 0
-3046 -3044 0
c Var 'aux748' direct represents '2' with '-3045'
3044 3046 -3045 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3047'
c Var 'aux749' direct represents '0' with '3047'
c Var 'aux749' order represents '1' with '3048'
-3047 3048 0
c Var 'aux749' direct represents '1' with '3049'
3047 -3048 3049 0
-3049 3048 0
-3049 -3047 0
c Var 'aux749' direct represents '2' with '-3048'
3047 3049 -3048 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3050'
c Var 'aux750' direct represents '0' with '3050'
c Var 'aux750' order represents '1' with '3051'
-3050 3051 0
c Var 'aux750' direct represents '1' with '3052'
3050 -3051 3052 0
-3052 3051 0
-3052 -3050 0
c Var 'aux750' direct represents '2' with '-3051'
3050 3052 -3051 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3053'
c Var 'aux751' direct represents '0' with '3053'
c Var 'aux751' order represents '1' with '3054'
-3053 3054 0
c Var 'aux751' direct represents '1' with '3055'
3053 -3054 3055 0
-3055 3054 0
-3055 -3053 0
c Var 'aux751' direct represents '2' with '-3054'
3053 3055 -3054 0
c Encoding variable: aux752 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux751))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3056'
c Var 'aux752' direct represents '0' with '3056'
c Var 'aux752' order represents '1' with '3057'
-3056 3057 0
c Var 'aux752' direct represents '1' with '3058'
3056 -3057 3058 0
-3058 3057 0
-3058 -3056 0
c Var 'aux752' order represents '2' with '3059'
-3057 3059 0
c Var 'aux752' direct represents '2' with '3060'
3057 -3059 3060 0
-3060 3059 0
-3060 -3057 0
c Var 'aux752' direct represents '3' with '-3059'
3056 3058 3060 -3059 0
c Encoding variable: aux753 with domain: int(0..4) (representing constraint (aux748 + aux750))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3061'
c Var 'aux753' direct represents '0' with '3061'
c Var 'aux753' order represents '1' with '3062'
-3061 3062 0
c Var 'aux753' direct represents '1' with '3063'
3061 -3062 3063 0
-3063 3062 0
-3063 -3061 0
c Var 'aux753' order represents '2' with '3064'
-3062 3064 0
c Var 'aux753' direct represents '2' with '3065'
3062 -3064 3065 0
-3065 3064 0
-3065 -3062 0
c Var 'aux753' order represents '3' with '3066'
-3064 3066 0
c Var 'aux753' direct represents '3' with '3067'
3064 -3066 3067 0
-3067 3066 0
-3067 -3064 0
c Var 'aux753' direct represents '4' with '-3066'
3061 3063 3065 3067 -3066 0
c Encoding variable: aux754 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3068'
c Var 'aux754' direct represents '0' with '3068'
c Var 'aux754' order represents '1' with '3069'
-3068 3069 0
c Var 'aux754' direct represents '1' with '3070'
3068 -3069 3070 0
-3070 3069 0
-3070 -3068 0
c Var 'aux754' direct represents '2' with '-3069'
3068 3070 -3069 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3071'
c Var 'aux755' direct represents '0' with '3071'
c Var 'aux755' order represents '1' with '3072'
-3071 3072 0
c Var 'aux755' direct represents '1' with '3073'
3071 -3072 3073 0
-3073 3072 0
-3073 -3071 0
c Var 'aux755' direct represents '2' with '-3072'
3071 3073 -3072 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3074'
c Var 'aux756' direct represents '0' with '3074'
c Var 'aux756' order represents '1' with '3075'
-3074 3075 0
c Var 'aux756' direct represents '1' with '3076'
3074 -3075 3076 0
-3076 3075 0
-3076 -3074 0
c Var 'aux756' direct represents '2' with '-3075'
3074 3076 -3075 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3077'
c Var 'aux757' direct represents '0' with '3077'
c Var 'aux757' order represents '1' with '3078'
-3077 3078 0
c Var 'aux757' direct represents '1' with '3079'
3077 -3078 3079 0
-3079 3078 0
-3079 -3077 0
c Var 'aux757' direct represents '2' with '-3078'
3077 3079 -3078 0
c Encoding variable: aux758 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux757))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3080'
c Var 'aux758' direct represents '0' with '3080'
c Var 'aux758' order represents '1' with '3081'
-3080 3081 0
c Var 'aux758' direct represents '1' with '3082'
3080 -3081 3082 0
-3082 3081 0
-3082 -3080 0
c Var 'aux758' order represents '2' with '3083'
-3081 3083 0
c Var 'aux758' direct represents '2' with '3084'
3081 -3083 3084 0
-3084 3083 0
-3084 -3081 0
c Var 'aux758' direct represents '3' with '-3083'
3080 3082 3084 -3083 0
c Encoding variable: aux759 with domain: int(0..4) (representing constraint (aux754 + aux756))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3085'
c Var 'aux759' direct represents '0' with '3085'
c Var 'aux759' order represents '1' with '3086'
-3085 3086 0
c Var 'aux759' direct represents '1' with '3087'
3085 -3086 3087 0
-3087 3086 0
-3087 -3085 0
c Var 'aux759' order represents '2' with '3088'
-3086 3088 0
c Var 'aux759' direct represents '2' with '3089'
3086 -3088 3089 0
-3089 3088 0
-3089 -3086 0
c Var 'aux759' order represents '3' with '3090'
-3088 3090 0
c Var 'aux759' direct represents '3' with '3091'
3088 -3090 3091 0
-3091 3090 0
-3091 -3088 0
c Var 'aux759' direct represents '4' with '-3090'
3085 3087 3089 3091 -3090 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3092'
c Var 'aux760' direct represents '0' with '3092'
c Var 'aux760' order represents '1' with '3093'
-3092 3093 0
c Var 'aux760' direct represents '1' with '3094'
3092 -3093 3094 0
-3094 3093 0
-3094 -3092 0
c Var 'aux760' direct represents '2' with '-3093'
3092 3094 -3093 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3095'
c Var 'aux761' direct represents '0' with '3095'
c Var 'aux761' order represents '1' with '3096'
-3095 3096 0
c Var 'aux761' direct represents '1' with '3097'
3095 -3096 3097 0
-3097 3096 0
-3097 -3095 0
c Var 'aux761' direct represents '2' with '-3096'
3095 3097 -3096 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3098'
c Var 'aux762' direct represents '0' with '3098'
c Var 'aux762' order represents '1' with '3099'
-3098 3099 0
c Var 'aux762' direct represents '1' with '3100'
3098 -3099 3100 0
-3100 3099 0
-3100 -3098 0
c Var 'aux762' direct represents '2' with '-3099'
3098 3100 -3099 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3101'
c Var 'aux763' direct represents '0' with '3101'
c Var 'aux763' order represents '1' with '3102'
-3101 3102 0
c Var 'aux763' direct represents '1' with '3103'
3101 -3102 3103 0
-3103 3102 0
-3103 -3101 0
c Var 'aux763' direct represents '2' with '-3102'
3101 3103 -3102 0
c Encoding variable: aux764 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux763))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3104'
c Var 'aux764' direct represents '0' with '3104'
c Var 'aux764' order represents '1' with '3105'
-3104 3105 0
c Var 'aux764' direct represents '1' with '3106'
3104 -3105 3106 0
-3106 3105 0
-3106 -3104 0
c Var 'aux764' order represents '2' with '3107'
-3105 3107 0
c Var 'aux764' direct represents '2' with '3108'
3105 -3107 3108 0
-3108 3107 0
-3108 -3105 0
c Var 'aux764' direct represents '3' with '-3107'
3104 3106 3108 -3107 0
c Encoding variable: aux765 with domain: int(0..4) (representing constraint (aux760 + aux762))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3109'
c Var 'aux765' direct represents '0' with '3109'
c Var 'aux765' order represents '1' with '3110'
-3109 3110 0
c Var 'aux765' direct represents '1' with '3111'
3109 -3110 3111 0
-3111 3110 0
-3111 -3109 0
c Var 'aux765' order represents '2' with '3112'
-3110 3112 0
c Var 'aux765' direct represents '2' with '3113'
3110 -3112 3113 0
-3113 3112 0
-3113 -3110 0
c Var 'aux765' order represents '3' with '3114'
-3112 3114 0
c Var 'aux765' direct represents '3' with '3115'
3112 -3114 3115 0
-3115 3114 0
-3115 -3112 0
c Var 'aux765' direct represents '4' with '-3114'
3109 3111 3113 3115 -3114 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3116'
c Var 'aux766' direct represents '0' with '3116'
c Var 'aux766' order represents '1' with '3117'
-3116 3117 0
c Var 'aux766' direct represents '1' with '3118'
3116 -3117 3118 0
-3118 3117 0
-3118 -3116 0
c Var 'aux766' direct represents '2' with '-3117'
3116 3118 -3117 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3119'
c Var 'aux767' direct represents '0' with '3119'
c Var 'aux767' order represents '1' with '3120'
-3119 3120 0
c Var 'aux767' direct represents '1' with '3121'
3119 -3120 3121 0
-3121 3120 0
-3121 -3119 0
c Var 'aux767' direct represents '2' with '-3120'
3119 3121 -3120 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3122'
c Var 'aux768' direct represents '0' with '3122'
c Var 'aux768' order represents '1' with '3123'
-3122 3123 0
c Var 'aux768' direct represents '1' with '3124'
3122 -3123 3124 0
-3124 3123 0
-3124 -3122 0
c Var 'aux768' direct represents '2' with '-3123'
3122 3124 -3123 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3125'
c Var 'aux769' direct represents '0' with '3125'
c Var 'aux769' order represents '1' with '3126'
-3125 3126 0
c Var 'aux769' direct represents '1' with '3127'
3125 -3126 3127 0
-3127 3126 0
-3127 -3125 0
c Var 'aux769' direct represents '2' with '-3126'
3125 3127 -3126 0
c Encoding variable: aux770 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux769))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3128'
c Var 'aux770' direct represents '0' with '3128'
c Var 'aux770' order represents '1' with '3129'
-3128 3129 0
c Var 'aux770' direct represents '1' with '3130'
3128 -3129 3130 0
-3130 3129 0
-3130 -3128 0
c Var 'aux770' order represents '2' with '3131'
-3129 3131 0
c Var 'aux770' direct represents '2' with '3132'
3129 -3131 3132 0
-3132 3131 0
-3132 -3129 0
c Var 'aux770' direct represents '3' with '-3131'
3128 3130 3132 -3131 0
c Encoding variable: aux771 with domain: int(0..4) (representing constraint (aux766 + aux768))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3133'
c Var 'aux771' direct represents '0' with '3133'
c Var 'aux771' order represents '1' with '3134'
-3133 3134 0
c Var 'aux771' direct represents '1' with '3135'
3133 -3134 3135 0
-3135 3134 0
-3135 -3133 0
c Var 'aux771' order represents '2' with '3136'
-3134 3136 0
c Var 'aux771' direct represents '2' with '3137'
3134 -3136 3137 0
-3137 3136 0
-3137 -3134 0
c Var 'aux771' order represents '3' with '3138'
-3136 3138 0
c Var 'aux771' direct represents '3' with '3139'
3136 -3138 3139 0
-3139 3138 0
-3139 -3136 0
c Var 'aux771' direct represents '4' with '-3138'
3133 3135 3137 3139 -3138 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3140'
c Var 'aux772' direct represents '0' with '3140'
c Var 'aux772' order represents '1' with '3141'
-3140 3141 0
c Var 'aux772' direct represents '1' with '3142'
3140 -3141 3142 0
-3142 3141 0
-3142 -3140 0
c Var 'aux772' direct represents '2' with '-3141'
3140 3142 -3141 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3143'
c Var 'aux773' direct represents '0' with '3143'
c Var 'aux773' order represents '1' with '3144'
-3143 3144 0
c Var 'aux773' direct represents '1' with '3145'
3143 -3144 3145 0
-3145 3144 0
-3145 -3143 0
c Var 'aux773' direct represents '2' with '-3144'
3143 3145 -3144 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3146'
c Var 'aux774' direct represents '0' with '3146'
c Var 'aux774' order represents '1' with '3147'
-3146 3147 0
c Var 'aux774' direct represents '1' with '3148'
3146 -3147 3148 0
-3148 3147 0
-3148 -3146 0
c Var 'aux774' direct represents '2' with '-3147'
3146 3148 -3147 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3149'
c Var 'aux775' direct represents '0' with '3149'
c Var 'aux775' order represents '1' with '3150'
-3149 3150 0
c Var 'aux775' direct represents '1' with '3151'
3149 -3150 3151 0
-3151 3150 0
-3151 -3149 0
c Var 'aux775' direct represents '2' with '-3150'
3149 3151 -3150 0
c Encoding variable: aux776 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux775))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3152'
c Var 'aux776' direct represents '0' with '3152'
c Var 'aux776' order represents '1' with '3153'
-3152 3153 0
c Var 'aux776' direct represents '1' with '3154'
3152 -3153 3154 0
-3154 3153 0
-3154 -3152 0
c Var 'aux776' order represents '2' with '3155'
-3153 3155 0
c Var 'aux776' direct represents '2' with '3156'
3153 -3155 3156 0
-3156 3155 0
-3156 -3153 0
c Var 'aux776' direct represents '3' with '-3155'
3152 3154 3156 -3155 0
c Encoding variable: aux777 with domain: int(0..4) (representing constraint (aux772 + aux774))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3157'
c Var 'aux777' direct represents '0' with '3157'
c Var 'aux777' order represents '1' with '3158'
-3157 3158 0
c Var 'aux777' direct represents '1' with '3159'
3157 -3158 3159 0
-3159 3158 0
-3159 -3157 0
c Var 'aux777' order represents '2' with '3160'
-3158 3160 0
c Var 'aux777' direct represents '2' with '3161'
3158 -3160 3161 0
-3161 3160 0
-3161 -3158 0
c Var 'aux777' order represents '3' with '3162'
-3160 3162 0
c Var 'aux777' direct represents '3' with '3163'
3160 -3162 3163 0
-3163 3162 0
-3163 -3160 0
c Var 'aux777' direct represents '4' with '-3162'
3157 3159 3161 3163 -3162 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3164'
c Var 'aux778' direct represents '0' with '3164'
c Var 'aux778' order represents '1' with '3165'
-3164 3165 0
c Var 'aux778' direct represents '1' with '3166'
3164 -3165 3166 0
-3166 3165 0
-3166 -3164 0
c Var 'aux778' direct represents '2' with '-3165'
3164 3166 -3165 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3167'
c Var 'aux779' direct represents '0' with '3167'
c Var 'aux779' order represents '1' with '3168'
-3167 3168 0
c Var 'aux779' direct represents '1' with '3169'
3167 -3168 3169 0
-3169 3168 0
-3169 -3167 0
c Var 'aux779' direct represents '2' with '-3168'
3167 3169 -3168 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3170'
c Var 'aux780' direct represents '0' with '3170'
c Var 'aux780' order represents '1' with '3171'
-3170 3171 0
c Var 'aux780' direct represents '1' with '3172'
3170 -3171 3172 0
-3172 3171 0
-3172 -3170 0
c Var 'aux780' direct represents '2' with '-3171'
3170 3172 -3171 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3173'
c Var 'aux781' direct represents '0' with '3173'
c Var 'aux781' order represents '1' with '3174'
-3173 3174 0
c Var 'aux781' direct represents '1' with '3175'
3173 -3174 3175 0
-3175 3174 0
-3175 -3173 0
c Var 'aux781' direct represents '2' with '-3174'
3173 3175 -3174 0
c Encoding variable: aux782 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux781))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3176'
c Var 'aux782' direct represents '0' with '3176'
c Var 'aux782' order represents '1' with '3177'
-3176 3177 0
c Var 'aux782' direct represents '1' with '3178'
3176 -3177 3178 0
-3178 3177 0
-3178 -3176 0
c Var 'aux782' order represents '2' with '3179'
-3177 3179 0
c Var 'aux782' direct represents '2' with '3180'
3177 -3179 3180 0
-3180 3179 0
-3180 -3177 0
c Var 'aux782' direct represents '3' with '-3179'
3176 3178 3180 -3179 0
c Encoding variable: aux783 with domain: int(0..4) (representing constraint (aux778 + aux780))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3181'
c Var 'aux783' direct represents '0' with '3181'
c Var 'aux783' order represents '1' with '3182'
-3181 3182 0
c Var 'aux783' direct represents '1' with '3183'
3181 -3182 3183 0
-3183 3182 0
-3183 -3181 0
c Var 'aux783' order represents '2' with '3184'
-3182 3184 0
c Var 'aux783' direct represents '2' with '3185'
3182 -3184 3185 0
-3185 3184 0
-3185 -3182 0
c Var 'aux783' order represents '3' with '3186'
-3184 3186 0
c Var 'aux783' direct represents '3' with '3187'
3184 -3186 3187 0
-3187 3186 0
-3187 -3184 0
c Var 'aux783' direct represents '4' with '-3186'
3181 3183 3185 3187 -3186 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3188'
c Var 'aux784' direct represents '0' with '3188'
c Var 'aux784' order represents '1' with '3189'
-3188 3189 0
c Var 'aux784' direct represents '1' with '3190'
3188 -3189 3190 0
-3190 3189 0
-3190 -3188 0
c Var 'aux784' direct represents '2' with '-3189'
3188 3190 -3189 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3191'
c Var 'aux785' direct represents '0' with '3191'
c Var 'aux785' order represents '1' with '3192'
-3191 3192 0
c Var 'aux785' direct represents '1' with '3193'
3191 -3192 3193 0
-3193 3192 0
-3193 -3191 0
c Var 'aux785' direct represents '2' with '-3192'
3191 3193 -3192 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3194'
c Var 'aux786' direct represents '0' with '3194'
c Var 'aux786' order represents '1' with '3195'
-3194 3195 0
c Var 'aux786' direct represents '1' with '3196'
3194 -3195 3196 0
-3196 3195 0
-3196 -3194 0
c Var 'aux786' direct represents '2' with '-3195'
3194 3196 -3195 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3197'
c Var 'aux787' direct represents '0' with '3197'
c Var 'aux787' order represents '1' with '3198'
-3197 3198 0
c Var 'aux787' direct represents '1' with '3199'
3197 -3198 3199 0
-3199 3198 0
-3199 -3197 0
c Var 'aux787' direct represents '2' with '-3198'
3197 3199 -3198 0
c Encoding variable: aux788 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux787))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3200'
c Var 'aux788' direct represents '0' with '3200'
c Var 'aux788' order represents '1' with '3201'
-3200 3201 0
c Var 'aux788' direct represents '1' with '3202'
3200 -3201 3202 0
-3202 3201 0
-3202 -3200 0
c Var 'aux788' order represents '2' with '3203'
-3201 3203 0
c Var 'aux788' direct represents '2' with '3204'
3201 -3203 3204 0
-3204 3203 0
-3204 -3201 0
c Var 'aux788' direct represents '3' with '-3203'
3200 3202 3204 -3203 0
c Encoding variable: aux789 with domain: int(0..4) (representing constraint (aux784 + aux786))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3205'
c Var 'aux789' direct represents '0' with '3205'
c Var 'aux789' order represents '1' with '3206'
-3205 3206 0
c Var 'aux789' direct represents '1' with '3207'
3205 -3206 3207 0
-3207 3206 0
-3207 -3205 0
c Var 'aux789' order represents '2' with '3208'
-3206 3208 0
c Var 'aux789' direct represents '2' with '3209'
3206 -3208 3209 0
-3209 3208 0
-3209 -3206 0
c Var 'aux789' order represents '3' with '3210'
-3208 3210 0
c Var 'aux789' direct represents '3' with '3211'
3208 -3210 3211 0
-3211 3210 0
-3211 -3208 0
c Var 'aux789' direct represents '4' with '-3210'
3205 3207 3209 3211 -3210 0
c Encoding variable: aux790 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3212'
c Var 'aux790' direct represents '0' with '3212'
c Var 'aux790' order represents '1' with '3213'
-3212 3213 0
c Var 'aux790' direct represents '1' with '3214'
3212 -3213 3214 0
-3214 3213 0
-3214 -3212 0
c Var 'aux790' direct represents '2' with '-3213'
3212 3214 -3213 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3215'
c Var 'aux791' direct represents '0' with '3215'
c Var 'aux791' order represents '1' with '3216'
-3215 3216 0
c Var 'aux791' direct represents '1' with '3217'
3215 -3216 3217 0
-3217 3216 0
-3217 -3215 0
c Var 'aux791' direct represents '2' with '-3216'
3215 3217 -3216 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3218'
c Var 'aux792' direct represents '0' with '3218'
c Var 'aux792' order represents '1' with '3219'
-3218 3219 0
c Var 'aux792' direct represents '1' with '3220'
3218 -3219 3220 0
-3220 3219 0
-3220 -3218 0
c Var 'aux792' direct represents '2' with '-3219'
3218 3220 -3219 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3221'
c Var 'aux793' direct represents '0' with '3221'
c Var 'aux793' order represents '1' with '3222'
-3221 3222 0
c Var 'aux793' direct represents '1' with '3223'
3221 -3222 3223 0
-3223 3222 0
-3223 -3221 0
c Var 'aux793' direct represents '2' with '-3222'
3221 3223 -3222 0
c Encoding variable: aux794 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux793))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3224'
c Var 'aux794' direct represents '0' with '3224'
c Var 'aux794' order represents '1' with '3225'
-3224 3225 0
c Var 'aux794' direct represents '1' with '3226'
3224 -3225 3226 0
-3226 3225 0
-3226 -3224 0
c Var 'aux794' order represents '2' with '3227'
-3225 3227 0
c Var 'aux794' direct represents '2' with '3228'
3225 -3227 3228 0
-3228 3227 0
-3228 -3225 0
c Var 'aux794' direct represents '3' with '-3227'
3224 3226 3228 -3227 0
c Encoding variable: aux795 with domain: int(0..4) (representing constraint (aux790 + aux792))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3229'
c Var 'aux795' direct represents '0' with '3229'
c Var 'aux795' order represents '1' with '3230'
-3229 3230 0
c Var 'aux795' direct represents '1' with '3231'
3229 -3230 3231 0
-3231 3230 0
-3231 -3229 0
c Var 'aux795' order represents '2' with '3232'
-3230 3232 0
c Var 'aux795' direct represents '2' with '3233'
3230 -3232 3233 0
-3233 3232 0
-3233 -3230 0
c Var 'aux795' order represents '3' with '3234'
-3232 3234 0
c Var 'aux795' direct represents '3' with '3235'
3232 -3234 3235 0
-3235 3234 0
-3235 -3232 0
c Var 'aux795' direct represents '4' with '-3234'
3229 3231 3233 3235 -3234 0
c Encoding variable: aux796 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3236'
c Var 'aux796' direct represents '0' with '3236'
c Var 'aux796' order represents '1' with '3237'
-3236 3237 0
c Var 'aux796' direct represents '1' with '3238'
3236 -3237 3238 0
-3238 3237 0
-3238 -3236 0
c Var 'aux796' direct represents '2' with '-3237'
3236 3238 -3237 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3239'
c Var 'aux797' direct represents '0' with '3239'
c Var 'aux797' order represents '1' with '3240'
-3239 3240 0
c Var 'aux797' direct represents '1' with '3241'
3239 -3240 3241 0
-3241 3240 0
-3241 -3239 0
c Var 'aux797' direct represents '2' with '-3240'
3239 3241 -3240 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3242'
c Var 'aux798' direct represents '0' with '3242'
c Var 'aux798' order represents '1' with '3243'
-3242 3243 0
c Var 'aux798' direct represents '1' with '3244'
3242 -3243 3244 0
-3244 3243 0
-3244 -3242 0
c Var 'aux798' direct represents '2' with '-3243'
3242 3244 -3243 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3245'
c Var 'aux799' direct represents '0' with '3245'
c Var 'aux799' order represents '1' with '3246'
-3245 3246 0
c Var 'aux799' direct represents '1' with '3247'
3245 -3246 3247 0
-3247 3246 0
-3247 -3245 0
c Var 'aux799' direct represents '2' with '-3246'
3245 3247 -3246 0
c Encoding variable: aux800 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux799))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3248'
c Var 'aux800' direct represents '0' with '3248'
c Var 'aux800' order represents '1' with '3249'
-3248 3249 0
c Var 'aux800' direct represents '1' with '3250'
3248 -3249 3250 0
-3250 3249 0
-3250 -3248 0
c Var 'aux800' order represents '2' with '3251'
-3249 3251 0
c Var 'aux800' direct represents '2' with '3252'
3249 -3251 3252 0
-3252 3251 0
-3252 -3249 0
c Var 'aux800' direct represents '3' with '-3251'
3248 3250 3252 -3251 0
c Encoding variable: aux801 with domain: int(0..4) (representing constraint (aux796 + aux798))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3253'
c Var 'aux801' direct represents '0' with '3253'
c Var 'aux801' order represents '1' with '3254'
-3253 3254 0
c Var 'aux801' direct represents '1' with '3255'
3253 -3254 3255 0
-3255 3254 0
-3255 -3253 0
c Var 'aux801' order represents '2' with '3256'
-3254 3256 0
c Var 'aux801' direct represents '2' with '3257'
3254 -3256 3257 0
-3257 3256 0
-3257 -3254 0
c Var 'aux801' order represents '3' with '3258'
-3256 3258 0
c Var 'aux801' direct represents '3' with '3259'
3256 -3258 3259 0
-3259 3258 0
-3259 -3256 0
c Var 'aux801' direct represents '4' with '-3258'
3253 3255 3257 3259 -3258 0
c Encoding variable: aux802 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3260'
c Var 'aux802' direct represents '0' with '3260'
c Var 'aux802' order represents '1' with '3261'
-3260 3261 0
c Var 'aux802' direct represents '1' with '3262'
3260 -3261 3262 0
-3262 3261 0
-3262 -3260 0
c Var 'aux802' direct represents '2' with '-3261'
3260 3262 -3261 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3263'
c Var 'aux803' direct represents '0' with '3263'
c Var 'aux803' order represents '1' with '3264'
-3263 3264 0
c Var 'aux803' direct represents '1' with '3265'
3263 -3264 3265 0
-3265 3264 0
-3265 -3263 0
c Var 'aux803' direct represents '2' with '-3264'
3263 3265 -3264 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3266'
c Var 'aux804' direct represents '0' with '3266'
c Var 'aux804' order represents '1' with '3267'
-3266 3267 0
c Var 'aux804' direct represents '1' with '3268'
3266 -3267 3268 0
-3268 3267 0
-3268 -3266 0
c Var 'aux804' direct represents '2' with '-3267'
3266 3268 -3267 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3269'
c Var 'aux805' direct represents '0' with '3269'
c Var 'aux805' order represents '1' with '3270'
-3269 3270 0
c Var 'aux805' direct represents '1' with '3271'
3269 -3270 3271 0
-3271 3270 0
-3271 -3269 0
c Var 'aux805' direct represents '2' with '-3270'
3269 3271 -3270 0
c Encoding variable: aux806 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux805))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3272'
c Var 'aux806' direct represents '0' with '3272'
c Var 'aux806' order represents '1' with '3273'
-3272 3273 0
c Var 'aux806' direct represents '1' with '3274'
3272 -3273 3274 0
-3274 3273 0
-3274 -3272 0
c Var 'aux806' order represents '2' with '3275'
-3273 3275 0
c Var 'aux806' direct represents '2' with '3276'
3273 -3275 3276 0
-3276 3275 0
-3276 -3273 0
c Var 'aux806' direct represents '3' with '-3275'
3272 3274 3276 -3275 0
c Encoding variable: aux807 with domain: int(0..4) (representing constraint (aux802 + aux804))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3277'
c Var 'aux807' direct represents '0' with '3277'
c Var 'aux807' order represents '1' with '3278'
-3277 3278 0
c Var 'aux807' direct represents '1' with '3279'
3277 -3278 3279 0
-3279 3278 0
-3279 -3277 0
c Var 'aux807' order represents '2' with '3280'
-3278 3280 0
c Var 'aux807' direct represents '2' with '3281'
3278 -3280 3281 0
-3281 3280 0
-3281 -3278 0
c Var 'aux807' order represents '3' with '3282'
-3280 3282 0
c Var 'aux807' direct represents '3' with '3283'
3280 -3282 3283 0
-3283 3282 0
-3283 -3280 0
c Var 'aux807' direct represents '4' with '-3282'
3277 3279 3281 3283 -3282 0
c Encoding variable: aux808 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3284'
c Var 'aux808' direct represents '0' with '3284'
c Var 'aux808' order represents '1' with '3285'
-3284 3285 0
c Var 'aux808' direct represents '1' with '3286'
3284 -3285 3286 0
-3286 3285 0
-3286 -3284 0
c Var 'aux808' direct represents '2' with '-3285'
3284 3286 -3285 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3287'
c Var 'aux809' direct represents '0' with '3287'
c Var 'aux809' order represents '1' with '3288'
-3287 3288 0
c Var 'aux809' direct represents '1' with '3289'
3287 -3288 3289 0
-3289 3288 0
-3289 -3287 0
c Var 'aux809' direct represents '2' with '-3288'
3287 3289 -3288 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3290'
c Var 'aux810' direct represents '0' with '3290'
c Var 'aux810' order represents '1' with '3291'
-3290 3291 0
c Var 'aux810' direct represents '1' with '3292'
3290 -3291 3292 0
-3292 3291 0
-3292 -3290 0
c Var 'aux810' direct represents '2' with '-3291'
3290 3292 -3291 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3293'
c Var 'aux811' direct represents '0' with '3293'
c Var 'aux811' order represents '1' with '3294'
-3293 3294 0
c Var 'aux811' direct represents '1' with '3295'
3293 -3294 3295 0
-3295 3294 0
-3295 -3293 0
c Var 'aux811' direct represents '2' with '-3294'
3293 3295 -3294 0
c Encoding variable: aux812 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux811))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3296'
c Var 'aux812' direct represents '0' with '3296'
c Var 'aux812' order represents '1' with '3297'
-3296 3297 0
c Var 'aux812' direct represents '1' with '3298'
3296 -3297 3298 0
-3298 3297 0
-3298 -3296 0
c Var 'aux812' order represents '2' with '3299'
-3297 3299 0
c Var 'aux812' direct represents '2' with '3300'
3297 -3299 3300 0
-3300 3299 0
-3300 -3297 0
c Var 'aux812' direct represents '3' with '-3299'
3296 3298 3300 -3299 0
c Encoding variable: aux813 with domain: int(0..4) (representing constraint (aux808 + aux810))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3301'
c Var 'aux813' direct represents '0' with '3301'
c Var 'aux813' order represents '1' with '3302'
-3301 3302 0
c Var 'aux813' direct represents '1' with '3303'
3301 -3302 3303 0
-3303 3302 0
-3303 -3301 0
c Var 'aux813' order represents '2' with '3304'
-3302 3304 0
c Var 'aux813' direct represents '2' with '3305'
3302 -3304 3305 0
-3305 3304 0
-3305 -3302 0
c Var 'aux813' order represents '3' with '3306'
-3304 3306 0
c Var 'aux813' direct represents '3' with '3307'
3304 -3306 3307 0
-3307 3306 0
-3307 -3304 0
c Var 'aux813' direct represents '4' with '-3306'
3301 3303 3305 3307 -3306 0
c Encoding variable: aux814 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3308'
c Var 'aux814' direct represents '0' with '3308'
c Var 'aux814' order represents '1' with '3309'
-3308 3309 0
c Var 'aux814' direct represents '1' with '3310'
3308 -3309 3310 0
-3310 3309 0
-3310 -3308 0
c Var 'aux814' direct represents '2' with '-3309'
3308 3310 -3309 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3311'
c Var 'aux815' direct represents '0' with '3311'
c Var 'aux815' order represents '1' with '3312'
-3311 3312 0
c Var 'aux815' direct represents '1' with '3313'
3311 -3312 3313 0
-3313 3312 0
-3313 -3311 0
c Var 'aux815' direct represents '2' with '-3312'
3311 3313 -3312 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3314'
c Var 'aux816' direct represents '0' with '3314'
c Var 'aux816' order represents '1' with '3315'
-3314 3315 0
c Var 'aux816' direct represents '1' with '3316'
3314 -3315 3316 0
-3316 3315 0
-3316 -3314 0
c Var 'aux816' direct represents '2' with '-3315'
3314 3316 -3315 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3317'
c Var 'aux817' direct represents '0' with '3317'
c Var 'aux817' order represents '1' with '3318'
-3317 3318 0
c Var 'aux817' direct represents '1' with '3319'
3317 -3318 3319 0
-3319 3318 0
-3319 -3317 0
c Var 'aux817' direct represents '2' with '-3318'
3317 3319 -3318 0
c Encoding variable: aux818 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux817))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3320'
c Var 'aux818' direct represents '0' with '3320'
c Var 'aux818' order represents '1' with '3321'
-3320 3321 0
c Var 'aux818' direct represents '1' with '3322'
3320 -3321 3322 0
-3322 3321 0
-3322 -3320 0
c Var 'aux818' order represents '2' with '3323'
-3321 3323 0
c Var 'aux818' direct represents '2' with '3324'
3321 -3323 3324 0
-3324 3323 0
-3324 -3321 0
c Var 'aux818' direct represents '3' with '-3323'
3320 3322 3324 -3323 0
c Encoding variable: aux819 with domain: int(0..4) (representing constraint (aux814 + aux816))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3325'
c Var 'aux819' direct represents '0' with '3325'
c Var 'aux819' order represents '1' with '3326'
-3325 3326 0
c Var 'aux819' direct represents '1' with '3327'
3325 -3326 3327 0
-3327 3326 0
-3327 -3325 0
c Var 'aux819' order represents '2' with '3328'
-3326 3328 0
c Var 'aux819' direct represents '2' with '3329'
3326 -3328 3329 0
-3329 3328 0
-3329 -3326 0
c Var 'aux819' order represents '3' with '3330'
-3328 3330 0
c Var 'aux819' direct represents '3' with '3331'
3328 -3330 3331 0
-3331 3330 0
-3331 -3328 0
c Var 'aux819' direct represents '4' with '-3330'
3325 3327 3329 3331 -3330 0
c Encoding variable: aux820 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3332'
c Var 'aux820' direct represents '0' with '3332'
c Var 'aux820' order represents '1' with '3333'
-3332 3333 0
c Var 'aux820' direct represents '1' with '3334'
3332 -3333 3334 0
-3334 3333 0
-3334 -3332 0
c Var 'aux820' direct represents '2' with '-3333'
3332 3334 -3333 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3335'
c Var 'aux821' direct represents '0' with '3335'
c Var 'aux821' order represents '1' with '3336'
-3335 3336 0
c Var 'aux821' direct represents '1' with '3337'
3335 -3336 3337 0
-3337 3336 0
-3337 -3335 0
c Var 'aux821' direct represents '2' with '-3336'
3335 3337 -3336 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3338'
c Var 'aux822' direct represents '0' with '3338'
c Var 'aux822' order represents '1' with '3339'
-3338 3339 0
c Var 'aux822' direct represents '1' with '3340'
3338 -3339 3340 0
-3340 3339 0
-3340 -3338 0
c Var 'aux822' direct represents '2' with '-3339'
3338 3340 -3339 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3341'
c Var 'aux823' direct represents '0' with '3341'
c Var 'aux823' order represents '1' with '3342'
-3341 3342 0
c Var 'aux823' direct represents '1' with '3343'
3341 -3342 3343 0
-3343 3342 0
-3343 -3341 0
c Var 'aux823' direct represents '2' with '-3342'
3341 3343 -3342 0
c Encoding variable: aux824 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux823))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3344'
c Var 'aux824' direct represents '0' with '3344'
c Var 'aux824' order represents '1' with '3345'
-3344 3345 0
c Var 'aux824' direct represents '1' with '3346'
3344 -3345 3346 0
-3346 3345 0
-3346 -3344 0
c Var 'aux824' order represents '2' with '3347'
-3345 3347 0
c Var 'aux824' direct represents '2' with '3348'
3345 -3347 3348 0
-3348 3347 0
-3348 -3345 0
c Var 'aux824' direct represents '3' with '-3347'
3344 3346 3348 -3347 0
c Encoding variable: aux825 with domain: int(0..4) (representing constraint (aux820 + aux822))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3349'
c Var 'aux825' direct represents '0' with '3349'
c Var 'aux825' order represents '1' with '3350'
-3349 3350 0
c Var 'aux825' direct represents '1' with '3351'
3349 -3350 3351 0
-3351 3350 0
-3351 -3349 0
c Var 'aux825' order represents '2' with '3352'
-3350 3352 0
c Var 'aux825' direct represents '2' with '3353'
3350 -3352 3353 0
-3353 3352 0
-3353 -3350 0
c Var 'aux825' order represents '3' with '3354'
-3352 3354 0
c Var 'aux825' direct represents '3' with '3355'
3352 -3354 3355 0
-3355 3354 0
-3355 -3352 0
c Var 'aux825' direct represents '4' with '-3354'
3349 3351 3353 3355 -3354 0
c Encoding variable: aux826 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3356'
c Var 'aux826' direct represents '0' with '3356'
c Var 'aux826' order represents '1' with '3357'
-3356 3357 0
c Var 'aux826' direct represents '1' with '3358'
3356 -3357 3358 0
-3358 3357 0
-3358 -3356 0
c Var 'aux826' direct represents '2' with '-3357'
3356 3358 -3357 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3359'
c Var 'aux827' direct represents '0' with '3359'
c Var 'aux827' order represents '1' with '3360'
-3359 3360 0
c Var 'aux827' direct represents '1' with '3361'
3359 -3360 3361 0
-3361 3360 0
-3361 -3359 0
c Var 'aux827' direct represents '2' with '-3360'
3359 3361 -3360 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3362'
c Var 'aux828' direct represents '0' with '3362'
c Var 'aux828' order represents '1' with '3363'
-3362 3363 0
c Var 'aux828' direct represents '1' with '3364'
3362 -3363 3364 0
-3364 3363 0
-3364 -3362 0
c Var 'aux828' direct represents '2' with '-3363'
3362 3364 -3363 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3365'
c Var 'aux829' direct represents '0' with '3365'
c Var 'aux829' order represents '1' with '3366'
-3365 3366 0
c Var 'aux829' direct represents '1' with '3367'
3365 -3366 3367 0
-3367 3366 0
-3367 -3365 0
c Var 'aux829' direct represents '2' with '-3366'
3365 3367 -3366 0
c Encoding variable: aux830 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux829))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3368'
c Var 'aux830' direct represents '0' with '3368'
c Var 'aux830' order represents '1' with '3369'
-3368 3369 0
c Var 'aux830' direct represents '1' with '3370'
3368 -3369 3370 0
-3370 3369 0
-3370 -3368 0
c Var 'aux830' order represents '2' with '3371'
-3369 3371 0
c Var 'aux830' direct represents '2' with '3372'
3369 -3371 3372 0
-3372 3371 0
-3372 -3369 0
c Var 'aux830' direct represents '3' with '-3371'
3368 3370 3372 -3371 0
c Encoding variable: aux831 with domain: int(0..4) (representing constraint (aux826 + aux828))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3373'
c Var 'aux831' direct represents '0' with '3373'
c Var 'aux831' order represents '1' with '3374'
-3373 3374 0
c Var 'aux831' direct represents '1' with '3375'
3373 -3374 3375 0
-3375 3374 0
-3375 -3373 0
c Var 'aux831' order represents '2' with '3376'
-3374 3376 0
c Var 'aux831' direct represents '2' with '3377'
3374 -3376 3377 0
-3377 3376 0
-3377 -3374 0
c Var 'aux831' order represents '3' with '3378'
-3376 3378 0
c Var 'aux831' direct represents '3' with '3379'
3376 -3378 3379 0
-3379 3378 0
-3379 -3376 0
c Var 'aux831' direct represents '4' with '-3378'
3373 3375 3377 3379 -3378 0
c Encoding variable: aux832 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3380'
c Var 'aux832' direct represents '0' with '3380'
c Var 'aux832' order represents '1' with '3381'
-3380 3381 0
c Var 'aux832' direct represents '1' with '3382'
3380 -3381 3382 0
-3382 3381 0
-3382 -3380 0
c Var 'aux832' direct represents '2' with '-3381'
3380 3382 -3381 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3383'
c Var 'aux833' direct represents '0' with '3383'
c Var 'aux833' order represents '1' with '3384'
-3383 3384 0
c Var 'aux833' direct represents '1' with '3385'
3383 -3384 3385 0
-3385 3384 0
-3385 -3383 0
c Var 'aux833' direct represents '2' with '-3384'
3383 3385 -3384 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3386'
c Var 'aux834' direct represents '0' with '3386'
c Var 'aux834' order represents '1' with '3387'
-3386 3387 0
c Var 'aux834' direct represents '1' with '3388'
3386 -3387 3388 0
-3388 3387 0
-3388 -3386 0
c Var 'aux834' direct represents '2' with '-3387'
3386 3388 -3387 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3389'
c Var 'aux835' direct represents '0' with '3389'
c Var 'aux835' order represents '1' with '3390'
-3389 3390 0
c Var 'aux835' direct represents '1' with '3391'
3389 -3390 3391 0
-3391 3390 0
-3391 -3389 0
c Var 'aux835' direct represents '2' with '-3390'
3389 3391 -3390 0
c Encoding variable: aux836 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux835))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3392'
c Var 'aux836' direct represents '0' with '3392'
c Var 'aux836' order represents '1' with '3393'
-3392 3393 0
c Var 'aux836' direct represents '1' with '3394'
3392 -3393 3394 0
-3394 3393 0
-3394 -3392 0
c Var 'aux836' order represents '2' with '3395'
-3393 3395 0
c Var 'aux836' direct represents '2' with '3396'
3393 -3395 3396 0
-3396 3395 0
-3396 -3393 0
c Var 'aux836' direct represents '3' with '-3395'
3392 3394 3396 -3395 0
c Encoding variable: aux837 with domain: int(0..4) (representing constraint (aux832 + aux834))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3397'
c Var 'aux837' direct represents '0' with '3397'
c Var 'aux837' order represents '1' with '3398'
-3397 3398 0
c Var 'aux837' direct represents '1' with '3399'
3397 -3398 3399 0
-3399 3398 0
-3399 -3397 0
c Var 'aux837' order represents '2' with '3400'
-3398 3400 0
c Var 'aux837' direct represents '2' with '3401'
3398 -3400 3401 0
-3401 3400 0
-3401 -3398 0
c Var 'aux837' order represents '3' with '3402'
-3400 3402 0
c Var 'aux837' direct represents '3' with '3403'
3400 -3402 3403 0
-3403 3402 0
-3403 -3400 0
c Var 'aux837' direct represents '4' with '-3402'
3397 3399 3401 3403 -3402 0
c Encoding variable: aux838 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3404'
c Var 'aux838' direct represents '0' with '3404'
c Var 'aux838' order represents '1' with '3405'
-3404 3405 0
c Var 'aux838' direct represents '1' with '3406'
3404 -3405 3406 0
-3406 3405 0
-3406 -3404 0
c Var 'aux838' direct represents '2' with '-3405'
3404 3406 -3405 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3407'
c Var 'aux839' direct represents '0' with '3407'
c Var 'aux839' order represents '1' with '3408'
-3407 3408 0
c Var 'aux839' direct represents '1' with '3409'
3407 -3408 3409 0
-3409 3408 0
-3409 -3407 0
c Var 'aux839' direct represents '2' with '-3408'
3407 3409 -3408 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3410'
c Var 'aux840' direct represents '0' with '3410'
c Var 'aux840' order represents '1' with '3411'
-3410 3411 0
c Var 'aux840' direct represents '1' with '3412'
3410 -3411 3412 0
-3412 3411 0
-3412 -3410 0
c Var 'aux840' direct represents '2' with '-3411'
3410 3412 -3411 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3413'
c Var 'aux841' direct represents '0' with '3413'
c Var 'aux841' order represents '1' with '3414'
-3413 3414 0
c Var 'aux841' direct represents '1' with '3415'
3413 -3414 3415 0
-3415 3414 0
-3415 -3413 0
c Var 'aux841' direct represents '2' with '-3414'
3413 3415 -3414 0
c Encoding variable: aux842 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux841))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3416'
c Var 'aux842' direct represents '0' with '3416'
c Var 'aux842' order represents '1' with '3417'
-3416 3417 0
c Var 'aux842' direct represents '1' with '3418'
3416 -3417 3418 0
-3418 3417 0
-3418 -3416 0
c Var 'aux842' order represents '2' with '3419'
-3417 3419 0
c Var 'aux842' direct represents '2' with '3420'
3417 -3419 3420 0
-3420 3419 0
-3420 -3417 0
c Var 'aux842' direct represents '3' with '-3419'
3416 3418 3420 -3419 0
c Encoding variable: aux843 with domain: int(0..4) (representing constraint (aux838 + aux840))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3421'
c Var 'aux843' direct represents '0' with '3421'
c Var 'aux843' order represents '1' with '3422'
-3421 3422 0
c Var 'aux843' direct represents '1' with '3423'
3421 -3422 3423 0
-3423 3422 0
-3423 -3421 0
c Var 'aux843' order represents '2' with '3424'
-3422 3424 0
c Var 'aux843' direct represents '2' with '3425'
3422 -3424 3425 0
-3425 3424 0
-3425 -3422 0
c Var 'aux843' order represents '3' with '3426'
-3424 3426 0
c Var 'aux843' direct represents '3' with '3427'
3424 -3426 3427 0
-3427 3426 0
-3427 -3424 0
c Var 'aux843' direct represents '4' with '-3426'
3421 3423 3425 3427 -3426 0
c Encoding variable: aux844 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3428'
c Var 'aux844' direct represents '0' with '3428'
c Var 'aux844' order represents '1' with '3429'
-3428 3429 0
c Var 'aux844' direct represents '1' with '3430'
3428 -3429 3430 0
-3430 3429 0
-3430 -3428 0
c Var 'aux844' direct represents '2' with '-3429'
3428 3430 -3429 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3431'
c Var 'aux845' direct represents '0' with '3431'
c Var 'aux845' order represents '1' with '3432'
-3431 3432 0
c Var 'aux845' direct represents '1' with '3433'
3431 -3432 3433 0
-3433 3432 0
-3433 -3431 0
c Var 'aux845' direct represents '2' with '-3432'
3431 3433 -3432 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3434'
c Var 'aux846' direct represents '0' with '3434'
c Var 'aux846' order represents '1' with '3435'
-3434 3435 0
c Var 'aux846' direct represents '1' with '3436'
3434 -3435 3436 0
-3436 3435 0
-3436 -3434 0
c Var 'aux846' direct represents '2' with '-3435'
3434 3436 -3435 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3437'
c Var 'aux847' direct represents '0' with '3437'
c Var 'aux847' order represents '1' with '3438'
-3437 3438 0
c Var 'aux847' direct represents '1' with '3439'
3437 -3438 3439 0
-3439 3438 0
-3439 -3437 0
c Var 'aux847' direct represents '2' with '-3438'
3437 3439 -3438 0
c Encoding variable: aux848 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux847))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3440'
c Var 'aux848' direct represents '0' with '3440'
c Var 'aux848' order represents '1' with '3441'
-3440 3441 0
c Var 'aux848' direct represents '1' with '3442'
3440 -3441 3442 0
-3442 3441 0
-3442 -3440 0
c Var 'aux848' order represents '2' with '3443'
-3441 3443 0
c Var 'aux848' direct represents '2' with '3444'
3441 -3443 3444 0
-3444 3443 0
-3444 -3441 0
c Var 'aux848' direct represents '3' with '-3443'
3440 3442 3444 -3443 0
c Encoding variable: aux849 with domain: int(0..4) (representing constraint (aux844 + aux846))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3445'
c Var 'aux849' direct represents '0' with '3445'
c Var 'aux849' order represents '1' with '3446'
-3445 3446 0
c Var 'aux849' direct represents '1' with '3447'
3445 -3446 3447 0
-3447 3446 0
-3447 -3445 0
c Var 'aux849' order represents '2' with '3448'
-3446 3448 0
c Var 'aux849' direct represents '2' with '3449'
3446 -3448 3449 0
-3449 3448 0
-3449 -3446 0
c Var 'aux849' order represents '3' with '3450'
-3448 3450 0
c Var 'aux849' direct represents '3' with '3451'
3448 -3450 3451 0
-3451 3450 0
-3451 -3448 0
c Var 'aux849' direct represents '4' with '-3450'
3445 3447 3449 3451 -3450 0
c Encoding variable: aux850 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3452'
c Var 'aux850' direct represents '0' with '3452'
c Var 'aux850' order represents '1' with '3453'
-3452 3453 0
c Var 'aux850' direct represents '1' with '3454'
3452 -3453 3454 0
-3454 3453 0
-3454 -3452 0
c Var 'aux850' direct represents '2' with '-3453'
3452 3454 -3453 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3455'
c Var 'aux851' direct represents '0' with '3455'
c Var 'aux851' order represents '1' with '3456'
-3455 3456 0
c Var 'aux851' direct represents '1' with '3457'
3455 -3456 3457 0
-3457 3456 0
-3457 -3455 0
c Var 'aux851' direct represents '2' with '-3456'
3455 3457 -3456 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3458'
c Var 'aux852' direct represents '0' with '3458'
c Var 'aux852' order represents '1' with '3459'
-3458 3459 0
c Var 'aux852' direct represents '1' with '3460'
3458 -3459 3460 0
-3460 3459 0
-3460 -3458 0
c Var 'aux852' direct represents '2' with '-3459'
3458 3460 -3459 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3461'
c Var 'aux853' direct represents '0' with '3461'
c Var 'aux853' order represents '1' with '3462'
-3461 3462 0
c Var 'aux853' direct represents '1' with '3463'
3461 -3462 3463 0
-3463 3462 0
-3463 -3461 0
c Var 'aux853' direct represents '2' with '-3462'
3461 3463 -3462 0
c Encoding variable: aux854 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux853))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3464'
c Var 'aux854' direct represents '0' with '3464'
c Var 'aux854' order represents '1' with '3465'
-3464 3465 0
c Var 'aux854' direct represents '1' with '3466'
3464 -3465 3466 0
-3466 3465 0
-3466 -3464 0
c Var 'aux854' order represents '2' with '3467'
-3465 3467 0
c Var 'aux854' direct represents '2' with '3468'
3465 -3467 3468 0
-3468 3467 0
-3468 -3465 0
c Var 'aux854' direct represents '3' with '-3467'
3464 3466 3468 -3467 0
c Encoding variable: aux855 with domain: int(0..4) (representing constraint (aux850 + aux852))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3469'
c Var 'aux855' direct represents '0' with '3469'
c Var 'aux855' order represents '1' with '3470'
-3469 3470 0
c Var 'aux855' direct represents '1' with '3471'
3469 -3470 3471 0
-3471 3470 0
-3471 -3469 0
c Var 'aux855' order represents '2' with '3472'
-3470 3472 0
c Var 'aux855' direct represents '2' with '3473'
3470 -3472 3473 0
-3473 3472 0
-3473 -3470 0
c Var 'aux855' order represents '3' with '3474'
-3472 3474 0
c Var 'aux855' direct represents '3' with '3475'
3472 -3474 3475 0
-3475 3474 0
-3475 -3472 0
c Var 'aux855' direct represents '4' with '-3474'
3469 3471 3473 3475 -3474 0
c Encoding variable: aux856 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3476'
c Var 'aux856' direct represents '0' with '3476'
c Var 'aux856' order represents '1' with '3477'
-3476 3477 0
c Var 'aux856' direct represents '1' with '3478'
3476 -3477 3478 0
-3478 3477 0
-3478 -3476 0
c Var 'aux856' direct represents '2' with '-3477'
3476 3478 -3477 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3479'
c Var 'aux857' direct represents '0' with '3479'
c Var 'aux857' order represents '1' with '3480'
-3479 3480 0
c Var 'aux857' direct represents '1' with '3481'
3479 -3480 3481 0
-3481 3480 0
-3481 -3479 0
c Var 'aux857' direct represents '2' with '-3480'
3479 3481 -3480 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3482'
c Var 'aux858' direct represents '0' with '3482'
c Var 'aux858' order represents '1' with '3483'
-3482 3483 0
c Var 'aux858' direct represents '1' with '3484'
3482 -3483 3484 0
-3484 3483 0
-3484 -3482 0
c Var 'aux858' direct represents '2' with '-3483'
3482 3484 -3483 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3485'
c Var 'aux859' direct represents '0' with '3485'
c Var 'aux859' order represents '1' with '3486'
-3485 3486 0
c Var 'aux859' direct represents '1' with '3487'
3485 -3486 3487 0
-3487 3486 0
-3487 -3485 0
c Var 'aux859' direct represents '2' with '-3486'
3485 3487 -3486 0
c Encoding variable: aux860 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux859))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3488'
c Var 'aux860' direct represents '0' with '3488'
c Var 'aux860' order represents '1' with '3489'
-3488 3489 0
c Var 'aux860' direct represents '1' with '3490'
3488 -3489 3490 0
-3490 3489 0
-3490 -3488 0
c Var 'aux860' order represents '2' with '3491'
-3489 3491 0
c Var 'aux860' direct represents '2' with '3492'
3489 -3491 3492 0
-3492 3491 0
-3492 -3489 0
c Var 'aux860' direct represents '3' with '-3491'
3488 3490 3492 -3491 0
c Encoding variable: aux861 with domain: int(0..4) (representing constraint (aux856 + aux858))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3493'
c Var 'aux861' direct represents '0' with '3493'
c Var 'aux861' order represents '1' with '3494'
-3493 3494 0
c Var 'aux861' direct represents '1' with '3495'
3493 -3494 3495 0
-3495 3494 0
-3495 -3493 0
c Var 'aux861' order represents '2' with '3496'
-3494 3496 0
c Var 'aux861' direct represents '2' with '3497'
3494 -3496 3497 0
-3497 3496 0
-3497 -3494 0
c Var 'aux861' order represents '3' with '3498'
-3496 3498 0
c Var 'aux861' direct represents '3' with '3499'
3496 -3498 3499 0
-3499 3498 0
-3499 -3496 0
c Var 'aux861' direct represents '4' with '-3498'
3493 3495 3497 3499 -3498 0
c Encoding variable: aux862 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3500'
c Var 'aux862' direct represents '0' with '3500'
c Var 'aux862' order represents '1' with '3501'
-3500 3501 0
c Var 'aux862' direct represents '1' with '3502'
3500 -3501 3502 0
-3502 3501 0
-3502 -3500 0
c Var 'aux862' direct represents '2' with '-3501'
3500 3502 -3501 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3503'
c Var 'aux863' direct represents '0' with '3503'
c Var 'aux863' order represents '1' with '3504'
-3503 3504 0
c Var 'aux863' direct represents '1' with '3505'
3503 -3504 3505 0
-3505 3504 0
-3505 -3503 0
c Var 'aux863' direct represents '2' with '-3504'
3503 3505 -3504 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3506'
c Var 'aux864' direct represents '0' with '3506'
c Var 'aux864' order represents '1' with '3507'
-3506 3507 0
c Var 'aux864' direct represents '1' with '3508'
3506 -3507 3508 0
-3508 3507 0
-3508 -3506 0
c Var 'aux864' direct represents '2' with '-3507'
3506 3508 -3507 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3509'
c Var 'aux865' direct represents '0' with '3509'
c Var 'aux865' order represents '1' with '3510'
-3509 3510 0
c Var 'aux865' direct represents '1' with '3511'
3509 -3510 3511 0
-3511 3510 0
-3511 -3509 0
c Var 'aux865' direct represents '2' with '-3510'
3509 3511 -3510 0
c Encoding variable: aux866 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux865))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3512'
c Var 'aux866' direct represents '0' with '3512'
c Var 'aux866' order represents '1' with '3513'
-3512 3513 0
c Var 'aux866' direct represents '1' with '3514'
3512 -3513 3514 0
-3514 3513 0
-3514 -3512 0
c Var 'aux866' order represents '2' with '3515'
-3513 3515 0
c Var 'aux866' direct represents '2' with '3516'
3513 -3515 3516 0
-3516 3515 0
-3516 -3513 0
c Var 'aux866' direct represents '3' with '-3515'
3512 3514 3516 -3515 0
c Encoding variable: aux867 with domain: int(0..4) (representing constraint (aux862 + aux864))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3517'
c Var 'aux867' direct represents '0' with '3517'
c Var 'aux867' order represents '1' with '3518'
-3517 3518 0
c Var 'aux867' direct represents '1' with '3519'
3517 -3518 3519 0
-3519 3518 0
-3519 -3517 0
c Var 'aux867' order represents '2' with '3520'
-3518 3520 0
c Var 'aux867' direct represents '2' with '3521'
3518 -3520 3521 0
-3521 3520 0
-3521 -3518 0
c Var 'aux867' order represents '3' with '3522'
-3520 3522 0
c Var 'aux867' direct represents '3' with '3523'
3520 -3522 3523 0
-3523 3522 0
-3523 -3520 0
c Var 'aux867' direct represents '4' with '-3522'
3517 3519 3521 3523 -3522 0
c Encoding variable: aux868 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3524'
c Var 'aux868' direct represents '0' with '3524'
c Var 'aux868' order represents '1' with '3525'
-3524 3525 0
c Var 'aux868' direct represents '1' with '3526'
3524 -3525 3526 0
-3526 3525 0
-3526 -3524 0
c Var 'aux868' direct represents '2' with '-3525'
3524 3526 -3525 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3527'
c Var 'aux869' direct represents '0' with '3527'
c Var 'aux869' order represents '1' with '3528'
-3527 3528 0
c Var 'aux869' direct represents '1' with '3529'
3527 -3528 3529 0
-3529 3528 0
-3529 -3527 0
c Var 'aux869' direct represents '2' with '-3528'
3527 3529 -3528 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3530'
c Var 'aux870' direct represents '0' with '3530'
c Var 'aux870' order represents '1' with '3531'
-3530 3531 0
c Var 'aux870' direct represents '1' with '3532'
3530 -3531 3532 0
-3532 3531 0
-3532 -3530 0
c Var 'aux870' direct represents '2' with '-3531'
3530 3532 -3531 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3533'
c Var 'aux871' direct represents '0' with '3533'
c Var 'aux871' order represents '1' with '3534'
-3533 3534 0
c Var 'aux871' direct represents '1' with '3535'
3533 -3534 3535 0
-3535 3534 0
-3535 -3533 0
c Var 'aux871' direct represents '2' with '-3534'
3533 3535 -3534 0
c Encoding variable: aux872 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux871))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3536'
c Var 'aux872' direct represents '0' with '3536'
c Var 'aux872' order represents '1' with '3537'
-3536 3537 0
c Var 'aux872' direct represents '1' with '3538'
3536 -3537 3538 0
-3538 3537 0
-3538 -3536 0
c Var 'aux872' order represents '2' with '3539'
-3537 3539 0
c Var 'aux872' direct represents '2' with '3540'
3537 -3539 3540 0
-3540 3539 0
-3540 -3537 0
c Var 'aux872' direct represents '3' with '-3539'
3536 3538 3540 -3539 0
c Encoding variable: aux873 with domain: int(0..4) (representing constraint (aux868 + aux870))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3541'
c Var 'aux873' direct represents '0' with '3541'
c Var 'aux873' order represents '1' with '3542'
-3541 3542 0
c Var 'aux873' direct represents '1' with '3543'
3541 -3542 3543 0
-3543 3542 0
-3543 -3541 0
c Var 'aux873' order represents '2' with '3544'
-3542 3544 0
c Var 'aux873' direct represents '2' with '3545'
3542 -3544 3545 0
-3545 3544 0
-3545 -3542 0
c Var 'aux873' order represents '3' with '3546'
-3544 3546 0
c Var 'aux873' direct represents '3' with '3547'
3544 -3546 3547 0
-3547 3546 0
-3547 -3544 0
c Var 'aux873' direct represents '4' with '-3546'
3541 3543 3545 3547 -3546 0
c Encoding variable: aux874 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3548'
c Var 'aux874' direct represents '0' with '3548'
c Var 'aux874' order represents '1' with '3549'
-3548 3549 0
c Var 'aux874' direct represents '1' with '3550'
3548 -3549 3550 0
-3550 3549 0
-3550 -3548 0
c Var 'aux874' direct represents '2' with '-3549'
3548 3550 -3549 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3551'
c Var 'aux875' direct represents '0' with '3551'
c Var 'aux875' order represents '1' with '3552'
-3551 3552 0
c Var 'aux875' direct represents '1' with '3553'
3551 -3552 3553 0
-3553 3552 0
-3553 -3551 0
c Var 'aux875' direct represents '2' with '-3552'
3551 3553 -3552 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3554'
c Var 'aux876' direct represents '0' with '3554'
c Var 'aux876' order represents '1' with '3555'
-3554 3555 0
c Var 'aux876' direct represents '1' with '3556'
3554 -3555 3556 0
-3556 3555 0
-3556 -3554 0
c Var 'aux876' direct represents '2' with '-3555'
3554 3556 -3555 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3557'
c Var 'aux877' direct represents '0' with '3557'
c Var 'aux877' order represents '1' with '3558'
-3557 3558 0
c Var 'aux877' direct represents '1' with '3559'
3557 -3558 3559 0
-3559 3558 0
-3559 -3557 0
c Var 'aux877' direct represents '2' with '-3558'
3557 3559 -3558 0
c Encoding variable: aux878 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux877))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3560'
c Var 'aux878' direct represents '0' with '3560'
c Var 'aux878' order represents '1' with '3561'
-3560 3561 0
c Var 'aux878' direct represents '1' with '3562'
3560 -3561 3562 0
-3562 3561 0
-3562 -3560 0
c Var 'aux878' order represents '2' with '3563'
-3561 3563 0
c Var 'aux878' direct represents '2' with '3564'
3561 -3563 3564 0
-3564 3563 0
-3564 -3561 0
c Var 'aux878' direct represents '3' with '-3563'
3560 3562 3564 -3563 0
c Encoding variable: aux879 with domain: int(0..4) (representing constraint (aux874 + aux876))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3565'
c Var 'aux879' direct represents '0' with '3565'
c Var 'aux879' order represents '1' with '3566'
-3565 3566 0
c Var 'aux879' direct represents '1' with '3567'
3565 -3566 3567 0
-3567 3566 0
-3567 -3565 0
c Var 'aux879' order represents '2' with '3568'
-3566 3568 0
c Var 'aux879' direct represents '2' with '3569'
3566 -3568 3569 0
-3569 3568 0
-3569 -3566 0
c Var 'aux879' order represents '3' with '3570'
-3568 3570 0
c Var 'aux879' direct represents '3' with '3571'
3568 -3570 3571 0
-3571 3570 0
-3571 -3568 0
c Var 'aux879' direct represents '4' with '-3570'
3565 3567 3569 3571 -3570 0
c Encoding variable: aux880 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3572'
c Var 'aux880' direct represents '0' with '3572'
c Var 'aux880' order represents '1' with '3573'
-3572 3573 0
c Var 'aux880' direct represents '1' with '3574'
3572 -3573 3574 0
-3574 3573 0
-3574 -3572 0
c Var 'aux880' direct represents '2' with '-3573'
3572 3574 -3573 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3575'
c Var 'aux881' direct represents '0' with '3575'
c Var 'aux881' order represents '1' with '3576'
-3575 3576 0
c Var 'aux881' direct represents '1' with '3577'
3575 -3576 3577 0
-3577 3576 0
-3577 -3575 0
c Var 'aux881' direct represents '2' with '-3576'
3575 3577 -3576 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3578'
c Var 'aux882' direct represents '0' with '3578'
c Var 'aux882' order represents '1' with '3579'
-3578 3579 0
c Var 'aux882' direct represents '1' with '3580'
3578 -3579 3580 0
-3580 3579 0
-3580 -3578 0
c Var 'aux882' direct represents '2' with '-3579'
3578 3580 -3579 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3581'
c Var 'aux883' direct represents '0' with '3581'
c Var 'aux883' order represents '1' with '3582'
-3581 3582 0
c Var 'aux883' direct represents '1' with '3583'
3581 -3582 3583 0
-3583 3582 0
-3583 -3581 0
c Var 'aux883' direct represents '2' with '-3582'
3581 3583 -3582 0
c Encoding variable: aux884 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux883))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3584'
c Var 'aux884' direct represents '0' with '3584'
c Var 'aux884' order represents '1' with '3585'
-3584 3585 0
c Var 'aux884' direct represents '1' with '3586'
3584 -3585 3586 0
-3586 3585 0
-3586 -3584 0
c Var 'aux884' order represents '2' with '3587'
-3585 3587 0
c Var 'aux884' direct represents '2' with '3588'
3585 -3587 3588 0
-3588 3587 0
-3588 -3585 0
c Var 'aux884' direct represents '3' with '-3587'
3584 3586 3588 -3587 0
c Encoding variable: aux885 with domain: int(0..4) (representing constraint (aux880 + aux882))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3589'
c Var 'aux885' direct represents '0' with '3589'
c Var 'aux885' order represents '1' with '3590'
-3589 3590 0
c Var 'aux885' direct represents '1' with '3591'
3589 -3590 3591 0
-3591 3590 0
-3591 -3589 0
c Var 'aux885' order represents '2' with '3592'
-3590 3592 0
c Var 'aux885' direct represents '2' with '3593'
3590 -3592 3593 0
-3593 3592 0
-3593 -3590 0
c Var 'aux885' order represents '3' with '3594'
-3592 3594 0
c Var 'aux885' direct represents '3' with '3595'
3592 -3594 3595 0
-3595 3594 0
-3595 -3592 0
c Var 'aux885' direct represents '4' with '-3594'
3589 3591 3593 3595 -3594 0
c Encoding variable: aux886 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3596'
c Var 'aux886' direct represents '0' with '3596'
c Var 'aux886' order represents '1' with '3597'
-3596 3597 0
c Var 'aux886' direct represents '1' with '3598'
3596 -3597 3598 0
-3598 3597 0
-3598 -3596 0
c Var 'aux886' direct represents '2' with '-3597'
3596 3598 -3597 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3599'
c Var 'aux887' direct represents '0' with '3599'
c Var 'aux887' order represents '1' with '3600'
-3599 3600 0
c Var 'aux887' direct represents '1' with '3601'
3599 -3600 3601 0
-3601 3600 0
-3601 -3599 0
c Var 'aux887' direct represents '2' with '-3600'
3599 3601 -3600 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3602'
c Var 'aux888' direct represents '0' with '3602'
c Var 'aux888' order represents '1' with '3603'
-3602 3603 0
c Var 'aux888' direct represents '1' with '3604'
3602 -3603 3604 0
-3604 3603 0
-3604 -3602 0
c Var 'aux888' direct represents '2' with '-3603'
3602 3604 -3603 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3605'
c Var 'aux889' direct represents '0' with '3605'
c Var 'aux889' order represents '1' with '3606'
-3605 3606 0
c Var 'aux889' direct represents '1' with '3607'
3605 -3606 3607 0
-3607 3606 0
-3607 -3605 0
c Var 'aux889' direct represents '2' with '-3606'
3605 3607 -3606 0
c Encoding variable: aux890 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux889))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3608'
c Var 'aux890' direct represents '0' with '3608'
c Var 'aux890' order represents '1' with '3609'
-3608 3609 0
c Var 'aux890' direct represents '1' with '3610'
3608 -3609 3610 0
-3610 3609 0
-3610 -3608 0
c Var 'aux890' order represents '2' with '3611'
-3609 3611 0
c Var 'aux890' direct represents '2' with '3612'
3609 -3611 3612 0
-3612 3611 0
-3612 -3609 0
c Var 'aux890' direct represents '3' with '-3611'
3608 3610 3612 -3611 0
c Encoding variable: aux891 with domain: int(0..4) (representing constraint (aux886 + aux888))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3613'
c Var 'aux891' direct represents '0' with '3613'
c Var 'aux891' order represents '1' with '3614'
-3613 3614 0
c Var 'aux891' direct represents '1' with '3615'
3613 -3614 3615 0
-3615 3614 0
-3615 -3613 0
c Var 'aux891' order represents '2' with '3616'
-3614 3616 0
c Var 'aux891' direct represents '2' with '3617'
3614 -3616 3617 0
-3617 3616 0
-3617 -3614 0
c Var 'aux891' order represents '3' with '3618'
-3616 3618 0
c Var 'aux891' direct represents '3' with '3619'
3616 -3618 3619 0
-3619 3618 0
-3619 -3616 0
c Var 'aux891' direct represents '4' with '-3618'
3613 3615 3617 3619 -3618 0
c Encoding variable: aux892 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3620'
c Var 'aux892' direct represents '0' with '3620'
c Var 'aux892' order represents '1' with '3621'
-3620 3621 0
c Var 'aux892' direct represents '1' with '3622'
3620 -3621 3622 0
-3622 3621 0
-3622 -3620 0
c Var 'aux892' direct represents '2' with '-3621'
3620 3622 -3621 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3623'
c Var 'aux893' direct represents '0' with '3623'
c Var 'aux893' order represents '1' with '3624'
-3623 3624 0
c Var 'aux893' direct represents '1' with '3625'
3623 -3624 3625 0
-3625 3624 0
-3625 -3623 0
c Var 'aux893' direct represents '2' with '-3624'
3623 3625 -3624 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3626'
c Var 'aux894' direct represents '0' with '3626'
c Var 'aux894' order represents '1' with '3627'
-3626 3627 0
c Var 'aux894' direct represents '1' with '3628'
3626 -3627 3628 0
-3628 3627 0
-3628 -3626 0
c Var 'aux894' direct represents '2' with '-3627'
3626 3628 -3627 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3629'
c Var 'aux895' direct represents '0' with '3629'
c Var 'aux895' order represents '1' with '3630'
-3629 3630 0
c Var 'aux895' direct represents '1' with '3631'
3629 -3630 3631 0
-3631 3630 0
-3631 -3629 0
c Var 'aux895' direct represents '2' with '-3630'
3629 3631 -3630 0
c Encoding variable: aux896 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux895))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3632'
c Var 'aux896' direct represents '0' with '3632'
c Var 'aux896' order represents '1' with '3633'
-3632 3633 0
c Var 'aux896' direct represents '1' with '3634'
3632 -3633 3634 0
-3634 3633 0
-3634 -3632 0
c Var 'aux896' order represents '2' with '3635'
-3633 3635 0
c Var 'aux896' direct represents '2' with '3636'
3633 -3635 3636 0
-3636 3635 0
-3636 -3633 0
c Var 'aux896' direct represents '3' with '-3635'
3632 3634 3636 -3635 0
c Encoding variable: aux897 with domain: int(0..4) (representing constraint (aux892 + aux894))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3637'
c Var 'aux897' direct represents '0' with '3637'
c Var 'aux897' order represents '1' with '3638'
-3637 3638 0
c Var 'aux897' direct represents '1' with '3639'
3637 -3638 3639 0
-3639 3638 0
-3639 -3637 0
c Var 'aux897' order represents '2' with '3640'
-3638 3640 0
c Var 'aux897' direct represents '2' with '3641'
3638 -3640 3641 0
-3641 3640 0
-3641 -3638 0
c Var 'aux897' order represents '3' with '3642'
-3640 3642 0
c Var 'aux897' direct represents '3' with '3643'
3640 -3642 3643 0
-3643 3642 0
-3643 -3640 0
c Var 'aux897' direct represents '4' with '-3642'
3637 3639 3641 3643 -3642 0
c Encoding variable: aux898 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3644'
c Var 'aux898' direct represents '0' with '3644'
c Var 'aux898' order represents '1' with '3645'
-3644 3645 0
c Var 'aux898' direct represents '1' with '3646'
3644 -3645 3646 0
-3646 3645 0
-3646 -3644 0
c Var 'aux898' direct represents '2' with '-3645'
3644 3646 -3645 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3647'
c Var 'aux899' direct represents '0' with '3647'
c Var 'aux899' order represents '1' with '3648'
-3647 3648 0
c Var 'aux899' direct represents '1' with '3649'
3647 -3648 3649 0
-3649 3648 0
-3649 -3647 0
c Var 'aux899' direct represents '2' with '-3648'
3647 3649 -3648 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3650'
c Var 'aux900' direct represents '0' with '3650'
c Var 'aux900' order represents '1' with '3651'
-3650 3651 0
c Var 'aux900' direct represents '1' with '3652'
3650 -3651 3652 0
-3652 3651 0
-3652 -3650 0
c Var 'aux900' direct represents '2' with '-3651'
3650 3652 -3651 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3653'
c Var 'aux901' direct represents '0' with '3653'
c Var 'aux901' order represents '1' with '3654'
-3653 3654 0
c Var 'aux901' direct represents '1' with '3655'
3653 -3654 3655 0
-3655 3654 0
-3655 -3653 0
c Var 'aux901' direct represents '2' with '-3654'
3653 3655 -3654 0
c Encoding variable: aux902 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux901))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3656'
c Var 'aux902' direct represents '0' with '3656'
c Var 'aux902' order represents '1' with '3657'
-3656 3657 0
c Var 'aux902' direct represents '1' with '3658'
3656 -3657 3658 0
-3658 3657 0
-3658 -3656 0
c Var 'aux902' order represents '2' with '3659'
-3657 3659 0
c Var 'aux902' direct represents '2' with '3660'
3657 -3659 3660 0
-3660 3659 0
-3660 -3657 0
c Var 'aux902' direct represents '3' with '-3659'
3656 3658 3660 -3659 0
c Encoding variable: aux903 with domain: int(0..4) (representing constraint (aux898 + aux900))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3661'
c Var 'aux903' direct represents '0' with '3661'
c Var 'aux903' order represents '1' with '3662'
-3661 3662 0
c Var 'aux903' direct represents '1' with '3663'
3661 -3662 3663 0
-3663 3662 0
-3663 -3661 0
c Var 'aux903' order represents '2' with '3664'
-3662 3664 0
c Var 'aux903' direct represents '2' with '3665'
3662 -3664 3665 0
-3665 3664 0
-3665 -3662 0
c Var 'aux903' order represents '3' with '3666'
-3664 3666 0
c Var 'aux903' direct represents '3' with '3667'
3664 -3666 3667 0
-3667 3666 0
-3667 -3664 0
c Var 'aux903' direct represents '4' with '-3666'
3661 3663 3665 3667 -3666 0
c Encoding variable: aux904 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3668'
c Var 'aux904' direct represents '0' with '3668'
c Var 'aux904' order represents '1' with '3669'
-3668 3669 0
c Var 'aux904' direct represents '1' with '3670'
3668 -3669 3670 0
-3670 3669 0
-3670 -3668 0
c Var 'aux904' direct represents '2' with '-3669'
3668 3670 -3669 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3671'
c Var 'aux905' direct represents '0' with '3671'
c Var 'aux905' order represents '1' with '3672'
-3671 3672 0
c Var 'aux905' direct represents '1' with '3673'
3671 -3672 3673 0
-3673 3672 0
-3673 -3671 0
c Var 'aux905' direct represents '2' with '-3672'
3671 3673 -3672 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3674'
c Var 'aux906' direct represents '0' with '3674'
c Var 'aux906' order represents '1' with '3675'
-3674 3675 0
c Var 'aux906' direct represents '1' with '3676'
3674 -3675 3676 0
-3676 3675 0
-3676 -3674 0
c Var 'aux906' direct represents '2' with '-3675'
3674 3676 -3675 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3677'
c Var 'aux907' direct represents '0' with '3677'
c Var 'aux907' order represents '1' with '3678'
-3677 3678 0
c Var 'aux907' direct represents '1' with '3679'
3677 -3678 3679 0
-3679 3678 0
-3679 -3677 0
c Var 'aux907' direct represents '2' with '-3678'
3677 3679 -3678 0
c Encoding variable: aux908 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux907))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3680'
c Var 'aux908' direct represents '0' with '3680'
c Var 'aux908' order represents '1' with '3681'
-3680 3681 0
c Var 'aux908' direct represents '1' with '3682'
3680 -3681 3682 0
-3682 3681 0
-3682 -3680 0
c Var 'aux908' order represents '2' with '3683'
-3681 3683 0
c Var 'aux908' direct represents '2' with '3684'
3681 -3683 3684 0
-3684 3683 0
-3684 -3681 0
c Var 'aux908' direct represents '3' with '-3683'
3680 3682 3684 -3683 0
c Encoding variable: aux909 with domain: int(0..4) (representing constraint (aux904 + aux906))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3685'
c Var 'aux909' direct represents '0' with '3685'
c Var 'aux909' order represents '1' with '3686'
-3685 3686 0
c Var 'aux909' direct represents '1' with '3687'
3685 -3686 3687 0
-3687 3686 0
-3687 -3685 0
c Var 'aux909' order represents '2' with '3688'
-3686 3688 0
c Var 'aux909' direct represents '2' with '3689'
3686 -3688 3689 0
-3689 3688 0
-3689 -3686 0
c Var 'aux909' order represents '3' with '3690'
-3688 3690 0
c Var 'aux909' direct represents '3' with '3691'
3688 -3690 3691 0
-3691 3690 0
-3691 -3688 0
c Var 'aux909' direct represents '4' with '-3690'
3685 3687 3689 3691 -3690 0
c Encoding variable: aux910 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3692'
c Var 'aux910' direct represents '0' with '3692'
c Var 'aux910' order represents '1' with '3693'
-3692 3693 0
c Var 'aux910' direct represents '1' with '3694'
3692 -3693 3694 0
-3694 3693 0
-3694 -3692 0
c Var 'aux910' direct represents '2' with '-3693'
3692 3694 -3693 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3695'
c Var 'aux911' direct represents '0' with '3695'
c Var 'aux911' order represents '1' with '3696'
-3695 3696 0
c Var 'aux911' direct represents '1' with '3697'
3695 -3696 3697 0
-3697 3696 0
-3697 -3695 0
c Var 'aux911' direct represents '2' with '-3696'
3695 3697 -3696 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3698'
c Var 'aux912' direct represents '0' with '3698'
c Var 'aux912' order represents '1' with '3699'
-3698 3699 0
c Var 'aux912' direct represents '1' with '3700'
3698 -3699 3700 0
-3700 3699 0
-3700 -3698 0
c Var 'aux912' direct represents '2' with '-3699'
3698 3700 -3699 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3701'
c Var 'aux913' direct represents '0' with '3701'
c Var 'aux913' order represents '1' with '3702'
-3701 3702 0
c Var 'aux913' direct represents '1' with '3703'
3701 -3702 3703 0
-3703 3702 0
-3703 -3701 0
c Var 'aux913' direct represents '2' with '-3702'
3701 3703 -3702 0
c Encoding variable: aux914 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux913))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3704'
c Var 'aux914' direct represents '0' with '3704'
c Var 'aux914' order represents '1' with '3705'
-3704 3705 0
c Var 'aux914' direct represents '1' with '3706'
3704 -3705 3706 0
-3706 3705 0
-3706 -3704 0
c Var 'aux914' order represents '2' with '3707'
-3705 3707 0
c Var 'aux914' direct represents '2' with '3708'
3705 -3707 3708 0
-3708 3707 0
-3708 -3705 0
c Var 'aux914' direct represents '3' with '-3707'
3704 3706 3708 -3707 0
c Encoding variable: aux915 with domain: int(0..4) (representing constraint (aux910 + aux912))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3709'
c Var 'aux915' direct represents '0' with '3709'
c Var 'aux915' order represents '1' with '3710'
-3709 3710 0
c Var 'aux915' direct represents '1' with '3711'
3709 -3710 3711 0
-3711 3710 0
-3711 -3709 0
c Var 'aux915' order represents '2' with '3712'
-3710 3712 0
c Var 'aux915' direct represents '2' with '3713'
3710 -3712 3713 0
-3713 3712 0
-3713 -3710 0
c Var 'aux915' order represents '3' with '3714'
-3712 3714 0
c Var 'aux915' direct represents '3' with '3715'
3712 -3714 3715 0
-3715 3714 0
-3715 -3712 0
c Var 'aux915' direct represents '4' with '-3714'
3709 3711 3713 3715 -3714 0
c Encoding variable: aux916 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3716'
c Var 'aux916' direct represents '0' with '3716'
c Var 'aux916' order represents '1' with '3717'
-3716 3717 0
c Var 'aux916' direct represents '1' with '3718'
3716 -3717 3718 0
-3718 3717 0
-3718 -3716 0
c Var 'aux916' direct represents '2' with '-3717'
3716 3718 -3717 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3719'
c Var 'aux917' direct represents '0' with '3719'
c Var 'aux917' order represents '1' with '3720'
-3719 3720 0
c Var 'aux917' direct represents '1' with '3721'
3719 -3720 3721 0
-3721 3720 0
-3721 -3719 0
c Var 'aux917' direct represents '2' with '-3720'
3719 3721 -3720 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3722'
c Var 'aux918' direct represents '0' with '3722'
c Var 'aux918' order represents '1' with '3723'
-3722 3723 0
c Var 'aux918' direct represents '1' with '3724'
3722 -3723 3724 0
-3724 3723 0
-3724 -3722 0
c Var 'aux918' direct represents '2' with '-3723'
3722 3724 -3723 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3725'
c Var 'aux919' direct represents '0' with '3725'
c Var 'aux919' order represents '1' with '3726'
-3725 3726 0
c Var 'aux919' direct represents '1' with '3727'
3725 -3726 3727 0
-3727 3726 0
-3727 -3725 0
c Var 'aux919' direct represents '2' with '-3726'
3725 3727 -3726 0
c Encoding variable: aux920 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux919))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3728'
c Var 'aux920' direct represents '0' with '3728'
c Var 'aux920' order represents '1' with '3729'
-3728 3729 0
c Var 'aux920' direct represents '1' with '3730'
3728 -3729 3730 0
-3730 3729 0
-3730 -3728 0
c Var 'aux920' order represents '2' with '3731'
-3729 3731 0
c Var 'aux920' direct represents '2' with '3732'
3729 -3731 3732 0
-3732 3731 0
-3732 -3729 0
c Var 'aux920' direct represents '3' with '-3731'
3728 3730 3732 -3731 0
c Encoding variable: aux921 with domain: int(0..4) (representing constraint (aux916 + aux918))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3733'
c Var 'aux921' direct represents '0' with '3733'
c Var 'aux921' order represents '1' with '3734'
-3733 3734 0
c Var 'aux921' direct represents '1' with '3735'
3733 -3734 3735 0
-3735 3734 0
-3735 -3733 0
c Var 'aux921' order represents '2' with '3736'
-3734 3736 0
c Var 'aux921' direct represents '2' with '3737'
3734 -3736 3737 0
-3737 3736 0
-3737 -3734 0
c Var 'aux921' order represents '3' with '3738'
-3736 3738 0
c Var 'aux921' direct represents '3' with '3739'
3736 -3738 3739 0
-3739 3738 0
-3739 -3736 0
c Var 'aux921' direct represents '4' with '-3738'
3733 3735 3737 3739 -3738 0
c Encoding variable: aux922 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3740'
c Var 'aux922' direct represents '0' with '3740'
c Var 'aux922' order represents '1' with '3741'
-3740 3741 0
c Var 'aux922' direct represents '1' with '3742'
3740 -3741 3742 0
-3742 3741 0
-3742 -3740 0
c Var 'aux922' direct represents '2' with '-3741'
3740 3742 -3741 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3743'
c Var 'aux923' direct represents '0' with '3743'
c Var 'aux923' order represents '1' with '3744'
-3743 3744 0
c Var 'aux923' direct represents '1' with '3745'
3743 -3744 3745 0
-3745 3744 0
-3745 -3743 0
c Var 'aux923' direct represents '2' with '-3744'
3743 3745 -3744 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3746'
c Var 'aux924' direct represents '0' with '3746'
c Var 'aux924' order represents '1' with '3747'
-3746 3747 0
c Var 'aux924' direct represents '1' with '3748'
3746 -3747 3748 0
-3748 3747 0
-3748 -3746 0
c Var 'aux924' direct represents '2' with '-3747'
3746 3748 -3747 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3749'
c Var 'aux925' direct represents '0' with '3749'
c Var 'aux925' order represents '1' with '3750'
-3749 3750 0
c Var 'aux925' direct represents '1' with '3751'
3749 -3750 3751 0
-3751 3750 0
-3751 -3749 0
c Var 'aux925' direct represents '2' with '-3750'
3749 3751 -3750 0
c Encoding variable: aux926 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux925))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3752'
c Var 'aux926' direct represents '0' with '3752'
c Var 'aux926' order represents '1' with '3753'
-3752 3753 0
c Var 'aux926' direct represents '1' with '3754'
3752 -3753 3754 0
-3754 3753 0
-3754 -3752 0
c Var 'aux926' order represents '2' with '3755'
-3753 3755 0
c Var 'aux926' direct represents '2' with '3756'
3753 -3755 3756 0
-3756 3755 0
-3756 -3753 0
c Var 'aux926' direct represents '3' with '-3755'
3752 3754 3756 -3755 0
c Encoding variable: aux927 with domain: int(0..4) (representing constraint (aux922 + aux924))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3757'
c Var 'aux927' direct represents '0' with '3757'
c Var 'aux927' order represents '1' with '3758'
-3757 3758 0
c Var 'aux927' direct represents '1' with '3759'
3757 -3758 3759 0
-3759 3758 0
-3759 -3757 0
c Var 'aux927' order represents '2' with '3760'
-3758 3760 0
c Var 'aux927' direct represents '2' with '3761'
3758 -3760 3761 0
-3761 3760 0
-3761 -3758 0
c Var 'aux927' order represents '3' with '3762'
-3760 3762 0
c Var 'aux927' direct represents '3' with '3763'
3760 -3762 3763 0
-3763 3762 0
-3763 -3760 0
c Var 'aux927' direct represents '4' with '-3762'
3757 3759 3761 3763 -3762 0
c Encoding variable: aux928 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3764'
c Var 'aux928' direct represents '0' with '3764'
c Var 'aux928' order represents '1' with '3765'
-3764 3765 0
c Var 'aux928' direct represents '1' with '3766'
3764 -3765 3766 0
-3766 3765 0
-3766 -3764 0
c Var 'aux928' direct represents '2' with '-3765'
3764 3766 -3765 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3767'
c Var 'aux929' direct represents '0' with '3767'
c Var 'aux929' order represents '1' with '3768'
-3767 3768 0
c Var 'aux929' direct represents '1' with '3769'
3767 -3768 3769 0
-3769 3768 0
-3769 -3767 0
c Var 'aux929' direct represents '2' with '-3768'
3767 3769 -3768 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3770'
c Var 'aux930' direct represents '0' with '3770'
c Var 'aux930' order represents '1' with '3771'
-3770 3771 0
c Var 'aux930' direct represents '1' with '3772'
3770 -3771 3772 0
-3772 3771 0
-3772 -3770 0
c Var 'aux930' direct represents '2' with '-3771'
3770 3772 -3771 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3773'
c Var 'aux931' direct represents '0' with '3773'
c Var 'aux931' order represents '1' with '3774'
-3773 3774 0
c Var 'aux931' direct represents '1' with '3775'
3773 -3774 3775 0
-3775 3774 0
-3775 -3773 0
c Var 'aux931' direct represents '2' with '-3774'
3773 3775 -3774 0
c Encoding variable: aux932 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux931))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '3776'
c Var 'aux932' direct represents '0' with '3776'
c Var 'aux932' order represents '1' with '3777'
-3776 3777 0
c Var 'aux932' direct represents '1' with '3778'
3776 -3777 3778 0
-3778 3777 0
-3778 -3776 0
c Var 'aux932' order represents '2' with '3779'
-3777 3779 0
c Var 'aux932' direct represents '2' with '3780'
3777 -3779 3780 0
-3780 3779 0
-3780 -3777 0
c Var 'aux932' direct represents '3' with '-3779'
3776 3778 3780 -3779 0
c Encoding variable: aux933 with domain: int(0..4) (representing constraint (aux928 + aux930))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '3781'
c Var 'aux933' direct represents '0' with '3781'
c Var 'aux933' order represents '1' with '3782'
-3781 3782 0
c Var 'aux933' direct represents '1' with '3783'
3781 -3782 3783 0
-3783 3782 0
-3783 -3781 0
c Var 'aux933' order represents '2' with '3784'
-3782 3784 0
c Var 'aux933' direct represents '2' with '3785'
3782 -3784 3785 0
-3785 3784 0
-3785 -3782 0
c Var 'aux933' order represents '3' with '3786'
-3784 3786 0
c Var 'aux933' direct represents '3' with '3787'
3784 -3786 3787 0
-3787 3786 0
-3787 -3784 0
c Var 'aux933' direct represents '4' with '-3786'
3781 3783 3785 3787 -3786 0
c Encoding variable: aux934 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '3788'
c Var 'aux934' direct represents '0' with '3788'
c Var 'aux934' order represents '1' with '3789'
-3788 3789 0
c Var 'aux934' direct represents '1' with '3790'
3788 -3789 3790 0
-3790 3789 0
-3790 -3788 0
c Var 'aux934' direct represents '2' with '-3789'
3788 3790 -3789 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '3791'
c Var 'aux935' direct represents '0' with '3791'
c Var 'aux935' order represents '1' with '3792'
-3791 3792 0
c Var 'aux935' direct represents '1' with '3793'
3791 -3792 3793 0
-3793 3792 0
-3793 -3791 0
c Var 'aux935' direct represents '2' with '-3792'
3791 3793 -3792 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '3794'
c Var 'aux936' direct represents '0' with '3794'
c Var 'aux936' order represents '1' with '3795'
-3794 3795 0
c Var 'aux936' direct represents '1' with '3796'
3794 -3795 3796 0
-3796 3795 0
-3796 -3794 0
c Var 'aux936' direct represents '2' with '-3795'
3794 3796 -3795 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '3797'
c Var 'aux937' direct represents '0' with '3797'
c Var 'aux937' order represents '1' with '3798'
-3797 3798 0
c Var 'aux937' direct represents '1' with '3799'
3797 -3798 3799 0
-3799 3798 0
-3799 -3797 0
c Var 'aux937' direct represents '2' with '-3798'
3797 3799 -3798 0
c Encoding variable: aux938 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux937))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '3800'
c Var 'aux938' direct represents '0' with '3800'
c Var 'aux938' order represents '1' with '3801'
-3800 3801 0
c Var 'aux938' direct represents '1' with '3802'
3800 -3801 3802 0
-3802 3801 0
-3802 -3800 0
c Var 'aux938' order represents '2' with '3803'
-3801 3803 0
c Var 'aux938' direct represents '2' with '3804'
3801 -3803 3804 0
-3804 3803 0
-3804 -3801 0
c Var 'aux938' direct represents '3' with '-3803'
3800 3802 3804 -3803 0
c Encoding variable: aux939 with domain: int(0..4) (representing constraint (aux934 + aux936))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '3805'
c Var 'aux939' direct represents '0' with '3805'
c Var 'aux939' order represents '1' with '3806'
-3805 3806 0
c Var 'aux939' direct represents '1' with '3807'
3805 -3806 3807 0
-3807 3806 0
-3807 -3805 0
c Var 'aux939' order represents '2' with '3808'
-3806 3808 0
c Var 'aux939' direct represents '2' with '3809'
3806 -3808 3809 0
-3809 3808 0
-3809 -3806 0
c Var 'aux939' order represents '3' with '3810'
-3808 3810 0
c Var 'aux939' direct represents '3' with '3811'
3808 -3810 3811 0
-3811 3810 0
-3811 -3808 0
c Var 'aux939' direct represents '4' with '-3810'
3805 3807 3809 3811 -3810 0
c Encoding variable: aux940 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '3812'
c Var 'aux940' direct represents '0' with '3812'
c Var 'aux940' order represents '1' with '3813'
-3812 3813 0
c Var 'aux940' direct represents '1' with '3814'
3812 -3813 3814 0
-3814 3813 0
-3814 -3812 0
c Var 'aux940' direct represents '2' with '-3813'
3812 3814 -3813 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '3815'
c Var 'aux941' direct represents '0' with '3815'
c Var 'aux941' order represents '1' with '3816'
-3815 3816 0
c Var 'aux941' direct represents '1' with '3817'
3815 -3816 3817 0
-3817 3816 0
-3817 -3815 0
c Var 'aux941' direct represents '2' with '-3816'
3815 3817 -3816 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '3818'
c Var 'aux942' direct represents '0' with '3818'
c Var 'aux942' order represents '1' with '3819'
-3818 3819 0
c Var 'aux942' direct represents '1' with '3820'
3818 -3819 3820 0
-3820 3819 0
-3820 -3818 0
c Var 'aux942' direct represents '2' with '-3819'
3818 3820 -3819 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '3821'
c Var 'aux943' direct represents '0' with '3821'
c Var 'aux943' order represents '1' with '3822'
-3821 3822 0
c Var 'aux943' direct represents '1' with '3823'
3821 -3822 3823 0
-3823 3822 0
-3823 -3821 0
c Var 'aux943' direct represents '2' with '-3822'
3821 3823 -3822 0
c Encoding variable: aux944 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux943))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '3824'
c Var 'aux944' direct represents '0' with '3824'
c Var 'aux944' order represents '1' with '3825'
-3824 3825 0
c Var 'aux944' direct represents '1' with '3826'
3824 -3825 3826 0
-3826 3825 0
-3826 -3824 0
c Var 'aux944' order represents '2' with '3827'
-3825 3827 0
c Var 'aux944' direct represents '2' with '3828'
3825 -3827 3828 0
-3828 3827 0
-3828 -3825 0
c Var 'aux944' direct represents '3' with '-3827'
3824 3826 3828 -3827 0
c Encoding variable: aux945 with domain: int(0..4) (representing constraint (aux940 + aux942))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '3829'
c Var 'aux945' direct represents '0' with '3829'
c Var 'aux945' order represents '1' with '3830'
-3829 3830 0
c Var 'aux945' direct represents '1' with '3831'
3829 -3830 3831 0
-3831 3830 0
-3831 -3829 0
c Var 'aux945' order represents '2' with '3832'
-3830 3832 0
c Var 'aux945' direct represents '2' with '3833'
3830 -3832 3833 0
-3833 3832 0
-3833 -3830 0
c Var 'aux945' order represents '3' with '3834'
-3832 3834 0
c Var 'aux945' direct represents '3' with '3835'
3832 -3834 3835 0
-3835 3834 0
-3835 -3832 0
c Var 'aux945' direct represents '4' with '-3834'
3829 3831 3833 3835 -3834 0
c Encoding variable: aux946 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '3836'
c Var 'aux946' direct represents '0' with '3836'
c Var 'aux946' order represents '1' with '3837'
-3836 3837 0
c Var 'aux946' direct represents '1' with '3838'
3836 -3837 3838 0
-3838 3837 0
-3838 -3836 0
c Var 'aux946' direct represents '2' with '-3837'
3836 3838 -3837 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '3839'
c Var 'aux947' direct represents '0' with '3839'
c Var 'aux947' order represents '1' with '3840'
-3839 3840 0
c Var 'aux947' direct represents '1' with '3841'
3839 -3840 3841 0
-3841 3840 0
-3841 -3839 0
c Var 'aux947' direct represents '2' with '-3840'
3839 3841 -3840 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '3842'
c Var 'aux948' direct represents '0' with '3842'
c Var 'aux948' order represents '1' with '3843'
-3842 3843 0
c Var 'aux948' direct represents '1' with '3844'
3842 -3843 3844 0
-3844 3843 0
-3844 -3842 0
c Var 'aux948' direct represents '2' with '-3843'
3842 3844 -3843 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '3845'
c Var 'aux949' direct represents '0' with '3845'
c Var 'aux949' order represents '1' with '3846'
-3845 3846 0
c Var 'aux949' direct represents '1' with '3847'
3845 -3846 3847 0
-3847 3846 0
-3847 -3845 0
c Var 'aux949' direct represents '2' with '-3846'
3845 3847 -3846 0
c Encoding variable: aux950 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux949))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '3848'
c Var 'aux950' direct represents '0' with '3848'
c Var 'aux950' order represents '1' with '3849'
-3848 3849 0
c Var 'aux950' direct represents '1' with '3850'
3848 -3849 3850 0
-3850 3849 0
-3850 -3848 0
c Var 'aux950' order represents '2' with '3851'
-3849 3851 0
c Var 'aux950' direct represents '2' with '3852'
3849 -3851 3852 0
-3852 3851 0
-3852 -3849 0
c Var 'aux950' direct represents '3' with '-3851'
3848 3850 3852 -3851 0
c Encoding variable: aux951 with domain: int(0..4) (representing constraint (aux946 + aux948))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '3853'
c Var 'aux951' direct represents '0' with '3853'
c Var 'aux951' order represents '1' with '3854'
-3853 3854 0
c Var 'aux951' direct represents '1' with '3855'
3853 -3854 3855 0
-3855 3854 0
-3855 -3853 0
c Var 'aux951' order represents '2' with '3856'
-3854 3856 0
c Var 'aux951' direct represents '2' with '3857'
3854 -3856 3857 0
-3857 3856 0
-3857 -3854 0
c Var 'aux951' order represents '3' with '3858'
-3856 3858 0
c Var 'aux951' direct represents '3' with '3859'
3856 -3858 3859 0
-3859 3858 0
-3859 -3856 0
c Var 'aux951' direct represents '4' with '-3858'
3853 3855 3857 3859 -3858 0
c Encoding variable: aux952 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '3860'
c Var 'aux952' direct represents '0' with '3860'
c Var 'aux952' order represents '1' with '3861'
-3860 3861 0
c Var 'aux952' direct represents '1' with '3862'
3860 -3861 3862 0
-3862 3861 0
-3862 -3860 0
c Var 'aux952' direct represents '2' with '-3861'
3860 3862 -3861 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '3863'
c Var 'aux953' direct represents '0' with '3863'
c Var 'aux953' order represents '1' with '3864'
-3863 3864 0
c Var 'aux953' direct represents '1' with '3865'
3863 -3864 3865 0
-3865 3864 0
-3865 -3863 0
c Var 'aux953' direct represents '2' with '-3864'
3863 3865 -3864 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '3866'
c Var 'aux954' direct represents '0' with '3866'
c Var 'aux954' order represents '1' with '3867'
-3866 3867 0
c Var 'aux954' direct represents '1' with '3868'
3866 -3867 3868 0
-3868 3867 0
-3868 -3866 0
c Var 'aux954' direct represents '2' with '-3867'
3866 3868 -3867 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '3869'
c Var 'aux955' direct represents '0' with '3869'
c Var 'aux955' order represents '1' with '3870'
-3869 3870 0
c Var 'aux955' direct represents '1' with '3871'
3869 -3870 3871 0
-3871 3870 0
-3871 -3869 0
c Var 'aux955' direct represents '2' with '-3870'
3869 3871 -3870 0
c Encoding variable: aux956 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux955))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '3872'
c Var 'aux956' direct represents '0' with '3872'
c Var 'aux956' order represents '1' with '3873'
-3872 3873 0
c Var 'aux956' direct represents '1' with '3874'
3872 -3873 3874 0
-3874 3873 0
-3874 -3872 0
c Var 'aux956' order represents '2' with '3875'
-3873 3875 0
c Var 'aux956' direct represents '2' with '3876'
3873 -3875 3876 0
-3876 3875 0
-3876 -3873 0
c Var 'aux956' direct represents '3' with '-3875'
3872 3874 3876 -3875 0
c Encoding variable: aux957 with domain: int(0..4) (representing constraint (aux952 + aux954))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '3877'
c Var 'aux957' direct represents '0' with '3877'
c Var 'aux957' order represents '1' with '3878'
-3877 3878 0
c Var 'aux957' direct represents '1' with '3879'
3877 -3878 3879 0
-3879 3878 0
-3879 -3877 0
c Var 'aux957' order represents '2' with '3880'
-3878 3880 0
c Var 'aux957' direct represents '2' with '3881'
3878 -3880 3881 0
-3881 3880 0
-3881 -3878 0
c Var 'aux957' order represents '3' with '3882'
-3880 3882 0
c Var 'aux957' direct represents '3' with '3883'
3880 -3882 3883 0
-3883 3882 0
-3883 -3880 0
c Var 'aux957' direct represents '4' with '-3882'
3877 3879 3881 3883 -3882 0
c Encoding variable: aux958 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '3884'
c Var 'aux958' direct represents '0' with '3884'
c Var 'aux958' order represents '1' with '3885'
-3884 3885 0
c Var 'aux958' direct represents '1' with '3886'
3884 -3885 3886 0
-3886 3885 0
-3886 -3884 0
c Var 'aux958' direct represents '2' with '-3885'
3884 3886 -3885 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '3887'
c Var 'aux959' direct represents '0' with '3887'
c Var 'aux959' order represents '1' with '3888'
-3887 3888 0
c Var 'aux959' direct represents '1' with '3889'
3887 -3888 3889 0
-3889 3888 0
-3889 -3887 0
c Var 'aux959' direct represents '2' with '-3888'
3887 3889 -3888 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '3890'
c Var 'aux960' direct represents '0' with '3890'
c Var 'aux960' order represents '1' with '3891'
-3890 3891 0
c Var 'aux960' direct represents '1' with '3892'
3890 -3891 3892 0
-3892 3891 0
-3892 -3890 0
c Var 'aux960' direct represents '2' with '-3891'
3890 3892 -3891 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '3893'
c Var 'aux961' direct represents '0' with '3893'
c Var 'aux961' order represents '1' with '3894'
-3893 3894 0
c Var 'aux961' direct represents '1' with '3895'
3893 -3894 3895 0
-3895 3894 0
-3895 -3893 0
c Var 'aux961' direct represents '2' with '-3894'
3893 3895 -3894 0
c Encoding variable: aux962 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux961))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '3896'
c Var 'aux962' direct represents '0' with '3896'
c Var 'aux962' order represents '1' with '3897'
-3896 3897 0
c Var 'aux962' direct represents '1' with '3898'
3896 -3897 3898 0
-3898 3897 0
-3898 -3896 0
c Var 'aux962' order represents '2' with '3899'
-3897 3899 0
c Var 'aux962' direct represents '2' with '3900'
3897 -3899 3900 0
-3900 3899 0
-3900 -3897 0
c Var 'aux962' direct represents '3' with '-3899'
3896 3898 3900 -3899 0
c Encoding variable: aux963 with domain: int(0..4) (representing constraint (aux958 + aux960))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '3901'
c Var 'aux963' direct represents '0' with '3901'
c Var 'aux963' order represents '1' with '3902'
-3901 3902 0
c Var 'aux963' direct represents '1' with '3903'
3901 -3902 3903 0
-3903 3902 0
-3903 -3901 0
c Var 'aux963' order represents '2' with '3904'
-3902 3904 0
c Var 'aux963' direct represents '2' with '3905'
3902 -3904 3905 0
-3905 3904 0
-3905 -3902 0
c Var 'aux963' order represents '3' with '3906'
-3904 3906 0
c Var 'aux963' direct represents '3' with '3907'
3904 -3906 3907 0
-3907 3906 0
-3907 -3904 0
c Var 'aux963' direct represents '4' with '-3906'
3901 3903 3905 3907 -3906 0
c Encoding variable: aux964 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '3908'
c Var 'aux964' direct represents '0' with '3908'
c Var 'aux964' order represents '1' with '3909'
-3908 3909 0
c Var 'aux964' direct represents '1' with '3910'
3908 -3909 3910 0
-3910 3909 0
-3910 -3908 0
c Var 'aux964' direct represents '2' with '-3909'
3908 3910 -3909 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '3911'
c Var 'aux965' direct represents '0' with '3911'
c Var 'aux965' order represents '1' with '3912'
-3911 3912 0
c Var 'aux965' direct represents '1' with '3913'
3911 -3912 3913 0
-3913 3912 0
-3913 -3911 0
c Var 'aux965' direct represents '2' with '-3912'
3911 3913 -3912 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '3914'
c Var 'aux966' direct represents '0' with '3914'
c Var 'aux966' order represents '1' with '3915'
-3914 3915 0
c Var 'aux966' direct represents '1' with '3916'
3914 -3915 3916 0
-3916 3915 0
-3916 -3914 0
c Var 'aux966' direct represents '2' with '-3915'
3914 3916 -3915 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '3917'
c Var 'aux967' direct represents '0' with '3917'
c Var 'aux967' order represents '1' with '3918'
-3917 3918 0
c Var 'aux967' direct represents '1' with '3919'
3917 -3918 3919 0
-3919 3918 0
-3919 -3917 0
c Var 'aux967' direct represents '2' with '-3918'
3917 3919 -3918 0
c Encoding variable: aux968 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux967))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '3920'
c Var 'aux968' direct represents '0' with '3920'
c Var 'aux968' order represents '1' with '3921'
-3920 3921 0
c Var 'aux968' direct represents '1' with '3922'
3920 -3921 3922 0
-3922 3921 0
-3922 -3920 0
c Var 'aux968' order represents '2' with '3923'
-3921 3923 0
c Var 'aux968' direct represents '2' with '3924'
3921 -3923 3924 0
-3924 3923 0
-3924 -3921 0
c Var 'aux968' direct represents '3' with '-3923'
3920 3922 3924 -3923 0
c Encoding variable: aux969 with domain: int(0..4) (representing constraint (aux964 + aux966))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '3925'
c Var 'aux969' direct represents '0' with '3925'
c Var 'aux969' order represents '1' with '3926'
-3925 3926 0
c Var 'aux969' direct represents '1' with '3927'
3925 -3926 3927 0
-3927 3926 0
-3927 -3925 0
c Var 'aux969' order represents '2' with '3928'
-3926 3928 0
c Var 'aux969' direct represents '2' with '3929'
3926 -3928 3929 0
-3929 3928 0
-3929 -3926 0
c Var 'aux969' order represents '3' with '3930'
-3928 3930 0
c Var 'aux969' direct represents '3' with '3931'
3928 -3930 3931 0
-3931 3930 0
-3931 -3928 0
c Var 'aux969' direct represents '4' with '-3930'
3925 3927 3929 3931 -3930 0
c Encoding variable: aux970 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '3932'
c Var 'aux970' direct represents '0' with '3932'
c Var 'aux970' order represents '1' with '3933'
-3932 3933 0
c Var 'aux970' direct represents '1' with '3934'
3932 -3933 3934 0
-3934 3933 0
-3934 -3932 0
c Var 'aux970' direct represents '2' with '-3933'
3932 3934 -3933 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '3935'
c Var 'aux971' direct represents '0' with '3935'
c Var 'aux971' order represents '1' with '3936'
-3935 3936 0
c Var 'aux971' direct represents '1' with '3937'
3935 -3936 3937 0
-3937 3936 0
-3937 -3935 0
c Var 'aux971' direct represents '2' with '-3936'
3935 3937 -3936 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '3938'
c Var 'aux972' direct represents '0' with '3938'
c Var 'aux972' order represents '1' with '3939'
-3938 3939 0
c Var 'aux972' direct represents '1' with '3940'
3938 -3939 3940 0
-3940 3939 0
-3940 -3938 0
c Var 'aux972' direct represents '2' with '-3939'
3938 3940 -3939 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '3941'
c Var 'aux973' direct represents '0' with '3941'
c Var 'aux973' order represents '1' with '3942'
-3941 3942 0
c Var 'aux973' direct represents '1' with '3943'
3941 -3942 3943 0
-3943 3942 0
-3943 -3941 0
c Var 'aux973' direct represents '2' with '-3942'
3941 3943 -3942 0
c Encoding variable: aux974 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux973))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '3944'
c Var 'aux974' direct represents '0' with '3944'
c Var 'aux974' order represents '1' with '3945'
-3944 3945 0
c Var 'aux974' direct represents '1' with '3946'
3944 -3945 3946 0
-3946 3945 0
-3946 -3944 0
c Var 'aux974' order represents '2' with '3947'
-3945 3947 0
c Var 'aux974' direct represents '2' with '3948'
3945 -3947 3948 0
-3948 3947 0
-3948 -3945 0
c Var 'aux974' direct represents '3' with '-3947'
3944 3946 3948 -3947 0
c Encoding variable: aux975 with domain: int(0..4) (representing constraint (aux970 + aux972))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '3949'
c Var 'aux975' direct represents '0' with '3949'
c Var 'aux975' order represents '1' with '3950'
-3949 3950 0
c Var 'aux975' direct represents '1' with '3951'
3949 -3950 3951 0
-3951 3950 0
-3951 -3949 0
c Var 'aux975' order represents '2' with '3952'
-3950 3952 0
c Var 'aux975' direct represents '2' with '3953'
3950 -3952 3953 0
-3953 3952 0
-3953 -3950 0
c Var 'aux975' order represents '3' with '3954'
-3952 3954 0
c Var 'aux975' direct represents '3' with '3955'
3952 -3954 3955 0
-3955 3954 0
-3955 -3952 0
c Var 'aux975' direct represents '4' with '-3954'
3949 3951 3953 3955 -3954 0
c Encoding variable: aux976 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '3956'
c Var 'aux976' direct represents '0' with '3956'
c Var 'aux976' order represents '1' with '3957'
-3956 3957 0
c Var 'aux976' direct represents '1' with '3958'
3956 -3957 3958 0
-3958 3957 0
-3958 -3956 0
c Var 'aux976' direct represents '2' with '-3957'
3956 3958 -3957 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '3959'
c Var 'aux977' direct represents '0' with '3959'
c Var 'aux977' order represents '1' with '3960'
-3959 3960 0
c Var 'aux977' direct represents '1' with '3961'
3959 -3960 3961 0
-3961 3960 0
-3961 -3959 0
c Var 'aux977' direct represents '2' with '-3960'
3959 3961 -3960 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '3962'
c Var 'aux978' direct represents '0' with '3962'
c Var 'aux978' order represents '1' with '3963'
-3962 3963 0
c Var 'aux978' direct represents '1' with '3964'
3962 -3963 3964 0
-3964 3963 0
-3964 -3962 0
c Var 'aux978' direct represents '2' with '-3963'
3962 3964 -3963 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '3965'
c Var 'aux979' direct represents '0' with '3965'
c Var 'aux979' order represents '1' with '3966'
-3965 3966 0
c Var 'aux979' direct represents '1' with '3967'
3965 -3966 3967 0
-3967 3966 0
-3967 -3965 0
c Var 'aux979' direct represents '2' with '-3966'
3965 3967 -3966 0
c Encoding variable: aux980 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux979))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '3968'
c Var 'aux980' direct represents '0' with '3968'
c Var 'aux980' order represents '1' with '3969'
-3968 3969 0
c Var 'aux980' direct represents '1' with '3970'
3968 -3969 3970 0
-3970 3969 0
-3970 -3968 0
c Var 'aux980' order represents '2' with '3971'
-3969 3971 0
c Var 'aux980' direct represents '2' with '3972'
3969 -3971 3972 0
-3972 3971 0
-3972 -3969 0
c Var 'aux980' direct represents '3' with '-3971'
3968 3970 3972 -3971 0
c Encoding variable: aux981 with domain: int(0..4) (representing constraint (aux976 + aux978))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '3973'
c Var 'aux981' direct represents '0' with '3973'
c Var 'aux981' order represents '1' with '3974'
-3973 3974 0
c Var 'aux981' direct represents '1' with '3975'
3973 -3974 3975 0
-3975 3974 0
-3975 -3973 0
c Var 'aux981' order represents '2' with '3976'
-3974 3976 0
c Var 'aux981' direct represents '2' with '3977'
3974 -3976 3977 0
-3977 3976 0
-3977 -3974 0
c Var 'aux981' order represents '3' with '3978'
-3976 3978 0
c Var 'aux981' direct represents '3' with '3979'
3976 -3978 3979 0
-3979 3978 0
-3979 -3976 0
c Var 'aux981' direct represents '4' with '-3978'
3973 3975 3977 3979 -3978 0
c Encoding variable: aux982 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '3980'
c Var 'aux982' direct represents '0' with '3980'
c Var 'aux982' order represents '1' with '3981'
-3980 3981 0
c Var 'aux982' direct represents '1' with '3982'
3980 -3981 3982 0
-3982 3981 0
-3982 -3980 0
c Var 'aux982' direct represents '2' with '-3981'
3980 3982 -3981 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '3983'
c Var 'aux983' direct represents '0' with '3983'
c Var 'aux983' order represents '1' with '3984'
-3983 3984 0
c Var 'aux983' direct represents '1' with '3985'
3983 -3984 3985 0
-3985 3984 0
-3985 -3983 0
c Var 'aux983' direct represents '2' with '-3984'
3983 3985 -3984 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '3986'
c Var 'aux984' direct represents '0' with '3986'
c Var 'aux984' order represents '1' with '3987'
-3986 3987 0
c Var 'aux984' direct represents '1' with '3988'
3986 -3987 3988 0
-3988 3987 0
-3988 -3986 0
c Var 'aux984' direct represents '2' with '-3987'
3986 3988 -3987 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '3989'
c Var 'aux985' direct represents '0' with '3989'
c Var 'aux985' order represents '1' with '3990'
-3989 3990 0
c Var 'aux985' direct represents '1' with '3991'
3989 -3990 3991 0
-3991 3990 0
-3991 -3989 0
c Var 'aux985' direct represents '2' with '-3990'
3989 3991 -3990 0
c Encoding variable: aux986 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux985))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '3992'
c Var 'aux986' direct represents '0' with '3992'
c Var 'aux986' order represents '1' with '3993'
-3992 3993 0
c Var 'aux986' direct represents '1' with '3994'
3992 -3993 3994 0
-3994 3993 0
-3994 -3992 0
c Var 'aux986' order represents '2' with '3995'
-3993 3995 0
c Var 'aux986' direct represents '2' with '3996'
3993 -3995 3996 0
-3996 3995 0
-3996 -3993 0
c Var 'aux986' direct represents '3' with '-3995'
3992 3994 3996 -3995 0
c Encoding variable: aux987 with domain: int(0..4) (representing constraint (aux982 + aux984))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '3997'
c Var 'aux987' direct represents '0' with '3997'
c Var 'aux987' order represents '1' with '3998'
-3997 3998 0
c Var 'aux987' direct represents '1' with '3999'
3997 -3998 3999 0
-3999 3998 0
-3999 -3997 0
c Var 'aux987' order represents '2' with '4000'
-3998 4000 0
c Var 'aux987' direct represents '2' with '4001'
3998 -4000 4001 0
-4001 4000 0
-4001 -3998 0
c Var 'aux987' order represents '3' with '4002'
-4000 4002 0
c Var 'aux987' direct represents '3' with '4003'
4000 -4002 4003 0
-4003 4002 0
-4003 -4000 0
c Var 'aux987' direct represents '4' with '-4002'
3997 3999 4001 4003 -4002 0
c Encoding variable: aux988 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4004'
c Var 'aux988' direct represents '0' with '4004'
c Var 'aux988' order represents '1' with '4005'
-4004 4005 0
c Var 'aux988' direct represents '1' with '4006'
4004 -4005 4006 0
-4006 4005 0
-4006 -4004 0
c Var 'aux988' direct represents '2' with '-4005'
4004 4006 -4005 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4007'
c Var 'aux989' direct represents '0' with '4007'
c Var 'aux989' order represents '1' with '4008'
-4007 4008 0
c Var 'aux989' direct represents '1' with '4009'
4007 -4008 4009 0
-4009 4008 0
-4009 -4007 0
c Var 'aux989' direct represents '2' with '-4008'
4007 4009 -4008 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4010'
c Var 'aux990' direct represents '0' with '4010'
c Var 'aux990' order represents '1' with '4011'
-4010 4011 0
c Var 'aux990' direct represents '1' with '4012'
4010 -4011 4012 0
-4012 4011 0
-4012 -4010 0
c Var 'aux990' direct represents '2' with '-4011'
4010 4012 -4011 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4013'
c Var 'aux991' direct represents '0' with '4013'
c Var 'aux991' order represents '1' with '4014'
-4013 4014 0
c Var 'aux991' direct represents '1' with '4015'
4013 -4014 4015 0
-4015 4014 0
-4015 -4013 0
c Var 'aux991' direct represents '2' with '-4014'
4013 4015 -4014 0
c Encoding variable: aux992 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux991))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4016'
c Var 'aux992' direct represents '0' with '4016'
c Var 'aux992' order represents '1' with '4017'
-4016 4017 0
c Var 'aux992' direct represents '1' with '4018'
4016 -4017 4018 0
-4018 4017 0
-4018 -4016 0
c Var 'aux992' order represents '2' with '4019'
-4017 4019 0
c Var 'aux992' direct represents '2' with '4020'
4017 -4019 4020 0
-4020 4019 0
-4020 -4017 0
c Var 'aux992' direct represents '3' with '-4019'
4016 4018 4020 -4019 0
c Encoding variable: aux993 with domain: int(0..4) (representing constraint (aux988 + aux990))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4021'
c Var 'aux993' direct represents '0' with '4021'
c Var 'aux993' order represents '1' with '4022'
-4021 4022 0
c Var 'aux993' direct represents '1' with '4023'
4021 -4022 4023 0
-4023 4022 0
-4023 -4021 0
c Var 'aux993' order represents '2' with '4024'
-4022 4024 0
c Var 'aux993' direct represents '2' with '4025'
4022 -4024 4025 0
-4025 4024 0
-4025 -4022 0
c Var 'aux993' order represents '3' with '4026'
-4024 4026 0
c Var 'aux993' direct represents '3' with '4027'
4024 -4026 4027 0
-4027 4026 0
-4027 -4024 0
c Var 'aux993' direct represents '4' with '-4026'
4021 4023 4025 4027 -4026 0
c Encoding variable: aux994 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4028'
c Var 'aux994' direct represents '0' with '4028'
c Var 'aux994' order represents '1' with '4029'
-4028 4029 0
c Var 'aux994' direct represents '1' with '4030'
4028 -4029 4030 0
-4030 4029 0
-4030 -4028 0
c Var 'aux994' direct represents '2' with '-4029'
4028 4030 -4029 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4031'
c Var 'aux995' direct represents '0' with '4031'
c Var 'aux995' order represents '1' with '4032'
-4031 4032 0
c Var 'aux995' direct represents '1' with '4033'
4031 -4032 4033 0
-4033 4032 0
-4033 -4031 0
c Var 'aux995' direct represents '2' with '-4032'
4031 4033 -4032 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4034'
c Var 'aux996' direct represents '0' with '4034'
c Var 'aux996' order represents '1' with '4035'
-4034 4035 0
c Var 'aux996' direct represents '1' with '4036'
4034 -4035 4036 0
-4036 4035 0
-4036 -4034 0
c Var 'aux996' direct represents '2' with '-4035'
4034 4036 -4035 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4037'
c Var 'aux997' direct represents '0' with '4037'
c Var 'aux997' order represents '1' with '4038'
-4037 4038 0
c Var 'aux997' direct represents '1' with '4039'
4037 -4038 4039 0
-4039 4038 0
-4039 -4037 0
c Var 'aux997' direct represents '2' with '-4038'
4037 4039 -4038 0
c Encoding variable: aux998 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux997))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4040'
c Var 'aux998' direct represents '0' with '4040'
c Var 'aux998' order represents '1' with '4041'
-4040 4041 0
c Var 'aux998' direct represents '1' with '4042'
4040 -4041 4042 0
-4042 4041 0
-4042 -4040 0
c Var 'aux998' order represents '2' with '4043'
-4041 4043 0
c Var 'aux998' direct represents '2' with '4044'
4041 -4043 4044 0
-4044 4043 0
-4044 -4041 0
c Var 'aux998' direct represents '3' with '-4043'
4040 4042 4044 -4043 0
c Encoding variable: aux999 with domain: int(0..4) (representing constraint (aux994 + aux996))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4045'
c Var 'aux999' direct represents '0' with '4045'
c Var 'aux999' order represents '1' with '4046'
-4045 4046 0
c Var 'aux999' direct represents '1' with '4047'
4045 -4046 4047 0
-4047 4046 0
-4047 -4045 0
c Var 'aux999' order represents '2' with '4048'
-4046 4048 0
c Var 'aux999' direct represents '2' with '4049'
4046 -4048 4049 0
-4049 4048 0
-4049 -4046 0
c Var 'aux999' order represents '3' with '4050'
-4048 4050 0
c Var 'aux999' direct represents '3' with '4051'
4048 -4050 4051 0
-4051 4050 0
-4051 -4048 0
c Var 'aux999' direct represents '4' with '-4050'
4045 4047 4049 4051 -4050 0
c Encoding variable: aux1000 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4052'
c Var 'aux1000' direct represents '0' with '4052'
c Var 'aux1000' order represents '1' with '4053'
-4052 4053 0
c Var 'aux1000' direct represents '1' with '4054'
4052 -4053 4054 0
-4054 4053 0
-4054 -4052 0
c Var 'aux1000' direct represents '2' with '-4053'
4052 4054 -4053 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4055'
c Var 'aux1001' direct represents '0' with '4055'
c Var 'aux1001' order represents '1' with '4056'
-4055 4056 0
c Var 'aux1001' direct represents '1' with '4057'
4055 -4056 4057 0
-4057 4056 0
-4057 -4055 0
c Var 'aux1001' direct represents '2' with '-4056'
4055 4057 -4056 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4058'
c Var 'aux1002' direct represents '0' with '4058'
c Var 'aux1002' order represents '1' with '4059'
-4058 4059 0
c Var 'aux1002' direct represents '1' with '4060'
4058 -4059 4060 0
-4060 4059 0
-4060 -4058 0
c Var 'aux1002' direct represents '2' with '-4059'
4058 4060 -4059 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4061'
c Var 'aux1003' direct represents '0' with '4061'
c Var 'aux1003' order represents '1' with '4062'
-4061 4062 0
c Var 'aux1003' direct represents '1' with '4063'
4061 -4062 4063 0
-4063 4062 0
-4063 -4061 0
c Var 'aux1003' direct represents '2' with '-4062'
4061 4063 -4062 0
c Encoding variable: aux1004 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux1003))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4064'
c Var 'aux1004' direct represents '0' with '4064'
c Var 'aux1004' order represents '1' with '4065'
-4064 4065 0
c Var 'aux1004' direct represents '1' with '4066'
4064 -4065 4066 0
-4066 4065 0
-4066 -4064 0
c Var 'aux1004' order represents '2' with '4067'
-4065 4067 0
c Var 'aux1004' direct represents '2' with '4068'
4065 -4067 4068 0
-4068 4067 0
-4068 -4065 0
c Var 'aux1004' direct represents '3' with '-4067'
4064 4066 4068 -4067 0
c Encoding variable: aux1005 with domain: int(0..4) (representing constraint (aux1000 + aux1002))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4069'
c Var 'aux1005' direct represents '0' with '4069'
c Var 'aux1005' order represents '1' with '4070'
-4069 4070 0
c Var 'aux1005' direct represents '1' with '4071'
4069 -4070 4071 0
-4071 4070 0
-4071 -4069 0
c Var 'aux1005' order represents '2' with '4072'
-4070 4072 0
c Var 'aux1005' direct represents '2' with '4073'
4070 -4072 4073 0
-4073 4072 0
-4073 -4070 0
c Var 'aux1005' order represents '3' with '4074'
-4072 4074 0
c Var 'aux1005' direct represents '3' with '4075'
4072 -4074 4075 0
-4075 4074 0
-4075 -4072 0
c Var 'aux1005' direct represents '4' with '-4074'
4069 4071 4073 4075 -4074 0
c Encoding variable: aux1006 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4076'
c Var 'aux1006' direct represents '0' with '4076'
c Var 'aux1006' order represents '1' with '4077'
-4076 4077 0
c Var 'aux1006' direct represents '1' with '4078'
4076 -4077 4078 0
-4078 4077 0
-4078 -4076 0
c Var 'aux1006' direct represents '2' with '-4077'
4076 4078 -4077 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4079'
c Var 'aux1007' direct represents '0' with '4079'
c Var 'aux1007' order represents '1' with '4080'
-4079 4080 0
c Var 'aux1007' direct represents '1' with '4081'
4079 -4080 4081 0
-4081 4080 0
-4081 -4079 0
c Var 'aux1007' direct represents '2' with '-4080'
4079 4081 -4080 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4082'
c Var 'aux1008' direct represents '0' with '4082'
c Var 'aux1008' order represents '1' with '4083'
-4082 4083 0
c Var 'aux1008' direct represents '1' with '4084'
4082 -4083 4084 0
-4084 4083 0
-4084 -4082 0
c Var 'aux1008' direct represents '2' with '-4083'
4082 4084 -4083 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4085'
c Var 'aux1009' direct represents '0' with '4085'
c Var 'aux1009' order represents '1' with '4086'
-4085 4086 0
c Var 'aux1009' direct represents '1' with '4087'
4085 -4086 4087 0
-4087 4086 0
-4087 -4085 0
c Var 'aux1009' direct represents '2' with '-4086'
4085 4087 -4086 0
c Encoding variable: aux1010 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux1009))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4088'
c Var 'aux1010' direct represents '0' with '4088'
c Var 'aux1010' order represents '1' with '4089'
-4088 4089 0
c Var 'aux1010' direct represents '1' with '4090'
4088 -4089 4090 0
-4090 4089 0
-4090 -4088 0
c Var 'aux1010' order represents '2' with '4091'
-4089 4091 0
c Var 'aux1010' direct represents '2' with '4092'
4089 -4091 4092 0
-4092 4091 0
-4092 -4089 0
c Var 'aux1010' direct represents '3' with '-4091'
4088 4090 4092 -4091 0
c Encoding variable: aux1011 with domain: int(0..4) (representing constraint (aux1006 + aux1008))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4093'
c Var 'aux1011' direct represents '0' with '4093'
c Var 'aux1011' order represents '1' with '4094'
-4093 4094 0
c Var 'aux1011' direct represents '1' with '4095'
4093 -4094 4095 0
-4095 4094 0
-4095 -4093 0
c Var 'aux1011' order represents '2' with '4096'
-4094 4096 0
c Var 'aux1011' direct represents '2' with '4097'
4094 -4096 4097 0
-4097 4096 0
-4097 -4094 0
c Var 'aux1011' order represents '3' with '4098'
-4096 4098 0
c Var 'aux1011' direct represents '3' with '4099'
4096 -4098 4099 0
-4099 4098 0
-4099 -4096 0
c Var 'aux1011' direct represents '4' with '-4098'
4093 4095 4097 4099 -4098 0
c Encoding variable: aux1012 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4100'
c Var 'aux1012' direct represents '0' with '4100'
c Var 'aux1012' order represents '1' with '4101'
-4100 4101 0
c Var 'aux1012' direct represents '1' with '4102'
4100 -4101 4102 0
-4102 4101 0
-4102 -4100 0
c Var 'aux1012' direct represents '2' with '-4101'
4100 4102 -4101 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4103'
c Var 'aux1013' direct represents '0' with '4103'
c Var 'aux1013' order represents '1' with '4104'
-4103 4104 0
c Var 'aux1013' direct represents '1' with '4105'
4103 -4104 4105 0
-4105 4104 0
-4105 -4103 0
c Var 'aux1013' direct represents '2' with '-4104'
4103 4105 -4104 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4106'
c Var 'aux1014' direct represents '0' with '4106'
c Var 'aux1014' order represents '1' with '4107'
-4106 4107 0
c Var 'aux1014' direct represents '1' with '4108'
4106 -4107 4108 0
-4108 4107 0
-4108 -4106 0
c Var 'aux1014' direct represents '2' with '-4107'
4106 4108 -4107 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4109'
c Var 'aux1015' direct represents '0' with '4109'
c Var 'aux1015' order represents '1' with '4110'
-4109 4110 0
c Var 'aux1015' direct represents '1' with '4111'
4109 -4110 4111 0
-4111 4110 0
-4111 -4109 0
c Var 'aux1015' direct represents '2' with '-4110'
4109 4111 -4110 0
c Encoding variable: aux1016 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1015))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4112'
c Var 'aux1016' direct represents '0' with '4112'
c Var 'aux1016' order represents '1' with '4113'
-4112 4113 0
c Var 'aux1016' direct represents '1' with '4114'
4112 -4113 4114 0
-4114 4113 0
-4114 -4112 0
c Var 'aux1016' order represents '2' with '4115'
-4113 4115 0
c Var 'aux1016' direct represents '2' with '4116'
4113 -4115 4116 0
-4116 4115 0
-4116 -4113 0
c Var 'aux1016' direct represents '3' with '-4115'
4112 4114 4116 -4115 0
c Encoding variable: aux1017 with domain: int(0..4) (representing constraint (aux1012 + aux1014))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4117'
c Var 'aux1017' direct represents '0' with '4117'
c Var 'aux1017' order represents '1' with '4118'
-4117 4118 0
c Var 'aux1017' direct represents '1' with '4119'
4117 -4118 4119 0
-4119 4118 0
-4119 -4117 0
c Var 'aux1017' order represents '2' with '4120'
-4118 4120 0
c Var 'aux1017' direct represents '2' with '4121'
4118 -4120 4121 0
-4121 4120 0
-4121 -4118 0
c Var 'aux1017' order represents '3' with '4122'
-4120 4122 0
c Var 'aux1017' direct represents '3' with '4123'
4120 -4122 4123 0
-4123 4122 0
-4123 -4120 0
c Var 'aux1017' direct represents '4' with '-4122'
4117 4119 4121 4123 -4122 0
c Encoding variable: aux1018 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4124'
c Var 'aux1018' direct represents '0' with '4124'
c Var 'aux1018' order represents '1' with '4125'
-4124 4125 0
c Var 'aux1018' direct represents '1' with '4126'
4124 -4125 4126 0
-4126 4125 0
-4126 -4124 0
c Var 'aux1018' direct represents '2' with '-4125'
4124 4126 -4125 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4127'
c Var 'aux1019' direct represents '0' with '4127'
c Var 'aux1019' order represents '1' with '4128'
-4127 4128 0
c Var 'aux1019' direct represents '1' with '4129'
4127 -4128 4129 0
-4129 4128 0
-4129 -4127 0
c Var 'aux1019' direct represents '2' with '-4128'
4127 4129 -4128 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4130'
c Var 'aux1020' direct represents '0' with '4130'
c Var 'aux1020' order represents '1' with '4131'
-4130 4131 0
c Var 'aux1020' direct represents '1' with '4132'
4130 -4131 4132 0
-4132 4131 0
-4132 -4130 0
c Var 'aux1020' direct represents '2' with '-4131'
4130 4132 -4131 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4133'
c Var 'aux1021' direct represents '0' with '4133'
c Var 'aux1021' order represents '1' with '4134'
-4133 4134 0
c Var 'aux1021' direct represents '1' with '4135'
4133 -4134 4135 0
-4135 4134 0
-4135 -4133 0
c Var 'aux1021' direct represents '2' with '-4134'
4133 4135 -4134 0
c Encoding variable: aux1022 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1021))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4136'
c Var 'aux1022' direct represents '0' with '4136'
c Var 'aux1022' order represents '1' with '4137'
-4136 4137 0
c Var 'aux1022' direct represents '1' with '4138'
4136 -4137 4138 0
-4138 4137 0
-4138 -4136 0
c Var 'aux1022' order represents '2' with '4139'
-4137 4139 0
c Var 'aux1022' direct represents '2' with '4140'
4137 -4139 4140 0
-4140 4139 0
-4140 -4137 0
c Var 'aux1022' direct represents '3' with '-4139'
4136 4138 4140 -4139 0
c Encoding variable: aux1023 with domain: int(0..4) (representing constraint (aux1018 + aux1020))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4141'
c Var 'aux1023' direct represents '0' with '4141'
c Var 'aux1023' order represents '1' with '4142'
-4141 4142 0
c Var 'aux1023' direct represents '1' with '4143'
4141 -4142 4143 0
-4143 4142 0
-4143 -4141 0
c Var 'aux1023' order represents '2' with '4144'
-4142 4144 0
c Var 'aux1023' direct represents '2' with '4145'
4142 -4144 4145 0
-4145 4144 0
-4145 -4142 0
c Var 'aux1023' order represents '3' with '4146'
-4144 4146 0
c Var 'aux1023' direct represents '3' with '4147'
4144 -4146 4147 0
-4147 4146 0
-4147 -4144 0
c Var 'aux1023' direct represents '4' with '-4146'
4141 4143 4145 4147 -4146 0
c Encoding variable: aux1024 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4148'
c Var 'aux1024' direct represents '0' with '4148'
c Var 'aux1024' order represents '1' with '4149'
-4148 4149 0
c Var 'aux1024' direct represents '1' with '4150'
4148 -4149 4150 0
-4150 4149 0
-4150 -4148 0
c Var 'aux1024' direct represents '2' with '-4149'
4148 4150 -4149 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4151'
c Var 'aux1025' direct represents '0' with '4151'
c Var 'aux1025' order represents '1' with '4152'
-4151 4152 0
c Var 'aux1025' direct represents '1' with '4153'
4151 -4152 4153 0
-4153 4152 0
-4153 -4151 0
c Var 'aux1025' direct represents '2' with '-4152'
4151 4153 -4152 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4154'
c Var 'aux1026' direct represents '0' with '4154'
c Var 'aux1026' order represents '1' with '4155'
-4154 4155 0
c Var 'aux1026' direct represents '1' with '4156'
4154 -4155 4156 0
-4156 4155 0
-4156 -4154 0
c Var 'aux1026' direct represents '2' with '-4155'
4154 4156 -4155 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4157'
c Var 'aux1027' direct represents '0' with '4157'
c Var 'aux1027' order represents '1' with '4158'
-4157 4158 0
c Var 'aux1027' direct represents '1' with '4159'
4157 -4158 4159 0
-4159 4158 0
-4159 -4157 0
c Var 'aux1027' direct represents '2' with '-4158'
4157 4159 -4158 0
c Encoding variable: aux1028 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1027))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4160'
c Var 'aux1028' direct represents '0' with '4160'
c Var 'aux1028' order represents '1' with '4161'
-4160 4161 0
c Var 'aux1028' direct represents '1' with '4162'
4160 -4161 4162 0
-4162 4161 0
-4162 -4160 0
c Var 'aux1028' order represents '2' with '4163'
-4161 4163 0
c Var 'aux1028' direct represents '2' with '4164'
4161 -4163 4164 0
-4164 4163 0
-4164 -4161 0
c Var 'aux1028' direct represents '3' with '-4163'
4160 4162 4164 -4163 0
c Encoding variable: aux1029 with domain: int(0..4) (representing constraint (aux1024 + aux1026))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4165'
c Var 'aux1029' direct represents '0' with '4165'
c Var 'aux1029' order represents '1' with '4166'
-4165 4166 0
c Var 'aux1029' direct represents '1' with '4167'
4165 -4166 4167 0
-4167 4166 0
-4167 -4165 0
c Var 'aux1029' order represents '2' with '4168'
-4166 4168 0
c Var 'aux1029' direct represents '2' with '4169'
4166 -4168 4169 0
-4169 4168 0
-4169 -4166 0
c Var 'aux1029' order represents '3' with '4170'
-4168 4170 0
c Var 'aux1029' direct represents '3' with '4171'
4168 -4170 4171 0
-4171 4170 0
-4171 -4168 0
c Var 'aux1029' direct represents '4' with '-4170'
4165 4167 4169 4171 -4170 0
c Encoding variable: aux1030 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4172'
c Var 'aux1030' direct represents '0' with '4172'
c Var 'aux1030' order represents '1' with '4173'
-4172 4173 0
c Var 'aux1030' direct represents '1' with '4174'
4172 -4173 4174 0
-4174 4173 0
-4174 -4172 0
c Var 'aux1030' direct represents '2' with '-4173'
4172 4174 -4173 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4175'
c Var 'aux1031' direct represents '0' with '4175'
c Var 'aux1031' order represents '1' with '4176'
-4175 4176 0
c Var 'aux1031' direct represents '1' with '4177'
4175 -4176 4177 0
-4177 4176 0
-4177 -4175 0
c Var 'aux1031' direct represents '2' with '-4176'
4175 4177 -4176 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4178'
c Var 'aux1032' direct represents '0' with '4178'
c Var 'aux1032' order represents '1' with '4179'
-4178 4179 0
c Var 'aux1032' direct represents '1' with '4180'
4178 -4179 4180 0
-4180 4179 0
-4180 -4178 0
c Var 'aux1032' direct represents '2' with '-4179'
4178 4180 -4179 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4181'
c Var 'aux1033' direct represents '0' with '4181'
c Var 'aux1033' order represents '1' with '4182'
-4181 4182 0
c Var 'aux1033' direct represents '1' with '4183'
4181 -4182 4183 0
-4183 4182 0
-4183 -4181 0
c Var 'aux1033' direct represents '2' with '-4182'
4181 4183 -4182 0
c Encoding variable: aux1034 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1033))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4184'
c Var 'aux1034' direct represents '0' with '4184'
c Var 'aux1034' order represents '1' with '4185'
-4184 4185 0
c Var 'aux1034' direct represents '1' with '4186'
4184 -4185 4186 0
-4186 4185 0
-4186 -4184 0
c Var 'aux1034' order represents '2' with '4187'
-4185 4187 0
c Var 'aux1034' direct represents '2' with '4188'
4185 -4187 4188 0
-4188 4187 0
-4188 -4185 0
c Var 'aux1034' direct represents '3' with '-4187'
4184 4186 4188 -4187 0
c Encoding variable: aux1035 with domain: int(0..4) (representing constraint (aux1030 + aux1032))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4189'
c Var 'aux1035' direct represents '0' with '4189'
c Var 'aux1035' order represents '1' with '4190'
-4189 4190 0
c Var 'aux1035' direct represents '1' with '4191'
4189 -4190 4191 0
-4191 4190 0
-4191 -4189 0
c Var 'aux1035' order represents '2' with '4192'
-4190 4192 0
c Var 'aux1035' direct represents '2' with '4193'
4190 -4192 4193 0
-4193 4192 0
-4193 -4190 0
c Var 'aux1035' order represents '3' with '4194'
-4192 4194 0
c Var 'aux1035' direct represents '3' with '4195'
4192 -4194 4195 0
-4195 4194 0
-4195 -4192 0
c Var 'aux1035' direct represents '4' with '-4194'
4189 4191 4193 4195 -4194 0
c Encoding variable: aux1036 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4196'
c Var 'aux1036' direct represents '0' with '4196'
c Var 'aux1036' order represents '1' with '4197'
-4196 4197 0
c Var 'aux1036' direct represents '1' with '4198'
4196 -4197 4198 0
-4198 4197 0
-4198 -4196 0
c Var 'aux1036' direct represents '2' with '-4197'
4196 4198 -4197 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4199'
c Var 'aux1037' direct represents '0' with '4199'
c Var 'aux1037' order represents '1' with '4200'
-4199 4200 0
c Var 'aux1037' direct represents '1' with '4201'
4199 -4200 4201 0
-4201 4200 0
-4201 -4199 0
c Var 'aux1037' direct represents '2' with '-4200'
4199 4201 -4200 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4202'
c Var 'aux1038' direct represents '0' with '4202'
c Var 'aux1038' order represents '1' with '4203'
-4202 4203 0
c Var 'aux1038' direct represents '1' with '4204'
4202 -4203 4204 0
-4204 4203 0
-4204 -4202 0
c Var 'aux1038' direct represents '2' with '-4203'
4202 4204 -4203 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4205'
c Var 'aux1039' direct represents '0' with '4205'
c Var 'aux1039' order represents '1' with '4206'
-4205 4206 0
c Var 'aux1039' direct represents '1' with '4207'
4205 -4206 4207 0
-4207 4206 0
-4207 -4205 0
c Var 'aux1039' direct represents '2' with '-4206'
4205 4207 -4206 0
c Encoding variable: aux1040 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1039))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4208'
c Var 'aux1040' direct represents '0' with '4208'
c Var 'aux1040' order represents '1' with '4209'
-4208 4209 0
c Var 'aux1040' direct represents '1' with '4210'
4208 -4209 4210 0
-4210 4209 0
-4210 -4208 0
c Var 'aux1040' order represents '2' with '4211'
-4209 4211 0
c Var 'aux1040' direct represents '2' with '4212'
4209 -4211 4212 0
-4212 4211 0
-4212 -4209 0
c Var 'aux1040' direct represents '3' with '-4211'
4208 4210 4212 -4211 0
c Encoding variable: aux1041 with domain: int(0..4) (representing constraint (aux1036 + aux1038))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4213'
c Var 'aux1041' direct represents '0' with '4213'
c Var 'aux1041' order represents '1' with '4214'
-4213 4214 0
c Var 'aux1041' direct represents '1' with '4215'
4213 -4214 4215 0
-4215 4214 0
-4215 -4213 0
c Var 'aux1041' order represents '2' with '4216'
-4214 4216 0
c Var 'aux1041' direct represents '2' with '4217'
4214 -4216 4217 0
-4217 4216 0
-4217 -4214 0
c Var 'aux1041' order represents '3' with '4218'
-4216 4218 0
c Var 'aux1041' direct represents '3' with '4219'
4216 -4218 4219 0
-4219 4218 0
-4219 -4216 0
c Var 'aux1041' direct represents '4' with '-4218'
4213 4215 4217 4219 -4218 0
c Encoding variable: aux1042 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4220'
c Var 'aux1042' direct represents '0' with '4220'
c Var 'aux1042' order represents '1' with '4221'
-4220 4221 0
c Var 'aux1042' direct represents '1' with '4222'
4220 -4221 4222 0
-4222 4221 0
-4222 -4220 0
c Var 'aux1042' direct represents '2' with '-4221'
4220 4222 -4221 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4223'
c Var 'aux1043' direct represents '0' with '4223'
c Var 'aux1043' order represents '1' with '4224'
-4223 4224 0
c Var 'aux1043' direct represents '1' with '4225'
4223 -4224 4225 0
-4225 4224 0
-4225 -4223 0
c Var 'aux1043' direct represents '2' with '-4224'
4223 4225 -4224 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4226'
c Var 'aux1044' direct represents '0' with '4226'
c Var 'aux1044' order represents '1' with '4227'
-4226 4227 0
c Var 'aux1044' direct represents '1' with '4228'
4226 -4227 4228 0
-4228 4227 0
-4228 -4226 0
c Var 'aux1044' direct represents '2' with '-4227'
4226 4228 -4227 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4229'
c Var 'aux1045' direct represents '0' with '4229'
c Var 'aux1045' order represents '1' with '4230'
-4229 4230 0
c Var 'aux1045' direct represents '1' with '4231'
4229 -4230 4231 0
-4231 4230 0
-4231 -4229 0
c Var 'aux1045' direct represents '2' with '-4230'
4229 4231 -4230 0
c Encoding variable: aux1046 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1045))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4232'
c Var 'aux1046' direct represents '0' with '4232'
c Var 'aux1046' order represents '1' with '4233'
-4232 4233 0
c Var 'aux1046' direct represents '1' with '4234'
4232 -4233 4234 0
-4234 4233 0
-4234 -4232 0
c Var 'aux1046' order represents '2' with '4235'
-4233 4235 0
c Var 'aux1046' direct represents '2' with '4236'
4233 -4235 4236 0
-4236 4235 0
-4236 -4233 0
c Var 'aux1046' direct represents '3' with '-4235'
4232 4234 4236 -4235 0
c Encoding variable: aux1047 with domain: int(0..4) (representing constraint (aux1042 + aux1044))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4237'
c Var 'aux1047' direct represents '0' with '4237'
c Var 'aux1047' order represents '1' with '4238'
-4237 4238 0
c Var 'aux1047' direct represents '1' with '4239'
4237 -4238 4239 0
-4239 4238 0
-4239 -4237 0
c Var 'aux1047' order represents '2' with '4240'
-4238 4240 0
c Var 'aux1047' direct represents '2' with '4241'
4238 -4240 4241 0
-4241 4240 0
-4241 -4238 0
c Var 'aux1047' order represents '3' with '4242'
-4240 4242 0
c Var 'aux1047' direct represents '3' with '4243'
4240 -4242 4243 0
-4243 4242 0
-4243 -4240 0
c Var 'aux1047' direct represents '4' with '-4242'
4237 4239 4241 4243 -4242 0
c Encoding variable: aux1048 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4244'
c Var 'aux1048' direct represents '0' with '4244'
c Var 'aux1048' order represents '1' with '4245'
-4244 4245 0
c Var 'aux1048' direct represents '1' with '4246'
4244 -4245 4246 0
-4246 4245 0
-4246 -4244 0
c Var 'aux1048' direct represents '2' with '-4245'
4244 4246 -4245 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4247'
c Var 'aux1049' direct represents '0' with '4247'
c Var 'aux1049' order represents '1' with '4248'
-4247 4248 0
c Var 'aux1049' direct represents '1' with '4249'
4247 -4248 4249 0
-4249 4248 0
-4249 -4247 0
c Var 'aux1049' direct represents '2' with '-4248'
4247 4249 -4248 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4250'
c Var 'aux1050' direct represents '0' with '4250'
c Var 'aux1050' order represents '1' with '4251'
-4250 4251 0
c Var 'aux1050' direct represents '1' with '4252'
4250 -4251 4252 0
-4252 4251 0
-4252 -4250 0
c Var 'aux1050' direct represents '2' with '-4251'
4250 4252 -4251 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4253'
c Var 'aux1051' direct represents '0' with '4253'
c Var 'aux1051' order represents '1' with '4254'
-4253 4254 0
c Var 'aux1051' direct represents '1' with '4255'
4253 -4254 4255 0
-4255 4254 0
-4255 -4253 0
c Var 'aux1051' direct represents '2' with '-4254'
4253 4255 -4254 0
c Encoding variable: aux1052 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1051))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4256'
c Var 'aux1052' direct represents '0' with '4256'
c Var 'aux1052' order represents '1' with '4257'
-4256 4257 0
c Var 'aux1052' direct represents '1' with '4258'
4256 -4257 4258 0
-4258 4257 0
-4258 -4256 0
c Var 'aux1052' order represents '2' with '4259'
-4257 4259 0
c Var 'aux1052' direct represents '2' with '4260'
4257 -4259 4260 0
-4260 4259 0
-4260 -4257 0
c Var 'aux1052' direct represents '3' with '-4259'
4256 4258 4260 -4259 0
c Encoding variable: aux1053 with domain: int(0..4) (representing constraint (aux1048 + aux1050))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4261'
c Var 'aux1053' direct represents '0' with '4261'
c Var 'aux1053' order represents '1' with '4262'
-4261 4262 0
c Var 'aux1053' direct represents '1' with '4263'
4261 -4262 4263 0
-4263 4262 0
-4263 -4261 0
c Var 'aux1053' order represents '2' with '4264'
-4262 4264 0
c Var 'aux1053' direct represents '2' with '4265'
4262 -4264 4265 0
-4265 4264 0
-4265 -4262 0
c Var 'aux1053' order represents '3' with '4266'
-4264 4266 0
c Var 'aux1053' direct represents '3' with '4267'
4264 -4266 4267 0
-4267 4266 0
-4267 -4264 0
c Var 'aux1053' direct represents '4' with '-4266'
4261 4263 4265 4267 -4266 0
c Encoding variable: aux1054 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4268'
c Var 'aux1054' direct represents '0' with '4268'
c Var 'aux1054' order represents '1' with '4269'
-4268 4269 0
c Var 'aux1054' direct represents '1' with '4270'
4268 -4269 4270 0
-4270 4269 0
-4270 -4268 0
c Var 'aux1054' direct represents '2' with '-4269'
4268 4270 -4269 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4271'
c Var 'aux1055' direct represents '0' with '4271'
c Var 'aux1055' order represents '1' with '4272'
-4271 4272 0
c Var 'aux1055' direct represents '1' with '4273'
4271 -4272 4273 0
-4273 4272 0
-4273 -4271 0
c Var 'aux1055' direct represents '2' with '-4272'
4271 4273 -4272 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4274'
c Var 'aux1056' direct represents '0' with '4274'
c Var 'aux1056' order represents '1' with '4275'
-4274 4275 0
c Var 'aux1056' direct represents '1' with '4276'
4274 -4275 4276 0
-4276 4275 0
-4276 -4274 0
c Var 'aux1056' direct represents '2' with '-4275'
4274 4276 -4275 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4277'
c Var 'aux1057' direct represents '0' with '4277'
c Var 'aux1057' order represents '1' with '4278'
-4277 4278 0
c Var 'aux1057' direct represents '1' with '4279'
4277 -4278 4279 0
-4279 4278 0
-4279 -4277 0
c Var 'aux1057' direct represents '2' with '-4278'
4277 4279 -4278 0
c Encoding variable: aux1058 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1057))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4280'
c Var 'aux1058' direct represents '0' with '4280'
c Var 'aux1058' order represents '1' with '4281'
-4280 4281 0
c Var 'aux1058' direct represents '1' with '4282'
4280 -4281 4282 0
-4282 4281 0
-4282 -4280 0
c Var 'aux1058' order represents '2' with '4283'
-4281 4283 0
c Var 'aux1058' direct represents '2' with '4284'
4281 -4283 4284 0
-4284 4283 0
-4284 -4281 0
c Var 'aux1058' direct represents '3' with '-4283'
4280 4282 4284 -4283 0
c Encoding variable: aux1059 with domain: int(0..4) (representing constraint (aux1054 + aux1056))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4285'
c Var 'aux1059' direct represents '0' with '4285'
c Var 'aux1059' order represents '1' with '4286'
-4285 4286 0
c Var 'aux1059' direct represents '1' with '4287'
4285 -4286 4287 0
-4287 4286 0
-4287 -4285 0
c Var 'aux1059' order represents '2' with '4288'
-4286 4288 0
c Var 'aux1059' direct represents '2' with '4289'
4286 -4288 4289 0
-4289 4288 0
-4289 -4286 0
c Var 'aux1059' order represents '3' with '4290'
-4288 4290 0
c Var 'aux1059' direct represents '3' with '4291'
4288 -4290 4291 0
-4291 4290 0
-4291 -4288 0
c Var 'aux1059' direct represents '4' with '-4290'
4285 4287 4289 4291 -4290 0
c Encoding variable: aux1060 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4292'
c Var 'aux1060' direct represents '0' with '4292'
c Var 'aux1060' order represents '1' with '4293'
-4292 4293 0
c Var 'aux1060' direct represents '1' with '4294'
4292 -4293 4294 0
-4294 4293 0
-4294 -4292 0
c Var 'aux1060' direct represents '2' with '-4293'
4292 4294 -4293 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4295'
c Var 'aux1061' direct represents '0' with '4295'
c Var 'aux1061' order represents '1' with '4296'
-4295 4296 0
c Var 'aux1061' direct represents '1' with '4297'
4295 -4296 4297 0
-4297 4296 0
-4297 -4295 0
c Var 'aux1061' direct represents '2' with '-4296'
4295 4297 -4296 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4298'
c Var 'aux1062' direct represents '0' with '4298'
c Var 'aux1062' order represents '1' with '4299'
-4298 4299 0
c Var 'aux1062' direct represents '1' with '4300'
4298 -4299 4300 0
-4300 4299 0
-4300 -4298 0
c Var 'aux1062' direct represents '2' with '-4299'
4298 4300 -4299 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4301'
c Var 'aux1063' direct represents '0' with '4301'
c Var 'aux1063' order represents '1' with '4302'
-4301 4302 0
c Var 'aux1063' direct represents '1' with '4303'
4301 -4302 4303 0
-4303 4302 0
-4303 -4301 0
c Var 'aux1063' direct represents '2' with '-4302'
4301 4303 -4302 0
c Encoding variable: aux1064 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1063))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4304'
c Var 'aux1064' direct represents '0' with '4304'
c Var 'aux1064' order represents '1' with '4305'
-4304 4305 0
c Var 'aux1064' direct represents '1' with '4306'
4304 -4305 4306 0
-4306 4305 0
-4306 -4304 0
c Var 'aux1064' order represents '2' with '4307'
-4305 4307 0
c Var 'aux1064' direct represents '2' with '4308'
4305 -4307 4308 0
-4308 4307 0
-4308 -4305 0
c Var 'aux1064' direct represents '3' with '-4307'
4304 4306 4308 -4307 0
c Encoding variable: aux1065 with domain: int(0..4) (representing constraint (aux1060 + aux1062))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4309'
c Var 'aux1065' direct represents '0' with '4309'
c Var 'aux1065' order represents '1' with '4310'
-4309 4310 0
c Var 'aux1065' direct represents '1' with '4311'
4309 -4310 4311 0
-4311 4310 0
-4311 -4309 0
c Var 'aux1065' order represents '2' with '4312'
-4310 4312 0
c Var 'aux1065' direct represents '2' with '4313'
4310 -4312 4313 0
-4313 4312 0
-4313 -4310 0
c Var 'aux1065' order represents '3' with '4314'
-4312 4314 0
c Var 'aux1065' direct represents '3' with '4315'
4312 -4314 4315 0
-4315 4314 0
-4315 -4312 0
c Var 'aux1065' direct represents '4' with '-4314'
4309 4311 4313 4315 -4314 0
c Encoding variable: aux1066 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4316'
c Var 'aux1066' direct represents '0' with '4316'
c Var 'aux1066' order represents '1' with '4317'
-4316 4317 0
c Var 'aux1066' direct represents '1' with '4318'
4316 -4317 4318 0
-4318 4317 0
-4318 -4316 0
c Var 'aux1066' direct represents '2' with '-4317'
4316 4318 -4317 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4319'
c Var 'aux1067' direct represents '0' with '4319'
c Var 'aux1067' order represents '1' with '4320'
-4319 4320 0
c Var 'aux1067' direct represents '1' with '4321'
4319 -4320 4321 0
-4321 4320 0
-4321 -4319 0
c Var 'aux1067' direct represents '2' with '-4320'
4319 4321 -4320 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4322'
c Var 'aux1068' direct represents '0' with '4322'
c Var 'aux1068' order represents '1' with '4323'
-4322 4323 0
c Var 'aux1068' direct represents '1' with '4324'
4322 -4323 4324 0
-4324 4323 0
-4324 -4322 0
c Var 'aux1068' direct represents '2' with '-4323'
4322 4324 -4323 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4325'
c Var 'aux1069' direct represents '0' with '4325'
c Var 'aux1069' order represents '1' with '4326'
-4325 4326 0
c Var 'aux1069' direct represents '1' with '4327'
4325 -4326 4327 0
-4327 4326 0
-4327 -4325 0
c Var 'aux1069' direct represents '2' with '-4326'
4325 4327 -4326 0
c Encoding variable: aux1070 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1069))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4328'
c Var 'aux1070' direct represents '0' with '4328'
c Var 'aux1070' order represents '1' with '4329'
-4328 4329 0
c Var 'aux1070' direct represents '1' with '4330'
4328 -4329 4330 0
-4330 4329 0
-4330 -4328 0
c Var 'aux1070' order represents '2' with '4331'
-4329 4331 0
c Var 'aux1070' direct represents '2' with '4332'
4329 -4331 4332 0
-4332 4331 0
-4332 -4329 0
c Var 'aux1070' direct represents '3' with '-4331'
4328 4330 4332 -4331 0
c Encoding variable: aux1071 with domain: int(0..4) (representing constraint (aux1066 + aux1068))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4333'
c Var 'aux1071' direct represents '0' with '4333'
c Var 'aux1071' order represents '1' with '4334'
-4333 4334 0
c Var 'aux1071' direct represents '1' with '4335'
4333 -4334 4335 0
-4335 4334 0
-4335 -4333 0
c Var 'aux1071' order represents '2' with '4336'
-4334 4336 0
c Var 'aux1071' direct represents '2' with '4337'
4334 -4336 4337 0
-4337 4336 0
-4337 -4334 0
c Var 'aux1071' order represents '3' with '4338'
-4336 4338 0
c Var 'aux1071' direct represents '3' with '4339'
4336 -4338 4339 0
-4339 4338 0
-4339 -4336 0
c Var 'aux1071' direct represents '4' with '-4338'
4333 4335 4337 4339 -4338 0
c Encoding variable: aux1072 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4340'
c Var 'aux1072' direct represents '0' with '4340'
c Var 'aux1072' order represents '1' with '4341'
-4340 4341 0
c Var 'aux1072' direct represents '1' with '4342'
4340 -4341 4342 0
-4342 4341 0
-4342 -4340 0
c Var 'aux1072' direct represents '2' with '-4341'
4340 4342 -4341 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4343'
c Var 'aux1073' direct represents '0' with '4343'
c Var 'aux1073' order represents '1' with '4344'
-4343 4344 0
c Var 'aux1073' direct represents '1' with '4345'
4343 -4344 4345 0
-4345 4344 0
-4345 -4343 0
c Var 'aux1073' direct represents '2' with '-4344'
4343 4345 -4344 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4346'
c Var 'aux1074' direct represents '0' with '4346'
c Var 'aux1074' order represents '1' with '4347'
-4346 4347 0
c Var 'aux1074' direct represents '1' with '4348'
4346 -4347 4348 0
-4348 4347 0
-4348 -4346 0
c Var 'aux1074' direct represents '2' with '-4347'
4346 4348 -4347 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4349'
c Var 'aux1075' direct represents '0' with '4349'
c Var 'aux1075' order represents '1' with '4350'
-4349 4350 0
c Var 'aux1075' direct represents '1' with '4351'
4349 -4350 4351 0
-4351 4350 0
-4351 -4349 0
c Var 'aux1075' direct represents '2' with '-4350'
4349 4351 -4350 0
c Encoding variable: aux1076 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1075))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4352'
c Var 'aux1076' direct represents '0' with '4352'
c Var 'aux1076' order represents '1' with '4353'
-4352 4353 0
c Var 'aux1076' direct represents '1' with '4354'
4352 -4353 4354 0
-4354 4353 0
-4354 -4352 0
c Var 'aux1076' order represents '2' with '4355'
-4353 4355 0
c Var 'aux1076' direct represents '2' with '4356'
4353 -4355 4356 0
-4356 4355 0
-4356 -4353 0
c Var 'aux1076' direct represents '3' with '-4355'
4352 4354 4356 -4355 0
c Encoding variable: aux1077 with domain: int(0..4) (representing constraint (aux1072 + aux1074))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4357'
c Var 'aux1077' direct represents '0' with '4357'
c Var 'aux1077' order represents '1' with '4358'
-4357 4358 0
c Var 'aux1077' direct represents '1' with '4359'
4357 -4358 4359 0
-4359 4358 0
-4359 -4357 0
c Var 'aux1077' order represents '2' with '4360'
-4358 4360 0
c Var 'aux1077' direct represents '2' with '4361'
4358 -4360 4361 0
-4361 4360 0
-4361 -4358 0
c Var 'aux1077' order represents '3' with '4362'
-4360 4362 0
c Var 'aux1077' direct represents '3' with '4363'
4360 -4362 4363 0
-4363 4362 0
-4363 -4360 0
c Var 'aux1077' direct represents '4' with '-4362'
4357 4359 4361 4363 -4362 0
c Encoding variable: aux1078 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4364'
c Var 'aux1078' direct represents '0' with '4364'
c Var 'aux1078' order represents '1' with '4365'
-4364 4365 0
c Var 'aux1078' direct represents '1' with '4366'
4364 -4365 4366 0
-4366 4365 0
-4366 -4364 0
c Var 'aux1078' direct represents '2' with '-4365'
4364 4366 -4365 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4367'
c Var 'aux1079' direct represents '0' with '4367'
c Var 'aux1079' order represents '1' with '4368'
-4367 4368 0
c Var 'aux1079' direct represents '1' with '4369'
4367 -4368 4369 0
-4369 4368 0
-4369 -4367 0
c Var 'aux1079' direct represents '2' with '-4368'
4367 4369 -4368 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4370'
c Var 'aux1080' direct represents '0' with '4370'
c Var 'aux1080' order represents '1' with '4371'
-4370 4371 0
c Var 'aux1080' direct represents '1' with '4372'
4370 -4371 4372 0
-4372 4371 0
-4372 -4370 0
c Var 'aux1080' direct represents '2' with '-4371'
4370 4372 -4371 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4373'
c Var 'aux1081' direct represents '0' with '4373'
c Var 'aux1081' order represents '1' with '4374'
-4373 4374 0
c Var 'aux1081' direct represents '1' with '4375'
4373 -4374 4375 0
-4375 4374 0
-4375 -4373 0
c Var 'aux1081' direct represents '2' with '-4374'
4373 4375 -4374 0
c Encoding variable: aux1082 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1081))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4376'
c Var 'aux1082' direct represents '0' with '4376'
c Var 'aux1082' order represents '1' with '4377'
-4376 4377 0
c Var 'aux1082' direct represents '1' with '4378'
4376 -4377 4378 0
-4378 4377 0
-4378 -4376 0
c Var 'aux1082' order represents '2' with '4379'
-4377 4379 0
c Var 'aux1082' direct represents '2' with '4380'
4377 -4379 4380 0
-4380 4379 0
-4380 -4377 0
c Var 'aux1082' direct represents '3' with '-4379'
4376 4378 4380 -4379 0
c Encoding variable: aux1083 with domain: int(0..4) (representing constraint (aux1078 + aux1080))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4381'
c Var 'aux1083' direct represents '0' with '4381'
c Var 'aux1083' order represents '1' with '4382'
-4381 4382 0
c Var 'aux1083' direct represents '1' with '4383'
4381 -4382 4383 0
-4383 4382 0
-4383 -4381 0
c Var 'aux1083' order represents '2' with '4384'
-4382 4384 0
c Var 'aux1083' direct represents '2' with '4385'
4382 -4384 4385 0
-4385 4384 0
-4385 -4382 0
c Var 'aux1083' order represents '3' with '4386'
-4384 4386 0
c Var 'aux1083' direct represents '3' with '4387'
4384 -4386 4387 0
-4387 4386 0
-4387 -4384 0
c Var 'aux1083' direct represents '4' with '-4386'
4381 4383 4385 4387 -4386 0
c Encoding variable: aux1084 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4388'
c Var 'aux1084' direct represents '0' with '4388'
c Var 'aux1084' order represents '1' with '4389'
-4388 4389 0
c Var 'aux1084' direct represents '1' with '4390'
4388 -4389 4390 0
-4390 4389 0
-4390 -4388 0
c Var 'aux1084' direct represents '2' with '-4389'
4388 4390 -4389 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4391'
c Var 'aux1085' direct represents '0' with '4391'
c Var 'aux1085' order represents '1' with '4392'
-4391 4392 0
c Var 'aux1085' direct represents '1' with '4393'
4391 -4392 4393 0
-4393 4392 0
-4393 -4391 0
c Var 'aux1085' direct represents '2' with '-4392'
4391 4393 -4392 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4394'
c Var 'aux1086' direct represents '0' with '4394'
c Var 'aux1086' order represents '1' with '4395'
-4394 4395 0
c Var 'aux1086' direct represents '1' with '4396'
4394 -4395 4396 0
-4396 4395 0
-4396 -4394 0
c Var 'aux1086' direct represents '2' with '-4395'
4394 4396 -4395 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4397'
c Var 'aux1087' direct represents '0' with '4397'
c Var 'aux1087' order represents '1' with '4398'
-4397 4398 0
c Var 'aux1087' direct represents '1' with '4399'
4397 -4398 4399 0
-4399 4398 0
-4399 -4397 0
c Var 'aux1087' direct represents '2' with '-4398'
4397 4399 -4398 0
c Encoding variable: aux1088 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1087))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4400'
c Var 'aux1088' direct represents '0' with '4400'
c Var 'aux1088' order represents '1' with '4401'
-4400 4401 0
c Var 'aux1088' direct represents '1' with '4402'
4400 -4401 4402 0
-4402 4401 0
-4402 -4400 0
c Var 'aux1088' order represents '2' with '4403'
-4401 4403 0
c Var 'aux1088' direct represents '2' with '4404'
4401 -4403 4404 0
-4404 4403 0
-4404 -4401 0
c Var 'aux1088' direct represents '3' with '-4403'
4400 4402 4404 -4403 0
c Encoding variable: aux1089 with domain: int(0..4) (representing constraint (aux1084 + aux1086))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4405'
c Var 'aux1089' direct represents '0' with '4405'
c Var 'aux1089' order represents '1' with '4406'
-4405 4406 0
c Var 'aux1089' direct represents '1' with '4407'
4405 -4406 4407 0
-4407 4406 0
-4407 -4405 0
c Var 'aux1089' order represents '2' with '4408'
-4406 4408 0
c Var 'aux1089' direct represents '2' with '4409'
4406 -4408 4409 0
-4409 4408 0
-4409 -4406 0
c Var 'aux1089' order represents '3' with '4410'
-4408 4410 0
c Var 'aux1089' direct represents '3' with '4411'
4408 -4410 4411 0
-4411 4410 0
-4411 -4408 0
c Var 'aux1089' direct represents '4' with '-4410'
4405 4407 4409 4411 -4410 0
c Encoding variable: aux1090 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4412'
c Var 'aux1090' direct represents '0' with '4412'
c Var 'aux1090' order represents '1' with '4413'
-4412 4413 0
c Var 'aux1090' direct represents '1' with '4414'
4412 -4413 4414 0
-4414 4413 0
-4414 -4412 0
c Var 'aux1090' direct represents '2' with '-4413'
4412 4414 -4413 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4415'
c Var 'aux1091' direct represents '0' with '4415'
c Var 'aux1091' order represents '1' with '4416'
-4415 4416 0
c Var 'aux1091' direct represents '1' with '4417'
4415 -4416 4417 0
-4417 4416 0
-4417 -4415 0
c Var 'aux1091' direct represents '2' with '-4416'
4415 4417 -4416 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4418'
c Var 'aux1092' direct represents '0' with '4418'
c Var 'aux1092' order represents '1' with '4419'
-4418 4419 0
c Var 'aux1092' direct represents '1' with '4420'
4418 -4419 4420 0
-4420 4419 0
-4420 -4418 0
c Var 'aux1092' direct represents '2' with '-4419'
4418 4420 -4419 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4421'
c Var 'aux1093' direct represents '0' with '4421'
c Var 'aux1093' order represents '1' with '4422'
-4421 4422 0
c Var 'aux1093' direct represents '1' with '4423'
4421 -4422 4423 0
-4423 4422 0
-4423 -4421 0
c Var 'aux1093' direct represents '2' with '-4422'
4421 4423 -4422 0
c Encoding variable: aux1094 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1093))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4424'
c Var 'aux1094' direct represents '0' with '4424'
c Var 'aux1094' order represents '1' with '4425'
-4424 4425 0
c Var 'aux1094' direct represents '1' with '4426'
4424 -4425 4426 0
-4426 4425 0
-4426 -4424 0
c Var 'aux1094' order represents '2' with '4427'
-4425 4427 0
c Var 'aux1094' direct represents '2' with '4428'
4425 -4427 4428 0
-4428 4427 0
-4428 -4425 0
c Var 'aux1094' direct represents '3' with '-4427'
4424 4426 4428 -4427 0
c Encoding variable: aux1095 with domain: int(0..4) (representing constraint (aux1090 + aux1092))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4429'
c Var 'aux1095' direct represents '0' with '4429'
c Var 'aux1095' order represents '1' with '4430'
-4429 4430 0
c Var 'aux1095' direct represents '1' with '4431'
4429 -4430 4431 0
-4431 4430 0
-4431 -4429 0
c Var 'aux1095' order represents '2' with '4432'
-4430 4432 0
c Var 'aux1095' direct represents '2' with '4433'
4430 -4432 4433 0
-4433 4432 0
-4433 -4430 0
c Var 'aux1095' order represents '3' with '4434'
-4432 4434 0
c Var 'aux1095' direct represents '3' with '4435'
4432 -4434 4435 0
-4435 4434 0
-4435 -4432 0
c Var 'aux1095' direct represents '4' with '-4434'
4429 4431 4433 4435 -4434 0
c Encoding variable: aux1096 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4436'
c Var 'aux1096' direct represents '0' with '4436'
c Var 'aux1096' order represents '1' with '4437'
-4436 4437 0
c Var 'aux1096' direct represents '1' with '4438'
4436 -4437 4438 0
-4438 4437 0
-4438 -4436 0
c Var 'aux1096' direct represents '2' with '-4437'
4436 4438 -4437 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4439'
c Var 'aux1097' direct represents '0' with '4439'
c Var 'aux1097' order represents '1' with '4440'
-4439 4440 0
c Var 'aux1097' direct represents '1' with '4441'
4439 -4440 4441 0
-4441 4440 0
-4441 -4439 0
c Var 'aux1097' direct represents '2' with '-4440'
4439 4441 -4440 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4442'
c Var 'aux1098' direct represents '0' with '4442'
c Var 'aux1098' order represents '1' with '4443'
-4442 4443 0
c Var 'aux1098' direct represents '1' with '4444'
4442 -4443 4444 0
-4444 4443 0
-4444 -4442 0
c Var 'aux1098' direct represents '2' with '-4443'
4442 4444 -4443 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4445'
c Var 'aux1099' direct represents '0' with '4445'
c Var 'aux1099' order represents '1' with '4446'
-4445 4446 0
c Var 'aux1099' direct represents '1' with '4447'
4445 -4446 4447 0
-4447 4446 0
-4447 -4445 0
c Var 'aux1099' direct represents '2' with '-4446'
4445 4447 -4446 0
c Encoding variable: aux1100 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1099))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4448'
c Var 'aux1100' direct represents '0' with '4448'
c Var 'aux1100' order represents '1' with '4449'
-4448 4449 0
c Var 'aux1100' direct represents '1' with '4450'
4448 -4449 4450 0
-4450 4449 0
-4450 -4448 0
c Var 'aux1100' order represents '2' with '4451'
-4449 4451 0
c Var 'aux1100' direct represents '2' with '4452'
4449 -4451 4452 0
-4452 4451 0
-4452 -4449 0
c Var 'aux1100' direct represents '3' with '-4451'
4448 4450 4452 -4451 0
c Encoding variable: aux1101 with domain: int(0..4) (representing constraint (aux1096 + aux1098))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4453'
c Var 'aux1101' direct represents '0' with '4453'
c Var 'aux1101' order represents '1' with '4454'
-4453 4454 0
c Var 'aux1101' direct represents '1' with '4455'
4453 -4454 4455 0
-4455 4454 0
-4455 -4453 0
c Var 'aux1101' order represents '2' with '4456'
-4454 4456 0
c Var 'aux1101' direct represents '2' with '4457'
4454 -4456 4457 0
-4457 4456 0
-4457 -4454 0
c Var 'aux1101' order represents '3' with '4458'
-4456 4458 0
c Var 'aux1101' direct represents '3' with '4459'
4456 -4458 4459 0
-4459 4458 0
-4459 -4456 0
c Var 'aux1101' direct represents '4' with '-4458'
4453 4455 4457 4459 -4458 0
c Encoding variable: aux1102 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4460'
c Var 'aux1102' direct represents '0' with '4460'
c Var 'aux1102' order represents '1' with '4461'
-4460 4461 0
c Var 'aux1102' direct represents '1' with '4462'
4460 -4461 4462 0
-4462 4461 0
-4462 -4460 0
c Var 'aux1102' direct represents '2' with '-4461'
4460 4462 -4461 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4463'
c Var 'aux1103' direct represents '0' with '4463'
c Var 'aux1103' order represents '1' with '4464'
-4463 4464 0
c Var 'aux1103' direct represents '1' with '4465'
4463 -4464 4465 0
-4465 4464 0
-4465 -4463 0
c Var 'aux1103' direct represents '2' with '-4464'
4463 4465 -4464 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4466'
c Var 'aux1104' direct represents '0' with '4466'
c Var 'aux1104' order represents '1' with '4467'
-4466 4467 0
c Var 'aux1104' direct represents '1' with '4468'
4466 -4467 4468 0
-4468 4467 0
-4468 -4466 0
c Var 'aux1104' direct represents '2' with '-4467'
4466 4468 -4467 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4469'
c Var 'aux1105' direct represents '0' with '4469'
c Var 'aux1105' order represents '1' with '4470'
-4469 4470 0
c Var 'aux1105' direct represents '1' with '4471'
4469 -4470 4471 0
-4471 4470 0
-4471 -4469 0
c Var 'aux1105' direct represents '2' with '-4470'
4469 4471 -4470 0
c Encoding variable: aux1106 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1105))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4472'
c Var 'aux1106' direct represents '0' with '4472'
c Var 'aux1106' order represents '1' with '4473'
-4472 4473 0
c Var 'aux1106' direct represents '1' with '4474'
4472 -4473 4474 0
-4474 4473 0
-4474 -4472 0
c Var 'aux1106' order represents '2' with '4475'
-4473 4475 0
c Var 'aux1106' direct represents '2' with '4476'
4473 -4475 4476 0
-4476 4475 0
-4476 -4473 0
c Var 'aux1106' direct represents '3' with '-4475'
4472 4474 4476 -4475 0
c Encoding variable: aux1107 with domain: int(0..4) (representing constraint (aux1102 + aux1104))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4477'
c Var 'aux1107' direct represents '0' with '4477'
c Var 'aux1107' order represents '1' with '4478'
-4477 4478 0
c Var 'aux1107' direct represents '1' with '4479'
4477 -4478 4479 0
-4479 4478 0
-4479 -4477 0
c Var 'aux1107' order represents '2' with '4480'
-4478 4480 0
c Var 'aux1107' direct represents '2' with '4481'
4478 -4480 4481 0
-4481 4480 0
-4481 -4478 0
c Var 'aux1107' order represents '3' with '4482'
-4480 4482 0
c Var 'aux1107' direct represents '3' with '4483'
4480 -4482 4483 0
-4483 4482 0
-4483 -4480 0
c Var 'aux1107' direct represents '4' with '-4482'
4477 4479 4481 4483 -4482 0
c Encoding variable: aux1108 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4484'
c Var 'aux1108' direct represents '0' with '4484'
c Var 'aux1108' order represents '1' with '4485'
-4484 4485 0
c Var 'aux1108' direct represents '1' with '4486'
4484 -4485 4486 0
-4486 4485 0
-4486 -4484 0
c Var 'aux1108' direct represents '2' with '-4485'
4484 4486 -4485 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4487'
c Var 'aux1109' direct represents '0' with '4487'
c Var 'aux1109' order represents '1' with '4488'
-4487 4488 0
c Var 'aux1109' direct represents '1' with '4489'
4487 -4488 4489 0
-4489 4488 0
-4489 -4487 0
c Var 'aux1109' direct represents '2' with '-4488'
4487 4489 -4488 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4490'
c Var 'aux1110' direct represents '0' with '4490'
c Var 'aux1110' order represents '1' with '4491'
-4490 4491 0
c Var 'aux1110' direct represents '1' with '4492'
4490 -4491 4492 0
-4492 4491 0
-4492 -4490 0
c Var 'aux1110' direct represents '2' with '-4491'
4490 4492 -4491 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4493'
c Var 'aux1111' direct represents '0' with '4493'
c Var 'aux1111' order represents '1' with '4494'
-4493 4494 0
c Var 'aux1111' direct represents '1' with '4495'
4493 -4494 4495 0
-4495 4494 0
-4495 -4493 0
c Var 'aux1111' direct represents '2' with '-4494'
4493 4495 -4494 0
c Encoding variable: aux1112 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1111))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4496'
c Var 'aux1112' direct represents '0' with '4496'
c Var 'aux1112' order represents '1' with '4497'
-4496 4497 0
c Var 'aux1112' direct represents '1' with '4498'
4496 -4497 4498 0
-4498 4497 0
-4498 -4496 0
c Var 'aux1112' order represents '2' with '4499'
-4497 4499 0
c Var 'aux1112' direct represents '2' with '4500'
4497 -4499 4500 0
-4500 4499 0
-4500 -4497 0
c Var 'aux1112' direct represents '3' with '-4499'
4496 4498 4500 -4499 0
c Encoding variable: aux1113 with domain: int(0..4) (representing constraint (aux1108 + aux1110))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4501'
c Var 'aux1113' direct represents '0' with '4501'
c Var 'aux1113' order represents '1' with '4502'
-4501 4502 0
c Var 'aux1113' direct represents '1' with '4503'
4501 -4502 4503 0
-4503 4502 0
-4503 -4501 0
c Var 'aux1113' order represents '2' with '4504'
-4502 4504 0
c Var 'aux1113' direct represents '2' with '4505'
4502 -4504 4505 0
-4505 4504 0
-4505 -4502 0
c Var 'aux1113' order represents '3' with '4506'
-4504 4506 0
c Var 'aux1113' direct represents '3' with '4507'
4504 -4506 4507 0
-4507 4506 0
-4507 -4504 0
c Var 'aux1113' direct represents '4' with '-4506'
4501 4503 4505 4507 -4506 0
c Encoding variable: aux1114 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4508'
c Var 'aux1114' direct represents '0' with '4508'
c Var 'aux1114' order represents '1' with '4509'
-4508 4509 0
c Var 'aux1114' direct represents '1' with '4510'
4508 -4509 4510 0
-4510 4509 0
-4510 -4508 0
c Var 'aux1114' direct represents '2' with '-4509'
4508 4510 -4509 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4511'
c Var 'aux1115' direct represents '0' with '4511'
c Var 'aux1115' order represents '1' with '4512'
-4511 4512 0
c Var 'aux1115' direct represents '1' with '4513'
4511 -4512 4513 0
-4513 4512 0
-4513 -4511 0
c Var 'aux1115' direct represents '2' with '-4512'
4511 4513 -4512 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4514'
c Var 'aux1116' direct represents '0' with '4514'
c Var 'aux1116' order represents '1' with '4515'
-4514 4515 0
c Var 'aux1116' direct represents '1' with '4516'
4514 -4515 4516 0
-4516 4515 0
-4516 -4514 0
c Var 'aux1116' direct represents '2' with '-4515'
4514 4516 -4515 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4517'
c Var 'aux1117' direct represents '0' with '4517'
c Var 'aux1117' order represents '1' with '4518'
-4517 4518 0
c Var 'aux1117' direct represents '1' with '4519'
4517 -4518 4519 0
-4519 4518 0
-4519 -4517 0
c Var 'aux1117' direct represents '2' with '-4518'
4517 4519 -4518 0
c Encoding variable: aux1118 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1117))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4520'
c Var 'aux1118' direct represents '0' with '4520'
c Var 'aux1118' order represents '1' with '4521'
-4520 4521 0
c Var 'aux1118' direct represents '1' with '4522'
4520 -4521 4522 0
-4522 4521 0
-4522 -4520 0
c Var 'aux1118' order represents '2' with '4523'
-4521 4523 0
c Var 'aux1118' direct represents '2' with '4524'
4521 -4523 4524 0
-4524 4523 0
-4524 -4521 0
c Var 'aux1118' direct represents '3' with '-4523'
4520 4522 4524 -4523 0
c Encoding variable: aux1119 with domain: int(0..4) (representing constraint (aux1114 + aux1116))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4525'
c Var 'aux1119' direct represents '0' with '4525'
c Var 'aux1119' order represents '1' with '4526'
-4525 4526 0
c Var 'aux1119' direct represents '1' with '4527'
4525 -4526 4527 0
-4527 4526 0
-4527 -4525 0
c Var 'aux1119' order represents '2' with '4528'
-4526 4528 0
c Var 'aux1119' direct represents '2' with '4529'
4526 -4528 4529 0
-4529 4528 0
-4529 -4526 0
c Var 'aux1119' order represents '3' with '4530'
-4528 4530 0
c Var 'aux1119' direct represents '3' with '4531'
4528 -4530 4531 0
-4531 4530 0
-4531 -4528 0
c Var 'aux1119' direct represents '4' with '-4530'
4525 4527 4529 4531 -4530 0
c Encoding variable: aux1120 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4532'
c Var 'aux1120' direct represents '0' with '4532'
c Var 'aux1120' order represents '1' with '4533'
-4532 4533 0
c Var 'aux1120' direct represents '1' with '4534'
4532 -4533 4534 0
-4534 4533 0
-4534 -4532 0
c Var 'aux1120' direct represents '2' with '-4533'
4532 4534 -4533 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4535'
c Var 'aux1121' direct represents '0' with '4535'
c Var 'aux1121' order represents '1' with '4536'
-4535 4536 0
c Var 'aux1121' direct represents '1' with '4537'
4535 -4536 4537 0
-4537 4536 0
-4537 -4535 0
c Var 'aux1121' direct represents '2' with '-4536'
4535 4537 -4536 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4538'
c Var 'aux1122' direct represents '0' with '4538'
c Var 'aux1122' order represents '1' with '4539'
-4538 4539 0
c Var 'aux1122' direct represents '1' with '4540'
4538 -4539 4540 0
-4540 4539 0
-4540 -4538 0
c Var 'aux1122' direct represents '2' with '-4539'
4538 4540 -4539 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4541'
c Var 'aux1123' direct represents '0' with '4541'
c Var 'aux1123' order represents '1' with '4542'
-4541 4542 0
c Var 'aux1123' direct represents '1' with '4543'
4541 -4542 4543 0
-4543 4542 0
-4543 -4541 0
c Var 'aux1123' direct represents '2' with '-4542'
4541 4543 -4542 0
c Encoding variable: aux1124 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1123))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4544'
c Var 'aux1124' direct represents '0' with '4544'
c Var 'aux1124' order represents '1' with '4545'
-4544 4545 0
c Var 'aux1124' direct represents '1' with '4546'
4544 -4545 4546 0
-4546 4545 0
-4546 -4544 0
c Var 'aux1124' order represents '2' with '4547'
-4545 4547 0
c Var 'aux1124' direct represents '2' with '4548'
4545 -4547 4548 0
-4548 4547 0
-4548 -4545 0
c Var 'aux1124' direct represents '3' with '-4547'
4544 4546 4548 -4547 0
c Encoding variable: aux1125 with domain: int(0..4) (representing constraint (aux1120 + aux1122))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4549'
c Var 'aux1125' direct represents '0' with '4549'
c Var 'aux1125' order represents '1' with '4550'
-4549 4550 0
c Var 'aux1125' direct represents '1' with '4551'
4549 -4550 4551 0
-4551 4550 0
-4551 -4549 0
c Var 'aux1125' order represents '2' with '4552'
-4550 4552 0
c Var 'aux1125' direct represents '2' with '4553'
4550 -4552 4553 0
-4553 4552 0
-4553 -4550 0
c Var 'aux1125' order represents '3' with '4554'
-4552 4554 0
c Var 'aux1125' direct represents '3' with '4555'
4552 -4554 4555 0
-4555 4554 0
-4555 -4552 0
c Var 'aux1125' direct represents '4' with '-4554'
4549 4551 4553 4555 -4554 0
c Encoding variable: aux1126 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4556'
c Var 'aux1126' direct represents '0' with '4556'
c Var 'aux1126' order represents '1' with '4557'
-4556 4557 0
c Var 'aux1126' direct represents '1' with '4558'
4556 -4557 4558 0
-4558 4557 0
-4558 -4556 0
c Var 'aux1126' direct represents '2' with '-4557'
4556 4558 -4557 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4559'
c Var 'aux1127' direct represents '0' with '4559'
c Var 'aux1127' order represents '1' with '4560'
-4559 4560 0
c Var 'aux1127' direct represents '1' with '4561'
4559 -4560 4561 0
-4561 4560 0
-4561 -4559 0
c Var 'aux1127' direct represents '2' with '-4560'
4559 4561 -4560 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4562'
c Var 'aux1128' direct represents '0' with '4562'
c Var 'aux1128' order represents '1' with '4563'
-4562 4563 0
c Var 'aux1128' direct represents '1' with '4564'
4562 -4563 4564 0
-4564 4563 0
-4564 -4562 0
c Var 'aux1128' direct represents '2' with '-4563'
4562 4564 -4563 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4565'
c Var 'aux1129' direct represents '0' with '4565'
c Var 'aux1129' order represents '1' with '4566'
-4565 4566 0
c Var 'aux1129' direct represents '1' with '4567'
4565 -4566 4567 0
-4567 4566 0
-4567 -4565 0
c Var 'aux1129' direct represents '2' with '-4566'
4565 4567 -4566 0
c Encoding variable: aux1130 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1129))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4568'
c Var 'aux1130' direct represents '0' with '4568'
c Var 'aux1130' order represents '1' with '4569'
-4568 4569 0
c Var 'aux1130' direct represents '1' with '4570'
4568 -4569 4570 0
-4570 4569 0
-4570 -4568 0
c Var 'aux1130' order represents '2' with '4571'
-4569 4571 0
c Var 'aux1130' direct represents '2' with '4572'
4569 -4571 4572 0
-4572 4571 0
-4572 -4569 0
c Var 'aux1130' direct represents '3' with '-4571'
4568 4570 4572 -4571 0
c Encoding variable: aux1131 with domain: int(0..4) (representing constraint (aux1126 + aux1128))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4573'
c Var 'aux1131' direct represents '0' with '4573'
c Var 'aux1131' order represents '1' with '4574'
-4573 4574 0
c Var 'aux1131' direct represents '1' with '4575'
4573 -4574 4575 0
-4575 4574 0
-4575 -4573 0
c Var 'aux1131' order represents '2' with '4576'
-4574 4576 0
c Var 'aux1131' direct represents '2' with '4577'
4574 -4576 4577 0
-4577 4576 0
-4577 -4574 0
c Var 'aux1131' order represents '3' with '4578'
-4576 4578 0
c Var 'aux1131' direct represents '3' with '4579'
4576 -4578 4579 0
-4579 4578 0
-4579 -4576 0
c Var 'aux1131' direct represents '4' with '-4578'
4573 4575 4577 4579 -4578 0
c Encoding variable: aux1132 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4580'
c Var 'aux1132' direct represents '0' with '4580'
c Var 'aux1132' order represents '1' with '4581'
-4580 4581 0
c Var 'aux1132' direct represents '1' with '4582'
4580 -4581 4582 0
-4582 4581 0
-4582 -4580 0
c Var 'aux1132' direct represents '2' with '-4581'
4580 4582 -4581 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4583'
c Var 'aux1133' direct represents '0' with '4583'
c Var 'aux1133' order represents '1' with '4584'
-4583 4584 0
c Var 'aux1133' direct represents '1' with '4585'
4583 -4584 4585 0
-4585 4584 0
-4585 -4583 0
c Var 'aux1133' direct represents '2' with '-4584'
4583 4585 -4584 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4586'
c Var 'aux1134' direct represents '0' with '4586'
c Var 'aux1134' order represents '1' with '4587'
-4586 4587 0
c Var 'aux1134' direct represents '1' with '4588'
4586 -4587 4588 0
-4588 4587 0
-4588 -4586 0
c Var 'aux1134' direct represents '2' with '-4587'
4586 4588 -4587 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4589'
c Var 'aux1135' direct represents '0' with '4589'
c Var 'aux1135' order represents '1' with '4590'
-4589 4590 0
c Var 'aux1135' direct represents '1' with '4591'
4589 -4590 4591 0
-4591 4590 0
-4591 -4589 0
c Var 'aux1135' direct represents '2' with '-4590'
4589 4591 -4590 0
c Encoding variable: aux1136 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1135))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4592'
c Var 'aux1136' direct represents '0' with '4592'
c Var 'aux1136' order represents '1' with '4593'
-4592 4593 0
c Var 'aux1136' direct represents '1' with '4594'
4592 -4593 4594 0
-4594 4593 0
-4594 -4592 0
c Var 'aux1136' order represents '2' with '4595'
-4593 4595 0
c Var 'aux1136' direct represents '2' with '4596'
4593 -4595 4596 0
-4596 4595 0
-4596 -4593 0
c Var 'aux1136' direct represents '3' with '-4595'
4592 4594 4596 -4595 0
c Encoding variable: aux1137 with domain: int(0..4) (representing constraint (aux1132 + aux1134))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4597'
c Var 'aux1137' direct represents '0' with '4597'
c Var 'aux1137' order represents '1' with '4598'
-4597 4598 0
c Var 'aux1137' direct represents '1' with '4599'
4597 -4598 4599 0
-4599 4598 0
-4599 -4597 0
c Var 'aux1137' order represents '2' with '4600'
-4598 4600 0
c Var 'aux1137' direct represents '2' with '4601'
4598 -4600 4601 0
-4601 4600 0
-4601 -4598 0
c Var 'aux1137' order represents '3' with '4602'
-4600 4602 0
c Var 'aux1137' direct represents '3' with '4603'
4600 -4602 4603 0
-4603 4602 0
-4603 -4600 0
c Var 'aux1137' direct represents '4' with '-4602'
4597 4599 4601 4603 -4602 0
c Encoding variable: aux1138 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4604'
c Var 'aux1138' direct represents '0' with '4604'
c Var 'aux1138' order represents '1' with '4605'
-4604 4605 0
c Var 'aux1138' direct represents '1' with '4606'
4604 -4605 4606 0
-4606 4605 0
-4606 -4604 0
c Var 'aux1138' direct represents '2' with '-4605'
4604 4606 -4605 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4607'
c Var 'aux1139' direct represents '0' with '4607'
c Var 'aux1139' order represents '1' with '4608'
-4607 4608 0
c Var 'aux1139' direct represents '1' with '4609'
4607 -4608 4609 0
-4609 4608 0
-4609 -4607 0
c Var 'aux1139' direct represents '2' with '-4608'
4607 4609 -4608 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4610'
c Var 'aux1140' direct represents '0' with '4610'
c Var 'aux1140' order represents '1' with '4611'
-4610 4611 0
c Var 'aux1140' direct represents '1' with '4612'
4610 -4611 4612 0
-4612 4611 0
-4612 -4610 0
c Var 'aux1140' direct represents '2' with '-4611'
4610 4612 -4611 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4613'
c Var 'aux1141' direct represents '0' with '4613'
c Var 'aux1141' order represents '1' with '4614'
-4613 4614 0
c Var 'aux1141' direct represents '1' with '4615'
4613 -4614 4615 0
-4615 4614 0
-4615 -4613 0
c Var 'aux1141' direct represents '2' with '-4614'
4613 4615 -4614 0
c Encoding variable: aux1142 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1141))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4616'
c Var 'aux1142' direct represents '0' with '4616'
c Var 'aux1142' order represents '1' with '4617'
-4616 4617 0
c Var 'aux1142' direct represents '1' with '4618'
4616 -4617 4618 0
-4618 4617 0
-4618 -4616 0
c Var 'aux1142' order represents '2' with '4619'
-4617 4619 0
c Var 'aux1142' direct represents '2' with '4620'
4617 -4619 4620 0
-4620 4619 0
-4620 -4617 0
c Var 'aux1142' direct represents '3' with '-4619'
4616 4618 4620 -4619 0
c Encoding variable: aux1143 with domain: int(0..4) (representing constraint (aux1138 + aux1140))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4621'
c Var 'aux1143' direct represents '0' with '4621'
c Var 'aux1143' order represents '1' with '4622'
-4621 4622 0
c Var 'aux1143' direct represents '1' with '4623'
4621 -4622 4623 0
-4623 4622 0
-4623 -4621 0
c Var 'aux1143' order represents '2' with '4624'
-4622 4624 0
c Var 'aux1143' direct represents '2' with '4625'
4622 -4624 4625 0
-4625 4624 0
-4625 -4622 0
c Var 'aux1143' order represents '3' with '4626'
-4624 4626 0
c Var 'aux1143' direct represents '3' with '4627'
4624 -4626 4627 0
-4627 4626 0
-4627 -4624 0
c Var 'aux1143' direct represents '4' with '-4626'
4621 4623 4625 4627 -4626 0
c Encoding variable: aux1144 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4628'
c Var 'aux1144' direct represents '0' with '4628'
c Var 'aux1144' order represents '1' with '4629'
-4628 4629 0
c Var 'aux1144' direct represents '1' with '4630'
4628 -4629 4630 0
-4630 4629 0
-4630 -4628 0
c Var 'aux1144' direct represents '2' with '-4629'
4628 4630 -4629 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4631'
c Var 'aux1145' direct represents '0' with '4631'
c Var 'aux1145' order represents '1' with '4632'
-4631 4632 0
c Var 'aux1145' direct represents '1' with '4633'
4631 -4632 4633 0
-4633 4632 0
-4633 -4631 0
c Var 'aux1145' direct represents '2' with '-4632'
4631 4633 -4632 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4634'
c Var 'aux1146' direct represents '0' with '4634'
c Var 'aux1146' order represents '1' with '4635'
-4634 4635 0
c Var 'aux1146' direct represents '1' with '4636'
4634 -4635 4636 0
-4636 4635 0
-4636 -4634 0
c Var 'aux1146' direct represents '2' with '-4635'
4634 4636 -4635 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4637'
c Var 'aux1147' direct represents '0' with '4637'
c Var 'aux1147' order represents '1' with '4638'
-4637 4638 0
c Var 'aux1147' direct represents '1' with '4639'
4637 -4638 4639 0
-4639 4638 0
-4639 -4637 0
c Var 'aux1147' direct represents '2' with '-4638'
4637 4639 -4638 0
c Encoding variable: aux1148 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1147))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4640'
c Var 'aux1148' direct represents '0' with '4640'
c Var 'aux1148' order represents '1' with '4641'
-4640 4641 0
c Var 'aux1148' direct represents '1' with '4642'
4640 -4641 4642 0
-4642 4641 0
-4642 -4640 0
c Var 'aux1148' order represents '2' with '4643'
-4641 4643 0
c Var 'aux1148' direct represents '2' with '4644'
4641 -4643 4644 0
-4644 4643 0
-4644 -4641 0
c Var 'aux1148' direct represents '3' with '-4643'
4640 4642 4644 -4643 0
c Encoding variable: aux1149 with domain: int(0..4) (representing constraint (aux1144 + aux1146))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4645'
c Var 'aux1149' direct represents '0' with '4645'
c Var 'aux1149' order represents '1' with '4646'
-4645 4646 0
c Var 'aux1149' direct represents '1' with '4647'
4645 -4646 4647 0
-4647 4646 0
-4647 -4645 0
c Var 'aux1149' order represents '2' with '4648'
-4646 4648 0
c Var 'aux1149' direct represents '2' with '4649'
4646 -4648 4649 0
-4649 4648 0
-4649 -4646 0
c Var 'aux1149' order represents '3' with '4650'
-4648 4650 0
c Var 'aux1149' direct represents '3' with '4651'
4648 -4650 4651 0
-4651 4650 0
-4651 -4648 0
c Var 'aux1149' direct represents '4' with '-4650'
4645 4647 4649 4651 -4650 0
c Encoding variable: aux1150 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4652'
c Var 'aux1150' direct represents '0' with '4652'
c Var 'aux1150' order represents '1' with '4653'
-4652 4653 0
c Var 'aux1150' direct represents '1' with '4654'
4652 -4653 4654 0
-4654 4653 0
-4654 -4652 0
c Var 'aux1150' direct represents '2' with '-4653'
4652 4654 -4653 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4655'
c Var 'aux1151' direct represents '0' with '4655'
c Var 'aux1151' order represents '1' with '4656'
-4655 4656 0
c Var 'aux1151' direct represents '1' with '4657'
4655 -4656 4657 0
-4657 4656 0
-4657 -4655 0
c Var 'aux1151' direct represents '2' with '-4656'
4655 4657 -4656 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4658'
c Var 'aux1152' direct represents '0' with '4658'
c Var 'aux1152' order represents '1' with '4659'
-4658 4659 0
c Var 'aux1152' direct represents '1' with '4660'
4658 -4659 4660 0
-4660 4659 0
-4660 -4658 0
c Var 'aux1152' direct represents '2' with '-4659'
4658 4660 -4659 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4661'
c Var 'aux1153' direct represents '0' with '4661'
c Var 'aux1153' order represents '1' with '4662'
-4661 4662 0
c Var 'aux1153' direct represents '1' with '4663'
4661 -4662 4663 0
-4663 4662 0
-4663 -4661 0
c Var 'aux1153' direct represents '2' with '-4662'
4661 4663 -4662 0
c Encoding variable: aux1154 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1153))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4664'
c Var 'aux1154' direct represents '0' with '4664'
c Var 'aux1154' order represents '1' with '4665'
-4664 4665 0
c Var 'aux1154' direct represents '1' with '4666'
4664 -4665 4666 0
-4666 4665 0
-4666 -4664 0
c Var 'aux1154' order represents '2' with '4667'
-4665 4667 0
c Var 'aux1154' direct represents '2' with '4668'
4665 -4667 4668 0
-4668 4667 0
-4668 -4665 0
c Var 'aux1154' direct represents '3' with '-4667'
4664 4666 4668 -4667 0
c Encoding variable: aux1155 with domain: int(0..4) (representing constraint (aux1150 + aux1152))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4669'
c Var 'aux1155' direct represents '0' with '4669'
c Var 'aux1155' order represents '1' with '4670'
-4669 4670 0
c Var 'aux1155' direct represents '1' with '4671'
4669 -4670 4671 0
-4671 4670 0
-4671 -4669 0
c Var 'aux1155' order represents '2' with '4672'
-4670 4672 0
c Var 'aux1155' direct represents '2' with '4673'
4670 -4672 4673 0
-4673 4672 0
-4673 -4670 0
c Var 'aux1155' order represents '3' with '4674'
-4672 4674 0
c Var 'aux1155' direct represents '3' with '4675'
4672 -4674 4675 0
-4675 4674 0
-4675 -4672 0
c Var 'aux1155' direct represents '4' with '-4674'
4669 4671 4673 4675 -4674 0
c Encoding variable: aux1156 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4676'
c Var 'aux1156' direct represents '0' with '4676'
c Var 'aux1156' order represents '1' with '4677'
-4676 4677 0
c Var 'aux1156' direct represents '1' with '4678'
4676 -4677 4678 0
-4678 4677 0
-4678 -4676 0
c Var 'aux1156' direct represents '2' with '-4677'
4676 4678 -4677 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4679'
c Var 'aux1157' direct represents '0' with '4679'
c Var 'aux1157' order represents '1' with '4680'
-4679 4680 0
c Var 'aux1157' direct represents '1' with '4681'
4679 -4680 4681 0
-4681 4680 0
-4681 -4679 0
c Var 'aux1157' direct represents '2' with '-4680'
4679 4681 -4680 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4682'
c Var 'aux1158' direct represents '0' with '4682'
c Var 'aux1158' order represents '1' with '4683'
-4682 4683 0
c Var 'aux1158' direct represents '1' with '4684'
4682 -4683 4684 0
-4684 4683 0
-4684 -4682 0
c Var 'aux1158' direct represents '2' with '-4683'
4682 4684 -4683 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4685'
c Var 'aux1159' direct represents '0' with '4685'
c Var 'aux1159' order represents '1' with '4686'
-4685 4686 0
c Var 'aux1159' direct represents '1' with '4687'
4685 -4686 4687 0
-4687 4686 0
-4687 -4685 0
c Var 'aux1159' direct represents '2' with '-4686'
4685 4687 -4686 0
c Encoding variable: aux1160 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1159))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4688'
c Var 'aux1160' direct represents '0' with '4688'
c Var 'aux1160' order represents '1' with '4689'
-4688 4689 0
c Var 'aux1160' direct represents '1' with '4690'
4688 -4689 4690 0
-4690 4689 0
-4690 -4688 0
c Var 'aux1160' order represents '2' with '4691'
-4689 4691 0
c Var 'aux1160' direct represents '2' with '4692'
4689 -4691 4692 0
-4692 4691 0
-4692 -4689 0
c Var 'aux1160' direct represents '3' with '-4691'
4688 4690 4692 -4691 0
c Encoding variable: aux1161 with domain: int(0..4) (representing constraint (aux1156 + aux1158))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4693'
c Var 'aux1161' direct represents '0' with '4693'
c Var 'aux1161' order represents '1' with '4694'
-4693 4694 0
c Var 'aux1161' direct represents '1' with '4695'
4693 -4694 4695 0
-4695 4694 0
-4695 -4693 0
c Var 'aux1161' order represents '2' with '4696'
-4694 4696 0
c Var 'aux1161' direct represents '2' with '4697'
4694 -4696 4697 0
-4697 4696 0
-4697 -4694 0
c Var 'aux1161' order represents '3' with '4698'
-4696 4698 0
c Var 'aux1161' direct represents '3' with '4699'
4696 -4698 4699 0
-4699 4698 0
-4699 -4696 0
c Var 'aux1161' direct represents '4' with '-4698'
4693 4695 4697 4699 -4698 0
c Encoding variable: aux1162 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4700'
c Var 'aux1162' direct represents '0' with '4700'
c Var 'aux1162' order represents '1' with '4701'
-4700 4701 0
c Var 'aux1162' direct represents '1' with '4702'
4700 -4701 4702 0
-4702 4701 0
-4702 -4700 0
c Var 'aux1162' direct represents '2' with '-4701'
4700 4702 -4701 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4703'
c Var 'aux1163' direct represents '0' with '4703'
c Var 'aux1163' order represents '1' with '4704'
-4703 4704 0
c Var 'aux1163' direct represents '1' with '4705'
4703 -4704 4705 0
-4705 4704 0
-4705 -4703 0
c Var 'aux1163' direct represents '2' with '-4704'
4703 4705 -4704 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4706'
c Var 'aux1164' direct represents '0' with '4706'
c Var 'aux1164' order represents '1' with '4707'
-4706 4707 0
c Var 'aux1164' direct represents '1' with '4708'
4706 -4707 4708 0
-4708 4707 0
-4708 -4706 0
c Var 'aux1164' direct represents '2' with '-4707'
4706 4708 -4707 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4709'
c Var 'aux1165' direct represents '0' with '4709'
c Var 'aux1165' order represents '1' with '4710'
-4709 4710 0
c Var 'aux1165' direct represents '1' with '4711'
4709 -4710 4711 0
-4711 4710 0
-4711 -4709 0
c Var 'aux1165' direct represents '2' with '-4710'
4709 4711 -4710 0
c Encoding variable: aux1166 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1165))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4712'
c Var 'aux1166' direct represents '0' with '4712'
c Var 'aux1166' order represents '1' with '4713'
-4712 4713 0
c Var 'aux1166' direct represents '1' with '4714'
4712 -4713 4714 0
-4714 4713 0
-4714 -4712 0
c Var 'aux1166' order represents '2' with '4715'
-4713 4715 0
c Var 'aux1166' direct represents '2' with '4716'
4713 -4715 4716 0
-4716 4715 0
-4716 -4713 0
c Var 'aux1166' direct represents '3' with '-4715'
4712 4714 4716 -4715 0
c Encoding variable: aux1167 with domain: int(0..4) (representing constraint (aux1162 + aux1164))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4717'
c Var 'aux1167' direct represents '0' with '4717'
c Var 'aux1167' order represents '1' with '4718'
-4717 4718 0
c Var 'aux1167' direct represents '1' with '4719'
4717 -4718 4719 0
-4719 4718 0
-4719 -4717 0
c Var 'aux1167' order represents '2' with '4720'
-4718 4720 0
c Var 'aux1167' direct represents '2' with '4721'
4718 -4720 4721 0
-4721 4720 0
-4721 -4718 0
c Var 'aux1167' order represents '3' with '4722'
-4720 4722 0
c Var 'aux1167' direct represents '3' with '4723'
4720 -4722 4723 0
-4723 4722 0
-4723 -4720 0
c Var 'aux1167' direct represents '4' with '-4722'
4717 4719 4721 4723 -4722 0
c Encoding variable: aux1168 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4724'
c Var 'aux1168' direct represents '0' with '4724'
c Var 'aux1168' order represents '1' with '4725'
-4724 4725 0
c Var 'aux1168' direct represents '1' with '4726'
4724 -4725 4726 0
-4726 4725 0
-4726 -4724 0
c Var 'aux1168' direct represents '2' with '-4725'
4724 4726 -4725 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4727'
c Var 'aux1169' direct represents '0' with '4727'
c Var 'aux1169' order represents '1' with '4728'
-4727 4728 0
c Var 'aux1169' direct represents '1' with '4729'
4727 -4728 4729 0
-4729 4728 0
-4729 -4727 0
c Var 'aux1169' direct represents '2' with '-4728'
4727 4729 -4728 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4730'
c Var 'aux1170' direct represents '0' with '4730'
c Var 'aux1170' order represents '1' with '4731'
-4730 4731 0
c Var 'aux1170' direct represents '1' with '4732'
4730 -4731 4732 0
-4732 4731 0
-4732 -4730 0
c Var 'aux1170' direct represents '2' with '-4731'
4730 4732 -4731 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4733'
c Var 'aux1171' direct represents '0' with '4733'
c Var 'aux1171' order represents '1' with '4734'
-4733 4734 0
c Var 'aux1171' direct represents '1' with '4735'
4733 -4734 4735 0
-4735 4734 0
-4735 -4733 0
c Var 'aux1171' direct represents '2' with '-4734'
4733 4735 -4734 0
c Encoding variable: aux1172 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1171))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4736'
c Var 'aux1172' direct represents '0' with '4736'
c Var 'aux1172' order represents '1' with '4737'
-4736 4737 0
c Var 'aux1172' direct represents '1' with '4738'
4736 -4737 4738 0
-4738 4737 0
-4738 -4736 0
c Var 'aux1172' order represents '2' with '4739'
-4737 4739 0
c Var 'aux1172' direct represents '2' with '4740'
4737 -4739 4740 0
-4740 4739 0
-4740 -4737 0
c Var 'aux1172' direct represents '3' with '-4739'
4736 4738 4740 -4739 0
c Encoding variable: aux1173 with domain: int(0..4) (representing constraint (aux1168 + aux1170))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4741'
c Var 'aux1173' direct represents '0' with '4741'
c Var 'aux1173' order represents '1' with '4742'
-4741 4742 0
c Var 'aux1173' direct represents '1' with '4743'
4741 -4742 4743 0
-4743 4742 0
-4743 -4741 0
c Var 'aux1173' order represents '2' with '4744'
-4742 4744 0
c Var 'aux1173' direct represents '2' with '4745'
4742 -4744 4745 0
-4745 4744 0
-4745 -4742 0
c Var 'aux1173' order represents '3' with '4746'
-4744 4746 0
c Var 'aux1173' direct represents '3' with '4747'
4744 -4746 4747 0
-4747 4746 0
-4747 -4744 0
c Var 'aux1173' direct represents '4' with '-4746'
4741 4743 4745 4747 -4746 0
c Encoding variable: aux1174 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4748'
c Var 'aux1174' direct represents '0' with '4748'
c Var 'aux1174' order represents '1' with '4749'
-4748 4749 0
c Var 'aux1174' direct represents '1' with '4750'
4748 -4749 4750 0
-4750 4749 0
-4750 -4748 0
c Var 'aux1174' direct represents '2' with '-4749'
4748 4750 -4749 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4751'
c Var 'aux1175' direct represents '0' with '4751'
c Var 'aux1175' order represents '1' with '4752'
-4751 4752 0
c Var 'aux1175' direct represents '1' with '4753'
4751 -4752 4753 0
-4753 4752 0
-4753 -4751 0
c Var 'aux1175' direct represents '2' with '-4752'
4751 4753 -4752 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4754'
c Var 'aux1176' direct represents '0' with '4754'
c Var 'aux1176' order represents '1' with '4755'
-4754 4755 0
c Var 'aux1176' direct represents '1' with '4756'
4754 -4755 4756 0
-4756 4755 0
-4756 -4754 0
c Var 'aux1176' direct represents '2' with '-4755'
4754 4756 -4755 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4757'
c Var 'aux1177' direct represents '0' with '4757'
c Var 'aux1177' order represents '1' with '4758'
-4757 4758 0
c Var 'aux1177' direct represents '1' with '4759'
4757 -4758 4759 0
-4759 4758 0
-4759 -4757 0
c Var 'aux1177' direct represents '2' with '-4758'
4757 4759 -4758 0
c Encoding variable: aux1178 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1177))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4760'
c Var 'aux1178' direct represents '0' with '4760'
c Var 'aux1178' order represents '1' with '4761'
-4760 4761 0
c Var 'aux1178' direct represents '1' with '4762'
4760 -4761 4762 0
-4762 4761 0
-4762 -4760 0
c Var 'aux1178' order represents '2' with '4763'
-4761 4763 0
c Var 'aux1178' direct represents '2' with '4764'
4761 -4763 4764 0
-4764 4763 0
-4764 -4761 0
c Var 'aux1178' direct represents '3' with '-4763'
4760 4762 4764 -4763 0
c Encoding variable: aux1179 with domain: int(0..4) (representing constraint (aux1174 + aux1176))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4765'
c Var 'aux1179' direct represents '0' with '4765'
c Var 'aux1179' order represents '1' with '4766'
-4765 4766 0
c Var 'aux1179' direct represents '1' with '4767'
4765 -4766 4767 0
-4767 4766 0
-4767 -4765 0
c Var 'aux1179' order represents '2' with '4768'
-4766 4768 0
c Var 'aux1179' direct represents '2' with '4769'
4766 -4768 4769 0
-4769 4768 0
-4769 -4766 0
c Var 'aux1179' order represents '3' with '4770'
-4768 4770 0
c Var 'aux1179' direct represents '3' with '4771'
4768 -4770 4771 0
-4771 4770 0
-4771 -4768 0
c Var 'aux1179' direct represents '4' with '-4770'
4765 4767 4769 4771 -4770 0
c Encoding variable: aux1180 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4772'
c Var 'aux1180' direct represents '0' with '4772'
c Var 'aux1180' order represents '1' with '4773'
-4772 4773 0
c Var 'aux1180' direct represents '1' with '4774'
4772 -4773 4774 0
-4774 4773 0
-4774 -4772 0
c Var 'aux1180' direct represents '2' with '-4773'
4772 4774 -4773 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '4775'
c Var 'aux1181' direct represents '0' with '4775'
c Var 'aux1181' order represents '1' with '4776'
-4775 4776 0
c Var 'aux1181' direct represents '1' with '4777'
4775 -4776 4777 0
-4777 4776 0
-4777 -4775 0
c Var 'aux1181' direct represents '2' with '-4776'
4775 4777 -4776 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '4778'
c Var 'aux1182' direct represents '0' with '4778'
c Var 'aux1182' order represents '1' with '4779'
-4778 4779 0
c Var 'aux1182' direct represents '1' with '4780'
4778 -4779 4780 0
-4780 4779 0
-4780 -4778 0
c Var 'aux1182' direct represents '2' with '-4779'
4778 4780 -4779 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '4781'
c Var 'aux1183' direct represents '0' with '4781'
c Var 'aux1183' order represents '1' with '4782'
-4781 4782 0
c Var 'aux1183' direct represents '1' with '4783'
4781 -4782 4783 0
-4783 4782 0
-4783 -4781 0
c Var 'aux1183' direct represents '2' with '-4782'
4781 4783 -4782 0
c Encoding variable: aux1184 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1183))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '4784'
c Var 'aux1184' direct represents '0' with '4784'
c Var 'aux1184' order represents '1' with '4785'
-4784 4785 0
c Var 'aux1184' direct represents '1' with '4786'
4784 -4785 4786 0
-4786 4785 0
-4786 -4784 0
c Var 'aux1184' order represents '2' with '4787'
-4785 4787 0
c Var 'aux1184' direct represents '2' with '4788'
4785 -4787 4788 0
-4788 4787 0
-4788 -4785 0
c Var 'aux1184' direct represents '3' with '-4787'
4784 4786 4788 -4787 0
c Encoding variable: aux1185 with domain: int(0..4) (representing constraint (aux1180 + aux1182))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '4789'
c Var 'aux1185' direct represents '0' with '4789'
c Var 'aux1185' order represents '1' with '4790'
-4789 4790 0
c Var 'aux1185' direct represents '1' with '4791'
4789 -4790 4791 0
-4791 4790 0
-4791 -4789 0
c Var 'aux1185' order represents '2' with '4792'
-4790 4792 0
c Var 'aux1185' direct represents '2' with '4793'
4790 -4792 4793 0
-4793 4792 0
-4793 -4790 0
c Var 'aux1185' order represents '3' with '4794'
-4792 4794 0
c Var 'aux1185' direct represents '3' with '4795'
4792 -4794 4795 0
-4795 4794 0
-4795 -4792 0
c Var 'aux1185' direct represents '4' with '-4794'
4789 4791 4793 4795 -4794 0
c Encoding variable: aux1186 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '4796'
c Var 'aux1186' direct represents '0' with '4796'
c Var 'aux1186' order represents '1' with '4797'
-4796 4797 0
c Var 'aux1186' direct represents '1' with '4798'
4796 -4797 4798 0
-4798 4797 0
-4798 -4796 0
c Var 'aux1186' direct represents '2' with '-4797'
4796 4798 -4797 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '4799'
c Var 'aux1187' direct represents '0' with '4799'
c Var 'aux1187' order represents '1' with '4800'
-4799 4800 0
c Var 'aux1187' direct represents '1' with '4801'
4799 -4800 4801 0
-4801 4800 0
-4801 -4799 0
c Var 'aux1187' direct represents '2' with '-4800'
4799 4801 -4800 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '4802'
c Var 'aux1188' direct represents '0' with '4802'
c Var 'aux1188' order represents '1' with '4803'
-4802 4803 0
c Var 'aux1188' direct represents '1' with '4804'
4802 -4803 4804 0
-4804 4803 0
-4804 -4802 0
c Var 'aux1188' direct represents '2' with '-4803'
4802 4804 -4803 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '4805'
c Var 'aux1189' direct represents '0' with '4805'
c Var 'aux1189' order represents '1' with '4806'
-4805 4806 0
c Var 'aux1189' direct represents '1' with '4807'
4805 -4806 4807 0
-4807 4806 0
-4807 -4805 0
c Var 'aux1189' direct represents '2' with '-4806'
4805 4807 -4806 0
c Encoding variable: aux1190 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1189))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '4808'
c Var 'aux1190' direct represents '0' with '4808'
c Var 'aux1190' order represents '1' with '4809'
-4808 4809 0
c Var 'aux1190' direct represents '1' with '4810'
4808 -4809 4810 0
-4810 4809 0
-4810 -4808 0
c Var 'aux1190' order represents '2' with '4811'
-4809 4811 0
c Var 'aux1190' direct represents '2' with '4812'
4809 -4811 4812 0
-4812 4811 0
-4812 -4809 0
c Var 'aux1190' direct represents '3' with '-4811'
4808 4810 4812 -4811 0
c Encoding variable: aux1191 with domain: int(0..4) (representing constraint (aux1186 + aux1188))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '4813'
c Var 'aux1191' direct represents '0' with '4813'
c Var 'aux1191' order represents '1' with '4814'
-4813 4814 0
c Var 'aux1191' direct represents '1' with '4815'
4813 -4814 4815 0
-4815 4814 0
-4815 -4813 0
c Var 'aux1191' order represents '2' with '4816'
-4814 4816 0
c Var 'aux1191' direct represents '2' with '4817'
4814 -4816 4817 0
-4817 4816 0
-4817 -4814 0
c Var 'aux1191' order represents '3' with '4818'
-4816 4818 0
c Var 'aux1191' direct represents '3' with '4819'
4816 -4818 4819 0
-4819 4818 0
-4819 -4816 0
c Var 'aux1191' direct represents '4' with '-4818'
4813 4815 4817 4819 -4818 0
c Encoding variable: aux1192 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '4820'
c Var 'aux1192' direct represents '0' with '4820'
c Var 'aux1192' order represents '1' with '4821'
-4820 4821 0
c Var 'aux1192' direct represents '1' with '4822'
4820 -4821 4822 0
-4822 4821 0
-4822 -4820 0
c Var 'aux1192' direct represents '2' with '-4821'
4820 4822 -4821 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '4823'
c Var 'aux1193' direct represents '0' with '4823'
c Var 'aux1193' order represents '1' with '4824'
-4823 4824 0
c Var 'aux1193' direct represents '1' with '4825'
4823 -4824 4825 0
-4825 4824 0
-4825 -4823 0
c Var 'aux1193' direct represents '2' with '-4824'
4823 4825 -4824 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '4826'
c Var 'aux1194' direct represents '0' with '4826'
c Var 'aux1194' order represents '1' with '4827'
-4826 4827 0
c Var 'aux1194' direct represents '1' with '4828'
4826 -4827 4828 0
-4828 4827 0
-4828 -4826 0
c Var 'aux1194' direct represents '2' with '-4827'
4826 4828 -4827 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '4829'
c Var 'aux1195' direct represents '0' with '4829'
c Var 'aux1195' order represents '1' with '4830'
-4829 4830 0
c Var 'aux1195' direct represents '1' with '4831'
4829 -4830 4831 0
-4831 4830 0
-4831 -4829 0
c Var 'aux1195' direct represents '2' with '-4830'
4829 4831 -4830 0
c Encoding variable: aux1196 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1195))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '4832'
c Var 'aux1196' direct represents '0' with '4832'
c Var 'aux1196' order represents '1' with '4833'
-4832 4833 0
c Var 'aux1196' direct represents '1' with '4834'
4832 -4833 4834 0
-4834 4833 0
-4834 -4832 0
c Var 'aux1196' order represents '2' with '4835'
-4833 4835 0
c Var 'aux1196' direct represents '2' with '4836'
4833 -4835 4836 0
-4836 4835 0
-4836 -4833 0
c Var 'aux1196' direct represents '3' with '-4835'
4832 4834 4836 -4835 0
c Encoding variable: aux1197 with domain: int(0..4) (representing constraint (aux1192 + aux1194))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '4837'
c Var 'aux1197' direct represents '0' with '4837'
c Var 'aux1197' order represents '1' with '4838'
-4837 4838 0
c Var 'aux1197' direct represents '1' with '4839'
4837 -4838 4839 0
-4839 4838 0
-4839 -4837 0
c Var 'aux1197' order represents '2' with '4840'
-4838 4840 0
c Var 'aux1197' direct represents '2' with '4841'
4838 -4840 4841 0
-4841 4840 0
-4841 -4838 0
c Var 'aux1197' order represents '3' with '4842'
-4840 4842 0
c Var 'aux1197' direct represents '3' with '4843'
4840 -4842 4843 0
-4843 4842 0
-4843 -4840 0
c Var 'aux1197' direct represents '4' with '-4842'
4837 4839 4841 4843 -4842 0
c Encoding variable: aux1198 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '4844'
c Var 'aux1198' direct represents '0' with '4844'
c Var 'aux1198' order represents '1' with '4845'
-4844 4845 0
c Var 'aux1198' direct represents '1' with '4846'
4844 -4845 4846 0
-4846 4845 0
-4846 -4844 0
c Var 'aux1198' direct represents '2' with '-4845'
4844 4846 -4845 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '4847'
c Var 'aux1199' direct represents '0' with '4847'
c Var 'aux1199' order represents '1' with '4848'
-4847 4848 0
c Var 'aux1199' direct represents '1' with '4849'
4847 -4848 4849 0
-4849 4848 0
-4849 -4847 0
c Var 'aux1199' direct represents '2' with '-4848'
4847 4849 -4848 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '4850'
c Var 'aux1200' direct represents '0' with '4850'
c Var 'aux1200' order represents '1' with '4851'
-4850 4851 0
c Var 'aux1200' direct represents '1' with '4852'
4850 -4851 4852 0
-4852 4851 0
-4852 -4850 0
c Var 'aux1200' direct represents '2' with '-4851'
4850 4852 -4851 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '4853'
c Var 'aux1201' direct represents '0' with '4853'
c Var 'aux1201' order represents '1' with '4854'
-4853 4854 0
c Var 'aux1201' direct represents '1' with '4855'
4853 -4854 4855 0
-4855 4854 0
-4855 -4853 0
c Var 'aux1201' direct represents '2' with '-4854'
4853 4855 -4854 0
c Encoding variable: aux1202 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1201))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '4856'
c Var 'aux1202' direct represents '0' with '4856'
c Var 'aux1202' order represents '1' with '4857'
-4856 4857 0
c Var 'aux1202' direct represents '1' with '4858'
4856 -4857 4858 0
-4858 4857 0
-4858 -4856 0
c Var 'aux1202' order represents '2' with '4859'
-4857 4859 0
c Var 'aux1202' direct represents '2' with '4860'
4857 -4859 4860 0
-4860 4859 0
-4860 -4857 0
c Var 'aux1202' direct represents '3' with '-4859'
4856 4858 4860 -4859 0
c Encoding variable: aux1203 with domain: int(0..4) (representing constraint (aux1198 + aux1200))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '4861'
c Var 'aux1203' direct represents '0' with '4861'
c Var 'aux1203' order represents '1' with '4862'
-4861 4862 0
c Var 'aux1203' direct represents '1' with '4863'
4861 -4862 4863 0
-4863 4862 0
-4863 -4861 0
c Var 'aux1203' order represents '2' with '4864'
-4862 4864 0
c Var 'aux1203' direct represents '2' with '4865'
4862 -4864 4865 0
-4865 4864 0
-4865 -4862 0
c Var 'aux1203' order represents '3' with '4866'
-4864 4866 0
c Var 'aux1203' direct represents '3' with '4867'
4864 -4866 4867 0
-4867 4866 0
-4867 -4864 0
c Var 'aux1203' direct represents '4' with '-4866'
4861 4863 4865 4867 -4866 0
c Encoding variable: aux1204 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '4868'
c Var 'aux1204' direct represents '0' with '4868'
c Var 'aux1204' order represents '1' with '4869'
-4868 4869 0
c Var 'aux1204' direct represents '1' with '4870'
4868 -4869 4870 0
-4870 4869 0
-4870 -4868 0
c Var 'aux1204' direct represents '2' with '-4869'
4868 4870 -4869 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '4871'
c Var 'aux1205' direct represents '0' with '4871'
c Var 'aux1205' order represents '1' with '4872'
-4871 4872 0
c Var 'aux1205' direct represents '1' with '4873'
4871 -4872 4873 0
-4873 4872 0
-4873 -4871 0
c Var 'aux1205' direct represents '2' with '-4872'
4871 4873 -4872 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '4874'
c Var 'aux1206' direct represents '0' with '4874'
c Var 'aux1206' order represents '1' with '4875'
-4874 4875 0
c Var 'aux1206' direct represents '1' with '4876'
4874 -4875 4876 0
-4876 4875 0
-4876 -4874 0
c Var 'aux1206' direct represents '2' with '-4875'
4874 4876 -4875 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '4877'
c Var 'aux1207' direct represents '0' with '4877'
c Var 'aux1207' order represents '1' with '4878'
-4877 4878 0
c Var 'aux1207' direct represents '1' with '4879'
4877 -4878 4879 0
-4879 4878 0
-4879 -4877 0
c Var 'aux1207' direct represents '2' with '-4878'
4877 4879 -4878 0
c Encoding variable: aux1208 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1207))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '4880'
c Var 'aux1208' direct represents '0' with '4880'
c Var 'aux1208' order represents '1' with '4881'
-4880 4881 0
c Var 'aux1208' direct represents '1' with '4882'
4880 -4881 4882 0
-4882 4881 0
-4882 -4880 0
c Var 'aux1208' order represents '2' with '4883'
-4881 4883 0
c Var 'aux1208' direct represents '2' with '4884'
4881 -4883 4884 0
-4884 4883 0
-4884 -4881 0
c Var 'aux1208' direct represents '3' with '-4883'
4880 4882 4884 -4883 0
c Encoding variable: aux1209 with domain: int(0..4) (representing constraint (aux1204 + aux1206))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '4885'
c Var 'aux1209' direct represents '0' with '4885'
c Var 'aux1209' order represents '1' with '4886'
-4885 4886 0
c Var 'aux1209' direct represents '1' with '4887'
4885 -4886 4887 0
-4887 4886 0
-4887 -4885 0
c Var 'aux1209' order represents '2' with '4888'
-4886 4888 0
c Var 'aux1209' direct represents '2' with '4889'
4886 -4888 4889 0
-4889 4888 0
-4889 -4886 0
c Var 'aux1209' order represents '3' with '4890'
-4888 4890 0
c Var 'aux1209' direct represents '3' with '4891'
4888 -4890 4891 0
-4891 4890 0
-4891 -4888 0
c Var 'aux1209' direct represents '4' with '-4890'
4885 4887 4889 4891 -4890 0
c Encoding variable: aux1210 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '4892'
c Var 'aux1210' direct represents '0' with '4892'
c Var 'aux1210' order represents '1' with '4893'
-4892 4893 0
c Var 'aux1210' direct represents '1' with '4894'
4892 -4893 4894 0
-4894 4893 0
-4894 -4892 0
c Var 'aux1210' direct represents '2' with '-4893'
4892 4894 -4893 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '4895'
c Var 'aux1211' direct represents '0' with '4895'
c Var 'aux1211' order represents '1' with '4896'
-4895 4896 0
c Var 'aux1211' direct represents '1' with '4897'
4895 -4896 4897 0
-4897 4896 0
-4897 -4895 0
c Var 'aux1211' direct represents '2' with '-4896'
4895 4897 -4896 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '4898'
c Var 'aux1212' direct represents '0' with '4898'
c Var 'aux1212' order represents '1' with '4899'
-4898 4899 0
c Var 'aux1212' direct represents '1' with '4900'
4898 -4899 4900 0
-4900 4899 0
-4900 -4898 0
c Var 'aux1212' direct represents '2' with '-4899'
4898 4900 -4899 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '4901'
c Var 'aux1213' direct represents '0' with '4901'
c Var 'aux1213' order represents '1' with '4902'
-4901 4902 0
c Var 'aux1213' direct represents '1' with '4903'
4901 -4902 4903 0
-4903 4902 0
-4903 -4901 0
c Var 'aux1213' direct represents '2' with '-4902'
4901 4903 -4902 0
c Encoding variable: aux1214 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1213))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '4904'
c Var 'aux1214' direct represents '0' with '4904'
c Var 'aux1214' order represents '1' with '4905'
-4904 4905 0
c Var 'aux1214' direct represents '1' with '4906'
4904 -4905 4906 0
-4906 4905 0
-4906 -4904 0
c Var 'aux1214' order represents '2' with '4907'
-4905 4907 0
c Var 'aux1214' direct represents '2' with '4908'
4905 -4907 4908 0
-4908 4907 0
-4908 -4905 0
c Var 'aux1214' direct represents '3' with '-4907'
4904 4906 4908 -4907 0
c Encoding variable: aux1215 with domain: int(0..4) (representing constraint (aux1210 + aux1212))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '4909'
c Var 'aux1215' direct represents '0' with '4909'
c Var 'aux1215' order represents '1' with '4910'
-4909 4910 0
c Var 'aux1215' direct represents '1' with '4911'
4909 -4910 4911 0
-4911 4910 0
-4911 -4909 0
c Var 'aux1215' order represents '2' with '4912'
-4910 4912 0
c Var 'aux1215' direct represents '2' with '4913'
4910 -4912 4913 0
-4913 4912 0
-4913 -4910 0
c Var 'aux1215' order represents '3' with '4914'
-4912 4914 0
c Var 'aux1215' direct represents '3' with '4915'
4912 -4914 4915 0
-4915 4914 0
-4915 -4912 0
c Var 'aux1215' direct represents '4' with '-4914'
4909 4911 4913 4915 -4914 0
c Encoding variable: aux1216 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '4916'
c Var 'aux1216' direct represents '0' with '4916'
c Var 'aux1216' order represents '1' with '4917'
-4916 4917 0
c Var 'aux1216' direct represents '1' with '4918'
4916 -4917 4918 0
-4918 4917 0
-4918 -4916 0
c Var 'aux1216' direct represents '2' with '-4917'
4916 4918 -4917 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '4919'
c Var 'aux1217' direct represents '0' with '4919'
c Var 'aux1217' order represents '1' with '4920'
-4919 4920 0
c Var 'aux1217' direct represents '1' with '4921'
4919 -4920 4921 0
-4921 4920 0
-4921 -4919 0
c Var 'aux1217' direct represents '2' with '-4920'
4919 4921 -4920 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '4922'
c Var 'aux1218' direct represents '0' with '4922'
c Var 'aux1218' order represents '1' with '4923'
-4922 4923 0
c Var 'aux1218' direct represents '1' with '4924'
4922 -4923 4924 0
-4924 4923 0
-4924 -4922 0
c Var 'aux1218' direct represents '2' with '-4923'
4922 4924 -4923 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '4925'
c Var 'aux1219' direct represents '0' with '4925'
c Var 'aux1219' order represents '1' with '4926'
-4925 4926 0
c Var 'aux1219' direct represents '1' with '4927'
4925 -4926 4927 0
-4927 4926 0
-4927 -4925 0
c Var 'aux1219' direct represents '2' with '-4926'
4925 4927 -4926 0
c Encoding variable: aux1220 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1219))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '4928'
c Var 'aux1220' direct represents '0' with '4928'
c Var 'aux1220' order represents '1' with '4929'
-4928 4929 0
c Var 'aux1220' direct represents '1' with '4930'
4928 -4929 4930 0
-4930 4929 0
-4930 -4928 0
c Var 'aux1220' order represents '2' with '4931'
-4929 4931 0
c Var 'aux1220' direct represents '2' with '4932'
4929 -4931 4932 0
-4932 4931 0
-4932 -4929 0
c Var 'aux1220' direct represents '3' with '-4931'
4928 4930 4932 -4931 0
c Encoding variable: aux1221 with domain: int(0..4) (representing constraint (aux1216 + aux1218))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '4933'
c Var 'aux1221' direct represents '0' with '4933'
c Var 'aux1221' order represents '1' with '4934'
-4933 4934 0
c Var 'aux1221' direct represents '1' with '4935'
4933 -4934 4935 0
-4935 4934 0
-4935 -4933 0
c Var 'aux1221' order represents '2' with '4936'
-4934 4936 0
c Var 'aux1221' direct represents '2' with '4937'
4934 -4936 4937 0
-4937 4936 0
-4937 -4934 0
c Var 'aux1221' order represents '3' with '4938'
-4936 4938 0
c Var 'aux1221' direct represents '3' with '4939'
4936 -4938 4939 0
-4939 4938 0
-4939 -4936 0
c Var 'aux1221' direct represents '4' with '-4938'
4933 4935 4937 4939 -4938 0
c Encoding variable: aux1222 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '4940'
c Var 'aux1222' direct represents '0' with '4940'
c Var 'aux1222' order represents '1' with '4941'
-4940 4941 0
c Var 'aux1222' direct represents '1' with '4942'
4940 -4941 4942 0
-4942 4941 0
-4942 -4940 0
c Var 'aux1222' direct represents '2' with '-4941'
4940 4942 -4941 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '4943'
c Var 'aux1223' direct represents '0' with '4943'
c Var 'aux1223' order represents '1' with '4944'
-4943 4944 0
c Var 'aux1223' direct represents '1' with '4945'
4943 -4944 4945 0
-4945 4944 0
-4945 -4943 0
c Var 'aux1223' direct represents '2' with '-4944'
4943 4945 -4944 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '4946'
c Var 'aux1224' direct represents '0' with '4946'
c Var 'aux1224' order represents '1' with '4947'
-4946 4947 0
c Var 'aux1224' direct represents '1' with '4948'
4946 -4947 4948 0
-4948 4947 0
-4948 -4946 0
c Var 'aux1224' direct represents '2' with '-4947'
4946 4948 -4947 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '4949'
c Var 'aux1225' direct represents '0' with '4949'
c Var 'aux1225' order represents '1' with '4950'
-4949 4950 0
c Var 'aux1225' direct represents '1' with '4951'
4949 -4950 4951 0
-4951 4950 0
-4951 -4949 0
c Var 'aux1225' direct represents '2' with '-4950'
4949 4951 -4950 0
c Encoding variable: aux1226 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1225))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '4952'
c Var 'aux1226' direct represents '0' with '4952'
c Var 'aux1226' order represents '1' with '4953'
-4952 4953 0
c Var 'aux1226' direct represents '1' with '4954'
4952 -4953 4954 0
-4954 4953 0
-4954 -4952 0
c Var 'aux1226' order represents '2' with '4955'
-4953 4955 0
c Var 'aux1226' direct represents '2' with '4956'
4953 -4955 4956 0
-4956 4955 0
-4956 -4953 0
c Var 'aux1226' direct represents '3' with '-4955'
4952 4954 4956 -4955 0
c Encoding variable: aux1227 with domain: int(0..4) (representing constraint (aux1222 + aux1224))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '4957'
c Var 'aux1227' direct represents '0' with '4957'
c Var 'aux1227' order represents '1' with '4958'
-4957 4958 0
c Var 'aux1227' direct represents '1' with '4959'
4957 -4958 4959 0
-4959 4958 0
-4959 -4957 0
c Var 'aux1227' order represents '2' with '4960'
-4958 4960 0
c Var 'aux1227' direct represents '2' with '4961'
4958 -4960 4961 0
-4961 4960 0
-4961 -4958 0
c Var 'aux1227' order represents '3' with '4962'
-4960 4962 0
c Var 'aux1227' direct represents '3' with '4963'
4960 -4962 4963 0
-4963 4962 0
-4963 -4960 0
c Var 'aux1227' direct represents '4' with '-4962'
4957 4959 4961 4963 -4962 0
c Encoding variable: aux1228 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '4964'
c Var 'aux1228' direct represents '0' with '4964'
c Var 'aux1228' order represents '1' with '4965'
-4964 4965 0
c Var 'aux1228' direct represents '1' with '4966'
4964 -4965 4966 0
-4966 4965 0
-4966 -4964 0
c Var 'aux1228' direct represents '2' with '-4965'
4964 4966 -4965 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '4967'
c Var 'aux1229' direct represents '0' with '4967'
c Var 'aux1229' order represents '1' with '4968'
-4967 4968 0
c Var 'aux1229' direct represents '1' with '4969'
4967 -4968 4969 0
-4969 4968 0
-4969 -4967 0
c Var 'aux1229' direct represents '2' with '-4968'
4967 4969 -4968 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '4970'
c Var 'aux1230' direct represents '0' with '4970'
c Var 'aux1230' order represents '1' with '4971'
-4970 4971 0
c Var 'aux1230' direct represents '1' with '4972'
4970 -4971 4972 0
-4972 4971 0
-4972 -4970 0
c Var 'aux1230' direct represents '2' with '-4971'
4970 4972 -4971 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '4973'
c Var 'aux1231' direct represents '0' with '4973'
c Var 'aux1231' order represents '1' with '4974'
-4973 4974 0
c Var 'aux1231' direct represents '1' with '4975'
4973 -4974 4975 0
-4975 4974 0
-4975 -4973 0
c Var 'aux1231' direct represents '2' with '-4974'
4973 4975 -4974 0
c Encoding variable: aux1232 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1231))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '4976'
c Var 'aux1232' direct represents '0' with '4976'
c Var 'aux1232' order represents '1' with '4977'
-4976 4977 0
c Var 'aux1232' direct represents '1' with '4978'
4976 -4977 4978 0
-4978 4977 0
-4978 -4976 0
c Var 'aux1232' order represents '2' with '4979'
-4977 4979 0
c Var 'aux1232' direct represents '2' with '4980'
4977 -4979 4980 0
-4980 4979 0
-4980 -4977 0
c Var 'aux1232' direct represents '3' with '-4979'
4976 4978 4980 -4979 0
c Encoding variable: aux1233 with domain: int(0..4) (representing constraint (aux1228 + aux1230))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '4981'
c Var 'aux1233' direct represents '0' with '4981'
c Var 'aux1233' order represents '1' with '4982'
-4981 4982 0
c Var 'aux1233' direct represents '1' with '4983'
4981 -4982 4983 0
-4983 4982 0
-4983 -4981 0
c Var 'aux1233' order represents '2' with '4984'
-4982 4984 0
c Var 'aux1233' direct represents '2' with '4985'
4982 -4984 4985 0
-4985 4984 0
-4985 -4982 0
c Var 'aux1233' order represents '3' with '4986'
-4984 4986 0
c Var 'aux1233' direct represents '3' with '4987'
4984 -4986 4987 0
-4987 4986 0
-4987 -4984 0
c Var 'aux1233' direct represents '4' with '-4986'
4981 4983 4985 4987 -4986 0
c Encoding variable: aux1234 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '4988'
c Var 'aux1234' direct represents '0' with '4988'
c Var 'aux1234' order represents '1' with '4989'
-4988 4989 0
c Var 'aux1234' direct represents '1' with '4990'
4988 -4989 4990 0
-4990 4989 0
-4990 -4988 0
c Var 'aux1234' direct represents '2' with '-4989'
4988 4990 -4989 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '4991'
c Var 'aux1235' direct represents '0' with '4991'
c Var 'aux1235' order represents '1' with '4992'
-4991 4992 0
c Var 'aux1235' direct represents '1' with '4993'
4991 -4992 4993 0
-4993 4992 0
-4993 -4991 0
c Var 'aux1235' direct represents '2' with '-4992'
4991 4993 -4992 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '4994'
c Var 'aux1236' direct represents '0' with '4994'
c Var 'aux1236' order represents '1' with '4995'
-4994 4995 0
c Var 'aux1236' direct represents '1' with '4996'
4994 -4995 4996 0
-4996 4995 0
-4996 -4994 0
c Var 'aux1236' direct represents '2' with '-4995'
4994 4996 -4995 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '4997'
c Var 'aux1237' direct represents '0' with '4997'
c Var 'aux1237' order represents '1' with '4998'
-4997 4998 0
c Var 'aux1237' direct represents '1' with '4999'
4997 -4998 4999 0
-4999 4998 0
-4999 -4997 0
c Var 'aux1237' direct represents '2' with '-4998'
4997 4999 -4998 0
c Encoding variable: aux1238 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1237))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5000'
c Var 'aux1238' direct represents '0' with '5000'
c Var 'aux1238' order represents '1' with '5001'
-5000 5001 0
c Var 'aux1238' direct represents '1' with '5002'
5000 -5001 5002 0
-5002 5001 0
-5002 -5000 0
c Var 'aux1238' order represents '2' with '5003'
-5001 5003 0
c Var 'aux1238' direct represents '2' with '5004'
5001 -5003 5004 0
-5004 5003 0
-5004 -5001 0
c Var 'aux1238' direct represents '3' with '-5003'
5000 5002 5004 -5003 0
c Encoding variable: aux1239 with domain: int(0..4) (representing constraint (aux1234 + aux1236))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5005'
c Var 'aux1239' direct represents '0' with '5005'
c Var 'aux1239' order represents '1' with '5006'
-5005 5006 0
c Var 'aux1239' direct represents '1' with '5007'
5005 -5006 5007 0
-5007 5006 0
-5007 -5005 0
c Var 'aux1239' order represents '2' with '5008'
-5006 5008 0
c Var 'aux1239' direct represents '2' with '5009'
5006 -5008 5009 0
-5009 5008 0
-5009 -5006 0
c Var 'aux1239' order represents '3' with '5010'
-5008 5010 0
c Var 'aux1239' direct represents '3' with '5011'
5008 -5010 5011 0
-5011 5010 0
-5011 -5008 0
c Var 'aux1239' direct represents '4' with '-5010'
5005 5007 5009 5011 -5010 0
c Encoding variable: aux1240 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5012'
c Var 'aux1240' direct represents '0' with '5012'
c Var 'aux1240' order represents '1' with '5013'
-5012 5013 0
c Var 'aux1240' direct represents '1' with '5014'
5012 -5013 5014 0
-5014 5013 0
-5014 -5012 0
c Var 'aux1240' direct represents '2' with '-5013'
5012 5014 -5013 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5015'
c Var 'aux1241' direct represents '0' with '5015'
c Var 'aux1241' order represents '1' with '5016'
-5015 5016 0
c Var 'aux1241' direct represents '1' with '5017'
5015 -5016 5017 0
-5017 5016 0
-5017 -5015 0
c Var 'aux1241' direct represents '2' with '-5016'
5015 5017 -5016 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5018'
c Var 'aux1242' direct represents '0' with '5018'
c Var 'aux1242' order represents '1' with '5019'
-5018 5019 0
c Var 'aux1242' direct represents '1' with '5020'
5018 -5019 5020 0
-5020 5019 0
-5020 -5018 0
c Var 'aux1242' direct represents '2' with '-5019'
5018 5020 -5019 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5021'
c Var 'aux1243' direct represents '0' with '5021'
c Var 'aux1243' order represents '1' with '5022'
-5021 5022 0
c Var 'aux1243' direct represents '1' with '5023'
5021 -5022 5023 0
-5023 5022 0
-5023 -5021 0
c Var 'aux1243' direct represents '2' with '-5022'
5021 5023 -5022 0
c Encoding variable: aux1244 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1243))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5024'
c Var 'aux1244' direct represents '0' with '5024'
c Var 'aux1244' order represents '1' with '5025'
-5024 5025 0
c Var 'aux1244' direct represents '1' with '5026'
5024 -5025 5026 0
-5026 5025 0
-5026 -5024 0
c Var 'aux1244' order represents '2' with '5027'
-5025 5027 0
c Var 'aux1244' direct represents '2' with '5028'
5025 -5027 5028 0
-5028 5027 0
-5028 -5025 0
c Var 'aux1244' direct represents '3' with '-5027'
5024 5026 5028 -5027 0
c Encoding variable: aux1245 with domain: int(0..4) (representing constraint (aux1240 + aux1242))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5029'
c Var 'aux1245' direct represents '0' with '5029'
c Var 'aux1245' order represents '1' with '5030'
-5029 5030 0
c Var 'aux1245' direct represents '1' with '5031'
5029 -5030 5031 0
-5031 5030 0
-5031 -5029 0
c Var 'aux1245' order represents '2' with '5032'
-5030 5032 0
c Var 'aux1245' direct represents '2' with '5033'
5030 -5032 5033 0
-5033 5032 0
-5033 -5030 0
c Var 'aux1245' order represents '3' with '5034'
-5032 5034 0
c Var 'aux1245' direct represents '3' with '5035'
5032 -5034 5035 0
-5035 5034 0
-5035 -5032 0
c Var 'aux1245' direct represents '4' with '-5034'
5029 5031 5033 5035 -5034 0
c Encoding variable: aux1246 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5036'
c Var 'aux1246' direct represents '0' with '5036'
c Var 'aux1246' order represents '1' with '5037'
-5036 5037 0
c Var 'aux1246' direct represents '1' with '5038'
5036 -5037 5038 0
-5038 5037 0
-5038 -5036 0
c Var 'aux1246' direct represents '2' with '-5037'
5036 5038 -5037 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5039'
c Var 'aux1247' direct represents '0' with '5039'
c Var 'aux1247' order represents '1' with '5040'
-5039 5040 0
c Var 'aux1247' direct represents '1' with '5041'
5039 -5040 5041 0
-5041 5040 0
-5041 -5039 0
c Var 'aux1247' direct represents '2' with '-5040'
5039 5041 -5040 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5042'
c Var 'aux1248' direct represents '0' with '5042'
c Var 'aux1248' order represents '1' with '5043'
-5042 5043 0
c Var 'aux1248' direct represents '1' with '5044'
5042 -5043 5044 0
-5044 5043 0
-5044 -5042 0
c Var 'aux1248' direct represents '2' with '-5043'
5042 5044 -5043 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5045'
c Var 'aux1249' direct represents '0' with '5045'
c Var 'aux1249' order represents '1' with '5046'
-5045 5046 0
c Var 'aux1249' direct represents '1' with '5047'
5045 -5046 5047 0
-5047 5046 0
-5047 -5045 0
c Var 'aux1249' direct represents '2' with '-5046'
5045 5047 -5046 0
c Encoding variable: aux1250 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1249))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5048'
c Var 'aux1250' direct represents '0' with '5048'
c Var 'aux1250' order represents '1' with '5049'
-5048 5049 0
c Var 'aux1250' direct represents '1' with '5050'
5048 -5049 5050 0
-5050 5049 0
-5050 -5048 0
c Var 'aux1250' order represents '2' with '5051'
-5049 5051 0
c Var 'aux1250' direct represents '2' with '5052'
5049 -5051 5052 0
-5052 5051 0
-5052 -5049 0
c Var 'aux1250' direct represents '3' with '-5051'
5048 5050 5052 -5051 0
c Encoding variable: aux1251 with domain: int(0..4) (representing constraint (aux1246 + aux1248))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5053'
c Var 'aux1251' direct represents '0' with '5053'
c Var 'aux1251' order represents '1' with '5054'
-5053 5054 0
c Var 'aux1251' direct represents '1' with '5055'
5053 -5054 5055 0
-5055 5054 0
-5055 -5053 0
c Var 'aux1251' order represents '2' with '5056'
-5054 5056 0
c Var 'aux1251' direct represents '2' with '5057'
5054 -5056 5057 0
-5057 5056 0
-5057 -5054 0
c Var 'aux1251' order represents '3' with '5058'
-5056 5058 0
c Var 'aux1251' direct represents '3' with '5059'
5056 -5058 5059 0
-5059 5058 0
-5059 -5056 0
c Var 'aux1251' direct represents '4' with '-5058'
5053 5055 5057 5059 -5058 0
c Encoding variable: aux1252 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5060'
c Var 'aux1252' direct represents '0' with '5060'
c Var 'aux1252' order represents '1' with '5061'
-5060 5061 0
c Var 'aux1252' direct represents '1' with '5062'
5060 -5061 5062 0
-5062 5061 0
-5062 -5060 0
c Var 'aux1252' direct represents '2' with '-5061'
5060 5062 -5061 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5063'
c Var 'aux1253' direct represents '0' with '5063'
c Var 'aux1253' order represents '1' with '5064'
-5063 5064 0
c Var 'aux1253' direct represents '1' with '5065'
5063 -5064 5065 0
-5065 5064 0
-5065 -5063 0
c Var 'aux1253' direct represents '2' with '-5064'
5063 5065 -5064 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5066'
c Var 'aux1254' direct represents '0' with '5066'
c Var 'aux1254' order represents '1' with '5067'
-5066 5067 0
c Var 'aux1254' direct represents '1' with '5068'
5066 -5067 5068 0
-5068 5067 0
-5068 -5066 0
c Var 'aux1254' direct represents '2' with '-5067'
5066 5068 -5067 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5069'
c Var 'aux1255' direct represents '0' with '5069'
c Var 'aux1255' order represents '1' with '5070'
-5069 5070 0
c Var 'aux1255' direct represents '1' with '5071'
5069 -5070 5071 0
-5071 5070 0
-5071 -5069 0
c Var 'aux1255' direct represents '2' with '-5070'
5069 5071 -5070 0
c Encoding variable: aux1256 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1255))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5072'
c Var 'aux1256' direct represents '0' with '5072'
c Var 'aux1256' order represents '1' with '5073'
-5072 5073 0
c Var 'aux1256' direct represents '1' with '5074'
5072 -5073 5074 0
-5074 5073 0
-5074 -5072 0
c Var 'aux1256' order represents '2' with '5075'
-5073 5075 0
c Var 'aux1256' direct represents '2' with '5076'
5073 -5075 5076 0
-5076 5075 0
-5076 -5073 0
c Var 'aux1256' direct represents '3' with '-5075'
5072 5074 5076 -5075 0
c Encoding variable: aux1257 with domain: int(0..4) (representing constraint (aux1252 + aux1254))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5077'
c Var 'aux1257' direct represents '0' with '5077'
c Var 'aux1257' order represents '1' with '5078'
-5077 5078 0
c Var 'aux1257' direct represents '1' with '5079'
5077 -5078 5079 0
-5079 5078 0
-5079 -5077 0
c Var 'aux1257' order represents '2' with '5080'
-5078 5080 0
c Var 'aux1257' direct represents '2' with '5081'
5078 -5080 5081 0
-5081 5080 0
-5081 -5078 0
c Var 'aux1257' order represents '3' with '5082'
-5080 5082 0
c Var 'aux1257' direct represents '3' with '5083'
5080 -5082 5083 0
-5083 5082 0
-5083 -5080 0
c Var 'aux1257' direct represents '4' with '-5082'
5077 5079 5081 5083 -5082 0
c Encoding variable: aux1258 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5084'
c Var 'aux1258' direct represents '0' with '5084'
c Var 'aux1258' order represents '1' with '5085'
-5084 5085 0
c Var 'aux1258' direct represents '1' with '5086'
5084 -5085 5086 0
-5086 5085 0
-5086 -5084 0
c Var 'aux1258' direct represents '2' with '-5085'
5084 5086 -5085 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5087'
c Var 'aux1259' direct represents '0' with '5087'
c Var 'aux1259' order represents '1' with '5088'
-5087 5088 0
c Var 'aux1259' direct represents '1' with '5089'
5087 -5088 5089 0
-5089 5088 0
-5089 -5087 0
c Var 'aux1259' direct represents '2' with '-5088'
5087 5089 -5088 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5090'
c Var 'aux1260' direct represents '0' with '5090'
c Var 'aux1260' order represents '1' with '5091'
-5090 5091 0
c Var 'aux1260' direct represents '1' with '5092'
5090 -5091 5092 0
-5092 5091 0
-5092 -5090 0
c Var 'aux1260' direct represents '2' with '-5091'
5090 5092 -5091 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5093'
c Var 'aux1261' direct represents '0' with '5093'
c Var 'aux1261' order represents '1' with '5094'
-5093 5094 0
c Var 'aux1261' direct represents '1' with '5095'
5093 -5094 5095 0
-5095 5094 0
-5095 -5093 0
c Var 'aux1261' direct represents '2' with '-5094'
5093 5095 -5094 0
c Encoding variable: aux1262 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1261))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5096'
c Var 'aux1262' direct represents '0' with '5096'
c Var 'aux1262' order represents '1' with '5097'
-5096 5097 0
c Var 'aux1262' direct represents '1' with '5098'
5096 -5097 5098 0
-5098 5097 0
-5098 -5096 0
c Var 'aux1262' order represents '2' with '5099'
-5097 5099 0
c Var 'aux1262' direct represents '2' with '5100'
5097 -5099 5100 0
-5100 5099 0
-5100 -5097 0
c Var 'aux1262' direct represents '3' with '-5099'
5096 5098 5100 -5099 0
c Encoding variable: aux1263 with domain: int(0..4) (representing constraint (aux1258 + aux1260))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5101'
c Var 'aux1263' direct represents '0' with '5101'
c Var 'aux1263' order represents '1' with '5102'
-5101 5102 0
c Var 'aux1263' direct represents '1' with '5103'
5101 -5102 5103 0
-5103 5102 0
-5103 -5101 0
c Var 'aux1263' order represents '2' with '5104'
-5102 5104 0
c Var 'aux1263' direct represents '2' with '5105'
5102 -5104 5105 0
-5105 5104 0
-5105 -5102 0
c Var 'aux1263' order represents '3' with '5106'
-5104 5106 0
c Var 'aux1263' direct represents '3' with '5107'
5104 -5106 5107 0
-5107 5106 0
-5107 -5104 0
c Var 'aux1263' direct represents '4' with '-5106'
5101 5103 5105 5107 -5106 0
c Encoding variable: aux1264 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5108'
c Var 'aux1264' direct represents '0' with '5108'
c Var 'aux1264' order represents '1' with '5109'
-5108 5109 0
c Var 'aux1264' direct represents '1' with '5110'
5108 -5109 5110 0
-5110 5109 0
-5110 -5108 0
c Var 'aux1264' direct represents '2' with '-5109'
5108 5110 -5109 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5111'
c Var 'aux1265' direct represents '0' with '5111'
c Var 'aux1265' order represents '1' with '5112'
-5111 5112 0
c Var 'aux1265' direct represents '1' with '5113'
5111 -5112 5113 0
-5113 5112 0
-5113 -5111 0
c Var 'aux1265' direct represents '2' with '-5112'
5111 5113 -5112 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5114'
c Var 'aux1266' direct represents '0' with '5114'
c Var 'aux1266' order represents '1' with '5115'
-5114 5115 0
c Var 'aux1266' direct represents '1' with '5116'
5114 -5115 5116 0
-5116 5115 0
-5116 -5114 0
c Var 'aux1266' direct represents '2' with '-5115'
5114 5116 -5115 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5117'
c Var 'aux1267' direct represents '0' with '5117'
c Var 'aux1267' order represents '1' with '5118'
-5117 5118 0
c Var 'aux1267' direct represents '1' with '5119'
5117 -5118 5119 0
-5119 5118 0
-5119 -5117 0
c Var 'aux1267' direct represents '2' with '-5118'
5117 5119 -5118 0
c Encoding variable: aux1268 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1267))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5120'
c Var 'aux1268' direct represents '0' with '5120'
c Var 'aux1268' order represents '1' with '5121'
-5120 5121 0
c Var 'aux1268' direct represents '1' with '5122'
5120 -5121 5122 0
-5122 5121 0
-5122 -5120 0
c Var 'aux1268' order represents '2' with '5123'
-5121 5123 0
c Var 'aux1268' direct represents '2' with '5124'
5121 -5123 5124 0
-5124 5123 0
-5124 -5121 0
c Var 'aux1268' direct represents '3' with '-5123'
5120 5122 5124 -5123 0
c Encoding variable: aux1269 with domain: int(0..4) (representing constraint (aux1264 + aux1266))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5125'
c Var 'aux1269' direct represents '0' with '5125'
c Var 'aux1269' order represents '1' with '5126'
-5125 5126 0
c Var 'aux1269' direct represents '1' with '5127'
5125 -5126 5127 0
-5127 5126 0
-5127 -5125 0
c Var 'aux1269' order represents '2' with '5128'
-5126 5128 0
c Var 'aux1269' direct represents '2' with '5129'
5126 -5128 5129 0
-5129 5128 0
-5129 -5126 0
c Var 'aux1269' order represents '3' with '5130'
-5128 5130 0
c Var 'aux1269' direct represents '3' with '5131'
5128 -5130 5131 0
-5131 5130 0
-5131 -5128 0
c Var 'aux1269' direct represents '4' with '-5130'
5125 5127 5129 5131 -5130 0
c Encoding variable: aux1270 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5132'
c Var 'aux1270' direct represents '0' with '5132'
c Var 'aux1270' order represents '1' with '5133'
-5132 5133 0
c Var 'aux1270' direct represents '1' with '5134'
5132 -5133 5134 0
-5134 5133 0
-5134 -5132 0
c Var 'aux1270' direct represents '2' with '-5133'
5132 5134 -5133 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5135'
c Var 'aux1271' direct represents '0' with '5135'
c Var 'aux1271' order represents '1' with '5136'
-5135 5136 0
c Var 'aux1271' direct represents '1' with '5137'
5135 -5136 5137 0
-5137 5136 0
-5137 -5135 0
c Var 'aux1271' direct represents '2' with '-5136'
5135 5137 -5136 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5138'
c Var 'aux1272' direct represents '0' with '5138'
c Var 'aux1272' order represents '1' with '5139'
-5138 5139 0
c Var 'aux1272' direct represents '1' with '5140'
5138 -5139 5140 0
-5140 5139 0
-5140 -5138 0
c Var 'aux1272' direct represents '2' with '-5139'
5138 5140 -5139 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5141'
c Var 'aux1273' direct represents '0' with '5141'
c Var 'aux1273' order represents '1' with '5142'
-5141 5142 0
c Var 'aux1273' direct represents '1' with '5143'
5141 -5142 5143 0
-5143 5142 0
-5143 -5141 0
c Var 'aux1273' direct represents '2' with '-5142'
5141 5143 -5142 0
c Encoding variable: aux1274 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1273))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5144'
c Var 'aux1274' direct represents '0' with '5144'
c Var 'aux1274' order represents '1' with '5145'
-5144 5145 0
c Var 'aux1274' direct represents '1' with '5146'
5144 -5145 5146 0
-5146 5145 0
-5146 -5144 0
c Var 'aux1274' order represents '2' with '5147'
-5145 5147 0
c Var 'aux1274' direct represents '2' with '5148'
5145 -5147 5148 0
-5148 5147 0
-5148 -5145 0
c Var 'aux1274' direct represents '3' with '-5147'
5144 5146 5148 -5147 0
c Encoding variable: aux1275 with domain: int(0..4) (representing constraint (aux1270 + aux1272))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5149'
c Var 'aux1275' direct represents '0' with '5149'
c Var 'aux1275' order represents '1' with '5150'
-5149 5150 0
c Var 'aux1275' direct represents '1' with '5151'
5149 -5150 5151 0
-5151 5150 0
-5151 -5149 0
c Var 'aux1275' order represents '2' with '5152'
-5150 5152 0
c Var 'aux1275' direct represents '2' with '5153'
5150 -5152 5153 0
-5153 5152 0
-5153 -5150 0
c Var 'aux1275' order represents '3' with '5154'
-5152 5154 0
c Var 'aux1275' direct represents '3' with '5155'
5152 -5154 5155 0
-5155 5154 0
-5155 -5152 0
c Var 'aux1275' direct represents '4' with '-5154'
5149 5151 5153 5155 -5154 0
c Encoding variable: aux1276 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5156'
c Var 'aux1276' direct represents '0' with '5156'
c Var 'aux1276' order represents '1' with '5157'
-5156 5157 0
c Var 'aux1276' direct represents '1' with '5158'
5156 -5157 5158 0
-5158 5157 0
-5158 -5156 0
c Var 'aux1276' direct represents '2' with '-5157'
5156 5158 -5157 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5159'
c Var 'aux1277' direct represents '0' with '5159'
c Var 'aux1277' order represents '1' with '5160'
-5159 5160 0
c Var 'aux1277' direct represents '1' with '5161'
5159 -5160 5161 0
-5161 5160 0
-5161 -5159 0
c Var 'aux1277' direct represents '2' with '-5160'
5159 5161 -5160 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5162'
c Var 'aux1278' direct represents '0' with '5162'
c Var 'aux1278' order represents '1' with '5163'
-5162 5163 0
c Var 'aux1278' direct represents '1' with '5164'
5162 -5163 5164 0
-5164 5163 0
-5164 -5162 0
c Var 'aux1278' direct represents '2' with '-5163'
5162 5164 -5163 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5165'
c Var 'aux1279' direct represents '0' with '5165'
c Var 'aux1279' order represents '1' with '5166'
-5165 5166 0
c Var 'aux1279' direct represents '1' with '5167'
5165 -5166 5167 0
-5167 5166 0
-5167 -5165 0
c Var 'aux1279' direct represents '2' with '-5166'
5165 5167 -5166 0
c Encoding variable: aux1280 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1279))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5168'
c Var 'aux1280' direct represents '0' with '5168'
c Var 'aux1280' order represents '1' with '5169'
-5168 5169 0
c Var 'aux1280' direct represents '1' with '5170'
5168 -5169 5170 0
-5170 5169 0
-5170 -5168 0
c Var 'aux1280' order represents '2' with '5171'
-5169 5171 0
c Var 'aux1280' direct represents '2' with '5172'
5169 -5171 5172 0
-5172 5171 0
-5172 -5169 0
c Var 'aux1280' direct represents '3' with '-5171'
5168 5170 5172 -5171 0
c Encoding variable: aux1281 with domain: int(0..4) (representing constraint (aux1276 + aux1278))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5173'
c Var 'aux1281' direct represents '0' with '5173'
c Var 'aux1281' order represents '1' with '5174'
-5173 5174 0
c Var 'aux1281' direct represents '1' with '5175'
5173 -5174 5175 0
-5175 5174 0
-5175 -5173 0
c Var 'aux1281' order represents '2' with '5176'
-5174 5176 0
c Var 'aux1281' direct represents '2' with '5177'
5174 -5176 5177 0
-5177 5176 0
-5177 -5174 0
c Var 'aux1281' order represents '3' with '5178'
-5176 5178 0
c Var 'aux1281' direct represents '3' with '5179'
5176 -5178 5179 0
-5179 5178 0
-5179 -5176 0
c Var 'aux1281' direct represents '4' with '-5178'
5173 5175 5177 5179 -5178 0
c Encoding variable: aux1282 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5180'
c Var 'aux1282' direct represents '0' with '5180'
c Var 'aux1282' order represents '1' with '5181'
-5180 5181 0
c Var 'aux1282' direct represents '1' with '5182'
5180 -5181 5182 0
-5182 5181 0
-5182 -5180 0
c Var 'aux1282' direct represents '2' with '-5181'
5180 5182 -5181 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5183'
c Var 'aux1283' direct represents '0' with '5183'
c Var 'aux1283' order represents '1' with '5184'
-5183 5184 0
c Var 'aux1283' direct represents '1' with '5185'
5183 -5184 5185 0
-5185 5184 0
-5185 -5183 0
c Var 'aux1283' direct represents '2' with '-5184'
5183 5185 -5184 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5186'
c Var 'aux1284' direct represents '0' with '5186'
c Var 'aux1284' order represents '1' with '5187'
-5186 5187 0
c Var 'aux1284' direct represents '1' with '5188'
5186 -5187 5188 0
-5188 5187 0
-5188 -5186 0
c Var 'aux1284' direct represents '2' with '-5187'
5186 5188 -5187 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5189'
c Var 'aux1285' direct represents '0' with '5189'
c Var 'aux1285' order represents '1' with '5190'
-5189 5190 0
c Var 'aux1285' direct represents '1' with '5191'
5189 -5190 5191 0
-5191 5190 0
-5191 -5189 0
c Var 'aux1285' direct represents '2' with '-5190'
5189 5191 -5190 0
c Encoding variable: aux1286 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1285))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5192'
c Var 'aux1286' direct represents '0' with '5192'
c Var 'aux1286' order represents '1' with '5193'
-5192 5193 0
c Var 'aux1286' direct represents '1' with '5194'
5192 -5193 5194 0
-5194 5193 0
-5194 -5192 0
c Var 'aux1286' order represents '2' with '5195'
-5193 5195 0
c Var 'aux1286' direct represents '2' with '5196'
5193 -5195 5196 0
-5196 5195 0
-5196 -5193 0
c Var 'aux1286' direct represents '3' with '-5195'
5192 5194 5196 -5195 0
c Encoding variable: aux1287 with domain: int(0..4) (representing constraint (aux1282 + aux1284))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5197'
c Var 'aux1287' direct represents '0' with '5197'
c Var 'aux1287' order represents '1' with '5198'
-5197 5198 0
c Var 'aux1287' direct represents '1' with '5199'
5197 -5198 5199 0
-5199 5198 0
-5199 -5197 0
c Var 'aux1287' order represents '2' with '5200'
-5198 5200 0
c Var 'aux1287' direct represents '2' with '5201'
5198 -5200 5201 0
-5201 5200 0
-5201 -5198 0
c Var 'aux1287' order represents '3' with '5202'
-5200 5202 0
c Var 'aux1287' direct represents '3' with '5203'
5200 -5202 5203 0
-5203 5202 0
-5203 -5200 0
c Var 'aux1287' direct represents '4' with '-5202'
5197 5199 5201 5203 -5202 0
c Encoding variable: aux1288 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5204'
c Var 'aux1288' direct represents '0' with '5204'
c Var 'aux1288' order represents '1' with '5205'
-5204 5205 0
c Var 'aux1288' direct represents '1' with '5206'
5204 -5205 5206 0
-5206 5205 0
-5206 -5204 0
c Var 'aux1288' direct represents '2' with '-5205'
5204 5206 -5205 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5207'
c Var 'aux1289' direct represents '0' with '5207'
c Var 'aux1289' order represents '1' with '5208'
-5207 5208 0
c Var 'aux1289' direct represents '1' with '5209'
5207 -5208 5209 0
-5209 5208 0
-5209 -5207 0
c Var 'aux1289' direct represents '2' with '-5208'
5207 5209 -5208 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5210'
c Var 'aux1290' direct represents '0' with '5210'
c Var 'aux1290' order represents '1' with '5211'
-5210 5211 0
c Var 'aux1290' direct represents '1' with '5212'
5210 -5211 5212 0
-5212 5211 0
-5212 -5210 0
c Var 'aux1290' direct represents '2' with '-5211'
5210 5212 -5211 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5213'
c Var 'aux1291' direct represents '0' with '5213'
c Var 'aux1291' order represents '1' with '5214'
-5213 5214 0
c Var 'aux1291' direct represents '1' with '5215'
5213 -5214 5215 0
-5215 5214 0
-5215 -5213 0
c Var 'aux1291' direct represents '2' with '-5214'
5213 5215 -5214 0
c Encoding variable: aux1292 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1291))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5216'
c Var 'aux1292' direct represents '0' with '5216'
c Var 'aux1292' order represents '1' with '5217'
-5216 5217 0
c Var 'aux1292' direct represents '1' with '5218'
5216 -5217 5218 0
-5218 5217 0
-5218 -5216 0
c Var 'aux1292' order represents '2' with '5219'
-5217 5219 0
c Var 'aux1292' direct represents '2' with '5220'
5217 -5219 5220 0
-5220 5219 0
-5220 -5217 0
c Var 'aux1292' direct represents '3' with '-5219'
5216 5218 5220 -5219 0
c Encoding variable: aux1293 with domain: int(0..4) (representing constraint (aux1288 + aux1290))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5221'
c Var 'aux1293' direct represents '0' with '5221'
c Var 'aux1293' order represents '1' with '5222'
-5221 5222 0
c Var 'aux1293' direct represents '1' with '5223'
5221 -5222 5223 0
-5223 5222 0
-5223 -5221 0
c Var 'aux1293' order represents '2' with '5224'
-5222 5224 0
c Var 'aux1293' direct represents '2' with '5225'
5222 -5224 5225 0
-5225 5224 0
-5225 -5222 0
c Var 'aux1293' order represents '3' with '5226'
-5224 5226 0
c Var 'aux1293' direct represents '3' with '5227'
5224 -5226 5227 0
-5227 5226 0
-5227 -5224 0
c Var 'aux1293' direct represents '4' with '-5226'
5221 5223 5225 5227 -5226 0
c Encoding variable: aux1294 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5228'
c Var 'aux1294' direct represents '0' with '5228'
c Var 'aux1294' order represents '1' with '5229'
-5228 5229 0
c Var 'aux1294' direct represents '1' with '5230'
5228 -5229 5230 0
-5230 5229 0
-5230 -5228 0
c Var 'aux1294' direct represents '2' with '-5229'
5228 5230 -5229 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5231'
c Var 'aux1295' direct represents '0' with '5231'
c Var 'aux1295' order represents '1' with '5232'
-5231 5232 0
c Var 'aux1295' direct represents '1' with '5233'
5231 -5232 5233 0
-5233 5232 0
-5233 -5231 0
c Var 'aux1295' direct represents '2' with '-5232'
5231 5233 -5232 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5234'
c Var 'aux1296' direct represents '0' with '5234'
c Var 'aux1296' order represents '1' with '5235'
-5234 5235 0
c Var 'aux1296' direct represents '1' with '5236'
5234 -5235 5236 0
-5236 5235 0
-5236 -5234 0
c Var 'aux1296' direct represents '2' with '-5235'
5234 5236 -5235 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5237'
c Var 'aux1297' direct represents '0' with '5237'
c Var 'aux1297' order represents '1' with '5238'
-5237 5238 0
c Var 'aux1297' direct represents '1' with '5239'
5237 -5238 5239 0
-5239 5238 0
-5239 -5237 0
c Var 'aux1297' direct represents '2' with '-5238'
5237 5239 -5238 0
c Encoding variable: aux1298 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1297))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5240'
c Var 'aux1298' direct represents '0' with '5240'
c Var 'aux1298' order represents '1' with '5241'
-5240 5241 0
c Var 'aux1298' direct represents '1' with '5242'
5240 -5241 5242 0
-5242 5241 0
-5242 -5240 0
c Var 'aux1298' order represents '2' with '5243'
-5241 5243 0
c Var 'aux1298' direct represents '2' with '5244'
5241 -5243 5244 0
-5244 5243 0
-5244 -5241 0
c Var 'aux1298' direct represents '3' with '-5243'
5240 5242 5244 -5243 0
c Encoding variable: aux1299 with domain: int(0..4) (representing constraint (aux1294 + aux1296))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5245'
c Var 'aux1299' direct represents '0' with '5245'
c Var 'aux1299' order represents '1' with '5246'
-5245 5246 0
c Var 'aux1299' direct represents '1' with '5247'
5245 -5246 5247 0
-5247 5246 0
-5247 -5245 0
c Var 'aux1299' order represents '2' with '5248'
-5246 5248 0
c Var 'aux1299' direct represents '2' with '5249'
5246 -5248 5249 0
-5249 5248 0
-5249 -5246 0
c Var 'aux1299' order represents '3' with '5250'
-5248 5250 0
c Var 'aux1299' direct represents '3' with '5251'
5248 -5250 5251 0
-5251 5250 0
-5251 -5248 0
c Var 'aux1299' direct represents '4' with '-5250'
5245 5247 5249 5251 -5250 0
c Encoding variable: aux1300 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5252'
c Var 'aux1300' direct represents '0' with '5252'
c Var 'aux1300' order represents '1' with '5253'
-5252 5253 0
c Var 'aux1300' direct represents '1' with '5254'
5252 -5253 5254 0
-5254 5253 0
-5254 -5252 0
c Var 'aux1300' direct represents '2' with '-5253'
5252 5254 -5253 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5255'
c Var 'aux1301' direct represents '0' with '5255'
c Var 'aux1301' order represents '1' with '5256'
-5255 5256 0
c Var 'aux1301' direct represents '1' with '5257'
5255 -5256 5257 0
-5257 5256 0
-5257 -5255 0
c Var 'aux1301' direct represents '2' with '-5256'
5255 5257 -5256 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5258'
c Var 'aux1302' direct represents '0' with '5258'
c Var 'aux1302' order represents '1' with '5259'
-5258 5259 0
c Var 'aux1302' direct represents '1' with '5260'
5258 -5259 5260 0
-5260 5259 0
-5260 -5258 0
c Var 'aux1302' direct represents '2' with '-5259'
5258 5260 -5259 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5261'
c Var 'aux1303' direct represents '0' with '5261'
c Var 'aux1303' order represents '1' with '5262'
-5261 5262 0
c Var 'aux1303' direct represents '1' with '5263'
5261 -5262 5263 0
-5263 5262 0
-5263 -5261 0
c Var 'aux1303' direct represents '2' with '-5262'
5261 5263 -5262 0
c Encoding variable: aux1304 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1303))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5264'
c Var 'aux1304' direct represents '0' with '5264'
c Var 'aux1304' order represents '1' with '5265'
-5264 5265 0
c Var 'aux1304' direct represents '1' with '5266'
5264 -5265 5266 0
-5266 5265 0
-5266 -5264 0
c Var 'aux1304' order represents '2' with '5267'
-5265 5267 0
c Var 'aux1304' direct represents '2' with '5268'
5265 -5267 5268 0
-5268 5267 0
-5268 -5265 0
c Var 'aux1304' direct represents '3' with '-5267'
5264 5266 5268 -5267 0
c Encoding variable: aux1305 with domain: int(0..4) (representing constraint (aux1300 + aux1302))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5269'
c Var 'aux1305' direct represents '0' with '5269'
c Var 'aux1305' order represents '1' with '5270'
-5269 5270 0
c Var 'aux1305' direct represents '1' with '5271'
5269 -5270 5271 0
-5271 5270 0
-5271 -5269 0
c Var 'aux1305' order represents '2' with '5272'
-5270 5272 0
c Var 'aux1305' direct represents '2' with '5273'
5270 -5272 5273 0
-5273 5272 0
-5273 -5270 0
c Var 'aux1305' order represents '3' with '5274'
-5272 5274 0
c Var 'aux1305' direct represents '3' with '5275'
5272 -5274 5275 0
-5275 5274 0
-5275 -5272 0
c Var 'aux1305' direct represents '4' with '-5274'
5269 5271 5273 5275 -5274 0
c Encoding variable: aux1306 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5276'
c Var 'aux1306' direct represents '0' with '5276'
c Var 'aux1306' order represents '1' with '5277'
-5276 5277 0
c Var 'aux1306' direct represents '1' with '5278'
5276 -5277 5278 0
-5278 5277 0
-5278 -5276 0
c Var 'aux1306' direct represents '2' with '-5277'
5276 5278 -5277 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5279'
c Var 'aux1307' direct represents '0' with '5279'
c Var 'aux1307' order represents '1' with '5280'
-5279 5280 0
c Var 'aux1307' direct represents '1' with '5281'
5279 -5280 5281 0
-5281 5280 0
-5281 -5279 0
c Var 'aux1307' direct represents '2' with '-5280'
5279 5281 -5280 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5282'
c Var 'aux1308' direct represents '0' with '5282'
c Var 'aux1308' order represents '1' with '5283'
-5282 5283 0
c Var 'aux1308' direct represents '1' with '5284'
5282 -5283 5284 0
-5284 5283 0
-5284 -5282 0
c Var 'aux1308' direct represents '2' with '-5283'
5282 5284 -5283 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5285'
c Var 'aux1309' direct represents '0' with '5285'
c Var 'aux1309' order represents '1' with '5286'
-5285 5286 0
c Var 'aux1309' direct represents '1' with '5287'
5285 -5286 5287 0
-5287 5286 0
-5287 -5285 0
c Var 'aux1309' direct represents '2' with '-5286'
5285 5287 -5286 0
c Encoding variable: aux1310 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1309))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5288'
c Var 'aux1310' direct represents '0' with '5288'
c Var 'aux1310' order represents '1' with '5289'
-5288 5289 0
c Var 'aux1310' direct represents '1' with '5290'
5288 -5289 5290 0
-5290 5289 0
-5290 -5288 0
c Var 'aux1310' order represents '2' with '5291'
-5289 5291 0
c Var 'aux1310' direct represents '2' with '5292'
5289 -5291 5292 0
-5292 5291 0
-5292 -5289 0
c Var 'aux1310' direct represents '3' with '-5291'
5288 5290 5292 -5291 0
c Encoding variable: aux1311 with domain: int(0..4) (representing constraint (aux1306 + aux1308))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5293'
c Var 'aux1311' direct represents '0' with '5293'
c Var 'aux1311' order represents '1' with '5294'
-5293 5294 0
c Var 'aux1311' direct represents '1' with '5295'
5293 -5294 5295 0
-5295 5294 0
-5295 -5293 0
c Var 'aux1311' order represents '2' with '5296'
-5294 5296 0
c Var 'aux1311' direct represents '2' with '5297'
5294 -5296 5297 0
-5297 5296 0
-5297 -5294 0
c Var 'aux1311' order represents '3' with '5298'
-5296 5298 0
c Var 'aux1311' direct represents '3' with '5299'
5296 -5298 5299 0
-5299 5298 0
-5299 -5296 0
c Var 'aux1311' direct represents '4' with '-5298'
5293 5295 5297 5299 -5298 0
c Encoding variable: aux1312 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5300'
c Var 'aux1312' direct represents '0' with '5300'
c Var 'aux1312' order represents '1' with '5301'
-5300 5301 0
c Var 'aux1312' direct represents '1' with '5302'
5300 -5301 5302 0
-5302 5301 0
-5302 -5300 0
c Var 'aux1312' direct represents '2' with '-5301'
5300 5302 -5301 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5303'
c Var 'aux1313' direct represents '0' with '5303'
c Var 'aux1313' order represents '1' with '5304'
-5303 5304 0
c Var 'aux1313' direct represents '1' with '5305'
5303 -5304 5305 0
-5305 5304 0
-5305 -5303 0
c Var 'aux1313' direct represents '2' with '-5304'
5303 5305 -5304 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5306'
c Var 'aux1314' direct represents '0' with '5306'
c Var 'aux1314' order represents '1' with '5307'
-5306 5307 0
c Var 'aux1314' direct represents '1' with '5308'
5306 -5307 5308 0
-5308 5307 0
-5308 -5306 0
c Var 'aux1314' direct represents '2' with '-5307'
5306 5308 -5307 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5309'
c Var 'aux1315' direct represents '0' with '5309'
c Var 'aux1315' order represents '1' with '5310'
-5309 5310 0
c Var 'aux1315' direct represents '1' with '5311'
5309 -5310 5311 0
-5311 5310 0
-5311 -5309 0
c Var 'aux1315' direct represents '2' with '-5310'
5309 5311 -5310 0
c Encoding variable: aux1316 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1315))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5312'
c Var 'aux1316' direct represents '0' with '5312'
c Var 'aux1316' order represents '1' with '5313'
-5312 5313 0
c Var 'aux1316' direct represents '1' with '5314'
5312 -5313 5314 0
-5314 5313 0
-5314 -5312 0
c Var 'aux1316' order represents '2' with '5315'
-5313 5315 0
c Var 'aux1316' direct represents '2' with '5316'
5313 -5315 5316 0
-5316 5315 0
-5316 -5313 0
c Var 'aux1316' direct represents '3' with '-5315'
5312 5314 5316 -5315 0
c Encoding variable: aux1317 with domain: int(0..4) (representing constraint (aux1312 + aux1314))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5317'
c Var 'aux1317' direct represents '0' with '5317'
c Var 'aux1317' order represents '1' with '5318'
-5317 5318 0
c Var 'aux1317' direct represents '1' with '5319'
5317 -5318 5319 0
-5319 5318 0
-5319 -5317 0
c Var 'aux1317' order represents '2' with '5320'
-5318 5320 0
c Var 'aux1317' direct represents '2' with '5321'
5318 -5320 5321 0
-5321 5320 0
-5321 -5318 0
c Var 'aux1317' order represents '3' with '5322'
-5320 5322 0
c Var 'aux1317' direct represents '3' with '5323'
5320 -5322 5323 0
-5323 5322 0
-5323 -5320 0
c Var 'aux1317' direct represents '4' with '-5322'
5317 5319 5321 5323 -5322 0
c Encoding variable: aux1318 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5324'
c Var 'aux1318' direct represents '0' with '5324'
c Var 'aux1318' order represents '1' with '5325'
-5324 5325 0
c Var 'aux1318' direct represents '1' with '5326'
5324 -5325 5326 0
-5326 5325 0
-5326 -5324 0
c Var 'aux1318' direct represents '2' with '-5325'
5324 5326 -5325 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5327'
c Var 'aux1319' direct represents '0' with '5327'
c Var 'aux1319' order represents '1' with '5328'
-5327 5328 0
c Var 'aux1319' direct represents '1' with '5329'
5327 -5328 5329 0
-5329 5328 0
-5329 -5327 0
c Var 'aux1319' direct represents '2' with '-5328'
5327 5329 -5328 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5330'
c Var 'aux1320' direct represents '0' with '5330'
c Var 'aux1320' order represents '1' with '5331'
-5330 5331 0
c Var 'aux1320' direct represents '1' with '5332'
5330 -5331 5332 0
-5332 5331 0
-5332 -5330 0
c Var 'aux1320' direct represents '2' with '-5331'
5330 5332 -5331 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5333'
c Var 'aux1321' direct represents '0' with '5333'
c Var 'aux1321' order represents '1' with '5334'
-5333 5334 0
c Var 'aux1321' direct represents '1' with '5335'
5333 -5334 5335 0
-5335 5334 0
-5335 -5333 0
c Var 'aux1321' direct represents '2' with '-5334'
5333 5335 -5334 0
c Encoding variable: aux1322 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1321))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5336'
c Var 'aux1322' direct represents '0' with '5336'
c Var 'aux1322' order represents '1' with '5337'
-5336 5337 0
c Var 'aux1322' direct represents '1' with '5338'
5336 -5337 5338 0
-5338 5337 0
-5338 -5336 0
c Var 'aux1322' order represents '2' with '5339'
-5337 5339 0
c Var 'aux1322' direct represents '2' with '5340'
5337 -5339 5340 0
-5340 5339 0
-5340 -5337 0
c Var 'aux1322' direct represents '3' with '-5339'
5336 5338 5340 -5339 0
c Encoding variable: aux1323 with domain: int(0..4) (representing constraint (aux1318 + aux1320))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5341'
c Var 'aux1323' direct represents '0' with '5341'
c Var 'aux1323' order represents '1' with '5342'
-5341 5342 0
c Var 'aux1323' direct represents '1' with '5343'
5341 -5342 5343 0
-5343 5342 0
-5343 -5341 0
c Var 'aux1323' order represents '2' with '5344'
-5342 5344 0
c Var 'aux1323' direct represents '2' with '5345'
5342 -5344 5345 0
-5345 5344 0
-5345 -5342 0
c Var 'aux1323' order represents '3' with '5346'
-5344 5346 0
c Var 'aux1323' direct represents '3' with '5347'
5344 -5346 5347 0
-5347 5346 0
-5347 -5344 0
c Var 'aux1323' direct represents '4' with '-5346'
5341 5343 5345 5347 -5346 0
c Encoding variable: aux1324 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5348'
c Var 'aux1324' direct represents '0' with '5348'
c Var 'aux1324' order represents '1' with '5349'
-5348 5349 0
c Var 'aux1324' direct represents '1' with '5350'
5348 -5349 5350 0
-5350 5349 0
-5350 -5348 0
c Var 'aux1324' direct represents '2' with '-5349'
5348 5350 -5349 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5351'
c Var 'aux1325' direct represents '0' with '5351'
c Var 'aux1325' order represents '1' with '5352'
-5351 5352 0
c Var 'aux1325' direct represents '1' with '5353'
5351 -5352 5353 0
-5353 5352 0
-5353 -5351 0
c Var 'aux1325' direct represents '2' with '-5352'
5351 5353 -5352 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5354'
c Var 'aux1326' direct represents '0' with '5354'
c Var 'aux1326' order represents '1' with '5355'
-5354 5355 0
c Var 'aux1326' direct represents '1' with '5356'
5354 -5355 5356 0
-5356 5355 0
-5356 -5354 0
c Var 'aux1326' direct represents '2' with '-5355'
5354 5356 -5355 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5357'
c Var 'aux1327' direct represents '0' with '5357'
c Var 'aux1327' order represents '1' with '5358'
-5357 5358 0
c Var 'aux1327' direct represents '1' with '5359'
5357 -5358 5359 0
-5359 5358 0
-5359 -5357 0
c Var 'aux1327' direct represents '2' with '-5358'
5357 5359 -5358 0
c Encoding variable: aux1328 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1327))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5360'
c Var 'aux1328' direct represents '0' with '5360'
c Var 'aux1328' order represents '1' with '5361'
-5360 5361 0
c Var 'aux1328' direct represents '1' with '5362'
5360 -5361 5362 0
-5362 5361 0
-5362 -5360 0
c Var 'aux1328' order represents '2' with '5363'
-5361 5363 0
c Var 'aux1328' direct represents '2' with '5364'
5361 -5363 5364 0
-5364 5363 0
-5364 -5361 0
c Var 'aux1328' direct represents '3' with '-5363'
5360 5362 5364 -5363 0
c Encoding variable: aux1329 with domain: int(0..4) (representing constraint (aux1324 + aux1326))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5365'
c Var 'aux1329' direct represents '0' with '5365'
c Var 'aux1329' order represents '1' with '5366'
-5365 5366 0
c Var 'aux1329' direct represents '1' with '5367'
5365 -5366 5367 0
-5367 5366 0
-5367 -5365 0
c Var 'aux1329' order represents '2' with '5368'
-5366 5368 0
c Var 'aux1329' direct represents '2' with '5369'
5366 -5368 5369 0
-5369 5368 0
-5369 -5366 0
c Var 'aux1329' order represents '3' with '5370'
-5368 5370 0
c Var 'aux1329' direct represents '3' with '5371'
5368 -5370 5371 0
-5371 5370 0
-5371 -5368 0
c Var 'aux1329' direct represents '4' with '-5370'
5365 5367 5369 5371 -5370 0
c Encoding variable: aux1330 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5372'
c Var 'aux1330' direct represents '0' with '5372'
c Var 'aux1330' order represents '1' with '5373'
-5372 5373 0
c Var 'aux1330' direct represents '1' with '5374'
5372 -5373 5374 0
-5374 5373 0
-5374 -5372 0
c Var 'aux1330' direct represents '2' with '-5373'
5372 5374 -5373 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5375'
c Var 'aux1331' direct represents '0' with '5375'
c Var 'aux1331' order represents '1' with '5376'
-5375 5376 0
c Var 'aux1331' direct represents '1' with '5377'
5375 -5376 5377 0
-5377 5376 0
-5377 -5375 0
c Var 'aux1331' direct represents '2' with '-5376'
5375 5377 -5376 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5378'
c Var 'aux1332' direct represents '0' with '5378'
c Var 'aux1332' order represents '1' with '5379'
-5378 5379 0
c Var 'aux1332' direct represents '1' with '5380'
5378 -5379 5380 0
-5380 5379 0
-5380 -5378 0
c Var 'aux1332' direct represents '2' with '-5379'
5378 5380 -5379 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5381'
c Var 'aux1333' direct represents '0' with '5381'
c Var 'aux1333' order represents '1' with '5382'
-5381 5382 0
c Var 'aux1333' direct represents '1' with '5383'
5381 -5382 5383 0
-5383 5382 0
-5383 -5381 0
c Var 'aux1333' direct represents '2' with '-5382'
5381 5383 -5382 0
c Encoding variable: aux1334 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1333))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5384'
c Var 'aux1334' direct represents '0' with '5384'
c Var 'aux1334' order represents '1' with '5385'
-5384 5385 0
c Var 'aux1334' direct represents '1' with '5386'
5384 -5385 5386 0
-5386 5385 0
-5386 -5384 0
c Var 'aux1334' order represents '2' with '5387'
-5385 5387 0
c Var 'aux1334' direct represents '2' with '5388'
5385 -5387 5388 0
-5388 5387 0
-5388 -5385 0
c Var 'aux1334' direct represents '3' with '-5387'
5384 5386 5388 -5387 0
c Encoding variable: aux1335 with domain: int(0..4) (representing constraint (aux1330 + aux1332))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5389'
c Var 'aux1335' direct represents '0' with '5389'
c Var 'aux1335' order represents '1' with '5390'
-5389 5390 0
c Var 'aux1335' direct represents '1' with '5391'
5389 -5390 5391 0
-5391 5390 0
-5391 -5389 0
c Var 'aux1335' order represents '2' with '5392'
-5390 5392 0
c Var 'aux1335' direct represents '2' with '5393'
5390 -5392 5393 0
-5393 5392 0
-5393 -5390 0
c Var 'aux1335' order represents '3' with '5394'
-5392 5394 0
c Var 'aux1335' direct represents '3' with '5395'
5392 -5394 5395 0
-5395 5394 0
-5395 -5392 0
c Var 'aux1335' direct represents '4' with '-5394'
5389 5391 5393 5395 -5394 0
c Encoding variable: aux1336 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5396'
c Var 'aux1336' direct represents '0' with '5396'
c Var 'aux1336' order represents '1' with '5397'
-5396 5397 0
c Var 'aux1336' direct represents '1' with '5398'
5396 -5397 5398 0
-5398 5397 0
-5398 -5396 0
c Var 'aux1336' direct represents '2' with '-5397'
5396 5398 -5397 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5399'
c Var 'aux1337' direct represents '0' with '5399'
c Var 'aux1337' order represents '1' with '5400'
-5399 5400 0
c Var 'aux1337' direct represents '1' with '5401'
5399 -5400 5401 0
-5401 5400 0
-5401 -5399 0
c Var 'aux1337' direct represents '2' with '-5400'
5399 5401 -5400 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5402'
c Var 'aux1338' direct represents '0' with '5402'
c Var 'aux1338' order represents '1' with '5403'
-5402 5403 0
c Var 'aux1338' direct represents '1' with '5404'
5402 -5403 5404 0
-5404 5403 0
-5404 -5402 0
c Var 'aux1338' direct represents '2' with '-5403'
5402 5404 -5403 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5405'
c Var 'aux1339' direct represents '0' with '5405'
c Var 'aux1339' order represents '1' with '5406'
-5405 5406 0
c Var 'aux1339' direct represents '1' with '5407'
5405 -5406 5407 0
-5407 5406 0
-5407 -5405 0
c Var 'aux1339' direct represents '2' with '-5406'
5405 5407 -5406 0
c Encoding variable: aux1340 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1339))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5408'
c Var 'aux1340' direct represents '0' with '5408'
c Var 'aux1340' order represents '1' with '5409'
-5408 5409 0
c Var 'aux1340' direct represents '1' with '5410'
5408 -5409 5410 0
-5410 5409 0
-5410 -5408 0
c Var 'aux1340' order represents '2' with '5411'
-5409 5411 0
c Var 'aux1340' direct represents '2' with '5412'
5409 -5411 5412 0
-5412 5411 0
-5412 -5409 0
c Var 'aux1340' direct represents '3' with '-5411'
5408 5410 5412 -5411 0
c Encoding variable: aux1341 with domain: int(0..4) (representing constraint (aux1336 + aux1338))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5413'
c Var 'aux1341' direct represents '0' with '5413'
c Var 'aux1341' order represents '1' with '5414'
-5413 5414 0
c Var 'aux1341' direct represents '1' with '5415'
5413 -5414 5415 0
-5415 5414 0
-5415 -5413 0
c Var 'aux1341' order represents '2' with '5416'
-5414 5416 0
c Var 'aux1341' direct represents '2' with '5417'
5414 -5416 5417 0
-5417 5416 0
-5417 -5414 0
c Var 'aux1341' order represents '3' with '5418'
-5416 5418 0
c Var 'aux1341' direct represents '3' with '5419'
5416 -5418 5419 0
-5419 5418 0
-5419 -5416 0
c Var 'aux1341' direct represents '4' with '-5418'
5413 5415 5417 5419 -5418 0
c Encoding variable: aux1342 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5420'
c Var 'aux1342' direct represents '0' with '5420'
c Var 'aux1342' order represents '1' with '5421'
-5420 5421 0
c Var 'aux1342' direct represents '1' with '5422'
5420 -5421 5422 0
-5422 5421 0
-5422 -5420 0
c Var 'aux1342' direct represents '2' with '-5421'
5420 5422 -5421 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5423'
c Var 'aux1343' direct represents '0' with '5423'
c Var 'aux1343' order represents '1' with '5424'
-5423 5424 0
c Var 'aux1343' direct represents '1' with '5425'
5423 -5424 5425 0
-5425 5424 0
-5425 -5423 0
c Var 'aux1343' direct represents '2' with '-5424'
5423 5425 -5424 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5426'
c Var 'aux1344' direct represents '0' with '5426'
c Var 'aux1344' order represents '1' with '5427'
-5426 5427 0
c Var 'aux1344' direct represents '1' with '5428'
5426 -5427 5428 0
-5428 5427 0
-5428 -5426 0
c Var 'aux1344' direct represents '2' with '-5427'
5426 5428 -5427 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5429'
c Var 'aux1345' direct represents '0' with '5429'
c Var 'aux1345' order represents '1' with '5430'
-5429 5430 0
c Var 'aux1345' direct represents '1' with '5431'
5429 -5430 5431 0
-5431 5430 0
-5431 -5429 0
c Var 'aux1345' direct represents '2' with '-5430'
5429 5431 -5430 0
c Encoding variable: aux1346 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1345))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5432'
c Var 'aux1346' direct represents '0' with '5432'
c Var 'aux1346' order represents '1' with '5433'
-5432 5433 0
c Var 'aux1346' direct represents '1' with '5434'
5432 -5433 5434 0
-5434 5433 0
-5434 -5432 0
c Var 'aux1346' order represents '2' with '5435'
-5433 5435 0
c Var 'aux1346' direct represents '2' with '5436'
5433 -5435 5436 0
-5436 5435 0
-5436 -5433 0
c Var 'aux1346' direct represents '3' with '-5435'
5432 5434 5436 -5435 0
c Encoding variable: aux1347 with domain: int(0..4) (representing constraint (aux1342 + aux1344))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5437'
c Var 'aux1347' direct represents '0' with '5437'
c Var 'aux1347' order represents '1' with '5438'
-5437 5438 0
c Var 'aux1347' direct represents '1' with '5439'
5437 -5438 5439 0
-5439 5438 0
-5439 -5437 0
c Var 'aux1347' order represents '2' with '5440'
-5438 5440 0
c Var 'aux1347' direct represents '2' with '5441'
5438 -5440 5441 0
-5441 5440 0
-5441 -5438 0
c Var 'aux1347' order represents '3' with '5442'
-5440 5442 0
c Var 'aux1347' direct represents '3' with '5443'
5440 -5442 5443 0
-5443 5442 0
-5443 -5440 0
c Var 'aux1347' direct represents '4' with '-5442'
5437 5439 5441 5443 -5442 0
c Encoding variable: aux1348 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5444'
c Var 'aux1348' direct represents '0' with '5444'
c Var 'aux1348' order represents '1' with '5445'
-5444 5445 0
c Var 'aux1348' direct represents '1' with '5446'
5444 -5445 5446 0
-5446 5445 0
-5446 -5444 0
c Var 'aux1348' direct represents '2' with '-5445'
5444 5446 -5445 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5447'
c Var 'aux1349' direct represents '0' with '5447'
c Var 'aux1349' order represents '1' with '5448'
-5447 5448 0
c Var 'aux1349' direct represents '1' with '5449'
5447 -5448 5449 0
-5449 5448 0
-5449 -5447 0
c Var 'aux1349' direct represents '2' with '-5448'
5447 5449 -5448 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5450'
c Var 'aux1350' direct represents '0' with '5450'
c Var 'aux1350' order represents '1' with '5451'
-5450 5451 0
c Var 'aux1350' direct represents '1' with '5452'
5450 -5451 5452 0
-5452 5451 0
-5452 -5450 0
c Var 'aux1350' direct represents '2' with '-5451'
5450 5452 -5451 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5453'
c Var 'aux1351' direct represents '0' with '5453'
c Var 'aux1351' order represents '1' with '5454'
-5453 5454 0
c Var 'aux1351' direct represents '1' with '5455'
5453 -5454 5455 0
-5455 5454 0
-5455 -5453 0
c Var 'aux1351' direct represents '2' with '-5454'
5453 5455 -5454 0
c Encoding variable: aux1352 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1351))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5456'
c Var 'aux1352' direct represents '0' with '5456'
c Var 'aux1352' order represents '1' with '5457'
-5456 5457 0
c Var 'aux1352' direct represents '1' with '5458'
5456 -5457 5458 0
-5458 5457 0
-5458 -5456 0
c Var 'aux1352' order represents '2' with '5459'
-5457 5459 0
c Var 'aux1352' direct represents '2' with '5460'
5457 -5459 5460 0
-5460 5459 0
-5460 -5457 0
c Var 'aux1352' direct represents '3' with '-5459'
5456 5458 5460 -5459 0
c Encoding variable: aux1353 with domain: int(0..4) (representing constraint (aux1348 + aux1350))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5461'
c Var 'aux1353' direct represents '0' with '5461'
c Var 'aux1353' order represents '1' with '5462'
-5461 5462 0
c Var 'aux1353' direct represents '1' with '5463'
5461 -5462 5463 0
-5463 5462 0
-5463 -5461 0
c Var 'aux1353' order represents '2' with '5464'
-5462 5464 0
c Var 'aux1353' direct represents '2' with '5465'
5462 -5464 5465 0
-5465 5464 0
-5465 -5462 0
c Var 'aux1353' order represents '3' with '5466'
-5464 5466 0
c Var 'aux1353' direct represents '3' with '5467'
5464 -5466 5467 0
-5467 5466 0
-5467 -5464 0
c Var 'aux1353' direct represents '4' with '-5466'
5461 5463 5465 5467 -5466 0
c Encoding variable: aux1354 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5468'
c Var 'aux1354' direct represents '0' with '5468'
c Var 'aux1354' order represents '1' with '5469'
-5468 5469 0
c Var 'aux1354' direct represents '1' with '5470'
5468 -5469 5470 0
-5470 5469 0
-5470 -5468 0
c Var 'aux1354' direct represents '2' with '-5469'
5468 5470 -5469 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5471'
c Var 'aux1355' direct represents '0' with '5471'
c Var 'aux1355' order represents '1' with '5472'
-5471 5472 0
c Var 'aux1355' direct represents '1' with '5473'
5471 -5472 5473 0
-5473 5472 0
-5473 -5471 0
c Var 'aux1355' direct represents '2' with '-5472'
5471 5473 -5472 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5474'
c Var 'aux1356' direct represents '0' with '5474'
c Var 'aux1356' order represents '1' with '5475'
-5474 5475 0
c Var 'aux1356' direct represents '1' with '5476'
5474 -5475 5476 0
-5476 5475 0
-5476 -5474 0
c Var 'aux1356' direct represents '2' with '-5475'
5474 5476 -5475 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5477'
c Var 'aux1357' direct represents '0' with '5477'
c Var 'aux1357' order represents '1' with '5478'
-5477 5478 0
c Var 'aux1357' direct represents '1' with '5479'
5477 -5478 5479 0
-5479 5478 0
-5479 -5477 0
c Var 'aux1357' direct represents '2' with '-5478'
5477 5479 -5478 0
c Encoding variable: aux1358 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1357))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5480'
c Var 'aux1358' direct represents '0' with '5480'
c Var 'aux1358' order represents '1' with '5481'
-5480 5481 0
c Var 'aux1358' direct represents '1' with '5482'
5480 -5481 5482 0
-5482 5481 0
-5482 -5480 0
c Var 'aux1358' order represents '2' with '5483'
-5481 5483 0
c Var 'aux1358' direct represents '2' with '5484'
5481 -5483 5484 0
-5484 5483 0
-5484 -5481 0
c Var 'aux1358' direct represents '3' with '-5483'
5480 5482 5484 -5483 0
c Encoding variable: aux1359 with domain: int(0..4) (representing constraint (aux1354 + aux1356))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5485'
c Var 'aux1359' direct represents '0' with '5485'
c Var 'aux1359' order represents '1' with '5486'
-5485 5486 0
c Var 'aux1359' direct represents '1' with '5487'
5485 -5486 5487 0
-5487 5486 0
-5487 -5485 0
c Var 'aux1359' order represents '2' with '5488'
-5486 5488 0
c Var 'aux1359' direct represents '2' with '5489'
5486 -5488 5489 0
-5489 5488 0
-5489 -5486 0
c Var 'aux1359' order represents '3' with '5490'
-5488 5490 0
c Var 'aux1359' direct represents '3' with '5491'
5488 -5490 5491 0
-5491 5490 0
-5491 -5488 0
c Var 'aux1359' direct represents '4' with '-5490'
5485 5487 5489 5491 -5490 0
c Encoding variable: aux1360 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5492'
c Var 'aux1360' direct represents '0' with '5492'
c Var 'aux1360' order represents '1' with '5493'
-5492 5493 0
c Var 'aux1360' direct represents '1' with '5494'
5492 -5493 5494 0
-5494 5493 0
-5494 -5492 0
c Var 'aux1360' direct represents '2' with '-5493'
5492 5494 -5493 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5495'
c Var 'aux1361' direct represents '0' with '5495'
c Var 'aux1361' order represents '1' with '5496'
-5495 5496 0
c Var 'aux1361' direct represents '1' with '5497'
5495 -5496 5497 0
-5497 5496 0
-5497 -5495 0
c Var 'aux1361' direct represents '2' with '-5496'
5495 5497 -5496 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5498'
c Var 'aux1362' direct represents '0' with '5498'
c Var 'aux1362' order represents '1' with '5499'
-5498 5499 0
c Var 'aux1362' direct represents '1' with '5500'
5498 -5499 5500 0
-5500 5499 0
-5500 -5498 0
c Var 'aux1362' direct represents '2' with '-5499'
5498 5500 -5499 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5501'
c Var 'aux1363' direct represents '0' with '5501'
c Var 'aux1363' order represents '1' with '5502'
-5501 5502 0
c Var 'aux1363' direct represents '1' with '5503'
5501 -5502 5503 0
-5503 5502 0
-5503 -5501 0
c Var 'aux1363' direct represents '2' with '-5502'
5501 5503 -5502 0
c Encoding variable: aux1364 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1363))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5504'
c Var 'aux1364' direct represents '0' with '5504'
c Var 'aux1364' order represents '1' with '5505'
-5504 5505 0
c Var 'aux1364' direct represents '1' with '5506'
5504 -5505 5506 0
-5506 5505 0
-5506 -5504 0
c Var 'aux1364' order represents '2' with '5507'
-5505 5507 0
c Var 'aux1364' direct represents '2' with '5508'
5505 -5507 5508 0
-5508 5507 0
-5508 -5505 0
c Var 'aux1364' direct represents '3' with '-5507'
5504 5506 5508 -5507 0
c Encoding variable: aux1365 with domain: int(0..4) (representing constraint (aux1360 + aux1362))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5509'
c Var 'aux1365' direct represents '0' with '5509'
c Var 'aux1365' order represents '1' with '5510'
-5509 5510 0
c Var 'aux1365' direct represents '1' with '5511'
5509 -5510 5511 0
-5511 5510 0
-5511 -5509 0
c Var 'aux1365' order represents '2' with '5512'
-5510 5512 0
c Var 'aux1365' direct represents '2' with '5513'
5510 -5512 5513 0
-5513 5512 0
-5513 -5510 0
c Var 'aux1365' order represents '3' with '5514'
-5512 5514 0
c Var 'aux1365' direct represents '3' with '5515'
5512 -5514 5515 0
-5515 5514 0
-5515 -5512 0
c Var 'aux1365' direct represents '4' with '-5514'
5509 5511 5513 5515 -5514 0
c Encoding variable: aux1366 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5516'
c Var 'aux1366' direct represents '0' with '5516'
c Var 'aux1366' order represents '1' with '5517'
-5516 5517 0
c Var 'aux1366' direct represents '1' with '5518'
5516 -5517 5518 0
-5518 5517 0
-5518 -5516 0
c Var 'aux1366' direct represents '2' with '-5517'
5516 5518 -5517 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5519'
c Var 'aux1367' direct represents '0' with '5519'
c Var 'aux1367' order represents '1' with '5520'
-5519 5520 0
c Var 'aux1367' direct represents '1' with '5521'
5519 -5520 5521 0
-5521 5520 0
-5521 -5519 0
c Var 'aux1367' direct represents '2' with '-5520'
5519 5521 -5520 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5522'
c Var 'aux1368' direct represents '0' with '5522'
c Var 'aux1368' order represents '1' with '5523'
-5522 5523 0
c Var 'aux1368' direct represents '1' with '5524'
5522 -5523 5524 0
-5524 5523 0
-5524 -5522 0
c Var 'aux1368' direct represents '2' with '-5523'
5522 5524 -5523 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5525'
c Var 'aux1369' direct represents '0' with '5525'
c Var 'aux1369' order represents '1' with '5526'
-5525 5526 0
c Var 'aux1369' direct represents '1' with '5527'
5525 -5526 5527 0
-5527 5526 0
-5527 -5525 0
c Var 'aux1369' direct represents '2' with '-5526'
5525 5527 -5526 0
c Encoding variable: aux1370 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1369))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5528'
c Var 'aux1370' direct represents '0' with '5528'
c Var 'aux1370' order represents '1' with '5529'
-5528 5529 0
c Var 'aux1370' direct represents '1' with '5530'
5528 -5529 5530 0
-5530 5529 0
-5530 -5528 0
c Var 'aux1370' order represents '2' with '5531'
-5529 5531 0
c Var 'aux1370' direct represents '2' with '5532'
5529 -5531 5532 0
-5532 5531 0
-5532 -5529 0
c Var 'aux1370' direct represents '3' with '-5531'
5528 5530 5532 -5531 0
c Encoding variable: aux1371 with domain: int(0..4) (representing constraint (aux1366 + aux1368))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5533'
c Var 'aux1371' direct represents '0' with '5533'
c Var 'aux1371' order represents '1' with '5534'
-5533 5534 0
c Var 'aux1371' direct represents '1' with '5535'
5533 -5534 5535 0
-5535 5534 0
-5535 -5533 0
c Var 'aux1371' order represents '2' with '5536'
-5534 5536 0
c Var 'aux1371' direct represents '2' with '5537'
5534 -5536 5537 0
-5537 5536 0
-5537 -5534 0
c Var 'aux1371' order represents '3' with '5538'
-5536 5538 0
c Var 'aux1371' direct represents '3' with '5539'
5536 -5538 5539 0
-5539 5538 0
-5539 -5536 0
c Var 'aux1371' direct represents '4' with '-5538'
5533 5535 5537 5539 -5538 0
c Encoding variable: aux1372 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5540'
c Var 'aux1372' direct represents '0' with '5540'
c Var 'aux1372' order represents '1' with '5541'
-5540 5541 0
c Var 'aux1372' direct represents '1' with '5542'
5540 -5541 5542 0
-5542 5541 0
-5542 -5540 0
c Var 'aux1372' direct represents '2' with '-5541'
5540 5542 -5541 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5543'
c Var 'aux1373' direct represents '0' with '5543'
c Var 'aux1373' order represents '1' with '5544'
-5543 5544 0
c Var 'aux1373' direct represents '1' with '5545'
5543 -5544 5545 0
-5545 5544 0
-5545 -5543 0
c Var 'aux1373' direct represents '2' with '-5544'
5543 5545 -5544 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5546'
c Var 'aux1374' direct represents '0' with '5546'
c Var 'aux1374' order represents '1' with '5547'
-5546 5547 0
c Var 'aux1374' direct represents '1' with '5548'
5546 -5547 5548 0
-5548 5547 0
-5548 -5546 0
c Var 'aux1374' direct represents '2' with '-5547'
5546 5548 -5547 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5549'
c Var 'aux1375' direct represents '0' with '5549'
c Var 'aux1375' order represents '1' with '5550'
-5549 5550 0
c Var 'aux1375' direct represents '1' with '5551'
5549 -5550 5551 0
-5551 5550 0
-5551 -5549 0
c Var 'aux1375' direct represents '2' with '-5550'
5549 5551 -5550 0
c Encoding variable: aux1376 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1375))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5552'
c Var 'aux1376' direct represents '0' with '5552'
c Var 'aux1376' order represents '1' with '5553'
-5552 5553 0
c Var 'aux1376' direct represents '1' with '5554'
5552 -5553 5554 0
-5554 5553 0
-5554 -5552 0
c Var 'aux1376' order represents '2' with '5555'
-5553 5555 0
c Var 'aux1376' direct represents '2' with '5556'
5553 -5555 5556 0
-5556 5555 0
-5556 -5553 0
c Var 'aux1376' direct represents '3' with '-5555'
5552 5554 5556 -5555 0
c Encoding variable: aux1377 with domain: int(0..4) (representing constraint (aux1372 + aux1374))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5557'
c Var 'aux1377' direct represents '0' with '5557'
c Var 'aux1377' order represents '1' with '5558'
-5557 5558 0
c Var 'aux1377' direct represents '1' with '5559'
5557 -5558 5559 0
-5559 5558 0
-5559 -5557 0
c Var 'aux1377' order represents '2' with '5560'
-5558 5560 0
c Var 'aux1377' direct represents '2' with '5561'
5558 -5560 5561 0
-5561 5560 0
-5561 -5558 0
c Var 'aux1377' order represents '3' with '5562'
-5560 5562 0
c Var 'aux1377' direct represents '3' with '5563'
5560 -5562 5563 0
-5563 5562 0
-5563 -5560 0
c Var 'aux1377' direct represents '4' with '-5562'
5557 5559 5561 5563 -5562 0
c Encoding variable: aux1378 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5564'
c Var 'aux1378' direct represents '0' with '5564'
c Var 'aux1378' order represents '1' with '5565'
-5564 5565 0
c Var 'aux1378' direct represents '1' with '5566'
5564 -5565 5566 0
-5566 5565 0
-5566 -5564 0
c Var 'aux1378' direct represents '2' with '-5565'
5564 5566 -5565 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5567'
c Var 'aux1379' direct represents '0' with '5567'
c Var 'aux1379' order represents '1' with '5568'
-5567 5568 0
c Var 'aux1379' direct represents '1' with '5569'
5567 -5568 5569 0
-5569 5568 0
-5569 -5567 0
c Var 'aux1379' direct represents '2' with '-5568'
5567 5569 -5568 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5570'
c Var 'aux1380' direct represents '0' with '5570'
c Var 'aux1380' order represents '1' with '5571'
-5570 5571 0
c Var 'aux1380' direct represents '1' with '5572'
5570 -5571 5572 0
-5572 5571 0
-5572 -5570 0
c Var 'aux1380' direct represents '2' with '-5571'
5570 5572 -5571 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5573'
c Var 'aux1381' direct represents '0' with '5573'
c Var 'aux1381' order represents '1' with '5574'
-5573 5574 0
c Var 'aux1381' direct represents '1' with '5575'
5573 -5574 5575 0
-5575 5574 0
-5575 -5573 0
c Var 'aux1381' direct represents '2' with '-5574'
5573 5575 -5574 0
c Encoding variable: aux1382 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1381))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5576'
c Var 'aux1382' direct represents '0' with '5576'
c Var 'aux1382' order represents '1' with '5577'
-5576 5577 0
c Var 'aux1382' direct represents '1' with '5578'
5576 -5577 5578 0
-5578 5577 0
-5578 -5576 0
c Var 'aux1382' order represents '2' with '5579'
-5577 5579 0
c Var 'aux1382' direct represents '2' with '5580'
5577 -5579 5580 0
-5580 5579 0
-5580 -5577 0
c Var 'aux1382' direct represents '3' with '-5579'
5576 5578 5580 -5579 0
c Encoding variable: aux1383 with domain: int(0..4) (representing constraint (aux1378 + aux1380))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5581'
c Var 'aux1383' direct represents '0' with '5581'
c Var 'aux1383' order represents '1' with '5582'
-5581 5582 0
c Var 'aux1383' direct represents '1' with '5583'
5581 -5582 5583 0
-5583 5582 0
-5583 -5581 0
c Var 'aux1383' order represents '2' with '5584'
-5582 5584 0
c Var 'aux1383' direct represents '2' with '5585'
5582 -5584 5585 0
-5585 5584 0
-5585 -5582 0
c Var 'aux1383' order represents '3' with '5586'
-5584 5586 0
c Var 'aux1383' direct represents '3' with '5587'
5584 -5586 5587 0
-5587 5586 0
-5587 -5584 0
c Var 'aux1383' direct represents '4' with '-5586'
5581 5583 5585 5587 -5586 0
c Encoding variable: aux1384 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5588'
c Var 'aux1384' direct represents '0' with '5588'
c Var 'aux1384' order represents '1' with '5589'
-5588 5589 0
c Var 'aux1384' direct represents '1' with '5590'
5588 -5589 5590 0
-5590 5589 0
-5590 -5588 0
c Var 'aux1384' direct represents '2' with '-5589'
5588 5590 -5589 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5591'
c Var 'aux1385' direct represents '0' with '5591'
c Var 'aux1385' order represents '1' with '5592'
-5591 5592 0
c Var 'aux1385' direct represents '1' with '5593'
5591 -5592 5593 0
-5593 5592 0
-5593 -5591 0
c Var 'aux1385' direct represents '2' with '-5592'
5591 5593 -5592 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5594'
c Var 'aux1386' direct represents '0' with '5594'
c Var 'aux1386' order represents '1' with '5595'
-5594 5595 0
c Var 'aux1386' direct represents '1' with '5596'
5594 -5595 5596 0
-5596 5595 0
-5596 -5594 0
c Var 'aux1386' direct represents '2' with '-5595'
5594 5596 -5595 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5597'
c Var 'aux1387' direct represents '0' with '5597'
c Var 'aux1387' order represents '1' with '5598'
-5597 5598 0
c Var 'aux1387' direct represents '1' with '5599'
5597 -5598 5599 0
-5599 5598 0
-5599 -5597 0
c Var 'aux1387' direct represents '2' with '-5598'
5597 5599 -5598 0
c Encoding variable: aux1388 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1387))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5600'
c Var 'aux1388' direct represents '0' with '5600'
c Var 'aux1388' order represents '1' with '5601'
-5600 5601 0
c Var 'aux1388' direct represents '1' with '5602'
5600 -5601 5602 0
-5602 5601 0
-5602 -5600 0
c Var 'aux1388' order represents '2' with '5603'
-5601 5603 0
c Var 'aux1388' direct represents '2' with '5604'
5601 -5603 5604 0
-5604 5603 0
-5604 -5601 0
c Var 'aux1388' direct represents '3' with '-5603'
5600 5602 5604 -5603 0
c Encoding variable: aux1389 with domain: int(0..4) (representing constraint (aux1384 + aux1386))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5605'
c Var 'aux1389' direct represents '0' with '5605'
c Var 'aux1389' order represents '1' with '5606'
-5605 5606 0
c Var 'aux1389' direct represents '1' with '5607'
5605 -5606 5607 0
-5607 5606 0
-5607 -5605 0
c Var 'aux1389' order represents '2' with '5608'
-5606 5608 0
c Var 'aux1389' direct represents '2' with '5609'
5606 -5608 5609 0
-5609 5608 0
-5609 -5606 0
c Var 'aux1389' order represents '3' with '5610'
-5608 5610 0
c Var 'aux1389' direct represents '3' with '5611'
5608 -5610 5611 0
-5611 5610 0
-5611 -5608 0
c Var 'aux1389' direct represents '4' with '-5610'
5605 5607 5609 5611 -5610 0
c Encoding variable: aux1390 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5612'
c Var 'aux1390' direct represents '0' with '5612'
c Var 'aux1390' order represents '1' with '5613'
-5612 5613 0
c Var 'aux1390' direct represents '1' with '5614'
5612 -5613 5614 0
-5614 5613 0
-5614 -5612 0
c Var 'aux1390' direct represents '2' with '-5613'
5612 5614 -5613 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5615'
c Var 'aux1391' direct represents '0' with '5615'
c Var 'aux1391' order represents '1' with '5616'
-5615 5616 0
c Var 'aux1391' direct represents '1' with '5617'
5615 -5616 5617 0
-5617 5616 0
-5617 -5615 0
c Var 'aux1391' direct represents '2' with '-5616'
5615 5617 -5616 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5618'
c Var 'aux1392' direct represents '0' with '5618'
c Var 'aux1392' order represents '1' with '5619'
-5618 5619 0
c Var 'aux1392' direct represents '1' with '5620'
5618 -5619 5620 0
-5620 5619 0
-5620 -5618 0
c Var 'aux1392' direct represents '2' with '-5619'
5618 5620 -5619 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5621'
c Var 'aux1393' direct represents '0' with '5621'
c Var 'aux1393' order represents '1' with '5622'
-5621 5622 0
c Var 'aux1393' direct represents '1' with '5623'
5621 -5622 5623 0
-5623 5622 0
-5623 -5621 0
c Var 'aux1393' direct represents '2' with '-5622'
5621 5623 -5622 0
c Encoding variable: aux1394 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1393))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5624'
c Var 'aux1394' direct represents '0' with '5624'
c Var 'aux1394' order represents '1' with '5625'
-5624 5625 0
c Var 'aux1394' direct represents '1' with '5626'
5624 -5625 5626 0
-5626 5625 0
-5626 -5624 0
c Var 'aux1394' order represents '2' with '5627'
-5625 5627 0
c Var 'aux1394' direct represents '2' with '5628'
5625 -5627 5628 0
-5628 5627 0
-5628 -5625 0
c Var 'aux1394' direct represents '3' with '-5627'
5624 5626 5628 -5627 0
c Encoding variable: aux1395 with domain: int(0..4) (representing constraint (aux1390 + aux1392))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5629'
c Var 'aux1395' direct represents '0' with '5629'
c Var 'aux1395' order represents '1' with '5630'
-5629 5630 0
c Var 'aux1395' direct represents '1' with '5631'
5629 -5630 5631 0
-5631 5630 0
-5631 -5629 0
c Var 'aux1395' order represents '2' with '5632'
-5630 5632 0
c Var 'aux1395' direct represents '2' with '5633'
5630 -5632 5633 0
-5633 5632 0
-5633 -5630 0
c Var 'aux1395' order represents '3' with '5634'
-5632 5634 0
c Var 'aux1395' direct represents '3' with '5635'
5632 -5634 5635 0
-5635 5634 0
-5635 -5632 0
c Var 'aux1395' direct represents '4' with '-5634'
5629 5631 5633 5635 -5634 0
c Encoding variable: aux1396 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5636'
c Var 'aux1396' direct represents '0' with '5636'
c Var 'aux1396' order represents '1' with '5637'
-5636 5637 0
c Var 'aux1396' direct represents '1' with '5638'
5636 -5637 5638 0
-5638 5637 0
-5638 -5636 0
c Var 'aux1396' direct represents '2' with '-5637'
5636 5638 -5637 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5639'
c Var 'aux1397' direct represents '0' with '5639'
c Var 'aux1397' order represents '1' with '5640'
-5639 5640 0
c Var 'aux1397' direct represents '1' with '5641'
5639 -5640 5641 0
-5641 5640 0
-5641 -5639 0
c Var 'aux1397' direct represents '2' with '-5640'
5639 5641 -5640 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5642'
c Var 'aux1398' direct represents '0' with '5642'
c Var 'aux1398' order represents '1' with '5643'
-5642 5643 0
c Var 'aux1398' direct represents '1' with '5644'
5642 -5643 5644 0
-5644 5643 0
-5644 -5642 0
c Var 'aux1398' direct represents '2' with '-5643'
5642 5644 -5643 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5645'
c Var 'aux1399' direct represents '0' with '5645'
c Var 'aux1399' order represents '1' with '5646'
-5645 5646 0
c Var 'aux1399' direct represents '1' with '5647'
5645 -5646 5647 0
-5647 5646 0
-5647 -5645 0
c Var 'aux1399' direct represents '2' with '-5646'
5645 5647 -5646 0
c Encoding variable: aux1400 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1399))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5648'
c Var 'aux1400' direct represents '0' with '5648'
c Var 'aux1400' order represents '1' with '5649'
-5648 5649 0
c Var 'aux1400' direct represents '1' with '5650'
5648 -5649 5650 0
-5650 5649 0
-5650 -5648 0
c Var 'aux1400' order represents '2' with '5651'
-5649 5651 0
c Var 'aux1400' direct represents '2' with '5652'
5649 -5651 5652 0
-5652 5651 0
-5652 -5649 0
c Var 'aux1400' direct represents '3' with '-5651'
5648 5650 5652 -5651 0
c Encoding variable: aux1401 with domain: int(0..4) (representing constraint (aux1396 + aux1398))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5653'
c Var 'aux1401' direct represents '0' with '5653'
c Var 'aux1401' order represents '1' with '5654'
-5653 5654 0
c Var 'aux1401' direct represents '1' with '5655'
5653 -5654 5655 0
-5655 5654 0
-5655 -5653 0
c Var 'aux1401' order represents '2' with '5656'
-5654 5656 0
c Var 'aux1401' direct represents '2' with '5657'
5654 -5656 5657 0
-5657 5656 0
-5657 -5654 0
c Var 'aux1401' order represents '3' with '5658'
-5656 5658 0
c Var 'aux1401' direct represents '3' with '5659'
5656 -5658 5659 0
-5659 5658 0
-5659 -5656 0
c Var 'aux1401' direct represents '4' with '-5658'
5653 5655 5657 5659 -5658 0
c Encoding variable: aux1402 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5660'
c Var 'aux1402' direct represents '0' with '5660'
c Var 'aux1402' order represents '1' with '5661'
-5660 5661 0
c Var 'aux1402' direct represents '1' with '5662'
5660 -5661 5662 0
-5662 5661 0
-5662 -5660 0
c Var 'aux1402' direct represents '2' with '-5661'
5660 5662 -5661 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5663'
c Var 'aux1403' direct represents '0' with '5663'
c Var 'aux1403' order represents '1' with '5664'
-5663 5664 0
c Var 'aux1403' direct represents '1' with '5665'
5663 -5664 5665 0
-5665 5664 0
-5665 -5663 0
c Var 'aux1403' direct represents '2' with '-5664'
5663 5665 -5664 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5666'
c Var 'aux1404' direct represents '0' with '5666'
c Var 'aux1404' order represents '1' with '5667'
-5666 5667 0
c Var 'aux1404' direct represents '1' with '5668'
5666 -5667 5668 0
-5668 5667 0
-5668 -5666 0
c Var 'aux1404' direct represents '2' with '-5667'
5666 5668 -5667 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5669'
c Var 'aux1405' direct represents '0' with '5669'
c Var 'aux1405' order represents '1' with '5670'
-5669 5670 0
c Var 'aux1405' direct represents '1' with '5671'
5669 -5670 5671 0
-5671 5670 0
-5671 -5669 0
c Var 'aux1405' direct represents '2' with '-5670'
5669 5671 -5670 0
c Encoding variable: aux1406 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1405))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5672'
c Var 'aux1406' direct represents '0' with '5672'
c Var 'aux1406' order represents '1' with '5673'
-5672 5673 0
c Var 'aux1406' direct represents '1' with '5674'
5672 -5673 5674 0
-5674 5673 0
-5674 -5672 0
c Var 'aux1406' order represents '2' with '5675'
-5673 5675 0
c Var 'aux1406' direct represents '2' with '5676'
5673 -5675 5676 0
-5676 5675 0
-5676 -5673 0
c Var 'aux1406' direct represents '3' with '-5675'
5672 5674 5676 -5675 0
c Encoding variable: aux1407 with domain: int(0..4) (representing constraint (aux1402 + aux1404))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5677'
c Var 'aux1407' direct represents '0' with '5677'
c Var 'aux1407' order represents '1' with '5678'
-5677 5678 0
c Var 'aux1407' direct represents '1' with '5679'
5677 -5678 5679 0
-5679 5678 0
-5679 -5677 0
c Var 'aux1407' order represents '2' with '5680'
-5678 5680 0
c Var 'aux1407' direct represents '2' with '5681'
5678 -5680 5681 0
-5681 5680 0
-5681 -5678 0
c Var 'aux1407' order represents '3' with '5682'
-5680 5682 0
c Var 'aux1407' direct represents '3' with '5683'
5680 -5682 5683 0
-5683 5682 0
-5683 -5680 0
c Var 'aux1407' direct represents '4' with '-5682'
5677 5679 5681 5683 -5682 0
c Encoding variable: aux1408 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5684'
c Var 'aux1408' direct represents '0' with '5684'
c Var 'aux1408' order represents '1' with '5685'
-5684 5685 0
c Var 'aux1408' direct represents '1' with '5686'
5684 -5685 5686 0
-5686 5685 0
-5686 -5684 0
c Var 'aux1408' direct represents '2' with '-5685'
5684 5686 -5685 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5687'
c Var 'aux1409' direct represents '0' with '5687'
c Var 'aux1409' order represents '1' with '5688'
-5687 5688 0
c Var 'aux1409' direct represents '1' with '5689'
5687 -5688 5689 0
-5689 5688 0
-5689 -5687 0
c Var 'aux1409' direct represents '2' with '-5688'
5687 5689 -5688 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5690'
c Var 'aux1410' direct represents '0' with '5690'
c Var 'aux1410' order represents '1' with '5691'
-5690 5691 0
c Var 'aux1410' direct represents '1' with '5692'
5690 -5691 5692 0
-5692 5691 0
-5692 -5690 0
c Var 'aux1410' direct represents '2' with '-5691'
5690 5692 -5691 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5693'
c Var 'aux1411' direct represents '0' with '5693'
c Var 'aux1411' order represents '1' with '5694'
-5693 5694 0
c Var 'aux1411' direct represents '1' with '5695'
5693 -5694 5695 0
-5695 5694 0
-5695 -5693 0
c Var 'aux1411' direct represents '2' with '-5694'
5693 5695 -5694 0
c Encoding variable: aux1412 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1411))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5696'
c Var 'aux1412' direct represents '0' with '5696'
c Var 'aux1412' order represents '1' with '5697'
-5696 5697 0
c Var 'aux1412' direct represents '1' with '5698'
5696 -5697 5698 0
-5698 5697 0
-5698 -5696 0
c Var 'aux1412' order represents '2' with '5699'
-5697 5699 0
c Var 'aux1412' direct represents '2' with '5700'
5697 -5699 5700 0
-5700 5699 0
-5700 -5697 0
c Var 'aux1412' direct represents '3' with '-5699'
5696 5698 5700 -5699 0
c Encoding variable: aux1413 with domain: int(0..4) (representing constraint (aux1408 + aux1410))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5701'
c Var 'aux1413' direct represents '0' with '5701'
c Var 'aux1413' order represents '1' with '5702'
-5701 5702 0
c Var 'aux1413' direct represents '1' with '5703'
5701 -5702 5703 0
-5703 5702 0
-5703 -5701 0
c Var 'aux1413' order represents '2' with '5704'
-5702 5704 0
c Var 'aux1413' direct represents '2' with '5705'
5702 -5704 5705 0
-5705 5704 0
-5705 -5702 0
c Var 'aux1413' order represents '3' with '5706'
-5704 5706 0
c Var 'aux1413' direct represents '3' with '5707'
5704 -5706 5707 0
-5707 5706 0
-5707 -5704 0
c Var 'aux1413' direct represents '4' with '-5706'
5701 5703 5705 5707 -5706 0
c Encoding variable: aux1414 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5708'
c Var 'aux1414' direct represents '0' with '5708'
c Var 'aux1414' order represents '1' with '5709'
-5708 5709 0
c Var 'aux1414' direct represents '1' with '5710'
5708 -5709 5710 0
-5710 5709 0
-5710 -5708 0
c Var 'aux1414' direct represents '2' with '-5709'
5708 5710 -5709 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5711'
c Var 'aux1415' direct represents '0' with '5711'
c Var 'aux1415' order represents '1' with '5712'
-5711 5712 0
c Var 'aux1415' direct represents '1' with '5713'
5711 -5712 5713 0
-5713 5712 0
-5713 -5711 0
c Var 'aux1415' direct represents '2' with '-5712'
5711 5713 -5712 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5714'
c Var 'aux1416' direct represents '0' with '5714'
c Var 'aux1416' order represents '1' with '5715'
-5714 5715 0
c Var 'aux1416' direct represents '1' with '5716'
5714 -5715 5716 0
-5716 5715 0
-5716 -5714 0
c Var 'aux1416' direct represents '2' with '-5715'
5714 5716 -5715 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5717'
c Var 'aux1417' direct represents '0' with '5717'
c Var 'aux1417' order represents '1' with '5718'
-5717 5718 0
c Var 'aux1417' direct represents '1' with '5719'
5717 -5718 5719 0
-5719 5718 0
-5719 -5717 0
c Var 'aux1417' direct represents '2' with '-5718'
5717 5719 -5718 0
c Encoding variable: aux1418 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1417))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5720'
c Var 'aux1418' direct represents '0' with '5720'
c Var 'aux1418' order represents '1' with '5721'
-5720 5721 0
c Var 'aux1418' direct represents '1' with '5722'
5720 -5721 5722 0
-5722 5721 0
-5722 -5720 0
c Var 'aux1418' order represents '2' with '5723'
-5721 5723 0
c Var 'aux1418' direct represents '2' with '5724'
5721 -5723 5724 0
-5724 5723 0
-5724 -5721 0
c Var 'aux1418' direct represents '3' with '-5723'
5720 5722 5724 -5723 0
c Encoding variable: aux1419 with domain: int(0..4) (representing constraint (aux1414 + aux1416))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5725'
c Var 'aux1419' direct represents '0' with '5725'
c Var 'aux1419' order represents '1' with '5726'
-5725 5726 0
c Var 'aux1419' direct represents '1' with '5727'
5725 -5726 5727 0
-5727 5726 0
-5727 -5725 0
c Var 'aux1419' order represents '2' with '5728'
-5726 5728 0
c Var 'aux1419' direct represents '2' with '5729'
5726 -5728 5729 0
-5729 5728 0
-5729 -5726 0
c Var 'aux1419' order represents '3' with '5730'
-5728 5730 0
c Var 'aux1419' direct represents '3' with '5731'
5728 -5730 5731 0
-5731 5730 0
-5731 -5728 0
c Var 'aux1419' direct represents '4' with '-5730'
5725 5727 5729 5731 -5730 0
c Encoding variable: aux1420 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5732'
c Var 'aux1420' direct represents '0' with '5732'
c Var 'aux1420' order represents '1' with '5733'
-5732 5733 0
c Var 'aux1420' direct represents '1' with '5734'
5732 -5733 5734 0
-5734 5733 0
-5734 -5732 0
c Var 'aux1420' direct represents '2' with '-5733'
5732 5734 -5733 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5735'
c Var 'aux1421' direct represents '0' with '5735'
c Var 'aux1421' order represents '1' with '5736'
-5735 5736 0
c Var 'aux1421' direct represents '1' with '5737'
5735 -5736 5737 0
-5737 5736 0
-5737 -5735 0
c Var 'aux1421' direct represents '2' with '-5736'
5735 5737 -5736 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5738'
c Var 'aux1422' direct represents '0' with '5738'
c Var 'aux1422' order represents '1' with '5739'
-5738 5739 0
c Var 'aux1422' direct represents '1' with '5740'
5738 -5739 5740 0
-5740 5739 0
-5740 -5738 0
c Var 'aux1422' direct represents '2' with '-5739'
5738 5740 -5739 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5741'
c Var 'aux1423' direct represents '0' with '5741'
c Var 'aux1423' order represents '1' with '5742'
-5741 5742 0
c Var 'aux1423' direct represents '1' with '5743'
5741 -5742 5743 0
-5743 5742 0
-5743 -5741 0
c Var 'aux1423' direct represents '2' with '-5742'
5741 5743 -5742 0
c Encoding variable: aux1424 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1423))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5744'
c Var 'aux1424' direct represents '0' with '5744'
c Var 'aux1424' order represents '1' with '5745'
-5744 5745 0
c Var 'aux1424' direct represents '1' with '5746'
5744 -5745 5746 0
-5746 5745 0
-5746 -5744 0
c Var 'aux1424' order represents '2' with '5747'
-5745 5747 0
c Var 'aux1424' direct represents '2' with '5748'
5745 -5747 5748 0
-5748 5747 0
-5748 -5745 0
c Var 'aux1424' direct represents '3' with '-5747'
5744 5746 5748 -5747 0
c Encoding variable: aux1425 with domain: int(0..4) (representing constraint (aux1420 + aux1422))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5749'
c Var 'aux1425' direct represents '0' with '5749'
c Var 'aux1425' order represents '1' with '5750'
-5749 5750 0
c Var 'aux1425' direct represents '1' with '5751'
5749 -5750 5751 0
-5751 5750 0
-5751 -5749 0
c Var 'aux1425' order represents '2' with '5752'
-5750 5752 0
c Var 'aux1425' direct represents '2' with '5753'
5750 -5752 5753 0
-5753 5752 0
-5753 -5750 0
c Var 'aux1425' order represents '3' with '5754'
-5752 5754 0
c Var 'aux1425' direct represents '3' with '5755'
5752 -5754 5755 0
-5755 5754 0
-5755 -5752 0
c Var 'aux1425' direct represents '4' with '-5754'
5749 5751 5753 5755 -5754 0
c Encoding variable: aux1426 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5756'
c Var 'aux1426' direct represents '0' with '5756'
c Var 'aux1426' order represents '1' with '5757'
-5756 5757 0
c Var 'aux1426' direct represents '1' with '5758'
5756 -5757 5758 0
-5758 5757 0
-5758 -5756 0
c Var 'aux1426' direct represents '2' with '-5757'
5756 5758 -5757 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5759'
c Var 'aux1427' direct represents '0' with '5759'
c Var 'aux1427' order represents '1' with '5760'
-5759 5760 0
c Var 'aux1427' direct represents '1' with '5761'
5759 -5760 5761 0
-5761 5760 0
-5761 -5759 0
c Var 'aux1427' direct represents '2' with '-5760'
5759 5761 -5760 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5762'
c Var 'aux1428' direct represents '0' with '5762'
c Var 'aux1428' order represents '1' with '5763'
-5762 5763 0
c Var 'aux1428' direct represents '1' with '5764'
5762 -5763 5764 0
-5764 5763 0
-5764 -5762 0
c Var 'aux1428' direct represents '2' with '-5763'
5762 5764 -5763 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5765'
c Var 'aux1429' direct represents '0' with '5765'
c Var 'aux1429' order represents '1' with '5766'
-5765 5766 0
c Var 'aux1429' direct represents '1' with '5767'
5765 -5766 5767 0
-5767 5766 0
-5767 -5765 0
c Var 'aux1429' direct represents '2' with '-5766'
5765 5767 -5766 0
c Encoding variable: aux1430 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1429))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5768'
c Var 'aux1430' direct represents '0' with '5768'
c Var 'aux1430' order represents '1' with '5769'
-5768 5769 0
c Var 'aux1430' direct represents '1' with '5770'
5768 -5769 5770 0
-5770 5769 0
-5770 -5768 0
c Var 'aux1430' order represents '2' with '5771'
-5769 5771 0
c Var 'aux1430' direct represents '2' with '5772'
5769 -5771 5772 0
-5772 5771 0
-5772 -5769 0
c Var 'aux1430' direct represents '3' with '-5771'
5768 5770 5772 -5771 0
c Encoding variable: aux1431 with domain: int(0..4) (representing constraint (aux1426 + aux1428))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5773'
c Var 'aux1431' direct represents '0' with '5773'
c Var 'aux1431' order represents '1' with '5774'
-5773 5774 0
c Var 'aux1431' direct represents '1' with '5775'
5773 -5774 5775 0
-5775 5774 0
-5775 -5773 0
c Var 'aux1431' order represents '2' with '5776'
-5774 5776 0
c Var 'aux1431' direct represents '2' with '5777'
5774 -5776 5777 0
-5777 5776 0
-5777 -5774 0
c Var 'aux1431' order represents '3' with '5778'
-5776 5778 0
c Var 'aux1431' direct represents '3' with '5779'
5776 -5778 5779 0
-5779 5778 0
-5779 -5776 0
c Var 'aux1431' direct represents '4' with '-5778'
5773 5775 5777 5779 -5778 0
c Encoding variable: aux1432 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '5780'
c Var 'aux1432' direct represents '0' with '5780'
c Var 'aux1432' order represents '1' with '5781'
-5780 5781 0
c Var 'aux1432' direct represents '1' with '5782'
5780 -5781 5782 0
-5782 5781 0
-5782 -5780 0
c Var 'aux1432' direct represents '2' with '-5781'
5780 5782 -5781 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '5783'
c Var 'aux1433' direct represents '0' with '5783'
c Var 'aux1433' order represents '1' with '5784'
-5783 5784 0
c Var 'aux1433' direct represents '1' with '5785'
5783 -5784 5785 0
-5785 5784 0
-5785 -5783 0
c Var 'aux1433' direct represents '2' with '-5784'
5783 5785 -5784 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '5786'
c Var 'aux1434' direct represents '0' with '5786'
c Var 'aux1434' order represents '1' with '5787'
-5786 5787 0
c Var 'aux1434' direct represents '1' with '5788'
5786 -5787 5788 0
-5788 5787 0
-5788 -5786 0
c Var 'aux1434' direct represents '2' with '-5787'
5786 5788 -5787 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '5789'
c Var 'aux1435' direct represents '0' with '5789'
c Var 'aux1435' order represents '1' with '5790'
-5789 5790 0
c Var 'aux1435' direct represents '1' with '5791'
5789 -5790 5791 0
-5791 5790 0
-5791 -5789 0
c Var 'aux1435' direct represents '2' with '-5790'
5789 5791 -5790 0
c Encoding variable: aux1436 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1435))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '5792'
c Var 'aux1436' direct represents '0' with '5792'
c Var 'aux1436' order represents '1' with '5793'
-5792 5793 0
c Var 'aux1436' direct represents '1' with '5794'
5792 -5793 5794 0
-5794 5793 0
-5794 -5792 0
c Var 'aux1436' order represents '2' with '5795'
-5793 5795 0
c Var 'aux1436' direct represents '2' with '5796'
5793 -5795 5796 0
-5796 5795 0
-5796 -5793 0
c Var 'aux1436' direct represents '3' with '-5795'
5792 5794 5796 -5795 0
c Encoding variable: aux1437 with domain: int(0..4) (representing constraint (aux1432 + aux1434))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '5797'
c Var 'aux1437' direct represents '0' with '5797'
c Var 'aux1437' order represents '1' with '5798'
-5797 5798 0
c Var 'aux1437' direct represents '1' with '5799'
5797 -5798 5799 0
-5799 5798 0
-5799 -5797 0
c Var 'aux1437' order represents '2' with '5800'
-5798 5800 0
c Var 'aux1437' direct represents '2' with '5801'
5798 -5800 5801 0
-5801 5800 0
-5801 -5798 0
c Var 'aux1437' order represents '3' with '5802'
-5800 5802 0
c Var 'aux1437' direct represents '3' with '5803'
5800 -5802 5803 0
-5803 5802 0
-5803 -5800 0
c Var 'aux1437' direct represents '4' with '-5802'
5797 5799 5801 5803 -5802 0
c Encoding variable: aux1438 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '5804'
c Var 'aux1438' direct represents '0' with '5804'
c Var 'aux1438' order represents '1' with '5805'
-5804 5805 0
c Var 'aux1438' direct represents '1' with '5806'
5804 -5805 5806 0
-5806 5805 0
-5806 -5804 0
c Var 'aux1438' direct represents '2' with '-5805'
5804 5806 -5805 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '5807'
c Var 'aux1439' direct represents '0' with '5807'
c Var 'aux1439' order represents '1' with '5808'
-5807 5808 0
c Var 'aux1439' direct represents '1' with '5809'
5807 -5808 5809 0
-5809 5808 0
-5809 -5807 0
c Var 'aux1439' direct represents '2' with '-5808'
5807 5809 -5808 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '5810'
c Var 'aux1440' direct represents '0' with '5810'
c Var 'aux1440' order represents '1' with '5811'
-5810 5811 0
c Var 'aux1440' direct represents '1' with '5812'
5810 -5811 5812 0
-5812 5811 0
-5812 -5810 0
c Var 'aux1440' direct represents '2' with '-5811'
5810 5812 -5811 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '5813'
c Var 'aux1441' direct represents '0' with '5813'
c Var 'aux1441' order represents '1' with '5814'
-5813 5814 0
c Var 'aux1441' direct represents '1' with '5815'
5813 -5814 5815 0
-5815 5814 0
-5815 -5813 0
c Var 'aux1441' direct represents '2' with '-5814'
5813 5815 -5814 0
c Encoding variable: aux1442 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1441))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '5816'
c Var 'aux1442' direct represents '0' with '5816'
c Var 'aux1442' order represents '1' with '5817'
-5816 5817 0
c Var 'aux1442' direct represents '1' with '5818'
5816 -5817 5818 0
-5818 5817 0
-5818 -5816 0
c Var 'aux1442' order represents '2' with '5819'
-5817 5819 0
c Var 'aux1442' direct represents '2' with '5820'
5817 -5819 5820 0
-5820 5819 0
-5820 -5817 0
c Var 'aux1442' direct represents '3' with '-5819'
5816 5818 5820 -5819 0
c Encoding variable: aux1443 with domain: int(0..4) (representing constraint (aux1438 + aux1440))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '5821'
c Var 'aux1443' direct represents '0' with '5821'
c Var 'aux1443' order represents '1' with '5822'
-5821 5822 0
c Var 'aux1443' direct represents '1' with '5823'
5821 -5822 5823 0
-5823 5822 0
-5823 -5821 0
c Var 'aux1443' order represents '2' with '5824'
-5822 5824 0
c Var 'aux1443' direct represents '2' with '5825'
5822 -5824 5825 0
-5825 5824 0
-5825 -5822 0
c Var 'aux1443' order represents '3' with '5826'
-5824 5826 0
c Var 'aux1443' direct represents '3' with '5827'
5824 -5826 5827 0
-5827 5826 0
-5827 -5824 0
c Var 'aux1443' direct represents '4' with '-5826'
5821 5823 5825 5827 -5826 0
c Encoding variable: aux1444 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '5828'
c Var 'aux1444' direct represents '0' with '5828'
c Var 'aux1444' order represents '1' with '5829'
-5828 5829 0
c Var 'aux1444' direct represents '1' with '5830'
5828 -5829 5830 0
-5830 5829 0
-5830 -5828 0
c Var 'aux1444' direct represents '2' with '-5829'
5828 5830 -5829 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '5831'
c Var 'aux1445' direct represents '0' with '5831'
c Var 'aux1445' order represents '1' with '5832'
-5831 5832 0
c Var 'aux1445' direct represents '1' with '5833'
5831 -5832 5833 0
-5833 5832 0
-5833 -5831 0
c Var 'aux1445' direct represents '2' with '-5832'
5831 5833 -5832 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '5834'
c Var 'aux1446' direct represents '0' with '5834'
c Var 'aux1446' order represents '1' with '5835'
-5834 5835 0
c Var 'aux1446' direct represents '1' with '5836'
5834 -5835 5836 0
-5836 5835 0
-5836 -5834 0
c Var 'aux1446' direct represents '2' with '-5835'
5834 5836 -5835 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '5837'
c Var 'aux1447' direct represents '0' with '5837'
c Var 'aux1447' order represents '1' with '5838'
-5837 5838 0
c Var 'aux1447' direct represents '1' with '5839'
5837 -5838 5839 0
-5839 5838 0
-5839 -5837 0
c Var 'aux1447' direct represents '2' with '-5838'
5837 5839 -5838 0
c Encoding variable: aux1448 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1447))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '5840'
c Var 'aux1448' direct represents '0' with '5840'
c Var 'aux1448' order represents '1' with '5841'
-5840 5841 0
c Var 'aux1448' direct represents '1' with '5842'
5840 -5841 5842 0
-5842 5841 0
-5842 -5840 0
c Var 'aux1448' order represents '2' with '5843'
-5841 5843 0
c Var 'aux1448' direct represents '2' with '5844'
5841 -5843 5844 0
-5844 5843 0
-5844 -5841 0
c Var 'aux1448' direct represents '3' with '-5843'
5840 5842 5844 -5843 0
c Encoding variable: aux1449 with domain: int(0..4) (representing constraint (aux1444 + aux1446))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '5845'
c Var 'aux1449' direct represents '0' with '5845'
c Var 'aux1449' order represents '1' with '5846'
-5845 5846 0
c Var 'aux1449' direct represents '1' with '5847'
5845 -5846 5847 0
-5847 5846 0
-5847 -5845 0
c Var 'aux1449' order represents '2' with '5848'
-5846 5848 0
c Var 'aux1449' direct represents '2' with '5849'
5846 -5848 5849 0
-5849 5848 0
-5849 -5846 0
c Var 'aux1449' order represents '3' with '5850'
-5848 5850 0
c Var 'aux1449' direct represents '3' with '5851'
5848 -5850 5851 0
-5851 5850 0
-5851 -5848 0
c Var 'aux1449' direct represents '4' with '-5850'
5845 5847 5849 5851 -5850 0
c Encoding variable: aux1450 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '5852'
c Var 'aux1450' direct represents '0' with '5852'
c Var 'aux1450' order represents '1' with '5853'
-5852 5853 0
c Var 'aux1450' direct represents '1' with '5854'
5852 -5853 5854 0
-5854 5853 0
-5854 -5852 0
c Var 'aux1450' direct represents '2' with '-5853'
5852 5854 -5853 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '5855'
c Var 'aux1451' direct represents '0' with '5855'
c Var 'aux1451' order represents '1' with '5856'
-5855 5856 0
c Var 'aux1451' direct represents '1' with '5857'
5855 -5856 5857 0
-5857 5856 0
-5857 -5855 0
c Var 'aux1451' direct represents '2' with '-5856'
5855 5857 -5856 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '5858'
c Var 'aux1452' direct represents '0' with '5858'
c Var 'aux1452' order represents '1' with '5859'
-5858 5859 0
c Var 'aux1452' direct represents '1' with '5860'
5858 -5859 5860 0
-5860 5859 0
-5860 -5858 0
c Var 'aux1452' direct represents '2' with '-5859'
5858 5860 -5859 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '5861'
c Var 'aux1453' direct represents '0' with '5861'
c Var 'aux1453' order represents '1' with '5862'
-5861 5862 0
c Var 'aux1453' direct represents '1' with '5863'
5861 -5862 5863 0
-5863 5862 0
-5863 -5861 0
c Var 'aux1453' direct represents '2' with '-5862'
5861 5863 -5862 0
c Encoding variable: aux1454 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1453))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '5864'
c Var 'aux1454' direct represents '0' with '5864'
c Var 'aux1454' order represents '1' with '5865'
-5864 5865 0
c Var 'aux1454' direct represents '1' with '5866'
5864 -5865 5866 0
-5866 5865 0
-5866 -5864 0
c Var 'aux1454' order represents '2' with '5867'
-5865 5867 0
c Var 'aux1454' direct represents '2' with '5868'
5865 -5867 5868 0
-5868 5867 0
-5868 -5865 0
c Var 'aux1454' direct represents '3' with '-5867'
5864 5866 5868 -5867 0
c Encoding variable: aux1455 with domain: int(0..4) (representing constraint (aux1450 + aux1452))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '5869'
c Var 'aux1455' direct represents '0' with '5869'
c Var 'aux1455' order represents '1' with '5870'
-5869 5870 0
c Var 'aux1455' direct represents '1' with '5871'
5869 -5870 5871 0
-5871 5870 0
-5871 -5869 0
c Var 'aux1455' order represents '2' with '5872'
-5870 5872 0
c Var 'aux1455' direct represents '2' with '5873'
5870 -5872 5873 0
-5873 5872 0
-5873 -5870 0
c Var 'aux1455' order represents '3' with '5874'
-5872 5874 0
c Var 'aux1455' direct represents '3' with '5875'
5872 -5874 5875 0
-5875 5874 0
-5875 -5872 0
c Var 'aux1455' direct represents '4' with '-5874'
5869 5871 5873 5875 -5874 0
c Encoding variable: aux1456 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '5876'
c Var 'aux1456' direct represents '0' with '5876'
c Var 'aux1456' order represents '1' with '5877'
-5876 5877 0
c Var 'aux1456' direct represents '1' with '5878'
5876 -5877 5878 0
-5878 5877 0
-5878 -5876 0
c Var 'aux1456' direct represents '2' with '-5877'
5876 5878 -5877 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '5879'
c Var 'aux1457' direct represents '0' with '5879'
c Var 'aux1457' order represents '1' with '5880'
-5879 5880 0
c Var 'aux1457' direct represents '1' with '5881'
5879 -5880 5881 0
-5881 5880 0
-5881 -5879 0
c Var 'aux1457' direct represents '2' with '-5880'
5879 5881 -5880 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '5882'
c Var 'aux1458' direct represents '0' with '5882'
c Var 'aux1458' order represents '1' with '5883'
-5882 5883 0
c Var 'aux1458' direct represents '1' with '5884'
5882 -5883 5884 0
-5884 5883 0
-5884 -5882 0
c Var 'aux1458' direct represents '2' with '-5883'
5882 5884 -5883 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '5885'
c Var 'aux1459' direct represents '0' with '5885'
c Var 'aux1459' order represents '1' with '5886'
-5885 5886 0
c Var 'aux1459' direct represents '1' with '5887'
5885 -5886 5887 0
-5887 5886 0
-5887 -5885 0
c Var 'aux1459' direct represents '2' with '-5886'
5885 5887 -5886 0
c Encoding variable: aux1460 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1459))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '5888'
c Var 'aux1460' direct represents '0' with '5888'
c Var 'aux1460' order represents '1' with '5889'
-5888 5889 0
c Var 'aux1460' direct represents '1' with '5890'
5888 -5889 5890 0
-5890 5889 0
-5890 -5888 0
c Var 'aux1460' order represents '2' with '5891'
-5889 5891 0
c Var 'aux1460' direct represents '2' with '5892'
5889 -5891 5892 0
-5892 5891 0
-5892 -5889 0
c Var 'aux1460' direct represents '3' with '-5891'
5888 5890 5892 -5891 0
c Encoding variable: aux1461 with domain: int(0..4) (representing constraint (aux1456 + aux1458))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '5893'
c Var 'aux1461' direct represents '0' with '5893'
c Var 'aux1461' order represents '1' with '5894'
-5893 5894 0
c Var 'aux1461' direct represents '1' with '5895'
5893 -5894 5895 0
-5895 5894 0
-5895 -5893 0
c Var 'aux1461' order represents '2' with '5896'
-5894 5896 0
c Var 'aux1461' direct represents '2' with '5897'
5894 -5896 5897 0
-5897 5896 0
-5897 -5894 0
c Var 'aux1461' order represents '3' with '5898'
-5896 5898 0
c Var 'aux1461' direct represents '3' with '5899'
5896 -5898 5899 0
-5899 5898 0
-5899 -5896 0
c Var 'aux1461' direct represents '4' with '-5898'
5893 5895 5897 5899 -5898 0
c Encoding variable: aux1462 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '5900'
c Var 'aux1462' direct represents '0' with '5900'
c Var 'aux1462' order represents '1' with '5901'
-5900 5901 0
c Var 'aux1462' direct represents '1' with '5902'
5900 -5901 5902 0
-5902 5901 0
-5902 -5900 0
c Var 'aux1462' direct represents '2' with '-5901'
5900 5902 -5901 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '5903'
c Var 'aux1463' direct represents '0' with '5903'
c Var 'aux1463' order represents '1' with '5904'
-5903 5904 0
c Var 'aux1463' direct represents '1' with '5905'
5903 -5904 5905 0
-5905 5904 0
-5905 -5903 0
c Var 'aux1463' direct represents '2' with '-5904'
5903 5905 -5904 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '5906'
c Var 'aux1464' direct represents '0' with '5906'
c Var 'aux1464' order represents '1' with '5907'
-5906 5907 0
c Var 'aux1464' direct represents '1' with '5908'
5906 -5907 5908 0
-5908 5907 0
-5908 -5906 0
c Var 'aux1464' direct represents '2' with '-5907'
5906 5908 -5907 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '5909'
c Var 'aux1465' direct represents '0' with '5909'
c Var 'aux1465' order represents '1' with '5910'
-5909 5910 0
c Var 'aux1465' direct represents '1' with '5911'
5909 -5910 5911 0
-5911 5910 0
-5911 -5909 0
c Var 'aux1465' direct represents '2' with '-5910'
5909 5911 -5910 0
c Encoding variable: aux1466 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1465))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '5912'
c Var 'aux1466' direct represents '0' with '5912'
c Var 'aux1466' order represents '1' with '5913'
-5912 5913 0
c Var 'aux1466' direct represents '1' with '5914'
5912 -5913 5914 0
-5914 5913 0
-5914 -5912 0
c Var 'aux1466' order represents '2' with '5915'
-5913 5915 0
c Var 'aux1466' direct represents '2' with '5916'
5913 -5915 5916 0
-5916 5915 0
-5916 -5913 0
c Var 'aux1466' direct represents '3' with '-5915'
5912 5914 5916 -5915 0
c Encoding variable: aux1467 with domain: int(0..4) (representing constraint (aux1462 + aux1464))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '5917'
c Var 'aux1467' direct represents '0' with '5917'
c Var 'aux1467' order represents '1' with '5918'
-5917 5918 0
c Var 'aux1467' direct represents '1' with '5919'
5917 -5918 5919 0
-5919 5918 0
-5919 -5917 0
c Var 'aux1467' order represents '2' with '5920'
-5918 5920 0
c Var 'aux1467' direct represents '2' with '5921'
5918 -5920 5921 0
-5921 5920 0
-5921 -5918 0
c Var 'aux1467' order represents '3' with '5922'
-5920 5922 0
c Var 'aux1467' direct represents '3' with '5923'
5920 -5922 5923 0
-5923 5922 0
-5923 -5920 0
c Var 'aux1467' direct represents '4' with '-5922'
5917 5919 5921 5923 -5922 0
c Encoding variable: aux1468 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '5924'
c Var 'aux1468' direct represents '0' with '5924'
c Var 'aux1468' order represents '1' with '5925'
-5924 5925 0
c Var 'aux1468' direct represents '1' with '5926'
5924 -5925 5926 0
-5926 5925 0
-5926 -5924 0
c Var 'aux1468' direct represents '2' with '-5925'
5924 5926 -5925 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '5927'
c Var 'aux1469' direct represents '0' with '5927'
c Var 'aux1469' order represents '1' with '5928'
-5927 5928 0
c Var 'aux1469' direct represents '1' with '5929'
5927 -5928 5929 0
-5929 5928 0
-5929 -5927 0
c Var 'aux1469' direct represents '2' with '-5928'
5927 5929 -5928 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '5930'
c Var 'aux1470' direct represents '0' with '5930'
c Var 'aux1470' order represents '1' with '5931'
-5930 5931 0
c Var 'aux1470' direct represents '1' with '5932'
5930 -5931 5932 0
-5932 5931 0
-5932 -5930 0
c Var 'aux1470' direct represents '2' with '-5931'
5930 5932 -5931 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '5933'
c Var 'aux1471' direct represents '0' with '5933'
c Var 'aux1471' order represents '1' with '5934'
-5933 5934 0
c Var 'aux1471' direct represents '1' with '5935'
5933 -5934 5935 0
-5935 5934 0
-5935 -5933 0
c Var 'aux1471' direct represents '2' with '-5934'
5933 5935 -5934 0
c Encoding variable: aux1472 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1471))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '5936'
c Var 'aux1472' direct represents '0' with '5936'
c Var 'aux1472' order represents '1' with '5937'
-5936 5937 0
c Var 'aux1472' direct represents '1' with '5938'
5936 -5937 5938 0
-5938 5937 0
-5938 -5936 0
c Var 'aux1472' order represents '2' with '5939'
-5937 5939 0
c Var 'aux1472' direct represents '2' with '5940'
5937 -5939 5940 0
-5940 5939 0
-5940 -5937 0
c Var 'aux1472' direct represents '3' with '-5939'
5936 5938 5940 -5939 0
c Encoding variable: aux1473 with domain: int(0..4) (representing constraint (aux1468 + aux1470))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '5941'
c Var 'aux1473' direct represents '0' with '5941'
c Var 'aux1473' order represents '1' with '5942'
-5941 5942 0
c Var 'aux1473' direct represents '1' with '5943'
5941 -5942 5943 0
-5943 5942 0
-5943 -5941 0
c Var 'aux1473' order represents '2' with '5944'
-5942 5944 0
c Var 'aux1473' direct represents '2' with '5945'
5942 -5944 5945 0
-5945 5944 0
-5945 -5942 0
c Var 'aux1473' order represents '3' with '5946'
-5944 5946 0
c Var 'aux1473' direct represents '3' with '5947'
5944 -5946 5947 0
-5947 5946 0
-5947 -5944 0
c Var 'aux1473' direct represents '4' with '-5946'
5941 5943 5945 5947 -5946 0
c Encoding variable: aux1474 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '5948'
c Var 'aux1474' direct represents '0' with '5948'
c Var 'aux1474' order represents '1' with '5949'
-5948 5949 0
c Var 'aux1474' direct represents '1' with '5950'
5948 -5949 5950 0
-5950 5949 0
-5950 -5948 0
c Var 'aux1474' direct represents '2' with '-5949'
5948 5950 -5949 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '5951'
c Var 'aux1475' direct represents '0' with '5951'
c Var 'aux1475' order represents '1' with '5952'
-5951 5952 0
c Var 'aux1475' direct represents '1' with '5953'
5951 -5952 5953 0
-5953 5952 0
-5953 -5951 0
c Var 'aux1475' direct represents '2' with '-5952'
5951 5953 -5952 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '5954'
c Var 'aux1476' direct represents '0' with '5954'
c Var 'aux1476' order represents '1' with '5955'
-5954 5955 0
c Var 'aux1476' direct represents '1' with '5956'
5954 -5955 5956 0
-5956 5955 0
-5956 -5954 0
c Var 'aux1476' direct represents '2' with '-5955'
5954 5956 -5955 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '5957'
c Var 'aux1477' direct represents '0' with '5957'
c Var 'aux1477' order represents '1' with '5958'
-5957 5958 0
c Var 'aux1477' direct represents '1' with '5959'
5957 -5958 5959 0
-5959 5958 0
-5959 -5957 0
c Var 'aux1477' direct represents '2' with '-5958'
5957 5959 -5958 0
c Encoding variable: aux1478 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1477))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '5960'
c Var 'aux1478' direct represents '0' with '5960'
c Var 'aux1478' order represents '1' with '5961'
-5960 5961 0
c Var 'aux1478' direct represents '1' with '5962'
5960 -5961 5962 0
-5962 5961 0
-5962 -5960 0
c Var 'aux1478' order represents '2' with '5963'
-5961 5963 0
c Var 'aux1478' direct represents '2' with '5964'
5961 -5963 5964 0
-5964 5963 0
-5964 -5961 0
c Var 'aux1478' direct represents '3' with '-5963'
5960 5962 5964 -5963 0
c Encoding variable: aux1479 with domain: int(0..4) (representing constraint (aux1474 + aux1476))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '5965'
c Var 'aux1479' direct represents '0' with '5965'
c Var 'aux1479' order represents '1' with '5966'
-5965 5966 0
c Var 'aux1479' direct represents '1' with '5967'
5965 -5966 5967 0
-5967 5966 0
-5967 -5965 0
c Var 'aux1479' order represents '2' with '5968'
-5966 5968 0
c Var 'aux1479' direct represents '2' with '5969'
5966 -5968 5969 0
-5969 5968 0
-5969 -5966 0
c Var 'aux1479' order represents '3' with '5970'
-5968 5970 0
c Var 'aux1479' direct represents '3' with '5971'
5968 -5970 5971 0
-5971 5970 0
-5971 -5968 0
c Var 'aux1479' direct represents '4' with '-5970'
5965 5967 5969 5971 -5970 0
c Encoding variable: aux1480 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '5972'
c Var 'aux1480' direct represents '0' with '5972'
c Var 'aux1480' order represents '1' with '5973'
-5972 5973 0
c Var 'aux1480' direct represents '1' with '5974'
5972 -5973 5974 0
-5974 5973 0
-5974 -5972 0
c Var 'aux1480' direct represents '2' with '-5973'
5972 5974 -5973 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '5975'
c Var 'aux1481' direct represents '0' with '5975'
c Var 'aux1481' order represents '1' with '5976'
-5975 5976 0
c Var 'aux1481' direct represents '1' with '5977'
5975 -5976 5977 0
-5977 5976 0
-5977 -5975 0
c Var 'aux1481' direct represents '2' with '-5976'
5975 5977 -5976 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '5978'
c Var 'aux1482' direct represents '0' with '5978'
c Var 'aux1482' order represents '1' with '5979'
-5978 5979 0
c Var 'aux1482' direct represents '1' with '5980'
5978 -5979 5980 0
-5980 5979 0
-5980 -5978 0
c Var 'aux1482' direct represents '2' with '-5979'
5978 5980 -5979 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '5981'
c Var 'aux1483' direct represents '0' with '5981'
c Var 'aux1483' order represents '1' with '5982'
-5981 5982 0
c Var 'aux1483' direct represents '1' with '5983'
5981 -5982 5983 0
-5983 5982 0
-5983 -5981 0
c Var 'aux1483' direct represents '2' with '-5982'
5981 5983 -5982 0
c Encoding variable: aux1484 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1483))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '5984'
c Var 'aux1484' direct represents '0' with '5984'
c Var 'aux1484' order represents '1' with '5985'
-5984 5985 0
c Var 'aux1484' direct represents '1' with '5986'
5984 -5985 5986 0
-5986 5985 0
-5986 -5984 0
c Var 'aux1484' order represents '2' with '5987'
-5985 5987 0
c Var 'aux1484' direct represents '2' with '5988'
5985 -5987 5988 0
-5988 5987 0
-5988 -5985 0
c Var 'aux1484' direct represents '3' with '-5987'
5984 5986 5988 -5987 0
c Encoding variable: aux1485 with domain: int(0..4) (representing constraint (aux1480 + aux1482))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '5989'
c Var 'aux1485' direct represents '0' with '5989'
c Var 'aux1485' order represents '1' with '5990'
-5989 5990 0
c Var 'aux1485' direct represents '1' with '5991'
5989 -5990 5991 0
-5991 5990 0
-5991 -5989 0
c Var 'aux1485' order represents '2' with '5992'
-5990 5992 0
c Var 'aux1485' direct represents '2' with '5993'
5990 -5992 5993 0
-5993 5992 0
-5993 -5990 0
c Var 'aux1485' order represents '3' with '5994'
-5992 5994 0
c Var 'aux1485' direct represents '3' with '5995'
5992 -5994 5995 0
-5995 5994 0
-5995 -5992 0
c Var 'aux1485' direct represents '4' with '-5994'
5989 5991 5993 5995 -5994 0
c Encoding variable: aux1486 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '5996'
c Var 'aux1486' direct represents '0' with '5996'
c Var 'aux1486' order represents '1' with '5997'
-5996 5997 0
c Var 'aux1486' direct represents '1' with '5998'
5996 -5997 5998 0
-5998 5997 0
-5998 -5996 0
c Var 'aux1486' direct represents '2' with '-5997'
5996 5998 -5997 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '5999'
c Var 'aux1487' direct represents '0' with '5999'
c Var 'aux1487' order represents '1' with '6000'
-5999 6000 0
c Var 'aux1487' direct represents '1' with '6001'
5999 -6000 6001 0
-6001 6000 0
-6001 -5999 0
c Var 'aux1487' direct represents '2' with '-6000'
5999 6001 -6000 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6002'
c Var 'aux1488' direct represents '0' with '6002'
c Var 'aux1488' order represents '1' with '6003'
-6002 6003 0
c Var 'aux1488' direct represents '1' with '6004'
6002 -6003 6004 0
-6004 6003 0
-6004 -6002 0
c Var 'aux1488' direct represents '2' with '-6003'
6002 6004 -6003 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6005'
c Var 'aux1489' direct represents '0' with '6005'
c Var 'aux1489' order represents '1' with '6006'
-6005 6006 0
c Var 'aux1489' direct represents '1' with '6007'
6005 -6006 6007 0
-6007 6006 0
-6007 -6005 0
c Var 'aux1489' direct represents '2' with '-6006'
6005 6007 -6006 0
c Encoding variable: aux1490 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1489))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6008'
c Var 'aux1490' direct represents '0' with '6008'
c Var 'aux1490' order represents '1' with '6009'
-6008 6009 0
c Var 'aux1490' direct represents '1' with '6010'
6008 -6009 6010 0
-6010 6009 0
-6010 -6008 0
c Var 'aux1490' order represents '2' with '6011'
-6009 6011 0
c Var 'aux1490' direct represents '2' with '6012'
6009 -6011 6012 0
-6012 6011 0
-6012 -6009 0
c Var 'aux1490' direct represents '3' with '-6011'
6008 6010 6012 -6011 0
c Encoding variable: aux1491 with domain: int(0..4) (representing constraint (aux1486 + aux1488))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6013'
c Var 'aux1491' direct represents '0' with '6013'
c Var 'aux1491' order represents '1' with '6014'
-6013 6014 0
c Var 'aux1491' direct represents '1' with '6015'
6013 -6014 6015 0
-6015 6014 0
-6015 -6013 0
c Var 'aux1491' order represents '2' with '6016'
-6014 6016 0
c Var 'aux1491' direct represents '2' with '6017'
6014 -6016 6017 0
-6017 6016 0
-6017 -6014 0
c Var 'aux1491' order represents '3' with '6018'
-6016 6018 0
c Var 'aux1491' direct represents '3' with '6019'
6016 -6018 6019 0
-6019 6018 0
-6019 -6016 0
c Var 'aux1491' direct represents '4' with '-6018'
6013 6015 6017 6019 -6018 0
c Encoding variable: aux1492 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6020'
c Var 'aux1492' direct represents '0' with '6020'
c Var 'aux1492' order represents '1' with '6021'
-6020 6021 0
c Var 'aux1492' direct represents '1' with '6022'
6020 -6021 6022 0
-6022 6021 0
-6022 -6020 0
c Var 'aux1492' direct represents '2' with '-6021'
6020 6022 -6021 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6023'
c Var 'aux1493' direct represents '0' with '6023'
c Var 'aux1493' order represents '1' with '6024'
-6023 6024 0
c Var 'aux1493' direct represents '1' with '6025'
6023 -6024 6025 0
-6025 6024 0
-6025 -6023 0
c Var 'aux1493' direct represents '2' with '-6024'
6023 6025 -6024 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6026'
c Var 'aux1494' direct represents '0' with '6026'
c Var 'aux1494' order represents '1' with '6027'
-6026 6027 0
c Var 'aux1494' direct represents '1' with '6028'
6026 -6027 6028 0
-6028 6027 0
-6028 -6026 0
c Var 'aux1494' direct represents '2' with '-6027'
6026 6028 -6027 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6029'
c Var 'aux1495' direct represents '0' with '6029'
c Var 'aux1495' order represents '1' with '6030'
-6029 6030 0
c Var 'aux1495' direct represents '1' with '6031'
6029 -6030 6031 0
-6031 6030 0
-6031 -6029 0
c Var 'aux1495' direct represents '2' with '-6030'
6029 6031 -6030 0
c Encoding variable: aux1496 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1495))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6032'
c Var 'aux1496' direct represents '0' with '6032'
c Var 'aux1496' order represents '1' with '6033'
-6032 6033 0
c Var 'aux1496' direct represents '1' with '6034'
6032 -6033 6034 0
-6034 6033 0
-6034 -6032 0
c Var 'aux1496' order represents '2' with '6035'
-6033 6035 0
c Var 'aux1496' direct represents '2' with '6036'
6033 -6035 6036 0
-6036 6035 0
-6036 -6033 0
c Var 'aux1496' direct represents '3' with '-6035'
6032 6034 6036 -6035 0
c Encoding variable: aux1497 with domain: int(0..4) (representing constraint (aux1492 + aux1494))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6037'
c Var 'aux1497' direct represents '0' with '6037'
c Var 'aux1497' order represents '1' with '6038'
-6037 6038 0
c Var 'aux1497' direct represents '1' with '6039'
6037 -6038 6039 0
-6039 6038 0
-6039 -6037 0
c Var 'aux1497' order represents '2' with '6040'
-6038 6040 0
c Var 'aux1497' direct represents '2' with '6041'
6038 -6040 6041 0
-6041 6040 0
-6041 -6038 0
c Var 'aux1497' order represents '3' with '6042'
-6040 6042 0
c Var 'aux1497' direct represents '3' with '6043'
6040 -6042 6043 0
-6043 6042 0
-6043 -6040 0
c Var 'aux1497' direct represents '4' with '-6042'
6037 6039 6041 6043 -6042 0
c Encoding variable: aux1498 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6044'
c Var 'aux1498' direct represents '0' with '6044'
c Var 'aux1498' order represents '1' with '6045'
-6044 6045 0
c Var 'aux1498' direct represents '1' with '6046'
6044 -6045 6046 0
-6046 6045 0
-6046 -6044 0
c Var 'aux1498' direct represents '2' with '-6045'
6044 6046 -6045 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6047'
c Var 'aux1499' direct represents '0' with '6047'
c Var 'aux1499' order represents '1' with '6048'
-6047 6048 0
c Var 'aux1499' direct represents '1' with '6049'
6047 -6048 6049 0
-6049 6048 0
-6049 -6047 0
c Var 'aux1499' direct represents '2' with '-6048'
6047 6049 -6048 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6050'
c Var 'aux1500' direct represents '0' with '6050'
c Var 'aux1500' order represents '1' with '6051'
-6050 6051 0
c Var 'aux1500' direct represents '1' with '6052'
6050 -6051 6052 0
-6052 6051 0
-6052 -6050 0
c Var 'aux1500' direct represents '2' with '-6051'
6050 6052 -6051 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6053'
c Var 'aux1501' direct represents '0' with '6053'
c Var 'aux1501' order represents '1' with '6054'
-6053 6054 0
c Var 'aux1501' direct represents '1' with '6055'
6053 -6054 6055 0
-6055 6054 0
-6055 -6053 0
c Var 'aux1501' direct represents '2' with '-6054'
6053 6055 -6054 0
c Encoding variable: aux1502 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1501))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6056'
c Var 'aux1502' direct represents '0' with '6056'
c Var 'aux1502' order represents '1' with '6057'
-6056 6057 0
c Var 'aux1502' direct represents '1' with '6058'
6056 -6057 6058 0
-6058 6057 0
-6058 -6056 0
c Var 'aux1502' order represents '2' with '6059'
-6057 6059 0
c Var 'aux1502' direct represents '2' with '6060'
6057 -6059 6060 0
-6060 6059 0
-6060 -6057 0
c Var 'aux1502' direct represents '3' with '-6059'
6056 6058 6060 -6059 0
c Encoding variable: aux1503 with domain: int(0..4) (representing constraint (aux1498 + aux1500))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6061'
c Var 'aux1503' direct represents '0' with '6061'
c Var 'aux1503' order represents '1' with '6062'
-6061 6062 0
c Var 'aux1503' direct represents '1' with '6063'
6061 -6062 6063 0
-6063 6062 0
-6063 -6061 0
c Var 'aux1503' order represents '2' with '6064'
-6062 6064 0
c Var 'aux1503' direct represents '2' with '6065'
6062 -6064 6065 0
-6065 6064 0
-6065 -6062 0
c Var 'aux1503' order represents '3' with '6066'
-6064 6066 0
c Var 'aux1503' direct represents '3' with '6067'
6064 -6066 6067 0
-6067 6066 0
-6067 -6064 0
c Var 'aux1503' direct represents '4' with '-6066'
6061 6063 6065 6067 -6066 0
c Encoding variable: aux1504 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6068'
c Var 'aux1504' direct represents '0' with '6068'
c Var 'aux1504' order represents '1' with '6069'
-6068 6069 0
c Var 'aux1504' direct represents '1' with '6070'
6068 -6069 6070 0
-6070 6069 0
-6070 -6068 0
c Var 'aux1504' direct represents '2' with '-6069'
6068 6070 -6069 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6071'
c Var 'aux1505' direct represents '0' with '6071'
c Var 'aux1505' order represents '1' with '6072'
-6071 6072 0
c Var 'aux1505' direct represents '1' with '6073'
6071 -6072 6073 0
-6073 6072 0
-6073 -6071 0
c Var 'aux1505' direct represents '2' with '-6072'
6071 6073 -6072 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6074'
c Var 'aux1506' direct represents '0' with '6074'
c Var 'aux1506' order represents '1' with '6075'
-6074 6075 0
c Var 'aux1506' direct represents '1' with '6076'
6074 -6075 6076 0
-6076 6075 0
-6076 -6074 0
c Var 'aux1506' direct represents '2' with '-6075'
6074 6076 -6075 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6077'
c Var 'aux1507' direct represents '0' with '6077'
c Var 'aux1507' order represents '1' with '6078'
-6077 6078 0
c Var 'aux1507' direct represents '1' with '6079'
6077 -6078 6079 0
-6079 6078 0
-6079 -6077 0
c Var 'aux1507' direct represents '2' with '-6078'
6077 6079 -6078 0
c Encoding variable: aux1508 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1507))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6080'
c Var 'aux1508' direct represents '0' with '6080'
c Var 'aux1508' order represents '1' with '6081'
-6080 6081 0
c Var 'aux1508' direct represents '1' with '6082'
6080 -6081 6082 0
-6082 6081 0
-6082 -6080 0
c Var 'aux1508' order represents '2' with '6083'
-6081 6083 0
c Var 'aux1508' direct represents '2' with '6084'
6081 -6083 6084 0
-6084 6083 0
-6084 -6081 0
c Var 'aux1508' direct represents '3' with '-6083'
6080 6082 6084 -6083 0
c Encoding variable: aux1509 with domain: int(0..4) (representing constraint (aux1504 + aux1506))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6085'
c Var 'aux1509' direct represents '0' with '6085'
c Var 'aux1509' order represents '1' with '6086'
-6085 6086 0
c Var 'aux1509' direct represents '1' with '6087'
6085 -6086 6087 0
-6087 6086 0
-6087 -6085 0
c Var 'aux1509' order represents '2' with '6088'
-6086 6088 0
c Var 'aux1509' direct represents '2' with '6089'
6086 -6088 6089 0
-6089 6088 0
-6089 -6086 0
c Var 'aux1509' order represents '3' with '6090'
-6088 6090 0
c Var 'aux1509' direct represents '3' with '6091'
6088 -6090 6091 0
-6091 6090 0
-6091 -6088 0
c Var 'aux1509' direct represents '4' with '-6090'
6085 6087 6089 6091 -6090 0
c Encoding variable: aux1510 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6092'
c Var 'aux1510' direct represents '0' with '6092'
c Var 'aux1510' order represents '1' with '6093'
-6092 6093 0
c Var 'aux1510' direct represents '1' with '6094'
6092 -6093 6094 0
-6094 6093 0
-6094 -6092 0
c Var 'aux1510' direct represents '2' with '-6093'
6092 6094 -6093 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6095'
c Var 'aux1511' direct represents '0' with '6095'
c Var 'aux1511' order represents '1' with '6096'
-6095 6096 0
c Var 'aux1511' direct represents '1' with '6097'
6095 -6096 6097 0
-6097 6096 0
-6097 -6095 0
c Var 'aux1511' direct represents '2' with '-6096'
6095 6097 -6096 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6098'
c Var 'aux1512' direct represents '0' with '6098'
c Var 'aux1512' order represents '1' with '6099'
-6098 6099 0
c Var 'aux1512' direct represents '1' with '6100'
6098 -6099 6100 0
-6100 6099 0
-6100 -6098 0
c Var 'aux1512' direct represents '2' with '-6099'
6098 6100 -6099 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6101'
c Var 'aux1513' direct represents '0' with '6101'
c Var 'aux1513' order represents '1' with '6102'
-6101 6102 0
c Var 'aux1513' direct represents '1' with '6103'
6101 -6102 6103 0
-6103 6102 0
-6103 -6101 0
c Var 'aux1513' direct represents '2' with '-6102'
6101 6103 -6102 0
c Encoding variable: aux1514 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1513))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6104'
c Var 'aux1514' direct represents '0' with '6104'
c Var 'aux1514' order represents '1' with '6105'
-6104 6105 0
c Var 'aux1514' direct represents '1' with '6106'
6104 -6105 6106 0
-6106 6105 0
-6106 -6104 0
c Var 'aux1514' order represents '2' with '6107'
-6105 6107 0
c Var 'aux1514' direct represents '2' with '6108'
6105 -6107 6108 0
-6108 6107 0
-6108 -6105 0
c Var 'aux1514' direct represents '3' with '-6107'
6104 6106 6108 -6107 0
c Encoding variable: aux1515 with domain: int(0..4) (representing constraint (aux1510 + aux1512))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6109'
c Var 'aux1515' direct represents '0' with '6109'
c Var 'aux1515' order represents '1' with '6110'
-6109 6110 0
c Var 'aux1515' direct represents '1' with '6111'
6109 -6110 6111 0
-6111 6110 0
-6111 -6109 0
c Var 'aux1515' order represents '2' with '6112'
-6110 6112 0
c Var 'aux1515' direct represents '2' with '6113'
6110 -6112 6113 0
-6113 6112 0
-6113 -6110 0
c Var 'aux1515' order represents '3' with '6114'
-6112 6114 0
c Var 'aux1515' direct represents '3' with '6115'
6112 -6114 6115 0
-6115 6114 0
-6115 -6112 0
c Var 'aux1515' direct represents '4' with '-6114'
6109 6111 6113 6115 -6114 0
c Encoding variable: aux1516 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6116'
c Var 'aux1516' direct represents '0' with '6116'
c Var 'aux1516' order represents '1' with '6117'
-6116 6117 0
c Var 'aux1516' direct represents '1' with '6118'
6116 -6117 6118 0
-6118 6117 0
-6118 -6116 0
c Var 'aux1516' direct represents '2' with '-6117'
6116 6118 -6117 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6119'
c Var 'aux1517' direct represents '0' with '6119'
c Var 'aux1517' order represents '1' with '6120'
-6119 6120 0
c Var 'aux1517' direct represents '1' with '6121'
6119 -6120 6121 0
-6121 6120 0
-6121 -6119 0
c Var 'aux1517' direct represents '2' with '-6120'
6119 6121 -6120 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6122'
c Var 'aux1518' direct represents '0' with '6122'
c Var 'aux1518' order represents '1' with '6123'
-6122 6123 0
c Var 'aux1518' direct represents '1' with '6124'
6122 -6123 6124 0
-6124 6123 0
-6124 -6122 0
c Var 'aux1518' direct represents '2' with '-6123'
6122 6124 -6123 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6125'
c Var 'aux1519' direct represents '0' with '6125'
c Var 'aux1519' order represents '1' with '6126'
-6125 6126 0
c Var 'aux1519' direct represents '1' with '6127'
6125 -6126 6127 0
-6127 6126 0
-6127 -6125 0
c Var 'aux1519' direct represents '2' with '-6126'
6125 6127 -6126 0
c Encoding variable: aux1520 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1519))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6128'
c Var 'aux1520' direct represents '0' with '6128'
c Var 'aux1520' order represents '1' with '6129'
-6128 6129 0
c Var 'aux1520' direct represents '1' with '6130'
6128 -6129 6130 0
-6130 6129 0
-6130 -6128 0
c Var 'aux1520' order represents '2' with '6131'
-6129 6131 0
c Var 'aux1520' direct represents '2' with '6132'
6129 -6131 6132 0
-6132 6131 0
-6132 -6129 0
c Var 'aux1520' direct represents '3' with '-6131'
6128 6130 6132 -6131 0
c Encoding variable: aux1521 with domain: int(0..4) (representing constraint (aux1516 + aux1518))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6133'
c Var 'aux1521' direct represents '0' with '6133'
c Var 'aux1521' order represents '1' with '6134'
-6133 6134 0
c Var 'aux1521' direct represents '1' with '6135'
6133 -6134 6135 0
-6135 6134 0
-6135 -6133 0
c Var 'aux1521' order represents '2' with '6136'
-6134 6136 0
c Var 'aux1521' direct represents '2' with '6137'
6134 -6136 6137 0
-6137 6136 0
-6137 -6134 0
c Var 'aux1521' order represents '3' with '6138'
-6136 6138 0
c Var 'aux1521' direct represents '3' with '6139'
6136 -6138 6139 0
-6139 6138 0
-6139 -6136 0
c Var 'aux1521' direct represents '4' with '-6138'
6133 6135 6137 6139 -6138 0
c Encoding variable: aux1522 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6140'
c Var 'aux1522' direct represents '0' with '6140'
c Var 'aux1522' order represents '1' with '6141'
-6140 6141 0
c Var 'aux1522' direct represents '1' with '6142'
6140 -6141 6142 0
-6142 6141 0
-6142 -6140 0
c Var 'aux1522' direct represents '2' with '-6141'
6140 6142 -6141 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6143'
c Var 'aux1523' direct represents '0' with '6143'
c Var 'aux1523' order represents '1' with '6144'
-6143 6144 0
c Var 'aux1523' direct represents '1' with '6145'
6143 -6144 6145 0
-6145 6144 0
-6145 -6143 0
c Var 'aux1523' direct represents '2' with '-6144'
6143 6145 -6144 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6146'
c Var 'aux1524' direct represents '0' with '6146'
c Var 'aux1524' order represents '1' with '6147'
-6146 6147 0
c Var 'aux1524' direct represents '1' with '6148'
6146 -6147 6148 0
-6148 6147 0
-6148 -6146 0
c Var 'aux1524' direct represents '2' with '-6147'
6146 6148 -6147 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6149'
c Var 'aux1525' direct represents '0' with '6149'
c Var 'aux1525' order represents '1' with '6150'
-6149 6150 0
c Var 'aux1525' direct represents '1' with '6151'
6149 -6150 6151 0
-6151 6150 0
-6151 -6149 0
c Var 'aux1525' direct represents '2' with '-6150'
6149 6151 -6150 0
c Encoding variable: aux1526 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1525))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6152'
c Var 'aux1526' direct represents '0' with '6152'
c Var 'aux1526' order represents '1' with '6153'
-6152 6153 0
c Var 'aux1526' direct represents '1' with '6154'
6152 -6153 6154 0
-6154 6153 0
-6154 -6152 0
c Var 'aux1526' order represents '2' with '6155'
-6153 6155 0
c Var 'aux1526' direct represents '2' with '6156'
6153 -6155 6156 0
-6156 6155 0
-6156 -6153 0
c Var 'aux1526' direct represents '3' with '-6155'
6152 6154 6156 -6155 0
c Encoding variable: aux1527 with domain: int(0..4) (representing constraint (aux1522 + aux1524))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6157'
c Var 'aux1527' direct represents '0' with '6157'
c Var 'aux1527' order represents '1' with '6158'
-6157 6158 0
c Var 'aux1527' direct represents '1' with '6159'
6157 -6158 6159 0
-6159 6158 0
-6159 -6157 0
c Var 'aux1527' order represents '2' with '6160'
-6158 6160 0
c Var 'aux1527' direct represents '2' with '6161'
6158 -6160 6161 0
-6161 6160 0
-6161 -6158 0
c Var 'aux1527' order represents '3' with '6162'
-6160 6162 0
c Var 'aux1527' direct represents '3' with '6163'
6160 -6162 6163 0
-6163 6162 0
-6163 -6160 0
c Var 'aux1527' direct represents '4' with '-6162'
6157 6159 6161 6163 -6162 0
c Encoding variable: aux1528 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6164'
c Var 'aux1528' direct represents '0' with '6164'
c Var 'aux1528' order represents '1' with '6165'
-6164 6165 0
c Var 'aux1528' direct represents '1' with '6166'
6164 -6165 6166 0
-6166 6165 0
-6166 -6164 0
c Var 'aux1528' direct represents '2' with '-6165'
6164 6166 -6165 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6167'
c Var 'aux1529' direct represents '0' with '6167'
c Var 'aux1529' order represents '1' with '6168'
-6167 6168 0
c Var 'aux1529' direct represents '1' with '6169'
6167 -6168 6169 0
-6169 6168 0
-6169 -6167 0
c Var 'aux1529' direct represents '2' with '-6168'
6167 6169 -6168 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6170'
c Var 'aux1530' direct represents '0' with '6170'
c Var 'aux1530' order represents '1' with '6171'
-6170 6171 0
c Var 'aux1530' direct represents '1' with '6172'
6170 -6171 6172 0
-6172 6171 0
-6172 -6170 0
c Var 'aux1530' direct represents '2' with '-6171'
6170 6172 -6171 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6173'
c Var 'aux1531' direct represents '0' with '6173'
c Var 'aux1531' order represents '1' with '6174'
-6173 6174 0
c Var 'aux1531' direct represents '1' with '6175'
6173 -6174 6175 0
-6175 6174 0
-6175 -6173 0
c Var 'aux1531' direct represents '2' with '-6174'
6173 6175 -6174 0
c Encoding variable: aux1532 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1531))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6176'
c Var 'aux1532' direct represents '0' with '6176'
c Var 'aux1532' order represents '1' with '6177'
-6176 6177 0
c Var 'aux1532' direct represents '1' with '6178'
6176 -6177 6178 0
-6178 6177 0
-6178 -6176 0
c Var 'aux1532' order represents '2' with '6179'
-6177 6179 0
c Var 'aux1532' direct represents '2' with '6180'
6177 -6179 6180 0
-6180 6179 0
-6180 -6177 0
c Var 'aux1532' direct represents '3' with '-6179'
6176 6178 6180 -6179 0
c Encoding variable: aux1533 with domain: int(0..4) (representing constraint (aux1528 + aux1530))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6181'
c Var 'aux1533' direct represents '0' with '6181'
c Var 'aux1533' order represents '1' with '6182'
-6181 6182 0
c Var 'aux1533' direct represents '1' with '6183'
6181 -6182 6183 0
-6183 6182 0
-6183 -6181 0
c Var 'aux1533' order represents '2' with '6184'
-6182 6184 0
c Var 'aux1533' direct represents '2' with '6185'
6182 -6184 6185 0
-6185 6184 0
-6185 -6182 0
c Var 'aux1533' order represents '3' with '6186'
-6184 6186 0
c Var 'aux1533' direct represents '3' with '6187'
6184 -6186 6187 0
-6187 6186 0
-6187 -6184 0
c Var 'aux1533' direct represents '4' with '-6186'
6181 6183 6185 6187 -6186 0
c Encoding variable: aux1534 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6188'
c Var 'aux1534' direct represents '0' with '6188'
c Var 'aux1534' order represents '1' with '6189'
-6188 6189 0
c Var 'aux1534' direct represents '1' with '6190'
6188 -6189 6190 0
-6190 6189 0
-6190 -6188 0
c Var 'aux1534' direct represents '2' with '-6189'
6188 6190 -6189 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6191'
c Var 'aux1535' direct represents '0' with '6191'
c Var 'aux1535' order represents '1' with '6192'
-6191 6192 0
c Var 'aux1535' direct represents '1' with '6193'
6191 -6192 6193 0
-6193 6192 0
-6193 -6191 0
c Var 'aux1535' direct represents '2' with '-6192'
6191 6193 -6192 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6194'
c Var 'aux1536' direct represents '0' with '6194'
c Var 'aux1536' order represents '1' with '6195'
-6194 6195 0
c Var 'aux1536' direct represents '1' with '6196'
6194 -6195 6196 0
-6196 6195 0
-6196 -6194 0
c Var 'aux1536' direct represents '2' with '-6195'
6194 6196 -6195 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6197'
c Var 'aux1537' direct represents '0' with '6197'
c Var 'aux1537' order represents '1' with '6198'
-6197 6198 0
c Var 'aux1537' direct represents '1' with '6199'
6197 -6198 6199 0
-6199 6198 0
-6199 -6197 0
c Var 'aux1537' direct represents '2' with '-6198'
6197 6199 -6198 0
c Encoding variable: aux1538 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1537))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6200'
c Var 'aux1538' direct represents '0' with '6200'
c Var 'aux1538' order represents '1' with '6201'
-6200 6201 0
c Var 'aux1538' direct represents '1' with '6202'
6200 -6201 6202 0
-6202 6201 0
-6202 -6200 0
c Var 'aux1538' order represents '2' with '6203'
-6201 6203 0
c Var 'aux1538' direct represents '2' with '6204'
6201 -6203 6204 0
-6204 6203 0
-6204 -6201 0
c Var 'aux1538' direct represents '3' with '-6203'
6200 6202 6204 -6203 0
c Encoding variable: aux1539 with domain: int(0..4) (representing constraint (aux1534 + aux1536))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6205'
c Var 'aux1539' direct represents '0' with '6205'
c Var 'aux1539' order represents '1' with '6206'
-6205 6206 0
c Var 'aux1539' direct represents '1' with '6207'
6205 -6206 6207 0
-6207 6206 0
-6207 -6205 0
c Var 'aux1539' order represents '2' with '6208'
-6206 6208 0
c Var 'aux1539' direct represents '2' with '6209'
6206 -6208 6209 0
-6209 6208 0
-6209 -6206 0
c Var 'aux1539' order represents '3' with '6210'
-6208 6210 0
c Var 'aux1539' direct represents '3' with '6211'
6208 -6210 6211 0
-6211 6210 0
-6211 -6208 0
c Var 'aux1539' direct represents '4' with '-6210'
6205 6207 6209 6211 -6210 0
c Encoding variable: aux1540 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6212'
c Var 'aux1540' direct represents '0' with '6212'
c Var 'aux1540' order represents '1' with '6213'
-6212 6213 0
c Var 'aux1540' direct represents '1' with '6214'
6212 -6213 6214 0
-6214 6213 0
-6214 -6212 0
c Var 'aux1540' direct represents '2' with '-6213'
6212 6214 -6213 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6215'
c Var 'aux1541' direct represents '0' with '6215'
c Var 'aux1541' order represents '1' with '6216'
-6215 6216 0
c Var 'aux1541' direct represents '1' with '6217'
6215 -6216 6217 0
-6217 6216 0
-6217 -6215 0
c Var 'aux1541' direct represents '2' with '-6216'
6215 6217 -6216 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6218'
c Var 'aux1542' direct represents '0' with '6218'
c Var 'aux1542' order represents '1' with '6219'
-6218 6219 0
c Var 'aux1542' direct represents '1' with '6220'
6218 -6219 6220 0
-6220 6219 0
-6220 -6218 0
c Var 'aux1542' direct represents '2' with '-6219'
6218 6220 -6219 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6221'
c Var 'aux1543' direct represents '0' with '6221'
c Var 'aux1543' order represents '1' with '6222'
-6221 6222 0
c Var 'aux1543' direct represents '1' with '6223'
6221 -6222 6223 0
-6223 6222 0
-6223 -6221 0
c Var 'aux1543' direct represents '2' with '-6222'
6221 6223 -6222 0
c Encoding variable: aux1544 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1543))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6224'
c Var 'aux1544' direct represents '0' with '6224'
c Var 'aux1544' order represents '1' with '6225'
-6224 6225 0
c Var 'aux1544' direct represents '1' with '6226'
6224 -6225 6226 0
-6226 6225 0
-6226 -6224 0
c Var 'aux1544' order represents '2' with '6227'
-6225 6227 0
c Var 'aux1544' direct represents '2' with '6228'
6225 -6227 6228 0
-6228 6227 0
-6228 -6225 0
c Var 'aux1544' direct represents '3' with '-6227'
6224 6226 6228 -6227 0
c Encoding variable: aux1545 with domain: int(0..4) (representing constraint (aux1540 + aux1542))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6229'
c Var 'aux1545' direct represents '0' with '6229'
c Var 'aux1545' order represents '1' with '6230'
-6229 6230 0
c Var 'aux1545' direct represents '1' with '6231'
6229 -6230 6231 0
-6231 6230 0
-6231 -6229 0
c Var 'aux1545' order represents '2' with '6232'
-6230 6232 0
c Var 'aux1545' direct represents '2' with '6233'
6230 -6232 6233 0
-6233 6232 0
-6233 -6230 0
c Var 'aux1545' order represents '3' with '6234'
-6232 6234 0
c Var 'aux1545' direct represents '3' with '6235'
6232 -6234 6235 0
-6235 6234 0
-6235 -6232 0
c Var 'aux1545' direct represents '4' with '-6234'
6229 6231 6233 6235 -6234 0
c Encoding variable: aux1546 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6236'
c Var 'aux1546' direct represents '0' with '6236'
c Var 'aux1546' order represents '1' with '6237'
-6236 6237 0
c Var 'aux1546' direct represents '1' with '6238'
6236 -6237 6238 0
-6238 6237 0
-6238 -6236 0
c Var 'aux1546' direct represents '2' with '-6237'
6236 6238 -6237 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6239'
c Var 'aux1547' direct represents '0' with '6239'
c Var 'aux1547' order represents '1' with '6240'
-6239 6240 0
c Var 'aux1547' direct represents '1' with '6241'
6239 -6240 6241 0
-6241 6240 0
-6241 -6239 0
c Var 'aux1547' direct represents '2' with '-6240'
6239 6241 -6240 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6242'
c Var 'aux1548' direct represents '0' with '6242'
c Var 'aux1548' order represents '1' with '6243'
-6242 6243 0
c Var 'aux1548' direct represents '1' with '6244'
6242 -6243 6244 0
-6244 6243 0
-6244 -6242 0
c Var 'aux1548' direct represents '2' with '-6243'
6242 6244 -6243 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6245'
c Var 'aux1549' direct represents '0' with '6245'
c Var 'aux1549' order represents '1' with '6246'
-6245 6246 0
c Var 'aux1549' direct represents '1' with '6247'
6245 -6246 6247 0
-6247 6246 0
-6247 -6245 0
c Var 'aux1549' direct represents '2' with '-6246'
6245 6247 -6246 0
c Encoding variable: aux1550 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1549))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6248'
c Var 'aux1550' direct represents '0' with '6248'
c Var 'aux1550' order represents '1' with '6249'
-6248 6249 0
c Var 'aux1550' direct represents '1' with '6250'
6248 -6249 6250 0
-6250 6249 0
-6250 -6248 0
c Var 'aux1550' order represents '2' with '6251'
-6249 6251 0
c Var 'aux1550' direct represents '2' with '6252'
6249 -6251 6252 0
-6252 6251 0
-6252 -6249 0
c Var 'aux1550' direct represents '3' with '-6251'
6248 6250 6252 -6251 0
c Encoding variable: aux1551 with domain: int(0..4) (representing constraint (aux1546 + aux1548))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6253'
c Var 'aux1551' direct represents '0' with '6253'
c Var 'aux1551' order represents '1' with '6254'
-6253 6254 0
c Var 'aux1551' direct represents '1' with '6255'
6253 -6254 6255 0
-6255 6254 0
-6255 -6253 0
c Var 'aux1551' order represents '2' with '6256'
-6254 6256 0
c Var 'aux1551' direct represents '2' with '6257'
6254 -6256 6257 0
-6257 6256 0
-6257 -6254 0
c Var 'aux1551' order represents '3' with '6258'
-6256 6258 0
c Var 'aux1551' direct represents '3' with '6259'
6256 -6258 6259 0
-6259 6258 0
-6259 -6256 0
c Var 'aux1551' direct represents '4' with '-6258'
6253 6255 6257 6259 -6258 0
c Encoding variable: aux1552 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6260'
c Var 'aux1552' direct represents '0' with '6260'
c Var 'aux1552' order represents '1' with '6261'
-6260 6261 0
c Var 'aux1552' direct represents '1' with '6262'
6260 -6261 6262 0
-6262 6261 0
-6262 -6260 0
c Var 'aux1552' direct represents '2' with '-6261'
6260 6262 -6261 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6263'
c Var 'aux1553' direct represents '0' with '6263'
c Var 'aux1553' order represents '1' with '6264'
-6263 6264 0
c Var 'aux1553' direct represents '1' with '6265'
6263 -6264 6265 0
-6265 6264 0
-6265 -6263 0
c Var 'aux1553' direct represents '2' with '-6264'
6263 6265 -6264 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6266'
c Var 'aux1554' direct represents '0' with '6266'
c Var 'aux1554' order represents '1' with '6267'
-6266 6267 0
c Var 'aux1554' direct represents '1' with '6268'
6266 -6267 6268 0
-6268 6267 0
-6268 -6266 0
c Var 'aux1554' direct represents '2' with '-6267'
6266 6268 -6267 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6269'
c Var 'aux1555' direct represents '0' with '6269'
c Var 'aux1555' order represents '1' with '6270'
-6269 6270 0
c Var 'aux1555' direct represents '1' with '6271'
6269 -6270 6271 0
-6271 6270 0
-6271 -6269 0
c Var 'aux1555' direct represents '2' with '-6270'
6269 6271 -6270 0
c Encoding variable: aux1556 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1555))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6272'
c Var 'aux1556' direct represents '0' with '6272'
c Var 'aux1556' order represents '1' with '6273'
-6272 6273 0
c Var 'aux1556' direct represents '1' with '6274'
6272 -6273 6274 0
-6274 6273 0
-6274 -6272 0
c Var 'aux1556' order represents '2' with '6275'
-6273 6275 0
c Var 'aux1556' direct represents '2' with '6276'
6273 -6275 6276 0
-6276 6275 0
-6276 -6273 0
c Var 'aux1556' direct represents '3' with '-6275'
6272 6274 6276 -6275 0
c Encoding variable: aux1557 with domain: int(0..4) (representing constraint (aux1552 + aux1554))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6277'
c Var 'aux1557' direct represents '0' with '6277'
c Var 'aux1557' order represents '1' with '6278'
-6277 6278 0
c Var 'aux1557' direct represents '1' with '6279'
6277 -6278 6279 0
-6279 6278 0
-6279 -6277 0
c Var 'aux1557' order represents '2' with '6280'
-6278 6280 0
c Var 'aux1557' direct represents '2' with '6281'
6278 -6280 6281 0
-6281 6280 0
-6281 -6278 0
c Var 'aux1557' order represents '3' with '6282'
-6280 6282 0
c Var 'aux1557' direct represents '3' with '6283'
6280 -6282 6283 0
-6283 6282 0
-6283 -6280 0
c Var 'aux1557' direct represents '4' with '-6282'
6277 6279 6281 6283 -6282 0
c Encoding variable: aux1558 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6284'
c Var 'aux1558' direct represents '0' with '6284'
c Var 'aux1558' order represents '1' with '6285'
-6284 6285 0
c Var 'aux1558' direct represents '1' with '6286'
6284 -6285 6286 0
-6286 6285 0
-6286 -6284 0
c Var 'aux1558' direct represents '2' with '-6285'
6284 6286 -6285 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6287'
c Var 'aux1559' direct represents '0' with '6287'
c Var 'aux1559' order represents '1' with '6288'
-6287 6288 0
c Var 'aux1559' direct represents '1' with '6289'
6287 -6288 6289 0
-6289 6288 0
-6289 -6287 0
c Var 'aux1559' direct represents '2' with '-6288'
6287 6289 -6288 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6290'
c Var 'aux1560' direct represents '0' with '6290'
c Var 'aux1560' order represents '1' with '6291'
-6290 6291 0
c Var 'aux1560' direct represents '1' with '6292'
6290 -6291 6292 0
-6292 6291 0
-6292 -6290 0
c Var 'aux1560' direct represents '2' with '-6291'
6290 6292 -6291 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6293'
c Var 'aux1561' direct represents '0' with '6293'
c Var 'aux1561' order represents '1' with '6294'
-6293 6294 0
c Var 'aux1561' direct represents '1' with '6295'
6293 -6294 6295 0
-6295 6294 0
-6295 -6293 0
c Var 'aux1561' direct represents '2' with '-6294'
6293 6295 -6294 0
c Encoding variable: aux1562 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1561))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6296'
c Var 'aux1562' direct represents '0' with '6296'
c Var 'aux1562' order represents '1' with '6297'
-6296 6297 0
c Var 'aux1562' direct represents '1' with '6298'
6296 -6297 6298 0
-6298 6297 0
-6298 -6296 0
c Var 'aux1562' order represents '2' with '6299'
-6297 6299 0
c Var 'aux1562' direct represents '2' with '6300'
6297 -6299 6300 0
-6300 6299 0
-6300 -6297 0
c Var 'aux1562' direct represents '3' with '-6299'
6296 6298 6300 -6299 0
c Encoding variable: aux1563 with domain: int(0..4) (representing constraint (aux1558 + aux1560))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6301'
c Var 'aux1563' direct represents '0' with '6301'
c Var 'aux1563' order represents '1' with '6302'
-6301 6302 0
c Var 'aux1563' direct represents '1' with '6303'
6301 -6302 6303 0
-6303 6302 0
-6303 -6301 0
c Var 'aux1563' order represents '2' with '6304'
-6302 6304 0
c Var 'aux1563' direct represents '2' with '6305'
6302 -6304 6305 0
-6305 6304 0
-6305 -6302 0
c Var 'aux1563' order represents '3' with '6306'
-6304 6306 0
c Var 'aux1563' direct represents '3' with '6307'
6304 -6306 6307 0
-6307 6306 0
-6307 -6304 0
c Var 'aux1563' direct represents '4' with '-6306'
6301 6303 6305 6307 -6306 0
c Encoding variable: aux1564 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6308'
c Var 'aux1564' direct represents '0' with '6308'
c Var 'aux1564' order represents '1' with '6309'
-6308 6309 0
c Var 'aux1564' direct represents '1' with '6310'
6308 -6309 6310 0
-6310 6309 0
-6310 -6308 0
c Var 'aux1564' direct represents '2' with '-6309'
6308 6310 -6309 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6311'
c Var 'aux1565' direct represents '0' with '6311'
c Var 'aux1565' order represents '1' with '6312'
-6311 6312 0
c Var 'aux1565' direct represents '1' with '6313'
6311 -6312 6313 0
-6313 6312 0
-6313 -6311 0
c Var 'aux1565' direct represents '2' with '-6312'
6311 6313 -6312 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6314'
c Var 'aux1566' direct represents '0' with '6314'
c Var 'aux1566' order represents '1' with '6315'
-6314 6315 0
c Var 'aux1566' direct represents '1' with '6316'
6314 -6315 6316 0
-6316 6315 0
-6316 -6314 0
c Var 'aux1566' direct represents '2' with '-6315'
6314 6316 -6315 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6317'
c Var 'aux1567' direct represents '0' with '6317'
c Var 'aux1567' order represents '1' with '6318'
-6317 6318 0
c Var 'aux1567' direct represents '1' with '6319'
6317 -6318 6319 0
-6319 6318 0
-6319 -6317 0
c Var 'aux1567' direct represents '2' with '-6318'
6317 6319 -6318 0
c Encoding variable: aux1568 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1567))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6320'
c Var 'aux1568' direct represents '0' with '6320'
c Var 'aux1568' order represents '1' with '6321'
-6320 6321 0
c Var 'aux1568' direct represents '1' with '6322'
6320 -6321 6322 0
-6322 6321 0
-6322 -6320 0
c Var 'aux1568' order represents '2' with '6323'
-6321 6323 0
c Var 'aux1568' direct represents '2' with '6324'
6321 -6323 6324 0
-6324 6323 0
-6324 -6321 0
c Var 'aux1568' direct represents '3' with '-6323'
6320 6322 6324 -6323 0
c Encoding variable: aux1569 with domain: int(0..4) (representing constraint (aux1564 + aux1566))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6325'
c Var 'aux1569' direct represents '0' with '6325'
c Var 'aux1569' order represents '1' with '6326'
-6325 6326 0
c Var 'aux1569' direct represents '1' with '6327'
6325 -6326 6327 0
-6327 6326 0
-6327 -6325 0
c Var 'aux1569' order represents '2' with '6328'
-6326 6328 0
c Var 'aux1569' direct represents '2' with '6329'
6326 -6328 6329 0
-6329 6328 0
-6329 -6326 0
c Var 'aux1569' order represents '3' with '6330'
-6328 6330 0
c Var 'aux1569' direct represents '3' with '6331'
6328 -6330 6331 0
-6331 6330 0
-6331 -6328 0
c Var 'aux1569' direct represents '4' with '-6330'
6325 6327 6329 6331 -6330 0
c Encoding variable: aux1570 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6332'
c Var 'aux1570' direct represents '0' with '6332'
c Var 'aux1570' order represents '1' with '6333'
-6332 6333 0
c Var 'aux1570' direct represents '1' with '6334'
6332 -6333 6334 0
-6334 6333 0
-6334 -6332 0
c Var 'aux1570' direct represents '2' with '-6333'
6332 6334 -6333 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6335'
c Var 'aux1571' direct represents '0' with '6335'
c Var 'aux1571' order represents '1' with '6336'
-6335 6336 0
c Var 'aux1571' direct represents '1' with '6337'
6335 -6336 6337 0
-6337 6336 0
-6337 -6335 0
c Var 'aux1571' direct represents '2' with '-6336'
6335 6337 -6336 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6338'
c Var 'aux1572' direct represents '0' with '6338'
c Var 'aux1572' order represents '1' with '6339'
-6338 6339 0
c Var 'aux1572' direct represents '1' with '6340'
6338 -6339 6340 0
-6340 6339 0
-6340 -6338 0
c Var 'aux1572' direct represents '2' with '-6339'
6338 6340 -6339 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6341'
c Var 'aux1573' direct represents '0' with '6341'
c Var 'aux1573' order represents '1' with '6342'
-6341 6342 0
c Var 'aux1573' direct represents '1' with '6343'
6341 -6342 6343 0
-6343 6342 0
-6343 -6341 0
c Var 'aux1573' direct represents '2' with '-6342'
6341 6343 -6342 0
c Encoding variable: aux1574 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1573))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6344'
c Var 'aux1574' direct represents '0' with '6344'
c Var 'aux1574' order represents '1' with '6345'
-6344 6345 0
c Var 'aux1574' direct represents '1' with '6346'
6344 -6345 6346 0
-6346 6345 0
-6346 -6344 0
c Var 'aux1574' order represents '2' with '6347'
-6345 6347 0
c Var 'aux1574' direct represents '2' with '6348'
6345 -6347 6348 0
-6348 6347 0
-6348 -6345 0
c Var 'aux1574' direct represents '3' with '-6347'
6344 6346 6348 -6347 0
c Encoding variable: aux1575 with domain: int(0..4) (representing constraint (aux1570 + aux1572))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6349'
c Var 'aux1575' direct represents '0' with '6349'
c Var 'aux1575' order represents '1' with '6350'
-6349 6350 0
c Var 'aux1575' direct represents '1' with '6351'
6349 -6350 6351 0
-6351 6350 0
-6351 -6349 0
c Var 'aux1575' order represents '2' with '6352'
-6350 6352 0
c Var 'aux1575' direct represents '2' with '6353'
6350 -6352 6353 0
-6353 6352 0
-6353 -6350 0
c Var 'aux1575' order represents '3' with '6354'
-6352 6354 0
c Var 'aux1575' direct represents '3' with '6355'
6352 -6354 6355 0
-6355 6354 0
-6355 -6352 0
c Var 'aux1575' direct represents '4' with '-6354'
6349 6351 6353 6355 -6354 0
c Encoding variable: aux1576 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6356'
c Var 'aux1576' direct represents '0' with '6356'
c Var 'aux1576' order represents '1' with '6357'
-6356 6357 0
c Var 'aux1576' direct represents '1' with '6358'
6356 -6357 6358 0
-6358 6357 0
-6358 -6356 0
c Var 'aux1576' direct represents '2' with '-6357'
6356 6358 -6357 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6359'
c Var 'aux1577' direct represents '0' with '6359'
c Var 'aux1577' order represents '1' with '6360'
-6359 6360 0
c Var 'aux1577' direct represents '1' with '6361'
6359 -6360 6361 0
-6361 6360 0
-6361 -6359 0
c Var 'aux1577' direct represents '2' with '-6360'
6359 6361 -6360 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6362'
c Var 'aux1578' direct represents '0' with '6362'
c Var 'aux1578' order represents '1' with '6363'
-6362 6363 0
c Var 'aux1578' direct represents '1' with '6364'
6362 -6363 6364 0
-6364 6363 0
-6364 -6362 0
c Var 'aux1578' direct represents '2' with '-6363'
6362 6364 -6363 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6365'
c Var 'aux1579' direct represents '0' with '6365'
c Var 'aux1579' order represents '1' with '6366'
-6365 6366 0
c Var 'aux1579' direct represents '1' with '6367'
6365 -6366 6367 0
-6367 6366 0
-6367 -6365 0
c Var 'aux1579' direct represents '2' with '-6366'
6365 6367 -6366 0
c Encoding variable: aux1580 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1579))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6368'
c Var 'aux1580' direct represents '0' with '6368'
c Var 'aux1580' order represents '1' with '6369'
-6368 6369 0
c Var 'aux1580' direct represents '1' with '6370'
6368 -6369 6370 0
-6370 6369 0
-6370 -6368 0
c Var 'aux1580' order represents '2' with '6371'
-6369 6371 0
c Var 'aux1580' direct represents '2' with '6372'
6369 -6371 6372 0
-6372 6371 0
-6372 -6369 0
c Var 'aux1580' direct represents '3' with '-6371'
6368 6370 6372 -6371 0
c Encoding variable: aux1581 with domain: int(0..4) (representing constraint (aux1576 + aux1578))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6373'
c Var 'aux1581' direct represents '0' with '6373'
c Var 'aux1581' order represents '1' with '6374'
-6373 6374 0
c Var 'aux1581' direct represents '1' with '6375'
6373 -6374 6375 0
-6375 6374 0
-6375 -6373 0
c Var 'aux1581' order represents '2' with '6376'
-6374 6376 0
c Var 'aux1581' direct represents '2' with '6377'
6374 -6376 6377 0
-6377 6376 0
-6377 -6374 0
c Var 'aux1581' order represents '3' with '6378'
-6376 6378 0
c Var 'aux1581' direct represents '3' with '6379'
6376 -6378 6379 0
-6379 6378 0
-6379 -6376 0
c Var 'aux1581' direct represents '4' with '-6378'
6373 6375 6377 6379 -6378 0
c Encoding variable: aux1582 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6380'
c Var 'aux1582' direct represents '0' with '6380'
c Var 'aux1582' order represents '1' with '6381'
-6380 6381 0
c Var 'aux1582' direct represents '1' with '6382'
6380 -6381 6382 0
-6382 6381 0
-6382 -6380 0
c Var 'aux1582' direct represents '2' with '-6381'
6380 6382 -6381 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6383'
c Var 'aux1583' direct represents '0' with '6383'
c Var 'aux1583' order represents '1' with '6384'
-6383 6384 0
c Var 'aux1583' direct represents '1' with '6385'
6383 -6384 6385 0
-6385 6384 0
-6385 -6383 0
c Var 'aux1583' direct represents '2' with '-6384'
6383 6385 -6384 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6386'
c Var 'aux1584' direct represents '0' with '6386'
c Var 'aux1584' order represents '1' with '6387'
-6386 6387 0
c Var 'aux1584' direct represents '1' with '6388'
6386 -6387 6388 0
-6388 6387 0
-6388 -6386 0
c Var 'aux1584' direct represents '2' with '-6387'
6386 6388 -6387 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6389'
c Var 'aux1585' direct represents '0' with '6389'
c Var 'aux1585' order represents '1' with '6390'
-6389 6390 0
c Var 'aux1585' direct represents '1' with '6391'
6389 -6390 6391 0
-6391 6390 0
-6391 -6389 0
c Var 'aux1585' direct represents '2' with '-6390'
6389 6391 -6390 0
c Encoding variable: aux1586 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1585))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6392'
c Var 'aux1586' direct represents '0' with '6392'
c Var 'aux1586' order represents '1' with '6393'
-6392 6393 0
c Var 'aux1586' direct represents '1' with '6394'
6392 -6393 6394 0
-6394 6393 0
-6394 -6392 0
c Var 'aux1586' order represents '2' with '6395'
-6393 6395 0
c Var 'aux1586' direct represents '2' with '6396'
6393 -6395 6396 0
-6396 6395 0
-6396 -6393 0
c Var 'aux1586' direct represents '3' with '-6395'
6392 6394 6396 -6395 0
c Encoding variable: aux1587 with domain: int(0..4) (representing constraint (aux1582 + aux1584))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6397'
c Var 'aux1587' direct represents '0' with '6397'
c Var 'aux1587' order represents '1' with '6398'
-6397 6398 0
c Var 'aux1587' direct represents '1' with '6399'
6397 -6398 6399 0
-6399 6398 0
-6399 -6397 0
c Var 'aux1587' order represents '2' with '6400'
-6398 6400 0
c Var 'aux1587' direct represents '2' with '6401'
6398 -6400 6401 0
-6401 6400 0
-6401 -6398 0
c Var 'aux1587' order represents '3' with '6402'
-6400 6402 0
c Var 'aux1587' direct represents '3' with '6403'
6400 -6402 6403 0
-6403 6402 0
-6403 -6400 0
c Var 'aux1587' direct represents '4' with '-6402'
6397 6399 6401 6403 -6402 0
c Encoding variable: aux1588 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6404'
c Var 'aux1588' direct represents '0' with '6404'
c Var 'aux1588' order represents '1' with '6405'
-6404 6405 0
c Var 'aux1588' direct represents '1' with '6406'
6404 -6405 6406 0
-6406 6405 0
-6406 -6404 0
c Var 'aux1588' direct represents '2' with '-6405'
6404 6406 -6405 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6407'
c Var 'aux1589' direct represents '0' with '6407'
c Var 'aux1589' order represents '1' with '6408'
-6407 6408 0
c Var 'aux1589' direct represents '1' with '6409'
6407 -6408 6409 0
-6409 6408 0
-6409 -6407 0
c Var 'aux1589' direct represents '2' with '-6408'
6407 6409 -6408 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6410'
c Var 'aux1590' direct represents '0' with '6410'
c Var 'aux1590' order represents '1' with '6411'
-6410 6411 0
c Var 'aux1590' direct represents '1' with '6412'
6410 -6411 6412 0
-6412 6411 0
-6412 -6410 0
c Var 'aux1590' direct represents '2' with '-6411'
6410 6412 -6411 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6413'
c Var 'aux1591' direct represents '0' with '6413'
c Var 'aux1591' order represents '1' with '6414'
-6413 6414 0
c Var 'aux1591' direct represents '1' with '6415'
6413 -6414 6415 0
-6415 6414 0
-6415 -6413 0
c Var 'aux1591' direct represents '2' with '-6414'
6413 6415 -6414 0
c Encoding variable: aux1592 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1591))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6416'
c Var 'aux1592' direct represents '0' with '6416'
c Var 'aux1592' order represents '1' with '6417'
-6416 6417 0
c Var 'aux1592' direct represents '1' with '6418'
6416 -6417 6418 0
-6418 6417 0
-6418 -6416 0
c Var 'aux1592' order represents '2' with '6419'
-6417 6419 0
c Var 'aux1592' direct represents '2' with '6420'
6417 -6419 6420 0
-6420 6419 0
-6420 -6417 0
c Var 'aux1592' direct represents '3' with '-6419'
6416 6418 6420 -6419 0
c Encoding variable: aux1593 with domain: int(0..4) (representing constraint (aux1588 + aux1590))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6421'
c Var 'aux1593' direct represents '0' with '6421'
c Var 'aux1593' order represents '1' with '6422'
-6421 6422 0
c Var 'aux1593' direct represents '1' with '6423'
6421 -6422 6423 0
-6423 6422 0
-6423 -6421 0
c Var 'aux1593' order represents '2' with '6424'
-6422 6424 0
c Var 'aux1593' direct represents '2' with '6425'
6422 -6424 6425 0
-6425 6424 0
-6425 -6422 0
c Var 'aux1593' order represents '3' with '6426'
-6424 6426 0
c Var 'aux1593' direct represents '3' with '6427'
6424 -6426 6427 0
-6427 6426 0
-6427 -6424 0
c Var 'aux1593' direct represents '4' with '-6426'
6421 6423 6425 6427 -6426 0
c Encoding variable: aux1594 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6428'
c Var 'aux1594' direct represents '0' with '6428'
c Var 'aux1594' order represents '1' with '6429'
-6428 6429 0
c Var 'aux1594' direct represents '1' with '6430'
6428 -6429 6430 0
-6430 6429 0
-6430 -6428 0
c Var 'aux1594' direct represents '2' with '-6429'
6428 6430 -6429 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6431'
c Var 'aux1595' direct represents '0' with '6431'
c Var 'aux1595' order represents '1' with '6432'
-6431 6432 0
c Var 'aux1595' direct represents '1' with '6433'
6431 -6432 6433 0
-6433 6432 0
-6433 -6431 0
c Var 'aux1595' direct represents '2' with '-6432'
6431 6433 -6432 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6434'
c Var 'aux1596' direct represents '0' with '6434'
c Var 'aux1596' order represents '1' with '6435'
-6434 6435 0
c Var 'aux1596' direct represents '1' with '6436'
6434 -6435 6436 0
-6436 6435 0
-6436 -6434 0
c Var 'aux1596' direct represents '2' with '-6435'
6434 6436 -6435 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6437'
c Var 'aux1597' direct represents '0' with '6437'
c Var 'aux1597' order represents '1' with '6438'
-6437 6438 0
c Var 'aux1597' direct represents '1' with '6439'
6437 -6438 6439 0
-6439 6438 0
-6439 -6437 0
c Var 'aux1597' direct represents '2' with '-6438'
6437 6439 -6438 0
c Encoding variable: aux1598 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1597))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6440'
c Var 'aux1598' direct represents '0' with '6440'
c Var 'aux1598' order represents '1' with '6441'
-6440 6441 0
c Var 'aux1598' direct represents '1' with '6442'
6440 -6441 6442 0
-6442 6441 0
-6442 -6440 0
c Var 'aux1598' order represents '2' with '6443'
-6441 6443 0
c Var 'aux1598' direct represents '2' with '6444'
6441 -6443 6444 0
-6444 6443 0
-6444 -6441 0
c Var 'aux1598' direct represents '3' with '-6443'
6440 6442 6444 -6443 0
c Encoding variable: aux1599 with domain: int(0..4) (representing constraint (aux1594 + aux1596))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6445'
c Var 'aux1599' direct represents '0' with '6445'
c Var 'aux1599' order represents '1' with '6446'
-6445 6446 0
c Var 'aux1599' direct represents '1' with '6447'
6445 -6446 6447 0
-6447 6446 0
-6447 -6445 0
c Var 'aux1599' order represents '2' with '6448'
-6446 6448 0
c Var 'aux1599' direct represents '2' with '6449'
6446 -6448 6449 0
-6449 6448 0
-6449 -6446 0
c Var 'aux1599' order represents '3' with '6450'
-6448 6450 0
c Var 'aux1599' direct represents '3' with '6451'
6448 -6450 6451 0
-6451 6450 0
-6451 -6448 0
c Var 'aux1599' direct represents '4' with '-6450'
6445 6447 6449 6451 -6450 0
c Encoding variable: aux1600 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6452'
c Var 'aux1600' direct represents '0' with '6452'
c Var 'aux1600' order represents '1' with '6453'
-6452 6453 0
c Var 'aux1600' direct represents '1' with '6454'
6452 -6453 6454 0
-6454 6453 0
-6454 -6452 0
c Var 'aux1600' direct represents '2' with '-6453'
6452 6454 -6453 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6455'
c Var 'aux1601' direct represents '0' with '6455'
c Var 'aux1601' order represents '1' with '6456'
-6455 6456 0
c Var 'aux1601' direct represents '1' with '6457'
6455 -6456 6457 0
-6457 6456 0
-6457 -6455 0
c Var 'aux1601' direct represents '2' with '-6456'
6455 6457 -6456 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6458'
c Var 'aux1602' direct represents '0' with '6458'
c Var 'aux1602' order represents '1' with '6459'
-6458 6459 0
c Var 'aux1602' direct represents '1' with '6460'
6458 -6459 6460 0
-6460 6459 0
-6460 -6458 0
c Var 'aux1602' direct represents '2' with '-6459'
6458 6460 -6459 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6461'
c Var 'aux1603' direct represents '0' with '6461'
c Var 'aux1603' order represents '1' with '6462'
-6461 6462 0
c Var 'aux1603' direct represents '1' with '6463'
6461 -6462 6463 0
-6463 6462 0
-6463 -6461 0
c Var 'aux1603' direct represents '2' with '-6462'
6461 6463 -6462 0
c Encoding variable: aux1604 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1603))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6464'
c Var 'aux1604' direct represents '0' with '6464'
c Var 'aux1604' order represents '1' with '6465'
-6464 6465 0
c Var 'aux1604' direct represents '1' with '6466'
6464 -6465 6466 0
-6466 6465 0
-6466 -6464 0
c Var 'aux1604' order represents '2' with '6467'
-6465 6467 0
c Var 'aux1604' direct represents '2' with '6468'
6465 -6467 6468 0
-6468 6467 0
-6468 -6465 0
c Var 'aux1604' direct represents '3' with '-6467'
6464 6466 6468 -6467 0
c Encoding variable: aux1605 with domain: int(0..4) (representing constraint (aux1600 + aux1602))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6469'
c Var 'aux1605' direct represents '0' with '6469'
c Var 'aux1605' order represents '1' with '6470'
-6469 6470 0
c Var 'aux1605' direct represents '1' with '6471'
6469 -6470 6471 0
-6471 6470 0
-6471 -6469 0
c Var 'aux1605' order represents '2' with '6472'
-6470 6472 0
c Var 'aux1605' direct represents '2' with '6473'
6470 -6472 6473 0
-6473 6472 0
-6473 -6470 0
c Var 'aux1605' order represents '3' with '6474'
-6472 6474 0
c Var 'aux1605' direct represents '3' with '6475'
6472 -6474 6475 0
-6475 6474 0
-6475 -6472 0
c Var 'aux1605' direct represents '4' with '-6474'
6469 6471 6473 6475 -6474 0
c Encoding variable: aux1606 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6476'
c Var 'aux1606' direct represents '0' with '6476'
c Var 'aux1606' order represents '1' with '6477'
-6476 6477 0
c Var 'aux1606' direct represents '1' with '6478'
6476 -6477 6478 0
-6478 6477 0
-6478 -6476 0
c Var 'aux1606' direct represents '2' with '-6477'
6476 6478 -6477 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6479'
c Var 'aux1607' direct represents '0' with '6479'
c Var 'aux1607' order represents '1' with '6480'
-6479 6480 0
c Var 'aux1607' direct represents '1' with '6481'
6479 -6480 6481 0
-6481 6480 0
-6481 -6479 0
c Var 'aux1607' direct represents '2' with '-6480'
6479 6481 -6480 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6482'
c Var 'aux1608' direct represents '0' with '6482'
c Var 'aux1608' order represents '1' with '6483'
-6482 6483 0
c Var 'aux1608' direct represents '1' with '6484'
6482 -6483 6484 0
-6484 6483 0
-6484 -6482 0
c Var 'aux1608' direct represents '2' with '-6483'
6482 6484 -6483 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6485'
c Var 'aux1609' direct represents '0' with '6485'
c Var 'aux1609' order represents '1' with '6486'
-6485 6486 0
c Var 'aux1609' direct represents '1' with '6487'
6485 -6486 6487 0
-6487 6486 0
-6487 -6485 0
c Var 'aux1609' direct represents '2' with '-6486'
6485 6487 -6486 0
c Encoding variable: aux1610 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1609))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6488'
c Var 'aux1610' direct represents '0' with '6488'
c Var 'aux1610' order represents '1' with '6489'
-6488 6489 0
c Var 'aux1610' direct represents '1' with '6490'
6488 -6489 6490 0
-6490 6489 0
-6490 -6488 0
c Var 'aux1610' order represents '2' with '6491'
-6489 6491 0
c Var 'aux1610' direct represents '2' with '6492'
6489 -6491 6492 0
-6492 6491 0
-6492 -6489 0
c Var 'aux1610' direct represents '3' with '-6491'
6488 6490 6492 -6491 0
c Encoding variable: aux1611 with domain: int(0..4) (representing constraint (aux1606 + aux1608))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6493'
c Var 'aux1611' direct represents '0' with '6493'
c Var 'aux1611' order represents '1' with '6494'
-6493 6494 0
c Var 'aux1611' direct represents '1' with '6495'
6493 -6494 6495 0
-6495 6494 0
-6495 -6493 0
c Var 'aux1611' order represents '2' with '6496'
-6494 6496 0
c Var 'aux1611' direct represents '2' with '6497'
6494 -6496 6497 0
-6497 6496 0
-6497 -6494 0
c Var 'aux1611' order represents '3' with '6498'
-6496 6498 0
c Var 'aux1611' direct represents '3' with '6499'
6496 -6498 6499 0
-6499 6498 0
-6499 -6496 0
c Var 'aux1611' direct represents '4' with '-6498'
6493 6495 6497 6499 -6498 0
c Encoding variable: aux1612 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6500'
c Var 'aux1612' direct represents '0' with '6500'
c Var 'aux1612' order represents '1' with '6501'
-6500 6501 0
c Var 'aux1612' direct represents '1' with '6502'
6500 -6501 6502 0
-6502 6501 0
-6502 -6500 0
c Var 'aux1612' direct represents '2' with '-6501'
6500 6502 -6501 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6503'
c Var 'aux1613' direct represents '0' with '6503'
c Var 'aux1613' order represents '1' with '6504'
-6503 6504 0
c Var 'aux1613' direct represents '1' with '6505'
6503 -6504 6505 0
-6505 6504 0
-6505 -6503 0
c Var 'aux1613' direct represents '2' with '-6504'
6503 6505 -6504 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6506'
c Var 'aux1614' direct represents '0' with '6506'
c Var 'aux1614' order represents '1' with '6507'
-6506 6507 0
c Var 'aux1614' direct represents '1' with '6508'
6506 -6507 6508 0
-6508 6507 0
-6508 -6506 0
c Var 'aux1614' direct represents '2' with '-6507'
6506 6508 -6507 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6509'
c Var 'aux1615' direct represents '0' with '6509'
c Var 'aux1615' order represents '1' with '6510'
-6509 6510 0
c Var 'aux1615' direct represents '1' with '6511'
6509 -6510 6511 0
-6511 6510 0
-6511 -6509 0
c Var 'aux1615' direct represents '2' with '-6510'
6509 6511 -6510 0
c Encoding variable: aux1616 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1615))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6512'
c Var 'aux1616' direct represents '0' with '6512'
c Var 'aux1616' order represents '1' with '6513'
-6512 6513 0
c Var 'aux1616' direct represents '1' with '6514'
6512 -6513 6514 0
-6514 6513 0
-6514 -6512 0
c Var 'aux1616' order represents '2' with '6515'
-6513 6515 0
c Var 'aux1616' direct represents '2' with '6516'
6513 -6515 6516 0
-6516 6515 0
-6516 -6513 0
c Var 'aux1616' direct represents '3' with '-6515'
6512 6514 6516 -6515 0
c Encoding variable: aux1617 with domain: int(0..4) (representing constraint (aux1612 + aux1614))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6517'
c Var 'aux1617' direct represents '0' with '6517'
c Var 'aux1617' order represents '1' with '6518'
-6517 6518 0
c Var 'aux1617' direct represents '1' with '6519'
6517 -6518 6519 0
-6519 6518 0
-6519 -6517 0
c Var 'aux1617' order represents '2' with '6520'
-6518 6520 0
c Var 'aux1617' direct represents '2' with '6521'
6518 -6520 6521 0
-6521 6520 0
-6521 -6518 0
c Var 'aux1617' order represents '3' with '6522'
-6520 6522 0
c Var 'aux1617' direct represents '3' with '6523'
6520 -6522 6523 0
-6523 6522 0
-6523 -6520 0
c Var 'aux1617' direct represents '4' with '-6522'
6517 6519 6521 6523 -6522 0
c Encoding variable: aux1618 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6524'
c Var 'aux1618' direct represents '0' with '6524'
c Var 'aux1618' order represents '1' with '6525'
-6524 6525 0
c Var 'aux1618' direct represents '1' with '6526'
6524 -6525 6526 0
-6526 6525 0
-6526 -6524 0
c Var 'aux1618' direct represents '2' with '-6525'
6524 6526 -6525 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6527'
c Var 'aux1619' direct represents '0' with '6527'
c Var 'aux1619' order represents '1' with '6528'
-6527 6528 0
c Var 'aux1619' direct represents '1' with '6529'
6527 -6528 6529 0
-6529 6528 0
-6529 -6527 0
c Var 'aux1619' direct represents '2' with '-6528'
6527 6529 -6528 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6530'
c Var 'aux1620' direct represents '0' with '6530'
c Var 'aux1620' order represents '1' with '6531'
-6530 6531 0
c Var 'aux1620' direct represents '1' with '6532'
6530 -6531 6532 0
-6532 6531 0
-6532 -6530 0
c Var 'aux1620' direct represents '2' with '-6531'
6530 6532 -6531 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6533'
c Var 'aux1621' direct represents '0' with '6533'
c Var 'aux1621' order represents '1' with '6534'
-6533 6534 0
c Var 'aux1621' direct represents '1' with '6535'
6533 -6534 6535 0
-6535 6534 0
-6535 -6533 0
c Var 'aux1621' direct represents '2' with '-6534'
6533 6535 -6534 0
c Encoding variable: aux1622 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1621))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6536'
c Var 'aux1622' direct represents '0' with '6536'
c Var 'aux1622' order represents '1' with '6537'
-6536 6537 0
c Var 'aux1622' direct represents '1' with '6538'
6536 -6537 6538 0
-6538 6537 0
-6538 -6536 0
c Var 'aux1622' order represents '2' with '6539'
-6537 6539 0
c Var 'aux1622' direct represents '2' with '6540'
6537 -6539 6540 0
-6540 6539 0
-6540 -6537 0
c Var 'aux1622' direct represents '3' with '-6539'
6536 6538 6540 -6539 0
c Encoding variable: aux1623 with domain: int(0..4) (representing constraint (aux1618 + aux1620))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6541'
c Var 'aux1623' direct represents '0' with '6541'
c Var 'aux1623' order represents '1' with '6542'
-6541 6542 0
c Var 'aux1623' direct represents '1' with '6543'
6541 -6542 6543 0
-6543 6542 0
-6543 -6541 0
c Var 'aux1623' order represents '2' with '6544'
-6542 6544 0
c Var 'aux1623' direct represents '2' with '6545'
6542 -6544 6545 0
-6545 6544 0
-6545 -6542 0
c Var 'aux1623' order represents '3' with '6546'
-6544 6546 0
c Var 'aux1623' direct represents '3' with '6547'
6544 -6546 6547 0
-6547 6546 0
-6547 -6544 0
c Var 'aux1623' direct represents '4' with '-6546'
6541 6543 6545 6547 -6546 0
c Encoding variable: aux1624 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6548'
c Var 'aux1624' direct represents '0' with '6548'
c Var 'aux1624' order represents '1' with '6549'
-6548 6549 0
c Var 'aux1624' direct represents '1' with '6550'
6548 -6549 6550 0
-6550 6549 0
-6550 -6548 0
c Var 'aux1624' direct represents '2' with '-6549'
6548 6550 -6549 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6551'
c Var 'aux1625' direct represents '0' with '6551'
c Var 'aux1625' order represents '1' with '6552'
-6551 6552 0
c Var 'aux1625' direct represents '1' with '6553'
6551 -6552 6553 0
-6553 6552 0
-6553 -6551 0
c Var 'aux1625' direct represents '2' with '-6552'
6551 6553 -6552 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6554'
c Var 'aux1626' direct represents '0' with '6554'
c Var 'aux1626' order represents '1' with '6555'
-6554 6555 0
c Var 'aux1626' direct represents '1' with '6556'
6554 -6555 6556 0
-6556 6555 0
-6556 -6554 0
c Var 'aux1626' direct represents '2' with '-6555'
6554 6556 -6555 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6557'
c Var 'aux1627' direct represents '0' with '6557'
c Var 'aux1627' order represents '1' with '6558'
-6557 6558 0
c Var 'aux1627' direct represents '1' with '6559'
6557 -6558 6559 0
-6559 6558 0
-6559 -6557 0
c Var 'aux1627' direct represents '2' with '-6558'
6557 6559 -6558 0
c Encoding variable: aux1628 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1627))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6560'
c Var 'aux1628' direct represents '0' with '6560'
c Var 'aux1628' order represents '1' with '6561'
-6560 6561 0
c Var 'aux1628' direct represents '1' with '6562'
6560 -6561 6562 0
-6562 6561 0
-6562 -6560 0
c Var 'aux1628' order represents '2' with '6563'
-6561 6563 0
c Var 'aux1628' direct represents '2' with '6564'
6561 -6563 6564 0
-6564 6563 0
-6564 -6561 0
c Var 'aux1628' direct represents '3' with '-6563'
6560 6562 6564 -6563 0
c Encoding variable: aux1629 with domain: int(0..4) (representing constraint (aux1624 + aux1626))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6565'
c Var 'aux1629' direct represents '0' with '6565'
c Var 'aux1629' order represents '1' with '6566'
-6565 6566 0
c Var 'aux1629' direct represents '1' with '6567'
6565 -6566 6567 0
-6567 6566 0
-6567 -6565 0
c Var 'aux1629' order represents '2' with '6568'
-6566 6568 0
c Var 'aux1629' direct represents '2' with '6569'
6566 -6568 6569 0
-6569 6568 0
-6569 -6566 0
c Var 'aux1629' order represents '3' with '6570'
-6568 6570 0
c Var 'aux1629' direct represents '3' with '6571'
6568 -6570 6571 0
-6571 6570 0
-6571 -6568 0
c Var 'aux1629' direct represents '4' with '-6570'
6565 6567 6569 6571 -6570 0
c Encoding variable: aux1630 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6572'
c Var 'aux1630' direct represents '0' with '6572'
c Var 'aux1630' order represents '1' with '6573'
-6572 6573 0
c Var 'aux1630' direct represents '1' with '6574'
6572 -6573 6574 0
-6574 6573 0
-6574 -6572 0
c Var 'aux1630' direct represents '2' with '-6573'
6572 6574 -6573 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6575'
c Var 'aux1631' direct represents '0' with '6575'
c Var 'aux1631' order represents '1' with '6576'
-6575 6576 0
c Var 'aux1631' direct represents '1' with '6577'
6575 -6576 6577 0
-6577 6576 0
-6577 -6575 0
c Var 'aux1631' direct represents '2' with '-6576'
6575 6577 -6576 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6578'
c Var 'aux1632' direct represents '0' with '6578'
c Var 'aux1632' order represents '1' with '6579'
-6578 6579 0
c Var 'aux1632' direct represents '1' with '6580'
6578 -6579 6580 0
-6580 6579 0
-6580 -6578 0
c Var 'aux1632' direct represents '2' with '-6579'
6578 6580 -6579 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6581'
c Var 'aux1633' direct represents '0' with '6581'
c Var 'aux1633' order represents '1' with '6582'
-6581 6582 0
c Var 'aux1633' direct represents '1' with '6583'
6581 -6582 6583 0
-6583 6582 0
-6583 -6581 0
c Var 'aux1633' direct represents '2' with '-6582'
6581 6583 -6582 0
c Encoding variable: aux1634 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1633))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6584'
c Var 'aux1634' direct represents '0' with '6584'
c Var 'aux1634' order represents '1' with '6585'
-6584 6585 0
c Var 'aux1634' direct represents '1' with '6586'
6584 -6585 6586 0
-6586 6585 0
-6586 -6584 0
c Var 'aux1634' order represents '2' with '6587'
-6585 6587 0
c Var 'aux1634' direct represents '2' with '6588'
6585 -6587 6588 0
-6588 6587 0
-6588 -6585 0
c Var 'aux1634' direct represents '3' with '-6587'
6584 6586 6588 -6587 0
c Encoding variable: aux1635 with domain: int(0..4) (representing constraint (aux1630 + aux1632))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6589'
c Var 'aux1635' direct represents '0' with '6589'
c Var 'aux1635' order represents '1' with '6590'
-6589 6590 0
c Var 'aux1635' direct represents '1' with '6591'
6589 -6590 6591 0
-6591 6590 0
-6591 -6589 0
c Var 'aux1635' order represents '2' with '6592'
-6590 6592 0
c Var 'aux1635' direct represents '2' with '6593'
6590 -6592 6593 0
-6593 6592 0
-6593 -6590 0
c Var 'aux1635' order represents '3' with '6594'
-6592 6594 0
c Var 'aux1635' direct represents '3' with '6595'
6592 -6594 6595 0
-6595 6594 0
-6595 -6592 0
c Var 'aux1635' direct represents '4' with '-6594'
6589 6591 6593 6595 -6594 0
c Encoding variable: aux1636 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6596'
c Var 'aux1636' direct represents '0' with '6596'
c Var 'aux1636' order represents '1' with '6597'
-6596 6597 0
c Var 'aux1636' direct represents '1' with '6598'
6596 -6597 6598 0
-6598 6597 0
-6598 -6596 0
c Var 'aux1636' direct represents '2' with '-6597'
6596 6598 -6597 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6599'
c Var 'aux1637' direct represents '0' with '6599'
c Var 'aux1637' order represents '1' with '6600'
-6599 6600 0
c Var 'aux1637' direct represents '1' with '6601'
6599 -6600 6601 0
-6601 6600 0
-6601 -6599 0
c Var 'aux1637' direct represents '2' with '-6600'
6599 6601 -6600 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6602'
c Var 'aux1638' direct represents '0' with '6602'
c Var 'aux1638' order represents '1' with '6603'
-6602 6603 0
c Var 'aux1638' direct represents '1' with '6604'
6602 -6603 6604 0
-6604 6603 0
-6604 -6602 0
c Var 'aux1638' direct represents '2' with '-6603'
6602 6604 -6603 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6605'
c Var 'aux1639' direct represents '0' with '6605'
c Var 'aux1639' order represents '1' with '6606'
-6605 6606 0
c Var 'aux1639' direct represents '1' with '6607'
6605 -6606 6607 0
-6607 6606 0
-6607 -6605 0
c Var 'aux1639' direct represents '2' with '-6606'
6605 6607 -6606 0
c Encoding variable: aux1640 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1639))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6608'
c Var 'aux1640' direct represents '0' with '6608'
c Var 'aux1640' order represents '1' with '6609'
-6608 6609 0
c Var 'aux1640' direct represents '1' with '6610'
6608 -6609 6610 0
-6610 6609 0
-6610 -6608 0
c Var 'aux1640' order represents '2' with '6611'
-6609 6611 0
c Var 'aux1640' direct represents '2' with '6612'
6609 -6611 6612 0
-6612 6611 0
-6612 -6609 0
c Var 'aux1640' direct represents '3' with '-6611'
6608 6610 6612 -6611 0
c Encoding variable: aux1641 with domain: int(0..4) (representing constraint (aux1636 + aux1638))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6613'
c Var 'aux1641' direct represents '0' with '6613'
c Var 'aux1641' order represents '1' with '6614'
-6613 6614 0
c Var 'aux1641' direct represents '1' with '6615'
6613 -6614 6615 0
-6615 6614 0
-6615 -6613 0
c Var 'aux1641' order represents '2' with '6616'
-6614 6616 0
c Var 'aux1641' direct represents '2' with '6617'
6614 -6616 6617 0
-6617 6616 0
-6617 -6614 0
c Var 'aux1641' order represents '3' with '6618'
-6616 6618 0
c Var 'aux1641' direct represents '3' with '6619'
6616 -6618 6619 0
-6619 6618 0
-6619 -6616 0
c Var 'aux1641' direct represents '4' with '-6618'
6613 6615 6617 6619 -6618 0
c Encoding variable: aux1642 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6620'
c Var 'aux1642' direct represents '0' with '6620'
c Var 'aux1642' order represents '1' with '6621'
-6620 6621 0
c Var 'aux1642' direct represents '1' with '6622'
6620 -6621 6622 0
-6622 6621 0
-6622 -6620 0
c Var 'aux1642' direct represents '2' with '-6621'
6620 6622 -6621 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6623'
c Var 'aux1643' direct represents '0' with '6623'
c Var 'aux1643' order represents '1' with '6624'
-6623 6624 0
c Var 'aux1643' direct represents '1' with '6625'
6623 -6624 6625 0
-6625 6624 0
-6625 -6623 0
c Var 'aux1643' direct represents '2' with '-6624'
6623 6625 -6624 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6626'
c Var 'aux1644' direct represents '0' with '6626'
c Var 'aux1644' order represents '1' with '6627'
-6626 6627 0
c Var 'aux1644' direct represents '1' with '6628'
6626 -6627 6628 0
-6628 6627 0
-6628 -6626 0
c Var 'aux1644' direct represents '2' with '-6627'
6626 6628 -6627 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6629'
c Var 'aux1645' direct represents '0' with '6629'
c Var 'aux1645' order represents '1' with '6630'
-6629 6630 0
c Var 'aux1645' direct represents '1' with '6631'
6629 -6630 6631 0
-6631 6630 0
-6631 -6629 0
c Var 'aux1645' direct represents '2' with '-6630'
6629 6631 -6630 0
c Encoding variable: aux1646 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1645))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6632'
c Var 'aux1646' direct represents '0' with '6632'
c Var 'aux1646' order represents '1' with '6633'
-6632 6633 0
c Var 'aux1646' direct represents '1' with '6634'
6632 -6633 6634 0
-6634 6633 0
-6634 -6632 0
c Var 'aux1646' order represents '2' with '6635'
-6633 6635 0
c Var 'aux1646' direct represents '2' with '6636'
6633 -6635 6636 0
-6636 6635 0
-6636 -6633 0
c Var 'aux1646' direct represents '3' with '-6635'
6632 6634 6636 -6635 0
c Encoding variable: aux1647 with domain: int(0..4) (representing constraint (aux1642 + aux1644))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6637'
c Var 'aux1647' direct represents '0' with '6637'
c Var 'aux1647' order represents '1' with '6638'
-6637 6638 0
c Var 'aux1647' direct represents '1' with '6639'
6637 -6638 6639 0
-6639 6638 0
-6639 -6637 0
c Var 'aux1647' order represents '2' with '6640'
-6638 6640 0
c Var 'aux1647' direct represents '2' with '6641'
6638 -6640 6641 0
-6641 6640 0
-6641 -6638 0
c Var 'aux1647' order represents '3' with '6642'
-6640 6642 0
c Var 'aux1647' direct represents '3' with '6643'
6640 -6642 6643 0
-6643 6642 0
-6643 -6640 0
c Var 'aux1647' direct represents '4' with '-6642'
6637 6639 6641 6643 -6642 0
c Encoding variable: aux1648 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6644'
c Var 'aux1648' direct represents '0' with '6644'
c Var 'aux1648' order represents '1' with '6645'
-6644 6645 0
c Var 'aux1648' direct represents '1' with '6646'
6644 -6645 6646 0
-6646 6645 0
-6646 -6644 0
c Var 'aux1648' direct represents '2' with '-6645'
6644 6646 -6645 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6647'
c Var 'aux1649' direct represents '0' with '6647'
c Var 'aux1649' order represents '1' with '6648'
-6647 6648 0
c Var 'aux1649' direct represents '1' with '6649'
6647 -6648 6649 0
-6649 6648 0
-6649 -6647 0
c Var 'aux1649' direct represents '2' with '-6648'
6647 6649 -6648 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6650'
c Var 'aux1650' direct represents '0' with '6650'
c Var 'aux1650' order represents '1' with '6651'
-6650 6651 0
c Var 'aux1650' direct represents '1' with '6652'
6650 -6651 6652 0
-6652 6651 0
-6652 -6650 0
c Var 'aux1650' direct represents '2' with '-6651'
6650 6652 -6651 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6653'
c Var 'aux1651' direct represents '0' with '6653'
c Var 'aux1651' order represents '1' with '6654'
-6653 6654 0
c Var 'aux1651' direct represents '1' with '6655'
6653 -6654 6655 0
-6655 6654 0
-6655 -6653 0
c Var 'aux1651' direct represents '2' with '-6654'
6653 6655 -6654 0
c Encoding variable: aux1652 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1651))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6656'
c Var 'aux1652' direct represents '0' with '6656'
c Var 'aux1652' order represents '1' with '6657'
-6656 6657 0
c Var 'aux1652' direct represents '1' with '6658'
6656 -6657 6658 0
-6658 6657 0
-6658 -6656 0
c Var 'aux1652' order represents '2' with '6659'
-6657 6659 0
c Var 'aux1652' direct represents '2' with '6660'
6657 -6659 6660 0
-6660 6659 0
-6660 -6657 0
c Var 'aux1652' direct represents '3' with '-6659'
6656 6658 6660 -6659 0
c Encoding variable: aux1653 with domain: int(0..4) (representing constraint (aux1648 + aux1650))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6661'
c Var 'aux1653' direct represents '0' with '6661'
c Var 'aux1653' order represents '1' with '6662'
-6661 6662 0
c Var 'aux1653' direct represents '1' with '6663'
6661 -6662 6663 0
-6663 6662 0
-6663 -6661 0
c Var 'aux1653' order represents '2' with '6664'
-6662 6664 0
c Var 'aux1653' direct represents '2' with '6665'
6662 -6664 6665 0
-6665 6664 0
-6665 -6662 0
c Var 'aux1653' order represents '3' with '6666'
-6664 6666 0
c Var 'aux1653' direct represents '3' with '6667'
6664 -6666 6667 0
-6667 6666 0
-6667 -6664 0
c Var 'aux1653' direct represents '4' with '-6666'
6661 6663 6665 6667 -6666 0
c Encoding variable: aux1654 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6668'
c Var 'aux1654' direct represents '0' with '6668'
c Var 'aux1654' order represents '1' with '6669'
-6668 6669 0
c Var 'aux1654' direct represents '1' with '6670'
6668 -6669 6670 0
-6670 6669 0
-6670 -6668 0
c Var 'aux1654' direct represents '2' with '-6669'
6668 6670 -6669 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6671'
c Var 'aux1655' direct represents '0' with '6671'
c Var 'aux1655' order represents '1' with '6672'
-6671 6672 0
c Var 'aux1655' direct represents '1' with '6673'
6671 -6672 6673 0
-6673 6672 0
-6673 -6671 0
c Var 'aux1655' direct represents '2' with '-6672'
6671 6673 -6672 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6674'
c Var 'aux1656' direct represents '0' with '6674'
c Var 'aux1656' order represents '1' with '6675'
-6674 6675 0
c Var 'aux1656' direct represents '1' with '6676'
6674 -6675 6676 0
-6676 6675 0
-6676 -6674 0
c Var 'aux1656' direct represents '2' with '-6675'
6674 6676 -6675 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6677'
c Var 'aux1657' direct represents '0' with '6677'
c Var 'aux1657' order represents '1' with '6678'
-6677 6678 0
c Var 'aux1657' direct represents '1' with '6679'
6677 -6678 6679 0
-6679 6678 0
-6679 -6677 0
c Var 'aux1657' direct represents '2' with '-6678'
6677 6679 -6678 0
c Encoding variable: aux1658 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1657))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6680'
c Var 'aux1658' direct represents '0' with '6680'
c Var 'aux1658' order represents '1' with '6681'
-6680 6681 0
c Var 'aux1658' direct represents '1' with '6682'
6680 -6681 6682 0
-6682 6681 0
-6682 -6680 0
c Var 'aux1658' order represents '2' with '6683'
-6681 6683 0
c Var 'aux1658' direct represents '2' with '6684'
6681 -6683 6684 0
-6684 6683 0
-6684 -6681 0
c Var 'aux1658' direct represents '3' with '-6683'
6680 6682 6684 -6683 0
c Encoding variable: aux1659 with domain: int(0..4) (representing constraint (aux1654 + aux1656))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6685'
c Var 'aux1659' direct represents '0' with '6685'
c Var 'aux1659' order represents '1' with '6686'
-6685 6686 0
c Var 'aux1659' direct represents '1' with '6687'
6685 -6686 6687 0
-6687 6686 0
-6687 -6685 0
c Var 'aux1659' order represents '2' with '6688'
-6686 6688 0
c Var 'aux1659' direct represents '2' with '6689'
6686 -6688 6689 0
-6689 6688 0
-6689 -6686 0
c Var 'aux1659' order represents '3' with '6690'
-6688 6690 0
c Var 'aux1659' direct represents '3' with '6691'
6688 -6690 6691 0
-6691 6690 0
-6691 -6688 0
c Var 'aux1659' direct represents '4' with '-6690'
6685 6687 6689 6691 -6690 0
c Encoding variable: aux1660 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6692'
c Var 'aux1660' direct represents '0' with '6692'
c Var 'aux1660' order represents '1' with '6693'
-6692 6693 0
c Var 'aux1660' direct represents '1' with '6694'
6692 -6693 6694 0
-6694 6693 0
-6694 -6692 0
c Var 'aux1660' direct represents '2' with '-6693'
6692 6694 -6693 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6695'
c Var 'aux1661' direct represents '0' with '6695'
c Var 'aux1661' order represents '1' with '6696'
-6695 6696 0
c Var 'aux1661' direct represents '1' with '6697'
6695 -6696 6697 0
-6697 6696 0
-6697 -6695 0
c Var 'aux1661' direct represents '2' with '-6696'
6695 6697 -6696 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6698'
c Var 'aux1662' direct represents '0' with '6698'
c Var 'aux1662' order represents '1' with '6699'
-6698 6699 0
c Var 'aux1662' direct represents '1' with '6700'
6698 -6699 6700 0
-6700 6699 0
-6700 -6698 0
c Var 'aux1662' direct represents '2' with '-6699'
6698 6700 -6699 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6701'
c Var 'aux1663' direct represents '0' with '6701'
c Var 'aux1663' order represents '1' with '6702'
-6701 6702 0
c Var 'aux1663' direct represents '1' with '6703'
6701 -6702 6703 0
-6703 6702 0
-6703 -6701 0
c Var 'aux1663' direct represents '2' with '-6702'
6701 6703 -6702 0
c Encoding variable: aux1664 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1663))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6704'
c Var 'aux1664' direct represents '0' with '6704'
c Var 'aux1664' order represents '1' with '6705'
-6704 6705 0
c Var 'aux1664' direct represents '1' with '6706'
6704 -6705 6706 0
-6706 6705 0
-6706 -6704 0
c Var 'aux1664' order represents '2' with '6707'
-6705 6707 0
c Var 'aux1664' direct represents '2' with '6708'
6705 -6707 6708 0
-6708 6707 0
-6708 -6705 0
c Var 'aux1664' direct represents '3' with '-6707'
6704 6706 6708 -6707 0
c Encoding variable: aux1665 with domain: int(0..4) (representing constraint (aux1660 + aux1662))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6709'
c Var 'aux1665' direct represents '0' with '6709'
c Var 'aux1665' order represents '1' with '6710'
-6709 6710 0
c Var 'aux1665' direct represents '1' with '6711'
6709 -6710 6711 0
-6711 6710 0
-6711 -6709 0
c Var 'aux1665' order represents '2' with '6712'
-6710 6712 0
c Var 'aux1665' direct represents '2' with '6713'
6710 -6712 6713 0
-6713 6712 0
-6713 -6710 0
c Var 'aux1665' order represents '3' with '6714'
-6712 6714 0
c Var 'aux1665' direct represents '3' with '6715'
6712 -6714 6715 0
-6715 6714 0
-6715 -6712 0
c Var 'aux1665' direct represents '4' with '-6714'
6709 6711 6713 6715 -6714 0
c Encoding variable: aux1666 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6716'
c Var 'aux1666' direct represents '0' with '6716'
c Var 'aux1666' order represents '1' with '6717'
-6716 6717 0
c Var 'aux1666' direct represents '1' with '6718'
6716 -6717 6718 0
-6718 6717 0
-6718 -6716 0
c Var 'aux1666' direct represents '2' with '-6717'
6716 6718 -6717 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6719'
c Var 'aux1667' direct represents '0' with '6719'
c Var 'aux1667' order represents '1' with '6720'
-6719 6720 0
c Var 'aux1667' direct represents '1' with '6721'
6719 -6720 6721 0
-6721 6720 0
-6721 -6719 0
c Var 'aux1667' direct represents '2' with '-6720'
6719 6721 -6720 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6722'
c Var 'aux1668' direct represents '0' with '6722'
c Var 'aux1668' order represents '1' with '6723'
-6722 6723 0
c Var 'aux1668' direct represents '1' with '6724'
6722 -6723 6724 0
-6724 6723 0
-6724 -6722 0
c Var 'aux1668' direct represents '2' with '-6723'
6722 6724 -6723 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6725'
c Var 'aux1669' direct represents '0' with '6725'
c Var 'aux1669' order represents '1' with '6726'
-6725 6726 0
c Var 'aux1669' direct represents '1' with '6727'
6725 -6726 6727 0
-6727 6726 0
-6727 -6725 0
c Var 'aux1669' direct represents '2' with '-6726'
6725 6727 -6726 0
c Encoding variable: aux1670 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1669))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6728'
c Var 'aux1670' direct represents '0' with '6728'
c Var 'aux1670' order represents '1' with '6729'
-6728 6729 0
c Var 'aux1670' direct represents '1' with '6730'
6728 -6729 6730 0
-6730 6729 0
-6730 -6728 0
c Var 'aux1670' order represents '2' with '6731'
-6729 6731 0
c Var 'aux1670' direct represents '2' with '6732'
6729 -6731 6732 0
-6732 6731 0
-6732 -6729 0
c Var 'aux1670' direct represents '3' with '-6731'
6728 6730 6732 -6731 0
c Encoding variable: aux1671 with domain: int(0..4) (representing constraint (aux1666 + aux1668))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6733'
c Var 'aux1671' direct represents '0' with '6733'
c Var 'aux1671' order represents '1' with '6734'
-6733 6734 0
c Var 'aux1671' direct represents '1' with '6735'
6733 -6734 6735 0
-6735 6734 0
-6735 -6733 0
c Var 'aux1671' order represents '2' with '6736'
-6734 6736 0
c Var 'aux1671' direct represents '2' with '6737'
6734 -6736 6737 0
-6737 6736 0
-6737 -6734 0
c Var 'aux1671' order represents '3' with '6738'
-6736 6738 0
c Var 'aux1671' direct represents '3' with '6739'
6736 -6738 6739 0
-6739 6738 0
-6739 -6736 0
c Var 'aux1671' direct represents '4' with '-6738'
6733 6735 6737 6739 -6738 0
c Encoding variable: aux1672 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6740'
c Var 'aux1672' direct represents '0' with '6740'
c Var 'aux1672' order represents '1' with '6741'
-6740 6741 0
c Var 'aux1672' direct represents '1' with '6742'
6740 -6741 6742 0
-6742 6741 0
-6742 -6740 0
c Var 'aux1672' direct represents '2' with '-6741'
6740 6742 -6741 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6743'
c Var 'aux1673' direct represents '0' with '6743'
c Var 'aux1673' order represents '1' with '6744'
-6743 6744 0
c Var 'aux1673' direct represents '1' with '6745'
6743 -6744 6745 0
-6745 6744 0
-6745 -6743 0
c Var 'aux1673' direct represents '2' with '-6744'
6743 6745 -6744 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6746'
c Var 'aux1674' direct represents '0' with '6746'
c Var 'aux1674' order represents '1' with '6747'
-6746 6747 0
c Var 'aux1674' direct represents '1' with '6748'
6746 -6747 6748 0
-6748 6747 0
-6748 -6746 0
c Var 'aux1674' direct represents '2' with '-6747'
6746 6748 -6747 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6749'
c Var 'aux1675' direct represents '0' with '6749'
c Var 'aux1675' order represents '1' with '6750'
-6749 6750 0
c Var 'aux1675' direct represents '1' with '6751'
6749 -6750 6751 0
-6751 6750 0
-6751 -6749 0
c Var 'aux1675' direct represents '2' with '-6750'
6749 6751 -6750 0
c Encoding variable: aux1676 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1675))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6752'
c Var 'aux1676' direct represents '0' with '6752'
c Var 'aux1676' order represents '1' with '6753'
-6752 6753 0
c Var 'aux1676' direct represents '1' with '6754'
6752 -6753 6754 0
-6754 6753 0
-6754 -6752 0
c Var 'aux1676' order represents '2' with '6755'
-6753 6755 0
c Var 'aux1676' direct represents '2' with '6756'
6753 -6755 6756 0
-6756 6755 0
-6756 -6753 0
c Var 'aux1676' direct represents '3' with '-6755'
6752 6754 6756 -6755 0
c Encoding variable: aux1677 with domain: int(0..4) (representing constraint (aux1672 + aux1674))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6757'
c Var 'aux1677' direct represents '0' with '6757'
c Var 'aux1677' order represents '1' with '6758'
-6757 6758 0
c Var 'aux1677' direct represents '1' with '6759'
6757 -6758 6759 0
-6759 6758 0
-6759 -6757 0
c Var 'aux1677' order represents '2' with '6760'
-6758 6760 0
c Var 'aux1677' direct represents '2' with '6761'
6758 -6760 6761 0
-6761 6760 0
-6761 -6758 0
c Var 'aux1677' order represents '3' with '6762'
-6760 6762 0
c Var 'aux1677' direct represents '3' with '6763'
6760 -6762 6763 0
-6763 6762 0
-6763 -6760 0
c Var 'aux1677' direct represents '4' with '-6762'
6757 6759 6761 6763 -6762 0
c Encoding variable: aux1678 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6764'
c Var 'aux1678' direct represents '0' with '6764'
c Var 'aux1678' order represents '1' with '6765'
-6764 6765 0
c Var 'aux1678' direct represents '1' with '6766'
6764 -6765 6766 0
-6766 6765 0
-6766 -6764 0
c Var 'aux1678' direct represents '2' with '-6765'
6764 6766 -6765 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6767'
c Var 'aux1679' direct represents '0' with '6767'
c Var 'aux1679' order represents '1' with '6768'
-6767 6768 0
c Var 'aux1679' direct represents '1' with '6769'
6767 -6768 6769 0
-6769 6768 0
-6769 -6767 0
c Var 'aux1679' direct represents '2' with '-6768'
6767 6769 -6768 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6770'
c Var 'aux1680' direct represents '0' with '6770'
c Var 'aux1680' order represents '1' with '6771'
-6770 6771 0
c Var 'aux1680' direct represents '1' with '6772'
6770 -6771 6772 0
-6772 6771 0
-6772 -6770 0
c Var 'aux1680' direct represents '2' with '-6771'
6770 6772 -6771 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6773'
c Var 'aux1681' direct represents '0' with '6773'
c Var 'aux1681' order represents '1' with '6774'
-6773 6774 0
c Var 'aux1681' direct represents '1' with '6775'
6773 -6774 6775 0
-6775 6774 0
-6775 -6773 0
c Var 'aux1681' direct represents '2' with '-6774'
6773 6775 -6774 0
c Encoding variable: aux1682 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1681))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '6776'
c Var 'aux1682' direct represents '0' with '6776'
c Var 'aux1682' order represents '1' with '6777'
-6776 6777 0
c Var 'aux1682' direct represents '1' with '6778'
6776 -6777 6778 0
-6778 6777 0
-6778 -6776 0
c Var 'aux1682' order represents '2' with '6779'
-6777 6779 0
c Var 'aux1682' direct represents '2' with '6780'
6777 -6779 6780 0
-6780 6779 0
-6780 -6777 0
c Var 'aux1682' direct represents '3' with '-6779'
6776 6778 6780 -6779 0
c Encoding variable: aux1683 with domain: int(0..4) (representing constraint (aux1678 + aux1680))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '6781'
c Var 'aux1683' direct represents '0' with '6781'
c Var 'aux1683' order represents '1' with '6782'
-6781 6782 0
c Var 'aux1683' direct represents '1' with '6783'
6781 -6782 6783 0
-6783 6782 0
-6783 -6781 0
c Var 'aux1683' order represents '2' with '6784'
-6782 6784 0
c Var 'aux1683' direct represents '2' with '6785'
6782 -6784 6785 0
-6785 6784 0
-6785 -6782 0
c Var 'aux1683' order represents '3' with '6786'
-6784 6786 0
c Var 'aux1683' direct represents '3' with '6787'
6784 -6786 6787 0
-6787 6786 0
-6787 -6784 0
c Var 'aux1683' direct represents '4' with '-6786'
6781 6783 6785 6787 -6786 0
c Encoding variable: aux1684 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '6788'
c Var 'aux1684' direct represents '0' with '6788'
c Var 'aux1684' order represents '1' with '6789'
-6788 6789 0
c Var 'aux1684' direct represents '1' with '6790'
6788 -6789 6790 0
-6790 6789 0
-6790 -6788 0
c Var 'aux1684' direct represents '2' with '-6789'
6788 6790 -6789 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '6791'
c Var 'aux1685' direct represents '0' with '6791'
c Var 'aux1685' order represents '1' with '6792'
-6791 6792 0
c Var 'aux1685' direct represents '1' with '6793'
6791 -6792 6793 0
-6793 6792 0
-6793 -6791 0
c Var 'aux1685' direct represents '2' with '-6792'
6791 6793 -6792 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '6794'
c Var 'aux1686' direct represents '0' with '6794'
c Var 'aux1686' order represents '1' with '6795'
-6794 6795 0
c Var 'aux1686' direct represents '1' with '6796'
6794 -6795 6796 0
-6796 6795 0
-6796 -6794 0
c Var 'aux1686' direct represents '2' with '-6795'
6794 6796 -6795 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '6797'
c Var 'aux1687' direct represents '0' with '6797'
c Var 'aux1687' order represents '1' with '6798'
-6797 6798 0
c Var 'aux1687' direct represents '1' with '6799'
6797 -6798 6799 0
-6799 6798 0
-6799 -6797 0
c Var 'aux1687' direct represents '2' with '-6798'
6797 6799 -6798 0
c Encoding variable: aux1688 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1687))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '6800'
c Var 'aux1688' direct represents '0' with '6800'
c Var 'aux1688' order represents '1' with '6801'
-6800 6801 0
c Var 'aux1688' direct represents '1' with '6802'
6800 -6801 6802 0
-6802 6801 0
-6802 -6800 0
c Var 'aux1688' order represents '2' with '6803'
-6801 6803 0
c Var 'aux1688' direct represents '2' with '6804'
6801 -6803 6804 0
-6804 6803 0
-6804 -6801 0
c Var 'aux1688' direct represents '3' with '-6803'
6800 6802 6804 -6803 0
c Encoding variable: aux1689 with domain: int(0..4) (representing constraint (aux1684 + aux1686))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '6805'
c Var 'aux1689' direct represents '0' with '6805'
c Var 'aux1689' order represents '1' with '6806'
-6805 6806 0
c Var 'aux1689' direct represents '1' with '6807'
6805 -6806 6807 0
-6807 6806 0
-6807 -6805 0
c Var 'aux1689' order represents '2' with '6808'
-6806 6808 0
c Var 'aux1689' direct represents '2' with '6809'
6806 -6808 6809 0
-6809 6808 0
-6809 -6806 0
c Var 'aux1689' order represents '3' with '6810'
-6808 6810 0
c Var 'aux1689' direct represents '3' with '6811'
6808 -6810 6811 0
-6811 6810 0
-6811 -6808 0
c Var 'aux1689' direct represents '4' with '-6810'
6805 6807 6809 6811 -6810 0
c Encoding variable: aux1690 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '6812'
c Var 'aux1690' direct represents '0' with '6812'
c Var 'aux1690' order represents '1' with '6813'
-6812 6813 0
c Var 'aux1690' direct represents '1' with '6814'
6812 -6813 6814 0
-6814 6813 0
-6814 -6812 0
c Var 'aux1690' direct represents '2' with '-6813'
6812 6814 -6813 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '6815'
c Var 'aux1691' direct represents '0' with '6815'
c Var 'aux1691' order represents '1' with '6816'
-6815 6816 0
c Var 'aux1691' direct represents '1' with '6817'
6815 -6816 6817 0
-6817 6816 0
-6817 -6815 0
c Var 'aux1691' direct represents '2' with '-6816'
6815 6817 -6816 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '6818'
c Var 'aux1692' direct represents '0' with '6818'
c Var 'aux1692' order represents '1' with '6819'
-6818 6819 0
c Var 'aux1692' direct represents '1' with '6820'
6818 -6819 6820 0
-6820 6819 0
-6820 -6818 0
c Var 'aux1692' direct represents '2' with '-6819'
6818 6820 -6819 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '6821'
c Var 'aux1693' direct represents '0' with '6821'
c Var 'aux1693' order represents '1' with '6822'
-6821 6822 0
c Var 'aux1693' direct represents '1' with '6823'
6821 -6822 6823 0
-6823 6822 0
-6823 -6821 0
c Var 'aux1693' direct represents '2' with '-6822'
6821 6823 -6822 0
c Encoding variable: aux1694 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1693))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '6824'
c Var 'aux1694' direct represents '0' with '6824'
c Var 'aux1694' order represents '1' with '6825'
-6824 6825 0
c Var 'aux1694' direct represents '1' with '6826'
6824 -6825 6826 0
-6826 6825 0
-6826 -6824 0
c Var 'aux1694' order represents '2' with '6827'
-6825 6827 0
c Var 'aux1694' direct represents '2' with '6828'
6825 -6827 6828 0
-6828 6827 0
-6828 -6825 0
c Var 'aux1694' direct represents '3' with '-6827'
6824 6826 6828 -6827 0
c Encoding variable: aux1695 with domain: int(0..4) (representing constraint (aux1690 + aux1692))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '6829'
c Var 'aux1695' direct represents '0' with '6829'
c Var 'aux1695' order represents '1' with '6830'
-6829 6830 0
c Var 'aux1695' direct represents '1' with '6831'
6829 -6830 6831 0
-6831 6830 0
-6831 -6829 0
c Var 'aux1695' order represents '2' with '6832'
-6830 6832 0
c Var 'aux1695' direct represents '2' with '6833'
6830 -6832 6833 0
-6833 6832 0
-6833 -6830 0
c Var 'aux1695' order represents '3' with '6834'
-6832 6834 0
c Var 'aux1695' direct represents '3' with '6835'
6832 -6834 6835 0
-6835 6834 0
-6835 -6832 0
c Var 'aux1695' direct represents '4' with '-6834'
6829 6831 6833 6835 -6834 0
c Encoding variable: aux1696 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '6836'
c Var 'aux1696' direct represents '0' with '6836'
c Var 'aux1696' order represents '1' with '6837'
-6836 6837 0
c Var 'aux1696' direct represents '1' with '6838'
6836 -6837 6838 0
-6838 6837 0
-6838 -6836 0
c Var 'aux1696' direct represents '2' with '-6837'
6836 6838 -6837 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '6839'
c Var 'aux1697' direct represents '0' with '6839'
c Var 'aux1697' order represents '1' with '6840'
-6839 6840 0
c Var 'aux1697' direct represents '1' with '6841'
6839 -6840 6841 0
-6841 6840 0
-6841 -6839 0
c Var 'aux1697' direct represents '2' with '-6840'
6839 6841 -6840 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '6842'
c Var 'aux1698' direct represents '0' with '6842'
c Var 'aux1698' order represents '1' with '6843'
-6842 6843 0
c Var 'aux1698' direct represents '1' with '6844'
6842 -6843 6844 0
-6844 6843 0
-6844 -6842 0
c Var 'aux1698' direct represents '2' with '-6843'
6842 6844 -6843 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '6845'
c Var 'aux1699' direct represents '0' with '6845'
c Var 'aux1699' order represents '1' with '6846'
-6845 6846 0
c Var 'aux1699' direct represents '1' with '6847'
6845 -6846 6847 0
-6847 6846 0
-6847 -6845 0
c Var 'aux1699' direct represents '2' with '-6846'
6845 6847 -6846 0
c Encoding variable: aux1700 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1699))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '6848'
c Var 'aux1700' direct represents '0' with '6848'
c Var 'aux1700' order represents '1' with '6849'
-6848 6849 0
c Var 'aux1700' direct represents '1' with '6850'
6848 -6849 6850 0
-6850 6849 0
-6850 -6848 0
c Var 'aux1700' order represents '2' with '6851'
-6849 6851 0
c Var 'aux1700' direct represents '2' with '6852'
6849 -6851 6852 0
-6852 6851 0
-6852 -6849 0
c Var 'aux1700' direct represents '3' with '-6851'
6848 6850 6852 -6851 0
c Encoding variable: aux1701 with domain: int(0..4) (representing constraint (aux1696 + aux1698))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '6853'
c Var 'aux1701' direct represents '0' with '6853'
c Var 'aux1701' order represents '1' with '6854'
-6853 6854 0
c Var 'aux1701' direct represents '1' with '6855'
6853 -6854 6855 0
-6855 6854 0
-6855 -6853 0
c Var 'aux1701' order represents '2' with '6856'
-6854 6856 0
c Var 'aux1701' direct represents '2' with '6857'
6854 -6856 6857 0
-6857 6856 0
-6857 -6854 0
c Var 'aux1701' order represents '3' with '6858'
-6856 6858 0
c Var 'aux1701' direct represents '3' with '6859'
6856 -6858 6859 0
-6859 6858 0
-6859 -6856 0
c Var 'aux1701' direct represents '4' with '-6858'
6853 6855 6857 6859 -6858 0
c Encoding variable: aux1702 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '6860'
c Var 'aux1702' direct represents '0' with '6860'
c Var 'aux1702' order represents '1' with '6861'
-6860 6861 0
c Var 'aux1702' direct represents '1' with '6862'
6860 -6861 6862 0
-6862 6861 0
-6862 -6860 0
c Var 'aux1702' direct represents '2' with '-6861'
6860 6862 -6861 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '6863'
c Var 'aux1703' direct represents '0' with '6863'
c Var 'aux1703' order represents '1' with '6864'
-6863 6864 0
c Var 'aux1703' direct represents '1' with '6865'
6863 -6864 6865 0
-6865 6864 0
-6865 -6863 0
c Var 'aux1703' direct represents '2' with '-6864'
6863 6865 -6864 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '6866'
c Var 'aux1704' direct represents '0' with '6866'
c Var 'aux1704' order represents '1' with '6867'
-6866 6867 0
c Var 'aux1704' direct represents '1' with '6868'
6866 -6867 6868 0
-6868 6867 0
-6868 -6866 0
c Var 'aux1704' direct represents '2' with '-6867'
6866 6868 -6867 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '6869'
c Var 'aux1705' direct represents '0' with '6869'
c Var 'aux1705' order represents '1' with '6870'
-6869 6870 0
c Var 'aux1705' direct represents '1' with '6871'
6869 -6870 6871 0
-6871 6870 0
-6871 -6869 0
c Var 'aux1705' direct represents '2' with '-6870'
6869 6871 -6870 0
c Encoding variable: aux1706 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1705))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '6872'
c Var 'aux1706' direct represents '0' with '6872'
c Var 'aux1706' order represents '1' with '6873'
-6872 6873 0
c Var 'aux1706' direct represents '1' with '6874'
6872 -6873 6874 0
-6874 6873 0
-6874 -6872 0
c Var 'aux1706' order represents '2' with '6875'
-6873 6875 0
c Var 'aux1706' direct represents '2' with '6876'
6873 -6875 6876 0
-6876 6875 0
-6876 -6873 0
c Var 'aux1706' direct represents '3' with '-6875'
6872 6874 6876 -6875 0
c Encoding variable: aux1707 with domain: int(0..4) (representing constraint (aux1702 + aux1704))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '6877'
c Var 'aux1707' direct represents '0' with '6877'
c Var 'aux1707' order represents '1' with '6878'
-6877 6878 0
c Var 'aux1707' direct represents '1' with '6879'
6877 -6878 6879 0
-6879 6878 0
-6879 -6877 0
c Var 'aux1707' order represents '2' with '6880'
-6878 6880 0
c Var 'aux1707' direct represents '2' with '6881'
6878 -6880 6881 0
-6881 6880 0
-6881 -6878 0
c Var 'aux1707' order represents '3' with '6882'
-6880 6882 0
c Var 'aux1707' direct represents '3' with '6883'
6880 -6882 6883 0
-6883 6882 0
-6883 -6880 0
c Var 'aux1707' direct represents '4' with '-6882'
6877 6879 6881 6883 -6882 0
c Encoding variable: aux1708 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '6884'
c Var 'aux1708' direct represents '0' with '6884'
c Var 'aux1708' order represents '1' with '6885'
-6884 6885 0
c Var 'aux1708' direct represents '1' with '6886'
6884 -6885 6886 0
-6886 6885 0
-6886 -6884 0
c Var 'aux1708' direct represents '2' with '-6885'
6884 6886 -6885 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '6887'
c Var 'aux1709' direct represents '0' with '6887'
c Var 'aux1709' order represents '1' with '6888'
-6887 6888 0
c Var 'aux1709' direct represents '1' with '6889'
6887 -6888 6889 0
-6889 6888 0
-6889 -6887 0
c Var 'aux1709' direct represents '2' with '-6888'
6887 6889 -6888 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '6890'
c Var 'aux1710' direct represents '0' with '6890'
c Var 'aux1710' order represents '1' with '6891'
-6890 6891 0
c Var 'aux1710' direct represents '1' with '6892'
6890 -6891 6892 0
-6892 6891 0
-6892 -6890 0
c Var 'aux1710' direct represents '2' with '-6891'
6890 6892 -6891 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '6893'
c Var 'aux1711' direct represents '0' with '6893'
c Var 'aux1711' order represents '1' with '6894'
-6893 6894 0
c Var 'aux1711' direct represents '1' with '6895'
6893 -6894 6895 0
-6895 6894 0
-6895 -6893 0
c Var 'aux1711' direct represents '2' with '-6894'
6893 6895 -6894 0
c Encoding variable: aux1712 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1711))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '6896'
c Var 'aux1712' direct represents '0' with '6896'
c Var 'aux1712' order represents '1' with '6897'
-6896 6897 0
c Var 'aux1712' direct represents '1' with '6898'
6896 -6897 6898 0
-6898 6897 0
-6898 -6896 0
c Var 'aux1712' order represents '2' with '6899'
-6897 6899 0
c Var 'aux1712' direct represents '2' with '6900'
6897 -6899 6900 0
-6900 6899 0
-6900 -6897 0
c Var 'aux1712' direct represents '3' with '-6899'
6896 6898 6900 -6899 0
c Encoding variable: aux1713 with domain: int(0..4) (representing constraint (aux1708 + aux1710))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '6901'
c Var 'aux1713' direct represents '0' with '6901'
c Var 'aux1713' order represents '1' with '6902'
-6901 6902 0
c Var 'aux1713' direct represents '1' with '6903'
6901 -6902 6903 0
-6903 6902 0
-6903 -6901 0
c Var 'aux1713' order represents '2' with '6904'
-6902 6904 0
c Var 'aux1713' direct represents '2' with '6905'
6902 -6904 6905 0
-6905 6904 0
-6905 -6902 0
c Var 'aux1713' order represents '3' with '6906'
-6904 6906 0
c Var 'aux1713' direct represents '3' with '6907'
6904 -6906 6907 0
-6907 6906 0
-6907 -6904 0
c Var 'aux1713' direct represents '4' with '-6906'
6901 6903 6905 6907 -6906 0
c Encoding variable: aux1714 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '6908'
c Var 'aux1714' direct represents '0' with '6908'
c Var 'aux1714' order represents '1' with '6909'
-6908 6909 0
c Var 'aux1714' direct represents '1' with '6910'
6908 -6909 6910 0
-6910 6909 0
-6910 -6908 0
c Var 'aux1714' direct represents '2' with '-6909'
6908 6910 -6909 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '6911'
c Var 'aux1715' direct represents '0' with '6911'
c Var 'aux1715' order represents '1' with '6912'
-6911 6912 0
c Var 'aux1715' direct represents '1' with '6913'
6911 -6912 6913 0
-6913 6912 0
-6913 -6911 0
c Var 'aux1715' direct represents '2' with '-6912'
6911 6913 -6912 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '6914'
c Var 'aux1716' direct represents '0' with '6914'
c Var 'aux1716' order represents '1' with '6915'
-6914 6915 0
c Var 'aux1716' direct represents '1' with '6916'
6914 -6915 6916 0
-6916 6915 0
-6916 -6914 0
c Var 'aux1716' direct represents '2' with '-6915'
6914 6916 -6915 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '6917'
c Var 'aux1717' direct represents '0' with '6917'
c Var 'aux1717' order represents '1' with '6918'
-6917 6918 0
c Var 'aux1717' direct represents '1' with '6919'
6917 -6918 6919 0
-6919 6918 0
-6919 -6917 0
c Var 'aux1717' direct represents '2' with '-6918'
6917 6919 -6918 0
c Encoding variable: aux1718 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1717))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '6920'
c Var 'aux1718' direct represents '0' with '6920'
c Var 'aux1718' order represents '1' with '6921'
-6920 6921 0
c Var 'aux1718' direct represents '1' with '6922'
6920 -6921 6922 0
-6922 6921 0
-6922 -6920 0
c Var 'aux1718' order represents '2' with '6923'
-6921 6923 0
c Var 'aux1718' direct represents '2' with '6924'
6921 -6923 6924 0
-6924 6923 0
-6924 -6921 0
c Var 'aux1718' direct represents '3' with '-6923'
6920 6922 6924 -6923 0
c Encoding variable: aux1719 with domain: int(0..4) (representing constraint (aux1714 + aux1716))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '6925'
c Var 'aux1719' direct represents '0' with '6925'
c Var 'aux1719' order represents '1' with '6926'
-6925 6926 0
c Var 'aux1719' direct represents '1' with '6927'
6925 -6926 6927 0
-6927 6926 0
-6927 -6925 0
c Var 'aux1719' order represents '2' with '6928'
-6926 6928 0
c Var 'aux1719' direct represents '2' with '6929'
6926 -6928 6929 0
-6929 6928 0
-6929 -6926 0
c Var 'aux1719' order represents '3' with '6930'
-6928 6930 0
c Var 'aux1719' direct represents '3' with '6931'
6928 -6930 6931 0
-6931 6930 0
-6931 -6928 0
c Var 'aux1719' direct represents '4' with '-6930'
6925 6927 6929 6931 -6930 0
c Encoding variable: aux1720 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '6932'
c Var 'aux1720' direct represents '0' with '6932'
c Var 'aux1720' order represents '1' with '6933'
-6932 6933 0
c Var 'aux1720' direct represents '1' with '6934'
6932 -6933 6934 0
-6934 6933 0
-6934 -6932 0
c Var 'aux1720' direct represents '2' with '-6933'
6932 6934 -6933 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '6935'
c Var 'aux1721' direct represents '0' with '6935'
c Var 'aux1721' order represents '1' with '6936'
-6935 6936 0
c Var 'aux1721' direct represents '1' with '6937'
6935 -6936 6937 0
-6937 6936 0
-6937 -6935 0
c Var 'aux1721' direct represents '2' with '-6936'
6935 6937 -6936 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '6938'
c Var 'aux1722' direct represents '0' with '6938'
c Var 'aux1722' order represents '1' with '6939'
-6938 6939 0
c Var 'aux1722' direct represents '1' with '6940'
6938 -6939 6940 0
-6940 6939 0
-6940 -6938 0
c Var 'aux1722' direct represents '2' with '-6939'
6938 6940 -6939 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '6941'
c Var 'aux1723' direct represents '0' with '6941'
c Var 'aux1723' order represents '1' with '6942'
-6941 6942 0
c Var 'aux1723' direct represents '1' with '6943'
6941 -6942 6943 0
-6943 6942 0
-6943 -6941 0
c Var 'aux1723' direct represents '2' with '-6942'
6941 6943 -6942 0
c Encoding variable: aux1724 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1723))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '6944'
c Var 'aux1724' direct represents '0' with '6944'
c Var 'aux1724' order represents '1' with '6945'
-6944 6945 0
c Var 'aux1724' direct represents '1' with '6946'
6944 -6945 6946 0
-6946 6945 0
-6946 -6944 0
c Var 'aux1724' order represents '2' with '6947'
-6945 6947 0
c Var 'aux1724' direct represents '2' with '6948'
6945 -6947 6948 0
-6948 6947 0
-6948 -6945 0
c Var 'aux1724' direct represents '3' with '-6947'
6944 6946 6948 -6947 0
c Encoding variable: aux1725 with domain: int(0..4) (representing constraint (aux1720 + aux1722))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '6949'
c Var 'aux1725' direct represents '0' with '6949'
c Var 'aux1725' order represents '1' with '6950'
-6949 6950 0
c Var 'aux1725' direct represents '1' with '6951'
6949 -6950 6951 0
-6951 6950 0
-6951 -6949 0
c Var 'aux1725' order represents '2' with '6952'
-6950 6952 0
c Var 'aux1725' direct represents '2' with '6953'
6950 -6952 6953 0
-6953 6952 0
-6953 -6950 0
c Var 'aux1725' order represents '3' with '6954'
-6952 6954 0
c Var 'aux1725' direct represents '3' with '6955'
6952 -6954 6955 0
-6955 6954 0
-6955 -6952 0
c Var 'aux1725' direct represents '4' with '-6954'
6949 6951 6953 6955 -6954 0
c Encoding variable: aux1726 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '6956'
c Var 'aux1726' direct represents '0' with '6956'
c Var 'aux1726' order represents '1' with '6957'
-6956 6957 0
c Var 'aux1726' direct represents '1' with '6958'
6956 -6957 6958 0
-6958 6957 0
-6958 -6956 0
c Var 'aux1726' direct represents '2' with '-6957'
6956 6958 -6957 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '6959'
c Var 'aux1727' direct represents '0' with '6959'
c Var 'aux1727' order represents '1' with '6960'
-6959 6960 0
c Var 'aux1727' direct represents '1' with '6961'
6959 -6960 6961 0
-6961 6960 0
-6961 -6959 0
c Var 'aux1727' direct represents '2' with '-6960'
6959 6961 -6960 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '6962'
c Var 'aux1728' direct represents '0' with '6962'
c Var 'aux1728' order represents '1' with '6963'
-6962 6963 0
c Var 'aux1728' direct represents '1' with '6964'
6962 -6963 6964 0
-6964 6963 0
-6964 -6962 0
c Var 'aux1728' direct represents '2' with '-6963'
6962 6964 -6963 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '6965'
c Var 'aux1729' direct represents '0' with '6965'
c Var 'aux1729' order represents '1' with '6966'
-6965 6966 0
c Var 'aux1729' direct represents '1' with '6967'
6965 -6966 6967 0
-6967 6966 0
-6967 -6965 0
c Var 'aux1729' direct represents '2' with '-6966'
6965 6967 -6966 0
c Encoding variable: aux1730 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1729))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '6968'
c Var 'aux1730' direct represents '0' with '6968'
c Var 'aux1730' order represents '1' with '6969'
-6968 6969 0
c Var 'aux1730' direct represents '1' with '6970'
6968 -6969 6970 0
-6970 6969 0
-6970 -6968 0
c Var 'aux1730' order represents '2' with '6971'
-6969 6971 0
c Var 'aux1730' direct represents '2' with '6972'
6969 -6971 6972 0
-6972 6971 0
-6972 -6969 0
c Var 'aux1730' direct represents '3' with '-6971'
6968 6970 6972 -6971 0
c Encoding variable: aux1731 with domain: int(0..4) (representing constraint (aux1726 + aux1728))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '6973'
c Var 'aux1731' direct represents '0' with '6973'
c Var 'aux1731' order represents '1' with '6974'
-6973 6974 0
c Var 'aux1731' direct represents '1' with '6975'
6973 -6974 6975 0
-6975 6974 0
-6975 -6973 0
c Var 'aux1731' order represents '2' with '6976'
-6974 6976 0
c Var 'aux1731' direct represents '2' with '6977'
6974 -6976 6977 0
-6977 6976 0
-6977 -6974 0
c Var 'aux1731' order represents '3' with '6978'
-6976 6978 0
c Var 'aux1731' direct represents '3' with '6979'
6976 -6978 6979 0
-6979 6978 0
-6979 -6976 0
c Var 'aux1731' direct represents '4' with '-6978'
6973 6975 6977 6979 -6978 0
c Encoding variable: aux1732 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '6980'
c Var 'aux1732' direct represents '0' with '6980'
c Var 'aux1732' order represents '1' with '6981'
-6980 6981 0
c Var 'aux1732' direct represents '1' with '6982'
6980 -6981 6982 0
-6982 6981 0
-6982 -6980 0
c Var 'aux1732' direct represents '2' with '-6981'
6980 6982 -6981 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '6983'
c Var 'aux1733' direct represents '0' with '6983'
c Var 'aux1733' order represents '1' with '6984'
-6983 6984 0
c Var 'aux1733' direct represents '1' with '6985'
6983 -6984 6985 0
-6985 6984 0
-6985 -6983 0
c Var 'aux1733' direct represents '2' with '-6984'
6983 6985 -6984 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '6986'
c Var 'aux1734' direct represents '0' with '6986'
c Var 'aux1734' order represents '1' with '6987'
-6986 6987 0
c Var 'aux1734' direct represents '1' with '6988'
6986 -6987 6988 0
-6988 6987 0
-6988 -6986 0
c Var 'aux1734' direct represents '2' with '-6987'
6986 6988 -6987 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '6989'
c Var 'aux1735' direct represents '0' with '6989'
c Var 'aux1735' order represents '1' with '6990'
-6989 6990 0
c Var 'aux1735' direct represents '1' with '6991'
6989 -6990 6991 0
-6991 6990 0
-6991 -6989 0
c Var 'aux1735' direct represents '2' with '-6990'
6989 6991 -6990 0
c Encoding variable: aux1736 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1735))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '6992'
c Var 'aux1736' direct represents '0' with '6992'
c Var 'aux1736' order represents '1' with '6993'
-6992 6993 0
c Var 'aux1736' direct represents '1' with '6994'
6992 -6993 6994 0
-6994 6993 0
-6994 -6992 0
c Var 'aux1736' order represents '2' with '6995'
-6993 6995 0
c Var 'aux1736' direct represents '2' with '6996'
6993 -6995 6996 0
-6996 6995 0
-6996 -6993 0
c Var 'aux1736' direct represents '3' with '-6995'
6992 6994 6996 -6995 0
c Encoding variable: aux1737 with domain: int(0..4) (representing constraint (aux1732 + aux1734))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '6997'
c Var 'aux1737' direct represents '0' with '6997'
c Var 'aux1737' order represents '1' with '6998'
-6997 6998 0
c Var 'aux1737' direct represents '1' with '6999'
6997 -6998 6999 0
-6999 6998 0
-6999 -6997 0
c Var 'aux1737' order represents '2' with '7000'
-6998 7000 0
c Var 'aux1737' direct represents '2' with '7001'
6998 -7000 7001 0
-7001 7000 0
-7001 -6998 0
c Var 'aux1737' order represents '3' with '7002'
-7000 7002 0
c Var 'aux1737' direct represents '3' with '7003'
7000 -7002 7003 0
-7003 7002 0
-7003 -7000 0
c Var 'aux1737' direct represents '4' with '-7002'
6997 6999 7001 7003 -7002 0
c Encoding variable: aux1738 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7004'
c Var 'aux1738' direct represents '0' with '7004'
c Var 'aux1738' order represents '1' with '7005'
-7004 7005 0
c Var 'aux1738' direct represents '1' with '7006'
7004 -7005 7006 0
-7006 7005 0
-7006 -7004 0
c Var 'aux1738' direct represents '2' with '-7005'
7004 7006 -7005 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7007'
c Var 'aux1739' direct represents '0' with '7007'
c Var 'aux1739' order represents '1' with '7008'
-7007 7008 0
c Var 'aux1739' direct represents '1' with '7009'
7007 -7008 7009 0
-7009 7008 0
-7009 -7007 0
c Var 'aux1739' direct represents '2' with '-7008'
7007 7009 -7008 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7010'
c Var 'aux1740' direct represents '0' with '7010'
c Var 'aux1740' order represents '1' with '7011'
-7010 7011 0
c Var 'aux1740' direct represents '1' with '7012'
7010 -7011 7012 0
-7012 7011 0
-7012 -7010 0
c Var 'aux1740' direct represents '2' with '-7011'
7010 7012 -7011 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7013'
c Var 'aux1741' direct represents '0' with '7013'
c Var 'aux1741' order represents '1' with '7014'
-7013 7014 0
c Var 'aux1741' direct represents '1' with '7015'
7013 -7014 7015 0
-7015 7014 0
-7015 -7013 0
c Var 'aux1741' direct represents '2' with '-7014'
7013 7015 -7014 0
c Encoding variable: aux1742 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1741))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7016'
c Var 'aux1742' direct represents '0' with '7016'
c Var 'aux1742' order represents '1' with '7017'
-7016 7017 0
c Var 'aux1742' direct represents '1' with '7018'
7016 -7017 7018 0
-7018 7017 0
-7018 -7016 0
c Var 'aux1742' order represents '2' with '7019'
-7017 7019 0
c Var 'aux1742' direct represents '2' with '7020'
7017 -7019 7020 0
-7020 7019 0
-7020 -7017 0
c Var 'aux1742' direct represents '3' with '-7019'
7016 7018 7020 -7019 0
c Encoding variable: aux1743 with domain: int(0..4) (representing constraint (aux1738 + aux1740))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7021'
c Var 'aux1743' direct represents '0' with '7021'
c Var 'aux1743' order represents '1' with '7022'
-7021 7022 0
c Var 'aux1743' direct represents '1' with '7023'
7021 -7022 7023 0
-7023 7022 0
-7023 -7021 0
c Var 'aux1743' order represents '2' with '7024'
-7022 7024 0
c Var 'aux1743' direct represents '2' with '7025'
7022 -7024 7025 0
-7025 7024 0
-7025 -7022 0
c Var 'aux1743' order represents '3' with '7026'
-7024 7026 0
c Var 'aux1743' direct represents '3' with '7027'
7024 -7026 7027 0
-7027 7026 0
-7027 -7024 0
c Var 'aux1743' direct represents '4' with '-7026'
7021 7023 7025 7027 -7026 0
c Encoding variable: aux1744 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7028'
c Var 'aux1744' direct represents '0' with '7028'
c Var 'aux1744' order represents '1' with '7029'
-7028 7029 0
c Var 'aux1744' direct represents '1' with '7030'
7028 -7029 7030 0
-7030 7029 0
-7030 -7028 0
c Var 'aux1744' direct represents '2' with '-7029'
7028 7030 -7029 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7031'
c Var 'aux1745' direct represents '0' with '7031'
c Var 'aux1745' order represents '1' with '7032'
-7031 7032 0
c Var 'aux1745' direct represents '1' with '7033'
7031 -7032 7033 0
-7033 7032 0
-7033 -7031 0
c Var 'aux1745' direct represents '2' with '-7032'
7031 7033 -7032 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7034'
c Var 'aux1746' direct represents '0' with '7034'
c Var 'aux1746' order represents '1' with '7035'
-7034 7035 0
c Var 'aux1746' direct represents '1' with '7036'
7034 -7035 7036 0
-7036 7035 0
-7036 -7034 0
c Var 'aux1746' direct represents '2' with '-7035'
7034 7036 -7035 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7037'
c Var 'aux1747' direct represents '0' with '7037'
c Var 'aux1747' order represents '1' with '7038'
-7037 7038 0
c Var 'aux1747' direct represents '1' with '7039'
7037 -7038 7039 0
-7039 7038 0
-7039 -7037 0
c Var 'aux1747' direct represents '2' with '-7038'
7037 7039 -7038 0
c Encoding variable: aux1748 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1747))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7040'
c Var 'aux1748' direct represents '0' with '7040'
c Var 'aux1748' order represents '1' with '7041'
-7040 7041 0
c Var 'aux1748' direct represents '1' with '7042'
7040 -7041 7042 0
-7042 7041 0
-7042 -7040 0
c Var 'aux1748' order represents '2' with '7043'
-7041 7043 0
c Var 'aux1748' direct represents '2' with '7044'
7041 -7043 7044 0
-7044 7043 0
-7044 -7041 0
c Var 'aux1748' direct represents '3' with '-7043'
7040 7042 7044 -7043 0
c Encoding variable: aux1749 with domain: int(0..4) (representing constraint (aux1744 + aux1746))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7045'
c Var 'aux1749' direct represents '0' with '7045'
c Var 'aux1749' order represents '1' with '7046'
-7045 7046 0
c Var 'aux1749' direct represents '1' with '7047'
7045 -7046 7047 0
-7047 7046 0
-7047 -7045 0
c Var 'aux1749' order represents '2' with '7048'
-7046 7048 0
c Var 'aux1749' direct represents '2' with '7049'
7046 -7048 7049 0
-7049 7048 0
-7049 -7046 0
c Var 'aux1749' order represents '3' with '7050'
-7048 7050 0
c Var 'aux1749' direct represents '3' with '7051'
7048 -7050 7051 0
-7051 7050 0
-7051 -7048 0
c Var 'aux1749' direct represents '4' with '-7050'
7045 7047 7049 7051 -7050 0
c Encoding variable: aux1750 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7052'
c Var 'aux1750' direct represents '0' with '7052'
c Var 'aux1750' order represents '1' with '7053'
-7052 7053 0
c Var 'aux1750' direct represents '1' with '7054'
7052 -7053 7054 0
-7054 7053 0
-7054 -7052 0
c Var 'aux1750' direct represents '2' with '-7053'
7052 7054 -7053 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7055'
c Var 'aux1751' direct represents '0' with '7055'
c Var 'aux1751' order represents '1' with '7056'
-7055 7056 0
c Var 'aux1751' direct represents '1' with '7057'
7055 -7056 7057 0
-7057 7056 0
-7057 -7055 0
c Var 'aux1751' direct represents '2' with '-7056'
7055 7057 -7056 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7058'
c Var 'aux1752' direct represents '0' with '7058'
c Var 'aux1752' order represents '1' with '7059'
-7058 7059 0
c Var 'aux1752' direct represents '1' with '7060'
7058 -7059 7060 0
-7060 7059 0
-7060 -7058 0
c Var 'aux1752' direct represents '2' with '-7059'
7058 7060 -7059 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7061'
c Var 'aux1753' direct represents '0' with '7061'
c Var 'aux1753' order represents '1' with '7062'
-7061 7062 0
c Var 'aux1753' direct represents '1' with '7063'
7061 -7062 7063 0
-7063 7062 0
-7063 -7061 0
c Var 'aux1753' direct represents '2' with '-7062'
7061 7063 -7062 0
c Encoding variable: aux1754 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1753))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7064'
c Var 'aux1754' direct represents '0' with '7064'
c Var 'aux1754' order represents '1' with '7065'
-7064 7065 0
c Var 'aux1754' direct represents '1' with '7066'
7064 -7065 7066 0
-7066 7065 0
-7066 -7064 0
c Var 'aux1754' order represents '2' with '7067'
-7065 7067 0
c Var 'aux1754' direct represents '2' with '7068'
7065 -7067 7068 0
-7068 7067 0
-7068 -7065 0
c Var 'aux1754' direct represents '3' with '-7067'
7064 7066 7068 -7067 0
c Encoding variable: aux1755 with domain: int(0..4) (representing constraint (aux1750 + aux1752))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7069'
c Var 'aux1755' direct represents '0' with '7069'
c Var 'aux1755' order represents '1' with '7070'
-7069 7070 0
c Var 'aux1755' direct represents '1' with '7071'
7069 -7070 7071 0
-7071 7070 0
-7071 -7069 0
c Var 'aux1755' order represents '2' with '7072'
-7070 7072 0
c Var 'aux1755' direct represents '2' with '7073'
7070 -7072 7073 0
-7073 7072 0
-7073 -7070 0
c Var 'aux1755' order represents '3' with '7074'
-7072 7074 0
c Var 'aux1755' direct represents '3' with '7075'
7072 -7074 7075 0
-7075 7074 0
-7075 -7072 0
c Var 'aux1755' direct represents '4' with '-7074'
7069 7071 7073 7075 -7074 0
c Encoding variable: aux1756 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7076'
c Var 'aux1756' direct represents '0' with '7076'
c Var 'aux1756' order represents '1' with '7077'
-7076 7077 0
c Var 'aux1756' direct represents '1' with '7078'
7076 -7077 7078 0
-7078 7077 0
-7078 -7076 0
c Var 'aux1756' direct represents '2' with '-7077'
7076 7078 -7077 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7079'
c Var 'aux1757' direct represents '0' with '7079'
c Var 'aux1757' order represents '1' with '7080'
-7079 7080 0
c Var 'aux1757' direct represents '1' with '7081'
7079 -7080 7081 0
-7081 7080 0
-7081 -7079 0
c Var 'aux1757' direct represents '2' with '-7080'
7079 7081 -7080 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7082'
c Var 'aux1758' direct represents '0' with '7082'
c Var 'aux1758' order represents '1' with '7083'
-7082 7083 0
c Var 'aux1758' direct represents '1' with '7084'
7082 -7083 7084 0
-7084 7083 0
-7084 -7082 0
c Var 'aux1758' direct represents '2' with '-7083'
7082 7084 -7083 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7085'
c Var 'aux1759' direct represents '0' with '7085'
c Var 'aux1759' order represents '1' with '7086'
-7085 7086 0
c Var 'aux1759' direct represents '1' with '7087'
7085 -7086 7087 0
-7087 7086 0
-7087 -7085 0
c Var 'aux1759' direct represents '2' with '-7086'
7085 7087 -7086 0
c Encoding variable: aux1760 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1759))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7088'
c Var 'aux1760' direct represents '0' with '7088'
c Var 'aux1760' order represents '1' with '7089'
-7088 7089 0
c Var 'aux1760' direct represents '1' with '7090'
7088 -7089 7090 0
-7090 7089 0
-7090 -7088 0
c Var 'aux1760' order represents '2' with '7091'
-7089 7091 0
c Var 'aux1760' direct represents '2' with '7092'
7089 -7091 7092 0
-7092 7091 0
-7092 -7089 0
c Var 'aux1760' direct represents '3' with '-7091'
7088 7090 7092 -7091 0
c Encoding variable: aux1761 with domain: int(0..4) (representing constraint (aux1756 + aux1758))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7093'
c Var 'aux1761' direct represents '0' with '7093'
c Var 'aux1761' order represents '1' with '7094'
-7093 7094 0
c Var 'aux1761' direct represents '1' with '7095'
7093 -7094 7095 0
-7095 7094 0
-7095 -7093 0
c Var 'aux1761' order represents '2' with '7096'
-7094 7096 0
c Var 'aux1761' direct represents '2' with '7097'
7094 -7096 7097 0
-7097 7096 0
-7097 -7094 0
c Var 'aux1761' order represents '3' with '7098'
-7096 7098 0
c Var 'aux1761' direct represents '3' with '7099'
7096 -7098 7099 0
-7099 7098 0
-7099 -7096 0
c Var 'aux1761' direct represents '4' with '-7098'
7093 7095 7097 7099 -7098 0
c Encoding variable: aux1762 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7100'
c Var 'aux1762' direct represents '0' with '7100'
c Var 'aux1762' order represents '1' with '7101'
-7100 7101 0
c Var 'aux1762' direct represents '1' with '7102'
7100 -7101 7102 0
-7102 7101 0
-7102 -7100 0
c Var 'aux1762' direct represents '2' with '-7101'
7100 7102 -7101 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7103'
c Var 'aux1763' direct represents '0' with '7103'
c Var 'aux1763' order represents '1' with '7104'
-7103 7104 0
c Var 'aux1763' direct represents '1' with '7105'
7103 -7104 7105 0
-7105 7104 0
-7105 -7103 0
c Var 'aux1763' direct represents '2' with '-7104'
7103 7105 -7104 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7106'
c Var 'aux1764' direct represents '0' with '7106'
c Var 'aux1764' order represents '1' with '7107'
-7106 7107 0
c Var 'aux1764' direct represents '1' with '7108'
7106 -7107 7108 0
-7108 7107 0
-7108 -7106 0
c Var 'aux1764' direct represents '2' with '-7107'
7106 7108 -7107 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7109'
c Var 'aux1765' direct represents '0' with '7109'
c Var 'aux1765' order represents '1' with '7110'
-7109 7110 0
c Var 'aux1765' direct represents '1' with '7111'
7109 -7110 7111 0
-7111 7110 0
-7111 -7109 0
c Var 'aux1765' direct represents '2' with '-7110'
7109 7111 -7110 0
c Encoding variable: aux1766 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1765))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7112'
c Var 'aux1766' direct represents '0' with '7112'
c Var 'aux1766' order represents '1' with '7113'
-7112 7113 0
c Var 'aux1766' direct represents '1' with '7114'
7112 -7113 7114 0
-7114 7113 0
-7114 -7112 0
c Var 'aux1766' order represents '2' with '7115'
-7113 7115 0
c Var 'aux1766' direct represents '2' with '7116'
7113 -7115 7116 0
-7116 7115 0
-7116 -7113 0
c Var 'aux1766' direct represents '3' with '-7115'
7112 7114 7116 -7115 0
c Encoding variable: aux1767 with domain: int(0..4) (representing constraint (aux1762 + aux1764))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7117'
c Var 'aux1767' direct represents '0' with '7117'
c Var 'aux1767' order represents '1' with '7118'
-7117 7118 0
c Var 'aux1767' direct represents '1' with '7119'
7117 -7118 7119 0
-7119 7118 0
-7119 -7117 0
c Var 'aux1767' order represents '2' with '7120'
-7118 7120 0
c Var 'aux1767' direct represents '2' with '7121'
7118 -7120 7121 0
-7121 7120 0
-7121 -7118 0
c Var 'aux1767' order represents '3' with '7122'
-7120 7122 0
c Var 'aux1767' direct represents '3' with '7123'
7120 -7122 7123 0
-7123 7122 0
-7123 -7120 0
c Var 'aux1767' direct represents '4' with '-7122'
7117 7119 7121 7123 -7122 0
c Encoding variable: aux1768 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7124'
c Var 'aux1768' direct represents '0' with '7124'
c Var 'aux1768' order represents '1' with '7125'
-7124 7125 0
c Var 'aux1768' direct represents '1' with '7126'
7124 -7125 7126 0
-7126 7125 0
-7126 -7124 0
c Var 'aux1768' direct represents '2' with '-7125'
7124 7126 -7125 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7127'
c Var 'aux1769' direct represents '0' with '7127'
c Var 'aux1769' order represents '1' with '7128'
-7127 7128 0
c Var 'aux1769' direct represents '1' with '7129'
7127 -7128 7129 0
-7129 7128 0
-7129 -7127 0
c Var 'aux1769' direct represents '2' with '-7128'
7127 7129 -7128 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7130'
c Var 'aux1770' direct represents '0' with '7130'
c Var 'aux1770' order represents '1' with '7131'
-7130 7131 0
c Var 'aux1770' direct represents '1' with '7132'
7130 -7131 7132 0
-7132 7131 0
-7132 -7130 0
c Var 'aux1770' direct represents '2' with '-7131'
7130 7132 -7131 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7133'
c Var 'aux1771' direct represents '0' with '7133'
c Var 'aux1771' order represents '1' with '7134'
-7133 7134 0
c Var 'aux1771' direct represents '1' with '7135'
7133 -7134 7135 0
-7135 7134 0
-7135 -7133 0
c Var 'aux1771' direct represents '2' with '-7134'
7133 7135 -7134 0
c Encoding variable: aux1772 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1771))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7136'
c Var 'aux1772' direct represents '0' with '7136'
c Var 'aux1772' order represents '1' with '7137'
-7136 7137 0
c Var 'aux1772' direct represents '1' with '7138'
7136 -7137 7138 0
-7138 7137 0
-7138 -7136 0
c Var 'aux1772' order represents '2' with '7139'
-7137 7139 0
c Var 'aux1772' direct represents '2' with '7140'
7137 -7139 7140 0
-7140 7139 0
-7140 -7137 0
c Var 'aux1772' direct represents '3' with '-7139'
7136 7138 7140 -7139 0
c Encoding variable: aux1773 with domain: int(0..4) (representing constraint (aux1768 + aux1770))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7141'
c Var 'aux1773' direct represents '0' with '7141'
c Var 'aux1773' order represents '1' with '7142'
-7141 7142 0
c Var 'aux1773' direct represents '1' with '7143'
7141 -7142 7143 0
-7143 7142 0
-7143 -7141 0
c Var 'aux1773' order represents '2' with '7144'
-7142 7144 0
c Var 'aux1773' direct represents '2' with '7145'
7142 -7144 7145 0
-7145 7144 0
-7145 -7142 0
c Var 'aux1773' order represents '3' with '7146'
-7144 7146 0
c Var 'aux1773' direct represents '3' with '7147'
7144 -7146 7147 0
-7147 7146 0
-7147 -7144 0
c Var 'aux1773' direct represents '4' with '-7146'
7141 7143 7145 7147 -7146 0
c Encoding variable: aux1774 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7148'
c Var 'aux1774' direct represents '0' with '7148'
c Var 'aux1774' order represents '1' with '7149'
-7148 7149 0
c Var 'aux1774' direct represents '1' with '7150'
7148 -7149 7150 0
-7150 7149 0
-7150 -7148 0
c Var 'aux1774' direct represents '2' with '-7149'
7148 7150 -7149 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7151'
c Var 'aux1775' direct represents '0' with '7151'
c Var 'aux1775' order represents '1' with '7152'
-7151 7152 0
c Var 'aux1775' direct represents '1' with '7153'
7151 -7152 7153 0
-7153 7152 0
-7153 -7151 0
c Var 'aux1775' direct represents '2' with '-7152'
7151 7153 -7152 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7154'
c Var 'aux1776' direct represents '0' with '7154'
c Var 'aux1776' order represents '1' with '7155'
-7154 7155 0
c Var 'aux1776' direct represents '1' with '7156'
7154 -7155 7156 0
-7156 7155 0
-7156 -7154 0
c Var 'aux1776' direct represents '2' with '-7155'
7154 7156 -7155 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7157'
c Var 'aux1777' direct represents '0' with '7157'
c Var 'aux1777' order represents '1' with '7158'
-7157 7158 0
c Var 'aux1777' direct represents '1' with '7159'
7157 -7158 7159 0
-7159 7158 0
-7159 -7157 0
c Var 'aux1777' direct represents '2' with '-7158'
7157 7159 -7158 0
c Encoding variable: aux1778 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1777))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7160'
c Var 'aux1778' direct represents '0' with '7160'
c Var 'aux1778' order represents '1' with '7161'
-7160 7161 0
c Var 'aux1778' direct represents '1' with '7162'
7160 -7161 7162 0
-7162 7161 0
-7162 -7160 0
c Var 'aux1778' order represents '2' with '7163'
-7161 7163 0
c Var 'aux1778' direct represents '2' with '7164'
7161 -7163 7164 0
-7164 7163 0
-7164 -7161 0
c Var 'aux1778' direct represents '3' with '-7163'
7160 7162 7164 -7163 0
c Encoding variable: aux1779 with domain: int(0..4) (representing constraint (aux1774 + aux1776))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7165'
c Var 'aux1779' direct represents '0' with '7165'
c Var 'aux1779' order represents '1' with '7166'
-7165 7166 0
c Var 'aux1779' direct represents '1' with '7167'
7165 -7166 7167 0
-7167 7166 0
-7167 -7165 0
c Var 'aux1779' order represents '2' with '7168'
-7166 7168 0
c Var 'aux1779' direct represents '2' with '7169'
7166 -7168 7169 0
-7169 7168 0
-7169 -7166 0
c Var 'aux1779' order represents '3' with '7170'
-7168 7170 0
c Var 'aux1779' direct represents '3' with '7171'
7168 -7170 7171 0
-7171 7170 0
-7171 -7168 0
c Var 'aux1779' direct represents '4' with '-7170'
7165 7167 7169 7171 -7170 0
c Encoding variable: aux1780 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7172'
c Var 'aux1780' direct represents '0' with '7172'
c Var 'aux1780' order represents '1' with '7173'
-7172 7173 0
c Var 'aux1780' direct represents '1' with '7174'
7172 -7173 7174 0
-7174 7173 0
-7174 -7172 0
c Var 'aux1780' direct represents '2' with '-7173'
7172 7174 -7173 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7175'
c Var 'aux1781' direct represents '0' with '7175'
c Var 'aux1781' order represents '1' with '7176'
-7175 7176 0
c Var 'aux1781' direct represents '1' with '7177'
7175 -7176 7177 0
-7177 7176 0
-7177 -7175 0
c Var 'aux1781' direct represents '2' with '-7176'
7175 7177 -7176 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7178'
c Var 'aux1782' direct represents '0' with '7178'
c Var 'aux1782' order represents '1' with '7179'
-7178 7179 0
c Var 'aux1782' direct represents '1' with '7180'
7178 -7179 7180 0
-7180 7179 0
-7180 -7178 0
c Var 'aux1782' direct represents '2' with '-7179'
7178 7180 -7179 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7181'
c Var 'aux1783' direct represents '0' with '7181'
c Var 'aux1783' order represents '1' with '7182'
-7181 7182 0
c Var 'aux1783' direct represents '1' with '7183'
7181 -7182 7183 0
-7183 7182 0
-7183 -7181 0
c Var 'aux1783' direct represents '2' with '-7182'
7181 7183 -7182 0
c Encoding variable: aux1784 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1783))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7184'
c Var 'aux1784' direct represents '0' with '7184'
c Var 'aux1784' order represents '1' with '7185'
-7184 7185 0
c Var 'aux1784' direct represents '1' with '7186'
7184 -7185 7186 0
-7186 7185 0
-7186 -7184 0
c Var 'aux1784' order represents '2' with '7187'
-7185 7187 0
c Var 'aux1784' direct represents '2' with '7188'
7185 -7187 7188 0
-7188 7187 0
-7188 -7185 0
c Var 'aux1784' direct represents '3' with '-7187'
7184 7186 7188 -7187 0
c Encoding variable: aux1785 with domain: int(0..4) (representing constraint (aux1780 + aux1782))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7189'
c Var 'aux1785' direct represents '0' with '7189'
c Var 'aux1785' order represents '1' with '7190'
-7189 7190 0
c Var 'aux1785' direct represents '1' with '7191'
7189 -7190 7191 0
-7191 7190 0
-7191 -7189 0
c Var 'aux1785' order represents '2' with '7192'
-7190 7192 0
c Var 'aux1785' direct represents '2' with '7193'
7190 -7192 7193 0
-7193 7192 0
-7193 -7190 0
c Var 'aux1785' order represents '3' with '7194'
-7192 7194 0
c Var 'aux1785' direct represents '3' with '7195'
7192 -7194 7195 0
-7195 7194 0
-7195 -7192 0
c Var 'aux1785' direct represents '4' with '-7194'
7189 7191 7193 7195 -7194 0
c Encoding variable: aux1786 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7196'
c Var 'aux1786' direct represents '0' with '7196'
c Var 'aux1786' order represents '1' with '7197'
-7196 7197 0
c Var 'aux1786' direct represents '1' with '7198'
7196 -7197 7198 0
-7198 7197 0
-7198 -7196 0
c Var 'aux1786' direct represents '2' with '-7197'
7196 7198 -7197 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7199'
c Var 'aux1787' direct represents '0' with '7199'
c Var 'aux1787' order represents '1' with '7200'
-7199 7200 0
c Var 'aux1787' direct represents '1' with '7201'
7199 -7200 7201 0
-7201 7200 0
-7201 -7199 0
c Var 'aux1787' direct represents '2' with '-7200'
7199 7201 -7200 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7202'
c Var 'aux1788' direct represents '0' with '7202'
c Var 'aux1788' order represents '1' with '7203'
-7202 7203 0
c Var 'aux1788' direct represents '1' with '7204'
7202 -7203 7204 0
-7204 7203 0
-7204 -7202 0
c Var 'aux1788' direct represents '2' with '-7203'
7202 7204 -7203 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7205'
c Var 'aux1789' direct represents '0' with '7205'
c Var 'aux1789' order represents '1' with '7206'
-7205 7206 0
c Var 'aux1789' direct represents '1' with '7207'
7205 -7206 7207 0
-7207 7206 0
-7207 -7205 0
c Var 'aux1789' direct represents '2' with '-7206'
7205 7207 -7206 0
c Encoding variable: aux1790 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1789))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7208'
c Var 'aux1790' direct represents '0' with '7208'
c Var 'aux1790' order represents '1' with '7209'
-7208 7209 0
c Var 'aux1790' direct represents '1' with '7210'
7208 -7209 7210 0
-7210 7209 0
-7210 -7208 0
c Var 'aux1790' order represents '2' with '7211'
-7209 7211 0
c Var 'aux1790' direct represents '2' with '7212'
7209 -7211 7212 0
-7212 7211 0
-7212 -7209 0
c Var 'aux1790' direct represents '3' with '-7211'
7208 7210 7212 -7211 0
c Encoding variable: aux1791 with domain: int(0..4) (representing constraint (aux1786 + aux1788))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7213'
c Var 'aux1791' direct represents '0' with '7213'
c Var 'aux1791' order represents '1' with '7214'
-7213 7214 0
c Var 'aux1791' direct represents '1' with '7215'
7213 -7214 7215 0
-7215 7214 0
-7215 -7213 0
c Var 'aux1791' order represents '2' with '7216'
-7214 7216 0
c Var 'aux1791' direct represents '2' with '7217'
7214 -7216 7217 0
-7217 7216 0
-7217 -7214 0
c Var 'aux1791' order represents '3' with '7218'
-7216 7218 0
c Var 'aux1791' direct represents '3' with '7219'
7216 -7218 7219 0
-7219 7218 0
-7219 -7216 0
c Var 'aux1791' direct represents '4' with '-7218'
7213 7215 7217 7219 -7218 0
c Encoding variable: aux1792 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7220'
c Var 'aux1792' direct represents '0' with '7220'
c Var 'aux1792' order represents '1' with '7221'
-7220 7221 0
c Var 'aux1792' direct represents '1' with '7222'
7220 -7221 7222 0
-7222 7221 0
-7222 -7220 0
c Var 'aux1792' direct represents '2' with '-7221'
7220 7222 -7221 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7223'
c Var 'aux1793' direct represents '0' with '7223'
c Var 'aux1793' order represents '1' with '7224'
-7223 7224 0
c Var 'aux1793' direct represents '1' with '7225'
7223 -7224 7225 0
-7225 7224 0
-7225 -7223 0
c Var 'aux1793' direct represents '2' with '-7224'
7223 7225 -7224 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7226'
c Var 'aux1794' direct represents '0' with '7226'
c Var 'aux1794' order represents '1' with '7227'
-7226 7227 0
c Var 'aux1794' direct represents '1' with '7228'
7226 -7227 7228 0
-7228 7227 0
-7228 -7226 0
c Var 'aux1794' direct represents '2' with '-7227'
7226 7228 -7227 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7229'
c Var 'aux1795' direct represents '0' with '7229'
c Var 'aux1795' order represents '1' with '7230'
-7229 7230 0
c Var 'aux1795' direct represents '1' with '7231'
7229 -7230 7231 0
-7231 7230 0
-7231 -7229 0
c Var 'aux1795' direct represents '2' with '-7230'
7229 7231 -7230 0
c Encoding variable: aux1796 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1795))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7232'
c Var 'aux1796' direct represents '0' with '7232'
c Var 'aux1796' order represents '1' with '7233'
-7232 7233 0
c Var 'aux1796' direct represents '1' with '7234'
7232 -7233 7234 0
-7234 7233 0
-7234 -7232 0
c Var 'aux1796' order represents '2' with '7235'
-7233 7235 0
c Var 'aux1796' direct represents '2' with '7236'
7233 -7235 7236 0
-7236 7235 0
-7236 -7233 0
c Var 'aux1796' direct represents '3' with '-7235'
7232 7234 7236 -7235 0
c Encoding variable: aux1797 with domain: int(0..4) (representing constraint (aux1792 + aux1794))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7237'
c Var 'aux1797' direct represents '0' with '7237'
c Var 'aux1797' order represents '1' with '7238'
-7237 7238 0
c Var 'aux1797' direct represents '1' with '7239'
7237 -7238 7239 0
-7239 7238 0
-7239 -7237 0
c Var 'aux1797' order represents '2' with '7240'
-7238 7240 0
c Var 'aux1797' direct represents '2' with '7241'
7238 -7240 7241 0
-7241 7240 0
-7241 -7238 0
c Var 'aux1797' order represents '3' with '7242'
-7240 7242 0
c Var 'aux1797' direct represents '3' with '7243'
7240 -7242 7243 0
-7243 7242 0
-7243 -7240 0
c Var 'aux1797' direct represents '4' with '-7242'
7237 7239 7241 7243 -7242 0
c Encoding variable: aux1798 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7244'
c Var 'aux1798' direct represents '0' with '7244'
c Var 'aux1798' order represents '1' with '7245'
-7244 7245 0
c Var 'aux1798' direct represents '1' with '7246'
7244 -7245 7246 0
-7246 7245 0
-7246 -7244 0
c Var 'aux1798' direct represents '2' with '-7245'
7244 7246 -7245 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7247'
c Var 'aux1799' direct represents '0' with '7247'
c Var 'aux1799' order represents '1' with '7248'
-7247 7248 0
c Var 'aux1799' direct represents '1' with '7249'
7247 -7248 7249 0
-7249 7248 0
-7249 -7247 0
c Var 'aux1799' direct represents '2' with '-7248'
7247 7249 -7248 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7250'
c Var 'aux1800' direct represents '0' with '7250'
c Var 'aux1800' order represents '1' with '7251'
-7250 7251 0
c Var 'aux1800' direct represents '1' with '7252'
7250 -7251 7252 0
-7252 7251 0
-7252 -7250 0
c Var 'aux1800' direct represents '2' with '-7251'
7250 7252 -7251 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7253'
c Var 'aux1801' direct represents '0' with '7253'
c Var 'aux1801' order represents '1' with '7254'
-7253 7254 0
c Var 'aux1801' direct represents '1' with '7255'
7253 -7254 7255 0
-7255 7254 0
-7255 -7253 0
c Var 'aux1801' direct represents '2' with '-7254'
7253 7255 -7254 0
c Encoding variable: aux1802 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1801))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7256'
c Var 'aux1802' direct represents '0' with '7256'
c Var 'aux1802' order represents '1' with '7257'
-7256 7257 0
c Var 'aux1802' direct represents '1' with '7258'
7256 -7257 7258 0
-7258 7257 0
-7258 -7256 0
c Var 'aux1802' order represents '2' with '7259'
-7257 7259 0
c Var 'aux1802' direct represents '2' with '7260'
7257 -7259 7260 0
-7260 7259 0
-7260 -7257 0
c Var 'aux1802' direct represents '3' with '-7259'
7256 7258 7260 -7259 0
c Encoding variable: aux1803 with domain: int(0..4) (representing constraint (aux1798 + aux1800))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7261'
c Var 'aux1803' direct represents '0' with '7261'
c Var 'aux1803' order represents '1' with '7262'
-7261 7262 0
c Var 'aux1803' direct represents '1' with '7263'
7261 -7262 7263 0
-7263 7262 0
-7263 -7261 0
c Var 'aux1803' order represents '2' with '7264'
-7262 7264 0
c Var 'aux1803' direct represents '2' with '7265'
7262 -7264 7265 0
-7265 7264 0
-7265 -7262 0
c Var 'aux1803' order represents '3' with '7266'
-7264 7266 0
c Var 'aux1803' direct represents '3' with '7267'
7264 -7266 7267 0
-7267 7266 0
-7267 -7264 0
c Var 'aux1803' direct represents '4' with '-7266'
7261 7263 7265 7267 -7266 0
c Encoding variable: aux1804 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7268'
c Var 'aux1804' direct represents '0' with '7268'
c Var 'aux1804' order represents '1' with '7269'
-7268 7269 0
c Var 'aux1804' direct represents '1' with '7270'
7268 -7269 7270 0
-7270 7269 0
-7270 -7268 0
c Var 'aux1804' direct represents '2' with '-7269'
7268 7270 -7269 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7271'
c Var 'aux1805' direct represents '0' with '7271'
c Var 'aux1805' order represents '1' with '7272'
-7271 7272 0
c Var 'aux1805' direct represents '1' with '7273'
7271 -7272 7273 0
-7273 7272 0
-7273 -7271 0
c Var 'aux1805' direct represents '2' with '-7272'
7271 7273 -7272 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7274'
c Var 'aux1806' direct represents '0' with '7274'
c Var 'aux1806' order represents '1' with '7275'
-7274 7275 0
c Var 'aux1806' direct represents '1' with '7276'
7274 -7275 7276 0
-7276 7275 0
-7276 -7274 0
c Var 'aux1806' direct represents '2' with '-7275'
7274 7276 -7275 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7277'
c Var 'aux1807' direct represents '0' with '7277'
c Var 'aux1807' order represents '1' with '7278'
-7277 7278 0
c Var 'aux1807' direct represents '1' with '7279'
7277 -7278 7279 0
-7279 7278 0
-7279 -7277 0
c Var 'aux1807' direct represents '2' with '-7278'
7277 7279 -7278 0
c Encoding variable: aux1808 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1807))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7280'
c Var 'aux1808' direct represents '0' with '7280'
c Var 'aux1808' order represents '1' with '7281'
-7280 7281 0
c Var 'aux1808' direct represents '1' with '7282'
7280 -7281 7282 0
-7282 7281 0
-7282 -7280 0
c Var 'aux1808' order represents '2' with '7283'
-7281 7283 0
c Var 'aux1808' direct represents '2' with '7284'
7281 -7283 7284 0
-7284 7283 0
-7284 -7281 0
c Var 'aux1808' direct represents '3' with '-7283'
7280 7282 7284 -7283 0
c Encoding variable: aux1809 with domain: int(0..4) (representing constraint (aux1804 + aux1806))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7285'
c Var 'aux1809' direct represents '0' with '7285'
c Var 'aux1809' order represents '1' with '7286'
-7285 7286 0
c Var 'aux1809' direct represents '1' with '7287'
7285 -7286 7287 0
-7287 7286 0
-7287 -7285 0
c Var 'aux1809' order represents '2' with '7288'
-7286 7288 0
c Var 'aux1809' direct represents '2' with '7289'
7286 -7288 7289 0
-7289 7288 0
-7289 -7286 0
c Var 'aux1809' order represents '3' with '7290'
-7288 7290 0
c Var 'aux1809' direct represents '3' with '7291'
7288 -7290 7291 0
-7291 7290 0
-7291 -7288 0
c Var 'aux1809' direct represents '4' with '-7290'
7285 7287 7289 7291 -7290 0
c Encoding variable: aux1810 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7292'
c Var 'aux1810' direct represents '0' with '7292'
c Var 'aux1810' order represents '1' with '7293'
-7292 7293 0
c Var 'aux1810' direct represents '1' with '7294'
7292 -7293 7294 0
-7294 7293 0
-7294 -7292 0
c Var 'aux1810' direct represents '2' with '-7293'
7292 7294 -7293 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7295'
c Var 'aux1811' direct represents '0' with '7295'
c Var 'aux1811' order represents '1' with '7296'
-7295 7296 0
c Var 'aux1811' direct represents '1' with '7297'
7295 -7296 7297 0
-7297 7296 0
-7297 -7295 0
c Var 'aux1811' direct represents '2' with '-7296'
7295 7297 -7296 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7298'
c Var 'aux1812' direct represents '0' with '7298'
c Var 'aux1812' order represents '1' with '7299'
-7298 7299 0
c Var 'aux1812' direct represents '1' with '7300'
7298 -7299 7300 0
-7300 7299 0
-7300 -7298 0
c Var 'aux1812' direct represents '2' with '-7299'
7298 7300 -7299 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7301'
c Var 'aux1813' direct represents '0' with '7301'
c Var 'aux1813' order represents '1' with '7302'
-7301 7302 0
c Var 'aux1813' direct represents '1' with '7303'
7301 -7302 7303 0
-7303 7302 0
-7303 -7301 0
c Var 'aux1813' direct represents '2' with '-7302'
7301 7303 -7302 0
c Encoding variable: aux1814 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1813))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7304'
c Var 'aux1814' direct represents '0' with '7304'
c Var 'aux1814' order represents '1' with '7305'
-7304 7305 0
c Var 'aux1814' direct represents '1' with '7306'
7304 -7305 7306 0
-7306 7305 0
-7306 -7304 0
c Var 'aux1814' order represents '2' with '7307'
-7305 7307 0
c Var 'aux1814' direct represents '2' with '7308'
7305 -7307 7308 0
-7308 7307 0
-7308 -7305 0
c Var 'aux1814' direct represents '3' with '-7307'
7304 7306 7308 -7307 0
c Encoding variable: aux1815 with domain: int(0..4) (representing constraint (aux1810 + aux1812))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7309'
c Var 'aux1815' direct represents '0' with '7309'
c Var 'aux1815' order represents '1' with '7310'
-7309 7310 0
c Var 'aux1815' direct represents '1' with '7311'
7309 -7310 7311 0
-7311 7310 0
-7311 -7309 0
c Var 'aux1815' order represents '2' with '7312'
-7310 7312 0
c Var 'aux1815' direct represents '2' with '7313'
7310 -7312 7313 0
-7313 7312 0
-7313 -7310 0
c Var 'aux1815' order represents '3' with '7314'
-7312 7314 0
c Var 'aux1815' direct represents '3' with '7315'
7312 -7314 7315 0
-7315 7314 0
-7315 -7312 0
c Var 'aux1815' direct represents '4' with '-7314'
7309 7311 7313 7315 -7314 0
c Encoding variable: aux1816 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7316'
c Var 'aux1816' direct represents '0' with '7316'
c Var 'aux1816' order represents '1' with '7317'
-7316 7317 0
c Var 'aux1816' direct represents '1' with '7318'
7316 -7317 7318 0
-7318 7317 0
-7318 -7316 0
c Var 'aux1816' direct represents '2' with '-7317'
7316 7318 -7317 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7319'
c Var 'aux1817' direct represents '0' with '7319'
c Var 'aux1817' order represents '1' with '7320'
-7319 7320 0
c Var 'aux1817' direct represents '1' with '7321'
7319 -7320 7321 0
-7321 7320 0
-7321 -7319 0
c Var 'aux1817' direct represents '2' with '-7320'
7319 7321 -7320 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7322'
c Var 'aux1818' direct represents '0' with '7322'
c Var 'aux1818' order represents '1' with '7323'
-7322 7323 0
c Var 'aux1818' direct represents '1' with '7324'
7322 -7323 7324 0
-7324 7323 0
-7324 -7322 0
c Var 'aux1818' direct represents '2' with '-7323'
7322 7324 -7323 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7325'
c Var 'aux1819' direct represents '0' with '7325'
c Var 'aux1819' order represents '1' with '7326'
-7325 7326 0
c Var 'aux1819' direct represents '1' with '7327'
7325 -7326 7327 0
-7327 7326 0
-7327 -7325 0
c Var 'aux1819' direct represents '2' with '-7326'
7325 7327 -7326 0
c Encoding variable: aux1820 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1819))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7328'
c Var 'aux1820' direct represents '0' with '7328'
c Var 'aux1820' order represents '1' with '7329'
-7328 7329 0
c Var 'aux1820' direct represents '1' with '7330'
7328 -7329 7330 0
-7330 7329 0
-7330 -7328 0
c Var 'aux1820' order represents '2' with '7331'
-7329 7331 0
c Var 'aux1820' direct represents '2' with '7332'
7329 -7331 7332 0
-7332 7331 0
-7332 -7329 0
c Var 'aux1820' direct represents '3' with '-7331'
7328 7330 7332 -7331 0
c Encoding variable: aux1821 with domain: int(0..4) (representing constraint (aux1816 + aux1818))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7333'
c Var 'aux1821' direct represents '0' with '7333'
c Var 'aux1821' order represents '1' with '7334'
-7333 7334 0
c Var 'aux1821' direct represents '1' with '7335'
7333 -7334 7335 0
-7335 7334 0
-7335 -7333 0
c Var 'aux1821' order represents '2' with '7336'
-7334 7336 0
c Var 'aux1821' direct represents '2' with '7337'
7334 -7336 7337 0
-7337 7336 0
-7337 -7334 0
c Var 'aux1821' order represents '3' with '7338'
-7336 7338 0
c Var 'aux1821' direct represents '3' with '7339'
7336 -7338 7339 0
-7339 7338 0
-7339 -7336 0
c Var 'aux1821' direct represents '4' with '-7338'
7333 7335 7337 7339 -7338 0
c Encoding variable: aux1822 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7340'
c Var 'aux1822' direct represents '0' with '7340'
c Var 'aux1822' order represents '1' with '7341'
-7340 7341 0
c Var 'aux1822' direct represents '1' with '7342'
7340 -7341 7342 0
-7342 7341 0
-7342 -7340 0
c Var 'aux1822' direct represents '2' with '-7341'
7340 7342 -7341 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7343'
c Var 'aux1823' direct represents '0' with '7343'
c Var 'aux1823' order represents '1' with '7344'
-7343 7344 0
c Var 'aux1823' direct represents '1' with '7345'
7343 -7344 7345 0
-7345 7344 0
-7345 -7343 0
c Var 'aux1823' direct represents '2' with '-7344'
7343 7345 -7344 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7346'
c Var 'aux1824' direct represents '0' with '7346'
c Var 'aux1824' order represents '1' with '7347'
-7346 7347 0
c Var 'aux1824' direct represents '1' with '7348'
7346 -7347 7348 0
-7348 7347 0
-7348 -7346 0
c Var 'aux1824' direct represents '2' with '-7347'
7346 7348 -7347 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7349'
c Var 'aux1825' direct represents '0' with '7349'
c Var 'aux1825' order represents '1' with '7350'
-7349 7350 0
c Var 'aux1825' direct represents '1' with '7351'
7349 -7350 7351 0
-7351 7350 0
-7351 -7349 0
c Var 'aux1825' direct represents '2' with '-7350'
7349 7351 -7350 0
c Encoding variable: aux1826 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1825))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7352'
c Var 'aux1826' direct represents '0' with '7352'
c Var 'aux1826' order represents '1' with '7353'
-7352 7353 0
c Var 'aux1826' direct represents '1' with '7354'
7352 -7353 7354 0
-7354 7353 0
-7354 -7352 0
c Var 'aux1826' order represents '2' with '7355'
-7353 7355 0
c Var 'aux1826' direct represents '2' with '7356'
7353 -7355 7356 0
-7356 7355 0
-7356 -7353 0
c Var 'aux1826' direct represents '3' with '-7355'
7352 7354 7356 -7355 0
c Encoding variable: aux1827 with domain: int(0..4) (representing constraint (aux1822 + aux1824))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7357'
c Var 'aux1827' direct represents '0' with '7357'
c Var 'aux1827' order represents '1' with '7358'
-7357 7358 0
c Var 'aux1827' direct represents '1' with '7359'
7357 -7358 7359 0
-7359 7358 0
-7359 -7357 0
c Var 'aux1827' order represents '2' with '7360'
-7358 7360 0
c Var 'aux1827' direct represents '2' with '7361'
7358 -7360 7361 0
-7361 7360 0
-7361 -7358 0
c Var 'aux1827' order represents '3' with '7362'
-7360 7362 0
c Var 'aux1827' direct represents '3' with '7363'
7360 -7362 7363 0
-7363 7362 0
-7363 -7360 0
c Var 'aux1827' direct represents '4' with '-7362'
7357 7359 7361 7363 -7362 0
c Encoding variable: aux1828 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7364'
c Var 'aux1828' direct represents '0' with '7364'
c Var 'aux1828' order represents '1' with '7365'
-7364 7365 0
c Var 'aux1828' direct represents '1' with '7366'
7364 -7365 7366 0
-7366 7365 0
-7366 -7364 0
c Var 'aux1828' direct represents '2' with '-7365'
7364 7366 -7365 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7367'
c Var 'aux1829' direct represents '0' with '7367'
c Var 'aux1829' order represents '1' with '7368'
-7367 7368 0
c Var 'aux1829' direct represents '1' with '7369'
7367 -7368 7369 0
-7369 7368 0
-7369 -7367 0
c Var 'aux1829' direct represents '2' with '-7368'
7367 7369 -7368 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7370'
c Var 'aux1830' direct represents '0' with '7370'
c Var 'aux1830' order represents '1' with '7371'
-7370 7371 0
c Var 'aux1830' direct represents '1' with '7372'
7370 -7371 7372 0
-7372 7371 0
-7372 -7370 0
c Var 'aux1830' direct represents '2' with '-7371'
7370 7372 -7371 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7373'
c Var 'aux1831' direct represents '0' with '7373'
c Var 'aux1831' order represents '1' with '7374'
-7373 7374 0
c Var 'aux1831' direct represents '1' with '7375'
7373 -7374 7375 0
-7375 7374 0
-7375 -7373 0
c Var 'aux1831' direct represents '2' with '-7374'
7373 7375 -7374 0
c Encoding variable: aux1832 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1831))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7376'
c Var 'aux1832' direct represents '0' with '7376'
c Var 'aux1832' order represents '1' with '7377'
-7376 7377 0
c Var 'aux1832' direct represents '1' with '7378'
7376 -7377 7378 0
-7378 7377 0
-7378 -7376 0
c Var 'aux1832' order represents '2' with '7379'
-7377 7379 0
c Var 'aux1832' direct represents '2' with '7380'
7377 -7379 7380 0
-7380 7379 0
-7380 -7377 0
c Var 'aux1832' direct represents '3' with '-7379'
7376 7378 7380 -7379 0
c Encoding variable: aux1833 with domain: int(0..4) (representing constraint (aux1828 + aux1830))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7381'
c Var 'aux1833' direct represents '0' with '7381'
c Var 'aux1833' order represents '1' with '7382'
-7381 7382 0
c Var 'aux1833' direct represents '1' with '7383'
7381 -7382 7383 0
-7383 7382 0
-7383 -7381 0
c Var 'aux1833' order represents '2' with '7384'
-7382 7384 0
c Var 'aux1833' direct represents '2' with '7385'
7382 -7384 7385 0
-7385 7384 0
-7385 -7382 0
c Var 'aux1833' order represents '3' with '7386'
-7384 7386 0
c Var 'aux1833' direct represents '3' with '7387'
7384 -7386 7387 0
-7387 7386 0
-7387 -7384 0
c Var 'aux1833' direct represents '4' with '-7386'
7381 7383 7385 7387 -7386 0
c Encoding variable: aux1834 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7388'
c Var 'aux1834' direct represents '0' with '7388'
c Var 'aux1834' order represents '1' with '7389'
-7388 7389 0
c Var 'aux1834' direct represents '1' with '7390'
7388 -7389 7390 0
-7390 7389 0
-7390 -7388 0
c Var 'aux1834' direct represents '2' with '-7389'
7388 7390 -7389 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7391'
c Var 'aux1835' direct represents '0' with '7391'
c Var 'aux1835' order represents '1' with '7392'
-7391 7392 0
c Var 'aux1835' direct represents '1' with '7393'
7391 -7392 7393 0
-7393 7392 0
-7393 -7391 0
c Var 'aux1835' direct represents '2' with '-7392'
7391 7393 -7392 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7394'
c Var 'aux1836' direct represents '0' with '7394'
c Var 'aux1836' order represents '1' with '7395'
-7394 7395 0
c Var 'aux1836' direct represents '1' with '7396'
7394 -7395 7396 0
-7396 7395 0
-7396 -7394 0
c Var 'aux1836' direct represents '2' with '-7395'
7394 7396 -7395 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7397'
c Var 'aux1837' direct represents '0' with '7397'
c Var 'aux1837' order represents '1' with '7398'
-7397 7398 0
c Var 'aux1837' direct represents '1' with '7399'
7397 -7398 7399 0
-7399 7398 0
-7399 -7397 0
c Var 'aux1837' direct represents '2' with '-7398'
7397 7399 -7398 0
c Encoding variable: aux1838 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1837))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7400'
c Var 'aux1838' direct represents '0' with '7400'
c Var 'aux1838' order represents '1' with '7401'
-7400 7401 0
c Var 'aux1838' direct represents '1' with '7402'
7400 -7401 7402 0
-7402 7401 0
-7402 -7400 0
c Var 'aux1838' order represents '2' with '7403'
-7401 7403 0
c Var 'aux1838' direct represents '2' with '7404'
7401 -7403 7404 0
-7404 7403 0
-7404 -7401 0
c Var 'aux1838' direct represents '3' with '-7403'
7400 7402 7404 -7403 0
c Encoding variable: aux1839 with domain: int(0..4) (representing constraint (aux1834 + aux1836))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7405'
c Var 'aux1839' direct represents '0' with '7405'
c Var 'aux1839' order represents '1' with '7406'
-7405 7406 0
c Var 'aux1839' direct represents '1' with '7407'
7405 -7406 7407 0
-7407 7406 0
-7407 -7405 0
c Var 'aux1839' order represents '2' with '7408'
-7406 7408 0
c Var 'aux1839' direct represents '2' with '7409'
7406 -7408 7409 0
-7409 7408 0
-7409 -7406 0
c Var 'aux1839' order represents '3' with '7410'
-7408 7410 0
c Var 'aux1839' direct represents '3' with '7411'
7408 -7410 7411 0
-7411 7410 0
-7411 -7408 0
c Var 'aux1839' direct represents '4' with '-7410'
7405 7407 7409 7411 -7410 0
c Encoding variable: aux1840 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7412'
c Var 'aux1840' direct represents '0' with '7412'
c Var 'aux1840' order represents '1' with '7413'
-7412 7413 0
c Var 'aux1840' direct represents '1' with '7414'
7412 -7413 7414 0
-7414 7413 0
-7414 -7412 0
c Var 'aux1840' direct represents '2' with '-7413'
7412 7414 -7413 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7415'
c Var 'aux1841' direct represents '0' with '7415'
c Var 'aux1841' order represents '1' with '7416'
-7415 7416 0
c Var 'aux1841' direct represents '1' with '7417'
7415 -7416 7417 0
-7417 7416 0
-7417 -7415 0
c Var 'aux1841' direct represents '2' with '-7416'
7415 7417 -7416 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7418'
c Var 'aux1842' direct represents '0' with '7418'
c Var 'aux1842' order represents '1' with '7419'
-7418 7419 0
c Var 'aux1842' direct represents '1' with '7420'
7418 -7419 7420 0
-7420 7419 0
-7420 -7418 0
c Var 'aux1842' direct represents '2' with '-7419'
7418 7420 -7419 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7421'
c Var 'aux1843' direct represents '0' with '7421'
c Var 'aux1843' order represents '1' with '7422'
-7421 7422 0
c Var 'aux1843' direct represents '1' with '7423'
7421 -7422 7423 0
-7423 7422 0
-7423 -7421 0
c Var 'aux1843' direct represents '2' with '-7422'
7421 7423 -7422 0
c Encoding variable: aux1844 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1843))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7424'
c Var 'aux1844' direct represents '0' with '7424'
c Var 'aux1844' order represents '1' with '7425'
-7424 7425 0
c Var 'aux1844' direct represents '1' with '7426'
7424 -7425 7426 0
-7426 7425 0
-7426 -7424 0
c Var 'aux1844' order represents '2' with '7427'
-7425 7427 0
c Var 'aux1844' direct represents '2' with '7428'
7425 -7427 7428 0
-7428 7427 0
-7428 -7425 0
c Var 'aux1844' direct represents '3' with '-7427'
7424 7426 7428 -7427 0
c Encoding variable: aux1845 with domain: int(0..4) (representing constraint (aux1840 + aux1842))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7429'
c Var 'aux1845' direct represents '0' with '7429'
c Var 'aux1845' order represents '1' with '7430'
-7429 7430 0
c Var 'aux1845' direct represents '1' with '7431'
7429 -7430 7431 0
-7431 7430 0
-7431 -7429 0
c Var 'aux1845' order represents '2' with '7432'
-7430 7432 0
c Var 'aux1845' direct represents '2' with '7433'
7430 -7432 7433 0
-7433 7432 0
-7433 -7430 0
c Var 'aux1845' order represents '3' with '7434'
-7432 7434 0
c Var 'aux1845' direct represents '3' with '7435'
7432 -7434 7435 0
-7435 7434 0
-7435 -7432 0
c Var 'aux1845' direct represents '4' with '-7434'
7429 7431 7433 7435 -7434 0
c Encoding variable: aux1846 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7436'
c Var 'aux1846' direct represents '0' with '7436'
c Var 'aux1846' order represents '1' with '7437'
-7436 7437 0
c Var 'aux1846' direct represents '1' with '7438'
7436 -7437 7438 0
-7438 7437 0
-7438 -7436 0
c Var 'aux1846' direct represents '2' with '-7437'
7436 7438 -7437 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7439'
c Var 'aux1847' direct represents '0' with '7439'
c Var 'aux1847' order represents '1' with '7440'
-7439 7440 0
c Var 'aux1847' direct represents '1' with '7441'
7439 -7440 7441 0
-7441 7440 0
-7441 -7439 0
c Var 'aux1847' direct represents '2' with '-7440'
7439 7441 -7440 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7442'
c Var 'aux1848' direct represents '0' with '7442'
c Var 'aux1848' order represents '1' with '7443'
-7442 7443 0
c Var 'aux1848' direct represents '1' with '7444'
7442 -7443 7444 0
-7444 7443 0
-7444 -7442 0
c Var 'aux1848' direct represents '2' with '-7443'
7442 7444 -7443 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7445'
c Var 'aux1849' direct represents '0' with '7445'
c Var 'aux1849' order represents '1' with '7446'
-7445 7446 0
c Var 'aux1849' direct represents '1' with '7447'
7445 -7446 7447 0
-7447 7446 0
-7447 -7445 0
c Var 'aux1849' direct represents '2' with '-7446'
7445 7447 -7446 0
c Encoding variable: aux1850 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1849))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7448'
c Var 'aux1850' direct represents '0' with '7448'
c Var 'aux1850' order represents '1' with '7449'
-7448 7449 0
c Var 'aux1850' direct represents '1' with '7450'
7448 -7449 7450 0
-7450 7449 0
-7450 -7448 0
c Var 'aux1850' order represents '2' with '7451'
-7449 7451 0
c Var 'aux1850' direct represents '2' with '7452'
7449 -7451 7452 0
-7452 7451 0
-7452 -7449 0
c Var 'aux1850' direct represents '3' with '-7451'
7448 7450 7452 -7451 0
c Encoding variable: aux1851 with domain: int(0..4) (representing constraint (aux1846 + aux1848))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7453'
c Var 'aux1851' direct represents '0' with '7453'
c Var 'aux1851' order represents '1' with '7454'
-7453 7454 0
c Var 'aux1851' direct represents '1' with '7455'
7453 -7454 7455 0
-7455 7454 0
-7455 -7453 0
c Var 'aux1851' order represents '2' with '7456'
-7454 7456 0
c Var 'aux1851' direct represents '2' with '7457'
7454 -7456 7457 0
-7457 7456 0
-7457 -7454 0
c Var 'aux1851' order represents '3' with '7458'
-7456 7458 0
c Var 'aux1851' direct represents '3' with '7459'
7456 -7458 7459 0
-7459 7458 0
-7459 -7456 0
c Var 'aux1851' direct represents '4' with '-7458'
7453 7455 7457 7459 -7458 0
c Encoding variable: aux1852 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7460'
c Var 'aux1852' direct represents '0' with '7460'
c Var 'aux1852' order represents '1' with '7461'
-7460 7461 0
c Var 'aux1852' direct represents '1' with '7462'
7460 -7461 7462 0
-7462 7461 0
-7462 -7460 0
c Var 'aux1852' direct represents '2' with '-7461'
7460 7462 -7461 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7463'
c Var 'aux1853' direct represents '0' with '7463'
c Var 'aux1853' order represents '1' with '7464'
-7463 7464 0
c Var 'aux1853' direct represents '1' with '7465'
7463 -7464 7465 0
-7465 7464 0
-7465 -7463 0
c Var 'aux1853' direct represents '2' with '-7464'
7463 7465 -7464 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7466'
c Var 'aux1854' direct represents '0' with '7466'
c Var 'aux1854' order represents '1' with '7467'
-7466 7467 0
c Var 'aux1854' direct represents '1' with '7468'
7466 -7467 7468 0
-7468 7467 0
-7468 -7466 0
c Var 'aux1854' direct represents '2' with '-7467'
7466 7468 -7467 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7469'
c Var 'aux1855' direct represents '0' with '7469'
c Var 'aux1855' order represents '1' with '7470'
-7469 7470 0
c Var 'aux1855' direct represents '1' with '7471'
7469 -7470 7471 0
-7471 7470 0
-7471 -7469 0
c Var 'aux1855' direct represents '2' with '-7470'
7469 7471 -7470 0
c Encoding variable: aux1856 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1855))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7472'
c Var 'aux1856' direct represents '0' with '7472'
c Var 'aux1856' order represents '1' with '7473'
-7472 7473 0
c Var 'aux1856' direct represents '1' with '7474'
7472 -7473 7474 0
-7474 7473 0
-7474 -7472 0
c Var 'aux1856' order represents '2' with '7475'
-7473 7475 0
c Var 'aux1856' direct represents '2' with '7476'
7473 -7475 7476 0
-7476 7475 0
-7476 -7473 0
c Var 'aux1856' direct represents '3' with '-7475'
7472 7474 7476 -7475 0
c Encoding variable: aux1857 with domain: int(0..4) (representing constraint (aux1852 + aux1854))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7477'
c Var 'aux1857' direct represents '0' with '7477'
c Var 'aux1857' order represents '1' with '7478'
-7477 7478 0
c Var 'aux1857' direct represents '1' with '7479'
7477 -7478 7479 0
-7479 7478 0
-7479 -7477 0
c Var 'aux1857' order represents '2' with '7480'
-7478 7480 0
c Var 'aux1857' direct represents '2' with '7481'
7478 -7480 7481 0
-7481 7480 0
-7481 -7478 0
c Var 'aux1857' order represents '3' with '7482'
-7480 7482 0
c Var 'aux1857' direct represents '3' with '7483'
7480 -7482 7483 0
-7483 7482 0
-7483 -7480 0
c Var 'aux1857' direct represents '4' with '-7482'
7477 7479 7481 7483 -7482 0
c Encoding variable: aux1858 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7484'
c Var 'aux1858' direct represents '0' with '7484'
c Var 'aux1858' order represents '1' with '7485'
-7484 7485 0
c Var 'aux1858' direct represents '1' with '7486'
7484 -7485 7486 0
-7486 7485 0
-7486 -7484 0
c Var 'aux1858' direct represents '2' with '-7485'
7484 7486 -7485 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7487'
c Var 'aux1859' direct represents '0' with '7487'
c Var 'aux1859' order represents '1' with '7488'
-7487 7488 0
c Var 'aux1859' direct represents '1' with '7489'
7487 -7488 7489 0
-7489 7488 0
-7489 -7487 0
c Var 'aux1859' direct represents '2' with '-7488'
7487 7489 -7488 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7490'
c Var 'aux1860' direct represents '0' with '7490'
c Var 'aux1860' order represents '1' with '7491'
-7490 7491 0
c Var 'aux1860' direct represents '1' with '7492'
7490 -7491 7492 0
-7492 7491 0
-7492 -7490 0
c Var 'aux1860' direct represents '2' with '-7491'
7490 7492 -7491 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7493'
c Var 'aux1861' direct represents '0' with '7493'
c Var 'aux1861' order represents '1' with '7494'
-7493 7494 0
c Var 'aux1861' direct represents '1' with '7495'
7493 -7494 7495 0
-7495 7494 0
-7495 -7493 0
c Var 'aux1861' direct represents '2' with '-7494'
7493 7495 -7494 0
c Encoding variable: aux1862 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1861))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7496'
c Var 'aux1862' direct represents '0' with '7496'
c Var 'aux1862' order represents '1' with '7497'
-7496 7497 0
c Var 'aux1862' direct represents '1' with '7498'
7496 -7497 7498 0
-7498 7497 0
-7498 -7496 0
c Var 'aux1862' order represents '2' with '7499'
-7497 7499 0
c Var 'aux1862' direct represents '2' with '7500'
7497 -7499 7500 0
-7500 7499 0
-7500 -7497 0
c Var 'aux1862' direct represents '3' with '-7499'
7496 7498 7500 -7499 0
c Encoding variable: aux1863 with domain: int(0..4) (representing constraint (aux1858 + aux1860))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7501'
c Var 'aux1863' direct represents '0' with '7501'
c Var 'aux1863' order represents '1' with '7502'
-7501 7502 0
c Var 'aux1863' direct represents '1' with '7503'
7501 -7502 7503 0
-7503 7502 0
-7503 -7501 0
c Var 'aux1863' order represents '2' with '7504'
-7502 7504 0
c Var 'aux1863' direct represents '2' with '7505'
7502 -7504 7505 0
-7505 7504 0
-7505 -7502 0
c Var 'aux1863' order represents '3' with '7506'
-7504 7506 0
c Var 'aux1863' direct represents '3' with '7507'
7504 -7506 7507 0
-7507 7506 0
-7507 -7504 0
c Var 'aux1863' direct represents '4' with '-7506'
7501 7503 7505 7507 -7506 0
c Encoding variable: aux1864 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7508'
c Var 'aux1864' direct represents '0' with '7508'
c Var 'aux1864' order represents '1' with '7509'
-7508 7509 0
c Var 'aux1864' direct represents '1' with '7510'
7508 -7509 7510 0
-7510 7509 0
-7510 -7508 0
c Var 'aux1864' direct represents '2' with '-7509'
7508 7510 -7509 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7511'
c Var 'aux1865' direct represents '0' with '7511'
c Var 'aux1865' order represents '1' with '7512'
-7511 7512 0
c Var 'aux1865' direct represents '1' with '7513'
7511 -7512 7513 0
-7513 7512 0
-7513 -7511 0
c Var 'aux1865' direct represents '2' with '-7512'
7511 7513 -7512 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7514'
c Var 'aux1866' direct represents '0' with '7514'
c Var 'aux1866' order represents '1' with '7515'
-7514 7515 0
c Var 'aux1866' direct represents '1' with '7516'
7514 -7515 7516 0
-7516 7515 0
-7516 -7514 0
c Var 'aux1866' direct represents '2' with '-7515'
7514 7516 -7515 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7517'
c Var 'aux1867' direct represents '0' with '7517'
c Var 'aux1867' order represents '1' with '7518'
-7517 7518 0
c Var 'aux1867' direct represents '1' with '7519'
7517 -7518 7519 0
-7519 7518 0
-7519 -7517 0
c Var 'aux1867' direct represents '2' with '-7518'
7517 7519 -7518 0
c Encoding variable: aux1868 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1867))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7520'
c Var 'aux1868' direct represents '0' with '7520'
c Var 'aux1868' order represents '1' with '7521'
-7520 7521 0
c Var 'aux1868' direct represents '1' with '7522'
7520 -7521 7522 0
-7522 7521 0
-7522 -7520 0
c Var 'aux1868' order represents '2' with '7523'
-7521 7523 0
c Var 'aux1868' direct represents '2' with '7524'
7521 -7523 7524 0
-7524 7523 0
-7524 -7521 0
c Var 'aux1868' direct represents '3' with '-7523'
7520 7522 7524 -7523 0
c Encoding variable: aux1869 with domain: int(0..4) (representing constraint (aux1864 + aux1866))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7525'
c Var 'aux1869' direct represents '0' with '7525'
c Var 'aux1869' order represents '1' with '7526'
-7525 7526 0
c Var 'aux1869' direct represents '1' with '7527'
7525 -7526 7527 0
-7527 7526 0
-7527 -7525 0
c Var 'aux1869' order represents '2' with '7528'
-7526 7528 0
c Var 'aux1869' direct represents '2' with '7529'
7526 -7528 7529 0
-7529 7528 0
-7529 -7526 0
c Var 'aux1869' order represents '3' with '7530'
-7528 7530 0
c Var 'aux1869' direct represents '3' with '7531'
7528 -7530 7531 0
-7531 7530 0
-7531 -7528 0
c Var 'aux1869' direct represents '4' with '-7530'
7525 7527 7529 7531 -7530 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7532'
c Var 'aux1870' direct represents '0' with '7532'
c Var 'aux1870' order represents '1' with '7533'
-7532 7533 0
c Var 'aux1870' direct represents '1' with '7534'
7532 -7533 7534 0
-7534 7533 0
-7534 -7532 0
c Var 'aux1870' direct represents '2' with '-7533'
7532 7534 -7533 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7535'
c Var 'aux1871' direct represents '0' with '7535'
c Var 'aux1871' order represents '1' with '7536'
-7535 7536 0
c Var 'aux1871' direct represents '1' with '7537'
7535 -7536 7537 0
-7537 7536 0
-7537 -7535 0
c Var 'aux1871' direct represents '2' with '-7536'
7535 7537 -7536 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7538'
c Var 'aux1872' direct represents '0' with '7538'
c Var 'aux1872' order represents '1' with '7539'
-7538 7539 0
c Var 'aux1872' direct represents '1' with '7540'
7538 -7539 7540 0
-7540 7539 0
-7540 -7538 0
c Var 'aux1872' direct represents '2' with '-7539'
7538 7540 -7539 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7541'
c Var 'aux1873' direct represents '0' with '7541'
c Var 'aux1873' order represents '1' with '7542'
-7541 7542 0
c Var 'aux1873' direct represents '1' with '7543'
7541 -7542 7543 0
-7543 7542 0
-7543 -7541 0
c Var 'aux1873' direct represents '2' with '-7542'
7541 7543 -7542 0
c Encoding variable: aux1874 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1873))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7544'
c Var 'aux1874' direct represents '0' with '7544'
c Var 'aux1874' order represents '1' with '7545'
-7544 7545 0
c Var 'aux1874' direct represents '1' with '7546'
7544 -7545 7546 0
-7546 7545 0
-7546 -7544 0
c Var 'aux1874' order represents '2' with '7547'
-7545 7547 0
c Var 'aux1874' direct represents '2' with '7548'
7545 -7547 7548 0
-7548 7547 0
-7548 -7545 0
c Var 'aux1874' direct represents '3' with '-7547'
7544 7546 7548 -7547 0
c Encoding variable: aux1875 with domain: int(0..4) (representing constraint (aux1870 + aux1872))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7549'
c Var 'aux1875' direct represents '0' with '7549'
c Var 'aux1875' order represents '1' with '7550'
-7549 7550 0
c Var 'aux1875' direct represents '1' with '7551'
7549 -7550 7551 0
-7551 7550 0
-7551 -7549 0
c Var 'aux1875' order represents '2' with '7552'
-7550 7552 0
c Var 'aux1875' direct represents '2' with '7553'
7550 -7552 7553 0
-7553 7552 0
-7553 -7550 0
c Var 'aux1875' order represents '3' with '7554'
-7552 7554 0
c Var 'aux1875' direct represents '3' with '7555'
7552 -7554 7555 0
-7555 7554 0
-7555 -7552 0
c Var 'aux1875' direct represents '4' with '-7554'
7549 7551 7553 7555 -7554 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7556'
c Var 'aux1876' direct represents '0' with '7556'
c Var 'aux1876' order represents '1' with '7557'
-7556 7557 0
c Var 'aux1876' direct represents '1' with '7558'
7556 -7557 7558 0
-7558 7557 0
-7558 -7556 0
c Var 'aux1876' direct represents '2' with '-7557'
7556 7558 -7557 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7559'
c Var 'aux1877' direct represents '0' with '7559'
c Var 'aux1877' order represents '1' with '7560'
-7559 7560 0
c Var 'aux1877' direct represents '1' with '7561'
7559 -7560 7561 0
-7561 7560 0
-7561 -7559 0
c Var 'aux1877' direct represents '2' with '-7560'
7559 7561 -7560 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7562'
c Var 'aux1878' direct represents '0' with '7562'
c Var 'aux1878' order represents '1' with '7563'
-7562 7563 0
c Var 'aux1878' direct represents '1' with '7564'
7562 -7563 7564 0
-7564 7563 0
-7564 -7562 0
c Var 'aux1878' direct represents '2' with '-7563'
7562 7564 -7563 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7565'
c Var 'aux1879' direct represents '0' with '7565'
c Var 'aux1879' order represents '1' with '7566'
-7565 7566 0
c Var 'aux1879' direct represents '1' with '7567'
7565 -7566 7567 0
-7567 7566 0
-7567 -7565 0
c Var 'aux1879' direct represents '2' with '-7566'
7565 7567 -7566 0
c Encoding variable: aux1880 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1879))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7568'
c Var 'aux1880' direct represents '0' with '7568'
c Var 'aux1880' order represents '1' with '7569'
-7568 7569 0
c Var 'aux1880' direct represents '1' with '7570'
7568 -7569 7570 0
-7570 7569 0
-7570 -7568 0
c Var 'aux1880' order represents '2' with '7571'
-7569 7571 0
c Var 'aux1880' direct represents '2' with '7572'
7569 -7571 7572 0
-7572 7571 0
-7572 -7569 0
c Var 'aux1880' direct represents '3' with '-7571'
7568 7570 7572 -7571 0
c Encoding variable: aux1881 with domain: int(0..4) (representing constraint (aux1876 + aux1878))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7573'
c Var 'aux1881' direct represents '0' with '7573'
c Var 'aux1881' order represents '1' with '7574'
-7573 7574 0
c Var 'aux1881' direct represents '1' with '7575'
7573 -7574 7575 0
-7575 7574 0
-7575 -7573 0
c Var 'aux1881' order represents '2' with '7576'
-7574 7576 0
c Var 'aux1881' direct represents '2' with '7577'
7574 -7576 7577 0
-7577 7576 0
-7577 -7574 0
c Var 'aux1881' order represents '3' with '7578'
-7576 7578 0
c Var 'aux1881' direct represents '3' with '7579'
7576 -7578 7579 0
-7579 7578 0
-7579 -7576 0
c Var 'aux1881' direct represents '4' with '-7578'
7573 7575 7577 7579 -7578 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7580'
c Var 'aux1882' direct represents '0' with '7580'
c Var 'aux1882' order represents '1' with '7581'
-7580 7581 0
c Var 'aux1882' direct represents '1' with '7582'
7580 -7581 7582 0
-7582 7581 0
-7582 -7580 0
c Var 'aux1882' direct represents '2' with '-7581'
7580 7582 -7581 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7583'
c Var 'aux1883' direct represents '0' with '7583'
c Var 'aux1883' order represents '1' with '7584'
-7583 7584 0
c Var 'aux1883' direct represents '1' with '7585'
7583 -7584 7585 0
-7585 7584 0
-7585 -7583 0
c Var 'aux1883' direct represents '2' with '-7584'
7583 7585 -7584 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7586'
c Var 'aux1884' direct represents '0' with '7586'
c Var 'aux1884' order represents '1' with '7587'
-7586 7587 0
c Var 'aux1884' direct represents '1' with '7588'
7586 -7587 7588 0
-7588 7587 0
-7588 -7586 0
c Var 'aux1884' direct represents '2' with '-7587'
7586 7588 -7587 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7589'
c Var 'aux1885' direct represents '0' with '7589'
c Var 'aux1885' order represents '1' with '7590'
-7589 7590 0
c Var 'aux1885' direct represents '1' with '7591'
7589 -7590 7591 0
-7591 7590 0
-7591 -7589 0
c Var 'aux1885' direct represents '2' with '-7590'
7589 7591 -7590 0
c Encoding variable: aux1886 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1885))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7592'
c Var 'aux1886' direct represents '0' with '7592'
c Var 'aux1886' order represents '1' with '7593'
-7592 7593 0
c Var 'aux1886' direct represents '1' with '7594'
7592 -7593 7594 0
-7594 7593 0
-7594 -7592 0
c Var 'aux1886' order represents '2' with '7595'
-7593 7595 0
c Var 'aux1886' direct represents '2' with '7596'
7593 -7595 7596 0
-7596 7595 0
-7596 -7593 0
c Var 'aux1886' direct represents '3' with '-7595'
7592 7594 7596 -7595 0
c Encoding variable: aux1887 with domain: int(0..4) (representing constraint (aux1882 + aux1884))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7597'
c Var 'aux1887' direct represents '0' with '7597'
c Var 'aux1887' order represents '1' with '7598'
-7597 7598 0
c Var 'aux1887' direct represents '1' with '7599'
7597 -7598 7599 0
-7599 7598 0
-7599 -7597 0
c Var 'aux1887' order represents '2' with '7600'
-7598 7600 0
c Var 'aux1887' direct represents '2' with '7601'
7598 -7600 7601 0
-7601 7600 0
-7601 -7598 0
c Var 'aux1887' order represents '3' with '7602'
-7600 7602 0
c Var 'aux1887' direct represents '3' with '7603'
7600 -7602 7603 0
-7603 7602 0
-7603 -7600 0
c Var 'aux1887' direct represents '4' with '-7602'
7597 7599 7601 7603 -7602 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7604'
c Var 'aux1888' direct represents '0' with '7604'
c Var 'aux1888' order represents '1' with '7605'
-7604 7605 0
c Var 'aux1888' direct represents '1' with '7606'
7604 -7605 7606 0
-7606 7605 0
-7606 -7604 0
c Var 'aux1888' direct represents '2' with '-7605'
7604 7606 -7605 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7607'
c Var 'aux1889' direct represents '0' with '7607'
c Var 'aux1889' order represents '1' with '7608'
-7607 7608 0
c Var 'aux1889' direct represents '1' with '7609'
7607 -7608 7609 0
-7609 7608 0
-7609 -7607 0
c Var 'aux1889' direct represents '2' with '-7608'
7607 7609 -7608 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7610'
c Var 'aux1890' direct represents '0' with '7610'
c Var 'aux1890' order represents '1' with '7611'
-7610 7611 0
c Var 'aux1890' direct represents '1' with '7612'
7610 -7611 7612 0
-7612 7611 0
-7612 -7610 0
c Var 'aux1890' direct represents '2' with '-7611'
7610 7612 -7611 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7613'
c Var 'aux1891' direct represents '0' with '7613'
c Var 'aux1891' order represents '1' with '7614'
-7613 7614 0
c Var 'aux1891' direct represents '1' with '7615'
7613 -7614 7615 0
-7615 7614 0
-7615 -7613 0
c Var 'aux1891' direct represents '2' with '-7614'
7613 7615 -7614 0
c Encoding variable: aux1892 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1891))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7616'
c Var 'aux1892' direct represents '0' with '7616'
c Var 'aux1892' order represents '1' with '7617'
-7616 7617 0
c Var 'aux1892' direct represents '1' with '7618'
7616 -7617 7618 0
-7618 7617 0
-7618 -7616 0
c Var 'aux1892' order represents '2' with '7619'
-7617 7619 0
c Var 'aux1892' direct represents '2' with '7620'
7617 -7619 7620 0
-7620 7619 0
-7620 -7617 0
c Var 'aux1892' direct represents '3' with '-7619'
7616 7618 7620 -7619 0
c Encoding variable: aux1893 with domain: int(0..4) (representing constraint (aux1888 + aux1890))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7621'
c Var 'aux1893' direct represents '0' with '7621'
c Var 'aux1893' order represents '1' with '7622'
-7621 7622 0
c Var 'aux1893' direct represents '1' with '7623'
7621 -7622 7623 0
-7623 7622 0
-7623 -7621 0
c Var 'aux1893' order represents '2' with '7624'
-7622 7624 0
c Var 'aux1893' direct represents '2' with '7625'
7622 -7624 7625 0
-7625 7624 0
-7625 -7622 0
c Var 'aux1893' order represents '3' with '7626'
-7624 7626 0
c Var 'aux1893' direct represents '3' with '7627'
7624 -7626 7627 0
-7627 7626 0
-7627 -7624 0
c Var 'aux1893' direct represents '4' with '-7626'
7621 7623 7625 7627 -7626 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7628'
c Var 'aux1894' direct represents '0' with '7628'
c Var 'aux1894' order represents '1' with '7629'
-7628 7629 0
c Var 'aux1894' direct represents '1' with '7630'
7628 -7629 7630 0
-7630 7629 0
-7630 -7628 0
c Var 'aux1894' direct represents '2' with '-7629'
7628 7630 -7629 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7631'
c Var 'aux1895' direct represents '0' with '7631'
c Var 'aux1895' order represents '1' with '7632'
-7631 7632 0
c Var 'aux1895' direct represents '1' with '7633'
7631 -7632 7633 0
-7633 7632 0
-7633 -7631 0
c Var 'aux1895' direct represents '2' with '-7632'
7631 7633 -7632 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7634'
c Var 'aux1896' direct represents '0' with '7634'
c Var 'aux1896' order represents '1' with '7635'
-7634 7635 0
c Var 'aux1896' direct represents '1' with '7636'
7634 -7635 7636 0
-7636 7635 0
-7636 -7634 0
c Var 'aux1896' direct represents '2' with '-7635'
7634 7636 -7635 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7637'
c Var 'aux1897' direct represents '0' with '7637'
c Var 'aux1897' order represents '1' with '7638'
-7637 7638 0
c Var 'aux1897' direct represents '1' with '7639'
7637 -7638 7639 0
-7639 7638 0
-7639 -7637 0
c Var 'aux1897' direct represents '2' with '-7638'
7637 7639 -7638 0
c Encoding variable: aux1898 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1897))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7640'
c Var 'aux1898' direct represents '0' with '7640'
c Var 'aux1898' order represents '1' with '7641'
-7640 7641 0
c Var 'aux1898' direct represents '1' with '7642'
7640 -7641 7642 0
-7642 7641 0
-7642 -7640 0
c Var 'aux1898' order represents '2' with '7643'
-7641 7643 0
c Var 'aux1898' direct represents '2' with '7644'
7641 -7643 7644 0
-7644 7643 0
-7644 -7641 0
c Var 'aux1898' direct represents '3' with '-7643'
7640 7642 7644 -7643 0
c Encoding variable: aux1899 with domain: int(0..4) (representing constraint (aux1894 + aux1896))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7645'
c Var 'aux1899' direct represents '0' with '7645'
c Var 'aux1899' order represents '1' with '7646'
-7645 7646 0
c Var 'aux1899' direct represents '1' with '7647'
7645 -7646 7647 0
-7647 7646 0
-7647 -7645 0
c Var 'aux1899' order represents '2' with '7648'
-7646 7648 0
c Var 'aux1899' direct represents '2' with '7649'
7646 -7648 7649 0
-7649 7648 0
-7649 -7646 0
c Var 'aux1899' order represents '3' with '7650'
-7648 7650 0
c Var 'aux1899' direct represents '3' with '7651'
7648 -7650 7651 0
-7651 7650 0
-7651 -7648 0
c Var 'aux1899' direct represents '4' with '-7650'
7645 7647 7649 7651 -7650 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7652'
c Var 'aux1900' direct represents '0' with '7652'
c Var 'aux1900' order represents '1' with '7653'
-7652 7653 0
c Var 'aux1900' direct represents '1' with '7654'
7652 -7653 7654 0
-7654 7653 0
-7654 -7652 0
c Var 'aux1900' direct represents '2' with '-7653'
7652 7654 -7653 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7655'
c Var 'aux1901' direct represents '0' with '7655'
c Var 'aux1901' order represents '1' with '7656'
-7655 7656 0
c Var 'aux1901' direct represents '1' with '7657'
7655 -7656 7657 0
-7657 7656 0
-7657 -7655 0
c Var 'aux1901' direct represents '2' with '-7656'
7655 7657 -7656 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7658'
c Var 'aux1902' direct represents '0' with '7658'
c Var 'aux1902' order represents '1' with '7659'
-7658 7659 0
c Var 'aux1902' direct represents '1' with '7660'
7658 -7659 7660 0
-7660 7659 0
-7660 -7658 0
c Var 'aux1902' direct represents '2' with '-7659'
7658 7660 -7659 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7661'
c Var 'aux1903' direct represents '0' with '7661'
c Var 'aux1903' order represents '1' with '7662'
-7661 7662 0
c Var 'aux1903' direct represents '1' with '7663'
7661 -7662 7663 0
-7663 7662 0
-7663 -7661 0
c Var 'aux1903' direct represents '2' with '-7662'
7661 7663 -7662 0
c Encoding variable: aux1904 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1903))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7664'
c Var 'aux1904' direct represents '0' with '7664'
c Var 'aux1904' order represents '1' with '7665'
-7664 7665 0
c Var 'aux1904' direct represents '1' with '7666'
7664 -7665 7666 0
-7666 7665 0
-7666 -7664 0
c Var 'aux1904' order represents '2' with '7667'
-7665 7667 0
c Var 'aux1904' direct represents '2' with '7668'
7665 -7667 7668 0
-7668 7667 0
-7668 -7665 0
c Var 'aux1904' direct represents '3' with '-7667'
7664 7666 7668 -7667 0
c Encoding variable: aux1905 with domain: int(0..4) (representing constraint (aux1900 + aux1902))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7669'
c Var 'aux1905' direct represents '0' with '7669'
c Var 'aux1905' order represents '1' with '7670'
-7669 7670 0
c Var 'aux1905' direct represents '1' with '7671'
7669 -7670 7671 0
-7671 7670 0
-7671 -7669 0
c Var 'aux1905' order represents '2' with '7672'
-7670 7672 0
c Var 'aux1905' direct represents '2' with '7673'
7670 -7672 7673 0
-7673 7672 0
-7673 -7670 0
c Var 'aux1905' order represents '3' with '7674'
-7672 7674 0
c Var 'aux1905' direct represents '3' with '7675'
7672 -7674 7675 0
-7675 7674 0
-7675 -7672 0
c Var 'aux1905' direct represents '4' with '-7674'
7669 7671 7673 7675 -7674 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7676'
c Var 'aux1906' direct represents '0' with '7676'
c Var 'aux1906' order represents '1' with '7677'
-7676 7677 0
c Var 'aux1906' direct represents '1' with '7678'
7676 -7677 7678 0
-7678 7677 0
-7678 -7676 0
c Var 'aux1906' direct represents '2' with '-7677'
7676 7678 -7677 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7679'
c Var 'aux1907' direct represents '0' with '7679'
c Var 'aux1907' order represents '1' with '7680'
-7679 7680 0
c Var 'aux1907' direct represents '1' with '7681'
7679 -7680 7681 0
-7681 7680 0
-7681 -7679 0
c Var 'aux1907' direct represents '2' with '-7680'
7679 7681 -7680 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7682'
c Var 'aux1908' direct represents '0' with '7682'
c Var 'aux1908' order represents '1' with '7683'
-7682 7683 0
c Var 'aux1908' direct represents '1' with '7684'
7682 -7683 7684 0
-7684 7683 0
-7684 -7682 0
c Var 'aux1908' direct represents '2' with '-7683'
7682 7684 -7683 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7685'
c Var 'aux1909' direct represents '0' with '7685'
c Var 'aux1909' order represents '1' with '7686'
-7685 7686 0
c Var 'aux1909' direct represents '1' with '7687'
7685 -7686 7687 0
-7687 7686 0
-7687 -7685 0
c Var 'aux1909' direct represents '2' with '-7686'
7685 7687 -7686 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7688'
c Var 'aux1910' direct represents '0' with '7688'
c Var 'aux1910' order represents '1' with '7689'
-7688 7689 0
c Var 'aux1910' direct represents '1' with '7690'
7688 -7689 7690 0
-7690 7689 0
-7690 -7688 0
c Var 'aux1910' direct represents '2' with '-7689'
7688 7690 -7689 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7691'
c Var 'aux1911' direct represents '0' with '7691'
c Var 'aux1911' order represents '1' with '7692'
-7691 7692 0
c Var 'aux1911' direct represents '1' with '7693'
7691 -7692 7693 0
-7693 7692 0
-7693 -7691 0
c Var 'aux1911' direct represents '2' with '-7692'
7691 7693 -7692 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7694'
c Var 'aux1912' direct represents '0' with '7694'
c Var 'aux1912' order represents '1' with '7695'
-7694 7695 0
c Var 'aux1912' direct represents '1' with '7696'
7694 -7695 7696 0
-7696 7695 0
-7696 -7694 0
c Var 'aux1912' direct represents '2' with '-7695'
7694 7696 -7695 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7697'
c Var 'aux1913' direct represents '0' with '7697'
c Var 'aux1913' order represents '1' with '7698'
-7697 7698 0
c Var 'aux1913' direct represents '1' with '7699'
7697 -7698 7699 0
-7699 7698 0
-7699 -7697 0
c Var 'aux1913' direct represents '2' with '-7698'
7697 7699 -7698 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7700'
c Var 'aux1914' direct represents '0' with '7700'
c Var 'aux1914' order represents '1' with '7701'
-7700 7701 0
c Var 'aux1914' direct represents '1' with '7702'
7700 -7701 7702 0
-7702 7701 0
-7702 -7700 0
c Var 'aux1914' direct represents '2' with '-7701'
7700 7702 -7701 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00004_00004=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7703'
c Var 'aux1915' direct represents '0' with '7703'
c Var 'aux1915' order represents '1' with '7704'
-7703 7704 0
c Var 'aux1915' direct represents '1' with '7705'
7703 -7704 7705 0
-7705 7704 0
-7705 -7703 0
c Var 'aux1915' direct represents '2' with '-7704'
7703 7705 -7704 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00004_00004=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7706'
c Var 'aux1916' direct represents '0' with '7706'
c Var 'aux1916' order represents '1' with '7707'
-7706 7707 0
c Var 'aux1916' direct represents '1' with '7708'
7706 -7707 7708 0
-7708 7707 0
-7708 -7706 0
c Var 'aux1916' direct represents '2' with '-7707'
7706 7708 -7707 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00004_00004=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7709'
c Var 'aux1917' direct represents '0' with '7709'
c Var 'aux1917' order represents '1' with '7710'
-7709 7710 0
c Var 'aux1917' direct represents '1' with '7711'
7709 -7710 7711 0
-7711 7710 0
-7711 -7709 0
c Var 'aux1917' direct represents '2' with '-7710'
7709 7711 -7710 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00004_00004=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7712'
c Var 'aux1918' direct represents '0' with '7712'
c Var 'aux1918' order represents '1' with '7713'
-7712 7713 0
c Var 'aux1918' direct represents '1' with '7714'
7712 -7713 7714 0
-7714 7713 0
-7714 -7712 0
c Var 'aux1918' direct represents '2' with '-7713'
7712 7714 -7713 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00004_00004=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7715'
c Var 'aux1919' direct represents '0' with '7715'
c Var 'aux1919' order represents '1' with '7716'
-7715 7716 0
c Var 'aux1919' direct represents '1' with '7717'
7715 -7716 7717 0
-7717 7716 0
-7717 -7715 0
c Var 'aux1919' direct represents '2' with '-7716'
7715 7717 -7716 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00004_00004=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7718'
c Var 'aux1920' direct represents '0' with '7718'
c Var 'aux1920' order represents '1' with '7719'
-7718 7719 0
c Var 'aux1920' direct represents '1' with '7720'
7718 -7719 7720 0
-7720 7719 0
-7720 -7718 0
c Var 'aux1920' direct represents '2' with '-7719'
7718 7720 -7719 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00004_00004=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7721'
c Var 'aux1921' direct represents '0' with '7721'
c Var 'aux1921' order represents '1' with '7722'
-7721 7722 0
c Var 'aux1921' direct represents '1' with '7723'
7721 -7722 7723 0
-7723 7722 0
-7723 -7721 0
c Var 'aux1921' direct represents '2' with '-7722'
7721 7723 -7722 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00004_00004=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7724'
c Var 'aux1922' direct represents '0' with '7724'
c Var 'aux1922' order represents '1' with '7725'
-7724 7725 0
c Var 'aux1922' direct represents '1' with '7726'
7724 -7725 7726 0
-7726 7725 0
-7726 -7724 0
c Var 'aux1922' direct represents '2' with '-7725'
7724 7726 -7725 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00004_00004=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7727'
c Var 'aux1923' direct represents '0' with '7727'
c Var 'aux1923' order represents '1' with '7728'
-7727 7728 0
c Var 'aux1923' direct represents '1' with '7729'
7727 -7728 7729 0
-7729 7728 0
-7729 -7727 0
c Var 'aux1923' direct represents '2' with '-7728'
7727 7729 -7728 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '7730'
c Var 'aux1924' direct represents '0' with '7730'
c Var 'aux1924' order represents '1' with '7731'
-7730 7731 0
c Var 'aux1924' direct represents '1' with '7732'
7730 -7731 7732 0
-7732 7731 0
-7732 -7730 0
c Var 'aux1924' direct represents '2' with '-7731'
7730 7732 -7731 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '7733'
c Var 'aux1925' direct represents '0' with '7733'
c Var 'aux1925' order represents '1' with '7734'
-7733 7734 0
c Var 'aux1925' direct represents '1' with '7735'
7733 -7734 7735 0
-7735 7734 0
-7735 -7733 0
c Var 'aux1925' direct represents '2' with '-7734'
7733 7735 -7734 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '7736'
c Var 'aux1926' direct represents '0' with '7736'
c Var 'aux1926' order represents '1' with '7737'
-7736 7737 0
c Var 'aux1926' direct represents '1' with '7738'
7736 -7737 7738 0
-7738 7737 0
-7738 -7736 0
c Var 'aux1926' direct represents '2' with '-7737'
7736 7738 -7737 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '7739'
c Var 'aux1927' direct represents '0' with '7739'
c Var 'aux1927' order represents '1' with '7740'
-7739 7740 0
c Var 'aux1927' direct represents '1' with '7741'
7739 -7740 7741 0
-7741 7740 0
-7741 -7739 0
c Var 'aux1927' direct represents '2' with '-7740'
7739 7741 -7740 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '7742'
c Var 'aux1928' direct represents '0' with '7742'
c Var 'aux1928' order represents '1' with '7743'
-7742 7743 0
c Var 'aux1928' direct represents '1' with '7744'
7742 -7743 7744 0
-7744 7743 0
-7744 -7742 0
c Var 'aux1928' direct represents '2' with '-7743'
7742 7744 -7743 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '7745'
c Var 'aux1929' direct represents '0' with '7745'
c Var 'aux1929' order represents '1' with '7746'
-7745 7746 0
c Var 'aux1929' direct represents '1' with '7747'
7745 -7746 7747 0
-7747 7746 0
-7747 -7745 0
c Var 'aux1929' direct represents '2' with '-7746'
7745 7747 -7746 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '7748'
c Var 'aux1930' direct represents '0' with '7748'
c Var 'aux1930' order represents '1' with '7749'
-7748 7749 0
c Var 'aux1930' direct represents '1' with '7750'
7748 -7749 7750 0
-7750 7749 0
-7750 -7748 0
c Var 'aux1930' direct represents '2' with '-7749'
7748 7750 -7749 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '7751'
c Var 'aux1931' direct represents '0' with '7751'
c Var 'aux1931' order represents '1' with '7752'
-7751 7752 0
c Var 'aux1931' direct represents '1' with '7753'
7751 -7752 7753 0
-7753 7752 0
-7753 -7751 0
c Var 'aux1931' direct represents '2' with '-7752'
7751 7753 -7752 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '7754'
c Var 'aux1932' direct represents '0' with '7754'
c Var 'aux1932' order represents '1' with '7755'
-7754 7755 0
c Var 'aux1932' direct represents '1' with '7756'
7754 -7755 7756 0
-7756 7755 0
-7756 -7754 0
c Var 'aux1932' direct represents '2' with '-7755'
7754 7756 -7755 0
c Encoding variable: aux1933 with domain: bool (representing constraint ((x_00002_00001 + x_00003_00001 + x_00001_00001)<=13))
c Var 'aux1933' direct represents '0' with '-7757'
c Var 'aux1933' direct represents '1' with '7757'
c Var 'aux1933' order represents '1' with '1'
c Var 'aux1933' order represents '0' with '-7757'
c Encoding variable: aux1934 with domain: bool (representing constraint (13<=(x_00002_00001 + x_00003_00001 + x_00001_00001)))
c Var 'aux1934' direct represents '0' with '-7758'
c Var 'aux1934' direct represents '1' with '7758'
c Var 'aux1934' order represents '1' with '1'
c Var 'aux1934' order represents '0' with '-7758'
c Encoding variable: aux1935 with domain: bool (representing constraint ((x_00001_00002 + x_00001_00003)<=9))
c Var 'aux1935' direct represents '0' with '-7759'
c Var 'aux1935' direct represents '1' with '7759'
c Var 'aux1935' order represents '1' with '1'
c Var 'aux1935' order represents '0' with '-7759'
c Encoding variable: aux1936 with domain: bool (representing constraint (9<=(x_00001_00002 + x_00001_00003)))
c Var 'aux1936' direct represents '0' with '-7760'
c Var 'aux1936' direct represents '1' with '7760'
c Var 'aux1936' order represents '1' with '1'
c Var 'aux1936' order represents '0' with '-7760'
c Encoding variable: aux1937 with domain: bool (representing constraint ((x_00001_00004 + x_00001_00005 + x_00001_00006)<=15))
c Var 'aux1937' direct represents '0' with '-7761'
c Var 'aux1937' direct represents '1' with '7761'
c Var 'aux1937' order represents '1' with '1'
c Var 'aux1937' order represents '0' with '-7761'
c Encoding variable: aux1938 with domain: bool (representing constraint (15<=(x_00001_00004 + x_00001_00005 + x_00001_00006)))
c Var 'aux1938' direct represents '0' with '-7762'
c Var 'aux1938' direct represents '1' with '7762'
c Var 'aux1938' order represents '1' with '1'
c Var 'aux1938' order represents '0' with '-7762'
c Encoding variable: aux1939 with domain: bool (representing constraint ((x_00002_00006 + x_00002_00007 + x_00001_00007)<=13))
c Var 'aux1939' direct represents '0' with '-7763'
c Var 'aux1939' direct represents '1' with '7763'
c Var 'aux1939' order represents '1' with '1'
c Var 'aux1939' order represents '0' with '-7763'
c Encoding variable: aux1940 with domain: bool (representing constraint (13<=(x_00002_00006 + x_00002_00007 + x_00001_00007)))
c Var 'aux1940' direct represents '0' with '-7764'
c Var 'aux1940' direct represents '1' with '7764'
c Var 'aux1940' order represents '1' with '1'
c Var 'aux1940' order represents '0' with '-7764'
c Encoding variable: aux1941 with domain: bool (representing constraint ((aux445 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1))<=21))
c Var 'aux1941' direct represents '0' with '-7765'
c Var 'aux1941' direct represents '1' with '7765'
c Var 'aux1941' order represents '1' with '1'
c Var 'aux1941' order represents '0' with '-7765'
c Encoding variable: aux1942 with domain: bool (representing constraint (21<=(aux445 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1))))
c Var 'aux1942' direct represents '0' with '-7766'
c Var 'aux1942' direct represents '1' with '7766'
c Var 'aux1942' order represents '1' with '1'
c Var 'aux1942' order represents '0' with '-7766'
c Encoding variable: aux1943 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003)<=13))
c Var 'aux1943' direct represents '0' with '-7767'
c Var 'aux1943' direct represents '1' with '7767'
c Var 'aux1943' order represents '1' with '1'
c Var 'aux1943' order represents '0' with '-7767'
c Encoding variable: aux1944 with domain: bool (representing constraint (13<=(x_00002_00002 + x_00002_00003)))
c Var 'aux1944' direct represents '0' with '-7768'
c Var 'aux1944' direct represents '1' with '7768'
c Var 'aux1944' order represents '1' with '1'
c Var 'aux1944' order represents '0' with '-7768'
c Encoding variable: aux1945 with domain: bool (representing constraint ((x_00002_00004 + x_00002_00005)<=8))
c Var 'aux1945' direct represents '0' with '-7769'
c Var 'aux1945' direct represents '1' with '7769'
c Var 'aux1945' order represents '1' with '1'
c Var 'aux1945' order represents '0' with '-7769'
c Encoding variable: aux1946 with domain: bool (representing constraint (8<=(x_00002_00004 + x_00002_00005)))
c Var 'aux1946' direct represents '0' with '-7770'
c Var 'aux1946' direct represents '1' with '7770'
c Var 'aux1946' order represents '1' with '1'
c Var 'aux1946' order represents '0' with '-7770'
c Encoding variable: aux1947 with domain: bool (representing constraint ((x_00003_00003 + x_00004_00003 + x_00005_00003)<=17))
c Var 'aux1947' direct represents '0' with '-7771'
c Var 'aux1947' direct represents '1' with '7771'
c Var 'aux1947' order represents '1' with '1'
c Var 'aux1947' order represents '0' with '-7771'
c Encoding variable: aux1948 with domain: bool (representing constraint (17<=(x_00003_00003 + x_00004_00003 + x_00005_00003)))
c Var 'aux1948' direct represents '0' with '-7772'
c Var 'aux1948' direct represents '1' with '7772'
c Var 'aux1948' order represents '1' with '1'
c Var 'aux1948' order represents '0' with '-7772'
c Encoding variable: aux1949 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)<=11))
c Var 'aux1949' direct represents '0' with '-7773'
c Var 'aux1949' direct represents '1' with '7773'
c Var 'aux1949' order represents '1' with '1'
c Var 'aux1949' order represents '0' with '-7773'
c Encoding variable: aux1950 with domain: bool (representing constraint (11<=(x_00003_00005 + x_00003_00006)))
c Var 'aux1950' direct represents '0' with '-7774'
c Var 'aux1950' direct represents '1' with '7774'
c Var 'aux1950' order represents '1' with '1'
c Var 'aux1950' order represents '0' with '-7774'
c Encoding variable: aux1951 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008)<=9))
c Var 'aux1951' direct represents '0' with '-7775'
c Var 'aux1951' direct represents '1' with '7775'
c Var 'aux1951' order represents '1' with '1'
c Var 'aux1951' order represents '0' with '-7775'
c Encoding variable: aux1952 with domain: bool (representing constraint (9<=(x_00003_00007 + x_00003_00008)))
c Var 'aux1952' direct represents '0' with '-7776'
c Var 'aux1952' direct represents '1' with '7776'
c Var 'aux1952' order represents '1' with '1'
c Var 'aux1952' order represents '0' with '-7776'
c Encoding variable: aux1953 with domain: bool (representing constraint ((x_00003_00009 + x_00004_00009)<=10))
c Var 'aux1953' direct represents '0' with '-7777'
c Var 'aux1953' direct represents '1' with '7777'
c Var 'aux1953' order represents '1' with '1'
c Var 'aux1953' order represents '0' with '-7777'
c Encoding variable: aux1954 with domain: bool (representing constraint (10<=(x_00003_00009 + x_00004_00009)))
c Var 'aux1954' direct represents '0' with '-7778'
c Var 'aux1954' direct represents '1' with '7778'
c Var 'aux1954' order represents '1' with '1'
c Var 'aux1954' order represents '0' with '-7778'
c Encoding variable: aux1955 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00005_00001)<=17))
c Var 'aux1955' direct represents '0' with '-7779'
c Var 'aux1955' direct represents '1' with '7779'
c Var 'aux1955' order represents '1' with '1'
c Var 'aux1955' order represents '0' with '-7779'
c Encoding variable: aux1956 with domain: bool (representing constraint (17<=(x_00004_00001 + x_00004_00002 + x_00005_00001)))
c Var 'aux1956' direct represents '0' with '-7780'
c Var 'aux1956' direct represents '1' with '7780'
c Var 'aux1956' order represents '1' with '1'
c Var 'aux1956' order represents '0' with '-7780'
c Encoding variable: aux1957 with domain: bool (representing constraint ((aux446 + shift(x_00005_00004, -1) + shift(x_00004_00005, -1))<=24))
c Var 'aux1957' direct represents '0' with '-7781'
c Var 'aux1957' direct represents '1' with '7781'
c Var 'aux1957' order represents '1' with '1'
c Var 'aux1957' order represents '0' with '-7781'
c Encoding variable: aux1958 with domain: bool (representing constraint (24<=(aux446 + shift(x_00005_00004, -1) + shift(x_00004_00005, -1))))
c Var 'aux1958' direct represents '0' with '-7782'
c Var 'aux1958' direct represents '1' with '7782'
c Var 'aux1958' order represents '1' with '1'
c Var 'aux1958' order represents '0' with '-7782'
c Encoding variable: aux1959 with domain: bool (representing constraint ((aux447 + shift(x_00005_00006, -1) + shift(x_00004_00007, -1))<=12))
c Var 'aux1959' direct represents '0' with '-7783'
c Var 'aux1959' direct represents '1' with '7783'
c Var 'aux1959' order represents '1' with '1'
c Var 'aux1959' order represents '0' with '-7783'
c Encoding variable: aux1960 with domain: bool (representing constraint (12<=(aux447 + shift(x_00005_00006, -1) + shift(x_00004_00007, -1))))
c Var 'aux1960' direct represents '0' with '-7784'
c Var 'aux1960' direct represents '1' with '7784'
c Var 'aux1960' order represents '1' with '1'
c Var 'aux1960' order represents '0' with '-7784'
c Encoding variable: aux1961 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008 + x_00005_00009)<=10))
c Var 'aux1961' direct represents '0' with '-7785'
c Var 'aux1961' direct represents '1' with '7785'
c Var 'aux1961' order represents '1' with '1'
c Var 'aux1961' order represents '0' with '-7785'
c Encoding variable: aux1962 with domain: bool (representing constraint (10<=(x_00004_00008 + x_00005_00008 + x_00005_00009)))
c Var 'aux1962' direct represents '0' with '-7786'
c Var 'aux1962' direct represents '1' with '7786'
c Var 'aux1962' order represents '1' with '1'
c Var 'aux1962' order represents '0' with '-7786'
c Encoding variable: aux1963 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002 + x_00006_00003)<=13))
c Var 'aux1963' direct represents '0' with '-7787'
c Var 'aux1963' direct represents '1' with '7787'
c Var 'aux1963' order represents '1' with '1'
c Var 'aux1963' order represents '0' with '-7787'
c Encoding variable: aux1964 with domain: bool (representing constraint (13<=(x_00005_00002 + x_00006_00002 + x_00006_00003)))
c Var 'aux1964' direct represents '0' with '-7788'
c Var 'aux1964' direct represents '1' with '7788'
c Var 'aux1964' order represents '1' with '1'
c Var 'aux1964' order represents '0' with '-7788'
c Encoding variable: aux1965 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00006_00001)<=24))
c Var 'aux1965' direct represents '0' with '-7789'
c Var 'aux1965' direct represents '1' with '7789'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-7789'
c Encoding variable: aux1966 with domain: bool (representing constraint (24<=(x_00007_00001 + x_00007_00002 + x_00006_00001)))
c Var 'aux1966' direct represents '0' with '-7790'
c Var 'aux1966' direct represents '1' with '7790'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-7790'
c Encoding variable: aux1967 with domain: bool (representing constraint ((x_00006_00004 + x_00006_00005 + x_00006_00006)<=10))
c Var 'aux1967' direct represents '0' with '-7791'
c Var 'aux1967' direct represents '1' with '7791'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-7791'
c Encoding variable: aux1968 with domain: bool (representing constraint (10<=(x_00006_00004 + x_00006_00005 + x_00006_00006)))
c Var 'aux1968' direct represents '0' with '-7792'
c Var 'aux1968' direct represents '1' with '7792'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-7792'
c Encoding variable: aux1969 with domain: bool (representing constraint ((x_00007_00007 + x_00006_00007 + x_00006_00008)<=23))
c Var 'aux1969' direct represents '0' with '-7793'
c Var 'aux1969' direct represents '1' with '7793'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-7793'
c Encoding variable: aux1970 with domain: bool (representing constraint (23<=(x_00007_00007 + x_00006_00007 + x_00006_00008)))
c Var 'aux1970' direct represents '0' with '-7794'
c Var 'aux1970' direct represents '1' with '7794'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-7794'
c Encoding variable: aux1971 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009 + x_00006_00009)<=17))
c Var 'aux1971' direct represents '0' with '-7795'
c Var 'aux1971' direct represents '1' with '7795'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-7795'
c Encoding variable: aux1972 with domain: bool (representing constraint (17<=(x_00007_00008 + x_00007_00009 + x_00006_00009)))
c Var 'aux1972' direct represents '0' with '-7796'
c Var 'aux1972' direct represents '1' with '7796'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-7796'
c Encoding variable: aux1973 with domain: bool (representing constraint ((x_00007_00003 + x_00007_00004)<=5))
c Var 'aux1973' direct represents '0' with '-7797'
c Var 'aux1973' direct represents '1' with '7797'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-7797'
c Encoding variable: aux1974 with domain: bool (representing constraint (5<=(x_00007_00003 + x_00007_00004)))
c Var 'aux1974' direct represents '0' with '-7798'
c Var 'aux1974' direct represents '1' with '7798'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-7798'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00007_00005 + x_00007_00006)<=6))
c Var 'aux1975' direct represents '0' with '-7799'
c Var 'aux1975' direct represents '1' with '7799'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-7799'
c Encoding variable: aux1976 with domain: bool (representing constraint (6<=(x_00007_00005 + x_00007_00006)))
c Var 'aux1976' direct represents '0' with '-7800'
c Var 'aux1976' direct represents '1' with '7800'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-7800'
c Encoding variable: aux1977 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00009_00001)<=13))
c Var 'aux1977' direct represents '0' with '-7801'
c Var 'aux1977' direct represents '1' with '7801'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-7801'
c Encoding variable: aux1978 with domain: bool (representing constraint (13<=(x_00008_00001 + x_00008_00002 + x_00009_00001)))
c Var 'aux1978' direct represents '0' with '-7802'
c Var 'aux1978' direct represents '1' with '7802'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-7802'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004 + x_00009_00004)<=23))
c Var 'aux1979' direct represents '0' with '-7803'
c Var 'aux1979' direct represents '1' with '7803'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-7803'
c Encoding variable: aux1980 with domain: bool (representing constraint (23<=(x_00008_00003 + x_00008_00004 + x_00009_00004)))
c Var 'aux1980' direct represents '0' with '-7804'
c Var 'aux1980' direct represents '1' with '7804'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-7804'
c Encoding variable: aux1981 with domain: bool (representing constraint ((x_00008_00005 + x_00009_00005)<=10))
c Var 'aux1981' direct represents '0' with '-7805'
c Var 'aux1981' direct represents '1' with '7805'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-7805'
c Encoding variable: aux1982 with domain: bool (representing constraint (10<=(x_00008_00005 + x_00009_00005)))
c Var 'aux1982' direct represents '0' with '-7806'
c Var 'aux1982' direct represents '1' with '7806'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-7806'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00008_00006 + x_00009_00006 + x_00009_00007)<=18))
c Var 'aux1983' direct represents '0' with '-7807'
c Var 'aux1983' direct represents '1' with '7807'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-7807'
c Encoding variable: aux1984 with domain: bool (representing constraint (18<=(x_00008_00006 + x_00009_00006 + x_00009_00007)))
c Var 'aux1984' direct represents '0' with '-7808'
c Var 'aux1984' direct represents '1' with '7808'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-7808'
c Encoding variable: aux1985 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008 + x_00009_00008)<=10))
c Var 'aux1985' direct represents '0' with '-7809'
c Var 'aux1985' direct represents '1' with '7809'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-7809'
c Encoding variable: aux1986 with domain: bool (representing constraint (10<=(x_00008_00007 + x_00008_00008 + x_00009_00008)))
c Var 'aux1986' direct represents '0' with '-7810'
c Var 'aux1986' direct represents '1' with '7810'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-7810'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00009)<=9))
c Var 'aux1987' direct represents '0' with '-7811'
c Var 'aux1987' direct represents '1' with '7811'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-7811'
c Encoding variable: aux1988 with domain: bool (representing constraint (9<=(x_00008_00009 + x_00009_00009)))
c Var 'aux1988' direct represents '0' with '-7812'
c Var 'aux1988' direct represents '1' with '7812'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-7812'
c Encoding variable: aux1989 with domain: bool (representing constraint ((x_00009_00002 + x_00009_00003)<=7))
c Var 'aux1989' direct represents '0' with '-7813'
c Var 'aux1989' direct represents '1' with '7813'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-7813'
c Encoding variable: aux1990 with domain: bool (representing constraint (7<=(x_00009_00002 + x_00009_00003)))
c Var 'aux1990' direct represents '0' with '-7814'
c Var 'aux1990' direct represents '1' with '7814'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-7814'
c Encoding variable: aux1991 with domain: bool (representing constraint ((aux449 + aux452 + aux453)<=1))
c Var 'aux1991' direct represents '0' with '-7815'
c Var 'aux1991' direct represents '1' with '7815'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-7815'
c Encoding variable: aux1992 with domain: bool (representing constraint (1<=(aux449 + aux452 + aux453)))
c Var 'aux1992' direct represents '0' with '-7816'
c Var 'aux1992' direct represents '1' with '7816'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-7816'
c Encoding variable: aux1993 with domain: bool (representing constraint ((aux455 + aux458 + aux459)<=1))
c Var 'aux1993' direct represents '0' with '-7817'
c Var 'aux1993' direct represents '1' with '7817'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-7817'
c Encoding variable: aux1994 with domain: bool (representing constraint (1<=(aux455 + aux458 + aux459)))
c Var 'aux1994' direct represents '0' with '-7818'
c Var 'aux1994' direct represents '1' with '7818'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-7818'
c Encoding variable: aux1995 with domain: bool (representing constraint ((aux461 + aux464 + aux465)<=1))
c Var 'aux1995' direct represents '0' with '-7819'
c Var 'aux1995' direct represents '1' with '7819'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-7819'
c Encoding variable: aux1996 with domain: bool (representing constraint (1<=(aux461 + aux464 + aux465)))
c Var 'aux1996' direct represents '0' with '-7820'
c Var 'aux1996' direct represents '1' with '7820'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-7820'
c Encoding variable: aux1997 with domain: bool (representing constraint ((aux467 + aux470 + aux471)<=1))
c Var 'aux1997' direct represents '0' with '-7821'
c Var 'aux1997' direct represents '1' with '7821'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-7821'
c Encoding variable: aux1998 with domain: bool (representing constraint (1<=(aux467 + aux470 + aux471)))
c Var 'aux1998' direct represents '0' with '-7822'
c Var 'aux1998' direct represents '1' with '7822'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-7822'
c Encoding variable: aux1999 with domain: bool (representing constraint ((aux473 + aux476 + aux477)<=1))
c Var 'aux1999' direct represents '0' with '-7823'
c Var 'aux1999' direct represents '1' with '7823'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-7823'
c Encoding variable: aux2000 with domain: bool (representing constraint (1<=(aux473 + aux476 + aux477)))
c Var 'aux2000' direct represents '0' with '-7824'
c Var 'aux2000' direct represents '1' with '7824'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-7824'
c Encoding variable: aux2001 with domain: bool (representing constraint ((aux479 + aux482 + aux483)<=1))
c Var 'aux2001' direct represents '0' with '-7825'
c Var 'aux2001' direct represents '1' with '7825'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-7825'
c Encoding variable: aux2002 with domain: bool (representing constraint (1<=(aux479 + aux482 + aux483)))
c Var 'aux2002' direct represents '0' with '-7826'
c Var 'aux2002' direct represents '1' with '7826'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-7826'
c Encoding variable: aux2003 with domain: bool (representing constraint ((aux485 + aux488 + aux489)<=1))
c Var 'aux2003' direct represents '0' with '-7827'
c Var 'aux2003' direct represents '1' with '7827'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-7827'
c Encoding variable: aux2004 with domain: bool (representing constraint (1<=(aux485 + aux488 + aux489)))
c Var 'aux2004' direct represents '0' with '-7828'
c Var 'aux2004' direct represents '1' with '7828'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-7828'
c Encoding variable: aux2005 with domain: bool (representing constraint ((aux491 + aux494 + aux495)<=1))
c Var 'aux2005' direct represents '0' with '-7829'
c Var 'aux2005' direct represents '1' with '7829'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-7829'
c Encoding variable: aux2006 with domain: bool (representing constraint (1<=(aux491 + aux494 + aux495)))
c Var 'aux2006' direct represents '0' with '-7830'
c Var 'aux2006' direct represents '1' with '7830'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-7830'
c Encoding variable: aux2007 with domain: bool (representing constraint ((aux497 + aux500 + aux501)<=1))
c Var 'aux2007' direct represents '0' with '-7831'
c Var 'aux2007' direct represents '1' with '7831'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-7831'
c Encoding variable: aux2008 with domain: bool (representing constraint (1<=(aux497 + aux500 + aux501)))
c Var 'aux2008' direct represents '0' with '-7832'
c Var 'aux2008' direct represents '1' with '7832'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-7832'
c Encoding variable: aux2009 with domain: bool (representing constraint ((aux503 + aux506 + aux507)<=1))
c Var 'aux2009' direct represents '0' with '-7833'
c Var 'aux2009' direct represents '1' with '7833'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-7833'
c Encoding variable: aux2010 with domain: bool (representing constraint (1<=(aux503 + aux506 + aux507)))
c Var 'aux2010' direct represents '0' with '-7834'
c Var 'aux2010' direct represents '1' with '7834'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-7834'
c Encoding variable: aux2011 with domain: bool (representing constraint ((aux509 + aux512 + aux513)<=1))
c Var 'aux2011' direct represents '0' with '-7835'
c Var 'aux2011' direct represents '1' with '7835'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-7835'
c Encoding variable: aux2012 with domain: bool (representing constraint (1<=(aux509 + aux512 + aux513)))
c Var 'aux2012' direct represents '0' with '-7836'
c Var 'aux2012' direct represents '1' with '7836'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-7836'
c Encoding variable: aux2013 with domain: bool (representing constraint ((aux515 + aux518 + aux519)<=1))
c Var 'aux2013' direct represents '0' with '-7837'
c Var 'aux2013' direct represents '1' with '7837'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-7837'
c Encoding variable: aux2014 with domain: bool (representing constraint (1<=(aux515 + aux518 + aux519)))
c Var 'aux2014' direct represents '0' with '-7838'
c Var 'aux2014' direct represents '1' with '7838'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-7838'
c Encoding variable: aux2015 with domain: bool (representing constraint ((aux521 + aux524 + aux525)<=1))
c Var 'aux2015' direct represents '0' with '-7839'
c Var 'aux2015' direct represents '1' with '7839'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-7839'
c Encoding variable: aux2016 with domain: bool (representing constraint (1<=(aux521 + aux524 + aux525)))
c Var 'aux2016' direct represents '0' with '-7840'
c Var 'aux2016' direct represents '1' with '7840'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-7840'
c Encoding variable: aux2017 with domain: bool (representing constraint ((aux527 + aux530 + aux531)<=1))
c Var 'aux2017' direct represents '0' with '-7841'
c Var 'aux2017' direct represents '1' with '7841'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-7841'
c Encoding variable: aux2018 with domain: bool (representing constraint (1<=(aux527 + aux530 + aux531)))
c Var 'aux2018' direct represents '0' with '-7842'
c Var 'aux2018' direct represents '1' with '7842'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-7842'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux533 + aux536 + aux537)<=1))
c Var 'aux2019' direct represents '0' with '-7843'
c Var 'aux2019' direct represents '1' with '7843'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-7843'
c Encoding variable: aux2020 with domain: bool (representing constraint (1<=(aux533 + aux536 + aux537)))
c Var 'aux2020' direct represents '0' with '-7844'
c Var 'aux2020' direct represents '1' with '7844'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-7844'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux539 + aux542 + aux543)<=1))
c Var 'aux2021' direct represents '0' with '-7845'
c Var 'aux2021' direct represents '1' with '7845'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-7845'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux539 + aux542 + aux543)))
c Var 'aux2022' direct represents '0' with '-7846'
c Var 'aux2022' direct represents '1' with '7846'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-7846'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux545 + aux548 + aux549)<=1))
c Var 'aux2023' direct represents '0' with '-7847'
c Var 'aux2023' direct represents '1' with '7847'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-7847'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux545 + aux548 + aux549)))
c Var 'aux2024' direct represents '0' with '-7848'
c Var 'aux2024' direct represents '1' with '7848'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-7848'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux551 + aux554 + aux555)<=1))
c Var 'aux2025' direct represents '0' with '-7849'
c Var 'aux2025' direct represents '1' with '7849'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-7849'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux551 + aux554 + aux555)))
c Var 'aux2026' direct represents '0' with '-7850'
c Var 'aux2026' direct represents '1' with '7850'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-7850'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux557 + aux560 + aux561)<=1))
c Var 'aux2027' direct represents '0' with '-7851'
c Var 'aux2027' direct represents '1' with '7851'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-7851'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux557 + aux560 + aux561)))
c Var 'aux2028' direct represents '0' with '-7852'
c Var 'aux2028' direct represents '1' with '7852'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-7852'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux563 + aux566 + aux567)<=1))
c Var 'aux2029' direct represents '0' with '-7853'
c Var 'aux2029' direct represents '1' with '7853'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-7853'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux563 + aux566 + aux567)))
c Var 'aux2030' direct represents '0' with '-7854'
c Var 'aux2030' direct represents '1' with '7854'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-7854'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux569 + aux572 + aux573)<=1))
c Var 'aux2031' direct represents '0' with '-7855'
c Var 'aux2031' direct represents '1' with '7855'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-7855'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux569 + aux572 + aux573)))
c Var 'aux2032' direct represents '0' with '-7856'
c Var 'aux2032' direct represents '1' with '7856'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-7856'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux575 + aux578 + aux579)<=1))
c Var 'aux2033' direct represents '0' with '-7857'
c Var 'aux2033' direct represents '1' with '7857'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-7857'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux575 + aux578 + aux579)))
c Var 'aux2034' direct represents '0' with '-7858'
c Var 'aux2034' direct represents '1' with '7858'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-7858'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux581 + aux584 + aux585)<=1))
c Var 'aux2035' direct represents '0' with '-7859'
c Var 'aux2035' direct represents '1' with '7859'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-7859'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux581 + aux584 + aux585)))
c Var 'aux2036' direct represents '0' with '-7860'
c Var 'aux2036' direct represents '1' with '7860'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-7860'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux587 + aux590 + aux591)<=1))
c Var 'aux2037' direct represents '0' with '-7861'
c Var 'aux2037' direct represents '1' with '7861'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-7861'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux587 + aux590 + aux591)))
c Var 'aux2038' direct represents '0' with '-7862'
c Var 'aux2038' direct represents '1' with '7862'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-7862'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux593 + aux596 + aux597)<=1))
c Var 'aux2039' direct represents '0' with '-7863'
c Var 'aux2039' direct represents '1' with '7863'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-7863'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux593 + aux596 + aux597)))
c Var 'aux2040' direct represents '0' with '-7864'
c Var 'aux2040' direct represents '1' with '7864'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-7864'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux599 + aux602 + aux603)<=1))
c Var 'aux2041' direct represents '0' with '-7865'
c Var 'aux2041' direct represents '1' with '7865'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-7865'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux599 + aux602 + aux603)))
c Var 'aux2042' direct represents '0' with '-7866'
c Var 'aux2042' direct represents '1' with '7866'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-7866'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux605 + aux608 + aux609)<=1))
c Var 'aux2043' direct represents '0' with '-7867'
c Var 'aux2043' direct represents '1' with '7867'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-7867'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux605 + aux608 + aux609)))
c Var 'aux2044' direct represents '0' with '-7868'
c Var 'aux2044' direct represents '1' with '7868'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-7868'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux611 + aux614 + aux615)<=1))
c Var 'aux2045' direct represents '0' with '-7869'
c Var 'aux2045' direct represents '1' with '7869'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-7869'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux611 + aux614 + aux615)))
c Var 'aux2046' direct represents '0' with '-7870'
c Var 'aux2046' direct represents '1' with '7870'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-7870'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux617 + aux620 + aux621)<=1))
c Var 'aux2047' direct represents '0' with '-7871'
c Var 'aux2047' direct represents '1' with '7871'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-7871'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux617 + aux620 + aux621)))
c Var 'aux2048' direct represents '0' with '-7872'
c Var 'aux2048' direct represents '1' with '7872'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-7872'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux623 + aux626 + aux627)<=1))
c Var 'aux2049' direct represents '0' with '-7873'
c Var 'aux2049' direct represents '1' with '7873'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-7873'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux623 + aux626 + aux627)))
c Var 'aux2050' direct represents '0' with '-7874'
c Var 'aux2050' direct represents '1' with '7874'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-7874'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux629 + aux632 + aux633)<=1))
c Var 'aux2051' direct represents '0' with '-7875'
c Var 'aux2051' direct represents '1' with '7875'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-7875'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux629 + aux632 + aux633)))
c Var 'aux2052' direct represents '0' with '-7876'
c Var 'aux2052' direct represents '1' with '7876'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-7876'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux635 + aux638 + aux639)<=1))
c Var 'aux2053' direct represents '0' with '-7877'
c Var 'aux2053' direct represents '1' with '7877'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-7877'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux635 + aux638 + aux639)))
c Var 'aux2054' direct represents '0' with '-7878'
c Var 'aux2054' direct represents '1' with '7878'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-7878'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux641 + aux644 + aux645)<=1))
c Var 'aux2055' direct represents '0' with '-7879'
c Var 'aux2055' direct represents '1' with '7879'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-7879'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux641 + aux644 + aux645)))
c Var 'aux2056' direct represents '0' with '-7880'
c Var 'aux2056' direct represents '1' with '7880'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-7880'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux647 + aux650 + aux651)<=1))
c Var 'aux2057' direct represents '0' with '-7881'
c Var 'aux2057' direct represents '1' with '7881'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-7881'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux647 + aux650 + aux651)))
c Var 'aux2058' direct represents '0' with '-7882'
c Var 'aux2058' direct represents '1' with '7882'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-7882'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux653 + aux656 + aux657)<=1))
c Var 'aux2059' direct represents '0' with '-7883'
c Var 'aux2059' direct represents '1' with '7883'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-7883'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux653 + aux656 + aux657)))
c Var 'aux2060' direct represents '0' with '-7884'
c Var 'aux2060' direct represents '1' with '7884'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-7884'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux659 + aux662 + aux663)<=1))
c Var 'aux2061' direct represents '0' with '-7885'
c Var 'aux2061' direct represents '1' with '7885'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-7885'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux659 + aux662 + aux663)))
c Var 'aux2062' direct represents '0' with '-7886'
c Var 'aux2062' direct represents '1' with '7886'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-7886'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux665 + aux668 + aux669)<=1))
c Var 'aux2063' direct represents '0' with '-7887'
c Var 'aux2063' direct represents '1' with '7887'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-7887'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux665 + aux668 + aux669)))
c Var 'aux2064' direct represents '0' with '-7888'
c Var 'aux2064' direct represents '1' with '7888'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-7888'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux671 + aux674 + aux675)<=1))
c Var 'aux2065' direct represents '0' with '-7889'
c Var 'aux2065' direct represents '1' with '7889'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-7889'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux671 + aux674 + aux675)))
c Var 'aux2066' direct represents '0' with '-7890'
c Var 'aux2066' direct represents '1' with '7890'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-7890'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux677 + aux680 + aux681)<=1))
c Var 'aux2067' direct represents '0' with '-7891'
c Var 'aux2067' direct represents '1' with '7891'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-7891'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux677 + aux680 + aux681)))
c Var 'aux2068' direct represents '0' with '-7892'
c Var 'aux2068' direct represents '1' with '7892'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-7892'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux683 + aux686 + aux687)<=1))
c Var 'aux2069' direct represents '0' with '-7893'
c Var 'aux2069' direct represents '1' with '7893'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-7893'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux683 + aux686 + aux687)))
c Var 'aux2070' direct represents '0' with '-7894'
c Var 'aux2070' direct represents '1' with '7894'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-7894'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux689 + aux692 + aux693)<=1))
c Var 'aux2071' direct represents '0' with '-7895'
c Var 'aux2071' direct represents '1' with '7895'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-7895'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux689 + aux692 + aux693)))
c Var 'aux2072' direct represents '0' with '-7896'
c Var 'aux2072' direct represents '1' with '7896'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-7896'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux695 + aux698 + aux699)<=1))
c Var 'aux2073' direct represents '0' with '-7897'
c Var 'aux2073' direct represents '1' with '7897'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-7897'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux695 + aux698 + aux699)))
c Var 'aux2074' direct represents '0' with '-7898'
c Var 'aux2074' direct represents '1' with '7898'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-7898'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux701 + aux704 + aux705)<=1))
c Var 'aux2075' direct represents '0' with '-7899'
c Var 'aux2075' direct represents '1' with '7899'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-7899'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux701 + aux704 + aux705)))
c Var 'aux2076' direct represents '0' with '-7900'
c Var 'aux2076' direct represents '1' with '7900'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-7900'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux707 + aux710 + aux711)<=1))
c Var 'aux2077' direct represents '0' with '-7901'
c Var 'aux2077' direct represents '1' with '7901'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-7901'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux707 + aux710 + aux711)))
c Var 'aux2078' direct represents '0' with '-7902'
c Var 'aux2078' direct represents '1' with '7902'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-7902'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux713 + aux716 + aux717)<=1))
c Var 'aux2079' direct represents '0' with '-7903'
c Var 'aux2079' direct represents '1' with '7903'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-7903'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux713 + aux716 + aux717)))
c Var 'aux2080' direct represents '0' with '-7904'
c Var 'aux2080' direct represents '1' with '7904'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-7904'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux719 + aux722 + aux723)<=1))
c Var 'aux2081' direct represents '0' with '-7905'
c Var 'aux2081' direct represents '1' with '7905'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-7905'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux719 + aux722 + aux723)))
c Var 'aux2082' direct represents '0' with '-7906'
c Var 'aux2082' direct represents '1' with '7906'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-7906'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux725 + aux728 + aux729)<=1))
c Var 'aux2083' direct represents '0' with '-7907'
c Var 'aux2083' direct represents '1' with '7907'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-7907'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux725 + aux728 + aux729)))
c Var 'aux2084' direct represents '0' with '-7908'
c Var 'aux2084' direct represents '1' with '7908'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-7908'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux731 + aux734 + aux735)<=1))
c Var 'aux2085' direct represents '0' with '-7909'
c Var 'aux2085' direct represents '1' with '7909'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-7909'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux731 + aux734 + aux735)))
c Var 'aux2086' direct represents '0' with '-7910'
c Var 'aux2086' direct represents '1' with '7910'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-7910'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux737 + aux740 + aux741)<=1))
c Var 'aux2087' direct represents '0' with '-7911'
c Var 'aux2087' direct represents '1' with '7911'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-7911'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux737 + aux740 + aux741)))
c Var 'aux2088' direct represents '0' with '-7912'
c Var 'aux2088' direct represents '1' with '7912'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-7912'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux743 + aux746 + aux747)<=1))
c Var 'aux2089' direct represents '0' with '-7913'
c Var 'aux2089' direct represents '1' with '7913'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-7913'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux743 + aux746 + aux747)))
c Var 'aux2090' direct represents '0' with '-7914'
c Var 'aux2090' direct represents '1' with '7914'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-7914'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux749 + aux752 + aux753)<=1))
c Var 'aux2091' direct represents '0' with '-7915'
c Var 'aux2091' direct represents '1' with '7915'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-7915'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux749 + aux752 + aux753)))
c Var 'aux2092' direct represents '0' with '-7916'
c Var 'aux2092' direct represents '1' with '7916'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-7916'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux755 + aux758 + aux759)<=1))
c Var 'aux2093' direct represents '0' with '-7917'
c Var 'aux2093' direct represents '1' with '7917'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-7917'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux755 + aux758 + aux759)))
c Var 'aux2094' direct represents '0' with '-7918'
c Var 'aux2094' direct represents '1' with '7918'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-7918'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux761 + aux764 + aux765)<=1))
c Var 'aux2095' direct represents '0' with '-7919'
c Var 'aux2095' direct represents '1' with '7919'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-7919'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux761 + aux764 + aux765)))
c Var 'aux2096' direct represents '0' with '-7920'
c Var 'aux2096' direct represents '1' with '7920'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-7920'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux767 + aux770 + aux771)<=1))
c Var 'aux2097' direct represents '0' with '-7921'
c Var 'aux2097' direct represents '1' with '7921'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-7921'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux767 + aux770 + aux771)))
c Var 'aux2098' direct represents '0' with '-7922'
c Var 'aux2098' direct represents '1' with '7922'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-7922'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux773 + aux776 + aux777)<=1))
c Var 'aux2099' direct represents '0' with '-7923'
c Var 'aux2099' direct represents '1' with '7923'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-7923'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux773 + aux776 + aux777)))
c Var 'aux2100' direct represents '0' with '-7924'
c Var 'aux2100' direct represents '1' with '7924'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-7924'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux779 + aux782 + aux783)<=1))
c Var 'aux2101' direct represents '0' with '-7925'
c Var 'aux2101' direct represents '1' with '7925'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-7925'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux779 + aux782 + aux783)))
c Var 'aux2102' direct represents '0' with '-7926'
c Var 'aux2102' direct represents '1' with '7926'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-7926'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux785 + aux788 + aux789)<=1))
c Var 'aux2103' direct represents '0' with '-7927'
c Var 'aux2103' direct represents '1' with '7927'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-7927'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux785 + aux788 + aux789)))
c Var 'aux2104' direct represents '0' with '-7928'
c Var 'aux2104' direct represents '1' with '7928'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-7928'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux791 + aux794 + aux795)<=1))
c Var 'aux2105' direct represents '0' with '-7929'
c Var 'aux2105' direct represents '1' with '7929'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-7929'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux791 + aux794 + aux795)))
c Var 'aux2106' direct represents '0' with '-7930'
c Var 'aux2106' direct represents '1' with '7930'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-7930'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux797 + aux800 + aux801)<=1))
c Var 'aux2107' direct represents '0' with '-7931'
c Var 'aux2107' direct represents '1' with '7931'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-7931'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux797 + aux800 + aux801)))
c Var 'aux2108' direct represents '0' with '-7932'
c Var 'aux2108' direct represents '1' with '7932'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-7932'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux803 + aux806 + aux807)<=1))
c Var 'aux2109' direct represents '0' with '-7933'
c Var 'aux2109' direct represents '1' with '7933'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-7933'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux803 + aux806 + aux807)))
c Var 'aux2110' direct represents '0' with '-7934'
c Var 'aux2110' direct represents '1' with '7934'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-7934'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux809 + aux812 + aux813)<=1))
c Var 'aux2111' direct represents '0' with '-7935'
c Var 'aux2111' direct represents '1' with '7935'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-7935'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux809 + aux812 + aux813)))
c Var 'aux2112' direct represents '0' with '-7936'
c Var 'aux2112' direct represents '1' with '7936'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-7936'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux815 + aux818 + aux819)<=1))
c Var 'aux2113' direct represents '0' with '-7937'
c Var 'aux2113' direct represents '1' with '7937'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-7937'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux815 + aux818 + aux819)))
c Var 'aux2114' direct represents '0' with '-7938'
c Var 'aux2114' direct represents '1' with '7938'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-7938'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux821 + aux824 + aux825)<=1))
c Var 'aux2115' direct represents '0' with '-7939'
c Var 'aux2115' direct represents '1' with '7939'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-7939'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux821 + aux824 + aux825)))
c Var 'aux2116' direct represents '0' with '-7940'
c Var 'aux2116' direct represents '1' with '7940'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-7940'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux827 + aux830 + aux831)<=1))
c Var 'aux2117' direct represents '0' with '-7941'
c Var 'aux2117' direct represents '1' with '7941'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-7941'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux827 + aux830 + aux831)))
c Var 'aux2118' direct represents '0' with '-7942'
c Var 'aux2118' direct represents '1' with '7942'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-7942'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux833 + aux836 + aux837)<=1))
c Var 'aux2119' direct represents '0' with '-7943'
c Var 'aux2119' direct represents '1' with '7943'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-7943'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux833 + aux836 + aux837)))
c Var 'aux2120' direct represents '0' with '-7944'
c Var 'aux2120' direct represents '1' with '7944'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-7944'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux839 + aux842 + aux843)<=1))
c Var 'aux2121' direct represents '0' with '-7945'
c Var 'aux2121' direct represents '1' with '7945'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-7945'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux839 + aux842 + aux843)))
c Var 'aux2122' direct represents '0' with '-7946'
c Var 'aux2122' direct represents '1' with '7946'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-7946'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux845 + aux848 + aux849)<=1))
c Var 'aux2123' direct represents '0' with '-7947'
c Var 'aux2123' direct represents '1' with '7947'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-7947'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux845 + aux848 + aux849)))
c Var 'aux2124' direct represents '0' with '-7948'
c Var 'aux2124' direct represents '1' with '7948'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-7948'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux851 + aux854 + aux855)<=1))
c Var 'aux2125' direct represents '0' with '-7949'
c Var 'aux2125' direct represents '1' with '7949'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-7949'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux851 + aux854 + aux855)))
c Var 'aux2126' direct represents '0' with '-7950'
c Var 'aux2126' direct represents '1' with '7950'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-7950'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux857 + aux860 + aux861)<=1))
c Var 'aux2127' direct represents '0' with '-7951'
c Var 'aux2127' direct represents '1' with '7951'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-7951'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux857 + aux860 + aux861)))
c Var 'aux2128' direct represents '0' with '-7952'
c Var 'aux2128' direct represents '1' with '7952'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-7952'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux863 + aux866 + aux867)<=1))
c Var 'aux2129' direct represents '0' with '-7953'
c Var 'aux2129' direct represents '1' with '7953'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-7953'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux863 + aux866 + aux867)))
c Var 'aux2130' direct represents '0' with '-7954'
c Var 'aux2130' direct represents '1' with '7954'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-7954'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux869 + aux872 + aux873)<=1))
c Var 'aux2131' direct represents '0' with '-7955'
c Var 'aux2131' direct represents '1' with '7955'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-7955'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux869 + aux872 + aux873)))
c Var 'aux2132' direct represents '0' with '-7956'
c Var 'aux2132' direct represents '1' with '7956'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-7956'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux875 + aux878 + aux879)<=1))
c Var 'aux2133' direct represents '0' with '-7957'
c Var 'aux2133' direct represents '1' with '7957'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-7957'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux875 + aux878 + aux879)))
c Var 'aux2134' direct represents '0' with '-7958'
c Var 'aux2134' direct represents '1' with '7958'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-7958'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux881 + aux884 + aux885)<=1))
c Var 'aux2135' direct represents '0' with '-7959'
c Var 'aux2135' direct represents '1' with '7959'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-7959'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux881 + aux884 + aux885)))
c Var 'aux2136' direct represents '0' with '-7960'
c Var 'aux2136' direct represents '1' with '7960'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-7960'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux887 + aux890 + aux891)<=1))
c Var 'aux2137' direct represents '0' with '-7961'
c Var 'aux2137' direct represents '1' with '7961'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-7961'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux887 + aux890 + aux891)))
c Var 'aux2138' direct represents '0' with '-7962'
c Var 'aux2138' direct represents '1' with '7962'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-7962'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux893 + aux896 + aux897)<=1))
c Var 'aux2139' direct represents '0' with '-7963'
c Var 'aux2139' direct represents '1' with '7963'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-7963'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux893 + aux896 + aux897)))
c Var 'aux2140' direct represents '0' with '-7964'
c Var 'aux2140' direct represents '1' with '7964'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-7964'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux899 + aux902 + aux903)<=1))
c Var 'aux2141' direct represents '0' with '-7965'
c Var 'aux2141' direct represents '1' with '7965'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-7965'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux899 + aux902 + aux903)))
c Var 'aux2142' direct represents '0' with '-7966'
c Var 'aux2142' direct represents '1' with '7966'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-7966'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux905 + aux908 + aux909)<=1))
c Var 'aux2143' direct represents '0' with '-7967'
c Var 'aux2143' direct represents '1' with '7967'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-7967'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux905 + aux908 + aux909)))
c Var 'aux2144' direct represents '0' with '-7968'
c Var 'aux2144' direct represents '1' with '7968'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-7968'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux911 + aux914 + aux915)<=1))
c Var 'aux2145' direct represents '0' with '-7969'
c Var 'aux2145' direct represents '1' with '7969'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-7969'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux911 + aux914 + aux915)))
c Var 'aux2146' direct represents '0' with '-7970'
c Var 'aux2146' direct represents '1' with '7970'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-7970'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux917 + aux920 + aux921)<=1))
c Var 'aux2147' direct represents '0' with '-7971'
c Var 'aux2147' direct represents '1' with '7971'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-7971'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux917 + aux920 + aux921)))
c Var 'aux2148' direct represents '0' with '-7972'
c Var 'aux2148' direct represents '1' with '7972'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-7972'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux923 + aux926 + aux927)<=1))
c Var 'aux2149' direct represents '0' with '-7973'
c Var 'aux2149' direct represents '1' with '7973'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-7973'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux923 + aux926 + aux927)))
c Var 'aux2150' direct represents '0' with '-7974'
c Var 'aux2150' direct represents '1' with '7974'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-7974'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux929 + aux932 + aux933)<=1))
c Var 'aux2151' direct represents '0' with '-7975'
c Var 'aux2151' direct represents '1' with '7975'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-7975'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux929 + aux932 + aux933)))
c Var 'aux2152' direct represents '0' with '-7976'
c Var 'aux2152' direct represents '1' with '7976'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-7976'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux935 + aux938 + aux939)<=1))
c Var 'aux2153' direct represents '0' with '-7977'
c Var 'aux2153' direct represents '1' with '7977'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-7977'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux935 + aux938 + aux939)))
c Var 'aux2154' direct represents '0' with '-7978'
c Var 'aux2154' direct represents '1' with '7978'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-7978'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux941 + aux944 + aux945)<=1))
c Var 'aux2155' direct represents '0' with '-7979'
c Var 'aux2155' direct represents '1' with '7979'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-7979'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux941 + aux944 + aux945)))
c Var 'aux2156' direct represents '0' with '-7980'
c Var 'aux2156' direct represents '1' with '7980'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-7980'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux947 + aux950 + aux951)<=1))
c Var 'aux2157' direct represents '0' with '-7981'
c Var 'aux2157' direct represents '1' with '7981'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-7981'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux947 + aux950 + aux951)))
c Var 'aux2158' direct represents '0' with '-7982'
c Var 'aux2158' direct represents '1' with '7982'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-7982'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux953 + aux956 + aux957)<=1))
c Var 'aux2159' direct represents '0' with '-7983'
c Var 'aux2159' direct represents '1' with '7983'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-7983'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux953 + aux956 + aux957)))
c Var 'aux2160' direct represents '0' with '-7984'
c Var 'aux2160' direct represents '1' with '7984'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-7984'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux959 + aux962 + aux963)<=1))
c Var 'aux2161' direct represents '0' with '-7985'
c Var 'aux2161' direct represents '1' with '7985'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-7985'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux959 + aux962 + aux963)))
c Var 'aux2162' direct represents '0' with '-7986'
c Var 'aux2162' direct represents '1' with '7986'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-7986'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux965 + aux968 + aux969)<=1))
c Var 'aux2163' direct represents '0' with '-7987'
c Var 'aux2163' direct represents '1' with '7987'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-7987'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux965 + aux968 + aux969)))
c Var 'aux2164' direct represents '0' with '-7988'
c Var 'aux2164' direct represents '1' with '7988'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-7988'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux971 + aux974 + aux975)<=1))
c Var 'aux2165' direct represents '0' with '-7989'
c Var 'aux2165' direct represents '1' with '7989'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-7989'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux971 + aux974 + aux975)))
c Var 'aux2166' direct represents '0' with '-7990'
c Var 'aux2166' direct represents '1' with '7990'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-7990'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux977 + aux980 + aux981)<=1))
c Var 'aux2167' direct represents '0' with '-7991'
c Var 'aux2167' direct represents '1' with '7991'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-7991'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux977 + aux980 + aux981)))
c Var 'aux2168' direct represents '0' with '-7992'
c Var 'aux2168' direct represents '1' with '7992'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-7992'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux983 + aux986 + aux987)<=1))
c Var 'aux2169' direct represents '0' with '-7993'
c Var 'aux2169' direct represents '1' with '7993'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-7993'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux983 + aux986 + aux987)))
c Var 'aux2170' direct represents '0' with '-7994'
c Var 'aux2170' direct represents '1' with '7994'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-7994'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux989 + aux992 + aux993)<=1))
c Var 'aux2171' direct represents '0' with '-7995'
c Var 'aux2171' direct represents '1' with '7995'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-7995'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux989 + aux992 + aux993)))
c Var 'aux2172' direct represents '0' with '-7996'
c Var 'aux2172' direct represents '1' with '7996'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-7996'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux995 + aux998 + aux999)<=1))
c Var 'aux2173' direct represents '0' with '-7997'
c Var 'aux2173' direct represents '1' with '7997'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-7997'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux995 + aux998 + aux999)))
c Var 'aux2174' direct represents '0' with '-7998'
c Var 'aux2174' direct represents '1' with '7998'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-7998'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux1001 + aux1004 + aux1005)<=1))
c Var 'aux2175' direct represents '0' with '-7999'
c Var 'aux2175' direct represents '1' with '7999'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-7999'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux1001 + aux1004 + aux1005)))
c Var 'aux2176' direct represents '0' with '-8000'
c Var 'aux2176' direct represents '1' with '8000'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8000'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux1007 + aux1010 + aux1011)<=1))
c Var 'aux2177' direct represents '0' with '-8001'
c Var 'aux2177' direct represents '1' with '8001'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8001'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux1007 + aux1010 + aux1011)))
c Var 'aux2178' direct represents '0' with '-8002'
c Var 'aux2178' direct represents '1' with '8002'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8002'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux1013 + aux1016 + aux1017)<=1))
c Var 'aux2179' direct represents '0' with '-8003'
c Var 'aux2179' direct represents '1' with '8003'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8003'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux1013 + aux1016 + aux1017)))
c Var 'aux2180' direct represents '0' with '-8004'
c Var 'aux2180' direct represents '1' with '8004'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8004'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux1019 + aux1022 + aux1023)<=1))
c Var 'aux2181' direct represents '0' with '-8005'
c Var 'aux2181' direct represents '1' with '8005'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8005'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux1019 + aux1022 + aux1023)))
c Var 'aux2182' direct represents '0' with '-8006'
c Var 'aux2182' direct represents '1' with '8006'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8006'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux1025 + aux1028 + aux1029)<=1))
c Var 'aux2183' direct represents '0' with '-8007'
c Var 'aux2183' direct represents '1' with '8007'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8007'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux1025 + aux1028 + aux1029)))
c Var 'aux2184' direct represents '0' with '-8008'
c Var 'aux2184' direct represents '1' with '8008'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8008'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux1031 + aux1034 + aux1035)<=1))
c Var 'aux2185' direct represents '0' with '-8009'
c Var 'aux2185' direct represents '1' with '8009'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8009'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux1031 + aux1034 + aux1035)))
c Var 'aux2186' direct represents '0' with '-8010'
c Var 'aux2186' direct represents '1' with '8010'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8010'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux1037 + aux1040 + aux1041)<=1))
c Var 'aux2187' direct represents '0' with '-8011'
c Var 'aux2187' direct represents '1' with '8011'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8011'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux1037 + aux1040 + aux1041)))
c Var 'aux2188' direct represents '0' with '-8012'
c Var 'aux2188' direct represents '1' with '8012'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8012'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux1043 + aux1046 + aux1047)<=1))
c Var 'aux2189' direct represents '0' with '-8013'
c Var 'aux2189' direct represents '1' with '8013'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8013'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux1043 + aux1046 + aux1047)))
c Var 'aux2190' direct represents '0' with '-8014'
c Var 'aux2190' direct represents '1' with '8014'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8014'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux1049 + aux1052 + aux1053)<=1))
c Var 'aux2191' direct represents '0' with '-8015'
c Var 'aux2191' direct represents '1' with '8015'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8015'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux1049 + aux1052 + aux1053)))
c Var 'aux2192' direct represents '0' with '-8016'
c Var 'aux2192' direct represents '1' with '8016'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8016'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux1055 + aux1058 + aux1059)<=1))
c Var 'aux2193' direct represents '0' with '-8017'
c Var 'aux2193' direct represents '1' with '8017'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8017'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux1055 + aux1058 + aux1059)))
c Var 'aux2194' direct represents '0' with '-8018'
c Var 'aux2194' direct represents '1' with '8018'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8018'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux1061 + aux1064 + aux1065)<=1))
c Var 'aux2195' direct represents '0' with '-8019'
c Var 'aux2195' direct represents '1' with '8019'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8019'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux1061 + aux1064 + aux1065)))
c Var 'aux2196' direct represents '0' with '-8020'
c Var 'aux2196' direct represents '1' with '8020'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8020'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux1067 + aux1070 + aux1071)<=1))
c Var 'aux2197' direct represents '0' with '-8021'
c Var 'aux2197' direct represents '1' with '8021'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8021'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux1067 + aux1070 + aux1071)))
c Var 'aux2198' direct represents '0' with '-8022'
c Var 'aux2198' direct represents '1' with '8022'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8022'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux1073 + aux1076 + aux1077)<=1))
c Var 'aux2199' direct represents '0' with '-8023'
c Var 'aux2199' direct represents '1' with '8023'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8023'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux1073 + aux1076 + aux1077)))
c Var 'aux2200' direct represents '0' with '-8024'
c Var 'aux2200' direct represents '1' with '8024'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8024'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux1079 + aux1082 + aux1083)<=1))
c Var 'aux2201' direct represents '0' with '-8025'
c Var 'aux2201' direct represents '1' with '8025'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8025'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux1079 + aux1082 + aux1083)))
c Var 'aux2202' direct represents '0' with '-8026'
c Var 'aux2202' direct represents '1' with '8026'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8026'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux1085 + aux1088 + aux1089)<=1))
c Var 'aux2203' direct represents '0' with '-8027'
c Var 'aux2203' direct represents '1' with '8027'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8027'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux1085 + aux1088 + aux1089)))
c Var 'aux2204' direct represents '0' with '-8028'
c Var 'aux2204' direct represents '1' with '8028'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8028'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux1091 + aux1094 + aux1095)<=1))
c Var 'aux2205' direct represents '0' with '-8029'
c Var 'aux2205' direct represents '1' with '8029'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8029'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux1091 + aux1094 + aux1095)))
c Var 'aux2206' direct represents '0' with '-8030'
c Var 'aux2206' direct represents '1' with '8030'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8030'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux1097 + aux1100 + aux1101)<=1))
c Var 'aux2207' direct represents '0' with '-8031'
c Var 'aux2207' direct represents '1' with '8031'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8031'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux1097 + aux1100 + aux1101)))
c Var 'aux2208' direct represents '0' with '-8032'
c Var 'aux2208' direct represents '1' with '8032'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8032'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux1103 + aux1106 + aux1107)<=1))
c Var 'aux2209' direct represents '0' with '-8033'
c Var 'aux2209' direct represents '1' with '8033'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8033'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux1103 + aux1106 + aux1107)))
c Var 'aux2210' direct represents '0' with '-8034'
c Var 'aux2210' direct represents '1' with '8034'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8034'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux1109 + aux1112 + aux1113)<=1))
c Var 'aux2211' direct represents '0' with '-8035'
c Var 'aux2211' direct represents '1' with '8035'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8035'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux1109 + aux1112 + aux1113)))
c Var 'aux2212' direct represents '0' with '-8036'
c Var 'aux2212' direct represents '1' with '8036'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8036'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux1115 + aux1118 + aux1119)<=1))
c Var 'aux2213' direct represents '0' with '-8037'
c Var 'aux2213' direct represents '1' with '8037'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8037'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux1115 + aux1118 + aux1119)))
c Var 'aux2214' direct represents '0' with '-8038'
c Var 'aux2214' direct represents '1' with '8038'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8038'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux1121 + aux1124 + aux1125)<=1))
c Var 'aux2215' direct represents '0' with '-8039'
c Var 'aux2215' direct represents '1' with '8039'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8039'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux1121 + aux1124 + aux1125)))
c Var 'aux2216' direct represents '0' with '-8040'
c Var 'aux2216' direct represents '1' with '8040'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8040'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1127 + aux1130 + aux1131)<=1))
c Var 'aux2217' direct represents '0' with '-8041'
c Var 'aux2217' direct represents '1' with '8041'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8041'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1127 + aux1130 + aux1131)))
c Var 'aux2218' direct represents '0' with '-8042'
c Var 'aux2218' direct represents '1' with '8042'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8042'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1133 + aux1136 + aux1137)<=1))
c Var 'aux2219' direct represents '0' with '-8043'
c Var 'aux2219' direct represents '1' with '8043'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8043'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1133 + aux1136 + aux1137)))
c Var 'aux2220' direct represents '0' with '-8044'
c Var 'aux2220' direct represents '1' with '8044'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8044'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1139 + aux1142 + aux1143)<=1))
c Var 'aux2221' direct represents '0' with '-8045'
c Var 'aux2221' direct represents '1' with '8045'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8045'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1139 + aux1142 + aux1143)))
c Var 'aux2222' direct represents '0' with '-8046'
c Var 'aux2222' direct represents '1' with '8046'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8046'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1145 + aux1148 + aux1149)<=1))
c Var 'aux2223' direct represents '0' with '-8047'
c Var 'aux2223' direct represents '1' with '8047'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8047'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1145 + aux1148 + aux1149)))
c Var 'aux2224' direct represents '0' with '-8048'
c Var 'aux2224' direct represents '1' with '8048'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8048'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1151 + aux1154 + aux1155)<=1))
c Var 'aux2225' direct represents '0' with '-8049'
c Var 'aux2225' direct represents '1' with '8049'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8049'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1151 + aux1154 + aux1155)))
c Var 'aux2226' direct represents '0' with '-8050'
c Var 'aux2226' direct represents '1' with '8050'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8050'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1157 + aux1160 + aux1161)<=1))
c Var 'aux2227' direct represents '0' with '-8051'
c Var 'aux2227' direct represents '1' with '8051'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8051'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1157 + aux1160 + aux1161)))
c Var 'aux2228' direct represents '0' with '-8052'
c Var 'aux2228' direct represents '1' with '8052'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8052'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1163 + aux1166 + aux1167)<=1))
c Var 'aux2229' direct represents '0' with '-8053'
c Var 'aux2229' direct represents '1' with '8053'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8053'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1163 + aux1166 + aux1167)))
c Var 'aux2230' direct represents '0' with '-8054'
c Var 'aux2230' direct represents '1' with '8054'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8054'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1169 + aux1172 + aux1173)<=1))
c Var 'aux2231' direct represents '0' with '-8055'
c Var 'aux2231' direct represents '1' with '8055'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8055'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1169 + aux1172 + aux1173)))
c Var 'aux2232' direct represents '0' with '-8056'
c Var 'aux2232' direct represents '1' with '8056'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8056'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1175 + aux1178 + aux1179)<=1))
c Var 'aux2233' direct represents '0' with '-8057'
c Var 'aux2233' direct represents '1' with '8057'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8057'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1175 + aux1178 + aux1179)))
c Var 'aux2234' direct represents '0' with '-8058'
c Var 'aux2234' direct represents '1' with '8058'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8058'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1181 + aux1184 + aux1185)<=1))
c Var 'aux2235' direct represents '0' with '-8059'
c Var 'aux2235' direct represents '1' with '8059'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8059'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1181 + aux1184 + aux1185)))
c Var 'aux2236' direct represents '0' with '-8060'
c Var 'aux2236' direct represents '1' with '8060'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8060'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1187 + aux1190 + aux1191)<=1))
c Var 'aux2237' direct represents '0' with '-8061'
c Var 'aux2237' direct represents '1' with '8061'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8061'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1187 + aux1190 + aux1191)))
c Var 'aux2238' direct represents '0' with '-8062'
c Var 'aux2238' direct represents '1' with '8062'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8062'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1193 + aux1196 + aux1197)<=1))
c Var 'aux2239' direct represents '0' with '-8063'
c Var 'aux2239' direct represents '1' with '8063'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8063'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1193 + aux1196 + aux1197)))
c Var 'aux2240' direct represents '0' with '-8064'
c Var 'aux2240' direct represents '1' with '8064'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8064'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1199 + aux1202 + aux1203)<=1))
c Var 'aux2241' direct represents '0' with '-8065'
c Var 'aux2241' direct represents '1' with '8065'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8065'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1199 + aux1202 + aux1203)))
c Var 'aux2242' direct represents '0' with '-8066'
c Var 'aux2242' direct represents '1' with '8066'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8066'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1205 + aux1208 + aux1209)<=1))
c Var 'aux2243' direct represents '0' with '-8067'
c Var 'aux2243' direct represents '1' with '8067'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8067'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1205 + aux1208 + aux1209)))
c Var 'aux2244' direct represents '0' with '-8068'
c Var 'aux2244' direct represents '1' with '8068'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8068'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1211 + aux1214 + aux1215)<=1))
c Var 'aux2245' direct represents '0' with '-8069'
c Var 'aux2245' direct represents '1' with '8069'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8069'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1211 + aux1214 + aux1215)))
c Var 'aux2246' direct represents '0' with '-8070'
c Var 'aux2246' direct represents '1' with '8070'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8070'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1217 + aux1220 + aux1221)<=1))
c Var 'aux2247' direct represents '0' with '-8071'
c Var 'aux2247' direct represents '1' with '8071'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8071'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1217 + aux1220 + aux1221)))
c Var 'aux2248' direct represents '0' with '-8072'
c Var 'aux2248' direct represents '1' with '8072'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8072'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1223 + aux1226 + aux1227)<=1))
c Var 'aux2249' direct represents '0' with '-8073'
c Var 'aux2249' direct represents '1' with '8073'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8073'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1223 + aux1226 + aux1227)))
c Var 'aux2250' direct represents '0' with '-8074'
c Var 'aux2250' direct represents '1' with '8074'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8074'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1229 + aux1232 + aux1233)<=1))
c Var 'aux2251' direct represents '0' with '-8075'
c Var 'aux2251' direct represents '1' with '8075'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8075'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1229 + aux1232 + aux1233)))
c Var 'aux2252' direct represents '0' with '-8076'
c Var 'aux2252' direct represents '1' with '8076'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8076'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1235 + aux1238 + aux1239)<=1))
c Var 'aux2253' direct represents '0' with '-8077'
c Var 'aux2253' direct represents '1' with '8077'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8077'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1235 + aux1238 + aux1239)))
c Var 'aux2254' direct represents '0' with '-8078'
c Var 'aux2254' direct represents '1' with '8078'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8078'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1241 + aux1244 + aux1245)<=1))
c Var 'aux2255' direct represents '0' with '-8079'
c Var 'aux2255' direct represents '1' with '8079'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8079'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1241 + aux1244 + aux1245)))
c Var 'aux2256' direct represents '0' with '-8080'
c Var 'aux2256' direct represents '1' with '8080'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8080'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1247 + aux1250 + aux1251)<=1))
c Var 'aux2257' direct represents '0' with '-8081'
c Var 'aux2257' direct represents '1' with '8081'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8081'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1247 + aux1250 + aux1251)))
c Var 'aux2258' direct represents '0' with '-8082'
c Var 'aux2258' direct represents '1' with '8082'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8082'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1253 + aux1256 + aux1257)<=1))
c Var 'aux2259' direct represents '0' with '-8083'
c Var 'aux2259' direct represents '1' with '8083'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8083'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1253 + aux1256 + aux1257)))
c Var 'aux2260' direct represents '0' with '-8084'
c Var 'aux2260' direct represents '1' with '8084'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8084'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1259 + aux1262 + aux1263)<=1))
c Var 'aux2261' direct represents '0' with '-8085'
c Var 'aux2261' direct represents '1' with '8085'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8085'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1259 + aux1262 + aux1263)))
c Var 'aux2262' direct represents '0' with '-8086'
c Var 'aux2262' direct represents '1' with '8086'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8086'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1265 + aux1268 + aux1269)<=1))
c Var 'aux2263' direct represents '0' with '-8087'
c Var 'aux2263' direct represents '1' with '8087'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8087'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1265 + aux1268 + aux1269)))
c Var 'aux2264' direct represents '0' with '-8088'
c Var 'aux2264' direct represents '1' with '8088'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8088'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1271 + aux1274 + aux1275)<=1))
c Var 'aux2265' direct represents '0' with '-8089'
c Var 'aux2265' direct represents '1' with '8089'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8089'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1271 + aux1274 + aux1275)))
c Var 'aux2266' direct represents '0' with '-8090'
c Var 'aux2266' direct represents '1' with '8090'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8090'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1277 + aux1280 + aux1281)<=1))
c Var 'aux2267' direct represents '0' with '-8091'
c Var 'aux2267' direct represents '1' with '8091'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8091'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1277 + aux1280 + aux1281)))
c Var 'aux2268' direct represents '0' with '-8092'
c Var 'aux2268' direct represents '1' with '8092'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8092'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1283 + aux1286 + aux1287)<=1))
c Var 'aux2269' direct represents '0' with '-8093'
c Var 'aux2269' direct represents '1' with '8093'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8093'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1283 + aux1286 + aux1287)))
c Var 'aux2270' direct represents '0' with '-8094'
c Var 'aux2270' direct represents '1' with '8094'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8094'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1289 + aux1292 + aux1293)<=1))
c Var 'aux2271' direct represents '0' with '-8095'
c Var 'aux2271' direct represents '1' with '8095'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8095'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1289 + aux1292 + aux1293)))
c Var 'aux2272' direct represents '0' with '-8096'
c Var 'aux2272' direct represents '1' with '8096'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8096'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1295 + aux1298 + aux1299)<=1))
c Var 'aux2273' direct represents '0' with '-8097'
c Var 'aux2273' direct represents '1' with '8097'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8097'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1295 + aux1298 + aux1299)))
c Var 'aux2274' direct represents '0' with '-8098'
c Var 'aux2274' direct represents '1' with '8098'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8098'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1301 + aux1304 + aux1305)<=1))
c Var 'aux2275' direct represents '0' with '-8099'
c Var 'aux2275' direct represents '1' with '8099'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8099'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1301 + aux1304 + aux1305)))
c Var 'aux2276' direct represents '0' with '-8100'
c Var 'aux2276' direct represents '1' with '8100'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8100'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1307 + aux1310 + aux1311)<=1))
c Var 'aux2277' direct represents '0' with '-8101'
c Var 'aux2277' direct represents '1' with '8101'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8101'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1307 + aux1310 + aux1311)))
c Var 'aux2278' direct represents '0' with '-8102'
c Var 'aux2278' direct represents '1' with '8102'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8102'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1313 + aux1316 + aux1317)<=1))
c Var 'aux2279' direct represents '0' with '-8103'
c Var 'aux2279' direct represents '1' with '8103'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8103'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1313 + aux1316 + aux1317)))
c Var 'aux2280' direct represents '0' with '-8104'
c Var 'aux2280' direct represents '1' with '8104'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8104'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1319 + aux1322 + aux1323)<=1))
c Var 'aux2281' direct represents '0' with '-8105'
c Var 'aux2281' direct represents '1' with '8105'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8105'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1319 + aux1322 + aux1323)))
c Var 'aux2282' direct represents '0' with '-8106'
c Var 'aux2282' direct represents '1' with '8106'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8106'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1325 + aux1328 + aux1329)<=1))
c Var 'aux2283' direct represents '0' with '-8107'
c Var 'aux2283' direct represents '1' with '8107'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8107'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1325 + aux1328 + aux1329)))
c Var 'aux2284' direct represents '0' with '-8108'
c Var 'aux2284' direct represents '1' with '8108'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8108'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1331 + aux1334 + aux1335)<=1))
c Var 'aux2285' direct represents '0' with '-8109'
c Var 'aux2285' direct represents '1' with '8109'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8109'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1331 + aux1334 + aux1335)))
c Var 'aux2286' direct represents '0' with '-8110'
c Var 'aux2286' direct represents '1' with '8110'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8110'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1337 + aux1340 + aux1341)<=1))
c Var 'aux2287' direct represents '0' with '-8111'
c Var 'aux2287' direct represents '1' with '8111'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8111'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1337 + aux1340 + aux1341)))
c Var 'aux2288' direct represents '0' with '-8112'
c Var 'aux2288' direct represents '1' with '8112'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8112'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1343 + aux1346 + aux1347)<=1))
c Var 'aux2289' direct represents '0' with '-8113'
c Var 'aux2289' direct represents '1' with '8113'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8113'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1343 + aux1346 + aux1347)))
c Var 'aux2290' direct represents '0' with '-8114'
c Var 'aux2290' direct represents '1' with '8114'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8114'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1349 + aux1352 + aux1353)<=1))
c Var 'aux2291' direct represents '0' with '-8115'
c Var 'aux2291' direct represents '1' with '8115'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8115'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1349 + aux1352 + aux1353)))
c Var 'aux2292' direct represents '0' with '-8116'
c Var 'aux2292' direct represents '1' with '8116'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8116'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1355 + aux1358 + aux1359)<=1))
c Var 'aux2293' direct represents '0' with '-8117'
c Var 'aux2293' direct represents '1' with '8117'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8117'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1355 + aux1358 + aux1359)))
c Var 'aux2294' direct represents '0' with '-8118'
c Var 'aux2294' direct represents '1' with '8118'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8118'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1361 + aux1364 + aux1365)<=1))
c Var 'aux2295' direct represents '0' with '-8119'
c Var 'aux2295' direct represents '1' with '8119'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8119'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1361 + aux1364 + aux1365)))
c Var 'aux2296' direct represents '0' with '-8120'
c Var 'aux2296' direct represents '1' with '8120'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8120'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1367 + aux1370 + aux1371)<=1))
c Var 'aux2297' direct represents '0' with '-8121'
c Var 'aux2297' direct represents '1' with '8121'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8121'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1367 + aux1370 + aux1371)))
c Var 'aux2298' direct represents '0' with '-8122'
c Var 'aux2298' direct represents '1' with '8122'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8122'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1373 + aux1376 + aux1377)<=1))
c Var 'aux2299' direct represents '0' with '-8123'
c Var 'aux2299' direct represents '1' with '8123'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8123'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1373 + aux1376 + aux1377)))
c Var 'aux2300' direct represents '0' with '-8124'
c Var 'aux2300' direct represents '1' with '8124'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8124'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1379 + aux1382 + aux1383)<=1))
c Var 'aux2301' direct represents '0' with '-8125'
c Var 'aux2301' direct represents '1' with '8125'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8125'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1379 + aux1382 + aux1383)))
c Var 'aux2302' direct represents '0' with '-8126'
c Var 'aux2302' direct represents '1' with '8126'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8126'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1385 + aux1388 + aux1389)<=1))
c Var 'aux2303' direct represents '0' with '-8127'
c Var 'aux2303' direct represents '1' with '8127'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8127'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1385 + aux1388 + aux1389)))
c Var 'aux2304' direct represents '0' with '-8128'
c Var 'aux2304' direct represents '1' with '8128'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8128'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1391 + aux1394 + aux1395)<=1))
c Var 'aux2305' direct represents '0' with '-8129'
c Var 'aux2305' direct represents '1' with '8129'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8129'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1391 + aux1394 + aux1395)))
c Var 'aux2306' direct represents '0' with '-8130'
c Var 'aux2306' direct represents '1' with '8130'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8130'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1397 + aux1400 + aux1401)<=1))
c Var 'aux2307' direct represents '0' with '-8131'
c Var 'aux2307' direct represents '1' with '8131'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8131'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1397 + aux1400 + aux1401)))
c Var 'aux2308' direct represents '0' with '-8132'
c Var 'aux2308' direct represents '1' with '8132'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8132'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1403 + aux1406 + aux1407)<=1))
c Var 'aux2309' direct represents '0' with '-8133'
c Var 'aux2309' direct represents '1' with '8133'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8133'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1403 + aux1406 + aux1407)))
c Var 'aux2310' direct represents '0' with '-8134'
c Var 'aux2310' direct represents '1' with '8134'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8134'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1409 + aux1412 + aux1413)<=1))
c Var 'aux2311' direct represents '0' with '-8135'
c Var 'aux2311' direct represents '1' with '8135'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8135'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1409 + aux1412 + aux1413)))
c Var 'aux2312' direct represents '0' with '-8136'
c Var 'aux2312' direct represents '1' with '8136'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8136'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1415 + aux1418 + aux1419)<=1))
c Var 'aux2313' direct represents '0' with '-8137'
c Var 'aux2313' direct represents '1' with '8137'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8137'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1415 + aux1418 + aux1419)))
c Var 'aux2314' direct represents '0' with '-8138'
c Var 'aux2314' direct represents '1' with '8138'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8138'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1421 + aux1424 + aux1425)<=1))
c Var 'aux2315' direct represents '0' with '-8139'
c Var 'aux2315' direct represents '1' with '8139'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8139'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1421 + aux1424 + aux1425)))
c Var 'aux2316' direct represents '0' with '-8140'
c Var 'aux2316' direct represents '1' with '8140'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8140'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1427 + aux1430 + aux1431)<=1))
c Var 'aux2317' direct represents '0' with '-8141'
c Var 'aux2317' direct represents '1' with '8141'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8141'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1427 + aux1430 + aux1431)))
c Var 'aux2318' direct represents '0' with '-8142'
c Var 'aux2318' direct represents '1' with '8142'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8142'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1433 + aux1436 + aux1437)<=1))
c Var 'aux2319' direct represents '0' with '-8143'
c Var 'aux2319' direct represents '1' with '8143'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8143'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1433 + aux1436 + aux1437)))
c Var 'aux2320' direct represents '0' with '-8144'
c Var 'aux2320' direct represents '1' with '8144'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8144'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1439 + aux1442 + aux1443)<=1))
c Var 'aux2321' direct represents '0' with '-8145'
c Var 'aux2321' direct represents '1' with '8145'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8145'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1439 + aux1442 + aux1443)))
c Var 'aux2322' direct represents '0' with '-8146'
c Var 'aux2322' direct represents '1' with '8146'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8146'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1445 + aux1448 + aux1449)<=1))
c Var 'aux2323' direct represents '0' with '-8147'
c Var 'aux2323' direct represents '1' with '8147'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8147'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1445 + aux1448 + aux1449)))
c Var 'aux2324' direct represents '0' with '-8148'
c Var 'aux2324' direct represents '1' with '8148'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8148'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1451 + aux1454 + aux1455)<=1))
c Var 'aux2325' direct represents '0' with '-8149'
c Var 'aux2325' direct represents '1' with '8149'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8149'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1451 + aux1454 + aux1455)))
c Var 'aux2326' direct represents '0' with '-8150'
c Var 'aux2326' direct represents '1' with '8150'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8150'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1457 + aux1460 + aux1461)<=1))
c Var 'aux2327' direct represents '0' with '-8151'
c Var 'aux2327' direct represents '1' with '8151'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8151'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1457 + aux1460 + aux1461)))
c Var 'aux2328' direct represents '0' with '-8152'
c Var 'aux2328' direct represents '1' with '8152'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8152'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1463 + aux1466 + aux1467)<=1))
c Var 'aux2329' direct represents '0' with '-8153'
c Var 'aux2329' direct represents '1' with '8153'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8153'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1463 + aux1466 + aux1467)))
c Var 'aux2330' direct represents '0' with '-8154'
c Var 'aux2330' direct represents '1' with '8154'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8154'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1469 + aux1472 + aux1473)<=1))
c Var 'aux2331' direct represents '0' with '-8155'
c Var 'aux2331' direct represents '1' with '8155'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8155'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1469 + aux1472 + aux1473)))
c Var 'aux2332' direct represents '0' with '-8156'
c Var 'aux2332' direct represents '1' with '8156'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8156'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1475 + aux1478 + aux1479)<=1))
c Var 'aux2333' direct represents '0' with '-8157'
c Var 'aux2333' direct represents '1' with '8157'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8157'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1475 + aux1478 + aux1479)))
c Var 'aux2334' direct represents '0' with '-8158'
c Var 'aux2334' direct represents '1' with '8158'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8158'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1481 + aux1484 + aux1485)<=1))
c Var 'aux2335' direct represents '0' with '-8159'
c Var 'aux2335' direct represents '1' with '8159'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8159'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1481 + aux1484 + aux1485)))
c Var 'aux2336' direct represents '0' with '-8160'
c Var 'aux2336' direct represents '1' with '8160'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8160'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1487 + aux1490 + aux1491)<=1))
c Var 'aux2337' direct represents '0' with '-8161'
c Var 'aux2337' direct represents '1' with '8161'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8161'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1487 + aux1490 + aux1491)))
c Var 'aux2338' direct represents '0' with '-8162'
c Var 'aux2338' direct represents '1' with '8162'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8162'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1493 + aux1496 + aux1497)<=1))
c Var 'aux2339' direct represents '0' with '-8163'
c Var 'aux2339' direct represents '1' with '8163'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8163'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1493 + aux1496 + aux1497)))
c Var 'aux2340' direct represents '0' with '-8164'
c Var 'aux2340' direct represents '1' with '8164'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8164'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1499 + aux1502 + aux1503)<=1))
c Var 'aux2341' direct represents '0' with '-8165'
c Var 'aux2341' direct represents '1' with '8165'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8165'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1499 + aux1502 + aux1503)))
c Var 'aux2342' direct represents '0' with '-8166'
c Var 'aux2342' direct represents '1' with '8166'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8166'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1505 + aux1508 + aux1509)<=1))
c Var 'aux2343' direct represents '0' with '-8167'
c Var 'aux2343' direct represents '1' with '8167'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8167'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1505 + aux1508 + aux1509)))
c Var 'aux2344' direct represents '0' with '-8168'
c Var 'aux2344' direct represents '1' with '8168'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8168'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1511 + aux1514 + aux1515)<=1))
c Var 'aux2345' direct represents '0' with '-8169'
c Var 'aux2345' direct represents '1' with '8169'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8169'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1511 + aux1514 + aux1515)))
c Var 'aux2346' direct represents '0' with '-8170'
c Var 'aux2346' direct represents '1' with '8170'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8170'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1517 + aux1520 + aux1521)<=1))
c Var 'aux2347' direct represents '0' with '-8171'
c Var 'aux2347' direct represents '1' with '8171'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8171'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1517 + aux1520 + aux1521)))
c Var 'aux2348' direct represents '0' with '-8172'
c Var 'aux2348' direct represents '1' with '8172'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8172'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1523 + aux1526 + aux1527)<=1))
c Var 'aux2349' direct represents '0' with '-8173'
c Var 'aux2349' direct represents '1' with '8173'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8173'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1523 + aux1526 + aux1527)))
c Var 'aux2350' direct represents '0' with '-8174'
c Var 'aux2350' direct represents '1' with '8174'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8174'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1529 + aux1532 + aux1533)<=1))
c Var 'aux2351' direct represents '0' with '-8175'
c Var 'aux2351' direct represents '1' with '8175'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8175'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1529 + aux1532 + aux1533)))
c Var 'aux2352' direct represents '0' with '-8176'
c Var 'aux2352' direct represents '1' with '8176'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8176'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1535 + aux1538 + aux1539)<=1))
c Var 'aux2353' direct represents '0' with '-8177'
c Var 'aux2353' direct represents '1' with '8177'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8177'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1535 + aux1538 + aux1539)))
c Var 'aux2354' direct represents '0' with '-8178'
c Var 'aux2354' direct represents '1' with '8178'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8178'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1541 + aux1544 + aux1545)<=1))
c Var 'aux2355' direct represents '0' with '-8179'
c Var 'aux2355' direct represents '1' with '8179'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8179'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1541 + aux1544 + aux1545)))
c Var 'aux2356' direct represents '0' with '-8180'
c Var 'aux2356' direct represents '1' with '8180'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8180'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1547 + aux1550 + aux1551)<=1))
c Var 'aux2357' direct represents '0' with '-8181'
c Var 'aux2357' direct represents '1' with '8181'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8181'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1547 + aux1550 + aux1551)))
c Var 'aux2358' direct represents '0' with '-8182'
c Var 'aux2358' direct represents '1' with '8182'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8182'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1553 + aux1556 + aux1557)<=1))
c Var 'aux2359' direct represents '0' with '-8183'
c Var 'aux2359' direct represents '1' with '8183'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8183'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1553 + aux1556 + aux1557)))
c Var 'aux2360' direct represents '0' with '-8184'
c Var 'aux2360' direct represents '1' with '8184'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8184'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1559 + aux1562 + aux1563)<=1))
c Var 'aux2361' direct represents '0' with '-8185'
c Var 'aux2361' direct represents '1' with '8185'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8185'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1559 + aux1562 + aux1563)))
c Var 'aux2362' direct represents '0' with '-8186'
c Var 'aux2362' direct represents '1' with '8186'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8186'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1565 + aux1568 + aux1569)<=1))
c Var 'aux2363' direct represents '0' with '-8187'
c Var 'aux2363' direct represents '1' with '8187'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8187'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1565 + aux1568 + aux1569)))
c Var 'aux2364' direct represents '0' with '-8188'
c Var 'aux2364' direct represents '1' with '8188'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8188'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1571 + aux1574 + aux1575)<=1))
c Var 'aux2365' direct represents '0' with '-8189'
c Var 'aux2365' direct represents '1' with '8189'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8189'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1571 + aux1574 + aux1575)))
c Var 'aux2366' direct represents '0' with '-8190'
c Var 'aux2366' direct represents '1' with '8190'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8190'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1577 + aux1580 + aux1581)<=1))
c Var 'aux2367' direct represents '0' with '-8191'
c Var 'aux2367' direct represents '1' with '8191'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8191'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1577 + aux1580 + aux1581)))
c Var 'aux2368' direct represents '0' with '-8192'
c Var 'aux2368' direct represents '1' with '8192'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8192'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1583 + aux1586 + aux1587)<=1))
c Var 'aux2369' direct represents '0' with '-8193'
c Var 'aux2369' direct represents '1' with '8193'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8193'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1583 + aux1586 + aux1587)))
c Var 'aux2370' direct represents '0' with '-8194'
c Var 'aux2370' direct represents '1' with '8194'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8194'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1589 + aux1592 + aux1593)<=1))
c Var 'aux2371' direct represents '0' with '-8195'
c Var 'aux2371' direct represents '1' with '8195'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8195'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1589 + aux1592 + aux1593)))
c Var 'aux2372' direct represents '0' with '-8196'
c Var 'aux2372' direct represents '1' with '8196'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8196'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1595 + aux1598 + aux1599)<=1))
c Var 'aux2373' direct represents '0' with '-8197'
c Var 'aux2373' direct represents '1' with '8197'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8197'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1595 + aux1598 + aux1599)))
c Var 'aux2374' direct represents '0' with '-8198'
c Var 'aux2374' direct represents '1' with '8198'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8198'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1601 + aux1604 + aux1605)<=1))
c Var 'aux2375' direct represents '0' with '-8199'
c Var 'aux2375' direct represents '1' with '8199'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8199'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1601 + aux1604 + aux1605)))
c Var 'aux2376' direct represents '0' with '-8200'
c Var 'aux2376' direct represents '1' with '8200'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8200'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1607 + aux1610 + aux1611)<=1))
c Var 'aux2377' direct represents '0' with '-8201'
c Var 'aux2377' direct represents '1' with '8201'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8201'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1607 + aux1610 + aux1611)))
c Var 'aux2378' direct represents '0' with '-8202'
c Var 'aux2378' direct represents '1' with '8202'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8202'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1613 + aux1616 + aux1617)<=1))
c Var 'aux2379' direct represents '0' with '-8203'
c Var 'aux2379' direct represents '1' with '8203'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8203'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1613 + aux1616 + aux1617)))
c Var 'aux2380' direct represents '0' with '-8204'
c Var 'aux2380' direct represents '1' with '8204'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8204'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1619 + aux1622 + aux1623)<=1))
c Var 'aux2381' direct represents '0' with '-8205'
c Var 'aux2381' direct represents '1' with '8205'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8205'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1619 + aux1622 + aux1623)))
c Var 'aux2382' direct represents '0' with '-8206'
c Var 'aux2382' direct represents '1' with '8206'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8206'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1625 + aux1628 + aux1629)<=1))
c Var 'aux2383' direct represents '0' with '-8207'
c Var 'aux2383' direct represents '1' with '8207'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8207'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1625 + aux1628 + aux1629)))
c Var 'aux2384' direct represents '0' with '-8208'
c Var 'aux2384' direct represents '1' with '8208'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8208'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1631 + aux1634 + aux1635)<=1))
c Var 'aux2385' direct represents '0' with '-8209'
c Var 'aux2385' direct represents '1' with '8209'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8209'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1631 + aux1634 + aux1635)))
c Var 'aux2386' direct represents '0' with '-8210'
c Var 'aux2386' direct represents '1' with '8210'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8210'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1637 + aux1640 + aux1641)<=1))
c Var 'aux2387' direct represents '0' with '-8211'
c Var 'aux2387' direct represents '1' with '8211'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8211'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1637 + aux1640 + aux1641)))
c Var 'aux2388' direct represents '0' with '-8212'
c Var 'aux2388' direct represents '1' with '8212'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8212'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1643 + aux1646 + aux1647)<=1))
c Var 'aux2389' direct represents '0' with '-8213'
c Var 'aux2389' direct represents '1' with '8213'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8213'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1643 + aux1646 + aux1647)))
c Var 'aux2390' direct represents '0' with '-8214'
c Var 'aux2390' direct represents '1' with '8214'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8214'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1649 + aux1652 + aux1653)<=1))
c Var 'aux2391' direct represents '0' with '-8215'
c Var 'aux2391' direct represents '1' with '8215'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8215'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1649 + aux1652 + aux1653)))
c Var 'aux2392' direct represents '0' with '-8216'
c Var 'aux2392' direct represents '1' with '8216'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8216'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1655 + aux1658 + aux1659)<=1))
c Var 'aux2393' direct represents '0' with '-8217'
c Var 'aux2393' direct represents '1' with '8217'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8217'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1655 + aux1658 + aux1659)))
c Var 'aux2394' direct represents '0' with '-8218'
c Var 'aux2394' direct represents '1' with '8218'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8218'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1661 + aux1664 + aux1665)<=1))
c Var 'aux2395' direct represents '0' with '-8219'
c Var 'aux2395' direct represents '1' with '8219'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8219'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1661 + aux1664 + aux1665)))
c Var 'aux2396' direct represents '0' with '-8220'
c Var 'aux2396' direct represents '1' with '8220'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8220'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1667 + aux1670 + aux1671)<=1))
c Var 'aux2397' direct represents '0' with '-8221'
c Var 'aux2397' direct represents '1' with '8221'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8221'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1667 + aux1670 + aux1671)))
c Var 'aux2398' direct represents '0' with '-8222'
c Var 'aux2398' direct represents '1' with '8222'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8222'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1673 + aux1676 + aux1677)<=1))
c Var 'aux2399' direct represents '0' with '-8223'
c Var 'aux2399' direct represents '1' with '8223'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8223'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1673 + aux1676 + aux1677)))
c Var 'aux2400' direct represents '0' with '-8224'
c Var 'aux2400' direct represents '1' with '8224'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8224'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1679 + aux1682 + aux1683)<=1))
c Var 'aux2401' direct represents '0' with '-8225'
c Var 'aux2401' direct represents '1' with '8225'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8225'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1679 + aux1682 + aux1683)))
c Var 'aux2402' direct represents '0' with '-8226'
c Var 'aux2402' direct represents '1' with '8226'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8226'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1685 + aux1688 + aux1689)<=1))
c Var 'aux2403' direct represents '0' with '-8227'
c Var 'aux2403' direct represents '1' with '8227'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8227'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1685 + aux1688 + aux1689)))
c Var 'aux2404' direct represents '0' with '-8228'
c Var 'aux2404' direct represents '1' with '8228'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8228'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1691 + aux1694 + aux1695)<=1))
c Var 'aux2405' direct represents '0' with '-8229'
c Var 'aux2405' direct represents '1' with '8229'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8229'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1691 + aux1694 + aux1695)))
c Var 'aux2406' direct represents '0' with '-8230'
c Var 'aux2406' direct represents '1' with '8230'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8230'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1697 + aux1700 + aux1701)<=1))
c Var 'aux2407' direct represents '0' with '-8231'
c Var 'aux2407' direct represents '1' with '8231'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8231'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1697 + aux1700 + aux1701)))
c Var 'aux2408' direct represents '0' with '-8232'
c Var 'aux2408' direct represents '1' with '8232'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8232'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1703 + aux1706 + aux1707)<=1))
c Var 'aux2409' direct represents '0' with '-8233'
c Var 'aux2409' direct represents '1' with '8233'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8233'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1703 + aux1706 + aux1707)))
c Var 'aux2410' direct represents '0' with '-8234'
c Var 'aux2410' direct represents '1' with '8234'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8234'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1709 + aux1712 + aux1713)<=1))
c Var 'aux2411' direct represents '0' with '-8235'
c Var 'aux2411' direct represents '1' with '8235'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8235'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1709 + aux1712 + aux1713)))
c Var 'aux2412' direct represents '0' with '-8236'
c Var 'aux2412' direct represents '1' with '8236'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8236'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1715 + aux1718 + aux1719)<=1))
c Var 'aux2413' direct represents '0' with '-8237'
c Var 'aux2413' direct represents '1' with '8237'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8237'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1715 + aux1718 + aux1719)))
c Var 'aux2414' direct represents '0' with '-8238'
c Var 'aux2414' direct represents '1' with '8238'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8238'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1721 + aux1724 + aux1725)<=1))
c Var 'aux2415' direct represents '0' with '-8239'
c Var 'aux2415' direct represents '1' with '8239'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8239'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1721 + aux1724 + aux1725)))
c Var 'aux2416' direct represents '0' with '-8240'
c Var 'aux2416' direct represents '1' with '8240'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8240'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1727 + aux1730 + aux1731)<=1))
c Var 'aux2417' direct represents '0' with '-8241'
c Var 'aux2417' direct represents '1' with '8241'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8241'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1727 + aux1730 + aux1731)))
c Var 'aux2418' direct represents '0' with '-8242'
c Var 'aux2418' direct represents '1' with '8242'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8242'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1733 + aux1736 + aux1737)<=1))
c Var 'aux2419' direct represents '0' with '-8243'
c Var 'aux2419' direct represents '1' with '8243'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8243'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1733 + aux1736 + aux1737)))
c Var 'aux2420' direct represents '0' with '-8244'
c Var 'aux2420' direct represents '1' with '8244'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8244'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1739 + aux1742 + aux1743)<=1))
c Var 'aux2421' direct represents '0' with '-8245'
c Var 'aux2421' direct represents '1' with '8245'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8245'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1739 + aux1742 + aux1743)))
c Var 'aux2422' direct represents '0' with '-8246'
c Var 'aux2422' direct represents '1' with '8246'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8246'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1745 + aux1748 + aux1749)<=1))
c Var 'aux2423' direct represents '0' with '-8247'
c Var 'aux2423' direct represents '1' with '8247'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8247'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1745 + aux1748 + aux1749)))
c Var 'aux2424' direct represents '0' with '-8248'
c Var 'aux2424' direct represents '1' with '8248'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8248'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1751 + aux1754 + aux1755)<=1))
c Var 'aux2425' direct represents '0' with '-8249'
c Var 'aux2425' direct represents '1' with '8249'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8249'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1751 + aux1754 + aux1755)))
c Var 'aux2426' direct represents '0' with '-8250'
c Var 'aux2426' direct represents '1' with '8250'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8250'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1757 + aux1760 + aux1761)<=1))
c Var 'aux2427' direct represents '0' with '-8251'
c Var 'aux2427' direct represents '1' with '8251'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8251'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1757 + aux1760 + aux1761)))
c Var 'aux2428' direct represents '0' with '-8252'
c Var 'aux2428' direct represents '1' with '8252'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8252'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1763 + aux1766 + aux1767)<=1))
c Var 'aux2429' direct represents '0' with '-8253'
c Var 'aux2429' direct represents '1' with '8253'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8253'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1763 + aux1766 + aux1767)))
c Var 'aux2430' direct represents '0' with '-8254'
c Var 'aux2430' direct represents '1' with '8254'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8254'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1769 + aux1772 + aux1773)<=1))
c Var 'aux2431' direct represents '0' with '-8255'
c Var 'aux2431' direct represents '1' with '8255'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8255'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1769 + aux1772 + aux1773)))
c Var 'aux2432' direct represents '0' with '-8256'
c Var 'aux2432' direct represents '1' with '8256'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8256'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1775 + aux1778 + aux1779)<=1))
c Var 'aux2433' direct represents '0' with '-8257'
c Var 'aux2433' direct represents '1' with '8257'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8257'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1775 + aux1778 + aux1779)))
c Var 'aux2434' direct represents '0' with '-8258'
c Var 'aux2434' direct represents '1' with '8258'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8258'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1781 + aux1784 + aux1785)<=1))
c Var 'aux2435' direct represents '0' with '-8259'
c Var 'aux2435' direct represents '1' with '8259'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8259'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1781 + aux1784 + aux1785)))
c Var 'aux2436' direct represents '0' with '-8260'
c Var 'aux2436' direct represents '1' with '8260'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8260'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1787 + aux1790 + aux1791)<=1))
c Var 'aux2437' direct represents '0' with '-8261'
c Var 'aux2437' direct represents '1' with '8261'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8261'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1787 + aux1790 + aux1791)))
c Var 'aux2438' direct represents '0' with '-8262'
c Var 'aux2438' direct represents '1' with '8262'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8262'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1793 + aux1796 + aux1797)<=1))
c Var 'aux2439' direct represents '0' with '-8263'
c Var 'aux2439' direct represents '1' with '8263'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8263'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1793 + aux1796 + aux1797)))
c Var 'aux2440' direct represents '0' with '-8264'
c Var 'aux2440' direct represents '1' with '8264'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8264'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1799 + aux1802 + aux1803)<=1))
c Var 'aux2441' direct represents '0' with '-8265'
c Var 'aux2441' direct represents '1' with '8265'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8265'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1799 + aux1802 + aux1803)))
c Var 'aux2442' direct represents '0' with '-8266'
c Var 'aux2442' direct represents '1' with '8266'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8266'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1805 + aux1808 + aux1809)<=1))
c Var 'aux2443' direct represents '0' with '-8267'
c Var 'aux2443' direct represents '1' with '8267'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8267'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1805 + aux1808 + aux1809)))
c Var 'aux2444' direct represents '0' with '-8268'
c Var 'aux2444' direct represents '1' with '8268'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8268'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1811 + aux1814 + aux1815)<=1))
c Var 'aux2445' direct represents '0' with '-8269'
c Var 'aux2445' direct represents '1' with '8269'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8269'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1811 + aux1814 + aux1815)))
c Var 'aux2446' direct represents '0' with '-8270'
c Var 'aux2446' direct represents '1' with '8270'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8270'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1817 + aux1820 + aux1821)<=1))
c Var 'aux2447' direct represents '0' with '-8271'
c Var 'aux2447' direct represents '1' with '8271'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8271'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1817 + aux1820 + aux1821)))
c Var 'aux2448' direct represents '0' with '-8272'
c Var 'aux2448' direct represents '1' with '8272'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8272'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1823 + aux1826 + aux1827)<=1))
c Var 'aux2449' direct represents '0' with '-8273'
c Var 'aux2449' direct represents '1' with '8273'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8273'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1823 + aux1826 + aux1827)))
c Var 'aux2450' direct represents '0' with '-8274'
c Var 'aux2450' direct represents '1' with '8274'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8274'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1829 + aux1832 + aux1833)<=1))
c Var 'aux2451' direct represents '0' with '-8275'
c Var 'aux2451' direct represents '1' with '8275'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8275'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1829 + aux1832 + aux1833)))
c Var 'aux2452' direct represents '0' with '-8276'
c Var 'aux2452' direct represents '1' with '8276'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8276'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1835 + aux1838 + aux1839)<=1))
c Var 'aux2453' direct represents '0' with '-8277'
c Var 'aux2453' direct represents '1' with '8277'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8277'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1835 + aux1838 + aux1839)))
c Var 'aux2454' direct represents '0' with '-8278'
c Var 'aux2454' direct represents '1' with '8278'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8278'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1841 + aux1844 + aux1845)<=1))
c Var 'aux2455' direct represents '0' with '-8279'
c Var 'aux2455' direct represents '1' with '8279'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8279'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1841 + aux1844 + aux1845)))
c Var 'aux2456' direct represents '0' with '-8280'
c Var 'aux2456' direct represents '1' with '8280'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8280'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1847 + aux1850 + aux1851)<=1))
c Var 'aux2457' direct represents '0' with '-8281'
c Var 'aux2457' direct represents '1' with '8281'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8281'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1847 + aux1850 + aux1851)))
c Var 'aux2458' direct represents '0' with '-8282'
c Var 'aux2458' direct represents '1' with '8282'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8282'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1853 + aux1856 + aux1857)<=1))
c Var 'aux2459' direct represents '0' with '-8283'
c Var 'aux2459' direct represents '1' with '8283'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8283'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1853 + aux1856 + aux1857)))
c Var 'aux2460' direct represents '0' with '-8284'
c Var 'aux2460' direct represents '1' with '8284'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8284'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1859 + aux1862 + aux1863)<=1))
c Var 'aux2461' direct represents '0' with '-8285'
c Var 'aux2461' direct represents '1' with '8285'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8285'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1859 + aux1862 + aux1863)))
c Var 'aux2462' direct represents '0' with '-8286'
c Var 'aux2462' direct represents '1' with '8286'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8286'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1865 + aux1868 + aux1869)<=1))
c Var 'aux2463' direct represents '0' with '-8287'
c Var 'aux2463' direct represents '1' with '8287'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8287'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1865 + aux1868 + aux1869)))
c Var 'aux2464' direct represents '0' with '-8288'
c Var 'aux2464' direct represents '1' with '8288'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8288'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1871 + aux1874 + aux1875)<=1))
c Var 'aux2465' direct represents '0' with '-8289'
c Var 'aux2465' direct represents '1' with '8289'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8289'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1871 + aux1874 + aux1875)))
c Var 'aux2466' direct represents '0' with '-8290'
c Var 'aux2466' direct represents '1' with '8290'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8290'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1877 + aux1880 + aux1881)<=1))
c Var 'aux2467' direct represents '0' with '-8291'
c Var 'aux2467' direct represents '1' with '8291'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8291'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1877 + aux1880 + aux1881)))
c Var 'aux2468' direct represents '0' with '-8292'
c Var 'aux2468' direct represents '1' with '8292'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8292'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1883 + aux1886 + aux1887)<=1))
c Var 'aux2469' direct represents '0' with '-8293'
c Var 'aux2469' direct represents '1' with '8293'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8293'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1883 + aux1886 + aux1887)))
c Var 'aux2470' direct represents '0' with '-8294'
c Var 'aux2470' direct represents '1' with '8294'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8294'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1889 + aux1892 + aux1893)<=1))
c Var 'aux2471' direct represents '0' with '-8295'
c Var 'aux2471' direct represents '1' with '8295'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8295'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1889 + aux1892 + aux1893)))
c Var 'aux2472' direct represents '0' with '-8296'
c Var 'aux2472' direct represents '1' with '8296'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8296'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1895 + aux1898 + aux1899)<=1))
c Var 'aux2473' direct represents '0' with '-8297'
c Var 'aux2473' direct represents '1' with '8297'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8297'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1895 + aux1898 + aux1899)))
c Var 'aux2474' direct represents '0' with '-8298'
c Var 'aux2474' direct represents '1' with '8298'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8298'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1901 + aux1904 + aux1905)<=1))
c Var 'aux2475' direct represents '0' with '-8299'
c Var 'aux2475' direct represents '1' with '8299'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8299'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1901 + aux1904 + aux1905)))
c Var 'aux2476' direct represents '0' with '-8300'
c Var 'aux2476' direct represents '1' with '8300'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8300'
c (((x_00002_00001 + x_00003_00001 + x_00001_00001)<=13)=tv=SATLiteral(7757))
-7757 275 15 0
-7757 277 13 0
-7757 279 11 0
-7757 281 9 0
-7757 283 7 0
-7757 285 5 0
-7757 137 273 15 0
-7757 137 275 13 0
-7757 137 277 11 0
-7757 137 279 9 0
-7757 137 281 7 0
-7757 137 283 5 0
-7757 137 285 3 0
-7757 138 272 15 0
-7757 138 273 13 0
-7757 138 275 11 0
-7757 138 277 9 0
-7757 138 279 7 0
-7757 138 281 5 0
-7757 138 283 3 0
-7757 138 285 2 0
-7757 140 15 0
-7757 140 272 13 0
-7757 140 273 11 0
-7757 140 275 9 0
-7757 140 277 7 0
-7757 140 279 5 0
-7757 140 281 3 0
-7757 140 283 2 0
-7757 140 285 0
-7757 142 13 0
-7757 142 272 11 0
-7757 142 273 9 0
-7757 142 275 7 0
-7757 142 277 5 0
-7757 142 279 3 0
-7757 142 281 2 0
-7757 142 283 0
-7757 142 285 0
-7757 144 11 0
-7757 144 272 9 0
-7757 144 273 7 0
-7757 144 275 5 0
-7757 144 277 3 0
-7757 144 279 2 0
-7757 144 281 0
-7757 144 283 0
-7757 144 285 0
-7757 146 9 0
-7757 146 272 7 0
-7757 146 273 5 0
-7757 146 275 3 0
-7757 146 277 2 0
-7757 146 279 0
-7757 146 281 0
-7757 146 283 0
-7757 146 285 0
-7757 148 7 0
-7757 148 272 5 0
-7757 148 273 3 0
-7757 148 275 2 0
-7757 148 277 0
-7757 148 279 0
-7757 148 281 0
-7757 148 283 0
-7757 148 285 0
-7757 150 5 0
-7757 150 272 3 0
-7757 150 273 2 0
-7757 150 275 0
-7757 150 277 0
-7757 150 279 0
-7757 150 281 0
-7757 150 283 0
-7757 150 285 0
7757 -275 -2 0
7757 -273 -3 0
7757 -272 -5 0
7757 -150 -277 -2 0
7757 -150 -275 -3 0
7757 -150 -273 -5 0
7757 -150 -272 -7 0
7757 -148 -279 -2 0
7757 -148 -277 -3 0
7757 -148 -275 -5 0
7757 -148 -273 -7 0
7757 -148 -272 -9 0
7757 -146 -281 -2 0
7757 -146 -279 -3 0
7757 -146 -277 -5 0
7757 -146 -275 -7 0
7757 -146 -273 -9 0
7757 -146 -272 -11 0
7757 -144 -283 -2 0
7757 -144 -281 -3 0
7757 -144 -279 -5 0
7757 -144 -277 -7 0
7757 -144 -275 -9 0
7757 -144 -273 -11 0
7757 -144 -272 -13 0
7757 -142 -285 -2 0
7757 -142 -283 -3 0
7757 -142 -281 -5 0
7757 -142 -279 -7 0
7757 -142 -277 -9 0
7757 -142 -275 -11 0
7757 -142 -273 -13 0
7757 -142 -272 -15 0
7757 -140 -2 0
7757 -140 -285 -3 0
7757 -140 -283 -5 0
7757 -140 -281 -7 0
7757 -140 -279 -9 0
7757 -140 -277 -11 0
7757 -140 -275 -13 0
7757 -140 -273 -15 0
7757 -140 -272 0
7757 -138 -3 0
7757 -138 -285 -5 0
7757 -138 -283 -7 0
7757 -138 -281 -9 0
7757 -138 -279 -11 0
7757 -138 -277 -13 0
7757 -138 -275 -15 0
7757 -138 -273 0
7757 -138 -272 0
7757 -137 -5 0
7757 -137 -285 -7 0
7757 -137 -283 -9 0
7757 -137 -281 -11 0
7757 -137 -279 -13 0
7757 -137 -277 -15 0
7757 -137 -275 0
7757 -137 -273 0
7757 -137 -272 0
c ((13<=(x_00002_00001 + x_00003_00001 + x_00001_00001))=tv=SATLiteral(7758))
-7758 -273 -2 0
-7758 -272 -3 0
-7758 -150 -275 -2 0
-7758 -150 -273 -3 0
-7758 -150 -272 -5 0
-7758 -148 -277 -2 0
-7758 -148 -275 -3 0
-7758 -148 -273 -5 0
-7758 -148 -272 -7 0
-7758 -146 -279 -2 0
-7758 -146 -277 -3 0
-7758 -146 -275 -5 0
-7758 -146 -273 -7 0
-7758 -146 -272 -9 0
-7758 -144 -281 -2 0
-7758 -144 -279 -3 0
-7758 -144 -277 -5 0
-7758 -144 -275 -7 0
-7758 -144 -273 -9 0
-7758 -144 -272 -11 0
-7758 -142 -283 -2 0
-7758 -142 -281 -3 0
-7758 -142 -279 -5 0
-7758 -142 -277 -7 0
-7758 -142 -275 -9 0
-7758 -142 -273 -11 0
-7758 -142 -272 -13 0
-7758 -140 -285 -2 0
-7758 -140 -283 -3 0
-7758 -140 -281 -5 0
-7758 -140 -279 -7 0
-7758 -140 -277 -9 0
-7758 -140 -275 -11 0
-7758 -140 -273 -13 0
-7758 -140 -272 -15 0
-7758 -138 -2 0
-7758 -138 -285 -3 0
-7758 -138 -283 -5 0
-7758 -138 -281 -7 0
-7758 -138 -279 -9 0
-7758 -138 -277 -11 0
-7758 -138 -275 -13 0
-7758 -138 -273 -15 0
-7758 -138 -272 0
-7758 -137 -3 0
-7758 -137 -285 -5 0
-7758 -137 -283 -7 0
-7758 -137 -281 -9 0
-7758 -137 -279 -11 0
-7758 -137 -277 -13 0
-7758 -137 -275 -15 0
-7758 -137 -273 0
-7758 -137 -272 0
7758 273 15 0
7758 275 13 0
7758 277 11 0
7758 279 9 0
7758 281 7 0
7758 283 5 0
7758 285 3 0
7758 137 272 15 0
7758 137 273 13 0
7758 137 275 11 0
7758 137 277 9 0
7758 137 279 7 0
7758 137 281 5 0
7758 137 283 3 0
7758 137 285 2 0
7758 138 15 0
7758 138 272 13 0
7758 138 273 11 0
7758 138 275 9 0
7758 138 277 7 0
7758 138 279 5 0
7758 138 281 3 0
7758 138 283 2 0
7758 138 285 0
7758 140 13 0
7758 140 272 11 0
7758 140 273 9 0
7758 140 275 7 0
7758 140 277 5 0
7758 140 279 3 0
7758 140 281 2 0
7758 140 283 0
7758 140 285 0
7758 142 11 0
7758 142 272 9 0
7758 142 273 7 0
7758 142 275 5 0
7758 142 277 3 0
7758 142 279 2 0
7758 142 281 0
7758 142 283 0
7758 142 285 0
7758 144 9 0
7758 144 272 7 0
7758 144 273 5 0
7758 144 275 3 0
7758 144 277 2 0
7758 144 279 0
7758 144 281 0
7758 144 283 0
7758 144 285 0
7758 146 7 0
7758 146 272 5 0
7758 146 273 3 0
7758 146 275 2 0
7758 146 277 0
7758 146 279 0
7758 146 281 0
7758 146 283 0
7758 146 285 0
7758 148 5 0
7758 148 272 3 0
7758 148 273 2 0
7758 148 275 0
7758 148 277 0
7758 148 279 0
7758 148 281 0
7758 148 283 0
7758 148 285 0
7758 150 3 0
7758 150 272 2 0
7758 150 273 0
7758 150 275 0
7758 150 277 0
7758 150 279 0
7758 150 281 0
7758 150 283 0
7758 150 285 0
c (((x_00001_00002 + x_00001_00003)<=9)=tv=SATLiteral(7759))
-7759 45 0
-7759 17 43 0
-7759 18 41 0
-7759 20 39 0
-7759 22 37 0
-7759 24 35 0
-7759 26 33 0
-7759 28 32 0
-7759 30 0
7759 -30 -32 0
7759 -28 -33 0
7759 -26 -35 0
7759 -24 -37 0
7759 -22 -39 0
7759 -20 -41 0
7759 -18 -43 0
7759 -17 -45 0
c ((9<=(x_00001_00002 + x_00001_00003))=tv=SATLiteral(7760))
-7760 -28 -32 0
-7760 -26 -33 0
-7760 -24 -35 0
-7760 -22 -37 0
-7760 -20 -39 0
-7760 -18 -41 0
-7760 -17 -43 0
7760 43 0
7760 17 41 0
7760 18 39 0
7760 20 37 0
7760 22 35 0
7760 24 33 0
7760 26 32 0
7760 28 0
7760 30 0
c (((x_00001_00004 + x_00001_00005 + x_00001_00006)<=15)=tv=SATLiteral(7761))
-7761 69 90 0
-7761 71 88 0
-7761 73 86 0
-7761 75 84 0
-7761 47 67 90 0
-7761 47 69 88 0
-7761 47 71 86 0
-7761 47 73 84 0
-7761 47 75 82 0
-7761 48 65 90 0
-7761 48 67 88 0
-7761 48 69 86 0
-7761 48 71 84 0
-7761 48 73 82 0
-7761 48 75 80 0
-7761 50 63 90 0
-7761 50 65 88 0
-7761 50 67 86 0
-7761 50 69 84 0
-7761 50 71 82 0
-7761 50 73 80 0
-7761 50 75 78 0
-7761 52 62 90 0
-7761 52 63 88 0
-7761 52 65 86 0
-7761 52 67 84 0
-7761 52 69 82 0
-7761 52 71 80 0
-7761 52 73 78 0
-7761 52 75 77 0
-7761 54 90 0
-7761 54 62 88 0
-7761 54 63 86 0
-7761 54 65 84 0
-7761 54 67 82 0
-7761 54 69 80 0
-7761 54 71 78 0
-7761 54 73 77 0
-7761 54 75 0
-7761 56 88 0
-7761 56 62 86 0
-7761 56 63 84 0
-7761 56 65 82 0
-7761 56 67 80 0
-7761 56 69 78 0
-7761 56 71 77 0
-7761 56 73 0
-7761 56 75 0
-7761 58 86 0
-7761 58 62 84 0
-7761 58 63 82 0
-7761 58 65 80 0
-7761 58 67 78 0
-7761 58 69 77 0
-7761 58 71 0
-7761 58 73 0
-7761 58 75 0
-7761 60 84 0
-7761 60 62 82 0
-7761 60 63 80 0
-7761 60 65 78 0
-7761 60 67 77 0
-7761 60 69 0
-7761 60 71 0
-7761 60 73 0
-7761 60 75 0
7761 -69 -77 0
7761 -67 -78 0
7761 -65 -80 0
7761 -63 -82 0
7761 -62 -84 0
7761 -60 -71 -77 0
7761 -60 -69 -78 0
7761 -60 -67 -80 0
7761 -60 -65 -82 0
7761 -60 -63 -84 0
7761 -60 -62 -86 0
7761 -58 -73 -77 0
7761 -58 -71 -78 0
7761 -58 -69 -80 0
7761 -58 -67 -82 0
7761 -58 -65 -84 0
7761 -58 -63 -86 0
7761 -58 -62 -88 0
7761 -56 -75 -77 0
7761 -56 -73 -78 0
7761 -56 -71 -80 0
7761 -56 -69 -82 0
7761 -56 -67 -84 0
7761 -56 -65 -86 0
7761 -56 -63 -88 0
7761 -56 -62 -90 0
7761 -54 -77 0
7761 -54 -75 -78 0
7761 -54 -73 -80 0
7761 -54 -71 -82 0
7761 -54 -69 -84 0
7761 -54 -67 -86 0
7761 -54 -65 -88 0
7761 -54 -63 -90 0
7761 -54 -62 0
7761 -52 -78 0
7761 -52 -75 -80 0
7761 -52 -73 -82 0
7761 -52 -71 -84 0
7761 -52 -69 -86 0
7761 -52 -67 -88 0
7761 -52 -65 -90 0
7761 -52 -63 0
7761 -52 -62 0
7761 -50 -80 0
7761 -50 -75 -82 0
7761 -50 -73 -84 0
7761 -50 -71 -86 0
7761 -50 -69 -88 0
7761 -50 -67 -90 0
7761 -50 -65 0
7761 -50 -63 0
7761 -50 -62 0
7761 -48 -82 0
7761 -48 -75 -84 0
7761 -48 -73 -86 0
7761 -48 -71 -88 0
7761 -48 -69 -90 0
7761 -48 -67 0
7761 -48 -65 0
7761 -48 -63 0
7761 -48 -62 0
7761 -47 -84 0
7761 -47 -75 -86 0
7761 -47 -73 -88 0
7761 -47 -71 -90 0
7761 -47 -69 0
7761 -47 -67 0
7761 -47 -65 0
7761 -47 -63 0
7761 -47 -62 0
c ((15<=(x_00001_00004 + x_00001_00005 + x_00001_00006))=tv=SATLiteral(7762))
-7762 -67 -77 0
-7762 -65 -78 0
-7762 -63 -80 0
-7762 -62 -82 0
-7762 -60 -69 -77 0
-7762 -60 -67 -78 0
-7762 -60 -65 -80 0
-7762 -60 -63 -82 0
-7762 -60 -62 -84 0
-7762 -58 -71 -77 0
-7762 -58 -69 -78 0
-7762 -58 -67 -80 0
-7762 -58 -65 -82 0
-7762 -58 -63 -84 0
-7762 -58 -62 -86 0
-7762 -56 -73 -77 0
-7762 -56 -71 -78 0
-7762 -56 -69 -80 0
-7762 -56 -67 -82 0
-7762 -56 -65 -84 0
-7762 -56 -63 -86 0
-7762 -56 -62 -88 0
-7762 -54 -75 -77 0
-7762 -54 -73 -78 0
-7762 -54 -71 -80 0
-7762 -54 -69 -82 0
-7762 -54 -67 -84 0
-7762 -54 -65 -86 0
-7762 -54 -63 -88 0
-7762 -54 -62 -90 0
-7762 -52 -77 0
-7762 -52 -75 -78 0
-7762 -52 -73 -80 0
-7762 -52 -71 -82 0
-7762 -52 -69 -84 0
-7762 -52 -67 -86 0
-7762 -52 -65 -88 0
-7762 -52 -63 -90 0
-7762 -52 -62 0
-7762 -50 -78 0
-7762 -50 -75 -80 0
-7762 -50 -73 -82 0
-7762 -50 -71 -84 0
-7762 -50 -69 -86 0
-7762 -50 -67 -88 0
-7762 -50 -65 -90 0
-7762 -50 -63 0
-7762 -50 -62 0
-7762 -48 -80 0
-7762 -48 -75 -82 0
-7762 -48 -73 -84 0
-7762 -48 -71 -86 0
-7762 -48 -69 -88 0
-7762 -48 -67 -90 0
-7762 -48 -65 0
-7762 -48 -63 0
-7762 -48 -62 0
-7762 -47 -82 0
-7762 -47 -75 -84 0
-7762 -47 -73 -86 0
-7762 -47 -71 -88 0
-7762 -47 -69 -90 0
-7762 -47 -67 0
-7762 -47 -65 0
-7762 -47 -63 0
-7762 -47 -62 0
7762 67 90 0
7762 69 88 0
7762 71 86 0
7762 73 84 0
7762 75 82 0
7762 47 65 90 0
7762 47 67 88 0
7762 47 69 86 0
7762 47 71 84 0
7762 47 73 82 0
7762 47 75 80 0
7762 48 63 90 0
7762 48 65 88 0
7762 48 67 86 0
7762 48 69 84 0
7762 48 71 82 0
7762 48 73 80 0
7762 48 75 78 0
7762 50 62 90 0
7762 50 63 88 0
7762 50 65 86 0
7762 50 67 84 0
7762 50 69 82 0
7762 50 71 80 0
7762 50 73 78 0
7762 50 75 77 0
7762 52 90 0
7762 52 62 88 0
7762 52 63 86 0
7762 52 65 84 0
7762 52 67 82 0
7762 52 69 80 0
7762 52 71 78 0
7762 52 73 77 0
7762 52 75 0
7762 54 88 0
7762 54 62 86 0
7762 54 63 84 0
7762 54 65 82 0
7762 54 67 80 0
7762 54 69 78 0
7762 54 71 77 0
7762 54 73 0
7762 54 75 0
7762 56 86 0
7762 56 62 84 0
7762 56 63 82 0
7762 56 65 80 0
7762 56 67 78 0
7762 56 69 77 0
7762 56 71 0
7762 56 73 0
7762 56 75 0
7762 58 84 0
7762 58 62 82 0
7762 58 63 80 0
7762 58 65 78 0
7762 58 67 77 0
7762 58 69 0
7762 58 71 0
7762 58 73 0
7762 58 75 0
7762 60 82 0
7762 60 62 80 0
7762 60 63 78 0
7762 60 65 77 0
7762 60 67 0
7762 60 69 0
7762 60 71 0
7762 60 73 0
7762 60 75 0
c (((x_00002_00006 + x_00002_00007 + x_00001_00007)<=13)=tv=SATLiteral(7763))
-7763 230 105 0
-7763 232 103 0
-7763 234 101 0
-7763 236 99 0
-7763 238 97 0
-7763 240 95 0
-7763 212 228 105 0
-7763 212 230 103 0
-7763 212 232 101 0
-7763 212 234 99 0
-7763 212 236 97 0
-7763 212 238 95 0
-7763 212 240 93 0
-7763 213 227 105 0
-7763 213 228 103 0
-7763 213 230 101 0
-7763 213 232 99 0
-7763 213 234 97 0
-7763 213 236 95 0
-7763 213 238 93 0
-7763 213 240 92 0
-7763 215 105 0
-7763 215 227 103 0
-7763 215 228 101 0
-7763 215 230 99 0
-7763 215 232 97 0
-7763 215 234 95 0
-7763 215 236 93 0
-7763 215 238 92 0
-7763 215 240 0
-7763 217 103 0
-7763 217 227 101 0
-7763 217 228 99 0
-7763 217 230 97 0
-7763 217 232 95 0
-7763 217 234 93 0
-7763 217 236 92 0
-7763 217 238 0
-7763 217 240 0
-7763 219 101 0
-7763 219 227 99 0
-7763 219 228 97 0
-7763 219 230 95 0
-7763 219 232 93 0
-7763 219 234 92 0
-7763 219 236 0
-7763 219 238 0
-7763 219 240 0
-7763 221 99 0
-7763 221 227 97 0
-7763 221 228 95 0
-7763 221 230 93 0
-7763 221 232 92 0
-7763 221 234 0
-7763 221 236 0
-7763 221 238 0
-7763 221 240 0
-7763 223 97 0
-7763 223 227 95 0
-7763 223 228 93 0
-7763 223 230 92 0
-7763 223 232 0
-7763 223 234 0
-7763 223 236 0
-7763 223 238 0
-7763 223 240 0
-7763 225 95 0
-7763 225 227 93 0
-7763 225 228 92 0
-7763 225 230 0
-7763 225 232 0
-7763 225 234 0
-7763 225 236 0
-7763 225 238 0
-7763 225 240 0
7763 -230 -92 0
7763 -228 -93 0
7763 -227 -95 0
7763 -225 -232 -92 0
7763 -225 -230 -93 0
7763 -225 -228 -95 0
7763 -225 -227 -97 0
7763 -223 -234 -92 0
7763 -223 -232 -93 0
7763 -223 -230 -95 0
7763 -223 -228 -97 0
7763 -223 -227 -99 0
7763 -221 -236 -92 0
7763 -221 -234 -93 0
7763 -221 -232 -95 0
7763 -221 -230 -97 0
7763 -221 -228 -99 0
7763 -221 -227 -101 0
7763 -219 -238 -92 0
7763 -219 -236 -93 0
7763 -219 -234 -95 0
7763 -219 -232 -97 0
7763 -219 -230 -99 0
7763 -219 -228 -101 0
7763 -219 -227 -103 0
7763 -217 -240 -92 0
7763 -217 -238 -93 0
7763 -217 -236 -95 0
7763 -217 -234 -97 0
7763 -217 -232 -99 0
7763 -217 -230 -101 0
7763 -217 -228 -103 0
7763 -217 -227 -105 0
7763 -215 -92 0
7763 -215 -240 -93 0
7763 -215 -238 -95 0
7763 -215 -236 -97 0
7763 -215 -234 -99 0
7763 -215 -232 -101 0
7763 -215 -230 -103 0
7763 -215 -228 -105 0
7763 -215 -227 0
7763 -213 -93 0
7763 -213 -240 -95 0
7763 -213 -238 -97 0
7763 -213 -236 -99 0
7763 -213 -234 -101 0
7763 -213 -232 -103 0
7763 -213 -230 -105 0
7763 -213 -228 0
7763 -213 -227 0
7763 -212 -95 0
7763 -212 -240 -97 0
7763 -212 -238 -99 0
7763 -212 -236 -101 0
7763 -212 -234 -103 0
7763 -212 -232 -105 0
7763 -212 -230 0
7763 -212 -228 0
7763 -212 -227 0
c ((13<=(x_00002_00006 + x_00002_00007 + x_00001_00007))=tv=SATLiteral(7764))
-7764 -228 -92 0
-7764 -227 -93 0
-7764 -225 -230 -92 0
-7764 -225 -228 -93 0
-7764 -225 -227 -95 0
-7764 -223 -232 -92 0
-7764 -223 -230 -93 0
-7764 -223 -228 -95 0
-7764 -223 -227 -97 0
-7764 -221 -234 -92 0
-7764 -221 -232 -93 0
-7764 -221 -230 -95 0
-7764 -221 -228 -97 0
-7764 -221 -227 -99 0
-7764 -219 -236 -92 0
-7764 -219 -234 -93 0
-7764 -219 -232 -95 0
-7764 -219 -230 -97 0
-7764 -219 -228 -99 0
-7764 -219 -227 -101 0
-7764 -217 -238 -92 0
-7764 -217 -236 -93 0
-7764 -217 -234 -95 0
-7764 -217 -232 -97 0
-7764 -217 -230 -99 0
-7764 -217 -228 -101 0
-7764 -217 -227 -103 0
-7764 -215 -240 -92 0
-7764 -215 -238 -93 0
-7764 -215 -236 -95 0
-7764 -215 -234 -97 0
-7764 -215 -232 -99 0
-7764 -215 -230 -101 0
-7764 -215 -228 -103 0
-7764 -215 -227 -105 0
-7764 -213 -92 0
-7764 -213 -240 -93 0
-7764 -213 -238 -95 0
-7764 -213 -236 -97 0
-7764 -213 -234 -99 0
-7764 -213 -232 -101 0
-7764 -213 -230 -103 0
-7764 -213 -228 -105 0
-7764 -213 -227 0
-7764 -212 -93 0
-7764 -212 -240 -95 0
-7764 -212 -238 -97 0
-7764 -212 -236 -99 0
-7764 -212 -234 -101 0
-7764 -212 -232 -103 0
-7764 -212 -230 -105 0
-7764 -212 -228 0
-7764 -212 -227 0
7764 228 105 0
7764 230 103 0
7764 232 101 0
7764 234 99 0
7764 236 97 0
7764 238 95 0
7764 240 93 0
7764 212 227 105 0
7764 212 228 103 0
7764 212 230 101 0
7764 212 232 99 0
7764 212 234 97 0
7764 212 236 95 0
7764 212 238 93 0
7764 212 240 92 0
7764 213 105 0
7764 213 227 103 0
7764 213 228 101 0
7764 213 230 99 0
7764 213 232 97 0
7764 213 234 95 0
7764 213 236 93 0
7764 213 238 92 0
7764 213 240 0
7764 215 103 0
7764 215 227 101 0
7764 215 228 99 0
7764 215 230 97 0
7764 215 232 95 0
7764 215 234 93 0
7764 215 236 92 0
7764 215 238 0
7764 215 240 0
7764 217 101 0
7764 217 227 99 0
7764 217 228 97 0
7764 217 230 95 0
7764 217 232 93 0
7764 217 234 92 0
7764 217 236 0
7764 217 238 0
7764 217 240 0
7764 219 99 0
7764 219 227 97 0
7764 219 228 95 0
7764 219 230 93 0
7764 219 232 92 0
7764 219 234 0
7764 219 236 0
7764 219 238 0
7764 219 240 0
7764 221 97 0
7764 221 227 95 0
7764 221 228 93 0
7764 221 230 92 0
7764 221 232 0
7764 221 234 0
7764 221 236 0
7764 221 238 0
7764 221 240 0
7764 223 95 0
7764 223 227 93 0
7764 223 228 92 0
7764 223 230 0
7764 223 232 0
7764 223 234 0
7764 223 236 0
7764 223 238 0
7764 223 240 0
7764 225 93 0
7764 225 227 92 0
7764 225 228 0
7764 225 230 0
7764 225 232 0
7764 225 234 0
7764 225 236 0
7764 225 238 0
7764 225 240 0
c (((aux445 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1))<=21)=tv=SATLiteral(7765))
-7765 266 1780 0
-7765 268 1778 0
-7765 270 1776 0
-7765 107 264 1780 0
-7765 107 266 1778 0
-7765 107 268 1776 0
-7765 107 270 1774 0
-7765 108 262 1780 0
-7765 108 264 1778 0
-7765 108 266 1776 0
-7765 108 268 1774 0
-7765 108 270 1772 0
-7765 110 260 1780 0
-7765 110 262 1778 0
-7765 110 264 1776 0
-7765 110 266 1774 0
-7765 110 268 1772 0
-7765 110 270 1770 0
-7765 112 258 1780 0
-7765 112 260 1778 0
-7765 112 262 1776 0
-7765 112 264 1774 0
-7765 112 266 1772 0
-7765 112 268 1770 0
-7765 112 270 1768 0
-7765 114 257 1780 0
-7765 114 258 1778 0
-7765 114 260 1776 0
-7765 114 262 1774 0
-7765 114 264 1772 0
-7765 114 266 1770 0
-7765 114 268 1768 0
-7765 114 270 1766 0
-7765 116 1780 0
-7765 116 257 1778 0
-7765 116 258 1776 0
-7765 116 260 1774 0
-7765 116 262 1772 0
-7765 116 264 1770 0
-7765 116 266 1768 0
-7765 116 268 1766 0
-7765 116 270 1764 0
-7765 118 1778 0
-7765 118 257 1776 0
-7765 118 258 1774 0
-7765 118 260 1772 0
-7765 118 262 1770 0
-7765 118 264 1768 0
-7765 118 266 1766 0
-7765 118 268 1764 0
-7765 118 270 1762 0
-7765 120 1776 0
-7765 120 257 1774 0
-7765 120 258 1772 0
-7765 120 260 1770 0
-7765 120 262 1768 0
-7765 120 264 1766 0
-7765 120 266 1764 0
-7765 120 268 1762 0
-7765 120 270 1760 0
7765 -1760 0
7765 -270 -1762 0
7765 -268 -1764 0
7765 -266 -1766 0
7765 -264 -1768 0
7765 -262 -1770 0
7765 -260 -1772 0
7765 -258 -1774 0
7765 -257 -1776 0
7765 -120 -1762 0
7765 -120 -270 -1764 0
7765 -120 -268 -1766 0
7765 -120 -266 -1768 0
7765 -120 -264 -1770 0
7765 -120 -262 -1772 0
7765 -120 -260 -1774 0
7765 -120 -258 -1776 0
7765 -120 -257 -1778 0
7765 -118 -1764 0
7765 -118 -270 -1766 0
7765 -118 -268 -1768 0
7765 -118 -266 -1770 0
7765 -118 -264 -1772 0
7765 -118 -262 -1774 0
7765 -118 -260 -1776 0
7765 -118 -258 -1778 0
7765 -118 -257 -1780 0
7765 -116 -1766 0
7765 -116 -270 -1768 0
7765 -116 -268 -1770 0
7765 -116 -266 -1772 0
7765 -116 -264 -1774 0
7765 -116 -262 -1776 0
7765 -116 -260 -1778 0
7765 -116 -258 -1780 0
7765 -116 -257 0
7765 -114 -1768 0
7765 -114 -270 -1770 0
7765 -114 -268 -1772 0
7765 -114 -266 -1774 0
7765 -114 -264 -1776 0
7765 -114 -262 -1778 0
7765 -114 -260 -1780 0
7765 -114 -258 0
7765 -114 -257 0
7765 -112 -1770 0
7765 -112 -270 -1772 0
7765 -112 -268 -1774 0
7765 -112 -266 -1776 0
7765 -112 -264 -1778 0
7765 -112 -262 -1780 0
7765 -112 -260 0
7765 -112 -258 0
7765 -112 -257 0
7765 -110 -1772 0
7765 -110 -270 -1774 0
7765 -110 -268 -1776 0
7765 -110 -266 -1778 0
7765 -110 -264 -1780 0
7765 -110 -262 0
7765 -110 -260 0
7765 -110 -258 0
7765 -110 -257 0
7765 -108 -1774 0
7765 -108 -270 -1776 0
7765 -108 -268 -1778 0
7765 -108 -266 -1780 0
7765 -108 -264 0
7765 -108 -262 0
7765 -108 -260 0
7765 -108 -258 0
7765 -108 -257 0
7765 -107 -1776 0
7765 -107 -270 -1778 0
7765 -107 -268 -1780 0
7765 -107 -266 0
7765 -107 -264 0
7765 -107 -262 0
7765 -107 -260 0
7765 -107 -258 0
7765 -107 -257 0
c ((21<=(aux445 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1)))=tv=SATLiteral(7766))
-7766 -1758 0
-7766 -270 -1760 0
-7766 -268 -1762 0
-7766 -266 -1764 0
-7766 -264 -1766 0
-7766 -262 -1768 0
-7766 -260 -1770 0
-7766 -258 -1772 0
-7766 -257 -1774 0
-7766 -120 -1760 0
-7766 -120 -270 -1762 0
-7766 -120 -268 -1764 0
-7766 -120 -266 -1766 0
-7766 -120 -264 -1768 0
-7766 -120 -262 -1770 0
-7766 -120 -260 -1772 0
-7766 -120 -258 -1774 0
-7766 -120 -257 -1776 0
-7766 -118 -1762 0
-7766 -118 -270 -1764 0
-7766 -118 -268 -1766 0
-7766 -118 -266 -1768 0
-7766 -118 -264 -1770 0
-7766 -118 -262 -1772 0
-7766 -118 -260 -1774 0
-7766 -118 -258 -1776 0
-7766 -118 -257 -1778 0
-7766 -116 -1764 0
-7766 -116 -270 -1766 0
-7766 -116 -268 -1768 0
-7766 -116 -266 -1770 0
-7766 -116 -264 -1772 0
-7766 -116 -262 -1774 0
-7766 -116 -260 -1776 0
-7766 -116 -258 -1778 0
-7766 -116 -257 -1780 0
-7766 -114 -1766 0
-7766 -114 -270 -1768 0
-7766 -114 -268 -1770 0
-7766 -114 -266 -1772 0
-7766 -114 -264 -1774 0
-7766 -114 -262 -1776 0
-7766 -114 -260 -1778 0
-7766 -114 -258 -1780 0
-7766 -114 -257 0
-7766 -112 -1768 0
-7766 -112 -270 -1770 0
-7766 -112 -268 -1772 0
-7766 -112 -266 -1774 0
-7766 -112 -264 -1776 0
-7766 -112 -262 -1778 0
-7766 -112 -260 -1780 0
-7766 -112 -258 0
-7766 -112 -257 0
-7766 -110 -1770 0
-7766 -110 -270 -1772 0
-7766 -110 -268 -1774 0
-7766 -110 -266 -1776 0
-7766 -110 -264 -1778 0
-7766 -110 -262 -1780 0
-7766 -110 -260 0
-7766 -110 -258 0
-7766 -110 -257 0
-7766 -108 -1772 0
-7766 -108 -270 -1774 0
-7766 -108 -268 -1776 0
-7766 -108 -266 -1778 0
-7766 -108 -264 -1780 0
-7766 -108 -262 0
-7766 -108 -260 0
-7766 -108 -258 0
-7766 -108 -257 0
-7766 -107 -1774 0
-7766 -107 -270 -1776 0
-7766 -107 -268 -1778 0
-7766 -107 -266 -1780 0
-7766 -107 -264 0
-7766 -107 -262 0
-7766 -107 -260 0
-7766 -107 -258 0
-7766 -107 -257 0
7766 264 1780 0
7766 266 1778 0
7766 268 1776 0
7766 270 1774 0
7766 107 262 1780 0
7766 107 264 1778 0
7766 107 266 1776 0
7766 107 268 1774 0
7766 107 270 1772 0
7766 108 260 1780 0
7766 108 262 1778 0
7766 108 264 1776 0
7766 108 266 1774 0
7766 108 268 1772 0
7766 108 270 1770 0
7766 110 258 1780 0
7766 110 260 1778 0
7766 110 262 1776 0
7766 110 264 1774 0
7766 110 266 1772 0
7766 110 268 1770 0
7766 110 270 1768 0
7766 112 257 1780 0
7766 112 258 1778 0
7766 112 260 1776 0
7766 112 262 1774 0
7766 112 264 1772 0
7766 112 266 1770 0
7766 112 268 1768 0
7766 112 270 1766 0
7766 114 1780 0
7766 114 257 1778 0
7766 114 258 1776 0
7766 114 260 1774 0
7766 114 262 1772 0
7766 114 264 1770 0
7766 114 266 1768 0
7766 114 268 1766 0
7766 114 270 1764 0
7766 116 1778 0
7766 116 257 1776 0
7766 116 258 1774 0
7766 116 260 1772 0
7766 116 262 1770 0
7766 116 264 1768 0
7766 116 266 1766 0
7766 116 268 1764 0
7766 116 270 1762 0
7766 118 1776 0
7766 118 257 1774 0
7766 118 258 1772 0
7766 118 260 1770 0
7766 118 262 1768 0
7766 118 264 1766 0
7766 118 266 1764 0
7766 118 268 1762 0
7766 118 270 1760 0
7766 120 1774 0
7766 120 257 1772 0
7766 120 258 1770 0
7766 120 260 1768 0
7766 120 262 1766 0
7766 120 264 1764 0
7766 120 266 1762 0
7766 120 268 1760 0
7766 120 270 1758 0
c (((x_00002_00002 + x_00002_00003)<=13)=tv=SATLiteral(7767))
-7767 157 180 0
-7767 159 178 0
-7767 161 176 0
-7767 163 174 0
-7767 165 172 0
7767 -172 0
7767 -165 -174 0
7767 -163 -176 0
7767 -161 -178 0
7767 -159 -180 0
7767 -157 0
7767 -155 0
7767 -153 0
7767 -152 0
c ((13<=(x_00002_00002 + x_00002_00003))=tv=SATLiteral(7768))
-7768 -170 0
-7768 -165 -172 0
-7768 -163 -174 0
-7768 -161 -176 0
-7768 -159 -178 0
-7768 -157 -180 0
-7768 -155 0
-7768 -153 0
-7768 -152 0
7768 155 180 0
7768 157 178 0
7768 159 176 0
7768 161 174 0
7768 163 172 0
7768 165 170 0
c (((x_00002_00004 + x_00002_00005)<=8)=tv=SATLiteral(7769))
-7769 208 0
-7769 182 206 0
-7769 183 204 0
-7769 185 202 0
-7769 187 200 0
-7769 189 198 0
-7769 191 197 0
-7769 193 0
-7769 195 0
7769 -193 -197 0
7769 -191 -198 0
7769 -189 -200 0
7769 -187 -202 0
7769 -185 -204 0
7769 -183 -206 0
7769 -182 -208 0
c ((8<=(x_00002_00004 + x_00002_00005))=tv=SATLiteral(7770))
-7770 -191 -197 0
-7770 -189 -198 0
-7770 -187 -200 0
-7770 -185 -202 0
-7770 -183 -204 0
-7770 -182 -206 0
7770 206 0
7770 182 204 0
7770 183 202 0
7770 185 200 0
7770 187 198 0
7770 189 197 0
7770 191 0
7770 193 0
7770 195 0
c (((x_00003_00003 + x_00004_00003 + x_00005_00003)<=17)=tv=SATLiteral(7771))
-7771 448 585 0
-7771 450 583 0
-7771 302 446 585 0
-7771 302 448 583 0
-7771 302 450 581 0
-7771 303 444 585 0
-7771 303 446 583 0
-7771 303 448 581 0
-7771 303 450 579 0
-7771 305 442 585 0
-7771 305 444 583 0
-7771 305 446 581 0
-7771 305 448 579 0
-7771 305 450 577 0
-7771 307 440 585 0
-7771 307 442 583 0
-7771 307 444 581 0
-7771 307 446 579 0
-7771 307 448 577 0
-7771 307 450 575 0
-7771 309 438 585 0
-7771 309 440 583 0
-7771 309 442 581 0
-7771 309 444 579 0
-7771 309 446 577 0
-7771 309 448 575 0
-7771 309 450 573 0
-7771 311 437 585 0
-7771 311 438 583 0
-7771 311 440 581 0
-7771 311 442 579 0
-7771 311 444 577 0
-7771 311 446 575 0
-7771 311 448 573 0
-7771 311 450 572 0
-7771 313 585 0
-7771 313 437 583 0
-7771 313 438 581 0
-7771 313 440 579 0
-7771 313 442 577 0
-7771 313 444 575 0
-7771 313 446 573 0
-7771 313 448 572 0
-7771 313 450 0
-7771 315 583 0
-7771 315 437 581 0
-7771 315 438 579 0
-7771 315 440 577 0
-7771 315 442 575 0
-7771 315 444 573 0
-7771 315 446 572 0
-7771 315 448 0
-7771 315 450 0
7771 -448 -572 0
7771 -446 -573 0
7771 -444 -575 0
7771 -442 -577 0
7771 -440 -579 0
7771 -438 -581 0
7771 -437 -583 0
7771 -315 -450 -572 0
7771 -315 -448 -573 0
7771 -315 -446 -575 0
7771 -315 -444 -577 0
7771 -315 -442 -579 0
7771 -315 -440 -581 0
7771 -315 -438 -583 0
7771 -315 -437 -585 0
7771 -313 -572 0
7771 -313 -450 -573 0
7771 -313 -448 -575 0
7771 -313 -446 -577 0
7771 -313 -444 -579 0
7771 -313 -442 -581 0
7771 -313 -440 -583 0
7771 -313 -438 -585 0
7771 -313 -437 0
7771 -311 -573 0
7771 -311 -450 -575 0
7771 -311 -448 -577 0
7771 -311 -446 -579 0
7771 -311 -444 -581 0
7771 -311 -442 -583 0
7771 -311 -440 -585 0
7771 -311 -438 0
7771 -311 -437 0
7771 -309 -575 0
7771 -309 -450 -577 0
7771 -309 -448 -579 0
7771 -309 -446 -581 0
7771 -309 -444 -583 0
7771 -309 -442 -585 0
7771 -309 -440 0
7771 -309 -438 0
7771 -309 -437 0
7771 -307 -577 0
7771 -307 -450 -579 0
7771 -307 -448 -581 0
7771 -307 -446 -583 0
7771 -307 -444 -585 0
7771 -307 -442 0
7771 -307 -440 0
7771 -307 -438 0
7771 -307 -437 0
7771 -305 -579 0
7771 -305 -450 -581 0
7771 -305 -448 -583 0
7771 -305 -446 -585 0
7771 -305 -444 0
7771 -305 -442 0
7771 -305 -440 0
7771 -305 -438 0
7771 -305 -437 0
7771 -303 -581 0
7771 -303 -450 -583 0
7771 -303 -448 -585 0
7771 -303 -446 0
7771 -303 -444 0
7771 -303 -442 0
7771 -303 -440 0
7771 -303 -438 0
7771 -303 -437 0
7771 -302 -583 0
7771 -302 -450 -585 0
7771 -302 -448 0
7771 -302 -446 0
7771 -302 -444 0
7771 -302 -442 0
7771 -302 -440 0
7771 -302 -438 0
7771 -302 -437 0
c ((17<=(x_00003_00003 + x_00004_00003 + x_00005_00003))=tv=SATLiteral(7772))
-7772 -446 -572 0
-7772 -444 -573 0
-7772 -442 -575 0
-7772 -440 -577 0
-7772 -438 -579 0
-7772 -437 -581 0
-7772 -315 -448 -572 0
-7772 -315 -446 -573 0
-7772 -315 -444 -575 0
-7772 -315 -442 -577 0
-7772 -315 -440 -579 0
-7772 -315 -438 -581 0
-7772 -315 -437 -583 0
-7772 -313 -450 -572 0
-7772 -313 -448 -573 0
-7772 -313 -446 -575 0
-7772 -313 -444 -577 0
-7772 -313 -442 -579 0
-7772 -313 -440 -581 0
-7772 -313 -438 -583 0
-7772 -313 -437 -585 0
-7772 -311 -572 0
-7772 -311 -450 -573 0
-7772 -311 -448 -575 0
-7772 -311 -446 -577 0
-7772 -311 -444 -579 0
-7772 -311 -442 -581 0
-7772 -311 -440 -583 0
-7772 -311 -438 -585 0
-7772 -311 -437 0
-7772 -309 -573 0
-7772 -309 -450 -575 0
-7772 -309 -448 -577 0
-7772 -309 -446 -579 0
-7772 -309 -444 -581 0
-7772 -309 -442 -583 0
-7772 -309 -440 -585 0
-7772 -309 -438 0
-7772 -309 -437 0
-7772 -307 -575 0
-7772 -307 -450 -577 0
-7772 -307 -448 -579 0
-7772 -307 -446 -581 0
-7772 -307 -444 -583 0
-7772 -307 -442 -585 0
-7772 -307 -440 0
-7772 -307 -438 0
-7772 -307 -437 0
-7772 -305 -577 0
-7772 -305 -450 -579 0
-7772 -305 -448 -581 0
-7772 -305 -446 -583 0
-7772 -305 -444 -585 0
-7772 -305 -442 0
-7772 -305 -440 0
-7772 -305 -438 0
-7772 -305 -437 0
-7772 -303 -579 0
-7772 -303 -450 -581 0
-7772 -303 -448 -583 0
-7772 -303 -446 -585 0
-7772 -303 -444 0
-7772 -303 -442 0
-7772 -303 -440 0
-7772 -303 -438 0
-7772 -303 -437 0
-7772 -302 -581 0
-7772 -302 -450 -583 0
-7772 -302 -448 -585 0
-7772 -302 -446 0
-7772 -302 -444 0
-7772 -302 -442 0
-7772 -302 -440 0
-7772 -302 -438 0
-7772 -302 -437 0
7772 446 585 0
7772 448 583 0
7772 450 581 0
7772 302 444 585 0
7772 302 446 583 0
7772 302 448 581 0
7772 302 450 579 0
7772 303 442 585 0
7772 303 444 583 0
7772 303 446 581 0
7772 303 448 579 0
7772 303 450 577 0
7772 305 440 585 0
7772 305 442 583 0
7772 305 444 581 0
7772 305 446 579 0
7772 305 448 577 0
7772 305 450 575 0
7772 307 438 585 0
7772 307 440 583 0
7772 307 442 581 0
7772 307 444 579 0
7772 307 446 577 0
7772 307 448 575 0
7772 307 450 573 0
7772 309 437 585 0
7772 309 438 583 0
7772 309 440 581 0
7772 309 442 579 0
7772 309 444 577 0
7772 309 446 575 0
7772 309 448 573 0
7772 309 450 572 0
7772 311 585 0
7772 311 437 583 0
7772 311 438 581 0
7772 311 440 579 0
7772 311 442 577 0
7772 311 444 575 0
7772 311 446 573 0
7772 311 448 572 0
7772 311 450 0
7772 313 583 0
7772 313 437 581 0
7772 313 438 579 0
7772 313 440 577 0
7772 313 442 575 0
7772 313 444 573 0
7772 313 446 572 0
7772 313 448 0
7772 313 450 0
7772 315 581 0
7772 315 437 579 0
7772 315 438 577 0
7772 315 440 575 0
7772 315 442 573 0
7772 315 444 572 0
7772 315 446 0
7772 315 448 0
7772 315 450 0
c (((x_00003_00005 + x_00003_00006)<=11)=tv=SATLiteral(7773))
-7773 333 360 0
-7773 335 358 0
-7773 337 356 0
-7773 339 354 0
-7773 341 352 0
-7773 343 350 0
-7773 345 348 0
7773 -348 0
7773 -345 -350 0
7773 -343 -352 0
7773 -341 -354 0
7773 -339 -356 0
7773 -337 -358 0
7773 -335 -360 0
7773 -333 0
7773 -332 0
c ((11<=(x_00003_00005 + x_00003_00006))=tv=SATLiteral(7774))
-7774 -347 0
-7774 -345 -348 0
-7774 -343 -350 0
-7774 -341 -352 0
-7774 -339 -354 0
-7774 -337 -356 0
-7774 -335 -358 0
-7774 -333 -360 0
-7774 -332 0
7774 332 360 0
7774 333 358 0
7774 335 356 0
7774 337 354 0
7774 339 352 0
7774 341 350 0
7774 343 348 0
7774 345 347 0
c (((x_00003_00007 + x_00003_00008)<=9)=tv=SATLiteral(7775))
-7775 390 0
-7775 362 388 0
-7775 363 386 0
-7775 365 384 0
-7775 367 382 0
-7775 369 380 0
-7775 371 378 0
-7775 373 377 0
-7775 375 0
7775 -375 -377 0
7775 -373 -378 0
7775 -371 -380 0
7775 -369 -382 0
7775 -367 -384 0
7775 -365 -386 0
7775 -363 -388 0
7775 -362 -390 0
c ((9<=(x_00003_00007 + x_00003_00008))=tv=SATLiteral(7776))
-7776 -373 -377 0
-7776 -371 -378 0
-7776 -369 -380 0
-7776 -367 -382 0
-7776 -365 -384 0
-7776 -363 -386 0
-7776 -362 -388 0
7776 388 0
7776 362 386 0
7776 363 384 0
7776 365 382 0
7776 367 380 0
7776 369 378 0
7776 371 377 0
7776 373 0
7776 375 0
c (((x_00003_00009 + x_00004_00009)<=10)=tv=SATLiteral(7777))
-7777 392 540 0
-7777 393 538 0
-7777 395 536 0
-7777 397 534 0
-7777 399 532 0
-7777 401 530 0
-7777 403 528 0
-7777 405 527 0
7777 -527 0
7777 -405 -528 0
7777 -403 -530 0
7777 -401 -532 0
7777 -399 -534 0
7777 -397 -536 0
7777 -395 -538 0
7777 -393 -540 0
7777 -392 0
c ((10<=(x_00003_00009 + x_00004_00009))=tv=SATLiteral(7778))
-7778 -405 -527 0
-7778 -403 -528 0
-7778 -401 -530 0
-7778 -399 -532 0
-7778 -397 -534 0
-7778 -395 -536 0
-7778 -393 -538 0
-7778 -392 -540 0
7778 540 0
7778 392 538 0
7778 393 536 0
7778 395 534 0
7778 397 532 0
7778 399 530 0
7778 401 528 0
7778 403 527 0
7778 405 0
c (((x_00004_00001 + x_00004_00002 + x_00005_00001)<=17)=tv=SATLiteral(7779))
-7779 433 555 0
-7779 435 553 0
-7779 407 431 555 0
-7779 407 433 553 0
-7779 407 435 551 0
-7779 408 429 555 0
-7779 408 431 553 0
-7779 408 433 551 0
-7779 408 435 549 0
-7779 410 427 555 0
-7779 410 429 553 0
-7779 410 431 551 0
-7779 410 433 549 0
-7779 410 435 547 0
-7779 412 425 555 0
-7779 412 427 553 0
-7779 412 429 551 0
-7779 412 431 549 0
-7779 412 433 547 0
-7779 412 435 545 0
-7779 414 423 555 0
-7779 414 425 553 0
-7779 414 427 551 0
-7779 414 429 549 0
-7779 414 431 547 0
-7779 414 433 545 0
-7779 414 435 543 0
-7779 416 422 555 0
-7779 416 423 553 0
-7779 416 425 551 0
-7779 416 427 549 0
-7779 416 429 547 0
-7779 416 431 545 0
-7779 416 433 543 0
-7779 416 435 542 0
-7779 418 555 0
-7779 418 422 553 0
-7779 418 423 551 0
-7779 418 425 549 0
-7779 418 427 547 0
-7779 418 429 545 0
-7779 418 431 543 0
-7779 418 433 542 0
-7779 418 435 0
-7779 420 553 0
-7779 420 422 551 0
-7779 420 423 549 0
-7779 420 425 547 0
-7779 420 427 545 0
-7779 420 429 543 0
-7779 420 431 542 0
-7779 420 433 0
-7779 420 435 0
7779 -433 -542 0
7779 -431 -543 0
7779 -429 -545 0
7779 -427 -547 0
7779 -425 -549 0
7779 -423 -551 0
7779 -422 -553 0
7779 -420 -435 -542 0
7779 -420 -433 -543 0
7779 -420 -431 -545 0
7779 -420 -429 -547 0
7779 -420 -427 -549 0
7779 -420 -425 -551 0
7779 -420 -423 -553 0
7779 -420 -422 -555 0
7779 -418 -542 0
7779 -418 -435 -543 0
7779 -418 -433 -545 0
7779 -418 -431 -547 0
7779 -418 -429 -549 0
7779 -418 -427 -551 0
7779 -418 -425 -553 0
7779 -418 -423 -555 0
7779 -418 -422 0
7779 -416 -543 0
7779 -416 -435 -545 0
7779 -416 -433 -547 0
7779 -416 -431 -549 0
7779 -416 -429 -551 0
7779 -416 -427 -553 0
7779 -416 -425 -555 0
7779 -416 -423 0
7779 -416 -422 0
7779 -414 -545 0
7779 -414 -435 -547 0
7779 -414 -433 -549 0
7779 -414 -431 -551 0
7779 -414 -429 -553 0
7779 -414 -427 -555 0
7779 -414 -425 0
7779 -414 -423 0
7779 -414 -422 0
7779 -412 -547 0
7779 -412 -435 -549 0
7779 -412 -433 -551 0
7779 -412 -431 -553 0
7779 -412 -429 -555 0
7779 -412 -427 0
7779 -412 -425 0
7779 -412 -423 0
7779 -412 -422 0
7779 -410 -549 0
7779 -410 -435 -551 0
7779 -410 -433 -553 0
7779 -410 -431 -555 0
7779 -410 -429 0
7779 -410 -427 0
7779 -410 -425 0
7779 -410 -423 0
7779 -410 -422 0
7779 -408 -551 0
7779 -408 -435 -553 0
7779 -408 -433 -555 0
7779 -408 -431 0
7779 -408 -429 0
7779 -408 -427 0
7779 -408 -425 0
7779 -408 -423 0
7779 -408 -422 0
7779 -407 -553 0
7779 -407 -435 -555 0
7779 -407 -433 0
7779 -407 -431 0
7779 -407 -429 0
7779 -407 -427 0
7779 -407 -425 0
7779 -407 -423 0
7779 -407 -422 0
c ((17<=(x_00004_00001 + x_00004_00002 + x_00005_00001))=tv=SATLiteral(7780))
-7780 -431 -542 0
-7780 -429 -543 0
-7780 -427 -545 0
-7780 -425 -547 0
-7780 -423 -549 0
-7780 -422 -551 0
-7780 -420 -433 -542 0
-7780 -420 -431 -543 0
-7780 -420 -429 -545 0
-7780 -420 -427 -547 0
-7780 -420 -425 -549 0
-7780 -420 -423 -551 0
-7780 -420 -422 -553 0
-7780 -418 -435 -542 0
-7780 -418 -433 -543 0
-7780 -418 -431 -545 0
-7780 -418 -429 -547 0
-7780 -418 -427 -549 0
-7780 -418 -425 -551 0
-7780 -418 -423 -553 0
-7780 -418 -422 -555 0
-7780 -416 -542 0
-7780 -416 -435 -543 0
-7780 -416 -433 -545 0
-7780 -416 -431 -547 0
-7780 -416 -429 -549 0
-7780 -416 -427 -551 0
-7780 -416 -425 -553 0
-7780 -416 -423 -555 0
-7780 -416 -422 0
-7780 -414 -543 0
-7780 -414 -435 -545 0
-7780 -414 -433 -547 0
-7780 -414 -431 -549 0
-7780 -414 -429 -551 0
-7780 -414 -427 -553 0
-7780 -414 -425 -555 0
-7780 -414 -423 0
-7780 -414 -422 0
-7780 -412 -545 0
-7780 -412 -435 -547 0
-7780 -412 -433 -549 0
-7780 -412 -431 -551 0
-7780 -412 -429 -553 0
-7780 -412 -427 -555 0
-7780 -412 -425 0
-7780 -412 -423 0
-7780 -412 -422 0
-7780 -410 -547 0
-7780 -410 -435 -549 0
-7780 -410 -433 -551 0
-7780 -410 -431 -553 0
-7780 -410 -429 -555 0
-7780 -410 -427 0
-7780 -410 -425 0
-7780 -410 -423 0
-7780 -410 -422 0
-7780 -408 -549 0
-7780 -408 -435 -551 0
-7780 -408 -433 -553 0
-7780 -408 -431 -555 0
-7780 -408 -429 0
-7780 -408 -427 0
-7780 -408 -425 0
-7780 -408 -423 0
-7780 -408 -422 0
-7780 -407 -551 0
-7780 -407 -435 -553 0
-7780 -407 -433 -555 0
-7780 -407 -431 0
-7780 -407 -429 0
-7780 -407 -427 0
-7780 -407 -425 0
-7780 -407 -423 0
-7780 -407 -422 0
7780 431 555 0
7780 433 553 0
7780 435 551 0
7780 407 429 555 0
7780 407 431 553 0
7780 407 433 551 0
7780 407 435 549 0
7780 408 427 555 0
7780 408 429 553 0
7780 408 431 551 0
7780 408 433 549 0
7780 408 435 547 0
7780 410 425 555 0
7780 410 427 553 0
7780 410 429 551 0
7780 410 431 549 0
7780 410 433 547 0
7780 410 435 545 0
7780 412 423 555 0
7780 412 425 553 0
7780 412 427 551 0
7780 412 429 549 0
7780 412 431 547 0
7780 412 433 545 0
7780 412 435 543 0
7780 414 422 555 0
7780 414 423 553 0
7780 414 425 551 0
7780 414 427 549 0
7780 414 429 547 0
7780 414 431 545 0
7780 414 433 543 0
7780 414 435 542 0
7780 416 555 0
7780 416 422 553 0
7780 416 423 551 0
7780 416 425 549 0
7780 416 427 547 0
7780 416 429 545 0
7780 416 431 543 0
7780 416 433 542 0
7780 416 435 0
7780 418 553 0
7780 418 422 551 0
7780 418 423 549 0
7780 418 425 547 0
7780 418 427 545 0
7780 418 429 543 0
7780 418 431 542 0
7780 418 433 0
7780 418 435 0
7780 420 551 0
7780 420 422 549 0
7780 420 423 547 0
7780 420 425 545 0
7780 420 427 543 0
7780 420 429 542 0
7780 420 431 0
7780 420 433 0
7780 420 435 0
c (((aux446 + shift(x_00005_00004, -1) + shift(x_00004_00005, -1))<=24)=tv=SATLiteral(7781))
-7781 587 480 1811 0
-7781 588 478 1811 0
-7781 588 480 1809 0
-7781 590 476 1811 0
-7781 590 478 1809 0
-7781 590 480 1807 0
-7781 592 474 1811 0
-7781 592 476 1809 0
-7781 592 478 1807 0
-7781 592 480 1805 0
-7781 594 472 1811 0
-7781 594 474 1809 0
-7781 594 476 1807 0
-7781 594 478 1805 0
-7781 594 480 1803 0
-7781 596 470 1811 0
-7781 596 472 1809 0
-7781 596 474 1807 0
-7781 596 476 1805 0
-7781 596 478 1803 0
-7781 596 480 1801 0
-7781 598 468 1811 0
-7781 598 470 1809 0
-7781 598 472 1807 0
-7781 598 474 1805 0
-7781 598 476 1803 0
-7781 598 478 1801 0
-7781 598 480 1799 0
-7781 600 467 1811 0
-7781 600 468 1809 0
-7781 600 470 1807 0
-7781 600 472 1805 0
-7781 600 474 1803 0
-7781 600 476 1801 0
-7781 600 478 1799 0
-7781 600 480 1797 0
7781 -1797 0
7781 -480 -1799 0
7781 -478 -1801 0
7781 -476 -1803 0
7781 -474 -1805 0
7781 -472 -1807 0
7781 -470 -1809 0
7781 -468 -1811 0
7781 -467 0
7781 -600 -1799 0
7781 -600 -480 -1801 0
7781 -600 -478 -1803 0
7781 -600 -476 -1805 0
7781 -600 -474 -1807 0
7781 -600 -472 -1809 0
7781 -600 -470 -1811 0
7781 -600 -468 0
7781 -600 -467 0
7781 -598 -1801 0
7781 -598 -480 -1803 0
7781 -598 -478 -1805 0
7781 -598 -476 -1807 0
7781 -598 -474 -1809 0
7781 -598 -472 -1811 0
7781 -598 -470 0
7781 -598 -468 0
7781 -598 -467 0
7781 -596 -1803 0
7781 -596 -480 -1805 0
7781 -596 -478 -1807 0
7781 -596 -476 -1809 0
7781 -596 -474 -1811 0
7781 -596 -472 0
7781 -596 -470 0
7781 -596 -468 0
7781 -596 -467 0
7781 -594 -1805 0
7781 -594 -480 -1807 0
7781 -594 -478 -1809 0
7781 -594 -476 -1811 0
7781 -594 -474 0
7781 -594 -472 0
7781 -594 -470 0
7781 -594 -468 0
7781 -594 -467 0
7781 -592 -1807 0
7781 -592 -480 -1809 0
7781 -592 -478 -1811 0
7781 -592 -476 0
7781 -592 -474 0
7781 -592 -472 0
7781 -592 -470 0
7781 -592 -468 0
7781 -592 -467 0
7781 -590 -1809 0
7781 -590 -480 -1811 0
7781 -590 -478 0
7781 -590 -476 0
7781 -590 -474 0
7781 -590 -472 0
7781 -590 -470 0
7781 -590 -468 0
7781 -590 -467 0
7781 -588 -1811 0
7781 -588 -480 0
7781 -588 -478 0
7781 -588 -476 0
7781 -588 -474 0
7781 -588 -472 0
7781 -588 -470 0
7781 -588 -468 0
7781 -588 -467 0
7781 -587 0
7781 -587 -480 0
7781 -587 -478 0
7781 -587 -476 0
7781 -587 -474 0
7781 -587 -472 0
7781 -587 -470 0
7781 -587 -468 0
7781 -587 -467 0
c ((24<=(aux446 + shift(x_00005_00004, -1) + shift(x_00004_00005, -1)))=tv=SATLiteral(7782))
-7782 -1795 0
-7782 -480 -1797 0
-7782 -478 -1799 0
-7782 -476 -1801 0
-7782 -474 -1803 0
-7782 -472 -1805 0
-7782 -470 -1807 0
-7782 -468 -1809 0
-7782 -467 -1811 0
-7782 -600 -1797 0
-7782 -600 -480 -1799 0
-7782 -600 -478 -1801 0
-7782 -600 -476 -1803 0
-7782 -600 -474 -1805 0
-7782 -600 -472 -1807 0
-7782 -600 -470 -1809 0
-7782 -600 -468 -1811 0
-7782 -600 -467 0
-7782 -598 -1799 0
-7782 -598 -480 -1801 0
-7782 -598 -478 -1803 0
-7782 -598 -476 -1805 0
-7782 -598 -474 -1807 0
-7782 -598 -472 -1809 0
-7782 -598 -470 -1811 0
-7782 -598 -468 0
-7782 -598 -467 0
-7782 -596 -1801 0
-7782 -596 -480 -1803 0
-7782 -596 -478 -1805 0
-7782 -596 -476 -1807 0
-7782 -596 -474 -1809 0
-7782 -596 -472 -1811 0
-7782 -596 -470 0
-7782 -596 -468 0
-7782 -596 -467 0
-7782 -594 -1803 0
-7782 -594 -480 -1805 0
-7782 -594 -478 -1807 0
-7782 -594 -476 -1809 0
-7782 -594 -474 -1811 0
-7782 -594 -472 0
-7782 -594 -470 0
-7782 -594 -468 0
-7782 -594 -467 0
-7782 -592 -1805 0
-7782 -592 -480 -1807 0
-7782 -592 -478 -1809 0
-7782 -592 -476 -1811 0
-7782 -592 -474 0
-7782 -592 -472 0
-7782 -592 -470 0
-7782 -592 -468 0
-7782 -592 -467 0
-7782 -590 -1807 0
-7782 -590 -480 -1809 0
-7782 -590 -478 -1811 0
-7782 -590 -476 0
-7782 -590 -474 0
-7782 -590 -472 0
-7782 -590 -470 0
-7782 -590 -468 0
-7782 -590 -467 0
-7782 -588 -1809 0
-7782 -588 -480 -1811 0
-7782 -588 -478 0
-7782 -588 -476 0
-7782 -588 -474 0
-7782 -588 -472 0
-7782 -588 -470 0
-7782 -588 -468 0
-7782 -588 -467 0
-7782 -587 -1811 0
-7782 -587 -480 0
-7782 -587 -478 0
-7782 -587 -476 0
-7782 -587 -474 0
-7782 -587 -472 0
-7782 -587 -470 0
-7782 -587 -468 0
-7782 -587 -467 0
7782 480 1811 0
7782 587 478 1811 0
7782 587 480 1809 0
7782 588 476 1811 0
7782 588 478 1809 0
7782 588 480 1807 0
7782 590 474 1811 0
7782 590 476 1809 0
7782 590 478 1807 0
7782 590 480 1805 0
7782 592 472 1811 0
7782 592 474 1809 0
7782 592 476 1807 0
7782 592 478 1805 0
7782 592 480 1803 0
7782 594 470 1811 0
7782 594 472 1809 0
7782 594 474 1807 0
7782 594 476 1805 0
7782 594 478 1803 0
7782 594 480 1801 0
7782 596 468 1811 0
7782 596 470 1809 0
7782 596 472 1807 0
7782 596 474 1805 0
7782 596 476 1803 0
7782 596 478 1801 0
7782 596 480 1799 0
7782 598 467 1811 0
7782 598 468 1809 0
7782 598 470 1807 0
7782 598 472 1805 0
7782 598 474 1803 0
7782 598 476 1801 0
7782 598 478 1799 0
7782 598 480 1797 0
7782 600 1811 0
7782 600 467 1809 0
7782 600 468 1807 0
7782 600 470 1805 0
7782 600 472 1803 0
7782 600 474 1801 0
7782 600 476 1799 0
7782 600 478 1797 0
7782 600 480 1795 0
c (((aux447 + shift(x_00005_00006, -1) + shift(x_00004_00007, -1))<=12)=tv=SATLiteral(7783))
-7783 1836 0
-7783 497 1834 0
-7783 498 1832 0
-7783 500 1830 0
-7783 502 1828 0
-7783 504 1826 0
-7783 506 1824 0
-7783 508 1822 0
-7783 510 1820 0
-7783 617 1834 0
-7783 617 497 1832 0
-7783 617 498 1830 0
-7783 617 500 1828 0
-7783 617 502 1826 0
-7783 617 504 1824 0
-7783 617 506 1822 0
-7783 617 508 1820 0
-7783 617 510 1818 0
-7783 618 1832 0
-7783 618 497 1830 0
-7783 618 498 1828 0
-7783 618 500 1826 0
-7783 618 502 1824 0
-7783 618 504 1822 0
-7783 618 506 1820 0
-7783 618 508 1818 0
-7783 618 510 1816 0
-7783 620 1830 0
-7783 620 497 1828 0
-7783 620 498 1826 0
-7783 620 500 1824 0
-7783 620 502 1822 0
-7783 620 504 1820 0
-7783 620 506 1818 0
-7783 620 508 1816 0
-7783 620 510 1814 0
-7783 622 1828 0
-7783 622 497 1826 0
-7783 622 498 1824 0
-7783 622 500 1822 0
-7783 622 502 1820 0
-7783 622 504 1818 0
-7783 622 506 1816 0
-7783 622 508 1814 0
-7783 622 510 1813 0
-7783 624 1826 0
-7783 624 497 1824 0
-7783 624 498 1822 0
-7783 624 500 1820 0
-7783 624 502 1818 0
-7783 624 504 1816 0
-7783 624 506 1814 0
-7783 624 508 1813 0
-7783 624 510 0
-7783 626 1824 0
-7783 626 497 1822 0
-7783 626 498 1820 0
-7783 626 500 1818 0
-7783 626 502 1816 0
-7783 626 504 1814 0
-7783 626 506 1813 0
-7783 626 508 0
-7783 626 510 0
-7783 628 1822 0
-7783 628 497 1820 0
-7783 628 498 1818 0
-7783 628 500 1816 0
-7783 628 502 1814 0
-7783 628 504 1813 0
-7783 628 506 0
-7783 628 508 0
-7783 628 510 0
-7783 630 1820 0
-7783 630 497 1818 0
-7783 630 498 1816 0
-7783 630 500 1814 0
-7783 630 502 1813 0
-7783 630 504 0
-7783 630 506 0
-7783 630 508 0
-7783 630 510 0
7783 -504 -1813 0
7783 -502 -1814 0
7783 -500 -1816 0
7783 -498 -1818 0
7783 -497 -1820 0
7783 -630 -506 -1813 0
7783 -630 -504 -1814 0
7783 -630 -502 -1816 0
7783 -630 -500 -1818 0
7783 -630 -498 -1820 0
7783 -630 -497 -1822 0
7783 -628 -508 -1813 0
7783 -628 -506 -1814 0
7783 -628 -504 -1816 0
7783 -628 -502 -1818 0
7783 -628 -500 -1820 0
7783 -628 -498 -1822 0
7783 -628 -497 -1824 0
7783 -626 -510 -1813 0
7783 -626 -508 -1814 0
7783 -626 -506 -1816 0
7783 -626 -504 -1818 0
7783 -626 -502 -1820 0
7783 -626 -500 -1822 0
7783 -626 -498 -1824 0
7783 -626 -497 -1826 0
7783 -624 -1813 0
7783 -624 -510 -1814 0
7783 -624 -508 -1816 0
7783 -624 -506 -1818 0
7783 -624 -504 -1820 0
7783 -624 -502 -1822 0
7783 -624 -500 -1824 0
7783 -624 -498 -1826 0
7783 -624 -497 -1828 0
7783 -622 -1814 0
7783 -622 -510 -1816 0
7783 -622 -508 -1818 0
7783 -622 -506 -1820 0
7783 -622 -504 -1822 0
7783 -622 -502 -1824 0
7783 -622 -500 -1826 0
7783 -622 -498 -1828 0
7783 -622 -497 -1830 0
7783 -620 -1816 0
7783 -620 -510 -1818 0
7783 -620 -508 -1820 0
7783 -620 -506 -1822 0
7783 -620 -504 -1824 0
7783 -620 -502 -1826 0
7783 -620 -500 -1828 0
7783 -620 -498 -1830 0
7783 -620 -497 -1832 0
7783 -618 -1818 0
7783 -618 -510 -1820 0
7783 -618 -508 -1822 0
7783 -618 -506 -1824 0
7783 -618 -504 -1826 0
7783 -618 -502 -1828 0
7783 -618 -500 -1830 0
7783 -618 -498 -1832 0
7783 -618 -497 -1834 0
7783 -617 -1820 0
7783 -617 -510 -1822 0
7783 -617 -508 -1824 0
7783 -617 -506 -1826 0
7783 -617 -504 -1828 0
7783 -617 -502 -1830 0
7783 -617 -500 -1832 0
7783 -617 -498 -1834 0
7783 -617 -497 -1836 0
c ((12<=(aux447 + shift(x_00005_00006, -1) + shift(x_00004_00007, -1)))=tv=SATLiteral(7784))
-7784 -502 -1813 0
-7784 -500 -1814 0
-7784 -498 -1816 0
-7784 -497 -1818 0
-7784 -630 -504 -1813 0
-7784 -630 -502 -1814 0
-7784 -630 -500 -1816 0
-7784 -630 -498 -1818 0
-7784 -630 -497 -1820 0
-7784 -628 -506 -1813 0
-7784 -628 -504 -1814 0
-7784 -628 -502 -1816 0
-7784 -628 -500 -1818 0
-7784 -628 -498 -1820 0
-7784 -628 -497 -1822 0
-7784 -626 -508 -1813 0
-7784 -626 -506 -1814 0
-7784 -626 -504 -1816 0
-7784 -626 -502 -1818 0
-7784 -626 -500 -1820 0
-7784 -626 -498 -1822 0
-7784 -626 -497 -1824 0
-7784 -624 -510 -1813 0
-7784 -624 -508 -1814 0
-7784 -624 -506 -1816 0
-7784 -624 -504 -1818 0
-7784 -624 -502 -1820 0
-7784 -624 -500 -1822 0
-7784 -624 -498 -1824 0
-7784 -624 -497 -1826 0
-7784 -622 -1813 0
-7784 -622 -510 -1814 0
-7784 -622 -508 -1816 0
-7784 -622 -506 -1818 0
-7784 -622 -504 -1820 0
-7784 -622 -502 -1822 0
-7784 -622 -500 -1824 0
-7784 -622 -498 -1826 0
-7784 -622 -497 -1828 0
-7784 -620 -1814 0
-7784 -620 -510 -1816 0
-7784 -620 -508 -1818 0
-7784 -620 -506 -1820 0
-7784 -620 -504 -1822 0
-7784 -620 -502 -1824 0
-7784 -620 -500 -1826 0
-7784 -620 -498 -1828 0
-7784 -620 -497 -1830 0
-7784 -618 -1816 0
-7784 -618 -510 -1818 0
-7784 -618 -508 -1820 0
-7784 -618 -506 -1822 0
-7784 -618 -504 -1824 0
-7784 -618 -502 -1826 0
-7784 -618 -500 -1828 0
-7784 -618 -498 -1830 0
-7784 -618 -497 -1832 0
-7784 -617 -1818 0
-7784 -617 -510 -1820 0
-7784 -617 -508 -1822 0
-7784 -617 -506 -1824 0
-7784 -617 -504 -1826 0
-7784 -617 -502 -1828 0
-7784 -617 -500 -1830 0
-7784 -617 -498 -1832 0
-7784 -617 -497 -1834 0
7784 1834 0
7784 497 1832 0
7784 498 1830 0
7784 500 1828 0
7784 502 1826 0
7784 504 1824 0
7784 506 1822 0
7784 508 1820 0
7784 510 1818 0
7784 617 1832 0
7784 617 497 1830 0
7784 617 498 1828 0
7784 617 500 1826 0
7784 617 502 1824 0
7784 617 504 1822 0
7784 617 506 1820 0
7784 617 508 1818 0
7784 617 510 1816 0
7784 618 1830 0
7784 618 497 1828 0
7784 618 498 1826 0
7784 618 500 1824 0
7784 618 502 1822 0
7784 618 504 1820 0
7784 618 506 1818 0
7784 618 508 1816 0
7784 618 510 1814 0
7784 620 1828 0
7784 620 497 1826 0
7784 620 498 1824 0
7784 620 500 1822 0
7784 620 502 1820 0
7784 620 504 1818 0
7784 620 506 1816 0
7784 620 508 1814 0
7784 620 510 1813 0
7784 622 1826 0
7784 622 497 1824 0
7784 622 498 1822 0
7784 622 500 1820 0
7784 622 502 1818 0
7784 622 504 1816 0
7784 622 506 1814 0
7784 622 508 1813 0
7784 622 510 0
7784 624 1824 0
7784 624 497 1822 0
7784 624 498 1820 0
7784 624 500 1818 0
7784 624 502 1816 0
7784 624 504 1814 0
7784 624 506 1813 0
7784 624 508 0
7784 624 510 0
7784 626 1822 0
7784 626 497 1820 0
7784 626 498 1818 0
7784 626 500 1816 0
7784 626 502 1814 0
7784 626 504 1813 0
7784 626 506 0
7784 626 508 0
7784 626 510 0
7784 628 1820 0
7784 628 497 1818 0
7784 628 498 1816 0
7784 628 500 1814 0
7784 628 502 1813 0
7784 628 504 0
7784 628 506 0
7784 628 508 0
7784 628 510 0
7784 630 1818 0
7784 630 497 1816 0
7784 630 498 1814 0
7784 630 500 1813 0
7784 630 502 0
7784 630 504 0
7784 630 506 0
7784 630 508 0
7784 630 510 0
c (((x_00004_00008 + x_00005_00008 + x_00005_00009)<=10)=tv=SATLiteral(7785))
-7785 675 0
-7785 647 673 0
-7785 648 671 0
-7785 650 669 0
-7785 652 667 0
-7785 654 665 0
-7785 656 663 0
-7785 658 662 0
-7785 660 0
-7785 512 673 0
-7785 512 647 671 0
-7785 512 648 669 0
-7785 512 650 667 0
-7785 512 652 665 0
-7785 512 654 663 0
-7785 512 656 662 0
-7785 512 658 0
-7785 512 660 0
-7785 513 671 0
-7785 513 647 669 0
-7785 513 648 667 0
-7785 513 650 665 0
-7785 513 652 663 0
-7785 513 654 662 0
-7785 513 656 0
-7785 513 658 0
-7785 513 660 0
-7785 515 669 0
-7785 515 647 667 0
-7785 515 648 665 0
-7785 515 650 663 0
-7785 515 652 662 0
-7785 515 654 0
-7785 515 656 0
-7785 515 658 0
-7785 515 660 0
-7785 517 667 0
-7785 517 647 665 0
-7785 517 648 663 0
-7785 517 650 662 0
-7785 517 652 0
-7785 517 654 0
-7785 517 656 0
-7785 517 658 0
-7785 517 660 0
-7785 519 665 0
-7785 519 647 663 0
-7785 519 648 662 0
-7785 519 650 0
-7785 519 652 0
-7785 519 654 0
-7785 519 656 0
-7785 519 658 0
-7785 519 660 0
-7785 521 663 0
-7785 521 647 662 0
-7785 521 648 0
-7785 521 650 0
-7785 521 652 0
-7785 521 654 0
-7785 521 656 0
-7785 521 658 0
-7785 521 660 0
-7785 523 662 0
-7785 523 647 0
-7785 523 648 0
-7785 523 650 0
-7785 523 652 0
-7785 523 654 0
-7785 523 656 0
-7785 523 658 0
-7785 523 660 0
-7785 525 0
-7785 525 647 0
-7785 525 648 0
-7785 525 650 0
-7785 525 652 0
-7785 525 654 0
-7785 525 656 0
-7785 525 658 0
-7785 525 660 0
7785 -525 -647 -662 0
7785 -523 -648 -662 0
7785 -523 -647 -663 0
7785 -521 -650 -662 0
7785 -521 -648 -663 0
7785 -521 -647 -665 0
7785 -519 -652 -662 0
7785 -519 -650 -663 0
7785 -519 -648 -665 0
7785 -519 -647 -667 0
7785 -517 -654 -662 0
7785 -517 -652 -663 0
7785 -517 -650 -665 0
7785 -517 -648 -667 0
7785 -517 -647 -669 0
7785 -515 -656 -662 0
7785 -515 -654 -663 0
7785 -515 -652 -665 0
7785 -515 -650 -667 0
7785 -515 -648 -669 0
7785 -515 -647 -671 0
7785 -513 -658 -662 0
7785 -513 -656 -663 0
7785 -513 -654 -665 0
7785 -513 -652 -667 0
7785 -513 -650 -669 0
7785 -513 -648 -671 0
7785 -513 -647 -673 0
7785 -512 -660 -662 0
7785 -512 -658 -663 0
7785 -512 -656 -665 0
7785 -512 -654 -667 0
7785 -512 -652 -669 0
7785 -512 -650 -671 0
7785 -512 -648 -673 0
7785 -512 -647 -675 0
c ((10<=(x_00004_00008 + x_00005_00008 + x_00005_00009))=tv=SATLiteral(7786))
-7786 -523 -647 -662 0
-7786 -521 -648 -662 0
-7786 -521 -647 -663 0
-7786 -519 -650 -662 0
-7786 -519 -648 -663 0
-7786 -519 -647 -665 0
-7786 -517 -652 -662 0
-7786 -517 -650 -663 0
-7786 -517 -648 -665 0
-7786 -517 -647 -667 0
-7786 -515 -654 -662 0
-7786 -515 -652 -663 0
-7786 -515 -650 -665 0
-7786 -515 -648 -667 0
-7786 -515 -647 -669 0
-7786 -513 -656 -662 0
-7786 -513 -654 -663 0
-7786 -513 -652 -665 0
-7786 -513 -650 -667 0
-7786 -513 -648 -669 0
-7786 -513 -647 -671 0
-7786 -512 -658 -662 0
-7786 -512 -656 -663 0
-7786 -512 -654 -665 0
-7786 -512 -652 -667 0
-7786 -512 -650 -669 0
-7786 -512 -648 -671 0
-7786 -512 -647 -673 0
7786 673 0
7786 647 671 0
7786 648 669 0
7786 650 667 0
7786 652 665 0
7786 654 663 0
7786 656 662 0
7786 658 0
7786 660 0
7786 512 671 0
7786 512 647 669 0
7786 512 648 667 0
7786 512 650 665 0
7786 512 652 663 0
7786 512 654 662 0
7786 512 656 0
7786 512 658 0
7786 512 660 0
7786 513 669 0
7786 513 647 667 0
7786 513 648 665 0
7786 513 650 663 0
7786 513 652 662 0
7786 513 654 0
7786 513 656 0
7786 513 658 0
7786 513 660 0
7786 515 667 0
7786 515 647 665 0
7786 515 648 663 0
7786 515 650 662 0
7786 515 652 0
7786 515 654 0
7786 515 656 0
7786 515 658 0
7786 515 660 0
7786 517 665 0
7786 517 647 663 0
7786 517 648 662 0
7786 517 650 0
7786 517 652 0
7786 517 654 0
7786 517 656 0
7786 517 658 0
7786 517 660 0
7786 519 663 0
7786 519 647 662 0
7786 519 648 0
7786 519 650 0
7786 519 652 0
7786 519 654 0
7786 519 656 0
7786 519 658 0
7786 519 660 0
7786 521 662 0
7786 521 647 0
7786 521 648 0
7786 521 650 0
7786 521 652 0
7786 521 654 0
7786 521 656 0
7786 521 658 0
7786 521 660 0
7786 523 0
7786 523 647 0
7786 523 648 0
7786 523 650 0
7786 523 652 0
7786 523 654 0
7786 523 656 0
7786 523 658 0
7786 523 660 0
7786 525 0
7786 525 647 0
7786 525 648 0
7786 525 650 0
7786 525 652 0
7786 525 654 0
7786 525 656 0
7786 525 658 0
7786 525 660 0
c (((x_00005_00002 + x_00006_00002 + x_00006_00003)<=13)=tv=SATLiteral(7787))
-7787 695 720 0
-7787 697 718 0
-7787 699 716 0
-7787 701 714 0
-7787 703 712 0
-7787 705 710 0
-7787 557 693 720 0
-7787 557 695 718 0
-7787 557 697 716 0
-7787 557 699 714 0
-7787 557 701 712 0
-7787 557 703 710 0
-7787 557 705 708 0
-7787 558 692 720 0
-7787 558 693 718 0
-7787 558 695 716 0
-7787 558 697 714 0
-7787 558 699 712 0
-7787 558 701 710 0
-7787 558 703 708 0
-7787 558 705 707 0
-7787 560 720 0
-7787 560 692 718 0
-7787 560 693 716 0
-7787 560 695 714 0
-7787 560 697 712 0
-7787 560 699 710 0
-7787 560 701 708 0
-7787 560 703 707 0
-7787 560 705 0
-7787 562 718 0
-7787 562 692 716 0
-7787 562 693 714 0
-7787 562 695 712 0
-7787 562 697 710 0
-7787 562 699 708 0
-7787 562 701 707 0
-7787 562 703 0
-7787 562 705 0
-7787 564 716 0
-7787 564 692 714 0
-7787 564 693 712 0
-7787 564 695 710 0
-7787 564 697 708 0
-7787 564 699 707 0
-7787 564 701 0
-7787 564 703 0
-7787 564 705 0
-7787 566 714 0
-7787 566 692 712 0
-7787 566 693 710 0
-7787 566 695 708 0
-7787 566 697 707 0
-7787 566 699 0
-7787 566 701 0
-7787 566 703 0
-7787 566 705 0
-7787 568 712 0
-7787 568 692 710 0
-7787 568 693 708 0
-7787 568 695 707 0
-7787 568 697 0
-7787 568 699 0
-7787 568 701 0
-7787 568 703 0
-7787 568 705 0
-7787 570 710 0
-7787 570 692 708 0
-7787 570 693 707 0
-7787 570 695 0
-7787 570 697 0
-7787 570 699 0
-7787 570 701 0
-7787 570 703 0
-7787 570 705 0
7787 -695 -707 0
7787 -693 -708 0
7787 -692 -710 0
7787 -570 -697 -707 0
7787 -570 -695 -708 0
7787 -570 -693 -710 0
7787 -570 -692 -712 0
7787 -568 -699 -707 0
7787 -568 -697 -708 0
7787 -568 -695 -710 0
7787 -568 -693 -712 0
7787 -568 -692 -714 0
7787 -566 -701 -707 0
7787 -566 -699 -708 0
7787 -566 -697 -710 0
7787 -566 -695 -712 0
7787 -566 -693 -714 0
7787 -566 -692 -716 0
7787 -564 -703 -707 0
7787 -564 -701 -708 0
7787 -564 -699 -710 0
7787 -564 -697 -712 0
7787 -564 -695 -714 0
7787 -564 -693 -716 0
7787 -564 -692 -718 0
7787 -562 -705 -707 0
7787 -562 -703 -708 0
7787 -562 -701 -710 0
7787 -562 -699 -712 0
7787 -562 -697 -714 0
7787 -562 -695 -716 0
7787 -562 -693 -718 0
7787 -562 -692 -720 0
7787 -560 -707 0
7787 -560 -705 -708 0
7787 -560 -703 -710 0
7787 -560 -701 -712 0
7787 -560 -699 -714 0
7787 -560 -697 -716 0
7787 -560 -695 -718 0
7787 -560 -693 -720 0
7787 -560 -692 0
7787 -558 -708 0
7787 -558 -705 -710 0
7787 -558 -703 -712 0
7787 -558 -701 -714 0
7787 -558 -699 -716 0
7787 -558 -697 -718 0
7787 -558 -695 -720 0
7787 -558 -693 0
7787 -558 -692 0
7787 -557 -710 0
7787 -557 -705 -712 0
7787 -557 -703 -714 0
7787 -557 -701 -716 0
7787 -557 -699 -718 0
7787 -557 -697 -720 0
7787 -557 -695 0
7787 -557 -693 0
7787 -557 -692 0
c ((13<=(x_00005_00002 + x_00006_00002 + x_00006_00003))=tv=SATLiteral(7788))
-7788 -693 -707 0
-7788 -692 -708 0
-7788 -570 -695 -707 0
-7788 -570 -693 -708 0
-7788 -570 -692 -710 0
-7788 -568 -697 -707 0
-7788 -568 -695 -708 0
-7788 -568 -693 -710 0
-7788 -568 -692 -712 0
-7788 -566 -699 -707 0
-7788 -566 -697 -708 0
-7788 -566 -695 -710 0
-7788 -566 -693 -712 0
-7788 -566 -692 -714 0
-7788 -564 -701 -707 0
-7788 -564 -699 -708 0
-7788 -564 -697 -710 0
-7788 -564 -695 -712 0
-7788 -564 -693 -714 0
-7788 -564 -692 -716 0
-7788 -562 -703 -707 0
-7788 -562 -701 -708 0
-7788 -562 -699 -710 0
-7788 -562 -697 -712 0
-7788 -562 -695 -714 0
-7788 -562 -693 -716 0
-7788 -562 -692 -718 0
-7788 -560 -705 -707 0
-7788 -560 -703 -708 0
-7788 -560 -701 -710 0
-7788 -560 -699 -712 0
-7788 -560 -697 -714 0
-7788 -560 -695 -716 0
-7788 -560 -693 -718 0
-7788 -560 -692 -720 0
-7788 -558 -707 0
-7788 -558 -705 -708 0
-7788 -558 -703 -710 0
-7788 -558 -701 -712 0
-7788 -558 -699 -714 0
-7788 -558 -697 -716 0
-7788 -558 -695 -718 0
-7788 -558 -693 -720 0
-7788 -558 -692 0
-7788 -557 -708 0
-7788 -557 -705 -710 0
-7788 -557 -703 -712 0
-7788 -557 -701 -714 0
-7788 -557 -699 -716 0
-7788 -557 -697 -718 0
-7788 -557 -695 -720 0
-7788 -557 -693 0
-7788 -557 -692 0
7788 693 720 0
7788 695 718 0
7788 697 716 0
7788 699 714 0
7788 701 712 0
7788 703 710 0
7788 705 708 0
7788 557 692 720 0
7788 557 693 718 0
7788 557 695 716 0
7788 557 697 714 0
7788 557 699 712 0
7788 557 701 710 0
7788 557 703 708 0
7788 557 705 707 0
7788 558 720 0
7788 558 692 718 0
7788 558 693 716 0
7788 558 695 714 0
7788 558 697 712 0
7788 558 699 710 0
7788 558 701 708 0
7788 558 703 707 0
7788 558 705 0
7788 560 718 0
7788 560 692 716 0
7788 560 693 714 0
7788 560 695 712 0
7788 560 697 710 0
7788 560 699 708 0
7788 560 701 707 0
7788 560 703 0
7788 560 705 0
7788 562 716 0
7788 562 692 714 0
7788 562 693 712 0
7788 562 695 710 0
7788 562 697 708 0
7788 562 699 707 0
7788 562 701 0
7788 562 703 0
7788 562 705 0
7788 564 714 0
7788 564 692 712 0
7788 564 693 710 0
7788 564 695 708 0
7788 564 697 707 0
7788 564 699 0
7788 564 701 0
7788 564 703 0
7788 564 705 0
7788 566 712 0
7788 566 692 710 0
7788 566 693 708 0
7788 566 695 707 0
7788 566 697 0
7788 566 699 0
7788 566 701 0
7788 566 703 0
7788 566 705 0
7788 568 710 0
7788 568 692 708 0
7788 568 693 707 0
7788 568 695 0
7788 568 697 0
7788 568 699 0
7788 568 701 0
7788 568 703 0
7788 568 705 0
7788 570 708 0
7788 570 692 707 0
7788 570 693 0
7788 570 695 0
7788 570 697 0
7788 570 699 0
7788 570 701 0
7788 570 703 0
7788 570 705 0
c (((x_00007_00001 + x_00007_00002 + x_00006_00001)<=24)=tv=SATLiteral(7789))
-7789 821 840 690 0
-7789 823 838 690 0
-7789 823 840 688 0
-7789 825 836 690 0
-7789 825 838 688 0
-7789 825 840 686 0
7789 -686 0
7789 -840 -688 0
7789 -838 -690 0
7789 -836 0
7789 -834 0
7789 -832 0
7789 -830 0
7789 -828 0
7789 -827 0
7789 -825 -688 0
7789 -825 -840 -690 0
7789 -825 -838 0
7789 -825 -836 0
7789 -825 -834 0
7789 -825 -832 0
7789 -825 -830 0
7789 -825 -828 0
7789 -825 -827 0
7789 -823 -690 0
7789 -823 -840 0
7789 -823 -838 0
7789 -823 -836 0
7789 -823 -834 0
7789 -823 -832 0
7789 -823 -830 0
7789 -823 -828 0
7789 -823 -827 0
7789 -821 0
7789 -821 -840 0
7789 -821 -838 0
7789 -821 -836 0
7789 -821 -834 0
7789 -821 -832 0
7789 -821 -830 0
7789 -821 -828 0
7789 -821 -827 0
7789 -819 0
7789 -819 -840 0
7789 -819 -838 0
7789 -819 -836 0
7789 -819 -834 0
7789 -819 -832 0
7789 -819 -830 0
7789 -819 -828 0
7789 -819 -827 0
7789 -817 0
7789 -817 -840 0
7789 -817 -838 0
7789 -817 -836 0
7789 -817 -834 0
7789 -817 -832 0
7789 -817 -830 0
7789 -817 -828 0
7789 -817 -827 0
7789 -815 0
7789 -815 -840 0
7789 -815 -838 0
7789 -815 -836 0
7789 -815 -834 0
7789 -815 -832 0
7789 -815 -830 0
7789 -815 -828 0
7789 -815 -827 0
7789 -813 0
7789 -813 -840 0
7789 -813 -838 0
7789 -813 -836 0
7789 -813 -834 0
7789 -813 -832 0
7789 -813 -830 0
7789 -813 -828 0
7789 -813 -827 0
7789 -812 0
7789 -812 -840 0
7789 -812 -838 0
7789 -812 -836 0
7789 -812 -834 0
7789 -812 -832 0
7789 -812 -830 0
7789 -812 -828 0
7789 -812 -827 0
c ((24<=(x_00007_00001 + x_00007_00002 + x_00006_00001))=tv=SATLiteral(7790))
-7790 -684 0
-7790 -840 -686 0
-7790 -838 -688 0
-7790 -836 -690 0
-7790 -834 0
-7790 -832 0
-7790 -830 0
-7790 -828 0
-7790 -827 0
-7790 -825 -686 0
-7790 -825 -840 -688 0
-7790 -825 -838 -690 0
-7790 -825 -836 0
-7790 -825 -834 0
-7790 -825 -832 0
-7790 -825 -830 0
-7790 -825 -828 0
-7790 -825 -827 0
-7790 -823 -688 0
-7790 -823 -840 -690 0
-7790 -823 -838 0
-7790 -823 -836 0
-7790 -823 -834 0
-7790 -823 -832 0
-7790 -823 -830 0
-7790 -823 -828 0
-7790 -823 -827 0
-7790 -821 -690 0
-7790 -821 -840 0
-7790 -821 -838 0
-7790 -821 -836 0
-7790 -821 -834 0
-7790 -821 -832 0
-7790 -821 -830 0
-7790 -821 -828 0
-7790 -821 -827 0
-7790 -819 0
-7790 -819 -840 0
-7790 -819 -838 0
-7790 -819 -836 0
-7790 -819 -834 0
-7790 -819 -832 0
-7790 -819 -830 0
-7790 -819 -828 0
-7790 -819 -827 0
-7790 -817 0
-7790 -817 -840 0
-7790 -817 -838 0
-7790 -817 -836 0
-7790 -817 -834 0
-7790 -817 -832 0
-7790 -817 -830 0
-7790 -817 -828 0
-7790 -817 -827 0
-7790 -815 0
-7790 -815 -840 0
-7790 -815 -838 0
-7790 -815 -836 0
-7790 -815 -834 0
-7790 -815 -832 0
-7790 -815 -830 0
-7790 -815 -828 0
-7790 -815 -827 0
-7790 -813 0
-7790 -813 -840 0
-7790 -813 -838 0
-7790 -813 -836 0
-7790 -813 -834 0
-7790 -813 -832 0
-7790 -813 -830 0
-7790 -813 -828 0
-7790 -813 -827 0
-7790 -812 0
-7790 -812 -840 0
-7790 -812 -838 0
-7790 -812 -836 0
-7790 -812 -834 0
-7790 -812 -832 0
-7790 -812 -830 0
-7790 -812 -828 0
-7790 -812 -827 0
7790 819 840 690 0
7790 821 838 690 0
7790 821 840 688 0
7790 823 836 690 0
7790 823 838 688 0
7790 823 840 686 0
7790 825 834 690 0
7790 825 836 688 0
7790 825 838 686 0
7790 825 840 684 0
c (((x_00006_00004 + x_00006_00005 + x_00006_00006)<=10)=tv=SATLiteral(7791))
-7791 765 0
-7791 737 763 0
-7791 738 761 0
-7791 740 759 0
-7791 742 757 0
-7791 744 755 0
-7791 746 753 0
-7791 748 752 0
-7791 750 0
-7791 722 763 0
-7791 722 737 761 0
-7791 722 738 759 0
-7791 722 740 757 0
-7791 722 742 755 0
-7791 722 744 753 0
-7791 722 746 752 0
-7791 722 748 0
-7791 722 750 0
-7791 723 761 0
-7791 723 737 759 0
-7791 723 738 757 0
-7791 723 740 755 0
-7791 723 742 753 0
-7791 723 744 752 0
-7791 723 746 0
-7791 723 748 0
-7791 723 750 0
-7791 725 759 0
-7791 725 737 757 0
-7791 725 738 755 0
-7791 725 740 753 0
-7791 725 742 752 0
-7791 725 744 0
-7791 725 746 0
-7791 725 748 0
-7791 725 750 0
-7791 727 757 0
-7791 727 737 755 0
-7791 727 738 753 0
-7791 727 740 752 0
-7791 727 742 0
-7791 727 744 0
-7791 727 746 0
-7791 727 748 0
-7791 727 750 0
-7791 729 755 0
-7791 729 737 753 0
-7791 729 738 752 0
-7791 729 740 0
-7791 729 742 0
-7791 729 744 0
-7791 729 746 0
-7791 729 748 0
-7791 729 750 0
-7791 731 753 0
-7791 731 737 752 0
-7791 731 738 0
-7791 731 740 0
-7791 731 742 0
-7791 731 744 0
-7791 731 746 0
-7791 731 748 0
-7791 731 750 0
-7791 733 752 0
-7791 733 737 0
-7791 733 738 0
-7791 733 740 0
-7791 733 742 0
-7791 733 744 0
-7791 733 746 0
-7791 733 748 0
-7791 733 750 0
-7791 735 0
-7791 735 737 0
-7791 735 738 0
-7791 735 740 0
-7791 735 742 0
-7791 735 744 0
-7791 735 746 0
-7791 735 748 0
-7791 735 750 0
7791 -735 -737 -752 0
7791 -733 -738 -752 0
7791 -733 -737 -753 0
7791 -731 -740 -752 0
7791 -731 -738 -753 0
7791 -731 -737 -755 0
7791 -729 -742 -752 0
7791 -729 -740 -753 0
7791 -729 -738 -755 0
7791 -729 -737 -757 0
7791 -727 -744 -752 0
7791 -727 -742 -753 0
7791 -727 -740 -755 0
7791 -727 -738 -757 0
7791 -727 -737 -759 0
7791 -725 -746 -752 0
7791 -725 -744 -753 0
7791 -725 -742 -755 0
7791 -725 -740 -757 0
7791 -725 -738 -759 0
7791 -725 -737 -761 0
7791 -723 -748 -752 0
7791 -723 -746 -753 0
7791 -723 -744 -755 0
7791 -723 -742 -757 0
7791 -723 -740 -759 0
7791 -723 -738 -761 0
7791 -723 -737 -763 0
7791 -722 -750 -752 0
7791 -722 -748 -753 0
7791 -722 -746 -755 0
7791 -722 -744 -757 0
7791 -722 -742 -759 0
7791 -722 -740 -761 0
7791 -722 -738 -763 0
7791 -722 -737 -765 0
c ((10<=(x_00006_00004 + x_00006_00005 + x_00006_00006))=tv=SATLiteral(7792))
-7792 -733 -737 -752 0
-7792 -731 -738 -752 0
-7792 -731 -737 -753 0
-7792 -729 -740 -752 0
-7792 -729 -738 -753 0
-7792 -729 -737 -755 0
-7792 -727 -742 -752 0
-7792 -727 -740 -753 0
-7792 -727 -738 -755 0
-7792 -727 -737 -757 0
-7792 -725 -744 -752 0
-7792 -725 -742 -753 0
-7792 -725 -740 -755 0
-7792 -725 -738 -757 0
-7792 -725 -737 -759 0
-7792 -723 -746 -752 0
-7792 -723 -744 -753 0
-7792 -723 -742 -755 0
-7792 -723 -740 -757 0
-7792 -723 -738 -759 0
-7792 -723 -737 -761 0
-7792 -722 -748 -752 0
-7792 -722 -746 -753 0
-7792 -722 -744 -755 0
-7792 -722 -742 -757 0
-7792 -722 -740 -759 0
-7792 -722 -738 -761 0
-7792 -722 -737 -763 0
7792 763 0
7792 737 761 0
7792 738 759 0
7792 740 757 0
7792 742 755 0
7792 744 753 0
7792 746 752 0
7792 748 0
7792 750 0
7792 722 761 0
7792 722 737 759 0
7792 722 738 757 0
7792 722 740 755 0
7792 722 742 753 0
7792 722 744 752 0
7792 722 746 0
7792 722 748 0
7792 722 750 0
7792 723 759 0
7792 723 737 757 0
7792 723 738 755 0
7792 723 740 753 0
7792 723 742 752 0
7792 723 744 0
7792 723 746 0
7792 723 748 0
7792 723 750 0
7792 725 757 0
7792 725 737 755 0
7792 725 738 753 0
7792 725 740 752 0
7792 725 742 0
7792 725 744 0
7792 725 746 0
7792 725 748 0
7792 725 750 0
7792 727 755 0
7792 727 737 753 0
7792 727 738 752 0
7792 727 740 0
7792 727 742 0
7792 727 744 0
7792 727 746 0
7792 727 748 0
7792 727 750 0
7792 729 753 0
7792 729 737 752 0
7792 729 738 0
7792 729 740 0
7792 729 742 0
7792 729 744 0
7792 729 746 0
7792 729 748 0
7792 729 750 0
7792 731 752 0
7792 731 737 0
7792 731 738 0
7792 731 740 0
7792 731 742 0
7792 731 744 0
7792 731 746 0
7792 731 748 0
7792 731 750 0
7792 733 0
7792 733 737 0
7792 733 738 0
7792 733 740 0
7792 733 742 0
7792 733 744 0
7792 733 746 0
7792 733 748 0
7792 733 750 0
7792 735 0
7792 735 737 0
7792 735 738 0
7792 735 740 0
7792 735 742 0
7792 735 744 0
7792 735 746 0
7792 735 748 0
7792 735 750 0
c (((x_00007_00007 + x_00006_00007 + x_00006_00008)<=23)=tv=SATLiteral(7793))
-7793 909 780 795 0
-7793 911 778 795 0
-7793 911 780 793 0
-7793 913 776 795 0
-7793 913 778 793 0
-7793 913 780 791 0
-7793 915 774 795 0
-7793 915 776 793 0
-7793 915 778 791 0
-7793 915 780 789 0
7793 -789 0
7793 -780 -791 0
7793 -778 -793 0
7793 -776 -795 0
7793 -774 0
7793 -772 0
7793 -770 0
7793 -768 0
7793 -767 0
7793 -915 -791 0
7793 -915 -780 -793 0
7793 -915 -778 -795 0
7793 -915 -776 0
7793 -915 -774 0
7793 -915 -772 0
7793 -915 -770 0
7793 -915 -768 0
7793 -915 -767 0
7793 -913 -793 0
7793 -913 -780 -795 0
7793 -913 -778 0
7793 -913 -776 0
7793 -913 -774 0
7793 -913 -772 0
7793 -913 -770 0
7793 -913 -768 0
7793 -913 -767 0
7793 -911 -795 0
7793 -911 -780 0
7793 -911 -778 0
7793 -911 -776 0
7793 -911 -774 0
7793 -911 -772 0
7793 -911 -770 0
7793 -911 -768 0
7793 -911 -767 0
7793 -909 0
7793 -909 -780 0
7793 -909 -778 0
7793 -909 -776 0
7793 -909 -774 0
7793 -909 -772 0
7793 -909 -770 0
7793 -909 -768 0
7793 -909 -767 0
7793 -907 0
7793 -907 -780 0
7793 -907 -778 0
7793 -907 -776 0
7793 -907 -774 0
7793 -907 -772 0
7793 -907 -770 0
7793 -907 -768 0
7793 -907 -767 0
7793 -905 0
7793 -905 -780 0
7793 -905 -778 0
7793 -905 -776 0
7793 -905 -774 0
7793 -905 -772 0
7793 -905 -770 0
7793 -905 -768 0
7793 -905 -767 0
7793 -903 0
7793 -903 -780 0
7793 -903 -778 0
7793 -903 -776 0
7793 -903 -774 0
7793 -903 -772 0
7793 -903 -770 0
7793 -903 -768 0
7793 -903 -767 0
7793 -902 0
7793 -902 -780 0
7793 -902 -778 0
7793 -902 -776 0
7793 -902 -774 0
7793 -902 -772 0
7793 -902 -770 0
7793 -902 -768 0
7793 -902 -767 0
c ((23<=(x_00007_00007 + x_00006_00007 + x_00006_00008))=tv=SATLiteral(7794))
-7794 -787 0
-7794 -780 -789 0
-7794 -778 -791 0
-7794 -776 -793 0
-7794 -774 -795 0
-7794 -772 0
-7794 -770 0
-7794 -768 0
-7794 -767 0
-7794 -915 -789 0
-7794 -915 -780 -791 0
-7794 -915 -778 -793 0
-7794 -915 -776 -795 0
-7794 -915 -774 0
-7794 -915 -772 0
-7794 -915 -770 0
-7794 -915 -768 0
-7794 -915 -767 0
-7794 -913 -791 0
-7794 -913 -780 -793 0
-7794 -913 -778 -795 0
-7794 -913 -776 0
-7794 -913 -774 0
-7794 -913 -772 0
-7794 -913 -770 0
-7794 -913 -768 0
-7794 -913 -767 0
-7794 -911 -793 0
-7794 -911 -780 -795 0
-7794 -911 -778 0
-7794 -911 -776 0
-7794 -911 -774 0
-7794 -911 -772 0
-7794 -911 -770 0
-7794 -911 -768 0
-7794 -911 -767 0
-7794 -909 -795 0
-7794 -909 -780 0
-7794 -909 -778 0
-7794 -909 -776 0
-7794 -909 -774 0
-7794 -909 -772 0
-7794 -909 -770 0
-7794 -909 -768 0
-7794 -909 -767 0
-7794 -907 0
-7794 -907 -780 0
-7794 -907 -778 0
-7794 -907 -776 0
-7794 -907 -774 0
-7794 -907 -772 0
-7794 -907 -770 0
-7794 -907 -768 0
-7794 -907 -767 0
-7794 -905 0
-7794 -905 -780 0
-7794 -905 -778 0
-7794 -905 -776 0
-7794 -905 -774 0
-7794 -905 -772 0
-7794 -905 -770 0
-7794 -905 -768 0
-7794 -905 -767 0
-7794 -903 0
-7794 -903 -780 0
-7794 -903 -778 0
-7794 -903 -776 0
-7794 -903 -774 0
-7794 -903 -772 0
-7794 -903 -770 0
-7794 -903 -768 0
-7794 -903 -767 0
-7794 -902 0
-7794 -902 -780 0
-7794 -902 -778 0
-7794 -902 -776 0
-7794 -902 -774 0
-7794 -902 -772 0
-7794 -902 -770 0
-7794 -902 -768 0
-7794 -902 -767 0
7794 907 780 795 0
7794 909 778 795 0
7794 909 780 793 0
7794 911 776 795 0
7794 911 778 793 0
7794 911 780 791 0
7794 913 774 795 0
7794 913 776 793 0
7794 913 778 791 0
7794 913 780 789 0
7794 915 772 795 0
7794 915 774 793 0
7794 915 776 791 0
7794 915 778 789 0
7794 915 780 787 0
c (((x_00007_00008 + x_00007_00009 + x_00006_00009)<=17)=tv=SATLiteral(7795))
-7795 943 810 0
-7795 945 808 0
-7795 917 941 810 0
-7795 917 943 808 0
-7795 917 945 806 0
-7795 918 939 810 0
-7795 918 941 808 0
-7795 918 943 806 0
-7795 918 945 804 0
-7795 920 937 810 0
-7795 920 939 808 0
-7795 920 941 806 0
-7795 920 943 804 0
-7795 920 945 802 0
-7795 922 935 810 0
-7795 922 937 808 0
-7795 922 939 806 0
-7795 922 941 804 0
-7795 922 943 802 0
-7795 922 945 800 0
-7795 924 933 810 0
-7795 924 935 808 0
-7795 924 937 806 0
-7795 924 939 804 0
-7795 924 941 802 0
-7795 924 943 800 0
-7795 924 945 798 0
-7795 926 932 810 0
-7795 926 933 808 0
-7795 926 935 806 0
-7795 926 937 804 0
-7795 926 939 802 0
-7795 926 941 800 0
-7795 926 943 798 0
-7795 926 945 797 0
-7795 928 810 0
-7795 928 932 808 0
-7795 928 933 806 0
-7795 928 935 804 0
-7795 928 937 802 0
-7795 928 939 800 0
-7795 928 941 798 0
-7795 928 943 797 0
-7795 928 945 0
-7795 930 808 0
-7795 930 932 806 0
-7795 930 933 804 0
-7795 930 935 802 0
-7795 930 937 800 0
-7795 930 939 798 0
-7795 930 941 797 0
-7795 930 943 0
-7795 930 945 0
7795 -943 -797 0
7795 -941 -798 0
7795 -939 -800 0
7795 -937 -802 0
7795 -935 -804 0
7795 -933 -806 0
7795 -932 -808 0
7795 -930 -945 -797 0
7795 -930 -943 -798 0
7795 -930 -941 -800 0
7795 -930 -939 -802 0
7795 -930 -937 -804 0
7795 -930 -935 -806 0
7795 -930 -933 -808 0
7795 -930 -932 -810 0
7795 -928 -797 0
7795 -928 -945 -798 0
7795 -928 -943 -800 0
7795 -928 -941 -802 0
7795 -928 -939 -804 0
7795 -928 -937 -806 0
7795 -928 -935 -808 0
7795 -928 -933 -810 0
7795 -928 -932 0
7795 -926 -798 0
7795 -926 -945 -800 0
7795 -926 -943 -802 0
7795 -926 -941 -804 0
7795 -926 -939 -806 0
7795 -926 -937 -808 0
7795 -926 -935 -810 0
7795 -926 -933 0
7795 -926 -932 0
7795 -924 -800 0
7795 -924 -945 -802 0
7795 -924 -943 -804 0
7795 -924 -941 -806 0
7795 -924 -939 -808 0
7795 -924 -937 -810 0
7795 -924 -935 0
7795 -924 -933 0
7795 -924 -932 0
7795 -922 -802 0
7795 -922 -945 -804 0
7795 -922 -943 -806 0
7795 -922 -941 -808 0
7795 -922 -939 -810 0
7795 -922 -937 0
7795 -922 -935 0
7795 -922 -933 0
7795 -922 -932 0
7795 -920 -804 0
7795 -920 -945 -806 0
7795 -920 -943 -808 0
7795 -920 -941 -810 0
7795 -920 -939 0
7795 -920 -937 0
7795 -920 -935 0
7795 -920 -933 0
7795 -920 -932 0
7795 -918 -806 0
7795 -918 -945 -808 0
7795 -918 -943 -810 0
7795 -918 -941 0
7795 -918 -939 0
7795 -918 -937 0
7795 -918 -935 0
7795 -918 -933 0
7795 -918 -932 0
7795 -917 -808 0
7795 -917 -945 -810 0
7795 -917 -943 0
7795 -917 -941 0
7795 -917 -939 0
7795 -917 -937 0
7795 -917 -935 0
7795 -917 -933 0
7795 -917 -932 0
c ((17<=(x_00007_00008 + x_00007_00009 + x_00006_00009))=tv=SATLiteral(7796))
-7796 -941 -797 0
-7796 -939 -798 0
-7796 -937 -800 0
-7796 -935 -802 0
-7796 -933 -804 0
-7796 -932 -806 0
-7796 -930 -943 -797 0
-7796 -930 -941 -798 0
-7796 -930 -939 -800 0
-7796 -930 -937 -802 0
-7796 -930 -935 -804 0
-7796 -930 -933 -806 0
-7796 -930 -932 -808 0
-7796 -928 -945 -797 0
-7796 -928 -943 -798 0
-7796 -928 -941 -800 0
-7796 -928 -939 -802 0
-7796 -928 -937 -804 0
-7796 -928 -935 -806 0
-7796 -928 -933 -808 0
-7796 -928 -932 -810 0
-7796 -926 -797 0
-7796 -926 -945 -798 0
-7796 -926 -943 -800 0
-7796 -926 -941 -802 0
-7796 -926 -939 -804 0
-7796 -926 -937 -806 0
-7796 -926 -935 -808 0
-7796 -926 -933 -810 0
-7796 -926 -932 0
-7796 -924 -798 0
-7796 -924 -945 -800 0
-7796 -924 -943 -802 0
-7796 -924 -941 -804 0
-7796 -924 -939 -806 0
-7796 -924 -937 -808 0
-7796 -924 -935 -810 0
-7796 -924 -933 0
-7796 -924 -932 0
-7796 -922 -800 0
-7796 -922 -945 -802 0
-7796 -922 -943 -804 0
-7796 -922 -941 -806 0
-7796 -922 -939 -808 0
-7796 -922 -937 -810 0
-7796 -922 -935 0
-7796 -922 -933 0
-7796 -922 -932 0
-7796 -920 -802 0
-7796 -920 -945 -804 0
-7796 -920 -943 -806 0
-7796 -920 -941 -808 0
-7796 -920 -939 -810 0
-7796 -920 -937 0
-7796 -920 -935 0
-7796 -920 -933 0
-7796 -920 -932 0
-7796 -918 -804 0
-7796 -918 -945 -806 0
-7796 -918 -943 -808 0
-7796 -918 -941 -810 0
-7796 -918 -939 0
-7796 -918 -937 0
-7796 -918 -935 0
-7796 -918 -933 0
-7796 -918 -932 0
-7796 -917 -806 0
-7796 -917 -945 -808 0
-7796 -917 -943 -810 0
-7796 -917 -941 0
-7796 -917 -939 0
-7796 -917 -937 0
-7796 -917 -935 0
-7796 -917 -933 0
-7796 -917 -932 0
7796 941 810 0
7796 943 808 0
7796 945 806 0
7796 917 939 810 0
7796 917 941 808 0
7796 917 943 806 0
7796 917 945 804 0
7796 918 937 810 0
7796 918 939 808 0
7796 918 941 806 0
7796 918 943 804 0
7796 918 945 802 0
7796 920 935 810 0
7796 920 937 808 0
7796 920 939 806 0
7796 920 941 804 0
7796 920 943 802 0
7796 920 945 800 0
7796 922 933 810 0
7796 922 935 808 0
7796 922 937 806 0
7796 922 939 804 0
7796 922 941 802 0
7796 922 943 800 0
7796 922 945 798 0
7796 924 932 810 0
7796 924 933 808 0
7796 924 935 806 0
7796 924 937 804 0
7796 924 939 802 0
7796 924 941 800 0
7796 924 943 798 0
7796 924 945 797 0
7796 926 810 0
7796 926 932 808 0
7796 926 933 806 0
7796 926 935 804 0
7796 926 937 802 0
7796 926 939 800 0
7796 926 941 798 0
7796 926 943 797 0
7796 926 945 0
7796 928 808 0
7796 928 932 806 0
7796 928 933 804 0
7796 928 935 802 0
7796 928 937 800 0
7796 928 939 798 0
7796 928 941 797 0
7796 928 943 0
7796 928 945 0
7796 930 806 0
7796 930 932 804 0
7796 930 933 802 0
7796 930 935 800 0
7796 930 937 798 0
7796 930 939 797 0
7796 930 941 0
7796 930 943 0
7796 930 945 0
c (((x_00007_00003 + x_00007_00004)<=5)=tv=SATLiteral(7797))
-7797 862 0
-7797 842 860 0
-7797 843 858 0
-7797 845 857 0
-7797 847 0
-7797 849 0
-7797 851 0
-7797 853 0
-7797 855 0
7797 -847 -857 0
7797 -845 -858 0
7797 -843 -860 0
7797 -842 -862 0
c ((5<=(x_00007_00003 + x_00007_00004))=tv=SATLiteral(7798))
-7798 -845 -857 0
-7798 -843 -858 0
-7798 -842 -860 0
7798 860 0
7798 842 858 0
7798 843 857 0
7798 845 0
7798 847 0
7798 849 0
7798 851 0
7798 853 0
7798 855 0
c (((x_00007_00005 + x_00007_00006)<=6)=tv=SATLiteral(7799))
-7799 894 0
-7799 872 892 0
-7799 873 890 0
-7799 875 888 0
-7799 877 887 0
-7799 879 0
-7799 881 0
-7799 883 0
-7799 885 0
7799 -879 -887 0
7799 -877 -888 0
7799 -875 -890 0
7799 -873 -892 0
7799 -872 -894 0
c ((6<=(x_00007_00005 + x_00007_00006))=tv=SATLiteral(7800))
-7800 -877 -887 0
-7800 -875 -888 0
-7800 -873 -890 0
-7800 -872 -892 0
7800 892 0
7800 872 890 0
7800 873 888 0
7800 875 887 0
7800 877 0
7800 879 0
7800 881 0
7800 883 0
7800 885 0
c (((x_00008_00001 + x_00008_00002 + x_00009_00001)<=13)=tv=SATLiteral(7801))
-7801 965 1095 0
-7801 967 1093 0
-7801 969 1091 0
-7801 971 1089 0
-7801 973 1087 0
-7801 975 1085 0
-7801 947 963 1095 0
-7801 947 965 1093 0
-7801 947 967 1091 0
-7801 947 969 1089 0
-7801 947 971 1087 0
-7801 947 973 1085 0
-7801 947 975 1083 0
-7801 948 962 1095 0
-7801 948 963 1093 0
-7801 948 965 1091 0
-7801 948 967 1089 0
-7801 948 969 1087 0
-7801 948 971 1085 0
-7801 948 973 1083 0
-7801 948 975 1082 0
-7801 950 1095 0
-7801 950 962 1093 0
-7801 950 963 1091 0
-7801 950 965 1089 0
-7801 950 967 1087 0
-7801 950 969 1085 0
-7801 950 971 1083 0
-7801 950 973 1082 0
-7801 950 975 0
-7801 952 1093 0
-7801 952 962 1091 0
-7801 952 963 1089 0
-7801 952 965 1087 0
-7801 952 967 1085 0
-7801 952 969 1083 0
-7801 952 971 1082 0
-7801 952 973 0
-7801 952 975 0
-7801 954 1091 0
-7801 954 962 1089 0
-7801 954 963 1087 0
-7801 954 965 1085 0
-7801 954 967 1083 0
-7801 954 969 1082 0
-7801 954 971 0
-7801 954 973 0
-7801 954 975 0
-7801 956 1089 0
-7801 956 962 1087 0
-7801 956 963 1085 0
-7801 956 965 1083 0
-7801 956 967 1082 0
-7801 956 969 0
-7801 956 971 0
-7801 956 973 0
-7801 956 975 0
-7801 958 1087 0
-7801 958 962 1085 0
-7801 958 963 1083 0
-7801 958 965 1082 0
-7801 958 967 0
-7801 958 969 0
-7801 958 971 0
-7801 958 973 0
-7801 958 975 0
-7801 960 1085 0
-7801 960 962 1083 0
-7801 960 963 1082 0
-7801 960 965 0
-7801 960 967 0
-7801 960 969 0
-7801 960 971 0
-7801 960 973 0
-7801 960 975 0
7801 -965 -1082 0
7801 -963 -1083 0
7801 -962 -1085 0
7801 -960 -967 -1082 0
7801 -960 -965 -1083 0
7801 -960 -963 -1085 0
7801 -960 -962 -1087 0
7801 -958 -969 -1082 0
7801 -958 -967 -1083 0
7801 -958 -965 -1085 0
7801 -958 -963 -1087 0
7801 -958 -962 -1089 0
7801 -956 -971 -1082 0
7801 -956 -969 -1083 0
7801 -956 -967 -1085 0
7801 -956 -965 -1087 0
7801 -956 -963 -1089 0
7801 -956 -962 -1091 0
7801 -954 -973 -1082 0
7801 -954 -971 -1083 0
7801 -954 -969 -1085 0
7801 -954 -967 -1087 0
7801 -954 -965 -1089 0
7801 -954 -963 -1091 0
7801 -954 -962 -1093 0
7801 -952 -975 -1082 0
7801 -952 -973 -1083 0
7801 -952 -971 -1085 0
7801 -952 -969 -1087 0
7801 -952 -967 -1089 0
7801 -952 -965 -1091 0
7801 -952 -963 -1093 0
7801 -952 -962 -1095 0
7801 -950 -1082 0
7801 -950 -975 -1083 0
7801 -950 -973 -1085 0
7801 -950 -971 -1087 0
7801 -950 -969 -1089 0
7801 -950 -967 -1091 0
7801 -950 -965 -1093 0
7801 -950 -963 -1095 0
7801 -950 -962 0
7801 -948 -1083 0
7801 -948 -975 -1085 0
7801 -948 -973 -1087 0
7801 -948 -971 -1089 0
7801 -948 -969 -1091 0
7801 -948 -967 -1093 0
7801 -948 -965 -1095 0
7801 -948 -963 0
7801 -948 -962 0
7801 -947 -1085 0
7801 -947 -975 -1087 0
7801 -947 -973 -1089 0
7801 -947 -971 -1091 0
7801 -947 -969 -1093 0
7801 -947 -967 -1095 0
7801 -947 -965 0
7801 -947 -963 0
7801 -947 -962 0
c ((13<=(x_00008_00001 + x_00008_00002 + x_00009_00001))=tv=SATLiteral(7802))
-7802 -963 -1082 0
-7802 -962 -1083 0
-7802 -960 -965 -1082 0
-7802 -960 -963 -1083 0
-7802 -960 -962 -1085 0
-7802 -958 -967 -1082 0
-7802 -958 -965 -1083 0
-7802 -958 -963 -1085 0
-7802 -958 -962 -1087 0
-7802 -956 -969 -1082 0
-7802 -956 -967 -1083 0
-7802 -956 -965 -1085 0
-7802 -956 -963 -1087 0
-7802 -956 -962 -1089 0
-7802 -954 -971 -1082 0
-7802 -954 -969 -1083 0
-7802 -954 -967 -1085 0
-7802 -954 -965 -1087 0
-7802 -954 -963 -1089 0
-7802 -954 -962 -1091 0
-7802 -952 -973 -1082 0
-7802 -952 -971 -1083 0
-7802 -952 -969 -1085 0
-7802 -952 -967 -1087 0
-7802 -952 -965 -1089 0
-7802 -952 -963 -1091 0
-7802 -952 -962 -1093 0
-7802 -950 -975 -1082 0
-7802 -950 -973 -1083 0
-7802 -950 -971 -1085 0
-7802 -950 -969 -1087 0
-7802 -950 -967 -1089 0
-7802 -950 -965 -1091 0
-7802 -950 -963 -1093 0
-7802 -950 -962 -1095 0
-7802 -948 -1082 0
-7802 -948 -975 -1083 0
-7802 -948 -973 -1085 0
-7802 -948 -971 -1087 0
-7802 -948 -969 -1089 0
-7802 -948 -967 -1091 0
-7802 -948 -965 -1093 0
-7802 -948 -963 -1095 0
-7802 -948 -962 0
-7802 -947 -1083 0
-7802 -947 -975 -1085 0
-7802 -947 -973 -1087 0
-7802 -947 -971 -1089 0
-7802 -947 -969 -1091 0
-7802 -947 -967 -1093 0
-7802 -947 -965 -1095 0
-7802 -947 -963 0
-7802 -947 -962 0
7802 963 1095 0
7802 965 1093 0
7802 967 1091 0
7802 969 1089 0
7802 971 1087 0
7802 973 1085 0
7802 975 1083 0
7802 947 962 1095 0
7802 947 963 1093 0
7802 947 965 1091 0
7802 947 967 1089 0
7802 947 969 1087 0
7802 947 971 1085 0
7802 947 973 1083 0
7802 947 975 1082 0
7802 948 1095 0
7802 948 962 1093 0
7802 948 963 1091 0
7802 948 965 1089 0
7802 948 967 1087 0
7802 948 969 1085 0
7802 948 971 1083 0
7802 948 973 1082 0
7802 948 975 0
7802 950 1093 0
7802 950 962 1091 0
7802 950 963 1089 0
7802 950 965 1087 0
7802 950 967 1085 0
7802 950 969 1083 0
7802 950 971 1082 0
7802 950 973 0
7802 950 975 0
7802 952 1091 0
7802 952 962 1089 0
7802 952 963 1087 0
7802 952 965 1085 0
7802 952 967 1083 0
7802 952 969 1082 0
7802 952 971 0
7802 952 973 0
7802 952 975 0
7802 954 1089 0
7802 954 962 1087 0
7802 954 963 1085 0
7802 954 965 1083 0
7802 954 967 1082 0
7802 954 969 0
7802 954 971 0
7802 954 973 0
7802 954 975 0
7802 956 1087 0
7802 956 962 1085 0
7802 956 963 1083 0
7802 956 965 1082 0
7802 956 967 0
7802 956 969 0
7802 956 971 0
7802 956 973 0
7802 956 975 0
7802 958 1085 0
7802 958 962 1083 0
7802 958 963 1082 0
7802 958 965 0
7802 958 967 0
7802 958 969 0
7802 958 971 0
7802 958 973 0
7802 958 975 0
7802 960 1083 0
7802 960 962 1082 0
7802 960 963 0
7802 960 965 0
7802 960 967 0
7802 960 969 0
7802 960 971 0
7802 960 973 0
7802 960 975 0
c (((x_00008_00003 + x_00008_00004 + x_00009_00004)<=23)=tv=SATLiteral(7803))
-7803 984 1005 1140 0
-7803 986 1003 1140 0
-7803 986 1005 1138 0
-7803 988 1001 1140 0
-7803 988 1003 1138 0
-7803 988 1005 1136 0
-7803 990 999 1140 0
-7803 990 1001 1138 0
-7803 990 1003 1136 0
-7803 990 1005 1134 0
7803 -1134 0
7803 -1005 -1136 0
7803 -1003 -1138 0
7803 -1001 -1140 0
7803 -999 0
7803 -997 0
7803 -995 0
7803 -993 0
7803 -992 0
7803 -990 -1136 0
7803 -990 -1005 -1138 0
7803 -990 -1003 -1140 0
7803 -990 -1001 0
7803 -990 -999 0
7803 -990 -997 0
7803 -990 -995 0
7803 -990 -993 0
7803 -990 -992 0
7803 -988 -1138 0
7803 -988 -1005 -1140 0
7803 -988 -1003 0
7803 -988 -1001 0
7803 -988 -999 0
7803 -988 -997 0
7803 -988 -995 0
7803 -988 -993 0
7803 -988 -992 0
7803 -986 -1140 0
7803 -986 -1005 0
7803 -986 -1003 0
7803 -986 -1001 0
7803 -986 -999 0
7803 -986 -997 0
7803 -986 -995 0
7803 -986 -993 0
7803 -986 -992 0
7803 -984 0
7803 -984 -1005 0
7803 -984 -1003 0
7803 -984 -1001 0
7803 -984 -999 0
7803 -984 -997 0
7803 -984 -995 0
7803 -984 -993 0
7803 -984 -992 0
7803 -982 0
7803 -982 -1005 0
7803 -982 -1003 0
7803 -982 -1001 0
7803 -982 -999 0
7803 -982 -997 0
7803 -982 -995 0
7803 -982 -993 0
7803 -982 -992 0
7803 -980 0
7803 -980 -1005 0
7803 -980 -1003 0
7803 -980 -1001 0
7803 -980 -999 0
7803 -980 -997 0
7803 -980 -995 0
7803 -980 -993 0
7803 -980 -992 0
7803 -978 0
7803 -978 -1005 0
7803 -978 -1003 0
7803 -978 -1001 0
7803 -978 -999 0
7803 -978 -997 0
7803 -978 -995 0
7803 -978 -993 0
7803 -978 -992 0
7803 -977 0
7803 -977 -1005 0
7803 -977 -1003 0
7803 -977 -1001 0
7803 -977 -999 0
7803 -977 -997 0
7803 -977 -995 0
7803 -977 -993 0
7803 -977 -992 0
c ((23<=(x_00008_00003 + x_00008_00004 + x_00009_00004))=tv=SATLiteral(7804))
-7804 -1132 0
-7804 -1005 -1134 0
-7804 -1003 -1136 0
-7804 -1001 -1138 0
-7804 -999 -1140 0
-7804 -997 0
-7804 -995 0
-7804 -993 0
-7804 -992 0
-7804 -990 -1134 0
-7804 -990 -1005 -1136 0
-7804 -990 -1003 -1138 0
-7804 -990 -1001 -1140 0
-7804 -990 -999 0
-7804 -990 -997 0
-7804 -990 -995 0
-7804 -990 -993 0
-7804 -990 -992 0
-7804 -988 -1136 0
-7804 -988 -1005 -1138 0
-7804 -988 -1003 -1140 0
-7804 -988 -1001 0
-7804 -988 -999 0
-7804 -988 -997 0
-7804 -988 -995 0
-7804 -988 -993 0
-7804 -988 -992 0
-7804 -986 -1138 0
-7804 -986 -1005 -1140 0
-7804 -986 -1003 0
-7804 -986 -1001 0
-7804 -986 -999 0
-7804 -986 -997 0
-7804 -986 -995 0
-7804 -986 -993 0
-7804 -986 -992 0
-7804 -984 -1140 0
-7804 -984 -1005 0
-7804 -984 -1003 0
-7804 -984 -1001 0
-7804 -984 -999 0
-7804 -984 -997 0
-7804 -984 -995 0
-7804 -984 -993 0
-7804 -984 -992 0
-7804 -982 0
-7804 -982 -1005 0
-7804 -982 -1003 0
-7804 -982 -1001 0
-7804 -982 -999 0
-7804 -982 -997 0
-7804 -982 -995 0
-7804 -982 -993 0
-7804 -982 -992 0
-7804 -980 0
-7804 -980 -1005 0
-7804 -980 -1003 0
-7804 -980 -1001 0
-7804 -980 -999 0
-7804 -980 -997 0
-7804 -980 -995 0
-7804 -980 -993 0
-7804 -980 -992 0
-7804 -978 0
-7804 -978 -1005 0
-7804 -978 -1003 0
-7804 -978 -1001 0
-7804 -978 -999 0
-7804 -978 -997 0
-7804 -978 -995 0
-7804 -978 -993 0
-7804 -978 -992 0
-7804 -977 0
-7804 -977 -1005 0
-7804 -977 -1003 0
-7804 -977 -1001 0
-7804 -977 -999 0
-7804 -977 -997 0
-7804 -977 -995 0
-7804 -977 -993 0
-7804 -977 -992 0
7804 982 1005 1140 0
7804 984 1003 1140 0
7804 984 1005 1138 0
7804 986 1001 1140 0
7804 986 1003 1138 0
7804 986 1005 1136 0
7804 988 999 1140 0
7804 988 1001 1138 0
7804 988 1003 1136 0
7804 988 1005 1134 0
7804 990 997 1140 0
7804 990 999 1138 0
7804 990 1001 1136 0
7804 990 1003 1134 0
7804 990 1005 1132 0
c (((x_00008_00005 + x_00009_00005)<=10)=tv=SATLiteral(7805))
-7805 1007 1155 0
-7805 1008 1153 0
-7805 1010 1151 0
-7805 1012 1149 0
-7805 1014 1147 0
-7805 1016 1145 0
-7805 1018 1143 0
-7805 1020 1142 0
7805 -1142 0
7805 -1020 -1143 0
7805 -1018 -1145 0
7805 -1016 -1147 0
7805 -1014 -1149 0
7805 -1012 -1151 0
7805 -1010 -1153 0
7805 -1008 -1155 0
7805 -1007 0
c ((10<=(x_00008_00005 + x_00009_00005))=tv=SATLiteral(7806))
-7806 -1020 -1142 0
-7806 -1018 -1143 0
-7806 -1016 -1145 0
-7806 -1014 -1147 0
-7806 -1012 -1149 0
-7806 -1010 -1151 0
-7806 -1008 -1153 0
-7806 -1007 -1155 0
7806 1155 0
7806 1007 1153 0
7806 1008 1151 0
7806 1010 1149 0
7806 1012 1147 0
7806 1014 1145 0
7806 1016 1143 0
7806 1018 1142 0
7806 1020 0
c (((x_00008_00006 + x_00009_00006 + x_00009_00007)<=18)=tv=SATLiteral(7807))
-7807 1170 1185 0
-7807 1022 1168 1185 0
-7807 1022 1170 1183 0
-7807 1023 1166 1185 0
-7807 1023 1168 1183 0
-7807 1023 1170 1181 0
-7807 1025 1164 1185 0
-7807 1025 1166 1183 0
-7807 1025 1168 1181 0
-7807 1025 1170 1179 0
-7807 1027 1162 1185 0
-7807 1027 1164 1183 0
-7807 1027 1166 1181 0
-7807 1027 1168 1179 0
-7807 1027 1170 1177 0
-7807 1029 1160 1185 0
-7807 1029 1162 1183 0
-7807 1029 1164 1181 0
-7807 1029 1166 1179 0
-7807 1029 1168 1177 0
-7807 1029 1170 1175 0
-7807 1031 1158 1185 0
-7807 1031 1160 1183 0
-7807 1031 1162 1181 0
-7807 1031 1164 1179 0
-7807 1031 1166 1177 0
-7807 1031 1168 1175 0
-7807 1031 1170 1173 0
-7807 1033 1157 1185 0
-7807 1033 1158 1183 0
-7807 1033 1160 1181 0
-7807 1033 1162 1179 0
-7807 1033 1164 1177 0
-7807 1033 1166 1175 0
-7807 1033 1168 1173 0
-7807 1033 1170 1172 0
-7807 1035 1185 0
-7807 1035 1157 1183 0
-7807 1035 1158 1181 0
-7807 1035 1160 1179 0
-7807 1035 1162 1177 0
-7807 1035 1164 1175 0
-7807 1035 1166 1173 0
-7807 1035 1168 1172 0
-7807 1035 1170 0
7807 -1170 -1172 0
7807 -1168 -1173 0
7807 -1166 -1175 0
7807 -1164 -1177 0
7807 -1162 -1179 0
7807 -1160 -1181 0
7807 -1158 -1183 0
7807 -1157 -1185 0
7807 -1035 -1172 0
7807 -1035 -1170 -1173 0
7807 -1035 -1168 -1175 0
7807 -1035 -1166 -1177 0
7807 -1035 -1164 -1179 0
7807 -1035 -1162 -1181 0
7807 -1035 -1160 -1183 0
7807 -1035 -1158 -1185 0
7807 -1035 -1157 0
7807 -1033 -1173 0
7807 -1033 -1170 -1175 0
7807 -1033 -1168 -1177 0
7807 -1033 -1166 -1179 0
7807 -1033 -1164 -1181 0
7807 -1033 -1162 -1183 0
7807 -1033 -1160 -1185 0
7807 -1033 -1158 0
7807 -1033 -1157 0
7807 -1031 -1175 0
7807 -1031 -1170 -1177 0
7807 -1031 -1168 -1179 0
7807 -1031 -1166 -1181 0
7807 -1031 -1164 -1183 0
7807 -1031 -1162 -1185 0
7807 -1031 -1160 0
7807 -1031 -1158 0
7807 -1031 -1157 0
7807 -1029 -1177 0
7807 -1029 -1170 -1179 0
7807 -1029 -1168 -1181 0
7807 -1029 -1166 -1183 0
7807 -1029 -1164 -1185 0
7807 -1029 -1162 0
7807 -1029 -1160 0
7807 -1029 -1158 0
7807 -1029 -1157 0
7807 -1027 -1179 0
7807 -1027 -1170 -1181 0
7807 -1027 -1168 -1183 0
7807 -1027 -1166 -1185 0
7807 -1027 -1164 0
7807 -1027 -1162 0
7807 -1027 -1160 0
7807 -1027 -1158 0
7807 -1027 -1157 0
7807 -1025 -1181 0
7807 -1025 -1170 -1183 0
7807 -1025 -1168 -1185 0
7807 -1025 -1166 0
7807 -1025 -1164 0
7807 -1025 -1162 0
7807 -1025 -1160 0
7807 -1025 -1158 0
7807 -1025 -1157 0
7807 -1023 -1183 0
7807 -1023 -1170 -1185 0
7807 -1023 -1168 0
7807 -1023 -1166 0
7807 -1023 -1164 0
7807 -1023 -1162 0
7807 -1023 -1160 0
7807 -1023 -1158 0
7807 -1023 -1157 0
7807 -1022 -1185 0
7807 -1022 -1170 0
7807 -1022 -1168 0
7807 -1022 -1166 0
7807 -1022 -1164 0
7807 -1022 -1162 0
7807 -1022 -1160 0
7807 -1022 -1158 0
7807 -1022 -1157 0
c ((18<=(x_00008_00006 + x_00009_00006 + x_00009_00007))=tv=SATLiteral(7808))
-7808 -1168 -1172 0
-7808 -1166 -1173 0
-7808 -1164 -1175 0
-7808 -1162 -1177 0
-7808 -1160 -1179 0
-7808 -1158 -1181 0
-7808 -1157 -1183 0
-7808 -1035 -1170 -1172 0
-7808 -1035 -1168 -1173 0
-7808 -1035 -1166 -1175 0
-7808 -1035 -1164 -1177 0
-7808 -1035 -1162 -1179 0
-7808 -1035 -1160 -1181 0
-7808 -1035 -1158 -1183 0
-7808 -1035 -1157 -1185 0
-7808 -1033 -1172 0
-7808 -1033 -1170 -1173 0
-7808 -1033 -1168 -1175 0
-7808 -1033 -1166 -1177 0
-7808 -1033 -1164 -1179 0
-7808 -1033 -1162 -1181 0
-7808 -1033 -1160 -1183 0
-7808 -1033 -1158 -1185 0
-7808 -1033 -1157 0
-7808 -1031 -1173 0
-7808 -1031 -1170 -1175 0
-7808 -1031 -1168 -1177 0
-7808 -1031 -1166 -1179 0
-7808 -1031 -1164 -1181 0
-7808 -1031 -1162 -1183 0
-7808 -1031 -1160 -1185 0
-7808 -1031 -1158 0
-7808 -1031 -1157 0
-7808 -1029 -1175 0
-7808 -1029 -1170 -1177 0
-7808 -1029 -1168 -1179 0
-7808 -1029 -1166 -1181 0
-7808 -1029 -1164 -1183 0
-7808 -1029 -1162 -1185 0
-7808 -1029 -1160 0
-7808 -1029 -1158 0
-7808 -1029 -1157 0
-7808 -1027 -1177 0
-7808 -1027 -1170 -1179 0
-7808 -1027 -1168 -1181 0
-7808 -1027 -1166 -1183 0
-7808 -1027 -1164 -1185 0
-7808 -1027 -1162 0
-7808 -1027 -1160 0
-7808 -1027 -1158 0
-7808 -1027 -1157 0
-7808 -1025 -1179 0
-7808 -1025 -1170 -1181 0
-7808 -1025 -1168 -1183 0
-7808 -1025 -1166 -1185 0
-7808 -1025 -1164 0
-7808 -1025 -1162 0
-7808 -1025 -1160 0
-7808 -1025 -1158 0
-7808 -1025 -1157 0
-7808 -1023 -1181 0
-7808 -1023 -1170 -1183 0
-7808 -1023 -1168 -1185 0
-7808 -1023 -1166 0
-7808 -1023 -1164 0
-7808 -1023 -1162 0
-7808 -1023 -1160 0
-7808 -1023 -1158 0
-7808 -1023 -1157 0
-7808 -1022 -1183 0
-7808 -1022 -1170 -1185 0
-7808 -1022 -1168 0
-7808 -1022 -1166 0
-7808 -1022 -1164 0
-7808 -1022 -1162 0
-7808 -1022 -1160 0
-7808 -1022 -1158 0
-7808 -1022 -1157 0
7808 1168 1185 0
7808 1170 1183 0
7808 1022 1166 1185 0
7808 1022 1168 1183 0
7808 1022 1170 1181 0
7808 1023 1164 1185 0
7808 1023 1166 1183 0
7808 1023 1168 1181 0
7808 1023 1170 1179 0
7808 1025 1162 1185 0
7808 1025 1164 1183 0
7808 1025 1166 1181 0
7808 1025 1168 1179 0
7808 1025 1170 1177 0
7808 1027 1160 1185 0
7808 1027 1162 1183 0
7808 1027 1164 1181 0
7808 1027 1166 1179 0
7808 1027 1168 1177 0
7808 1027 1170 1175 0
7808 1029 1158 1185 0
7808 1029 1160 1183 0
7808 1029 1162 1181 0
7808 1029 1164 1179 0
7808 1029 1166 1177 0
7808 1029 1168 1175 0
7808 1029 1170 1173 0
7808 1031 1157 1185 0
7808 1031 1158 1183 0
7808 1031 1160 1181 0
7808 1031 1162 1179 0
7808 1031 1164 1177 0
7808 1031 1166 1175 0
7808 1031 1168 1173 0
7808 1031 1170 1172 0
7808 1033 1185 0
7808 1033 1157 1183 0
7808 1033 1158 1181 0
7808 1033 1160 1179 0
7808 1033 1162 1177 0
7808 1033 1164 1175 0
7808 1033 1166 1173 0
7808 1033 1168 1172 0
7808 1033 1170 0
7808 1035 1183 0
7808 1035 1157 1181 0
7808 1035 1158 1179 0
7808 1035 1160 1177 0
7808 1035 1162 1175 0
7808 1035 1164 1173 0
7808 1035 1166 1172 0
7808 1035 1168 0
7808 1035 1170 0
c (((x_00008_00007 + x_00008_00008 + x_00009_00008)<=10)=tv=SATLiteral(7809))
-7809 1200 0
-7809 1052 1198 0
-7809 1053 1196 0
-7809 1055 1194 0
-7809 1057 1192 0
-7809 1059 1190 0
-7809 1061 1188 0
-7809 1063 1187 0
-7809 1065 0
-7809 1037 1198 0
-7809 1037 1052 1196 0
-7809 1037 1053 1194 0
-7809 1037 1055 1192 0
-7809 1037 1057 1190 0
-7809 1037 1059 1188 0
-7809 1037 1061 1187 0
-7809 1037 1063 0
-7809 1037 1065 0
-7809 1038 1196 0
-7809 1038 1052 1194 0
-7809 1038 1053 1192 0
-7809 1038 1055 1190 0
-7809 1038 1057 1188 0
-7809 1038 1059 1187 0
-7809 1038 1061 0
-7809 1038 1063 0
-7809 1038 1065 0
-7809 1040 1194 0
-7809 1040 1052 1192 0
-7809 1040 1053 1190 0
-7809 1040 1055 1188 0
-7809 1040 1057 1187 0
-7809 1040 1059 0
-7809 1040 1061 0
-7809 1040 1063 0
-7809 1040 1065 0
-7809 1042 1192 0
-7809 1042 1052 1190 0
-7809 1042 1053 1188 0
-7809 1042 1055 1187 0
-7809 1042 1057 0
-7809 1042 1059 0
-7809 1042 1061 0
-7809 1042 1063 0
-7809 1042 1065 0
-7809 1044 1190 0
-7809 1044 1052 1188 0
-7809 1044 1053 1187 0
-7809 1044 1055 0
-7809 1044 1057 0
-7809 1044 1059 0
-7809 1044 1061 0
-7809 1044 1063 0
-7809 1044 1065 0
-7809 1046 1188 0
-7809 1046 1052 1187 0
-7809 1046 1053 0
-7809 1046 1055 0
-7809 1046 1057 0
-7809 1046 1059 0
-7809 1046 1061 0
-7809 1046 1063 0
-7809 1046 1065 0
-7809 1048 1187 0
-7809 1048 1052 0
-7809 1048 1053 0
-7809 1048 1055 0
-7809 1048 1057 0
-7809 1048 1059 0
-7809 1048 1061 0
-7809 1048 1063 0
-7809 1048 1065 0
-7809 1050 0
-7809 1050 1052 0
-7809 1050 1053 0
-7809 1050 1055 0
-7809 1050 1057 0
-7809 1050 1059 0
-7809 1050 1061 0
-7809 1050 1063 0
-7809 1050 1065 0
7809 -1050 -1052 -1187 0
7809 -1048 -1053 -1187 0
7809 -1048 -1052 -1188 0
7809 -1046 -1055 -1187 0
7809 -1046 -1053 -1188 0
7809 -1046 -1052 -1190 0
7809 -1044 -1057 -1187 0
7809 -1044 -1055 -1188 0
7809 -1044 -1053 -1190 0
7809 -1044 -1052 -1192 0
7809 -1042 -1059 -1187 0
7809 -1042 -1057 -1188 0
7809 -1042 -1055 -1190 0
7809 -1042 -1053 -1192 0
7809 -1042 -1052 -1194 0
7809 -1040 -1061 -1187 0
7809 -1040 -1059 -1188 0
7809 -1040 -1057 -1190 0
7809 -1040 -1055 -1192 0
7809 -1040 -1053 -1194 0
7809 -1040 -1052 -1196 0
7809 -1038 -1063 -1187 0
7809 -1038 -1061 -1188 0
7809 -1038 -1059 -1190 0
7809 -1038 -1057 -1192 0
7809 -1038 -1055 -1194 0
7809 -1038 -1053 -1196 0
7809 -1038 -1052 -1198 0
7809 -1037 -1065 -1187 0
7809 -1037 -1063 -1188 0
7809 -1037 -1061 -1190 0
7809 -1037 -1059 -1192 0
7809 -1037 -1057 -1194 0
7809 -1037 -1055 -1196 0
7809 -1037 -1053 -1198 0
7809 -1037 -1052 -1200 0
c ((10<=(x_00008_00007 + x_00008_00008 + x_00009_00008))=tv=SATLiteral(7810))
-7810 -1048 -1052 -1187 0
-7810 -1046 -1053 -1187 0
-7810 -1046 -1052 -1188 0
-7810 -1044 -1055 -1187 0
-7810 -1044 -1053 -1188 0
-7810 -1044 -1052 -1190 0
-7810 -1042 -1057 -1187 0
-7810 -1042 -1055 -1188 0
-7810 -1042 -1053 -1190 0
-7810 -1042 -1052 -1192 0
-7810 -1040 -1059 -1187 0
-7810 -1040 -1057 -1188 0
-7810 -1040 -1055 -1190 0
-7810 -1040 -1053 -1192 0
-7810 -1040 -1052 -1194 0
-7810 -1038 -1061 -1187 0
-7810 -1038 -1059 -1188 0
-7810 -1038 -1057 -1190 0
-7810 -1038 -1055 -1192 0
-7810 -1038 -1053 -1194 0
-7810 -1038 -1052 -1196 0
-7810 -1037 -1063 -1187 0
-7810 -1037 -1061 -1188 0
-7810 -1037 -1059 -1190 0
-7810 -1037 -1057 -1192 0
-7810 -1037 -1055 -1194 0
-7810 -1037 -1053 -1196 0
-7810 -1037 -1052 -1198 0
7810 1198 0
7810 1052 1196 0
7810 1053 1194 0
7810 1055 1192 0
7810 1057 1190 0
7810 1059 1188 0
7810 1061 1187 0
7810 1063 0
7810 1065 0
7810 1037 1196 0
7810 1037 1052 1194 0
7810 1037 1053 1192 0
7810 1037 1055 1190 0
7810 1037 1057 1188 0
7810 1037 1059 1187 0
7810 1037 1061 0
7810 1037 1063 0
7810 1037 1065 0
7810 1038 1194 0
7810 1038 1052 1192 0
7810 1038 1053 1190 0
7810 1038 1055 1188 0
7810 1038 1057 1187 0
7810 1038 1059 0
7810 1038 1061 0
7810 1038 1063 0
7810 1038 1065 0
7810 1040 1192 0
7810 1040 1052 1190 0
7810 1040 1053 1188 0
7810 1040 1055 1187 0
7810 1040 1057 0
7810 1040 1059 0
7810 1040 1061 0
7810 1040 1063 0
7810 1040 1065 0
7810 1042 1190 0
7810 1042 1052 1188 0
7810 1042 1053 1187 0
7810 1042 1055 0
7810 1042 1057 0
7810 1042 1059 0
7810 1042 1061 0
7810 1042 1063 0
7810 1042 1065 0
7810 1044 1188 0
7810 1044 1052 1187 0
7810 1044 1053 0
7810 1044 1055 0
7810 1044 1057 0
7810 1044 1059 0
7810 1044 1061 0
7810 1044 1063 0
7810 1044 1065 0
7810 1046 1187 0
7810 1046 1052 0
7810 1046 1053 0
7810 1046 1055 0
7810 1046 1057 0
7810 1046 1059 0
7810 1046 1061 0
7810 1046 1063 0
7810 1046 1065 0
7810 1048 0
7810 1048 1052 0
7810 1048 1053 0
7810 1048 1055 0
7810 1048 1057 0
7810 1048 1059 0
7810 1048 1061 0
7810 1048 1063 0
7810 1048 1065 0
7810 1050 0
7810 1050 1052 0
7810 1050 1053 0
7810 1050 1055 0
7810 1050 1057 0
7810 1050 1059 0
7810 1050 1061 0
7810 1050 1063 0
7810 1050 1065 0
c (((x_00008_00009 + x_00009_00009)<=9)=tv=SATLiteral(7811))
-7811 1215 0
-7811 1067 1213 0
-7811 1068 1211 0
-7811 1070 1209 0
-7811 1072 1207 0
-7811 1074 1205 0
-7811 1076 1203 0
-7811 1078 1202 0
-7811 1080 0
7811 -1080 -1202 0
7811 -1078 -1203 0
7811 -1076 -1205 0
7811 -1074 -1207 0
7811 -1072 -1209 0
7811 -1070 -1211 0
7811 -1068 -1213 0
7811 -1067 -1215 0
c ((9<=(x_00008_00009 + x_00009_00009))=tv=SATLiteral(7812))
-7812 -1078 -1202 0
-7812 -1076 -1203 0
-7812 -1074 -1205 0
-7812 -1072 -1207 0
-7812 -1070 -1209 0
-7812 -1068 -1211 0
-7812 -1067 -1213 0
7812 1213 0
7812 1067 1211 0
7812 1068 1209 0
7812 1070 1207 0
7812 1072 1205 0
7812 1074 1203 0
7812 1076 1202 0
7812 1078 0
7812 1080 0
c (((x_00009_00002 + x_00009_00003)<=7)=tv=SATLiteral(7813))
-7813 1121 0
-7813 1097 1119 0
-7813 1098 1117 0
-7813 1100 1115 0
-7813 1102 1113 0
-7813 1104 1112 0
-7813 1106 0
-7813 1108 0
-7813 1110 0
7813 -1106 -1112 0
7813 -1104 -1113 0
7813 -1102 -1115 0
7813 -1100 -1117 0
7813 -1098 -1119 0
7813 -1097 -1121 0
c ((7<=(x_00009_00002 + x_00009_00003))=tv=SATLiteral(7814))
-7814 -1104 -1112 0
-7814 -1102 -1113 0
-7814 -1100 -1115 0
-7814 -1098 -1117 0
-7814 -1097 -1119 0
7814 1119 0
7814 1097 1117 0
7814 1098 1115 0
7814 1100 1113 0
7814 1102 1112 0
7814 1104 0
7814 1106 0
7814 1108 0
7814 1110 0
c (((aux449 + aux452 + aux453)<=1)=tv=SATLiteral(7815))
-7815 1862 0
-7815 1856 1861 0
-7815 1857 0
-7815 1859 0
-7815 1847 1861 0
-7815 1847 1856 0
-7815 1847 1857 0
-7815 1847 1859 0
-7815 1848 0
-7815 1848 1856 0
-7815 1848 1857 0
-7815 1848 1859 0
7815 -1848 -1856 -1861 0
7815 -1847 -1857 -1861 0
7815 -1847 -1856 -1862 0
c ((1<=(aux449 + aux452 + aux453))=tv=SATLiteral(7816))
-7816 -1847 -1856 -1861 0
7816 1861 0
7816 1856 0
7816 1857 0
7816 1859 0
7816 1847 0
7816 1847 1856 0
7816 1847 1857 0
7816 1847 1859 0
7816 1848 0
7816 1848 1856 0
7816 1848 1857 0
7816 1848 1859 0
c (((aux455 + aux458 + aux459)<=1)=tv=SATLiteral(7817))
-7817 1886 0
-7817 1880 1885 0
-7817 1881 0
-7817 1883 0
-7817 1871 1885 0
-7817 1871 1880 0
-7817 1871 1881 0
-7817 1871 1883 0
-7817 1872 0
-7817 1872 1880 0
-7817 1872 1881 0
-7817 1872 1883 0
7817 -1872 -1880 -1885 0
7817 -1871 -1881 -1885 0
7817 -1871 -1880 -1886 0
c ((1<=(aux455 + aux458 + aux459))=tv=SATLiteral(7818))
-7818 -1871 -1880 -1885 0
7818 1885 0
7818 1880 0
7818 1881 0
7818 1883 0
7818 1871 0
7818 1871 1880 0
7818 1871 1881 0
7818 1871 1883 0
7818 1872 0
7818 1872 1880 0
7818 1872 1881 0
7818 1872 1883 0
c (((aux461 + aux464 + aux465)<=1)=tv=SATLiteral(7819))
-7819 1910 0
-7819 1904 1909 0
-7819 1905 0
-7819 1907 0
-7819 1895 1909 0
-7819 1895 1904 0
-7819 1895 1905 0
-7819 1895 1907 0
-7819 1896 0
-7819 1896 1904 0
-7819 1896 1905 0
-7819 1896 1907 0
7819 -1896 -1904 -1909 0
7819 -1895 -1905 -1909 0
7819 -1895 -1904 -1910 0
c ((1<=(aux461 + aux464 + aux465))=tv=SATLiteral(7820))
-7820 -1895 -1904 -1909 0
7820 1909 0
7820 1904 0
7820 1905 0
7820 1907 0
7820 1895 0
7820 1895 1904 0
7820 1895 1905 0
7820 1895 1907 0
7820 1896 0
7820 1896 1904 0
7820 1896 1905 0
7820 1896 1907 0
c (((aux467 + aux470 + aux471)<=1)=tv=SATLiteral(7821))
-7821 1934 0
-7821 1928 1933 0
-7821 1929 0
-7821 1931 0
-7821 1919 1933 0
-7821 1919 1928 0
-7821 1919 1929 0
-7821 1919 1931 0
-7821 1920 0
-7821 1920 1928 0
-7821 1920 1929 0
-7821 1920 1931 0
7821 -1920 -1928 -1933 0
7821 -1919 -1929 -1933 0
7821 -1919 -1928 -1934 0
c ((1<=(aux467 + aux470 + aux471))=tv=SATLiteral(7822))
-7822 -1919 -1928 -1933 0
7822 1933 0
7822 1928 0
7822 1929 0
7822 1931 0
7822 1919 0
7822 1919 1928 0
7822 1919 1929 0
7822 1919 1931 0
7822 1920 0
7822 1920 1928 0
7822 1920 1929 0
7822 1920 1931 0
c (((aux473 + aux476 + aux477)<=1)=tv=SATLiteral(7823))
-7823 1958 0
-7823 1952 1957 0
-7823 1953 0
-7823 1955 0
-7823 1943 1957 0
-7823 1943 1952 0
-7823 1943 1953 0
-7823 1943 1955 0
-7823 1944 0
-7823 1944 1952 0
-7823 1944 1953 0
-7823 1944 1955 0
7823 -1944 -1952 -1957 0
7823 -1943 -1953 -1957 0
7823 -1943 -1952 -1958 0
c ((1<=(aux473 + aux476 + aux477))=tv=SATLiteral(7824))
-7824 -1943 -1952 -1957 0
7824 1957 0
7824 1952 0
7824 1953 0
7824 1955 0
7824 1943 0
7824 1943 1952 0
7824 1943 1953 0
7824 1943 1955 0
7824 1944 0
7824 1944 1952 0
7824 1944 1953 0
7824 1944 1955 0
c (((aux479 + aux482 + aux483)<=1)=tv=SATLiteral(7825))
-7825 1982 0
-7825 1976 1981 0
-7825 1977 0
-7825 1979 0
-7825 1967 1981 0
-7825 1967 1976 0
-7825 1967 1977 0
-7825 1967 1979 0
-7825 1968 0
-7825 1968 1976 0
-7825 1968 1977 0
-7825 1968 1979 0
7825 -1968 -1976 -1981 0
7825 -1967 -1977 -1981 0
7825 -1967 -1976 -1982 0
c ((1<=(aux479 + aux482 + aux483))=tv=SATLiteral(7826))
-7826 -1967 -1976 -1981 0
7826 1981 0
7826 1976 0
7826 1977 0
7826 1979 0
7826 1967 0
7826 1967 1976 0
7826 1967 1977 0
7826 1967 1979 0
7826 1968 0
7826 1968 1976 0
7826 1968 1977 0
7826 1968 1979 0
c (((aux485 + aux488 + aux489)<=1)=tv=SATLiteral(7827))
-7827 2006 0
-7827 2000 2005 0
-7827 2001 0
-7827 2003 0
-7827 1991 2005 0
-7827 1991 2000 0
-7827 1991 2001 0
-7827 1991 2003 0
-7827 1992 0
-7827 1992 2000 0
-7827 1992 2001 0
-7827 1992 2003 0
7827 -1992 -2000 -2005 0
7827 -1991 -2001 -2005 0
7827 -1991 -2000 -2006 0
c ((1<=(aux485 + aux488 + aux489))=tv=SATLiteral(7828))
-7828 -1991 -2000 -2005 0
7828 2005 0
7828 2000 0
7828 2001 0
7828 2003 0
7828 1991 0
7828 1991 2000 0
7828 1991 2001 0
7828 1991 2003 0
7828 1992 0
7828 1992 2000 0
7828 1992 2001 0
7828 1992 2003 0
c (((aux491 + aux494 + aux495)<=1)=tv=SATLiteral(7829))
-7829 2030 0
-7829 2024 2029 0
-7829 2025 0
-7829 2027 0
-7829 2015 2029 0
-7829 2015 2024 0
-7829 2015 2025 0
-7829 2015 2027 0
-7829 2016 0
-7829 2016 2024 0
-7829 2016 2025 0
-7829 2016 2027 0
7829 -2016 -2024 -2029 0
7829 -2015 -2025 -2029 0
7829 -2015 -2024 -2030 0
c ((1<=(aux491 + aux494 + aux495))=tv=SATLiteral(7830))
-7830 -2015 -2024 -2029 0
7830 2029 0
7830 2024 0
7830 2025 0
7830 2027 0
7830 2015 0
7830 2015 2024 0
7830 2015 2025 0
7830 2015 2027 0
7830 2016 0
7830 2016 2024 0
7830 2016 2025 0
7830 2016 2027 0
c (((aux497 + aux500 + aux501)<=1)=tv=SATLiteral(7831))
-7831 2054 0
-7831 2048 2053 0
-7831 2049 0
-7831 2051 0
-7831 2039 2053 0
-7831 2039 2048 0
-7831 2039 2049 0
-7831 2039 2051 0
-7831 2040 0
-7831 2040 2048 0
-7831 2040 2049 0
-7831 2040 2051 0
7831 -2040 -2048 -2053 0
7831 -2039 -2049 -2053 0
7831 -2039 -2048 -2054 0
c ((1<=(aux497 + aux500 + aux501))=tv=SATLiteral(7832))
-7832 -2039 -2048 -2053 0
7832 2053 0
7832 2048 0
7832 2049 0
7832 2051 0
7832 2039 0
7832 2039 2048 0
7832 2039 2049 0
7832 2039 2051 0
7832 2040 0
7832 2040 2048 0
7832 2040 2049 0
7832 2040 2051 0
c (((aux503 + aux506 + aux507)<=1)=tv=SATLiteral(7833))
-7833 2078 0
-7833 2072 2077 0
-7833 2073 0
-7833 2075 0
-7833 2063 2077 0
-7833 2063 2072 0
-7833 2063 2073 0
-7833 2063 2075 0
-7833 2064 0
-7833 2064 2072 0
-7833 2064 2073 0
-7833 2064 2075 0
7833 -2064 -2072 -2077 0
7833 -2063 -2073 -2077 0
7833 -2063 -2072 -2078 0
c ((1<=(aux503 + aux506 + aux507))=tv=SATLiteral(7834))
-7834 -2063 -2072 -2077 0
7834 2077 0
7834 2072 0
7834 2073 0
7834 2075 0
7834 2063 0
7834 2063 2072 0
7834 2063 2073 0
7834 2063 2075 0
7834 2064 0
7834 2064 2072 0
7834 2064 2073 0
7834 2064 2075 0
c (((aux509 + aux512 + aux513)<=1)=tv=SATLiteral(7835))
-7835 2102 0
-7835 2096 2101 0
-7835 2097 0
-7835 2099 0
-7835 2087 2101 0
-7835 2087 2096 0
-7835 2087 2097 0
-7835 2087 2099 0
-7835 2088 0
-7835 2088 2096 0
-7835 2088 2097 0
-7835 2088 2099 0
7835 -2088 -2096 -2101 0
7835 -2087 -2097 -2101 0
7835 -2087 -2096 -2102 0
c ((1<=(aux509 + aux512 + aux513))=tv=SATLiteral(7836))
-7836 -2087 -2096 -2101 0
7836 2101 0
7836 2096 0
7836 2097 0
7836 2099 0
7836 2087 0
7836 2087 2096 0
7836 2087 2097 0
7836 2087 2099 0
7836 2088 0
7836 2088 2096 0
7836 2088 2097 0
7836 2088 2099 0
c (((aux515 + aux518 + aux519)<=1)=tv=SATLiteral(7837))
-7837 2126 0
-7837 2120 2125 0
-7837 2121 0
-7837 2123 0
-7837 2111 2125 0
-7837 2111 2120 0
-7837 2111 2121 0
-7837 2111 2123 0
-7837 2112 0
-7837 2112 2120 0
-7837 2112 2121 0
-7837 2112 2123 0
7837 -2112 -2120 -2125 0
7837 -2111 -2121 -2125 0
7837 -2111 -2120 -2126 0
c ((1<=(aux515 + aux518 + aux519))=tv=SATLiteral(7838))
-7838 -2111 -2120 -2125 0
7838 2125 0
7838 2120 0
7838 2121 0
7838 2123 0
7838 2111 0
7838 2111 2120 0
7838 2111 2121 0
7838 2111 2123 0
7838 2112 0
7838 2112 2120 0
7838 2112 2121 0
7838 2112 2123 0
c (((aux521 + aux524 + aux525)<=1)=tv=SATLiteral(7839))
-7839 2150 0
-7839 2144 2149 0
-7839 2145 0
-7839 2147 0
-7839 2135 2149 0
-7839 2135 2144 0
-7839 2135 2145 0
-7839 2135 2147 0
-7839 2136 0
-7839 2136 2144 0
-7839 2136 2145 0
-7839 2136 2147 0
7839 -2136 -2144 -2149 0
7839 -2135 -2145 -2149 0
7839 -2135 -2144 -2150 0
c ((1<=(aux521 + aux524 + aux525))=tv=SATLiteral(7840))
-7840 -2135 -2144 -2149 0
7840 2149 0
7840 2144 0
7840 2145 0
7840 2147 0
7840 2135 0
7840 2135 2144 0
7840 2135 2145 0
7840 2135 2147 0
7840 2136 0
7840 2136 2144 0
7840 2136 2145 0
7840 2136 2147 0
c (((aux527 + aux530 + aux531)<=1)=tv=SATLiteral(7841))
-7841 2174 0
-7841 2168 2173 0
-7841 2169 0
-7841 2171 0
-7841 2159 2173 0
-7841 2159 2168 0
-7841 2159 2169 0
-7841 2159 2171 0
-7841 2160 0
-7841 2160 2168 0
-7841 2160 2169 0
-7841 2160 2171 0
7841 -2160 -2168 -2173 0
7841 -2159 -2169 -2173 0
7841 -2159 -2168 -2174 0
c ((1<=(aux527 + aux530 + aux531))=tv=SATLiteral(7842))
-7842 -2159 -2168 -2173 0
7842 2173 0
7842 2168 0
7842 2169 0
7842 2171 0
7842 2159 0
7842 2159 2168 0
7842 2159 2169 0
7842 2159 2171 0
7842 2160 0
7842 2160 2168 0
7842 2160 2169 0
7842 2160 2171 0
c (((aux533 + aux536 + aux537)<=1)=tv=SATLiteral(7843))
-7843 2198 0
-7843 2192 2197 0
-7843 2193 0
-7843 2195 0
-7843 2183 2197 0
-7843 2183 2192 0
-7843 2183 2193 0
-7843 2183 2195 0
-7843 2184 0
-7843 2184 2192 0
-7843 2184 2193 0
-7843 2184 2195 0
7843 -2184 -2192 -2197 0
7843 -2183 -2193 -2197 0
7843 -2183 -2192 -2198 0
c ((1<=(aux533 + aux536 + aux537))=tv=SATLiteral(7844))
-7844 -2183 -2192 -2197 0
7844 2197 0
7844 2192 0
7844 2193 0
7844 2195 0
7844 2183 0
7844 2183 2192 0
7844 2183 2193 0
7844 2183 2195 0
7844 2184 0
7844 2184 2192 0
7844 2184 2193 0
7844 2184 2195 0
c (((aux539 + aux542 + aux543)<=1)=tv=SATLiteral(7845))
-7845 2222 0
-7845 2216 2221 0
-7845 2217 0
-7845 2219 0
-7845 2207 2221 0
-7845 2207 2216 0
-7845 2207 2217 0
-7845 2207 2219 0
-7845 2208 0
-7845 2208 2216 0
-7845 2208 2217 0
-7845 2208 2219 0
7845 -2208 -2216 -2221 0
7845 -2207 -2217 -2221 0
7845 -2207 -2216 -2222 0
c ((1<=(aux539 + aux542 + aux543))=tv=SATLiteral(7846))
-7846 -2207 -2216 -2221 0
7846 2221 0
7846 2216 0
7846 2217 0
7846 2219 0
7846 2207 0
7846 2207 2216 0
7846 2207 2217 0
7846 2207 2219 0
7846 2208 0
7846 2208 2216 0
7846 2208 2217 0
7846 2208 2219 0
c (((aux545 + aux548 + aux549)<=1)=tv=SATLiteral(7847))
-7847 2246 0
-7847 2240 2245 0
-7847 2241 0
-7847 2243 0
-7847 2231 2245 0
-7847 2231 2240 0
-7847 2231 2241 0
-7847 2231 2243 0
-7847 2232 0
-7847 2232 2240 0
-7847 2232 2241 0
-7847 2232 2243 0
7847 -2232 -2240 -2245 0
7847 -2231 -2241 -2245 0
7847 -2231 -2240 -2246 0
c ((1<=(aux545 + aux548 + aux549))=tv=SATLiteral(7848))
-7848 -2231 -2240 -2245 0
7848 2245 0
7848 2240 0
7848 2241 0
7848 2243 0
7848 2231 0
7848 2231 2240 0
7848 2231 2241 0
7848 2231 2243 0
7848 2232 0
7848 2232 2240 0
7848 2232 2241 0
7848 2232 2243 0
c (((aux551 + aux554 + aux555)<=1)=tv=SATLiteral(7849))
-7849 2270 0
-7849 2264 2269 0
-7849 2265 0
-7849 2267 0
-7849 2255 2269 0
-7849 2255 2264 0
-7849 2255 2265 0
-7849 2255 2267 0
-7849 2256 0
-7849 2256 2264 0
-7849 2256 2265 0
-7849 2256 2267 0
7849 -2256 -2264 -2269 0
7849 -2255 -2265 -2269 0
7849 -2255 -2264 -2270 0
c ((1<=(aux551 + aux554 + aux555))=tv=SATLiteral(7850))
-7850 -2255 -2264 -2269 0
7850 2269 0
7850 2264 0
7850 2265 0
7850 2267 0
7850 2255 0
7850 2255 2264 0
7850 2255 2265 0
7850 2255 2267 0
7850 2256 0
7850 2256 2264 0
7850 2256 2265 0
7850 2256 2267 0
c (((aux557 + aux560 + aux561)<=1)=tv=SATLiteral(7851))
-7851 2294 0
-7851 2288 2293 0
-7851 2289 0
-7851 2291 0
-7851 2279 2293 0
-7851 2279 2288 0
-7851 2279 2289 0
-7851 2279 2291 0
-7851 2280 0
-7851 2280 2288 0
-7851 2280 2289 0
-7851 2280 2291 0
7851 -2280 -2288 -2293 0
7851 -2279 -2289 -2293 0
7851 -2279 -2288 -2294 0
c ((1<=(aux557 + aux560 + aux561))=tv=SATLiteral(7852))
-7852 -2279 -2288 -2293 0
7852 2293 0
7852 2288 0
7852 2289 0
7852 2291 0
7852 2279 0
7852 2279 2288 0
7852 2279 2289 0
7852 2279 2291 0
7852 2280 0
7852 2280 2288 0
7852 2280 2289 0
7852 2280 2291 0
c (((aux563 + aux566 + aux567)<=1)=tv=SATLiteral(7853))
-7853 2318 0
-7853 2312 2317 0
-7853 2313 0
-7853 2315 0
-7853 2303 2317 0
-7853 2303 2312 0
-7853 2303 2313 0
-7853 2303 2315 0
-7853 2304 0
-7853 2304 2312 0
-7853 2304 2313 0
-7853 2304 2315 0
7853 -2304 -2312 -2317 0
7853 -2303 -2313 -2317 0
7853 -2303 -2312 -2318 0
c ((1<=(aux563 + aux566 + aux567))=tv=SATLiteral(7854))
-7854 -2303 -2312 -2317 0
7854 2317 0
7854 2312 0
7854 2313 0
7854 2315 0
7854 2303 0
7854 2303 2312 0
7854 2303 2313 0
7854 2303 2315 0
7854 2304 0
7854 2304 2312 0
7854 2304 2313 0
7854 2304 2315 0
c (((aux569 + aux572 + aux573)<=1)=tv=SATLiteral(7855))
-7855 2342 0
-7855 2336 2341 0
-7855 2337 0
-7855 2339 0
-7855 2327 2341 0
-7855 2327 2336 0
-7855 2327 2337 0
-7855 2327 2339 0
-7855 2328 0
-7855 2328 2336 0
-7855 2328 2337 0
-7855 2328 2339 0
7855 -2328 -2336 -2341 0
7855 -2327 -2337 -2341 0
7855 -2327 -2336 -2342 0
c ((1<=(aux569 + aux572 + aux573))=tv=SATLiteral(7856))
-7856 -2327 -2336 -2341 0
7856 2341 0
7856 2336 0
7856 2337 0
7856 2339 0
7856 2327 0
7856 2327 2336 0
7856 2327 2337 0
7856 2327 2339 0
7856 2328 0
7856 2328 2336 0
7856 2328 2337 0
7856 2328 2339 0
c (((aux575 + aux578 + aux579)<=1)=tv=SATLiteral(7857))
-7857 2366 0
-7857 2360 2365 0
-7857 2361 0
-7857 2363 0
-7857 2351 2365 0
-7857 2351 2360 0
-7857 2351 2361 0
-7857 2351 2363 0
-7857 2352 0
-7857 2352 2360 0
-7857 2352 2361 0
-7857 2352 2363 0
7857 -2352 -2360 -2365 0
7857 -2351 -2361 -2365 0
7857 -2351 -2360 -2366 0
c ((1<=(aux575 + aux578 + aux579))=tv=SATLiteral(7858))
-7858 -2351 -2360 -2365 0
7858 2365 0
7858 2360 0
7858 2361 0
7858 2363 0
7858 2351 0
7858 2351 2360 0
7858 2351 2361 0
7858 2351 2363 0
7858 2352 0
7858 2352 2360 0
7858 2352 2361 0
7858 2352 2363 0
c (((aux581 + aux584 + aux585)<=1)=tv=SATLiteral(7859))
-7859 2390 0
-7859 2384 2389 0
-7859 2385 0
-7859 2387 0
-7859 2375 2389 0
-7859 2375 2384 0
-7859 2375 2385 0
-7859 2375 2387 0
-7859 2376 0
-7859 2376 2384 0
-7859 2376 2385 0
-7859 2376 2387 0
7859 -2376 -2384 -2389 0
7859 -2375 -2385 -2389 0
7859 -2375 -2384 -2390 0
c ((1<=(aux581 + aux584 + aux585))=tv=SATLiteral(7860))
-7860 -2375 -2384 -2389 0
7860 2389 0
7860 2384 0
7860 2385 0
7860 2387 0
7860 2375 0
7860 2375 2384 0
7860 2375 2385 0
7860 2375 2387 0
7860 2376 0
7860 2376 2384 0
7860 2376 2385 0
7860 2376 2387 0
c (((aux587 + aux590 + aux591)<=1)=tv=SATLiteral(7861))
-7861 2414 0
-7861 2408 2413 0
-7861 2409 0
-7861 2411 0
-7861 2399 2413 0
-7861 2399 2408 0
-7861 2399 2409 0
-7861 2399 2411 0
-7861 2400 0
-7861 2400 2408 0
-7861 2400 2409 0
-7861 2400 2411 0
7861 -2400 -2408 -2413 0
7861 -2399 -2409 -2413 0
7861 -2399 -2408 -2414 0
c ((1<=(aux587 + aux590 + aux591))=tv=SATLiteral(7862))
-7862 -2399 -2408 -2413 0
7862 2413 0
7862 2408 0
7862 2409 0
7862 2411 0
7862 2399 0
7862 2399 2408 0
7862 2399 2409 0
7862 2399 2411 0
7862 2400 0
7862 2400 2408 0
7862 2400 2409 0
7862 2400 2411 0
c (((aux593 + aux596 + aux597)<=1)=tv=SATLiteral(7863))
-7863 2438 0
-7863 2432 2437 0
-7863 2433 0
-7863 2435 0
-7863 2423 2437 0
-7863 2423 2432 0
-7863 2423 2433 0
-7863 2423 2435 0
-7863 2424 0
-7863 2424 2432 0
-7863 2424 2433 0
-7863 2424 2435 0
7863 -2424 -2432 -2437 0
7863 -2423 -2433 -2437 0
7863 -2423 -2432 -2438 0
c ((1<=(aux593 + aux596 + aux597))=tv=SATLiteral(7864))
-7864 -2423 -2432 -2437 0
7864 2437 0
7864 2432 0
7864 2433 0
7864 2435 0
7864 2423 0
7864 2423 2432 0
7864 2423 2433 0
7864 2423 2435 0
7864 2424 0
7864 2424 2432 0
7864 2424 2433 0
7864 2424 2435 0
c (((aux599 + aux602 + aux603)<=1)=tv=SATLiteral(7865))
-7865 2462 0
-7865 2456 2461 0
-7865 2457 0
-7865 2459 0
-7865 2447 2461 0
-7865 2447 2456 0
-7865 2447 2457 0
-7865 2447 2459 0
-7865 2448 0
-7865 2448 2456 0
-7865 2448 2457 0
-7865 2448 2459 0
7865 -2448 -2456 -2461 0
7865 -2447 -2457 -2461 0
7865 -2447 -2456 -2462 0
c ((1<=(aux599 + aux602 + aux603))=tv=SATLiteral(7866))
-7866 -2447 -2456 -2461 0
7866 2461 0
7866 2456 0
7866 2457 0
7866 2459 0
7866 2447 0
7866 2447 2456 0
7866 2447 2457 0
7866 2447 2459 0
7866 2448 0
7866 2448 2456 0
7866 2448 2457 0
7866 2448 2459 0
c (((aux605 + aux608 + aux609)<=1)=tv=SATLiteral(7867))
-7867 2486 0
-7867 2480 2485 0
-7867 2481 0
-7867 2483 0
-7867 2471 2485 0
-7867 2471 2480 0
-7867 2471 2481 0
-7867 2471 2483 0
-7867 2472 0
-7867 2472 2480 0
-7867 2472 2481 0
-7867 2472 2483 0
7867 -2472 -2480 -2485 0
7867 -2471 -2481 -2485 0
7867 -2471 -2480 -2486 0
c ((1<=(aux605 + aux608 + aux609))=tv=SATLiteral(7868))
-7868 -2471 -2480 -2485 0
7868 2485 0
7868 2480 0
7868 2481 0
7868 2483 0
7868 2471 0
7868 2471 2480 0
7868 2471 2481 0
7868 2471 2483 0
7868 2472 0
7868 2472 2480 0
7868 2472 2481 0
7868 2472 2483 0
c (((aux611 + aux614 + aux615)<=1)=tv=SATLiteral(7869))
-7869 2510 0
-7869 2504 2509 0
-7869 2505 0
-7869 2507 0
-7869 2495 2509 0
-7869 2495 2504 0
-7869 2495 2505 0
-7869 2495 2507 0
-7869 2496 0
-7869 2496 2504 0
-7869 2496 2505 0
-7869 2496 2507 0
7869 -2496 -2504 -2509 0
7869 -2495 -2505 -2509 0
7869 -2495 -2504 -2510 0
c ((1<=(aux611 + aux614 + aux615))=tv=SATLiteral(7870))
-7870 -2495 -2504 -2509 0
7870 2509 0
7870 2504 0
7870 2505 0
7870 2507 0
7870 2495 0
7870 2495 2504 0
7870 2495 2505 0
7870 2495 2507 0
7870 2496 0
7870 2496 2504 0
7870 2496 2505 0
7870 2496 2507 0
c (((aux617 + aux620 + aux621)<=1)=tv=SATLiteral(7871))
-7871 2534 0
-7871 2528 2533 0
-7871 2529 0
-7871 2531 0
-7871 2519 2533 0
-7871 2519 2528 0
-7871 2519 2529 0
-7871 2519 2531 0
-7871 2520 0
-7871 2520 2528 0
-7871 2520 2529 0
-7871 2520 2531 0
7871 -2520 -2528 -2533 0
7871 -2519 -2529 -2533 0
7871 -2519 -2528 -2534 0
c ((1<=(aux617 + aux620 + aux621))=tv=SATLiteral(7872))
-7872 -2519 -2528 -2533 0
7872 2533 0
7872 2528 0
7872 2529 0
7872 2531 0
7872 2519 0
7872 2519 2528 0
7872 2519 2529 0
7872 2519 2531 0
7872 2520 0
7872 2520 2528 0
7872 2520 2529 0
7872 2520 2531 0
c (((aux623 + aux626 + aux627)<=1)=tv=SATLiteral(7873))
-7873 2558 0
-7873 2552 2557 0
-7873 2553 0
-7873 2555 0
-7873 2543 2557 0
-7873 2543 2552 0
-7873 2543 2553 0
-7873 2543 2555 0
-7873 2544 0
-7873 2544 2552 0
-7873 2544 2553 0
-7873 2544 2555 0
7873 -2544 -2552 -2557 0
7873 -2543 -2553 -2557 0
7873 -2543 -2552 -2558 0
c ((1<=(aux623 + aux626 + aux627))=tv=SATLiteral(7874))
-7874 -2543 -2552 -2557 0
7874 2557 0
7874 2552 0
7874 2553 0
7874 2555 0
7874 2543 0
7874 2543 2552 0
7874 2543 2553 0
7874 2543 2555 0
7874 2544 0
7874 2544 2552 0
7874 2544 2553 0
7874 2544 2555 0
c (((aux629 + aux632 + aux633)<=1)=tv=SATLiteral(7875))
-7875 2582 0
-7875 2576 2581 0
-7875 2577 0
-7875 2579 0
-7875 2567 2581 0
-7875 2567 2576 0
-7875 2567 2577 0
-7875 2567 2579 0
-7875 2568 0
-7875 2568 2576 0
-7875 2568 2577 0
-7875 2568 2579 0
7875 -2568 -2576 -2581 0
7875 -2567 -2577 -2581 0
7875 -2567 -2576 -2582 0
c ((1<=(aux629 + aux632 + aux633))=tv=SATLiteral(7876))
-7876 -2567 -2576 -2581 0
7876 2581 0
7876 2576 0
7876 2577 0
7876 2579 0
7876 2567 0
7876 2567 2576 0
7876 2567 2577 0
7876 2567 2579 0
7876 2568 0
7876 2568 2576 0
7876 2568 2577 0
7876 2568 2579 0
c (((aux635 + aux638 + aux639)<=1)=tv=SATLiteral(7877))
-7877 2606 0
-7877 2600 2605 0
-7877 2601 0
-7877 2603 0
-7877 2591 2605 0
-7877 2591 2600 0
-7877 2591 2601 0
-7877 2591 2603 0
-7877 2592 0
-7877 2592 2600 0
-7877 2592 2601 0
-7877 2592 2603 0
7877 -2592 -2600 -2605 0
7877 -2591 -2601 -2605 0
7877 -2591 -2600 -2606 0
c ((1<=(aux635 + aux638 + aux639))=tv=SATLiteral(7878))
-7878 -2591 -2600 -2605 0
7878 2605 0
7878 2600 0
7878 2601 0
7878 2603 0
7878 2591 0
7878 2591 2600 0
7878 2591 2601 0
7878 2591 2603 0
7878 2592 0
7878 2592 2600 0
7878 2592 2601 0
7878 2592 2603 0
c (((aux641 + aux644 + aux645)<=1)=tv=SATLiteral(7879))
-7879 2630 0
-7879 2624 2629 0
-7879 2625 0
-7879 2627 0
-7879 2615 2629 0
-7879 2615 2624 0
-7879 2615 2625 0
-7879 2615 2627 0
-7879 2616 0
-7879 2616 2624 0
-7879 2616 2625 0
-7879 2616 2627 0
7879 -2616 -2624 -2629 0
7879 -2615 -2625 -2629 0
7879 -2615 -2624 -2630 0
c ((1<=(aux641 + aux644 + aux645))=tv=SATLiteral(7880))
-7880 -2615 -2624 -2629 0
7880 2629 0
7880 2624 0
7880 2625 0
7880 2627 0
7880 2615 0
7880 2615 2624 0
7880 2615 2625 0
7880 2615 2627 0
7880 2616 0
7880 2616 2624 0
7880 2616 2625 0
7880 2616 2627 0
c (((aux647 + aux650 + aux651)<=1)=tv=SATLiteral(7881))
-7881 2654 0
-7881 2648 2653 0
-7881 2649 0
-7881 2651 0
-7881 2639 2653 0
-7881 2639 2648 0
-7881 2639 2649 0
-7881 2639 2651 0
-7881 2640 0
-7881 2640 2648 0
-7881 2640 2649 0
-7881 2640 2651 0
7881 -2640 -2648 -2653 0
7881 -2639 -2649 -2653 0
7881 -2639 -2648 -2654 0
c ((1<=(aux647 + aux650 + aux651))=tv=SATLiteral(7882))
-7882 -2639 -2648 -2653 0
7882 2653 0
7882 2648 0
7882 2649 0
7882 2651 0
7882 2639 0
7882 2639 2648 0
7882 2639 2649 0
7882 2639 2651 0
7882 2640 0
7882 2640 2648 0
7882 2640 2649 0
7882 2640 2651 0
c (((aux653 + aux656 + aux657)<=1)=tv=SATLiteral(7883))
-7883 2678 0
-7883 2672 2677 0
-7883 2673 0
-7883 2675 0
-7883 2663 2677 0
-7883 2663 2672 0
-7883 2663 2673 0
-7883 2663 2675 0
-7883 2664 0
-7883 2664 2672 0
-7883 2664 2673 0
-7883 2664 2675 0
7883 -2664 -2672 -2677 0
7883 -2663 -2673 -2677 0
7883 -2663 -2672 -2678 0
c ((1<=(aux653 + aux656 + aux657))=tv=SATLiteral(7884))
-7884 -2663 -2672 -2677 0
7884 2677 0
7884 2672 0
7884 2673 0
7884 2675 0
7884 2663 0
7884 2663 2672 0
7884 2663 2673 0
7884 2663 2675 0
7884 2664 0
7884 2664 2672 0
7884 2664 2673 0
7884 2664 2675 0
c (((aux659 + aux662 + aux663)<=1)=tv=SATLiteral(7885))
-7885 2702 0
-7885 2696 2701 0
-7885 2697 0
-7885 2699 0
-7885 2687 2701 0
-7885 2687 2696 0
-7885 2687 2697 0
-7885 2687 2699 0
-7885 2688 0
-7885 2688 2696 0
-7885 2688 2697 0
-7885 2688 2699 0
7885 -2688 -2696 -2701 0
7885 -2687 -2697 -2701 0
7885 -2687 -2696 -2702 0
c ((1<=(aux659 + aux662 + aux663))=tv=SATLiteral(7886))
-7886 -2687 -2696 -2701 0
7886 2701 0
7886 2696 0
7886 2697 0
7886 2699 0
7886 2687 0
7886 2687 2696 0
7886 2687 2697 0
7886 2687 2699 0
7886 2688 0
7886 2688 2696 0
7886 2688 2697 0
7886 2688 2699 0
c (((aux665 + aux668 + aux669)<=1)=tv=SATLiteral(7887))
-7887 2726 0
-7887 2720 2725 0
-7887 2721 0
-7887 2723 0
-7887 2711 2725 0
-7887 2711 2720 0
-7887 2711 2721 0
-7887 2711 2723 0
-7887 2712 0
-7887 2712 2720 0
-7887 2712 2721 0
-7887 2712 2723 0
7887 -2712 -2720 -2725 0
7887 -2711 -2721 -2725 0
7887 -2711 -2720 -2726 0
c ((1<=(aux665 + aux668 + aux669))=tv=SATLiteral(7888))
-7888 -2711 -2720 -2725 0
7888 2725 0
7888 2720 0
7888 2721 0
7888 2723 0
7888 2711 0
7888 2711 2720 0
7888 2711 2721 0
7888 2711 2723 0
7888 2712 0
7888 2712 2720 0
7888 2712 2721 0
7888 2712 2723 0
c (((aux671 + aux674 + aux675)<=1)=tv=SATLiteral(7889))
-7889 2750 0
-7889 2744 2749 0
-7889 2745 0
-7889 2747 0
-7889 2735 2749 0
-7889 2735 2744 0
-7889 2735 2745 0
-7889 2735 2747 0
-7889 2736 0
-7889 2736 2744 0
-7889 2736 2745 0
-7889 2736 2747 0
7889 -2736 -2744 -2749 0
7889 -2735 -2745 -2749 0
7889 -2735 -2744 -2750 0
c ((1<=(aux671 + aux674 + aux675))=tv=SATLiteral(7890))
-7890 -2735 -2744 -2749 0
7890 2749 0
7890 2744 0
7890 2745 0
7890 2747 0
7890 2735 0
7890 2735 2744 0
7890 2735 2745 0
7890 2735 2747 0
7890 2736 0
7890 2736 2744 0
7890 2736 2745 0
7890 2736 2747 0
c (((aux677 + aux680 + aux681)<=1)=tv=SATLiteral(7891))
-7891 2774 0
-7891 2768 2773 0
-7891 2769 0
-7891 2771 0
-7891 2759 2773 0
-7891 2759 2768 0
-7891 2759 2769 0
-7891 2759 2771 0
-7891 2760 0
-7891 2760 2768 0
-7891 2760 2769 0
-7891 2760 2771 0
7891 -2760 -2768 -2773 0
7891 -2759 -2769 -2773 0
7891 -2759 -2768 -2774 0
c ((1<=(aux677 + aux680 + aux681))=tv=SATLiteral(7892))
-7892 -2759 -2768 -2773 0
7892 2773 0
7892 2768 0
7892 2769 0
7892 2771 0
7892 2759 0
7892 2759 2768 0
7892 2759 2769 0
7892 2759 2771 0
7892 2760 0
7892 2760 2768 0
7892 2760 2769 0
7892 2760 2771 0
c (((aux683 + aux686 + aux687)<=1)=tv=SATLiteral(7893))
-7893 2798 0
-7893 2792 2797 0
-7893 2793 0
-7893 2795 0
-7893 2783 2797 0
-7893 2783 2792 0
-7893 2783 2793 0
-7893 2783 2795 0
-7893 2784 0
-7893 2784 2792 0
-7893 2784 2793 0
-7893 2784 2795 0
7893 -2784 -2792 -2797 0
7893 -2783 -2793 -2797 0
7893 -2783 -2792 -2798 0
c ((1<=(aux683 + aux686 + aux687))=tv=SATLiteral(7894))
-7894 -2783 -2792 -2797 0
7894 2797 0
7894 2792 0
7894 2793 0
7894 2795 0
7894 2783 0
7894 2783 2792 0
7894 2783 2793 0
7894 2783 2795 0
7894 2784 0
7894 2784 2792 0
7894 2784 2793 0
7894 2784 2795 0
c (((aux689 + aux692 + aux693)<=1)=tv=SATLiteral(7895))
-7895 2822 0
-7895 2816 2821 0
-7895 2817 0
-7895 2819 0
-7895 2807 2821 0
-7895 2807 2816 0
-7895 2807 2817 0
-7895 2807 2819 0
-7895 2808 0
-7895 2808 2816 0
-7895 2808 2817 0
-7895 2808 2819 0
7895 -2808 -2816 -2821 0
7895 -2807 -2817 -2821 0
7895 -2807 -2816 -2822 0
c ((1<=(aux689 + aux692 + aux693))=tv=SATLiteral(7896))
-7896 -2807 -2816 -2821 0
7896 2821 0
7896 2816 0
7896 2817 0
7896 2819 0
7896 2807 0
7896 2807 2816 0
7896 2807 2817 0
7896 2807 2819 0
7896 2808 0
7896 2808 2816 0
7896 2808 2817 0
7896 2808 2819 0
c (((aux695 + aux698 + aux699)<=1)=tv=SATLiteral(7897))
-7897 2846 0
-7897 2840 2845 0
-7897 2841 0
-7897 2843 0
-7897 2831 2845 0
-7897 2831 2840 0
-7897 2831 2841 0
-7897 2831 2843 0
-7897 2832 0
-7897 2832 2840 0
-7897 2832 2841 0
-7897 2832 2843 0
7897 -2832 -2840 -2845 0
7897 -2831 -2841 -2845 0
7897 -2831 -2840 -2846 0
c ((1<=(aux695 + aux698 + aux699))=tv=SATLiteral(7898))
-7898 -2831 -2840 -2845 0
7898 2845 0
7898 2840 0
7898 2841 0
7898 2843 0
7898 2831 0
7898 2831 2840 0
7898 2831 2841 0
7898 2831 2843 0
7898 2832 0
7898 2832 2840 0
7898 2832 2841 0
7898 2832 2843 0
c (((aux701 + aux704 + aux705)<=1)=tv=SATLiteral(7899))
-7899 2870 0
-7899 2864 2869 0
-7899 2865 0
-7899 2867 0
-7899 2855 2869 0
-7899 2855 2864 0
-7899 2855 2865 0
-7899 2855 2867 0
-7899 2856 0
-7899 2856 2864 0
-7899 2856 2865 0
-7899 2856 2867 0
7899 -2856 -2864 -2869 0
7899 -2855 -2865 -2869 0
7899 -2855 -2864 -2870 0
c ((1<=(aux701 + aux704 + aux705))=tv=SATLiteral(7900))
-7900 -2855 -2864 -2869 0
7900 2869 0
7900 2864 0
7900 2865 0
7900 2867 0
7900 2855 0
7900 2855 2864 0
7900 2855 2865 0
7900 2855 2867 0
7900 2856 0
7900 2856 2864 0
7900 2856 2865 0
7900 2856 2867 0
c (((aux707 + aux710 + aux711)<=1)=tv=SATLiteral(7901))
-7901 2894 0
-7901 2888 2893 0
-7901 2889 0
-7901 2891 0
-7901 2879 2893 0
-7901 2879 2888 0
-7901 2879 2889 0
-7901 2879 2891 0
-7901 2880 0
-7901 2880 2888 0
-7901 2880 2889 0
-7901 2880 2891 0
7901 -2880 -2888 -2893 0
7901 -2879 -2889 -2893 0
7901 -2879 -2888 -2894 0
c ((1<=(aux707 + aux710 + aux711))=tv=SATLiteral(7902))
-7902 -2879 -2888 -2893 0
7902 2893 0
7902 2888 0
7902 2889 0
7902 2891 0
7902 2879 0
7902 2879 2888 0
7902 2879 2889 0
7902 2879 2891 0
7902 2880 0
7902 2880 2888 0
7902 2880 2889 0
7902 2880 2891 0
c (((aux713 + aux716 + aux717)<=1)=tv=SATLiteral(7903))
-7903 2918 0
-7903 2912 2917 0
-7903 2913 0
-7903 2915 0
-7903 2903 2917 0
-7903 2903 2912 0
-7903 2903 2913 0
-7903 2903 2915 0
-7903 2904 0
-7903 2904 2912 0
-7903 2904 2913 0
-7903 2904 2915 0
7903 -2904 -2912 -2917 0
7903 -2903 -2913 -2917 0
7903 -2903 -2912 -2918 0
c ((1<=(aux713 + aux716 + aux717))=tv=SATLiteral(7904))
-7904 -2903 -2912 -2917 0
7904 2917 0
7904 2912 0
7904 2913 0
7904 2915 0
7904 2903 0
7904 2903 2912 0
7904 2903 2913 0
7904 2903 2915 0
7904 2904 0
7904 2904 2912 0
7904 2904 2913 0
7904 2904 2915 0
c (((aux719 + aux722 + aux723)<=1)=tv=SATLiteral(7905))
-7905 2942 0
-7905 2936 2941 0
-7905 2937 0
-7905 2939 0
-7905 2927 2941 0
-7905 2927 2936 0
-7905 2927 2937 0
-7905 2927 2939 0
-7905 2928 0
-7905 2928 2936 0
-7905 2928 2937 0
-7905 2928 2939 0
7905 -2928 -2936 -2941 0
7905 -2927 -2937 -2941 0
7905 -2927 -2936 -2942 0
c ((1<=(aux719 + aux722 + aux723))=tv=SATLiteral(7906))
-7906 -2927 -2936 -2941 0
7906 2941 0
7906 2936 0
7906 2937 0
7906 2939 0
7906 2927 0
7906 2927 2936 0
7906 2927 2937 0
7906 2927 2939 0
7906 2928 0
7906 2928 2936 0
7906 2928 2937 0
7906 2928 2939 0
c (((aux725 + aux728 + aux729)<=1)=tv=SATLiteral(7907))
-7907 2966 0
-7907 2960 2965 0
-7907 2961 0
-7907 2963 0
-7907 2951 2965 0
-7907 2951 2960 0
-7907 2951 2961 0
-7907 2951 2963 0
-7907 2952 0
-7907 2952 2960 0
-7907 2952 2961 0
-7907 2952 2963 0
7907 -2952 -2960 -2965 0
7907 -2951 -2961 -2965 0
7907 -2951 -2960 -2966 0
c ((1<=(aux725 + aux728 + aux729))=tv=SATLiteral(7908))
-7908 -2951 -2960 -2965 0
7908 2965 0
7908 2960 0
7908 2961 0
7908 2963 0
7908 2951 0
7908 2951 2960 0
7908 2951 2961 0
7908 2951 2963 0
7908 2952 0
7908 2952 2960 0
7908 2952 2961 0
7908 2952 2963 0
c (((aux731 + aux734 + aux735)<=1)=tv=SATLiteral(7909))
-7909 2990 0
-7909 2984 2989 0
-7909 2985 0
-7909 2987 0
-7909 2975 2989 0
-7909 2975 2984 0
-7909 2975 2985 0
-7909 2975 2987 0
-7909 2976 0
-7909 2976 2984 0
-7909 2976 2985 0
-7909 2976 2987 0
7909 -2976 -2984 -2989 0
7909 -2975 -2985 -2989 0
7909 -2975 -2984 -2990 0
c ((1<=(aux731 + aux734 + aux735))=tv=SATLiteral(7910))
-7910 -2975 -2984 -2989 0
7910 2989 0
7910 2984 0
7910 2985 0
7910 2987 0
7910 2975 0
7910 2975 2984 0
7910 2975 2985 0
7910 2975 2987 0
7910 2976 0
7910 2976 2984 0
7910 2976 2985 0
7910 2976 2987 0
c (((aux737 + aux740 + aux741)<=1)=tv=SATLiteral(7911))
-7911 3014 0
-7911 3008 3013 0
-7911 3009 0
-7911 3011 0
-7911 2999 3013 0
-7911 2999 3008 0
-7911 2999 3009 0
-7911 2999 3011 0
-7911 3000 0
-7911 3000 3008 0
-7911 3000 3009 0
-7911 3000 3011 0
7911 -3000 -3008 -3013 0
7911 -2999 -3009 -3013 0
7911 -2999 -3008 -3014 0
c ((1<=(aux737 + aux740 + aux741))=tv=SATLiteral(7912))
-7912 -2999 -3008 -3013 0
7912 3013 0
7912 3008 0
7912 3009 0
7912 3011 0
7912 2999 0
7912 2999 3008 0
7912 2999 3009 0
7912 2999 3011 0
7912 3000 0
7912 3000 3008 0
7912 3000 3009 0
7912 3000 3011 0
c (((aux743 + aux746 + aux747)<=1)=tv=SATLiteral(7913))
-7913 3038 0
-7913 3032 3037 0
-7913 3033 0
-7913 3035 0
-7913 3023 3037 0
-7913 3023 3032 0
-7913 3023 3033 0
-7913 3023 3035 0
-7913 3024 0
-7913 3024 3032 0
-7913 3024 3033 0
-7913 3024 3035 0
7913 -3024 -3032 -3037 0
7913 -3023 -3033 -3037 0
7913 -3023 -3032 -3038 0
c ((1<=(aux743 + aux746 + aux747))=tv=SATLiteral(7914))
-7914 -3023 -3032 -3037 0
7914 3037 0
7914 3032 0
7914 3033 0
7914 3035 0
7914 3023 0
7914 3023 3032 0
7914 3023 3033 0
7914 3023 3035 0
7914 3024 0
7914 3024 3032 0
7914 3024 3033 0
7914 3024 3035 0
c (((aux749 + aux752 + aux753)<=1)=tv=SATLiteral(7915))
-7915 3062 0
-7915 3056 3061 0
-7915 3057 0
-7915 3059 0
-7915 3047 3061 0
-7915 3047 3056 0
-7915 3047 3057 0
-7915 3047 3059 0
-7915 3048 0
-7915 3048 3056 0
-7915 3048 3057 0
-7915 3048 3059 0
7915 -3048 -3056 -3061 0
7915 -3047 -3057 -3061 0
7915 -3047 -3056 -3062 0
c ((1<=(aux749 + aux752 + aux753))=tv=SATLiteral(7916))
-7916 -3047 -3056 -3061 0
7916 3061 0
7916 3056 0
7916 3057 0
7916 3059 0
7916 3047 0
7916 3047 3056 0
7916 3047 3057 0
7916 3047 3059 0
7916 3048 0
7916 3048 3056 0
7916 3048 3057 0
7916 3048 3059 0
c (((aux755 + aux758 + aux759)<=1)=tv=SATLiteral(7917))
-7917 3086 0
-7917 3080 3085 0
-7917 3081 0
-7917 3083 0
-7917 3071 3085 0
-7917 3071 3080 0
-7917 3071 3081 0
-7917 3071 3083 0
-7917 3072 0
-7917 3072 3080 0
-7917 3072 3081 0
-7917 3072 3083 0
7917 -3072 -3080 -3085 0
7917 -3071 -3081 -3085 0
7917 -3071 -3080 -3086 0
c ((1<=(aux755 + aux758 + aux759))=tv=SATLiteral(7918))
-7918 -3071 -3080 -3085 0
7918 3085 0
7918 3080 0
7918 3081 0
7918 3083 0
7918 3071 0
7918 3071 3080 0
7918 3071 3081 0
7918 3071 3083 0
7918 3072 0
7918 3072 3080 0
7918 3072 3081 0
7918 3072 3083 0
c (((aux761 + aux764 + aux765)<=1)=tv=SATLiteral(7919))
-7919 3110 0
-7919 3104 3109 0
-7919 3105 0
-7919 3107 0
-7919 3095 3109 0
-7919 3095 3104 0
-7919 3095 3105 0
-7919 3095 3107 0
-7919 3096 0
-7919 3096 3104 0
-7919 3096 3105 0
-7919 3096 3107 0
7919 -3096 -3104 -3109 0
7919 -3095 -3105 -3109 0
7919 -3095 -3104 -3110 0
c ((1<=(aux761 + aux764 + aux765))=tv=SATLiteral(7920))
-7920 -3095 -3104 -3109 0
7920 3109 0
7920 3104 0
7920 3105 0
7920 3107 0
7920 3095 0
7920 3095 3104 0
7920 3095 3105 0
7920 3095 3107 0
7920 3096 0
7920 3096 3104 0
7920 3096 3105 0
7920 3096 3107 0
c (((aux767 + aux770 + aux771)<=1)=tv=SATLiteral(7921))
-7921 3134 0
-7921 3128 3133 0
-7921 3129 0
-7921 3131 0
-7921 3119 3133 0
-7921 3119 3128 0
-7921 3119 3129 0
-7921 3119 3131 0
-7921 3120 0
-7921 3120 3128 0
-7921 3120 3129 0
-7921 3120 3131 0
7921 -3120 -3128 -3133 0
7921 -3119 -3129 -3133 0
7921 -3119 -3128 -3134 0
c ((1<=(aux767 + aux770 + aux771))=tv=SATLiteral(7922))
-7922 -3119 -3128 -3133 0
7922 3133 0
7922 3128 0
7922 3129 0
7922 3131 0
7922 3119 0
7922 3119 3128 0
7922 3119 3129 0
7922 3119 3131 0
7922 3120 0
7922 3120 3128 0
7922 3120 3129 0
7922 3120 3131 0
c (((aux773 + aux776 + aux777)<=1)=tv=SATLiteral(7923))
-7923 3158 0
-7923 3152 3157 0
-7923 3153 0
-7923 3155 0
-7923 3143 3157 0
-7923 3143 3152 0
-7923 3143 3153 0
-7923 3143 3155 0
-7923 3144 0
-7923 3144 3152 0
-7923 3144 3153 0
-7923 3144 3155 0
7923 -3144 -3152 -3157 0
7923 -3143 -3153 -3157 0
7923 -3143 -3152 -3158 0
c ((1<=(aux773 + aux776 + aux777))=tv=SATLiteral(7924))
-7924 -3143 -3152 -3157 0
7924 3157 0
7924 3152 0
7924 3153 0
7924 3155 0
7924 3143 0
7924 3143 3152 0
7924 3143 3153 0
7924 3143 3155 0
7924 3144 0
7924 3144 3152 0
7924 3144 3153 0
7924 3144 3155 0
c (((aux779 + aux782 + aux783)<=1)=tv=SATLiteral(7925))
-7925 3182 0
-7925 3176 3181 0
-7925 3177 0
-7925 3179 0
-7925 3167 3181 0
-7925 3167 3176 0
-7925 3167 3177 0
-7925 3167 3179 0
-7925 3168 0
-7925 3168 3176 0
-7925 3168 3177 0
-7925 3168 3179 0
7925 -3168 -3176 -3181 0
7925 -3167 -3177 -3181 0
7925 -3167 -3176 -3182 0
c ((1<=(aux779 + aux782 + aux783))=tv=SATLiteral(7926))
-7926 -3167 -3176 -3181 0
7926 3181 0
7926 3176 0
7926 3177 0
7926 3179 0
7926 3167 0
7926 3167 3176 0
7926 3167 3177 0
7926 3167 3179 0
7926 3168 0
7926 3168 3176 0
7926 3168 3177 0
7926 3168 3179 0
c (((aux785 + aux788 + aux789)<=1)=tv=SATLiteral(7927))
-7927 3206 0
-7927 3200 3205 0
-7927 3201 0
-7927 3203 0
-7927 3191 3205 0
-7927 3191 3200 0
-7927 3191 3201 0
-7927 3191 3203 0
-7927 3192 0
-7927 3192 3200 0
-7927 3192 3201 0
-7927 3192 3203 0
7927 -3192 -3200 -3205 0
7927 -3191 -3201 -3205 0
7927 -3191 -3200 -3206 0
c ((1<=(aux785 + aux788 + aux789))=tv=SATLiteral(7928))
-7928 -3191 -3200 -3205 0
7928 3205 0
7928 3200 0
7928 3201 0
7928 3203 0
7928 3191 0
7928 3191 3200 0
7928 3191 3201 0
7928 3191 3203 0
7928 3192 0
7928 3192 3200 0
7928 3192 3201 0
7928 3192 3203 0
c (((aux791 + aux794 + aux795)<=1)=tv=SATLiteral(7929))
-7929 3230 0
-7929 3224 3229 0
-7929 3225 0
-7929 3227 0
-7929 3215 3229 0
-7929 3215 3224 0
-7929 3215 3225 0
-7929 3215 3227 0
-7929 3216 0
-7929 3216 3224 0
-7929 3216 3225 0
-7929 3216 3227 0
7929 -3216 -3224 -3229 0
7929 -3215 -3225 -3229 0
7929 -3215 -3224 -3230 0
c ((1<=(aux791 + aux794 + aux795))=tv=SATLiteral(7930))
-7930 -3215 -3224 -3229 0
7930 3229 0
7930 3224 0
7930 3225 0
7930 3227 0
7930 3215 0
7930 3215 3224 0
7930 3215 3225 0
7930 3215 3227 0
7930 3216 0
7930 3216 3224 0
7930 3216 3225 0
7930 3216 3227 0
c (((aux797 + aux800 + aux801)<=1)=tv=SATLiteral(7931))
-7931 3254 0
-7931 3248 3253 0
-7931 3249 0
-7931 3251 0
-7931 3239 3253 0
-7931 3239 3248 0
-7931 3239 3249 0
-7931 3239 3251 0
-7931 3240 0
-7931 3240 3248 0
-7931 3240 3249 0
-7931 3240 3251 0
7931 -3240 -3248 -3253 0
7931 -3239 -3249 -3253 0
7931 -3239 -3248 -3254 0
c ((1<=(aux797 + aux800 + aux801))=tv=SATLiteral(7932))
-7932 -3239 -3248 -3253 0
7932 3253 0
7932 3248 0
7932 3249 0
7932 3251 0
7932 3239 0
7932 3239 3248 0
7932 3239 3249 0
7932 3239 3251 0
7932 3240 0
7932 3240 3248 0
7932 3240 3249 0
7932 3240 3251 0
c (((aux803 + aux806 + aux807)<=1)=tv=SATLiteral(7933))
-7933 3278 0
-7933 3272 3277 0
-7933 3273 0
-7933 3275 0
-7933 3263 3277 0
-7933 3263 3272 0
-7933 3263 3273 0
-7933 3263 3275 0
-7933 3264 0
-7933 3264 3272 0
-7933 3264 3273 0
-7933 3264 3275 0
7933 -3264 -3272 -3277 0
7933 -3263 -3273 -3277 0
7933 -3263 -3272 -3278 0
c ((1<=(aux803 + aux806 + aux807))=tv=SATLiteral(7934))
-7934 -3263 -3272 -3277 0
7934 3277 0
7934 3272 0
7934 3273 0
7934 3275 0
7934 3263 0
7934 3263 3272 0
7934 3263 3273 0
7934 3263 3275 0
7934 3264 0
7934 3264 3272 0
7934 3264 3273 0
7934 3264 3275 0
c (((aux809 + aux812 + aux813)<=1)=tv=SATLiteral(7935))
-7935 3302 0
-7935 3296 3301 0
-7935 3297 0
-7935 3299 0
-7935 3287 3301 0
-7935 3287 3296 0
-7935 3287 3297 0
-7935 3287 3299 0
-7935 3288 0
-7935 3288 3296 0
-7935 3288 3297 0
-7935 3288 3299 0
7935 -3288 -3296 -3301 0
7935 -3287 -3297 -3301 0
7935 -3287 -3296 -3302 0
c ((1<=(aux809 + aux812 + aux813))=tv=SATLiteral(7936))
-7936 -3287 -3296 -3301 0
7936 3301 0
7936 3296 0
7936 3297 0
7936 3299 0
7936 3287 0
7936 3287 3296 0
7936 3287 3297 0
7936 3287 3299 0
7936 3288 0
7936 3288 3296 0
7936 3288 3297 0
7936 3288 3299 0
c (((aux815 + aux818 + aux819)<=1)=tv=SATLiteral(7937))
-7937 3326 0
-7937 3320 3325 0
-7937 3321 0
-7937 3323 0
-7937 3311 3325 0
-7937 3311 3320 0
-7937 3311 3321 0
-7937 3311 3323 0
-7937 3312 0
-7937 3312 3320 0
-7937 3312 3321 0
-7937 3312 3323 0
7937 -3312 -3320 -3325 0
7937 -3311 -3321 -3325 0
7937 -3311 -3320 -3326 0
c ((1<=(aux815 + aux818 + aux819))=tv=SATLiteral(7938))
-7938 -3311 -3320 -3325 0
7938 3325 0
7938 3320 0
7938 3321 0
7938 3323 0
7938 3311 0
7938 3311 3320 0
7938 3311 3321 0
7938 3311 3323 0
7938 3312 0
7938 3312 3320 0
7938 3312 3321 0
7938 3312 3323 0
c (((aux821 + aux824 + aux825)<=1)=tv=SATLiteral(7939))
-7939 3350 0
-7939 3344 3349 0
-7939 3345 0
-7939 3347 0
-7939 3335 3349 0
-7939 3335 3344 0
-7939 3335 3345 0
-7939 3335 3347 0
-7939 3336 0
-7939 3336 3344 0
-7939 3336 3345 0
-7939 3336 3347 0
7939 -3336 -3344 -3349 0
7939 -3335 -3345 -3349 0
7939 -3335 -3344 -3350 0
c ((1<=(aux821 + aux824 + aux825))=tv=SATLiteral(7940))
-7940 -3335 -3344 -3349 0
7940 3349 0
7940 3344 0
7940 3345 0
7940 3347 0
7940 3335 0
7940 3335 3344 0
7940 3335 3345 0
7940 3335 3347 0
7940 3336 0
7940 3336 3344 0
7940 3336 3345 0
7940 3336 3347 0
c (((aux827 + aux830 + aux831)<=1)=tv=SATLiteral(7941))
-7941 3374 0
-7941 3368 3373 0
-7941 3369 0
-7941 3371 0
-7941 3359 3373 0
-7941 3359 3368 0
-7941 3359 3369 0
-7941 3359 3371 0
-7941 3360 0
-7941 3360 3368 0
-7941 3360 3369 0
-7941 3360 3371 0
7941 -3360 -3368 -3373 0
7941 -3359 -3369 -3373 0
7941 -3359 -3368 -3374 0
c ((1<=(aux827 + aux830 + aux831))=tv=SATLiteral(7942))
-7942 -3359 -3368 -3373 0
7942 3373 0
7942 3368 0
7942 3369 0
7942 3371 0
7942 3359 0
7942 3359 3368 0
7942 3359 3369 0
7942 3359 3371 0
7942 3360 0
7942 3360 3368 0
7942 3360 3369 0
7942 3360 3371 0
c (((aux833 + aux836 + aux837)<=1)=tv=SATLiteral(7943))
-7943 3398 0
-7943 3392 3397 0
-7943 3393 0
-7943 3395 0
-7943 3383 3397 0
-7943 3383 3392 0
-7943 3383 3393 0
-7943 3383 3395 0
-7943 3384 0
-7943 3384 3392 0
-7943 3384 3393 0
-7943 3384 3395 0
7943 -3384 -3392 -3397 0
7943 -3383 -3393 -3397 0
7943 -3383 -3392 -3398 0
c ((1<=(aux833 + aux836 + aux837))=tv=SATLiteral(7944))
-7944 -3383 -3392 -3397 0
7944 3397 0
7944 3392 0
7944 3393 0
7944 3395 0
7944 3383 0
7944 3383 3392 0
7944 3383 3393 0
7944 3383 3395 0
7944 3384 0
7944 3384 3392 0
7944 3384 3393 0
7944 3384 3395 0
c (((aux839 + aux842 + aux843)<=1)=tv=SATLiteral(7945))
-7945 3422 0
-7945 3416 3421 0
-7945 3417 0
-7945 3419 0
-7945 3407 3421 0
-7945 3407 3416 0
-7945 3407 3417 0
-7945 3407 3419 0
-7945 3408 0
-7945 3408 3416 0
-7945 3408 3417 0
-7945 3408 3419 0
7945 -3408 -3416 -3421 0
7945 -3407 -3417 -3421 0
7945 -3407 -3416 -3422 0
c ((1<=(aux839 + aux842 + aux843))=tv=SATLiteral(7946))
-7946 -3407 -3416 -3421 0
7946 3421 0
7946 3416 0
7946 3417 0
7946 3419 0
7946 3407 0
7946 3407 3416 0
7946 3407 3417 0
7946 3407 3419 0
7946 3408 0
7946 3408 3416 0
7946 3408 3417 0
7946 3408 3419 0
c (((aux845 + aux848 + aux849)<=1)=tv=SATLiteral(7947))
-7947 3446 0
-7947 3440 3445 0
-7947 3441 0
-7947 3443 0
-7947 3431 3445 0
-7947 3431 3440 0
-7947 3431 3441 0
-7947 3431 3443 0
-7947 3432 0
-7947 3432 3440 0
-7947 3432 3441 0
-7947 3432 3443 0
7947 -3432 -3440 -3445 0
7947 -3431 -3441 -3445 0
7947 -3431 -3440 -3446 0
c ((1<=(aux845 + aux848 + aux849))=tv=SATLiteral(7948))
-7948 -3431 -3440 -3445 0
7948 3445 0
7948 3440 0
7948 3441 0
7948 3443 0
7948 3431 0
7948 3431 3440 0
7948 3431 3441 0
7948 3431 3443 0
7948 3432 0
7948 3432 3440 0
7948 3432 3441 0
7948 3432 3443 0
c (((aux851 + aux854 + aux855)<=1)=tv=SATLiteral(7949))
-7949 3470 0
-7949 3464 3469 0
-7949 3465 0
-7949 3467 0
-7949 3455 3469 0
-7949 3455 3464 0
-7949 3455 3465 0
-7949 3455 3467 0
-7949 3456 0
-7949 3456 3464 0
-7949 3456 3465 0
-7949 3456 3467 0
7949 -3456 -3464 -3469 0
7949 -3455 -3465 -3469 0
7949 -3455 -3464 -3470 0
c ((1<=(aux851 + aux854 + aux855))=tv=SATLiteral(7950))
-7950 -3455 -3464 -3469 0
7950 3469 0
7950 3464 0
7950 3465 0
7950 3467 0
7950 3455 0
7950 3455 3464 0
7950 3455 3465 0
7950 3455 3467 0
7950 3456 0
7950 3456 3464 0
7950 3456 3465 0
7950 3456 3467 0
c (((aux857 + aux860 + aux861)<=1)=tv=SATLiteral(7951))
-7951 3494 0
-7951 3488 3493 0
-7951 3489 0
-7951 3491 0
-7951 3479 3493 0
-7951 3479 3488 0
-7951 3479 3489 0
-7951 3479 3491 0
-7951 3480 0
-7951 3480 3488 0
-7951 3480 3489 0
-7951 3480 3491 0
7951 -3480 -3488 -3493 0
7951 -3479 -3489 -3493 0
7951 -3479 -3488 -3494 0
c ((1<=(aux857 + aux860 + aux861))=tv=SATLiteral(7952))
-7952 -3479 -3488 -3493 0
7952 3493 0
7952 3488 0
7952 3489 0
7952 3491 0
7952 3479 0
7952 3479 3488 0
7952 3479 3489 0
7952 3479 3491 0
7952 3480 0
7952 3480 3488 0
7952 3480 3489 0
7952 3480 3491 0
c (((aux863 + aux866 + aux867)<=1)=tv=SATLiteral(7953))
-7953 3518 0
-7953 3512 3517 0
-7953 3513 0
-7953 3515 0
-7953 3503 3517 0
-7953 3503 3512 0
-7953 3503 3513 0
-7953 3503 3515 0
-7953 3504 0
-7953 3504 3512 0
-7953 3504 3513 0
-7953 3504 3515 0
7953 -3504 -3512 -3517 0
7953 -3503 -3513 -3517 0
7953 -3503 -3512 -3518 0
c ((1<=(aux863 + aux866 + aux867))=tv=SATLiteral(7954))
-7954 -3503 -3512 -3517 0
7954 3517 0
7954 3512 0
7954 3513 0
7954 3515 0
7954 3503 0
7954 3503 3512 0
7954 3503 3513 0
7954 3503 3515 0
7954 3504 0
7954 3504 3512 0
7954 3504 3513 0
7954 3504 3515 0
c (((aux869 + aux872 + aux873)<=1)=tv=SATLiteral(7955))
-7955 3542 0
-7955 3536 3541 0
-7955 3537 0
-7955 3539 0
-7955 3527 3541 0
-7955 3527 3536 0
-7955 3527 3537 0
-7955 3527 3539 0
-7955 3528 0
-7955 3528 3536 0
-7955 3528 3537 0
-7955 3528 3539 0
7955 -3528 -3536 -3541 0
7955 -3527 -3537 -3541 0
7955 -3527 -3536 -3542 0
c ((1<=(aux869 + aux872 + aux873))=tv=SATLiteral(7956))
-7956 -3527 -3536 -3541 0
7956 3541 0
7956 3536 0
7956 3537 0
7956 3539 0
7956 3527 0
7956 3527 3536 0
7956 3527 3537 0
7956 3527 3539 0
7956 3528 0
7956 3528 3536 0
7956 3528 3537 0
7956 3528 3539 0
c (((aux875 + aux878 + aux879)<=1)=tv=SATLiteral(7957))
-7957 3566 0
-7957 3560 3565 0
-7957 3561 0
-7957 3563 0
-7957 3551 3565 0
-7957 3551 3560 0
-7957 3551 3561 0
-7957 3551 3563 0
-7957 3552 0
-7957 3552 3560 0
-7957 3552 3561 0
-7957 3552 3563 0
7957 -3552 -3560 -3565 0
7957 -3551 -3561 -3565 0
7957 -3551 -3560 -3566 0
c ((1<=(aux875 + aux878 + aux879))=tv=SATLiteral(7958))
-7958 -3551 -3560 -3565 0
7958 3565 0
7958 3560 0
7958 3561 0
7958 3563 0
7958 3551 0
7958 3551 3560 0
7958 3551 3561 0
7958 3551 3563 0
7958 3552 0
7958 3552 3560 0
7958 3552 3561 0
7958 3552 3563 0
c (((aux881 + aux884 + aux885)<=1)=tv=SATLiteral(7959))
-7959 3590 0
-7959 3584 3589 0
-7959 3585 0
-7959 3587 0
-7959 3575 3589 0
-7959 3575 3584 0
-7959 3575 3585 0
-7959 3575 3587 0
-7959 3576 0
-7959 3576 3584 0
-7959 3576 3585 0
-7959 3576 3587 0
7959 -3576 -3584 -3589 0
7959 -3575 -3585 -3589 0
7959 -3575 -3584 -3590 0
c ((1<=(aux881 + aux884 + aux885))=tv=SATLiteral(7960))
-7960 -3575 -3584 -3589 0
7960 3589 0
7960 3584 0
7960 3585 0
7960 3587 0
7960 3575 0
7960 3575 3584 0
7960 3575 3585 0
7960 3575 3587 0
7960 3576 0
7960 3576 3584 0
7960 3576 3585 0
7960 3576 3587 0
c (((aux887 + aux890 + aux891)<=1)=tv=SATLiteral(7961))
-7961 3614 0
-7961 3608 3613 0
-7961 3609 0
-7961 3611 0
-7961 3599 3613 0
-7961 3599 3608 0
-7961 3599 3609 0
-7961 3599 3611 0
-7961 3600 0
-7961 3600 3608 0
-7961 3600 3609 0
-7961 3600 3611 0
7961 -3600 -3608 -3613 0
7961 -3599 -3609 -3613 0
7961 -3599 -3608 -3614 0
c ((1<=(aux887 + aux890 + aux891))=tv=SATLiteral(7962))
-7962 -3599 -3608 -3613 0
7962 3613 0
7962 3608 0
7962 3609 0
7962 3611 0
7962 3599 0
7962 3599 3608 0
7962 3599 3609 0
7962 3599 3611 0
7962 3600 0
7962 3600 3608 0
7962 3600 3609 0
7962 3600 3611 0
c (((aux893 + aux896 + aux897)<=1)=tv=SATLiteral(7963))
-7963 3638 0
-7963 3632 3637 0
-7963 3633 0
-7963 3635 0
-7963 3623 3637 0
-7963 3623 3632 0
-7963 3623 3633 0
-7963 3623 3635 0
-7963 3624 0
-7963 3624 3632 0
-7963 3624 3633 0
-7963 3624 3635 0
7963 -3624 -3632 -3637 0
7963 -3623 -3633 -3637 0
7963 -3623 -3632 -3638 0
c ((1<=(aux893 + aux896 + aux897))=tv=SATLiteral(7964))
-7964 -3623 -3632 -3637 0
7964 3637 0
7964 3632 0
7964 3633 0
7964 3635 0
7964 3623 0
7964 3623 3632 0
7964 3623 3633 0
7964 3623 3635 0
7964 3624 0
7964 3624 3632 0
7964 3624 3633 0
7964 3624 3635 0
c (((aux899 + aux902 + aux903)<=1)=tv=SATLiteral(7965))
-7965 3662 0
-7965 3656 3661 0
-7965 3657 0
-7965 3659 0
-7965 3647 3661 0
-7965 3647 3656 0
-7965 3647 3657 0
-7965 3647 3659 0
-7965 3648 0
-7965 3648 3656 0
-7965 3648 3657 0
-7965 3648 3659 0
7965 -3648 -3656 -3661 0
7965 -3647 -3657 -3661 0
7965 -3647 -3656 -3662 0
c ((1<=(aux899 + aux902 + aux903))=tv=SATLiteral(7966))
-7966 -3647 -3656 -3661 0
7966 3661 0
7966 3656 0
7966 3657 0
7966 3659 0
7966 3647 0
7966 3647 3656 0
7966 3647 3657 0
7966 3647 3659 0
7966 3648 0
7966 3648 3656 0
7966 3648 3657 0
7966 3648 3659 0
c (((aux905 + aux908 + aux909)<=1)=tv=SATLiteral(7967))
-7967 3686 0
-7967 3680 3685 0
-7967 3681 0
-7967 3683 0
-7967 3671 3685 0
-7967 3671 3680 0
-7967 3671 3681 0
-7967 3671 3683 0
-7967 3672 0
-7967 3672 3680 0
-7967 3672 3681 0
-7967 3672 3683 0
7967 -3672 -3680 -3685 0
7967 -3671 -3681 -3685 0
7967 -3671 -3680 -3686 0
c ((1<=(aux905 + aux908 + aux909))=tv=SATLiteral(7968))
-7968 -3671 -3680 -3685 0
7968 3685 0
7968 3680 0
7968 3681 0
7968 3683 0
7968 3671 0
7968 3671 3680 0
7968 3671 3681 0
7968 3671 3683 0
7968 3672 0
7968 3672 3680 0
7968 3672 3681 0
7968 3672 3683 0
c (((aux911 + aux914 + aux915)<=1)=tv=SATLiteral(7969))
-7969 3710 0
-7969 3704 3709 0
-7969 3705 0
-7969 3707 0
-7969 3695 3709 0
-7969 3695 3704 0
-7969 3695 3705 0
-7969 3695 3707 0
-7969 3696 0
-7969 3696 3704 0
-7969 3696 3705 0
-7969 3696 3707 0
7969 -3696 -3704 -3709 0
7969 -3695 -3705 -3709 0
7969 -3695 -3704 -3710 0
c ((1<=(aux911 + aux914 + aux915))=tv=SATLiteral(7970))
-7970 -3695 -3704 -3709 0
7970 3709 0
7970 3704 0
7970 3705 0
7970 3707 0
7970 3695 0
7970 3695 3704 0
7970 3695 3705 0
7970 3695 3707 0
7970 3696 0
7970 3696 3704 0
7970 3696 3705 0
7970 3696 3707 0
c (((aux917 + aux920 + aux921)<=1)=tv=SATLiteral(7971))
-7971 3734 0
-7971 3728 3733 0
-7971 3729 0
-7971 3731 0
-7971 3719 3733 0
-7971 3719 3728 0
-7971 3719 3729 0
-7971 3719 3731 0
-7971 3720 0
-7971 3720 3728 0
-7971 3720 3729 0
-7971 3720 3731 0
7971 -3720 -3728 -3733 0
7971 -3719 -3729 -3733 0
7971 -3719 -3728 -3734 0
c ((1<=(aux917 + aux920 + aux921))=tv=SATLiteral(7972))
-7972 -3719 -3728 -3733 0
7972 3733 0
7972 3728 0
7972 3729 0
7972 3731 0
7972 3719 0
7972 3719 3728 0
7972 3719 3729 0
7972 3719 3731 0
7972 3720 0
7972 3720 3728 0
7972 3720 3729 0
7972 3720 3731 0
c (((aux923 + aux926 + aux927)<=1)=tv=SATLiteral(7973))
-7973 3758 0
-7973 3752 3757 0
-7973 3753 0
-7973 3755 0
-7973 3743 3757 0
-7973 3743 3752 0
-7973 3743 3753 0
-7973 3743 3755 0
-7973 3744 0
-7973 3744 3752 0
-7973 3744 3753 0
-7973 3744 3755 0
7973 -3744 -3752 -3757 0
7973 -3743 -3753 -3757 0
7973 -3743 -3752 -3758 0
c ((1<=(aux923 + aux926 + aux927))=tv=SATLiteral(7974))
-7974 -3743 -3752 -3757 0
7974 3757 0
7974 3752 0
7974 3753 0
7974 3755 0
7974 3743 0
7974 3743 3752 0
7974 3743 3753 0
7974 3743 3755 0
7974 3744 0
7974 3744 3752 0
7974 3744 3753 0
7974 3744 3755 0
c (((aux929 + aux932 + aux933)<=1)=tv=SATLiteral(7975))
-7975 3782 0
-7975 3776 3781 0
-7975 3777 0
-7975 3779 0
-7975 3767 3781 0
-7975 3767 3776 0
-7975 3767 3777 0
-7975 3767 3779 0
-7975 3768 0
-7975 3768 3776 0
-7975 3768 3777 0
-7975 3768 3779 0
7975 -3768 -3776 -3781 0
7975 -3767 -3777 -3781 0
7975 -3767 -3776 -3782 0
c ((1<=(aux929 + aux932 + aux933))=tv=SATLiteral(7976))
-7976 -3767 -3776 -3781 0
7976 3781 0
7976 3776 0
7976 3777 0
7976 3779 0
7976 3767 0
7976 3767 3776 0
7976 3767 3777 0
7976 3767 3779 0
7976 3768 0
7976 3768 3776 0
7976 3768 3777 0
7976 3768 3779 0
c (((aux935 + aux938 + aux939)<=1)=tv=SATLiteral(7977))
-7977 3806 0
-7977 3800 3805 0
-7977 3801 0
-7977 3803 0
-7977 3791 3805 0
-7977 3791 3800 0
-7977 3791 3801 0
-7977 3791 3803 0
-7977 3792 0
-7977 3792 3800 0
-7977 3792 3801 0
-7977 3792 3803 0
7977 -3792 -3800 -3805 0
7977 -3791 -3801 -3805 0
7977 -3791 -3800 -3806 0
c ((1<=(aux935 + aux938 + aux939))=tv=SATLiteral(7978))
-7978 -3791 -3800 -3805 0
7978 3805 0
7978 3800 0
7978 3801 0
7978 3803 0
7978 3791 0
7978 3791 3800 0
7978 3791 3801 0
7978 3791 3803 0
7978 3792 0
7978 3792 3800 0
7978 3792 3801 0
7978 3792 3803 0
c (((aux941 + aux944 + aux945)<=1)=tv=SATLiteral(7979))
-7979 3830 0
-7979 3824 3829 0
-7979 3825 0
-7979 3827 0
-7979 3815 3829 0
-7979 3815 3824 0
-7979 3815 3825 0
-7979 3815 3827 0
-7979 3816 0
-7979 3816 3824 0
-7979 3816 3825 0
-7979 3816 3827 0
7979 -3816 -3824 -3829 0
7979 -3815 -3825 -3829 0
7979 -3815 -3824 -3830 0
c ((1<=(aux941 + aux944 + aux945))=tv=SATLiteral(7980))
-7980 -3815 -3824 -3829 0
7980 3829 0
7980 3824 0
7980 3825 0
7980 3827 0
7980 3815 0
7980 3815 3824 0
7980 3815 3825 0
7980 3815 3827 0
7980 3816 0
7980 3816 3824 0
7980 3816 3825 0
7980 3816 3827 0
c (((aux947 + aux950 + aux951)<=1)=tv=SATLiteral(7981))
-7981 3854 0
-7981 3848 3853 0
-7981 3849 0
-7981 3851 0
-7981 3839 3853 0
-7981 3839 3848 0
-7981 3839 3849 0
-7981 3839 3851 0
-7981 3840 0
-7981 3840 3848 0
-7981 3840 3849 0
-7981 3840 3851 0
7981 -3840 -3848 -3853 0
7981 -3839 -3849 -3853 0
7981 -3839 -3848 -3854 0
c ((1<=(aux947 + aux950 + aux951))=tv=SATLiteral(7982))
-7982 -3839 -3848 -3853 0
7982 3853 0
7982 3848 0
7982 3849 0
7982 3851 0
7982 3839 0
7982 3839 3848 0
7982 3839 3849 0
7982 3839 3851 0
7982 3840 0
7982 3840 3848 0
7982 3840 3849 0
7982 3840 3851 0
c (((aux953 + aux956 + aux957)<=1)=tv=SATLiteral(7983))
-7983 3878 0
-7983 3872 3877 0
-7983 3873 0
-7983 3875 0
-7983 3863 3877 0
-7983 3863 3872 0
-7983 3863 3873 0
-7983 3863 3875 0
-7983 3864 0
-7983 3864 3872 0
-7983 3864 3873 0
-7983 3864 3875 0
7983 -3864 -3872 -3877 0
7983 -3863 -3873 -3877 0
7983 -3863 -3872 -3878 0
c ((1<=(aux953 + aux956 + aux957))=tv=SATLiteral(7984))
-7984 -3863 -3872 -3877 0
7984 3877 0
7984 3872 0
7984 3873 0
7984 3875 0
7984 3863 0
7984 3863 3872 0
7984 3863 3873 0
7984 3863 3875 0
7984 3864 0
7984 3864 3872 0
7984 3864 3873 0
7984 3864 3875 0
c (((aux959 + aux962 + aux963)<=1)=tv=SATLiteral(7985))
-7985 3902 0
-7985 3896 3901 0
-7985 3897 0
-7985 3899 0
-7985 3887 3901 0
-7985 3887 3896 0
-7985 3887 3897 0
-7985 3887 3899 0
-7985 3888 0
-7985 3888 3896 0
-7985 3888 3897 0
-7985 3888 3899 0
7985 -3888 -3896 -3901 0
7985 -3887 -3897 -3901 0
7985 -3887 -3896 -3902 0
c ((1<=(aux959 + aux962 + aux963))=tv=SATLiteral(7986))
-7986 -3887 -3896 -3901 0
7986 3901 0
7986 3896 0
7986 3897 0
7986 3899 0
7986 3887 0
7986 3887 3896 0
7986 3887 3897 0
7986 3887 3899 0
7986 3888 0
7986 3888 3896 0
7986 3888 3897 0
7986 3888 3899 0
c (((aux965 + aux968 + aux969)<=1)=tv=SATLiteral(7987))
-7987 3926 0
-7987 3920 3925 0
-7987 3921 0
-7987 3923 0
-7987 3911 3925 0
-7987 3911 3920 0
-7987 3911 3921 0
-7987 3911 3923 0
-7987 3912 0
-7987 3912 3920 0
-7987 3912 3921 0
-7987 3912 3923 0
7987 -3912 -3920 -3925 0
7987 -3911 -3921 -3925 0
7987 -3911 -3920 -3926 0
c ((1<=(aux965 + aux968 + aux969))=tv=SATLiteral(7988))
-7988 -3911 -3920 -3925 0
7988 3925 0
7988 3920 0
7988 3921 0
7988 3923 0
7988 3911 0
7988 3911 3920 0
7988 3911 3921 0
7988 3911 3923 0
7988 3912 0
7988 3912 3920 0
7988 3912 3921 0
7988 3912 3923 0
c (((aux971 + aux974 + aux975)<=1)=tv=SATLiteral(7989))
-7989 3950 0
-7989 3944 3949 0
-7989 3945 0
-7989 3947 0
-7989 3935 3949 0
-7989 3935 3944 0
-7989 3935 3945 0
-7989 3935 3947 0
-7989 3936 0
-7989 3936 3944 0
-7989 3936 3945 0
-7989 3936 3947 0
7989 -3936 -3944 -3949 0
7989 -3935 -3945 -3949 0
7989 -3935 -3944 -3950 0
c ((1<=(aux971 + aux974 + aux975))=tv=SATLiteral(7990))
-7990 -3935 -3944 -3949 0
7990 3949 0
7990 3944 0
7990 3945 0
7990 3947 0
7990 3935 0
7990 3935 3944 0
7990 3935 3945 0
7990 3935 3947 0
7990 3936 0
7990 3936 3944 0
7990 3936 3945 0
7990 3936 3947 0
c (((aux977 + aux980 + aux981)<=1)=tv=SATLiteral(7991))
-7991 3974 0
-7991 3968 3973 0
-7991 3969 0
-7991 3971 0
-7991 3959 3973 0
-7991 3959 3968 0
-7991 3959 3969 0
-7991 3959 3971 0
-7991 3960 0
-7991 3960 3968 0
-7991 3960 3969 0
-7991 3960 3971 0
7991 -3960 -3968 -3973 0
7991 -3959 -3969 -3973 0
7991 -3959 -3968 -3974 0
c ((1<=(aux977 + aux980 + aux981))=tv=SATLiteral(7992))
-7992 -3959 -3968 -3973 0
7992 3973 0
7992 3968 0
7992 3969 0
7992 3971 0
7992 3959 0
7992 3959 3968 0
7992 3959 3969 0
7992 3959 3971 0
7992 3960 0
7992 3960 3968 0
7992 3960 3969 0
7992 3960 3971 0
c (((aux983 + aux986 + aux987)<=1)=tv=SATLiteral(7993))
-7993 3998 0
-7993 3992 3997 0
-7993 3993 0
-7993 3995 0
-7993 3983 3997 0
-7993 3983 3992 0
-7993 3983 3993 0
-7993 3983 3995 0
-7993 3984 0
-7993 3984 3992 0
-7993 3984 3993 0
-7993 3984 3995 0
7993 -3984 -3992 -3997 0
7993 -3983 -3993 -3997 0
7993 -3983 -3992 -3998 0
c ((1<=(aux983 + aux986 + aux987))=tv=SATLiteral(7994))
-7994 -3983 -3992 -3997 0
7994 3997 0
7994 3992 0
7994 3993 0
7994 3995 0
7994 3983 0
7994 3983 3992 0
7994 3983 3993 0
7994 3983 3995 0
7994 3984 0
7994 3984 3992 0
7994 3984 3993 0
7994 3984 3995 0
c (((aux989 + aux992 + aux993)<=1)=tv=SATLiteral(7995))
-7995 4022 0
-7995 4016 4021 0
-7995 4017 0
-7995 4019 0
-7995 4007 4021 0
-7995 4007 4016 0
-7995 4007 4017 0
-7995 4007 4019 0
-7995 4008 0
-7995 4008 4016 0
-7995 4008 4017 0
-7995 4008 4019 0
7995 -4008 -4016 -4021 0
7995 -4007 -4017 -4021 0
7995 -4007 -4016 -4022 0
c ((1<=(aux989 + aux992 + aux993))=tv=SATLiteral(7996))
-7996 -4007 -4016 -4021 0
7996 4021 0
7996 4016 0
7996 4017 0
7996 4019 0
7996 4007 0
7996 4007 4016 0
7996 4007 4017 0
7996 4007 4019 0
7996 4008 0
7996 4008 4016 0
7996 4008 4017 0
7996 4008 4019 0
c (((aux995 + aux998 + aux999)<=1)=tv=SATLiteral(7997))
-7997 4046 0
-7997 4040 4045 0
-7997 4041 0
-7997 4043 0
-7997 4031 4045 0
-7997 4031 4040 0
-7997 4031 4041 0
-7997 4031 4043 0
-7997 4032 0
-7997 4032 4040 0
-7997 4032 4041 0
-7997 4032 4043 0
7997 -4032 -4040 -4045 0
7997 -4031 -4041 -4045 0
7997 -4031 -4040 -4046 0
c ((1<=(aux995 + aux998 + aux999))=tv=SATLiteral(7998))
-7998 -4031 -4040 -4045 0
7998 4045 0
7998 4040 0
7998 4041 0
7998 4043 0
7998 4031 0
7998 4031 4040 0
7998 4031 4041 0
7998 4031 4043 0
7998 4032 0
7998 4032 4040 0
7998 4032 4041 0
7998 4032 4043 0
c (((aux1001 + aux1004 + aux1005)<=1)=tv=SATLiteral(7999))
-7999 4070 0
-7999 4064 4069 0
-7999 4065 0
-7999 4067 0
-7999 4055 4069 0
-7999 4055 4064 0
-7999 4055 4065 0
-7999 4055 4067 0
-7999 4056 0
-7999 4056 4064 0
-7999 4056 4065 0
-7999 4056 4067 0
7999 -4056 -4064 -4069 0
7999 -4055 -4065 -4069 0
7999 -4055 -4064 -4070 0
c ((1<=(aux1001 + aux1004 + aux1005))=tv=SATLiteral(8000))
-8000 -4055 -4064 -4069 0
8000 4069 0
8000 4064 0
8000 4065 0
8000 4067 0
8000 4055 0
8000 4055 4064 0
8000 4055 4065 0
8000 4055 4067 0
8000 4056 0
8000 4056 4064 0
8000 4056 4065 0
8000 4056 4067 0
c (((aux1007 + aux1010 + aux1011)<=1)=tv=SATLiteral(8001))
-8001 4094 0
-8001 4088 4093 0
-8001 4089 0
-8001 4091 0
-8001 4079 4093 0
-8001 4079 4088 0
-8001 4079 4089 0
-8001 4079 4091 0
-8001 4080 0
-8001 4080 4088 0
-8001 4080 4089 0
-8001 4080 4091 0
8001 -4080 -4088 -4093 0
8001 -4079 -4089 -4093 0
8001 -4079 -4088 -4094 0
c ((1<=(aux1007 + aux1010 + aux1011))=tv=SATLiteral(8002))
-8002 -4079 -4088 -4093 0
8002 4093 0
8002 4088 0
8002 4089 0
8002 4091 0
8002 4079 0
8002 4079 4088 0
8002 4079 4089 0
8002 4079 4091 0
8002 4080 0
8002 4080 4088 0
8002 4080 4089 0
8002 4080 4091 0
c (((aux1013 + aux1016 + aux1017)<=1)=tv=SATLiteral(8003))
-8003 4118 0
-8003 4112 4117 0
-8003 4113 0
-8003 4115 0
-8003 4103 4117 0
-8003 4103 4112 0
-8003 4103 4113 0
-8003 4103 4115 0
-8003 4104 0
-8003 4104 4112 0
-8003 4104 4113 0
-8003 4104 4115 0
8003 -4104 -4112 -4117 0
8003 -4103 -4113 -4117 0
8003 -4103 -4112 -4118 0
c ((1<=(aux1013 + aux1016 + aux1017))=tv=SATLiteral(8004))
-8004 -4103 -4112 -4117 0
8004 4117 0
8004 4112 0
8004 4113 0
8004 4115 0
8004 4103 0
8004 4103 4112 0
8004 4103 4113 0
8004 4103 4115 0
8004 4104 0
8004 4104 4112 0
8004 4104 4113 0
8004 4104 4115 0
c (((aux1019 + aux1022 + aux1023)<=1)=tv=SATLiteral(8005))
-8005 4142 0
-8005 4136 4141 0
-8005 4137 0
-8005 4139 0
-8005 4127 4141 0
-8005 4127 4136 0
-8005 4127 4137 0
-8005 4127 4139 0
-8005 4128 0
-8005 4128 4136 0
-8005 4128 4137 0
-8005 4128 4139 0
8005 -4128 -4136 -4141 0
8005 -4127 -4137 -4141 0
8005 -4127 -4136 -4142 0
c ((1<=(aux1019 + aux1022 + aux1023))=tv=SATLiteral(8006))
-8006 -4127 -4136 -4141 0
8006 4141 0
8006 4136 0
8006 4137 0
8006 4139 0
8006 4127 0
8006 4127 4136 0
8006 4127 4137 0
8006 4127 4139 0
8006 4128 0
8006 4128 4136 0
8006 4128 4137 0
8006 4128 4139 0
c (((aux1025 + aux1028 + aux1029)<=1)=tv=SATLiteral(8007))
-8007 4166 0
-8007 4160 4165 0
-8007 4161 0
-8007 4163 0
-8007 4151 4165 0
-8007 4151 4160 0
-8007 4151 4161 0
-8007 4151 4163 0
-8007 4152 0
-8007 4152 4160 0
-8007 4152 4161 0
-8007 4152 4163 0
8007 -4152 -4160 -4165 0
8007 -4151 -4161 -4165 0
8007 -4151 -4160 -4166 0
c ((1<=(aux1025 + aux1028 + aux1029))=tv=SATLiteral(8008))
-8008 -4151 -4160 -4165 0
8008 4165 0
8008 4160 0
8008 4161 0
8008 4163 0
8008 4151 0
8008 4151 4160 0
8008 4151 4161 0
8008 4151 4163 0
8008 4152 0
8008 4152 4160 0
8008 4152 4161 0
8008 4152 4163 0
c (((aux1031 + aux1034 + aux1035)<=1)=tv=SATLiteral(8009))
-8009 4190 0
-8009 4184 4189 0
-8009 4185 0
-8009 4187 0
-8009 4175 4189 0
-8009 4175 4184 0
-8009 4175 4185 0
-8009 4175 4187 0
-8009 4176 0
-8009 4176 4184 0
-8009 4176 4185 0
-8009 4176 4187 0
8009 -4176 -4184 -4189 0
8009 -4175 -4185 -4189 0
8009 -4175 -4184 -4190 0
c ((1<=(aux1031 + aux1034 + aux1035))=tv=SATLiteral(8010))
-8010 -4175 -4184 -4189 0
8010 4189 0
8010 4184 0
8010 4185 0
8010 4187 0
8010 4175 0
8010 4175 4184 0
8010 4175 4185 0
8010 4175 4187 0
8010 4176 0
8010 4176 4184 0
8010 4176 4185 0
8010 4176 4187 0
c (((aux1037 + aux1040 + aux1041)<=1)=tv=SATLiteral(8011))
-8011 4214 0
-8011 4208 4213 0
-8011 4209 0
-8011 4211 0
-8011 4199 4213 0
-8011 4199 4208 0
-8011 4199 4209 0
-8011 4199 4211 0
-8011 4200 0
-8011 4200 4208 0
-8011 4200 4209 0
-8011 4200 4211 0
8011 -4200 -4208 -4213 0
8011 -4199 -4209 -4213 0
8011 -4199 -4208 -4214 0
c ((1<=(aux1037 + aux1040 + aux1041))=tv=SATLiteral(8012))
-8012 -4199 -4208 -4213 0
8012 4213 0
8012 4208 0
8012 4209 0
8012 4211 0
8012 4199 0
8012 4199 4208 0
8012 4199 4209 0
8012 4199 4211 0
8012 4200 0
8012 4200 4208 0
8012 4200 4209 0
8012 4200 4211 0
c (((aux1043 + aux1046 + aux1047)<=1)=tv=SATLiteral(8013))
-8013 4238 0
-8013 4232 4237 0
-8013 4233 0
-8013 4235 0
-8013 4223 4237 0
-8013 4223 4232 0
-8013 4223 4233 0
-8013 4223 4235 0
-8013 4224 0
-8013 4224 4232 0
-8013 4224 4233 0
-8013 4224 4235 0
8013 -4224 -4232 -4237 0
8013 -4223 -4233 -4237 0
8013 -4223 -4232 -4238 0
c ((1<=(aux1043 + aux1046 + aux1047))=tv=SATLiteral(8014))
-8014 -4223 -4232 -4237 0
8014 4237 0
8014 4232 0
8014 4233 0
8014 4235 0
8014 4223 0
8014 4223 4232 0
8014 4223 4233 0
8014 4223 4235 0
8014 4224 0
8014 4224 4232 0
8014 4224 4233 0
8014 4224 4235 0
c (((aux1049 + aux1052 + aux1053)<=1)=tv=SATLiteral(8015))
-8015 4262 0
-8015 4256 4261 0
-8015 4257 0
-8015 4259 0
-8015 4247 4261 0
-8015 4247 4256 0
-8015 4247 4257 0
-8015 4247 4259 0
-8015 4248 0
-8015 4248 4256 0
-8015 4248 4257 0
-8015 4248 4259 0
8015 -4248 -4256 -4261 0
8015 -4247 -4257 -4261 0
8015 -4247 -4256 -4262 0
c ((1<=(aux1049 + aux1052 + aux1053))=tv=SATLiteral(8016))
-8016 -4247 -4256 -4261 0
8016 4261 0
8016 4256 0
8016 4257 0
8016 4259 0
8016 4247 0
8016 4247 4256 0
8016 4247 4257 0
8016 4247 4259 0
8016 4248 0
8016 4248 4256 0
8016 4248 4257 0
8016 4248 4259 0
c (((aux1055 + aux1058 + aux1059)<=1)=tv=SATLiteral(8017))
-8017 4286 0
-8017 4280 4285 0
-8017 4281 0
-8017 4283 0
-8017 4271 4285 0
-8017 4271 4280 0
-8017 4271 4281 0
-8017 4271 4283 0
-8017 4272 0
-8017 4272 4280 0
-8017 4272 4281 0
-8017 4272 4283 0
8017 -4272 -4280 -4285 0
8017 -4271 -4281 -4285 0
8017 -4271 -4280 -4286 0
c ((1<=(aux1055 + aux1058 + aux1059))=tv=SATLiteral(8018))
-8018 -4271 -4280 -4285 0
8018 4285 0
8018 4280 0
8018 4281 0
8018 4283 0
8018 4271 0
8018 4271 4280 0
8018 4271 4281 0
8018 4271 4283 0
8018 4272 0
8018 4272 4280 0
8018 4272 4281 0
8018 4272 4283 0
c (((aux1061 + aux1064 + aux1065)<=1)=tv=SATLiteral(8019))
-8019 4310 0
-8019 4304 4309 0
-8019 4305 0
-8019 4307 0
-8019 4295 4309 0
-8019 4295 4304 0
-8019 4295 4305 0
-8019 4295 4307 0
-8019 4296 0
-8019 4296 4304 0
-8019 4296 4305 0
-8019 4296 4307 0
8019 -4296 -4304 -4309 0
8019 -4295 -4305 -4309 0
8019 -4295 -4304 -4310 0
c ((1<=(aux1061 + aux1064 + aux1065))=tv=SATLiteral(8020))
-8020 -4295 -4304 -4309 0
8020 4309 0
8020 4304 0
8020 4305 0
8020 4307 0
8020 4295 0
8020 4295 4304 0
8020 4295 4305 0
8020 4295 4307 0
8020 4296 0
8020 4296 4304 0
8020 4296 4305 0
8020 4296 4307 0
c (((aux1067 + aux1070 + aux1071)<=1)=tv=SATLiteral(8021))
-8021 4334 0
-8021 4328 4333 0
-8021 4329 0
-8021 4331 0
-8021 4319 4333 0
-8021 4319 4328 0
-8021 4319 4329 0
-8021 4319 4331 0
-8021 4320 0
-8021 4320 4328 0
-8021 4320 4329 0
-8021 4320 4331 0
8021 -4320 -4328 -4333 0
8021 -4319 -4329 -4333 0
8021 -4319 -4328 -4334 0
c ((1<=(aux1067 + aux1070 + aux1071))=tv=SATLiteral(8022))
-8022 -4319 -4328 -4333 0
8022 4333 0
8022 4328 0
8022 4329 0
8022 4331 0
8022 4319 0
8022 4319 4328 0
8022 4319 4329 0
8022 4319 4331 0
8022 4320 0
8022 4320 4328 0
8022 4320 4329 0
8022 4320 4331 0
c (((aux1073 + aux1076 + aux1077)<=1)=tv=SATLiteral(8023))
-8023 4358 0
-8023 4352 4357 0
-8023 4353 0
-8023 4355 0
-8023 4343 4357 0
-8023 4343 4352 0
-8023 4343 4353 0
-8023 4343 4355 0
-8023 4344 0
-8023 4344 4352 0
-8023 4344 4353 0
-8023 4344 4355 0
8023 -4344 -4352 -4357 0
8023 -4343 -4353 -4357 0
8023 -4343 -4352 -4358 0
c ((1<=(aux1073 + aux1076 + aux1077))=tv=SATLiteral(8024))
-8024 -4343 -4352 -4357 0
8024 4357 0
8024 4352 0
8024 4353 0
8024 4355 0
8024 4343 0
8024 4343 4352 0
8024 4343 4353 0
8024 4343 4355 0
8024 4344 0
8024 4344 4352 0
8024 4344 4353 0
8024 4344 4355 0
c (((aux1079 + aux1082 + aux1083)<=1)=tv=SATLiteral(8025))
-8025 4382 0
-8025 4376 4381 0
-8025 4377 0
-8025 4379 0
-8025 4367 4381 0
-8025 4367 4376 0
-8025 4367 4377 0
-8025 4367 4379 0
-8025 4368 0
-8025 4368 4376 0
-8025 4368 4377 0
-8025 4368 4379 0
8025 -4368 -4376 -4381 0
8025 -4367 -4377 -4381 0
8025 -4367 -4376 -4382 0
c ((1<=(aux1079 + aux1082 + aux1083))=tv=SATLiteral(8026))
-8026 -4367 -4376 -4381 0
8026 4381 0
8026 4376 0
8026 4377 0
8026 4379 0
8026 4367 0
8026 4367 4376 0
8026 4367 4377 0
8026 4367 4379 0
8026 4368 0
8026 4368 4376 0
8026 4368 4377 0
8026 4368 4379 0
c (((aux1085 + aux1088 + aux1089)<=1)=tv=SATLiteral(8027))
-8027 4406 0
-8027 4400 4405 0
-8027 4401 0
-8027 4403 0
-8027 4391 4405 0
-8027 4391 4400 0
-8027 4391 4401 0
-8027 4391 4403 0
-8027 4392 0
-8027 4392 4400 0
-8027 4392 4401 0
-8027 4392 4403 0
8027 -4392 -4400 -4405 0
8027 -4391 -4401 -4405 0
8027 -4391 -4400 -4406 0
c ((1<=(aux1085 + aux1088 + aux1089))=tv=SATLiteral(8028))
-8028 -4391 -4400 -4405 0
8028 4405 0
8028 4400 0
8028 4401 0
8028 4403 0
8028 4391 0
8028 4391 4400 0
8028 4391 4401 0
8028 4391 4403 0
8028 4392 0
8028 4392 4400 0
8028 4392 4401 0
8028 4392 4403 0
c (((aux1091 + aux1094 + aux1095)<=1)=tv=SATLiteral(8029))
-8029 4430 0
-8029 4424 4429 0
-8029 4425 0
-8029 4427 0
-8029 4415 4429 0
-8029 4415 4424 0
-8029 4415 4425 0
-8029 4415 4427 0
-8029 4416 0
-8029 4416 4424 0
-8029 4416 4425 0
-8029 4416 4427 0
8029 -4416 -4424 -4429 0
8029 -4415 -4425 -4429 0
8029 -4415 -4424 -4430 0
c ((1<=(aux1091 + aux1094 + aux1095))=tv=SATLiteral(8030))
-8030 -4415 -4424 -4429 0
8030 4429 0
8030 4424 0
8030 4425 0
8030 4427 0
8030 4415 0
8030 4415 4424 0
8030 4415 4425 0
8030 4415 4427 0
8030 4416 0
8030 4416 4424 0
8030 4416 4425 0
8030 4416 4427 0
c (((aux1097 + aux1100 + aux1101)<=1)=tv=SATLiteral(8031))
-8031 4454 0
-8031 4448 4453 0
-8031 4449 0
-8031 4451 0
-8031 4439 4453 0
-8031 4439 4448 0
-8031 4439 4449 0
-8031 4439 4451 0
-8031 4440 0
-8031 4440 4448 0
-8031 4440 4449 0
-8031 4440 4451 0
8031 -4440 -4448 -4453 0
8031 -4439 -4449 -4453 0
8031 -4439 -4448 -4454 0
c ((1<=(aux1097 + aux1100 + aux1101))=tv=SATLiteral(8032))
-8032 -4439 -4448 -4453 0
8032 4453 0
8032 4448 0
8032 4449 0
8032 4451 0
8032 4439 0
8032 4439 4448 0
8032 4439 4449 0
8032 4439 4451 0
8032 4440 0
8032 4440 4448 0
8032 4440 4449 0
8032 4440 4451 0
c (((aux1103 + aux1106 + aux1107)<=1)=tv=SATLiteral(8033))
-8033 4478 0
-8033 4472 4477 0
-8033 4473 0
-8033 4475 0
-8033 4463 4477 0
-8033 4463 4472 0
-8033 4463 4473 0
-8033 4463 4475 0
-8033 4464 0
-8033 4464 4472 0
-8033 4464 4473 0
-8033 4464 4475 0
8033 -4464 -4472 -4477 0
8033 -4463 -4473 -4477 0
8033 -4463 -4472 -4478 0
c ((1<=(aux1103 + aux1106 + aux1107))=tv=SATLiteral(8034))
-8034 -4463 -4472 -4477 0
8034 4477 0
8034 4472 0
8034 4473 0
8034 4475 0
8034 4463 0
8034 4463 4472 0
8034 4463 4473 0
8034 4463 4475 0
8034 4464 0
8034 4464 4472 0
8034 4464 4473 0
8034 4464 4475 0
c (((aux1109 + aux1112 + aux1113)<=1)=tv=SATLiteral(8035))
-8035 4502 0
-8035 4496 4501 0
-8035 4497 0
-8035 4499 0
-8035 4487 4501 0
-8035 4487 4496 0
-8035 4487 4497 0
-8035 4487 4499 0
-8035 4488 0
-8035 4488 4496 0
-8035 4488 4497 0
-8035 4488 4499 0
8035 -4488 -4496 -4501 0
8035 -4487 -4497 -4501 0
8035 -4487 -4496 -4502 0
c ((1<=(aux1109 + aux1112 + aux1113))=tv=SATLiteral(8036))
-8036 -4487 -4496 -4501 0
8036 4501 0
8036 4496 0
8036 4497 0
8036 4499 0
8036 4487 0
8036 4487 4496 0
8036 4487 4497 0
8036 4487 4499 0
8036 4488 0
8036 4488 4496 0
8036 4488 4497 0
8036 4488 4499 0
c (((aux1115 + aux1118 + aux1119)<=1)=tv=SATLiteral(8037))
-8037 4526 0
-8037 4520 4525 0
-8037 4521 0
-8037 4523 0
-8037 4511 4525 0
-8037 4511 4520 0
-8037 4511 4521 0
-8037 4511 4523 0
-8037 4512 0
-8037 4512 4520 0
-8037 4512 4521 0
-8037 4512 4523 0
8037 -4512 -4520 -4525 0
8037 -4511 -4521 -4525 0
8037 -4511 -4520 -4526 0
c ((1<=(aux1115 + aux1118 + aux1119))=tv=SATLiteral(8038))
-8038 -4511 -4520 -4525 0
8038 4525 0
8038 4520 0
8038 4521 0
8038 4523 0
8038 4511 0
8038 4511 4520 0
8038 4511 4521 0
8038 4511 4523 0
8038 4512 0
8038 4512 4520 0
8038 4512 4521 0
8038 4512 4523 0
c (((aux1121 + aux1124 + aux1125)<=1)=tv=SATLiteral(8039))
-8039 4550 0
-8039 4544 4549 0
-8039 4545 0
-8039 4547 0
-8039 4535 4549 0
-8039 4535 4544 0
-8039 4535 4545 0
-8039 4535 4547 0
-8039 4536 0
-8039 4536 4544 0
-8039 4536 4545 0
-8039 4536 4547 0
8039 -4536 -4544 -4549 0
8039 -4535 -4545 -4549 0
8039 -4535 -4544 -4550 0
c ((1<=(aux1121 + aux1124 + aux1125))=tv=SATLiteral(8040))
-8040 -4535 -4544 -4549 0
8040 4549 0
8040 4544 0
8040 4545 0
8040 4547 0
8040 4535 0
8040 4535 4544 0
8040 4535 4545 0
8040 4535 4547 0
8040 4536 0
8040 4536 4544 0
8040 4536 4545 0
8040 4536 4547 0
c (((aux1127 + aux1130 + aux1131)<=1)=tv=SATLiteral(8041))
-8041 4574 0
-8041 4568 4573 0
-8041 4569 0
-8041 4571 0
-8041 4559 4573 0
-8041 4559 4568 0
-8041 4559 4569 0
-8041 4559 4571 0
-8041 4560 0
-8041 4560 4568 0
-8041 4560 4569 0
-8041 4560 4571 0
8041 -4560 -4568 -4573 0
8041 -4559 -4569 -4573 0
8041 -4559 -4568 -4574 0
c ((1<=(aux1127 + aux1130 + aux1131))=tv=SATLiteral(8042))
-8042 -4559 -4568 -4573 0
8042 4573 0
8042 4568 0
8042 4569 0
8042 4571 0
8042 4559 0
8042 4559 4568 0
8042 4559 4569 0
8042 4559 4571 0
8042 4560 0
8042 4560 4568 0
8042 4560 4569 0
8042 4560 4571 0
c (((aux1133 + aux1136 + aux1137)<=1)=tv=SATLiteral(8043))
-8043 4598 0
-8043 4592 4597 0
-8043 4593 0
-8043 4595 0
-8043 4583 4597 0
-8043 4583 4592 0
-8043 4583 4593 0
-8043 4583 4595 0
-8043 4584 0
-8043 4584 4592 0
-8043 4584 4593 0
-8043 4584 4595 0
8043 -4584 -4592 -4597 0
8043 -4583 -4593 -4597 0
8043 -4583 -4592 -4598 0
c ((1<=(aux1133 + aux1136 + aux1137))=tv=SATLiteral(8044))
-8044 -4583 -4592 -4597 0
8044 4597 0
8044 4592 0
8044 4593 0
8044 4595 0
8044 4583 0
8044 4583 4592 0
8044 4583 4593 0
8044 4583 4595 0
8044 4584 0
8044 4584 4592 0
8044 4584 4593 0
8044 4584 4595 0
c (((aux1139 + aux1142 + aux1143)<=1)=tv=SATLiteral(8045))
-8045 4622 0
-8045 4616 4621 0
-8045 4617 0
-8045 4619 0
-8045 4607 4621 0
-8045 4607 4616 0
-8045 4607 4617 0
-8045 4607 4619 0
-8045 4608 0
-8045 4608 4616 0
-8045 4608 4617 0
-8045 4608 4619 0
8045 -4608 -4616 -4621 0
8045 -4607 -4617 -4621 0
8045 -4607 -4616 -4622 0
c ((1<=(aux1139 + aux1142 + aux1143))=tv=SATLiteral(8046))
-8046 -4607 -4616 -4621 0
8046 4621 0
8046 4616 0
8046 4617 0
8046 4619 0
8046 4607 0
8046 4607 4616 0
8046 4607 4617 0
8046 4607 4619 0
8046 4608 0
8046 4608 4616 0
8046 4608 4617 0
8046 4608 4619 0
c (((aux1145 + aux1148 + aux1149)<=1)=tv=SATLiteral(8047))
-8047 4646 0
-8047 4640 4645 0
-8047 4641 0
-8047 4643 0
-8047 4631 4645 0
-8047 4631 4640 0
-8047 4631 4641 0
-8047 4631 4643 0
-8047 4632 0
-8047 4632 4640 0
-8047 4632 4641 0
-8047 4632 4643 0
8047 -4632 -4640 -4645 0
8047 -4631 -4641 -4645 0
8047 -4631 -4640 -4646 0
c ((1<=(aux1145 + aux1148 + aux1149))=tv=SATLiteral(8048))
-8048 -4631 -4640 -4645 0
8048 4645 0
8048 4640 0
8048 4641 0
8048 4643 0
8048 4631 0
8048 4631 4640 0
8048 4631 4641 0
8048 4631 4643 0
8048 4632 0
8048 4632 4640 0
8048 4632 4641 0
8048 4632 4643 0
c (((aux1151 + aux1154 + aux1155)<=1)=tv=SATLiteral(8049))
-8049 4670 0
-8049 4664 4669 0
-8049 4665 0
-8049 4667 0
-8049 4655 4669 0
-8049 4655 4664 0
-8049 4655 4665 0
-8049 4655 4667 0
-8049 4656 0
-8049 4656 4664 0
-8049 4656 4665 0
-8049 4656 4667 0
8049 -4656 -4664 -4669 0
8049 -4655 -4665 -4669 0
8049 -4655 -4664 -4670 0
c ((1<=(aux1151 + aux1154 + aux1155))=tv=SATLiteral(8050))
-8050 -4655 -4664 -4669 0
8050 4669 0
8050 4664 0
8050 4665 0
8050 4667 0
8050 4655 0
8050 4655 4664 0
8050 4655 4665 0
8050 4655 4667 0
8050 4656 0
8050 4656 4664 0
8050 4656 4665 0
8050 4656 4667 0
c (((aux1157 + aux1160 + aux1161)<=1)=tv=SATLiteral(8051))
-8051 4694 0
-8051 4688 4693 0
-8051 4689 0
-8051 4691 0
-8051 4679 4693 0
-8051 4679 4688 0
-8051 4679 4689 0
-8051 4679 4691 0
-8051 4680 0
-8051 4680 4688 0
-8051 4680 4689 0
-8051 4680 4691 0
8051 -4680 -4688 -4693 0
8051 -4679 -4689 -4693 0
8051 -4679 -4688 -4694 0
c ((1<=(aux1157 + aux1160 + aux1161))=tv=SATLiteral(8052))
-8052 -4679 -4688 -4693 0
8052 4693 0
8052 4688 0
8052 4689 0
8052 4691 0
8052 4679 0
8052 4679 4688 0
8052 4679 4689 0
8052 4679 4691 0
8052 4680 0
8052 4680 4688 0
8052 4680 4689 0
8052 4680 4691 0
c (((aux1163 + aux1166 + aux1167)<=1)=tv=SATLiteral(8053))
-8053 4718 0
-8053 4712 4717 0
-8053 4713 0
-8053 4715 0
-8053 4703 4717 0
-8053 4703 4712 0
-8053 4703 4713 0
-8053 4703 4715 0
-8053 4704 0
-8053 4704 4712 0
-8053 4704 4713 0
-8053 4704 4715 0
8053 -4704 -4712 -4717 0
8053 -4703 -4713 -4717 0
8053 -4703 -4712 -4718 0
c ((1<=(aux1163 + aux1166 + aux1167))=tv=SATLiteral(8054))
-8054 -4703 -4712 -4717 0
8054 4717 0
8054 4712 0
8054 4713 0
8054 4715 0
8054 4703 0
8054 4703 4712 0
8054 4703 4713 0
8054 4703 4715 0
8054 4704 0
8054 4704 4712 0
8054 4704 4713 0
8054 4704 4715 0
c (((aux1169 + aux1172 + aux1173)<=1)=tv=SATLiteral(8055))
-8055 4742 0
-8055 4736 4741 0
-8055 4737 0
-8055 4739 0
-8055 4727 4741 0
-8055 4727 4736 0
-8055 4727 4737 0
-8055 4727 4739 0
-8055 4728 0
-8055 4728 4736 0
-8055 4728 4737 0
-8055 4728 4739 0
8055 -4728 -4736 -4741 0
8055 -4727 -4737 -4741 0
8055 -4727 -4736 -4742 0
c ((1<=(aux1169 + aux1172 + aux1173))=tv=SATLiteral(8056))
-8056 -4727 -4736 -4741 0
8056 4741 0
8056 4736 0
8056 4737 0
8056 4739 0
8056 4727 0
8056 4727 4736 0
8056 4727 4737 0
8056 4727 4739 0
8056 4728 0
8056 4728 4736 0
8056 4728 4737 0
8056 4728 4739 0
c (((aux1175 + aux1178 + aux1179)<=1)=tv=SATLiteral(8057))
-8057 4766 0
-8057 4760 4765 0
-8057 4761 0
-8057 4763 0
-8057 4751 4765 0
-8057 4751 4760 0
-8057 4751 4761 0
-8057 4751 4763 0
-8057 4752 0
-8057 4752 4760 0
-8057 4752 4761 0
-8057 4752 4763 0
8057 -4752 -4760 -4765 0
8057 -4751 -4761 -4765 0
8057 -4751 -4760 -4766 0
c ((1<=(aux1175 + aux1178 + aux1179))=tv=SATLiteral(8058))
-8058 -4751 -4760 -4765 0
8058 4765 0
8058 4760 0
8058 4761 0
8058 4763 0
8058 4751 0
8058 4751 4760 0
8058 4751 4761 0
8058 4751 4763 0
8058 4752 0
8058 4752 4760 0
8058 4752 4761 0
8058 4752 4763 0
c (((aux1181 + aux1184 + aux1185)<=1)=tv=SATLiteral(8059))
-8059 4790 0
-8059 4784 4789 0
-8059 4785 0
-8059 4787 0
-8059 4775 4789 0
-8059 4775 4784 0
-8059 4775 4785 0
-8059 4775 4787 0
-8059 4776 0
-8059 4776 4784 0
-8059 4776 4785 0
-8059 4776 4787 0
8059 -4776 -4784 -4789 0
8059 -4775 -4785 -4789 0
8059 -4775 -4784 -4790 0
c ((1<=(aux1181 + aux1184 + aux1185))=tv=SATLiteral(8060))
-8060 -4775 -4784 -4789 0
8060 4789 0
8060 4784 0
8060 4785 0
8060 4787 0
8060 4775 0
8060 4775 4784 0
8060 4775 4785 0
8060 4775 4787 0
8060 4776 0
8060 4776 4784 0
8060 4776 4785 0
8060 4776 4787 0
c (((aux1187 + aux1190 + aux1191)<=1)=tv=SATLiteral(8061))
-8061 4814 0
-8061 4808 4813 0
-8061 4809 0
-8061 4811 0
-8061 4799 4813 0
-8061 4799 4808 0
-8061 4799 4809 0
-8061 4799 4811 0
-8061 4800 0
-8061 4800 4808 0
-8061 4800 4809 0
-8061 4800 4811 0
8061 -4800 -4808 -4813 0
8061 -4799 -4809 -4813 0
8061 -4799 -4808 -4814 0
c ((1<=(aux1187 + aux1190 + aux1191))=tv=SATLiteral(8062))
-8062 -4799 -4808 -4813 0
8062 4813 0
8062 4808 0
8062 4809 0
8062 4811 0
8062 4799 0
8062 4799 4808 0
8062 4799 4809 0
8062 4799 4811 0
8062 4800 0
8062 4800 4808 0
8062 4800 4809 0
8062 4800 4811 0
c (((aux1193 + aux1196 + aux1197)<=1)=tv=SATLiteral(8063))
-8063 4838 0
-8063 4832 4837 0
-8063 4833 0
-8063 4835 0
-8063 4823 4837 0
-8063 4823 4832 0
-8063 4823 4833 0
-8063 4823 4835 0
-8063 4824 0
-8063 4824 4832 0
-8063 4824 4833 0
-8063 4824 4835 0
8063 -4824 -4832 -4837 0
8063 -4823 -4833 -4837 0
8063 -4823 -4832 -4838 0
c ((1<=(aux1193 + aux1196 + aux1197))=tv=SATLiteral(8064))
-8064 -4823 -4832 -4837 0
8064 4837 0
8064 4832 0
8064 4833 0
8064 4835 0
8064 4823 0
8064 4823 4832 0
8064 4823 4833 0
8064 4823 4835 0
8064 4824 0
8064 4824 4832 0
8064 4824 4833 0
8064 4824 4835 0
c (((aux1199 + aux1202 + aux1203)<=1)=tv=SATLiteral(8065))
-8065 4862 0
-8065 4856 4861 0
-8065 4857 0
-8065 4859 0
-8065 4847 4861 0
-8065 4847 4856 0
-8065 4847 4857 0
-8065 4847 4859 0
-8065 4848 0
-8065 4848 4856 0
-8065 4848 4857 0
-8065 4848 4859 0
8065 -4848 -4856 -4861 0
8065 -4847 -4857 -4861 0
8065 -4847 -4856 -4862 0
c ((1<=(aux1199 + aux1202 + aux1203))=tv=SATLiteral(8066))
-8066 -4847 -4856 -4861 0
8066 4861 0
8066 4856 0
8066 4857 0
8066 4859 0
8066 4847 0
8066 4847 4856 0
8066 4847 4857 0
8066 4847 4859 0
8066 4848 0
8066 4848 4856 0
8066 4848 4857 0
8066 4848 4859 0
c (((aux1205 + aux1208 + aux1209)<=1)=tv=SATLiteral(8067))
-8067 4886 0
-8067 4880 4885 0
-8067 4881 0
-8067 4883 0
-8067 4871 4885 0
-8067 4871 4880 0
-8067 4871 4881 0
-8067 4871 4883 0
-8067 4872 0
-8067 4872 4880 0
-8067 4872 4881 0
-8067 4872 4883 0
8067 -4872 -4880 -4885 0
8067 -4871 -4881 -4885 0
8067 -4871 -4880 -4886 0
c ((1<=(aux1205 + aux1208 + aux1209))=tv=SATLiteral(8068))
-8068 -4871 -4880 -4885 0
8068 4885 0
8068 4880 0
8068 4881 0
8068 4883 0
8068 4871 0
8068 4871 4880 0
8068 4871 4881 0
8068 4871 4883 0
8068 4872 0
8068 4872 4880 0
8068 4872 4881 0
8068 4872 4883 0
c (((aux1211 + aux1214 + aux1215)<=1)=tv=SATLiteral(8069))
-8069 4910 0
-8069 4904 4909 0
-8069 4905 0
-8069 4907 0
-8069 4895 4909 0
-8069 4895 4904 0
-8069 4895 4905 0
-8069 4895 4907 0
-8069 4896 0
-8069 4896 4904 0
-8069 4896 4905 0
-8069 4896 4907 0
8069 -4896 -4904 -4909 0
8069 -4895 -4905 -4909 0
8069 -4895 -4904 -4910 0
c ((1<=(aux1211 + aux1214 + aux1215))=tv=SATLiteral(8070))
-8070 -4895 -4904 -4909 0
8070 4909 0
8070 4904 0
8070 4905 0
8070 4907 0
8070 4895 0
8070 4895 4904 0
8070 4895 4905 0
8070 4895 4907 0
8070 4896 0
8070 4896 4904 0
8070 4896 4905 0
8070 4896 4907 0
c (((aux1217 + aux1220 + aux1221)<=1)=tv=SATLiteral(8071))
-8071 4934 0
-8071 4928 4933 0
-8071 4929 0
-8071 4931 0
-8071 4919 4933 0
-8071 4919 4928 0
-8071 4919 4929 0
-8071 4919 4931 0
-8071 4920 0
-8071 4920 4928 0
-8071 4920 4929 0
-8071 4920 4931 0
8071 -4920 -4928 -4933 0
8071 -4919 -4929 -4933 0
8071 -4919 -4928 -4934 0
c ((1<=(aux1217 + aux1220 + aux1221))=tv=SATLiteral(8072))
-8072 -4919 -4928 -4933 0
8072 4933 0
8072 4928 0
8072 4929 0
8072 4931 0
8072 4919 0
8072 4919 4928 0
8072 4919 4929 0
8072 4919 4931 0
8072 4920 0
8072 4920 4928 0
8072 4920 4929 0
8072 4920 4931 0
c (((aux1223 + aux1226 + aux1227)<=1)=tv=SATLiteral(8073))
-8073 4958 0
-8073 4952 4957 0
-8073 4953 0
-8073 4955 0
-8073 4943 4957 0
-8073 4943 4952 0
-8073 4943 4953 0
-8073 4943 4955 0
-8073 4944 0
-8073 4944 4952 0
-8073 4944 4953 0
-8073 4944 4955 0
8073 -4944 -4952 -4957 0
8073 -4943 -4953 -4957 0
8073 -4943 -4952 -4958 0
c ((1<=(aux1223 + aux1226 + aux1227))=tv=SATLiteral(8074))
-8074 -4943 -4952 -4957 0
8074 4957 0
8074 4952 0
8074 4953 0
8074 4955 0
8074 4943 0
8074 4943 4952 0
8074 4943 4953 0
8074 4943 4955 0
8074 4944 0
8074 4944 4952 0
8074 4944 4953 0
8074 4944 4955 0
c (((aux1229 + aux1232 + aux1233)<=1)=tv=SATLiteral(8075))
-8075 4982 0
-8075 4976 4981 0
-8075 4977 0
-8075 4979 0
-8075 4967 4981 0
-8075 4967 4976 0
-8075 4967 4977 0
-8075 4967 4979 0
-8075 4968 0
-8075 4968 4976 0
-8075 4968 4977 0
-8075 4968 4979 0
8075 -4968 -4976 -4981 0
8075 -4967 -4977 -4981 0
8075 -4967 -4976 -4982 0
c ((1<=(aux1229 + aux1232 + aux1233))=tv=SATLiteral(8076))
-8076 -4967 -4976 -4981 0
8076 4981 0
8076 4976 0
8076 4977 0
8076 4979 0
8076 4967 0
8076 4967 4976 0
8076 4967 4977 0
8076 4967 4979 0
8076 4968 0
8076 4968 4976 0
8076 4968 4977 0
8076 4968 4979 0
c (((aux1235 + aux1238 + aux1239)<=1)=tv=SATLiteral(8077))
-8077 5006 0
-8077 5000 5005 0
-8077 5001 0
-8077 5003 0
-8077 4991 5005 0
-8077 4991 5000 0
-8077 4991 5001 0
-8077 4991 5003 0
-8077 4992 0
-8077 4992 5000 0
-8077 4992 5001 0
-8077 4992 5003 0
8077 -4992 -5000 -5005 0
8077 -4991 -5001 -5005 0
8077 -4991 -5000 -5006 0
c ((1<=(aux1235 + aux1238 + aux1239))=tv=SATLiteral(8078))
-8078 -4991 -5000 -5005 0
8078 5005 0
8078 5000 0
8078 5001 0
8078 5003 0
8078 4991 0
8078 4991 5000 0
8078 4991 5001 0
8078 4991 5003 0
8078 4992 0
8078 4992 5000 0
8078 4992 5001 0
8078 4992 5003 0
c (((aux1241 + aux1244 + aux1245)<=1)=tv=SATLiteral(8079))
-8079 5030 0
-8079 5024 5029 0
-8079 5025 0
-8079 5027 0
-8079 5015 5029 0
-8079 5015 5024 0
-8079 5015 5025 0
-8079 5015 5027 0
-8079 5016 0
-8079 5016 5024 0
-8079 5016 5025 0
-8079 5016 5027 0
8079 -5016 -5024 -5029 0
8079 -5015 -5025 -5029 0
8079 -5015 -5024 -5030 0
c ((1<=(aux1241 + aux1244 + aux1245))=tv=SATLiteral(8080))
-8080 -5015 -5024 -5029 0
8080 5029 0
8080 5024 0
8080 5025 0
8080 5027 0
8080 5015 0
8080 5015 5024 0
8080 5015 5025 0
8080 5015 5027 0
8080 5016 0
8080 5016 5024 0
8080 5016 5025 0
8080 5016 5027 0
c (((aux1247 + aux1250 + aux1251)<=1)=tv=SATLiteral(8081))
-8081 5054 0
-8081 5048 5053 0
-8081 5049 0
-8081 5051 0
-8081 5039 5053 0
-8081 5039 5048 0
-8081 5039 5049 0
-8081 5039 5051 0
-8081 5040 0
-8081 5040 5048 0
-8081 5040 5049 0
-8081 5040 5051 0
8081 -5040 -5048 -5053 0
8081 -5039 -5049 -5053 0
8081 -5039 -5048 -5054 0
c ((1<=(aux1247 + aux1250 + aux1251))=tv=SATLiteral(8082))
-8082 -5039 -5048 -5053 0
8082 5053 0
8082 5048 0
8082 5049 0
8082 5051 0
8082 5039 0
8082 5039 5048 0
8082 5039 5049 0
8082 5039 5051 0
8082 5040 0
8082 5040 5048 0
8082 5040 5049 0
8082 5040 5051 0
c (((aux1253 + aux1256 + aux1257)<=1)=tv=SATLiteral(8083))
-8083 5078 0
-8083 5072 5077 0
-8083 5073 0
-8083 5075 0
-8083 5063 5077 0
-8083 5063 5072 0
-8083 5063 5073 0
-8083 5063 5075 0
-8083 5064 0
-8083 5064 5072 0
-8083 5064 5073 0
-8083 5064 5075 0
8083 -5064 -5072 -5077 0
8083 -5063 -5073 -5077 0
8083 -5063 -5072 -5078 0
c ((1<=(aux1253 + aux1256 + aux1257))=tv=SATLiteral(8084))
-8084 -5063 -5072 -5077 0
8084 5077 0
8084 5072 0
8084 5073 0
8084 5075 0
8084 5063 0
8084 5063 5072 0
8084 5063 5073 0
8084 5063 5075 0
8084 5064 0
8084 5064 5072 0
8084 5064 5073 0
8084 5064 5075 0
c (((aux1259 + aux1262 + aux1263)<=1)=tv=SATLiteral(8085))
-8085 5102 0
-8085 5096 5101 0
-8085 5097 0
-8085 5099 0
-8085 5087 5101 0
-8085 5087 5096 0
-8085 5087 5097 0
-8085 5087 5099 0
-8085 5088 0
-8085 5088 5096 0
-8085 5088 5097 0
-8085 5088 5099 0
8085 -5088 -5096 -5101 0
8085 -5087 -5097 -5101 0
8085 -5087 -5096 -5102 0
c ((1<=(aux1259 + aux1262 + aux1263))=tv=SATLiteral(8086))
-8086 -5087 -5096 -5101 0
8086 5101 0
8086 5096 0
8086 5097 0
8086 5099 0
8086 5087 0
8086 5087 5096 0
8086 5087 5097 0
8086 5087 5099 0
8086 5088 0
8086 5088 5096 0
8086 5088 5097 0
8086 5088 5099 0
c (((aux1265 + aux1268 + aux1269)<=1)=tv=SATLiteral(8087))
-8087 5126 0
-8087 5120 5125 0
-8087 5121 0
-8087 5123 0
-8087 5111 5125 0
-8087 5111 5120 0
-8087 5111 5121 0
-8087 5111 5123 0
-8087 5112 0
-8087 5112 5120 0
-8087 5112 5121 0
-8087 5112 5123 0
8087 -5112 -5120 -5125 0
8087 -5111 -5121 -5125 0
8087 -5111 -5120 -5126 0
c ((1<=(aux1265 + aux1268 + aux1269))=tv=SATLiteral(8088))
-8088 -5111 -5120 -5125 0
8088 5125 0
8088 5120 0
8088 5121 0
8088 5123 0
8088 5111 0
8088 5111 5120 0
8088 5111 5121 0
8088 5111 5123 0
8088 5112 0
8088 5112 5120 0
8088 5112 5121 0
8088 5112 5123 0
c (((aux1271 + aux1274 + aux1275)<=1)=tv=SATLiteral(8089))
-8089 5150 0
-8089 5144 5149 0
-8089 5145 0
-8089 5147 0
-8089 5135 5149 0
-8089 5135 5144 0
-8089 5135 5145 0
-8089 5135 5147 0
-8089 5136 0
-8089 5136 5144 0
-8089 5136 5145 0
-8089 5136 5147 0
8089 -5136 -5144 -5149 0
8089 -5135 -5145 -5149 0
8089 -5135 -5144 -5150 0
c ((1<=(aux1271 + aux1274 + aux1275))=tv=SATLiteral(8090))
-8090 -5135 -5144 -5149 0
8090 5149 0
8090 5144 0
8090 5145 0
8090 5147 0
8090 5135 0
8090 5135 5144 0
8090 5135 5145 0
8090 5135 5147 0
8090 5136 0
8090 5136 5144 0
8090 5136 5145 0
8090 5136 5147 0
c (((aux1277 + aux1280 + aux1281)<=1)=tv=SATLiteral(8091))
-8091 5174 0
-8091 5168 5173 0
-8091 5169 0
-8091 5171 0
-8091 5159 5173 0
-8091 5159 5168 0
-8091 5159 5169 0
-8091 5159 5171 0
-8091 5160 0
-8091 5160 5168 0
-8091 5160 5169 0
-8091 5160 5171 0
8091 -5160 -5168 -5173 0
8091 -5159 -5169 -5173 0
8091 -5159 -5168 -5174 0
c ((1<=(aux1277 + aux1280 + aux1281))=tv=SATLiteral(8092))
-8092 -5159 -5168 -5173 0
8092 5173 0
8092 5168 0
8092 5169 0
8092 5171 0
8092 5159 0
8092 5159 5168 0
8092 5159 5169 0
8092 5159 5171 0
8092 5160 0
8092 5160 5168 0
8092 5160 5169 0
8092 5160 5171 0
c (((aux1283 + aux1286 + aux1287)<=1)=tv=SATLiteral(8093))
-8093 5198 0
-8093 5192 5197 0
-8093 5193 0
-8093 5195 0
-8093 5183 5197 0
-8093 5183 5192 0
-8093 5183 5193 0
-8093 5183 5195 0
-8093 5184 0
-8093 5184 5192 0
-8093 5184 5193 0
-8093 5184 5195 0
8093 -5184 -5192 -5197 0
8093 -5183 -5193 -5197 0
8093 -5183 -5192 -5198 0
c ((1<=(aux1283 + aux1286 + aux1287))=tv=SATLiteral(8094))
-8094 -5183 -5192 -5197 0
8094 5197 0
8094 5192 0
8094 5193 0
8094 5195 0
8094 5183 0
8094 5183 5192 0
8094 5183 5193 0
8094 5183 5195 0
8094 5184 0
8094 5184 5192 0
8094 5184 5193 0
8094 5184 5195 0
c (((aux1289 + aux1292 + aux1293)<=1)=tv=SATLiteral(8095))
-8095 5222 0
-8095 5216 5221 0
-8095 5217 0
-8095 5219 0
-8095 5207 5221 0
-8095 5207 5216 0
-8095 5207 5217 0
-8095 5207 5219 0
-8095 5208 0
-8095 5208 5216 0
-8095 5208 5217 0
-8095 5208 5219 0
8095 -5208 -5216 -5221 0
8095 -5207 -5217 -5221 0
8095 -5207 -5216 -5222 0
c ((1<=(aux1289 + aux1292 + aux1293))=tv=SATLiteral(8096))
-8096 -5207 -5216 -5221 0
8096 5221 0
8096 5216 0
8096 5217 0
8096 5219 0
8096 5207 0
8096 5207 5216 0
8096 5207 5217 0
8096 5207 5219 0
8096 5208 0
8096 5208 5216 0
8096 5208 5217 0
8096 5208 5219 0
c (((aux1295 + aux1298 + aux1299)<=1)=tv=SATLiteral(8097))
-8097 5246 0
-8097 5240 5245 0
-8097 5241 0
-8097 5243 0
-8097 5231 5245 0
-8097 5231 5240 0
-8097 5231 5241 0
-8097 5231 5243 0
-8097 5232 0
-8097 5232 5240 0
-8097 5232 5241 0
-8097 5232 5243 0
8097 -5232 -5240 -5245 0
8097 -5231 -5241 -5245 0
8097 -5231 -5240 -5246 0
c ((1<=(aux1295 + aux1298 + aux1299))=tv=SATLiteral(8098))
-8098 -5231 -5240 -5245 0
8098 5245 0
8098 5240 0
8098 5241 0
8098 5243 0
8098 5231 0
8098 5231 5240 0
8098 5231 5241 0
8098 5231 5243 0
8098 5232 0
8098 5232 5240 0
8098 5232 5241 0
8098 5232 5243 0
c (((aux1301 + aux1304 + aux1305)<=1)=tv=SATLiteral(8099))
-8099 5270 0
-8099 5264 5269 0
-8099 5265 0
-8099 5267 0
-8099 5255 5269 0
-8099 5255 5264 0
-8099 5255 5265 0
-8099 5255 5267 0
-8099 5256 0
-8099 5256 5264 0
-8099 5256 5265 0
-8099 5256 5267 0
8099 -5256 -5264 -5269 0
8099 -5255 -5265 -5269 0
8099 -5255 -5264 -5270 0
c ((1<=(aux1301 + aux1304 + aux1305))=tv=SATLiteral(8100))
-8100 -5255 -5264 -5269 0
8100 5269 0
8100 5264 0
8100 5265 0
8100 5267 0
8100 5255 0
8100 5255 5264 0
8100 5255 5265 0
8100 5255 5267 0
8100 5256 0
8100 5256 5264 0
8100 5256 5265 0
8100 5256 5267 0
c (((aux1307 + aux1310 + aux1311)<=1)=tv=SATLiteral(8101))
-8101 5294 0
-8101 5288 5293 0
-8101 5289 0
-8101 5291 0
-8101 5279 5293 0
-8101 5279 5288 0
-8101 5279 5289 0
-8101 5279 5291 0
-8101 5280 0
-8101 5280 5288 0
-8101 5280 5289 0
-8101 5280 5291 0
8101 -5280 -5288 -5293 0
8101 -5279 -5289 -5293 0
8101 -5279 -5288 -5294 0
c ((1<=(aux1307 + aux1310 + aux1311))=tv=SATLiteral(8102))
-8102 -5279 -5288 -5293 0
8102 5293 0
8102 5288 0
8102 5289 0
8102 5291 0
8102 5279 0
8102 5279 5288 0
8102 5279 5289 0
8102 5279 5291 0
8102 5280 0
8102 5280 5288 0
8102 5280 5289 0
8102 5280 5291 0
c (((aux1313 + aux1316 + aux1317)<=1)=tv=SATLiteral(8103))
-8103 5318 0
-8103 5312 5317 0
-8103 5313 0
-8103 5315 0
-8103 5303 5317 0
-8103 5303 5312 0
-8103 5303 5313 0
-8103 5303 5315 0
-8103 5304 0
-8103 5304 5312 0
-8103 5304 5313 0
-8103 5304 5315 0
8103 -5304 -5312 -5317 0
8103 -5303 -5313 -5317 0
8103 -5303 -5312 -5318 0
c ((1<=(aux1313 + aux1316 + aux1317))=tv=SATLiteral(8104))
-8104 -5303 -5312 -5317 0
8104 5317 0
8104 5312 0
8104 5313 0
8104 5315 0
8104 5303 0
8104 5303 5312 0
8104 5303 5313 0
8104 5303 5315 0
8104 5304 0
8104 5304 5312 0
8104 5304 5313 0
8104 5304 5315 0
c (((aux1319 + aux1322 + aux1323)<=1)=tv=SATLiteral(8105))
-8105 5342 0
-8105 5336 5341 0
-8105 5337 0
-8105 5339 0
-8105 5327 5341 0
-8105 5327 5336 0
-8105 5327 5337 0
-8105 5327 5339 0
-8105 5328 0
-8105 5328 5336 0
-8105 5328 5337 0
-8105 5328 5339 0
8105 -5328 -5336 -5341 0
8105 -5327 -5337 -5341 0
8105 -5327 -5336 -5342 0
c ((1<=(aux1319 + aux1322 + aux1323))=tv=SATLiteral(8106))
-8106 -5327 -5336 -5341 0
8106 5341 0
8106 5336 0
8106 5337 0
8106 5339 0
8106 5327 0
8106 5327 5336 0
8106 5327 5337 0
8106 5327 5339 0
8106 5328 0
8106 5328 5336 0
8106 5328 5337 0
8106 5328 5339 0
c (((aux1325 + aux1328 + aux1329)<=1)=tv=SATLiteral(8107))
-8107 5366 0
-8107 5360 5365 0
-8107 5361 0
-8107 5363 0
-8107 5351 5365 0
-8107 5351 5360 0
-8107 5351 5361 0
-8107 5351 5363 0
-8107 5352 0
-8107 5352 5360 0
-8107 5352 5361 0
-8107 5352 5363 0
8107 -5352 -5360 -5365 0
8107 -5351 -5361 -5365 0
8107 -5351 -5360 -5366 0
c ((1<=(aux1325 + aux1328 + aux1329))=tv=SATLiteral(8108))
-8108 -5351 -5360 -5365 0
8108 5365 0
8108 5360 0
8108 5361 0
8108 5363 0
8108 5351 0
8108 5351 5360 0
8108 5351 5361 0
8108 5351 5363 0
8108 5352 0
8108 5352 5360 0
8108 5352 5361 0
8108 5352 5363 0
c (((aux1331 + aux1334 + aux1335)<=1)=tv=SATLiteral(8109))
-8109 5390 0
-8109 5384 5389 0
-8109 5385 0
-8109 5387 0
-8109 5375 5389 0
-8109 5375 5384 0
-8109 5375 5385 0
-8109 5375 5387 0
-8109 5376 0
-8109 5376 5384 0
-8109 5376 5385 0
-8109 5376 5387 0
8109 -5376 -5384 -5389 0
8109 -5375 -5385 -5389 0
8109 -5375 -5384 -5390 0
c ((1<=(aux1331 + aux1334 + aux1335))=tv=SATLiteral(8110))
-8110 -5375 -5384 -5389 0
8110 5389 0
8110 5384 0
8110 5385 0
8110 5387 0
8110 5375 0
8110 5375 5384 0
8110 5375 5385 0
8110 5375 5387 0
8110 5376 0
8110 5376 5384 0
8110 5376 5385 0
8110 5376 5387 0
c (((aux1337 + aux1340 + aux1341)<=1)=tv=SATLiteral(8111))
-8111 5414 0
-8111 5408 5413 0
-8111 5409 0
-8111 5411 0
-8111 5399 5413 0
-8111 5399 5408 0
-8111 5399 5409 0
-8111 5399 5411 0
-8111 5400 0
-8111 5400 5408 0
-8111 5400 5409 0
-8111 5400 5411 0
8111 -5400 -5408 -5413 0
8111 -5399 -5409 -5413 0
8111 -5399 -5408 -5414 0
c ((1<=(aux1337 + aux1340 + aux1341))=tv=SATLiteral(8112))
-8112 -5399 -5408 -5413 0
8112 5413 0
8112 5408 0
8112 5409 0
8112 5411 0
8112 5399 0
8112 5399 5408 0
8112 5399 5409 0
8112 5399 5411 0
8112 5400 0
8112 5400 5408 0
8112 5400 5409 0
8112 5400 5411 0
c (((aux1343 + aux1346 + aux1347)<=1)=tv=SATLiteral(8113))
-8113 5438 0
-8113 5432 5437 0
-8113 5433 0
-8113 5435 0
-8113 5423 5437 0
-8113 5423 5432 0
-8113 5423 5433 0
-8113 5423 5435 0
-8113 5424 0
-8113 5424 5432 0
-8113 5424 5433 0
-8113 5424 5435 0
8113 -5424 -5432 -5437 0
8113 -5423 -5433 -5437 0
8113 -5423 -5432 -5438 0
c ((1<=(aux1343 + aux1346 + aux1347))=tv=SATLiteral(8114))
-8114 -5423 -5432 -5437 0
8114 5437 0
8114 5432 0
8114 5433 0
8114 5435 0
8114 5423 0
8114 5423 5432 0
8114 5423 5433 0
8114 5423 5435 0
8114 5424 0
8114 5424 5432 0
8114 5424 5433 0
8114 5424 5435 0
c (((aux1349 + aux1352 + aux1353)<=1)=tv=SATLiteral(8115))
-8115 5462 0
-8115 5456 5461 0
-8115 5457 0
-8115 5459 0
-8115 5447 5461 0
-8115 5447 5456 0
-8115 5447 5457 0
-8115 5447 5459 0
-8115 5448 0
-8115 5448 5456 0
-8115 5448 5457 0
-8115 5448 5459 0
8115 -5448 -5456 -5461 0
8115 -5447 -5457 -5461 0
8115 -5447 -5456 -5462 0
c ((1<=(aux1349 + aux1352 + aux1353))=tv=SATLiteral(8116))
-8116 -5447 -5456 -5461 0
8116 5461 0
8116 5456 0
8116 5457 0
8116 5459 0
8116 5447 0
8116 5447 5456 0
8116 5447 5457 0
8116 5447 5459 0
8116 5448 0
8116 5448 5456 0
8116 5448 5457 0
8116 5448 5459 0
c (((aux1355 + aux1358 + aux1359)<=1)=tv=SATLiteral(8117))
-8117 5486 0
-8117 5480 5485 0
-8117 5481 0
-8117 5483 0
-8117 5471 5485 0
-8117 5471 5480 0
-8117 5471 5481 0
-8117 5471 5483 0
-8117 5472 0
-8117 5472 5480 0
-8117 5472 5481 0
-8117 5472 5483 0
8117 -5472 -5480 -5485 0
8117 -5471 -5481 -5485 0
8117 -5471 -5480 -5486 0
c ((1<=(aux1355 + aux1358 + aux1359))=tv=SATLiteral(8118))
-8118 -5471 -5480 -5485 0
8118 5485 0
8118 5480 0
8118 5481 0
8118 5483 0
8118 5471 0
8118 5471 5480 0
8118 5471 5481 0
8118 5471 5483 0
8118 5472 0
8118 5472 5480 0
8118 5472 5481 0
8118 5472 5483 0
c (((aux1361 + aux1364 + aux1365)<=1)=tv=SATLiteral(8119))
-8119 5510 0
-8119 5504 5509 0
-8119 5505 0
-8119 5507 0
-8119 5495 5509 0
-8119 5495 5504 0
-8119 5495 5505 0
-8119 5495 5507 0
-8119 5496 0
-8119 5496 5504 0
-8119 5496 5505 0
-8119 5496 5507 0
8119 -5496 -5504 -5509 0
8119 -5495 -5505 -5509 0
8119 -5495 -5504 -5510 0
c ((1<=(aux1361 + aux1364 + aux1365))=tv=SATLiteral(8120))
-8120 -5495 -5504 -5509 0
8120 5509 0
8120 5504 0
8120 5505 0
8120 5507 0
8120 5495 0
8120 5495 5504 0
8120 5495 5505 0
8120 5495 5507 0
8120 5496 0
8120 5496 5504 0
8120 5496 5505 0
8120 5496 5507 0
c (((aux1367 + aux1370 + aux1371)<=1)=tv=SATLiteral(8121))
-8121 5534 0
-8121 5528 5533 0
-8121 5529 0
-8121 5531 0
-8121 5519 5533 0
-8121 5519 5528 0
-8121 5519 5529 0
-8121 5519 5531 0
-8121 5520 0
-8121 5520 5528 0
-8121 5520 5529 0
-8121 5520 5531 0
8121 -5520 -5528 -5533 0
8121 -5519 -5529 -5533 0
8121 -5519 -5528 -5534 0
c ((1<=(aux1367 + aux1370 + aux1371))=tv=SATLiteral(8122))
-8122 -5519 -5528 -5533 0
8122 5533 0
8122 5528 0
8122 5529 0
8122 5531 0
8122 5519 0
8122 5519 5528 0
8122 5519 5529 0
8122 5519 5531 0
8122 5520 0
8122 5520 5528 0
8122 5520 5529 0
8122 5520 5531 0
c (((aux1373 + aux1376 + aux1377)<=1)=tv=SATLiteral(8123))
-8123 5558 0
-8123 5552 5557 0
-8123 5553 0
-8123 5555 0
-8123 5543 5557 0
-8123 5543 5552 0
-8123 5543 5553 0
-8123 5543 5555 0
-8123 5544 0
-8123 5544 5552 0
-8123 5544 5553 0
-8123 5544 5555 0
8123 -5544 -5552 -5557 0
8123 -5543 -5553 -5557 0
8123 -5543 -5552 -5558 0
c ((1<=(aux1373 + aux1376 + aux1377))=tv=SATLiteral(8124))
-8124 -5543 -5552 -5557 0
8124 5557 0
8124 5552 0
8124 5553 0
8124 5555 0
8124 5543 0
8124 5543 5552 0
8124 5543 5553 0
8124 5543 5555 0
8124 5544 0
8124 5544 5552 0
8124 5544 5553 0
8124 5544 5555 0
c (((aux1379 + aux1382 + aux1383)<=1)=tv=SATLiteral(8125))
-8125 5582 0
-8125 5576 5581 0
-8125 5577 0
-8125 5579 0
-8125 5567 5581 0
-8125 5567 5576 0
-8125 5567 5577 0
-8125 5567 5579 0
-8125 5568 0
-8125 5568 5576 0
-8125 5568 5577 0
-8125 5568 5579 0
8125 -5568 -5576 -5581 0
8125 -5567 -5577 -5581 0
8125 -5567 -5576 -5582 0
c ((1<=(aux1379 + aux1382 + aux1383))=tv=SATLiteral(8126))
-8126 -5567 -5576 -5581 0
8126 5581 0
8126 5576 0
8126 5577 0
8126 5579 0
8126 5567 0
8126 5567 5576 0
8126 5567 5577 0
8126 5567 5579 0
8126 5568 0
8126 5568 5576 0
8126 5568 5577 0
8126 5568 5579 0
c (((aux1385 + aux1388 + aux1389)<=1)=tv=SATLiteral(8127))
-8127 5606 0
-8127 5600 5605 0
-8127 5601 0
-8127 5603 0
-8127 5591 5605 0
-8127 5591 5600 0
-8127 5591 5601 0
-8127 5591 5603 0
-8127 5592 0
-8127 5592 5600 0
-8127 5592 5601 0
-8127 5592 5603 0
8127 -5592 -5600 -5605 0
8127 -5591 -5601 -5605 0
8127 -5591 -5600 -5606 0
c ((1<=(aux1385 + aux1388 + aux1389))=tv=SATLiteral(8128))
-8128 -5591 -5600 -5605 0
8128 5605 0
8128 5600 0
8128 5601 0
8128 5603 0
8128 5591 0
8128 5591 5600 0
8128 5591 5601 0
8128 5591 5603 0
8128 5592 0
8128 5592 5600 0
8128 5592 5601 0
8128 5592 5603 0
c (((aux1391 + aux1394 + aux1395)<=1)=tv=SATLiteral(8129))
-8129 5630 0
-8129 5624 5629 0
-8129 5625 0
-8129 5627 0
-8129 5615 5629 0
-8129 5615 5624 0
-8129 5615 5625 0
-8129 5615 5627 0
-8129 5616 0
-8129 5616 5624 0
-8129 5616 5625 0
-8129 5616 5627 0
8129 -5616 -5624 -5629 0
8129 -5615 -5625 -5629 0
8129 -5615 -5624 -5630 0
c ((1<=(aux1391 + aux1394 + aux1395))=tv=SATLiteral(8130))
-8130 -5615 -5624 -5629 0
8130 5629 0
8130 5624 0
8130 5625 0
8130 5627 0
8130 5615 0
8130 5615 5624 0
8130 5615 5625 0
8130 5615 5627 0
8130 5616 0
8130 5616 5624 0
8130 5616 5625 0
8130 5616 5627 0
c (((aux1397 + aux1400 + aux1401)<=1)=tv=SATLiteral(8131))
-8131 5654 0
-8131 5648 5653 0
-8131 5649 0
-8131 5651 0
-8131 5639 5653 0
-8131 5639 5648 0
-8131 5639 5649 0
-8131 5639 5651 0
-8131 5640 0
-8131 5640 5648 0
-8131 5640 5649 0
-8131 5640 5651 0
8131 -5640 -5648 -5653 0
8131 -5639 -5649 -5653 0
8131 -5639 -5648 -5654 0
c ((1<=(aux1397 + aux1400 + aux1401))=tv=SATLiteral(8132))
-8132 -5639 -5648 -5653 0
8132 5653 0
8132 5648 0
8132 5649 0
8132 5651 0
8132 5639 0
8132 5639 5648 0
8132 5639 5649 0
8132 5639 5651 0
8132 5640 0
8132 5640 5648 0
8132 5640 5649 0
8132 5640 5651 0
c (((aux1403 + aux1406 + aux1407)<=1)=tv=SATLiteral(8133))
-8133 5678 0
-8133 5672 5677 0
-8133 5673 0
-8133 5675 0
-8133 5663 5677 0
-8133 5663 5672 0
-8133 5663 5673 0
-8133 5663 5675 0
-8133 5664 0
-8133 5664 5672 0
-8133 5664 5673 0
-8133 5664 5675 0
8133 -5664 -5672 -5677 0
8133 -5663 -5673 -5677 0
8133 -5663 -5672 -5678 0
c ((1<=(aux1403 + aux1406 + aux1407))=tv=SATLiteral(8134))
-8134 -5663 -5672 -5677 0
8134 5677 0
8134 5672 0
8134 5673 0
8134 5675 0
8134 5663 0
8134 5663 5672 0
8134 5663 5673 0
8134 5663 5675 0
8134 5664 0
8134 5664 5672 0
8134 5664 5673 0
8134 5664 5675 0
c (((aux1409 + aux1412 + aux1413)<=1)=tv=SATLiteral(8135))
-8135 5702 0
-8135 5696 5701 0
-8135 5697 0
-8135 5699 0
-8135 5687 5701 0
-8135 5687 5696 0
-8135 5687 5697 0
-8135 5687 5699 0
-8135 5688 0
-8135 5688 5696 0
-8135 5688 5697 0
-8135 5688 5699 0
8135 -5688 -5696 -5701 0
8135 -5687 -5697 -5701 0
8135 -5687 -5696 -5702 0
c ((1<=(aux1409 + aux1412 + aux1413))=tv=SATLiteral(8136))
-8136 -5687 -5696 -5701 0
8136 5701 0
8136 5696 0
8136 5697 0
8136 5699 0
8136 5687 0
8136 5687 5696 0
8136 5687 5697 0
8136 5687 5699 0
8136 5688 0
8136 5688 5696 0
8136 5688 5697 0
8136 5688 5699 0
c (((aux1415 + aux1418 + aux1419)<=1)=tv=SATLiteral(8137))
-8137 5726 0
-8137 5720 5725 0
-8137 5721 0
-8137 5723 0
-8137 5711 5725 0
-8137 5711 5720 0
-8137 5711 5721 0
-8137 5711 5723 0
-8137 5712 0
-8137 5712 5720 0
-8137 5712 5721 0
-8137 5712 5723 0
8137 -5712 -5720 -5725 0
8137 -5711 -5721 -5725 0
8137 -5711 -5720 -5726 0
c ((1<=(aux1415 + aux1418 + aux1419))=tv=SATLiteral(8138))
-8138 -5711 -5720 -5725 0
8138 5725 0
8138 5720 0
8138 5721 0
8138 5723 0
8138 5711 0
8138 5711 5720 0
8138 5711 5721 0
8138 5711 5723 0
8138 5712 0
8138 5712 5720 0
8138 5712 5721 0
8138 5712 5723 0
c (((aux1421 + aux1424 + aux1425)<=1)=tv=SATLiteral(8139))
-8139 5750 0
-8139 5744 5749 0
-8139 5745 0
-8139 5747 0
-8139 5735 5749 0
-8139 5735 5744 0
-8139 5735 5745 0
-8139 5735 5747 0
-8139 5736 0
-8139 5736 5744 0
-8139 5736 5745 0
-8139 5736 5747 0
8139 -5736 -5744 -5749 0
8139 -5735 -5745 -5749 0
8139 -5735 -5744 -5750 0
c ((1<=(aux1421 + aux1424 + aux1425))=tv=SATLiteral(8140))
-8140 -5735 -5744 -5749 0
8140 5749 0
8140 5744 0
8140 5745 0
8140 5747 0
8140 5735 0
8140 5735 5744 0
8140 5735 5745 0
8140 5735 5747 0
8140 5736 0
8140 5736 5744 0
8140 5736 5745 0
8140 5736 5747 0
c (((aux1427 + aux1430 + aux1431)<=1)=tv=SATLiteral(8141))
-8141 5774 0
-8141 5768 5773 0
-8141 5769 0
-8141 5771 0
-8141 5759 5773 0
-8141 5759 5768 0
-8141 5759 5769 0
-8141 5759 5771 0
-8141 5760 0
-8141 5760 5768 0
-8141 5760 5769 0
-8141 5760 5771 0
8141 -5760 -5768 -5773 0
8141 -5759 -5769 -5773 0
8141 -5759 -5768 -5774 0
c ((1<=(aux1427 + aux1430 + aux1431))=tv=SATLiteral(8142))
-8142 -5759 -5768 -5773 0
8142 5773 0
8142 5768 0
8142 5769 0
8142 5771 0
8142 5759 0
8142 5759 5768 0
8142 5759 5769 0
8142 5759 5771 0
8142 5760 0
8142 5760 5768 0
8142 5760 5769 0
8142 5760 5771 0
c (((aux1433 + aux1436 + aux1437)<=1)=tv=SATLiteral(8143))
-8143 5798 0
-8143 5792 5797 0
-8143 5793 0
-8143 5795 0
-8143 5783 5797 0
-8143 5783 5792 0
-8143 5783 5793 0
-8143 5783 5795 0
-8143 5784 0
-8143 5784 5792 0
-8143 5784 5793 0
-8143 5784 5795 0
8143 -5784 -5792 -5797 0
8143 -5783 -5793 -5797 0
8143 -5783 -5792 -5798 0
c ((1<=(aux1433 + aux1436 + aux1437))=tv=SATLiteral(8144))
-8144 -5783 -5792 -5797 0
8144 5797 0
8144 5792 0
8144 5793 0
8144 5795 0
8144 5783 0
8144 5783 5792 0
8144 5783 5793 0
8144 5783 5795 0
8144 5784 0
8144 5784 5792 0
8144 5784 5793 0
8144 5784 5795 0
c (((aux1439 + aux1442 + aux1443)<=1)=tv=SATLiteral(8145))
-8145 5822 0
-8145 5816 5821 0
-8145 5817 0
-8145 5819 0
-8145 5807 5821 0
-8145 5807 5816 0
-8145 5807 5817 0
-8145 5807 5819 0
-8145 5808 0
-8145 5808 5816 0
-8145 5808 5817 0
-8145 5808 5819 0
8145 -5808 -5816 -5821 0
8145 -5807 -5817 -5821 0
8145 -5807 -5816 -5822 0
c ((1<=(aux1439 + aux1442 + aux1443))=tv=SATLiteral(8146))
-8146 -5807 -5816 -5821 0
8146 5821 0
8146 5816 0
8146 5817 0
8146 5819 0
8146 5807 0
8146 5807 5816 0
8146 5807 5817 0
8146 5807 5819 0
8146 5808 0
8146 5808 5816 0
8146 5808 5817 0
8146 5808 5819 0
c (((aux1445 + aux1448 + aux1449)<=1)=tv=SATLiteral(8147))
-8147 5846 0
-8147 5840 5845 0
-8147 5841 0
-8147 5843 0
-8147 5831 5845 0
-8147 5831 5840 0
-8147 5831 5841 0
-8147 5831 5843 0
-8147 5832 0
-8147 5832 5840 0
-8147 5832 5841 0
-8147 5832 5843 0
8147 -5832 -5840 -5845 0
8147 -5831 -5841 -5845 0
8147 -5831 -5840 -5846 0
c ((1<=(aux1445 + aux1448 + aux1449))=tv=SATLiteral(8148))
-8148 -5831 -5840 -5845 0
8148 5845 0
8148 5840 0
8148 5841 0
8148 5843 0
8148 5831 0
8148 5831 5840 0
8148 5831 5841 0
8148 5831 5843 0
8148 5832 0
8148 5832 5840 0
8148 5832 5841 0
8148 5832 5843 0
c (((aux1451 + aux1454 + aux1455)<=1)=tv=SATLiteral(8149))
-8149 5870 0
-8149 5864 5869 0
-8149 5865 0
-8149 5867 0
-8149 5855 5869 0
-8149 5855 5864 0
-8149 5855 5865 0
-8149 5855 5867 0
-8149 5856 0
-8149 5856 5864 0
-8149 5856 5865 0
-8149 5856 5867 0
8149 -5856 -5864 -5869 0
8149 -5855 -5865 -5869 0
8149 -5855 -5864 -5870 0
c ((1<=(aux1451 + aux1454 + aux1455))=tv=SATLiteral(8150))
-8150 -5855 -5864 -5869 0
8150 5869 0
8150 5864 0
8150 5865 0
8150 5867 0
8150 5855 0
8150 5855 5864 0
8150 5855 5865 0
8150 5855 5867 0
8150 5856 0
8150 5856 5864 0
8150 5856 5865 0
8150 5856 5867 0
c (((aux1457 + aux1460 + aux1461)<=1)=tv=SATLiteral(8151))
-8151 5894 0
-8151 5888 5893 0
-8151 5889 0
-8151 5891 0
-8151 5879 5893 0
-8151 5879 5888 0
-8151 5879 5889 0
-8151 5879 5891 0
-8151 5880 0
-8151 5880 5888 0
-8151 5880 5889 0
-8151 5880 5891 0
8151 -5880 -5888 -5893 0
8151 -5879 -5889 -5893 0
8151 -5879 -5888 -5894 0
c ((1<=(aux1457 + aux1460 + aux1461))=tv=SATLiteral(8152))
-8152 -5879 -5888 -5893 0
8152 5893 0
8152 5888 0
8152 5889 0
8152 5891 0
8152 5879 0
8152 5879 5888 0
8152 5879 5889 0
8152 5879 5891 0
8152 5880 0
8152 5880 5888 0
8152 5880 5889 0
8152 5880 5891 0
c (((aux1463 + aux1466 + aux1467)<=1)=tv=SATLiteral(8153))
-8153 5918 0
-8153 5912 5917 0
-8153 5913 0
-8153 5915 0
-8153 5903 5917 0
-8153 5903 5912 0
-8153 5903 5913 0
-8153 5903 5915 0
-8153 5904 0
-8153 5904 5912 0
-8153 5904 5913 0
-8153 5904 5915 0
8153 -5904 -5912 -5917 0
8153 -5903 -5913 -5917 0
8153 -5903 -5912 -5918 0
c ((1<=(aux1463 + aux1466 + aux1467))=tv=SATLiteral(8154))
-8154 -5903 -5912 -5917 0
8154 5917 0
8154 5912 0
8154 5913 0
8154 5915 0
8154 5903 0
8154 5903 5912 0
8154 5903 5913 0
8154 5903 5915 0
8154 5904 0
8154 5904 5912 0
8154 5904 5913 0
8154 5904 5915 0
c (((aux1469 + aux1472 + aux1473)<=1)=tv=SATLiteral(8155))
-8155 5942 0
-8155 5936 5941 0
-8155 5937 0
-8155 5939 0
-8155 5927 5941 0
-8155 5927 5936 0
-8155 5927 5937 0
-8155 5927 5939 0
-8155 5928 0
-8155 5928 5936 0
-8155 5928 5937 0
-8155 5928 5939 0
8155 -5928 -5936 -5941 0
8155 -5927 -5937 -5941 0
8155 -5927 -5936 -5942 0
c ((1<=(aux1469 + aux1472 + aux1473))=tv=SATLiteral(8156))
-8156 -5927 -5936 -5941 0
8156 5941 0
8156 5936 0
8156 5937 0
8156 5939 0
8156 5927 0
8156 5927 5936 0
8156 5927 5937 0
8156 5927 5939 0
8156 5928 0
8156 5928 5936 0
8156 5928 5937 0
8156 5928 5939 0
c (((aux1475 + aux1478 + aux1479)<=1)=tv=SATLiteral(8157))
-8157 5966 0
-8157 5960 5965 0
-8157 5961 0
-8157 5963 0
-8157 5951 5965 0
-8157 5951 5960 0
-8157 5951 5961 0
-8157 5951 5963 0
-8157 5952 0
-8157 5952 5960 0
-8157 5952 5961 0
-8157 5952 5963 0
8157 -5952 -5960 -5965 0
8157 -5951 -5961 -5965 0
8157 -5951 -5960 -5966 0
c ((1<=(aux1475 + aux1478 + aux1479))=tv=SATLiteral(8158))
-8158 -5951 -5960 -5965 0
8158 5965 0
8158 5960 0
8158 5961 0
8158 5963 0
8158 5951 0
8158 5951 5960 0
8158 5951 5961 0
8158 5951 5963 0
8158 5952 0
8158 5952 5960 0
8158 5952 5961 0
8158 5952 5963 0
c (((aux1481 + aux1484 + aux1485)<=1)=tv=SATLiteral(8159))
-8159 5990 0
-8159 5984 5989 0
-8159 5985 0
-8159 5987 0
-8159 5975 5989 0
-8159 5975 5984 0
-8159 5975 5985 0
-8159 5975 5987 0
-8159 5976 0
-8159 5976 5984 0
-8159 5976 5985 0
-8159 5976 5987 0
8159 -5976 -5984 -5989 0
8159 -5975 -5985 -5989 0
8159 -5975 -5984 -5990 0
c ((1<=(aux1481 + aux1484 + aux1485))=tv=SATLiteral(8160))
-8160 -5975 -5984 -5989 0
8160 5989 0
8160 5984 0
8160 5985 0
8160 5987 0
8160 5975 0
8160 5975 5984 0
8160 5975 5985 0
8160 5975 5987 0
8160 5976 0
8160 5976 5984 0
8160 5976 5985 0
8160 5976 5987 0
c (((aux1487 + aux1490 + aux1491)<=1)=tv=SATLiteral(8161))
-8161 6014 0
-8161 6008 6013 0
-8161 6009 0
-8161 6011 0
-8161 5999 6013 0
-8161 5999 6008 0
-8161 5999 6009 0
-8161 5999 6011 0
-8161 6000 0
-8161 6000 6008 0
-8161 6000 6009 0
-8161 6000 6011 0
8161 -6000 -6008 -6013 0
8161 -5999 -6009 -6013 0
8161 -5999 -6008 -6014 0
c ((1<=(aux1487 + aux1490 + aux1491))=tv=SATLiteral(8162))
-8162 -5999 -6008 -6013 0
8162 6013 0
8162 6008 0
8162 6009 0
8162 6011 0
8162 5999 0
8162 5999 6008 0
8162 5999 6009 0
8162 5999 6011 0
8162 6000 0
8162 6000 6008 0
8162 6000 6009 0
8162 6000 6011 0
c (((aux1493 + aux1496 + aux1497)<=1)=tv=SATLiteral(8163))
-8163 6038 0
-8163 6032 6037 0
-8163 6033 0
-8163 6035 0
-8163 6023 6037 0
-8163 6023 6032 0
-8163 6023 6033 0
-8163 6023 6035 0
-8163 6024 0
-8163 6024 6032 0
-8163 6024 6033 0
-8163 6024 6035 0
8163 -6024 -6032 -6037 0
8163 -6023 -6033 -6037 0
8163 -6023 -6032 -6038 0
c ((1<=(aux1493 + aux1496 + aux1497))=tv=SATLiteral(8164))
-8164 -6023 -6032 -6037 0
8164 6037 0
8164 6032 0
8164 6033 0
8164 6035 0
8164 6023 0
8164 6023 6032 0
8164 6023 6033 0
8164 6023 6035 0
8164 6024 0
8164 6024 6032 0
8164 6024 6033 0
8164 6024 6035 0
c (((aux1499 + aux1502 + aux1503)<=1)=tv=SATLiteral(8165))
-8165 6062 0
-8165 6056 6061 0
-8165 6057 0
-8165 6059 0
-8165 6047 6061 0
-8165 6047 6056 0
-8165 6047 6057 0
-8165 6047 6059 0
-8165 6048 0
-8165 6048 6056 0
-8165 6048 6057 0
-8165 6048 6059 0
8165 -6048 -6056 -6061 0
8165 -6047 -6057 -6061 0
8165 -6047 -6056 -6062 0
c ((1<=(aux1499 + aux1502 + aux1503))=tv=SATLiteral(8166))
-8166 -6047 -6056 -6061 0
8166 6061 0
8166 6056 0
8166 6057 0
8166 6059 0
8166 6047 0
8166 6047 6056 0
8166 6047 6057 0
8166 6047 6059 0
8166 6048 0
8166 6048 6056 0
8166 6048 6057 0
8166 6048 6059 0
c (((aux1505 + aux1508 + aux1509)<=1)=tv=SATLiteral(8167))
-8167 6086 0
-8167 6080 6085 0
-8167 6081 0
-8167 6083 0
-8167 6071 6085 0
-8167 6071 6080 0
-8167 6071 6081 0
-8167 6071 6083 0
-8167 6072 0
-8167 6072 6080 0
-8167 6072 6081 0
-8167 6072 6083 0
8167 -6072 -6080 -6085 0
8167 -6071 -6081 -6085 0
8167 -6071 -6080 -6086 0
c ((1<=(aux1505 + aux1508 + aux1509))=tv=SATLiteral(8168))
-8168 -6071 -6080 -6085 0
8168 6085 0
8168 6080 0
8168 6081 0
8168 6083 0
8168 6071 0
8168 6071 6080 0
8168 6071 6081 0
8168 6071 6083 0
8168 6072 0
8168 6072 6080 0
8168 6072 6081 0
8168 6072 6083 0
c (((aux1511 + aux1514 + aux1515)<=1)=tv=SATLiteral(8169))
-8169 6110 0
-8169 6104 6109 0
-8169 6105 0
-8169 6107 0
-8169 6095 6109 0
-8169 6095 6104 0
-8169 6095 6105 0
-8169 6095 6107 0
-8169 6096 0
-8169 6096 6104 0
-8169 6096 6105 0
-8169 6096 6107 0
8169 -6096 -6104 -6109 0
8169 -6095 -6105 -6109 0
8169 -6095 -6104 -6110 0
c ((1<=(aux1511 + aux1514 + aux1515))=tv=SATLiteral(8170))
-8170 -6095 -6104 -6109 0
8170 6109 0
8170 6104 0
8170 6105 0
8170 6107 0
8170 6095 0
8170 6095 6104 0
8170 6095 6105 0
8170 6095 6107 0
8170 6096 0
8170 6096 6104 0
8170 6096 6105 0
8170 6096 6107 0
c (((aux1517 + aux1520 + aux1521)<=1)=tv=SATLiteral(8171))
-8171 6134 0
-8171 6128 6133 0
-8171 6129 0
-8171 6131 0
-8171 6119 6133 0
-8171 6119 6128 0
-8171 6119 6129 0
-8171 6119 6131 0
-8171 6120 0
-8171 6120 6128 0
-8171 6120 6129 0
-8171 6120 6131 0
8171 -6120 -6128 -6133 0
8171 -6119 -6129 -6133 0
8171 -6119 -6128 -6134 0
c ((1<=(aux1517 + aux1520 + aux1521))=tv=SATLiteral(8172))
-8172 -6119 -6128 -6133 0
8172 6133 0
8172 6128 0
8172 6129 0
8172 6131 0
8172 6119 0
8172 6119 6128 0
8172 6119 6129 0
8172 6119 6131 0
8172 6120 0
8172 6120 6128 0
8172 6120 6129 0
8172 6120 6131 0
c (((aux1523 + aux1526 + aux1527)<=1)=tv=SATLiteral(8173))
-8173 6158 0
-8173 6152 6157 0
-8173 6153 0
-8173 6155 0
-8173 6143 6157 0
-8173 6143 6152 0
-8173 6143 6153 0
-8173 6143 6155 0
-8173 6144 0
-8173 6144 6152 0
-8173 6144 6153 0
-8173 6144 6155 0
8173 -6144 -6152 -6157 0
8173 -6143 -6153 -6157 0
8173 -6143 -6152 -6158 0
c ((1<=(aux1523 + aux1526 + aux1527))=tv=SATLiteral(8174))
-8174 -6143 -6152 -6157 0
8174 6157 0
8174 6152 0
8174 6153 0
8174 6155 0
8174 6143 0
8174 6143 6152 0
8174 6143 6153 0
8174 6143 6155 0
8174 6144 0
8174 6144 6152 0
8174 6144 6153 0
8174 6144 6155 0
c (((aux1529 + aux1532 + aux1533)<=1)=tv=SATLiteral(8175))
-8175 6182 0
-8175 6176 6181 0
-8175 6177 0
-8175 6179 0
-8175 6167 6181 0
-8175 6167 6176 0
-8175 6167 6177 0
-8175 6167 6179 0
-8175 6168 0
-8175 6168 6176 0
-8175 6168 6177 0
-8175 6168 6179 0
8175 -6168 -6176 -6181 0
8175 -6167 -6177 -6181 0
8175 -6167 -6176 -6182 0
c ((1<=(aux1529 + aux1532 + aux1533))=tv=SATLiteral(8176))
-8176 -6167 -6176 -6181 0
8176 6181 0
8176 6176 0
8176 6177 0
8176 6179 0
8176 6167 0
8176 6167 6176 0
8176 6167 6177 0
8176 6167 6179 0
8176 6168 0
8176 6168 6176 0
8176 6168 6177 0
8176 6168 6179 0
c (((aux1535 + aux1538 + aux1539)<=1)=tv=SATLiteral(8177))
-8177 6206 0
-8177 6200 6205 0
-8177 6201 0
-8177 6203 0
-8177 6191 6205 0
-8177 6191 6200 0
-8177 6191 6201 0
-8177 6191 6203 0
-8177 6192 0
-8177 6192 6200 0
-8177 6192 6201 0
-8177 6192 6203 0
8177 -6192 -6200 -6205 0
8177 -6191 -6201 -6205 0
8177 -6191 -6200 -6206 0
c ((1<=(aux1535 + aux1538 + aux1539))=tv=SATLiteral(8178))
-8178 -6191 -6200 -6205 0
8178 6205 0
8178 6200 0
8178 6201 0
8178 6203 0
8178 6191 0
8178 6191 6200 0
8178 6191 6201 0
8178 6191 6203 0
8178 6192 0
8178 6192 6200 0
8178 6192 6201 0
8178 6192 6203 0
c (((aux1541 + aux1544 + aux1545)<=1)=tv=SATLiteral(8179))
-8179 6230 0
-8179 6224 6229 0
-8179 6225 0
-8179 6227 0
-8179 6215 6229 0
-8179 6215 6224 0
-8179 6215 6225 0
-8179 6215 6227 0
-8179 6216 0
-8179 6216 6224 0
-8179 6216 6225 0
-8179 6216 6227 0
8179 -6216 -6224 -6229 0
8179 -6215 -6225 -6229 0
8179 -6215 -6224 -6230 0
c ((1<=(aux1541 + aux1544 + aux1545))=tv=SATLiteral(8180))
-8180 -6215 -6224 -6229 0
8180 6229 0
8180 6224 0
8180 6225 0
8180 6227 0
8180 6215 0
8180 6215 6224 0
8180 6215 6225 0
8180 6215 6227 0
8180 6216 0
8180 6216 6224 0
8180 6216 6225 0
8180 6216 6227 0
c (((aux1547 + aux1550 + aux1551)<=1)=tv=SATLiteral(8181))
-8181 6254 0
-8181 6248 6253 0
-8181 6249 0
-8181 6251 0
-8181 6239 6253 0
-8181 6239 6248 0
-8181 6239 6249 0
-8181 6239 6251 0
-8181 6240 0
-8181 6240 6248 0
-8181 6240 6249 0
-8181 6240 6251 0
8181 -6240 -6248 -6253 0
8181 -6239 -6249 -6253 0
8181 -6239 -6248 -6254 0
c ((1<=(aux1547 + aux1550 + aux1551))=tv=SATLiteral(8182))
-8182 -6239 -6248 -6253 0
8182 6253 0
8182 6248 0
8182 6249 0
8182 6251 0
8182 6239 0
8182 6239 6248 0
8182 6239 6249 0
8182 6239 6251 0
8182 6240 0
8182 6240 6248 0
8182 6240 6249 0
8182 6240 6251 0
c (((aux1553 + aux1556 + aux1557)<=1)=tv=SATLiteral(8183))
-8183 6278 0
-8183 6272 6277 0
-8183 6273 0
-8183 6275 0
-8183 6263 6277 0
-8183 6263 6272 0
-8183 6263 6273 0
-8183 6263 6275 0
-8183 6264 0
-8183 6264 6272 0
-8183 6264 6273 0
-8183 6264 6275 0
8183 -6264 -6272 -6277 0
8183 -6263 -6273 -6277 0
8183 -6263 -6272 -6278 0
c ((1<=(aux1553 + aux1556 + aux1557))=tv=SATLiteral(8184))
-8184 -6263 -6272 -6277 0
8184 6277 0
8184 6272 0
8184 6273 0
8184 6275 0
8184 6263 0
8184 6263 6272 0
8184 6263 6273 0
8184 6263 6275 0
8184 6264 0
8184 6264 6272 0
8184 6264 6273 0
8184 6264 6275 0
c (((aux1559 + aux1562 + aux1563)<=1)=tv=SATLiteral(8185))
-8185 6302 0
-8185 6296 6301 0
-8185 6297 0
-8185 6299 0
-8185 6287 6301 0
-8185 6287 6296 0
-8185 6287 6297 0
-8185 6287 6299 0
-8185 6288 0
-8185 6288 6296 0
-8185 6288 6297 0
-8185 6288 6299 0
8185 -6288 -6296 -6301 0
8185 -6287 -6297 -6301 0
8185 -6287 -6296 -6302 0
c ((1<=(aux1559 + aux1562 + aux1563))=tv=SATLiteral(8186))
-8186 -6287 -6296 -6301 0
8186 6301 0
8186 6296 0
8186 6297 0
8186 6299 0
8186 6287 0
8186 6287 6296 0
8186 6287 6297 0
8186 6287 6299 0
8186 6288 0
8186 6288 6296 0
8186 6288 6297 0
8186 6288 6299 0
c (((aux1565 + aux1568 + aux1569)<=1)=tv=SATLiteral(8187))
-8187 6326 0
-8187 6320 6325 0
-8187 6321 0
-8187 6323 0
-8187 6311 6325 0
-8187 6311 6320 0
-8187 6311 6321 0
-8187 6311 6323 0
-8187 6312 0
-8187 6312 6320 0
-8187 6312 6321 0
-8187 6312 6323 0
8187 -6312 -6320 -6325 0
8187 -6311 -6321 -6325 0
8187 -6311 -6320 -6326 0
c ((1<=(aux1565 + aux1568 + aux1569))=tv=SATLiteral(8188))
-8188 -6311 -6320 -6325 0
8188 6325 0
8188 6320 0
8188 6321 0
8188 6323 0
8188 6311 0
8188 6311 6320 0
8188 6311 6321 0
8188 6311 6323 0
8188 6312 0
8188 6312 6320 0
8188 6312 6321 0
8188 6312 6323 0
c (((aux1571 + aux1574 + aux1575)<=1)=tv=SATLiteral(8189))
-8189 6350 0
-8189 6344 6349 0
-8189 6345 0
-8189 6347 0
-8189 6335 6349 0
-8189 6335 6344 0
-8189 6335 6345 0
-8189 6335 6347 0
-8189 6336 0
-8189 6336 6344 0
-8189 6336 6345 0
-8189 6336 6347 0
8189 -6336 -6344 -6349 0
8189 -6335 -6345 -6349 0
8189 -6335 -6344 -6350 0
c ((1<=(aux1571 + aux1574 + aux1575))=tv=SATLiteral(8190))
-8190 -6335 -6344 -6349 0
8190 6349 0
8190 6344 0
8190 6345 0
8190 6347 0
8190 6335 0
8190 6335 6344 0
8190 6335 6345 0
8190 6335 6347 0
8190 6336 0
8190 6336 6344 0
8190 6336 6345 0
8190 6336 6347 0
c (((aux1577 + aux1580 + aux1581)<=1)=tv=SATLiteral(8191))
-8191 6374 0
-8191 6368 6373 0
-8191 6369 0
-8191 6371 0
-8191 6359 6373 0
-8191 6359 6368 0
-8191 6359 6369 0
-8191 6359 6371 0
-8191 6360 0
-8191 6360 6368 0
-8191 6360 6369 0
-8191 6360 6371 0
8191 -6360 -6368 -6373 0
8191 -6359 -6369 -6373 0
8191 -6359 -6368 -6374 0
c ((1<=(aux1577 + aux1580 + aux1581))=tv=SATLiteral(8192))
-8192 -6359 -6368 -6373 0
8192 6373 0
8192 6368 0
8192 6369 0
8192 6371 0
8192 6359 0
8192 6359 6368 0
8192 6359 6369 0
8192 6359 6371 0
8192 6360 0
8192 6360 6368 0
8192 6360 6369 0
8192 6360 6371 0
c (((aux1583 + aux1586 + aux1587)<=1)=tv=SATLiteral(8193))
-8193 6398 0
-8193 6392 6397 0
-8193 6393 0
-8193 6395 0
-8193 6383 6397 0
-8193 6383 6392 0
-8193 6383 6393 0
-8193 6383 6395 0
-8193 6384 0
-8193 6384 6392 0
-8193 6384 6393 0
-8193 6384 6395 0
8193 -6384 -6392 -6397 0
8193 -6383 -6393 -6397 0
8193 -6383 -6392 -6398 0
c ((1<=(aux1583 + aux1586 + aux1587))=tv=SATLiteral(8194))
-8194 -6383 -6392 -6397 0
8194 6397 0
8194 6392 0
8194 6393 0
8194 6395 0
8194 6383 0
8194 6383 6392 0
8194 6383 6393 0
8194 6383 6395 0
8194 6384 0
8194 6384 6392 0
8194 6384 6393 0
8194 6384 6395 0
c (((aux1589 + aux1592 + aux1593)<=1)=tv=SATLiteral(8195))
-8195 6422 0
-8195 6416 6421 0
-8195 6417 0
-8195 6419 0
-8195 6407 6421 0
-8195 6407 6416 0
-8195 6407 6417 0
-8195 6407 6419 0
-8195 6408 0
-8195 6408 6416 0
-8195 6408 6417 0
-8195 6408 6419 0
8195 -6408 -6416 -6421 0
8195 -6407 -6417 -6421 0
8195 -6407 -6416 -6422 0
c ((1<=(aux1589 + aux1592 + aux1593))=tv=SATLiteral(8196))
-8196 -6407 -6416 -6421 0
8196 6421 0
8196 6416 0
8196 6417 0
8196 6419 0
8196 6407 0
8196 6407 6416 0
8196 6407 6417 0
8196 6407 6419 0
8196 6408 0
8196 6408 6416 0
8196 6408 6417 0
8196 6408 6419 0
c (((aux1595 + aux1598 + aux1599)<=1)=tv=SATLiteral(8197))
-8197 6446 0
-8197 6440 6445 0
-8197 6441 0
-8197 6443 0
-8197 6431 6445 0
-8197 6431 6440 0
-8197 6431 6441 0
-8197 6431 6443 0
-8197 6432 0
-8197 6432 6440 0
-8197 6432 6441 0
-8197 6432 6443 0
8197 -6432 -6440 -6445 0
8197 -6431 -6441 -6445 0
8197 -6431 -6440 -6446 0
c ((1<=(aux1595 + aux1598 + aux1599))=tv=SATLiteral(8198))
-8198 -6431 -6440 -6445 0
8198 6445 0
8198 6440 0
8198 6441 0
8198 6443 0
8198 6431 0
8198 6431 6440 0
8198 6431 6441 0
8198 6431 6443 0
8198 6432 0
8198 6432 6440 0
8198 6432 6441 0
8198 6432 6443 0
c (((aux1601 + aux1604 + aux1605)<=1)=tv=SATLiteral(8199))
-8199 6470 0
-8199 6464 6469 0
-8199 6465 0
-8199 6467 0
-8199 6455 6469 0
-8199 6455 6464 0
-8199 6455 6465 0
-8199 6455 6467 0
-8199 6456 0
-8199 6456 6464 0
-8199 6456 6465 0
-8199 6456 6467 0
8199 -6456 -6464 -6469 0
8199 -6455 -6465 -6469 0
8199 -6455 -6464 -6470 0
c ((1<=(aux1601 + aux1604 + aux1605))=tv=SATLiteral(8200))
-8200 -6455 -6464 -6469 0
8200 6469 0
8200 6464 0
8200 6465 0
8200 6467 0
8200 6455 0
8200 6455 6464 0
8200 6455 6465 0
8200 6455 6467 0
8200 6456 0
8200 6456 6464 0
8200 6456 6465 0
8200 6456 6467 0
c (((aux1607 + aux1610 + aux1611)<=1)=tv=SATLiteral(8201))
-8201 6494 0
-8201 6488 6493 0
-8201 6489 0
-8201 6491 0
-8201 6479 6493 0
-8201 6479 6488 0
-8201 6479 6489 0
-8201 6479 6491 0
-8201 6480 0
-8201 6480 6488 0
-8201 6480 6489 0
-8201 6480 6491 0
8201 -6480 -6488 -6493 0
8201 -6479 -6489 -6493 0
8201 -6479 -6488 -6494 0
c ((1<=(aux1607 + aux1610 + aux1611))=tv=SATLiteral(8202))
-8202 -6479 -6488 -6493 0
8202 6493 0
8202 6488 0
8202 6489 0
8202 6491 0
8202 6479 0
8202 6479 6488 0
8202 6479 6489 0
8202 6479 6491 0
8202 6480 0
8202 6480 6488 0
8202 6480 6489 0
8202 6480 6491 0
c (((aux1613 + aux1616 + aux1617)<=1)=tv=SATLiteral(8203))
-8203 6518 0
-8203 6512 6517 0
-8203 6513 0
-8203 6515 0
-8203 6503 6517 0
-8203 6503 6512 0
-8203 6503 6513 0
-8203 6503 6515 0
-8203 6504 0
-8203 6504 6512 0
-8203 6504 6513 0
-8203 6504 6515 0
8203 -6504 -6512 -6517 0
8203 -6503 -6513 -6517 0
8203 -6503 -6512 -6518 0
c ((1<=(aux1613 + aux1616 + aux1617))=tv=SATLiteral(8204))
-8204 -6503 -6512 -6517 0
8204 6517 0
8204 6512 0
8204 6513 0
8204 6515 0
8204 6503 0
8204 6503 6512 0
8204 6503 6513 0
8204 6503 6515 0
8204 6504 0
8204 6504 6512 0
8204 6504 6513 0
8204 6504 6515 0
c (((aux1619 + aux1622 + aux1623)<=1)=tv=SATLiteral(8205))
-8205 6542 0
-8205 6536 6541 0
-8205 6537 0
-8205 6539 0
-8205 6527 6541 0
-8205 6527 6536 0
-8205 6527 6537 0
-8205 6527 6539 0
-8205 6528 0
-8205 6528 6536 0
-8205 6528 6537 0
-8205 6528 6539 0
8205 -6528 -6536 -6541 0
8205 -6527 -6537 -6541 0
8205 -6527 -6536 -6542 0
c ((1<=(aux1619 + aux1622 + aux1623))=tv=SATLiteral(8206))
-8206 -6527 -6536 -6541 0
8206 6541 0
8206 6536 0
8206 6537 0
8206 6539 0
8206 6527 0
8206 6527 6536 0
8206 6527 6537 0
8206 6527 6539 0
8206 6528 0
8206 6528 6536 0
8206 6528 6537 0
8206 6528 6539 0
c (((aux1625 + aux1628 + aux1629)<=1)=tv=SATLiteral(8207))
-8207 6566 0
-8207 6560 6565 0
-8207 6561 0
-8207 6563 0
-8207 6551 6565 0
-8207 6551 6560 0
-8207 6551 6561 0
-8207 6551 6563 0
-8207 6552 0
-8207 6552 6560 0
-8207 6552 6561 0
-8207 6552 6563 0
8207 -6552 -6560 -6565 0
8207 -6551 -6561 -6565 0
8207 -6551 -6560 -6566 0
c ((1<=(aux1625 + aux1628 + aux1629))=tv=SATLiteral(8208))
-8208 -6551 -6560 -6565 0
8208 6565 0
8208 6560 0
8208 6561 0
8208 6563 0
8208 6551 0
8208 6551 6560 0
8208 6551 6561 0
8208 6551 6563 0
8208 6552 0
8208 6552 6560 0
8208 6552 6561 0
8208 6552 6563 0
c (((aux1631 + aux1634 + aux1635)<=1)=tv=SATLiteral(8209))
-8209 6590 0
-8209 6584 6589 0
-8209 6585 0
-8209 6587 0
-8209 6575 6589 0
-8209 6575 6584 0
-8209 6575 6585 0
-8209 6575 6587 0
-8209 6576 0
-8209 6576 6584 0
-8209 6576 6585 0
-8209 6576 6587 0
8209 -6576 -6584 -6589 0
8209 -6575 -6585 -6589 0
8209 -6575 -6584 -6590 0
c ((1<=(aux1631 + aux1634 + aux1635))=tv=SATLiteral(8210))
-8210 -6575 -6584 -6589 0
8210 6589 0
8210 6584 0
8210 6585 0
8210 6587 0
8210 6575 0
8210 6575 6584 0
8210 6575 6585 0
8210 6575 6587 0
8210 6576 0
8210 6576 6584 0
8210 6576 6585 0
8210 6576 6587 0
c (((aux1637 + aux1640 + aux1641)<=1)=tv=SATLiteral(8211))
-8211 6614 0
-8211 6608 6613 0
-8211 6609 0
-8211 6611 0
-8211 6599 6613 0
-8211 6599 6608 0
-8211 6599 6609 0
-8211 6599 6611 0
-8211 6600 0
-8211 6600 6608 0
-8211 6600 6609 0
-8211 6600 6611 0
8211 -6600 -6608 -6613 0
8211 -6599 -6609 -6613 0
8211 -6599 -6608 -6614 0
c ((1<=(aux1637 + aux1640 + aux1641))=tv=SATLiteral(8212))
-8212 -6599 -6608 -6613 0
8212 6613 0
8212 6608 0
8212 6609 0
8212 6611 0
8212 6599 0
8212 6599 6608 0
8212 6599 6609 0
8212 6599 6611 0
8212 6600 0
8212 6600 6608 0
8212 6600 6609 0
8212 6600 6611 0
c (((aux1643 + aux1646 + aux1647)<=1)=tv=SATLiteral(8213))
-8213 6638 0
-8213 6632 6637 0
-8213 6633 0
-8213 6635 0
-8213 6623 6637 0
-8213 6623 6632 0
-8213 6623 6633 0
-8213 6623 6635 0
-8213 6624 0
-8213 6624 6632 0
-8213 6624 6633 0
-8213 6624 6635 0
8213 -6624 -6632 -6637 0
8213 -6623 -6633 -6637 0
8213 -6623 -6632 -6638 0
c ((1<=(aux1643 + aux1646 + aux1647))=tv=SATLiteral(8214))
-8214 -6623 -6632 -6637 0
8214 6637 0
8214 6632 0
8214 6633 0
8214 6635 0
8214 6623 0
8214 6623 6632 0
8214 6623 6633 0
8214 6623 6635 0
8214 6624 0
8214 6624 6632 0
8214 6624 6633 0
8214 6624 6635 0
c (((aux1649 + aux1652 + aux1653)<=1)=tv=SATLiteral(8215))
-8215 6662 0
-8215 6656 6661 0
-8215 6657 0
-8215 6659 0
-8215 6647 6661 0
-8215 6647 6656 0
-8215 6647 6657 0
-8215 6647 6659 0
-8215 6648 0
-8215 6648 6656 0
-8215 6648 6657 0
-8215 6648 6659 0
8215 -6648 -6656 -6661 0
8215 -6647 -6657 -6661 0
8215 -6647 -6656 -6662 0
c ((1<=(aux1649 + aux1652 + aux1653))=tv=SATLiteral(8216))
-8216 -6647 -6656 -6661 0
8216 6661 0
8216 6656 0
8216 6657 0
8216 6659 0
8216 6647 0
8216 6647 6656 0
8216 6647 6657 0
8216 6647 6659 0
8216 6648 0
8216 6648 6656 0
8216 6648 6657 0
8216 6648 6659 0
c (((aux1655 + aux1658 + aux1659)<=1)=tv=SATLiteral(8217))
-8217 6686 0
-8217 6680 6685 0
-8217 6681 0
-8217 6683 0
-8217 6671 6685 0
-8217 6671 6680 0
-8217 6671 6681 0
-8217 6671 6683 0
-8217 6672 0
-8217 6672 6680 0
-8217 6672 6681 0
-8217 6672 6683 0
8217 -6672 -6680 -6685 0
8217 -6671 -6681 -6685 0
8217 -6671 -6680 -6686 0
c ((1<=(aux1655 + aux1658 + aux1659))=tv=SATLiteral(8218))
-8218 -6671 -6680 -6685 0
8218 6685 0
8218 6680 0
8218 6681 0
8218 6683 0
8218 6671 0
8218 6671 6680 0
8218 6671 6681 0
8218 6671 6683 0
8218 6672 0
8218 6672 6680 0
8218 6672 6681 0
8218 6672 6683 0
c (((aux1661 + aux1664 + aux1665)<=1)=tv=SATLiteral(8219))
-8219 6710 0
-8219 6704 6709 0
-8219 6705 0
-8219 6707 0
-8219 6695 6709 0
-8219 6695 6704 0
-8219 6695 6705 0
-8219 6695 6707 0
-8219 6696 0
-8219 6696 6704 0
-8219 6696 6705 0
-8219 6696 6707 0
8219 -6696 -6704 -6709 0
8219 -6695 -6705 -6709 0
8219 -6695 -6704 -6710 0
c ((1<=(aux1661 + aux1664 + aux1665))=tv=SATLiteral(8220))
-8220 -6695 -6704 -6709 0
8220 6709 0
8220 6704 0
8220 6705 0
8220 6707 0
8220 6695 0
8220 6695 6704 0
8220 6695 6705 0
8220 6695 6707 0
8220 6696 0
8220 6696 6704 0
8220 6696 6705 0
8220 6696 6707 0
c (((aux1667 + aux1670 + aux1671)<=1)=tv=SATLiteral(8221))
-8221 6734 0
-8221 6728 6733 0
-8221 6729 0
-8221 6731 0
-8221 6719 6733 0
-8221 6719 6728 0
-8221 6719 6729 0
-8221 6719 6731 0
-8221 6720 0
-8221 6720 6728 0
-8221 6720 6729 0
-8221 6720 6731 0
8221 -6720 -6728 -6733 0
8221 -6719 -6729 -6733 0
8221 -6719 -6728 -6734 0
c ((1<=(aux1667 + aux1670 + aux1671))=tv=SATLiteral(8222))
-8222 -6719 -6728 -6733 0
8222 6733 0
8222 6728 0
8222 6729 0
8222 6731 0
8222 6719 0
8222 6719 6728 0
8222 6719 6729 0
8222 6719 6731 0
8222 6720 0
8222 6720 6728 0
8222 6720 6729 0
8222 6720 6731 0
c (((aux1673 + aux1676 + aux1677)<=1)=tv=SATLiteral(8223))
-8223 6758 0
-8223 6752 6757 0
-8223 6753 0
-8223 6755 0
-8223 6743 6757 0
-8223 6743 6752 0
-8223 6743 6753 0
-8223 6743 6755 0
-8223 6744 0
-8223 6744 6752 0
-8223 6744 6753 0
-8223 6744 6755 0
8223 -6744 -6752 -6757 0
8223 -6743 -6753 -6757 0
8223 -6743 -6752 -6758 0
c ((1<=(aux1673 + aux1676 + aux1677))=tv=SATLiteral(8224))
-8224 -6743 -6752 -6757 0
8224 6757 0
8224 6752 0
8224 6753 0
8224 6755 0
8224 6743 0
8224 6743 6752 0
8224 6743 6753 0
8224 6743 6755 0
8224 6744 0
8224 6744 6752 0
8224 6744 6753 0
8224 6744 6755 0
c (((aux1679 + aux1682 + aux1683)<=1)=tv=SATLiteral(8225))
-8225 6782 0
-8225 6776 6781 0
-8225 6777 0
-8225 6779 0
-8225 6767 6781 0
-8225 6767 6776 0
-8225 6767 6777 0
-8225 6767 6779 0
-8225 6768 0
-8225 6768 6776 0
-8225 6768 6777 0
-8225 6768 6779 0
8225 -6768 -6776 -6781 0
8225 -6767 -6777 -6781 0
8225 -6767 -6776 -6782 0
c ((1<=(aux1679 + aux1682 + aux1683))=tv=SATLiteral(8226))
-8226 -6767 -6776 -6781 0
8226 6781 0
8226 6776 0
8226 6777 0
8226 6779 0
8226 6767 0
8226 6767 6776 0
8226 6767 6777 0
8226 6767 6779 0
8226 6768 0
8226 6768 6776 0
8226 6768 6777 0
8226 6768 6779 0
c (((aux1685 + aux1688 + aux1689)<=1)=tv=SATLiteral(8227))
-8227 6806 0
-8227 6800 6805 0
-8227 6801 0
-8227 6803 0
-8227 6791 6805 0
-8227 6791 6800 0
-8227 6791 6801 0
-8227 6791 6803 0
-8227 6792 0
-8227 6792 6800 0
-8227 6792 6801 0
-8227 6792 6803 0
8227 -6792 -6800 -6805 0
8227 -6791 -6801 -6805 0
8227 -6791 -6800 -6806 0
c ((1<=(aux1685 + aux1688 + aux1689))=tv=SATLiteral(8228))
-8228 -6791 -6800 -6805 0
8228 6805 0
8228 6800 0
8228 6801 0
8228 6803 0
8228 6791 0
8228 6791 6800 0
8228 6791 6801 0
8228 6791 6803 0
8228 6792 0
8228 6792 6800 0
8228 6792 6801 0
8228 6792 6803 0
c (((aux1691 + aux1694 + aux1695)<=1)=tv=SATLiteral(8229))
-8229 6830 0
-8229 6824 6829 0
-8229 6825 0
-8229 6827 0
-8229 6815 6829 0
-8229 6815 6824 0
-8229 6815 6825 0
-8229 6815 6827 0
-8229 6816 0
-8229 6816 6824 0
-8229 6816 6825 0
-8229 6816 6827 0
8229 -6816 -6824 -6829 0
8229 -6815 -6825 -6829 0
8229 -6815 -6824 -6830 0
c ((1<=(aux1691 + aux1694 + aux1695))=tv=SATLiteral(8230))
-8230 -6815 -6824 -6829 0
8230 6829 0
8230 6824 0
8230 6825 0
8230 6827 0
8230 6815 0
8230 6815 6824 0
8230 6815 6825 0
8230 6815 6827 0
8230 6816 0
8230 6816 6824 0
8230 6816 6825 0
8230 6816 6827 0
c (((aux1697 + aux1700 + aux1701)<=1)=tv=SATLiteral(8231))
-8231 6854 0
-8231 6848 6853 0
-8231 6849 0
-8231 6851 0
-8231 6839 6853 0
-8231 6839 6848 0
-8231 6839 6849 0
-8231 6839 6851 0
-8231 6840 0
-8231 6840 6848 0
-8231 6840 6849 0
-8231 6840 6851 0
8231 -6840 -6848 -6853 0
8231 -6839 -6849 -6853 0
8231 -6839 -6848 -6854 0
c ((1<=(aux1697 + aux1700 + aux1701))=tv=SATLiteral(8232))
-8232 -6839 -6848 -6853 0
8232 6853 0
8232 6848 0
8232 6849 0
8232 6851 0
8232 6839 0
8232 6839 6848 0
8232 6839 6849 0
8232 6839 6851 0
8232 6840 0
8232 6840 6848 0
8232 6840 6849 0
8232 6840 6851 0
c (((aux1703 + aux1706 + aux1707)<=1)=tv=SATLiteral(8233))
-8233 6878 0
-8233 6872 6877 0
-8233 6873 0
-8233 6875 0
-8233 6863 6877 0
-8233 6863 6872 0
-8233 6863 6873 0
-8233 6863 6875 0
-8233 6864 0
-8233 6864 6872 0
-8233 6864 6873 0
-8233 6864 6875 0
8233 -6864 -6872 -6877 0
8233 -6863 -6873 -6877 0
8233 -6863 -6872 -6878 0
c ((1<=(aux1703 + aux1706 + aux1707))=tv=SATLiteral(8234))
-8234 -6863 -6872 -6877 0
8234 6877 0
8234 6872 0
8234 6873 0
8234 6875 0
8234 6863 0
8234 6863 6872 0
8234 6863 6873 0
8234 6863 6875 0
8234 6864 0
8234 6864 6872 0
8234 6864 6873 0
8234 6864 6875 0
c (((aux1709 + aux1712 + aux1713)<=1)=tv=SATLiteral(8235))
-8235 6902 0
-8235 6896 6901 0
-8235 6897 0
-8235 6899 0
-8235 6887 6901 0
-8235 6887 6896 0
-8235 6887 6897 0
-8235 6887 6899 0
-8235 6888 0
-8235 6888 6896 0
-8235 6888 6897 0
-8235 6888 6899 0
8235 -6888 -6896 -6901 0
8235 -6887 -6897 -6901 0
8235 -6887 -6896 -6902 0
c ((1<=(aux1709 + aux1712 + aux1713))=tv=SATLiteral(8236))
-8236 -6887 -6896 -6901 0
8236 6901 0
8236 6896 0
8236 6897 0
8236 6899 0
8236 6887 0
8236 6887 6896 0
8236 6887 6897 0
8236 6887 6899 0
8236 6888 0
8236 6888 6896 0
8236 6888 6897 0
8236 6888 6899 0
c (((aux1715 + aux1718 + aux1719)<=1)=tv=SATLiteral(8237))
-8237 6926 0
-8237 6920 6925 0
-8237 6921 0
-8237 6923 0
-8237 6911 6925 0
-8237 6911 6920 0
-8237 6911 6921 0
-8237 6911 6923 0
-8237 6912 0
-8237 6912 6920 0
-8237 6912 6921 0
-8237 6912 6923 0
8237 -6912 -6920 -6925 0
8237 -6911 -6921 -6925 0
8237 -6911 -6920 -6926 0
c ((1<=(aux1715 + aux1718 + aux1719))=tv=SATLiteral(8238))
-8238 -6911 -6920 -6925 0
8238 6925 0
8238 6920 0
8238 6921 0
8238 6923 0
8238 6911 0
8238 6911 6920 0
8238 6911 6921 0
8238 6911 6923 0
8238 6912 0
8238 6912 6920 0
8238 6912 6921 0
8238 6912 6923 0
c (((aux1721 + aux1724 + aux1725)<=1)=tv=SATLiteral(8239))
-8239 6950 0
-8239 6944 6949 0
-8239 6945 0
-8239 6947 0
-8239 6935 6949 0
-8239 6935 6944 0
-8239 6935 6945 0
-8239 6935 6947 0
-8239 6936 0
-8239 6936 6944 0
-8239 6936 6945 0
-8239 6936 6947 0
8239 -6936 -6944 -6949 0
8239 -6935 -6945 -6949 0
8239 -6935 -6944 -6950 0
c ((1<=(aux1721 + aux1724 + aux1725))=tv=SATLiteral(8240))
-8240 -6935 -6944 -6949 0
8240 6949 0
8240 6944 0
8240 6945 0
8240 6947 0
8240 6935 0
8240 6935 6944 0
8240 6935 6945 0
8240 6935 6947 0
8240 6936 0
8240 6936 6944 0
8240 6936 6945 0
8240 6936 6947 0
c (((aux1727 + aux1730 + aux1731)<=1)=tv=SATLiteral(8241))
-8241 6974 0
-8241 6968 6973 0
-8241 6969 0
-8241 6971 0
-8241 6959 6973 0
-8241 6959 6968 0
-8241 6959 6969 0
-8241 6959 6971 0
-8241 6960 0
-8241 6960 6968 0
-8241 6960 6969 0
-8241 6960 6971 0
8241 -6960 -6968 -6973 0
8241 -6959 -6969 -6973 0
8241 -6959 -6968 -6974 0
c ((1<=(aux1727 + aux1730 + aux1731))=tv=SATLiteral(8242))
-8242 -6959 -6968 -6973 0
8242 6973 0
8242 6968 0
8242 6969 0
8242 6971 0
8242 6959 0
8242 6959 6968 0
8242 6959 6969 0
8242 6959 6971 0
8242 6960 0
8242 6960 6968 0
8242 6960 6969 0
8242 6960 6971 0
c (((aux1733 + aux1736 + aux1737)<=1)=tv=SATLiteral(8243))
-8243 6998 0
-8243 6992 6997 0
-8243 6993 0
-8243 6995 0
-8243 6983 6997 0
-8243 6983 6992 0
-8243 6983 6993 0
-8243 6983 6995 0
-8243 6984 0
-8243 6984 6992 0
-8243 6984 6993 0
-8243 6984 6995 0
8243 -6984 -6992 -6997 0
8243 -6983 -6993 -6997 0
8243 -6983 -6992 -6998 0
c ((1<=(aux1733 + aux1736 + aux1737))=tv=SATLiteral(8244))
-8244 -6983 -6992 -6997 0
8244 6997 0
8244 6992 0
8244 6993 0
8244 6995 0
8244 6983 0
8244 6983 6992 0
8244 6983 6993 0
8244 6983 6995 0
8244 6984 0
8244 6984 6992 0
8244 6984 6993 0
8244 6984 6995 0
c (((aux1739 + aux1742 + aux1743)<=1)=tv=SATLiteral(8245))
-8245 7022 0
-8245 7016 7021 0
-8245 7017 0
-8245 7019 0
-8245 7007 7021 0
-8245 7007 7016 0
-8245 7007 7017 0
-8245 7007 7019 0
-8245 7008 0
-8245 7008 7016 0
-8245 7008 7017 0
-8245 7008 7019 0
8245 -7008 -7016 -7021 0
8245 -7007 -7017 -7021 0
8245 -7007 -7016 -7022 0
c ((1<=(aux1739 + aux1742 + aux1743))=tv=SATLiteral(8246))
-8246 -7007 -7016 -7021 0
8246 7021 0
8246 7016 0
8246 7017 0
8246 7019 0
8246 7007 0
8246 7007 7016 0
8246 7007 7017 0
8246 7007 7019 0
8246 7008 0
8246 7008 7016 0
8246 7008 7017 0
8246 7008 7019 0
c (((aux1745 + aux1748 + aux1749)<=1)=tv=SATLiteral(8247))
-8247 7046 0
-8247 7040 7045 0
-8247 7041 0
-8247 7043 0
-8247 7031 7045 0
-8247 7031 7040 0
-8247 7031 7041 0
-8247 7031 7043 0
-8247 7032 0
-8247 7032 7040 0
-8247 7032 7041 0
-8247 7032 7043 0
8247 -7032 -7040 -7045 0
8247 -7031 -7041 -7045 0
8247 -7031 -7040 -7046 0
c ((1<=(aux1745 + aux1748 + aux1749))=tv=SATLiteral(8248))
-8248 -7031 -7040 -7045 0
8248 7045 0
8248 7040 0
8248 7041 0
8248 7043 0
8248 7031 0
8248 7031 7040 0
8248 7031 7041 0
8248 7031 7043 0
8248 7032 0
8248 7032 7040 0
8248 7032 7041 0
8248 7032 7043 0
c (((aux1751 + aux1754 + aux1755)<=1)=tv=SATLiteral(8249))
-8249 7070 0
-8249 7064 7069 0
-8249 7065 0
-8249 7067 0
-8249 7055 7069 0
-8249 7055 7064 0
-8249 7055 7065 0
-8249 7055 7067 0
-8249 7056 0
-8249 7056 7064 0
-8249 7056 7065 0
-8249 7056 7067 0
8249 -7056 -7064 -7069 0
8249 -7055 -7065 -7069 0
8249 -7055 -7064 -7070 0
c ((1<=(aux1751 + aux1754 + aux1755))=tv=SATLiteral(8250))
-8250 -7055 -7064 -7069 0
8250 7069 0
8250 7064 0
8250 7065 0
8250 7067 0
8250 7055 0
8250 7055 7064 0
8250 7055 7065 0
8250 7055 7067 0
8250 7056 0
8250 7056 7064 0
8250 7056 7065 0
8250 7056 7067 0
c (((aux1757 + aux1760 + aux1761)<=1)=tv=SATLiteral(8251))
-8251 7094 0
-8251 7088 7093 0
-8251 7089 0
-8251 7091 0
-8251 7079 7093 0
-8251 7079 7088 0
-8251 7079 7089 0
-8251 7079 7091 0
-8251 7080 0
-8251 7080 7088 0
-8251 7080 7089 0
-8251 7080 7091 0
8251 -7080 -7088 -7093 0
8251 -7079 -7089 -7093 0
8251 -7079 -7088 -7094 0
c ((1<=(aux1757 + aux1760 + aux1761))=tv=SATLiteral(8252))
-8252 -7079 -7088 -7093 0
8252 7093 0
8252 7088 0
8252 7089 0
8252 7091 0
8252 7079 0
8252 7079 7088 0
8252 7079 7089 0
8252 7079 7091 0
8252 7080 0
8252 7080 7088 0
8252 7080 7089 0
8252 7080 7091 0
c (((aux1763 + aux1766 + aux1767)<=1)=tv=SATLiteral(8253))
-8253 7118 0
-8253 7112 7117 0
-8253 7113 0
-8253 7115 0
-8253 7103 7117 0
-8253 7103 7112 0
-8253 7103 7113 0
-8253 7103 7115 0
-8253 7104 0
-8253 7104 7112 0
-8253 7104 7113 0
-8253 7104 7115 0
8253 -7104 -7112 -7117 0
8253 -7103 -7113 -7117 0
8253 -7103 -7112 -7118 0
c ((1<=(aux1763 + aux1766 + aux1767))=tv=SATLiteral(8254))
-8254 -7103 -7112 -7117 0
8254 7117 0
8254 7112 0
8254 7113 0
8254 7115 0
8254 7103 0
8254 7103 7112 0
8254 7103 7113 0
8254 7103 7115 0
8254 7104 0
8254 7104 7112 0
8254 7104 7113 0
8254 7104 7115 0
c (((aux1769 + aux1772 + aux1773)<=1)=tv=SATLiteral(8255))
-8255 7142 0
-8255 7136 7141 0
-8255 7137 0
-8255 7139 0
-8255 7127 7141 0
-8255 7127 7136 0
-8255 7127 7137 0
-8255 7127 7139 0
-8255 7128 0
-8255 7128 7136 0
-8255 7128 7137 0
-8255 7128 7139 0
8255 -7128 -7136 -7141 0
8255 -7127 -7137 -7141 0
8255 -7127 -7136 -7142 0
c ((1<=(aux1769 + aux1772 + aux1773))=tv=SATLiteral(8256))
-8256 -7127 -7136 -7141 0
8256 7141 0
8256 7136 0
8256 7137 0
8256 7139 0
8256 7127 0
8256 7127 7136 0
8256 7127 7137 0
8256 7127 7139 0
8256 7128 0
8256 7128 7136 0
8256 7128 7137 0
8256 7128 7139 0
c (((aux1775 + aux1778 + aux1779)<=1)=tv=SATLiteral(8257))
-8257 7166 0
-8257 7160 7165 0
-8257 7161 0
-8257 7163 0
-8257 7151 7165 0
-8257 7151 7160 0
-8257 7151 7161 0
-8257 7151 7163 0
-8257 7152 0
-8257 7152 7160 0
-8257 7152 7161 0
-8257 7152 7163 0
8257 -7152 -7160 -7165 0
8257 -7151 -7161 -7165 0
8257 -7151 -7160 -7166 0
c ((1<=(aux1775 + aux1778 + aux1779))=tv=SATLiteral(8258))
-8258 -7151 -7160 -7165 0
8258 7165 0
8258 7160 0
8258 7161 0
8258 7163 0
8258 7151 0
8258 7151 7160 0
8258 7151 7161 0
8258 7151 7163 0
8258 7152 0
8258 7152 7160 0
8258 7152 7161 0
8258 7152 7163 0
c (((aux1781 + aux1784 + aux1785)<=1)=tv=SATLiteral(8259))
-8259 7190 0
-8259 7184 7189 0
-8259 7185 0
-8259 7187 0
-8259 7175 7189 0
-8259 7175 7184 0
-8259 7175 7185 0
-8259 7175 7187 0
-8259 7176 0
-8259 7176 7184 0
-8259 7176 7185 0
-8259 7176 7187 0
8259 -7176 -7184 -7189 0
8259 -7175 -7185 -7189 0
8259 -7175 -7184 -7190 0
c ((1<=(aux1781 + aux1784 + aux1785))=tv=SATLiteral(8260))
-8260 -7175 -7184 -7189 0
8260 7189 0
8260 7184 0
8260 7185 0
8260 7187 0
8260 7175 0
8260 7175 7184 0
8260 7175 7185 0
8260 7175 7187 0
8260 7176 0
8260 7176 7184 0
8260 7176 7185 0
8260 7176 7187 0
c (((aux1787 + aux1790 + aux1791)<=1)=tv=SATLiteral(8261))
-8261 7214 0
-8261 7208 7213 0
-8261 7209 0
-8261 7211 0
-8261 7199 7213 0
-8261 7199 7208 0
-8261 7199 7209 0
-8261 7199 7211 0
-8261 7200 0
-8261 7200 7208 0
-8261 7200 7209 0
-8261 7200 7211 0
8261 -7200 -7208 -7213 0
8261 -7199 -7209 -7213 0
8261 -7199 -7208 -7214 0
c ((1<=(aux1787 + aux1790 + aux1791))=tv=SATLiteral(8262))
-8262 -7199 -7208 -7213 0
8262 7213 0
8262 7208 0
8262 7209 0
8262 7211 0
8262 7199 0
8262 7199 7208 0
8262 7199 7209 0
8262 7199 7211 0
8262 7200 0
8262 7200 7208 0
8262 7200 7209 0
8262 7200 7211 0
c (((aux1793 + aux1796 + aux1797)<=1)=tv=SATLiteral(8263))
-8263 7238 0
-8263 7232 7237 0
-8263 7233 0
-8263 7235 0
-8263 7223 7237 0
-8263 7223 7232 0
-8263 7223 7233 0
-8263 7223 7235 0
-8263 7224 0
-8263 7224 7232 0
-8263 7224 7233 0
-8263 7224 7235 0
8263 -7224 -7232 -7237 0
8263 -7223 -7233 -7237 0
8263 -7223 -7232 -7238 0
c ((1<=(aux1793 + aux1796 + aux1797))=tv=SATLiteral(8264))
-8264 -7223 -7232 -7237 0
8264 7237 0
8264 7232 0
8264 7233 0
8264 7235 0
8264 7223 0
8264 7223 7232 0
8264 7223 7233 0
8264 7223 7235 0
8264 7224 0
8264 7224 7232 0
8264 7224 7233 0
8264 7224 7235 0
c (((aux1799 + aux1802 + aux1803)<=1)=tv=SATLiteral(8265))
-8265 7262 0
-8265 7256 7261 0
-8265 7257 0
-8265 7259 0
-8265 7247 7261 0
-8265 7247 7256 0
-8265 7247 7257 0
-8265 7247 7259 0
-8265 7248 0
-8265 7248 7256 0
-8265 7248 7257 0
-8265 7248 7259 0
8265 -7248 -7256 -7261 0
8265 -7247 -7257 -7261 0
8265 -7247 -7256 -7262 0
c ((1<=(aux1799 + aux1802 + aux1803))=tv=SATLiteral(8266))
-8266 -7247 -7256 -7261 0
8266 7261 0
8266 7256 0
8266 7257 0
8266 7259 0
8266 7247 0
8266 7247 7256 0
8266 7247 7257 0
8266 7247 7259 0
8266 7248 0
8266 7248 7256 0
8266 7248 7257 0
8266 7248 7259 0
c (((aux1805 + aux1808 + aux1809)<=1)=tv=SATLiteral(8267))
-8267 7286 0
-8267 7280 7285 0
-8267 7281 0
-8267 7283 0
-8267 7271 7285 0
-8267 7271 7280 0
-8267 7271 7281 0
-8267 7271 7283 0
-8267 7272 0
-8267 7272 7280 0
-8267 7272 7281 0
-8267 7272 7283 0
8267 -7272 -7280 -7285 0
8267 -7271 -7281 -7285 0
8267 -7271 -7280 -7286 0
c ((1<=(aux1805 + aux1808 + aux1809))=tv=SATLiteral(8268))
-8268 -7271 -7280 -7285 0
8268 7285 0
8268 7280 0
8268 7281 0
8268 7283 0
8268 7271 0
8268 7271 7280 0
8268 7271 7281 0
8268 7271 7283 0
8268 7272 0
8268 7272 7280 0
8268 7272 7281 0
8268 7272 7283 0
c (((aux1811 + aux1814 + aux1815)<=1)=tv=SATLiteral(8269))
-8269 7310 0
-8269 7304 7309 0
-8269 7305 0
-8269 7307 0
-8269 7295 7309 0
-8269 7295 7304 0
-8269 7295 7305 0
-8269 7295 7307 0
-8269 7296 0
-8269 7296 7304 0
-8269 7296 7305 0
-8269 7296 7307 0
8269 -7296 -7304 -7309 0
8269 -7295 -7305 -7309 0
8269 -7295 -7304 -7310 0
c ((1<=(aux1811 + aux1814 + aux1815))=tv=SATLiteral(8270))
-8270 -7295 -7304 -7309 0
8270 7309 0
8270 7304 0
8270 7305 0
8270 7307 0
8270 7295 0
8270 7295 7304 0
8270 7295 7305 0
8270 7295 7307 0
8270 7296 0
8270 7296 7304 0
8270 7296 7305 0
8270 7296 7307 0
c (((aux1817 + aux1820 + aux1821)<=1)=tv=SATLiteral(8271))
-8271 7334 0
-8271 7328 7333 0
-8271 7329 0
-8271 7331 0
-8271 7319 7333 0
-8271 7319 7328 0
-8271 7319 7329 0
-8271 7319 7331 0
-8271 7320 0
-8271 7320 7328 0
-8271 7320 7329 0
-8271 7320 7331 0
8271 -7320 -7328 -7333 0
8271 -7319 -7329 -7333 0
8271 -7319 -7328 -7334 0
c ((1<=(aux1817 + aux1820 + aux1821))=tv=SATLiteral(8272))
-8272 -7319 -7328 -7333 0
8272 7333 0
8272 7328 0
8272 7329 0
8272 7331 0
8272 7319 0
8272 7319 7328 0
8272 7319 7329 0
8272 7319 7331 0
8272 7320 0
8272 7320 7328 0
8272 7320 7329 0
8272 7320 7331 0
c (((aux1823 + aux1826 + aux1827)<=1)=tv=SATLiteral(8273))
-8273 7358 0
-8273 7352 7357 0
-8273 7353 0
-8273 7355 0
-8273 7343 7357 0
-8273 7343 7352 0
-8273 7343 7353 0
-8273 7343 7355 0
-8273 7344 0
-8273 7344 7352 0
-8273 7344 7353 0
-8273 7344 7355 0
8273 -7344 -7352 -7357 0
8273 -7343 -7353 -7357 0
8273 -7343 -7352 -7358 0
c ((1<=(aux1823 + aux1826 + aux1827))=tv=SATLiteral(8274))
-8274 -7343 -7352 -7357 0
8274 7357 0
8274 7352 0
8274 7353 0
8274 7355 0
8274 7343 0
8274 7343 7352 0
8274 7343 7353 0
8274 7343 7355 0
8274 7344 0
8274 7344 7352 0
8274 7344 7353 0
8274 7344 7355 0
c (((aux1829 + aux1832 + aux1833)<=1)=tv=SATLiteral(8275))
-8275 7382 0
-8275 7376 7381 0
-8275 7377 0
-8275 7379 0
-8275 7367 7381 0
-8275 7367 7376 0
-8275 7367 7377 0
-8275 7367 7379 0
-8275 7368 0
-8275 7368 7376 0
-8275 7368 7377 0
-8275 7368 7379 0
8275 -7368 -7376 -7381 0
8275 -7367 -7377 -7381 0
8275 -7367 -7376 -7382 0
c ((1<=(aux1829 + aux1832 + aux1833))=tv=SATLiteral(8276))
-8276 -7367 -7376 -7381 0
8276 7381 0
8276 7376 0
8276 7377 0
8276 7379 0
8276 7367 0
8276 7367 7376 0
8276 7367 7377 0
8276 7367 7379 0
8276 7368 0
8276 7368 7376 0
8276 7368 7377 0
8276 7368 7379 0
c (((aux1835 + aux1838 + aux1839)<=1)=tv=SATLiteral(8277))
-8277 7406 0
-8277 7400 7405 0
-8277 7401 0
-8277 7403 0
-8277 7391 7405 0
-8277 7391 7400 0
-8277 7391 7401 0
-8277 7391 7403 0
-8277 7392 0
-8277 7392 7400 0
-8277 7392 7401 0
-8277 7392 7403 0
8277 -7392 -7400 -7405 0
8277 -7391 -7401 -7405 0
8277 -7391 -7400 -7406 0
c ((1<=(aux1835 + aux1838 + aux1839))=tv=SATLiteral(8278))
-8278 -7391 -7400 -7405 0
8278 7405 0
8278 7400 0
8278 7401 0
8278 7403 0
8278 7391 0
8278 7391 7400 0
8278 7391 7401 0
8278 7391 7403 0
8278 7392 0
8278 7392 7400 0
8278 7392 7401 0
8278 7392 7403 0
c (((aux1841 + aux1844 + aux1845)<=1)=tv=SATLiteral(8279))
-8279 7430 0
-8279 7424 7429 0
-8279 7425 0
-8279 7427 0
-8279 7415 7429 0
-8279 7415 7424 0
-8279 7415 7425 0
-8279 7415 7427 0
-8279 7416 0
-8279 7416 7424 0
-8279 7416 7425 0
-8279 7416 7427 0
8279 -7416 -7424 -7429 0
8279 -7415 -7425 -7429 0
8279 -7415 -7424 -7430 0
c ((1<=(aux1841 + aux1844 + aux1845))=tv=SATLiteral(8280))
-8280 -7415 -7424 -7429 0
8280 7429 0
8280 7424 0
8280 7425 0
8280 7427 0
8280 7415 0
8280 7415 7424 0
8280 7415 7425 0
8280 7415 7427 0
8280 7416 0
8280 7416 7424 0
8280 7416 7425 0
8280 7416 7427 0
c (((aux1847 + aux1850 + aux1851)<=1)=tv=SATLiteral(8281))
-8281 7454 0
-8281 7448 7453 0
-8281 7449 0
-8281 7451 0
-8281 7439 7453 0
-8281 7439 7448 0
-8281 7439 7449 0
-8281 7439 7451 0
-8281 7440 0
-8281 7440 7448 0
-8281 7440 7449 0
-8281 7440 7451 0
8281 -7440 -7448 -7453 0
8281 -7439 -7449 -7453 0
8281 -7439 -7448 -7454 0
c ((1<=(aux1847 + aux1850 + aux1851))=tv=SATLiteral(8282))
-8282 -7439 -7448 -7453 0
8282 7453 0
8282 7448 0
8282 7449 0
8282 7451 0
8282 7439 0
8282 7439 7448 0
8282 7439 7449 0
8282 7439 7451 0
8282 7440 0
8282 7440 7448 0
8282 7440 7449 0
8282 7440 7451 0
c (((aux1853 + aux1856 + aux1857)<=1)=tv=SATLiteral(8283))
-8283 7478 0
-8283 7472 7477 0
-8283 7473 0
-8283 7475 0
-8283 7463 7477 0
-8283 7463 7472 0
-8283 7463 7473 0
-8283 7463 7475 0
-8283 7464 0
-8283 7464 7472 0
-8283 7464 7473 0
-8283 7464 7475 0
8283 -7464 -7472 -7477 0
8283 -7463 -7473 -7477 0
8283 -7463 -7472 -7478 0
c ((1<=(aux1853 + aux1856 + aux1857))=tv=SATLiteral(8284))
-8284 -7463 -7472 -7477 0
8284 7477 0
8284 7472 0
8284 7473 0
8284 7475 0
8284 7463 0
8284 7463 7472 0
8284 7463 7473 0
8284 7463 7475 0
8284 7464 0
8284 7464 7472 0
8284 7464 7473 0
8284 7464 7475 0
c (((aux1859 + aux1862 + aux1863)<=1)=tv=SATLiteral(8285))
-8285 7502 0
-8285 7496 7501 0
-8285 7497 0
-8285 7499 0
-8285 7487 7501 0
-8285 7487 7496 0
-8285 7487 7497 0
-8285 7487 7499 0
-8285 7488 0
-8285 7488 7496 0
-8285 7488 7497 0
-8285 7488 7499 0
8285 -7488 -7496 -7501 0
8285 -7487 -7497 -7501 0
8285 -7487 -7496 -7502 0
c ((1<=(aux1859 + aux1862 + aux1863))=tv=SATLiteral(8286))
-8286 -7487 -7496 -7501 0
8286 7501 0
8286 7496 0
8286 7497 0
8286 7499 0
8286 7487 0
8286 7487 7496 0
8286 7487 7497 0
8286 7487 7499 0
8286 7488 0
8286 7488 7496 0
8286 7488 7497 0
8286 7488 7499 0
c (((aux1865 + aux1868 + aux1869)<=1)=tv=SATLiteral(8287))
-8287 7526 0
-8287 7520 7525 0
-8287 7521 0
-8287 7523 0
-8287 7511 7525 0
-8287 7511 7520 0
-8287 7511 7521 0
-8287 7511 7523 0
-8287 7512 0
-8287 7512 7520 0
-8287 7512 7521 0
-8287 7512 7523 0
8287 -7512 -7520 -7525 0
8287 -7511 -7521 -7525 0
8287 -7511 -7520 -7526 0
c ((1<=(aux1865 + aux1868 + aux1869))=tv=SATLiteral(8288))
-8288 -7511 -7520 -7525 0
8288 7525 0
8288 7520 0
8288 7521 0
8288 7523 0
8288 7511 0
8288 7511 7520 0
8288 7511 7521 0
8288 7511 7523 0
8288 7512 0
8288 7512 7520 0
8288 7512 7521 0
8288 7512 7523 0
c (((aux1871 + aux1874 + aux1875)<=1)=tv=SATLiteral(8289))
-8289 7550 0
-8289 7544 7549 0
-8289 7545 0
-8289 7547 0
-8289 7535 7549 0
-8289 7535 7544 0
-8289 7535 7545 0
-8289 7535 7547 0
-8289 7536 0
-8289 7536 7544 0
-8289 7536 7545 0
-8289 7536 7547 0
8289 -7536 -7544 -7549 0
8289 -7535 -7545 -7549 0
8289 -7535 -7544 -7550 0
c ((1<=(aux1871 + aux1874 + aux1875))=tv=SATLiteral(8290))
-8290 -7535 -7544 -7549 0
8290 7549 0
8290 7544 0
8290 7545 0
8290 7547 0
8290 7535 0
8290 7535 7544 0
8290 7535 7545 0
8290 7535 7547 0
8290 7536 0
8290 7536 7544 0
8290 7536 7545 0
8290 7536 7547 0
c (((aux1877 + aux1880 + aux1881)<=1)=tv=SATLiteral(8291))
-8291 7574 0
-8291 7568 7573 0
-8291 7569 0
-8291 7571 0
-8291 7559 7573 0
-8291 7559 7568 0
-8291 7559 7569 0
-8291 7559 7571 0
-8291 7560 0
-8291 7560 7568 0
-8291 7560 7569 0
-8291 7560 7571 0
8291 -7560 -7568 -7573 0
8291 -7559 -7569 -7573 0
8291 -7559 -7568 -7574 0
c ((1<=(aux1877 + aux1880 + aux1881))=tv=SATLiteral(8292))
-8292 -7559 -7568 -7573 0
8292 7573 0
8292 7568 0
8292 7569 0
8292 7571 0
8292 7559 0
8292 7559 7568 0
8292 7559 7569 0
8292 7559 7571 0
8292 7560 0
8292 7560 7568 0
8292 7560 7569 0
8292 7560 7571 0
c (((aux1883 + aux1886 + aux1887)<=1)=tv=SATLiteral(8293))
-8293 7598 0
-8293 7592 7597 0
-8293 7593 0
-8293 7595 0
-8293 7583 7597 0
-8293 7583 7592 0
-8293 7583 7593 0
-8293 7583 7595 0
-8293 7584 0
-8293 7584 7592 0
-8293 7584 7593 0
-8293 7584 7595 0
8293 -7584 -7592 -7597 0
8293 -7583 -7593 -7597 0
8293 -7583 -7592 -7598 0
c ((1<=(aux1883 + aux1886 + aux1887))=tv=SATLiteral(8294))
-8294 -7583 -7592 -7597 0
8294 7597 0
8294 7592 0
8294 7593 0
8294 7595 0
8294 7583 0
8294 7583 7592 0
8294 7583 7593 0
8294 7583 7595 0
8294 7584 0
8294 7584 7592 0
8294 7584 7593 0
8294 7584 7595 0
c (((aux1889 + aux1892 + aux1893)<=1)=tv=SATLiteral(8295))
-8295 7622 0
-8295 7616 7621 0
-8295 7617 0
-8295 7619 0
-8295 7607 7621 0
-8295 7607 7616 0
-8295 7607 7617 0
-8295 7607 7619 0
-8295 7608 0
-8295 7608 7616 0
-8295 7608 7617 0
-8295 7608 7619 0
8295 -7608 -7616 -7621 0
8295 -7607 -7617 -7621 0
8295 -7607 -7616 -7622 0
c ((1<=(aux1889 + aux1892 + aux1893))=tv=SATLiteral(8296))
-8296 -7607 -7616 -7621 0
8296 7621 0
8296 7616 0
8296 7617 0
8296 7619 0
8296 7607 0
8296 7607 7616 0
8296 7607 7617 0
8296 7607 7619 0
8296 7608 0
8296 7608 7616 0
8296 7608 7617 0
8296 7608 7619 0
c (((aux1895 + aux1898 + aux1899)<=1)=tv=SATLiteral(8297))
-8297 7646 0
-8297 7640 7645 0
-8297 7641 0
-8297 7643 0
-8297 7631 7645 0
-8297 7631 7640 0
-8297 7631 7641 0
-8297 7631 7643 0
-8297 7632 0
-8297 7632 7640 0
-8297 7632 7641 0
-8297 7632 7643 0
8297 -7632 -7640 -7645 0
8297 -7631 -7641 -7645 0
8297 -7631 -7640 -7646 0
c ((1<=(aux1895 + aux1898 + aux1899))=tv=SATLiteral(8298))
-8298 -7631 -7640 -7645 0
8298 7645 0
8298 7640 0
8298 7641 0
8298 7643 0
8298 7631 0
8298 7631 7640 0
8298 7631 7641 0
8298 7631 7643 0
8298 7632 0
8298 7632 7640 0
8298 7632 7641 0
8298 7632 7643 0
c (((aux1901 + aux1904 + aux1905)<=1)=tv=SATLiteral(8299))
-8299 7670 0
-8299 7664 7669 0
-8299 7665 0
-8299 7667 0
-8299 7655 7669 0
-8299 7655 7664 0
-8299 7655 7665 0
-8299 7655 7667 0
-8299 7656 0
-8299 7656 7664 0
-8299 7656 7665 0
-8299 7656 7667 0
8299 -7656 -7664 -7669 0
8299 -7655 -7665 -7669 0
8299 -7655 -7664 -7670 0
c ((1<=(aux1901 + aux1904 + aux1905))=tv=SATLiteral(8300))
-8300 -7655 -7664 -7669 0
8300 7669 0
8300 7664 0
8300 7665 0
8300 7667 0
8300 7655 0
8300 7655 7664 0
8300 7655 7665 0
8300 7655 7667 0
8300 7656 0
8300 7656 7664 0
8300 7656 7665 0
8300 7656 7667 0
c ((SATLiteral(7757) /\ SATLiteral(7758))=tv=SATLiteral(1306))
1306 -7757 -7758 0
7757 -1306 0
7758 -1306 0
c ((SATLiteral(7759) /\ SATLiteral(7760))=tv=SATLiteral(1307))
1307 -7759 -7760 0
7759 -1307 0
7760 -1307 0
c ((SATLiteral(7761) /\ SATLiteral(7762))=tv=SATLiteral(1308))
1308 -7761 -7762 0
7761 -1308 0
7762 -1308 0
c ((SATLiteral(7763) /\ SATLiteral(7764))=tv=SATLiteral(1309))
1309 -7763 -7764 0
7763 -1309 0
7764 -1309 0
c ((SATLiteral(7765) /\ SATLiteral(7766))=tv=SATLiteral(1310))
1310 -7765 -7766 0
7765 -1310 0
7766 -1310 0
c ((SATLiteral(7767) /\ SATLiteral(7768))=tv=SATLiteral(1311))
1311 -7767 -7768 0
7767 -1311 0
7768 -1311 0
c ((SATLiteral(7769) /\ SATLiteral(7770))=tv=SATLiteral(1312))
1312 -7769 -7770 0
7769 -1312 0
7770 -1312 0
c ((SATLiteral(7771) /\ SATLiteral(7772))=tv=SATLiteral(1313))
1313 -7771 -7772 0
7771 -1313 0
7772 -1313 0
c ((SATLiteral(7773) /\ SATLiteral(7774))=tv=SATLiteral(1314))
1314 -7773 -7774 0
7773 -1314 0
7774 -1314 0
c ((SATLiteral(7775) /\ SATLiteral(7776))=tv=SATLiteral(1315))
1315 -7775 -7776 0
7775 -1315 0
7776 -1315 0
c ((SATLiteral(7777) /\ SATLiteral(7778))=tv=SATLiteral(1316))
1316 -7777 -7778 0
7777 -1316 0
7778 -1316 0
c ((SATLiteral(7779) /\ SATLiteral(7780))=tv=SATLiteral(1317))
1317 -7779 -7780 0
7779 -1317 0
7780 -1317 0
c ((SATLiteral(7781) /\ SATLiteral(7782))=tv=SATLiteral(1318))
1318 -7781 -7782 0
7781 -1318 0
7782 -1318 0
c ((SATLiteral(7783) /\ SATLiteral(7784))=tv=SATLiteral(1319))
1319 -7783 -7784 0
7783 -1319 0
7784 -1319 0
c ((SATLiteral(7785) /\ SATLiteral(7786))=tv=SATLiteral(1320))
1320 -7785 -7786 0
7785 -1320 0
7786 -1320 0
c ((SATLiteral(7787) /\ SATLiteral(7788))=tv=SATLiteral(1321))
1321 -7787 -7788 0
7787 -1321 0
7788 -1321 0
c ((SATLiteral(7789) /\ SATLiteral(7790))=tv=SATLiteral(1322))
1322 -7789 -7790 0
7789 -1322 0
7790 -1322 0
c ((SATLiteral(7791) /\ SATLiteral(7792))=tv=SATLiteral(1323))
1323 -7791 -7792 0
7791 -1323 0
7792 -1323 0
c ((SATLiteral(7793) /\ SATLiteral(7794))=tv=SATLiteral(1324))
1324 -7793 -7794 0
7793 -1324 0
7794 -1324 0
c ((SATLiteral(7795) /\ SATLiteral(7796))=tv=SATLiteral(1325))
1325 -7795 -7796 0
7795 -1325 0
7796 -1325 0
c ((SATLiteral(7797) /\ SATLiteral(7798))=tv=SATLiteral(1326))
1326 -7797 -7798 0
7797 -1326 0
7798 -1326 0
c ((SATLiteral(7799) /\ SATLiteral(7800))=tv=SATLiteral(1327))
1327 -7799 -7800 0
7799 -1327 0
7800 -1327 0
c ((SATLiteral(7801) /\ SATLiteral(7802))=tv=SATLiteral(1328))
1328 -7801 -7802 0
7801 -1328 0
7802 -1328 0
c ((SATLiteral(7803) /\ SATLiteral(7804))=tv=SATLiteral(1329))
1329 -7803 -7804 0
7803 -1329 0
7804 -1329 0
c ((SATLiteral(7805) /\ SATLiteral(7806))=tv=SATLiteral(1330))
1330 -7805 -7806 0
7805 -1330 0
7806 -1330 0
c ((SATLiteral(7807) /\ SATLiteral(7808))=tv=SATLiteral(1331))
1331 -7807 -7808 0
7807 -1331 0
7808 -1331 0
c ((SATLiteral(7809) /\ SATLiteral(7810))=tv=SATLiteral(1332))
1332 -7809 -7810 0
7809 -1332 0
7810 -1332 0
c ((SATLiteral(7811) /\ SATLiteral(7812))=tv=SATLiteral(1333))
1333 -7811 -7812 0
7811 -1333 0
7812 -1333 0
c ((SATLiteral(7813) /\ SATLiteral(7814))=tv=SATLiteral(1334))
1334 -7813 -7814 0
7813 -1334 0
7814 -1334 0
c ((x_00001_00002 != x_00001_00003)=tv=SATLiteral(1335))
-17 32 1335 0
-19 34 1335 0
-21 36 1335 0
-23 38 1335 0
-25 40 1335 0
-27 42 1335 0
-29 44 1335 0
-31 46 1335 0
30 -45 1335 0
-32 17 1335 0
-34 19 1335 0
-36 21 1335 0
-38 23 1335 0
-40 25 1335 0
-42 27 1335 0
-44 29 1335 0
-46 31 1335 0
45 -30 1335 0
-17 -32 -1335 0
-19 -34 -1335 0
-21 -36 -1335 0
-23 -38 -1335 0
-25 -40 -1335 0
-27 -42 -1335 0
-29 -44 -1335 0
-31 -46 -1335 0
30 45 -1335 0
c ((x_00002_00002 != x_00002_00003)=tv=SATLiteral(1336))
-152 167 1336 0
-154 169 1336 0
-156 171 1336 0
-158 173 1336 0
-160 175 1336 0
-162 177 1336 0
-164 179 1336 0
-166 181 1336 0
165 -180 1336 0
-167 152 1336 0
-169 154 1336 0
-171 156 1336 0
-173 158 1336 0
-175 160 1336 0
-177 162 1336 0
-179 164 1336 0
-181 166 1336 0
180 -165 1336 0
-152 -167 -1336 0
-154 -169 -1336 0
-156 -171 -1336 0
-158 -173 -1336 0
-160 -175 -1336 0
-162 -177 -1336 0
-164 -179 -1336 0
-166 -181 -1336 0
165 180 -1336 0
c ((x_00002_00004 != x_00002_00005)=tv=SATLiteral(1337))
-182 197 1337 0
-184 199 1337 0
-186 201 1337 0
-188 203 1337 0
-190 205 1337 0
-192 207 1337 0
-194 209 1337 0
-196 211 1337 0
195 -210 1337 0
-197 182 1337 0
-199 184 1337 0
-201 186 1337 0
-203 188 1337 0
-205 190 1337 0
-207 192 1337 0
-209 194 1337 0
-211 196 1337 0
210 -195 1337 0
-182 -197 -1337 0
-184 -199 -1337 0
-186 -201 -1337 0
-188 -203 -1337 0
-190 -205 -1337 0
-192 -207 -1337 0
-194 -209 -1337 0
-196 -211 -1337 0
195 210 -1337 0
c ((x_00003_00005 != x_00003_00006)=tv=SATLiteral(1338))
-332 347 1338 0
-334 349 1338 0
-336 351 1338 0
-338 353 1338 0
-340 355 1338 0
-342 357 1338 0
-344 359 1338 0
-346 361 1338 0
345 -360 1338 0
-347 332 1338 0
-349 334 1338 0
-351 336 1338 0
-353 338 1338 0
-355 340 1338 0
-357 342 1338 0
-359 344 1338 0
-361 346 1338 0
360 -345 1338 0
-332 -347 -1338 0
-334 -349 -1338 0
-336 -351 -1338 0
-338 -353 -1338 0
-340 -355 -1338 0
-342 -357 -1338 0
-344 -359 -1338 0
-346 -361 -1338 0
345 360 -1338 0
c ((x_00003_00007 != x_00003_00008)=tv=SATLiteral(1339))
-362 377 1339 0
-364 379 1339 0
-366 381 1339 0
-368 383 1339 0
-370 385 1339 0
-372 387 1339 0
-374 389 1339 0
-376 391 1339 0
375 -390 1339 0
-377 362 1339 0
-379 364 1339 0
-381 366 1339 0
-383 368 1339 0
-385 370 1339 0
-387 372 1339 0
-389 374 1339 0
-391 376 1339 0
390 -375 1339 0
-362 -377 -1339 0
-364 -379 -1339 0
-366 -381 -1339 0
-368 -383 -1339 0
-370 -385 -1339 0
-372 -387 -1339 0
-374 -389 -1339 0
-376 -391 -1339 0
375 390 -1339 0
c ((x_00003_00009 != x_00004_00009)=tv=SATLiteral(1340))
-392 527 1340 0
-394 529 1340 0
-396 531 1340 0
-398 533 1340 0
-400 535 1340 0
-402 537 1340 0
-404 539 1340 0
-406 541 1340 0
405 -540 1340 0
-527 392 1340 0
-529 394 1340 0
-531 396 1340 0
-533 398 1340 0
-535 400 1340 0
-537 402 1340 0
-539 404 1340 0
-541 406 1340 0
540 -405 1340 0
-392 -527 -1340 0
-394 -529 -1340 0
-396 -531 -1340 0
-398 -533 -1340 0
-400 -535 -1340 0
-402 -537 -1340 0
-404 -539 -1340 0
-406 -541 -1340 0
405 540 -1340 0
c ((x_00007_00003 != x_00007_00004)=tv=SATLiteral(1341))
-842 857 1341 0
-844 859 1341 0
-846 861 1341 0
-848 863 1341 0
-850 865 1341 0
-852 867 1341 0
-854 869 1341 0
-856 871 1341 0
855 -870 1341 0
-857 842 1341 0
-859 844 1341 0
-861 846 1341 0
-863 848 1341 0
-865 850 1341 0
-867 852 1341 0
-869 854 1341 0
-871 856 1341 0
870 -855 1341 0
-842 -857 -1341 0
-844 -859 -1341 0
-846 -861 -1341 0
-848 -863 -1341 0
-850 -865 -1341 0
-852 -867 -1341 0
-854 -869 -1341 0
-856 -871 -1341 0
855 870 -1341 0
c ((x_00007_00005 != x_00007_00006)=tv=SATLiteral(1342))
-872 887 1342 0
-874 889 1342 0
-876 891 1342 0
-878 893 1342 0
-880 895 1342 0
-882 897 1342 0
-884 899 1342 0
-886 901 1342 0
885 -900 1342 0
-887 872 1342 0
-889 874 1342 0
-891 876 1342 0
-893 878 1342 0
-895 880 1342 0
-897 882 1342 0
-899 884 1342 0
-901 886 1342 0
900 -885 1342 0
-872 -887 -1342 0
-874 -889 -1342 0
-876 -891 -1342 0
-878 -893 -1342 0
-880 -895 -1342 0
-882 -897 -1342 0
-884 -899 -1342 0
-886 -901 -1342 0
885 900 -1342 0
c ((x_00008_00005 != x_00009_00005)=tv=SATLiteral(1343))
-1007 1142 1343 0
-1009 1144 1343 0
-1011 1146 1343 0
-1013 1148 1343 0
-1015 1150 1343 0
-1017 1152 1343 0
-1019 1154 1343 0
-1021 1156 1343 0
1020 -1155 1343 0
-1142 1007 1343 0
-1144 1009 1343 0
-1146 1011 1343 0
-1148 1013 1343 0
-1150 1015 1343 0
-1152 1017 1343 0
-1154 1019 1343 0
-1156 1021 1343 0
1155 -1020 1343 0
-1007 -1142 -1343 0
-1009 -1144 -1343 0
-1011 -1146 -1343 0
-1013 -1148 -1343 0
-1015 -1150 -1343 0
-1017 -1152 -1343 0
-1019 -1154 -1343 0
-1021 -1156 -1343 0
1020 1155 -1343 0
c ((x_00008_00009 != x_00009_00009)=tv=SATLiteral(1344))
-1067 1202 1344 0
-1069 1204 1344 0
-1071 1206 1344 0
-1073 1208 1344 0
-1075 1210 1344 0
-1077 1212 1344 0
-1079 1214 1344 0
-1081 1216 1344 0
1080 -1215 1344 0
-1202 1067 1344 0
-1204 1069 1344 0
-1206 1071 1344 0
-1208 1073 1344 0
-1210 1075 1344 0
-1212 1077 1344 0
-1214 1079 1344 0
-1216 1081 1344 0
1215 -1080 1344 0
-1067 -1202 -1344 0
-1069 -1204 -1344 0
-1071 -1206 -1344 0
-1073 -1208 -1344 0
-1075 -1210 -1344 0
-1077 -1212 -1344 0
-1079 -1214 -1344 0
-1081 -1216 -1344 0
1080 1215 -1344 0
c ((x_00009_00002 != x_00009_00003)=tv=SATLiteral(1345))
-1097 1112 1345 0
-1099 1114 1345 0
-1101 1116 1345 0
-1103 1118 1345 0
-1105 1120 1345 0
-1107 1122 1345 0
-1109 1124 1345 0
-1111 1126 1345 0
1110 -1125 1345 0
-1112 1097 1345 0
-1114 1099 1345 0
-1116 1101 1345 0
-1118 1103 1345 0
-1120 1105 1345 0
-1122 1107 1345 0
-1124 1109 1345 0
-1126 1111 1345 0
1125 -1110 1345 0
-1097 -1112 -1345 0
-1099 -1114 -1345 0
-1101 -1116 -1345 0
-1103 -1118 -1345 0
-1105 -1120 -1345 0
-1107 -1122 -1345 0
-1109 -1124 -1345 0
-1111 -1126 -1345 0
1110 1125 -1345 0
c ((SATLiteral(7815) /\ SATLiteral(7816))=tv=SATLiteral(1346))
1346 -7815 -7816 0
7815 -1346 0
7816 -1346 0
c ((SATLiteral(7817) /\ SATLiteral(7818))=tv=SATLiteral(1347))
1347 -7817 -7818 0
7817 -1347 0
7818 -1347 0
c ((SATLiteral(7819) /\ SATLiteral(7820))=tv=SATLiteral(1348))
1348 -7819 -7820 0
7819 -1348 0
7820 -1348 0
c ((SATLiteral(7821) /\ SATLiteral(7822))=tv=SATLiteral(1349))
1349 -7821 -7822 0
7821 -1349 0
7822 -1349 0
c ((SATLiteral(7823) /\ SATLiteral(7824))=tv=SATLiteral(1350))
1350 -7823 -7824 0
7823 -1350 0
7824 -1350 0
c ((SATLiteral(7825) /\ SATLiteral(7826))=tv=SATLiteral(1351))
1351 -7825 -7826 0
7825 -1351 0
7826 -1351 0
c ((SATLiteral(7827) /\ SATLiteral(7828))=tv=SATLiteral(1352))
1352 -7827 -7828 0
7827 -1352 0
7828 -1352 0
c ((SATLiteral(7829) /\ SATLiteral(7830))=tv=SATLiteral(1353))
1353 -7829 -7830 0
7829 -1353 0
7830 -1353 0
c ((SATLiteral(7831) /\ SATLiteral(7832))=tv=SATLiteral(1354))
1354 -7831 -7832 0
7831 -1354 0
7832 -1354 0
c ((SATLiteral(7833) /\ SATLiteral(7834))=tv=SATLiteral(1355))
1355 -7833 -7834 0
7833 -1355 0
7834 -1355 0
c ((SATLiteral(7835) /\ SATLiteral(7836))=tv=SATLiteral(1356))
1356 -7835 -7836 0
7835 -1356 0
7836 -1356 0
c ((SATLiteral(7837) /\ SATLiteral(7838))=tv=SATLiteral(1357))
1357 -7837 -7838 0
7837 -1357 0
7838 -1357 0
c ((SATLiteral(7839) /\ SATLiteral(7840))=tv=SATLiteral(1358))
1358 -7839 -7840 0
7839 -1358 0
7840 -1358 0
c ((SATLiteral(7841) /\ SATLiteral(7842))=tv=SATLiteral(1359))
1359 -7841 -7842 0
7841 -1359 0
7842 -1359 0
c ((SATLiteral(7843) /\ SATLiteral(7844))=tv=SATLiteral(1360))
1360 -7843 -7844 0
7843 -1360 0
7844 -1360 0
c ((SATLiteral(7845) /\ SATLiteral(7846))=tv=SATLiteral(1361))
1361 -7845 -7846 0
7845 -1361 0
7846 -1361 0
c ((SATLiteral(7847) /\ SATLiteral(7848))=tv=SATLiteral(1362))
1362 -7847 -7848 0
7847 -1362 0
7848 -1362 0
c ((SATLiteral(7849) /\ SATLiteral(7850))=tv=SATLiteral(1363))
1363 -7849 -7850 0
7849 -1363 0
7850 -1363 0
c ((SATLiteral(7851) /\ SATLiteral(7852))=tv=SATLiteral(1364))
1364 -7851 -7852 0
7851 -1364 0
7852 -1364 0
c ((SATLiteral(7853) /\ SATLiteral(7854))=tv=SATLiteral(1365))
1365 -7853 -7854 0
7853 -1365 0
7854 -1365 0
c ((SATLiteral(7855) /\ SATLiteral(7856))=tv=SATLiteral(1366))
1366 -7855 -7856 0
7855 -1366 0
7856 -1366 0
c ((SATLiteral(7857) /\ SATLiteral(7858))=tv=SATLiteral(1367))
1367 -7857 -7858 0
7857 -1367 0
7858 -1367 0
c ((SATLiteral(7859) /\ SATLiteral(7860))=tv=SATLiteral(1368))
1368 -7859 -7860 0
7859 -1368 0
7860 -1368 0
c ((SATLiteral(7861) /\ SATLiteral(7862))=tv=SATLiteral(1369))
1369 -7861 -7862 0
7861 -1369 0
7862 -1369 0
c ((SATLiteral(7863) /\ SATLiteral(7864))=tv=SATLiteral(1370))
1370 -7863 -7864 0
7863 -1370 0
7864 -1370 0
c ((SATLiteral(7865) /\ SATLiteral(7866))=tv=SATLiteral(1371))
1371 -7865 -7866 0
7865 -1371 0
7866 -1371 0
c ((SATLiteral(7867) /\ SATLiteral(7868))=tv=SATLiteral(1372))
1372 -7867 -7868 0
7867 -1372 0
7868 -1372 0
c ((SATLiteral(7869) /\ SATLiteral(7870))=tv=SATLiteral(1373))
1373 -7869 -7870 0
7869 -1373 0
7870 -1373 0
c ((SATLiteral(7871) /\ SATLiteral(7872))=tv=SATLiteral(1374))
1374 -7871 -7872 0
7871 -1374 0
7872 -1374 0
c ((SATLiteral(7873) /\ SATLiteral(7874))=tv=SATLiteral(1375))
1375 -7873 -7874 0
7873 -1375 0
7874 -1375 0
c ((SATLiteral(7875) /\ SATLiteral(7876))=tv=SATLiteral(1376))
1376 -7875 -7876 0
7875 -1376 0
7876 -1376 0
c ((SATLiteral(7877) /\ SATLiteral(7878))=tv=SATLiteral(1377))
1377 -7877 -7878 0
7877 -1377 0
7878 -1377 0
c ((SATLiteral(7879) /\ SATLiteral(7880))=tv=SATLiteral(1378))
1378 -7879 -7880 0
7879 -1378 0
7880 -1378 0
c ((SATLiteral(7881) /\ SATLiteral(7882))=tv=SATLiteral(1379))
1379 -7881 -7882 0
7881 -1379 0
7882 -1379 0
c ((SATLiteral(7883) /\ SATLiteral(7884))=tv=SATLiteral(1380))
1380 -7883 -7884 0
7883 -1380 0
7884 -1380 0
c ((SATLiteral(7885) /\ SATLiteral(7886))=tv=SATLiteral(1381))
1381 -7885 -7886 0
7885 -1381 0
7886 -1381 0
c ((SATLiteral(7887) /\ SATLiteral(7888))=tv=SATLiteral(1382))
1382 -7887 -7888 0
7887 -1382 0
7888 -1382 0
c ((SATLiteral(7889) /\ SATLiteral(7890))=tv=SATLiteral(1383))
1383 -7889 -7890 0
7889 -1383 0
7890 -1383 0
c ((SATLiteral(7891) /\ SATLiteral(7892))=tv=SATLiteral(1384))
1384 -7891 -7892 0
7891 -1384 0
7892 -1384 0
c ((SATLiteral(7893) /\ SATLiteral(7894))=tv=SATLiteral(1385))
1385 -7893 -7894 0
7893 -1385 0
7894 -1385 0
c ((SATLiteral(7895) /\ SATLiteral(7896))=tv=SATLiteral(1386))
1386 -7895 -7896 0
7895 -1386 0
7896 -1386 0
c ((SATLiteral(7897) /\ SATLiteral(7898))=tv=SATLiteral(1387))
1387 -7897 -7898 0
7897 -1387 0
7898 -1387 0
c ((SATLiteral(7899) /\ SATLiteral(7900))=tv=SATLiteral(1388))
1388 -7899 -7900 0
7899 -1388 0
7900 -1388 0
c ((SATLiteral(7901) /\ SATLiteral(7902))=tv=SATLiteral(1389))
1389 -7901 -7902 0
7901 -1389 0
7902 -1389 0
c ((SATLiteral(7903) /\ SATLiteral(7904))=tv=SATLiteral(1390))
1390 -7903 -7904 0
7903 -1390 0
7904 -1390 0
c ((SATLiteral(7905) /\ SATLiteral(7906))=tv=SATLiteral(1391))
1391 -7905 -7906 0
7905 -1391 0
7906 -1391 0
c ((SATLiteral(7907) /\ SATLiteral(7908))=tv=SATLiteral(1392))
1392 -7907 -7908 0
7907 -1392 0
7908 -1392 0
c ((SATLiteral(7909) /\ SATLiteral(7910))=tv=SATLiteral(1393))
1393 -7909 -7910 0
7909 -1393 0
7910 -1393 0
c ((SATLiteral(7911) /\ SATLiteral(7912))=tv=SATLiteral(1394))
1394 -7911 -7912 0
7911 -1394 0
7912 -1394 0
c ((SATLiteral(7913) /\ SATLiteral(7914))=tv=SATLiteral(1395))
1395 -7913 -7914 0
7913 -1395 0
7914 -1395 0
c ((SATLiteral(7915) /\ SATLiteral(7916))=tv=SATLiteral(1396))
1396 -7915 -7916 0
7915 -1396 0
7916 -1396 0
c ((SATLiteral(7917) /\ SATLiteral(7918))=tv=SATLiteral(1397))
1397 -7917 -7918 0
7917 -1397 0
7918 -1397 0
c ((SATLiteral(7919) /\ SATLiteral(7920))=tv=SATLiteral(1398))
1398 -7919 -7920 0
7919 -1398 0
7920 -1398 0
c ((SATLiteral(7921) /\ SATLiteral(7922))=tv=SATLiteral(1399))
1399 -7921 -7922 0
7921 -1399 0
7922 -1399 0
c ((SATLiteral(7923) /\ SATLiteral(7924))=tv=SATLiteral(1400))
1400 -7923 -7924 0
7923 -1400 0
7924 -1400 0
c ((SATLiteral(7925) /\ SATLiteral(7926))=tv=SATLiteral(1401))
1401 -7925 -7926 0
7925 -1401 0
7926 -1401 0
c ((SATLiteral(7927) /\ SATLiteral(7928))=tv=SATLiteral(1402))
1402 -7927 -7928 0
7927 -1402 0
7928 -1402 0
c ((SATLiteral(7929) /\ SATLiteral(7930))=tv=SATLiteral(1403))
1403 -7929 -7930 0
7929 -1403 0
7930 -1403 0
c ((SATLiteral(7931) /\ SATLiteral(7932))=tv=SATLiteral(1404))
1404 -7931 -7932 0
7931 -1404 0
7932 -1404 0
c ((SATLiteral(7933) /\ SATLiteral(7934))=tv=SATLiteral(1405))
1405 -7933 -7934 0
7933 -1405 0
7934 -1405 0
c ((SATLiteral(7935) /\ SATLiteral(7936))=tv=SATLiteral(1406))
1406 -7935 -7936 0
7935 -1406 0
7936 -1406 0
c ((SATLiteral(7937) /\ SATLiteral(7938))=tv=SATLiteral(1407))
1407 -7937 -7938 0
7937 -1407 0
7938 -1407 0
c ((SATLiteral(7939) /\ SATLiteral(7940))=tv=SATLiteral(1408))
1408 -7939 -7940 0
7939 -1408 0
7940 -1408 0
c ((SATLiteral(7941) /\ SATLiteral(7942))=tv=SATLiteral(1409))
1409 -7941 -7942 0
7941 -1409 0
7942 -1409 0
c ((SATLiteral(7943) /\ SATLiteral(7944))=tv=SATLiteral(1410))
1410 -7943 -7944 0
7943 -1410 0
7944 -1410 0
c ((SATLiteral(7945) /\ SATLiteral(7946))=tv=SATLiteral(1411))
1411 -7945 -7946 0
7945 -1411 0
7946 -1411 0
c ((SATLiteral(7947) /\ SATLiteral(7948))=tv=SATLiteral(1412))
1412 -7947 -7948 0
7947 -1412 0
7948 -1412 0
c ((SATLiteral(7949) /\ SATLiteral(7950))=tv=SATLiteral(1413))
1413 -7949 -7950 0
7949 -1413 0
7950 -1413 0
c ((SATLiteral(7951) /\ SATLiteral(7952))=tv=SATLiteral(1414))
1414 -7951 -7952 0
7951 -1414 0
7952 -1414 0
c ((SATLiteral(7953) /\ SATLiteral(7954))=tv=SATLiteral(1415))
1415 -7953 -7954 0
7953 -1415 0
7954 -1415 0
c ((SATLiteral(7955) /\ SATLiteral(7956))=tv=SATLiteral(1416))
1416 -7955 -7956 0
7955 -1416 0
7956 -1416 0
c ((SATLiteral(7957) /\ SATLiteral(7958))=tv=SATLiteral(1417))
1417 -7957 -7958 0
7957 -1417 0
7958 -1417 0
c ((SATLiteral(7959) /\ SATLiteral(7960))=tv=SATLiteral(1418))
1418 -7959 -7960 0
7959 -1418 0
7960 -1418 0
c ((SATLiteral(7961) /\ SATLiteral(7962))=tv=SATLiteral(1419))
1419 -7961 -7962 0
7961 -1419 0
7962 -1419 0
c ((SATLiteral(7963) /\ SATLiteral(7964))=tv=SATLiteral(1420))
1420 -7963 -7964 0
7963 -1420 0
7964 -1420 0
c ((SATLiteral(7965) /\ SATLiteral(7966))=tv=SATLiteral(1421))
1421 -7965 -7966 0
7965 -1421 0
7966 -1421 0
c ((SATLiteral(7967) /\ SATLiteral(7968))=tv=SATLiteral(1422))
1422 -7967 -7968 0
7967 -1422 0
7968 -1422 0
c ((SATLiteral(7969) /\ SATLiteral(7970))=tv=SATLiteral(1423))
1423 -7969 -7970 0
7969 -1423 0
7970 -1423 0
c ((SATLiteral(7971) /\ SATLiteral(7972))=tv=SATLiteral(1424))
1424 -7971 -7972 0
7971 -1424 0
7972 -1424 0
c ((SATLiteral(7973) /\ SATLiteral(7974))=tv=SATLiteral(1425))
1425 -7973 -7974 0
7973 -1425 0
7974 -1425 0
c ((SATLiteral(7975) /\ SATLiteral(7976))=tv=SATLiteral(1426))
1426 -7975 -7976 0
7975 -1426 0
7976 -1426 0
c ((SATLiteral(7977) /\ SATLiteral(7978))=tv=SATLiteral(1427))
1427 -7977 -7978 0
7977 -1427 0
7978 -1427 0
c ((SATLiteral(7979) /\ SATLiteral(7980))=tv=SATLiteral(1428))
1428 -7979 -7980 0
7979 -1428 0
7980 -1428 0
c ((SATLiteral(7981) /\ SATLiteral(7982))=tv=SATLiteral(1429))
1429 -7981 -7982 0
7981 -1429 0
7982 -1429 0
c ((SATLiteral(7983) /\ SATLiteral(7984))=tv=SATLiteral(1430))
1430 -7983 -7984 0
7983 -1430 0
7984 -1430 0
c ((SATLiteral(7985) /\ SATLiteral(7986))=tv=SATLiteral(1431))
1431 -7985 -7986 0
7985 -1431 0
7986 -1431 0
c ((SATLiteral(7987) /\ SATLiteral(7988))=tv=SATLiteral(1432))
1432 -7987 -7988 0
7987 -1432 0
7988 -1432 0
c ((SATLiteral(7989) /\ SATLiteral(7990))=tv=SATLiteral(1433))
1433 -7989 -7990 0
7989 -1433 0
7990 -1433 0
c ((SATLiteral(7991) /\ SATLiteral(7992))=tv=SATLiteral(1434))
1434 -7991 -7992 0
7991 -1434 0
7992 -1434 0
c ((SATLiteral(7993) /\ SATLiteral(7994))=tv=SATLiteral(1435))
1435 -7993 -7994 0
7993 -1435 0
7994 -1435 0
c ((SATLiteral(7995) /\ SATLiteral(7996))=tv=SATLiteral(1436))
1436 -7995 -7996 0
7995 -1436 0
7996 -1436 0
c ((SATLiteral(7997) /\ SATLiteral(7998))=tv=SATLiteral(1437))
1437 -7997 -7998 0
7997 -1437 0
7998 -1437 0
c ((SATLiteral(7999) /\ SATLiteral(8000))=tv=SATLiteral(1438))
1438 -7999 -8000 0
7999 -1438 0
8000 -1438 0
c ((SATLiteral(8001) /\ SATLiteral(8002))=tv=SATLiteral(1439))
1439 -8001 -8002 0
8001 -1439 0
8002 -1439 0
c ((SATLiteral(8003) /\ SATLiteral(8004))=tv=SATLiteral(1440))
1440 -8003 -8004 0
8003 -1440 0
8004 -1440 0
c ((SATLiteral(8005) /\ SATLiteral(8006))=tv=SATLiteral(1441))
1441 -8005 -8006 0
8005 -1441 0
8006 -1441 0
c ((SATLiteral(8007) /\ SATLiteral(8008))=tv=SATLiteral(1442))
1442 -8007 -8008 0
8007 -1442 0
8008 -1442 0
c ((SATLiteral(8009) /\ SATLiteral(8010))=tv=SATLiteral(1443))
1443 -8009 -8010 0
8009 -1443 0
8010 -1443 0
c ((SATLiteral(8011) /\ SATLiteral(8012))=tv=SATLiteral(1444))
1444 -8011 -8012 0
8011 -1444 0
8012 -1444 0
c ((SATLiteral(8013) /\ SATLiteral(8014))=tv=SATLiteral(1445))
1445 -8013 -8014 0
8013 -1445 0
8014 -1445 0
c ((SATLiteral(8015) /\ SATLiteral(8016))=tv=SATLiteral(1446))
1446 -8015 -8016 0
8015 -1446 0
8016 -1446 0
c ((SATLiteral(8017) /\ SATLiteral(8018))=tv=SATLiteral(1447))
1447 -8017 -8018 0
8017 -1447 0
8018 -1447 0
c ((SATLiteral(8019) /\ SATLiteral(8020))=tv=SATLiteral(1448))
1448 -8019 -8020 0
8019 -1448 0
8020 -1448 0
c ((SATLiteral(8021) /\ SATLiteral(8022))=tv=SATLiteral(1449))
1449 -8021 -8022 0
8021 -1449 0
8022 -1449 0
c ((SATLiteral(8023) /\ SATLiteral(8024))=tv=SATLiteral(1450))
1450 -8023 -8024 0
8023 -1450 0
8024 -1450 0
c ((SATLiteral(8025) /\ SATLiteral(8026))=tv=SATLiteral(1451))
1451 -8025 -8026 0
8025 -1451 0
8026 -1451 0
c ((SATLiteral(8027) /\ SATLiteral(8028))=tv=SATLiteral(1452))
1452 -8027 -8028 0
8027 -1452 0
8028 -1452 0
c ((SATLiteral(8029) /\ SATLiteral(8030))=tv=SATLiteral(1453))
1453 -8029 -8030 0
8029 -1453 0
8030 -1453 0
c ((SATLiteral(8031) /\ SATLiteral(8032))=tv=SATLiteral(1454))
1454 -8031 -8032 0
8031 -1454 0
8032 -1454 0
c ((SATLiteral(8033) /\ SATLiteral(8034))=tv=SATLiteral(1455))
1455 -8033 -8034 0
8033 -1455 0
8034 -1455 0
c ((SATLiteral(8035) /\ SATLiteral(8036))=tv=SATLiteral(1456))
1456 -8035 -8036 0
8035 -1456 0
8036 -1456 0
c ((SATLiteral(8037) /\ SATLiteral(8038))=tv=SATLiteral(1457))
1457 -8037 -8038 0
8037 -1457 0
8038 -1457 0
c ((SATLiteral(8039) /\ SATLiteral(8040))=tv=SATLiteral(1458))
1458 -8039 -8040 0
8039 -1458 0
8040 -1458 0
c ((SATLiteral(8041) /\ SATLiteral(8042))=tv=SATLiteral(1459))
1459 -8041 -8042 0
8041 -1459 0
8042 -1459 0
c ((SATLiteral(8043) /\ SATLiteral(8044))=tv=SATLiteral(1460))
1460 -8043 -8044 0
8043 -1460 0
8044 -1460 0
c ((SATLiteral(8045) /\ SATLiteral(8046))=tv=SATLiteral(1461))
1461 -8045 -8046 0
8045 -1461 0
8046 -1461 0
c ((SATLiteral(8047) /\ SATLiteral(8048))=tv=SATLiteral(1462))
1462 -8047 -8048 0
8047 -1462 0
8048 -1462 0
c ((SATLiteral(8049) /\ SATLiteral(8050))=tv=SATLiteral(1463))
1463 -8049 -8050 0
8049 -1463 0
8050 -1463 0
c ((SATLiteral(8051) /\ SATLiteral(8052))=tv=SATLiteral(1464))
1464 -8051 -8052 0
8051 -1464 0
8052 -1464 0
c ((SATLiteral(8053) /\ SATLiteral(8054))=tv=SATLiteral(1465))
1465 -8053 -8054 0
8053 -1465 0
8054 -1465 0
c ((SATLiteral(8055) /\ SATLiteral(8056))=tv=SATLiteral(1466))
1466 -8055 -8056 0
8055 -1466 0
8056 -1466 0
c ((SATLiteral(8057) /\ SATLiteral(8058))=tv=SATLiteral(1467))
1467 -8057 -8058 0
8057 -1467 0
8058 -1467 0
c ((SATLiteral(8059) /\ SATLiteral(8060))=tv=SATLiteral(1468))
1468 -8059 -8060 0
8059 -1468 0
8060 -1468 0
c ((SATLiteral(8061) /\ SATLiteral(8062))=tv=SATLiteral(1469))
1469 -8061 -8062 0
8061 -1469 0
8062 -1469 0
c ((SATLiteral(8063) /\ SATLiteral(8064))=tv=SATLiteral(1470))
1470 -8063 -8064 0
8063 -1470 0
8064 -1470 0
c ((SATLiteral(8065) /\ SATLiteral(8066))=tv=SATLiteral(1471))
1471 -8065 -8066 0
8065 -1471 0
8066 -1471 0
c ((SATLiteral(8067) /\ SATLiteral(8068))=tv=SATLiteral(1472))
1472 -8067 -8068 0
8067 -1472 0
8068 -1472 0
c ((SATLiteral(8069) /\ SATLiteral(8070))=tv=SATLiteral(1473))
1473 -8069 -8070 0
8069 -1473 0
8070 -1473 0
c ((SATLiteral(8071) /\ SATLiteral(8072))=tv=SATLiteral(1474))
1474 -8071 -8072 0
8071 -1474 0
8072 -1474 0
c ((SATLiteral(8073) /\ SATLiteral(8074))=tv=SATLiteral(1475))
1475 -8073 -8074 0
8073 -1475 0
8074 -1475 0
c ((SATLiteral(8075) /\ SATLiteral(8076))=tv=SATLiteral(1476))
1476 -8075 -8076 0
8075 -1476 0
8076 -1476 0
c ((SATLiteral(8077) /\ SATLiteral(8078))=tv=SATLiteral(1477))
1477 -8077 -8078 0
8077 -1477 0
8078 -1477 0
c ((SATLiteral(8079) /\ SATLiteral(8080))=tv=SATLiteral(1478))
1478 -8079 -8080 0
8079 -1478 0
8080 -1478 0
c ((SATLiteral(8081) /\ SATLiteral(8082))=tv=SATLiteral(1479))
1479 -8081 -8082 0
8081 -1479 0
8082 -1479 0
c ((SATLiteral(8083) /\ SATLiteral(8084))=tv=SATLiteral(1480))
1480 -8083 -8084 0
8083 -1480 0
8084 -1480 0
c ((SATLiteral(8085) /\ SATLiteral(8086))=tv=SATLiteral(1481))
1481 -8085 -8086 0
8085 -1481 0
8086 -1481 0
c ((SATLiteral(8087) /\ SATLiteral(8088))=tv=SATLiteral(1482))
1482 -8087 -8088 0
8087 -1482 0
8088 -1482 0
c ((SATLiteral(8089) /\ SATLiteral(8090))=tv=SATLiteral(1483))
1483 -8089 -8090 0
8089 -1483 0
8090 -1483 0
c ((SATLiteral(8091) /\ SATLiteral(8092))=tv=SATLiteral(1484))
1484 -8091 -8092 0
8091 -1484 0
8092 -1484 0
c ((SATLiteral(8093) /\ SATLiteral(8094))=tv=SATLiteral(1485))
1485 -8093 -8094 0
8093 -1485 0
8094 -1485 0
c ((SATLiteral(8095) /\ SATLiteral(8096))=tv=SATLiteral(1486))
1486 -8095 -8096 0
8095 -1486 0
8096 -1486 0
c ((SATLiteral(8097) /\ SATLiteral(8098))=tv=SATLiteral(1487))
1487 -8097 -8098 0
8097 -1487 0
8098 -1487 0
c ((SATLiteral(8099) /\ SATLiteral(8100))=tv=SATLiteral(1488))
1488 -8099 -8100 0
8099 -1488 0
8100 -1488 0
c ((SATLiteral(8101) /\ SATLiteral(8102))=tv=SATLiteral(1489))
1489 -8101 -8102 0
8101 -1489 0
8102 -1489 0
c ((SATLiteral(8103) /\ SATLiteral(8104))=tv=SATLiteral(1490))
1490 -8103 -8104 0
8103 -1490 0
8104 -1490 0
c ((SATLiteral(8105) /\ SATLiteral(8106))=tv=SATLiteral(1491))
1491 -8105 -8106 0
8105 -1491 0
8106 -1491 0
c ((SATLiteral(8107) /\ SATLiteral(8108))=tv=SATLiteral(1492))
1492 -8107 -8108 0
8107 -1492 0
8108 -1492 0
c ((SATLiteral(8109) /\ SATLiteral(8110))=tv=SATLiteral(1493))
1493 -8109 -8110 0
8109 -1493 0
8110 -1493 0
c ((SATLiteral(8111) /\ SATLiteral(8112))=tv=SATLiteral(1494))
1494 -8111 -8112 0
8111 -1494 0
8112 -1494 0
c ((SATLiteral(8113) /\ SATLiteral(8114))=tv=SATLiteral(1495))
1495 -8113 -8114 0
8113 -1495 0
8114 -1495 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1496))
1496 -8115 -8116 0
8115 -1496 0
8116 -1496 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1497))
1497 -8117 -8118 0
8117 -1497 0
8118 -1497 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1498))
1498 -8119 -8120 0
8119 -1498 0
8120 -1498 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1499))
1499 -8121 -8122 0
8121 -1499 0
8122 -1499 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1500))
1500 -8123 -8124 0
8123 -1500 0
8124 -1500 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1501))
1501 -8125 -8126 0
8125 -1501 0
8126 -1501 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1502))
1502 -8127 -8128 0
8127 -1502 0
8128 -1502 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1503))
1503 -8129 -8130 0
8129 -1503 0
8130 -1503 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1504))
1504 -8131 -8132 0
8131 -1504 0
8132 -1504 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1505))
1505 -8133 -8134 0
8133 -1505 0
8134 -1505 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1506))
1506 -8135 -8136 0
8135 -1506 0
8136 -1506 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1507))
1507 -8137 -8138 0
8137 -1507 0
8138 -1507 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1508))
1508 -8139 -8140 0
8139 -1508 0
8140 -1508 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1509))
1509 -8141 -8142 0
8141 -1509 0
8142 -1509 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1510))
1510 -8143 -8144 0
8143 -1510 0
8144 -1510 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1511))
1511 -8145 -8146 0
8145 -1511 0
8146 -1511 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1512))
1512 -8147 -8148 0
8147 -1512 0
8148 -1512 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1513))
1513 -8149 -8150 0
8149 -1513 0
8150 -1513 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1514))
1514 -8151 -8152 0
8151 -1514 0
8152 -1514 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1515))
1515 -8153 -8154 0
8153 -1515 0
8154 -1515 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1516))
1516 -8155 -8156 0
8155 -1516 0
8156 -1516 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1517))
1517 -8157 -8158 0
8157 -1517 0
8158 -1517 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1518))
1518 -8159 -8160 0
8159 -1518 0
8160 -1518 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1519))
1519 -8161 -8162 0
8161 -1519 0
8162 -1519 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1520))
1520 -8163 -8164 0
8163 -1520 0
8164 -1520 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1521))
1521 -8165 -8166 0
8165 -1521 0
8166 -1521 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1522))
1522 -8167 -8168 0
8167 -1522 0
8168 -1522 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1523))
1523 -8169 -8170 0
8169 -1523 0
8170 -1523 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1524))
1524 -8171 -8172 0
8171 -1524 0
8172 -1524 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1525))
1525 -8173 -8174 0
8173 -1525 0
8174 -1525 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1526))
1526 -8175 -8176 0
8175 -1526 0
8176 -1526 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1527))
1527 -8177 -8178 0
8177 -1527 0
8178 -1527 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1528))
1528 -8179 -8180 0
8179 -1528 0
8180 -1528 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1529))
1529 -8181 -8182 0
8181 -1529 0
8182 -1529 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1530))
1530 -8183 -8184 0
8183 -1530 0
8184 -1530 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1531))
1531 -8185 -8186 0
8185 -1531 0
8186 -1531 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1532))
1532 -8187 -8188 0
8187 -1532 0
8188 -1532 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1533))
1533 -8189 -8190 0
8189 -1533 0
8190 -1533 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1534))
1534 -8191 -8192 0
8191 -1534 0
8192 -1534 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1535))
1535 -8193 -8194 0
8193 -1535 0
8194 -1535 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1536))
1536 -8195 -8196 0
8195 -1536 0
8196 -1536 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1537))
1537 -8197 -8198 0
8197 -1537 0
8198 -1537 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1538))
1538 -8199 -8200 0
8199 -1538 0
8200 -1538 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1539))
1539 -8201 -8202 0
8201 -1539 0
8202 -1539 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1540))
1540 -8203 -8204 0
8203 -1540 0
8204 -1540 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1541))
1541 -8205 -8206 0
8205 -1541 0
8206 -1541 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1542))
1542 -8207 -8208 0
8207 -1542 0
8208 -1542 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1543))
1543 -8209 -8210 0
8209 -1543 0
8210 -1543 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1544))
1544 -8211 -8212 0
8211 -1544 0
8212 -1544 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1545))
1545 -8213 -8214 0
8213 -1545 0
8214 -1545 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1546))
1546 -8215 -8216 0
8215 -1546 0
8216 -1546 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1547))
1547 -8217 -8218 0
8217 -1547 0
8218 -1547 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1548))
1548 -8219 -8220 0
8219 -1548 0
8220 -1548 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1549))
1549 -8221 -8222 0
8221 -1549 0
8222 -1549 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1550))
1550 -8223 -8224 0
8223 -1550 0
8224 -1550 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1551))
1551 -8225 -8226 0
8225 -1551 0
8226 -1551 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1552))
1552 -8227 -8228 0
8227 -1552 0
8228 -1552 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1553))
1553 -8229 -8230 0
8229 -1553 0
8230 -1553 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1554))
1554 -8231 -8232 0
8231 -1554 0
8232 -1554 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1555))
1555 -8233 -8234 0
8233 -1555 0
8234 -1555 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1556))
1556 -8235 -8236 0
8235 -1556 0
8236 -1556 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1557))
1557 -8237 -8238 0
8237 -1557 0
8238 -1557 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1558))
1558 -8239 -8240 0
8239 -1558 0
8240 -1558 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1559))
1559 -8241 -8242 0
8241 -1559 0
8242 -1559 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1560))
1560 -8243 -8244 0
8243 -1560 0
8244 -1560 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1561))
1561 -8245 -8246 0
8245 -1561 0
8246 -1561 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1562))
1562 -8247 -8248 0
8247 -1562 0
8248 -1562 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1563))
1563 -8249 -8250 0
8249 -1563 0
8250 -1563 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1564))
1564 -8251 -8252 0
8251 -1564 0
8252 -1564 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1565))
1565 -8253 -8254 0
8253 -1565 0
8254 -1565 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1566))
1566 -8255 -8256 0
8255 -1566 0
8256 -1566 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1567))
1567 -8257 -8258 0
8257 -1567 0
8258 -1567 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1568))
1568 -8259 -8260 0
8259 -1568 0
8260 -1568 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1569))
1569 -8261 -8262 0
8261 -1569 0
8262 -1569 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1570))
1570 -8263 -8264 0
8263 -1570 0
8264 -1570 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1571))
1571 -8265 -8266 0
8265 -1571 0
8266 -1571 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1572))
1572 -8267 -8268 0
8267 -1572 0
8268 -1572 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1573))
1573 -8269 -8270 0
8269 -1573 0
8270 -1573 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1574))
1574 -8271 -8272 0
8271 -1574 0
8272 -1574 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1575))
1575 -8273 -8274 0
8273 -1575 0
8274 -1575 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1576))
1576 -8275 -8276 0
8275 -1576 0
8276 -1576 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1577))
1577 -8277 -8278 0
8277 -1577 0
8278 -1577 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1578))
1578 -8279 -8280 0
8279 -1578 0
8280 -1578 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1579))
1579 -8281 -8282 0
8281 -1579 0
8282 -1579 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1580))
1580 -8283 -8284 0
8283 -1580 0
8284 -1580 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1581))
1581 -8285 -8286 0
8285 -1581 0
8286 -1581 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1582))
1582 -8287 -8288 0
8287 -1582 0
8288 -1582 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1583))
1583 -8289 -8290 0
8289 -1583 0
8290 -1583 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1584))
1584 -8291 -8292 0
8291 -1584 0
8292 -1584 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1585))
1585 -8293 -8294 0
8293 -1585 0
8294 -1585 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1586))
1586 -8295 -8296 0
8295 -1586 0
8296 -1586 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1587))
1587 -8297 -8298 0
8297 -1587 0
8298 -1587 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1588))
1588 -8299 -8300 0
8299 -1588 0
8300 -1588 0
c (((SATLiteral(272) + SATLiteral(2) + SATLiteral(137))<=1)=tv=SATLiteral(1589))
-1589 -2 -137 0
-1589 -272 -137 0
-1589 -272 -2 0
1589 2 137 0
1589 272 137 0
1589 272 2 0
c (((SATLiteral(274) + SATLiteral(4) + SATLiteral(139))<=1)=tv=SATLiteral(1590))
-1590 -4 -139 0
-1590 -274 -139 0
-1590 -274 -4 0
1590 4 139 0
1590 274 139 0
1590 274 4 0
c (((SATLiteral(276) + SATLiteral(6) + SATLiteral(141))<=1)=tv=SATLiteral(1591))
-1591 -6 -141 0
-1591 -276 -141 0
-1591 -276 -6 0
1591 6 141 0
1591 276 141 0
1591 276 6 0
c (((SATLiteral(278) + SATLiteral(8) + SATLiteral(143))<=1)=tv=SATLiteral(1592))
-1592 -8 -143 0
-1592 -278 -143 0
-1592 -278 -8 0
1592 8 143 0
1592 278 143 0
1592 278 8 0
c (((SATLiteral(280) + SATLiteral(10) + SATLiteral(145))<=1)=tv=SATLiteral(1593))
-1593 -10 -145 0
-1593 -280 -145 0
-1593 -280 -10 0
1593 10 145 0
1593 280 145 0
1593 280 10 0
c (((SATLiteral(282) + SATLiteral(12) + SATLiteral(147))<=1)=tv=SATLiteral(1594))
-1594 -12 -147 0
-1594 -282 -147 0
-1594 -282 -12 0
1594 12 147 0
1594 282 147 0
1594 282 12 0
c (((SATLiteral(284) + SATLiteral(14) + SATLiteral(149))<=1)=tv=SATLiteral(1595))
-1595 -14 -149 0
-1595 -284 -149 0
-1595 -284 -14 0
1595 14 149 0
1595 284 149 0
1595 284 14 0
c (((SATLiteral(286) + SATLiteral(16) + SATLiteral(151))<=1)=tv=SATLiteral(1596))
-1596 -16 -151 0
-1596 -286 -151 0
-1596 -286 -16 0
1596 16 151 0
1596 286 151 0
1596 286 16 0
c (((SATLiteral(-285) + SATLiteral(-15) + SATLiteral(-150))<=1)=tv=SATLiteral(1597))
-1597 15 150 0
-1597 285 150 0
-1597 285 15 0
1597 -15 -150 0
1597 -285 -150 0
1597 -285 -15 0
c (((SATLiteral(47) + SATLiteral(62) + SATLiteral(77))<=1)=tv=SATLiteral(1598))
-1598 -62 -77 0
-1598 -47 -77 0
-1598 -47 -62 0
1598 62 77 0
1598 47 77 0
1598 47 62 0
c (((SATLiteral(49) + SATLiteral(64) + SATLiteral(79))<=1)=tv=SATLiteral(1599))
-1599 -64 -79 0
-1599 -49 -79 0
-1599 -49 -64 0
1599 64 79 0
1599 49 79 0
1599 49 64 0
c (((SATLiteral(51) + SATLiteral(66) + SATLiteral(81))<=1)=tv=SATLiteral(1600))
-1600 -66 -81 0
-1600 -51 -81 0
-1600 -51 -66 0
1600 66 81 0
1600 51 81 0
1600 51 66 0
c (((SATLiteral(53) + SATLiteral(68) + SATLiteral(83))<=1)=tv=SATLiteral(1601))
-1601 -68 -83 0
-1601 -53 -83 0
-1601 -53 -68 0
1601 68 83 0
1601 53 83 0
1601 53 68 0
c (((SATLiteral(55) + SATLiteral(70) + SATLiteral(85))<=1)=tv=SATLiteral(1602))
-1602 -70 -85 0
-1602 -55 -85 0
-1602 -55 -70 0
1602 70 85 0
1602 55 85 0
1602 55 70 0
c (((SATLiteral(57) + SATLiteral(72) + SATLiteral(87))<=1)=tv=SATLiteral(1603))
-1603 -72 -87 0
-1603 -57 -87 0
-1603 -57 -72 0
1603 72 87 0
1603 57 87 0
1603 57 72 0
c (((SATLiteral(59) + SATLiteral(74) + SATLiteral(89))<=1)=tv=SATLiteral(1604))
-1604 -74 -89 0
-1604 -59 -89 0
-1604 -59 -74 0
1604 74 89 0
1604 59 89 0
1604 59 74 0
c (((SATLiteral(61) + SATLiteral(76) + SATLiteral(91))<=1)=tv=SATLiteral(1605))
-1605 -76 -91 0
-1605 -61 -91 0
-1605 -61 -76 0
1605 76 91 0
1605 61 91 0
1605 61 76 0
c (((SATLiteral(-60) + SATLiteral(-75) + SATLiteral(-90))<=1)=tv=SATLiteral(1606))
-1606 75 90 0
-1606 60 90 0
-1606 60 75 0
1606 -75 -90 0
1606 -60 -90 0
1606 -60 -75 0
c (((SATLiteral(92) + SATLiteral(212) + SATLiteral(227))<=1)=tv=SATLiteral(1607))
-1607 -212 -227 0
-1607 -92 -227 0
-1607 -92 -212 0
1607 212 227 0
1607 92 227 0
1607 92 212 0
c (((SATLiteral(94) + SATLiteral(214) + SATLiteral(229))<=1)=tv=SATLiteral(1608))
-1608 -214 -229 0
-1608 -94 -229 0
-1608 -94 -214 0
1608 214 229 0
1608 94 229 0
1608 94 214 0
c (((SATLiteral(96) + SATLiteral(216) + SATLiteral(231))<=1)=tv=SATLiteral(1609))
-1609 -216 -231 0
-1609 -96 -231 0
-1609 -96 -216 0
1609 216 231 0
1609 96 231 0
1609 96 216 0
c (((SATLiteral(98) + SATLiteral(218) + SATLiteral(233))<=1)=tv=SATLiteral(1610))
-1610 -218 -233 0
-1610 -98 -233 0
-1610 -98 -218 0
1610 218 233 0
1610 98 233 0
1610 98 218 0
c (((SATLiteral(100) + SATLiteral(220) + SATLiteral(235))<=1)=tv=SATLiteral(1611))
-1611 -220 -235 0
-1611 -100 -235 0
-1611 -100 -220 0
1611 220 235 0
1611 100 235 0
1611 100 220 0
c (((SATLiteral(102) + SATLiteral(222) + SATLiteral(237))<=1)=tv=SATLiteral(1612))
-1612 -222 -237 0
-1612 -102 -237 0
-1612 -102 -222 0
1612 222 237 0
1612 102 237 0
1612 102 222 0
c (((SATLiteral(104) + SATLiteral(224) + SATLiteral(239))<=1)=tv=SATLiteral(1613))
-1613 -224 -239 0
-1613 -104 -239 0
-1613 -104 -224 0
1613 224 239 0
1613 104 239 0
1613 104 224 0
c (((SATLiteral(106) + SATLiteral(226) + SATLiteral(241))<=1)=tv=SATLiteral(1614))
-1614 -226 -241 0
-1614 -106 -241 0
-1614 -106 -226 0
1614 226 241 0
1614 106 241 0
1614 106 226 0
c (((SATLiteral(-105) + SATLiteral(-225) + SATLiteral(-240))<=1)=tv=SATLiteral(1615))
-1615 225 240 0
-1615 105 240 0
-1615 105 225 0
1615 -225 -240 0
1615 -105 -240 0
1615 -105 -225 0
c (((SATLiteral(122) + aux1906 + SATLiteral(242))<=1)=tv=SATLiteral(1616))
-1616 7677 0
-1616 -242 7676 0
-1616 -122 7676 0
-1616 -122 -242 0
1616 242 -7676 0
1616 122 -7676 0
1616 122 242 -7677 0
c (((SATLiteral(124) + aux1907 + SATLiteral(244))<=1)=tv=SATLiteral(1617))
-1617 7680 0
-1617 -244 7679 0
-1617 -124 7679 0
-1617 -124 -244 0
1617 244 -7679 0
1617 124 -7679 0
1617 124 244 -7680 0
c (((SATLiteral(126) + aux1908 + SATLiteral(246))<=1)=tv=SATLiteral(1618))
-1618 7683 0
-1618 -246 7682 0
-1618 -126 7682 0
-1618 -126 -246 0
1618 246 -7682 0
1618 126 -7682 0
1618 126 246 -7683 0
c (((SATLiteral(128) + aux1909 + SATLiteral(248))<=1)=tv=SATLiteral(1619))
-1619 7686 0
-1619 -248 7685 0
-1619 -128 7685 0
-1619 -128 -248 0
1619 248 -7685 0
1619 128 -7685 0
1619 128 248 -7686 0
c (((SATLiteral(130) + aux1910 + SATLiteral(250))<=1)=tv=SATLiteral(1620))
-1620 7689 0
-1620 -250 7688 0
-1620 -130 7688 0
-1620 -130 -250 0
1620 250 -7688 0
1620 130 -7688 0
1620 130 250 -7689 0
c (((SATLiteral(132) + aux1911 + SATLiteral(252))<=1)=tv=SATLiteral(1621))
-1621 7692 0
-1621 -252 7691 0
-1621 -132 7691 0
-1621 -132 -252 0
1621 252 -7691 0
1621 132 -7691 0
1621 132 252 -7692 0
c (((SATLiteral(134) + aux1912 + SATLiteral(254))<=1)=tv=SATLiteral(1622))
-1622 7695 0
-1622 -254 7694 0
-1622 -134 7694 0
-1622 -134 -254 0
1622 254 -7694 0
1622 134 -7694 0
1622 134 254 -7695 0
c (((SATLiteral(136) + aux1913 + SATLiteral(256))<=1)=tv=SATLiteral(1623))
-1623 7698 0
-1623 -256 7697 0
-1623 -136 7697 0
-1623 -136 -256 0
1623 256 -7697 0
1623 136 -7697 0
1623 136 256 -7698 0
c (((SATLiteral(-135) + aux1914 + SATLiteral(-255))<=1)=tv=SATLiteral(1624))
-1624 7701 0
-1624 255 7700 0
-1624 135 7700 0
-1624 135 255 0
1624 -255 -7700 0
1624 -135 -7700 0
1624 -135 -255 -7701 0
c (((SATLiteral(302) + SATLiteral(437) + SATLiteral(572))<=1)=tv=SATLiteral(1625))
-1625 -437 -572 0
-1625 -302 -572 0
-1625 -302 -437 0
1625 437 572 0
1625 302 572 0
1625 302 437 0
c (((SATLiteral(304) + SATLiteral(439) + SATLiteral(574))<=1)=tv=SATLiteral(1626))
-1626 -439 -574 0
-1626 -304 -574 0
-1626 -304 -439 0
1626 439 574 0
1626 304 574 0
1626 304 439 0
c (((SATLiteral(306) + SATLiteral(441) + SATLiteral(576))<=1)=tv=SATLiteral(1627))
-1627 -441 -576 0
-1627 -306 -576 0
-1627 -306 -441 0
1627 441 576 0
1627 306 576 0
1627 306 441 0
c (((SATLiteral(308) + SATLiteral(443) + SATLiteral(578))<=1)=tv=SATLiteral(1628))
-1628 -443 -578 0
-1628 -308 -578 0
-1628 -308 -443 0
1628 443 578 0
1628 308 578 0
1628 308 443 0
c (((SATLiteral(310) + SATLiteral(445) + SATLiteral(580))<=1)=tv=SATLiteral(1629))
-1629 -445 -580 0
-1629 -310 -580 0
-1629 -310 -445 0
1629 445 580 0
1629 310 580 0
1629 310 445 0
c (((SATLiteral(312) + SATLiteral(447) + SATLiteral(582))<=1)=tv=SATLiteral(1630))
-1630 -447 -582 0
-1630 -312 -582 0
-1630 -312 -447 0
1630 447 582 0
1630 312 582 0
1630 312 447 0
c (((SATLiteral(314) + SATLiteral(449) + SATLiteral(584))<=1)=tv=SATLiteral(1631))
-1631 -449 -584 0
-1631 -314 -584 0
-1631 -314 -449 0
1631 449 584 0
1631 314 584 0
1631 314 449 0
c (((SATLiteral(316) + SATLiteral(451) + SATLiteral(586))<=1)=tv=SATLiteral(1632))
-1632 -451 -586 0
-1632 -316 -586 0
-1632 -316 -451 0
1632 451 586 0
1632 316 586 0
1632 316 451 0
c (((SATLiteral(-315) + SATLiteral(-450) + SATLiteral(-585))<=1)=tv=SATLiteral(1633))
-1633 450 585 0
-1633 315 585 0
-1633 315 450 0
1633 -450 -585 0
1633 -315 -585 0
1633 -315 -450 0
c (((SATLiteral(407) + SATLiteral(422) + SATLiteral(542))<=1)=tv=SATLiteral(1634))
-1634 -422 -542 0
-1634 -407 -542 0
-1634 -407 -422 0
1634 422 542 0
1634 407 542 0
1634 407 422 0
c (((SATLiteral(409) + SATLiteral(424) + SATLiteral(544))<=1)=tv=SATLiteral(1635))
-1635 -424 -544 0
-1635 -409 -544 0
-1635 -409 -424 0
1635 424 544 0
1635 409 544 0
1635 409 424 0
c (((SATLiteral(411) + SATLiteral(426) + SATLiteral(546))<=1)=tv=SATLiteral(1636))
-1636 -426 -546 0
-1636 -411 -546 0
-1636 -411 -426 0
1636 426 546 0
1636 411 546 0
1636 411 426 0
c (((SATLiteral(413) + SATLiteral(428) + SATLiteral(548))<=1)=tv=SATLiteral(1637))
-1637 -428 -548 0
-1637 -413 -548 0
-1637 -413 -428 0
1637 428 548 0
1637 413 548 0
1637 413 428 0
c (((SATLiteral(415) + SATLiteral(430) + SATLiteral(550))<=1)=tv=SATLiteral(1638))
-1638 -430 -550 0
-1638 -415 -550 0
-1638 -415 -430 0
1638 430 550 0
1638 415 550 0
1638 415 430 0
c (((SATLiteral(417) + SATLiteral(432) + SATLiteral(552))<=1)=tv=SATLiteral(1639))
-1639 -432 -552 0
-1639 -417 -552 0
-1639 -417 -432 0
1639 432 552 0
1639 417 552 0
1639 417 432 0
c (((SATLiteral(419) + SATLiteral(434) + SATLiteral(554))<=1)=tv=SATLiteral(1640))
-1640 -434 -554 0
-1640 -419 -554 0
-1640 -419 -434 0
1640 434 554 0
1640 419 554 0
1640 419 434 0
c (((SATLiteral(421) + SATLiteral(436) + SATLiteral(556))<=1)=tv=SATLiteral(1641))
-1641 -436 -556 0
-1641 -421 -556 0
-1641 -421 -436 0
1641 436 556 0
1641 421 556 0
1641 421 436 0
c (((SATLiteral(-420) + SATLiteral(-435) + SATLiteral(-555))<=1)=tv=SATLiteral(1642))
-1642 435 555 0
-1642 420 555 0
-1642 420 435 0
1642 -435 -555 0
1642 -420 -555 0
1642 -420 -435 0
c (((aux1915 + SATLiteral(467) + SATLiteral(587))<=1)=tv=SATLiteral(1643))
-1643 7704 0
-1643 -587 7703 0
-1643 -467 7703 0
-1643 -467 -587 0
1643 587 -7703 0
1643 467 -7703 0
1643 467 587 -7704 0
c (((aux1916 + SATLiteral(469) + SATLiteral(589))<=1)=tv=SATLiteral(1644))
-1644 7707 0
-1644 -589 7706 0
-1644 -469 7706 0
-1644 -469 -589 0
1644 589 -7706 0
1644 469 -7706 0
1644 469 589 -7707 0
c (((aux1917 + SATLiteral(471) + SATLiteral(591))<=1)=tv=SATLiteral(1645))
-1645 7710 0
-1645 -591 7709 0
-1645 -471 7709 0
-1645 -471 -591 0
1645 591 -7709 0
1645 471 -7709 0
1645 471 591 -7710 0
c (((aux1918 + SATLiteral(473) + SATLiteral(593))<=1)=tv=SATLiteral(1646))
-1646 7713 0
-1646 -593 7712 0
-1646 -473 7712 0
-1646 -473 -593 0
1646 593 -7712 0
1646 473 -7712 0
1646 473 593 -7713 0
c (((aux1919 + SATLiteral(475) + SATLiteral(595))<=1)=tv=SATLiteral(1647))
-1647 7716 0
-1647 -595 7715 0
-1647 -475 7715 0
-1647 -475 -595 0
1647 595 -7715 0
1647 475 -7715 0
1647 475 595 -7716 0
c (((aux1920 + SATLiteral(477) + SATLiteral(597))<=1)=tv=SATLiteral(1648))
-1648 7719 0
-1648 -597 7718 0
-1648 -477 7718 0
-1648 -477 -597 0
1648 597 -7718 0
1648 477 -7718 0
1648 477 597 -7719 0
c (((aux1921 + SATLiteral(479) + SATLiteral(599))<=1)=tv=SATLiteral(1649))
-1649 7722 0
-1649 -599 7721 0
-1649 -479 7721 0
-1649 -479 -599 0
1649 599 -7721 0
1649 479 -7721 0
1649 479 599 -7722 0
c (((aux1922 + SATLiteral(481) + SATLiteral(601))<=1)=tv=SATLiteral(1650))
-1650 7725 0
-1650 -601 7724 0
-1650 -481 7724 0
-1650 -481 -601 0
1650 601 -7724 0
1650 481 -7724 0
1650 481 601 -7725 0
c (((aux1923 + SATLiteral(-480) + SATLiteral(-600))<=1)=tv=SATLiteral(1651))
-1651 7728 0
-1651 600 7727 0
-1651 480 7727 0
-1651 480 600 0
1651 -600 -7727 0
1651 -480 -7727 0
1651 -480 -600 -7728 0
c (((aux1924 + SATLiteral(497) + SATLiteral(617))<=1)=tv=SATLiteral(1652))
-1652 7731 0
-1652 -617 7730 0
-1652 -497 7730 0
-1652 -497 -617 0
1652 617 -7730 0
1652 497 -7730 0
1652 497 617 -7731 0
c (((aux1925 + SATLiteral(499) + SATLiteral(619))<=1)=tv=SATLiteral(1653))
-1653 7734 0
-1653 -619 7733 0
-1653 -499 7733 0
-1653 -499 -619 0
1653 619 -7733 0
1653 499 -7733 0
1653 499 619 -7734 0
c (((aux1926 + SATLiteral(501) + SATLiteral(621))<=1)=tv=SATLiteral(1654))
-1654 7737 0
-1654 -621 7736 0
-1654 -501 7736 0
-1654 -501 -621 0
1654 621 -7736 0
1654 501 -7736 0
1654 501 621 -7737 0
c (((aux1927 + SATLiteral(503) + SATLiteral(623))<=1)=tv=SATLiteral(1655))
-1655 7740 0
-1655 -623 7739 0
-1655 -503 7739 0
-1655 -503 -623 0
1655 623 -7739 0
1655 503 -7739 0
1655 503 623 -7740 0
c (((aux1928 + SATLiteral(505) + SATLiteral(625))<=1)=tv=SATLiteral(1656))
-1656 7743 0
-1656 -625 7742 0
-1656 -505 7742 0
-1656 -505 -625 0
1656 625 -7742 0
1656 505 -7742 0
1656 505 625 -7743 0
c (((aux1929 + SATLiteral(507) + SATLiteral(627))<=1)=tv=SATLiteral(1657))
-1657 7746 0
-1657 -627 7745 0
-1657 -507 7745 0
-1657 -507 -627 0
1657 627 -7745 0
1657 507 -7745 0
1657 507 627 -7746 0
c (((aux1930 + SATLiteral(509) + SATLiteral(629))<=1)=tv=SATLiteral(1658))
-1658 7749 0
-1658 -629 7748 0
-1658 -509 7748 0
-1658 -509 -629 0
1658 629 -7748 0
1658 509 -7748 0
1658 509 629 -7749 0
c (((aux1931 + SATLiteral(511) + SATLiteral(631))<=1)=tv=SATLiteral(1659))
-1659 7752 0
-1659 -631 7751 0
-1659 -511 7751 0
-1659 -511 -631 0
1659 631 -7751 0
1659 511 -7751 0
1659 511 631 -7752 0
c (((aux1932 + SATLiteral(-510) + SATLiteral(-630))<=1)=tv=SATLiteral(1660))
-1660 7755 0
-1660 630 7754 0
-1660 510 7754 0
-1660 510 630 0
1660 -630 -7754 0
1660 -510 -7754 0
1660 -510 -630 -7755 0
c (((SATLiteral(512) + SATLiteral(647) + SATLiteral(662))<=1)=tv=SATLiteral(1661))
-1661 -647 -662 0
-1661 -512 -662 0
-1661 -512 -647 0
1661 647 662 0
1661 512 662 0
1661 512 647 0
c (((SATLiteral(514) + SATLiteral(649) + SATLiteral(664))<=1)=tv=SATLiteral(1662))
-1662 -649 -664 0
-1662 -514 -664 0
-1662 -514 -649 0
1662 649 664 0
1662 514 664 0
1662 514 649 0
c (((SATLiteral(516) + SATLiteral(651) + SATLiteral(666))<=1)=tv=SATLiteral(1663))
-1663 -651 -666 0
-1663 -516 -666 0
-1663 -516 -651 0
1663 651 666 0
1663 516 666 0
1663 516 651 0
c (((SATLiteral(518) + SATLiteral(653) + SATLiteral(668))<=1)=tv=SATLiteral(1664))
-1664 -653 -668 0
-1664 -518 -668 0
-1664 -518 -653 0
1664 653 668 0
1664 518 668 0
1664 518 653 0
c (((SATLiteral(520) + SATLiteral(655) + SATLiteral(670))<=1)=tv=SATLiteral(1665))
-1665 -655 -670 0
-1665 -520 -670 0
-1665 -520 -655 0
1665 655 670 0
1665 520 670 0
1665 520 655 0
c (((SATLiteral(522) + SATLiteral(657) + SATLiteral(672))<=1)=tv=SATLiteral(1666))
-1666 -657 -672 0
-1666 -522 -672 0
-1666 -522 -657 0
1666 657 672 0
1666 522 672 0
1666 522 657 0
c (((SATLiteral(524) + SATLiteral(659) + SATLiteral(674))<=1)=tv=SATLiteral(1667))
-1667 -659 -674 0
-1667 -524 -674 0
-1667 -524 -659 0
1667 659 674 0
1667 524 674 0
1667 524 659 0
c (((SATLiteral(526) + SATLiteral(661) + SATLiteral(676))<=1)=tv=SATLiteral(1668))
-1668 -661 -676 0
-1668 -526 -676 0
-1668 -526 -661 0
1668 661 676 0
1668 526 676 0
1668 526 661 0
c (((SATLiteral(-525) + SATLiteral(-660) + SATLiteral(-675))<=1)=tv=SATLiteral(1669))
-1669 660 675 0
-1669 525 675 0
-1669 525 660 0
1669 -660 -675 0
1669 -525 -675 0
1669 -525 -660 0
c (((SATLiteral(692) + SATLiteral(707) + SATLiteral(557))<=1)=tv=SATLiteral(1670))
-1670 -707 -557 0
-1670 -692 -557 0
-1670 -692 -707 0
1670 707 557 0
1670 692 557 0
1670 692 707 0
c (((SATLiteral(694) + SATLiteral(709) + SATLiteral(559))<=1)=tv=SATLiteral(1671))
-1671 -709 -559 0
-1671 -694 -559 0
-1671 -694 -709 0
1671 709 559 0
1671 694 559 0
1671 694 709 0
c (((SATLiteral(696) + SATLiteral(711) + SATLiteral(561))<=1)=tv=SATLiteral(1672))
-1672 -711 -561 0
-1672 -696 -561 0
-1672 -696 -711 0
1672 711 561 0
1672 696 561 0
1672 696 711 0
c (((SATLiteral(698) + SATLiteral(713) + SATLiteral(563))<=1)=tv=SATLiteral(1673))
-1673 -713 -563 0
-1673 -698 -563 0
-1673 -698 -713 0
1673 713 563 0
1673 698 563 0
1673 698 713 0
c (((SATLiteral(700) + SATLiteral(715) + SATLiteral(565))<=1)=tv=SATLiteral(1674))
-1674 -715 -565 0
-1674 -700 -565 0
-1674 -700 -715 0
1674 715 565 0
1674 700 565 0
1674 700 715 0
c (((SATLiteral(702) + SATLiteral(717) + SATLiteral(567))<=1)=tv=SATLiteral(1675))
-1675 -717 -567 0
-1675 -702 -567 0
-1675 -702 -717 0
1675 717 567 0
1675 702 567 0
1675 702 717 0
c (((SATLiteral(704) + SATLiteral(719) + SATLiteral(569))<=1)=tv=SATLiteral(1676))
-1676 -719 -569 0
-1676 -704 -569 0
-1676 -704 -719 0
1676 719 569 0
1676 704 569 0
1676 704 719 0
c (((SATLiteral(706) + SATLiteral(721) + SATLiteral(571))<=1)=tv=SATLiteral(1677))
-1677 -721 -571 0
-1677 -706 -571 0
-1677 -706 -721 0
1677 721 571 0
1677 706 571 0
1677 706 721 0
c (((SATLiteral(-705) + SATLiteral(-720) + SATLiteral(-570))<=1)=tv=SATLiteral(1678))
-1678 720 570 0
-1678 705 570 0
-1678 705 720 0
1678 -720 -570 0
1678 -705 -570 0
1678 -705 -720 0
c (((SATLiteral(677) + SATLiteral(812) + SATLiteral(827))<=1)=tv=SATLiteral(1679))
-1679 -812 -827 0
-1679 -677 -827 0
-1679 -677 -812 0
1679 812 827 0
1679 677 827 0
1679 677 812 0
c (((SATLiteral(679) + SATLiteral(814) + SATLiteral(829))<=1)=tv=SATLiteral(1680))
-1680 -814 -829 0
-1680 -679 -829 0
-1680 -679 -814 0
1680 814 829 0
1680 679 829 0
1680 679 814 0
c (((SATLiteral(681) + SATLiteral(816) + SATLiteral(831))<=1)=tv=SATLiteral(1681))
-1681 -816 -831 0
-1681 -681 -831 0
-1681 -681 -816 0
1681 816 831 0
1681 681 831 0
1681 681 816 0
c (((SATLiteral(683) + SATLiteral(818) + SATLiteral(833))<=1)=tv=SATLiteral(1682))
-1682 -818 -833 0
-1682 -683 -833 0
-1682 -683 -818 0
1682 818 833 0
1682 683 833 0
1682 683 818 0
c (((SATLiteral(685) + SATLiteral(820) + SATLiteral(835))<=1)=tv=SATLiteral(1683))
-1683 -820 -835 0
-1683 -685 -835 0
-1683 -685 -820 0
1683 820 835 0
1683 685 835 0
1683 685 820 0
c (((SATLiteral(687) + SATLiteral(822) + SATLiteral(837))<=1)=tv=SATLiteral(1684))
-1684 -822 -837 0
-1684 -687 -837 0
-1684 -687 -822 0
1684 822 837 0
1684 687 837 0
1684 687 822 0
c (((SATLiteral(689) + SATLiteral(824) + SATLiteral(839))<=1)=tv=SATLiteral(1685))
-1685 -824 -839 0
-1685 -689 -839 0
-1685 -689 -824 0
1685 824 839 0
1685 689 839 0
1685 689 824 0
c (((SATLiteral(691) + SATLiteral(826) + SATLiteral(841))<=1)=tv=SATLiteral(1686))
-1686 -826 -841 0
-1686 -691 -841 0
-1686 -691 -826 0
1686 826 841 0
1686 691 841 0
1686 691 826 0
c (((SATLiteral(-690) + SATLiteral(-825) + SATLiteral(-840))<=1)=tv=SATLiteral(1687))
-1687 825 840 0
-1687 690 840 0
-1687 690 825 0
1687 -825 -840 0
1687 -690 -840 0
1687 -690 -825 0
c (((SATLiteral(722) + SATLiteral(737) + SATLiteral(752))<=1)=tv=SATLiteral(1688))
-1688 -737 -752 0
-1688 -722 -752 0
-1688 -722 -737 0
1688 737 752 0
1688 722 752 0
1688 722 737 0
c (((SATLiteral(724) + SATLiteral(739) + SATLiteral(754))<=1)=tv=SATLiteral(1689))
-1689 -739 -754 0
-1689 -724 -754 0
-1689 -724 -739 0
1689 739 754 0
1689 724 754 0
1689 724 739 0
c (((SATLiteral(726) + SATLiteral(741) + SATLiteral(756))<=1)=tv=SATLiteral(1690))
-1690 -741 -756 0
-1690 -726 -756 0
-1690 -726 -741 0
1690 741 756 0
1690 726 756 0
1690 726 741 0
c (((SATLiteral(728) + SATLiteral(743) + SATLiteral(758))<=1)=tv=SATLiteral(1691))
-1691 -743 -758 0
-1691 -728 -758 0
-1691 -728 -743 0
1691 743 758 0
1691 728 758 0
1691 728 743 0
c (((SATLiteral(730) + SATLiteral(745) + SATLiteral(760))<=1)=tv=SATLiteral(1692))
-1692 -745 -760 0
-1692 -730 -760 0
-1692 -730 -745 0
1692 745 760 0
1692 730 760 0
1692 730 745 0
c (((SATLiteral(732) + SATLiteral(747) + SATLiteral(762))<=1)=tv=SATLiteral(1693))
-1693 -747 -762 0
-1693 -732 -762 0
-1693 -732 -747 0
1693 747 762 0
1693 732 762 0
1693 732 747 0
c (((SATLiteral(734) + SATLiteral(749) + SATLiteral(764))<=1)=tv=SATLiteral(1694))
-1694 -749 -764 0
-1694 -734 -764 0
-1694 -734 -749 0
1694 749 764 0
1694 734 764 0
1694 734 749 0
c (((SATLiteral(736) + SATLiteral(751) + SATLiteral(766))<=1)=tv=SATLiteral(1695))
-1695 -751 -766 0
-1695 -736 -766 0
-1695 -736 -751 0
1695 751 766 0
1695 736 766 0
1695 736 751 0
c (((SATLiteral(-735) + SATLiteral(-750) + SATLiteral(-765))<=1)=tv=SATLiteral(1696))
-1696 750 765 0
-1696 735 765 0
-1696 735 750 0
1696 -750 -765 0
1696 -735 -765 0
1696 -735 -750 0
c (((SATLiteral(767) + SATLiteral(782) + SATLiteral(902))<=1)=tv=SATLiteral(1697))
-1697 -782 -902 0
-1697 -767 -902 0
-1697 -767 -782 0
1697 782 902 0
1697 767 902 0
1697 767 782 0
c (((SATLiteral(769) + SATLiteral(784) + SATLiteral(904))<=1)=tv=SATLiteral(1698))
-1698 -784 -904 0
-1698 -769 -904 0
-1698 -769 -784 0
1698 784 904 0
1698 769 904 0
1698 769 784 0
c (((SATLiteral(771) + SATLiteral(786) + SATLiteral(906))<=1)=tv=SATLiteral(1699))
-1699 -786 -906 0
-1699 -771 -906 0
-1699 -771 -786 0
1699 786 906 0
1699 771 906 0
1699 771 786 0
c (((SATLiteral(773) + SATLiteral(788) + SATLiteral(908))<=1)=tv=SATLiteral(1700))
-1700 -788 -908 0
-1700 -773 -908 0
-1700 -773 -788 0
1700 788 908 0
1700 773 908 0
1700 773 788 0
c (((SATLiteral(775) + SATLiteral(790) + SATLiteral(910))<=1)=tv=SATLiteral(1701))
-1701 -790 -910 0
-1701 -775 -910 0
-1701 -775 -790 0
1701 790 910 0
1701 775 910 0
1701 775 790 0
c (((SATLiteral(777) + SATLiteral(792) + SATLiteral(912))<=1)=tv=SATLiteral(1702))
-1702 -792 -912 0
-1702 -777 -912 0
-1702 -777 -792 0
1702 792 912 0
1702 777 912 0
1702 777 792 0
c (((SATLiteral(779) + SATLiteral(794) + SATLiteral(914))<=1)=tv=SATLiteral(1703))
-1703 -794 -914 0
-1703 -779 -914 0
-1703 -779 -794 0
1703 794 914 0
1703 779 914 0
1703 779 794 0
c (((SATLiteral(781) + SATLiteral(796) + SATLiteral(916))<=1)=tv=SATLiteral(1704))
-1704 -796 -916 0
-1704 -781 -916 0
-1704 -781 -796 0
1704 796 916 0
1704 781 916 0
1704 781 796 0
c (((SATLiteral(-780) + SATLiteral(-795) + SATLiteral(-915))<=1)=tv=SATLiteral(1705))
-1705 795 915 0
-1705 780 915 0
-1705 780 795 0
1705 -795 -915 0
1705 -780 -915 0
1705 -780 -795 0
c (((SATLiteral(797) + SATLiteral(917) + SATLiteral(932))<=1)=tv=SATLiteral(1706))
-1706 -917 -932 0
-1706 -797 -932 0
-1706 -797 -917 0
1706 917 932 0
1706 797 932 0
1706 797 917 0
c (((SATLiteral(799) + SATLiteral(919) + SATLiteral(934))<=1)=tv=SATLiteral(1707))
-1707 -919 -934 0
-1707 -799 -934 0
-1707 -799 -919 0
1707 919 934 0
1707 799 934 0
1707 799 919 0
c (((SATLiteral(801) + SATLiteral(921) + SATLiteral(936))<=1)=tv=SATLiteral(1708))
-1708 -921 -936 0
-1708 -801 -936 0
-1708 -801 -921 0
1708 921 936 0
1708 801 936 0
1708 801 921 0
c (((SATLiteral(803) + SATLiteral(923) + SATLiteral(938))<=1)=tv=SATLiteral(1709))
-1709 -923 -938 0
-1709 -803 -938 0
-1709 -803 -923 0
1709 923 938 0
1709 803 938 0
1709 803 923 0
c (((SATLiteral(805) + SATLiteral(925) + SATLiteral(940))<=1)=tv=SATLiteral(1710))
-1710 -925 -940 0
-1710 -805 -940 0
-1710 -805 -925 0
1710 925 940 0
1710 805 940 0
1710 805 925 0
c (((SATLiteral(807) + SATLiteral(927) + SATLiteral(942))<=1)=tv=SATLiteral(1711))
-1711 -927 -942 0
-1711 -807 -942 0
-1711 -807 -927 0
1711 927 942 0
1711 807 942 0
1711 807 927 0
c (((SATLiteral(809) + SATLiteral(929) + SATLiteral(944))<=1)=tv=SATLiteral(1712))
-1712 -929 -944 0
-1712 -809 -944 0
-1712 -809 -929 0
1712 929 944 0
1712 809 944 0
1712 809 929 0
c (((SATLiteral(811) + SATLiteral(931) + SATLiteral(946))<=1)=tv=SATLiteral(1713))
-1713 -931 -946 0
-1713 -811 -946 0
-1713 -811 -931 0
1713 931 946 0
1713 811 946 0
1713 811 931 0
c (((SATLiteral(-810) + SATLiteral(-930) + SATLiteral(-945))<=1)=tv=SATLiteral(1714))
-1714 930 945 0
-1714 810 945 0
-1714 810 930 0
1714 -930 -945 0
1714 -810 -945 0
1714 -810 -930 0
c (((SATLiteral(947) + SATLiteral(962) + SATLiteral(1082))<=1)=tv=SATLiteral(1715))
-1715 -962 -1082 0
-1715 -947 -1082 0
-1715 -947 -962 0
1715 962 1082 0
1715 947 1082 0
1715 947 962 0
c (((SATLiteral(949) + SATLiteral(964) + SATLiteral(1084))<=1)=tv=SATLiteral(1716))
-1716 -964 -1084 0
-1716 -949 -1084 0
-1716 -949 -964 0
1716 964 1084 0
1716 949 1084 0
1716 949 964 0
c (((SATLiteral(951) + SATLiteral(966) + SATLiteral(1086))<=1)=tv=SATLiteral(1717))
-1717 -966 -1086 0
-1717 -951 -1086 0
-1717 -951 -966 0
1717 966 1086 0
1717 951 1086 0
1717 951 966 0
c (((SATLiteral(953) + SATLiteral(968) + SATLiteral(1088))<=1)=tv=SATLiteral(1718))
-1718 -968 -1088 0
-1718 -953 -1088 0
-1718 -953 -968 0
1718 968 1088 0
1718 953 1088 0
1718 953 968 0
c (((SATLiteral(955) + SATLiteral(970) + SATLiteral(1090))<=1)=tv=SATLiteral(1719))
-1719 -970 -1090 0
-1719 -955 -1090 0
-1719 -955 -970 0
1719 970 1090 0
1719 955 1090 0
1719 955 970 0
c (((SATLiteral(957) + SATLiteral(972) + SATLiteral(1092))<=1)=tv=SATLiteral(1720))
-1720 -972 -1092 0
-1720 -957 -1092 0
-1720 -957 -972 0
1720 972 1092 0
1720 957 1092 0
1720 957 972 0
c (((SATLiteral(959) + SATLiteral(974) + SATLiteral(1094))<=1)=tv=SATLiteral(1721))
-1721 -974 -1094 0
-1721 -959 -1094 0
-1721 -959 -974 0
1721 974 1094 0
1721 959 1094 0
1721 959 974 0
c (((SATLiteral(961) + SATLiteral(976) + SATLiteral(1096))<=1)=tv=SATLiteral(1722))
-1722 -976 -1096 0
-1722 -961 -1096 0
-1722 -961 -976 0
1722 976 1096 0
1722 961 1096 0
1722 961 976 0
c (((SATLiteral(-960) + SATLiteral(-975) + SATLiteral(-1095))<=1)=tv=SATLiteral(1723))
-1723 975 1095 0
-1723 960 1095 0
-1723 960 975 0
1723 -975 -1095 0
1723 -960 -1095 0
1723 -960 -975 0
c (((SATLiteral(977) + SATLiteral(992) + SATLiteral(1127))<=1)=tv=SATLiteral(1724))
-1724 -992 -1127 0
-1724 -977 -1127 0
-1724 -977 -992 0
1724 992 1127 0
1724 977 1127 0
1724 977 992 0
c (((SATLiteral(979) + SATLiteral(994) + SATLiteral(1129))<=1)=tv=SATLiteral(1725))
-1725 -994 -1129 0
-1725 -979 -1129 0
-1725 -979 -994 0
1725 994 1129 0
1725 979 1129 0
1725 979 994 0
c (((SATLiteral(981) + SATLiteral(996) + SATLiteral(1131))<=1)=tv=SATLiteral(1726))
-1726 -996 -1131 0
-1726 -981 -1131 0
-1726 -981 -996 0
1726 996 1131 0
1726 981 1131 0
1726 981 996 0
c (((SATLiteral(983) + SATLiteral(998) + SATLiteral(1133))<=1)=tv=SATLiteral(1727))
-1727 -998 -1133 0
-1727 -983 -1133 0
-1727 -983 -998 0
1727 998 1133 0
1727 983 1133 0
1727 983 998 0
c (((SATLiteral(985) + SATLiteral(1000) + SATLiteral(1135))<=1)=tv=SATLiteral(1728))
-1728 -1000 -1135 0
-1728 -985 -1135 0
-1728 -985 -1000 0
1728 1000 1135 0
1728 985 1135 0
1728 985 1000 0
c (((SATLiteral(987) + SATLiteral(1002) + SATLiteral(1137))<=1)=tv=SATLiteral(1729))
-1729 -1002 -1137 0
-1729 -987 -1137 0
-1729 -987 -1002 0
1729 1002 1137 0
1729 987 1137 0
1729 987 1002 0
c (((SATLiteral(989) + SATLiteral(1004) + SATLiteral(1139))<=1)=tv=SATLiteral(1730))
-1730 -1004 -1139 0
-1730 -989 -1139 0
-1730 -989 -1004 0
1730 1004 1139 0
1730 989 1139 0
1730 989 1004 0
c (((SATLiteral(991) + SATLiteral(1006) + SATLiteral(1141))<=1)=tv=SATLiteral(1731))
-1731 -1006 -1141 0
-1731 -991 -1141 0
-1731 -991 -1006 0
1731 1006 1141 0
1731 991 1141 0
1731 991 1006 0
c (((SATLiteral(-990) + SATLiteral(-1005) + SATLiteral(-1140))<=1)=tv=SATLiteral(1732))
-1732 1005 1140 0
-1732 990 1140 0
-1732 990 1005 0
1732 -1005 -1140 0
1732 -990 -1140 0
1732 -990 -1005 0
c (((SATLiteral(1022) + SATLiteral(1157) + SATLiteral(1172))<=1)=tv=SATLiteral(1733))
-1733 -1157 -1172 0
-1733 -1022 -1172 0
-1733 -1022 -1157 0
1733 1157 1172 0
1733 1022 1172 0
1733 1022 1157 0
c (((SATLiteral(1024) + SATLiteral(1159) + SATLiteral(1174))<=1)=tv=SATLiteral(1734))
-1734 -1159 -1174 0
-1734 -1024 -1174 0
-1734 -1024 -1159 0
1734 1159 1174 0
1734 1024 1174 0
1734 1024 1159 0
c (((SATLiteral(1026) + SATLiteral(1161) + SATLiteral(1176))<=1)=tv=SATLiteral(1735))
-1735 -1161 -1176 0
-1735 -1026 -1176 0
-1735 -1026 -1161 0
1735 1161 1176 0
1735 1026 1176 0
1735 1026 1161 0
c (((SATLiteral(1028) + SATLiteral(1163) + SATLiteral(1178))<=1)=tv=SATLiteral(1736))
-1736 -1163 -1178 0
-1736 -1028 -1178 0
-1736 -1028 -1163 0
1736 1163 1178 0
1736 1028 1178 0
1736 1028 1163 0
c (((SATLiteral(1030) + SATLiteral(1165) + SATLiteral(1180))<=1)=tv=SATLiteral(1737))
-1737 -1165 -1180 0
-1737 -1030 -1180 0
-1737 -1030 -1165 0
1737 1165 1180 0
1737 1030 1180 0
1737 1030 1165 0
c (((SATLiteral(1032) + SATLiteral(1167) + SATLiteral(1182))<=1)=tv=SATLiteral(1738))
-1738 -1167 -1182 0
-1738 -1032 -1182 0
-1738 -1032 -1167 0
1738 1167 1182 0
1738 1032 1182 0
1738 1032 1167 0
c (((SATLiteral(1034) + SATLiteral(1169) + SATLiteral(1184))<=1)=tv=SATLiteral(1739))
-1739 -1169 -1184 0
-1739 -1034 -1184 0
-1739 -1034 -1169 0
1739 1169 1184 0
1739 1034 1184 0
1739 1034 1169 0
c (((SATLiteral(1036) + SATLiteral(1171) + SATLiteral(1186))<=1)=tv=SATLiteral(1740))
-1740 -1171 -1186 0
-1740 -1036 -1186 0
-1740 -1036 -1171 0
1740 1171 1186 0
1740 1036 1186 0
1740 1036 1171 0
c (((SATLiteral(-1035) + SATLiteral(-1170) + SATLiteral(-1185))<=1)=tv=SATLiteral(1741))
-1741 1170 1185 0
-1741 1035 1185 0
-1741 1035 1170 0
1741 -1170 -1185 0
1741 -1035 -1185 0
1741 -1035 -1170 0
c (((SATLiteral(1037) + SATLiteral(1052) + SATLiteral(1187))<=1)=tv=SATLiteral(1742))
-1742 -1052 -1187 0
-1742 -1037 -1187 0
-1742 -1037 -1052 0
1742 1052 1187 0
1742 1037 1187 0
1742 1037 1052 0
c (((SATLiteral(1039) + SATLiteral(1054) + SATLiteral(1189))<=1)=tv=SATLiteral(1743))
-1743 -1054 -1189 0
-1743 -1039 -1189 0
-1743 -1039 -1054 0
1743 1054 1189 0
1743 1039 1189 0
1743 1039 1054 0
c (((SATLiteral(1041) + SATLiteral(1056) + SATLiteral(1191))<=1)=tv=SATLiteral(1744))
-1744 -1056 -1191 0
-1744 -1041 -1191 0
-1744 -1041 -1056 0
1744 1056 1191 0
1744 1041 1191 0
1744 1041 1056 0
c (((SATLiteral(1043) + SATLiteral(1058) + SATLiteral(1193))<=1)=tv=SATLiteral(1745))
-1745 -1058 -1193 0
-1745 -1043 -1193 0
-1745 -1043 -1058 0
1745 1058 1193 0
1745 1043 1193 0
1745 1043 1058 0
c (((SATLiteral(1045) + SATLiteral(1060) + SATLiteral(1195))<=1)=tv=SATLiteral(1746))
-1746 -1060 -1195 0
-1746 -1045 -1195 0
-1746 -1045 -1060 0
1746 1060 1195 0
1746 1045 1195 0
1746 1045 1060 0
c (((SATLiteral(1047) + SATLiteral(1062) + SATLiteral(1197))<=1)=tv=SATLiteral(1747))
-1747 -1062 -1197 0
-1747 -1047 -1197 0
-1747 -1047 -1062 0
1747 1062 1197 0
1747 1047 1197 0
1747 1047 1062 0
c (((SATLiteral(1049) + SATLiteral(1064) + SATLiteral(1199))<=1)=tv=SATLiteral(1748))
-1748 -1064 -1199 0
-1748 -1049 -1199 0
-1748 -1049 -1064 0
1748 1064 1199 0
1748 1049 1199 0
1748 1049 1064 0
c (((SATLiteral(1051) + SATLiteral(1066) + SATLiteral(1201))<=1)=tv=SATLiteral(1749))
-1749 -1066 -1201 0
-1749 -1051 -1201 0
-1749 -1051 -1066 0
1749 1066 1201 0
1749 1051 1201 0
1749 1051 1066 0
c (((SATLiteral(-1050) + SATLiteral(-1065) + SATLiteral(-1200))<=1)=tv=SATLiteral(1750))
-1750 1065 1200 0
-1750 1050 1200 0
-1750 1050 1065 0
1750 -1065 -1200 0
1750 -1050 -1200 0
1750 -1050 -1065 0
c (SATLiteral(1275) -> SATLiteral(1306))
-1275 1306 0
c (SATLiteral(1276) -> SATLiteral(1307))
-1276 1307 0
c (SATLiteral(1277) -> SATLiteral(1308))
-1277 1308 0
c (SATLiteral(1278) -> SATLiteral(1309))
-1278 1309 0
c (SATLiteral(1279) -> SATLiteral(1310))
-1279 1310 0
c (SATLiteral(1280) -> SATLiteral(1311))
-1280 1311 0
c (SATLiteral(1281) -> SATLiteral(1312))
-1281 1312 0
c (SATLiteral(1282) -> SATLiteral(287))
-1282 287 0
c (SATLiteral(1283) -> SATLiteral(1313))
-1283 1313 0
c (SATLiteral(1284) -> SATLiteral(318))
-1284 318 0
c (SATLiteral(1285) -> SATLiteral(1314))
-1285 1314 0
c (SATLiteral(1286) -> SATLiteral(1315))
-1286 1315 0
c (SATLiteral(1287) -> SATLiteral(1316))
-1287 1316 0
c (SATLiteral(1288) -> SATLiteral(1317))
-1288 1317 0
c (SATLiteral(1289) -> SATLiteral(1318))
-1289 1318 0
c (SATLiteral(1290) -> SATLiteral(1319))
-1290 1319 0
c (SATLiteral(1291) -> SATLiteral(1320))
-1291 1320 0
c (SATLiteral(1292) -> SATLiteral(1321))
-1292 1321 0
c (SATLiteral(1293) -> SATLiteral(1322))
-1293 1322 0
c (SATLiteral(1294) -> SATLiteral(1323))
-1294 1323 0
c (SATLiteral(1295) -> SATLiteral(1324))
-1295 1324 0
c (SATLiteral(1296) -> SATLiteral(1325))
-1296 1325 0
c (SATLiteral(1297) -> SATLiteral(1326))
-1297 1326 0
c (SATLiteral(1298) -> SATLiteral(1327))
-1298 1327 0
c (SATLiteral(1299) -> SATLiteral(1328))
-1299 1328 0
c (SATLiteral(1300) -> SATLiteral(1329))
-1300 1329 0
c (SATLiteral(1301) -> SATLiteral(1330))
-1301 1330 0
c (SATLiteral(1302) -> SATLiteral(1331))
-1302 1331 0
c (SATLiteral(1303) -> SATLiteral(1332))
-1303 1332 0
c (SATLiteral(1304) -> SATLiteral(1333))
-1304 1333 0
c (SATLiteral(1305) -> SATLiteral(1334))
-1305 1334 0
c (SATLiteral(1245) -> SATLiteral(1335))
-1245 1335 0
c (SATLiteral(1249) -> SATLiteral(1336))
-1249 1336 0
c (SATLiteral(1250) -> SATLiteral(1337))
-1250 1337 0
c (SATLiteral(1254) -> SATLiteral(1338))
-1254 1338 0
c (SATLiteral(1255) -> SATLiteral(1339))
-1255 1339 0
c (SATLiteral(1256) -> SATLiteral(1340))
-1256 1340 0
c (SATLiteral(1266) -> SATLiteral(1341))
-1266 1341 0
c (SATLiteral(1267) -> SATLiteral(1342))
-1267 1342 0
c (SATLiteral(1270) -> SATLiteral(1343))
-1270 1343 0
c (SATLiteral(1273) -> SATLiteral(1344))
-1273 1344 0
c (SATLiteral(1274) -> SATLiteral(1345))
-1274 1345 0
c (SATLiteral(1217) -> SATLiteral(1346))
-1217 1346 0
c (SATLiteral(1217) -> SATLiteral(1347))
-1217 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1217) -> SATLiteral(1349))
-1217 1349 0
c (SATLiteral(1217) -> SATLiteral(1350))
-1217 1350 0
c (SATLiteral(1217) -> SATLiteral(1351))
-1217 1351 0
c (SATLiteral(1217) -> SATLiteral(1352))
-1217 1352 0
c (SATLiteral(1217) -> SATLiteral(1353))
-1217 1353 0
c (SATLiteral(1217) -> SATLiteral(1354))
-1217 1354 0
c (SATLiteral(1218) -> SATLiteral(1355))
-1218 1355 0
c (SATLiteral(1218) -> SATLiteral(1356))
-1218 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1218) -> SATLiteral(1358))
-1218 1358 0
c (SATLiteral(1218) -> SATLiteral(1359))
-1218 1359 0
c (SATLiteral(1218) -> SATLiteral(1360))
-1218 1360 0
c (SATLiteral(1218) -> SATLiteral(1361))
-1218 1361 0
c (SATLiteral(1218) -> SATLiteral(1362))
-1218 1362 0
c (SATLiteral(1218) -> SATLiteral(1363))
-1218 1363 0
c (SATLiteral(1219) -> SATLiteral(1364))
-1219 1364 0
c (SATLiteral(1219) -> SATLiteral(1365))
-1219 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1219) -> SATLiteral(1367))
-1219 1367 0
c (SATLiteral(1219) -> SATLiteral(1368))
-1219 1368 0
c (SATLiteral(1219) -> SATLiteral(1369))
-1219 1369 0
c (SATLiteral(1219) -> SATLiteral(1370))
-1219 1370 0
c (SATLiteral(1219) -> SATLiteral(1371))
-1219 1371 0
c (SATLiteral(1219) -> SATLiteral(1372))
-1219 1372 0
c (SATLiteral(1220) -> SATLiteral(1373))
-1220 1373 0
c (SATLiteral(1220) -> SATLiteral(1374))
-1220 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1220) -> SATLiteral(1376))
-1220 1376 0
c (SATLiteral(1220) -> SATLiteral(1377))
-1220 1377 0
c (SATLiteral(1220) -> SATLiteral(1378))
-1220 1378 0
c (SATLiteral(1220) -> SATLiteral(1379))
-1220 1379 0
c (SATLiteral(1220) -> SATLiteral(1380))
-1220 1380 0
c (SATLiteral(1220) -> SATLiteral(1381))
-1220 1381 0
c (SATLiteral(1221) -> SATLiteral(1382))
-1221 1382 0
c (SATLiteral(1221) -> SATLiteral(1383))
-1221 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1221) -> SATLiteral(1385))
-1221 1385 0
c (SATLiteral(1221) -> SATLiteral(1386))
-1221 1386 0
c (SATLiteral(1221) -> SATLiteral(1387))
-1221 1387 0
c (SATLiteral(1221) -> SATLiteral(1388))
-1221 1388 0
c (SATLiteral(1221) -> SATLiteral(1389))
-1221 1389 0
c (SATLiteral(1221) -> SATLiteral(1390))
-1221 1390 0
c (SATLiteral(1222) -> SATLiteral(1391))
-1222 1391 0
c (SATLiteral(1222) -> SATLiteral(1392))
-1222 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1222) -> SATLiteral(1394))
-1222 1394 0
c (SATLiteral(1222) -> SATLiteral(1395))
-1222 1395 0
c (SATLiteral(1222) -> SATLiteral(1396))
-1222 1396 0
c (SATLiteral(1222) -> SATLiteral(1397))
-1222 1397 0
c (SATLiteral(1222) -> SATLiteral(1398))
-1222 1398 0
c (SATLiteral(1222) -> SATLiteral(1399))
-1222 1399 0
c (SATLiteral(1223) -> SATLiteral(1400))
-1223 1400 0
c (SATLiteral(1223) -> SATLiteral(1401))
-1223 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1223) -> SATLiteral(1403))
-1223 1403 0
c (SATLiteral(1223) -> SATLiteral(1404))
-1223 1404 0
c (SATLiteral(1223) -> SATLiteral(1405))
-1223 1405 0
c (SATLiteral(1223) -> SATLiteral(1406))
-1223 1406 0
c (SATLiteral(1223) -> SATLiteral(1407))
-1223 1407 0
c (SATLiteral(1223) -> SATLiteral(1408))
-1223 1408 0
c (SATLiteral(1224) -> SATLiteral(1409))
-1224 1409 0
c (SATLiteral(1224) -> SATLiteral(1410))
-1224 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1224) -> SATLiteral(1412))
-1224 1412 0
c (SATLiteral(1224) -> SATLiteral(1413))
-1224 1413 0
c (SATLiteral(1224) -> SATLiteral(1414))
-1224 1414 0
c (SATLiteral(1224) -> SATLiteral(1415))
-1224 1415 0
c (SATLiteral(1224) -> SATLiteral(1416))
-1224 1416 0
c (SATLiteral(1224) -> SATLiteral(1417))
-1224 1417 0
c (SATLiteral(1225) -> SATLiteral(1418))
-1225 1418 0
c (SATLiteral(1225) -> SATLiteral(1419))
-1225 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1225) -> SATLiteral(1421))
-1225 1421 0
c (SATLiteral(1225) -> SATLiteral(1422))
-1225 1422 0
c (SATLiteral(1225) -> SATLiteral(1423))
-1225 1423 0
c (SATLiteral(1225) -> SATLiteral(1424))
-1225 1424 0
c (SATLiteral(1225) -> SATLiteral(1425))
-1225 1425 0
c (SATLiteral(1225) -> SATLiteral(1426))
-1225 1426 0
c (SATLiteral(1226) -> SATLiteral(1427))
-1226 1427 0
c (SATLiteral(1226) -> SATLiteral(1428))
-1226 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1226) -> SATLiteral(1430))
-1226 1430 0
c (SATLiteral(1226) -> SATLiteral(1431))
-1226 1431 0
c (SATLiteral(1226) -> SATLiteral(1432))
-1226 1432 0
c (SATLiteral(1226) -> SATLiteral(1433))
-1226 1433 0
c (SATLiteral(1226) -> SATLiteral(1434))
-1226 1434 0
c (SATLiteral(1226) -> SATLiteral(1435))
-1226 1435 0
c (SATLiteral(1227) -> SATLiteral(1436))
-1227 1436 0
c (SATLiteral(1227) -> SATLiteral(1437))
-1227 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1227) -> SATLiteral(1439))
-1227 1439 0
c (SATLiteral(1227) -> SATLiteral(1440))
-1227 1440 0
c (SATLiteral(1227) -> SATLiteral(1441))
-1227 1441 0
c (SATLiteral(1227) -> SATLiteral(1442))
-1227 1442 0
c (SATLiteral(1227) -> SATLiteral(1443))
-1227 1443 0
c (SATLiteral(1227) -> SATLiteral(1444))
-1227 1444 0
c (SATLiteral(1228) -> SATLiteral(1445))
-1228 1445 0
c (SATLiteral(1228) -> SATLiteral(1446))
-1228 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1228) -> SATLiteral(1448))
-1228 1448 0
c (SATLiteral(1228) -> SATLiteral(1449))
-1228 1449 0
c (SATLiteral(1228) -> SATLiteral(1450))
-1228 1450 0
c (SATLiteral(1228) -> SATLiteral(1451))
-1228 1451 0
c (SATLiteral(1228) -> SATLiteral(1452))
-1228 1452 0
c (SATLiteral(1228) -> SATLiteral(1453))
-1228 1453 0
c (SATLiteral(1229) -> SATLiteral(1454))
-1229 1454 0
c (SATLiteral(1229) -> SATLiteral(1455))
-1229 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1229) -> SATLiteral(1457))
-1229 1457 0
c (SATLiteral(1229) -> SATLiteral(1458))
-1229 1458 0
c (SATLiteral(1229) -> SATLiteral(1459))
-1229 1459 0
c (SATLiteral(1229) -> SATLiteral(1460))
-1229 1460 0
c (SATLiteral(1229) -> SATLiteral(1461))
-1229 1461 0
c (SATLiteral(1229) -> SATLiteral(1462))
-1229 1462 0
c (SATLiteral(1230) -> SATLiteral(1463))
-1230 1463 0
c (SATLiteral(1230) -> SATLiteral(1464))
-1230 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1230) -> SATLiteral(1466))
-1230 1466 0
c (SATLiteral(1230) -> SATLiteral(1467))
-1230 1467 0
c (SATLiteral(1230) -> SATLiteral(1468))
-1230 1468 0
c (SATLiteral(1230) -> SATLiteral(1469))
-1230 1469 0
c (SATLiteral(1230) -> SATLiteral(1470))
-1230 1470 0
c (SATLiteral(1230) -> SATLiteral(1471))
-1230 1471 0
c (SATLiteral(1231) -> SATLiteral(1472))
-1231 1472 0
c (SATLiteral(1231) -> SATLiteral(1473))
-1231 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1231) -> SATLiteral(1475))
-1231 1475 0
c (SATLiteral(1231) -> SATLiteral(1476))
-1231 1476 0
c (SATLiteral(1231) -> SATLiteral(1477))
-1231 1477 0
c (SATLiteral(1231) -> SATLiteral(1478))
-1231 1478 0
c (SATLiteral(1231) -> SATLiteral(1479))
-1231 1479 0
c (SATLiteral(1231) -> SATLiteral(1480))
-1231 1480 0
c (SATLiteral(1232) -> SATLiteral(1481))
-1232 1481 0
c (SATLiteral(1232) -> SATLiteral(1482))
-1232 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1232) -> SATLiteral(1484))
-1232 1484 0
c (SATLiteral(1232) -> SATLiteral(1485))
-1232 1485 0
c (SATLiteral(1232) -> SATLiteral(1486))
-1232 1486 0
c (SATLiteral(1232) -> SATLiteral(1487))
-1232 1487 0
c (SATLiteral(1232) -> SATLiteral(1488))
-1232 1488 0
c (SATLiteral(1232) -> SATLiteral(1489))
-1232 1489 0
c (SATLiteral(1233) -> SATLiteral(1490))
-1233 1490 0
c (SATLiteral(1233) -> SATLiteral(1491))
-1233 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1233) -> SATLiteral(1493))
-1233 1493 0
c (SATLiteral(1233) -> SATLiteral(1494))
-1233 1494 0
c (SATLiteral(1233) -> SATLiteral(1495))
-1233 1495 0
c (SATLiteral(1233) -> SATLiteral(1496))
-1233 1496 0
c (SATLiteral(1233) -> SATLiteral(1497))
-1233 1497 0
c (SATLiteral(1233) -> SATLiteral(1498))
-1233 1498 0
c (SATLiteral(1234) -> SATLiteral(1499))
-1234 1499 0
c (SATLiteral(1234) -> SATLiteral(1500))
-1234 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1234) -> SATLiteral(1502))
-1234 1502 0
c (SATLiteral(1234) -> SATLiteral(1503))
-1234 1503 0
c (SATLiteral(1234) -> SATLiteral(1504))
-1234 1504 0
c (SATLiteral(1234) -> SATLiteral(1505))
-1234 1505 0
c (SATLiteral(1234) -> SATLiteral(1506))
-1234 1506 0
c (SATLiteral(1234) -> SATLiteral(1507))
-1234 1507 0
c (SATLiteral(1235) -> SATLiteral(1508))
-1235 1508 0
c (SATLiteral(1235) -> SATLiteral(1509))
-1235 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1235) -> SATLiteral(1511))
-1235 1511 0
c (SATLiteral(1235) -> SATLiteral(1512))
-1235 1512 0
c (SATLiteral(1235) -> SATLiteral(1513))
-1235 1513 0
c (SATLiteral(1235) -> SATLiteral(1514))
-1235 1514 0
c (SATLiteral(1235) -> SATLiteral(1515))
-1235 1515 0
c (SATLiteral(1235) -> SATLiteral(1516))
-1235 1516 0
c (SATLiteral(1236) -> SATLiteral(1517))
-1236 1517 0
c (SATLiteral(1236) -> SATLiteral(1518))
-1236 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1236) -> SATLiteral(1520))
-1236 1520 0
c (SATLiteral(1236) -> SATLiteral(1521))
-1236 1521 0
c (SATLiteral(1236) -> SATLiteral(1522))
-1236 1522 0
c (SATLiteral(1236) -> SATLiteral(1523))
-1236 1523 0
c (SATLiteral(1236) -> SATLiteral(1524))
-1236 1524 0
c (SATLiteral(1236) -> SATLiteral(1525))
-1236 1525 0
c (SATLiteral(1237) -> SATLiteral(1526))
-1237 1526 0
c (SATLiteral(1237) -> SATLiteral(1527))
-1237 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1237) -> SATLiteral(1529))
-1237 1529 0
c (SATLiteral(1237) -> SATLiteral(1530))
-1237 1530 0
c (SATLiteral(1237) -> SATLiteral(1531))
-1237 1531 0
c (SATLiteral(1237) -> SATLiteral(1532))
-1237 1532 0
c (SATLiteral(1237) -> SATLiteral(1533))
-1237 1533 0
c (SATLiteral(1237) -> SATLiteral(1534))
-1237 1534 0
c (SATLiteral(1238) -> SATLiteral(1535))
-1238 1535 0
c (SATLiteral(1238) -> SATLiteral(1536))
-1238 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1238) -> SATLiteral(1538))
-1238 1538 0
c (SATLiteral(1238) -> SATLiteral(1539))
-1238 1539 0
c (SATLiteral(1238) -> SATLiteral(1540))
-1238 1540 0
c (SATLiteral(1238) -> SATLiteral(1541))
-1238 1541 0
c (SATLiteral(1238) -> SATLiteral(1542))
-1238 1542 0
c (SATLiteral(1238) -> SATLiteral(1543))
-1238 1543 0
c (SATLiteral(1239) -> SATLiteral(1544))
-1239 1544 0
c (SATLiteral(1239) -> SATLiteral(1545))
-1239 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1239) -> SATLiteral(1547))
-1239 1547 0
c (SATLiteral(1239) -> SATLiteral(1548))
-1239 1548 0
c (SATLiteral(1239) -> SATLiteral(1549))
-1239 1549 0
c (SATLiteral(1239) -> SATLiteral(1550))
-1239 1550 0
c (SATLiteral(1239) -> SATLiteral(1551))
-1239 1551 0
c (SATLiteral(1239) -> SATLiteral(1552))
-1239 1552 0
c (SATLiteral(1240) -> SATLiteral(1553))
-1240 1553 0
c (SATLiteral(1240) -> SATLiteral(1554))
-1240 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1240) -> SATLiteral(1556))
-1240 1556 0
c (SATLiteral(1240) -> SATLiteral(1557))
-1240 1557 0
c (SATLiteral(1240) -> SATLiteral(1558))
-1240 1558 0
c (SATLiteral(1240) -> SATLiteral(1559))
-1240 1559 0
c (SATLiteral(1240) -> SATLiteral(1560))
-1240 1560 0
c (SATLiteral(1240) -> SATLiteral(1561))
-1240 1561 0
c (SATLiteral(1241) -> SATLiteral(1562))
-1241 1562 0
c (SATLiteral(1241) -> SATLiteral(1563))
-1241 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1241) -> SATLiteral(1565))
-1241 1565 0
c (SATLiteral(1241) -> SATLiteral(1566))
-1241 1566 0
c (SATLiteral(1241) -> SATLiteral(1567))
-1241 1567 0
c (SATLiteral(1241) -> SATLiteral(1568))
-1241 1568 0
c (SATLiteral(1241) -> SATLiteral(1569))
-1241 1569 0
c (SATLiteral(1241) -> SATLiteral(1570))
-1241 1570 0
c (SATLiteral(1242) -> SATLiteral(1571))
-1242 1571 0
c (SATLiteral(1242) -> SATLiteral(1572))
-1242 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1242) -> SATLiteral(1574))
-1242 1574 0
c (SATLiteral(1242) -> SATLiteral(1575))
-1242 1575 0
c (SATLiteral(1242) -> SATLiteral(1576))
-1242 1576 0
c (SATLiteral(1242) -> SATLiteral(1577))
-1242 1577 0
c (SATLiteral(1242) -> SATLiteral(1578))
-1242 1578 0
c (SATLiteral(1242) -> SATLiteral(1579))
-1242 1579 0
c (SATLiteral(1243) -> SATLiteral(1580))
-1243 1580 0
c (SATLiteral(1243) -> SATLiteral(1581))
-1243 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1243) -> SATLiteral(1583))
-1243 1583 0
c (SATLiteral(1243) -> SATLiteral(1584))
-1243 1584 0
c (SATLiteral(1243) -> SATLiteral(1585))
-1243 1585 0
c (SATLiteral(1243) -> SATLiteral(1586))
-1243 1586 0
c (SATLiteral(1243) -> SATLiteral(1587))
-1243 1587 0
c (SATLiteral(1243) -> SATLiteral(1588))
-1243 1588 0
c (SATLiteral(1244) -> SATLiteral(1589))
-1244 1589 0
c (SATLiteral(1244) -> SATLiteral(1590))
-1244 1590 0
c (SATLiteral(1244) -> SATLiteral(1591))
-1244 1591 0
c (SATLiteral(1244) -> SATLiteral(1592))
-1244 1592 0
c (SATLiteral(1244) -> SATLiteral(1593))
-1244 1593 0
c (SATLiteral(1244) -> SATLiteral(1594))
-1244 1594 0
c (SATLiteral(1244) -> SATLiteral(1595))
-1244 1595 0
c (SATLiteral(1244) -> SATLiteral(1596))
-1244 1596 0
c (SATLiteral(1244) -> SATLiteral(1597))
-1244 1597 0
c (SATLiteral(1246) -> SATLiteral(1598))
-1246 1598 0
c (SATLiteral(1246) -> SATLiteral(1599))
-1246 1599 0
c (SATLiteral(1246) -> SATLiteral(1600))
-1246 1600 0
c (SATLiteral(1246) -> SATLiteral(1601))
-1246 1601 0
c (SATLiteral(1246) -> SATLiteral(1602))
-1246 1602 0
c (SATLiteral(1246) -> SATLiteral(1603))
-1246 1603 0
c (SATLiteral(1246) -> SATLiteral(1604))
-1246 1604 0
c (SATLiteral(1246) -> SATLiteral(1605))
-1246 1605 0
c (SATLiteral(1246) -> SATLiteral(1606))
-1246 1606 0
c (SATLiteral(1247) -> SATLiteral(1607))
-1247 1607 0
c (SATLiteral(1247) -> SATLiteral(1608))
-1247 1608 0
c (SATLiteral(1247) -> SATLiteral(1609))
-1247 1609 0
c (SATLiteral(1247) -> SATLiteral(1610))
-1247 1610 0
c (SATLiteral(1247) -> SATLiteral(1611))
-1247 1611 0
c (SATLiteral(1247) -> SATLiteral(1612))
-1247 1612 0
c (SATLiteral(1247) -> SATLiteral(1613))
-1247 1613 0
c (SATLiteral(1247) -> SATLiteral(1614))
-1247 1614 0
c (SATLiteral(1247) -> SATLiteral(1615))
-1247 1615 0
c (SATLiteral(1248) -> SATLiteral(1616))
-1248 1616 0
c (SATLiteral(1248) -> SATLiteral(1617))
-1248 1617 0
c (SATLiteral(1248) -> SATLiteral(1618))
-1248 1618 0
c (SATLiteral(1248) -> SATLiteral(1619))
-1248 1619 0
c (SATLiteral(1248) -> SATLiteral(1620))
-1248 1620 0
c (SATLiteral(1248) -> SATLiteral(1621))
-1248 1621 0
c (SATLiteral(1248) -> SATLiteral(1622))
-1248 1622 0
c (SATLiteral(1248) -> SATLiteral(1623))
-1248 1623 0
c (SATLiteral(1248) -> SATLiteral(1624))
-1248 1624 0
c (SATLiteral(1252) -> SATLiteral(1625))
-1252 1625 0
c (SATLiteral(1252) -> SATLiteral(1626))
-1252 1626 0
c (SATLiteral(1252) -> SATLiteral(1627))
-1252 1627 0
c (SATLiteral(1252) -> SATLiteral(1628))
-1252 1628 0
c (SATLiteral(1252) -> SATLiteral(1629))
-1252 1629 0
c (SATLiteral(1252) -> SATLiteral(1630))
-1252 1630 0
c (SATLiteral(1252) -> SATLiteral(1631))
-1252 1631 0
c (SATLiteral(1252) -> SATLiteral(1632))
-1252 1632 0
c (SATLiteral(1252) -> SATLiteral(1633))
-1252 1633 0
c (SATLiteral(1257) -> SATLiteral(1634))
-1257 1634 0
c (SATLiteral(1257) -> SATLiteral(1635))
-1257 1635 0
c (SATLiteral(1257) -> SATLiteral(1636))
-1257 1636 0
c (SATLiteral(1257) -> SATLiteral(1637))
-1257 1637 0
c (SATLiteral(1257) -> SATLiteral(1638))
-1257 1638 0
c (SATLiteral(1257) -> SATLiteral(1639))
-1257 1639 0
c (SATLiteral(1257) -> SATLiteral(1640))
-1257 1640 0
c (SATLiteral(1257) -> SATLiteral(1641))
-1257 1641 0
c (SATLiteral(1257) -> SATLiteral(1642))
-1257 1642 0
c (SATLiteral(1258) -> SATLiteral(1643))
-1258 1643 0
c (SATLiteral(1258) -> SATLiteral(1644))
-1258 1644 0
c (SATLiteral(1258) -> SATLiteral(1645))
-1258 1645 0
c (SATLiteral(1258) -> SATLiteral(1646))
-1258 1646 0
c (SATLiteral(1258) -> SATLiteral(1647))
-1258 1647 0
c (SATLiteral(1258) -> SATLiteral(1648))
-1258 1648 0
c (SATLiteral(1258) -> SATLiteral(1649))
-1258 1649 0
c (SATLiteral(1258) -> SATLiteral(1650))
-1258 1650 0
c (SATLiteral(1258) -> SATLiteral(1651))
-1258 1651 0
c (SATLiteral(1259) -> SATLiteral(1652))
-1259 1652 0
c (SATLiteral(1259) -> SATLiteral(1653))
-1259 1653 0
c (SATLiteral(1259) -> SATLiteral(1654))
-1259 1654 0
c (SATLiteral(1259) -> SATLiteral(1655))
-1259 1655 0
c (SATLiteral(1259) -> SATLiteral(1656))
-1259 1656 0
c (SATLiteral(1259) -> SATLiteral(1657))
-1259 1657 0
c (SATLiteral(1259) -> SATLiteral(1658))
-1259 1658 0
c (SATLiteral(1259) -> SATLiteral(1659))
-1259 1659 0
c (SATLiteral(1259) -> SATLiteral(1660))
-1259 1660 0
c (SATLiteral(1260) -> SATLiteral(1661))
-1260 1661 0
c (SATLiteral(1260) -> SATLiteral(1662))
-1260 1662 0
c (SATLiteral(1260) -> SATLiteral(1663))
-1260 1663 0
c (SATLiteral(1260) -> SATLiteral(1664))
-1260 1664 0
c (SATLiteral(1260) -> SATLiteral(1665))
-1260 1665 0
c (SATLiteral(1260) -> SATLiteral(1666))
-1260 1666 0
c (SATLiteral(1260) -> SATLiteral(1667))
-1260 1667 0
c (SATLiteral(1260) -> SATLiteral(1668))
-1260 1668 0
c (SATLiteral(1260) -> SATLiteral(1669))
-1260 1669 0
c (SATLiteral(1261) -> SATLiteral(1670))
-1261 1670 0
c (SATLiteral(1261) -> SATLiteral(1671))
-1261 1671 0
c (SATLiteral(1261) -> SATLiteral(1672))
-1261 1672 0
c (SATLiteral(1261) -> SATLiteral(1673))
-1261 1673 0
c (SATLiteral(1261) -> SATLiteral(1674))
-1261 1674 0
c (SATLiteral(1261) -> SATLiteral(1675))
-1261 1675 0
c (SATLiteral(1261) -> SATLiteral(1676))
-1261 1676 0
c (SATLiteral(1261) -> SATLiteral(1677))
-1261 1677 0
c (SATLiteral(1261) -> SATLiteral(1678))
-1261 1678 0
c (SATLiteral(1262) -> SATLiteral(1679))
-1262 1679 0
c (SATLiteral(1262) -> SATLiteral(1680))
-1262 1680 0
c (SATLiteral(1262) -> SATLiteral(1681))
-1262 1681 0
c (SATLiteral(1262) -> SATLiteral(1682))
-1262 1682 0
c (SATLiteral(1262) -> SATLiteral(1683))
-1262 1683 0
c (SATLiteral(1262) -> SATLiteral(1684))
-1262 1684 0
c (SATLiteral(1262) -> SATLiteral(1685))
-1262 1685 0
c (SATLiteral(1262) -> SATLiteral(1686))
-1262 1686 0
c (SATLiteral(1262) -> SATLiteral(1687))
-1262 1687 0
c (SATLiteral(1263) -> SATLiteral(1688))
-1263 1688 0
c (SATLiteral(1263) -> SATLiteral(1689))
-1263 1689 0
c (SATLiteral(1263) -> SATLiteral(1690))
-1263 1690 0
c (SATLiteral(1263) -> SATLiteral(1691))
-1263 1691 0
c (SATLiteral(1263) -> SATLiteral(1692))
-1263 1692 0
c (SATLiteral(1263) -> SATLiteral(1693))
-1263 1693 0
c (SATLiteral(1263) -> SATLiteral(1694))
-1263 1694 0
c (SATLiteral(1263) -> SATLiteral(1695))
-1263 1695 0
c (SATLiteral(1263) -> SATLiteral(1696))
-1263 1696 0
c (SATLiteral(1264) -> SATLiteral(1697))
-1264 1697 0
c (SATLiteral(1264) -> SATLiteral(1698))
-1264 1698 0
c (SATLiteral(1264) -> SATLiteral(1699))
-1264 1699 0
c (SATLiteral(1264) -> SATLiteral(1700))
-1264 1700 0
c (SATLiteral(1264) -> SATLiteral(1701))
-1264 1701 0
c (SATLiteral(1264) -> SATLiteral(1702))
-1264 1702 0
c (SATLiteral(1264) -> SATLiteral(1703))
-1264 1703 0
c (SATLiteral(1264) -> SATLiteral(1704))
-1264 1704 0
c (SATLiteral(1264) -> SATLiteral(1705))
-1264 1705 0
c (SATLiteral(1265) -> SATLiteral(1706))
-1265 1706 0
c (SATLiteral(1265) -> SATLiteral(1707))
-1265 1707 0
c (SATLiteral(1265) -> SATLiteral(1708))
-1265 1708 0
c (SATLiteral(1265) -> SATLiteral(1709))
-1265 1709 0
c (SATLiteral(1265) -> SATLiteral(1710))
-1265 1710 0
c (SATLiteral(1265) -> SATLiteral(1711))
-1265 1711 0
c (SATLiteral(1265) -> SATLiteral(1712))
-1265 1712 0
c (SATLiteral(1265) -> SATLiteral(1713))
-1265 1713 0
c (SATLiteral(1265) -> SATLiteral(1714))
-1265 1714 0
c (SATLiteral(1268) -> SATLiteral(1715))
-1268 1715 0
c (SATLiteral(1268) -> SATLiteral(1716))
-1268 1716 0
c (SATLiteral(1268) -> SATLiteral(1717))
-1268 1717 0
c (SATLiteral(1268) -> SATLiteral(1718))
-1268 1718 0
c (SATLiteral(1268) -> SATLiteral(1719))
-1268 1719 0
c (SATLiteral(1268) -> SATLiteral(1720))
-1268 1720 0
c (SATLiteral(1268) -> SATLiteral(1721))
-1268 1721 0
c (SATLiteral(1268) -> SATLiteral(1722))
-1268 1722 0
c (SATLiteral(1268) -> SATLiteral(1723))
-1268 1723 0
c (SATLiteral(1269) -> SATLiteral(1724))
-1269 1724 0
c (SATLiteral(1269) -> SATLiteral(1725))
-1269 1725 0
c (SATLiteral(1269) -> SATLiteral(1726))
-1269 1726 0
c (SATLiteral(1269) -> SATLiteral(1727))
-1269 1727 0
c (SATLiteral(1269) -> SATLiteral(1728))
-1269 1728 0
c (SATLiteral(1269) -> SATLiteral(1729))
-1269 1729 0
c (SATLiteral(1269) -> SATLiteral(1730))
-1269 1730 0
c (SATLiteral(1269) -> SATLiteral(1731))
-1269 1731 0
c (SATLiteral(1269) -> SATLiteral(1732))
-1269 1732 0
c (SATLiteral(1271) -> SATLiteral(1733))
-1271 1733 0
c (SATLiteral(1271) -> SATLiteral(1734))
-1271 1734 0
c (SATLiteral(1271) -> SATLiteral(1735))
-1271 1735 0
c (SATLiteral(1271) -> SATLiteral(1736))
-1271 1736 0
c (SATLiteral(1271) -> SATLiteral(1737))
-1271 1737 0
c (SATLiteral(1271) -> SATLiteral(1738))
-1271 1738 0
c (SATLiteral(1271) -> SATLiteral(1739))
-1271 1739 0
c (SATLiteral(1271) -> SATLiteral(1740))
-1271 1740 0
c (SATLiteral(1271) -> SATLiteral(1741))
-1271 1741 0
c (SATLiteral(1272) -> SATLiteral(1742))
-1272 1742 0
c (SATLiteral(1272) -> SATLiteral(1743))
-1272 1743 0
c (SATLiteral(1272) -> SATLiteral(1744))
-1272 1744 0
c (SATLiteral(1272) -> SATLiteral(1745))
-1272 1745 0
c (SATLiteral(1272) -> SATLiteral(1746))
-1272 1746 0
c (SATLiteral(1272) -> SATLiteral(1747))
-1272 1747 0
c (SATLiteral(1272) -> SATLiteral(1748))
-1272 1748 0
c (SATLiteral(1272) -> SATLiteral(1749))
-1272 1749 0
c (SATLiteral(1272) -> SATLiteral(1750))
-1272 1750 0
c (( - aux445 + shift(x_00001_00009, -1) + shift(x_00002_00008, -1))<=0)
242 -1751 0
243 -1752 0
245 -1754 0
247 -1756 0
249 -1758 0
251 -1760 0
253 -1762 0
255 -1764 0
122 -1751 0
122 242 -1752 0
122 243 -1754 0
122 245 -1756 0
122 247 -1758 0
122 249 -1760 0
122 251 -1762 0
122 253 -1764 0
122 255 -1766 0
123 -1752 0
123 242 -1754 0
123 243 -1756 0
123 245 -1758 0
123 247 -1760 0
123 249 -1762 0
123 251 -1764 0
123 253 -1766 0
123 255 -1768 0
125 -1754 0
125 242 -1756 0
125 243 -1758 0
125 245 -1760 0
125 247 -1762 0
125 249 -1764 0
125 251 -1766 0
125 253 -1768 0
125 255 -1770 0
127 -1756 0
127 242 -1758 0
127 243 -1760 0
127 245 -1762 0
127 247 -1764 0
127 249 -1766 0
127 251 -1768 0
127 253 -1770 0
127 255 -1772 0
129 -1758 0
129 242 -1760 0
129 243 -1762 0
129 245 -1764 0
129 247 -1766 0
129 249 -1768 0
129 251 -1770 0
129 253 -1772 0
129 255 -1774 0
131 -1760 0
131 242 -1762 0
131 243 -1764 0
131 245 -1766 0
131 247 -1768 0
131 249 -1770 0
131 251 -1772 0
131 253 -1774 0
131 255 -1776 0
133 -1762 0
133 242 -1764 0
133 243 -1766 0
133 245 -1768 0
133 247 -1770 0
133 249 -1772 0
133 251 -1774 0
133 253 -1776 0
133 255 -1778 0
135 -1764 0
135 242 -1766 0
135 243 -1768 0
135 245 -1770 0
135 247 -1772 0
135 249 -1774 0
135 251 -1776 0
135 253 -1778 0
135 255 -1780 0
c (0<=( - aux445 + shift(x_00001_00009, -1) + shift(x_00002_00008, -1)))
-255 1780 0
-253 1778 0
-251 1776 0
-249 1774 0
-247 1772 0
-245 1770 0
-243 1768 0
-242 1766 0
-135 1780 0
-135 -255 1778 0
-135 -253 1776 0
-135 -251 1774 0
-135 -249 1772 0
-135 -247 1770 0
-135 -245 1768 0
-135 -243 1766 0
-135 -242 1764 0
-133 1778 0
-133 -255 1776 0
-133 -253 1774 0
-133 -251 1772 0
-133 -249 1770 0
-133 -247 1768 0
-133 -245 1766 0
-133 -243 1764 0
-133 -242 1762 0
-131 1776 0
-131 -255 1774 0
-131 -253 1772 0
-131 -251 1770 0
-131 -249 1768 0
-131 -247 1766 0
-131 -245 1764 0
-131 -243 1762 0
-131 -242 1760 0
-129 1774 0
-129 -255 1772 0
-129 -253 1770 0
-129 -251 1768 0
-129 -249 1766 0
-129 -247 1764 0
-129 -245 1762 0
-129 -243 1760 0
-129 -242 1758 0
-127 1772 0
-127 -255 1770 0
-127 -253 1768 0
-127 -251 1766 0
-127 -249 1764 0
-127 -247 1762 0
-127 -245 1760 0
-127 -243 1758 0
-127 -242 1756 0
-125 1770 0
-125 -255 1768 0
-125 -253 1766 0
-125 -251 1764 0
-125 -249 1762 0
-125 -247 1760 0
-125 -245 1758 0
-125 -243 1756 0
-125 -242 1754 0
-123 1768 0
-123 -255 1766 0
-123 -253 1764 0
-123 -251 1762 0
-123 -249 1760 0
-123 -247 1758 0
-123 -245 1756 0
-123 -243 1754 0
-123 -242 1752 0
-122 1766 0
-122 -255 1764 0
-122 -253 1762 0
-122 -251 1760 0
-122 -249 1758 0
-122 -247 1756 0
-122 -245 1754 0
-122 -243 1752 0
-122 -242 1751 0
c (( - aux446 + shift(x_00005_00005, -1) + shift(x_00004_00004, -1))<=0)
452 -1782 0
453 -1783 0
455 -1785 0
457 -1787 0
459 -1789 0
461 -1791 0
463 -1793 0
465 -1795 0
602 -1782 0
602 452 -1783 0
602 453 -1785 0
602 455 -1787 0
602 457 -1789 0
602 459 -1791 0
602 461 -1793 0
602 463 -1795 0
602 465 -1797 0
603 -1783 0
603 452 -1785 0
603 453 -1787 0
603 455 -1789 0
603 457 -1791 0
603 459 -1793 0
603 461 -1795 0
603 463 -1797 0
603 465 -1799 0
605 -1785 0
605 452 -1787 0
605 453 -1789 0
605 455 -1791 0
605 457 -1793 0
605 459 -1795 0
605 461 -1797 0
605 463 -1799 0
605 465 -1801 0
607 -1787 0
607 452 -1789 0
607 453 -1791 0
607 455 -1793 0
607 457 -1795 0
607 459 -1797 0
607 461 -1799 0
607 463 -1801 0
607 465 -1803 0
609 -1789 0
609 452 -1791 0
609 453 -1793 0
609 455 -1795 0
609 457 -1797 0
609 459 -1799 0
609 461 -1801 0
609 463 -1803 0
609 465 -1805 0
611 -1791 0
611 452 -1793 0
611 453 -1795 0
611 455 -1797 0
611 457 -1799 0
611 459 -1801 0
611 461 -1803 0
611 463 -1805 0
611 465 -1807 0
613 -1793 0
613 452 -1795 0
613 453 -1797 0
613 455 -1799 0
613 457 -1801 0
613 459 -1803 0
613 461 -1805 0
613 463 -1807 0
613 465 -1809 0
615 -1795 0
615 452 -1797 0
615 453 -1799 0
615 455 -1801 0
615 457 -1803 0
615 459 -1805 0
615 461 -1807 0
615 463 -1809 0
615 465 -1811 0
c (0<=( - aux446 + shift(x_00005_00005, -1) + shift(x_00004_00004, -1)))
-465 1811 0
-463 1809 0
-461 1807 0
-459 1805 0
-457 1803 0
-455 1801 0
-453 1799 0
-452 1797 0
-615 1811 0
-615 -465 1809 0
-615 -463 1807 0
-615 -461 1805 0
-615 -459 1803 0
-615 -457 1801 0
-615 -455 1799 0
-615 -453 1797 0
-615 -452 1795 0
-613 1809 0
-613 -465 1807 0
-613 -463 1805 0
-613 -461 1803 0
-613 -459 1801 0
-613 -457 1799 0
-613 -455 1797 0
-613 -453 1795 0
-613 -452 1793 0
-611 1807 0
-611 -465 1805 0
-611 -463 1803 0
-611 -461 1801 0
-611 -459 1799 0
-611 -457 1797 0
-611 -455 1795 0
-611 -453 1793 0
-611 -452 1791 0
-609 1805 0
-609 -465 1803 0
-609 -463 1801 0
-609 -461 1799 0
-609 -459 1797 0
-609 -457 1795 0
-609 -455 1793 0
-609 -453 1791 0
-609 -452 1789 0
-607 1803 0
-607 -465 1801 0
-607 -463 1799 0
-607 -461 1797 0
-607 -459 1795 0
-607 -457 1793 0
-607 -455 1791 0
-607 -453 1789 0
-607 -452 1787 0
-605 1801 0
-605 -465 1799 0
-605 -463 1797 0
-605 -461 1795 0
-605 -459 1793 0
-605 -457 1791 0
-605 -455 1789 0
-605 -453 1787 0
-605 -452 1785 0
-603 1799 0
-603 -465 1797 0
-603 -463 1795 0
-603 -461 1793 0
-603 -459 1791 0
-603 -457 1789 0
-603 -455 1787 0
-603 -453 1785 0
-603 -452 1783 0
-602 1797 0
-602 -465 1795 0
-602 -463 1793 0
-602 -461 1791 0
-602 -459 1789 0
-602 -457 1787 0
-602 -455 1785 0
-602 -453 1783 0
-602 -452 1782 0
c (( - aux447 + shift(x_00005_00007, -1) + shift(x_00004_00006, -1))<=0)
482 -1813 0
483 -1814 0
485 -1816 0
487 -1818 0
489 -1820 0
491 -1822 0
493 -1824 0
495 -1826 0
632 -1813 0
632 482 -1814 0
632 483 -1816 0
632 485 -1818 0
632 487 -1820 0
632 489 -1822 0
632 491 -1824 0
632 493 -1826 0
632 495 -1828 0
633 -1814 0
633 482 -1816 0
633 483 -1818 0
633 485 -1820 0
633 487 -1822 0
633 489 -1824 0
633 491 -1826 0
633 493 -1828 0
633 495 -1830 0
635 -1816 0
635 482 -1818 0
635 483 -1820 0
635 485 -1822 0
635 487 -1824 0
635 489 -1826 0
635 491 -1828 0
635 493 -1830 0
635 495 -1832 0
637 -1818 0
637 482 -1820 0
637 483 -1822 0
637 485 -1824 0
637 487 -1826 0
637 489 -1828 0
637 491 -1830 0
637 493 -1832 0
637 495 -1834 0
639 -1820 0
639 482 -1822 0
639 483 -1824 0
639 485 -1826 0
639 487 -1828 0
639 489 -1830 0
639 491 -1832 0
639 493 -1834 0
639 495 -1836 0
641 -1822 0
641 482 -1824 0
641 483 -1826 0
641 485 -1828 0
641 487 -1830 0
641 489 -1832 0
641 491 -1834 0
641 493 -1836 0
641 495 -1838 0
643 -1824 0
643 482 -1826 0
643 483 -1828 0
643 485 -1830 0
643 487 -1832 0
643 489 -1834 0
643 491 -1836 0
643 493 -1838 0
643 495 -1840 0
645 -1826 0
645 482 -1828 0
645 483 -1830 0
645 485 -1832 0
645 487 -1834 0
645 489 -1836 0
645 491 -1838 0
645 493 -1840 0
645 495 -1842 0
c (0<=( - aux447 + shift(x_00005_00007, -1) + shift(x_00004_00006, -1)))
-495 1842 0
-493 1840 0
-491 1838 0
-489 1836 0
-487 1834 0
-485 1832 0
-483 1830 0
-482 1828 0
-645 1842 0
-645 -495 1840 0
-645 -493 1838 0
-645 -491 1836 0
-645 -489 1834 0
-645 -487 1832 0
-645 -485 1830 0
-645 -483 1828 0
-645 -482 1826 0
-643 1840 0
-643 -495 1838 0
-643 -493 1836 0
-643 -491 1834 0
-643 -489 1832 0
-643 -487 1830 0
-643 -485 1828 0
-643 -483 1826 0
-643 -482 1824 0
-641 1838 0
-641 -495 1836 0
-641 -493 1834 0
-641 -491 1832 0
-641 -489 1830 0
-641 -487 1828 0
-641 -485 1826 0
-641 -483 1824 0
-641 -482 1822 0
-639 1836 0
-639 -495 1834 0
-639 -493 1832 0
-639 -491 1830 0
-639 -489 1828 0
-639 -487 1826 0
-639 -485 1824 0
-639 -483 1822 0
-639 -482 1820 0
-637 1834 0
-637 -495 1832 0
-637 -493 1830 0
-637 -491 1828 0
-637 -489 1826 0
-637 -487 1824 0
-637 -485 1822 0
-637 -483 1820 0
-637 -482 1818 0
-635 1832 0
-635 -495 1830 0
-635 -493 1828 0
-635 -491 1826 0
-635 -489 1824 0
-635 -487 1822 0
-635 -485 1820 0
-635 -483 1818 0
-635 -482 1816 0
-633 1830 0
-633 -495 1828 0
-633 -493 1826 0
-633 -491 1824 0
-633 -489 1822 0
-633 -487 1820 0
-633 -485 1818 0
-633 -483 1816 0
-633 -482 1814 0
-632 1828 0
-632 -495 1826 0
-632 -493 1824 0
-632 -491 1822 0
-632 -489 1820 0
-632 -487 1818 0
-632 -485 1816 0
-632 -483 1814 0
-632 -482 1813 0
c ((SATLiteral(107) - aux1906 + SATLiteral(257))<=0)
-257 -7676 0
-107 -7676 0
-107 -257 -7677 0
c (0<=(SATLiteral(107) - aux1906 + SATLiteral(257)))
257 7677 0
107 7677 0
107 257 7676 0
c ((SATLiteral(109) - aux1907 + SATLiteral(259))<=0)
-259 -7679 0
-109 -7679 0
-109 -259 -7680 0
c (0<=(SATLiteral(109) - aux1907 + SATLiteral(259)))
259 7680 0
109 7680 0
109 259 7679 0
c ((SATLiteral(111) - aux1908 + SATLiteral(261))<=0)
-261 -7682 0
-111 -7682 0
-111 -261 -7683 0
c (0<=(SATLiteral(111) - aux1908 + SATLiteral(261)))
261 7683 0
111 7683 0
111 261 7682 0
c ((SATLiteral(113) - aux1909 + SATLiteral(263))<=0)
-263 -7685 0
-113 -7685 0
-113 -263 -7686 0
c (0<=(SATLiteral(113) - aux1909 + SATLiteral(263)))
263 7686 0
113 7686 0
113 263 7685 0
c ((SATLiteral(115) - aux1910 + SATLiteral(265))<=0)
-265 -7688 0
-115 -7688 0
-115 -265 -7689 0
c (0<=(SATLiteral(115) - aux1910 + SATLiteral(265)))
265 7689 0
115 7689 0
115 265 7688 0
c ((SATLiteral(117) - aux1911 + SATLiteral(267))<=0)
-267 -7691 0
-117 -7691 0
-117 -267 -7692 0
c (0<=(SATLiteral(117) - aux1911 + SATLiteral(267)))
267 7692 0
117 7692 0
117 267 7691 0
c ((SATLiteral(119) - aux1912 + SATLiteral(269))<=0)
-269 -7694 0
-119 -7694 0
-119 -269 -7695 0
c (0<=(SATLiteral(119) - aux1912 + SATLiteral(269)))
269 7695 0
119 7695 0
119 269 7694 0
c ((SATLiteral(121) - aux1913 + SATLiteral(271))<=0)
-271 -7697 0
-121 -7697 0
-121 -271 -7698 0
c (0<=(SATLiteral(121) - aux1913 + SATLiteral(271)))
271 7698 0
121 7698 0
121 271 7697 0
c ((SATLiteral(-120) - aux1914 + SATLiteral(-270))<=0)
270 -7700 0
120 -7700 0
120 270 -7701 0
c (0<=(SATLiteral(-120) - aux1914 + SATLiteral(-270)))
-270 7701 0
-120 7701 0
-120 -270 7700 0
c (( - aux1915 + SATLiteral(452) + SATLiteral(602))<=0)
-602 -7703 0
-452 -7703 0
-452 -602 -7704 0
c (0<=( - aux1915 + SATLiteral(452) + SATLiteral(602)))
602 7704 0
452 7704 0
452 602 7703 0
c (( - aux1916 + SATLiteral(454) + SATLiteral(604))<=0)
-604 -7706 0
-454 -7706 0
-454 -604 -7707 0
c (0<=( - aux1916 + SATLiteral(454) + SATLiteral(604)))
604 7707 0
454 7707 0
454 604 7706 0
c (( - aux1917 + SATLiteral(456) + SATLiteral(606))<=0)
-606 -7709 0
-456 -7709 0
-456 -606 -7710 0
c (0<=( - aux1917 + SATLiteral(456) + SATLiteral(606)))
606 7710 0
456 7710 0
456 606 7709 0
c (( - aux1918 + SATLiteral(458) + SATLiteral(608))<=0)
-608 -7712 0
-458 -7712 0
-458 -608 -7713 0
c (0<=( - aux1918 + SATLiteral(458) + SATLiteral(608)))
608 7713 0
458 7713 0
458 608 7712 0
c (( - aux1919 + SATLiteral(460) + SATLiteral(610))<=0)
-610 -7715 0
-460 -7715 0
-460 -610 -7716 0
c (0<=( - aux1919 + SATLiteral(460) + SATLiteral(610)))
610 7716 0
460 7716 0
460 610 7715 0
c (( - aux1920 + SATLiteral(462) + SATLiteral(612))<=0)
-612 -7718 0
-462 -7718 0
-462 -612 -7719 0
c (0<=( - aux1920 + SATLiteral(462) + SATLiteral(612)))
612 7719 0
462 7719 0
462 612 7718 0
c (( - aux1921 + SATLiteral(464) + SATLiteral(614))<=0)
-614 -7721 0
-464 -7721 0
-464 -614 -7722 0
c (0<=( - aux1921 + SATLiteral(464) + SATLiteral(614)))
614 7722 0
464 7722 0
464 614 7721 0
c (( - aux1922 + SATLiteral(466) + SATLiteral(616))<=0)
-616 -7724 0
-466 -7724 0
-466 -616 -7725 0
c (0<=( - aux1922 + SATLiteral(466) + SATLiteral(616)))
616 7725 0
466 7725 0
466 616 7724 0
c (( - aux1923 + SATLiteral(-465) + SATLiteral(-615))<=0)
615 -7727 0
465 -7727 0
465 615 -7728 0
c (0<=( - aux1923 + SATLiteral(-465) + SATLiteral(-615)))
-615 7728 0
-465 7728 0
-465 -615 7727 0
c (( - aux1924 + SATLiteral(482) + SATLiteral(632))<=0)
-632 -7730 0
-482 -7730 0
-482 -632 -7731 0
c (0<=( - aux1924 + SATLiteral(482) + SATLiteral(632)))
632 7731 0
482 7731 0
482 632 7730 0
c (( - aux1925 + SATLiteral(484) + SATLiteral(634))<=0)
-634 -7733 0
-484 -7733 0
-484 -634 -7734 0
c (0<=( - aux1925 + SATLiteral(484) + SATLiteral(634)))
634 7734 0
484 7734 0
484 634 7733 0
c (( - aux1926 + SATLiteral(486) + SATLiteral(636))<=0)
-636 -7736 0
-486 -7736 0
-486 -636 -7737 0
c (0<=( - aux1926 + SATLiteral(486) + SATLiteral(636)))
636 7737 0
486 7737 0
486 636 7736 0
c (( - aux1927 + SATLiteral(488) + SATLiteral(638))<=0)
-638 -7739 0
-488 -7739 0
-488 -638 -7740 0
c (0<=( - aux1927 + SATLiteral(488) + SATLiteral(638)))
638 7740 0
488 7740 0
488 638 7739 0
c (( - aux1928 + SATLiteral(490) + SATLiteral(640))<=0)
-640 -7742 0
-490 -7742 0
-490 -640 -7743 0
c (0<=( - aux1928 + SATLiteral(490) + SATLiteral(640)))
640 7743 0
490 7743 0
490 640 7742 0
c (( - aux1929 + SATLiteral(492) + SATLiteral(642))<=0)
-642 -7745 0
-492 -7745 0
-492 -642 -7746 0
c (0<=( - aux1929 + SATLiteral(492) + SATLiteral(642)))
642 7746 0
492 7746 0
492 642 7745 0
c (( - aux1930 + SATLiteral(494) + SATLiteral(644))<=0)
-644 -7748 0
-494 -7748 0
-494 -644 -7749 0
c (0<=( - aux1930 + SATLiteral(494) + SATLiteral(644)))
644 7749 0
494 7749 0
494 644 7748 0
c (( - aux1931 + SATLiteral(496) + SATLiteral(646))<=0)
-646 -7751 0
-496 -7751 0
-496 -646 -7752 0
c (0<=( - aux1931 + SATLiteral(496) + SATLiteral(646)))
646 7752 0
496 7752 0
496 646 7751 0
c (( - aux1932 + SATLiteral(-495) + SATLiteral(-645))<=0)
645 -7754 0
495 -7754 0
495 645 -7755 0
c (0<=( - aux1932 + SATLiteral(-495) + SATLiteral(-645)))
-645 7755 0
-495 7755 0
-495 -645 7754 0
c ((SATLiteral(272) - aux448 + SATLiteral(542))<=0)
-542 -1844 0
-272 -1844 0
-272 -542 -1845 0
c (0<=(SATLiteral(272) - aux448 + SATLiteral(542)))
542 1845 0
272 1845 0
272 542 1844 0
c ((SATLiteral(947) - aux449 + SATLiteral(812))<=0)
-812 -1847 0
-947 -1847 0
-947 -812 -1848 0
c (0<=(SATLiteral(947) - aux449 + SATLiteral(812)))
812 1848 0
947 1848 0
947 812 1847 0
c (( - aux450 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -1850 0
-677 -1850 0
-677 -137 -1851 0
c (0<=( - aux450 + SATLiteral(677) + SATLiteral(137)))
137 1851 0
677 1851 0
677 137 1850 0
c (( - aux451 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -1853 0
-407 -1853 0
-407 -1082 -1854 0
c (0<=( - aux451 + SATLiteral(407) + SATLiteral(1082)))
1082 1854 0
407 1854 0
407 1082 1853 0
c ((aux451 - aux452 + SATLiteral(2))<=0)
1853 -1856 0
1854 -1857 0
-2 -1856 0
-2 1853 -1857 0
-2 1854 -1859 0
c (0<=(aux451 - aux452 + SATLiteral(2)))
-1854 1859 0
-1853 1857 0
2 1859 0
2 -1854 1857 0
2 -1853 1856 0
c ((aux448 + aux450 - aux453)<=0)
1850 -1861 0
1851 -1862 0
1844 -1861 0
1844 1850 -1862 0
1844 1851 -1864 0
1845 -1862 0
1845 1850 -1864 0
1845 1851 -1866 0
c (0<=(aux448 + aux450 - aux453))
-1851 1866 0
-1850 1864 0
-1845 1866 0
-1845 -1851 1864 0
-1845 -1850 1862 0
-1844 1864 0
-1844 -1851 1862 0
-1844 -1850 1861 0
c ((SATLiteral(274) - aux454 + SATLiteral(544))<=0)
-544 -1868 0
-274 -1868 0
-274 -544 -1869 0
c (0<=(SATLiteral(274) - aux454 + SATLiteral(544)))
544 1869 0
274 1869 0
274 544 1868 0
c ((SATLiteral(949) - aux455 + SATLiteral(814))<=0)
-814 -1871 0
-949 -1871 0
-949 -814 -1872 0
c (0<=(SATLiteral(949) - aux455 + SATLiteral(814)))
814 1872 0
949 1872 0
949 814 1871 0
c (( - aux456 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -1874 0
-679 -1874 0
-679 -139 -1875 0
c (0<=( - aux456 + SATLiteral(679) + SATLiteral(139)))
139 1875 0
679 1875 0
679 139 1874 0
c (( - aux457 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -1877 0
-409 -1877 0
-409 -1084 -1878 0
c (0<=( - aux457 + SATLiteral(409) + SATLiteral(1084)))
1084 1878 0
409 1878 0
409 1084 1877 0
c ((aux457 - aux458 + SATLiteral(4))<=0)
1877 -1880 0
1878 -1881 0
-4 -1880 0
-4 1877 -1881 0
-4 1878 -1883 0
c (0<=(aux457 - aux458 + SATLiteral(4)))
-1878 1883 0
-1877 1881 0
4 1883 0
4 -1878 1881 0
4 -1877 1880 0
c ((aux454 + aux456 - aux459)<=0)
1874 -1885 0
1875 -1886 0
1868 -1885 0
1868 1874 -1886 0
1868 1875 -1888 0
1869 -1886 0
1869 1874 -1888 0
1869 1875 -1890 0
c (0<=(aux454 + aux456 - aux459))
-1875 1890 0
-1874 1888 0
-1869 1890 0
-1869 -1875 1888 0
-1869 -1874 1886 0
-1868 1888 0
-1868 -1875 1886 0
-1868 -1874 1885 0
c ((SATLiteral(276) - aux460 + SATLiteral(546))<=0)
-546 -1892 0
-276 -1892 0
-276 -546 -1893 0
c (0<=(SATLiteral(276) - aux460 + SATLiteral(546)))
546 1893 0
276 1893 0
276 546 1892 0
c ((SATLiteral(951) - aux461 + SATLiteral(816))<=0)
-816 -1895 0
-951 -1895 0
-951 -816 -1896 0
c (0<=(SATLiteral(951) - aux461 + SATLiteral(816)))
816 1896 0
951 1896 0
951 816 1895 0
c (( - aux462 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -1898 0
-681 -1898 0
-681 -141 -1899 0
c (0<=( - aux462 + SATLiteral(681) + SATLiteral(141)))
141 1899 0
681 1899 0
681 141 1898 0
c (( - aux463 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -1901 0
-411 -1901 0
-411 -1086 -1902 0
c (0<=( - aux463 + SATLiteral(411) + SATLiteral(1086)))
1086 1902 0
411 1902 0
411 1086 1901 0
c ((aux463 - aux464 + SATLiteral(6))<=0)
1901 -1904 0
1902 -1905 0
-6 -1904 0
-6 1901 -1905 0
-6 1902 -1907 0
c (0<=(aux463 - aux464 + SATLiteral(6)))
-1902 1907 0
-1901 1905 0
6 1907 0
6 -1902 1905 0
6 -1901 1904 0
c ((aux460 + aux462 - aux465)<=0)
1898 -1909 0
1899 -1910 0
1892 -1909 0
1892 1898 -1910 0
1892 1899 -1912 0
1893 -1910 0
1893 1898 -1912 0
1893 1899 -1914 0
c (0<=(aux460 + aux462 - aux465))
-1899 1914 0
-1898 1912 0
-1893 1914 0
-1893 -1899 1912 0
-1893 -1898 1910 0
-1892 1912 0
-1892 -1899 1910 0
-1892 -1898 1909 0
c ((SATLiteral(278) - aux466 + SATLiteral(548))<=0)
-548 -1916 0
-278 -1916 0
-278 -548 -1917 0
c (0<=(SATLiteral(278) - aux466 + SATLiteral(548)))
548 1917 0
278 1917 0
278 548 1916 0
c ((SATLiteral(953) - aux467 + SATLiteral(818))<=0)
-818 -1919 0
-953 -1919 0
-953 -818 -1920 0
c (0<=(SATLiteral(953) - aux467 + SATLiteral(818)))
818 1920 0
953 1920 0
953 818 1919 0
c (( - aux468 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -1922 0
-683 -1922 0
-683 -143 -1923 0
c (0<=( - aux468 + SATLiteral(683) + SATLiteral(143)))
143 1923 0
683 1923 0
683 143 1922 0
c (( - aux469 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -1925 0
-413 -1925 0
-413 -1088 -1926 0
c (0<=( - aux469 + SATLiteral(413) + SATLiteral(1088)))
1088 1926 0
413 1926 0
413 1088 1925 0
c ((aux469 - aux470 + SATLiteral(8))<=0)
1925 -1928 0
1926 -1929 0
-8 -1928 0
-8 1925 -1929 0
-8 1926 -1931 0
c (0<=(aux469 - aux470 + SATLiteral(8)))
-1926 1931 0
-1925 1929 0
8 1931 0
8 -1926 1929 0
8 -1925 1928 0
c ((aux466 + aux468 - aux471)<=0)
1922 -1933 0
1923 -1934 0
1916 -1933 0
1916 1922 -1934 0
1916 1923 -1936 0
1917 -1934 0
1917 1922 -1936 0
1917 1923 -1938 0
c (0<=(aux466 + aux468 - aux471))
-1923 1938 0
-1922 1936 0
-1917 1938 0
-1917 -1923 1936 0
-1917 -1922 1934 0
-1916 1936 0
-1916 -1923 1934 0
-1916 -1922 1933 0
c ((SATLiteral(280) - aux472 + SATLiteral(550))<=0)
-550 -1940 0
-280 -1940 0
-280 -550 -1941 0
c (0<=(SATLiteral(280) - aux472 + SATLiteral(550)))
550 1941 0
280 1941 0
280 550 1940 0
c ((SATLiteral(955) - aux473 + SATLiteral(820))<=0)
-820 -1943 0
-955 -1943 0
-955 -820 -1944 0
c (0<=(SATLiteral(955) - aux473 + SATLiteral(820)))
820 1944 0
955 1944 0
955 820 1943 0
c (( - aux474 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -1946 0
-685 -1946 0
-685 -145 -1947 0
c (0<=( - aux474 + SATLiteral(685) + SATLiteral(145)))
145 1947 0
685 1947 0
685 145 1946 0
c (( - aux475 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -1949 0
-415 -1949 0
-415 -1090 -1950 0
c (0<=( - aux475 + SATLiteral(415) + SATLiteral(1090)))
1090 1950 0
415 1950 0
415 1090 1949 0
c ((aux475 - aux476 + SATLiteral(10))<=0)
1949 -1952 0
1950 -1953 0
-10 -1952 0
-10 1949 -1953 0
-10 1950 -1955 0
c (0<=(aux475 - aux476 + SATLiteral(10)))
-1950 1955 0
-1949 1953 0
10 1955 0
10 -1950 1953 0
10 -1949 1952 0
c ((aux472 + aux474 - aux477)<=0)
1946 -1957 0
1947 -1958 0
1940 -1957 0
1940 1946 -1958 0
1940 1947 -1960 0
1941 -1958 0
1941 1946 -1960 0
1941 1947 -1962 0
c (0<=(aux472 + aux474 - aux477))
-1947 1962 0
-1946 1960 0
-1941 1962 0
-1941 -1947 1960 0
-1941 -1946 1958 0
-1940 1960 0
-1940 -1947 1958 0
-1940 -1946 1957 0
c ((SATLiteral(282) - aux478 + SATLiteral(552))<=0)
-552 -1964 0
-282 -1964 0
-282 -552 -1965 0
c (0<=(SATLiteral(282) - aux478 + SATLiteral(552)))
552 1965 0
282 1965 0
282 552 1964 0
c ((SATLiteral(957) - aux479 + SATLiteral(822))<=0)
-822 -1967 0
-957 -1967 0
-957 -822 -1968 0
c (0<=(SATLiteral(957) - aux479 + SATLiteral(822)))
822 1968 0
957 1968 0
957 822 1967 0
c (( - aux480 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -1970 0
-687 -1970 0
-687 -147 -1971 0
c (0<=( - aux480 + SATLiteral(687) + SATLiteral(147)))
147 1971 0
687 1971 0
687 147 1970 0
c (( - aux481 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -1973 0
-417 -1973 0
-417 -1092 -1974 0
c (0<=( - aux481 + SATLiteral(417) + SATLiteral(1092)))
1092 1974 0
417 1974 0
417 1092 1973 0
c ((aux481 - aux482 + SATLiteral(12))<=0)
1973 -1976 0
1974 -1977 0
-12 -1976 0
-12 1973 -1977 0
-12 1974 -1979 0
c (0<=(aux481 - aux482 + SATLiteral(12)))
-1974 1979 0
-1973 1977 0
12 1979 0
12 -1974 1977 0
12 -1973 1976 0
c ((aux478 + aux480 - aux483)<=0)
1970 -1981 0
1971 -1982 0
1964 -1981 0
1964 1970 -1982 0
1964 1971 -1984 0
1965 -1982 0
1965 1970 -1984 0
1965 1971 -1986 0
c (0<=(aux478 + aux480 - aux483))
-1971 1986 0
-1970 1984 0
-1965 1986 0
-1965 -1971 1984 0
-1965 -1970 1982 0
-1964 1984 0
-1964 -1971 1982 0
-1964 -1970 1981 0
c ((SATLiteral(284) - aux484 + SATLiteral(554))<=0)
-554 -1988 0
-284 -1988 0
-284 -554 -1989 0
c (0<=(SATLiteral(284) - aux484 + SATLiteral(554)))
554 1989 0
284 1989 0
284 554 1988 0
c ((SATLiteral(959) - aux485 + SATLiteral(824))<=0)
-824 -1991 0
-959 -1991 0
-959 -824 -1992 0
c (0<=(SATLiteral(959) - aux485 + SATLiteral(824)))
824 1992 0
959 1992 0
959 824 1991 0
c (( - aux486 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -1994 0
-689 -1994 0
-689 -149 -1995 0
c (0<=( - aux486 + SATLiteral(689) + SATLiteral(149)))
149 1995 0
689 1995 0
689 149 1994 0
c (( - aux487 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -1997 0
-419 -1997 0
-419 -1094 -1998 0
c (0<=( - aux487 + SATLiteral(419) + SATLiteral(1094)))
1094 1998 0
419 1998 0
419 1094 1997 0
c ((aux487 - aux488 + SATLiteral(14))<=0)
1997 -2000 0
1998 -2001 0
-14 -2000 0
-14 1997 -2001 0
-14 1998 -2003 0
c (0<=(aux487 - aux488 + SATLiteral(14)))
-1998 2003 0
-1997 2001 0
14 2003 0
14 -1998 2001 0
14 -1997 2000 0
c ((aux484 + aux486 - aux489)<=0)
1994 -2005 0
1995 -2006 0
1988 -2005 0
1988 1994 -2006 0
1988 1995 -2008 0
1989 -2006 0
1989 1994 -2008 0
1989 1995 -2010 0
c (0<=(aux484 + aux486 - aux489))
-1995 2010 0
-1994 2008 0
-1989 2010 0
-1989 -1995 2008 0
-1989 -1994 2006 0
-1988 2008 0
-1988 -1995 2006 0
-1988 -1994 2005 0
c ((SATLiteral(286) - aux490 + SATLiteral(556))<=0)
-556 -2012 0
-286 -2012 0
-286 -556 -2013 0
c (0<=(SATLiteral(286) - aux490 + SATLiteral(556)))
556 2013 0
286 2013 0
286 556 2012 0
c ((SATLiteral(961) - aux491 + SATLiteral(826))<=0)
-826 -2015 0
-961 -2015 0
-961 -826 -2016 0
c (0<=(SATLiteral(961) - aux491 + SATLiteral(826)))
826 2016 0
961 2016 0
961 826 2015 0
c (( - aux492 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2018 0
-691 -2018 0
-691 -151 -2019 0
c (0<=( - aux492 + SATLiteral(691) + SATLiteral(151)))
151 2019 0
691 2019 0
691 151 2018 0
c (( - aux493 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2021 0
-421 -2021 0
-421 -1096 -2022 0
c (0<=( - aux493 + SATLiteral(421) + SATLiteral(1096)))
1096 2022 0
421 2022 0
421 1096 2021 0
c ((aux493 - aux494 + SATLiteral(16))<=0)
2021 -2024 0
2022 -2025 0
-16 -2024 0
-16 2021 -2025 0
-16 2022 -2027 0
c (0<=(aux493 - aux494 + SATLiteral(16)))
-2022 2027 0
-2021 2025 0
16 2027 0
16 -2022 2025 0
16 -2021 2024 0
c ((aux490 + aux492 - aux495)<=0)
2018 -2029 0
2019 -2030 0
2012 -2029 0
2012 2018 -2030 0
2012 2019 -2032 0
2013 -2030 0
2013 2018 -2032 0
2013 2019 -2034 0
c (0<=(aux490 + aux492 - aux495))
-2019 2034 0
-2018 2032 0
-2013 2034 0
-2013 -2019 2032 0
-2013 -2018 2030 0
-2012 2032 0
-2012 -2019 2030 0
-2012 -2018 2029 0
c ((SATLiteral(-285) - aux496 + SATLiteral(-555))<=0)
555 -2036 0
285 -2036 0
285 555 -2037 0
c (0<=(SATLiteral(-285) - aux496 + SATLiteral(-555)))
-555 2037 0
-285 2037 0
-285 -555 2036 0
c ((SATLiteral(-960) - aux497 + SATLiteral(-825))<=0)
825 -2039 0
960 -2039 0
960 825 -2040 0
c (0<=(SATLiteral(-960) - aux497 + SATLiteral(-825)))
-825 2040 0
-960 2040 0
-960 -825 2039 0
c (( - aux498 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2042 0
690 -2042 0
690 150 -2043 0
c (0<=( - aux498 + SATLiteral(-690) + SATLiteral(-150)))
-150 2043 0
-690 2043 0
-690 -150 2042 0
c (( - aux499 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2045 0
420 -2045 0
420 1095 -2046 0
c (0<=( - aux499 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2046 0
-420 2046 0
-420 -1095 2045 0
c ((aux499 - aux500 + SATLiteral(-15))<=0)
2045 -2048 0
2046 -2049 0
15 -2048 0
15 2045 -2049 0
15 2046 -2051 0
c (0<=(aux499 - aux500 + SATLiteral(-15)))
-2046 2051 0
-2045 2049 0
-15 2051 0
-15 -2046 2049 0
-15 -2045 2048 0
c ((aux496 + aux498 - aux501)<=0)
2042 -2053 0
2043 -2054 0
2036 -2053 0
2036 2042 -2054 0
2036 2043 -2056 0
2037 -2054 0
2037 2042 -2056 0
2037 2043 -2058 0
c (0<=(aux496 + aux498 - aux501))
-2043 2058 0
-2042 2056 0
-2037 2058 0
-2037 -2043 2056 0
-2037 -2042 2054 0
-2036 2056 0
-2036 -2043 2054 0
-2036 -2042 2053 0
c ((SATLiteral(287) - aux502 + SATLiteral(557))<=0)
-557 -2060 0
-287 -2060 0
-287 -557 -2061 0
c (0<=(SATLiteral(287) - aux502 + SATLiteral(557)))
557 2061 0
287 2061 0
287 557 2060 0
c ((SATLiteral(962) - aux503 + SATLiteral(827))<=0)
-827 -2063 0
-962 -2063 0
-962 -827 -2064 0
c (0<=(SATLiteral(962) - aux503 + SATLiteral(827)))
827 2064 0
962 2064 0
962 827 2063 0
c (( - aux504 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2066 0
-692 -2066 0
-692 -152 -2067 0
c (0<=( - aux504 + SATLiteral(692) + SATLiteral(152)))
152 2067 0
692 2067 0
692 152 2066 0
c (( - aux505 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2069 0
-422 -2069 0
-422 -1097 -2070 0
c (0<=( - aux505 + SATLiteral(422) + SATLiteral(1097)))
1097 2070 0
422 2070 0
422 1097 2069 0
c ((aux505 - aux506 + SATLiteral(17))<=0)
2069 -2072 0
2070 -2073 0
-17 -2072 0
-17 2069 -2073 0
-17 2070 -2075 0
c (0<=(aux505 - aux506 + SATLiteral(17)))
-2070 2075 0
-2069 2073 0
17 2075 0
17 -2070 2073 0
17 -2069 2072 0
c ((aux502 + aux504 - aux507)<=0)
2066 -2077 0
2067 -2078 0
2060 -2077 0
2060 2066 -2078 0
2060 2067 -2080 0
2061 -2078 0
2061 2066 -2080 0
2061 2067 -2082 0
c (0<=(aux502 + aux504 - aux507))
-2067 2082 0
-2066 2080 0
-2061 2082 0
-2061 -2067 2080 0
-2061 -2066 2078 0
-2060 2080 0
-2060 -2067 2078 0
-2060 -2066 2077 0
c ((SATLiteral(288) - aux508 + SATLiteral(559))<=0)
-559 -2084 0
-288 -2084 0
-288 -559 -2085 0
c (0<=(SATLiteral(288) - aux508 + SATLiteral(559)))
559 2085 0
288 2085 0
288 559 2084 0
c ((SATLiteral(964) - aux509 + SATLiteral(829))<=0)
-829 -2087 0
-964 -2087 0
-964 -829 -2088 0
c (0<=(SATLiteral(964) - aux509 + SATLiteral(829)))
829 2088 0
964 2088 0
964 829 2087 0
c (( - aux510 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2090 0
-694 -2090 0
-694 -154 -2091 0
c (0<=( - aux510 + SATLiteral(694) + SATLiteral(154)))
154 2091 0
694 2091 0
694 154 2090 0
c (( - aux511 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2093 0
-424 -2093 0
-424 -1099 -2094 0
c (0<=( - aux511 + SATLiteral(424) + SATLiteral(1099)))
1099 2094 0
424 2094 0
424 1099 2093 0
c ((aux511 - aux512 + SATLiteral(19))<=0)
2093 -2096 0
2094 -2097 0
-19 -2096 0
-19 2093 -2097 0
-19 2094 -2099 0
c (0<=(aux511 - aux512 + SATLiteral(19)))
-2094 2099 0
-2093 2097 0
19 2099 0
19 -2094 2097 0
19 -2093 2096 0
c ((aux508 + aux510 - aux513)<=0)
2090 -2101 0
2091 -2102 0
2084 -2101 0
2084 2090 -2102 0
2084 2091 -2104 0
2085 -2102 0
2085 2090 -2104 0
2085 2091 -2106 0
c (0<=(aux508 + aux510 - aux513))
-2091 2106 0
-2090 2104 0
-2085 2106 0
-2085 -2091 2104 0
-2085 -2090 2102 0
-2084 2104 0
-2084 -2091 2102 0
-2084 -2090 2101 0
c ((SATLiteral(289) - aux514 + SATLiteral(561))<=0)
-561 -2108 0
-289 -2108 0
-289 -561 -2109 0
c (0<=(SATLiteral(289) - aux514 + SATLiteral(561)))
561 2109 0
289 2109 0
289 561 2108 0
c ((SATLiteral(966) - aux515 + SATLiteral(831))<=0)
-831 -2111 0
-966 -2111 0
-966 -831 -2112 0
c (0<=(SATLiteral(966) - aux515 + SATLiteral(831)))
831 2112 0
966 2112 0
966 831 2111 0
c (( - aux516 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2114 0
-696 -2114 0
-696 -156 -2115 0
c (0<=( - aux516 + SATLiteral(696) + SATLiteral(156)))
156 2115 0
696 2115 0
696 156 2114 0
c (( - aux517 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2117 0
-426 -2117 0
-426 -1101 -2118 0
c (0<=( - aux517 + SATLiteral(426) + SATLiteral(1101)))
1101 2118 0
426 2118 0
426 1101 2117 0
c ((aux517 - aux518 + SATLiteral(21))<=0)
2117 -2120 0
2118 -2121 0
-21 -2120 0
-21 2117 -2121 0
-21 2118 -2123 0
c (0<=(aux517 - aux518 + SATLiteral(21)))
-2118 2123 0
-2117 2121 0
21 2123 0
21 -2118 2121 0
21 -2117 2120 0
c ((aux514 + aux516 - aux519)<=0)
2114 -2125 0
2115 -2126 0
2108 -2125 0
2108 2114 -2126 0
2108 2115 -2128 0
2109 -2126 0
2109 2114 -2128 0
2109 2115 -2130 0
c (0<=(aux514 + aux516 - aux519))
-2115 2130 0
-2114 2128 0
-2109 2130 0
-2109 -2115 2128 0
-2109 -2114 2126 0
-2108 2128 0
-2108 -2115 2126 0
-2108 -2114 2125 0
c ((SATLiteral(290) - aux520 + SATLiteral(563))<=0)
-563 -2132 0
-290 -2132 0
-290 -563 -2133 0
c (0<=(SATLiteral(290) - aux520 + SATLiteral(563)))
563 2133 0
290 2133 0
290 563 2132 0
c ((SATLiteral(968) - aux521 + SATLiteral(833))<=0)
-833 -2135 0
-968 -2135 0
-968 -833 -2136 0
c (0<=(SATLiteral(968) - aux521 + SATLiteral(833)))
833 2136 0
968 2136 0
968 833 2135 0
c (( - aux522 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2138 0
-698 -2138 0
-698 -158 -2139 0
c (0<=( - aux522 + SATLiteral(698) + SATLiteral(158)))
158 2139 0
698 2139 0
698 158 2138 0
c (( - aux523 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2141 0
-428 -2141 0
-428 -1103 -2142 0
c (0<=( - aux523 + SATLiteral(428) + SATLiteral(1103)))
1103 2142 0
428 2142 0
428 1103 2141 0
c ((aux523 - aux524 + SATLiteral(23))<=0)
2141 -2144 0
2142 -2145 0
-23 -2144 0
-23 2141 -2145 0
-23 2142 -2147 0
c (0<=(aux523 - aux524 + SATLiteral(23)))
-2142 2147 0
-2141 2145 0
23 2147 0
23 -2142 2145 0
23 -2141 2144 0
c ((aux520 + aux522 - aux525)<=0)
2138 -2149 0
2139 -2150 0
2132 -2149 0
2132 2138 -2150 0
2132 2139 -2152 0
2133 -2150 0
2133 2138 -2152 0
2133 2139 -2154 0
c (0<=(aux520 + aux522 - aux525))
-2139 2154 0
-2138 2152 0
-2133 2154 0
-2133 -2139 2152 0
-2133 -2138 2150 0
-2132 2152 0
-2132 -2139 2150 0
-2132 -2138 2149 0
c ((SATLiteral(291) - aux526 + SATLiteral(565))<=0)
-565 -2156 0
-291 -2156 0
-291 -565 -2157 0
c (0<=(SATLiteral(291) - aux526 + SATLiteral(565)))
565 2157 0
291 2157 0
291 565 2156 0
c ((SATLiteral(970) - aux527 + SATLiteral(835))<=0)
-835 -2159 0
-970 -2159 0
-970 -835 -2160 0
c (0<=(SATLiteral(970) - aux527 + SATLiteral(835)))
835 2160 0
970 2160 0
970 835 2159 0
c (( - aux528 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2162 0
-700 -2162 0
-700 -160 -2163 0
c (0<=( - aux528 + SATLiteral(700) + SATLiteral(160)))
160 2163 0
700 2163 0
700 160 2162 0
c (( - aux529 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2165 0
-430 -2165 0
-430 -1105 -2166 0
c (0<=( - aux529 + SATLiteral(430) + SATLiteral(1105)))
1105 2166 0
430 2166 0
430 1105 2165 0
c ((aux529 - aux530 + SATLiteral(25))<=0)
2165 -2168 0
2166 -2169 0
-25 -2168 0
-25 2165 -2169 0
-25 2166 -2171 0
c (0<=(aux529 - aux530 + SATLiteral(25)))
-2166 2171 0
-2165 2169 0
25 2171 0
25 -2166 2169 0
25 -2165 2168 0
c ((aux526 + aux528 - aux531)<=0)
2162 -2173 0
2163 -2174 0
2156 -2173 0
2156 2162 -2174 0
2156 2163 -2176 0
2157 -2174 0
2157 2162 -2176 0
2157 2163 -2178 0
c (0<=(aux526 + aux528 - aux531))
-2163 2178 0
-2162 2176 0
-2157 2178 0
-2157 -2163 2176 0
-2157 -2162 2174 0
-2156 2176 0
-2156 -2163 2174 0
-2156 -2162 2173 0
c ((SATLiteral(292) - aux532 + SATLiteral(567))<=0)
-567 -2180 0
-292 -2180 0
-292 -567 -2181 0
c (0<=(SATLiteral(292) - aux532 + SATLiteral(567)))
567 2181 0
292 2181 0
292 567 2180 0
c ((SATLiteral(972) - aux533 + SATLiteral(837))<=0)
-837 -2183 0
-972 -2183 0
-972 -837 -2184 0
c (0<=(SATLiteral(972) - aux533 + SATLiteral(837)))
837 2184 0
972 2184 0
972 837 2183 0
c (( - aux534 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2186 0
-702 -2186 0
-702 -162 -2187 0
c (0<=( - aux534 + SATLiteral(702) + SATLiteral(162)))
162 2187 0
702 2187 0
702 162 2186 0
c (( - aux535 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2189 0
-432 -2189 0
-432 -1107 -2190 0
c (0<=( - aux535 + SATLiteral(432) + SATLiteral(1107)))
1107 2190 0
432 2190 0
432 1107 2189 0
c ((aux535 - aux536 + SATLiteral(27))<=0)
2189 -2192 0
2190 -2193 0
-27 -2192 0
-27 2189 -2193 0
-27 2190 -2195 0
c (0<=(aux535 - aux536 + SATLiteral(27)))
-2190 2195 0
-2189 2193 0
27 2195 0
27 -2190 2193 0
27 -2189 2192 0
c ((aux532 + aux534 - aux537)<=0)
2186 -2197 0
2187 -2198 0
2180 -2197 0
2180 2186 -2198 0
2180 2187 -2200 0
2181 -2198 0
2181 2186 -2200 0
2181 2187 -2202 0
c (0<=(aux532 + aux534 - aux537))
-2187 2202 0
-2186 2200 0
-2181 2202 0
-2181 -2187 2200 0
-2181 -2186 2198 0
-2180 2200 0
-2180 -2187 2198 0
-2180 -2186 2197 0
c ((SATLiteral(293) - aux538 + SATLiteral(569))<=0)
-569 -2204 0
-293 -2204 0
-293 -569 -2205 0
c (0<=(SATLiteral(293) - aux538 + SATLiteral(569)))
569 2205 0
293 2205 0
293 569 2204 0
c ((SATLiteral(974) - aux539 + SATLiteral(839))<=0)
-839 -2207 0
-974 -2207 0
-974 -839 -2208 0
c (0<=(SATLiteral(974) - aux539 + SATLiteral(839)))
839 2208 0
974 2208 0
974 839 2207 0
c (( - aux540 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2210 0
-704 -2210 0
-704 -164 -2211 0
c (0<=( - aux540 + SATLiteral(704) + SATLiteral(164)))
164 2211 0
704 2211 0
704 164 2210 0
c (( - aux541 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2213 0
-434 -2213 0
-434 -1109 -2214 0
c (0<=( - aux541 + SATLiteral(434) + SATLiteral(1109)))
1109 2214 0
434 2214 0
434 1109 2213 0
c ((aux541 - aux542 + SATLiteral(29))<=0)
2213 -2216 0
2214 -2217 0
-29 -2216 0
-29 2213 -2217 0
-29 2214 -2219 0
c (0<=(aux541 - aux542 + SATLiteral(29)))
-2214 2219 0
-2213 2217 0
29 2219 0
29 -2214 2217 0
29 -2213 2216 0
c ((aux538 + aux540 - aux543)<=0)
2210 -2221 0
2211 -2222 0
2204 -2221 0
2204 2210 -2222 0
2204 2211 -2224 0
2205 -2222 0
2205 2210 -2224 0
2205 2211 -2226 0
c (0<=(aux538 + aux540 - aux543))
-2211 2226 0
-2210 2224 0
-2205 2226 0
-2205 -2211 2224 0
-2205 -2210 2222 0
-2204 2224 0
-2204 -2211 2222 0
-2204 -2210 2221 0
c ((SATLiteral(294) - aux544 + SATLiteral(571))<=0)
-571 -2228 0
-294 -2228 0
-294 -571 -2229 0
c (0<=(SATLiteral(294) - aux544 + SATLiteral(571)))
571 2229 0
294 2229 0
294 571 2228 0
c ((SATLiteral(976) - aux545 + SATLiteral(841))<=0)
-841 -2231 0
-976 -2231 0
-976 -841 -2232 0
c (0<=(SATLiteral(976) - aux545 + SATLiteral(841)))
841 2232 0
976 2232 0
976 841 2231 0
c (( - aux546 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2234 0
-706 -2234 0
-706 -166 -2235 0
c (0<=( - aux546 + SATLiteral(706) + SATLiteral(166)))
166 2235 0
706 2235 0
706 166 2234 0
c (( - aux547 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2237 0
-436 -2237 0
-436 -1111 -2238 0
c (0<=( - aux547 + SATLiteral(436) + SATLiteral(1111)))
1111 2238 0
436 2238 0
436 1111 2237 0
c ((aux547 - aux548 + SATLiteral(31))<=0)
2237 -2240 0
2238 -2241 0
-31 -2240 0
-31 2237 -2241 0
-31 2238 -2243 0
c (0<=(aux547 - aux548 + SATLiteral(31)))
-2238 2243 0
-2237 2241 0
31 2243 0
31 -2238 2241 0
31 -2237 2240 0
c ((aux544 + aux546 - aux549)<=0)
2234 -2245 0
2235 -2246 0
2228 -2245 0
2228 2234 -2246 0
2228 2235 -2248 0
2229 -2246 0
2229 2234 -2248 0
2229 2235 -2250 0
c (0<=(aux544 + aux546 - aux549))
-2235 2250 0
-2234 2248 0
-2229 2250 0
-2229 -2235 2248 0
-2229 -2234 2246 0
-2228 2248 0
-2228 -2235 2246 0
-2228 -2234 2245 0
c ((SATLiteral(295) - aux550 + SATLiteral(-570))<=0)
570 -2252 0
-295 -2252 0
-295 570 -2253 0
c (0<=(SATLiteral(295) - aux550 + SATLiteral(-570)))
-570 2253 0
295 2253 0
295 -570 2252 0
c ((SATLiteral(-975) - aux551 + SATLiteral(-840))<=0)
840 -2255 0
975 -2255 0
975 840 -2256 0
c (0<=(SATLiteral(-975) - aux551 + SATLiteral(-840)))
-840 2256 0
-975 2256 0
-975 -840 2255 0
c (( - aux552 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2258 0
705 -2258 0
705 165 -2259 0
c (0<=( - aux552 + SATLiteral(-705) + SATLiteral(-165)))
-165 2259 0
-705 2259 0
-705 -165 2258 0
c (( - aux553 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2261 0
435 -2261 0
435 1110 -2262 0
c (0<=( - aux553 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2262 0
-435 2262 0
-435 -1110 2261 0
c ((aux553 - aux554 + SATLiteral(-30))<=0)
2261 -2264 0
2262 -2265 0
30 -2264 0
30 2261 -2265 0
30 2262 -2267 0
c (0<=(aux553 - aux554 + SATLiteral(-30)))
-2262 2267 0
-2261 2265 0
-30 2267 0
-30 -2262 2265 0
-30 -2261 2264 0
c ((aux550 + aux552 - aux555)<=0)
2258 -2269 0
2259 -2270 0
2252 -2269 0
2252 2258 -2270 0
2252 2259 -2272 0
2253 -2270 0
2253 2258 -2272 0
2253 2259 -2274 0
c (0<=(aux550 + aux552 - aux555))
-2259 2274 0
-2258 2272 0
-2253 2274 0
-2253 -2259 2272 0
-2253 -2258 2270 0
-2252 2272 0
-2252 -2259 2270 0
-2252 -2258 2269 0
c ((SATLiteral(302) - aux556 + SATLiteral(572))<=0)
-572 -2276 0
-302 -2276 0
-302 -572 -2277 0
c (0<=(SATLiteral(302) - aux556 + SATLiteral(572)))
572 2277 0
302 2277 0
302 572 2276 0
c ((SATLiteral(977) - aux557 + SATLiteral(842))<=0)
-842 -2279 0
-977 -2279 0
-977 -842 -2280 0
c (0<=(SATLiteral(977) - aux557 + SATLiteral(842)))
842 2280 0
977 2280 0
977 842 2279 0
c (( - aux558 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2282 0
-707 -2282 0
-707 -167 -2283 0
c (0<=( - aux558 + SATLiteral(707) + SATLiteral(167)))
167 2283 0
707 2283 0
707 167 2282 0
c (( - aux559 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2285 0
-437 -2285 0
-437 -1112 -2286 0
c (0<=( - aux559 + SATLiteral(437) + SATLiteral(1112)))
1112 2286 0
437 2286 0
437 1112 2285 0
c ((aux559 - aux560 + SATLiteral(32))<=0)
2285 -2288 0
2286 -2289 0
-32 -2288 0
-32 2285 -2289 0
-32 2286 -2291 0
c (0<=(aux559 - aux560 + SATLiteral(32)))
-2286 2291 0
-2285 2289 0
32 2291 0
32 -2286 2289 0
32 -2285 2288 0
c ((aux556 + aux558 - aux561)<=0)
2282 -2293 0
2283 -2294 0
2276 -2293 0
2276 2282 -2294 0
2276 2283 -2296 0
2277 -2294 0
2277 2282 -2296 0
2277 2283 -2298 0
c (0<=(aux556 + aux558 - aux561))
-2283 2298 0
-2282 2296 0
-2277 2298 0
-2277 -2283 2296 0
-2277 -2282 2294 0
-2276 2296 0
-2276 -2283 2294 0
-2276 -2282 2293 0
c ((SATLiteral(304) - aux562 + SATLiteral(574))<=0)
-574 -2300 0
-304 -2300 0
-304 -574 -2301 0
c (0<=(SATLiteral(304) - aux562 + SATLiteral(574)))
574 2301 0
304 2301 0
304 574 2300 0
c ((SATLiteral(979) - aux563 + SATLiteral(844))<=0)
-844 -2303 0
-979 -2303 0
-979 -844 -2304 0
c (0<=(SATLiteral(979) - aux563 + SATLiteral(844)))
844 2304 0
979 2304 0
979 844 2303 0
c (( - aux564 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2306 0
-709 -2306 0
-709 -169 -2307 0
c (0<=( - aux564 + SATLiteral(709) + SATLiteral(169)))
169 2307 0
709 2307 0
709 169 2306 0
c (( - aux565 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2309 0
-439 -2309 0
-439 -1114 -2310 0
c (0<=( - aux565 + SATLiteral(439) + SATLiteral(1114)))
1114 2310 0
439 2310 0
439 1114 2309 0
c ((aux565 - aux566 + SATLiteral(34))<=0)
2309 -2312 0
2310 -2313 0
-34 -2312 0
-34 2309 -2313 0
-34 2310 -2315 0
c (0<=(aux565 - aux566 + SATLiteral(34)))
-2310 2315 0
-2309 2313 0
34 2315 0
34 -2310 2313 0
34 -2309 2312 0
c ((aux562 + aux564 - aux567)<=0)
2306 -2317 0
2307 -2318 0
2300 -2317 0
2300 2306 -2318 0
2300 2307 -2320 0
2301 -2318 0
2301 2306 -2320 0
2301 2307 -2322 0
c (0<=(aux562 + aux564 - aux567))
-2307 2322 0
-2306 2320 0
-2301 2322 0
-2301 -2307 2320 0
-2301 -2306 2318 0
-2300 2320 0
-2300 -2307 2318 0
-2300 -2306 2317 0
c ((SATLiteral(306) - aux568 + SATLiteral(576))<=0)
-576 -2324 0
-306 -2324 0
-306 -576 -2325 0
c (0<=(SATLiteral(306) - aux568 + SATLiteral(576)))
576 2325 0
306 2325 0
306 576 2324 0
c ((SATLiteral(981) - aux569 + SATLiteral(846))<=0)
-846 -2327 0
-981 -2327 0
-981 -846 -2328 0
c (0<=(SATLiteral(981) - aux569 + SATLiteral(846)))
846 2328 0
981 2328 0
981 846 2327 0
c (( - aux570 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2330 0
-711 -2330 0
-711 -171 -2331 0
c (0<=( - aux570 + SATLiteral(711) + SATLiteral(171)))
171 2331 0
711 2331 0
711 171 2330 0
c (( - aux571 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2333 0
-441 -2333 0
-441 -1116 -2334 0
c (0<=( - aux571 + SATLiteral(441) + SATLiteral(1116)))
1116 2334 0
441 2334 0
441 1116 2333 0
c ((aux571 - aux572 + SATLiteral(36))<=0)
2333 -2336 0
2334 -2337 0
-36 -2336 0
-36 2333 -2337 0
-36 2334 -2339 0
c (0<=(aux571 - aux572 + SATLiteral(36)))
-2334 2339 0
-2333 2337 0
36 2339 0
36 -2334 2337 0
36 -2333 2336 0
c ((aux568 + aux570 - aux573)<=0)
2330 -2341 0
2331 -2342 0
2324 -2341 0
2324 2330 -2342 0
2324 2331 -2344 0
2325 -2342 0
2325 2330 -2344 0
2325 2331 -2346 0
c (0<=(aux568 + aux570 - aux573))
-2331 2346 0
-2330 2344 0
-2325 2346 0
-2325 -2331 2344 0
-2325 -2330 2342 0
-2324 2344 0
-2324 -2331 2342 0
-2324 -2330 2341 0
c ((SATLiteral(308) - aux574 + SATLiteral(578))<=0)
-578 -2348 0
-308 -2348 0
-308 -578 -2349 0
c (0<=(SATLiteral(308) - aux574 + SATLiteral(578)))
578 2349 0
308 2349 0
308 578 2348 0
c ((SATLiteral(983) - aux575 + SATLiteral(848))<=0)
-848 -2351 0
-983 -2351 0
-983 -848 -2352 0
c (0<=(SATLiteral(983) - aux575 + SATLiteral(848)))
848 2352 0
983 2352 0
983 848 2351 0
c (( - aux576 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2354 0
-713 -2354 0
-713 -173 -2355 0
c (0<=( - aux576 + SATLiteral(713) + SATLiteral(173)))
173 2355 0
713 2355 0
713 173 2354 0
c (( - aux577 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2357 0
-443 -2357 0
-443 -1118 -2358 0
c (0<=( - aux577 + SATLiteral(443) + SATLiteral(1118)))
1118 2358 0
443 2358 0
443 1118 2357 0
c ((aux577 - aux578 + SATLiteral(38))<=0)
2357 -2360 0
2358 -2361 0
-38 -2360 0
-38 2357 -2361 0
-38 2358 -2363 0
c (0<=(aux577 - aux578 + SATLiteral(38)))
-2358 2363 0
-2357 2361 0
38 2363 0
38 -2358 2361 0
38 -2357 2360 0
c ((aux574 + aux576 - aux579)<=0)
2354 -2365 0
2355 -2366 0
2348 -2365 0
2348 2354 -2366 0
2348 2355 -2368 0
2349 -2366 0
2349 2354 -2368 0
2349 2355 -2370 0
c (0<=(aux574 + aux576 - aux579))
-2355 2370 0
-2354 2368 0
-2349 2370 0
-2349 -2355 2368 0
-2349 -2354 2366 0
-2348 2368 0
-2348 -2355 2366 0
-2348 -2354 2365 0
c ((SATLiteral(310) - aux580 + SATLiteral(580))<=0)
-580 -2372 0
-310 -2372 0
-310 -580 -2373 0
c (0<=(SATLiteral(310) - aux580 + SATLiteral(580)))
580 2373 0
310 2373 0
310 580 2372 0
c ((SATLiteral(985) - aux581 + SATLiteral(850))<=0)
-850 -2375 0
-985 -2375 0
-985 -850 -2376 0
c (0<=(SATLiteral(985) - aux581 + SATLiteral(850)))
850 2376 0
985 2376 0
985 850 2375 0
c (( - aux582 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2378 0
-715 -2378 0
-715 -175 -2379 0
c (0<=( - aux582 + SATLiteral(715) + SATLiteral(175)))
175 2379 0
715 2379 0
715 175 2378 0
c (( - aux583 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2381 0
-445 -2381 0
-445 -1120 -2382 0
c (0<=( - aux583 + SATLiteral(445) + SATLiteral(1120)))
1120 2382 0
445 2382 0
445 1120 2381 0
c ((aux583 - aux584 + SATLiteral(40))<=0)
2381 -2384 0
2382 -2385 0
-40 -2384 0
-40 2381 -2385 0
-40 2382 -2387 0
c (0<=(aux583 - aux584 + SATLiteral(40)))
-2382 2387 0
-2381 2385 0
40 2387 0
40 -2382 2385 0
40 -2381 2384 0
c ((aux580 + aux582 - aux585)<=0)
2378 -2389 0
2379 -2390 0
2372 -2389 0
2372 2378 -2390 0
2372 2379 -2392 0
2373 -2390 0
2373 2378 -2392 0
2373 2379 -2394 0
c (0<=(aux580 + aux582 - aux585))
-2379 2394 0
-2378 2392 0
-2373 2394 0
-2373 -2379 2392 0
-2373 -2378 2390 0
-2372 2392 0
-2372 -2379 2390 0
-2372 -2378 2389 0
c ((SATLiteral(312) - aux586 + SATLiteral(582))<=0)
-582 -2396 0
-312 -2396 0
-312 -582 -2397 0
c (0<=(SATLiteral(312) - aux586 + SATLiteral(582)))
582 2397 0
312 2397 0
312 582 2396 0
c ((SATLiteral(987) - aux587 + SATLiteral(852))<=0)
-852 -2399 0
-987 -2399 0
-987 -852 -2400 0
c (0<=(SATLiteral(987) - aux587 + SATLiteral(852)))
852 2400 0
987 2400 0
987 852 2399 0
c (( - aux588 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2402 0
-717 -2402 0
-717 -177 -2403 0
c (0<=( - aux588 + SATLiteral(717) + SATLiteral(177)))
177 2403 0
717 2403 0
717 177 2402 0
c (( - aux589 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2405 0
-447 -2405 0
-447 -1122 -2406 0
c (0<=( - aux589 + SATLiteral(447) + SATLiteral(1122)))
1122 2406 0
447 2406 0
447 1122 2405 0
c ((aux589 - aux590 + SATLiteral(42))<=0)
2405 -2408 0
2406 -2409 0
-42 -2408 0
-42 2405 -2409 0
-42 2406 -2411 0
c (0<=(aux589 - aux590 + SATLiteral(42)))
-2406 2411 0
-2405 2409 0
42 2411 0
42 -2406 2409 0
42 -2405 2408 0
c ((aux586 + aux588 - aux591)<=0)
2402 -2413 0
2403 -2414 0
2396 -2413 0
2396 2402 -2414 0
2396 2403 -2416 0
2397 -2414 0
2397 2402 -2416 0
2397 2403 -2418 0
c (0<=(aux586 + aux588 - aux591))
-2403 2418 0
-2402 2416 0
-2397 2418 0
-2397 -2403 2416 0
-2397 -2402 2414 0
-2396 2416 0
-2396 -2403 2414 0
-2396 -2402 2413 0
c ((SATLiteral(314) - aux592 + SATLiteral(584))<=0)
-584 -2420 0
-314 -2420 0
-314 -584 -2421 0
c (0<=(SATLiteral(314) - aux592 + SATLiteral(584)))
584 2421 0
314 2421 0
314 584 2420 0
c ((SATLiteral(989) - aux593 + SATLiteral(854))<=0)
-854 -2423 0
-989 -2423 0
-989 -854 -2424 0
c (0<=(SATLiteral(989) - aux593 + SATLiteral(854)))
854 2424 0
989 2424 0
989 854 2423 0
c (( - aux594 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2426 0
-719 -2426 0
-719 -179 -2427 0
c (0<=( - aux594 + SATLiteral(719) + SATLiteral(179)))
179 2427 0
719 2427 0
719 179 2426 0
c (( - aux595 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2429 0
-449 -2429 0
-449 -1124 -2430 0
c (0<=( - aux595 + SATLiteral(449) + SATLiteral(1124)))
1124 2430 0
449 2430 0
449 1124 2429 0
c ((aux595 - aux596 + SATLiteral(44))<=0)
2429 -2432 0
2430 -2433 0
-44 -2432 0
-44 2429 -2433 0
-44 2430 -2435 0
c (0<=(aux595 - aux596 + SATLiteral(44)))
-2430 2435 0
-2429 2433 0
44 2435 0
44 -2430 2433 0
44 -2429 2432 0
c ((aux592 + aux594 - aux597)<=0)
2426 -2437 0
2427 -2438 0
2420 -2437 0
2420 2426 -2438 0
2420 2427 -2440 0
2421 -2438 0
2421 2426 -2440 0
2421 2427 -2442 0
c (0<=(aux592 + aux594 - aux597))
-2427 2442 0
-2426 2440 0
-2421 2442 0
-2421 -2427 2440 0
-2421 -2426 2438 0
-2420 2440 0
-2420 -2427 2438 0
-2420 -2426 2437 0
c ((SATLiteral(316) - aux598 + SATLiteral(586))<=0)
-586 -2444 0
-316 -2444 0
-316 -586 -2445 0
c (0<=(SATLiteral(316) - aux598 + SATLiteral(586)))
586 2445 0
316 2445 0
316 586 2444 0
c ((SATLiteral(991) - aux599 + SATLiteral(856))<=0)
-856 -2447 0
-991 -2447 0
-991 -856 -2448 0
c (0<=(SATLiteral(991) - aux599 + SATLiteral(856)))
856 2448 0
991 2448 0
991 856 2447 0
c (( - aux600 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2450 0
-721 -2450 0
-721 -181 -2451 0
c (0<=( - aux600 + SATLiteral(721) + SATLiteral(181)))
181 2451 0
721 2451 0
721 181 2450 0
c (( - aux601 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2453 0
-451 -2453 0
-451 -1126 -2454 0
c (0<=( - aux601 + SATLiteral(451) + SATLiteral(1126)))
1126 2454 0
451 2454 0
451 1126 2453 0
c ((aux601 - aux602 + SATLiteral(46))<=0)
2453 -2456 0
2454 -2457 0
-46 -2456 0
-46 2453 -2457 0
-46 2454 -2459 0
c (0<=(aux601 - aux602 + SATLiteral(46)))
-2454 2459 0
-2453 2457 0
46 2459 0
46 -2454 2457 0
46 -2453 2456 0
c ((aux598 + aux600 - aux603)<=0)
2450 -2461 0
2451 -2462 0
2444 -2461 0
2444 2450 -2462 0
2444 2451 -2464 0
2445 -2462 0
2445 2450 -2464 0
2445 2451 -2466 0
c (0<=(aux598 + aux600 - aux603))
-2451 2466 0
-2450 2464 0
-2445 2466 0
-2445 -2451 2464 0
-2445 -2450 2462 0
-2444 2464 0
-2444 -2451 2462 0
-2444 -2450 2461 0
c ((SATLiteral(-315) - aux604 + SATLiteral(-585))<=0)
585 -2468 0
315 -2468 0
315 585 -2469 0
c (0<=(SATLiteral(-315) - aux604 + SATLiteral(-585)))
-585 2469 0
-315 2469 0
-315 -585 2468 0
c ((SATLiteral(-990) - aux605 + SATLiteral(-855))<=0)
855 -2471 0
990 -2471 0
990 855 -2472 0
c (0<=(SATLiteral(-990) - aux605 + SATLiteral(-855)))
-855 2472 0
-990 2472 0
-990 -855 2471 0
c (( - aux606 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2474 0
720 -2474 0
720 180 -2475 0
c (0<=( - aux606 + SATLiteral(-720) + SATLiteral(-180)))
-180 2475 0
-720 2475 0
-720 -180 2474 0
c (( - aux607 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2477 0
450 -2477 0
450 1125 -2478 0
c (0<=( - aux607 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2478 0
-450 2478 0
-450 -1125 2477 0
c ((aux607 - aux608 + SATLiteral(-45))<=0)
2477 -2480 0
2478 -2481 0
45 -2480 0
45 2477 -2481 0
45 2478 -2483 0
c (0<=(aux607 - aux608 + SATLiteral(-45)))
-2478 2483 0
-2477 2481 0
-45 2483 0
-45 -2478 2481 0
-45 -2477 2480 0
c ((aux604 + aux606 - aux609)<=0)
2474 -2485 0
2475 -2486 0
2468 -2485 0
2468 2474 -2486 0
2468 2475 -2488 0
2469 -2486 0
2469 2474 -2488 0
2469 2475 -2490 0
c (0<=(aux604 + aux606 - aux609))
-2475 2490 0
-2474 2488 0
-2469 2490 0
-2469 -2475 2488 0
-2469 -2474 2486 0
-2468 2488 0
-2468 -2475 2486 0
-2468 -2474 2485 0
c ((SATLiteral(317) - aux610 + SATLiteral(587))<=0)
-587 -2492 0
-317 -2492 0
-317 -587 -2493 0
c (0<=(SATLiteral(317) - aux610 + SATLiteral(587)))
587 2493 0
317 2493 0
317 587 2492 0
c ((SATLiteral(992) - aux611 + SATLiteral(857))<=0)
-857 -2495 0
-992 -2495 0
-992 -857 -2496 0
c (0<=(SATLiteral(992) - aux611 + SATLiteral(857)))
857 2496 0
992 2496 0
992 857 2495 0
c (( - aux612 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2498 0
-722 -2498 0
-722 -182 -2499 0
c (0<=( - aux612 + SATLiteral(722) + SATLiteral(182)))
182 2499 0
722 2499 0
722 182 2498 0
c (( - aux613 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2501 0
-452 -2501 0
-452 -1127 -2502 0
c (0<=( - aux613 + SATLiteral(452) + SATLiteral(1127)))
1127 2502 0
452 2502 0
452 1127 2501 0
c ((aux613 - aux614 + SATLiteral(47))<=0)
2501 -2504 0
2502 -2505 0
-47 -2504 0
-47 2501 -2505 0
-47 2502 -2507 0
c (0<=(aux613 - aux614 + SATLiteral(47)))
-2502 2507 0
-2501 2505 0
47 2507 0
47 -2502 2505 0
47 -2501 2504 0
c ((aux610 + aux612 - aux615)<=0)
2498 -2509 0
2499 -2510 0
2492 -2509 0
2492 2498 -2510 0
2492 2499 -2512 0
2493 -2510 0
2493 2498 -2512 0
2493 2499 -2514 0
c (0<=(aux610 + aux612 - aux615))
-2499 2514 0
-2498 2512 0
-2493 2514 0
-2493 -2499 2512 0
-2493 -2498 2510 0
-2492 2512 0
-2492 -2499 2510 0
-2492 -2498 2509 0
c ((SATLiteral(318) - aux616 + SATLiteral(589))<=0)
-589 -2516 0
-318 -2516 0
-318 -589 -2517 0
c (0<=(SATLiteral(318) - aux616 + SATLiteral(589)))
589 2517 0
318 2517 0
318 589 2516 0
c ((SATLiteral(994) - aux617 + SATLiteral(859))<=0)
-859 -2519 0
-994 -2519 0
-994 -859 -2520 0
c (0<=(SATLiteral(994) - aux617 + SATLiteral(859)))
859 2520 0
994 2520 0
994 859 2519 0
c (( - aux618 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2522 0
-724 -2522 0
-724 -184 -2523 0
c (0<=( - aux618 + SATLiteral(724) + SATLiteral(184)))
184 2523 0
724 2523 0
724 184 2522 0
c (( - aux619 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2525 0
-454 -2525 0
-454 -1129 -2526 0
c (0<=( - aux619 + SATLiteral(454) + SATLiteral(1129)))
1129 2526 0
454 2526 0
454 1129 2525 0
c ((aux619 - aux620 + SATLiteral(49))<=0)
2525 -2528 0
2526 -2529 0
-49 -2528 0
-49 2525 -2529 0
-49 2526 -2531 0
c (0<=(aux619 - aux620 + SATLiteral(49)))
-2526 2531 0
-2525 2529 0
49 2531 0
49 -2526 2529 0
49 -2525 2528 0
c ((aux616 + aux618 - aux621)<=0)
2522 -2533 0
2523 -2534 0
2516 -2533 0
2516 2522 -2534 0
2516 2523 -2536 0
2517 -2534 0
2517 2522 -2536 0
2517 2523 -2538 0
c (0<=(aux616 + aux618 - aux621))
-2523 2538 0
-2522 2536 0
-2517 2538 0
-2517 -2523 2536 0
-2517 -2522 2534 0
-2516 2536 0
-2516 -2523 2534 0
-2516 -2522 2533 0
c ((SATLiteral(319) - aux622 + SATLiteral(591))<=0)
-591 -2540 0
-319 -2540 0
-319 -591 -2541 0
c (0<=(SATLiteral(319) - aux622 + SATLiteral(591)))
591 2541 0
319 2541 0
319 591 2540 0
c ((SATLiteral(996) - aux623 + SATLiteral(861))<=0)
-861 -2543 0
-996 -2543 0
-996 -861 -2544 0
c (0<=(SATLiteral(996) - aux623 + SATLiteral(861)))
861 2544 0
996 2544 0
996 861 2543 0
c (( - aux624 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2546 0
-726 -2546 0
-726 -186 -2547 0
c (0<=( - aux624 + SATLiteral(726) + SATLiteral(186)))
186 2547 0
726 2547 0
726 186 2546 0
c (( - aux625 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2549 0
-456 -2549 0
-456 -1131 -2550 0
c (0<=( - aux625 + SATLiteral(456) + SATLiteral(1131)))
1131 2550 0
456 2550 0
456 1131 2549 0
c ((aux625 - aux626 + SATLiteral(51))<=0)
2549 -2552 0
2550 -2553 0
-51 -2552 0
-51 2549 -2553 0
-51 2550 -2555 0
c (0<=(aux625 - aux626 + SATLiteral(51)))
-2550 2555 0
-2549 2553 0
51 2555 0
51 -2550 2553 0
51 -2549 2552 0
c ((aux622 + aux624 - aux627)<=0)
2546 -2557 0
2547 -2558 0
2540 -2557 0
2540 2546 -2558 0
2540 2547 -2560 0
2541 -2558 0
2541 2546 -2560 0
2541 2547 -2562 0
c (0<=(aux622 + aux624 - aux627))
-2547 2562 0
-2546 2560 0
-2541 2562 0
-2541 -2547 2560 0
-2541 -2546 2558 0
-2540 2560 0
-2540 -2547 2558 0
-2540 -2546 2557 0
c ((SATLiteral(320) - aux628 + SATLiteral(593))<=0)
-593 -2564 0
-320 -2564 0
-320 -593 -2565 0
c (0<=(SATLiteral(320) - aux628 + SATLiteral(593)))
593 2565 0
320 2565 0
320 593 2564 0
c ((SATLiteral(998) - aux629 + SATLiteral(863))<=0)
-863 -2567 0
-998 -2567 0
-998 -863 -2568 0
c (0<=(SATLiteral(998) - aux629 + SATLiteral(863)))
863 2568 0
998 2568 0
998 863 2567 0
c (( - aux630 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2570 0
-728 -2570 0
-728 -188 -2571 0
c (0<=( - aux630 + SATLiteral(728) + SATLiteral(188)))
188 2571 0
728 2571 0
728 188 2570 0
c (( - aux631 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2573 0
-458 -2573 0
-458 -1133 -2574 0
c (0<=( - aux631 + SATLiteral(458) + SATLiteral(1133)))
1133 2574 0
458 2574 0
458 1133 2573 0
c ((aux631 - aux632 + SATLiteral(53))<=0)
2573 -2576 0
2574 -2577 0
-53 -2576 0
-53 2573 -2577 0
-53 2574 -2579 0
c (0<=(aux631 - aux632 + SATLiteral(53)))
-2574 2579 0
-2573 2577 0
53 2579 0
53 -2574 2577 0
53 -2573 2576 0
c ((aux628 + aux630 - aux633)<=0)
2570 -2581 0
2571 -2582 0
2564 -2581 0
2564 2570 -2582 0
2564 2571 -2584 0
2565 -2582 0
2565 2570 -2584 0
2565 2571 -2586 0
c (0<=(aux628 + aux630 - aux633))
-2571 2586 0
-2570 2584 0
-2565 2586 0
-2565 -2571 2584 0
-2565 -2570 2582 0
-2564 2584 0
-2564 -2571 2582 0
-2564 -2570 2581 0
c ((SATLiteral(321) - aux634 + SATLiteral(595))<=0)
-595 -2588 0
-321 -2588 0
-321 -595 -2589 0
c (0<=(SATLiteral(321) - aux634 + SATLiteral(595)))
595 2589 0
321 2589 0
321 595 2588 0
c ((SATLiteral(1000) - aux635 + SATLiteral(865))<=0)
-865 -2591 0
-1000 -2591 0
-1000 -865 -2592 0
c (0<=(SATLiteral(1000) - aux635 + SATLiteral(865)))
865 2592 0
1000 2592 0
1000 865 2591 0
c (( - aux636 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2594 0
-730 -2594 0
-730 -190 -2595 0
c (0<=( - aux636 + SATLiteral(730) + SATLiteral(190)))
190 2595 0
730 2595 0
730 190 2594 0
c (( - aux637 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2597 0
-460 -2597 0
-460 -1135 -2598 0
c (0<=( - aux637 + SATLiteral(460) + SATLiteral(1135)))
1135 2598 0
460 2598 0
460 1135 2597 0
c ((aux637 - aux638 + SATLiteral(55))<=0)
2597 -2600 0
2598 -2601 0
-55 -2600 0
-55 2597 -2601 0
-55 2598 -2603 0
c (0<=(aux637 - aux638 + SATLiteral(55)))
-2598 2603 0
-2597 2601 0
55 2603 0
55 -2598 2601 0
55 -2597 2600 0
c ((aux634 + aux636 - aux639)<=0)
2594 -2605 0
2595 -2606 0
2588 -2605 0
2588 2594 -2606 0
2588 2595 -2608 0
2589 -2606 0
2589 2594 -2608 0
2589 2595 -2610 0
c (0<=(aux634 + aux636 - aux639))
-2595 2610 0
-2594 2608 0
-2589 2610 0
-2589 -2595 2608 0
-2589 -2594 2606 0
-2588 2608 0
-2588 -2595 2606 0
-2588 -2594 2605 0
c ((SATLiteral(322) - aux640 + SATLiteral(597))<=0)
-597 -2612 0
-322 -2612 0
-322 -597 -2613 0
c (0<=(SATLiteral(322) - aux640 + SATLiteral(597)))
597 2613 0
322 2613 0
322 597 2612 0
c ((SATLiteral(1002) - aux641 + SATLiteral(867))<=0)
-867 -2615 0
-1002 -2615 0
-1002 -867 -2616 0
c (0<=(SATLiteral(1002) - aux641 + SATLiteral(867)))
867 2616 0
1002 2616 0
1002 867 2615 0
c (( - aux642 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2618 0
-732 -2618 0
-732 -192 -2619 0
c (0<=( - aux642 + SATLiteral(732) + SATLiteral(192)))
192 2619 0
732 2619 0
732 192 2618 0
c (( - aux643 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2621 0
-462 -2621 0
-462 -1137 -2622 0
c (0<=( - aux643 + SATLiteral(462) + SATLiteral(1137)))
1137 2622 0
462 2622 0
462 1137 2621 0
c ((aux643 - aux644 + SATLiteral(57))<=0)
2621 -2624 0
2622 -2625 0
-57 -2624 0
-57 2621 -2625 0
-57 2622 -2627 0
c (0<=(aux643 - aux644 + SATLiteral(57)))
-2622 2627 0
-2621 2625 0
57 2627 0
57 -2622 2625 0
57 -2621 2624 0
c ((aux640 + aux642 - aux645)<=0)
2618 -2629 0
2619 -2630 0
2612 -2629 0
2612 2618 -2630 0
2612 2619 -2632 0
2613 -2630 0
2613 2618 -2632 0
2613 2619 -2634 0
c (0<=(aux640 + aux642 - aux645))
-2619 2634 0
-2618 2632 0
-2613 2634 0
-2613 -2619 2632 0
-2613 -2618 2630 0
-2612 2632 0
-2612 -2619 2630 0
-2612 -2618 2629 0
c ((SATLiteral(323) - aux646 + SATLiteral(599))<=0)
-599 -2636 0
-323 -2636 0
-323 -599 -2637 0
c (0<=(SATLiteral(323) - aux646 + SATLiteral(599)))
599 2637 0
323 2637 0
323 599 2636 0
c ((SATLiteral(1004) - aux647 + SATLiteral(869))<=0)
-869 -2639 0
-1004 -2639 0
-1004 -869 -2640 0
c (0<=(SATLiteral(1004) - aux647 + SATLiteral(869)))
869 2640 0
1004 2640 0
1004 869 2639 0
c (( - aux648 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2642 0
-734 -2642 0
-734 -194 -2643 0
c (0<=( - aux648 + SATLiteral(734) + SATLiteral(194)))
194 2643 0
734 2643 0
734 194 2642 0
c (( - aux649 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2645 0
-464 -2645 0
-464 -1139 -2646 0
c (0<=( - aux649 + SATLiteral(464) + SATLiteral(1139)))
1139 2646 0
464 2646 0
464 1139 2645 0
c ((aux649 - aux650 + SATLiteral(59))<=0)
2645 -2648 0
2646 -2649 0
-59 -2648 0
-59 2645 -2649 0
-59 2646 -2651 0
c (0<=(aux649 - aux650 + SATLiteral(59)))
-2646 2651 0
-2645 2649 0
59 2651 0
59 -2646 2649 0
59 -2645 2648 0
c ((aux646 + aux648 - aux651)<=0)
2642 -2653 0
2643 -2654 0
2636 -2653 0
2636 2642 -2654 0
2636 2643 -2656 0
2637 -2654 0
2637 2642 -2656 0
2637 2643 -2658 0
c (0<=(aux646 + aux648 - aux651))
-2643 2658 0
-2642 2656 0
-2637 2658 0
-2637 -2643 2656 0
-2637 -2642 2654 0
-2636 2656 0
-2636 -2643 2654 0
-2636 -2642 2653 0
c ((SATLiteral(324) - aux652 + SATLiteral(601))<=0)
-601 -2660 0
-324 -2660 0
-324 -601 -2661 0
c (0<=(SATLiteral(324) - aux652 + SATLiteral(601)))
601 2661 0
324 2661 0
324 601 2660 0
c ((SATLiteral(1006) - aux653 + SATLiteral(871))<=0)
-871 -2663 0
-1006 -2663 0
-1006 -871 -2664 0
c (0<=(SATLiteral(1006) - aux653 + SATLiteral(871)))
871 2664 0
1006 2664 0
1006 871 2663 0
c (( - aux654 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2666 0
-736 -2666 0
-736 -196 -2667 0
c (0<=( - aux654 + SATLiteral(736) + SATLiteral(196)))
196 2667 0
736 2667 0
736 196 2666 0
c (( - aux655 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2669 0
-466 -2669 0
-466 -1141 -2670 0
c (0<=( - aux655 + SATLiteral(466) + SATLiteral(1141)))
1141 2670 0
466 2670 0
466 1141 2669 0
c ((aux655 - aux656 + SATLiteral(61))<=0)
2669 -2672 0
2670 -2673 0
-61 -2672 0
-61 2669 -2673 0
-61 2670 -2675 0
c (0<=(aux655 - aux656 + SATLiteral(61)))
-2670 2675 0
-2669 2673 0
61 2675 0
61 -2670 2673 0
61 -2669 2672 0
c ((aux652 + aux654 - aux657)<=0)
2666 -2677 0
2667 -2678 0
2660 -2677 0
2660 2666 -2678 0
2660 2667 -2680 0
2661 -2678 0
2661 2666 -2680 0
2661 2667 -2682 0
c (0<=(aux652 + aux654 - aux657))
-2667 2682 0
-2666 2680 0
-2661 2682 0
-2661 -2667 2680 0
-2661 -2666 2678 0
-2660 2680 0
-2660 -2667 2678 0
-2660 -2666 2677 0
c ((SATLiteral(325) - aux658 + SATLiteral(-600))<=0)
600 -2684 0
-325 -2684 0
-325 600 -2685 0
c (0<=(SATLiteral(325) - aux658 + SATLiteral(-600)))
-600 2685 0
325 2685 0
325 -600 2684 0
c ((SATLiteral(-1005) - aux659 + SATLiteral(-870))<=0)
870 -2687 0
1005 -2687 0
1005 870 -2688 0
c (0<=(SATLiteral(-1005) - aux659 + SATLiteral(-870)))
-870 2688 0
-1005 2688 0
-1005 -870 2687 0
c (( - aux660 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2690 0
735 -2690 0
735 195 -2691 0
c (0<=( - aux660 + SATLiteral(-735) + SATLiteral(-195)))
-195 2691 0
-735 2691 0
-735 -195 2690 0
c (( - aux661 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2693 0
465 -2693 0
465 1140 -2694 0
c (0<=( - aux661 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2694 0
-465 2694 0
-465 -1140 2693 0
c ((aux661 - aux662 + SATLiteral(-60))<=0)
2693 -2696 0
2694 -2697 0
60 -2696 0
60 2693 -2697 0
60 2694 -2699 0
c (0<=(aux661 - aux662 + SATLiteral(-60)))
-2694 2699 0
-2693 2697 0
-60 2699 0
-60 -2694 2697 0
-60 -2693 2696 0
c ((aux658 + aux660 - aux663)<=0)
2690 -2701 0
2691 -2702 0
2684 -2701 0
2684 2690 -2702 0
2684 2691 -2704 0
2685 -2702 0
2685 2690 -2704 0
2685 2691 -2706 0
c (0<=(aux658 + aux660 - aux663))
-2691 2706 0
-2690 2704 0
-2685 2706 0
-2685 -2691 2704 0
-2685 -2690 2702 0
-2684 2704 0
-2684 -2691 2702 0
-2684 -2690 2701 0
c ((SATLiteral(332) - aux664 + SATLiteral(602))<=0)
-602 -2708 0
-332 -2708 0
-332 -602 -2709 0
c (0<=(SATLiteral(332) - aux664 + SATLiteral(602)))
602 2709 0
332 2709 0
332 602 2708 0
c ((SATLiteral(1007) - aux665 + SATLiteral(872))<=0)
-872 -2711 0
-1007 -2711 0
-1007 -872 -2712 0
c (0<=(SATLiteral(1007) - aux665 + SATLiteral(872)))
872 2712 0
1007 2712 0
1007 872 2711 0
c (( - aux666 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2714 0
-737 -2714 0
-737 -197 -2715 0
c (0<=( - aux666 + SATLiteral(737) + SATLiteral(197)))
197 2715 0
737 2715 0
737 197 2714 0
c (( - aux667 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2717 0
-467 -2717 0
-467 -1142 -2718 0
c (0<=( - aux667 + SATLiteral(467) + SATLiteral(1142)))
1142 2718 0
467 2718 0
467 1142 2717 0
c ((aux667 - aux668 + SATLiteral(62))<=0)
2717 -2720 0
2718 -2721 0
-62 -2720 0
-62 2717 -2721 0
-62 2718 -2723 0
c (0<=(aux667 - aux668 + SATLiteral(62)))
-2718 2723 0
-2717 2721 0
62 2723 0
62 -2718 2721 0
62 -2717 2720 0
c ((aux664 + aux666 - aux669)<=0)
2714 -2725 0
2715 -2726 0
2708 -2725 0
2708 2714 -2726 0
2708 2715 -2728 0
2709 -2726 0
2709 2714 -2728 0
2709 2715 -2730 0
c (0<=(aux664 + aux666 - aux669))
-2715 2730 0
-2714 2728 0
-2709 2730 0
-2709 -2715 2728 0
-2709 -2714 2726 0
-2708 2728 0
-2708 -2715 2726 0
-2708 -2714 2725 0
c ((SATLiteral(334) - aux670 + SATLiteral(604))<=0)
-604 -2732 0
-334 -2732 0
-334 -604 -2733 0
c (0<=(SATLiteral(334) - aux670 + SATLiteral(604)))
604 2733 0
334 2733 0
334 604 2732 0
c ((SATLiteral(1009) - aux671 + SATLiteral(874))<=0)
-874 -2735 0
-1009 -2735 0
-1009 -874 -2736 0
c (0<=(SATLiteral(1009) - aux671 + SATLiteral(874)))
874 2736 0
1009 2736 0
1009 874 2735 0
c (( - aux672 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2738 0
-739 -2738 0
-739 -199 -2739 0
c (0<=( - aux672 + SATLiteral(739) + SATLiteral(199)))
199 2739 0
739 2739 0
739 199 2738 0
c (( - aux673 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2741 0
-469 -2741 0
-469 -1144 -2742 0
c (0<=( - aux673 + SATLiteral(469) + SATLiteral(1144)))
1144 2742 0
469 2742 0
469 1144 2741 0
c ((aux673 - aux674 + SATLiteral(64))<=0)
2741 -2744 0
2742 -2745 0
-64 -2744 0
-64 2741 -2745 0
-64 2742 -2747 0
c (0<=(aux673 - aux674 + SATLiteral(64)))
-2742 2747 0
-2741 2745 0
64 2747 0
64 -2742 2745 0
64 -2741 2744 0
c ((aux670 + aux672 - aux675)<=0)
2738 -2749 0
2739 -2750 0
2732 -2749 0
2732 2738 -2750 0
2732 2739 -2752 0
2733 -2750 0
2733 2738 -2752 0
2733 2739 -2754 0
c (0<=(aux670 + aux672 - aux675))
-2739 2754 0
-2738 2752 0
-2733 2754 0
-2733 -2739 2752 0
-2733 -2738 2750 0
-2732 2752 0
-2732 -2739 2750 0
-2732 -2738 2749 0
c ((SATLiteral(336) - aux676 + SATLiteral(606))<=0)
-606 -2756 0
-336 -2756 0
-336 -606 -2757 0
c (0<=(SATLiteral(336) - aux676 + SATLiteral(606)))
606 2757 0
336 2757 0
336 606 2756 0
c ((SATLiteral(1011) - aux677 + SATLiteral(876))<=0)
-876 -2759 0
-1011 -2759 0
-1011 -876 -2760 0
c (0<=(SATLiteral(1011) - aux677 + SATLiteral(876)))
876 2760 0
1011 2760 0
1011 876 2759 0
c (( - aux678 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2762 0
-741 -2762 0
-741 -201 -2763 0
c (0<=( - aux678 + SATLiteral(741) + SATLiteral(201)))
201 2763 0
741 2763 0
741 201 2762 0
c (( - aux679 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2765 0
-471 -2765 0
-471 -1146 -2766 0
c (0<=( - aux679 + SATLiteral(471) + SATLiteral(1146)))
1146 2766 0
471 2766 0
471 1146 2765 0
c ((aux679 - aux680 + SATLiteral(66))<=0)
2765 -2768 0
2766 -2769 0
-66 -2768 0
-66 2765 -2769 0
-66 2766 -2771 0
c (0<=(aux679 - aux680 + SATLiteral(66)))
-2766 2771 0
-2765 2769 0
66 2771 0
66 -2766 2769 0
66 -2765 2768 0
c ((aux676 + aux678 - aux681)<=0)
2762 -2773 0
2763 -2774 0
2756 -2773 0
2756 2762 -2774 0
2756 2763 -2776 0
2757 -2774 0
2757 2762 -2776 0
2757 2763 -2778 0
c (0<=(aux676 + aux678 - aux681))
-2763 2778 0
-2762 2776 0
-2757 2778 0
-2757 -2763 2776 0
-2757 -2762 2774 0
-2756 2776 0
-2756 -2763 2774 0
-2756 -2762 2773 0
c ((SATLiteral(338) - aux682 + SATLiteral(608))<=0)
-608 -2780 0
-338 -2780 0
-338 -608 -2781 0
c (0<=(SATLiteral(338) - aux682 + SATLiteral(608)))
608 2781 0
338 2781 0
338 608 2780 0
c ((SATLiteral(1013) - aux683 + SATLiteral(878))<=0)
-878 -2783 0
-1013 -2783 0
-1013 -878 -2784 0
c (0<=(SATLiteral(1013) - aux683 + SATLiteral(878)))
878 2784 0
1013 2784 0
1013 878 2783 0
c (( - aux684 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2786 0
-743 -2786 0
-743 -203 -2787 0
c (0<=( - aux684 + SATLiteral(743) + SATLiteral(203)))
203 2787 0
743 2787 0
743 203 2786 0
c (( - aux685 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2789 0
-473 -2789 0
-473 -1148 -2790 0
c (0<=( - aux685 + SATLiteral(473) + SATLiteral(1148)))
1148 2790 0
473 2790 0
473 1148 2789 0
c ((aux685 - aux686 + SATLiteral(68))<=0)
2789 -2792 0
2790 -2793 0
-68 -2792 0
-68 2789 -2793 0
-68 2790 -2795 0
c (0<=(aux685 - aux686 + SATLiteral(68)))
-2790 2795 0
-2789 2793 0
68 2795 0
68 -2790 2793 0
68 -2789 2792 0
c ((aux682 + aux684 - aux687)<=0)
2786 -2797 0
2787 -2798 0
2780 -2797 0
2780 2786 -2798 0
2780 2787 -2800 0
2781 -2798 0
2781 2786 -2800 0
2781 2787 -2802 0
c (0<=(aux682 + aux684 - aux687))
-2787 2802 0
-2786 2800 0
-2781 2802 0
-2781 -2787 2800 0
-2781 -2786 2798 0
-2780 2800 0
-2780 -2787 2798 0
-2780 -2786 2797 0
c ((SATLiteral(340) - aux688 + SATLiteral(610))<=0)
-610 -2804 0
-340 -2804 0
-340 -610 -2805 0
c (0<=(SATLiteral(340) - aux688 + SATLiteral(610)))
610 2805 0
340 2805 0
340 610 2804 0
c ((SATLiteral(1015) - aux689 + SATLiteral(880))<=0)
-880 -2807 0
-1015 -2807 0
-1015 -880 -2808 0
c (0<=(SATLiteral(1015) - aux689 + SATLiteral(880)))
880 2808 0
1015 2808 0
1015 880 2807 0
c (( - aux690 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2810 0
-745 -2810 0
-745 -205 -2811 0
c (0<=( - aux690 + SATLiteral(745) + SATLiteral(205)))
205 2811 0
745 2811 0
745 205 2810 0
c (( - aux691 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2813 0
-475 -2813 0
-475 -1150 -2814 0
c (0<=( - aux691 + SATLiteral(475) + SATLiteral(1150)))
1150 2814 0
475 2814 0
475 1150 2813 0
c ((aux691 - aux692 + SATLiteral(70))<=0)
2813 -2816 0
2814 -2817 0
-70 -2816 0
-70 2813 -2817 0
-70 2814 -2819 0
c (0<=(aux691 - aux692 + SATLiteral(70)))
-2814 2819 0
-2813 2817 0
70 2819 0
70 -2814 2817 0
70 -2813 2816 0
c ((aux688 + aux690 - aux693)<=0)
2810 -2821 0
2811 -2822 0
2804 -2821 0
2804 2810 -2822 0
2804 2811 -2824 0
2805 -2822 0
2805 2810 -2824 0
2805 2811 -2826 0
c (0<=(aux688 + aux690 - aux693))
-2811 2826 0
-2810 2824 0
-2805 2826 0
-2805 -2811 2824 0
-2805 -2810 2822 0
-2804 2824 0
-2804 -2811 2822 0
-2804 -2810 2821 0
c ((SATLiteral(342) - aux694 + SATLiteral(612))<=0)
-612 -2828 0
-342 -2828 0
-342 -612 -2829 0
c (0<=(SATLiteral(342) - aux694 + SATLiteral(612)))
612 2829 0
342 2829 0
342 612 2828 0
c ((SATLiteral(1017) - aux695 + SATLiteral(882))<=0)
-882 -2831 0
-1017 -2831 0
-1017 -882 -2832 0
c (0<=(SATLiteral(1017) - aux695 + SATLiteral(882)))
882 2832 0
1017 2832 0
1017 882 2831 0
c (( - aux696 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -2834 0
-747 -2834 0
-747 -207 -2835 0
c (0<=( - aux696 + SATLiteral(747) + SATLiteral(207)))
207 2835 0
747 2835 0
747 207 2834 0
c (( - aux697 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -2837 0
-477 -2837 0
-477 -1152 -2838 0
c (0<=( - aux697 + SATLiteral(477) + SATLiteral(1152)))
1152 2838 0
477 2838 0
477 1152 2837 0
c ((aux697 - aux698 + SATLiteral(72))<=0)
2837 -2840 0
2838 -2841 0
-72 -2840 0
-72 2837 -2841 0
-72 2838 -2843 0
c (0<=(aux697 - aux698 + SATLiteral(72)))
-2838 2843 0
-2837 2841 0
72 2843 0
72 -2838 2841 0
72 -2837 2840 0
c ((aux694 + aux696 - aux699)<=0)
2834 -2845 0
2835 -2846 0
2828 -2845 0
2828 2834 -2846 0
2828 2835 -2848 0
2829 -2846 0
2829 2834 -2848 0
2829 2835 -2850 0
c (0<=(aux694 + aux696 - aux699))
-2835 2850 0
-2834 2848 0
-2829 2850 0
-2829 -2835 2848 0
-2829 -2834 2846 0
-2828 2848 0
-2828 -2835 2846 0
-2828 -2834 2845 0
c ((SATLiteral(344) - aux700 + SATLiteral(614))<=0)
-614 -2852 0
-344 -2852 0
-344 -614 -2853 0
c (0<=(SATLiteral(344) - aux700 + SATLiteral(614)))
614 2853 0
344 2853 0
344 614 2852 0
c ((SATLiteral(1019) - aux701 + SATLiteral(884))<=0)
-884 -2855 0
-1019 -2855 0
-1019 -884 -2856 0
c (0<=(SATLiteral(1019) - aux701 + SATLiteral(884)))
884 2856 0
1019 2856 0
1019 884 2855 0
c (( - aux702 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -2858 0
-749 -2858 0
-749 -209 -2859 0
c (0<=( - aux702 + SATLiteral(749) + SATLiteral(209)))
209 2859 0
749 2859 0
749 209 2858 0
c (( - aux703 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -2861 0
-479 -2861 0
-479 -1154 -2862 0
c (0<=( - aux703 + SATLiteral(479) + SATLiteral(1154)))
1154 2862 0
479 2862 0
479 1154 2861 0
c ((aux703 - aux704 + SATLiteral(74))<=0)
2861 -2864 0
2862 -2865 0
-74 -2864 0
-74 2861 -2865 0
-74 2862 -2867 0
c (0<=(aux703 - aux704 + SATLiteral(74)))
-2862 2867 0
-2861 2865 0
74 2867 0
74 -2862 2865 0
74 -2861 2864 0
c ((aux700 + aux702 - aux705)<=0)
2858 -2869 0
2859 -2870 0
2852 -2869 0
2852 2858 -2870 0
2852 2859 -2872 0
2853 -2870 0
2853 2858 -2872 0
2853 2859 -2874 0
c (0<=(aux700 + aux702 - aux705))
-2859 2874 0
-2858 2872 0
-2853 2874 0
-2853 -2859 2872 0
-2853 -2858 2870 0
-2852 2872 0
-2852 -2859 2870 0
-2852 -2858 2869 0
c ((SATLiteral(346) - aux706 + SATLiteral(616))<=0)
-616 -2876 0
-346 -2876 0
-346 -616 -2877 0
c (0<=(SATLiteral(346) - aux706 + SATLiteral(616)))
616 2877 0
346 2877 0
346 616 2876 0
c ((SATLiteral(1021) - aux707 + SATLiteral(886))<=0)
-886 -2879 0
-1021 -2879 0
-1021 -886 -2880 0
c (0<=(SATLiteral(1021) - aux707 + SATLiteral(886)))
886 2880 0
1021 2880 0
1021 886 2879 0
c (( - aux708 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -2882 0
-751 -2882 0
-751 -211 -2883 0
c (0<=( - aux708 + SATLiteral(751) + SATLiteral(211)))
211 2883 0
751 2883 0
751 211 2882 0
c (( - aux709 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -2885 0
-481 -2885 0
-481 -1156 -2886 0
c (0<=( - aux709 + SATLiteral(481) + SATLiteral(1156)))
1156 2886 0
481 2886 0
481 1156 2885 0
c ((aux709 - aux710 + SATLiteral(76))<=0)
2885 -2888 0
2886 -2889 0
-76 -2888 0
-76 2885 -2889 0
-76 2886 -2891 0
c (0<=(aux709 - aux710 + SATLiteral(76)))
-2886 2891 0
-2885 2889 0
76 2891 0
76 -2886 2889 0
76 -2885 2888 0
c ((aux706 + aux708 - aux711)<=0)
2882 -2893 0
2883 -2894 0
2876 -2893 0
2876 2882 -2894 0
2876 2883 -2896 0
2877 -2894 0
2877 2882 -2896 0
2877 2883 -2898 0
c (0<=(aux706 + aux708 - aux711))
-2883 2898 0
-2882 2896 0
-2877 2898 0
-2877 -2883 2896 0
-2877 -2882 2894 0
-2876 2896 0
-2876 -2883 2894 0
-2876 -2882 2893 0
c ((SATLiteral(-345) - aux712 + SATLiteral(-615))<=0)
615 -2900 0
345 -2900 0
345 615 -2901 0
c (0<=(SATLiteral(-345) - aux712 + SATLiteral(-615)))
-615 2901 0
-345 2901 0
-345 -615 2900 0
c ((SATLiteral(-1020) - aux713 + SATLiteral(-885))<=0)
885 -2903 0
1020 -2903 0
1020 885 -2904 0
c (0<=(SATLiteral(-1020) - aux713 + SATLiteral(-885)))
-885 2904 0
-1020 2904 0
-1020 -885 2903 0
c (( - aux714 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -2906 0
750 -2906 0
750 210 -2907 0
c (0<=( - aux714 + SATLiteral(-750) + SATLiteral(-210)))
-210 2907 0
-750 2907 0
-750 -210 2906 0
c (( - aux715 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -2909 0
480 -2909 0
480 1155 -2910 0
c (0<=( - aux715 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 2910 0
-480 2910 0
-480 -1155 2909 0
c ((aux715 - aux716 + SATLiteral(-75))<=0)
2909 -2912 0
2910 -2913 0
75 -2912 0
75 2909 -2913 0
75 2910 -2915 0
c (0<=(aux715 - aux716 + SATLiteral(-75)))
-2910 2915 0
-2909 2913 0
-75 2915 0
-75 -2910 2913 0
-75 -2909 2912 0
c ((aux712 + aux714 - aux717)<=0)
2906 -2917 0
2907 -2918 0
2900 -2917 0
2900 2906 -2918 0
2900 2907 -2920 0
2901 -2918 0
2901 2906 -2920 0
2901 2907 -2922 0
c (0<=(aux712 + aux714 - aux717))
-2907 2922 0
-2906 2920 0
-2901 2922 0
-2901 -2907 2920 0
-2901 -2906 2918 0
-2900 2920 0
-2900 -2907 2918 0
-2900 -2906 2917 0
c ((SATLiteral(347) - aux718 + SATLiteral(617))<=0)
-617 -2924 0
-347 -2924 0
-347 -617 -2925 0
c (0<=(SATLiteral(347) - aux718 + SATLiteral(617)))
617 2925 0
347 2925 0
347 617 2924 0
c ((SATLiteral(1022) - aux719 + SATLiteral(887))<=0)
-887 -2927 0
-1022 -2927 0
-1022 -887 -2928 0
c (0<=(SATLiteral(1022) - aux719 + SATLiteral(887)))
887 2928 0
1022 2928 0
1022 887 2927 0
c (( - aux720 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -2930 0
-752 -2930 0
-752 -212 -2931 0
c (0<=( - aux720 + SATLiteral(752) + SATLiteral(212)))
212 2931 0
752 2931 0
752 212 2930 0
c (( - aux721 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -2933 0
-482 -2933 0
-482 -1157 -2934 0
c (0<=( - aux721 + SATLiteral(482) + SATLiteral(1157)))
1157 2934 0
482 2934 0
482 1157 2933 0
c ((aux721 - aux722 + SATLiteral(77))<=0)
2933 -2936 0
2934 -2937 0
-77 -2936 0
-77 2933 -2937 0
-77 2934 -2939 0
c (0<=(aux721 - aux722 + SATLiteral(77)))
-2934 2939 0
-2933 2937 0
77 2939 0
77 -2934 2937 0
77 -2933 2936 0
c ((aux718 + aux720 - aux723)<=0)
2930 -2941 0
2931 -2942 0
2924 -2941 0
2924 2930 -2942 0
2924 2931 -2944 0
2925 -2942 0
2925 2930 -2944 0
2925 2931 -2946 0
c (0<=(aux718 + aux720 - aux723))
-2931 2946 0
-2930 2944 0
-2925 2946 0
-2925 -2931 2944 0
-2925 -2930 2942 0
-2924 2944 0
-2924 -2931 2942 0
-2924 -2930 2941 0
c ((SATLiteral(349) - aux724 + SATLiteral(619))<=0)
-619 -2948 0
-349 -2948 0
-349 -619 -2949 0
c (0<=(SATLiteral(349) - aux724 + SATLiteral(619)))
619 2949 0
349 2949 0
349 619 2948 0
c ((SATLiteral(1024) - aux725 + SATLiteral(889))<=0)
-889 -2951 0
-1024 -2951 0
-1024 -889 -2952 0
c (0<=(SATLiteral(1024) - aux725 + SATLiteral(889)))
889 2952 0
1024 2952 0
1024 889 2951 0
c (( - aux726 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -2954 0
-754 -2954 0
-754 -214 -2955 0
c (0<=( - aux726 + SATLiteral(754) + SATLiteral(214)))
214 2955 0
754 2955 0
754 214 2954 0
c (( - aux727 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -2957 0
-484 -2957 0
-484 -1159 -2958 0
c (0<=( - aux727 + SATLiteral(484) + SATLiteral(1159)))
1159 2958 0
484 2958 0
484 1159 2957 0
c ((aux727 - aux728 + SATLiteral(79))<=0)
2957 -2960 0
2958 -2961 0
-79 -2960 0
-79 2957 -2961 0
-79 2958 -2963 0
c (0<=(aux727 - aux728 + SATLiteral(79)))
-2958 2963 0
-2957 2961 0
79 2963 0
79 -2958 2961 0
79 -2957 2960 0
c ((aux724 + aux726 - aux729)<=0)
2954 -2965 0
2955 -2966 0
2948 -2965 0
2948 2954 -2966 0
2948 2955 -2968 0
2949 -2966 0
2949 2954 -2968 0
2949 2955 -2970 0
c (0<=(aux724 + aux726 - aux729))
-2955 2970 0
-2954 2968 0
-2949 2970 0
-2949 -2955 2968 0
-2949 -2954 2966 0
-2948 2968 0
-2948 -2955 2966 0
-2948 -2954 2965 0
c ((SATLiteral(351) - aux730 + SATLiteral(621))<=0)
-621 -2972 0
-351 -2972 0
-351 -621 -2973 0
c (0<=(SATLiteral(351) - aux730 + SATLiteral(621)))
621 2973 0
351 2973 0
351 621 2972 0
c ((SATLiteral(1026) - aux731 + SATLiteral(891))<=0)
-891 -2975 0
-1026 -2975 0
-1026 -891 -2976 0
c (0<=(SATLiteral(1026) - aux731 + SATLiteral(891)))
891 2976 0
1026 2976 0
1026 891 2975 0
c (( - aux732 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -2978 0
-756 -2978 0
-756 -216 -2979 0
c (0<=( - aux732 + SATLiteral(756) + SATLiteral(216)))
216 2979 0
756 2979 0
756 216 2978 0
c (( - aux733 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -2981 0
-486 -2981 0
-486 -1161 -2982 0
c (0<=( - aux733 + SATLiteral(486) + SATLiteral(1161)))
1161 2982 0
486 2982 0
486 1161 2981 0
c ((aux733 - aux734 + SATLiteral(81))<=0)
2981 -2984 0
2982 -2985 0
-81 -2984 0
-81 2981 -2985 0
-81 2982 -2987 0
c (0<=(aux733 - aux734 + SATLiteral(81)))
-2982 2987 0
-2981 2985 0
81 2987 0
81 -2982 2985 0
81 -2981 2984 0
c ((aux730 + aux732 - aux735)<=0)
2978 -2989 0
2979 -2990 0
2972 -2989 0
2972 2978 -2990 0
2972 2979 -2992 0
2973 -2990 0
2973 2978 -2992 0
2973 2979 -2994 0
c (0<=(aux730 + aux732 - aux735))
-2979 2994 0
-2978 2992 0
-2973 2994 0
-2973 -2979 2992 0
-2973 -2978 2990 0
-2972 2992 0
-2972 -2979 2990 0
-2972 -2978 2989 0
c ((SATLiteral(353) - aux736 + SATLiteral(623))<=0)
-623 -2996 0
-353 -2996 0
-353 -623 -2997 0
c (0<=(SATLiteral(353) - aux736 + SATLiteral(623)))
623 2997 0
353 2997 0
353 623 2996 0
c ((SATLiteral(1028) - aux737 + SATLiteral(893))<=0)
-893 -2999 0
-1028 -2999 0
-1028 -893 -3000 0
c (0<=(SATLiteral(1028) - aux737 + SATLiteral(893)))
893 3000 0
1028 3000 0
1028 893 2999 0
c (( - aux738 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3002 0
-758 -3002 0
-758 -218 -3003 0
c (0<=( - aux738 + SATLiteral(758) + SATLiteral(218)))
218 3003 0
758 3003 0
758 218 3002 0
c (( - aux739 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3005 0
-488 -3005 0
-488 -1163 -3006 0
c (0<=( - aux739 + SATLiteral(488) + SATLiteral(1163)))
1163 3006 0
488 3006 0
488 1163 3005 0
c ((aux739 - aux740 + SATLiteral(83))<=0)
3005 -3008 0
3006 -3009 0
-83 -3008 0
-83 3005 -3009 0
-83 3006 -3011 0
c (0<=(aux739 - aux740 + SATLiteral(83)))
-3006 3011 0
-3005 3009 0
83 3011 0
83 -3006 3009 0
83 -3005 3008 0
c ((aux736 + aux738 - aux741)<=0)
3002 -3013 0
3003 -3014 0
2996 -3013 0
2996 3002 -3014 0
2996 3003 -3016 0
2997 -3014 0
2997 3002 -3016 0
2997 3003 -3018 0
c (0<=(aux736 + aux738 - aux741))
-3003 3018 0
-3002 3016 0
-2997 3018 0
-2997 -3003 3016 0
-2997 -3002 3014 0
-2996 3016 0
-2996 -3003 3014 0
-2996 -3002 3013 0
c ((SATLiteral(355) - aux742 + SATLiteral(625))<=0)
-625 -3020 0
-355 -3020 0
-355 -625 -3021 0
c (0<=(SATLiteral(355) - aux742 + SATLiteral(625)))
625 3021 0
355 3021 0
355 625 3020 0
c ((SATLiteral(1030) - aux743 + SATLiteral(895))<=0)
-895 -3023 0
-1030 -3023 0
-1030 -895 -3024 0
c (0<=(SATLiteral(1030) - aux743 + SATLiteral(895)))
895 3024 0
1030 3024 0
1030 895 3023 0
c (( - aux744 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3026 0
-760 -3026 0
-760 -220 -3027 0
c (0<=( - aux744 + SATLiteral(760) + SATLiteral(220)))
220 3027 0
760 3027 0
760 220 3026 0
c (( - aux745 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3029 0
-490 -3029 0
-490 -1165 -3030 0
c (0<=( - aux745 + SATLiteral(490) + SATLiteral(1165)))
1165 3030 0
490 3030 0
490 1165 3029 0
c ((aux745 - aux746 + SATLiteral(85))<=0)
3029 -3032 0
3030 -3033 0
-85 -3032 0
-85 3029 -3033 0
-85 3030 -3035 0
c (0<=(aux745 - aux746 + SATLiteral(85)))
-3030 3035 0
-3029 3033 0
85 3035 0
85 -3030 3033 0
85 -3029 3032 0
c ((aux742 + aux744 - aux747)<=0)
3026 -3037 0
3027 -3038 0
3020 -3037 0
3020 3026 -3038 0
3020 3027 -3040 0
3021 -3038 0
3021 3026 -3040 0
3021 3027 -3042 0
c (0<=(aux742 + aux744 - aux747))
-3027 3042 0
-3026 3040 0
-3021 3042 0
-3021 -3027 3040 0
-3021 -3026 3038 0
-3020 3040 0
-3020 -3027 3038 0
-3020 -3026 3037 0
c ((SATLiteral(357) - aux748 + SATLiteral(627))<=0)
-627 -3044 0
-357 -3044 0
-357 -627 -3045 0
c (0<=(SATLiteral(357) - aux748 + SATLiteral(627)))
627 3045 0
357 3045 0
357 627 3044 0
c ((SATLiteral(1032) - aux749 + SATLiteral(897))<=0)
-897 -3047 0
-1032 -3047 0
-1032 -897 -3048 0
c (0<=(SATLiteral(1032) - aux749 + SATLiteral(897)))
897 3048 0
1032 3048 0
1032 897 3047 0
c (( - aux750 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3050 0
-762 -3050 0
-762 -222 -3051 0
c (0<=( - aux750 + SATLiteral(762) + SATLiteral(222)))
222 3051 0
762 3051 0
762 222 3050 0
c (( - aux751 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3053 0
-492 -3053 0
-492 -1167 -3054 0
c (0<=( - aux751 + SATLiteral(492) + SATLiteral(1167)))
1167 3054 0
492 3054 0
492 1167 3053 0
c ((aux751 - aux752 + SATLiteral(87))<=0)
3053 -3056 0
3054 -3057 0
-87 -3056 0
-87 3053 -3057 0
-87 3054 -3059 0
c (0<=(aux751 - aux752 + SATLiteral(87)))
-3054 3059 0
-3053 3057 0
87 3059 0
87 -3054 3057 0
87 -3053 3056 0
c ((aux748 + aux750 - aux753)<=0)
3050 -3061 0
3051 -3062 0
3044 -3061 0
3044 3050 -3062 0
3044 3051 -3064 0
3045 -3062 0
3045 3050 -3064 0
3045 3051 -3066 0
c (0<=(aux748 + aux750 - aux753))
-3051 3066 0
-3050 3064 0
-3045 3066 0
-3045 -3051 3064 0
-3045 -3050 3062 0
-3044 3064 0
-3044 -3051 3062 0
-3044 -3050 3061 0
c ((SATLiteral(359) - aux754 + SATLiteral(629))<=0)
-629 -3068 0
-359 -3068 0
-359 -629 -3069 0
c (0<=(SATLiteral(359) - aux754 + SATLiteral(629)))
629 3069 0
359 3069 0
359 629 3068 0
c ((SATLiteral(1034) - aux755 + SATLiteral(899))<=0)
-899 -3071 0
-1034 -3071 0
-1034 -899 -3072 0
c (0<=(SATLiteral(1034) - aux755 + SATLiteral(899)))
899 3072 0
1034 3072 0
1034 899 3071 0
c (( - aux756 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3074 0
-764 -3074 0
-764 -224 -3075 0
c (0<=( - aux756 + SATLiteral(764) + SATLiteral(224)))
224 3075 0
764 3075 0
764 224 3074 0
c (( - aux757 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3077 0
-494 -3077 0
-494 -1169 -3078 0
c (0<=( - aux757 + SATLiteral(494) + SATLiteral(1169)))
1169 3078 0
494 3078 0
494 1169 3077 0
c ((aux757 - aux758 + SATLiteral(89))<=0)
3077 -3080 0
3078 -3081 0
-89 -3080 0
-89 3077 -3081 0
-89 3078 -3083 0
c (0<=(aux757 - aux758 + SATLiteral(89)))
-3078 3083 0
-3077 3081 0
89 3083 0
89 -3078 3081 0
89 -3077 3080 0
c ((aux754 + aux756 - aux759)<=0)
3074 -3085 0
3075 -3086 0
3068 -3085 0
3068 3074 -3086 0
3068 3075 -3088 0
3069 -3086 0
3069 3074 -3088 0
3069 3075 -3090 0
c (0<=(aux754 + aux756 - aux759))
-3075 3090 0
-3074 3088 0
-3069 3090 0
-3069 -3075 3088 0
-3069 -3074 3086 0
-3068 3088 0
-3068 -3075 3086 0
-3068 -3074 3085 0
c ((SATLiteral(361) - aux760 + SATLiteral(631))<=0)
-631 -3092 0
-361 -3092 0
-361 -631 -3093 0
c (0<=(SATLiteral(361) - aux760 + SATLiteral(631)))
631 3093 0
361 3093 0
361 631 3092 0
c ((SATLiteral(1036) - aux761 + SATLiteral(901))<=0)
-901 -3095 0
-1036 -3095 0
-1036 -901 -3096 0
c (0<=(SATLiteral(1036) - aux761 + SATLiteral(901)))
901 3096 0
1036 3096 0
1036 901 3095 0
c (( - aux762 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3098 0
-766 -3098 0
-766 -226 -3099 0
c (0<=( - aux762 + SATLiteral(766) + SATLiteral(226)))
226 3099 0
766 3099 0
766 226 3098 0
c (( - aux763 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3101 0
-496 -3101 0
-496 -1171 -3102 0
c (0<=( - aux763 + SATLiteral(496) + SATLiteral(1171)))
1171 3102 0
496 3102 0
496 1171 3101 0
c ((aux763 - aux764 + SATLiteral(91))<=0)
3101 -3104 0
3102 -3105 0
-91 -3104 0
-91 3101 -3105 0
-91 3102 -3107 0
c (0<=(aux763 - aux764 + SATLiteral(91)))
-3102 3107 0
-3101 3105 0
91 3107 0
91 -3102 3105 0
91 -3101 3104 0
c ((aux760 + aux762 - aux765)<=0)
3098 -3109 0
3099 -3110 0
3092 -3109 0
3092 3098 -3110 0
3092 3099 -3112 0
3093 -3110 0
3093 3098 -3112 0
3093 3099 -3114 0
c (0<=(aux760 + aux762 - aux765))
-3099 3114 0
-3098 3112 0
-3093 3114 0
-3093 -3099 3112 0
-3093 -3098 3110 0
-3092 3112 0
-3092 -3099 3110 0
-3092 -3098 3109 0
c ((SATLiteral(-360) - aux766 + SATLiteral(-630))<=0)
630 -3116 0
360 -3116 0
360 630 -3117 0
c (0<=(SATLiteral(-360) - aux766 + SATLiteral(-630)))
-630 3117 0
-360 3117 0
-360 -630 3116 0
c ((SATLiteral(-1035) - aux767 + SATLiteral(-900))<=0)
900 -3119 0
1035 -3119 0
1035 900 -3120 0
c (0<=(SATLiteral(-1035) - aux767 + SATLiteral(-900)))
-900 3120 0
-1035 3120 0
-1035 -900 3119 0
c (( - aux768 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3122 0
765 -3122 0
765 225 -3123 0
c (0<=( - aux768 + SATLiteral(-765) + SATLiteral(-225)))
-225 3123 0
-765 3123 0
-765 -225 3122 0
c (( - aux769 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3125 0
495 -3125 0
495 1170 -3126 0
c (0<=( - aux769 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3126 0
-495 3126 0
-495 -1170 3125 0
c ((aux769 - aux770 + SATLiteral(-90))<=0)
3125 -3128 0
3126 -3129 0
90 -3128 0
90 3125 -3129 0
90 3126 -3131 0
c (0<=(aux769 - aux770 + SATLiteral(-90)))
-3126 3131 0
-3125 3129 0
-90 3131 0
-90 -3126 3129 0
-90 -3125 3128 0
c ((aux766 + aux768 - aux771)<=0)
3122 -3133 0
3123 -3134 0
3116 -3133 0
3116 3122 -3134 0
3116 3123 -3136 0
3117 -3134 0
3117 3122 -3136 0
3117 3123 -3138 0
c (0<=(aux766 + aux768 - aux771))
-3123 3138 0
-3122 3136 0
-3117 3138 0
-3117 -3123 3136 0
-3117 -3122 3134 0
-3116 3136 0
-3116 -3123 3134 0
-3116 -3122 3133 0
c ((SATLiteral(362) - aux772 + SATLiteral(632))<=0)
-632 -3140 0
-362 -3140 0
-362 -632 -3141 0
c (0<=(SATLiteral(362) - aux772 + SATLiteral(632)))
632 3141 0
362 3141 0
362 632 3140 0
c ((SATLiteral(1037) - aux773 + SATLiteral(902))<=0)
-902 -3143 0
-1037 -3143 0
-1037 -902 -3144 0
c (0<=(SATLiteral(1037) - aux773 + SATLiteral(902)))
902 3144 0
1037 3144 0
1037 902 3143 0
c (( - aux774 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3146 0
-767 -3146 0
-767 -227 -3147 0
c (0<=( - aux774 + SATLiteral(767) + SATLiteral(227)))
227 3147 0
767 3147 0
767 227 3146 0
c (( - aux775 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3149 0
-497 -3149 0
-497 -1172 -3150 0
c (0<=( - aux775 + SATLiteral(497) + SATLiteral(1172)))
1172 3150 0
497 3150 0
497 1172 3149 0
c ((aux775 - aux776 + SATLiteral(92))<=0)
3149 -3152 0
3150 -3153 0
-92 -3152 0
-92 3149 -3153 0
-92 3150 -3155 0
c (0<=(aux775 - aux776 + SATLiteral(92)))
-3150 3155 0
-3149 3153 0
92 3155 0
92 -3150 3153 0
92 -3149 3152 0
c ((aux772 + aux774 - aux777)<=0)
3146 -3157 0
3147 -3158 0
3140 -3157 0
3140 3146 -3158 0
3140 3147 -3160 0
3141 -3158 0
3141 3146 -3160 0
3141 3147 -3162 0
c (0<=(aux772 + aux774 - aux777))
-3147 3162 0
-3146 3160 0
-3141 3162 0
-3141 -3147 3160 0
-3141 -3146 3158 0
-3140 3160 0
-3140 -3147 3158 0
-3140 -3146 3157 0
c ((SATLiteral(364) - aux778 + SATLiteral(634))<=0)
-634 -3164 0
-364 -3164 0
-364 -634 -3165 0
c (0<=(SATLiteral(364) - aux778 + SATLiteral(634)))
634 3165 0
364 3165 0
364 634 3164 0
c ((SATLiteral(1039) - aux779 + SATLiteral(904))<=0)
-904 -3167 0
-1039 -3167 0
-1039 -904 -3168 0
c (0<=(SATLiteral(1039) - aux779 + SATLiteral(904)))
904 3168 0
1039 3168 0
1039 904 3167 0
c (( - aux780 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3170 0
-769 -3170 0
-769 -229 -3171 0
c (0<=( - aux780 + SATLiteral(769) + SATLiteral(229)))
229 3171 0
769 3171 0
769 229 3170 0
c (( - aux781 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3173 0
-499 -3173 0
-499 -1174 -3174 0
c (0<=( - aux781 + SATLiteral(499) + SATLiteral(1174)))
1174 3174 0
499 3174 0
499 1174 3173 0
c ((aux781 - aux782 + SATLiteral(94))<=0)
3173 -3176 0
3174 -3177 0
-94 -3176 0
-94 3173 -3177 0
-94 3174 -3179 0
c (0<=(aux781 - aux782 + SATLiteral(94)))
-3174 3179 0
-3173 3177 0
94 3179 0
94 -3174 3177 0
94 -3173 3176 0
c ((aux778 + aux780 - aux783)<=0)
3170 -3181 0
3171 -3182 0
3164 -3181 0
3164 3170 -3182 0
3164 3171 -3184 0
3165 -3182 0
3165 3170 -3184 0
3165 3171 -3186 0
c (0<=(aux778 + aux780 - aux783))
-3171 3186 0
-3170 3184 0
-3165 3186 0
-3165 -3171 3184 0
-3165 -3170 3182 0
-3164 3184 0
-3164 -3171 3182 0
-3164 -3170 3181 0
c ((SATLiteral(366) - aux784 + SATLiteral(636))<=0)
-636 -3188 0
-366 -3188 0
-366 -636 -3189 0
c (0<=(SATLiteral(366) - aux784 + SATLiteral(636)))
636 3189 0
366 3189 0
366 636 3188 0
c ((SATLiteral(1041) - aux785 + SATLiteral(906))<=0)
-906 -3191 0
-1041 -3191 0
-1041 -906 -3192 0
c (0<=(SATLiteral(1041) - aux785 + SATLiteral(906)))
906 3192 0
1041 3192 0
1041 906 3191 0
c (( - aux786 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3194 0
-771 -3194 0
-771 -231 -3195 0
c (0<=( - aux786 + SATLiteral(771) + SATLiteral(231)))
231 3195 0
771 3195 0
771 231 3194 0
c (( - aux787 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3197 0
-501 -3197 0
-501 -1176 -3198 0
c (0<=( - aux787 + SATLiteral(501) + SATLiteral(1176)))
1176 3198 0
501 3198 0
501 1176 3197 0
c ((aux787 - aux788 + SATLiteral(96))<=0)
3197 -3200 0
3198 -3201 0
-96 -3200 0
-96 3197 -3201 0
-96 3198 -3203 0
c (0<=(aux787 - aux788 + SATLiteral(96)))
-3198 3203 0
-3197 3201 0
96 3203 0
96 -3198 3201 0
96 -3197 3200 0
c ((aux784 + aux786 - aux789)<=0)
3194 -3205 0
3195 -3206 0
3188 -3205 0
3188 3194 -3206 0
3188 3195 -3208 0
3189 -3206 0
3189 3194 -3208 0
3189 3195 -3210 0
c (0<=(aux784 + aux786 - aux789))
-3195 3210 0
-3194 3208 0
-3189 3210 0
-3189 -3195 3208 0
-3189 -3194 3206 0
-3188 3208 0
-3188 -3195 3206 0
-3188 -3194 3205 0
c ((SATLiteral(368) - aux790 + SATLiteral(638))<=0)
-638 -3212 0
-368 -3212 0
-368 -638 -3213 0
c (0<=(SATLiteral(368) - aux790 + SATLiteral(638)))
638 3213 0
368 3213 0
368 638 3212 0
c ((SATLiteral(1043) - aux791 + SATLiteral(908))<=0)
-908 -3215 0
-1043 -3215 0
-1043 -908 -3216 0
c (0<=(SATLiteral(1043) - aux791 + SATLiteral(908)))
908 3216 0
1043 3216 0
1043 908 3215 0
c (( - aux792 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3218 0
-773 -3218 0
-773 -233 -3219 0
c (0<=( - aux792 + SATLiteral(773) + SATLiteral(233)))
233 3219 0
773 3219 0
773 233 3218 0
c (( - aux793 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3221 0
-503 -3221 0
-503 -1178 -3222 0
c (0<=( - aux793 + SATLiteral(503) + SATLiteral(1178)))
1178 3222 0
503 3222 0
503 1178 3221 0
c ((aux793 - aux794 + SATLiteral(98))<=0)
3221 -3224 0
3222 -3225 0
-98 -3224 0
-98 3221 -3225 0
-98 3222 -3227 0
c (0<=(aux793 - aux794 + SATLiteral(98)))
-3222 3227 0
-3221 3225 0
98 3227 0
98 -3222 3225 0
98 -3221 3224 0
c ((aux790 + aux792 - aux795)<=0)
3218 -3229 0
3219 -3230 0
3212 -3229 0
3212 3218 -3230 0
3212 3219 -3232 0
3213 -3230 0
3213 3218 -3232 0
3213 3219 -3234 0
c (0<=(aux790 + aux792 - aux795))
-3219 3234 0
-3218 3232 0
-3213 3234 0
-3213 -3219 3232 0
-3213 -3218 3230 0
-3212 3232 0
-3212 -3219 3230 0
-3212 -3218 3229 0
c ((SATLiteral(370) - aux796 + SATLiteral(640))<=0)
-640 -3236 0
-370 -3236 0
-370 -640 -3237 0
c (0<=(SATLiteral(370) - aux796 + SATLiteral(640)))
640 3237 0
370 3237 0
370 640 3236 0
c ((SATLiteral(1045) - aux797 + SATLiteral(910))<=0)
-910 -3239 0
-1045 -3239 0
-1045 -910 -3240 0
c (0<=(SATLiteral(1045) - aux797 + SATLiteral(910)))
910 3240 0
1045 3240 0
1045 910 3239 0
c (( - aux798 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3242 0
-775 -3242 0
-775 -235 -3243 0
c (0<=( - aux798 + SATLiteral(775) + SATLiteral(235)))
235 3243 0
775 3243 0
775 235 3242 0
c (( - aux799 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3245 0
-505 -3245 0
-505 -1180 -3246 0
c (0<=( - aux799 + SATLiteral(505) + SATLiteral(1180)))
1180 3246 0
505 3246 0
505 1180 3245 0
c ((aux799 - aux800 + SATLiteral(100))<=0)
3245 -3248 0
3246 -3249 0
-100 -3248 0
-100 3245 -3249 0
-100 3246 -3251 0
c (0<=(aux799 - aux800 + SATLiteral(100)))
-3246 3251 0
-3245 3249 0
100 3251 0
100 -3246 3249 0
100 -3245 3248 0
c ((aux796 + aux798 - aux801)<=0)
3242 -3253 0
3243 -3254 0
3236 -3253 0
3236 3242 -3254 0
3236 3243 -3256 0
3237 -3254 0
3237 3242 -3256 0
3237 3243 -3258 0
c (0<=(aux796 + aux798 - aux801))
-3243 3258 0
-3242 3256 0
-3237 3258 0
-3237 -3243 3256 0
-3237 -3242 3254 0
-3236 3256 0
-3236 -3243 3254 0
-3236 -3242 3253 0
c ((SATLiteral(372) - aux802 + SATLiteral(642))<=0)
-642 -3260 0
-372 -3260 0
-372 -642 -3261 0
c (0<=(SATLiteral(372) - aux802 + SATLiteral(642)))
642 3261 0
372 3261 0
372 642 3260 0
c ((SATLiteral(1047) - aux803 + SATLiteral(912))<=0)
-912 -3263 0
-1047 -3263 0
-1047 -912 -3264 0
c (0<=(SATLiteral(1047) - aux803 + SATLiteral(912)))
912 3264 0
1047 3264 0
1047 912 3263 0
c (( - aux804 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3266 0
-777 -3266 0
-777 -237 -3267 0
c (0<=( - aux804 + SATLiteral(777) + SATLiteral(237)))
237 3267 0
777 3267 0
777 237 3266 0
c (( - aux805 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3269 0
-507 -3269 0
-507 -1182 -3270 0
c (0<=( - aux805 + SATLiteral(507) + SATLiteral(1182)))
1182 3270 0
507 3270 0
507 1182 3269 0
c ((aux805 - aux806 + SATLiteral(102))<=0)
3269 -3272 0
3270 -3273 0
-102 -3272 0
-102 3269 -3273 0
-102 3270 -3275 0
c (0<=(aux805 - aux806 + SATLiteral(102)))
-3270 3275 0
-3269 3273 0
102 3275 0
102 -3270 3273 0
102 -3269 3272 0
c ((aux802 + aux804 - aux807)<=0)
3266 -3277 0
3267 -3278 0
3260 -3277 0
3260 3266 -3278 0
3260 3267 -3280 0
3261 -3278 0
3261 3266 -3280 0
3261 3267 -3282 0
c (0<=(aux802 + aux804 - aux807))
-3267 3282 0
-3266 3280 0
-3261 3282 0
-3261 -3267 3280 0
-3261 -3266 3278 0
-3260 3280 0
-3260 -3267 3278 0
-3260 -3266 3277 0
c ((SATLiteral(374) - aux808 + SATLiteral(644))<=0)
-644 -3284 0
-374 -3284 0
-374 -644 -3285 0
c (0<=(SATLiteral(374) - aux808 + SATLiteral(644)))
644 3285 0
374 3285 0
374 644 3284 0
c ((SATLiteral(1049) - aux809 + SATLiteral(914))<=0)
-914 -3287 0
-1049 -3287 0
-1049 -914 -3288 0
c (0<=(SATLiteral(1049) - aux809 + SATLiteral(914)))
914 3288 0
1049 3288 0
1049 914 3287 0
c (( - aux810 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3290 0
-779 -3290 0
-779 -239 -3291 0
c (0<=( - aux810 + SATLiteral(779) + SATLiteral(239)))
239 3291 0
779 3291 0
779 239 3290 0
c (( - aux811 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3293 0
-509 -3293 0
-509 -1184 -3294 0
c (0<=( - aux811 + SATLiteral(509) + SATLiteral(1184)))
1184 3294 0
509 3294 0
509 1184 3293 0
c ((aux811 - aux812 + SATLiteral(104))<=0)
3293 -3296 0
3294 -3297 0
-104 -3296 0
-104 3293 -3297 0
-104 3294 -3299 0
c (0<=(aux811 - aux812 + SATLiteral(104)))
-3294 3299 0
-3293 3297 0
104 3299 0
104 -3294 3297 0
104 -3293 3296 0
c ((aux808 + aux810 - aux813)<=0)
3290 -3301 0
3291 -3302 0
3284 -3301 0
3284 3290 -3302 0
3284 3291 -3304 0
3285 -3302 0
3285 3290 -3304 0
3285 3291 -3306 0
c (0<=(aux808 + aux810 - aux813))
-3291 3306 0
-3290 3304 0
-3285 3306 0
-3285 -3291 3304 0
-3285 -3290 3302 0
-3284 3304 0
-3284 -3291 3302 0
-3284 -3290 3301 0
c ((SATLiteral(376) - aux814 + SATLiteral(646))<=0)
-646 -3308 0
-376 -3308 0
-376 -646 -3309 0
c (0<=(SATLiteral(376) - aux814 + SATLiteral(646)))
646 3309 0
376 3309 0
376 646 3308 0
c ((SATLiteral(1051) - aux815 + SATLiteral(916))<=0)
-916 -3311 0
-1051 -3311 0
-1051 -916 -3312 0
c (0<=(SATLiteral(1051) - aux815 + SATLiteral(916)))
916 3312 0
1051 3312 0
1051 916 3311 0
c (( - aux816 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3314 0
-781 -3314 0
-781 -241 -3315 0
c (0<=( - aux816 + SATLiteral(781) + SATLiteral(241)))
241 3315 0
781 3315 0
781 241 3314 0
c (( - aux817 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3317 0
-511 -3317 0
-511 -1186 -3318 0
c (0<=( - aux817 + SATLiteral(511) + SATLiteral(1186)))
1186 3318 0
511 3318 0
511 1186 3317 0
c ((aux817 - aux818 + SATLiteral(106))<=0)
3317 -3320 0
3318 -3321 0
-106 -3320 0
-106 3317 -3321 0
-106 3318 -3323 0
c (0<=(aux817 - aux818 + SATLiteral(106)))
-3318 3323 0
-3317 3321 0
106 3323 0
106 -3318 3321 0
106 -3317 3320 0
c ((aux814 + aux816 - aux819)<=0)
3314 -3325 0
3315 -3326 0
3308 -3325 0
3308 3314 -3326 0
3308 3315 -3328 0
3309 -3326 0
3309 3314 -3328 0
3309 3315 -3330 0
c (0<=(aux814 + aux816 - aux819))
-3315 3330 0
-3314 3328 0
-3309 3330 0
-3309 -3315 3328 0
-3309 -3314 3326 0
-3308 3328 0
-3308 -3315 3326 0
-3308 -3314 3325 0
c ((SATLiteral(-375) - aux820 + SATLiteral(-645))<=0)
645 -3332 0
375 -3332 0
375 645 -3333 0
c (0<=(SATLiteral(-375) - aux820 + SATLiteral(-645)))
-645 3333 0
-375 3333 0
-375 -645 3332 0
c ((SATLiteral(-1050) - aux821 + SATLiteral(-915))<=0)
915 -3335 0
1050 -3335 0
1050 915 -3336 0
c (0<=(SATLiteral(-1050) - aux821 + SATLiteral(-915)))
-915 3336 0
-1050 3336 0
-1050 -915 3335 0
c (( - aux822 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3338 0
780 -3338 0
780 240 -3339 0
c (0<=( - aux822 + SATLiteral(-780) + SATLiteral(-240)))
-240 3339 0
-780 3339 0
-780 -240 3338 0
c (( - aux823 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3341 0
510 -3341 0
510 1185 -3342 0
c (0<=( - aux823 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3342 0
-510 3342 0
-510 -1185 3341 0
c ((aux823 - aux824 + SATLiteral(-105))<=0)
3341 -3344 0
3342 -3345 0
105 -3344 0
105 3341 -3345 0
105 3342 -3347 0
c (0<=(aux823 - aux824 + SATLiteral(-105)))
-3342 3347 0
-3341 3345 0
-105 3347 0
-105 -3342 3345 0
-105 -3341 3344 0
c ((aux820 + aux822 - aux825)<=0)
3338 -3349 0
3339 -3350 0
3332 -3349 0
3332 3338 -3350 0
3332 3339 -3352 0
3333 -3350 0
3333 3338 -3352 0
3333 3339 -3354 0
c (0<=(aux820 + aux822 - aux825))
-3339 3354 0
-3338 3352 0
-3333 3354 0
-3333 -3339 3352 0
-3333 -3338 3350 0
-3332 3352 0
-3332 -3339 3350 0
-3332 -3338 3349 0
c ((SATLiteral(377) - aux826 + SATLiteral(647))<=0)
-647 -3356 0
-377 -3356 0
-377 -647 -3357 0
c (0<=(SATLiteral(377) - aux826 + SATLiteral(647)))
647 3357 0
377 3357 0
377 647 3356 0
c ((SATLiteral(1052) - aux827 + SATLiteral(917))<=0)
-917 -3359 0
-1052 -3359 0
-1052 -917 -3360 0
c (0<=(SATLiteral(1052) - aux827 + SATLiteral(917)))
917 3360 0
1052 3360 0
1052 917 3359 0
c (( - aux828 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3362 0
-782 -3362 0
-782 -242 -3363 0
c (0<=( - aux828 + SATLiteral(782) + SATLiteral(242)))
242 3363 0
782 3363 0
782 242 3362 0
c (( - aux829 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3365 0
-512 -3365 0
-512 -1187 -3366 0
c (0<=( - aux829 + SATLiteral(512) + SATLiteral(1187)))
1187 3366 0
512 3366 0
512 1187 3365 0
c ((aux829 - aux830 + SATLiteral(107))<=0)
3365 -3368 0
3366 -3369 0
-107 -3368 0
-107 3365 -3369 0
-107 3366 -3371 0
c (0<=(aux829 - aux830 + SATLiteral(107)))
-3366 3371 0
-3365 3369 0
107 3371 0
107 -3366 3369 0
107 -3365 3368 0
c ((aux826 + aux828 - aux831)<=0)
3362 -3373 0
3363 -3374 0
3356 -3373 0
3356 3362 -3374 0
3356 3363 -3376 0
3357 -3374 0
3357 3362 -3376 0
3357 3363 -3378 0
c (0<=(aux826 + aux828 - aux831))
-3363 3378 0
-3362 3376 0
-3357 3378 0
-3357 -3363 3376 0
-3357 -3362 3374 0
-3356 3376 0
-3356 -3363 3374 0
-3356 -3362 3373 0
c ((SATLiteral(379) - aux832 + SATLiteral(649))<=0)
-649 -3380 0
-379 -3380 0
-379 -649 -3381 0
c (0<=(SATLiteral(379) - aux832 + SATLiteral(649)))
649 3381 0
379 3381 0
379 649 3380 0
c ((SATLiteral(1054) - aux833 + SATLiteral(919))<=0)
-919 -3383 0
-1054 -3383 0
-1054 -919 -3384 0
c (0<=(SATLiteral(1054) - aux833 + SATLiteral(919)))
919 3384 0
1054 3384 0
1054 919 3383 0
c (( - aux834 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3386 0
-784 -3386 0
-784 -244 -3387 0
c (0<=( - aux834 + SATLiteral(784) + SATLiteral(244)))
244 3387 0
784 3387 0
784 244 3386 0
c (( - aux835 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3389 0
-514 -3389 0
-514 -1189 -3390 0
c (0<=( - aux835 + SATLiteral(514) + SATLiteral(1189)))
1189 3390 0
514 3390 0
514 1189 3389 0
c ((aux835 - aux836 + SATLiteral(109))<=0)
3389 -3392 0
3390 -3393 0
-109 -3392 0
-109 3389 -3393 0
-109 3390 -3395 0
c (0<=(aux835 - aux836 + SATLiteral(109)))
-3390 3395 0
-3389 3393 0
109 3395 0
109 -3390 3393 0
109 -3389 3392 0
c ((aux832 + aux834 - aux837)<=0)
3386 -3397 0
3387 -3398 0
3380 -3397 0
3380 3386 -3398 0
3380 3387 -3400 0
3381 -3398 0
3381 3386 -3400 0
3381 3387 -3402 0
c (0<=(aux832 + aux834 - aux837))
-3387 3402 0
-3386 3400 0
-3381 3402 0
-3381 -3387 3400 0
-3381 -3386 3398 0
-3380 3400 0
-3380 -3387 3398 0
-3380 -3386 3397 0
c ((SATLiteral(381) - aux838 + SATLiteral(651))<=0)
-651 -3404 0
-381 -3404 0
-381 -651 -3405 0
c (0<=(SATLiteral(381) - aux838 + SATLiteral(651)))
651 3405 0
381 3405 0
381 651 3404 0
c ((SATLiteral(1056) - aux839 + SATLiteral(921))<=0)
-921 -3407 0
-1056 -3407 0
-1056 -921 -3408 0
c (0<=(SATLiteral(1056) - aux839 + SATLiteral(921)))
921 3408 0
1056 3408 0
1056 921 3407 0
c (( - aux840 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3410 0
-786 -3410 0
-786 -246 -3411 0
c (0<=( - aux840 + SATLiteral(786) + SATLiteral(246)))
246 3411 0
786 3411 0
786 246 3410 0
c (( - aux841 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3413 0
-516 -3413 0
-516 -1191 -3414 0
c (0<=( - aux841 + SATLiteral(516) + SATLiteral(1191)))
1191 3414 0
516 3414 0
516 1191 3413 0
c ((aux841 - aux842 + SATLiteral(111))<=0)
3413 -3416 0
3414 -3417 0
-111 -3416 0
-111 3413 -3417 0
-111 3414 -3419 0
c (0<=(aux841 - aux842 + SATLiteral(111)))
-3414 3419 0
-3413 3417 0
111 3419 0
111 -3414 3417 0
111 -3413 3416 0
c ((aux838 + aux840 - aux843)<=0)
3410 -3421 0
3411 -3422 0
3404 -3421 0
3404 3410 -3422 0
3404 3411 -3424 0
3405 -3422 0
3405 3410 -3424 0
3405 3411 -3426 0
c (0<=(aux838 + aux840 - aux843))
-3411 3426 0
-3410 3424 0
-3405 3426 0
-3405 -3411 3424 0
-3405 -3410 3422 0
-3404 3424 0
-3404 -3411 3422 0
-3404 -3410 3421 0
c ((SATLiteral(383) - aux844 + SATLiteral(653))<=0)
-653 -3428 0
-383 -3428 0
-383 -653 -3429 0
c (0<=(SATLiteral(383) - aux844 + SATLiteral(653)))
653 3429 0
383 3429 0
383 653 3428 0
c ((SATLiteral(1058) - aux845 + SATLiteral(923))<=0)
-923 -3431 0
-1058 -3431 0
-1058 -923 -3432 0
c (0<=(SATLiteral(1058) - aux845 + SATLiteral(923)))
923 3432 0
1058 3432 0
1058 923 3431 0
c (( - aux846 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3434 0
-788 -3434 0
-788 -248 -3435 0
c (0<=( - aux846 + SATLiteral(788) + SATLiteral(248)))
248 3435 0
788 3435 0
788 248 3434 0
c (( - aux847 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3437 0
-518 -3437 0
-518 -1193 -3438 0
c (0<=( - aux847 + SATLiteral(518) + SATLiteral(1193)))
1193 3438 0
518 3438 0
518 1193 3437 0
c ((aux847 - aux848 + SATLiteral(113))<=0)
3437 -3440 0
3438 -3441 0
-113 -3440 0
-113 3437 -3441 0
-113 3438 -3443 0
c (0<=(aux847 - aux848 + SATLiteral(113)))
-3438 3443 0
-3437 3441 0
113 3443 0
113 -3438 3441 0
113 -3437 3440 0
c ((aux844 + aux846 - aux849)<=0)
3434 -3445 0
3435 -3446 0
3428 -3445 0
3428 3434 -3446 0
3428 3435 -3448 0
3429 -3446 0
3429 3434 -3448 0
3429 3435 -3450 0
c (0<=(aux844 + aux846 - aux849))
-3435 3450 0
-3434 3448 0
-3429 3450 0
-3429 -3435 3448 0
-3429 -3434 3446 0
-3428 3448 0
-3428 -3435 3446 0
-3428 -3434 3445 0
c ((SATLiteral(385) - aux850 + SATLiteral(655))<=0)
-655 -3452 0
-385 -3452 0
-385 -655 -3453 0
c (0<=(SATLiteral(385) - aux850 + SATLiteral(655)))
655 3453 0
385 3453 0
385 655 3452 0
c ((SATLiteral(1060) - aux851 + SATLiteral(925))<=0)
-925 -3455 0
-1060 -3455 0
-1060 -925 -3456 0
c (0<=(SATLiteral(1060) - aux851 + SATLiteral(925)))
925 3456 0
1060 3456 0
1060 925 3455 0
c (( - aux852 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3458 0
-790 -3458 0
-790 -250 -3459 0
c (0<=( - aux852 + SATLiteral(790) + SATLiteral(250)))
250 3459 0
790 3459 0
790 250 3458 0
c (( - aux853 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3461 0
-520 -3461 0
-520 -1195 -3462 0
c (0<=( - aux853 + SATLiteral(520) + SATLiteral(1195)))
1195 3462 0
520 3462 0
520 1195 3461 0
c ((aux853 - aux854 + SATLiteral(115))<=0)
3461 -3464 0
3462 -3465 0
-115 -3464 0
-115 3461 -3465 0
-115 3462 -3467 0
c (0<=(aux853 - aux854 + SATLiteral(115)))
-3462 3467 0
-3461 3465 0
115 3467 0
115 -3462 3465 0
115 -3461 3464 0
c ((aux850 + aux852 - aux855)<=0)
3458 -3469 0
3459 -3470 0
3452 -3469 0
3452 3458 -3470 0
3452 3459 -3472 0
3453 -3470 0
3453 3458 -3472 0
3453 3459 -3474 0
c (0<=(aux850 + aux852 - aux855))
-3459 3474 0
-3458 3472 0
-3453 3474 0
-3453 -3459 3472 0
-3453 -3458 3470 0
-3452 3472 0
-3452 -3459 3470 0
-3452 -3458 3469 0
c ((SATLiteral(387) - aux856 + SATLiteral(657))<=0)
-657 -3476 0
-387 -3476 0
-387 -657 -3477 0
c (0<=(SATLiteral(387) - aux856 + SATLiteral(657)))
657 3477 0
387 3477 0
387 657 3476 0
c ((SATLiteral(1062) - aux857 + SATLiteral(927))<=0)
-927 -3479 0
-1062 -3479 0
-1062 -927 -3480 0
c (0<=(SATLiteral(1062) - aux857 + SATLiteral(927)))
927 3480 0
1062 3480 0
1062 927 3479 0
c (( - aux858 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3482 0
-792 -3482 0
-792 -252 -3483 0
c (0<=( - aux858 + SATLiteral(792) + SATLiteral(252)))
252 3483 0
792 3483 0
792 252 3482 0
c (( - aux859 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3485 0
-522 -3485 0
-522 -1197 -3486 0
c (0<=( - aux859 + SATLiteral(522) + SATLiteral(1197)))
1197 3486 0
522 3486 0
522 1197 3485 0
c ((aux859 - aux860 + SATLiteral(117))<=0)
3485 -3488 0
3486 -3489 0
-117 -3488 0
-117 3485 -3489 0
-117 3486 -3491 0
c (0<=(aux859 - aux860 + SATLiteral(117)))
-3486 3491 0
-3485 3489 0
117 3491 0
117 -3486 3489 0
117 -3485 3488 0
c ((aux856 + aux858 - aux861)<=0)
3482 -3493 0
3483 -3494 0
3476 -3493 0
3476 3482 -3494 0
3476 3483 -3496 0
3477 -3494 0
3477 3482 -3496 0
3477 3483 -3498 0
c (0<=(aux856 + aux858 - aux861))
-3483 3498 0
-3482 3496 0
-3477 3498 0
-3477 -3483 3496 0
-3477 -3482 3494 0
-3476 3496 0
-3476 -3483 3494 0
-3476 -3482 3493 0
c ((SATLiteral(389) - aux862 + SATLiteral(659))<=0)
-659 -3500 0
-389 -3500 0
-389 -659 -3501 0
c (0<=(SATLiteral(389) - aux862 + SATLiteral(659)))
659 3501 0
389 3501 0
389 659 3500 0
c ((SATLiteral(1064) - aux863 + SATLiteral(929))<=0)
-929 -3503 0
-1064 -3503 0
-1064 -929 -3504 0
c (0<=(SATLiteral(1064) - aux863 + SATLiteral(929)))
929 3504 0
1064 3504 0
1064 929 3503 0
c (( - aux864 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3506 0
-794 -3506 0
-794 -254 -3507 0
c (0<=( - aux864 + SATLiteral(794) + SATLiteral(254)))
254 3507 0
794 3507 0
794 254 3506 0
c (( - aux865 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3509 0
-524 -3509 0
-524 -1199 -3510 0
c (0<=( - aux865 + SATLiteral(524) + SATLiteral(1199)))
1199 3510 0
524 3510 0
524 1199 3509 0
c ((aux865 - aux866 + SATLiteral(119))<=0)
3509 -3512 0
3510 -3513 0
-119 -3512 0
-119 3509 -3513 0
-119 3510 -3515 0
c (0<=(aux865 - aux866 + SATLiteral(119)))
-3510 3515 0
-3509 3513 0
119 3515 0
119 -3510 3513 0
119 -3509 3512 0
c ((aux862 + aux864 - aux867)<=0)
3506 -3517 0
3507 -3518 0
3500 -3517 0
3500 3506 -3518 0
3500 3507 -3520 0
3501 -3518 0
3501 3506 -3520 0
3501 3507 -3522 0
c (0<=(aux862 + aux864 - aux867))
-3507 3522 0
-3506 3520 0
-3501 3522 0
-3501 -3507 3520 0
-3501 -3506 3518 0
-3500 3520 0
-3500 -3507 3518 0
-3500 -3506 3517 0
c ((SATLiteral(391) - aux868 + SATLiteral(661))<=0)
-661 -3524 0
-391 -3524 0
-391 -661 -3525 0
c (0<=(SATLiteral(391) - aux868 + SATLiteral(661)))
661 3525 0
391 3525 0
391 661 3524 0
c ((SATLiteral(1066) - aux869 + SATLiteral(931))<=0)
-931 -3527 0
-1066 -3527 0
-1066 -931 -3528 0
c (0<=(SATLiteral(1066) - aux869 + SATLiteral(931)))
931 3528 0
1066 3528 0
1066 931 3527 0
c (( - aux870 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3530 0
-796 -3530 0
-796 -256 -3531 0
c (0<=( - aux870 + SATLiteral(796) + SATLiteral(256)))
256 3531 0
796 3531 0
796 256 3530 0
c (( - aux871 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3533 0
-526 -3533 0
-526 -1201 -3534 0
c (0<=( - aux871 + SATLiteral(526) + SATLiteral(1201)))
1201 3534 0
526 3534 0
526 1201 3533 0
c ((aux871 - aux872 + SATLiteral(121))<=0)
3533 -3536 0
3534 -3537 0
-121 -3536 0
-121 3533 -3537 0
-121 3534 -3539 0
c (0<=(aux871 - aux872 + SATLiteral(121)))
-3534 3539 0
-3533 3537 0
121 3539 0
121 -3534 3537 0
121 -3533 3536 0
c ((aux868 + aux870 - aux873)<=0)
3530 -3541 0
3531 -3542 0
3524 -3541 0
3524 3530 -3542 0
3524 3531 -3544 0
3525 -3542 0
3525 3530 -3544 0
3525 3531 -3546 0
c (0<=(aux868 + aux870 - aux873))
-3531 3546 0
-3530 3544 0
-3525 3546 0
-3525 -3531 3544 0
-3525 -3530 3542 0
-3524 3544 0
-3524 -3531 3542 0
-3524 -3530 3541 0
c ((SATLiteral(-390) - aux874 + SATLiteral(-660))<=0)
660 -3548 0
390 -3548 0
390 660 -3549 0
c (0<=(SATLiteral(-390) - aux874 + SATLiteral(-660)))
-660 3549 0
-390 3549 0
-390 -660 3548 0
c ((SATLiteral(-1065) - aux875 + SATLiteral(-930))<=0)
930 -3551 0
1065 -3551 0
1065 930 -3552 0
c (0<=(SATLiteral(-1065) - aux875 + SATLiteral(-930)))
-930 3552 0
-1065 3552 0
-1065 -930 3551 0
c (( - aux876 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3554 0
795 -3554 0
795 255 -3555 0
c (0<=( - aux876 + SATLiteral(-795) + SATLiteral(-255)))
-255 3555 0
-795 3555 0
-795 -255 3554 0
c (( - aux877 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3557 0
525 -3557 0
525 1200 -3558 0
c (0<=( - aux877 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3558 0
-525 3558 0
-525 -1200 3557 0
c ((aux877 - aux878 + SATLiteral(-120))<=0)
3557 -3560 0
3558 -3561 0
120 -3560 0
120 3557 -3561 0
120 3558 -3563 0
c (0<=(aux877 - aux878 + SATLiteral(-120)))
-3558 3563 0
-3557 3561 0
-120 3563 0
-120 -3558 3561 0
-120 -3557 3560 0
c ((aux874 + aux876 - aux879)<=0)
3554 -3565 0
3555 -3566 0
3548 -3565 0
3548 3554 -3566 0
3548 3555 -3568 0
3549 -3566 0
3549 3554 -3568 0
3549 3555 -3570 0
c (0<=(aux874 + aux876 - aux879))
-3555 3570 0
-3554 3568 0
-3549 3570 0
-3549 -3555 3568 0
-3549 -3554 3566 0
-3548 3568 0
-3548 -3555 3566 0
-3548 -3554 3565 0
c ((SATLiteral(392) - aux880 + SATLiteral(662))<=0)
-662 -3572 0
-392 -3572 0
-392 -662 -3573 0
c (0<=(SATLiteral(392) - aux880 + SATLiteral(662)))
662 3573 0
392 3573 0
392 662 3572 0
c ((SATLiteral(1067) - aux881 + SATLiteral(932))<=0)
-932 -3575 0
-1067 -3575 0
-1067 -932 -3576 0
c (0<=(SATLiteral(1067) - aux881 + SATLiteral(932)))
932 3576 0
1067 3576 0
1067 932 3575 0
c (( - aux882 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3578 0
-797 -3578 0
-797 -257 -3579 0
c (0<=( - aux882 + SATLiteral(797) + SATLiteral(257)))
257 3579 0
797 3579 0
797 257 3578 0
c (( - aux883 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3581 0
-527 -3581 0
-527 -1202 -3582 0
c (0<=( - aux883 + SATLiteral(527) + SATLiteral(1202)))
1202 3582 0
527 3582 0
527 1202 3581 0
c ((aux883 - aux884 + SATLiteral(122))<=0)
3581 -3584 0
3582 -3585 0
-122 -3584 0
-122 3581 -3585 0
-122 3582 -3587 0
c (0<=(aux883 - aux884 + SATLiteral(122)))
-3582 3587 0
-3581 3585 0
122 3587 0
122 -3582 3585 0
122 -3581 3584 0
c ((aux880 + aux882 - aux885)<=0)
3578 -3589 0
3579 -3590 0
3572 -3589 0
3572 3578 -3590 0
3572 3579 -3592 0
3573 -3590 0
3573 3578 -3592 0
3573 3579 -3594 0
c (0<=(aux880 + aux882 - aux885))
-3579 3594 0
-3578 3592 0
-3573 3594 0
-3573 -3579 3592 0
-3573 -3578 3590 0
-3572 3592 0
-3572 -3579 3590 0
-3572 -3578 3589 0
c ((SATLiteral(394) - aux886 + SATLiteral(664))<=0)
-664 -3596 0
-394 -3596 0
-394 -664 -3597 0
c (0<=(SATLiteral(394) - aux886 + SATLiteral(664)))
664 3597 0
394 3597 0
394 664 3596 0
c ((SATLiteral(1069) - aux887 + SATLiteral(934))<=0)
-934 -3599 0
-1069 -3599 0
-1069 -934 -3600 0
c (0<=(SATLiteral(1069) - aux887 + SATLiteral(934)))
934 3600 0
1069 3600 0
1069 934 3599 0
c (( - aux888 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3602 0
-799 -3602 0
-799 -259 -3603 0
c (0<=( - aux888 + SATLiteral(799) + SATLiteral(259)))
259 3603 0
799 3603 0
799 259 3602 0
c (( - aux889 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3605 0
-529 -3605 0
-529 -1204 -3606 0
c (0<=( - aux889 + SATLiteral(529) + SATLiteral(1204)))
1204 3606 0
529 3606 0
529 1204 3605 0
c ((aux889 - aux890 + SATLiteral(124))<=0)
3605 -3608 0
3606 -3609 0
-124 -3608 0
-124 3605 -3609 0
-124 3606 -3611 0
c (0<=(aux889 - aux890 + SATLiteral(124)))
-3606 3611 0
-3605 3609 0
124 3611 0
124 -3606 3609 0
124 -3605 3608 0
c ((aux886 + aux888 - aux891)<=0)
3602 -3613 0
3603 -3614 0
3596 -3613 0
3596 3602 -3614 0
3596 3603 -3616 0
3597 -3614 0
3597 3602 -3616 0
3597 3603 -3618 0
c (0<=(aux886 + aux888 - aux891))
-3603 3618 0
-3602 3616 0
-3597 3618 0
-3597 -3603 3616 0
-3597 -3602 3614 0
-3596 3616 0
-3596 -3603 3614 0
-3596 -3602 3613 0
c ((SATLiteral(396) - aux892 + SATLiteral(666))<=0)
-666 -3620 0
-396 -3620 0
-396 -666 -3621 0
c (0<=(SATLiteral(396) - aux892 + SATLiteral(666)))
666 3621 0
396 3621 0
396 666 3620 0
c ((SATLiteral(1071) - aux893 + SATLiteral(936))<=0)
-936 -3623 0
-1071 -3623 0
-1071 -936 -3624 0
c (0<=(SATLiteral(1071) - aux893 + SATLiteral(936)))
936 3624 0
1071 3624 0
1071 936 3623 0
c (( - aux894 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3626 0
-801 -3626 0
-801 -261 -3627 0
c (0<=( - aux894 + SATLiteral(801) + SATLiteral(261)))
261 3627 0
801 3627 0
801 261 3626 0
c (( - aux895 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3629 0
-531 -3629 0
-531 -1206 -3630 0
c (0<=( - aux895 + SATLiteral(531) + SATLiteral(1206)))
1206 3630 0
531 3630 0
531 1206 3629 0
c ((aux895 - aux896 + SATLiteral(126))<=0)
3629 -3632 0
3630 -3633 0
-126 -3632 0
-126 3629 -3633 0
-126 3630 -3635 0
c (0<=(aux895 - aux896 + SATLiteral(126)))
-3630 3635 0
-3629 3633 0
126 3635 0
126 -3630 3633 0
126 -3629 3632 0
c ((aux892 + aux894 - aux897)<=0)
3626 -3637 0
3627 -3638 0
3620 -3637 0
3620 3626 -3638 0
3620 3627 -3640 0
3621 -3638 0
3621 3626 -3640 0
3621 3627 -3642 0
c (0<=(aux892 + aux894 - aux897))
-3627 3642 0
-3626 3640 0
-3621 3642 0
-3621 -3627 3640 0
-3621 -3626 3638 0
-3620 3640 0
-3620 -3627 3638 0
-3620 -3626 3637 0
c ((SATLiteral(398) - aux898 + SATLiteral(668))<=0)
-668 -3644 0
-398 -3644 0
-398 -668 -3645 0
c (0<=(SATLiteral(398) - aux898 + SATLiteral(668)))
668 3645 0
398 3645 0
398 668 3644 0
c ((SATLiteral(1073) - aux899 + SATLiteral(938))<=0)
-938 -3647 0
-1073 -3647 0
-1073 -938 -3648 0
c (0<=(SATLiteral(1073) - aux899 + SATLiteral(938)))
938 3648 0
1073 3648 0
1073 938 3647 0
c (( - aux900 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3650 0
-803 -3650 0
-803 -263 -3651 0
c (0<=( - aux900 + SATLiteral(803) + SATLiteral(263)))
263 3651 0
803 3651 0
803 263 3650 0
c (( - aux901 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3653 0
-533 -3653 0
-533 -1208 -3654 0
c (0<=( - aux901 + SATLiteral(533) + SATLiteral(1208)))
1208 3654 0
533 3654 0
533 1208 3653 0
c ((aux901 - aux902 + SATLiteral(128))<=0)
3653 -3656 0
3654 -3657 0
-128 -3656 0
-128 3653 -3657 0
-128 3654 -3659 0
c (0<=(aux901 - aux902 + SATLiteral(128)))
-3654 3659 0
-3653 3657 0
128 3659 0
128 -3654 3657 0
128 -3653 3656 0
c ((aux898 + aux900 - aux903)<=0)
3650 -3661 0
3651 -3662 0
3644 -3661 0
3644 3650 -3662 0
3644 3651 -3664 0
3645 -3662 0
3645 3650 -3664 0
3645 3651 -3666 0
c (0<=(aux898 + aux900 - aux903))
-3651 3666 0
-3650 3664 0
-3645 3666 0
-3645 -3651 3664 0
-3645 -3650 3662 0
-3644 3664 0
-3644 -3651 3662 0
-3644 -3650 3661 0
c ((SATLiteral(400) - aux904 + SATLiteral(670))<=0)
-670 -3668 0
-400 -3668 0
-400 -670 -3669 0
c (0<=(SATLiteral(400) - aux904 + SATLiteral(670)))
670 3669 0
400 3669 0
400 670 3668 0
c ((SATLiteral(1075) - aux905 + SATLiteral(940))<=0)
-940 -3671 0
-1075 -3671 0
-1075 -940 -3672 0
c (0<=(SATLiteral(1075) - aux905 + SATLiteral(940)))
940 3672 0
1075 3672 0
1075 940 3671 0
c (( - aux906 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3674 0
-805 -3674 0
-805 -265 -3675 0
c (0<=( - aux906 + SATLiteral(805) + SATLiteral(265)))
265 3675 0
805 3675 0
805 265 3674 0
c (( - aux907 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3677 0
-535 -3677 0
-535 -1210 -3678 0
c (0<=( - aux907 + SATLiteral(535) + SATLiteral(1210)))
1210 3678 0
535 3678 0
535 1210 3677 0
c ((aux907 - aux908 + SATLiteral(130))<=0)
3677 -3680 0
3678 -3681 0
-130 -3680 0
-130 3677 -3681 0
-130 3678 -3683 0
c (0<=(aux907 - aux908 + SATLiteral(130)))
-3678 3683 0
-3677 3681 0
130 3683 0
130 -3678 3681 0
130 -3677 3680 0
c ((aux904 + aux906 - aux909)<=0)
3674 -3685 0
3675 -3686 0
3668 -3685 0
3668 3674 -3686 0
3668 3675 -3688 0
3669 -3686 0
3669 3674 -3688 0
3669 3675 -3690 0
c (0<=(aux904 + aux906 - aux909))
-3675 3690 0
-3674 3688 0
-3669 3690 0
-3669 -3675 3688 0
-3669 -3674 3686 0
-3668 3688 0
-3668 -3675 3686 0
-3668 -3674 3685 0
c ((SATLiteral(402) - aux910 + SATLiteral(672))<=0)
-672 -3692 0
-402 -3692 0
-402 -672 -3693 0
c (0<=(SATLiteral(402) - aux910 + SATLiteral(672)))
672 3693 0
402 3693 0
402 672 3692 0
c ((SATLiteral(1077) - aux911 + SATLiteral(942))<=0)
-942 -3695 0
-1077 -3695 0
-1077 -942 -3696 0
c (0<=(SATLiteral(1077) - aux911 + SATLiteral(942)))
942 3696 0
1077 3696 0
1077 942 3695 0
c (( - aux912 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3698 0
-807 -3698 0
-807 -267 -3699 0
c (0<=( - aux912 + SATLiteral(807) + SATLiteral(267)))
267 3699 0
807 3699 0
807 267 3698 0
c (( - aux913 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3701 0
-537 -3701 0
-537 -1212 -3702 0
c (0<=( - aux913 + SATLiteral(537) + SATLiteral(1212)))
1212 3702 0
537 3702 0
537 1212 3701 0
c ((aux913 - aux914 + SATLiteral(132))<=0)
3701 -3704 0
3702 -3705 0
-132 -3704 0
-132 3701 -3705 0
-132 3702 -3707 0
c (0<=(aux913 - aux914 + SATLiteral(132)))
-3702 3707 0
-3701 3705 0
132 3707 0
132 -3702 3705 0
132 -3701 3704 0
c ((aux910 + aux912 - aux915)<=0)
3698 -3709 0
3699 -3710 0
3692 -3709 0
3692 3698 -3710 0
3692 3699 -3712 0
3693 -3710 0
3693 3698 -3712 0
3693 3699 -3714 0
c (0<=(aux910 + aux912 - aux915))
-3699 3714 0
-3698 3712 0
-3693 3714 0
-3693 -3699 3712 0
-3693 -3698 3710 0
-3692 3712 0
-3692 -3699 3710 0
-3692 -3698 3709 0
c ((SATLiteral(404) - aux916 + SATLiteral(674))<=0)
-674 -3716 0
-404 -3716 0
-404 -674 -3717 0
c (0<=(SATLiteral(404) - aux916 + SATLiteral(674)))
674 3717 0
404 3717 0
404 674 3716 0
c ((SATLiteral(1079) - aux917 + SATLiteral(944))<=0)
-944 -3719 0
-1079 -3719 0
-1079 -944 -3720 0
c (0<=(SATLiteral(1079) - aux917 + SATLiteral(944)))
944 3720 0
1079 3720 0
1079 944 3719 0
c (( - aux918 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3722 0
-809 -3722 0
-809 -269 -3723 0
c (0<=( - aux918 + SATLiteral(809) + SATLiteral(269)))
269 3723 0
809 3723 0
809 269 3722 0
c (( - aux919 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3725 0
-539 -3725 0
-539 -1214 -3726 0
c (0<=( - aux919 + SATLiteral(539) + SATLiteral(1214)))
1214 3726 0
539 3726 0
539 1214 3725 0
c ((aux919 - aux920 + SATLiteral(134))<=0)
3725 -3728 0
3726 -3729 0
-134 -3728 0
-134 3725 -3729 0
-134 3726 -3731 0
c (0<=(aux919 - aux920 + SATLiteral(134)))
-3726 3731 0
-3725 3729 0
134 3731 0
134 -3726 3729 0
134 -3725 3728 0
c ((aux916 + aux918 - aux921)<=0)
3722 -3733 0
3723 -3734 0
3716 -3733 0
3716 3722 -3734 0
3716 3723 -3736 0
3717 -3734 0
3717 3722 -3736 0
3717 3723 -3738 0
c (0<=(aux916 + aux918 - aux921))
-3723 3738 0
-3722 3736 0
-3717 3738 0
-3717 -3723 3736 0
-3717 -3722 3734 0
-3716 3736 0
-3716 -3723 3734 0
-3716 -3722 3733 0
c ((SATLiteral(406) - aux922 + SATLiteral(676))<=0)
-676 -3740 0
-406 -3740 0
-406 -676 -3741 0
c (0<=(SATLiteral(406) - aux922 + SATLiteral(676)))
676 3741 0
406 3741 0
406 676 3740 0
c ((SATLiteral(1081) - aux923 + SATLiteral(946))<=0)
-946 -3743 0
-1081 -3743 0
-1081 -946 -3744 0
c (0<=(SATLiteral(1081) - aux923 + SATLiteral(946)))
946 3744 0
1081 3744 0
1081 946 3743 0
c (( - aux924 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3746 0
-811 -3746 0
-811 -271 -3747 0
c (0<=( - aux924 + SATLiteral(811) + SATLiteral(271)))
271 3747 0
811 3747 0
811 271 3746 0
c (( - aux925 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3749 0
-541 -3749 0
-541 -1216 -3750 0
c (0<=( - aux925 + SATLiteral(541) + SATLiteral(1216)))
1216 3750 0
541 3750 0
541 1216 3749 0
c ((aux925 - aux926 + SATLiteral(136))<=0)
3749 -3752 0
3750 -3753 0
-136 -3752 0
-136 3749 -3753 0
-136 3750 -3755 0
c (0<=(aux925 - aux926 + SATLiteral(136)))
-3750 3755 0
-3749 3753 0
136 3755 0
136 -3750 3753 0
136 -3749 3752 0
c ((aux922 + aux924 - aux927)<=0)
3746 -3757 0
3747 -3758 0
3740 -3757 0
3740 3746 -3758 0
3740 3747 -3760 0
3741 -3758 0
3741 3746 -3760 0
3741 3747 -3762 0
c (0<=(aux922 + aux924 - aux927))
-3747 3762 0
-3746 3760 0
-3741 3762 0
-3741 -3747 3760 0
-3741 -3746 3758 0
-3740 3760 0
-3740 -3747 3758 0
-3740 -3746 3757 0
c ((SATLiteral(-405) - aux928 + SATLiteral(-675))<=0)
675 -3764 0
405 -3764 0
405 675 -3765 0
c (0<=(SATLiteral(-405) - aux928 + SATLiteral(-675)))
-675 3765 0
-405 3765 0
-405 -675 3764 0
c ((SATLiteral(-1080) - aux929 + SATLiteral(-945))<=0)
945 -3767 0
1080 -3767 0
1080 945 -3768 0
c (0<=(SATLiteral(-1080) - aux929 + SATLiteral(-945)))
-945 3768 0
-1080 3768 0
-1080 -945 3767 0
c (( - aux930 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3770 0
810 -3770 0
810 270 -3771 0
c (0<=( - aux930 + SATLiteral(-810) + SATLiteral(-270)))
-270 3771 0
-810 3771 0
-810 -270 3770 0
c (( - aux931 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3773 0
540 -3773 0
540 1215 -3774 0
c (0<=( - aux931 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3774 0
-540 3774 0
-540 -1215 3773 0
c ((aux931 - aux932 + SATLiteral(-135))<=0)
3773 -3776 0
3774 -3777 0
135 -3776 0
135 3773 -3777 0
135 3774 -3779 0
c (0<=(aux931 - aux932 + SATLiteral(-135)))
-3774 3779 0
-3773 3777 0
-135 3779 0
-135 -3774 3777 0
-135 -3773 3776 0
c ((aux928 + aux930 - aux933)<=0)
3770 -3781 0
3771 -3782 0
3764 -3781 0
3764 3770 -3782 0
3764 3771 -3784 0
3765 -3782 0
3765 3770 -3784 0
3765 3771 -3786 0
c (0<=(aux928 + aux930 - aux933))
-3771 3786 0
-3770 3784 0
-3765 3786 0
-3765 -3771 3784 0
-3765 -3770 3782 0
-3764 3784 0
-3764 -3771 3782 0
-3764 -3770 3781 0
c (( - aux934 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3788 0
-2 -3788 0
-2 -122 -3789 0
c (0<=( - aux934 + SATLiteral(2) + SATLiteral(122)))
122 3789 0
2 3789 0
2 122 3788 0
c (( - aux935 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3791 0
-17 -3791 0
-17 -107 -3792 0
c (0<=( - aux935 + SATLiteral(17) + SATLiteral(107)))
107 3792 0
17 3792 0
17 107 3791 0
c (( - aux936 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3794 0
-47 -3794 0
-47 -92 -3795 0
c (0<=( - aux936 + SATLiteral(47) + SATLiteral(92)))
92 3795 0
47 3795 0
47 92 3794 0
c (( - aux937 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3797 0
-62 -3797 0
-62 -77 -3798 0
c (0<=( - aux937 + SATLiteral(62) + SATLiteral(77)))
77 3798 0
62 3798 0
62 77 3797 0
c ((aux937 - aux938 + SATLiteral(32))<=0)
3797 -3800 0
3798 -3801 0
-32 -3800 0
-32 3797 -3801 0
-32 3798 -3803 0
c (0<=(aux937 - aux938 + SATLiteral(32)))
-3798 3803 0
-3797 3801 0
32 3803 0
32 -3798 3801 0
32 -3797 3800 0
c ((aux934 + aux936 - aux939)<=0)
3794 -3805 0
3795 -3806 0
3788 -3805 0
3788 3794 -3806 0
3788 3795 -3808 0
3789 -3806 0
3789 3794 -3808 0
3789 3795 -3810 0
c (0<=(aux934 + aux936 - aux939))
-3795 3810 0
-3794 3808 0
-3789 3810 0
-3789 -3795 3808 0
-3789 -3794 3806 0
-3788 3808 0
-3788 -3795 3806 0
-3788 -3794 3805 0
c (( - aux940 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3812 0
-4 -3812 0
-4 -124 -3813 0
c (0<=( - aux940 + SATLiteral(4) + SATLiteral(124)))
124 3813 0
4 3813 0
4 124 3812 0
c (( - aux941 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3815 0
-19 -3815 0
-19 -109 -3816 0
c (0<=( - aux941 + SATLiteral(19) + SATLiteral(109)))
109 3816 0
19 3816 0
19 109 3815 0
c (( - aux942 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3818 0
-49 -3818 0
-49 -94 -3819 0
c (0<=( - aux942 + SATLiteral(49) + SATLiteral(94)))
94 3819 0
49 3819 0
49 94 3818 0
c (( - aux943 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3821 0
-64 -3821 0
-64 -79 -3822 0
c (0<=( - aux943 + SATLiteral(64) + SATLiteral(79)))
79 3822 0
64 3822 0
64 79 3821 0
c ((aux943 - aux944 + SATLiteral(34))<=0)
3821 -3824 0
3822 -3825 0
-34 -3824 0
-34 3821 -3825 0
-34 3822 -3827 0
c (0<=(aux943 - aux944 + SATLiteral(34)))
-3822 3827 0
-3821 3825 0
34 3827 0
34 -3822 3825 0
34 -3821 3824 0
c ((aux940 + aux942 - aux945)<=0)
3818 -3829 0
3819 -3830 0
3812 -3829 0
3812 3818 -3830 0
3812 3819 -3832 0
3813 -3830 0
3813 3818 -3832 0
3813 3819 -3834 0
c (0<=(aux940 + aux942 - aux945))
-3819 3834 0
-3818 3832 0
-3813 3834 0
-3813 -3819 3832 0
-3813 -3818 3830 0
-3812 3832 0
-3812 -3819 3830 0
-3812 -3818 3829 0
c (( - aux946 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -3836 0
-6 -3836 0
-6 -126 -3837 0
c (0<=( - aux946 + SATLiteral(6) + SATLiteral(126)))
126 3837 0
6 3837 0
6 126 3836 0
c (( - aux947 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -3839 0
-21 -3839 0
-21 -111 -3840 0
c (0<=( - aux947 + SATLiteral(21) + SATLiteral(111)))
111 3840 0
21 3840 0
21 111 3839 0
c (( - aux948 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -3842 0
-51 -3842 0
-51 -96 -3843 0
c (0<=( - aux948 + SATLiteral(51) + SATLiteral(96)))
96 3843 0
51 3843 0
51 96 3842 0
c (( - aux949 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -3845 0
-66 -3845 0
-66 -81 -3846 0
c (0<=( - aux949 + SATLiteral(66) + SATLiteral(81)))
81 3846 0
66 3846 0
66 81 3845 0
c ((aux949 - aux950 + SATLiteral(36))<=0)
3845 -3848 0
3846 -3849 0
-36 -3848 0
-36 3845 -3849 0
-36 3846 -3851 0
c (0<=(aux949 - aux950 + SATLiteral(36)))
-3846 3851 0
-3845 3849 0
36 3851 0
36 -3846 3849 0
36 -3845 3848 0
c ((aux946 + aux948 - aux951)<=0)
3842 -3853 0
3843 -3854 0
3836 -3853 0
3836 3842 -3854 0
3836 3843 -3856 0
3837 -3854 0
3837 3842 -3856 0
3837 3843 -3858 0
c (0<=(aux946 + aux948 - aux951))
-3843 3858 0
-3842 3856 0
-3837 3858 0
-3837 -3843 3856 0
-3837 -3842 3854 0
-3836 3856 0
-3836 -3843 3854 0
-3836 -3842 3853 0
c (( - aux952 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -3860 0
-8 -3860 0
-8 -128 -3861 0
c (0<=( - aux952 + SATLiteral(8) + SATLiteral(128)))
128 3861 0
8 3861 0
8 128 3860 0
c (( - aux953 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -3863 0
-23 -3863 0
-23 -113 -3864 0
c (0<=( - aux953 + SATLiteral(23) + SATLiteral(113)))
113 3864 0
23 3864 0
23 113 3863 0
c (( - aux954 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -3866 0
-53 -3866 0
-53 -98 -3867 0
c (0<=( - aux954 + SATLiteral(53) + SATLiteral(98)))
98 3867 0
53 3867 0
53 98 3866 0
c (( - aux955 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -3869 0
-68 -3869 0
-68 -83 -3870 0
c (0<=( - aux955 + SATLiteral(68) + SATLiteral(83)))
83 3870 0
68 3870 0
68 83 3869 0
c ((aux955 - aux956 + SATLiteral(38))<=0)
3869 -3872 0
3870 -3873 0
-38 -3872 0
-38 3869 -3873 0
-38 3870 -3875 0
c (0<=(aux955 - aux956 + SATLiteral(38)))
-3870 3875 0
-3869 3873 0
38 3875 0
38 -3870 3873 0
38 -3869 3872 0
c ((aux952 + aux954 - aux957)<=0)
3866 -3877 0
3867 -3878 0
3860 -3877 0
3860 3866 -3878 0
3860 3867 -3880 0
3861 -3878 0
3861 3866 -3880 0
3861 3867 -3882 0
c (0<=(aux952 + aux954 - aux957))
-3867 3882 0
-3866 3880 0
-3861 3882 0
-3861 -3867 3880 0
-3861 -3866 3878 0
-3860 3880 0
-3860 -3867 3878 0
-3860 -3866 3877 0
c (( - aux958 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -3884 0
-10 -3884 0
-10 -130 -3885 0
c (0<=( - aux958 + SATLiteral(10) + SATLiteral(130)))
130 3885 0
10 3885 0
10 130 3884 0
c (( - aux959 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -3887 0
-25 -3887 0
-25 -115 -3888 0
c (0<=( - aux959 + SATLiteral(25) + SATLiteral(115)))
115 3888 0
25 3888 0
25 115 3887 0
c (( - aux960 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -3890 0
-55 -3890 0
-55 -100 -3891 0
c (0<=( - aux960 + SATLiteral(55) + SATLiteral(100)))
100 3891 0
55 3891 0
55 100 3890 0
c (( - aux961 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -3893 0
-70 -3893 0
-70 -85 -3894 0
c (0<=( - aux961 + SATLiteral(70) + SATLiteral(85)))
85 3894 0
70 3894 0
70 85 3893 0
c ((aux961 - aux962 + SATLiteral(40))<=0)
3893 -3896 0
3894 -3897 0
-40 -3896 0
-40 3893 -3897 0
-40 3894 -3899 0
c (0<=(aux961 - aux962 + SATLiteral(40)))
-3894 3899 0
-3893 3897 0
40 3899 0
40 -3894 3897 0
40 -3893 3896 0
c ((aux958 + aux960 - aux963)<=0)
3890 -3901 0
3891 -3902 0
3884 -3901 0
3884 3890 -3902 0
3884 3891 -3904 0
3885 -3902 0
3885 3890 -3904 0
3885 3891 -3906 0
c (0<=(aux958 + aux960 - aux963))
-3891 3906 0
-3890 3904 0
-3885 3906 0
-3885 -3891 3904 0
-3885 -3890 3902 0
-3884 3904 0
-3884 -3891 3902 0
-3884 -3890 3901 0
c (( - aux964 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -3908 0
-12 -3908 0
-12 -132 -3909 0
c (0<=( - aux964 + SATLiteral(12) + SATLiteral(132)))
132 3909 0
12 3909 0
12 132 3908 0
c (( - aux965 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -3911 0
-27 -3911 0
-27 -117 -3912 0
c (0<=( - aux965 + SATLiteral(27) + SATLiteral(117)))
117 3912 0
27 3912 0
27 117 3911 0
c (( - aux966 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -3914 0
-57 -3914 0
-57 -102 -3915 0
c (0<=( - aux966 + SATLiteral(57) + SATLiteral(102)))
102 3915 0
57 3915 0
57 102 3914 0
c (( - aux967 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -3917 0
-72 -3917 0
-72 -87 -3918 0
c (0<=( - aux967 + SATLiteral(72) + SATLiteral(87)))
87 3918 0
72 3918 0
72 87 3917 0
c ((aux967 - aux968 + SATLiteral(42))<=0)
3917 -3920 0
3918 -3921 0
-42 -3920 0
-42 3917 -3921 0
-42 3918 -3923 0
c (0<=(aux967 - aux968 + SATLiteral(42)))
-3918 3923 0
-3917 3921 0
42 3923 0
42 -3918 3921 0
42 -3917 3920 0
c ((aux964 + aux966 - aux969)<=0)
3914 -3925 0
3915 -3926 0
3908 -3925 0
3908 3914 -3926 0
3908 3915 -3928 0
3909 -3926 0
3909 3914 -3928 0
3909 3915 -3930 0
c (0<=(aux964 + aux966 - aux969))
-3915 3930 0
-3914 3928 0
-3909 3930 0
-3909 -3915 3928 0
-3909 -3914 3926 0
-3908 3928 0
-3908 -3915 3926 0
-3908 -3914 3925 0
c (( - aux970 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -3932 0
-14 -3932 0
-14 -134 -3933 0
c (0<=( - aux970 + SATLiteral(14) + SATLiteral(134)))
134 3933 0
14 3933 0
14 134 3932 0
c (( - aux971 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -3935 0
-29 -3935 0
-29 -119 -3936 0
c (0<=( - aux971 + SATLiteral(29) + SATLiteral(119)))
119 3936 0
29 3936 0
29 119 3935 0
c (( - aux972 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -3938 0
-59 -3938 0
-59 -104 -3939 0
c (0<=( - aux972 + SATLiteral(59) + SATLiteral(104)))
104 3939 0
59 3939 0
59 104 3938 0
c (( - aux973 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -3941 0
-74 -3941 0
-74 -89 -3942 0
c (0<=( - aux973 + SATLiteral(74) + SATLiteral(89)))
89 3942 0
74 3942 0
74 89 3941 0
c ((aux973 - aux974 + SATLiteral(44))<=0)
3941 -3944 0
3942 -3945 0
-44 -3944 0
-44 3941 -3945 0
-44 3942 -3947 0
c (0<=(aux973 - aux974 + SATLiteral(44)))
-3942 3947 0
-3941 3945 0
44 3947 0
44 -3942 3945 0
44 -3941 3944 0
c ((aux970 + aux972 - aux975)<=0)
3938 -3949 0
3939 -3950 0
3932 -3949 0
3932 3938 -3950 0
3932 3939 -3952 0
3933 -3950 0
3933 3938 -3952 0
3933 3939 -3954 0
c (0<=(aux970 + aux972 - aux975))
-3939 3954 0
-3938 3952 0
-3933 3954 0
-3933 -3939 3952 0
-3933 -3938 3950 0
-3932 3952 0
-3932 -3939 3950 0
-3932 -3938 3949 0
c (( - aux976 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -3956 0
-16 -3956 0
-16 -136 -3957 0
c (0<=( - aux976 + SATLiteral(16) + SATLiteral(136)))
136 3957 0
16 3957 0
16 136 3956 0
c (( - aux977 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -3959 0
-31 -3959 0
-31 -121 -3960 0
c (0<=( - aux977 + SATLiteral(31) + SATLiteral(121)))
121 3960 0
31 3960 0
31 121 3959 0
c (( - aux978 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -3962 0
-61 -3962 0
-61 -106 -3963 0
c (0<=( - aux978 + SATLiteral(61) + SATLiteral(106)))
106 3963 0
61 3963 0
61 106 3962 0
c (( - aux979 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -3965 0
-76 -3965 0
-76 -91 -3966 0
c (0<=( - aux979 + SATLiteral(76) + SATLiteral(91)))
91 3966 0
76 3966 0
76 91 3965 0
c ((aux979 - aux980 + SATLiteral(46))<=0)
3965 -3968 0
3966 -3969 0
-46 -3968 0
-46 3965 -3969 0
-46 3966 -3971 0
c (0<=(aux979 - aux980 + SATLiteral(46)))
-3966 3971 0
-3965 3969 0
46 3971 0
46 -3966 3969 0
46 -3965 3968 0
c ((aux976 + aux978 - aux981)<=0)
3962 -3973 0
3963 -3974 0
3956 -3973 0
3956 3962 -3974 0
3956 3963 -3976 0
3957 -3974 0
3957 3962 -3976 0
3957 3963 -3978 0
c (0<=(aux976 + aux978 - aux981))
-3963 3978 0
-3962 3976 0
-3957 3978 0
-3957 -3963 3976 0
-3957 -3962 3974 0
-3956 3976 0
-3956 -3963 3974 0
-3956 -3962 3973 0
c (( - aux982 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -3980 0
15 -3980 0
15 135 -3981 0
c (0<=( - aux982 + SATLiteral(-15) + SATLiteral(-135)))
-135 3981 0
-15 3981 0
-15 -135 3980 0
c (( - aux983 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -3983 0
30 -3983 0
30 120 -3984 0
c (0<=( - aux983 + SATLiteral(-30) + SATLiteral(-120)))
-120 3984 0
-30 3984 0
-30 -120 3983 0
c (( - aux984 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -3986 0
60 -3986 0
60 105 -3987 0
c (0<=( - aux984 + SATLiteral(-60) + SATLiteral(-105)))
-105 3987 0
-60 3987 0
-60 -105 3986 0
c (( - aux985 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -3989 0
75 -3989 0
75 90 -3990 0
c (0<=( - aux985 + SATLiteral(-75) + SATLiteral(-90)))
-90 3990 0
-75 3990 0
-75 -90 3989 0
c ((aux985 - aux986 + SATLiteral(-45))<=0)
3989 -3992 0
3990 -3993 0
45 -3992 0
45 3989 -3993 0
45 3990 -3995 0
c (0<=(aux985 - aux986 + SATLiteral(-45)))
-3990 3995 0
-3989 3993 0
-45 3995 0
-45 -3990 3993 0
-45 -3989 3992 0
c ((aux982 + aux984 - aux987)<=0)
3986 -3997 0
3987 -3998 0
3980 -3997 0
3980 3986 -3998 0
3980 3987 -4000 0
3981 -3998 0
3981 3986 -4000 0
3981 3987 -4002 0
c (0<=(aux982 + aux984 - aux987))
-3987 4002 0
-3986 4000 0
-3981 4002 0
-3981 -3987 4000 0
-3981 -3986 3998 0
-3980 4000 0
-3980 -3987 3998 0
-3980 -3986 3997 0
c (( - aux988 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4004 0
-137 -4004 0
-137 -257 -4005 0
c (0<=( - aux988 + SATLiteral(137) + SATLiteral(257)))
257 4005 0
137 4005 0
137 257 4004 0
c (( - aux989 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4007 0
-152 -4007 0
-152 -242 -4008 0
c (0<=( - aux989 + SATLiteral(152) + SATLiteral(242)))
242 4008 0
152 4008 0
152 242 4007 0
c (( - aux990 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4010 0
-182 -4010 0
-182 -227 -4011 0
c (0<=( - aux990 + SATLiteral(182) + SATLiteral(227)))
227 4011 0
182 4011 0
182 227 4010 0
c (( - aux991 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4013 0
-197 -4013 0
-197 -212 -4014 0
c (0<=( - aux991 + SATLiteral(197) + SATLiteral(212)))
212 4014 0
197 4014 0
197 212 4013 0
c ((aux991 - aux992 + SATLiteral(167))<=0)
4013 -4016 0
4014 -4017 0
-167 -4016 0
-167 4013 -4017 0
-167 4014 -4019 0
c (0<=(aux991 - aux992 + SATLiteral(167)))
-4014 4019 0
-4013 4017 0
167 4019 0
167 -4014 4017 0
167 -4013 4016 0
c ((aux988 + aux990 - aux993)<=0)
4010 -4021 0
4011 -4022 0
4004 -4021 0
4004 4010 -4022 0
4004 4011 -4024 0
4005 -4022 0
4005 4010 -4024 0
4005 4011 -4026 0
c (0<=(aux988 + aux990 - aux993))
-4011 4026 0
-4010 4024 0
-4005 4026 0
-4005 -4011 4024 0
-4005 -4010 4022 0
-4004 4024 0
-4004 -4011 4022 0
-4004 -4010 4021 0
c (( - aux994 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4028 0
-139 -4028 0
-139 -259 -4029 0
c (0<=( - aux994 + SATLiteral(139) + SATLiteral(259)))
259 4029 0
139 4029 0
139 259 4028 0
c (( - aux995 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4031 0
-154 -4031 0
-154 -244 -4032 0
c (0<=( - aux995 + SATLiteral(154) + SATLiteral(244)))
244 4032 0
154 4032 0
154 244 4031 0
c (( - aux996 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4034 0
-184 -4034 0
-184 -229 -4035 0
c (0<=( - aux996 + SATLiteral(184) + SATLiteral(229)))
229 4035 0
184 4035 0
184 229 4034 0
c (( - aux997 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4037 0
-199 -4037 0
-199 -214 -4038 0
c (0<=( - aux997 + SATLiteral(199) + SATLiteral(214)))
214 4038 0
199 4038 0
199 214 4037 0
c ((aux997 - aux998 + SATLiteral(169))<=0)
4037 -4040 0
4038 -4041 0
-169 -4040 0
-169 4037 -4041 0
-169 4038 -4043 0
c (0<=(aux997 - aux998 + SATLiteral(169)))
-4038 4043 0
-4037 4041 0
169 4043 0
169 -4038 4041 0
169 -4037 4040 0
c ((aux994 + aux996 - aux999)<=0)
4034 -4045 0
4035 -4046 0
4028 -4045 0
4028 4034 -4046 0
4028 4035 -4048 0
4029 -4046 0
4029 4034 -4048 0
4029 4035 -4050 0
c (0<=(aux994 + aux996 - aux999))
-4035 4050 0
-4034 4048 0
-4029 4050 0
-4029 -4035 4048 0
-4029 -4034 4046 0
-4028 4048 0
-4028 -4035 4046 0
-4028 -4034 4045 0
c (( - aux1000 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4052 0
-141 -4052 0
-141 -261 -4053 0
c (0<=( - aux1000 + SATLiteral(141) + SATLiteral(261)))
261 4053 0
141 4053 0
141 261 4052 0
c (( - aux1001 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4055 0
-156 -4055 0
-156 -246 -4056 0
c (0<=( - aux1001 + SATLiteral(156) + SATLiteral(246)))
246 4056 0
156 4056 0
156 246 4055 0
c (( - aux1002 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4058 0
-186 -4058 0
-186 -231 -4059 0
c (0<=( - aux1002 + SATLiteral(186) + SATLiteral(231)))
231 4059 0
186 4059 0
186 231 4058 0
c (( - aux1003 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4061 0
-201 -4061 0
-201 -216 -4062 0
c (0<=( - aux1003 + SATLiteral(201) + SATLiteral(216)))
216 4062 0
201 4062 0
201 216 4061 0
c ((aux1003 - aux1004 + SATLiteral(171))<=0)
4061 -4064 0
4062 -4065 0
-171 -4064 0
-171 4061 -4065 0
-171 4062 -4067 0
c (0<=(aux1003 - aux1004 + SATLiteral(171)))
-4062 4067 0
-4061 4065 0
171 4067 0
171 -4062 4065 0
171 -4061 4064 0
c ((aux1000 + aux1002 - aux1005)<=0)
4058 -4069 0
4059 -4070 0
4052 -4069 0
4052 4058 -4070 0
4052 4059 -4072 0
4053 -4070 0
4053 4058 -4072 0
4053 4059 -4074 0
c (0<=(aux1000 + aux1002 - aux1005))
-4059 4074 0
-4058 4072 0
-4053 4074 0
-4053 -4059 4072 0
-4053 -4058 4070 0
-4052 4072 0
-4052 -4059 4070 0
-4052 -4058 4069 0
c (( - aux1006 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4076 0
-143 -4076 0
-143 -263 -4077 0
c (0<=( - aux1006 + SATLiteral(143) + SATLiteral(263)))
263 4077 0
143 4077 0
143 263 4076 0
c (( - aux1007 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4079 0
-158 -4079 0
-158 -248 -4080 0
c (0<=( - aux1007 + SATLiteral(158) + SATLiteral(248)))
248 4080 0
158 4080 0
158 248 4079 0
c (( - aux1008 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4082 0
-188 -4082 0
-188 -233 -4083 0
c (0<=( - aux1008 + SATLiteral(188) + SATLiteral(233)))
233 4083 0
188 4083 0
188 233 4082 0
c (( - aux1009 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4085 0
-203 -4085 0
-203 -218 -4086 0
c (0<=( - aux1009 + SATLiteral(203) + SATLiteral(218)))
218 4086 0
203 4086 0
203 218 4085 0
c ((aux1009 - aux1010 + SATLiteral(173))<=0)
4085 -4088 0
4086 -4089 0
-173 -4088 0
-173 4085 -4089 0
-173 4086 -4091 0
c (0<=(aux1009 - aux1010 + SATLiteral(173)))
-4086 4091 0
-4085 4089 0
173 4091 0
173 -4086 4089 0
173 -4085 4088 0
c ((aux1006 + aux1008 - aux1011)<=0)
4082 -4093 0
4083 -4094 0
4076 -4093 0
4076 4082 -4094 0
4076 4083 -4096 0
4077 -4094 0
4077 4082 -4096 0
4077 4083 -4098 0
c (0<=(aux1006 + aux1008 - aux1011))
-4083 4098 0
-4082 4096 0
-4077 4098 0
-4077 -4083 4096 0
-4077 -4082 4094 0
-4076 4096 0
-4076 -4083 4094 0
-4076 -4082 4093 0
c (( - aux1012 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4100 0
-145 -4100 0
-145 -265 -4101 0
c (0<=( - aux1012 + SATLiteral(145) + SATLiteral(265)))
265 4101 0
145 4101 0
145 265 4100 0
c (( - aux1013 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4103 0
-160 -4103 0
-160 -250 -4104 0
c (0<=( - aux1013 + SATLiteral(160) + SATLiteral(250)))
250 4104 0
160 4104 0
160 250 4103 0
c (( - aux1014 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4106 0
-190 -4106 0
-190 -235 -4107 0
c (0<=( - aux1014 + SATLiteral(190) + SATLiteral(235)))
235 4107 0
190 4107 0
190 235 4106 0
c (( - aux1015 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4109 0
-205 -4109 0
-205 -220 -4110 0
c (0<=( - aux1015 + SATLiteral(205) + SATLiteral(220)))
220 4110 0
205 4110 0
205 220 4109 0
c ((aux1015 - aux1016 + SATLiteral(175))<=0)
4109 -4112 0
4110 -4113 0
-175 -4112 0
-175 4109 -4113 0
-175 4110 -4115 0
c (0<=(aux1015 - aux1016 + SATLiteral(175)))
-4110 4115 0
-4109 4113 0
175 4115 0
175 -4110 4113 0
175 -4109 4112 0
c ((aux1012 + aux1014 - aux1017)<=0)
4106 -4117 0
4107 -4118 0
4100 -4117 0
4100 4106 -4118 0
4100 4107 -4120 0
4101 -4118 0
4101 4106 -4120 0
4101 4107 -4122 0
c (0<=(aux1012 + aux1014 - aux1017))
-4107 4122 0
-4106 4120 0
-4101 4122 0
-4101 -4107 4120 0
-4101 -4106 4118 0
-4100 4120 0
-4100 -4107 4118 0
-4100 -4106 4117 0
c (( - aux1018 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4124 0
-147 -4124 0
-147 -267 -4125 0
c (0<=( - aux1018 + SATLiteral(147) + SATLiteral(267)))
267 4125 0
147 4125 0
147 267 4124 0
c (( - aux1019 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4127 0
-162 -4127 0
-162 -252 -4128 0
c (0<=( - aux1019 + SATLiteral(162) + SATLiteral(252)))
252 4128 0
162 4128 0
162 252 4127 0
c (( - aux1020 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4130 0
-192 -4130 0
-192 -237 -4131 0
c (0<=( - aux1020 + SATLiteral(192) + SATLiteral(237)))
237 4131 0
192 4131 0
192 237 4130 0
c (( - aux1021 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4133 0
-207 -4133 0
-207 -222 -4134 0
c (0<=( - aux1021 + SATLiteral(207) + SATLiteral(222)))
222 4134 0
207 4134 0
207 222 4133 0
c ((aux1021 - aux1022 + SATLiteral(177))<=0)
4133 -4136 0
4134 -4137 0
-177 -4136 0
-177 4133 -4137 0
-177 4134 -4139 0
c (0<=(aux1021 - aux1022 + SATLiteral(177)))
-4134 4139 0
-4133 4137 0
177 4139 0
177 -4134 4137 0
177 -4133 4136 0
c ((aux1018 + aux1020 - aux1023)<=0)
4130 -4141 0
4131 -4142 0
4124 -4141 0
4124 4130 -4142 0
4124 4131 -4144 0
4125 -4142 0
4125 4130 -4144 0
4125 4131 -4146 0
c (0<=(aux1018 + aux1020 - aux1023))
-4131 4146 0
-4130 4144 0
-4125 4146 0
-4125 -4131 4144 0
-4125 -4130 4142 0
-4124 4144 0
-4124 -4131 4142 0
-4124 -4130 4141 0
c (( - aux1024 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4148 0
-149 -4148 0
-149 -269 -4149 0
c (0<=( - aux1024 + SATLiteral(149) + SATLiteral(269)))
269 4149 0
149 4149 0
149 269 4148 0
c (( - aux1025 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4151 0
-164 -4151 0
-164 -254 -4152 0
c (0<=( - aux1025 + SATLiteral(164) + SATLiteral(254)))
254 4152 0
164 4152 0
164 254 4151 0
c (( - aux1026 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4154 0
-194 -4154 0
-194 -239 -4155 0
c (0<=( - aux1026 + SATLiteral(194) + SATLiteral(239)))
239 4155 0
194 4155 0
194 239 4154 0
c (( - aux1027 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4157 0
-209 -4157 0
-209 -224 -4158 0
c (0<=( - aux1027 + SATLiteral(209) + SATLiteral(224)))
224 4158 0
209 4158 0
209 224 4157 0
c ((aux1027 - aux1028 + SATLiteral(179))<=0)
4157 -4160 0
4158 -4161 0
-179 -4160 0
-179 4157 -4161 0
-179 4158 -4163 0
c (0<=(aux1027 - aux1028 + SATLiteral(179)))
-4158 4163 0
-4157 4161 0
179 4163 0
179 -4158 4161 0
179 -4157 4160 0
c ((aux1024 + aux1026 - aux1029)<=0)
4154 -4165 0
4155 -4166 0
4148 -4165 0
4148 4154 -4166 0
4148 4155 -4168 0
4149 -4166 0
4149 4154 -4168 0
4149 4155 -4170 0
c (0<=(aux1024 + aux1026 - aux1029))
-4155 4170 0
-4154 4168 0
-4149 4170 0
-4149 -4155 4168 0
-4149 -4154 4166 0
-4148 4168 0
-4148 -4155 4166 0
-4148 -4154 4165 0
c (( - aux1030 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4172 0
-151 -4172 0
-151 -271 -4173 0
c (0<=( - aux1030 + SATLiteral(151) + SATLiteral(271)))
271 4173 0
151 4173 0
151 271 4172 0
c (( - aux1031 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4175 0
-166 -4175 0
-166 -256 -4176 0
c (0<=( - aux1031 + SATLiteral(166) + SATLiteral(256)))
256 4176 0
166 4176 0
166 256 4175 0
c (( - aux1032 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4178 0
-196 -4178 0
-196 -241 -4179 0
c (0<=( - aux1032 + SATLiteral(196) + SATLiteral(241)))
241 4179 0
196 4179 0
196 241 4178 0
c (( - aux1033 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4181 0
-211 -4181 0
-211 -226 -4182 0
c (0<=( - aux1033 + SATLiteral(211) + SATLiteral(226)))
226 4182 0
211 4182 0
211 226 4181 0
c ((aux1033 - aux1034 + SATLiteral(181))<=0)
4181 -4184 0
4182 -4185 0
-181 -4184 0
-181 4181 -4185 0
-181 4182 -4187 0
c (0<=(aux1033 - aux1034 + SATLiteral(181)))
-4182 4187 0
-4181 4185 0
181 4187 0
181 -4182 4185 0
181 -4181 4184 0
c ((aux1030 + aux1032 - aux1035)<=0)
4178 -4189 0
4179 -4190 0
4172 -4189 0
4172 4178 -4190 0
4172 4179 -4192 0
4173 -4190 0
4173 4178 -4192 0
4173 4179 -4194 0
c (0<=(aux1030 + aux1032 - aux1035))
-4179 4194 0
-4178 4192 0
-4173 4194 0
-4173 -4179 4192 0
-4173 -4178 4190 0
-4172 4192 0
-4172 -4179 4190 0
-4172 -4178 4189 0
c (( - aux1036 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4196 0
150 -4196 0
150 270 -4197 0
c (0<=( - aux1036 + SATLiteral(-150) + SATLiteral(-270)))
-270 4197 0
-150 4197 0
-150 -270 4196 0
c (( - aux1037 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4199 0
165 -4199 0
165 255 -4200 0
c (0<=( - aux1037 + SATLiteral(-165) + SATLiteral(-255)))
-255 4200 0
-165 4200 0
-165 -255 4199 0
c (( - aux1038 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4202 0
195 -4202 0
195 240 -4203 0
c (0<=( - aux1038 + SATLiteral(-195) + SATLiteral(-240)))
-240 4203 0
-195 4203 0
-195 -240 4202 0
c (( - aux1039 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4205 0
210 -4205 0
210 225 -4206 0
c (0<=( - aux1039 + SATLiteral(-210) + SATLiteral(-225)))
-225 4206 0
-210 4206 0
-210 -225 4205 0
c ((aux1039 - aux1040 + SATLiteral(-180))<=0)
4205 -4208 0
4206 -4209 0
180 -4208 0
180 4205 -4209 0
180 4206 -4211 0
c (0<=(aux1039 - aux1040 + SATLiteral(-180)))
-4206 4211 0
-4205 4209 0
-180 4211 0
-180 -4206 4209 0
-180 -4205 4208 0
c ((aux1036 + aux1038 - aux1041)<=0)
4202 -4213 0
4203 -4214 0
4196 -4213 0
4196 4202 -4214 0
4196 4203 -4216 0
4197 -4214 0
4197 4202 -4216 0
4197 4203 -4218 0
c (0<=(aux1036 + aux1038 - aux1041))
-4203 4218 0
-4202 4216 0
-4197 4218 0
-4197 -4203 4216 0
-4197 -4202 4214 0
-4196 4216 0
-4196 -4203 4214 0
-4196 -4202 4213 0
c ((SATLiteral(272) + SATLiteral(392) - aux1042)<=0)
-392 -4220 0
-272 -4220 0
-272 -392 -4221 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1042))
392 4221 0
272 4221 0
272 392 4220 0
c ((SATLiteral(287) + SATLiteral(377) - aux1043)<=0)
-377 -4223 0
-287 -4223 0
-287 -377 -4224 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1043))
377 4224 0
287 4224 0
287 377 4223 0
c ((SATLiteral(317) + SATLiteral(362) - aux1044)<=0)
-362 -4226 0
-317 -4226 0
-317 -362 -4227 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1044))
362 4227 0
317 4227 0
317 362 4226 0
c ((SATLiteral(332) + SATLiteral(347) - aux1045)<=0)
-347 -4229 0
-332 -4229 0
-332 -347 -4230 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1045))
347 4230 0
332 4230 0
332 347 4229 0
c ((SATLiteral(302) + aux1045 - aux1046)<=0)
4229 -4232 0
4230 -4233 0
-302 -4232 0
-302 4229 -4233 0
-302 4230 -4235 0
c (0<=(SATLiteral(302) + aux1045 - aux1046))
-4230 4235 0
-4229 4233 0
302 4235 0
302 -4230 4233 0
302 -4229 4232 0
c ((aux1042 + aux1044 - aux1047)<=0)
4226 -4237 0
4227 -4238 0
4220 -4237 0
4220 4226 -4238 0
4220 4227 -4240 0
4221 -4238 0
4221 4226 -4240 0
4221 4227 -4242 0
c (0<=(aux1042 + aux1044 - aux1047))
-4227 4242 0
-4226 4240 0
-4221 4242 0
-4221 -4227 4240 0
-4221 -4226 4238 0
-4220 4240 0
-4220 -4227 4238 0
-4220 -4226 4237 0
c ((SATLiteral(274) + SATLiteral(394) - aux1048)<=0)
-394 -4244 0
-274 -4244 0
-274 -394 -4245 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1048))
394 4245 0
274 4245 0
274 394 4244 0
c ((SATLiteral(288) + SATLiteral(379) - aux1049)<=0)
-379 -4247 0
-288 -4247 0
-288 -379 -4248 0
c (0<=(SATLiteral(288) + SATLiteral(379) - aux1049))
379 4248 0
288 4248 0
288 379 4247 0
c ((SATLiteral(318) + SATLiteral(364) - aux1050)<=0)
-364 -4250 0
-318 -4250 0
-318 -364 -4251 0
c (0<=(SATLiteral(318) + SATLiteral(364) - aux1050))
364 4251 0
318 4251 0
318 364 4250 0
c ((SATLiteral(334) + SATLiteral(349) - aux1051)<=0)
-349 -4253 0
-334 -4253 0
-334 -349 -4254 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1051))
349 4254 0
334 4254 0
334 349 4253 0
c ((SATLiteral(304) + aux1051 - aux1052)<=0)
4253 -4256 0
4254 -4257 0
-304 -4256 0
-304 4253 -4257 0
-304 4254 -4259 0
c (0<=(SATLiteral(304) + aux1051 - aux1052))
-4254 4259 0
-4253 4257 0
304 4259 0
304 -4254 4257 0
304 -4253 4256 0
c ((aux1048 + aux1050 - aux1053)<=0)
4250 -4261 0
4251 -4262 0
4244 -4261 0
4244 4250 -4262 0
4244 4251 -4264 0
4245 -4262 0
4245 4250 -4264 0
4245 4251 -4266 0
c (0<=(aux1048 + aux1050 - aux1053))
-4251 4266 0
-4250 4264 0
-4245 4266 0
-4245 -4251 4264 0
-4245 -4250 4262 0
-4244 4264 0
-4244 -4251 4262 0
-4244 -4250 4261 0
c ((SATLiteral(276) + SATLiteral(396) - aux1054)<=0)
-396 -4268 0
-276 -4268 0
-276 -396 -4269 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1054))
396 4269 0
276 4269 0
276 396 4268 0
c ((SATLiteral(289) + SATLiteral(381) - aux1055)<=0)
-381 -4271 0
-289 -4271 0
-289 -381 -4272 0
c (0<=(SATLiteral(289) + SATLiteral(381) - aux1055))
381 4272 0
289 4272 0
289 381 4271 0
c ((SATLiteral(319) + SATLiteral(366) - aux1056)<=0)
-366 -4274 0
-319 -4274 0
-319 -366 -4275 0
c (0<=(SATLiteral(319) + SATLiteral(366) - aux1056))
366 4275 0
319 4275 0
319 366 4274 0
c ((SATLiteral(336) + SATLiteral(351) - aux1057)<=0)
-351 -4277 0
-336 -4277 0
-336 -351 -4278 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1057))
351 4278 0
336 4278 0
336 351 4277 0
c ((SATLiteral(306) + aux1057 - aux1058)<=0)
4277 -4280 0
4278 -4281 0
-306 -4280 0
-306 4277 -4281 0
-306 4278 -4283 0
c (0<=(SATLiteral(306) + aux1057 - aux1058))
-4278 4283 0
-4277 4281 0
306 4283 0
306 -4278 4281 0
306 -4277 4280 0
c ((aux1054 + aux1056 - aux1059)<=0)
4274 -4285 0
4275 -4286 0
4268 -4285 0
4268 4274 -4286 0
4268 4275 -4288 0
4269 -4286 0
4269 4274 -4288 0
4269 4275 -4290 0
c (0<=(aux1054 + aux1056 - aux1059))
-4275 4290 0
-4274 4288 0
-4269 4290 0
-4269 -4275 4288 0
-4269 -4274 4286 0
-4268 4288 0
-4268 -4275 4286 0
-4268 -4274 4285 0
c ((SATLiteral(278) + SATLiteral(398) - aux1060)<=0)
-398 -4292 0
-278 -4292 0
-278 -398 -4293 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1060))
398 4293 0
278 4293 0
278 398 4292 0
c ((SATLiteral(290) + SATLiteral(383) - aux1061)<=0)
-383 -4295 0
-290 -4295 0
-290 -383 -4296 0
c (0<=(SATLiteral(290) + SATLiteral(383) - aux1061))
383 4296 0
290 4296 0
290 383 4295 0
c ((SATLiteral(320) + SATLiteral(368) - aux1062)<=0)
-368 -4298 0
-320 -4298 0
-320 -368 -4299 0
c (0<=(SATLiteral(320) + SATLiteral(368) - aux1062))
368 4299 0
320 4299 0
320 368 4298 0
c ((SATLiteral(338) + SATLiteral(353) - aux1063)<=0)
-353 -4301 0
-338 -4301 0
-338 -353 -4302 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1063))
353 4302 0
338 4302 0
338 353 4301 0
c ((SATLiteral(308) + aux1063 - aux1064)<=0)
4301 -4304 0
4302 -4305 0
-308 -4304 0
-308 4301 -4305 0
-308 4302 -4307 0
c (0<=(SATLiteral(308) + aux1063 - aux1064))
-4302 4307 0
-4301 4305 0
308 4307 0
308 -4302 4305 0
308 -4301 4304 0
c ((aux1060 + aux1062 - aux1065)<=0)
4298 -4309 0
4299 -4310 0
4292 -4309 0
4292 4298 -4310 0
4292 4299 -4312 0
4293 -4310 0
4293 4298 -4312 0
4293 4299 -4314 0
c (0<=(aux1060 + aux1062 - aux1065))
-4299 4314 0
-4298 4312 0
-4293 4314 0
-4293 -4299 4312 0
-4293 -4298 4310 0
-4292 4312 0
-4292 -4299 4310 0
-4292 -4298 4309 0
c ((SATLiteral(280) + SATLiteral(400) - aux1066)<=0)
-400 -4316 0
-280 -4316 0
-280 -400 -4317 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1066))
400 4317 0
280 4317 0
280 400 4316 0
c ((SATLiteral(291) + SATLiteral(385) - aux1067)<=0)
-385 -4319 0
-291 -4319 0
-291 -385 -4320 0
c (0<=(SATLiteral(291) + SATLiteral(385) - aux1067))
385 4320 0
291 4320 0
291 385 4319 0
c ((SATLiteral(321) + SATLiteral(370) - aux1068)<=0)
-370 -4322 0
-321 -4322 0
-321 -370 -4323 0
c (0<=(SATLiteral(321) + SATLiteral(370) - aux1068))
370 4323 0
321 4323 0
321 370 4322 0
c ((SATLiteral(340) + SATLiteral(355) - aux1069)<=0)
-355 -4325 0
-340 -4325 0
-340 -355 -4326 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1069))
355 4326 0
340 4326 0
340 355 4325 0
c ((SATLiteral(310) + aux1069 - aux1070)<=0)
4325 -4328 0
4326 -4329 0
-310 -4328 0
-310 4325 -4329 0
-310 4326 -4331 0
c (0<=(SATLiteral(310) + aux1069 - aux1070))
-4326 4331 0
-4325 4329 0
310 4331 0
310 -4326 4329 0
310 -4325 4328 0
c ((aux1066 + aux1068 - aux1071)<=0)
4322 -4333 0
4323 -4334 0
4316 -4333 0
4316 4322 -4334 0
4316 4323 -4336 0
4317 -4334 0
4317 4322 -4336 0
4317 4323 -4338 0
c (0<=(aux1066 + aux1068 - aux1071))
-4323 4338 0
-4322 4336 0
-4317 4338 0
-4317 -4323 4336 0
-4317 -4322 4334 0
-4316 4336 0
-4316 -4323 4334 0
-4316 -4322 4333 0
c ((SATLiteral(282) + SATLiteral(402) - aux1072)<=0)
-402 -4340 0
-282 -4340 0
-282 -402 -4341 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1072))
402 4341 0
282 4341 0
282 402 4340 0
c ((SATLiteral(292) + SATLiteral(387) - aux1073)<=0)
-387 -4343 0
-292 -4343 0
-292 -387 -4344 0
c (0<=(SATLiteral(292) + SATLiteral(387) - aux1073))
387 4344 0
292 4344 0
292 387 4343 0
c ((SATLiteral(322) + SATLiteral(372) - aux1074)<=0)
-372 -4346 0
-322 -4346 0
-322 -372 -4347 0
c (0<=(SATLiteral(322) + SATLiteral(372) - aux1074))
372 4347 0
322 4347 0
322 372 4346 0
c ((SATLiteral(342) + SATLiteral(357) - aux1075)<=0)
-357 -4349 0
-342 -4349 0
-342 -357 -4350 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1075))
357 4350 0
342 4350 0
342 357 4349 0
c ((SATLiteral(312) + aux1075 - aux1076)<=0)
4349 -4352 0
4350 -4353 0
-312 -4352 0
-312 4349 -4353 0
-312 4350 -4355 0
c (0<=(SATLiteral(312) + aux1075 - aux1076))
-4350 4355 0
-4349 4353 0
312 4355 0
312 -4350 4353 0
312 -4349 4352 0
c ((aux1072 + aux1074 - aux1077)<=0)
4346 -4357 0
4347 -4358 0
4340 -4357 0
4340 4346 -4358 0
4340 4347 -4360 0
4341 -4358 0
4341 4346 -4360 0
4341 4347 -4362 0
c (0<=(aux1072 + aux1074 - aux1077))
-4347 4362 0
-4346 4360 0
-4341 4362 0
-4341 -4347 4360 0
-4341 -4346 4358 0
-4340 4360 0
-4340 -4347 4358 0
-4340 -4346 4357 0
c ((SATLiteral(284) + SATLiteral(404) - aux1078)<=0)
-404 -4364 0
-284 -4364 0
-284 -404 -4365 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1078))
404 4365 0
284 4365 0
284 404 4364 0
c ((SATLiteral(293) + SATLiteral(389) - aux1079)<=0)
-389 -4367 0
-293 -4367 0
-293 -389 -4368 0
c (0<=(SATLiteral(293) + SATLiteral(389) - aux1079))
389 4368 0
293 4368 0
293 389 4367 0
c ((SATLiteral(323) + SATLiteral(374) - aux1080)<=0)
-374 -4370 0
-323 -4370 0
-323 -374 -4371 0
c (0<=(SATLiteral(323) + SATLiteral(374) - aux1080))
374 4371 0
323 4371 0
323 374 4370 0
c ((SATLiteral(344) + SATLiteral(359) - aux1081)<=0)
-359 -4373 0
-344 -4373 0
-344 -359 -4374 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1081))
359 4374 0
344 4374 0
344 359 4373 0
c ((SATLiteral(314) + aux1081 - aux1082)<=0)
4373 -4376 0
4374 -4377 0
-314 -4376 0
-314 4373 -4377 0
-314 4374 -4379 0
c (0<=(SATLiteral(314) + aux1081 - aux1082))
-4374 4379 0
-4373 4377 0
314 4379 0
314 -4374 4377 0
314 -4373 4376 0
c ((aux1078 + aux1080 - aux1083)<=0)
4370 -4381 0
4371 -4382 0
4364 -4381 0
4364 4370 -4382 0
4364 4371 -4384 0
4365 -4382 0
4365 4370 -4384 0
4365 4371 -4386 0
c (0<=(aux1078 + aux1080 - aux1083))
-4371 4386 0
-4370 4384 0
-4365 4386 0
-4365 -4371 4384 0
-4365 -4370 4382 0
-4364 4384 0
-4364 -4371 4382 0
-4364 -4370 4381 0
c ((SATLiteral(286) + SATLiteral(406) - aux1084)<=0)
-406 -4388 0
-286 -4388 0
-286 -406 -4389 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1084))
406 4389 0
286 4389 0
286 406 4388 0
c ((SATLiteral(294) + SATLiteral(391) - aux1085)<=0)
-391 -4391 0
-294 -4391 0
-294 -391 -4392 0
c (0<=(SATLiteral(294) + SATLiteral(391) - aux1085))
391 4392 0
294 4392 0
294 391 4391 0
c ((SATLiteral(324) + SATLiteral(376) - aux1086)<=0)
-376 -4394 0
-324 -4394 0
-324 -376 -4395 0
c (0<=(SATLiteral(324) + SATLiteral(376) - aux1086))
376 4395 0
324 4395 0
324 376 4394 0
c ((SATLiteral(346) + SATLiteral(361) - aux1087)<=0)
-361 -4397 0
-346 -4397 0
-346 -361 -4398 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1087))
361 4398 0
346 4398 0
346 361 4397 0
c ((SATLiteral(316) + aux1087 - aux1088)<=0)
4397 -4400 0
4398 -4401 0
-316 -4400 0
-316 4397 -4401 0
-316 4398 -4403 0
c (0<=(SATLiteral(316) + aux1087 - aux1088))
-4398 4403 0
-4397 4401 0
316 4403 0
316 -4398 4401 0
316 -4397 4400 0
c ((aux1084 + aux1086 - aux1089)<=0)
4394 -4405 0
4395 -4406 0
4388 -4405 0
4388 4394 -4406 0
4388 4395 -4408 0
4389 -4406 0
4389 4394 -4408 0
4389 4395 -4410 0
c (0<=(aux1084 + aux1086 - aux1089))
-4395 4410 0
-4394 4408 0
-4389 4410 0
-4389 -4395 4408 0
-4389 -4394 4406 0
-4388 4408 0
-4388 -4395 4406 0
-4388 -4394 4405 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1090)<=0)
405 -4412 0
285 -4412 0
285 405 -4413 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1090))
-405 4413 0
-285 4413 0
-285 -405 4412 0
c ((SATLiteral(295) + SATLiteral(-390) - aux1091)<=0)
390 -4415 0
-295 -4415 0
-295 390 -4416 0
c (0<=(SATLiteral(295) + SATLiteral(-390) - aux1091))
-390 4416 0
295 4416 0
295 -390 4415 0
c ((SATLiteral(325) + SATLiteral(-375) - aux1092)<=0)
375 -4418 0
-325 -4418 0
-325 375 -4419 0
c (0<=(SATLiteral(325) + SATLiteral(-375) - aux1092))
-375 4419 0
325 4419 0
325 -375 4418 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1093)<=0)
360 -4421 0
345 -4421 0
345 360 -4422 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1093))
-360 4422 0
-345 4422 0
-345 -360 4421 0
c ((SATLiteral(-315) + aux1093 - aux1094)<=0)
4421 -4424 0
4422 -4425 0
315 -4424 0
315 4421 -4425 0
315 4422 -4427 0
c (0<=(SATLiteral(-315) + aux1093 - aux1094))
-4422 4427 0
-4421 4425 0
-315 4427 0
-315 -4422 4425 0
-315 -4421 4424 0
c ((aux1090 + aux1092 - aux1095)<=0)
4418 -4429 0
4419 -4430 0
4412 -4429 0
4412 4418 -4430 0
4412 4419 -4432 0
4413 -4430 0
4413 4418 -4432 0
4413 4419 -4434 0
c (0<=(aux1090 + aux1092 - aux1095))
-4419 4434 0
-4418 4432 0
-4413 4434 0
-4413 -4419 4432 0
-4413 -4418 4430 0
-4412 4432 0
-4412 -4419 4430 0
-4412 -4418 4429 0
c (( - aux1096 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4436 0
-407 -4436 0
-407 -527 -4437 0
c (0<=( - aux1096 + SATLiteral(407) + SATLiteral(527)))
527 4437 0
407 4437 0
407 527 4436 0
c (( - aux1097 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4439 0
-422 -4439 0
-422 -512 -4440 0
c (0<=( - aux1097 + SATLiteral(422) + SATLiteral(512)))
512 4440 0
422 4440 0
422 512 4439 0
c (( - aux1098 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4442 0
-452 -4442 0
-452 -497 -4443 0
c (0<=( - aux1098 + SATLiteral(452) + SATLiteral(497)))
497 4443 0
452 4443 0
452 497 4442 0
c (( - aux1099 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4445 0
-467 -4445 0
-467 -482 -4446 0
c (0<=( - aux1099 + SATLiteral(467) + SATLiteral(482)))
482 4446 0
467 4446 0
467 482 4445 0
c ((aux1099 - aux1100 + SATLiteral(437))<=0)
4445 -4448 0
4446 -4449 0
-437 -4448 0
-437 4445 -4449 0
-437 4446 -4451 0
c (0<=(aux1099 - aux1100 + SATLiteral(437)))
-4446 4451 0
-4445 4449 0
437 4451 0
437 -4446 4449 0
437 -4445 4448 0
c ((aux1096 + aux1098 - aux1101)<=0)
4442 -4453 0
4443 -4454 0
4436 -4453 0
4436 4442 -4454 0
4436 4443 -4456 0
4437 -4454 0
4437 4442 -4456 0
4437 4443 -4458 0
c (0<=(aux1096 + aux1098 - aux1101))
-4443 4458 0
-4442 4456 0
-4437 4458 0
-4437 -4443 4456 0
-4437 -4442 4454 0
-4436 4456 0
-4436 -4443 4454 0
-4436 -4442 4453 0
c (( - aux1102 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4460 0
-409 -4460 0
-409 -529 -4461 0
c (0<=( - aux1102 + SATLiteral(409) + SATLiteral(529)))
529 4461 0
409 4461 0
409 529 4460 0
c (( - aux1103 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4463 0
-424 -4463 0
-424 -514 -4464 0
c (0<=( - aux1103 + SATLiteral(424) + SATLiteral(514)))
514 4464 0
424 4464 0
424 514 4463 0
c (( - aux1104 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4466 0
-454 -4466 0
-454 -499 -4467 0
c (0<=( - aux1104 + SATLiteral(454) + SATLiteral(499)))
499 4467 0
454 4467 0
454 499 4466 0
c (( - aux1105 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4469 0
-469 -4469 0
-469 -484 -4470 0
c (0<=( - aux1105 + SATLiteral(469) + SATLiteral(484)))
484 4470 0
469 4470 0
469 484 4469 0
c ((aux1105 - aux1106 + SATLiteral(439))<=0)
4469 -4472 0
4470 -4473 0
-439 -4472 0
-439 4469 -4473 0
-439 4470 -4475 0
c (0<=(aux1105 - aux1106 + SATLiteral(439)))
-4470 4475 0
-4469 4473 0
439 4475 0
439 -4470 4473 0
439 -4469 4472 0
c ((aux1102 + aux1104 - aux1107)<=0)
4466 -4477 0
4467 -4478 0
4460 -4477 0
4460 4466 -4478 0
4460 4467 -4480 0
4461 -4478 0
4461 4466 -4480 0
4461 4467 -4482 0
c (0<=(aux1102 + aux1104 - aux1107))
-4467 4482 0
-4466 4480 0
-4461 4482 0
-4461 -4467 4480 0
-4461 -4466 4478 0
-4460 4480 0
-4460 -4467 4478 0
-4460 -4466 4477 0
c (( - aux1108 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4484 0
-411 -4484 0
-411 -531 -4485 0
c (0<=( - aux1108 + SATLiteral(411) + SATLiteral(531)))
531 4485 0
411 4485 0
411 531 4484 0
c (( - aux1109 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4487 0
-426 -4487 0
-426 -516 -4488 0
c (0<=( - aux1109 + SATLiteral(426) + SATLiteral(516)))
516 4488 0
426 4488 0
426 516 4487 0
c (( - aux1110 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4490 0
-456 -4490 0
-456 -501 -4491 0
c (0<=( - aux1110 + SATLiteral(456) + SATLiteral(501)))
501 4491 0
456 4491 0
456 501 4490 0
c (( - aux1111 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4493 0
-471 -4493 0
-471 -486 -4494 0
c (0<=( - aux1111 + SATLiteral(471) + SATLiteral(486)))
486 4494 0
471 4494 0
471 486 4493 0
c ((aux1111 - aux1112 + SATLiteral(441))<=0)
4493 -4496 0
4494 -4497 0
-441 -4496 0
-441 4493 -4497 0
-441 4494 -4499 0
c (0<=(aux1111 - aux1112 + SATLiteral(441)))
-4494 4499 0
-4493 4497 0
441 4499 0
441 -4494 4497 0
441 -4493 4496 0
c ((aux1108 + aux1110 - aux1113)<=0)
4490 -4501 0
4491 -4502 0
4484 -4501 0
4484 4490 -4502 0
4484 4491 -4504 0
4485 -4502 0
4485 4490 -4504 0
4485 4491 -4506 0
c (0<=(aux1108 + aux1110 - aux1113))
-4491 4506 0
-4490 4504 0
-4485 4506 0
-4485 -4491 4504 0
-4485 -4490 4502 0
-4484 4504 0
-4484 -4491 4502 0
-4484 -4490 4501 0
c (( - aux1114 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4508 0
-413 -4508 0
-413 -533 -4509 0
c (0<=( - aux1114 + SATLiteral(413) + SATLiteral(533)))
533 4509 0
413 4509 0
413 533 4508 0
c (( - aux1115 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4511 0
-428 -4511 0
-428 -518 -4512 0
c (0<=( - aux1115 + SATLiteral(428) + SATLiteral(518)))
518 4512 0
428 4512 0
428 518 4511 0
c (( - aux1116 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4514 0
-458 -4514 0
-458 -503 -4515 0
c (0<=( - aux1116 + SATLiteral(458) + SATLiteral(503)))
503 4515 0
458 4515 0
458 503 4514 0
c (( - aux1117 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4517 0
-473 -4517 0
-473 -488 -4518 0
c (0<=( - aux1117 + SATLiteral(473) + SATLiteral(488)))
488 4518 0
473 4518 0
473 488 4517 0
c ((aux1117 - aux1118 + SATLiteral(443))<=0)
4517 -4520 0
4518 -4521 0
-443 -4520 0
-443 4517 -4521 0
-443 4518 -4523 0
c (0<=(aux1117 - aux1118 + SATLiteral(443)))
-4518 4523 0
-4517 4521 0
443 4523 0
443 -4518 4521 0
443 -4517 4520 0
c ((aux1114 + aux1116 - aux1119)<=0)
4514 -4525 0
4515 -4526 0
4508 -4525 0
4508 4514 -4526 0
4508 4515 -4528 0
4509 -4526 0
4509 4514 -4528 0
4509 4515 -4530 0
c (0<=(aux1114 + aux1116 - aux1119))
-4515 4530 0
-4514 4528 0
-4509 4530 0
-4509 -4515 4528 0
-4509 -4514 4526 0
-4508 4528 0
-4508 -4515 4526 0
-4508 -4514 4525 0
c (( - aux1120 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4532 0
-415 -4532 0
-415 -535 -4533 0
c (0<=( - aux1120 + SATLiteral(415) + SATLiteral(535)))
535 4533 0
415 4533 0
415 535 4532 0
c (( - aux1121 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4535 0
-430 -4535 0
-430 -520 -4536 0
c (0<=( - aux1121 + SATLiteral(430) + SATLiteral(520)))
520 4536 0
430 4536 0
430 520 4535 0
c (( - aux1122 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4538 0
-460 -4538 0
-460 -505 -4539 0
c (0<=( - aux1122 + SATLiteral(460) + SATLiteral(505)))
505 4539 0
460 4539 0
460 505 4538 0
c (( - aux1123 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4541 0
-475 -4541 0
-475 -490 -4542 0
c (0<=( - aux1123 + SATLiteral(475) + SATLiteral(490)))
490 4542 0
475 4542 0
475 490 4541 0
c ((aux1123 - aux1124 + SATLiteral(445))<=0)
4541 -4544 0
4542 -4545 0
-445 -4544 0
-445 4541 -4545 0
-445 4542 -4547 0
c (0<=(aux1123 - aux1124 + SATLiteral(445)))
-4542 4547 0
-4541 4545 0
445 4547 0
445 -4542 4545 0
445 -4541 4544 0
c ((aux1120 + aux1122 - aux1125)<=0)
4538 -4549 0
4539 -4550 0
4532 -4549 0
4532 4538 -4550 0
4532 4539 -4552 0
4533 -4550 0
4533 4538 -4552 0
4533 4539 -4554 0
c (0<=(aux1120 + aux1122 - aux1125))
-4539 4554 0
-4538 4552 0
-4533 4554 0
-4533 -4539 4552 0
-4533 -4538 4550 0
-4532 4552 0
-4532 -4539 4550 0
-4532 -4538 4549 0
c (( - aux1126 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4556 0
-417 -4556 0
-417 -537 -4557 0
c (0<=( - aux1126 + SATLiteral(417) + SATLiteral(537)))
537 4557 0
417 4557 0
417 537 4556 0
c (( - aux1127 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4559 0
-432 -4559 0
-432 -522 -4560 0
c (0<=( - aux1127 + SATLiteral(432) + SATLiteral(522)))
522 4560 0
432 4560 0
432 522 4559 0
c (( - aux1128 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4562 0
-462 -4562 0
-462 -507 -4563 0
c (0<=( - aux1128 + SATLiteral(462) + SATLiteral(507)))
507 4563 0
462 4563 0
462 507 4562 0
c (( - aux1129 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4565 0
-477 -4565 0
-477 -492 -4566 0
c (0<=( - aux1129 + SATLiteral(477) + SATLiteral(492)))
492 4566 0
477 4566 0
477 492 4565 0
c ((aux1129 - aux1130 + SATLiteral(447))<=0)
4565 -4568 0
4566 -4569 0
-447 -4568 0
-447 4565 -4569 0
-447 4566 -4571 0
c (0<=(aux1129 - aux1130 + SATLiteral(447)))
-4566 4571 0
-4565 4569 0
447 4571 0
447 -4566 4569 0
447 -4565 4568 0
c ((aux1126 + aux1128 - aux1131)<=0)
4562 -4573 0
4563 -4574 0
4556 -4573 0
4556 4562 -4574 0
4556 4563 -4576 0
4557 -4574 0
4557 4562 -4576 0
4557 4563 -4578 0
c (0<=(aux1126 + aux1128 - aux1131))
-4563 4578 0
-4562 4576 0
-4557 4578 0
-4557 -4563 4576 0
-4557 -4562 4574 0
-4556 4576 0
-4556 -4563 4574 0
-4556 -4562 4573 0
c (( - aux1132 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4580 0
-419 -4580 0
-419 -539 -4581 0
c (0<=( - aux1132 + SATLiteral(419) + SATLiteral(539)))
539 4581 0
419 4581 0
419 539 4580 0
c (( - aux1133 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4583 0
-434 -4583 0
-434 -524 -4584 0
c (0<=( - aux1133 + SATLiteral(434) + SATLiteral(524)))
524 4584 0
434 4584 0
434 524 4583 0
c (( - aux1134 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4586 0
-464 -4586 0
-464 -509 -4587 0
c (0<=( - aux1134 + SATLiteral(464) + SATLiteral(509)))
509 4587 0
464 4587 0
464 509 4586 0
c (( - aux1135 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4589 0
-479 -4589 0
-479 -494 -4590 0
c (0<=( - aux1135 + SATLiteral(479) + SATLiteral(494)))
494 4590 0
479 4590 0
479 494 4589 0
c ((aux1135 - aux1136 + SATLiteral(449))<=0)
4589 -4592 0
4590 -4593 0
-449 -4592 0
-449 4589 -4593 0
-449 4590 -4595 0
c (0<=(aux1135 - aux1136 + SATLiteral(449)))
-4590 4595 0
-4589 4593 0
449 4595 0
449 -4590 4593 0
449 -4589 4592 0
c ((aux1132 + aux1134 - aux1137)<=0)
4586 -4597 0
4587 -4598 0
4580 -4597 0
4580 4586 -4598 0
4580 4587 -4600 0
4581 -4598 0
4581 4586 -4600 0
4581 4587 -4602 0
c (0<=(aux1132 + aux1134 - aux1137))
-4587 4602 0
-4586 4600 0
-4581 4602 0
-4581 -4587 4600 0
-4581 -4586 4598 0
-4580 4600 0
-4580 -4587 4598 0
-4580 -4586 4597 0
c (( - aux1138 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4604 0
-421 -4604 0
-421 -541 -4605 0
c (0<=( - aux1138 + SATLiteral(421) + SATLiteral(541)))
541 4605 0
421 4605 0
421 541 4604 0
c (( - aux1139 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4607 0
-436 -4607 0
-436 -526 -4608 0
c (0<=( - aux1139 + SATLiteral(436) + SATLiteral(526)))
526 4608 0
436 4608 0
436 526 4607 0
c (( - aux1140 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4610 0
-466 -4610 0
-466 -511 -4611 0
c (0<=( - aux1140 + SATLiteral(466) + SATLiteral(511)))
511 4611 0
466 4611 0
466 511 4610 0
c (( - aux1141 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4613 0
-481 -4613 0
-481 -496 -4614 0
c (0<=( - aux1141 + SATLiteral(481) + SATLiteral(496)))
496 4614 0
481 4614 0
481 496 4613 0
c ((aux1141 - aux1142 + SATLiteral(451))<=0)
4613 -4616 0
4614 -4617 0
-451 -4616 0
-451 4613 -4617 0
-451 4614 -4619 0
c (0<=(aux1141 - aux1142 + SATLiteral(451)))
-4614 4619 0
-4613 4617 0
451 4619 0
451 -4614 4617 0
451 -4613 4616 0
c ((aux1138 + aux1140 - aux1143)<=0)
4610 -4621 0
4611 -4622 0
4604 -4621 0
4604 4610 -4622 0
4604 4611 -4624 0
4605 -4622 0
4605 4610 -4624 0
4605 4611 -4626 0
c (0<=(aux1138 + aux1140 - aux1143))
-4611 4626 0
-4610 4624 0
-4605 4626 0
-4605 -4611 4624 0
-4605 -4610 4622 0
-4604 4624 0
-4604 -4611 4622 0
-4604 -4610 4621 0
c (( - aux1144 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4628 0
420 -4628 0
420 540 -4629 0
c (0<=( - aux1144 + SATLiteral(-420) + SATLiteral(-540)))
-540 4629 0
-420 4629 0
-420 -540 4628 0
c (( - aux1145 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4631 0
435 -4631 0
435 525 -4632 0
c (0<=( - aux1145 + SATLiteral(-435) + SATLiteral(-525)))
-525 4632 0
-435 4632 0
-435 -525 4631 0
c (( - aux1146 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4634 0
465 -4634 0
465 510 -4635 0
c (0<=( - aux1146 + SATLiteral(-465) + SATLiteral(-510)))
-510 4635 0
-465 4635 0
-465 -510 4634 0
c (( - aux1147 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4637 0
480 -4637 0
480 495 -4638 0
c (0<=( - aux1147 + SATLiteral(-480) + SATLiteral(-495)))
-495 4638 0
-480 4638 0
-480 -495 4637 0
c ((aux1147 - aux1148 + SATLiteral(-450))<=0)
4637 -4640 0
4638 -4641 0
450 -4640 0
450 4637 -4641 0
450 4638 -4643 0
c (0<=(aux1147 - aux1148 + SATLiteral(-450)))
-4638 4643 0
-4637 4641 0
-450 4643 0
-450 -4638 4641 0
-450 -4637 4640 0
c ((aux1144 + aux1146 - aux1149)<=0)
4634 -4645 0
4635 -4646 0
4628 -4645 0
4628 4634 -4646 0
4628 4635 -4648 0
4629 -4646 0
4629 4634 -4648 0
4629 4635 -4650 0
c (0<=(aux1144 + aux1146 - aux1149))
-4635 4650 0
-4634 4648 0
-4629 4650 0
-4629 -4635 4648 0
-4629 -4634 4646 0
-4628 4648 0
-4628 -4635 4646 0
-4628 -4634 4645 0
c (( - aux1150 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4652 0
-542 -4652 0
-542 -662 -4653 0
c (0<=( - aux1150 + SATLiteral(542) + SATLiteral(662)))
662 4653 0
542 4653 0
542 662 4652 0
c (( - aux1151 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4655 0
-557 -4655 0
-557 -647 -4656 0
c (0<=( - aux1151 + SATLiteral(557) + SATLiteral(647)))
647 4656 0
557 4656 0
557 647 4655 0
c (( - aux1152 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4658 0
-587 -4658 0
-587 -632 -4659 0
c (0<=( - aux1152 + SATLiteral(587) + SATLiteral(632)))
632 4659 0
587 4659 0
587 632 4658 0
c (( - aux1153 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4661 0
-602 -4661 0
-602 -617 -4662 0
c (0<=( - aux1153 + SATLiteral(602) + SATLiteral(617)))
617 4662 0
602 4662 0
602 617 4661 0
c ((aux1153 - aux1154 + SATLiteral(572))<=0)
4661 -4664 0
4662 -4665 0
-572 -4664 0
-572 4661 -4665 0
-572 4662 -4667 0
c (0<=(aux1153 - aux1154 + SATLiteral(572)))
-4662 4667 0
-4661 4665 0
572 4667 0
572 -4662 4665 0
572 -4661 4664 0
c ((aux1150 + aux1152 - aux1155)<=0)
4658 -4669 0
4659 -4670 0
4652 -4669 0
4652 4658 -4670 0
4652 4659 -4672 0
4653 -4670 0
4653 4658 -4672 0
4653 4659 -4674 0
c (0<=(aux1150 + aux1152 - aux1155))
-4659 4674 0
-4658 4672 0
-4653 4674 0
-4653 -4659 4672 0
-4653 -4658 4670 0
-4652 4672 0
-4652 -4659 4670 0
-4652 -4658 4669 0
c (( - aux1156 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4676 0
-544 -4676 0
-544 -664 -4677 0
c (0<=( - aux1156 + SATLiteral(544) + SATLiteral(664)))
664 4677 0
544 4677 0
544 664 4676 0
c (( - aux1157 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4679 0
-559 -4679 0
-559 -649 -4680 0
c (0<=( - aux1157 + SATLiteral(559) + SATLiteral(649)))
649 4680 0
559 4680 0
559 649 4679 0
c (( - aux1158 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4682 0
-589 -4682 0
-589 -634 -4683 0
c (0<=( - aux1158 + SATLiteral(589) + SATLiteral(634)))
634 4683 0
589 4683 0
589 634 4682 0
c (( - aux1159 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4685 0
-604 -4685 0
-604 -619 -4686 0
c (0<=( - aux1159 + SATLiteral(604) + SATLiteral(619)))
619 4686 0
604 4686 0
604 619 4685 0
c ((aux1159 - aux1160 + SATLiteral(574))<=0)
4685 -4688 0
4686 -4689 0
-574 -4688 0
-574 4685 -4689 0
-574 4686 -4691 0
c (0<=(aux1159 - aux1160 + SATLiteral(574)))
-4686 4691 0
-4685 4689 0
574 4691 0
574 -4686 4689 0
574 -4685 4688 0
c ((aux1156 + aux1158 - aux1161)<=0)
4682 -4693 0
4683 -4694 0
4676 -4693 0
4676 4682 -4694 0
4676 4683 -4696 0
4677 -4694 0
4677 4682 -4696 0
4677 4683 -4698 0
c (0<=(aux1156 + aux1158 - aux1161))
-4683 4698 0
-4682 4696 0
-4677 4698 0
-4677 -4683 4696 0
-4677 -4682 4694 0
-4676 4696 0
-4676 -4683 4694 0
-4676 -4682 4693 0
c (( - aux1162 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4700 0
-546 -4700 0
-546 -666 -4701 0
c (0<=( - aux1162 + SATLiteral(546) + SATLiteral(666)))
666 4701 0
546 4701 0
546 666 4700 0
c (( - aux1163 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4703 0
-561 -4703 0
-561 -651 -4704 0
c (0<=( - aux1163 + SATLiteral(561) + SATLiteral(651)))
651 4704 0
561 4704 0
561 651 4703 0
c (( - aux1164 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4706 0
-591 -4706 0
-591 -636 -4707 0
c (0<=( - aux1164 + SATLiteral(591) + SATLiteral(636)))
636 4707 0
591 4707 0
591 636 4706 0
c (( - aux1165 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4709 0
-606 -4709 0
-606 -621 -4710 0
c (0<=( - aux1165 + SATLiteral(606) + SATLiteral(621)))
621 4710 0
606 4710 0
606 621 4709 0
c ((aux1165 - aux1166 + SATLiteral(576))<=0)
4709 -4712 0
4710 -4713 0
-576 -4712 0
-576 4709 -4713 0
-576 4710 -4715 0
c (0<=(aux1165 - aux1166 + SATLiteral(576)))
-4710 4715 0
-4709 4713 0
576 4715 0
576 -4710 4713 0
576 -4709 4712 0
c ((aux1162 + aux1164 - aux1167)<=0)
4706 -4717 0
4707 -4718 0
4700 -4717 0
4700 4706 -4718 0
4700 4707 -4720 0
4701 -4718 0
4701 4706 -4720 0
4701 4707 -4722 0
c (0<=(aux1162 + aux1164 - aux1167))
-4707 4722 0
-4706 4720 0
-4701 4722 0
-4701 -4707 4720 0
-4701 -4706 4718 0
-4700 4720 0
-4700 -4707 4718 0
-4700 -4706 4717 0
c (( - aux1168 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4724 0
-548 -4724 0
-548 -668 -4725 0
c (0<=( - aux1168 + SATLiteral(548) + SATLiteral(668)))
668 4725 0
548 4725 0
548 668 4724 0
c (( - aux1169 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4727 0
-563 -4727 0
-563 -653 -4728 0
c (0<=( - aux1169 + SATLiteral(563) + SATLiteral(653)))
653 4728 0
563 4728 0
563 653 4727 0
c (( - aux1170 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4730 0
-593 -4730 0
-593 -638 -4731 0
c (0<=( - aux1170 + SATLiteral(593) + SATLiteral(638)))
638 4731 0
593 4731 0
593 638 4730 0
c (( - aux1171 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4733 0
-608 -4733 0
-608 -623 -4734 0
c (0<=( - aux1171 + SATLiteral(608) + SATLiteral(623)))
623 4734 0
608 4734 0
608 623 4733 0
c ((aux1171 - aux1172 + SATLiteral(578))<=0)
4733 -4736 0
4734 -4737 0
-578 -4736 0
-578 4733 -4737 0
-578 4734 -4739 0
c (0<=(aux1171 - aux1172 + SATLiteral(578)))
-4734 4739 0
-4733 4737 0
578 4739 0
578 -4734 4737 0
578 -4733 4736 0
c ((aux1168 + aux1170 - aux1173)<=0)
4730 -4741 0
4731 -4742 0
4724 -4741 0
4724 4730 -4742 0
4724 4731 -4744 0
4725 -4742 0
4725 4730 -4744 0
4725 4731 -4746 0
c (0<=(aux1168 + aux1170 - aux1173))
-4731 4746 0
-4730 4744 0
-4725 4746 0
-4725 -4731 4744 0
-4725 -4730 4742 0
-4724 4744 0
-4724 -4731 4742 0
-4724 -4730 4741 0
c (( - aux1174 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4748 0
-550 -4748 0
-550 -670 -4749 0
c (0<=( - aux1174 + SATLiteral(550) + SATLiteral(670)))
670 4749 0
550 4749 0
550 670 4748 0
c (( - aux1175 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4751 0
-565 -4751 0
-565 -655 -4752 0
c (0<=( - aux1175 + SATLiteral(565) + SATLiteral(655)))
655 4752 0
565 4752 0
565 655 4751 0
c (( - aux1176 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4754 0
-595 -4754 0
-595 -640 -4755 0
c (0<=( - aux1176 + SATLiteral(595) + SATLiteral(640)))
640 4755 0
595 4755 0
595 640 4754 0
c (( - aux1177 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4757 0
-610 -4757 0
-610 -625 -4758 0
c (0<=( - aux1177 + SATLiteral(610) + SATLiteral(625)))
625 4758 0
610 4758 0
610 625 4757 0
c ((aux1177 - aux1178 + SATLiteral(580))<=0)
4757 -4760 0
4758 -4761 0
-580 -4760 0
-580 4757 -4761 0
-580 4758 -4763 0
c (0<=(aux1177 - aux1178 + SATLiteral(580)))
-4758 4763 0
-4757 4761 0
580 4763 0
580 -4758 4761 0
580 -4757 4760 0
c ((aux1174 + aux1176 - aux1179)<=0)
4754 -4765 0
4755 -4766 0
4748 -4765 0
4748 4754 -4766 0
4748 4755 -4768 0
4749 -4766 0
4749 4754 -4768 0
4749 4755 -4770 0
c (0<=(aux1174 + aux1176 - aux1179))
-4755 4770 0
-4754 4768 0
-4749 4770 0
-4749 -4755 4768 0
-4749 -4754 4766 0
-4748 4768 0
-4748 -4755 4766 0
-4748 -4754 4765 0
c (( - aux1180 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4772 0
-552 -4772 0
-552 -672 -4773 0
c (0<=( - aux1180 + SATLiteral(552) + SATLiteral(672)))
672 4773 0
552 4773 0
552 672 4772 0
c (( - aux1181 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4775 0
-567 -4775 0
-567 -657 -4776 0
c (0<=( - aux1181 + SATLiteral(567) + SATLiteral(657)))
657 4776 0
567 4776 0
567 657 4775 0
c (( - aux1182 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4778 0
-597 -4778 0
-597 -642 -4779 0
c (0<=( - aux1182 + SATLiteral(597) + SATLiteral(642)))
642 4779 0
597 4779 0
597 642 4778 0
c (( - aux1183 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4781 0
-612 -4781 0
-612 -627 -4782 0
c (0<=( - aux1183 + SATLiteral(612) + SATLiteral(627)))
627 4782 0
612 4782 0
612 627 4781 0
c ((aux1183 - aux1184 + SATLiteral(582))<=0)
4781 -4784 0
4782 -4785 0
-582 -4784 0
-582 4781 -4785 0
-582 4782 -4787 0
c (0<=(aux1183 - aux1184 + SATLiteral(582)))
-4782 4787 0
-4781 4785 0
582 4787 0
582 -4782 4785 0
582 -4781 4784 0
c ((aux1180 + aux1182 - aux1185)<=0)
4778 -4789 0
4779 -4790 0
4772 -4789 0
4772 4778 -4790 0
4772 4779 -4792 0
4773 -4790 0
4773 4778 -4792 0
4773 4779 -4794 0
c (0<=(aux1180 + aux1182 - aux1185))
-4779 4794 0
-4778 4792 0
-4773 4794 0
-4773 -4779 4792 0
-4773 -4778 4790 0
-4772 4792 0
-4772 -4779 4790 0
-4772 -4778 4789 0
c (( - aux1186 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4796 0
-554 -4796 0
-554 -674 -4797 0
c (0<=( - aux1186 + SATLiteral(554) + SATLiteral(674)))
674 4797 0
554 4797 0
554 674 4796 0
c (( - aux1187 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4799 0
-569 -4799 0
-569 -659 -4800 0
c (0<=( - aux1187 + SATLiteral(569) + SATLiteral(659)))
659 4800 0
569 4800 0
569 659 4799 0
c (( - aux1188 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4802 0
-599 -4802 0
-599 -644 -4803 0
c (0<=( - aux1188 + SATLiteral(599) + SATLiteral(644)))
644 4803 0
599 4803 0
599 644 4802 0
c (( - aux1189 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4805 0
-614 -4805 0
-614 -629 -4806 0
c (0<=( - aux1189 + SATLiteral(614) + SATLiteral(629)))
629 4806 0
614 4806 0
614 629 4805 0
c ((aux1189 - aux1190 + SATLiteral(584))<=0)
4805 -4808 0
4806 -4809 0
-584 -4808 0
-584 4805 -4809 0
-584 4806 -4811 0
c (0<=(aux1189 - aux1190 + SATLiteral(584)))
-4806 4811 0
-4805 4809 0
584 4811 0
584 -4806 4809 0
584 -4805 4808 0
c ((aux1186 + aux1188 - aux1191)<=0)
4802 -4813 0
4803 -4814 0
4796 -4813 0
4796 4802 -4814 0
4796 4803 -4816 0
4797 -4814 0
4797 4802 -4816 0
4797 4803 -4818 0
c (0<=(aux1186 + aux1188 - aux1191))
-4803 4818 0
-4802 4816 0
-4797 4818 0
-4797 -4803 4816 0
-4797 -4802 4814 0
-4796 4816 0
-4796 -4803 4814 0
-4796 -4802 4813 0
c (( - aux1192 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4820 0
-556 -4820 0
-556 -676 -4821 0
c (0<=( - aux1192 + SATLiteral(556) + SATLiteral(676)))
676 4821 0
556 4821 0
556 676 4820 0
c (( - aux1193 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4823 0
-571 -4823 0
-571 -661 -4824 0
c (0<=( - aux1193 + SATLiteral(571) + SATLiteral(661)))
661 4824 0
571 4824 0
571 661 4823 0
c (( - aux1194 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4826 0
-601 -4826 0
-601 -646 -4827 0
c (0<=( - aux1194 + SATLiteral(601) + SATLiteral(646)))
646 4827 0
601 4827 0
601 646 4826 0
c (( - aux1195 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -4829 0
-616 -4829 0
-616 -631 -4830 0
c (0<=( - aux1195 + SATLiteral(616) + SATLiteral(631)))
631 4830 0
616 4830 0
616 631 4829 0
c ((aux1195 - aux1196 + SATLiteral(586))<=0)
4829 -4832 0
4830 -4833 0
-586 -4832 0
-586 4829 -4833 0
-586 4830 -4835 0
c (0<=(aux1195 - aux1196 + SATLiteral(586)))
-4830 4835 0
-4829 4833 0
586 4835 0
586 -4830 4833 0
586 -4829 4832 0
c ((aux1192 + aux1194 - aux1197)<=0)
4826 -4837 0
4827 -4838 0
4820 -4837 0
4820 4826 -4838 0
4820 4827 -4840 0
4821 -4838 0
4821 4826 -4840 0
4821 4827 -4842 0
c (0<=(aux1192 + aux1194 - aux1197))
-4827 4842 0
-4826 4840 0
-4821 4842 0
-4821 -4827 4840 0
-4821 -4826 4838 0
-4820 4840 0
-4820 -4827 4838 0
-4820 -4826 4837 0
c (( - aux1198 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -4844 0
555 -4844 0
555 675 -4845 0
c (0<=( - aux1198 + SATLiteral(-555) + SATLiteral(-675)))
-675 4845 0
-555 4845 0
-555 -675 4844 0
c (( - aux1199 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -4847 0
570 -4847 0
570 660 -4848 0
c (0<=( - aux1199 + SATLiteral(-570) + SATLiteral(-660)))
-660 4848 0
-570 4848 0
-570 -660 4847 0
c (( - aux1200 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -4850 0
600 -4850 0
600 645 -4851 0
c (0<=( - aux1200 + SATLiteral(-600) + SATLiteral(-645)))
-645 4851 0
-600 4851 0
-600 -645 4850 0
c (( - aux1201 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -4853 0
615 -4853 0
615 630 -4854 0
c (0<=( - aux1201 + SATLiteral(-615) + SATLiteral(-630)))
-630 4854 0
-615 4854 0
-615 -630 4853 0
c ((aux1201 - aux1202 + SATLiteral(-585))<=0)
4853 -4856 0
4854 -4857 0
585 -4856 0
585 4853 -4857 0
585 4854 -4859 0
c (0<=(aux1201 - aux1202 + SATLiteral(-585)))
-4854 4859 0
-4853 4857 0
-585 4859 0
-585 -4854 4857 0
-585 -4853 4856 0
c ((aux1198 + aux1200 - aux1203)<=0)
4850 -4861 0
4851 -4862 0
4844 -4861 0
4844 4850 -4862 0
4844 4851 -4864 0
4845 -4862 0
4845 4850 -4864 0
4845 4851 -4866 0
c (0<=(aux1198 + aux1200 - aux1203))
-4851 4866 0
-4850 4864 0
-4845 4866 0
-4845 -4851 4864 0
-4845 -4850 4862 0
-4844 4864 0
-4844 -4851 4862 0
-4844 -4850 4861 0
c ((SATLiteral(677) + SATLiteral(797) - aux1204)<=0)
-797 -4868 0
-677 -4868 0
-677 -797 -4869 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1204))
797 4869 0
677 4869 0
677 797 4868 0
c ((SATLiteral(692) + SATLiteral(782) - aux1205)<=0)
-782 -4871 0
-692 -4871 0
-692 -782 -4872 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1205))
782 4872 0
692 4872 0
692 782 4871 0
c ((SATLiteral(722) + SATLiteral(767) - aux1206)<=0)
-767 -4874 0
-722 -4874 0
-722 -767 -4875 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1206))
767 4875 0
722 4875 0
722 767 4874 0
c ((SATLiteral(737) + SATLiteral(752) - aux1207)<=0)
-752 -4877 0
-737 -4877 0
-737 -752 -4878 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1207))
752 4878 0
737 4878 0
737 752 4877 0
c ((SATLiteral(707) + aux1207 - aux1208)<=0)
4877 -4880 0
4878 -4881 0
-707 -4880 0
-707 4877 -4881 0
-707 4878 -4883 0
c (0<=(SATLiteral(707) + aux1207 - aux1208))
-4878 4883 0
-4877 4881 0
707 4883 0
707 -4878 4881 0
707 -4877 4880 0
c ((aux1204 + aux1206 - aux1209)<=0)
4874 -4885 0
4875 -4886 0
4868 -4885 0
4868 4874 -4886 0
4868 4875 -4888 0
4869 -4886 0
4869 4874 -4888 0
4869 4875 -4890 0
c (0<=(aux1204 + aux1206 - aux1209))
-4875 4890 0
-4874 4888 0
-4869 4890 0
-4869 -4875 4888 0
-4869 -4874 4886 0
-4868 4888 0
-4868 -4875 4886 0
-4868 -4874 4885 0
c ((SATLiteral(679) + SATLiteral(799) - aux1210)<=0)
-799 -4892 0
-679 -4892 0
-679 -799 -4893 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1210))
799 4893 0
679 4893 0
679 799 4892 0
c ((SATLiteral(694) + SATLiteral(784) - aux1211)<=0)
-784 -4895 0
-694 -4895 0
-694 -784 -4896 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1211))
784 4896 0
694 4896 0
694 784 4895 0
c ((SATLiteral(724) + SATLiteral(769) - aux1212)<=0)
-769 -4898 0
-724 -4898 0
-724 -769 -4899 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1212))
769 4899 0
724 4899 0
724 769 4898 0
c ((SATLiteral(739) + SATLiteral(754) - aux1213)<=0)
-754 -4901 0
-739 -4901 0
-739 -754 -4902 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1213))
754 4902 0
739 4902 0
739 754 4901 0
c ((SATLiteral(709) + aux1213 - aux1214)<=0)
4901 -4904 0
4902 -4905 0
-709 -4904 0
-709 4901 -4905 0
-709 4902 -4907 0
c (0<=(SATLiteral(709) + aux1213 - aux1214))
-4902 4907 0
-4901 4905 0
709 4907 0
709 -4902 4905 0
709 -4901 4904 0
c ((aux1210 + aux1212 - aux1215)<=0)
4898 -4909 0
4899 -4910 0
4892 -4909 0
4892 4898 -4910 0
4892 4899 -4912 0
4893 -4910 0
4893 4898 -4912 0
4893 4899 -4914 0
c (0<=(aux1210 + aux1212 - aux1215))
-4899 4914 0
-4898 4912 0
-4893 4914 0
-4893 -4899 4912 0
-4893 -4898 4910 0
-4892 4912 0
-4892 -4899 4910 0
-4892 -4898 4909 0
c ((SATLiteral(681) + SATLiteral(801) - aux1216)<=0)
-801 -4916 0
-681 -4916 0
-681 -801 -4917 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1216))
801 4917 0
681 4917 0
681 801 4916 0
c ((SATLiteral(696) + SATLiteral(786) - aux1217)<=0)
-786 -4919 0
-696 -4919 0
-696 -786 -4920 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1217))
786 4920 0
696 4920 0
696 786 4919 0
c ((SATLiteral(726) + SATLiteral(771) - aux1218)<=0)
-771 -4922 0
-726 -4922 0
-726 -771 -4923 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1218))
771 4923 0
726 4923 0
726 771 4922 0
c ((SATLiteral(741) + SATLiteral(756) - aux1219)<=0)
-756 -4925 0
-741 -4925 0
-741 -756 -4926 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1219))
756 4926 0
741 4926 0
741 756 4925 0
c ((SATLiteral(711) + aux1219 - aux1220)<=0)
4925 -4928 0
4926 -4929 0
-711 -4928 0
-711 4925 -4929 0
-711 4926 -4931 0
c (0<=(SATLiteral(711) + aux1219 - aux1220))
-4926 4931 0
-4925 4929 0
711 4931 0
711 -4926 4929 0
711 -4925 4928 0
c ((aux1216 + aux1218 - aux1221)<=0)
4922 -4933 0
4923 -4934 0
4916 -4933 0
4916 4922 -4934 0
4916 4923 -4936 0
4917 -4934 0
4917 4922 -4936 0
4917 4923 -4938 0
c (0<=(aux1216 + aux1218 - aux1221))
-4923 4938 0
-4922 4936 0
-4917 4938 0
-4917 -4923 4936 0
-4917 -4922 4934 0
-4916 4936 0
-4916 -4923 4934 0
-4916 -4922 4933 0
c ((SATLiteral(683) + SATLiteral(803) - aux1222)<=0)
-803 -4940 0
-683 -4940 0
-683 -803 -4941 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1222))
803 4941 0
683 4941 0
683 803 4940 0
c ((SATLiteral(698) + SATLiteral(788) - aux1223)<=0)
-788 -4943 0
-698 -4943 0
-698 -788 -4944 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1223))
788 4944 0
698 4944 0
698 788 4943 0
c ((SATLiteral(728) + SATLiteral(773) - aux1224)<=0)
-773 -4946 0
-728 -4946 0
-728 -773 -4947 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1224))
773 4947 0
728 4947 0
728 773 4946 0
c ((SATLiteral(743) + SATLiteral(758) - aux1225)<=0)
-758 -4949 0
-743 -4949 0
-743 -758 -4950 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1225))
758 4950 0
743 4950 0
743 758 4949 0
c ((SATLiteral(713) + aux1225 - aux1226)<=0)
4949 -4952 0
4950 -4953 0
-713 -4952 0
-713 4949 -4953 0
-713 4950 -4955 0
c (0<=(SATLiteral(713) + aux1225 - aux1226))
-4950 4955 0
-4949 4953 0
713 4955 0
713 -4950 4953 0
713 -4949 4952 0
c ((aux1222 + aux1224 - aux1227)<=0)
4946 -4957 0
4947 -4958 0
4940 -4957 0
4940 4946 -4958 0
4940 4947 -4960 0
4941 -4958 0
4941 4946 -4960 0
4941 4947 -4962 0
c (0<=(aux1222 + aux1224 - aux1227))
-4947 4962 0
-4946 4960 0
-4941 4962 0
-4941 -4947 4960 0
-4941 -4946 4958 0
-4940 4960 0
-4940 -4947 4958 0
-4940 -4946 4957 0
c ((SATLiteral(685) + SATLiteral(805) - aux1228)<=0)
-805 -4964 0
-685 -4964 0
-685 -805 -4965 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1228))
805 4965 0
685 4965 0
685 805 4964 0
c ((SATLiteral(700) + SATLiteral(790) - aux1229)<=0)
-790 -4967 0
-700 -4967 0
-700 -790 -4968 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1229))
790 4968 0
700 4968 0
700 790 4967 0
c ((SATLiteral(730) + SATLiteral(775) - aux1230)<=0)
-775 -4970 0
-730 -4970 0
-730 -775 -4971 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1230))
775 4971 0
730 4971 0
730 775 4970 0
c ((SATLiteral(745) + SATLiteral(760) - aux1231)<=0)
-760 -4973 0
-745 -4973 0
-745 -760 -4974 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1231))
760 4974 0
745 4974 0
745 760 4973 0
c ((SATLiteral(715) + aux1231 - aux1232)<=0)
4973 -4976 0
4974 -4977 0
-715 -4976 0
-715 4973 -4977 0
-715 4974 -4979 0
c (0<=(SATLiteral(715) + aux1231 - aux1232))
-4974 4979 0
-4973 4977 0
715 4979 0
715 -4974 4977 0
715 -4973 4976 0
c ((aux1228 + aux1230 - aux1233)<=0)
4970 -4981 0
4971 -4982 0
4964 -4981 0
4964 4970 -4982 0
4964 4971 -4984 0
4965 -4982 0
4965 4970 -4984 0
4965 4971 -4986 0
c (0<=(aux1228 + aux1230 - aux1233))
-4971 4986 0
-4970 4984 0
-4965 4986 0
-4965 -4971 4984 0
-4965 -4970 4982 0
-4964 4984 0
-4964 -4971 4982 0
-4964 -4970 4981 0
c ((SATLiteral(687) + SATLiteral(807) - aux1234)<=0)
-807 -4988 0
-687 -4988 0
-687 -807 -4989 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1234))
807 4989 0
687 4989 0
687 807 4988 0
c ((SATLiteral(702) + SATLiteral(792) - aux1235)<=0)
-792 -4991 0
-702 -4991 0
-702 -792 -4992 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1235))
792 4992 0
702 4992 0
702 792 4991 0
c ((SATLiteral(732) + SATLiteral(777) - aux1236)<=0)
-777 -4994 0
-732 -4994 0
-732 -777 -4995 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1236))
777 4995 0
732 4995 0
732 777 4994 0
c ((SATLiteral(747) + SATLiteral(762) - aux1237)<=0)
-762 -4997 0
-747 -4997 0
-747 -762 -4998 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1237))
762 4998 0
747 4998 0
747 762 4997 0
c ((SATLiteral(717) + aux1237 - aux1238)<=0)
4997 -5000 0
4998 -5001 0
-717 -5000 0
-717 4997 -5001 0
-717 4998 -5003 0
c (0<=(SATLiteral(717) + aux1237 - aux1238))
-4998 5003 0
-4997 5001 0
717 5003 0
717 -4998 5001 0
717 -4997 5000 0
c ((aux1234 + aux1236 - aux1239)<=0)
4994 -5005 0
4995 -5006 0
4988 -5005 0
4988 4994 -5006 0
4988 4995 -5008 0
4989 -5006 0
4989 4994 -5008 0
4989 4995 -5010 0
c (0<=(aux1234 + aux1236 - aux1239))
-4995 5010 0
-4994 5008 0
-4989 5010 0
-4989 -4995 5008 0
-4989 -4994 5006 0
-4988 5008 0
-4988 -4995 5006 0
-4988 -4994 5005 0
c ((SATLiteral(689) + SATLiteral(809) - aux1240)<=0)
-809 -5012 0
-689 -5012 0
-689 -809 -5013 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1240))
809 5013 0
689 5013 0
689 809 5012 0
c ((SATLiteral(704) + SATLiteral(794) - aux1241)<=0)
-794 -5015 0
-704 -5015 0
-704 -794 -5016 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1241))
794 5016 0
704 5016 0
704 794 5015 0
c ((SATLiteral(734) + SATLiteral(779) - aux1242)<=0)
-779 -5018 0
-734 -5018 0
-734 -779 -5019 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1242))
779 5019 0
734 5019 0
734 779 5018 0
c ((SATLiteral(749) + SATLiteral(764) - aux1243)<=0)
-764 -5021 0
-749 -5021 0
-749 -764 -5022 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1243))
764 5022 0
749 5022 0
749 764 5021 0
c ((SATLiteral(719) + aux1243 - aux1244)<=0)
5021 -5024 0
5022 -5025 0
-719 -5024 0
-719 5021 -5025 0
-719 5022 -5027 0
c (0<=(SATLiteral(719) + aux1243 - aux1244))
-5022 5027 0
-5021 5025 0
719 5027 0
719 -5022 5025 0
719 -5021 5024 0
c ((aux1240 + aux1242 - aux1245)<=0)
5018 -5029 0
5019 -5030 0
5012 -5029 0
5012 5018 -5030 0
5012 5019 -5032 0
5013 -5030 0
5013 5018 -5032 0
5013 5019 -5034 0
c (0<=(aux1240 + aux1242 - aux1245))
-5019 5034 0
-5018 5032 0
-5013 5034 0
-5013 -5019 5032 0
-5013 -5018 5030 0
-5012 5032 0
-5012 -5019 5030 0
-5012 -5018 5029 0
c ((SATLiteral(691) + SATLiteral(811) - aux1246)<=0)
-811 -5036 0
-691 -5036 0
-691 -811 -5037 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1246))
811 5037 0
691 5037 0
691 811 5036 0
c ((SATLiteral(706) + SATLiteral(796) - aux1247)<=0)
-796 -5039 0
-706 -5039 0
-706 -796 -5040 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1247))
796 5040 0
706 5040 0
706 796 5039 0
c ((SATLiteral(736) + SATLiteral(781) - aux1248)<=0)
-781 -5042 0
-736 -5042 0
-736 -781 -5043 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1248))
781 5043 0
736 5043 0
736 781 5042 0
c ((SATLiteral(751) + SATLiteral(766) - aux1249)<=0)
-766 -5045 0
-751 -5045 0
-751 -766 -5046 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1249))
766 5046 0
751 5046 0
751 766 5045 0
c ((SATLiteral(721) + aux1249 - aux1250)<=0)
5045 -5048 0
5046 -5049 0
-721 -5048 0
-721 5045 -5049 0
-721 5046 -5051 0
c (0<=(SATLiteral(721) + aux1249 - aux1250))
-5046 5051 0
-5045 5049 0
721 5051 0
721 -5046 5049 0
721 -5045 5048 0
c ((aux1246 + aux1248 - aux1251)<=0)
5042 -5053 0
5043 -5054 0
5036 -5053 0
5036 5042 -5054 0
5036 5043 -5056 0
5037 -5054 0
5037 5042 -5056 0
5037 5043 -5058 0
c (0<=(aux1246 + aux1248 - aux1251))
-5043 5058 0
-5042 5056 0
-5037 5058 0
-5037 -5043 5056 0
-5037 -5042 5054 0
-5036 5056 0
-5036 -5043 5054 0
-5036 -5042 5053 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1252)<=0)
810 -5060 0
690 -5060 0
690 810 -5061 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1252))
-810 5061 0
-690 5061 0
-690 -810 5060 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1253)<=0)
795 -5063 0
705 -5063 0
705 795 -5064 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1253))
-795 5064 0
-705 5064 0
-705 -795 5063 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1254)<=0)
780 -5066 0
735 -5066 0
735 780 -5067 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1254))
-780 5067 0
-735 5067 0
-735 -780 5066 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1255)<=0)
765 -5069 0
750 -5069 0
750 765 -5070 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1255))
-765 5070 0
-750 5070 0
-750 -765 5069 0
c ((SATLiteral(-720) + aux1255 - aux1256)<=0)
5069 -5072 0
5070 -5073 0
720 -5072 0
720 5069 -5073 0
720 5070 -5075 0
c (0<=(SATLiteral(-720) + aux1255 - aux1256))
-5070 5075 0
-5069 5073 0
-720 5075 0
-720 -5070 5073 0
-720 -5069 5072 0
c ((aux1252 + aux1254 - aux1257)<=0)
5066 -5077 0
5067 -5078 0
5060 -5077 0
5060 5066 -5078 0
5060 5067 -5080 0
5061 -5078 0
5061 5066 -5080 0
5061 5067 -5082 0
c (0<=(aux1252 + aux1254 - aux1257))
-5067 5082 0
-5066 5080 0
-5061 5082 0
-5061 -5067 5080 0
-5061 -5066 5078 0
-5060 5080 0
-5060 -5067 5078 0
-5060 -5066 5077 0
c (( - aux1258 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5084 0
-812 -5084 0
-812 -932 -5085 0
c (0<=( - aux1258 + SATLiteral(812) + SATLiteral(932)))
932 5085 0
812 5085 0
812 932 5084 0
c (( - aux1259 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5087 0
-827 -5087 0
-827 -917 -5088 0
c (0<=( - aux1259 + SATLiteral(827) + SATLiteral(917)))
917 5088 0
827 5088 0
827 917 5087 0
c (( - aux1260 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5090 0
-857 -5090 0
-857 -902 -5091 0
c (0<=( - aux1260 + SATLiteral(857) + SATLiteral(902)))
902 5091 0
857 5091 0
857 902 5090 0
c (( - aux1261 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5093 0
-872 -5093 0
-872 -887 -5094 0
c (0<=( - aux1261 + SATLiteral(872) + SATLiteral(887)))
887 5094 0
872 5094 0
872 887 5093 0
c ((aux1261 - aux1262 + SATLiteral(842))<=0)
5093 -5096 0
5094 -5097 0
-842 -5096 0
-842 5093 -5097 0
-842 5094 -5099 0
c (0<=(aux1261 - aux1262 + SATLiteral(842)))
-5094 5099 0
-5093 5097 0
842 5099 0
842 -5094 5097 0
842 -5093 5096 0
c ((aux1258 + aux1260 - aux1263)<=0)
5090 -5101 0
5091 -5102 0
5084 -5101 0
5084 5090 -5102 0
5084 5091 -5104 0
5085 -5102 0
5085 5090 -5104 0
5085 5091 -5106 0
c (0<=(aux1258 + aux1260 - aux1263))
-5091 5106 0
-5090 5104 0
-5085 5106 0
-5085 -5091 5104 0
-5085 -5090 5102 0
-5084 5104 0
-5084 -5091 5102 0
-5084 -5090 5101 0
c (( - aux1264 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5108 0
-814 -5108 0
-814 -934 -5109 0
c (0<=( - aux1264 + SATLiteral(814) + SATLiteral(934)))
934 5109 0
814 5109 0
814 934 5108 0
c (( - aux1265 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5111 0
-829 -5111 0
-829 -919 -5112 0
c (0<=( - aux1265 + SATLiteral(829) + SATLiteral(919)))
919 5112 0
829 5112 0
829 919 5111 0
c (( - aux1266 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5114 0
-859 -5114 0
-859 -904 -5115 0
c (0<=( - aux1266 + SATLiteral(859) + SATLiteral(904)))
904 5115 0
859 5115 0
859 904 5114 0
c (( - aux1267 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5117 0
-874 -5117 0
-874 -889 -5118 0
c (0<=( - aux1267 + SATLiteral(874) + SATLiteral(889)))
889 5118 0
874 5118 0
874 889 5117 0
c ((aux1267 - aux1268 + SATLiteral(844))<=0)
5117 -5120 0
5118 -5121 0
-844 -5120 0
-844 5117 -5121 0
-844 5118 -5123 0
c (0<=(aux1267 - aux1268 + SATLiteral(844)))
-5118 5123 0
-5117 5121 0
844 5123 0
844 -5118 5121 0
844 -5117 5120 0
c ((aux1264 + aux1266 - aux1269)<=0)
5114 -5125 0
5115 -5126 0
5108 -5125 0
5108 5114 -5126 0
5108 5115 -5128 0
5109 -5126 0
5109 5114 -5128 0
5109 5115 -5130 0
c (0<=(aux1264 + aux1266 - aux1269))
-5115 5130 0
-5114 5128 0
-5109 5130 0
-5109 -5115 5128 0
-5109 -5114 5126 0
-5108 5128 0
-5108 -5115 5126 0
-5108 -5114 5125 0
c (( - aux1270 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5132 0
-816 -5132 0
-816 -936 -5133 0
c (0<=( - aux1270 + SATLiteral(816) + SATLiteral(936)))
936 5133 0
816 5133 0
816 936 5132 0
c (( - aux1271 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5135 0
-831 -5135 0
-831 -921 -5136 0
c (0<=( - aux1271 + SATLiteral(831) + SATLiteral(921)))
921 5136 0
831 5136 0
831 921 5135 0
c (( - aux1272 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5138 0
-861 -5138 0
-861 -906 -5139 0
c (0<=( - aux1272 + SATLiteral(861) + SATLiteral(906)))
906 5139 0
861 5139 0
861 906 5138 0
c (( - aux1273 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5141 0
-876 -5141 0
-876 -891 -5142 0
c (0<=( - aux1273 + SATLiteral(876) + SATLiteral(891)))
891 5142 0
876 5142 0
876 891 5141 0
c ((aux1273 - aux1274 + SATLiteral(846))<=0)
5141 -5144 0
5142 -5145 0
-846 -5144 0
-846 5141 -5145 0
-846 5142 -5147 0
c (0<=(aux1273 - aux1274 + SATLiteral(846)))
-5142 5147 0
-5141 5145 0
846 5147 0
846 -5142 5145 0
846 -5141 5144 0
c ((aux1270 + aux1272 - aux1275)<=0)
5138 -5149 0
5139 -5150 0
5132 -5149 0
5132 5138 -5150 0
5132 5139 -5152 0
5133 -5150 0
5133 5138 -5152 0
5133 5139 -5154 0
c (0<=(aux1270 + aux1272 - aux1275))
-5139 5154 0
-5138 5152 0
-5133 5154 0
-5133 -5139 5152 0
-5133 -5138 5150 0
-5132 5152 0
-5132 -5139 5150 0
-5132 -5138 5149 0
c (( - aux1276 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5156 0
-818 -5156 0
-818 -938 -5157 0
c (0<=( - aux1276 + SATLiteral(818) + SATLiteral(938)))
938 5157 0
818 5157 0
818 938 5156 0
c (( - aux1277 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5159 0
-833 -5159 0
-833 -923 -5160 0
c (0<=( - aux1277 + SATLiteral(833) + SATLiteral(923)))
923 5160 0
833 5160 0
833 923 5159 0
c (( - aux1278 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5162 0
-863 -5162 0
-863 -908 -5163 0
c (0<=( - aux1278 + SATLiteral(863) + SATLiteral(908)))
908 5163 0
863 5163 0
863 908 5162 0
c (( - aux1279 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5165 0
-878 -5165 0
-878 -893 -5166 0
c (0<=( - aux1279 + SATLiteral(878) + SATLiteral(893)))
893 5166 0
878 5166 0
878 893 5165 0
c ((aux1279 - aux1280 + SATLiteral(848))<=0)
5165 -5168 0
5166 -5169 0
-848 -5168 0
-848 5165 -5169 0
-848 5166 -5171 0
c (0<=(aux1279 - aux1280 + SATLiteral(848)))
-5166 5171 0
-5165 5169 0
848 5171 0
848 -5166 5169 0
848 -5165 5168 0
c ((aux1276 + aux1278 - aux1281)<=0)
5162 -5173 0
5163 -5174 0
5156 -5173 0
5156 5162 -5174 0
5156 5163 -5176 0
5157 -5174 0
5157 5162 -5176 0
5157 5163 -5178 0
c (0<=(aux1276 + aux1278 - aux1281))
-5163 5178 0
-5162 5176 0
-5157 5178 0
-5157 -5163 5176 0
-5157 -5162 5174 0
-5156 5176 0
-5156 -5163 5174 0
-5156 -5162 5173 0
c (( - aux1282 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5180 0
-820 -5180 0
-820 -940 -5181 0
c (0<=( - aux1282 + SATLiteral(820) + SATLiteral(940)))
940 5181 0
820 5181 0
820 940 5180 0
c (( - aux1283 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5183 0
-835 -5183 0
-835 -925 -5184 0
c (0<=( - aux1283 + SATLiteral(835) + SATLiteral(925)))
925 5184 0
835 5184 0
835 925 5183 0
c (( - aux1284 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5186 0
-865 -5186 0
-865 -910 -5187 0
c (0<=( - aux1284 + SATLiteral(865) + SATLiteral(910)))
910 5187 0
865 5187 0
865 910 5186 0
c (( - aux1285 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5189 0
-880 -5189 0
-880 -895 -5190 0
c (0<=( - aux1285 + SATLiteral(880) + SATLiteral(895)))
895 5190 0
880 5190 0
880 895 5189 0
c ((aux1285 - aux1286 + SATLiteral(850))<=0)
5189 -5192 0
5190 -5193 0
-850 -5192 0
-850 5189 -5193 0
-850 5190 -5195 0
c (0<=(aux1285 - aux1286 + SATLiteral(850)))
-5190 5195 0
-5189 5193 0
850 5195 0
850 -5190 5193 0
850 -5189 5192 0
c ((aux1282 + aux1284 - aux1287)<=0)
5186 -5197 0
5187 -5198 0
5180 -5197 0
5180 5186 -5198 0
5180 5187 -5200 0
5181 -5198 0
5181 5186 -5200 0
5181 5187 -5202 0
c (0<=(aux1282 + aux1284 - aux1287))
-5187 5202 0
-5186 5200 0
-5181 5202 0
-5181 -5187 5200 0
-5181 -5186 5198 0
-5180 5200 0
-5180 -5187 5198 0
-5180 -5186 5197 0
c (( - aux1288 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5204 0
-822 -5204 0
-822 -942 -5205 0
c (0<=( - aux1288 + SATLiteral(822) + SATLiteral(942)))
942 5205 0
822 5205 0
822 942 5204 0
c (( - aux1289 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5207 0
-837 -5207 0
-837 -927 -5208 0
c (0<=( - aux1289 + SATLiteral(837) + SATLiteral(927)))
927 5208 0
837 5208 0
837 927 5207 0
c (( - aux1290 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5210 0
-867 -5210 0
-867 -912 -5211 0
c (0<=( - aux1290 + SATLiteral(867) + SATLiteral(912)))
912 5211 0
867 5211 0
867 912 5210 0
c (( - aux1291 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5213 0
-882 -5213 0
-882 -897 -5214 0
c (0<=( - aux1291 + SATLiteral(882) + SATLiteral(897)))
897 5214 0
882 5214 0
882 897 5213 0
c ((aux1291 - aux1292 + SATLiteral(852))<=0)
5213 -5216 0
5214 -5217 0
-852 -5216 0
-852 5213 -5217 0
-852 5214 -5219 0
c (0<=(aux1291 - aux1292 + SATLiteral(852)))
-5214 5219 0
-5213 5217 0
852 5219 0
852 -5214 5217 0
852 -5213 5216 0
c ((aux1288 + aux1290 - aux1293)<=0)
5210 -5221 0
5211 -5222 0
5204 -5221 0
5204 5210 -5222 0
5204 5211 -5224 0
5205 -5222 0
5205 5210 -5224 0
5205 5211 -5226 0
c (0<=(aux1288 + aux1290 - aux1293))
-5211 5226 0
-5210 5224 0
-5205 5226 0
-5205 -5211 5224 0
-5205 -5210 5222 0
-5204 5224 0
-5204 -5211 5222 0
-5204 -5210 5221 0
c (( - aux1294 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5228 0
-824 -5228 0
-824 -944 -5229 0
c (0<=( - aux1294 + SATLiteral(824) + SATLiteral(944)))
944 5229 0
824 5229 0
824 944 5228 0
c (( - aux1295 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5231 0
-839 -5231 0
-839 -929 -5232 0
c (0<=( - aux1295 + SATLiteral(839) + SATLiteral(929)))
929 5232 0
839 5232 0
839 929 5231 0
c (( - aux1296 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5234 0
-869 -5234 0
-869 -914 -5235 0
c (0<=( - aux1296 + SATLiteral(869) + SATLiteral(914)))
914 5235 0
869 5235 0
869 914 5234 0
c (( - aux1297 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5237 0
-884 -5237 0
-884 -899 -5238 0
c (0<=( - aux1297 + SATLiteral(884) + SATLiteral(899)))
899 5238 0
884 5238 0
884 899 5237 0
c ((aux1297 - aux1298 + SATLiteral(854))<=0)
5237 -5240 0
5238 -5241 0
-854 -5240 0
-854 5237 -5241 0
-854 5238 -5243 0
c (0<=(aux1297 - aux1298 + SATLiteral(854)))
-5238 5243 0
-5237 5241 0
854 5243 0
854 -5238 5241 0
854 -5237 5240 0
c ((aux1294 + aux1296 - aux1299)<=0)
5234 -5245 0
5235 -5246 0
5228 -5245 0
5228 5234 -5246 0
5228 5235 -5248 0
5229 -5246 0
5229 5234 -5248 0
5229 5235 -5250 0
c (0<=(aux1294 + aux1296 - aux1299))
-5235 5250 0
-5234 5248 0
-5229 5250 0
-5229 -5235 5248 0
-5229 -5234 5246 0
-5228 5248 0
-5228 -5235 5246 0
-5228 -5234 5245 0
c (( - aux1300 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5252 0
-826 -5252 0
-826 -946 -5253 0
c (0<=( - aux1300 + SATLiteral(826) + SATLiteral(946)))
946 5253 0
826 5253 0
826 946 5252 0
c (( - aux1301 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5255 0
-841 -5255 0
-841 -931 -5256 0
c (0<=( - aux1301 + SATLiteral(841) + SATLiteral(931)))
931 5256 0
841 5256 0
841 931 5255 0
c (( - aux1302 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5258 0
-871 -5258 0
-871 -916 -5259 0
c (0<=( - aux1302 + SATLiteral(871) + SATLiteral(916)))
916 5259 0
871 5259 0
871 916 5258 0
c (( - aux1303 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5261 0
-886 -5261 0
-886 -901 -5262 0
c (0<=( - aux1303 + SATLiteral(886) + SATLiteral(901)))
901 5262 0
886 5262 0
886 901 5261 0
c ((aux1303 - aux1304 + SATLiteral(856))<=0)
5261 -5264 0
5262 -5265 0
-856 -5264 0
-856 5261 -5265 0
-856 5262 -5267 0
c (0<=(aux1303 - aux1304 + SATLiteral(856)))
-5262 5267 0
-5261 5265 0
856 5267 0
856 -5262 5265 0
856 -5261 5264 0
c ((aux1300 + aux1302 - aux1305)<=0)
5258 -5269 0
5259 -5270 0
5252 -5269 0
5252 5258 -5270 0
5252 5259 -5272 0
5253 -5270 0
5253 5258 -5272 0
5253 5259 -5274 0
c (0<=(aux1300 + aux1302 - aux1305))
-5259 5274 0
-5258 5272 0
-5253 5274 0
-5253 -5259 5272 0
-5253 -5258 5270 0
-5252 5272 0
-5252 -5259 5270 0
-5252 -5258 5269 0
c (( - aux1306 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5276 0
825 -5276 0
825 945 -5277 0
c (0<=( - aux1306 + SATLiteral(-825) + SATLiteral(-945)))
-945 5277 0
-825 5277 0
-825 -945 5276 0
c (( - aux1307 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5279 0
840 -5279 0
840 930 -5280 0
c (0<=( - aux1307 + SATLiteral(-840) + SATLiteral(-930)))
-930 5280 0
-840 5280 0
-840 -930 5279 0
c (( - aux1308 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5282 0
870 -5282 0
870 915 -5283 0
c (0<=( - aux1308 + SATLiteral(-870) + SATLiteral(-915)))
-915 5283 0
-870 5283 0
-870 -915 5282 0
c (( - aux1309 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5285 0
885 -5285 0
885 900 -5286 0
c (0<=( - aux1309 + SATLiteral(-885) + SATLiteral(-900)))
-900 5286 0
-885 5286 0
-885 -900 5285 0
c ((aux1309 - aux1310 + SATLiteral(-855))<=0)
5285 -5288 0
5286 -5289 0
855 -5288 0
855 5285 -5289 0
855 5286 -5291 0
c (0<=(aux1309 - aux1310 + SATLiteral(-855)))
-5286 5291 0
-5285 5289 0
-855 5291 0
-855 -5286 5289 0
-855 -5285 5288 0
c ((aux1306 + aux1308 - aux1311)<=0)
5282 -5293 0
5283 -5294 0
5276 -5293 0
5276 5282 -5294 0
5276 5283 -5296 0
5277 -5294 0
5277 5282 -5296 0
5277 5283 -5298 0
c (0<=(aux1306 + aux1308 - aux1311))
-5283 5298 0
-5282 5296 0
-5277 5298 0
-5277 -5283 5296 0
-5277 -5282 5294 0
-5276 5296 0
-5276 -5283 5294 0
-5276 -5282 5293 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1312)<=0)
-1067 -5300 0
-947 -5300 0
-947 -1067 -5301 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1312))
1067 5301 0
947 5301 0
947 1067 5300 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1313)<=0)
-1052 -5303 0
-962 -5303 0
-962 -1052 -5304 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1313))
1052 5304 0
962 5304 0
962 1052 5303 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1314)<=0)
-1037 -5306 0
-992 -5306 0
-992 -1037 -5307 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1314))
1037 5307 0
992 5307 0
992 1037 5306 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1315)<=0)
-1022 -5309 0
-1007 -5309 0
-1007 -1022 -5310 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1315))
1022 5310 0
1007 5310 0
1007 1022 5309 0
c ((SATLiteral(977) + aux1315 - aux1316)<=0)
5309 -5312 0
5310 -5313 0
-977 -5312 0
-977 5309 -5313 0
-977 5310 -5315 0
c (0<=(SATLiteral(977) + aux1315 - aux1316))
-5310 5315 0
-5309 5313 0
977 5315 0
977 -5310 5313 0
977 -5309 5312 0
c ((aux1312 + aux1314 - aux1317)<=0)
5306 -5317 0
5307 -5318 0
5300 -5317 0
5300 5306 -5318 0
5300 5307 -5320 0
5301 -5318 0
5301 5306 -5320 0
5301 5307 -5322 0
c (0<=(aux1312 + aux1314 - aux1317))
-5307 5322 0
-5306 5320 0
-5301 5322 0
-5301 -5307 5320 0
-5301 -5306 5318 0
-5300 5320 0
-5300 -5307 5318 0
-5300 -5306 5317 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1318)<=0)
-1069 -5324 0
-949 -5324 0
-949 -1069 -5325 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1318))
1069 5325 0
949 5325 0
949 1069 5324 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1319)<=0)
-1054 -5327 0
-964 -5327 0
-964 -1054 -5328 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1319))
1054 5328 0
964 5328 0
964 1054 5327 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1320)<=0)
-1039 -5330 0
-994 -5330 0
-994 -1039 -5331 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1320))
1039 5331 0
994 5331 0
994 1039 5330 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1321)<=0)
-1024 -5333 0
-1009 -5333 0
-1009 -1024 -5334 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1321))
1024 5334 0
1009 5334 0
1009 1024 5333 0
c ((SATLiteral(979) + aux1321 - aux1322)<=0)
5333 -5336 0
5334 -5337 0
-979 -5336 0
-979 5333 -5337 0
-979 5334 -5339 0
c (0<=(SATLiteral(979) + aux1321 - aux1322))
-5334 5339 0
-5333 5337 0
979 5339 0
979 -5334 5337 0
979 -5333 5336 0
c ((aux1318 + aux1320 - aux1323)<=0)
5330 -5341 0
5331 -5342 0
5324 -5341 0
5324 5330 -5342 0
5324 5331 -5344 0
5325 -5342 0
5325 5330 -5344 0
5325 5331 -5346 0
c (0<=(aux1318 + aux1320 - aux1323))
-5331 5346 0
-5330 5344 0
-5325 5346 0
-5325 -5331 5344 0
-5325 -5330 5342 0
-5324 5344 0
-5324 -5331 5342 0
-5324 -5330 5341 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1324)<=0)
-1071 -5348 0
-951 -5348 0
-951 -1071 -5349 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1324))
1071 5349 0
951 5349 0
951 1071 5348 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1325)<=0)
-1056 -5351 0
-966 -5351 0
-966 -1056 -5352 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1325))
1056 5352 0
966 5352 0
966 1056 5351 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1326)<=0)
-1041 -5354 0
-996 -5354 0
-996 -1041 -5355 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1326))
1041 5355 0
996 5355 0
996 1041 5354 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1327)<=0)
-1026 -5357 0
-1011 -5357 0
-1011 -1026 -5358 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1327))
1026 5358 0
1011 5358 0
1011 1026 5357 0
c ((SATLiteral(981) + aux1327 - aux1328)<=0)
5357 -5360 0
5358 -5361 0
-981 -5360 0
-981 5357 -5361 0
-981 5358 -5363 0
c (0<=(SATLiteral(981) + aux1327 - aux1328))
-5358 5363 0
-5357 5361 0
981 5363 0
981 -5358 5361 0
981 -5357 5360 0
c ((aux1324 + aux1326 - aux1329)<=0)
5354 -5365 0
5355 -5366 0
5348 -5365 0
5348 5354 -5366 0
5348 5355 -5368 0
5349 -5366 0
5349 5354 -5368 0
5349 5355 -5370 0
c (0<=(aux1324 + aux1326 - aux1329))
-5355 5370 0
-5354 5368 0
-5349 5370 0
-5349 -5355 5368 0
-5349 -5354 5366 0
-5348 5368 0
-5348 -5355 5366 0
-5348 -5354 5365 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1330)<=0)
-1073 -5372 0
-953 -5372 0
-953 -1073 -5373 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1330))
1073 5373 0
953 5373 0
953 1073 5372 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1331)<=0)
-1058 -5375 0
-968 -5375 0
-968 -1058 -5376 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1331))
1058 5376 0
968 5376 0
968 1058 5375 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1332)<=0)
-1043 -5378 0
-998 -5378 0
-998 -1043 -5379 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1332))
1043 5379 0
998 5379 0
998 1043 5378 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1333)<=0)
-1028 -5381 0
-1013 -5381 0
-1013 -1028 -5382 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1333))
1028 5382 0
1013 5382 0
1013 1028 5381 0
c ((SATLiteral(983) + aux1333 - aux1334)<=0)
5381 -5384 0
5382 -5385 0
-983 -5384 0
-983 5381 -5385 0
-983 5382 -5387 0
c (0<=(SATLiteral(983) + aux1333 - aux1334))
-5382 5387 0
-5381 5385 0
983 5387 0
983 -5382 5385 0
983 -5381 5384 0
c ((aux1330 + aux1332 - aux1335)<=0)
5378 -5389 0
5379 -5390 0
5372 -5389 0
5372 5378 -5390 0
5372 5379 -5392 0
5373 -5390 0
5373 5378 -5392 0
5373 5379 -5394 0
c (0<=(aux1330 + aux1332 - aux1335))
-5379 5394 0
-5378 5392 0
-5373 5394 0
-5373 -5379 5392 0
-5373 -5378 5390 0
-5372 5392 0
-5372 -5379 5390 0
-5372 -5378 5389 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1336)<=0)
-1075 -5396 0
-955 -5396 0
-955 -1075 -5397 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1336))
1075 5397 0
955 5397 0
955 1075 5396 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1337)<=0)
-1060 -5399 0
-970 -5399 0
-970 -1060 -5400 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1337))
1060 5400 0
970 5400 0
970 1060 5399 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1338)<=0)
-1045 -5402 0
-1000 -5402 0
-1000 -1045 -5403 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1338))
1045 5403 0
1000 5403 0
1000 1045 5402 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1339)<=0)
-1030 -5405 0
-1015 -5405 0
-1015 -1030 -5406 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1339))
1030 5406 0
1015 5406 0
1015 1030 5405 0
c ((SATLiteral(985) + aux1339 - aux1340)<=0)
5405 -5408 0
5406 -5409 0
-985 -5408 0
-985 5405 -5409 0
-985 5406 -5411 0
c (0<=(SATLiteral(985) + aux1339 - aux1340))
-5406 5411 0
-5405 5409 0
985 5411 0
985 -5406 5409 0
985 -5405 5408 0
c ((aux1336 + aux1338 - aux1341)<=0)
5402 -5413 0
5403 -5414 0
5396 -5413 0
5396 5402 -5414 0
5396 5403 -5416 0
5397 -5414 0
5397 5402 -5416 0
5397 5403 -5418 0
c (0<=(aux1336 + aux1338 - aux1341))
-5403 5418 0
-5402 5416 0
-5397 5418 0
-5397 -5403 5416 0
-5397 -5402 5414 0
-5396 5416 0
-5396 -5403 5414 0
-5396 -5402 5413 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1342)<=0)
-1077 -5420 0
-957 -5420 0
-957 -1077 -5421 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1342))
1077 5421 0
957 5421 0
957 1077 5420 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1343)<=0)
-1062 -5423 0
-972 -5423 0
-972 -1062 -5424 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1343))
1062 5424 0
972 5424 0
972 1062 5423 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1344)<=0)
-1047 -5426 0
-1002 -5426 0
-1002 -1047 -5427 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1344))
1047 5427 0
1002 5427 0
1002 1047 5426 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1345)<=0)
-1032 -5429 0
-1017 -5429 0
-1017 -1032 -5430 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1345))
1032 5430 0
1017 5430 0
1017 1032 5429 0
c ((SATLiteral(987) + aux1345 - aux1346)<=0)
5429 -5432 0
5430 -5433 0
-987 -5432 0
-987 5429 -5433 0
-987 5430 -5435 0
c (0<=(SATLiteral(987) + aux1345 - aux1346))
-5430 5435 0
-5429 5433 0
987 5435 0
987 -5430 5433 0
987 -5429 5432 0
c ((aux1342 + aux1344 - aux1347)<=0)
5426 -5437 0
5427 -5438 0
5420 -5437 0
5420 5426 -5438 0
5420 5427 -5440 0
5421 -5438 0
5421 5426 -5440 0
5421 5427 -5442 0
c (0<=(aux1342 + aux1344 - aux1347))
-5427 5442 0
-5426 5440 0
-5421 5442 0
-5421 -5427 5440 0
-5421 -5426 5438 0
-5420 5440 0
-5420 -5427 5438 0
-5420 -5426 5437 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1348)<=0)
-1079 -5444 0
-959 -5444 0
-959 -1079 -5445 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1348))
1079 5445 0
959 5445 0
959 1079 5444 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1349)<=0)
-1064 -5447 0
-974 -5447 0
-974 -1064 -5448 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1349))
1064 5448 0
974 5448 0
974 1064 5447 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1350)<=0)
-1049 -5450 0
-1004 -5450 0
-1004 -1049 -5451 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1350))
1049 5451 0
1004 5451 0
1004 1049 5450 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1351)<=0)
-1034 -5453 0
-1019 -5453 0
-1019 -1034 -5454 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1351))
1034 5454 0
1019 5454 0
1019 1034 5453 0
c ((SATLiteral(989) + aux1351 - aux1352)<=0)
5453 -5456 0
5454 -5457 0
-989 -5456 0
-989 5453 -5457 0
-989 5454 -5459 0
c (0<=(SATLiteral(989) + aux1351 - aux1352))
-5454 5459 0
-5453 5457 0
989 5459 0
989 -5454 5457 0
989 -5453 5456 0
c ((aux1348 + aux1350 - aux1353)<=0)
5450 -5461 0
5451 -5462 0
5444 -5461 0
5444 5450 -5462 0
5444 5451 -5464 0
5445 -5462 0
5445 5450 -5464 0
5445 5451 -5466 0
c (0<=(aux1348 + aux1350 - aux1353))
-5451 5466 0
-5450 5464 0
-5445 5466 0
-5445 -5451 5464 0
-5445 -5450 5462 0
-5444 5464 0
-5444 -5451 5462 0
-5444 -5450 5461 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1354)<=0)
-1081 -5468 0
-961 -5468 0
-961 -1081 -5469 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1354))
1081 5469 0
961 5469 0
961 1081 5468 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1355)<=0)
-1066 -5471 0
-976 -5471 0
-976 -1066 -5472 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1355))
1066 5472 0
976 5472 0
976 1066 5471 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1356)<=0)
-1051 -5474 0
-1006 -5474 0
-1006 -1051 -5475 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1356))
1051 5475 0
1006 5475 0
1006 1051 5474 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1357)<=0)
-1036 -5477 0
-1021 -5477 0
-1021 -1036 -5478 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1357))
1036 5478 0
1021 5478 0
1021 1036 5477 0
c ((SATLiteral(991) + aux1357 - aux1358)<=0)
5477 -5480 0
5478 -5481 0
-991 -5480 0
-991 5477 -5481 0
-991 5478 -5483 0
c (0<=(SATLiteral(991) + aux1357 - aux1358))
-5478 5483 0
-5477 5481 0
991 5483 0
991 -5478 5481 0
991 -5477 5480 0
c ((aux1354 + aux1356 - aux1359)<=0)
5474 -5485 0
5475 -5486 0
5468 -5485 0
5468 5474 -5486 0
5468 5475 -5488 0
5469 -5486 0
5469 5474 -5488 0
5469 5475 -5490 0
c (0<=(aux1354 + aux1356 - aux1359))
-5475 5490 0
-5474 5488 0
-5469 5490 0
-5469 -5475 5488 0
-5469 -5474 5486 0
-5468 5488 0
-5468 -5475 5486 0
-5468 -5474 5485 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1360)<=0)
1080 -5492 0
960 -5492 0
960 1080 -5493 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1360))
-1080 5493 0
-960 5493 0
-960 -1080 5492 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1361)<=0)
1065 -5495 0
975 -5495 0
975 1065 -5496 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1361))
-1065 5496 0
-975 5496 0
-975 -1065 5495 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1362)<=0)
1050 -5498 0
1005 -5498 0
1005 1050 -5499 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1362))
-1050 5499 0
-1005 5499 0
-1005 -1050 5498 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1363)<=0)
1035 -5501 0
1020 -5501 0
1020 1035 -5502 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1363))
-1035 5502 0
-1020 5502 0
-1020 -1035 5501 0
c ((SATLiteral(-990) + aux1363 - aux1364)<=0)
5501 -5504 0
5502 -5505 0
990 -5504 0
990 5501 -5505 0
990 5502 -5507 0
c (0<=(SATLiteral(-990) + aux1363 - aux1364))
-5502 5507 0
-5501 5505 0
-990 5507 0
-990 -5502 5505 0
-990 -5501 5504 0
c ((aux1360 + aux1362 - aux1365)<=0)
5498 -5509 0
5499 -5510 0
5492 -5509 0
5492 5498 -5510 0
5492 5499 -5512 0
5493 -5510 0
5493 5498 -5512 0
5493 5499 -5514 0
c (0<=(aux1360 + aux1362 - aux1365))
-5499 5514 0
-5498 5512 0
-5493 5514 0
-5493 -5499 5512 0
-5493 -5498 5510 0
-5492 5512 0
-5492 -5499 5510 0
-5492 -5498 5509 0
c (( - aux1366 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5516 0
-1082 -5516 0
-1082 -1202 -5517 0
c (0<=( - aux1366 + SATLiteral(1082) + SATLiteral(1202)))
1202 5517 0
1082 5517 0
1082 1202 5516 0
c (( - aux1367 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5519 0
-1097 -5519 0
-1097 -1187 -5520 0
c (0<=( - aux1367 + SATLiteral(1097) + SATLiteral(1187)))
1187 5520 0
1097 5520 0
1097 1187 5519 0
c (( - aux1368 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5522 0
-1127 -5522 0
-1127 -1172 -5523 0
c (0<=( - aux1368 + SATLiteral(1127) + SATLiteral(1172)))
1172 5523 0
1127 5523 0
1127 1172 5522 0
c (( - aux1369 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5525 0
-1142 -5525 0
-1142 -1157 -5526 0
c (0<=( - aux1369 + SATLiteral(1142) + SATLiteral(1157)))
1157 5526 0
1142 5526 0
1142 1157 5525 0
c ((aux1369 - aux1370 + SATLiteral(1112))<=0)
5525 -5528 0
5526 -5529 0
-1112 -5528 0
-1112 5525 -5529 0
-1112 5526 -5531 0
c (0<=(aux1369 - aux1370 + SATLiteral(1112)))
-5526 5531 0
-5525 5529 0
1112 5531 0
1112 -5526 5529 0
1112 -5525 5528 0
c ((aux1366 + aux1368 - aux1371)<=0)
5522 -5533 0
5523 -5534 0
5516 -5533 0
5516 5522 -5534 0
5516 5523 -5536 0
5517 -5534 0
5517 5522 -5536 0
5517 5523 -5538 0
c (0<=(aux1366 + aux1368 - aux1371))
-5523 5538 0
-5522 5536 0
-5517 5538 0
-5517 -5523 5536 0
-5517 -5522 5534 0
-5516 5536 0
-5516 -5523 5534 0
-5516 -5522 5533 0
c (( - aux1372 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5540 0
-1084 -5540 0
-1084 -1204 -5541 0
c (0<=( - aux1372 + SATLiteral(1084) + SATLiteral(1204)))
1204 5541 0
1084 5541 0
1084 1204 5540 0
c (( - aux1373 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5543 0
-1099 -5543 0
-1099 -1189 -5544 0
c (0<=( - aux1373 + SATLiteral(1099) + SATLiteral(1189)))
1189 5544 0
1099 5544 0
1099 1189 5543 0
c (( - aux1374 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5546 0
-1129 -5546 0
-1129 -1174 -5547 0
c (0<=( - aux1374 + SATLiteral(1129) + SATLiteral(1174)))
1174 5547 0
1129 5547 0
1129 1174 5546 0
c (( - aux1375 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5549 0
-1144 -5549 0
-1144 -1159 -5550 0
c (0<=( - aux1375 + SATLiteral(1144) + SATLiteral(1159)))
1159 5550 0
1144 5550 0
1144 1159 5549 0
c ((aux1375 - aux1376 + SATLiteral(1114))<=0)
5549 -5552 0
5550 -5553 0
-1114 -5552 0
-1114 5549 -5553 0
-1114 5550 -5555 0
c (0<=(aux1375 - aux1376 + SATLiteral(1114)))
-5550 5555 0
-5549 5553 0
1114 5555 0
1114 -5550 5553 0
1114 -5549 5552 0
c ((aux1372 + aux1374 - aux1377)<=0)
5546 -5557 0
5547 -5558 0
5540 -5557 0
5540 5546 -5558 0
5540 5547 -5560 0
5541 -5558 0
5541 5546 -5560 0
5541 5547 -5562 0
c (0<=(aux1372 + aux1374 - aux1377))
-5547 5562 0
-5546 5560 0
-5541 5562 0
-5541 -5547 5560 0
-5541 -5546 5558 0
-5540 5560 0
-5540 -5547 5558 0
-5540 -5546 5557 0
c (( - aux1378 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5564 0
-1086 -5564 0
-1086 -1206 -5565 0
c (0<=( - aux1378 + SATLiteral(1086) + SATLiteral(1206)))
1206 5565 0
1086 5565 0
1086 1206 5564 0
c (( - aux1379 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5567 0
-1101 -5567 0
-1101 -1191 -5568 0
c (0<=( - aux1379 + SATLiteral(1101) + SATLiteral(1191)))
1191 5568 0
1101 5568 0
1101 1191 5567 0
c (( - aux1380 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5570 0
-1131 -5570 0
-1131 -1176 -5571 0
c (0<=( - aux1380 + SATLiteral(1131) + SATLiteral(1176)))
1176 5571 0
1131 5571 0
1131 1176 5570 0
c (( - aux1381 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5573 0
-1146 -5573 0
-1146 -1161 -5574 0
c (0<=( - aux1381 + SATLiteral(1146) + SATLiteral(1161)))
1161 5574 0
1146 5574 0
1146 1161 5573 0
c ((aux1381 - aux1382 + SATLiteral(1116))<=0)
5573 -5576 0
5574 -5577 0
-1116 -5576 0
-1116 5573 -5577 0
-1116 5574 -5579 0
c (0<=(aux1381 - aux1382 + SATLiteral(1116)))
-5574 5579 0
-5573 5577 0
1116 5579 0
1116 -5574 5577 0
1116 -5573 5576 0
c ((aux1378 + aux1380 - aux1383)<=0)
5570 -5581 0
5571 -5582 0
5564 -5581 0
5564 5570 -5582 0
5564 5571 -5584 0
5565 -5582 0
5565 5570 -5584 0
5565 5571 -5586 0
c (0<=(aux1378 + aux1380 - aux1383))
-5571 5586 0
-5570 5584 0
-5565 5586 0
-5565 -5571 5584 0
-5565 -5570 5582 0
-5564 5584 0
-5564 -5571 5582 0
-5564 -5570 5581 0
c (( - aux1384 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5588 0
-1088 -5588 0
-1088 -1208 -5589 0
c (0<=( - aux1384 + SATLiteral(1088) + SATLiteral(1208)))
1208 5589 0
1088 5589 0
1088 1208 5588 0
c (( - aux1385 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5591 0
-1103 -5591 0
-1103 -1193 -5592 0
c (0<=( - aux1385 + SATLiteral(1103) + SATLiteral(1193)))
1193 5592 0
1103 5592 0
1103 1193 5591 0
c (( - aux1386 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5594 0
-1133 -5594 0
-1133 -1178 -5595 0
c (0<=( - aux1386 + SATLiteral(1133) + SATLiteral(1178)))
1178 5595 0
1133 5595 0
1133 1178 5594 0
c (( - aux1387 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5597 0
-1148 -5597 0
-1148 -1163 -5598 0
c (0<=( - aux1387 + SATLiteral(1148) + SATLiteral(1163)))
1163 5598 0
1148 5598 0
1148 1163 5597 0
c ((aux1387 - aux1388 + SATLiteral(1118))<=0)
5597 -5600 0
5598 -5601 0
-1118 -5600 0
-1118 5597 -5601 0
-1118 5598 -5603 0
c (0<=(aux1387 - aux1388 + SATLiteral(1118)))
-5598 5603 0
-5597 5601 0
1118 5603 0
1118 -5598 5601 0
1118 -5597 5600 0
c ((aux1384 + aux1386 - aux1389)<=0)
5594 -5605 0
5595 -5606 0
5588 -5605 0
5588 5594 -5606 0
5588 5595 -5608 0
5589 -5606 0
5589 5594 -5608 0
5589 5595 -5610 0
c (0<=(aux1384 + aux1386 - aux1389))
-5595 5610 0
-5594 5608 0
-5589 5610 0
-5589 -5595 5608 0
-5589 -5594 5606 0
-5588 5608 0
-5588 -5595 5606 0
-5588 -5594 5605 0
c (( - aux1390 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5612 0
-1090 -5612 0
-1090 -1210 -5613 0
c (0<=( - aux1390 + SATLiteral(1090) + SATLiteral(1210)))
1210 5613 0
1090 5613 0
1090 1210 5612 0
c (( - aux1391 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5615 0
-1105 -5615 0
-1105 -1195 -5616 0
c (0<=( - aux1391 + SATLiteral(1105) + SATLiteral(1195)))
1195 5616 0
1105 5616 0
1105 1195 5615 0
c (( - aux1392 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5618 0
-1135 -5618 0
-1135 -1180 -5619 0
c (0<=( - aux1392 + SATLiteral(1135) + SATLiteral(1180)))
1180 5619 0
1135 5619 0
1135 1180 5618 0
c (( - aux1393 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5621 0
-1150 -5621 0
-1150 -1165 -5622 0
c (0<=( - aux1393 + SATLiteral(1150) + SATLiteral(1165)))
1165 5622 0
1150 5622 0
1150 1165 5621 0
c ((aux1393 - aux1394 + SATLiteral(1120))<=0)
5621 -5624 0
5622 -5625 0
-1120 -5624 0
-1120 5621 -5625 0
-1120 5622 -5627 0
c (0<=(aux1393 - aux1394 + SATLiteral(1120)))
-5622 5627 0
-5621 5625 0
1120 5627 0
1120 -5622 5625 0
1120 -5621 5624 0
c ((aux1390 + aux1392 - aux1395)<=0)
5618 -5629 0
5619 -5630 0
5612 -5629 0
5612 5618 -5630 0
5612 5619 -5632 0
5613 -5630 0
5613 5618 -5632 0
5613 5619 -5634 0
c (0<=(aux1390 + aux1392 - aux1395))
-5619 5634 0
-5618 5632 0
-5613 5634 0
-5613 -5619 5632 0
-5613 -5618 5630 0
-5612 5632 0
-5612 -5619 5630 0
-5612 -5618 5629 0
c (( - aux1396 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5636 0
-1092 -5636 0
-1092 -1212 -5637 0
c (0<=( - aux1396 + SATLiteral(1092) + SATLiteral(1212)))
1212 5637 0
1092 5637 0
1092 1212 5636 0
c (( - aux1397 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5639 0
-1107 -5639 0
-1107 -1197 -5640 0
c (0<=( - aux1397 + SATLiteral(1107) + SATLiteral(1197)))
1197 5640 0
1107 5640 0
1107 1197 5639 0
c (( - aux1398 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5642 0
-1137 -5642 0
-1137 -1182 -5643 0
c (0<=( - aux1398 + SATLiteral(1137) + SATLiteral(1182)))
1182 5643 0
1137 5643 0
1137 1182 5642 0
c (( - aux1399 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5645 0
-1152 -5645 0
-1152 -1167 -5646 0
c (0<=( - aux1399 + SATLiteral(1152) + SATLiteral(1167)))
1167 5646 0
1152 5646 0
1152 1167 5645 0
c ((aux1399 - aux1400 + SATLiteral(1122))<=0)
5645 -5648 0
5646 -5649 0
-1122 -5648 0
-1122 5645 -5649 0
-1122 5646 -5651 0
c (0<=(aux1399 - aux1400 + SATLiteral(1122)))
-5646 5651 0
-5645 5649 0
1122 5651 0
1122 -5646 5649 0
1122 -5645 5648 0
c ((aux1396 + aux1398 - aux1401)<=0)
5642 -5653 0
5643 -5654 0
5636 -5653 0
5636 5642 -5654 0
5636 5643 -5656 0
5637 -5654 0
5637 5642 -5656 0
5637 5643 -5658 0
c (0<=(aux1396 + aux1398 - aux1401))
-5643 5658 0
-5642 5656 0
-5637 5658 0
-5637 -5643 5656 0
-5637 -5642 5654 0
-5636 5656 0
-5636 -5643 5654 0
-5636 -5642 5653 0
c (( - aux1402 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5660 0
-1094 -5660 0
-1094 -1214 -5661 0
c (0<=( - aux1402 + SATLiteral(1094) + SATLiteral(1214)))
1214 5661 0
1094 5661 0
1094 1214 5660 0
c (( - aux1403 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5663 0
-1109 -5663 0
-1109 -1199 -5664 0
c (0<=( - aux1403 + SATLiteral(1109) + SATLiteral(1199)))
1199 5664 0
1109 5664 0
1109 1199 5663 0
c (( - aux1404 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5666 0
-1139 -5666 0
-1139 -1184 -5667 0
c (0<=( - aux1404 + SATLiteral(1139) + SATLiteral(1184)))
1184 5667 0
1139 5667 0
1139 1184 5666 0
c (( - aux1405 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5669 0
-1154 -5669 0
-1154 -1169 -5670 0
c (0<=( - aux1405 + SATLiteral(1154) + SATLiteral(1169)))
1169 5670 0
1154 5670 0
1154 1169 5669 0
c ((aux1405 - aux1406 + SATLiteral(1124))<=0)
5669 -5672 0
5670 -5673 0
-1124 -5672 0
-1124 5669 -5673 0
-1124 5670 -5675 0
c (0<=(aux1405 - aux1406 + SATLiteral(1124)))
-5670 5675 0
-5669 5673 0
1124 5675 0
1124 -5670 5673 0
1124 -5669 5672 0
c ((aux1402 + aux1404 - aux1407)<=0)
5666 -5677 0
5667 -5678 0
5660 -5677 0
5660 5666 -5678 0
5660 5667 -5680 0
5661 -5678 0
5661 5666 -5680 0
5661 5667 -5682 0
c (0<=(aux1402 + aux1404 - aux1407))
-5667 5682 0
-5666 5680 0
-5661 5682 0
-5661 -5667 5680 0
-5661 -5666 5678 0
-5660 5680 0
-5660 -5667 5678 0
-5660 -5666 5677 0
c (( - aux1408 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5684 0
-1096 -5684 0
-1096 -1216 -5685 0
c (0<=( - aux1408 + SATLiteral(1096) + SATLiteral(1216)))
1216 5685 0
1096 5685 0
1096 1216 5684 0
c (( - aux1409 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5687 0
-1111 -5687 0
-1111 -1201 -5688 0
c (0<=( - aux1409 + SATLiteral(1111) + SATLiteral(1201)))
1201 5688 0
1111 5688 0
1111 1201 5687 0
c (( - aux1410 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5690 0
-1141 -5690 0
-1141 -1186 -5691 0
c (0<=( - aux1410 + SATLiteral(1141) + SATLiteral(1186)))
1186 5691 0
1141 5691 0
1141 1186 5690 0
c (( - aux1411 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5693 0
-1156 -5693 0
-1156 -1171 -5694 0
c (0<=( - aux1411 + SATLiteral(1156) + SATLiteral(1171)))
1171 5694 0
1156 5694 0
1156 1171 5693 0
c ((aux1411 - aux1412 + SATLiteral(1126))<=0)
5693 -5696 0
5694 -5697 0
-1126 -5696 0
-1126 5693 -5697 0
-1126 5694 -5699 0
c (0<=(aux1411 - aux1412 + SATLiteral(1126)))
-5694 5699 0
-5693 5697 0
1126 5699 0
1126 -5694 5697 0
1126 -5693 5696 0
c ((aux1408 + aux1410 - aux1413)<=0)
5690 -5701 0
5691 -5702 0
5684 -5701 0
5684 5690 -5702 0
5684 5691 -5704 0
5685 -5702 0
5685 5690 -5704 0
5685 5691 -5706 0
c (0<=(aux1408 + aux1410 - aux1413))
-5691 5706 0
-5690 5704 0
-5685 5706 0
-5685 -5691 5704 0
-5685 -5690 5702 0
-5684 5704 0
-5684 -5691 5702 0
-5684 -5690 5701 0
c (( - aux1414 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5708 0
1095 -5708 0
1095 1215 -5709 0
c (0<=( - aux1414 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5709 0
-1095 5709 0
-1095 -1215 5708 0
c (( - aux1415 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5711 0
1110 -5711 0
1110 1200 -5712 0
c (0<=( - aux1415 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5712 0
-1110 5712 0
-1110 -1200 5711 0
c (( - aux1416 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5714 0
1140 -5714 0
1140 1185 -5715 0
c (0<=( - aux1416 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5715 0
-1140 5715 0
-1140 -1185 5714 0
c (( - aux1417 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5717 0
1155 -5717 0
1155 1170 -5718 0
c (0<=( - aux1417 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5718 0
-1155 5718 0
-1155 -1170 5717 0
c ((aux1417 - aux1418 + SATLiteral(-1125))<=0)
5717 -5720 0
5718 -5721 0
1125 -5720 0
1125 5717 -5721 0
1125 5718 -5723 0
c (0<=(aux1417 - aux1418 + SATLiteral(-1125)))
-5718 5723 0
-5717 5721 0
-1125 5723 0
-1125 -5718 5721 0
-1125 -5717 5720 0
c ((aux1414 + aux1416 - aux1419)<=0)
5714 -5725 0
5715 -5726 0
5708 -5725 0
5708 5714 -5726 0
5708 5715 -5728 0
5709 -5726 0
5709 5714 -5728 0
5709 5715 -5730 0
c (0<=(aux1414 + aux1416 - aux1419))
-5715 5730 0
-5714 5728 0
-5709 5730 0
-5709 -5715 5728 0
-5709 -5714 5726 0
-5708 5728 0
-5708 -5715 5726 0
-5708 -5714 5725 0
c ((SATLiteral(272) - aux1420 + SATLiteral(167))<=0)
-167 -5732 0
-272 -5732 0
-272 -167 -5733 0
c (0<=(SATLiteral(272) - aux1420 + SATLiteral(167)))
167 5733 0
272 5733 0
272 167 5732 0
c ((SATLiteral(287) - aux1421 + SATLiteral(152))<=0)
-152 -5735 0
-287 -5735 0
-287 -152 -5736 0
c (0<=(SATLiteral(287) - aux1421 + SATLiteral(152)))
152 5736 0
287 5736 0
287 152 5735 0
c ((SATLiteral(2) - aux1422 + SATLiteral(137))<=0)
-137 -5738 0
-2 -5738 0
-2 -137 -5739 0
c (0<=(SATLiteral(2) - aux1422 + SATLiteral(137)))
137 5739 0
2 5739 0
2 137 5738 0
c ((SATLiteral(17) + SATLiteral(32) - aux1423)<=0)
-32 -5741 0
-17 -5741 0
-17 -32 -5742 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1423))
32 5742 0
17 5742 0
17 32 5741 0
c ((SATLiteral(302) + aux1423 - aux1424)<=0)
5741 -5744 0
5742 -5745 0
-302 -5744 0
-302 5741 -5745 0
-302 5742 -5747 0
c (0<=(SATLiteral(302) + aux1423 - aux1424))
-5742 5747 0
-5741 5745 0
302 5747 0
302 -5742 5745 0
302 -5741 5744 0
c ((aux1420 + aux1422 - aux1425)<=0)
5738 -5749 0
5739 -5750 0
5732 -5749 0
5732 5738 -5750 0
5732 5739 -5752 0
5733 -5750 0
5733 5738 -5752 0
5733 5739 -5754 0
c (0<=(aux1420 + aux1422 - aux1425))
-5739 5754 0
-5738 5752 0
-5733 5754 0
-5733 -5739 5752 0
-5733 -5738 5750 0
-5732 5752 0
-5732 -5739 5750 0
-5732 -5738 5749 0
c ((SATLiteral(274) - aux1426 + SATLiteral(169))<=0)
-169 -5756 0
-274 -5756 0
-274 -169 -5757 0
c (0<=(SATLiteral(274) - aux1426 + SATLiteral(169)))
169 5757 0
274 5757 0
274 169 5756 0
c ((SATLiteral(288) - aux1427 + SATLiteral(154))<=0)
-154 -5759 0
-288 -5759 0
-288 -154 -5760 0
c (0<=(SATLiteral(288) - aux1427 + SATLiteral(154)))
154 5760 0
288 5760 0
288 154 5759 0
c ((SATLiteral(4) - aux1428 + SATLiteral(139))<=0)
-139 -5762 0
-4 -5762 0
-4 -139 -5763 0
c (0<=(SATLiteral(4) - aux1428 + SATLiteral(139)))
139 5763 0
4 5763 0
4 139 5762 0
c ((SATLiteral(19) + SATLiteral(34) - aux1429)<=0)
-34 -5765 0
-19 -5765 0
-19 -34 -5766 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1429))
34 5766 0
19 5766 0
19 34 5765 0
c ((SATLiteral(304) + aux1429 - aux1430)<=0)
5765 -5768 0
5766 -5769 0
-304 -5768 0
-304 5765 -5769 0
-304 5766 -5771 0
c (0<=(SATLiteral(304) + aux1429 - aux1430))
-5766 5771 0
-5765 5769 0
304 5771 0
304 -5766 5769 0
304 -5765 5768 0
c ((aux1426 + aux1428 - aux1431)<=0)
5762 -5773 0
5763 -5774 0
5756 -5773 0
5756 5762 -5774 0
5756 5763 -5776 0
5757 -5774 0
5757 5762 -5776 0
5757 5763 -5778 0
c (0<=(aux1426 + aux1428 - aux1431))
-5763 5778 0
-5762 5776 0
-5757 5778 0
-5757 -5763 5776 0
-5757 -5762 5774 0
-5756 5776 0
-5756 -5763 5774 0
-5756 -5762 5773 0
c ((SATLiteral(276) - aux1432 + SATLiteral(171))<=0)
-171 -5780 0
-276 -5780 0
-276 -171 -5781 0
c (0<=(SATLiteral(276) - aux1432 + SATLiteral(171)))
171 5781 0
276 5781 0
276 171 5780 0
c ((SATLiteral(289) - aux1433 + SATLiteral(156))<=0)
-156 -5783 0
-289 -5783 0
-289 -156 -5784 0
c (0<=(SATLiteral(289) - aux1433 + SATLiteral(156)))
156 5784 0
289 5784 0
289 156 5783 0
c ((SATLiteral(6) - aux1434 + SATLiteral(141))<=0)
-141 -5786 0
-6 -5786 0
-6 -141 -5787 0
c (0<=(SATLiteral(6) - aux1434 + SATLiteral(141)))
141 5787 0
6 5787 0
6 141 5786 0
c ((SATLiteral(21) + SATLiteral(36) - aux1435)<=0)
-36 -5789 0
-21 -5789 0
-21 -36 -5790 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1435))
36 5790 0
21 5790 0
21 36 5789 0
c ((SATLiteral(306) + aux1435 - aux1436)<=0)
5789 -5792 0
5790 -5793 0
-306 -5792 0
-306 5789 -5793 0
-306 5790 -5795 0
c (0<=(SATLiteral(306) + aux1435 - aux1436))
-5790 5795 0
-5789 5793 0
306 5795 0
306 -5790 5793 0
306 -5789 5792 0
c ((aux1432 + aux1434 - aux1437)<=0)
5786 -5797 0
5787 -5798 0
5780 -5797 0
5780 5786 -5798 0
5780 5787 -5800 0
5781 -5798 0
5781 5786 -5800 0
5781 5787 -5802 0
c (0<=(aux1432 + aux1434 - aux1437))
-5787 5802 0
-5786 5800 0
-5781 5802 0
-5781 -5787 5800 0
-5781 -5786 5798 0
-5780 5800 0
-5780 -5787 5798 0
-5780 -5786 5797 0
c ((SATLiteral(278) - aux1438 + SATLiteral(173))<=0)
-173 -5804 0
-278 -5804 0
-278 -173 -5805 0
c (0<=(SATLiteral(278) - aux1438 + SATLiteral(173)))
173 5805 0
278 5805 0
278 173 5804 0
c ((SATLiteral(290) - aux1439 + SATLiteral(158))<=0)
-158 -5807 0
-290 -5807 0
-290 -158 -5808 0
c (0<=(SATLiteral(290) - aux1439 + SATLiteral(158)))
158 5808 0
290 5808 0
290 158 5807 0
c ((SATLiteral(8) - aux1440 + SATLiteral(143))<=0)
-143 -5810 0
-8 -5810 0
-8 -143 -5811 0
c (0<=(SATLiteral(8) - aux1440 + SATLiteral(143)))
143 5811 0
8 5811 0
8 143 5810 0
c ((SATLiteral(23) + SATLiteral(38) - aux1441)<=0)
-38 -5813 0
-23 -5813 0
-23 -38 -5814 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1441))
38 5814 0
23 5814 0
23 38 5813 0
c ((SATLiteral(308) + aux1441 - aux1442)<=0)
5813 -5816 0
5814 -5817 0
-308 -5816 0
-308 5813 -5817 0
-308 5814 -5819 0
c (0<=(SATLiteral(308) + aux1441 - aux1442))
-5814 5819 0
-5813 5817 0
308 5819 0
308 -5814 5817 0
308 -5813 5816 0
c ((aux1438 + aux1440 - aux1443)<=0)
5810 -5821 0
5811 -5822 0
5804 -5821 0
5804 5810 -5822 0
5804 5811 -5824 0
5805 -5822 0
5805 5810 -5824 0
5805 5811 -5826 0
c (0<=(aux1438 + aux1440 - aux1443))
-5811 5826 0
-5810 5824 0
-5805 5826 0
-5805 -5811 5824 0
-5805 -5810 5822 0
-5804 5824 0
-5804 -5811 5822 0
-5804 -5810 5821 0
c ((SATLiteral(280) - aux1444 + SATLiteral(175))<=0)
-175 -5828 0
-280 -5828 0
-280 -175 -5829 0
c (0<=(SATLiteral(280) - aux1444 + SATLiteral(175)))
175 5829 0
280 5829 0
280 175 5828 0
c ((SATLiteral(291) - aux1445 + SATLiteral(160))<=0)
-160 -5831 0
-291 -5831 0
-291 -160 -5832 0
c (0<=(SATLiteral(291) - aux1445 + SATLiteral(160)))
160 5832 0
291 5832 0
291 160 5831 0
c ((SATLiteral(10) - aux1446 + SATLiteral(145))<=0)
-145 -5834 0
-10 -5834 0
-10 -145 -5835 0
c (0<=(SATLiteral(10) - aux1446 + SATLiteral(145)))
145 5835 0
10 5835 0
10 145 5834 0
c ((SATLiteral(25) + SATLiteral(40) - aux1447)<=0)
-40 -5837 0
-25 -5837 0
-25 -40 -5838 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1447))
40 5838 0
25 5838 0
25 40 5837 0
c ((SATLiteral(310) + aux1447 - aux1448)<=0)
5837 -5840 0
5838 -5841 0
-310 -5840 0
-310 5837 -5841 0
-310 5838 -5843 0
c (0<=(SATLiteral(310) + aux1447 - aux1448))
-5838 5843 0
-5837 5841 0
310 5843 0
310 -5838 5841 0
310 -5837 5840 0
c ((aux1444 + aux1446 - aux1449)<=0)
5834 -5845 0
5835 -5846 0
5828 -5845 0
5828 5834 -5846 0
5828 5835 -5848 0
5829 -5846 0
5829 5834 -5848 0
5829 5835 -5850 0
c (0<=(aux1444 + aux1446 - aux1449))
-5835 5850 0
-5834 5848 0
-5829 5850 0
-5829 -5835 5848 0
-5829 -5834 5846 0
-5828 5848 0
-5828 -5835 5846 0
-5828 -5834 5845 0
c ((SATLiteral(282) - aux1450 + SATLiteral(177))<=0)
-177 -5852 0
-282 -5852 0
-282 -177 -5853 0
c (0<=(SATLiteral(282) - aux1450 + SATLiteral(177)))
177 5853 0
282 5853 0
282 177 5852 0
c ((SATLiteral(292) - aux1451 + SATLiteral(162))<=0)
-162 -5855 0
-292 -5855 0
-292 -162 -5856 0
c (0<=(SATLiteral(292) - aux1451 + SATLiteral(162)))
162 5856 0
292 5856 0
292 162 5855 0
c ((SATLiteral(12) - aux1452 + SATLiteral(147))<=0)
-147 -5858 0
-12 -5858 0
-12 -147 -5859 0
c (0<=(SATLiteral(12) - aux1452 + SATLiteral(147)))
147 5859 0
12 5859 0
12 147 5858 0
c ((SATLiteral(27) + SATLiteral(42) - aux1453)<=0)
-42 -5861 0
-27 -5861 0
-27 -42 -5862 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1453))
42 5862 0
27 5862 0
27 42 5861 0
c ((SATLiteral(312) + aux1453 - aux1454)<=0)
5861 -5864 0
5862 -5865 0
-312 -5864 0
-312 5861 -5865 0
-312 5862 -5867 0
c (0<=(SATLiteral(312) + aux1453 - aux1454))
-5862 5867 0
-5861 5865 0
312 5867 0
312 -5862 5865 0
312 -5861 5864 0
c ((aux1450 + aux1452 - aux1455)<=0)
5858 -5869 0
5859 -5870 0
5852 -5869 0
5852 5858 -5870 0
5852 5859 -5872 0
5853 -5870 0
5853 5858 -5872 0
5853 5859 -5874 0
c (0<=(aux1450 + aux1452 - aux1455))
-5859 5874 0
-5858 5872 0
-5853 5874 0
-5853 -5859 5872 0
-5853 -5858 5870 0
-5852 5872 0
-5852 -5859 5870 0
-5852 -5858 5869 0
c ((SATLiteral(284) - aux1456 + SATLiteral(179))<=0)
-179 -5876 0
-284 -5876 0
-284 -179 -5877 0
c (0<=(SATLiteral(284) - aux1456 + SATLiteral(179)))
179 5877 0
284 5877 0
284 179 5876 0
c ((SATLiteral(293) - aux1457 + SATLiteral(164))<=0)
-164 -5879 0
-293 -5879 0
-293 -164 -5880 0
c (0<=(SATLiteral(293) - aux1457 + SATLiteral(164)))
164 5880 0
293 5880 0
293 164 5879 0
c ((SATLiteral(14) - aux1458 + SATLiteral(149))<=0)
-149 -5882 0
-14 -5882 0
-14 -149 -5883 0
c (0<=(SATLiteral(14) - aux1458 + SATLiteral(149)))
149 5883 0
14 5883 0
14 149 5882 0
c ((SATLiteral(29) + SATLiteral(44) - aux1459)<=0)
-44 -5885 0
-29 -5885 0
-29 -44 -5886 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1459))
44 5886 0
29 5886 0
29 44 5885 0
c ((SATLiteral(314) + aux1459 - aux1460)<=0)
5885 -5888 0
5886 -5889 0
-314 -5888 0
-314 5885 -5889 0
-314 5886 -5891 0
c (0<=(SATLiteral(314) + aux1459 - aux1460))
-5886 5891 0
-5885 5889 0
314 5891 0
314 -5886 5889 0
314 -5885 5888 0
c ((aux1456 + aux1458 - aux1461)<=0)
5882 -5893 0
5883 -5894 0
5876 -5893 0
5876 5882 -5894 0
5876 5883 -5896 0
5877 -5894 0
5877 5882 -5896 0
5877 5883 -5898 0
c (0<=(aux1456 + aux1458 - aux1461))
-5883 5898 0
-5882 5896 0
-5877 5898 0
-5877 -5883 5896 0
-5877 -5882 5894 0
-5876 5896 0
-5876 -5883 5894 0
-5876 -5882 5893 0
c ((SATLiteral(286) - aux1462 + SATLiteral(181))<=0)
-181 -5900 0
-286 -5900 0
-286 -181 -5901 0
c (0<=(SATLiteral(286) - aux1462 + SATLiteral(181)))
181 5901 0
286 5901 0
286 181 5900 0
c ((SATLiteral(294) - aux1463 + SATLiteral(166))<=0)
-166 -5903 0
-294 -5903 0
-294 -166 -5904 0
c (0<=(SATLiteral(294) - aux1463 + SATLiteral(166)))
166 5904 0
294 5904 0
294 166 5903 0
c ((SATLiteral(16) - aux1464 + SATLiteral(151))<=0)
-151 -5906 0
-16 -5906 0
-16 -151 -5907 0
c (0<=(SATLiteral(16) - aux1464 + SATLiteral(151)))
151 5907 0
16 5907 0
16 151 5906 0
c ((SATLiteral(31) + SATLiteral(46) - aux1465)<=0)
-46 -5909 0
-31 -5909 0
-31 -46 -5910 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1465))
46 5910 0
31 5910 0
31 46 5909 0
c ((SATLiteral(316) + aux1465 - aux1466)<=0)
5909 -5912 0
5910 -5913 0
-316 -5912 0
-316 5909 -5913 0
-316 5910 -5915 0
c (0<=(SATLiteral(316) + aux1465 - aux1466))
-5910 5915 0
-5909 5913 0
316 5915 0
316 -5910 5913 0
316 -5909 5912 0
c ((aux1462 + aux1464 - aux1467)<=0)
5906 -5917 0
5907 -5918 0
5900 -5917 0
5900 5906 -5918 0
5900 5907 -5920 0
5901 -5918 0
5901 5906 -5920 0
5901 5907 -5922 0
c (0<=(aux1462 + aux1464 - aux1467))
-5907 5922 0
-5906 5920 0
-5901 5922 0
-5901 -5907 5920 0
-5901 -5906 5918 0
-5900 5920 0
-5900 -5907 5918 0
-5900 -5906 5917 0
c ((SATLiteral(-285) - aux1468 + SATLiteral(-180))<=0)
180 -5924 0
285 -5924 0
285 180 -5925 0
c (0<=(SATLiteral(-285) - aux1468 + SATLiteral(-180)))
-180 5925 0
-285 5925 0
-285 -180 5924 0
c ((SATLiteral(295) - aux1469 + SATLiteral(-165))<=0)
165 -5927 0
-295 -5927 0
-295 165 -5928 0
c (0<=(SATLiteral(295) - aux1469 + SATLiteral(-165)))
-165 5928 0
295 5928 0
295 -165 5927 0
c ((SATLiteral(-15) - aux1470 + SATLiteral(-150))<=0)
150 -5930 0
15 -5930 0
15 150 -5931 0
c (0<=(SATLiteral(-15) - aux1470 + SATLiteral(-150)))
-150 5931 0
-15 5931 0
-15 -150 5930 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1471)<=0)
45 -5933 0
30 -5933 0
30 45 -5934 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1471))
-45 5934 0
-30 5934 0
-30 -45 5933 0
c ((SATLiteral(-315) + aux1471 - aux1472)<=0)
5933 -5936 0
5934 -5937 0
315 -5936 0
315 5933 -5937 0
315 5934 -5939 0
c (0<=(SATLiteral(-315) + aux1471 - aux1472))
-5934 5939 0
-5933 5937 0
-315 5939 0
-315 -5934 5937 0
-315 -5933 5936 0
c ((aux1468 + aux1470 - aux1473)<=0)
5930 -5941 0
5931 -5942 0
5924 -5941 0
5924 5930 -5942 0
5924 5931 -5944 0
5925 -5942 0
5925 5930 -5944 0
5925 5931 -5946 0
c (0<=(aux1468 + aux1470 - aux1473))
-5931 5946 0
-5930 5944 0
-5925 5946 0
-5925 -5931 5944 0
-5925 -5930 5942 0
-5924 5944 0
-5924 -5931 5942 0
-5924 -5930 5941 0
c ((SATLiteral(317) - aux1474 + SATLiteral(212))<=0)
-212 -5948 0
-317 -5948 0
-317 -212 -5949 0
c (0<=(SATLiteral(317) - aux1474 + SATLiteral(212)))
212 5949 0
317 5949 0
317 212 5948 0
c ((SATLiteral(332) - aux1475 + SATLiteral(197))<=0)
-197 -5951 0
-332 -5951 0
-332 -197 -5952 0
c (0<=(SATLiteral(332) - aux1475 + SATLiteral(197)))
197 5952 0
332 5952 0
332 197 5951 0
c ((SATLiteral(47) - aux1476 + SATLiteral(182))<=0)
-182 -5954 0
-47 -5954 0
-47 -182 -5955 0
c (0<=(SATLiteral(47) - aux1476 + SATLiteral(182)))
182 5955 0
47 5955 0
47 182 5954 0
c ((SATLiteral(62) + SATLiteral(77) - aux1477)<=0)
-77 -5957 0
-62 -5957 0
-62 -77 -5958 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1477))
77 5958 0
62 5958 0
62 77 5957 0
c ((SATLiteral(347) + aux1477 - aux1478)<=0)
5957 -5960 0
5958 -5961 0
-347 -5960 0
-347 5957 -5961 0
-347 5958 -5963 0
c (0<=(SATLiteral(347) + aux1477 - aux1478))
-5958 5963 0
-5957 5961 0
347 5963 0
347 -5958 5961 0
347 -5957 5960 0
c ((aux1474 + aux1476 - aux1479)<=0)
5954 -5965 0
5955 -5966 0
5948 -5965 0
5948 5954 -5966 0
5948 5955 -5968 0
5949 -5966 0
5949 5954 -5968 0
5949 5955 -5970 0
c (0<=(aux1474 + aux1476 - aux1479))
-5955 5970 0
-5954 5968 0
-5949 5970 0
-5949 -5955 5968 0
-5949 -5954 5966 0
-5948 5968 0
-5948 -5955 5966 0
-5948 -5954 5965 0
c ((SATLiteral(318) - aux1480 + SATLiteral(214))<=0)
-214 -5972 0
-318 -5972 0
-318 -214 -5973 0
c (0<=(SATLiteral(318) - aux1480 + SATLiteral(214)))
214 5973 0
318 5973 0
318 214 5972 0
c ((SATLiteral(334) - aux1481 + SATLiteral(199))<=0)
-199 -5975 0
-334 -5975 0
-334 -199 -5976 0
c (0<=(SATLiteral(334) - aux1481 + SATLiteral(199)))
199 5976 0
334 5976 0
334 199 5975 0
c ((SATLiteral(49) - aux1482 + SATLiteral(184))<=0)
-184 -5978 0
-49 -5978 0
-49 -184 -5979 0
c (0<=(SATLiteral(49) - aux1482 + SATLiteral(184)))
184 5979 0
49 5979 0
49 184 5978 0
c ((SATLiteral(64) + SATLiteral(79) - aux1483)<=0)
-79 -5981 0
-64 -5981 0
-64 -79 -5982 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1483))
79 5982 0
64 5982 0
64 79 5981 0
c ((SATLiteral(349) + aux1483 - aux1484)<=0)
5981 -5984 0
5982 -5985 0
-349 -5984 0
-349 5981 -5985 0
-349 5982 -5987 0
c (0<=(SATLiteral(349) + aux1483 - aux1484))
-5982 5987 0
-5981 5985 0
349 5987 0
349 -5982 5985 0
349 -5981 5984 0
c ((aux1480 + aux1482 - aux1485)<=0)
5978 -5989 0
5979 -5990 0
5972 -5989 0
5972 5978 -5990 0
5972 5979 -5992 0
5973 -5990 0
5973 5978 -5992 0
5973 5979 -5994 0
c (0<=(aux1480 + aux1482 - aux1485))
-5979 5994 0
-5978 5992 0
-5973 5994 0
-5973 -5979 5992 0
-5973 -5978 5990 0
-5972 5992 0
-5972 -5979 5990 0
-5972 -5978 5989 0
c ((SATLiteral(319) - aux1486 + SATLiteral(216))<=0)
-216 -5996 0
-319 -5996 0
-319 -216 -5997 0
c (0<=(SATLiteral(319) - aux1486 + SATLiteral(216)))
216 5997 0
319 5997 0
319 216 5996 0
c ((SATLiteral(336) - aux1487 + SATLiteral(201))<=0)
-201 -5999 0
-336 -5999 0
-336 -201 -6000 0
c (0<=(SATLiteral(336) - aux1487 + SATLiteral(201)))
201 6000 0
336 6000 0
336 201 5999 0
c ((SATLiteral(51) - aux1488 + SATLiteral(186))<=0)
-186 -6002 0
-51 -6002 0
-51 -186 -6003 0
c (0<=(SATLiteral(51) - aux1488 + SATLiteral(186)))
186 6003 0
51 6003 0
51 186 6002 0
c ((SATLiteral(66) + SATLiteral(81) - aux1489)<=0)
-81 -6005 0
-66 -6005 0
-66 -81 -6006 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1489))
81 6006 0
66 6006 0
66 81 6005 0
c ((SATLiteral(351) + aux1489 - aux1490)<=0)
6005 -6008 0
6006 -6009 0
-351 -6008 0
-351 6005 -6009 0
-351 6006 -6011 0
c (0<=(SATLiteral(351) + aux1489 - aux1490))
-6006 6011 0
-6005 6009 0
351 6011 0
351 -6006 6009 0
351 -6005 6008 0
c ((aux1486 + aux1488 - aux1491)<=0)
6002 -6013 0
6003 -6014 0
5996 -6013 0
5996 6002 -6014 0
5996 6003 -6016 0
5997 -6014 0
5997 6002 -6016 0
5997 6003 -6018 0
c (0<=(aux1486 + aux1488 - aux1491))
-6003 6018 0
-6002 6016 0
-5997 6018 0
-5997 -6003 6016 0
-5997 -6002 6014 0
-5996 6016 0
-5996 -6003 6014 0
-5996 -6002 6013 0
c ((SATLiteral(320) - aux1492 + SATLiteral(218))<=0)
-218 -6020 0
-320 -6020 0
-320 -218 -6021 0
c (0<=(SATLiteral(320) - aux1492 + SATLiteral(218)))
218 6021 0
320 6021 0
320 218 6020 0
c ((SATLiteral(338) - aux1493 + SATLiteral(203))<=0)
-203 -6023 0
-338 -6023 0
-338 -203 -6024 0
c (0<=(SATLiteral(338) - aux1493 + SATLiteral(203)))
203 6024 0
338 6024 0
338 203 6023 0
c ((SATLiteral(53) - aux1494 + SATLiteral(188))<=0)
-188 -6026 0
-53 -6026 0
-53 -188 -6027 0
c (0<=(SATLiteral(53) - aux1494 + SATLiteral(188)))
188 6027 0
53 6027 0
53 188 6026 0
c ((SATLiteral(68) + SATLiteral(83) - aux1495)<=0)
-83 -6029 0
-68 -6029 0
-68 -83 -6030 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1495))
83 6030 0
68 6030 0
68 83 6029 0
c ((SATLiteral(353) + aux1495 - aux1496)<=0)
6029 -6032 0
6030 -6033 0
-353 -6032 0
-353 6029 -6033 0
-353 6030 -6035 0
c (0<=(SATLiteral(353) + aux1495 - aux1496))
-6030 6035 0
-6029 6033 0
353 6035 0
353 -6030 6033 0
353 -6029 6032 0
c ((aux1492 + aux1494 - aux1497)<=0)
6026 -6037 0
6027 -6038 0
6020 -6037 0
6020 6026 -6038 0
6020 6027 -6040 0
6021 -6038 0
6021 6026 -6040 0
6021 6027 -6042 0
c (0<=(aux1492 + aux1494 - aux1497))
-6027 6042 0
-6026 6040 0
-6021 6042 0
-6021 -6027 6040 0
-6021 -6026 6038 0
-6020 6040 0
-6020 -6027 6038 0
-6020 -6026 6037 0
c ((SATLiteral(321) - aux1498 + SATLiteral(220))<=0)
-220 -6044 0
-321 -6044 0
-321 -220 -6045 0
c (0<=(SATLiteral(321) - aux1498 + SATLiteral(220)))
220 6045 0
321 6045 0
321 220 6044 0
c ((SATLiteral(340) - aux1499 + SATLiteral(205))<=0)
-205 -6047 0
-340 -6047 0
-340 -205 -6048 0
c (0<=(SATLiteral(340) - aux1499 + SATLiteral(205)))
205 6048 0
340 6048 0
340 205 6047 0
c ((SATLiteral(55) - aux1500 + SATLiteral(190))<=0)
-190 -6050 0
-55 -6050 0
-55 -190 -6051 0
c (0<=(SATLiteral(55) - aux1500 + SATLiteral(190)))
190 6051 0
55 6051 0
55 190 6050 0
c ((SATLiteral(70) + SATLiteral(85) - aux1501)<=0)
-85 -6053 0
-70 -6053 0
-70 -85 -6054 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1501))
85 6054 0
70 6054 0
70 85 6053 0
c ((SATLiteral(355) + aux1501 - aux1502)<=0)
6053 -6056 0
6054 -6057 0
-355 -6056 0
-355 6053 -6057 0
-355 6054 -6059 0
c (0<=(SATLiteral(355) + aux1501 - aux1502))
-6054 6059 0
-6053 6057 0
355 6059 0
355 -6054 6057 0
355 -6053 6056 0
c ((aux1498 + aux1500 - aux1503)<=0)
6050 -6061 0
6051 -6062 0
6044 -6061 0
6044 6050 -6062 0
6044 6051 -6064 0
6045 -6062 0
6045 6050 -6064 0
6045 6051 -6066 0
c (0<=(aux1498 + aux1500 - aux1503))
-6051 6066 0
-6050 6064 0
-6045 6066 0
-6045 -6051 6064 0
-6045 -6050 6062 0
-6044 6064 0
-6044 -6051 6062 0
-6044 -6050 6061 0
c ((SATLiteral(322) - aux1504 + SATLiteral(222))<=0)
-222 -6068 0
-322 -6068 0
-322 -222 -6069 0
c (0<=(SATLiteral(322) - aux1504 + SATLiteral(222)))
222 6069 0
322 6069 0
322 222 6068 0
c ((SATLiteral(342) - aux1505 + SATLiteral(207))<=0)
-207 -6071 0
-342 -6071 0
-342 -207 -6072 0
c (0<=(SATLiteral(342) - aux1505 + SATLiteral(207)))
207 6072 0
342 6072 0
342 207 6071 0
c ((SATLiteral(57) - aux1506 + SATLiteral(192))<=0)
-192 -6074 0
-57 -6074 0
-57 -192 -6075 0
c (0<=(SATLiteral(57) - aux1506 + SATLiteral(192)))
192 6075 0
57 6075 0
57 192 6074 0
c ((SATLiteral(72) + SATLiteral(87) - aux1507)<=0)
-87 -6077 0
-72 -6077 0
-72 -87 -6078 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1507))
87 6078 0
72 6078 0
72 87 6077 0
c ((SATLiteral(357) + aux1507 - aux1508)<=0)
6077 -6080 0
6078 -6081 0
-357 -6080 0
-357 6077 -6081 0
-357 6078 -6083 0
c (0<=(SATLiteral(357) + aux1507 - aux1508))
-6078 6083 0
-6077 6081 0
357 6083 0
357 -6078 6081 0
357 -6077 6080 0
c ((aux1504 + aux1506 - aux1509)<=0)
6074 -6085 0
6075 -6086 0
6068 -6085 0
6068 6074 -6086 0
6068 6075 -6088 0
6069 -6086 0
6069 6074 -6088 0
6069 6075 -6090 0
c (0<=(aux1504 + aux1506 - aux1509))
-6075 6090 0
-6074 6088 0
-6069 6090 0
-6069 -6075 6088 0
-6069 -6074 6086 0
-6068 6088 0
-6068 -6075 6086 0
-6068 -6074 6085 0
c ((SATLiteral(323) - aux1510 + SATLiteral(224))<=0)
-224 -6092 0
-323 -6092 0
-323 -224 -6093 0
c (0<=(SATLiteral(323) - aux1510 + SATLiteral(224)))
224 6093 0
323 6093 0
323 224 6092 0
c ((SATLiteral(344) - aux1511 + SATLiteral(209))<=0)
-209 -6095 0
-344 -6095 0
-344 -209 -6096 0
c (0<=(SATLiteral(344) - aux1511 + SATLiteral(209)))
209 6096 0
344 6096 0
344 209 6095 0
c ((SATLiteral(59) - aux1512 + SATLiteral(194))<=0)
-194 -6098 0
-59 -6098 0
-59 -194 -6099 0
c (0<=(SATLiteral(59) - aux1512 + SATLiteral(194)))
194 6099 0
59 6099 0
59 194 6098 0
c ((SATLiteral(74) + SATLiteral(89) - aux1513)<=0)
-89 -6101 0
-74 -6101 0
-74 -89 -6102 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1513))
89 6102 0
74 6102 0
74 89 6101 0
c ((SATLiteral(359) + aux1513 - aux1514)<=0)
6101 -6104 0
6102 -6105 0
-359 -6104 0
-359 6101 -6105 0
-359 6102 -6107 0
c (0<=(SATLiteral(359) + aux1513 - aux1514))
-6102 6107 0
-6101 6105 0
359 6107 0
359 -6102 6105 0
359 -6101 6104 0
c ((aux1510 + aux1512 - aux1515)<=0)
6098 -6109 0
6099 -6110 0
6092 -6109 0
6092 6098 -6110 0
6092 6099 -6112 0
6093 -6110 0
6093 6098 -6112 0
6093 6099 -6114 0
c (0<=(aux1510 + aux1512 - aux1515))
-6099 6114 0
-6098 6112 0
-6093 6114 0
-6093 -6099 6112 0
-6093 -6098 6110 0
-6092 6112 0
-6092 -6099 6110 0
-6092 -6098 6109 0
c ((SATLiteral(324) - aux1516 + SATLiteral(226))<=0)
-226 -6116 0
-324 -6116 0
-324 -226 -6117 0
c (0<=(SATLiteral(324) - aux1516 + SATLiteral(226)))
226 6117 0
324 6117 0
324 226 6116 0
c ((SATLiteral(346) - aux1517 + SATLiteral(211))<=0)
-211 -6119 0
-346 -6119 0
-346 -211 -6120 0
c (0<=(SATLiteral(346) - aux1517 + SATLiteral(211)))
211 6120 0
346 6120 0
346 211 6119 0
c ((SATLiteral(61) - aux1518 + SATLiteral(196))<=0)
-196 -6122 0
-61 -6122 0
-61 -196 -6123 0
c (0<=(SATLiteral(61) - aux1518 + SATLiteral(196)))
196 6123 0
61 6123 0
61 196 6122 0
c ((SATLiteral(76) + SATLiteral(91) - aux1519)<=0)
-91 -6125 0
-76 -6125 0
-76 -91 -6126 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1519))
91 6126 0
76 6126 0
76 91 6125 0
c ((SATLiteral(361) + aux1519 - aux1520)<=0)
6125 -6128 0
6126 -6129 0
-361 -6128 0
-361 6125 -6129 0
-361 6126 -6131 0
c (0<=(SATLiteral(361) + aux1519 - aux1520))
-6126 6131 0
-6125 6129 0
361 6131 0
361 -6126 6129 0
361 -6125 6128 0
c ((aux1516 + aux1518 - aux1521)<=0)
6122 -6133 0
6123 -6134 0
6116 -6133 0
6116 6122 -6134 0
6116 6123 -6136 0
6117 -6134 0
6117 6122 -6136 0
6117 6123 -6138 0
c (0<=(aux1516 + aux1518 - aux1521))
-6123 6138 0
-6122 6136 0
-6117 6138 0
-6117 -6123 6136 0
-6117 -6122 6134 0
-6116 6136 0
-6116 -6123 6134 0
-6116 -6122 6133 0
c ((SATLiteral(325) - aux1522 + SATLiteral(-225))<=0)
225 -6140 0
-325 -6140 0
-325 225 -6141 0
c (0<=(SATLiteral(325) - aux1522 + SATLiteral(-225)))
-225 6141 0
325 6141 0
325 -225 6140 0
c ((SATLiteral(-345) - aux1523 + SATLiteral(-210))<=0)
210 -6143 0
345 -6143 0
345 210 -6144 0
c (0<=(SATLiteral(-345) - aux1523 + SATLiteral(-210)))
-210 6144 0
-345 6144 0
-345 -210 6143 0
c ((SATLiteral(-60) - aux1524 + SATLiteral(-195))<=0)
195 -6146 0
60 -6146 0
60 195 -6147 0
c (0<=(SATLiteral(-60) - aux1524 + SATLiteral(-195)))
-195 6147 0
-60 6147 0
-60 -195 6146 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1525)<=0)
90 -6149 0
75 -6149 0
75 90 -6150 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1525))
-90 6150 0
-75 6150 0
-75 -90 6149 0
c ((SATLiteral(-360) + aux1525 - aux1526)<=0)
6149 -6152 0
6150 -6153 0
360 -6152 0
360 6149 -6153 0
360 6150 -6155 0
c (0<=(SATLiteral(-360) + aux1525 - aux1526))
-6150 6155 0
-6149 6153 0
-360 6155 0
-360 -6150 6153 0
-360 -6149 6152 0
c ((aux1522 + aux1524 - aux1527)<=0)
6146 -6157 0
6147 -6158 0
6140 -6157 0
6140 6146 -6158 0
6140 6147 -6160 0
6141 -6158 0
6141 6146 -6160 0
6141 6147 -6162 0
c (0<=(aux1522 + aux1524 - aux1527))
-6147 6162 0
-6146 6160 0
-6141 6162 0
-6141 -6147 6160 0
-6141 -6146 6158 0
-6140 6160 0
-6140 -6147 6158 0
-6140 -6146 6157 0
c ((SATLiteral(362) - aux1528 + SATLiteral(257))<=0)
-257 -6164 0
-362 -6164 0
-362 -257 -6165 0
c (0<=(SATLiteral(362) - aux1528 + SATLiteral(257)))
257 6165 0
362 6165 0
362 257 6164 0
c ((SATLiteral(377) - aux1529 + SATLiteral(242))<=0)
-242 -6167 0
-377 -6167 0
-377 -242 -6168 0
c (0<=(SATLiteral(377) - aux1529 + SATLiteral(242)))
242 6168 0
377 6168 0
377 242 6167 0
c ((SATLiteral(92) - aux1530 + SATLiteral(227))<=0)
-227 -6170 0
-92 -6170 0
-92 -227 -6171 0
c (0<=(SATLiteral(92) - aux1530 + SATLiteral(227)))
227 6171 0
92 6171 0
92 227 6170 0
c ((SATLiteral(107) + SATLiteral(122) - aux1531)<=0)
-122 -6173 0
-107 -6173 0
-107 -122 -6174 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1531))
122 6174 0
107 6174 0
107 122 6173 0
c ((SATLiteral(392) + aux1531 - aux1532)<=0)
6173 -6176 0
6174 -6177 0
-392 -6176 0
-392 6173 -6177 0
-392 6174 -6179 0
c (0<=(SATLiteral(392) + aux1531 - aux1532))
-6174 6179 0
-6173 6177 0
392 6179 0
392 -6174 6177 0
392 -6173 6176 0
c ((aux1528 + aux1530 - aux1533)<=0)
6170 -6181 0
6171 -6182 0
6164 -6181 0
6164 6170 -6182 0
6164 6171 -6184 0
6165 -6182 0
6165 6170 -6184 0
6165 6171 -6186 0
c (0<=(aux1528 + aux1530 - aux1533))
-6171 6186 0
-6170 6184 0
-6165 6186 0
-6165 -6171 6184 0
-6165 -6170 6182 0
-6164 6184 0
-6164 -6171 6182 0
-6164 -6170 6181 0
c ((SATLiteral(364) - aux1534 + SATLiteral(259))<=0)
-259 -6188 0
-364 -6188 0
-364 -259 -6189 0
c (0<=(SATLiteral(364) - aux1534 + SATLiteral(259)))
259 6189 0
364 6189 0
364 259 6188 0
c ((SATLiteral(379) - aux1535 + SATLiteral(244))<=0)
-244 -6191 0
-379 -6191 0
-379 -244 -6192 0
c (0<=(SATLiteral(379) - aux1535 + SATLiteral(244)))
244 6192 0
379 6192 0
379 244 6191 0
c ((SATLiteral(94) - aux1536 + SATLiteral(229))<=0)
-229 -6194 0
-94 -6194 0
-94 -229 -6195 0
c (0<=(SATLiteral(94) - aux1536 + SATLiteral(229)))
229 6195 0
94 6195 0
94 229 6194 0
c ((SATLiteral(109) + SATLiteral(124) - aux1537)<=0)
-124 -6197 0
-109 -6197 0
-109 -124 -6198 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1537))
124 6198 0
109 6198 0
109 124 6197 0
c ((SATLiteral(394) + aux1537 - aux1538)<=0)
6197 -6200 0
6198 -6201 0
-394 -6200 0
-394 6197 -6201 0
-394 6198 -6203 0
c (0<=(SATLiteral(394) + aux1537 - aux1538))
-6198 6203 0
-6197 6201 0
394 6203 0
394 -6198 6201 0
394 -6197 6200 0
c ((aux1534 + aux1536 - aux1539)<=0)
6194 -6205 0
6195 -6206 0
6188 -6205 0
6188 6194 -6206 0
6188 6195 -6208 0
6189 -6206 0
6189 6194 -6208 0
6189 6195 -6210 0
c (0<=(aux1534 + aux1536 - aux1539))
-6195 6210 0
-6194 6208 0
-6189 6210 0
-6189 -6195 6208 0
-6189 -6194 6206 0
-6188 6208 0
-6188 -6195 6206 0
-6188 -6194 6205 0
c ((SATLiteral(366) - aux1540 + SATLiteral(261))<=0)
-261 -6212 0
-366 -6212 0
-366 -261 -6213 0
c (0<=(SATLiteral(366) - aux1540 + SATLiteral(261)))
261 6213 0
366 6213 0
366 261 6212 0
c ((SATLiteral(381) - aux1541 + SATLiteral(246))<=0)
-246 -6215 0
-381 -6215 0
-381 -246 -6216 0
c (0<=(SATLiteral(381) - aux1541 + SATLiteral(246)))
246 6216 0
381 6216 0
381 246 6215 0
c ((SATLiteral(96) - aux1542 + SATLiteral(231))<=0)
-231 -6218 0
-96 -6218 0
-96 -231 -6219 0
c (0<=(SATLiteral(96) - aux1542 + SATLiteral(231)))
231 6219 0
96 6219 0
96 231 6218 0
c ((SATLiteral(111) + SATLiteral(126) - aux1543)<=0)
-126 -6221 0
-111 -6221 0
-111 -126 -6222 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1543))
126 6222 0
111 6222 0
111 126 6221 0
c ((SATLiteral(396) + aux1543 - aux1544)<=0)
6221 -6224 0
6222 -6225 0
-396 -6224 0
-396 6221 -6225 0
-396 6222 -6227 0
c (0<=(SATLiteral(396) + aux1543 - aux1544))
-6222 6227 0
-6221 6225 0
396 6227 0
396 -6222 6225 0
396 -6221 6224 0
c ((aux1540 + aux1542 - aux1545)<=0)
6218 -6229 0
6219 -6230 0
6212 -6229 0
6212 6218 -6230 0
6212 6219 -6232 0
6213 -6230 0
6213 6218 -6232 0
6213 6219 -6234 0
c (0<=(aux1540 + aux1542 - aux1545))
-6219 6234 0
-6218 6232 0
-6213 6234 0
-6213 -6219 6232 0
-6213 -6218 6230 0
-6212 6232 0
-6212 -6219 6230 0
-6212 -6218 6229 0
c ((SATLiteral(368) - aux1546 + SATLiteral(263))<=0)
-263 -6236 0
-368 -6236 0
-368 -263 -6237 0
c (0<=(SATLiteral(368) - aux1546 + SATLiteral(263)))
263 6237 0
368 6237 0
368 263 6236 0
c ((SATLiteral(383) - aux1547 + SATLiteral(248))<=0)
-248 -6239 0
-383 -6239 0
-383 -248 -6240 0
c (0<=(SATLiteral(383) - aux1547 + SATLiteral(248)))
248 6240 0
383 6240 0
383 248 6239 0
c ((SATLiteral(98) - aux1548 + SATLiteral(233))<=0)
-233 -6242 0
-98 -6242 0
-98 -233 -6243 0
c (0<=(SATLiteral(98) - aux1548 + SATLiteral(233)))
233 6243 0
98 6243 0
98 233 6242 0
c ((SATLiteral(113) + SATLiteral(128) - aux1549)<=0)
-128 -6245 0
-113 -6245 0
-113 -128 -6246 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1549))
128 6246 0
113 6246 0
113 128 6245 0
c ((SATLiteral(398) + aux1549 - aux1550)<=0)
6245 -6248 0
6246 -6249 0
-398 -6248 0
-398 6245 -6249 0
-398 6246 -6251 0
c (0<=(SATLiteral(398) + aux1549 - aux1550))
-6246 6251 0
-6245 6249 0
398 6251 0
398 -6246 6249 0
398 -6245 6248 0
c ((aux1546 + aux1548 - aux1551)<=0)
6242 -6253 0
6243 -6254 0
6236 -6253 0
6236 6242 -6254 0
6236 6243 -6256 0
6237 -6254 0
6237 6242 -6256 0
6237 6243 -6258 0
c (0<=(aux1546 + aux1548 - aux1551))
-6243 6258 0
-6242 6256 0
-6237 6258 0
-6237 -6243 6256 0
-6237 -6242 6254 0
-6236 6256 0
-6236 -6243 6254 0
-6236 -6242 6253 0
c ((SATLiteral(370) - aux1552 + SATLiteral(265))<=0)
-265 -6260 0
-370 -6260 0
-370 -265 -6261 0
c (0<=(SATLiteral(370) - aux1552 + SATLiteral(265)))
265 6261 0
370 6261 0
370 265 6260 0
c ((SATLiteral(385) - aux1553 + SATLiteral(250))<=0)
-250 -6263 0
-385 -6263 0
-385 -250 -6264 0
c (0<=(SATLiteral(385) - aux1553 + SATLiteral(250)))
250 6264 0
385 6264 0
385 250 6263 0
c ((SATLiteral(100) - aux1554 + SATLiteral(235))<=0)
-235 -6266 0
-100 -6266 0
-100 -235 -6267 0
c (0<=(SATLiteral(100) - aux1554 + SATLiteral(235)))
235 6267 0
100 6267 0
100 235 6266 0
c ((SATLiteral(115) + SATLiteral(130) - aux1555)<=0)
-130 -6269 0
-115 -6269 0
-115 -130 -6270 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1555))
130 6270 0
115 6270 0
115 130 6269 0
c ((SATLiteral(400) + aux1555 - aux1556)<=0)
6269 -6272 0
6270 -6273 0
-400 -6272 0
-400 6269 -6273 0
-400 6270 -6275 0
c (0<=(SATLiteral(400) + aux1555 - aux1556))
-6270 6275 0
-6269 6273 0
400 6275 0
400 -6270 6273 0
400 -6269 6272 0
c ((aux1552 + aux1554 - aux1557)<=0)
6266 -6277 0
6267 -6278 0
6260 -6277 0
6260 6266 -6278 0
6260 6267 -6280 0
6261 -6278 0
6261 6266 -6280 0
6261 6267 -6282 0
c (0<=(aux1552 + aux1554 - aux1557))
-6267 6282 0
-6266 6280 0
-6261 6282 0
-6261 -6267 6280 0
-6261 -6266 6278 0
-6260 6280 0
-6260 -6267 6278 0
-6260 -6266 6277 0
c ((SATLiteral(372) - aux1558 + SATLiteral(267))<=0)
-267 -6284 0
-372 -6284 0
-372 -267 -6285 0
c (0<=(SATLiteral(372) - aux1558 + SATLiteral(267)))
267 6285 0
372 6285 0
372 267 6284 0
c ((SATLiteral(387) - aux1559 + SATLiteral(252))<=0)
-252 -6287 0
-387 -6287 0
-387 -252 -6288 0
c (0<=(SATLiteral(387) - aux1559 + SATLiteral(252)))
252 6288 0
387 6288 0
387 252 6287 0
c ((SATLiteral(102) - aux1560 + SATLiteral(237))<=0)
-237 -6290 0
-102 -6290 0
-102 -237 -6291 0
c (0<=(SATLiteral(102) - aux1560 + SATLiteral(237)))
237 6291 0
102 6291 0
102 237 6290 0
c ((SATLiteral(117) + SATLiteral(132) - aux1561)<=0)
-132 -6293 0
-117 -6293 0
-117 -132 -6294 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1561))
132 6294 0
117 6294 0
117 132 6293 0
c ((SATLiteral(402) + aux1561 - aux1562)<=0)
6293 -6296 0
6294 -6297 0
-402 -6296 0
-402 6293 -6297 0
-402 6294 -6299 0
c (0<=(SATLiteral(402) + aux1561 - aux1562))
-6294 6299 0
-6293 6297 0
402 6299 0
402 -6294 6297 0
402 -6293 6296 0
c ((aux1558 + aux1560 - aux1563)<=0)
6290 -6301 0
6291 -6302 0
6284 -6301 0
6284 6290 -6302 0
6284 6291 -6304 0
6285 -6302 0
6285 6290 -6304 0
6285 6291 -6306 0
c (0<=(aux1558 + aux1560 - aux1563))
-6291 6306 0
-6290 6304 0
-6285 6306 0
-6285 -6291 6304 0
-6285 -6290 6302 0
-6284 6304 0
-6284 -6291 6302 0
-6284 -6290 6301 0
c ((SATLiteral(374) - aux1564 + SATLiteral(269))<=0)
-269 -6308 0
-374 -6308 0
-374 -269 -6309 0
c (0<=(SATLiteral(374) - aux1564 + SATLiteral(269)))
269 6309 0
374 6309 0
374 269 6308 0
c ((SATLiteral(389) - aux1565 + SATLiteral(254))<=0)
-254 -6311 0
-389 -6311 0
-389 -254 -6312 0
c (0<=(SATLiteral(389) - aux1565 + SATLiteral(254)))
254 6312 0
389 6312 0
389 254 6311 0
c ((SATLiteral(104) - aux1566 + SATLiteral(239))<=0)
-239 -6314 0
-104 -6314 0
-104 -239 -6315 0
c (0<=(SATLiteral(104) - aux1566 + SATLiteral(239)))
239 6315 0
104 6315 0
104 239 6314 0
c ((SATLiteral(119) + SATLiteral(134) - aux1567)<=0)
-134 -6317 0
-119 -6317 0
-119 -134 -6318 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1567))
134 6318 0
119 6318 0
119 134 6317 0
c ((SATLiteral(404) + aux1567 - aux1568)<=0)
6317 -6320 0
6318 -6321 0
-404 -6320 0
-404 6317 -6321 0
-404 6318 -6323 0
c (0<=(SATLiteral(404) + aux1567 - aux1568))
-6318 6323 0
-6317 6321 0
404 6323 0
404 -6318 6321 0
404 -6317 6320 0
c ((aux1564 + aux1566 - aux1569)<=0)
6314 -6325 0
6315 -6326 0
6308 -6325 0
6308 6314 -6326 0
6308 6315 -6328 0
6309 -6326 0
6309 6314 -6328 0
6309 6315 -6330 0
c (0<=(aux1564 + aux1566 - aux1569))
-6315 6330 0
-6314 6328 0
-6309 6330 0
-6309 -6315 6328 0
-6309 -6314 6326 0
-6308 6328 0
-6308 -6315 6326 0
-6308 -6314 6325 0
c ((SATLiteral(376) - aux1570 + SATLiteral(271))<=0)
-271 -6332 0
-376 -6332 0
-376 -271 -6333 0
c (0<=(SATLiteral(376) - aux1570 + SATLiteral(271)))
271 6333 0
376 6333 0
376 271 6332 0
c ((SATLiteral(391) - aux1571 + SATLiteral(256))<=0)
-256 -6335 0
-391 -6335 0
-391 -256 -6336 0
c (0<=(SATLiteral(391) - aux1571 + SATLiteral(256)))
256 6336 0
391 6336 0
391 256 6335 0
c ((SATLiteral(106) - aux1572 + SATLiteral(241))<=0)
-241 -6338 0
-106 -6338 0
-106 -241 -6339 0
c (0<=(SATLiteral(106) - aux1572 + SATLiteral(241)))
241 6339 0
106 6339 0
106 241 6338 0
c ((SATLiteral(121) + SATLiteral(136) - aux1573)<=0)
-136 -6341 0
-121 -6341 0
-121 -136 -6342 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1573))
136 6342 0
121 6342 0
121 136 6341 0
c ((SATLiteral(406) + aux1573 - aux1574)<=0)
6341 -6344 0
6342 -6345 0
-406 -6344 0
-406 6341 -6345 0
-406 6342 -6347 0
c (0<=(SATLiteral(406) + aux1573 - aux1574))
-6342 6347 0
-6341 6345 0
406 6347 0
406 -6342 6345 0
406 -6341 6344 0
c ((aux1570 + aux1572 - aux1575)<=0)
6338 -6349 0
6339 -6350 0
6332 -6349 0
6332 6338 -6350 0
6332 6339 -6352 0
6333 -6350 0
6333 6338 -6352 0
6333 6339 -6354 0
c (0<=(aux1570 + aux1572 - aux1575))
-6339 6354 0
-6338 6352 0
-6333 6354 0
-6333 -6339 6352 0
-6333 -6338 6350 0
-6332 6352 0
-6332 -6339 6350 0
-6332 -6338 6349 0
c ((SATLiteral(-375) - aux1576 + SATLiteral(-270))<=0)
270 -6356 0
375 -6356 0
375 270 -6357 0
c (0<=(SATLiteral(-375) - aux1576 + SATLiteral(-270)))
-270 6357 0
-375 6357 0
-375 -270 6356 0
c ((SATLiteral(-390) - aux1577 + SATLiteral(-255))<=0)
255 -6359 0
390 -6359 0
390 255 -6360 0
c (0<=(SATLiteral(-390) - aux1577 + SATLiteral(-255)))
-255 6360 0
-390 6360 0
-390 -255 6359 0
c ((SATLiteral(-105) - aux1578 + SATLiteral(-240))<=0)
240 -6362 0
105 -6362 0
105 240 -6363 0
c (0<=(SATLiteral(-105) - aux1578 + SATLiteral(-240)))
-240 6363 0
-105 6363 0
-105 -240 6362 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1579)<=0)
135 -6365 0
120 -6365 0
120 135 -6366 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1579))
-135 6366 0
-120 6366 0
-120 -135 6365 0
c ((SATLiteral(-405) + aux1579 - aux1580)<=0)
6365 -6368 0
6366 -6369 0
405 -6368 0
405 6365 -6369 0
405 6366 -6371 0
c (0<=(SATLiteral(-405) + aux1579 - aux1580))
-6366 6371 0
-6365 6369 0
-405 6371 0
-405 -6366 6369 0
-405 -6365 6368 0
c ((aux1576 + aux1578 - aux1581)<=0)
6362 -6373 0
6363 -6374 0
6356 -6373 0
6356 6362 -6374 0
6356 6363 -6376 0
6357 -6374 0
6357 6362 -6376 0
6357 6363 -6378 0
c (0<=(aux1576 + aux1578 - aux1581))
-6363 6378 0
-6362 6376 0
-6357 6378 0
-6357 -6363 6376 0
-6357 -6362 6374 0
-6356 6376 0
-6356 -6363 6374 0
-6356 -6362 6373 0
c ((SATLiteral(677) - aux1582 + SATLiteral(572))<=0)
-572 -6380 0
-677 -6380 0
-677 -572 -6381 0
c (0<=(SATLiteral(677) - aux1582 + SATLiteral(572)))
572 6381 0
677 6381 0
677 572 6380 0
c ((SATLiteral(692) - aux1583 + SATLiteral(557))<=0)
-557 -6383 0
-692 -6383 0
-692 -557 -6384 0
c (0<=(SATLiteral(692) - aux1583 + SATLiteral(557)))
557 6384 0
692 6384 0
692 557 6383 0
c (( - aux1584 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6386 0
-407 -6386 0
-407 -542 -6387 0
c (0<=( - aux1584 + SATLiteral(407) + SATLiteral(542)))
542 6387 0
407 6387 0
407 542 6386 0
c (( - aux1585 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6389 0
-422 -6389 0
-422 -437 -6390 0
c (0<=( - aux1585 + SATLiteral(422) + SATLiteral(437)))
437 6390 0
422 6390 0
422 437 6389 0
c ((SATLiteral(707) + aux1585 - aux1586)<=0)
6389 -6392 0
6390 -6393 0
-707 -6392 0
-707 6389 -6393 0
-707 6390 -6395 0
c (0<=(SATLiteral(707) + aux1585 - aux1586))
-6390 6395 0
-6389 6393 0
707 6395 0
707 -6390 6393 0
707 -6389 6392 0
c ((aux1582 + aux1584 - aux1587)<=0)
6386 -6397 0
6387 -6398 0
6380 -6397 0
6380 6386 -6398 0
6380 6387 -6400 0
6381 -6398 0
6381 6386 -6400 0
6381 6387 -6402 0
c (0<=(aux1582 + aux1584 - aux1587))
-6387 6402 0
-6386 6400 0
-6381 6402 0
-6381 -6387 6400 0
-6381 -6386 6398 0
-6380 6400 0
-6380 -6387 6398 0
-6380 -6386 6397 0
c ((SATLiteral(679) - aux1588 + SATLiteral(574))<=0)
-574 -6404 0
-679 -6404 0
-679 -574 -6405 0
c (0<=(SATLiteral(679) - aux1588 + SATLiteral(574)))
574 6405 0
679 6405 0
679 574 6404 0
c ((SATLiteral(694) - aux1589 + SATLiteral(559))<=0)
-559 -6407 0
-694 -6407 0
-694 -559 -6408 0
c (0<=(SATLiteral(694) - aux1589 + SATLiteral(559)))
559 6408 0
694 6408 0
694 559 6407 0
c (( - aux1590 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6410 0
-409 -6410 0
-409 -544 -6411 0
c (0<=( - aux1590 + SATLiteral(409) + SATLiteral(544)))
544 6411 0
409 6411 0
409 544 6410 0
c (( - aux1591 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6413 0
-424 -6413 0
-424 -439 -6414 0
c (0<=( - aux1591 + SATLiteral(424) + SATLiteral(439)))
439 6414 0
424 6414 0
424 439 6413 0
c ((SATLiteral(709) + aux1591 - aux1592)<=0)
6413 -6416 0
6414 -6417 0
-709 -6416 0
-709 6413 -6417 0
-709 6414 -6419 0
c (0<=(SATLiteral(709) + aux1591 - aux1592))
-6414 6419 0
-6413 6417 0
709 6419 0
709 -6414 6417 0
709 -6413 6416 0
c ((aux1588 + aux1590 - aux1593)<=0)
6410 -6421 0
6411 -6422 0
6404 -6421 0
6404 6410 -6422 0
6404 6411 -6424 0
6405 -6422 0
6405 6410 -6424 0
6405 6411 -6426 0
c (0<=(aux1588 + aux1590 - aux1593))
-6411 6426 0
-6410 6424 0
-6405 6426 0
-6405 -6411 6424 0
-6405 -6410 6422 0
-6404 6424 0
-6404 -6411 6422 0
-6404 -6410 6421 0
c ((SATLiteral(681) - aux1594 + SATLiteral(576))<=0)
-576 -6428 0
-681 -6428 0
-681 -576 -6429 0
c (0<=(SATLiteral(681) - aux1594 + SATLiteral(576)))
576 6429 0
681 6429 0
681 576 6428 0
c ((SATLiteral(696) - aux1595 + SATLiteral(561))<=0)
-561 -6431 0
-696 -6431 0
-696 -561 -6432 0
c (0<=(SATLiteral(696) - aux1595 + SATLiteral(561)))
561 6432 0
696 6432 0
696 561 6431 0
c (( - aux1596 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6434 0
-411 -6434 0
-411 -546 -6435 0
c (0<=( - aux1596 + SATLiteral(411) + SATLiteral(546)))
546 6435 0
411 6435 0
411 546 6434 0
c (( - aux1597 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6437 0
-426 -6437 0
-426 -441 -6438 0
c (0<=( - aux1597 + SATLiteral(426) + SATLiteral(441)))
441 6438 0
426 6438 0
426 441 6437 0
c ((SATLiteral(711) + aux1597 - aux1598)<=0)
6437 -6440 0
6438 -6441 0
-711 -6440 0
-711 6437 -6441 0
-711 6438 -6443 0
c (0<=(SATLiteral(711) + aux1597 - aux1598))
-6438 6443 0
-6437 6441 0
711 6443 0
711 -6438 6441 0
711 -6437 6440 0
c ((aux1594 + aux1596 - aux1599)<=0)
6434 -6445 0
6435 -6446 0
6428 -6445 0
6428 6434 -6446 0
6428 6435 -6448 0
6429 -6446 0
6429 6434 -6448 0
6429 6435 -6450 0
c (0<=(aux1594 + aux1596 - aux1599))
-6435 6450 0
-6434 6448 0
-6429 6450 0
-6429 -6435 6448 0
-6429 -6434 6446 0
-6428 6448 0
-6428 -6435 6446 0
-6428 -6434 6445 0
c ((SATLiteral(683) - aux1600 + SATLiteral(578))<=0)
-578 -6452 0
-683 -6452 0
-683 -578 -6453 0
c (0<=(SATLiteral(683) - aux1600 + SATLiteral(578)))
578 6453 0
683 6453 0
683 578 6452 0
c ((SATLiteral(698) - aux1601 + SATLiteral(563))<=0)
-563 -6455 0
-698 -6455 0
-698 -563 -6456 0
c (0<=(SATLiteral(698) - aux1601 + SATLiteral(563)))
563 6456 0
698 6456 0
698 563 6455 0
c (( - aux1602 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6458 0
-413 -6458 0
-413 -548 -6459 0
c (0<=( - aux1602 + SATLiteral(413) + SATLiteral(548)))
548 6459 0
413 6459 0
413 548 6458 0
c (( - aux1603 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6461 0
-428 -6461 0
-428 -443 -6462 0
c (0<=( - aux1603 + SATLiteral(428) + SATLiteral(443)))
443 6462 0
428 6462 0
428 443 6461 0
c ((SATLiteral(713) + aux1603 - aux1604)<=0)
6461 -6464 0
6462 -6465 0
-713 -6464 0
-713 6461 -6465 0
-713 6462 -6467 0
c (0<=(SATLiteral(713) + aux1603 - aux1604))
-6462 6467 0
-6461 6465 0
713 6467 0
713 -6462 6465 0
713 -6461 6464 0
c ((aux1600 + aux1602 - aux1605)<=0)
6458 -6469 0
6459 -6470 0
6452 -6469 0
6452 6458 -6470 0
6452 6459 -6472 0
6453 -6470 0
6453 6458 -6472 0
6453 6459 -6474 0
c (0<=(aux1600 + aux1602 - aux1605))
-6459 6474 0
-6458 6472 0
-6453 6474 0
-6453 -6459 6472 0
-6453 -6458 6470 0
-6452 6472 0
-6452 -6459 6470 0
-6452 -6458 6469 0
c ((SATLiteral(685) - aux1606 + SATLiteral(580))<=0)
-580 -6476 0
-685 -6476 0
-685 -580 -6477 0
c (0<=(SATLiteral(685) - aux1606 + SATLiteral(580)))
580 6477 0
685 6477 0
685 580 6476 0
c ((SATLiteral(700) - aux1607 + SATLiteral(565))<=0)
-565 -6479 0
-700 -6479 0
-700 -565 -6480 0
c (0<=(SATLiteral(700) - aux1607 + SATLiteral(565)))
565 6480 0
700 6480 0
700 565 6479 0
c (( - aux1608 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6482 0
-415 -6482 0
-415 -550 -6483 0
c (0<=( - aux1608 + SATLiteral(415) + SATLiteral(550)))
550 6483 0
415 6483 0
415 550 6482 0
c (( - aux1609 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6485 0
-430 -6485 0
-430 -445 -6486 0
c (0<=( - aux1609 + SATLiteral(430) + SATLiteral(445)))
445 6486 0
430 6486 0
430 445 6485 0
c ((SATLiteral(715) + aux1609 - aux1610)<=0)
6485 -6488 0
6486 -6489 0
-715 -6488 0
-715 6485 -6489 0
-715 6486 -6491 0
c (0<=(SATLiteral(715) + aux1609 - aux1610))
-6486 6491 0
-6485 6489 0
715 6491 0
715 -6486 6489 0
715 -6485 6488 0
c ((aux1606 + aux1608 - aux1611)<=0)
6482 -6493 0
6483 -6494 0
6476 -6493 0
6476 6482 -6494 0
6476 6483 -6496 0
6477 -6494 0
6477 6482 -6496 0
6477 6483 -6498 0
c (0<=(aux1606 + aux1608 - aux1611))
-6483 6498 0
-6482 6496 0
-6477 6498 0
-6477 -6483 6496 0
-6477 -6482 6494 0
-6476 6496 0
-6476 -6483 6494 0
-6476 -6482 6493 0
c ((SATLiteral(687) - aux1612 + SATLiteral(582))<=0)
-582 -6500 0
-687 -6500 0
-687 -582 -6501 0
c (0<=(SATLiteral(687) - aux1612 + SATLiteral(582)))
582 6501 0
687 6501 0
687 582 6500 0
c ((SATLiteral(702) - aux1613 + SATLiteral(567))<=0)
-567 -6503 0
-702 -6503 0
-702 -567 -6504 0
c (0<=(SATLiteral(702) - aux1613 + SATLiteral(567)))
567 6504 0
702 6504 0
702 567 6503 0
c (( - aux1614 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6506 0
-417 -6506 0
-417 -552 -6507 0
c (0<=( - aux1614 + SATLiteral(417) + SATLiteral(552)))
552 6507 0
417 6507 0
417 552 6506 0
c (( - aux1615 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6509 0
-432 -6509 0
-432 -447 -6510 0
c (0<=( - aux1615 + SATLiteral(432) + SATLiteral(447)))
447 6510 0
432 6510 0
432 447 6509 0
c ((SATLiteral(717) + aux1615 - aux1616)<=0)
6509 -6512 0
6510 -6513 0
-717 -6512 0
-717 6509 -6513 0
-717 6510 -6515 0
c (0<=(SATLiteral(717) + aux1615 - aux1616))
-6510 6515 0
-6509 6513 0
717 6515 0
717 -6510 6513 0
717 -6509 6512 0
c ((aux1612 + aux1614 - aux1617)<=0)
6506 -6517 0
6507 -6518 0
6500 -6517 0
6500 6506 -6518 0
6500 6507 -6520 0
6501 -6518 0
6501 6506 -6520 0
6501 6507 -6522 0
c (0<=(aux1612 + aux1614 - aux1617))
-6507 6522 0
-6506 6520 0
-6501 6522 0
-6501 -6507 6520 0
-6501 -6506 6518 0
-6500 6520 0
-6500 -6507 6518 0
-6500 -6506 6517 0
c ((SATLiteral(689) - aux1618 + SATLiteral(584))<=0)
-584 -6524 0
-689 -6524 0
-689 -584 -6525 0
c (0<=(SATLiteral(689) - aux1618 + SATLiteral(584)))
584 6525 0
689 6525 0
689 584 6524 0
c ((SATLiteral(704) - aux1619 + SATLiteral(569))<=0)
-569 -6527 0
-704 -6527 0
-704 -569 -6528 0
c (0<=(SATLiteral(704) - aux1619 + SATLiteral(569)))
569 6528 0
704 6528 0
704 569 6527 0
c (( - aux1620 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6530 0
-419 -6530 0
-419 -554 -6531 0
c (0<=( - aux1620 + SATLiteral(419) + SATLiteral(554)))
554 6531 0
419 6531 0
419 554 6530 0
c (( - aux1621 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6533 0
-434 -6533 0
-434 -449 -6534 0
c (0<=( - aux1621 + SATLiteral(434) + SATLiteral(449)))
449 6534 0
434 6534 0
434 449 6533 0
c ((SATLiteral(719) + aux1621 - aux1622)<=0)
6533 -6536 0
6534 -6537 0
-719 -6536 0
-719 6533 -6537 0
-719 6534 -6539 0
c (0<=(SATLiteral(719) + aux1621 - aux1622))
-6534 6539 0
-6533 6537 0
719 6539 0
719 -6534 6537 0
719 -6533 6536 0
c ((aux1618 + aux1620 - aux1623)<=0)
6530 -6541 0
6531 -6542 0
6524 -6541 0
6524 6530 -6542 0
6524 6531 -6544 0
6525 -6542 0
6525 6530 -6544 0
6525 6531 -6546 0
c (0<=(aux1618 + aux1620 - aux1623))
-6531 6546 0
-6530 6544 0
-6525 6546 0
-6525 -6531 6544 0
-6525 -6530 6542 0
-6524 6544 0
-6524 -6531 6542 0
-6524 -6530 6541 0
c ((SATLiteral(691) - aux1624 + SATLiteral(586))<=0)
-586 -6548 0
-691 -6548 0
-691 -586 -6549 0
c (0<=(SATLiteral(691) - aux1624 + SATLiteral(586)))
586 6549 0
691 6549 0
691 586 6548 0
c ((SATLiteral(706) - aux1625 + SATLiteral(571))<=0)
-571 -6551 0
-706 -6551 0
-706 -571 -6552 0
c (0<=(SATLiteral(706) - aux1625 + SATLiteral(571)))
571 6552 0
706 6552 0
706 571 6551 0
c (( - aux1626 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6554 0
-421 -6554 0
-421 -556 -6555 0
c (0<=( - aux1626 + SATLiteral(421) + SATLiteral(556)))
556 6555 0
421 6555 0
421 556 6554 0
c (( - aux1627 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6557 0
-436 -6557 0
-436 -451 -6558 0
c (0<=( - aux1627 + SATLiteral(436) + SATLiteral(451)))
451 6558 0
436 6558 0
436 451 6557 0
c ((SATLiteral(721) + aux1627 - aux1628)<=0)
6557 -6560 0
6558 -6561 0
-721 -6560 0
-721 6557 -6561 0
-721 6558 -6563 0
c (0<=(SATLiteral(721) + aux1627 - aux1628))
-6558 6563 0
-6557 6561 0
721 6563 0
721 -6558 6561 0
721 -6557 6560 0
c ((aux1624 + aux1626 - aux1629)<=0)
6554 -6565 0
6555 -6566 0
6548 -6565 0
6548 6554 -6566 0
6548 6555 -6568 0
6549 -6566 0
6549 6554 -6568 0
6549 6555 -6570 0
c (0<=(aux1624 + aux1626 - aux1629))
-6555 6570 0
-6554 6568 0
-6549 6570 0
-6549 -6555 6568 0
-6549 -6554 6566 0
-6548 6568 0
-6548 -6555 6566 0
-6548 -6554 6565 0
c ((SATLiteral(-690) - aux1630 + SATLiteral(-585))<=0)
585 -6572 0
690 -6572 0
690 585 -6573 0
c (0<=(SATLiteral(-690) - aux1630 + SATLiteral(-585)))
-585 6573 0
-690 6573 0
-690 -585 6572 0
c ((SATLiteral(-705) - aux1631 + SATLiteral(-570))<=0)
570 -6575 0
705 -6575 0
705 570 -6576 0
c (0<=(SATLiteral(-705) - aux1631 + SATLiteral(-570)))
-570 6576 0
-705 6576 0
-705 -570 6575 0
c (( - aux1632 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6578 0
420 -6578 0
420 555 -6579 0
c (0<=( - aux1632 + SATLiteral(-420) + SATLiteral(-555)))
-555 6579 0
-420 6579 0
-420 -555 6578 0
c (( - aux1633 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6581 0
435 -6581 0
435 450 -6582 0
c (0<=( - aux1633 + SATLiteral(-435) + SATLiteral(-450)))
-450 6582 0
-435 6582 0
-435 -450 6581 0
c ((SATLiteral(-720) + aux1633 - aux1634)<=0)
6581 -6584 0
6582 -6585 0
720 -6584 0
720 6581 -6585 0
720 6582 -6587 0
c (0<=(SATLiteral(-720) + aux1633 - aux1634))
-6582 6587 0
-6581 6585 0
-720 6587 0
-720 -6582 6585 0
-720 -6581 6584 0
c ((aux1630 + aux1632 - aux1635)<=0)
6578 -6589 0
6579 -6590 0
6572 -6589 0
6572 6578 -6590 0
6572 6579 -6592 0
6573 -6590 0
6573 6578 -6592 0
6573 6579 -6594 0
c (0<=(aux1630 + aux1632 - aux1635))
-6579 6594 0
-6578 6592 0
-6573 6594 0
-6573 -6579 6592 0
-6573 -6578 6590 0
-6572 6592 0
-6572 -6579 6590 0
-6572 -6578 6589 0
c ((SATLiteral(722) - aux1636 + SATLiteral(617))<=0)
-617 -6596 0
-722 -6596 0
-722 -617 -6597 0
c (0<=(SATLiteral(722) - aux1636 + SATLiteral(617)))
617 6597 0
722 6597 0
722 617 6596 0
c ((SATLiteral(737) - aux1637 + SATLiteral(602))<=0)
-602 -6599 0
-737 -6599 0
-737 -602 -6600 0
c (0<=(SATLiteral(737) - aux1637 + SATLiteral(602)))
602 6600 0
737 6600 0
737 602 6599 0
c (( - aux1638 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6602 0
-452 -6602 0
-452 -587 -6603 0
c (0<=( - aux1638 + SATLiteral(452) + SATLiteral(587)))
587 6603 0
452 6603 0
452 587 6602 0
c (( - aux1639 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6605 0
-467 -6605 0
-467 -482 -6606 0
c (0<=( - aux1639 + SATLiteral(467) + SATLiteral(482)))
482 6606 0
467 6606 0
467 482 6605 0
c ((SATLiteral(752) + aux1639 - aux1640)<=0)
6605 -6608 0
6606 -6609 0
-752 -6608 0
-752 6605 -6609 0
-752 6606 -6611 0
c (0<=(SATLiteral(752) + aux1639 - aux1640))
-6606 6611 0
-6605 6609 0
752 6611 0
752 -6606 6609 0
752 -6605 6608 0
c ((aux1636 + aux1638 - aux1641)<=0)
6602 -6613 0
6603 -6614 0
6596 -6613 0
6596 6602 -6614 0
6596 6603 -6616 0
6597 -6614 0
6597 6602 -6616 0
6597 6603 -6618 0
c (0<=(aux1636 + aux1638 - aux1641))
-6603 6618 0
-6602 6616 0
-6597 6618 0
-6597 -6603 6616 0
-6597 -6602 6614 0
-6596 6616 0
-6596 -6603 6614 0
-6596 -6602 6613 0
c ((SATLiteral(724) - aux1642 + SATLiteral(619))<=0)
-619 -6620 0
-724 -6620 0
-724 -619 -6621 0
c (0<=(SATLiteral(724) - aux1642 + SATLiteral(619)))
619 6621 0
724 6621 0
724 619 6620 0
c ((SATLiteral(739) - aux1643 + SATLiteral(604))<=0)
-604 -6623 0
-739 -6623 0
-739 -604 -6624 0
c (0<=(SATLiteral(739) - aux1643 + SATLiteral(604)))
604 6624 0
739 6624 0
739 604 6623 0
c (( - aux1644 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6626 0
-454 -6626 0
-454 -589 -6627 0
c (0<=( - aux1644 + SATLiteral(454) + SATLiteral(589)))
589 6627 0
454 6627 0
454 589 6626 0
c (( - aux1645 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6629 0
-469 -6629 0
-469 -484 -6630 0
c (0<=( - aux1645 + SATLiteral(469) + SATLiteral(484)))
484 6630 0
469 6630 0
469 484 6629 0
c ((SATLiteral(754) + aux1645 - aux1646)<=0)
6629 -6632 0
6630 -6633 0
-754 -6632 0
-754 6629 -6633 0
-754 6630 -6635 0
c (0<=(SATLiteral(754) + aux1645 - aux1646))
-6630 6635 0
-6629 6633 0
754 6635 0
754 -6630 6633 0
754 -6629 6632 0
c ((aux1642 + aux1644 - aux1647)<=0)
6626 -6637 0
6627 -6638 0
6620 -6637 0
6620 6626 -6638 0
6620 6627 -6640 0
6621 -6638 0
6621 6626 -6640 0
6621 6627 -6642 0
c (0<=(aux1642 + aux1644 - aux1647))
-6627 6642 0
-6626 6640 0
-6621 6642 0
-6621 -6627 6640 0
-6621 -6626 6638 0
-6620 6640 0
-6620 -6627 6638 0
-6620 -6626 6637 0
c ((SATLiteral(726) - aux1648 + SATLiteral(621))<=0)
-621 -6644 0
-726 -6644 0
-726 -621 -6645 0
c (0<=(SATLiteral(726) - aux1648 + SATLiteral(621)))
621 6645 0
726 6645 0
726 621 6644 0
c ((SATLiteral(741) - aux1649 + SATLiteral(606))<=0)
-606 -6647 0
-741 -6647 0
-741 -606 -6648 0
c (0<=(SATLiteral(741) - aux1649 + SATLiteral(606)))
606 6648 0
741 6648 0
741 606 6647 0
c (( - aux1650 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6650 0
-456 -6650 0
-456 -591 -6651 0
c (0<=( - aux1650 + SATLiteral(456) + SATLiteral(591)))
591 6651 0
456 6651 0
456 591 6650 0
c (( - aux1651 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6653 0
-471 -6653 0
-471 -486 -6654 0
c (0<=( - aux1651 + SATLiteral(471) + SATLiteral(486)))
486 6654 0
471 6654 0
471 486 6653 0
c ((SATLiteral(756) + aux1651 - aux1652)<=0)
6653 -6656 0
6654 -6657 0
-756 -6656 0
-756 6653 -6657 0
-756 6654 -6659 0
c (0<=(SATLiteral(756) + aux1651 - aux1652))
-6654 6659 0
-6653 6657 0
756 6659 0
756 -6654 6657 0
756 -6653 6656 0
c ((aux1648 + aux1650 - aux1653)<=0)
6650 -6661 0
6651 -6662 0
6644 -6661 0
6644 6650 -6662 0
6644 6651 -6664 0
6645 -6662 0
6645 6650 -6664 0
6645 6651 -6666 0
c (0<=(aux1648 + aux1650 - aux1653))
-6651 6666 0
-6650 6664 0
-6645 6666 0
-6645 -6651 6664 0
-6645 -6650 6662 0
-6644 6664 0
-6644 -6651 6662 0
-6644 -6650 6661 0
c ((SATLiteral(728) - aux1654 + SATLiteral(623))<=0)
-623 -6668 0
-728 -6668 0
-728 -623 -6669 0
c (0<=(SATLiteral(728) - aux1654 + SATLiteral(623)))
623 6669 0
728 6669 0
728 623 6668 0
c ((SATLiteral(743) - aux1655 + SATLiteral(608))<=0)
-608 -6671 0
-743 -6671 0
-743 -608 -6672 0
c (0<=(SATLiteral(743) - aux1655 + SATLiteral(608)))
608 6672 0
743 6672 0
743 608 6671 0
c (( - aux1656 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6674 0
-458 -6674 0
-458 -593 -6675 0
c (0<=( - aux1656 + SATLiteral(458) + SATLiteral(593)))
593 6675 0
458 6675 0
458 593 6674 0
c (( - aux1657 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6677 0
-473 -6677 0
-473 -488 -6678 0
c (0<=( - aux1657 + SATLiteral(473) + SATLiteral(488)))
488 6678 0
473 6678 0
473 488 6677 0
c ((SATLiteral(758) + aux1657 - aux1658)<=0)
6677 -6680 0
6678 -6681 0
-758 -6680 0
-758 6677 -6681 0
-758 6678 -6683 0
c (0<=(SATLiteral(758) + aux1657 - aux1658))
-6678 6683 0
-6677 6681 0
758 6683 0
758 -6678 6681 0
758 -6677 6680 0
c ((aux1654 + aux1656 - aux1659)<=0)
6674 -6685 0
6675 -6686 0
6668 -6685 0
6668 6674 -6686 0
6668 6675 -6688 0
6669 -6686 0
6669 6674 -6688 0
6669 6675 -6690 0
c (0<=(aux1654 + aux1656 - aux1659))
-6675 6690 0
-6674 6688 0
-6669 6690 0
-6669 -6675 6688 0
-6669 -6674 6686 0
-6668 6688 0
-6668 -6675 6686 0
-6668 -6674 6685 0
c ((SATLiteral(730) - aux1660 + SATLiteral(625))<=0)
-625 -6692 0
-730 -6692 0
-730 -625 -6693 0
c (0<=(SATLiteral(730) - aux1660 + SATLiteral(625)))
625 6693 0
730 6693 0
730 625 6692 0
c ((SATLiteral(745) - aux1661 + SATLiteral(610))<=0)
-610 -6695 0
-745 -6695 0
-745 -610 -6696 0
c (0<=(SATLiteral(745) - aux1661 + SATLiteral(610)))
610 6696 0
745 6696 0
745 610 6695 0
c (( - aux1662 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6698 0
-460 -6698 0
-460 -595 -6699 0
c (0<=( - aux1662 + SATLiteral(460) + SATLiteral(595)))
595 6699 0
460 6699 0
460 595 6698 0
c (( - aux1663 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6701 0
-475 -6701 0
-475 -490 -6702 0
c (0<=( - aux1663 + SATLiteral(475) + SATLiteral(490)))
490 6702 0
475 6702 0
475 490 6701 0
c ((SATLiteral(760) + aux1663 - aux1664)<=0)
6701 -6704 0
6702 -6705 0
-760 -6704 0
-760 6701 -6705 0
-760 6702 -6707 0
c (0<=(SATLiteral(760) + aux1663 - aux1664))
-6702 6707 0
-6701 6705 0
760 6707 0
760 -6702 6705 0
760 -6701 6704 0
c ((aux1660 + aux1662 - aux1665)<=0)
6698 -6709 0
6699 -6710 0
6692 -6709 0
6692 6698 -6710 0
6692 6699 -6712 0
6693 -6710 0
6693 6698 -6712 0
6693 6699 -6714 0
c (0<=(aux1660 + aux1662 - aux1665))
-6699 6714 0
-6698 6712 0
-6693 6714 0
-6693 -6699 6712 0
-6693 -6698 6710 0
-6692 6712 0
-6692 -6699 6710 0
-6692 -6698 6709 0
c ((SATLiteral(732) - aux1666 + SATLiteral(627))<=0)
-627 -6716 0
-732 -6716 0
-732 -627 -6717 0
c (0<=(SATLiteral(732) - aux1666 + SATLiteral(627)))
627 6717 0
732 6717 0
732 627 6716 0
c ((SATLiteral(747) - aux1667 + SATLiteral(612))<=0)
-612 -6719 0
-747 -6719 0
-747 -612 -6720 0
c (0<=(SATLiteral(747) - aux1667 + SATLiteral(612)))
612 6720 0
747 6720 0
747 612 6719 0
c (( - aux1668 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6722 0
-462 -6722 0
-462 -597 -6723 0
c (0<=( - aux1668 + SATLiteral(462) + SATLiteral(597)))
597 6723 0
462 6723 0
462 597 6722 0
c (( - aux1669 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6725 0
-477 -6725 0
-477 -492 -6726 0
c (0<=( - aux1669 + SATLiteral(477) + SATLiteral(492)))
492 6726 0
477 6726 0
477 492 6725 0
c ((SATLiteral(762) + aux1669 - aux1670)<=0)
6725 -6728 0
6726 -6729 0
-762 -6728 0
-762 6725 -6729 0
-762 6726 -6731 0
c (0<=(SATLiteral(762) + aux1669 - aux1670))
-6726 6731 0
-6725 6729 0
762 6731 0
762 -6726 6729 0
762 -6725 6728 0
c ((aux1666 + aux1668 - aux1671)<=0)
6722 -6733 0
6723 -6734 0
6716 -6733 0
6716 6722 -6734 0
6716 6723 -6736 0
6717 -6734 0
6717 6722 -6736 0
6717 6723 -6738 0
c (0<=(aux1666 + aux1668 - aux1671))
-6723 6738 0
-6722 6736 0
-6717 6738 0
-6717 -6723 6736 0
-6717 -6722 6734 0
-6716 6736 0
-6716 -6723 6734 0
-6716 -6722 6733 0
c ((SATLiteral(734) - aux1672 + SATLiteral(629))<=0)
-629 -6740 0
-734 -6740 0
-734 -629 -6741 0
c (0<=(SATLiteral(734) - aux1672 + SATLiteral(629)))
629 6741 0
734 6741 0
734 629 6740 0
c ((SATLiteral(749) - aux1673 + SATLiteral(614))<=0)
-614 -6743 0
-749 -6743 0
-749 -614 -6744 0
c (0<=(SATLiteral(749) - aux1673 + SATLiteral(614)))
614 6744 0
749 6744 0
749 614 6743 0
c (( - aux1674 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6746 0
-464 -6746 0
-464 -599 -6747 0
c (0<=( - aux1674 + SATLiteral(464) + SATLiteral(599)))
599 6747 0
464 6747 0
464 599 6746 0
c (( - aux1675 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6749 0
-479 -6749 0
-479 -494 -6750 0
c (0<=( - aux1675 + SATLiteral(479) + SATLiteral(494)))
494 6750 0
479 6750 0
479 494 6749 0
c ((SATLiteral(764) + aux1675 - aux1676)<=0)
6749 -6752 0
6750 -6753 0
-764 -6752 0
-764 6749 -6753 0
-764 6750 -6755 0
c (0<=(SATLiteral(764) + aux1675 - aux1676))
-6750 6755 0
-6749 6753 0
764 6755 0
764 -6750 6753 0
764 -6749 6752 0
c ((aux1672 + aux1674 - aux1677)<=0)
6746 -6757 0
6747 -6758 0
6740 -6757 0
6740 6746 -6758 0
6740 6747 -6760 0
6741 -6758 0
6741 6746 -6760 0
6741 6747 -6762 0
c (0<=(aux1672 + aux1674 - aux1677))
-6747 6762 0
-6746 6760 0
-6741 6762 0
-6741 -6747 6760 0
-6741 -6746 6758 0
-6740 6760 0
-6740 -6747 6758 0
-6740 -6746 6757 0
c ((SATLiteral(736) - aux1678 + SATLiteral(631))<=0)
-631 -6764 0
-736 -6764 0
-736 -631 -6765 0
c (0<=(SATLiteral(736) - aux1678 + SATLiteral(631)))
631 6765 0
736 6765 0
736 631 6764 0
c ((SATLiteral(751) - aux1679 + SATLiteral(616))<=0)
-616 -6767 0
-751 -6767 0
-751 -616 -6768 0
c (0<=(SATLiteral(751) - aux1679 + SATLiteral(616)))
616 6768 0
751 6768 0
751 616 6767 0
c (( - aux1680 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6770 0
-466 -6770 0
-466 -601 -6771 0
c (0<=( - aux1680 + SATLiteral(466) + SATLiteral(601)))
601 6771 0
466 6771 0
466 601 6770 0
c (( - aux1681 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6773 0
-481 -6773 0
-481 -496 -6774 0
c (0<=( - aux1681 + SATLiteral(481) + SATLiteral(496)))
496 6774 0
481 6774 0
481 496 6773 0
c ((SATLiteral(766) + aux1681 - aux1682)<=0)
6773 -6776 0
6774 -6777 0
-766 -6776 0
-766 6773 -6777 0
-766 6774 -6779 0
c (0<=(SATLiteral(766) + aux1681 - aux1682))
-6774 6779 0
-6773 6777 0
766 6779 0
766 -6774 6777 0
766 -6773 6776 0
c ((aux1678 + aux1680 - aux1683)<=0)
6770 -6781 0
6771 -6782 0
6764 -6781 0
6764 6770 -6782 0
6764 6771 -6784 0
6765 -6782 0
6765 6770 -6784 0
6765 6771 -6786 0
c (0<=(aux1678 + aux1680 - aux1683))
-6771 6786 0
-6770 6784 0
-6765 6786 0
-6765 -6771 6784 0
-6765 -6770 6782 0
-6764 6784 0
-6764 -6771 6782 0
-6764 -6770 6781 0
c ((SATLiteral(-735) - aux1684 + SATLiteral(-630))<=0)
630 -6788 0
735 -6788 0
735 630 -6789 0
c (0<=(SATLiteral(-735) - aux1684 + SATLiteral(-630)))
-630 6789 0
-735 6789 0
-735 -630 6788 0
c ((SATLiteral(-750) - aux1685 + SATLiteral(-615))<=0)
615 -6791 0
750 -6791 0
750 615 -6792 0
c (0<=(SATLiteral(-750) - aux1685 + SATLiteral(-615)))
-615 6792 0
-750 6792 0
-750 -615 6791 0
c (( - aux1686 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6794 0
465 -6794 0
465 600 -6795 0
c (0<=( - aux1686 + SATLiteral(-465) + SATLiteral(-600)))
-600 6795 0
-465 6795 0
-465 -600 6794 0
c (( - aux1687 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6797 0
480 -6797 0
480 495 -6798 0
c (0<=( - aux1687 + SATLiteral(-480) + SATLiteral(-495)))
-495 6798 0
-480 6798 0
-480 -495 6797 0
c ((SATLiteral(-765) + aux1687 - aux1688)<=0)
6797 -6800 0
6798 -6801 0
765 -6800 0
765 6797 -6801 0
765 6798 -6803 0
c (0<=(SATLiteral(-765) + aux1687 - aux1688))
-6798 6803 0
-6797 6801 0
-765 6803 0
-765 -6798 6801 0
-765 -6797 6800 0
c ((aux1684 + aux1686 - aux1689)<=0)
6794 -6805 0
6795 -6806 0
6788 -6805 0
6788 6794 -6806 0
6788 6795 -6808 0
6789 -6806 0
6789 6794 -6808 0
6789 6795 -6810 0
c (0<=(aux1684 + aux1686 - aux1689))
-6795 6810 0
-6794 6808 0
-6789 6810 0
-6789 -6795 6808 0
-6789 -6794 6806 0
-6788 6808 0
-6788 -6795 6806 0
-6788 -6794 6805 0
c ((SATLiteral(767) - aux1690 + SATLiteral(662))<=0)
-662 -6812 0
-767 -6812 0
-767 -662 -6813 0
c (0<=(SATLiteral(767) - aux1690 + SATLiteral(662)))
662 6813 0
767 6813 0
767 662 6812 0
c ((SATLiteral(782) - aux1691 + SATLiteral(647))<=0)
-647 -6815 0
-782 -6815 0
-782 -647 -6816 0
c (0<=(SATLiteral(782) - aux1691 + SATLiteral(647)))
647 6816 0
782 6816 0
782 647 6815 0
c (( - aux1692 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6818 0
-497 -6818 0
-497 -632 -6819 0
c (0<=( - aux1692 + SATLiteral(497) + SATLiteral(632)))
632 6819 0
497 6819 0
497 632 6818 0
c (( - aux1693 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6821 0
-512 -6821 0
-512 -527 -6822 0
c (0<=( - aux1693 + SATLiteral(512) + SATLiteral(527)))
527 6822 0
512 6822 0
512 527 6821 0
c ((SATLiteral(797) + aux1693 - aux1694)<=0)
6821 -6824 0
6822 -6825 0
-797 -6824 0
-797 6821 -6825 0
-797 6822 -6827 0
c (0<=(SATLiteral(797) + aux1693 - aux1694))
-6822 6827 0
-6821 6825 0
797 6827 0
797 -6822 6825 0
797 -6821 6824 0
c ((aux1690 + aux1692 - aux1695)<=0)
6818 -6829 0
6819 -6830 0
6812 -6829 0
6812 6818 -6830 0
6812 6819 -6832 0
6813 -6830 0
6813 6818 -6832 0
6813 6819 -6834 0
c (0<=(aux1690 + aux1692 - aux1695))
-6819 6834 0
-6818 6832 0
-6813 6834 0
-6813 -6819 6832 0
-6813 -6818 6830 0
-6812 6832 0
-6812 -6819 6830 0
-6812 -6818 6829 0
c ((SATLiteral(769) - aux1696 + SATLiteral(664))<=0)
-664 -6836 0
-769 -6836 0
-769 -664 -6837 0
c (0<=(SATLiteral(769) - aux1696 + SATLiteral(664)))
664 6837 0
769 6837 0
769 664 6836 0
c ((SATLiteral(784) - aux1697 + SATLiteral(649))<=0)
-649 -6839 0
-784 -6839 0
-784 -649 -6840 0
c (0<=(SATLiteral(784) - aux1697 + SATLiteral(649)))
649 6840 0
784 6840 0
784 649 6839 0
c (( - aux1698 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -6842 0
-499 -6842 0
-499 -634 -6843 0
c (0<=( - aux1698 + SATLiteral(499) + SATLiteral(634)))
634 6843 0
499 6843 0
499 634 6842 0
c (( - aux1699 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -6845 0
-514 -6845 0
-514 -529 -6846 0
c (0<=( - aux1699 + SATLiteral(514) + SATLiteral(529)))
529 6846 0
514 6846 0
514 529 6845 0
c ((SATLiteral(799) + aux1699 - aux1700)<=0)
6845 -6848 0
6846 -6849 0
-799 -6848 0
-799 6845 -6849 0
-799 6846 -6851 0
c (0<=(SATLiteral(799) + aux1699 - aux1700))
-6846 6851 0
-6845 6849 0
799 6851 0
799 -6846 6849 0
799 -6845 6848 0
c ((aux1696 + aux1698 - aux1701)<=0)
6842 -6853 0
6843 -6854 0
6836 -6853 0
6836 6842 -6854 0
6836 6843 -6856 0
6837 -6854 0
6837 6842 -6856 0
6837 6843 -6858 0
c (0<=(aux1696 + aux1698 - aux1701))
-6843 6858 0
-6842 6856 0
-6837 6858 0
-6837 -6843 6856 0
-6837 -6842 6854 0
-6836 6856 0
-6836 -6843 6854 0
-6836 -6842 6853 0
c ((SATLiteral(771) - aux1702 + SATLiteral(666))<=0)
-666 -6860 0
-771 -6860 0
-771 -666 -6861 0
c (0<=(SATLiteral(771) - aux1702 + SATLiteral(666)))
666 6861 0
771 6861 0
771 666 6860 0
c ((SATLiteral(786) - aux1703 + SATLiteral(651))<=0)
-651 -6863 0
-786 -6863 0
-786 -651 -6864 0
c (0<=(SATLiteral(786) - aux1703 + SATLiteral(651)))
651 6864 0
786 6864 0
786 651 6863 0
c (( - aux1704 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -6866 0
-501 -6866 0
-501 -636 -6867 0
c (0<=( - aux1704 + SATLiteral(501) + SATLiteral(636)))
636 6867 0
501 6867 0
501 636 6866 0
c (( - aux1705 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -6869 0
-516 -6869 0
-516 -531 -6870 0
c (0<=( - aux1705 + SATLiteral(516) + SATLiteral(531)))
531 6870 0
516 6870 0
516 531 6869 0
c ((SATLiteral(801) + aux1705 - aux1706)<=0)
6869 -6872 0
6870 -6873 0
-801 -6872 0
-801 6869 -6873 0
-801 6870 -6875 0
c (0<=(SATLiteral(801) + aux1705 - aux1706))
-6870 6875 0
-6869 6873 0
801 6875 0
801 -6870 6873 0
801 -6869 6872 0
c ((aux1702 + aux1704 - aux1707)<=0)
6866 -6877 0
6867 -6878 0
6860 -6877 0
6860 6866 -6878 0
6860 6867 -6880 0
6861 -6878 0
6861 6866 -6880 0
6861 6867 -6882 0
c (0<=(aux1702 + aux1704 - aux1707))
-6867 6882 0
-6866 6880 0
-6861 6882 0
-6861 -6867 6880 0
-6861 -6866 6878 0
-6860 6880 0
-6860 -6867 6878 0
-6860 -6866 6877 0
c ((SATLiteral(773) - aux1708 + SATLiteral(668))<=0)
-668 -6884 0
-773 -6884 0
-773 -668 -6885 0
c (0<=(SATLiteral(773) - aux1708 + SATLiteral(668)))
668 6885 0
773 6885 0
773 668 6884 0
c ((SATLiteral(788) - aux1709 + SATLiteral(653))<=0)
-653 -6887 0
-788 -6887 0
-788 -653 -6888 0
c (0<=(SATLiteral(788) - aux1709 + SATLiteral(653)))
653 6888 0
788 6888 0
788 653 6887 0
c (( - aux1710 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -6890 0
-503 -6890 0
-503 -638 -6891 0
c (0<=( - aux1710 + SATLiteral(503) + SATLiteral(638)))
638 6891 0
503 6891 0
503 638 6890 0
c (( - aux1711 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -6893 0
-518 -6893 0
-518 -533 -6894 0
c (0<=( - aux1711 + SATLiteral(518) + SATLiteral(533)))
533 6894 0
518 6894 0
518 533 6893 0
c ((SATLiteral(803) + aux1711 - aux1712)<=0)
6893 -6896 0
6894 -6897 0
-803 -6896 0
-803 6893 -6897 0
-803 6894 -6899 0
c (0<=(SATLiteral(803) + aux1711 - aux1712))
-6894 6899 0
-6893 6897 0
803 6899 0
803 -6894 6897 0
803 -6893 6896 0
c ((aux1708 + aux1710 - aux1713)<=0)
6890 -6901 0
6891 -6902 0
6884 -6901 0
6884 6890 -6902 0
6884 6891 -6904 0
6885 -6902 0
6885 6890 -6904 0
6885 6891 -6906 0
c (0<=(aux1708 + aux1710 - aux1713))
-6891 6906 0
-6890 6904 0
-6885 6906 0
-6885 -6891 6904 0
-6885 -6890 6902 0
-6884 6904 0
-6884 -6891 6902 0
-6884 -6890 6901 0
c ((SATLiteral(775) - aux1714 + SATLiteral(670))<=0)
-670 -6908 0
-775 -6908 0
-775 -670 -6909 0
c (0<=(SATLiteral(775) - aux1714 + SATLiteral(670)))
670 6909 0
775 6909 0
775 670 6908 0
c ((SATLiteral(790) - aux1715 + SATLiteral(655))<=0)
-655 -6911 0
-790 -6911 0
-790 -655 -6912 0
c (0<=(SATLiteral(790) - aux1715 + SATLiteral(655)))
655 6912 0
790 6912 0
790 655 6911 0
c (( - aux1716 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -6914 0
-505 -6914 0
-505 -640 -6915 0
c (0<=( - aux1716 + SATLiteral(505) + SATLiteral(640)))
640 6915 0
505 6915 0
505 640 6914 0
c (( - aux1717 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -6917 0
-520 -6917 0
-520 -535 -6918 0
c (0<=( - aux1717 + SATLiteral(520) + SATLiteral(535)))
535 6918 0
520 6918 0
520 535 6917 0
c ((SATLiteral(805) + aux1717 - aux1718)<=0)
6917 -6920 0
6918 -6921 0
-805 -6920 0
-805 6917 -6921 0
-805 6918 -6923 0
c (0<=(SATLiteral(805) + aux1717 - aux1718))
-6918 6923 0
-6917 6921 0
805 6923 0
805 -6918 6921 0
805 -6917 6920 0
c ((aux1714 + aux1716 - aux1719)<=0)
6914 -6925 0
6915 -6926 0
6908 -6925 0
6908 6914 -6926 0
6908 6915 -6928 0
6909 -6926 0
6909 6914 -6928 0
6909 6915 -6930 0
c (0<=(aux1714 + aux1716 - aux1719))
-6915 6930 0
-6914 6928 0
-6909 6930 0
-6909 -6915 6928 0
-6909 -6914 6926 0
-6908 6928 0
-6908 -6915 6926 0
-6908 -6914 6925 0
c ((SATLiteral(777) - aux1720 + SATLiteral(672))<=0)
-672 -6932 0
-777 -6932 0
-777 -672 -6933 0
c (0<=(SATLiteral(777) - aux1720 + SATLiteral(672)))
672 6933 0
777 6933 0
777 672 6932 0
c ((SATLiteral(792) - aux1721 + SATLiteral(657))<=0)
-657 -6935 0
-792 -6935 0
-792 -657 -6936 0
c (0<=(SATLiteral(792) - aux1721 + SATLiteral(657)))
657 6936 0
792 6936 0
792 657 6935 0
c (( - aux1722 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -6938 0
-507 -6938 0
-507 -642 -6939 0
c (0<=( - aux1722 + SATLiteral(507) + SATLiteral(642)))
642 6939 0
507 6939 0
507 642 6938 0
c (( - aux1723 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -6941 0
-522 -6941 0
-522 -537 -6942 0
c (0<=( - aux1723 + SATLiteral(522) + SATLiteral(537)))
537 6942 0
522 6942 0
522 537 6941 0
c ((SATLiteral(807) + aux1723 - aux1724)<=0)
6941 -6944 0
6942 -6945 0
-807 -6944 0
-807 6941 -6945 0
-807 6942 -6947 0
c (0<=(SATLiteral(807) + aux1723 - aux1724))
-6942 6947 0
-6941 6945 0
807 6947 0
807 -6942 6945 0
807 -6941 6944 0
c ((aux1720 + aux1722 - aux1725)<=0)
6938 -6949 0
6939 -6950 0
6932 -6949 0
6932 6938 -6950 0
6932 6939 -6952 0
6933 -6950 0
6933 6938 -6952 0
6933 6939 -6954 0
c (0<=(aux1720 + aux1722 - aux1725))
-6939 6954 0
-6938 6952 0
-6933 6954 0
-6933 -6939 6952 0
-6933 -6938 6950 0
-6932 6952 0
-6932 -6939 6950 0
-6932 -6938 6949 0
c ((SATLiteral(779) - aux1726 + SATLiteral(674))<=0)
-674 -6956 0
-779 -6956 0
-779 -674 -6957 0
c (0<=(SATLiteral(779) - aux1726 + SATLiteral(674)))
674 6957 0
779 6957 0
779 674 6956 0
c ((SATLiteral(794) - aux1727 + SATLiteral(659))<=0)
-659 -6959 0
-794 -6959 0
-794 -659 -6960 0
c (0<=(SATLiteral(794) - aux1727 + SATLiteral(659)))
659 6960 0
794 6960 0
794 659 6959 0
c (( - aux1728 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -6962 0
-509 -6962 0
-509 -644 -6963 0
c (0<=( - aux1728 + SATLiteral(509) + SATLiteral(644)))
644 6963 0
509 6963 0
509 644 6962 0
c (( - aux1729 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -6965 0
-524 -6965 0
-524 -539 -6966 0
c (0<=( - aux1729 + SATLiteral(524) + SATLiteral(539)))
539 6966 0
524 6966 0
524 539 6965 0
c ((SATLiteral(809) + aux1729 - aux1730)<=0)
6965 -6968 0
6966 -6969 0
-809 -6968 0
-809 6965 -6969 0
-809 6966 -6971 0
c (0<=(SATLiteral(809) + aux1729 - aux1730))
-6966 6971 0
-6965 6969 0
809 6971 0
809 -6966 6969 0
809 -6965 6968 0
c ((aux1726 + aux1728 - aux1731)<=0)
6962 -6973 0
6963 -6974 0
6956 -6973 0
6956 6962 -6974 0
6956 6963 -6976 0
6957 -6974 0
6957 6962 -6976 0
6957 6963 -6978 0
c (0<=(aux1726 + aux1728 - aux1731))
-6963 6978 0
-6962 6976 0
-6957 6978 0
-6957 -6963 6976 0
-6957 -6962 6974 0
-6956 6976 0
-6956 -6963 6974 0
-6956 -6962 6973 0
c ((SATLiteral(781) - aux1732 + SATLiteral(676))<=0)
-676 -6980 0
-781 -6980 0
-781 -676 -6981 0
c (0<=(SATLiteral(781) - aux1732 + SATLiteral(676)))
676 6981 0
781 6981 0
781 676 6980 0
c ((SATLiteral(796) - aux1733 + SATLiteral(661))<=0)
-661 -6983 0
-796 -6983 0
-796 -661 -6984 0
c (0<=(SATLiteral(796) - aux1733 + SATLiteral(661)))
661 6984 0
796 6984 0
796 661 6983 0
c (( - aux1734 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -6986 0
-511 -6986 0
-511 -646 -6987 0
c (0<=( - aux1734 + SATLiteral(511) + SATLiteral(646)))
646 6987 0
511 6987 0
511 646 6986 0
c (( - aux1735 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -6989 0
-526 -6989 0
-526 -541 -6990 0
c (0<=( - aux1735 + SATLiteral(526) + SATLiteral(541)))
541 6990 0
526 6990 0
526 541 6989 0
c ((SATLiteral(811) + aux1735 - aux1736)<=0)
6989 -6992 0
6990 -6993 0
-811 -6992 0
-811 6989 -6993 0
-811 6990 -6995 0
c (0<=(SATLiteral(811) + aux1735 - aux1736))
-6990 6995 0
-6989 6993 0
811 6995 0
811 -6990 6993 0
811 -6989 6992 0
c ((aux1732 + aux1734 - aux1737)<=0)
6986 -6997 0
6987 -6998 0
6980 -6997 0
6980 6986 -6998 0
6980 6987 -7000 0
6981 -6998 0
6981 6986 -7000 0
6981 6987 -7002 0
c (0<=(aux1732 + aux1734 - aux1737))
-6987 7002 0
-6986 7000 0
-6981 7002 0
-6981 -6987 7000 0
-6981 -6986 6998 0
-6980 7000 0
-6980 -6987 6998 0
-6980 -6986 6997 0
c ((SATLiteral(-780) - aux1738 + SATLiteral(-675))<=0)
675 -7004 0
780 -7004 0
780 675 -7005 0
c (0<=(SATLiteral(-780) - aux1738 + SATLiteral(-675)))
-675 7005 0
-780 7005 0
-780 -675 7004 0
c ((SATLiteral(-795) - aux1739 + SATLiteral(-660))<=0)
660 -7007 0
795 -7007 0
795 660 -7008 0
c (0<=(SATLiteral(-795) - aux1739 + SATLiteral(-660)))
-660 7008 0
-795 7008 0
-795 -660 7007 0
c (( - aux1740 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7010 0
510 -7010 0
510 645 -7011 0
c (0<=( - aux1740 + SATLiteral(-510) + SATLiteral(-645)))
-645 7011 0
-510 7011 0
-510 -645 7010 0
c (( - aux1741 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7013 0
525 -7013 0
525 540 -7014 0
c (0<=( - aux1741 + SATLiteral(-525) + SATLiteral(-540)))
-540 7014 0
-525 7014 0
-525 -540 7013 0
c ((SATLiteral(-810) + aux1741 - aux1742)<=0)
7013 -7016 0
7014 -7017 0
810 -7016 0
810 7013 -7017 0
810 7014 -7019 0
c (0<=(SATLiteral(-810) + aux1741 - aux1742))
-7014 7019 0
-7013 7017 0
-810 7019 0
-810 -7014 7017 0
-810 -7013 7016 0
c ((aux1738 + aux1740 - aux1743)<=0)
7010 -7021 0
7011 -7022 0
7004 -7021 0
7004 7010 -7022 0
7004 7011 -7024 0
7005 -7022 0
7005 7010 -7024 0
7005 7011 -7026 0
c (0<=(aux1738 + aux1740 - aux1743))
-7011 7026 0
-7010 7024 0
-7005 7026 0
-7005 -7011 7024 0
-7005 -7010 7022 0
-7004 7024 0
-7004 -7011 7022 0
-7004 -7010 7021 0
c ((SATLiteral(947) - aux1744 + SATLiteral(842))<=0)
-842 -7028 0
-947 -7028 0
-947 -842 -7029 0
c (0<=(SATLiteral(947) - aux1744 + SATLiteral(842)))
842 7029 0
947 7029 0
947 842 7028 0
c ((SATLiteral(962) - aux1745 + SATLiteral(827))<=0)
-827 -7031 0
-962 -7031 0
-962 -827 -7032 0
c (0<=(SATLiteral(962) - aux1745 + SATLiteral(827)))
827 7032 0
962 7032 0
962 827 7031 0
c (( - aux1746 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7034 0
-1082 -7034 0
-1082 -812 -7035 0
c (0<=( - aux1746 + SATLiteral(1082) + SATLiteral(812)))
812 7035 0
1082 7035 0
1082 812 7034 0
c (( - aux1747 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7037 0
-1097 -7037 0
-1097 -1112 -7038 0
c (0<=( - aux1747 + SATLiteral(1097) + SATLiteral(1112)))
1112 7038 0
1097 7038 0
1097 1112 7037 0
c ((SATLiteral(977) + aux1747 - aux1748)<=0)
7037 -7040 0
7038 -7041 0
-977 -7040 0
-977 7037 -7041 0
-977 7038 -7043 0
c (0<=(SATLiteral(977) + aux1747 - aux1748))
-7038 7043 0
-7037 7041 0
977 7043 0
977 -7038 7041 0
977 -7037 7040 0
c ((aux1744 + aux1746 - aux1749)<=0)
7034 -7045 0
7035 -7046 0
7028 -7045 0
7028 7034 -7046 0
7028 7035 -7048 0
7029 -7046 0
7029 7034 -7048 0
7029 7035 -7050 0
c (0<=(aux1744 + aux1746 - aux1749))
-7035 7050 0
-7034 7048 0
-7029 7050 0
-7029 -7035 7048 0
-7029 -7034 7046 0
-7028 7048 0
-7028 -7035 7046 0
-7028 -7034 7045 0
c ((SATLiteral(949) - aux1750 + SATLiteral(844))<=0)
-844 -7052 0
-949 -7052 0
-949 -844 -7053 0
c (0<=(SATLiteral(949) - aux1750 + SATLiteral(844)))
844 7053 0
949 7053 0
949 844 7052 0
c ((SATLiteral(964) - aux1751 + SATLiteral(829))<=0)
-829 -7055 0
-964 -7055 0
-964 -829 -7056 0
c (0<=(SATLiteral(964) - aux1751 + SATLiteral(829)))
829 7056 0
964 7056 0
964 829 7055 0
c (( - aux1752 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7058 0
-1084 -7058 0
-1084 -814 -7059 0
c (0<=( - aux1752 + SATLiteral(1084) + SATLiteral(814)))
814 7059 0
1084 7059 0
1084 814 7058 0
c (( - aux1753 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7061 0
-1099 -7061 0
-1099 -1114 -7062 0
c (0<=( - aux1753 + SATLiteral(1099) + SATLiteral(1114)))
1114 7062 0
1099 7062 0
1099 1114 7061 0
c ((SATLiteral(979) + aux1753 - aux1754)<=0)
7061 -7064 0
7062 -7065 0
-979 -7064 0
-979 7061 -7065 0
-979 7062 -7067 0
c (0<=(SATLiteral(979) + aux1753 - aux1754))
-7062 7067 0
-7061 7065 0
979 7067 0
979 -7062 7065 0
979 -7061 7064 0
c ((aux1750 + aux1752 - aux1755)<=0)
7058 -7069 0
7059 -7070 0
7052 -7069 0
7052 7058 -7070 0
7052 7059 -7072 0
7053 -7070 0
7053 7058 -7072 0
7053 7059 -7074 0
c (0<=(aux1750 + aux1752 - aux1755))
-7059 7074 0
-7058 7072 0
-7053 7074 0
-7053 -7059 7072 0
-7053 -7058 7070 0
-7052 7072 0
-7052 -7059 7070 0
-7052 -7058 7069 0
c ((SATLiteral(951) - aux1756 + SATLiteral(846))<=0)
-846 -7076 0
-951 -7076 0
-951 -846 -7077 0
c (0<=(SATLiteral(951) - aux1756 + SATLiteral(846)))
846 7077 0
951 7077 0
951 846 7076 0
c ((SATLiteral(966) - aux1757 + SATLiteral(831))<=0)
-831 -7079 0
-966 -7079 0
-966 -831 -7080 0
c (0<=(SATLiteral(966) - aux1757 + SATLiteral(831)))
831 7080 0
966 7080 0
966 831 7079 0
c (( - aux1758 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7082 0
-1086 -7082 0
-1086 -816 -7083 0
c (0<=( - aux1758 + SATLiteral(1086) + SATLiteral(816)))
816 7083 0
1086 7083 0
1086 816 7082 0
c (( - aux1759 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7085 0
-1101 -7085 0
-1101 -1116 -7086 0
c (0<=( - aux1759 + SATLiteral(1101) + SATLiteral(1116)))
1116 7086 0
1101 7086 0
1101 1116 7085 0
c ((SATLiteral(981) + aux1759 - aux1760)<=0)
7085 -7088 0
7086 -7089 0
-981 -7088 0
-981 7085 -7089 0
-981 7086 -7091 0
c (0<=(SATLiteral(981) + aux1759 - aux1760))
-7086 7091 0
-7085 7089 0
981 7091 0
981 -7086 7089 0
981 -7085 7088 0
c ((aux1756 + aux1758 - aux1761)<=0)
7082 -7093 0
7083 -7094 0
7076 -7093 0
7076 7082 -7094 0
7076 7083 -7096 0
7077 -7094 0
7077 7082 -7096 0
7077 7083 -7098 0
c (0<=(aux1756 + aux1758 - aux1761))
-7083 7098 0
-7082 7096 0
-7077 7098 0
-7077 -7083 7096 0
-7077 -7082 7094 0
-7076 7096 0
-7076 -7083 7094 0
-7076 -7082 7093 0
c ((SATLiteral(953) - aux1762 + SATLiteral(848))<=0)
-848 -7100 0
-953 -7100 0
-953 -848 -7101 0
c (0<=(SATLiteral(953) - aux1762 + SATLiteral(848)))
848 7101 0
953 7101 0
953 848 7100 0
c ((SATLiteral(968) - aux1763 + SATLiteral(833))<=0)
-833 -7103 0
-968 -7103 0
-968 -833 -7104 0
c (0<=(SATLiteral(968) - aux1763 + SATLiteral(833)))
833 7104 0
968 7104 0
968 833 7103 0
c (( - aux1764 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7106 0
-1088 -7106 0
-1088 -818 -7107 0
c (0<=( - aux1764 + SATLiteral(1088) + SATLiteral(818)))
818 7107 0
1088 7107 0
1088 818 7106 0
c (( - aux1765 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7109 0
-1103 -7109 0
-1103 -1118 -7110 0
c (0<=( - aux1765 + SATLiteral(1103) + SATLiteral(1118)))
1118 7110 0
1103 7110 0
1103 1118 7109 0
c ((SATLiteral(983) + aux1765 - aux1766)<=0)
7109 -7112 0
7110 -7113 0
-983 -7112 0
-983 7109 -7113 0
-983 7110 -7115 0
c (0<=(SATLiteral(983) + aux1765 - aux1766))
-7110 7115 0
-7109 7113 0
983 7115 0
983 -7110 7113 0
983 -7109 7112 0
c ((aux1762 + aux1764 - aux1767)<=0)
7106 -7117 0
7107 -7118 0
7100 -7117 0
7100 7106 -7118 0
7100 7107 -7120 0
7101 -7118 0
7101 7106 -7120 0
7101 7107 -7122 0
c (0<=(aux1762 + aux1764 - aux1767))
-7107 7122 0
-7106 7120 0
-7101 7122 0
-7101 -7107 7120 0
-7101 -7106 7118 0
-7100 7120 0
-7100 -7107 7118 0
-7100 -7106 7117 0
c ((SATLiteral(955) - aux1768 + SATLiteral(850))<=0)
-850 -7124 0
-955 -7124 0
-955 -850 -7125 0
c (0<=(SATLiteral(955) - aux1768 + SATLiteral(850)))
850 7125 0
955 7125 0
955 850 7124 0
c ((SATLiteral(970) - aux1769 + SATLiteral(835))<=0)
-835 -7127 0
-970 -7127 0
-970 -835 -7128 0
c (0<=(SATLiteral(970) - aux1769 + SATLiteral(835)))
835 7128 0
970 7128 0
970 835 7127 0
c (( - aux1770 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7130 0
-1090 -7130 0
-1090 -820 -7131 0
c (0<=( - aux1770 + SATLiteral(1090) + SATLiteral(820)))
820 7131 0
1090 7131 0
1090 820 7130 0
c (( - aux1771 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7133 0
-1105 -7133 0
-1105 -1120 -7134 0
c (0<=( - aux1771 + SATLiteral(1105) + SATLiteral(1120)))
1120 7134 0
1105 7134 0
1105 1120 7133 0
c ((SATLiteral(985) + aux1771 - aux1772)<=0)
7133 -7136 0
7134 -7137 0
-985 -7136 0
-985 7133 -7137 0
-985 7134 -7139 0
c (0<=(SATLiteral(985) + aux1771 - aux1772))
-7134 7139 0
-7133 7137 0
985 7139 0
985 -7134 7137 0
985 -7133 7136 0
c ((aux1768 + aux1770 - aux1773)<=0)
7130 -7141 0
7131 -7142 0
7124 -7141 0
7124 7130 -7142 0
7124 7131 -7144 0
7125 -7142 0
7125 7130 -7144 0
7125 7131 -7146 0
c (0<=(aux1768 + aux1770 - aux1773))
-7131 7146 0
-7130 7144 0
-7125 7146 0
-7125 -7131 7144 0
-7125 -7130 7142 0
-7124 7144 0
-7124 -7131 7142 0
-7124 -7130 7141 0
c ((SATLiteral(957) - aux1774 + SATLiteral(852))<=0)
-852 -7148 0
-957 -7148 0
-957 -852 -7149 0
c (0<=(SATLiteral(957) - aux1774 + SATLiteral(852)))
852 7149 0
957 7149 0
957 852 7148 0
c ((SATLiteral(972) - aux1775 + SATLiteral(837))<=0)
-837 -7151 0
-972 -7151 0
-972 -837 -7152 0
c (0<=(SATLiteral(972) - aux1775 + SATLiteral(837)))
837 7152 0
972 7152 0
972 837 7151 0
c (( - aux1776 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7154 0
-1092 -7154 0
-1092 -822 -7155 0
c (0<=( - aux1776 + SATLiteral(1092) + SATLiteral(822)))
822 7155 0
1092 7155 0
1092 822 7154 0
c (( - aux1777 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7157 0
-1107 -7157 0
-1107 -1122 -7158 0
c (0<=( - aux1777 + SATLiteral(1107) + SATLiteral(1122)))
1122 7158 0
1107 7158 0
1107 1122 7157 0
c ((SATLiteral(987) + aux1777 - aux1778)<=0)
7157 -7160 0
7158 -7161 0
-987 -7160 0
-987 7157 -7161 0
-987 7158 -7163 0
c (0<=(SATLiteral(987) + aux1777 - aux1778))
-7158 7163 0
-7157 7161 0
987 7163 0
987 -7158 7161 0
987 -7157 7160 0
c ((aux1774 + aux1776 - aux1779)<=0)
7154 -7165 0
7155 -7166 0
7148 -7165 0
7148 7154 -7166 0
7148 7155 -7168 0
7149 -7166 0
7149 7154 -7168 0
7149 7155 -7170 0
c (0<=(aux1774 + aux1776 - aux1779))
-7155 7170 0
-7154 7168 0
-7149 7170 0
-7149 -7155 7168 0
-7149 -7154 7166 0
-7148 7168 0
-7148 -7155 7166 0
-7148 -7154 7165 0
c ((SATLiteral(959) - aux1780 + SATLiteral(854))<=0)
-854 -7172 0
-959 -7172 0
-959 -854 -7173 0
c (0<=(SATLiteral(959) - aux1780 + SATLiteral(854)))
854 7173 0
959 7173 0
959 854 7172 0
c ((SATLiteral(974) - aux1781 + SATLiteral(839))<=0)
-839 -7175 0
-974 -7175 0
-974 -839 -7176 0
c (0<=(SATLiteral(974) - aux1781 + SATLiteral(839)))
839 7176 0
974 7176 0
974 839 7175 0
c (( - aux1782 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7178 0
-1094 -7178 0
-1094 -824 -7179 0
c (0<=( - aux1782 + SATLiteral(1094) + SATLiteral(824)))
824 7179 0
1094 7179 0
1094 824 7178 0
c (( - aux1783 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7181 0
-1109 -7181 0
-1109 -1124 -7182 0
c (0<=( - aux1783 + SATLiteral(1109) + SATLiteral(1124)))
1124 7182 0
1109 7182 0
1109 1124 7181 0
c ((SATLiteral(989) + aux1783 - aux1784)<=0)
7181 -7184 0
7182 -7185 0
-989 -7184 0
-989 7181 -7185 0
-989 7182 -7187 0
c (0<=(SATLiteral(989) + aux1783 - aux1784))
-7182 7187 0
-7181 7185 0
989 7187 0
989 -7182 7185 0
989 -7181 7184 0
c ((aux1780 + aux1782 - aux1785)<=0)
7178 -7189 0
7179 -7190 0
7172 -7189 0
7172 7178 -7190 0
7172 7179 -7192 0
7173 -7190 0
7173 7178 -7192 0
7173 7179 -7194 0
c (0<=(aux1780 + aux1782 - aux1785))
-7179 7194 0
-7178 7192 0
-7173 7194 0
-7173 -7179 7192 0
-7173 -7178 7190 0
-7172 7192 0
-7172 -7179 7190 0
-7172 -7178 7189 0
c ((SATLiteral(961) - aux1786 + SATLiteral(856))<=0)
-856 -7196 0
-961 -7196 0
-961 -856 -7197 0
c (0<=(SATLiteral(961) - aux1786 + SATLiteral(856)))
856 7197 0
961 7197 0
961 856 7196 0
c ((SATLiteral(976) - aux1787 + SATLiteral(841))<=0)
-841 -7199 0
-976 -7199 0
-976 -841 -7200 0
c (0<=(SATLiteral(976) - aux1787 + SATLiteral(841)))
841 7200 0
976 7200 0
976 841 7199 0
c (( - aux1788 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7202 0
-1096 -7202 0
-1096 -826 -7203 0
c (0<=( - aux1788 + SATLiteral(1096) + SATLiteral(826)))
826 7203 0
1096 7203 0
1096 826 7202 0
c (( - aux1789 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7205 0
-1111 -7205 0
-1111 -1126 -7206 0
c (0<=( - aux1789 + SATLiteral(1111) + SATLiteral(1126)))
1126 7206 0
1111 7206 0
1111 1126 7205 0
c ((SATLiteral(991) + aux1789 - aux1790)<=0)
7205 -7208 0
7206 -7209 0
-991 -7208 0
-991 7205 -7209 0
-991 7206 -7211 0
c (0<=(SATLiteral(991) + aux1789 - aux1790))
-7206 7211 0
-7205 7209 0
991 7211 0
991 -7206 7209 0
991 -7205 7208 0
c ((aux1786 + aux1788 - aux1791)<=0)
7202 -7213 0
7203 -7214 0
7196 -7213 0
7196 7202 -7214 0
7196 7203 -7216 0
7197 -7214 0
7197 7202 -7216 0
7197 7203 -7218 0
c (0<=(aux1786 + aux1788 - aux1791))
-7203 7218 0
-7202 7216 0
-7197 7218 0
-7197 -7203 7216 0
-7197 -7202 7214 0
-7196 7216 0
-7196 -7203 7214 0
-7196 -7202 7213 0
c ((SATLiteral(-960) - aux1792 + SATLiteral(-855))<=0)
855 -7220 0
960 -7220 0
960 855 -7221 0
c (0<=(SATLiteral(-960) - aux1792 + SATLiteral(-855)))
-855 7221 0
-960 7221 0
-960 -855 7220 0
c ((SATLiteral(-975) - aux1793 + SATLiteral(-840))<=0)
840 -7223 0
975 -7223 0
975 840 -7224 0
c (0<=(SATLiteral(-975) - aux1793 + SATLiteral(-840)))
-840 7224 0
-975 7224 0
-975 -840 7223 0
c (( - aux1794 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7226 0
1095 -7226 0
1095 825 -7227 0
c (0<=( - aux1794 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7227 0
-1095 7227 0
-1095 -825 7226 0
c (( - aux1795 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7229 0
1110 -7229 0
1110 1125 -7230 0
c (0<=( - aux1795 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7230 0
-1110 7230 0
-1110 -1125 7229 0
c ((SATLiteral(-990) + aux1795 - aux1796)<=0)
7229 -7232 0
7230 -7233 0
990 -7232 0
990 7229 -7233 0
990 7230 -7235 0
c (0<=(SATLiteral(-990) + aux1795 - aux1796))
-7230 7235 0
-7229 7233 0
-990 7235 0
-990 -7230 7233 0
-990 -7229 7232 0
c ((aux1792 + aux1794 - aux1797)<=0)
7226 -7237 0
7227 -7238 0
7220 -7237 0
7220 7226 -7238 0
7220 7227 -7240 0
7221 -7238 0
7221 7226 -7240 0
7221 7227 -7242 0
c (0<=(aux1792 + aux1794 - aux1797))
-7227 7242 0
-7226 7240 0
-7221 7242 0
-7221 -7227 7240 0
-7221 -7226 7238 0
-7220 7240 0
-7220 -7227 7238 0
-7220 -7226 7237 0
c ((SATLiteral(992) - aux1798 + SATLiteral(887))<=0)
-887 -7244 0
-992 -7244 0
-992 -887 -7245 0
c (0<=(SATLiteral(992) - aux1798 + SATLiteral(887)))
887 7245 0
992 7245 0
992 887 7244 0
c ((SATLiteral(1007) - aux1799 + SATLiteral(872))<=0)
-872 -7247 0
-1007 -7247 0
-1007 -872 -7248 0
c (0<=(SATLiteral(1007) - aux1799 + SATLiteral(872)))
872 7248 0
1007 7248 0
1007 872 7247 0
c (( - aux1800 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7250 0
-1127 -7250 0
-1127 -857 -7251 0
c (0<=( - aux1800 + SATLiteral(1127) + SATLiteral(857)))
857 7251 0
1127 7251 0
1127 857 7250 0
c (( - aux1801 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7253 0
-1142 -7253 0
-1142 -1157 -7254 0
c (0<=( - aux1801 + SATLiteral(1142) + SATLiteral(1157)))
1157 7254 0
1142 7254 0
1142 1157 7253 0
c ((SATLiteral(1022) + aux1801 - aux1802)<=0)
7253 -7256 0
7254 -7257 0
-1022 -7256 0
-1022 7253 -7257 0
-1022 7254 -7259 0
c (0<=(SATLiteral(1022) + aux1801 - aux1802))
-7254 7259 0
-7253 7257 0
1022 7259 0
1022 -7254 7257 0
1022 -7253 7256 0
c ((aux1798 + aux1800 - aux1803)<=0)
7250 -7261 0
7251 -7262 0
7244 -7261 0
7244 7250 -7262 0
7244 7251 -7264 0
7245 -7262 0
7245 7250 -7264 0
7245 7251 -7266 0
c (0<=(aux1798 + aux1800 - aux1803))
-7251 7266 0
-7250 7264 0
-7245 7266 0
-7245 -7251 7264 0
-7245 -7250 7262 0
-7244 7264 0
-7244 -7251 7262 0
-7244 -7250 7261 0
c ((SATLiteral(994) - aux1804 + SATLiteral(889))<=0)
-889 -7268 0
-994 -7268 0
-994 -889 -7269 0
c (0<=(SATLiteral(994) - aux1804 + SATLiteral(889)))
889 7269 0
994 7269 0
994 889 7268 0
c ((SATLiteral(1009) - aux1805 + SATLiteral(874))<=0)
-874 -7271 0
-1009 -7271 0
-1009 -874 -7272 0
c (0<=(SATLiteral(1009) - aux1805 + SATLiteral(874)))
874 7272 0
1009 7272 0
1009 874 7271 0
c (( - aux1806 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7274 0
-1129 -7274 0
-1129 -859 -7275 0
c (0<=( - aux1806 + SATLiteral(1129) + SATLiteral(859)))
859 7275 0
1129 7275 0
1129 859 7274 0
c (( - aux1807 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7277 0
-1144 -7277 0
-1144 -1159 -7278 0
c (0<=( - aux1807 + SATLiteral(1144) + SATLiteral(1159)))
1159 7278 0
1144 7278 0
1144 1159 7277 0
c ((SATLiteral(1024) + aux1807 - aux1808)<=0)
7277 -7280 0
7278 -7281 0
-1024 -7280 0
-1024 7277 -7281 0
-1024 7278 -7283 0
c (0<=(SATLiteral(1024) + aux1807 - aux1808))
-7278 7283 0
-7277 7281 0
1024 7283 0
1024 -7278 7281 0
1024 -7277 7280 0
c ((aux1804 + aux1806 - aux1809)<=0)
7274 -7285 0
7275 -7286 0
7268 -7285 0
7268 7274 -7286 0
7268 7275 -7288 0
7269 -7286 0
7269 7274 -7288 0
7269 7275 -7290 0
c (0<=(aux1804 + aux1806 - aux1809))
-7275 7290 0
-7274 7288 0
-7269 7290 0
-7269 -7275 7288 0
-7269 -7274 7286 0
-7268 7288 0
-7268 -7275 7286 0
-7268 -7274 7285 0
c ((SATLiteral(996) - aux1810 + SATLiteral(891))<=0)
-891 -7292 0
-996 -7292 0
-996 -891 -7293 0
c (0<=(SATLiteral(996) - aux1810 + SATLiteral(891)))
891 7293 0
996 7293 0
996 891 7292 0
c ((SATLiteral(1011) - aux1811 + SATLiteral(876))<=0)
-876 -7295 0
-1011 -7295 0
-1011 -876 -7296 0
c (0<=(SATLiteral(1011) - aux1811 + SATLiteral(876)))
876 7296 0
1011 7296 0
1011 876 7295 0
c (( - aux1812 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7298 0
-1131 -7298 0
-1131 -861 -7299 0
c (0<=( - aux1812 + SATLiteral(1131) + SATLiteral(861)))
861 7299 0
1131 7299 0
1131 861 7298 0
c (( - aux1813 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7301 0
-1146 -7301 0
-1146 -1161 -7302 0
c (0<=( - aux1813 + SATLiteral(1146) + SATLiteral(1161)))
1161 7302 0
1146 7302 0
1146 1161 7301 0
c ((SATLiteral(1026) + aux1813 - aux1814)<=0)
7301 -7304 0
7302 -7305 0
-1026 -7304 0
-1026 7301 -7305 0
-1026 7302 -7307 0
c (0<=(SATLiteral(1026) + aux1813 - aux1814))
-7302 7307 0
-7301 7305 0
1026 7307 0
1026 -7302 7305 0
1026 -7301 7304 0
c ((aux1810 + aux1812 - aux1815)<=0)
7298 -7309 0
7299 -7310 0
7292 -7309 0
7292 7298 -7310 0
7292 7299 -7312 0
7293 -7310 0
7293 7298 -7312 0
7293 7299 -7314 0
c (0<=(aux1810 + aux1812 - aux1815))
-7299 7314 0
-7298 7312 0
-7293 7314 0
-7293 -7299 7312 0
-7293 -7298 7310 0
-7292 7312 0
-7292 -7299 7310 0
-7292 -7298 7309 0
c ((SATLiteral(998) - aux1816 + SATLiteral(893))<=0)
-893 -7316 0
-998 -7316 0
-998 -893 -7317 0
c (0<=(SATLiteral(998) - aux1816 + SATLiteral(893)))
893 7317 0
998 7317 0
998 893 7316 0
c ((SATLiteral(1013) - aux1817 + SATLiteral(878))<=0)
-878 -7319 0
-1013 -7319 0
-1013 -878 -7320 0
c (0<=(SATLiteral(1013) - aux1817 + SATLiteral(878)))
878 7320 0
1013 7320 0
1013 878 7319 0
c (( - aux1818 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7322 0
-1133 -7322 0
-1133 -863 -7323 0
c (0<=( - aux1818 + SATLiteral(1133) + SATLiteral(863)))
863 7323 0
1133 7323 0
1133 863 7322 0
c (( - aux1819 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7325 0
-1148 -7325 0
-1148 -1163 -7326 0
c (0<=( - aux1819 + SATLiteral(1148) + SATLiteral(1163)))
1163 7326 0
1148 7326 0
1148 1163 7325 0
c ((SATLiteral(1028) + aux1819 - aux1820)<=0)
7325 -7328 0
7326 -7329 0
-1028 -7328 0
-1028 7325 -7329 0
-1028 7326 -7331 0
c (0<=(SATLiteral(1028) + aux1819 - aux1820))
-7326 7331 0
-7325 7329 0
1028 7331 0
1028 -7326 7329 0
1028 -7325 7328 0
c ((aux1816 + aux1818 - aux1821)<=0)
7322 -7333 0
7323 -7334 0
7316 -7333 0
7316 7322 -7334 0
7316 7323 -7336 0
7317 -7334 0
7317 7322 -7336 0
7317 7323 -7338 0
c (0<=(aux1816 + aux1818 - aux1821))
-7323 7338 0
-7322 7336 0
-7317 7338 0
-7317 -7323 7336 0
-7317 -7322 7334 0
-7316 7336 0
-7316 -7323 7334 0
-7316 -7322 7333 0
c ((SATLiteral(1000) - aux1822 + SATLiteral(895))<=0)
-895 -7340 0
-1000 -7340 0
-1000 -895 -7341 0
c (0<=(SATLiteral(1000) - aux1822 + SATLiteral(895)))
895 7341 0
1000 7341 0
1000 895 7340 0
c ((SATLiteral(1015) - aux1823 + SATLiteral(880))<=0)
-880 -7343 0
-1015 -7343 0
-1015 -880 -7344 0
c (0<=(SATLiteral(1015) - aux1823 + SATLiteral(880)))
880 7344 0
1015 7344 0
1015 880 7343 0
c (( - aux1824 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7346 0
-1135 -7346 0
-1135 -865 -7347 0
c (0<=( - aux1824 + SATLiteral(1135) + SATLiteral(865)))
865 7347 0
1135 7347 0
1135 865 7346 0
c (( - aux1825 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7349 0
-1150 -7349 0
-1150 -1165 -7350 0
c (0<=( - aux1825 + SATLiteral(1150) + SATLiteral(1165)))
1165 7350 0
1150 7350 0
1150 1165 7349 0
c ((SATLiteral(1030) + aux1825 - aux1826)<=0)
7349 -7352 0
7350 -7353 0
-1030 -7352 0
-1030 7349 -7353 0
-1030 7350 -7355 0
c (0<=(SATLiteral(1030) + aux1825 - aux1826))
-7350 7355 0
-7349 7353 0
1030 7355 0
1030 -7350 7353 0
1030 -7349 7352 0
c ((aux1822 + aux1824 - aux1827)<=0)
7346 -7357 0
7347 -7358 0
7340 -7357 0
7340 7346 -7358 0
7340 7347 -7360 0
7341 -7358 0
7341 7346 -7360 0
7341 7347 -7362 0
c (0<=(aux1822 + aux1824 - aux1827))
-7347 7362 0
-7346 7360 0
-7341 7362 0
-7341 -7347 7360 0
-7341 -7346 7358 0
-7340 7360 0
-7340 -7347 7358 0
-7340 -7346 7357 0
c ((SATLiteral(1002) - aux1828 + SATLiteral(897))<=0)
-897 -7364 0
-1002 -7364 0
-1002 -897 -7365 0
c (0<=(SATLiteral(1002) - aux1828 + SATLiteral(897)))
897 7365 0
1002 7365 0
1002 897 7364 0
c ((SATLiteral(1017) - aux1829 + SATLiteral(882))<=0)
-882 -7367 0
-1017 -7367 0
-1017 -882 -7368 0
c (0<=(SATLiteral(1017) - aux1829 + SATLiteral(882)))
882 7368 0
1017 7368 0
1017 882 7367 0
c (( - aux1830 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7370 0
-1137 -7370 0
-1137 -867 -7371 0
c (0<=( - aux1830 + SATLiteral(1137) + SATLiteral(867)))
867 7371 0
1137 7371 0
1137 867 7370 0
c (( - aux1831 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7373 0
-1152 -7373 0
-1152 -1167 -7374 0
c (0<=( - aux1831 + SATLiteral(1152) + SATLiteral(1167)))
1167 7374 0
1152 7374 0
1152 1167 7373 0
c ((SATLiteral(1032) + aux1831 - aux1832)<=0)
7373 -7376 0
7374 -7377 0
-1032 -7376 0
-1032 7373 -7377 0
-1032 7374 -7379 0
c (0<=(SATLiteral(1032) + aux1831 - aux1832))
-7374 7379 0
-7373 7377 0
1032 7379 0
1032 -7374 7377 0
1032 -7373 7376 0
c ((aux1828 + aux1830 - aux1833)<=0)
7370 -7381 0
7371 -7382 0
7364 -7381 0
7364 7370 -7382 0
7364 7371 -7384 0
7365 -7382 0
7365 7370 -7384 0
7365 7371 -7386 0
c (0<=(aux1828 + aux1830 - aux1833))
-7371 7386 0
-7370 7384 0
-7365 7386 0
-7365 -7371 7384 0
-7365 -7370 7382 0
-7364 7384 0
-7364 -7371 7382 0
-7364 -7370 7381 0
c ((SATLiteral(1004) - aux1834 + SATLiteral(899))<=0)
-899 -7388 0
-1004 -7388 0
-1004 -899 -7389 0
c (0<=(SATLiteral(1004) - aux1834 + SATLiteral(899)))
899 7389 0
1004 7389 0
1004 899 7388 0
c ((SATLiteral(1019) - aux1835 + SATLiteral(884))<=0)
-884 -7391 0
-1019 -7391 0
-1019 -884 -7392 0
c (0<=(SATLiteral(1019) - aux1835 + SATLiteral(884)))
884 7392 0
1019 7392 0
1019 884 7391 0
c (( - aux1836 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7394 0
-1139 -7394 0
-1139 -869 -7395 0
c (0<=( - aux1836 + SATLiteral(1139) + SATLiteral(869)))
869 7395 0
1139 7395 0
1139 869 7394 0
c (( - aux1837 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7397 0
-1154 -7397 0
-1154 -1169 -7398 0
c (0<=( - aux1837 + SATLiteral(1154) + SATLiteral(1169)))
1169 7398 0
1154 7398 0
1154 1169 7397 0
c ((SATLiteral(1034) + aux1837 - aux1838)<=0)
7397 -7400 0
7398 -7401 0
-1034 -7400 0
-1034 7397 -7401 0
-1034 7398 -7403 0
c (0<=(SATLiteral(1034) + aux1837 - aux1838))
-7398 7403 0
-7397 7401 0
1034 7403 0
1034 -7398 7401 0
1034 -7397 7400 0
c ((aux1834 + aux1836 - aux1839)<=0)
7394 -7405 0
7395 -7406 0
7388 -7405 0
7388 7394 -7406 0
7388 7395 -7408 0
7389 -7406 0
7389 7394 -7408 0
7389 7395 -7410 0
c (0<=(aux1834 + aux1836 - aux1839))
-7395 7410 0
-7394 7408 0
-7389 7410 0
-7389 -7395 7408 0
-7389 -7394 7406 0
-7388 7408 0
-7388 -7395 7406 0
-7388 -7394 7405 0
c ((SATLiteral(1006) - aux1840 + SATLiteral(901))<=0)
-901 -7412 0
-1006 -7412 0
-1006 -901 -7413 0
c (0<=(SATLiteral(1006) - aux1840 + SATLiteral(901)))
901 7413 0
1006 7413 0
1006 901 7412 0
c ((SATLiteral(1021) - aux1841 + SATLiteral(886))<=0)
-886 -7415 0
-1021 -7415 0
-1021 -886 -7416 0
c (0<=(SATLiteral(1021) - aux1841 + SATLiteral(886)))
886 7416 0
1021 7416 0
1021 886 7415 0
c (( - aux1842 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7418 0
-1141 -7418 0
-1141 -871 -7419 0
c (0<=( - aux1842 + SATLiteral(1141) + SATLiteral(871)))
871 7419 0
1141 7419 0
1141 871 7418 0
c (( - aux1843 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7421 0
-1156 -7421 0
-1156 -1171 -7422 0
c (0<=( - aux1843 + SATLiteral(1156) + SATLiteral(1171)))
1171 7422 0
1156 7422 0
1156 1171 7421 0
c ((SATLiteral(1036) + aux1843 - aux1844)<=0)
7421 -7424 0
7422 -7425 0
-1036 -7424 0
-1036 7421 -7425 0
-1036 7422 -7427 0
c (0<=(SATLiteral(1036) + aux1843 - aux1844))
-7422 7427 0
-7421 7425 0
1036 7427 0
1036 -7422 7425 0
1036 -7421 7424 0
c ((aux1840 + aux1842 - aux1845)<=0)
7418 -7429 0
7419 -7430 0
7412 -7429 0
7412 7418 -7430 0
7412 7419 -7432 0
7413 -7430 0
7413 7418 -7432 0
7413 7419 -7434 0
c (0<=(aux1840 + aux1842 - aux1845))
-7419 7434 0
-7418 7432 0
-7413 7434 0
-7413 -7419 7432 0
-7413 -7418 7430 0
-7412 7432 0
-7412 -7419 7430 0
-7412 -7418 7429 0
c ((SATLiteral(-1005) - aux1846 + SATLiteral(-900))<=0)
900 -7436 0
1005 -7436 0
1005 900 -7437 0
c (0<=(SATLiteral(-1005) - aux1846 + SATLiteral(-900)))
-900 7437 0
-1005 7437 0
-1005 -900 7436 0
c ((SATLiteral(-1020) - aux1847 + SATLiteral(-885))<=0)
885 -7439 0
1020 -7439 0
1020 885 -7440 0
c (0<=(SATLiteral(-1020) - aux1847 + SATLiteral(-885)))
-885 7440 0
-1020 7440 0
-1020 -885 7439 0
c (( - aux1848 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7442 0
1140 -7442 0
1140 870 -7443 0
c (0<=( - aux1848 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7443 0
-1140 7443 0
-1140 -870 7442 0
c (( - aux1849 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7445 0
1155 -7445 0
1155 1170 -7446 0
c (0<=( - aux1849 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7446 0
-1155 7446 0
-1155 -1170 7445 0
c ((SATLiteral(-1035) + aux1849 - aux1850)<=0)
7445 -7448 0
7446 -7449 0
1035 -7448 0
1035 7445 -7449 0
1035 7446 -7451 0
c (0<=(SATLiteral(-1035) + aux1849 - aux1850))
-7446 7451 0
-7445 7449 0
-1035 7451 0
-1035 -7446 7449 0
-1035 -7445 7448 0
c ((aux1846 + aux1848 - aux1851)<=0)
7442 -7453 0
7443 -7454 0
7436 -7453 0
7436 7442 -7454 0
7436 7443 -7456 0
7437 -7454 0
7437 7442 -7456 0
7437 7443 -7458 0
c (0<=(aux1846 + aux1848 - aux1851))
-7443 7458 0
-7442 7456 0
-7437 7458 0
-7437 -7443 7456 0
-7437 -7442 7454 0
-7436 7456 0
-7436 -7443 7454 0
-7436 -7442 7453 0
c ((SATLiteral(1037) - aux1852 + SATLiteral(932))<=0)
-932 -7460 0
-1037 -7460 0
-1037 -932 -7461 0
c (0<=(SATLiteral(1037) - aux1852 + SATLiteral(932)))
932 7461 0
1037 7461 0
1037 932 7460 0
c ((SATLiteral(1052) - aux1853 + SATLiteral(917))<=0)
-917 -7463 0
-1052 -7463 0
-1052 -917 -7464 0
c (0<=(SATLiteral(1052) - aux1853 + SATLiteral(917)))
917 7464 0
1052 7464 0
1052 917 7463 0
c (( - aux1854 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7466 0
-1172 -7466 0
-1172 -902 -7467 0
c (0<=( - aux1854 + SATLiteral(1172) + SATLiteral(902)))
902 7467 0
1172 7467 0
1172 902 7466 0
c (( - aux1855 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7469 0
-1187 -7469 0
-1187 -1202 -7470 0
c (0<=( - aux1855 + SATLiteral(1187) + SATLiteral(1202)))
1202 7470 0
1187 7470 0
1187 1202 7469 0
c ((SATLiteral(1067) + aux1855 - aux1856)<=0)
7469 -7472 0
7470 -7473 0
-1067 -7472 0
-1067 7469 -7473 0
-1067 7470 -7475 0
c (0<=(SATLiteral(1067) + aux1855 - aux1856))
-7470 7475 0
-7469 7473 0
1067 7475 0
1067 -7470 7473 0
1067 -7469 7472 0
c ((aux1852 + aux1854 - aux1857)<=0)
7466 -7477 0
7467 -7478 0
7460 -7477 0
7460 7466 -7478 0
7460 7467 -7480 0
7461 -7478 0
7461 7466 -7480 0
7461 7467 -7482 0
c (0<=(aux1852 + aux1854 - aux1857))
-7467 7482 0
-7466 7480 0
-7461 7482 0
-7461 -7467 7480 0
-7461 -7466 7478 0
-7460 7480 0
-7460 -7467 7478 0
-7460 -7466 7477 0
c ((SATLiteral(1039) - aux1858 + SATLiteral(934))<=0)
-934 -7484 0
-1039 -7484 0
-1039 -934 -7485 0
c (0<=(SATLiteral(1039) - aux1858 + SATLiteral(934)))
934 7485 0
1039 7485 0
1039 934 7484 0
c ((SATLiteral(1054) - aux1859 + SATLiteral(919))<=0)
-919 -7487 0
-1054 -7487 0
-1054 -919 -7488 0
c (0<=(SATLiteral(1054) - aux1859 + SATLiteral(919)))
919 7488 0
1054 7488 0
1054 919 7487 0
c (( - aux1860 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7490 0
-1174 -7490 0
-1174 -904 -7491 0
c (0<=( - aux1860 + SATLiteral(1174) + SATLiteral(904)))
904 7491 0
1174 7491 0
1174 904 7490 0
c (( - aux1861 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7493 0
-1189 -7493 0
-1189 -1204 -7494 0
c (0<=( - aux1861 + SATLiteral(1189) + SATLiteral(1204)))
1204 7494 0
1189 7494 0
1189 1204 7493 0
c ((SATLiteral(1069) + aux1861 - aux1862)<=0)
7493 -7496 0
7494 -7497 0
-1069 -7496 0
-1069 7493 -7497 0
-1069 7494 -7499 0
c (0<=(SATLiteral(1069) + aux1861 - aux1862))
-7494 7499 0
-7493 7497 0
1069 7499 0
1069 -7494 7497 0
1069 -7493 7496 0
c ((aux1858 + aux1860 - aux1863)<=0)
7490 -7501 0
7491 -7502 0
7484 -7501 0
7484 7490 -7502 0
7484 7491 -7504 0
7485 -7502 0
7485 7490 -7504 0
7485 7491 -7506 0
c (0<=(aux1858 + aux1860 - aux1863))
-7491 7506 0
-7490 7504 0
-7485 7506 0
-7485 -7491 7504 0
-7485 -7490 7502 0
-7484 7504 0
-7484 -7491 7502 0
-7484 -7490 7501 0
c ((SATLiteral(1041) - aux1864 + SATLiteral(936))<=0)
-936 -7508 0
-1041 -7508 0
-1041 -936 -7509 0
c (0<=(SATLiteral(1041) - aux1864 + SATLiteral(936)))
936 7509 0
1041 7509 0
1041 936 7508 0
c ((SATLiteral(1056) - aux1865 + SATLiteral(921))<=0)
-921 -7511 0
-1056 -7511 0
-1056 -921 -7512 0
c (0<=(SATLiteral(1056) - aux1865 + SATLiteral(921)))
921 7512 0
1056 7512 0
1056 921 7511 0
c (( - aux1866 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7514 0
-1176 -7514 0
-1176 -906 -7515 0
c (0<=( - aux1866 + SATLiteral(1176) + SATLiteral(906)))
906 7515 0
1176 7515 0
1176 906 7514 0
c (( - aux1867 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7517 0
-1191 -7517 0
-1191 -1206 -7518 0
c (0<=( - aux1867 + SATLiteral(1191) + SATLiteral(1206)))
1206 7518 0
1191 7518 0
1191 1206 7517 0
c ((SATLiteral(1071) + aux1867 - aux1868)<=0)
7517 -7520 0
7518 -7521 0
-1071 -7520 0
-1071 7517 -7521 0
-1071 7518 -7523 0
c (0<=(SATLiteral(1071) + aux1867 - aux1868))
-7518 7523 0
-7517 7521 0
1071 7523 0
1071 -7518 7521 0
1071 -7517 7520 0
c ((aux1864 + aux1866 - aux1869)<=0)
7514 -7525 0
7515 -7526 0
7508 -7525 0
7508 7514 -7526 0
7508 7515 -7528 0
7509 -7526 0
7509 7514 -7528 0
7509 7515 -7530 0
c (0<=(aux1864 + aux1866 - aux1869))
-7515 7530 0
-7514 7528 0
-7509 7530 0
-7509 -7515 7528 0
-7509 -7514 7526 0
-7508 7528 0
-7508 -7515 7526 0
-7508 -7514 7525 0
c ((SATLiteral(1043) - aux1870 + SATLiteral(938))<=0)
-938 -7532 0
-1043 -7532 0
-1043 -938 -7533 0
c (0<=(SATLiteral(1043) - aux1870 + SATLiteral(938)))
938 7533 0
1043 7533 0
1043 938 7532 0
c ((SATLiteral(1058) - aux1871 + SATLiteral(923))<=0)
-923 -7535 0
-1058 -7535 0
-1058 -923 -7536 0
c (0<=(SATLiteral(1058) - aux1871 + SATLiteral(923)))
923 7536 0
1058 7536 0
1058 923 7535 0
c (( - aux1872 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7538 0
-1178 -7538 0
-1178 -908 -7539 0
c (0<=( - aux1872 + SATLiteral(1178) + SATLiteral(908)))
908 7539 0
1178 7539 0
1178 908 7538 0
c (( - aux1873 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7541 0
-1193 -7541 0
-1193 -1208 -7542 0
c (0<=( - aux1873 + SATLiteral(1193) + SATLiteral(1208)))
1208 7542 0
1193 7542 0
1193 1208 7541 0
c ((SATLiteral(1073) + aux1873 - aux1874)<=0)
7541 -7544 0
7542 -7545 0
-1073 -7544 0
-1073 7541 -7545 0
-1073 7542 -7547 0
c (0<=(SATLiteral(1073) + aux1873 - aux1874))
-7542 7547 0
-7541 7545 0
1073 7547 0
1073 -7542 7545 0
1073 -7541 7544 0
c ((aux1870 + aux1872 - aux1875)<=0)
7538 -7549 0
7539 -7550 0
7532 -7549 0
7532 7538 -7550 0
7532 7539 -7552 0
7533 -7550 0
7533 7538 -7552 0
7533 7539 -7554 0
c (0<=(aux1870 + aux1872 - aux1875))
-7539 7554 0
-7538 7552 0
-7533 7554 0
-7533 -7539 7552 0
-7533 -7538 7550 0
-7532 7552 0
-7532 -7539 7550 0
-7532 -7538 7549 0
c ((SATLiteral(1045) - aux1876 + SATLiteral(940))<=0)
-940 -7556 0
-1045 -7556 0
-1045 -940 -7557 0
c (0<=(SATLiteral(1045) - aux1876 + SATLiteral(940)))
940 7557 0
1045 7557 0
1045 940 7556 0
c ((SATLiteral(1060) - aux1877 + SATLiteral(925))<=0)
-925 -7559 0
-1060 -7559 0
-1060 -925 -7560 0
c (0<=(SATLiteral(1060) - aux1877 + SATLiteral(925)))
925 7560 0
1060 7560 0
1060 925 7559 0
c (( - aux1878 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7562 0
-1180 -7562 0
-1180 -910 -7563 0
c (0<=( - aux1878 + SATLiteral(1180) + SATLiteral(910)))
910 7563 0
1180 7563 0
1180 910 7562 0
c (( - aux1879 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7565 0
-1195 -7565 0
-1195 -1210 -7566 0
c (0<=( - aux1879 + SATLiteral(1195) + SATLiteral(1210)))
1210 7566 0
1195 7566 0
1195 1210 7565 0
c ((SATLiteral(1075) + aux1879 - aux1880)<=0)
7565 -7568 0
7566 -7569 0
-1075 -7568 0
-1075 7565 -7569 0
-1075 7566 -7571 0
c (0<=(SATLiteral(1075) + aux1879 - aux1880))
-7566 7571 0
-7565 7569 0
1075 7571 0
1075 -7566 7569 0
1075 -7565 7568 0
c ((aux1876 + aux1878 - aux1881)<=0)
7562 -7573 0
7563 -7574 0
7556 -7573 0
7556 7562 -7574 0
7556 7563 -7576 0
7557 -7574 0
7557 7562 -7576 0
7557 7563 -7578 0
c (0<=(aux1876 + aux1878 - aux1881))
-7563 7578 0
-7562 7576 0
-7557 7578 0
-7557 -7563 7576 0
-7557 -7562 7574 0
-7556 7576 0
-7556 -7563 7574 0
-7556 -7562 7573 0
c ((SATLiteral(1047) - aux1882 + SATLiteral(942))<=0)
-942 -7580 0
-1047 -7580 0
-1047 -942 -7581 0
c (0<=(SATLiteral(1047) - aux1882 + SATLiteral(942)))
942 7581 0
1047 7581 0
1047 942 7580 0
c ((SATLiteral(1062) - aux1883 + SATLiteral(927))<=0)
-927 -7583 0
-1062 -7583 0
-1062 -927 -7584 0
c (0<=(SATLiteral(1062) - aux1883 + SATLiteral(927)))
927 7584 0
1062 7584 0
1062 927 7583 0
c (( - aux1884 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7586 0
-1182 -7586 0
-1182 -912 -7587 0
c (0<=( - aux1884 + SATLiteral(1182) + SATLiteral(912)))
912 7587 0
1182 7587 0
1182 912 7586 0
c (( - aux1885 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7589 0
-1197 -7589 0
-1197 -1212 -7590 0
c (0<=( - aux1885 + SATLiteral(1197) + SATLiteral(1212)))
1212 7590 0
1197 7590 0
1197 1212 7589 0
c ((SATLiteral(1077) + aux1885 - aux1886)<=0)
7589 -7592 0
7590 -7593 0
-1077 -7592 0
-1077 7589 -7593 0
-1077 7590 -7595 0
c (0<=(SATLiteral(1077) + aux1885 - aux1886))
-7590 7595 0
-7589 7593 0
1077 7595 0
1077 -7590 7593 0
1077 -7589 7592 0
c ((aux1882 + aux1884 - aux1887)<=0)
7586 -7597 0
7587 -7598 0
7580 -7597 0
7580 7586 -7598 0
7580 7587 -7600 0
7581 -7598 0
7581 7586 -7600 0
7581 7587 -7602 0
c (0<=(aux1882 + aux1884 - aux1887))
-7587 7602 0
-7586 7600 0
-7581 7602 0
-7581 -7587 7600 0
-7581 -7586 7598 0
-7580 7600 0
-7580 -7587 7598 0
-7580 -7586 7597 0
c ((SATLiteral(1049) - aux1888 + SATLiteral(944))<=0)
-944 -7604 0
-1049 -7604 0
-1049 -944 -7605 0
c (0<=(SATLiteral(1049) - aux1888 + SATLiteral(944)))
944 7605 0
1049 7605 0
1049 944 7604 0
c ((SATLiteral(1064) - aux1889 + SATLiteral(929))<=0)
-929 -7607 0
-1064 -7607 0
-1064 -929 -7608 0
c (0<=(SATLiteral(1064) - aux1889 + SATLiteral(929)))
929 7608 0
1064 7608 0
1064 929 7607 0
c (( - aux1890 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7610 0
-1184 -7610 0
-1184 -914 -7611 0
c (0<=( - aux1890 + SATLiteral(1184) + SATLiteral(914)))
914 7611 0
1184 7611 0
1184 914 7610 0
c (( - aux1891 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7613 0
-1199 -7613 0
-1199 -1214 -7614 0
c (0<=( - aux1891 + SATLiteral(1199) + SATLiteral(1214)))
1214 7614 0
1199 7614 0
1199 1214 7613 0
c ((SATLiteral(1079) + aux1891 - aux1892)<=0)
7613 -7616 0
7614 -7617 0
-1079 -7616 0
-1079 7613 -7617 0
-1079 7614 -7619 0
c (0<=(SATLiteral(1079) + aux1891 - aux1892))
-7614 7619 0
-7613 7617 0
1079 7619 0
1079 -7614 7617 0
1079 -7613 7616 0
c ((aux1888 + aux1890 - aux1893)<=0)
7610 -7621 0
7611 -7622 0
7604 -7621 0
7604 7610 -7622 0
7604 7611 -7624 0
7605 -7622 0
7605 7610 -7624 0
7605 7611 -7626 0
c (0<=(aux1888 + aux1890 - aux1893))
-7611 7626 0
-7610 7624 0
-7605 7626 0
-7605 -7611 7624 0
-7605 -7610 7622 0
-7604 7624 0
-7604 -7611 7622 0
-7604 -7610 7621 0
c ((SATLiteral(1051) - aux1894 + SATLiteral(946))<=0)
-946 -7628 0
-1051 -7628 0
-1051 -946 -7629 0
c (0<=(SATLiteral(1051) - aux1894 + SATLiteral(946)))
946 7629 0
1051 7629 0
1051 946 7628 0
c ((SATLiteral(1066) - aux1895 + SATLiteral(931))<=0)
-931 -7631 0
-1066 -7631 0
-1066 -931 -7632 0
c (0<=(SATLiteral(1066) - aux1895 + SATLiteral(931)))
931 7632 0
1066 7632 0
1066 931 7631 0
c (( - aux1896 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7634 0
-1186 -7634 0
-1186 -916 -7635 0
c (0<=( - aux1896 + SATLiteral(1186) + SATLiteral(916)))
916 7635 0
1186 7635 0
1186 916 7634 0
c (( - aux1897 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7637 0
-1201 -7637 0
-1201 -1216 -7638 0
c (0<=( - aux1897 + SATLiteral(1201) + SATLiteral(1216)))
1216 7638 0
1201 7638 0
1201 1216 7637 0
c ((SATLiteral(1081) + aux1897 - aux1898)<=0)
7637 -7640 0
7638 -7641 0
-1081 -7640 0
-1081 7637 -7641 0
-1081 7638 -7643 0
c (0<=(SATLiteral(1081) + aux1897 - aux1898))
-7638 7643 0
-7637 7641 0
1081 7643 0
1081 -7638 7641 0
1081 -7637 7640 0
c ((aux1894 + aux1896 - aux1899)<=0)
7634 -7645 0
7635 -7646 0
7628 -7645 0
7628 7634 -7646 0
7628 7635 -7648 0
7629 -7646 0
7629 7634 -7648 0
7629 7635 -7650 0
c (0<=(aux1894 + aux1896 - aux1899))
-7635 7650 0
-7634 7648 0
-7629 7650 0
-7629 -7635 7648 0
-7629 -7634 7646 0
-7628 7648 0
-7628 -7635 7646 0
-7628 -7634 7645 0
c ((SATLiteral(-1050) - aux1900 + SATLiteral(-945))<=0)
945 -7652 0
1050 -7652 0
1050 945 -7653 0
c (0<=(SATLiteral(-1050) - aux1900 + SATLiteral(-945)))
-945 7653 0
-1050 7653 0
-1050 -945 7652 0
c ((SATLiteral(-1065) - aux1901 + SATLiteral(-930))<=0)
930 -7655 0
1065 -7655 0
1065 930 -7656 0
c (0<=(SATLiteral(-1065) - aux1901 + SATLiteral(-930)))
-930 7656 0
-1065 7656 0
-1065 -930 7655 0
c (( - aux1902 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7658 0
1185 -7658 0
1185 915 -7659 0
c (0<=( - aux1902 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7659 0
-1185 7659 0
-1185 -915 7658 0
c (( - aux1903 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7661 0
1200 -7661 0
1200 1215 -7662 0
c (0<=( - aux1903 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7662 0
-1200 7662 0
-1200 -1215 7661 0
c ((SATLiteral(-1080) + aux1903 - aux1904)<=0)
7661 -7664 0
7662 -7665 0
1080 -7664 0
1080 7661 -7665 0
1080 7662 -7667 0
c (0<=(SATLiteral(-1080) + aux1903 - aux1904))
-7662 7667 0
-7661 7665 0
-1080 7667 0
-1080 -7662 7665 0
-1080 -7661 7664 0
c ((aux1900 + aux1902 - aux1905)<=0)
7658 -7669 0
7659 -7670 0
7652 -7669 0
7652 7658 -7670 0
7652 7659 -7672 0
7653 -7670 0
7653 7658 -7672 0
7653 7659 -7674 0
c (0<=(aux1900 + aux1902 - aux1905))
-7659 7674 0
-7658 7672 0
-7653 7674 0
-7653 -7659 7672 0
-7653 -7658 7670 0
-7652 7672 0
-7652 -7659 7670 0
-7652 -7658 7669 0
