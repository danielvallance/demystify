p cnf 8244 39574                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' direct represents '2' with '798'
c Var 'x_00006_00009' direct represents '3' with '799'
c Var 'x_00006_00009' direct represents '4' with '800'
c Var 'x_00006_00009' direct represents '5' with '801'
c Var 'x_00006_00009' direct represents '6' with '802'
c Var 'x_00006_00009' direct represents '7' with '803'
c Var 'x_00006_00009' direct represents '8' with '804'
c Var 'x_00006_00009' direct represents '9' with '805'
797 798 799 800 801 802 803 804 805 0
-797 806 0
-797 809 0
-798 807 0
-798 809 0
-799 808 0
-799 809 0
-800 806 0
-800 810 0
-801 807 0
-801 810 0
-802 808 0
-802 810 0
-803 806 0
-803 811 0
-804 807 0
-804 811 0
-805 808 0
-805 811 0
-806 -807 0
-806 -808 0
-807 -808 0
-809 -810 0
-809 -811 0
-810 -811 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' direct represents '2' with '1113'
c Var 'x_00009_00003' direct represents '3' with '1114'
c Var 'x_00009_00003' direct represents '4' with '1115'
c Var 'x_00009_00003' direct represents '5' with '1116'
c Var 'x_00009_00003' direct represents '6' with '1117'
c Var 'x_00009_00003' direct represents '7' with '1118'
c Var 'x_00009_00003' direct represents '8' with '1119'
c Var 'x_00009_00003' direct represents '9' with '1120'
1112 1113 1114 1115 1116 1117 1118 1119 1120 0
-1112 1121 0
-1112 1124 0
-1113 1122 0
-1113 1124 0
-1114 1123 0
-1114 1124 0
-1115 1121 0
-1115 1125 0
-1116 1122 0
-1116 1125 0
-1117 1123 0
-1117 1125 0
-1118 1121 0
-1118 1126 0
-1119 1122 0
-1119 1126 0
-1120 1123 0
-1120 1126 0
-1121 -1122 0
-1121 -1123 0
-1122 -1123 0
-1124 -1125 0
-1124 -1126 0
-1125 -1126 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' direct represents '2' with '1143'
c Var 'x_00009_00005' direct represents '3' with '1144'
c Var 'x_00009_00005' direct represents '4' with '1145'
c Var 'x_00009_00005' direct represents '5' with '1146'
c Var 'x_00009_00005' direct represents '6' with '1147'
c Var 'x_00009_00005' direct represents '7' with '1148'
c Var 'x_00009_00005' direct represents '8' with '1149'
c Var 'x_00009_00005' direct represents '9' with '1150'
1142 1143 1144 1145 1146 1147 1148 1149 1150 0
-1142 1151 0
-1142 1154 0
-1143 1152 0
-1143 1154 0
-1144 1153 0
-1144 1154 0
-1145 1151 0
-1145 1155 0
-1146 1152 0
-1146 1155 0
-1147 1153 0
-1147 1155 0
-1148 1151 0
-1148 1156 0
-1149 1152 0
-1149 1156 0
-1150 1153 0
-1150 1156 0
-1151 -1152 0
-1151 -1153 0
-1152 -1153 0
-1154 -1155 0
-1154 -1156 0
-1155 -1156 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
1265 -1265 0
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
c Encoding variable: alldiff_hint_00030 with domain: bool (representing constraint )
c Var 'alldiff_hint_00030' direct represents '0' with '-1273'
c Var 'alldiff_hint_00030' direct represents '1' with '1273'
c Var 'alldiff_hint_00030' order represents '1' with '1'
c Var 'alldiff_hint_00030' order represents '0' with '-1273'
1273 -1273 0
c Encoding variable: alldiff_hint_00031 with domain: bool (representing constraint )
c Var 'alldiff_hint_00031' direct represents '0' with '-1274'
c Var 'alldiff_hint_00031' direct represents '1' with '1274'
c Var 'alldiff_hint_00031' order represents '1' with '1'
c Var 'alldiff_hint_00031' order represents '0' with '-1274'
1274 -1274 0
c Encoding variable: alldiff_hint_00032 with domain: bool (representing constraint )
c Var 'alldiff_hint_00032' direct represents '0' with '-1275'
c Var 'alldiff_hint_00032' direct represents '1' with '1275'
c Var 'alldiff_hint_00032' order represents '1' with '1'
c Var 'alldiff_hint_00032' order represents '0' with '-1275'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1276'
c Var 'sum_hint_00001' direct represents '1' with '1276'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1276'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1277'
c Var 'sum_hint_00002' direct represents '1' with '1277'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1277'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1278'
c Var 'sum_hint_00003' direct represents '1' with '1278'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1278'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1279'
c Var 'sum_hint_00004' direct represents '1' with '1279'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1279'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1280'
c Var 'sum_hint_00005' direct represents '1' with '1280'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1280'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1281'
c Var 'sum_hint_00006' direct represents '1' with '1281'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1281'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1282'
c Var 'sum_hint_00007' direct represents '1' with '1282'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1282'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1283'
c Var 'sum_hint_00008' direct represents '1' with '1283'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1283'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1284'
c Var 'sum_hint_00009' direct represents '1' with '1284'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1284'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1285'
c Var 'sum_hint_00010' direct represents '1' with '1285'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1285'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1286'
c Var 'sum_hint_00011' direct represents '1' with '1286'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1286'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1287'
c Var 'sum_hint_00012' direct represents '1' with '1287'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1287'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1288'
c Var 'sum_hint_00013' direct represents '1' with '1288'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1288'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1289'
c Var 'sum_hint_00014' direct represents '1' with '1289'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1289'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1290'
c Var 'sum_hint_00015' direct represents '1' with '1290'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1290'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1291'
c Var 'sum_hint_00016' direct represents '1' with '1291'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1291'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1292'
c Var 'sum_hint_00017' direct represents '1' with '1292'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1292'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1293'
c Var 'sum_hint_00018' direct represents '1' with '1293'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1293'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1294'
c Var 'sum_hint_00019' direct represents '1' with '1294'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1294'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1295'
c Var 'sum_hint_00020' direct represents '1' with '1295'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1295'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1296'
c Var 'sum_hint_00021' direct represents '1' with '1296'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1296'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1297'
c Var 'sum_hint_00022' direct represents '1' with '1297'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1297'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1298'
c Var 'sum_hint_00023' direct represents '1' with '1298'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1298'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1299'
c Var 'sum_hint_00024' direct represents '1' with '1299'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1299'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1300'
c Var 'sum_hint_00025' direct represents '1' with '1300'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1300'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1301'
c Var 'sum_hint_00026' direct represents '1' with '1301'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1301'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1302'
c Var 'sum_hint_00027' direct represents '1' with '1302'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1302'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1303'
c Var 'sum_hint_00028' direct represents '1' with '1303'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1303'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1304'
c Var 'sum_hint_00029' direct represents '1' with '1304'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1304'
c Encoding variable: sum_hint_00030 with domain: bool (representing constraint )
c Var 'sum_hint_00030' direct represents '0' with '-1305'
c Var 'sum_hint_00030' direct represents '1' with '1305'
c Var 'sum_hint_00030' order represents '1' with '1'
c Var 'sum_hint_00030' order represents '0' with '-1305'
c Encoding variable: sum_hint_00031 with domain: bool (representing constraint )
c Var 'sum_hint_00031' direct represents '0' with '-1306'
c Var 'sum_hint_00031' direct represents '1' with '1306'
c Var 'sum_hint_00031' order represents '1' with '1'
c Var 'sum_hint_00031' order represents '0' with '-1306'
c Encoding variable: sum_hint_00032 with domain: bool (representing constraint )
c Var 'sum_hint_00032' direct represents '0' with '-1307'
c Var 'sum_hint_00032' direct represents '1' with '1307'
c Var 'sum_hint_00032' order represents '1' with '1'
c Var 'sum_hint_00032' order represents '0' with '-1307'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00002_00001 + x_00003_00001 + x_00001_00001)=tv=14))
c Var 'aux0' direct represents '0' with '-1308'
c Var 'aux0' direct represents '1' with '1308'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1308'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00001_00002 + x_00001_00003)=tv=8))
c Var 'aux1' direct represents '0' with '-1309'
c Var 'aux1' direct represents '1' with '1309'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1309'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00002_00004 + x_00003_00004 + x_00001_00004)=tv=14))
c Var 'aux2' direct represents '0' with '-1310'
c Var 'aux2' direct represents '1' with '1310'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1310'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006 + x_00001_00005 + x_00001_00006)=tv=24))
c Var 'aux3' direct represents '0' with '-1311'
c Var 'aux3' direct represents '1' with '1311'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1311'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00001_00007 + x_00001_00008 + x_00001_00009)=tv=11))
c Var 'aux4' direct represents '0' with '-1312'
c Var 'aux4' direct represents '1' with '1312'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1312'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003 + x_00003_00003)=tv=15))
c Var 'aux5' direct represents '0' with '-1313'
c Var 'aux5' direct represents '1' with '1313'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1313'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00003_00008)=tv=11))
c Var 'aux6' direct represents '0' with '-1314'
c Var 'aux6' direct represents '1' with '1314'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1314'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00002_00009 + x_00003_00009)=tv=14))
c Var 'aux7' direct represents '0' with '-1315'
c Var 'aux7' direct represents '1' with '1315'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1315'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00002 + x_00004_00001 + x_00004_00002)=tv=21))
c Var 'aux8' direct represents '0' with '-1316'
c Var 'aux8' direct represents '1' with '1316'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1316'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)=tv=7))
c Var 'aux9' direct represents '0' with '-1317'
c Var 'aux9' direct represents '1' with '1317'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1317'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00003_00007 + x_00004_00006 + x_00004_00007)=tv=19))
c Var 'aux10' direct represents '0' with '-1318'
c Var 'aux10' direct represents '1' with '1318'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1318'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00003 + x_00004_00004 + x_00005_00003)=tv=14))
c Var 'aux11' direct represents '0' with '-1319'
c Var 'aux11' direct represents '1' with '1319'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1319'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00005 + x_00005_00004 + x_00005_00005)=tv=18))
c Var 'aux12' direct represents '0' with '-1320'
c Var 'aux12' direct represents '1' with '1320'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1320'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00008 + x_00004_00009)=tv=8))
c Var 'aux13' direct represents '0' with '-1321'
c Var 'aux13' direct represents '1' with '1321'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1321'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00005_00001 + x_00005_00002 + x_00006_00001)=tv=11))
c Var 'aux14' direct represents '0' with '-1322'
c Var 'aux14' direct represents '1' with '1322'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1322'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00006 + x_00005_00007)=tv=5))
c Var 'aux15' direct represents '0' with '-1323'
c Var 'aux15' direct represents '1' with '1323'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1323'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00005_00008 + x_00005_00009)=tv=13))
c Var 'aux16' direct represents '0' with '-1324'
c Var 'aux16' direct represents '1' with '1324'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1324'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00006_00002 + x_00006_00003)=tv=10))
c Var 'aux17' direct represents '0' with '-1325'
c Var 'aux17' direct represents '1' with '1325'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1325'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00007_00004 + x_00006_00004 + x_00006_00005)=tv=14))
c Var 'aux18' direct represents '0' with '-1326'
c Var 'aux18' direct represents '1' with '1326'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1326'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00005 + x_00007_00006 + x_00006_00006)=tv=12))
c Var 'aux19' direct represents '0' with '-1327'
c Var 'aux19' direct represents '1' with '1327'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1327'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)=tv=14))
c Var 'aux20' direct represents '0' with '-1328'
c Var 'aux20' direct represents '1' with '1328'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1328'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00008_00002)=tv=17))
c Var 'aux21' direct represents '0' with '-1329'
c Var 'aux21' direct represents '1' with '1329'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1329'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00007_00003 + x_00008_00003)=tv=11))
c Var 'aux22' direct represents '0' with '-1330'
c Var 'aux22' direct represents '1' with '1330'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1330'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00007_00007 + x_00007_00008 + x_00008_00007 + x_00008_00008)=tv=20))
c Var 'aux23' direct represents '0' with '-1331'
c Var 'aux23' direct represents '1' with '1331'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1331'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00007_00009 + x_00008_00009 + x_00009_00009)=tv=9))
c Var 'aux24' direct represents '0' with '-1332'
c Var 'aux24' direct represents '1' with '1332'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1332'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00001 + x_00009_00001 + x_00009_00002)=tv=9))
c Var 'aux25' direct represents '0' with '-1333'
c Var 'aux25' direct represents '1' with '1333'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1333'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00004 + x_00009_00004)=tv=9))
c Var 'aux26' direct represents '0' with '-1334'
c Var 'aux26' direct represents '1' with '1334'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1334'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00008_00005 + x_00008_00006)=tv=16))
c Var 'aux27' direct represents '0' with '-1335'
c Var 'aux27' direct represents '1' with '1335'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1335'
c Encoding variable: aux28 with domain: bool (representing constraint ((x_00009_00006 + x_00009_00007 + x_00009_00008)=tv=22))
c Var 'aux28' direct represents '0' with '-1336'
c Var 'aux28' direct represents '1' with '1336'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1336'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00001_00002 != x_00001_00003))
c Var 'aux29' direct represents '0' with '-1337'
c Var 'aux29' direct represents '1' with '1337'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1337'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00002_00009 != x_00003_00009))
c Var 'aux30' direct represents '0' with '-1338'
c Var 'aux30' direct represents '1' with '1338'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1338'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00003_00005 != x_00003_00006))
c Var 'aux31' direct represents '0' with '-1339'
c Var 'aux31' direct represents '1' with '1339'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1339'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00004_00008 != x_00004_00009))
c Var 'aux32' direct represents '0' with '-1340'
c Var 'aux32' direct represents '1' with '1340'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1340'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00005_00006 != x_00005_00007))
c Var 'aux33' direct represents '0' with '-1341'
c Var 'aux33' direct represents '1' with '1341'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1341'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00005_00008 != x_00005_00009))
c Var 'aux34' direct represents '0' with '-1342'
c Var 'aux34' direct represents '1' with '1342'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1342'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00006_00002 != x_00006_00003))
c Var 'aux35' direct represents '0' with '-1343'
c Var 'aux35' direct represents '1' with '1343'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1343'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00006_00007 != x_00006_00008))
c Var 'aux36' direct represents '0' with '-1344'
c Var 'aux36' direct represents '1' with '1344'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1344'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00007_00003 != x_00008_00003))
c Var 'aux37' direct represents '0' with '-1345'
c Var 'aux37' direct represents '1' with '1345'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1345'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00008_00004 != x_00009_00004))
c Var 'aux38' direct represents '0' with '-1346'
c Var 'aux38' direct represents '1' with '1346'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1346'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00008_00005 != x_00008_00006))
c Var 'aux39' direct represents '0' with '-1347'
c Var 'aux39' direct represents '1' with '1347'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1347'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux40' direct represents '0' with '-1348'
c Var 'aux40' direct represents '1' with '1348'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1348'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux41' direct represents '0' with '-1349'
c Var 'aux41' direct represents '1' with '1349'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1349'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux42' direct represents '0' with '-1350'
c Var 'aux42' direct represents '1' with '1350'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1350'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux43' direct represents '0' with '-1351'
c Var 'aux43' direct represents '1' with '1351'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1351'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux44' direct represents '0' with '-1352'
c Var 'aux44' direct represents '1' with '1352'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1352'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux45' direct represents '0' with '-1353'
c Var 'aux45' direct represents '1' with '1353'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1353'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux46' direct represents '0' with '-1354'
c Var 'aux46' direct represents '1' with '1354'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1354'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux47' direct represents '0' with '-1355'
c Var 'aux47' direct represents '1' with '1355'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1355'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux48' direct represents '0' with '-1356'
c Var 'aux48' direct represents '1' with '1356'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1356'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux49' direct represents '0' with '-1357'
c Var 'aux49' direct represents '1' with '1357'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1357'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux50' direct represents '0' with '-1358'
c Var 'aux50' direct represents '1' with '1358'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1358'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux51' direct represents '0' with '-1359'
c Var 'aux51' direct represents '1' with '1359'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1359'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux52' direct represents '0' with '-1360'
c Var 'aux52' direct represents '1' with '1360'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1360'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux53' direct represents '0' with '-1361'
c Var 'aux53' direct represents '1' with '1361'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1361'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux54' direct represents '0' with '-1362'
c Var 'aux54' direct represents '1' with '1362'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1362'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux55' direct represents '0' with '-1363'
c Var 'aux55' direct represents '1' with '1363'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1363'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux56' direct represents '0' with '-1364'
c Var 'aux56' direct represents '1' with '1364'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1364'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux57' direct represents '0' with '-1365'
c Var 'aux57' direct represents '1' with '1365'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1365'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux58' direct represents '0' with '-1366'
c Var 'aux58' direct represents '1' with '1366'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1366'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux59' direct represents '0' with '-1367'
c Var 'aux59' direct represents '1' with '1367'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1367'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux60' direct represents '0' with '-1368'
c Var 'aux60' direct represents '1' with '1368'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1368'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux61' direct represents '0' with '-1369'
c Var 'aux61' direct represents '1' with '1369'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1369'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux62' direct represents '0' with '-1370'
c Var 'aux62' direct represents '1' with '1370'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1370'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux63' direct represents '0' with '-1371'
c Var 'aux63' direct represents '1' with '1371'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1371'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux64' direct represents '0' with '-1372'
c Var 'aux64' direct represents '1' with '1372'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1372'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux65' direct represents '0' with '-1373'
c Var 'aux65' direct represents '1' with '1373'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1373'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux66' direct represents '0' with '-1374'
c Var 'aux66' direct represents '1' with '1374'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1374'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux67' direct represents '0' with '-1375'
c Var 'aux67' direct represents '1' with '1375'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1375'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux68' direct represents '0' with '-1376'
c Var 'aux68' direct represents '1' with '1376'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1376'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux69' direct represents '0' with '-1377'
c Var 'aux69' direct represents '1' with '1377'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1377'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux70' direct represents '0' with '-1378'
c Var 'aux70' direct represents '1' with '1378'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1378'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux71' direct represents '0' with '-1379'
c Var 'aux71' direct represents '1' with '1379'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1379'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux72' direct represents '0' with '-1380'
c Var 'aux72' direct represents '1' with '1380'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1380'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux73' direct represents '0' with '-1381'
c Var 'aux73' direct represents '1' with '1381'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1381'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux74' direct represents '0' with '-1382'
c Var 'aux74' direct represents '1' with '1382'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1382'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux75' direct represents '0' with '-1383'
c Var 'aux75' direct represents '1' with '1383'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1383'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux76' direct represents '0' with '-1384'
c Var 'aux76' direct represents '1' with '1384'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1384'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux77' direct represents '0' with '-1385'
c Var 'aux77' direct represents '1' with '1385'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1385'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux78' direct represents '0' with '-1386'
c Var 'aux78' direct represents '1' with '1386'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1386'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux79' direct represents '0' with '-1387'
c Var 'aux79' direct represents '1' with '1387'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1387'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux80' direct represents '0' with '-1388'
c Var 'aux80' direct represents '1' with '1388'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1388'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux81' direct represents '0' with '-1389'
c Var 'aux81' direct represents '1' with '1389'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1389'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux82' direct represents '0' with '-1390'
c Var 'aux82' direct represents '1' with '1390'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1390'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux83' direct represents '0' with '-1391'
c Var 'aux83' direct represents '1' with '1391'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1391'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux84' direct represents '0' with '-1392'
c Var 'aux84' direct represents '1' with '1392'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1392'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux85' direct represents '0' with '-1393'
c Var 'aux85' direct represents '1' with '1393'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1393'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux86' direct represents '0' with '-1394'
c Var 'aux86' direct represents '1' with '1394'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1394'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux87' direct represents '0' with '-1395'
c Var 'aux87' direct represents '1' with '1395'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1395'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux88' direct represents '0' with '-1396'
c Var 'aux88' direct represents '1' with '1396'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1396'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux89' direct represents '0' with '-1397'
c Var 'aux89' direct represents '1' with '1397'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1397'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux90' direct represents '0' with '-1398'
c Var 'aux90' direct represents '1' with '1398'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1398'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux91' direct represents '0' with '-1399'
c Var 'aux91' direct represents '1' with '1399'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1399'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux92' direct represents '0' with '-1400'
c Var 'aux92' direct represents '1' with '1400'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1400'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux93' direct represents '0' with '-1401'
c Var 'aux93' direct represents '1' with '1401'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1401'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux94' direct represents '0' with '-1402'
c Var 'aux94' direct represents '1' with '1402'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1402'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux95' direct represents '0' with '-1403'
c Var 'aux95' direct represents '1' with '1403'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1403'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux96' direct represents '0' with '-1404'
c Var 'aux96' direct represents '1' with '1404'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1404'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux97' direct represents '0' with '-1405'
c Var 'aux97' direct represents '1' with '1405'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1405'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux98' direct represents '0' with '-1406'
c Var 'aux98' direct represents '1' with '1406'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1406'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux99' direct represents '0' with '-1407'
c Var 'aux99' direct represents '1' with '1407'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1407'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux100' direct represents '0' with '-1408'
c Var 'aux100' direct represents '1' with '1408'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1408'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux101' direct represents '0' with '-1409'
c Var 'aux101' direct represents '1' with '1409'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1409'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux102' direct represents '0' with '-1410'
c Var 'aux102' direct represents '1' with '1410'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1410'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux103' direct represents '0' with '-1411'
c Var 'aux103' direct represents '1' with '1411'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1411'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux104' direct represents '0' with '-1412'
c Var 'aux104' direct represents '1' with '1412'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1412'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux105' direct represents '0' with '-1413'
c Var 'aux105' direct represents '1' with '1413'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1413'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux106' direct represents '0' with '-1414'
c Var 'aux106' direct represents '1' with '1414'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1414'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux107' direct represents '0' with '-1415'
c Var 'aux107' direct represents '1' with '1415'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1415'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux108' direct represents '0' with '-1416'
c Var 'aux108' direct represents '1' with '1416'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1416'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux109' direct represents '0' with '-1417'
c Var 'aux109' direct represents '1' with '1417'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1417'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux110' direct represents '0' with '-1418'
c Var 'aux110' direct represents '1' with '1418'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1418'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux111' direct represents '0' with '-1419'
c Var 'aux111' direct represents '1' with '1419'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1419'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux112' direct represents '0' with '-1420'
c Var 'aux112' direct represents '1' with '1420'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1420'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux113' direct represents '0' with '-1421'
c Var 'aux113' direct represents '1' with '1421'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1421'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux114' direct represents '0' with '-1422'
c Var 'aux114' direct represents '1' with '1422'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1422'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux115' direct represents '0' with '-1423'
c Var 'aux115' direct represents '1' with '1423'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1423'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux116' direct represents '0' with '-1424'
c Var 'aux116' direct represents '1' with '1424'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1424'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux117' direct represents '0' with '-1425'
c Var 'aux117' direct represents '1' with '1425'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1425'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux118' direct represents '0' with '-1426'
c Var 'aux118' direct represents '1' with '1426'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1426'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux119' direct represents '0' with '-1427'
c Var 'aux119' direct represents '1' with '1427'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1427'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux120' direct represents '0' with '-1428'
c Var 'aux120' direct represents '1' with '1428'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1428'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux121' direct represents '0' with '-1429'
c Var 'aux121' direct represents '1' with '1429'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1429'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux122' direct represents '0' with '-1430'
c Var 'aux122' direct represents '1' with '1430'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1430'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux123' direct represents '0' with '-1431'
c Var 'aux123' direct represents '1' with '1431'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1431'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux124' direct represents '0' with '-1432'
c Var 'aux124' direct represents '1' with '1432'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1432'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux125' direct represents '0' with '-1433'
c Var 'aux125' direct represents '1' with '1433'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1433'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux126' direct represents '0' with '-1434'
c Var 'aux126' direct represents '1' with '1434'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1434'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux127' direct represents '0' with '-1435'
c Var 'aux127' direct represents '1' with '1435'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1435'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux128' direct represents '0' with '-1436'
c Var 'aux128' direct represents '1' with '1436'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1436'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux129' direct represents '0' with '-1437'
c Var 'aux129' direct represents '1' with '1437'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1437'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux130' direct represents '0' with '-1438'
c Var 'aux130' direct represents '1' with '1438'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1438'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux131' direct represents '0' with '-1439'
c Var 'aux131' direct represents '1' with '1439'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1439'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux132' direct represents '0' with '-1440'
c Var 'aux132' direct represents '1' with '1440'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1440'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux133' direct represents '0' with '-1441'
c Var 'aux133' direct represents '1' with '1441'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1441'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux134' direct represents '0' with '-1442'
c Var 'aux134' direct represents '1' with '1442'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1442'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux135' direct represents '0' with '-1443'
c Var 'aux135' direct represents '1' with '1443'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1443'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux136' direct represents '0' with '-1444'
c Var 'aux136' direct represents '1' with '1444'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1444'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux137' direct represents '0' with '-1445'
c Var 'aux137' direct represents '1' with '1445'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1445'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux138' direct represents '0' with '-1446'
c Var 'aux138' direct represents '1' with '1446'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1446'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux139' direct represents '0' with '-1447'
c Var 'aux139' direct represents '1' with '1447'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1447'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux140' direct represents '0' with '-1448'
c Var 'aux140' direct represents '1' with '1448'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1448'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux141' direct represents '0' with '-1449'
c Var 'aux141' direct represents '1' with '1449'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1449'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux142' direct represents '0' with '-1450'
c Var 'aux142' direct represents '1' with '1450'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1450'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux143' direct represents '0' with '-1451'
c Var 'aux143' direct represents '1' with '1451'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1451'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux144' direct represents '0' with '-1452'
c Var 'aux144' direct represents '1' with '1452'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1452'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux145' direct represents '0' with '-1453'
c Var 'aux145' direct represents '1' with '1453'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1453'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux146' direct represents '0' with '-1454'
c Var 'aux146' direct represents '1' with '1454'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1454'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux147' direct represents '0' with '-1455'
c Var 'aux147' direct represents '1' with '1455'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1455'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux148' direct represents '0' with '-1456'
c Var 'aux148' direct represents '1' with '1456'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1456'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux149' direct represents '0' with '-1457'
c Var 'aux149' direct represents '1' with '1457'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1457'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux150' direct represents '0' with '-1458'
c Var 'aux150' direct represents '1' with '1458'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1458'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux151' direct represents '0' with '-1459'
c Var 'aux151' direct represents '1' with '1459'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1459'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux152' direct represents '0' with '-1460'
c Var 'aux152' direct represents '1' with '1460'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1460'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux153' direct represents '0' with '-1461'
c Var 'aux153' direct represents '1' with '1461'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1461'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux154' direct represents '0' with '-1462'
c Var 'aux154' direct represents '1' with '1462'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1462'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux155' direct represents '0' with '-1463'
c Var 'aux155' direct represents '1' with '1463'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1463'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux156' direct represents '0' with '-1464'
c Var 'aux156' direct represents '1' with '1464'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1464'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux157' direct represents '0' with '-1465'
c Var 'aux157' direct represents '1' with '1465'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1465'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux158' direct represents '0' with '-1466'
c Var 'aux158' direct represents '1' with '1466'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1466'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux159' direct represents '0' with '-1467'
c Var 'aux159' direct represents '1' with '1467'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1467'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux160' direct represents '0' with '-1468'
c Var 'aux160' direct represents '1' with '1468'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1468'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux161' direct represents '0' with '-1469'
c Var 'aux161' direct represents '1' with '1469'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1469'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux162' direct represents '0' with '-1470'
c Var 'aux162' direct represents '1' with '1470'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1470'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux163' direct represents '0' with '-1471'
c Var 'aux163' direct represents '1' with '1471'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1471'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux164' direct represents '0' with '-1472'
c Var 'aux164' direct represents '1' with '1472'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1472'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux165' direct represents '0' with '-1473'
c Var 'aux165' direct represents '1' with '1473'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1473'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux166' direct represents '0' with '-1474'
c Var 'aux166' direct represents '1' with '1474'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1474'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux167' direct represents '0' with '-1475'
c Var 'aux167' direct represents '1' with '1475'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1475'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux168' direct represents '0' with '-1476'
c Var 'aux168' direct represents '1' with '1476'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1476'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux169' direct represents '0' with '-1477'
c Var 'aux169' direct represents '1' with '1477'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1477'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux170' direct represents '0' with '-1478'
c Var 'aux170' direct represents '1' with '1478'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1478'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux171' direct represents '0' with '-1479'
c Var 'aux171' direct represents '1' with '1479'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1479'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux172' direct represents '0' with '-1480'
c Var 'aux172' direct represents '1' with '1480'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1480'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux173' direct represents '0' with '-1481'
c Var 'aux173' direct represents '1' with '1481'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1481'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux174' direct represents '0' with '-1482'
c Var 'aux174' direct represents '1' with '1482'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1482'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux175' direct represents '0' with '-1483'
c Var 'aux175' direct represents '1' with '1483'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1483'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux176' direct represents '0' with '-1484'
c Var 'aux176' direct represents '1' with '1484'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1484'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux177' direct represents '0' with '-1485'
c Var 'aux177' direct represents '1' with '1485'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1485'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux178' direct represents '0' with '-1486'
c Var 'aux178' direct represents '1' with '1486'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1486'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux179' direct represents '0' with '-1487'
c Var 'aux179' direct represents '1' with '1487'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1487'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux180' direct represents '0' with '-1488'
c Var 'aux180' direct represents '1' with '1488'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1488'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux181' direct represents '0' with '-1489'
c Var 'aux181' direct represents '1' with '1489'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1489'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux182' direct represents '0' with '-1490'
c Var 'aux182' direct represents '1' with '1490'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1490'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux183' direct represents '0' with '-1491'
c Var 'aux183' direct represents '1' with '1491'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1491'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux184' direct represents '0' with '-1492'
c Var 'aux184' direct represents '1' with '1492'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1492'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux185' direct represents '0' with '-1493'
c Var 'aux185' direct represents '1' with '1493'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1493'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux186' direct represents '0' with '-1494'
c Var 'aux186' direct represents '1' with '1494'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1494'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux187' direct represents '0' with '-1495'
c Var 'aux187' direct represents '1' with '1495'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1495'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux188' direct represents '0' with '-1496'
c Var 'aux188' direct represents '1' with '1496'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1496'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux189' direct represents '0' with '-1497'
c Var 'aux189' direct represents '1' with '1497'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1497'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux190' direct represents '0' with '-1498'
c Var 'aux190' direct represents '1' with '1498'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1498'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux191' direct represents '0' with '-1499'
c Var 'aux191' direct represents '1' with '1499'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1499'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux192' direct represents '0' with '-1500'
c Var 'aux192' direct represents '1' with '1500'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1500'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux193' direct represents '0' with '-1501'
c Var 'aux193' direct represents '1' with '1501'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1501'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux194' direct represents '0' with '-1502'
c Var 'aux194' direct represents '1' with '1502'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1502'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux195' direct represents '0' with '-1503'
c Var 'aux195' direct represents '1' with '1503'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1503'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux196' direct represents '0' with '-1504'
c Var 'aux196' direct represents '1' with '1504'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1504'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux197' direct represents '0' with '-1505'
c Var 'aux197' direct represents '1' with '1505'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1505'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux198' direct represents '0' with '-1506'
c Var 'aux198' direct represents '1' with '1506'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1506'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux199' direct represents '0' with '-1507'
c Var 'aux199' direct represents '1' with '1507'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1507'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux200' direct represents '0' with '-1508'
c Var 'aux200' direct represents '1' with '1508'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1508'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux201' direct represents '0' with '-1509'
c Var 'aux201' direct represents '1' with '1509'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1509'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux202' direct represents '0' with '-1510'
c Var 'aux202' direct represents '1' with '1510'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1510'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux203' direct represents '0' with '-1511'
c Var 'aux203' direct represents '1' with '1511'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1511'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux204' direct represents '0' with '-1512'
c Var 'aux204' direct represents '1' with '1512'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1512'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux205' direct represents '0' with '-1513'
c Var 'aux205' direct represents '1' with '1513'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1513'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux206' direct represents '0' with '-1514'
c Var 'aux206' direct represents '1' with '1514'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1514'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux207' direct represents '0' with '-1515'
c Var 'aux207' direct represents '1' with '1515'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1515'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux208' direct represents '0' with '-1516'
c Var 'aux208' direct represents '1' with '1516'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1516'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux209' direct represents '0' with '-1517'
c Var 'aux209' direct represents '1' with '1517'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1517'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux210' direct represents '0' with '-1518'
c Var 'aux210' direct represents '1' with '1518'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1518'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux211' direct represents '0' with '-1519'
c Var 'aux211' direct represents '1' with '1519'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1519'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux212' direct represents '0' with '-1520'
c Var 'aux212' direct represents '1' with '1520'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1520'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux213' direct represents '0' with '-1521'
c Var 'aux213' direct represents '1' with '1521'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1521'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux214' direct represents '0' with '-1522'
c Var 'aux214' direct represents '1' with '1522'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1522'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux215' direct represents '0' with '-1523'
c Var 'aux215' direct represents '1' with '1523'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1523'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux216' direct represents '0' with '-1524'
c Var 'aux216' direct represents '1' with '1524'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1524'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux217' direct represents '0' with '-1525'
c Var 'aux217' direct represents '1' with '1525'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1525'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux218' direct represents '0' with '-1526'
c Var 'aux218' direct represents '1' with '1526'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1526'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux219' direct represents '0' with '-1527'
c Var 'aux219' direct represents '1' with '1527'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1527'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux220' direct represents '0' with '-1528'
c Var 'aux220' direct represents '1' with '1528'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1528'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux221' direct represents '0' with '-1529'
c Var 'aux221' direct represents '1' with '1529'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1529'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux222' direct represents '0' with '-1530'
c Var 'aux222' direct represents '1' with '1530'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1530'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux223' direct represents '0' with '-1531'
c Var 'aux223' direct represents '1' with '1531'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1531'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux224' direct represents '0' with '-1532'
c Var 'aux224' direct represents '1' with '1532'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1532'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux225' direct represents '0' with '-1533'
c Var 'aux225' direct represents '1' with '1533'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1533'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux226' direct represents '0' with '-1534'
c Var 'aux226' direct represents '1' with '1534'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1534'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux227' direct represents '0' with '-1535'
c Var 'aux227' direct represents '1' with '1535'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1535'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux228' direct represents '0' with '-1536'
c Var 'aux228' direct represents '1' with '1536'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1536'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux229' direct represents '0' with '-1537'
c Var 'aux229' direct represents '1' with '1537'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1537'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux230' direct represents '0' with '-1538'
c Var 'aux230' direct represents '1' with '1538'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1538'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux231' direct represents '0' with '-1539'
c Var 'aux231' direct represents '1' with '1539'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1539'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux232' direct represents '0' with '-1540'
c Var 'aux232' direct represents '1' with '1540'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1540'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux233' direct represents '0' with '-1541'
c Var 'aux233' direct represents '1' with '1541'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1541'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux234' direct represents '0' with '-1542'
c Var 'aux234' direct represents '1' with '1542'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1542'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux235' direct represents '0' with '-1543'
c Var 'aux235' direct represents '1' with '1543'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1543'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux236' direct represents '0' with '-1544'
c Var 'aux236' direct represents '1' with '1544'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1544'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux237' direct represents '0' with '-1545'
c Var 'aux237' direct represents '1' with '1545'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1545'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux238' direct represents '0' with '-1546'
c Var 'aux238' direct represents '1' with '1546'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1546'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux239' direct represents '0' with '-1547'
c Var 'aux239' direct represents '1' with '1547'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1547'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux240' direct represents '0' with '-1548'
c Var 'aux240' direct represents '1' with '1548'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1548'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux241' direct represents '0' with '-1549'
c Var 'aux241' direct represents '1' with '1549'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1549'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux242' direct represents '0' with '-1550'
c Var 'aux242' direct represents '1' with '1550'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1550'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux243' direct represents '0' with '-1551'
c Var 'aux243' direct represents '1' with '1551'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1551'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux244' direct represents '0' with '-1552'
c Var 'aux244' direct represents '1' with '1552'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1552'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux245' direct represents '0' with '-1553'
c Var 'aux245' direct represents '1' with '1553'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1553'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux246' direct represents '0' with '-1554'
c Var 'aux246' direct represents '1' with '1554'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1554'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux247' direct represents '0' with '-1555'
c Var 'aux247' direct represents '1' with '1555'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1555'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux248' direct represents '0' with '-1556'
c Var 'aux248' direct represents '1' with '1556'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1556'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux249' direct represents '0' with '-1557'
c Var 'aux249' direct represents '1' with '1557'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1557'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux250' direct represents '0' with '-1558'
c Var 'aux250' direct represents '1' with '1558'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1558'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux251' direct represents '0' with '-1559'
c Var 'aux251' direct represents '1' with '1559'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1559'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux252' direct represents '0' with '-1560'
c Var 'aux252' direct represents '1' with '1560'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1560'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux253' direct represents '0' with '-1561'
c Var 'aux253' direct represents '1' with '1561'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1561'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux254' direct represents '0' with '-1562'
c Var 'aux254' direct represents '1' with '1562'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1562'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux255' direct represents '0' with '-1563'
c Var 'aux255' direct represents '1' with '1563'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1563'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux256' direct represents '0' with '-1564'
c Var 'aux256' direct represents '1' with '1564'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1564'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux257' direct represents '0' with '-1565'
c Var 'aux257' direct represents '1' with '1565'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1565'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux258' direct represents '0' with '-1566'
c Var 'aux258' direct represents '1' with '1566'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1566'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux259' direct represents '0' with '-1567'
c Var 'aux259' direct represents '1' with '1567'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1567'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux260' direct represents '0' with '-1568'
c Var 'aux260' direct represents '1' with '1568'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1568'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux261' direct represents '0' with '-1569'
c Var 'aux261' direct represents '1' with '1569'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1569'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux262' direct represents '0' with '-1570'
c Var 'aux262' direct represents '1' with '1570'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1570'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux263' direct represents '0' with '-1571'
c Var 'aux263' direct represents '1' with '1571'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1571'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux264' direct represents '0' with '-1572'
c Var 'aux264' direct represents '1' with '1572'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1572'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux265' direct represents '0' with '-1573'
c Var 'aux265' direct represents '1' with '1573'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1573'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux266' direct represents '0' with '-1574'
c Var 'aux266' direct represents '1' with '1574'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1574'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux267' direct represents '0' with '-1575'
c Var 'aux267' direct represents '1' with '1575'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1575'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux268' direct represents '0' with '-1576'
c Var 'aux268' direct represents '1' with '1576'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1576'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux269' direct represents '0' with '-1577'
c Var 'aux269' direct represents '1' with '1577'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1577'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux270' direct represents '0' with '-1578'
c Var 'aux270' direct represents '1' with '1578'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1578'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux271' direct represents '0' with '-1579'
c Var 'aux271' direct represents '1' with '1579'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1579'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux272' direct represents '0' with '-1580'
c Var 'aux272' direct represents '1' with '1580'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1580'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux273' direct represents '0' with '-1581'
c Var 'aux273' direct represents '1' with '1581'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1581'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux274' direct represents '0' with '-1582'
c Var 'aux274' direct represents '1' with '1582'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1582'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux275' direct represents '0' with '-1583'
c Var 'aux275' direct represents '1' with '1583'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1583'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux276' direct represents '0' with '-1584'
c Var 'aux276' direct represents '1' with '1584'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1584'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux277' direct represents '0' with '-1585'
c Var 'aux277' direct represents '1' with '1585'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1585'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux278' direct represents '0' with '-1586'
c Var 'aux278' direct represents '1' with '1586'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1586'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux279' direct represents '0' with '-1587'
c Var 'aux279' direct represents '1' with '1587'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1587'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux280' direct represents '0' with '-1588'
c Var 'aux280' direct represents '1' with '1588'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1588'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux281' direct represents '0' with '-1589'
c Var 'aux281' direct represents '1' with '1589'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1589'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux282' direct represents '0' with '-1590'
c Var 'aux282' direct represents '1' with '1590'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1590'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00001_00001=1) + (x_00002_00001=1))<=1))
c Var 'aux283' direct represents '0' with '-1591'
c Var 'aux283' direct represents '1' with '1591'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1591'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00001_00001=2) + (x_00002_00001=2))<=1))
c Var 'aux284' direct represents '0' with '-1592'
c Var 'aux284' direct represents '1' with '1592'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1592'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00001_00001=3) + (x_00002_00001=3))<=1))
c Var 'aux285' direct represents '0' with '-1593'
c Var 'aux285' direct represents '1' with '1593'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1593'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00001_00001=4) + (x_00002_00001=4))<=1))
c Var 'aux286' direct represents '0' with '-1594'
c Var 'aux286' direct represents '1' with '1594'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1594'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00001_00001=5) + (x_00002_00001=5))<=1))
c Var 'aux287' direct represents '0' with '-1595'
c Var 'aux287' direct represents '1' with '1595'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1595'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00001_00001=6) + (x_00002_00001=6))<=1))
c Var 'aux288' direct represents '0' with '-1596'
c Var 'aux288' direct represents '1' with '1596'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1596'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00001_00001=7) + (x_00002_00001=7))<=1))
c Var 'aux289' direct represents '0' with '-1597'
c Var 'aux289' direct represents '1' with '1597'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1597'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00001_00001=8) + (x_00002_00001=8))<=1))
c Var 'aux290' direct represents '0' with '-1598'
c Var 'aux290' direct represents '1' with '1598'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1598'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00001_00001=9) + (x_00002_00001=9))<=1))
c Var 'aux291' direct represents '0' with '-1599'
c Var 'aux291' direct represents '1' with '1599'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1599'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00001_00004=1) + (x_00002_00004=1))<=1))
c Var 'aux292' direct represents '0' with '-1600'
c Var 'aux292' direct represents '1' with '1600'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1600'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00001_00004=2) + (x_00002_00004=2))<=1))
c Var 'aux293' direct represents '0' with '-1601'
c Var 'aux293' direct represents '1' with '1601'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1601'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00001_00004=3) + (x_00002_00004=3))<=1))
c Var 'aux294' direct represents '0' with '-1602'
c Var 'aux294' direct represents '1' with '1602'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1602'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00001_00004=4) + (x_00002_00004=4))<=1))
c Var 'aux295' direct represents '0' with '-1603'
c Var 'aux295' direct represents '1' with '1603'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1603'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00001_00004=5) + (x_00002_00004=5))<=1))
c Var 'aux296' direct represents '0' with '-1604'
c Var 'aux296' direct represents '1' with '1604'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1604'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00001_00004=6) + (x_00002_00004=6))<=1))
c Var 'aux297' direct represents '0' with '-1605'
c Var 'aux297' direct represents '1' with '1605'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1605'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00001_00004=7) + (x_00002_00004=7))<=1))
c Var 'aux298' direct represents '0' with '-1606'
c Var 'aux298' direct represents '1' with '1606'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1606'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00001_00004=8) + (x_00002_00004=8))<=1))
c Var 'aux299' direct represents '0' with '-1607'
c Var 'aux299' direct represents '1' with '1607'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1607'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00001_00004=9) + (x_00002_00004=9))<=1))
c Var 'aux300' direct represents '0' with '-1608'
c Var 'aux300' direct represents '1' with '1608'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1608'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00005=1) + (x_00002_00006=1))<=1))
c Var 'aux301' direct represents '0' with '-1609'
c Var 'aux301' direct represents '1' with '1609'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1609'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00005=2) + (x_00002_00006=2))<=1))
c Var 'aux302' direct represents '0' with '-1610'
c Var 'aux302' direct represents '1' with '1610'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1610'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00005=3) + (x_00002_00006=3))<=1))
c Var 'aux303' direct represents '0' with '-1611'
c Var 'aux303' direct represents '1' with '1611'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1611'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00005=4) + (x_00002_00006=4))<=1))
c Var 'aux304' direct represents '0' with '-1612'
c Var 'aux304' direct represents '1' with '1612'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1612'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00005=5) + (x_00002_00006=5))<=1))
c Var 'aux305' direct represents '0' with '-1613'
c Var 'aux305' direct represents '1' with '1613'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1613'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00005=6) + (x_00002_00006=6))<=1))
c Var 'aux306' direct represents '0' with '-1614'
c Var 'aux306' direct represents '1' with '1614'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1614'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00005=7) + (x_00002_00006=7))<=1))
c Var 'aux307' direct represents '0' with '-1615'
c Var 'aux307' direct represents '1' with '1615'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1615'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00005=8) + (x_00002_00006=8))<=1))
c Var 'aux308' direct represents '0' with '-1616'
c Var 'aux308' direct represents '1' with '1616'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1616'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00005=9) + (x_00002_00006=9))<=1))
c Var 'aux309' direct represents '0' with '-1617'
c Var 'aux309' direct represents '1' with '1617'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1617'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))<=1))
c Var 'aux310' direct represents '0' with '-1618'
c Var 'aux310' direct represents '1' with '1618'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1618'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))<=1))
c Var 'aux311' direct represents '0' with '-1619'
c Var 'aux311' direct represents '1' with '1619'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1619'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))<=1))
c Var 'aux312' direct represents '0' with '-1620'
c Var 'aux312' direct represents '1' with '1620'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1620'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))<=1))
c Var 'aux313' direct represents '0' with '-1621'
c Var 'aux313' direct represents '1' with '1621'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1621'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))<=1))
c Var 'aux314' direct represents '0' with '-1622'
c Var 'aux314' direct represents '1' with '1622'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1622'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))<=1))
c Var 'aux315' direct represents '0' with '-1623'
c Var 'aux315' direct represents '1' with '1623'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1623'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))<=1))
c Var 'aux316' direct represents '0' with '-1624'
c Var 'aux316' direct represents '1' with '1624'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1624'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))<=1))
c Var 'aux317' direct represents '0' with '-1625'
c Var 'aux317' direct represents '1' with '1625'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1625'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))<=1))
c Var 'aux318' direct represents '0' with '-1626'
c Var 'aux318' direct represents '1' with '1626'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1626'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00002_00002=1) + (x_00002_00003=1))<=1))
c Var 'aux319' direct represents '0' with '-1627'
c Var 'aux319' direct represents '1' with '1627'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1627'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00002_00002=2) + (x_00002_00003=2))<=1))
c Var 'aux320' direct represents '0' with '-1628'
c Var 'aux320' direct represents '1' with '1628'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1628'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00002_00002=3) + (x_00002_00003=3))<=1))
c Var 'aux321' direct represents '0' with '-1629'
c Var 'aux321' direct represents '1' with '1629'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1629'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00002_00002=4) + (x_00002_00003=4))<=1))
c Var 'aux322' direct represents '0' with '-1630'
c Var 'aux322' direct represents '1' with '1630'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1630'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00002_00002=5) + (x_00002_00003=5))<=1))
c Var 'aux323' direct represents '0' with '-1631'
c Var 'aux323' direct represents '1' with '1631'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1631'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00002_00002=6) + (x_00002_00003=6))<=1))
c Var 'aux324' direct represents '0' with '-1632'
c Var 'aux324' direct represents '1' with '1632'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1632'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00002_00002=7) + (x_00002_00003=7))<=1))
c Var 'aux325' direct represents '0' with '-1633'
c Var 'aux325' direct represents '1' with '1633'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1633'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00002_00002=8) + (x_00002_00003=8))<=1))
c Var 'aux326' direct represents '0' with '-1634'
c Var 'aux326' direct represents '1' with '1634'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1634'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00002_00002=9) + (x_00002_00003=9))<=1))
c Var 'aux327' direct represents '0' with '-1635'
c Var 'aux327' direct represents '1' with '1635'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1635'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00002_00007=1) + (x_00002_00008=1))<=1))
c Var 'aux328' direct represents '0' with '-1636'
c Var 'aux328' direct represents '1' with '1636'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1636'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00002_00007=2) + (x_00002_00008=2))<=1))
c Var 'aux329' direct represents '0' with '-1637'
c Var 'aux329' direct represents '1' with '1637'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1637'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00002_00007=3) + (x_00002_00008=3))<=1))
c Var 'aux330' direct represents '0' with '-1638'
c Var 'aux330' direct represents '1' with '1638'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1638'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00002_00007=4) + (x_00002_00008=4))<=1))
c Var 'aux331' direct represents '0' with '-1639'
c Var 'aux331' direct represents '1' with '1639'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1639'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00002_00007=5) + (x_00002_00008=5))<=1))
c Var 'aux332' direct represents '0' with '-1640'
c Var 'aux332' direct represents '1' with '1640'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1640'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00002_00007=6) + (x_00002_00008=6))<=1))
c Var 'aux333' direct represents '0' with '-1641'
c Var 'aux333' direct represents '1' with '1641'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1641'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00002_00007=7) + (x_00002_00008=7))<=1))
c Var 'aux334' direct represents '0' with '-1642'
c Var 'aux334' direct represents '1' with '1642'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1642'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00002_00007=8) + (x_00002_00008=8))<=1))
c Var 'aux335' direct represents '0' with '-1643'
c Var 'aux335' direct represents '1' with '1643'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1643'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00002_00007=9) + (x_00002_00008=9))<=1))
c Var 'aux336' direct represents '0' with '-1644'
c Var 'aux336' direct represents '1' with '1644'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1644'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00004_00001=1) + (x_00004_00002=1))<=1))
c Var 'aux337' direct represents '0' with '-1645'
c Var 'aux337' direct represents '1' with '1645'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1645'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00004_00001=2) + (x_00004_00002=2))<=1))
c Var 'aux338' direct represents '0' with '-1646'
c Var 'aux338' direct represents '1' with '1646'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1646'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00004_00001=3) + (x_00004_00002=3))<=1))
c Var 'aux339' direct represents '0' with '-1647'
c Var 'aux339' direct represents '1' with '1647'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1647'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00004_00001=4) + (x_00004_00002=4))<=1))
c Var 'aux340' direct represents '0' with '-1648'
c Var 'aux340' direct represents '1' with '1648'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1648'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00004_00001=5) + (x_00004_00002=5))<=1))
c Var 'aux341' direct represents '0' with '-1649'
c Var 'aux341' direct represents '1' with '1649'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1649'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00004_00001=6) + (x_00004_00002=6))<=1))
c Var 'aux342' direct represents '0' with '-1650'
c Var 'aux342' direct represents '1' with '1650'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1650'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00004_00001=7) + (x_00004_00002=7))<=1))
c Var 'aux343' direct represents '0' with '-1651'
c Var 'aux343' direct represents '1' with '1651'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1651'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00004_00001=8) + (x_00004_00002=8))<=1))
c Var 'aux344' direct represents '0' with '-1652'
c Var 'aux344' direct represents '1' with '1652'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1652'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00004_00001=9) + (x_00004_00002=9))<=1))
c Var 'aux345' direct represents '0' with '-1653'
c Var 'aux345' direct represents '1' with '1653'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1653'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00004_00006=1) + (x_00004_00007=1))<=1))
c Var 'aux346' direct represents '0' with '-1654'
c Var 'aux346' direct represents '1' with '1654'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1654'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00004_00006=2) + (x_00004_00007=2))<=1))
c Var 'aux347' direct represents '0' with '-1655'
c Var 'aux347' direct represents '1' with '1655'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1655'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00004_00006=3) + (x_00004_00007=3))<=1))
c Var 'aux348' direct represents '0' with '-1656'
c Var 'aux348' direct represents '1' with '1656'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1656'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00004_00006=4) + (x_00004_00007=4))<=1))
c Var 'aux349' direct represents '0' with '-1657'
c Var 'aux349' direct represents '1' with '1657'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1657'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00004_00006=5) + (x_00004_00007=5))<=1))
c Var 'aux350' direct represents '0' with '-1658'
c Var 'aux350' direct represents '1' with '1658'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1658'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00004_00006=6) + (x_00004_00007=6))<=1))
c Var 'aux351' direct represents '0' with '-1659'
c Var 'aux351' direct represents '1' with '1659'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1659'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00004_00006=7) + (x_00004_00007=7))<=1))
c Var 'aux352' direct represents '0' with '-1660'
c Var 'aux352' direct represents '1' with '1660'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1660'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00004_00006=8) + (x_00004_00007=8))<=1))
c Var 'aux353' direct represents '0' with '-1661'
c Var 'aux353' direct represents '1' with '1661'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1661'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00004_00006=9) + (x_00004_00007=9))<=1))
c Var 'aux354' direct represents '0' with '-1662'
c Var 'aux354' direct represents '1' with '1662'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1662'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00004_00003=1) + (x_00004_00004=1) + (x_00005_00003=1))<=1))
c Var 'aux355' direct represents '0' with '-1663'
c Var 'aux355' direct represents '1' with '1663'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1663'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00004_00003=2) + (x_00004_00004=2) + (x_00005_00003=2))<=1))
c Var 'aux356' direct represents '0' with '-1664'
c Var 'aux356' direct represents '1' with '1664'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1664'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00004_00003=3) + (x_00004_00004=3) + (x_00005_00003=3))<=1))
c Var 'aux357' direct represents '0' with '-1665'
c Var 'aux357' direct represents '1' with '1665'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1665'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00004_00003=4) + (x_00004_00004=4) + (x_00005_00003=4))<=1))
c Var 'aux358' direct represents '0' with '-1666'
c Var 'aux358' direct represents '1' with '1666'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1666'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00004_00003=5) + (x_00004_00004=5) + (x_00005_00003=5))<=1))
c Var 'aux359' direct represents '0' with '-1667'
c Var 'aux359' direct represents '1' with '1667'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1667'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00004_00003=6) + (x_00004_00004=6) + (x_00005_00003=6))<=1))
c Var 'aux360' direct represents '0' with '-1668'
c Var 'aux360' direct represents '1' with '1668'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1668'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00004_00003=7) + (x_00004_00004=7) + (x_00005_00003=7))<=1))
c Var 'aux361' direct represents '0' with '-1669'
c Var 'aux361' direct represents '1' with '1669'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1669'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00004_00003=8) + (x_00004_00004=8) + (x_00005_00003=8))<=1))
c Var 'aux362' direct represents '0' with '-1670'
c Var 'aux362' direct represents '1' with '1670'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1670'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00004_00003=9) + (x_00004_00004=9) + (x_00005_00003=9))<=1))
c Var 'aux363' direct represents '0' with '-1671'
c Var 'aux363' direct represents '1' with '1671'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1671'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00004_00005=1) + (x_00005_00004=1) + (x_00005_00005=1))<=1))
c Var 'aux364' direct represents '0' with '-1672'
c Var 'aux364' direct represents '1' with '1672'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1672'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00004_00005=2) + (x_00005_00004=2) + (x_00005_00005=2))<=1))
c Var 'aux365' direct represents '0' with '-1673'
c Var 'aux365' direct represents '1' with '1673'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1673'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00004_00005=3) + (x_00005_00004=3) + (x_00005_00005=3))<=1))
c Var 'aux366' direct represents '0' with '-1674'
c Var 'aux366' direct represents '1' with '1674'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1674'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00004_00005=4) + (x_00005_00004=4) + (x_00005_00005=4))<=1))
c Var 'aux367' direct represents '0' with '-1675'
c Var 'aux367' direct represents '1' with '1675'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1675'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00004_00005=5) + (x_00005_00004=5) + (x_00005_00005=5))<=1))
c Var 'aux368' direct represents '0' with '-1676'
c Var 'aux368' direct represents '1' with '1676'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1676'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00004_00005=6) + (x_00005_00004=6) + (x_00005_00005=6))<=1))
c Var 'aux369' direct represents '0' with '-1677'
c Var 'aux369' direct represents '1' with '1677'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1677'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00004_00005=7) + (x_00005_00004=7) + (x_00005_00005=7))<=1))
c Var 'aux370' direct represents '0' with '-1678'
c Var 'aux370' direct represents '1' with '1678'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1678'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00004_00005=8) + (x_00005_00004=8) + (x_00005_00005=8))<=1))
c Var 'aux371' direct represents '0' with '-1679'
c Var 'aux371' direct represents '1' with '1679'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1679'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00004_00005=9) + (x_00005_00004=9) + (x_00005_00005=9))<=1))
c Var 'aux372' direct represents '0' with '-1680'
c Var 'aux372' direct represents '1' with '1680'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1680'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00005_00001=1) + (x_00005_00002=1))<=1))
c Var 'aux373' direct represents '0' with '-1681'
c Var 'aux373' direct represents '1' with '1681'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1681'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00005_00001=2) + (x_00005_00002=2))<=1))
c Var 'aux374' direct represents '0' with '-1682'
c Var 'aux374' direct represents '1' with '1682'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1682'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00005_00001=3) + (x_00005_00002=3))<=1))
c Var 'aux375' direct represents '0' with '-1683'
c Var 'aux375' direct represents '1' with '1683'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1683'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00005_00001=4) + (x_00005_00002=4))<=1))
c Var 'aux376' direct represents '0' with '-1684'
c Var 'aux376' direct represents '1' with '1684'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1684'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00005_00001=5) + (x_00005_00002=5))<=1))
c Var 'aux377' direct represents '0' with '-1685'
c Var 'aux377' direct represents '1' with '1685'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1685'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00005_00001=6) + (x_00005_00002=6))<=1))
c Var 'aux378' direct represents '0' with '-1686'
c Var 'aux378' direct represents '1' with '1686'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1686'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00005_00001=7) + (x_00005_00002=7))<=1))
c Var 'aux379' direct represents '0' with '-1687'
c Var 'aux379' direct represents '1' with '1687'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1687'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00005_00001=8) + (x_00005_00002=8))<=1))
c Var 'aux380' direct represents '0' with '-1688'
c Var 'aux380' direct represents '1' with '1688'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1688'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00005_00001=9) + (x_00005_00002=9))<=1))
c Var 'aux381' direct represents '0' with '-1689'
c Var 'aux381' direct represents '1' with '1689'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1689'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00007_00004=1))<=1))
c Var 'aux382' direct represents '0' with '-1690'
c Var 'aux382' direct represents '1' with '1690'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1690'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00007_00004=2))<=1))
c Var 'aux383' direct represents '0' with '-1691'
c Var 'aux383' direct represents '1' with '1691'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1691'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00007_00004=3))<=1))
c Var 'aux384' direct represents '0' with '-1692'
c Var 'aux384' direct represents '1' with '1692'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1692'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00007_00004=4))<=1))
c Var 'aux385' direct represents '0' with '-1693'
c Var 'aux385' direct represents '1' with '1693'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1693'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00007_00004=5))<=1))
c Var 'aux386' direct represents '0' with '-1694'
c Var 'aux386' direct represents '1' with '1694'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1694'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00007_00004=6))<=1))
c Var 'aux387' direct represents '0' with '-1695'
c Var 'aux387' direct represents '1' with '1695'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1695'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00007_00004=7))<=1))
c Var 'aux388' direct represents '0' with '-1696'
c Var 'aux388' direct represents '1' with '1696'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1696'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00007_00004=8))<=1))
c Var 'aux389' direct represents '0' with '-1697'
c Var 'aux389' direct represents '1' with '1697'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1697'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00007_00004=9))<=1))
c Var 'aux390' direct represents '0' with '-1698'
c Var 'aux390' direct represents '1' with '1698'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1698'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00007_00005=1) + (x_00007_00006=1))<=1))
c Var 'aux391' direct represents '0' with '-1699'
c Var 'aux391' direct represents '1' with '1699'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1699'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00007_00005=2) + (x_00007_00006=2))<=1))
c Var 'aux392' direct represents '0' with '-1700'
c Var 'aux392' direct represents '1' with '1700'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1700'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00007_00005=3) + (x_00007_00006=3))<=1))
c Var 'aux393' direct represents '0' with '-1701'
c Var 'aux393' direct represents '1' with '1701'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1701'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00007_00005=4) + (x_00007_00006=4))<=1))
c Var 'aux394' direct represents '0' with '-1702'
c Var 'aux394' direct represents '1' with '1702'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1702'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00007_00005=5) + (x_00007_00006=5))<=1))
c Var 'aux395' direct represents '0' with '-1703'
c Var 'aux395' direct represents '1' with '1703'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1703'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00007_00005=6) + (x_00007_00006=6))<=1))
c Var 'aux396' direct represents '0' with '-1704'
c Var 'aux396' direct represents '1' with '1704'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1704'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00007_00005=7) + (x_00007_00006=7))<=1))
c Var 'aux397' direct represents '0' with '-1705'
c Var 'aux397' direct represents '1' with '1705'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1705'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00007_00005=8) + (x_00007_00006=8))<=1))
c Var 'aux398' direct represents '0' with '-1706'
c Var 'aux398' direct represents '1' with '1706'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1706'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00007_00005=9) + (x_00007_00006=9))<=1))
c Var 'aux399' direct represents '0' with '-1707'
c Var 'aux399' direct represents '1' with '1707'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1707'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00008_00002=1) + (x_00007_00001=1) + (x_00007_00002=1))<=1))
c Var 'aux400' direct represents '0' with '-1708'
c Var 'aux400' direct represents '1' with '1708'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1708'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00008_00002=2) + (x_00007_00001=2) + (x_00007_00002=2))<=1))
c Var 'aux401' direct represents '0' with '-1709'
c Var 'aux401' direct represents '1' with '1709'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1709'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00008_00002=3) + (x_00007_00001=3) + (x_00007_00002=3))<=1))
c Var 'aux402' direct represents '0' with '-1710'
c Var 'aux402' direct represents '1' with '1710'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1710'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00008_00002=4) + (x_00007_00001=4) + (x_00007_00002=4))<=1))
c Var 'aux403' direct represents '0' with '-1711'
c Var 'aux403' direct represents '1' with '1711'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1711'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00008_00002=5) + (x_00007_00001=5) + (x_00007_00002=5))<=1))
c Var 'aux404' direct represents '0' with '-1712'
c Var 'aux404' direct represents '1' with '1712'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1712'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00008_00002=6) + (x_00007_00001=6) + (x_00007_00002=6))<=1))
c Var 'aux405' direct represents '0' with '-1713'
c Var 'aux405' direct represents '1' with '1713'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1713'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00008_00002=7) + (x_00007_00001=7) + (x_00007_00002=7))<=1))
c Var 'aux406' direct represents '0' with '-1714'
c Var 'aux406' direct represents '1' with '1714'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1714'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00008_00002=8) + (x_00007_00001=8) + (x_00007_00002=8))<=1))
c Var 'aux407' direct represents '0' with '-1715'
c Var 'aux407' direct represents '1' with '1715'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1715'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00008_00002=9) + (x_00007_00001=9) + (x_00007_00002=9))<=1))
c Var 'aux408' direct represents '0' with '-1716'
c Var 'aux408' direct represents '1' with '1716'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1716'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00007_00007=1) + (x_00007_00008=1))<=1))
c Var 'aux409' direct represents '0' with '-1717'
c Var 'aux409' direct represents '1' with '1717'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1717'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00007_00007=2) + (x_00007_00008=2))<=1))
c Var 'aux410' direct represents '0' with '-1718'
c Var 'aux410' direct represents '1' with '1718'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1718'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00007_00007=3) + (x_00007_00008=3))<=1))
c Var 'aux411' direct represents '0' with '-1719'
c Var 'aux411' direct represents '1' with '1719'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1719'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00007_00007=4) + (x_00007_00008=4))<=1))
c Var 'aux412' direct represents '0' with '-1720'
c Var 'aux412' direct represents '1' with '1720'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1720'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00007_00007=5) + (x_00007_00008=5))<=1))
c Var 'aux413' direct represents '0' with '-1721'
c Var 'aux413' direct represents '1' with '1721'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1721'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00007_00007=6) + (x_00007_00008=6))<=1))
c Var 'aux414' direct represents '0' with '-1722'
c Var 'aux414' direct represents '1' with '1722'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1722'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00007_00007=7) + (x_00007_00008=7))<=1))
c Var 'aux415' direct represents '0' with '-1723'
c Var 'aux415' direct represents '1' with '1723'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1723'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00007_00007=8) + (x_00007_00008=8))<=1))
c Var 'aux416' direct represents '0' with '-1724'
c Var 'aux416' direct represents '1' with '1724'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1724'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00007_00007=9) + (x_00007_00008=9))<=1))
c Var 'aux417' direct represents '0' with '-1725'
c Var 'aux417' direct represents '1' with '1725'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1725'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00008_00009=1) + (x_00009_00009=1) + (x_00007_00009=1))<=1))
c Var 'aux418' direct represents '0' with '-1726'
c Var 'aux418' direct represents '1' with '1726'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1726'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00008_00009=2) + (x_00009_00009=2) + (x_00007_00009=2))<=1))
c Var 'aux419' direct represents '0' with '-1727'
c Var 'aux419' direct represents '1' with '1727'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1727'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00008_00009=3) + (x_00009_00009=3) + (x_00007_00009=3))<=1))
c Var 'aux420' direct represents '0' with '-1728'
c Var 'aux420' direct represents '1' with '1728'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1728'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00008_00009=4) + (x_00009_00009=4) + (x_00007_00009=4))<=1))
c Var 'aux421' direct represents '0' with '-1729'
c Var 'aux421' direct represents '1' with '1729'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1729'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00008_00009=5) + (x_00009_00009=5) + (x_00007_00009=5))<=1))
c Var 'aux422' direct represents '0' with '-1730'
c Var 'aux422' direct represents '1' with '1730'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1730'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00008_00009=6) + (x_00009_00009=6) + (x_00007_00009=6))<=1))
c Var 'aux423' direct represents '0' with '-1731'
c Var 'aux423' direct represents '1' with '1731'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1731'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00008_00009=7) + (x_00009_00009=7) + (x_00007_00009=7))<=1))
c Var 'aux424' direct represents '0' with '-1732'
c Var 'aux424' direct represents '1' with '1732'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1732'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00008_00009=8) + (x_00009_00009=8) + (x_00007_00009=8))<=1))
c Var 'aux425' direct represents '0' with '-1733'
c Var 'aux425' direct represents '1' with '1733'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1733'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00008_00009=9) + (x_00009_00009=9) + (x_00007_00009=9))<=1))
c Var 'aux426' direct represents '0' with '-1734'
c Var 'aux426' direct represents '1' with '1734'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1734'
c Encoding variable: aux427 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00009_00001=1) + (x_00009_00002=1))<=1))
c Var 'aux427' direct represents '0' with '-1735'
c Var 'aux427' direct represents '1' with '1735'
c Var 'aux427' order represents '1' with '1'
c Var 'aux427' order represents '0' with '-1735'
c Encoding variable: aux428 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00009_00001=2) + (x_00009_00002=2))<=1))
c Var 'aux428' direct represents '0' with '-1736'
c Var 'aux428' direct represents '1' with '1736'
c Var 'aux428' order represents '1' with '1'
c Var 'aux428' order represents '0' with '-1736'
c Encoding variable: aux429 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00009_00001=3) + (x_00009_00002=3))<=1))
c Var 'aux429' direct represents '0' with '-1737'
c Var 'aux429' direct represents '1' with '1737'
c Var 'aux429' order represents '1' with '1'
c Var 'aux429' order represents '0' with '-1737'
c Encoding variable: aux430 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00009_00001=4) + (x_00009_00002=4))<=1))
c Var 'aux430' direct represents '0' with '-1738'
c Var 'aux430' direct represents '1' with '1738'
c Var 'aux430' order represents '1' with '1'
c Var 'aux430' order represents '0' with '-1738'
c Encoding variable: aux431 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00009_00001=5) + (x_00009_00002=5))<=1))
c Var 'aux431' direct represents '0' with '-1739'
c Var 'aux431' direct represents '1' with '1739'
c Var 'aux431' order represents '1' with '1'
c Var 'aux431' order represents '0' with '-1739'
c Encoding variable: aux432 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00009_00001=6) + (x_00009_00002=6))<=1))
c Var 'aux432' direct represents '0' with '-1740'
c Var 'aux432' direct represents '1' with '1740'
c Var 'aux432' order represents '1' with '1'
c Var 'aux432' order represents '0' with '-1740'
c Encoding variable: aux433 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00009_00001=7) + (x_00009_00002=7))<=1))
c Var 'aux433' direct represents '0' with '-1741'
c Var 'aux433' direct represents '1' with '1741'
c Var 'aux433' order represents '1' with '1'
c Var 'aux433' order represents '0' with '-1741'
c Encoding variable: aux434 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00009_00001=8) + (x_00009_00002=8))<=1))
c Var 'aux434' direct represents '0' with '-1742'
c Var 'aux434' direct represents '1' with '1742'
c Var 'aux434' order represents '1' with '1'
c Var 'aux434' order represents '0' with '-1742'
c Encoding variable: aux435 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00009_00001=9) + (x_00009_00002=9))<=1))
c Var 'aux435' direct represents '0' with '-1743'
c Var 'aux435' direct represents '1' with '1743'
c Var 'aux435' order represents '1' with '1'
c Var 'aux435' order represents '0' with '-1743'
c Encoding variable: aux436 with domain: bool (representing constraint (((x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1))<=1))
c Var 'aux436' direct represents '0' with '-1744'
c Var 'aux436' direct represents '1' with '1744'
c Var 'aux436' order represents '1' with '1'
c Var 'aux436' order represents '0' with '-1744'
c Encoding variable: aux437 with domain: bool (representing constraint (((x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2))<=1))
c Var 'aux437' direct represents '0' with '-1745'
c Var 'aux437' direct represents '1' with '1745'
c Var 'aux437' order represents '1' with '1'
c Var 'aux437' order represents '0' with '-1745'
c Encoding variable: aux438 with domain: bool (representing constraint (((x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3))<=1))
c Var 'aux438' direct represents '0' with '-1746'
c Var 'aux438' direct represents '1' with '1746'
c Var 'aux438' order represents '1' with '1'
c Var 'aux438' order represents '0' with '-1746'
c Encoding variable: aux439 with domain: bool (representing constraint (((x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4))<=1))
c Var 'aux439' direct represents '0' with '-1747'
c Var 'aux439' direct represents '1' with '1747'
c Var 'aux439' order represents '1' with '1'
c Var 'aux439' order represents '0' with '-1747'
c Encoding variable: aux440 with domain: bool (representing constraint (((x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5))<=1))
c Var 'aux440' direct represents '0' with '-1748'
c Var 'aux440' direct represents '1' with '1748'
c Var 'aux440' order represents '1' with '1'
c Var 'aux440' order represents '0' with '-1748'
c Encoding variable: aux441 with domain: bool (representing constraint (((x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6))<=1))
c Var 'aux441' direct represents '0' with '-1749'
c Var 'aux441' direct represents '1' with '1749'
c Var 'aux441' order represents '1' with '1'
c Var 'aux441' order represents '0' with '-1749'
c Encoding variable: aux442 with domain: bool (representing constraint (((x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7))<=1))
c Var 'aux442' direct represents '0' with '-1750'
c Var 'aux442' direct represents '1' with '1750'
c Var 'aux442' order represents '1' with '1'
c Var 'aux442' order represents '0' with '-1750'
c Encoding variable: aux443 with domain: bool (representing constraint (((x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8))<=1))
c Var 'aux443' direct represents '0' with '-1751'
c Var 'aux443' direct represents '1' with '1751'
c Var 'aux443' order represents '1' with '1'
c Var 'aux443' order represents '0' with '-1751'
c Encoding variable: aux444 with domain: bool (representing constraint (((x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9))<=1))
c Var 'aux444' direct represents '0' with '-1752'
c Var 'aux444' direct represents '1' with '1752'
c Var 'aux444' order represents '1' with '1'
c Var 'aux444' order represents '0' with '-1752'
c Encoding variable: aux445 with domain: int(0..16) (representing constraint (shift(x_00002_00005, -1) + shift(x_00001_00006, -1)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '1753'
c Var 'aux445' direct represents '0' with '1753'
c Var 'aux445' order represents '1' with '1754'
-1753 1754 0
c Var 'aux445' direct represents '1' with '1755'
1753 -1754 1755 0
-1755 1754 0
-1755 -1753 0
c Var 'aux445' order represents '2' with '1756'
-1754 1756 0
c Var 'aux445' direct represents '2' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux445' order represents '3' with '1758'
-1756 1758 0
c Var 'aux445' direct represents '3' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux445' order represents '4' with '1760'
-1758 1760 0
c Var 'aux445' direct represents '4' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux445' order represents '5' with '1762'
-1760 1762 0
c Var 'aux445' direct represents '5' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux445' order represents '6' with '1764'
-1762 1764 0
c Var 'aux445' direct represents '6' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux445' order represents '7' with '1766'
-1764 1766 0
c Var 'aux445' direct represents '7' with '1767'
1764 -1766 1767 0
-1767 1766 0
-1767 -1764 0
c Var 'aux445' order represents '8' with '1768'
-1766 1768 0
c Var 'aux445' direct represents '8' with '1769'
1766 -1768 1769 0
-1769 1768 0
-1769 -1766 0
c Var 'aux445' order represents '9' with '1770'
-1768 1770 0
c Var 'aux445' direct represents '9' with '1771'
1768 -1770 1771 0
-1771 1770 0
-1771 -1768 0
c Var 'aux445' order represents '10' with '1772'
-1770 1772 0
c Var 'aux445' direct represents '10' with '1773'
1770 -1772 1773 0
-1773 1772 0
-1773 -1770 0
c Var 'aux445' order represents '11' with '1774'
-1772 1774 0
c Var 'aux445' direct represents '11' with '1775'
1772 -1774 1775 0
-1775 1774 0
-1775 -1772 0
c Var 'aux445' order represents '12' with '1776'
-1774 1776 0
c Var 'aux445' direct represents '12' with '1777'
1774 -1776 1777 0
-1777 1776 0
-1777 -1774 0
c Var 'aux445' order represents '13' with '1778'
-1776 1778 0
c Var 'aux445' direct represents '13' with '1779'
1776 -1778 1779 0
-1779 1778 0
-1779 -1776 0
c Var 'aux445' order represents '14' with '1780'
-1778 1780 0
c Var 'aux445' direct represents '14' with '1781'
1778 -1780 1781 0
-1781 1780 0
-1781 -1778 0
c Var 'aux445' order represents '15' with '1782'
-1780 1782 0
c Var 'aux445' direct represents '15' with '1783'
1780 -1782 1783 0
-1783 1782 0
-1783 -1780 0
c Var 'aux445' direct represents '16' with '-1782'
1753 1755 1757 1759 1761 1763 1765 1767 1769 1771 1773 1775 1777 1779 1781 1783 -1782 0
c Encoding variable: aux446 with domain: int(0..16) (representing constraint (shift(x_00007_00007, -1) + shift(x_00008_00008, -1)))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '1784'
c Var 'aux446' direct represents '0' with '1784'
c Var 'aux446' order represents '1' with '1785'
-1784 1785 0
c Var 'aux446' direct represents '1' with '1786'
1784 -1785 1786 0
-1786 1785 0
-1786 -1784 0
c Var 'aux446' order represents '2' with '1787'
-1785 1787 0
c Var 'aux446' direct represents '2' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux446' order represents '3' with '1789'
-1787 1789 0
c Var 'aux446' direct represents '3' with '1790'
1787 -1789 1790 0
-1790 1789 0
-1790 -1787 0
c Var 'aux446' order represents '4' with '1791'
-1789 1791 0
c Var 'aux446' direct represents '4' with '1792'
1789 -1791 1792 0
-1792 1791 0
-1792 -1789 0
c Var 'aux446' order represents '5' with '1793'
-1791 1793 0
c Var 'aux446' direct represents '5' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux446' order represents '6' with '1795'
-1793 1795 0
c Var 'aux446' direct represents '6' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux446' order represents '7' with '1797'
-1795 1797 0
c Var 'aux446' direct represents '7' with '1798'
1795 -1797 1798 0
-1798 1797 0
-1798 -1795 0
c Var 'aux446' order represents '8' with '1799'
-1797 1799 0
c Var 'aux446' direct represents '8' with '1800'
1797 -1799 1800 0
-1800 1799 0
-1800 -1797 0
c Var 'aux446' order represents '9' with '1801'
-1799 1801 0
c Var 'aux446' direct represents '9' with '1802'
1799 -1801 1802 0
-1802 1801 0
-1802 -1799 0
c Var 'aux446' order represents '10' with '1803'
-1801 1803 0
c Var 'aux446' direct represents '10' with '1804'
1801 -1803 1804 0
-1804 1803 0
-1804 -1801 0
c Var 'aux446' order represents '11' with '1805'
-1803 1805 0
c Var 'aux446' direct represents '11' with '1806'
1803 -1805 1806 0
-1806 1805 0
-1806 -1803 0
c Var 'aux446' order represents '12' with '1807'
-1805 1807 0
c Var 'aux446' direct represents '12' with '1808'
1805 -1807 1808 0
-1808 1807 0
-1808 -1805 0
c Var 'aux446' order represents '13' with '1809'
-1807 1809 0
c Var 'aux446' direct represents '13' with '1810'
1807 -1809 1810 0
-1810 1809 0
-1810 -1807 0
c Var 'aux446' order represents '14' with '1811'
-1809 1811 0
c Var 'aux446' direct represents '14' with '1812'
1809 -1811 1812 0
-1812 1811 0
-1812 -1809 0
c Var 'aux446' order represents '15' with '1813'
-1811 1813 0
c Var 'aux446' direct represents '15' with '1814'
1811 -1813 1814 0
-1814 1813 0
-1814 -1811 0
c Var 'aux446' direct represents '16' with '-1813'
1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 -1813 0
c Encoding variable: aux447 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '1815'
c Var 'aux447' direct represents '0' with '1815'
c Var 'aux447' order represents '1' with '1816'
-1815 1816 0
c Var 'aux447' direct represents '1' with '1817'
1815 -1816 1817 0
-1817 1816 0
-1817 -1815 0
c Var 'aux447' direct represents '2' with '-1816'
1815 1817 -1816 0
c Encoding variable: aux448 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '1818'
c Var 'aux448' direct represents '0' with '1818'
c Var 'aux448' order represents '1' with '1819'
-1818 1819 0
c Var 'aux448' direct represents '1' with '1820'
1818 -1819 1820 0
-1820 1819 0
-1820 -1818 0
c Var 'aux448' direct represents '2' with '-1819'
1818 1820 -1819 0
c Encoding variable: aux449 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '1821'
c Var 'aux449' direct represents '0' with '1821'
c Var 'aux449' order represents '1' with '1822'
-1821 1822 0
c Var 'aux449' direct represents '1' with '1823'
1821 -1822 1823 0
-1823 1822 0
-1823 -1821 0
c Var 'aux449' direct represents '2' with '-1822'
1821 1823 -1822 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '1824'
c Var 'aux450' direct represents '0' with '1824'
c Var 'aux450' order represents '1' with '1825'
-1824 1825 0
c Var 'aux450' direct represents '1' with '1826'
1824 -1825 1826 0
-1826 1825 0
-1826 -1824 0
c Var 'aux450' direct represents '2' with '-1825'
1824 1826 -1825 0
c Encoding variable: aux451 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux450))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '1827'
c Var 'aux451' direct represents '0' with '1827'
c Var 'aux451' order represents '1' with '1828'
-1827 1828 0
c Var 'aux451' direct represents '1' with '1829'
1827 -1828 1829 0
-1829 1828 0
-1829 -1827 0
c Var 'aux451' order represents '2' with '1830'
-1828 1830 0
c Var 'aux451' direct represents '2' with '1831'
1828 -1830 1831 0
-1831 1830 0
-1831 -1828 0
c Var 'aux451' direct represents '3' with '-1830'
1827 1829 1831 -1830 0
c Encoding variable: aux452 with domain: int(0..4) (representing constraint (aux447 + aux449))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '1832'
c Var 'aux452' direct represents '0' with '1832'
c Var 'aux452' order represents '1' with '1833'
-1832 1833 0
c Var 'aux452' direct represents '1' with '1834'
1832 -1833 1834 0
-1834 1833 0
-1834 -1832 0
c Var 'aux452' order represents '2' with '1835'
-1833 1835 0
c Var 'aux452' direct represents '2' with '1836'
1833 -1835 1836 0
-1836 1835 0
-1836 -1833 0
c Var 'aux452' order represents '3' with '1837'
-1835 1837 0
c Var 'aux452' direct represents '3' with '1838'
1835 -1837 1838 0
-1838 1837 0
-1838 -1835 0
c Var 'aux452' direct represents '4' with '-1837'
1832 1834 1836 1838 -1837 0
c Encoding variable: aux453 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '1839'
c Var 'aux453' direct represents '0' with '1839'
c Var 'aux453' order represents '1' with '1840'
-1839 1840 0
c Var 'aux453' direct represents '1' with '1841'
1839 -1840 1841 0
-1841 1840 0
-1841 -1839 0
c Var 'aux453' direct represents '2' with '-1840'
1839 1841 -1840 0
c Encoding variable: aux454 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '1842'
c Var 'aux454' direct represents '0' with '1842'
c Var 'aux454' order represents '1' with '1843'
-1842 1843 0
c Var 'aux454' direct represents '1' with '1844'
1842 -1843 1844 0
-1844 1843 0
-1844 -1842 0
c Var 'aux454' direct represents '2' with '-1843'
1842 1844 -1843 0
c Encoding variable: aux455 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '1845'
c Var 'aux455' direct represents '0' with '1845'
c Var 'aux455' order represents '1' with '1846'
-1845 1846 0
c Var 'aux455' direct represents '1' with '1847'
1845 -1846 1847 0
-1847 1846 0
-1847 -1845 0
c Var 'aux455' direct represents '2' with '-1846'
1845 1847 -1846 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '1848'
c Var 'aux456' direct represents '0' with '1848'
c Var 'aux456' order represents '1' with '1849'
-1848 1849 0
c Var 'aux456' direct represents '1' with '1850'
1848 -1849 1850 0
-1850 1849 0
-1850 -1848 0
c Var 'aux456' direct represents '2' with '-1849'
1848 1850 -1849 0
c Encoding variable: aux457 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux456))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '1851'
c Var 'aux457' direct represents '0' with '1851'
c Var 'aux457' order represents '1' with '1852'
-1851 1852 0
c Var 'aux457' direct represents '1' with '1853'
1851 -1852 1853 0
-1853 1852 0
-1853 -1851 0
c Var 'aux457' order represents '2' with '1854'
-1852 1854 0
c Var 'aux457' direct represents '2' with '1855'
1852 -1854 1855 0
-1855 1854 0
-1855 -1852 0
c Var 'aux457' direct represents '3' with '-1854'
1851 1853 1855 -1854 0
c Encoding variable: aux458 with domain: int(0..4) (representing constraint (aux453 + aux455))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '1856'
c Var 'aux458' direct represents '0' with '1856'
c Var 'aux458' order represents '1' with '1857'
-1856 1857 0
c Var 'aux458' direct represents '1' with '1858'
1856 -1857 1858 0
-1858 1857 0
-1858 -1856 0
c Var 'aux458' order represents '2' with '1859'
-1857 1859 0
c Var 'aux458' direct represents '2' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux458' order represents '3' with '1861'
-1859 1861 0
c Var 'aux458' direct represents '3' with '1862'
1859 -1861 1862 0
-1862 1861 0
-1862 -1859 0
c Var 'aux458' direct represents '4' with '-1861'
1856 1858 1860 1862 -1861 0
c Encoding variable: aux459 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '1863'
c Var 'aux459' direct represents '0' with '1863'
c Var 'aux459' order represents '1' with '1864'
-1863 1864 0
c Var 'aux459' direct represents '1' with '1865'
1863 -1864 1865 0
-1865 1864 0
-1865 -1863 0
c Var 'aux459' direct represents '2' with '-1864'
1863 1865 -1864 0
c Encoding variable: aux460 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '1866'
c Var 'aux460' direct represents '0' with '1866'
c Var 'aux460' order represents '1' with '1867'
-1866 1867 0
c Var 'aux460' direct represents '1' with '1868'
1866 -1867 1868 0
-1868 1867 0
-1868 -1866 0
c Var 'aux460' direct represents '2' with '-1867'
1866 1868 -1867 0
c Encoding variable: aux461 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '1869'
c Var 'aux461' direct represents '0' with '1869'
c Var 'aux461' order represents '1' with '1870'
-1869 1870 0
c Var 'aux461' direct represents '1' with '1871'
1869 -1870 1871 0
-1871 1870 0
-1871 -1869 0
c Var 'aux461' direct represents '2' with '-1870'
1869 1871 -1870 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '1872'
c Var 'aux462' direct represents '0' with '1872'
c Var 'aux462' order represents '1' with '1873'
-1872 1873 0
c Var 'aux462' direct represents '1' with '1874'
1872 -1873 1874 0
-1874 1873 0
-1874 -1872 0
c Var 'aux462' direct represents '2' with '-1873'
1872 1874 -1873 0
c Encoding variable: aux463 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux462))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '1875'
c Var 'aux463' direct represents '0' with '1875'
c Var 'aux463' order represents '1' with '1876'
-1875 1876 0
c Var 'aux463' direct represents '1' with '1877'
1875 -1876 1877 0
-1877 1876 0
-1877 -1875 0
c Var 'aux463' order represents '2' with '1878'
-1876 1878 0
c Var 'aux463' direct represents '2' with '1879'
1876 -1878 1879 0
-1879 1878 0
-1879 -1876 0
c Var 'aux463' direct represents '3' with '-1878'
1875 1877 1879 -1878 0
c Encoding variable: aux464 with domain: int(0..4) (representing constraint (aux459 + aux461))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '1880'
c Var 'aux464' direct represents '0' with '1880'
c Var 'aux464' order represents '1' with '1881'
-1880 1881 0
c Var 'aux464' direct represents '1' with '1882'
1880 -1881 1882 0
-1882 1881 0
-1882 -1880 0
c Var 'aux464' order represents '2' with '1883'
-1881 1883 0
c Var 'aux464' direct represents '2' with '1884'
1881 -1883 1884 0
-1884 1883 0
-1884 -1881 0
c Var 'aux464' order represents '3' with '1885'
-1883 1885 0
c Var 'aux464' direct represents '3' with '1886'
1883 -1885 1886 0
-1886 1885 0
-1886 -1883 0
c Var 'aux464' direct represents '4' with '-1885'
1880 1882 1884 1886 -1885 0
c Encoding variable: aux465 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '1887'
c Var 'aux465' direct represents '0' with '1887'
c Var 'aux465' order represents '1' with '1888'
-1887 1888 0
c Var 'aux465' direct represents '1' with '1889'
1887 -1888 1889 0
-1889 1888 0
-1889 -1887 0
c Var 'aux465' direct represents '2' with '-1888'
1887 1889 -1888 0
c Encoding variable: aux466 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '1890'
c Var 'aux466' direct represents '0' with '1890'
c Var 'aux466' order represents '1' with '1891'
-1890 1891 0
c Var 'aux466' direct represents '1' with '1892'
1890 -1891 1892 0
-1892 1891 0
-1892 -1890 0
c Var 'aux466' direct represents '2' with '-1891'
1890 1892 -1891 0
c Encoding variable: aux467 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '1893'
c Var 'aux467' direct represents '0' with '1893'
c Var 'aux467' order represents '1' with '1894'
-1893 1894 0
c Var 'aux467' direct represents '1' with '1895'
1893 -1894 1895 0
-1895 1894 0
-1895 -1893 0
c Var 'aux467' direct represents '2' with '-1894'
1893 1895 -1894 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '1896'
c Var 'aux468' direct represents '0' with '1896'
c Var 'aux468' order represents '1' with '1897'
-1896 1897 0
c Var 'aux468' direct represents '1' with '1898'
1896 -1897 1898 0
-1898 1897 0
-1898 -1896 0
c Var 'aux468' direct represents '2' with '-1897'
1896 1898 -1897 0
c Encoding variable: aux469 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux468))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '1899'
c Var 'aux469' direct represents '0' with '1899'
c Var 'aux469' order represents '1' with '1900'
-1899 1900 0
c Var 'aux469' direct represents '1' with '1901'
1899 -1900 1901 0
-1901 1900 0
-1901 -1899 0
c Var 'aux469' order represents '2' with '1902'
-1900 1902 0
c Var 'aux469' direct represents '2' with '1903'
1900 -1902 1903 0
-1903 1902 0
-1903 -1900 0
c Var 'aux469' direct represents '3' with '-1902'
1899 1901 1903 -1902 0
c Encoding variable: aux470 with domain: int(0..4) (representing constraint (aux465 + aux467))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '1904'
c Var 'aux470' direct represents '0' with '1904'
c Var 'aux470' order represents '1' with '1905'
-1904 1905 0
c Var 'aux470' direct represents '1' with '1906'
1904 -1905 1906 0
-1906 1905 0
-1906 -1904 0
c Var 'aux470' order represents '2' with '1907'
-1905 1907 0
c Var 'aux470' direct represents '2' with '1908'
1905 -1907 1908 0
-1908 1907 0
-1908 -1905 0
c Var 'aux470' order represents '3' with '1909'
-1907 1909 0
c Var 'aux470' direct represents '3' with '1910'
1907 -1909 1910 0
-1910 1909 0
-1910 -1907 0
c Var 'aux470' direct represents '4' with '-1909'
1904 1906 1908 1910 -1909 0
c Encoding variable: aux471 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '1911'
c Var 'aux471' direct represents '0' with '1911'
c Var 'aux471' order represents '1' with '1912'
-1911 1912 0
c Var 'aux471' direct represents '1' with '1913'
1911 -1912 1913 0
-1913 1912 0
-1913 -1911 0
c Var 'aux471' direct represents '2' with '-1912'
1911 1913 -1912 0
c Encoding variable: aux472 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '1914'
c Var 'aux472' direct represents '0' with '1914'
c Var 'aux472' order represents '1' with '1915'
-1914 1915 0
c Var 'aux472' direct represents '1' with '1916'
1914 -1915 1916 0
-1916 1915 0
-1916 -1914 0
c Var 'aux472' direct represents '2' with '-1915'
1914 1916 -1915 0
c Encoding variable: aux473 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '1917'
c Var 'aux473' direct represents '0' with '1917'
c Var 'aux473' order represents '1' with '1918'
-1917 1918 0
c Var 'aux473' direct represents '1' with '1919'
1917 -1918 1919 0
-1919 1918 0
-1919 -1917 0
c Var 'aux473' direct represents '2' with '-1918'
1917 1919 -1918 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '1920'
c Var 'aux474' direct represents '0' with '1920'
c Var 'aux474' order represents '1' with '1921'
-1920 1921 0
c Var 'aux474' direct represents '1' with '1922'
1920 -1921 1922 0
-1922 1921 0
-1922 -1920 0
c Var 'aux474' direct represents '2' with '-1921'
1920 1922 -1921 0
c Encoding variable: aux475 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux474))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '1923'
c Var 'aux475' direct represents '0' with '1923'
c Var 'aux475' order represents '1' with '1924'
-1923 1924 0
c Var 'aux475' direct represents '1' with '1925'
1923 -1924 1925 0
-1925 1924 0
-1925 -1923 0
c Var 'aux475' order represents '2' with '1926'
-1924 1926 0
c Var 'aux475' direct represents '2' with '1927'
1924 -1926 1927 0
-1927 1926 0
-1927 -1924 0
c Var 'aux475' direct represents '3' with '-1926'
1923 1925 1927 -1926 0
c Encoding variable: aux476 with domain: int(0..4) (representing constraint (aux471 + aux473))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '1928'
c Var 'aux476' direct represents '0' with '1928'
c Var 'aux476' order represents '1' with '1929'
-1928 1929 0
c Var 'aux476' direct represents '1' with '1930'
1928 -1929 1930 0
-1930 1929 0
-1930 -1928 0
c Var 'aux476' order represents '2' with '1931'
-1929 1931 0
c Var 'aux476' direct represents '2' with '1932'
1929 -1931 1932 0
-1932 1931 0
-1932 -1929 0
c Var 'aux476' order represents '3' with '1933'
-1931 1933 0
c Var 'aux476' direct represents '3' with '1934'
1931 -1933 1934 0
-1934 1933 0
-1934 -1931 0
c Var 'aux476' direct represents '4' with '-1933'
1928 1930 1932 1934 -1933 0
c Encoding variable: aux477 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '1935'
c Var 'aux477' direct represents '0' with '1935'
c Var 'aux477' order represents '1' with '1936'
-1935 1936 0
c Var 'aux477' direct represents '1' with '1937'
1935 -1936 1937 0
-1937 1936 0
-1937 -1935 0
c Var 'aux477' direct represents '2' with '-1936'
1935 1937 -1936 0
c Encoding variable: aux478 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '1938'
c Var 'aux478' direct represents '0' with '1938'
c Var 'aux478' order represents '1' with '1939'
-1938 1939 0
c Var 'aux478' direct represents '1' with '1940'
1938 -1939 1940 0
-1940 1939 0
-1940 -1938 0
c Var 'aux478' direct represents '2' with '-1939'
1938 1940 -1939 0
c Encoding variable: aux479 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '1941'
c Var 'aux479' direct represents '0' with '1941'
c Var 'aux479' order represents '1' with '1942'
-1941 1942 0
c Var 'aux479' direct represents '1' with '1943'
1941 -1942 1943 0
-1943 1942 0
-1943 -1941 0
c Var 'aux479' direct represents '2' with '-1942'
1941 1943 -1942 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '1944'
c Var 'aux480' direct represents '0' with '1944'
c Var 'aux480' order represents '1' with '1945'
-1944 1945 0
c Var 'aux480' direct represents '1' with '1946'
1944 -1945 1946 0
-1946 1945 0
-1946 -1944 0
c Var 'aux480' direct represents '2' with '-1945'
1944 1946 -1945 0
c Encoding variable: aux481 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux480))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '1947'
c Var 'aux481' direct represents '0' with '1947'
c Var 'aux481' order represents '1' with '1948'
-1947 1948 0
c Var 'aux481' direct represents '1' with '1949'
1947 -1948 1949 0
-1949 1948 0
-1949 -1947 0
c Var 'aux481' order represents '2' with '1950'
-1948 1950 0
c Var 'aux481' direct represents '2' with '1951'
1948 -1950 1951 0
-1951 1950 0
-1951 -1948 0
c Var 'aux481' direct represents '3' with '-1950'
1947 1949 1951 -1950 0
c Encoding variable: aux482 with domain: int(0..4) (representing constraint (aux477 + aux479))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '1952'
c Var 'aux482' direct represents '0' with '1952'
c Var 'aux482' order represents '1' with '1953'
-1952 1953 0
c Var 'aux482' direct represents '1' with '1954'
1952 -1953 1954 0
-1954 1953 0
-1954 -1952 0
c Var 'aux482' order represents '2' with '1955'
-1953 1955 0
c Var 'aux482' direct represents '2' with '1956'
1953 -1955 1956 0
-1956 1955 0
-1956 -1953 0
c Var 'aux482' order represents '3' with '1957'
-1955 1957 0
c Var 'aux482' direct represents '3' with '1958'
1955 -1957 1958 0
-1958 1957 0
-1958 -1955 0
c Var 'aux482' direct represents '4' with '-1957'
1952 1954 1956 1958 -1957 0
c Encoding variable: aux483 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '1959'
c Var 'aux483' direct represents '0' with '1959'
c Var 'aux483' order represents '1' with '1960'
-1959 1960 0
c Var 'aux483' direct represents '1' with '1961'
1959 -1960 1961 0
-1961 1960 0
-1961 -1959 0
c Var 'aux483' direct represents '2' with '-1960'
1959 1961 -1960 0
c Encoding variable: aux484 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '1962'
c Var 'aux484' direct represents '0' with '1962'
c Var 'aux484' order represents '1' with '1963'
-1962 1963 0
c Var 'aux484' direct represents '1' with '1964'
1962 -1963 1964 0
-1964 1963 0
-1964 -1962 0
c Var 'aux484' direct represents '2' with '-1963'
1962 1964 -1963 0
c Encoding variable: aux485 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '1965'
c Var 'aux485' direct represents '0' with '1965'
c Var 'aux485' order represents '1' with '1966'
-1965 1966 0
c Var 'aux485' direct represents '1' with '1967'
1965 -1966 1967 0
-1967 1966 0
-1967 -1965 0
c Var 'aux485' direct represents '2' with '-1966'
1965 1967 -1966 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '1968'
c Var 'aux486' direct represents '0' with '1968'
c Var 'aux486' order represents '1' with '1969'
-1968 1969 0
c Var 'aux486' direct represents '1' with '1970'
1968 -1969 1970 0
-1970 1969 0
-1970 -1968 0
c Var 'aux486' direct represents '2' with '-1969'
1968 1970 -1969 0
c Encoding variable: aux487 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux486))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '1971'
c Var 'aux487' direct represents '0' with '1971'
c Var 'aux487' order represents '1' with '1972'
-1971 1972 0
c Var 'aux487' direct represents '1' with '1973'
1971 -1972 1973 0
-1973 1972 0
-1973 -1971 0
c Var 'aux487' order represents '2' with '1974'
-1972 1974 0
c Var 'aux487' direct represents '2' with '1975'
1972 -1974 1975 0
-1975 1974 0
-1975 -1972 0
c Var 'aux487' direct represents '3' with '-1974'
1971 1973 1975 -1974 0
c Encoding variable: aux488 with domain: int(0..4) (representing constraint (aux483 + aux485))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '1976'
c Var 'aux488' direct represents '0' with '1976'
c Var 'aux488' order represents '1' with '1977'
-1976 1977 0
c Var 'aux488' direct represents '1' with '1978'
1976 -1977 1978 0
-1978 1977 0
-1978 -1976 0
c Var 'aux488' order represents '2' with '1979'
-1977 1979 0
c Var 'aux488' direct represents '2' with '1980'
1977 -1979 1980 0
-1980 1979 0
-1980 -1977 0
c Var 'aux488' order represents '3' with '1981'
-1979 1981 0
c Var 'aux488' direct represents '3' with '1982'
1979 -1981 1982 0
-1982 1981 0
-1982 -1979 0
c Var 'aux488' direct represents '4' with '-1981'
1976 1978 1980 1982 -1981 0
c Encoding variable: aux489 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '1983'
c Var 'aux489' direct represents '0' with '1983'
c Var 'aux489' order represents '1' with '1984'
-1983 1984 0
c Var 'aux489' direct represents '1' with '1985'
1983 -1984 1985 0
-1985 1984 0
-1985 -1983 0
c Var 'aux489' direct represents '2' with '-1984'
1983 1985 -1984 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '1986'
c Var 'aux490' direct represents '0' with '1986'
c Var 'aux490' order represents '1' with '1987'
-1986 1987 0
c Var 'aux490' direct represents '1' with '1988'
1986 -1987 1988 0
-1988 1987 0
-1988 -1986 0
c Var 'aux490' direct represents '2' with '-1987'
1986 1988 -1987 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '1989'
c Var 'aux491' direct represents '0' with '1989'
c Var 'aux491' order represents '1' with '1990'
-1989 1990 0
c Var 'aux491' direct represents '1' with '1991'
1989 -1990 1991 0
-1991 1990 0
-1991 -1989 0
c Var 'aux491' direct represents '2' with '-1990'
1989 1991 -1990 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '1992'
c Var 'aux492' direct represents '0' with '1992'
c Var 'aux492' order represents '1' with '1993'
-1992 1993 0
c Var 'aux492' direct represents '1' with '1994'
1992 -1993 1994 0
-1994 1993 0
-1994 -1992 0
c Var 'aux492' direct represents '2' with '-1993'
1992 1994 -1993 0
c Encoding variable: aux493 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux492))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '1995'
c Var 'aux493' direct represents '0' with '1995'
c Var 'aux493' order represents '1' with '1996'
-1995 1996 0
c Var 'aux493' direct represents '1' with '1997'
1995 -1996 1997 0
-1997 1996 0
-1997 -1995 0
c Var 'aux493' order represents '2' with '1998'
-1996 1998 0
c Var 'aux493' direct represents '2' with '1999'
1996 -1998 1999 0
-1999 1998 0
-1999 -1996 0
c Var 'aux493' direct represents '3' with '-1998'
1995 1997 1999 -1998 0
c Encoding variable: aux494 with domain: int(0..4) (representing constraint (aux489 + aux491))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2000'
c Var 'aux494' direct represents '0' with '2000'
c Var 'aux494' order represents '1' with '2001'
-2000 2001 0
c Var 'aux494' direct represents '1' with '2002'
2000 -2001 2002 0
-2002 2001 0
-2002 -2000 0
c Var 'aux494' order represents '2' with '2003'
-2001 2003 0
c Var 'aux494' direct represents '2' with '2004'
2001 -2003 2004 0
-2004 2003 0
-2004 -2001 0
c Var 'aux494' order represents '3' with '2005'
-2003 2005 0
c Var 'aux494' direct represents '3' with '2006'
2003 -2005 2006 0
-2006 2005 0
-2006 -2003 0
c Var 'aux494' direct represents '4' with '-2005'
2000 2002 2004 2006 -2005 0
c Encoding variable: aux495 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2007'
c Var 'aux495' direct represents '0' with '2007'
c Var 'aux495' order represents '1' with '2008'
-2007 2008 0
c Var 'aux495' direct represents '1' with '2009'
2007 -2008 2009 0
-2009 2008 0
-2009 -2007 0
c Var 'aux495' direct represents '2' with '-2008'
2007 2009 -2008 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2010'
c Var 'aux496' direct represents '0' with '2010'
c Var 'aux496' order represents '1' with '2011'
-2010 2011 0
c Var 'aux496' direct represents '1' with '2012'
2010 -2011 2012 0
-2012 2011 0
-2012 -2010 0
c Var 'aux496' direct represents '2' with '-2011'
2010 2012 -2011 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2013'
c Var 'aux497' direct represents '0' with '2013'
c Var 'aux497' order represents '1' with '2014'
-2013 2014 0
c Var 'aux497' direct represents '1' with '2015'
2013 -2014 2015 0
-2015 2014 0
-2015 -2013 0
c Var 'aux497' direct represents '2' with '-2014'
2013 2015 -2014 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2016'
c Var 'aux498' direct represents '0' with '2016'
c Var 'aux498' order represents '1' with '2017'
-2016 2017 0
c Var 'aux498' direct represents '1' with '2018'
2016 -2017 2018 0
-2018 2017 0
-2018 -2016 0
c Var 'aux498' direct represents '2' with '-2017'
2016 2018 -2017 0
c Encoding variable: aux499 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux498))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2019'
c Var 'aux499' direct represents '0' with '2019'
c Var 'aux499' order represents '1' with '2020'
-2019 2020 0
c Var 'aux499' direct represents '1' with '2021'
2019 -2020 2021 0
-2021 2020 0
-2021 -2019 0
c Var 'aux499' order represents '2' with '2022'
-2020 2022 0
c Var 'aux499' direct represents '2' with '2023'
2020 -2022 2023 0
-2023 2022 0
-2023 -2020 0
c Var 'aux499' direct represents '3' with '-2022'
2019 2021 2023 -2022 0
c Encoding variable: aux500 with domain: int(0..4) (representing constraint (aux495 + aux497))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2024'
c Var 'aux500' direct represents '0' with '2024'
c Var 'aux500' order represents '1' with '2025'
-2024 2025 0
c Var 'aux500' direct represents '1' with '2026'
2024 -2025 2026 0
-2026 2025 0
-2026 -2024 0
c Var 'aux500' order represents '2' with '2027'
-2025 2027 0
c Var 'aux500' direct represents '2' with '2028'
2025 -2027 2028 0
-2028 2027 0
-2028 -2025 0
c Var 'aux500' order represents '3' with '2029'
-2027 2029 0
c Var 'aux500' direct represents '3' with '2030'
2027 -2029 2030 0
-2030 2029 0
-2030 -2027 0
c Var 'aux500' direct represents '4' with '-2029'
2024 2026 2028 2030 -2029 0
c Encoding variable: aux501 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2031'
c Var 'aux501' direct represents '0' with '2031'
c Var 'aux501' order represents '1' with '2032'
-2031 2032 0
c Var 'aux501' direct represents '1' with '2033'
2031 -2032 2033 0
-2033 2032 0
-2033 -2031 0
c Var 'aux501' direct represents '2' with '-2032'
2031 2033 -2032 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2034'
c Var 'aux502' direct represents '0' with '2034'
c Var 'aux502' order represents '1' with '2035'
-2034 2035 0
c Var 'aux502' direct represents '1' with '2036'
2034 -2035 2036 0
-2036 2035 0
-2036 -2034 0
c Var 'aux502' direct represents '2' with '-2035'
2034 2036 -2035 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2037'
c Var 'aux503' direct represents '0' with '2037'
c Var 'aux503' order represents '1' with '2038'
-2037 2038 0
c Var 'aux503' direct represents '1' with '2039'
2037 -2038 2039 0
-2039 2038 0
-2039 -2037 0
c Var 'aux503' direct represents '2' with '-2038'
2037 2039 -2038 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2040'
c Var 'aux504' direct represents '0' with '2040'
c Var 'aux504' order represents '1' with '2041'
-2040 2041 0
c Var 'aux504' direct represents '1' with '2042'
2040 -2041 2042 0
-2042 2041 0
-2042 -2040 0
c Var 'aux504' direct represents '2' with '-2041'
2040 2042 -2041 0
c Encoding variable: aux505 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux504))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2043'
c Var 'aux505' direct represents '0' with '2043'
c Var 'aux505' order represents '1' with '2044'
-2043 2044 0
c Var 'aux505' direct represents '1' with '2045'
2043 -2044 2045 0
-2045 2044 0
-2045 -2043 0
c Var 'aux505' order represents '2' with '2046'
-2044 2046 0
c Var 'aux505' direct represents '2' with '2047'
2044 -2046 2047 0
-2047 2046 0
-2047 -2044 0
c Var 'aux505' direct represents '3' with '-2046'
2043 2045 2047 -2046 0
c Encoding variable: aux506 with domain: int(0..4) (representing constraint (aux501 + aux503))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2048'
c Var 'aux506' direct represents '0' with '2048'
c Var 'aux506' order represents '1' with '2049'
-2048 2049 0
c Var 'aux506' direct represents '1' with '2050'
2048 -2049 2050 0
-2050 2049 0
-2050 -2048 0
c Var 'aux506' order represents '2' with '2051'
-2049 2051 0
c Var 'aux506' direct represents '2' with '2052'
2049 -2051 2052 0
-2052 2051 0
-2052 -2049 0
c Var 'aux506' order represents '3' with '2053'
-2051 2053 0
c Var 'aux506' direct represents '3' with '2054'
2051 -2053 2054 0
-2054 2053 0
-2054 -2051 0
c Var 'aux506' direct represents '4' with '-2053'
2048 2050 2052 2054 -2053 0
c Encoding variable: aux507 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2055'
c Var 'aux507' direct represents '0' with '2055'
c Var 'aux507' order represents '1' with '2056'
-2055 2056 0
c Var 'aux507' direct represents '1' with '2057'
2055 -2056 2057 0
-2057 2056 0
-2057 -2055 0
c Var 'aux507' direct represents '2' with '-2056'
2055 2057 -2056 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2058'
c Var 'aux508' direct represents '0' with '2058'
c Var 'aux508' order represents '1' with '2059'
-2058 2059 0
c Var 'aux508' direct represents '1' with '2060'
2058 -2059 2060 0
-2060 2059 0
-2060 -2058 0
c Var 'aux508' direct represents '2' with '-2059'
2058 2060 -2059 0
c Encoding variable: aux509 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2061'
c Var 'aux509' direct represents '0' with '2061'
c Var 'aux509' order represents '1' with '2062'
-2061 2062 0
c Var 'aux509' direct represents '1' with '2063'
2061 -2062 2063 0
-2063 2062 0
-2063 -2061 0
c Var 'aux509' direct represents '2' with '-2062'
2061 2063 -2062 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2064'
c Var 'aux510' direct represents '0' with '2064'
c Var 'aux510' order represents '1' with '2065'
-2064 2065 0
c Var 'aux510' direct represents '1' with '2066'
2064 -2065 2066 0
-2066 2065 0
-2066 -2064 0
c Var 'aux510' direct represents '2' with '-2065'
2064 2066 -2065 0
c Encoding variable: aux511 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux510))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2067'
c Var 'aux511' direct represents '0' with '2067'
c Var 'aux511' order represents '1' with '2068'
-2067 2068 0
c Var 'aux511' direct represents '1' with '2069'
2067 -2068 2069 0
-2069 2068 0
-2069 -2067 0
c Var 'aux511' order represents '2' with '2070'
-2068 2070 0
c Var 'aux511' direct represents '2' with '2071'
2068 -2070 2071 0
-2071 2070 0
-2071 -2068 0
c Var 'aux511' direct represents '3' with '-2070'
2067 2069 2071 -2070 0
c Encoding variable: aux512 with domain: int(0..4) (representing constraint (aux507 + aux509))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2072'
c Var 'aux512' direct represents '0' with '2072'
c Var 'aux512' order represents '1' with '2073'
-2072 2073 0
c Var 'aux512' direct represents '1' with '2074'
2072 -2073 2074 0
-2074 2073 0
-2074 -2072 0
c Var 'aux512' order represents '2' with '2075'
-2073 2075 0
c Var 'aux512' direct represents '2' with '2076'
2073 -2075 2076 0
-2076 2075 0
-2076 -2073 0
c Var 'aux512' order represents '3' with '2077'
-2075 2077 0
c Var 'aux512' direct represents '3' with '2078'
2075 -2077 2078 0
-2078 2077 0
-2078 -2075 0
c Var 'aux512' direct represents '4' with '-2077'
2072 2074 2076 2078 -2077 0
c Encoding variable: aux513 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2079'
c Var 'aux513' direct represents '0' with '2079'
c Var 'aux513' order represents '1' with '2080'
-2079 2080 0
c Var 'aux513' direct represents '1' with '2081'
2079 -2080 2081 0
-2081 2080 0
-2081 -2079 0
c Var 'aux513' direct represents '2' with '-2080'
2079 2081 -2080 0
c Encoding variable: aux514 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2082'
c Var 'aux514' direct represents '0' with '2082'
c Var 'aux514' order represents '1' with '2083'
-2082 2083 0
c Var 'aux514' direct represents '1' with '2084'
2082 -2083 2084 0
-2084 2083 0
-2084 -2082 0
c Var 'aux514' direct represents '2' with '-2083'
2082 2084 -2083 0
c Encoding variable: aux515 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2085'
c Var 'aux515' direct represents '0' with '2085'
c Var 'aux515' order represents '1' with '2086'
-2085 2086 0
c Var 'aux515' direct represents '1' with '2087'
2085 -2086 2087 0
-2087 2086 0
-2087 -2085 0
c Var 'aux515' direct represents '2' with '-2086'
2085 2087 -2086 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2088'
c Var 'aux516' direct represents '0' with '2088'
c Var 'aux516' order represents '1' with '2089'
-2088 2089 0
c Var 'aux516' direct represents '1' with '2090'
2088 -2089 2090 0
-2090 2089 0
-2090 -2088 0
c Var 'aux516' direct represents '2' with '-2089'
2088 2090 -2089 0
c Encoding variable: aux517 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux516))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2091'
c Var 'aux517' direct represents '0' with '2091'
c Var 'aux517' order represents '1' with '2092'
-2091 2092 0
c Var 'aux517' direct represents '1' with '2093'
2091 -2092 2093 0
-2093 2092 0
-2093 -2091 0
c Var 'aux517' order represents '2' with '2094'
-2092 2094 0
c Var 'aux517' direct represents '2' with '2095'
2092 -2094 2095 0
-2095 2094 0
-2095 -2092 0
c Var 'aux517' direct represents '3' with '-2094'
2091 2093 2095 -2094 0
c Encoding variable: aux518 with domain: int(0..4) (representing constraint (aux513 + aux515))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2096'
c Var 'aux518' direct represents '0' with '2096'
c Var 'aux518' order represents '1' with '2097'
-2096 2097 0
c Var 'aux518' direct represents '1' with '2098'
2096 -2097 2098 0
-2098 2097 0
-2098 -2096 0
c Var 'aux518' order represents '2' with '2099'
-2097 2099 0
c Var 'aux518' direct represents '2' with '2100'
2097 -2099 2100 0
-2100 2099 0
-2100 -2097 0
c Var 'aux518' order represents '3' with '2101'
-2099 2101 0
c Var 'aux518' direct represents '3' with '2102'
2099 -2101 2102 0
-2102 2101 0
-2102 -2099 0
c Var 'aux518' direct represents '4' with '-2101'
2096 2098 2100 2102 -2101 0
c Encoding variable: aux519 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2103'
c Var 'aux519' direct represents '0' with '2103'
c Var 'aux519' order represents '1' with '2104'
-2103 2104 0
c Var 'aux519' direct represents '1' with '2105'
2103 -2104 2105 0
-2105 2104 0
-2105 -2103 0
c Var 'aux519' direct represents '2' with '-2104'
2103 2105 -2104 0
c Encoding variable: aux520 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2106'
c Var 'aux520' direct represents '0' with '2106'
c Var 'aux520' order represents '1' with '2107'
-2106 2107 0
c Var 'aux520' direct represents '1' with '2108'
2106 -2107 2108 0
-2108 2107 0
-2108 -2106 0
c Var 'aux520' direct represents '2' with '-2107'
2106 2108 -2107 0
c Encoding variable: aux521 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2109'
c Var 'aux521' direct represents '0' with '2109'
c Var 'aux521' order represents '1' with '2110'
-2109 2110 0
c Var 'aux521' direct represents '1' with '2111'
2109 -2110 2111 0
-2111 2110 0
-2111 -2109 0
c Var 'aux521' direct represents '2' with '-2110'
2109 2111 -2110 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2112'
c Var 'aux522' direct represents '0' with '2112'
c Var 'aux522' order represents '1' with '2113'
-2112 2113 0
c Var 'aux522' direct represents '1' with '2114'
2112 -2113 2114 0
-2114 2113 0
-2114 -2112 0
c Var 'aux522' direct represents '2' with '-2113'
2112 2114 -2113 0
c Encoding variable: aux523 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux522))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2115'
c Var 'aux523' direct represents '0' with '2115'
c Var 'aux523' order represents '1' with '2116'
-2115 2116 0
c Var 'aux523' direct represents '1' with '2117'
2115 -2116 2117 0
-2117 2116 0
-2117 -2115 0
c Var 'aux523' order represents '2' with '2118'
-2116 2118 0
c Var 'aux523' direct represents '2' with '2119'
2116 -2118 2119 0
-2119 2118 0
-2119 -2116 0
c Var 'aux523' direct represents '3' with '-2118'
2115 2117 2119 -2118 0
c Encoding variable: aux524 with domain: int(0..4) (representing constraint (aux519 + aux521))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2120'
c Var 'aux524' direct represents '0' with '2120'
c Var 'aux524' order represents '1' with '2121'
-2120 2121 0
c Var 'aux524' direct represents '1' with '2122'
2120 -2121 2122 0
-2122 2121 0
-2122 -2120 0
c Var 'aux524' order represents '2' with '2123'
-2121 2123 0
c Var 'aux524' direct represents '2' with '2124'
2121 -2123 2124 0
-2124 2123 0
-2124 -2121 0
c Var 'aux524' order represents '3' with '2125'
-2123 2125 0
c Var 'aux524' direct represents '3' with '2126'
2123 -2125 2126 0
-2126 2125 0
-2126 -2123 0
c Var 'aux524' direct represents '4' with '-2125'
2120 2122 2124 2126 -2125 0
c Encoding variable: aux525 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2127'
c Var 'aux525' direct represents '0' with '2127'
c Var 'aux525' order represents '1' with '2128'
-2127 2128 0
c Var 'aux525' direct represents '1' with '2129'
2127 -2128 2129 0
-2129 2128 0
-2129 -2127 0
c Var 'aux525' direct represents '2' with '-2128'
2127 2129 -2128 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2130'
c Var 'aux526' direct represents '0' with '2130'
c Var 'aux526' order represents '1' with '2131'
-2130 2131 0
c Var 'aux526' direct represents '1' with '2132'
2130 -2131 2132 0
-2132 2131 0
-2132 -2130 0
c Var 'aux526' direct represents '2' with '-2131'
2130 2132 -2131 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2133'
c Var 'aux527' direct represents '0' with '2133'
c Var 'aux527' order represents '1' with '2134'
-2133 2134 0
c Var 'aux527' direct represents '1' with '2135'
2133 -2134 2135 0
-2135 2134 0
-2135 -2133 0
c Var 'aux527' direct represents '2' with '-2134'
2133 2135 -2134 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2136'
c Var 'aux528' direct represents '0' with '2136'
c Var 'aux528' order represents '1' with '2137'
-2136 2137 0
c Var 'aux528' direct represents '1' with '2138'
2136 -2137 2138 0
-2138 2137 0
-2138 -2136 0
c Var 'aux528' direct represents '2' with '-2137'
2136 2138 -2137 0
c Encoding variable: aux529 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux528))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2139'
c Var 'aux529' direct represents '0' with '2139'
c Var 'aux529' order represents '1' with '2140'
-2139 2140 0
c Var 'aux529' direct represents '1' with '2141'
2139 -2140 2141 0
-2141 2140 0
-2141 -2139 0
c Var 'aux529' order represents '2' with '2142'
-2140 2142 0
c Var 'aux529' direct represents '2' with '2143'
2140 -2142 2143 0
-2143 2142 0
-2143 -2140 0
c Var 'aux529' direct represents '3' with '-2142'
2139 2141 2143 -2142 0
c Encoding variable: aux530 with domain: int(0..4) (representing constraint (aux525 + aux527))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2144'
c Var 'aux530' direct represents '0' with '2144'
c Var 'aux530' order represents '1' with '2145'
-2144 2145 0
c Var 'aux530' direct represents '1' with '2146'
2144 -2145 2146 0
-2146 2145 0
-2146 -2144 0
c Var 'aux530' order represents '2' with '2147'
-2145 2147 0
c Var 'aux530' direct represents '2' with '2148'
2145 -2147 2148 0
-2148 2147 0
-2148 -2145 0
c Var 'aux530' order represents '3' with '2149'
-2147 2149 0
c Var 'aux530' direct represents '3' with '2150'
2147 -2149 2150 0
-2150 2149 0
-2150 -2147 0
c Var 'aux530' direct represents '4' with '-2149'
2144 2146 2148 2150 -2149 0
c Encoding variable: aux531 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2151'
c Var 'aux531' direct represents '0' with '2151'
c Var 'aux531' order represents '1' with '2152'
-2151 2152 0
c Var 'aux531' direct represents '1' with '2153'
2151 -2152 2153 0
-2153 2152 0
-2153 -2151 0
c Var 'aux531' direct represents '2' with '-2152'
2151 2153 -2152 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2154'
c Var 'aux532' direct represents '0' with '2154'
c Var 'aux532' order represents '1' with '2155'
-2154 2155 0
c Var 'aux532' direct represents '1' with '2156'
2154 -2155 2156 0
-2156 2155 0
-2156 -2154 0
c Var 'aux532' direct represents '2' with '-2155'
2154 2156 -2155 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2157'
c Var 'aux533' direct represents '0' with '2157'
c Var 'aux533' order represents '1' with '2158'
-2157 2158 0
c Var 'aux533' direct represents '1' with '2159'
2157 -2158 2159 0
-2159 2158 0
-2159 -2157 0
c Var 'aux533' direct represents '2' with '-2158'
2157 2159 -2158 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2160'
c Var 'aux534' direct represents '0' with '2160'
c Var 'aux534' order represents '1' with '2161'
-2160 2161 0
c Var 'aux534' direct represents '1' with '2162'
2160 -2161 2162 0
-2162 2161 0
-2162 -2160 0
c Var 'aux534' direct represents '2' with '-2161'
2160 2162 -2161 0
c Encoding variable: aux535 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux534))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2163'
c Var 'aux535' direct represents '0' with '2163'
c Var 'aux535' order represents '1' with '2164'
-2163 2164 0
c Var 'aux535' direct represents '1' with '2165'
2163 -2164 2165 0
-2165 2164 0
-2165 -2163 0
c Var 'aux535' order represents '2' with '2166'
-2164 2166 0
c Var 'aux535' direct represents '2' with '2167'
2164 -2166 2167 0
-2167 2166 0
-2167 -2164 0
c Var 'aux535' direct represents '3' with '-2166'
2163 2165 2167 -2166 0
c Encoding variable: aux536 with domain: int(0..4) (representing constraint (aux531 + aux533))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2168'
c Var 'aux536' direct represents '0' with '2168'
c Var 'aux536' order represents '1' with '2169'
-2168 2169 0
c Var 'aux536' direct represents '1' with '2170'
2168 -2169 2170 0
-2170 2169 0
-2170 -2168 0
c Var 'aux536' order represents '2' with '2171'
-2169 2171 0
c Var 'aux536' direct represents '2' with '2172'
2169 -2171 2172 0
-2172 2171 0
-2172 -2169 0
c Var 'aux536' order represents '3' with '2173'
-2171 2173 0
c Var 'aux536' direct represents '3' with '2174'
2171 -2173 2174 0
-2174 2173 0
-2174 -2171 0
c Var 'aux536' direct represents '4' with '-2173'
2168 2170 2172 2174 -2173 0
c Encoding variable: aux537 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2175'
c Var 'aux537' direct represents '0' with '2175'
c Var 'aux537' order represents '1' with '2176'
-2175 2176 0
c Var 'aux537' direct represents '1' with '2177'
2175 -2176 2177 0
-2177 2176 0
-2177 -2175 0
c Var 'aux537' direct represents '2' with '-2176'
2175 2177 -2176 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2178'
c Var 'aux538' direct represents '0' with '2178'
c Var 'aux538' order represents '1' with '2179'
-2178 2179 0
c Var 'aux538' direct represents '1' with '2180'
2178 -2179 2180 0
-2180 2179 0
-2180 -2178 0
c Var 'aux538' direct represents '2' with '-2179'
2178 2180 -2179 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2181'
c Var 'aux539' direct represents '0' with '2181'
c Var 'aux539' order represents '1' with '2182'
-2181 2182 0
c Var 'aux539' direct represents '1' with '2183'
2181 -2182 2183 0
-2183 2182 0
-2183 -2181 0
c Var 'aux539' direct represents '2' with '-2182'
2181 2183 -2182 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2184'
c Var 'aux540' direct represents '0' with '2184'
c Var 'aux540' order represents '1' with '2185'
-2184 2185 0
c Var 'aux540' direct represents '1' with '2186'
2184 -2185 2186 0
-2186 2185 0
-2186 -2184 0
c Var 'aux540' direct represents '2' with '-2185'
2184 2186 -2185 0
c Encoding variable: aux541 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux540))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2187'
c Var 'aux541' direct represents '0' with '2187'
c Var 'aux541' order represents '1' with '2188'
-2187 2188 0
c Var 'aux541' direct represents '1' with '2189'
2187 -2188 2189 0
-2189 2188 0
-2189 -2187 0
c Var 'aux541' order represents '2' with '2190'
-2188 2190 0
c Var 'aux541' direct represents '2' with '2191'
2188 -2190 2191 0
-2191 2190 0
-2191 -2188 0
c Var 'aux541' direct represents '3' with '-2190'
2187 2189 2191 -2190 0
c Encoding variable: aux542 with domain: int(0..4) (representing constraint (aux537 + aux539))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2192'
c Var 'aux542' direct represents '0' with '2192'
c Var 'aux542' order represents '1' with '2193'
-2192 2193 0
c Var 'aux542' direct represents '1' with '2194'
2192 -2193 2194 0
-2194 2193 0
-2194 -2192 0
c Var 'aux542' order represents '2' with '2195'
-2193 2195 0
c Var 'aux542' direct represents '2' with '2196'
2193 -2195 2196 0
-2196 2195 0
-2196 -2193 0
c Var 'aux542' order represents '3' with '2197'
-2195 2197 0
c Var 'aux542' direct represents '3' with '2198'
2195 -2197 2198 0
-2198 2197 0
-2198 -2195 0
c Var 'aux542' direct represents '4' with '-2197'
2192 2194 2196 2198 -2197 0
c Encoding variable: aux543 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2199'
c Var 'aux543' direct represents '0' with '2199'
c Var 'aux543' order represents '1' with '2200'
-2199 2200 0
c Var 'aux543' direct represents '1' with '2201'
2199 -2200 2201 0
-2201 2200 0
-2201 -2199 0
c Var 'aux543' direct represents '2' with '-2200'
2199 2201 -2200 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2202'
c Var 'aux544' direct represents '0' with '2202'
c Var 'aux544' order represents '1' with '2203'
-2202 2203 0
c Var 'aux544' direct represents '1' with '2204'
2202 -2203 2204 0
-2204 2203 0
-2204 -2202 0
c Var 'aux544' direct represents '2' with '-2203'
2202 2204 -2203 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2205'
c Var 'aux545' direct represents '0' with '2205'
c Var 'aux545' order represents '1' with '2206'
-2205 2206 0
c Var 'aux545' direct represents '1' with '2207'
2205 -2206 2207 0
-2207 2206 0
-2207 -2205 0
c Var 'aux545' direct represents '2' with '-2206'
2205 2207 -2206 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2208'
c Var 'aux546' direct represents '0' with '2208'
c Var 'aux546' order represents '1' with '2209'
-2208 2209 0
c Var 'aux546' direct represents '1' with '2210'
2208 -2209 2210 0
-2210 2209 0
-2210 -2208 0
c Var 'aux546' direct represents '2' with '-2209'
2208 2210 -2209 0
c Encoding variable: aux547 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux546))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2211'
c Var 'aux547' direct represents '0' with '2211'
c Var 'aux547' order represents '1' with '2212'
-2211 2212 0
c Var 'aux547' direct represents '1' with '2213'
2211 -2212 2213 0
-2213 2212 0
-2213 -2211 0
c Var 'aux547' order represents '2' with '2214'
-2212 2214 0
c Var 'aux547' direct represents '2' with '2215'
2212 -2214 2215 0
-2215 2214 0
-2215 -2212 0
c Var 'aux547' direct represents '3' with '-2214'
2211 2213 2215 -2214 0
c Encoding variable: aux548 with domain: int(0..4) (representing constraint (aux543 + aux545))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2216'
c Var 'aux548' direct represents '0' with '2216'
c Var 'aux548' order represents '1' with '2217'
-2216 2217 0
c Var 'aux548' direct represents '1' with '2218'
2216 -2217 2218 0
-2218 2217 0
-2218 -2216 0
c Var 'aux548' order represents '2' with '2219'
-2217 2219 0
c Var 'aux548' direct represents '2' with '2220'
2217 -2219 2220 0
-2220 2219 0
-2220 -2217 0
c Var 'aux548' order represents '3' with '2221'
-2219 2221 0
c Var 'aux548' direct represents '3' with '2222'
2219 -2221 2222 0
-2222 2221 0
-2222 -2219 0
c Var 'aux548' direct represents '4' with '-2221'
2216 2218 2220 2222 -2221 0
c Encoding variable: aux549 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2223'
c Var 'aux549' direct represents '0' with '2223'
c Var 'aux549' order represents '1' with '2224'
-2223 2224 0
c Var 'aux549' direct represents '1' with '2225'
2223 -2224 2225 0
-2225 2224 0
-2225 -2223 0
c Var 'aux549' direct represents '2' with '-2224'
2223 2225 -2224 0
c Encoding variable: aux550 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2226'
c Var 'aux550' direct represents '0' with '2226'
c Var 'aux550' order represents '1' with '2227'
-2226 2227 0
c Var 'aux550' direct represents '1' with '2228'
2226 -2227 2228 0
-2228 2227 0
-2228 -2226 0
c Var 'aux550' direct represents '2' with '-2227'
2226 2228 -2227 0
c Encoding variable: aux551 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2229'
c Var 'aux551' direct represents '0' with '2229'
c Var 'aux551' order represents '1' with '2230'
-2229 2230 0
c Var 'aux551' direct represents '1' with '2231'
2229 -2230 2231 0
-2231 2230 0
-2231 -2229 0
c Var 'aux551' direct represents '2' with '-2230'
2229 2231 -2230 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2232'
c Var 'aux552' direct represents '0' with '2232'
c Var 'aux552' order represents '1' with '2233'
-2232 2233 0
c Var 'aux552' direct represents '1' with '2234'
2232 -2233 2234 0
-2234 2233 0
-2234 -2232 0
c Var 'aux552' direct represents '2' with '-2233'
2232 2234 -2233 0
c Encoding variable: aux553 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux552))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2235'
c Var 'aux553' direct represents '0' with '2235'
c Var 'aux553' order represents '1' with '2236'
-2235 2236 0
c Var 'aux553' direct represents '1' with '2237'
2235 -2236 2237 0
-2237 2236 0
-2237 -2235 0
c Var 'aux553' order represents '2' with '2238'
-2236 2238 0
c Var 'aux553' direct represents '2' with '2239'
2236 -2238 2239 0
-2239 2238 0
-2239 -2236 0
c Var 'aux553' direct represents '3' with '-2238'
2235 2237 2239 -2238 0
c Encoding variable: aux554 with domain: int(0..4) (representing constraint (aux549 + aux551))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2240'
c Var 'aux554' direct represents '0' with '2240'
c Var 'aux554' order represents '1' with '2241'
-2240 2241 0
c Var 'aux554' direct represents '1' with '2242'
2240 -2241 2242 0
-2242 2241 0
-2242 -2240 0
c Var 'aux554' order represents '2' with '2243'
-2241 2243 0
c Var 'aux554' direct represents '2' with '2244'
2241 -2243 2244 0
-2244 2243 0
-2244 -2241 0
c Var 'aux554' order represents '3' with '2245'
-2243 2245 0
c Var 'aux554' direct represents '3' with '2246'
2243 -2245 2246 0
-2246 2245 0
-2246 -2243 0
c Var 'aux554' direct represents '4' with '-2245'
2240 2242 2244 2246 -2245 0
c Encoding variable: aux555 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2247'
c Var 'aux555' direct represents '0' with '2247'
c Var 'aux555' order represents '1' with '2248'
-2247 2248 0
c Var 'aux555' direct represents '1' with '2249'
2247 -2248 2249 0
-2249 2248 0
-2249 -2247 0
c Var 'aux555' direct represents '2' with '-2248'
2247 2249 -2248 0
c Encoding variable: aux556 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2250'
c Var 'aux556' direct represents '0' with '2250'
c Var 'aux556' order represents '1' with '2251'
-2250 2251 0
c Var 'aux556' direct represents '1' with '2252'
2250 -2251 2252 0
-2252 2251 0
-2252 -2250 0
c Var 'aux556' direct represents '2' with '-2251'
2250 2252 -2251 0
c Encoding variable: aux557 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2253'
c Var 'aux557' direct represents '0' with '2253'
c Var 'aux557' order represents '1' with '2254'
-2253 2254 0
c Var 'aux557' direct represents '1' with '2255'
2253 -2254 2255 0
-2255 2254 0
-2255 -2253 0
c Var 'aux557' direct represents '2' with '-2254'
2253 2255 -2254 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2256'
c Var 'aux558' direct represents '0' with '2256'
c Var 'aux558' order represents '1' with '2257'
-2256 2257 0
c Var 'aux558' direct represents '1' with '2258'
2256 -2257 2258 0
-2258 2257 0
-2258 -2256 0
c Var 'aux558' direct represents '2' with '-2257'
2256 2258 -2257 0
c Encoding variable: aux559 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux558))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2259'
c Var 'aux559' direct represents '0' with '2259'
c Var 'aux559' order represents '1' with '2260'
-2259 2260 0
c Var 'aux559' direct represents '1' with '2261'
2259 -2260 2261 0
-2261 2260 0
-2261 -2259 0
c Var 'aux559' order represents '2' with '2262'
-2260 2262 0
c Var 'aux559' direct represents '2' with '2263'
2260 -2262 2263 0
-2263 2262 0
-2263 -2260 0
c Var 'aux559' direct represents '3' with '-2262'
2259 2261 2263 -2262 0
c Encoding variable: aux560 with domain: int(0..4) (representing constraint (aux555 + aux557))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2264'
c Var 'aux560' direct represents '0' with '2264'
c Var 'aux560' order represents '1' with '2265'
-2264 2265 0
c Var 'aux560' direct represents '1' with '2266'
2264 -2265 2266 0
-2266 2265 0
-2266 -2264 0
c Var 'aux560' order represents '2' with '2267'
-2265 2267 0
c Var 'aux560' direct represents '2' with '2268'
2265 -2267 2268 0
-2268 2267 0
-2268 -2265 0
c Var 'aux560' order represents '3' with '2269'
-2267 2269 0
c Var 'aux560' direct represents '3' with '2270'
2267 -2269 2270 0
-2270 2269 0
-2270 -2267 0
c Var 'aux560' direct represents '4' with '-2269'
2264 2266 2268 2270 -2269 0
c Encoding variable: aux561 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2271'
c Var 'aux561' direct represents '0' with '2271'
c Var 'aux561' order represents '1' with '2272'
-2271 2272 0
c Var 'aux561' direct represents '1' with '2273'
2271 -2272 2273 0
-2273 2272 0
-2273 -2271 0
c Var 'aux561' direct represents '2' with '-2272'
2271 2273 -2272 0
c Encoding variable: aux562 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2274'
c Var 'aux562' direct represents '0' with '2274'
c Var 'aux562' order represents '1' with '2275'
-2274 2275 0
c Var 'aux562' direct represents '1' with '2276'
2274 -2275 2276 0
-2276 2275 0
-2276 -2274 0
c Var 'aux562' direct represents '2' with '-2275'
2274 2276 -2275 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2277'
c Var 'aux563' direct represents '0' with '2277'
c Var 'aux563' order represents '1' with '2278'
-2277 2278 0
c Var 'aux563' direct represents '1' with '2279'
2277 -2278 2279 0
-2279 2278 0
-2279 -2277 0
c Var 'aux563' direct represents '2' with '-2278'
2277 2279 -2278 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2280'
c Var 'aux564' direct represents '0' with '2280'
c Var 'aux564' order represents '1' with '2281'
-2280 2281 0
c Var 'aux564' direct represents '1' with '2282'
2280 -2281 2282 0
-2282 2281 0
-2282 -2280 0
c Var 'aux564' direct represents '2' with '-2281'
2280 2282 -2281 0
c Encoding variable: aux565 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux564))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2283'
c Var 'aux565' direct represents '0' with '2283'
c Var 'aux565' order represents '1' with '2284'
-2283 2284 0
c Var 'aux565' direct represents '1' with '2285'
2283 -2284 2285 0
-2285 2284 0
-2285 -2283 0
c Var 'aux565' order represents '2' with '2286'
-2284 2286 0
c Var 'aux565' direct represents '2' with '2287'
2284 -2286 2287 0
-2287 2286 0
-2287 -2284 0
c Var 'aux565' direct represents '3' with '-2286'
2283 2285 2287 -2286 0
c Encoding variable: aux566 with domain: int(0..4) (representing constraint (aux561 + aux563))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2288'
c Var 'aux566' direct represents '0' with '2288'
c Var 'aux566' order represents '1' with '2289'
-2288 2289 0
c Var 'aux566' direct represents '1' with '2290'
2288 -2289 2290 0
-2290 2289 0
-2290 -2288 0
c Var 'aux566' order represents '2' with '2291'
-2289 2291 0
c Var 'aux566' direct represents '2' with '2292'
2289 -2291 2292 0
-2292 2291 0
-2292 -2289 0
c Var 'aux566' order represents '3' with '2293'
-2291 2293 0
c Var 'aux566' direct represents '3' with '2294'
2291 -2293 2294 0
-2294 2293 0
-2294 -2291 0
c Var 'aux566' direct represents '4' with '-2293'
2288 2290 2292 2294 -2293 0
c Encoding variable: aux567 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2295'
c Var 'aux567' direct represents '0' with '2295'
c Var 'aux567' order represents '1' with '2296'
-2295 2296 0
c Var 'aux567' direct represents '1' with '2297'
2295 -2296 2297 0
-2297 2296 0
-2297 -2295 0
c Var 'aux567' direct represents '2' with '-2296'
2295 2297 -2296 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2298'
c Var 'aux568' direct represents '0' with '2298'
c Var 'aux568' order represents '1' with '2299'
-2298 2299 0
c Var 'aux568' direct represents '1' with '2300'
2298 -2299 2300 0
-2300 2299 0
-2300 -2298 0
c Var 'aux568' direct represents '2' with '-2299'
2298 2300 -2299 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2301'
c Var 'aux569' direct represents '0' with '2301'
c Var 'aux569' order represents '1' with '2302'
-2301 2302 0
c Var 'aux569' direct represents '1' with '2303'
2301 -2302 2303 0
-2303 2302 0
-2303 -2301 0
c Var 'aux569' direct represents '2' with '-2302'
2301 2303 -2302 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2304'
c Var 'aux570' direct represents '0' with '2304'
c Var 'aux570' order represents '1' with '2305'
-2304 2305 0
c Var 'aux570' direct represents '1' with '2306'
2304 -2305 2306 0
-2306 2305 0
-2306 -2304 0
c Var 'aux570' direct represents '2' with '-2305'
2304 2306 -2305 0
c Encoding variable: aux571 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux570))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2307'
c Var 'aux571' direct represents '0' with '2307'
c Var 'aux571' order represents '1' with '2308'
-2307 2308 0
c Var 'aux571' direct represents '1' with '2309'
2307 -2308 2309 0
-2309 2308 0
-2309 -2307 0
c Var 'aux571' order represents '2' with '2310'
-2308 2310 0
c Var 'aux571' direct represents '2' with '2311'
2308 -2310 2311 0
-2311 2310 0
-2311 -2308 0
c Var 'aux571' direct represents '3' with '-2310'
2307 2309 2311 -2310 0
c Encoding variable: aux572 with domain: int(0..4) (representing constraint (aux567 + aux569))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2312'
c Var 'aux572' direct represents '0' with '2312'
c Var 'aux572' order represents '1' with '2313'
-2312 2313 0
c Var 'aux572' direct represents '1' with '2314'
2312 -2313 2314 0
-2314 2313 0
-2314 -2312 0
c Var 'aux572' order represents '2' with '2315'
-2313 2315 0
c Var 'aux572' direct represents '2' with '2316'
2313 -2315 2316 0
-2316 2315 0
-2316 -2313 0
c Var 'aux572' order represents '3' with '2317'
-2315 2317 0
c Var 'aux572' direct represents '3' with '2318'
2315 -2317 2318 0
-2318 2317 0
-2318 -2315 0
c Var 'aux572' direct represents '4' with '-2317'
2312 2314 2316 2318 -2317 0
c Encoding variable: aux573 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2319'
c Var 'aux573' direct represents '0' with '2319'
c Var 'aux573' order represents '1' with '2320'
-2319 2320 0
c Var 'aux573' direct represents '1' with '2321'
2319 -2320 2321 0
-2321 2320 0
-2321 -2319 0
c Var 'aux573' direct represents '2' with '-2320'
2319 2321 -2320 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2322'
c Var 'aux574' direct represents '0' with '2322'
c Var 'aux574' order represents '1' with '2323'
-2322 2323 0
c Var 'aux574' direct represents '1' with '2324'
2322 -2323 2324 0
-2324 2323 0
-2324 -2322 0
c Var 'aux574' direct represents '2' with '-2323'
2322 2324 -2323 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2325'
c Var 'aux575' direct represents '0' with '2325'
c Var 'aux575' order represents '1' with '2326'
-2325 2326 0
c Var 'aux575' direct represents '1' with '2327'
2325 -2326 2327 0
-2327 2326 0
-2327 -2325 0
c Var 'aux575' direct represents '2' with '-2326'
2325 2327 -2326 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2328'
c Var 'aux576' direct represents '0' with '2328'
c Var 'aux576' order represents '1' with '2329'
-2328 2329 0
c Var 'aux576' direct represents '1' with '2330'
2328 -2329 2330 0
-2330 2329 0
-2330 -2328 0
c Var 'aux576' direct represents '2' with '-2329'
2328 2330 -2329 0
c Encoding variable: aux577 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux576))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2331'
c Var 'aux577' direct represents '0' with '2331'
c Var 'aux577' order represents '1' with '2332'
-2331 2332 0
c Var 'aux577' direct represents '1' with '2333'
2331 -2332 2333 0
-2333 2332 0
-2333 -2331 0
c Var 'aux577' order represents '2' with '2334'
-2332 2334 0
c Var 'aux577' direct represents '2' with '2335'
2332 -2334 2335 0
-2335 2334 0
-2335 -2332 0
c Var 'aux577' direct represents '3' with '-2334'
2331 2333 2335 -2334 0
c Encoding variable: aux578 with domain: int(0..4) (representing constraint (aux573 + aux575))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2336'
c Var 'aux578' direct represents '0' with '2336'
c Var 'aux578' order represents '1' with '2337'
-2336 2337 0
c Var 'aux578' direct represents '1' with '2338'
2336 -2337 2338 0
-2338 2337 0
-2338 -2336 0
c Var 'aux578' order represents '2' with '2339'
-2337 2339 0
c Var 'aux578' direct represents '2' with '2340'
2337 -2339 2340 0
-2340 2339 0
-2340 -2337 0
c Var 'aux578' order represents '3' with '2341'
-2339 2341 0
c Var 'aux578' direct represents '3' with '2342'
2339 -2341 2342 0
-2342 2341 0
-2342 -2339 0
c Var 'aux578' direct represents '4' with '-2341'
2336 2338 2340 2342 -2341 0
c Encoding variable: aux579 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2343'
c Var 'aux579' direct represents '0' with '2343'
c Var 'aux579' order represents '1' with '2344'
-2343 2344 0
c Var 'aux579' direct represents '1' with '2345'
2343 -2344 2345 0
-2345 2344 0
-2345 -2343 0
c Var 'aux579' direct represents '2' with '-2344'
2343 2345 -2344 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2346'
c Var 'aux580' direct represents '0' with '2346'
c Var 'aux580' order represents '1' with '2347'
-2346 2347 0
c Var 'aux580' direct represents '1' with '2348'
2346 -2347 2348 0
-2348 2347 0
-2348 -2346 0
c Var 'aux580' direct represents '2' with '-2347'
2346 2348 -2347 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2349'
c Var 'aux581' direct represents '0' with '2349'
c Var 'aux581' order represents '1' with '2350'
-2349 2350 0
c Var 'aux581' direct represents '1' with '2351'
2349 -2350 2351 0
-2351 2350 0
-2351 -2349 0
c Var 'aux581' direct represents '2' with '-2350'
2349 2351 -2350 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2352'
c Var 'aux582' direct represents '0' with '2352'
c Var 'aux582' order represents '1' with '2353'
-2352 2353 0
c Var 'aux582' direct represents '1' with '2354'
2352 -2353 2354 0
-2354 2353 0
-2354 -2352 0
c Var 'aux582' direct represents '2' with '-2353'
2352 2354 -2353 0
c Encoding variable: aux583 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux582))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2355'
c Var 'aux583' direct represents '0' with '2355'
c Var 'aux583' order represents '1' with '2356'
-2355 2356 0
c Var 'aux583' direct represents '1' with '2357'
2355 -2356 2357 0
-2357 2356 0
-2357 -2355 0
c Var 'aux583' order represents '2' with '2358'
-2356 2358 0
c Var 'aux583' direct represents '2' with '2359'
2356 -2358 2359 0
-2359 2358 0
-2359 -2356 0
c Var 'aux583' direct represents '3' with '-2358'
2355 2357 2359 -2358 0
c Encoding variable: aux584 with domain: int(0..4) (representing constraint (aux579 + aux581))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2360'
c Var 'aux584' direct represents '0' with '2360'
c Var 'aux584' order represents '1' with '2361'
-2360 2361 0
c Var 'aux584' direct represents '1' with '2362'
2360 -2361 2362 0
-2362 2361 0
-2362 -2360 0
c Var 'aux584' order represents '2' with '2363'
-2361 2363 0
c Var 'aux584' direct represents '2' with '2364'
2361 -2363 2364 0
-2364 2363 0
-2364 -2361 0
c Var 'aux584' order represents '3' with '2365'
-2363 2365 0
c Var 'aux584' direct represents '3' with '2366'
2363 -2365 2366 0
-2366 2365 0
-2366 -2363 0
c Var 'aux584' direct represents '4' with '-2365'
2360 2362 2364 2366 -2365 0
c Encoding variable: aux585 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2367'
c Var 'aux585' direct represents '0' with '2367'
c Var 'aux585' order represents '1' with '2368'
-2367 2368 0
c Var 'aux585' direct represents '1' with '2369'
2367 -2368 2369 0
-2369 2368 0
-2369 -2367 0
c Var 'aux585' direct represents '2' with '-2368'
2367 2369 -2368 0
c Encoding variable: aux586 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2370'
c Var 'aux586' direct represents '0' with '2370'
c Var 'aux586' order represents '1' with '2371'
-2370 2371 0
c Var 'aux586' direct represents '1' with '2372'
2370 -2371 2372 0
-2372 2371 0
-2372 -2370 0
c Var 'aux586' direct represents '2' with '-2371'
2370 2372 -2371 0
c Encoding variable: aux587 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2373'
c Var 'aux587' direct represents '0' with '2373'
c Var 'aux587' order represents '1' with '2374'
-2373 2374 0
c Var 'aux587' direct represents '1' with '2375'
2373 -2374 2375 0
-2375 2374 0
-2375 -2373 0
c Var 'aux587' direct represents '2' with '-2374'
2373 2375 -2374 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2376'
c Var 'aux588' direct represents '0' with '2376'
c Var 'aux588' order represents '1' with '2377'
-2376 2377 0
c Var 'aux588' direct represents '1' with '2378'
2376 -2377 2378 0
-2378 2377 0
-2378 -2376 0
c Var 'aux588' direct represents '2' with '-2377'
2376 2378 -2377 0
c Encoding variable: aux589 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux588))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2379'
c Var 'aux589' direct represents '0' with '2379'
c Var 'aux589' order represents '1' with '2380'
-2379 2380 0
c Var 'aux589' direct represents '1' with '2381'
2379 -2380 2381 0
-2381 2380 0
-2381 -2379 0
c Var 'aux589' order represents '2' with '2382'
-2380 2382 0
c Var 'aux589' direct represents '2' with '2383'
2380 -2382 2383 0
-2383 2382 0
-2383 -2380 0
c Var 'aux589' direct represents '3' with '-2382'
2379 2381 2383 -2382 0
c Encoding variable: aux590 with domain: int(0..4) (representing constraint (aux585 + aux587))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2384'
c Var 'aux590' direct represents '0' with '2384'
c Var 'aux590' order represents '1' with '2385'
-2384 2385 0
c Var 'aux590' direct represents '1' with '2386'
2384 -2385 2386 0
-2386 2385 0
-2386 -2384 0
c Var 'aux590' order represents '2' with '2387'
-2385 2387 0
c Var 'aux590' direct represents '2' with '2388'
2385 -2387 2388 0
-2388 2387 0
-2388 -2385 0
c Var 'aux590' order represents '3' with '2389'
-2387 2389 0
c Var 'aux590' direct represents '3' with '2390'
2387 -2389 2390 0
-2390 2389 0
-2390 -2387 0
c Var 'aux590' direct represents '4' with '-2389'
2384 2386 2388 2390 -2389 0
c Encoding variable: aux591 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2391'
c Var 'aux591' direct represents '0' with '2391'
c Var 'aux591' order represents '1' with '2392'
-2391 2392 0
c Var 'aux591' direct represents '1' with '2393'
2391 -2392 2393 0
-2393 2392 0
-2393 -2391 0
c Var 'aux591' direct represents '2' with '-2392'
2391 2393 -2392 0
c Encoding variable: aux592 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2394'
c Var 'aux592' direct represents '0' with '2394'
c Var 'aux592' order represents '1' with '2395'
-2394 2395 0
c Var 'aux592' direct represents '1' with '2396'
2394 -2395 2396 0
-2396 2395 0
-2396 -2394 0
c Var 'aux592' direct represents '2' with '-2395'
2394 2396 -2395 0
c Encoding variable: aux593 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2397'
c Var 'aux593' direct represents '0' with '2397'
c Var 'aux593' order represents '1' with '2398'
-2397 2398 0
c Var 'aux593' direct represents '1' with '2399'
2397 -2398 2399 0
-2399 2398 0
-2399 -2397 0
c Var 'aux593' direct represents '2' with '-2398'
2397 2399 -2398 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2400'
c Var 'aux594' direct represents '0' with '2400'
c Var 'aux594' order represents '1' with '2401'
-2400 2401 0
c Var 'aux594' direct represents '1' with '2402'
2400 -2401 2402 0
-2402 2401 0
-2402 -2400 0
c Var 'aux594' direct represents '2' with '-2401'
2400 2402 -2401 0
c Encoding variable: aux595 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux594))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2403'
c Var 'aux595' direct represents '0' with '2403'
c Var 'aux595' order represents '1' with '2404'
-2403 2404 0
c Var 'aux595' direct represents '1' with '2405'
2403 -2404 2405 0
-2405 2404 0
-2405 -2403 0
c Var 'aux595' order represents '2' with '2406'
-2404 2406 0
c Var 'aux595' direct represents '2' with '2407'
2404 -2406 2407 0
-2407 2406 0
-2407 -2404 0
c Var 'aux595' direct represents '3' with '-2406'
2403 2405 2407 -2406 0
c Encoding variable: aux596 with domain: int(0..4) (representing constraint (aux591 + aux593))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2408'
c Var 'aux596' direct represents '0' with '2408'
c Var 'aux596' order represents '1' with '2409'
-2408 2409 0
c Var 'aux596' direct represents '1' with '2410'
2408 -2409 2410 0
-2410 2409 0
-2410 -2408 0
c Var 'aux596' order represents '2' with '2411'
-2409 2411 0
c Var 'aux596' direct represents '2' with '2412'
2409 -2411 2412 0
-2412 2411 0
-2412 -2409 0
c Var 'aux596' order represents '3' with '2413'
-2411 2413 0
c Var 'aux596' direct represents '3' with '2414'
2411 -2413 2414 0
-2414 2413 0
-2414 -2411 0
c Var 'aux596' direct represents '4' with '-2413'
2408 2410 2412 2414 -2413 0
c Encoding variable: aux597 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2415'
c Var 'aux597' direct represents '0' with '2415'
c Var 'aux597' order represents '1' with '2416'
-2415 2416 0
c Var 'aux597' direct represents '1' with '2417'
2415 -2416 2417 0
-2417 2416 0
-2417 -2415 0
c Var 'aux597' direct represents '2' with '-2416'
2415 2417 -2416 0
c Encoding variable: aux598 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2418'
c Var 'aux598' direct represents '0' with '2418'
c Var 'aux598' order represents '1' with '2419'
-2418 2419 0
c Var 'aux598' direct represents '1' with '2420'
2418 -2419 2420 0
-2420 2419 0
-2420 -2418 0
c Var 'aux598' direct represents '2' with '-2419'
2418 2420 -2419 0
c Encoding variable: aux599 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2421'
c Var 'aux599' direct represents '0' with '2421'
c Var 'aux599' order represents '1' with '2422'
-2421 2422 0
c Var 'aux599' direct represents '1' with '2423'
2421 -2422 2423 0
-2423 2422 0
-2423 -2421 0
c Var 'aux599' direct represents '2' with '-2422'
2421 2423 -2422 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2424'
c Var 'aux600' direct represents '0' with '2424'
c Var 'aux600' order represents '1' with '2425'
-2424 2425 0
c Var 'aux600' direct represents '1' with '2426'
2424 -2425 2426 0
-2426 2425 0
-2426 -2424 0
c Var 'aux600' direct represents '2' with '-2425'
2424 2426 -2425 0
c Encoding variable: aux601 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux600))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2427'
c Var 'aux601' direct represents '0' with '2427'
c Var 'aux601' order represents '1' with '2428'
-2427 2428 0
c Var 'aux601' direct represents '1' with '2429'
2427 -2428 2429 0
-2429 2428 0
-2429 -2427 0
c Var 'aux601' order represents '2' with '2430'
-2428 2430 0
c Var 'aux601' direct represents '2' with '2431'
2428 -2430 2431 0
-2431 2430 0
-2431 -2428 0
c Var 'aux601' direct represents '3' with '-2430'
2427 2429 2431 -2430 0
c Encoding variable: aux602 with domain: int(0..4) (representing constraint (aux597 + aux599))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2432'
c Var 'aux602' direct represents '0' with '2432'
c Var 'aux602' order represents '1' with '2433'
-2432 2433 0
c Var 'aux602' direct represents '1' with '2434'
2432 -2433 2434 0
-2434 2433 0
-2434 -2432 0
c Var 'aux602' order represents '2' with '2435'
-2433 2435 0
c Var 'aux602' direct represents '2' with '2436'
2433 -2435 2436 0
-2436 2435 0
-2436 -2433 0
c Var 'aux602' order represents '3' with '2437'
-2435 2437 0
c Var 'aux602' direct represents '3' with '2438'
2435 -2437 2438 0
-2438 2437 0
-2438 -2435 0
c Var 'aux602' direct represents '4' with '-2437'
2432 2434 2436 2438 -2437 0
c Encoding variable: aux603 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2439'
c Var 'aux603' direct represents '0' with '2439'
c Var 'aux603' order represents '1' with '2440'
-2439 2440 0
c Var 'aux603' direct represents '1' with '2441'
2439 -2440 2441 0
-2441 2440 0
-2441 -2439 0
c Var 'aux603' direct represents '2' with '-2440'
2439 2441 -2440 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2442'
c Var 'aux604' direct represents '0' with '2442'
c Var 'aux604' order represents '1' with '2443'
-2442 2443 0
c Var 'aux604' direct represents '1' with '2444'
2442 -2443 2444 0
-2444 2443 0
-2444 -2442 0
c Var 'aux604' direct represents '2' with '-2443'
2442 2444 -2443 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2445'
c Var 'aux605' direct represents '0' with '2445'
c Var 'aux605' order represents '1' with '2446'
-2445 2446 0
c Var 'aux605' direct represents '1' with '2447'
2445 -2446 2447 0
-2447 2446 0
-2447 -2445 0
c Var 'aux605' direct represents '2' with '-2446'
2445 2447 -2446 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2448'
c Var 'aux606' direct represents '0' with '2448'
c Var 'aux606' order represents '1' with '2449'
-2448 2449 0
c Var 'aux606' direct represents '1' with '2450'
2448 -2449 2450 0
-2450 2449 0
-2450 -2448 0
c Var 'aux606' direct represents '2' with '-2449'
2448 2450 -2449 0
c Encoding variable: aux607 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux606))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2451'
c Var 'aux607' direct represents '0' with '2451'
c Var 'aux607' order represents '1' with '2452'
-2451 2452 0
c Var 'aux607' direct represents '1' with '2453'
2451 -2452 2453 0
-2453 2452 0
-2453 -2451 0
c Var 'aux607' order represents '2' with '2454'
-2452 2454 0
c Var 'aux607' direct represents '2' with '2455'
2452 -2454 2455 0
-2455 2454 0
-2455 -2452 0
c Var 'aux607' direct represents '3' with '-2454'
2451 2453 2455 -2454 0
c Encoding variable: aux608 with domain: int(0..4) (representing constraint (aux603 + aux605))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2456'
c Var 'aux608' direct represents '0' with '2456'
c Var 'aux608' order represents '1' with '2457'
-2456 2457 0
c Var 'aux608' direct represents '1' with '2458'
2456 -2457 2458 0
-2458 2457 0
-2458 -2456 0
c Var 'aux608' order represents '2' with '2459'
-2457 2459 0
c Var 'aux608' direct represents '2' with '2460'
2457 -2459 2460 0
-2460 2459 0
-2460 -2457 0
c Var 'aux608' order represents '3' with '2461'
-2459 2461 0
c Var 'aux608' direct represents '3' with '2462'
2459 -2461 2462 0
-2462 2461 0
-2462 -2459 0
c Var 'aux608' direct represents '4' with '-2461'
2456 2458 2460 2462 -2461 0
c Encoding variable: aux609 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2463'
c Var 'aux609' direct represents '0' with '2463'
c Var 'aux609' order represents '1' with '2464'
-2463 2464 0
c Var 'aux609' direct represents '1' with '2465'
2463 -2464 2465 0
-2465 2464 0
-2465 -2463 0
c Var 'aux609' direct represents '2' with '-2464'
2463 2465 -2464 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2466'
c Var 'aux610' direct represents '0' with '2466'
c Var 'aux610' order represents '1' with '2467'
-2466 2467 0
c Var 'aux610' direct represents '1' with '2468'
2466 -2467 2468 0
-2468 2467 0
-2468 -2466 0
c Var 'aux610' direct represents '2' with '-2467'
2466 2468 -2467 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2469'
c Var 'aux611' direct represents '0' with '2469'
c Var 'aux611' order represents '1' with '2470'
-2469 2470 0
c Var 'aux611' direct represents '1' with '2471'
2469 -2470 2471 0
-2471 2470 0
-2471 -2469 0
c Var 'aux611' direct represents '2' with '-2470'
2469 2471 -2470 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2472'
c Var 'aux612' direct represents '0' with '2472'
c Var 'aux612' order represents '1' with '2473'
-2472 2473 0
c Var 'aux612' direct represents '1' with '2474'
2472 -2473 2474 0
-2474 2473 0
-2474 -2472 0
c Var 'aux612' direct represents '2' with '-2473'
2472 2474 -2473 0
c Encoding variable: aux613 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux612))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2475'
c Var 'aux613' direct represents '0' with '2475'
c Var 'aux613' order represents '1' with '2476'
-2475 2476 0
c Var 'aux613' direct represents '1' with '2477'
2475 -2476 2477 0
-2477 2476 0
-2477 -2475 0
c Var 'aux613' order represents '2' with '2478'
-2476 2478 0
c Var 'aux613' direct represents '2' with '2479'
2476 -2478 2479 0
-2479 2478 0
-2479 -2476 0
c Var 'aux613' direct represents '3' with '-2478'
2475 2477 2479 -2478 0
c Encoding variable: aux614 with domain: int(0..4) (representing constraint (aux609 + aux611))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2480'
c Var 'aux614' direct represents '0' with '2480'
c Var 'aux614' order represents '1' with '2481'
-2480 2481 0
c Var 'aux614' direct represents '1' with '2482'
2480 -2481 2482 0
-2482 2481 0
-2482 -2480 0
c Var 'aux614' order represents '2' with '2483'
-2481 2483 0
c Var 'aux614' direct represents '2' with '2484'
2481 -2483 2484 0
-2484 2483 0
-2484 -2481 0
c Var 'aux614' order represents '3' with '2485'
-2483 2485 0
c Var 'aux614' direct represents '3' with '2486'
2483 -2485 2486 0
-2486 2485 0
-2486 -2483 0
c Var 'aux614' direct represents '4' with '-2485'
2480 2482 2484 2486 -2485 0
c Encoding variable: aux615 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2487'
c Var 'aux615' direct represents '0' with '2487'
c Var 'aux615' order represents '1' with '2488'
-2487 2488 0
c Var 'aux615' direct represents '1' with '2489'
2487 -2488 2489 0
-2489 2488 0
-2489 -2487 0
c Var 'aux615' direct represents '2' with '-2488'
2487 2489 -2488 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2490'
c Var 'aux616' direct represents '0' with '2490'
c Var 'aux616' order represents '1' with '2491'
-2490 2491 0
c Var 'aux616' direct represents '1' with '2492'
2490 -2491 2492 0
-2492 2491 0
-2492 -2490 0
c Var 'aux616' direct represents '2' with '-2491'
2490 2492 -2491 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2493'
c Var 'aux617' direct represents '0' with '2493'
c Var 'aux617' order represents '1' with '2494'
-2493 2494 0
c Var 'aux617' direct represents '1' with '2495'
2493 -2494 2495 0
-2495 2494 0
-2495 -2493 0
c Var 'aux617' direct represents '2' with '-2494'
2493 2495 -2494 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2496'
c Var 'aux618' direct represents '0' with '2496'
c Var 'aux618' order represents '1' with '2497'
-2496 2497 0
c Var 'aux618' direct represents '1' with '2498'
2496 -2497 2498 0
-2498 2497 0
-2498 -2496 0
c Var 'aux618' direct represents '2' with '-2497'
2496 2498 -2497 0
c Encoding variable: aux619 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux618))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2499'
c Var 'aux619' direct represents '0' with '2499'
c Var 'aux619' order represents '1' with '2500'
-2499 2500 0
c Var 'aux619' direct represents '1' with '2501'
2499 -2500 2501 0
-2501 2500 0
-2501 -2499 0
c Var 'aux619' order represents '2' with '2502'
-2500 2502 0
c Var 'aux619' direct represents '2' with '2503'
2500 -2502 2503 0
-2503 2502 0
-2503 -2500 0
c Var 'aux619' direct represents '3' with '-2502'
2499 2501 2503 -2502 0
c Encoding variable: aux620 with domain: int(0..4) (representing constraint (aux615 + aux617))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2504'
c Var 'aux620' direct represents '0' with '2504'
c Var 'aux620' order represents '1' with '2505'
-2504 2505 0
c Var 'aux620' direct represents '1' with '2506'
2504 -2505 2506 0
-2506 2505 0
-2506 -2504 0
c Var 'aux620' order represents '2' with '2507'
-2505 2507 0
c Var 'aux620' direct represents '2' with '2508'
2505 -2507 2508 0
-2508 2507 0
-2508 -2505 0
c Var 'aux620' order represents '3' with '2509'
-2507 2509 0
c Var 'aux620' direct represents '3' with '2510'
2507 -2509 2510 0
-2510 2509 0
-2510 -2507 0
c Var 'aux620' direct represents '4' with '-2509'
2504 2506 2508 2510 -2509 0
c Encoding variable: aux621 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2511'
c Var 'aux621' direct represents '0' with '2511'
c Var 'aux621' order represents '1' with '2512'
-2511 2512 0
c Var 'aux621' direct represents '1' with '2513'
2511 -2512 2513 0
-2513 2512 0
-2513 -2511 0
c Var 'aux621' direct represents '2' with '-2512'
2511 2513 -2512 0
c Encoding variable: aux622 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2514'
c Var 'aux622' direct represents '0' with '2514'
c Var 'aux622' order represents '1' with '2515'
-2514 2515 0
c Var 'aux622' direct represents '1' with '2516'
2514 -2515 2516 0
-2516 2515 0
-2516 -2514 0
c Var 'aux622' direct represents '2' with '-2515'
2514 2516 -2515 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2517'
c Var 'aux623' direct represents '0' with '2517'
c Var 'aux623' order represents '1' with '2518'
-2517 2518 0
c Var 'aux623' direct represents '1' with '2519'
2517 -2518 2519 0
-2519 2518 0
-2519 -2517 0
c Var 'aux623' direct represents '2' with '-2518'
2517 2519 -2518 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2520'
c Var 'aux624' direct represents '0' with '2520'
c Var 'aux624' order represents '1' with '2521'
-2520 2521 0
c Var 'aux624' direct represents '1' with '2522'
2520 -2521 2522 0
-2522 2521 0
-2522 -2520 0
c Var 'aux624' direct represents '2' with '-2521'
2520 2522 -2521 0
c Encoding variable: aux625 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux624))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2523'
c Var 'aux625' direct represents '0' with '2523'
c Var 'aux625' order represents '1' with '2524'
-2523 2524 0
c Var 'aux625' direct represents '1' with '2525'
2523 -2524 2525 0
-2525 2524 0
-2525 -2523 0
c Var 'aux625' order represents '2' with '2526'
-2524 2526 0
c Var 'aux625' direct represents '2' with '2527'
2524 -2526 2527 0
-2527 2526 0
-2527 -2524 0
c Var 'aux625' direct represents '3' with '-2526'
2523 2525 2527 -2526 0
c Encoding variable: aux626 with domain: int(0..4) (representing constraint (aux621 + aux623))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2528'
c Var 'aux626' direct represents '0' with '2528'
c Var 'aux626' order represents '1' with '2529'
-2528 2529 0
c Var 'aux626' direct represents '1' with '2530'
2528 -2529 2530 0
-2530 2529 0
-2530 -2528 0
c Var 'aux626' order represents '2' with '2531'
-2529 2531 0
c Var 'aux626' direct represents '2' with '2532'
2529 -2531 2532 0
-2532 2531 0
-2532 -2529 0
c Var 'aux626' order represents '3' with '2533'
-2531 2533 0
c Var 'aux626' direct represents '3' with '2534'
2531 -2533 2534 0
-2534 2533 0
-2534 -2531 0
c Var 'aux626' direct represents '4' with '-2533'
2528 2530 2532 2534 -2533 0
c Encoding variable: aux627 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2535'
c Var 'aux627' direct represents '0' with '2535'
c Var 'aux627' order represents '1' with '2536'
-2535 2536 0
c Var 'aux627' direct represents '1' with '2537'
2535 -2536 2537 0
-2537 2536 0
-2537 -2535 0
c Var 'aux627' direct represents '2' with '-2536'
2535 2537 -2536 0
c Encoding variable: aux628 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2538'
c Var 'aux628' direct represents '0' with '2538'
c Var 'aux628' order represents '1' with '2539'
-2538 2539 0
c Var 'aux628' direct represents '1' with '2540'
2538 -2539 2540 0
-2540 2539 0
-2540 -2538 0
c Var 'aux628' direct represents '2' with '-2539'
2538 2540 -2539 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2541'
c Var 'aux629' direct represents '0' with '2541'
c Var 'aux629' order represents '1' with '2542'
-2541 2542 0
c Var 'aux629' direct represents '1' with '2543'
2541 -2542 2543 0
-2543 2542 0
-2543 -2541 0
c Var 'aux629' direct represents '2' with '-2542'
2541 2543 -2542 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2544'
c Var 'aux630' direct represents '0' with '2544'
c Var 'aux630' order represents '1' with '2545'
-2544 2545 0
c Var 'aux630' direct represents '1' with '2546'
2544 -2545 2546 0
-2546 2545 0
-2546 -2544 0
c Var 'aux630' direct represents '2' with '-2545'
2544 2546 -2545 0
c Encoding variable: aux631 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux630))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2547'
c Var 'aux631' direct represents '0' with '2547'
c Var 'aux631' order represents '1' with '2548'
-2547 2548 0
c Var 'aux631' direct represents '1' with '2549'
2547 -2548 2549 0
-2549 2548 0
-2549 -2547 0
c Var 'aux631' order represents '2' with '2550'
-2548 2550 0
c Var 'aux631' direct represents '2' with '2551'
2548 -2550 2551 0
-2551 2550 0
-2551 -2548 0
c Var 'aux631' direct represents '3' with '-2550'
2547 2549 2551 -2550 0
c Encoding variable: aux632 with domain: int(0..4) (representing constraint (aux627 + aux629))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2552'
c Var 'aux632' direct represents '0' with '2552'
c Var 'aux632' order represents '1' with '2553'
-2552 2553 0
c Var 'aux632' direct represents '1' with '2554'
2552 -2553 2554 0
-2554 2553 0
-2554 -2552 0
c Var 'aux632' order represents '2' with '2555'
-2553 2555 0
c Var 'aux632' direct represents '2' with '2556'
2553 -2555 2556 0
-2556 2555 0
-2556 -2553 0
c Var 'aux632' order represents '3' with '2557'
-2555 2557 0
c Var 'aux632' direct represents '3' with '2558'
2555 -2557 2558 0
-2558 2557 0
-2558 -2555 0
c Var 'aux632' direct represents '4' with '-2557'
2552 2554 2556 2558 -2557 0
c Encoding variable: aux633 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2559'
c Var 'aux633' direct represents '0' with '2559'
c Var 'aux633' order represents '1' with '2560'
-2559 2560 0
c Var 'aux633' direct represents '1' with '2561'
2559 -2560 2561 0
-2561 2560 0
-2561 -2559 0
c Var 'aux633' direct represents '2' with '-2560'
2559 2561 -2560 0
c Encoding variable: aux634 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2562'
c Var 'aux634' direct represents '0' with '2562'
c Var 'aux634' order represents '1' with '2563'
-2562 2563 0
c Var 'aux634' direct represents '1' with '2564'
2562 -2563 2564 0
-2564 2563 0
-2564 -2562 0
c Var 'aux634' direct represents '2' with '-2563'
2562 2564 -2563 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2565'
c Var 'aux635' direct represents '0' with '2565'
c Var 'aux635' order represents '1' with '2566'
-2565 2566 0
c Var 'aux635' direct represents '1' with '2567'
2565 -2566 2567 0
-2567 2566 0
-2567 -2565 0
c Var 'aux635' direct represents '2' with '-2566'
2565 2567 -2566 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2568'
c Var 'aux636' direct represents '0' with '2568'
c Var 'aux636' order represents '1' with '2569'
-2568 2569 0
c Var 'aux636' direct represents '1' with '2570'
2568 -2569 2570 0
-2570 2569 0
-2570 -2568 0
c Var 'aux636' direct represents '2' with '-2569'
2568 2570 -2569 0
c Encoding variable: aux637 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux636))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2571'
c Var 'aux637' direct represents '0' with '2571'
c Var 'aux637' order represents '1' with '2572'
-2571 2572 0
c Var 'aux637' direct represents '1' with '2573'
2571 -2572 2573 0
-2573 2572 0
-2573 -2571 0
c Var 'aux637' order represents '2' with '2574'
-2572 2574 0
c Var 'aux637' direct represents '2' with '2575'
2572 -2574 2575 0
-2575 2574 0
-2575 -2572 0
c Var 'aux637' direct represents '3' with '-2574'
2571 2573 2575 -2574 0
c Encoding variable: aux638 with domain: int(0..4) (representing constraint (aux633 + aux635))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2576'
c Var 'aux638' direct represents '0' with '2576'
c Var 'aux638' order represents '1' with '2577'
-2576 2577 0
c Var 'aux638' direct represents '1' with '2578'
2576 -2577 2578 0
-2578 2577 0
-2578 -2576 0
c Var 'aux638' order represents '2' with '2579'
-2577 2579 0
c Var 'aux638' direct represents '2' with '2580'
2577 -2579 2580 0
-2580 2579 0
-2580 -2577 0
c Var 'aux638' order represents '3' with '2581'
-2579 2581 0
c Var 'aux638' direct represents '3' with '2582'
2579 -2581 2582 0
-2582 2581 0
-2582 -2579 0
c Var 'aux638' direct represents '4' with '-2581'
2576 2578 2580 2582 -2581 0
c Encoding variable: aux639 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2583'
c Var 'aux639' direct represents '0' with '2583'
c Var 'aux639' order represents '1' with '2584'
-2583 2584 0
c Var 'aux639' direct represents '1' with '2585'
2583 -2584 2585 0
-2585 2584 0
-2585 -2583 0
c Var 'aux639' direct represents '2' with '-2584'
2583 2585 -2584 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2586'
c Var 'aux640' direct represents '0' with '2586'
c Var 'aux640' order represents '1' with '2587'
-2586 2587 0
c Var 'aux640' direct represents '1' with '2588'
2586 -2587 2588 0
-2588 2587 0
-2588 -2586 0
c Var 'aux640' direct represents '2' with '-2587'
2586 2588 -2587 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2589'
c Var 'aux641' direct represents '0' with '2589'
c Var 'aux641' order represents '1' with '2590'
-2589 2590 0
c Var 'aux641' direct represents '1' with '2591'
2589 -2590 2591 0
-2591 2590 0
-2591 -2589 0
c Var 'aux641' direct represents '2' with '-2590'
2589 2591 -2590 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2592'
c Var 'aux642' direct represents '0' with '2592'
c Var 'aux642' order represents '1' with '2593'
-2592 2593 0
c Var 'aux642' direct represents '1' with '2594'
2592 -2593 2594 0
-2594 2593 0
-2594 -2592 0
c Var 'aux642' direct represents '2' with '-2593'
2592 2594 -2593 0
c Encoding variable: aux643 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux642))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2595'
c Var 'aux643' direct represents '0' with '2595'
c Var 'aux643' order represents '1' with '2596'
-2595 2596 0
c Var 'aux643' direct represents '1' with '2597'
2595 -2596 2597 0
-2597 2596 0
-2597 -2595 0
c Var 'aux643' order represents '2' with '2598'
-2596 2598 0
c Var 'aux643' direct represents '2' with '2599'
2596 -2598 2599 0
-2599 2598 0
-2599 -2596 0
c Var 'aux643' direct represents '3' with '-2598'
2595 2597 2599 -2598 0
c Encoding variable: aux644 with domain: int(0..4) (representing constraint (aux639 + aux641))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2600'
c Var 'aux644' direct represents '0' with '2600'
c Var 'aux644' order represents '1' with '2601'
-2600 2601 0
c Var 'aux644' direct represents '1' with '2602'
2600 -2601 2602 0
-2602 2601 0
-2602 -2600 0
c Var 'aux644' order represents '2' with '2603'
-2601 2603 0
c Var 'aux644' direct represents '2' with '2604'
2601 -2603 2604 0
-2604 2603 0
-2604 -2601 0
c Var 'aux644' order represents '3' with '2605'
-2603 2605 0
c Var 'aux644' direct represents '3' with '2606'
2603 -2605 2606 0
-2606 2605 0
-2606 -2603 0
c Var 'aux644' direct represents '4' with '-2605'
2600 2602 2604 2606 -2605 0
c Encoding variable: aux645 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2607'
c Var 'aux645' direct represents '0' with '2607'
c Var 'aux645' order represents '1' with '2608'
-2607 2608 0
c Var 'aux645' direct represents '1' with '2609'
2607 -2608 2609 0
-2609 2608 0
-2609 -2607 0
c Var 'aux645' direct represents '2' with '-2608'
2607 2609 -2608 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2610'
c Var 'aux646' direct represents '0' with '2610'
c Var 'aux646' order represents '1' with '2611'
-2610 2611 0
c Var 'aux646' direct represents '1' with '2612'
2610 -2611 2612 0
-2612 2611 0
-2612 -2610 0
c Var 'aux646' direct represents '2' with '-2611'
2610 2612 -2611 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2613'
c Var 'aux647' direct represents '0' with '2613'
c Var 'aux647' order represents '1' with '2614'
-2613 2614 0
c Var 'aux647' direct represents '1' with '2615'
2613 -2614 2615 0
-2615 2614 0
-2615 -2613 0
c Var 'aux647' direct represents '2' with '-2614'
2613 2615 -2614 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2616'
c Var 'aux648' direct represents '0' with '2616'
c Var 'aux648' order represents '1' with '2617'
-2616 2617 0
c Var 'aux648' direct represents '1' with '2618'
2616 -2617 2618 0
-2618 2617 0
-2618 -2616 0
c Var 'aux648' direct represents '2' with '-2617'
2616 2618 -2617 0
c Encoding variable: aux649 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux648))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2619'
c Var 'aux649' direct represents '0' with '2619'
c Var 'aux649' order represents '1' with '2620'
-2619 2620 0
c Var 'aux649' direct represents '1' with '2621'
2619 -2620 2621 0
-2621 2620 0
-2621 -2619 0
c Var 'aux649' order represents '2' with '2622'
-2620 2622 0
c Var 'aux649' direct represents '2' with '2623'
2620 -2622 2623 0
-2623 2622 0
-2623 -2620 0
c Var 'aux649' direct represents '3' with '-2622'
2619 2621 2623 -2622 0
c Encoding variable: aux650 with domain: int(0..4) (representing constraint (aux645 + aux647))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2624'
c Var 'aux650' direct represents '0' with '2624'
c Var 'aux650' order represents '1' with '2625'
-2624 2625 0
c Var 'aux650' direct represents '1' with '2626'
2624 -2625 2626 0
-2626 2625 0
-2626 -2624 0
c Var 'aux650' order represents '2' with '2627'
-2625 2627 0
c Var 'aux650' direct represents '2' with '2628'
2625 -2627 2628 0
-2628 2627 0
-2628 -2625 0
c Var 'aux650' order represents '3' with '2629'
-2627 2629 0
c Var 'aux650' direct represents '3' with '2630'
2627 -2629 2630 0
-2630 2629 0
-2630 -2627 0
c Var 'aux650' direct represents '4' with '-2629'
2624 2626 2628 2630 -2629 0
c Encoding variable: aux651 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2631'
c Var 'aux651' direct represents '0' with '2631'
c Var 'aux651' order represents '1' with '2632'
-2631 2632 0
c Var 'aux651' direct represents '1' with '2633'
2631 -2632 2633 0
-2633 2632 0
-2633 -2631 0
c Var 'aux651' direct represents '2' with '-2632'
2631 2633 -2632 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2634'
c Var 'aux652' direct represents '0' with '2634'
c Var 'aux652' order represents '1' with '2635'
-2634 2635 0
c Var 'aux652' direct represents '1' with '2636'
2634 -2635 2636 0
-2636 2635 0
-2636 -2634 0
c Var 'aux652' direct represents '2' with '-2635'
2634 2636 -2635 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2637'
c Var 'aux653' direct represents '0' with '2637'
c Var 'aux653' order represents '1' with '2638'
-2637 2638 0
c Var 'aux653' direct represents '1' with '2639'
2637 -2638 2639 0
-2639 2638 0
-2639 -2637 0
c Var 'aux653' direct represents '2' with '-2638'
2637 2639 -2638 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2640'
c Var 'aux654' direct represents '0' with '2640'
c Var 'aux654' order represents '1' with '2641'
-2640 2641 0
c Var 'aux654' direct represents '1' with '2642'
2640 -2641 2642 0
-2642 2641 0
-2642 -2640 0
c Var 'aux654' direct represents '2' with '-2641'
2640 2642 -2641 0
c Encoding variable: aux655 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux654))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2643'
c Var 'aux655' direct represents '0' with '2643'
c Var 'aux655' order represents '1' with '2644'
-2643 2644 0
c Var 'aux655' direct represents '1' with '2645'
2643 -2644 2645 0
-2645 2644 0
-2645 -2643 0
c Var 'aux655' order represents '2' with '2646'
-2644 2646 0
c Var 'aux655' direct represents '2' with '2647'
2644 -2646 2647 0
-2647 2646 0
-2647 -2644 0
c Var 'aux655' direct represents '3' with '-2646'
2643 2645 2647 -2646 0
c Encoding variable: aux656 with domain: int(0..4) (representing constraint (aux651 + aux653))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2648'
c Var 'aux656' direct represents '0' with '2648'
c Var 'aux656' order represents '1' with '2649'
-2648 2649 0
c Var 'aux656' direct represents '1' with '2650'
2648 -2649 2650 0
-2650 2649 0
-2650 -2648 0
c Var 'aux656' order represents '2' with '2651'
-2649 2651 0
c Var 'aux656' direct represents '2' with '2652'
2649 -2651 2652 0
-2652 2651 0
-2652 -2649 0
c Var 'aux656' order represents '3' with '2653'
-2651 2653 0
c Var 'aux656' direct represents '3' with '2654'
2651 -2653 2654 0
-2654 2653 0
-2654 -2651 0
c Var 'aux656' direct represents '4' with '-2653'
2648 2650 2652 2654 -2653 0
c Encoding variable: aux657 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2655'
c Var 'aux657' direct represents '0' with '2655'
c Var 'aux657' order represents '1' with '2656'
-2655 2656 0
c Var 'aux657' direct represents '1' with '2657'
2655 -2656 2657 0
-2657 2656 0
-2657 -2655 0
c Var 'aux657' direct represents '2' with '-2656'
2655 2657 -2656 0
c Encoding variable: aux658 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2658'
c Var 'aux658' direct represents '0' with '2658'
c Var 'aux658' order represents '1' with '2659'
-2658 2659 0
c Var 'aux658' direct represents '1' with '2660'
2658 -2659 2660 0
-2660 2659 0
-2660 -2658 0
c Var 'aux658' direct represents '2' with '-2659'
2658 2660 -2659 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2661'
c Var 'aux659' direct represents '0' with '2661'
c Var 'aux659' order represents '1' with '2662'
-2661 2662 0
c Var 'aux659' direct represents '1' with '2663'
2661 -2662 2663 0
-2663 2662 0
-2663 -2661 0
c Var 'aux659' direct represents '2' with '-2662'
2661 2663 -2662 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2664'
c Var 'aux660' direct represents '0' with '2664'
c Var 'aux660' order represents '1' with '2665'
-2664 2665 0
c Var 'aux660' direct represents '1' with '2666'
2664 -2665 2666 0
-2666 2665 0
-2666 -2664 0
c Var 'aux660' direct represents '2' with '-2665'
2664 2666 -2665 0
c Encoding variable: aux661 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux660))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2667'
c Var 'aux661' direct represents '0' with '2667'
c Var 'aux661' order represents '1' with '2668'
-2667 2668 0
c Var 'aux661' direct represents '1' with '2669'
2667 -2668 2669 0
-2669 2668 0
-2669 -2667 0
c Var 'aux661' order represents '2' with '2670'
-2668 2670 0
c Var 'aux661' direct represents '2' with '2671'
2668 -2670 2671 0
-2671 2670 0
-2671 -2668 0
c Var 'aux661' direct represents '3' with '-2670'
2667 2669 2671 -2670 0
c Encoding variable: aux662 with domain: int(0..4) (representing constraint (aux657 + aux659))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2672'
c Var 'aux662' direct represents '0' with '2672'
c Var 'aux662' order represents '1' with '2673'
-2672 2673 0
c Var 'aux662' direct represents '1' with '2674'
2672 -2673 2674 0
-2674 2673 0
-2674 -2672 0
c Var 'aux662' order represents '2' with '2675'
-2673 2675 0
c Var 'aux662' direct represents '2' with '2676'
2673 -2675 2676 0
-2676 2675 0
-2676 -2673 0
c Var 'aux662' order represents '3' with '2677'
-2675 2677 0
c Var 'aux662' direct represents '3' with '2678'
2675 -2677 2678 0
-2678 2677 0
-2678 -2675 0
c Var 'aux662' direct represents '4' with '-2677'
2672 2674 2676 2678 -2677 0
c Encoding variable: aux663 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2679'
c Var 'aux663' direct represents '0' with '2679'
c Var 'aux663' order represents '1' with '2680'
-2679 2680 0
c Var 'aux663' direct represents '1' with '2681'
2679 -2680 2681 0
-2681 2680 0
-2681 -2679 0
c Var 'aux663' direct represents '2' with '-2680'
2679 2681 -2680 0
c Encoding variable: aux664 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2682'
c Var 'aux664' direct represents '0' with '2682'
c Var 'aux664' order represents '1' with '2683'
-2682 2683 0
c Var 'aux664' direct represents '1' with '2684'
2682 -2683 2684 0
-2684 2683 0
-2684 -2682 0
c Var 'aux664' direct represents '2' with '-2683'
2682 2684 -2683 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2685'
c Var 'aux665' direct represents '0' with '2685'
c Var 'aux665' order represents '1' with '2686'
-2685 2686 0
c Var 'aux665' direct represents '1' with '2687'
2685 -2686 2687 0
-2687 2686 0
-2687 -2685 0
c Var 'aux665' direct represents '2' with '-2686'
2685 2687 -2686 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2688'
c Var 'aux666' direct represents '0' with '2688'
c Var 'aux666' order represents '1' with '2689'
-2688 2689 0
c Var 'aux666' direct represents '1' with '2690'
2688 -2689 2690 0
-2690 2689 0
-2690 -2688 0
c Var 'aux666' direct represents '2' with '-2689'
2688 2690 -2689 0
c Encoding variable: aux667 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux666))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2691'
c Var 'aux667' direct represents '0' with '2691'
c Var 'aux667' order represents '1' with '2692'
-2691 2692 0
c Var 'aux667' direct represents '1' with '2693'
2691 -2692 2693 0
-2693 2692 0
-2693 -2691 0
c Var 'aux667' order represents '2' with '2694'
-2692 2694 0
c Var 'aux667' direct represents '2' with '2695'
2692 -2694 2695 0
-2695 2694 0
-2695 -2692 0
c Var 'aux667' direct represents '3' with '-2694'
2691 2693 2695 -2694 0
c Encoding variable: aux668 with domain: int(0..4) (representing constraint (aux663 + aux665))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2696'
c Var 'aux668' direct represents '0' with '2696'
c Var 'aux668' order represents '1' with '2697'
-2696 2697 0
c Var 'aux668' direct represents '1' with '2698'
2696 -2697 2698 0
-2698 2697 0
-2698 -2696 0
c Var 'aux668' order represents '2' with '2699'
-2697 2699 0
c Var 'aux668' direct represents '2' with '2700'
2697 -2699 2700 0
-2700 2699 0
-2700 -2697 0
c Var 'aux668' order represents '3' with '2701'
-2699 2701 0
c Var 'aux668' direct represents '3' with '2702'
2699 -2701 2702 0
-2702 2701 0
-2702 -2699 0
c Var 'aux668' direct represents '4' with '-2701'
2696 2698 2700 2702 -2701 0
c Encoding variable: aux669 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2703'
c Var 'aux669' direct represents '0' with '2703'
c Var 'aux669' order represents '1' with '2704'
-2703 2704 0
c Var 'aux669' direct represents '1' with '2705'
2703 -2704 2705 0
-2705 2704 0
-2705 -2703 0
c Var 'aux669' direct represents '2' with '-2704'
2703 2705 -2704 0
c Encoding variable: aux670 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2706'
c Var 'aux670' direct represents '0' with '2706'
c Var 'aux670' order represents '1' with '2707'
-2706 2707 0
c Var 'aux670' direct represents '1' with '2708'
2706 -2707 2708 0
-2708 2707 0
-2708 -2706 0
c Var 'aux670' direct represents '2' with '-2707'
2706 2708 -2707 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2709'
c Var 'aux671' direct represents '0' with '2709'
c Var 'aux671' order represents '1' with '2710'
-2709 2710 0
c Var 'aux671' direct represents '1' with '2711'
2709 -2710 2711 0
-2711 2710 0
-2711 -2709 0
c Var 'aux671' direct represents '2' with '-2710'
2709 2711 -2710 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2712'
c Var 'aux672' direct represents '0' with '2712'
c Var 'aux672' order represents '1' with '2713'
-2712 2713 0
c Var 'aux672' direct represents '1' with '2714'
2712 -2713 2714 0
-2714 2713 0
-2714 -2712 0
c Var 'aux672' direct represents '2' with '-2713'
2712 2714 -2713 0
c Encoding variable: aux673 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux672))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2715'
c Var 'aux673' direct represents '0' with '2715'
c Var 'aux673' order represents '1' with '2716'
-2715 2716 0
c Var 'aux673' direct represents '1' with '2717'
2715 -2716 2717 0
-2717 2716 0
-2717 -2715 0
c Var 'aux673' order represents '2' with '2718'
-2716 2718 0
c Var 'aux673' direct represents '2' with '2719'
2716 -2718 2719 0
-2719 2718 0
-2719 -2716 0
c Var 'aux673' direct represents '3' with '-2718'
2715 2717 2719 -2718 0
c Encoding variable: aux674 with domain: int(0..4) (representing constraint (aux669 + aux671))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2720'
c Var 'aux674' direct represents '0' with '2720'
c Var 'aux674' order represents '1' with '2721'
-2720 2721 0
c Var 'aux674' direct represents '1' with '2722'
2720 -2721 2722 0
-2722 2721 0
-2722 -2720 0
c Var 'aux674' order represents '2' with '2723'
-2721 2723 0
c Var 'aux674' direct represents '2' with '2724'
2721 -2723 2724 0
-2724 2723 0
-2724 -2721 0
c Var 'aux674' order represents '3' with '2725'
-2723 2725 0
c Var 'aux674' direct represents '3' with '2726'
2723 -2725 2726 0
-2726 2725 0
-2726 -2723 0
c Var 'aux674' direct represents '4' with '-2725'
2720 2722 2724 2726 -2725 0
c Encoding variable: aux675 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2727'
c Var 'aux675' direct represents '0' with '2727'
c Var 'aux675' order represents '1' with '2728'
-2727 2728 0
c Var 'aux675' direct represents '1' with '2729'
2727 -2728 2729 0
-2729 2728 0
-2729 -2727 0
c Var 'aux675' direct represents '2' with '-2728'
2727 2729 -2728 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2730'
c Var 'aux676' direct represents '0' with '2730'
c Var 'aux676' order represents '1' with '2731'
-2730 2731 0
c Var 'aux676' direct represents '1' with '2732'
2730 -2731 2732 0
-2732 2731 0
-2732 -2730 0
c Var 'aux676' direct represents '2' with '-2731'
2730 2732 -2731 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2733'
c Var 'aux677' direct represents '0' with '2733'
c Var 'aux677' order represents '1' with '2734'
-2733 2734 0
c Var 'aux677' direct represents '1' with '2735'
2733 -2734 2735 0
-2735 2734 0
-2735 -2733 0
c Var 'aux677' direct represents '2' with '-2734'
2733 2735 -2734 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2736'
c Var 'aux678' direct represents '0' with '2736'
c Var 'aux678' order represents '1' with '2737'
-2736 2737 0
c Var 'aux678' direct represents '1' with '2738'
2736 -2737 2738 0
-2738 2737 0
-2738 -2736 0
c Var 'aux678' direct represents '2' with '-2737'
2736 2738 -2737 0
c Encoding variable: aux679 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux678))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2739'
c Var 'aux679' direct represents '0' with '2739'
c Var 'aux679' order represents '1' with '2740'
-2739 2740 0
c Var 'aux679' direct represents '1' with '2741'
2739 -2740 2741 0
-2741 2740 0
-2741 -2739 0
c Var 'aux679' order represents '2' with '2742'
-2740 2742 0
c Var 'aux679' direct represents '2' with '2743'
2740 -2742 2743 0
-2743 2742 0
-2743 -2740 0
c Var 'aux679' direct represents '3' with '-2742'
2739 2741 2743 -2742 0
c Encoding variable: aux680 with domain: int(0..4) (representing constraint (aux675 + aux677))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2744'
c Var 'aux680' direct represents '0' with '2744'
c Var 'aux680' order represents '1' with '2745'
-2744 2745 0
c Var 'aux680' direct represents '1' with '2746'
2744 -2745 2746 0
-2746 2745 0
-2746 -2744 0
c Var 'aux680' order represents '2' with '2747'
-2745 2747 0
c Var 'aux680' direct represents '2' with '2748'
2745 -2747 2748 0
-2748 2747 0
-2748 -2745 0
c Var 'aux680' order represents '3' with '2749'
-2747 2749 0
c Var 'aux680' direct represents '3' with '2750'
2747 -2749 2750 0
-2750 2749 0
-2750 -2747 0
c Var 'aux680' direct represents '4' with '-2749'
2744 2746 2748 2750 -2749 0
c Encoding variable: aux681 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2751'
c Var 'aux681' direct represents '0' with '2751'
c Var 'aux681' order represents '1' with '2752'
-2751 2752 0
c Var 'aux681' direct represents '1' with '2753'
2751 -2752 2753 0
-2753 2752 0
-2753 -2751 0
c Var 'aux681' direct represents '2' with '-2752'
2751 2753 -2752 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '2754'
c Var 'aux682' direct represents '0' with '2754'
c Var 'aux682' order represents '1' with '2755'
-2754 2755 0
c Var 'aux682' direct represents '1' with '2756'
2754 -2755 2756 0
-2756 2755 0
-2756 -2754 0
c Var 'aux682' direct represents '2' with '-2755'
2754 2756 -2755 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '2757'
c Var 'aux683' direct represents '0' with '2757'
c Var 'aux683' order represents '1' with '2758'
-2757 2758 0
c Var 'aux683' direct represents '1' with '2759'
2757 -2758 2759 0
-2759 2758 0
-2759 -2757 0
c Var 'aux683' direct represents '2' with '-2758'
2757 2759 -2758 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '2760'
c Var 'aux684' direct represents '0' with '2760'
c Var 'aux684' order represents '1' with '2761'
-2760 2761 0
c Var 'aux684' direct represents '1' with '2762'
2760 -2761 2762 0
-2762 2761 0
-2762 -2760 0
c Var 'aux684' direct represents '2' with '-2761'
2760 2762 -2761 0
c Encoding variable: aux685 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux684))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '2763'
c Var 'aux685' direct represents '0' with '2763'
c Var 'aux685' order represents '1' with '2764'
-2763 2764 0
c Var 'aux685' direct represents '1' with '2765'
2763 -2764 2765 0
-2765 2764 0
-2765 -2763 0
c Var 'aux685' order represents '2' with '2766'
-2764 2766 0
c Var 'aux685' direct represents '2' with '2767'
2764 -2766 2767 0
-2767 2766 0
-2767 -2764 0
c Var 'aux685' direct represents '3' with '-2766'
2763 2765 2767 -2766 0
c Encoding variable: aux686 with domain: int(0..4) (representing constraint (aux681 + aux683))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '2768'
c Var 'aux686' direct represents '0' with '2768'
c Var 'aux686' order represents '1' with '2769'
-2768 2769 0
c Var 'aux686' direct represents '1' with '2770'
2768 -2769 2770 0
-2770 2769 0
-2770 -2768 0
c Var 'aux686' order represents '2' with '2771'
-2769 2771 0
c Var 'aux686' direct represents '2' with '2772'
2769 -2771 2772 0
-2772 2771 0
-2772 -2769 0
c Var 'aux686' order represents '3' with '2773'
-2771 2773 0
c Var 'aux686' direct represents '3' with '2774'
2771 -2773 2774 0
-2774 2773 0
-2774 -2771 0
c Var 'aux686' direct represents '4' with '-2773'
2768 2770 2772 2774 -2773 0
c Encoding variable: aux687 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '2775'
c Var 'aux687' direct represents '0' with '2775'
c Var 'aux687' order represents '1' with '2776'
-2775 2776 0
c Var 'aux687' direct represents '1' with '2777'
2775 -2776 2777 0
-2777 2776 0
-2777 -2775 0
c Var 'aux687' direct represents '2' with '-2776'
2775 2777 -2776 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '2778'
c Var 'aux688' direct represents '0' with '2778'
c Var 'aux688' order represents '1' with '2779'
-2778 2779 0
c Var 'aux688' direct represents '1' with '2780'
2778 -2779 2780 0
-2780 2779 0
-2780 -2778 0
c Var 'aux688' direct represents '2' with '-2779'
2778 2780 -2779 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '2781'
c Var 'aux689' direct represents '0' with '2781'
c Var 'aux689' order represents '1' with '2782'
-2781 2782 0
c Var 'aux689' direct represents '1' with '2783'
2781 -2782 2783 0
-2783 2782 0
-2783 -2781 0
c Var 'aux689' direct represents '2' with '-2782'
2781 2783 -2782 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '2784'
c Var 'aux690' direct represents '0' with '2784'
c Var 'aux690' order represents '1' with '2785'
-2784 2785 0
c Var 'aux690' direct represents '1' with '2786'
2784 -2785 2786 0
-2786 2785 0
-2786 -2784 0
c Var 'aux690' direct represents '2' with '-2785'
2784 2786 -2785 0
c Encoding variable: aux691 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux690))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '2787'
c Var 'aux691' direct represents '0' with '2787'
c Var 'aux691' order represents '1' with '2788'
-2787 2788 0
c Var 'aux691' direct represents '1' with '2789'
2787 -2788 2789 0
-2789 2788 0
-2789 -2787 0
c Var 'aux691' order represents '2' with '2790'
-2788 2790 0
c Var 'aux691' direct represents '2' with '2791'
2788 -2790 2791 0
-2791 2790 0
-2791 -2788 0
c Var 'aux691' direct represents '3' with '-2790'
2787 2789 2791 -2790 0
c Encoding variable: aux692 with domain: int(0..4) (representing constraint (aux687 + aux689))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '2792'
c Var 'aux692' direct represents '0' with '2792'
c Var 'aux692' order represents '1' with '2793'
-2792 2793 0
c Var 'aux692' direct represents '1' with '2794'
2792 -2793 2794 0
-2794 2793 0
-2794 -2792 0
c Var 'aux692' order represents '2' with '2795'
-2793 2795 0
c Var 'aux692' direct represents '2' with '2796'
2793 -2795 2796 0
-2796 2795 0
-2796 -2793 0
c Var 'aux692' order represents '3' with '2797'
-2795 2797 0
c Var 'aux692' direct represents '3' with '2798'
2795 -2797 2798 0
-2798 2797 0
-2798 -2795 0
c Var 'aux692' direct represents '4' with '-2797'
2792 2794 2796 2798 -2797 0
c Encoding variable: aux693 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '2799'
c Var 'aux693' direct represents '0' with '2799'
c Var 'aux693' order represents '1' with '2800'
-2799 2800 0
c Var 'aux693' direct represents '1' with '2801'
2799 -2800 2801 0
-2801 2800 0
-2801 -2799 0
c Var 'aux693' direct represents '2' with '-2800'
2799 2801 -2800 0
c Encoding variable: aux694 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '2802'
c Var 'aux694' direct represents '0' with '2802'
c Var 'aux694' order represents '1' with '2803'
-2802 2803 0
c Var 'aux694' direct represents '1' with '2804'
2802 -2803 2804 0
-2804 2803 0
-2804 -2802 0
c Var 'aux694' direct represents '2' with '-2803'
2802 2804 -2803 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '2805'
c Var 'aux695' direct represents '0' with '2805'
c Var 'aux695' order represents '1' with '2806'
-2805 2806 0
c Var 'aux695' direct represents '1' with '2807'
2805 -2806 2807 0
-2807 2806 0
-2807 -2805 0
c Var 'aux695' direct represents '2' with '-2806'
2805 2807 -2806 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '2808'
c Var 'aux696' direct represents '0' with '2808'
c Var 'aux696' order represents '1' with '2809'
-2808 2809 0
c Var 'aux696' direct represents '1' with '2810'
2808 -2809 2810 0
-2810 2809 0
-2810 -2808 0
c Var 'aux696' direct represents '2' with '-2809'
2808 2810 -2809 0
c Encoding variable: aux697 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux696))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '2811'
c Var 'aux697' direct represents '0' with '2811'
c Var 'aux697' order represents '1' with '2812'
-2811 2812 0
c Var 'aux697' direct represents '1' with '2813'
2811 -2812 2813 0
-2813 2812 0
-2813 -2811 0
c Var 'aux697' order represents '2' with '2814'
-2812 2814 0
c Var 'aux697' direct represents '2' with '2815'
2812 -2814 2815 0
-2815 2814 0
-2815 -2812 0
c Var 'aux697' direct represents '3' with '-2814'
2811 2813 2815 -2814 0
c Encoding variable: aux698 with domain: int(0..4) (representing constraint (aux693 + aux695))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '2816'
c Var 'aux698' direct represents '0' with '2816'
c Var 'aux698' order represents '1' with '2817'
-2816 2817 0
c Var 'aux698' direct represents '1' with '2818'
2816 -2817 2818 0
-2818 2817 0
-2818 -2816 0
c Var 'aux698' order represents '2' with '2819'
-2817 2819 0
c Var 'aux698' direct represents '2' with '2820'
2817 -2819 2820 0
-2820 2819 0
-2820 -2817 0
c Var 'aux698' order represents '3' with '2821'
-2819 2821 0
c Var 'aux698' direct represents '3' with '2822'
2819 -2821 2822 0
-2822 2821 0
-2822 -2819 0
c Var 'aux698' direct represents '4' with '-2821'
2816 2818 2820 2822 -2821 0
c Encoding variable: aux699 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '2823'
c Var 'aux699' direct represents '0' with '2823'
c Var 'aux699' order represents '1' with '2824'
-2823 2824 0
c Var 'aux699' direct represents '1' with '2825'
2823 -2824 2825 0
-2825 2824 0
-2825 -2823 0
c Var 'aux699' direct represents '2' with '-2824'
2823 2825 -2824 0
c Encoding variable: aux700 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '2826'
c Var 'aux700' direct represents '0' with '2826'
c Var 'aux700' order represents '1' with '2827'
-2826 2827 0
c Var 'aux700' direct represents '1' with '2828'
2826 -2827 2828 0
-2828 2827 0
-2828 -2826 0
c Var 'aux700' direct represents '2' with '-2827'
2826 2828 -2827 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '2829'
c Var 'aux701' direct represents '0' with '2829'
c Var 'aux701' order represents '1' with '2830'
-2829 2830 0
c Var 'aux701' direct represents '1' with '2831'
2829 -2830 2831 0
-2831 2830 0
-2831 -2829 0
c Var 'aux701' direct represents '2' with '-2830'
2829 2831 -2830 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '2832'
c Var 'aux702' direct represents '0' with '2832'
c Var 'aux702' order represents '1' with '2833'
-2832 2833 0
c Var 'aux702' direct represents '1' with '2834'
2832 -2833 2834 0
-2834 2833 0
-2834 -2832 0
c Var 'aux702' direct represents '2' with '-2833'
2832 2834 -2833 0
c Encoding variable: aux703 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux702))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '2835'
c Var 'aux703' direct represents '0' with '2835'
c Var 'aux703' order represents '1' with '2836'
-2835 2836 0
c Var 'aux703' direct represents '1' with '2837'
2835 -2836 2837 0
-2837 2836 0
-2837 -2835 0
c Var 'aux703' order represents '2' with '2838'
-2836 2838 0
c Var 'aux703' direct represents '2' with '2839'
2836 -2838 2839 0
-2839 2838 0
-2839 -2836 0
c Var 'aux703' direct represents '3' with '-2838'
2835 2837 2839 -2838 0
c Encoding variable: aux704 with domain: int(0..4) (representing constraint (aux699 + aux701))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '2840'
c Var 'aux704' direct represents '0' with '2840'
c Var 'aux704' order represents '1' with '2841'
-2840 2841 0
c Var 'aux704' direct represents '1' with '2842'
2840 -2841 2842 0
-2842 2841 0
-2842 -2840 0
c Var 'aux704' order represents '2' with '2843'
-2841 2843 0
c Var 'aux704' direct represents '2' with '2844'
2841 -2843 2844 0
-2844 2843 0
-2844 -2841 0
c Var 'aux704' order represents '3' with '2845'
-2843 2845 0
c Var 'aux704' direct represents '3' with '2846'
2843 -2845 2846 0
-2846 2845 0
-2846 -2843 0
c Var 'aux704' direct represents '4' with '-2845'
2840 2842 2844 2846 -2845 0
c Encoding variable: aux705 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '2847'
c Var 'aux705' direct represents '0' with '2847'
c Var 'aux705' order represents '1' with '2848'
-2847 2848 0
c Var 'aux705' direct represents '1' with '2849'
2847 -2848 2849 0
-2849 2848 0
-2849 -2847 0
c Var 'aux705' direct represents '2' with '-2848'
2847 2849 -2848 0
c Encoding variable: aux706 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '2850'
c Var 'aux706' direct represents '0' with '2850'
c Var 'aux706' order represents '1' with '2851'
-2850 2851 0
c Var 'aux706' direct represents '1' with '2852'
2850 -2851 2852 0
-2852 2851 0
-2852 -2850 0
c Var 'aux706' direct represents '2' with '-2851'
2850 2852 -2851 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '2853'
c Var 'aux707' direct represents '0' with '2853'
c Var 'aux707' order represents '1' with '2854'
-2853 2854 0
c Var 'aux707' direct represents '1' with '2855'
2853 -2854 2855 0
-2855 2854 0
-2855 -2853 0
c Var 'aux707' direct represents '2' with '-2854'
2853 2855 -2854 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '2856'
c Var 'aux708' direct represents '0' with '2856'
c Var 'aux708' order represents '1' with '2857'
-2856 2857 0
c Var 'aux708' direct represents '1' with '2858'
2856 -2857 2858 0
-2858 2857 0
-2858 -2856 0
c Var 'aux708' direct represents '2' with '-2857'
2856 2858 -2857 0
c Encoding variable: aux709 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux708))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '2859'
c Var 'aux709' direct represents '0' with '2859'
c Var 'aux709' order represents '1' with '2860'
-2859 2860 0
c Var 'aux709' direct represents '1' with '2861'
2859 -2860 2861 0
-2861 2860 0
-2861 -2859 0
c Var 'aux709' order represents '2' with '2862'
-2860 2862 0
c Var 'aux709' direct represents '2' with '2863'
2860 -2862 2863 0
-2863 2862 0
-2863 -2860 0
c Var 'aux709' direct represents '3' with '-2862'
2859 2861 2863 -2862 0
c Encoding variable: aux710 with domain: int(0..4) (representing constraint (aux705 + aux707))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '2864'
c Var 'aux710' direct represents '0' with '2864'
c Var 'aux710' order represents '1' with '2865'
-2864 2865 0
c Var 'aux710' direct represents '1' with '2866'
2864 -2865 2866 0
-2866 2865 0
-2866 -2864 0
c Var 'aux710' order represents '2' with '2867'
-2865 2867 0
c Var 'aux710' direct represents '2' with '2868'
2865 -2867 2868 0
-2868 2867 0
-2868 -2865 0
c Var 'aux710' order represents '3' with '2869'
-2867 2869 0
c Var 'aux710' direct represents '3' with '2870'
2867 -2869 2870 0
-2870 2869 0
-2870 -2867 0
c Var 'aux710' direct represents '4' with '-2869'
2864 2866 2868 2870 -2869 0
c Encoding variable: aux711 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '2871'
c Var 'aux711' direct represents '0' with '2871'
c Var 'aux711' order represents '1' with '2872'
-2871 2872 0
c Var 'aux711' direct represents '1' with '2873'
2871 -2872 2873 0
-2873 2872 0
-2873 -2871 0
c Var 'aux711' direct represents '2' with '-2872'
2871 2873 -2872 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '2874'
c Var 'aux712' direct represents '0' with '2874'
c Var 'aux712' order represents '1' with '2875'
-2874 2875 0
c Var 'aux712' direct represents '1' with '2876'
2874 -2875 2876 0
-2876 2875 0
-2876 -2874 0
c Var 'aux712' direct represents '2' with '-2875'
2874 2876 -2875 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '2877'
c Var 'aux713' direct represents '0' with '2877'
c Var 'aux713' order represents '1' with '2878'
-2877 2878 0
c Var 'aux713' direct represents '1' with '2879'
2877 -2878 2879 0
-2879 2878 0
-2879 -2877 0
c Var 'aux713' direct represents '2' with '-2878'
2877 2879 -2878 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '2880'
c Var 'aux714' direct represents '0' with '2880'
c Var 'aux714' order represents '1' with '2881'
-2880 2881 0
c Var 'aux714' direct represents '1' with '2882'
2880 -2881 2882 0
-2882 2881 0
-2882 -2880 0
c Var 'aux714' direct represents '2' with '-2881'
2880 2882 -2881 0
c Encoding variable: aux715 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux714))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '2883'
c Var 'aux715' direct represents '0' with '2883'
c Var 'aux715' order represents '1' with '2884'
-2883 2884 0
c Var 'aux715' direct represents '1' with '2885'
2883 -2884 2885 0
-2885 2884 0
-2885 -2883 0
c Var 'aux715' order represents '2' with '2886'
-2884 2886 0
c Var 'aux715' direct represents '2' with '2887'
2884 -2886 2887 0
-2887 2886 0
-2887 -2884 0
c Var 'aux715' direct represents '3' with '-2886'
2883 2885 2887 -2886 0
c Encoding variable: aux716 with domain: int(0..4) (representing constraint (aux711 + aux713))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '2888'
c Var 'aux716' direct represents '0' with '2888'
c Var 'aux716' order represents '1' with '2889'
-2888 2889 0
c Var 'aux716' direct represents '1' with '2890'
2888 -2889 2890 0
-2890 2889 0
-2890 -2888 0
c Var 'aux716' order represents '2' with '2891'
-2889 2891 0
c Var 'aux716' direct represents '2' with '2892'
2889 -2891 2892 0
-2892 2891 0
-2892 -2889 0
c Var 'aux716' order represents '3' with '2893'
-2891 2893 0
c Var 'aux716' direct represents '3' with '2894'
2891 -2893 2894 0
-2894 2893 0
-2894 -2891 0
c Var 'aux716' direct represents '4' with '-2893'
2888 2890 2892 2894 -2893 0
c Encoding variable: aux717 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '2895'
c Var 'aux717' direct represents '0' with '2895'
c Var 'aux717' order represents '1' with '2896'
-2895 2896 0
c Var 'aux717' direct represents '1' with '2897'
2895 -2896 2897 0
-2897 2896 0
-2897 -2895 0
c Var 'aux717' direct represents '2' with '-2896'
2895 2897 -2896 0
c Encoding variable: aux718 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '2898'
c Var 'aux718' direct represents '0' with '2898'
c Var 'aux718' order represents '1' with '2899'
-2898 2899 0
c Var 'aux718' direct represents '1' with '2900'
2898 -2899 2900 0
-2900 2899 0
-2900 -2898 0
c Var 'aux718' direct represents '2' with '-2899'
2898 2900 -2899 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '2901'
c Var 'aux719' direct represents '0' with '2901'
c Var 'aux719' order represents '1' with '2902'
-2901 2902 0
c Var 'aux719' direct represents '1' with '2903'
2901 -2902 2903 0
-2903 2902 0
-2903 -2901 0
c Var 'aux719' direct represents '2' with '-2902'
2901 2903 -2902 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '2904'
c Var 'aux720' direct represents '0' with '2904'
c Var 'aux720' order represents '1' with '2905'
-2904 2905 0
c Var 'aux720' direct represents '1' with '2906'
2904 -2905 2906 0
-2906 2905 0
-2906 -2904 0
c Var 'aux720' direct represents '2' with '-2905'
2904 2906 -2905 0
c Encoding variable: aux721 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux720))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '2907'
c Var 'aux721' direct represents '0' with '2907'
c Var 'aux721' order represents '1' with '2908'
-2907 2908 0
c Var 'aux721' direct represents '1' with '2909'
2907 -2908 2909 0
-2909 2908 0
-2909 -2907 0
c Var 'aux721' order represents '2' with '2910'
-2908 2910 0
c Var 'aux721' direct represents '2' with '2911'
2908 -2910 2911 0
-2911 2910 0
-2911 -2908 0
c Var 'aux721' direct represents '3' with '-2910'
2907 2909 2911 -2910 0
c Encoding variable: aux722 with domain: int(0..4) (representing constraint (aux717 + aux719))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '2912'
c Var 'aux722' direct represents '0' with '2912'
c Var 'aux722' order represents '1' with '2913'
-2912 2913 0
c Var 'aux722' direct represents '1' with '2914'
2912 -2913 2914 0
-2914 2913 0
-2914 -2912 0
c Var 'aux722' order represents '2' with '2915'
-2913 2915 0
c Var 'aux722' direct represents '2' with '2916'
2913 -2915 2916 0
-2916 2915 0
-2916 -2913 0
c Var 'aux722' order represents '3' with '2917'
-2915 2917 0
c Var 'aux722' direct represents '3' with '2918'
2915 -2917 2918 0
-2918 2917 0
-2918 -2915 0
c Var 'aux722' direct represents '4' with '-2917'
2912 2914 2916 2918 -2917 0
c Encoding variable: aux723 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '2919'
c Var 'aux723' direct represents '0' with '2919'
c Var 'aux723' order represents '1' with '2920'
-2919 2920 0
c Var 'aux723' direct represents '1' with '2921'
2919 -2920 2921 0
-2921 2920 0
-2921 -2919 0
c Var 'aux723' direct represents '2' with '-2920'
2919 2921 -2920 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '2922'
c Var 'aux724' direct represents '0' with '2922'
c Var 'aux724' order represents '1' with '2923'
-2922 2923 0
c Var 'aux724' direct represents '1' with '2924'
2922 -2923 2924 0
-2924 2923 0
-2924 -2922 0
c Var 'aux724' direct represents '2' with '-2923'
2922 2924 -2923 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '2925'
c Var 'aux725' direct represents '0' with '2925'
c Var 'aux725' order represents '1' with '2926'
-2925 2926 0
c Var 'aux725' direct represents '1' with '2927'
2925 -2926 2927 0
-2927 2926 0
-2927 -2925 0
c Var 'aux725' direct represents '2' with '-2926'
2925 2927 -2926 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '2928'
c Var 'aux726' direct represents '0' with '2928'
c Var 'aux726' order represents '1' with '2929'
-2928 2929 0
c Var 'aux726' direct represents '1' with '2930'
2928 -2929 2930 0
-2930 2929 0
-2930 -2928 0
c Var 'aux726' direct represents '2' with '-2929'
2928 2930 -2929 0
c Encoding variable: aux727 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux726))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '2931'
c Var 'aux727' direct represents '0' with '2931'
c Var 'aux727' order represents '1' with '2932'
-2931 2932 0
c Var 'aux727' direct represents '1' with '2933'
2931 -2932 2933 0
-2933 2932 0
-2933 -2931 0
c Var 'aux727' order represents '2' with '2934'
-2932 2934 0
c Var 'aux727' direct represents '2' with '2935'
2932 -2934 2935 0
-2935 2934 0
-2935 -2932 0
c Var 'aux727' direct represents '3' with '-2934'
2931 2933 2935 -2934 0
c Encoding variable: aux728 with domain: int(0..4) (representing constraint (aux723 + aux725))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '2936'
c Var 'aux728' direct represents '0' with '2936'
c Var 'aux728' order represents '1' with '2937'
-2936 2937 0
c Var 'aux728' direct represents '1' with '2938'
2936 -2937 2938 0
-2938 2937 0
-2938 -2936 0
c Var 'aux728' order represents '2' with '2939'
-2937 2939 0
c Var 'aux728' direct represents '2' with '2940'
2937 -2939 2940 0
-2940 2939 0
-2940 -2937 0
c Var 'aux728' order represents '3' with '2941'
-2939 2941 0
c Var 'aux728' direct represents '3' with '2942'
2939 -2941 2942 0
-2942 2941 0
-2942 -2939 0
c Var 'aux728' direct represents '4' with '-2941'
2936 2938 2940 2942 -2941 0
c Encoding variable: aux729 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '2943'
c Var 'aux729' direct represents '0' with '2943'
c Var 'aux729' order represents '1' with '2944'
-2943 2944 0
c Var 'aux729' direct represents '1' with '2945'
2943 -2944 2945 0
-2945 2944 0
-2945 -2943 0
c Var 'aux729' direct represents '2' with '-2944'
2943 2945 -2944 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '2946'
c Var 'aux730' direct represents '0' with '2946'
c Var 'aux730' order represents '1' with '2947'
-2946 2947 0
c Var 'aux730' direct represents '1' with '2948'
2946 -2947 2948 0
-2948 2947 0
-2948 -2946 0
c Var 'aux730' direct represents '2' with '-2947'
2946 2948 -2947 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '2949'
c Var 'aux731' direct represents '0' with '2949'
c Var 'aux731' order represents '1' with '2950'
-2949 2950 0
c Var 'aux731' direct represents '1' with '2951'
2949 -2950 2951 0
-2951 2950 0
-2951 -2949 0
c Var 'aux731' direct represents '2' with '-2950'
2949 2951 -2950 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '2952'
c Var 'aux732' direct represents '0' with '2952'
c Var 'aux732' order represents '1' with '2953'
-2952 2953 0
c Var 'aux732' direct represents '1' with '2954'
2952 -2953 2954 0
-2954 2953 0
-2954 -2952 0
c Var 'aux732' direct represents '2' with '-2953'
2952 2954 -2953 0
c Encoding variable: aux733 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux732))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '2955'
c Var 'aux733' direct represents '0' with '2955'
c Var 'aux733' order represents '1' with '2956'
-2955 2956 0
c Var 'aux733' direct represents '1' with '2957'
2955 -2956 2957 0
-2957 2956 0
-2957 -2955 0
c Var 'aux733' order represents '2' with '2958'
-2956 2958 0
c Var 'aux733' direct represents '2' with '2959'
2956 -2958 2959 0
-2959 2958 0
-2959 -2956 0
c Var 'aux733' direct represents '3' with '-2958'
2955 2957 2959 -2958 0
c Encoding variable: aux734 with domain: int(0..4) (representing constraint (aux729 + aux731))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '2960'
c Var 'aux734' direct represents '0' with '2960'
c Var 'aux734' order represents '1' with '2961'
-2960 2961 0
c Var 'aux734' direct represents '1' with '2962'
2960 -2961 2962 0
-2962 2961 0
-2962 -2960 0
c Var 'aux734' order represents '2' with '2963'
-2961 2963 0
c Var 'aux734' direct represents '2' with '2964'
2961 -2963 2964 0
-2964 2963 0
-2964 -2961 0
c Var 'aux734' order represents '3' with '2965'
-2963 2965 0
c Var 'aux734' direct represents '3' with '2966'
2963 -2965 2966 0
-2966 2965 0
-2966 -2963 0
c Var 'aux734' direct represents '4' with '-2965'
2960 2962 2964 2966 -2965 0
c Encoding variable: aux735 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '2967'
c Var 'aux735' direct represents '0' with '2967'
c Var 'aux735' order represents '1' with '2968'
-2967 2968 0
c Var 'aux735' direct represents '1' with '2969'
2967 -2968 2969 0
-2969 2968 0
-2969 -2967 0
c Var 'aux735' direct represents '2' with '-2968'
2967 2969 -2968 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '2970'
c Var 'aux736' direct represents '0' with '2970'
c Var 'aux736' order represents '1' with '2971'
-2970 2971 0
c Var 'aux736' direct represents '1' with '2972'
2970 -2971 2972 0
-2972 2971 0
-2972 -2970 0
c Var 'aux736' direct represents '2' with '-2971'
2970 2972 -2971 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '2973'
c Var 'aux737' direct represents '0' with '2973'
c Var 'aux737' order represents '1' with '2974'
-2973 2974 0
c Var 'aux737' direct represents '1' with '2975'
2973 -2974 2975 0
-2975 2974 0
-2975 -2973 0
c Var 'aux737' direct represents '2' with '-2974'
2973 2975 -2974 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '2976'
c Var 'aux738' direct represents '0' with '2976'
c Var 'aux738' order represents '1' with '2977'
-2976 2977 0
c Var 'aux738' direct represents '1' with '2978'
2976 -2977 2978 0
-2978 2977 0
-2978 -2976 0
c Var 'aux738' direct represents '2' with '-2977'
2976 2978 -2977 0
c Encoding variable: aux739 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux738))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '2979'
c Var 'aux739' direct represents '0' with '2979'
c Var 'aux739' order represents '1' with '2980'
-2979 2980 0
c Var 'aux739' direct represents '1' with '2981'
2979 -2980 2981 0
-2981 2980 0
-2981 -2979 0
c Var 'aux739' order represents '2' with '2982'
-2980 2982 0
c Var 'aux739' direct represents '2' with '2983'
2980 -2982 2983 0
-2983 2982 0
-2983 -2980 0
c Var 'aux739' direct represents '3' with '-2982'
2979 2981 2983 -2982 0
c Encoding variable: aux740 with domain: int(0..4) (representing constraint (aux735 + aux737))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '2984'
c Var 'aux740' direct represents '0' with '2984'
c Var 'aux740' order represents '1' with '2985'
-2984 2985 0
c Var 'aux740' direct represents '1' with '2986'
2984 -2985 2986 0
-2986 2985 0
-2986 -2984 0
c Var 'aux740' order represents '2' with '2987'
-2985 2987 0
c Var 'aux740' direct represents '2' with '2988'
2985 -2987 2988 0
-2988 2987 0
-2988 -2985 0
c Var 'aux740' order represents '3' with '2989'
-2987 2989 0
c Var 'aux740' direct represents '3' with '2990'
2987 -2989 2990 0
-2990 2989 0
-2990 -2987 0
c Var 'aux740' direct represents '4' with '-2989'
2984 2986 2988 2990 -2989 0
c Encoding variable: aux741 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '2991'
c Var 'aux741' direct represents '0' with '2991'
c Var 'aux741' order represents '1' with '2992'
-2991 2992 0
c Var 'aux741' direct represents '1' with '2993'
2991 -2992 2993 0
-2993 2992 0
-2993 -2991 0
c Var 'aux741' direct represents '2' with '-2992'
2991 2993 -2992 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '2994'
c Var 'aux742' direct represents '0' with '2994'
c Var 'aux742' order represents '1' with '2995'
-2994 2995 0
c Var 'aux742' direct represents '1' with '2996'
2994 -2995 2996 0
-2996 2995 0
-2996 -2994 0
c Var 'aux742' direct represents '2' with '-2995'
2994 2996 -2995 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '2997'
c Var 'aux743' direct represents '0' with '2997'
c Var 'aux743' order represents '1' with '2998'
-2997 2998 0
c Var 'aux743' direct represents '1' with '2999'
2997 -2998 2999 0
-2999 2998 0
-2999 -2997 0
c Var 'aux743' direct represents '2' with '-2998'
2997 2999 -2998 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3000'
c Var 'aux744' direct represents '0' with '3000'
c Var 'aux744' order represents '1' with '3001'
-3000 3001 0
c Var 'aux744' direct represents '1' with '3002'
3000 -3001 3002 0
-3002 3001 0
-3002 -3000 0
c Var 'aux744' direct represents '2' with '-3001'
3000 3002 -3001 0
c Encoding variable: aux745 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux744))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3003'
c Var 'aux745' direct represents '0' with '3003'
c Var 'aux745' order represents '1' with '3004'
-3003 3004 0
c Var 'aux745' direct represents '1' with '3005'
3003 -3004 3005 0
-3005 3004 0
-3005 -3003 0
c Var 'aux745' order represents '2' with '3006'
-3004 3006 0
c Var 'aux745' direct represents '2' with '3007'
3004 -3006 3007 0
-3007 3006 0
-3007 -3004 0
c Var 'aux745' direct represents '3' with '-3006'
3003 3005 3007 -3006 0
c Encoding variable: aux746 with domain: int(0..4) (representing constraint (aux741 + aux743))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3008'
c Var 'aux746' direct represents '0' with '3008'
c Var 'aux746' order represents '1' with '3009'
-3008 3009 0
c Var 'aux746' direct represents '1' with '3010'
3008 -3009 3010 0
-3010 3009 0
-3010 -3008 0
c Var 'aux746' order represents '2' with '3011'
-3009 3011 0
c Var 'aux746' direct represents '2' with '3012'
3009 -3011 3012 0
-3012 3011 0
-3012 -3009 0
c Var 'aux746' order represents '3' with '3013'
-3011 3013 0
c Var 'aux746' direct represents '3' with '3014'
3011 -3013 3014 0
-3014 3013 0
-3014 -3011 0
c Var 'aux746' direct represents '4' with '-3013'
3008 3010 3012 3014 -3013 0
c Encoding variable: aux747 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3015'
c Var 'aux747' direct represents '0' with '3015'
c Var 'aux747' order represents '1' with '3016'
-3015 3016 0
c Var 'aux747' direct represents '1' with '3017'
3015 -3016 3017 0
-3017 3016 0
-3017 -3015 0
c Var 'aux747' direct represents '2' with '-3016'
3015 3017 -3016 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3018'
c Var 'aux748' direct represents '0' with '3018'
c Var 'aux748' order represents '1' with '3019'
-3018 3019 0
c Var 'aux748' direct represents '1' with '3020'
3018 -3019 3020 0
-3020 3019 0
-3020 -3018 0
c Var 'aux748' direct represents '2' with '-3019'
3018 3020 -3019 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3021'
c Var 'aux749' direct represents '0' with '3021'
c Var 'aux749' order represents '1' with '3022'
-3021 3022 0
c Var 'aux749' direct represents '1' with '3023'
3021 -3022 3023 0
-3023 3022 0
-3023 -3021 0
c Var 'aux749' direct represents '2' with '-3022'
3021 3023 -3022 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3024'
c Var 'aux750' direct represents '0' with '3024'
c Var 'aux750' order represents '1' with '3025'
-3024 3025 0
c Var 'aux750' direct represents '1' with '3026'
3024 -3025 3026 0
-3026 3025 0
-3026 -3024 0
c Var 'aux750' direct represents '2' with '-3025'
3024 3026 -3025 0
c Encoding variable: aux751 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux750))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3027'
c Var 'aux751' direct represents '0' with '3027'
c Var 'aux751' order represents '1' with '3028'
-3027 3028 0
c Var 'aux751' direct represents '1' with '3029'
3027 -3028 3029 0
-3029 3028 0
-3029 -3027 0
c Var 'aux751' order represents '2' with '3030'
-3028 3030 0
c Var 'aux751' direct represents '2' with '3031'
3028 -3030 3031 0
-3031 3030 0
-3031 -3028 0
c Var 'aux751' direct represents '3' with '-3030'
3027 3029 3031 -3030 0
c Encoding variable: aux752 with domain: int(0..4) (representing constraint (aux747 + aux749))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3032'
c Var 'aux752' direct represents '0' with '3032'
c Var 'aux752' order represents '1' with '3033'
-3032 3033 0
c Var 'aux752' direct represents '1' with '3034'
3032 -3033 3034 0
-3034 3033 0
-3034 -3032 0
c Var 'aux752' order represents '2' with '3035'
-3033 3035 0
c Var 'aux752' direct represents '2' with '3036'
3033 -3035 3036 0
-3036 3035 0
-3036 -3033 0
c Var 'aux752' order represents '3' with '3037'
-3035 3037 0
c Var 'aux752' direct represents '3' with '3038'
3035 -3037 3038 0
-3038 3037 0
-3038 -3035 0
c Var 'aux752' direct represents '4' with '-3037'
3032 3034 3036 3038 -3037 0
c Encoding variable: aux753 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3039'
c Var 'aux753' direct represents '0' with '3039'
c Var 'aux753' order represents '1' with '3040'
-3039 3040 0
c Var 'aux753' direct represents '1' with '3041'
3039 -3040 3041 0
-3041 3040 0
-3041 -3039 0
c Var 'aux753' direct represents '2' with '-3040'
3039 3041 -3040 0
c Encoding variable: aux754 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3042'
c Var 'aux754' direct represents '0' with '3042'
c Var 'aux754' order represents '1' with '3043'
-3042 3043 0
c Var 'aux754' direct represents '1' with '3044'
3042 -3043 3044 0
-3044 3043 0
-3044 -3042 0
c Var 'aux754' direct represents '2' with '-3043'
3042 3044 -3043 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3045'
c Var 'aux755' direct represents '0' with '3045'
c Var 'aux755' order represents '1' with '3046'
-3045 3046 0
c Var 'aux755' direct represents '1' with '3047'
3045 -3046 3047 0
-3047 3046 0
-3047 -3045 0
c Var 'aux755' direct represents '2' with '-3046'
3045 3047 -3046 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3048'
c Var 'aux756' direct represents '0' with '3048'
c Var 'aux756' order represents '1' with '3049'
-3048 3049 0
c Var 'aux756' direct represents '1' with '3050'
3048 -3049 3050 0
-3050 3049 0
-3050 -3048 0
c Var 'aux756' direct represents '2' with '-3049'
3048 3050 -3049 0
c Encoding variable: aux757 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux756))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3051'
c Var 'aux757' direct represents '0' with '3051'
c Var 'aux757' order represents '1' with '3052'
-3051 3052 0
c Var 'aux757' direct represents '1' with '3053'
3051 -3052 3053 0
-3053 3052 0
-3053 -3051 0
c Var 'aux757' order represents '2' with '3054'
-3052 3054 0
c Var 'aux757' direct represents '2' with '3055'
3052 -3054 3055 0
-3055 3054 0
-3055 -3052 0
c Var 'aux757' direct represents '3' with '-3054'
3051 3053 3055 -3054 0
c Encoding variable: aux758 with domain: int(0..4) (representing constraint (aux753 + aux755))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3056'
c Var 'aux758' direct represents '0' with '3056'
c Var 'aux758' order represents '1' with '3057'
-3056 3057 0
c Var 'aux758' direct represents '1' with '3058'
3056 -3057 3058 0
-3058 3057 0
-3058 -3056 0
c Var 'aux758' order represents '2' with '3059'
-3057 3059 0
c Var 'aux758' direct represents '2' with '3060'
3057 -3059 3060 0
-3060 3059 0
-3060 -3057 0
c Var 'aux758' order represents '3' with '3061'
-3059 3061 0
c Var 'aux758' direct represents '3' with '3062'
3059 -3061 3062 0
-3062 3061 0
-3062 -3059 0
c Var 'aux758' direct represents '4' with '-3061'
3056 3058 3060 3062 -3061 0
c Encoding variable: aux759 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3063'
c Var 'aux759' direct represents '0' with '3063'
c Var 'aux759' order represents '1' with '3064'
-3063 3064 0
c Var 'aux759' direct represents '1' with '3065'
3063 -3064 3065 0
-3065 3064 0
-3065 -3063 0
c Var 'aux759' direct represents '2' with '-3064'
3063 3065 -3064 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3066'
c Var 'aux760' direct represents '0' with '3066'
c Var 'aux760' order represents '1' with '3067'
-3066 3067 0
c Var 'aux760' direct represents '1' with '3068'
3066 -3067 3068 0
-3068 3067 0
-3068 -3066 0
c Var 'aux760' direct represents '2' with '-3067'
3066 3068 -3067 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3069'
c Var 'aux761' direct represents '0' with '3069'
c Var 'aux761' order represents '1' with '3070'
-3069 3070 0
c Var 'aux761' direct represents '1' with '3071'
3069 -3070 3071 0
-3071 3070 0
-3071 -3069 0
c Var 'aux761' direct represents '2' with '-3070'
3069 3071 -3070 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3072'
c Var 'aux762' direct represents '0' with '3072'
c Var 'aux762' order represents '1' with '3073'
-3072 3073 0
c Var 'aux762' direct represents '1' with '3074'
3072 -3073 3074 0
-3074 3073 0
-3074 -3072 0
c Var 'aux762' direct represents '2' with '-3073'
3072 3074 -3073 0
c Encoding variable: aux763 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux762))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3075'
c Var 'aux763' direct represents '0' with '3075'
c Var 'aux763' order represents '1' with '3076'
-3075 3076 0
c Var 'aux763' direct represents '1' with '3077'
3075 -3076 3077 0
-3077 3076 0
-3077 -3075 0
c Var 'aux763' order represents '2' with '3078'
-3076 3078 0
c Var 'aux763' direct represents '2' with '3079'
3076 -3078 3079 0
-3079 3078 0
-3079 -3076 0
c Var 'aux763' direct represents '3' with '-3078'
3075 3077 3079 -3078 0
c Encoding variable: aux764 with domain: int(0..4) (representing constraint (aux759 + aux761))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3080'
c Var 'aux764' direct represents '0' with '3080'
c Var 'aux764' order represents '1' with '3081'
-3080 3081 0
c Var 'aux764' direct represents '1' with '3082'
3080 -3081 3082 0
-3082 3081 0
-3082 -3080 0
c Var 'aux764' order represents '2' with '3083'
-3081 3083 0
c Var 'aux764' direct represents '2' with '3084'
3081 -3083 3084 0
-3084 3083 0
-3084 -3081 0
c Var 'aux764' order represents '3' with '3085'
-3083 3085 0
c Var 'aux764' direct represents '3' with '3086'
3083 -3085 3086 0
-3086 3085 0
-3086 -3083 0
c Var 'aux764' direct represents '4' with '-3085'
3080 3082 3084 3086 -3085 0
c Encoding variable: aux765 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3087'
c Var 'aux765' direct represents '0' with '3087'
c Var 'aux765' order represents '1' with '3088'
-3087 3088 0
c Var 'aux765' direct represents '1' with '3089'
3087 -3088 3089 0
-3089 3088 0
-3089 -3087 0
c Var 'aux765' direct represents '2' with '-3088'
3087 3089 -3088 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3090'
c Var 'aux766' direct represents '0' with '3090'
c Var 'aux766' order represents '1' with '3091'
-3090 3091 0
c Var 'aux766' direct represents '1' with '3092'
3090 -3091 3092 0
-3092 3091 0
-3092 -3090 0
c Var 'aux766' direct represents '2' with '-3091'
3090 3092 -3091 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3093'
c Var 'aux767' direct represents '0' with '3093'
c Var 'aux767' order represents '1' with '3094'
-3093 3094 0
c Var 'aux767' direct represents '1' with '3095'
3093 -3094 3095 0
-3095 3094 0
-3095 -3093 0
c Var 'aux767' direct represents '2' with '-3094'
3093 3095 -3094 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3096'
c Var 'aux768' direct represents '0' with '3096'
c Var 'aux768' order represents '1' with '3097'
-3096 3097 0
c Var 'aux768' direct represents '1' with '3098'
3096 -3097 3098 0
-3098 3097 0
-3098 -3096 0
c Var 'aux768' direct represents '2' with '-3097'
3096 3098 -3097 0
c Encoding variable: aux769 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux768))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3099'
c Var 'aux769' direct represents '0' with '3099'
c Var 'aux769' order represents '1' with '3100'
-3099 3100 0
c Var 'aux769' direct represents '1' with '3101'
3099 -3100 3101 0
-3101 3100 0
-3101 -3099 0
c Var 'aux769' order represents '2' with '3102'
-3100 3102 0
c Var 'aux769' direct represents '2' with '3103'
3100 -3102 3103 0
-3103 3102 0
-3103 -3100 0
c Var 'aux769' direct represents '3' with '-3102'
3099 3101 3103 -3102 0
c Encoding variable: aux770 with domain: int(0..4) (representing constraint (aux765 + aux767))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3104'
c Var 'aux770' direct represents '0' with '3104'
c Var 'aux770' order represents '1' with '3105'
-3104 3105 0
c Var 'aux770' direct represents '1' with '3106'
3104 -3105 3106 0
-3106 3105 0
-3106 -3104 0
c Var 'aux770' order represents '2' with '3107'
-3105 3107 0
c Var 'aux770' direct represents '2' with '3108'
3105 -3107 3108 0
-3108 3107 0
-3108 -3105 0
c Var 'aux770' order represents '3' with '3109'
-3107 3109 0
c Var 'aux770' direct represents '3' with '3110'
3107 -3109 3110 0
-3110 3109 0
-3110 -3107 0
c Var 'aux770' direct represents '4' with '-3109'
3104 3106 3108 3110 -3109 0
c Encoding variable: aux771 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3111'
c Var 'aux771' direct represents '0' with '3111'
c Var 'aux771' order represents '1' with '3112'
-3111 3112 0
c Var 'aux771' direct represents '1' with '3113'
3111 -3112 3113 0
-3113 3112 0
-3113 -3111 0
c Var 'aux771' direct represents '2' with '-3112'
3111 3113 -3112 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3114'
c Var 'aux772' direct represents '0' with '3114'
c Var 'aux772' order represents '1' with '3115'
-3114 3115 0
c Var 'aux772' direct represents '1' with '3116'
3114 -3115 3116 0
-3116 3115 0
-3116 -3114 0
c Var 'aux772' direct represents '2' with '-3115'
3114 3116 -3115 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3117'
c Var 'aux773' direct represents '0' with '3117'
c Var 'aux773' order represents '1' with '3118'
-3117 3118 0
c Var 'aux773' direct represents '1' with '3119'
3117 -3118 3119 0
-3119 3118 0
-3119 -3117 0
c Var 'aux773' direct represents '2' with '-3118'
3117 3119 -3118 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3120'
c Var 'aux774' direct represents '0' with '3120'
c Var 'aux774' order represents '1' with '3121'
-3120 3121 0
c Var 'aux774' direct represents '1' with '3122'
3120 -3121 3122 0
-3122 3121 0
-3122 -3120 0
c Var 'aux774' direct represents '2' with '-3121'
3120 3122 -3121 0
c Encoding variable: aux775 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux774))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3123'
c Var 'aux775' direct represents '0' with '3123'
c Var 'aux775' order represents '1' with '3124'
-3123 3124 0
c Var 'aux775' direct represents '1' with '3125'
3123 -3124 3125 0
-3125 3124 0
-3125 -3123 0
c Var 'aux775' order represents '2' with '3126'
-3124 3126 0
c Var 'aux775' direct represents '2' with '3127'
3124 -3126 3127 0
-3127 3126 0
-3127 -3124 0
c Var 'aux775' direct represents '3' with '-3126'
3123 3125 3127 -3126 0
c Encoding variable: aux776 with domain: int(0..4) (representing constraint (aux771 + aux773))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3128'
c Var 'aux776' direct represents '0' with '3128'
c Var 'aux776' order represents '1' with '3129'
-3128 3129 0
c Var 'aux776' direct represents '1' with '3130'
3128 -3129 3130 0
-3130 3129 0
-3130 -3128 0
c Var 'aux776' order represents '2' with '3131'
-3129 3131 0
c Var 'aux776' direct represents '2' with '3132'
3129 -3131 3132 0
-3132 3131 0
-3132 -3129 0
c Var 'aux776' order represents '3' with '3133'
-3131 3133 0
c Var 'aux776' direct represents '3' with '3134'
3131 -3133 3134 0
-3134 3133 0
-3134 -3131 0
c Var 'aux776' direct represents '4' with '-3133'
3128 3130 3132 3134 -3133 0
c Encoding variable: aux777 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3135'
c Var 'aux777' direct represents '0' with '3135'
c Var 'aux777' order represents '1' with '3136'
-3135 3136 0
c Var 'aux777' direct represents '1' with '3137'
3135 -3136 3137 0
-3137 3136 0
-3137 -3135 0
c Var 'aux777' direct represents '2' with '-3136'
3135 3137 -3136 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3138'
c Var 'aux778' direct represents '0' with '3138'
c Var 'aux778' order represents '1' with '3139'
-3138 3139 0
c Var 'aux778' direct represents '1' with '3140'
3138 -3139 3140 0
-3140 3139 0
-3140 -3138 0
c Var 'aux778' direct represents '2' with '-3139'
3138 3140 -3139 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3141'
c Var 'aux779' direct represents '0' with '3141'
c Var 'aux779' order represents '1' with '3142'
-3141 3142 0
c Var 'aux779' direct represents '1' with '3143'
3141 -3142 3143 0
-3143 3142 0
-3143 -3141 0
c Var 'aux779' direct represents '2' with '-3142'
3141 3143 -3142 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3144'
c Var 'aux780' direct represents '0' with '3144'
c Var 'aux780' order represents '1' with '3145'
-3144 3145 0
c Var 'aux780' direct represents '1' with '3146'
3144 -3145 3146 0
-3146 3145 0
-3146 -3144 0
c Var 'aux780' direct represents '2' with '-3145'
3144 3146 -3145 0
c Encoding variable: aux781 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux780))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3147'
c Var 'aux781' direct represents '0' with '3147'
c Var 'aux781' order represents '1' with '3148'
-3147 3148 0
c Var 'aux781' direct represents '1' with '3149'
3147 -3148 3149 0
-3149 3148 0
-3149 -3147 0
c Var 'aux781' order represents '2' with '3150'
-3148 3150 0
c Var 'aux781' direct represents '2' with '3151'
3148 -3150 3151 0
-3151 3150 0
-3151 -3148 0
c Var 'aux781' direct represents '3' with '-3150'
3147 3149 3151 -3150 0
c Encoding variable: aux782 with domain: int(0..4) (representing constraint (aux777 + aux779))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3152'
c Var 'aux782' direct represents '0' with '3152'
c Var 'aux782' order represents '1' with '3153'
-3152 3153 0
c Var 'aux782' direct represents '1' with '3154'
3152 -3153 3154 0
-3154 3153 0
-3154 -3152 0
c Var 'aux782' order represents '2' with '3155'
-3153 3155 0
c Var 'aux782' direct represents '2' with '3156'
3153 -3155 3156 0
-3156 3155 0
-3156 -3153 0
c Var 'aux782' order represents '3' with '3157'
-3155 3157 0
c Var 'aux782' direct represents '3' with '3158'
3155 -3157 3158 0
-3158 3157 0
-3158 -3155 0
c Var 'aux782' direct represents '4' with '-3157'
3152 3154 3156 3158 -3157 0
c Encoding variable: aux783 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3159'
c Var 'aux783' direct represents '0' with '3159'
c Var 'aux783' order represents '1' with '3160'
-3159 3160 0
c Var 'aux783' direct represents '1' with '3161'
3159 -3160 3161 0
-3161 3160 0
-3161 -3159 0
c Var 'aux783' direct represents '2' with '-3160'
3159 3161 -3160 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3162'
c Var 'aux784' direct represents '0' with '3162'
c Var 'aux784' order represents '1' with '3163'
-3162 3163 0
c Var 'aux784' direct represents '1' with '3164'
3162 -3163 3164 0
-3164 3163 0
-3164 -3162 0
c Var 'aux784' direct represents '2' with '-3163'
3162 3164 -3163 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3165'
c Var 'aux785' direct represents '0' with '3165'
c Var 'aux785' order represents '1' with '3166'
-3165 3166 0
c Var 'aux785' direct represents '1' with '3167'
3165 -3166 3167 0
-3167 3166 0
-3167 -3165 0
c Var 'aux785' direct represents '2' with '-3166'
3165 3167 -3166 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3168'
c Var 'aux786' direct represents '0' with '3168'
c Var 'aux786' order represents '1' with '3169'
-3168 3169 0
c Var 'aux786' direct represents '1' with '3170'
3168 -3169 3170 0
-3170 3169 0
-3170 -3168 0
c Var 'aux786' direct represents '2' with '-3169'
3168 3170 -3169 0
c Encoding variable: aux787 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux786))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3171'
c Var 'aux787' direct represents '0' with '3171'
c Var 'aux787' order represents '1' with '3172'
-3171 3172 0
c Var 'aux787' direct represents '1' with '3173'
3171 -3172 3173 0
-3173 3172 0
-3173 -3171 0
c Var 'aux787' order represents '2' with '3174'
-3172 3174 0
c Var 'aux787' direct represents '2' with '3175'
3172 -3174 3175 0
-3175 3174 0
-3175 -3172 0
c Var 'aux787' direct represents '3' with '-3174'
3171 3173 3175 -3174 0
c Encoding variable: aux788 with domain: int(0..4) (representing constraint (aux783 + aux785))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3176'
c Var 'aux788' direct represents '0' with '3176'
c Var 'aux788' order represents '1' with '3177'
-3176 3177 0
c Var 'aux788' direct represents '1' with '3178'
3176 -3177 3178 0
-3178 3177 0
-3178 -3176 0
c Var 'aux788' order represents '2' with '3179'
-3177 3179 0
c Var 'aux788' direct represents '2' with '3180'
3177 -3179 3180 0
-3180 3179 0
-3180 -3177 0
c Var 'aux788' order represents '3' with '3181'
-3179 3181 0
c Var 'aux788' direct represents '3' with '3182'
3179 -3181 3182 0
-3182 3181 0
-3182 -3179 0
c Var 'aux788' direct represents '4' with '-3181'
3176 3178 3180 3182 -3181 0
c Encoding variable: aux789 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3183'
c Var 'aux789' direct represents '0' with '3183'
c Var 'aux789' order represents '1' with '3184'
-3183 3184 0
c Var 'aux789' direct represents '1' with '3185'
3183 -3184 3185 0
-3185 3184 0
-3185 -3183 0
c Var 'aux789' direct represents '2' with '-3184'
3183 3185 -3184 0
c Encoding variable: aux790 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3186'
c Var 'aux790' direct represents '0' with '3186'
c Var 'aux790' order represents '1' with '3187'
-3186 3187 0
c Var 'aux790' direct represents '1' with '3188'
3186 -3187 3188 0
-3188 3187 0
-3188 -3186 0
c Var 'aux790' direct represents '2' with '-3187'
3186 3188 -3187 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3189'
c Var 'aux791' direct represents '0' with '3189'
c Var 'aux791' order represents '1' with '3190'
-3189 3190 0
c Var 'aux791' direct represents '1' with '3191'
3189 -3190 3191 0
-3191 3190 0
-3191 -3189 0
c Var 'aux791' direct represents '2' with '-3190'
3189 3191 -3190 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3192'
c Var 'aux792' direct represents '0' with '3192'
c Var 'aux792' order represents '1' with '3193'
-3192 3193 0
c Var 'aux792' direct represents '1' with '3194'
3192 -3193 3194 0
-3194 3193 0
-3194 -3192 0
c Var 'aux792' direct represents '2' with '-3193'
3192 3194 -3193 0
c Encoding variable: aux793 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux792))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3195'
c Var 'aux793' direct represents '0' with '3195'
c Var 'aux793' order represents '1' with '3196'
-3195 3196 0
c Var 'aux793' direct represents '1' with '3197'
3195 -3196 3197 0
-3197 3196 0
-3197 -3195 0
c Var 'aux793' order represents '2' with '3198'
-3196 3198 0
c Var 'aux793' direct represents '2' with '3199'
3196 -3198 3199 0
-3199 3198 0
-3199 -3196 0
c Var 'aux793' direct represents '3' with '-3198'
3195 3197 3199 -3198 0
c Encoding variable: aux794 with domain: int(0..4) (representing constraint (aux789 + aux791))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3200'
c Var 'aux794' direct represents '0' with '3200'
c Var 'aux794' order represents '1' with '3201'
-3200 3201 0
c Var 'aux794' direct represents '1' with '3202'
3200 -3201 3202 0
-3202 3201 0
-3202 -3200 0
c Var 'aux794' order represents '2' with '3203'
-3201 3203 0
c Var 'aux794' direct represents '2' with '3204'
3201 -3203 3204 0
-3204 3203 0
-3204 -3201 0
c Var 'aux794' order represents '3' with '3205'
-3203 3205 0
c Var 'aux794' direct represents '3' with '3206'
3203 -3205 3206 0
-3206 3205 0
-3206 -3203 0
c Var 'aux794' direct represents '4' with '-3205'
3200 3202 3204 3206 -3205 0
c Encoding variable: aux795 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3207'
c Var 'aux795' direct represents '0' with '3207'
c Var 'aux795' order represents '1' with '3208'
-3207 3208 0
c Var 'aux795' direct represents '1' with '3209'
3207 -3208 3209 0
-3209 3208 0
-3209 -3207 0
c Var 'aux795' direct represents '2' with '-3208'
3207 3209 -3208 0
c Encoding variable: aux796 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3210'
c Var 'aux796' direct represents '0' with '3210'
c Var 'aux796' order represents '1' with '3211'
-3210 3211 0
c Var 'aux796' direct represents '1' with '3212'
3210 -3211 3212 0
-3212 3211 0
-3212 -3210 0
c Var 'aux796' direct represents '2' with '-3211'
3210 3212 -3211 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3213'
c Var 'aux797' direct represents '0' with '3213'
c Var 'aux797' order represents '1' with '3214'
-3213 3214 0
c Var 'aux797' direct represents '1' with '3215'
3213 -3214 3215 0
-3215 3214 0
-3215 -3213 0
c Var 'aux797' direct represents '2' with '-3214'
3213 3215 -3214 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3216'
c Var 'aux798' direct represents '0' with '3216'
c Var 'aux798' order represents '1' with '3217'
-3216 3217 0
c Var 'aux798' direct represents '1' with '3218'
3216 -3217 3218 0
-3218 3217 0
-3218 -3216 0
c Var 'aux798' direct represents '2' with '-3217'
3216 3218 -3217 0
c Encoding variable: aux799 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux798))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3219'
c Var 'aux799' direct represents '0' with '3219'
c Var 'aux799' order represents '1' with '3220'
-3219 3220 0
c Var 'aux799' direct represents '1' with '3221'
3219 -3220 3221 0
-3221 3220 0
-3221 -3219 0
c Var 'aux799' order represents '2' with '3222'
-3220 3222 0
c Var 'aux799' direct represents '2' with '3223'
3220 -3222 3223 0
-3223 3222 0
-3223 -3220 0
c Var 'aux799' direct represents '3' with '-3222'
3219 3221 3223 -3222 0
c Encoding variable: aux800 with domain: int(0..4) (representing constraint (aux795 + aux797))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3224'
c Var 'aux800' direct represents '0' with '3224'
c Var 'aux800' order represents '1' with '3225'
-3224 3225 0
c Var 'aux800' direct represents '1' with '3226'
3224 -3225 3226 0
-3226 3225 0
-3226 -3224 0
c Var 'aux800' order represents '2' with '3227'
-3225 3227 0
c Var 'aux800' direct represents '2' with '3228'
3225 -3227 3228 0
-3228 3227 0
-3228 -3225 0
c Var 'aux800' order represents '3' with '3229'
-3227 3229 0
c Var 'aux800' direct represents '3' with '3230'
3227 -3229 3230 0
-3230 3229 0
-3230 -3227 0
c Var 'aux800' direct represents '4' with '-3229'
3224 3226 3228 3230 -3229 0
c Encoding variable: aux801 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3231'
c Var 'aux801' direct represents '0' with '3231'
c Var 'aux801' order represents '1' with '3232'
-3231 3232 0
c Var 'aux801' direct represents '1' with '3233'
3231 -3232 3233 0
-3233 3232 0
-3233 -3231 0
c Var 'aux801' direct represents '2' with '-3232'
3231 3233 -3232 0
c Encoding variable: aux802 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3234'
c Var 'aux802' direct represents '0' with '3234'
c Var 'aux802' order represents '1' with '3235'
-3234 3235 0
c Var 'aux802' direct represents '1' with '3236'
3234 -3235 3236 0
-3236 3235 0
-3236 -3234 0
c Var 'aux802' direct represents '2' with '-3235'
3234 3236 -3235 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3237'
c Var 'aux803' direct represents '0' with '3237'
c Var 'aux803' order represents '1' with '3238'
-3237 3238 0
c Var 'aux803' direct represents '1' with '3239'
3237 -3238 3239 0
-3239 3238 0
-3239 -3237 0
c Var 'aux803' direct represents '2' with '-3238'
3237 3239 -3238 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3240'
c Var 'aux804' direct represents '0' with '3240'
c Var 'aux804' order represents '1' with '3241'
-3240 3241 0
c Var 'aux804' direct represents '1' with '3242'
3240 -3241 3242 0
-3242 3241 0
-3242 -3240 0
c Var 'aux804' direct represents '2' with '-3241'
3240 3242 -3241 0
c Encoding variable: aux805 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux804))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3243'
c Var 'aux805' direct represents '0' with '3243'
c Var 'aux805' order represents '1' with '3244'
-3243 3244 0
c Var 'aux805' direct represents '1' with '3245'
3243 -3244 3245 0
-3245 3244 0
-3245 -3243 0
c Var 'aux805' order represents '2' with '3246'
-3244 3246 0
c Var 'aux805' direct represents '2' with '3247'
3244 -3246 3247 0
-3247 3246 0
-3247 -3244 0
c Var 'aux805' direct represents '3' with '-3246'
3243 3245 3247 -3246 0
c Encoding variable: aux806 with domain: int(0..4) (representing constraint (aux801 + aux803))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3248'
c Var 'aux806' direct represents '0' with '3248'
c Var 'aux806' order represents '1' with '3249'
-3248 3249 0
c Var 'aux806' direct represents '1' with '3250'
3248 -3249 3250 0
-3250 3249 0
-3250 -3248 0
c Var 'aux806' order represents '2' with '3251'
-3249 3251 0
c Var 'aux806' direct represents '2' with '3252'
3249 -3251 3252 0
-3252 3251 0
-3252 -3249 0
c Var 'aux806' order represents '3' with '3253'
-3251 3253 0
c Var 'aux806' direct represents '3' with '3254'
3251 -3253 3254 0
-3254 3253 0
-3254 -3251 0
c Var 'aux806' direct represents '4' with '-3253'
3248 3250 3252 3254 -3253 0
c Encoding variable: aux807 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3255'
c Var 'aux807' direct represents '0' with '3255'
c Var 'aux807' order represents '1' with '3256'
-3255 3256 0
c Var 'aux807' direct represents '1' with '3257'
3255 -3256 3257 0
-3257 3256 0
-3257 -3255 0
c Var 'aux807' direct represents '2' with '-3256'
3255 3257 -3256 0
c Encoding variable: aux808 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3258'
c Var 'aux808' direct represents '0' with '3258'
c Var 'aux808' order represents '1' with '3259'
-3258 3259 0
c Var 'aux808' direct represents '1' with '3260'
3258 -3259 3260 0
-3260 3259 0
-3260 -3258 0
c Var 'aux808' direct represents '2' with '-3259'
3258 3260 -3259 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3261'
c Var 'aux809' direct represents '0' with '3261'
c Var 'aux809' order represents '1' with '3262'
-3261 3262 0
c Var 'aux809' direct represents '1' with '3263'
3261 -3262 3263 0
-3263 3262 0
-3263 -3261 0
c Var 'aux809' direct represents '2' with '-3262'
3261 3263 -3262 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3264'
c Var 'aux810' direct represents '0' with '3264'
c Var 'aux810' order represents '1' with '3265'
-3264 3265 0
c Var 'aux810' direct represents '1' with '3266'
3264 -3265 3266 0
-3266 3265 0
-3266 -3264 0
c Var 'aux810' direct represents '2' with '-3265'
3264 3266 -3265 0
c Encoding variable: aux811 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux810))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3267'
c Var 'aux811' direct represents '0' with '3267'
c Var 'aux811' order represents '1' with '3268'
-3267 3268 0
c Var 'aux811' direct represents '1' with '3269'
3267 -3268 3269 0
-3269 3268 0
-3269 -3267 0
c Var 'aux811' order represents '2' with '3270'
-3268 3270 0
c Var 'aux811' direct represents '2' with '3271'
3268 -3270 3271 0
-3271 3270 0
-3271 -3268 0
c Var 'aux811' direct represents '3' with '-3270'
3267 3269 3271 -3270 0
c Encoding variable: aux812 with domain: int(0..4) (representing constraint (aux807 + aux809))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3272'
c Var 'aux812' direct represents '0' with '3272'
c Var 'aux812' order represents '1' with '3273'
-3272 3273 0
c Var 'aux812' direct represents '1' with '3274'
3272 -3273 3274 0
-3274 3273 0
-3274 -3272 0
c Var 'aux812' order represents '2' with '3275'
-3273 3275 0
c Var 'aux812' direct represents '2' with '3276'
3273 -3275 3276 0
-3276 3275 0
-3276 -3273 0
c Var 'aux812' order represents '3' with '3277'
-3275 3277 0
c Var 'aux812' direct represents '3' with '3278'
3275 -3277 3278 0
-3278 3277 0
-3278 -3275 0
c Var 'aux812' direct represents '4' with '-3277'
3272 3274 3276 3278 -3277 0
c Encoding variable: aux813 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3279'
c Var 'aux813' direct represents '0' with '3279'
c Var 'aux813' order represents '1' with '3280'
-3279 3280 0
c Var 'aux813' direct represents '1' with '3281'
3279 -3280 3281 0
-3281 3280 0
-3281 -3279 0
c Var 'aux813' direct represents '2' with '-3280'
3279 3281 -3280 0
c Encoding variable: aux814 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3282'
c Var 'aux814' direct represents '0' with '3282'
c Var 'aux814' order represents '1' with '3283'
-3282 3283 0
c Var 'aux814' direct represents '1' with '3284'
3282 -3283 3284 0
-3284 3283 0
-3284 -3282 0
c Var 'aux814' direct represents '2' with '-3283'
3282 3284 -3283 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3285'
c Var 'aux815' direct represents '0' with '3285'
c Var 'aux815' order represents '1' with '3286'
-3285 3286 0
c Var 'aux815' direct represents '1' with '3287'
3285 -3286 3287 0
-3287 3286 0
-3287 -3285 0
c Var 'aux815' direct represents '2' with '-3286'
3285 3287 -3286 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3288'
c Var 'aux816' direct represents '0' with '3288'
c Var 'aux816' order represents '1' with '3289'
-3288 3289 0
c Var 'aux816' direct represents '1' with '3290'
3288 -3289 3290 0
-3290 3289 0
-3290 -3288 0
c Var 'aux816' direct represents '2' with '-3289'
3288 3290 -3289 0
c Encoding variable: aux817 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux816))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3291'
c Var 'aux817' direct represents '0' with '3291'
c Var 'aux817' order represents '1' with '3292'
-3291 3292 0
c Var 'aux817' direct represents '1' with '3293'
3291 -3292 3293 0
-3293 3292 0
-3293 -3291 0
c Var 'aux817' order represents '2' with '3294'
-3292 3294 0
c Var 'aux817' direct represents '2' with '3295'
3292 -3294 3295 0
-3295 3294 0
-3295 -3292 0
c Var 'aux817' direct represents '3' with '-3294'
3291 3293 3295 -3294 0
c Encoding variable: aux818 with domain: int(0..4) (representing constraint (aux813 + aux815))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3296'
c Var 'aux818' direct represents '0' with '3296'
c Var 'aux818' order represents '1' with '3297'
-3296 3297 0
c Var 'aux818' direct represents '1' with '3298'
3296 -3297 3298 0
-3298 3297 0
-3298 -3296 0
c Var 'aux818' order represents '2' with '3299'
-3297 3299 0
c Var 'aux818' direct represents '2' with '3300'
3297 -3299 3300 0
-3300 3299 0
-3300 -3297 0
c Var 'aux818' order represents '3' with '3301'
-3299 3301 0
c Var 'aux818' direct represents '3' with '3302'
3299 -3301 3302 0
-3302 3301 0
-3302 -3299 0
c Var 'aux818' direct represents '4' with '-3301'
3296 3298 3300 3302 -3301 0
c Encoding variable: aux819 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3303'
c Var 'aux819' direct represents '0' with '3303'
c Var 'aux819' order represents '1' with '3304'
-3303 3304 0
c Var 'aux819' direct represents '1' with '3305'
3303 -3304 3305 0
-3305 3304 0
-3305 -3303 0
c Var 'aux819' direct represents '2' with '-3304'
3303 3305 -3304 0
c Encoding variable: aux820 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3306'
c Var 'aux820' direct represents '0' with '3306'
c Var 'aux820' order represents '1' with '3307'
-3306 3307 0
c Var 'aux820' direct represents '1' with '3308'
3306 -3307 3308 0
-3308 3307 0
-3308 -3306 0
c Var 'aux820' direct represents '2' with '-3307'
3306 3308 -3307 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3309'
c Var 'aux821' direct represents '0' with '3309'
c Var 'aux821' order represents '1' with '3310'
-3309 3310 0
c Var 'aux821' direct represents '1' with '3311'
3309 -3310 3311 0
-3311 3310 0
-3311 -3309 0
c Var 'aux821' direct represents '2' with '-3310'
3309 3311 -3310 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3312'
c Var 'aux822' direct represents '0' with '3312'
c Var 'aux822' order represents '1' with '3313'
-3312 3313 0
c Var 'aux822' direct represents '1' with '3314'
3312 -3313 3314 0
-3314 3313 0
-3314 -3312 0
c Var 'aux822' direct represents '2' with '-3313'
3312 3314 -3313 0
c Encoding variable: aux823 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux822))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3315'
c Var 'aux823' direct represents '0' with '3315'
c Var 'aux823' order represents '1' with '3316'
-3315 3316 0
c Var 'aux823' direct represents '1' with '3317'
3315 -3316 3317 0
-3317 3316 0
-3317 -3315 0
c Var 'aux823' order represents '2' with '3318'
-3316 3318 0
c Var 'aux823' direct represents '2' with '3319'
3316 -3318 3319 0
-3319 3318 0
-3319 -3316 0
c Var 'aux823' direct represents '3' with '-3318'
3315 3317 3319 -3318 0
c Encoding variable: aux824 with domain: int(0..4) (representing constraint (aux819 + aux821))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3320'
c Var 'aux824' direct represents '0' with '3320'
c Var 'aux824' order represents '1' with '3321'
-3320 3321 0
c Var 'aux824' direct represents '1' with '3322'
3320 -3321 3322 0
-3322 3321 0
-3322 -3320 0
c Var 'aux824' order represents '2' with '3323'
-3321 3323 0
c Var 'aux824' direct represents '2' with '3324'
3321 -3323 3324 0
-3324 3323 0
-3324 -3321 0
c Var 'aux824' order represents '3' with '3325'
-3323 3325 0
c Var 'aux824' direct represents '3' with '3326'
3323 -3325 3326 0
-3326 3325 0
-3326 -3323 0
c Var 'aux824' direct represents '4' with '-3325'
3320 3322 3324 3326 -3325 0
c Encoding variable: aux825 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3327'
c Var 'aux825' direct represents '0' with '3327'
c Var 'aux825' order represents '1' with '3328'
-3327 3328 0
c Var 'aux825' direct represents '1' with '3329'
3327 -3328 3329 0
-3329 3328 0
-3329 -3327 0
c Var 'aux825' direct represents '2' with '-3328'
3327 3329 -3328 0
c Encoding variable: aux826 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3330'
c Var 'aux826' direct represents '0' with '3330'
c Var 'aux826' order represents '1' with '3331'
-3330 3331 0
c Var 'aux826' direct represents '1' with '3332'
3330 -3331 3332 0
-3332 3331 0
-3332 -3330 0
c Var 'aux826' direct represents '2' with '-3331'
3330 3332 -3331 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3333'
c Var 'aux827' direct represents '0' with '3333'
c Var 'aux827' order represents '1' with '3334'
-3333 3334 0
c Var 'aux827' direct represents '1' with '3335'
3333 -3334 3335 0
-3335 3334 0
-3335 -3333 0
c Var 'aux827' direct represents '2' with '-3334'
3333 3335 -3334 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3336'
c Var 'aux828' direct represents '0' with '3336'
c Var 'aux828' order represents '1' with '3337'
-3336 3337 0
c Var 'aux828' direct represents '1' with '3338'
3336 -3337 3338 0
-3338 3337 0
-3338 -3336 0
c Var 'aux828' direct represents '2' with '-3337'
3336 3338 -3337 0
c Encoding variable: aux829 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux828))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3339'
c Var 'aux829' direct represents '0' with '3339'
c Var 'aux829' order represents '1' with '3340'
-3339 3340 0
c Var 'aux829' direct represents '1' with '3341'
3339 -3340 3341 0
-3341 3340 0
-3341 -3339 0
c Var 'aux829' order represents '2' with '3342'
-3340 3342 0
c Var 'aux829' direct represents '2' with '3343'
3340 -3342 3343 0
-3343 3342 0
-3343 -3340 0
c Var 'aux829' direct represents '3' with '-3342'
3339 3341 3343 -3342 0
c Encoding variable: aux830 with domain: int(0..4) (representing constraint (aux825 + aux827))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3344'
c Var 'aux830' direct represents '0' with '3344'
c Var 'aux830' order represents '1' with '3345'
-3344 3345 0
c Var 'aux830' direct represents '1' with '3346'
3344 -3345 3346 0
-3346 3345 0
-3346 -3344 0
c Var 'aux830' order represents '2' with '3347'
-3345 3347 0
c Var 'aux830' direct represents '2' with '3348'
3345 -3347 3348 0
-3348 3347 0
-3348 -3345 0
c Var 'aux830' order represents '3' with '3349'
-3347 3349 0
c Var 'aux830' direct represents '3' with '3350'
3347 -3349 3350 0
-3350 3349 0
-3350 -3347 0
c Var 'aux830' direct represents '4' with '-3349'
3344 3346 3348 3350 -3349 0
c Encoding variable: aux831 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3351'
c Var 'aux831' direct represents '0' with '3351'
c Var 'aux831' order represents '1' with '3352'
-3351 3352 0
c Var 'aux831' direct represents '1' with '3353'
3351 -3352 3353 0
-3353 3352 0
-3353 -3351 0
c Var 'aux831' direct represents '2' with '-3352'
3351 3353 -3352 0
c Encoding variable: aux832 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3354'
c Var 'aux832' direct represents '0' with '3354'
c Var 'aux832' order represents '1' with '3355'
-3354 3355 0
c Var 'aux832' direct represents '1' with '3356'
3354 -3355 3356 0
-3356 3355 0
-3356 -3354 0
c Var 'aux832' direct represents '2' with '-3355'
3354 3356 -3355 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3357'
c Var 'aux833' direct represents '0' with '3357'
c Var 'aux833' order represents '1' with '3358'
-3357 3358 0
c Var 'aux833' direct represents '1' with '3359'
3357 -3358 3359 0
-3359 3358 0
-3359 -3357 0
c Var 'aux833' direct represents '2' with '-3358'
3357 3359 -3358 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3360'
c Var 'aux834' direct represents '0' with '3360'
c Var 'aux834' order represents '1' with '3361'
-3360 3361 0
c Var 'aux834' direct represents '1' with '3362'
3360 -3361 3362 0
-3362 3361 0
-3362 -3360 0
c Var 'aux834' direct represents '2' with '-3361'
3360 3362 -3361 0
c Encoding variable: aux835 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux834))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3363'
c Var 'aux835' direct represents '0' with '3363'
c Var 'aux835' order represents '1' with '3364'
-3363 3364 0
c Var 'aux835' direct represents '1' with '3365'
3363 -3364 3365 0
-3365 3364 0
-3365 -3363 0
c Var 'aux835' order represents '2' with '3366'
-3364 3366 0
c Var 'aux835' direct represents '2' with '3367'
3364 -3366 3367 0
-3367 3366 0
-3367 -3364 0
c Var 'aux835' direct represents '3' with '-3366'
3363 3365 3367 -3366 0
c Encoding variable: aux836 with domain: int(0..4) (representing constraint (aux831 + aux833))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3368'
c Var 'aux836' direct represents '0' with '3368'
c Var 'aux836' order represents '1' with '3369'
-3368 3369 0
c Var 'aux836' direct represents '1' with '3370'
3368 -3369 3370 0
-3370 3369 0
-3370 -3368 0
c Var 'aux836' order represents '2' with '3371'
-3369 3371 0
c Var 'aux836' direct represents '2' with '3372'
3369 -3371 3372 0
-3372 3371 0
-3372 -3369 0
c Var 'aux836' order represents '3' with '3373'
-3371 3373 0
c Var 'aux836' direct represents '3' with '3374'
3371 -3373 3374 0
-3374 3373 0
-3374 -3371 0
c Var 'aux836' direct represents '4' with '-3373'
3368 3370 3372 3374 -3373 0
c Encoding variable: aux837 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3375'
c Var 'aux837' direct represents '0' with '3375'
c Var 'aux837' order represents '1' with '3376'
-3375 3376 0
c Var 'aux837' direct represents '1' with '3377'
3375 -3376 3377 0
-3377 3376 0
-3377 -3375 0
c Var 'aux837' direct represents '2' with '-3376'
3375 3377 -3376 0
c Encoding variable: aux838 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3378'
c Var 'aux838' direct represents '0' with '3378'
c Var 'aux838' order represents '1' with '3379'
-3378 3379 0
c Var 'aux838' direct represents '1' with '3380'
3378 -3379 3380 0
-3380 3379 0
-3380 -3378 0
c Var 'aux838' direct represents '2' with '-3379'
3378 3380 -3379 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3381'
c Var 'aux839' direct represents '0' with '3381'
c Var 'aux839' order represents '1' with '3382'
-3381 3382 0
c Var 'aux839' direct represents '1' with '3383'
3381 -3382 3383 0
-3383 3382 0
-3383 -3381 0
c Var 'aux839' direct represents '2' with '-3382'
3381 3383 -3382 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3384'
c Var 'aux840' direct represents '0' with '3384'
c Var 'aux840' order represents '1' with '3385'
-3384 3385 0
c Var 'aux840' direct represents '1' with '3386'
3384 -3385 3386 0
-3386 3385 0
-3386 -3384 0
c Var 'aux840' direct represents '2' with '-3385'
3384 3386 -3385 0
c Encoding variable: aux841 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux840))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3387'
c Var 'aux841' direct represents '0' with '3387'
c Var 'aux841' order represents '1' with '3388'
-3387 3388 0
c Var 'aux841' direct represents '1' with '3389'
3387 -3388 3389 0
-3389 3388 0
-3389 -3387 0
c Var 'aux841' order represents '2' with '3390'
-3388 3390 0
c Var 'aux841' direct represents '2' with '3391'
3388 -3390 3391 0
-3391 3390 0
-3391 -3388 0
c Var 'aux841' direct represents '3' with '-3390'
3387 3389 3391 -3390 0
c Encoding variable: aux842 with domain: int(0..4) (representing constraint (aux837 + aux839))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3392'
c Var 'aux842' direct represents '0' with '3392'
c Var 'aux842' order represents '1' with '3393'
-3392 3393 0
c Var 'aux842' direct represents '1' with '3394'
3392 -3393 3394 0
-3394 3393 0
-3394 -3392 0
c Var 'aux842' order represents '2' with '3395'
-3393 3395 0
c Var 'aux842' direct represents '2' with '3396'
3393 -3395 3396 0
-3396 3395 0
-3396 -3393 0
c Var 'aux842' order represents '3' with '3397'
-3395 3397 0
c Var 'aux842' direct represents '3' with '3398'
3395 -3397 3398 0
-3398 3397 0
-3398 -3395 0
c Var 'aux842' direct represents '4' with '-3397'
3392 3394 3396 3398 -3397 0
c Encoding variable: aux843 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3399'
c Var 'aux843' direct represents '0' with '3399'
c Var 'aux843' order represents '1' with '3400'
-3399 3400 0
c Var 'aux843' direct represents '1' with '3401'
3399 -3400 3401 0
-3401 3400 0
-3401 -3399 0
c Var 'aux843' direct represents '2' with '-3400'
3399 3401 -3400 0
c Encoding variable: aux844 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3402'
c Var 'aux844' direct represents '0' with '3402'
c Var 'aux844' order represents '1' with '3403'
-3402 3403 0
c Var 'aux844' direct represents '1' with '3404'
3402 -3403 3404 0
-3404 3403 0
-3404 -3402 0
c Var 'aux844' direct represents '2' with '-3403'
3402 3404 -3403 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3405'
c Var 'aux845' direct represents '0' with '3405'
c Var 'aux845' order represents '1' with '3406'
-3405 3406 0
c Var 'aux845' direct represents '1' with '3407'
3405 -3406 3407 0
-3407 3406 0
-3407 -3405 0
c Var 'aux845' direct represents '2' with '-3406'
3405 3407 -3406 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3408'
c Var 'aux846' direct represents '0' with '3408'
c Var 'aux846' order represents '1' with '3409'
-3408 3409 0
c Var 'aux846' direct represents '1' with '3410'
3408 -3409 3410 0
-3410 3409 0
-3410 -3408 0
c Var 'aux846' direct represents '2' with '-3409'
3408 3410 -3409 0
c Encoding variable: aux847 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux846))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3411'
c Var 'aux847' direct represents '0' with '3411'
c Var 'aux847' order represents '1' with '3412'
-3411 3412 0
c Var 'aux847' direct represents '1' with '3413'
3411 -3412 3413 0
-3413 3412 0
-3413 -3411 0
c Var 'aux847' order represents '2' with '3414'
-3412 3414 0
c Var 'aux847' direct represents '2' with '3415'
3412 -3414 3415 0
-3415 3414 0
-3415 -3412 0
c Var 'aux847' direct represents '3' with '-3414'
3411 3413 3415 -3414 0
c Encoding variable: aux848 with domain: int(0..4) (representing constraint (aux843 + aux845))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3416'
c Var 'aux848' direct represents '0' with '3416'
c Var 'aux848' order represents '1' with '3417'
-3416 3417 0
c Var 'aux848' direct represents '1' with '3418'
3416 -3417 3418 0
-3418 3417 0
-3418 -3416 0
c Var 'aux848' order represents '2' with '3419'
-3417 3419 0
c Var 'aux848' direct represents '2' with '3420'
3417 -3419 3420 0
-3420 3419 0
-3420 -3417 0
c Var 'aux848' order represents '3' with '3421'
-3419 3421 0
c Var 'aux848' direct represents '3' with '3422'
3419 -3421 3422 0
-3422 3421 0
-3422 -3419 0
c Var 'aux848' direct represents '4' with '-3421'
3416 3418 3420 3422 -3421 0
c Encoding variable: aux849 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3423'
c Var 'aux849' direct represents '0' with '3423'
c Var 'aux849' order represents '1' with '3424'
-3423 3424 0
c Var 'aux849' direct represents '1' with '3425'
3423 -3424 3425 0
-3425 3424 0
-3425 -3423 0
c Var 'aux849' direct represents '2' with '-3424'
3423 3425 -3424 0
c Encoding variable: aux850 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3426'
c Var 'aux850' direct represents '0' with '3426'
c Var 'aux850' order represents '1' with '3427'
-3426 3427 0
c Var 'aux850' direct represents '1' with '3428'
3426 -3427 3428 0
-3428 3427 0
-3428 -3426 0
c Var 'aux850' direct represents '2' with '-3427'
3426 3428 -3427 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3429'
c Var 'aux851' direct represents '0' with '3429'
c Var 'aux851' order represents '1' with '3430'
-3429 3430 0
c Var 'aux851' direct represents '1' with '3431'
3429 -3430 3431 0
-3431 3430 0
-3431 -3429 0
c Var 'aux851' direct represents '2' with '-3430'
3429 3431 -3430 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3432'
c Var 'aux852' direct represents '0' with '3432'
c Var 'aux852' order represents '1' with '3433'
-3432 3433 0
c Var 'aux852' direct represents '1' with '3434'
3432 -3433 3434 0
-3434 3433 0
-3434 -3432 0
c Var 'aux852' direct represents '2' with '-3433'
3432 3434 -3433 0
c Encoding variable: aux853 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux852))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3435'
c Var 'aux853' direct represents '0' with '3435'
c Var 'aux853' order represents '1' with '3436'
-3435 3436 0
c Var 'aux853' direct represents '1' with '3437'
3435 -3436 3437 0
-3437 3436 0
-3437 -3435 0
c Var 'aux853' order represents '2' with '3438'
-3436 3438 0
c Var 'aux853' direct represents '2' with '3439'
3436 -3438 3439 0
-3439 3438 0
-3439 -3436 0
c Var 'aux853' direct represents '3' with '-3438'
3435 3437 3439 -3438 0
c Encoding variable: aux854 with domain: int(0..4) (representing constraint (aux849 + aux851))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3440'
c Var 'aux854' direct represents '0' with '3440'
c Var 'aux854' order represents '1' with '3441'
-3440 3441 0
c Var 'aux854' direct represents '1' with '3442'
3440 -3441 3442 0
-3442 3441 0
-3442 -3440 0
c Var 'aux854' order represents '2' with '3443'
-3441 3443 0
c Var 'aux854' direct represents '2' with '3444'
3441 -3443 3444 0
-3444 3443 0
-3444 -3441 0
c Var 'aux854' order represents '3' with '3445'
-3443 3445 0
c Var 'aux854' direct represents '3' with '3446'
3443 -3445 3446 0
-3446 3445 0
-3446 -3443 0
c Var 'aux854' direct represents '4' with '-3445'
3440 3442 3444 3446 -3445 0
c Encoding variable: aux855 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3447'
c Var 'aux855' direct represents '0' with '3447'
c Var 'aux855' order represents '1' with '3448'
-3447 3448 0
c Var 'aux855' direct represents '1' with '3449'
3447 -3448 3449 0
-3449 3448 0
-3449 -3447 0
c Var 'aux855' direct represents '2' with '-3448'
3447 3449 -3448 0
c Encoding variable: aux856 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3450'
c Var 'aux856' direct represents '0' with '3450'
c Var 'aux856' order represents '1' with '3451'
-3450 3451 0
c Var 'aux856' direct represents '1' with '3452'
3450 -3451 3452 0
-3452 3451 0
-3452 -3450 0
c Var 'aux856' direct represents '2' with '-3451'
3450 3452 -3451 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3453'
c Var 'aux857' direct represents '0' with '3453'
c Var 'aux857' order represents '1' with '3454'
-3453 3454 0
c Var 'aux857' direct represents '1' with '3455'
3453 -3454 3455 0
-3455 3454 0
-3455 -3453 0
c Var 'aux857' direct represents '2' with '-3454'
3453 3455 -3454 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3456'
c Var 'aux858' direct represents '0' with '3456'
c Var 'aux858' order represents '1' with '3457'
-3456 3457 0
c Var 'aux858' direct represents '1' with '3458'
3456 -3457 3458 0
-3458 3457 0
-3458 -3456 0
c Var 'aux858' direct represents '2' with '-3457'
3456 3458 -3457 0
c Encoding variable: aux859 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux858))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3459'
c Var 'aux859' direct represents '0' with '3459'
c Var 'aux859' order represents '1' with '3460'
-3459 3460 0
c Var 'aux859' direct represents '1' with '3461'
3459 -3460 3461 0
-3461 3460 0
-3461 -3459 0
c Var 'aux859' order represents '2' with '3462'
-3460 3462 0
c Var 'aux859' direct represents '2' with '3463'
3460 -3462 3463 0
-3463 3462 0
-3463 -3460 0
c Var 'aux859' direct represents '3' with '-3462'
3459 3461 3463 -3462 0
c Encoding variable: aux860 with domain: int(0..4) (representing constraint (aux855 + aux857))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3464'
c Var 'aux860' direct represents '0' with '3464'
c Var 'aux860' order represents '1' with '3465'
-3464 3465 0
c Var 'aux860' direct represents '1' with '3466'
3464 -3465 3466 0
-3466 3465 0
-3466 -3464 0
c Var 'aux860' order represents '2' with '3467'
-3465 3467 0
c Var 'aux860' direct represents '2' with '3468'
3465 -3467 3468 0
-3468 3467 0
-3468 -3465 0
c Var 'aux860' order represents '3' with '3469'
-3467 3469 0
c Var 'aux860' direct represents '3' with '3470'
3467 -3469 3470 0
-3470 3469 0
-3470 -3467 0
c Var 'aux860' direct represents '4' with '-3469'
3464 3466 3468 3470 -3469 0
c Encoding variable: aux861 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3471'
c Var 'aux861' direct represents '0' with '3471'
c Var 'aux861' order represents '1' with '3472'
-3471 3472 0
c Var 'aux861' direct represents '1' with '3473'
3471 -3472 3473 0
-3473 3472 0
-3473 -3471 0
c Var 'aux861' direct represents '2' with '-3472'
3471 3473 -3472 0
c Encoding variable: aux862 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3474'
c Var 'aux862' direct represents '0' with '3474'
c Var 'aux862' order represents '1' with '3475'
-3474 3475 0
c Var 'aux862' direct represents '1' with '3476'
3474 -3475 3476 0
-3476 3475 0
-3476 -3474 0
c Var 'aux862' direct represents '2' with '-3475'
3474 3476 -3475 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3477'
c Var 'aux863' direct represents '0' with '3477'
c Var 'aux863' order represents '1' with '3478'
-3477 3478 0
c Var 'aux863' direct represents '1' with '3479'
3477 -3478 3479 0
-3479 3478 0
-3479 -3477 0
c Var 'aux863' direct represents '2' with '-3478'
3477 3479 -3478 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3480'
c Var 'aux864' direct represents '0' with '3480'
c Var 'aux864' order represents '1' with '3481'
-3480 3481 0
c Var 'aux864' direct represents '1' with '3482'
3480 -3481 3482 0
-3482 3481 0
-3482 -3480 0
c Var 'aux864' direct represents '2' with '-3481'
3480 3482 -3481 0
c Encoding variable: aux865 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux864))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3483'
c Var 'aux865' direct represents '0' with '3483'
c Var 'aux865' order represents '1' with '3484'
-3483 3484 0
c Var 'aux865' direct represents '1' with '3485'
3483 -3484 3485 0
-3485 3484 0
-3485 -3483 0
c Var 'aux865' order represents '2' with '3486'
-3484 3486 0
c Var 'aux865' direct represents '2' with '3487'
3484 -3486 3487 0
-3487 3486 0
-3487 -3484 0
c Var 'aux865' direct represents '3' with '-3486'
3483 3485 3487 -3486 0
c Encoding variable: aux866 with domain: int(0..4) (representing constraint (aux861 + aux863))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3488'
c Var 'aux866' direct represents '0' with '3488'
c Var 'aux866' order represents '1' with '3489'
-3488 3489 0
c Var 'aux866' direct represents '1' with '3490'
3488 -3489 3490 0
-3490 3489 0
-3490 -3488 0
c Var 'aux866' order represents '2' with '3491'
-3489 3491 0
c Var 'aux866' direct represents '2' with '3492'
3489 -3491 3492 0
-3492 3491 0
-3492 -3489 0
c Var 'aux866' order represents '3' with '3493'
-3491 3493 0
c Var 'aux866' direct represents '3' with '3494'
3491 -3493 3494 0
-3494 3493 0
-3494 -3491 0
c Var 'aux866' direct represents '4' with '-3493'
3488 3490 3492 3494 -3493 0
c Encoding variable: aux867 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3495'
c Var 'aux867' direct represents '0' with '3495'
c Var 'aux867' order represents '1' with '3496'
-3495 3496 0
c Var 'aux867' direct represents '1' with '3497'
3495 -3496 3497 0
-3497 3496 0
-3497 -3495 0
c Var 'aux867' direct represents '2' with '-3496'
3495 3497 -3496 0
c Encoding variable: aux868 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3498'
c Var 'aux868' direct represents '0' with '3498'
c Var 'aux868' order represents '1' with '3499'
-3498 3499 0
c Var 'aux868' direct represents '1' with '3500'
3498 -3499 3500 0
-3500 3499 0
-3500 -3498 0
c Var 'aux868' direct represents '2' with '-3499'
3498 3500 -3499 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3501'
c Var 'aux869' direct represents '0' with '3501'
c Var 'aux869' order represents '1' with '3502'
-3501 3502 0
c Var 'aux869' direct represents '1' with '3503'
3501 -3502 3503 0
-3503 3502 0
-3503 -3501 0
c Var 'aux869' direct represents '2' with '-3502'
3501 3503 -3502 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3504'
c Var 'aux870' direct represents '0' with '3504'
c Var 'aux870' order represents '1' with '3505'
-3504 3505 0
c Var 'aux870' direct represents '1' with '3506'
3504 -3505 3506 0
-3506 3505 0
-3506 -3504 0
c Var 'aux870' direct represents '2' with '-3505'
3504 3506 -3505 0
c Encoding variable: aux871 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux870))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3507'
c Var 'aux871' direct represents '0' with '3507'
c Var 'aux871' order represents '1' with '3508'
-3507 3508 0
c Var 'aux871' direct represents '1' with '3509'
3507 -3508 3509 0
-3509 3508 0
-3509 -3507 0
c Var 'aux871' order represents '2' with '3510'
-3508 3510 0
c Var 'aux871' direct represents '2' with '3511'
3508 -3510 3511 0
-3511 3510 0
-3511 -3508 0
c Var 'aux871' direct represents '3' with '-3510'
3507 3509 3511 -3510 0
c Encoding variable: aux872 with domain: int(0..4) (representing constraint (aux867 + aux869))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3512'
c Var 'aux872' direct represents '0' with '3512'
c Var 'aux872' order represents '1' with '3513'
-3512 3513 0
c Var 'aux872' direct represents '1' with '3514'
3512 -3513 3514 0
-3514 3513 0
-3514 -3512 0
c Var 'aux872' order represents '2' with '3515'
-3513 3515 0
c Var 'aux872' direct represents '2' with '3516'
3513 -3515 3516 0
-3516 3515 0
-3516 -3513 0
c Var 'aux872' order represents '3' with '3517'
-3515 3517 0
c Var 'aux872' direct represents '3' with '3518'
3515 -3517 3518 0
-3518 3517 0
-3518 -3515 0
c Var 'aux872' direct represents '4' with '-3517'
3512 3514 3516 3518 -3517 0
c Encoding variable: aux873 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3519'
c Var 'aux873' direct represents '0' with '3519'
c Var 'aux873' order represents '1' with '3520'
-3519 3520 0
c Var 'aux873' direct represents '1' with '3521'
3519 -3520 3521 0
-3521 3520 0
-3521 -3519 0
c Var 'aux873' direct represents '2' with '-3520'
3519 3521 -3520 0
c Encoding variable: aux874 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3522'
c Var 'aux874' direct represents '0' with '3522'
c Var 'aux874' order represents '1' with '3523'
-3522 3523 0
c Var 'aux874' direct represents '1' with '3524'
3522 -3523 3524 0
-3524 3523 0
-3524 -3522 0
c Var 'aux874' direct represents '2' with '-3523'
3522 3524 -3523 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3525'
c Var 'aux875' direct represents '0' with '3525'
c Var 'aux875' order represents '1' with '3526'
-3525 3526 0
c Var 'aux875' direct represents '1' with '3527'
3525 -3526 3527 0
-3527 3526 0
-3527 -3525 0
c Var 'aux875' direct represents '2' with '-3526'
3525 3527 -3526 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3528'
c Var 'aux876' direct represents '0' with '3528'
c Var 'aux876' order represents '1' with '3529'
-3528 3529 0
c Var 'aux876' direct represents '1' with '3530'
3528 -3529 3530 0
-3530 3529 0
-3530 -3528 0
c Var 'aux876' direct represents '2' with '-3529'
3528 3530 -3529 0
c Encoding variable: aux877 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux876))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3531'
c Var 'aux877' direct represents '0' with '3531'
c Var 'aux877' order represents '1' with '3532'
-3531 3532 0
c Var 'aux877' direct represents '1' with '3533'
3531 -3532 3533 0
-3533 3532 0
-3533 -3531 0
c Var 'aux877' order represents '2' with '3534'
-3532 3534 0
c Var 'aux877' direct represents '2' with '3535'
3532 -3534 3535 0
-3535 3534 0
-3535 -3532 0
c Var 'aux877' direct represents '3' with '-3534'
3531 3533 3535 -3534 0
c Encoding variable: aux878 with domain: int(0..4) (representing constraint (aux873 + aux875))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3536'
c Var 'aux878' direct represents '0' with '3536'
c Var 'aux878' order represents '1' with '3537'
-3536 3537 0
c Var 'aux878' direct represents '1' with '3538'
3536 -3537 3538 0
-3538 3537 0
-3538 -3536 0
c Var 'aux878' order represents '2' with '3539'
-3537 3539 0
c Var 'aux878' direct represents '2' with '3540'
3537 -3539 3540 0
-3540 3539 0
-3540 -3537 0
c Var 'aux878' order represents '3' with '3541'
-3539 3541 0
c Var 'aux878' direct represents '3' with '3542'
3539 -3541 3542 0
-3542 3541 0
-3542 -3539 0
c Var 'aux878' direct represents '4' with '-3541'
3536 3538 3540 3542 -3541 0
c Encoding variable: aux879 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3543'
c Var 'aux879' direct represents '0' with '3543'
c Var 'aux879' order represents '1' with '3544'
-3543 3544 0
c Var 'aux879' direct represents '1' with '3545'
3543 -3544 3545 0
-3545 3544 0
-3545 -3543 0
c Var 'aux879' direct represents '2' with '-3544'
3543 3545 -3544 0
c Encoding variable: aux880 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3546'
c Var 'aux880' direct represents '0' with '3546'
c Var 'aux880' order represents '1' with '3547'
-3546 3547 0
c Var 'aux880' direct represents '1' with '3548'
3546 -3547 3548 0
-3548 3547 0
-3548 -3546 0
c Var 'aux880' direct represents '2' with '-3547'
3546 3548 -3547 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3549'
c Var 'aux881' direct represents '0' with '3549'
c Var 'aux881' order represents '1' with '3550'
-3549 3550 0
c Var 'aux881' direct represents '1' with '3551'
3549 -3550 3551 0
-3551 3550 0
-3551 -3549 0
c Var 'aux881' direct represents '2' with '-3550'
3549 3551 -3550 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3552'
c Var 'aux882' direct represents '0' with '3552'
c Var 'aux882' order represents '1' with '3553'
-3552 3553 0
c Var 'aux882' direct represents '1' with '3554'
3552 -3553 3554 0
-3554 3553 0
-3554 -3552 0
c Var 'aux882' direct represents '2' with '-3553'
3552 3554 -3553 0
c Encoding variable: aux883 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux882))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3555'
c Var 'aux883' direct represents '0' with '3555'
c Var 'aux883' order represents '1' with '3556'
-3555 3556 0
c Var 'aux883' direct represents '1' with '3557'
3555 -3556 3557 0
-3557 3556 0
-3557 -3555 0
c Var 'aux883' order represents '2' with '3558'
-3556 3558 0
c Var 'aux883' direct represents '2' with '3559'
3556 -3558 3559 0
-3559 3558 0
-3559 -3556 0
c Var 'aux883' direct represents '3' with '-3558'
3555 3557 3559 -3558 0
c Encoding variable: aux884 with domain: int(0..4) (representing constraint (aux879 + aux881))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3560'
c Var 'aux884' direct represents '0' with '3560'
c Var 'aux884' order represents '1' with '3561'
-3560 3561 0
c Var 'aux884' direct represents '1' with '3562'
3560 -3561 3562 0
-3562 3561 0
-3562 -3560 0
c Var 'aux884' order represents '2' with '3563'
-3561 3563 0
c Var 'aux884' direct represents '2' with '3564'
3561 -3563 3564 0
-3564 3563 0
-3564 -3561 0
c Var 'aux884' order represents '3' with '3565'
-3563 3565 0
c Var 'aux884' direct represents '3' with '3566'
3563 -3565 3566 0
-3566 3565 0
-3566 -3563 0
c Var 'aux884' direct represents '4' with '-3565'
3560 3562 3564 3566 -3565 0
c Encoding variable: aux885 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3567'
c Var 'aux885' direct represents '0' with '3567'
c Var 'aux885' order represents '1' with '3568'
-3567 3568 0
c Var 'aux885' direct represents '1' with '3569'
3567 -3568 3569 0
-3569 3568 0
-3569 -3567 0
c Var 'aux885' direct represents '2' with '-3568'
3567 3569 -3568 0
c Encoding variable: aux886 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3570'
c Var 'aux886' direct represents '0' with '3570'
c Var 'aux886' order represents '1' with '3571'
-3570 3571 0
c Var 'aux886' direct represents '1' with '3572'
3570 -3571 3572 0
-3572 3571 0
-3572 -3570 0
c Var 'aux886' direct represents '2' with '-3571'
3570 3572 -3571 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3573'
c Var 'aux887' direct represents '0' with '3573'
c Var 'aux887' order represents '1' with '3574'
-3573 3574 0
c Var 'aux887' direct represents '1' with '3575'
3573 -3574 3575 0
-3575 3574 0
-3575 -3573 0
c Var 'aux887' direct represents '2' with '-3574'
3573 3575 -3574 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3576'
c Var 'aux888' direct represents '0' with '3576'
c Var 'aux888' order represents '1' with '3577'
-3576 3577 0
c Var 'aux888' direct represents '1' with '3578'
3576 -3577 3578 0
-3578 3577 0
-3578 -3576 0
c Var 'aux888' direct represents '2' with '-3577'
3576 3578 -3577 0
c Encoding variable: aux889 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux888))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3579'
c Var 'aux889' direct represents '0' with '3579'
c Var 'aux889' order represents '1' with '3580'
-3579 3580 0
c Var 'aux889' direct represents '1' with '3581'
3579 -3580 3581 0
-3581 3580 0
-3581 -3579 0
c Var 'aux889' order represents '2' with '3582'
-3580 3582 0
c Var 'aux889' direct represents '2' with '3583'
3580 -3582 3583 0
-3583 3582 0
-3583 -3580 0
c Var 'aux889' direct represents '3' with '-3582'
3579 3581 3583 -3582 0
c Encoding variable: aux890 with domain: int(0..4) (representing constraint (aux885 + aux887))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3584'
c Var 'aux890' direct represents '0' with '3584'
c Var 'aux890' order represents '1' with '3585'
-3584 3585 0
c Var 'aux890' direct represents '1' with '3586'
3584 -3585 3586 0
-3586 3585 0
-3586 -3584 0
c Var 'aux890' order represents '2' with '3587'
-3585 3587 0
c Var 'aux890' direct represents '2' with '3588'
3585 -3587 3588 0
-3588 3587 0
-3588 -3585 0
c Var 'aux890' order represents '3' with '3589'
-3587 3589 0
c Var 'aux890' direct represents '3' with '3590'
3587 -3589 3590 0
-3590 3589 0
-3590 -3587 0
c Var 'aux890' direct represents '4' with '-3589'
3584 3586 3588 3590 -3589 0
c Encoding variable: aux891 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3591'
c Var 'aux891' direct represents '0' with '3591'
c Var 'aux891' order represents '1' with '3592'
-3591 3592 0
c Var 'aux891' direct represents '1' with '3593'
3591 -3592 3593 0
-3593 3592 0
-3593 -3591 0
c Var 'aux891' direct represents '2' with '-3592'
3591 3593 -3592 0
c Encoding variable: aux892 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3594'
c Var 'aux892' direct represents '0' with '3594'
c Var 'aux892' order represents '1' with '3595'
-3594 3595 0
c Var 'aux892' direct represents '1' with '3596'
3594 -3595 3596 0
-3596 3595 0
-3596 -3594 0
c Var 'aux892' direct represents '2' with '-3595'
3594 3596 -3595 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3597'
c Var 'aux893' direct represents '0' with '3597'
c Var 'aux893' order represents '1' with '3598'
-3597 3598 0
c Var 'aux893' direct represents '1' with '3599'
3597 -3598 3599 0
-3599 3598 0
-3599 -3597 0
c Var 'aux893' direct represents '2' with '-3598'
3597 3599 -3598 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3600'
c Var 'aux894' direct represents '0' with '3600'
c Var 'aux894' order represents '1' with '3601'
-3600 3601 0
c Var 'aux894' direct represents '1' with '3602'
3600 -3601 3602 0
-3602 3601 0
-3602 -3600 0
c Var 'aux894' direct represents '2' with '-3601'
3600 3602 -3601 0
c Encoding variable: aux895 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux894))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3603'
c Var 'aux895' direct represents '0' with '3603'
c Var 'aux895' order represents '1' with '3604'
-3603 3604 0
c Var 'aux895' direct represents '1' with '3605'
3603 -3604 3605 0
-3605 3604 0
-3605 -3603 0
c Var 'aux895' order represents '2' with '3606'
-3604 3606 0
c Var 'aux895' direct represents '2' with '3607'
3604 -3606 3607 0
-3607 3606 0
-3607 -3604 0
c Var 'aux895' direct represents '3' with '-3606'
3603 3605 3607 -3606 0
c Encoding variable: aux896 with domain: int(0..4) (representing constraint (aux891 + aux893))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3608'
c Var 'aux896' direct represents '0' with '3608'
c Var 'aux896' order represents '1' with '3609'
-3608 3609 0
c Var 'aux896' direct represents '1' with '3610'
3608 -3609 3610 0
-3610 3609 0
-3610 -3608 0
c Var 'aux896' order represents '2' with '3611'
-3609 3611 0
c Var 'aux896' direct represents '2' with '3612'
3609 -3611 3612 0
-3612 3611 0
-3612 -3609 0
c Var 'aux896' order represents '3' with '3613'
-3611 3613 0
c Var 'aux896' direct represents '3' with '3614'
3611 -3613 3614 0
-3614 3613 0
-3614 -3611 0
c Var 'aux896' direct represents '4' with '-3613'
3608 3610 3612 3614 -3613 0
c Encoding variable: aux897 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3615'
c Var 'aux897' direct represents '0' with '3615'
c Var 'aux897' order represents '1' with '3616'
-3615 3616 0
c Var 'aux897' direct represents '1' with '3617'
3615 -3616 3617 0
-3617 3616 0
-3617 -3615 0
c Var 'aux897' direct represents '2' with '-3616'
3615 3617 -3616 0
c Encoding variable: aux898 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3618'
c Var 'aux898' direct represents '0' with '3618'
c Var 'aux898' order represents '1' with '3619'
-3618 3619 0
c Var 'aux898' direct represents '1' with '3620'
3618 -3619 3620 0
-3620 3619 0
-3620 -3618 0
c Var 'aux898' direct represents '2' with '-3619'
3618 3620 -3619 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3621'
c Var 'aux899' direct represents '0' with '3621'
c Var 'aux899' order represents '1' with '3622'
-3621 3622 0
c Var 'aux899' direct represents '1' with '3623'
3621 -3622 3623 0
-3623 3622 0
-3623 -3621 0
c Var 'aux899' direct represents '2' with '-3622'
3621 3623 -3622 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3624'
c Var 'aux900' direct represents '0' with '3624'
c Var 'aux900' order represents '1' with '3625'
-3624 3625 0
c Var 'aux900' direct represents '1' with '3626'
3624 -3625 3626 0
-3626 3625 0
-3626 -3624 0
c Var 'aux900' direct represents '2' with '-3625'
3624 3626 -3625 0
c Encoding variable: aux901 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux900))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3627'
c Var 'aux901' direct represents '0' with '3627'
c Var 'aux901' order represents '1' with '3628'
-3627 3628 0
c Var 'aux901' direct represents '1' with '3629'
3627 -3628 3629 0
-3629 3628 0
-3629 -3627 0
c Var 'aux901' order represents '2' with '3630'
-3628 3630 0
c Var 'aux901' direct represents '2' with '3631'
3628 -3630 3631 0
-3631 3630 0
-3631 -3628 0
c Var 'aux901' direct represents '3' with '-3630'
3627 3629 3631 -3630 0
c Encoding variable: aux902 with domain: int(0..4) (representing constraint (aux897 + aux899))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3632'
c Var 'aux902' direct represents '0' with '3632'
c Var 'aux902' order represents '1' with '3633'
-3632 3633 0
c Var 'aux902' direct represents '1' with '3634'
3632 -3633 3634 0
-3634 3633 0
-3634 -3632 0
c Var 'aux902' order represents '2' with '3635'
-3633 3635 0
c Var 'aux902' direct represents '2' with '3636'
3633 -3635 3636 0
-3636 3635 0
-3636 -3633 0
c Var 'aux902' order represents '3' with '3637'
-3635 3637 0
c Var 'aux902' direct represents '3' with '3638'
3635 -3637 3638 0
-3638 3637 0
-3638 -3635 0
c Var 'aux902' direct represents '4' with '-3637'
3632 3634 3636 3638 -3637 0
c Encoding variable: aux903 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3639'
c Var 'aux903' direct represents '0' with '3639'
c Var 'aux903' order represents '1' with '3640'
-3639 3640 0
c Var 'aux903' direct represents '1' with '3641'
3639 -3640 3641 0
-3641 3640 0
-3641 -3639 0
c Var 'aux903' direct represents '2' with '-3640'
3639 3641 -3640 0
c Encoding variable: aux904 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3642'
c Var 'aux904' direct represents '0' with '3642'
c Var 'aux904' order represents '1' with '3643'
-3642 3643 0
c Var 'aux904' direct represents '1' with '3644'
3642 -3643 3644 0
-3644 3643 0
-3644 -3642 0
c Var 'aux904' direct represents '2' with '-3643'
3642 3644 -3643 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3645'
c Var 'aux905' direct represents '0' with '3645'
c Var 'aux905' order represents '1' with '3646'
-3645 3646 0
c Var 'aux905' direct represents '1' with '3647'
3645 -3646 3647 0
-3647 3646 0
-3647 -3645 0
c Var 'aux905' direct represents '2' with '-3646'
3645 3647 -3646 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3648'
c Var 'aux906' direct represents '0' with '3648'
c Var 'aux906' order represents '1' with '3649'
-3648 3649 0
c Var 'aux906' direct represents '1' with '3650'
3648 -3649 3650 0
-3650 3649 0
-3650 -3648 0
c Var 'aux906' direct represents '2' with '-3649'
3648 3650 -3649 0
c Encoding variable: aux907 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux906))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3651'
c Var 'aux907' direct represents '0' with '3651'
c Var 'aux907' order represents '1' with '3652'
-3651 3652 0
c Var 'aux907' direct represents '1' with '3653'
3651 -3652 3653 0
-3653 3652 0
-3653 -3651 0
c Var 'aux907' order represents '2' with '3654'
-3652 3654 0
c Var 'aux907' direct represents '2' with '3655'
3652 -3654 3655 0
-3655 3654 0
-3655 -3652 0
c Var 'aux907' direct represents '3' with '-3654'
3651 3653 3655 -3654 0
c Encoding variable: aux908 with domain: int(0..4) (representing constraint (aux903 + aux905))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3656'
c Var 'aux908' direct represents '0' with '3656'
c Var 'aux908' order represents '1' with '3657'
-3656 3657 0
c Var 'aux908' direct represents '1' with '3658'
3656 -3657 3658 0
-3658 3657 0
-3658 -3656 0
c Var 'aux908' order represents '2' with '3659'
-3657 3659 0
c Var 'aux908' direct represents '2' with '3660'
3657 -3659 3660 0
-3660 3659 0
-3660 -3657 0
c Var 'aux908' order represents '3' with '3661'
-3659 3661 0
c Var 'aux908' direct represents '3' with '3662'
3659 -3661 3662 0
-3662 3661 0
-3662 -3659 0
c Var 'aux908' direct represents '4' with '-3661'
3656 3658 3660 3662 -3661 0
c Encoding variable: aux909 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3663'
c Var 'aux909' direct represents '0' with '3663'
c Var 'aux909' order represents '1' with '3664'
-3663 3664 0
c Var 'aux909' direct represents '1' with '3665'
3663 -3664 3665 0
-3665 3664 0
-3665 -3663 0
c Var 'aux909' direct represents '2' with '-3664'
3663 3665 -3664 0
c Encoding variable: aux910 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3666'
c Var 'aux910' direct represents '0' with '3666'
c Var 'aux910' order represents '1' with '3667'
-3666 3667 0
c Var 'aux910' direct represents '1' with '3668'
3666 -3667 3668 0
-3668 3667 0
-3668 -3666 0
c Var 'aux910' direct represents '2' with '-3667'
3666 3668 -3667 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3669'
c Var 'aux911' direct represents '0' with '3669'
c Var 'aux911' order represents '1' with '3670'
-3669 3670 0
c Var 'aux911' direct represents '1' with '3671'
3669 -3670 3671 0
-3671 3670 0
-3671 -3669 0
c Var 'aux911' direct represents '2' with '-3670'
3669 3671 -3670 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3672'
c Var 'aux912' direct represents '0' with '3672'
c Var 'aux912' order represents '1' with '3673'
-3672 3673 0
c Var 'aux912' direct represents '1' with '3674'
3672 -3673 3674 0
-3674 3673 0
-3674 -3672 0
c Var 'aux912' direct represents '2' with '-3673'
3672 3674 -3673 0
c Encoding variable: aux913 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux912))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3675'
c Var 'aux913' direct represents '0' with '3675'
c Var 'aux913' order represents '1' with '3676'
-3675 3676 0
c Var 'aux913' direct represents '1' with '3677'
3675 -3676 3677 0
-3677 3676 0
-3677 -3675 0
c Var 'aux913' order represents '2' with '3678'
-3676 3678 0
c Var 'aux913' direct represents '2' with '3679'
3676 -3678 3679 0
-3679 3678 0
-3679 -3676 0
c Var 'aux913' direct represents '3' with '-3678'
3675 3677 3679 -3678 0
c Encoding variable: aux914 with domain: int(0..4) (representing constraint (aux909 + aux911))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3680'
c Var 'aux914' direct represents '0' with '3680'
c Var 'aux914' order represents '1' with '3681'
-3680 3681 0
c Var 'aux914' direct represents '1' with '3682'
3680 -3681 3682 0
-3682 3681 0
-3682 -3680 0
c Var 'aux914' order represents '2' with '3683'
-3681 3683 0
c Var 'aux914' direct represents '2' with '3684'
3681 -3683 3684 0
-3684 3683 0
-3684 -3681 0
c Var 'aux914' order represents '3' with '3685'
-3683 3685 0
c Var 'aux914' direct represents '3' with '3686'
3683 -3685 3686 0
-3686 3685 0
-3686 -3683 0
c Var 'aux914' direct represents '4' with '-3685'
3680 3682 3684 3686 -3685 0
c Encoding variable: aux915 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3687'
c Var 'aux915' direct represents '0' with '3687'
c Var 'aux915' order represents '1' with '3688'
-3687 3688 0
c Var 'aux915' direct represents '1' with '3689'
3687 -3688 3689 0
-3689 3688 0
-3689 -3687 0
c Var 'aux915' direct represents '2' with '-3688'
3687 3689 -3688 0
c Encoding variable: aux916 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3690'
c Var 'aux916' direct represents '0' with '3690'
c Var 'aux916' order represents '1' with '3691'
-3690 3691 0
c Var 'aux916' direct represents '1' with '3692'
3690 -3691 3692 0
-3692 3691 0
-3692 -3690 0
c Var 'aux916' direct represents '2' with '-3691'
3690 3692 -3691 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3693'
c Var 'aux917' direct represents '0' with '3693'
c Var 'aux917' order represents '1' with '3694'
-3693 3694 0
c Var 'aux917' direct represents '1' with '3695'
3693 -3694 3695 0
-3695 3694 0
-3695 -3693 0
c Var 'aux917' direct represents '2' with '-3694'
3693 3695 -3694 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3696'
c Var 'aux918' direct represents '0' with '3696'
c Var 'aux918' order represents '1' with '3697'
-3696 3697 0
c Var 'aux918' direct represents '1' with '3698'
3696 -3697 3698 0
-3698 3697 0
-3698 -3696 0
c Var 'aux918' direct represents '2' with '-3697'
3696 3698 -3697 0
c Encoding variable: aux919 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux918))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3699'
c Var 'aux919' direct represents '0' with '3699'
c Var 'aux919' order represents '1' with '3700'
-3699 3700 0
c Var 'aux919' direct represents '1' with '3701'
3699 -3700 3701 0
-3701 3700 0
-3701 -3699 0
c Var 'aux919' order represents '2' with '3702'
-3700 3702 0
c Var 'aux919' direct represents '2' with '3703'
3700 -3702 3703 0
-3703 3702 0
-3703 -3700 0
c Var 'aux919' direct represents '3' with '-3702'
3699 3701 3703 -3702 0
c Encoding variable: aux920 with domain: int(0..4) (representing constraint (aux915 + aux917))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3704'
c Var 'aux920' direct represents '0' with '3704'
c Var 'aux920' order represents '1' with '3705'
-3704 3705 0
c Var 'aux920' direct represents '1' with '3706'
3704 -3705 3706 0
-3706 3705 0
-3706 -3704 0
c Var 'aux920' order represents '2' with '3707'
-3705 3707 0
c Var 'aux920' direct represents '2' with '3708'
3705 -3707 3708 0
-3708 3707 0
-3708 -3705 0
c Var 'aux920' order represents '3' with '3709'
-3707 3709 0
c Var 'aux920' direct represents '3' with '3710'
3707 -3709 3710 0
-3710 3709 0
-3710 -3707 0
c Var 'aux920' direct represents '4' with '-3709'
3704 3706 3708 3710 -3709 0
c Encoding variable: aux921 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3711'
c Var 'aux921' direct represents '0' with '3711'
c Var 'aux921' order represents '1' with '3712'
-3711 3712 0
c Var 'aux921' direct represents '1' with '3713'
3711 -3712 3713 0
-3713 3712 0
-3713 -3711 0
c Var 'aux921' direct represents '2' with '-3712'
3711 3713 -3712 0
c Encoding variable: aux922 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3714'
c Var 'aux922' direct represents '0' with '3714'
c Var 'aux922' order represents '1' with '3715'
-3714 3715 0
c Var 'aux922' direct represents '1' with '3716'
3714 -3715 3716 0
-3716 3715 0
-3716 -3714 0
c Var 'aux922' direct represents '2' with '-3715'
3714 3716 -3715 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3717'
c Var 'aux923' direct represents '0' with '3717'
c Var 'aux923' order represents '1' with '3718'
-3717 3718 0
c Var 'aux923' direct represents '1' with '3719'
3717 -3718 3719 0
-3719 3718 0
-3719 -3717 0
c Var 'aux923' direct represents '2' with '-3718'
3717 3719 -3718 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3720'
c Var 'aux924' direct represents '0' with '3720'
c Var 'aux924' order represents '1' with '3721'
-3720 3721 0
c Var 'aux924' direct represents '1' with '3722'
3720 -3721 3722 0
-3722 3721 0
-3722 -3720 0
c Var 'aux924' direct represents '2' with '-3721'
3720 3722 -3721 0
c Encoding variable: aux925 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux924))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3723'
c Var 'aux925' direct represents '0' with '3723'
c Var 'aux925' order represents '1' with '3724'
-3723 3724 0
c Var 'aux925' direct represents '1' with '3725'
3723 -3724 3725 0
-3725 3724 0
-3725 -3723 0
c Var 'aux925' order represents '2' with '3726'
-3724 3726 0
c Var 'aux925' direct represents '2' with '3727'
3724 -3726 3727 0
-3727 3726 0
-3727 -3724 0
c Var 'aux925' direct represents '3' with '-3726'
3723 3725 3727 -3726 0
c Encoding variable: aux926 with domain: int(0..4) (representing constraint (aux921 + aux923))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3728'
c Var 'aux926' direct represents '0' with '3728'
c Var 'aux926' order represents '1' with '3729'
-3728 3729 0
c Var 'aux926' direct represents '1' with '3730'
3728 -3729 3730 0
-3730 3729 0
-3730 -3728 0
c Var 'aux926' order represents '2' with '3731'
-3729 3731 0
c Var 'aux926' direct represents '2' with '3732'
3729 -3731 3732 0
-3732 3731 0
-3732 -3729 0
c Var 'aux926' order represents '3' with '3733'
-3731 3733 0
c Var 'aux926' direct represents '3' with '3734'
3731 -3733 3734 0
-3734 3733 0
-3734 -3731 0
c Var 'aux926' direct represents '4' with '-3733'
3728 3730 3732 3734 -3733 0
c Encoding variable: aux927 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3735'
c Var 'aux927' direct represents '0' with '3735'
c Var 'aux927' order represents '1' with '3736'
-3735 3736 0
c Var 'aux927' direct represents '1' with '3737'
3735 -3736 3737 0
-3737 3736 0
-3737 -3735 0
c Var 'aux927' direct represents '2' with '-3736'
3735 3737 -3736 0
c Encoding variable: aux928 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3738'
c Var 'aux928' direct represents '0' with '3738'
c Var 'aux928' order represents '1' with '3739'
-3738 3739 0
c Var 'aux928' direct represents '1' with '3740'
3738 -3739 3740 0
-3740 3739 0
-3740 -3738 0
c Var 'aux928' direct represents '2' with '-3739'
3738 3740 -3739 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3741'
c Var 'aux929' direct represents '0' with '3741'
c Var 'aux929' order represents '1' with '3742'
-3741 3742 0
c Var 'aux929' direct represents '1' with '3743'
3741 -3742 3743 0
-3743 3742 0
-3743 -3741 0
c Var 'aux929' direct represents '2' with '-3742'
3741 3743 -3742 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3744'
c Var 'aux930' direct represents '0' with '3744'
c Var 'aux930' order represents '1' with '3745'
-3744 3745 0
c Var 'aux930' direct represents '1' with '3746'
3744 -3745 3746 0
-3746 3745 0
-3746 -3744 0
c Var 'aux930' direct represents '2' with '-3745'
3744 3746 -3745 0
c Encoding variable: aux931 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux930))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3747'
c Var 'aux931' direct represents '0' with '3747'
c Var 'aux931' order represents '1' with '3748'
-3747 3748 0
c Var 'aux931' direct represents '1' with '3749'
3747 -3748 3749 0
-3749 3748 0
-3749 -3747 0
c Var 'aux931' order represents '2' with '3750'
-3748 3750 0
c Var 'aux931' direct represents '2' with '3751'
3748 -3750 3751 0
-3751 3750 0
-3751 -3748 0
c Var 'aux931' direct represents '3' with '-3750'
3747 3749 3751 -3750 0
c Encoding variable: aux932 with domain: int(0..4) (representing constraint (aux927 + aux929))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '3752'
c Var 'aux932' direct represents '0' with '3752'
c Var 'aux932' order represents '1' with '3753'
-3752 3753 0
c Var 'aux932' direct represents '1' with '3754'
3752 -3753 3754 0
-3754 3753 0
-3754 -3752 0
c Var 'aux932' order represents '2' with '3755'
-3753 3755 0
c Var 'aux932' direct represents '2' with '3756'
3753 -3755 3756 0
-3756 3755 0
-3756 -3753 0
c Var 'aux932' order represents '3' with '3757'
-3755 3757 0
c Var 'aux932' direct represents '3' with '3758'
3755 -3757 3758 0
-3758 3757 0
-3758 -3755 0
c Var 'aux932' direct represents '4' with '-3757'
3752 3754 3756 3758 -3757 0
c Encoding variable: aux933 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '3759'
c Var 'aux933' direct represents '0' with '3759'
c Var 'aux933' order represents '1' with '3760'
-3759 3760 0
c Var 'aux933' direct represents '1' with '3761'
3759 -3760 3761 0
-3761 3760 0
-3761 -3759 0
c Var 'aux933' direct represents '2' with '-3760'
3759 3761 -3760 0
c Encoding variable: aux934 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '3762'
c Var 'aux934' direct represents '0' with '3762'
c Var 'aux934' order represents '1' with '3763'
-3762 3763 0
c Var 'aux934' direct represents '1' with '3764'
3762 -3763 3764 0
-3764 3763 0
-3764 -3762 0
c Var 'aux934' direct represents '2' with '-3763'
3762 3764 -3763 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '3765'
c Var 'aux935' direct represents '0' with '3765'
c Var 'aux935' order represents '1' with '3766'
-3765 3766 0
c Var 'aux935' direct represents '1' with '3767'
3765 -3766 3767 0
-3767 3766 0
-3767 -3765 0
c Var 'aux935' direct represents '2' with '-3766'
3765 3767 -3766 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '3768'
c Var 'aux936' direct represents '0' with '3768'
c Var 'aux936' order represents '1' with '3769'
-3768 3769 0
c Var 'aux936' direct represents '1' with '3770'
3768 -3769 3770 0
-3770 3769 0
-3770 -3768 0
c Var 'aux936' direct represents '2' with '-3769'
3768 3770 -3769 0
c Encoding variable: aux937 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux936))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '3771'
c Var 'aux937' direct represents '0' with '3771'
c Var 'aux937' order represents '1' with '3772'
-3771 3772 0
c Var 'aux937' direct represents '1' with '3773'
3771 -3772 3773 0
-3773 3772 0
-3773 -3771 0
c Var 'aux937' order represents '2' with '3774'
-3772 3774 0
c Var 'aux937' direct represents '2' with '3775'
3772 -3774 3775 0
-3775 3774 0
-3775 -3772 0
c Var 'aux937' direct represents '3' with '-3774'
3771 3773 3775 -3774 0
c Encoding variable: aux938 with domain: int(0..4) (representing constraint (aux933 + aux935))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '3776'
c Var 'aux938' direct represents '0' with '3776'
c Var 'aux938' order represents '1' with '3777'
-3776 3777 0
c Var 'aux938' direct represents '1' with '3778'
3776 -3777 3778 0
-3778 3777 0
-3778 -3776 0
c Var 'aux938' order represents '2' with '3779'
-3777 3779 0
c Var 'aux938' direct represents '2' with '3780'
3777 -3779 3780 0
-3780 3779 0
-3780 -3777 0
c Var 'aux938' order represents '3' with '3781'
-3779 3781 0
c Var 'aux938' direct represents '3' with '3782'
3779 -3781 3782 0
-3782 3781 0
-3782 -3779 0
c Var 'aux938' direct represents '4' with '-3781'
3776 3778 3780 3782 -3781 0
c Encoding variable: aux939 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '3783'
c Var 'aux939' direct represents '0' with '3783'
c Var 'aux939' order represents '1' with '3784'
-3783 3784 0
c Var 'aux939' direct represents '1' with '3785'
3783 -3784 3785 0
-3785 3784 0
-3785 -3783 0
c Var 'aux939' direct represents '2' with '-3784'
3783 3785 -3784 0
c Encoding variable: aux940 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '3786'
c Var 'aux940' direct represents '0' with '3786'
c Var 'aux940' order represents '1' with '3787'
-3786 3787 0
c Var 'aux940' direct represents '1' with '3788'
3786 -3787 3788 0
-3788 3787 0
-3788 -3786 0
c Var 'aux940' direct represents '2' with '-3787'
3786 3788 -3787 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '3789'
c Var 'aux941' direct represents '0' with '3789'
c Var 'aux941' order represents '1' with '3790'
-3789 3790 0
c Var 'aux941' direct represents '1' with '3791'
3789 -3790 3791 0
-3791 3790 0
-3791 -3789 0
c Var 'aux941' direct represents '2' with '-3790'
3789 3791 -3790 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '3792'
c Var 'aux942' direct represents '0' with '3792'
c Var 'aux942' order represents '1' with '3793'
-3792 3793 0
c Var 'aux942' direct represents '1' with '3794'
3792 -3793 3794 0
-3794 3793 0
-3794 -3792 0
c Var 'aux942' direct represents '2' with '-3793'
3792 3794 -3793 0
c Encoding variable: aux943 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux942))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '3795'
c Var 'aux943' direct represents '0' with '3795'
c Var 'aux943' order represents '1' with '3796'
-3795 3796 0
c Var 'aux943' direct represents '1' with '3797'
3795 -3796 3797 0
-3797 3796 0
-3797 -3795 0
c Var 'aux943' order represents '2' with '3798'
-3796 3798 0
c Var 'aux943' direct represents '2' with '3799'
3796 -3798 3799 0
-3799 3798 0
-3799 -3796 0
c Var 'aux943' direct represents '3' with '-3798'
3795 3797 3799 -3798 0
c Encoding variable: aux944 with domain: int(0..4) (representing constraint (aux939 + aux941))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '3800'
c Var 'aux944' direct represents '0' with '3800'
c Var 'aux944' order represents '1' with '3801'
-3800 3801 0
c Var 'aux944' direct represents '1' with '3802'
3800 -3801 3802 0
-3802 3801 0
-3802 -3800 0
c Var 'aux944' order represents '2' with '3803'
-3801 3803 0
c Var 'aux944' direct represents '2' with '3804'
3801 -3803 3804 0
-3804 3803 0
-3804 -3801 0
c Var 'aux944' order represents '3' with '3805'
-3803 3805 0
c Var 'aux944' direct represents '3' with '3806'
3803 -3805 3806 0
-3806 3805 0
-3806 -3803 0
c Var 'aux944' direct represents '4' with '-3805'
3800 3802 3804 3806 -3805 0
c Encoding variable: aux945 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '3807'
c Var 'aux945' direct represents '0' with '3807'
c Var 'aux945' order represents '1' with '3808'
-3807 3808 0
c Var 'aux945' direct represents '1' with '3809'
3807 -3808 3809 0
-3809 3808 0
-3809 -3807 0
c Var 'aux945' direct represents '2' with '-3808'
3807 3809 -3808 0
c Encoding variable: aux946 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '3810'
c Var 'aux946' direct represents '0' with '3810'
c Var 'aux946' order represents '1' with '3811'
-3810 3811 0
c Var 'aux946' direct represents '1' with '3812'
3810 -3811 3812 0
-3812 3811 0
-3812 -3810 0
c Var 'aux946' direct represents '2' with '-3811'
3810 3812 -3811 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '3813'
c Var 'aux947' direct represents '0' with '3813'
c Var 'aux947' order represents '1' with '3814'
-3813 3814 0
c Var 'aux947' direct represents '1' with '3815'
3813 -3814 3815 0
-3815 3814 0
-3815 -3813 0
c Var 'aux947' direct represents '2' with '-3814'
3813 3815 -3814 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '3816'
c Var 'aux948' direct represents '0' with '3816'
c Var 'aux948' order represents '1' with '3817'
-3816 3817 0
c Var 'aux948' direct represents '1' with '3818'
3816 -3817 3818 0
-3818 3817 0
-3818 -3816 0
c Var 'aux948' direct represents '2' with '-3817'
3816 3818 -3817 0
c Encoding variable: aux949 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux948))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '3819'
c Var 'aux949' direct represents '0' with '3819'
c Var 'aux949' order represents '1' with '3820'
-3819 3820 0
c Var 'aux949' direct represents '1' with '3821'
3819 -3820 3821 0
-3821 3820 0
-3821 -3819 0
c Var 'aux949' order represents '2' with '3822'
-3820 3822 0
c Var 'aux949' direct represents '2' with '3823'
3820 -3822 3823 0
-3823 3822 0
-3823 -3820 0
c Var 'aux949' direct represents '3' with '-3822'
3819 3821 3823 -3822 0
c Encoding variable: aux950 with domain: int(0..4) (representing constraint (aux945 + aux947))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '3824'
c Var 'aux950' direct represents '0' with '3824'
c Var 'aux950' order represents '1' with '3825'
-3824 3825 0
c Var 'aux950' direct represents '1' with '3826'
3824 -3825 3826 0
-3826 3825 0
-3826 -3824 0
c Var 'aux950' order represents '2' with '3827'
-3825 3827 0
c Var 'aux950' direct represents '2' with '3828'
3825 -3827 3828 0
-3828 3827 0
-3828 -3825 0
c Var 'aux950' order represents '3' with '3829'
-3827 3829 0
c Var 'aux950' direct represents '3' with '3830'
3827 -3829 3830 0
-3830 3829 0
-3830 -3827 0
c Var 'aux950' direct represents '4' with '-3829'
3824 3826 3828 3830 -3829 0
c Encoding variable: aux951 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '3831'
c Var 'aux951' direct represents '0' with '3831'
c Var 'aux951' order represents '1' with '3832'
-3831 3832 0
c Var 'aux951' direct represents '1' with '3833'
3831 -3832 3833 0
-3833 3832 0
-3833 -3831 0
c Var 'aux951' direct represents '2' with '-3832'
3831 3833 -3832 0
c Encoding variable: aux952 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '3834'
c Var 'aux952' direct represents '0' with '3834'
c Var 'aux952' order represents '1' with '3835'
-3834 3835 0
c Var 'aux952' direct represents '1' with '3836'
3834 -3835 3836 0
-3836 3835 0
-3836 -3834 0
c Var 'aux952' direct represents '2' with '-3835'
3834 3836 -3835 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '3837'
c Var 'aux953' direct represents '0' with '3837'
c Var 'aux953' order represents '1' with '3838'
-3837 3838 0
c Var 'aux953' direct represents '1' with '3839'
3837 -3838 3839 0
-3839 3838 0
-3839 -3837 0
c Var 'aux953' direct represents '2' with '-3838'
3837 3839 -3838 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '3840'
c Var 'aux954' direct represents '0' with '3840'
c Var 'aux954' order represents '1' with '3841'
-3840 3841 0
c Var 'aux954' direct represents '1' with '3842'
3840 -3841 3842 0
-3842 3841 0
-3842 -3840 0
c Var 'aux954' direct represents '2' with '-3841'
3840 3842 -3841 0
c Encoding variable: aux955 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux954))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '3843'
c Var 'aux955' direct represents '0' with '3843'
c Var 'aux955' order represents '1' with '3844'
-3843 3844 0
c Var 'aux955' direct represents '1' with '3845'
3843 -3844 3845 0
-3845 3844 0
-3845 -3843 0
c Var 'aux955' order represents '2' with '3846'
-3844 3846 0
c Var 'aux955' direct represents '2' with '3847'
3844 -3846 3847 0
-3847 3846 0
-3847 -3844 0
c Var 'aux955' direct represents '3' with '-3846'
3843 3845 3847 -3846 0
c Encoding variable: aux956 with domain: int(0..4) (representing constraint (aux951 + aux953))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '3848'
c Var 'aux956' direct represents '0' with '3848'
c Var 'aux956' order represents '1' with '3849'
-3848 3849 0
c Var 'aux956' direct represents '1' with '3850'
3848 -3849 3850 0
-3850 3849 0
-3850 -3848 0
c Var 'aux956' order represents '2' with '3851'
-3849 3851 0
c Var 'aux956' direct represents '2' with '3852'
3849 -3851 3852 0
-3852 3851 0
-3852 -3849 0
c Var 'aux956' order represents '3' with '3853'
-3851 3853 0
c Var 'aux956' direct represents '3' with '3854'
3851 -3853 3854 0
-3854 3853 0
-3854 -3851 0
c Var 'aux956' direct represents '4' with '-3853'
3848 3850 3852 3854 -3853 0
c Encoding variable: aux957 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '3855'
c Var 'aux957' direct represents '0' with '3855'
c Var 'aux957' order represents '1' with '3856'
-3855 3856 0
c Var 'aux957' direct represents '1' with '3857'
3855 -3856 3857 0
-3857 3856 0
-3857 -3855 0
c Var 'aux957' direct represents '2' with '-3856'
3855 3857 -3856 0
c Encoding variable: aux958 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '3858'
c Var 'aux958' direct represents '0' with '3858'
c Var 'aux958' order represents '1' with '3859'
-3858 3859 0
c Var 'aux958' direct represents '1' with '3860'
3858 -3859 3860 0
-3860 3859 0
-3860 -3858 0
c Var 'aux958' direct represents '2' with '-3859'
3858 3860 -3859 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '3861'
c Var 'aux959' direct represents '0' with '3861'
c Var 'aux959' order represents '1' with '3862'
-3861 3862 0
c Var 'aux959' direct represents '1' with '3863'
3861 -3862 3863 0
-3863 3862 0
-3863 -3861 0
c Var 'aux959' direct represents '2' with '-3862'
3861 3863 -3862 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '3864'
c Var 'aux960' direct represents '0' with '3864'
c Var 'aux960' order represents '1' with '3865'
-3864 3865 0
c Var 'aux960' direct represents '1' with '3866'
3864 -3865 3866 0
-3866 3865 0
-3866 -3864 0
c Var 'aux960' direct represents '2' with '-3865'
3864 3866 -3865 0
c Encoding variable: aux961 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux960))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '3867'
c Var 'aux961' direct represents '0' with '3867'
c Var 'aux961' order represents '1' with '3868'
-3867 3868 0
c Var 'aux961' direct represents '1' with '3869'
3867 -3868 3869 0
-3869 3868 0
-3869 -3867 0
c Var 'aux961' order represents '2' with '3870'
-3868 3870 0
c Var 'aux961' direct represents '2' with '3871'
3868 -3870 3871 0
-3871 3870 0
-3871 -3868 0
c Var 'aux961' direct represents '3' with '-3870'
3867 3869 3871 -3870 0
c Encoding variable: aux962 with domain: int(0..4) (representing constraint (aux957 + aux959))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '3872'
c Var 'aux962' direct represents '0' with '3872'
c Var 'aux962' order represents '1' with '3873'
-3872 3873 0
c Var 'aux962' direct represents '1' with '3874'
3872 -3873 3874 0
-3874 3873 0
-3874 -3872 0
c Var 'aux962' order represents '2' with '3875'
-3873 3875 0
c Var 'aux962' direct represents '2' with '3876'
3873 -3875 3876 0
-3876 3875 0
-3876 -3873 0
c Var 'aux962' order represents '3' with '3877'
-3875 3877 0
c Var 'aux962' direct represents '3' with '3878'
3875 -3877 3878 0
-3878 3877 0
-3878 -3875 0
c Var 'aux962' direct represents '4' with '-3877'
3872 3874 3876 3878 -3877 0
c Encoding variable: aux963 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '3879'
c Var 'aux963' direct represents '0' with '3879'
c Var 'aux963' order represents '1' with '3880'
-3879 3880 0
c Var 'aux963' direct represents '1' with '3881'
3879 -3880 3881 0
-3881 3880 0
-3881 -3879 0
c Var 'aux963' direct represents '2' with '-3880'
3879 3881 -3880 0
c Encoding variable: aux964 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '3882'
c Var 'aux964' direct represents '0' with '3882'
c Var 'aux964' order represents '1' with '3883'
-3882 3883 0
c Var 'aux964' direct represents '1' with '3884'
3882 -3883 3884 0
-3884 3883 0
-3884 -3882 0
c Var 'aux964' direct represents '2' with '-3883'
3882 3884 -3883 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '3885'
c Var 'aux965' direct represents '0' with '3885'
c Var 'aux965' order represents '1' with '3886'
-3885 3886 0
c Var 'aux965' direct represents '1' with '3887'
3885 -3886 3887 0
-3887 3886 0
-3887 -3885 0
c Var 'aux965' direct represents '2' with '-3886'
3885 3887 -3886 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '3888'
c Var 'aux966' direct represents '0' with '3888'
c Var 'aux966' order represents '1' with '3889'
-3888 3889 0
c Var 'aux966' direct represents '1' with '3890'
3888 -3889 3890 0
-3890 3889 0
-3890 -3888 0
c Var 'aux966' direct represents '2' with '-3889'
3888 3890 -3889 0
c Encoding variable: aux967 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux966))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '3891'
c Var 'aux967' direct represents '0' with '3891'
c Var 'aux967' order represents '1' with '3892'
-3891 3892 0
c Var 'aux967' direct represents '1' with '3893'
3891 -3892 3893 0
-3893 3892 0
-3893 -3891 0
c Var 'aux967' order represents '2' with '3894'
-3892 3894 0
c Var 'aux967' direct represents '2' with '3895'
3892 -3894 3895 0
-3895 3894 0
-3895 -3892 0
c Var 'aux967' direct represents '3' with '-3894'
3891 3893 3895 -3894 0
c Encoding variable: aux968 with domain: int(0..4) (representing constraint (aux963 + aux965))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '3896'
c Var 'aux968' direct represents '0' with '3896'
c Var 'aux968' order represents '1' with '3897'
-3896 3897 0
c Var 'aux968' direct represents '1' with '3898'
3896 -3897 3898 0
-3898 3897 0
-3898 -3896 0
c Var 'aux968' order represents '2' with '3899'
-3897 3899 0
c Var 'aux968' direct represents '2' with '3900'
3897 -3899 3900 0
-3900 3899 0
-3900 -3897 0
c Var 'aux968' order represents '3' with '3901'
-3899 3901 0
c Var 'aux968' direct represents '3' with '3902'
3899 -3901 3902 0
-3902 3901 0
-3902 -3899 0
c Var 'aux968' direct represents '4' with '-3901'
3896 3898 3900 3902 -3901 0
c Encoding variable: aux969 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '3903'
c Var 'aux969' direct represents '0' with '3903'
c Var 'aux969' order represents '1' with '3904'
-3903 3904 0
c Var 'aux969' direct represents '1' with '3905'
3903 -3904 3905 0
-3905 3904 0
-3905 -3903 0
c Var 'aux969' direct represents '2' with '-3904'
3903 3905 -3904 0
c Encoding variable: aux970 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '3906'
c Var 'aux970' direct represents '0' with '3906'
c Var 'aux970' order represents '1' with '3907'
-3906 3907 0
c Var 'aux970' direct represents '1' with '3908'
3906 -3907 3908 0
-3908 3907 0
-3908 -3906 0
c Var 'aux970' direct represents '2' with '-3907'
3906 3908 -3907 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '3909'
c Var 'aux971' direct represents '0' with '3909'
c Var 'aux971' order represents '1' with '3910'
-3909 3910 0
c Var 'aux971' direct represents '1' with '3911'
3909 -3910 3911 0
-3911 3910 0
-3911 -3909 0
c Var 'aux971' direct represents '2' with '-3910'
3909 3911 -3910 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '3912'
c Var 'aux972' direct represents '0' with '3912'
c Var 'aux972' order represents '1' with '3913'
-3912 3913 0
c Var 'aux972' direct represents '1' with '3914'
3912 -3913 3914 0
-3914 3913 0
-3914 -3912 0
c Var 'aux972' direct represents '2' with '-3913'
3912 3914 -3913 0
c Encoding variable: aux973 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux972))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '3915'
c Var 'aux973' direct represents '0' with '3915'
c Var 'aux973' order represents '1' with '3916'
-3915 3916 0
c Var 'aux973' direct represents '1' with '3917'
3915 -3916 3917 0
-3917 3916 0
-3917 -3915 0
c Var 'aux973' order represents '2' with '3918'
-3916 3918 0
c Var 'aux973' direct represents '2' with '3919'
3916 -3918 3919 0
-3919 3918 0
-3919 -3916 0
c Var 'aux973' direct represents '3' with '-3918'
3915 3917 3919 -3918 0
c Encoding variable: aux974 with domain: int(0..4) (representing constraint (aux969 + aux971))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '3920'
c Var 'aux974' direct represents '0' with '3920'
c Var 'aux974' order represents '1' with '3921'
-3920 3921 0
c Var 'aux974' direct represents '1' with '3922'
3920 -3921 3922 0
-3922 3921 0
-3922 -3920 0
c Var 'aux974' order represents '2' with '3923'
-3921 3923 0
c Var 'aux974' direct represents '2' with '3924'
3921 -3923 3924 0
-3924 3923 0
-3924 -3921 0
c Var 'aux974' order represents '3' with '3925'
-3923 3925 0
c Var 'aux974' direct represents '3' with '3926'
3923 -3925 3926 0
-3926 3925 0
-3926 -3923 0
c Var 'aux974' direct represents '4' with '-3925'
3920 3922 3924 3926 -3925 0
c Encoding variable: aux975 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '3927'
c Var 'aux975' direct represents '0' with '3927'
c Var 'aux975' order represents '1' with '3928'
-3927 3928 0
c Var 'aux975' direct represents '1' with '3929'
3927 -3928 3929 0
-3929 3928 0
-3929 -3927 0
c Var 'aux975' direct represents '2' with '-3928'
3927 3929 -3928 0
c Encoding variable: aux976 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '3930'
c Var 'aux976' direct represents '0' with '3930'
c Var 'aux976' order represents '1' with '3931'
-3930 3931 0
c Var 'aux976' direct represents '1' with '3932'
3930 -3931 3932 0
-3932 3931 0
-3932 -3930 0
c Var 'aux976' direct represents '2' with '-3931'
3930 3932 -3931 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '3933'
c Var 'aux977' direct represents '0' with '3933'
c Var 'aux977' order represents '1' with '3934'
-3933 3934 0
c Var 'aux977' direct represents '1' with '3935'
3933 -3934 3935 0
-3935 3934 0
-3935 -3933 0
c Var 'aux977' direct represents '2' with '-3934'
3933 3935 -3934 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '3936'
c Var 'aux978' direct represents '0' with '3936'
c Var 'aux978' order represents '1' with '3937'
-3936 3937 0
c Var 'aux978' direct represents '1' with '3938'
3936 -3937 3938 0
-3938 3937 0
-3938 -3936 0
c Var 'aux978' direct represents '2' with '-3937'
3936 3938 -3937 0
c Encoding variable: aux979 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux978))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '3939'
c Var 'aux979' direct represents '0' with '3939'
c Var 'aux979' order represents '1' with '3940'
-3939 3940 0
c Var 'aux979' direct represents '1' with '3941'
3939 -3940 3941 0
-3941 3940 0
-3941 -3939 0
c Var 'aux979' order represents '2' with '3942'
-3940 3942 0
c Var 'aux979' direct represents '2' with '3943'
3940 -3942 3943 0
-3943 3942 0
-3943 -3940 0
c Var 'aux979' direct represents '3' with '-3942'
3939 3941 3943 -3942 0
c Encoding variable: aux980 with domain: int(0..4) (representing constraint (aux975 + aux977))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '3944'
c Var 'aux980' direct represents '0' with '3944'
c Var 'aux980' order represents '1' with '3945'
-3944 3945 0
c Var 'aux980' direct represents '1' with '3946'
3944 -3945 3946 0
-3946 3945 0
-3946 -3944 0
c Var 'aux980' order represents '2' with '3947'
-3945 3947 0
c Var 'aux980' direct represents '2' with '3948'
3945 -3947 3948 0
-3948 3947 0
-3948 -3945 0
c Var 'aux980' order represents '3' with '3949'
-3947 3949 0
c Var 'aux980' direct represents '3' with '3950'
3947 -3949 3950 0
-3950 3949 0
-3950 -3947 0
c Var 'aux980' direct represents '4' with '-3949'
3944 3946 3948 3950 -3949 0
c Encoding variable: aux981 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '3951'
c Var 'aux981' direct represents '0' with '3951'
c Var 'aux981' order represents '1' with '3952'
-3951 3952 0
c Var 'aux981' direct represents '1' with '3953'
3951 -3952 3953 0
-3953 3952 0
-3953 -3951 0
c Var 'aux981' direct represents '2' with '-3952'
3951 3953 -3952 0
c Encoding variable: aux982 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '3954'
c Var 'aux982' direct represents '0' with '3954'
c Var 'aux982' order represents '1' with '3955'
-3954 3955 0
c Var 'aux982' direct represents '1' with '3956'
3954 -3955 3956 0
-3956 3955 0
-3956 -3954 0
c Var 'aux982' direct represents '2' with '-3955'
3954 3956 -3955 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '3957'
c Var 'aux983' direct represents '0' with '3957'
c Var 'aux983' order represents '1' with '3958'
-3957 3958 0
c Var 'aux983' direct represents '1' with '3959'
3957 -3958 3959 0
-3959 3958 0
-3959 -3957 0
c Var 'aux983' direct represents '2' with '-3958'
3957 3959 -3958 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '3960'
c Var 'aux984' direct represents '0' with '3960'
c Var 'aux984' order represents '1' with '3961'
-3960 3961 0
c Var 'aux984' direct represents '1' with '3962'
3960 -3961 3962 0
-3962 3961 0
-3962 -3960 0
c Var 'aux984' direct represents '2' with '-3961'
3960 3962 -3961 0
c Encoding variable: aux985 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux984))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '3963'
c Var 'aux985' direct represents '0' with '3963'
c Var 'aux985' order represents '1' with '3964'
-3963 3964 0
c Var 'aux985' direct represents '1' with '3965'
3963 -3964 3965 0
-3965 3964 0
-3965 -3963 0
c Var 'aux985' order represents '2' with '3966'
-3964 3966 0
c Var 'aux985' direct represents '2' with '3967'
3964 -3966 3967 0
-3967 3966 0
-3967 -3964 0
c Var 'aux985' direct represents '3' with '-3966'
3963 3965 3967 -3966 0
c Encoding variable: aux986 with domain: int(0..4) (representing constraint (aux981 + aux983))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '3968'
c Var 'aux986' direct represents '0' with '3968'
c Var 'aux986' order represents '1' with '3969'
-3968 3969 0
c Var 'aux986' direct represents '1' with '3970'
3968 -3969 3970 0
-3970 3969 0
-3970 -3968 0
c Var 'aux986' order represents '2' with '3971'
-3969 3971 0
c Var 'aux986' direct represents '2' with '3972'
3969 -3971 3972 0
-3972 3971 0
-3972 -3969 0
c Var 'aux986' order represents '3' with '3973'
-3971 3973 0
c Var 'aux986' direct represents '3' with '3974'
3971 -3973 3974 0
-3974 3973 0
-3974 -3971 0
c Var 'aux986' direct represents '4' with '-3973'
3968 3970 3972 3974 -3973 0
c Encoding variable: aux987 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '3975'
c Var 'aux987' direct represents '0' with '3975'
c Var 'aux987' order represents '1' with '3976'
-3975 3976 0
c Var 'aux987' direct represents '1' with '3977'
3975 -3976 3977 0
-3977 3976 0
-3977 -3975 0
c Var 'aux987' direct represents '2' with '-3976'
3975 3977 -3976 0
c Encoding variable: aux988 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '3978'
c Var 'aux988' direct represents '0' with '3978'
c Var 'aux988' order represents '1' with '3979'
-3978 3979 0
c Var 'aux988' direct represents '1' with '3980'
3978 -3979 3980 0
-3980 3979 0
-3980 -3978 0
c Var 'aux988' direct represents '2' with '-3979'
3978 3980 -3979 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '3981'
c Var 'aux989' direct represents '0' with '3981'
c Var 'aux989' order represents '1' with '3982'
-3981 3982 0
c Var 'aux989' direct represents '1' with '3983'
3981 -3982 3983 0
-3983 3982 0
-3983 -3981 0
c Var 'aux989' direct represents '2' with '-3982'
3981 3983 -3982 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '3984'
c Var 'aux990' direct represents '0' with '3984'
c Var 'aux990' order represents '1' with '3985'
-3984 3985 0
c Var 'aux990' direct represents '1' with '3986'
3984 -3985 3986 0
-3986 3985 0
-3986 -3984 0
c Var 'aux990' direct represents '2' with '-3985'
3984 3986 -3985 0
c Encoding variable: aux991 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux990))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '3987'
c Var 'aux991' direct represents '0' with '3987'
c Var 'aux991' order represents '1' with '3988'
-3987 3988 0
c Var 'aux991' direct represents '1' with '3989'
3987 -3988 3989 0
-3989 3988 0
-3989 -3987 0
c Var 'aux991' order represents '2' with '3990'
-3988 3990 0
c Var 'aux991' direct represents '2' with '3991'
3988 -3990 3991 0
-3991 3990 0
-3991 -3988 0
c Var 'aux991' direct represents '3' with '-3990'
3987 3989 3991 -3990 0
c Encoding variable: aux992 with domain: int(0..4) (representing constraint (aux987 + aux989))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '3992'
c Var 'aux992' direct represents '0' with '3992'
c Var 'aux992' order represents '1' with '3993'
-3992 3993 0
c Var 'aux992' direct represents '1' with '3994'
3992 -3993 3994 0
-3994 3993 0
-3994 -3992 0
c Var 'aux992' order represents '2' with '3995'
-3993 3995 0
c Var 'aux992' direct represents '2' with '3996'
3993 -3995 3996 0
-3996 3995 0
-3996 -3993 0
c Var 'aux992' order represents '3' with '3997'
-3995 3997 0
c Var 'aux992' direct represents '3' with '3998'
3995 -3997 3998 0
-3998 3997 0
-3998 -3995 0
c Var 'aux992' direct represents '4' with '-3997'
3992 3994 3996 3998 -3997 0
c Encoding variable: aux993 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '3999'
c Var 'aux993' direct represents '0' with '3999'
c Var 'aux993' order represents '1' with '4000'
-3999 4000 0
c Var 'aux993' direct represents '1' with '4001'
3999 -4000 4001 0
-4001 4000 0
-4001 -3999 0
c Var 'aux993' direct represents '2' with '-4000'
3999 4001 -4000 0
c Encoding variable: aux994 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4002'
c Var 'aux994' direct represents '0' with '4002'
c Var 'aux994' order represents '1' with '4003'
-4002 4003 0
c Var 'aux994' direct represents '1' with '4004'
4002 -4003 4004 0
-4004 4003 0
-4004 -4002 0
c Var 'aux994' direct represents '2' with '-4003'
4002 4004 -4003 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4005'
c Var 'aux995' direct represents '0' with '4005'
c Var 'aux995' order represents '1' with '4006'
-4005 4006 0
c Var 'aux995' direct represents '1' with '4007'
4005 -4006 4007 0
-4007 4006 0
-4007 -4005 0
c Var 'aux995' direct represents '2' with '-4006'
4005 4007 -4006 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4008'
c Var 'aux996' direct represents '0' with '4008'
c Var 'aux996' order represents '1' with '4009'
-4008 4009 0
c Var 'aux996' direct represents '1' with '4010'
4008 -4009 4010 0
-4010 4009 0
-4010 -4008 0
c Var 'aux996' direct represents '2' with '-4009'
4008 4010 -4009 0
c Encoding variable: aux997 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux996))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4011'
c Var 'aux997' direct represents '0' with '4011'
c Var 'aux997' order represents '1' with '4012'
-4011 4012 0
c Var 'aux997' direct represents '1' with '4013'
4011 -4012 4013 0
-4013 4012 0
-4013 -4011 0
c Var 'aux997' order represents '2' with '4014'
-4012 4014 0
c Var 'aux997' direct represents '2' with '4015'
4012 -4014 4015 0
-4015 4014 0
-4015 -4012 0
c Var 'aux997' direct represents '3' with '-4014'
4011 4013 4015 -4014 0
c Encoding variable: aux998 with domain: int(0..4) (representing constraint (aux993 + aux995))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4016'
c Var 'aux998' direct represents '0' with '4016'
c Var 'aux998' order represents '1' with '4017'
-4016 4017 0
c Var 'aux998' direct represents '1' with '4018'
4016 -4017 4018 0
-4018 4017 0
-4018 -4016 0
c Var 'aux998' order represents '2' with '4019'
-4017 4019 0
c Var 'aux998' direct represents '2' with '4020'
4017 -4019 4020 0
-4020 4019 0
-4020 -4017 0
c Var 'aux998' order represents '3' with '4021'
-4019 4021 0
c Var 'aux998' direct represents '3' with '4022'
4019 -4021 4022 0
-4022 4021 0
-4022 -4019 0
c Var 'aux998' direct represents '4' with '-4021'
4016 4018 4020 4022 -4021 0
c Encoding variable: aux999 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4023'
c Var 'aux999' direct represents '0' with '4023'
c Var 'aux999' order represents '1' with '4024'
-4023 4024 0
c Var 'aux999' direct represents '1' with '4025'
4023 -4024 4025 0
-4025 4024 0
-4025 -4023 0
c Var 'aux999' direct represents '2' with '-4024'
4023 4025 -4024 0
c Encoding variable: aux1000 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4026'
c Var 'aux1000' direct represents '0' with '4026'
c Var 'aux1000' order represents '1' with '4027'
-4026 4027 0
c Var 'aux1000' direct represents '1' with '4028'
4026 -4027 4028 0
-4028 4027 0
-4028 -4026 0
c Var 'aux1000' direct represents '2' with '-4027'
4026 4028 -4027 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4029'
c Var 'aux1001' direct represents '0' with '4029'
c Var 'aux1001' order represents '1' with '4030'
-4029 4030 0
c Var 'aux1001' direct represents '1' with '4031'
4029 -4030 4031 0
-4031 4030 0
-4031 -4029 0
c Var 'aux1001' direct represents '2' with '-4030'
4029 4031 -4030 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4032'
c Var 'aux1002' direct represents '0' with '4032'
c Var 'aux1002' order represents '1' with '4033'
-4032 4033 0
c Var 'aux1002' direct represents '1' with '4034'
4032 -4033 4034 0
-4034 4033 0
-4034 -4032 0
c Var 'aux1002' direct represents '2' with '-4033'
4032 4034 -4033 0
c Encoding variable: aux1003 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux1002))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4035'
c Var 'aux1003' direct represents '0' with '4035'
c Var 'aux1003' order represents '1' with '4036'
-4035 4036 0
c Var 'aux1003' direct represents '1' with '4037'
4035 -4036 4037 0
-4037 4036 0
-4037 -4035 0
c Var 'aux1003' order represents '2' with '4038'
-4036 4038 0
c Var 'aux1003' direct represents '2' with '4039'
4036 -4038 4039 0
-4039 4038 0
-4039 -4036 0
c Var 'aux1003' direct represents '3' with '-4038'
4035 4037 4039 -4038 0
c Encoding variable: aux1004 with domain: int(0..4) (representing constraint (aux999 + aux1001))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4040'
c Var 'aux1004' direct represents '0' with '4040'
c Var 'aux1004' order represents '1' with '4041'
-4040 4041 0
c Var 'aux1004' direct represents '1' with '4042'
4040 -4041 4042 0
-4042 4041 0
-4042 -4040 0
c Var 'aux1004' order represents '2' with '4043'
-4041 4043 0
c Var 'aux1004' direct represents '2' with '4044'
4041 -4043 4044 0
-4044 4043 0
-4044 -4041 0
c Var 'aux1004' order represents '3' with '4045'
-4043 4045 0
c Var 'aux1004' direct represents '3' with '4046'
4043 -4045 4046 0
-4046 4045 0
-4046 -4043 0
c Var 'aux1004' direct represents '4' with '-4045'
4040 4042 4044 4046 -4045 0
c Encoding variable: aux1005 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4047'
c Var 'aux1005' direct represents '0' with '4047'
c Var 'aux1005' order represents '1' with '4048'
-4047 4048 0
c Var 'aux1005' direct represents '1' with '4049'
4047 -4048 4049 0
-4049 4048 0
-4049 -4047 0
c Var 'aux1005' direct represents '2' with '-4048'
4047 4049 -4048 0
c Encoding variable: aux1006 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4050'
c Var 'aux1006' direct represents '0' with '4050'
c Var 'aux1006' order represents '1' with '4051'
-4050 4051 0
c Var 'aux1006' direct represents '1' with '4052'
4050 -4051 4052 0
-4052 4051 0
-4052 -4050 0
c Var 'aux1006' direct represents '2' with '-4051'
4050 4052 -4051 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4053'
c Var 'aux1007' direct represents '0' with '4053'
c Var 'aux1007' order represents '1' with '4054'
-4053 4054 0
c Var 'aux1007' direct represents '1' with '4055'
4053 -4054 4055 0
-4055 4054 0
-4055 -4053 0
c Var 'aux1007' direct represents '2' with '-4054'
4053 4055 -4054 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4056'
c Var 'aux1008' direct represents '0' with '4056'
c Var 'aux1008' order represents '1' with '4057'
-4056 4057 0
c Var 'aux1008' direct represents '1' with '4058'
4056 -4057 4058 0
-4058 4057 0
-4058 -4056 0
c Var 'aux1008' direct represents '2' with '-4057'
4056 4058 -4057 0
c Encoding variable: aux1009 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux1008))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4059'
c Var 'aux1009' direct represents '0' with '4059'
c Var 'aux1009' order represents '1' with '4060'
-4059 4060 0
c Var 'aux1009' direct represents '1' with '4061'
4059 -4060 4061 0
-4061 4060 0
-4061 -4059 0
c Var 'aux1009' order represents '2' with '4062'
-4060 4062 0
c Var 'aux1009' direct represents '2' with '4063'
4060 -4062 4063 0
-4063 4062 0
-4063 -4060 0
c Var 'aux1009' direct represents '3' with '-4062'
4059 4061 4063 -4062 0
c Encoding variable: aux1010 with domain: int(0..4) (representing constraint (aux1005 + aux1007))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4064'
c Var 'aux1010' direct represents '0' with '4064'
c Var 'aux1010' order represents '1' with '4065'
-4064 4065 0
c Var 'aux1010' direct represents '1' with '4066'
4064 -4065 4066 0
-4066 4065 0
-4066 -4064 0
c Var 'aux1010' order represents '2' with '4067'
-4065 4067 0
c Var 'aux1010' direct represents '2' with '4068'
4065 -4067 4068 0
-4068 4067 0
-4068 -4065 0
c Var 'aux1010' order represents '3' with '4069'
-4067 4069 0
c Var 'aux1010' direct represents '3' with '4070'
4067 -4069 4070 0
-4070 4069 0
-4070 -4067 0
c Var 'aux1010' direct represents '4' with '-4069'
4064 4066 4068 4070 -4069 0
c Encoding variable: aux1011 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4071'
c Var 'aux1011' direct represents '0' with '4071'
c Var 'aux1011' order represents '1' with '4072'
-4071 4072 0
c Var 'aux1011' direct represents '1' with '4073'
4071 -4072 4073 0
-4073 4072 0
-4073 -4071 0
c Var 'aux1011' direct represents '2' with '-4072'
4071 4073 -4072 0
c Encoding variable: aux1012 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4074'
c Var 'aux1012' direct represents '0' with '4074'
c Var 'aux1012' order represents '1' with '4075'
-4074 4075 0
c Var 'aux1012' direct represents '1' with '4076'
4074 -4075 4076 0
-4076 4075 0
-4076 -4074 0
c Var 'aux1012' direct represents '2' with '-4075'
4074 4076 -4075 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4077'
c Var 'aux1013' direct represents '0' with '4077'
c Var 'aux1013' order represents '1' with '4078'
-4077 4078 0
c Var 'aux1013' direct represents '1' with '4079'
4077 -4078 4079 0
-4079 4078 0
-4079 -4077 0
c Var 'aux1013' direct represents '2' with '-4078'
4077 4079 -4078 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4080'
c Var 'aux1014' direct represents '0' with '4080'
c Var 'aux1014' order represents '1' with '4081'
-4080 4081 0
c Var 'aux1014' direct represents '1' with '4082'
4080 -4081 4082 0
-4082 4081 0
-4082 -4080 0
c Var 'aux1014' direct represents '2' with '-4081'
4080 4082 -4081 0
c Encoding variable: aux1015 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1014))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4083'
c Var 'aux1015' direct represents '0' with '4083'
c Var 'aux1015' order represents '1' with '4084'
-4083 4084 0
c Var 'aux1015' direct represents '1' with '4085'
4083 -4084 4085 0
-4085 4084 0
-4085 -4083 0
c Var 'aux1015' order represents '2' with '4086'
-4084 4086 0
c Var 'aux1015' direct represents '2' with '4087'
4084 -4086 4087 0
-4087 4086 0
-4087 -4084 0
c Var 'aux1015' direct represents '3' with '-4086'
4083 4085 4087 -4086 0
c Encoding variable: aux1016 with domain: int(0..4) (representing constraint (aux1011 + aux1013))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4088'
c Var 'aux1016' direct represents '0' with '4088'
c Var 'aux1016' order represents '1' with '4089'
-4088 4089 0
c Var 'aux1016' direct represents '1' with '4090'
4088 -4089 4090 0
-4090 4089 0
-4090 -4088 0
c Var 'aux1016' order represents '2' with '4091'
-4089 4091 0
c Var 'aux1016' direct represents '2' with '4092'
4089 -4091 4092 0
-4092 4091 0
-4092 -4089 0
c Var 'aux1016' order represents '3' with '4093'
-4091 4093 0
c Var 'aux1016' direct represents '3' with '4094'
4091 -4093 4094 0
-4094 4093 0
-4094 -4091 0
c Var 'aux1016' direct represents '4' with '-4093'
4088 4090 4092 4094 -4093 0
c Encoding variable: aux1017 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4095'
c Var 'aux1017' direct represents '0' with '4095'
c Var 'aux1017' order represents '1' with '4096'
-4095 4096 0
c Var 'aux1017' direct represents '1' with '4097'
4095 -4096 4097 0
-4097 4096 0
-4097 -4095 0
c Var 'aux1017' direct represents '2' with '-4096'
4095 4097 -4096 0
c Encoding variable: aux1018 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4098'
c Var 'aux1018' direct represents '0' with '4098'
c Var 'aux1018' order represents '1' with '4099'
-4098 4099 0
c Var 'aux1018' direct represents '1' with '4100'
4098 -4099 4100 0
-4100 4099 0
-4100 -4098 0
c Var 'aux1018' direct represents '2' with '-4099'
4098 4100 -4099 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4101'
c Var 'aux1019' direct represents '0' with '4101'
c Var 'aux1019' order represents '1' with '4102'
-4101 4102 0
c Var 'aux1019' direct represents '1' with '4103'
4101 -4102 4103 0
-4103 4102 0
-4103 -4101 0
c Var 'aux1019' direct represents '2' with '-4102'
4101 4103 -4102 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4104'
c Var 'aux1020' direct represents '0' with '4104'
c Var 'aux1020' order represents '1' with '4105'
-4104 4105 0
c Var 'aux1020' direct represents '1' with '4106'
4104 -4105 4106 0
-4106 4105 0
-4106 -4104 0
c Var 'aux1020' direct represents '2' with '-4105'
4104 4106 -4105 0
c Encoding variable: aux1021 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1020))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4107'
c Var 'aux1021' direct represents '0' with '4107'
c Var 'aux1021' order represents '1' with '4108'
-4107 4108 0
c Var 'aux1021' direct represents '1' with '4109'
4107 -4108 4109 0
-4109 4108 0
-4109 -4107 0
c Var 'aux1021' order represents '2' with '4110'
-4108 4110 0
c Var 'aux1021' direct represents '2' with '4111'
4108 -4110 4111 0
-4111 4110 0
-4111 -4108 0
c Var 'aux1021' direct represents '3' with '-4110'
4107 4109 4111 -4110 0
c Encoding variable: aux1022 with domain: int(0..4) (representing constraint (aux1017 + aux1019))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4112'
c Var 'aux1022' direct represents '0' with '4112'
c Var 'aux1022' order represents '1' with '4113'
-4112 4113 0
c Var 'aux1022' direct represents '1' with '4114'
4112 -4113 4114 0
-4114 4113 0
-4114 -4112 0
c Var 'aux1022' order represents '2' with '4115'
-4113 4115 0
c Var 'aux1022' direct represents '2' with '4116'
4113 -4115 4116 0
-4116 4115 0
-4116 -4113 0
c Var 'aux1022' order represents '3' with '4117'
-4115 4117 0
c Var 'aux1022' direct represents '3' with '4118'
4115 -4117 4118 0
-4118 4117 0
-4118 -4115 0
c Var 'aux1022' direct represents '4' with '-4117'
4112 4114 4116 4118 -4117 0
c Encoding variable: aux1023 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4119'
c Var 'aux1023' direct represents '0' with '4119'
c Var 'aux1023' order represents '1' with '4120'
-4119 4120 0
c Var 'aux1023' direct represents '1' with '4121'
4119 -4120 4121 0
-4121 4120 0
-4121 -4119 0
c Var 'aux1023' direct represents '2' with '-4120'
4119 4121 -4120 0
c Encoding variable: aux1024 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4122'
c Var 'aux1024' direct represents '0' with '4122'
c Var 'aux1024' order represents '1' with '4123'
-4122 4123 0
c Var 'aux1024' direct represents '1' with '4124'
4122 -4123 4124 0
-4124 4123 0
-4124 -4122 0
c Var 'aux1024' direct represents '2' with '-4123'
4122 4124 -4123 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4125'
c Var 'aux1025' direct represents '0' with '4125'
c Var 'aux1025' order represents '1' with '4126'
-4125 4126 0
c Var 'aux1025' direct represents '1' with '4127'
4125 -4126 4127 0
-4127 4126 0
-4127 -4125 0
c Var 'aux1025' direct represents '2' with '-4126'
4125 4127 -4126 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4128'
c Var 'aux1026' direct represents '0' with '4128'
c Var 'aux1026' order represents '1' with '4129'
-4128 4129 0
c Var 'aux1026' direct represents '1' with '4130'
4128 -4129 4130 0
-4130 4129 0
-4130 -4128 0
c Var 'aux1026' direct represents '2' with '-4129'
4128 4130 -4129 0
c Encoding variable: aux1027 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1026))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4131'
c Var 'aux1027' direct represents '0' with '4131'
c Var 'aux1027' order represents '1' with '4132'
-4131 4132 0
c Var 'aux1027' direct represents '1' with '4133'
4131 -4132 4133 0
-4133 4132 0
-4133 -4131 0
c Var 'aux1027' order represents '2' with '4134'
-4132 4134 0
c Var 'aux1027' direct represents '2' with '4135'
4132 -4134 4135 0
-4135 4134 0
-4135 -4132 0
c Var 'aux1027' direct represents '3' with '-4134'
4131 4133 4135 -4134 0
c Encoding variable: aux1028 with domain: int(0..4) (representing constraint (aux1023 + aux1025))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4136'
c Var 'aux1028' direct represents '0' with '4136'
c Var 'aux1028' order represents '1' with '4137'
-4136 4137 0
c Var 'aux1028' direct represents '1' with '4138'
4136 -4137 4138 0
-4138 4137 0
-4138 -4136 0
c Var 'aux1028' order represents '2' with '4139'
-4137 4139 0
c Var 'aux1028' direct represents '2' with '4140'
4137 -4139 4140 0
-4140 4139 0
-4140 -4137 0
c Var 'aux1028' order represents '3' with '4141'
-4139 4141 0
c Var 'aux1028' direct represents '3' with '4142'
4139 -4141 4142 0
-4142 4141 0
-4142 -4139 0
c Var 'aux1028' direct represents '4' with '-4141'
4136 4138 4140 4142 -4141 0
c Encoding variable: aux1029 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4143'
c Var 'aux1029' direct represents '0' with '4143'
c Var 'aux1029' order represents '1' with '4144'
-4143 4144 0
c Var 'aux1029' direct represents '1' with '4145'
4143 -4144 4145 0
-4145 4144 0
-4145 -4143 0
c Var 'aux1029' direct represents '2' with '-4144'
4143 4145 -4144 0
c Encoding variable: aux1030 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4146'
c Var 'aux1030' direct represents '0' with '4146'
c Var 'aux1030' order represents '1' with '4147'
-4146 4147 0
c Var 'aux1030' direct represents '1' with '4148'
4146 -4147 4148 0
-4148 4147 0
-4148 -4146 0
c Var 'aux1030' direct represents '2' with '-4147'
4146 4148 -4147 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4149'
c Var 'aux1031' direct represents '0' with '4149'
c Var 'aux1031' order represents '1' with '4150'
-4149 4150 0
c Var 'aux1031' direct represents '1' with '4151'
4149 -4150 4151 0
-4151 4150 0
-4151 -4149 0
c Var 'aux1031' direct represents '2' with '-4150'
4149 4151 -4150 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4152'
c Var 'aux1032' direct represents '0' with '4152'
c Var 'aux1032' order represents '1' with '4153'
-4152 4153 0
c Var 'aux1032' direct represents '1' with '4154'
4152 -4153 4154 0
-4154 4153 0
-4154 -4152 0
c Var 'aux1032' direct represents '2' with '-4153'
4152 4154 -4153 0
c Encoding variable: aux1033 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1032))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4155'
c Var 'aux1033' direct represents '0' with '4155'
c Var 'aux1033' order represents '1' with '4156'
-4155 4156 0
c Var 'aux1033' direct represents '1' with '4157'
4155 -4156 4157 0
-4157 4156 0
-4157 -4155 0
c Var 'aux1033' order represents '2' with '4158'
-4156 4158 0
c Var 'aux1033' direct represents '2' with '4159'
4156 -4158 4159 0
-4159 4158 0
-4159 -4156 0
c Var 'aux1033' direct represents '3' with '-4158'
4155 4157 4159 -4158 0
c Encoding variable: aux1034 with domain: int(0..4) (representing constraint (aux1029 + aux1031))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4160'
c Var 'aux1034' direct represents '0' with '4160'
c Var 'aux1034' order represents '1' with '4161'
-4160 4161 0
c Var 'aux1034' direct represents '1' with '4162'
4160 -4161 4162 0
-4162 4161 0
-4162 -4160 0
c Var 'aux1034' order represents '2' with '4163'
-4161 4163 0
c Var 'aux1034' direct represents '2' with '4164'
4161 -4163 4164 0
-4164 4163 0
-4164 -4161 0
c Var 'aux1034' order represents '3' with '4165'
-4163 4165 0
c Var 'aux1034' direct represents '3' with '4166'
4163 -4165 4166 0
-4166 4165 0
-4166 -4163 0
c Var 'aux1034' direct represents '4' with '-4165'
4160 4162 4164 4166 -4165 0
c Encoding variable: aux1035 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4167'
c Var 'aux1035' direct represents '0' with '4167'
c Var 'aux1035' order represents '1' with '4168'
-4167 4168 0
c Var 'aux1035' direct represents '1' with '4169'
4167 -4168 4169 0
-4169 4168 0
-4169 -4167 0
c Var 'aux1035' direct represents '2' with '-4168'
4167 4169 -4168 0
c Encoding variable: aux1036 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4170'
c Var 'aux1036' direct represents '0' with '4170'
c Var 'aux1036' order represents '1' with '4171'
-4170 4171 0
c Var 'aux1036' direct represents '1' with '4172'
4170 -4171 4172 0
-4172 4171 0
-4172 -4170 0
c Var 'aux1036' direct represents '2' with '-4171'
4170 4172 -4171 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4173'
c Var 'aux1037' direct represents '0' with '4173'
c Var 'aux1037' order represents '1' with '4174'
-4173 4174 0
c Var 'aux1037' direct represents '1' with '4175'
4173 -4174 4175 0
-4175 4174 0
-4175 -4173 0
c Var 'aux1037' direct represents '2' with '-4174'
4173 4175 -4174 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4176'
c Var 'aux1038' direct represents '0' with '4176'
c Var 'aux1038' order represents '1' with '4177'
-4176 4177 0
c Var 'aux1038' direct represents '1' with '4178'
4176 -4177 4178 0
-4178 4177 0
-4178 -4176 0
c Var 'aux1038' direct represents '2' with '-4177'
4176 4178 -4177 0
c Encoding variable: aux1039 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1038))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4179'
c Var 'aux1039' direct represents '0' with '4179'
c Var 'aux1039' order represents '1' with '4180'
-4179 4180 0
c Var 'aux1039' direct represents '1' with '4181'
4179 -4180 4181 0
-4181 4180 0
-4181 -4179 0
c Var 'aux1039' order represents '2' with '4182'
-4180 4182 0
c Var 'aux1039' direct represents '2' with '4183'
4180 -4182 4183 0
-4183 4182 0
-4183 -4180 0
c Var 'aux1039' direct represents '3' with '-4182'
4179 4181 4183 -4182 0
c Encoding variable: aux1040 with domain: int(0..4) (representing constraint (aux1035 + aux1037))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4184'
c Var 'aux1040' direct represents '0' with '4184'
c Var 'aux1040' order represents '1' with '4185'
-4184 4185 0
c Var 'aux1040' direct represents '1' with '4186'
4184 -4185 4186 0
-4186 4185 0
-4186 -4184 0
c Var 'aux1040' order represents '2' with '4187'
-4185 4187 0
c Var 'aux1040' direct represents '2' with '4188'
4185 -4187 4188 0
-4188 4187 0
-4188 -4185 0
c Var 'aux1040' order represents '3' with '4189'
-4187 4189 0
c Var 'aux1040' direct represents '3' with '4190'
4187 -4189 4190 0
-4190 4189 0
-4190 -4187 0
c Var 'aux1040' direct represents '4' with '-4189'
4184 4186 4188 4190 -4189 0
c Encoding variable: aux1041 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4191'
c Var 'aux1041' direct represents '0' with '4191'
c Var 'aux1041' order represents '1' with '4192'
-4191 4192 0
c Var 'aux1041' direct represents '1' with '4193'
4191 -4192 4193 0
-4193 4192 0
-4193 -4191 0
c Var 'aux1041' direct represents '2' with '-4192'
4191 4193 -4192 0
c Encoding variable: aux1042 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4194'
c Var 'aux1042' direct represents '0' with '4194'
c Var 'aux1042' order represents '1' with '4195'
-4194 4195 0
c Var 'aux1042' direct represents '1' with '4196'
4194 -4195 4196 0
-4196 4195 0
-4196 -4194 0
c Var 'aux1042' direct represents '2' with '-4195'
4194 4196 -4195 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4197'
c Var 'aux1043' direct represents '0' with '4197'
c Var 'aux1043' order represents '1' with '4198'
-4197 4198 0
c Var 'aux1043' direct represents '1' with '4199'
4197 -4198 4199 0
-4199 4198 0
-4199 -4197 0
c Var 'aux1043' direct represents '2' with '-4198'
4197 4199 -4198 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4200'
c Var 'aux1044' direct represents '0' with '4200'
c Var 'aux1044' order represents '1' with '4201'
-4200 4201 0
c Var 'aux1044' direct represents '1' with '4202'
4200 -4201 4202 0
-4202 4201 0
-4202 -4200 0
c Var 'aux1044' direct represents '2' with '-4201'
4200 4202 -4201 0
c Encoding variable: aux1045 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1044))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4203'
c Var 'aux1045' direct represents '0' with '4203'
c Var 'aux1045' order represents '1' with '4204'
-4203 4204 0
c Var 'aux1045' direct represents '1' with '4205'
4203 -4204 4205 0
-4205 4204 0
-4205 -4203 0
c Var 'aux1045' order represents '2' with '4206'
-4204 4206 0
c Var 'aux1045' direct represents '2' with '4207'
4204 -4206 4207 0
-4207 4206 0
-4207 -4204 0
c Var 'aux1045' direct represents '3' with '-4206'
4203 4205 4207 -4206 0
c Encoding variable: aux1046 with domain: int(0..4) (representing constraint (aux1041 + aux1043))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4208'
c Var 'aux1046' direct represents '0' with '4208'
c Var 'aux1046' order represents '1' with '4209'
-4208 4209 0
c Var 'aux1046' direct represents '1' with '4210'
4208 -4209 4210 0
-4210 4209 0
-4210 -4208 0
c Var 'aux1046' order represents '2' with '4211'
-4209 4211 0
c Var 'aux1046' direct represents '2' with '4212'
4209 -4211 4212 0
-4212 4211 0
-4212 -4209 0
c Var 'aux1046' order represents '3' with '4213'
-4211 4213 0
c Var 'aux1046' direct represents '3' with '4214'
4211 -4213 4214 0
-4214 4213 0
-4214 -4211 0
c Var 'aux1046' direct represents '4' with '-4213'
4208 4210 4212 4214 -4213 0
c Encoding variable: aux1047 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4215'
c Var 'aux1047' direct represents '0' with '4215'
c Var 'aux1047' order represents '1' with '4216'
-4215 4216 0
c Var 'aux1047' direct represents '1' with '4217'
4215 -4216 4217 0
-4217 4216 0
-4217 -4215 0
c Var 'aux1047' direct represents '2' with '-4216'
4215 4217 -4216 0
c Encoding variable: aux1048 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4218'
c Var 'aux1048' direct represents '0' with '4218'
c Var 'aux1048' order represents '1' with '4219'
-4218 4219 0
c Var 'aux1048' direct represents '1' with '4220'
4218 -4219 4220 0
-4220 4219 0
-4220 -4218 0
c Var 'aux1048' direct represents '2' with '-4219'
4218 4220 -4219 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4221'
c Var 'aux1049' direct represents '0' with '4221'
c Var 'aux1049' order represents '1' with '4222'
-4221 4222 0
c Var 'aux1049' direct represents '1' with '4223'
4221 -4222 4223 0
-4223 4222 0
-4223 -4221 0
c Var 'aux1049' direct represents '2' with '-4222'
4221 4223 -4222 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4224'
c Var 'aux1050' direct represents '0' with '4224'
c Var 'aux1050' order represents '1' with '4225'
-4224 4225 0
c Var 'aux1050' direct represents '1' with '4226'
4224 -4225 4226 0
-4226 4225 0
-4226 -4224 0
c Var 'aux1050' direct represents '2' with '-4225'
4224 4226 -4225 0
c Encoding variable: aux1051 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1050))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4227'
c Var 'aux1051' direct represents '0' with '4227'
c Var 'aux1051' order represents '1' with '4228'
-4227 4228 0
c Var 'aux1051' direct represents '1' with '4229'
4227 -4228 4229 0
-4229 4228 0
-4229 -4227 0
c Var 'aux1051' order represents '2' with '4230'
-4228 4230 0
c Var 'aux1051' direct represents '2' with '4231'
4228 -4230 4231 0
-4231 4230 0
-4231 -4228 0
c Var 'aux1051' direct represents '3' with '-4230'
4227 4229 4231 -4230 0
c Encoding variable: aux1052 with domain: int(0..4) (representing constraint (aux1047 + aux1049))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4232'
c Var 'aux1052' direct represents '0' with '4232'
c Var 'aux1052' order represents '1' with '4233'
-4232 4233 0
c Var 'aux1052' direct represents '1' with '4234'
4232 -4233 4234 0
-4234 4233 0
-4234 -4232 0
c Var 'aux1052' order represents '2' with '4235'
-4233 4235 0
c Var 'aux1052' direct represents '2' with '4236'
4233 -4235 4236 0
-4236 4235 0
-4236 -4233 0
c Var 'aux1052' order represents '3' with '4237'
-4235 4237 0
c Var 'aux1052' direct represents '3' with '4238'
4235 -4237 4238 0
-4238 4237 0
-4238 -4235 0
c Var 'aux1052' direct represents '4' with '-4237'
4232 4234 4236 4238 -4237 0
c Encoding variable: aux1053 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4239'
c Var 'aux1053' direct represents '0' with '4239'
c Var 'aux1053' order represents '1' with '4240'
-4239 4240 0
c Var 'aux1053' direct represents '1' with '4241'
4239 -4240 4241 0
-4241 4240 0
-4241 -4239 0
c Var 'aux1053' direct represents '2' with '-4240'
4239 4241 -4240 0
c Encoding variable: aux1054 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4242'
c Var 'aux1054' direct represents '0' with '4242'
c Var 'aux1054' order represents '1' with '4243'
-4242 4243 0
c Var 'aux1054' direct represents '1' with '4244'
4242 -4243 4244 0
-4244 4243 0
-4244 -4242 0
c Var 'aux1054' direct represents '2' with '-4243'
4242 4244 -4243 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4245'
c Var 'aux1055' direct represents '0' with '4245'
c Var 'aux1055' order represents '1' with '4246'
-4245 4246 0
c Var 'aux1055' direct represents '1' with '4247'
4245 -4246 4247 0
-4247 4246 0
-4247 -4245 0
c Var 'aux1055' direct represents '2' with '-4246'
4245 4247 -4246 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4248'
c Var 'aux1056' direct represents '0' with '4248'
c Var 'aux1056' order represents '1' with '4249'
-4248 4249 0
c Var 'aux1056' direct represents '1' with '4250'
4248 -4249 4250 0
-4250 4249 0
-4250 -4248 0
c Var 'aux1056' direct represents '2' with '-4249'
4248 4250 -4249 0
c Encoding variable: aux1057 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1056))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4251'
c Var 'aux1057' direct represents '0' with '4251'
c Var 'aux1057' order represents '1' with '4252'
-4251 4252 0
c Var 'aux1057' direct represents '1' with '4253'
4251 -4252 4253 0
-4253 4252 0
-4253 -4251 0
c Var 'aux1057' order represents '2' with '4254'
-4252 4254 0
c Var 'aux1057' direct represents '2' with '4255'
4252 -4254 4255 0
-4255 4254 0
-4255 -4252 0
c Var 'aux1057' direct represents '3' with '-4254'
4251 4253 4255 -4254 0
c Encoding variable: aux1058 with domain: int(0..4) (representing constraint (aux1053 + aux1055))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4256'
c Var 'aux1058' direct represents '0' with '4256'
c Var 'aux1058' order represents '1' with '4257'
-4256 4257 0
c Var 'aux1058' direct represents '1' with '4258'
4256 -4257 4258 0
-4258 4257 0
-4258 -4256 0
c Var 'aux1058' order represents '2' with '4259'
-4257 4259 0
c Var 'aux1058' direct represents '2' with '4260'
4257 -4259 4260 0
-4260 4259 0
-4260 -4257 0
c Var 'aux1058' order represents '3' with '4261'
-4259 4261 0
c Var 'aux1058' direct represents '3' with '4262'
4259 -4261 4262 0
-4262 4261 0
-4262 -4259 0
c Var 'aux1058' direct represents '4' with '-4261'
4256 4258 4260 4262 -4261 0
c Encoding variable: aux1059 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4263'
c Var 'aux1059' direct represents '0' with '4263'
c Var 'aux1059' order represents '1' with '4264'
-4263 4264 0
c Var 'aux1059' direct represents '1' with '4265'
4263 -4264 4265 0
-4265 4264 0
-4265 -4263 0
c Var 'aux1059' direct represents '2' with '-4264'
4263 4265 -4264 0
c Encoding variable: aux1060 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4266'
c Var 'aux1060' direct represents '0' with '4266'
c Var 'aux1060' order represents '1' with '4267'
-4266 4267 0
c Var 'aux1060' direct represents '1' with '4268'
4266 -4267 4268 0
-4268 4267 0
-4268 -4266 0
c Var 'aux1060' direct represents '2' with '-4267'
4266 4268 -4267 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4269'
c Var 'aux1061' direct represents '0' with '4269'
c Var 'aux1061' order represents '1' with '4270'
-4269 4270 0
c Var 'aux1061' direct represents '1' with '4271'
4269 -4270 4271 0
-4271 4270 0
-4271 -4269 0
c Var 'aux1061' direct represents '2' with '-4270'
4269 4271 -4270 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4272'
c Var 'aux1062' direct represents '0' with '4272'
c Var 'aux1062' order represents '1' with '4273'
-4272 4273 0
c Var 'aux1062' direct represents '1' with '4274'
4272 -4273 4274 0
-4274 4273 0
-4274 -4272 0
c Var 'aux1062' direct represents '2' with '-4273'
4272 4274 -4273 0
c Encoding variable: aux1063 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1062))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4275'
c Var 'aux1063' direct represents '0' with '4275'
c Var 'aux1063' order represents '1' with '4276'
-4275 4276 0
c Var 'aux1063' direct represents '1' with '4277'
4275 -4276 4277 0
-4277 4276 0
-4277 -4275 0
c Var 'aux1063' order represents '2' with '4278'
-4276 4278 0
c Var 'aux1063' direct represents '2' with '4279'
4276 -4278 4279 0
-4279 4278 0
-4279 -4276 0
c Var 'aux1063' direct represents '3' with '-4278'
4275 4277 4279 -4278 0
c Encoding variable: aux1064 with domain: int(0..4) (representing constraint (aux1059 + aux1061))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4280'
c Var 'aux1064' direct represents '0' with '4280'
c Var 'aux1064' order represents '1' with '4281'
-4280 4281 0
c Var 'aux1064' direct represents '1' with '4282'
4280 -4281 4282 0
-4282 4281 0
-4282 -4280 0
c Var 'aux1064' order represents '2' with '4283'
-4281 4283 0
c Var 'aux1064' direct represents '2' with '4284'
4281 -4283 4284 0
-4284 4283 0
-4284 -4281 0
c Var 'aux1064' order represents '3' with '4285'
-4283 4285 0
c Var 'aux1064' direct represents '3' with '4286'
4283 -4285 4286 0
-4286 4285 0
-4286 -4283 0
c Var 'aux1064' direct represents '4' with '-4285'
4280 4282 4284 4286 -4285 0
c Encoding variable: aux1065 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4287'
c Var 'aux1065' direct represents '0' with '4287'
c Var 'aux1065' order represents '1' with '4288'
-4287 4288 0
c Var 'aux1065' direct represents '1' with '4289'
4287 -4288 4289 0
-4289 4288 0
-4289 -4287 0
c Var 'aux1065' direct represents '2' with '-4288'
4287 4289 -4288 0
c Encoding variable: aux1066 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4290'
c Var 'aux1066' direct represents '0' with '4290'
c Var 'aux1066' order represents '1' with '4291'
-4290 4291 0
c Var 'aux1066' direct represents '1' with '4292'
4290 -4291 4292 0
-4292 4291 0
-4292 -4290 0
c Var 'aux1066' direct represents '2' with '-4291'
4290 4292 -4291 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4293'
c Var 'aux1067' direct represents '0' with '4293'
c Var 'aux1067' order represents '1' with '4294'
-4293 4294 0
c Var 'aux1067' direct represents '1' with '4295'
4293 -4294 4295 0
-4295 4294 0
-4295 -4293 0
c Var 'aux1067' direct represents '2' with '-4294'
4293 4295 -4294 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4296'
c Var 'aux1068' direct represents '0' with '4296'
c Var 'aux1068' order represents '1' with '4297'
-4296 4297 0
c Var 'aux1068' direct represents '1' with '4298'
4296 -4297 4298 0
-4298 4297 0
-4298 -4296 0
c Var 'aux1068' direct represents '2' with '-4297'
4296 4298 -4297 0
c Encoding variable: aux1069 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1068))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4299'
c Var 'aux1069' direct represents '0' with '4299'
c Var 'aux1069' order represents '1' with '4300'
-4299 4300 0
c Var 'aux1069' direct represents '1' with '4301'
4299 -4300 4301 0
-4301 4300 0
-4301 -4299 0
c Var 'aux1069' order represents '2' with '4302'
-4300 4302 0
c Var 'aux1069' direct represents '2' with '4303'
4300 -4302 4303 0
-4303 4302 0
-4303 -4300 0
c Var 'aux1069' direct represents '3' with '-4302'
4299 4301 4303 -4302 0
c Encoding variable: aux1070 with domain: int(0..4) (representing constraint (aux1065 + aux1067))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4304'
c Var 'aux1070' direct represents '0' with '4304'
c Var 'aux1070' order represents '1' with '4305'
-4304 4305 0
c Var 'aux1070' direct represents '1' with '4306'
4304 -4305 4306 0
-4306 4305 0
-4306 -4304 0
c Var 'aux1070' order represents '2' with '4307'
-4305 4307 0
c Var 'aux1070' direct represents '2' with '4308'
4305 -4307 4308 0
-4308 4307 0
-4308 -4305 0
c Var 'aux1070' order represents '3' with '4309'
-4307 4309 0
c Var 'aux1070' direct represents '3' with '4310'
4307 -4309 4310 0
-4310 4309 0
-4310 -4307 0
c Var 'aux1070' direct represents '4' with '-4309'
4304 4306 4308 4310 -4309 0
c Encoding variable: aux1071 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4311'
c Var 'aux1071' direct represents '0' with '4311'
c Var 'aux1071' order represents '1' with '4312'
-4311 4312 0
c Var 'aux1071' direct represents '1' with '4313'
4311 -4312 4313 0
-4313 4312 0
-4313 -4311 0
c Var 'aux1071' direct represents '2' with '-4312'
4311 4313 -4312 0
c Encoding variable: aux1072 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4314'
c Var 'aux1072' direct represents '0' with '4314'
c Var 'aux1072' order represents '1' with '4315'
-4314 4315 0
c Var 'aux1072' direct represents '1' with '4316'
4314 -4315 4316 0
-4316 4315 0
-4316 -4314 0
c Var 'aux1072' direct represents '2' with '-4315'
4314 4316 -4315 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4317'
c Var 'aux1073' direct represents '0' with '4317'
c Var 'aux1073' order represents '1' with '4318'
-4317 4318 0
c Var 'aux1073' direct represents '1' with '4319'
4317 -4318 4319 0
-4319 4318 0
-4319 -4317 0
c Var 'aux1073' direct represents '2' with '-4318'
4317 4319 -4318 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4320'
c Var 'aux1074' direct represents '0' with '4320'
c Var 'aux1074' order represents '1' with '4321'
-4320 4321 0
c Var 'aux1074' direct represents '1' with '4322'
4320 -4321 4322 0
-4322 4321 0
-4322 -4320 0
c Var 'aux1074' direct represents '2' with '-4321'
4320 4322 -4321 0
c Encoding variable: aux1075 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1074))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4323'
c Var 'aux1075' direct represents '0' with '4323'
c Var 'aux1075' order represents '1' with '4324'
-4323 4324 0
c Var 'aux1075' direct represents '1' with '4325'
4323 -4324 4325 0
-4325 4324 0
-4325 -4323 0
c Var 'aux1075' order represents '2' with '4326'
-4324 4326 0
c Var 'aux1075' direct represents '2' with '4327'
4324 -4326 4327 0
-4327 4326 0
-4327 -4324 0
c Var 'aux1075' direct represents '3' with '-4326'
4323 4325 4327 -4326 0
c Encoding variable: aux1076 with domain: int(0..4) (representing constraint (aux1071 + aux1073))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4328'
c Var 'aux1076' direct represents '0' with '4328'
c Var 'aux1076' order represents '1' with '4329'
-4328 4329 0
c Var 'aux1076' direct represents '1' with '4330'
4328 -4329 4330 0
-4330 4329 0
-4330 -4328 0
c Var 'aux1076' order represents '2' with '4331'
-4329 4331 0
c Var 'aux1076' direct represents '2' with '4332'
4329 -4331 4332 0
-4332 4331 0
-4332 -4329 0
c Var 'aux1076' order represents '3' with '4333'
-4331 4333 0
c Var 'aux1076' direct represents '3' with '4334'
4331 -4333 4334 0
-4334 4333 0
-4334 -4331 0
c Var 'aux1076' direct represents '4' with '-4333'
4328 4330 4332 4334 -4333 0
c Encoding variable: aux1077 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4335'
c Var 'aux1077' direct represents '0' with '4335'
c Var 'aux1077' order represents '1' with '4336'
-4335 4336 0
c Var 'aux1077' direct represents '1' with '4337'
4335 -4336 4337 0
-4337 4336 0
-4337 -4335 0
c Var 'aux1077' direct represents '2' with '-4336'
4335 4337 -4336 0
c Encoding variable: aux1078 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4338'
c Var 'aux1078' direct represents '0' with '4338'
c Var 'aux1078' order represents '1' with '4339'
-4338 4339 0
c Var 'aux1078' direct represents '1' with '4340'
4338 -4339 4340 0
-4340 4339 0
-4340 -4338 0
c Var 'aux1078' direct represents '2' with '-4339'
4338 4340 -4339 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4341'
c Var 'aux1079' direct represents '0' with '4341'
c Var 'aux1079' order represents '1' with '4342'
-4341 4342 0
c Var 'aux1079' direct represents '1' with '4343'
4341 -4342 4343 0
-4343 4342 0
-4343 -4341 0
c Var 'aux1079' direct represents '2' with '-4342'
4341 4343 -4342 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4344'
c Var 'aux1080' direct represents '0' with '4344'
c Var 'aux1080' order represents '1' with '4345'
-4344 4345 0
c Var 'aux1080' direct represents '1' with '4346'
4344 -4345 4346 0
-4346 4345 0
-4346 -4344 0
c Var 'aux1080' direct represents '2' with '-4345'
4344 4346 -4345 0
c Encoding variable: aux1081 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1080))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4347'
c Var 'aux1081' direct represents '0' with '4347'
c Var 'aux1081' order represents '1' with '4348'
-4347 4348 0
c Var 'aux1081' direct represents '1' with '4349'
4347 -4348 4349 0
-4349 4348 0
-4349 -4347 0
c Var 'aux1081' order represents '2' with '4350'
-4348 4350 0
c Var 'aux1081' direct represents '2' with '4351'
4348 -4350 4351 0
-4351 4350 0
-4351 -4348 0
c Var 'aux1081' direct represents '3' with '-4350'
4347 4349 4351 -4350 0
c Encoding variable: aux1082 with domain: int(0..4) (representing constraint (aux1077 + aux1079))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4352'
c Var 'aux1082' direct represents '0' with '4352'
c Var 'aux1082' order represents '1' with '4353'
-4352 4353 0
c Var 'aux1082' direct represents '1' with '4354'
4352 -4353 4354 0
-4354 4353 0
-4354 -4352 0
c Var 'aux1082' order represents '2' with '4355'
-4353 4355 0
c Var 'aux1082' direct represents '2' with '4356'
4353 -4355 4356 0
-4356 4355 0
-4356 -4353 0
c Var 'aux1082' order represents '3' with '4357'
-4355 4357 0
c Var 'aux1082' direct represents '3' with '4358'
4355 -4357 4358 0
-4358 4357 0
-4358 -4355 0
c Var 'aux1082' direct represents '4' with '-4357'
4352 4354 4356 4358 -4357 0
c Encoding variable: aux1083 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4359'
c Var 'aux1083' direct represents '0' with '4359'
c Var 'aux1083' order represents '1' with '4360'
-4359 4360 0
c Var 'aux1083' direct represents '1' with '4361'
4359 -4360 4361 0
-4361 4360 0
-4361 -4359 0
c Var 'aux1083' direct represents '2' with '-4360'
4359 4361 -4360 0
c Encoding variable: aux1084 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4362'
c Var 'aux1084' direct represents '0' with '4362'
c Var 'aux1084' order represents '1' with '4363'
-4362 4363 0
c Var 'aux1084' direct represents '1' with '4364'
4362 -4363 4364 0
-4364 4363 0
-4364 -4362 0
c Var 'aux1084' direct represents '2' with '-4363'
4362 4364 -4363 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4365'
c Var 'aux1085' direct represents '0' with '4365'
c Var 'aux1085' order represents '1' with '4366'
-4365 4366 0
c Var 'aux1085' direct represents '1' with '4367'
4365 -4366 4367 0
-4367 4366 0
-4367 -4365 0
c Var 'aux1085' direct represents '2' with '-4366'
4365 4367 -4366 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4368'
c Var 'aux1086' direct represents '0' with '4368'
c Var 'aux1086' order represents '1' with '4369'
-4368 4369 0
c Var 'aux1086' direct represents '1' with '4370'
4368 -4369 4370 0
-4370 4369 0
-4370 -4368 0
c Var 'aux1086' direct represents '2' with '-4369'
4368 4370 -4369 0
c Encoding variable: aux1087 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1086))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4371'
c Var 'aux1087' direct represents '0' with '4371'
c Var 'aux1087' order represents '1' with '4372'
-4371 4372 0
c Var 'aux1087' direct represents '1' with '4373'
4371 -4372 4373 0
-4373 4372 0
-4373 -4371 0
c Var 'aux1087' order represents '2' with '4374'
-4372 4374 0
c Var 'aux1087' direct represents '2' with '4375'
4372 -4374 4375 0
-4375 4374 0
-4375 -4372 0
c Var 'aux1087' direct represents '3' with '-4374'
4371 4373 4375 -4374 0
c Encoding variable: aux1088 with domain: int(0..4) (representing constraint (aux1083 + aux1085))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4376'
c Var 'aux1088' direct represents '0' with '4376'
c Var 'aux1088' order represents '1' with '4377'
-4376 4377 0
c Var 'aux1088' direct represents '1' with '4378'
4376 -4377 4378 0
-4378 4377 0
-4378 -4376 0
c Var 'aux1088' order represents '2' with '4379'
-4377 4379 0
c Var 'aux1088' direct represents '2' with '4380'
4377 -4379 4380 0
-4380 4379 0
-4380 -4377 0
c Var 'aux1088' order represents '3' with '4381'
-4379 4381 0
c Var 'aux1088' direct represents '3' with '4382'
4379 -4381 4382 0
-4382 4381 0
-4382 -4379 0
c Var 'aux1088' direct represents '4' with '-4381'
4376 4378 4380 4382 -4381 0
c Encoding variable: aux1089 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4383'
c Var 'aux1089' direct represents '0' with '4383'
c Var 'aux1089' order represents '1' with '4384'
-4383 4384 0
c Var 'aux1089' direct represents '1' with '4385'
4383 -4384 4385 0
-4385 4384 0
-4385 -4383 0
c Var 'aux1089' direct represents '2' with '-4384'
4383 4385 -4384 0
c Encoding variable: aux1090 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4386'
c Var 'aux1090' direct represents '0' with '4386'
c Var 'aux1090' order represents '1' with '4387'
-4386 4387 0
c Var 'aux1090' direct represents '1' with '4388'
4386 -4387 4388 0
-4388 4387 0
-4388 -4386 0
c Var 'aux1090' direct represents '2' with '-4387'
4386 4388 -4387 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4389'
c Var 'aux1091' direct represents '0' with '4389'
c Var 'aux1091' order represents '1' with '4390'
-4389 4390 0
c Var 'aux1091' direct represents '1' with '4391'
4389 -4390 4391 0
-4391 4390 0
-4391 -4389 0
c Var 'aux1091' direct represents '2' with '-4390'
4389 4391 -4390 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4392'
c Var 'aux1092' direct represents '0' with '4392'
c Var 'aux1092' order represents '1' with '4393'
-4392 4393 0
c Var 'aux1092' direct represents '1' with '4394'
4392 -4393 4394 0
-4394 4393 0
-4394 -4392 0
c Var 'aux1092' direct represents '2' with '-4393'
4392 4394 -4393 0
c Encoding variable: aux1093 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1092))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4395'
c Var 'aux1093' direct represents '0' with '4395'
c Var 'aux1093' order represents '1' with '4396'
-4395 4396 0
c Var 'aux1093' direct represents '1' with '4397'
4395 -4396 4397 0
-4397 4396 0
-4397 -4395 0
c Var 'aux1093' order represents '2' with '4398'
-4396 4398 0
c Var 'aux1093' direct represents '2' with '4399'
4396 -4398 4399 0
-4399 4398 0
-4399 -4396 0
c Var 'aux1093' direct represents '3' with '-4398'
4395 4397 4399 -4398 0
c Encoding variable: aux1094 with domain: int(0..4) (representing constraint (aux1089 + aux1091))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4400'
c Var 'aux1094' direct represents '0' with '4400'
c Var 'aux1094' order represents '1' with '4401'
-4400 4401 0
c Var 'aux1094' direct represents '1' with '4402'
4400 -4401 4402 0
-4402 4401 0
-4402 -4400 0
c Var 'aux1094' order represents '2' with '4403'
-4401 4403 0
c Var 'aux1094' direct represents '2' with '4404'
4401 -4403 4404 0
-4404 4403 0
-4404 -4401 0
c Var 'aux1094' order represents '3' with '4405'
-4403 4405 0
c Var 'aux1094' direct represents '3' with '4406'
4403 -4405 4406 0
-4406 4405 0
-4406 -4403 0
c Var 'aux1094' direct represents '4' with '-4405'
4400 4402 4404 4406 -4405 0
c Encoding variable: aux1095 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4407'
c Var 'aux1095' direct represents '0' with '4407'
c Var 'aux1095' order represents '1' with '4408'
-4407 4408 0
c Var 'aux1095' direct represents '1' with '4409'
4407 -4408 4409 0
-4409 4408 0
-4409 -4407 0
c Var 'aux1095' direct represents '2' with '-4408'
4407 4409 -4408 0
c Encoding variable: aux1096 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4410'
c Var 'aux1096' direct represents '0' with '4410'
c Var 'aux1096' order represents '1' with '4411'
-4410 4411 0
c Var 'aux1096' direct represents '1' with '4412'
4410 -4411 4412 0
-4412 4411 0
-4412 -4410 0
c Var 'aux1096' direct represents '2' with '-4411'
4410 4412 -4411 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4413'
c Var 'aux1097' direct represents '0' with '4413'
c Var 'aux1097' order represents '1' with '4414'
-4413 4414 0
c Var 'aux1097' direct represents '1' with '4415'
4413 -4414 4415 0
-4415 4414 0
-4415 -4413 0
c Var 'aux1097' direct represents '2' with '-4414'
4413 4415 -4414 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4416'
c Var 'aux1098' direct represents '0' with '4416'
c Var 'aux1098' order represents '1' with '4417'
-4416 4417 0
c Var 'aux1098' direct represents '1' with '4418'
4416 -4417 4418 0
-4418 4417 0
-4418 -4416 0
c Var 'aux1098' direct represents '2' with '-4417'
4416 4418 -4417 0
c Encoding variable: aux1099 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1098))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4419'
c Var 'aux1099' direct represents '0' with '4419'
c Var 'aux1099' order represents '1' with '4420'
-4419 4420 0
c Var 'aux1099' direct represents '1' with '4421'
4419 -4420 4421 0
-4421 4420 0
-4421 -4419 0
c Var 'aux1099' order represents '2' with '4422'
-4420 4422 0
c Var 'aux1099' direct represents '2' with '4423'
4420 -4422 4423 0
-4423 4422 0
-4423 -4420 0
c Var 'aux1099' direct represents '3' with '-4422'
4419 4421 4423 -4422 0
c Encoding variable: aux1100 with domain: int(0..4) (representing constraint (aux1095 + aux1097))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4424'
c Var 'aux1100' direct represents '0' with '4424'
c Var 'aux1100' order represents '1' with '4425'
-4424 4425 0
c Var 'aux1100' direct represents '1' with '4426'
4424 -4425 4426 0
-4426 4425 0
-4426 -4424 0
c Var 'aux1100' order represents '2' with '4427'
-4425 4427 0
c Var 'aux1100' direct represents '2' with '4428'
4425 -4427 4428 0
-4428 4427 0
-4428 -4425 0
c Var 'aux1100' order represents '3' with '4429'
-4427 4429 0
c Var 'aux1100' direct represents '3' with '4430'
4427 -4429 4430 0
-4430 4429 0
-4430 -4427 0
c Var 'aux1100' direct represents '4' with '-4429'
4424 4426 4428 4430 -4429 0
c Encoding variable: aux1101 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4431'
c Var 'aux1101' direct represents '0' with '4431'
c Var 'aux1101' order represents '1' with '4432'
-4431 4432 0
c Var 'aux1101' direct represents '1' with '4433'
4431 -4432 4433 0
-4433 4432 0
-4433 -4431 0
c Var 'aux1101' direct represents '2' with '-4432'
4431 4433 -4432 0
c Encoding variable: aux1102 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4434'
c Var 'aux1102' direct represents '0' with '4434'
c Var 'aux1102' order represents '1' with '4435'
-4434 4435 0
c Var 'aux1102' direct represents '1' with '4436'
4434 -4435 4436 0
-4436 4435 0
-4436 -4434 0
c Var 'aux1102' direct represents '2' with '-4435'
4434 4436 -4435 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4437'
c Var 'aux1103' direct represents '0' with '4437'
c Var 'aux1103' order represents '1' with '4438'
-4437 4438 0
c Var 'aux1103' direct represents '1' with '4439'
4437 -4438 4439 0
-4439 4438 0
-4439 -4437 0
c Var 'aux1103' direct represents '2' with '-4438'
4437 4439 -4438 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4440'
c Var 'aux1104' direct represents '0' with '4440'
c Var 'aux1104' order represents '1' with '4441'
-4440 4441 0
c Var 'aux1104' direct represents '1' with '4442'
4440 -4441 4442 0
-4442 4441 0
-4442 -4440 0
c Var 'aux1104' direct represents '2' with '-4441'
4440 4442 -4441 0
c Encoding variable: aux1105 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1104))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4443'
c Var 'aux1105' direct represents '0' with '4443'
c Var 'aux1105' order represents '1' with '4444'
-4443 4444 0
c Var 'aux1105' direct represents '1' with '4445'
4443 -4444 4445 0
-4445 4444 0
-4445 -4443 0
c Var 'aux1105' order represents '2' with '4446'
-4444 4446 0
c Var 'aux1105' direct represents '2' with '4447'
4444 -4446 4447 0
-4447 4446 0
-4447 -4444 0
c Var 'aux1105' direct represents '3' with '-4446'
4443 4445 4447 -4446 0
c Encoding variable: aux1106 with domain: int(0..4) (representing constraint (aux1101 + aux1103))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4448'
c Var 'aux1106' direct represents '0' with '4448'
c Var 'aux1106' order represents '1' with '4449'
-4448 4449 0
c Var 'aux1106' direct represents '1' with '4450'
4448 -4449 4450 0
-4450 4449 0
-4450 -4448 0
c Var 'aux1106' order represents '2' with '4451'
-4449 4451 0
c Var 'aux1106' direct represents '2' with '4452'
4449 -4451 4452 0
-4452 4451 0
-4452 -4449 0
c Var 'aux1106' order represents '3' with '4453'
-4451 4453 0
c Var 'aux1106' direct represents '3' with '4454'
4451 -4453 4454 0
-4454 4453 0
-4454 -4451 0
c Var 'aux1106' direct represents '4' with '-4453'
4448 4450 4452 4454 -4453 0
c Encoding variable: aux1107 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4455'
c Var 'aux1107' direct represents '0' with '4455'
c Var 'aux1107' order represents '1' with '4456'
-4455 4456 0
c Var 'aux1107' direct represents '1' with '4457'
4455 -4456 4457 0
-4457 4456 0
-4457 -4455 0
c Var 'aux1107' direct represents '2' with '-4456'
4455 4457 -4456 0
c Encoding variable: aux1108 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4458'
c Var 'aux1108' direct represents '0' with '4458'
c Var 'aux1108' order represents '1' with '4459'
-4458 4459 0
c Var 'aux1108' direct represents '1' with '4460'
4458 -4459 4460 0
-4460 4459 0
-4460 -4458 0
c Var 'aux1108' direct represents '2' with '-4459'
4458 4460 -4459 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4461'
c Var 'aux1109' direct represents '0' with '4461'
c Var 'aux1109' order represents '1' with '4462'
-4461 4462 0
c Var 'aux1109' direct represents '1' with '4463'
4461 -4462 4463 0
-4463 4462 0
-4463 -4461 0
c Var 'aux1109' direct represents '2' with '-4462'
4461 4463 -4462 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4464'
c Var 'aux1110' direct represents '0' with '4464'
c Var 'aux1110' order represents '1' with '4465'
-4464 4465 0
c Var 'aux1110' direct represents '1' with '4466'
4464 -4465 4466 0
-4466 4465 0
-4466 -4464 0
c Var 'aux1110' direct represents '2' with '-4465'
4464 4466 -4465 0
c Encoding variable: aux1111 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1110))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4467'
c Var 'aux1111' direct represents '0' with '4467'
c Var 'aux1111' order represents '1' with '4468'
-4467 4468 0
c Var 'aux1111' direct represents '1' with '4469'
4467 -4468 4469 0
-4469 4468 0
-4469 -4467 0
c Var 'aux1111' order represents '2' with '4470'
-4468 4470 0
c Var 'aux1111' direct represents '2' with '4471'
4468 -4470 4471 0
-4471 4470 0
-4471 -4468 0
c Var 'aux1111' direct represents '3' with '-4470'
4467 4469 4471 -4470 0
c Encoding variable: aux1112 with domain: int(0..4) (representing constraint (aux1107 + aux1109))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4472'
c Var 'aux1112' direct represents '0' with '4472'
c Var 'aux1112' order represents '1' with '4473'
-4472 4473 0
c Var 'aux1112' direct represents '1' with '4474'
4472 -4473 4474 0
-4474 4473 0
-4474 -4472 0
c Var 'aux1112' order represents '2' with '4475'
-4473 4475 0
c Var 'aux1112' direct represents '2' with '4476'
4473 -4475 4476 0
-4476 4475 0
-4476 -4473 0
c Var 'aux1112' order represents '3' with '4477'
-4475 4477 0
c Var 'aux1112' direct represents '3' with '4478'
4475 -4477 4478 0
-4478 4477 0
-4478 -4475 0
c Var 'aux1112' direct represents '4' with '-4477'
4472 4474 4476 4478 -4477 0
c Encoding variable: aux1113 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4479'
c Var 'aux1113' direct represents '0' with '4479'
c Var 'aux1113' order represents '1' with '4480'
-4479 4480 0
c Var 'aux1113' direct represents '1' with '4481'
4479 -4480 4481 0
-4481 4480 0
-4481 -4479 0
c Var 'aux1113' direct represents '2' with '-4480'
4479 4481 -4480 0
c Encoding variable: aux1114 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4482'
c Var 'aux1114' direct represents '0' with '4482'
c Var 'aux1114' order represents '1' with '4483'
-4482 4483 0
c Var 'aux1114' direct represents '1' with '4484'
4482 -4483 4484 0
-4484 4483 0
-4484 -4482 0
c Var 'aux1114' direct represents '2' with '-4483'
4482 4484 -4483 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4485'
c Var 'aux1115' direct represents '0' with '4485'
c Var 'aux1115' order represents '1' with '4486'
-4485 4486 0
c Var 'aux1115' direct represents '1' with '4487'
4485 -4486 4487 0
-4487 4486 0
-4487 -4485 0
c Var 'aux1115' direct represents '2' with '-4486'
4485 4487 -4486 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4488'
c Var 'aux1116' direct represents '0' with '4488'
c Var 'aux1116' order represents '1' with '4489'
-4488 4489 0
c Var 'aux1116' direct represents '1' with '4490'
4488 -4489 4490 0
-4490 4489 0
-4490 -4488 0
c Var 'aux1116' direct represents '2' with '-4489'
4488 4490 -4489 0
c Encoding variable: aux1117 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1116))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4491'
c Var 'aux1117' direct represents '0' with '4491'
c Var 'aux1117' order represents '1' with '4492'
-4491 4492 0
c Var 'aux1117' direct represents '1' with '4493'
4491 -4492 4493 0
-4493 4492 0
-4493 -4491 0
c Var 'aux1117' order represents '2' with '4494'
-4492 4494 0
c Var 'aux1117' direct represents '2' with '4495'
4492 -4494 4495 0
-4495 4494 0
-4495 -4492 0
c Var 'aux1117' direct represents '3' with '-4494'
4491 4493 4495 -4494 0
c Encoding variable: aux1118 with domain: int(0..4) (representing constraint (aux1113 + aux1115))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4496'
c Var 'aux1118' direct represents '0' with '4496'
c Var 'aux1118' order represents '1' with '4497'
-4496 4497 0
c Var 'aux1118' direct represents '1' with '4498'
4496 -4497 4498 0
-4498 4497 0
-4498 -4496 0
c Var 'aux1118' order represents '2' with '4499'
-4497 4499 0
c Var 'aux1118' direct represents '2' with '4500'
4497 -4499 4500 0
-4500 4499 0
-4500 -4497 0
c Var 'aux1118' order represents '3' with '4501'
-4499 4501 0
c Var 'aux1118' direct represents '3' with '4502'
4499 -4501 4502 0
-4502 4501 0
-4502 -4499 0
c Var 'aux1118' direct represents '4' with '-4501'
4496 4498 4500 4502 -4501 0
c Encoding variable: aux1119 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4503'
c Var 'aux1119' direct represents '0' with '4503'
c Var 'aux1119' order represents '1' with '4504'
-4503 4504 0
c Var 'aux1119' direct represents '1' with '4505'
4503 -4504 4505 0
-4505 4504 0
-4505 -4503 0
c Var 'aux1119' direct represents '2' with '-4504'
4503 4505 -4504 0
c Encoding variable: aux1120 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4506'
c Var 'aux1120' direct represents '0' with '4506'
c Var 'aux1120' order represents '1' with '4507'
-4506 4507 0
c Var 'aux1120' direct represents '1' with '4508'
4506 -4507 4508 0
-4508 4507 0
-4508 -4506 0
c Var 'aux1120' direct represents '2' with '-4507'
4506 4508 -4507 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4509'
c Var 'aux1121' direct represents '0' with '4509'
c Var 'aux1121' order represents '1' with '4510'
-4509 4510 0
c Var 'aux1121' direct represents '1' with '4511'
4509 -4510 4511 0
-4511 4510 0
-4511 -4509 0
c Var 'aux1121' direct represents '2' with '-4510'
4509 4511 -4510 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4512'
c Var 'aux1122' direct represents '0' with '4512'
c Var 'aux1122' order represents '1' with '4513'
-4512 4513 0
c Var 'aux1122' direct represents '1' with '4514'
4512 -4513 4514 0
-4514 4513 0
-4514 -4512 0
c Var 'aux1122' direct represents '2' with '-4513'
4512 4514 -4513 0
c Encoding variable: aux1123 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1122))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4515'
c Var 'aux1123' direct represents '0' with '4515'
c Var 'aux1123' order represents '1' with '4516'
-4515 4516 0
c Var 'aux1123' direct represents '1' with '4517'
4515 -4516 4517 0
-4517 4516 0
-4517 -4515 0
c Var 'aux1123' order represents '2' with '4518'
-4516 4518 0
c Var 'aux1123' direct represents '2' with '4519'
4516 -4518 4519 0
-4519 4518 0
-4519 -4516 0
c Var 'aux1123' direct represents '3' with '-4518'
4515 4517 4519 -4518 0
c Encoding variable: aux1124 with domain: int(0..4) (representing constraint (aux1119 + aux1121))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4520'
c Var 'aux1124' direct represents '0' with '4520'
c Var 'aux1124' order represents '1' with '4521'
-4520 4521 0
c Var 'aux1124' direct represents '1' with '4522'
4520 -4521 4522 0
-4522 4521 0
-4522 -4520 0
c Var 'aux1124' order represents '2' with '4523'
-4521 4523 0
c Var 'aux1124' direct represents '2' with '4524'
4521 -4523 4524 0
-4524 4523 0
-4524 -4521 0
c Var 'aux1124' order represents '3' with '4525'
-4523 4525 0
c Var 'aux1124' direct represents '3' with '4526'
4523 -4525 4526 0
-4526 4525 0
-4526 -4523 0
c Var 'aux1124' direct represents '4' with '-4525'
4520 4522 4524 4526 -4525 0
c Encoding variable: aux1125 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4527'
c Var 'aux1125' direct represents '0' with '4527'
c Var 'aux1125' order represents '1' with '4528'
-4527 4528 0
c Var 'aux1125' direct represents '1' with '4529'
4527 -4528 4529 0
-4529 4528 0
-4529 -4527 0
c Var 'aux1125' direct represents '2' with '-4528'
4527 4529 -4528 0
c Encoding variable: aux1126 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4530'
c Var 'aux1126' direct represents '0' with '4530'
c Var 'aux1126' order represents '1' with '4531'
-4530 4531 0
c Var 'aux1126' direct represents '1' with '4532'
4530 -4531 4532 0
-4532 4531 0
-4532 -4530 0
c Var 'aux1126' direct represents '2' with '-4531'
4530 4532 -4531 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4533'
c Var 'aux1127' direct represents '0' with '4533'
c Var 'aux1127' order represents '1' with '4534'
-4533 4534 0
c Var 'aux1127' direct represents '1' with '4535'
4533 -4534 4535 0
-4535 4534 0
-4535 -4533 0
c Var 'aux1127' direct represents '2' with '-4534'
4533 4535 -4534 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4536'
c Var 'aux1128' direct represents '0' with '4536'
c Var 'aux1128' order represents '1' with '4537'
-4536 4537 0
c Var 'aux1128' direct represents '1' with '4538'
4536 -4537 4538 0
-4538 4537 0
-4538 -4536 0
c Var 'aux1128' direct represents '2' with '-4537'
4536 4538 -4537 0
c Encoding variable: aux1129 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1128))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4539'
c Var 'aux1129' direct represents '0' with '4539'
c Var 'aux1129' order represents '1' with '4540'
-4539 4540 0
c Var 'aux1129' direct represents '1' with '4541'
4539 -4540 4541 0
-4541 4540 0
-4541 -4539 0
c Var 'aux1129' order represents '2' with '4542'
-4540 4542 0
c Var 'aux1129' direct represents '2' with '4543'
4540 -4542 4543 0
-4543 4542 0
-4543 -4540 0
c Var 'aux1129' direct represents '3' with '-4542'
4539 4541 4543 -4542 0
c Encoding variable: aux1130 with domain: int(0..4) (representing constraint (aux1125 + aux1127))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4544'
c Var 'aux1130' direct represents '0' with '4544'
c Var 'aux1130' order represents '1' with '4545'
-4544 4545 0
c Var 'aux1130' direct represents '1' with '4546'
4544 -4545 4546 0
-4546 4545 0
-4546 -4544 0
c Var 'aux1130' order represents '2' with '4547'
-4545 4547 0
c Var 'aux1130' direct represents '2' with '4548'
4545 -4547 4548 0
-4548 4547 0
-4548 -4545 0
c Var 'aux1130' order represents '3' with '4549'
-4547 4549 0
c Var 'aux1130' direct represents '3' with '4550'
4547 -4549 4550 0
-4550 4549 0
-4550 -4547 0
c Var 'aux1130' direct represents '4' with '-4549'
4544 4546 4548 4550 -4549 0
c Encoding variable: aux1131 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4551'
c Var 'aux1131' direct represents '0' with '4551'
c Var 'aux1131' order represents '1' with '4552'
-4551 4552 0
c Var 'aux1131' direct represents '1' with '4553'
4551 -4552 4553 0
-4553 4552 0
-4553 -4551 0
c Var 'aux1131' direct represents '2' with '-4552'
4551 4553 -4552 0
c Encoding variable: aux1132 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4554'
c Var 'aux1132' direct represents '0' with '4554'
c Var 'aux1132' order represents '1' with '4555'
-4554 4555 0
c Var 'aux1132' direct represents '1' with '4556'
4554 -4555 4556 0
-4556 4555 0
-4556 -4554 0
c Var 'aux1132' direct represents '2' with '-4555'
4554 4556 -4555 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4557'
c Var 'aux1133' direct represents '0' with '4557'
c Var 'aux1133' order represents '1' with '4558'
-4557 4558 0
c Var 'aux1133' direct represents '1' with '4559'
4557 -4558 4559 0
-4559 4558 0
-4559 -4557 0
c Var 'aux1133' direct represents '2' with '-4558'
4557 4559 -4558 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4560'
c Var 'aux1134' direct represents '0' with '4560'
c Var 'aux1134' order represents '1' with '4561'
-4560 4561 0
c Var 'aux1134' direct represents '1' with '4562'
4560 -4561 4562 0
-4562 4561 0
-4562 -4560 0
c Var 'aux1134' direct represents '2' with '-4561'
4560 4562 -4561 0
c Encoding variable: aux1135 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1134))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4563'
c Var 'aux1135' direct represents '0' with '4563'
c Var 'aux1135' order represents '1' with '4564'
-4563 4564 0
c Var 'aux1135' direct represents '1' with '4565'
4563 -4564 4565 0
-4565 4564 0
-4565 -4563 0
c Var 'aux1135' order represents '2' with '4566'
-4564 4566 0
c Var 'aux1135' direct represents '2' with '4567'
4564 -4566 4567 0
-4567 4566 0
-4567 -4564 0
c Var 'aux1135' direct represents '3' with '-4566'
4563 4565 4567 -4566 0
c Encoding variable: aux1136 with domain: int(0..4) (representing constraint (aux1131 + aux1133))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4568'
c Var 'aux1136' direct represents '0' with '4568'
c Var 'aux1136' order represents '1' with '4569'
-4568 4569 0
c Var 'aux1136' direct represents '1' with '4570'
4568 -4569 4570 0
-4570 4569 0
-4570 -4568 0
c Var 'aux1136' order represents '2' with '4571'
-4569 4571 0
c Var 'aux1136' direct represents '2' with '4572'
4569 -4571 4572 0
-4572 4571 0
-4572 -4569 0
c Var 'aux1136' order represents '3' with '4573'
-4571 4573 0
c Var 'aux1136' direct represents '3' with '4574'
4571 -4573 4574 0
-4574 4573 0
-4574 -4571 0
c Var 'aux1136' direct represents '4' with '-4573'
4568 4570 4572 4574 -4573 0
c Encoding variable: aux1137 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4575'
c Var 'aux1137' direct represents '0' with '4575'
c Var 'aux1137' order represents '1' with '4576'
-4575 4576 0
c Var 'aux1137' direct represents '1' with '4577'
4575 -4576 4577 0
-4577 4576 0
-4577 -4575 0
c Var 'aux1137' direct represents '2' with '-4576'
4575 4577 -4576 0
c Encoding variable: aux1138 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4578'
c Var 'aux1138' direct represents '0' with '4578'
c Var 'aux1138' order represents '1' with '4579'
-4578 4579 0
c Var 'aux1138' direct represents '1' with '4580'
4578 -4579 4580 0
-4580 4579 0
-4580 -4578 0
c Var 'aux1138' direct represents '2' with '-4579'
4578 4580 -4579 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4581'
c Var 'aux1139' direct represents '0' with '4581'
c Var 'aux1139' order represents '1' with '4582'
-4581 4582 0
c Var 'aux1139' direct represents '1' with '4583'
4581 -4582 4583 0
-4583 4582 0
-4583 -4581 0
c Var 'aux1139' direct represents '2' with '-4582'
4581 4583 -4582 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4584'
c Var 'aux1140' direct represents '0' with '4584'
c Var 'aux1140' order represents '1' with '4585'
-4584 4585 0
c Var 'aux1140' direct represents '1' with '4586'
4584 -4585 4586 0
-4586 4585 0
-4586 -4584 0
c Var 'aux1140' direct represents '2' with '-4585'
4584 4586 -4585 0
c Encoding variable: aux1141 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1140))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4587'
c Var 'aux1141' direct represents '0' with '4587'
c Var 'aux1141' order represents '1' with '4588'
-4587 4588 0
c Var 'aux1141' direct represents '1' with '4589'
4587 -4588 4589 0
-4589 4588 0
-4589 -4587 0
c Var 'aux1141' order represents '2' with '4590'
-4588 4590 0
c Var 'aux1141' direct represents '2' with '4591'
4588 -4590 4591 0
-4591 4590 0
-4591 -4588 0
c Var 'aux1141' direct represents '3' with '-4590'
4587 4589 4591 -4590 0
c Encoding variable: aux1142 with domain: int(0..4) (representing constraint (aux1137 + aux1139))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4592'
c Var 'aux1142' direct represents '0' with '4592'
c Var 'aux1142' order represents '1' with '4593'
-4592 4593 0
c Var 'aux1142' direct represents '1' with '4594'
4592 -4593 4594 0
-4594 4593 0
-4594 -4592 0
c Var 'aux1142' order represents '2' with '4595'
-4593 4595 0
c Var 'aux1142' direct represents '2' with '4596'
4593 -4595 4596 0
-4596 4595 0
-4596 -4593 0
c Var 'aux1142' order represents '3' with '4597'
-4595 4597 0
c Var 'aux1142' direct represents '3' with '4598'
4595 -4597 4598 0
-4598 4597 0
-4598 -4595 0
c Var 'aux1142' direct represents '4' with '-4597'
4592 4594 4596 4598 -4597 0
c Encoding variable: aux1143 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4599'
c Var 'aux1143' direct represents '0' with '4599'
c Var 'aux1143' order represents '1' with '4600'
-4599 4600 0
c Var 'aux1143' direct represents '1' with '4601'
4599 -4600 4601 0
-4601 4600 0
-4601 -4599 0
c Var 'aux1143' direct represents '2' with '-4600'
4599 4601 -4600 0
c Encoding variable: aux1144 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4602'
c Var 'aux1144' direct represents '0' with '4602'
c Var 'aux1144' order represents '1' with '4603'
-4602 4603 0
c Var 'aux1144' direct represents '1' with '4604'
4602 -4603 4604 0
-4604 4603 0
-4604 -4602 0
c Var 'aux1144' direct represents '2' with '-4603'
4602 4604 -4603 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4605'
c Var 'aux1145' direct represents '0' with '4605'
c Var 'aux1145' order represents '1' with '4606'
-4605 4606 0
c Var 'aux1145' direct represents '1' with '4607'
4605 -4606 4607 0
-4607 4606 0
-4607 -4605 0
c Var 'aux1145' direct represents '2' with '-4606'
4605 4607 -4606 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4608'
c Var 'aux1146' direct represents '0' with '4608'
c Var 'aux1146' order represents '1' with '4609'
-4608 4609 0
c Var 'aux1146' direct represents '1' with '4610'
4608 -4609 4610 0
-4610 4609 0
-4610 -4608 0
c Var 'aux1146' direct represents '2' with '-4609'
4608 4610 -4609 0
c Encoding variable: aux1147 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1146))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4611'
c Var 'aux1147' direct represents '0' with '4611'
c Var 'aux1147' order represents '1' with '4612'
-4611 4612 0
c Var 'aux1147' direct represents '1' with '4613'
4611 -4612 4613 0
-4613 4612 0
-4613 -4611 0
c Var 'aux1147' order represents '2' with '4614'
-4612 4614 0
c Var 'aux1147' direct represents '2' with '4615'
4612 -4614 4615 0
-4615 4614 0
-4615 -4612 0
c Var 'aux1147' direct represents '3' with '-4614'
4611 4613 4615 -4614 0
c Encoding variable: aux1148 with domain: int(0..4) (representing constraint (aux1143 + aux1145))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4616'
c Var 'aux1148' direct represents '0' with '4616'
c Var 'aux1148' order represents '1' with '4617'
-4616 4617 0
c Var 'aux1148' direct represents '1' with '4618'
4616 -4617 4618 0
-4618 4617 0
-4618 -4616 0
c Var 'aux1148' order represents '2' with '4619'
-4617 4619 0
c Var 'aux1148' direct represents '2' with '4620'
4617 -4619 4620 0
-4620 4619 0
-4620 -4617 0
c Var 'aux1148' order represents '3' with '4621'
-4619 4621 0
c Var 'aux1148' direct represents '3' with '4622'
4619 -4621 4622 0
-4622 4621 0
-4622 -4619 0
c Var 'aux1148' direct represents '4' with '-4621'
4616 4618 4620 4622 -4621 0
c Encoding variable: aux1149 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4623'
c Var 'aux1149' direct represents '0' with '4623'
c Var 'aux1149' order represents '1' with '4624'
-4623 4624 0
c Var 'aux1149' direct represents '1' with '4625'
4623 -4624 4625 0
-4625 4624 0
-4625 -4623 0
c Var 'aux1149' direct represents '2' with '-4624'
4623 4625 -4624 0
c Encoding variable: aux1150 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4626'
c Var 'aux1150' direct represents '0' with '4626'
c Var 'aux1150' order represents '1' with '4627'
-4626 4627 0
c Var 'aux1150' direct represents '1' with '4628'
4626 -4627 4628 0
-4628 4627 0
-4628 -4626 0
c Var 'aux1150' direct represents '2' with '-4627'
4626 4628 -4627 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4629'
c Var 'aux1151' direct represents '0' with '4629'
c Var 'aux1151' order represents '1' with '4630'
-4629 4630 0
c Var 'aux1151' direct represents '1' with '4631'
4629 -4630 4631 0
-4631 4630 0
-4631 -4629 0
c Var 'aux1151' direct represents '2' with '-4630'
4629 4631 -4630 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4632'
c Var 'aux1152' direct represents '0' with '4632'
c Var 'aux1152' order represents '1' with '4633'
-4632 4633 0
c Var 'aux1152' direct represents '1' with '4634'
4632 -4633 4634 0
-4634 4633 0
-4634 -4632 0
c Var 'aux1152' direct represents '2' with '-4633'
4632 4634 -4633 0
c Encoding variable: aux1153 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1152))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4635'
c Var 'aux1153' direct represents '0' with '4635'
c Var 'aux1153' order represents '1' with '4636'
-4635 4636 0
c Var 'aux1153' direct represents '1' with '4637'
4635 -4636 4637 0
-4637 4636 0
-4637 -4635 0
c Var 'aux1153' order represents '2' with '4638'
-4636 4638 0
c Var 'aux1153' direct represents '2' with '4639'
4636 -4638 4639 0
-4639 4638 0
-4639 -4636 0
c Var 'aux1153' direct represents '3' with '-4638'
4635 4637 4639 -4638 0
c Encoding variable: aux1154 with domain: int(0..4) (representing constraint (aux1149 + aux1151))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4640'
c Var 'aux1154' direct represents '0' with '4640'
c Var 'aux1154' order represents '1' with '4641'
-4640 4641 0
c Var 'aux1154' direct represents '1' with '4642'
4640 -4641 4642 0
-4642 4641 0
-4642 -4640 0
c Var 'aux1154' order represents '2' with '4643'
-4641 4643 0
c Var 'aux1154' direct represents '2' with '4644'
4641 -4643 4644 0
-4644 4643 0
-4644 -4641 0
c Var 'aux1154' order represents '3' with '4645'
-4643 4645 0
c Var 'aux1154' direct represents '3' with '4646'
4643 -4645 4646 0
-4646 4645 0
-4646 -4643 0
c Var 'aux1154' direct represents '4' with '-4645'
4640 4642 4644 4646 -4645 0
c Encoding variable: aux1155 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4647'
c Var 'aux1155' direct represents '0' with '4647'
c Var 'aux1155' order represents '1' with '4648'
-4647 4648 0
c Var 'aux1155' direct represents '1' with '4649'
4647 -4648 4649 0
-4649 4648 0
-4649 -4647 0
c Var 'aux1155' direct represents '2' with '-4648'
4647 4649 -4648 0
c Encoding variable: aux1156 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4650'
c Var 'aux1156' direct represents '0' with '4650'
c Var 'aux1156' order represents '1' with '4651'
-4650 4651 0
c Var 'aux1156' direct represents '1' with '4652'
4650 -4651 4652 0
-4652 4651 0
-4652 -4650 0
c Var 'aux1156' direct represents '2' with '-4651'
4650 4652 -4651 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4653'
c Var 'aux1157' direct represents '0' with '4653'
c Var 'aux1157' order represents '1' with '4654'
-4653 4654 0
c Var 'aux1157' direct represents '1' with '4655'
4653 -4654 4655 0
-4655 4654 0
-4655 -4653 0
c Var 'aux1157' direct represents '2' with '-4654'
4653 4655 -4654 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4656'
c Var 'aux1158' direct represents '0' with '4656'
c Var 'aux1158' order represents '1' with '4657'
-4656 4657 0
c Var 'aux1158' direct represents '1' with '4658'
4656 -4657 4658 0
-4658 4657 0
-4658 -4656 0
c Var 'aux1158' direct represents '2' with '-4657'
4656 4658 -4657 0
c Encoding variable: aux1159 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1158))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4659'
c Var 'aux1159' direct represents '0' with '4659'
c Var 'aux1159' order represents '1' with '4660'
-4659 4660 0
c Var 'aux1159' direct represents '1' with '4661'
4659 -4660 4661 0
-4661 4660 0
-4661 -4659 0
c Var 'aux1159' order represents '2' with '4662'
-4660 4662 0
c Var 'aux1159' direct represents '2' with '4663'
4660 -4662 4663 0
-4663 4662 0
-4663 -4660 0
c Var 'aux1159' direct represents '3' with '-4662'
4659 4661 4663 -4662 0
c Encoding variable: aux1160 with domain: int(0..4) (representing constraint (aux1155 + aux1157))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4664'
c Var 'aux1160' direct represents '0' with '4664'
c Var 'aux1160' order represents '1' with '4665'
-4664 4665 0
c Var 'aux1160' direct represents '1' with '4666'
4664 -4665 4666 0
-4666 4665 0
-4666 -4664 0
c Var 'aux1160' order represents '2' with '4667'
-4665 4667 0
c Var 'aux1160' direct represents '2' with '4668'
4665 -4667 4668 0
-4668 4667 0
-4668 -4665 0
c Var 'aux1160' order represents '3' with '4669'
-4667 4669 0
c Var 'aux1160' direct represents '3' with '4670'
4667 -4669 4670 0
-4670 4669 0
-4670 -4667 0
c Var 'aux1160' direct represents '4' with '-4669'
4664 4666 4668 4670 -4669 0
c Encoding variable: aux1161 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4671'
c Var 'aux1161' direct represents '0' with '4671'
c Var 'aux1161' order represents '1' with '4672'
-4671 4672 0
c Var 'aux1161' direct represents '1' with '4673'
4671 -4672 4673 0
-4673 4672 0
-4673 -4671 0
c Var 'aux1161' direct represents '2' with '-4672'
4671 4673 -4672 0
c Encoding variable: aux1162 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4674'
c Var 'aux1162' direct represents '0' with '4674'
c Var 'aux1162' order represents '1' with '4675'
-4674 4675 0
c Var 'aux1162' direct represents '1' with '4676'
4674 -4675 4676 0
-4676 4675 0
-4676 -4674 0
c Var 'aux1162' direct represents '2' with '-4675'
4674 4676 -4675 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4677'
c Var 'aux1163' direct represents '0' with '4677'
c Var 'aux1163' order represents '1' with '4678'
-4677 4678 0
c Var 'aux1163' direct represents '1' with '4679'
4677 -4678 4679 0
-4679 4678 0
-4679 -4677 0
c Var 'aux1163' direct represents '2' with '-4678'
4677 4679 -4678 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4680'
c Var 'aux1164' direct represents '0' with '4680'
c Var 'aux1164' order represents '1' with '4681'
-4680 4681 0
c Var 'aux1164' direct represents '1' with '4682'
4680 -4681 4682 0
-4682 4681 0
-4682 -4680 0
c Var 'aux1164' direct represents '2' with '-4681'
4680 4682 -4681 0
c Encoding variable: aux1165 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1164))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4683'
c Var 'aux1165' direct represents '0' with '4683'
c Var 'aux1165' order represents '1' with '4684'
-4683 4684 0
c Var 'aux1165' direct represents '1' with '4685'
4683 -4684 4685 0
-4685 4684 0
-4685 -4683 0
c Var 'aux1165' order represents '2' with '4686'
-4684 4686 0
c Var 'aux1165' direct represents '2' with '4687'
4684 -4686 4687 0
-4687 4686 0
-4687 -4684 0
c Var 'aux1165' direct represents '3' with '-4686'
4683 4685 4687 -4686 0
c Encoding variable: aux1166 with domain: int(0..4) (representing constraint (aux1161 + aux1163))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4688'
c Var 'aux1166' direct represents '0' with '4688'
c Var 'aux1166' order represents '1' with '4689'
-4688 4689 0
c Var 'aux1166' direct represents '1' with '4690'
4688 -4689 4690 0
-4690 4689 0
-4690 -4688 0
c Var 'aux1166' order represents '2' with '4691'
-4689 4691 0
c Var 'aux1166' direct represents '2' with '4692'
4689 -4691 4692 0
-4692 4691 0
-4692 -4689 0
c Var 'aux1166' order represents '3' with '4693'
-4691 4693 0
c Var 'aux1166' direct represents '3' with '4694'
4691 -4693 4694 0
-4694 4693 0
-4694 -4691 0
c Var 'aux1166' direct represents '4' with '-4693'
4688 4690 4692 4694 -4693 0
c Encoding variable: aux1167 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4695'
c Var 'aux1167' direct represents '0' with '4695'
c Var 'aux1167' order represents '1' with '4696'
-4695 4696 0
c Var 'aux1167' direct represents '1' with '4697'
4695 -4696 4697 0
-4697 4696 0
-4697 -4695 0
c Var 'aux1167' direct represents '2' with '-4696'
4695 4697 -4696 0
c Encoding variable: aux1168 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4698'
c Var 'aux1168' direct represents '0' with '4698'
c Var 'aux1168' order represents '1' with '4699'
-4698 4699 0
c Var 'aux1168' direct represents '1' with '4700'
4698 -4699 4700 0
-4700 4699 0
-4700 -4698 0
c Var 'aux1168' direct represents '2' with '-4699'
4698 4700 -4699 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4701'
c Var 'aux1169' direct represents '0' with '4701'
c Var 'aux1169' order represents '1' with '4702'
-4701 4702 0
c Var 'aux1169' direct represents '1' with '4703'
4701 -4702 4703 0
-4703 4702 0
-4703 -4701 0
c Var 'aux1169' direct represents '2' with '-4702'
4701 4703 -4702 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4704'
c Var 'aux1170' direct represents '0' with '4704'
c Var 'aux1170' order represents '1' with '4705'
-4704 4705 0
c Var 'aux1170' direct represents '1' with '4706'
4704 -4705 4706 0
-4706 4705 0
-4706 -4704 0
c Var 'aux1170' direct represents '2' with '-4705'
4704 4706 -4705 0
c Encoding variable: aux1171 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1170))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4707'
c Var 'aux1171' direct represents '0' with '4707'
c Var 'aux1171' order represents '1' with '4708'
-4707 4708 0
c Var 'aux1171' direct represents '1' with '4709'
4707 -4708 4709 0
-4709 4708 0
-4709 -4707 0
c Var 'aux1171' order represents '2' with '4710'
-4708 4710 0
c Var 'aux1171' direct represents '2' with '4711'
4708 -4710 4711 0
-4711 4710 0
-4711 -4708 0
c Var 'aux1171' direct represents '3' with '-4710'
4707 4709 4711 -4710 0
c Encoding variable: aux1172 with domain: int(0..4) (representing constraint (aux1167 + aux1169))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4712'
c Var 'aux1172' direct represents '0' with '4712'
c Var 'aux1172' order represents '1' with '4713'
-4712 4713 0
c Var 'aux1172' direct represents '1' with '4714'
4712 -4713 4714 0
-4714 4713 0
-4714 -4712 0
c Var 'aux1172' order represents '2' with '4715'
-4713 4715 0
c Var 'aux1172' direct represents '2' with '4716'
4713 -4715 4716 0
-4716 4715 0
-4716 -4713 0
c Var 'aux1172' order represents '3' with '4717'
-4715 4717 0
c Var 'aux1172' direct represents '3' with '4718'
4715 -4717 4718 0
-4718 4717 0
-4718 -4715 0
c Var 'aux1172' direct represents '4' with '-4717'
4712 4714 4716 4718 -4717 0
c Encoding variable: aux1173 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4719'
c Var 'aux1173' direct represents '0' with '4719'
c Var 'aux1173' order represents '1' with '4720'
-4719 4720 0
c Var 'aux1173' direct represents '1' with '4721'
4719 -4720 4721 0
-4721 4720 0
-4721 -4719 0
c Var 'aux1173' direct represents '2' with '-4720'
4719 4721 -4720 0
c Encoding variable: aux1174 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4722'
c Var 'aux1174' direct represents '0' with '4722'
c Var 'aux1174' order represents '1' with '4723'
-4722 4723 0
c Var 'aux1174' direct represents '1' with '4724'
4722 -4723 4724 0
-4724 4723 0
-4724 -4722 0
c Var 'aux1174' direct represents '2' with '-4723'
4722 4724 -4723 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4725'
c Var 'aux1175' direct represents '0' with '4725'
c Var 'aux1175' order represents '1' with '4726'
-4725 4726 0
c Var 'aux1175' direct represents '1' with '4727'
4725 -4726 4727 0
-4727 4726 0
-4727 -4725 0
c Var 'aux1175' direct represents '2' with '-4726'
4725 4727 -4726 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4728'
c Var 'aux1176' direct represents '0' with '4728'
c Var 'aux1176' order represents '1' with '4729'
-4728 4729 0
c Var 'aux1176' direct represents '1' with '4730'
4728 -4729 4730 0
-4730 4729 0
-4730 -4728 0
c Var 'aux1176' direct represents '2' with '-4729'
4728 4730 -4729 0
c Encoding variable: aux1177 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1176))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4731'
c Var 'aux1177' direct represents '0' with '4731'
c Var 'aux1177' order represents '1' with '4732'
-4731 4732 0
c Var 'aux1177' direct represents '1' with '4733'
4731 -4732 4733 0
-4733 4732 0
-4733 -4731 0
c Var 'aux1177' order represents '2' with '4734'
-4732 4734 0
c Var 'aux1177' direct represents '2' with '4735'
4732 -4734 4735 0
-4735 4734 0
-4735 -4732 0
c Var 'aux1177' direct represents '3' with '-4734'
4731 4733 4735 -4734 0
c Encoding variable: aux1178 with domain: int(0..4) (representing constraint (aux1173 + aux1175))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4736'
c Var 'aux1178' direct represents '0' with '4736'
c Var 'aux1178' order represents '1' with '4737'
-4736 4737 0
c Var 'aux1178' direct represents '1' with '4738'
4736 -4737 4738 0
-4738 4737 0
-4738 -4736 0
c Var 'aux1178' order represents '2' with '4739'
-4737 4739 0
c Var 'aux1178' direct represents '2' with '4740'
4737 -4739 4740 0
-4740 4739 0
-4740 -4737 0
c Var 'aux1178' order represents '3' with '4741'
-4739 4741 0
c Var 'aux1178' direct represents '3' with '4742'
4739 -4741 4742 0
-4742 4741 0
-4742 -4739 0
c Var 'aux1178' direct represents '4' with '-4741'
4736 4738 4740 4742 -4741 0
c Encoding variable: aux1179 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4743'
c Var 'aux1179' direct represents '0' with '4743'
c Var 'aux1179' order represents '1' with '4744'
-4743 4744 0
c Var 'aux1179' direct represents '1' with '4745'
4743 -4744 4745 0
-4745 4744 0
-4745 -4743 0
c Var 'aux1179' direct represents '2' with '-4744'
4743 4745 -4744 0
c Encoding variable: aux1180 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4746'
c Var 'aux1180' direct represents '0' with '4746'
c Var 'aux1180' order represents '1' with '4747'
-4746 4747 0
c Var 'aux1180' direct represents '1' with '4748'
4746 -4747 4748 0
-4748 4747 0
-4748 -4746 0
c Var 'aux1180' direct represents '2' with '-4747'
4746 4748 -4747 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '4749'
c Var 'aux1181' direct represents '0' with '4749'
c Var 'aux1181' order represents '1' with '4750'
-4749 4750 0
c Var 'aux1181' direct represents '1' with '4751'
4749 -4750 4751 0
-4751 4750 0
-4751 -4749 0
c Var 'aux1181' direct represents '2' with '-4750'
4749 4751 -4750 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '4752'
c Var 'aux1182' direct represents '0' with '4752'
c Var 'aux1182' order represents '1' with '4753'
-4752 4753 0
c Var 'aux1182' direct represents '1' with '4754'
4752 -4753 4754 0
-4754 4753 0
-4754 -4752 0
c Var 'aux1182' direct represents '2' with '-4753'
4752 4754 -4753 0
c Encoding variable: aux1183 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1182))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '4755'
c Var 'aux1183' direct represents '0' with '4755'
c Var 'aux1183' order represents '1' with '4756'
-4755 4756 0
c Var 'aux1183' direct represents '1' with '4757'
4755 -4756 4757 0
-4757 4756 0
-4757 -4755 0
c Var 'aux1183' order represents '2' with '4758'
-4756 4758 0
c Var 'aux1183' direct represents '2' with '4759'
4756 -4758 4759 0
-4759 4758 0
-4759 -4756 0
c Var 'aux1183' direct represents '3' with '-4758'
4755 4757 4759 -4758 0
c Encoding variable: aux1184 with domain: int(0..4) (representing constraint (aux1179 + aux1181))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '4760'
c Var 'aux1184' direct represents '0' with '4760'
c Var 'aux1184' order represents '1' with '4761'
-4760 4761 0
c Var 'aux1184' direct represents '1' with '4762'
4760 -4761 4762 0
-4762 4761 0
-4762 -4760 0
c Var 'aux1184' order represents '2' with '4763'
-4761 4763 0
c Var 'aux1184' direct represents '2' with '4764'
4761 -4763 4764 0
-4764 4763 0
-4764 -4761 0
c Var 'aux1184' order represents '3' with '4765'
-4763 4765 0
c Var 'aux1184' direct represents '3' with '4766'
4763 -4765 4766 0
-4766 4765 0
-4766 -4763 0
c Var 'aux1184' direct represents '4' with '-4765'
4760 4762 4764 4766 -4765 0
c Encoding variable: aux1185 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '4767'
c Var 'aux1185' direct represents '0' with '4767'
c Var 'aux1185' order represents '1' with '4768'
-4767 4768 0
c Var 'aux1185' direct represents '1' with '4769'
4767 -4768 4769 0
-4769 4768 0
-4769 -4767 0
c Var 'aux1185' direct represents '2' with '-4768'
4767 4769 -4768 0
c Encoding variable: aux1186 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '4770'
c Var 'aux1186' direct represents '0' with '4770'
c Var 'aux1186' order represents '1' with '4771'
-4770 4771 0
c Var 'aux1186' direct represents '1' with '4772'
4770 -4771 4772 0
-4772 4771 0
-4772 -4770 0
c Var 'aux1186' direct represents '2' with '-4771'
4770 4772 -4771 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '4773'
c Var 'aux1187' direct represents '0' with '4773'
c Var 'aux1187' order represents '1' with '4774'
-4773 4774 0
c Var 'aux1187' direct represents '1' with '4775'
4773 -4774 4775 0
-4775 4774 0
-4775 -4773 0
c Var 'aux1187' direct represents '2' with '-4774'
4773 4775 -4774 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '4776'
c Var 'aux1188' direct represents '0' with '4776'
c Var 'aux1188' order represents '1' with '4777'
-4776 4777 0
c Var 'aux1188' direct represents '1' with '4778'
4776 -4777 4778 0
-4778 4777 0
-4778 -4776 0
c Var 'aux1188' direct represents '2' with '-4777'
4776 4778 -4777 0
c Encoding variable: aux1189 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1188))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '4779'
c Var 'aux1189' direct represents '0' with '4779'
c Var 'aux1189' order represents '1' with '4780'
-4779 4780 0
c Var 'aux1189' direct represents '1' with '4781'
4779 -4780 4781 0
-4781 4780 0
-4781 -4779 0
c Var 'aux1189' order represents '2' with '4782'
-4780 4782 0
c Var 'aux1189' direct represents '2' with '4783'
4780 -4782 4783 0
-4783 4782 0
-4783 -4780 0
c Var 'aux1189' direct represents '3' with '-4782'
4779 4781 4783 -4782 0
c Encoding variable: aux1190 with domain: int(0..4) (representing constraint (aux1185 + aux1187))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '4784'
c Var 'aux1190' direct represents '0' with '4784'
c Var 'aux1190' order represents '1' with '4785'
-4784 4785 0
c Var 'aux1190' direct represents '1' with '4786'
4784 -4785 4786 0
-4786 4785 0
-4786 -4784 0
c Var 'aux1190' order represents '2' with '4787'
-4785 4787 0
c Var 'aux1190' direct represents '2' with '4788'
4785 -4787 4788 0
-4788 4787 0
-4788 -4785 0
c Var 'aux1190' order represents '3' with '4789'
-4787 4789 0
c Var 'aux1190' direct represents '3' with '4790'
4787 -4789 4790 0
-4790 4789 0
-4790 -4787 0
c Var 'aux1190' direct represents '4' with '-4789'
4784 4786 4788 4790 -4789 0
c Encoding variable: aux1191 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '4791'
c Var 'aux1191' direct represents '0' with '4791'
c Var 'aux1191' order represents '1' with '4792'
-4791 4792 0
c Var 'aux1191' direct represents '1' with '4793'
4791 -4792 4793 0
-4793 4792 0
-4793 -4791 0
c Var 'aux1191' direct represents '2' with '-4792'
4791 4793 -4792 0
c Encoding variable: aux1192 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '4794'
c Var 'aux1192' direct represents '0' with '4794'
c Var 'aux1192' order represents '1' with '4795'
-4794 4795 0
c Var 'aux1192' direct represents '1' with '4796'
4794 -4795 4796 0
-4796 4795 0
-4796 -4794 0
c Var 'aux1192' direct represents '2' with '-4795'
4794 4796 -4795 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '4797'
c Var 'aux1193' direct represents '0' with '4797'
c Var 'aux1193' order represents '1' with '4798'
-4797 4798 0
c Var 'aux1193' direct represents '1' with '4799'
4797 -4798 4799 0
-4799 4798 0
-4799 -4797 0
c Var 'aux1193' direct represents '2' with '-4798'
4797 4799 -4798 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '4800'
c Var 'aux1194' direct represents '0' with '4800'
c Var 'aux1194' order represents '1' with '4801'
-4800 4801 0
c Var 'aux1194' direct represents '1' with '4802'
4800 -4801 4802 0
-4802 4801 0
-4802 -4800 0
c Var 'aux1194' direct represents '2' with '-4801'
4800 4802 -4801 0
c Encoding variable: aux1195 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1194))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '4803'
c Var 'aux1195' direct represents '0' with '4803'
c Var 'aux1195' order represents '1' with '4804'
-4803 4804 0
c Var 'aux1195' direct represents '1' with '4805'
4803 -4804 4805 0
-4805 4804 0
-4805 -4803 0
c Var 'aux1195' order represents '2' with '4806'
-4804 4806 0
c Var 'aux1195' direct represents '2' with '4807'
4804 -4806 4807 0
-4807 4806 0
-4807 -4804 0
c Var 'aux1195' direct represents '3' with '-4806'
4803 4805 4807 -4806 0
c Encoding variable: aux1196 with domain: int(0..4) (representing constraint (aux1191 + aux1193))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '4808'
c Var 'aux1196' direct represents '0' with '4808'
c Var 'aux1196' order represents '1' with '4809'
-4808 4809 0
c Var 'aux1196' direct represents '1' with '4810'
4808 -4809 4810 0
-4810 4809 0
-4810 -4808 0
c Var 'aux1196' order represents '2' with '4811'
-4809 4811 0
c Var 'aux1196' direct represents '2' with '4812'
4809 -4811 4812 0
-4812 4811 0
-4812 -4809 0
c Var 'aux1196' order represents '3' with '4813'
-4811 4813 0
c Var 'aux1196' direct represents '3' with '4814'
4811 -4813 4814 0
-4814 4813 0
-4814 -4811 0
c Var 'aux1196' direct represents '4' with '-4813'
4808 4810 4812 4814 -4813 0
c Encoding variable: aux1197 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '4815'
c Var 'aux1197' direct represents '0' with '4815'
c Var 'aux1197' order represents '1' with '4816'
-4815 4816 0
c Var 'aux1197' direct represents '1' with '4817'
4815 -4816 4817 0
-4817 4816 0
-4817 -4815 0
c Var 'aux1197' direct represents '2' with '-4816'
4815 4817 -4816 0
c Encoding variable: aux1198 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '4818'
c Var 'aux1198' direct represents '0' with '4818'
c Var 'aux1198' order represents '1' with '4819'
-4818 4819 0
c Var 'aux1198' direct represents '1' with '4820'
4818 -4819 4820 0
-4820 4819 0
-4820 -4818 0
c Var 'aux1198' direct represents '2' with '-4819'
4818 4820 -4819 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '4821'
c Var 'aux1199' direct represents '0' with '4821'
c Var 'aux1199' order represents '1' with '4822'
-4821 4822 0
c Var 'aux1199' direct represents '1' with '4823'
4821 -4822 4823 0
-4823 4822 0
-4823 -4821 0
c Var 'aux1199' direct represents '2' with '-4822'
4821 4823 -4822 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '4824'
c Var 'aux1200' direct represents '0' with '4824'
c Var 'aux1200' order represents '1' with '4825'
-4824 4825 0
c Var 'aux1200' direct represents '1' with '4826'
4824 -4825 4826 0
-4826 4825 0
-4826 -4824 0
c Var 'aux1200' direct represents '2' with '-4825'
4824 4826 -4825 0
c Encoding variable: aux1201 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1200))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '4827'
c Var 'aux1201' direct represents '0' with '4827'
c Var 'aux1201' order represents '1' with '4828'
-4827 4828 0
c Var 'aux1201' direct represents '1' with '4829'
4827 -4828 4829 0
-4829 4828 0
-4829 -4827 0
c Var 'aux1201' order represents '2' with '4830'
-4828 4830 0
c Var 'aux1201' direct represents '2' with '4831'
4828 -4830 4831 0
-4831 4830 0
-4831 -4828 0
c Var 'aux1201' direct represents '3' with '-4830'
4827 4829 4831 -4830 0
c Encoding variable: aux1202 with domain: int(0..4) (representing constraint (aux1197 + aux1199))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '4832'
c Var 'aux1202' direct represents '0' with '4832'
c Var 'aux1202' order represents '1' with '4833'
-4832 4833 0
c Var 'aux1202' direct represents '1' with '4834'
4832 -4833 4834 0
-4834 4833 0
-4834 -4832 0
c Var 'aux1202' order represents '2' with '4835'
-4833 4835 0
c Var 'aux1202' direct represents '2' with '4836'
4833 -4835 4836 0
-4836 4835 0
-4836 -4833 0
c Var 'aux1202' order represents '3' with '4837'
-4835 4837 0
c Var 'aux1202' direct represents '3' with '4838'
4835 -4837 4838 0
-4838 4837 0
-4838 -4835 0
c Var 'aux1202' direct represents '4' with '-4837'
4832 4834 4836 4838 -4837 0
c Encoding variable: aux1203 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '4839'
c Var 'aux1203' direct represents '0' with '4839'
c Var 'aux1203' order represents '1' with '4840'
-4839 4840 0
c Var 'aux1203' direct represents '1' with '4841'
4839 -4840 4841 0
-4841 4840 0
-4841 -4839 0
c Var 'aux1203' direct represents '2' with '-4840'
4839 4841 -4840 0
c Encoding variable: aux1204 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '4842'
c Var 'aux1204' direct represents '0' with '4842'
c Var 'aux1204' order represents '1' with '4843'
-4842 4843 0
c Var 'aux1204' direct represents '1' with '4844'
4842 -4843 4844 0
-4844 4843 0
-4844 -4842 0
c Var 'aux1204' direct represents '2' with '-4843'
4842 4844 -4843 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '4845'
c Var 'aux1205' direct represents '0' with '4845'
c Var 'aux1205' order represents '1' with '4846'
-4845 4846 0
c Var 'aux1205' direct represents '1' with '4847'
4845 -4846 4847 0
-4847 4846 0
-4847 -4845 0
c Var 'aux1205' direct represents '2' with '-4846'
4845 4847 -4846 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '4848'
c Var 'aux1206' direct represents '0' with '4848'
c Var 'aux1206' order represents '1' with '4849'
-4848 4849 0
c Var 'aux1206' direct represents '1' with '4850'
4848 -4849 4850 0
-4850 4849 0
-4850 -4848 0
c Var 'aux1206' direct represents '2' with '-4849'
4848 4850 -4849 0
c Encoding variable: aux1207 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1206))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '4851'
c Var 'aux1207' direct represents '0' with '4851'
c Var 'aux1207' order represents '1' with '4852'
-4851 4852 0
c Var 'aux1207' direct represents '1' with '4853'
4851 -4852 4853 0
-4853 4852 0
-4853 -4851 0
c Var 'aux1207' order represents '2' with '4854'
-4852 4854 0
c Var 'aux1207' direct represents '2' with '4855'
4852 -4854 4855 0
-4855 4854 0
-4855 -4852 0
c Var 'aux1207' direct represents '3' with '-4854'
4851 4853 4855 -4854 0
c Encoding variable: aux1208 with domain: int(0..4) (representing constraint (aux1203 + aux1205))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '4856'
c Var 'aux1208' direct represents '0' with '4856'
c Var 'aux1208' order represents '1' with '4857'
-4856 4857 0
c Var 'aux1208' direct represents '1' with '4858'
4856 -4857 4858 0
-4858 4857 0
-4858 -4856 0
c Var 'aux1208' order represents '2' with '4859'
-4857 4859 0
c Var 'aux1208' direct represents '2' with '4860'
4857 -4859 4860 0
-4860 4859 0
-4860 -4857 0
c Var 'aux1208' order represents '3' with '4861'
-4859 4861 0
c Var 'aux1208' direct represents '3' with '4862'
4859 -4861 4862 0
-4862 4861 0
-4862 -4859 0
c Var 'aux1208' direct represents '4' with '-4861'
4856 4858 4860 4862 -4861 0
c Encoding variable: aux1209 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '4863'
c Var 'aux1209' direct represents '0' with '4863'
c Var 'aux1209' order represents '1' with '4864'
-4863 4864 0
c Var 'aux1209' direct represents '1' with '4865'
4863 -4864 4865 0
-4865 4864 0
-4865 -4863 0
c Var 'aux1209' direct represents '2' with '-4864'
4863 4865 -4864 0
c Encoding variable: aux1210 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '4866'
c Var 'aux1210' direct represents '0' with '4866'
c Var 'aux1210' order represents '1' with '4867'
-4866 4867 0
c Var 'aux1210' direct represents '1' with '4868'
4866 -4867 4868 0
-4868 4867 0
-4868 -4866 0
c Var 'aux1210' direct represents '2' with '-4867'
4866 4868 -4867 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '4869'
c Var 'aux1211' direct represents '0' with '4869'
c Var 'aux1211' order represents '1' with '4870'
-4869 4870 0
c Var 'aux1211' direct represents '1' with '4871'
4869 -4870 4871 0
-4871 4870 0
-4871 -4869 0
c Var 'aux1211' direct represents '2' with '-4870'
4869 4871 -4870 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '4872'
c Var 'aux1212' direct represents '0' with '4872'
c Var 'aux1212' order represents '1' with '4873'
-4872 4873 0
c Var 'aux1212' direct represents '1' with '4874'
4872 -4873 4874 0
-4874 4873 0
-4874 -4872 0
c Var 'aux1212' direct represents '2' with '-4873'
4872 4874 -4873 0
c Encoding variable: aux1213 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1212))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '4875'
c Var 'aux1213' direct represents '0' with '4875'
c Var 'aux1213' order represents '1' with '4876'
-4875 4876 0
c Var 'aux1213' direct represents '1' with '4877'
4875 -4876 4877 0
-4877 4876 0
-4877 -4875 0
c Var 'aux1213' order represents '2' with '4878'
-4876 4878 0
c Var 'aux1213' direct represents '2' with '4879'
4876 -4878 4879 0
-4879 4878 0
-4879 -4876 0
c Var 'aux1213' direct represents '3' with '-4878'
4875 4877 4879 -4878 0
c Encoding variable: aux1214 with domain: int(0..4) (representing constraint (aux1209 + aux1211))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '4880'
c Var 'aux1214' direct represents '0' with '4880'
c Var 'aux1214' order represents '1' with '4881'
-4880 4881 0
c Var 'aux1214' direct represents '1' with '4882'
4880 -4881 4882 0
-4882 4881 0
-4882 -4880 0
c Var 'aux1214' order represents '2' with '4883'
-4881 4883 0
c Var 'aux1214' direct represents '2' with '4884'
4881 -4883 4884 0
-4884 4883 0
-4884 -4881 0
c Var 'aux1214' order represents '3' with '4885'
-4883 4885 0
c Var 'aux1214' direct represents '3' with '4886'
4883 -4885 4886 0
-4886 4885 0
-4886 -4883 0
c Var 'aux1214' direct represents '4' with '-4885'
4880 4882 4884 4886 -4885 0
c Encoding variable: aux1215 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '4887'
c Var 'aux1215' direct represents '0' with '4887'
c Var 'aux1215' order represents '1' with '4888'
-4887 4888 0
c Var 'aux1215' direct represents '1' with '4889'
4887 -4888 4889 0
-4889 4888 0
-4889 -4887 0
c Var 'aux1215' direct represents '2' with '-4888'
4887 4889 -4888 0
c Encoding variable: aux1216 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '4890'
c Var 'aux1216' direct represents '0' with '4890'
c Var 'aux1216' order represents '1' with '4891'
-4890 4891 0
c Var 'aux1216' direct represents '1' with '4892'
4890 -4891 4892 0
-4892 4891 0
-4892 -4890 0
c Var 'aux1216' direct represents '2' with '-4891'
4890 4892 -4891 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '4893'
c Var 'aux1217' direct represents '0' with '4893'
c Var 'aux1217' order represents '1' with '4894'
-4893 4894 0
c Var 'aux1217' direct represents '1' with '4895'
4893 -4894 4895 0
-4895 4894 0
-4895 -4893 0
c Var 'aux1217' direct represents '2' with '-4894'
4893 4895 -4894 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '4896'
c Var 'aux1218' direct represents '0' with '4896'
c Var 'aux1218' order represents '1' with '4897'
-4896 4897 0
c Var 'aux1218' direct represents '1' with '4898'
4896 -4897 4898 0
-4898 4897 0
-4898 -4896 0
c Var 'aux1218' direct represents '2' with '-4897'
4896 4898 -4897 0
c Encoding variable: aux1219 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1218))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '4899'
c Var 'aux1219' direct represents '0' with '4899'
c Var 'aux1219' order represents '1' with '4900'
-4899 4900 0
c Var 'aux1219' direct represents '1' with '4901'
4899 -4900 4901 0
-4901 4900 0
-4901 -4899 0
c Var 'aux1219' order represents '2' with '4902'
-4900 4902 0
c Var 'aux1219' direct represents '2' with '4903'
4900 -4902 4903 0
-4903 4902 0
-4903 -4900 0
c Var 'aux1219' direct represents '3' with '-4902'
4899 4901 4903 -4902 0
c Encoding variable: aux1220 with domain: int(0..4) (representing constraint (aux1215 + aux1217))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '4904'
c Var 'aux1220' direct represents '0' with '4904'
c Var 'aux1220' order represents '1' with '4905'
-4904 4905 0
c Var 'aux1220' direct represents '1' with '4906'
4904 -4905 4906 0
-4906 4905 0
-4906 -4904 0
c Var 'aux1220' order represents '2' with '4907'
-4905 4907 0
c Var 'aux1220' direct represents '2' with '4908'
4905 -4907 4908 0
-4908 4907 0
-4908 -4905 0
c Var 'aux1220' order represents '3' with '4909'
-4907 4909 0
c Var 'aux1220' direct represents '3' with '4910'
4907 -4909 4910 0
-4910 4909 0
-4910 -4907 0
c Var 'aux1220' direct represents '4' with '-4909'
4904 4906 4908 4910 -4909 0
c Encoding variable: aux1221 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '4911'
c Var 'aux1221' direct represents '0' with '4911'
c Var 'aux1221' order represents '1' with '4912'
-4911 4912 0
c Var 'aux1221' direct represents '1' with '4913'
4911 -4912 4913 0
-4913 4912 0
-4913 -4911 0
c Var 'aux1221' direct represents '2' with '-4912'
4911 4913 -4912 0
c Encoding variable: aux1222 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '4914'
c Var 'aux1222' direct represents '0' with '4914'
c Var 'aux1222' order represents '1' with '4915'
-4914 4915 0
c Var 'aux1222' direct represents '1' with '4916'
4914 -4915 4916 0
-4916 4915 0
-4916 -4914 0
c Var 'aux1222' direct represents '2' with '-4915'
4914 4916 -4915 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '4917'
c Var 'aux1223' direct represents '0' with '4917'
c Var 'aux1223' order represents '1' with '4918'
-4917 4918 0
c Var 'aux1223' direct represents '1' with '4919'
4917 -4918 4919 0
-4919 4918 0
-4919 -4917 0
c Var 'aux1223' direct represents '2' with '-4918'
4917 4919 -4918 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '4920'
c Var 'aux1224' direct represents '0' with '4920'
c Var 'aux1224' order represents '1' with '4921'
-4920 4921 0
c Var 'aux1224' direct represents '1' with '4922'
4920 -4921 4922 0
-4922 4921 0
-4922 -4920 0
c Var 'aux1224' direct represents '2' with '-4921'
4920 4922 -4921 0
c Encoding variable: aux1225 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1224))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '4923'
c Var 'aux1225' direct represents '0' with '4923'
c Var 'aux1225' order represents '1' with '4924'
-4923 4924 0
c Var 'aux1225' direct represents '1' with '4925'
4923 -4924 4925 0
-4925 4924 0
-4925 -4923 0
c Var 'aux1225' order represents '2' with '4926'
-4924 4926 0
c Var 'aux1225' direct represents '2' with '4927'
4924 -4926 4927 0
-4927 4926 0
-4927 -4924 0
c Var 'aux1225' direct represents '3' with '-4926'
4923 4925 4927 -4926 0
c Encoding variable: aux1226 with domain: int(0..4) (representing constraint (aux1221 + aux1223))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '4928'
c Var 'aux1226' direct represents '0' with '4928'
c Var 'aux1226' order represents '1' with '4929'
-4928 4929 0
c Var 'aux1226' direct represents '1' with '4930'
4928 -4929 4930 0
-4930 4929 0
-4930 -4928 0
c Var 'aux1226' order represents '2' with '4931'
-4929 4931 0
c Var 'aux1226' direct represents '2' with '4932'
4929 -4931 4932 0
-4932 4931 0
-4932 -4929 0
c Var 'aux1226' order represents '3' with '4933'
-4931 4933 0
c Var 'aux1226' direct represents '3' with '4934'
4931 -4933 4934 0
-4934 4933 0
-4934 -4931 0
c Var 'aux1226' direct represents '4' with '-4933'
4928 4930 4932 4934 -4933 0
c Encoding variable: aux1227 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '4935'
c Var 'aux1227' direct represents '0' with '4935'
c Var 'aux1227' order represents '1' with '4936'
-4935 4936 0
c Var 'aux1227' direct represents '1' with '4937'
4935 -4936 4937 0
-4937 4936 0
-4937 -4935 0
c Var 'aux1227' direct represents '2' with '-4936'
4935 4937 -4936 0
c Encoding variable: aux1228 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '4938'
c Var 'aux1228' direct represents '0' with '4938'
c Var 'aux1228' order represents '1' with '4939'
-4938 4939 0
c Var 'aux1228' direct represents '1' with '4940'
4938 -4939 4940 0
-4940 4939 0
-4940 -4938 0
c Var 'aux1228' direct represents '2' with '-4939'
4938 4940 -4939 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '4941'
c Var 'aux1229' direct represents '0' with '4941'
c Var 'aux1229' order represents '1' with '4942'
-4941 4942 0
c Var 'aux1229' direct represents '1' with '4943'
4941 -4942 4943 0
-4943 4942 0
-4943 -4941 0
c Var 'aux1229' direct represents '2' with '-4942'
4941 4943 -4942 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '4944'
c Var 'aux1230' direct represents '0' with '4944'
c Var 'aux1230' order represents '1' with '4945'
-4944 4945 0
c Var 'aux1230' direct represents '1' with '4946'
4944 -4945 4946 0
-4946 4945 0
-4946 -4944 0
c Var 'aux1230' direct represents '2' with '-4945'
4944 4946 -4945 0
c Encoding variable: aux1231 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1230))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '4947'
c Var 'aux1231' direct represents '0' with '4947'
c Var 'aux1231' order represents '1' with '4948'
-4947 4948 0
c Var 'aux1231' direct represents '1' with '4949'
4947 -4948 4949 0
-4949 4948 0
-4949 -4947 0
c Var 'aux1231' order represents '2' with '4950'
-4948 4950 0
c Var 'aux1231' direct represents '2' with '4951'
4948 -4950 4951 0
-4951 4950 0
-4951 -4948 0
c Var 'aux1231' direct represents '3' with '-4950'
4947 4949 4951 -4950 0
c Encoding variable: aux1232 with domain: int(0..4) (representing constraint (aux1227 + aux1229))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '4952'
c Var 'aux1232' direct represents '0' with '4952'
c Var 'aux1232' order represents '1' with '4953'
-4952 4953 0
c Var 'aux1232' direct represents '1' with '4954'
4952 -4953 4954 0
-4954 4953 0
-4954 -4952 0
c Var 'aux1232' order represents '2' with '4955'
-4953 4955 0
c Var 'aux1232' direct represents '2' with '4956'
4953 -4955 4956 0
-4956 4955 0
-4956 -4953 0
c Var 'aux1232' order represents '3' with '4957'
-4955 4957 0
c Var 'aux1232' direct represents '3' with '4958'
4955 -4957 4958 0
-4958 4957 0
-4958 -4955 0
c Var 'aux1232' direct represents '4' with '-4957'
4952 4954 4956 4958 -4957 0
c Encoding variable: aux1233 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '4959'
c Var 'aux1233' direct represents '0' with '4959'
c Var 'aux1233' order represents '1' with '4960'
-4959 4960 0
c Var 'aux1233' direct represents '1' with '4961'
4959 -4960 4961 0
-4961 4960 0
-4961 -4959 0
c Var 'aux1233' direct represents '2' with '-4960'
4959 4961 -4960 0
c Encoding variable: aux1234 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '4962'
c Var 'aux1234' direct represents '0' with '4962'
c Var 'aux1234' order represents '1' with '4963'
-4962 4963 0
c Var 'aux1234' direct represents '1' with '4964'
4962 -4963 4964 0
-4964 4963 0
-4964 -4962 0
c Var 'aux1234' direct represents '2' with '-4963'
4962 4964 -4963 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '4965'
c Var 'aux1235' direct represents '0' with '4965'
c Var 'aux1235' order represents '1' with '4966'
-4965 4966 0
c Var 'aux1235' direct represents '1' with '4967'
4965 -4966 4967 0
-4967 4966 0
-4967 -4965 0
c Var 'aux1235' direct represents '2' with '-4966'
4965 4967 -4966 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '4968'
c Var 'aux1236' direct represents '0' with '4968'
c Var 'aux1236' order represents '1' with '4969'
-4968 4969 0
c Var 'aux1236' direct represents '1' with '4970'
4968 -4969 4970 0
-4970 4969 0
-4970 -4968 0
c Var 'aux1236' direct represents '2' with '-4969'
4968 4970 -4969 0
c Encoding variable: aux1237 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1236))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '4971'
c Var 'aux1237' direct represents '0' with '4971'
c Var 'aux1237' order represents '1' with '4972'
-4971 4972 0
c Var 'aux1237' direct represents '1' with '4973'
4971 -4972 4973 0
-4973 4972 0
-4973 -4971 0
c Var 'aux1237' order represents '2' with '4974'
-4972 4974 0
c Var 'aux1237' direct represents '2' with '4975'
4972 -4974 4975 0
-4975 4974 0
-4975 -4972 0
c Var 'aux1237' direct represents '3' with '-4974'
4971 4973 4975 -4974 0
c Encoding variable: aux1238 with domain: int(0..4) (representing constraint (aux1233 + aux1235))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '4976'
c Var 'aux1238' direct represents '0' with '4976'
c Var 'aux1238' order represents '1' with '4977'
-4976 4977 0
c Var 'aux1238' direct represents '1' with '4978'
4976 -4977 4978 0
-4978 4977 0
-4978 -4976 0
c Var 'aux1238' order represents '2' with '4979'
-4977 4979 0
c Var 'aux1238' direct represents '2' with '4980'
4977 -4979 4980 0
-4980 4979 0
-4980 -4977 0
c Var 'aux1238' order represents '3' with '4981'
-4979 4981 0
c Var 'aux1238' direct represents '3' with '4982'
4979 -4981 4982 0
-4982 4981 0
-4982 -4979 0
c Var 'aux1238' direct represents '4' with '-4981'
4976 4978 4980 4982 -4981 0
c Encoding variable: aux1239 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '4983'
c Var 'aux1239' direct represents '0' with '4983'
c Var 'aux1239' order represents '1' with '4984'
-4983 4984 0
c Var 'aux1239' direct represents '1' with '4985'
4983 -4984 4985 0
-4985 4984 0
-4985 -4983 0
c Var 'aux1239' direct represents '2' with '-4984'
4983 4985 -4984 0
c Encoding variable: aux1240 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '4986'
c Var 'aux1240' direct represents '0' with '4986'
c Var 'aux1240' order represents '1' with '4987'
-4986 4987 0
c Var 'aux1240' direct represents '1' with '4988'
4986 -4987 4988 0
-4988 4987 0
-4988 -4986 0
c Var 'aux1240' direct represents '2' with '-4987'
4986 4988 -4987 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '4989'
c Var 'aux1241' direct represents '0' with '4989'
c Var 'aux1241' order represents '1' with '4990'
-4989 4990 0
c Var 'aux1241' direct represents '1' with '4991'
4989 -4990 4991 0
-4991 4990 0
-4991 -4989 0
c Var 'aux1241' direct represents '2' with '-4990'
4989 4991 -4990 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '4992'
c Var 'aux1242' direct represents '0' with '4992'
c Var 'aux1242' order represents '1' with '4993'
-4992 4993 0
c Var 'aux1242' direct represents '1' with '4994'
4992 -4993 4994 0
-4994 4993 0
-4994 -4992 0
c Var 'aux1242' direct represents '2' with '-4993'
4992 4994 -4993 0
c Encoding variable: aux1243 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1242))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '4995'
c Var 'aux1243' direct represents '0' with '4995'
c Var 'aux1243' order represents '1' with '4996'
-4995 4996 0
c Var 'aux1243' direct represents '1' with '4997'
4995 -4996 4997 0
-4997 4996 0
-4997 -4995 0
c Var 'aux1243' order represents '2' with '4998'
-4996 4998 0
c Var 'aux1243' direct represents '2' with '4999'
4996 -4998 4999 0
-4999 4998 0
-4999 -4996 0
c Var 'aux1243' direct represents '3' with '-4998'
4995 4997 4999 -4998 0
c Encoding variable: aux1244 with domain: int(0..4) (representing constraint (aux1239 + aux1241))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5000'
c Var 'aux1244' direct represents '0' with '5000'
c Var 'aux1244' order represents '1' with '5001'
-5000 5001 0
c Var 'aux1244' direct represents '1' with '5002'
5000 -5001 5002 0
-5002 5001 0
-5002 -5000 0
c Var 'aux1244' order represents '2' with '5003'
-5001 5003 0
c Var 'aux1244' direct represents '2' with '5004'
5001 -5003 5004 0
-5004 5003 0
-5004 -5001 0
c Var 'aux1244' order represents '3' with '5005'
-5003 5005 0
c Var 'aux1244' direct represents '3' with '5006'
5003 -5005 5006 0
-5006 5005 0
-5006 -5003 0
c Var 'aux1244' direct represents '4' with '-5005'
5000 5002 5004 5006 -5005 0
c Encoding variable: aux1245 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5007'
c Var 'aux1245' direct represents '0' with '5007'
c Var 'aux1245' order represents '1' with '5008'
-5007 5008 0
c Var 'aux1245' direct represents '1' with '5009'
5007 -5008 5009 0
-5009 5008 0
-5009 -5007 0
c Var 'aux1245' direct represents '2' with '-5008'
5007 5009 -5008 0
c Encoding variable: aux1246 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5010'
c Var 'aux1246' direct represents '0' with '5010'
c Var 'aux1246' order represents '1' with '5011'
-5010 5011 0
c Var 'aux1246' direct represents '1' with '5012'
5010 -5011 5012 0
-5012 5011 0
-5012 -5010 0
c Var 'aux1246' direct represents '2' with '-5011'
5010 5012 -5011 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5013'
c Var 'aux1247' direct represents '0' with '5013'
c Var 'aux1247' order represents '1' with '5014'
-5013 5014 0
c Var 'aux1247' direct represents '1' with '5015'
5013 -5014 5015 0
-5015 5014 0
-5015 -5013 0
c Var 'aux1247' direct represents '2' with '-5014'
5013 5015 -5014 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5016'
c Var 'aux1248' direct represents '0' with '5016'
c Var 'aux1248' order represents '1' with '5017'
-5016 5017 0
c Var 'aux1248' direct represents '1' with '5018'
5016 -5017 5018 0
-5018 5017 0
-5018 -5016 0
c Var 'aux1248' direct represents '2' with '-5017'
5016 5018 -5017 0
c Encoding variable: aux1249 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1248))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5019'
c Var 'aux1249' direct represents '0' with '5019'
c Var 'aux1249' order represents '1' with '5020'
-5019 5020 0
c Var 'aux1249' direct represents '1' with '5021'
5019 -5020 5021 0
-5021 5020 0
-5021 -5019 0
c Var 'aux1249' order represents '2' with '5022'
-5020 5022 0
c Var 'aux1249' direct represents '2' with '5023'
5020 -5022 5023 0
-5023 5022 0
-5023 -5020 0
c Var 'aux1249' direct represents '3' with '-5022'
5019 5021 5023 -5022 0
c Encoding variable: aux1250 with domain: int(0..4) (representing constraint (aux1245 + aux1247))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5024'
c Var 'aux1250' direct represents '0' with '5024'
c Var 'aux1250' order represents '1' with '5025'
-5024 5025 0
c Var 'aux1250' direct represents '1' with '5026'
5024 -5025 5026 0
-5026 5025 0
-5026 -5024 0
c Var 'aux1250' order represents '2' with '5027'
-5025 5027 0
c Var 'aux1250' direct represents '2' with '5028'
5025 -5027 5028 0
-5028 5027 0
-5028 -5025 0
c Var 'aux1250' order represents '3' with '5029'
-5027 5029 0
c Var 'aux1250' direct represents '3' with '5030'
5027 -5029 5030 0
-5030 5029 0
-5030 -5027 0
c Var 'aux1250' direct represents '4' with '-5029'
5024 5026 5028 5030 -5029 0
c Encoding variable: aux1251 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5031'
c Var 'aux1251' direct represents '0' with '5031'
c Var 'aux1251' order represents '1' with '5032'
-5031 5032 0
c Var 'aux1251' direct represents '1' with '5033'
5031 -5032 5033 0
-5033 5032 0
-5033 -5031 0
c Var 'aux1251' direct represents '2' with '-5032'
5031 5033 -5032 0
c Encoding variable: aux1252 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5034'
c Var 'aux1252' direct represents '0' with '5034'
c Var 'aux1252' order represents '1' with '5035'
-5034 5035 0
c Var 'aux1252' direct represents '1' with '5036'
5034 -5035 5036 0
-5036 5035 0
-5036 -5034 0
c Var 'aux1252' direct represents '2' with '-5035'
5034 5036 -5035 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5037'
c Var 'aux1253' direct represents '0' with '5037'
c Var 'aux1253' order represents '1' with '5038'
-5037 5038 0
c Var 'aux1253' direct represents '1' with '5039'
5037 -5038 5039 0
-5039 5038 0
-5039 -5037 0
c Var 'aux1253' direct represents '2' with '-5038'
5037 5039 -5038 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5040'
c Var 'aux1254' direct represents '0' with '5040'
c Var 'aux1254' order represents '1' with '5041'
-5040 5041 0
c Var 'aux1254' direct represents '1' with '5042'
5040 -5041 5042 0
-5042 5041 0
-5042 -5040 0
c Var 'aux1254' direct represents '2' with '-5041'
5040 5042 -5041 0
c Encoding variable: aux1255 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1254))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5043'
c Var 'aux1255' direct represents '0' with '5043'
c Var 'aux1255' order represents '1' with '5044'
-5043 5044 0
c Var 'aux1255' direct represents '1' with '5045'
5043 -5044 5045 0
-5045 5044 0
-5045 -5043 0
c Var 'aux1255' order represents '2' with '5046'
-5044 5046 0
c Var 'aux1255' direct represents '2' with '5047'
5044 -5046 5047 0
-5047 5046 0
-5047 -5044 0
c Var 'aux1255' direct represents '3' with '-5046'
5043 5045 5047 -5046 0
c Encoding variable: aux1256 with domain: int(0..4) (representing constraint (aux1251 + aux1253))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5048'
c Var 'aux1256' direct represents '0' with '5048'
c Var 'aux1256' order represents '1' with '5049'
-5048 5049 0
c Var 'aux1256' direct represents '1' with '5050'
5048 -5049 5050 0
-5050 5049 0
-5050 -5048 0
c Var 'aux1256' order represents '2' with '5051'
-5049 5051 0
c Var 'aux1256' direct represents '2' with '5052'
5049 -5051 5052 0
-5052 5051 0
-5052 -5049 0
c Var 'aux1256' order represents '3' with '5053'
-5051 5053 0
c Var 'aux1256' direct represents '3' with '5054'
5051 -5053 5054 0
-5054 5053 0
-5054 -5051 0
c Var 'aux1256' direct represents '4' with '-5053'
5048 5050 5052 5054 -5053 0
c Encoding variable: aux1257 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5055'
c Var 'aux1257' direct represents '0' with '5055'
c Var 'aux1257' order represents '1' with '5056'
-5055 5056 0
c Var 'aux1257' direct represents '1' with '5057'
5055 -5056 5057 0
-5057 5056 0
-5057 -5055 0
c Var 'aux1257' direct represents '2' with '-5056'
5055 5057 -5056 0
c Encoding variable: aux1258 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5058'
c Var 'aux1258' direct represents '0' with '5058'
c Var 'aux1258' order represents '1' with '5059'
-5058 5059 0
c Var 'aux1258' direct represents '1' with '5060'
5058 -5059 5060 0
-5060 5059 0
-5060 -5058 0
c Var 'aux1258' direct represents '2' with '-5059'
5058 5060 -5059 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5061'
c Var 'aux1259' direct represents '0' with '5061'
c Var 'aux1259' order represents '1' with '5062'
-5061 5062 0
c Var 'aux1259' direct represents '1' with '5063'
5061 -5062 5063 0
-5063 5062 0
-5063 -5061 0
c Var 'aux1259' direct represents '2' with '-5062'
5061 5063 -5062 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5064'
c Var 'aux1260' direct represents '0' with '5064'
c Var 'aux1260' order represents '1' with '5065'
-5064 5065 0
c Var 'aux1260' direct represents '1' with '5066'
5064 -5065 5066 0
-5066 5065 0
-5066 -5064 0
c Var 'aux1260' direct represents '2' with '-5065'
5064 5066 -5065 0
c Encoding variable: aux1261 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1260))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5067'
c Var 'aux1261' direct represents '0' with '5067'
c Var 'aux1261' order represents '1' with '5068'
-5067 5068 0
c Var 'aux1261' direct represents '1' with '5069'
5067 -5068 5069 0
-5069 5068 0
-5069 -5067 0
c Var 'aux1261' order represents '2' with '5070'
-5068 5070 0
c Var 'aux1261' direct represents '2' with '5071'
5068 -5070 5071 0
-5071 5070 0
-5071 -5068 0
c Var 'aux1261' direct represents '3' with '-5070'
5067 5069 5071 -5070 0
c Encoding variable: aux1262 with domain: int(0..4) (representing constraint (aux1257 + aux1259))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5072'
c Var 'aux1262' direct represents '0' with '5072'
c Var 'aux1262' order represents '1' with '5073'
-5072 5073 0
c Var 'aux1262' direct represents '1' with '5074'
5072 -5073 5074 0
-5074 5073 0
-5074 -5072 0
c Var 'aux1262' order represents '2' with '5075'
-5073 5075 0
c Var 'aux1262' direct represents '2' with '5076'
5073 -5075 5076 0
-5076 5075 0
-5076 -5073 0
c Var 'aux1262' order represents '3' with '5077'
-5075 5077 0
c Var 'aux1262' direct represents '3' with '5078'
5075 -5077 5078 0
-5078 5077 0
-5078 -5075 0
c Var 'aux1262' direct represents '4' with '-5077'
5072 5074 5076 5078 -5077 0
c Encoding variable: aux1263 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5079'
c Var 'aux1263' direct represents '0' with '5079'
c Var 'aux1263' order represents '1' with '5080'
-5079 5080 0
c Var 'aux1263' direct represents '1' with '5081'
5079 -5080 5081 0
-5081 5080 0
-5081 -5079 0
c Var 'aux1263' direct represents '2' with '-5080'
5079 5081 -5080 0
c Encoding variable: aux1264 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5082'
c Var 'aux1264' direct represents '0' with '5082'
c Var 'aux1264' order represents '1' with '5083'
-5082 5083 0
c Var 'aux1264' direct represents '1' with '5084'
5082 -5083 5084 0
-5084 5083 0
-5084 -5082 0
c Var 'aux1264' direct represents '2' with '-5083'
5082 5084 -5083 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5085'
c Var 'aux1265' direct represents '0' with '5085'
c Var 'aux1265' order represents '1' with '5086'
-5085 5086 0
c Var 'aux1265' direct represents '1' with '5087'
5085 -5086 5087 0
-5087 5086 0
-5087 -5085 0
c Var 'aux1265' direct represents '2' with '-5086'
5085 5087 -5086 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5088'
c Var 'aux1266' direct represents '0' with '5088'
c Var 'aux1266' order represents '1' with '5089'
-5088 5089 0
c Var 'aux1266' direct represents '1' with '5090'
5088 -5089 5090 0
-5090 5089 0
-5090 -5088 0
c Var 'aux1266' direct represents '2' with '-5089'
5088 5090 -5089 0
c Encoding variable: aux1267 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1266))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5091'
c Var 'aux1267' direct represents '0' with '5091'
c Var 'aux1267' order represents '1' with '5092'
-5091 5092 0
c Var 'aux1267' direct represents '1' with '5093'
5091 -5092 5093 0
-5093 5092 0
-5093 -5091 0
c Var 'aux1267' order represents '2' with '5094'
-5092 5094 0
c Var 'aux1267' direct represents '2' with '5095'
5092 -5094 5095 0
-5095 5094 0
-5095 -5092 0
c Var 'aux1267' direct represents '3' with '-5094'
5091 5093 5095 -5094 0
c Encoding variable: aux1268 with domain: int(0..4) (representing constraint (aux1263 + aux1265))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5096'
c Var 'aux1268' direct represents '0' with '5096'
c Var 'aux1268' order represents '1' with '5097'
-5096 5097 0
c Var 'aux1268' direct represents '1' with '5098'
5096 -5097 5098 0
-5098 5097 0
-5098 -5096 0
c Var 'aux1268' order represents '2' with '5099'
-5097 5099 0
c Var 'aux1268' direct represents '2' with '5100'
5097 -5099 5100 0
-5100 5099 0
-5100 -5097 0
c Var 'aux1268' order represents '3' with '5101'
-5099 5101 0
c Var 'aux1268' direct represents '3' with '5102'
5099 -5101 5102 0
-5102 5101 0
-5102 -5099 0
c Var 'aux1268' direct represents '4' with '-5101'
5096 5098 5100 5102 -5101 0
c Encoding variable: aux1269 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5103'
c Var 'aux1269' direct represents '0' with '5103'
c Var 'aux1269' order represents '1' with '5104'
-5103 5104 0
c Var 'aux1269' direct represents '1' with '5105'
5103 -5104 5105 0
-5105 5104 0
-5105 -5103 0
c Var 'aux1269' direct represents '2' with '-5104'
5103 5105 -5104 0
c Encoding variable: aux1270 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5106'
c Var 'aux1270' direct represents '0' with '5106'
c Var 'aux1270' order represents '1' with '5107'
-5106 5107 0
c Var 'aux1270' direct represents '1' with '5108'
5106 -5107 5108 0
-5108 5107 0
-5108 -5106 0
c Var 'aux1270' direct represents '2' with '-5107'
5106 5108 -5107 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5109'
c Var 'aux1271' direct represents '0' with '5109'
c Var 'aux1271' order represents '1' with '5110'
-5109 5110 0
c Var 'aux1271' direct represents '1' with '5111'
5109 -5110 5111 0
-5111 5110 0
-5111 -5109 0
c Var 'aux1271' direct represents '2' with '-5110'
5109 5111 -5110 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5112'
c Var 'aux1272' direct represents '0' with '5112'
c Var 'aux1272' order represents '1' with '5113'
-5112 5113 0
c Var 'aux1272' direct represents '1' with '5114'
5112 -5113 5114 0
-5114 5113 0
-5114 -5112 0
c Var 'aux1272' direct represents '2' with '-5113'
5112 5114 -5113 0
c Encoding variable: aux1273 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1272))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5115'
c Var 'aux1273' direct represents '0' with '5115'
c Var 'aux1273' order represents '1' with '5116'
-5115 5116 0
c Var 'aux1273' direct represents '1' with '5117'
5115 -5116 5117 0
-5117 5116 0
-5117 -5115 0
c Var 'aux1273' order represents '2' with '5118'
-5116 5118 0
c Var 'aux1273' direct represents '2' with '5119'
5116 -5118 5119 0
-5119 5118 0
-5119 -5116 0
c Var 'aux1273' direct represents '3' with '-5118'
5115 5117 5119 -5118 0
c Encoding variable: aux1274 with domain: int(0..4) (representing constraint (aux1269 + aux1271))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5120'
c Var 'aux1274' direct represents '0' with '5120'
c Var 'aux1274' order represents '1' with '5121'
-5120 5121 0
c Var 'aux1274' direct represents '1' with '5122'
5120 -5121 5122 0
-5122 5121 0
-5122 -5120 0
c Var 'aux1274' order represents '2' with '5123'
-5121 5123 0
c Var 'aux1274' direct represents '2' with '5124'
5121 -5123 5124 0
-5124 5123 0
-5124 -5121 0
c Var 'aux1274' order represents '3' with '5125'
-5123 5125 0
c Var 'aux1274' direct represents '3' with '5126'
5123 -5125 5126 0
-5126 5125 0
-5126 -5123 0
c Var 'aux1274' direct represents '4' with '-5125'
5120 5122 5124 5126 -5125 0
c Encoding variable: aux1275 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5127'
c Var 'aux1275' direct represents '0' with '5127'
c Var 'aux1275' order represents '1' with '5128'
-5127 5128 0
c Var 'aux1275' direct represents '1' with '5129'
5127 -5128 5129 0
-5129 5128 0
-5129 -5127 0
c Var 'aux1275' direct represents '2' with '-5128'
5127 5129 -5128 0
c Encoding variable: aux1276 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5130'
c Var 'aux1276' direct represents '0' with '5130'
c Var 'aux1276' order represents '1' with '5131'
-5130 5131 0
c Var 'aux1276' direct represents '1' with '5132'
5130 -5131 5132 0
-5132 5131 0
-5132 -5130 0
c Var 'aux1276' direct represents '2' with '-5131'
5130 5132 -5131 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5133'
c Var 'aux1277' direct represents '0' with '5133'
c Var 'aux1277' order represents '1' with '5134'
-5133 5134 0
c Var 'aux1277' direct represents '1' with '5135'
5133 -5134 5135 0
-5135 5134 0
-5135 -5133 0
c Var 'aux1277' direct represents '2' with '-5134'
5133 5135 -5134 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5136'
c Var 'aux1278' direct represents '0' with '5136'
c Var 'aux1278' order represents '1' with '5137'
-5136 5137 0
c Var 'aux1278' direct represents '1' with '5138'
5136 -5137 5138 0
-5138 5137 0
-5138 -5136 0
c Var 'aux1278' direct represents '2' with '-5137'
5136 5138 -5137 0
c Encoding variable: aux1279 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1278))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5139'
c Var 'aux1279' direct represents '0' with '5139'
c Var 'aux1279' order represents '1' with '5140'
-5139 5140 0
c Var 'aux1279' direct represents '1' with '5141'
5139 -5140 5141 0
-5141 5140 0
-5141 -5139 0
c Var 'aux1279' order represents '2' with '5142'
-5140 5142 0
c Var 'aux1279' direct represents '2' with '5143'
5140 -5142 5143 0
-5143 5142 0
-5143 -5140 0
c Var 'aux1279' direct represents '3' with '-5142'
5139 5141 5143 -5142 0
c Encoding variable: aux1280 with domain: int(0..4) (representing constraint (aux1275 + aux1277))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5144'
c Var 'aux1280' direct represents '0' with '5144'
c Var 'aux1280' order represents '1' with '5145'
-5144 5145 0
c Var 'aux1280' direct represents '1' with '5146'
5144 -5145 5146 0
-5146 5145 0
-5146 -5144 0
c Var 'aux1280' order represents '2' with '5147'
-5145 5147 0
c Var 'aux1280' direct represents '2' with '5148'
5145 -5147 5148 0
-5148 5147 0
-5148 -5145 0
c Var 'aux1280' order represents '3' with '5149'
-5147 5149 0
c Var 'aux1280' direct represents '3' with '5150'
5147 -5149 5150 0
-5150 5149 0
-5150 -5147 0
c Var 'aux1280' direct represents '4' with '-5149'
5144 5146 5148 5150 -5149 0
c Encoding variable: aux1281 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5151'
c Var 'aux1281' direct represents '0' with '5151'
c Var 'aux1281' order represents '1' with '5152'
-5151 5152 0
c Var 'aux1281' direct represents '1' with '5153'
5151 -5152 5153 0
-5153 5152 0
-5153 -5151 0
c Var 'aux1281' direct represents '2' with '-5152'
5151 5153 -5152 0
c Encoding variable: aux1282 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5154'
c Var 'aux1282' direct represents '0' with '5154'
c Var 'aux1282' order represents '1' with '5155'
-5154 5155 0
c Var 'aux1282' direct represents '1' with '5156'
5154 -5155 5156 0
-5156 5155 0
-5156 -5154 0
c Var 'aux1282' direct represents '2' with '-5155'
5154 5156 -5155 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5157'
c Var 'aux1283' direct represents '0' with '5157'
c Var 'aux1283' order represents '1' with '5158'
-5157 5158 0
c Var 'aux1283' direct represents '1' with '5159'
5157 -5158 5159 0
-5159 5158 0
-5159 -5157 0
c Var 'aux1283' direct represents '2' with '-5158'
5157 5159 -5158 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5160'
c Var 'aux1284' direct represents '0' with '5160'
c Var 'aux1284' order represents '1' with '5161'
-5160 5161 0
c Var 'aux1284' direct represents '1' with '5162'
5160 -5161 5162 0
-5162 5161 0
-5162 -5160 0
c Var 'aux1284' direct represents '2' with '-5161'
5160 5162 -5161 0
c Encoding variable: aux1285 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1284))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5163'
c Var 'aux1285' direct represents '0' with '5163'
c Var 'aux1285' order represents '1' with '5164'
-5163 5164 0
c Var 'aux1285' direct represents '1' with '5165'
5163 -5164 5165 0
-5165 5164 0
-5165 -5163 0
c Var 'aux1285' order represents '2' with '5166'
-5164 5166 0
c Var 'aux1285' direct represents '2' with '5167'
5164 -5166 5167 0
-5167 5166 0
-5167 -5164 0
c Var 'aux1285' direct represents '3' with '-5166'
5163 5165 5167 -5166 0
c Encoding variable: aux1286 with domain: int(0..4) (representing constraint (aux1281 + aux1283))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5168'
c Var 'aux1286' direct represents '0' with '5168'
c Var 'aux1286' order represents '1' with '5169'
-5168 5169 0
c Var 'aux1286' direct represents '1' with '5170'
5168 -5169 5170 0
-5170 5169 0
-5170 -5168 0
c Var 'aux1286' order represents '2' with '5171'
-5169 5171 0
c Var 'aux1286' direct represents '2' with '5172'
5169 -5171 5172 0
-5172 5171 0
-5172 -5169 0
c Var 'aux1286' order represents '3' with '5173'
-5171 5173 0
c Var 'aux1286' direct represents '3' with '5174'
5171 -5173 5174 0
-5174 5173 0
-5174 -5171 0
c Var 'aux1286' direct represents '4' with '-5173'
5168 5170 5172 5174 -5173 0
c Encoding variable: aux1287 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5175'
c Var 'aux1287' direct represents '0' with '5175'
c Var 'aux1287' order represents '1' with '5176'
-5175 5176 0
c Var 'aux1287' direct represents '1' with '5177'
5175 -5176 5177 0
-5177 5176 0
-5177 -5175 0
c Var 'aux1287' direct represents '2' with '-5176'
5175 5177 -5176 0
c Encoding variable: aux1288 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5178'
c Var 'aux1288' direct represents '0' with '5178'
c Var 'aux1288' order represents '1' with '5179'
-5178 5179 0
c Var 'aux1288' direct represents '1' with '5180'
5178 -5179 5180 0
-5180 5179 0
-5180 -5178 0
c Var 'aux1288' direct represents '2' with '-5179'
5178 5180 -5179 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5181'
c Var 'aux1289' direct represents '0' with '5181'
c Var 'aux1289' order represents '1' with '5182'
-5181 5182 0
c Var 'aux1289' direct represents '1' with '5183'
5181 -5182 5183 0
-5183 5182 0
-5183 -5181 0
c Var 'aux1289' direct represents '2' with '-5182'
5181 5183 -5182 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5184'
c Var 'aux1290' direct represents '0' with '5184'
c Var 'aux1290' order represents '1' with '5185'
-5184 5185 0
c Var 'aux1290' direct represents '1' with '5186'
5184 -5185 5186 0
-5186 5185 0
-5186 -5184 0
c Var 'aux1290' direct represents '2' with '-5185'
5184 5186 -5185 0
c Encoding variable: aux1291 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1290))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5187'
c Var 'aux1291' direct represents '0' with '5187'
c Var 'aux1291' order represents '1' with '5188'
-5187 5188 0
c Var 'aux1291' direct represents '1' with '5189'
5187 -5188 5189 0
-5189 5188 0
-5189 -5187 0
c Var 'aux1291' order represents '2' with '5190'
-5188 5190 0
c Var 'aux1291' direct represents '2' with '5191'
5188 -5190 5191 0
-5191 5190 0
-5191 -5188 0
c Var 'aux1291' direct represents '3' with '-5190'
5187 5189 5191 -5190 0
c Encoding variable: aux1292 with domain: int(0..4) (representing constraint (aux1287 + aux1289))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5192'
c Var 'aux1292' direct represents '0' with '5192'
c Var 'aux1292' order represents '1' with '5193'
-5192 5193 0
c Var 'aux1292' direct represents '1' with '5194'
5192 -5193 5194 0
-5194 5193 0
-5194 -5192 0
c Var 'aux1292' order represents '2' with '5195'
-5193 5195 0
c Var 'aux1292' direct represents '2' with '5196'
5193 -5195 5196 0
-5196 5195 0
-5196 -5193 0
c Var 'aux1292' order represents '3' with '5197'
-5195 5197 0
c Var 'aux1292' direct represents '3' with '5198'
5195 -5197 5198 0
-5198 5197 0
-5198 -5195 0
c Var 'aux1292' direct represents '4' with '-5197'
5192 5194 5196 5198 -5197 0
c Encoding variable: aux1293 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5199'
c Var 'aux1293' direct represents '0' with '5199'
c Var 'aux1293' order represents '1' with '5200'
-5199 5200 0
c Var 'aux1293' direct represents '1' with '5201'
5199 -5200 5201 0
-5201 5200 0
-5201 -5199 0
c Var 'aux1293' direct represents '2' with '-5200'
5199 5201 -5200 0
c Encoding variable: aux1294 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5202'
c Var 'aux1294' direct represents '0' with '5202'
c Var 'aux1294' order represents '1' with '5203'
-5202 5203 0
c Var 'aux1294' direct represents '1' with '5204'
5202 -5203 5204 0
-5204 5203 0
-5204 -5202 0
c Var 'aux1294' direct represents '2' with '-5203'
5202 5204 -5203 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5205'
c Var 'aux1295' direct represents '0' with '5205'
c Var 'aux1295' order represents '1' with '5206'
-5205 5206 0
c Var 'aux1295' direct represents '1' with '5207'
5205 -5206 5207 0
-5207 5206 0
-5207 -5205 0
c Var 'aux1295' direct represents '2' with '-5206'
5205 5207 -5206 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5208'
c Var 'aux1296' direct represents '0' with '5208'
c Var 'aux1296' order represents '1' with '5209'
-5208 5209 0
c Var 'aux1296' direct represents '1' with '5210'
5208 -5209 5210 0
-5210 5209 0
-5210 -5208 0
c Var 'aux1296' direct represents '2' with '-5209'
5208 5210 -5209 0
c Encoding variable: aux1297 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1296))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5211'
c Var 'aux1297' direct represents '0' with '5211'
c Var 'aux1297' order represents '1' with '5212'
-5211 5212 0
c Var 'aux1297' direct represents '1' with '5213'
5211 -5212 5213 0
-5213 5212 0
-5213 -5211 0
c Var 'aux1297' order represents '2' with '5214'
-5212 5214 0
c Var 'aux1297' direct represents '2' with '5215'
5212 -5214 5215 0
-5215 5214 0
-5215 -5212 0
c Var 'aux1297' direct represents '3' with '-5214'
5211 5213 5215 -5214 0
c Encoding variable: aux1298 with domain: int(0..4) (representing constraint (aux1293 + aux1295))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5216'
c Var 'aux1298' direct represents '0' with '5216'
c Var 'aux1298' order represents '1' with '5217'
-5216 5217 0
c Var 'aux1298' direct represents '1' with '5218'
5216 -5217 5218 0
-5218 5217 0
-5218 -5216 0
c Var 'aux1298' order represents '2' with '5219'
-5217 5219 0
c Var 'aux1298' direct represents '2' with '5220'
5217 -5219 5220 0
-5220 5219 0
-5220 -5217 0
c Var 'aux1298' order represents '3' with '5221'
-5219 5221 0
c Var 'aux1298' direct represents '3' with '5222'
5219 -5221 5222 0
-5222 5221 0
-5222 -5219 0
c Var 'aux1298' direct represents '4' with '-5221'
5216 5218 5220 5222 -5221 0
c Encoding variable: aux1299 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5223'
c Var 'aux1299' direct represents '0' with '5223'
c Var 'aux1299' order represents '1' with '5224'
-5223 5224 0
c Var 'aux1299' direct represents '1' with '5225'
5223 -5224 5225 0
-5225 5224 0
-5225 -5223 0
c Var 'aux1299' direct represents '2' with '-5224'
5223 5225 -5224 0
c Encoding variable: aux1300 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5226'
c Var 'aux1300' direct represents '0' with '5226'
c Var 'aux1300' order represents '1' with '5227'
-5226 5227 0
c Var 'aux1300' direct represents '1' with '5228'
5226 -5227 5228 0
-5228 5227 0
-5228 -5226 0
c Var 'aux1300' direct represents '2' with '-5227'
5226 5228 -5227 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5229'
c Var 'aux1301' direct represents '0' with '5229'
c Var 'aux1301' order represents '1' with '5230'
-5229 5230 0
c Var 'aux1301' direct represents '1' with '5231'
5229 -5230 5231 0
-5231 5230 0
-5231 -5229 0
c Var 'aux1301' direct represents '2' with '-5230'
5229 5231 -5230 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5232'
c Var 'aux1302' direct represents '0' with '5232'
c Var 'aux1302' order represents '1' with '5233'
-5232 5233 0
c Var 'aux1302' direct represents '1' with '5234'
5232 -5233 5234 0
-5234 5233 0
-5234 -5232 0
c Var 'aux1302' direct represents '2' with '-5233'
5232 5234 -5233 0
c Encoding variable: aux1303 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1302))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5235'
c Var 'aux1303' direct represents '0' with '5235'
c Var 'aux1303' order represents '1' with '5236'
-5235 5236 0
c Var 'aux1303' direct represents '1' with '5237'
5235 -5236 5237 0
-5237 5236 0
-5237 -5235 0
c Var 'aux1303' order represents '2' with '5238'
-5236 5238 0
c Var 'aux1303' direct represents '2' with '5239'
5236 -5238 5239 0
-5239 5238 0
-5239 -5236 0
c Var 'aux1303' direct represents '3' with '-5238'
5235 5237 5239 -5238 0
c Encoding variable: aux1304 with domain: int(0..4) (representing constraint (aux1299 + aux1301))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5240'
c Var 'aux1304' direct represents '0' with '5240'
c Var 'aux1304' order represents '1' with '5241'
-5240 5241 0
c Var 'aux1304' direct represents '1' with '5242'
5240 -5241 5242 0
-5242 5241 0
-5242 -5240 0
c Var 'aux1304' order represents '2' with '5243'
-5241 5243 0
c Var 'aux1304' direct represents '2' with '5244'
5241 -5243 5244 0
-5244 5243 0
-5244 -5241 0
c Var 'aux1304' order represents '3' with '5245'
-5243 5245 0
c Var 'aux1304' direct represents '3' with '5246'
5243 -5245 5246 0
-5246 5245 0
-5246 -5243 0
c Var 'aux1304' direct represents '4' with '-5245'
5240 5242 5244 5246 -5245 0
c Encoding variable: aux1305 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5247'
c Var 'aux1305' direct represents '0' with '5247'
c Var 'aux1305' order represents '1' with '5248'
-5247 5248 0
c Var 'aux1305' direct represents '1' with '5249'
5247 -5248 5249 0
-5249 5248 0
-5249 -5247 0
c Var 'aux1305' direct represents '2' with '-5248'
5247 5249 -5248 0
c Encoding variable: aux1306 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5250'
c Var 'aux1306' direct represents '0' with '5250'
c Var 'aux1306' order represents '1' with '5251'
-5250 5251 0
c Var 'aux1306' direct represents '1' with '5252'
5250 -5251 5252 0
-5252 5251 0
-5252 -5250 0
c Var 'aux1306' direct represents '2' with '-5251'
5250 5252 -5251 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5253'
c Var 'aux1307' direct represents '0' with '5253'
c Var 'aux1307' order represents '1' with '5254'
-5253 5254 0
c Var 'aux1307' direct represents '1' with '5255'
5253 -5254 5255 0
-5255 5254 0
-5255 -5253 0
c Var 'aux1307' direct represents '2' with '-5254'
5253 5255 -5254 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5256'
c Var 'aux1308' direct represents '0' with '5256'
c Var 'aux1308' order represents '1' with '5257'
-5256 5257 0
c Var 'aux1308' direct represents '1' with '5258'
5256 -5257 5258 0
-5258 5257 0
-5258 -5256 0
c Var 'aux1308' direct represents '2' with '-5257'
5256 5258 -5257 0
c Encoding variable: aux1309 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1308))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5259'
c Var 'aux1309' direct represents '0' with '5259'
c Var 'aux1309' order represents '1' with '5260'
-5259 5260 0
c Var 'aux1309' direct represents '1' with '5261'
5259 -5260 5261 0
-5261 5260 0
-5261 -5259 0
c Var 'aux1309' order represents '2' with '5262'
-5260 5262 0
c Var 'aux1309' direct represents '2' with '5263'
5260 -5262 5263 0
-5263 5262 0
-5263 -5260 0
c Var 'aux1309' direct represents '3' with '-5262'
5259 5261 5263 -5262 0
c Encoding variable: aux1310 with domain: int(0..4) (representing constraint (aux1305 + aux1307))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5264'
c Var 'aux1310' direct represents '0' with '5264'
c Var 'aux1310' order represents '1' with '5265'
-5264 5265 0
c Var 'aux1310' direct represents '1' with '5266'
5264 -5265 5266 0
-5266 5265 0
-5266 -5264 0
c Var 'aux1310' order represents '2' with '5267'
-5265 5267 0
c Var 'aux1310' direct represents '2' with '5268'
5265 -5267 5268 0
-5268 5267 0
-5268 -5265 0
c Var 'aux1310' order represents '3' with '5269'
-5267 5269 0
c Var 'aux1310' direct represents '3' with '5270'
5267 -5269 5270 0
-5270 5269 0
-5270 -5267 0
c Var 'aux1310' direct represents '4' with '-5269'
5264 5266 5268 5270 -5269 0
c Encoding variable: aux1311 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5271'
c Var 'aux1311' direct represents '0' with '5271'
c Var 'aux1311' order represents '1' with '5272'
-5271 5272 0
c Var 'aux1311' direct represents '1' with '5273'
5271 -5272 5273 0
-5273 5272 0
-5273 -5271 0
c Var 'aux1311' direct represents '2' with '-5272'
5271 5273 -5272 0
c Encoding variable: aux1312 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5274'
c Var 'aux1312' direct represents '0' with '5274'
c Var 'aux1312' order represents '1' with '5275'
-5274 5275 0
c Var 'aux1312' direct represents '1' with '5276'
5274 -5275 5276 0
-5276 5275 0
-5276 -5274 0
c Var 'aux1312' direct represents '2' with '-5275'
5274 5276 -5275 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5277'
c Var 'aux1313' direct represents '0' with '5277'
c Var 'aux1313' order represents '1' with '5278'
-5277 5278 0
c Var 'aux1313' direct represents '1' with '5279'
5277 -5278 5279 0
-5279 5278 0
-5279 -5277 0
c Var 'aux1313' direct represents '2' with '-5278'
5277 5279 -5278 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5280'
c Var 'aux1314' direct represents '0' with '5280'
c Var 'aux1314' order represents '1' with '5281'
-5280 5281 0
c Var 'aux1314' direct represents '1' with '5282'
5280 -5281 5282 0
-5282 5281 0
-5282 -5280 0
c Var 'aux1314' direct represents '2' with '-5281'
5280 5282 -5281 0
c Encoding variable: aux1315 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1314))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5283'
c Var 'aux1315' direct represents '0' with '5283'
c Var 'aux1315' order represents '1' with '5284'
-5283 5284 0
c Var 'aux1315' direct represents '1' with '5285'
5283 -5284 5285 0
-5285 5284 0
-5285 -5283 0
c Var 'aux1315' order represents '2' with '5286'
-5284 5286 0
c Var 'aux1315' direct represents '2' with '5287'
5284 -5286 5287 0
-5287 5286 0
-5287 -5284 0
c Var 'aux1315' direct represents '3' with '-5286'
5283 5285 5287 -5286 0
c Encoding variable: aux1316 with domain: int(0..4) (representing constraint (aux1311 + aux1313))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5288'
c Var 'aux1316' direct represents '0' with '5288'
c Var 'aux1316' order represents '1' with '5289'
-5288 5289 0
c Var 'aux1316' direct represents '1' with '5290'
5288 -5289 5290 0
-5290 5289 0
-5290 -5288 0
c Var 'aux1316' order represents '2' with '5291'
-5289 5291 0
c Var 'aux1316' direct represents '2' with '5292'
5289 -5291 5292 0
-5292 5291 0
-5292 -5289 0
c Var 'aux1316' order represents '3' with '5293'
-5291 5293 0
c Var 'aux1316' direct represents '3' with '5294'
5291 -5293 5294 0
-5294 5293 0
-5294 -5291 0
c Var 'aux1316' direct represents '4' with '-5293'
5288 5290 5292 5294 -5293 0
c Encoding variable: aux1317 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5295'
c Var 'aux1317' direct represents '0' with '5295'
c Var 'aux1317' order represents '1' with '5296'
-5295 5296 0
c Var 'aux1317' direct represents '1' with '5297'
5295 -5296 5297 0
-5297 5296 0
-5297 -5295 0
c Var 'aux1317' direct represents '2' with '-5296'
5295 5297 -5296 0
c Encoding variable: aux1318 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5298'
c Var 'aux1318' direct represents '0' with '5298'
c Var 'aux1318' order represents '1' with '5299'
-5298 5299 0
c Var 'aux1318' direct represents '1' with '5300'
5298 -5299 5300 0
-5300 5299 0
-5300 -5298 0
c Var 'aux1318' direct represents '2' with '-5299'
5298 5300 -5299 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5301'
c Var 'aux1319' direct represents '0' with '5301'
c Var 'aux1319' order represents '1' with '5302'
-5301 5302 0
c Var 'aux1319' direct represents '1' with '5303'
5301 -5302 5303 0
-5303 5302 0
-5303 -5301 0
c Var 'aux1319' direct represents '2' with '-5302'
5301 5303 -5302 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5304'
c Var 'aux1320' direct represents '0' with '5304'
c Var 'aux1320' order represents '1' with '5305'
-5304 5305 0
c Var 'aux1320' direct represents '1' with '5306'
5304 -5305 5306 0
-5306 5305 0
-5306 -5304 0
c Var 'aux1320' direct represents '2' with '-5305'
5304 5306 -5305 0
c Encoding variable: aux1321 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1320))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5307'
c Var 'aux1321' direct represents '0' with '5307'
c Var 'aux1321' order represents '1' with '5308'
-5307 5308 0
c Var 'aux1321' direct represents '1' with '5309'
5307 -5308 5309 0
-5309 5308 0
-5309 -5307 0
c Var 'aux1321' order represents '2' with '5310'
-5308 5310 0
c Var 'aux1321' direct represents '2' with '5311'
5308 -5310 5311 0
-5311 5310 0
-5311 -5308 0
c Var 'aux1321' direct represents '3' with '-5310'
5307 5309 5311 -5310 0
c Encoding variable: aux1322 with domain: int(0..4) (representing constraint (aux1317 + aux1319))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5312'
c Var 'aux1322' direct represents '0' with '5312'
c Var 'aux1322' order represents '1' with '5313'
-5312 5313 0
c Var 'aux1322' direct represents '1' with '5314'
5312 -5313 5314 0
-5314 5313 0
-5314 -5312 0
c Var 'aux1322' order represents '2' with '5315'
-5313 5315 0
c Var 'aux1322' direct represents '2' with '5316'
5313 -5315 5316 0
-5316 5315 0
-5316 -5313 0
c Var 'aux1322' order represents '3' with '5317'
-5315 5317 0
c Var 'aux1322' direct represents '3' with '5318'
5315 -5317 5318 0
-5318 5317 0
-5318 -5315 0
c Var 'aux1322' direct represents '4' with '-5317'
5312 5314 5316 5318 -5317 0
c Encoding variable: aux1323 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5319'
c Var 'aux1323' direct represents '0' with '5319'
c Var 'aux1323' order represents '1' with '5320'
-5319 5320 0
c Var 'aux1323' direct represents '1' with '5321'
5319 -5320 5321 0
-5321 5320 0
-5321 -5319 0
c Var 'aux1323' direct represents '2' with '-5320'
5319 5321 -5320 0
c Encoding variable: aux1324 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5322'
c Var 'aux1324' direct represents '0' with '5322'
c Var 'aux1324' order represents '1' with '5323'
-5322 5323 0
c Var 'aux1324' direct represents '1' with '5324'
5322 -5323 5324 0
-5324 5323 0
-5324 -5322 0
c Var 'aux1324' direct represents '2' with '-5323'
5322 5324 -5323 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5325'
c Var 'aux1325' direct represents '0' with '5325'
c Var 'aux1325' order represents '1' with '5326'
-5325 5326 0
c Var 'aux1325' direct represents '1' with '5327'
5325 -5326 5327 0
-5327 5326 0
-5327 -5325 0
c Var 'aux1325' direct represents '2' with '-5326'
5325 5327 -5326 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5328'
c Var 'aux1326' direct represents '0' with '5328'
c Var 'aux1326' order represents '1' with '5329'
-5328 5329 0
c Var 'aux1326' direct represents '1' with '5330'
5328 -5329 5330 0
-5330 5329 0
-5330 -5328 0
c Var 'aux1326' direct represents '2' with '-5329'
5328 5330 -5329 0
c Encoding variable: aux1327 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1326))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5331'
c Var 'aux1327' direct represents '0' with '5331'
c Var 'aux1327' order represents '1' with '5332'
-5331 5332 0
c Var 'aux1327' direct represents '1' with '5333'
5331 -5332 5333 0
-5333 5332 0
-5333 -5331 0
c Var 'aux1327' order represents '2' with '5334'
-5332 5334 0
c Var 'aux1327' direct represents '2' with '5335'
5332 -5334 5335 0
-5335 5334 0
-5335 -5332 0
c Var 'aux1327' direct represents '3' with '-5334'
5331 5333 5335 -5334 0
c Encoding variable: aux1328 with domain: int(0..4) (representing constraint (aux1323 + aux1325))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5336'
c Var 'aux1328' direct represents '0' with '5336'
c Var 'aux1328' order represents '1' with '5337'
-5336 5337 0
c Var 'aux1328' direct represents '1' with '5338'
5336 -5337 5338 0
-5338 5337 0
-5338 -5336 0
c Var 'aux1328' order represents '2' with '5339'
-5337 5339 0
c Var 'aux1328' direct represents '2' with '5340'
5337 -5339 5340 0
-5340 5339 0
-5340 -5337 0
c Var 'aux1328' order represents '3' with '5341'
-5339 5341 0
c Var 'aux1328' direct represents '3' with '5342'
5339 -5341 5342 0
-5342 5341 0
-5342 -5339 0
c Var 'aux1328' direct represents '4' with '-5341'
5336 5338 5340 5342 -5341 0
c Encoding variable: aux1329 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5343'
c Var 'aux1329' direct represents '0' with '5343'
c Var 'aux1329' order represents '1' with '5344'
-5343 5344 0
c Var 'aux1329' direct represents '1' with '5345'
5343 -5344 5345 0
-5345 5344 0
-5345 -5343 0
c Var 'aux1329' direct represents '2' with '-5344'
5343 5345 -5344 0
c Encoding variable: aux1330 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5346'
c Var 'aux1330' direct represents '0' with '5346'
c Var 'aux1330' order represents '1' with '5347'
-5346 5347 0
c Var 'aux1330' direct represents '1' with '5348'
5346 -5347 5348 0
-5348 5347 0
-5348 -5346 0
c Var 'aux1330' direct represents '2' with '-5347'
5346 5348 -5347 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5349'
c Var 'aux1331' direct represents '0' with '5349'
c Var 'aux1331' order represents '1' with '5350'
-5349 5350 0
c Var 'aux1331' direct represents '1' with '5351'
5349 -5350 5351 0
-5351 5350 0
-5351 -5349 0
c Var 'aux1331' direct represents '2' with '-5350'
5349 5351 -5350 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5352'
c Var 'aux1332' direct represents '0' with '5352'
c Var 'aux1332' order represents '1' with '5353'
-5352 5353 0
c Var 'aux1332' direct represents '1' with '5354'
5352 -5353 5354 0
-5354 5353 0
-5354 -5352 0
c Var 'aux1332' direct represents '2' with '-5353'
5352 5354 -5353 0
c Encoding variable: aux1333 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1332))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5355'
c Var 'aux1333' direct represents '0' with '5355'
c Var 'aux1333' order represents '1' with '5356'
-5355 5356 0
c Var 'aux1333' direct represents '1' with '5357'
5355 -5356 5357 0
-5357 5356 0
-5357 -5355 0
c Var 'aux1333' order represents '2' with '5358'
-5356 5358 0
c Var 'aux1333' direct represents '2' with '5359'
5356 -5358 5359 0
-5359 5358 0
-5359 -5356 0
c Var 'aux1333' direct represents '3' with '-5358'
5355 5357 5359 -5358 0
c Encoding variable: aux1334 with domain: int(0..4) (representing constraint (aux1329 + aux1331))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5360'
c Var 'aux1334' direct represents '0' with '5360'
c Var 'aux1334' order represents '1' with '5361'
-5360 5361 0
c Var 'aux1334' direct represents '1' with '5362'
5360 -5361 5362 0
-5362 5361 0
-5362 -5360 0
c Var 'aux1334' order represents '2' with '5363'
-5361 5363 0
c Var 'aux1334' direct represents '2' with '5364'
5361 -5363 5364 0
-5364 5363 0
-5364 -5361 0
c Var 'aux1334' order represents '3' with '5365'
-5363 5365 0
c Var 'aux1334' direct represents '3' with '5366'
5363 -5365 5366 0
-5366 5365 0
-5366 -5363 0
c Var 'aux1334' direct represents '4' with '-5365'
5360 5362 5364 5366 -5365 0
c Encoding variable: aux1335 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5367'
c Var 'aux1335' direct represents '0' with '5367'
c Var 'aux1335' order represents '1' with '5368'
-5367 5368 0
c Var 'aux1335' direct represents '1' with '5369'
5367 -5368 5369 0
-5369 5368 0
-5369 -5367 0
c Var 'aux1335' direct represents '2' with '-5368'
5367 5369 -5368 0
c Encoding variable: aux1336 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5370'
c Var 'aux1336' direct represents '0' with '5370'
c Var 'aux1336' order represents '1' with '5371'
-5370 5371 0
c Var 'aux1336' direct represents '1' with '5372'
5370 -5371 5372 0
-5372 5371 0
-5372 -5370 0
c Var 'aux1336' direct represents '2' with '-5371'
5370 5372 -5371 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5373'
c Var 'aux1337' direct represents '0' with '5373'
c Var 'aux1337' order represents '1' with '5374'
-5373 5374 0
c Var 'aux1337' direct represents '1' with '5375'
5373 -5374 5375 0
-5375 5374 0
-5375 -5373 0
c Var 'aux1337' direct represents '2' with '-5374'
5373 5375 -5374 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5376'
c Var 'aux1338' direct represents '0' with '5376'
c Var 'aux1338' order represents '1' with '5377'
-5376 5377 0
c Var 'aux1338' direct represents '1' with '5378'
5376 -5377 5378 0
-5378 5377 0
-5378 -5376 0
c Var 'aux1338' direct represents '2' with '-5377'
5376 5378 -5377 0
c Encoding variable: aux1339 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1338))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5379'
c Var 'aux1339' direct represents '0' with '5379'
c Var 'aux1339' order represents '1' with '5380'
-5379 5380 0
c Var 'aux1339' direct represents '1' with '5381'
5379 -5380 5381 0
-5381 5380 0
-5381 -5379 0
c Var 'aux1339' order represents '2' with '5382'
-5380 5382 0
c Var 'aux1339' direct represents '2' with '5383'
5380 -5382 5383 0
-5383 5382 0
-5383 -5380 0
c Var 'aux1339' direct represents '3' with '-5382'
5379 5381 5383 -5382 0
c Encoding variable: aux1340 with domain: int(0..4) (representing constraint (aux1335 + aux1337))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5384'
c Var 'aux1340' direct represents '0' with '5384'
c Var 'aux1340' order represents '1' with '5385'
-5384 5385 0
c Var 'aux1340' direct represents '1' with '5386'
5384 -5385 5386 0
-5386 5385 0
-5386 -5384 0
c Var 'aux1340' order represents '2' with '5387'
-5385 5387 0
c Var 'aux1340' direct represents '2' with '5388'
5385 -5387 5388 0
-5388 5387 0
-5388 -5385 0
c Var 'aux1340' order represents '3' with '5389'
-5387 5389 0
c Var 'aux1340' direct represents '3' with '5390'
5387 -5389 5390 0
-5390 5389 0
-5390 -5387 0
c Var 'aux1340' direct represents '4' with '-5389'
5384 5386 5388 5390 -5389 0
c Encoding variable: aux1341 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5391'
c Var 'aux1341' direct represents '0' with '5391'
c Var 'aux1341' order represents '1' with '5392'
-5391 5392 0
c Var 'aux1341' direct represents '1' with '5393'
5391 -5392 5393 0
-5393 5392 0
-5393 -5391 0
c Var 'aux1341' direct represents '2' with '-5392'
5391 5393 -5392 0
c Encoding variable: aux1342 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5394'
c Var 'aux1342' direct represents '0' with '5394'
c Var 'aux1342' order represents '1' with '5395'
-5394 5395 0
c Var 'aux1342' direct represents '1' with '5396'
5394 -5395 5396 0
-5396 5395 0
-5396 -5394 0
c Var 'aux1342' direct represents '2' with '-5395'
5394 5396 -5395 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5397'
c Var 'aux1343' direct represents '0' with '5397'
c Var 'aux1343' order represents '1' with '5398'
-5397 5398 0
c Var 'aux1343' direct represents '1' with '5399'
5397 -5398 5399 0
-5399 5398 0
-5399 -5397 0
c Var 'aux1343' direct represents '2' with '-5398'
5397 5399 -5398 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5400'
c Var 'aux1344' direct represents '0' with '5400'
c Var 'aux1344' order represents '1' with '5401'
-5400 5401 0
c Var 'aux1344' direct represents '1' with '5402'
5400 -5401 5402 0
-5402 5401 0
-5402 -5400 0
c Var 'aux1344' direct represents '2' with '-5401'
5400 5402 -5401 0
c Encoding variable: aux1345 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1344))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5403'
c Var 'aux1345' direct represents '0' with '5403'
c Var 'aux1345' order represents '1' with '5404'
-5403 5404 0
c Var 'aux1345' direct represents '1' with '5405'
5403 -5404 5405 0
-5405 5404 0
-5405 -5403 0
c Var 'aux1345' order represents '2' with '5406'
-5404 5406 0
c Var 'aux1345' direct represents '2' with '5407'
5404 -5406 5407 0
-5407 5406 0
-5407 -5404 0
c Var 'aux1345' direct represents '3' with '-5406'
5403 5405 5407 -5406 0
c Encoding variable: aux1346 with domain: int(0..4) (representing constraint (aux1341 + aux1343))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5408'
c Var 'aux1346' direct represents '0' with '5408'
c Var 'aux1346' order represents '1' with '5409'
-5408 5409 0
c Var 'aux1346' direct represents '1' with '5410'
5408 -5409 5410 0
-5410 5409 0
-5410 -5408 0
c Var 'aux1346' order represents '2' with '5411'
-5409 5411 0
c Var 'aux1346' direct represents '2' with '5412'
5409 -5411 5412 0
-5412 5411 0
-5412 -5409 0
c Var 'aux1346' order represents '3' with '5413'
-5411 5413 0
c Var 'aux1346' direct represents '3' with '5414'
5411 -5413 5414 0
-5414 5413 0
-5414 -5411 0
c Var 'aux1346' direct represents '4' with '-5413'
5408 5410 5412 5414 -5413 0
c Encoding variable: aux1347 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5415'
c Var 'aux1347' direct represents '0' with '5415'
c Var 'aux1347' order represents '1' with '5416'
-5415 5416 0
c Var 'aux1347' direct represents '1' with '5417'
5415 -5416 5417 0
-5417 5416 0
-5417 -5415 0
c Var 'aux1347' direct represents '2' with '-5416'
5415 5417 -5416 0
c Encoding variable: aux1348 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5418'
c Var 'aux1348' direct represents '0' with '5418'
c Var 'aux1348' order represents '1' with '5419'
-5418 5419 0
c Var 'aux1348' direct represents '1' with '5420'
5418 -5419 5420 0
-5420 5419 0
-5420 -5418 0
c Var 'aux1348' direct represents '2' with '-5419'
5418 5420 -5419 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5421'
c Var 'aux1349' direct represents '0' with '5421'
c Var 'aux1349' order represents '1' with '5422'
-5421 5422 0
c Var 'aux1349' direct represents '1' with '5423'
5421 -5422 5423 0
-5423 5422 0
-5423 -5421 0
c Var 'aux1349' direct represents '2' with '-5422'
5421 5423 -5422 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5424'
c Var 'aux1350' direct represents '0' with '5424'
c Var 'aux1350' order represents '1' with '5425'
-5424 5425 0
c Var 'aux1350' direct represents '1' with '5426'
5424 -5425 5426 0
-5426 5425 0
-5426 -5424 0
c Var 'aux1350' direct represents '2' with '-5425'
5424 5426 -5425 0
c Encoding variable: aux1351 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1350))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5427'
c Var 'aux1351' direct represents '0' with '5427'
c Var 'aux1351' order represents '1' with '5428'
-5427 5428 0
c Var 'aux1351' direct represents '1' with '5429'
5427 -5428 5429 0
-5429 5428 0
-5429 -5427 0
c Var 'aux1351' order represents '2' with '5430'
-5428 5430 0
c Var 'aux1351' direct represents '2' with '5431'
5428 -5430 5431 0
-5431 5430 0
-5431 -5428 0
c Var 'aux1351' direct represents '3' with '-5430'
5427 5429 5431 -5430 0
c Encoding variable: aux1352 with domain: int(0..4) (representing constraint (aux1347 + aux1349))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5432'
c Var 'aux1352' direct represents '0' with '5432'
c Var 'aux1352' order represents '1' with '5433'
-5432 5433 0
c Var 'aux1352' direct represents '1' with '5434'
5432 -5433 5434 0
-5434 5433 0
-5434 -5432 0
c Var 'aux1352' order represents '2' with '5435'
-5433 5435 0
c Var 'aux1352' direct represents '2' with '5436'
5433 -5435 5436 0
-5436 5435 0
-5436 -5433 0
c Var 'aux1352' order represents '3' with '5437'
-5435 5437 0
c Var 'aux1352' direct represents '3' with '5438'
5435 -5437 5438 0
-5438 5437 0
-5438 -5435 0
c Var 'aux1352' direct represents '4' with '-5437'
5432 5434 5436 5438 -5437 0
c Encoding variable: aux1353 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5439'
c Var 'aux1353' direct represents '0' with '5439'
c Var 'aux1353' order represents '1' with '5440'
-5439 5440 0
c Var 'aux1353' direct represents '1' with '5441'
5439 -5440 5441 0
-5441 5440 0
-5441 -5439 0
c Var 'aux1353' direct represents '2' with '-5440'
5439 5441 -5440 0
c Encoding variable: aux1354 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5442'
c Var 'aux1354' direct represents '0' with '5442'
c Var 'aux1354' order represents '1' with '5443'
-5442 5443 0
c Var 'aux1354' direct represents '1' with '5444'
5442 -5443 5444 0
-5444 5443 0
-5444 -5442 0
c Var 'aux1354' direct represents '2' with '-5443'
5442 5444 -5443 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5445'
c Var 'aux1355' direct represents '0' with '5445'
c Var 'aux1355' order represents '1' with '5446'
-5445 5446 0
c Var 'aux1355' direct represents '1' with '5447'
5445 -5446 5447 0
-5447 5446 0
-5447 -5445 0
c Var 'aux1355' direct represents '2' with '-5446'
5445 5447 -5446 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5448'
c Var 'aux1356' direct represents '0' with '5448'
c Var 'aux1356' order represents '1' with '5449'
-5448 5449 0
c Var 'aux1356' direct represents '1' with '5450'
5448 -5449 5450 0
-5450 5449 0
-5450 -5448 0
c Var 'aux1356' direct represents '2' with '-5449'
5448 5450 -5449 0
c Encoding variable: aux1357 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1356))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5451'
c Var 'aux1357' direct represents '0' with '5451'
c Var 'aux1357' order represents '1' with '5452'
-5451 5452 0
c Var 'aux1357' direct represents '1' with '5453'
5451 -5452 5453 0
-5453 5452 0
-5453 -5451 0
c Var 'aux1357' order represents '2' with '5454'
-5452 5454 0
c Var 'aux1357' direct represents '2' with '5455'
5452 -5454 5455 0
-5455 5454 0
-5455 -5452 0
c Var 'aux1357' direct represents '3' with '-5454'
5451 5453 5455 -5454 0
c Encoding variable: aux1358 with domain: int(0..4) (representing constraint (aux1353 + aux1355))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5456'
c Var 'aux1358' direct represents '0' with '5456'
c Var 'aux1358' order represents '1' with '5457'
-5456 5457 0
c Var 'aux1358' direct represents '1' with '5458'
5456 -5457 5458 0
-5458 5457 0
-5458 -5456 0
c Var 'aux1358' order represents '2' with '5459'
-5457 5459 0
c Var 'aux1358' direct represents '2' with '5460'
5457 -5459 5460 0
-5460 5459 0
-5460 -5457 0
c Var 'aux1358' order represents '3' with '5461'
-5459 5461 0
c Var 'aux1358' direct represents '3' with '5462'
5459 -5461 5462 0
-5462 5461 0
-5462 -5459 0
c Var 'aux1358' direct represents '4' with '-5461'
5456 5458 5460 5462 -5461 0
c Encoding variable: aux1359 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5463'
c Var 'aux1359' direct represents '0' with '5463'
c Var 'aux1359' order represents '1' with '5464'
-5463 5464 0
c Var 'aux1359' direct represents '1' with '5465'
5463 -5464 5465 0
-5465 5464 0
-5465 -5463 0
c Var 'aux1359' direct represents '2' with '-5464'
5463 5465 -5464 0
c Encoding variable: aux1360 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5466'
c Var 'aux1360' direct represents '0' with '5466'
c Var 'aux1360' order represents '1' with '5467'
-5466 5467 0
c Var 'aux1360' direct represents '1' with '5468'
5466 -5467 5468 0
-5468 5467 0
-5468 -5466 0
c Var 'aux1360' direct represents '2' with '-5467'
5466 5468 -5467 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5469'
c Var 'aux1361' direct represents '0' with '5469'
c Var 'aux1361' order represents '1' with '5470'
-5469 5470 0
c Var 'aux1361' direct represents '1' with '5471'
5469 -5470 5471 0
-5471 5470 0
-5471 -5469 0
c Var 'aux1361' direct represents '2' with '-5470'
5469 5471 -5470 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5472'
c Var 'aux1362' direct represents '0' with '5472'
c Var 'aux1362' order represents '1' with '5473'
-5472 5473 0
c Var 'aux1362' direct represents '1' with '5474'
5472 -5473 5474 0
-5474 5473 0
-5474 -5472 0
c Var 'aux1362' direct represents '2' with '-5473'
5472 5474 -5473 0
c Encoding variable: aux1363 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1362))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5475'
c Var 'aux1363' direct represents '0' with '5475'
c Var 'aux1363' order represents '1' with '5476'
-5475 5476 0
c Var 'aux1363' direct represents '1' with '5477'
5475 -5476 5477 0
-5477 5476 0
-5477 -5475 0
c Var 'aux1363' order represents '2' with '5478'
-5476 5478 0
c Var 'aux1363' direct represents '2' with '5479'
5476 -5478 5479 0
-5479 5478 0
-5479 -5476 0
c Var 'aux1363' direct represents '3' with '-5478'
5475 5477 5479 -5478 0
c Encoding variable: aux1364 with domain: int(0..4) (representing constraint (aux1359 + aux1361))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5480'
c Var 'aux1364' direct represents '0' with '5480'
c Var 'aux1364' order represents '1' with '5481'
-5480 5481 0
c Var 'aux1364' direct represents '1' with '5482'
5480 -5481 5482 0
-5482 5481 0
-5482 -5480 0
c Var 'aux1364' order represents '2' with '5483'
-5481 5483 0
c Var 'aux1364' direct represents '2' with '5484'
5481 -5483 5484 0
-5484 5483 0
-5484 -5481 0
c Var 'aux1364' order represents '3' with '5485'
-5483 5485 0
c Var 'aux1364' direct represents '3' with '5486'
5483 -5485 5486 0
-5486 5485 0
-5486 -5483 0
c Var 'aux1364' direct represents '4' with '-5485'
5480 5482 5484 5486 -5485 0
c Encoding variable: aux1365 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5487'
c Var 'aux1365' direct represents '0' with '5487'
c Var 'aux1365' order represents '1' with '5488'
-5487 5488 0
c Var 'aux1365' direct represents '1' with '5489'
5487 -5488 5489 0
-5489 5488 0
-5489 -5487 0
c Var 'aux1365' direct represents '2' with '-5488'
5487 5489 -5488 0
c Encoding variable: aux1366 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5490'
c Var 'aux1366' direct represents '0' with '5490'
c Var 'aux1366' order represents '1' with '5491'
-5490 5491 0
c Var 'aux1366' direct represents '1' with '5492'
5490 -5491 5492 0
-5492 5491 0
-5492 -5490 0
c Var 'aux1366' direct represents '2' with '-5491'
5490 5492 -5491 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5493'
c Var 'aux1367' direct represents '0' with '5493'
c Var 'aux1367' order represents '1' with '5494'
-5493 5494 0
c Var 'aux1367' direct represents '1' with '5495'
5493 -5494 5495 0
-5495 5494 0
-5495 -5493 0
c Var 'aux1367' direct represents '2' with '-5494'
5493 5495 -5494 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5496'
c Var 'aux1368' direct represents '0' with '5496'
c Var 'aux1368' order represents '1' with '5497'
-5496 5497 0
c Var 'aux1368' direct represents '1' with '5498'
5496 -5497 5498 0
-5498 5497 0
-5498 -5496 0
c Var 'aux1368' direct represents '2' with '-5497'
5496 5498 -5497 0
c Encoding variable: aux1369 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1368))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5499'
c Var 'aux1369' direct represents '0' with '5499'
c Var 'aux1369' order represents '1' with '5500'
-5499 5500 0
c Var 'aux1369' direct represents '1' with '5501'
5499 -5500 5501 0
-5501 5500 0
-5501 -5499 0
c Var 'aux1369' order represents '2' with '5502'
-5500 5502 0
c Var 'aux1369' direct represents '2' with '5503'
5500 -5502 5503 0
-5503 5502 0
-5503 -5500 0
c Var 'aux1369' direct represents '3' with '-5502'
5499 5501 5503 -5502 0
c Encoding variable: aux1370 with domain: int(0..4) (representing constraint (aux1365 + aux1367))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5504'
c Var 'aux1370' direct represents '0' with '5504'
c Var 'aux1370' order represents '1' with '5505'
-5504 5505 0
c Var 'aux1370' direct represents '1' with '5506'
5504 -5505 5506 0
-5506 5505 0
-5506 -5504 0
c Var 'aux1370' order represents '2' with '5507'
-5505 5507 0
c Var 'aux1370' direct represents '2' with '5508'
5505 -5507 5508 0
-5508 5507 0
-5508 -5505 0
c Var 'aux1370' order represents '3' with '5509'
-5507 5509 0
c Var 'aux1370' direct represents '3' with '5510'
5507 -5509 5510 0
-5510 5509 0
-5510 -5507 0
c Var 'aux1370' direct represents '4' with '-5509'
5504 5506 5508 5510 -5509 0
c Encoding variable: aux1371 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5511'
c Var 'aux1371' direct represents '0' with '5511'
c Var 'aux1371' order represents '1' with '5512'
-5511 5512 0
c Var 'aux1371' direct represents '1' with '5513'
5511 -5512 5513 0
-5513 5512 0
-5513 -5511 0
c Var 'aux1371' direct represents '2' with '-5512'
5511 5513 -5512 0
c Encoding variable: aux1372 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5514'
c Var 'aux1372' direct represents '0' with '5514'
c Var 'aux1372' order represents '1' with '5515'
-5514 5515 0
c Var 'aux1372' direct represents '1' with '5516'
5514 -5515 5516 0
-5516 5515 0
-5516 -5514 0
c Var 'aux1372' direct represents '2' with '-5515'
5514 5516 -5515 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5517'
c Var 'aux1373' direct represents '0' with '5517'
c Var 'aux1373' order represents '1' with '5518'
-5517 5518 0
c Var 'aux1373' direct represents '1' with '5519'
5517 -5518 5519 0
-5519 5518 0
-5519 -5517 0
c Var 'aux1373' direct represents '2' with '-5518'
5517 5519 -5518 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5520'
c Var 'aux1374' direct represents '0' with '5520'
c Var 'aux1374' order represents '1' with '5521'
-5520 5521 0
c Var 'aux1374' direct represents '1' with '5522'
5520 -5521 5522 0
-5522 5521 0
-5522 -5520 0
c Var 'aux1374' direct represents '2' with '-5521'
5520 5522 -5521 0
c Encoding variable: aux1375 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1374))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5523'
c Var 'aux1375' direct represents '0' with '5523'
c Var 'aux1375' order represents '1' with '5524'
-5523 5524 0
c Var 'aux1375' direct represents '1' with '5525'
5523 -5524 5525 0
-5525 5524 0
-5525 -5523 0
c Var 'aux1375' order represents '2' with '5526'
-5524 5526 0
c Var 'aux1375' direct represents '2' with '5527'
5524 -5526 5527 0
-5527 5526 0
-5527 -5524 0
c Var 'aux1375' direct represents '3' with '-5526'
5523 5525 5527 -5526 0
c Encoding variable: aux1376 with domain: int(0..4) (representing constraint (aux1371 + aux1373))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5528'
c Var 'aux1376' direct represents '0' with '5528'
c Var 'aux1376' order represents '1' with '5529'
-5528 5529 0
c Var 'aux1376' direct represents '1' with '5530'
5528 -5529 5530 0
-5530 5529 0
-5530 -5528 0
c Var 'aux1376' order represents '2' with '5531'
-5529 5531 0
c Var 'aux1376' direct represents '2' with '5532'
5529 -5531 5532 0
-5532 5531 0
-5532 -5529 0
c Var 'aux1376' order represents '3' with '5533'
-5531 5533 0
c Var 'aux1376' direct represents '3' with '5534'
5531 -5533 5534 0
-5534 5533 0
-5534 -5531 0
c Var 'aux1376' direct represents '4' with '-5533'
5528 5530 5532 5534 -5533 0
c Encoding variable: aux1377 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5535'
c Var 'aux1377' direct represents '0' with '5535'
c Var 'aux1377' order represents '1' with '5536'
-5535 5536 0
c Var 'aux1377' direct represents '1' with '5537'
5535 -5536 5537 0
-5537 5536 0
-5537 -5535 0
c Var 'aux1377' direct represents '2' with '-5536'
5535 5537 -5536 0
c Encoding variable: aux1378 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5538'
c Var 'aux1378' direct represents '0' with '5538'
c Var 'aux1378' order represents '1' with '5539'
-5538 5539 0
c Var 'aux1378' direct represents '1' with '5540'
5538 -5539 5540 0
-5540 5539 0
-5540 -5538 0
c Var 'aux1378' direct represents '2' with '-5539'
5538 5540 -5539 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5541'
c Var 'aux1379' direct represents '0' with '5541'
c Var 'aux1379' order represents '1' with '5542'
-5541 5542 0
c Var 'aux1379' direct represents '1' with '5543'
5541 -5542 5543 0
-5543 5542 0
-5543 -5541 0
c Var 'aux1379' direct represents '2' with '-5542'
5541 5543 -5542 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5544'
c Var 'aux1380' direct represents '0' with '5544'
c Var 'aux1380' order represents '1' with '5545'
-5544 5545 0
c Var 'aux1380' direct represents '1' with '5546'
5544 -5545 5546 0
-5546 5545 0
-5546 -5544 0
c Var 'aux1380' direct represents '2' with '-5545'
5544 5546 -5545 0
c Encoding variable: aux1381 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1380))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5547'
c Var 'aux1381' direct represents '0' with '5547'
c Var 'aux1381' order represents '1' with '5548'
-5547 5548 0
c Var 'aux1381' direct represents '1' with '5549'
5547 -5548 5549 0
-5549 5548 0
-5549 -5547 0
c Var 'aux1381' order represents '2' with '5550'
-5548 5550 0
c Var 'aux1381' direct represents '2' with '5551'
5548 -5550 5551 0
-5551 5550 0
-5551 -5548 0
c Var 'aux1381' direct represents '3' with '-5550'
5547 5549 5551 -5550 0
c Encoding variable: aux1382 with domain: int(0..4) (representing constraint (aux1377 + aux1379))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5552'
c Var 'aux1382' direct represents '0' with '5552'
c Var 'aux1382' order represents '1' with '5553'
-5552 5553 0
c Var 'aux1382' direct represents '1' with '5554'
5552 -5553 5554 0
-5554 5553 0
-5554 -5552 0
c Var 'aux1382' order represents '2' with '5555'
-5553 5555 0
c Var 'aux1382' direct represents '2' with '5556'
5553 -5555 5556 0
-5556 5555 0
-5556 -5553 0
c Var 'aux1382' order represents '3' with '5557'
-5555 5557 0
c Var 'aux1382' direct represents '3' with '5558'
5555 -5557 5558 0
-5558 5557 0
-5558 -5555 0
c Var 'aux1382' direct represents '4' with '-5557'
5552 5554 5556 5558 -5557 0
c Encoding variable: aux1383 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5559'
c Var 'aux1383' direct represents '0' with '5559'
c Var 'aux1383' order represents '1' with '5560'
-5559 5560 0
c Var 'aux1383' direct represents '1' with '5561'
5559 -5560 5561 0
-5561 5560 0
-5561 -5559 0
c Var 'aux1383' direct represents '2' with '-5560'
5559 5561 -5560 0
c Encoding variable: aux1384 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5562'
c Var 'aux1384' direct represents '0' with '5562'
c Var 'aux1384' order represents '1' with '5563'
-5562 5563 0
c Var 'aux1384' direct represents '1' with '5564'
5562 -5563 5564 0
-5564 5563 0
-5564 -5562 0
c Var 'aux1384' direct represents '2' with '-5563'
5562 5564 -5563 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5565'
c Var 'aux1385' direct represents '0' with '5565'
c Var 'aux1385' order represents '1' with '5566'
-5565 5566 0
c Var 'aux1385' direct represents '1' with '5567'
5565 -5566 5567 0
-5567 5566 0
-5567 -5565 0
c Var 'aux1385' direct represents '2' with '-5566'
5565 5567 -5566 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5568'
c Var 'aux1386' direct represents '0' with '5568'
c Var 'aux1386' order represents '1' with '5569'
-5568 5569 0
c Var 'aux1386' direct represents '1' with '5570'
5568 -5569 5570 0
-5570 5569 0
-5570 -5568 0
c Var 'aux1386' direct represents '2' with '-5569'
5568 5570 -5569 0
c Encoding variable: aux1387 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1386))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5571'
c Var 'aux1387' direct represents '0' with '5571'
c Var 'aux1387' order represents '1' with '5572'
-5571 5572 0
c Var 'aux1387' direct represents '1' with '5573'
5571 -5572 5573 0
-5573 5572 0
-5573 -5571 0
c Var 'aux1387' order represents '2' with '5574'
-5572 5574 0
c Var 'aux1387' direct represents '2' with '5575'
5572 -5574 5575 0
-5575 5574 0
-5575 -5572 0
c Var 'aux1387' direct represents '3' with '-5574'
5571 5573 5575 -5574 0
c Encoding variable: aux1388 with domain: int(0..4) (representing constraint (aux1383 + aux1385))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5576'
c Var 'aux1388' direct represents '0' with '5576'
c Var 'aux1388' order represents '1' with '5577'
-5576 5577 0
c Var 'aux1388' direct represents '1' with '5578'
5576 -5577 5578 0
-5578 5577 0
-5578 -5576 0
c Var 'aux1388' order represents '2' with '5579'
-5577 5579 0
c Var 'aux1388' direct represents '2' with '5580'
5577 -5579 5580 0
-5580 5579 0
-5580 -5577 0
c Var 'aux1388' order represents '3' with '5581'
-5579 5581 0
c Var 'aux1388' direct represents '3' with '5582'
5579 -5581 5582 0
-5582 5581 0
-5582 -5579 0
c Var 'aux1388' direct represents '4' with '-5581'
5576 5578 5580 5582 -5581 0
c Encoding variable: aux1389 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5583'
c Var 'aux1389' direct represents '0' with '5583'
c Var 'aux1389' order represents '1' with '5584'
-5583 5584 0
c Var 'aux1389' direct represents '1' with '5585'
5583 -5584 5585 0
-5585 5584 0
-5585 -5583 0
c Var 'aux1389' direct represents '2' with '-5584'
5583 5585 -5584 0
c Encoding variable: aux1390 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5586'
c Var 'aux1390' direct represents '0' with '5586'
c Var 'aux1390' order represents '1' with '5587'
-5586 5587 0
c Var 'aux1390' direct represents '1' with '5588'
5586 -5587 5588 0
-5588 5587 0
-5588 -5586 0
c Var 'aux1390' direct represents '2' with '-5587'
5586 5588 -5587 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5589'
c Var 'aux1391' direct represents '0' with '5589'
c Var 'aux1391' order represents '1' with '5590'
-5589 5590 0
c Var 'aux1391' direct represents '1' with '5591'
5589 -5590 5591 0
-5591 5590 0
-5591 -5589 0
c Var 'aux1391' direct represents '2' with '-5590'
5589 5591 -5590 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5592'
c Var 'aux1392' direct represents '0' with '5592'
c Var 'aux1392' order represents '1' with '5593'
-5592 5593 0
c Var 'aux1392' direct represents '1' with '5594'
5592 -5593 5594 0
-5594 5593 0
-5594 -5592 0
c Var 'aux1392' direct represents '2' with '-5593'
5592 5594 -5593 0
c Encoding variable: aux1393 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1392))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5595'
c Var 'aux1393' direct represents '0' with '5595'
c Var 'aux1393' order represents '1' with '5596'
-5595 5596 0
c Var 'aux1393' direct represents '1' with '5597'
5595 -5596 5597 0
-5597 5596 0
-5597 -5595 0
c Var 'aux1393' order represents '2' with '5598'
-5596 5598 0
c Var 'aux1393' direct represents '2' with '5599'
5596 -5598 5599 0
-5599 5598 0
-5599 -5596 0
c Var 'aux1393' direct represents '3' with '-5598'
5595 5597 5599 -5598 0
c Encoding variable: aux1394 with domain: int(0..4) (representing constraint (aux1389 + aux1391))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5600'
c Var 'aux1394' direct represents '0' with '5600'
c Var 'aux1394' order represents '1' with '5601'
-5600 5601 0
c Var 'aux1394' direct represents '1' with '5602'
5600 -5601 5602 0
-5602 5601 0
-5602 -5600 0
c Var 'aux1394' order represents '2' with '5603'
-5601 5603 0
c Var 'aux1394' direct represents '2' with '5604'
5601 -5603 5604 0
-5604 5603 0
-5604 -5601 0
c Var 'aux1394' order represents '3' with '5605'
-5603 5605 0
c Var 'aux1394' direct represents '3' with '5606'
5603 -5605 5606 0
-5606 5605 0
-5606 -5603 0
c Var 'aux1394' direct represents '4' with '-5605'
5600 5602 5604 5606 -5605 0
c Encoding variable: aux1395 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5607'
c Var 'aux1395' direct represents '0' with '5607'
c Var 'aux1395' order represents '1' with '5608'
-5607 5608 0
c Var 'aux1395' direct represents '1' with '5609'
5607 -5608 5609 0
-5609 5608 0
-5609 -5607 0
c Var 'aux1395' direct represents '2' with '-5608'
5607 5609 -5608 0
c Encoding variable: aux1396 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5610'
c Var 'aux1396' direct represents '0' with '5610'
c Var 'aux1396' order represents '1' with '5611'
-5610 5611 0
c Var 'aux1396' direct represents '1' with '5612'
5610 -5611 5612 0
-5612 5611 0
-5612 -5610 0
c Var 'aux1396' direct represents '2' with '-5611'
5610 5612 -5611 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5613'
c Var 'aux1397' direct represents '0' with '5613'
c Var 'aux1397' order represents '1' with '5614'
-5613 5614 0
c Var 'aux1397' direct represents '1' with '5615'
5613 -5614 5615 0
-5615 5614 0
-5615 -5613 0
c Var 'aux1397' direct represents '2' with '-5614'
5613 5615 -5614 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5616'
c Var 'aux1398' direct represents '0' with '5616'
c Var 'aux1398' order represents '1' with '5617'
-5616 5617 0
c Var 'aux1398' direct represents '1' with '5618'
5616 -5617 5618 0
-5618 5617 0
-5618 -5616 0
c Var 'aux1398' direct represents '2' with '-5617'
5616 5618 -5617 0
c Encoding variable: aux1399 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1398))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5619'
c Var 'aux1399' direct represents '0' with '5619'
c Var 'aux1399' order represents '1' with '5620'
-5619 5620 0
c Var 'aux1399' direct represents '1' with '5621'
5619 -5620 5621 0
-5621 5620 0
-5621 -5619 0
c Var 'aux1399' order represents '2' with '5622'
-5620 5622 0
c Var 'aux1399' direct represents '2' with '5623'
5620 -5622 5623 0
-5623 5622 0
-5623 -5620 0
c Var 'aux1399' direct represents '3' with '-5622'
5619 5621 5623 -5622 0
c Encoding variable: aux1400 with domain: int(0..4) (representing constraint (aux1395 + aux1397))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5624'
c Var 'aux1400' direct represents '0' with '5624'
c Var 'aux1400' order represents '1' with '5625'
-5624 5625 0
c Var 'aux1400' direct represents '1' with '5626'
5624 -5625 5626 0
-5626 5625 0
-5626 -5624 0
c Var 'aux1400' order represents '2' with '5627'
-5625 5627 0
c Var 'aux1400' direct represents '2' with '5628'
5625 -5627 5628 0
-5628 5627 0
-5628 -5625 0
c Var 'aux1400' order represents '3' with '5629'
-5627 5629 0
c Var 'aux1400' direct represents '3' with '5630'
5627 -5629 5630 0
-5630 5629 0
-5630 -5627 0
c Var 'aux1400' direct represents '4' with '-5629'
5624 5626 5628 5630 -5629 0
c Encoding variable: aux1401 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5631'
c Var 'aux1401' direct represents '0' with '5631'
c Var 'aux1401' order represents '1' with '5632'
-5631 5632 0
c Var 'aux1401' direct represents '1' with '5633'
5631 -5632 5633 0
-5633 5632 0
-5633 -5631 0
c Var 'aux1401' direct represents '2' with '-5632'
5631 5633 -5632 0
c Encoding variable: aux1402 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5634'
c Var 'aux1402' direct represents '0' with '5634'
c Var 'aux1402' order represents '1' with '5635'
-5634 5635 0
c Var 'aux1402' direct represents '1' with '5636'
5634 -5635 5636 0
-5636 5635 0
-5636 -5634 0
c Var 'aux1402' direct represents '2' with '-5635'
5634 5636 -5635 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5637'
c Var 'aux1403' direct represents '0' with '5637'
c Var 'aux1403' order represents '1' with '5638'
-5637 5638 0
c Var 'aux1403' direct represents '1' with '5639'
5637 -5638 5639 0
-5639 5638 0
-5639 -5637 0
c Var 'aux1403' direct represents '2' with '-5638'
5637 5639 -5638 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5640'
c Var 'aux1404' direct represents '0' with '5640'
c Var 'aux1404' order represents '1' with '5641'
-5640 5641 0
c Var 'aux1404' direct represents '1' with '5642'
5640 -5641 5642 0
-5642 5641 0
-5642 -5640 0
c Var 'aux1404' direct represents '2' with '-5641'
5640 5642 -5641 0
c Encoding variable: aux1405 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1404))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5643'
c Var 'aux1405' direct represents '0' with '5643'
c Var 'aux1405' order represents '1' with '5644'
-5643 5644 0
c Var 'aux1405' direct represents '1' with '5645'
5643 -5644 5645 0
-5645 5644 0
-5645 -5643 0
c Var 'aux1405' order represents '2' with '5646'
-5644 5646 0
c Var 'aux1405' direct represents '2' with '5647'
5644 -5646 5647 0
-5647 5646 0
-5647 -5644 0
c Var 'aux1405' direct represents '3' with '-5646'
5643 5645 5647 -5646 0
c Encoding variable: aux1406 with domain: int(0..4) (representing constraint (aux1401 + aux1403))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5648'
c Var 'aux1406' direct represents '0' with '5648'
c Var 'aux1406' order represents '1' with '5649'
-5648 5649 0
c Var 'aux1406' direct represents '1' with '5650'
5648 -5649 5650 0
-5650 5649 0
-5650 -5648 0
c Var 'aux1406' order represents '2' with '5651'
-5649 5651 0
c Var 'aux1406' direct represents '2' with '5652'
5649 -5651 5652 0
-5652 5651 0
-5652 -5649 0
c Var 'aux1406' order represents '3' with '5653'
-5651 5653 0
c Var 'aux1406' direct represents '3' with '5654'
5651 -5653 5654 0
-5654 5653 0
-5654 -5651 0
c Var 'aux1406' direct represents '4' with '-5653'
5648 5650 5652 5654 -5653 0
c Encoding variable: aux1407 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5655'
c Var 'aux1407' direct represents '0' with '5655'
c Var 'aux1407' order represents '1' with '5656'
-5655 5656 0
c Var 'aux1407' direct represents '1' with '5657'
5655 -5656 5657 0
-5657 5656 0
-5657 -5655 0
c Var 'aux1407' direct represents '2' with '-5656'
5655 5657 -5656 0
c Encoding variable: aux1408 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5658'
c Var 'aux1408' direct represents '0' with '5658'
c Var 'aux1408' order represents '1' with '5659'
-5658 5659 0
c Var 'aux1408' direct represents '1' with '5660'
5658 -5659 5660 0
-5660 5659 0
-5660 -5658 0
c Var 'aux1408' direct represents '2' with '-5659'
5658 5660 -5659 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5661'
c Var 'aux1409' direct represents '0' with '5661'
c Var 'aux1409' order represents '1' with '5662'
-5661 5662 0
c Var 'aux1409' direct represents '1' with '5663'
5661 -5662 5663 0
-5663 5662 0
-5663 -5661 0
c Var 'aux1409' direct represents '2' with '-5662'
5661 5663 -5662 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5664'
c Var 'aux1410' direct represents '0' with '5664'
c Var 'aux1410' order represents '1' with '5665'
-5664 5665 0
c Var 'aux1410' direct represents '1' with '5666'
5664 -5665 5666 0
-5666 5665 0
-5666 -5664 0
c Var 'aux1410' direct represents '2' with '-5665'
5664 5666 -5665 0
c Encoding variable: aux1411 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1410))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5667'
c Var 'aux1411' direct represents '0' with '5667'
c Var 'aux1411' order represents '1' with '5668'
-5667 5668 0
c Var 'aux1411' direct represents '1' with '5669'
5667 -5668 5669 0
-5669 5668 0
-5669 -5667 0
c Var 'aux1411' order represents '2' with '5670'
-5668 5670 0
c Var 'aux1411' direct represents '2' with '5671'
5668 -5670 5671 0
-5671 5670 0
-5671 -5668 0
c Var 'aux1411' direct represents '3' with '-5670'
5667 5669 5671 -5670 0
c Encoding variable: aux1412 with domain: int(0..4) (representing constraint (aux1407 + aux1409))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5672'
c Var 'aux1412' direct represents '0' with '5672'
c Var 'aux1412' order represents '1' with '5673'
-5672 5673 0
c Var 'aux1412' direct represents '1' with '5674'
5672 -5673 5674 0
-5674 5673 0
-5674 -5672 0
c Var 'aux1412' order represents '2' with '5675'
-5673 5675 0
c Var 'aux1412' direct represents '2' with '5676'
5673 -5675 5676 0
-5676 5675 0
-5676 -5673 0
c Var 'aux1412' order represents '3' with '5677'
-5675 5677 0
c Var 'aux1412' direct represents '3' with '5678'
5675 -5677 5678 0
-5678 5677 0
-5678 -5675 0
c Var 'aux1412' direct represents '4' with '-5677'
5672 5674 5676 5678 -5677 0
c Encoding variable: aux1413 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5679'
c Var 'aux1413' direct represents '0' with '5679'
c Var 'aux1413' order represents '1' with '5680'
-5679 5680 0
c Var 'aux1413' direct represents '1' with '5681'
5679 -5680 5681 0
-5681 5680 0
-5681 -5679 0
c Var 'aux1413' direct represents '2' with '-5680'
5679 5681 -5680 0
c Encoding variable: aux1414 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5682'
c Var 'aux1414' direct represents '0' with '5682'
c Var 'aux1414' order represents '1' with '5683'
-5682 5683 0
c Var 'aux1414' direct represents '1' with '5684'
5682 -5683 5684 0
-5684 5683 0
-5684 -5682 0
c Var 'aux1414' direct represents '2' with '-5683'
5682 5684 -5683 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5685'
c Var 'aux1415' direct represents '0' with '5685'
c Var 'aux1415' order represents '1' with '5686'
-5685 5686 0
c Var 'aux1415' direct represents '1' with '5687'
5685 -5686 5687 0
-5687 5686 0
-5687 -5685 0
c Var 'aux1415' direct represents '2' with '-5686'
5685 5687 -5686 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5688'
c Var 'aux1416' direct represents '0' with '5688'
c Var 'aux1416' order represents '1' with '5689'
-5688 5689 0
c Var 'aux1416' direct represents '1' with '5690'
5688 -5689 5690 0
-5690 5689 0
-5690 -5688 0
c Var 'aux1416' direct represents '2' with '-5689'
5688 5690 -5689 0
c Encoding variable: aux1417 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1416))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5691'
c Var 'aux1417' direct represents '0' with '5691'
c Var 'aux1417' order represents '1' with '5692'
-5691 5692 0
c Var 'aux1417' direct represents '1' with '5693'
5691 -5692 5693 0
-5693 5692 0
-5693 -5691 0
c Var 'aux1417' order represents '2' with '5694'
-5692 5694 0
c Var 'aux1417' direct represents '2' with '5695'
5692 -5694 5695 0
-5695 5694 0
-5695 -5692 0
c Var 'aux1417' direct represents '3' with '-5694'
5691 5693 5695 -5694 0
c Encoding variable: aux1418 with domain: int(0..4) (representing constraint (aux1413 + aux1415))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5696'
c Var 'aux1418' direct represents '0' with '5696'
c Var 'aux1418' order represents '1' with '5697'
-5696 5697 0
c Var 'aux1418' direct represents '1' with '5698'
5696 -5697 5698 0
-5698 5697 0
-5698 -5696 0
c Var 'aux1418' order represents '2' with '5699'
-5697 5699 0
c Var 'aux1418' direct represents '2' with '5700'
5697 -5699 5700 0
-5700 5699 0
-5700 -5697 0
c Var 'aux1418' order represents '3' with '5701'
-5699 5701 0
c Var 'aux1418' direct represents '3' with '5702'
5699 -5701 5702 0
-5702 5701 0
-5702 -5699 0
c Var 'aux1418' direct represents '4' with '-5701'
5696 5698 5700 5702 -5701 0
c Encoding variable: aux1419 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5703'
c Var 'aux1419' direct represents '0' with '5703'
c Var 'aux1419' order represents '1' with '5704'
-5703 5704 0
c Var 'aux1419' direct represents '1' with '5705'
5703 -5704 5705 0
-5705 5704 0
-5705 -5703 0
c Var 'aux1419' direct represents '2' with '-5704'
5703 5705 -5704 0
c Encoding variable: aux1420 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5706'
c Var 'aux1420' direct represents '0' with '5706'
c Var 'aux1420' order represents '1' with '5707'
-5706 5707 0
c Var 'aux1420' direct represents '1' with '5708'
5706 -5707 5708 0
-5708 5707 0
-5708 -5706 0
c Var 'aux1420' direct represents '2' with '-5707'
5706 5708 -5707 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5709'
c Var 'aux1421' direct represents '0' with '5709'
c Var 'aux1421' order represents '1' with '5710'
-5709 5710 0
c Var 'aux1421' direct represents '1' with '5711'
5709 -5710 5711 0
-5711 5710 0
-5711 -5709 0
c Var 'aux1421' direct represents '2' with '-5710'
5709 5711 -5710 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5712'
c Var 'aux1422' direct represents '0' with '5712'
c Var 'aux1422' order represents '1' with '5713'
-5712 5713 0
c Var 'aux1422' direct represents '1' with '5714'
5712 -5713 5714 0
-5714 5713 0
-5714 -5712 0
c Var 'aux1422' direct represents '2' with '-5713'
5712 5714 -5713 0
c Encoding variable: aux1423 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1422))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5715'
c Var 'aux1423' direct represents '0' with '5715'
c Var 'aux1423' order represents '1' with '5716'
-5715 5716 0
c Var 'aux1423' direct represents '1' with '5717'
5715 -5716 5717 0
-5717 5716 0
-5717 -5715 0
c Var 'aux1423' order represents '2' with '5718'
-5716 5718 0
c Var 'aux1423' direct represents '2' with '5719'
5716 -5718 5719 0
-5719 5718 0
-5719 -5716 0
c Var 'aux1423' direct represents '3' with '-5718'
5715 5717 5719 -5718 0
c Encoding variable: aux1424 with domain: int(0..4) (representing constraint (aux1419 + aux1421))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5720'
c Var 'aux1424' direct represents '0' with '5720'
c Var 'aux1424' order represents '1' with '5721'
-5720 5721 0
c Var 'aux1424' direct represents '1' with '5722'
5720 -5721 5722 0
-5722 5721 0
-5722 -5720 0
c Var 'aux1424' order represents '2' with '5723'
-5721 5723 0
c Var 'aux1424' direct represents '2' with '5724'
5721 -5723 5724 0
-5724 5723 0
-5724 -5721 0
c Var 'aux1424' order represents '3' with '5725'
-5723 5725 0
c Var 'aux1424' direct represents '3' with '5726'
5723 -5725 5726 0
-5726 5725 0
-5726 -5723 0
c Var 'aux1424' direct represents '4' with '-5725'
5720 5722 5724 5726 -5725 0
c Encoding variable: aux1425 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5727'
c Var 'aux1425' direct represents '0' with '5727'
c Var 'aux1425' order represents '1' with '5728'
-5727 5728 0
c Var 'aux1425' direct represents '1' with '5729'
5727 -5728 5729 0
-5729 5728 0
-5729 -5727 0
c Var 'aux1425' direct represents '2' with '-5728'
5727 5729 -5728 0
c Encoding variable: aux1426 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5730'
c Var 'aux1426' direct represents '0' with '5730'
c Var 'aux1426' order represents '1' with '5731'
-5730 5731 0
c Var 'aux1426' direct represents '1' with '5732'
5730 -5731 5732 0
-5732 5731 0
-5732 -5730 0
c Var 'aux1426' direct represents '2' with '-5731'
5730 5732 -5731 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5733'
c Var 'aux1427' direct represents '0' with '5733'
c Var 'aux1427' order represents '1' with '5734'
-5733 5734 0
c Var 'aux1427' direct represents '1' with '5735'
5733 -5734 5735 0
-5735 5734 0
-5735 -5733 0
c Var 'aux1427' direct represents '2' with '-5734'
5733 5735 -5734 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5736'
c Var 'aux1428' direct represents '0' with '5736'
c Var 'aux1428' order represents '1' with '5737'
-5736 5737 0
c Var 'aux1428' direct represents '1' with '5738'
5736 -5737 5738 0
-5738 5737 0
-5738 -5736 0
c Var 'aux1428' direct represents '2' with '-5737'
5736 5738 -5737 0
c Encoding variable: aux1429 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1428))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5739'
c Var 'aux1429' direct represents '0' with '5739'
c Var 'aux1429' order represents '1' with '5740'
-5739 5740 0
c Var 'aux1429' direct represents '1' with '5741'
5739 -5740 5741 0
-5741 5740 0
-5741 -5739 0
c Var 'aux1429' order represents '2' with '5742'
-5740 5742 0
c Var 'aux1429' direct represents '2' with '5743'
5740 -5742 5743 0
-5743 5742 0
-5743 -5740 0
c Var 'aux1429' direct represents '3' with '-5742'
5739 5741 5743 -5742 0
c Encoding variable: aux1430 with domain: int(0..4) (representing constraint (aux1425 + aux1427))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5744'
c Var 'aux1430' direct represents '0' with '5744'
c Var 'aux1430' order represents '1' with '5745'
-5744 5745 0
c Var 'aux1430' direct represents '1' with '5746'
5744 -5745 5746 0
-5746 5745 0
-5746 -5744 0
c Var 'aux1430' order represents '2' with '5747'
-5745 5747 0
c Var 'aux1430' direct represents '2' with '5748'
5745 -5747 5748 0
-5748 5747 0
-5748 -5745 0
c Var 'aux1430' order represents '3' with '5749'
-5747 5749 0
c Var 'aux1430' direct represents '3' with '5750'
5747 -5749 5750 0
-5750 5749 0
-5750 -5747 0
c Var 'aux1430' direct represents '4' with '-5749'
5744 5746 5748 5750 -5749 0
c Encoding variable: aux1431 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5751'
c Var 'aux1431' direct represents '0' with '5751'
c Var 'aux1431' order represents '1' with '5752'
-5751 5752 0
c Var 'aux1431' direct represents '1' with '5753'
5751 -5752 5753 0
-5753 5752 0
-5753 -5751 0
c Var 'aux1431' direct represents '2' with '-5752'
5751 5753 -5752 0
c Encoding variable: aux1432 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '5754'
c Var 'aux1432' direct represents '0' with '5754'
c Var 'aux1432' order represents '1' with '5755'
-5754 5755 0
c Var 'aux1432' direct represents '1' with '5756'
5754 -5755 5756 0
-5756 5755 0
-5756 -5754 0
c Var 'aux1432' direct represents '2' with '-5755'
5754 5756 -5755 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '5757'
c Var 'aux1433' direct represents '0' with '5757'
c Var 'aux1433' order represents '1' with '5758'
-5757 5758 0
c Var 'aux1433' direct represents '1' with '5759'
5757 -5758 5759 0
-5759 5758 0
-5759 -5757 0
c Var 'aux1433' direct represents '2' with '-5758'
5757 5759 -5758 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '5760'
c Var 'aux1434' direct represents '0' with '5760'
c Var 'aux1434' order represents '1' with '5761'
-5760 5761 0
c Var 'aux1434' direct represents '1' with '5762'
5760 -5761 5762 0
-5762 5761 0
-5762 -5760 0
c Var 'aux1434' direct represents '2' with '-5761'
5760 5762 -5761 0
c Encoding variable: aux1435 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1434))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '5763'
c Var 'aux1435' direct represents '0' with '5763'
c Var 'aux1435' order represents '1' with '5764'
-5763 5764 0
c Var 'aux1435' direct represents '1' with '5765'
5763 -5764 5765 0
-5765 5764 0
-5765 -5763 0
c Var 'aux1435' order represents '2' with '5766'
-5764 5766 0
c Var 'aux1435' direct represents '2' with '5767'
5764 -5766 5767 0
-5767 5766 0
-5767 -5764 0
c Var 'aux1435' direct represents '3' with '-5766'
5763 5765 5767 -5766 0
c Encoding variable: aux1436 with domain: int(0..4) (representing constraint (aux1431 + aux1433))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '5768'
c Var 'aux1436' direct represents '0' with '5768'
c Var 'aux1436' order represents '1' with '5769'
-5768 5769 0
c Var 'aux1436' direct represents '1' with '5770'
5768 -5769 5770 0
-5770 5769 0
-5770 -5768 0
c Var 'aux1436' order represents '2' with '5771'
-5769 5771 0
c Var 'aux1436' direct represents '2' with '5772'
5769 -5771 5772 0
-5772 5771 0
-5772 -5769 0
c Var 'aux1436' order represents '3' with '5773'
-5771 5773 0
c Var 'aux1436' direct represents '3' with '5774'
5771 -5773 5774 0
-5774 5773 0
-5774 -5771 0
c Var 'aux1436' direct represents '4' with '-5773'
5768 5770 5772 5774 -5773 0
c Encoding variable: aux1437 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '5775'
c Var 'aux1437' direct represents '0' with '5775'
c Var 'aux1437' order represents '1' with '5776'
-5775 5776 0
c Var 'aux1437' direct represents '1' with '5777'
5775 -5776 5777 0
-5777 5776 0
-5777 -5775 0
c Var 'aux1437' direct represents '2' with '-5776'
5775 5777 -5776 0
c Encoding variable: aux1438 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '5778'
c Var 'aux1438' direct represents '0' with '5778'
c Var 'aux1438' order represents '1' with '5779'
-5778 5779 0
c Var 'aux1438' direct represents '1' with '5780'
5778 -5779 5780 0
-5780 5779 0
-5780 -5778 0
c Var 'aux1438' direct represents '2' with '-5779'
5778 5780 -5779 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '5781'
c Var 'aux1439' direct represents '0' with '5781'
c Var 'aux1439' order represents '1' with '5782'
-5781 5782 0
c Var 'aux1439' direct represents '1' with '5783'
5781 -5782 5783 0
-5783 5782 0
-5783 -5781 0
c Var 'aux1439' direct represents '2' with '-5782'
5781 5783 -5782 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '5784'
c Var 'aux1440' direct represents '0' with '5784'
c Var 'aux1440' order represents '1' with '5785'
-5784 5785 0
c Var 'aux1440' direct represents '1' with '5786'
5784 -5785 5786 0
-5786 5785 0
-5786 -5784 0
c Var 'aux1440' direct represents '2' with '-5785'
5784 5786 -5785 0
c Encoding variable: aux1441 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1440))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '5787'
c Var 'aux1441' direct represents '0' with '5787'
c Var 'aux1441' order represents '1' with '5788'
-5787 5788 0
c Var 'aux1441' direct represents '1' with '5789'
5787 -5788 5789 0
-5789 5788 0
-5789 -5787 0
c Var 'aux1441' order represents '2' with '5790'
-5788 5790 0
c Var 'aux1441' direct represents '2' with '5791'
5788 -5790 5791 0
-5791 5790 0
-5791 -5788 0
c Var 'aux1441' direct represents '3' with '-5790'
5787 5789 5791 -5790 0
c Encoding variable: aux1442 with domain: int(0..4) (representing constraint (aux1437 + aux1439))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '5792'
c Var 'aux1442' direct represents '0' with '5792'
c Var 'aux1442' order represents '1' with '5793'
-5792 5793 0
c Var 'aux1442' direct represents '1' with '5794'
5792 -5793 5794 0
-5794 5793 0
-5794 -5792 0
c Var 'aux1442' order represents '2' with '5795'
-5793 5795 0
c Var 'aux1442' direct represents '2' with '5796'
5793 -5795 5796 0
-5796 5795 0
-5796 -5793 0
c Var 'aux1442' order represents '3' with '5797'
-5795 5797 0
c Var 'aux1442' direct represents '3' with '5798'
5795 -5797 5798 0
-5798 5797 0
-5798 -5795 0
c Var 'aux1442' direct represents '4' with '-5797'
5792 5794 5796 5798 -5797 0
c Encoding variable: aux1443 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '5799'
c Var 'aux1443' direct represents '0' with '5799'
c Var 'aux1443' order represents '1' with '5800'
-5799 5800 0
c Var 'aux1443' direct represents '1' with '5801'
5799 -5800 5801 0
-5801 5800 0
-5801 -5799 0
c Var 'aux1443' direct represents '2' with '-5800'
5799 5801 -5800 0
c Encoding variable: aux1444 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '5802'
c Var 'aux1444' direct represents '0' with '5802'
c Var 'aux1444' order represents '1' with '5803'
-5802 5803 0
c Var 'aux1444' direct represents '1' with '5804'
5802 -5803 5804 0
-5804 5803 0
-5804 -5802 0
c Var 'aux1444' direct represents '2' with '-5803'
5802 5804 -5803 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '5805'
c Var 'aux1445' direct represents '0' with '5805'
c Var 'aux1445' order represents '1' with '5806'
-5805 5806 0
c Var 'aux1445' direct represents '1' with '5807'
5805 -5806 5807 0
-5807 5806 0
-5807 -5805 0
c Var 'aux1445' direct represents '2' with '-5806'
5805 5807 -5806 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '5808'
c Var 'aux1446' direct represents '0' with '5808'
c Var 'aux1446' order represents '1' with '5809'
-5808 5809 0
c Var 'aux1446' direct represents '1' with '5810'
5808 -5809 5810 0
-5810 5809 0
-5810 -5808 0
c Var 'aux1446' direct represents '2' with '-5809'
5808 5810 -5809 0
c Encoding variable: aux1447 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1446))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '5811'
c Var 'aux1447' direct represents '0' with '5811'
c Var 'aux1447' order represents '1' with '5812'
-5811 5812 0
c Var 'aux1447' direct represents '1' with '5813'
5811 -5812 5813 0
-5813 5812 0
-5813 -5811 0
c Var 'aux1447' order represents '2' with '5814'
-5812 5814 0
c Var 'aux1447' direct represents '2' with '5815'
5812 -5814 5815 0
-5815 5814 0
-5815 -5812 0
c Var 'aux1447' direct represents '3' with '-5814'
5811 5813 5815 -5814 0
c Encoding variable: aux1448 with domain: int(0..4) (representing constraint (aux1443 + aux1445))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '5816'
c Var 'aux1448' direct represents '0' with '5816'
c Var 'aux1448' order represents '1' with '5817'
-5816 5817 0
c Var 'aux1448' direct represents '1' with '5818'
5816 -5817 5818 0
-5818 5817 0
-5818 -5816 0
c Var 'aux1448' order represents '2' with '5819'
-5817 5819 0
c Var 'aux1448' direct represents '2' with '5820'
5817 -5819 5820 0
-5820 5819 0
-5820 -5817 0
c Var 'aux1448' order represents '3' with '5821'
-5819 5821 0
c Var 'aux1448' direct represents '3' with '5822'
5819 -5821 5822 0
-5822 5821 0
-5822 -5819 0
c Var 'aux1448' direct represents '4' with '-5821'
5816 5818 5820 5822 -5821 0
c Encoding variable: aux1449 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '5823'
c Var 'aux1449' direct represents '0' with '5823'
c Var 'aux1449' order represents '1' with '5824'
-5823 5824 0
c Var 'aux1449' direct represents '1' with '5825'
5823 -5824 5825 0
-5825 5824 0
-5825 -5823 0
c Var 'aux1449' direct represents '2' with '-5824'
5823 5825 -5824 0
c Encoding variable: aux1450 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '5826'
c Var 'aux1450' direct represents '0' with '5826'
c Var 'aux1450' order represents '1' with '5827'
-5826 5827 0
c Var 'aux1450' direct represents '1' with '5828'
5826 -5827 5828 0
-5828 5827 0
-5828 -5826 0
c Var 'aux1450' direct represents '2' with '-5827'
5826 5828 -5827 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '5829'
c Var 'aux1451' direct represents '0' with '5829'
c Var 'aux1451' order represents '1' with '5830'
-5829 5830 0
c Var 'aux1451' direct represents '1' with '5831'
5829 -5830 5831 0
-5831 5830 0
-5831 -5829 0
c Var 'aux1451' direct represents '2' with '-5830'
5829 5831 -5830 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '5832'
c Var 'aux1452' direct represents '0' with '5832'
c Var 'aux1452' order represents '1' with '5833'
-5832 5833 0
c Var 'aux1452' direct represents '1' with '5834'
5832 -5833 5834 0
-5834 5833 0
-5834 -5832 0
c Var 'aux1452' direct represents '2' with '-5833'
5832 5834 -5833 0
c Encoding variable: aux1453 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1452))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '5835'
c Var 'aux1453' direct represents '0' with '5835'
c Var 'aux1453' order represents '1' with '5836'
-5835 5836 0
c Var 'aux1453' direct represents '1' with '5837'
5835 -5836 5837 0
-5837 5836 0
-5837 -5835 0
c Var 'aux1453' order represents '2' with '5838'
-5836 5838 0
c Var 'aux1453' direct represents '2' with '5839'
5836 -5838 5839 0
-5839 5838 0
-5839 -5836 0
c Var 'aux1453' direct represents '3' with '-5838'
5835 5837 5839 -5838 0
c Encoding variable: aux1454 with domain: int(0..4) (representing constraint (aux1449 + aux1451))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '5840'
c Var 'aux1454' direct represents '0' with '5840'
c Var 'aux1454' order represents '1' with '5841'
-5840 5841 0
c Var 'aux1454' direct represents '1' with '5842'
5840 -5841 5842 0
-5842 5841 0
-5842 -5840 0
c Var 'aux1454' order represents '2' with '5843'
-5841 5843 0
c Var 'aux1454' direct represents '2' with '5844'
5841 -5843 5844 0
-5844 5843 0
-5844 -5841 0
c Var 'aux1454' order represents '3' with '5845'
-5843 5845 0
c Var 'aux1454' direct represents '3' with '5846'
5843 -5845 5846 0
-5846 5845 0
-5846 -5843 0
c Var 'aux1454' direct represents '4' with '-5845'
5840 5842 5844 5846 -5845 0
c Encoding variable: aux1455 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '5847'
c Var 'aux1455' direct represents '0' with '5847'
c Var 'aux1455' order represents '1' with '5848'
-5847 5848 0
c Var 'aux1455' direct represents '1' with '5849'
5847 -5848 5849 0
-5849 5848 0
-5849 -5847 0
c Var 'aux1455' direct represents '2' with '-5848'
5847 5849 -5848 0
c Encoding variable: aux1456 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '5850'
c Var 'aux1456' direct represents '0' with '5850'
c Var 'aux1456' order represents '1' with '5851'
-5850 5851 0
c Var 'aux1456' direct represents '1' with '5852'
5850 -5851 5852 0
-5852 5851 0
-5852 -5850 0
c Var 'aux1456' direct represents '2' with '-5851'
5850 5852 -5851 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '5853'
c Var 'aux1457' direct represents '0' with '5853'
c Var 'aux1457' order represents '1' with '5854'
-5853 5854 0
c Var 'aux1457' direct represents '1' with '5855'
5853 -5854 5855 0
-5855 5854 0
-5855 -5853 0
c Var 'aux1457' direct represents '2' with '-5854'
5853 5855 -5854 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '5856'
c Var 'aux1458' direct represents '0' with '5856'
c Var 'aux1458' order represents '1' with '5857'
-5856 5857 0
c Var 'aux1458' direct represents '1' with '5858'
5856 -5857 5858 0
-5858 5857 0
-5858 -5856 0
c Var 'aux1458' direct represents '2' with '-5857'
5856 5858 -5857 0
c Encoding variable: aux1459 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1458))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '5859'
c Var 'aux1459' direct represents '0' with '5859'
c Var 'aux1459' order represents '1' with '5860'
-5859 5860 0
c Var 'aux1459' direct represents '1' with '5861'
5859 -5860 5861 0
-5861 5860 0
-5861 -5859 0
c Var 'aux1459' order represents '2' with '5862'
-5860 5862 0
c Var 'aux1459' direct represents '2' with '5863'
5860 -5862 5863 0
-5863 5862 0
-5863 -5860 0
c Var 'aux1459' direct represents '3' with '-5862'
5859 5861 5863 -5862 0
c Encoding variable: aux1460 with domain: int(0..4) (representing constraint (aux1455 + aux1457))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '5864'
c Var 'aux1460' direct represents '0' with '5864'
c Var 'aux1460' order represents '1' with '5865'
-5864 5865 0
c Var 'aux1460' direct represents '1' with '5866'
5864 -5865 5866 0
-5866 5865 0
-5866 -5864 0
c Var 'aux1460' order represents '2' with '5867'
-5865 5867 0
c Var 'aux1460' direct represents '2' with '5868'
5865 -5867 5868 0
-5868 5867 0
-5868 -5865 0
c Var 'aux1460' order represents '3' with '5869'
-5867 5869 0
c Var 'aux1460' direct represents '3' with '5870'
5867 -5869 5870 0
-5870 5869 0
-5870 -5867 0
c Var 'aux1460' direct represents '4' with '-5869'
5864 5866 5868 5870 -5869 0
c Encoding variable: aux1461 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '5871'
c Var 'aux1461' direct represents '0' with '5871'
c Var 'aux1461' order represents '1' with '5872'
-5871 5872 0
c Var 'aux1461' direct represents '1' with '5873'
5871 -5872 5873 0
-5873 5872 0
-5873 -5871 0
c Var 'aux1461' direct represents '2' with '-5872'
5871 5873 -5872 0
c Encoding variable: aux1462 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '5874'
c Var 'aux1462' direct represents '0' with '5874'
c Var 'aux1462' order represents '1' with '5875'
-5874 5875 0
c Var 'aux1462' direct represents '1' with '5876'
5874 -5875 5876 0
-5876 5875 0
-5876 -5874 0
c Var 'aux1462' direct represents '2' with '-5875'
5874 5876 -5875 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '5877'
c Var 'aux1463' direct represents '0' with '5877'
c Var 'aux1463' order represents '1' with '5878'
-5877 5878 0
c Var 'aux1463' direct represents '1' with '5879'
5877 -5878 5879 0
-5879 5878 0
-5879 -5877 0
c Var 'aux1463' direct represents '2' with '-5878'
5877 5879 -5878 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '5880'
c Var 'aux1464' direct represents '0' with '5880'
c Var 'aux1464' order represents '1' with '5881'
-5880 5881 0
c Var 'aux1464' direct represents '1' with '5882'
5880 -5881 5882 0
-5882 5881 0
-5882 -5880 0
c Var 'aux1464' direct represents '2' with '-5881'
5880 5882 -5881 0
c Encoding variable: aux1465 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1464))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '5883'
c Var 'aux1465' direct represents '0' with '5883'
c Var 'aux1465' order represents '1' with '5884'
-5883 5884 0
c Var 'aux1465' direct represents '1' with '5885'
5883 -5884 5885 0
-5885 5884 0
-5885 -5883 0
c Var 'aux1465' order represents '2' with '5886'
-5884 5886 0
c Var 'aux1465' direct represents '2' with '5887'
5884 -5886 5887 0
-5887 5886 0
-5887 -5884 0
c Var 'aux1465' direct represents '3' with '-5886'
5883 5885 5887 -5886 0
c Encoding variable: aux1466 with domain: int(0..4) (representing constraint (aux1461 + aux1463))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '5888'
c Var 'aux1466' direct represents '0' with '5888'
c Var 'aux1466' order represents '1' with '5889'
-5888 5889 0
c Var 'aux1466' direct represents '1' with '5890'
5888 -5889 5890 0
-5890 5889 0
-5890 -5888 0
c Var 'aux1466' order represents '2' with '5891'
-5889 5891 0
c Var 'aux1466' direct represents '2' with '5892'
5889 -5891 5892 0
-5892 5891 0
-5892 -5889 0
c Var 'aux1466' order represents '3' with '5893'
-5891 5893 0
c Var 'aux1466' direct represents '3' with '5894'
5891 -5893 5894 0
-5894 5893 0
-5894 -5891 0
c Var 'aux1466' direct represents '4' with '-5893'
5888 5890 5892 5894 -5893 0
c Encoding variable: aux1467 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '5895'
c Var 'aux1467' direct represents '0' with '5895'
c Var 'aux1467' order represents '1' with '5896'
-5895 5896 0
c Var 'aux1467' direct represents '1' with '5897'
5895 -5896 5897 0
-5897 5896 0
-5897 -5895 0
c Var 'aux1467' direct represents '2' with '-5896'
5895 5897 -5896 0
c Encoding variable: aux1468 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '5898'
c Var 'aux1468' direct represents '0' with '5898'
c Var 'aux1468' order represents '1' with '5899'
-5898 5899 0
c Var 'aux1468' direct represents '1' with '5900'
5898 -5899 5900 0
-5900 5899 0
-5900 -5898 0
c Var 'aux1468' direct represents '2' with '-5899'
5898 5900 -5899 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '5901'
c Var 'aux1469' direct represents '0' with '5901'
c Var 'aux1469' order represents '1' with '5902'
-5901 5902 0
c Var 'aux1469' direct represents '1' with '5903'
5901 -5902 5903 0
-5903 5902 0
-5903 -5901 0
c Var 'aux1469' direct represents '2' with '-5902'
5901 5903 -5902 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '5904'
c Var 'aux1470' direct represents '0' with '5904'
c Var 'aux1470' order represents '1' with '5905'
-5904 5905 0
c Var 'aux1470' direct represents '1' with '5906'
5904 -5905 5906 0
-5906 5905 0
-5906 -5904 0
c Var 'aux1470' direct represents '2' with '-5905'
5904 5906 -5905 0
c Encoding variable: aux1471 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1470))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '5907'
c Var 'aux1471' direct represents '0' with '5907'
c Var 'aux1471' order represents '1' with '5908'
-5907 5908 0
c Var 'aux1471' direct represents '1' with '5909'
5907 -5908 5909 0
-5909 5908 0
-5909 -5907 0
c Var 'aux1471' order represents '2' with '5910'
-5908 5910 0
c Var 'aux1471' direct represents '2' with '5911'
5908 -5910 5911 0
-5911 5910 0
-5911 -5908 0
c Var 'aux1471' direct represents '3' with '-5910'
5907 5909 5911 -5910 0
c Encoding variable: aux1472 with domain: int(0..4) (representing constraint (aux1467 + aux1469))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '5912'
c Var 'aux1472' direct represents '0' with '5912'
c Var 'aux1472' order represents '1' with '5913'
-5912 5913 0
c Var 'aux1472' direct represents '1' with '5914'
5912 -5913 5914 0
-5914 5913 0
-5914 -5912 0
c Var 'aux1472' order represents '2' with '5915'
-5913 5915 0
c Var 'aux1472' direct represents '2' with '5916'
5913 -5915 5916 0
-5916 5915 0
-5916 -5913 0
c Var 'aux1472' order represents '3' with '5917'
-5915 5917 0
c Var 'aux1472' direct represents '3' with '5918'
5915 -5917 5918 0
-5918 5917 0
-5918 -5915 0
c Var 'aux1472' direct represents '4' with '-5917'
5912 5914 5916 5918 -5917 0
c Encoding variable: aux1473 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '5919'
c Var 'aux1473' direct represents '0' with '5919'
c Var 'aux1473' order represents '1' with '5920'
-5919 5920 0
c Var 'aux1473' direct represents '1' with '5921'
5919 -5920 5921 0
-5921 5920 0
-5921 -5919 0
c Var 'aux1473' direct represents '2' with '-5920'
5919 5921 -5920 0
c Encoding variable: aux1474 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '5922'
c Var 'aux1474' direct represents '0' with '5922'
c Var 'aux1474' order represents '1' with '5923'
-5922 5923 0
c Var 'aux1474' direct represents '1' with '5924'
5922 -5923 5924 0
-5924 5923 0
-5924 -5922 0
c Var 'aux1474' direct represents '2' with '-5923'
5922 5924 -5923 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '5925'
c Var 'aux1475' direct represents '0' with '5925'
c Var 'aux1475' order represents '1' with '5926'
-5925 5926 0
c Var 'aux1475' direct represents '1' with '5927'
5925 -5926 5927 0
-5927 5926 0
-5927 -5925 0
c Var 'aux1475' direct represents '2' with '-5926'
5925 5927 -5926 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '5928'
c Var 'aux1476' direct represents '0' with '5928'
c Var 'aux1476' order represents '1' with '5929'
-5928 5929 0
c Var 'aux1476' direct represents '1' with '5930'
5928 -5929 5930 0
-5930 5929 0
-5930 -5928 0
c Var 'aux1476' direct represents '2' with '-5929'
5928 5930 -5929 0
c Encoding variable: aux1477 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1476))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '5931'
c Var 'aux1477' direct represents '0' with '5931'
c Var 'aux1477' order represents '1' with '5932'
-5931 5932 0
c Var 'aux1477' direct represents '1' with '5933'
5931 -5932 5933 0
-5933 5932 0
-5933 -5931 0
c Var 'aux1477' order represents '2' with '5934'
-5932 5934 0
c Var 'aux1477' direct represents '2' with '5935'
5932 -5934 5935 0
-5935 5934 0
-5935 -5932 0
c Var 'aux1477' direct represents '3' with '-5934'
5931 5933 5935 -5934 0
c Encoding variable: aux1478 with domain: int(0..4) (representing constraint (aux1473 + aux1475))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '5936'
c Var 'aux1478' direct represents '0' with '5936'
c Var 'aux1478' order represents '1' with '5937'
-5936 5937 0
c Var 'aux1478' direct represents '1' with '5938'
5936 -5937 5938 0
-5938 5937 0
-5938 -5936 0
c Var 'aux1478' order represents '2' with '5939'
-5937 5939 0
c Var 'aux1478' direct represents '2' with '5940'
5937 -5939 5940 0
-5940 5939 0
-5940 -5937 0
c Var 'aux1478' order represents '3' with '5941'
-5939 5941 0
c Var 'aux1478' direct represents '3' with '5942'
5939 -5941 5942 0
-5942 5941 0
-5942 -5939 0
c Var 'aux1478' direct represents '4' with '-5941'
5936 5938 5940 5942 -5941 0
c Encoding variable: aux1479 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '5943'
c Var 'aux1479' direct represents '0' with '5943'
c Var 'aux1479' order represents '1' with '5944'
-5943 5944 0
c Var 'aux1479' direct represents '1' with '5945'
5943 -5944 5945 0
-5945 5944 0
-5945 -5943 0
c Var 'aux1479' direct represents '2' with '-5944'
5943 5945 -5944 0
c Encoding variable: aux1480 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '5946'
c Var 'aux1480' direct represents '0' with '5946'
c Var 'aux1480' order represents '1' with '5947'
-5946 5947 0
c Var 'aux1480' direct represents '1' with '5948'
5946 -5947 5948 0
-5948 5947 0
-5948 -5946 0
c Var 'aux1480' direct represents '2' with '-5947'
5946 5948 -5947 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '5949'
c Var 'aux1481' direct represents '0' with '5949'
c Var 'aux1481' order represents '1' with '5950'
-5949 5950 0
c Var 'aux1481' direct represents '1' with '5951'
5949 -5950 5951 0
-5951 5950 0
-5951 -5949 0
c Var 'aux1481' direct represents '2' with '-5950'
5949 5951 -5950 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '5952'
c Var 'aux1482' direct represents '0' with '5952'
c Var 'aux1482' order represents '1' with '5953'
-5952 5953 0
c Var 'aux1482' direct represents '1' with '5954'
5952 -5953 5954 0
-5954 5953 0
-5954 -5952 0
c Var 'aux1482' direct represents '2' with '-5953'
5952 5954 -5953 0
c Encoding variable: aux1483 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1482))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '5955'
c Var 'aux1483' direct represents '0' with '5955'
c Var 'aux1483' order represents '1' with '5956'
-5955 5956 0
c Var 'aux1483' direct represents '1' with '5957'
5955 -5956 5957 0
-5957 5956 0
-5957 -5955 0
c Var 'aux1483' order represents '2' with '5958'
-5956 5958 0
c Var 'aux1483' direct represents '2' with '5959'
5956 -5958 5959 0
-5959 5958 0
-5959 -5956 0
c Var 'aux1483' direct represents '3' with '-5958'
5955 5957 5959 -5958 0
c Encoding variable: aux1484 with domain: int(0..4) (representing constraint (aux1479 + aux1481))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '5960'
c Var 'aux1484' direct represents '0' with '5960'
c Var 'aux1484' order represents '1' with '5961'
-5960 5961 0
c Var 'aux1484' direct represents '1' with '5962'
5960 -5961 5962 0
-5962 5961 0
-5962 -5960 0
c Var 'aux1484' order represents '2' with '5963'
-5961 5963 0
c Var 'aux1484' direct represents '2' with '5964'
5961 -5963 5964 0
-5964 5963 0
-5964 -5961 0
c Var 'aux1484' order represents '3' with '5965'
-5963 5965 0
c Var 'aux1484' direct represents '3' with '5966'
5963 -5965 5966 0
-5966 5965 0
-5966 -5963 0
c Var 'aux1484' direct represents '4' with '-5965'
5960 5962 5964 5966 -5965 0
c Encoding variable: aux1485 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '5967'
c Var 'aux1485' direct represents '0' with '5967'
c Var 'aux1485' order represents '1' with '5968'
-5967 5968 0
c Var 'aux1485' direct represents '1' with '5969'
5967 -5968 5969 0
-5969 5968 0
-5969 -5967 0
c Var 'aux1485' direct represents '2' with '-5968'
5967 5969 -5968 0
c Encoding variable: aux1486 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '5970'
c Var 'aux1486' direct represents '0' with '5970'
c Var 'aux1486' order represents '1' with '5971'
-5970 5971 0
c Var 'aux1486' direct represents '1' with '5972'
5970 -5971 5972 0
-5972 5971 0
-5972 -5970 0
c Var 'aux1486' direct represents '2' with '-5971'
5970 5972 -5971 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '5973'
c Var 'aux1487' direct represents '0' with '5973'
c Var 'aux1487' order represents '1' with '5974'
-5973 5974 0
c Var 'aux1487' direct represents '1' with '5975'
5973 -5974 5975 0
-5975 5974 0
-5975 -5973 0
c Var 'aux1487' direct represents '2' with '-5974'
5973 5975 -5974 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '5976'
c Var 'aux1488' direct represents '0' with '5976'
c Var 'aux1488' order represents '1' with '5977'
-5976 5977 0
c Var 'aux1488' direct represents '1' with '5978'
5976 -5977 5978 0
-5978 5977 0
-5978 -5976 0
c Var 'aux1488' direct represents '2' with '-5977'
5976 5978 -5977 0
c Encoding variable: aux1489 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1488))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '5979'
c Var 'aux1489' direct represents '0' with '5979'
c Var 'aux1489' order represents '1' with '5980'
-5979 5980 0
c Var 'aux1489' direct represents '1' with '5981'
5979 -5980 5981 0
-5981 5980 0
-5981 -5979 0
c Var 'aux1489' order represents '2' with '5982'
-5980 5982 0
c Var 'aux1489' direct represents '2' with '5983'
5980 -5982 5983 0
-5983 5982 0
-5983 -5980 0
c Var 'aux1489' direct represents '3' with '-5982'
5979 5981 5983 -5982 0
c Encoding variable: aux1490 with domain: int(0..4) (representing constraint (aux1485 + aux1487))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '5984'
c Var 'aux1490' direct represents '0' with '5984'
c Var 'aux1490' order represents '1' with '5985'
-5984 5985 0
c Var 'aux1490' direct represents '1' with '5986'
5984 -5985 5986 0
-5986 5985 0
-5986 -5984 0
c Var 'aux1490' order represents '2' with '5987'
-5985 5987 0
c Var 'aux1490' direct represents '2' with '5988'
5985 -5987 5988 0
-5988 5987 0
-5988 -5985 0
c Var 'aux1490' order represents '3' with '5989'
-5987 5989 0
c Var 'aux1490' direct represents '3' with '5990'
5987 -5989 5990 0
-5990 5989 0
-5990 -5987 0
c Var 'aux1490' direct represents '4' with '-5989'
5984 5986 5988 5990 -5989 0
c Encoding variable: aux1491 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '5991'
c Var 'aux1491' direct represents '0' with '5991'
c Var 'aux1491' order represents '1' with '5992'
-5991 5992 0
c Var 'aux1491' direct represents '1' with '5993'
5991 -5992 5993 0
-5993 5992 0
-5993 -5991 0
c Var 'aux1491' direct represents '2' with '-5992'
5991 5993 -5992 0
c Encoding variable: aux1492 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '5994'
c Var 'aux1492' direct represents '0' with '5994'
c Var 'aux1492' order represents '1' with '5995'
-5994 5995 0
c Var 'aux1492' direct represents '1' with '5996'
5994 -5995 5996 0
-5996 5995 0
-5996 -5994 0
c Var 'aux1492' direct represents '2' with '-5995'
5994 5996 -5995 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '5997'
c Var 'aux1493' direct represents '0' with '5997'
c Var 'aux1493' order represents '1' with '5998'
-5997 5998 0
c Var 'aux1493' direct represents '1' with '5999'
5997 -5998 5999 0
-5999 5998 0
-5999 -5997 0
c Var 'aux1493' direct represents '2' with '-5998'
5997 5999 -5998 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6000'
c Var 'aux1494' direct represents '0' with '6000'
c Var 'aux1494' order represents '1' with '6001'
-6000 6001 0
c Var 'aux1494' direct represents '1' with '6002'
6000 -6001 6002 0
-6002 6001 0
-6002 -6000 0
c Var 'aux1494' direct represents '2' with '-6001'
6000 6002 -6001 0
c Encoding variable: aux1495 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1494))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6003'
c Var 'aux1495' direct represents '0' with '6003'
c Var 'aux1495' order represents '1' with '6004'
-6003 6004 0
c Var 'aux1495' direct represents '1' with '6005'
6003 -6004 6005 0
-6005 6004 0
-6005 -6003 0
c Var 'aux1495' order represents '2' with '6006'
-6004 6006 0
c Var 'aux1495' direct represents '2' with '6007'
6004 -6006 6007 0
-6007 6006 0
-6007 -6004 0
c Var 'aux1495' direct represents '3' with '-6006'
6003 6005 6007 -6006 0
c Encoding variable: aux1496 with domain: int(0..4) (representing constraint (aux1491 + aux1493))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6008'
c Var 'aux1496' direct represents '0' with '6008'
c Var 'aux1496' order represents '1' with '6009'
-6008 6009 0
c Var 'aux1496' direct represents '1' with '6010'
6008 -6009 6010 0
-6010 6009 0
-6010 -6008 0
c Var 'aux1496' order represents '2' with '6011'
-6009 6011 0
c Var 'aux1496' direct represents '2' with '6012'
6009 -6011 6012 0
-6012 6011 0
-6012 -6009 0
c Var 'aux1496' order represents '3' with '6013'
-6011 6013 0
c Var 'aux1496' direct represents '3' with '6014'
6011 -6013 6014 0
-6014 6013 0
-6014 -6011 0
c Var 'aux1496' direct represents '4' with '-6013'
6008 6010 6012 6014 -6013 0
c Encoding variable: aux1497 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6015'
c Var 'aux1497' direct represents '0' with '6015'
c Var 'aux1497' order represents '1' with '6016'
-6015 6016 0
c Var 'aux1497' direct represents '1' with '6017'
6015 -6016 6017 0
-6017 6016 0
-6017 -6015 0
c Var 'aux1497' direct represents '2' with '-6016'
6015 6017 -6016 0
c Encoding variable: aux1498 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6018'
c Var 'aux1498' direct represents '0' with '6018'
c Var 'aux1498' order represents '1' with '6019'
-6018 6019 0
c Var 'aux1498' direct represents '1' with '6020'
6018 -6019 6020 0
-6020 6019 0
-6020 -6018 0
c Var 'aux1498' direct represents '2' with '-6019'
6018 6020 -6019 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6021'
c Var 'aux1499' direct represents '0' with '6021'
c Var 'aux1499' order represents '1' with '6022'
-6021 6022 0
c Var 'aux1499' direct represents '1' with '6023'
6021 -6022 6023 0
-6023 6022 0
-6023 -6021 0
c Var 'aux1499' direct represents '2' with '-6022'
6021 6023 -6022 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6024'
c Var 'aux1500' direct represents '0' with '6024'
c Var 'aux1500' order represents '1' with '6025'
-6024 6025 0
c Var 'aux1500' direct represents '1' with '6026'
6024 -6025 6026 0
-6026 6025 0
-6026 -6024 0
c Var 'aux1500' direct represents '2' with '-6025'
6024 6026 -6025 0
c Encoding variable: aux1501 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1500))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6027'
c Var 'aux1501' direct represents '0' with '6027'
c Var 'aux1501' order represents '1' with '6028'
-6027 6028 0
c Var 'aux1501' direct represents '1' with '6029'
6027 -6028 6029 0
-6029 6028 0
-6029 -6027 0
c Var 'aux1501' order represents '2' with '6030'
-6028 6030 0
c Var 'aux1501' direct represents '2' with '6031'
6028 -6030 6031 0
-6031 6030 0
-6031 -6028 0
c Var 'aux1501' direct represents '3' with '-6030'
6027 6029 6031 -6030 0
c Encoding variable: aux1502 with domain: int(0..4) (representing constraint (aux1497 + aux1499))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6032'
c Var 'aux1502' direct represents '0' with '6032'
c Var 'aux1502' order represents '1' with '6033'
-6032 6033 0
c Var 'aux1502' direct represents '1' with '6034'
6032 -6033 6034 0
-6034 6033 0
-6034 -6032 0
c Var 'aux1502' order represents '2' with '6035'
-6033 6035 0
c Var 'aux1502' direct represents '2' with '6036'
6033 -6035 6036 0
-6036 6035 0
-6036 -6033 0
c Var 'aux1502' order represents '3' with '6037'
-6035 6037 0
c Var 'aux1502' direct represents '3' with '6038'
6035 -6037 6038 0
-6038 6037 0
-6038 -6035 0
c Var 'aux1502' direct represents '4' with '-6037'
6032 6034 6036 6038 -6037 0
c Encoding variable: aux1503 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6039'
c Var 'aux1503' direct represents '0' with '6039'
c Var 'aux1503' order represents '1' with '6040'
-6039 6040 0
c Var 'aux1503' direct represents '1' with '6041'
6039 -6040 6041 0
-6041 6040 0
-6041 -6039 0
c Var 'aux1503' direct represents '2' with '-6040'
6039 6041 -6040 0
c Encoding variable: aux1504 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6042'
c Var 'aux1504' direct represents '0' with '6042'
c Var 'aux1504' order represents '1' with '6043'
-6042 6043 0
c Var 'aux1504' direct represents '1' with '6044'
6042 -6043 6044 0
-6044 6043 0
-6044 -6042 0
c Var 'aux1504' direct represents '2' with '-6043'
6042 6044 -6043 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6045'
c Var 'aux1505' direct represents '0' with '6045'
c Var 'aux1505' order represents '1' with '6046'
-6045 6046 0
c Var 'aux1505' direct represents '1' with '6047'
6045 -6046 6047 0
-6047 6046 0
-6047 -6045 0
c Var 'aux1505' direct represents '2' with '-6046'
6045 6047 -6046 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6048'
c Var 'aux1506' direct represents '0' with '6048'
c Var 'aux1506' order represents '1' with '6049'
-6048 6049 0
c Var 'aux1506' direct represents '1' with '6050'
6048 -6049 6050 0
-6050 6049 0
-6050 -6048 0
c Var 'aux1506' direct represents '2' with '-6049'
6048 6050 -6049 0
c Encoding variable: aux1507 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1506))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6051'
c Var 'aux1507' direct represents '0' with '6051'
c Var 'aux1507' order represents '1' with '6052'
-6051 6052 0
c Var 'aux1507' direct represents '1' with '6053'
6051 -6052 6053 0
-6053 6052 0
-6053 -6051 0
c Var 'aux1507' order represents '2' with '6054'
-6052 6054 0
c Var 'aux1507' direct represents '2' with '6055'
6052 -6054 6055 0
-6055 6054 0
-6055 -6052 0
c Var 'aux1507' direct represents '3' with '-6054'
6051 6053 6055 -6054 0
c Encoding variable: aux1508 with domain: int(0..4) (representing constraint (aux1503 + aux1505))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6056'
c Var 'aux1508' direct represents '0' with '6056'
c Var 'aux1508' order represents '1' with '6057'
-6056 6057 0
c Var 'aux1508' direct represents '1' with '6058'
6056 -6057 6058 0
-6058 6057 0
-6058 -6056 0
c Var 'aux1508' order represents '2' with '6059'
-6057 6059 0
c Var 'aux1508' direct represents '2' with '6060'
6057 -6059 6060 0
-6060 6059 0
-6060 -6057 0
c Var 'aux1508' order represents '3' with '6061'
-6059 6061 0
c Var 'aux1508' direct represents '3' with '6062'
6059 -6061 6062 0
-6062 6061 0
-6062 -6059 0
c Var 'aux1508' direct represents '4' with '-6061'
6056 6058 6060 6062 -6061 0
c Encoding variable: aux1509 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6063'
c Var 'aux1509' direct represents '0' with '6063'
c Var 'aux1509' order represents '1' with '6064'
-6063 6064 0
c Var 'aux1509' direct represents '1' with '6065'
6063 -6064 6065 0
-6065 6064 0
-6065 -6063 0
c Var 'aux1509' direct represents '2' with '-6064'
6063 6065 -6064 0
c Encoding variable: aux1510 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6066'
c Var 'aux1510' direct represents '0' with '6066'
c Var 'aux1510' order represents '1' with '6067'
-6066 6067 0
c Var 'aux1510' direct represents '1' with '6068'
6066 -6067 6068 0
-6068 6067 0
-6068 -6066 0
c Var 'aux1510' direct represents '2' with '-6067'
6066 6068 -6067 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6069'
c Var 'aux1511' direct represents '0' with '6069'
c Var 'aux1511' order represents '1' with '6070'
-6069 6070 0
c Var 'aux1511' direct represents '1' with '6071'
6069 -6070 6071 0
-6071 6070 0
-6071 -6069 0
c Var 'aux1511' direct represents '2' with '-6070'
6069 6071 -6070 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6072'
c Var 'aux1512' direct represents '0' with '6072'
c Var 'aux1512' order represents '1' with '6073'
-6072 6073 0
c Var 'aux1512' direct represents '1' with '6074'
6072 -6073 6074 0
-6074 6073 0
-6074 -6072 0
c Var 'aux1512' direct represents '2' with '-6073'
6072 6074 -6073 0
c Encoding variable: aux1513 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1512))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6075'
c Var 'aux1513' direct represents '0' with '6075'
c Var 'aux1513' order represents '1' with '6076'
-6075 6076 0
c Var 'aux1513' direct represents '1' with '6077'
6075 -6076 6077 0
-6077 6076 0
-6077 -6075 0
c Var 'aux1513' order represents '2' with '6078'
-6076 6078 0
c Var 'aux1513' direct represents '2' with '6079'
6076 -6078 6079 0
-6079 6078 0
-6079 -6076 0
c Var 'aux1513' direct represents '3' with '-6078'
6075 6077 6079 -6078 0
c Encoding variable: aux1514 with domain: int(0..4) (representing constraint (aux1509 + aux1511))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6080'
c Var 'aux1514' direct represents '0' with '6080'
c Var 'aux1514' order represents '1' with '6081'
-6080 6081 0
c Var 'aux1514' direct represents '1' with '6082'
6080 -6081 6082 0
-6082 6081 0
-6082 -6080 0
c Var 'aux1514' order represents '2' with '6083'
-6081 6083 0
c Var 'aux1514' direct represents '2' with '6084'
6081 -6083 6084 0
-6084 6083 0
-6084 -6081 0
c Var 'aux1514' order represents '3' with '6085'
-6083 6085 0
c Var 'aux1514' direct represents '3' with '6086'
6083 -6085 6086 0
-6086 6085 0
-6086 -6083 0
c Var 'aux1514' direct represents '4' with '-6085'
6080 6082 6084 6086 -6085 0
c Encoding variable: aux1515 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6087'
c Var 'aux1515' direct represents '0' with '6087'
c Var 'aux1515' order represents '1' with '6088'
-6087 6088 0
c Var 'aux1515' direct represents '1' with '6089'
6087 -6088 6089 0
-6089 6088 0
-6089 -6087 0
c Var 'aux1515' direct represents '2' with '-6088'
6087 6089 -6088 0
c Encoding variable: aux1516 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6090'
c Var 'aux1516' direct represents '0' with '6090'
c Var 'aux1516' order represents '1' with '6091'
-6090 6091 0
c Var 'aux1516' direct represents '1' with '6092'
6090 -6091 6092 0
-6092 6091 0
-6092 -6090 0
c Var 'aux1516' direct represents '2' with '-6091'
6090 6092 -6091 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6093'
c Var 'aux1517' direct represents '0' with '6093'
c Var 'aux1517' order represents '1' with '6094'
-6093 6094 0
c Var 'aux1517' direct represents '1' with '6095'
6093 -6094 6095 0
-6095 6094 0
-6095 -6093 0
c Var 'aux1517' direct represents '2' with '-6094'
6093 6095 -6094 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6096'
c Var 'aux1518' direct represents '0' with '6096'
c Var 'aux1518' order represents '1' with '6097'
-6096 6097 0
c Var 'aux1518' direct represents '1' with '6098'
6096 -6097 6098 0
-6098 6097 0
-6098 -6096 0
c Var 'aux1518' direct represents '2' with '-6097'
6096 6098 -6097 0
c Encoding variable: aux1519 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1518))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6099'
c Var 'aux1519' direct represents '0' with '6099'
c Var 'aux1519' order represents '1' with '6100'
-6099 6100 0
c Var 'aux1519' direct represents '1' with '6101'
6099 -6100 6101 0
-6101 6100 0
-6101 -6099 0
c Var 'aux1519' order represents '2' with '6102'
-6100 6102 0
c Var 'aux1519' direct represents '2' with '6103'
6100 -6102 6103 0
-6103 6102 0
-6103 -6100 0
c Var 'aux1519' direct represents '3' with '-6102'
6099 6101 6103 -6102 0
c Encoding variable: aux1520 with domain: int(0..4) (representing constraint (aux1515 + aux1517))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6104'
c Var 'aux1520' direct represents '0' with '6104'
c Var 'aux1520' order represents '1' with '6105'
-6104 6105 0
c Var 'aux1520' direct represents '1' with '6106'
6104 -6105 6106 0
-6106 6105 0
-6106 -6104 0
c Var 'aux1520' order represents '2' with '6107'
-6105 6107 0
c Var 'aux1520' direct represents '2' with '6108'
6105 -6107 6108 0
-6108 6107 0
-6108 -6105 0
c Var 'aux1520' order represents '3' with '6109'
-6107 6109 0
c Var 'aux1520' direct represents '3' with '6110'
6107 -6109 6110 0
-6110 6109 0
-6110 -6107 0
c Var 'aux1520' direct represents '4' with '-6109'
6104 6106 6108 6110 -6109 0
c Encoding variable: aux1521 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6111'
c Var 'aux1521' direct represents '0' with '6111'
c Var 'aux1521' order represents '1' with '6112'
-6111 6112 0
c Var 'aux1521' direct represents '1' with '6113'
6111 -6112 6113 0
-6113 6112 0
-6113 -6111 0
c Var 'aux1521' direct represents '2' with '-6112'
6111 6113 -6112 0
c Encoding variable: aux1522 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6114'
c Var 'aux1522' direct represents '0' with '6114'
c Var 'aux1522' order represents '1' with '6115'
-6114 6115 0
c Var 'aux1522' direct represents '1' with '6116'
6114 -6115 6116 0
-6116 6115 0
-6116 -6114 0
c Var 'aux1522' direct represents '2' with '-6115'
6114 6116 -6115 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6117'
c Var 'aux1523' direct represents '0' with '6117'
c Var 'aux1523' order represents '1' with '6118'
-6117 6118 0
c Var 'aux1523' direct represents '1' with '6119'
6117 -6118 6119 0
-6119 6118 0
-6119 -6117 0
c Var 'aux1523' direct represents '2' with '-6118'
6117 6119 -6118 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6120'
c Var 'aux1524' direct represents '0' with '6120'
c Var 'aux1524' order represents '1' with '6121'
-6120 6121 0
c Var 'aux1524' direct represents '1' with '6122'
6120 -6121 6122 0
-6122 6121 0
-6122 -6120 0
c Var 'aux1524' direct represents '2' with '-6121'
6120 6122 -6121 0
c Encoding variable: aux1525 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1524))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6123'
c Var 'aux1525' direct represents '0' with '6123'
c Var 'aux1525' order represents '1' with '6124'
-6123 6124 0
c Var 'aux1525' direct represents '1' with '6125'
6123 -6124 6125 0
-6125 6124 0
-6125 -6123 0
c Var 'aux1525' order represents '2' with '6126'
-6124 6126 0
c Var 'aux1525' direct represents '2' with '6127'
6124 -6126 6127 0
-6127 6126 0
-6127 -6124 0
c Var 'aux1525' direct represents '3' with '-6126'
6123 6125 6127 -6126 0
c Encoding variable: aux1526 with domain: int(0..4) (representing constraint (aux1521 + aux1523))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6128'
c Var 'aux1526' direct represents '0' with '6128'
c Var 'aux1526' order represents '1' with '6129'
-6128 6129 0
c Var 'aux1526' direct represents '1' with '6130'
6128 -6129 6130 0
-6130 6129 0
-6130 -6128 0
c Var 'aux1526' order represents '2' with '6131'
-6129 6131 0
c Var 'aux1526' direct represents '2' with '6132'
6129 -6131 6132 0
-6132 6131 0
-6132 -6129 0
c Var 'aux1526' order represents '3' with '6133'
-6131 6133 0
c Var 'aux1526' direct represents '3' with '6134'
6131 -6133 6134 0
-6134 6133 0
-6134 -6131 0
c Var 'aux1526' direct represents '4' with '-6133'
6128 6130 6132 6134 -6133 0
c Encoding variable: aux1527 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6135'
c Var 'aux1527' direct represents '0' with '6135'
c Var 'aux1527' order represents '1' with '6136'
-6135 6136 0
c Var 'aux1527' direct represents '1' with '6137'
6135 -6136 6137 0
-6137 6136 0
-6137 -6135 0
c Var 'aux1527' direct represents '2' with '-6136'
6135 6137 -6136 0
c Encoding variable: aux1528 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6138'
c Var 'aux1528' direct represents '0' with '6138'
c Var 'aux1528' order represents '1' with '6139'
-6138 6139 0
c Var 'aux1528' direct represents '1' with '6140'
6138 -6139 6140 0
-6140 6139 0
-6140 -6138 0
c Var 'aux1528' direct represents '2' with '-6139'
6138 6140 -6139 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6141'
c Var 'aux1529' direct represents '0' with '6141'
c Var 'aux1529' order represents '1' with '6142'
-6141 6142 0
c Var 'aux1529' direct represents '1' with '6143'
6141 -6142 6143 0
-6143 6142 0
-6143 -6141 0
c Var 'aux1529' direct represents '2' with '-6142'
6141 6143 -6142 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6144'
c Var 'aux1530' direct represents '0' with '6144'
c Var 'aux1530' order represents '1' with '6145'
-6144 6145 0
c Var 'aux1530' direct represents '1' with '6146'
6144 -6145 6146 0
-6146 6145 0
-6146 -6144 0
c Var 'aux1530' direct represents '2' with '-6145'
6144 6146 -6145 0
c Encoding variable: aux1531 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1530))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6147'
c Var 'aux1531' direct represents '0' with '6147'
c Var 'aux1531' order represents '1' with '6148'
-6147 6148 0
c Var 'aux1531' direct represents '1' with '6149'
6147 -6148 6149 0
-6149 6148 0
-6149 -6147 0
c Var 'aux1531' order represents '2' with '6150'
-6148 6150 0
c Var 'aux1531' direct represents '2' with '6151'
6148 -6150 6151 0
-6151 6150 0
-6151 -6148 0
c Var 'aux1531' direct represents '3' with '-6150'
6147 6149 6151 -6150 0
c Encoding variable: aux1532 with domain: int(0..4) (representing constraint (aux1527 + aux1529))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6152'
c Var 'aux1532' direct represents '0' with '6152'
c Var 'aux1532' order represents '1' with '6153'
-6152 6153 0
c Var 'aux1532' direct represents '1' with '6154'
6152 -6153 6154 0
-6154 6153 0
-6154 -6152 0
c Var 'aux1532' order represents '2' with '6155'
-6153 6155 0
c Var 'aux1532' direct represents '2' with '6156'
6153 -6155 6156 0
-6156 6155 0
-6156 -6153 0
c Var 'aux1532' order represents '3' with '6157'
-6155 6157 0
c Var 'aux1532' direct represents '3' with '6158'
6155 -6157 6158 0
-6158 6157 0
-6158 -6155 0
c Var 'aux1532' direct represents '4' with '-6157'
6152 6154 6156 6158 -6157 0
c Encoding variable: aux1533 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6159'
c Var 'aux1533' direct represents '0' with '6159'
c Var 'aux1533' order represents '1' with '6160'
-6159 6160 0
c Var 'aux1533' direct represents '1' with '6161'
6159 -6160 6161 0
-6161 6160 0
-6161 -6159 0
c Var 'aux1533' direct represents '2' with '-6160'
6159 6161 -6160 0
c Encoding variable: aux1534 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6162'
c Var 'aux1534' direct represents '0' with '6162'
c Var 'aux1534' order represents '1' with '6163'
-6162 6163 0
c Var 'aux1534' direct represents '1' with '6164'
6162 -6163 6164 0
-6164 6163 0
-6164 -6162 0
c Var 'aux1534' direct represents '2' with '-6163'
6162 6164 -6163 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6165'
c Var 'aux1535' direct represents '0' with '6165'
c Var 'aux1535' order represents '1' with '6166'
-6165 6166 0
c Var 'aux1535' direct represents '1' with '6167'
6165 -6166 6167 0
-6167 6166 0
-6167 -6165 0
c Var 'aux1535' direct represents '2' with '-6166'
6165 6167 -6166 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6168'
c Var 'aux1536' direct represents '0' with '6168'
c Var 'aux1536' order represents '1' with '6169'
-6168 6169 0
c Var 'aux1536' direct represents '1' with '6170'
6168 -6169 6170 0
-6170 6169 0
-6170 -6168 0
c Var 'aux1536' direct represents '2' with '-6169'
6168 6170 -6169 0
c Encoding variable: aux1537 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1536))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6171'
c Var 'aux1537' direct represents '0' with '6171'
c Var 'aux1537' order represents '1' with '6172'
-6171 6172 0
c Var 'aux1537' direct represents '1' with '6173'
6171 -6172 6173 0
-6173 6172 0
-6173 -6171 0
c Var 'aux1537' order represents '2' with '6174'
-6172 6174 0
c Var 'aux1537' direct represents '2' with '6175'
6172 -6174 6175 0
-6175 6174 0
-6175 -6172 0
c Var 'aux1537' direct represents '3' with '-6174'
6171 6173 6175 -6174 0
c Encoding variable: aux1538 with domain: int(0..4) (representing constraint (aux1533 + aux1535))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6176'
c Var 'aux1538' direct represents '0' with '6176'
c Var 'aux1538' order represents '1' with '6177'
-6176 6177 0
c Var 'aux1538' direct represents '1' with '6178'
6176 -6177 6178 0
-6178 6177 0
-6178 -6176 0
c Var 'aux1538' order represents '2' with '6179'
-6177 6179 0
c Var 'aux1538' direct represents '2' with '6180'
6177 -6179 6180 0
-6180 6179 0
-6180 -6177 0
c Var 'aux1538' order represents '3' with '6181'
-6179 6181 0
c Var 'aux1538' direct represents '3' with '6182'
6179 -6181 6182 0
-6182 6181 0
-6182 -6179 0
c Var 'aux1538' direct represents '4' with '-6181'
6176 6178 6180 6182 -6181 0
c Encoding variable: aux1539 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6183'
c Var 'aux1539' direct represents '0' with '6183'
c Var 'aux1539' order represents '1' with '6184'
-6183 6184 0
c Var 'aux1539' direct represents '1' with '6185'
6183 -6184 6185 0
-6185 6184 0
-6185 -6183 0
c Var 'aux1539' direct represents '2' with '-6184'
6183 6185 -6184 0
c Encoding variable: aux1540 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6186'
c Var 'aux1540' direct represents '0' with '6186'
c Var 'aux1540' order represents '1' with '6187'
-6186 6187 0
c Var 'aux1540' direct represents '1' with '6188'
6186 -6187 6188 0
-6188 6187 0
-6188 -6186 0
c Var 'aux1540' direct represents '2' with '-6187'
6186 6188 -6187 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6189'
c Var 'aux1541' direct represents '0' with '6189'
c Var 'aux1541' order represents '1' with '6190'
-6189 6190 0
c Var 'aux1541' direct represents '1' with '6191'
6189 -6190 6191 0
-6191 6190 0
-6191 -6189 0
c Var 'aux1541' direct represents '2' with '-6190'
6189 6191 -6190 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6192'
c Var 'aux1542' direct represents '0' with '6192'
c Var 'aux1542' order represents '1' with '6193'
-6192 6193 0
c Var 'aux1542' direct represents '1' with '6194'
6192 -6193 6194 0
-6194 6193 0
-6194 -6192 0
c Var 'aux1542' direct represents '2' with '-6193'
6192 6194 -6193 0
c Encoding variable: aux1543 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1542))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6195'
c Var 'aux1543' direct represents '0' with '6195'
c Var 'aux1543' order represents '1' with '6196'
-6195 6196 0
c Var 'aux1543' direct represents '1' with '6197'
6195 -6196 6197 0
-6197 6196 0
-6197 -6195 0
c Var 'aux1543' order represents '2' with '6198'
-6196 6198 0
c Var 'aux1543' direct represents '2' with '6199'
6196 -6198 6199 0
-6199 6198 0
-6199 -6196 0
c Var 'aux1543' direct represents '3' with '-6198'
6195 6197 6199 -6198 0
c Encoding variable: aux1544 with domain: int(0..4) (representing constraint (aux1539 + aux1541))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6200'
c Var 'aux1544' direct represents '0' with '6200'
c Var 'aux1544' order represents '1' with '6201'
-6200 6201 0
c Var 'aux1544' direct represents '1' with '6202'
6200 -6201 6202 0
-6202 6201 0
-6202 -6200 0
c Var 'aux1544' order represents '2' with '6203'
-6201 6203 0
c Var 'aux1544' direct represents '2' with '6204'
6201 -6203 6204 0
-6204 6203 0
-6204 -6201 0
c Var 'aux1544' order represents '3' with '6205'
-6203 6205 0
c Var 'aux1544' direct represents '3' with '6206'
6203 -6205 6206 0
-6206 6205 0
-6206 -6203 0
c Var 'aux1544' direct represents '4' with '-6205'
6200 6202 6204 6206 -6205 0
c Encoding variable: aux1545 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6207'
c Var 'aux1545' direct represents '0' with '6207'
c Var 'aux1545' order represents '1' with '6208'
-6207 6208 0
c Var 'aux1545' direct represents '1' with '6209'
6207 -6208 6209 0
-6209 6208 0
-6209 -6207 0
c Var 'aux1545' direct represents '2' with '-6208'
6207 6209 -6208 0
c Encoding variable: aux1546 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6210'
c Var 'aux1546' direct represents '0' with '6210'
c Var 'aux1546' order represents '1' with '6211'
-6210 6211 0
c Var 'aux1546' direct represents '1' with '6212'
6210 -6211 6212 0
-6212 6211 0
-6212 -6210 0
c Var 'aux1546' direct represents '2' with '-6211'
6210 6212 -6211 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6213'
c Var 'aux1547' direct represents '0' with '6213'
c Var 'aux1547' order represents '1' with '6214'
-6213 6214 0
c Var 'aux1547' direct represents '1' with '6215'
6213 -6214 6215 0
-6215 6214 0
-6215 -6213 0
c Var 'aux1547' direct represents '2' with '-6214'
6213 6215 -6214 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6216'
c Var 'aux1548' direct represents '0' with '6216'
c Var 'aux1548' order represents '1' with '6217'
-6216 6217 0
c Var 'aux1548' direct represents '1' with '6218'
6216 -6217 6218 0
-6218 6217 0
-6218 -6216 0
c Var 'aux1548' direct represents '2' with '-6217'
6216 6218 -6217 0
c Encoding variable: aux1549 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1548))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6219'
c Var 'aux1549' direct represents '0' with '6219'
c Var 'aux1549' order represents '1' with '6220'
-6219 6220 0
c Var 'aux1549' direct represents '1' with '6221'
6219 -6220 6221 0
-6221 6220 0
-6221 -6219 0
c Var 'aux1549' order represents '2' with '6222'
-6220 6222 0
c Var 'aux1549' direct represents '2' with '6223'
6220 -6222 6223 0
-6223 6222 0
-6223 -6220 0
c Var 'aux1549' direct represents '3' with '-6222'
6219 6221 6223 -6222 0
c Encoding variable: aux1550 with domain: int(0..4) (representing constraint (aux1545 + aux1547))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6224'
c Var 'aux1550' direct represents '0' with '6224'
c Var 'aux1550' order represents '1' with '6225'
-6224 6225 0
c Var 'aux1550' direct represents '1' with '6226'
6224 -6225 6226 0
-6226 6225 0
-6226 -6224 0
c Var 'aux1550' order represents '2' with '6227'
-6225 6227 0
c Var 'aux1550' direct represents '2' with '6228'
6225 -6227 6228 0
-6228 6227 0
-6228 -6225 0
c Var 'aux1550' order represents '3' with '6229'
-6227 6229 0
c Var 'aux1550' direct represents '3' with '6230'
6227 -6229 6230 0
-6230 6229 0
-6230 -6227 0
c Var 'aux1550' direct represents '4' with '-6229'
6224 6226 6228 6230 -6229 0
c Encoding variable: aux1551 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6231'
c Var 'aux1551' direct represents '0' with '6231'
c Var 'aux1551' order represents '1' with '6232'
-6231 6232 0
c Var 'aux1551' direct represents '1' with '6233'
6231 -6232 6233 0
-6233 6232 0
-6233 -6231 0
c Var 'aux1551' direct represents '2' with '-6232'
6231 6233 -6232 0
c Encoding variable: aux1552 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6234'
c Var 'aux1552' direct represents '0' with '6234'
c Var 'aux1552' order represents '1' with '6235'
-6234 6235 0
c Var 'aux1552' direct represents '1' with '6236'
6234 -6235 6236 0
-6236 6235 0
-6236 -6234 0
c Var 'aux1552' direct represents '2' with '-6235'
6234 6236 -6235 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6237'
c Var 'aux1553' direct represents '0' with '6237'
c Var 'aux1553' order represents '1' with '6238'
-6237 6238 0
c Var 'aux1553' direct represents '1' with '6239'
6237 -6238 6239 0
-6239 6238 0
-6239 -6237 0
c Var 'aux1553' direct represents '2' with '-6238'
6237 6239 -6238 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6240'
c Var 'aux1554' direct represents '0' with '6240'
c Var 'aux1554' order represents '1' with '6241'
-6240 6241 0
c Var 'aux1554' direct represents '1' with '6242'
6240 -6241 6242 0
-6242 6241 0
-6242 -6240 0
c Var 'aux1554' direct represents '2' with '-6241'
6240 6242 -6241 0
c Encoding variable: aux1555 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1554))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6243'
c Var 'aux1555' direct represents '0' with '6243'
c Var 'aux1555' order represents '1' with '6244'
-6243 6244 0
c Var 'aux1555' direct represents '1' with '6245'
6243 -6244 6245 0
-6245 6244 0
-6245 -6243 0
c Var 'aux1555' order represents '2' with '6246'
-6244 6246 0
c Var 'aux1555' direct represents '2' with '6247'
6244 -6246 6247 0
-6247 6246 0
-6247 -6244 0
c Var 'aux1555' direct represents '3' with '-6246'
6243 6245 6247 -6246 0
c Encoding variable: aux1556 with domain: int(0..4) (representing constraint (aux1551 + aux1553))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6248'
c Var 'aux1556' direct represents '0' with '6248'
c Var 'aux1556' order represents '1' with '6249'
-6248 6249 0
c Var 'aux1556' direct represents '1' with '6250'
6248 -6249 6250 0
-6250 6249 0
-6250 -6248 0
c Var 'aux1556' order represents '2' with '6251'
-6249 6251 0
c Var 'aux1556' direct represents '2' with '6252'
6249 -6251 6252 0
-6252 6251 0
-6252 -6249 0
c Var 'aux1556' order represents '3' with '6253'
-6251 6253 0
c Var 'aux1556' direct represents '3' with '6254'
6251 -6253 6254 0
-6254 6253 0
-6254 -6251 0
c Var 'aux1556' direct represents '4' with '-6253'
6248 6250 6252 6254 -6253 0
c Encoding variable: aux1557 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6255'
c Var 'aux1557' direct represents '0' with '6255'
c Var 'aux1557' order represents '1' with '6256'
-6255 6256 0
c Var 'aux1557' direct represents '1' with '6257'
6255 -6256 6257 0
-6257 6256 0
-6257 -6255 0
c Var 'aux1557' direct represents '2' with '-6256'
6255 6257 -6256 0
c Encoding variable: aux1558 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6258'
c Var 'aux1558' direct represents '0' with '6258'
c Var 'aux1558' order represents '1' with '6259'
-6258 6259 0
c Var 'aux1558' direct represents '1' with '6260'
6258 -6259 6260 0
-6260 6259 0
-6260 -6258 0
c Var 'aux1558' direct represents '2' with '-6259'
6258 6260 -6259 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6261'
c Var 'aux1559' direct represents '0' with '6261'
c Var 'aux1559' order represents '1' with '6262'
-6261 6262 0
c Var 'aux1559' direct represents '1' with '6263'
6261 -6262 6263 0
-6263 6262 0
-6263 -6261 0
c Var 'aux1559' direct represents '2' with '-6262'
6261 6263 -6262 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6264'
c Var 'aux1560' direct represents '0' with '6264'
c Var 'aux1560' order represents '1' with '6265'
-6264 6265 0
c Var 'aux1560' direct represents '1' with '6266'
6264 -6265 6266 0
-6266 6265 0
-6266 -6264 0
c Var 'aux1560' direct represents '2' with '-6265'
6264 6266 -6265 0
c Encoding variable: aux1561 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1560))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6267'
c Var 'aux1561' direct represents '0' with '6267'
c Var 'aux1561' order represents '1' with '6268'
-6267 6268 0
c Var 'aux1561' direct represents '1' with '6269'
6267 -6268 6269 0
-6269 6268 0
-6269 -6267 0
c Var 'aux1561' order represents '2' with '6270'
-6268 6270 0
c Var 'aux1561' direct represents '2' with '6271'
6268 -6270 6271 0
-6271 6270 0
-6271 -6268 0
c Var 'aux1561' direct represents '3' with '-6270'
6267 6269 6271 -6270 0
c Encoding variable: aux1562 with domain: int(0..4) (representing constraint (aux1557 + aux1559))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6272'
c Var 'aux1562' direct represents '0' with '6272'
c Var 'aux1562' order represents '1' with '6273'
-6272 6273 0
c Var 'aux1562' direct represents '1' with '6274'
6272 -6273 6274 0
-6274 6273 0
-6274 -6272 0
c Var 'aux1562' order represents '2' with '6275'
-6273 6275 0
c Var 'aux1562' direct represents '2' with '6276'
6273 -6275 6276 0
-6276 6275 0
-6276 -6273 0
c Var 'aux1562' order represents '3' with '6277'
-6275 6277 0
c Var 'aux1562' direct represents '3' with '6278'
6275 -6277 6278 0
-6278 6277 0
-6278 -6275 0
c Var 'aux1562' direct represents '4' with '-6277'
6272 6274 6276 6278 -6277 0
c Encoding variable: aux1563 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6279'
c Var 'aux1563' direct represents '0' with '6279'
c Var 'aux1563' order represents '1' with '6280'
-6279 6280 0
c Var 'aux1563' direct represents '1' with '6281'
6279 -6280 6281 0
-6281 6280 0
-6281 -6279 0
c Var 'aux1563' direct represents '2' with '-6280'
6279 6281 -6280 0
c Encoding variable: aux1564 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6282'
c Var 'aux1564' direct represents '0' with '6282'
c Var 'aux1564' order represents '1' with '6283'
-6282 6283 0
c Var 'aux1564' direct represents '1' with '6284'
6282 -6283 6284 0
-6284 6283 0
-6284 -6282 0
c Var 'aux1564' direct represents '2' with '-6283'
6282 6284 -6283 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6285'
c Var 'aux1565' direct represents '0' with '6285'
c Var 'aux1565' order represents '1' with '6286'
-6285 6286 0
c Var 'aux1565' direct represents '1' with '6287'
6285 -6286 6287 0
-6287 6286 0
-6287 -6285 0
c Var 'aux1565' direct represents '2' with '-6286'
6285 6287 -6286 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6288'
c Var 'aux1566' direct represents '0' with '6288'
c Var 'aux1566' order represents '1' with '6289'
-6288 6289 0
c Var 'aux1566' direct represents '1' with '6290'
6288 -6289 6290 0
-6290 6289 0
-6290 -6288 0
c Var 'aux1566' direct represents '2' with '-6289'
6288 6290 -6289 0
c Encoding variable: aux1567 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1566))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6291'
c Var 'aux1567' direct represents '0' with '6291'
c Var 'aux1567' order represents '1' with '6292'
-6291 6292 0
c Var 'aux1567' direct represents '1' with '6293'
6291 -6292 6293 0
-6293 6292 0
-6293 -6291 0
c Var 'aux1567' order represents '2' with '6294'
-6292 6294 0
c Var 'aux1567' direct represents '2' with '6295'
6292 -6294 6295 0
-6295 6294 0
-6295 -6292 0
c Var 'aux1567' direct represents '3' with '-6294'
6291 6293 6295 -6294 0
c Encoding variable: aux1568 with domain: int(0..4) (representing constraint (aux1563 + aux1565))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6296'
c Var 'aux1568' direct represents '0' with '6296'
c Var 'aux1568' order represents '1' with '6297'
-6296 6297 0
c Var 'aux1568' direct represents '1' with '6298'
6296 -6297 6298 0
-6298 6297 0
-6298 -6296 0
c Var 'aux1568' order represents '2' with '6299'
-6297 6299 0
c Var 'aux1568' direct represents '2' with '6300'
6297 -6299 6300 0
-6300 6299 0
-6300 -6297 0
c Var 'aux1568' order represents '3' with '6301'
-6299 6301 0
c Var 'aux1568' direct represents '3' with '6302'
6299 -6301 6302 0
-6302 6301 0
-6302 -6299 0
c Var 'aux1568' direct represents '4' with '-6301'
6296 6298 6300 6302 -6301 0
c Encoding variable: aux1569 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6303'
c Var 'aux1569' direct represents '0' with '6303'
c Var 'aux1569' order represents '1' with '6304'
-6303 6304 0
c Var 'aux1569' direct represents '1' with '6305'
6303 -6304 6305 0
-6305 6304 0
-6305 -6303 0
c Var 'aux1569' direct represents '2' with '-6304'
6303 6305 -6304 0
c Encoding variable: aux1570 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6306'
c Var 'aux1570' direct represents '0' with '6306'
c Var 'aux1570' order represents '1' with '6307'
-6306 6307 0
c Var 'aux1570' direct represents '1' with '6308'
6306 -6307 6308 0
-6308 6307 0
-6308 -6306 0
c Var 'aux1570' direct represents '2' with '-6307'
6306 6308 -6307 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6309'
c Var 'aux1571' direct represents '0' with '6309'
c Var 'aux1571' order represents '1' with '6310'
-6309 6310 0
c Var 'aux1571' direct represents '1' with '6311'
6309 -6310 6311 0
-6311 6310 0
-6311 -6309 0
c Var 'aux1571' direct represents '2' with '-6310'
6309 6311 -6310 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6312'
c Var 'aux1572' direct represents '0' with '6312'
c Var 'aux1572' order represents '1' with '6313'
-6312 6313 0
c Var 'aux1572' direct represents '1' with '6314'
6312 -6313 6314 0
-6314 6313 0
-6314 -6312 0
c Var 'aux1572' direct represents '2' with '-6313'
6312 6314 -6313 0
c Encoding variable: aux1573 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1572))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6315'
c Var 'aux1573' direct represents '0' with '6315'
c Var 'aux1573' order represents '1' with '6316'
-6315 6316 0
c Var 'aux1573' direct represents '1' with '6317'
6315 -6316 6317 0
-6317 6316 0
-6317 -6315 0
c Var 'aux1573' order represents '2' with '6318'
-6316 6318 0
c Var 'aux1573' direct represents '2' with '6319'
6316 -6318 6319 0
-6319 6318 0
-6319 -6316 0
c Var 'aux1573' direct represents '3' with '-6318'
6315 6317 6319 -6318 0
c Encoding variable: aux1574 with domain: int(0..4) (representing constraint (aux1569 + aux1571))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6320'
c Var 'aux1574' direct represents '0' with '6320'
c Var 'aux1574' order represents '1' with '6321'
-6320 6321 0
c Var 'aux1574' direct represents '1' with '6322'
6320 -6321 6322 0
-6322 6321 0
-6322 -6320 0
c Var 'aux1574' order represents '2' with '6323'
-6321 6323 0
c Var 'aux1574' direct represents '2' with '6324'
6321 -6323 6324 0
-6324 6323 0
-6324 -6321 0
c Var 'aux1574' order represents '3' with '6325'
-6323 6325 0
c Var 'aux1574' direct represents '3' with '6326'
6323 -6325 6326 0
-6326 6325 0
-6326 -6323 0
c Var 'aux1574' direct represents '4' with '-6325'
6320 6322 6324 6326 -6325 0
c Encoding variable: aux1575 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6327'
c Var 'aux1575' direct represents '0' with '6327'
c Var 'aux1575' order represents '1' with '6328'
-6327 6328 0
c Var 'aux1575' direct represents '1' with '6329'
6327 -6328 6329 0
-6329 6328 0
-6329 -6327 0
c Var 'aux1575' direct represents '2' with '-6328'
6327 6329 -6328 0
c Encoding variable: aux1576 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6330'
c Var 'aux1576' direct represents '0' with '6330'
c Var 'aux1576' order represents '1' with '6331'
-6330 6331 0
c Var 'aux1576' direct represents '1' with '6332'
6330 -6331 6332 0
-6332 6331 0
-6332 -6330 0
c Var 'aux1576' direct represents '2' with '-6331'
6330 6332 -6331 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6333'
c Var 'aux1577' direct represents '0' with '6333'
c Var 'aux1577' order represents '1' with '6334'
-6333 6334 0
c Var 'aux1577' direct represents '1' with '6335'
6333 -6334 6335 0
-6335 6334 0
-6335 -6333 0
c Var 'aux1577' direct represents '2' with '-6334'
6333 6335 -6334 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6336'
c Var 'aux1578' direct represents '0' with '6336'
c Var 'aux1578' order represents '1' with '6337'
-6336 6337 0
c Var 'aux1578' direct represents '1' with '6338'
6336 -6337 6338 0
-6338 6337 0
-6338 -6336 0
c Var 'aux1578' direct represents '2' with '-6337'
6336 6338 -6337 0
c Encoding variable: aux1579 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1578))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6339'
c Var 'aux1579' direct represents '0' with '6339'
c Var 'aux1579' order represents '1' with '6340'
-6339 6340 0
c Var 'aux1579' direct represents '1' with '6341'
6339 -6340 6341 0
-6341 6340 0
-6341 -6339 0
c Var 'aux1579' order represents '2' with '6342'
-6340 6342 0
c Var 'aux1579' direct represents '2' with '6343'
6340 -6342 6343 0
-6343 6342 0
-6343 -6340 0
c Var 'aux1579' direct represents '3' with '-6342'
6339 6341 6343 -6342 0
c Encoding variable: aux1580 with domain: int(0..4) (representing constraint (aux1575 + aux1577))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6344'
c Var 'aux1580' direct represents '0' with '6344'
c Var 'aux1580' order represents '1' with '6345'
-6344 6345 0
c Var 'aux1580' direct represents '1' with '6346'
6344 -6345 6346 0
-6346 6345 0
-6346 -6344 0
c Var 'aux1580' order represents '2' with '6347'
-6345 6347 0
c Var 'aux1580' direct represents '2' with '6348'
6345 -6347 6348 0
-6348 6347 0
-6348 -6345 0
c Var 'aux1580' order represents '3' with '6349'
-6347 6349 0
c Var 'aux1580' direct represents '3' with '6350'
6347 -6349 6350 0
-6350 6349 0
-6350 -6347 0
c Var 'aux1580' direct represents '4' with '-6349'
6344 6346 6348 6350 -6349 0
c Encoding variable: aux1581 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6351'
c Var 'aux1581' direct represents '0' with '6351'
c Var 'aux1581' order represents '1' with '6352'
-6351 6352 0
c Var 'aux1581' direct represents '1' with '6353'
6351 -6352 6353 0
-6353 6352 0
-6353 -6351 0
c Var 'aux1581' direct represents '2' with '-6352'
6351 6353 -6352 0
c Encoding variable: aux1582 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6354'
c Var 'aux1582' direct represents '0' with '6354'
c Var 'aux1582' order represents '1' with '6355'
-6354 6355 0
c Var 'aux1582' direct represents '1' with '6356'
6354 -6355 6356 0
-6356 6355 0
-6356 -6354 0
c Var 'aux1582' direct represents '2' with '-6355'
6354 6356 -6355 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6357'
c Var 'aux1583' direct represents '0' with '6357'
c Var 'aux1583' order represents '1' with '6358'
-6357 6358 0
c Var 'aux1583' direct represents '1' with '6359'
6357 -6358 6359 0
-6359 6358 0
-6359 -6357 0
c Var 'aux1583' direct represents '2' with '-6358'
6357 6359 -6358 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6360'
c Var 'aux1584' direct represents '0' with '6360'
c Var 'aux1584' order represents '1' with '6361'
-6360 6361 0
c Var 'aux1584' direct represents '1' with '6362'
6360 -6361 6362 0
-6362 6361 0
-6362 -6360 0
c Var 'aux1584' direct represents '2' with '-6361'
6360 6362 -6361 0
c Encoding variable: aux1585 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1584))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6363'
c Var 'aux1585' direct represents '0' with '6363'
c Var 'aux1585' order represents '1' with '6364'
-6363 6364 0
c Var 'aux1585' direct represents '1' with '6365'
6363 -6364 6365 0
-6365 6364 0
-6365 -6363 0
c Var 'aux1585' order represents '2' with '6366'
-6364 6366 0
c Var 'aux1585' direct represents '2' with '6367'
6364 -6366 6367 0
-6367 6366 0
-6367 -6364 0
c Var 'aux1585' direct represents '3' with '-6366'
6363 6365 6367 -6366 0
c Encoding variable: aux1586 with domain: int(0..4) (representing constraint (aux1581 + aux1583))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6368'
c Var 'aux1586' direct represents '0' with '6368'
c Var 'aux1586' order represents '1' with '6369'
-6368 6369 0
c Var 'aux1586' direct represents '1' with '6370'
6368 -6369 6370 0
-6370 6369 0
-6370 -6368 0
c Var 'aux1586' order represents '2' with '6371'
-6369 6371 0
c Var 'aux1586' direct represents '2' with '6372'
6369 -6371 6372 0
-6372 6371 0
-6372 -6369 0
c Var 'aux1586' order represents '3' with '6373'
-6371 6373 0
c Var 'aux1586' direct represents '3' with '6374'
6371 -6373 6374 0
-6374 6373 0
-6374 -6371 0
c Var 'aux1586' direct represents '4' with '-6373'
6368 6370 6372 6374 -6373 0
c Encoding variable: aux1587 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6375'
c Var 'aux1587' direct represents '0' with '6375'
c Var 'aux1587' order represents '1' with '6376'
-6375 6376 0
c Var 'aux1587' direct represents '1' with '6377'
6375 -6376 6377 0
-6377 6376 0
-6377 -6375 0
c Var 'aux1587' direct represents '2' with '-6376'
6375 6377 -6376 0
c Encoding variable: aux1588 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6378'
c Var 'aux1588' direct represents '0' with '6378'
c Var 'aux1588' order represents '1' with '6379'
-6378 6379 0
c Var 'aux1588' direct represents '1' with '6380'
6378 -6379 6380 0
-6380 6379 0
-6380 -6378 0
c Var 'aux1588' direct represents '2' with '-6379'
6378 6380 -6379 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6381'
c Var 'aux1589' direct represents '0' with '6381'
c Var 'aux1589' order represents '1' with '6382'
-6381 6382 0
c Var 'aux1589' direct represents '1' with '6383'
6381 -6382 6383 0
-6383 6382 0
-6383 -6381 0
c Var 'aux1589' direct represents '2' with '-6382'
6381 6383 -6382 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6384'
c Var 'aux1590' direct represents '0' with '6384'
c Var 'aux1590' order represents '1' with '6385'
-6384 6385 0
c Var 'aux1590' direct represents '1' with '6386'
6384 -6385 6386 0
-6386 6385 0
-6386 -6384 0
c Var 'aux1590' direct represents '2' with '-6385'
6384 6386 -6385 0
c Encoding variable: aux1591 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1590))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6387'
c Var 'aux1591' direct represents '0' with '6387'
c Var 'aux1591' order represents '1' with '6388'
-6387 6388 0
c Var 'aux1591' direct represents '1' with '6389'
6387 -6388 6389 0
-6389 6388 0
-6389 -6387 0
c Var 'aux1591' order represents '2' with '6390'
-6388 6390 0
c Var 'aux1591' direct represents '2' with '6391'
6388 -6390 6391 0
-6391 6390 0
-6391 -6388 0
c Var 'aux1591' direct represents '3' with '-6390'
6387 6389 6391 -6390 0
c Encoding variable: aux1592 with domain: int(0..4) (representing constraint (aux1587 + aux1589))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6392'
c Var 'aux1592' direct represents '0' with '6392'
c Var 'aux1592' order represents '1' with '6393'
-6392 6393 0
c Var 'aux1592' direct represents '1' with '6394'
6392 -6393 6394 0
-6394 6393 0
-6394 -6392 0
c Var 'aux1592' order represents '2' with '6395'
-6393 6395 0
c Var 'aux1592' direct represents '2' with '6396'
6393 -6395 6396 0
-6396 6395 0
-6396 -6393 0
c Var 'aux1592' order represents '3' with '6397'
-6395 6397 0
c Var 'aux1592' direct represents '3' with '6398'
6395 -6397 6398 0
-6398 6397 0
-6398 -6395 0
c Var 'aux1592' direct represents '4' with '-6397'
6392 6394 6396 6398 -6397 0
c Encoding variable: aux1593 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6399'
c Var 'aux1593' direct represents '0' with '6399'
c Var 'aux1593' order represents '1' with '6400'
-6399 6400 0
c Var 'aux1593' direct represents '1' with '6401'
6399 -6400 6401 0
-6401 6400 0
-6401 -6399 0
c Var 'aux1593' direct represents '2' with '-6400'
6399 6401 -6400 0
c Encoding variable: aux1594 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6402'
c Var 'aux1594' direct represents '0' with '6402'
c Var 'aux1594' order represents '1' with '6403'
-6402 6403 0
c Var 'aux1594' direct represents '1' with '6404'
6402 -6403 6404 0
-6404 6403 0
-6404 -6402 0
c Var 'aux1594' direct represents '2' with '-6403'
6402 6404 -6403 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6405'
c Var 'aux1595' direct represents '0' with '6405'
c Var 'aux1595' order represents '1' with '6406'
-6405 6406 0
c Var 'aux1595' direct represents '1' with '6407'
6405 -6406 6407 0
-6407 6406 0
-6407 -6405 0
c Var 'aux1595' direct represents '2' with '-6406'
6405 6407 -6406 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6408'
c Var 'aux1596' direct represents '0' with '6408'
c Var 'aux1596' order represents '1' with '6409'
-6408 6409 0
c Var 'aux1596' direct represents '1' with '6410'
6408 -6409 6410 0
-6410 6409 0
-6410 -6408 0
c Var 'aux1596' direct represents '2' with '-6409'
6408 6410 -6409 0
c Encoding variable: aux1597 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1596))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6411'
c Var 'aux1597' direct represents '0' with '6411'
c Var 'aux1597' order represents '1' with '6412'
-6411 6412 0
c Var 'aux1597' direct represents '1' with '6413'
6411 -6412 6413 0
-6413 6412 0
-6413 -6411 0
c Var 'aux1597' order represents '2' with '6414'
-6412 6414 0
c Var 'aux1597' direct represents '2' with '6415'
6412 -6414 6415 0
-6415 6414 0
-6415 -6412 0
c Var 'aux1597' direct represents '3' with '-6414'
6411 6413 6415 -6414 0
c Encoding variable: aux1598 with domain: int(0..4) (representing constraint (aux1593 + aux1595))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6416'
c Var 'aux1598' direct represents '0' with '6416'
c Var 'aux1598' order represents '1' with '6417'
-6416 6417 0
c Var 'aux1598' direct represents '1' with '6418'
6416 -6417 6418 0
-6418 6417 0
-6418 -6416 0
c Var 'aux1598' order represents '2' with '6419'
-6417 6419 0
c Var 'aux1598' direct represents '2' with '6420'
6417 -6419 6420 0
-6420 6419 0
-6420 -6417 0
c Var 'aux1598' order represents '3' with '6421'
-6419 6421 0
c Var 'aux1598' direct represents '3' with '6422'
6419 -6421 6422 0
-6422 6421 0
-6422 -6419 0
c Var 'aux1598' direct represents '4' with '-6421'
6416 6418 6420 6422 -6421 0
c Encoding variable: aux1599 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6423'
c Var 'aux1599' direct represents '0' with '6423'
c Var 'aux1599' order represents '1' with '6424'
-6423 6424 0
c Var 'aux1599' direct represents '1' with '6425'
6423 -6424 6425 0
-6425 6424 0
-6425 -6423 0
c Var 'aux1599' direct represents '2' with '-6424'
6423 6425 -6424 0
c Encoding variable: aux1600 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6426'
c Var 'aux1600' direct represents '0' with '6426'
c Var 'aux1600' order represents '1' with '6427'
-6426 6427 0
c Var 'aux1600' direct represents '1' with '6428'
6426 -6427 6428 0
-6428 6427 0
-6428 -6426 0
c Var 'aux1600' direct represents '2' with '-6427'
6426 6428 -6427 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6429'
c Var 'aux1601' direct represents '0' with '6429'
c Var 'aux1601' order represents '1' with '6430'
-6429 6430 0
c Var 'aux1601' direct represents '1' with '6431'
6429 -6430 6431 0
-6431 6430 0
-6431 -6429 0
c Var 'aux1601' direct represents '2' with '-6430'
6429 6431 -6430 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6432'
c Var 'aux1602' direct represents '0' with '6432'
c Var 'aux1602' order represents '1' with '6433'
-6432 6433 0
c Var 'aux1602' direct represents '1' with '6434'
6432 -6433 6434 0
-6434 6433 0
-6434 -6432 0
c Var 'aux1602' direct represents '2' with '-6433'
6432 6434 -6433 0
c Encoding variable: aux1603 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1602))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6435'
c Var 'aux1603' direct represents '0' with '6435'
c Var 'aux1603' order represents '1' with '6436'
-6435 6436 0
c Var 'aux1603' direct represents '1' with '6437'
6435 -6436 6437 0
-6437 6436 0
-6437 -6435 0
c Var 'aux1603' order represents '2' with '6438'
-6436 6438 0
c Var 'aux1603' direct represents '2' with '6439'
6436 -6438 6439 0
-6439 6438 0
-6439 -6436 0
c Var 'aux1603' direct represents '3' with '-6438'
6435 6437 6439 -6438 0
c Encoding variable: aux1604 with domain: int(0..4) (representing constraint (aux1599 + aux1601))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6440'
c Var 'aux1604' direct represents '0' with '6440'
c Var 'aux1604' order represents '1' with '6441'
-6440 6441 0
c Var 'aux1604' direct represents '1' with '6442'
6440 -6441 6442 0
-6442 6441 0
-6442 -6440 0
c Var 'aux1604' order represents '2' with '6443'
-6441 6443 0
c Var 'aux1604' direct represents '2' with '6444'
6441 -6443 6444 0
-6444 6443 0
-6444 -6441 0
c Var 'aux1604' order represents '3' with '6445'
-6443 6445 0
c Var 'aux1604' direct represents '3' with '6446'
6443 -6445 6446 0
-6446 6445 0
-6446 -6443 0
c Var 'aux1604' direct represents '4' with '-6445'
6440 6442 6444 6446 -6445 0
c Encoding variable: aux1605 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6447'
c Var 'aux1605' direct represents '0' with '6447'
c Var 'aux1605' order represents '1' with '6448'
-6447 6448 0
c Var 'aux1605' direct represents '1' with '6449'
6447 -6448 6449 0
-6449 6448 0
-6449 -6447 0
c Var 'aux1605' direct represents '2' with '-6448'
6447 6449 -6448 0
c Encoding variable: aux1606 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6450'
c Var 'aux1606' direct represents '0' with '6450'
c Var 'aux1606' order represents '1' with '6451'
-6450 6451 0
c Var 'aux1606' direct represents '1' with '6452'
6450 -6451 6452 0
-6452 6451 0
-6452 -6450 0
c Var 'aux1606' direct represents '2' with '-6451'
6450 6452 -6451 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6453'
c Var 'aux1607' direct represents '0' with '6453'
c Var 'aux1607' order represents '1' with '6454'
-6453 6454 0
c Var 'aux1607' direct represents '1' with '6455'
6453 -6454 6455 0
-6455 6454 0
-6455 -6453 0
c Var 'aux1607' direct represents '2' with '-6454'
6453 6455 -6454 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6456'
c Var 'aux1608' direct represents '0' with '6456'
c Var 'aux1608' order represents '1' with '6457'
-6456 6457 0
c Var 'aux1608' direct represents '1' with '6458'
6456 -6457 6458 0
-6458 6457 0
-6458 -6456 0
c Var 'aux1608' direct represents '2' with '-6457'
6456 6458 -6457 0
c Encoding variable: aux1609 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1608))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6459'
c Var 'aux1609' direct represents '0' with '6459'
c Var 'aux1609' order represents '1' with '6460'
-6459 6460 0
c Var 'aux1609' direct represents '1' with '6461'
6459 -6460 6461 0
-6461 6460 0
-6461 -6459 0
c Var 'aux1609' order represents '2' with '6462'
-6460 6462 0
c Var 'aux1609' direct represents '2' with '6463'
6460 -6462 6463 0
-6463 6462 0
-6463 -6460 0
c Var 'aux1609' direct represents '3' with '-6462'
6459 6461 6463 -6462 0
c Encoding variable: aux1610 with domain: int(0..4) (representing constraint (aux1605 + aux1607))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6464'
c Var 'aux1610' direct represents '0' with '6464'
c Var 'aux1610' order represents '1' with '6465'
-6464 6465 0
c Var 'aux1610' direct represents '1' with '6466'
6464 -6465 6466 0
-6466 6465 0
-6466 -6464 0
c Var 'aux1610' order represents '2' with '6467'
-6465 6467 0
c Var 'aux1610' direct represents '2' with '6468'
6465 -6467 6468 0
-6468 6467 0
-6468 -6465 0
c Var 'aux1610' order represents '3' with '6469'
-6467 6469 0
c Var 'aux1610' direct represents '3' with '6470'
6467 -6469 6470 0
-6470 6469 0
-6470 -6467 0
c Var 'aux1610' direct represents '4' with '-6469'
6464 6466 6468 6470 -6469 0
c Encoding variable: aux1611 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6471'
c Var 'aux1611' direct represents '0' with '6471'
c Var 'aux1611' order represents '1' with '6472'
-6471 6472 0
c Var 'aux1611' direct represents '1' with '6473'
6471 -6472 6473 0
-6473 6472 0
-6473 -6471 0
c Var 'aux1611' direct represents '2' with '-6472'
6471 6473 -6472 0
c Encoding variable: aux1612 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6474'
c Var 'aux1612' direct represents '0' with '6474'
c Var 'aux1612' order represents '1' with '6475'
-6474 6475 0
c Var 'aux1612' direct represents '1' with '6476'
6474 -6475 6476 0
-6476 6475 0
-6476 -6474 0
c Var 'aux1612' direct represents '2' with '-6475'
6474 6476 -6475 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6477'
c Var 'aux1613' direct represents '0' with '6477'
c Var 'aux1613' order represents '1' with '6478'
-6477 6478 0
c Var 'aux1613' direct represents '1' with '6479'
6477 -6478 6479 0
-6479 6478 0
-6479 -6477 0
c Var 'aux1613' direct represents '2' with '-6478'
6477 6479 -6478 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6480'
c Var 'aux1614' direct represents '0' with '6480'
c Var 'aux1614' order represents '1' with '6481'
-6480 6481 0
c Var 'aux1614' direct represents '1' with '6482'
6480 -6481 6482 0
-6482 6481 0
-6482 -6480 0
c Var 'aux1614' direct represents '2' with '-6481'
6480 6482 -6481 0
c Encoding variable: aux1615 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1614))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6483'
c Var 'aux1615' direct represents '0' with '6483'
c Var 'aux1615' order represents '1' with '6484'
-6483 6484 0
c Var 'aux1615' direct represents '1' with '6485'
6483 -6484 6485 0
-6485 6484 0
-6485 -6483 0
c Var 'aux1615' order represents '2' with '6486'
-6484 6486 0
c Var 'aux1615' direct represents '2' with '6487'
6484 -6486 6487 0
-6487 6486 0
-6487 -6484 0
c Var 'aux1615' direct represents '3' with '-6486'
6483 6485 6487 -6486 0
c Encoding variable: aux1616 with domain: int(0..4) (representing constraint (aux1611 + aux1613))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6488'
c Var 'aux1616' direct represents '0' with '6488'
c Var 'aux1616' order represents '1' with '6489'
-6488 6489 0
c Var 'aux1616' direct represents '1' with '6490'
6488 -6489 6490 0
-6490 6489 0
-6490 -6488 0
c Var 'aux1616' order represents '2' with '6491'
-6489 6491 0
c Var 'aux1616' direct represents '2' with '6492'
6489 -6491 6492 0
-6492 6491 0
-6492 -6489 0
c Var 'aux1616' order represents '3' with '6493'
-6491 6493 0
c Var 'aux1616' direct represents '3' with '6494'
6491 -6493 6494 0
-6494 6493 0
-6494 -6491 0
c Var 'aux1616' direct represents '4' with '-6493'
6488 6490 6492 6494 -6493 0
c Encoding variable: aux1617 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6495'
c Var 'aux1617' direct represents '0' with '6495'
c Var 'aux1617' order represents '1' with '6496'
-6495 6496 0
c Var 'aux1617' direct represents '1' with '6497'
6495 -6496 6497 0
-6497 6496 0
-6497 -6495 0
c Var 'aux1617' direct represents '2' with '-6496'
6495 6497 -6496 0
c Encoding variable: aux1618 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6498'
c Var 'aux1618' direct represents '0' with '6498'
c Var 'aux1618' order represents '1' with '6499'
-6498 6499 0
c Var 'aux1618' direct represents '1' with '6500'
6498 -6499 6500 0
-6500 6499 0
-6500 -6498 0
c Var 'aux1618' direct represents '2' with '-6499'
6498 6500 -6499 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6501'
c Var 'aux1619' direct represents '0' with '6501'
c Var 'aux1619' order represents '1' with '6502'
-6501 6502 0
c Var 'aux1619' direct represents '1' with '6503'
6501 -6502 6503 0
-6503 6502 0
-6503 -6501 0
c Var 'aux1619' direct represents '2' with '-6502'
6501 6503 -6502 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6504'
c Var 'aux1620' direct represents '0' with '6504'
c Var 'aux1620' order represents '1' with '6505'
-6504 6505 0
c Var 'aux1620' direct represents '1' with '6506'
6504 -6505 6506 0
-6506 6505 0
-6506 -6504 0
c Var 'aux1620' direct represents '2' with '-6505'
6504 6506 -6505 0
c Encoding variable: aux1621 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1620))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6507'
c Var 'aux1621' direct represents '0' with '6507'
c Var 'aux1621' order represents '1' with '6508'
-6507 6508 0
c Var 'aux1621' direct represents '1' with '6509'
6507 -6508 6509 0
-6509 6508 0
-6509 -6507 0
c Var 'aux1621' order represents '2' with '6510'
-6508 6510 0
c Var 'aux1621' direct represents '2' with '6511'
6508 -6510 6511 0
-6511 6510 0
-6511 -6508 0
c Var 'aux1621' direct represents '3' with '-6510'
6507 6509 6511 -6510 0
c Encoding variable: aux1622 with domain: int(0..4) (representing constraint (aux1617 + aux1619))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6512'
c Var 'aux1622' direct represents '0' with '6512'
c Var 'aux1622' order represents '1' with '6513'
-6512 6513 0
c Var 'aux1622' direct represents '1' with '6514'
6512 -6513 6514 0
-6514 6513 0
-6514 -6512 0
c Var 'aux1622' order represents '2' with '6515'
-6513 6515 0
c Var 'aux1622' direct represents '2' with '6516'
6513 -6515 6516 0
-6516 6515 0
-6516 -6513 0
c Var 'aux1622' order represents '3' with '6517'
-6515 6517 0
c Var 'aux1622' direct represents '3' with '6518'
6515 -6517 6518 0
-6518 6517 0
-6518 -6515 0
c Var 'aux1622' direct represents '4' with '-6517'
6512 6514 6516 6518 -6517 0
c Encoding variable: aux1623 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6519'
c Var 'aux1623' direct represents '0' with '6519'
c Var 'aux1623' order represents '1' with '6520'
-6519 6520 0
c Var 'aux1623' direct represents '1' with '6521'
6519 -6520 6521 0
-6521 6520 0
-6521 -6519 0
c Var 'aux1623' direct represents '2' with '-6520'
6519 6521 -6520 0
c Encoding variable: aux1624 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6522'
c Var 'aux1624' direct represents '0' with '6522'
c Var 'aux1624' order represents '1' with '6523'
-6522 6523 0
c Var 'aux1624' direct represents '1' with '6524'
6522 -6523 6524 0
-6524 6523 0
-6524 -6522 0
c Var 'aux1624' direct represents '2' with '-6523'
6522 6524 -6523 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6525'
c Var 'aux1625' direct represents '0' with '6525'
c Var 'aux1625' order represents '1' with '6526'
-6525 6526 0
c Var 'aux1625' direct represents '1' with '6527'
6525 -6526 6527 0
-6527 6526 0
-6527 -6525 0
c Var 'aux1625' direct represents '2' with '-6526'
6525 6527 -6526 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6528'
c Var 'aux1626' direct represents '0' with '6528'
c Var 'aux1626' order represents '1' with '6529'
-6528 6529 0
c Var 'aux1626' direct represents '1' with '6530'
6528 -6529 6530 0
-6530 6529 0
-6530 -6528 0
c Var 'aux1626' direct represents '2' with '-6529'
6528 6530 -6529 0
c Encoding variable: aux1627 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1626))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6531'
c Var 'aux1627' direct represents '0' with '6531'
c Var 'aux1627' order represents '1' with '6532'
-6531 6532 0
c Var 'aux1627' direct represents '1' with '6533'
6531 -6532 6533 0
-6533 6532 0
-6533 -6531 0
c Var 'aux1627' order represents '2' with '6534'
-6532 6534 0
c Var 'aux1627' direct represents '2' with '6535'
6532 -6534 6535 0
-6535 6534 0
-6535 -6532 0
c Var 'aux1627' direct represents '3' with '-6534'
6531 6533 6535 -6534 0
c Encoding variable: aux1628 with domain: int(0..4) (representing constraint (aux1623 + aux1625))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6536'
c Var 'aux1628' direct represents '0' with '6536'
c Var 'aux1628' order represents '1' with '6537'
-6536 6537 0
c Var 'aux1628' direct represents '1' with '6538'
6536 -6537 6538 0
-6538 6537 0
-6538 -6536 0
c Var 'aux1628' order represents '2' with '6539'
-6537 6539 0
c Var 'aux1628' direct represents '2' with '6540'
6537 -6539 6540 0
-6540 6539 0
-6540 -6537 0
c Var 'aux1628' order represents '3' with '6541'
-6539 6541 0
c Var 'aux1628' direct represents '3' with '6542'
6539 -6541 6542 0
-6542 6541 0
-6542 -6539 0
c Var 'aux1628' direct represents '4' with '-6541'
6536 6538 6540 6542 -6541 0
c Encoding variable: aux1629 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6543'
c Var 'aux1629' direct represents '0' with '6543'
c Var 'aux1629' order represents '1' with '6544'
-6543 6544 0
c Var 'aux1629' direct represents '1' with '6545'
6543 -6544 6545 0
-6545 6544 0
-6545 -6543 0
c Var 'aux1629' direct represents '2' with '-6544'
6543 6545 -6544 0
c Encoding variable: aux1630 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6546'
c Var 'aux1630' direct represents '0' with '6546'
c Var 'aux1630' order represents '1' with '6547'
-6546 6547 0
c Var 'aux1630' direct represents '1' with '6548'
6546 -6547 6548 0
-6548 6547 0
-6548 -6546 0
c Var 'aux1630' direct represents '2' with '-6547'
6546 6548 -6547 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6549'
c Var 'aux1631' direct represents '0' with '6549'
c Var 'aux1631' order represents '1' with '6550'
-6549 6550 0
c Var 'aux1631' direct represents '1' with '6551'
6549 -6550 6551 0
-6551 6550 0
-6551 -6549 0
c Var 'aux1631' direct represents '2' with '-6550'
6549 6551 -6550 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6552'
c Var 'aux1632' direct represents '0' with '6552'
c Var 'aux1632' order represents '1' with '6553'
-6552 6553 0
c Var 'aux1632' direct represents '1' with '6554'
6552 -6553 6554 0
-6554 6553 0
-6554 -6552 0
c Var 'aux1632' direct represents '2' with '-6553'
6552 6554 -6553 0
c Encoding variable: aux1633 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1632))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6555'
c Var 'aux1633' direct represents '0' with '6555'
c Var 'aux1633' order represents '1' with '6556'
-6555 6556 0
c Var 'aux1633' direct represents '1' with '6557'
6555 -6556 6557 0
-6557 6556 0
-6557 -6555 0
c Var 'aux1633' order represents '2' with '6558'
-6556 6558 0
c Var 'aux1633' direct represents '2' with '6559'
6556 -6558 6559 0
-6559 6558 0
-6559 -6556 0
c Var 'aux1633' direct represents '3' with '-6558'
6555 6557 6559 -6558 0
c Encoding variable: aux1634 with domain: int(0..4) (representing constraint (aux1629 + aux1631))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6560'
c Var 'aux1634' direct represents '0' with '6560'
c Var 'aux1634' order represents '1' with '6561'
-6560 6561 0
c Var 'aux1634' direct represents '1' with '6562'
6560 -6561 6562 0
-6562 6561 0
-6562 -6560 0
c Var 'aux1634' order represents '2' with '6563'
-6561 6563 0
c Var 'aux1634' direct represents '2' with '6564'
6561 -6563 6564 0
-6564 6563 0
-6564 -6561 0
c Var 'aux1634' order represents '3' with '6565'
-6563 6565 0
c Var 'aux1634' direct represents '3' with '6566'
6563 -6565 6566 0
-6566 6565 0
-6566 -6563 0
c Var 'aux1634' direct represents '4' with '-6565'
6560 6562 6564 6566 -6565 0
c Encoding variable: aux1635 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6567'
c Var 'aux1635' direct represents '0' with '6567'
c Var 'aux1635' order represents '1' with '6568'
-6567 6568 0
c Var 'aux1635' direct represents '1' with '6569'
6567 -6568 6569 0
-6569 6568 0
-6569 -6567 0
c Var 'aux1635' direct represents '2' with '-6568'
6567 6569 -6568 0
c Encoding variable: aux1636 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6570'
c Var 'aux1636' direct represents '0' with '6570'
c Var 'aux1636' order represents '1' with '6571'
-6570 6571 0
c Var 'aux1636' direct represents '1' with '6572'
6570 -6571 6572 0
-6572 6571 0
-6572 -6570 0
c Var 'aux1636' direct represents '2' with '-6571'
6570 6572 -6571 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6573'
c Var 'aux1637' direct represents '0' with '6573'
c Var 'aux1637' order represents '1' with '6574'
-6573 6574 0
c Var 'aux1637' direct represents '1' with '6575'
6573 -6574 6575 0
-6575 6574 0
-6575 -6573 0
c Var 'aux1637' direct represents '2' with '-6574'
6573 6575 -6574 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6576'
c Var 'aux1638' direct represents '0' with '6576'
c Var 'aux1638' order represents '1' with '6577'
-6576 6577 0
c Var 'aux1638' direct represents '1' with '6578'
6576 -6577 6578 0
-6578 6577 0
-6578 -6576 0
c Var 'aux1638' direct represents '2' with '-6577'
6576 6578 -6577 0
c Encoding variable: aux1639 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1638))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6579'
c Var 'aux1639' direct represents '0' with '6579'
c Var 'aux1639' order represents '1' with '6580'
-6579 6580 0
c Var 'aux1639' direct represents '1' with '6581'
6579 -6580 6581 0
-6581 6580 0
-6581 -6579 0
c Var 'aux1639' order represents '2' with '6582'
-6580 6582 0
c Var 'aux1639' direct represents '2' with '6583'
6580 -6582 6583 0
-6583 6582 0
-6583 -6580 0
c Var 'aux1639' direct represents '3' with '-6582'
6579 6581 6583 -6582 0
c Encoding variable: aux1640 with domain: int(0..4) (representing constraint (aux1635 + aux1637))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6584'
c Var 'aux1640' direct represents '0' with '6584'
c Var 'aux1640' order represents '1' with '6585'
-6584 6585 0
c Var 'aux1640' direct represents '1' with '6586'
6584 -6585 6586 0
-6586 6585 0
-6586 -6584 0
c Var 'aux1640' order represents '2' with '6587'
-6585 6587 0
c Var 'aux1640' direct represents '2' with '6588'
6585 -6587 6588 0
-6588 6587 0
-6588 -6585 0
c Var 'aux1640' order represents '3' with '6589'
-6587 6589 0
c Var 'aux1640' direct represents '3' with '6590'
6587 -6589 6590 0
-6590 6589 0
-6590 -6587 0
c Var 'aux1640' direct represents '4' with '-6589'
6584 6586 6588 6590 -6589 0
c Encoding variable: aux1641 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6591'
c Var 'aux1641' direct represents '0' with '6591'
c Var 'aux1641' order represents '1' with '6592'
-6591 6592 0
c Var 'aux1641' direct represents '1' with '6593'
6591 -6592 6593 0
-6593 6592 0
-6593 -6591 0
c Var 'aux1641' direct represents '2' with '-6592'
6591 6593 -6592 0
c Encoding variable: aux1642 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6594'
c Var 'aux1642' direct represents '0' with '6594'
c Var 'aux1642' order represents '1' with '6595'
-6594 6595 0
c Var 'aux1642' direct represents '1' with '6596'
6594 -6595 6596 0
-6596 6595 0
-6596 -6594 0
c Var 'aux1642' direct represents '2' with '-6595'
6594 6596 -6595 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6597'
c Var 'aux1643' direct represents '0' with '6597'
c Var 'aux1643' order represents '1' with '6598'
-6597 6598 0
c Var 'aux1643' direct represents '1' with '6599'
6597 -6598 6599 0
-6599 6598 0
-6599 -6597 0
c Var 'aux1643' direct represents '2' with '-6598'
6597 6599 -6598 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6600'
c Var 'aux1644' direct represents '0' with '6600'
c Var 'aux1644' order represents '1' with '6601'
-6600 6601 0
c Var 'aux1644' direct represents '1' with '6602'
6600 -6601 6602 0
-6602 6601 0
-6602 -6600 0
c Var 'aux1644' direct represents '2' with '-6601'
6600 6602 -6601 0
c Encoding variable: aux1645 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1644))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6603'
c Var 'aux1645' direct represents '0' with '6603'
c Var 'aux1645' order represents '1' with '6604'
-6603 6604 0
c Var 'aux1645' direct represents '1' with '6605'
6603 -6604 6605 0
-6605 6604 0
-6605 -6603 0
c Var 'aux1645' order represents '2' with '6606'
-6604 6606 0
c Var 'aux1645' direct represents '2' with '6607'
6604 -6606 6607 0
-6607 6606 0
-6607 -6604 0
c Var 'aux1645' direct represents '3' with '-6606'
6603 6605 6607 -6606 0
c Encoding variable: aux1646 with domain: int(0..4) (representing constraint (aux1641 + aux1643))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6608'
c Var 'aux1646' direct represents '0' with '6608'
c Var 'aux1646' order represents '1' with '6609'
-6608 6609 0
c Var 'aux1646' direct represents '1' with '6610'
6608 -6609 6610 0
-6610 6609 0
-6610 -6608 0
c Var 'aux1646' order represents '2' with '6611'
-6609 6611 0
c Var 'aux1646' direct represents '2' with '6612'
6609 -6611 6612 0
-6612 6611 0
-6612 -6609 0
c Var 'aux1646' order represents '3' with '6613'
-6611 6613 0
c Var 'aux1646' direct represents '3' with '6614'
6611 -6613 6614 0
-6614 6613 0
-6614 -6611 0
c Var 'aux1646' direct represents '4' with '-6613'
6608 6610 6612 6614 -6613 0
c Encoding variable: aux1647 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6615'
c Var 'aux1647' direct represents '0' with '6615'
c Var 'aux1647' order represents '1' with '6616'
-6615 6616 0
c Var 'aux1647' direct represents '1' with '6617'
6615 -6616 6617 0
-6617 6616 0
-6617 -6615 0
c Var 'aux1647' direct represents '2' with '-6616'
6615 6617 -6616 0
c Encoding variable: aux1648 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6618'
c Var 'aux1648' direct represents '0' with '6618'
c Var 'aux1648' order represents '1' with '6619'
-6618 6619 0
c Var 'aux1648' direct represents '1' with '6620'
6618 -6619 6620 0
-6620 6619 0
-6620 -6618 0
c Var 'aux1648' direct represents '2' with '-6619'
6618 6620 -6619 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6621'
c Var 'aux1649' direct represents '0' with '6621'
c Var 'aux1649' order represents '1' with '6622'
-6621 6622 0
c Var 'aux1649' direct represents '1' with '6623'
6621 -6622 6623 0
-6623 6622 0
-6623 -6621 0
c Var 'aux1649' direct represents '2' with '-6622'
6621 6623 -6622 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6624'
c Var 'aux1650' direct represents '0' with '6624'
c Var 'aux1650' order represents '1' with '6625'
-6624 6625 0
c Var 'aux1650' direct represents '1' with '6626'
6624 -6625 6626 0
-6626 6625 0
-6626 -6624 0
c Var 'aux1650' direct represents '2' with '-6625'
6624 6626 -6625 0
c Encoding variable: aux1651 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1650))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6627'
c Var 'aux1651' direct represents '0' with '6627'
c Var 'aux1651' order represents '1' with '6628'
-6627 6628 0
c Var 'aux1651' direct represents '1' with '6629'
6627 -6628 6629 0
-6629 6628 0
-6629 -6627 0
c Var 'aux1651' order represents '2' with '6630'
-6628 6630 0
c Var 'aux1651' direct represents '2' with '6631'
6628 -6630 6631 0
-6631 6630 0
-6631 -6628 0
c Var 'aux1651' direct represents '3' with '-6630'
6627 6629 6631 -6630 0
c Encoding variable: aux1652 with domain: int(0..4) (representing constraint (aux1647 + aux1649))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6632'
c Var 'aux1652' direct represents '0' with '6632'
c Var 'aux1652' order represents '1' with '6633'
-6632 6633 0
c Var 'aux1652' direct represents '1' with '6634'
6632 -6633 6634 0
-6634 6633 0
-6634 -6632 0
c Var 'aux1652' order represents '2' with '6635'
-6633 6635 0
c Var 'aux1652' direct represents '2' with '6636'
6633 -6635 6636 0
-6636 6635 0
-6636 -6633 0
c Var 'aux1652' order represents '3' with '6637'
-6635 6637 0
c Var 'aux1652' direct represents '3' with '6638'
6635 -6637 6638 0
-6638 6637 0
-6638 -6635 0
c Var 'aux1652' direct represents '4' with '-6637'
6632 6634 6636 6638 -6637 0
c Encoding variable: aux1653 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6639'
c Var 'aux1653' direct represents '0' with '6639'
c Var 'aux1653' order represents '1' with '6640'
-6639 6640 0
c Var 'aux1653' direct represents '1' with '6641'
6639 -6640 6641 0
-6641 6640 0
-6641 -6639 0
c Var 'aux1653' direct represents '2' with '-6640'
6639 6641 -6640 0
c Encoding variable: aux1654 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6642'
c Var 'aux1654' direct represents '0' with '6642'
c Var 'aux1654' order represents '1' with '6643'
-6642 6643 0
c Var 'aux1654' direct represents '1' with '6644'
6642 -6643 6644 0
-6644 6643 0
-6644 -6642 0
c Var 'aux1654' direct represents '2' with '-6643'
6642 6644 -6643 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6645'
c Var 'aux1655' direct represents '0' with '6645'
c Var 'aux1655' order represents '1' with '6646'
-6645 6646 0
c Var 'aux1655' direct represents '1' with '6647'
6645 -6646 6647 0
-6647 6646 0
-6647 -6645 0
c Var 'aux1655' direct represents '2' with '-6646'
6645 6647 -6646 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6648'
c Var 'aux1656' direct represents '0' with '6648'
c Var 'aux1656' order represents '1' with '6649'
-6648 6649 0
c Var 'aux1656' direct represents '1' with '6650'
6648 -6649 6650 0
-6650 6649 0
-6650 -6648 0
c Var 'aux1656' direct represents '2' with '-6649'
6648 6650 -6649 0
c Encoding variable: aux1657 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1656))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6651'
c Var 'aux1657' direct represents '0' with '6651'
c Var 'aux1657' order represents '1' with '6652'
-6651 6652 0
c Var 'aux1657' direct represents '1' with '6653'
6651 -6652 6653 0
-6653 6652 0
-6653 -6651 0
c Var 'aux1657' order represents '2' with '6654'
-6652 6654 0
c Var 'aux1657' direct represents '2' with '6655'
6652 -6654 6655 0
-6655 6654 0
-6655 -6652 0
c Var 'aux1657' direct represents '3' with '-6654'
6651 6653 6655 -6654 0
c Encoding variable: aux1658 with domain: int(0..4) (representing constraint (aux1653 + aux1655))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6656'
c Var 'aux1658' direct represents '0' with '6656'
c Var 'aux1658' order represents '1' with '6657'
-6656 6657 0
c Var 'aux1658' direct represents '1' with '6658'
6656 -6657 6658 0
-6658 6657 0
-6658 -6656 0
c Var 'aux1658' order represents '2' with '6659'
-6657 6659 0
c Var 'aux1658' direct represents '2' with '6660'
6657 -6659 6660 0
-6660 6659 0
-6660 -6657 0
c Var 'aux1658' order represents '3' with '6661'
-6659 6661 0
c Var 'aux1658' direct represents '3' with '6662'
6659 -6661 6662 0
-6662 6661 0
-6662 -6659 0
c Var 'aux1658' direct represents '4' with '-6661'
6656 6658 6660 6662 -6661 0
c Encoding variable: aux1659 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6663'
c Var 'aux1659' direct represents '0' with '6663'
c Var 'aux1659' order represents '1' with '6664'
-6663 6664 0
c Var 'aux1659' direct represents '1' with '6665'
6663 -6664 6665 0
-6665 6664 0
-6665 -6663 0
c Var 'aux1659' direct represents '2' with '-6664'
6663 6665 -6664 0
c Encoding variable: aux1660 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6666'
c Var 'aux1660' direct represents '0' with '6666'
c Var 'aux1660' order represents '1' with '6667'
-6666 6667 0
c Var 'aux1660' direct represents '1' with '6668'
6666 -6667 6668 0
-6668 6667 0
-6668 -6666 0
c Var 'aux1660' direct represents '2' with '-6667'
6666 6668 -6667 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6669'
c Var 'aux1661' direct represents '0' with '6669'
c Var 'aux1661' order represents '1' with '6670'
-6669 6670 0
c Var 'aux1661' direct represents '1' with '6671'
6669 -6670 6671 0
-6671 6670 0
-6671 -6669 0
c Var 'aux1661' direct represents '2' with '-6670'
6669 6671 -6670 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6672'
c Var 'aux1662' direct represents '0' with '6672'
c Var 'aux1662' order represents '1' with '6673'
-6672 6673 0
c Var 'aux1662' direct represents '1' with '6674'
6672 -6673 6674 0
-6674 6673 0
-6674 -6672 0
c Var 'aux1662' direct represents '2' with '-6673'
6672 6674 -6673 0
c Encoding variable: aux1663 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1662))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6675'
c Var 'aux1663' direct represents '0' with '6675'
c Var 'aux1663' order represents '1' with '6676'
-6675 6676 0
c Var 'aux1663' direct represents '1' with '6677'
6675 -6676 6677 0
-6677 6676 0
-6677 -6675 0
c Var 'aux1663' order represents '2' with '6678'
-6676 6678 0
c Var 'aux1663' direct represents '2' with '6679'
6676 -6678 6679 0
-6679 6678 0
-6679 -6676 0
c Var 'aux1663' direct represents '3' with '-6678'
6675 6677 6679 -6678 0
c Encoding variable: aux1664 with domain: int(0..4) (representing constraint (aux1659 + aux1661))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6680'
c Var 'aux1664' direct represents '0' with '6680'
c Var 'aux1664' order represents '1' with '6681'
-6680 6681 0
c Var 'aux1664' direct represents '1' with '6682'
6680 -6681 6682 0
-6682 6681 0
-6682 -6680 0
c Var 'aux1664' order represents '2' with '6683'
-6681 6683 0
c Var 'aux1664' direct represents '2' with '6684'
6681 -6683 6684 0
-6684 6683 0
-6684 -6681 0
c Var 'aux1664' order represents '3' with '6685'
-6683 6685 0
c Var 'aux1664' direct represents '3' with '6686'
6683 -6685 6686 0
-6686 6685 0
-6686 -6683 0
c Var 'aux1664' direct represents '4' with '-6685'
6680 6682 6684 6686 -6685 0
c Encoding variable: aux1665 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6687'
c Var 'aux1665' direct represents '0' with '6687'
c Var 'aux1665' order represents '1' with '6688'
-6687 6688 0
c Var 'aux1665' direct represents '1' with '6689'
6687 -6688 6689 0
-6689 6688 0
-6689 -6687 0
c Var 'aux1665' direct represents '2' with '-6688'
6687 6689 -6688 0
c Encoding variable: aux1666 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6690'
c Var 'aux1666' direct represents '0' with '6690'
c Var 'aux1666' order represents '1' with '6691'
-6690 6691 0
c Var 'aux1666' direct represents '1' with '6692'
6690 -6691 6692 0
-6692 6691 0
-6692 -6690 0
c Var 'aux1666' direct represents '2' with '-6691'
6690 6692 -6691 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6693'
c Var 'aux1667' direct represents '0' with '6693'
c Var 'aux1667' order represents '1' with '6694'
-6693 6694 0
c Var 'aux1667' direct represents '1' with '6695'
6693 -6694 6695 0
-6695 6694 0
-6695 -6693 0
c Var 'aux1667' direct represents '2' with '-6694'
6693 6695 -6694 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6696'
c Var 'aux1668' direct represents '0' with '6696'
c Var 'aux1668' order represents '1' with '6697'
-6696 6697 0
c Var 'aux1668' direct represents '1' with '6698'
6696 -6697 6698 0
-6698 6697 0
-6698 -6696 0
c Var 'aux1668' direct represents '2' with '-6697'
6696 6698 -6697 0
c Encoding variable: aux1669 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1668))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6699'
c Var 'aux1669' direct represents '0' with '6699'
c Var 'aux1669' order represents '1' with '6700'
-6699 6700 0
c Var 'aux1669' direct represents '1' with '6701'
6699 -6700 6701 0
-6701 6700 0
-6701 -6699 0
c Var 'aux1669' order represents '2' with '6702'
-6700 6702 0
c Var 'aux1669' direct represents '2' with '6703'
6700 -6702 6703 0
-6703 6702 0
-6703 -6700 0
c Var 'aux1669' direct represents '3' with '-6702'
6699 6701 6703 -6702 0
c Encoding variable: aux1670 with domain: int(0..4) (representing constraint (aux1665 + aux1667))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6704'
c Var 'aux1670' direct represents '0' with '6704'
c Var 'aux1670' order represents '1' with '6705'
-6704 6705 0
c Var 'aux1670' direct represents '1' with '6706'
6704 -6705 6706 0
-6706 6705 0
-6706 -6704 0
c Var 'aux1670' order represents '2' with '6707'
-6705 6707 0
c Var 'aux1670' direct represents '2' with '6708'
6705 -6707 6708 0
-6708 6707 0
-6708 -6705 0
c Var 'aux1670' order represents '3' with '6709'
-6707 6709 0
c Var 'aux1670' direct represents '3' with '6710'
6707 -6709 6710 0
-6710 6709 0
-6710 -6707 0
c Var 'aux1670' direct represents '4' with '-6709'
6704 6706 6708 6710 -6709 0
c Encoding variable: aux1671 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6711'
c Var 'aux1671' direct represents '0' with '6711'
c Var 'aux1671' order represents '1' with '6712'
-6711 6712 0
c Var 'aux1671' direct represents '1' with '6713'
6711 -6712 6713 0
-6713 6712 0
-6713 -6711 0
c Var 'aux1671' direct represents '2' with '-6712'
6711 6713 -6712 0
c Encoding variable: aux1672 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6714'
c Var 'aux1672' direct represents '0' with '6714'
c Var 'aux1672' order represents '1' with '6715'
-6714 6715 0
c Var 'aux1672' direct represents '1' with '6716'
6714 -6715 6716 0
-6716 6715 0
-6716 -6714 0
c Var 'aux1672' direct represents '2' with '-6715'
6714 6716 -6715 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6717'
c Var 'aux1673' direct represents '0' with '6717'
c Var 'aux1673' order represents '1' with '6718'
-6717 6718 0
c Var 'aux1673' direct represents '1' with '6719'
6717 -6718 6719 0
-6719 6718 0
-6719 -6717 0
c Var 'aux1673' direct represents '2' with '-6718'
6717 6719 -6718 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6720'
c Var 'aux1674' direct represents '0' with '6720'
c Var 'aux1674' order represents '1' with '6721'
-6720 6721 0
c Var 'aux1674' direct represents '1' with '6722'
6720 -6721 6722 0
-6722 6721 0
-6722 -6720 0
c Var 'aux1674' direct represents '2' with '-6721'
6720 6722 -6721 0
c Encoding variable: aux1675 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1674))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6723'
c Var 'aux1675' direct represents '0' with '6723'
c Var 'aux1675' order represents '1' with '6724'
-6723 6724 0
c Var 'aux1675' direct represents '1' with '6725'
6723 -6724 6725 0
-6725 6724 0
-6725 -6723 0
c Var 'aux1675' order represents '2' with '6726'
-6724 6726 0
c Var 'aux1675' direct represents '2' with '6727'
6724 -6726 6727 0
-6727 6726 0
-6727 -6724 0
c Var 'aux1675' direct represents '3' with '-6726'
6723 6725 6727 -6726 0
c Encoding variable: aux1676 with domain: int(0..4) (representing constraint (aux1671 + aux1673))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6728'
c Var 'aux1676' direct represents '0' with '6728'
c Var 'aux1676' order represents '1' with '6729'
-6728 6729 0
c Var 'aux1676' direct represents '1' with '6730'
6728 -6729 6730 0
-6730 6729 0
-6730 -6728 0
c Var 'aux1676' order represents '2' with '6731'
-6729 6731 0
c Var 'aux1676' direct represents '2' with '6732'
6729 -6731 6732 0
-6732 6731 0
-6732 -6729 0
c Var 'aux1676' order represents '3' with '6733'
-6731 6733 0
c Var 'aux1676' direct represents '3' with '6734'
6731 -6733 6734 0
-6734 6733 0
-6734 -6731 0
c Var 'aux1676' direct represents '4' with '-6733'
6728 6730 6732 6734 -6733 0
c Encoding variable: aux1677 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6735'
c Var 'aux1677' direct represents '0' with '6735'
c Var 'aux1677' order represents '1' with '6736'
-6735 6736 0
c Var 'aux1677' direct represents '1' with '6737'
6735 -6736 6737 0
-6737 6736 0
-6737 -6735 0
c Var 'aux1677' direct represents '2' with '-6736'
6735 6737 -6736 0
c Encoding variable: aux1678 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6738'
c Var 'aux1678' direct represents '0' with '6738'
c Var 'aux1678' order represents '1' with '6739'
-6738 6739 0
c Var 'aux1678' direct represents '1' with '6740'
6738 -6739 6740 0
-6740 6739 0
-6740 -6738 0
c Var 'aux1678' direct represents '2' with '-6739'
6738 6740 -6739 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6741'
c Var 'aux1679' direct represents '0' with '6741'
c Var 'aux1679' order represents '1' with '6742'
-6741 6742 0
c Var 'aux1679' direct represents '1' with '6743'
6741 -6742 6743 0
-6743 6742 0
-6743 -6741 0
c Var 'aux1679' direct represents '2' with '-6742'
6741 6743 -6742 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6744'
c Var 'aux1680' direct represents '0' with '6744'
c Var 'aux1680' order represents '1' with '6745'
-6744 6745 0
c Var 'aux1680' direct represents '1' with '6746'
6744 -6745 6746 0
-6746 6745 0
-6746 -6744 0
c Var 'aux1680' direct represents '2' with '-6745'
6744 6746 -6745 0
c Encoding variable: aux1681 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1680))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6747'
c Var 'aux1681' direct represents '0' with '6747'
c Var 'aux1681' order represents '1' with '6748'
-6747 6748 0
c Var 'aux1681' direct represents '1' with '6749'
6747 -6748 6749 0
-6749 6748 0
-6749 -6747 0
c Var 'aux1681' order represents '2' with '6750'
-6748 6750 0
c Var 'aux1681' direct represents '2' with '6751'
6748 -6750 6751 0
-6751 6750 0
-6751 -6748 0
c Var 'aux1681' direct represents '3' with '-6750'
6747 6749 6751 -6750 0
c Encoding variable: aux1682 with domain: int(0..4) (representing constraint (aux1677 + aux1679))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '6752'
c Var 'aux1682' direct represents '0' with '6752'
c Var 'aux1682' order represents '1' with '6753'
-6752 6753 0
c Var 'aux1682' direct represents '1' with '6754'
6752 -6753 6754 0
-6754 6753 0
-6754 -6752 0
c Var 'aux1682' order represents '2' with '6755'
-6753 6755 0
c Var 'aux1682' direct represents '2' with '6756'
6753 -6755 6756 0
-6756 6755 0
-6756 -6753 0
c Var 'aux1682' order represents '3' with '6757'
-6755 6757 0
c Var 'aux1682' direct represents '3' with '6758'
6755 -6757 6758 0
-6758 6757 0
-6758 -6755 0
c Var 'aux1682' direct represents '4' with '-6757'
6752 6754 6756 6758 -6757 0
c Encoding variable: aux1683 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '6759'
c Var 'aux1683' direct represents '0' with '6759'
c Var 'aux1683' order represents '1' with '6760'
-6759 6760 0
c Var 'aux1683' direct represents '1' with '6761'
6759 -6760 6761 0
-6761 6760 0
-6761 -6759 0
c Var 'aux1683' direct represents '2' with '-6760'
6759 6761 -6760 0
c Encoding variable: aux1684 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '6762'
c Var 'aux1684' direct represents '0' with '6762'
c Var 'aux1684' order represents '1' with '6763'
-6762 6763 0
c Var 'aux1684' direct represents '1' with '6764'
6762 -6763 6764 0
-6764 6763 0
-6764 -6762 0
c Var 'aux1684' direct represents '2' with '-6763'
6762 6764 -6763 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '6765'
c Var 'aux1685' direct represents '0' with '6765'
c Var 'aux1685' order represents '1' with '6766'
-6765 6766 0
c Var 'aux1685' direct represents '1' with '6767'
6765 -6766 6767 0
-6767 6766 0
-6767 -6765 0
c Var 'aux1685' direct represents '2' with '-6766'
6765 6767 -6766 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '6768'
c Var 'aux1686' direct represents '0' with '6768'
c Var 'aux1686' order represents '1' with '6769'
-6768 6769 0
c Var 'aux1686' direct represents '1' with '6770'
6768 -6769 6770 0
-6770 6769 0
-6770 -6768 0
c Var 'aux1686' direct represents '2' with '-6769'
6768 6770 -6769 0
c Encoding variable: aux1687 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1686))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '6771'
c Var 'aux1687' direct represents '0' with '6771'
c Var 'aux1687' order represents '1' with '6772'
-6771 6772 0
c Var 'aux1687' direct represents '1' with '6773'
6771 -6772 6773 0
-6773 6772 0
-6773 -6771 0
c Var 'aux1687' order represents '2' with '6774'
-6772 6774 0
c Var 'aux1687' direct represents '2' with '6775'
6772 -6774 6775 0
-6775 6774 0
-6775 -6772 0
c Var 'aux1687' direct represents '3' with '-6774'
6771 6773 6775 -6774 0
c Encoding variable: aux1688 with domain: int(0..4) (representing constraint (aux1683 + aux1685))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '6776'
c Var 'aux1688' direct represents '0' with '6776'
c Var 'aux1688' order represents '1' with '6777'
-6776 6777 0
c Var 'aux1688' direct represents '1' with '6778'
6776 -6777 6778 0
-6778 6777 0
-6778 -6776 0
c Var 'aux1688' order represents '2' with '6779'
-6777 6779 0
c Var 'aux1688' direct represents '2' with '6780'
6777 -6779 6780 0
-6780 6779 0
-6780 -6777 0
c Var 'aux1688' order represents '3' with '6781'
-6779 6781 0
c Var 'aux1688' direct represents '3' with '6782'
6779 -6781 6782 0
-6782 6781 0
-6782 -6779 0
c Var 'aux1688' direct represents '4' with '-6781'
6776 6778 6780 6782 -6781 0
c Encoding variable: aux1689 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '6783'
c Var 'aux1689' direct represents '0' with '6783'
c Var 'aux1689' order represents '1' with '6784'
-6783 6784 0
c Var 'aux1689' direct represents '1' with '6785'
6783 -6784 6785 0
-6785 6784 0
-6785 -6783 0
c Var 'aux1689' direct represents '2' with '-6784'
6783 6785 -6784 0
c Encoding variable: aux1690 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '6786'
c Var 'aux1690' direct represents '0' with '6786'
c Var 'aux1690' order represents '1' with '6787'
-6786 6787 0
c Var 'aux1690' direct represents '1' with '6788'
6786 -6787 6788 0
-6788 6787 0
-6788 -6786 0
c Var 'aux1690' direct represents '2' with '-6787'
6786 6788 -6787 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '6789'
c Var 'aux1691' direct represents '0' with '6789'
c Var 'aux1691' order represents '1' with '6790'
-6789 6790 0
c Var 'aux1691' direct represents '1' with '6791'
6789 -6790 6791 0
-6791 6790 0
-6791 -6789 0
c Var 'aux1691' direct represents '2' with '-6790'
6789 6791 -6790 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '6792'
c Var 'aux1692' direct represents '0' with '6792'
c Var 'aux1692' order represents '1' with '6793'
-6792 6793 0
c Var 'aux1692' direct represents '1' with '6794'
6792 -6793 6794 0
-6794 6793 0
-6794 -6792 0
c Var 'aux1692' direct represents '2' with '-6793'
6792 6794 -6793 0
c Encoding variable: aux1693 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1692))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '6795'
c Var 'aux1693' direct represents '0' with '6795'
c Var 'aux1693' order represents '1' with '6796'
-6795 6796 0
c Var 'aux1693' direct represents '1' with '6797'
6795 -6796 6797 0
-6797 6796 0
-6797 -6795 0
c Var 'aux1693' order represents '2' with '6798'
-6796 6798 0
c Var 'aux1693' direct represents '2' with '6799'
6796 -6798 6799 0
-6799 6798 0
-6799 -6796 0
c Var 'aux1693' direct represents '3' with '-6798'
6795 6797 6799 -6798 0
c Encoding variable: aux1694 with domain: int(0..4) (representing constraint (aux1689 + aux1691))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '6800'
c Var 'aux1694' direct represents '0' with '6800'
c Var 'aux1694' order represents '1' with '6801'
-6800 6801 0
c Var 'aux1694' direct represents '1' with '6802'
6800 -6801 6802 0
-6802 6801 0
-6802 -6800 0
c Var 'aux1694' order represents '2' with '6803'
-6801 6803 0
c Var 'aux1694' direct represents '2' with '6804'
6801 -6803 6804 0
-6804 6803 0
-6804 -6801 0
c Var 'aux1694' order represents '3' with '6805'
-6803 6805 0
c Var 'aux1694' direct represents '3' with '6806'
6803 -6805 6806 0
-6806 6805 0
-6806 -6803 0
c Var 'aux1694' direct represents '4' with '-6805'
6800 6802 6804 6806 -6805 0
c Encoding variable: aux1695 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '6807'
c Var 'aux1695' direct represents '0' with '6807'
c Var 'aux1695' order represents '1' with '6808'
-6807 6808 0
c Var 'aux1695' direct represents '1' with '6809'
6807 -6808 6809 0
-6809 6808 0
-6809 -6807 0
c Var 'aux1695' direct represents '2' with '-6808'
6807 6809 -6808 0
c Encoding variable: aux1696 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '6810'
c Var 'aux1696' direct represents '0' with '6810'
c Var 'aux1696' order represents '1' with '6811'
-6810 6811 0
c Var 'aux1696' direct represents '1' with '6812'
6810 -6811 6812 0
-6812 6811 0
-6812 -6810 0
c Var 'aux1696' direct represents '2' with '-6811'
6810 6812 -6811 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '6813'
c Var 'aux1697' direct represents '0' with '6813'
c Var 'aux1697' order represents '1' with '6814'
-6813 6814 0
c Var 'aux1697' direct represents '1' with '6815'
6813 -6814 6815 0
-6815 6814 0
-6815 -6813 0
c Var 'aux1697' direct represents '2' with '-6814'
6813 6815 -6814 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '6816'
c Var 'aux1698' direct represents '0' with '6816'
c Var 'aux1698' order represents '1' with '6817'
-6816 6817 0
c Var 'aux1698' direct represents '1' with '6818'
6816 -6817 6818 0
-6818 6817 0
-6818 -6816 0
c Var 'aux1698' direct represents '2' with '-6817'
6816 6818 -6817 0
c Encoding variable: aux1699 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1698))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '6819'
c Var 'aux1699' direct represents '0' with '6819'
c Var 'aux1699' order represents '1' with '6820'
-6819 6820 0
c Var 'aux1699' direct represents '1' with '6821'
6819 -6820 6821 0
-6821 6820 0
-6821 -6819 0
c Var 'aux1699' order represents '2' with '6822'
-6820 6822 0
c Var 'aux1699' direct represents '2' with '6823'
6820 -6822 6823 0
-6823 6822 0
-6823 -6820 0
c Var 'aux1699' direct represents '3' with '-6822'
6819 6821 6823 -6822 0
c Encoding variable: aux1700 with domain: int(0..4) (representing constraint (aux1695 + aux1697))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '6824'
c Var 'aux1700' direct represents '0' with '6824'
c Var 'aux1700' order represents '1' with '6825'
-6824 6825 0
c Var 'aux1700' direct represents '1' with '6826'
6824 -6825 6826 0
-6826 6825 0
-6826 -6824 0
c Var 'aux1700' order represents '2' with '6827'
-6825 6827 0
c Var 'aux1700' direct represents '2' with '6828'
6825 -6827 6828 0
-6828 6827 0
-6828 -6825 0
c Var 'aux1700' order represents '3' with '6829'
-6827 6829 0
c Var 'aux1700' direct represents '3' with '6830'
6827 -6829 6830 0
-6830 6829 0
-6830 -6827 0
c Var 'aux1700' direct represents '4' with '-6829'
6824 6826 6828 6830 -6829 0
c Encoding variable: aux1701 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '6831'
c Var 'aux1701' direct represents '0' with '6831'
c Var 'aux1701' order represents '1' with '6832'
-6831 6832 0
c Var 'aux1701' direct represents '1' with '6833'
6831 -6832 6833 0
-6833 6832 0
-6833 -6831 0
c Var 'aux1701' direct represents '2' with '-6832'
6831 6833 -6832 0
c Encoding variable: aux1702 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '6834'
c Var 'aux1702' direct represents '0' with '6834'
c Var 'aux1702' order represents '1' with '6835'
-6834 6835 0
c Var 'aux1702' direct represents '1' with '6836'
6834 -6835 6836 0
-6836 6835 0
-6836 -6834 0
c Var 'aux1702' direct represents '2' with '-6835'
6834 6836 -6835 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '6837'
c Var 'aux1703' direct represents '0' with '6837'
c Var 'aux1703' order represents '1' with '6838'
-6837 6838 0
c Var 'aux1703' direct represents '1' with '6839'
6837 -6838 6839 0
-6839 6838 0
-6839 -6837 0
c Var 'aux1703' direct represents '2' with '-6838'
6837 6839 -6838 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '6840'
c Var 'aux1704' direct represents '0' with '6840'
c Var 'aux1704' order represents '1' with '6841'
-6840 6841 0
c Var 'aux1704' direct represents '1' with '6842'
6840 -6841 6842 0
-6842 6841 0
-6842 -6840 0
c Var 'aux1704' direct represents '2' with '-6841'
6840 6842 -6841 0
c Encoding variable: aux1705 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1704))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '6843'
c Var 'aux1705' direct represents '0' with '6843'
c Var 'aux1705' order represents '1' with '6844'
-6843 6844 0
c Var 'aux1705' direct represents '1' with '6845'
6843 -6844 6845 0
-6845 6844 0
-6845 -6843 0
c Var 'aux1705' order represents '2' with '6846'
-6844 6846 0
c Var 'aux1705' direct represents '2' with '6847'
6844 -6846 6847 0
-6847 6846 0
-6847 -6844 0
c Var 'aux1705' direct represents '3' with '-6846'
6843 6845 6847 -6846 0
c Encoding variable: aux1706 with domain: int(0..4) (representing constraint (aux1701 + aux1703))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '6848'
c Var 'aux1706' direct represents '0' with '6848'
c Var 'aux1706' order represents '1' with '6849'
-6848 6849 0
c Var 'aux1706' direct represents '1' with '6850'
6848 -6849 6850 0
-6850 6849 0
-6850 -6848 0
c Var 'aux1706' order represents '2' with '6851'
-6849 6851 0
c Var 'aux1706' direct represents '2' with '6852'
6849 -6851 6852 0
-6852 6851 0
-6852 -6849 0
c Var 'aux1706' order represents '3' with '6853'
-6851 6853 0
c Var 'aux1706' direct represents '3' with '6854'
6851 -6853 6854 0
-6854 6853 0
-6854 -6851 0
c Var 'aux1706' direct represents '4' with '-6853'
6848 6850 6852 6854 -6853 0
c Encoding variable: aux1707 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '6855'
c Var 'aux1707' direct represents '0' with '6855'
c Var 'aux1707' order represents '1' with '6856'
-6855 6856 0
c Var 'aux1707' direct represents '1' with '6857'
6855 -6856 6857 0
-6857 6856 0
-6857 -6855 0
c Var 'aux1707' direct represents '2' with '-6856'
6855 6857 -6856 0
c Encoding variable: aux1708 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '6858'
c Var 'aux1708' direct represents '0' with '6858'
c Var 'aux1708' order represents '1' with '6859'
-6858 6859 0
c Var 'aux1708' direct represents '1' with '6860'
6858 -6859 6860 0
-6860 6859 0
-6860 -6858 0
c Var 'aux1708' direct represents '2' with '-6859'
6858 6860 -6859 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '6861'
c Var 'aux1709' direct represents '0' with '6861'
c Var 'aux1709' order represents '1' with '6862'
-6861 6862 0
c Var 'aux1709' direct represents '1' with '6863'
6861 -6862 6863 0
-6863 6862 0
-6863 -6861 0
c Var 'aux1709' direct represents '2' with '-6862'
6861 6863 -6862 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '6864'
c Var 'aux1710' direct represents '0' with '6864'
c Var 'aux1710' order represents '1' with '6865'
-6864 6865 0
c Var 'aux1710' direct represents '1' with '6866'
6864 -6865 6866 0
-6866 6865 0
-6866 -6864 0
c Var 'aux1710' direct represents '2' with '-6865'
6864 6866 -6865 0
c Encoding variable: aux1711 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1710))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '6867'
c Var 'aux1711' direct represents '0' with '6867'
c Var 'aux1711' order represents '1' with '6868'
-6867 6868 0
c Var 'aux1711' direct represents '1' with '6869'
6867 -6868 6869 0
-6869 6868 0
-6869 -6867 0
c Var 'aux1711' order represents '2' with '6870'
-6868 6870 0
c Var 'aux1711' direct represents '2' with '6871'
6868 -6870 6871 0
-6871 6870 0
-6871 -6868 0
c Var 'aux1711' direct represents '3' with '-6870'
6867 6869 6871 -6870 0
c Encoding variable: aux1712 with domain: int(0..4) (representing constraint (aux1707 + aux1709))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '6872'
c Var 'aux1712' direct represents '0' with '6872'
c Var 'aux1712' order represents '1' with '6873'
-6872 6873 0
c Var 'aux1712' direct represents '1' with '6874'
6872 -6873 6874 0
-6874 6873 0
-6874 -6872 0
c Var 'aux1712' order represents '2' with '6875'
-6873 6875 0
c Var 'aux1712' direct represents '2' with '6876'
6873 -6875 6876 0
-6876 6875 0
-6876 -6873 0
c Var 'aux1712' order represents '3' with '6877'
-6875 6877 0
c Var 'aux1712' direct represents '3' with '6878'
6875 -6877 6878 0
-6878 6877 0
-6878 -6875 0
c Var 'aux1712' direct represents '4' with '-6877'
6872 6874 6876 6878 -6877 0
c Encoding variable: aux1713 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '6879'
c Var 'aux1713' direct represents '0' with '6879'
c Var 'aux1713' order represents '1' with '6880'
-6879 6880 0
c Var 'aux1713' direct represents '1' with '6881'
6879 -6880 6881 0
-6881 6880 0
-6881 -6879 0
c Var 'aux1713' direct represents '2' with '-6880'
6879 6881 -6880 0
c Encoding variable: aux1714 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '6882'
c Var 'aux1714' direct represents '0' with '6882'
c Var 'aux1714' order represents '1' with '6883'
-6882 6883 0
c Var 'aux1714' direct represents '1' with '6884'
6882 -6883 6884 0
-6884 6883 0
-6884 -6882 0
c Var 'aux1714' direct represents '2' with '-6883'
6882 6884 -6883 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '6885'
c Var 'aux1715' direct represents '0' with '6885'
c Var 'aux1715' order represents '1' with '6886'
-6885 6886 0
c Var 'aux1715' direct represents '1' with '6887'
6885 -6886 6887 0
-6887 6886 0
-6887 -6885 0
c Var 'aux1715' direct represents '2' with '-6886'
6885 6887 -6886 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '6888'
c Var 'aux1716' direct represents '0' with '6888'
c Var 'aux1716' order represents '1' with '6889'
-6888 6889 0
c Var 'aux1716' direct represents '1' with '6890'
6888 -6889 6890 0
-6890 6889 0
-6890 -6888 0
c Var 'aux1716' direct represents '2' with '-6889'
6888 6890 -6889 0
c Encoding variable: aux1717 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1716))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '6891'
c Var 'aux1717' direct represents '0' with '6891'
c Var 'aux1717' order represents '1' with '6892'
-6891 6892 0
c Var 'aux1717' direct represents '1' with '6893'
6891 -6892 6893 0
-6893 6892 0
-6893 -6891 0
c Var 'aux1717' order represents '2' with '6894'
-6892 6894 0
c Var 'aux1717' direct represents '2' with '6895'
6892 -6894 6895 0
-6895 6894 0
-6895 -6892 0
c Var 'aux1717' direct represents '3' with '-6894'
6891 6893 6895 -6894 0
c Encoding variable: aux1718 with domain: int(0..4) (representing constraint (aux1713 + aux1715))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '6896'
c Var 'aux1718' direct represents '0' with '6896'
c Var 'aux1718' order represents '1' with '6897'
-6896 6897 0
c Var 'aux1718' direct represents '1' with '6898'
6896 -6897 6898 0
-6898 6897 0
-6898 -6896 0
c Var 'aux1718' order represents '2' with '6899'
-6897 6899 0
c Var 'aux1718' direct represents '2' with '6900'
6897 -6899 6900 0
-6900 6899 0
-6900 -6897 0
c Var 'aux1718' order represents '3' with '6901'
-6899 6901 0
c Var 'aux1718' direct represents '3' with '6902'
6899 -6901 6902 0
-6902 6901 0
-6902 -6899 0
c Var 'aux1718' direct represents '4' with '-6901'
6896 6898 6900 6902 -6901 0
c Encoding variable: aux1719 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '6903'
c Var 'aux1719' direct represents '0' with '6903'
c Var 'aux1719' order represents '1' with '6904'
-6903 6904 0
c Var 'aux1719' direct represents '1' with '6905'
6903 -6904 6905 0
-6905 6904 0
-6905 -6903 0
c Var 'aux1719' direct represents '2' with '-6904'
6903 6905 -6904 0
c Encoding variable: aux1720 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '6906'
c Var 'aux1720' direct represents '0' with '6906'
c Var 'aux1720' order represents '1' with '6907'
-6906 6907 0
c Var 'aux1720' direct represents '1' with '6908'
6906 -6907 6908 0
-6908 6907 0
-6908 -6906 0
c Var 'aux1720' direct represents '2' with '-6907'
6906 6908 -6907 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '6909'
c Var 'aux1721' direct represents '0' with '6909'
c Var 'aux1721' order represents '1' with '6910'
-6909 6910 0
c Var 'aux1721' direct represents '1' with '6911'
6909 -6910 6911 0
-6911 6910 0
-6911 -6909 0
c Var 'aux1721' direct represents '2' with '-6910'
6909 6911 -6910 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '6912'
c Var 'aux1722' direct represents '0' with '6912'
c Var 'aux1722' order represents '1' with '6913'
-6912 6913 0
c Var 'aux1722' direct represents '1' with '6914'
6912 -6913 6914 0
-6914 6913 0
-6914 -6912 0
c Var 'aux1722' direct represents '2' with '-6913'
6912 6914 -6913 0
c Encoding variable: aux1723 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1722))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '6915'
c Var 'aux1723' direct represents '0' with '6915'
c Var 'aux1723' order represents '1' with '6916'
-6915 6916 0
c Var 'aux1723' direct represents '1' with '6917'
6915 -6916 6917 0
-6917 6916 0
-6917 -6915 0
c Var 'aux1723' order represents '2' with '6918'
-6916 6918 0
c Var 'aux1723' direct represents '2' with '6919'
6916 -6918 6919 0
-6919 6918 0
-6919 -6916 0
c Var 'aux1723' direct represents '3' with '-6918'
6915 6917 6919 -6918 0
c Encoding variable: aux1724 with domain: int(0..4) (representing constraint (aux1719 + aux1721))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '6920'
c Var 'aux1724' direct represents '0' with '6920'
c Var 'aux1724' order represents '1' with '6921'
-6920 6921 0
c Var 'aux1724' direct represents '1' with '6922'
6920 -6921 6922 0
-6922 6921 0
-6922 -6920 0
c Var 'aux1724' order represents '2' with '6923'
-6921 6923 0
c Var 'aux1724' direct represents '2' with '6924'
6921 -6923 6924 0
-6924 6923 0
-6924 -6921 0
c Var 'aux1724' order represents '3' with '6925'
-6923 6925 0
c Var 'aux1724' direct represents '3' with '6926'
6923 -6925 6926 0
-6926 6925 0
-6926 -6923 0
c Var 'aux1724' direct represents '4' with '-6925'
6920 6922 6924 6926 -6925 0
c Encoding variable: aux1725 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '6927'
c Var 'aux1725' direct represents '0' with '6927'
c Var 'aux1725' order represents '1' with '6928'
-6927 6928 0
c Var 'aux1725' direct represents '1' with '6929'
6927 -6928 6929 0
-6929 6928 0
-6929 -6927 0
c Var 'aux1725' direct represents '2' with '-6928'
6927 6929 -6928 0
c Encoding variable: aux1726 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '6930'
c Var 'aux1726' direct represents '0' with '6930'
c Var 'aux1726' order represents '1' with '6931'
-6930 6931 0
c Var 'aux1726' direct represents '1' with '6932'
6930 -6931 6932 0
-6932 6931 0
-6932 -6930 0
c Var 'aux1726' direct represents '2' with '-6931'
6930 6932 -6931 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '6933'
c Var 'aux1727' direct represents '0' with '6933'
c Var 'aux1727' order represents '1' with '6934'
-6933 6934 0
c Var 'aux1727' direct represents '1' with '6935'
6933 -6934 6935 0
-6935 6934 0
-6935 -6933 0
c Var 'aux1727' direct represents '2' with '-6934'
6933 6935 -6934 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '6936'
c Var 'aux1728' direct represents '0' with '6936'
c Var 'aux1728' order represents '1' with '6937'
-6936 6937 0
c Var 'aux1728' direct represents '1' with '6938'
6936 -6937 6938 0
-6938 6937 0
-6938 -6936 0
c Var 'aux1728' direct represents '2' with '-6937'
6936 6938 -6937 0
c Encoding variable: aux1729 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1728))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '6939'
c Var 'aux1729' direct represents '0' with '6939'
c Var 'aux1729' order represents '1' with '6940'
-6939 6940 0
c Var 'aux1729' direct represents '1' with '6941'
6939 -6940 6941 0
-6941 6940 0
-6941 -6939 0
c Var 'aux1729' order represents '2' with '6942'
-6940 6942 0
c Var 'aux1729' direct represents '2' with '6943'
6940 -6942 6943 0
-6943 6942 0
-6943 -6940 0
c Var 'aux1729' direct represents '3' with '-6942'
6939 6941 6943 -6942 0
c Encoding variable: aux1730 with domain: int(0..4) (representing constraint (aux1725 + aux1727))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '6944'
c Var 'aux1730' direct represents '0' with '6944'
c Var 'aux1730' order represents '1' with '6945'
-6944 6945 0
c Var 'aux1730' direct represents '1' with '6946'
6944 -6945 6946 0
-6946 6945 0
-6946 -6944 0
c Var 'aux1730' order represents '2' with '6947'
-6945 6947 0
c Var 'aux1730' direct represents '2' with '6948'
6945 -6947 6948 0
-6948 6947 0
-6948 -6945 0
c Var 'aux1730' order represents '3' with '6949'
-6947 6949 0
c Var 'aux1730' direct represents '3' with '6950'
6947 -6949 6950 0
-6950 6949 0
-6950 -6947 0
c Var 'aux1730' direct represents '4' with '-6949'
6944 6946 6948 6950 -6949 0
c Encoding variable: aux1731 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '6951'
c Var 'aux1731' direct represents '0' with '6951'
c Var 'aux1731' order represents '1' with '6952'
-6951 6952 0
c Var 'aux1731' direct represents '1' with '6953'
6951 -6952 6953 0
-6953 6952 0
-6953 -6951 0
c Var 'aux1731' direct represents '2' with '-6952'
6951 6953 -6952 0
c Encoding variable: aux1732 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '6954'
c Var 'aux1732' direct represents '0' with '6954'
c Var 'aux1732' order represents '1' with '6955'
-6954 6955 0
c Var 'aux1732' direct represents '1' with '6956'
6954 -6955 6956 0
-6956 6955 0
-6956 -6954 0
c Var 'aux1732' direct represents '2' with '-6955'
6954 6956 -6955 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '6957'
c Var 'aux1733' direct represents '0' with '6957'
c Var 'aux1733' order represents '1' with '6958'
-6957 6958 0
c Var 'aux1733' direct represents '1' with '6959'
6957 -6958 6959 0
-6959 6958 0
-6959 -6957 0
c Var 'aux1733' direct represents '2' with '-6958'
6957 6959 -6958 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '6960'
c Var 'aux1734' direct represents '0' with '6960'
c Var 'aux1734' order represents '1' with '6961'
-6960 6961 0
c Var 'aux1734' direct represents '1' with '6962'
6960 -6961 6962 0
-6962 6961 0
-6962 -6960 0
c Var 'aux1734' direct represents '2' with '-6961'
6960 6962 -6961 0
c Encoding variable: aux1735 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1734))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '6963'
c Var 'aux1735' direct represents '0' with '6963'
c Var 'aux1735' order represents '1' with '6964'
-6963 6964 0
c Var 'aux1735' direct represents '1' with '6965'
6963 -6964 6965 0
-6965 6964 0
-6965 -6963 0
c Var 'aux1735' order represents '2' with '6966'
-6964 6966 0
c Var 'aux1735' direct represents '2' with '6967'
6964 -6966 6967 0
-6967 6966 0
-6967 -6964 0
c Var 'aux1735' direct represents '3' with '-6966'
6963 6965 6967 -6966 0
c Encoding variable: aux1736 with domain: int(0..4) (representing constraint (aux1731 + aux1733))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '6968'
c Var 'aux1736' direct represents '0' with '6968'
c Var 'aux1736' order represents '1' with '6969'
-6968 6969 0
c Var 'aux1736' direct represents '1' with '6970'
6968 -6969 6970 0
-6970 6969 0
-6970 -6968 0
c Var 'aux1736' order represents '2' with '6971'
-6969 6971 0
c Var 'aux1736' direct represents '2' with '6972'
6969 -6971 6972 0
-6972 6971 0
-6972 -6969 0
c Var 'aux1736' order represents '3' with '6973'
-6971 6973 0
c Var 'aux1736' direct represents '3' with '6974'
6971 -6973 6974 0
-6974 6973 0
-6974 -6971 0
c Var 'aux1736' direct represents '4' with '-6973'
6968 6970 6972 6974 -6973 0
c Encoding variable: aux1737 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '6975'
c Var 'aux1737' direct represents '0' with '6975'
c Var 'aux1737' order represents '1' with '6976'
-6975 6976 0
c Var 'aux1737' direct represents '1' with '6977'
6975 -6976 6977 0
-6977 6976 0
-6977 -6975 0
c Var 'aux1737' direct represents '2' with '-6976'
6975 6977 -6976 0
c Encoding variable: aux1738 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '6978'
c Var 'aux1738' direct represents '0' with '6978'
c Var 'aux1738' order represents '1' with '6979'
-6978 6979 0
c Var 'aux1738' direct represents '1' with '6980'
6978 -6979 6980 0
-6980 6979 0
-6980 -6978 0
c Var 'aux1738' direct represents '2' with '-6979'
6978 6980 -6979 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '6981'
c Var 'aux1739' direct represents '0' with '6981'
c Var 'aux1739' order represents '1' with '6982'
-6981 6982 0
c Var 'aux1739' direct represents '1' with '6983'
6981 -6982 6983 0
-6983 6982 0
-6983 -6981 0
c Var 'aux1739' direct represents '2' with '-6982'
6981 6983 -6982 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '6984'
c Var 'aux1740' direct represents '0' with '6984'
c Var 'aux1740' order represents '1' with '6985'
-6984 6985 0
c Var 'aux1740' direct represents '1' with '6986'
6984 -6985 6986 0
-6986 6985 0
-6986 -6984 0
c Var 'aux1740' direct represents '2' with '-6985'
6984 6986 -6985 0
c Encoding variable: aux1741 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1740))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '6987'
c Var 'aux1741' direct represents '0' with '6987'
c Var 'aux1741' order represents '1' with '6988'
-6987 6988 0
c Var 'aux1741' direct represents '1' with '6989'
6987 -6988 6989 0
-6989 6988 0
-6989 -6987 0
c Var 'aux1741' order represents '2' with '6990'
-6988 6990 0
c Var 'aux1741' direct represents '2' with '6991'
6988 -6990 6991 0
-6991 6990 0
-6991 -6988 0
c Var 'aux1741' direct represents '3' with '-6990'
6987 6989 6991 -6990 0
c Encoding variable: aux1742 with domain: int(0..4) (representing constraint (aux1737 + aux1739))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '6992'
c Var 'aux1742' direct represents '0' with '6992'
c Var 'aux1742' order represents '1' with '6993'
-6992 6993 0
c Var 'aux1742' direct represents '1' with '6994'
6992 -6993 6994 0
-6994 6993 0
-6994 -6992 0
c Var 'aux1742' order represents '2' with '6995'
-6993 6995 0
c Var 'aux1742' direct represents '2' with '6996'
6993 -6995 6996 0
-6996 6995 0
-6996 -6993 0
c Var 'aux1742' order represents '3' with '6997'
-6995 6997 0
c Var 'aux1742' direct represents '3' with '6998'
6995 -6997 6998 0
-6998 6997 0
-6998 -6995 0
c Var 'aux1742' direct represents '4' with '-6997'
6992 6994 6996 6998 -6997 0
c Encoding variable: aux1743 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '6999'
c Var 'aux1743' direct represents '0' with '6999'
c Var 'aux1743' order represents '1' with '7000'
-6999 7000 0
c Var 'aux1743' direct represents '1' with '7001'
6999 -7000 7001 0
-7001 7000 0
-7001 -6999 0
c Var 'aux1743' direct represents '2' with '-7000'
6999 7001 -7000 0
c Encoding variable: aux1744 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7002'
c Var 'aux1744' direct represents '0' with '7002'
c Var 'aux1744' order represents '1' with '7003'
-7002 7003 0
c Var 'aux1744' direct represents '1' with '7004'
7002 -7003 7004 0
-7004 7003 0
-7004 -7002 0
c Var 'aux1744' direct represents '2' with '-7003'
7002 7004 -7003 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7005'
c Var 'aux1745' direct represents '0' with '7005'
c Var 'aux1745' order represents '1' with '7006'
-7005 7006 0
c Var 'aux1745' direct represents '1' with '7007'
7005 -7006 7007 0
-7007 7006 0
-7007 -7005 0
c Var 'aux1745' direct represents '2' with '-7006'
7005 7007 -7006 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7008'
c Var 'aux1746' direct represents '0' with '7008'
c Var 'aux1746' order represents '1' with '7009'
-7008 7009 0
c Var 'aux1746' direct represents '1' with '7010'
7008 -7009 7010 0
-7010 7009 0
-7010 -7008 0
c Var 'aux1746' direct represents '2' with '-7009'
7008 7010 -7009 0
c Encoding variable: aux1747 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1746))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7011'
c Var 'aux1747' direct represents '0' with '7011'
c Var 'aux1747' order represents '1' with '7012'
-7011 7012 0
c Var 'aux1747' direct represents '1' with '7013'
7011 -7012 7013 0
-7013 7012 0
-7013 -7011 0
c Var 'aux1747' order represents '2' with '7014'
-7012 7014 0
c Var 'aux1747' direct represents '2' with '7015'
7012 -7014 7015 0
-7015 7014 0
-7015 -7012 0
c Var 'aux1747' direct represents '3' with '-7014'
7011 7013 7015 -7014 0
c Encoding variable: aux1748 with domain: int(0..4) (representing constraint (aux1743 + aux1745))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7016'
c Var 'aux1748' direct represents '0' with '7016'
c Var 'aux1748' order represents '1' with '7017'
-7016 7017 0
c Var 'aux1748' direct represents '1' with '7018'
7016 -7017 7018 0
-7018 7017 0
-7018 -7016 0
c Var 'aux1748' order represents '2' with '7019'
-7017 7019 0
c Var 'aux1748' direct represents '2' with '7020'
7017 -7019 7020 0
-7020 7019 0
-7020 -7017 0
c Var 'aux1748' order represents '3' with '7021'
-7019 7021 0
c Var 'aux1748' direct represents '3' with '7022'
7019 -7021 7022 0
-7022 7021 0
-7022 -7019 0
c Var 'aux1748' direct represents '4' with '-7021'
7016 7018 7020 7022 -7021 0
c Encoding variable: aux1749 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7023'
c Var 'aux1749' direct represents '0' with '7023'
c Var 'aux1749' order represents '1' with '7024'
-7023 7024 0
c Var 'aux1749' direct represents '1' with '7025'
7023 -7024 7025 0
-7025 7024 0
-7025 -7023 0
c Var 'aux1749' direct represents '2' with '-7024'
7023 7025 -7024 0
c Encoding variable: aux1750 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7026'
c Var 'aux1750' direct represents '0' with '7026'
c Var 'aux1750' order represents '1' with '7027'
-7026 7027 0
c Var 'aux1750' direct represents '1' with '7028'
7026 -7027 7028 0
-7028 7027 0
-7028 -7026 0
c Var 'aux1750' direct represents '2' with '-7027'
7026 7028 -7027 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7029'
c Var 'aux1751' direct represents '0' with '7029'
c Var 'aux1751' order represents '1' with '7030'
-7029 7030 0
c Var 'aux1751' direct represents '1' with '7031'
7029 -7030 7031 0
-7031 7030 0
-7031 -7029 0
c Var 'aux1751' direct represents '2' with '-7030'
7029 7031 -7030 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7032'
c Var 'aux1752' direct represents '0' with '7032'
c Var 'aux1752' order represents '1' with '7033'
-7032 7033 0
c Var 'aux1752' direct represents '1' with '7034'
7032 -7033 7034 0
-7034 7033 0
-7034 -7032 0
c Var 'aux1752' direct represents '2' with '-7033'
7032 7034 -7033 0
c Encoding variable: aux1753 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1752))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7035'
c Var 'aux1753' direct represents '0' with '7035'
c Var 'aux1753' order represents '1' with '7036'
-7035 7036 0
c Var 'aux1753' direct represents '1' with '7037'
7035 -7036 7037 0
-7037 7036 0
-7037 -7035 0
c Var 'aux1753' order represents '2' with '7038'
-7036 7038 0
c Var 'aux1753' direct represents '2' with '7039'
7036 -7038 7039 0
-7039 7038 0
-7039 -7036 0
c Var 'aux1753' direct represents '3' with '-7038'
7035 7037 7039 -7038 0
c Encoding variable: aux1754 with domain: int(0..4) (representing constraint (aux1749 + aux1751))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7040'
c Var 'aux1754' direct represents '0' with '7040'
c Var 'aux1754' order represents '1' with '7041'
-7040 7041 0
c Var 'aux1754' direct represents '1' with '7042'
7040 -7041 7042 0
-7042 7041 0
-7042 -7040 0
c Var 'aux1754' order represents '2' with '7043'
-7041 7043 0
c Var 'aux1754' direct represents '2' with '7044'
7041 -7043 7044 0
-7044 7043 0
-7044 -7041 0
c Var 'aux1754' order represents '3' with '7045'
-7043 7045 0
c Var 'aux1754' direct represents '3' with '7046'
7043 -7045 7046 0
-7046 7045 0
-7046 -7043 0
c Var 'aux1754' direct represents '4' with '-7045'
7040 7042 7044 7046 -7045 0
c Encoding variable: aux1755 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7047'
c Var 'aux1755' direct represents '0' with '7047'
c Var 'aux1755' order represents '1' with '7048'
-7047 7048 0
c Var 'aux1755' direct represents '1' with '7049'
7047 -7048 7049 0
-7049 7048 0
-7049 -7047 0
c Var 'aux1755' direct represents '2' with '-7048'
7047 7049 -7048 0
c Encoding variable: aux1756 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7050'
c Var 'aux1756' direct represents '0' with '7050'
c Var 'aux1756' order represents '1' with '7051'
-7050 7051 0
c Var 'aux1756' direct represents '1' with '7052'
7050 -7051 7052 0
-7052 7051 0
-7052 -7050 0
c Var 'aux1756' direct represents '2' with '-7051'
7050 7052 -7051 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7053'
c Var 'aux1757' direct represents '0' with '7053'
c Var 'aux1757' order represents '1' with '7054'
-7053 7054 0
c Var 'aux1757' direct represents '1' with '7055'
7053 -7054 7055 0
-7055 7054 0
-7055 -7053 0
c Var 'aux1757' direct represents '2' with '-7054'
7053 7055 -7054 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7056'
c Var 'aux1758' direct represents '0' with '7056'
c Var 'aux1758' order represents '1' with '7057'
-7056 7057 0
c Var 'aux1758' direct represents '1' with '7058'
7056 -7057 7058 0
-7058 7057 0
-7058 -7056 0
c Var 'aux1758' direct represents '2' with '-7057'
7056 7058 -7057 0
c Encoding variable: aux1759 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1758))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7059'
c Var 'aux1759' direct represents '0' with '7059'
c Var 'aux1759' order represents '1' with '7060'
-7059 7060 0
c Var 'aux1759' direct represents '1' with '7061'
7059 -7060 7061 0
-7061 7060 0
-7061 -7059 0
c Var 'aux1759' order represents '2' with '7062'
-7060 7062 0
c Var 'aux1759' direct represents '2' with '7063'
7060 -7062 7063 0
-7063 7062 0
-7063 -7060 0
c Var 'aux1759' direct represents '3' with '-7062'
7059 7061 7063 -7062 0
c Encoding variable: aux1760 with domain: int(0..4) (representing constraint (aux1755 + aux1757))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7064'
c Var 'aux1760' direct represents '0' with '7064'
c Var 'aux1760' order represents '1' with '7065'
-7064 7065 0
c Var 'aux1760' direct represents '1' with '7066'
7064 -7065 7066 0
-7066 7065 0
-7066 -7064 0
c Var 'aux1760' order represents '2' with '7067'
-7065 7067 0
c Var 'aux1760' direct represents '2' with '7068'
7065 -7067 7068 0
-7068 7067 0
-7068 -7065 0
c Var 'aux1760' order represents '3' with '7069'
-7067 7069 0
c Var 'aux1760' direct represents '3' with '7070'
7067 -7069 7070 0
-7070 7069 0
-7070 -7067 0
c Var 'aux1760' direct represents '4' with '-7069'
7064 7066 7068 7070 -7069 0
c Encoding variable: aux1761 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7071'
c Var 'aux1761' direct represents '0' with '7071'
c Var 'aux1761' order represents '1' with '7072'
-7071 7072 0
c Var 'aux1761' direct represents '1' with '7073'
7071 -7072 7073 0
-7073 7072 0
-7073 -7071 0
c Var 'aux1761' direct represents '2' with '-7072'
7071 7073 -7072 0
c Encoding variable: aux1762 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7074'
c Var 'aux1762' direct represents '0' with '7074'
c Var 'aux1762' order represents '1' with '7075'
-7074 7075 0
c Var 'aux1762' direct represents '1' with '7076'
7074 -7075 7076 0
-7076 7075 0
-7076 -7074 0
c Var 'aux1762' direct represents '2' with '-7075'
7074 7076 -7075 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7077'
c Var 'aux1763' direct represents '0' with '7077'
c Var 'aux1763' order represents '1' with '7078'
-7077 7078 0
c Var 'aux1763' direct represents '1' with '7079'
7077 -7078 7079 0
-7079 7078 0
-7079 -7077 0
c Var 'aux1763' direct represents '2' with '-7078'
7077 7079 -7078 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7080'
c Var 'aux1764' direct represents '0' with '7080'
c Var 'aux1764' order represents '1' with '7081'
-7080 7081 0
c Var 'aux1764' direct represents '1' with '7082'
7080 -7081 7082 0
-7082 7081 0
-7082 -7080 0
c Var 'aux1764' direct represents '2' with '-7081'
7080 7082 -7081 0
c Encoding variable: aux1765 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1764))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7083'
c Var 'aux1765' direct represents '0' with '7083'
c Var 'aux1765' order represents '1' with '7084'
-7083 7084 0
c Var 'aux1765' direct represents '1' with '7085'
7083 -7084 7085 0
-7085 7084 0
-7085 -7083 0
c Var 'aux1765' order represents '2' with '7086'
-7084 7086 0
c Var 'aux1765' direct represents '2' with '7087'
7084 -7086 7087 0
-7087 7086 0
-7087 -7084 0
c Var 'aux1765' direct represents '3' with '-7086'
7083 7085 7087 -7086 0
c Encoding variable: aux1766 with domain: int(0..4) (representing constraint (aux1761 + aux1763))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7088'
c Var 'aux1766' direct represents '0' with '7088'
c Var 'aux1766' order represents '1' with '7089'
-7088 7089 0
c Var 'aux1766' direct represents '1' with '7090'
7088 -7089 7090 0
-7090 7089 0
-7090 -7088 0
c Var 'aux1766' order represents '2' with '7091'
-7089 7091 0
c Var 'aux1766' direct represents '2' with '7092'
7089 -7091 7092 0
-7092 7091 0
-7092 -7089 0
c Var 'aux1766' order represents '3' with '7093'
-7091 7093 0
c Var 'aux1766' direct represents '3' with '7094'
7091 -7093 7094 0
-7094 7093 0
-7094 -7091 0
c Var 'aux1766' direct represents '4' with '-7093'
7088 7090 7092 7094 -7093 0
c Encoding variable: aux1767 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7095'
c Var 'aux1767' direct represents '0' with '7095'
c Var 'aux1767' order represents '1' with '7096'
-7095 7096 0
c Var 'aux1767' direct represents '1' with '7097'
7095 -7096 7097 0
-7097 7096 0
-7097 -7095 0
c Var 'aux1767' direct represents '2' with '-7096'
7095 7097 -7096 0
c Encoding variable: aux1768 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7098'
c Var 'aux1768' direct represents '0' with '7098'
c Var 'aux1768' order represents '1' with '7099'
-7098 7099 0
c Var 'aux1768' direct represents '1' with '7100'
7098 -7099 7100 0
-7100 7099 0
-7100 -7098 0
c Var 'aux1768' direct represents '2' with '-7099'
7098 7100 -7099 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7101'
c Var 'aux1769' direct represents '0' with '7101'
c Var 'aux1769' order represents '1' with '7102'
-7101 7102 0
c Var 'aux1769' direct represents '1' with '7103'
7101 -7102 7103 0
-7103 7102 0
-7103 -7101 0
c Var 'aux1769' direct represents '2' with '-7102'
7101 7103 -7102 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7104'
c Var 'aux1770' direct represents '0' with '7104'
c Var 'aux1770' order represents '1' with '7105'
-7104 7105 0
c Var 'aux1770' direct represents '1' with '7106'
7104 -7105 7106 0
-7106 7105 0
-7106 -7104 0
c Var 'aux1770' direct represents '2' with '-7105'
7104 7106 -7105 0
c Encoding variable: aux1771 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1770))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7107'
c Var 'aux1771' direct represents '0' with '7107'
c Var 'aux1771' order represents '1' with '7108'
-7107 7108 0
c Var 'aux1771' direct represents '1' with '7109'
7107 -7108 7109 0
-7109 7108 0
-7109 -7107 0
c Var 'aux1771' order represents '2' with '7110'
-7108 7110 0
c Var 'aux1771' direct represents '2' with '7111'
7108 -7110 7111 0
-7111 7110 0
-7111 -7108 0
c Var 'aux1771' direct represents '3' with '-7110'
7107 7109 7111 -7110 0
c Encoding variable: aux1772 with domain: int(0..4) (representing constraint (aux1767 + aux1769))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7112'
c Var 'aux1772' direct represents '0' with '7112'
c Var 'aux1772' order represents '1' with '7113'
-7112 7113 0
c Var 'aux1772' direct represents '1' with '7114'
7112 -7113 7114 0
-7114 7113 0
-7114 -7112 0
c Var 'aux1772' order represents '2' with '7115'
-7113 7115 0
c Var 'aux1772' direct represents '2' with '7116'
7113 -7115 7116 0
-7116 7115 0
-7116 -7113 0
c Var 'aux1772' order represents '3' with '7117'
-7115 7117 0
c Var 'aux1772' direct represents '3' with '7118'
7115 -7117 7118 0
-7118 7117 0
-7118 -7115 0
c Var 'aux1772' direct represents '4' with '-7117'
7112 7114 7116 7118 -7117 0
c Encoding variable: aux1773 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7119'
c Var 'aux1773' direct represents '0' with '7119'
c Var 'aux1773' order represents '1' with '7120'
-7119 7120 0
c Var 'aux1773' direct represents '1' with '7121'
7119 -7120 7121 0
-7121 7120 0
-7121 -7119 0
c Var 'aux1773' direct represents '2' with '-7120'
7119 7121 -7120 0
c Encoding variable: aux1774 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7122'
c Var 'aux1774' direct represents '0' with '7122'
c Var 'aux1774' order represents '1' with '7123'
-7122 7123 0
c Var 'aux1774' direct represents '1' with '7124'
7122 -7123 7124 0
-7124 7123 0
-7124 -7122 0
c Var 'aux1774' direct represents '2' with '-7123'
7122 7124 -7123 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7125'
c Var 'aux1775' direct represents '0' with '7125'
c Var 'aux1775' order represents '1' with '7126'
-7125 7126 0
c Var 'aux1775' direct represents '1' with '7127'
7125 -7126 7127 0
-7127 7126 0
-7127 -7125 0
c Var 'aux1775' direct represents '2' with '-7126'
7125 7127 -7126 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7128'
c Var 'aux1776' direct represents '0' with '7128'
c Var 'aux1776' order represents '1' with '7129'
-7128 7129 0
c Var 'aux1776' direct represents '1' with '7130'
7128 -7129 7130 0
-7130 7129 0
-7130 -7128 0
c Var 'aux1776' direct represents '2' with '-7129'
7128 7130 -7129 0
c Encoding variable: aux1777 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1776))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7131'
c Var 'aux1777' direct represents '0' with '7131'
c Var 'aux1777' order represents '1' with '7132'
-7131 7132 0
c Var 'aux1777' direct represents '1' with '7133'
7131 -7132 7133 0
-7133 7132 0
-7133 -7131 0
c Var 'aux1777' order represents '2' with '7134'
-7132 7134 0
c Var 'aux1777' direct represents '2' with '7135'
7132 -7134 7135 0
-7135 7134 0
-7135 -7132 0
c Var 'aux1777' direct represents '3' with '-7134'
7131 7133 7135 -7134 0
c Encoding variable: aux1778 with domain: int(0..4) (representing constraint (aux1773 + aux1775))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7136'
c Var 'aux1778' direct represents '0' with '7136'
c Var 'aux1778' order represents '1' with '7137'
-7136 7137 0
c Var 'aux1778' direct represents '1' with '7138'
7136 -7137 7138 0
-7138 7137 0
-7138 -7136 0
c Var 'aux1778' order represents '2' with '7139'
-7137 7139 0
c Var 'aux1778' direct represents '2' with '7140'
7137 -7139 7140 0
-7140 7139 0
-7140 -7137 0
c Var 'aux1778' order represents '3' with '7141'
-7139 7141 0
c Var 'aux1778' direct represents '3' with '7142'
7139 -7141 7142 0
-7142 7141 0
-7142 -7139 0
c Var 'aux1778' direct represents '4' with '-7141'
7136 7138 7140 7142 -7141 0
c Encoding variable: aux1779 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7143'
c Var 'aux1779' direct represents '0' with '7143'
c Var 'aux1779' order represents '1' with '7144'
-7143 7144 0
c Var 'aux1779' direct represents '1' with '7145'
7143 -7144 7145 0
-7145 7144 0
-7145 -7143 0
c Var 'aux1779' direct represents '2' with '-7144'
7143 7145 -7144 0
c Encoding variable: aux1780 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7146'
c Var 'aux1780' direct represents '0' with '7146'
c Var 'aux1780' order represents '1' with '7147'
-7146 7147 0
c Var 'aux1780' direct represents '1' with '7148'
7146 -7147 7148 0
-7148 7147 0
-7148 -7146 0
c Var 'aux1780' direct represents '2' with '-7147'
7146 7148 -7147 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7149'
c Var 'aux1781' direct represents '0' with '7149'
c Var 'aux1781' order represents '1' with '7150'
-7149 7150 0
c Var 'aux1781' direct represents '1' with '7151'
7149 -7150 7151 0
-7151 7150 0
-7151 -7149 0
c Var 'aux1781' direct represents '2' with '-7150'
7149 7151 -7150 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7152'
c Var 'aux1782' direct represents '0' with '7152'
c Var 'aux1782' order represents '1' with '7153'
-7152 7153 0
c Var 'aux1782' direct represents '1' with '7154'
7152 -7153 7154 0
-7154 7153 0
-7154 -7152 0
c Var 'aux1782' direct represents '2' with '-7153'
7152 7154 -7153 0
c Encoding variable: aux1783 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1782))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7155'
c Var 'aux1783' direct represents '0' with '7155'
c Var 'aux1783' order represents '1' with '7156'
-7155 7156 0
c Var 'aux1783' direct represents '1' with '7157'
7155 -7156 7157 0
-7157 7156 0
-7157 -7155 0
c Var 'aux1783' order represents '2' with '7158'
-7156 7158 0
c Var 'aux1783' direct represents '2' with '7159'
7156 -7158 7159 0
-7159 7158 0
-7159 -7156 0
c Var 'aux1783' direct represents '3' with '-7158'
7155 7157 7159 -7158 0
c Encoding variable: aux1784 with domain: int(0..4) (representing constraint (aux1779 + aux1781))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7160'
c Var 'aux1784' direct represents '0' with '7160'
c Var 'aux1784' order represents '1' with '7161'
-7160 7161 0
c Var 'aux1784' direct represents '1' with '7162'
7160 -7161 7162 0
-7162 7161 0
-7162 -7160 0
c Var 'aux1784' order represents '2' with '7163'
-7161 7163 0
c Var 'aux1784' direct represents '2' with '7164'
7161 -7163 7164 0
-7164 7163 0
-7164 -7161 0
c Var 'aux1784' order represents '3' with '7165'
-7163 7165 0
c Var 'aux1784' direct represents '3' with '7166'
7163 -7165 7166 0
-7166 7165 0
-7166 -7163 0
c Var 'aux1784' direct represents '4' with '-7165'
7160 7162 7164 7166 -7165 0
c Encoding variable: aux1785 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7167'
c Var 'aux1785' direct represents '0' with '7167'
c Var 'aux1785' order represents '1' with '7168'
-7167 7168 0
c Var 'aux1785' direct represents '1' with '7169'
7167 -7168 7169 0
-7169 7168 0
-7169 -7167 0
c Var 'aux1785' direct represents '2' with '-7168'
7167 7169 -7168 0
c Encoding variable: aux1786 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7170'
c Var 'aux1786' direct represents '0' with '7170'
c Var 'aux1786' order represents '1' with '7171'
-7170 7171 0
c Var 'aux1786' direct represents '1' with '7172'
7170 -7171 7172 0
-7172 7171 0
-7172 -7170 0
c Var 'aux1786' direct represents '2' with '-7171'
7170 7172 -7171 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7173'
c Var 'aux1787' direct represents '0' with '7173'
c Var 'aux1787' order represents '1' with '7174'
-7173 7174 0
c Var 'aux1787' direct represents '1' with '7175'
7173 -7174 7175 0
-7175 7174 0
-7175 -7173 0
c Var 'aux1787' direct represents '2' with '-7174'
7173 7175 -7174 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7176'
c Var 'aux1788' direct represents '0' with '7176'
c Var 'aux1788' order represents '1' with '7177'
-7176 7177 0
c Var 'aux1788' direct represents '1' with '7178'
7176 -7177 7178 0
-7178 7177 0
-7178 -7176 0
c Var 'aux1788' direct represents '2' with '-7177'
7176 7178 -7177 0
c Encoding variable: aux1789 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1788))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7179'
c Var 'aux1789' direct represents '0' with '7179'
c Var 'aux1789' order represents '1' with '7180'
-7179 7180 0
c Var 'aux1789' direct represents '1' with '7181'
7179 -7180 7181 0
-7181 7180 0
-7181 -7179 0
c Var 'aux1789' order represents '2' with '7182'
-7180 7182 0
c Var 'aux1789' direct represents '2' with '7183'
7180 -7182 7183 0
-7183 7182 0
-7183 -7180 0
c Var 'aux1789' direct represents '3' with '-7182'
7179 7181 7183 -7182 0
c Encoding variable: aux1790 with domain: int(0..4) (representing constraint (aux1785 + aux1787))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7184'
c Var 'aux1790' direct represents '0' with '7184'
c Var 'aux1790' order represents '1' with '7185'
-7184 7185 0
c Var 'aux1790' direct represents '1' with '7186'
7184 -7185 7186 0
-7186 7185 0
-7186 -7184 0
c Var 'aux1790' order represents '2' with '7187'
-7185 7187 0
c Var 'aux1790' direct represents '2' with '7188'
7185 -7187 7188 0
-7188 7187 0
-7188 -7185 0
c Var 'aux1790' order represents '3' with '7189'
-7187 7189 0
c Var 'aux1790' direct represents '3' with '7190'
7187 -7189 7190 0
-7190 7189 0
-7190 -7187 0
c Var 'aux1790' direct represents '4' with '-7189'
7184 7186 7188 7190 -7189 0
c Encoding variable: aux1791 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7191'
c Var 'aux1791' direct represents '0' with '7191'
c Var 'aux1791' order represents '1' with '7192'
-7191 7192 0
c Var 'aux1791' direct represents '1' with '7193'
7191 -7192 7193 0
-7193 7192 0
-7193 -7191 0
c Var 'aux1791' direct represents '2' with '-7192'
7191 7193 -7192 0
c Encoding variable: aux1792 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7194'
c Var 'aux1792' direct represents '0' with '7194'
c Var 'aux1792' order represents '1' with '7195'
-7194 7195 0
c Var 'aux1792' direct represents '1' with '7196'
7194 -7195 7196 0
-7196 7195 0
-7196 -7194 0
c Var 'aux1792' direct represents '2' with '-7195'
7194 7196 -7195 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7197'
c Var 'aux1793' direct represents '0' with '7197'
c Var 'aux1793' order represents '1' with '7198'
-7197 7198 0
c Var 'aux1793' direct represents '1' with '7199'
7197 -7198 7199 0
-7199 7198 0
-7199 -7197 0
c Var 'aux1793' direct represents '2' with '-7198'
7197 7199 -7198 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7200'
c Var 'aux1794' direct represents '0' with '7200'
c Var 'aux1794' order represents '1' with '7201'
-7200 7201 0
c Var 'aux1794' direct represents '1' with '7202'
7200 -7201 7202 0
-7202 7201 0
-7202 -7200 0
c Var 'aux1794' direct represents '2' with '-7201'
7200 7202 -7201 0
c Encoding variable: aux1795 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1794))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7203'
c Var 'aux1795' direct represents '0' with '7203'
c Var 'aux1795' order represents '1' with '7204'
-7203 7204 0
c Var 'aux1795' direct represents '1' with '7205'
7203 -7204 7205 0
-7205 7204 0
-7205 -7203 0
c Var 'aux1795' order represents '2' with '7206'
-7204 7206 0
c Var 'aux1795' direct represents '2' with '7207'
7204 -7206 7207 0
-7207 7206 0
-7207 -7204 0
c Var 'aux1795' direct represents '3' with '-7206'
7203 7205 7207 -7206 0
c Encoding variable: aux1796 with domain: int(0..4) (representing constraint (aux1791 + aux1793))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7208'
c Var 'aux1796' direct represents '0' with '7208'
c Var 'aux1796' order represents '1' with '7209'
-7208 7209 0
c Var 'aux1796' direct represents '1' with '7210'
7208 -7209 7210 0
-7210 7209 0
-7210 -7208 0
c Var 'aux1796' order represents '2' with '7211'
-7209 7211 0
c Var 'aux1796' direct represents '2' with '7212'
7209 -7211 7212 0
-7212 7211 0
-7212 -7209 0
c Var 'aux1796' order represents '3' with '7213'
-7211 7213 0
c Var 'aux1796' direct represents '3' with '7214'
7211 -7213 7214 0
-7214 7213 0
-7214 -7211 0
c Var 'aux1796' direct represents '4' with '-7213'
7208 7210 7212 7214 -7213 0
c Encoding variable: aux1797 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7215'
c Var 'aux1797' direct represents '0' with '7215'
c Var 'aux1797' order represents '1' with '7216'
-7215 7216 0
c Var 'aux1797' direct represents '1' with '7217'
7215 -7216 7217 0
-7217 7216 0
-7217 -7215 0
c Var 'aux1797' direct represents '2' with '-7216'
7215 7217 -7216 0
c Encoding variable: aux1798 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7218'
c Var 'aux1798' direct represents '0' with '7218'
c Var 'aux1798' order represents '1' with '7219'
-7218 7219 0
c Var 'aux1798' direct represents '1' with '7220'
7218 -7219 7220 0
-7220 7219 0
-7220 -7218 0
c Var 'aux1798' direct represents '2' with '-7219'
7218 7220 -7219 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7221'
c Var 'aux1799' direct represents '0' with '7221'
c Var 'aux1799' order represents '1' with '7222'
-7221 7222 0
c Var 'aux1799' direct represents '1' with '7223'
7221 -7222 7223 0
-7223 7222 0
-7223 -7221 0
c Var 'aux1799' direct represents '2' with '-7222'
7221 7223 -7222 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7224'
c Var 'aux1800' direct represents '0' with '7224'
c Var 'aux1800' order represents '1' with '7225'
-7224 7225 0
c Var 'aux1800' direct represents '1' with '7226'
7224 -7225 7226 0
-7226 7225 0
-7226 -7224 0
c Var 'aux1800' direct represents '2' with '-7225'
7224 7226 -7225 0
c Encoding variable: aux1801 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1800))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7227'
c Var 'aux1801' direct represents '0' with '7227'
c Var 'aux1801' order represents '1' with '7228'
-7227 7228 0
c Var 'aux1801' direct represents '1' with '7229'
7227 -7228 7229 0
-7229 7228 0
-7229 -7227 0
c Var 'aux1801' order represents '2' with '7230'
-7228 7230 0
c Var 'aux1801' direct represents '2' with '7231'
7228 -7230 7231 0
-7231 7230 0
-7231 -7228 0
c Var 'aux1801' direct represents '3' with '-7230'
7227 7229 7231 -7230 0
c Encoding variable: aux1802 with domain: int(0..4) (representing constraint (aux1797 + aux1799))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7232'
c Var 'aux1802' direct represents '0' with '7232'
c Var 'aux1802' order represents '1' with '7233'
-7232 7233 0
c Var 'aux1802' direct represents '1' with '7234'
7232 -7233 7234 0
-7234 7233 0
-7234 -7232 0
c Var 'aux1802' order represents '2' with '7235'
-7233 7235 0
c Var 'aux1802' direct represents '2' with '7236'
7233 -7235 7236 0
-7236 7235 0
-7236 -7233 0
c Var 'aux1802' order represents '3' with '7237'
-7235 7237 0
c Var 'aux1802' direct represents '3' with '7238'
7235 -7237 7238 0
-7238 7237 0
-7238 -7235 0
c Var 'aux1802' direct represents '4' with '-7237'
7232 7234 7236 7238 -7237 0
c Encoding variable: aux1803 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7239'
c Var 'aux1803' direct represents '0' with '7239'
c Var 'aux1803' order represents '1' with '7240'
-7239 7240 0
c Var 'aux1803' direct represents '1' with '7241'
7239 -7240 7241 0
-7241 7240 0
-7241 -7239 0
c Var 'aux1803' direct represents '2' with '-7240'
7239 7241 -7240 0
c Encoding variable: aux1804 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7242'
c Var 'aux1804' direct represents '0' with '7242'
c Var 'aux1804' order represents '1' with '7243'
-7242 7243 0
c Var 'aux1804' direct represents '1' with '7244'
7242 -7243 7244 0
-7244 7243 0
-7244 -7242 0
c Var 'aux1804' direct represents '2' with '-7243'
7242 7244 -7243 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7245'
c Var 'aux1805' direct represents '0' with '7245'
c Var 'aux1805' order represents '1' with '7246'
-7245 7246 0
c Var 'aux1805' direct represents '1' with '7247'
7245 -7246 7247 0
-7247 7246 0
-7247 -7245 0
c Var 'aux1805' direct represents '2' with '-7246'
7245 7247 -7246 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7248'
c Var 'aux1806' direct represents '0' with '7248'
c Var 'aux1806' order represents '1' with '7249'
-7248 7249 0
c Var 'aux1806' direct represents '1' with '7250'
7248 -7249 7250 0
-7250 7249 0
-7250 -7248 0
c Var 'aux1806' direct represents '2' with '-7249'
7248 7250 -7249 0
c Encoding variable: aux1807 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1806))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7251'
c Var 'aux1807' direct represents '0' with '7251'
c Var 'aux1807' order represents '1' with '7252'
-7251 7252 0
c Var 'aux1807' direct represents '1' with '7253'
7251 -7252 7253 0
-7253 7252 0
-7253 -7251 0
c Var 'aux1807' order represents '2' with '7254'
-7252 7254 0
c Var 'aux1807' direct represents '2' with '7255'
7252 -7254 7255 0
-7255 7254 0
-7255 -7252 0
c Var 'aux1807' direct represents '3' with '-7254'
7251 7253 7255 -7254 0
c Encoding variable: aux1808 with domain: int(0..4) (representing constraint (aux1803 + aux1805))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7256'
c Var 'aux1808' direct represents '0' with '7256'
c Var 'aux1808' order represents '1' with '7257'
-7256 7257 0
c Var 'aux1808' direct represents '1' with '7258'
7256 -7257 7258 0
-7258 7257 0
-7258 -7256 0
c Var 'aux1808' order represents '2' with '7259'
-7257 7259 0
c Var 'aux1808' direct represents '2' with '7260'
7257 -7259 7260 0
-7260 7259 0
-7260 -7257 0
c Var 'aux1808' order represents '3' with '7261'
-7259 7261 0
c Var 'aux1808' direct represents '3' with '7262'
7259 -7261 7262 0
-7262 7261 0
-7262 -7259 0
c Var 'aux1808' direct represents '4' with '-7261'
7256 7258 7260 7262 -7261 0
c Encoding variable: aux1809 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7263'
c Var 'aux1809' direct represents '0' with '7263'
c Var 'aux1809' order represents '1' with '7264'
-7263 7264 0
c Var 'aux1809' direct represents '1' with '7265'
7263 -7264 7265 0
-7265 7264 0
-7265 -7263 0
c Var 'aux1809' direct represents '2' with '-7264'
7263 7265 -7264 0
c Encoding variable: aux1810 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7266'
c Var 'aux1810' direct represents '0' with '7266'
c Var 'aux1810' order represents '1' with '7267'
-7266 7267 0
c Var 'aux1810' direct represents '1' with '7268'
7266 -7267 7268 0
-7268 7267 0
-7268 -7266 0
c Var 'aux1810' direct represents '2' with '-7267'
7266 7268 -7267 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7269'
c Var 'aux1811' direct represents '0' with '7269'
c Var 'aux1811' order represents '1' with '7270'
-7269 7270 0
c Var 'aux1811' direct represents '1' with '7271'
7269 -7270 7271 0
-7271 7270 0
-7271 -7269 0
c Var 'aux1811' direct represents '2' with '-7270'
7269 7271 -7270 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7272'
c Var 'aux1812' direct represents '0' with '7272'
c Var 'aux1812' order represents '1' with '7273'
-7272 7273 0
c Var 'aux1812' direct represents '1' with '7274'
7272 -7273 7274 0
-7274 7273 0
-7274 -7272 0
c Var 'aux1812' direct represents '2' with '-7273'
7272 7274 -7273 0
c Encoding variable: aux1813 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1812))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7275'
c Var 'aux1813' direct represents '0' with '7275'
c Var 'aux1813' order represents '1' with '7276'
-7275 7276 0
c Var 'aux1813' direct represents '1' with '7277'
7275 -7276 7277 0
-7277 7276 0
-7277 -7275 0
c Var 'aux1813' order represents '2' with '7278'
-7276 7278 0
c Var 'aux1813' direct represents '2' with '7279'
7276 -7278 7279 0
-7279 7278 0
-7279 -7276 0
c Var 'aux1813' direct represents '3' with '-7278'
7275 7277 7279 -7278 0
c Encoding variable: aux1814 with domain: int(0..4) (representing constraint (aux1809 + aux1811))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7280'
c Var 'aux1814' direct represents '0' with '7280'
c Var 'aux1814' order represents '1' with '7281'
-7280 7281 0
c Var 'aux1814' direct represents '1' with '7282'
7280 -7281 7282 0
-7282 7281 0
-7282 -7280 0
c Var 'aux1814' order represents '2' with '7283'
-7281 7283 0
c Var 'aux1814' direct represents '2' with '7284'
7281 -7283 7284 0
-7284 7283 0
-7284 -7281 0
c Var 'aux1814' order represents '3' with '7285'
-7283 7285 0
c Var 'aux1814' direct represents '3' with '7286'
7283 -7285 7286 0
-7286 7285 0
-7286 -7283 0
c Var 'aux1814' direct represents '4' with '-7285'
7280 7282 7284 7286 -7285 0
c Encoding variable: aux1815 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7287'
c Var 'aux1815' direct represents '0' with '7287'
c Var 'aux1815' order represents '1' with '7288'
-7287 7288 0
c Var 'aux1815' direct represents '1' with '7289'
7287 -7288 7289 0
-7289 7288 0
-7289 -7287 0
c Var 'aux1815' direct represents '2' with '-7288'
7287 7289 -7288 0
c Encoding variable: aux1816 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7290'
c Var 'aux1816' direct represents '0' with '7290'
c Var 'aux1816' order represents '1' with '7291'
-7290 7291 0
c Var 'aux1816' direct represents '1' with '7292'
7290 -7291 7292 0
-7292 7291 0
-7292 -7290 0
c Var 'aux1816' direct represents '2' with '-7291'
7290 7292 -7291 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7293'
c Var 'aux1817' direct represents '0' with '7293'
c Var 'aux1817' order represents '1' with '7294'
-7293 7294 0
c Var 'aux1817' direct represents '1' with '7295'
7293 -7294 7295 0
-7295 7294 0
-7295 -7293 0
c Var 'aux1817' direct represents '2' with '-7294'
7293 7295 -7294 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7296'
c Var 'aux1818' direct represents '0' with '7296'
c Var 'aux1818' order represents '1' with '7297'
-7296 7297 0
c Var 'aux1818' direct represents '1' with '7298'
7296 -7297 7298 0
-7298 7297 0
-7298 -7296 0
c Var 'aux1818' direct represents '2' with '-7297'
7296 7298 -7297 0
c Encoding variable: aux1819 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1818))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7299'
c Var 'aux1819' direct represents '0' with '7299'
c Var 'aux1819' order represents '1' with '7300'
-7299 7300 0
c Var 'aux1819' direct represents '1' with '7301'
7299 -7300 7301 0
-7301 7300 0
-7301 -7299 0
c Var 'aux1819' order represents '2' with '7302'
-7300 7302 0
c Var 'aux1819' direct represents '2' with '7303'
7300 -7302 7303 0
-7303 7302 0
-7303 -7300 0
c Var 'aux1819' direct represents '3' with '-7302'
7299 7301 7303 -7302 0
c Encoding variable: aux1820 with domain: int(0..4) (representing constraint (aux1815 + aux1817))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7304'
c Var 'aux1820' direct represents '0' with '7304'
c Var 'aux1820' order represents '1' with '7305'
-7304 7305 0
c Var 'aux1820' direct represents '1' with '7306'
7304 -7305 7306 0
-7306 7305 0
-7306 -7304 0
c Var 'aux1820' order represents '2' with '7307'
-7305 7307 0
c Var 'aux1820' direct represents '2' with '7308'
7305 -7307 7308 0
-7308 7307 0
-7308 -7305 0
c Var 'aux1820' order represents '3' with '7309'
-7307 7309 0
c Var 'aux1820' direct represents '3' with '7310'
7307 -7309 7310 0
-7310 7309 0
-7310 -7307 0
c Var 'aux1820' direct represents '4' with '-7309'
7304 7306 7308 7310 -7309 0
c Encoding variable: aux1821 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7311'
c Var 'aux1821' direct represents '0' with '7311'
c Var 'aux1821' order represents '1' with '7312'
-7311 7312 0
c Var 'aux1821' direct represents '1' with '7313'
7311 -7312 7313 0
-7313 7312 0
-7313 -7311 0
c Var 'aux1821' direct represents '2' with '-7312'
7311 7313 -7312 0
c Encoding variable: aux1822 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7314'
c Var 'aux1822' direct represents '0' with '7314'
c Var 'aux1822' order represents '1' with '7315'
-7314 7315 0
c Var 'aux1822' direct represents '1' with '7316'
7314 -7315 7316 0
-7316 7315 0
-7316 -7314 0
c Var 'aux1822' direct represents '2' with '-7315'
7314 7316 -7315 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7317'
c Var 'aux1823' direct represents '0' with '7317'
c Var 'aux1823' order represents '1' with '7318'
-7317 7318 0
c Var 'aux1823' direct represents '1' with '7319'
7317 -7318 7319 0
-7319 7318 0
-7319 -7317 0
c Var 'aux1823' direct represents '2' with '-7318'
7317 7319 -7318 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7320'
c Var 'aux1824' direct represents '0' with '7320'
c Var 'aux1824' order represents '1' with '7321'
-7320 7321 0
c Var 'aux1824' direct represents '1' with '7322'
7320 -7321 7322 0
-7322 7321 0
-7322 -7320 0
c Var 'aux1824' direct represents '2' with '-7321'
7320 7322 -7321 0
c Encoding variable: aux1825 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1824))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7323'
c Var 'aux1825' direct represents '0' with '7323'
c Var 'aux1825' order represents '1' with '7324'
-7323 7324 0
c Var 'aux1825' direct represents '1' with '7325'
7323 -7324 7325 0
-7325 7324 0
-7325 -7323 0
c Var 'aux1825' order represents '2' with '7326'
-7324 7326 0
c Var 'aux1825' direct represents '2' with '7327'
7324 -7326 7327 0
-7327 7326 0
-7327 -7324 0
c Var 'aux1825' direct represents '3' with '-7326'
7323 7325 7327 -7326 0
c Encoding variable: aux1826 with domain: int(0..4) (representing constraint (aux1821 + aux1823))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7328'
c Var 'aux1826' direct represents '0' with '7328'
c Var 'aux1826' order represents '1' with '7329'
-7328 7329 0
c Var 'aux1826' direct represents '1' with '7330'
7328 -7329 7330 0
-7330 7329 0
-7330 -7328 0
c Var 'aux1826' order represents '2' with '7331'
-7329 7331 0
c Var 'aux1826' direct represents '2' with '7332'
7329 -7331 7332 0
-7332 7331 0
-7332 -7329 0
c Var 'aux1826' order represents '3' with '7333'
-7331 7333 0
c Var 'aux1826' direct represents '3' with '7334'
7331 -7333 7334 0
-7334 7333 0
-7334 -7331 0
c Var 'aux1826' direct represents '4' with '-7333'
7328 7330 7332 7334 -7333 0
c Encoding variable: aux1827 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7335'
c Var 'aux1827' direct represents '0' with '7335'
c Var 'aux1827' order represents '1' with '7336'
-7335 7336 0
c Var 'aux1827' direct represents '1' with '7337'
7335 -7336 7337 0
-7337 7336 0
-7337 -7335 0
c Var 'aux1827' direct represents '2' with '-7336'
7335 7337 -7336 0
c Encoding variable: aux1828 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7338'
c Var 'aux1828' direct represents '0' with '7338'
c Var 'aux1828' order represents '1' with '7339'
-7338 7339 0
c Var 'aux1828' direct represents '1' with '7340'
7338 -7339 7340 0
-7340 7339 0
-7340 -7338 0
c Var 'aux1828' direct represents '2' with '-7339'
7338 7340 -7339 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7341'
c Var 'aux1829' direct represents '0' with '7341'
c Var 'aux1829' order represents '1' with '7342'
-7341 7342 0
c Var 'aux1829' direct represents '1' with '7343'
7341 -7342 7343 0
-7343 7342 0
-7343 -7341 0
c Var 'aux1829' direct represents '2' with '-7342'
7341 7343 -7342 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7344'
c Var 'aux1830' direct represents '0' with '7344'
c Var 'aux1830' order represents '1' with '7345'
-7344 7345 0
c Var 'aux1830' direct represents '1' with '7346'
7344 -7345 7346 0
-7346 7345 0
-7346 -7344 0
c Var 'aux1830' direct represents '2' with '-7345'
7344 7346 -7345 0
c Encoding variable: aux1831 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1830))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7347'
c Var 'aux1831' direct represents '0' with '7347'
c Var 'aux1831' order represents '1' with '7348'
-7347 7348 0
c Var 'aux1831' direct represents '1' with '7349'
7347 -7348 7349 0
-7349 7348 0
-7349 -7347 0
c Var 'aux1831' order represents '2' with '7350'
-7348 7350 0
c Var 'aux1831' direct represents '2' with '7351'
7348 -7350 7351 0
-7351 7350 0
-7351 -7348 0
c Var 'aux1831' direct represents '3' with '-7350'
7347 7349 7351 -7350 0
c Encoding variable: aux1832 with domain: int(0..4) (representing constraint (aux1827 + aux1829))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7352'
c Var 'aux1832' direct represents '0' with '7352'
c Var 'aux1832' order represents '1' with '7353'
-7352 7353 0
c Var 'aux1832' direct represents '1' with '7354'
7352 -7353 7354 0
-7354 7353 0
-7354 -7352 0
c Var 'aux1832' order represents '2' with '7355'
-7353 7355 0
c Var 'aux1832' direct represents '2' with '7356'
7353 -7355 7356 0
-7356 7355 0
-7356 -7353 0
c Var 'aux1832' order represents '3' with '7357'
-7355 7357 0
c Var 'aux1832' direct represents '3' with '7358'
7355 -7357 7358 0
-7358 7357 0
-7358 -7355 0
c Var 'aux1832' direct represents '4' with '-7357'
7352 7354 7356 7358 -7357 0
c Encoding variable: aux1833 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7359'
c Var 'aux1833' direct represents '0' with '7359'
c Var 'aux1833' order represents '1' with '7360'
-7359 7360 0
c Var 'aux1833' direct represents '1' with '7361'
7359 -7360 7361 0
-7361 7360 0
-7361 -7359 0
c Var 'aux1833' direct represents '2' with '-7360'
7359 7361 -7360 0
c Encoding variable: aux1834 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7362'
c Var 'aux1834' direct represents '0' with '7362'
c Var 'aux1834' order represents '1' with '7363'
-7362 7363 0
c Var 'aux1834' direct represents '1' with '7364'
7362 -7363 7364 0
-7364 7363 0
-7364 -7362 0
c Var 'aux1834' direct represents '2' with '-7363'
7362 7364 -7363 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7365'
c Var 'aux1835' direct represents '0' with '7365'
c Var 'aux1835' order represents '1' with '7366'
-7365 7366 0
c Var 'aux1835' direct represents '1' with '7367'
7365 -7366 7367 0
-7367 7366 0
-7367 -7365 0
c Var 'aux1835' direct represents '2' with '-7366'
7365 7367 -7366 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7368'
c Var 'aux1836' direct represents '0' with '7368'
c Var 'aux1836' order represents '1' with '7369'
-7368 7369 0
c Var 'aux1836' direct represents '1' with '7370'
7368 -7369 7370 0
-7370 7369 0
-7370 -7368 0
c Var 'aux1836' direct represents '2' with '-7369'
7368 7370 -7369 0
c Encoding variable: aux1837 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1836))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7371'
c Var 'aux1837' direct represents '0' with '7371'
c Var 'aux1837' order represents '1' with '7372'
-7371 7372 0
c Var 'aux1837' direct represents '1' with '7373'
7371 -7372 7373 0
-7373 7372 0
-7373 -7371 0
c Var 'aux1837' order represents '2' with '7374'
-7372 7374 0
c Var 'aux1837' direct represents '2' with '7375'
7372 -7374 7375 0
-7375 7374 0
-7375 -7372 0
c Var 'aux1837' direct represents '3' with '-7374'
7371 7373 7375 -7374 0
c Encoding variable: aux1838 with domain: int(0..4) (representing constraint (aux1833 + aux1835))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7376'
c Var 'aux1838' direct represents '0' with '7376'
c Var 'aux1838' order represents '1' with '7377'
-7376 7377 0
c Var 'aux1838' direct represents '1' with '7378'
7376 -7377 7378 0
-7378 7377 0
-7378 -7376 0
c Var 'aux1838' order represents '2' with '7379'
-7377 7379 0
c Var 'aux1838' direct represents '2' with '7380'
7377 -7379 7380 0
-7380 7379 0
-7380 -7377 0
c Var 'aux1838' order represents '3' with '7381'
-7379 7381 0
c Var 'aux1838' direct represents '3' with '7382'
7379 -7381 7382 0
-7382 7381 0
-7382 -7379 0
c Var 'aux1838' direct represents '4' with '-7381'
7376 7378 7380 7382 -7381 0
c Encoding variable: aux1839 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7383'
c Var 'aux1839' direct represents '0' with '7383'
c Var 'aux1839' order represents '1' with '7384'
-7383 7384 0
c Var 'aux1839' direct represents '1' with '7385'
7383 -7384 7385 0
-7385 7384 0
-7385 -7383 0
c Var 'aux1839' direct represents '2' with '-7384'
7383 7385 -7384 0
c Encoding variable: aux1840 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7386'
c Var 'aux1840' direct represents '0' with '7386'
c Var 'aux1840' order represents '1' with '7387'
-7386 7387 0
c Var 'aux1840' direct represents '1' with '7388'
7386 -7387 7388 0
-7388 7387 0
-7388 -7386 0
c Var 'aux1840' direct represents '2' with '-7387'
7386 7388 -7387 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7389'
c Var 'aux1841' direct represents '0' with '7389'
c Var 'aux1841' order represents '1' with '7390'
-7389 7390 0
c Var 'aux1841' direct represents '1' with '7391'
7389 -7390 7391 0
-7391 7390 0
-7391 -7389 0
c Var 'aux1841' direct represents '2' with '-7390'
7389 7391 -7390 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7392'
c Var 'aux1842' direct represents '0' with '7392'
c Var 'aux1842' order represents '1' with '7393'
-7392 7393 0
c Var 'aux1842' direct represents '1' with '7394'
7392 -7393 7394 0
-7394 7393 0
-7394 -7392 0
c Var 'aux1842' direct represents '2' with '-7393'
7392 7394 -7393 0
c Encoding variable: aux1843 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1842))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7395'
c Var 'aux1843' direct represents '0' with '7395'
c Var 'aux1843' order represents '1' with '7396'
-7395 7396 0
c Var 'aux1843' direct represents '1' with '7397'
7395 -7396 7397 0
-7397 7396 0
-7397 -7395 0
c Var 'aux1843' order represents '2' with '7398'
-7396 7398 0
c Var 'aux1843' direct represents '2' with '7399'
7396 -7398 7399 0
-7399 7398 0
-7399 -7396 0
c Var 'aux1843' direct represents '3' with '-7398'
7395 7397 7399 -7398 0
c Encoding variable: aux1844 with domain: int(0..4) (representing constraint (aux1839 + aux1841))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7400'
c Var 'aux1844' direct represents '0' with '7400'
c Var 'aux1844' order represents '1' with '7401'
-7400 7401 0
c Var 'aux1844' direct represents '1' with '7402'
7400 -7401 7402 0
-7402 7401 0
-7402 -7400 0
c Var 'aux1844' order represents '2' with '7403'
-7401 7403 0
c Var 'aux1844' direct represents '2' with '7404'
7401 -7403 7404 0
-7404 7403 0
-7404 -7401 0
c Var 'aux1844' order represents '3' with '7405'
-7403 7405 0
c Var 'aux1844' direct represents '3' with '7406'
7403 -7405 7406 0
-7406 7405 0
-7406 -7403 0
c Var 'aux1844' direct represents '4' with '-7405'
7400 7402 7404 7406 -7405 0
c Encoding variable: aux1845 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7407'
c Var 'aux1845' direct represents '0' with '7407'
c Var 'aux1845' order represents '1' with '7408'
-7407 7408 0
c Var 'aux1845' direct represents '1' with '7409'
7407 -7408 7409 0
-7409 7408 0
-7409 -7407 0
c Var 'aux1845' direct represents '2' with '-7408'
7407 7409 -7408 0
c Encoding variable: aux1846 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7410'
c Var 'aux1846' direct represents '0' with '7410'
c Var 'aux1846' order represents '1' with '7411'
-7410 7411 0
c Var 'aux1846' direct represents '1' with '7412'
7410 -7411 7412 0
-7412 7411 0
-7412 -7410 0
c Var 'aux1846' direct represents '2' with '-7411'
7410 7412 -7411 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7413'
c Var 'aux1847' direct represents '0' with '7413'
c Var 'aux1847' order represents '1' with '7414'
-7413 7414 0
c Var 'aux1847' direct represents '1' with '7415'
7413 -7414 7415 0
-7415 7414 0
-7415 -7413 0
c Var 'aux1847' direct represents '2' with '-7414'
7413 7415 -7414 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7416'
c Var 'aux1848' direct represents '0' with '7416'
c Var 'aux1848' order represents '1' with '7417'
-7416 7417 0
c Var 'aux1848' direct represents '1' with '7418'
7416 -7417 7418 0
-7418 7417 0
-7418 -7416 0
c Var 'aux1848' direct represents '2' with '-7417'
7416 7418 -7417 0
c Encoding variable: aux1849 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1848))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7419'
c Var 'aux1849' direct represents '0' with '7419'
c Var 'aux1849' order represents '1' with '7420'
-7419 7420 0
c Var 'aux1849' direct represents '1' with '7421'
7419 -7420 7421 0
-7421 7420 0
-7421 -7419 0
c Var 'aux1849' order represents '2' with '7422'
-7420 7422 0
c Var 'aux1849' direct represents '2' with '7423'
7420 -7422 7423 0
-7423 7422 0
-7423 -7420 0
c Var 'aux1849' direct represents '3' with '-7422'
7419 7421 7423 -7422 0
c Encoding variable: aux1850 with domain: int(0..4) (representing constraint (aux1845 + aux1847))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7424'
c Var 'aux1850' direct represents '0' with '7424'
c Var 'aux1850' order represents '1' with '7425'
-7424 7425 0
c Var 'aux1850' direct represents '1' with '7426'
7424 -7425 7426 0
-7426 7425 0
-7426 -7424 0
c Var 'aux1850' order represents '2' with '7427'
-7425 7427 0
c Var 'aux1850' direct represents '2' with '7428'
7425 -7427 7428 0
-7428 7427 0
-7428 -7425 0
c Var 'aux1850' order represents '3' with '7429'
-7427 7429 0
c Var 'aux1850' direct represents '3' with '7430'
7427 -7429 7430 0
-7430 7429 0
-7430 -7427 0
c Var 'aux1850' direct represents '4' with '-7429'
7424 7426 7428 7430 -7429 0
c Encoding variable: aux1851 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7431'
c Var 'aux1851' direct represents '0' with '7431'
c Var 'aux1851' order represents '1' with '7432'
-7431 7432 0
c Var 'aux1851' direct represents '1' with '7433'
7431 -7432 7433 0
-7433 7432 0
-7433 -7431 0
c Var 'aux1851' direct represents '2' with '-7432'
7431 7433 -7432 0
c Encoding variable: aux1852 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7434'
c Var 'aux1852' direct represents '0' with '7434'
c Var 'aux1852' order represents '1' with '7435'
-7434 7435 0
c Var 'aux1852' direct represents '1' with '7436'
7434 -7435 7436 0
-7436 7435 0
-7436 -7434 0
c Var 'aux1852' direct represents '2' with '-7435'
7434 7436 -7435 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7437'
c Var 'aux1853' direct represents '0' with '7437'
c Var 'aux1853' order represents '1' with '7438'
-7437 7438 0
c Var 'aux1853' direct represents '1' with '7439'
7437 -7438 7439 0
-7439 7438 0
-7439 -7437 0
c Var 'aux1853' direct represents '2' with '-7438'
7437 7439 -7438 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7440'
c Var 'aux1854' direct represents '0' with '7440'
c Var 'aux1854' order represents '1' with '7441'
-7440 7441 0
c Var 'aux1854' direct represents '1' with '7442'
7440 -7441 7442 0
-7442 7441 0
-7442 -7440 0
c Var 'aux1854' direct represents '2' with '-7441'
7440 7442 -7441 0
c Encoding variable: aux1855 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1854))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7443'
c Var 'aux1855' direct represents '0' with '7443'
c Var 'aux1855' order represents '1' with '7444'
-7443 7444 0
c Var 'aux1855' direct represents '1' with '7445'
7443 -7444 7445 0
-7445 7444 0
-7445 -7443 0
c Var 'aux1855' order represents '2' with '7446'
-7444 7446 0
c Var 'aux1855' direct represents '2' with '7447'
7444 -7446 7447 0
-7447 7446 0
-7447 -7444 0
c Var 'aux1855' direct represents '3' with '-7446'
7443 7445 7447 -7446 0
c Encoding variable: aux1856 with domain: int(0..4) (representing constraint (aux1851 + aux1853))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7448'
c Var 'aux1856' direct represents '0' with '7448'
c Var 'aux1856' order represents '1' with '7449'
-7448 7449 0
c Var 'aux1856' direct represents '1' with '7450'
7448 -7449 7450 0
-7450 7449 0
-7450 -7448 0
c Var 'aux1856' order represents '2' with '7451'
-7449 7451 0
c Var 'aux1856' direct represents '2' with '7452'
7449 -7451 7452 0
-7452 7451 0
-7452 -7449 0
c Var 'aux1856' order represents '3' with '7453'
-7451 7453 0
c Var 'aux1856' direct represents '3' with '7454'
7451 -7453 7454 0
-7454 7453 0
-7454 -7451 0
c Var 'aux1856' direct represents '4' with '-7453'
7448 7450 7452 7454 -7453 0
c Encoding variable: aux1857 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7455'
c Var 'aux1857' direct represents '0' with '7455'
c Var 'aux1857' order represents '1' with '7456'
-7455 7456 0
c Var 'aux1857' direct represents '1' with '7457'
7455 -7456 7457 0
-7457 7456 0
-7457 -7455 0
c Var 'aux1857' direct represents '2' with '-7456'
7455 7457 -7456 0
c Encoding variable: aux1858 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7458'
c Var 'aux1858' direct represents '0' with '7458'
c Var 'aux1858' order represents '1' with '7459'
-7458 7459 0
c Var 'aux1858' direct represents '1' with '7460'
7458 -7459 7460 0
-7460 7459 0
-7460 -7458 0
c Var 'aux1858' direct represents '2' with '-7459'
7458 7460 -7459 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7461'
c Var 'aux1859' direct represents '0' with '7461'
c Var 'aux1859' order represents '1' with '7462'
-7461 7462 0
c Var 'aux1859' direct represents '1' with '7463'
7461 -7462 7463 0
-7463 7462 0
-7463 -7461 0
c Var 'aux1859' direct represents '2' with '-7462'
7461 7463 -7462 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7464'
c Var 'aux1860' direct represents '0' with '7464'
c Var 'aux1860' order represents '1' with '7465'
-7464 7465 0
c Var 'aux1860' direct represents '1' with '7466'
7464 -7465 7466 0
-7466 7465 0
-7466 -7464 0
c Var 'aux1860' direct represents '2' with '-7465'
7464 7466 -7465 0
c Encoding variable: aux1861 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1860))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7467'
c Var 'aux1861' direct represents '0' with '7467'
c Var 'aux1861' order represents '1' with '7468'
-7467 7468 0
c Var 'aux1861' direct represents '1' with '7469'
7467 -7468 7469 0
-7469 7468 0
-7469 -7467 0
c Var 'aux1861' order represents '2' with '7470'
-7468 7470 0
c Var 'aux1861' direct represents '2' with '7471'
7468 -7470 7471 0
-7471 7470 0
-7471 -7468 0
c Var 'aux1861' direct represents '3' with '-7470'
7467 7469 7471 -7470 0
c Encoding variable: aux1862 with domain: int(0..4) (representing constraint (aux1857 + aux1859))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7472'
c Var 'aux1862' direct represents '0' with '7472'
c Var 'aux1862' order represents '1' with '7473'
-7472 7473 0
c Var 'aux1862' direct represents '1' with '7474'
7472 -7473 7474 0
-7474 7473 0
-7474 -7472 0
c Var 'aux1862' order represents '2' with '7475'
-7473 7475 0
c Var 'aux1862' direct represents '2' with '7476'
7473 -7475 7476 0
-7476 7475 0
-7476 -7473 0
c Var 'aux1862' order represents '3' with '7477'
-7475 7477 0
c Var 'aux1862' direct represents '3' with '7478'
7475 -7477 7478 0
-7478 7477 0
-7478 -7475 0
c Var 'aux1862' direct represents '4' with '-7477'
7472 7474 7476 7478 -7477 0
c Encoding variable: aux1863 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7479'
c Var 'aux1863' direct represents '0' with '7479'
c Var 'aux1863' order represents '1' with '7480'
-7479 7480 0
c Var 'aux1863' direct represents '1' with '7481'
7479 -7480 7481 0
-7481 7480 0
-7481 -7479 0
c Var 'aux1863' direct represents '2' with '-7480'
7479 7481 -7480 0
c Encoding variable: aux1864 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7482'
c Var 'aux1864' direct represents '0' with '7482'
c Var 'aux1864' order represents '1' with '7483'
-7482 7483 0
c Var 'aux1864' direct represents '1' with '7484'
7482 -7483 7484 0
-7484 7483 0
-7484 -7482 0
c Var 'aux1864' direct represents '2' with '-7483'
7482 7484 -7483 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7485'
c Var 'aux1865' direct represents '0' with '7485'
c Var 'aux1865' order represents '1' with '7486'
-7485 7486 0
c Var 'aux1865' direct represents '1' with '7487'
7485 -7486 7487 0
-7487 7486 0
-7487 -7485 0
c Var 'aux1865' direct represents '2' with '-7486'
7485 7487 -7486 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7488'
c Var 'aux1866' direct represents '0' with '7488'
c Var 'aux1866' order represents '1' with '7489'
-7488 7489 0
c Var 'aux1866' direct represents '1' with '7490'
7488 -7489 7490 0
-7490 7489 0
-7490 -7488 0
c Var 'aux1866' direct represents '2' with '-7489'
7488 7490 -7489 0
c Encoding variable: aux1867 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1866))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7491'
c Var 'aux1867' direct represents '0' with '7491'
c Var 'aux1867' order represents '1' with '7492'
-7491 7492 0
c Var 'aux1867' direct represents '1' with '7493'
7491 -7492 7493 0
-7493 7492 0
-7493 -7491 0
c Var 'aux1867' order represents '2' with '7494'
-7492 7494 0
c Var 'aux1867' direct represents '2' with '7495'
7492 -7494 7495 0
-7495 7494 0
-7495 -7492 0
c Var 'aux1867' direct represents '3' with '-7494'
7491 7493 7495 -7494 0
c Encoding variable: aux1868 with domain: int(0..4) (representing constraint (aux1863 + aux1865))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7496'
c Var 'aux1868' direct represents '0' with '7496'
c Var 'aux1868' order represents '1' with '7497'
-7496 7497 0
c Var 'aux1868' direct represents '1' with '7498'
7496 -7497 7498 0
-7498 7497 0
-7498 -7496 0
c Var 'aux1868' order represents '2' with '7499'
-7497 7499 0
c Var 'aux1868' direct represents '2' with '7500'
7497 -7499 7500 0
-7500 7499 0
-7500 -7497 0
c Var 'aux1868' order represents '3' with '7501'
-7499 7501 0
c Var 'aux1868' direct represents '3' with '7502'
7499 -7501 7502 0
-7502 7501 0
-7502 -7499 0
c Var 'aux1868' direct represents '4' with '-7501'
7496 7498 7500 7502 -7501 0
c Encoding variable: aux1869 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7503'
c Var 'aux1869' direct represents '0' with '7503'
c Var 'aux1869' order represents '1' with '7504'
-7503 7504 0
c Var 'aux1869' direct represents '1' with '7505'
7503 -7504 7505 0
-7505 7504 0
-7505 -7503 0
c Var 'aux1869' direct represents '2' with '-7504'
7503 7505 -7504 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7506'
c Var 'aux1870' direct represents '0' with '7506'
c Var 'aux1870' order represents '1' with '7507'
-7506 7507 0
c Var 'aux1870' direct represents '1' with '7508'
7506 -7507 7508 0
-7508 7507 0
-7508 -7506 0
c Var 'aux1870' direct represents '2' with '-7507'
7506 7508 -7507 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7509'
c Var 'aux1871' direct represents '0' with '7509'
c Var 'aux1871' order represents '1' with '7510'
-7509 7510 0
c Var 'aux1871' direct represents '1' with '7511'
7509 -7510 7511 0
-7511 7510 0
-7511 -7509 0
c Var 'aux1871' direct represents '2' with '-7510'
7509 7511 -7510 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7512'
c Var 'aux1872' direct represents '0' with '7512'
c Var 'aux1872' order represents '1' with '7513'
-7512 7513 0
c Var 'aux1872' direct represents '1' with '7514'
7512 -7513 7514 0
-7514 7513 0
-7514 -7512 0
c Var 'aux1872' direct represents '2' with '-7513'
7512 7514 -7513 0
c Encoding variable: aux1873 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1872))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7515'
c Var 'aux1873' direct represents '0' with '7515'
c Var 'aux1873' order represents '1' with '7516'
-7515 7516 0
c Var 'aux1873' direct represents '1' with '7517'
7515 -7516 7517 0
-7517 7516 0
-7517 -7515 0
c Var 'aux1873' order represents '2' with '7518'
-7516 7518 0
c Var 'aux1873' direct represents '2' with '7519'
7516 -7518 7519 0
-7519 7518 0
-7519 -7516 0
c Var 'aux1873' direct represents '3' with '-7518'
7515 7517 7519 -7518 0
c Encoding variable: aux1874 with domain: int(0..4) (representing constraint (aux1869 + aux1871))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7520'
c Var 'aux1874' direct represents '0' with '7520'
c Var 'aux1874' order represents '1' with '7521'
-7520 7521 0
c Var 'aux1874' direct represents '1' with '7522'
7520 -7521 7522 0
-7522 7521 0
-7522 -7520 0
c Var 'aux1874' order represents '2' with '7523'
-7521 7523 0
c Var 'aux1874' direct represents '2' with '7524'
7521 -7523 7524 0
-7524 7523 0
-7524 -7521 0
c Var 'aux1874' order represents '3' with '7525'
-7523 7525 0
c Var 'aux1874' direct represents '3' with '7526'
7523 -7525 7526 0
-7526 7525 0
-7526 -7523 0
c Var 'aux1874' direct represents '4' with '-7525'
7520 7522 7524 7526 -7525 0
c Encoding variable: aux1875 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7527'
c Var 'aux1875' direct represents '0' with '7527'
c Var 'aux1875' order represents '1' with '7528'
-7527 7528 0
c Var 'aux1875' direct represents '1' with '7529'
7527 -7528 7529 0
-7529 7528 0
-7529 -7527 0
c Var 'aux1875' direct represents '2' with '-7528'
7527 7529 -7528 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7530'
c Var 'aux1876' direct represents '0' with '7530'
c Var 'aux1876' order represents '1' with '7531'
-7530 7531 0
c Var 'aux1876' direct represents '1' with '7532'
7530 -7531 7532 0
-7532 7531 0
-7532 -7530 0
c Var 'aux1876' direct represents '2' with '-7531'
7530 7532 -7531 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7533'
c Var 'aux1877' direct represents '0' with '7533'
c Var 'aux1877' order represents '1' with '7534'
-7533 7534 0
c Var 'aux1877' direct represents '1' with '7535'
7533 -7534 7535 0
-7535 7534 0
-7535 -7533 0
c Var 'aux1877' direct represents '2' with '-7534'
7533 7535 -7534 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7536'
c Var 'aux1878' direct represents '0' with '7536'
c Var 'aux1878' order represents '1' with '7537'
-7536 7537 0
c Var 'aux1878' direct represents '1' with '7538'
7536 -7537 7538 0
-7538 7537 0
-7538 -7536 0
c Var 'aux1878' direct represents '2' with '-7537'
7536 7538 -7537 0
c Encoding variable: aux1879 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1878))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7539'
c Var 'aux1879' direct represents '0' with '7539'
c Var 'aux1879' order represents '1' with '7540'
-7539 7540 0
c Var 'aux1879' direct represents '1' with '7541'
7539 -7540 7541 0
-7541 7540 0
-7541 -7539 0
c Var 'aux1879' order represents '2' with '7542'
-7540 7542 0
c Var 'aux1879' direct represents '2' with '7543'
7540 -7542 7543 0
-7543 7542 0
-7543 -7540 0
c Var 'aux1879' direct represents '3' with '-7542'
7539 7541 7543 -7542 0
c Encoding variable: aux1880 with domain: int(0..4) (representing constraint (aux1875 + aux1877))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7544'
c Var 'aux1880' direct represents '0' with '7544'
c Var 'aux1880' order represents '1' with '7545'
-7544 7545 0
c Var 'aux1880' direct represents '1' with '7546'
7544 -7545 7546 0
-7546 7545 0
-7546 -7544 0
c Var 'aux1880' order represents '2' with '7547'
-7545 7547 0
c Var 'aux1880' direct represents '2' with '7548'
7545 -7547 7548 0
-7548 7547 0
-7548 -7545 0
c Var 'aux1880' order represents '3' with '7549'
-7547 7549 0
c Var 'aux1880' direct represents '3' with '7550'
7547 -7549 7550 0
-7550 7549 0
-7550 -7547 0
c Var 'aux1880' direct represents '4' with '-7549'
7544 7546 7548 7550 -7549 0
c Encoding variable: aux1881 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7551'
c Var 'aux1881' direct represents '0' with '7551'
c Var 'aux1881' order represents '1' with '7552'
-7551 7552 0
c Var 'aux1881' direct represents '1' with '7553'
7551 -7552 7553 0
-7553 7552 0
-7553 -7551 0
c Var 'aux1881' direct represents '2' with '-7552'
7551 7553 -7552 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7554'
c Var 'aux1882' direct represents '0' with '7554'
c Var 'aux1882' order represents '1' with '7555'
-7554 7555 0
c Var 'aux1882' direct represents '1' with '7556'
7554 -7555 7556 0
-7556 7555 0
-7556 -7554 0
c Var 'aux1882' direct represents '2' with '-7555'
7554 7556 -7555 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7557'
c Var 'aux1883' direct represents '0' with '7557'
c Var 'aux1883' order represents '1' with '7558'
-7557 7558 0
c Var 'aux1883' direct represents '1' with '7559'
7557 -7558 7559 0
-7559 7558 0
-7559 -7557 0
c Var 'aux1883' direct represents '2' with '-7558'
7557 7559 -7558 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7560'
c Var 'aux1884' direct represents '0' with '7560'
c Var 'aux1884' order represents '1' with '7561'
-7560 7561 0
c Var 'aux1884' direct represents '1' with '7562'
7560 -7561 7562 0
-7562 7561 0
-7562 -7560 0
c Var 'aux1884' direct represents '2' with '-7561'
7560 7562 -7561 0
c Encoding variable: aux1885 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1884))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7563'
c Var 'aux1885' direct represents '0' with '7563'
c Var 'aux1885' order represents '1' with '7564'
-7563 7564 0
c Var 'aux1885' direct represents '1' with '7565'
7563 -7564 7565 0
-7565 7564 0
-7565 -7563 0
c Var 'aux1885' order represents '2' with '7566'
-7564 7566 0
c Var 'aux1885' direct represents '2' with '7567'
7564 -7566 7567 0
-7567 7566 0
-7567 -7564 0
c Var 'aux1885' direct represents '3' with '-7566'
7563 7565 7567 -7566 0
c Encoding variable: aux1886 with domain: int(0..4) (representing constraint (aux1881 + aux1883))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7568'
c Var 'aux1886' direct represents '0' with '7568'
c Var 'aux1886' order represents '1' with '7569'
-7568 7569 0
c Var 'aux1886' direct represents '1' with '7570'
7568 -7569 7570 0
-7570 7569 0
-7570 -7568 0
c Var 'aux1886' order represents '2' with '7571'
-7569 7571 0
c Var 'aux1886' direct represents '2' with '7572'
7569 -7571 7572 0
-7572 7571 0
-7572 -7569 0
c Var 'aux1886' order represents '3' with '7573'
-7571 7573 0
c Var 'aux1886' direct represents '3' with '7574'
7571 -7573 7574 0
-7574 7573 0
-7574 -7571 0
c Var 'aux1886' direct represents '4' with '-7573'
7568 7570 7572 7574 -7573 0
c Encoding variable: aux1887 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7575'
c Var 'aux1887' direct represents '0' with '7575'
c Var 'aux1887' order represents '1' with '7576'
-7575 7576 0
c Var 'aux1887' direct represents '1' with '7577'
7575 -7576 7577 0
-7577 7576 0
-7577 -7575 0
c Var 'aux1887' direct represents '2' with '-7576'
7575 7577 -7576 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7578'
c Var 'aux1888' direct represents '0' with '7578'
c Var 'aux1888' order represents '1' with '7579'
-7578 7579 0
c Var 'aux1888' direct represents '1' with '7580'
7578 -7579 7580 0
-7580 7579 0
-7580 -7578 0
c Var 'aux1888' direct represents '2' with '-7579'
7578 7580 -7579 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7581'
c Var 'aux1889' direct represents '0' with '7581'
c Var 'aux1889' order represents '1' with '7582'
-7581 7582 0
c Var 'aux1889' direct represents '1' with '7583'
7581 -7582 7583 0
-7583 7582 0
-7583 -7581 0
c Var 'aux1889' direct represents '2' with '-7582'
7581 7583 -7582 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7584'
c Var 'aux1890' direct represents '0' with '7584'
c Var 'aux1890' order represents '1' with '7585'
-7584 7585 0
c Var 'aux1890' direct represents '1' with '7586'
7584 -7585 7586 0
-7586 7585 0
-7586 -7584 0
c Var 'aux1890' direct represents '2' with '-7585'
7584 7586 -7585 0
c Encoding variable: aux1891 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1890))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7587'
c Var 'aux1891' direct represents '0' with '7587'
c Var 'aux1891' order represents '1' with '7588'
-7587 7588 0
c Var 'aux1891' direct represents '1' with '7589'
7587 -7588 7589 0
-7589 7588 0
-7589 -7587 0
c Var 'aux1891' order represents '2' with '7590'
-7588 7590 0
c Var 'aux1891' direct represents '2' with '7591'
7588 -7590 7591 0
-7591 7590 0
-7591 -7588 0
c Var 'aux1891' direct represents '3' with '-7590'
7587 7589 7591 -7590 0
c Encoding variable: aux1892 with domain: int(0..4) (representing constraint (aux1887 + aux1889))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7592'
c Var 'aux1892' direct represents '0' with '7592'
c Var 'aux1892' order represents '1' with '7593'
-7592 7593 0
c Var 'aux1892' direct represents '1' with '7594'
7592 -7593 7594 0
-7594 7593 0
-7594 -7592 0
c Var 'aux1892' order represents '2' with '7595'
-7593 7595 0
c Var 'aux1892' direct represents '2' with '7596'
7593 -7595 7596 0
-7596 7595 0
-7596 -7593 0
c Var 'aux1892' order represents '3' with '7597'
-7595 7597 0
c Var 'aux1892' direct represents '3' with '7598'
7595 -7597 7598 0
-7598 7597 0
-7598 -7595 0
c Var 'aux1892' direct represents '4' with '-7597'
7592 7594 7596 7598 -7597 0
c Encoding variable: aux1893 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7599'
c Var 'aux1893' direct represents '0' with '7599'
c Var 'aux1893' order represents '1' with '7600'
-7599 7600 0
c Var 'aux1893' direct represents '1' with '7601'
7599 -7600 7601 0
-7601 7600 0
-7601 -7599 0
c Var 'aux1893' direct represents '2' with '-7600'
7599 7601 -7600 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7602'
c Var 'aux1894' direct represents '0' with '7602'
c Var 'aux1894' order represents '1' with '7603'
-7602 7603 0
c Var 'aux1894' direct represents '1' with '7604'
7602 -7603 7604 0
-7604 7603 0
-7604 -7602 0
c Var 'aux1894' direct represents '2' with '-7603'
7602 7604 -7603 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7605'
c Var 'aux1895' direct represents '0' with '7605'
c Var 'aux1895' order represents '1' with '7606'
-7605 7606 0
c Var 'aux1895' direct represents '1' with '7607'
7605 -7606 7607 0
-7607 7606 0
-7607 -7605 0
c Var 'aux1895' direct represents '2' with '-7606'
7605 7607 -7606 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7608'
c Var 'aux1896' direct represents '0' with '7608'
c Var 'aux1896' order represents '1' with '7609'
-7608 7609 0
c Var 'aux1896' direct represents '1' with '7610'
7608 -7609 7610 0
-7610 7609 0
-7610 -7608 0
c Var 'aux1896' direct represents '2' with '-7609'
7608 7610 -7609 0
c Encoding variable: aux1897 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1896))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7611'
c Var 'aux1897' direct represents '0' with '7611'
c Var 'aux1897' order represents '1' with '7612'
-7611 7612 0
c Var 'aux1897' direct represents '1' with '7613'
7611 -7612 7613 0
-7613 7612 0
-7613 -7611 0
c Var 'aux1897' order represents '2' with '7614'
-7612 7614 0
c Var 'aux1897' direct represents '2' with '7615'
7612 -7614 7615 0
-7615 7614 0
-7615 -7612 0
c Var 'aux1897' direct represents '3' with '-7614'
7611 7613 7615 -7614 0
c Encoding variable: aux1898 with domain: int(0..4) (representing constraint (aux1893 + aux1895))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7616'
c Var 'aux1898' direct represents '0' with '7616'
c Var 'aux1898' order represents '1' with '7617'
-7616 7617 0
c Var 'aux1898' direct represents '1' with '7618'
7616 -7617 7618 0
-7618 7617 0
-7618 -7616 0
c Var 'aux1898' order represents '2' with '7619'
-7617 7619 0
c Var 'aux1898' direct represents '2' with '7620'
7617 -7619 7620 0
-7620 7619 0
-7620 -7617 0
c Var 'aux1898' order represents '3' with '7621'
-7619 7621 0
c Var 'aux1898' direct represents '3' with '7622'
7619 -7621 7622 0
-7622 7621 0
-7622 -7619 0
c Var 'aux1898' direct represents '4' with '-7621'
7616 7618 7620 7622 -7621 0
c Encoding variable: aux1899 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7623'
c Var 'aux1899' direct represents '0' with '7623'
c Var 'aux1899' order represents '1' with '7624'
-7623 7624 0
c Var 'aux1899' direct represents '1' with '7625'
7623 -7624 7625 0
-7625 7624 0
-7625 -7623 0
c Var 'aux1899' direct represents '2' with '-7624'
7623 7625 -7624 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7626'
c Var 'aux1900' direct represents '0' with '7626'
c Var 'aux1900' order represents '1' with '7627'
-7626 7627 0
c Var 'aux1900' direct represents '1' with '7628'
7626 -7627 7628 0
-7628 7627 0
-7628 -7626 0
c Var 'aux1900' direct represents '2' with '-7627'
7626 7628 -7627 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7629'
c Var 'aux1901' direct represents '0' with '7629'
c Var 'aux1901' order represents '1' with '7630'
-7629 7630 0
c Var 'aux1901' direct represents '1' with '7631'
7629 -7630 7631 0
-7631 7630 0
-7631 -7629 0
c Var 'aux1901' direct represents '2' with '-7630'
7629 7631 -7630 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7632'
c Var 'aux1902' direct represents '0' with '7632'
c Var 'aux1902' order represents '1' with '7633'
-7632 7633 0
c Var 'aux1902' direct represents '1' with '7634'
7632 -7633 7634 0
-7634 7633 0
-7634 -7632 0
c Var 'aux1902' direct represents '2' with '-7633'
7632 7634 -7633 0
c Encoding variable: aux1903 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1902))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7635'
c Var 'aux1903' direct represents '0' with '7635'
c Var 'aux1903' order represents '1' with '7636'
-7635 7636 0
c Var 'aux1903' direct represents '1' with '7637'
7635 -7636 7637 0
-7637 7636 0
-7637 -7635 0
c Var 'aux1903' order represents '2' with '7638'
-7636 7638 0
c Var 'aux1903' direct represents '2' with '7639'
7636 -7638 7639 0
-7639 7638 0
-7639 -7636 0
c Var 'aux1903' direct represents '3' with '-7638'
7635 7637 7639 -7638 0
c Encoding variable: aux1904 with domain: int(0..4) (representing constraint (aux1899 + aux1901))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7640'
c Var 'aux1904' direct represents '0' with '7640'
c Var 'aux1904' order represents '1' with '7641'
-7640 7641 0
c Var 'aux1904' direct represents '1' with '7642'
7640 -7641 7642 0
-7642 7641 0
-7642 -7640 0
c Var 'aux1904' order represents '2' with '7643'
-7641 7643 0
c Var 'aux1904' direct represents '2' with '7644'
7641 -7643 7644 0
-7644 7643 0
-7644 -7641 0
c Var 'aux1904' order represents '3' with '7645'
-7643 7645 0
c Var 'aux1904' direct represents '3' with '7646'
7643 -7645 7646 0
-7646 7645 0
-7646 -7643 0
c Var 'aux1904' direct represents '4' with '-7645'
7640 7642 7644 7646 -7645 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00001_00005=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7647'
c Var 'aux1905' direct represents '0' with '7647'
c Var 'aux1905' order represents '1' with '7648'
-7647 7648 0
c Var 'aux1905' direct represents '1' with '7649'
7647 -7648 7649 0
-7649 7648 0
-7649 -7647 0
c Var 'aux1905' direct represents '2' with '-7648'
7647 7649 -7648 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00001_00005=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7650'
c Var 'aux1906' direct represents '0' with '7650'
c Var 'aux1906' order represents '1' with '7651'
-7650 7651 0
c Var 'aux1906' direct represents '1' with '7652'
7650 -7651 7652 0
-7652 7651 0
-7652 -7650 0
c Var 'aux1906' direct represents '2' with '-7651'
7650 7652 -7651 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00001_00005=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7653'
c Var 'aux1907' direct represents '0' with '7653'
c Var 'aux1907' order represents '1' with '7654'
-7653 7654 0
c Var 'aux1907' direct represents '1' with '7655'
7653 -7654 7655 0
-7655 7654 0
-7655 -7653 0
c Var 'aux1907' direct represents '2' with '-7654'
7653 7655 -7654 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00001_00005=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7656'
c Var 'aux1908' direct represents '0' with '7656'
c Var 'aux1908' order represents '1' with '7657'
-7656 7657 0
c Var 'aux1908' direct represents '1' with '7658'
7656 -7657 7658 0
-7658 7657 0
-7658 -7656 0
c Var 'aux1908' direct represents '2' with '-7657'
7656 7658 -7657 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00001_00005=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7659'
c Var 'aux1909' direct represents '0' with '7659'
c Var 'aux1909' order represents '1' with '7660'
-7659 7660 0
c Var 'aux1909' direct represents '1' with '7661'
7659 -7660 7661 0
-7661 7660 0
-7661 -7659 0
c Var 'aux1909' direct represents '2' with '-7660'
7659 7661 -7660 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00001_00005=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7662'
c Var 'aux1910' direct represents '0' with '7662'
c Var 'aux1910' order represents '1' with '7663'
-7662 7663 0
c Var 'aux1910' direct represents '1' with '7664'
7662 -7663 7664 0
-7664 7663 0
-7664 -7662 0
c Var 'aux1910' direct represents '2' with '-7663'
7662 7664 -7663 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00001_00005=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7665'
c Var 'aux1911' direct represents '0' with '7665'
c Var 'aux1911' order represents '1' with '7666'
-7665 7666 0
c Var 'aux1911' direct represents '1' with '7667'
7665 -7666 7667 0
-7667 7666 0
-7667 -7665 0
c Var 'aux1911' direct represents '2' with '-7666'
7665 7667 -7666 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00001_00005=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7668'
c Var 'aux1912' direct represents '0' with '7668'
c Var 'aux1912' order represents '1' with '7669'
-7668 7669 0
c Var 'aux1912' direct represents '1' with '7670'
7668 -7669 7670 0
-7670 7669 0
-7670 -7668 0
c Var 'aux1912' direct represents '2' with '-7669'
7668 7670 -7669 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00001_00005=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7671'
c Var 'aux1913' direct represents '0' with '7671'
c Var 'aux1913' order represents '1' with '7672'
-7671 7672 0
c Var 'aux1913' direct represents '1' with '7673'
7671 -7672 7673 0
-7673 7672 0
-7673 -7671 0
c Var 'aux1913' direct represents '2' with '-7672'
7671 7673 -7672 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00008=1)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7674'
c Var 'aux1914' direct represents '0' with '7674'
c Var 'aux1914' order represents '1' with '7675'
-7674 7675 0
c Var 'aux1914' direct represents '1' with '7676'
7674 -7675 7676 0
-7676 7675 0
-7676 -7674 0
c Var 'aux1914' direct represents '2' with '-7675'
7674 7676 -7675 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00008=2)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7677'
c Var 'aux1915' direct represents '0' with '7677'
c Var 'aux1915' order represents '1' with '7678'
-7677 7678 0
c Var 'aux1915' direct represents '1' with '7679'
7677 -7678 7679 0
-7679 7678 0
-7679 -7677 0
c Var 'aux1915' direct represents '2' with '-7678'
7677 7679 -7678 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00008=3)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7680'
c Var 'aux1916' direct represents '0' with '7680'
c Var 'aux1916' order represents '1' with '7681'
-7680 7681 0
c Var 'aux1916' direct represents '1' with '7682'
7680 -7681 7682 0
-7682 7681 0
-7682 -7680 0
c Var 'aux1916' direct represents '2' with '-7681'
7680 7682 -7681 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00008=4)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7683'
c Var 'aux1917' direct represents '0' with '7683'
c Var 'aux1917' order represents '1' with '7684'
-7683 7684 0
c Var 'aux1917' direct represents '1' with '7685'
7683 -7684 7685 0
-7685 7684 0
-7685 -7683 0
c Var 'aux1917' direct represents '2' with '-7684'
7683 7685 -7684 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00008=5)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7686'
c Var 'aux1918' direct represents '0' with '7686'
c Var 'aux1918' order represents '1' with '7687'
-7686 7687 0
c Var 'aux1918' direct represents '1' with '7688'
7686 -7687 7688 0
-7688 7687 0
-7688 -7686 0
c Var 'aux1918' direct represents '2' with '-7687'
7686 7688 -7687 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00008=6)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7689'
c Var 'aux1919' direct represents '0' with '7689'
c Var 'aux1919' order represents '1' with '7690'
-7689 7690 0
c Var 'aux1919' direct represents '1' with '7691'
7689 -7690 7691 0
-7691 7690 0
-7691 -7689 0
c Var 'aux1919' direct represents '2' with '-7690'
7689 7691 -7690 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00008=7)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7692'
c Var 'aux1920' direct represents '0' with '7692'
c Var 'aux1920' order represents '1' with '7693'
-7692 7693 0
c Var 'aux1920' direct represents '1' with '7694'
7692 -7693 7694 0
-7694 7693 0
-7694 -7692 0
c Var 'aux1920' direct represents '2' with '-7693'
7692 7694 -7693 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00008=8)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7695'
c Var 'aux1921' direct represents '0' with '7695'
c Var 'aux1921' order represents '1' with '7696'
-7695 7696 0
c Var 'aux1921' direct represents '1' with '7697'
7695 -7696 7697 0
-7697 7696 0
-7697 -7695 0
c Var 'aux1921' direct represents '2' with '-7696'
7695 7697 -7696 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00008=9)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7698'
c Var 'aux1922' direct represents '0' with '7698'
c Var 'aux1922' order represents '1' with '7699'
-7698 7699 0
c Var 'aux1922' direct represents '1' with '7700'
7698 -7699 7700 0
-7700 7699 0
-7700 -7698 0
c Var 'aux1922' direct represents '2' with '-7699'
7698 7700 -7699 0
c Encoding variable: aux1923 with domain: bool (representing constraint ((x_00002_00001 + x_00003_00001 + x_00001_00001)<=14))
c Var 'aux1923' direct represents '0' with '-7701'
c Var 'aux1923' direct represents '1' with '7701'
c Var 'aux1923' order represents '1' with '1'
c Var 'aux1923' order represents '0' with '-7701'
c Encoding variable: aux1924 with domain: bool (representing constraint (14<=(x_00002_00001 + x_00003_00001 + x_00001_00001)))
c Var 'aux1924' direct represents '0' with '-7702'
c Var 'aux1924' direct represents '1' with '7702'
c Var 'aux1924' order represents '1' with '1'
c Var 'aux1924' order represents '0' with '-7702'
c Encoding variable: aux1925 with domain: bool (representing constraint ((x_00001_00002 + x_00001_00003)<=8))
c Var 'aux1925' direct represents '0' with '-7703'
c Var 'aux1925' direct represents '1' with '7703'
c Var 'aux1925' order represents '1' with '1'
c Var 'aux1925' order represents '0' with '-7703'
c Encoding variable: aux1926 with domain: bool (representing constraint (8<=(x_00001_00002 + x_00001_00003)))
c Var 'aux1926' direct represents '0' with '-7704'
c Var 'aux1926' direct represents '1' with '7704'
c Var 'aux1926' order represents '1' with '1'
c Var 'aux1926' order represents '0' with '-7704'
c Encoding variable: aux1927 with domain: bool (representing constraint ((x_00002_00004 + x_00003_00004 + x_00001_00004)<=14))
c Var 'aux1927' direct represents '0' with '-7705'
c Var 'aux1927' direct represents '1' with '7705'
c Var 'aux1927' order represents '1' with '1'
c Var 'aux1927' order represents '0' with '-7705'
c Encoding variable: aux1928 with domain: bool (representing constraint (14<=(x_00002_00004 + x_00003_00004 + x_00001_00004)))
c Var 'aux1928' direct represents '0' with '-7706'
c Var 'aux1928' direct represents '1' with '7706'
c Var 'aux1928' order represents '1' with '1'
c Var 'aux1928' order represents '0' with '-7706'
c Encoding variable: aux1929 with domain: bool (representing constraint ((aux445 + shift(x_00001_00005, -1) + shift(x_00002_00006, -1))<=20))
c Var 'aux1929' direct represents '0' with '-7707'
c Var 'aux1929' direct represents '1' with '7707'
c Var 'aux1929' order represents '1' with '1'
c Var 'aux1929' order represents '0' with '-7707'
c Encoding variable: aux1930 with domain: bool (representing constraint (20<=(aux445 + shift(x_00001_00005, -1) + shift(x_00002_00006, -1))))
c Var 'aux1930' direct represents '0' with '-7708'
c Var 'aux1930' direct represents '1' with '7708'
c Var 'aux1930' order represents '1' with '1'
c Var 'aux1930' order represents '0' with '-7708'
c Encoding variable: aux1931 with domain: bool (representing constraint ((x_00001_00007 + x_00001_00008 + x_00001_00009)<=11))
c Var 'aux1931' direct represents '0' with '-7709'
c Var 'aux1931' direct represents '1' with '7709'
c Var 'aux1931' order represents '1' with '1'
c Var 'aux1931' order represents '0' with '-7709'
c Encoding variable: aux1932 with domain: bool (representing constraint (11<=(x_00001_00007 + x_00001_00008 + x_00001_00009)))
c Var 'aux1932' direct represents '0' with '-7710'
c Var 'aux1932' direct represents '1' with '7710'
c Var 'aux1932' order represents '1' with '1'
c Var 'aux1932' order represents '0' with '-7710'
c Encoding variable: aux1933 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003 + x_00003_00003)<=15))
c Var 'aux1933' direct represents '0' with '-7711'
c Var 'aux1933' direct represents '1' with '7711'
c Var 'aux1933' order represents '1' with '1'
c Var 'aux1933' order represents '0' with '-7711'
c Encoding variable: aux1934 with domain: bool (representing constraint (15<=(x_00002_00002 + x_00002_00003 + x_00003_00003)))
c Var 'aux1934' direct represents '0' with '-7712'
c Var 'aux1934' direct represents '1' with '7712'
c Var 'aux1934' order represents '1' with '1'
c Var 'aux1934' order represents '0' with '-7712'
c Encoding variable: aux1935 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00003_00008)<=11))
c Var 'aux1935' direct represents '0' with '-7713'
c Var 'aux1935' direct represents '1' with '7713'
c Var 'aux1935' order represents '1' with '1'
c Var 'aux1935' order represents '0' with '-7713'
c Encoding variable: aux1936 with domain: bool (representing constraint (11<=(x_00002_00007 + x_00002_00008 + x_00003_00008)))
c Var 'aux1936' direct represents '0' with '-7714'
c Var 'aux1936' direct represents '1' with '7714'
c Var 'aux1936' order represents '1' with '1'
c Var 'aux1936' order represents '0' with '-7714'
c Encoding variable: aux1937 with domain: bool (representing constraint ((x_00002_00009 + x_00003_00009)<=14))
c Var 'aux1937' direct represents '0' with '-7715'
c Var 'aux1937' direct represents '1' with '7715'
c Var 'aux1937' order represents '1' with '1'
c Var 'aux1937' order represents '0' with '-7715'
c Encoding variable: aux1938 with domain: bool (representing constraint (14<=(x_00002_00009 + x_00003_00009)))
c Var 'aux1938' direct represents '0' with '-7716'
c Var 'aux1938' direct represents '1' with '7716'
c Var 'aux1938' order represents '1' with '1'
c Var 'aux1938' order represents '0' with '-7716'
c Encoding variable: aux1939 with domain: bool (representing constraint ((x_00003_00002 + x_00004_00001 + x_00004_00002)<=21))
c Var 'aux1939' direct represents '0' with '-7717'
c Var 'aux1939' direct represents '1' with '7717'
c Var 'aux1939' order represents '1' with '1'
c Var 'aux1939' order represents '0' with '-7717'
c Encoding variable: aux1940 with domain: bool (representing constraint (21<=(x_00003_00002 + x_00004_00001 + x_00004_00002)))
c Var 'aux1940' direct represents '0' with '-7718'
c Var 'aux1940' direct represents '1' with '7718'
c Var 'aux1940' order represents '1' with '1'
c Var 'aux1940' order represents '0' with '-7718'
c Encoding variable: aux1941 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)<=7))
c Var 'aux1941' direct represents '0' with '-7719'
c Var 'aux1941' direct represents '1' with '7719'
c Var 'aux1941' order represents '1' with '1'
c Var 'aux1941' order represents '0' with '-7719'
c Encoding variable: aux1942 with domain: bool (representing constraint (7<=(x_00003_00005 + x_00003_00006)))
c Var 'aux1942' direct represents '0' with '-7720'
c Var 'aux1942' direct represents '1' with '7720'
c Var 'aux1942' order represents '1' with '1'
c Var 'aux1942' order represents '0' with '-7720'
c Encoding variable: aux1943 with domain: bool (representing constraint ((x_00003_00007 + x_00004_00006 + x_00004_00007)<=19))
c Var 'aux1943' direct represents '0' with '-7721'
c Var 'aux1943' direct represents '1' with '7721'
c Var 'aux1943' order represents '1' with '1'
c Var 'aux1943' order represents '0' with '-7721'
c Encoding variable: aux1944 with domain: bool (representing constraint (19<=(x_00003_00007 + x_00004_00006 + x_00004_00007)))
c Var 'aux1944' direct represents '0' with '-7722'
c Var 'aux1944' direct represents '1' with '7722'
c Var 'aux1944' order represents '1' with '1'
c Var 'aux1944' order represents '0' with '-7722'
c Encoding variable: aux1945 with domain: bool (representing constraint ((x_00004_00003 + x_00004_00004 + x_00005_00003)<=14))
c Var 'aux1945' direct represents '0' with '-7723'
c Var 'aux1945' direct represents '1' with '7723'
c Var 'aux1945' order represents '1' with '1'
c Var 'aux1945' order represents '0' with '-7723'
c Encoding variable: aux1946 with domain: bool (representing constraint (14<=(x_00004_00003 + x_00004_00004 + x_00005_00003)))
c Var 'aux1946' direct represents '0' with '-7724'
c Var 'aux1946' direct represents '1' with '7724'
c Var 'aux1946' order represents '1' with '1'
c Var 'aux1946' order represents '0' with '-7724'
c Encoding variable: aux1947 with domain: bool (representing constraint ((x_00004_00005 + x_00005_00004 + x_00005_00005)<=18))
c Var 'aux1947' direct represents '0' with '-7725'
c Var 'aux1947' direct represents '1' with '7725'
c Var 'aux1947' order represents '1' with '1'
c Var 'aux1947' order represents '0' with '-7725'
c Encoding variable: aux1948 with domain: bool (representing constraint (18<=(x_00004_00005 + x_00005_00004 + x_00005_00005)))
c Var 'aux1948' direct represents '0' with '-7726'
c Var 'aux1948' direct represents '1' with '7726'
c Var 'aux1948' order represents '1' with '1'
c Var 'aux1948' order represents '0' with '-7726'
c Encoding variable: aux1949 with domain: bool (representing constraint ((x_00004_00008 + x_00004_00009)<=8))
c Var 'aux1949' direct represents '0' with '-7727'
c Var 'aux1949' direct represents '1' with '7727'
c Var 'aux1949' order represents '1' with '1'
c Var 'aux1949' order represents '0' with '-7727'
c Encoding variable: aux1950 with domain: bool (representing constraint (8<=(x_00004_00008 + x_00004_00009)))
c Var 'aux1950' direct represents '0' with '-7728'
c Var 'aux1950' direct represents '1' with '7728'
c Var 'aux1950' order represents '1' with '1'
c Var 'aux1950' order represents '0' with '-7728'
c Encoding variable: aux1951 with domain: bool (representing constraint ((x_00005_00001 + x_00005_00002 + x_00006_00001)<=11))
c Var 'aux1951' direct represents '0' with '-7729'
c Var 'aux1951' direct represents '1' with '7729'
c Var 'aux1951' order represents '1' with '1'
c Var 'aux1951' order represents '0' with '-7729'
c Encoding variable: aux1952 with domain: bool (representing constraint (11<=(x_00005_00001 + x_00005_00002 + x_00006_00001)))
c Var 'aux1952' direct represents '0' with '-7730'
c Var 'aux1952' direct represents '1' with '7730'
c Var 'aux1952' order represents '1' with '1'
c Var 'aux1952' order represents '0' with '-7730'
c Encoding variable: aux1953 with domain: bool (representing constraint ((x_00005_00006 + x_00005_00007)<=5))
c Var 'aux1953' direct represents '0' with '-7731'
c Var 'aux1953' direct represents '1' with '7731'
c Var 'aux1953' order represents '1' with '1'
c Var 'aux1953' order represents '0' with '-7731'
c Encoding variable: aux1954 with domain: bool (representing constraint (5<=(x_00005_00006 + x_00005_00007)))
c Var 'aux1954' direct represents '0' with '-7732'
c Var 'aux1954' direct represents '1' with '7732'
c Var 'aux1954' order represents '1' with '1'
c Var 'aux1954' order represents '0' with '-7732'
c Encoding variable: aux1955 with domain: bool (representing constraint ((x_00005_00008 + x_00005_00009)<=13))
c Var 'aux1955' direct represents '0' with '-7733'
c Var 'aux1955' direct represents '1' with '7733'
c Var 'aux1955' order represents '1' with '1'
c Var 'aux1955' order represents '0' with '-7733'
c Encoding variable: aux1956 with domain: bool (representing constraint (13<=(x_00005_00008 + x_00005_00009)))
c Var 'aux1956' direct represents '0' with '-7734'
c Var 'aux1956' direct represents '1' with '7734'
c Var 'aux1956' order represents '1' with '1'
c Var 'aux1956' order represents '0' with '-7734'
c Encoding variable: aux1957 with domain: bool (representing constraint ((x_00006_00002 + x_00006_00003)<=10))
c Var 'aux1957' direct represents '0' with '-7735'
c Var 'aux1957' direct represents '1' with '7735'
c Var 'aux1957' order represents '1' with '1'
c Var 'aux1957' order represents '0' with '-7735'
c Encoding variable: aux1958 with domain: bool (representing constraint (10<=(x_00006_00002 + x_00006_00003)))
c Var 'aux1958' direct represents '0' with '-7736'
c Var 'aux1958' direct represents '1' with '7736'
c Var 'aux1958' order represents '1' with '1'
c Var 'aux1958' order represents '0' with '-7736'
c Encoding variable: aux1959 with domain: bool (representing constraint ((x_00007_00004 + x_00006_00004 + x_00006_00005)<=14))
c Var 'aux1959' direct represents '0' with '-7737'
c Var 'aux1959' direct represents '1' with '7737'
c Var 'aux1959' order represents '1' with '1'
c Var 'aux1959' order represents '0' with '-7737'
c Encoding variable: aux1960 with domain: bool (representing constraint (14<=(x_00007_00004 + x_00006_00004 + x_00006_00005)))
c Var 'aux1960' direct represents '0' with '-7738'
c Var 'aux1960' direct represents '1' with '7738'
c Var 'aux1960' order represents '1' with '1'
c Var 'aux1960' order represents '0' with '-7738'
c Encoding variable: aux1961 with domain: bool (representing constraint ((x_00007_00005 + x_00007_00006 + x_00006_00006)<=12))
c Var 'aux1961' direct represents '0' with '-7739'
c Var 'aux1961' direct represents '1' with '7739'
c Var 'aux1961' order represents '1' with '1'
c Var 'aux1961' order represents '0' with '-7739'
c Encoding variable: aux1962 with domain: bool (representing constraint (12<=(x_00007_00005 + x_00007_00006 + x_00006_00006)))
c Var 'aux1962' direct represents '0' with '-7740'
c Var 'aux1962' direct represents '1' with '7740'
c Var 'aux1962' order represents '1' with '1'
c Var 'aux1962' order represents '0' with '-7740'
c Encoding variable: aux1963 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)<=14))
c Var 'aux1963' direct represents '0' with '-7741'
c Var 'aux1963' direct represents '1' with '7741'
c Var 'aux1963' order represents '1' with '1'
c Var 'aux1963' order represents '0' with '-7741'
c Encoding variable: aux1964 with domain: bool (representing constraint (14<=(x_00006_00007 + x_00006_00008)))
c Var 'aux1964' direct represents '0' with '-7742'
c Var 'aux1964' direct represents '1' with '7742'
c Var 'aux1964' order represents '1' with '1'
c Var 'aux1964' order represents '0' with '-7742'
c Encoding variable: aux1965 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00008_00002)<=17))
c Var 'aux1965' direct represents '0' with '-7743'
c Var 'aux1965' direct represents '1' with '7743'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-7743'
c Encoding variable: aux1966 with domain: bool (representing constraint (17<=(x_00007_00001 + x_00007_00002 + x_00008_00002)))
c Var 'aux1966' direct represents '0' with '-7744'
c Var 'aux1966' direct represents '1' with '7744'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-7744'
c Encoding variable: aux1967 with domain: bool (representing constraint ((x_00007_00003 + x_00008_00003)<=11))
c Var 'aux1967' direct represents '0' with '-7745'
c Var 'aux1967' direct represents '1' with '7745'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-7745'
c Encoding variable: aux1968 with domain: bool (representing constraint (11<=(x_00007_00003 + x_00008_00003)))
c Var 'aux1968' direct represents '0' with '-7746'
c Var 'aux1968' direct represents '1' with '7746'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-7746'
c Encoding variable: aux1969 with domain: bool (representing constraint ((shift(x_00007_00008, -1) + aux446 + shift(x_00008_00007, -1))<=16))
c Var 'aux1969' direct represents '0' with '-7747'
c Var 'aux1969' direct represents '1' with '7747'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-7747'
c Encoding variable: aux1970 with domain: bool (representing constraint (16<=(shift(x_00007_00008, -1) + aux446 + shift(x_00008_00007, -1))))
c Var 'aux1970' direct represents '0' with '-7748'
c Var 'aux1970' direct represents '1' with '7748'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-7748'
c Encoding variable: aux1971 with domain: bool (representing constraint ((x_00007_00009 + x_00008_00009 + x_00009_00009)<=9))
c Var 'aux1971' direct represents '0' with '-7749'
c Var 'aux1971' direct represents '1' with '7749'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-7749'
c Encoding variable: aux1972 with domain: bool (representing constraint (9<=(x_00007_00009 + x_00008_00009 + x_00009_00009)))
c Var 'aux1972' direct represents '0' with '-7750'
c Var 'aux1972' direct represents '1' with '7750'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-7750'
c Encoding variable: aux1973 with domain: bool (representing constraint ((x_00008_00001 + x_00009_00001 + x_00009_00002)<=9))
c Var 'aux1973' direct represents '0' with '-7751'
c Var 'aux1973' direct represents '1' with '7751'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-7751'
c Encoding variable: aux1974 with domain: bool (representing constraint (9<=(x_00008_00001 + x_00009_00001 + x_00009_00002)))
c Var 'aux1974' direct represents '0' with '-7752'
c Var 'aux1974' direct represents '1' with '7752'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-7752'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00008_00004 + x_00009_00004)<=9))
c Var 'aux1975' direct represents '0' with '-7753'
c Var 'aux1975' direct represents '1' with '7753'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-7753'
c Encoding variable: aux1976 with domain: bool (representing constraint (9<=(x_00008_00004 + x_00009_00004)))
c Var 'aux1976' direct represents '0' with '-7754'
c Var 'aux1976' direct represents '1' with '7754'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-7754'
c Encoding variable: aux1977 with domain: bool (representing constraint ((x_00008_00005 + x_00008_00006)<=16))
c Var 'aux1977' direct represents '0' with '-7755'
c Var 'aux1977' direct represents '1' with '7755'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-7755'
c Encoding variable: aux1978 with domain: bool (representing constraint (16<=(x_00008_00005 + x_00008_00006)))
c Var 'aux1978' direct represents '0' with '-7756'
c Var 'aux1978' direct represents '1' with '7756'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-7756'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00009_00006 + x_00009_00007 + x_00009_00008)<=22))
c Var 'aux1979' direct represents '0' with '-7757'
c Var 'aux1979' direct represents '1' with '7757'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-7757'
c Encoding variable: aux1980 with domain: bool (representing constraint (22<=(x_00009_00006 + x_00009_00007 + x_00009_00008)))
c Var 'aux1980' direct represents '0' with '-7758'
c Var 'aux1980' direct represents '1' with '7758'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-7758'
c Encoding variable: aux1981 with domain: bool (representing constraint ((aux448 + aux451 + aux452)<=1))
c Var 'aux1981' direct represents '0' with '-7759'
c Var 'aux1981' direct represents '1' with '7759'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-7759'
c Encoding variable: aux1982 with domain: bool (representing constraint (1<=(aux448 + aux451 + aux452)))
c Var 'aux1982' direct represents '0' with '-7760'
c Var 'aux1982' direct represents '1' with '7760'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-7760'
c Encoding variable: aux1983 with domain: bool (representing constraint ((aux454 + aux457 + aux458)<=1))
c Var 'aux1983' direct represents '0' with '-7761'
c Var 'aux1983' direct represents '1' with '7761'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-7761'
c Encoding variable: aux1984 with domain: bool (representing constraint (1<=(aux454 + aux457 + aux458)))
c Var 'aux1984' direct represents '0' with '-7762'
c Var 'aux1984' direct represents '1' with '7762'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-7762'
c Encoding variable: aux1985 with domain: bool (representing constraint ((aux460 + aux463 + aux464)<=1))
c Var 'aux1985' direct represents '0' with '-7763'
c Var 'aux1985' direct represents '1' with '7763'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-7763'
c Encoding variable: aux1986 with domain: bool (representing constraint (1<=(aux460 + aux463 + aux464)))
c Var 'aux1986' direct represents '0' with '-7764'
c Var 'aux1986' direct represents '1' with '7764'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-7764'
c Encoding variable: aux1987 with domain: bool (representing constraint ((aux466 + aux469 + aux470)<=1))
c Var 'aux1987' direct represents '0' with '-7765'
c Var 'aux1987' direct represents '1' with '7765'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-7765'
c Encoding variable: aux1988 with domain: bool (representing constraint (1<=(aux466 + aux469 + aux470)))
c Var 'aux1988' direct represents '0' with '-7766'
c Var 'aux1988' direct represents '1' with '7766'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-7766'
c Encoding variable: aux1989 with domain: bool (representing constraint ((aux472 + aux475 + aux476)<=1))
c Var 'aux1989' direct represents '0' with '-7767'
c Var 'aux1989' direct represents '1' with '7767'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-7767'
c Encoding variable: aux1990 with domain: bool (representing constraint (1<=(aux472 + aux475 + aux476)))
c Var 'aux1990' direct represents '0' with '-7768'
c Var 'aux1990' direct represents '1' with '7768'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-7768'
c Encoding variable: aux1991 with domain: bool (representing constraint ((aux478 + aux481 + aux482)<=1))
c Var 'aux1991' direct represents '0' with '-7769'
c Var 'aux1991' direct represents '1' with '7769'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-7769'
c Encoding variable: aux1992 with domain: bool (representing constraint (1<=(aux478 + aux481 + aux482)))
c Var 'aux1992' direct represents '0' with '-7770'
c Var 'aux1992' direct represents '1' with '7770'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-7770'
c Encoding variable: aux1993 with domain: bool (representing constraint ((aux484 + aux487 + aux488)<=1))
c Var 'aux1993' direct represents '0' with '-7771'
c Var 'aux1993' direct represents '1' with '7771'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-7771'
c Encoding variable: aux1994 with domain: bool (representing constraint (1<=(aux484 + aux487 + aux488)))
c Var 'aux1994' direct represents '0' with '-7772'
c Var 'aux1994' direct represents '1' with '7772'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-7772'
c Encoding variable: aux1995 with domain: bool (representing constraint ((aux490 + aux493 + aux494)<=1))
c Var 'aux1995' direct represents '0' with '-7773'
c Var 'aux1995' direct represents '1' with '7773'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-7773'
c Encoding variable: aux1996 with domain: bool (representing constraint (1<=(aux490 + aux493 + aux494)))
c Var 'aux1996' direct represents '0' with '-7774'
c Var 'aux1996' direct represents '1' with '7774'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-7774'
c Encoding variable: aux1997 with domain: bool (representing constraint ((aux496 + aux499 + aux500)<=1))
c Var 'aux1997' direct represents '0' with '-7775'
c Var 'aux1997' direct represents '1' with '7775'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-7775'
c Encoding variable: aux1998 with domain: bool (representing constraint (1<=(aux496 + aux499 + aux500)))
c Var 'aux1998' direct represents '0' with '-7776'
c Var 'aux1998' direct represents '1' with '7776'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-7776'
c Encoding variable: aux1999 with domain: bool (representing constraint ((aux502 + aux505 + aux506)<=1))
c Var 'aux1999' direct represents '0' with '-7777'
c Var 'aux1999' direct represents '1' with '7777'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-7777'
c Encoding variable: aux2000 with domain: bool (representing constraint (1<=(aux502 + aux505 + aux506)))
c Var 'aux2000' direct represents '0' with '-7778'
c Var 'aux2000' direct represents '1' with '7778'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-7778'
c Encoding variable: aux2001 with domain: bool (representing constraint ((aux508 + aux511 + aux512)<=1))
c Var 'aux2001' direct represents '0' with '-7779'
c Var 'aux2001' direct represents '1' with '7779'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-7779'
c Encoding variable: aux2002 with domain: bool (representing constraint (1<=(aux508 + aux511 + aux512)))
c Var 'aux2002' direct represents '0' with '-7780'
c Var 'aux2002' direct represents '1' with '7780'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-7780'
c Encoding variable: aux2003 with domain: bool (representing constraint ((aux514 + aux517 + aux518)<=1))
c Var 'aux2003' direct represents '0' with '-7781'
c Var 'aux2003' direct represents '1' with '7781'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-7781'
c Encoding variable: aux2004 with domain: bool (representing constraint (1<=(aux514 + aux517 + aux518)))
c Var 'aux2004' direct represents '0' with '-7782'
c Var 'aux2004' direct represents '1' with '7782'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-7782'
c Encoding variable: aux2005 with domain: bool (representing constraint ((aux520 + aux523 + aux524)<=1))
c Var 'aux2005' direct represents '0' with '-7783'
c Var 'aux2005' direct represents '1' with '7783'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-7783'
c Encoding variable: aux2006 with domain: bool (representing constraint (1<=(aux520 + aux523 + aux524)))
c Var 'aux2006' direct represents '0' with '-7784'
c Var 'aux2006' direct represents '1' with '7784'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-7784'
c Encoding variable: aux2007 with domain: bool (representing constraint ((aux526 + aux529 + aux530)<=1))
c Var 'aux2007' direct represents '0' with '-7785'
c Var 'aux2007' direct represents '1' with '7785'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-7785'
c Encoding variable: aux2008 with domain: bool (representing constraint (1<=(aux526 + aux529 + aux530)))
c Var 'aux2008' direct represents '0' with '-7786'
c Var 'aux2008' direct represents '1' with '7786'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-7786'
c Encoding variable: aux2009 with domain: bool (representing constraint ((aux532 + aux535 + aux536)<=1))
c Var 'aux2009' direct represents '0' with '-7787'
c Var 'aux2009' direct represents '1' with '7787'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-7787'
c Encoding variable: aux2010 with domain: bool (representing constraint (1<=(aux532 + aux535 + aux536)))
c Var 'aux2010' direct represents '0' with '-7788'
c Var 'aux2010' direct represents '1' with '7788'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-7788'
c Encoding variable: aux2011 with domain: bool (representing constraint ((aux538 + aux541 + aux542)<=1))
c Var 'aux2011' direct represents '0' with '-7789'
c Var 'aux2011' direct represents '1' with '7789'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-7789'
c Encoding variable: aux2012 with domain: bool (representing constraint (1<=(aux538 + aux541 + aux542)))
c Var 'aux2012' direct represents '0' with '-7790'
c Var 'aux2012' direct represents '1' with '7790'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-7790'
c Encoding variable: aux2013 with domain: bool (representing constraint ((aux544 + aux547 + aux548)<=1))
c Var 'aux2013' direct represents '0' with '-7791'
c Var 'aux2013' direct represents '1' with '7791'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-7791'
c Encoding variable: aux2014 with domain: bool (representing constraint (1<=(aux544 + aux547 + aux548)))
c Var 'aux2014' direct represents '0' with '-7792'
c Var 'aux2014' direct represents '1' with '7792'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-7792'
c Encoding variable: aux2015 with domain: bool (representing constraint ((aux550 + aux553 + aux554)<=1))
c Var 'aux2015' direct represents '0' with '-7793'
c Var 'aux2015' direct represents '1' with '7793'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-7793'
c Encoding variable: aux2016 with domain: bool (representing constraint (1<=(aux550 + aux553 + aux554)))
c Var 'aux2016' direct represents '0' with '-7794'
c Var 'aux2016' direct represents '1' with '7794'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-7794'
c Encoding variable: aux2017 with domain: bool (representing constraint ((aux556 + aux559 + aux560)<=1))
c Var 'aux2017' direct represents '0' with '-7795'
c Var 'aux2017' direct represents '1' with '7795'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-7795'
c Encoding variable: aux2018 with domain: bool (representing constraint (1<=(aux556 + aux559 + aux560)))
c Var 'aux2018' direct represents '0' with '-7796'
c Var 'aux2018' direct represents '1' with '7796'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-7796'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux562 + aux565 + aux566)<=1))
c Var 'aux2019' direct represents '0' with '-7797'
c Var 'aux2019' direct represents '1' with '7797'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-7797'
c Encoding variable: aux2020 with domain: bool (representing constraint (1<=(aux562 + aux565 + aux566)))
c Var 'aux2020' direct represents '0' with '-7798'
c Var 'aux2020' direct represents '1' with '7798'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-7798'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux568 + aux571 + aux572)<=1))
c Var 'aux2021' direct represents '0' with '-7799'
c Var 'aux2021' direct represents '1' with '7799'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-7799'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux568 + aux571 + aux572)))
c Var 'aux2022' direct represents '0' with '-7800'
c Var 'aux2022' direct represents '1' with '7800'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-7800'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux574 + aux577 + aux578)<=1))
c Var 'aux2023' direct represents '0' with '-7801'
c Var 'aux2023' direct represents '1' with '7801'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-7801'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux574 + aux577 + aux578)))
c Var 'aux2024' direct represents '0' with '-7802'
c Var 'aux2024' direct represents '1' with '7802'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-7802'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux580 + aux583 + aux584)<=1))
c Var 'aux2025' direct represents '0' with '-7803'
c Var 'aux2025' direct represents '1' with '7803'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-7803'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux580 + aux583 + aux584)))
c Var 'aux2026' direct represents '0' with '-7804'
c Var 'aux2026' direct represents '1' with '7804'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-7804'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux586 + aux589 + aux590)<=1))
c Var 'aux2027' direct represents '0' with '-7805'
c Var 'aux2027' direct represents '1' with '7805'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-7805'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux586 + aux589 + aux590)))
c Var 'aux2028' direct represents '0' with '-7806'
c Var 'aux2028' direct represents '1' with '7806'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-7806'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux592 + aux595 + aux596)<=1))
c Var 'aux2029' direct represents '0' with '-7807'
c Var 'aux2029' direct represents '1' with '7807'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-7807'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux592 + aux595 + aux596)))
c Var 'aux2030' direct represents '0' with '-7808'
c Var 'aux2030' direct represents '1' with '7808'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-7808'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux598 + aux601 + aux602)<=1))
c Var 'aux2031' direct represents '0' with '-7809'
c Var 'aux2031' direct represents '1' with '7809'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-7809'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux598 + aux601 + aux602)))
c Var 'aux2032' direct represents '0' with '-7810'
c Var 'aux2032' direct represents '1' with '7810'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-7810'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux604 + aux607 + aux608)<=1))
c Var 'aux2033' direct represents '0' with '-7811'
c Var 'aux2033' direct represents '1' with '7811'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-7811'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux604 + aux607 + aux608)))
c Var 'aux2034' direct represents '0' with '-7812'
c Var 'aux2034' direct represents '1' with '7812'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-7812'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux610 + aux613 + aux614)<=1))
c Var 'aux2035' direct represents '0' with '-7813'
c Var 'aux2035' direct represents '1' with '7813'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-7813'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux610 + aux613 + aux614)))
c Var 'aux2036' direct represents '0' with '-7814'
c Var 'aux2036' direct represents '1' with '7814'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-7814'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux616 + aux619 + aux620)<=1))
c Var 'aux2037' direct represents '0' with '-7815'
c Var 'aux2037' direct represents '1' with '7815'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-7815'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux616 + aux619 + aux620)))
c Var 'aux2038' direct represents '0' with '-7816'
c Var 'aux2038' direct represents '1' with '7816'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-7816'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux622 + aux625 + aux626)<=1))
c Var 'aux2039' direct represents '0' with '-7817'
c Var 'aux2039' direct represents '1' with '7817'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-7817'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux622 + aux625 + aux626)))
c Var 'aux2040' direct represents '0' with '-7818'
c Var 'aux2040' direct represents '1' with '7818'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-7818'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux628 + aux631 + aux632)<=1))
c Var 'aux2041' direct represents '0' with '-7819'
c Var 'aux2041' direct represents '1' with '7819'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-7819'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux628 + aux631 + aux632)))
c Var 'aux2042' direct represents '0' with '-7820'
c Var 'aux2042' direct represents '1' with '7820'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-7820'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux634 + aux637 + aux638)<=1))
c Var 'aux2043' direct represents '0' with '-7821'
c Var 'aux2043' direct represents '1' with '7821'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-7821'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux634 + aux637 + aux638)))
c Var 'aux2044' direct represents '0' with '-7822'
c Var 'aux2044' direct represents '1' with '7822'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-7822'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux640 + aux643 + aux644)<=1))
c Var 'aux2045' direct represents '0' with '-7823'
c Var 'aux2045' direct represents '1' with '7823'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-7823'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux640 + aux643 + aux644)))
c Var 'aux2046' direct represents '0' with '-7824'
c Var 'aux2046' direct represents '1' with '7824'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-7824'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux646 + aux649 + aux650)<=1))
c Var 'aux2047' direct represents '0' with '-7825'
c Var 'aux2047' direct represents '1' with '7825'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-7825'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux646 + aux649 + aux650)))
c Var 'aux2048' direct represents '0' with '-7826'
c Var 'aux2048' direct represents '1' with '7826'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-7826'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux652 + aux655 + aux656)<=1))
c Var 'aux2049' direct represents '0' with '-7827'
c Var 'aux2049' direct represents '1' with '7827'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-7827'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux652 + aux655 + aux656)))
c Var 'aux2050' direct represents '0' with '-7828'
c Var 'aux2050' direct represents '1' with '7828'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-7828'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux658 + aux661 + aux662)<=1))
c Var 'aux2051' direct represents '0' with '-7829'
c Var 'aux2051' direct represents '1' with '7829'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-7829'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux658 + aux661 + aux662)))
c Var 'aux2052' direct represents '0' with '-7830'
c Var 'aux2052' direct represents '1' with '7830'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-7830'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux664 + aux667 + aux668)<=1))
c Var 'aux2053' direct represents '0' with '-7831'
c Var 'aux2053' direct represents '1' with '7831'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-7831'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux664 + aux667 + aux668)))
c Var 'aux2054' direct represents '0' with '-7832'
c Var 'aux2054' direct represents '1' with '7832'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-7832'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux670 + aux673 + aux674)<=1))
c Var 'aux2055' direct represents '0' with '-7833'
c Var 'aux2055' direct represents '1' with '7833'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-7833'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux670 + aux673 + aux674)))
c Var 'aux2056' direct represents '0' with '-7834'
c Var 'aux2056' direct represents '1' with '7834'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-7834'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux676 + aux679 + aux680)<=1))
c Var 'aux2057' direct represents '0' with '-7835'
c Var 'aux2057' direct represents '1' with '7835'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-7835'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux676 + aux679 + aux680)))
c Var 'aux2058' direct represents '0' with '-7836'
c Var 'aux2058' direct represents '1' with '7836'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-7836'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux682 + aux685 + aux686)<=1))
c Var 'aux2059' direct represents '0' with '-7837'
c Var 'aux2059' direct represents '1' with '7837'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-7837'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux682 + aux685 + aux686)))
c Var 'aux2060' direct represents '0' with '-7838'
c Var 'aux2060' direct represents '1' with '7838'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-7838'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux688 + aux691 + aux692)<=1))
c Var 'aux2061' direct represents '0' with '-7839'
c Var 'aux2061' direct represents '1' with '7839'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-7839'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux688 + aux691 + aux692)))
c Var 'aux2062' direct represents '0' with '-7840'
c Var 'aux2062' direct represents '1' with '7840'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-7840'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux694 + aux697 + aux698)<=1))
c Var 'aux2063' direct represents '0' with '-7841'
c Var 'aux2063' direct represents '1' with '7841'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-7841'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux694 + aux697 + aux698)))
c Var 'aux2064' direct represents '0' with '-7842'
c Var 'aux2064' direct represents '1' with '7842'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-7842'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux700 + aux703 + aux704)<=1))
c Var 'aux2065' direct represents '0' with '-7843'
c Var 'aux2065' direct represents '1' with '7843'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-7843'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux700 + aux703 + aux704)))
c Var 'aux2066' direct represents '0' with '-7844'
c Var 'aux2066' direct represents '1' with '7844'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-7844'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux706 + aux709 + aux710)<=1))
c Var 'aux2067' direct represents '0' with '-7845'
c Var 'aux2067' direct represents '1' with '7845'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-7845'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux706 + aux709 + aux710)))
c Var 'aux2068' direct represents '0' with '-7846'
c Var 'aux2068' direct represents '1' with '7846'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-7846'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux712 + aux715 + aux716)<=1))
c Var 'aux2069' direct represents '0' with '-7847'
c Var 'aux2069' direct represents '1' with '7847'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-7847'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux712 + aux715 + aux716)))
c Var 'aux2070' direct represents '0' with '-7848'
c Var 'aux2070' direct represents '1' with '7848'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-7848'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux718 + aux721 + aux722)<=1))
c Var 'aux2071' direct represents '0' with '-7849'
c Var 'aux2071' direct represents '1' with '7849'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-7849'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux718 + aux721 + aux722)))
c Var 'aux2072' direct represents '0' with '-7850'
c Var 'aux2072' direct represents '1' with '7850'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-7850'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux724 + aux727 + aux728)<=1))
c Var 'aux2073' direct represents '0' with '-7851'
c Var 'aux2073' direct represents '1' with '7851'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-7851'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux724 + aux727 + aux728)))
c Var 'aux2074' direct represents '0' with '-7852'
c Var 'aux2074' direct represents '1' with '7852'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-7852'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux730 + aux733 + aux734)<=1))
c Var 'aux2075' direct represents '0' with '-7853'
c Var 'aux2075' direct represents '1' with '7853'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-7853'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux730 + aux733 + aux734)))
c Var 'aux2076' direct represents '0' with '-7854'
c Var 'aux2076' direct represents '1' with '7854'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-7854'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux736 + aux739 + aux740)<=1))
c Var 'aux2077' direct represents '0' with '-7855'
c Var 'aux2077' direct represents '1' with '7855'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-7855'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux736 + aux739 + aux740)))
c Var 'aux2078' direct represents '0' with '-7856'
c Var 'aux2078' direct represents '1' with '7856'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-7856'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux742 + aux745 + aux746)<=1))
c Var 'aux2079' direct represents '0' with '-7857'
c Var 'aux2079' direct represents '1' with '7857'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-7857'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux742 + aux745 + aux746)))
c Var 'aux2080' direct represents '0' with '-7858'
c Var 'aux2080' direct represents '1' with '7858'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-7858'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux748 + aux751 + aux752)<=1))
c Var 'aux2081' direct represents '0' with '-7859'
c Var 'aux2081' direct represents '1' with '7859'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-7859'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux748 + aux751 + aux752)))
c Var 'aux2082' direct represents '0' with '-7860'
c Var 'aux2082' direct represents '1' with '7860'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-7860'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux754 + aux757 + aux758)<=1))
c Var 'aux2083' direct represents '0' with '-7861'
c Var 'aux2083' direct represents '1' with '7861'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-7861'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux754 + aux757 + aux758)))
c Var 'aux2084' direct represents '0' with '-7862'
c Var 'aux2084' direct represents '1' with '7862'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-7862'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux760 + aux763 + aux764)<=1))
c Var 'aux2085' direct represents '0' with '-7863'
c Var 'aux2085' direct represents '1' with '7863'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-7863'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux760 + aux763 + aux764)))
c Var 'aux2086' direct represents '0' with '-7864'
c Var 'aux2086' direct represents '1' with '7864'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-7864'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux766 + aux769 + aux770)<=1))
c Var 'aux2087' direct represents '0' with '-7865'
c Var 'aux2087' direct represents '1' with '7865'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-7865'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux766 + aux769 + aux770)))
c Var 'aux2088' direct represents '0' with '-7866'
c Var 'aux2088' direct represents '1' with '7866'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-7866'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux772 + aux775 + aux776)<=1))
c Var 'aux2089' direct represents '0' with '-7867'
c Var 'aux2089' direct represents '1' with '7867'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-7867'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux772 + aux775 + aux776)))
c Var 'aux2090' direct represents '0' with '-7868'
c Var 'aux2090' direct represents '1' with '7868'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-7868'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux778 + aux781 + aux782)<=1))
c Var 'aux2091' direct represents '0' with '-7869'
c Var 'aux2091' direct represents '1' with '7869'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-7869'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux778 + aux781 + aux782)))
c Var 'aux2092' direct represents '0' with '-7870'
c Var 'aux2092' direct represents '1' with '7870'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-7870'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux784 + aux787 + aux788)<=1))
c Var 'aux2093' direct represents '0' with '-7871'
c Var 'aux2093' direct represents '1' with '7871'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-7871'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux784 + aux787 + aux788)))
c Var 'aux2094' direct represents '0' with '-7872'
c Var 'aux2094' direct represents '1' with '7872'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-7872'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux790 + aux793 + aux794)<=1))
c Var 'aux2095' direct represents '0' with '-7873'
c Var 'aux2095' direct represents '1' with '7873'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-7873'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux790 + aux793 + aux794)))
c Var 'aux2096' direct represents '0' with '-7874'
c Var 'aux2096' direct represents '1' with '7874'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-7874'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux796 + aux799 + aux800)<=1))
c Var 'aux2097' direct represents '0' with '-7875'
c Var 'aux2097' direct represents '1' with '7875'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-7875'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux796 + aux799 + aux800)))
c Var 'aux2098' direct represents '0' with '-7876'
c Var 'aux2098' direct represents '1' with '7876'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-7876'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux802 + aux805 + aux806)<=1))
c Var 'aux2099' direct represents '0' with '-7877'
c Var 'aux2099' direct represents '1' with '7877'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-7877'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux802 + aux805 + aux806)))
c Var 'aux2100' direct represents '0' with '-7878'
c Var 'aux2100' direct represents '1' with '7878'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-7878'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux808 + aux811 + aux812)<=1))
c Var 'aux2101' direct represents '0' with '-7879'
c Var 'aux2101' direct represents '1' with '7879'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-7879'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux808 + aux811 + aux812)))
c Var 'aux2102' direct represents '0' with '-7880'
c Var 'aux2102' direct represents '1' with '7880'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-7880'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux814 + aux817 + aux818)<=1))
c Var 'aux2103' direct represents '0' with '-7881'
c Var 'aux2103' direct represents '1' with '7881'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-7881'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux814 + aux817 + aux818)))
c Var 'aux2104' direct represents '0' with '-7882'
c Var 'aux2104' direct represents '1' with '7882'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-7882'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux820 + aux823 + aux824)<=1))
c Var 'aux2105' direct represents '0' with '-7883'
c Var 'aux2105' direct represents '1' with '7883'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-7883'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux820 + aux823 + aux824)))
c Var 'aux2106' direct represents '0' with '-7884'
c Var 'aux2106' direct represents '1' with '7884'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-7884'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux826 + aux829 + aux830)<=1))
c Var 'aux2107' direct represents '0' with '-7885'
c Var 'aux2107' direct represents '1' with '7885'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-7885'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux826 + aux829 + aux830)))
c Var 'aux2108' direct represents '0' with '-7886'
c Var 'aux2108' direct represents '1' with '7886'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-7886'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux832 + aux835 + aux836)<=1))
c Var 'aux2109' direct represents '0' with '-7887'
c Var 'aux2109' direct represents '1' with '7887'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-7887'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux832 + aux835 + aux836)))
c Var 'aux2110' direct represents '0' with '-7888'
c Var 'aux2110' direct represents '1' with '7888'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-7888'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux838 + aux841 + aux842)<=1))
c Var 'aux2111' direct represents '0' with '-7889'
c Var 'aux2111' direct represents '1' with '7889'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-7889'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux838 + aux841 + aux842)))
c Var 'aux2112' direct represents '0' with '-7890'
c Var 'aux2112' direct represents '1' with '7890'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-7890'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux844 + aux847 + aux848)<=1))
c Var 'aux2113' direct represents '0' with '-7891'
c Var 'aux2113' direct represents '1' with '7891'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-7891'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux844 + aux847 + aux848)))
c Var 'aux2114' direct represents '0' with '-7892'
c Var 'aux2114' direct represents '1' with '7892'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-7892'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux850 + aux853 + aux854)<=1))
c Var 'aux2115' direct represents '0' with '-7893'
c Var 'aux2115' direct represents '1' with '7893'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-7893'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux850 + aux853 + aux854)))
c Var 'aux2116' direct represents '0' with '-7894'
c Var 'aux2116' direct represents '1' with '7894'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-7894'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux856 + aux859 + aux860)<=1))
c Var 'aux2117' direct represents '0' with '-7895'
c Var 'aux2117' direct represents '1' with '7895'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-7895'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux856 + aux859 + aux860)))
c Var 'aux2118' direct represents '0' with '-7896'
c Var 'aux2118' direct represents '1' with '7896'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-7896'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux862 + aux865 + aux866)<=1))
c Var 'aux2119' direct represents '0' with '-7897'
c Var 'aux2119' direct represents '1' with '7897'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-7897'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux862 + aux865 + aux866)))
c Var 'aux2120' direct represents '0' with '-7898'
c Var 'aux2120' direct represents '1' with '7898'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-7898'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux868 + aux871 + aux872)<=1))
c Var 'aux2121' direct represents '0' with '-7899'
c Var 'aux2121' direct represents '1' with '7899'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-7899'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux868 + aux871 + aux872)))
c Var 'aux2122' direct represents '0' with '-7900'
c Var 'aux2122' direct represents '1' with '7900'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-7900'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux874 + aux877 + aux878)<=1))
c Var 'aux2123' direct represents '0' with '-7901'
c Var 'aux2123' direct represents '1' with '7901'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-7901'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux874 + aux877 + aux878)))
c Var 'aux2124' direct represents '0' with '-7902'
c Var 'aux2124' direct represents '1' with '7902'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-7902'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux880 + aux883 + aux884)<=1))
c Var 'aux2125' direct represents '0' with '-7903'
c Var 'aux2125' direct represents '1' with '7903'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-7903'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux880 + aux883 + aux884)))
c Var 'aux2126' direct represents '0' with '-7904'
c Var 'aux2126' direct represents '1' with '7904'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-7904'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux886 + aux889 + aux890)<=1))
c Var 'aux2127' direct represents '0' with '-7905'
c Var 'aux2127' direct represents '1' with '7905'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-7905'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux886 + aux889 + aux890)))
c Var 'aux2128' direct represents '0' with '-7906'
c Var 'aux2128' direct represents '1' with '7906'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-7906'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux892 + aux895 + aux896)<=1))
c Var 'aux2129' direct represents '0' with '-7907'
c Var 'aux2129' direct represents '1' with '7907'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-7907'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux892 + aux895 + aux896)))
c Var 'aux2130' direct represents '0' with '-7908'
c Var 'aux2130' direct represents '1' with '7908'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-7908'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux898 + aux901 + aux902)<=1))
c Var 'aux2131' direct represents '0' with '-7909'
c Var 'aux2131' direct represents '1' with '7909'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-7909'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux898 + aux901 + aux902)))
c Var 'aux2132' direct represents '0' with '-7910'
c Var 'aux2132' direct represents '1' with '7910'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-7910'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux904 + aux907 + aux908)<=1))
c Var 'aux2133' direct represents '0' with '-7911'
c Var 'aux2133' direct represents '1' with '7911'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-7911'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux904 + aux907 + aux908)))
c Var 'aux2134' direct represents '0' with '-7912'
c Var 'aux2134' direct represents '1' with '7912'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-7912'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux910 + aux913 + aux914)<=1))
c Var 'aux2135' direct represents '0' with '-7913'
c Var 'aux2135' direct represents '1' with '7913'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-7913'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux910 + aux913 + aux914)))
c Var 'aux2136' direct represents '0' with '-7914'
c Var 'aux2136' direct represents '1' with '7914'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-7914'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux916 + aux919 + aux920)<=1))
c Var 'aux2137' direct represents '0' with '-7915'
c Var 'aux2137' direct represents '1' with '7915'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-7915'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux916 + aux919 + aux920)))
c Var 'aux2138' direct represents '0' with '-7916'
c Var 'aux2138' direct represents '1' with '7916'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-7916'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux922 + aux925 + aux926)<=1))
c Var 'aux2139' direct represents '0' with '-7917'
c Var 'aux2139' direct represents '1' with '7917'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-7917'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux922 + aux925 + aux926)))
c Var 'aux2140' direct represents '0' with '-7918'
c Var 'aux2140' direct represents '1' with '7918'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-7918'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux928 + aux931 + aux932)<=1))
c Var 'aux2141' direct represents '0' with '-7919'
c Var 'aux2141' direct represents '1' with '7919'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-7919'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux928 + aux931 + aux932)))
c Var 'aux2142' direct represents '0' with '-7920'
c Var 'aux2142' direct represents '1' with '7920'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-7920'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux934 + aux937 + aux938)<=1))
c Var 'aux2143' direct represents '0' with '-7921'
c Var 'aux2143' direct represents '1' with '7921'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-7921'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux934 + aux937 + aux938)))
c Var 'aux2144' direct represents '0' with '-7922'
c Var 'aux2144' direct represents '1' with '7922'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-7922'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux940 + aux943 + aux944)<=1))
c Var 'aux2145' direct represents '0' with '-7923'
c Var 'aux2145' direct represents '1' with '7923'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-7923'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux940 + aux943 + aux944)))
c Var 'aux2146' direct represents '0' with '-7924'
c Var 'aux2146' direct represents '1' with '7924'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-7924'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux946 + aux949 + aux950)<=1))
c Var 'aux2147' direct represents '0' with '-7925'
c Var 'aux2147' direct represents '1' with '7925'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-7925'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux946 + aux949 + aux950)))
c Var 'aux2148' direct represents '0' with '-7926'
c Var 'aux2148' direct represents '1' with '7926'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-7926'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux952 + aux955 + aux956)<=1))
c Var 'aux2149' direct represents '0' with '-7927'
c Var 'aux2149' direct represents '1' with '7927'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-7927'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux952 + aux955 + aux956)))
c Var 'aux2150' direct represents '0' with '-7928'
c Var 'aux2150' direct represents '1' with '7928'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-7928'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux958 + aux961 + aux962)<=1))
c Var 'aux2151' direct represents '0' with '-7929'
c Var 'aux2151' direct represents '1' with '7929'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-7929'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux958 + aux961 + aux962)))
c Var 'aux2152' direct represents '0' with '-7930'
c Var 'aux2152' direct represents '1' with '7930'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-7930'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux964 + aux967 + aux968)<=1))
c Var 'aux2153' direct represents '0' with '-7931'
c Var 'aux2153' direct represents '1' with '7931'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-7931'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux964 + aux967 + aux968)))
c Var 'aux2154' direct represents '0' with '-7932'
c Var 'aux2154' direct represents '1' with '7932'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-7932'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux970 + aux973 + aux974)<=1))
c Var 'aux2155' direct represents '0' with '-7933'
c Var 'aux2155' direct represents '1' with '7933'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-7933'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux970 + aux973 + aux974)))
c Var 'aux2156' direct represents '0' with '-7934'
c Var 'aux2156' direct represents '1' with '7934'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-7934'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux976 + aux979 + aux980)<=1))
c Var 'aux2157' direct represents '0' with '-7935'
c Var 'aux2157' direct represents '1' with '7935'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-7935'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux976 + aux979 + aux980)))
c Var 'aux2158' direct represents '0' with '-7936'
c Var 'aux2158' direct represents '1' with '7936'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-7936'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux982 + aux985 + aux986)<=1))
c Var 'aux2159' direct represents '0' with '-7937'
c Var 'aux2159' direct represents '1' with '7937'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-7937'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux982 + aux985 + aux986)))
c Var 'aux2160' direct represents '0' with '-7938'
c Var 'aux2160' direct represents '1' with '7938'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-7938'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux988 + aux991 + aux992)<=1))
c Var 'aux2161' direct represents '0' with '-7939'
c Var 'aux2161' direct represents '1' with '7939'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-7939'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux988 + aux991 + aux992)))
c Var 'aux2162' direct represents '0' with '-7940'
c Var 'aux2162' direct represents '1' with '7940'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-7940'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux994 + aux997 + aux998)<=1))
c Var 'aux2163' direct represents '0' with '-7941'
c Var 'aux2163' direct represents '1' with '7941'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-7941'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux994 + aux997 + aux998)))
c Var 'aux2164' direct represents '0' with '-7942'
c Var 'aux2164' direct represents '1' with '7942'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-7942'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux1000 + aux1003 + aux1004)<=1))
c Var 'aux2165' direct represents '0' with '-7943'
c Var 'aux2165' direct represents '1' with '7943'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-7943'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux1000 + aux1003 + aux1004)))
c Var 'aux2166' direct represents '0' with '-7944'
c Var 'aux2166' direct represents '1' with '7944'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-7944'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux1006 + aux1009 + aux1010)<=1))
c Var 'aux2167' direct represents '0' with '-7945'
c Var 'aux2167' direct represents '1' with '7945'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-7945'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux1006 + aux1009 + aux1010)))
c Var 'aux2168' direct represents '0' with '-7946'
c Var 'aux2168' direct represents '1' with '7946'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-7946'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux1012 + aux1015 + aux1016)<=1))
c Var 'aux2169' direct represents '0' with '-7947'
c Var 'aux2169' direct represents '1' with '7947'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-7947'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux1012 + aux1015 + aux1016)))
c Var 'aux2170' direct represents '0' with '-7948'
c Var 'aux2170' direct represents '1' with '7948'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-7948'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux1018 + aux1021 + aux1022)<=1))
c Var 'aux2171' direct represents '0' with '-7949'
c Var 'aux2171' direct represents '1' with '7949'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-7949'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux1018 + aux1021 + aux1022)))
c Var 'aux2172' direct represents '0' with '-7950'
c Var 'aux2172' direct represents '1' with '7950'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-7950'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux1024 + aux1027 + aux1028)<=1))
c Var 'aux2173' direct represents '0' with '-7951'
c Var 'aux2173' direct represents '1' with '7951'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-7951'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux1024 + aux1027 + aux1028)))
c Var 'aux2174' direct represents '0' with '-7952'
c Var 'aux2174' direct represents '1' with '7952'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-7952'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux1030 + aux1033 + aux1034)<=1))
c Var 'aux2175' direct represents '0' with '-7953'
c Var 'aux2175' direct represents '1' with '7953'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-7953'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux1030 + aux1033 + aux1034)))
c Var 'aux2176' direct represents '0' with '-7954'
c Var 'aux2176' direct represents '1' with '7954'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-7954'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux1036 + aux1039 + aux1040)<=1))
c Var 'aux2177' direct represents '0' with '-7955'
c Var 'aux2177' direct represents '1' with '7955'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-7955'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux1036 + aux1039 + aux1040)))
c Var 'aux2178' direct represents '0' with '-7956'
c Var 'aux2178' direct represents '1' with '7956'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-7956'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux1042 + aux1045 + aux1046)<=1))
c Var 'aux2179' direct represents '0' with '-7957'
c Var 'aux2179' direct represents '1' with '7957'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-7957'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux1042 + aux1045 + aux1046)))
c Var 'aux2180' direct represents '0' with '-7958'
c Var 'aux2180' direct represents '1' with '7958'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-7958'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux1048 + aux1051 + aux1052)<=1))
c Var 'aux2181' direct represents '0' with '-7959'
c Var 'aux2181' direct represents '1' with '7959'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-7959'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux1048 + aux1051 + aux1052)))
c Var 'aux2182' direct represents '0' with '-7960'
c Var 'aux2182' direct represents '1' with '7960'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-7960'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux1054 + aux1057 + aux1058)<=1))
c Var 'aux2183' direct represents '0' with '-7961'
c Var 'aux2183' direct represents '1' with '7961'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-7961'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux1054 + aux1057 + aux1058)))
c Var 'aux2184' direct represents '0' with '-7962'
c Var 'aux2184' direct represents '1' with '7962'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-7962'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux1060 + aux1063 + aux1064)<=1))
c Var 'aux2185' direct represents '0' with '-7963'
c Var 'aux2185' direct represents '1' with '7963'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-7963'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux1060 + aux1063 + aux1064)))
c Var 'aux2186' direct represents '0' with '-7964'
c Var 'aux2186' direct represents '1' with '7964'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-7964'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux1066 + aux1069 + aux1070)<=1))
c Var 'aux2187' direct represents '0' with '-7965'
c Var 'aux2187' direct represents '1' with '7965'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-7965'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux1066 + aux1069 + aux1070)))
c Var 'aux2188' direct represents '0' with '-7966'
c Var 'aux2188' direct represents '1' with '7966'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-7966'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux1072 + aux1075 + aux1076)<=1))
c Var 'aux2189' direct represents '0' with '-7967'
c Var 'aux2189' direct represents '1' with '7967'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-7967'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux1072 + aux1075 + aux1076)))
c Var 'aux2190' direct represents '0' with '-7968'
c Var 'aux2190' direct represents '1' with '7968'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-7968'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux1078 + aux1081 + aux1082)<=1))
c Var 'aux2191' direct represents '0' with '-7969'
c Var 'aux2191' direct represents '1' with '7969'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-7969'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux1078 + aux1081 + aux1082)))
c Var 'aux2192' direct represents '0' with '-7970'
c Var 'aux2192' direct represents '1' with '7970'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-7970'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux1084 + aux1087 + aux1088)<=1))
c Var 'aux2193' direct represents '0' with '-7971'
c Var 'aux2193' direct represents '1' with '7971'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-7971'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux1084 + aux1087 + aux1088)))
c Var 'aux2194' direct represents '0' with '-7972'
c Var 'aux2194' direct represents '1' with '7972'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-7972'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux1090 + aux1093 + aux1094)<=1))
c Var 'aux2195' direct represents '0' with '-7973'
c Var 'aux2195' direct represents '1' with '7973'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-7973'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux1090 + aux1093 + aux1094)))
c Var 'aux2196' direct represents '0' with '-7974'
c Var 'aux2196' direct represents '1' with '7974'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-7974'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux1096 + aux1099 + aux1100)<=1))
c Var 'aux2197' direct represents '0' with '-7975'
c Var 'aux2197' direct represents '1' with '7975'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-7975'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux1096 + aux1099 + aux1100)))
c Var 'aux2198' direct represents '0' with '-7976'
c Var 'aux2198' direct represents '1' with '7976'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-7976'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux1102 + aux1105 + aux1106)<=1))
c Var 'aux2199' direct represents '0' with '-7977'
c Var 'aux2199' direct represents '1' with '7977'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-7977'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux1102 + aux1105 + aux1106)))
c Var 'aux2200' direct represents '0' with '-7978'
c Var 'aux2200' direct represents '1' with '7978'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-7978'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux1108 + aux1111 + aux1112)<=1))
c Var 'aux2201' direct represents '0' with '-7979'
c Var 'aux2201' direct represents '1' with '7979'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-7979'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux1108 + aux1111 + aux1112)))
c Var 'aux2202' direct represents '0' with '-7980'
c Var 'aux2202' direct represents '1' with '7980'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-7980'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux1114 + aux1117 + aux1118)<=1))
c Var 'aux2203' direct represents '0' with '-7981'
c Var 'aux2203' direct represents '1' with '7981'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-7981'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux1114 + aux1117 + aux1118)))
c Var 'aux2204' direct represents '0' with '-7982'
c Var 'aux2204' direct represents '1' with '7982'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-7982'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux1120 + aux1123 + aux1124)<=1))
c Var 'aux2205' direct represents '0' with '-7983'
c Var 'aux2205' direct represents '1' with '7983'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-7983'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux1120 + aux1123 + aux1124)))
c Var 'aux2206' direct represents '0' with '-7984'
c Var 'aux2206' direct represents '1' with '7984'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-7984'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux1126 + aux1129 + aux1130)<=1))
c Var 'aux2207' direct represents '0' with '-7985'
c Var 'aux2207' direct represents '1' with '7985'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-7985'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux1126 + aux1129 + aux1130)))
c Var 'aux2208' direct represents '0' with '-7986'
c Var 'aux2208' direct represents '1' with '7986'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-7986'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux1132 + aux1135 + aux1136)<=1))
c Var 'aux2209' direct represents '0' with '-7987'
c Var 'aux2209' direct represents '1' with '7987'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-7987'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux1132 + aux1135 + aux1136)))
c Var 'aux2210' direct represents '0' with '-7988'
c Var 'aux2210' direct represents '1' with '7988'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-7988'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux1138 + aux1141 + aux1142)<=1))
c Var 'aux2211' direct represents '0' with '-7989'
c Var 'aux2211' direct represents '1' with '7989'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-7989'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux1138 + aux1141 + aux1142)))
c Var 'aux2212' direct represents '0' with '-7990'
c Var 'aux2212' direct represents '1' with '7990'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-7990'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux1144 + aux1147 + aux1148)<=1))
c Var 'aux2213' direct represents '0' with '-7991'
c Var 'aux2213' direct represents '1' with '7991'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-7991'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux1144 + aux1147 + aux1148)))
c Var 'aux2214' direct represents '0' with '-7992'
c Var 'aux2214' direct represents '1' with '7992'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-7992'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux1150 + aux1153 + aux1154)<=1))
c Var 'aux2215' direct represents '0' with '-7993'
c Var 'aux2215' direct represents '1' with '7993'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-7993'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux1150 + aux1153 + aux1154)))
c Var 'aux2216' direct represents '0' with '-7994'
c Var 'aux2216' direct represents '1' with '7994'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-7994'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1156 + aux1159 + aux1160)<=1))
c Var 'aux2217' direct represents '0' with '-7995'
c Var 'aux2217' direct represents '1' with '7995'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-7995'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1156 + aux1159 + aux1160)))
c Var 'aux2218' direct represents '0' with '-7996'
c Var 'aux2218' direct represents '1' with '7996'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-7996'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1162 + aux1165 + aux1166)<=1))
c Var 'aux2219' direct represents '0' with '-7997'
c Var 'aux2219' direct represents '1' with '7997'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-7997'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1162 + aux1165 + aux1166)))
c Var 'aux2220' direct represents '0' with '-7998'
c Var 'aux2220' direct represents '1' with '7998'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-7998'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1168 + aux1171 + aux1172)<=1))
c Var 'aux2221' direct represents '0' with '-7999'
c Var 'aux2221' direct represents '1' with '7999'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-7999'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1168 + aux1171 + aux1172)))
c Var 'aux2222' direct represents '0' with '-8000'
c Var 'aux2222' direct represents '1' with '8000'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8000'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1174 + aux1177 + aux1178)<=1))
c Var 'aux2223' direct represents '0' with '-8001'
c Var 'aux2223' direct represents '1' with '8001'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8001'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1174 + aux1177 + aux1178)))
c Var 'aux2224' direct represents '0' with '-8002'
c Var 'aux2224' direct represents '1' with '8002'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8002'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1180 + aux1183 + aux1184)<=1))
c Var 'aux2225' direct represents '0' with '-8003'
c Var 'aux2225' direct represents '1' with '8003'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8003'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1180 + aux1183 + aux1184)))
c Var 'aux2226' direct represents '0' with '-8004'
c Var 'aux2226' direct represents '1' with '8004'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8004'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1186 + aux1189 + aux1190)<=1))
c Var 'aux2227' direct represents '0' with '-8005'
c Var 'aux2227' direct represents '1' with '8005'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8005'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1186 + aux1189 + aux1190)))
c Var 'aux2228' direct represents '0' with '-8006'
c Var 'aux2228' direct represents '1' with '8006'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8006'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1192 + aux1195 + aux1196)<=1))
c Var 'aux2229' direct represents '0' with '-8007'
c Var 'aux2229' direct represents '1' with '8007'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8007'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1192 + aux1195 + aux1196)))
c Var 'aux2230' direct represents '0' with '-8008'
c Var 'aux2230' direct represents '1' with '8008'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8008'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1198 + aux1201 + aux1202)<=1))
c Var 'aux2231' direct represents '0' with '-8009'
c Var 'aux2231' direct represents '1' with '8009'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8009'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1198 + aux1201 + aux1202)))
c Var 'aux2232' direct represents '0' with '-8010'
c Var 'aux2232' direct represents '1' with '8010'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8010'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1204 + aux1207 + aux1208)<=1))
c Var 'aux2233' direct represents '0' with '-8011'
c Var 'aux2233' direct represents '1' with '8011'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8011'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1204 + aux1207 + aux1208)))
c Var 'aux2234' direct represents '0' with '-8012'
c Var 'aux2234' direct represents '1' with '8012'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8012'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1210 + aux1213 + aux1214)<=1))
c Var 'aux2235' direct represents '0' with '-8013'
c Var 'aux2235' direct represents '1' with '8013'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8013'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1210 + aux1213 + aux1214)))
c Var 'aux2236' direct represents '0' with '-8014'
c Var 'aux2236' direct represents '1' with '8014'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8014'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1216 + aux1219 + aux1220)<=1))
c Var 'aux2237' direct represents '0' with '-8015'
c Var 'aux2237' direct represents '1' with '8015'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8015'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1216 + aux1219 + aux1220)))
c Var 'aux2238' direct represents '0' with '-8016'
c Var 'aux2238' direct represents '1' with '8016'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8016'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1222 + aux1225 + aux1226)<=1))
c Var 'aux2239' direct represents '0' with '-8017'
c Var 'aux2239' direct represents '1' with '8017'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8017'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1222 + aux1225 + aux1226)))
c Var 'aux2240' direct represents '0' with '-8018'
c Var 'aux2240' direct represents '1' with '8018'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8018'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1228 + aux1231 + aux1232)<=1))
c Var 'aux2241' direct represents '0' with '-8019'
c Var 'aux2241' direct represents '1' with '8019'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8019'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1228 + aux1231 + aux1232)))
c Var 'aux2242' direct represents '0' with '-8020'
c Var 'aux2242' direct represents '1' with '8020'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8020'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1234 + aux1237 + aux1238)<=1))
c Var 'aux2243' direct represents '0' with '-8021'
c Var 'aux2243' direct represents '1' with '8021'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8021'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1234 + aux1237 + aux1238)))
c Var 'aux2244' direct represents '0' with '-8022'
c Var 'aux2244' direct represents '1' with '8022'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8022'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1240 + aux1243 + aux1244)<=1))
c Var 'aux2245' direct represents '0' with '-8023'
c Var 'aux2245' direct represents '1' with '8023'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8023'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1240 + aux1243 + aux1244)))
c Var 'aux2246' direct represents '0' with '-8024'
c Var 'aux2246' direct represents '1' with '8024'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8024'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1246 + aux1249 + aux1250)<=1))
c Var 'aux2247' direct represents '0' with '-8025'
c Var 'aux2247' direct represents '1' with '8025'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8025'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1246 + aux1249 + aux1250)))
c Var 'aux2248' direct represents '0' with '-8026'
c Var 'aux2248' direct represents '1' with '8026'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8026'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1252 + aux1255 + aux1256)<=1))
c Var 'aux2249' direct represents '0' with '-8027'
c Var 'aux2249' direct represents '1' with '8027'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8027'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1252 + aux1255 + aux1256)))
c Var 'aux2250' direct represents '0' with '-8028'
c Var 'aux2250' direct represents '1' with '8028'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8028'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1258 + aux1261 + aux1262)<=1))
c Var 'aux2251' direct represents '0' with '-8029'
c Var 'aux2251' direct represents '1' with '8029'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8029'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1258 + aux1261 + aux1262)))
c Var 'aux2252' direct represents '0' with '-8030'
c Var 'aux2252' direct represents '1' with '8030'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8030'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1264 + aux1267 + aux1268)<=1))
c Var 'aux2253' direct represents '0' with '-8031'
c Var 'aux2253' direct represents '1' with '8031'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8031'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1264 + aux1267 + aux1268)))
c Var 'aux2254' direct represents '0' with '-8032'
c Var 'aux2254' direct represents '1' with '8032'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8032'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1270 + aux1273 + aux1274)<=1))
c Var 'aux2255' direct represents '0' with '-8033'
c Var 'aux2255' direct represents '1' with '8033'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8033'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1270 + aux1273 + aux1274)))
c Var 'aux2256' direct represents '0' with '-8034'
c Var 'aux2256' direct represents '1' with '8034'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8034'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1276 + aux1279 + aux1280)<=1))
c Var 'aux2257' direct represents '0' with '-8035'
c Var 'aux2257' direct represents '1' with '8035'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8035'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1276 + aux1279 + aux1280)))
c Var 'aux2258' direct represents '0' with '-8036'
c Var 'aux2258' direct represents '1' with '8036'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8036'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1282 + aux1285 + aux1286)<=1))
c Var 'aux2259' direct represents '0' with '-8037'
c Var 'aux2259' direct represents '1' with '8037'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8037'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1282 + aux1285 + aux1286)))
c Var 'aux2260' direct represents '0' with '-8038'
c Var 'aux2260' direct represents '1' with '8038'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8038'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1288 + aux1291 + aux1292)<=1))
c Var 'aux2261' direct represents '0' with '-8039'
c Var 'aux2261' direct represents '1' with '8039'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8039'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1288 + aux1291 + aux1292)))
c Var 'aux2262' direct represents '0' with '-8040'
c Var 'aux2262' direct represents '1' with '8040'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8040'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1294 + aux1297 + aux1298)<=1))
c Var 'aux2263' direct represents '0' with '-8041'
c Var 'aux2263' direct represents '1' with '8041'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8041'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1294 + aux1297 + aux1298)))
c Var 'aux2264' direct represents '0' with '-8042'
c Var 'aux2264' direct represents '1' with '8042'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8042'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1300 + aux1303 + aux1304)<=1))
c Var 'aux2265' direct represents '0' with '-8043'
c Var 'aux2265' direct represents '1' with '8043'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8043'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1300 + aux1303 + aux1304)))
c Var 'aux2266' direct represents '0' with '-8044'
c Var 'aux2266' direct represents '1' with '8044'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8044'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1306 + aux1309 + aux1310)<=1))
c Var 'aux2267' direct represents '0' with '-8045'
c Var 'aux2267' direct represents '1' with '8045'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8045'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1306 + aux1309 + aux1310)))
c Var 'aux2268' direct represents '0' with '-8046'
c Var 'aux2268' direct represents '1' with '8046'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8046'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1312 + aux1315 + aux1316)<=1))
c Var 'aux2269' direct represents '0' with '-8047'
c Var 'aux2269' direct represents '1' with '8047'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8047'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1312 + aux1315 + aux1316)))
c Var 'aux2270' direct represents '0' with '-8048'
c Var 'aux2270' direct represents '1' with '8048'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8048'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1318 + aux1321 + aux1322)<=1))
c Var 'aux2271' direct represents '0' with '-8049'
c Var 'aux2271' direct represents '1' with '8049'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8049'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1318 + aux1321 + aux1322)))
c Var 'aux2272' direct represents '0' with '-8050'
c Var 'aux2272' direct represents '1' with '8050'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8050'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1324 + aux1327 + aux1328)<=1))
c Var 'aux2273' direct represents '0' with '-8051'
c Var 'aux2273' direct represents '1' with '8051'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8051'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1324 + aux1327 + aux1328)))
c Var 'aux2274' direct represents '0' with '-8052'
c Var 'aux2274' direct represents '1' with '8052'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8052'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1330 + aux1333 + aux1334)<=1))
c Var 'aux2275' direct represents '0' with '-8053'
c Var 'aux2275' direct represents '1' with '8053'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8053'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1330 + aux1333 + aux1334)))
c Var 'aux2276' direct represents '0' with '-8054'
c Var 'aux2276' direct represents '1' with '8054'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8054'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1336 + aux1339 + aux1340)<=1))
c Var 'aux2277' direct represents '0' with '-8055'
c Var 'aux2277' direct represents '1' with '8055'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8055'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1336 + aux1339 + aux1340)))
c Var 'aux2278' direct represents '0' with '-8056'
c Var 'aux2278' direct represents '1' with '8056'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8056'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1342 + aux1345 + aux1346)<=1))
c Var 'aux2279' direct represents '0' with '-8057'
c Var 'aux2279' direct represents '1' with '8057'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8057'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1342 + aux1345 + aux1346)))
c Var 'aux2280' direct represents '0' with '-8058'
c Var 'aux2280' direct represents '1' with '8058'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8058'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1348 + aux1351 + aux1352)<=1))
c Var 'aux2281' direct represents '0' with '-8059'
c Var 'aux2281' direct represents '1' with '8059'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8059'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1348 + aux1351 + aux1352)))
c Var 'aux2282' direct represents '0' with '-8060'
c Var 'aux2282' direct represents '1' with '8060'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8060'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1354 + aux1357 + aux1358)<=1))
c Var 'aux2283' direct represents '0' with '-8061'
c Var 'aux2283' direct represents '1' with '8061'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8061'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1354 + aux1357 + aux1358)))
c Var 'aux2284' direct represents '0' with '-8062'
c Var 'aux2284' direct represents '1' with '8062'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8062'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1360 + aux1363 + aux1364)<=1))
c Var 'aux2285' direct represents '0' with '-8063'
c Var 'aux2285' direct represents '1' with '8063'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8063'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1360 + aux1363 + aux1364)))
c Var 'aux2286' direct represents '0' with '-8064'
c Var 'aux2286' direct represents '1' with '8064'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8064'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1366 + aux1369 + aux1370)<=1))
c Var 'aux2287' direct represents '0' with '-8065'
c Var 'aux2287' direct represents '1' with '8065'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8065'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1366 + aux1369 + aux1370)))
c Var 'aux2288' direct represents '0' with '-8066'
c Var 'aux2288' direct represents '1' with '8066'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8066'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1372 + aux1375 + aux1376)<=1))
c Var 'aux2289' direct represents '0' with '-8067'
c Var 'aux2289' direct represents '1' with '8067'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8067'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1372 + aux1375 + aux1376)))
c Var 'aux2290' direct represents '0' with '-8068'
c Var 'aux2290' direct represents '1' with '8068'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8068'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1378 + aux1381 + aux1382)<=1))
c Var 'aux2291' direct represents '0' with '-8069'
c Var 'aux2291' direct represents '1' with '8069'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8069'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1378 + aux1381 + aux1382)))
c Var 'aux2292' direct represents '0' with '-8070'
c Var 'aux2292' direct represents '1' with '8070'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8070'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1384 + aux1387 + aux1388)<=1))
c Var 'aux2293' direct represents '0' with '-8071'
c Var 'aux2293' direct represents '1' with '8071'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8071'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1384 + aux1387 + aux1388)))
c Var 'aux2294' direct represents '0' with '-8072'
c Var 'aux2294' direct represents '1' with '8072'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8072'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1390 + aux1393 + aux1394)<=1))
c Var 'aux2295' direct represents '0' with '-8073'
c Var 'aux2295' direct represents '1' with '8073'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8073'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1390 + aux1393 + aux1394)))
c Var 'aux2296' direct represents '0' with '-8074'
c Var 'aux2296' direct represents '1' with '8074'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8074'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1396 + aux1399 + aux1400)<=1))
c Var 'aux2297' direct represents '0' with '-8075'
c Var 'aux2297' direct represents '1' with '8075'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8075'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1396 + aux1399 + aux1400)))
c Var 'aux2298' direct represents '0' with '-8076'
c Var 'aux2298' direct represents '1' with '8076'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8076'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1402 + aux1405 + aux1406)<=1))
c Var 'aux2299' direct represents '0' with '-8077'
c Var 'aux2299' direct represents '1' with '8077'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8077'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1402 + aux1405 + aux1406)))
c Var 'aux2300' direct represents '0' with '-8078'
c Var 'aux2300' direct represents '1' with '8078'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8078'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1408 + aux1411 + aux1412)<=1))
c Var 'aux2301' direct represents '0' with '-8079'
c Var 'aux2301' direct represents '1' with '8079'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8079'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1408 + aux1411 + aux1412)))
c Var 'aux2302' direct represents '0' with '-8080'
c Var 'aux2302' direct represents '1' with '8080'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8080'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1414 + aux1417 + aux1418)<=1))
c Var 'aux2303' direct represents '0' with '-8081'
c Var 'aux2303' direct represents '1' with '8081'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8081'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1414 + aux1417 + aux1418)))
c Var 'aux2304' direct represents '0' with '-8082'
c Var 'aux2304' direct represents '1' with '8082'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8082'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1420 + aux1423 + aux1424)<=1))
c Var 'aux2305' direct represents '0' with '-8083'
c Var 'aux2305' direct represents '1' with '8083'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8083'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1420 + aux1423 + aux1424)))
c Var 'aux2306' direct represents '0' with '-8084'
c Var 'aux2306' direct represents '1' with '8084'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8084'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1426 + aux1429 + aux1430)<=1))
c Var 'aux2307' direct represents '0' with '-8085'
c Var 'aux2307' direct represents '1' with '8085'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8085'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1426 + aux1429 + aux1430)))
c Var 'aux2308' direct represents '0' with '-8086'
c Var 'aux2308' direct represents '1' with '8086'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8086'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1432 + aux1435 + aux1436)<=1))
c Var 'aux2309' direct represents '0' with '-8087'
c Var 'aux2309' direct represents '1' with '8087'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8087'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1432 + aux1435 + aux1436)))
c Var 'aux2310' direct represents '0' with '-8088'
c Var 'aux2310' direct represents '1' with '8088'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8088'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1438 + aux1441 + aux1442)<=1))
c Var 'aux2311' direct represents '0' with '-8089'
c Var 'aux2311' direct represents '1' with '8089'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8089'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1438 + aux1441 + aux1442)))
c Var 'aux2312' direct represents '0' with '-8090'
c Var 'aux2312' direct represents '1' with '8090'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8090'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1444 + aux1447 + aux1448)<=1))
c Var 'aux2313' direct represents '0' with '-8091'
c Var 'aux2313' direct represents '1' with '8091'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8091'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1444 + aux1447 + aux1448)))
c Var 'aux2314' direct represents '0' with '-8092'
c Var 'aux2314' direct represents '1' with '8092'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8092'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1450 + aux1453 + aux1454)<=1))
c Var 'aux2315' direct represents '0' with '-8093'
c Var 'aux2315' direct represents '1' with '8093'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8093'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1450 + aux1453 + aux1454)))
c Var 'aux2316' direct represents '0' with '-8094'
c Var 'aux2316' direct represents '1' with '8094'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8094'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1456 + aux1459 + aux1460)<=1))
c Var 'aux2317' direct represents '0' with '-8095'
c Var 'aux2317' direct represents '1' with '8095'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8095'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1456 + aux1459 + aux1460)))
c Var 'aux2318' direct represents '0' with '-8096'
c Var 'aux2318' direct represents '1' with '8096'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8096'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1462 + aux1465 + aux1466)<=1))
c Var 'aux2319' direct represents '0' with '-8097'
c Var 'aux2319' direct represents '1' with '8097'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8097'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1462 + aux1465 + aux1466)))
c Var 'aux2320' direct represents '0' with '-8098'
c Var 'aux2320' direct represents '1' with '8098'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8098'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1468 + aux1471 + aux1472)<=1))
c Var 'aux2321' direct represents '0' with '-8099'
c Var 'aux2321' direct represents '1' with '8099'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8099'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1468 + aux1471 + aux1472)))
c Var 'aux2322' direct represents '0' with '-8100'
c Var 'aux2322' direct represents '1' with '8100'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8100'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1474 + aux1477 + aux1478)<=1))
c Var 'aux2323' direct represents '0' with '-8101'
c Var 'aux2323' direct represents '1' with '8101'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8101'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1474 + aux1477 + aux1478)))
c Var 'aux2324' direct represents '0' with '-8102'
c Var 'aux2324' direct represents '1' with '8102'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8102'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1480 + aux1483 + aux1484)<=1))
c Var 'aux2325' direct represents '0' with '-8103'
c Var 'aux2325' direct represents '1' with '8103'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8103'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1480 + aux1483 + aux1484)))
c Var 'aux2326' direct represents '0' with '-8104'
c Var 'aux2326' direct represents '1' with '8104'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8104'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1486 + aux1489 + aux1490)<=1))
c Var 'aux2327' direct represents '0' with '-8105'
c Var 'aux2327' direct represents '1' with '8105'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8105'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1486 + aux1489 + aux1490)))
c Var 'aux2328' direct represents '0' with '-8106'
c Var 'aux2328' direct represents '1' with '8106'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8106'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1492 + aux1495 + aux1496)<=1))
c Var 'aux2329' direct represents '0' with '-8107'
c Var 'aux2329' direct represents '1' with '8107'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8107'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1492 + aux1495 + aux1496)))
c Var 'aux2330' direct represents '0' with '-8108'
c Var 'aux2330' direct represents '1' with '8108'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8108'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1498 + aux1501 + aux1502)<=1))
c Var 'aux2331' direct represents '0' with '-8109'
c Var 'aux2331' direct represents '1' with '8109'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8109'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1498 + aux1501 + aux1502)))
c Var 'aux2332' direct represents '0' with '-8110'
c Var 'aux2332' direct represents '1' with '8110'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8110'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1504 + aux1507 + aux1508)<=1))
c Var 'aux2333' direct represents '0' with '-8111'
c Var 'aux2333' direct represents '1' with '8111'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8111'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1504 + aux1507 + aux1508)))
c Var 'aux2334' direct represents '0' with '-8112'
c Var 'aux2334' direct represents '1' with '8112'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8112'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1510 + aux1513 + aux1514)<=1))
c Var 'aux2335' direct represents '0' with '-8113'
c Var 'aux2335' direct represents '1' with '8113'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8113'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1510 + aux1513 + aux1514)))
c Var 'aux2336' direct represents '0' with '-8114'
c Var 'aux2336' direct represents '1' with '8114'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8114'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1516 + aux1519 + aux1520)<=1))
c Var 'aux2337' direct represents '0' with '-8115'
c Var 'aux2337' direct represents '1' with '8115'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8115'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1516 + aux1519 + aux1520)))
c Var 'aux2338' direct represents '0' with '-8116'
c Var 'aux2338' direct represents '1' with '8116'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8116'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1522 + aux1525 + aux1526)<=1))
c Var 'aux2339' direct represents '0' with '-8117'
c Var 'aux2339' direct represents '1' with '8117'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8117'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1522 + aux1525 + aux1526)))
c Var 'aux2340' direct represents '0' with '-8118'
c Var 'aux2340' direct represents '1' with '8118'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8118'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1528 + aux1531 + aux1532)<=1))
c Var 'aux2341' direct represents '0' with '-8119'
c Var 'aux2341' direct represents '1' with '8119'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8119'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1528 + aux1531 + aux1532)))
c Var 'aux2342' direct represents '0' with '-8120'
c Var 'aux2342' direct represents '1' with '8120'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8120'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1534 + aux1537 + aux1538)<=1))
c Var 'aux2343' direct represents '0' with '-8121'
c Var 'aux2343' direct represents '1' with '8121'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8121'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1534 + aux1537 + aux1538)))
c Var 'aux2344' direct represents '0' with '-8122'
c Var 'aux2344' direct represents '1' with '8122'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8122'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1540 + aux1543 + aux1544)<=1))
c Var 'aux2345' direct represents '0' with '-8123'
c Var 'aux2345' direct represents '1' with '8123'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8123'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1540 + aux1543 + aux1544)))
c Var 'aux2346' direct represents '0' with '-8124'
c Var 'aux2346' direct represents '1' with '8124'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8124'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1546 + aux1549 + aux1550)<=1))
c Var 'aux2347' direct represents '0' with '-8125'
c Var 'aux2347' direct represents '1' with '8125'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8125'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1546 + aux1549 + aux1550)))
c Var 'aux2348' direct represents '0' with '-8126'
c Var 'aux2348' direct represents '1' with '8126'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8126'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1552 + aux1555 + aux1556)<=1))
c Var 'aux2349' direct represents '0' with '-8127'
c Var 'aux2349' direct represents '1' with '8127'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8127'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1552 + aux1555 + aux1556)))
c Var 'aux2350' direct represents '0' with '-8128'
c Var 'aux2350' direct represents '1' with '8128'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8128'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1558 + aux1561 + aux1562)<=1))
c Var 'aux2351' direct represents '0' with '-8129'
c Var 'aux2351' direct represents '1' with '8129'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8129'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1558 + aux1561 + aux1562)))
c Var 'aux2352' direct represents '0' with '-8130'
c Var 'aux2352' direct represents '1' with '8130'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8130'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1564 + aux1567 + aux1568)<=1))
c Var 'aux2353' direct represents '0' with '-8131'
c Var 'aux2353' direct represents '1' with '8131'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8131'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1564 + aux1567 + aux1568)))
c Var 'aux2354' direct represents '0' with '-8132'
c Var 'aux2354' direct represents '1' with '8132'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8132'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1570 + aux1573 + aux1574)<=1))
c Var 'aux2355' direct represents '0' with '-8133'
c Var 'aux2355' direct represents '1' with '8133'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8133'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1570 + aux1573 + aux1574)))
c Var 'aux2356' direct represents '0' with '-8134'
c Var 'aux2356' direct represents '1' with '8134'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8134'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1576 + aux1579 + aux1580)<=1))
c Var 'aux2357' direct represents '0' with '-8135'
c Var 'aux2357' direct represents '1' with '8135'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8135'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1576 + aux1579 + aux1580)))
c Var 'aux2358' direct represents '0' with '-8136'
c Var 'aux2358' direct represents '1' with '8136'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8136'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1582 + aux1585 + aux1586)<=1))
c Var 'aux2359' direct represents '0' with '-8137'
c Var 'aux2359' direct represents '1' with '8137'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8137'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1582 + aux1585 + aux1586)))
c Var 'aux2360' direct represents '0' with '-8138'
c Var 'aux2360' direct represents '1' with '8138'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8138'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1588 + aux1591 + aux1592)<=1))
c Var 'aux2361' direct represents '0' with '-8139'
c Var 'aux2361' direct represents '1' with '8139'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8139'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1588 + aux1591 + aux1592)))
c Var 'aux2362' direct represents '0' with '-8140'
c Var 'aux2362' direct represents '1' with '8140'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8140'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1594 + aux1597 + aux1598)<=1))
c Var 'aux2363' direct represents '0' with '-8141'
c Var 'aux2363' direct represents '1' with '8141'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8141'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1594 + aux1597 + aux1598)))
c Var 'aux2364' direct represents '0' with '-8142'
c Var 'aux2364' direct represents '1' with '8142'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8142'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1600 + aux1603 + aux1604)<=1))
c Var 'aux2365' direct represents '0' with '-8143'
c Var 'aux2365' direct represents '1' with '8143'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8143'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1600 + aux1603 + aux1604)))
c Var 'aux2366' direct represents '0' with '-8144'
c Var 'aux2366' direct represents '1' with '8144'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8144'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1606 + aux1609 + aux1610)<=1))
c Var 'aux2367' direct represents '0' with '-8145'
c Var 'aux2367' direct represents '1' with '8145'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8145'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1606 + aux1609 + aux1610)))
c Var 'aux2368' direct represents '0' with '-8146'
c Var 'aux2368' direct represents '1' with '8146'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8146'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1612 + aux1615 + aux1616)<=1))
c Var 'aux2369' direct represents '0' with '-8147'
c Var 'aux2369' direct represents '1' with '8147'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8147'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1612 + aux1615 + aux1616)))
c Var 'aux2370' direct represents '0' with '-8148'
c Var 'aux2370' direct represents '1' with '8148'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8148'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1618 + aux1621 + aux1622)<=1))
c Var 'aux2371' direct represents '0' with '-8149'
c Var 'aux2371' direct represents '1' with '8149'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8149'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1618 + aux1621 + aux1622)))
c Var 'aux2372' direct represents '0' with '-8150'
c Var 'aux2372' direct represents '1' with '8150'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8150'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1624 + aux1627 + aux1628)<=1))
c Var 'aux2373' direct represents '0' with '-8151'
c Var 'aux2373' direct represents '1' with '8151'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8151'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1624 + aux1627 + aux1628)))
c Var 'aux2374' direct represents '0' with '-8152'
c Var 'aux2374' direct represents '1' with '8152'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8152'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1630 + aux1633 + aux1634)<=1))
c Var 'aux2375' direct represents '0' with '-8153'
c Var 'aux2375' direct represents '1' with '8153'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8153'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1630 + aux1633 + aux1634)))
c Var 'aux2376' direct represents '0' with '-8154'
c Var 'aux2376' direct represents '1' with '8154'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8154'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1636 + aux1639 + aux1640)<=1))
c Var 'aux2377' direct represents '0' with '-8155'
c Var 'aux2377' direct represents '1' with '8155'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8155'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1636 + aux1639 + aux1640)))
c Var 'aux2378' direct represents '0' with '-8156'
c Var 'aux2378' direct represents '1' with '8156'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8156'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1642 + aux1645 + aux1646)<=1))
c Var 'aux2379' direct represents '0' with '-8157'
c Var 'aux2379' direct represents '1' with '8157'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8157'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1642 + aux1645 + aux1646)))
c Var 'aux2380' direct represents '0' with '-8158'
c Var 'aux2380' direct represents '1' with '8158'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8158'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1648 + aux1651 + aux1652)<=1))
c Var 'aux2381' direct represents '0' with '-8159'
c Var 'aux2381' direct represents '1' with '8159'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8159'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1648 + aux1651 + aux1652)))
c Var 'aux2382' direct represents '0' with '-8160'
c Var 'aux2382' direct represents '1' with '8160'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8160'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1654 + aux1657 + aux1658)<=1))
c Var 'aux2383' direct represents '0' with '-8161'
c Var 'aux2383' direct represents '1' with '8161'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8161'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1654 + aux1657 + aux1658)))
c Var 'aux2384' direct represents '0' with '-8162'
c Var 'aux2384' direct represents '1' with '8162'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8162'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1660 + aux1663 + aux1664)<=1))
c Var 'aux2385' direct represents '0' with '-8163'
c Var 'aux2385' direct represents '1' with '8163'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8163'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1660 + aux1663 + aux1664)))
c Var 'aux2386' direct represents '0' with '-8164'
c Var 'aux2386' direct represents '1' with '8164'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8164'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1666 + aux1669 + aux1670)<=1))
c Var 'aux2387' direct represents '0' with '-8165'
c Var 'aux2387' direct represents '1' with '8165'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8165'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1666 + aux1669 + aux1670)))
c Var 'aux2388' direct represents '0' with '-8166'
c Var 'aux2388' direct represents '1' with '8166'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8166'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1672 + aux1675 + aux1676)<=1))
c Var 'aux2389' direct represents '0' with '-8167'
c Var 'aux2389' direct represents '1' with '8167'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8167'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1672 + aux1675 + aux1676)))
c Var 'aux2390' direct represents '0' with '-8168'
c Var 'aux2390' direct represents '1' with '8168'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8168'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1678 + aux1681 + aux1682)<=1))
c Var 'aux2391' direct represents '0' with '-8169'
c Var 'aux2391' direct represents '1' with '8169'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8169'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1678 + aux1681 + aux1682)))
c Var 'aux2392' direct represents '0' with '-8170'
c Var 'aux2392' direct represents '1' with '8170'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8170'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1684 + aux1687 + aux1688)<=1))
c Var 'aux2393' direct represents '0' with '-8171'
c Var 'aux2393' direct represents '1' with '8171'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8171'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1684 + aux1687 + aux1688)))
c Var 'aux2394' direct represents '0' with '-8172'
c Var 'aux2394' direct represents '1' with '8172'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8172'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1690 + aux1693 + aux1694)<=1))
c Var 'aux2395' direct represents '0' with '-8173'
c Var 'aux2395' direct represents '1' with '8173'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8173'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1690 + aux1693 + aux1694)))
c Var 'aux2396' direct represents '0' with '-8174'
c Var 'aux2396' direct represents '1' with '8174'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8174'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1696 + aux1699 + aux1700)<=1))
c Var 'aux2397' direct represents '0' with '-8175'
c Var 'aux2397' direct represents '1' with '8175'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8175'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1696 + aux1699 + aux1700)))
c Var 'aux2398' direct represents '0' with '-8176'
c Var 'aux2398' direct represents '1' with '8176'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8176'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1702 + aux1705 + aux1706)<=1))
c Var 'aux2399' direct represents '0' with '-8177'
c Var 'aux2399' direct represents '1' with '8177'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8177'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1702 + aux1705 + aux1706)))
c Var 'aux2400' direct represents '0' with '-8178'
c Var 'aux2400' direct represents '1' with '8178'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8178'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1708 + aux1711 + aux1712)<=1))
c Var 'aux2401' direct represents '0' with '-8179'
c Var 'aux2401' direct represents '1' with '8179'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8179'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1708 + aux1711 + aux1712)))
c Var 'aux2402' direct represents '0' with '-8180'
c Var 'aux2402' direct represents '1' with '8180'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8180'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1714 + aux1717 + aux1718)<=1))
c Var 'aux2403' direct represents '0' with '-8181'
c Var 'aux2403' direct represents '1' with '8181'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8181'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1714 + aux1717 + aux1718)))
c Var 'aux2404' direct represents '0' with '-8182'
c Var 'aux2404' direct represents '1' with '8182'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8182'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1720 + aux1723 + aux1724)<=1))
c Var 'aux2405' direct represents '0' with '-8183'
c Var 'aux2405' direct represents '1' with '8183'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8183'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1720 + aux1723 + aux1724)))
c Var 'aux2406' direct represents '0' with '-8184'
c Var 'aux2406' direct represents '1' with '8184'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8184'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1726 + aux1729 + aux1730)<=1))
c Var 'aux2407' direct represents '0' with '-8185'
c Var 'aux2407' direct represents '1' with '8185'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8185'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1726 + aux1729 + aux1730)))
c Var 'aux2408' direct represents '0' with '-8186'
c Var 'aux2408' direct represents '1' with '8186'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8186'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1732 + aux1735 + aux1736)<=1))
c Var 'aux2409' direct represents '0' with '-8187'
c Var 'aux2409' direct represents '1' with '8187'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8187'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1732 + aux1735 + aux1736)))
c Var 'aux2410' direct represents '0' with '-8188'
c Var 'aux2410' direct represents '1' with '8188'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8188'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1738 + aux1741 + aux1742)<=1))
c Var 'aux2411' direct represents '0' with '-8189'
c Var 'aux2411' direct represents '1' with '8189'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8189'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1738 + aux1741 + aux1742)))
c Var 'aux2412' direct represents '0' with '-8190'
c Var 'aux2412' direct represents '1' with '8190'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8190'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1744 + aux1747 + aux1748)<=1))
c Var 'aux2413' direct represents '0' with '-8191'
c Var 'aux2413' direct represents '1' with '8191'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8191'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1744 + aux1747 + aux1748)))
c Var 'aux2414' direct represents '0' with '-8192'
c Var 'aux2414' direct represents '1' with '8192'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8192'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1750 + aux1753 + aux1754)<=1))
c Var 'aux2415' direct represents '0' with '-8193'
c Var 'aux2415' direct represents '1' with '8193'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8193'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1750 + aux1753 + aux1754)))
c Var 'aux2416' direct represents '0' with '-8194'
c Var 'aux2416' direct represents '1' with '8194'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8194'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1756 + aux1759 + aux1760)<=1))
c Var 'aux2417' direct represents '0' with '-8195'
c Var 'aux2417' direct represents '1' with '8195'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8195'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1756 + aux1759 + aux1760)))
c Var 'aux2418' direct represents '0' with '-8196'
c Var 'aux2418' direct represents '1' with '8196'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8196'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1762 + aux1765 + aux1766)<=1))
c Var 'aux2419' direct represents '0' with '-8197'
c Var 'aux2419' direct represents '1' with '8197'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8197'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1762 + aux1765 + aux1766)))
c Var 'aux2420' direct represents '0' with '-8198'
c Var 'aux2420' direct represents '1' with '8198'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8198'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1768 + aux1771 + aux1772)<=1))
c Var 'aux2421' direct represents '0' with '-8199'
c Var 'aux2421' direct represents '1' with '8199'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8199'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1768 + aux1771 + aux1772)))
c Var 'aux2422' direct represents '0' with '-8200'
c Var 'aux2422' direct represents '1' with '8200'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8200'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1774 + aux1777 + aux1778)<=1))
c Var 'aux2423' direct represents '0' with '-8201'
c Var 'aux2423' direct represents '1' with '8201'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8201'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1774 + aux1777 + aux1778)))
c Var 'aux2424' direct represents '0' with '-8202'
c Var 'aux2424' direct represents '1' with '8202'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8202'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1780 + aux1783 + aux1784)<=1))
c Var 'aux2425' direct represents '0' with '-8203'
c Var 'aux2425' direct represents '1' with '8203'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8203'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1780 + aux1783 + aux1784)))
c Var 'aux2426' direct represents '0' with '-8204'
c Var 'aux2426' direct represents '1' with '8204'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8204'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1786 + aux1789 + aux1790)<=1))
c Var 'aux2427' direct represents '0' with '-8205'
c Var 'aux2427' direct represents '1' with '8205'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8205'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1786 + aux1789 + aux1790)))
c Var 'aux2428' direct represents '0' with '-8206'
c Var 'aux2428' direct represents '1' with '8206'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8206'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1792 + aux1795 + aux1796)<=1))
c Var 'aux2429' direct represents '0' with '-8207'
c Var 'aux2429' direct represents '1' with '8207'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8207'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1792 + aux1795 + aux1796)))
c Var 'aux2430' direct represents '0' with '-8208'
c Var 'aux2430' direct represents '1' with '8208'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8208'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1798 + aux1801 + aux1802)<=1))
c Var 'aux2431' direct represents '0' with '-8209'
c Var 'aux2431' direct represents '1' with '8209'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8209'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1798 + aux1801 + aux1802)))
c Var 'aux2432' direct represents '0' with '-8210'
c Var 'aux2432' direct represents '1' with '8210'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8210'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1804 + aux1807 + aux1808)<=1))
c Var 'aux2433' direct represents '0' with '-8211'
c Var 'aux2433' direct represents '1' with '8211'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8211'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1804 + aux1807 + aux1808)))
c Var 'aux2434' direct represents '0' with '-8212'
c Var 'aux2434' direct represents '1' with '8212'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8212'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1810 + aux1813 + aux1814)<=1))
c Var 'aux2435' direct represents '0' with '-8213'
c Var 'aux2435' direct represents '1' with '8213'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8213'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1810 + aux1813 + aux1814)))
c Var 'aux2436' direct represents '0' with '-8214'
c Var 'aux2436' direct represents '1' with '8214'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8214'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1816 + aux1819 + aux1820)<=1))
c Var 'aux2437' direct represents '0' with '-8215'
c Var 'aux2437' direct represents '1' with '8215'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8215'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1816 + aux1819 + aux1820)))
c Var 'aux2438' direct represents '0' with '-8216'
c Var 'aux2438' direct represents '1' with '8216'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8216'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1822 + aux1825 + aux1826)<=1))
c Var 'aux2439' direct represents '0' with '-8217'
c Var 'aux2439' direct represents '1' with '8217'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8217'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1822 + aux1825 + aux1826)))
c Var 'aux2440' direct represents '0' with '-8218'
c Var 'aux2440' direct represents '1' with '8218'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8218'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1828 + aux1831 + aux1832)<=1))
c Var 'aux2441' direct represents '0' with '-8219'
c Var 'aux2441' direct represents '1' with '8219'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8219'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1828 + aux1831 + aux1832)))
c Var 'aux2442' direct represents '0' with '-8220'
c Var 'aux2442' direct represents '1' with '8220'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8220'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1834 + aux1837 + aux1838)<=1))
c Var 'aux2443' direct represents '0' with '-8221'
c Var 'aux2443' direct represents '1' with '8221'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8221'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1834 + aux1837 + aux1838)))
c Var 'aux2444' direct represents '0' with '-8222'
c Var 'aux2444' direct represents '1' with '8222'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8222'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1840 + aux1843 + aux1844)<=1))
c Var 'aux2445' direct represents '0' with '-8223'
c Var 'aux2445' direct represents '1' with '8223'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8223'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1840 + aux1843 + aux1844)))
c Var 'aux2446' direct represents '0' with '-8224'
c Var 'aux2446' direct represents '1' with '8224'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8224'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1846 + aux1849 + aux1850)<=1))
c Var 'aux2447' direct represents '0' with '-8225'
c Var 'aux2447' direct represents '1' with '8225'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8225'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1846 + aux1849 + aux1850)))
c Var 'aux2448' direct represents '0' with '-8226'
c Var 'aux2448' direct represents '1' with '8226'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8226'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1852 + aux1855 + aux1856)<=1))
c Var 'aux2449' direct represents '0' with '-8227'
c Var 'aux2449' direct represents '1' with '8227'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8227'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1852 + aux1855 + aux1856)))
c Var 'aux2450' direct represents '0' with '-8228'
c Var 'aux2450' direct represents '1' with '8228'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8228'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1858 + aux1861 + aux1862)<=1))
c Var 'aux2451' direct represents '0' with '-8229'
c Var 'aux2451' direct represents '1' with '8229'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8229'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1858 + aux1861 + aux1862)))
c Var 'aux2452' direct represents '0' with '-8230'
c Var 'aux2452' direct represents '1' with '8230'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8230'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1864 + aux1867 + aux1868)<=1))
c Var 'aux2453' direct represents '0' with '-8231'
c Var 'aux2453' direct represents '1' with '8231'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8231'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1864 + aux1867 + aux1868)))
c Var 'aux2454' direct represents '0' with '-8232'
c Var 'aux2454' direct represents '1' with '8232'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8232'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1870 + aux1873 + aux1874)<=1))
c Var 'aux2455' direct represents '0' with '-8233'
c Var 'aux2455' direct represents '1' with '8233'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8233'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1870 + aux1873 + aux1874)))
c Var 'aux2456' direct represents '0' with '-8234'
c Var 'aux2456' direct represents '1' with '8234'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8234'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1876 + aux1879 + aux1880)<=1))
c Var 'aux2457' direct represents '0' with '-8235'
c Var 'aux2457' direct represents '1' with '8235'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8235'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1876 + aux1879 + aux1880)))
c Var 'aux2458' direct represents '0' with '-8236'
c Var 'aux2458' direct represents '1' with '8236'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8236'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1882 + aux1885 + aux1886)<=1))
c Var 'aux2459' direct represents '0' with '-8237'
c Var 'aux2459' direct represents '1' with '8237'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8237'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1882 + aux1885 + aux1886)))
c Var 'aux2460' direct represents '0' with '-8238'
c Var 'aux2460' direct represents '1' with '8238'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8238'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1888 + aux1891 + aux1892)<=1))
c Var 'aux2461' direct represents '0' with '-8239'
c Var 'aux2461' direct represents '1' with '8239'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8239'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1888 + aux1891 + aux1892)))
c Var 'aux2462' direct represents '0' with '-8240'
c Var 'aux2462' direct represents '1' with '8240'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8240'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1894 + aux1897 + aux1898)<=1))
c Var 'aux2463' direct represents '0' with '-8241'
c Var 'aux2463' direct represents '1' with '8241'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8241'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1894 + aux1897 + aux1898)))
c Var 'aux2464' direct represents '0' with '-8242'
c Var 'aux2464' direct represents '1' with '8242'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8242'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1900 + aux1903 + aux1904)<=1))
c Var 'aux2465' direct represents '0' with '-8243'
c Var 'aux2465' direct represents '1' with '8243'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8243'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1900 + aux1903 + aux1904)))
c Var 'aux2466' direct represents '0' with '-8244'
c Var 'aux2466' direct represents '1' with '8244'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8244'
c (((x_00002_00001 + x_00003_00001 + x_00001_00001)<=14)=tv=SATLiteral(7701))
-7701 277 15 0
-7701 279 13 0
-7701 281 11 0
-7701 283 9 0
-7701 285 7 0
-7701 137 275 15 0
-7701 137 277 13 0
-7701 137 279 11 0
-7701 137 281 9 0
-7701 137 283 7 0
-7701 137 285 5 0
-7701 138 273 15 0
-7701 138 275 13 0
-7701 138 277 11 0
-7701 138 279 9 0
-7701 138 281 7 0
-7701 138 283 5 0
-7701 138 285 3 0
-7701 140 272 15 0
-7701 140 273 13 0
-7701 140 275 11 0
-7701 140 277 9 0
-7701 140 279 7 0
-7701 140 281 5 0
-7701 140 283 3 0
-7701 140 285 2 0
-7701 142 15 0
-7701 142 272 13 0
-7701 142 273 11 0
-7701 142 275 9 0
-7701 142 277 7 0
-7701 142 279 5 0
-7701 142 281 3 0
-7701 142 283 2 0
-7701 142 285 0
-7701 144 13 0
-7701 144 272 11 0
-7701 144 273 9 0
-7701 144 275 7 0
-7701 144 277 5 0
-7701 144 279 3 0
-7701 144 281 2 0
-7701 144 283 0
-7701 144 285 0
-7701 146 11 0
-7701 146 272 9 0
-7701 146 273 7 0
-7701 146 275 5 0
-7701 146 277 3 0
-7701 146 279 2 0
-7701 146 281 0
-7701 146 283 0
-7701 146 285 0
-7701 148 9 0
-7701 148 272 7 0
-7701 148 273 5 0
-7701 148 275 3 0
-7701 148 277 2 0
-7701 148 279 0
-7701 148 281 0
-7701 148 283 0
-7701 148 285 0
-7701 150 7 0
-7701 150 272 5 0
-7701 150 273 3 0
-7701 150 275 2 0
-7701 150 277 0
-7701 150 279 0
-7701 150 281 0
-7701 150 283 0
-7701 150 285 0
7701 -277 -2 0
7701 -275 -3 0
7701 -273 -5 0
7701 -272 -7 0
7701 -150 -279 -2 0
7701 -150 -277 -3 0
7701 -150 -275 -5 0
7701 -150 -273 -7 0
7701 -150 -272 -9 0
7701 -148 -281 -2 0
7701 -148 -279 -3 0
7701 -148 -277 -5 0
7701 -148 -275 -7 0
7701 -148 -273 -9 0
7701 -148 -272 -11 0
7701 -146 -283 -2 0
7701 -146 -281 -3 0
7701 -146 -279 -5 0
7701 -146 -277 -7 0
7701 -146 -275 -9 0
7701 -146 -273 -11 0
7701 -146 -272 -13 0
7701 -144 -285 -2 0
7701 -144 -283 -3 0
7701 -144 -281 -5 0
7701 -144 -279 -7 0
7701 -144 -277 -9 0
7701 -144 -275 -11 0
7701 -144 -273 -13 0
7701 -144 -272 -15 0
7701 -142 -2 0
7701 -142 -285 -3 0
7701 -142 -283 -5 0
7701 -142 -281 -7 0
7701 -142 -279 -9 0
7701 -142 -277 -11 0
7701 -142 -275 -13 0
7701 -142 -273 -15 0
7701 -142 -272 0
7701 -140 -3 0
7701 -140 -285 -5 0
7701 -140 -283 -7 0
7701 -140 -281 -9 0
7701 -140 -279 -11 0
7701 -140 -277 -13 0
7701 -140 -275 -15 0
7701 -140 -273 0
7701 -140 -272 0
7701 -138 -5 0
7701 -138 -285 -7 0
7701 -138 -283 -9 0
7701 -138 -281 -11 0
7701 -138 -279 -13 0
7701 -138 -277 -15 0
7701 -138 -275 0
7701 -138 -273 0
7701 -138 -272 0
7701 -137 -7 0
7701 -137 -285 -9 0
7701 -137 -283 -11 0
7701 -137 -281 -13 0
7701 -137 -279 -15 0
7701 -137 -277 0
7701 -137 -275 0
7701 -137 -273 0
7701 -137 -272 0
c ((14<=(x_00002_00001 + x_00003_00001 + x_00001_00001))=tv=SATLiteral(7702))
-7702 -275 -2 0
-7702 -273 -3 0
-7702 -272 -5 0
-7702 -150 -277 -2 0
-7702 -150 -275 -3 0
-7702 -150 -273 -5 0
-7702 -150 -272 -7 0
-7702 -148 -279 -2 0
-7702 -148 -277 -3 0
-7702 -148 -275 -5 0
-7702 -148 -273 -7 0
-7702 -148 -272 -9 0
-7702 -146 -281 -2 0
-7702 -146 -279 -3 0
-7702 -146 -277 -5 0
-7702 -146 -275 -7 0
-7702 -146 -273 -9 0
-7702 -146 -272 -11 0
-7702 -144 -283 -2 0
-7702 -144 -281 -3 0
-7702 -144 -279 -5 0
-7702 -144 -277 -7 0
-7702 -144 -275 -9 0
-7702 -144 -273 -11 0
-7702 -144 -272 -13 0
-7702 -142 -285 -2 0
-7702 -142 -283 -3 0
-7702 -142 -281 -5 0
-7702 -142 -279 -7 0
-7702 -142 -277 -9 0
-7702 -142 -275 -11 0
-7702 -142 -273 -13 0
-7702 -142 -272 -15 0
-7702 -140 -2 0
-7702 -140 -285 -3 0
-7702 -140 -283 -5 0
-7702 -140 -281 -7 0
-7702 -140 -279 -9 0
-7702 -140 -277 -11 0
-7702 -140 -275 -13 0
-7702 -140 -273 -15 0
-7702 -140 -272 0
-7702 -138 -3 0
-7702 -138 -285 -5 0
-7702 -138 -283 -7 0
-7702 -138 -281 -9 0
-7702 -138 -279 -11 0
-7702 -138 -277 -13 0
-7702 -138 -275 -15 0
-7702 -138 -273 0
-7702 -138 -272 0
-7702 -137 -5 0
-7702 -137 -285 -7 0
-7702 -137 -283 -9 0
-7702 -137 -281 -11 0
-7702 -137 -279 -13 0
-7702 -137 -277 -15 0
-7702 -137 -275 0
-7702 -137 -273 0
-7702 -137 -272 0
7702 275 15 0
7702 277 13 0
7702 279 11 0
7702 281 9 0
7702 283 7 0
7702 285 5 0
7702 137 273 15 0
7702 137 275 13 0
7702 137 277 11 0
7702 137 279 9 0
7702 137 281 7 0
7702 137 283 5 0
7702 137 285 3 0
7702 138 272 15 0
7702 138 273 13 0
7702 138 275 11 0
7702 138 277 9 0
7702 138 279 7 0
7702 138 281 5 0
7702 138 283 3 0
7702 138 285 2 0
7702 140 15 0
7702 140 272 13 0
7702 140 273 11 0
7702 140 275 9 0
7702 140 277 7 0
7702 140 279 5 0
7702 140 281 3 0
7702 140 283 2 0
7702 140 285 0
7702 142 13 0
7702 142 272 11 0
7702 142 273 9 0
7702 142 275 7 0
7702 142 277 5 0
7702 142 279 3 0
7702 142 281 2 0
7702 142 283 0
7702 142 285 0
7702 144 11 0
7702 144 272 9 0
7702 144 273 7 0
7702 144 275 5 0
7702 144 277 3 0
7702 144 279 2 0
7702 144 281 0
7702 144 283 0
7702 144 285 0
7702 146 9 0
7702 146 272 7 0
7702 146 273 5 0
7702 146 275 3 0
7702 146 277 2 0
7702 146 279 0
7702 146 281 0
7702 146 283 0
7702 146 285 0
7702 148 7 0
7702 148 272 5 0
7702 148 273 3 0
7702 148 275 2 0
7702 148 277 0
7702 148 279 0
7702 148 281 0
7702 148 283 0
7702 148 285 0
7702 150 5 0
7702 150 272 3 0
7702 150 273 2 0
7702 150 275 0
7702 150 277 0
7702 150 279 0
7702 150 281 0
7702 150 283 0
7702 150 285 0
c (((x_00001_00002 + x_00001_00003)<=8)=tv=SATLiteral(7703))
-7703 43 0
-7703 17 41 0
-7703 18 39 0
-7703 20 37 0
-7703 22 35 0
-7703 24 33 0
-7703 26 32 0
-7703 28 0
-7703 30 0
7703 -28 -32 0
7703 -26 -33 0
7703 -24 -35 0
7703 -22 -37 0
7703 -20 -39 0
7703 -18 -41 0
7703 -17 -43 0
c ((8<=(x_00001_00002 + x_00001_00003))=tv=SATLiteral(7704))
-7704 -26 -32 0
-7704 -24 -33 0
-7704 -22 -35 0
-7704 -20 -37 0
-7704 -18 -39 0
-7704 -17 -41 0
7704 41 0
7704 17 39 0
7704 18 37 0
7704 20 35 0
7704 22 33 0
7704 24 32 0
7704 26 0
7704 28 0
7704 30 0
c (((x_00002_00004 + x_00003_00004 + x_00001_00004)<=14)=tv=SATLiteral(7705))
-7705 322 60 0
-7705 324 58 0
-7705 326 56 0
-7705 328 54 0
-7705 330 52 0
-7705 182 320 60 0
-7705 182 322 58 0
-7705 182 324 56 0
-7705 182 326 54 0
-7705 182 328 52 0
-7705 182 330 50 0
-7705 183 318 60 0
-7705 183 320 58 0
-7705 183 322 56 0
-7705 183 324 54 0
-7705 183 326 52 0
-7705 183 328 50 0
-7705 183 330 48 0
-7705 185 317 60 0
-7705 185 318 58 0
-7705 185 320 56 0
-7705 185 322 54 0
-7705 185 324 52 0
-7705 185 326 50 0
-7705 185 328 48 0
-7705 185 330 47 0
-7705 187 60 0
-7705 187 317 58 0
-7705 187 318 56 0
-7705 187 320 54 0
-7705 187 322 52 0
-7705 187 324 50 0
-7705 187 326 48 0
-7705 187 328 47 0
-7705 187 330 0
-7705 189 58 0
-7705 189 317 56 0
-7705 189 318 54 0
-7705 189 320 52 0
-7705 189 322 50 0
-7705 189 324 48 0
-7705 189 326 47 0
-7705 189 328 0
-7705 189 330 0
-7705 191 56 0
-7705 191 317 54 0
-7705 191 318 52 0
-7705 191 320 50 0
-7705 191 322 48 0
-7705 191 324 47 0
-7705 191 326 0
-7705 191 328 0
-7705 191 330 0
-7705 193 54 0
-7705 193 317 52 0
-7705 193 318 50 0
-7705 193 320 48 0
-7705 193 322 47 0
-7705 193 324 0
-7705 193 326 0
-7705 193 328 0
-7705 193 330 0
-7705 195 52 0
-7705 195 317 50 0
-7705 195 318 48 0
-7705 195 320 47 0
-7705 195 322 0
-7705 195 324 0
-7705 195 326 0
-7705 195 328 0
-7705 195 330 0
7705 -322 -47 0
7705 -320 -48 0
7705 -318 -50 0
7705 -317 -52 0
7705 -195 -324 -47 0
7705 -195 -322 -48 0
7705 -195 -320 -50 0
7705 -195 -318 -52 0
7705 -195 -317 -54 0
7705 -193 -326 -47 0
7705 -193 -324 -48 0
7705 -193 -322 -50 0
7705 -193 -320 -52 0
7705 -193 -318 -54 0
7705 -193 -317 -56 0
7705 -191 -328 -47 0
7705 -191 -326 -48 0
7705 -191 -324 -50 0
7705 -191 -322 -52 0
7705 -191 -320 -54 0
7705 -191 -318 -56 0
7705 -191 -317 -58 0
7705 -189 -330 -47 0
7705 -189 -328 -48 0
7705 -189 -326 -50 0
7705 -189 -324 -52 0
7705 -189 -322 -54 0
7705 -189 -320 -56 0
7705 -189 -318 -58 0
7705 -189 -317 -60 0
7705 -187 -47 0
7705 -187 -330 -48 0
7705 -187 -328 -50 0
7705 -187 -326 -52 0
7705 -187 -324 -54 0
7705 -187 -322 -56 0
7705 -187 -320 -58 0
7705 -187 -318 -60 0
7705 -187 -317 0
7705 -185 -48 0
7705 -185 -330 -50 0
7705 -185 -328 -52 0
7705 -185 -326 -54 0
7705 -185 -324 -56 0
7705 -185 -322 -58 0
7705 -185 -320 -60 0
7705 -185 -318 0
7705 -185 -317 0
7705 -183 -50 0
7705 -183 -330 -52 0
7705 -183 -328 -54 0
7705 -183 -326 -56 0
7705 -183 -324 -58 0
7705 -183 -322 -60 0
7705 -183 -320 0
7705 -183 -318 0
7705 -183 -317 0
7705 -182 -52 0
7705 -182 -330 -54 0
7705 -182 -328 -56 0
7705 -182 -326 -58 0
7705 -182 -324 -60 0
7705 -182 -322 0
7705 -182 -320 0
7705 -182 -318 0
7705 -182 -317 0
c ((14<=(x_00002_00004 + x_00003_00004 + x_00001_00004))=tv=SATLiteral(7706))
-7706 -320 -47 0
-7706 -318 -48 0
-7706 -317 -50 0
-7706 -195 -322 -47 0
-7706 -195 -320 -48 0
-7706 -195 -318 -50 0
-7706 -195 -317 -52 0
-7706 -193 -324 -47 0
-7706 -193 -322 -48 0
-7706 -193 -320 -50 0
-7706 -193 -318 -52 0
-7706 -193 -317 -54 0
-7706 -191 -326 -47 0
-7706 -191 -324 -48 0
-7706 -191 -322 -50 0
-7706 -191 -320 -52 0
-7706 -191 -318 -54 0
-7706 -191 -317 -56 0
-7706 -189 -328 -47 0
-7706 -189 -326 -48 0
-7706 -189 -324 -50 0
-7706 -189 -322 -52 0
-7706 -189 -320 -54 0
-7706 -189 -318 -56 0
-7706 -189 -317 -58 0
-7706 -187 -330 -47 0
-7706 -187 -328 -48 0
-7706 -187 -326 -50 0
-7706 -187 -324 -52 0
-7706 -187 -322 -54 0
-7706 -187 -320 -56 0
-7706 -187 -318 -58 0
-7706 -187 -317 -60 0
-7706 -185 -47 0
-7706 -185 -330 -48 0
-7706 -185 -328 -50 0
-7706 -185 -326 -52 0
-7706 -185 -324 -54 0
-7706 -185 -322 -56 0
-7706 -185 -320 -58 0
-7706 -185 -318 -60 0
-7706 -185 -317 0
-7706 -183 -48 0
-7706 -183 -330 -50 0
-7706 -183 -328 -52 0
-7706 -183 -326 -54 0
-7706 -183 -324 -56 0
-7706 -183 -322 -58 0
-7706 -183 -320 -60 0
-7706 -183 -318 0
-7706 -183 -317 0
-7706 -182 -50 0
-7706 -182 -330 -52 0
-7706 -182 -328 -54 0
-7706 -182 -326 -56 0
-7706 -182 -324 -58 0
-7706 -182 -322 -60 0
-7706 -182 -320 0
-7706 -182 -318 0
-7706 -182 -317 0
7706 320 60 0
7706 322 58 0
7706 324 56 0
7706 326 54 0
7706 328 52 0
7706 330 50 0
7706 182 318 60 0
7706 182 320 58 0
7706 182 322 56 0
7706 182 324 54 0
7706 182 326 52 0
7706 182 328 50 0
7706 182 330 48 0
7706 183 317 60 0
7706 183 318 58 0
7706 183 320 56 0
7706 183 322 54 0
7706 183 324 52 0
7706 183 326 50 0
7706 183 328 48 0
7706 183 330 47 0
7706 185 60 0
7706 185 317 58 0
7706 185 318 56 0
7706 185 320 54 0
7706 185 322 52 0
7706 185 324 50 0
7706 185 326 48 0
7706 185 328 47 0
7706 185 330 0
7706 187 58 0
7706 187 317 56 0
7706 187 318 54 0
7706 187 320 52 0
7706 187 322 50 0
7706 187 324 48 0
7706 187 326 47 0
7706 187 328 0
7706 187 330 0
7706 189 56 0
7706 189 317 54 0
7706 189 318 52 0
7706 189 320 50 0
7706 189 322 48 0
7706 189 324 47 0
7706 189 326 0
7706 189 328 0
7706 189 330 0
7706 191 54 0
7706 191 317 52 0
7706 191 318 50 0
7706 191 320 48 0
7706 191 322 47 0
7706 191 324 0
7706 191 326 0
7706 191 328 0
7706 191 330 0
7706 193 52 0
7706 193 317 50 0
7706 193 318 48 0
7706 193 320 47 0
7706 193 322 0
7706 193 324 0
7706 193 326 0
7706 193 328 0
7706 193 330 0
7706 195 50 0
7706 195 317 48 0
7706 195 318 47 0
7706 195 320 0
7706 195 322 0
7706 195 324 0
7706 195 326 0
7706 195 328 0
7706 195 330 0
c (((aux445 + shift(x_00001_00005, -1) + shift(x_00002_00006, -1))<=20)=tv=SATLiteral(7707))
-7707 219 1782 0
-7707 221 1780 0
-7707 223 1778 0
-7707 225 1776 0
-7707 62 217 1782 0
-7707 62 219 1780 0
-7707 62 221 1778 0
-7707 62 223 1776 0
-7707 62 225 1774 0
-7707 63 215 1782 0
-7707 63 217 1780 0
-7707 63 219 1778 0
-7707 63 221 1776 0
-7707 63 223 1774 0
-7707 63 225 1772 0
-7707 65 213 1782 0
-7707 65 215 1780 0
-7707 65 217 1778 0
-7707 65 219 1776 0
-7707 65 221 1774 0
-7707 65 223 1772 0
-7707 65 225 1770 0
-7707 67 212 1782 0
-7707 67 213 1780 0
-7707 67 215 1778 0
-7707 67 217 1776 0
-7707 67 219 1774 0
-7707 67 221 1772 0
-7707 67 223 1770 0
-7707 67 225 1768 0
-7707 69 1782 0
-7707 69 212 1780 0
-7707 69 213 1778 0
-7707 69 215 1776 0
-7707 69 217 1774 0
-7707 69 219 1772 0
-7707 69 221 1770 0
-7707 69 223 1768 0
-7707 69 225 1766 0
-7707 71 1780 0
-7707 71 212 1778 0
-7707 71 213 1776 0
-7707 71 215 1774 0
-7707 71 217 1772 0
-7707 71 219 1770 0
-7707 71 221 1768 0
-7707 71 223 1766 0
-7707 71 225 1764 0
-7707 73 1778 0
-7707 73 212 1776 0
-7707 73 213 1774 0
-7707 73 215 1772 0
-7707 73 217 1770 0
-7707 73 219 1768 0
-7707 73 221 1766 0
-7707 73 223 1764 0
-7707 73 225 1762 0
-7707 75 1776 0
-7707 75 212 1774 0
-7707 75 213 1772 0
-7707 75 215 1770 0
-7707 75 217 1768 0
-7707 75 219 1766 0
-7707 75 221 1764 0
-7707 75 223 1762 0
-7707 75 225 1760 0
7707 -1760 0
7707 -225 -1762 0
7707 -223 -1764 0
7707 -221 -1766 0
7707 -219 -1768 0
7707 -217 -1770 0
7707 -215 -1772 0
7707 -213 -1774 0
7707 -212 -1776 0
7707 -75 -1762 0
7707 -75 -225 -1764 0
7707 -75 -223 -1766 0
7707 -75 -221 -1768 0
7707 -75 -219 -1770 0
7707 -75 -217 -1772 0
7707 -75 -215 -1774 0
7707 -75 -213 -1776 0
7707 -75 -212 -1778 0
7707 -73 -1764 0
7707 -73 -225 -1766 0
7707 -73 -223 -1768 0
7707 -73 -221 -1770 0
7707 -73 -219 -1772 0
7707 -73 -217 -1774 0
7707 -73 -215 -1776 0
7707 -73 -213 -1778 0
7707 -73 -212 -1780 0
7707 -71 -1766 0
7707 -71 -225 -1768 0
7707 -71 -223 -1770 0
7707 -71 -221 -1772 0
7707 -71 -219 -1774 0
7707 -71 -217 -1776 0
7707 -71 -215 -1778 0
7707 -71 -213 -1780 0
7707 -71 -212 -1782 0
7707 -69 -1768 0
7707 -69 -225 -1770 0
7707 -69 -223 -1772 0
7707 -69 -221 -1774 0
7707 -69 -219 -1776 0
7707 -69 -217 -1778 0
7707 -69 -215 -1780 0
7707 -69 -213 -1782 0
7707 -69 -212 0
7707 -67 -1770 0
7707 -67 -225 -1772 0
7707 -67 -223 -1774 0
7707 -67 -221 -1776 0
7707 -67 -219 -1778 0
7707 -67 -217 -1780 0
7707 -67 -215 -1782 0
7707 -67 -213 0
7707 -67 -212 0
7707 -65 -1772 0
7707 -65 -225 -1774 0
7707 -65 -223 -1776 0
7707 -65 -221 -1778 0
7707 -65 -219 -1780 0
7707 -65 -217 -1782 0
7707 -65 -215 0
7707 -65 -213 0
7707 -65 -212 0
7707 -63 -1774 0
7707 -63 -225 -1776 0
7707 -63 -223 -1778 0
7707 -63 -221 -1780 0
7707 -63 -219 -1782 0
7707 -63 -217 0
7707 -63 -215 0
7707 -63 -213 0
7707 -63 -212 0
7707 -62 -1776 0
7707 -62 -225 -1778 0
7707 -62 -223 -1780 0
7707 -62 -221 -1782 0
7707 -62 -219 0
7707 -62 -217 0
7707 -62 -215 0
7707 -62 -213 0
7707 -62 -212 0
c ((20<=(aux445 + shift(x_00001_00005, -1) + shift(x_00002_00006, -1)))=tv=SATLiteral(7708))
-7708 -1758 0
-7708 -225 -1760 0
-7708 -223 -1762 0
-7708 -221 -1764 0
-7708 -219 -1766 0
-7708 -217 -1768 0
-7708 -215 -1770 0
-7708 -213 -1772 0
-7708 -212 -1774 0
-7708 -75 -1760 0
-7708 -75 -225 -1762 0
-7708 -75 -223 -1764 0
-7708 -75 -221 -1766 0
-7708 -75 -219 -1768 0
-7708 -75 -217 -1770 0
-7708 -75 -215 -1772 0
-7708 -75 -213 -1774 0
-7708 -75 -212 -1776 0
-7708 -73 -1762 0
-7708 -73 -225 -1764 0
-7708 -73 -223 -1766 0
-7708 -73 -221 -1768 0
-7708 -73 -219 -1770 0
-7708 -73 -217 -1772 0
-7708 -73 -215 -1774 0
-7708 -73 -213 -1776 0
-7708 -73 -212 -1778 0
-7708 -71 -1764 0
-7708 -71 -225 -1766 0
-7708 -71 -223 -1768 0
-7708 -71 -221 -1770 0
-7708 -71 -219 -1772 0
-7708 -71 -217 -1774 0
-7708 -71 -215 -1776 0
-7708 -71 -213 -1778 0
-7708 -71 -212 -1780 0
-7708 -69 -1766 0
-7708 -69 -225 -1768 0
-7708 -69 -223 -1770 0
-7708 -69 -221 -1772 0
-7708 -69 -219 -1774 0
-7708 -69 -217 -1776 0
-7708 -69 -215 -1778 0
-7708 -69 -213 -1780 0
-7708 -69 -212 -1782 0
-7708 -67 -1768 0
-7708 -67 -225 -1770 0
-7708 -67 -223 -1772 0
-7708 -67 -221 -1774 0
-7708 -67 -219 -1776 0
-7708 -67 -217 -1778 0
-7708 -67 -215 -1780 0
-7708 -67 -213 -1782 0
-7708 -67 -212 0
-7708 -65 -1770 0
-7708 -65 -225 -1772 0
-7708 -65 -223 -1774 0
-7708 -65 -221 -1776 0
-7708 -65 -219 -1778 0
-7708 -65 -217 -1780 0
-7708 -65 -215 -1782 0
-7708 -65 -213 0
-7708 -65 -212 0
-7708 -63 -1772 0
-7708 -63 -225 -1774 0
-7708 -63 -223 -1776 0
-7708 -63 -221 -1778 0
-7708 -63 -219 -1780 0
-7708 -63 -217 -1782 0
-7708 -63 -215 0
-7708 -63 -213 0
-7708 -63 -212 0
-7708 -62 -1774 0
-7708 -62 -225 -1776 0
-7708 -62 -223 -1778 0
-7708 -62 -221 -1780 0
-7708 -62 -219 -1782 0
-7708 -62 -217 0
-7708 -62 -215 0
-7708 -62 -213 0
-7708 -62 -212 0
7708 217 1782 0
7708 219 1780 0
7708 221 1778 0
7708 223 1776 0
7708 225 1774 0
7708 62 215 1782 0
7708 62 217 1780 0
7708 62 219 1778 0
7708 62 221 1776 0
7708 62 223 1774 0
7708 62 225 1772 0
7708 63 213 1782 0
7708 63 215 1780 0
7708 63 217 1778 0
7708 63 219 1776 0
7708 63 221 1774 0
7708 63 223 1772 0
7708 63 225 1770 0
7708 65 212 1782 0
7708 65 213 1780 0
7708 65 215 1778 0
7708 65 217 1776 0
7708 65 219 1774 0
7708 65 221 1772 0
7708 65 223 1770 0
7708 65 225 1768 0
7708 67 1782 0
7708 67 212 1780 0
7708 67 213 1778 0
7708 67 215 1776 0
7708 67 217 1774 0
7708 67 219 1772 0
7708 67 221 1770 0
7708 67 223 1768 0
7708 67 225 1766 0
7708 69 1780 0
7708 69 212 1778 0
7708 69 213 1776 0
7708 69 215 1774 0
7708 69 217 1772 0
7708 69 219 1770 0
7708 69 221 1768 0
7708 69 223 1766 0
7708 69 225 1764 0
7708 71 1778 0
7708 71 212 1776 0
7708 71 213 1774 0
7708 71 215 1772 0
7708 71 217 1770 0
7708 71 219 1768 0
7708 71 221 1766 0
7708 71 223 1764 0
7708 71 225 1762 0
7708 73 1776 0
7708 73 212 1774 0
7708 73 213 1772 0
7708 73 215 1770 0
7708 73 217 1768 0
7708 73 219 1766 0
7708 73 221 1764 0
7708 73 223 1762 0
7708 73 225 1760 0
7708 75 1774 0
7708 75 212 1772 0
7708 75 213 1770 0
7708 75 215 1768 0
7708 75 217 1766 0
7708 75 219 1764 0
7708 75 221 1762 0
7708 75 223 1760 0
7708 75 225 1758 0
c (((x_00001_00007 + x_00001_00008 + x_00001_00009)<=11)=tv=SATLiteral(7709))
-7709 107 135 0
-7709 108 133 0
-7709 110 131 0
-7709 112 129 0
-7709 114 127 0
-7709 116 125 0
-7709 118 123 0
-7709 120 122 0
-7709 92 135 0
-7709 92 107 133 0
-7709 92 108 131 0
-7709 92 110 129 0
-7709 92 112 127 0
-7709 92 114 125 0
-7709 92 116 123 0
-7709 92 118 122 0
-7709 92 120 0
-7709 93 133 0
-7709 93 107 131 0
-7709 93 108 129 0
-7709 93 110 127 0
-7709 93 112 125 0
-7709 93 114 123 0
-7709 93 116 122 0
-7709 93 118 0
-7709 93 120 0
-7709 95 131 0
-7709 95 107 129 0
-7709 95 108 127 0
-7709 95 110 125 0
-7709 95 112 123 0
-7709 95 114 122 0
-7709 95 116 0
-7709 95 118 0
-7709 95 120 0
-7709 97 129 0
-7709 97 107 127 0
-7709 97 108 125 0
-7709 97 110 123 0
-7709 97 112 122 0
-7709 97 114 0
-7709 97 116 0
-7709 97 118 0
-7709 97 120 0
-7709 99 127 0
-7709 99 107 125 0
-7709 99 108 123 0
-7709 99 110 122 0
-7709 99 112 0
-7709 99 114 0
-7709 99 116 0
-7709 99 118 0
-7709 99 120 0
-7709 101 125 0
-7709 101 107 123 0
-7709 101 108 122 0
-7709 101 110 0
-7709 101 112 0
-7709 101 114 0
-7709 101 116 0
-7709 101 118 0
-7709 101 120 0
-7709 103 123 0
-7709 103 107 122 0
-7709 103 108 0
-7709 103 110 0
-7709 103 112 0
-7709 103 114 0
-7709 103 116 0
-7709 103 118 0
-7709 103 120 0
-7709 105 122 0
-7709 105 107 0
-7709 105 108 0
-7709 105 110 0
-7709 105 112 0
-7709 105 114 0
-7709 105 116 0
-7709 105 118 0
-7709 105 120 0
7709 -107 -122 0
7709 -105 -108 -122 0
7709 -105 -107 -123 0
7709 -103 -110 -122 0
7709 -103 -108 -123 0
7709 -103 -107 -125 0
7709 -101 -112 -122 0
7709 -101 -110 -123 0
7709 -101 -108 -125 0
7709 -101 -107 -127 0
7709 -99 -114 -122 0
7709 -99 -112 -123 0
7709 -99 -110 -125 0
7709 -99 -108 -127 0
7709 -99 -107 -129 0
7709 -97 -116 -122 0
7709 -97 -114 -123 0
7709 -97 -112 -125 0
7709 -97 -110 -127 0
7709 -97 -108 -129 0
7709 -97 -107 -131 0
7709 -95 -118 -122 0
7709 -95 -116 -123 0
7709 -95 -114 -125 0
7709 -95 -112 -127 0
7709 -95 -110 -129 0
7709 -95 -108 -131 0
7709 -95 -107 -133 0
7709 -93 -120 -122 0
7709 -93 -118 -123 0
7709 -93 -116 -125 0
7709 -93 -114 -127 0
7709 -93 -112 -129 0
7709 -93 -110 -131 0
7709 -93 -108 -133 0
7709 -93 -107 -135 0
7709 -92 -122 0
7709 -92 -120 -123 0
7709 -92 -118 -125 0
7709 -92 -116 -127 0
7709 -92 -114 -129 0
7709 -92 -112 -131 0
7709 -92 -110 -133 0
7709 -92 -108 -135 0
7709 -92 -107 0
c ((11<=(x_00001_00007 + x_00001_00008 + x_00001_00009))=tv=SATLiteral(7710))
-7710 -105 -107 -122 0
-7710 -103 -108 -122 0
-7710 -103 -107 -123 0
-7710 -101 -110 -122 0
-7710 -101 -108 -123 0
-7710 -101 -107 -125 0
-7710 -99 -112 -122 0
-7710 -99 -110 -123 0
-7710 -99 -108 -125 0
-7710 -99 -107 -127 0
-7710 -97 -114 -122 0
-7710 -97 -112 -123 0
-7710 -97 -110 -125 0
-7710 -97 -108 -127 0
-7710 -97 -107 -129 0
-7710 -95 -116 -122 0
-7710 -95 -114 -123 0
-7710 -95 -112 -125 0
-7710 -95 -110 -127 0
-7710 -95 -108 -129 0
-7710 -95 -107 -131 0
-7710 -93 -118 -122 0
-7710 -93 -116 -123 0
-7710 -93 -114 -125 0
-7710 -93 -112 -127 0
-7710 -93 -110 -129 0
-7710 -93 -108 -131 0
-7710 -93 -107 -133 0
-7710 -92 -120 -122 0
-7710 -92 -118 -123 0
-7710 -92 -116 -125 0
-7710 -92 -114 -127 0
-7710 -92 -112 -129 0
-7710 -92 -110 -131 0
-7710 -92 -108 -133 0
-7710 -92 -107 -135 0
7710 135 0
7710 107 133 0
7710 108 131 0
7710 110 129 0
7710 112 127 0
7710 114 125 0
7710 116 123 0
7710 118 122 0
7710 120 0
7710 92 133 0
7710 92 107 131 0
7710 92 108 129 0
7710 92 110 127 0
7710 92 112 125 0
7710 92 114 123 0
7710 92 116 122 0
7710 92 118 0
7710 92 120 0
7710 93 131 0
7710 93 107 129 0
7710 93 108 127 0
7710 93 110 125 0
7710 93 112 123 0
7710 93 114 122 0
7710 93 116 0
7710 93 118 0
7710 93 120 0
7710 95 129 0
7710 95 107 127 0
7710 95 108 125 0
7710 95 110 123 0
7710 95 112 122 0
7710 95 114 0
7710 95 116 0
7710 95 118 0
7710 95 120 0
7710 97 127 0
7710 97 107 125 0
7710 97 108 123 0
7710 97 110 122 0
7710 97 112 0
7710 97 114 0
7710 97 116 0
7710 97 118 0
7710 97 120 0
7710 99 125 0
7710 99 107 123 0
7710 99 108 122 0
7710 99 110 0
7710 99 112 0
7710 99 114 0
7710 99 116 0
7710 99 118 0
7710 99 120 0
7710 101 123 0
7710 101 107 122 0
7710 101 108 0
7710 101 110 0
7710 101 112 0
7710 101 114 0
7710 101 116 0
7710 101 118 0
7710 101 120 0
7710 103 122 0
7710 103 107 0
7710 103 108 0
7710 103 110 0
7710 103 112 0
7710 103 114 0
7710 103 116 0
7710 103 118 0
7710 103 120 0
7710 105 0
7710 105 107 0
7710 105 108 0
7710 105 110 0
7710 105 112 0
7710 105 114 0
7710 105 116 0
7710 105 118 0
7710 105 120 0
c (((x_00002_00002 + x_00002_00003 + x_00003_00003)<=15)=tv=SATLiteral(7711))
-7711 174 315 0
-7711 176 313 0
-7711 178 311 0
-7711 180 309 0
-7711 152 172 315 0
-7711 152 174 313 0
-7711 152 176 311 0
-7711 152 178 309 0
-7711 152 180 307 0
-7711 153 170 315 0
-7711 153 172 313 0
-7711 153 174 311 0
-7711 153 176 309 0
-7711 153 178 307 0
-7711 153 180 305 0
-7711 155 168 315 0
-7711 155 170 313 0
-7711 155 172 311 0
-7711 155 174 309 0
-7711 155 176 307 0
-7711 155 178 305 0
-7711 155 180 303 0
-7711 157 167 315 0
-7711 157 168 313 0
-7711 157 170 311 0
-7711 157 172 309 0
-7711 157 174 307 0
-7711 157 176 305 0
-7711 157 178 303 0
-7711 157 180 302 0
-7711 159 315 0
-7711 159 167 313 0
-7711 159 168 311 0
-7711 159 170 309 0
-7711 159 172 307 0
-7711 159 174 305 0
-7711 159 176 303 0
-7711 159 178 302 0
-7711 159 180 0
-7711 161 313 0
-7711 161 167 311 0
-7711 161 168 309 0
-7711 161 170 307 0
-7711 161 172 305 0
-7711 161 174 303 0
-7711 161 176 302 0
-7711 161 178 0
-7711 161 180 0
-7711 163 311 0
-7711 163 167 309 0
-7711 163 168 307 0
-7711 163 170 305 0
-7711 163 172 303 0
-7711 163 174 302 0
-7711 163 176 0
-7711 163 178 0
-7711 163 180 0
-7711 165 309 0
-7711 165 167 307 0
-7711 165 168 305 0
-7711 165 170 303 0
-7711 165 172 302 0
-7711 165 174 0
-7711 165 176 0
-7711 165 178 0
-7711 165 180 0
7711 -174 -302 0
7711 -172 -303 0
7711 -170 -305 0
7711 -168 -307 0
7711 -167 -309 0
7711 -165 -176 -302 0
7711 -165 -174 -303 0
7711 -165 -172 -305 0
7711 -165 -170 -307 0
7711 -165 -168 -309 0
7711 -165 -167 -311 0
7711 -163 -178 -302 0
7711 -163 -176 -303 0
7711 -163 -174 -305 0
7711 -163 -172 -307 0
7711 -163 -170 -309 0
7711 -163 -168 -311 0
7711 -163 -167 -313 0
7711 -161 -180 -302 0
7711 -161 -178 -303 0
7711 -161 -176 -305 0
7711 -161 -174 -307 0
7711 -161 -172 -309 0
7711 -161 -170 -311 0
7711 -161 -168 -313 0
7711 -161 -167 -315 0
7711 -159 -302 0
7711 -159 -180 -303 0
7711 -159 -178 -305 0
7711 -159 -176 -307 0
7711 -159 -174 -309 0
7711 -159 -172 -311 0
7711 -159 -170 -313 0
7711 -159 -168 -315 0
7711 -159 -167 0
7711 -157 -303 0
7711 -157 -180 -305 0
7711 -157 -178 -307 0
7711 -157 -176 -309 0
7711 -157 -174 -311 0
7711 -157 -172 -313 0
7711 -157 -170 -315 0
7711 -157 -168 0
7711 -157 -167 0
7711 -155 -305 0
7711 -155 -180 -307 0
7711 -155 -178 -309 0
7711 -155 -176 -311 0
7711 -155 -174 -313 0
7711 -155 -172 -315 0
7711 -155 -170 0
7711 -155 -168 0
7711 -155 -167 0
7711 -153 -307 0
7711 -153 -180 -309 0
7711 -153 -178 -311 0
7711 -153 -176 -313 0
7711 -153 -174 -315 0
7711 -153 -172 0
7711 -153 -170 0
7711 -153 -168 0
7711 -153 -167 0
7711 -152 -309 0
7711 -152 -180 -311 0
7711 -152 -178 -313 0
7711 -152 -176 -315 0
7711 -152 -174 0
7711 -152 -172 0
7711 -152 -170 0
7711 -152 -168 0
7711 -152 -167 0
c ((15<=(x_00002_00002 + x_00002_00003 + x_00003_00003))=tv=SATLiteral(7712))
-7712 -172 -302 0
-7712 -170 -303 0
-7712 -168 -305 0
-7712 -167 -307 0
-7712 -165 -174 -302 0
-7712 -165 -172 -303 0
-7712 -165 -170 -305 0
-7712 -165 -168 -307 0
-7712 -165 -167 -309 0
-7712 -163 -176 -302 0
-7712 -163 -174 -303 0
-7712 -163 -172 -305 0
-7712 -163 -170 -307 0
-7712 -163 -168 -309 0
-7712 -163 -167 -311 0
-7712 -161 -178 -302 0
-7712 -161 -176 -303 0
-7712 -161 -174 -305 0
-7712 -161 -172 -307 0
-7712 -161 -170 -309 0
-7712 -161 -168 -311 0
-7712 -161 -167 -313 0
-7712 -159 -180 -302 0
-7712 -159 -178 -303 0
-7712 -159 -176 -305 0
-7712 -159 -174 -307 0
-7712 -159 -172 -309 0
-7712 -159 -170 -311 0
-7712 -159 -168 -313 0
-7712 -159 -167 -315 0
-7712 -157 -302 0
-7712 -157 -180 -303 0
-7712 -157 -178 -305 0
-7712 -157 -176 -307 0
-7712 -157 -174 -309 0
-7712 -157 -172 -311 0
-7712 -157 -170 -313 0
-7712 -157 -168 -315 0
-7712 -157 -167 0
-7712 -155 -303 0
-7712 -155 -180 -305 0
-7712 -155 -178 -307 0
-7712 -155 -176 -309 0
-7712 -155 -174 -311 0
-7712 -155 -172 -313 0
-7712 -155 -170 -315 0
-7712 -155 -168 0
-7712 -155 -167 0
-7712 -153 -305 0
-7712 -153 -180 -307 0
-7712 -153 -178 -309 0
-7712 -153 -176 -311 0
-7712 -153 -174 -313 0
-7712 -153 -172 -315 0
-7712 -153 -170 0
-7712 -153 -168 0
-7712 -153 -167 0
-7712 -152 -307 0
-7712 -152 -180 -309 0
-7712 -152 -178 -311 0
-7712 -152 -176 -313 0
-7712 -152 -174 -315 0
-7712 -152 -172 0
-7712 -152 -170 0
-7712 -152 -168 0
-7712 -152 -167 0
7712 172 315 0
7712 174 313 0
7712 176 311 0
7712 178 309 0
7712 180 307 0
7712 152 170 315 0
7712 152 172 313 0
7712 152 174 311 0
7712 152 176 309 0
7712 152 178 307 0
7712 152 180 305 0
7712 153 168 315 0
7712 153 170 313 0
7712 153 172 311 0
7712 153 174 309 0
7712 153 176 307 0
7712 153 178 305 0
7712 153 180 303 0
7712 155 167 315 0
7712 155 168 313 0
7712 155 170 311 0
7712 155 172 309 0
7712 155 174 307 0
7712 155 176 305 0
7712 155 178 303 0
7712 155 180 302 0
7712 157 315 0
7712 157 167 313 0
7712 157 168 311 0
7712 157 170 309 0
7712 157 172 307 0
7712 157 174 305 0
7712 157 176 303 0
7712 157 178 302 0
7712 157 180 0
7712 159 313 0
7712 159 167 311 0
7712 159 168 309 0
7712 159 170 307 0
7712 159 172 305 0
7712 159 174 303 0
7712 159 176 302 0
7712 159 178 0
7712 159 180 0
7712 161 311 0
7712 161 167 309 0
7712 161 168 307 0
7712 161 170 305 0
7712 161 172 303 0
7712 161 174 302 0
7712 161 176 0
7712 161 178 0
7712 161 180 0
7712 163 309 0
7712 163 167 307 0
7712 163 168 305 0
7712 163 170 303 0
7712 163 172 302 0
7712 163 174 0
7712 163 176 0
7712 163 178 0
7712 163 180 0
7712 165 307 0
7712 165 167 305 0
7712 165 168 303 0
7712 165 170 302 0
7712 165 172 0
7712 165 174 0
7712 165 176 0
7712 165 178 0
7712 165 180 0
c (((x_00002_00007 + x_00002_00008 + x_00003_00008)<=11)=tv=SATLiteral(7713))
-7713 242 390 0
-7713 243 388 0
-7713 245 386 0
-7713 247 384 0
-7713 249 382 0
-7713 251 380 0
-7713 253 378 0
-7713 255 377 0
-7713 227 390 0
-7713 227 242 388 0
-7713 227 243 386 0
-7713 227 245 384 0
-7713 227 247 382 0
-7713 227 249 380 0
-7713 227 251 378 0
-7713 227 253 377 0
-7713 227 255 0
-7713 228 388 0
-7713 228 242 386 0
-7713 228 243 384 0
-7713 228 245 382 0
-7713 228 247 380 0
-7713 228 249 378 0
-7713 228 251 377 0
-7713 228 253 0
-7713 228 255 0
-7713 230 386 0
-7713 230 242 384 0
-7713 230 243 382 0
-7713 230 245 380 0
-7713 230 247 378 0
-7713 230 249 377 0
-7713 230 251 0
-7713 230 253 0
-7713 230 255 0
-7713 232 384 0
-7713 232 242 382 0
-7713 232 243 380 0
-7713 232 245 378 0
-7713 232 247 377 0
-7713 232 249 0
-7713 232 251 0
-7713 232 253 0
-7713 232 255 0
-7713 234 382 0
-7713 234 242 380 0
-7713 234 243 378 0
-7713 234 245 377 0
-7713 234 247 0
-7713 234 249 0
-7713 234 251 0
-7713 234 253 0
-7713 234 255 0
-7713 236 380 0
-7713 236 242 378 0
-7713 236 243 377 0
-7713 236 245 0
-7713 236 247 0
-7713 236 249 0
-7713 236 251 0
-7713 236 253 0
-7713 236 255 0
-7713 238 378 0
-7713 238 242 377 0
-7713 238 243 0
-7713 238 245 0
-7713 238 247 0
-7713 238 249 0
-7713 238 251 0
-7713 238 253 0
-7713 238 255 0
-7713 240 377 0
-7713 240 242 0
-7713 240 243 0
-7713 240 245 0
-7713 240 247 0
-7713 240 249 0
-7713 240 251 0
-7713 240 253 0
-7713 240 255 0
7713 -242 -377 0
7713 -240 -243 -377 0
7713 -240 -242 -378 0
7713 -238 -245 -377 0
7713 -238 -243 -378 0
7713 -238 -242 -380 0
7713 -236 -247 -377 0
7713 -236 -245 -378 0
7713 -236 -243 -380 0
7713 -236 -242 -382 0
7713 -234 -249 -377 0
7713 -234 -247 -378 0
7713 -234 -245 -380 0
7713 -234 -243 -382 0
7713 -234 -242 -384 0
7713 -232 -251 -377 0
7713 -232 -249 -378 0
7713 -232 -247 -380 0
7713 -232 -245 -382 0
7713 -232 -243 -384 0
7713 -232 -242 -386 0
7713 -230 -253 -377 0
7713 -230 -251 -378 0
7713 -230 -249 -380 0
7713 -230 -247 -382 0
7713 -230 -245 -384 0
7713 -230 -243 -386 0
7713 -230 -242 -388 0
7713 -228 -255 -377 0
7713 -228 -253 -378 0
7713 -228 -251 -380 0
7713 -228 -249 -382 0
7713 -228 -247 -384 0
7713 -228 -245 -386 0
7713 -228 -243 -388 0
7713 -228 -242 -390 0
7713 -227 -377 0
7713 -227 -255 -378 0
7713 -227 -253 -380 0
7713 -227 -251 -382 0
7713 -227 -249 -384 0
7713 -227 -247 -386 0
7713 -227 -245 -388 0
7713 -227 -243 -390 0
7713 -227 -242 0
c ((11<=(x_00002_00007 + x_00002_00008 + x_00003_00008))=tv=SATLiteral(7714))
-7714 -240 -242 -377 0
-7714 -238 -243 -377 0
-7714 -238 -242 -378 0
-7714 -236 -245 -377 0
-7714 -236 -243 -378 0
-7714 -236 -242 -380 0
-7714 -234 -247 -377 0
-7714 -234 -245 -378 0
-7714 -234 -243 -380 0
-7714 -234 -242 -382 0
-7714 -232 -249 -377 0
-7714 -232 -247 -378 0
-7714 -232 -245 -380 0
-7714 -232 -243 -382 0
-7714 -232 -242 -384 0
-7714 -230 -251 -377 0
-7714 -230 -249 -378 0
-7714 -230 -247 -380 0
-7714 -230 -245 -382 0
-7714 -230 -243 -384 0
-7714 -230 -242 -386 0
-7714 -228 -253 -377 0
-7714 -228 -251 -378 0
-7714 -228 -249 -380 0
-7714 -228 -247 -382 0
-7714 -228 -245 -384 0
-7714 -228 -243 -386 0
-7714 -228 -242 -388 0
-7714 -227 -255 -377 0
-7714 -227 -253 -378 0
-7714 -227 -251 -380 0
-7714 -227 -249 -382 0
-7714 -227 -247 -384 0
-7714 -227 -245 -386 0
-7714 -227 -243 -388 0
-7714 -227 -242 -390 0
7714 390 0
7714 242 388 0
7714 243 386 0
7714 245 384 0
7714 247 382 0
7714 249 380 0
7714 251 378 0
7714 253 377 0
7714 255 0
7714 227 388 0
7714 227 242 386 0
7714 227 243 384 0
7714 227 245 382 0
7714 227 247 380 0
7714 227 249 378 0
7714 227 251 377 0
7714 227 253 0
7714 227 255 0
7714 228 386 0
7714 228 242 384 0
7714 228 243 382 0
7714 228 245 380 0
7714 228 247 378 0
7714 228 249 377 0
7714 228 251 0
7714 228 253 0
7714 228 255 0
7714 230 384 0
7714 230 242 382 0
7714 230 243 380 0
7714 230 245 378 0
7714 230 247 377 0
7714 230 249 0
7714 230 251 0
7714 230 253 0
7714 230 255 0
7714 232 382 0
7714 232 242 380 0
7714 232 243 378 0
7714 232 245 377 0
7714 232 247 0
7714 232 249 0
7714 232 251 0
7714 232 253 0
7714 232 255 0
7714 234 380 0
7714 234 242 378 0
7714 234 243 377 0
7714 234 245 0
7714 234 247 0
7714 234 249 0
7714 234 251 0
7714 234 253 0
7714 234 255 0
7714 236 378 0
7714 236 242 377 0
7714 236 243 0
7714 236 245 0
7714 236 247 0
7714 236 249 0
7714 236 251 0
7714 236 253 0
7714 236 255 0
7714 238 377 0
7714 238 242 0
7714 238 243 0
7714 238 245 0
7714 238 247 0
7714 238 249 0
7714 238 251 0
7714 238 253 0
7714 238 255 0
7714 240 0
7714 240 242 0
7714 240 243 0
7714 240 245 0
7714 240 247 0
7714 240 249 0
7714 240 251 0
7714 240 253 0
7714 240 255 0
c (((x_00002_00009 + x_00003_00009)<=14)=tv=SATLiteral(7715))
-7715 264 405 0
-7715 266 403 0
-7715 268 401 0
-7715 270 399 0
7715 -399 0
7715 -270 -401 0
7715 -268 -403 0
7715 -266 -405 0
7715 -264 0
7715 -262 0
7715 -260 0
7715 -258 0
7715 -257 0
c ((14<=(x_00002_00009 + x_00003_00009))=tv=SATLiteral(7716))
-7716 -397 0
-7716 -270 -399 0
-7716 -268 -401 0
-7716 -266 -403 0
-7716 -264 -405 0
-7716 -262 0
-7716 -260 0
-7716 -258 0
-7716 -257 0
7716 262 405 0
7716 264 403 0
7716 266 401 0
7716 268 399 0
7716 270 397 0
c (((x_00003_00002 + x_00004_00001 + x_00004_00002)<=21)=tv=SATLiteral(7717))
-7717 290 420 435 0
-7717 292 418 435 0
-7717 292 420 433 0
-7717 294 416 435 0
-7717 294 418 433 0
-7717 294 420 431 0
-7717 296 414 435 0
-7717 296 416 433 0
-7717 296 418 431 0
-7717 296 420 429 0
-7717 298 412 435 0
-7717 298 414 433 0
-7717 298 416 431 0
-7717 298 418 429 0
-7717 298 420 427 0
-7717 300 410 435 0
-7717 300 412 433 0
-7717 300 414 431 0
-7717 300 416 429 0
-7717 300 418 427 0
-7717 300 420 425 0
7717 -425 0
7717 -420 -427 0
7717 -418 -429 0
7717 -416 -431 0
7717 -414 -433 0
7717 -412 -435 0
7717 -410 0
7717 -408 0
7717 -407 0
7717 -300 -427 0
7717 -300 -420 -429 0
7717 -300 -418 -431 0
7717 -300 -416 -433 0
7717 -300 -414 -435 0
7717 -300 -412 0
7717 -300 -410 0
7717 -300 -408 0
7717 -300 -407 0
7717 -298 -429 0
7717 -298 -420 -431 0
7717 -298 -418 -433 0
7717 -298 -416 -435 0
7717 -298 -414 0
7717 -298 -412 0
7717 -298 -410 0
7717 -298 -408 0
7717 -298 -407 0
7717 -296 -431 0
7717 -296 -420 -433 0
7717 -296 -418 -435 0
7717 -296 -416 0
7717 -296 -414 0
7717 -296 -412 0
7717 -296 -410 0
7717 -296 -408 0
7717 -296 -407 0
7717 -294 -433 0
7717 -294 -420 -435 0
7717 -294 -418 0
7717 -294 -416 0
7717 -294 -414 0
7717 -294 -412 0
7717 -294 -410 0
7717 -294 -408 0
7717 -294 -407 0
7717 -292 -435 0
7717 -292 -420 0
7717 -292 -418 0
7717 -292 -416 0
7717 -292 -414 0
7717 -292 -412 0
7717 -292 -410 0
7717 -292 -408 0
7717 -292 -407 0
7717 -290 0
7717 -290 -420 0
7717 -290 -418 0
7717 -290 -416 0
7717 -290 -414 0
7717 -290 -412 0
7717 -290 -410 0
7717 -290 -408 0
7717 -290 -407 0
7717 -288 0
7717 -288 -420 0
7717 -288 -418 0
7717 -288 -416 0
7717 -288 -414 0
7717 -288 -412 0
7717 -288 -410 0
7717 -288 -408 0
7717 -288 -407 0
7717 -287 0
7717 -287 -420 0
7717 -287 -418 0
7717 -287 -416 0
7717 -287 -414 0
7717 -287 -412 0
7717 -287 -410 0
7717 -287 -408 0
7717 -287 -407 0
c ((21<=(x_00003_00002 + x_00004_00001 + x_00004_00002))=tv=SATLiteral(7718))
-7718 -423 0
-7718 -420 -425 0
-7718 -418 -427 0
-7718 -416 -429 0
-7718 -414 -431 0
-7718 -412 -433 0
-7718 -410 -435 0
-7718 -408 0
-7718 -407 0
-7718 -300 -425 0
-7718 -300 -420 -427 0
-7718 -300 -418 -429 0
-7718 -300 -416 -431 0
-7718 -300 -414 -433 0
-7718 -300 -412 -435 0
-7718 -300 -410 0
-7718 -300 -408 0
-7718 -300 -407 0
-7718 -298 -427 0
-7718 -298 -420 -429 0
-7718 -298 -418 -431 0
-7718 -298 -416 -433 0
-7718 -298 -414 -435 0
-7718 -298 -412 0
-7718 -298 -410 0
-7718 -298 -408 0
-7718 -298 -407 0
-7718 -296 -429 0
-7718 -296 -420 -431 0
-7718 -296 -418 -433 0
-7718 -296 -416 -435 0
-7718 -296 -414 0
-7718 -296 -412 0
-7718 -296 -410 0
-7718 -296 -408 0
-7718 -296 -407 0
-7718 -294 -431 0
-7718 -294 -420 -433 0
-7718 -294 -418 -435 0
-7718 -294 -416 0
-7718 -294 -414 0
-7718 -294 -412 0
-7718 -294 -410 0
-7718 -294 -408 0
-7718 -294 -407 0
-7718 -292 -433 0
-7718 -292 -420 -435 0
-7718 -292 -418 0
-7718 -292 -416 0
-7718 -292 -414 0
-7718 -292 -412 0
-7718 -292 -410 0
-7718 -292 -408 0
-7718 -292 -407 0
-7718 -290 -435 0
-7718 -290 -420 0
-7718 -290 -418 0
-7718 -290 -416 0
-7718 -290 -414 0
-7718 -290 -412 0
-7718 -290 -410 0
-7718 -290 -408 0
-7718 -290 -407 0
-7718 -288 0
-7718 -288 -420 0
-7718 -288 -418 0
-7718 -288 -416 0
-7718 -288 -414 0
-7718 -288 -412 0
-7718 -288 -410 0
-7718 -288 -408 0
-7718 -288 -407 0
-7718 -287 0
-7718 -287 -420 0
-7718 -287 -418 0
-7718 -287 -416 0
-7718 -287 -414 0
-7718 -287 -412 0
-7718 -287 -410 0
-7718 -287 -408 0
-7718 -287 -407 0
7718 288 420 435 0
7718 290 418 435 0
7718 290 420 433 0
7718 292 416 435 0
7718 292 418 433 0
7718 292 420 431 0
7718 294 414 435 0
7718 294 416 433 0
7718 294 418 431 0
7718 294 420 429 0
7718 296 412 435 0
7718 296 414 433 0
7718 296 416 431 0
7718 296 418 429 0
7718 296 420 427 0
7718 298 410 435 0
7718 298 412 433 0
7718 298 414 431 0
7718 298 416 429 0
7718 298 418 427 0
7718 298 420 425 0
7718 300 408 435 0
7718 300 410 433 0
7718 300 412 431 0
7718 300 414 429 0
7718 300 416 427 0
7718 300 418 425 0
7718 300 420 423 0
c (((x_00003_00005 + x_00003_00006)<=7)=tv=SATLiteral(7719))
-7719 356 0
-7719 332 354 0
-7719 333 352 0
-7719 335 350 0
-7719 337 348 0
-7719 339 347 0
-7719 341 0
-7719 343 0
-7719 345 0
7719 -341 -347 0
7719 -339 -348 0
7719 -337 -350 0
7719 -335 -352 0
7719 -333 -354 0
7719 -332 -356 0
c ((7<=(x_00003_00005 + x_00003_00006))=tv=SATLiteral(7720))
-7720 -339 -347 0
-7720 -337 -348 0
-7720 -335 -350 0
-7720 -333 -352 0
-7720 -332 -354 0
7720 354 0
7720 332 352 0
7720 333 350 0
7720 335 348 0
7720 337 347 0
7720 339 0
7720 341 0
7720 343 0
7720 345 0
c (((x_00003_00007 + x_00004_00006 + x_00004_00007)<=19)=tv=SATLiteral(7721))
-7721 362 495 510 0
-7721 363 493 510 0
-7721 363 495 508 0
-7721 365 491 510 0
-7721 365 493 508 0
-7721 365 495 506 0
-7721 367 489 510 0
-7721 367 491 508 0
-7721 367 493 506 0
-7721 367 495 504 0
-7721 369 487 510 0
-7721 369 489 508 0
-7721 369 491 506 0
-7721 369 493 504 0
-7721 369 495 502 0
-7721 371 485 510 0
-7721 371 487 508 0
-7721 371 489 506 0
-7721 371 491 504 0
-7721 371 493 502 0
-7721 371 495 500 0
-7721 373 483 510 0
-7721 373 485 508 0
-7721 373 487 506 0
-7721 373 489 504 0
-7721 373 491 502 0
-7721 373 493 500 0
-7721 373 495 498 0
-7721 375 482 510 0
-7721 375 483 508 0
-7721 375 485 506 0
-7721 375 487 504 0
-7721 375 489 502 0
-7721 375 491 500 0
-7721 375 493 498 0
-7721 375 495 497 0
7721 -497 0
7721 -495 -498 0
7721 -493 -500 0
7721 -491 -502 0
7721 -489 -504 0
7721 -487 -506 0
7721 -485 -508 0
7721 -483 -510 0
7721 -482 0
7721 -375 -498 0
7721 -375 -495 -500 0
7721 -375 -493 -502 0
7721 -375 -491 -504 0
7721 -375 -489 -506 0
7721 -375 -487 -508 0
7721 -375 -485 -510 0
7721 -375 -483 0
7721 -375 -482 0
7721 -373 -500 0
7721 -373 -495 -502 0
7721 -373 -493 -504 0
7721 -373 -491 -506 0
7721 -373 -489 -508 0
7721 -373 -487 -510 0
7721 -373 -485 0
7721 -373 -483 0
7721 -373 -482 0
7721 -371 -502 0
7721 -371 -495 -504 0
7721 -371 -493 -506 0
7721 -371 -491 -508 0
7721 -371 -489 -510 0
7721 -371 -487 0
7721 -371 -485 0
7721 -371 -483 0
7721 -371 -482 0
7721 -369 -504 0
7721 -369 -495 -506 0
7721 -369 -493 -508 0
7721 -369 -491 -510 0
7721 -369 -489 0
7721 -369 -487 0
7721 -369 -485 0
7721 -369 -483 0
7721 -369 -482 0
7721 -367 -506 0
7721 -367 -495 -508 0
7721 -367 -493 -510 0
7721 -367 -491 0
7721 -367 -489 0
7721 -367 -487 0
7721 -367 -485 0
7721 -367 -483 0
7721 -367 -482 0
7721 -365 -508 0
7721 -365 -495 -510 0
7721 -365 -493 0
7721 -365 -491 0
7721 -365 -489 0
7721 -365 -487 0
7721 -365 -485 0
7721 -365 -483 0
7721 -365 -482 0
7721 -363 -510 0
7721 -363 -495 0
7721 -363 -493 0
7721 -363 -491 0
7721 -363 -489 0
7721 -363 -487 0
7721 -363 -485 0
7721 -363 -483 0
7721 -363 -482 0
7721 -362 0
7721 -362 -495 0
7721 -362 -493 0
7721 -362 -491 0
7721 -362 -489 0
7721 -362 -487 0
7721 -362 -485 0
7721 -362 -483 0
7721 -362 -482 0
c ((19<=(x_00003_00007 + x_00004_00006 + x_00004_00007))=tv=SATLiteral(7722))
-7722 -495 -497 0
-7722 -493 -498 0
-7722 -491 -500 0
-7722 -489 -502 0
-7722 -487 -504 0
-7722 -485 -506 0
-7722 -483 -508 0
-7722 -482 -510 0
-7722 -375 -497 0
-7722 -375 -495 -498 0
-7722 -375 -493 -500 0
-7722 -375 -491 -502 0
-7722 -375 -489 -504 0
-7722 -375 -487 -506 0
-7722 -375 -485 -508 0
-7722 -375 -483 -510 0
-7722 -375 -482 0
-7722 -373 -498 0
-7722 -373 -495 -500 0
-7722 -373 -493 -502 0
-7722 -373 -491 -504 0
-7722 -373 -489 -506 0
-7722 -373 -487 -508 0
-7722 -373 -485 -510 0
-7722 -373 -483 0
-7722 -373 -482 0
-7722 -371 -500 0
-7722 -371 -495 -502 0
-7722 -371 -493 -504 0
-7722 -371 -491 -506 0
-7722 -371 -489 -508 0
-7722 -371 -487 -510 0
-7722 -371 -485 0
-7722 -371 -483 0
-7722 -371 -482 0
-7722 -369 -502 0
-7722 -369 -495 -504 0
-7722 -369 -493 -506 0
-7722 -369 -491 -508 0
-7722 -369 -489 -510 0
-7722 -369 -487 0
-7722 -369 -485 0
-7722 -369 -483 0
-7722 -369 -482 0
-7722 -367 -504 0
-7722 -367 -495 -506 0
-7722 -367 -493 -508 0
-7722 -367 -491 -510 0
-7722 -367 -489 0
-7722 -367 -487 0
-7722 -367 -485 0
-7722 -367 -483 0
-7722 -367 -482 0
-7722 -365 -506 0
-7722 -365 -495 -508 0
-7722 -365 -493 -510 0
-7722 -365 -491 0
-7722 -365 -489 0
-7722 -365 -487 0
-7722 -365 -485 0
-7722 -365 -483 0
-7722 -365 -482 0
-7722 -363 -508 0
-7722 -363 -495 -510 0
-7722 -363 -493 0
-7722 -363 -491 0
-7722 -363 -489 0
-7722 -363 -487 0
-7722 -363 -485 0
-7722 -363 -483 0
-7722 -363 -482 0
-7722 -362 -510 0
-7722 -362 -495 0
-7722 -362 -493 0
-7722 -362 -491 0
-7722 -362 -489 0
-7722 -362 -487 0
-7722 -362 -485 0
-7722 -362 -483 0
-7722 -362 -482 0
7722 495 510 0
7722 362 493 510 0
7722 362 495 508 0
7722 363 491 510 0
7722 363 493 508 0
7722 363 495 506 0
7722 365 489 510 0
7722 365 491 508 0
7722 365 493 506 0
7722 365 495 504 0
7722 367 487 510 0
7722 367 489 508 0
7722 367 491 506 0
7722 367 493 504 0
7722 367 495 502 0
7722 369 485 510 0
7722 369 487 508 0
7722 369 489 506 0
7722 369 491 504 0
7722 369 493 502 0
7722 369 495 500 0
7722 371 483 510 0
7722 371 485 508 0
7722 371 487 506 0
7722 371 489 504 0
7722 371 491 502 0
7722 371 493 500 0
7722 371 495 498 0
7722 373 482 510 0
7722 373 483 508 0
7722 373 485 506 0
7722 373 487 504 0
7722 373 489 502 0
7722 373 491 500 0
7722 373 493 498 0
7722 373 495 497 0
7722 375 510 0
7722 375 482 508 0
7722 375 483 506 0
7722 375 485 504 0
7722 375 487 502 0
7722 375 489 500 0
7722 375 491 498 0
7722 375 493 497 0
7722 375 495 0
c (((x_00004_00003 + x_00004_00004 + x_00005_00003)<=14)=tv=SATLiteral(7723))
-7723 457 585 0
-7723 459 583 0
-7723 461 581 0
-7723 463 579 0
-7723 465 577 0
-7723 437 455 585 0
-7723 437 457 583 0
-7723 437 459 581 0
-7723 437 461 579 0
-7723 437 463 577 0
-7723 437 465 575 0
-7723 438 453 585 0
-7723 438 455 583 0
-7723 438 457 581 0
-7723 438 459 579 0
-7723 438 461 577 0
-7723 438 463 575 0
-7723 438 465 573 0
-7723 440 452 585 0
-7723 440 453 583 0
-7723 440 455 581 0
-7723 440 457 579 0
-7723 440 459 577 0
-7723 440 461 575 0
-7723 440 463 573 0
-7723 440 465 572 0
-7723 442 585 0
-7723 442 452 583 0
-7723 442 453 581 0
-7723 442 455 579 0
-7723 442 457 577 0
-7723 442 459 575 0
-7723 442 461 573 0
-7723 442 463 572 0
-7723 442 465 0
-7723 444 583 0
-7723 444 452 581 0
-7723 444 453 579 0
-7723 444 455 577 0
-7723 444 457 575 0
-7723 444 459 573 0
-7723 444 461 572 0
-7723 444 463 0
-7723 444 465 0
-7723 446 581 0
-7723 446 452 579 0
-7723 446 453 577 0
-7723 446 455 575 0
-7723 446 457 573 0
-7723 446 459 572 0
-7723 446 461 0
-7723 446 463 0
-7723 446 465 0
-7723 448 579 0
-7723 448 452 577 0
-7723 448 453 575 0
-7723 448 455 573 0
-7723 448 457 572 0
-7723 448 459 0
-7723 448 461 0
-7723 448 463 0
-7723 448 465 0
-7723 450 577 0
-7723 450 452 575 0
-7723 450 453 573 0
-7723 450 455 572 0
-7723 450 457 0
-7723 450 459 0
-7723 450 461 0
-7723 450 463 0
-7723 450 465 0
7723 -457 -572 0
7723 -455 -573 0
7723 -453 -575 0
7723 -452 -577 0
7723 -450 -459 -572 0
7723 -450 -457 -573 0
7723 -450 -455 -575 0
7723 -450 -453 -577 0
7723 -450 -452 -579 0
7723 -448 -461 -572 0
7723 -448 -459 -573 0
7723 -448 -457 -575 0
7723 -448 -455 -577 0
7723 -448 -453 -579 0
7723 -448 -452 -581 0
7723 -446 -463 -572 0
7723 -446 -461 -573 0
7723 -446 -459 -575 0
7723 -446 -457 -577 0
7723 -446 -455 -579 0
7723 -446 -453 -581 0
7723 -446 -452 -583 0
7723 -444 -465 -572 0
7723 -444 -463 -573 0
7723 -444 -461 -575 0
7723 -444 -459 -577 0
7723 -444 -457 -579 0
7723 -444 -455 -581 0
7723 -444 -453 -583 0
7723 -444 -452 -585 0
7723 -442 -572 0
7723 -442 -465 -573 0
7723 -442 -463 -575 0
7723 -442 -461 -577 0
7723 -442 -459 -579 0
7723 -442 -457 -581 0
7723 -442 -455 -583 0
7723 -442 -453 -585 0
7723 -442 -452 0
7723 -440 -573 0
7723 -440 -465 -575 0
7723 -440 -463 -577 0
7723 -440 -461 -579 0
7723 -440 -459 -581 0
7723 -440 -457 -583 0
7723 -440 -455 -585 0
7723 -440 -453 0
7723 -440 -452 0
7723 -438 -575 0
7723 -438 -465 -577 0
7723 -438 -463 -579 0
7723 -438 -461 -581 0
7723 -438 -459 -583 0
7723 -438 -457 -585 0
7723 -438 -455 0
7723 -438 -453 0
7723 -438 -452 0
7723 -437 -577 0
7723 -437 -465 -579 0
7723 -437 -463 -581 0
7723 -437 -461 -583 0
7723 -437 -459 -585 0
7723 -437 -457 0
7723 -437 -455 0
7723 -437 -453 0
7723 -437 -452 0
c ((14<=(x_00004_00003 + x_00004_00004 + x_00005_00003))=tv=SATLiteral(7724))
-7724 -455 -572 0
-7724 -453 -573 0
-7724 -452 -575 0
-7724 -450 -457 -572 0
-7724 -450 -455 -573 0
-7724 -450 -453 -575 0
-7724 -450 -452 -577 0
-7724 -448 -459 -572 0
-7724 -448 -457 -573 0
-7724 -448 -455 -575 0
-7724 -448 -453 -577 0
-7724 -448 -452 -579 0
-7724 -446 -461 -572 0
-7724 -446 -459 -573 0
-7724 -446 -457 -575 0
-7724 -446 -455 -577 0
-7724 -446 -453 -579 0
-7724 -446 -452 -581 0
-7724 -444 -463 -572 0
-7724 -444 -461 -573 0
-7724 -444 -459 -575 0
-7724 -444 -457 -577 0
-7724 -444 -455 -579 0
-7724 -444 -453 -581 0
-7724 -444 -452 -583 0
-7724 -442 -465 -572 0
-7724 -442 -463 -573 0
-7724 -442 -461 -575 0
-7724 -442 -459 -577 0
-7724 -442 -457 -579 0
-7724 -442 -455 -581 0
-7724 -442 -453 -583 0
-7724 -442 -452 -585 0
-7724 -440 -572 0
-7724 -440 -465 -573 0
-7724 -440 -463 -575 0
-7724 -440 -461 -577 0
-7724 -440 -459 -579 0
-7724 -440 -457 -581 0
-7724 -440 -455 -583 0
-7724 -440 -453 -585 0
-7724 -440 -452 0
-7724 -438 -573 0
-7724 -438 -465 -575 0
-7724 -438 -463 -577 0
-7724 -438 -461 -579 0
-7724 -438 -459 -581 0
-7724 -438 -457 -583 0
-7724 -438 -455 -585 0
-7724 -438 -453 0
-7724 -438 -452 0
-7724 -437 -575 0
-7724 -437 -465 -577 0
-7724 -437 -463 -579 0
-7724 -437 -461 -581 0
-7724 -437 -459 -583 0
-7724 -437 -457 -585 0
-7724 -437 -455 0
-7724 -437 -453 0
-7724 -437 -452 0
7724 455 585 0
7724 457 583 0
7724 459 581 0
7724 461 579 0
7724 463 577 0
7724 465 575 0
7724 437 453 585 0
7724 437 455 583 0
7724 437 457 581 0
7724 437 459 579 0
7724 437 461 577 0
7724 437 463 575 0
7724 437 465 573 0
7724 438 452 585 0
7724 438 453 583 0
7724 438 455 581 0
7724 438 457 579 0
7724 438 459 577 0
7724 438 461 575 0
7724 438 463 573 0
7724 438 465 572 0
7724 440 585 0
7724 440 452 583 0
7724 440 453 581 0
7724 440 455 579 0
7724 440 457 577 0
7724 440 459 575 0
7724 440 461 573 0
7724 440 463 572 0
7724 440 465 0
7724 442 583 0
7724 442 452 581 0
7724 442 453 579 0
7724 442 455 577 0
7724 442 457 575 0
7724 442 459 573 0
7724 442 461 572 0
7724 442 463 0
7724 442 465 0
7724 444 581 0
7724 444 452 579 0
7724 444 453 577 0
7724 444 455 575 0
7724 444 457 573 0
7724 444 459 572 0
7724 444 461 0
7724 444 463 0
7724 444 465 0
7724 446 579 0
7724 446 452 577 0
7724 446 453 575 0
7724 446 455 573 0
7724 446 457 572 0
7724 446 459 0
7724 446 461 0
7724 446 463 0
7724 446 465 0
7724 448 577 0
7724 448 452 575 0
7724 448 453 573 0
7724 448 455 572 0
7724 448 457 0
7724 448 459 0
7724 448 461 0
7724 448 463 0
7724 448 465 0
7724 450 575 0
7724 450 452 573 0
7724 450 453 572 0
7724 450 455 0
7724 450 457 0
7724 450 459 0
7724 450 461 0
7724 450 463 0
7724 450 465 0
c (((x_00004_00005 + x_00005_00004 + x_00005_00005)<=18)=tv=SATLiteral(7725))
-7725 600 615 0
-7725 467 598 615 0
-7725 467 600 613 0
-7725 468 596 615 0
-7725 468 598 613 0
-7725 468 600 611 0
-7725 470 594 615 0
-7725 470 596 613 0
-7725 470 598 611 0
-7725 470 600 609 0
-7725 472 592 615 0
-7725 472 594 613 0
-7725 472 596 611 0
-7725 472 598 609 0
-7725 472 600 607 0
-7725 474 590 615 0
-7725 474 592 613 0
-7725 474 594 611 0
-7725 474 596 609 0
-7725 474 598 607 0
-7725 474 600 605 0
-7725 476 588 615 0
-7725 476 590 613 0
-7725 476 592 611 0
-7725 476 594 609 0
-7725 476 596 607 0
-7725 476 598 605 0
-7725 476 600 603 0
-7725 478 587 615 0
-7725 478 588 613 0
-7725 478 590 611 0
-7725 478 592 609 0
-7725 478 594 607 0
-7725 478 596 605 0
-7725 478 598 603 0
-7725 478 600 602 0
-7725 480 615 0
-7725 480 587 613 0
-7725 480 588 611 0
-7725 480 590 609 0
-7725 480 592 607 0
-7725 480 594 605 0
-7725 480 596 603 0
-7725 480 598 602 0
-7725 480 600 0
7725 -600 -602 0
7725 -598 -603 0
7725 -596 -605 0
7725 -594 -607 0
7725 -592 -609 0
7725 -590 -611 0
7725 -588 -613 0
7725 -587 -615 0
7725 -480 -602 0
7725 -480 -600 -603 0
7725 -480 -598 -605 0
7725 -480 -596 -607 0
7725 -480 -594 -609 0
7725 -480 -592 -611 0
7725 -480 -590 -613 0
7725 -480 -588 -615 0
7725 -480 -587 0
7725 -478 -603 0
7725 -478 -600 -605 0
7725 -478 -598 -607 0
7725 -478 -596 -609 0
7725 -478 -594 -611 0
7725 -478 -592 -613 0
7725 -478 -590 -615 0
7725 -478 -588 0
7725 -478 -587 0
7725 -476 -605 0
7725 -476 -600 -607 0
7725 -476 -598 -609 0
7725 -476 -596 -611 0
7725 -476 -594 -613 0
7725 -476 -592 -615 0
7725 -476 -590 0
7725 -476 -588 0
7725 -476 -587 0
7725 -474 -607 0
7725 -474 -600 -609 0
7725 -474 -598 -611 0
7725 -474 -596 -613 0
7725 -474 -594 -615 0
7725 -474 -592 0
7725 -474 -590 0
7725 -474 -588 0
7725 -474 -587 0
7725 -472 -609 0
7725 -472 -600 -611 0
7725 -472 -598 -613 0
7725 -472 -596 -615 0
7725 -472 -594 0
7725 -472 -592 0
7725 -472 -590 0
7725 -472 -588 0
7725 -472 -587 0
7725 -470 -611 0
7725 -470 -600 -613 0
7725 -470 -598 -615 0
7725 -470 -596 0
7725 -470 -594 0
7725 -470 -592 0
7725 -470 -590 0
7725 -470 -588 0
7725 -470 -587 0
7725 -468 -613 0
7725 -468 -600 -615 0
7725 -468 -598 0
7725 -468 -596 0
7725 -468 -594 0
7725 -468 -592 0
7725 -468 -590 0
7725 -468 -588 0
7725 -468 -587 0
7725 -467 -615 0
7725 -467 -600 0
7725 -467 -598 0
7725 -467 -596 0
7725 -467 -594 0
7725 -467 -592 0
7725 -467 -590 0
7725 -467 -588 0
7725 -467 -587 0
c ((18<=(x_00004_00005 + x_00005_00004 + x_00005_00005))=tv=SATLiteral(7726))
-7726 -598 -602 0
-7726 -596 -603 0
-7726 -594 -605 0
-7726 -592 -607 0
-7726 -590 -609 0
-7726 -588 -611 0
-7726 -587 -613 0
-7726 -480 -600 -602 0
-7726 -480 -598 -603 0
-7726 -480 -596 -605 0
-7726 -480 -594 -607 0
-7726 -480 -592 -609 0
-7726 -480 -590 -611 0
-7726 -480 -588 -613 0
-7726 -480 -587 -615 0
-7726 -478 -602 0
-7726 -478 -600 -603 0
-7726 -478 -598 -605 0
-7726 -478 -596 -607 0
-7726 -478 -594 -609 0
-7726 -478 -592 -611 0
-7726 -478 -590 -613 0
-7726 -478 -588 -615 0
-7726 -478 -587 0
-7726 -476 -603 0
-7726 -476 -600 -605 0
-7726 -476 -598 -607 0
-7726 -476 -596 -609 0
-7726 -476 -594 -611 0
-7726 -476 -592 -613 0
-7726 -476 -590 -615 0
-7726 -476 -588 0
-7726 -476 -587 0
-7726 -474 -605 0
-7726 -474 -600 -607 0
-7726 -474 -598 -609 0
-7726 -474 -596 -611 0
-7726 -474 -594 -613 0
-7726 -474 -592 -615 0
-7726 -474 -590 0
-7726 -474 -588 0
-7726 -474 -587 0
-7726 -472 -607 0
-7726 -472 -600 -609 0
-7726 -472 -598 -611 0
-7726 -472 -596 -613 0
-7726 -472 -594 -615 0
-7726 -472 -592 0
-7726 -472 -590 0
-7726 -472 -588 0
-7726 -472 -587 0
-7726 -470 -609 0
-7726 -470 -600 -611 0
-7726 -470 -598 -613 0
-7726 -470 -596 -615 0
-7726 -470 -594 0
-7726 -470 -592 0
-7726 -470 -590 0
-7726 -470 -588 0
-7726 -470 -587 0
-7726 -468 -611 0
-7726 -468 -600 -613 0
-7726 -468 -598 -615 0
-7726 -468 -596 0
-7726 -468 -594 0
-7726 -468 -592 0
-7726 -468 -590 0
-7726 -468 -588 0
-7726 -468 -587 0
-7726 -467 -613 0
-7726 -467 -600 -615 0
-7726 -467 -598 0
-7726 -467 -596 0
-7726 -467 -594 0
-7726 -467 -592 0
-7726 -467 -590 0
-7726 -467 -588 0
-7726 -467 -587 0
7726 598 615 0
7726 600 613 0
7726 467 596 615 0
7726 467 598 613 0
7726 467 600 611 0
7726 468 594 615 0
7726 468 596 613 0
7726 468 598 611 0
7726 468 600 609 0
7726 470 592 615 0
7726 470 594 613 0
7726 470 596 611 0
7726 470 598 609 0
7726 470 600 607 0
7726 472 590 615 0
7726 472 592 613 0
7726 472 594 611 0
7726 472 596 609 0
7726 472 598 607 0
7726 472 600 605 0
7726 474 588 615 0
7726 474 590 613 0
7726 474 592 611 0
7726 474 594 609 0
7726 474 596 607 0
7726 474 598 605 0
7726 474 600 603 0
7726 476 587 615 0
7726 476 588 613 0
7726 476 590 611 0
7726 476 592 609 0
7726 476 594 607 0
7726 476 596 605 0
7726 476 598 603 0
7726 476 600 602 0
7726 478 615 0
7726 478 587 613 0
7726 478 588 611 0
7726 478 590 609 0
7726 478 592 607 0
7726 478 594 605 0
7726 478 596 603 0
7726 478 598 602 0
7726 478 600 0
7726 480 613 0
7726 480 587 611 0
7726 480 588 609 0
7726 480 590 607 0
7726 480 592 605 0
7726 480 594 603 0
7726 480 596 602 0
7726 480 598 0
7726 480 600 0
c (((x_00004_00008 + x_00004_00009)<=8)=tv=SATLiteral(7727))
-7727 538 0
-7727 512 536 0
-7727 513 534 0
-7727 515 532 0
-7727 517 530 0
-7727 519 528 0
-7727 521 527 0
-7727 523 0
-7727 525 0
7727 -523 -527 0
7727 -521 -528 0
7727 -519 -530 0
7727 -517 -532 0
7727 -515 -534 0
7727 -513 -536 0
7727 -512 -538 0
c ((8<=(x_00004_00008 + x_00004_00009))=tv=SATLiteral(7728))
-7728 -521 -527 0
-7728 -519 -528 0
-7728 -517 -530 0
-7728 -515 -532 0
-7728 -513 -534 0
-7728 -512 -536 0
7728 536 0
7728 512 534 0
7728 513 532 0
7728 515 530 0
7728 517 528 0
7728 519 527 0
7728 521 0
7728 523 0
7728 525 0
c (((x_00005_00001 + x_00005_00002 + x_00006_00001)<=11)=tv=SATLiteral(7729))
-7729 557 690 0
-7729 558 688 0
-7729 560 686 0
-7729 562 684 0
-7729 564 682 0
-7729 566 680 0
-7729 568 678 0
-7729 570 677 0
-7729 542 690 0
-7729 542 557 688 0
-7729 542 558 686 0
-7729 542 560 684 0
-7729 542 562 682 0
-7729 542 564 680 0
-7729 542 566 678 0
-7729 542 568 677 0
-7729 542 570 0
-7729 543 688 0
-7729 543 557 686 0
-7729 543 558 684 0
-7729 543 560 682 0
-7729 543 562 680 0
-7729 543 564 678 0
-7729 543 566 677 0
-7729 543 568 0
-7729 543 570 0
-7729 545 686 0
-7729 545 557 684 0
-7729 545 558 682 0
-7729 545 560 680 0
-7729 545 562 678 0
-7729 545 564 677 0
-7729 545 566 0
-7729 545 568 0
-7729 545 570 0
-7729 547 684 0
-7729 547 557 682 0
-7729 547 558 680 0
-7729 547 560 678 0
-7729 547 562 677 0
-7729 547 564 0
-7729 547 566 0
-7729 547 568 0
-7729 547 570 0
-7729 549 682 0
-7729 549 557 680 0
-7729 549 558 678 0
-7729 549 560 677 0
-7729 549 562 0
-7729 549 564 0
-7729 549 566 0
-7729 549 568 0
-7729 549 570 0
-7729 551 680 0
-7729 551 557 678 0
-7729 551 558 677 0
-7729 551 560 0
-7729 551 562 0
-7729 551 564 0
-7729 551 566 0
-7729 551 568 0
-7729 551 570 0
-7729 553 678 0
-7729 553 557 677 0
-7729 553 558 0
-7729 553 560 0
-7729 553 562 0
-7729 553 564 0
-7729 553 566 0
-7729 553 568 0
-7729 553 570 0
-7729 555 677 0
-7729 555 557 0
-7729 555 558 0
-7729 555 560 0
-7729 555 562 0
-7729 555 564 0
-7729 555 566 0
-7729 555 568 0
-7729 555 570 0
7729 -557 -677 0
7729 -555 -558 -677 0
7729 -555 -557 -678 0
7729 -553 -560 -677 0
7729 -553 -558 -678 0
7729 -553 -557 -680 0
7729 -551 -562 -677 0
7729 -551 -560 -678 0
7729 -551 -558 -680 0
7729 -551 -557 -682 0
7729 -549 -564 -677 0
7729 -549 -562 -678 0
7729 -549 -560 -680 0
7729 -549 -558 -682 0
7729 -549 -557 -684 0
7729 -547 -566 -677 0
7729 -547 -564 -678 0
7729 -547 -562 -680 0
7729 -547 -560 -682 0
7729 -547 -558 -684 0
7729 -547 -557 -686 0
7729 -545 -568 -677 0
7729 -545 -566 -678 0
7729 -545 -564 -680 0
7729 -545 -562 -682 0
7729 -545 -560 -684 0
7729 -545 -558 -686 0
7729 -545 -557 -688 0
7729 -543 -570 -677 0
7729 -543 -568 -678 0
7729 -543 -566 -680 0
7729 -543 -564 -682 0
7729 -543 -562 -684 0
7729 -543 -560 -686 0
7729 -543 -558 -688 0
7729 -543 -557 -690 0
7729 -542 -677 0
7729 -542 -570 -678 0
7729 -542 -568 -680 0
7729 -542 -566 -682 0
7729 -542 -564 -684 0
7729 -542 -562 -686 0
7729 -542 -560 -688 0
7729 -542 -558 -690 0
7729 -542 -557 0
c ((11<=(x_00005_00001 + x_00005_00002 + x_00006_00001))=tv=SATLiteral(7730))
-7730 -555 -557 -677 0
-7730 -553 -558 -677 0
-7730 -553 -557 -678 0
-7730 -551 -560 -677 0
-7730 -551 -558 -678 0
-7730 -551 -557 -680 0
-7730 -549 -562 -677 0
-7730 -549 -560 -678 0
-7730 -549 -558 -680 0
-7730 -549 -557 -682 0
-7730 -547 -564 -677 0
-7730 -547 -562 -678 0
-7730 -547 -560 -680 0
-7730 -547 -558 -682 0
-7730 -547 -557 -684 0
-7730 -545 -566 -677 0
-7730 -545 -564 -678 0
-7730 -545 -562 -680 0
-7730 -545 -560 -682 0
-7730 -545 -558 -684 0
-7730 -545 -557 -686 0
-7730 -543 -568 -677 0
-7730 -543 -566 -678 0
-7730 -543 -564 -680 0
-7730 -543 -562 -682 0
-7730 -543 -560 -684 0
-7730 -543 -558 -686 0
-7730 -543 -557 -688 0
-7730 -542 -570 -677 0
-7730 -542 -568 -678 0
-7730 -542 -566 -680 0
-7730 -542 -564 -682 0
-7730 -542 -562 -684 0
-7730 -542 -560 -686 0
-7730 -542 -558 -688 0
-7730 -542 -557 -690 0
7730 690 0
7730 557 688 0
7730 558 686 0
7730 560 684 0
7730 562 682 0
7730 564 680 0
7730 566 678 0
7730 568 677 0
7730 570 0
7730 542 688 0
7730 542 557 686 0
7730 542 558 684 0
7730 542 560 682 0
7730 542 562 680 0
7730 542 564 678 0
7730 542 566 677 0
7730 542 568 0
7730 542 570 0
7730 543 686 0
7730 543 557 684 0
7730 543 558 682 0
7730 543 560 680 0
7730 543 562 678 0
7730 543 564 677 0
7730 543 566 0
7730 543 568 0
7730 543 570 0
7730 545 684 0
7730 545 557 682 0
7730 545 558 680 0
7730 545 560 678 0
7730 545 562 677 0
7730 545 564 0
7730 545 566 0
7730 545 568 0
7730 545 570 0
7730 547 682 0
7730 547 557 680 0
7730 547 558 678 0
7730 547 560 677 0
7730 547 562 0
7730 547 564 0
7730 547 566 0
7730 547 568 0
7730 547 570 0
7730 549 680 0
7730 549 557 678 0
7730 549 558 677 0
7730 549 560 0
7730 549 562 0
7730 549 564 0
7730 549 566 0
7730 549 568 0
7730 549 570 0
7730 551 678 0
7730 551 557 677 0
7730 551 558 0
7730 551 560 0
7730 551 562 0
7730 551 564 0
7730 551 566 0
7730 551 568 0
7730 551 570 0
7730 553 677 0
7730 553 557 0
7730 553 558 0
7730 553 560 0
7730 553 562 0
7730 553 564 0
7730 553 566 0
7730 553 568 0
7730 553 570 0
7730 555 0
7730 555 557 0
7730 555 558 0
7730 555 560 0
7730 555 562 0
7730 555 564 0
7730 555 566 0
7730 555 568 0
7730 555 570 0
c (((x_00005_00006 + x_00005_00007)<=5)=tv=SATLiteral(7731))
-7731 637 0
-7731 617 635 0
-7731 618 633 0
-7731 620 632 0
-7731 622 0
-7731 624 0
-7731 626 0
-7731 628 0
-7731 630 0
7731 -622 -632 0
7731 -620 -633 0
7731 -618 -635 0
7731 -617 -637 0
c ((5<=(x_00005_00006 + x_00005_00007))=tv=SATLiteral(7732))
-7732 -620 -632 0
-7732 -618 -633 0
-7732 -617 -635 0
7732 635 0
7732 617 633 0
7732 618 632 0
7732 620 0
7732 622 0
7732 624 0
7732 626 0
7732 628 0
7732 630 0
c (((x_00005_00008 + x_00005_00009)<=13)=tv=SATLiteral(7733))
-7733 652 675 0
-7733 654 673 0
-7733 656 671 0
-7733 658 669 0
-7733 660 667 0
7733 -667 0
7733 -660 -669 0
7733 -658 -671 0
7733 -656 -673 0
7733 -654 -675 0
7733 -652 0
7733 -650 0
7733 -648 0
7733 -647 0
c ((13<=(x_00005_00008 + x_00005_00009))=tv=SATLiteral(7734))
-7734 -665 0
-7734 -660 -667 0
-7734 -658 -669 0
-7734 -656 -671 0
-7734 -654 -673 0
-7734 -652 -675 0
-7734 -650 0
-7734 -648 0
-7734 -647 0
7734 650 675 0
7734 652 673 0
7734 654 671 0
7734 656 669 0
7734 658 667 0
7734 660 665 0
c (((x_00006_00002 + x_00006_00003)<=10)=tv=SATLiteral(7735))
-7735 692 720 0
-7735 693 718 0
-7735 695 716 0
-7735 697 714 0
-7735 699 712 0
-7735 701 710 0
-7735 703 708 0
-7735 705 707 0
7735 -707 0
7735 -705 -708 0
7735 -703 -710 0
7735 -701 -712 0
7735 -699 -714 0
7735 -697 -716 0
7735 -695 -718 0
7735 -693 -720 0
7735 -692 0
c ((10<=(x_00006_00002 + x_00006_00003))=tv=SATLiteral(7736))
-7736 -705 -707 0
-7736 -703 -708 0
-7736 -701 -710 0
-7736 -699 -712 0
-7736 -697 -714 0
-7736 -695 -716 0
-7736 -693 -718 0
-7736 -692 -720 0
7736 720 0
7736 692 718 0
7736 693 716 0
7736 695 714 0
7736 697 712 0
7736 699 710 0
7736 701 708 0
7736 703 707 0
7736 705 0
c (((x_00007_00004 + x_00006_00004 + x_00006_00005)<=14)=tv=SATLiteral(7737))
-7737 727 750 0
-7737 729 748 0
-7737 731 746 0
-7737 733 744 0
-7737 735 742 0
-7737 857 725 750 0
-7737 857 727 748 0
-7737 857 729 746 0
-7737 857 731 744 0
-7737 857 733 742 0
-7737 857 735 740 0
-7737 858 723 750 0
-7737 858 725 748 0
-7737 858 727 746 0
-7737 858 729 744 0
-7737 858 731 742 0
-7737 858 733 740 0
-7737 858 735 738 0
-7737 860 722 750 0
-7737 860 723 748 0
-7737 860 725 746 0
-7737 860 727 744 0
-7737 860 729 742 0
-7737 860 731 740 0
-7737 860 733 738 0
-7737 860 735 737 0
-7737 862 750 0
-7737 862 722 748 0
-7737 862 723 746 0
-7737 862 725 744 0
-7737 862 727 742 0
-7737 862 729 740 0
-7737 862 731 738 0
-7737 862 733 737 0
-7737 862 735 0
-7737 864 748 0
-7737 864 722 746 0
-7737 864 723 744 0
-7737 864 725 742 0
-7737 864 727 740 0
-7737 864 729 738 0
-7737 864 731 737 0
-7737 864 733 0
-7737 864 735 0
-7737 866 746 0
-7737 866 722 744 0
-7737 866 723 742 0
-7737 866 725 740 0
-7737 866 727 738 0
-7737 866 729 737 0
-7737 866 731 0
-7737 866 733 0
-7737 866 735 0
-7737 868 744 0
-7737 868 722 742 0
-7737 868 723 740 0
-7737 868 725 738 0
-7737 868 727 737 0
-7737 868 729 0
-7737 868 731 0
-7737 868 733 0
-7737 868 735 0
-7737 870 742 0
-7737 870 722 740 0
-7737 870 723 738 0
-7737 870 725 737 0
-7737 870 727 0
-7737 870 729 0
-7737 870 731 0
-7737 870 733 0
-7737 870 735 0
7737 -727 -737 0
7737 -725 -738 0
7737 -723 -740 0
7737 -722 -742 0
7737 -870 -729 -737 0
7737 -870 -727 -738 0
7737 -870 -725 -740 0
7737 -870 -723 -742 0
7737 -870 -722 -744 0
7737 -868 -731 -737 0
7737 -868 -729 -738 0
7737 -868 -727 -740 0
7737 -868 -725 -742 0
7737 -868 -723 -744 0
7737 -868 -722 -746 0
7737 -866 -733 -737 0
7737 -866 -731 -738 0
7737 -866 -729 -740 0
7737 -866 -727 -742 0
7737 -866 -725 -744 0
7737 -866 -723 -746 0
7737 -866 -722 -748 0
7737 -864 -735 -737 0
7737 -864 -733 -738 0
7737 -864 -731 -740 0
7737 -864 -729 -742 0
7737 -864 -727 -744 0
7737 -864 -725 -746 0
7737 -864 -723 -748 0
7737 -864 -722 -750 0
7737 -862 -737 0
7737 -862 -735 -738 0
7737 -862 -733 -740 0
7737 -862 -731 -742 0
7737 -862 -729 -744 0
7737 -862 -727 -746 0
7737 -862 -725 -748 0
7737 -862 -723 -750 0
7737 -862 -722 0
7737 -860 -738 0
7737 -860 -735 -740 0
7737 -860 -733 -742 0
7737 -860 -731 -744 0
7737 -860 -729 -746 0
7737 -860 -727 -748 0
7737 -860 -725 -750 0
7737 -860 -723 0
7737 -860 -722 0
7737 -858 -740 0
7737 -858 -735 -742 0
7737 -858 -733 -744 0
7737 -858 -731 -746 0
7737 -858 -729 -748 0
7737 -858 -727 -750 0
7737 -858 -725 0
7737 -858 -723 0
7737 -858 -722 0
7737 -857 -742 0
7737 -857 -735 -744 0
7737 -857 -733 -746 0
7737 -857 -731 -748 0
7737 -857 -729 -750 0
7737 -857 -727 0
7737 -857 -725 0
7737 -857 -723 0
7737 -857 -722 0
c ((14<=(x_00007_00004 + x_00006_00004 + x_00006_00005))=tv=SATLiteral(7738))
-7738 -725 -737 0
-7738 -723 -738 0
-7738 -722 -740 0
-7738 -870 -727 -737 0
-7738 -870 -725 -738 0
-7738 -870 -723 -740 0
-7738 -870 -722 -742 0
-7738 -868 -729 -737 0
-7738 -868 -727 -738 0
-7738 -868 -725 -740 0
-7738 -868 -723 -742 0
-7738 -868 -722 -744 0
-7738 -866 -731 -737 0
-7738 -866 -729 -738 0
-7738 -866 -727 -740 0
-7738 -866 -725 -742 0
-7738 -866 -723 -744 0
-7738 -866 -722 -746 0
-7738 -864 -733 -737 0
-7738 -864 -731 -738 0
-7738 -864 -729 -740 0
-7738 -864 -727 -742 0
-7738 -864 -725 -744 0
-7738 -864 -723 -746 0
-7738 -864 -722 -748 0
-7738 -862 -735 -737 0
-7738 -862 -733 -738 0
-7738 -862 -731 -740 0
-7738 -862 -729 -742 0
-7738 -862 -727 -744 0
-7738 -862 -725 -746 0
-7738 -862 -723 -748 0
-7738 -862 -722 -750 0
-7738 -860 -737 0
-7738 -860 -735 -738 0
-7738 -860 -733 -740 0
-7738 -860 -731 -742 0
-7738 -860 -729 -744 0
-7738 -860 -727 -746 0
-7738 -860 -725 -748 0
-7738 -860 -723 -750 0
-7738 -860 -722 0
-7738 -858 -738 0
-7738 -858 -735 -740 0
-7738 -858 -733 -742 0
-7738 -858 -731 -744 0
-7738 -858 -729 -746 0
-7738 -858 -727 -748 0
-7738 -858 -725 -750 0
-7738 -858 -723 0
-7738 -858 -722 0
-7738 -857 -740 0
-7738 -857 -735 -742 0
-7738 -857 -733 -744 0
-7738 -857 -731 -746 0
-7738 -857 -729 -748 0
-7738 -857 -727 -750 0
-7738 -857 -725 0
-7738 -857 -723 0
-7738 -857 -722 0
7738 725 750 0
7738 727 748 0
7738 729 746 0
7738 731 744 0
7738 733 742 0
7738 735 740 0
7738 857 723 750 0
7738 857 725 748 0
7738 857 727 746 0
7738 857 729 744 0
7738 857 731 742 0
7738 857 733 740 0
7738 857 735 738 0
7738 858 722 750 0
7738 858 723 748 0
7738 858 725 746 0
7738 858 727 744 0
7738 858 729 742 0
7738 858 731 740 0
7738 858 733 738 0
7738 858 735 737 0
7738 860 750 0
7738 860 722 748 0
7738 860 723 746 0
7738 860 725 744 0
7738 860 727 742 0
7738 860 729 740 0
7738 860 731 738 0
7738 860 733 737 0
7738 860 735 0
7738 862 748 0
7738 862 722 746 0
7738 862 723 744 0
7738 862 725 742 0
7738 862 727 740 0
7738 862 729 738 0
7738 862 731 737 0
7738 862 733 0
7738 862 735 0
7738 864 746 0
7738 864 722 744 0
7738 864 723 742 0
7738 864 725 740 0
7738 864 727 738 0
7738 864 729 737 0
7738 864 731 0
7738 864 733 0
7738 864 735 0
7738 866 744 0
7738 866 722 742 0
7738 866 723 740 0
7738 866 725 738 0
7738 866 727 737 0
7738 866 729 0
7738 866 731 0
7738 866 733 0
7738 866 735 0
7738 868 742 0
7738 868 722 740 0
7738 868 723 738 0
7738 868 725 737 0
7738 868 727 0
7738 868 729 0
7738 868 731 0
7738 868 733 0
7738 868 735 0
7738 870 740 0
7738 870 722 738 0
7738 870 723 737 0
7738 870 725 0
7738 870 727 0
7738 870 729 0
7738 870 731 0
7738 870 733 0
7738 870 735 0
c (((x_00007_00005 + x_00007_00006 + x_00006_00006)<=12)=tv=SATLiteral(7739))
-7739 888 765 0
-7739 890 763 0
-7739 892 761 0
-7739 894 759 0
-7739 896 757 0
-7739 898 755 0
-7739 900 753 0
-7739 872 887 765 0
-7739 872 888 763 0
-7739 872 890 761 0
-7739 872 892 759 0
-7739 872 894 757 0
-7739 872 896 755 0
-7739 872 898 753 0
-7739 872 900 752 0
-7739 873 765 0
-7739 873 887 763 0
-7739 873 888 761 0
-7739 873 890 759 0
-7739 873 892 757 0
-7739 873 894 755 0
-7739 873 896 753 0
-7739 873 898 752 0
-7739 873 900 0
-7739 875 763 0
-7739 875 887 761 0
-7739 875 888 759 0
-7739 875 890 757 0
-7739 875 892 755 0
-7739 875 894 753 0
-7739 875 896 752 0
-7739 875 898 0
-7739 875 900 0
-7739 877 761 0
-7739 877 887 759 0
-7739 877 888 757 0
-7739 877 890 755 0
-7739 877 892 753 0
-7739 877 894 752 0
-7739 877 896 0
-7739 877 898 0
-7739 877 900 0
-7739 879 759 0
-7739 879 887 757 0
-7739 879 888 755 0
-7739 879 890 753 0
-7739 879 892 752 0
-7739 879 894 0
-7739 879 896 0
-7739 879 898 0
-7739 879 900 0
-7739 881 757 0
-7739 881 887 755 0
-7739 881 888 753 0
-7739 881 890 752 0
-7739 881 892 0
-7739 881 894 0
-7739 881 896 0
-7739 881 898 0
-7739 881 900 0
-7739 883 755 0
-7739 883 887 753 0
-7739 883 888 752 0
-7739 883 890 0
-7739 883 892 0
-7739 883 894 0
-7739 883 896 0
-7739 883 898 0
-7739 883 900 0
-7739 885 753 0
-7739 885 887 752 0
-7739 885 888 0
-7739 885 890 0
-7739 885 892 0
-7739 885 894 0
-7739 885 896 0
-7739 885 898 0
-7739 885 900 0
7739 -888 -752 0
7739 -887 -753 0
7739 -885 -890 -752 0
7739 -885 -888 -753 0
7739 -885 -887 -755 0
7739 -883 -892 -752 0
7739 -883 -890 -753 0
7739 -883 -888 -755 0
7739 -883 -887 -757 0
7739 -881 -894 -752 0
7739 -881 -892 -753 0
7739 -881 -890 -755 0
7739 -881 -888 -757 0
7739 -881 -887 -759 0
7739 -879 -896 -752 0
7739 -879 -894 -753 0
7739 -879 -892 -755 0
7739 -879 -890 -757 0
7739 -879 -888 -759 0
7739 -879 -887 -761 0
7739 -877 -898 -752 0
7739 -877 -896 -753 0
7739 -877 -894 -755 0
7739 -877 -892 -757 0
7739 -877 -890 -759 0
7739 -877 -888 -761 0
7739 -877 -887 -763 0
7739 -875 -900 -752 0
7739 -875 -898 -753 0
7739 -875 -896 -755 0
7739 -875 -894 -757 0
7739 -875 -892 -759 0
7739 -875 -890 -761 0
7739 -875 -888 -763 0
7739 -875 -887 -765 0
7739 -873 -752 0
7739 -873 -900 -753 0
7739 -873 -898 -755 0
7739 -873 -896 -757 0
7739 -873 -894 -759 0
7739 -873 -892 -761 0
7739 -873 -890 -763 0
7739 -873 -888 -765 0
7739 -873 -887 0
7739 -872 -753 0
7739 -872 -900 -755 0
7739 -872 -898 -757 0
7739 -872 -896 -759 0
7739 -872 -894 -761 0
7739 -872 -892 -763 0
7739 -872 -890 -765 0
7739 -872 -888 0
7739 -872 -887 0
c ((12<=(x_00007_00005 + x_00007_00006 + x_00006_00006))=tv=SATLiteral(7740))
-7740 -887 -752 0
-7740 -885 -888 -752 0
-7740 -885 -887 -753 0
-7740 -883 -890 -752 0
-7740 -883 -888 -753 0
-7740 -883 -887 -755 0
-7740 -881 -892 -752 0
-7740 -881 -890 -753 0
-7740 -881 -888 -755 0
-7740 -881 -887 -757 0
-7740 -879 -894 -752 0
-7740 -879 -892 -753 0
-7740 -879 -890 -755 0
-7740 -879 -888 -757 0
-7740 -879 -887 -759 0
-7740 -877 -896 -752 0
-7740 -877 -894 -753 0
-7740 -877 -892 -755 0
-7740 -877 -890 -757 0
-7740 -877 -888 -759 0
-7740 -877 -887 -761 0
-7740 -875 -898 -752 0
-7740 -875 -896 -753 0
-7740 -875 -894 -755 0
-7740 -875 -892 -757 0
-7740 -875 -890 -759 0
-7740 -875 -888 -761 0
-7740 -875 -887 -763 0
-7740 -873 -900 -752 0
-7740 -873 -898 -753 0
-7740 -873 -896 -755 0
-7740 -873 -894 -757 0
-7740 -873 -892 -759 0
-7740 -873 -890 -761 0
-7740 -873 -888 -763 0
-7740 -873 -887 -765 0
-7740 -872 -752 0
-7740 -872 -900 -753 0
-7740 -872 -898 -755 0
-7740 -872 -896 -757 0
-7740 -872 -894 -759 0
-7740 -872 -892 -761 0
-7740 -872 -890 -763 0
-7740 -872 -888 -765 0
-7740 -872 -887 0
7740 887 765 0
7740 888 763 0
7740 890 761 0
7740 892 759 0
7740 894 757 0
7740 896 755 0
7740 898 753 0
7740 900 752 0
7740 872 765 0
7740 872 887 763 0
7740 872 888 761 0
7740 872 890 759 0
7740 872 892 757 0
7740 872 894 755 0
7740 872 896 753 0
7740 872 898 752 0
7740 872 900 0
7740 873 763 0
7740 873 887 761 0
7740 873 888 759 0
7740 873 890 757 0
7740 873 892 755 0
7740 873 894 753 0
7740 873 896 752 0
7740 873 898 0
7740 873 900 0
7740 875 761 0
7740 875 887 759 0
7740 875 888 757 0
7740 875 890 755 0
7740 875 892 753 0
7740 875 894 752 0
7740 875 896 0
7740 875 898 0
7740 875 900 0
7740 877 759 0
7740 877 887 757 0
7740 877 888 755 0
7740 877 890 753 0
7740 877 892 752 0
7740 877 894 0
7740 877 896 0
7740 877 898 0
7740 877 900 0
7740 879 757 0
7740 879 887 755 0
7740 879 888 753 0
7740 879 890 752 0
7740 879 892 0
7740 879 894 0
7740 879 896 0
7740 879 898 0
7740 879 900 0
7740 881 755 0
7740 881 887 753 0
7740 881 888 752 0
7740 881 890 0
7740 881 892 0
7740 881 894 0
7740 881 896 0
7740 881 898 0
7740 881 900 0
7740 883 753 0
7740 883 887 752 0
7740 883 888 0
7740 883 890 0
7740 883 892 0
7740 883 894 0
7740 883 896 0
7740 883 898 0
7740 883 900 0
7740 885 752 0
7740 885 887 0
7740 885 888 0
7740 885 890 0
7740 885 892 0
7740 885 894 0
7740 885 896 0
7740 885 898 0
7740 885 900 0
c (((x_00006_00007 + x_00006_00008)<=14)=tv=SATLiteral(7741))
-7741 774 795 0
-7741 776 793 0
-7741 778 791 0
-7741 780 789 0
7741 -789 0
7741 -780 -791 0
7741 -778 -793 0
7741 -776 -795 0
7741 -774 0
7741 -772 0
7741 -770 0
7741 -768 0
7741 -767 0
c ((14<=(x_00006_00007 + x_00006_00008))=tv=SATLiteral(7742))
-7742 -787 0
-7742 -780 -789 0
-7742 -778 -791 0
-7742 -776 -793 0
-7742 -774 -795 0
-7742 -772 0
-7742 -770 0
-7742 -768 0
-7742 -767 0
7742 772 795 0
7742 774 793 0
7742 776 791 0
7742 778 789 0
7742 780 787 0
c (((x_00007_00001 + x_00007_00002 + x_00008_00002)<=17)=tv=SATLiteral(7743))
-7743 838 975 0
-7743 840 973 0
-7743 812 836 975 0
-7743 812 838 973 0
-7743 812 840 971 0
-7743 813 834 975 0
-7743 813 836 973 0
-7743 813 838 971 0
-7743 813 840 969 0
-7743 815 832 975 0
-7743 815 834 973 0
-7743 815 836 971 0
-7743 815 838 969 0
-7743 815 840 967 0
-7743 817 830 975 0
-7743 817 832 973 0
-7743 817 834 971 0
-7743 817 836 969 0
-7743 817 838 967 0
-7743 817 840 965 0
-7743 819 828 975 0
-7743 819 830 973 0
-7743 819 832 971 0
-7743 819 834 969 0
-7743 819 836 967 0
-7743 819 838 965 0
-7743 819 840 963 0
-7743 821 827 975 0
-7743 821 828 973 0
-7743 821 830 971 0
-7743 821 832 969 0
-7743 821 834 967 0
-7743 821 836 965 0
-7743 821 838 963 0
-7743 821 840 962 0
-7743 823 975 0
-7743 823 827 973 0
-7743 823 828 971 0
-7743 823 830 969 0
-7743 823 832 967 0
-7743 823 834 965 0
-7743 823 836 963 0
-7743 823 838 962 0
-7743 823 840 0
-7743 825 973 0
-7743 825 827 971 0
-7743 825 828 969 0
-7743 825 830 967 0
-7743 825 832 965 0
-7743 825 834 963 0
-7743 825 836 962 0
-7743 825 838 0
-7743 825 840 0
7743 -838 -962 0
7743 -836 -963 0
7743 -834 -965 0
7743 -832 -967 0
7743 -830 -969 0
7743 -828 -971 0
7743 -827 -973 0
7743 -825 -840 -962 0
7743 -825 -838 -963 0
7743 -825 -836 -965 0
7743 -825 -834 -967 0
7743 -825 -832 -969 0
7743 -825 -830 -971 0
7743 -825 -828 -973 0
7743 -825 -827 -975 0
7743 -823 -962 0
7743 -823 -840 -963 0
7743 -823 -838 -965 0
7743 -823 -836 -967 0
7743 -823 -834 -969 0
7743 -823 -832 -971 0
7743 -823 -830 -973 0
7743 -823 -828 -975 0
7743 -823 -827 0
7743 -821 -963 0
7743 -821 -840 -965 0
7743 -821 -838 -967 0
7743 -821 -836 -969 0
7743 -821 -834 -971 0
7743 -821 -832 -973 0
7743 -821 -830 -975 0
7743 -821 -828 0
7743 -821 -827 0
7743 -819 -965 0
7743 -819 -840 -967 0
7743 -819 -838 -969 0
7743 -819 -836 -971 0
7743 -819 -834 -973 0
7743 -819 -832 -975 0
7743 -819 -830 0
7743 -819 -828 0
7743 -819 -827 0
7743 -817 -967 0
7743 -817 -840 -969 0
7743 -817 -838 -971 0
7743 -817 -836 -973 0
7743 -817 -834 -975 0
7743 -817 -832 0
7743 -817 -830 0
7743 -817 -828 0
7743 -817 -827 0
7743 -815 -969 0
7743 -815 -840 -971 0
7743 -815 -838 -973 0
7743 -815 -836 -975 0
7743 -815 -834 0
7743 -815 -832 0
7743 -815 -830 0
7743 -815 -828 0
7743 -815 -827 0
7743 -813 -971 0
7743 -813 -840 -973 0
7743 -813 -838 -975 0
7743 -813 -836 0
7743 -813 -834 0
7743 -813 -832 0
7743 -813 -830 0
7743 -813 -828 0
7743 -813 -827 0
7743 -812 -973 0
7743 -812 -840 -975 0
7743 -812 -838 0
7743 -812 -836 0
7743 -812 -834 0
7743 -812 -832 0
7743 -812 -830 0
7743 -812 -828 0
7743 -812 -827 0
c ((17<=(x_00007_00001 + x_00007_00002 + x_00008_00002))=tv=SATLiteral(7744))
-7744 -836 -962 0
-7744 -834 -963 0
-7744 -832 -965 0
-7744 -830 -967 0
-7744 -828 -969 0
-7744 -827 -971 0
-7744 -825 -838 -962 0
-7744 -825 -836 -963 0
-7744 -825 -834 -965 0
-7744 -825 -832 -967 0
-7744 -825 -830 -969 0
-7744 -825 -828 -971 0
-7744 -825 -827 -973 0
-7744 -823 -840 -962 0
-7744 -823 -838 -963 0
-7744 -823 -836 -965 0
-7744 -823 -834 -967 0
-7744 -823 -832 -969 0
-7744 -823 -830 -971 0
-7744 -823 -828 -973 0
-7744 -823 -827 -975 0
-7744 -821 -962 0
-7744 -821 -840 -963 0
-7744 -821 -838 -965 0
-7744 -821 -836 -967 0
-7744 -821 -834 -969 0
-7744 -821 -832 -971 0
-7744 -821 -830 -973 0
-7744 -821 -828 -975 0
-7744 -821 -827 0
-7744 -819 -963 0
-7744 -819 -840 -965 0
-7744 -819 -838 -967 0
-7744 -819 -836 -969 0
-7744 -819 -834 -971 0
-7744 -819 -832 -973 0
-7744 -819 -830 -975 0
-7744 -819 -828 0
-7744 -819 -827 0
-7744 -817 -965 0
-7744 -817 -840 -967 0
-7744 -817 -838 -969 0
-7744 -817 -836 -971 0
-7744 -817 -834 -973 0
-7744 -817 -832 -975 0
-7744 -817 -830 0
-7744 -817 -828 0
-7744 -817 -827 0
-7744 -815 -967 0
-7744 -815 -840 -969 0
-7744 -815 -838 -971 0
-7744 -815 -836 -973 0
-7744 -815 -834 -975 0
-7744 -815 -832 0
-7744 -815 -830 0
-7744 -815 -828 0
-7744 -815 -827 0
-7744 -813 -969 0
-7744 -813 -840 -971 0
-7744 -813 -838 -973 0
-7744 -813 -836 -975 0
-7744 -813 -834 0
-7744 -813 -832 0
-7744 -813 -830 0
-7744 -813 -828 0
-7744 -813 -827 0
-7744 -812 -971 0
-7744 -812 -840 -973 0
-7744 -812 -838 -975 0
-7744 -812 -836 0
-7744 -812 -834 0
-7744 -812 -832 0
-7744 -812 -830 0
-7744 -812 -828 0
-7744 -812 -827 0
7744 836 975 0
7744 838 973 0
7744 840 971 0
7744 812 834 975 0
7744 812 836 973 0
7744 812 838 971 0
7744 812 840 969 0
7744 813 832 975 0
7744 813 834 973 0
7744 813 836 971 0
7744 813 838 969 0
7744 813 840 967 0
7744 815 830 975 0
7744 815 832 973 0
7744 815 834 971 0
7744 815 836 969 0
7744 815 838 967 0
7744 815 840 965 0
7744 817 828 975 0
7744 817 830 973 0
7744 817 832 971 0
7744 817 834 969 0
7744 817 836 967 0
7744 817 838 965 0
7744 817 840 963 0
7744 819 827 975 0
7744 819 828 973 0
7744 819 830 971 0
7744 819 832 969 0
7744 819 834 967 0
7744 819 836 965 0
7744 819 838 963 0
7744 819 840 962 0
7744 821 975 0
7744 821 827 973 0
7744 821 828 971 0
7744 821 830 969 0
7744 821 832 967 0
7744 821 834 965 0
7744 821 836 963 0
7744 821 838 962 0
7744 821 840 0
7744 823 973 0
7744 823 827 971 0
7744 823 828 969 0
7744 823 830 967 0
7744 823 832 965 0
7744 823 834 963 0
7744 823 836 962 0
7744 823 838 0
7744 823 840 0
7744 825 971 0
7744 825 827 969 0
7744 825 828 967 0
7744 825 830 965 0
7744 825 832 963 0
7744 825 834 962 0
7744 825 836 0
7744 825 838 0
7744 825 840 0
c (((x_00007_00003 + x_00008_00003)<=11)=tv=SATLiteral(7745))
-7745 843 990 0
-7745 845 988 0
-7745 847 986 0
-7745 849 984 0
-7745 851 982 0
-7745 853 980 0
-7745 855 978 0
7745 -978 0
7745 -855 -980 0
7745 -853 -982 0
7745 -851 -984 0
7745 -849 -986 0
7745 -847 -988 0
7745 -845 -990 0
7745 -843 0
7745 -842 0
c ((11<=(x_00007_00003 + x_00008_00003))=tv=SATLiteral(7746))
-7746 -977 0
-7746 -855 -978 0
-7746 -853 -980 0
-7746 -851 -982 0
-7746 -849 -984 0
-7746 -847 -986 0
-7746 -845 -988 0
-7746 -843 -990 0
-7746 -842 0
7746 842 990 0
7746 843 988 0
7746 845 986 0
7746 847 984 0
7746 849 982 0
7746 851 980 0
7746 853 978 0
7746 855 977 0
c (((shift(x_00007_00008, -1) + aux446 + shift(x_00008_00007, -1))<=16)=tv=SATLiteral(7747))
-7747 1037 1813 0
-7747 1038 1811 0
-7747 1040 1809 0
-7747 1042 1807 0
-7747 1044 1805 0
-7747 1046 1803 0
-7747 1048 1801 0
-7747 1050 1799 0
-7747 917 1813 0
-7747 917 1037 1811 0
-7747 917 1038 1809 0
-7747 917 1040 1807 0
-7747 917 1042 1805 0
-7747 917 1044 1803 0
-7747 917 1046 1801 0
-7747 917 1048 1799 0
-7747 917 1050 1797 0
-7747 918 1811 0
-7747 918 1037 1809 0
-7747 918 1038 1807 0
-7747 918 1040 1805 0
-7747 918 1042 1803 0
-7747 918 1044 1801 0
-7747 918 1046 1799 0
-7747 918 1048 1797 0
-7747 918 1050 1795 0
-7747 920 1809 0
-7747 920 1037 1807 0
-7747 920 1038 1805 0
-7747 920 1040 1803 0
-7747 920 1042 1801 0
-7747 920 1044 1799 0
-7747 920 1046 1797 0
-7747 920 1048 1795 0
-7747 920 1050 1793 0
-7747 922 1807 0
-7747 922 1037 1805 0
-7747 922 1038 1803 0
-7747 922 1040 1801 0
-7747 922 1042 1799 0
-7747 922 1044 1797 0
-7747 922 1046 1795 0
-7747 922 1048 1793 0
-7747 922 1050 1791 0
-7747 924 1805 0
-7747 924 1037 1803 0
-7747 924 1038 1801 0
-7747 924 1040 1799 0
-7747 924 1042 1797 0
-7747 924 1044 1795 0
-7747 924 1046 1793 0
-7747 924 1048 1791 0
-7747 924 1050 1789 0
-7747 926 1803 0
-7747 926 1037 1801 0
-7747 926 1038 1799 0
-7747 926 1040 1797 0
-7747 926 1042 1795 0
-7747 926 1044 1793 0
-7747 926 1046 1791 0
-7747 926 1048 1789 0
-7747 926 1050 1787 0
-7747 928 1801 0
-7747 928 1037 1799 0
-7747 928 1038 1797 0
-7747 928 1040 1795 0
-7747 928 1042 1793 0
-7747 928 1044 1791 0
-7747 928 1046 1789 0
-7747 928 1048 1787 0
-7747 928 1050 1785 0
-7747 930 1799 0
-7747 930 1037 1797 0
-7747 930 1038 1795 0
-7747 930 1040 1793 0
-7747 930 1042 1791 0
-7747 930 1044 1789 0
-7747 930 1046 1787 0
-7747 930 1048 1785 0
-7747 930 1050 1784 0
7747 -1784 0
7747 -1050 -1785 0
7747 -1048 -1787 0
7747 -1046 -1789 0
7747 -1044 -1791 0
7747 -1042 -1793 0
7747 -1040 -1795 0
7747 -1038 -1797 0
7747 -1037 -1799 0
7747 -930 -1785 0
7747 -930 -1050 -1787 0
7747 -930 -1048 -1789 0
7747 -930 -1046 -1791 0
7747 -930 -1044 -1793 0
7747 -930 -1042 -1795 0
7747 -930 -1040 -1797 0
7747 -930 -1038 -1799 0
7747 -930 -1037 -1801 0
7747 -928 -1787 0
7747 -928 -1050 -1789 0
7747 -928 -1048 -1791 0
7747 -928 -1046 -1793 0
7747 -928 -1044 -1795 0
7747 -928 -1042 -1797 0
7747 -928 -1040 -1799 0
7747 -928 -1038 -1801 0
7747 -928 -1037 -1803 0
7747 -926 -1789 0
7747 -926 -1050 -1791 0
7747 -926 -1048 -1793 0
7747 -926 -1046 -1795 0
7747 -926 -1044 -1797 0
7747 -926 -1042 -1799 0
7747 -926 -1040 -1801 0
7747 -926 -1038 -1803 0
7747 -926 -1037 -1805 0
7747 -924 -1791 0
7747 -924 -1050 -1793 0
7747 -924 -1048 -1795 0
7747 -924 -1046 -1797 0
7747 -924 -1044 -1799 0
7747 -924 -1042 -1801 0
7747 -924 -1040 -1803 0
7747 -924 -1038 -1805 0
7747 -924 -1037 -1807 0
7747 -922 -1793 0
7747 -922 -1050 -1795 0
7747 -922 -1048 -1797 0
7747 -922 -1046 -1799 0
7747 -922 -1044 -1801 0
7747 -922 -1042 -1803 0
7747 -922 -1040 -1805 0
7747 -922 -1038 -1807 0
7747 -922 -1037 -1809 0
7747 -920 -1795 0
7747 -920 -1050 -1797 0
7747 -920 -1048 -1799 0
7747 -920 -1046 -1801 0
7747 -920 -1044 -1803 0
7747 -920 -1042 -1805 0
7747 -920 -1040 -1807 0
7747 -920 -1038 -1809 0
7747 -920 -1037 -1811 0
7747 -918 -1797 0
7747 -918 -1050 -1799 0
7747 -918 -1048 -1801 0
7747 -918 -1046 -1803 0
7747 -918 -1044 -1805 0
7747 -918 -1042 -1807 0
7747 -918 -1040 -1809 0
7747 -918 -1038 -1811 0
7747 -918 -1037 -1813 0
7747 -917 -1799 0
7747 -917 -1050 -1801 0
7747 -917 -1048 -1803 0
7747 -917 -1046 -1805 0
7747 -917 -1044 -1807 0
7747 -917 -1042 -1809 0
7747 -917 -1040 -1811 0
7747 -917 -1038 -1813 0
7747 -917 -1037 0
c ((16<=(shift(x_00007_00008, -1) + aux446 + shift(x_00008_00007, -1)))=tv=SATLiteral(7748))
-7748 -1050 -1784 0
-7748 -1048 -1785 0
-7748 -1046 -1787 0
-7748 -1044 -1789 0
-7748 -1042 -1791 0
-7748 -1040 -1793 0
-7748 -1038 -1795 0
-7748 -1037 -1797 0
-7748 -930 -1784 0
-7748 -930 -1050 -1785 0
-7748 -930 -1048 -1787 0
-7748 -930 -1046 -1789 0
-7748 -930 -1044 -1791 0
-7748 -930 -1042 -1793 0
-7748 -930 -1040 -1795 0
-7748 -930 -1038 -1797 0
-7748 -930 -1037 -1799 0
-7748 -928 -1785 0
-7748 -928 -1050 -1787 0
-7748 -928 -1048 -1789 0
-7748 -928 -1046 -1791 0
-7748 -928 -1044 -1793 0
-7748 -928 -1042 -1795 0
-7748 -928 -1040 -1797 0
-7748 -928 -1038 -1799 0
-7748 -928 -1037 -1801 0
-7748 -926 -1787 0
-7748 -926 -1050 -1789 0
-7748 -926 -1048 -1791 0
-7748 -926 -1046 -1793 0
-7748 -926 -1044 -1795 0
-7748 -926 -1042 -1797 0
-7748 -926 -1040 -1799 0
-7748 -926 -1038 -1801 0
-7748 -926 -1037 -1803 0
-7748 -924 -1789 0
-7748 -924 -1050 -1791 0
-7748 -924 -1048 -1793 0
-7748 -924 -1046 -1795 0
-7748 -924 -1044 -1797 0
-7748 -924 -1042 -1799 0
-7748 -924 -1040 -1801 0
-7748 -924 -1038 -1803 0
-7748 -924 -1037 -1805 0
-7748 -922 -1791 0
-7748 -922 -1050 -1793 0
-7748 -922 -1048 -1795 0
-7748 -922 -1046 -1797 0
-7748 -922 -1044 -1799 0
-7748 -922 -1042 -1801 0
-7748 -922 -1040 -1803 0
-7748 -922 -1038 -1805 0
-7748 -922 -1037 -1807 0
-7748 -920 -1793 0
-7748 -920 -1050 -1795 0
-7748 -920 -1048 -1797 0
-7748 -920 -1046 -1799 0
-7748 -920 -1044 -1801 0
-7748 -920 -1042 -1803 0
-7748 -920 -1040 -1805 0
-7748 -920 -1038 -1807 0
-7748 -920 -1037 -1809 0
-7748 -918 -1795 0
-7748 -918 -1050 -1797 0
-7748 -918 -1048 -1799 0
-7748 -918 -1046 -1801 0
-7748 -918 -1044 -1803 0
-7748 -918 -1042 -1805 0
-7748 -918 -1040 -1807 0
-7748 -918 -1038 -1809 0
-7748 -918 -1037 -1811 0
-7748 -917 -1797 0
-7748 -917 -1050 -1799 0
-7748 -917 -1048 -1801 0
-7748 -917 -1046 -1803 0
-7748 -917 -1044 -1805 0
-7748 -917 -1042 -1807 0
-7748 -917 -1040 -1809 0
-7748 -917 -1038 -1811 0
-7748 -917 -1037 -1813 0
7748 1813 0
7748 1037 1811 0
7748 1038 1809 0
7748 1040 1807 0
7748 1042 1805 0
7748 1044 1803 0
7748 1046 1801 0
7748 1048 1799 0
7748 1050 1797 0
7748 917 1811 0
7748 917 1037 1809 0
7748 917 1038 1807 0
7748 917 1040 1805 0
7748 917 1042 1803 0
7748 917 1044 1801 0
7748 917 1046 1799 0
7748 917 1048 1797 0
7748 917 1050 1795 0
7748 918 1809 0
7748 918 1037 1807 0
7748 918 1038 1805 0
7748 918 1040 1803 0
7748 918 1042 1801 0
7748 918 1044 1799 0
7748 918 1046 1797 0
7748 918 1048 1795 0
7748 918 1050 1793 0
7748 920 1807 0
7748 920 1037 1805 0
7748 920 1038 1803 0
7748 920 1040 1801 0
7748 920 1042 1799 0
7748 920 1044 1797 0
7748 920 1046 1795 0
7748 920 1048 1793 0
7748 920 1050 1791 0
7748 922 1805 0
7748 922 1037 1803 0
7748 922 1038 1801 0
7748 922 1040 1799 0
7748 922 1042 1797 0
7748 922 1044 1795 0
7748 922 1046 1793 0
7748 922 1048 1791 0
7748 922 1050 1789 0
7748 924 1803 0
7748 924 1037 1801 0
7748 924 1038 1799 0
7748 924 1040 1797 0
7748 924 1042 1795 0
7748 924 1044 1793 0
7748 924 1046 1791 0
7748 924 1048 1789 0
7748 924 1050 1787 0
7748 926 1801 0
7748 926 1037 1799 0
7748 926 1038 1797 0
7748 926 1040 1795 0
7748 926 1042 1793 0
7748 926 1044 1791 0
7748 926 1046 1789 0
7748 926 1048 1787 0
7748 926 1050 1785 0
7748 928 1799 0
7748 928 1037 1797 0
7748 928 1038 1795 0
7748 928 1040 1793 0
7748 928 1042 1791 0
7748 928 1044 1789 0
7748 928 1046 1787 0
7748 928 1048 1785 0
7748 928 1050 1784 0
7748 930 1797 0
7748 930 1037 1795 0
7748 930 1038 1793 0
7748 930 1040 1791 0
7748 930 1042 1789 0
7748 930 1044 1787 0
7748 930 1046 1785 0
7748 930 1048 1784 0
7748 930 1050 0
c (((x_00007_00009 + x_00008_00009 + x_00009_00009)<=9)=tv=SATLiteral(7749))
-7749 1213 0
-7749 1067 1211 0
-7749 1068 1209 0
-7749 1070 1207 0
-7749 1072 1205 0
-7749 1074 1203 0
-7749 1076 1202 0
-7749 1078 0
-7749 1080 0
-7749 932 1211 0
-7749 932 1067 1209 0
-7749 932 1068 1207 0
-7749 932 1070 1205 0
-7749 932 1072 1203 0
-7749 932 1074 1202 0
-7749 932 1076 0
-7749 932 1078 0
-7749 932 1080 0
-7749 933 1209 0
-7749 933 1067 1207 0
-7749 933 1068 1205 0
-7749 933 1070 1203 0
-7749 933 1072 1202 0
-7749 933 1074 0
-7749 933 1076 0
-7749 933 1078 0
-7749 933 1080 0
-7749 935 1207 0
-7749 935 1067 1205 0
-7749 935 1068 1203 0
-7749 935 1070 1202 0
-7749 935 1072 0
-7749 935 1074 0
-7749 935 1076 0
-7749 935 1078 0
-7749 935 1080 0
-7749 937 1205 0
-7749 937 1067 1203 0
-7749 937 1068 1202 0
-7749 937 1070 0
-7749 937 1072 0
-7749 937 1074 0
-7749 937 1076 0
-7749 937 1078 0
-7749 937 1080 0
-7749 939 1203 0
-7749 939 1067 1202 0
-7749 939 1068 0
-7749 939 1070 0
-7749 939 1072 0
-7749 939 1074 0
-7749 939 1076 0
-7749 939 1078 0
-7749 939 1080 0
-7749 941 1202 0
-7749 941 1067 0
-7749 941 1068 0
-7749 941 1070 0
-7749 941 1072 0
-7749 941 1074 0
-7749 941 1076 0
-7749 941 1078 0
-7749 941 1080 0
-7749 943 0
-7749 943 1067 0
-7749 943 1068 0
-7749 943 1070 0
-7749 943 1072 0
-7749 943 1074 0
-7749 943 1076 0
-7749 943 1078 0
-7749 943 1080 0
-7749 945 0
-7749 945 1067 0
-7749 945 1068 0
-7749 945 1070 0
-7749 945 1072 0
-7749 945 1074 0
-7749 945 1076 0
-7749 945 1078 0
-7749 945 1080 0
7749 -943 -1067 -1202 0
7749 -941 -1068 -1202 0
7749 -941 -1067 -1203 0
7749 -939 -1070 -1202 0
7749 -939 -1068 -1203 0
7749 -939 -1067 -1205 0
7749 -937 -1072 -1202 0
7749 -937 -1070 -1203 0
7749 -937 -1068 -1205 0
7749 -937 -1067 -1207 0
7749 -935 -1074 -1202 0
7749 -935 -1072 -1203 0
7749 -935 -1070 -1205 0
7749 -935 -1068 -1207 0
7749 -935 -1067 -1209 0
7749 -933 -1076 -1202 0
7749 -933 -1074 -1203 0
7749 -933 -1072 -1205 0
7749 -933 -1070 -1207 0
7749 -933 -1068 -1209 0
7749 -933 -1067 -1211 0
7749 -932 -1078 -1202 0
7749 -932 -1076 -1203 0
7749 -932 -1074 -1205 0
7749 -932 -1072 -1207 0
7749 -932 -1070 -1209 0
7749 -932 -1068 -1211 0
7749 -932 -1067 -1213 0
c ((9<=(x_00007_00009 + x_00008_00009 + x_00009_00009))=tv=SATLiteral(7750))
-7750 -941 -1067 -1202 0
-7750 -939 -1068 -1202 0
-7750 -939 -1067 -1203 0
-7750 -937 -1070 -1202 0
-7750 -937 -1068 -1203 0
-7750 -937 -1067 -1205 0
-7750 -935 -1072 -1202 0
-7750 -935 -1070 -1203 0
-7750 -935 -1068 -1205 0
-7750 -935 -1067 -1207 0
-7750 -933 -1074 -1202 0
-7750 -933 -1072 -1203 0
-7750 -933 -1070 -1205 0
-7750 -933 -1068 -1207 0
-7750 -933 -1067 -1209 0
-7750 -932 -1076 -1202 0
-7750 -932 -1074 -1203 0
-7750 -932 -1072 -1205 0
-7750 -932 -1070 -1207 0
-7750 -932 -1068 -1209 0
-7750 -932 -1067 -1211 0
7750 1211 0
7750 1067 1209 0
7750 1068 1207 0
7750 1070 1205 0
7750 1072 1203 0
7750 1074 1202 0
7750 1076 0
7750 1078 0
7750 1080 0
7750 932 1209 0
7750 932 1067 1207 0
7750 932 1068 1205 0
7750 932 1070 1203 0
7750 932 1072 1202 0
7750 932 1074 0
7750 932 1076 0
7750 932 1078 0
7750 932 1080 0
7750 933 1207 0
7750 933 1067 1205 0
7750 933 1068 1203 0
7750 933 1070 1202 0
7750 933 1072 0
7750 933 1074 0
7750 933 1076 0
7750 933 1078 0
7750 933 1080 0
7750 935 1205 0
7750 935 1067 1203 0
7750 935 1068 1202 0
7750 935 1070 0
7750 935 1072 0
7750 935 1074 0
7750 935 1076 0
7750 935 1078 0
7750 935 1080 0
7750 937 1203 0
7750 937 1067 1202 0
7750 937 1068 0
7750 937 1070 0
7750 937 1072 0
7750 937 1074 0
7750 937 1076 0
7750 937 1078 0
7750 937 1080 0
7750 939 1202 0
7750 939 1067 0
7750 939 1068 0
7750 939 1070 0
7750 939 1072 0
7750 939 1074 0
7750 939 1076 0
7750 939 1078 0
7750 939 1080 0
7750 941 0
7750 941 1067 0
7750 941 1068 0
7750 941 1070 0
7750 941 1072 0
7750 941 1074 0
7750 941 1076 0
7750 941 1078 0
7750 941 1080 0
7750 943 0
7750 943 1067 0
7750 943 1068 0
7750 943 1070 0
7750 943 1072 0
7750 943 1074 0
7750 943 1076 0
7750 943 1078 0
7750 943 1080 0
7750 945 0
7750 945 1067 0
7750 945 1068 0
7750 945 1070 0
7750 945 1072 0
7750 945 1074 0
7750 945 1076 0
7750 945 1078 0
7750 945 1080 0
c (((x_00008_00001 + x_00009_00001 + x_00009_00002)<=9)=tv=SATLiteral(7751))
-7751 1108 0
-7751 1082 1106 0
-7751 1083 1104 0
-7751 1085 1102 0
-7751 1087 1100 0
-7751 1089 1098 0
-7751 1091 1097 0
-7751 1093 0
-7751 1095 0
-7751 947 1106 0
-7751 947 1082 1104 0
-7751 947 1083 1102 0
-7751 947 1085 1100 0
-7751 947 1087 1098 0
-7751 947 1089 1097 0
-7751 947 1091 0
-7751 947 1093 0
-7751 947 1095 0
-7751 948 1104 0
-7751 948 1082 1102 0
-7751 948 1083 1100 0
-7751 948 1085 1098 0
-7751 948 1087 1097 0
-7751 948 1089 0
-7751 948 1091 0
-7751 948 1093 0
-7751 948 1095 0
-7751 950 1102 0
-7751 950 1082 1100 0
-7751 950 1083 1098 0
-7751 950 1085 1097 0
-7751 950 1087 0
-7751 950 1089 0
-7751 950 1091 0
-7751 950 1093 0
-7751 950 1095 0
-7751 952 1100 0
-7751 952 1082 1098 0
-7751 952 1083 1097 0
-7751 952 1085 0
-7751 952 1087 0
-7751 952 1089 0
-7751 952 1091 0
-7751 952 1093 0
-7751 952 1095 0
-7751 954 1098 0
-7751 954 1082 1097 0
-7751 954 1083 0
-7751 954 1085 0
-7751 954 1087 0
-7751 954 1089 0
-7751 954 1091 0
-7751 954 1093 0
-7751 954 1095 0
-7751 956 1097 0
-7751 956 1082 0
-7751 956 1083 0
-7751 956 1085 0
-7751 956 1087 0
-7751 956 1089 0
-7751 956 1091 0
-7751 956 1093 0
-7751 956 1095 0
-7751 958 0
-7751 958 1082 0
-7751 958 1083 0
-7751 958 1085 0
-7751 958 1087 0
-7751 958 1089 0
-7751 958 1091 0
-7751 958 1093 0
-7751 958 1095 0
-7751 960 0
-7751 960 1082 0
-7751 960 1083 0
-7751 960 1085 0
-7751 960 1087 0
-7751 960 1089 0
-7751 960 1091 0
-7751 960 1093 0
-7751 960 1095 0
7751 -958 -1082 -1097 0
7751 -956 -1083 -1097 0
7751 -956 -1082 -1098 0
7751 -954 -1085 -1097 0
7751 -954 -1083 -1098 0
7751 -954 -1082 -1100 0
7751 -952 -1087 -1097 0
7751 -952 -1085 -1098 0
7751 -952 -1083 -1100 0
7751 -952 -1082 -1102 0
7751 -950 -1089 -1097 0
7751 -950 -1087 -1098 0
7751 -950 -1085 -1100 0
7751 -950 -1083 -1102 0
7751 -950 -1082 -1104 0
7751 -948 -1091 -1097 0
7751 -948 -1089 -1098 0
7751 -948 -1087 -1100 0
7751 -948 -1085 -1102 0
7751 -948 -1083 -1104 0
7751 -948 -1082 -1106 0
7751 -947 -1093 -1097 0
7751 -947 -1091 -1098 0
7751 -947 -1089 -1100 0
7751 -947 -1087 -1102 0
7751 -947 -1085 -1104 0
7751 -947 -1083 -1106 0
7751 -947 -1082 -1108 0
c ((9<=(x_00008_00001 + x_00009_00001 + x_00009_00002))=tv=SATLiteral(7752))
-7752 -956 -1082 -1097 0
-7752 -954 -1083 -1097 0
-7752 -954 -1082 -1098 0
-7752 -952 -1085 -1097 0
-7752 -952 -1083 -1098 0
-7752 -952 -1082 -1100 0
-7752 -950 -1087 -1097 0
-7752 -950 -1085 -1098 0
-7752 -950 -1083 -1100 0
-7752 -950 -1082 -1102 0
-7752 -948 -1089 -1097 0
-7752 -948 -1087 -1098 0
-7752 -948 -1085 -1100 0
-7752 -948 -1083 -1102 0
-7752 -948 -1082 -1104 0
-7752 -947 -1091 -1097 0
-7752 -947 -1089 -1098 0
-7752 -947 -1087 -1100 0
-7752 -947 -1085 -1102 0
-7752 -947 -1083 -1104 0
-7752 -947 -1082 -1106 0
7752 1106 0
7752 1082 1104 0
7752 1083 1102 0
7752 1085 1100 0
7752 1087 1098 0
7752 1089 1097 0
7752 1091 0
7752 1093 0
7752 1095 0
7752 947 1104 0
7752 947 1082 1102 0
7752 947 1083 1100 0
7752 947 1085 1098 0
7752 947 1087 1097 0
7752 947 1089 0
7752 947 1091 0
7752 947 1093 0
7752 947 1095 0
7752 948 1102 0
7752 948 1082 1100 0
7752 948 1083 1098 0
7752 948 1085 1097 0
7752 948 1087 0
7752 948 1089 0
7752 948 1091 0
7752 948 1093 0
7752 948 1095 0
7752 950 1100 0
7752 950 1082 1098 0
7752 950 1083 1097 0
7752 950 1085 0
7752 950 1087 0
7752 950 1089 0
7752 950 1091 0
7752 950 1093 0
7752 950 1095 0
7752 952 1098 0
7752 952 1082 1097 0
7752 952 1083 0
7752 952 1085 0
7752 952 1087 0
7752 952 1089 0
7752 952 1091 0
7752 952 1093 0
7752 952 1095 0
7752 954 1097 0
7752 954 1082 0
7752 954 1083 0
7752 954 1085 0
7752 954 1087 0
7752 954 1089 0
7752 954 1091 0
7752 954 1093 0
7752 954 1095 0
7752 956 0
7752 956 1082 0
7752 956 1083 0
7752 956 1085 0
7752 956 1087 0
7752 956 1089 0
7752 956 1091 0
7752 956 1093 0
7752 956 1095 0
7752 958 0
7752 958 1082 0
7752 958 1083 0
7752 958 1085 0
7752 958 1087 0
7752 958 1089 0
7752 958 1091 0
7752 958 1093 0
7752 958 1095 0
7752 960 0
7752 960 1082 0
7752 960 1083 0
7752 960 1085 0
7752 960 1087 0
7752 960 1089 0
7752 960 1091 0
7752 960 1093 0
7752 960 1095 0
c (((x_00008_00004 + x_00009_00004)<=9)=tv=SATLiteral(7753))
-7753 1140 0
-7753 992 1138 0
-7753 993 1136 0
-7753 995 1134 0
-7753 997 1132 0
-7753 999 1130 0
-7753 1001 1128 0
-7753 1003 1127 0
-7753 1005 0
7753 -1005 -1127 0
7753 -1003 -1128 0
7753 -1001 -1130 0
7753 -999 -1132 0
7753 -997 -1134 0
7753 -995 -1136 0
7753 -993 -1138 0
7753 -992 -1140 0
c ((9<=(x_00008_00004 + x_00009_00004))=tv=SATLiteral(7754))
-7754 -1003 -1127 0
-7754 -1001 -1128 0
-7754 -999 -1130 0
-7754 -997 -1132 0
-7754 -995 -1134 0
-7754 -993 -1136 0
-7754 -992 -1138 0
7754 1138 0
7754 992 1136 0
7754 993 1134 0
7754 995 1132 0
7754 997 1130 0
7754 999 1128 0
7754 1001 1127 0
7754 1003 0
7754 1005 0
c (((x_00008_00005 + x_00008_00006)<=16)=tv=SATLiteral(7755))
-7755 1018 1035 0
-7755 1020 1033 0
7755 -1033 0
7755 -1020 -1035 0
7755 -1018 0
7755 -1016 0
7755 -1014 0
7755 -1012 0
7755 -1010 0
7755 -1008 0
7755 -1007 0
c ((16<=(x_00008_00005 + x_00008_00006))=tv=SATLiteral(7756))
-7756 -1031 0
-7756 -1020 -1033 0
-7756 -1018 -1035 0
-7756 -1016 0
-7756 -1014 0
-7756 -1012 0
-7756 -1010 0
-7756 -1008 0
-7756 -1007 0
7756 1016 1035 0
7756 1018 1033 0
7756 1020 1031 0
c (((x_00009_00006 + x_00009_00007 + x_00009_00008)<=22)=tv=SATLiteral(7757))
-7757 1162 1185 1200 0
-7757 1164 1183 1200 0
-7757 1164 1185 1198 0
-7757 1166 1181 1200 0
-7757 1166 1183 1198 0
-7757 1166 1185 1196 0
-7757 1168 1179 1200 0
-7757 1168 1181 1198 0
-7757 1168 1183 1196 0
-7757 1168 1185 1194 0
-7757 1170 1177 1200 0
-7757 1170 1179 1198 0
-7757 1170 1181 1196 0
-7757 1170 1183 1194 0
-7757 1170 1185 1192 0
7757 -1192 0
7757 -1185 -1194 0
7757 -1183 -1196 0
7757 -1181 -1198 0
7757 -1179 -1200 0
7757 -1177 0
7757 -1175 0
7757 -1173 0
7757 -1172 0
7757 -1170 -1194 0
7757 -1170 -1185 -1196 0
7757 -1170 -1183 -1198 0
7757 -1170 -1181 -1200 0
7757 -1170 -1179 0
7757 -1170 -1177 0
7757 -1170 -1175 0
7757 -1170 -1173 0
7757 -1170 -1172 0
7757 -1168 -1196 0
7757 -1168 -1185 -1198 0
7757 -1168 -1183 -1200 0
7757 -1168 -1181 0
7757 -1168 -1179 0
7757 -1168 -1177 0
7757 -1168 -1175 0
7757 -1168 -1173 0
7757 -1168 -1172 0
7757 -1166 -1198 0
7757 -1166 -1185 -1200 0
7757 -1166 -1183 0
7757 -1166 -1181 0
7757 -1166 -1179 0
7757 -1166 -1177 0
7757 -1166 -1175 0
7757 -1166 -1173 0
7757 -1166 -1172 0
7757 -1164 -1200 0
7757 -1164 -1185 0
7757 -1164 -1183 0
7757 -1164 -1181 0
7757 -1164 -1179 0
7757 -1164 -1177 0
7757 -1164 -1175 0
7757 -1164 -1173 0
7757 -1164 -1172 0
7757 -1162 0
7757 -1162 -1185 0
7757 -1162 -1183 0
7757 -1162 -1181 0
7757 -1162 -1179 0
7757 -1162 -1177 0
7757 -1162 -1175 0
7757 -1162 -1173 0
7757 -1162 -1172 0
7757 -1160 0
7757 -1160 -1185 0
7757 -1160 -1183 0
7757 -1160 -1181 0
7757 -1160 -1179 0
7757 -1160 -1177 0
7757 -1160 -1175 0
7757 -1160 -1173 0
7757 -1160 -1172 0
7757 -1158 0
7757 -1158 -1185 0
7757 -1158 -1183 0
7757 -1158 -1181 0
7757 -1158 -1179 0
7757 -1158 -1177 0
7757 -1158 -1175 0
7757 -1158 -1173 0
7757 -1158 -1172 0
7757 -1157 0
7757 -1157 -1185 0
7757 -1157 -1183 0
7757 -1157 -1181 0
7757 -1157 -1179 0
7757 -1157 -1177 0
7757 -1157 -1175 0
7757 -1157 -1173 0
7757 -1157 -1172 0
c ((22<=(x_00009_00006 + x_00009_00007 + x_00009_00008))=tv=SATLiteral(7758))
-7758 -1190 0
-7758 -1185 -1192 0
-7758 -1183 -1194 0
-7758 -1181 -1196 0
-7758 -1179 -1198 0
-7758 -1177 -1200 0
-7758 -1175 0
-7758 -1173 0
-7758 -1172 0
-7758 -1170 -1192 0
-7758 -1170 -1185 -1194 0
-7758 -1170 -1183 -1196 0
-7758 -1170 -1181 -1198 0
-7758 -1170 -1179 -1200 0
-7758 -1170 -1177 0
-7758 -1170 -1175 0
-7758 -1170 -1173 0
-7758 -1170 -1172 0
-7758 -1168 -1194 0
-7758 -1168 -1185 -1196 0
-7758 -1168 -1183 -1198 0
-7758 -1168 -1181 -1200 0
-7758 -1168 -1179 0
-7758 -1168 -1177 0
-7758 -1168 -1175 0
-7758 -1168 -1173 0
-7758 -1168 -1172 0
-7758 -1166 -1196 0
-7758 -1166 -1185 -1198 0
-7758 -1166 -1183 -1200 0
-7758 -1166 -1181 0
-7758 -1166 -1179 0
-7758 -1166 -1177 0
-7758 -1166 -1175 0
-7758 -1166 -1173 0
-7758 -1166 -1172 0
-7758 -1164 -1198 0
-7758 -1164 -1185 -1200 0
-7758 -1164 -1183 0
-7758 -1164 -1181 0
-7758 -1164 -1179 0
-7758 -1164 -1177 0
-7758 -1164 -1175 0
-7758 -1164 -1173 0
-7758 -1164 -1172 0
-7758 -1162 -1200 0
-7758 -1162 -1185 0
-7758 -1162 -1183 0
-7758 -1162 -1181 0
-7758 -1162 -1179 0
-7758 -1162 -1177 0
-7758 -1162 -1175 0
-7758 -1162 -1173 0
-7758 -1162 -1172 0
-7758 -1160 0
-7758 -1160 -1185 0
-7758 -1160 -1183 0
-7758 -1160 -1181 0
-7758 -1160 -1179 0
-7758 -1160 -1177 0
-7758 -1160 -1175 0
-7758 -1160 -1173 0
-7758 -1160 -1172 0
-7758 -1158 0
-7758 -1158 -1185 0
-7758 -1158 -1183 0
-7758 -1158 -1181 0
-7758 -1158 -1179 0
-7758 -1158 -1177 0
-7758 -1158 -1175 0
-7758 -1158 -1173 0
-7758 -1158 -1172 0
-7758 -1157 0
-7758 -1157 -1185 0
-7758 -1157 -1183 0
-7758 -1157 -1181 0
-7758 -1157 -1179 0
-7758 -1157 -1177 0
-7758 -1157 -1175 0
-7758 -1157 -1173 0
-7758 -1157 -1172 0
7758 1160 1185 1200 0
7758 1162 1183 1200 0
7758 1162 1185 1198 0
7758 1164 1181 1200 0
7758 1164 1183 1198 0
7758 1164 1185 1196 0
7758 1166 1179 1200 0
7758 1166 1181 1198 0
7758 1166 1183 1196 0
7758 1166 1185 1194 0
7758 1168 1177 1200 0
7758 1168 1179 1198 0
7758 1168 1181 1196 0
7758 1168 1183 1194 0
7758 1168 1185 1192 0
7758 1170 1175 1200 0
7758 1170 1177 1198 0
7758 1170 1179 1196 0
7758 1170 1181 1194 0
7758 1170 1183 1192 0
7758 1170 1185 1190 0
c (((aux448 + aux451 + aux452)<=1)=tv=SATLiteral(7759))
-7759 1833 0
-7759 1827 1832 0
-7759 1828 0
-7759 1830 0
-7759 1818 1832 0
-7759 1818 1827 0
-7759 1818 1828 0
-7759 1818 1830 0
-7759 1819 0
-7759 1819 1827 0
-7759 1819 1828 0
-7759 1819 1830 0
7759 -1819 -1827 -1832 0
7759 -1818 -1828 -1832 0
7759 -1818 -1827 -1833 0
c ((1<=(aux448 + aux451 + aux452))=tv=SATLiteral(7760))
-7760 -1818 -1827 -1832 0
7760 1832 0
7760 1827 0
7760 1828 0
7760 1830 0
7760 1818 0
7760 1818 1827 0
7760 1818 1828 0
7760 1818 1830 0
7760 1819 0
7760 1819 1827 0
7760 1819 1828 0
7760 1819 1830 0
c (((aux454 + aux457 + aux458)<=1)=tv=SATLiteral(7761))
-7761 1857 0
-7761 1851 1856 0
-7761 1852 0
-7761 1854 0
-7761 1842 1856 0
-7761 1842 1851 0
-7761 1842 1852 0
-7761 1842 1854 0
-7761 1843 0
-7761 1843 1851 0
-7761 1843 1852 0
-7761 1843 1854 0
7761 -1843 -1851 -1856 0
7761 -1842 -1852 -1856 0
7761 -1842 -1851 -1857 0
c ((1<=(aux454 + aux457 + aux458))=tv=SATLiteral(7762))
-7762 -1842 -1851 -1856 0
7762 1856 0
7762 1851 0
7762 1852 0
7762 1854 0
7762 1842 0
7762 1842 1851 0
7762 1842 1852 0
7762 1842 1854 0
7762 1843 0
7762 1843 1851 0
7762 1843 1852 0
7762 1843 1854 0
c (((aux460 + aux463 + aux464)<=1)=tv=SATLiteral(7763))
-7763 1881 0
-7763 1875 1880 0
-7763 1876 0
-7763 1878 0
-7763 1866 1880 0
-7763 1866 1875 0
-7763 1866 1876 0
-7763 1866 1878 0
-7763 1867 0
-7763 1867 1875 0
-7763 1867 1876 0
-7763 1867 1878 0
7763 -1867 -1875 -1880 0
7763 -1866 -1876 -1880 0
7763 -1866 -1875 -1881 0
c ((1<=(aux460 + aux463 + aux464))=tv=SATLiteral(7764))
-7764 -1866 -1875 -1880 0
7764 1880 0
7764 1875 0
7764 1876 0
7764 1878 0
7764 1866 0
7764 1866 1875 0
7764 1866 1876 0
7764 1866 1878 0
7764 1867 0
7764 1867 1875 0
7764 1867 1876 0
7764 1867 1878 0
c (((aux466 + aux469 + aux470)<=1)=tv=SATLiteral(7765))
-7765 1905 0
-7765 1899 1904 0
-7765 1900 0
-7765 1902 0
-7765 1890 1904 0
-7765 1890 1899 0
-7765 1890 1900 0
-7765 1890 1902 0
-7765 1891 0
-7765 1891 1899 0
-7765 1891 1900 0
-7765 1891 1902 0
7765 -1891 -1899 -1904 0
7765 -1890 -1900 -1904 0
7765 -1890 -1899 -1905 0
c ((1<=(aux466 + aux469 + aux470))=tv=SATLiteral(7766))
-7766 -1890 -1899 -1904 0
7766 1904 0
7766 1899 0
7766 1900 0
7766 1902 0
7766 1890 0
7766 1890 1899 0
7766 1890 1900 0
7766 1890 1902 0
7766 1891 0
7766 1891 1899 0
7766 1891 1900 0
7766 1891 1902 0
c (((aux472 + aux475 + aux476)<=1)=tv=SATLiteral(7767))
-7767 1929 0
-7767 1923 1928 0
-7767 1924 0
-7767 1926 0
-7767 1914 1928 0
-7767 1914 1923 0
-7767 1914 1924 0
-7767 1914 1926 0
-7767 1915 0
-7767 1915 1923 0
-7767 1915 1924 0
-7767 1915 1926 0
7767 -1915 -1923 -1928 0
7767 -1914 -1924 -1928 0
7767 -1914 -1923 -1929 0
c ((1<=(aux472 + aux475 + aux476))=tv=SATLiteral(7768))
-7768 -1914 -1923 -1928 0
7768 1928 0
7768 1923 0
7768 1924 0
7768 1926 0
7768 1914 0
7768 1914 1923 0
7768 1914 1924 0
7768 1914 1926 0
7768 1915 0
7768 1915 1923 0
7768 1915 1924 0
7768 1915 1926 0
c (((aux478 + aux481 + aux482)<=1)=tv=SATLiteral(7769))
-7769 1953 0
-7769 1947 1952 0
-7769 1948 0
-7769 1950 0
-7769 1938 1952 0
-7769 1938 1947 0
-7769 1938 1948 0
-7769 1938 1950 0
-7769 1939 0
-7769 1939 1947 0
-7769 1939 1948 0
-7769 1939 1950 0
7769 -1939 -1947 -1952 0
7769 -1938 -1948 -1952 0
7769 -1938 -1947 -1953 0
c ((1<=(aux478 + aux481 + aux482))=tv=SATLiteral(7770))
-7770 -1938 -1947 -1952 0
7770 1952 0
7770 1947 0
7770 1948 0
7770 1950 0
7770 1938 0
7770 1938 1947 0
7770 1938 1948 0
7770 1938 1950 0
7770 1939 0
7770 1939 1947 0
7770 1939 1948 0
7770 1939 1950 0
c (((aux484 + aux487 + aux488)<=1)=tv=SATLiteral(7771))
-7771 1977 0
-7771 1971 1976 0
-7771 1972 0
-7771 1974 0
-7771 1962 1976 0
-7771 1962 1971 0
-7771 1962 1972 0
-7771 1962 1974 0
-7771 1963 0
-7771 1963 1971 0
-7771 1963 1972 0
-7771 1963 1974 0
7771 -1963 -1971 -1976 0
7771 -1962 -1972 -1976 0
7771 -1962 -1971 -1977 0
c ((1<=(aux484 + aux487 + aux488))=tv=SATLiteral(7772))
-7772 -1962 -1971 -1976 0
7772 1976 0
7772 1971 0
7772 1972 0
7772 1974 0
7772 1962 0
7772 1962 1971 0
7772 1962 1972 0
7772 1962 1974 0
7772 1963 0
7772 1963 1971 0
7772 1963 1972 0
7772 1963 1974 0
c (((aux490 + aux493 + aux494)<=1)=tv=SATLiteral(7773))
-7773 2001 0
-7773 1995 2000 0
-7773 1996 0
-7773 1998 0
-7773 1986 2000 0
-7773 1986 1995 0
-7773 1986 1996 0
-7773 1986 1998 0
-7773 1987 0
-7773 1987 1995 0
-7773 1987 1996 0
-7773 1987 1998 0
7773 -1987 -1995 -2000 0
7773 -1986 -1996 -2000 0
7773 -1986 -1995 -2001 0
c ((1<=(aux490 + aux493 + aux494))=tv=SATLiteral(7774))
-7774 -1986 -1995 -2000 0
7774 2000 0
7774 1995 0
7774 1996 0
7774 1998 0
7774 1986 0
7774 1986 1995 0
7774 1986 1996 0
7774 1986 1998 0
7774 1987 0
7774 1987 1995 0
7774 1987 1996 0
7774 1987 1998 0
c (((aux496 + aux499 + aux500)<=1)=tv=SATLiteral(7775))
-7775 2025 0
-7775 2019 2024 0
-7775 2020 0
-7775 2022 0
-7775 2010 2024 0
-7775 2010 2019 0
-7775 2010 2020 0
-7775 2010 2022 0
-7775 2011 0
-7775 2011 2019 0
-7775 2011 2020 0
-7775 2011 2022 0
7775 -2011 -2019 -2024 0
7775 -2010 -2020 -2024 0
7775 -2010 -2019 -2025 0
c ((1<=(aux496 + aux499 + aux500))=tv=SATLiteral(7776))
-7776 -2010 -2019 -2024 0
7776 2024 0
7776 2019 0
7776 2020 0
7776 2022 0
7776 2010 0
7776 2010 2019 0
7776 2010 2020 0
7776 2010 2022 0
7776 2011 0
7776 2011 2019 0
7776 2011 2020 0
7776 2011 2022 0
c (((aux502 + aux505 + aux506)<=1)=tv=SATLiteral(7777))
-7777 2049 0
-7777 2043 2048 0
-7777 2044 0
-7777 2046 0
-7777 2034 2048 0
-7777 2034 2043 0
-7777 2034 2044 0
-7777 2034 2046 0
-7777 2035 0
-7777 2035 2043 0
-7777 2035 2044 0
-7777 2035 2046 0
7777 -2035 -2043 -2048 0
7777 -2034 -2044 -2048 0
7777 -2034 -2043 -2049 0
c ((1<=(aux502 + aux505 + aux506))=tv=SATLiteral(7778))
-7778 -2034 -2043 -2048 0
7778 2048 0
7778 2043 0
7778 2044 0
7778 2046 0
7778 2034 0
7778 2034 2043 0
7778 2034 2044 0
7778 2034 2046 0
7778 2035 0
7778 2035 2043 0
7778 2035 2044 0
7778 2035 2046 0
c (((aux508 + aux511 + aux512)<=1)=tv=SATLiteral(7779))
-7779 2073 0
-7779 2067 2072 0
-7779 2068 0
-7779 2070 0
-7779 2058 2072 0
-7779 2058 2067 0
-7779 2058 2068 0
-7779 2058 2070 0
-7779 2059 0
-7779 2059 2067 0
-7779 2059 2068 0
-7779 2059 2070 0
7779 -2059 -2067 -2072 0
7779 -2058 -2068 -2072 0
7779 -2058 -2067 -2073 0
c ((1<=(aux508 + aux511 + aux512))=tv=SATLiteral(7780))
-7780 -2058 -2067 -2072 0
7780 2072 0
7780 2067 0
7780 2068 0
7780 2070 0
7780 2058 0
7780 2058 2067 0
7780 2058 2068 0
7780 2058 2070 0
7780 2059 0
7780 2059 2067 0
7780 2059 2068 0
7780 2059 2070 0
c (((aux514 + aux517 + aux518)<=1)=tv=SATLiteral(7781))
-7781 2097 0
-7781 2091 2096 0
-7781 2092 0
-7781 2094 0
-7781 2082 2096 0
-7781 2082 2091 0
-7781 2082 2092 0
-7781 2082 2094 0
-7781 2083 0
-7781 2083 2091 0
-7781 2083 2092 0
-7781 2083 2094 0
7781 -2083 -2091 -2096 0
7781 -2082 -2092 -2096 0
7781 -2082 -2091 -2097 0
c ((1<=(aux514 + aux517 + aux518))=tv=SATLiteral(7782))
-7782 -2082 -2091 -2096 0
7782 2096 0
7782 2091 0
7782 2092 0
7782 2094 0
7782 2082 0
7782 2082 2091 0
7782 2082 2092 0
7782 2082 2094 0
7782 2083 0
7782 2083 2091 0
7782 2083 2092 0
7782 2083 2094 0
c (((aux520 + aux523 + aux524)<=1)=tv=SATLiteral(7783))
-7783 2121 0
-7783 2115 2120 0
-7783 2116 0
-7783 2118 0
-7783 2106 2120 0
-7783 2106 2115 0
-7783 2106 2116 0
-7783 2106 2118 0
-7783 2107 0
-7783 2107 2115 0
-7783 2107 2116 0
-7783 2107 2118 0
7783 -2107 -2115 -2120 0
7783 -2106 -2116 -2120 0
7783 -2106 -2115 -2121 0
c ((1<=(aux520 + aux523 + aux524))=tv=SATLiteral(7784))
-7784 -2106 -2115 -2120 0
7784 2120 0
7784 2115 0
7784 2116 0
7784 2118 0
7784 2106 0
7784 2106 2115 0
7784 2106 2116 0
7784 2106 2118 0
7784 2107 0
7784 2107 2115 0
7784 2107 2116 0
7784 2107 2118 0
c (((aux526 + aux529 + aux530)<=1)=tv=SATLiteral(7785))
-7785 2145 0
-7785 2139 2144 0
-7785 2140 0
-7785 2142 0
-7785 2130 2144 0
-7785 2130 2139 0
-7785 2130 2140 0
-7785 2130 2142 0
-7785 2131 0
-7785 2131 2139 0
-7785 2131 2140 0
-7785 2131 2142 0
7785 -2131 -2139 -2144 0
7785 -2130 -2140 -2144 0
7785 -2130 -2139 -2145 0
c ((1<=(aux526 + aux529 + aux530))=tv=SATLiteral(7786))
-7786 -2130 -2139 -2144 0
7786 2144 0
7786 2139 0
7786 2140 0
7786 2142 0
7786 2130 0
7786 2130 2139 0
7786 2130 2140 0
7786 2130 2142 0
7786 2131 0
7786 2131 2139 0
7786 2131 2140 0
7786 2131 2142 0
c (((aux532 + aux535 + aux536)<=1)=tv=SATLiteral(7787))
-7787 2169 0
-7787 2163 2168 0
-7787 2164 0
-7787 2166 0
-7787 2154 2168 0
-7787 2154 2163 0
-7787 2154 2164 0
-7787 2154 2166 0
-7787 2155 0
-7787 2155 2163 0
-7787 2155 2164 0
-7787 2155 2166 0
7787 -2155 -2163 -2168 0
7787 -2154 -2164 -2168 0
7787 -2154 -2163 -2169 0
c ((1<=(aux532 + aux535 + aux536))=tv=SATLiteral(7788))
-7788 -2154 -2163 -2168 0
7788 2168 0
7788 2163 0
7788 2164 0
7788 2166 0
7788 2154 0
7788 2154 2163 0
7788 2154 2164 0
7788 2154 2166 0
7788 2155 0
7788 2155 2163 0
7788 2155 2164 0
7788 2155 2166 0
c (((aux538 + aux541 + aux542)<=1)=tv=SATLiteral(7789))
-7789 2193 0
-7789 2187 2192 0
-7789 2188 0
-7789 2190 0
-7789 2178 2192 0
-7789 2178 2187 0
-7789 2178 2188 0
-7789 2178 2190 0
-7789 2179 0
-7789 2179 2187 0
-7789 2179 2188 0
-7789 2179 2190 0
7789 -2179 -2187 -2192 0
7789 -2178 -2188 -2192 0
7789 -2178 -2187 -2193 0
c ((1<=(aux538 + aux541 + aux542))=tv=SATLiteral(7790))
-7790 -2178 -2187 -2192 0
7790 2192 0
7790 2187 0
7790 2188 0
7790 2190 0
7790 2178 0
7790 2178 2187 0
7790 2178 2188 0
7790 2178 2190 0
7790 2179 0
7790 2179 2187 0
7790 2179 2188 0
7790 2179 2190 0
c (((aux544 + aux547 + aux548)<=1)=tv=SATLiteral(7791))
-7791 2217 0
-7791 2211 2216 0
-7791 2212 0
-7791 2214 0
-7791 2202 2216 0
-7791 2202 2211 0
-7791 2202 2212 0
-7791 2202 2214 0
-7791 2203 0
-7791 2203 2211 0
-7791 2203 2212 0
-7791 2203 2214 0
7791 -2203 -2211 -2216 0
7791 -2202 -2212 -2216 0
7791 -2202 -2211 -2217 0
c ((1<=(aux544 + aux547 + aux548))=tv=SATLiteral(7792))
-7792 -2202 -2211 -2216 0
7792 2216 0
7792 2211 0
7792 2212 0
7792 2214 0
7792 2202 0
7792 2202 2211 0
7792 2202 2212 0
7792 2202 2214 0
7792 2203 0
7792 2203 2211 0
7792 2203 2212 0
7792 2203 2214 0
c (((aux550 + aux553 + aux554)<=1)=tv=SATLiteral(7793))
-7793 2241 0
-7793 2235 2240 0
-7793 2236 0
-7793 2238 0
-7793 2226 2240 0
-7793 2226 2235 0
-7793 2226 2236 0
-7793 2226 2238 0
-7793 2227 0
-7793 2227 2235 0
-7793 2227 2236 0
-7793 2227 2238 0
7793 -2227 -2235 -2240 0
7793 -2226 -2236 -2240 0
7793 -2226 -2235 -2241 0
c ((1<=(aux550 + aux553 + aux554))=tv=SATLiteral(7794))
-7794 -2226 -2235 -2240 0
7794 2240 0
7794 2235 0
7794 2236 0
7794 2238 0
7794 2226 0
7794 2226 2235 0
7794 2226 2236 0
7794 2226 2238 0
7794 2227 0
7794 2227 2235 0
7794 2227 2236 0
7794 2227 2238 0
c (((aux556 + aux559 + aux560)<=1)=tv=SATLiteral(7795))
-7795 2265 0
-7795 2259 2264 0
-7795 2260 0
-7795 2262 0
-7795 2250 2264 0
-7795 2250 2259 0
-7795 2250 2260 0
-7795 2250 2262 0
-7795 2251 0
-7795 2251 2259 0
-7795 2251 2260 0
-7795 2251 2262 0
7795 -2251 -2259 -2264 0
7795 -2250 -2260 -2264 0
7795 -2250 -2259 -2265 0
c ((1<=(aux556 + aux559 + aux560))=tv=SATLiteral(7796))
-7796 -2250 -2259 -2264 0
7796 2264 0
7796 2259 0
7796 2260 0
7796 2262 0
7796 2250 0
7796 2250 2259 0
7796 2250 2260 0
7796 2250 2262 0
7796 2251 0
7796 2251 2259 0
7796 2251 2260 0
7796 2251 2262 0
c (((aux562 + aux565 + aux566)<=1)=tv=SATLiteral(7797))
-7797 2289 0
-7797 2283 2288 0
-7797 2284 0
-7797 2286 0
-7797 2274 2288 0
-7797 2274 2283 0
-7797 2274 2284 0
-7797 2274 2286 0
-7797 2275 0
-7797 2275 2283 0
-7797 2275 2284 0
-7797 2275 2286 0
7797 -2275 -2283 -2288 0
7797 -2274 -2284 -2288 0
7797 -2274 -2283 -2289 0
c ((1<=(aux562 + aux565 + aux566))=tv=SATLiteral(7798))
-7798 -2274 -2283 -2288 0
7798 2288 0
7798 2283 0
7798 2284 0
7798 2286 0
7798 2274 0
7798 2274 2283 0
7798 2274 2284 0
7798 2274 2286 0
7798 2275 0
7798 2275 2283 0
7798 2275 2284 0
7798 2275 2286 0
c (((aux568 + aux571 + aux572)<=1)=tv=SATLiteral(7799))
-7799 2313 0
-7799 2307 2312 0
-7799 2308 0
-7799 2310 0
-7799 2298 2312 0
-7799 2298 2307 0
-7799 2298 2308 0
-7799 2298 2310 0
-7799 2299 0
-7799 2299 2307 0
-7799 2299 2308 0
-7799 2299 2310 0
7799 -2299 -2307 -2312 0
7799 -2298 -2308 -2312 0
7799 -2298 -2307 -2313 0
c ((1<=(aux568 + aux571 + aux572))=tv=SATLiteral(7800))
-7800 -2298 -2307 -2312 0
7800 2312 0
7800 2307 0
7800 2308 0
7800 2310 0
7800 2298 0
7800 2298 2307 0
7800 2298 2308 0
7800 2298 2310 0
7800 2299 0
7800 2299 2307 0
7800 2299 2308 0
7800 2299 2310 0
c (((aux574 + aux577 + aux578)<=1)=tv=SATLiteral(7801))
-7801 2337 0
-7801 2331 2336 0
-7801 2332 0
-7801 2334 0
-7801 2322 2336 0
-7801 2322 2331 0
-7801 2322 2332 0
-7801 2322 2334 0
-7801 2323 0
-7801 2323 2331 0
-7801 2323 2332 0
-7801 2323 2334 0
7801 -2323 -2331 -2336 0
7801 -2322 -2332 -2336 0
7801 -2322 -2331 -2337 0
c ((1<=(aux574 + aux577 + aux578))=tv=SATLiteral(7802))
-7802 -2322 -2331 -2336 0
7802 2336 0
7802 2331 0
7802 2332 0
7802 2334 0
7802 2322 0
7802 2322 2331 0
7802 2322 2332 0
7802 2322 2334 0
7802 2323 0
7802 2323 2331 0
7802 2323 2332 0
7802 2323 2334 0
c (((aux580 + aux583 + aux584)<=1)=tv=SATLiteral(7803))
-7803 2361 0
-7803 2355 2360 0
-7803 2356 0
-7803 2358 0
-7803 2346 2360 0
-7803 2346 2355 0
-7803 2346 2356 0
-7803 2346 2358 0
-7803 2347 0
-7803 2347 2355 0
-7803 2347 2356 0
-7803 2347 2358 0
7803 -2347 -2355 -2360 0
7803 -2346 -2356 -2360 0
7803 -2346 -2355 -2361 0
c ((1<=(aux580 + aux583 + aux584))=tv=SATLiteral(7804))
-7804 -2346 -2355 -2360 0
7804 2360 0
7804 2355 0
7804 2356 0
7804 2358 0
7804 2346 0
7804 2346 2355 0
7804 2346 2356 0
7804 2346 2358 0
7804 2347 0
7804 2347 2355 0
7804 2347 2356 0
7804 2347 2358 0
c (((aux586 + aux589 + aux590)<=1)=tv=SATLiteral(7805))
-7805 2385 0
-7805 2379 2384 0
-7805 2380 0
-7805 2382 0
-7805 2370 2384 0
-7805 2370 2379 0
-7805 2370 2380 0
-7805 2370 2382 0
-7805 2371 0
-7805 2371 2379 0
-7805 2371 2380 0
-7805 2371 2382 0
7805 -2371 -2379 -2384 0
7805 -2370 -2380 -2384 0
7805 -2370 -2379 -2385 0
c ((1<=(aux586 + aux589 + aux590))=tv=SATLiteral(7806))
-7806 -2370 -2379 -2384 0
7806 2384 0
7806 2379 0
7806 2380 0
7806 2382 0
7806 2370 0
7806 2370 2379 0
7806 2370 2380 0
7806 2370 2382 0
7806 2371 0
7806 2371 2379 0
7806 2371 2380 0
7806 2371 2382 0
c (((aux592 + aux595 + aux596)<=1)=tv=SATLiteral(7807))
-7807 2409 0
-7807 2403 2408 0
-7807 2404 0
-7807 2406 0
-7807 2394 2408 0
-7807 2394 2403 0
-7807 2394 2404 0
-7807 2394 2406 0
-7807 2395 0
-7807 2395 2403 0
-7807 2395 2404 0
-7807 2395 2406 0
7807 -2395 -2403 -2408 0
7807 -2394 -2404 -2408 0
7807 -2394 -2403 -2409 0
c ((1<=(aux592 + aux595 + aux596))=tv=SATLiteral(7808))
-7808 -2394 -2403 -2408 0
7808 2408 0
7808 2403 0
7808 2404 0
7808 2406 0
7808 2394 0
7808 2394 2403 0
7808 2394 2404 0
7808 2394 2406 0
7808 2395 0
7808 2395 2403 0
7808 2395 2404 0
7808 2395 2406 0
c (((aux598 + aux601 + aux602)<=1)=tv=SATLiteral(7809))
-7809 2433 0
-7809 2427 2432 0
-7809 2428 0
-7809 2430 0
-7809 2418 2432 0
-7809 2418 2427 0
-7809 2418 2428 0
-7809 2418 2430 0
-7809 2419 0
-7809 2419 2427 0
-7809 2419 2428 0
-7809 2419 2430 0
7809 -2419 -2427 -2432 0
7809 -2418 -2428 -2432 0
7809 -2418 -2427 -2433 0
c ((1<=(aux598 + aux601 + aux602))=tv=SATLiteral(7810))
-7810 -2418 -2427 -2432 0
7810 2432 0
7810 2427 0
7810 2428 0
7810 2430 0
7810 2418 0
7810 2418 2427 0
7810 2418 2428 0
7810 2418 2430 0
7810 2419 0
7810 2419 2427 0
7810 2419 2428 0
7810 2419 2430 0
c (((aux604 + aux607 + aux608)<=1)=tv=SATLiteral(7811))
-7811 2457 0
-7811 2451 2456 0
-7811 2452 0
-7811 2454 0
-7811 2442 2456 0
-7811 2442 2451 0
-7811 2442 2452 0
-7811 2442 2454 0
-7811 2443 0
-7811 2443 2451 0
-7811 2443 2452 0
-7811 2443 2454 0
7811 -2443 -2451 -2456 0
7811 -2442 -2452 -2456 0
7811 -2442 -2451 -2457 0
c ((1<=(aux604 + aux607 + aux608))=tv=SATLiteral(7812))
-7812 -2442 -2451 -2456 0
7812 2456 0
7812 2451 0
7812 2452 0
7812 2454 0
7812 2442 0
7812 2442 2451 0
7812 2442 2452 0
7812 2442 2454 0
7812 2443 0
7812 2443 2451 0
7812 2443 2452 0
7812 2443 2454 0
c (((aux610 + aux613 + aux614)<=1)=tv=SATLiteral(7813))
-7813 2481 0
-7813 2475 2480 0
-7813 2476 0
-7813 2478 0
-7813 2466 2480 0
-7813 2466 2475 0
-7813 2466 2476 0
-7813 2466 2478 0
-7813 2467 0
-7813 2467 2475 0
-7813 2467 2476 0
-7813 2467 2478 0
7813 -2467 -2475 -2480 0
7813 -2466 -2476 -2480 0
7813 -2466 -2475 -2481 0
c ((1<=(aux610 + aux613 + aux614))=tv=SATLiteral(7814))
-7814 -2466 -2475 -2480 0
7814 2480 0
7814 2475 0
7814 2476 0
7814 2478 0
7814 2466 0
7814 2466 2475 0
7814 2466 2476 0
7814 2466 2478 0
7814 2467 0
7814 2467 2475 0
7814 2467 2476 0
7814 2467 2478 0
c (((aux616 + aux619 + aux620)<=1)=tv=SATLiteral(7815))
-7815 2505 0
-7815 2499 2504 0
-7815 2500 0
-7815 2502 0
-7815 2490 2504 0
-7815 2490 2499 0
-7815 2490 2500 0
-7815 2490 2502 0
-7815 2491 0
-7815 2491 2499 0
-7815 2491 2500 0
-7815 2491 2502 0
7815 -2491 -2499 -2504 0
7815 -2490 -2500 -2504 0
7815 -2490 -2499 -2505 0
c ((1<=(aux616 + aux619 + aux620))=tv=SATLiteral(7816))
-7816 -2490 -2499 -2504 0
7816 2504 0
7816 2499 0
7816 2500 0
7816 2502 0
7816 2490 0
7816 2490 2499 0
7816 2490 2500 0
7816 2490 2502 0
7816 2491 0
7816 2491 2499 0
7816 2491 2500 0
7816 2491 2502 0
c (((aux622 + aux625 + aux626)<=1)=tv=SATLiteral(7817))
-7817 2529 0
-7817 2523 2528 0
-7817 2524 0
-7817 2526 0
-7817 2514 2528 0
-7817 2514 2523 0
-7817 2514 2524 0
-7817 2514 2526 0
-7817 2515 0
-7817 2515 2523 0
-7817 2515 2524 0
-7817 2515 2526 0
7817 -2515 -2523 -2528 0
7817 -2514 -2524 -2528 0
7817 -2514 -2523 -2529 0
c ((1<=(aux622 + aux625 + aux626))=tv=SATLiteral(7818))
-7818 -2514 -2523 -2528 0
7818 2528 0
7818 2523 0
7818 2524 0
7818 2526 0
7818 2514 0
7818 2514 2523 0
7818 2514 2524 0
7818 2514 2526 0
7818 2515 0
7818 2515 2523 0
7818 2515 2524 0
7818 2515 2526 0
c (((aux628 + aux631 + aux632)<=1)=tv=SATLiteral(7819))
-7819 2553 0
-7819 2547 2552 0
-7819 2548 0
-7819 2550 0
-7819 2538 2552 0
-7819 2538 2547 0
-7819 2538 2548 0
-7819 2538 2550 0
-7819 2539 0
-7819 2539 2547 0
-7819 2539 2548 0
-7819 2539 2550 0
7819 -2539 -2547 -2552 0
7819 -2538 -2548 -2552 0
7819 -2538 -2547 -2553 0
c ((1<=(aux628 + aux631 + aux632))=tv=SATLiteral(7820))
-7820 -2538 -2547 -2552 0
7820 2552 0
7820 2547 0
7820 2548 0
7820 2550 0
7820 2538 0
7820 2538 2547 0
7820 2538 2548 0
7820 2538 2550 0
7820 2539 0
7820 2539 2547 0
7820 2539 2548 0
7820 2539 2550 0
c (((aux634 + aux637 + aux638)<=1)=tv=SATLiteral(7821))
-7821 2577 0
-7821 2571 2576 0
-7821 2572 0
-7821 2574 0
-7821 2562 2576 0
-7821 2562 2571 0
-7821 2562 2572 0
-7821 2562 2574 0
-7821 2563 0
-7821 2563 2571 0
-7821 2563 2572 0
-7821 2563 2574 0
7821 -2563 -2571 -2576 0
7821 -2562 -2572 -2576 0
7821 -2562 -2571 -2577 0
c ((1<=(aux634 + aux637 + aux638))=tv=SATLiteral(7822))
-7822 -2562 -2571 -2576 0
7822 2576 0
7822 2571 0
7822 2572 0
7822 2574 0
7822 2562 0
7822 2562 2571 0
7822 2562 2572 0
7822 2562 2574 0
7822 2563 0
7822 2563 2571 0
7822 2563 2572 0
7822 2563 2574 0
c (((aux640 + aux643 + aux644)<=1)=tv=SATLiteral(7823))
-7823 2601 0
-7823 2595 2600 0
-7823 2596 0
-7823 2598 0
-7823 2586 2600 0
-7823 2586 2595 0
-7823 2586 2596 0
-7823 2586 2598 0
-7823 2587 0
-7823 2587 2595 0
-7823 2587 2596 0
-7823 2587 2598 0
7823 -2587 -2595 -2600 0
7823 -2586 -2596 -2600 0
7823 -2586 -2595 -2601 0
c ((1<=(aux640 + aux643 + aux644))=tv=SATLiteral(7824))
-7824 -2586 -2595 -2600 0
7824 2600 0
7824 2595 0
7824 2596 0
7824 2598 0
7824 2586 0
7824 2586 2595 0
7824 2586 2596 0
7824 2586 2598 0
7824 2587 0
7824 2587 2595 0
7824 2587 2596 0
7824 2587 2598 0
c (((aux646 + aux649 + aux650)<=1)=tv=SATLiteral(7825))
-7825 2625 0
-7825 2619 2624 0
-7825 2620 0
-7825 2622 0
-7825 2610 2624 0
-7825 2610 2619 0
-7825 2610 2620 0
-7825 2610 2622 0
-7825 2611 0
-7825 2611 2619 0
-7825 2611 2620 0
-7825 2611 2622 0
7825 -2611 -2619 -2624 0
7825 -2610 -2620 -2624 0
7825 -2610 -2619 -2625 0
c ((1<=(aux646 + aux649 + aux650))=tv=SATLiteral(7826))
-7826 -2610 -2619 -2624 0
7826 2624 0
7826 2619 0
7826 2620 0
7826 2622 0
7826 2610 0
7826 2610 2619 0
7826 2610 2620 0
7826 2610 2622 0
7826 2611 0
7826 2611 2619 0
7826 2611 2620 0
7826 2611 2622 0
c (((aux652 + aux655 + aux656)<=1)=tv=SATLiteral(7827))
-7827 2649 0
-7827 2643 2648 0
-7827 2644 0
-7827 2646 0
-7827 2634 2648 0
-7827 2634 2643 0
-7827 2634 2644 0
-7827 2634 2646 0
-7827 2635 0
-7827 2635 2643 0
-7827 2635 2644 0
-7827 2635 2646 0
7827 -2635 -2643 -2648 0
7827 -2634 -2644 -2648 0
7827 -2634 -2643 -2649 0
c ((1<=(aux652 + aux655 + aux656))=tv=SATLiteral(7828))
-7828 -2634 -2643 -2648 0
7828 2648 0
7828 2643 0
7828 2644 0
7828 2646 0
7828 2634 0
7828 2634 2643 0
7828 2634 2644 0
7828 2634 2646 0
7828 2635 0
7828 2635 2643 0
7828 2635 2644 0
7828 2635 2646 0
c (((aux658 + aux661 + aux662)<=1)=tv=SATLiteral(7829))
-7829 2673 0
-7829 2667 2672 0
-7829 2668 0
-7829 2670 0
-7829 2658 2672 0
-7829 2658 2667 0
-7829 2658 2668 0
-7829 2658 2670 0
-7829 2659 0
-7829 2659 2667 0
-7829 2659 2668 0
-7829 2659 2670 0
7829 -2659 -2667 -2672 0
7829 -2658 -2668 -2672 0
7829 -2658 -2667 -2673 0
c ((1<=(aux658 + aux661 + aux662))=tv=SATLiteral(7830))
-7830 -2658 -2667 -2672 0
7830 2672 0
7830 2667 0
7830 2668 0
7830 2670 0
7830 2658 0
7830 2658 2667 0
7830 2658 2668 0
7830 2658 2670 0
7830 2659 0
7830 2659 2667 0
7830 2659 2668 0
7830 2659 2670 0
c (((aux664 + aux667 + aux668)<=1)=tv=SATLiteral(7831))
-7831 2697 0
-7831 2691 2696 0
-7831 2692 0
-7831 2694 0
-7831 2682 2696 0
-7831 2682 2691 0
-7831 2682 2692 0
-7831 2682 2694 0
-7831 2683 0
-7831 2683 2691 0
-7831 2683 2692 0
-7831 2683 2694 0
7831 -2683 -2691 -2696 0
7831 -2682 -2692 -2696 0
7831 -2682 -2691 -2697 0
c ((1<=(aux664 + aux667 + aux668))=tv=SATLiteral(7832))
-7832 -2682 -2691 -2696 0
7832 2696 0
7832 2691 0
7832 2692 0
7832 2694 0
7832 2682 0
7832 2682 2691 0
7832 2682 2692 0
7832 2682 2694 0
7832 2683 0
7832 2683 2691 0
7832 2683 2692 0
7832 2683 2694 0
c (((aux670 + aux673 + aux674)<=1)=tv=SATLiteral(7833))
-7833 2721 0
-7833 2715 2720 0
-7833 2716 0
-7833 2718 0
-7833 2706 2720 0
-7833 2706 2715 0
-7833 2706 2716 0
-7833 2706 2718 0
-7833 2707 0
-7833 2707 2715 0
-7833 2707 2716 0
-7833 2707 2718 0
7833 -2707 -2715 -2720 0
7833 -2706 -2716 -2720 0
7833 -2706 -2715 -2721 0
c ((1<=(aux670 + aux673 + aux674))=tv=SATLiteral(7834))
-7834 -2706 -2715 -2720 0
7834 2720 0
7834 2715 0
7834 2716 0
7834 2718 0
7834 2706 0
7834 2706 2715 0
7834 2706 2716 0
7834 2706 2718 0
7834 2707 0
7834 2707 2715 0
7834 2707 2716 0
7834 2707 2718 0
c (((aux676 + aux679 + aux680)<=1)=tv=SATLiteral(7835))
-7835 2745 0
-7835 2739 2744 0
-7835 2740 0
-7835 2742 0
-7835 2730 2744 0
-7835 2730 2739 0
-7835 2730 2740 0
-7835 2730 2742 0
-7835 2731 0
-7835 2731 2739 0
-7835 2731 2740 0
-7835 2731 2742 0
7835 -2731 -2739 -2744 0
7835 -2730 -2740 -2744 0
7835 -2730 -2739 -2745 0
c ((1<=(aux676 + aux679 + aux680))=tv=SATLiteral(7836))
-7836 -2730 -2739 -2744 0
7836 2744 0
7836 2739 0
7836 2740 0
7836 2742 0
7836 2730 0
7836 2730 2739 0
7836 2730 2740 0
7836 2730 2742 0
7836 2731 0
7836 2731 2739 0
7836 2731 2740 0
7836 2731 2742 0
c (((aux682 + aux685 + aux686)<=1)=tv=SATLiteral(7837))
-7837 2769 0
-7837 2763 2768 0
-7837 2764 0
-7837 2766 0
-7837 2754 2768 0
-7837 2754 2763 0
-7837 2754 2764 0
-7837 2754 2766 0
-7837 2755 0
-7837 2755 2763 0
-7837 2755 2764 0
-7837 2755 2766 0
7837 -2755 -2763 -2768 0
7837 -2754 -2764 -2768 0
7837 -2754 -2763 -2769 0
c ((1<=(aux682 + aux685 + aux686))=tv=SATLiteral(7838))
-7838 -2754 -2763 -2768 0
7838 2768 0
7838 2763 0
7838 2764 0
7838 2766 0
7838 2754 0
7838 2754 2763 0
7838 2754 2764 0
7838 2754 2766 0
7838 2755 0
7838 2755 2763 0
7838 2755 2764 0
7838 2755 2766 0
c (((aux688 + aux691 + aux692)<=1)=tv=SATLiteral(7839))
-7839 2793 0
-7839 2787 2792 0
-7839 2788 0
-7839 2790 0
-7839 2778 2792 0
-7839 2778 2787 0
-7839 2778 2788 0
-7839 2778 2790 0
-7839 2779 0
-7839 2779 2787 0
-7839 2779 2788 0
-7839 2779 2790 0
7839 -2779 -2787 -2792 0
7839 -2778 -2788 -2792 0
7839 -2778 -2787 -2793 0
c ((1<=(aux688 + aux691 + aux692))=tv=SATLiteral(7840))
-7840 -2778 -2787 -2792 0
7840 2792 0
7840 2787 0
7840 2788 0
7840 2790 0
7840 2778 0
7840 2778 2787 0
7840 2778 2788 0
7840 2778 2790 0
7840 2779 0
7840 2779 2787 0
7840 2779 2788 0
7840 2779 2790 0
c (((aux694 + aux697 + aux698)<=1)=tv=SATLiteral(7841))
-7841 2817 0
-7841 2811 2816 0
-7841 2812 0
-7841 2814 0
-7841 2802 2816 0
-7841 2802 2811 0
-7841 2802 2812 0
-7841 2802 2814 0
-7841 2803 0
-7841 2803 2811 0
-7841 2803 2812 0
-7841 2803 2814 0
7841 -2803 -2811 -2816 0
7841 -2802 -2812 -2816 0
7841 -2802 -2811 -2817 0
c ((1<=(aux694 + aux697 + aux698))=tv=SATLiteral(7842))
-7842 -2802 -2811 -2816 0
7842 2816 0
7842 2811 0
7842 2812 0
7842 2814 0
7842 2802 0
7842 2802 2811 0
7842 2802 2812 0
7842 2802 2814 0
7842 2803 0
7842 2803 2811 0
7842 2803 2812 0
7842 2803 2814 0
c (((aux700 + aux703 + aux704)<=1)=tv=SATLiteral(7843))
-7843 2841 0
-7843 2835 2840 0
-7843 2836 0
-7843 2838 0
-7843 2826 2840 0
-7843 2826 2835 0
-7843 2826 2836 0
-7843 2826 2838 0
-7843 2827 0
-7843 2827 2835 0
-7843 2827 2836 0
-7843 2827 2838 0
7843 -2827 -2835 -2840 0
7843 -2826 -2836 -2840 0
7843 -2826 -2835 -2841 0
c ((1<=(aux700 + aux703 + aux704))=tv=SATLiteral(7844))
-7844 -2826 -2835 -2840 0
7844 2840 0
7844 2835 0
7844 2836 0
7844 2838 0
7844 2826 0
7844 2826 2835 0
7844 2826 2836 0
7844 2826 2838 0
7844 2827 0
7844 2827 2835 0
7844 2827 2836 0
7844 2827 2838 0
c (((aux706 + aux709 + aux710)<=1)=tv=SATLiteral(7845))
-7845 2865 0
-7845 2859 2864 0
-7845 2860 0
-7845 2862 0
-7845 2850 2864 0
-7845 2850 2859 0
-7845 2850 2860 0
-7845 2850 2862 0
-7845 2851 0
-7845 2851 2859 0
-7845 2851 2860 0
-7845 2851 2862 0
7845 -2851 -2859 -2864 0
7845 -2850 -2860 -2864 0
7845 -2850 -2859 -2865 0
c ((1<=(aux706 + aux709 + aux710))=tv=SATLiteral(7846))
-7846 -2850 -2859 -2864 0
7846 2864 0
7846 2859 0
7846 2860 0
7846 2862 0
7846 2850 0
7846 2850 2859 0
7846 2850 2860 0
7846 2850 2862 0
7846 2851 0
7846 2851 2859 0
7846 2851 2860 0
7846 2851 2862 0
c (((aux712 + aux715 + aux716)<=1)=tv=SATLiteral(7847))
-7847 2889 0
-7847 2883 2888 0
-7847 2884 0
-7847 2886 0
-7847 2874 2888 0
-7847 2874 2883 0
-7847 2874 2884 0
-7847 2874 2886 0
-7847 2875 0
-7847 2875 2883 0
-7847 2875 2884 0
-7847 2875 2886 0
7847 -2875 -2883 -2888 0
7847 -2874 -2884 -2888 0
7847 -2874 -2883 -2889 0
c ((1<=(aux712 + aux715 + aux716))=tv=SATLiteral(7848))
-7848 -2874 -2883 -2888 0
7848 2888 0
7848 2883 0
7848 2884 0
7848 2886 0
7848 2874 0
7848 2874 2883 0
7848 2874 2884 0
7848 2874 2886 0
7848 2875 0
7848 2875 2883 0
7848 2875 2884 0
7848 2875 2886 0
c (((aux718 + aux721 + aux722)<=1)=tv=SATLiteral(7849))
-7849 2913 0
-7849 2907 2912 0
-7849 2908 0
-7849 2910 0
-7849 2898 2912 0
-7849 2898 2907 0
-7849 2898 2908 0
-7849 2898 2910 0
-7849 2899 0
-7849 2899 2907 0
-7849 2899 2908 0
-7849 2899 2910 0
7849 -2899 -2907 -2912 0
7849 -2898 -2908 -2912 0
7849 -2898 -2907 -2913 0
c ((1<=(aux718 + aux721 + aux722))=tv=SATLiteral(7850))
-7850 -2898 -2907 -2912 0
7850 2912 0
7850 2907 0
7850 2908 0
7850 2910 0
7850 2898 0
7850 2898 2907 0
7850 2898 2908 0
7850 2898 2910 0
7850 2899 0
7850 2899 2907 0
7850 2899 2908 0
7850 2899 2910 0
c (((aux724 + aux727 + aux728)<=1)=tv=SATLiteral(7851))
-7851 2937 0
-7851 2931 2936 0
-7851 2932 0
-7851 2934 0
-7851 2922 2936 0
-7851 2922 2931 0
-7851 2922 2932 0
-7851 2922 2934 0
-7851 2923 0
-7851 2923 2931 0
-7851 2923 2932 0
-7851 2923 2934 0
7851 -2923 -2931 -2936 0
7851 -2922 -2932 -2936 0
7851 -2922 -2931 -2937 0
c ((1<=(aux724 + aux727 + aux728))=tv=SATLiteral(7852))
-7852 -2922 -2931 -2936 0
7852 2936 0
7852 2931 0
7852 2932 0
7852 2934 0
7852 2922 0
7852 2922 2931 0
7852 2922 2932 0
7852 2922 2934 0
7852 2923 0
7852 2923 2931 0
7852 2923 2932 0
7852 2923 2934 0
c (((aux730 + aux733 + aux734)<=1)=tv=SATLiteral(7853))
-7853 2961 0
-7853 2955 2960 0
-7853 2956 0
-7853 2958 0
-7853 2946 2960 0
-7853 2946 2955 0
-7853 2946 2956 0
-7853 2946 2958 0
-7853 2947 0
-7853 2947 2955 0
-7853 2947 2956 0
-7853 2947 2958 0
7853 -2947 -2955 -2960 0
7853 -2946 -2956 -2960 0
7853 -2946 -2955 -2961 0
c ((1<=(aux730 + aux733 + aux734))=tv=SATLiteral(7854))
-7854 -2946 -2955 -2960 0
7854 2960 0
7854 2955 0
7854 2956 0
7854 2958 0
7854 2946 0
7854 2946 2955 0
7854 2946 2956 0
7854 2946 2958 0
7854 2947 0
7854 2947 2955 0
7854 2947 2956 0
7854 2947 2958 0
c (((aux736 + aux739 + aux740)<=1)=tv=SATLiteral(7855))
-7855 2985 0
-7855 2979 2984 0
-7855 2980 0
-7855 2982 0
-7855 2970 2984 0
-7855 2970 2979 0
-7855 2970 2980 0
-7855 2970 2982 0
-7855 2971 0
-7855 2971 2979 0
-7855 2971 2980 0
-7855 2971 2982 0
7855 -2971 -2979 -2984 0
7855 -2970 -2980 -2984 0
7855 -2970 -2979 -2985 0
c ((1<=(aux736 + aux739 + aux740))=tv=SATLiteral(7856))
-7856 -2970 -2979 -2984 0
7856 2984 0
7856 2979 0
7856 2980 0
7856 2982 0
7856 2970 0
7856 2970 2979 0
7856 2970 2980 0
7856 2970 2982 0
7856 2971 0
7856 2971 2979 0
7856 2971 2980 0
7856 2971 2982 0
c (((aux742 + aux745 + aux746)<=1)=tv=SATLiteral(7857))
-7857 3009 0
-7857 3003 3008 0
-7857 3004 0
-7857 3006 0
-7857 2994 3008 0
-7857 2994 3003 0
-7857 2994 3004 0
-7857 2994 3006 0
-7857 2995 0
-7857 2995 3003 0
-7857 2995 3004 0
-7857 2995 3006 0
7857 -2995 -3003 -3008 0
7857 -2994 -3004 -3008 0
7857 -2994 -3003 -3009 0
c ((1<=(aux742 + aux745 + aux746))=tv=SATLiteral(7858))
-7858 -2994 -3003 -3008 0
7858 3008 0
7858 3003 0
7858 3004 0
7858 3006 0
7858 2994 0
7858 2994 3003 0
7858 2994 3004 0
7858 2994 3006 0
7858 2995 0
7858 2995 3003 0
7858 2995 3004 0
7858 2995 3006 0
c (((aux748 + aux751 + aux752)<=1)=tv=SATLiteral(7859))
-7859 3033 0
-7859 3027 3032 0
-7859 3028 0
-7859 3030 0
-7859 3018 3032 0
-7859 3018 3027 0
-7859 3018 3028 0
-7859 3018 3030 0
-7859 3019 0
-7859 3019 3027 0
-7859 3019 3028 0
-7859 3019 3030 0
7859 -3019 -3027 -3032 0
7859 -3018 -3028 -3032 0
7859 -3018 -3027 -3033 0
c ((1<=(aux748 + aux751 + aux752))=tv=SATLiteral(7860))
-7860 -3018 -3027 -3032 0
7860 3032 0
7860 3027 0
7860 3028 0
7860 3030 0
7860 3018 0
7860 3018 3027 0
7860 3018 3028 0
7860 3018 3030 0
7860 3019 0
7860 3019 3027 0
7860 3019 3028 0
7860 3019 3030 0
c (((aux754 + aux757 + aux758)<=1)=tv=SATLiteral(7861))
-7861 3057 0
-7861 3051 3056 0
-7861 3052 0
-7861 3054 0
-7861 3042 3056 0
-7861 3042 3051 0
-7861 3042 3052 0
-7861 3042 3054 0
-7861 3043 0
-7861 3043 3051 0
-7861 3043 3052 0
-7861 3043 3054 0
7861 -3043 -3051 -3056 0
7861 -3042 -3052 -3056 0
7861 -3042 -3051 -3057 0
c ((1<=(aux754 + aux757 + aux758))=tv=SATLiteral(7862))
-7862 -3042 -3051 -3056 0
7862 3056 0
7862 3051 0
7862 3052 0
7862 3054 0
7862 3042 0
7862 3042 3051 0
7862 3042 3052 0
7862 3042 3054 0
7862 3043 0
7862 3043 3051 0
7862 3043 3052 0
7862 3043 3054 0
c (((aux760 + aux763 + aux764)<=1)=tv=SATLiteral(7863))
-7863 3081 0
-7863 3075 3080 0
-7863 3076 0
-7863 3078 0
-7863 3066 3080 0
-7863 3066 3075 0
-7863 3066 3076 0
-7863 3066 3078 0
-7863 3067 0
-7863 3067 3075 0
-7863 3067 3076 0
-7863 3067 3078 0
7863 -3067 -3075 -3080 0
7863 -3066 -3076 -3080 0
7863 -3066 -3075 -3081 0
c ((1<=(aux760 + aux763 + aux764))=tv=SATLiteral(7864))
-7864 -3066 -3075 -3080 0
7864 3080 0
7864 3075 0
7864 3076 0
7864 3078 0
7864 3066 0
7864 3066 3075 0
7864 3066 3076 0
7864 3066 3078 0
7864 3067 0
7864 3067 3075 0
7864 3067 3076 0
7864 3067 3078 0
c (((aux766 + aux769 + aux770)<=1)=tv=SATLiteral(7865))
-7865 3105 0
-7865 3099 3104 0
-7865 3100 0
-7865 3102 0
-7865 3090 3104 0
-7865 3090 3099 0
-7865 3090 3100 0
-7865 3090 3102 0
-7865 3091 0
-7865 3091 3099 0
-7865 3091 3100 0
-7865 3091 3102 0
7865 -3091 -3099 -3104 0
7865 -3090 -3100 -3104 0
7865 -3090 -3099 -3105 0
c ((1<=(aux766 + aux769 + aux770))=tv=SATLiteral(7866))
-7866 -3090 -3099 -3104 0
7866 3104 0
7866 3099 0
7866 3100 0
7866 3102 0
7866 3090 0
7866 3090 3099 0
7866 3090 3100 0
7866 3090 3102 0
7866 3091 0
7866 3091 3099 0
7866 3091 3100 0
7866 3091 3102 0
c (((aux772 + aux775 + aux776)<=1)=tv=SATLiteral(7867))
-7867 3129 0
-7867 3123 3128 0
-7867 3124 0
-7867 3126 0
-7867 3114 3128 0
-7867 3114 3123 0
-7867 3114 3124 0
-7867 3114 3126 0
-7867 3115 0
-7867 3115 3123 0
-7867 3115 3124 0
-7867 3115 3126 0
7867 -3115 -3123 -3128 0
7867 -3114 -3124 -3128 0
7867 -3114 -3123 -3129 0
c ((1<=(aux772 + aux775 + aux776))=tv=SATLiteral(7868))
-7868 -3114 -3123 -3128 0
7868 3128 0
7868 3123 0
7868 3124 0
7868 3126 0
7868 3114 0
7868 3114 3123 0
7868 3114 3124 0
7868 3114 3126 0
7868 3115 0
7868 3115 3123 0
7868 3115 3124 0
7868 3115 3126 0
c (((aux778 + aux781 + aux782)<=1)=tv=SATLiteral(7869))
-7869 3153 0
-7869 3147 3152 0
-7869 3148 0
-7869 3150 0
-7869 3138 3152 0
-7869 3138 3147 0
-7869 3138 3148 0
-7869 3138 3150 0
-7869 3139 0
-7869 3139 3147 0
-7869 3139 3148 0
-7869 3139 3150 0
7869 -3139 -3147 -3152 0
7869 -3138 -3148 -3152 0
7869 -3138 -3147 -3153 0
c ((1<=(aux778 + aux781 + aux782))=tv=SATLiteral(7870))
-7870 -3138 -3147 -3152 0
7870 3152 0
7870 3147 0
7870 3148 0
7870 3150 0
7870 3138 0
7870 3138 3147 0
7870 3138 3148 0
7870 3138 3150 0
7870 3139 0
7870 3139 3147 0
7870 3139 3148 0
7870 3139 3150 0
c (((aux784 + aux787 + aux788)<=1)=tv=SATLiteral(7871))
-7871 3177 0
-7871 3171 3176 0
-7871 3172 0
-7871 3174 0
-7871 3162 3176 0
-7871 3162 3171 0
-7871 3162 3172 0
-7871 3162 3174 0
-7871 3163 0
-7871 3163 3171 0
-7871 3163 3172 0
-7871 3163 3174 0
7871 -3163 -3171 -3176 0
7871 -3162 -3172 -3176 0
7871 -3162 -3171 -3177 0
c ((1<=(aux784 + aux787 + aux788))=tv=SATLiteral(7872))
-7872 -3162 -3171 -3176 0
7872 3176 0
7872 3171 0
7872 3172 0
7872 3174 0
7872 3162 0
7872 3162 3171 0
7872 3162 3172 0
7872 3162 3174 0
7872 3163 0
7872 3163 3171 0
7872 3163 3172 0
7872 3163 3174 0
c (((aux790 + aux793 + aux794)<=1)=tv=SATLiteral(7873))
-7873 3201 0
-7873 3195 3200 0
-7873 3196 0
-7873 3198 0
-7873 3186 3200 0
-7873 3186 3195 0
-7873 3186 3196 0
-7873 3186 3198 0
-7873 3187 0
-7873 3187 3195 0
-7873 3187 3196 0
-7873 3187 3198 0
7873 -3187 -3195 -3200 0
7873 -3186 -3196 -3200 0
7873 -3186 -3195 -3201 0
c ((1<=(aux790 + aux793 + aux794))=tv=SATLiteral(7874))
-7874 -3186 -3195 -3200 0
7874 3200 0
7874 3195 0
7874 3196 0
7874 3198 0
7874 3186 0
7874 3186 3195 0
7874 3186 3196 0
7874 3186 3198 0
7874 3187 0
7874 3187 3195 0
7874 3187 3196 0
7874 3187 3198 0
c (((aux796 + aux799 + aux800)<=1)=tv=SATLiteral(7875))
-7875 3225 0
-7875 3219 3224 0
-7875 3220 0
-7875 3222 0
-7875 3210 3224 0
-7875 3210 3219 0
-7875 3210 3220 0
-7875 3210 3222 0
-7875 3211 0
-7875 3211 3219 0
-7875 3211 3220 0
-7875 3211 3222 0
7875 -3211 -3219 -3224 0
7875 -3210 -3220 -3224 0
7875 -3210 -3219 -3225 0
c ((1<=(aux796 + aux799 + aux800))=tv=SATLiteral(7876))
-7876 -3210 -3219 -3224 0
7876 3224 0
7876 3219 0
7876 3220 0
7876 3222 0
7876 3210 0
7876 3210 3219 0
7876 3210 3220 0
7876 3210 3222 0
7876 3211 0
7876 3211 3219 0
7876 3211 3220 0
7876 3211 3222 0
c (((aux802 + aux805 + aux806)<=1)=tv=SATLiteral(7877))
-7877 3249 0
-7877 3243 3248 0
-7877 3244 0
-7877 3246 0
-7877 3234 3248 0
-7877 3234 3243 0
-7877 3234 3244 0
-7877 3234 3246 0
-7877 3235 0
-7877 3235 3243 0
-7877 3235 3244 0
-7877 3235 3246 0
7877 -3235 -3243 -3248 0
7877 -3234 -3244 -3248 0
7877 -3234 -3243 -3249 0
c ((1<=(aux802 + aux805 + aux806))=tv=SATLiteral(7878))
-7878 -3234 -3243 -3248 0
7878 3248 0
7878 3243 0
7878 3244 0
7878 3246 0
7878 3234 0
7878 3234 3243 0
7878 3234 3244 0
7878 3234 3246 0
7878 3235 0
7878 3235 3243 0
7878 3235 3244 0
7878 3235 3246 0
c (((aux808 + aux811 + aux812)<=1)=tv=SATLiteral(7879))
-7879 3273 0
-7879 3267 3272 0
-7879 3268 0
-7879 3270 0
-7879 3258 3272 0
-7879 3258 3267 0
-7879 3258 3268 0
-7879 3258 3270 0
-7879 3259 0
-7879 3259 3267 0
-7879 3259 3268 0
-7879 3259 3270 0
7879 -3259 -3267 -3272 0
7879 -3258 -3268 -3272 0
7879 -3258 -3267 -3273 0
c ((1<=(aux808 + aux811 + aux812))=tv=SATLiteral(7880))
-7880 -3258 -3267 -3272 0
7880 3272 0
7880 3267 0
7880 3268 0
7880 3270 0
7880 3258 0
7880 3258 3267 0
7880 3258 3268 0
7880 3258 3270 0
7880 3259 0
7880 3259 3267 0
7880 3259 3268 0
7880 3259 3270 0
c (((aux814 + aux817 + aux818)<=1)=tv=SATLiteral(7881))
-7881 3297 0
-7881 3291 3296 0
-7881 3292 0
-7881 3294 0
-7881 3282 3296 0
-7881 3282 3291 0
-7881 3282 3292 0
-7881 3282 3294 0
-7881 3283 0
-7881 3283 3291 0
-7881 3283 3292 0
-7881 3283 3294 0
7881 -3283 -3291 -3296 0
7881 -3282 -3292 -3296 0
7881 -3282 -3291 -3297 0
c ((1<=(aux814 + aux817 + aux818))=tv=SATLiteral(7882))
-7882 -3282 -3291 -3296 0
7882 3296 0
7882 3291 0
7882 3292 0
7882 3294 0
7882 3282 0
7882 3282 3291 0
7882 3282 3292 0
7882 3282 3294 0
7882 3283 0
7882 3283 3291 0
7882 3283 3292 0
7882 3283 3294 0
c (((aux820 + aux823 + aux824)<=1)=tv=SATLiteral(7883))
-7883 3321 0
-7883 3315 3320 0
-7883 3316 0
-7883 3318 0
-7883 3306 3320 0
-7883 3306 3315 0
-7883 3306 3316 0
-7883 3306 3318 0
-7883 3307 0
-7883 3307 3315 0
-7883 3307 3316 0
-7883 3307 3318 0
7883 -3307 -3315 -3320 0
7883 -3306 -3316 -3320 0
7883 -3306 -3315 -3321 0
c ((1<=(aux820 + aux823 + aux824))=tv=SATLiteral(7884))
-7884 -3306 -3315 -3320 0
7884 3320 0
7884 3315 0
7884 3316 0
7884 3318 0
7884 3306 0
7884 3306 3315 0
7884 3306 3316 0
7884 3306 3318 0
7884 3307 0
7884 3307 3315 0
7884 3307 3316 0
7884 3307 3318 0
c (((aux826 + aux829 + aux830)<=1)=tv=SATLiteral(7885))
-7885 3345 0
-7885 3339 3344 0
-7885 3340 0
-7885 3342 0
-7885 3330 3344 0
-7885 3330 3339 0
-7885 3330 3340 0
-7885 3330 3342 0
-7885 3331 0
-7885 3331 3339 0
-7885 3331 3340 0
-7885 3331 3342 0
7885 -3331 -3339 -3344 0
7885 -3330 -3340 -3344 0
7885 -3330 -3339 -3345 0
c ((1<=(aux826 + aux829 + aux830))=tv=SATLiteral(7886))
-7886 -3330 -3339 -3344 0
7886 3344 0
7886 3339 0
7886 3340 0
7886 3342 0
7886 3330 0
7886 3330 3339 0
7886 3330 3340 0
7886 3330 3342 0
7886 3331 0
7886 3331 3339 0
7886 3331 3340 0
7886 3331 3342 0
c (((aux832 + aux835 + aux836)<=1)=tv=SATLiteral(7887))
-7887 3369 0
-7887 3363 3368 0
-7887 3364 0
-7887 3366 0
-7887 3354 3368 0
-7887 3354 3363 0
-7887 3354 3364 0
-7887 3354 3366 0
-7887 3355 0
-7887 3355 3363 0
-7887 3355 3364 0
-7887 3355 3366 0
7887 -3355 -3363 -3368 0
7887 -3354 -3364 -3368 0
7887 -3354 -3363 -3369 0
c ((1<=(aux832 + aux835 + aux836))=tv=SATLiteral(7888))
-7888 -3354 -3363 -3368 0
7888 3368 0
7888 3363 0
7888 3364 0
7888 3366 0
7888 3354 0
7888 3354 3363 0
7888 3354 3364 0
7888 3354 3366 0
7888 3355 0
7888 3355 3363 0
7888 3355 3364 0
7888 3355 3366 0
c (((aux838 + aux841 + aux842)<=1)=tv=SATLiteral(7889))
-7889 3393 0
-7889 3387 3392 0
-7889 3388 0
-7889 3390 0
-7889 3378 3392 0
-7889 3378 3387 0
-7889 3378 3388 0
-7889 3378 3390 0
-7889 3379 0
-7889 3379 3387 0
-7889 3379 3388 0
-7889 3379 3390 0
7889 -3379 -3387 -3392 0
7889 -3378 -3388 -3392 0
7889 -3378 -3387 -3393 0
c ((1<=(aux838 + aux841 + aux842))=tv=SATLiteral(7890))
-7890 -3378 -3387 -3392 0
7890 3392 0
7890 3387 0
7890 3388 0
7890 3390 0
7890 3378 0
7890 3378 3387 0
7890 3378 3388 0
7890 3378 3390 0
7890 3379 0
7890 3379 3387 0
7890 3379 3388 0
7890 3379 3390 0
c (((aux844 + aux847 + aux848)<=1)=tv=SATLiteral(7891))
-7891 3417 0
-7891 3411 3416 0
-7891 3412 0
-7891 3414 0
-7891 3402 3416 0
-7891 3402 3411 0
-7891 3402 3412 0
-7891 3402 3414 0
-7891 3403 0
-7891 3403 3411 0
-7891 3403 3412 0
-7891 3403 3414 0
7891 -3403 -3411 -3416 0
7891 -3402 -3412 -3416 0
7891 -3402 -3411 -3417 0
c ((1<=(aux844 + aux847 + aux848))=tv=SATLiteral(7892))
-7892 -3402 -3411 -3416 0
7892 3416 0
7892 3411 0
7892 3412 0
7892 3414 0
7892 3402 0
7892 3402 3411 0
7892 3402 3412 0
7892 3402 3414 0
7892 3403 0
7892 3403 3411 0
7892 3403 3412 0
7892 3403 3414 0
c (((aux850 + aux853 + aux854)<=1)=tv=SATLiteral(7893))
-7893 3441 0
-7893 3435 3440 0
-7893 3436 0
-7893 3438 0
-7893 3426 3440 0
-7893 3426 3435 0
-7893 3426 3436 0
-7893 3426 3438 0
-7893 3427 0
-7893 3427 3435 0
-7893 3427 3436 0
-7893 3427 3438 0
7893 -3427 -3435 -3440 0
7893 -3426 -3436 -3440 0
7893 -3426 -3435 -3441 0
c ((1<=(aux850 + aux853 + aux854))=tv=SATLiteral(7894))
-7894 -3426 -3435 -3440 0
7894 3440 0
7894 3435 0
7894 3436 0
7894 3438 0
7894 3426 0
7894 3426 3435 0
7894 3426 3436 0
7894 3426 3438 0
7894 3427 0
7894 3427 3435 0
7894 3427 3436 0
7894 3427 3438 0
c (((aux856 + aux859 + aux860)<=1)=tv=SATLiteral(7895))
-7895 3465 0
-7895 3459 3464 0
-7895 3460 0
-7895 3462 0
-7895 3450 3464 0
-7895 3450 3459 0
-7895 3450 3460 0
-7895 3450 3462 0
-7895 3451 0
-7895 3451 3459 0
-7895 3451 3460 0
-7895 3451 3462 0
7895 -3451 -3459 -3464 0
7895 -3450 -3460 -3464 0
7895 -3450 -3459 -3465 0
c ((1<=(aux856 + aux859 + aux860))=tv=SATLiteral(7896))
-7896 -3450 -3459 -3464 0
7896 3464 0
7896 3459 0
7896 3460 0
7896 3462 0
7896 3450 0
7896 3450 3459 0
7896 3450 3460 0
7896 3450 3462 0
7896 3451 0
7896 3451 3459 0
7896 3451 3460 0
7896 3451 3462 0
c (((aux862 + aux865 + aux866)<=1)=tv=SATLiteral(7897))
-7897 3489 0
-7897 3483 3488 0
-7897 3484 0
-7897 3486 0
-7897 3474 3488 0
-7897 3474 3483 0
-7897 3474 3484 0
-7897 3474 3486 0
-7897 3475 0
-7897 3475 3483 0
-7897 3475 3484 0
-7897 3475 3486 0
7897 -3475 -3483 -3488 0
7897 -3474 -3484 -3488 0
7897 -3474 -3483 -3489 0
c ((1<=(aux862 + aux865 + aux866))=tv=SATLiteral(7898))
-7898 -3474 -3483 -3488 0
7898 3488 0
7898 3483 0
7898 3484 0
7898 3486 0
7898 3474 0
7898 3474 3483 0
7898 3474 3484 0
7898 3474 3486 0
7898 3475 0
7898 3475 3483 0
7898 3475 3484 0
7898 3475 3486 0
c (((aux868 + aux871 + aux872)<=1)=tv=SATLiteral(7899))
-7899 3513 0
-7899 3507 3512 0
-7899 3508 0
-7899 3510 0
-7899 3498 3512 0
-7899 3498 3507 0
-7899 3498 3508 0
-7899 3498 3510 0
-7899 3499 0
-7899 3499 3507 0
-7899 3499 3508 0
-7899 3499 3510 0
7899 -3499 -3507 -3512 0
7899 -3498 -3508 -3512 0
7899 -3498 -3507 -3513 0
c ((1<=(aux868 + aux871 + aux872))=tv=SATLiteral(7900))
-7900 -3498 -3507 -3512 0
7900 3512 0
7900 3507 0
7900 3508 0
7900 3510 0
7900 3498 0
7900 3498 3507 0
7900 3498 3508 0
7900 3498 3510 0
7900 3499 0
7900 3499 3507 0
7900 3499 3508 0
7900 3499 3510 0
c (((aux874 + aux877 + aux878)<=1)=tv=SATLiteral(7901))
-7901 3537 0
-7901 3531 3536 0
-7901 3532 0
-7901 3534 0
-7901 3522 3536 0
-7901 3522 3531 0
-7901 3522 3532 0
-7901 3522 3534 0
-7901 3523 0
-7901 3523 3531 0
-7901 3523 3532 0
-7901 3523 3534 0
7901 -3523 -3531 -3536 0
7901 -3522 -3532 -3536 0
7901 -3522 -3531 -3537 0
c ((1<=(aux874 + aux877 + aux878))=tv=SATLiteral(7902))
-7902 -3522 -3531 -3536 0
7902 3536 0
7902 3531 0
7902 3532 0
7902 3534 0
7902 3522 0
7902 3522 3531 0
7902 3522 3532 0
7902 3522 3534 0
7902 3523 0
7902 3523 3531 0
7902 3523 3532 0
7902 3523 3534 0
c (((aux880 + aux883 + aux884)<=1)=tv=SATLiteral(7903))
-7903 3561 0
-7903 3555 3560 0
-7903 3556 0
-7903 3558 0
-7903 3546 3560 0
-7903 3546 3555 0
-7903 3546 3556 0
-7903 3546 3558 0
-7903 3547 0
-7903 3547 3555 0
-7903 3547 3556 0
-7903 3547 3558 0
7903 -3547 -3555 -3560 0
7903 -3546 -3556 -3560 0
7903 -3546 -3555 -3561 0
c ((1<=(aux880 + aux883 + aux884))=tv=SATLiteral(7904))
-7904 -3546 -3555 -3560 0
7904 3560 0
7904 3555 0
7904 3556 0
7904 3558 0
7904 3546 0
7904 3546 3555 0
7904 3546 3556 0
7904 3546 3558 0
7904 3547 0
7904 3547 3555 0
7904 3547 3556 0
7904 3547 3558 0
c (((aux886 + aux889 + aux890)<=1)=tv=SATLiteral(7905))
-7905 3585 0
-7905 3579 3584 0
-7905 3580 0
-7905 3582 0
-7905 3570 3584 0
-7905 3570 3579 0
-7905 3570 3580 0
-7905 3570 3582 0
-7905 3571 0
-7905 3571 3579 0
-7905 3571 3580 0
-7905 3571 3582 0
7905 -3571 -3579 -3584 0
7905 -3570 -3580 -3584 0
7905 -3570 -3579 -3585 0
c ((1<=(aux886 + aux889 + aux890))=tv=SATLiteral(7906))
-7906 -3570 -3579 -3584 0
7906 3584 0
7906 3579 0
7906 3580 0
7906 3582 0
7906 3570 0
7906 3570 3579 0
7906 3570 3580 0
7906 3570 3582 0
7906 3571 0
7906 3571 3579 0
7906 3571 3580 0
7906 3571 3582 0
c (((aux892 + aux895 + aux896)<=1)=tv=SATLiteral(7907))
-7907 3609 0
-7907 3603 3608 0
-7907 3604 0
-7907 3606 0
-7907 3594 3608 0
-7907 3594 3603 0
-7907 3594 3604 0
-7907 3594 3606 0
-7907 3595 0
-7907 3595 3603 0
-7907 3595 3604 0
-7907 3595 3606 0
7907 -3595 -3603 -3608 0
7907 -3594 -3604 -3608 0
7907 -3594 -3603 -3609 0
c ((1<=(aux892 + aux895 + aux896))=tv=SATLiteral(7908))
-7908 -3594 -3603 -3608 0
7908 3608 0
7908 3603 0
7908 3604 0
7908 3606 0
7908 3594 0
7908 3594 3603 0
7908 3594 3604 0
7908 3594 3606 0
7908 3595 0
7908 3595 3603 0
7908 3595 3604 0
7908 3595 3606 0
c (((aux898 + aux901 + aux902)<=1)=tv=SATLiteral(7909))
-7909 3633 0
-7909 3627 3632 0
-7909 3628 0
-7909 3630 0
-7909 3618 3632 0
-7909 3618 3627 0
-7909 3618 3628 0
-7909 3618 3630 0
-7909 3619 0
-7909 3619 3627 0
-7909 3619 3628 0
-7909 3619 3630 0
7909 -3619 -3627 -3632 0
7909 -3618 -3628 -3632 0
7909 -3618 -3627 -3633 0
c ((1<=(aux898 + aux901 + aux902))=tv=SATLiteral(7910))
-7910 -3618 -3627 -3632 0
7910 3632 0
7910 3627 0
7910 3628 0
7910 3630 0
7910 3618 0
7910 3618 3627 0
7910 3618 3628 0
7910 3618 3630 0
7910 3619 0
7910 3619 3627 0
7910 3619 3628 0
7910 3619 3630 0
c (((aux904 + aux907 + aux908)<=1)=tv=SATLiteral(7911))
-7911 3657 0
-7911 3651 3656 0
-7911 3652 0
-7911 3654 0
-7911 3642 3656 0
-7911 3642 3651 0
-7911 3642 3652 0
-7911 3642 3654 0
-7911 3643 0
-7911 3643 3651 0
-7911 3643 3652 0
-7911 3643 3654 0
7911 -3643 -3651 -3656 0
7911 -3642 -3652 -3656 0
7911 -3642 -3651 -3657 0
c ((1<=(aux904 + aux907 + aux908))=tv=SATLiteral(7912))
-7912 -3642 -3651 -3656 0
7912 3656 0
7912 3651 0
7912 3652 0
7912 3654 0
7912 3642 0
7912 3642 3651 0
7912 3642 3652 0
7912 3642 3654 0
7912 3643 0
7912 3643 3651 0
7912 3643 3652 0
7912 3643 3654 0
c (((aux910 + aux913 + aux914)<=1)=tv=SATLiteral(7913))
-7913 3681 0
-7913 3675 3680 0
-7913 3676 0
-7913 3678 0
-7913 3666 3680 0
-7913 3666 3675 0
-7913 3666 3676 0
-7913 3666 3678 0
-7913 3667 0
-7913 3667 3675 0
-7913 3667 3676 0
-7913 3667 3678 0
7913 -3667 -3675 -3680 0
7913 -3666 -3676 -3680 0
7913 -3666 -3675 -3681 0
c ((1<=(aux910 + aux913 + aux914))=tv=SATLiteral(7914))
-7914 -3666 -3675 -3680 0
7914 3680 0
7914 3675 0
7914 3676 0
7914 3678 0
7914 3666 0
7914 3666 3675 0
7914 3666 3676 0
7914 3666 3678 0
7914 3667 0
7914 3667 3675 0
7914 3667 3676 0
7914 3667 3678 0
c (((aux916 + aux919 + aux920)<=1)=tv=SATLiteral(7915))
-7915 3705 0
-7915 3699 3704 0
-7915 3700 0
-7915 3702 0
-7915 3690 3704 0
-7915 3690 3699 0
-7915 3690 3700 0
-7915 3690 3702 0
-7915 3691 0
-7915 3691 3699 0
-7915 3691 3700 0
-7915 3691 3702 0
7915 -3691 -3699 -3704 0
7915 -3690 -3700 -3704 0
7915 -3690 -3699 -3705 0
c ((1<=(aux916 + aux919 + aux920))=tv=SATLiteral(7916))
-7916 -3690 -3699 -3704 0
7916 3704 0
7916 3699 0
7916 3700 0
7916 3702 0
7916 3690 0
7916 3690 3699 0
7916 3690 3700 0
7916 3690 3702 0
7916 3691 0
7916 3691 3699 0
7916 3691 3700 0
7916 3691 3702 0
c (((aux922 + aux925 + aux926)<=1)=tv=SATLiteral(7917))
-7917 3729 0
-7917 3723 3728 0
-7917 3724 0
-7917 3726 0
-7917 3714 3728 0
-7917 3714 3723 0
-7917 3714 3724 0
-7917 3714 3726 0
-7917 3715 0
-7917 3715 3723 0
-7917 3715 3724 0
-7917 3715 3726 0
7917 -3715 -3723 -3728 0
7917 -3714 -3724 -3728 0
7917 -3714 -3723 -3729 0
c ((1<=(aux922 + aux925 + aux926))=tv=SATLiteral(7918))
-7918 -3714 -3723 -3728 0
7918 3728 0
7918 3723 0
7918 3724 0
7918 3726 0
7918 3714 0
7918 3714 3723 0
7918 3714 3724 0
7918 3714 3726 0
7918 3715 0
7918 3715 3723 0
7918 3715 3724 0
7918 3715 3726 0
c (((aux928 + aux931 + aux932)<=1)=tv=SATLiteral(7919))
-7919 3753 0
-7919 3747 3752 0
-7919 3748 0
-7919 3750 0
-7919 3738 3752 0
-7919 3738 3747 0
-7919 3738 3748 0
-7919 3738 3750 0
-7919 3739 0
-7919 3739 3747 0
-7919 3739 3748 0
-7919 3739 3750 0
7919 -3739 -3747 -3752 0
7919 -3738 -3748 -3752 0
7919 -3738 -3747 -3753 0
c ((1<=(aux928 + aux931 + aux932))=tv=SATLiteral(7920))
-7920 -3738 -3747 -3752 0
7920 3752 0
7920 3747 0
7920 3748 0
7920 3750 0
7920 3738 0
7920 3738 3747 0
7920 3738 3748 0
7920 3738 3750 0
7920 3739 0
7920 3739 3747 0
7920 3739 3748 0
7920 3739 3750 0
c (((aux934 + aux937 + aux938)<=1)=tv=SATLiteral(7921))
-7921 3777 0
-7921 3771 3776 0
-7921 3772 0
-7921 3774 0
-7921 3762 3776 0
-7921 3762 3771 0
-7921 3762 3772 0
-7921 3762 3774 0
-7921 3763 0
-7921 3763 3771 0
-7921 3763 3772 0
-7921 3763 3774 0
7921 -3763 -3771 -3776 0
7921 -3762 -3772 -3776 0
7921 -3762 -3771 -3777 0
c ((1<=(aux934 + aux937 + aux938))=tv=SATLiteral(7922))
-7922 -3762 -3771 -3776 0
7922 3776 0
7922 3771 0
7922 3772 0
7922 3774 0
7922 3762 0
7922 3762 3771 0
7922 3762 3772 0
7922 3762 3774 0
7922 3763 0
7922 3763 3771 0
7922 3763 3772 0
7922 3763 3774 0
c (((aux940 + aux943 + aux944)<=1)=tv=SATLiteral(7923))
-7923 3801 0
-7923 3795 3800 0
-7923 3796 0
-7923 3798 0
-7923 3786 3800 0
-7923 3786 3795 0
-7923 3786 3796 0
-7923 3786 3798 0
-7923 3787 0
-7923 3787 3795 0
-7923 3787 3796 0
-7923 3787 3798 0
7923 -3787 -3795 -3800 0
7923 -3786 -3796 -3800 0
7923 -3786 -3795 -3801 0
c ((1<=(aux940 + aux943 + aux944))=tv=SATLiteral(7924))
-7924 -3786 -3795 -3800 0
7924 3800 0
7924 3795 0
7924 3796 0
7924 3798 0
7924 3786 0
7924 3786 3795 0
7924 3786 3796 0
7924 3786 3798 0
7924 3787 0
7924 3787 3795 0
7924 3787 3796 0
7924 3787 3798 0
c (((aux946 + aux949 + aux950)<=1)=tv=SATLiteral(7925))
-7925 3825 0
-7925 3819 3824 0
-7925 3820 0
-7925 3822 0
-7925 3810 3824 0
-7925 3810 3819 0
-7925 3810 3820 0
-7925 3810 3822 0
-7925 3811 0
-7925 3811 3819 0
-7925 3811 3820 0
-7925 3811 3822 0
7925 -3811 -3819 -3824 0
7925 -3810 -3820 -3824 0
7925 -3810 -3819 -3825 0
c ((1<=(aux946 + aux949 + aux950))=tv=SATLiteral(7926))
-7926 -3810 -3819 -3824 0
7926 3824 0
7926 3819 0
7926 3820 0
7926 3822 0
7926 3810 0
7926 3810 3819 0
7926 3810 3820 0
7926 3810 3822 0
7926 3811 0
7926 3811 3819 0
7926 3811 3820 0
7926 3811 3822 0
c (((aux952 + aux955 + aux956)<=1)=tv=SATLiteral(7927))
-7927 3849 0
-7927 3843 3848 0
-7927 3844 0
-7927 3846 0
-7927 3834 3848 0
-7927 3834 3843 0
-7927 3834 3844 0
-7927 3834 3846 0
-7927 3835 0
-7927 3835 3843 0
-7927 3835 3844 0
-7927 3835 3846 0
7927 -3835 -3843 -3848 0
7927 -3834 -3844 -3848 0
7927 -3834 -3843 -3849 0
c ((1<=(aux952 + aux955 + aux956))=tv=SATLiteral(7928))
-7928 -3834 -3843 -3848 0
7928 3848 0
7928 3843 0
7928 3844 0
7928 3846 0
7928 3834 0
7928 3834 3843 0
7928 3834 3844 0
7928 3834 3846 0
7928 3835 0
7928 3835 3843 0
7928 3835 3844 0
7928 3835 3846 0
c (((aux958 + aux961 + aux962)<=1)=tv=SATLiteral(7929))
-7929 3873 0
-7929 3867 3872 0
-7929 3868 0
-7929 3870 0
-7929 3858 3872 0
-7929 3858 3867 0
-7929 3858 3868 0
-7929 3858 3870 0
-7929 3859 0
-7929 3859 3867 0
-7929 3859 3868 0
-7929 3859 3870 0
7929 -3859 -3867 -3872 0
7929 -3858 -3868 -3872 0
7929 -3858 -3867 -3873 0
c ((1<=(aux958 + aux961 + aux962))=tv=SATLiteral(7930))
-7930 -3858 -3867 -3872 0
7930 3872 0
7930 3867 0
7930 3868 0
7930 3870 0
7930 3858 0
7930 3858 3867 0
7930 3858 3868 0
7930 3858 3870 0
7930 3859 0
7930 3859 3867 0
7930 3859 3868 0
7930 3859 3870 0
c (((aux964 + aux967 + aux968)<=1)=tv=SATLiteral(7931))
-7931 3897 0
-7931 3891 3896 0
-7931 3892 0
-7931 3894 0
-7931 3882 3896 0
-7931 3882 3891 0
-7931 3882 3892 0
-7931 3882 3894 0
-7931 3883 0
-7931 3883 3891 0
-7931 3883 3892 0
-7931 3883 3894 0
7931 -3883 -3891 -3896 0
7931 -3882 -3892 -3896 0
7931 -3882 -3891 -3897 0
c ((1<=(aux964 + aux967 + aux968))=tv=SATLiteral(7932))
-7932 -3882 -3891 -3896 0
7932 3896 0
7932 3891 0
7932 3892 0
7932 3894 0
7932 3882 0
7932 3882 3891 0
7932 3882 3892 0
7932 3882 3894 0
7932 3883 0
7932 3883 3891 0
7932 3883 3892 0
7932 3883 3894 0
c (((aux970 + aux973 + aux974)<=1)=tv=SATLiteral(7933))
-7933 3921 0
-7933 3915 3920 0
-7933 3916 0
-7933 3918 0
-7933 3906 3920 0
-7933 3906 3915 0
-7933 3906 3916 0
-7933 3906 3918 0
-7933 3907 0
-7933 3907 3915 0
-7933 3907 3916 0
-7933 3907 3918 0
7933 -3907 -3915 -3920 0
7933 -3906 -3916 -3920 0
7933 -3906 -3915 -3921 0
c ((1<=(aux970 + aux973 + aux974))=tv=SATLiteral(7934))
-7934 -3906 -3915 -3920 0
7934 3920 0
7934 3915 0
7934 3916 0
7934 3918 0
7934 3906 0
7934 3906 3915 0
7934 3906 3916 0
7934 3906 3918 0
7934 3907 0
7934 3907 3915 0
7934 3907 3916 0
7934 3907 3918 0
c (((aux976 + aux979 + aux980)<=1)=tv=SATLiteral(7935))
-7935 3945 0
-7935 3939 3944 0
-7935 3940 0
-7935 3942 0
-7935 3930 3944 0
-7935 3930 3939 0
-7935 3930 3940 0
-7935 3930 3942 0
-7935 3931 0
-7935 3931 3939 0
-7935 3931 3940 0
-7935 3931 3942 0
7935 -3931 -3939 -3944 0
7935 -3930 -3940 -3944 0
7935 -3930 -3939 -3945 0
c ((1<=(aux976 + aux979 + aux980))=tv=SATLiteral(7936))
-7936 -3930 -3939 -3944 0
7936 3944 0
7936 3939 0
7936 3940 0
7936 3942 0
7936 3930 0
7936 3930 3939 0
7936 3930 3940 0
7936 3930 3942 0
7936 3931 0
7936 3931 3939 0
7936 3931 3940 0
7936 3931 3942 0
c (((aux982 + aux985 + aux986)<=1)=tv=SATLiteral(7937))
-7937 3969 0
-7937 3963 3968 0
-7937 3964 0
-7937 3966 0
-7937 3954 3968 0
-7937 3954 3963 0
-7937 3954 3964 0
-7937 3954 3966 0
-7937 3955 0
-7937 3955 3963 0
-7937 3955 3964 0
-7937 3955 3966 0
7937 -3955 -3963 -3968 0
7937 -3954 -3964 -3968 0
7937 -3954 -3963 -3969 0
c ((1<=(aux982 + aux985 + aux986))=tv=SATLiteral(7938))
-7938 -3954 -3963 -3968 0
7938 3968 0
7938 3963 0
7938 3964 0
7938 3966 0
7938 3954 0
7938 3954 3963 0
7938 3954 3964 0
7938 3954 3966 0
7938 3955 0
7938 3955 3963 0
7938 3955 3964 0
7938 3955 3966 0
c (((aux988 + aux991 + aux992)<=1)=tv=SATLiteral(7939))
-7939 3993 0
-7939 3987 3992 0
-7939 3988 0
-7939 3990 0
-7939 3978 3992 0
-7939 3978 3987 0
-7939 3978 3988 0
-7939 3978 3990 0
-7939 3979 0
-7939 3979 3987 0
-7939 3979 3988 0
-7939 3979 3990 0
7939 -3979 -3987 -3992 0
7939 -3978 -3988 -3992 0
7939 -3978 -3987 -3993 0
c ((1<=(aux988 + aux991 + aux992))=tv=SATLiteral(7940))
-7940 -3978 -3987 -3992 0
7940 3992 0
7940 3987 0
7940 3988 0
7940 3990 0
7940 3978 0
7940 3978 3987 0
7940 3978 3988 0
7940 3978 3990 0
7940 3979 0
7940 3979 3987 0
7940 3979 3988 0
7940 3979 3990 0
c (((aux994 + aux997 + aux998)<=1)=tv=SATLiteral(7941))
-7941 4017 0
-7941 4011 4016 0
-7941 4012 0
-7941 4014 0
-7941 4002 4016 0
-7941 4002 4011 0
-7941 4002 4012 0
-7941 4002 4014 0
-7941 4003 0
-7941 4003 4011 0
-7941 4003 4012 0
-7941 4003 4014 0
7941 -4003 -4011 -4016 0
7941 -4002 -4012 -4016 0
7941 -4002 -4011 -4017 0
c ((1<=(aux994 + aux997 + aux998))=tv=SATLiteral(7942))
-7942 -4002 -4011 -4016 0
7942 4016 0
7942 4011 0
7942 4012 0
7942 4014 0
7942 4002 0
7942 4002 4011 0
7942 4002 4012 0
7942 4002 4014 0
7942 4003 0
7942 4003 4011 0
7942 4003 4012 0
7942 4003 4014 0
c (((aux1000 + aux1003 + aux1004)<=1)=tv=SATLiteral(7943))
-7943 4041 0
-7943 4035 4040 0
-7943 4036 0
-7943 4038 0
-7943 4026 4040 0
-7943 4026 4035 0
-7943 4026 4036 0
-7943 4026 4038 0
-7943 4027 0
-7943 4027 4035 0
-7943 4027 4036 0
-7943 4027 4038 0
7943 -4027 -4035 -4040 0
7943 -4026 -4036 -4040 0
7943 -4026 -4035 -4041 0
c ((1<=(aux1000 + aux1003 + aux1004))=tv=SATLiteral(7944))
-7944 -4026 -4035 -4040 0
7944 4040 0
7944 4035 0
7944 4036 0
7944 4038 0
7944 4026 0
7944 4026 4035 0
7944 4026 4036 0
7944 4026 4038 0
7944 4027 0
7944 4027 4035 0
7944 4027 4036 0
7944 4027 4038 0
c (((aux1006 + aux1009 + aux1010)<=1)=tv=SATLiteral(7945))
-7945 4065 0
-7945 4059 4064 0
-7945 4060 0
-7945 4062 0
-7945 4050 4064 0
-7945 4050 4059 0
-7945 4050 4060 0
-7945 4050 4062 0
-7945 4051 0
-7945 4051 4059 0
-7945 4051 4060 0
-7945 4051 4062 0
7945 -4051 -4059 -4064 0
7945 -4050 -4060 -4064 0
7945 -4050 -4059 -4065 0
c ((1<=(aux1006 + aux1009 + aux1010))=tv=SATLiteral(7946))
-7946 -4050 -4059 -4064 0
7946 4064 0
7946 4059 0
7946 4060 0
7946 4062 0
7946 4050 0
7946 4050 4059 0
7946 4050 4060 0
7946 4050 4062 0
7946 4051 0
7946 4051 4059 0
7946 4051 4060 0
7946 4051 4062 0
c (((aux1012 + aux1015 + aux1016)<=1)=tv=SATLiteral(7947))
-7947 4089 0
-7947 4083 4088 0
-7947 4084 0
-7947 4086 0
-7947 4074 4088 0
-7947 4074 4083 0
-7947 4074 4084 0
-7947 4074 4086 0
-7947 4075 0
-7947 4075 4083 0
-7947 4075 4084 0
-7947 4075 4086 0
7947 -4075 -4083 -4088 0
7947 -4074 -4084 -4088 0
7947 -4074 -4083 -4089 0
c ((1<=(aux1012 + aux1015 + aux1016))=tv=SATLiteral(7948))
-7948 -4074 -4083 -4088 0
7948 4088 0
7948 4083 0
7948 4084 0
7948 4086 0
7948 4074 0
7948 4074 4083 0
7948 4074 4084 0
7948 4074 4086 0
7948 4075 0
7948 4075 4083 0
7948 4075 4084 0
7948 4075 4086 0
c (((aux1018 + aux1021 + aux1022)<=1)=tv=SATLiteral(7949))
-7949 4113 0
-7949 4107 4112 0
-7949 4108 0
-7949 4110 0
-7949 4098 4112 0
-7949 4098 4107 0
-7949 4098 4108 0
-7949 4098 4110 0
-7949 4099 0
-7949 4099 4107 0
-7949 4099 4108 0
-7949 4099 4110 0
7949 -4099 -4107 -4112 0
7949 -4098 -4108 -4112 0
7949 -4098 -4107 -4113 0
c ((1<=(aux1018 + aux1021 + aux1022))=tv=SATLiteral(7950))
-7950 -4098 -4107 -4112 0
7950 4112 0
7950 4107 0
7950 4108 0
7950 4110 0
7950 4098 0
7950 4098 4107 0
7950 4098 4108 0
7950 4098 4110 0
7950 4099 0
7950 4099 4107 0
7950 4099 4108 0
7950 4099 4110 0
c (((aux1024 + aux1027 + aux1028)<=1)=tv=SATLiteral(7951))
-7951 4137 0
-7951 4131 4136 0
-7951 4132 0
-7951 4134 0
-7951 4122 4136 0
-7951 4122 4131 0
-7951 4122 4132 0
-7951 4122 4134 0
-7951 4123 0
-7951 4123 4131 0
-7951 4123 4132 0
-7951 4123 4134 0
7951 -4123 -4131 -4136 0
7951 -4122 -4132 -4136 0
7951 -4122 -4131 -4137 0
c ((1<=(aux1024 + aux1027 + aux1028))=tv=SATLiteral(7952))
-7952 -4122 -4131 -4136 0
7952 4136 0
7952 4131 0
7952 4132 0
7952 4134 0
7952 4122 0
7952 4122 4131 0
7952 4122 4132 0
7952 4122 4134 0
7952 4123 0
7952 4123 4131 0
7952 4123 4132 0
7952 4123 4134 0
c (((aux1030 + aux1033 + aux1034)<=1)=tv=SATLiteral(7953))
-7953 4161 0
-7953 4155 4160 0
-7953 4156 0
-7953 4158 0
-7953 4146 4160 0
-7953 4146 4155 0
-7953 4146 4156 0
-7953 4146 4158 0
-7953 4147 0
-7953 4147 4155 0
-7953 4147 4156 0
-7953 4147 4158 0
7953 -4147 -4155 -4160 0
7953 -4146 -4156 -4160 0
7953 -4146 -4155 -4161 0
c ((1<=(aux1030 + aux1033 + aux1034))=tv=SATLiteral(7954))
-7954 -4146 -4155 -4160 0
7954 4160 0
7954 4155 0
7954 4156 0
7954 4158 0
7954 4146 0
7954 4146 4155 0
7954 4146 4156 0
7954 4146 4158 0
7954 4147 0
7954 4147 4155 0
7954 4147 4156 0
7954 4147 4158 0
c (((aux1036 + aux1039 + aux1040)<=1)=tv=SATLiteral(7955))
-7955 4185 0
-7955 4179 4184 0
-7955 4180 0
-7955 4182 0
-7955 4170 4184 0
-7955 4170 4179 0
-7955 4170 4180 0
-7955 4170 4182 0
-7955 4171 0
-7955 4171 4179 0
-7955 4171 4180 0
-7955 4171 4182 0
7955 -4171 -4179 -4184 0
7955 -4170 -4180 -4184 0
7955 -4170 -4179 -4185 0
c ((1<=(aux1036 + aux1039 + aux1040))=tv=SATLiteral(7956))
-7956 -4170 -4179 -4184 0
7956 4184 0
7956 4179 0
7956 4180 0
7956 4182 0
7956 4170 0
7956 4170 4179 0
7956 4170 4180 0
7956 4170 4182 0
7956 4171 0
7956 4171 4179 0
7956 4171 4180 0
7956 4171 4182 0
c (((aux1042 + aux1045 + aux1046)<=1)=tv=SATLiteral(7957))
-7957 4209 0
-7957 4203 4208 0
-7957 4204 0
-7957 4206 0
-7957 4194 4208 0
-7957 4194 4203 0
-7957 4194 4204 0
-7957 4194 4206 0
-7957 4195 0
-7957 4195 4203 0
-7957 4195 4204 0
-7957 4195 4206 0
7957 -4195 -4203 -4208 0
7957 -4194 -4204 -4208 0
7957 -4194 -4203 -4209 0
c ((1<=(aux1042 + aux1045 + aux1046))=tv=SATLiteral(7958))
-7958 -4194 -4203 -4208 0
7958 4208 0
7958 4203 0
7958 4204 0
7958 4206 0
7958 4194 0
7958 4194 4203 0
7958 4194 4204 0
7958 4194 4206 0
7958 4195 0
7958 4195 4203 0
7958 4195 4204 0
7958 4195 4206 0
c (((aux1048 + aux1051 + aux1052)<=1)=tv=SATLiteral(7959))
-7959 4233 0
-7959 4227 4232 0
-7959 4228 0
-7959 4230 0
-7959 4218 4232 0
-7959 4218 4227 0
-7959 4218 4228 0
-7959 4218 4230 0
-7959 4219 0
-7959 4219 4227 0
-7959 4219 4228 0
-7959 4219 4230 0
7959 -4219 -4227 -4232 0
7959 -4218 -4228 -4232 0
7959 -4218 -4227 -4233 0
c ((1<=(aux1048 + aux1051 + aux1052))=tv=SATLiteral(7960))
-7960 -4218 -4227 -4232 0
7960 4232 0
7960 4227 0
7960 4228 0
7960 4230 0
7960 4218 0
7960 4218 4227 0
7960 4218 4228 0
7960 4218 4230 0
7960 4219 0
7960 4219 4227 0
7960 4219 4228 0
7960 4219 4230 0
c (((aux1054 + aux1057 + aux1058)<=1)=tv=SATLiteral(7961))
-7961 4257 0
-7961 4251 4256 0
-7961 4252 0
-7961 4254 0
-7961 4242 4256 0
-7961 4242 4251 0
-7961 4242 4252 0
-7961 4242 4254 0
-7961 4243 0
-7961 4243 4251 0
-7961 4243 4252 0
-7961 4243 4254 0
7961 -4243 -4251 -4256 0
7961 -4242 -4252 -4256 0
7961 -4242 -4251 -4257 0
c ((1<=(aux1054 + aux1057 + aux1058))=tv=SATLiteral(7962))
-7962 -4242 -4251 -4256 0
7962 4256 0
7962 4251 0
7962 4252 0
7962 4254 0
7962 4242 0
7962 4242 4251 0
7962 4242 4252 0
7962 4242 4254 0
7962 4243 0
7962 4243 4251 0
7962 4243 4252 0
7962 4243 4254 0
c (((aux1060 + aux1063 + aux1064)<=1)=tv=SATLiteral(7963))
-7963 4281 0
-7963 4275 4280 0
-7963 4276 0
-7963 4278 0
-7963 4266 4280 0
-7963 4266 4275 0
-7963 4266 4276 0
-7963 4266 4278 0
-7963 4267 0
-7963 4267 4275 0
-7963 4267 4276 0
-7963 4267 4278 0
7963 -4267 -4275 -4280 0
7963 -4266 -4276 -4280 0
7963 -4266 -4275 -4281 0
c ((1<=(aux1060 + aux1063 + aux1064))=tv=SATLiteral(7964))
-7964 -4266 -4275 -4280 0
7964 4280 0
7964 4275 0
7964 4276 0
7964 4278 0
7964 4266 0
7964 4266 4275 0
7964 4266 4276 0
7964 4266 4278 0
7964 4267 0
7964 4267 4275 0
7964 4267 4276 0
7964 4267 4278 0
c (((aux1066 + aux1069 + aux1070)<=1)=tv=SATLiteral(7965))
-7965 4305 0
-7965 4299 4304 0
-7965 4300 0
-7965 4302 0
-7965 4290 4304 0
-7965 4290 4299 0
-7965 4290 4300 0
-7965 4290 4302 0
-7965 4291 0
-7965 4291 4299 0
-7965 4291 4300 0
-7965 4291 4302 0
7965 -4291 -4299 -4304 0
7965 -4290 -4300 -4304 0
7965 -4290 -4299 -4305 0
c ((1<=(aux1066 + aux1069 + aux1070))=tv=SATLiteral(7966))
-7966 -4290 -4299 -4304 0
7966 4304 0
7966 4299 0
7966 4300 0
7966 4302 0
7966 4290 0
7966 4290 4299 0
7966 4290 4300 0
7966 4290 4302 0
7966 4291 0
7966 4291 4299 0
7966 4291 4300 0
7966 4291 4302 0
c (((aux1072 + aux1075 + aux1076)<=1)=tv=SATLiteral(7967))
-7967 4329 0
-7967 4323 4328 0
-7967 4324 0
-7967 4326 0
-7967 4314 4328 0
-7967 4314 4323 0
-7967 4314 4324 0
-7967 4314 4326 0
-7967 4315 0
-7967 4315 4323 0
-7967 4315 4324 0
-7967 4315 4326 0
7967 -4315 -4323 -4328 0
7967 -4314 -4324 -4328 0
7967 -4314 -4323 -4329 0
c ((1<=(aux1072 + aux1075 + aux1076))=tv=SATLiteral(7968))
-7968 -4314 -4323 -4328 0
7968 4328 0
7968 4323 0
7968 4324 0
7968 4326 0
7968 4314 0
7968 4314 4323 0
7968 4314 4324 0
7968 4314 4326 0
7968 4315 0
7968 4315 4323 0
7968 4315 4324 0
7968 4315 4326 0
c (((aux1078 + aux1081 + aux1082)<=1)=tv=SATLiteral(7969))
-7969 4353 0
-7969 4347 4352 0
-7969 4348 0
-7969 4350 0
-7969 4338 4352 0
-7969 4338 4347 0
-7969 4338 4348 0
-7969 4338 4350 0
-7969 4339 0
-7969 4339 4347 0
-7969 4339 4348 0
-7969 4339 4350 0
7969 -4339 -4347 -4352 0
7969 -4338 -4348 -4352 0
7969 -4338 -4347 -4353 0
c ((1<=(aux1078 + aux1081 + aux1082))=tv=SATLiteral(7970))
-7970 -4338 -4347 -4352 0
7970 4352 0
7970 4347 0
7970 4348 0
7970 4350 0
7970 4338 0
7970 4338 4347 0
7970 4338 4348 0
7970 4338 4350 0
7970 4339 0
7970 4339 4347 0
7970 4339 4348 0
7970 4339 4350 0
c (((aux1084 + aux1087 + aux1088)<=1)=tv=SATLiteral(7971))
-7971 4377 0
-7971 4371 4376 0
-7971 4372 0
-7971 4374 0
-7971 4362 4376 0
-7971 4362 4371 0
-7971 4362 4372 0
-7971 4362 4374 0
-7971 4363 0
-7971 4363 4371 0
-7971 4363 4372 0
-7971 4363 4374 0
7971 -4363 -4371 -4376 0
7971 -4362 -4372 -4376 0
7971 -4362 -4371 -4377 0
c ((1<=(aux1084 + aux1087 + aux1088))=tv=SATLiteral(7972))
-7972 -4362 -4371 -4376 0
7972 4376 0
7972 4371 0
7972 4372 0
7972 4374 0
7972 4362 0
7972 4362 4371 0
7972 4362 4372 0
7972 4362 4374 0
7972 4363 0
7972 4363 4371 0
7972 4363 4372 0
7972 4363 4374 0
c (((aux1090 + aux1093 + aux1094)<=1)=tv=SATLiteral(7973))
-7973 4401 0
-7973 4395 4400 0
-7973 4396 0
-7973 4398 0
-7973 4386 4400 0
-7973 4386 4395 0
-7973 4386 4396 0
-7973 4386 4398 0
-7973 4387 0
-7973 4387 4395 0
-7973 4387 4396 0
-7973 4387 4398 0
7973 -4387 -4395 -4400 0
7973 -4386 -4396 -4400 0
7973 -4386 -4395 -4401 0
c ((1<=(aux1090 + aux1093 + aux1094))=tv=SATLiteral(7974))
-7974 -4386 -4395 -4400 0
7974 4400 0
7974 4395 0
7974 4396 0
7974 4398 0
7974 4386 0
7974 4386 4395 0
7974 4386 4396 0
7974 4386 4398 0
7974 4387 0
7974 4387 4395 0
7974 4387 4396 0
7974 4387 4398 0
c (((aux1096 + aux1099 + aux1100)<=1)=tv=SATLiteral(7975))
-7975 4425 0
-7975 4419 4424 0
-7975 4420 0
-7975 4422 0
-7975 4410 4424 0
-7975 4410 4419 0
-7975 4410 4420 0
-7975 4410 4422 0
-7975 4411 0
-7975 4411 4419 0
-7975 4411 4420 0
-7975 4411 4422 0
7975 -4411 -4419 -4424 0
7975 -4410 -4420 -4424 0
7975 -4410 -4419 -4425 0
c ((1<=(aux1096 + aux1099 + aux1100))=tv=SATLiteral(7976))
-7976 -4410 -4419 -4424 0
7976 4424 0
7976 4419 0
7976 4420 0
7976 4422 0
7976 4410 0
7976 4410 4419 0
7976 4410 4420 0
7976 4410 4422 0
7976 4411 0
7976 4411 4419 0
7976 4411 4420 0
7976 4411 4422 0
c (((aux1102 + aux1105 + aux1106)<=1)=tv=SATLiteral(7977))
-7977 4449 0
-7977 4443 4448 0
-7977 4444 0
-7977 4446 0
-7977 4434 4448 0
-7977 4434 4443 0
-7977 4434 4444 0
-7977 4434 4446 0
-7977 4435 0
-7977 4435 4443 0
-7977 4435 4444 0
-7977 4435 4446 0
7977 -4435 -4443 -4448 0
7977 -4434 -4444 -4448 0
7977 -4434 -4443 -4449 0
c ((1<=(aux1102 + aux1105 + aux1106))=tv=SATLiteral(7978))
-7978 -4434 -4443 -4448 0
7978 4448 0
7978 4443 0
7978 4444 0
7978 4446 0
7978 4434 0
7978 4434 4443 0
7978 4434 4444 0
7978 4434 4446 0
7978 4435 0
7978 4435 4443 0
7978 4435 4444 0
7978 4435 4446 0
c (((aux1108 + aux1111 + aux1112)<=1)=tv=SATLiteral(7979))
-7979 4473 0
-7979 4467 4472 0
-7979 4468 0
-7979 4470 0
-7979 4458 4472 0
-7979 4458 4467 0
-7979 4458 4468 0
-7979 4458 4470 0
-7979 4459 0
-7979 4459 4467 0
-7979 4459 4468 0
-7979 4459 4470 0
7979 -4459 -4467 -4472 0
7979 -4458 -4468 -4472 0
7979 -4458 -4467 -4473 0
c ((1<=(aux1108 + aux1111 + aux1112))=tv=SATLiteral(7980))
-7980 -4458 -4467 -4472 0
7980 4472 0
7980 4467 0
7980 4468 0
7980 4470 0
7980 4458 0
7980 4458 4467 0
7980 4458 4468 0
7980 4458 4470 0
7980 4459 0
7980 4459 4467 0
7980 4459 4468 0
7980 4459 4470 0
c (((aux1114 + aux1117 + aux1118)<=1)=tv=SATLiteral(7981))
-7981 4497 0
-7981 4491 4496 0
-7981 4492 0
-7981 4494 0
-7981 4482 4496 0
-7981 4482 4491 0
-7981 4482 4492 0
-7981 4482 4494 0
-7981 4483 0
-7981 4483 4491 0
-7981 4483 4492 0
-7981 4483 4494 0
7981 -4483 -4491 -4496 0
7981 -4482 -4492 -4496 0
7981 -4482 -4491 -4497 0
c ((1<=(aux1114 + aux1117 + aux1118))=tv=SATLiteral(7982))
-7982 -4482 -4491 -4496 0
7982 4496 0
7982 4491 0
7982 4492 0
7982 4494 0
7982 4482 0
7982 4482 4491 0
7982 4482 4492 0
7982 4482 4494 0
7982 4483 0
7982 4483 4491 0
7982 4483 4492 0
7982 4483 4494 0
c (((aux1120 + aux1123 + aux1124)<=1)=tv=SATLiteral(7983))
-7983 4521 0
-7983 4515 4520 0
-7983 4516 0
-7983 4518 0
-7983 4506 4520 0
-7983 4506 4515 0
-7983 4506 4516 0
-7983 4506 4518 0
-7983 4507 0
-7983 4507 4515 0
-7983 4507 4516 0
-7983 4507 4518 0
7983 -4507 -4515 -4520 0
7983 -4506 -4516 -4520 0
7983 -4506 -4515 -4521 0
c ((1<=(aux1120 + aux1123 + aux1124))=tv=SATLiteral(7984))
-7984 -4506 -4515 -4520 0
7984 4520 0
7984 4515 0
7984 4516 0
7984 4518 0
7984 4506 0
7984 4506 4515 0
7984 4506 4516 0
7984 4506 4518 0
7984 4507 0
7984 4507 4515 0
7984 4507 4516 0
7984 4507 4518 0
c (((aux1126 + aux1129 + aux1130)<=1)=tv=SATLiteral(7985))
-7985 4545 0
-7985 4539 4544 0
-7985 4540 0
-7985 4542 0
-7985 4530 4544 0
-7985 4530 4539 0
-7985 4530 4540 0
-7985 4530 4542 0
-7985 4531 0
-7985 4531 4539 0
-7985 4531 4540 0
-7985 4531 4542 0
7985 -4531 -4539 -4544 0
7985 -4530 -4540 -4544 0
7985 -4530 -4539 -4545 0
c ((1<=(aux1126 + aux1129 + aux1130))=tv=SATLiteral(7986))
-7986 -4530 -4539 -4544 0
7986 4544 0
7986 4539 0
7986 4540 0
7986 4542 0
7986 4530 0
7986 4530 4539 0
7986 4530 4540 0
7986 4530 4542 0
7986 4531 0
7986 4531 4539 0
7986 4531 4540 0
7986 4531 4542 0
c (((aux1132 + aux1135 + aux1136)<=1)=tv=SATLiteral(7987))
-7987 4569 0
-7987 4563 4568 0
-7987 4564 0
-7987 4566 0
-7987 4554 4568 0
-7987 4554 4563 0
-7987 4554 4564 0
-7987 4554 4566 0
-7987 4555 0
-7987 4555 4563 0
-7987 4555 4564 0
-7987 4555 4566 0
7987 -4555 -4563 -4568 0
7987 -4554 -4564 -4568 0
7987 -4554 -4563 -4569 0
c ((1<=(aux1132 + aux1135 + aux1136))=tv=SATLiteral(7988))
-7988 -4554 -4563 -4568 0
7988 4568 0
7988 4563 0
7988 4564 0
7988 4566 0
7988 4554 0
7988 4554 4563 0
7988 4554 4564 0
7988 4554 4566 0
7988 4555 0
7988 4555 4563 0
7988 4555 4564 0
7988 4555 4566 0
c (((aux1138 + aux1141 + aux1142)<=1)=tv=SATLiteral(7989))
-7989 4593 0
-7989 4587 4592 0
-7989 4588 0
-7989 4590 0
-7989 4578 4592 0
-7989 4578 4587 0
-7989 4578 4588 0
-7989 4578 4590 0
-7989 4579 0
-7989 4579 4587 0
-7989 4579 4588 0
-7989 4579 4590 0
7989 -4579 -4587 -4592 0
7989 -4578 -4588 -4592 0
7989 -4578 -4587 -4593 0
c ((1<=(aux1138 + aux1141 + aux1142))=tv=SATLiteral(7990))
-7990 -4578 -4587 -4592 0
7990 4592 0
7990 4587 0
7990 4588 0
7990 4590 0
7990 4578 0
7990 4578 4587 0
7990 4578 4588 0
7990 4578 4590 0
7990 4579 0
7990 4579 4587 0
7990 4579 4588 0
7990 4579 4590 0
c (((aux1144 + aux1147 + aux1148)<=1)=tv=SATLiteral(7991))
-7991 4617 0
-7991 4611 4616 0
-7991 4612 0
-7991 4614 0
-7991 4602 4616 0
-7991 4602 4611 0
-7991 4602 4612 0
-7991 4602 4614 0
-7991 4603 0
-7991 4603 4611 0
-7991 4603 4612 0
-7991 4603 4614 0
7991 -4603 -4611 -4616 0
7991 -4602 -4612 -4616 0
7991 -4602 -4611 -4617 0
c ((1<=(aux1144 + aux1147 + aux1148))=tv=SATLiteral(7992))
-7992 -4602 -4611 -4616 0
7992 4616 0
7992 4611 0
7992 4612 0
7992 4614 0
7992 4602 0
7992 4602 4611 0
7992 4602 4612 0
7992 4602 4614 0
7992 4603 0
7992 4603 4611 0
7992 4603 4612 0
7992 4603 4614 0
c (((aux1150 + aux1153 + aux1154)<=1)=tv=SATLiteral(7993))
-7993 4641 0
-7993 4635 4640 0
-7993 4636 0
-7993 4638 0
-7993 4626 4640 0
-7993 4626 4635 0
-7993 4626 4636 0
-7993 4626 4638 0
-7993 4627 0
-7993 4627 4635 0
-7993 4627 4636 0
-7993 4627 4638 0
7993 -4627 -4635 -4640 0
7993 -4626 -4636 -4640 0
7993 -4626 -4635 -4641 0
c ((1<=(aux1150 + aux1153 + aux1154))=tv=SATLiteral(7994))
-7994 -4626 -4635 -4640 0
7994 4640 0
7994 4635 0
7994 4636 0
7994 4638 0
7994 4626 0
7994 4626 4635 0
7994 4626 4636 0
7994 4626 4638 0
7994 4627 0
7994 4627 4635 0
7994 4627 4636 0
7994 4627 4638 0
c (((aux1156 + aux1159 + aux1160)<=1)=tv=SATLiteral(7995))
-7995 4665 0
-7995 4659 4664 0
-7995 4660 0
-7995 4662 0
-7995 4650 4664 0
-7995 4650 4659 0
-7995 4650 4660 0
-7995 4650 4662 0
-7995 4651 0
-7995 4651 4659 0
-7995 4651 4660 0
-7995 4651 4662 0
7995 -4651 -4659 -4664 0
7995 -4650 -4660 -4664 0
7995 -4650 -4659 -4665 0
c ((1<=(aux1156 + aux1159 + aux1160))=tv=SATLiteral(7996))
-7996 -4650 -4659 -4664 0
7996 4664 0
7996 4659 0
7996 4660 0
7996 4662 0
7996 4650 0
7996 4650 4659 0
7996 4650 4660 0
7996 4650 4662 0
7996 4651 0
7996 4651 4659 0
7996 4651 4660 0
7996 4651 4662 0
c (((aux1162 + aux1165 + aux1166)<=1)=tv=SATLiteral(7997))
-7997 4689 0
-7997 4683 4688 0
-7997 4684 0
-7997 4686 0
-7997 4674 4688 0
-7997 4674 4683 0
-7997 4674 4684 0
-7997 4674 4686 0
-7997 4675 0
-7997 4675 4683 0
-7997 4675 4684 0
-7997 4675 4686 0
7997 -4675 -4683 -4688 0
7997 -4674 -4684 -4688 0
7997 -4674 -4683 -4689 0
c ((1<=(aux1162 + aux1165 + aux1166))=tv=SATLiteral(7998))
-7998 -4674 -4683 -4688 0
7998 4688 0
7998 4683 0
7998 4684 0
7998 4686 0
7998 4674 0
7998 4674 4683 0
7998 4674 4684 0
7998 4674 4686 0
7998 4675 0
7998 4675 4683 0
7998 4675 4684 0
7998 4675 4686 0
c (((aux1168 + aux1171 + aux1172)<=1)=tv=SATLiteral(7999))
-7999 4713 0
-7999 4707 4712 0
-7999 4708 0
-7999 4710 0
-7999 4698 4712 0
-7999 4698 4707 0
-7999 4698 4708 0
-7999 4698 4710 0
-7999 4699 0
-7999 4699 4707 0
-7999 4699 4708 0
-7999 4699 4710 0
7999 -4699 -4707 -4712 0
7999 -4698 -4708 -4712 0
7999 -4698 -4707 -4713 0
c ((1<=(aux1168 + aux1171 + aux1172))=tv=SATLiteral(8000))
-8000 -4698 -4707 -4712 0
8000 4712 0
8000 4707 0
8000 4708 0
8000 4710 0
8000 4698 0
8000 4698 4707 0
8000 4698 4708 0
8000 4698 4710 0
8000 4699 0
8000 4699 4707 0
8000 4699 4708 0
8000 4699 4710 0
c (((aux1174 + aux1177 + aux1178)<=1)=tv=SATLiteral(8001))
-8001 4737 0
-8001 4731 4736 0
-8001 4732 0
-8001 4734 0
-8001 4722 4736 0
-8001 4722 4731 0
-8001 4722 4732 0
-8001 4722 4734 0
-8001 4723 0
-8001 4723 4731 0
-8001 4723 4732 0
-8001 4723 4734 0
8001 -4723 -4731 -4736 0
8001 -4722 -4732 -4736 0
8001 -4722 -4731 -4737 0
c ((1<=(aux1174 + aux1177 + aux1178))=tv=SATLiteral(8002))
-8002 -4722 -4731 -4736 0
8002 4736 0
8002 4731 0
8002 4732 0
8002 4734 0
8002 4722 0
8002 4722 4731 0
8002 4722 4732 0
8002 4722 4734 0
8002 4723 0
8002 4723 4731 0
8002 4723 4732 0
8002 4723 4734 0
c (((aux1180 + aux1183 + aux1184)<=1)=tv=SATLiteral(8003))
-8003 4761 0
-8003 4755 4760 0
-8003 4756 0
-8003 4758 0
-8003 4746 4760 0
-8003 4746 4755 0
-8003 4746 4756 0
-8003 4746 4758 0
-8003 4747 0
-8003 4747 4755 0
-8003 4747 4756 0
-8003 4747 4758 0
8003 -4747 -4755 -4760 0
8003 -4746 -4756 -4760 0
8003 -4746 -4755 -4761 0
c ((1<=(aux1180 + aux1183 + aux1184))=tv=SATLiteral(8004))
-8004 -4746 -4755 -4760 0
8004 4760 0
8004 4755 0
8004 4756 0
8004 4758 0
8004 4746 0
8004 4746 4755 0
8004 4746 4756 0
8004 4746 4758 0
8004 4747 0
8004 4747 4755 0
8004 4747 4756 0
8004 4747 4758 0
c (((aux1186 + aux1189 + aux1190)<=1)=tv=SATLiteral(8005))
-8005 4785 0
-8005 4779 4784 0
-8005 4780 0
-8005 4782 0
-8005 4770 4784 0
-8005 4770 4779 0
-8005 4770 4780 0
-8005 4770 4782 0
-8005 4771 0
-8005 4771 4779 0
-8005 4771 4780 0
-8005 4771 4782 0
8005 -4771 -4779 -4784 0
8005 -4770 -4780 -4784 0
8005 -4770 -4779 -4785 0
c ((1<=(aux1186 + aux1189 + aux1190))=tv=SATLiteral(8006))
-8006 -4770 -4779 -4784 0
8006 4784 0
8006 4779 0
8006 4780 0
8006 4782 0
8006 4770 0
8006 4770 4779 0
8006 4770 4780 0
8006 4770 4782 0
8006 4771 0
8006 4771 4779 0
8006 4771 4780 0
8006 4771 4782 0
c (((aux1192 + aux1195 + aux1196)<=1)=tv=SATLiteral(8007))
-8007 4809 0
-8007 4803 4808 0
-8007 4804 0
-8007 4806 0
-8007 4794 4808 0
-8007 4794 4803 0
-8007 4794 4804 0
-8007 4794 4806 0
-8007 4795 0
-8007 4795 4803 0
-8007 4795 4804 0
-8007 4795 4806 0
8007 -4795 -4803 -4808 0
8007 -4794 -4804 -4808 0
8007 -4794 -4803 -4809 0
c ((1<=(aux1192 + aux1195 + aux1196))=tv=SATLiteral(8008))
-8008 -4794 -4803 -4808 0
8008 4808 0
8008 4803 0
8008 4804 0
8008 4806 0
8008 4794 0
8008 4794 4803 0
8008 4794 4804 0
8008 4794 4806 0
8008 4795 0
8008 4795 4803 0
8008 4795 4804 0
8008 4795 4806 0
c (((aux1198 + aux1201 + aux1202)<=1)=tv=SATLiteral(8009))
-8009 4833 0
-8009 4827 4832 0
-8009 4828 0
-8009 4830 0
-8009 4818 4832 0
-8009 4818 4827 0
-8009 4818 4828 0
-8009 4818 4830 0
-8009 4819 0
-8009 4819 4827 0
-8009 4819 4828 0
-8009 4819 4830 0
8009 -4819 -4827 -4832 0
8009 -4818 -4828 -4832 0
8009 -4818 -4827 -4833 0
c ((1<=(aux1198 + aux1201 + aux1202))=tv=SATLiteral(8010))
-8010 -4818 -4827 -4832 0
8010 4832 0
8010 4827 0
8010 4828 0
8010 4830 0
8010 4818 0
8010 4818 4827 0
8010 4818 4828 0
8010 4818 4830 0
8010 4819 0
8010 4819 4827 0
8010 4819 4828 0
8010 4819 4830 0
c (((aux1204 + aux1207 + aux1208)<=1)=tv=SATLiteral(8011))
-8011 4857 0
-8011 4851 4856 0
-8011 4852 0
-8011 4854 0
-8011 4842 4856 0
-8011 4842 4851 0
-8011 4842 4852 0
-8011 4842 4854 0
-8011 4843 0
-8011 4843 4851 0
-8011 4843 4852 0
-8011 4843 4854 0
8011 -4843 -4851 -4856 0
8011 -4842 -4852 -4856 0
8011 -4842 -4851 -4857 0
c ((1<=(aux1204 + aux1207 + aux1208))=tv=SATLiteral(8012))
-8012 -4842 -4851 -4856 0
8012 4856 0
8012 4851 0
8012 4852 0
8012 4854 0
8012 4842 0
8012 4842 4851 0
8012 4842 4852 0
8012 4842 4854 0
8012 4843 0
8012 4843 4851 0
8012 4843 4852 0
8012 4843 4854 0
c (((aux1210 + aux1213 + aux1214)<=1)=tv=SATLiteral(8013))
-8013 4881 0
-8013 4875 4880 0
-8013 4876 0
-8013 4878 0
-8013 4866 4880 0
-8013 4866 4875 0
-8013 4866 4876 0
-8013 4866 4878 0
-8013 4867 0
-8013 4867 4875 0
-8013 4867 4876 0
-8013 4867 4878 0
8013 -4867 -4875 -4880 0
8013 -4866 -4876 -4880 0
8013 -4866 -4875 -4881 0
c ((1<=(aux1210 + aux1213 + aux1214))=tv=SATLiteral(8014))
-8014 -4866 -4875 -4880 0
8014 4880 0
8014 4875 0
8014 4876 0
8014 4878 0
8014 4866 0
8014 4866 4875 0
8014 4866 4876 0
8014 4866 4878 0
8014 4867 0
8014 4867 4875 0
8014 4867 4876 0
8014 4867 4878 0
c (((aux1216 + aux1219 + aux1220)<=1)=tv=SATLiteral(8015))
-8015 4905 0
-8015 4899 4904 0
-8015 4900 0
-8015 4902 0
-8015 4890 4904 0
-8015 4890 4899 0
-8015 4890 4900 0
-8015 4890 4902 0
-8015 4891 0
-8015 4891 4899 0
-8015 4891 4900 0
-8015 4891 4902 0
8015 -4891 -4899 -4904 0
8015 -4890 -4900 -4904 0
8015 -4890 -4899 -4905 0
c ((1<=(aux1216 + aux1219 + aux1220))=tv=SATLiteral(8016))
-8016 -4890 -4899 -4904 0
8016 4904 0
8016 4899 0
8016 4900 0
8016 4902 0
8016 4890 0
8016 4890 4899 0
8016 4890 4900 0
8016 4890 4902 0
8016 4891 0
8016 4891 4899 0
8016 4891 4900 0
8016 4891 4902 0
c (((aux1222 + aux1225 + aux1226)<=1)=tv=SATLiteral(8017))
-8017 4929 0
-8017 4923 4928 0
-8017 4924 0
-8017 4926 0
-8017 4914 4928 0
-8017 4914 4923 0
-8017 4914 4924 0
-8017 4914 4926 0
-8017 4915 0
-8017 4915 4923 0
-8017 4915 4924 0
-8017 4915 4926 0
8017 -4915 -4923 -4928 0
8017 -4914 -4924 -4928 0
8017 -4914 -4923 -4929 0
c ((1<=(aux1222 + aux1225 + aux1226))=tv=SATLiteral(8018))
-8018 -4914 -4923 -4928 0
8018 4928 0
8018 4923 0
8018 4924 0
8018 4926 0
8018 4914 0
8018 4914 4923 0
8018 4914 4924 0
8018 4914 4926 0
8018 4915 0
8018 4915 4923 0
8018 4915 4924 0
8018 4915 4926 0
c (((aux1228 + aux1231 + aux1232)<=1)=tv=SATLiteral(8019))
-8019 4953 0
-8019 4947 4952 0
-8019 4948 0
-8019 4950 0
-8019 4938 4952 0
-8019 4938 4947 0
-8019 4938 4948 0
-8019 4938 4950 0
-8019 4939 0
-8019 4939 4947 0
-8019 4939 4948 0
-8019 4939 4950 0
8019 -4939 -4947 -4952 0
8019 -4938 -4948 -4952 0
8019 -4938 -4947 -4953 0
c ((1<=(aux1228 + aux1231 + aux1232))=tv=SATLiteral(8020))
-8020 -4938 -4947 -4952 0
8020 4952 0
8020 4947 0
8020 4948 0
8020 4950 0
8020 4938 0
8020 4938 4947 0
8020 4938 4948 0
8020 4938 4950 0
8020 4939 0
8020 4939 4947 0
8020 4939 4948 0
8020 4939 4950 0
c (((aux1234 + aux1237 + aux1238)<=1)=tv=SATLiteral(8021))
-8021 4977 0
-8021 4971 4976 0
-8021 4972 0
-8021 4974 0
-8021 4962 4976 0
-8021 4962 4971 0
-8021 4962 4972 0
-8021 4962 4974 0
-8021 4963 0
-8021 4963 4971 0
-8021 4963 4972 0
-8021 4963 4974 0
8021 -4963 -4971 -4976 0
8021 -4962 -4972 -4976 0
8021 -4962 -4971 -4977 0
c ((1<=(aux1234 + aux1237 + aux1238))=tv=SATLiteral(8022))
-8022 -4962 -4971 -4976 0
8022 4976 0
8022 4971 0
8022 4972 0
8022 4974 0
8022 4962 0
8022 4962 4971 0
8022 4962 4972 0
8022 4962 4974 0
8022 4963 0
8022 4963 4971 0
8022 4963 4972 0
8022 4963 4974 0
c (((aux1240 + aux1243 + aux1244)<=1)=tv=SATLiteral(8023))
-8023 5001 0
-8023 4995 5000 0
-8023 4996 0
-8023 4998 0
-8023 4986 5000 0
-8023 4986 4995 0
-8023 4986 4996 0
-8023 4986 4998 0
-8023 4987 0
-8023 4987 4995 0
-8023 4987 4996 0
-8023 4987 4998 0
8023 -4987 -4995 -5000 0
8023 -4986 -4996 -5000 0
8023 -4986 -4995 -5001 0
c ((1<=(aux1240 + aux1243 + aux1244))=tv=SATLiteral(8024))
-8024 -4986 -4995 -5000 0
8024 5000 0
8024 4995 0
8024 4996 0
8024 4998 0
8024 4986 0
8024 4986 4995 0
8024 4986 4996 0
8024 4986 4998 0
8024 4987 0
8024 4987 4995 0
8024 4987 4996 0
8024 4987 4998 0
c (((aux1246 + aux1249 + aux1250)<=1)=tv=SATLiteral(8025))
-8025 5025 0
-8025 5019 5024 0
-8025 5020 0
-8025 5022 0
-8025 5010 5024 0
-8025 5010 5019 0
-8025 5010 5020 0
-8025 5010 5022 0
-8025 5011 0
-8025 5011 5019 0
-8025 5011 5020 0
-8025 5011 5022 0
8025 -5011 -5019 -5024 0
8025 -5010 -5020 -5024 0
8025 -5010 -5019 -5025 0
c ((1<=(aux1246 + aux1249 + aux1250))=tv=SATLiteral(8026))
-8026 -5010 -5019 -5024 0
8026 5024 0
8026 5019 0
8026 5020 0
8026 5022 0
8026 5010 0
8026 5010 5019 0
8026 5010 5020 0
8026 5010 5022 0
8026 5011 0
8026 5011 5019 0
8026 5011 5020 0
8026 5011 5022 0
c (((aux1252 + aux1255 + aux1256)<=1)=tv=SATLiteral(8027))
-8027 5049 0
-8027 5043 5048 0
-8027 5044 0
-8027 5046 0
-8027 5034 5048 0
-8027 5034 5043 0
-8027 5034 5044 0
-8027 5034 5046 0
-8027 5035 0
-8027 5035 5043 0
-8027 5035 5044 0
-8027 5035 5046 0
8027 -5035 -5043 -5048 0
8027 -5034 -5044 -5048 0
8027 -5034 -5043 -5049 0
c ((1<=(aux1252 + aux1255 + aux1256))=tv=SATLiteral(8028))
-8028 -5034 -5043 -5048 0
8028 5048 0
8028 5043 0
8028 5044 0
8028 5046 0
8028 5034 0
8028 5034 5043 0
8028 5034 5044 0
8028 5034 5046 0
8028 5035 0
8028 5035 5043 0
8028 5035 5044 0
8028 5035 5046 0
c (((aux1258 + aux1261 + aux1262)<=1)=tv=SATLiteral(8029))
-8029 5073 0
-8029 5067 5072 0
-8029 5068 0
-8029 5070 0
-8029 5058 5072 0
-8029 5058 5067 0
-8029 5058 5068 0
-8029 5058 5070 0
-8029 5059 0
-8029 5059 5067 0
-8029 5059 5068 0
-8029 5059 5070 0
8029 -5059 -5067 -5072 0
8029 -5058 -5068 -5072 0
8029 -5058 -5067 -5073 0
c ((1<=(aux1258 + aux1261 + aux1262))=tv=SATLiteral(8030))
-8030 -5058 -5067 -5072 0
8030 5072 0
8030 5067 0
8030 5068 0
8030 5070 0
8030 5058 0
8030 5058 5067 0
8030 5058 5068 0
8030 5058 5070 0
8030 5059 0
8030 5059 5067 0
8030 5059 5068 0
8030 5059 5070 0
c (((aux1264 + aux1267 + aux1268)<=1)=tv=SATLiteral(8031))
-8031 5097 0
-8031 5091 5096 0
-8031 5092 0
-8031 5094 0
-8031 5082 5096 0
-8031 5082 5091 0
-8031 5082 5092 0
-8031 5082 5094 0
-8031 5083 0
-8031 5083 5091 0
-8031 5083 5092 0
-8031 5083 5094 0
8031 -5083 -5091 -5096 0
8031 -5082 -5092 -5096 0
8031 -5082 -5091 -5097 0
c ((1<=(aux1264 + aux1267 + aux1268))=tv=SATLiteral(8032))
-8032 -5082 -5091 -5096 0
8032 5096 0
8032 5091 0
8032 5092 0
8032 5094 0
8032 5082 0
8032 5082 5091 0
8032 5082 5092 0
8032 5082 5094 0
8032 5083 0
8032 5083 5091 0
8032 5083 5092 0
8032 5083 5094 0
c (((aux1270 + aux1273 + aux1274)<=1)=tv=SATLiteral(8033))
-8033 5121 0
-8033 5115 5120 0
-8033 5116 0
-8033 5118 0
-8033 5106 5120 0
-8033 5106 5115 0
-8033 5106 5116 0
-8033 5106 5118 0
-8033 5107 0
-8033 5107 5115 0
-8033 5107 5116 0
-8033 5107 5118 0
8033 -5107 -5115 -5120 0
8033 -5106 -5116 -5120 0
8033 -5106 -5115 -5121 0
c ((1<=(aux1270 + aux1273 + aux1274))=tv=SATLiteral(8034))
-8034 -5106 -5115 -5120 0
8034 5120 0
8034 5115 0
8034 5116 0
8034 5118 0
8034 5106 0
8034 5106 5115 0
8034 5106 5116 0
8034 5106 5118 0
8034 5107 0
8034 5107 5115 0
8034 5107 5116 0
8034 5107 5118 0
c (((aux1276 + aux1279 + aux1280)<=1)=tv=SATLiteral(8035))
-8035 5145 0
-8035 5139 5144 0
-8035 5140 0
-8035 5142 0
-8035 5130 5144 0
-8035 5130 5139 0
-8035 5130 5140 0
-8035 5130 5142 0
-8035 5131 0
-8035 5131 5139 0
-8035 5131 5140 0
-8035 5131 5142 0
8035 -5131 -5139 -5144 0
8035 -5130 -5140 -5144 0
8035 -5130 -5139 -5145 0
c ((1<=(aux1276 + aux1279 + aux1280))=tv=SATLiteral(8036))
-8036 -5130 -5139 -5144 0
8036 5144 0
8036 5139 0
8036 5140 0
8036 5142 0
8036 5130 0
8036 5130 5139 0
8036 5130 5140 0
8036 5130 5142 0
8036 5131 0
8036 5131 5139 0
8036 5131 5140 0
8036 5131 5142 0
c (((aux1282 + aux1285 + aux1286)<=1)=tv=SATLiteral(8037))
-8037 5169 0
-8037 5163 5168 0
-8037 5164 0
-8037 5166 0
-8037 5154 5168 0
-8037 5154 5163 0
-8037 5154 5164 0
-8037 5154 5166 0
-8037 5155 0
-8037 5155 5163 0
-8037 5155 5164 0
-8037 5155 5166 0
8037 -5155 -5163 -5168 0
8037 -5154 -5164 -5168 0
8037 -5154 -5163 -5169 0
c ((1<=(aux1282 + aux1285 + aux1286))=tv=SATLiteral(8038))
-8038 -5154 -5163 -5168 0
8038 5168 0
8038 5163 0
8038 5164 0
8038 5166 0
8038 5154 0
8038 5154 5163 0
8038 5154 5164 0
8038 5154 5166 0
8038 5155 0
8038 5155 5163 0
8038 5155 5164 0
8038 5155 5166 0
c (((aux1288 + aux1291 + aux1292)<=1)=tv=SATLiteral(8039))
-8039 5193 0
-8039 5187 5192 0
-8039 5188 0
-8039 5190 0
-8039 5178 5192 0
-8039 5178 5187 0
-8039 5178 5188 0
-8039 5178 5190 0
-8039 5179 0
-8039 5179 5187 0
-8039 5179 5188 0
-8039 5179 5190 0
8039 -5179 -5187 -5192 0
8039 -5178 -5188 -5192 0
8039 -5178 -5187 -5193 0
c ((1<=(aux1288 + aux1291 + aux1292))=tv=SATLiteral(8040))
-8040 -5178 -5187 -5192 0
8040 5192 0
8040 5187 0
8040 5188 0
8040 5190 0
8040 5178 0
8040 5178 5187 0
8040 5178 5188 0
8040 5178 5190 0
8040 5179 0
8040 5179 5187 0
8040 5179 5188 0
8040 5179 5190 0
c (((aux1294 + aux1297 + aux1298)<=1)=tv=SATLiteral(8041))
-8041 5217 0
-8041 5211 5216 0
-8041 5212 0
-8041 5214 0
-8041 5202 5216 0
-8041 5202 5211 0
-8041 5202 5212 0
-8041 5202 5214 0
-8041 5203 0
-8041 5203 5211 0
-8041 5203 5212 0
-8041 5203 5214 0
8041 -5203 -5211 -5216 0
8041 -5202 -5212 -5216 0
8041 -5202 -5211 -5217 0
c ((1<=(aux1294 + aux1297 + aux1298))=tv=SATLiteral(8042))
-8042 -5202 -5211 -5216 0
8042 5216 0
8042 5211 0
8042 5212 0
8042 5214 0
8042 5202 0
8042 5202 5211 0
8042 5202 5212 0
8042 5202 5214 0
8042 5203 0
8042 5203 5211 0
8042 5203 5212 0
8042 5203 5214 0
c (((aux1300 + aux1303 + aux1304)<=1)=tv=SATLiteral(8043))
-8043 5241 0
-8043 5235 5240 0
-8043 5236 0
-8043 5238 0
-8043 5226 5240 0
-8043 5226 5235 0
-8043 5226 5236 0
-8043 5226 5238 0
-8043 5227 0
-8043 5227 5235 0
-8043 5227 5236 0
-8043 5227 5238 0
8043 -5227 -5235 -5240 0
8043 -5226 -5236 -5240 0
8043 -5226 -5235 -5241 0
c ((1<=(aux1300 + aux1303 + aux1304))=tv=SATLiteral(8044))
-8044 -5226 -5235 -5240 0
8044 5240 0
8044 5235 0
8044 5236 0
8044 5238 0
8044 5226 0
8044 5226 5235 0
8044 5226 5236 0
8044 5226 5238 0
8044 5227 0
8044 5227 5235 0
8044 5227 5236 0
8044 5227 5238 0
c (((aux1306 + aux1309 + aux1310)<=1)=tv=SATLiteral(8045))
-8045 5265 0
-8045 5259 5264 0
-8045 5260 0
-8045 5262 0
-8045 5250 5264 0
-8045 5250 5259 0
-8045 5250 5260 0
-8045 5250 5262 0
-8045 5251 0
-8045 5251 5259 0
-8045 5251 5260 0
-8045 5251 5262 0
8045 -5251 -5259 -5264 0
8045 -5250 -5260 -5264 0
8045 -5250 -5259 -5265 0
c ((1<=(aux1306 + aux1309 + aux1310))=tv=SATLiteral(8046))
-8046 -5250 -5259 -5264 0
8046 5264 0
8046 5259 0
8046 5260 0
8046 5262 0
8046 5250 0
8046 5250 5259 0
8046 5250 5260 0
8046 5250 5262 0
8046 5251 0
8046 5251 5259 0
8046 5251 5260 0
8046 5251 5262 0
c (((aux1312 + aux1315 + aux1316)<=1)=tv=SATLiteral(8047))
-8047 5289 0
-8047 5283 5288 0
-8047 5284 0
-8047 5286 0
-8047 5274 5288 0
-8047 5274 5283 0
-8047 5274 5284 0
-8047 5274 5286 0
-8047 5275 0
-8047 5275 5283 0
-8047 5275 5284 0
-8047 5275 5286 0
8047 -5275 -5283 -5288 0
8047 -5274 -5284 -5288 0
8047 -5274 -5283 -5289 0
c ((1<=(aux1312 + aux1315 + aux1316))=tv=SATLiteral(8048))
-8048 -5274 -5283 -5288 0
8048 5288 0
8048 5283 0
8048 5284 0
8048 5286 0
8048 5274 0
8048 5274 5283 0
8048 5274 5284 0
8048 5274 5286 0
8048 5275 0
8048 5275 5283 0
8048 5275 5284 0
8048 5275 5286 0
c (((aux1318 + aux1321 + aux1322)<=1)=tv=SATLiteral(8049))
-8049 5313 0
-8049 5307 5312 0
-8049 5308 0
-8049 5310 0
-8049 5298 5312 0
-8049 5298 5307 0
-8049 5298 5308 0
-8049 5298 5310 0
-8049 5299 0
-8049 5299 5307 0
-8049 5299 5308 0
-8049 5299 5310 0
8049 -5299 -5307 -5312 0
8049 -5298 -5308 -5312 0
8049 -5298 -5307 -5313 0
c ((1<=(aux1318 + aux1321 + aux1322))=tv=SATLiteral(8050))
-8050 -5298 -5307 -5312 0
8050 5312 0
8050 5307 0
8050 5308 0
8050 5310 0
8050 5298 0
8050 5298 5307 0
8050 5298 5308 0
8050 5298 5310 0
8050 5299 0
8050 5299 5307 0
8050 5299 5308 0
8050 5299 5310 0
c (((aux1324 + aux1327 + aux1328)<=1)=tv=SATLiteral(8051))
-8051 5337 0
-8051 5331 5336 0
-8051 5332 0
-8051 5334 0
-8051 5322 5336 0
-8051 5322 5331 0
-8051 5322 5332 0
-8051 5322 5334 0
-8051 5323 0
-8051 5323 5331 0
-8051 5323 5332 0
-8051 5323 5334 0
8051 -5323 -5331 -5336 0
8051 -5322 -5332 -5336 0
8051 -5322 -5331 -5337 0
c ((1<=(aux1324 + aux1327 + aux1328))=tv=SATLiteral(8052))
-8052 -5322 -5331 -5336 0
8052 5336 0
8052 5331 0
8052 5332 0
8052 5334 0
8052 5322 0
8052 5322 5331 0
8052 5322 5332 0
8052 5322 5334 0
8052 5323 0
8052 5323 5331 0
8052 5323 5332 0
8052 5323 5334 0
c (((aux1330 + aux1333 + aux1334)<=1)=tv=SATLiteral(8053))
-8053 5361 0
-8053 5355 5360 0
-8053 5356 0
-8053 5358 0
-8053 5346 5360 0
-8053 5346 5355 0
-8053 5346 5356 0
-8053 5346 5358 0
-8053 5347 0
-8053 5347 5355 0
-8053 5347 5356 0
-8053 5347 5358 0
8053 -5347 -5355 -5360 0
8053 -5346 -5356 -5360 0
8053 -5346 -5355 -5361 0
c ((1<=(aux1330 + aux1333 + aux1334))=tv=SATLiteral(8054))
-8054 -5346 -5355 -5360 0
8054 5360 0
8054 5355 0
8054 5356 0
8054 5358 0
8054 5346 0
8054 5346 5355 0
8054 5346 5356 0
8054 5346 5358 0
8054 5347 0
8054 5347 5355 0
8054 5347 5356 0
8054 5347 5358 0
c (((aux1336 + aux1339 + aux1340)<=1)=tv=SATLiteral(8055))
-8055 5385 0
-8055 5379 5384 0
-8055 5380 0
-8055 5382 0
-8055 5370 5384 0
-8055 5370 5379 0
-8055 5370 5380 0
-8055 5370 5382 0
-8055 5371 0
-8055 5371 5379 0
-8055 5371 5380 0
-8055 5371 5382 0
8055 -5371 -5379 -5384 0
8055 -5370 -5380 -5384 0
8055 -5370 -5379 -5385 0
c ((1<=(aux1336 + aux1339 + aux1340))=tv=SATLiteral(8056))
-8056 -5370 -5379 -5384 0
8056 5384 0
8056 5379 0
8056 5380 0
8056 5382 0
8056 5370 0
8056 5370 5379 0
8056 5370 5380 0
8056 5370 5382 0
8056 5371 0
8056 5371 5379 0
8056 5371 5380 0
8056 5371 5382 0
c (((aux1342 + aux1345 + aux1346)<=1)=tv=SATLiteral(8057))
-8057 5409 0
-8057 5403 5408 0
-8057 5404 0
-8057 5406 0
-8057 5394 5408 0
-8057 5394 5403 0
-8057 5394 5404 0
-8057 5394 5406 0
-8057 5395 0
-8057 5395 5403 0
-8057 5395 5404 0
-8057 5395 5406 0
8057 -5395 -5403 -5408 0
8057 -5394 -5404 -5408 0
8057 -5394 -5403 -5409 0
c ((1<=(aux1342 + aux1345 + aux1346))=tv=SATLiteral(8058))
-8058 -5394 -5403 -5408 0
8058 5408 0
8058 5403 0
8058 5404 0
8058 5406 0
8058 5394 0
8058 5394 5403 0
8058 5394 5404 0
8058 5394 5406 0
8058 5395 0
8058 5395 5403 0
8058 5395 5404 0
8058 5395 5406 0
c (((aux1348 + aux1351 + aux1352)<=1)=tv=SATLiteral(8059))
-8059 5433 0
-8059 5427 5432 0
-8059 5428 0
-8059 5430 0
-8059 5418 5432 0
-8059 5418 5427 0
-8059 5418 5428 0
-8059 5418 5430 0
-8059 5419 0
-8059 5419 5427 0
-8059 5419 5428 0
-8059 5419 5430 0
8059 -5419 -5427 -5432 0
8059 -5418 -5428 -5432 0
8059 -5418 -5427 -5433 0
c ((1<=(aux1348 + aux1351 + aux1352))=tv=SATLiteral(8060))
-8060 -5418 -5427 -5432 0
8060 5432 0
8060 5427 0
8060 5428 0
8060 5430 0
8060 5418 0
8060 5418 5427 0
8060 5418 5428 0
8060 5418 5430 0
8060 5419 0
8060 5419 5427 0
8060 5419 5428 0
8060 5419 5430 0
c (((aux1354 + aux1357 + aux1358)<=1)=tv=SATLiteral(8061))
-8061 5457 0
-8061 5451 5456 0
-8061 5452 0
-8061 5454 0
-8061 5442 5456 0
-8061 5442 5451 0
-8061 5442 5452 0
-8061 5442 5454 0
-8061 5443 0
-8061 5443 5451 0
-8061 5443 5452 0
-8061 5443 5454 0
8061 -5443 -5451 -5456 0
8061 -5442 -5452 -5456 0
8061 -5442 -5451 -5457 0
c ((1<=(aux1354 + aux1357 + aux1358))=tv=SATLiteral(8062))
-8062 -5442 -5451 -5456 0
8062 5456 0
8062 5451 0
8062 5452 0
8062 5454 0
8062 5442 0
8062 5442 5451 0
8062 5442 5452 0
8062 5442 5454 0
8062 5443 0
8062 5443 5451 0
8062 5443 5452 0
8062 5443 5454 0
c (((aux1360 + aux1363 + aux1364)<=1)=tv=SATLiteral(8063))
-8063 5481 0
-8063 5475 5480 0
-8063 5476 0
-8063 5478 0
-8063 5466 5480 0
-8063 5466 5475 0
-8063 5466 5476 0
-8063 5466 5478 0
-8063 5467 0
-8063 5467 5475 0
-8063 5467 5476 0
-8063 5467 5478 0
8063 -5467 -5475 -5480 0
8063 -5466 -5476 -5480 0
8063 -5466 -5475 -5481 0
c ((1<=(aux1360 + aux1363 + aux1364))=tv=SATLiteral(8064))
-8064 -5466 -5475 -5480 0
8064 5480 0
8064 5475 0
8064 5476 0
8064 5478 0
8064 5466 0
8064 5466 5475 0
8064 5466 5476 0
8064 5466 5478 0
8064 5467 0
8064 5467 5475 0
8064 5467 5476 0
8064 5467 5478 0
c (((aux1366 + aux1369 + aux1370)<=1)=tv=SATLiteral(8065))
-8065 5505 0
-8065 5499 5504 0
-8065 5500 0
-8065 5502 0
-8065 5490 5504 0
-8065 5490 5499 0
-8065 5490 5500 0
-8065 5490 5502 0
-8065 5491 0
-8065 5491 5499 0
-8065 5491 5500 0
-8065 5491 5502 0
8065 -5491 -5499 -5504 0
8065 -5490 -5500 -5504 0
8065 -5490 -5499 -5505 0
c ((1<=(aux1366 + aux1369 + aux1370))=tv=SATLiteral(8066))
-8066 -5490 -5499 -5504 0
8066 5504 0
8066 5499 0
8066 5500 0
8066 5502 0
8066 5490 0
8066 5490 5499 0
8066 5490 5500 0
8066 5490 5502 0
8066 5491 0
8066 5491 5499 0
8066 5491 5500 0
8066 5491 5502 0
c (((aux1372 + aux1375 + aux1376)<=1)=tv=SATLiteral(8067))
-8067 5529 0
-8067 5523 5528 0
-8067 5524 0
-8067 5526 0
-8067 5514 5528 0
-8067 5514 5523 0
-8067 5514 5524 0
-8067 5514 5526 0
-8067 5515 0
-8067 5515 5523 0
-8067 5515 5524 0
-8067 5515 5526 0
8067 -5515 -5523 -5528 0
8067 -5514 -5524 -5528 0
8067 -5514 -5523 -5529 0
c ((1<=(aux1372 + aux1375 + aux1376))=tv=SATLiteral(8068))
-8068 -5514 -5523 -5528 0
8068 5528 0
8068 5523 0
8068 5524 0
8068 5526 0
8068 5514 0
8068 5514 5523 0
8068 5514 5524 0
8068 5514 5526 0
8068 5515 0
8068 5515 5523 0
8068 5515 5524 0
8068 5515 5526 0
c (((aux1378 + aux1381 + aux1382)<=1)=tv=SATLiteral(8069))
-8069 5553 0
-8069 5547 5552 0
-8069 5548 0
-8069 5550 0
-8069 5538 5552 0
-8069 5538 5547 0
-8069 5538 5548 0
-8069 5538 5550 0
-8069 5539 0
-8069 5539 5547 0
-8069 5539 5548 0
-8069 5539 5550 0
8069 -5539 -5547 -5552 0
8069 -5538 -5548 -5552 0
8069 -5538 -5547 -5553 0
c ((1<=(aux1378 + aux1381 + aux1382))=tv=SATLiteral(8070))
-8070 -5538 -5547 -5552 0
8070 5552 0
8070 5547 0
8070 5548 0
8070 5550 0
8070 5538 0
8070 5538 5547 0
8070 5538 5548 0
8070 5538 5550 0
8070 5539 0
8070 5539 5547 0
8070 5539 5548 0
8070 5539 5550 0
c (((aux1384 + aux1387 + aux1388)<=1)=tv=SATLiteral(8071))
-8071 5577 0
-8071 5571 5576 0
-8071 5572 0
-8071 5574 0
-8071 5562 5576 0
-8071 5562 5571 0
-8071 5562 5572 0
-8071 5562 5574 0
-8071 5563 0
-8071 5563 5571 0
-8071 5563 5572 0
-8071 5563 5574 0
8071 -5563 -5571 -5576 0
8071 -5562 -5572 -5576 0
8071 -5562 -5571 -5577 0
c ((1<=(aux1384 + aux1387 + aux1388))=tv=SATLiteral(8072))
-8072 -5562 -5571 -5576 0
8072 5576 0
8072 5571 0
8072 5572 0
8072 5574 0
8072 5562 0
8072 5562 5571 0
8072 5562 5572 0
8072 5562 5574 0
8072 5563 0
8072 5563 5571 0
8072 5563 5572 0
8072 5563 5574 0
c (((aux1390 + aux1393 + aux1394)<=1)=tv=SATLiteral(8073))
-8073 5601 0
-8073 5595 5600 0
-8073 5596 0
-8073 5598 0
-8073 5586 5600 0
-8073 5586 5595 0
-8073 5586 5596 0
-8073 5586 5598 0
-8073 5587 0
-8073 5587 5595 0
-8073 5587 5596 0
-8073 5587 5598 0
8073 -5587 -5595 -5600 0
8073 -5586 -5596 -5600 0
8073 -5586 -5595 -5601 0
c ((1<=(aux1390 + aux1393 + aux1394))=tv=SATLiteral(8074))
-8074 -5586 -5595 -5600 0
8074 5600 0
8074 5595 0
8074 5596 0
8074 5598 0
8074 5586 0
8074 5586 5595 0
8074 5586 5596 0
8074 5586 5598 0
8074 5587 0
8074 5587 5595 0
8074 5587 5596 0
8074 5587 5598 0
c (((aux1396 + aux1399 + aux1400)<=1)=tv=SATLiteral(8075))
-8075 5625 0
-8075 5619 5624 0
-8075 5620 0
-8075 5622 0
-8075 5610 5624 0
-8075 5610 5619 0
-8075 5610 5620 0
-8075 5610 5622 0
-8075 5611 0
-8075 5611 5619 0
-8075 5611 5620 0
-8075 5611 5622 0
8075 -5611 -5619 -5624 0
8075 -5610 -5620 -5624 0
8075 -5610 -5619 -5625 0
c ((1<=(aux1396 + aux1399 + aux1400))=tv=SATLiteral(8076))
-8076 -5610 -5619 -5624 0
8076 5624 0
8076 5619 0
8076 5620 0
8076 5622 0
8076 5610 0
8076 5610 5619 0
8076 5610 5620 0
8076 5610 5622 0
8076 5611 0
8076 5611 5619 0
8076 5611 5620 0
8076 5611 5622 0
c (((aux1402 + aux1405 + aux1406)<=1)=tv=SATLiteral(8077))
-8077 5649 0
-8077 5643 5648 0
-8077 5644 0
-8077 5646 0
-8077 5634 5648 0
-8077 5634 5643 0
-8077 5634 5644 0
-8077 5634 5646 0
-8077 5635 0
-8077 5635 5643 0
-8077 5635 5644 0
-8077 5635 5646 0
8077 -5635 -5643 -5648 0
8077 -5634 -5644 -5648 0
8077 -5634 -5643 -5649 0
c ((1<=(aux1402 + aux1405 + aux1406))=tv=SATLiteral(8078))
-8078 -5634 -5643 -5648 0
8078 5648 0
8078 5643 0
8078 5644 0
8078 5646 0
8078 5634 0
8078 5634 5643 0
8078 5634 5644 0
8078 5634 5646 0
8078 5635 0
8078 5635 5643 0
8078 5635 5644 0
8078 5635 5646 0
c (((aux1408 + aux1411 + aux1412)<=1)=tv=SATLiteral(8079))
-8079 5673 0
-8079 5667 5672 0
-8079 5668 0
-8079 5670 0
-8079 5658 5672 0
-8079 5658 5667 0
-8079 5658 5668 0
-8079 5658 5670 0
-8079 5659 0
-8079 5659 5667 0
-8079 5659 5668 0
-8079 5659 5670 0
8079 -5659 -5667 -5672 0
8079 -5658 -5668 -5672 0
8079 -5658 -5667 -5673 0
c ((1<=(aux1408 + aux1411 + aux1412))=tv=SATLiteral(8080))
-8080 -5658 -5667 -5672 0
8080 5672 0
8080 5667 0
8080 5668 0
8080 5670 0
8080 5658 0
8080 5658 5667 0
8080 5658 5668 0
8080 5658 5670 0
8080 5659 0
8080 5659 5667 0
8080 5659 5668 0
8080 5659 5670 0
c (((aux1414 + aux1417 + aux1418)<=1)=tv=SATLiteral(8081))
-8081 5697 0
-8081 5691 5696 0
-8081 5692 0
-8081 5694 0
-8081 5682 5696 0
-8081 5682 5691 0
-8081 5682 5692 0
-8081 5682 5694 0
-8081 5683 0
-8081 5683 5691 0
-8081 5683 5692 0
-8081 5683 5694 0
8081 -5683 -5691 -5696 0
8081 -5682 -5692 -5696 0
8081 -5682 -5691 -5697 0
c ((1<=(aux1414 + aux1417 + aux1418))=tv=SATLiteral(8082))
-8082 -5682 -5691 -5696 0
8082 5696 0
8082 5691 0
8082 5692 0
8082 5694 0
8082 5682 0
8082 5682 5691 0
8082 5682 5692 0
8082 5682 5694 0
8082 5683 0
8082 5683 5691 0
8082 5683 5692 0
8082 5683 5694 0
c (((aux1420 + aux1423 + aux1424)<=1)=tv=SATLiteral(8083))
-8083 5721 0
-8083 5715 5720 0
-8083 5716 0
-8083 5718 0
-8083 5706 5720 0
-8083 5706 5715 0
-8083 5706 5716 0
-8083 5706 5718 0
-8083 5707 0
-8083 5707 5715 0
-8083 5707 5716 0
-8083 5707 5718 0
8083 -5707 -5715 -5720 0
8083 -5706 -5716 -5720 0
8083 -5706 -5715 -5721 0
c ((1<=(aux1420 + aux1423 + aux1424))=tv=SATLiteral(8084))
-8084 -5706 -5715 -5720 0
8084 5720 0
8084 5715 0
8084 5716 0
8084 5718 0
8084 5706 0
8084 5706 5715 0
8084 5706 5716 0
8084 5706 5718 0
8084 5707 0
8084 5707 5715 0
8084 5707 5716 0
8084 5707 5718 0
c (((aux1426 + aux1429 + aux1430)<=1)=tv=SATLiteral(8085))
-8085 5745 0
-8085 5739 5744 0
-8085 5740 0
-8085 5742 0
-8085 5730 5744 0
-8085 5730 5739 0
-8085 5730 5740 0
-8085 5730 5742 0
-8085 5731 0
-8085 5731 5739 0
-8085 5731 5740 0
-8085 5731 5742 0
8085 -5731 -5739 -5744 0
8085 -5730 -5740 -5744 0
8085 -5730 -5739 -5745 0
c ((1<=(aux1426 + aux1429 + aux1430))=tv=SATLiteral(8086))
-8086 -5730 -5739 -5744 0
8086 5744 0
8086 5739 0
8086 5740 0
8086 5742 0
8086 5730 0
8086 5730 5739 0
8086 5730 5740 0
8086 5730 5742 0
8086 5731 0
8086 5731 5739 0
8086 5731 5740 0
8086 5731 5742 0
c (((aux1432 + aux1435 + aux1436)<=1)=tv=SATLiteral(8087))
-8087 5769 0
-8087 5763 5768 0
-8087 5764 0
-8087 5766 0
-8087 5754 5768 0
-8087 5754 5763 0
-8087 5754 5764 0
-8087 5754 5766 0
-8087 5755 0
-8087 5755 5763 0
-8087 5755 5764 0
-8087 5755 5766 0
8087 -5755 -5763 -5768 0
8087 -5754 -5764 -5768 0
8087 -5754 -5763 -5769 0
c ((1<=(aux1432 + aux1435 + aux1436))=tv=SATLiteral(8088))
-8088 -5754 -5763 -5768 0
8088 5768 0
8088 5763 0
8088 5764 0
8088 5766 0
8088 5754 0
8088 5754 5763 0
8088 5754 5764 0
8088 5754 5766 0
8088 5755 0
8088 5755 5763 0
8088 5755 5764 0
8088 5755 5766 0
c (((aux1438 + aux1441 + aux1442)<=1)=tv=SATLiteral(8089))
-8089 5793 0
-8089 5787 5792 0
-8089 5788 0
-8089 5790 0
-8089 5778 5792 0
-8089 5778 5787 0
-8089 5778 5788 0
-8089 5778 5790 0
-8089 5779 0
-8089 5779 5787 0
-8089 5779 5788 0
-8089 5779 5790 0
8089 -5779 -5787 -5792 0
8089 -5778 -5788 -5792 0
8089 -5778 -5787 -5793 0
c ((1<=(aux1438 + aux1441 + aux1442))=tv=SATLiteral(8090))
-8090 -5778 -5787 -5792 0
8090 5792 0
8090 5787 0
8090 5788 0
8090 5790 0
8090 5778 0
8090 5778 5787 0
8090 5778 5788 0
8090 5778 5790 0
8090 5779 0
8090 5779 5787 0
8090 5779 5788 0
8090 5779 5790 0
c (((aux1444 + aux1447 + aux1448)<=1)=tv=SATLiteral(8091))
-8091 5817 0
-8091 5811 5816 0
-8091 5812 0
-8091 5814 0
-8091 5802 5816 0
-8091 5802 5811 0
-8091 5802 5812 0
-8091 5802 5814 0
-8091 5803 0
-8091 5803 5811 0
-8091 5803 5812 0
-8091 5803 5814 0
8091 -5803 -5811 -5816 0
8091 -5802 -5812 -5816 0
8091 -5802 -5811 -5817 0
c ((1<=(aux1444 + aux1447 + aux1448))=tv=SATLiteral(8092))
-8092 -5802 -5811 -5816 0
8092 5816 0
8092 5811 0
8092 5812 0
8092 5814 0
8092 5802 0
8092 5802 5811 0
8092 5802 5812 0
8092 5802 5814 0
8092 5803 0
8092 5803 5811 0
8092 5803 5812 0
8092 5803 5814 0
c (((aux1450 + aux1453 + aux1454)<=1)=tv=SATLiteral(8093))
-8093 5841 0
-8093 5835 5840 0
-8093 5836 0
-8093 5838 0
-8093 5826 5840 0
-8093 5826 5835 0
-8093 5826 5836 0
-8093 5826 5838 0
-8093 5827 0
-8093 5827 5835 0
-8093 5827 5836 0
-8093 5827 5838 0
8093 -5827 -5835 -5840 0
8093 -5826 -5836 -5840 0
8093 -5826 -5835 -5841 0
c ((1<=(aux1450 + aux1453 + aux1454))=tv=SATLiteral(8094))
-8094 -5826 -5835 -5840 0
8094 5840 0
8094 5835 0
8094 5836 0
8094 5838 0
8094 5826 0
8094 5826 5835 0
8094 5826 5836 0
8094 5826 5838 0
8094 5827 0
8094 5827 5835 0
8094 5827 5836 0
8094 5827 5838 0
c (((aux1456 + aux1459 + aux1460)<=1)=tv=SATLiteral(8095))
-8095 5865 0
-8095 5859 5864 0
-8095 5860 0
-8095 5862 0
-8095 5850 5864 0
-8095 5850 5859 0
-8095 5850 5860 0
-8095 5850 5862 0
-8095 5851 0
-8095 5851 5859 0
-8095 5851 5860 0
-8095 5851 5862 0
8095 -5851 -5859 -5864 0
8095 -5850 -5860 -5864 0
8095 -5850 -5859 -5865 0
c ((1<=(aux1456 + aux1459 + aux1460))=tv=SATLiteral(8096))
-8096 -5850 -5859 -5864 0
8096 5864 0
8096 5859 0
8096 5860 0
8096 5862 0
8096 5850 0
8096 5850 5859 0
8096 5850 5860 0
8096 5850 5862 0
8096 5851 0
8096 5851 5859 0
8096 5851 5860 0
8096 5851 5862 0
c (((aux1462 + aux1465 + aux1466)<=1)=tv=SATLiteral(8097))
-8097 5889 0
-8097 5883 5888 0
-8097 5884 0
-8097 5886 0
-8097 5874 5888 0
-8097 5874 5883 0
-8097 5874 5884 0
-8097 5874 5886 0
-8097 5875 0
-8097 5875 5883 0
-8097 5875 5884 0
-8097 5875 5886 0
8097 -5875 -5883 -5888 0
8097 -5874 -5884 -5888 0
8097 -5874 -5883 -5889 0
c ((1<=(aux1462 + aux1465 + aux1466))=tv=SATLiteral(8098))
-8098 -5874 -5883 -5888 0
8098 5888 0
8098 5883 0
8098 5884 0
8098 5886 0
8098 5874 0
8098 5874 5883 0
8098 5874 5884 0
8098 5874 5886 0
8098 5875 0
8098 5875 5883 0
8098 5875 5884 0
8098 5875 5886 0
c (((aux1468 + aux1471 + aux1472)<=1)=tv=SATLiteral(8099))
-8099 5913 0
-8099 5907 5912 0
-8099 5908 0
-8099 5910 0
-8099 5898 5912 0
-8099 5898 5907 0
-8099 5898 5908 0
-8099 5898 5910 0
-8099 5899 0
-8099 5899 5907 0
-8099 5899 5908 0
-8099 5899 5910 0
8099 -5899 -5907 -5912 0
8099 -5898 -5908 -5912 0
8099 -5898 -5907 -5913 0
c ((1<=(aux1468 + aux1471 + aux1472))=tv=SATLiteral(8100))
-8100 -5898 -5907 -5912 0
8100 5912 0
8100 5907 0
8100 5908 0
8100 5910 0
8100 5898 0
8100 5898 5907 0
8100 5898 5908 0
8100 5898 5910 0
8100 5899 0
8100 5899 5907 0
8100 5899 5908 0
8100 5899 5910 0
c (((aux1474 + aux1477 + aux1478)<=1)=tv=SATLiteral(8101))
-8101 5937 0
-8101 5931 5936 0
-8101 5932 0
-8101 5934 0
-8101 5922 5936 0
-8101 5922 5931 0
-8101 5922 5932 0
-8101 5922 5934 0
-8101 5923 0
-8101 5923 5931 0
-8101 5923 5932 0
-8101 5923 5934 0
8101 -5923 -5931 -5936 0
8101 -5922 -5932 -5936 0
8101 -5922 -5931 -5937 0
c ((1<=(aux1474 + aux1477 + aux1478))=tv=SATLiteral(8102))
-8102 -5922 -5931 -5936 0
8102 5936 0
8102 5931 0
8102 5932 0
8102 5934 0
8102 5922 0
8102 5922 5931 0
8102 5922 5932 0
8102 5922 5934 0
8102 5923 0
8102 5923 5931 0
8102 5923 5932 0
8102 5923 5934 0
c (((aux1480 + aux1483 + aux1484)<=1)=tv=SATLiteral(8103))
-8103 5961 0
-8103 5955 5960 0
-8103 5956 0
-8103 5958 0
-8103 5946 5960 0
-8103 5946 5955 0
-8103 5946 5956 0
-8103 5946 5958 0
-8103 5947 0
-8103 5947 5955 0
-8103 5947 5956 0
-8103 5947 5958 0
8103 -5947 -5955 -5960 0
8103 -5946 -5956 -5960 0
8103 -5946 -5955 -5961 0
c ((1<=(aux1480 + aux1483 + aux1484))=tv=SATLiteral(8104))
-8104 -5946 -5955 -5960 0
8104 5960 0
8104 5955 0
8104 5956 0
8104 5958 0
8104 5946 0
8104 5946 5955 0
8104 5946 5956 0
8104 5946 5958 0
8104 5947 0
8104 5947 5955 0
8104 5947 5956 0
8104 5947 5958 0
c (((aux1486 + aux1489 + aux1490)<=1)=tv=SATLiteral(8105))
-8105 5985 0
-8105 5979 5984 0
-8105 5980 0
-8105 5982 0
-8105 5970 5984 0
-8105 5970 5979 0
-8105 5970 5980 0
-8105 5970 5982 0
-8105 5971 0
-8105 5971 5979 0
-8105 5971 5980 0
-8105 5971 5982 0
8105 -5971 -5979 -5984 0
8105 -5970 -5980 -5984 0
8105 -5970 -5979 -5985 0
c ((1<=(aux1486 + aux1489 + aux1490))=tv=SATLiteral(8106))
-8106 -5970 -5979 -5984 0
8106 5984 0
8106 5979 0
8106 5980 0
8106 5982 0
8106 5970 0
8106 5970 5979 0
8106 5970 5980 0
8106 5970 5982 0
8106 5971 0
8106 5971 5979 0
8106 5971 5980 0
8106 5971 5982 0
c (((aux1492 + aux1495 + aux1496)<=1)=tv=SATLiteral(8107))
-8107 6009 0
-8107 6003 6008 0
-8107 6004 0
-8107 6006 0
-8107 5994 6008 0
-8107 5994 6003 0
-8107 5994 6004 0
-8107 5994 6006 0
-8107 5995 0
-8107 5995 6003 0
-8107 5995 6004 0
-8107 5995 6006 0
8107 -5995 -6003 -6008 0
8107 -5994 -6004 -6008 0
8107 -5994 -6003 -6009 0
c ((1<=(aux1492 + aux1495 + aux1496))=tv=SATLiteral(8108))
-8108 -5994 -6003 -6008 0
8108 6008 0
8108 6003 0
8108 6004 0
8108 6006 0
8108 5994 0
8108 5994 6003 0
8108 5994 6004 0
8108 5994 6006 0
8108 5995 0
8108 5995 6003 0
8108 5995 6004 0
8108 5995 6006 0
c (((aux1498 + aux1501 + aux1502)<=1)=tv=SATLiteral(8109))
-8109 6033 0
-8109 6027 6032 0
-8109 6028 0
-8109 6030 0
-8109 6018 6032 0
-8109 6018 6027 0
-8109 6018 6028 0
-8109 6018 6030 0
-8109 6019 0
-8109 6019 6027 0
-8109 6019 6028 0
-8109 6019 6030 0
8109 -6019 -6027 -6032 0
8109 -6018 -6028 -6032 0
8109 -6018 -6027 -6033 0
c ((1<=(aux1498 + aux1501 + aux1502))=tv=SATLiteral(8110))
-8110 -6018 -6027 -6032 0
8110 6032 0
8110 6027 0
8110 6028 0
8110 6030 0
8110 6018 0
8110 6018 6027 0
8110 6018 6028 0
8110 6018 6030 0
8110 6019 0
8110 6019 6027 0
8110 6019 6028 0
8110 6019 6030 0
c (((aux1504 + aux1507 + aux1508)<=1)=tv=SATLiteral(8111))
-8111 6057 0
-8111 6051 6056 0
-8111 6052 0
-8111 6054 0
-8111 6042 6056 0
-8111 6042 6051 0
-8111 6042 6052 0
-8111 6042 6054 0
-8111 6043 0
-8111 6043 6051 0
-8111 6043 6052 0
-8111 6043 6054 0
8111 -6043 -6051 -6056 0
8111 -6042 -6052 -6056 0
8111 -6042 -6051 -6057 0
c ((1<=(aux1504 + aux1507 + aux1508))=tv=SATLiteral(8112))
-8112 -6042 -6051 -6056 0
8112 6056 0
8112 6051 0
8112 6052 0
8112 6054 0
8112 6042 0
8112 6042 6051 0
8112 6042 6052 0
8112 6042 6054 0
8112 6043 0
8112 6043 6051 0
8112 6043 6052 0
8112 6043 6054 0
c (((aux1510 + aux1513 + aux1514)<=1)=tv=SATLiteral(8113))
-8113 6081 0
-8113 6075 6080 0
-8113 6076 0
-8113 6078 0
-8113 6066 6080 0
-8113 6066 6075 0
-8113 6066 6076 0
-8113 6066 6078 0
-8113 6067 0
-8113 6067 6075 0
-8113 6067 6076 0
-8113 6067 6078 0
8113 -6067 -6075 -6080 0
8113 -6066 -6076 -6080 0
8113 -6066 -6075 -6081 0
c ((1<=(aux1510 + aux1513 + aux1514))=tv=SATLiteral(8114))
-8114 -6066 -6075 -6080 0
8114 6080 0
8114 6075 0
8114 6076 0
8114 6078 0
8114 6066 0
8114 6066 6075 0
8114 6066 6076 0
8114 6066 6078 0
8114 6067 0
8114 6067 6075 0
8114 6067 6076 0
8114 6067 6078 0
c (((aux1516 + aux1519 + aux1520)<=1)=tv=SATLiteral(8115))
-8115 6105 0
-8115 6099 6104 0
-8115 6100 0
-8115 6102 0
-8115 6090 6104 0
-8115 6090 6099 0
-8115 6090 6100 0
-8115 6090 6102 0
-8115 6091 0
-8115 6091 6099 0
-8115 6091 6100 0
-8115 6091 6102 0
8115 -6091 -6099 -6104 0
8115 -6090 -6100 -6104 0
8115 -6090 -6099 -6105 0
c ((1<=(aux1516 + aux1519 + aux1520))=tv=SATLiteral(8116))
-8116 -6090 -6099 -6104 0
8116 6104 0
8116 6099 0
8116 6100 0
8116 6102 0
8116 6090 0
8116 6090 6099 0
8116 6090 6100 0
8116 6090 6102 0
8116 6091 0
8116 6091 6099 0
8116 6091 6100 0
8116 6091 6102 0
c (((aux1522 + aux1525 + aux1526)<=1)=tv=SATLiteral(8117))
-8117 6129 0
-8117 6123 6128 0
-8117 6124 0
-8117 6126 0
-8117 6114 6128 0
-8117 6114 6123 0
-8117 6114 6124 0
-8117 6114 6126 0
-8117 6115 0
-8117 6115 6123 0
-8117 6115 6124 0
-8117 6115 6126 0
8117 -6115 -6123 -6128 0
8117 -6114 -6124 -6128 0
8117 -6114 -6123 -6129 0
c ((1<=(aux1522 + aux1525 + aux1526))=tv=SATLiteral(8118))
-8118 -6114 -6123 -6128 0
8118 6128 0
8118 6123 0
8118 6124 0
8118 6126 0
8118 6114 0
8118 6114 6123 0
8118 6114 6124 0
8118 6114 6126 0
8118 6115 0
8118 6115 6123 0
8118 6115 6124 0
8118 6115 6126 0
c (((aux1528 + aux1531 + aux1532)<=1)=tv=SATLiteral(8119))
-8119 6153 0
-8119 6147 6152 0
-8119 6148 0
-8119 6150 0
-8119 6138 6152 0
-8119 6138 6147 0
-8119 6138 6148 0
-8119 6138 6150 0
-8119 6139 0
-8119 6139 6147 0
-8119 6139 6148 0
-8119 6139 6150 0
8119 -6139 -6147 -6152 0
8119 -6138 -6148 -6152 0
8119 -6138 -6147 -6153 0
c ((1<=(aux1528 + aux1531 + aux1532))=tv=SATLiteral(8120))
-8120 -6138 -6147 -6152 0
8120 6152 0
8120 6147 0
8120 6148 0
8120 6150 0
8120 6138 0
8120 6138 6147 0
8120 6138 6148 0
8120 6138 6150 0
8120 6139 0
8120 6139 6147 0
8120 6139 6148 0
8120 6139 6150 0
c (((aux1534 + aux1537 + aux1538)<=1)=tv=SATLiteral(8121))
-8121 6177 0
-8121 6171 6176 0
-8121 6172 0
-8121 6174 0
-8121 6162 6176 0
-8121 6162 6171 0
-8121 6162 6172 0
-8121 6162 6174 0
-8121 6163 0
-8121 6163 6171 0
-8121 6163 6172 0
-8121 6163 6174 0
8121 -6163 -6171 -6176 0
8121 -6162 -6172 -6176 0
8121 -6162 -6171 -6177 0
c ((1<=(aux1534 + aux1537 + aux1538))=tv=SATLiteral(8122))
-8122 -6162 -6171 -6176 0
8122 6176 0
8122 6171 0
8122 6172 0
8122 6174 0
8122 6162 0
8122 6162 6171 0
8122 6162 6172 0
8122 6162 6174 0
8122 6163 0
8122 6163 6171 0
8122 6163 6172 0
8122 6163 6174 0
c (((aux1540 + aux1543 + aux1544)<=1)=tv=SATLiteral(8123))
-8123 6201 0
-8123 6195 6200 0
-8123 6196 0
-8123 6198 0
-8123 6186 6200 0
-8123 6186 6195 0
-8123 6186 6196 0
-8123 6186 6198 0
-8123 6187 0
-8123 6187 6195 0
-8123 6187 6196 0
-8123 6187 6198 0
8123 -6187 -6195 -6200 0
8123 -6186 -6196 -6200 0
8123 -6186 -6195 -6201 0
c ((1<=(aux1540 + aux1543 + aux1544))=tv=SATLiteral(8124))
-8124 -6186 -6195 -6200 0
8124 6200 0
8124 6195 0
8124 6196 0
8124 6198 0
8124 6186 0
8124 6186 6195 0
8124 6186 6196 0
8124 6186 6198 0
8124 6187 0
8124 6187 6195 0
8124 6187 6196 0
8124 6187 6198 0
c (((aux1546 + aux1549 + aux1550)<=1)=tv=SATLiteral(8125))
-8125 6225 0
-8125 6219 6224 0
-8125 6220 0
-8125 6222 0
-8125 6210 6224 0
-8125 6210 6219 0
-8125 6210 6220 0
-8125 6210 6222 0
-8125 6211 0
-8125 6211 6219 0
-8125 6211 6220 0
-8125 6211 6222 0
8125 -6211 -6219 -6224 0
8125 -6210 -6220 -6224 0
8125 -6210 -6219 -6225 0
c ((1<=(aux1546 + aux1549 + aux1550))=tv=SATLiteral(8126))
-8126 -6210 -6219 -6224 0
8126 6224 0
8126 6219 0
8126 6220 0
8126 6222 0
8126 6210 0
8126 6210 6219 0
8126 6210 6220 0
8126 6210 6222 0
8126 6211 0
8126 6211 6219 0
8126 6211 6220 0
8126 6211 6222 0
c (((aux1552 + aux1555 + aux1556)<=1)=tv=SATLiteral(8127))
-8127 6249 0
-8127 6243 6248 0
-8127 6244 0
-8127 6246 0
-8127 6234 6248 0
-8127 6234 6243 0
-8127 6234 6244 0
-8127 6234 6246 0
-8127 6235 0
-8127 6235 6243 0
-8127 6235 6244 0
-8127 6235 6246 0
8127 -6235 -6243 -6248 0
8127 -6234 -6244 -6248 0
8127 -6234 -6243 -6249 0
c ((1<=(aux1552 + aux1555 + aux1556))=tv=SATLiteral(8128))
-8128 -6234 -6243 -6248 0
8128 6248 0
8128 6243 0
8128 6244 0
8128 6246 0
8128 6234 0
8128 6234 6243 0
8128 6234 6244 0
8128 6234 6246 0
8128 6235 0
8128 6235 6243 0
8128 6235 6244 0
8128 6235 6246 0
c (((aux1558 + aux1561 + aux1562)<=1)=tv=SATLiteral(8129))
-8129 6273 0
-8129 6267 6272 0
-8129 6268 0
-8129 6270 0
-8129 6258 6272 0
-8129 6258 6267 0
-8129 6258 6268 0
-8129 6258 6270 0
-8129 6259 0
-8129 6259 6267 0
-8129 6259 6268 0
-8129 6259 6270 0
8129 -6259 -6267 -6272 0
8129 -6258 -6268 -6272 0
8129 -6258 -6267 -6273 0
c ((1<=(aux1558 + aux1561 + aux1562))=tv=SATLiteral(8130))
-8130 -6258 -6267 -6272 0
8130 6272 0
8130 6267 0
8130 6268 0
8130 6270 0
8130 6258 0
8130 6258 6267 0
8130 6258 6268 0
8130 6258 6270 0
8130 6259 0
8130 6259 6267 0
8130 6259 6268 0
8130 6259 6270 0
c (((aux1564 + aux1567 + aux1568)<=1)=tv=SATLiteral(8131))
-8131 6297 0
-8131 6291 6296 0
-8131 6292 0
-8131 6294 0
-8131 6282 6296 0
-8131 6282 6291 0
-8131 6282 6292 0
-8131 6282 6294 0
-8131 6283 0
-8131 6283 6291 0
-8131 6283 6292 0
-8131 6283 6294 0
8131 -6283 -6291 -6296 0
8131 -6282 -6292 -6296 0
8131 -6282 -6291 -6297 0
c ((1<=(aux1564 + aux1567 + aux1568))=tv=SATLiteral(8132))
-8132 -6282 -6291 -6296 0
8132 6296 0
8132 6291 0
8132 6292 0
8132 6294 0
8132 6282 0
8132 6282 6291 0
8132 6282 6292 0
8132 6282 6294 0
8132 6283 0
8132 6283 6291 0
8132 6283 6292 0
8132 6283 6294 0
c (((aux1570 + aux1573 + aux1574)<=1)=tv=SATLiteral(8133))
-8133 6321 0
-8133 6315 6320 0
-8133 6316 0
-8133 6318 0
-8133 6306 6320 0
-8133 6306 6315 0
-8133 6306 6316 0
-8133 6306 6318 0
-8133 6307 0
-8133 6307 6315 0
-8133 6307 6316 0
-8133 6307 6318 0
8133 -6307 -6315 -6320 0
8133 -6306 -6316 -6320 0
8133 -6306 -6315 -6321 0
c ((1<=(aux1570 + aux1573 + aux1574))=tv=SATLiteral(8134))
-8134 -6306 -6315 -6320 0
8134 6320 0
8134 6315 0
8134 6316 0
8134 6318 0
8134 6306 0
8134 6306 6315 0
8134 6306 6316 0
8134 6306 6318 0
8134 6307 0
8134 6307 6315 0
8134 6307 6316 0
8134 6307 6318 0
c (((aux1576 + aux1579 + aux1580)<=1)=tv=SATLiteral(8135))
-8135 6345 0
-8135 6339 6344 0
-8135 6340 0
-8135 6342 0
-8135 6330 6344 0
-8135 6330 6339 0
-8135 6330 6340 0
-8135 6330 6342 0
-8135 6331 0
-8135 6331 6339 0
-8135 6331 6340 0
-8135 6331 6342 0
8135 -6331 -6339 -6344 0
8135 -6330 -6340 -6344 0
8135 -6330 -6339 -6345 0
c ((1<=(aux1576 + aux1579 + aux1580))=tv=SATLiteral(8136))
-8136 -6330 -6339 -6344 0
8136 6344 0
8136 6339 0
8136 6340 0
8136 6342 0
8136 6330 0
8136 6330 6339 0
8136 6330 6340 0
8136 6330 6342 0
8136 6331 0
8136 6331 6339 0
8136 6331 6340 0
8136 6331 6342 0
c (((aux1582 + aux1585 + aux1586)<=1)=tv=SATLiteral(8137))
-8137 6369 0
-8137 6363 6368 0
-8137 6364 0
-8137 6366 0
-8137 6354 6368 0
-8137 6354 6363 0
-8137 6354 6364 0
-8137 6354 6366 0
-8137 6355 0
-8137 6355 6363 0
-8137 6355 6364 0
-8137 6355 6366 0
8137 -6355 -6363 -6368 0
8137 -6354 -6364 -6368 0
8137 -6354 -6363 -6369 0
c ((1<=(aux1582 + aux1585 + aux1586))=tv=SATLiteral(8138))
-8138 -6354 -6363 -6368 0
8138 6368 0
8138 6363 0
8138 6364 0
8138 6366 0
8138 6354 0
8138 6354 6363 0
8138 6354 6364 0
8138 6354 6366 0
8138 6355 0
8138 6355 6363 0
8138 6355 6364 0
8138 6355 6366 0
c (((aux1588 + aux1591 + aux1592)<=1)=tv=SATLiteral(8139))
-8139 6393 0
-8139 6387 6392 0
-8139 6388 0
-8139 6390 0
-8139 6378 6392 0
-8139 6378 6387 0
-8139 6378 6388 0
-8139 6378 6390 0
-8139 6379 0
-8139 6379 6387 0
-8139 6379 6388 0
-8139 6379 6390 0
8139 -6379 -6387 -6392 0
8139 -6378 -6388 -6392 0
8139 -6378 -6387 -6393 0
c ((1<=(aux1588 + aux1591 + aux1592))=tv=SATLiteral(8140))
-8140 -6378 -6387 -6392 0
8140 6392 0
8140 6387 0
8140 6388 0
8140 6390 0
8140 6378 0
8140 6378 6387 0
8140 6378 6388 0
8140 6378 6390 0
8140 6379 0
8140 6379 6387 0
8140 6379 6388 0
8140 6379 6390 0
c (((aux1594 + aux1597 + aux1598)<=1)=tv=SATLiteral(8141))
-8141 6417 0
-8141 6411 6416 0
-8141 6412 0
-8141 6414 0
-8141 6402 6416 0
-8141 6402 6411 0
-8141 6402 6412 0
-8141 6402 6414 0
-8141 6403 0
-8141 6403 6411 0
-8141 6403 6412 0
-8141 6403 6414 0
8141 -6403 -6411 -6416 0
8141 -6402 -6412 -6416 0
8141 -6402 -6411 -6417 0
c ((1<=(aux1594 + aux1597 + aux1598))=tv=SATLiteral(8142))
-8142 -6402 -6411 -6416 0
8142 6416 0
8142 6411 0
8142 6412 0
8142 6414 0
8142 6402 0
8142 6402 6411 0
8142 6402 6412 0
8142 6402 6414 0
8142 6403 0
8142 6403 6411 0
8142 6403 6412 0
8142 6403 6414 0
c (((aux1600 + aux1603 + aux1604)<=1)=tv=SATLiteral(8143))
-8143 6441 0
-8143 6435 6440 0
-8143 6436 0
-8143 6438 0
-8143 6426 6440 0
-8143 6426 6435 0
-8143 6426 6436 0
-8143 6426 6438 0
-8143 6427 0
-8143 6427 6435 0
-8143 6427 6436 0
-8143 6427 6438 0
8143 -6427 -6435 -6440 0
8143 -6426 -6436 -6440 0
8143 -6426 -6435 -6441 0
c ((1<=(aux1600 + aux1603 + aux1604))=tv=SATLiteral(8144))
-8144 -6426 -6435 -6440 0
8144 6440 0
8144 6435 0
8144 6436 0
8144 6438 0
8144 6426 0
8144 6426 6435 0
8144 6426 6436 0
8144 6426 6438 0
8144 6427 0
8144 6427 6435 0
8144 6427 6436 0
8144 6427 6438 0
c (((aux1606 + aux1609 + aux1610)<=1)=tv=SATLiteral(8145))
-8145 6465 0
-8145 6459 6464 0
-8145 6460 0
-8145 6462 0
-8145 6450 6464 0
-8145 6450 6459 0
-8145 6450 6460 0
-8145 6450 6462 0
-8145 6451 0
-8145 6451 6459 0
-8145 6451 6460 0
-8145 6451 6462 0
8145 -6451 -6459 -6464 0
8145 -6450 -6460 -6464 0
8145 -6450 -6459 -6465 0
c ((1<=(aux1606 + aux1609 + aux1610))=tv=SATLiteral(8146))
-8146 -6450 -6459 -6464 0
8146 6464 0
8146 6459 0
8146 6460 0
8146 6462 0
8146 6450 0
8146 6450 6459 0
8146 6450 6460 0
8146 6450 6462 0
8146 6451 0
8146 6451 6459 0
8146 6451 6460 0
8146 6451 6462 0
c (((aux1612 + aux1615 + aux1616)<=1)=tv=SATLiteral(8147))
-8147 6489 0
-8147 6483 6488 0
-8147 6484 0
-8147 6486 0
-8147 6474 6488 0
-8147 6474 6483 0
-8147 6474 6484 0
-8147 6474 6486 0
-8147 6475 0
-8147 6475 6483 0
-8147 6475 6484 0
-8147 6475 6486 0
8147 -6475 -6483 -6488 0
8147 -6474 -6484 -6488 0
8147 -6474 -6483 -6489 0
c ((1<=(aux1612 + aux1615 + aux1616))=tv=SATLiteral(8148))
-8148 -6474 -6483 -6488 0
8148 6488 0
8148 6483 0
8148 6484 0
8148 6486 0
8148 6474 0
8148 6474 6483 0
8148 6474 6484 0
8148 6474 6486 0
8148 6475 0
8148 6475 6483 0
8148 6475 6484 0
8148 6475 6486 0
c (((aux1618 + aux1621 + aux1622)<=1)=tv=SATLiteral(8149))
-8149 6513 0
-8149 6507 6512 0
-8149 6508 0
-8149 6510 0
-8149 6498 6512 0
-8149 6498 6507 0
-8149 6498 6508 0
-8149 6498 6510 0
-8149 6499 0
-8149 6499 6507 0
-8149 6499 6508 0
-8149 6499 6510 0
8149 -6499 -6507 -6512 0
8149 -6498 -6508 -6512 0
8149 -6498 -6507 -6513 0
c ((1<=(aux1618 + aux1621 + aux1622))=tv=SATLiteral(8150))
-8150 -6498 -6507 -6512 0
8150 6512 0
8150 6507 0
8150 6508 0
8150 6510 0
8150 6498 0
8150 6498 6507 0
8150 6498 6508 0
8150 6498 6510 0
8150 6499 0
8150 6499 6507 0
8150 6499 6508 0
8150 6499 6510 0
c (((aux1624 + aux1627 + aux1628)<=1)=tv=SATLiteral(8151))
-8151 6537 0
-8151 6531 6536 0
-8151 6532 0
-8151 6534 0
-8151 6522 6536 0
-8151 6522 6531 0
-8151 6522 6532 0
-8151 6522 6534 0
-8151 6523 0
-8151 6523 6531 0
-8151 6523 6532 0
-8151 6523 6534 0
8151 -6523 -6531 -6536 0
8151 -6522 -6532 -6536 0
8151 -6522 -6531 -6537 0
c ((1<=(aux1624 + aux1627 + aux1628))=tv=SATLiteral(8152))
-8152 -6522 -6531 -6536 0
8152 6536 0
8152 6531 0
8152 6532 0
8152 6534 0
8152 6522 0
8152 6522 6531 0
8152 6522 6532 0
8152 6522 6534 0
8152 6523 0
8152 6523 6531 0
8152 6523 6532 0
8152 6523 6534 0
c (((aux1630 + aux1633 + aux1634)<=1)=tv=SATLiteral(8153))
-8153 6561 0
-8153 6555 6560 0
-8153 6556 0
-8153 6558 0
-8153 6546 6560 0
-8153 6546 6555 0
-8153 6546 6556 0
-8153 6546 6558 0
-8153 6547 0
-8153 6547 6555 0
-8153 6547 6556 0
-8153 6547 6558 0
8153 -6547 -6555 -6560 0
8153 -6546 -6556 -6560 0
8153 -6546 -6555 -6561 0
c ((1<=(aux1630 + aux1633 + aux1634))=tv=SATLiteral(8154))
-8154 -6546 -6555 -6560 0
8154 6560 0
8154 6555 0
8154 6556 0
8154 6558 0
8154 6546 0
8154 6546 6555 0
8154 6546 6556 0
8154 6546 6558 0
8154 6547 0
8154 6547 6555 0
8154 6547 6556 0
8154 6547 6558 0
c (((aux1636 + aux1639 + aux1640)<=1)=tv=SATLiteral(8155))
-8155 6585 0
-8155 6579 6584 0
-8155 6580 0
-8155 6582 0
-8155 6570 6584 0
-8155 6570 6579 0
-8155 6570 6580 0
-8155 6570 6582 0
-8155 6571 0
-8155 6571 6579 0
-8155 6571 6580 0
-8155 6571 6582 0
8155 -6571 -6579 -6584 0
8155 -6570 -6580 -6584 0
8155 -6570 -6579 -6585 0
c ((1<=(aux1636 + aux1639 + aux1640))=tv=SATLiteral(8156))
-8156 -6570 -6579 -6584 0
8156 6584 0
8156 6579 0
8156 6580 0
8156 6582 0
8156 6570 0
8156 6570 6579 0
8156 6570 6580 0
8156 6570 6582 0
8156 6571 0
8156 6571 6579 0
8156 6571 6580 0
8156 6571 6582 0
c (((aux1642 + aux1645 + aux1646)<=1)=tv=SATLiteral(8157))
-8157 6609 0
-8157 6603 6608 0
-8157 6604 0
-8157 6606 0
-8157 6594 6608 0
-8157 6594 6603 0
-8157 6594 6604 0
-8157 6594 6606 0
-8157 6595 0
-8157 6595 6603 0
-8157 6595 6604 0
-8157 6595 6606 0
8157 -6595 -6603 -6608 0
8157 -6594 -6604 -6608 0
8157 -6594 -6603 -6609 0
c ((1<=(aux1642 + aux1645 + aux1646))=tv=SATLiteral(8158))
-8158 -6594 -6603 -6608 0
8158 6608 0
8158 6603 0
8158 6604 0
8158 6606 0
8158 6594 0
8158 6594 6603 0
8158 6594 6604 0
8158 6594 6606 0
8158 6595 0
8158 6595 6603 0
8158 6595 6604 0
8158 6595 6606 0
c (((aux1648 + aux1651 + aux1652)<=1)=tv=SATLiteral(8159))
-8159 6633 0
-8159 6627 6632 0
-8159 6628 0
-8159 6630 0
-8159 6618 6632 0
-8159 6618 6627 0
-8159 6618 6628 0
-8159 6618 6630 0
-8159 6619 0
-8159 6619 6627 0
-8159 6619 6628 0
-8159 6619 6630 0
8159 -6619 -6627 -6632 0
8159 -6618 -6628 -6632 0
8159 -6618 -6627 -6633 0
c ((1<=(aux1648 + aux1651 + aux1652))=tv=SATLiteral(8160))
-8160 -6618 -6627 -6632 0
8160 6632 0
8160 6627 0
8160 6628 0
8160 6630 0
8160 6618 0
8160 6618 6627 0
8160 6618 6628 0
8160 6618 6630 0
8160 6619 0
8160 6619 6627 0
8160 6619 6628 0
8160 6619 6630 0
c (((aux1654 + aux1657 + aux1658)<=1)=tv=SATLiteral(8161))
-8161 6657 0
-8161 6651 6656 0
-8161 6652 0
-8161 6654 0
-8161 6642 6656 0
-8161 6642 6651 0
-8161 6642 6652 0
-8161 6642 6654 0
-8161 6643 0
-8161 6643 6651 0
-8161 6643 6652 0
-8161 6643 6654 0
8161 -6643 -6651 -6656 0
8161 -6642 -6652 -6656 0
8161 -6642 -6651 -6657 0
c ((1<=(aux1654 + aux1657 + aux1658))=tv=SATLiteral(8162))
-8162 -6642 -6651 -6656 0
8162 6656 0
8162 6651 0
8162 6652 0
8162 6654 0
8162 6642 0
8162 6642 6651 0
8162 6642 6652 0
8162 6642 6654 0
8162 6643 0
8162 6643 6651 0
8162 6643 6652 0
8162 6643 6654 0
c (((aux1660 + aux1663 + aux1664)<=1)=tv=SATLiteral(8163))
-8163 6681 0
-8163 6675 6680 0
-8163 6676 0
-8163 6678 0
-8163 6666 6680 0
-8163 6666 6675 0
-8163 6666 6676 0
-8163 6666 6678 0
-8163 6667 0
-8163 6667 6675 0
-8163 6667 6676 0
-8163 6667 6678 0
8163 -6667 -6675 -6680 0
8163 -6666 -6676 -6680 0
8163 -6666 -6675 -6681 0
c ((1<=(aux1660 + aux1663 + aux1664))=tv=SATLiteral(8164))
-8164 -6666 -6675 -6680 0
8164 6680 0
8164 6675 0
8164 6676 0
8164 6678 0
8164 6666 0
8164 6666 6675 0
8164 6666 6676 0
8164 6666 6678 0
8164 6667 0
8164 6667 6675 0
8164 6667 6676 0
8164 6667 6678 0
c (((aux1666 + aux1669 + aux1670)<=1)=tv=SATLiteral(8165))
-8165 6705 0
-8165 6699 6704 0
-8165 6700 0
-8165 6702 0
-8165 6690 6704 0
-8165 6690 6699 0
-8165 6690 6700 0
-8165 6690 6702 0
-8165 6691 0
-8165 6691 6699 0
-8165 6691 6700 0
-8165 6691 6702 0
8165 -6691 -6699 -6704 0
8165 -6690 -6700 -6704 0
8165 -6690 -6699 -6705 0
c ((1<=(aux1666 + aux1669 + aux1670))=tv=SATLiteral(8166))
-8166 -6690 -6699 -6704 0
8166 6704 0
8166 6699 0
8166 6700 0
8166 6702 0
8166 6690 0
8166 6690 6699 0
8166 6690 6700 0
8166 6690 6702 0
8166 6691 0
8166 6691 6699 0
8166 6691 6700 0
8166 6691 6702 0
c (((aux1672 + aux1675 + aux1676)<=1)=tv=SATLiteral(8167))
-8167 6729 0
-8167 6723 6728 0
-8167 6724 0
-8167 6726 0
-8167 6714 6728 0
-8167 6714 6723 0
-8167 6714 6724 0
-8167 6714 6726 0
-8167 6715 0
-8167 6715 6723 0
-8167 6715 6724 0
-8167 6715 6726 0
8167 -6715 -6723 -6728 0
8167 -6714 -6724 -6728 0
8167 -6714 -6723 -6729 0
c ((1<=(aux1672 + aux1675 + aux1676))=tv=SATLiteral(8168))
-8168 -6714 -6723 -6728 0
8168 6728 0
8168 6723 0
8168 6724 0
8168 6726 0
8168 6714 0
8168 6714 6723 0
8168 6714 6724 0
8168 6714 6726 0
8168 6715 0
8168 6715 6723 0
8168 6715 6724 0
8168 6715 6726 0
c (((aux1678 + aux1681 + aux1682)<=1)=tv=SATLiteral(8169))
-8169 6753 0
-8169 6747 6752 0
-8169 6748 0
-8169 6750 0
-8169 6738 6752 0
-8169 6738 6747 0
-8169 6738 6748 0
-8169 6738 6750 0
-8169 6739 0
-8169 6739 6747 0
-8169 6739 6748 0
-8169 6739 6750 0
8169 -6739 -6747 -6752 0
8169 -6738 -6748 -6752 0
8169 -6738 -6747 -6753 0
c ((1<=(aux1678 + aux1681 + aux1682))=tv=SATLiteral(8170))
-8170 -6738 -6747 -6752 0
8170 6752 0
8170 6747 0
8170 6748 0
8170 6750 0
8170 6738 0
8170 6738 6747 0
8170 6738 6748 0
8170 6738 6750 0
8170 6739 0
8170 6739 6747 0
8170 6739 6748 0
8170 6739 6750 0
c (((aux1684 + aux1687 + aux1688)<=1)=tv=SATLiteral(8171))
-8171 6777 0
-8171 6771 6776 0
-8171 6772 0
-8171 6774 0
-8171 6762 6776 0
-8171 6762 6771 0
-8171 6762 6772 0
-8171 6762 6774 0
-8171 6763 0
-8171 6763 6771 0
-8171 6763 6772 0
-8171 6763 6774 0
8171 -6763 -6771 -6776 0
8171 -6762 -6772 -6776 0
8171 -6762 -6771 -6777 0
c ((1<=(aux1684 + aux1687 + aux1688))=tv=SATLiteral(8172))
-8172 -6762 -6771 -6776 0
8172 6776 0
8172 6771 0
8172 6772 0
8172 6774 0
8172 6762 0
8172 6762 6771 0
8172 6762 6772 0
8172 6762 6774 0
8172 6763 0
8172 6763 6771 0
8172 6763 6772 0
8172 6763 6774 0
c (((aux1690 + aux1693 + aux1694)<=1)=tv=SATLiteral(8173))
-8173 6801 0
-8173 6795 6800 0
-8173 6796 0
-8173 6798 0
-8173 6786 6800 0
-8173 6786 6795 0
-8173 6786 6796 0
-8173 6786 6798 0
-8173 6787 0
-8173 6787 6795 0
-8173 6787 6796 0
-8173 6787 6798 0
8173 -6787 -6795 -6800 0
8173 -6786 -6796 -6800 0
8173 -6786 -6795 -6801 0
c ((1<=(aux1690 + aux1693 + aux1694))=tv=SATLiteral(8174))
-8174 -6786 -6795 -6800 0
8174 6800 0
8174 6795 0
8174 6796 0
8174 6798 0
8174 6786 0
8174 6786 6795 0
8174 6786 6796 0
8174 6786 6798 0
8174 6787 0
8174 6787 6795 0
8174 6787 6796 0
8174 6787 6798 0
c (((aux1696 + aux1699 + aux1700)<=1)=tv=SATLiteral(8175))
-8175 6825 0
-8175 6819 6824 0
-8175 6820 0
-8175 6822 0
-8175 6810 6824 0
-8175 6810 6819 0
-8175 6810 6820 0
-8175 6810 6822 0
-8175 6811 0
-8175 6811 6819 0
-8175 6811 6820 0
-8175 6811 6822 0
8175 -6811 -6819 -6824 0
8175 -6810 -6820 -6824 0
8175 -6810 -6819 -6825 0
c ((1<=(aux1696 + aux1699 + aux1700))=tv=SATLiteral(8176))
-8176 -6810 -6819 -6824 0
8176 6824 0
8176 6819 0
8176 6820 0
8176 6822 0
8176 6810 0
8176 6810 6819 0
8176 6810 6820 0
8176 6810 6822 0
8176 6811 0
8176 6811 6819 0
8176 6811 6820 0
8176 6811 6822 0
c (((aux1702 + aux1705 + aux1706)<=1)=tv=SATLiteral(8177))
-8177 6849 0
-8177 6843 6848 0
-8177 6844 0
-8177 6846 0
-8177 6834 6848 0
-8177 6834 6843 0
-8177 6834 6844 0
-8177 6834 6846 0
-8177 6835 0
-8177 6835 6843 0
-8177 6835 6844 0
-8177 6835 6846 0
8177 -6835 -6843 -6848 0
8177 -6834 -6844 -6848 0
8177 -6834 -6843 -6849 0
c ((1<=(aux1702 + aux1705 + aux1706))=tv=SATLiteral(8178))
-8178 -6834 -6843 -6848 0
8178 6848 0
8178 6843 0
8178 6844 0
8178 6846 0
8178 6834 0
8178 6834 6843 0
8178 6834 6844 0
8178 6834 6846 0
8178 6835 0
8178 6835 6843 0
8178 6835 6844 0
8178 6835 6846 0
c (((aux1708 + aux1711 + aux1712)<=1)=tv=SATLiteral(8179))
-8179 6873 0
-8179 6867 6872 0
-8179 6868 0
-8179 6870 0
-8179 6858 6872 0
-8179 6858 6867 0
-8179 6858 6868 0
-8179 6858 6870 0
-8179 6859 0
-8179 6859 6867 0
-8179 6859 6868 0
-8179 6859 6870 0
8179 -6859 -6867 -6872 0
8179 -6858 -6868 -6872 0
8179 -6858 -6867 -6873 0
c ((1<=(aux1708 + aux1711 + aux1712))=tv=SATLiteral(8180))
-8180 -6858 -6867 -6872 0
8180 6872 0
8180 6867 0
8180 6868 0
8180 6870 0
8180 6858 0
8180 6858 6867 0
8180 6858 6868 0
8180 6858 6870 0
8180 6859 0
8180 6859 6867 0
8180 6859 6868 0
8180 6859 6870 0
c (((aux1714 + aux1717 + aux1718)<=1)=tv=SATLiteral(8181))
-8181 6897 0
-8181 6891 6896 0
-8181 6892 0
-8181 6894 0
-8181 6882 6896 0
-8181 6882 6891 0
-8181 6882 6892 0
-8181 6882 6894 0
-8181 6883 0
-8181 6883 6891 0
-8181 6883 6892 0
-8181 6883 6894 0
8181 -6883 -6891 -6896 0
8181 -6882 -6892 -6896 0
8181 -6882 -6891 -6897 0
c ((1<=(aux1714 + aux1717 + aux1718))=tv=SATLiteral(8182))
-8182 -6882 -6891 -6896 0
8182 6896 0
8182 6891 0
8182 6892 0
8182 6894 0
8182 6882 0
8182 6882 6891 0
8182 6882 6892 0
8182 6882 6894 0
8182 6883 0
8182 6883 6891 0
8182 6883 6892 0
8182 6883 6894 0
c (((aux1720 + aux1723 + aux1724)<=1)=tv=SATLiteral(8183))
-8183 6921 0
-8183 6915 6920 0
-8183 6916 0
-8183 6918 0
-8183 6906 6920 0
-8183 6906 6915 0
-8183 6906 6916 0
-8183 6906 6918 0
-8183 6907 0
-8183 6907 6915 0
-8183 6907 6916 0
-8183 6907 6918 0
8183 -6907 -6915 -6920 0
8183 -6906 -6916 -6920 0
8183 -6906 -6915 -6921 0
c ((1<=(aux1720 + aux1723 + aux1724))=tv=SATLiteral(8184))
-8184 -6906 -6915 -6920 0
8184 6920 0
8184 6915 0
8184 6916 0
8184 6918 0
8184 6906 0
8184 6906 6915 0
8184 6906 6916 0
8184 6906 6918 0
8184 6907 0
8184 6907 6915 0
8184 6907 6916 0
8184 6907 6918 0
c (((aux1726 + aux1729 + aux1730)<=1)=tv=SATLiteral(8185))
-8185 6945 0
-8185 6939 6944 0
-8185 6940 0
-8185 6942 0
-8185 6930 6944 0
-8185 6930 6939 0
-8185 6930 6940 0
-8185 6930 6942 0
-8185 6931 0
-8185 6931 6939 0
-8185 6931 6940 0
-8185 6931 6942 0
8185 -6931 -6939 -6944 0
8185 -6930 -6940 -6944 0
8185 -6930 -6939 -6945 0
c ((1<=(aux1726 + aux1729 + aux1730))=tv=SATLiteral(8186))
-8186 -6930 -6939 -6944 0
8186 6944 0
8186 6939 0
8186 6940 0
8186 6942 0
8186 6930 0
8186 6930 6939 0
8186 6930 6940 0
8186 6930 6942 0
8186 6931 0
8186 6931 6939 0
8186 6931 6940 0
8186 6931 6942 0
c (((aux1732 + aux1735 + aux1736)<=1)=tv=SATLiteral(8187))
-8187 6969 0
-8187 6963 6968 0
-8187 6964 0
-8187 6966 0
-8187 6954 6968 0
-8187 6954 6963 0
-8187 6954 6964 0
-8187 6954 6966 0
-8187 6955 0
-8187 6955 6963 0
-8187 6955 6964 0
-8187 6955 6966 0
8187 -6955 -6963 -6968 0
8187 -6954 -6964 -6968 0
8187 -6954 -6963 -6969 0
c ((1<=(aux1732 + aux1735 + aux1736))=tv=SATLiteral(8188))
-8188 -6954 -6963 -6968 0
8188 6968 0
8188 6963 0
8188 6964 0
8188 6966 0
8188 6954 0
8188 6954 6963 0
8188 6954 6964 0
8188 6954 6966 0
8188 6955 0
8188 6955 6963 0
8188 6955 6964 0
8188 6955 6966 0
c (((aux1738 + aux1741 + aux1742)<=1)=tv=SATLiteral(8189))
-8189 6993 0
-8189 6987 6992 0
-8189 6988 0
-8189 6990 0
-8189 6978 6992 0
-8189 6978 6987 0
-8189 6978 6988 0
-8189 6978 6990 0
-8189 6979 0
-8189 6979 6987 0
-8189 6979 6988 0
-8189 6979 6990 0
8189 -6979 -6987 -6992 0
8189 -6978 -6988 -6992 0
8189 -6978 -6987 -6993 0
c ((1<=(aux1738 + aux1741 + aux1742))=tv=SATLiteral(8190))
-8190 -6978 -6987 -6992 0
8190 6992 0
8190 6987 0
8190 6988 0
8190 6990 0
8190 6978 0
8190 6978 6987 0
8190 6978 6988 0
8190 6978 6990 0
8190 6979 0
8190 6979 6987 0
8190 6979 6988 0
8190 6979 6990 0
c (((aux1744 + aux1747 + aux1748)<=1)=tv=SATLiteral(8191))
-8191 7017 0
-8191 7011 7016 0
-8191 7012 0
-8191 7014 0
-8191 7002 7016 0
-8191 7002 7011 0
-8191 7002 7012 0
-8191 7002 7014 0
-8191 7003 0
-8191 7003 7011 0
-8191 7003 7012 0
-8191 7003 7014 0
8191 -7003 -7011 -7016 0
8191 -7002 -7012 -7016 0
8191 -7002 -7011 -7017 0
c ((1<=(aux1744 + aux1747 + aux1748))=tv=SATLiteral(8192))
-8192 -7002 -7011 -7016 0
8192 7016 0
8192 7011 0
8192 7012 0
8192 7014 0
8192 7002 0
8192 7002 7011 0
8192 7002 7012 0
8192 7002 7014 0
8192 7003 0
8192 7003 7011 0
8192 7003 7012 0
8192 7003 7014 0
c (((aux1750 + aux1753 + aux1754)<=1)=tv=SATLiteral(8193))
-8193 7041 0
-8193 7035 7040 0
-8193 7036 0
-8193 7038 0
-8193 7026 7040 0
-8193 7026 7035 0
-8193 7026 7036 0
-8193 7026 7038 0
-8193 7027 0
-8193 7027 7035 0
-8193 7027 7036 0
-8193 7027 7038 0
8193 -7027 -7035 -7040 0
8193 -7026 -7036 -7040 0
8193 -7026 -7035 -7041 0
c ((1<=(aux1750 + aux1753 + aux1754))=tv=SATLiteral(8194))
-8194 -7026 -7035 -7040 0
8194 7040 0
8194 7035 0
8194 7036 0
8194 7038 0
8194 7026 0
8194 7026 7035 0
8194 7026 7036 0
8194 7026 7038 0
8194 7027 0
8194 7027 7035 0
8194 7027 7036 0
8194 7027 7038 0
c (((aux1756 + aux1759 + aux1760)<=1)=tv=SATLiteral(8195))
-8195 7065 0
-8195 7059 7064 0
-8195 7060 0
-8195 7062 0
-8195 7050 7064 0
-8195 7050 7059 0
-8195 7050 7060 0
-8195 7050 7062 0
-8195 7051 0
-8195 7051 7059 0
-8195 7051 7060 0
-8195 7051 7062 0
8195 -7051 -7059 -7064 0
8195 -7050 -7060 -7064 0
8195 -7050 -7059 -7065 0
c ((1<=(aux1756 + aux1759 + aux1760))=tv=SATLiteral(8196))
-8196 -7050 -7059 -7064 0
8196 7064 0
8196 7059 0
8196 7060 0
8196 7062 0
8196 7050 0
8196 7050 7059 0
8196 7050 7060 0
8196 7050 7062 0
8196 7051 0
8196 7051 7059 0
8196 7051 7060 0
8196 7051 7062 0
c (((aux1762 + aux1765 + aux1766)<=1)=tv=SATLiteral(8197))
-8197 7089 0
-8197 7083 7088 0
-8197 7084 0
-8197 7086 0
-8197 7074 7088 0
-8197 7074 7083 0
-8197 7074 7084 0
-8197 7074 7086 0
-8197 7075 0
-8197 7075 7083 0
-8197 7075 7084 0
-8197 7075 7086 0
8197 -7075 -7083 -7088 0
8197 -7074 -7084 -7088 0
8197 -7074 -7083 -7089 0
c ((1<=(aux1762 + aux1765 + aux1766))=tv=SATLiteral(8198))
-8198 -7074 -7083 -7088 0
8198 7088 0
8198 7083 0
8198 7084 0
8198 7086 0
8198 7074 0
8198 7074 7083 0
8198 7074 7084 0
8198 7074 7086 0
8198 7075 0
8198 7075 7083 0
8198 7075 7084 0
8198 7075 7086 0
c (((aux1768 + aux1771 + aux1772)<=1)=tv=SATLiteral(8199))
-8199 7113 0
-8199 7107 7112 0
-8199 7108 0
-8199 7110 0
-8199 7098 7112 0
-8199 7098 7107 0
-8199 7098 7108 0
-8199 7098 7110 0
-8199 7099 0
-8199 7099 7107 0
-8199 7099 7108 0
-8199 7099 7110 0
8199 -7099 -7107 -7112 0
8199 -7098 -7108 -7112 0
8199 -7098 -7107 -7113 0
c ((1<=(aux1768 + aux1771 + aux1772))=tv=SATLiteral(8200))
-8200 -7098 -7107 -7112 0
8200 7112 0
8200 7107 0
8200 7108 0
8200 7110 0
8200 7098 0
8200 7098 7107 0
8200 7098 7108 0
8200 7098 7110 0
8200 7099 0
8200 7099 7107 0
8200 7099 7108 0
8200 7099 7110 0
c (((aux1774 + aux1777 + aux1778)<=1)=tv=SATLiteral(8201))
-8201 7137 0
-8201 7131 7136 0
-8201 7132 0
-8201 7134 0
-8201 7122 7136 0
-8201 7122 7131 0
-8201 7122 7132 0
-8201 7122 7134 0
-8201 7123 0
-8201 7123 7131 0
-8201 7123 7132 0
-8201 7123 7134 0
8201 -7123 -7131 -7136 0
8201 -7122 -7132 -7136 0
8201 -7122 -7131 -7137 0
c ((1<=(aux1774 + aux1777 + aux1778))=tv=SATLiteral(8202))
-8202 -7122 -7131 -7136 0
8202 7136 0
8202 7131 0
8202 7132 0
8202 7134 0
8202 7122 0
8202 7122 7131 0
8202 7122 7132 0
8202 7122 7134 0
8202 7123 0
8202 7123 7131 0
8202 7123 7132 0
8202 7123 7134 0
c (((aux1780 + aux1783 + aux1784)<=1)=tv=SATLiteral(8203))
-8203 7161 0
-8203 7155 7160 0
-8203 7156 0
-8203 7158 0
-8203 7146 7160 0
-8203 7146 7155 0
-8203 7146 7156 0
-8203 7146 7158 0
-8203 7147 0
-8203 7147 7155 0
-8203 7147 7156 0
-8203 7147 7158 0
8203 -7147 -7155 -7160 0
8203 -7146 -7156 -7160 0
8203 -7146 -7155 -7161 0
c ((1<=(aux1780 + aux1783 + aux1784))=tv=SATLiteral(8204))
-8204 -7146 -7155 -7160 0
8204 7160 0
8204 7155 0
8204 7156 0
8204 7158 0
8204 7146 0
8204 7146 7155 0
8204 7146 7156 0
8204 7146 7158 0
8204 7147 0
8204 7147 7155 0
8204 7147 7156 0
8204 7147 7158 0
c (((aux1786 + aux1789 + aux1790)<=1)=tv=SATLiteral(8205))
-8205 7185 0
-8205 7179 7184 0
-8205 7180 0
-8205 7182 0
-8205 7170 7184 0
-8205 7170 7179 0
-8205 7170 7180 0
-8205 7170 7182 0
-8205 7171 0
-8205 7171 7179 0
-8205 7171 7180 0
-8205 7171 7182 0
8205 -7171 -7179 -7184 0
8205 -7170 -7180 -7184 0
8205 -7170 -7179 -7185 0
c ((1<=(aux1786 + aux1789 + aux1790))=tv=SATLiteral(8206))
-8206 -7170 -7179 -7184 0
8206 7184 0
8206 7179 0
8206 7180 0
8206 7182 0
8206 7170 0
8206 7170 7179 0
8206 7170 7180 0
8206 7170 7182 0
8206 7171 0
8206 7171 7179 0
8206 7171 7180 0
8206 7171 7182 0
c (((aux1792 + aux1795 + aux1796)<=1)=tv=SATLiteral(8207))
-8207 7209 0
-8207 7203 7208 0
-8207 7204 0
-8207 7206 0
-8207 7194 7208 0
-8207 7194 7203 0
-8207 7194 7204 0
-8207 7194 7206 0
-8207 7195 0
-8207 7195 7203 0
-8207 7195 7204 0
-8207 7195 7206 0
8207 -7195 -7203 -7208 0
8207 -7194 -7204 -7208 0
8207 -7194 -7203 -7209 0
c ((1<=(aux1792 + aux1795 + aux1796))=tv=SATLiteral(8208))
-8208 -7194 -7203 -7208 0
8208 7208 0
8208 7203 0
8208 7204 0
8208 7206 0
8208 7194 0
8208 7194 7203 0
8208 7194 7204 0
8208 7194 7206 0
8208 7195 0
8208 7195 7203 0
8208 7195 7204 0
8208 7195 7206 0
c (((aux1798 + aux1801 + aux1802)<=1)=tv=SATLiteral(8209))
-8209 7233 0
-8209 7227 7232 0
-8209 7228 0
-8209 7230 0
-8209 7218 7232 0
-8209 7218 7227 0
-8209 7218 7228 0
-8209 7218 7230 0
-8209 7219 0
-8209 7219 7227 0
-8209 7219 7228 0
-8209 7219 7230 0
8209 -7219 -7227 -7232 0
8209 -7218 -7228 -7232 0
8209 -7218 -7227 -7233 0
c ((1<=(aux1798 + aux1801 + aux1802))=tv=SATLiteral(8210))
-8210 -7218 -7227 -7232 0
8210 7232 0
8210 7227 0
8210 7228 0
8210 7230 0
8210 7218 0
8210 7218 7227 0
8210 7218 7228 0
8210 7218 7230 0
8210 7219 0
8210 7219 7227 0
8210 7219 7228 0
8210 7219 7230 0
c (((aux1804 + aux1807 + aux1808)<=1)=tv=SATLiteral(8211))
-8211 7257 0
-8211 7251 7256 0
-8211 7252 0
-8211 7254 0
-8211 7242 7256 0
-8211 7242 7251 0
-8211 7242 7252 0
-8211 7242 7254 0
-8211 7243 0
-8211 7243 7251 0
-8211 7243 7252 0
-8211 7243 7254 0
8211 -7243 -7251 -7256 0
8211 -7242 -7252 -7256 0
8211 -7242 -7251 -7257 0
c ((1<=(aux1804 + aux1807 + aux1808))=tv=SATLiteral(8212))
-8212 -7242 -7251 -7256 0
8212 7256 0
8212 7251 0
8212 7252 0
8212 7254 0
8212 7242 0
8212 7242 7251 0
8212 7242 7252 0
8212 7242 7254 0
8212 7243 0
8212 7243 7251 0
8212 7243 7252 0
8212 7243 7254 0
c (((aux1810 + aux1813 + aux1814)<=1)=tv=SATLiteral(8213))
-8213 7281 0
-8213 7275 7280 0
-8213 7276 0
-8213 7278 0
-8213 7266 7280 0
-8213 7266 7275 0
-8213 7266 7276 0
-8213 7266 7278 0
-8213 7267 0
-8213 7267 7275 0
-8213 7267 7276 0
-8213 7267 7278 0
8213 -7267 -7275 -7280 0
8213 -7266 -7276 -7280 0
8213 -7266 -7275 -7281 0
c ((1<=(aux1810 + aux1813 + aux1814))=tv=SATLiteral(8214))
-8214 -7266 -7275 -7280 0
8214 7280 0
8214 7275 0
8214 7276 0
8214 7278 0
8214 7266 0
8214 7266 7275 0
8214 7266 7276 0
8214 7266 7278 0
8214 7267 0
8214 7267 7275 0
8214 7267 7276 0
8214 7267 7278 0
c (((aux1816 + aux1819 + aux1820)<=1)=tv=SATLiteral(8215))
-8215 7305 0
-8215 7299 7304 0
-8215 7300 0
-8215 7302 0
-8215 7290 7304 0
-8215 7290 7299 0
-8215 7290 7300 0
-8215 7290 7302 0
-8215 7291 0
-8215 7291 7299 0
-8215 7291 7300 0
-8215 7291 7302 0
8215 -7291 -7299 -7304 0
8215 -7290 -7300 -7304 0
8215 -7290 -7299 -7305 0
c ((1<=(aux1816 + aux1819 + aux1820))=tv=SATLiteral(8216))
-8216 -7290 -7299 -7304 0
8216 7304 0
8216 7299 0
8216 7300 0
8216 7302 0
8216 7290 0
8216 7290 7299 0
8216 7290 7300 0
8216 7290 7302 0
8216 7291 0
8216 7291 7299 0
8216 7291 7300 0
8216 7291 7302 0
c (((aux1822 + aux1825 + aux1826)<=1)=tv=SATLiteral(8217))
-8217 7329 0
-8217 7323 7328 0
-8217 7324 0
-8217 7326 0
-8217 7314 7328 0
-8217 7314 7323 0
-8217 7314 7324 0
-8217 7314 7326 0
-8217 7315 0
-8217 7315 7323 0
-8217 7315 7324 0
-8217 7315 7326 0
8217 -7315 -7323 -7328 0
8217 -7314 -7324 -7328 0
8217 -7314 -7323 -7329 0
c ((1<=(aux1822 + aux1825 + aux1826))=tv=SATLiteral(8218))
-8218 -7314 -7323 -7328 0
8218 7328 0
8218 7323 0
8218 7324 0
8218 7326 0
8218 7314 0
8218 7314 7323 0
8218 7314 7324 0
8218 7314 7326 0
8218 7315 0
8218 7315 7323 0
8218 7315 7324 0
8218 7315 7326 0
c (((aux1828 + aux1831 + aux1832)<=1)=tv=SATLiteral(8219))
-8219 7353 0
-8219 7347 7352 0
-8219 7348 0
-8219 7350 0
-8219 7338 7352 0
-8219 7338 7347 0
-8219 7338 7348 0
-8219 7338 7350 0
-8219 7339 0
-8219 7339 7347 0
-8219 7339 7348 0
-8219 7339 7350 0
8219 -7339 -7347 -7352 0
8219 -7338 -7348 -7352 0
8219 -7338 -7347 -7353 0
c ((1<=(aux1828 + aux1831 + aux1832))=tv=SATLiteral(8220))
-8220 -7338 -7347 -7352 0
8220 7352 0
8220 7347 0
8220 7348 0
8220 7350 0
8220 7338 0
8220 7338 7347 0
8220 7338 7348 0
8220 7338 7350 0
8220 7339 0
8220 7339 7347 0
8220 7339 7348 0
8220 7339 7350 0
c (((aux1834 + aux1837 + aux1838)<=1)=tv=SATLiteral(8221))
-8221 7377 0
-8221 7371 7376 0
-8221 7372 0
-8221 7374 0
-8221 7362 7376 0
-8221 7362 7371 0
-8221 7362 7372 0
-8221 7362 7374 0
-8221 7363 0
-8221 7363 7371 0
-8221 7363 7372 0
-8221 7363 7374 0
8221 -7363 -7371 -7376 0
8221 -7362 -7372 -7376 0
8221 -7362 -7371 -7377 0
c ((1<=(aux1834 + aux1837 + aux1838))=tv=SATLiteral(8222))
-8222 -7362 -7371 -7376 0
8222 7376 0
8222 7371 0
8222 7372 0
8222 7374 0
8222 7362 0
8222 7362 7371 0
8222 7362 7372 0
8222 7362 7374 0
8222 7363 0
8222 7363 7371 0
8222 7363 7372 0
8222 7363 7374 0
c (((aux1840 + aux1843 + aux1844)<=1)=tv=SATLiteral(8223))
-8223 7401 0
-8223 7395 7400 0
-8223 7396 0
-8223 7398 0
-8223 7386 7400 0
-8223 7386 7395 0
-8223 7386 7396 0
-8223 7386 7398 0
-8223 7387 0
-8223 7387 7395 0
-8223 7387 7396 0
-8223 7387 7398 0
8223 -7387 -7395 -7400 0
8223 -7386 -7396 -7400 0
8223 -7386 -7395 -7401 0
c ((1<=(aux1840 + aux1843 + aux1844))=tv=SATLiteral(8224))
-8224 -7386 -7395 -7400 0
8224 7400 0
8224 7395 0
8224 7396 0
8224 7398 0
8224 7386 0
8224 7386 7395 0
8224 7386 7396 0
8224 7386 7398 0
8224 7387 0
8224 7387 7395 0
8224 7387 7396 0
8224 7387 7398 0
c (((aux1846 + aux1849 + aux1850)<=1)=tv=SATLiteral(8225))
-8225 7425 0
-8225 7419 7424 0
-8225 7420 0
-8225 7422 0
-8225 7410 7424 0
-8225 7410 7419 0
-8225 7410 7420 0
-8225 7410 7422 0
-8225 7411 0
-8225 7411 7419 0
-8225 7411 7420 0
-8225 7411 7422 0
8225 -7411 -7419 -7424 0
8225 -7410 -7420 -7424 0
8225 -7410 -7419 -7425 0
c ((1<=(aux1846 + aux1849 + aux1850))=tv=SATLiteral(8226))
-8226 -7410 -7419 -7424 0
8226 7424 0
8226 7419 0
8226 7420 0
8226 7422 0
8226 7410 0
8226 7410 7419 0
8226 7410 7420 0
8226 7410 7422 0
8226 7411 0
8226 7411 7419 0
8226 7411 7420 0
8226 7411 7422 0
c (((aux1852 + aux1855 + aux1856)<=1)=tv=SATLiteral(8227))
-8227 7449 0
-8227 7443 7448 0
-8227 7444 0
-8227 7446 0
-8227 7434 7448 0
-8227 7434 7443 0
-8227 7434 7444 0
-8227 7434 7446 0
-8227 7435 0
-8227 7435 7443 0
-8227 7435 7444 0
-8227 7435 7446 0
8227 -7435 -7443 -7448 0
8227 -7434 -7444 -7448 0
8227 -7434 -7443 -7449 0
c ((1<=(aux1852 + aux1855 + aux1856))=tv=SATLiteral(8228))
-8228 -7434 -7443 -7448 0
8228 7448 0
8228 7443 0
8228 7444 0
8228 7446 0
8228 7434 0
8228 7434 7443 0
8228 7434 7444 0
8228 7434 7446 0
8228 7435 0
8228 7435 7443 0
8228 7435 7444 0
8228 7435 7446 0
c (((aux1858 + aux1861 + aux1862)<=1)=tv=SATLiteral(8229))
-8229 7473 0
-8229 7467 7472 0
-8229 7468 0
-8229 7470 0
-8229 7458 7472 0
-8229 7458 7467 0
-8229 7458 7468 0
-8229 7458 7470 0
-8229 7459 0
-8229 7459 7467 0
-8229 7459 7468 0
-8229 7459 7470 0
8229 -7459 -7467 -7472 0
8229 -7458 -7468 -7472 0
8229 -7458 -7467 -7473 0
c ((1<=(aux1858 + aux1861 + aux1862))=tv=SATLiteral(8230))
-8230 -7458 -7467 -7472 0
8230 7472 0
8230 7467 0
8230 7468 0
8230 7470 0
8230 7458 0
8230 7458 7467 0
8230 7458 7468 0
8230 7458 7470 0
8230 7459 0
8230 7459 7467 0
8230 7459 7468 0
8230 7459 7470 0
c (((aux1864 + aux1867 + aux1868)<=1)=tv=SATLiteral(8231))
-8231 7497 0
-8231 7491 7496 0
-8231 7492 0
-8231 7494 0
-8231 7482 7496 0
-8231 7482 7491 0
-8231 7482 7492 0
-8231 7482 7494 0
-8231 7483 0
-8231 7483 7491 0
-8231 7483 7492 0
-8231 7483 7494 0
8231 -7483 -7491 -7496 0
8231 -7482 -7492 -7496 0
8231 -7482 -7491 -7497 0
c ((1<=(aux1864 + aux1867 + aux1868))=tv=SATLiteral(8232))
-8232 -7482 -7491 -7496 0
8232 7496 0
8232 7491 0
8232 7492 0
8232 7494 0
8232 7482 0
8232 7482 7491 0
8232 7482 7492 0
8232 7482 7494 0
8232 7483 0
8232 7483 7491 0
8232 7483 7492 0
8232 7483 7494 0
c (((aux1870 + aux1873 + aux1874)<=1)=tv=SATLiteral(8233))
-8233 7521 0
-8233 7515 7520 0
-8233 7516 0
-8233 7518 0
-8233 7506 7520 0
-8233 7506 7515 0
-8233 7506 7516 0
-8233 7506 7518 0
-8233 7507 0
-8233 7507 7515 0
-8233 7507 7516 0
-8233 7507 7518 0
8233 -7507 -7515 -7520 0
8233 -7506 -7516 -7520 0
8233 -7506 -7515 -7521 0
c ((1<=(aux1870 + aux1873 + aux1874))=tv=SATLiteral(8234))
-8234 -7506 -7515 -7520 0
8234 7520 0
8234 7515 0
8234 7516 0
8234 7518 0
8234 7506 0
8234 7506 7515 0
8234 7506 7516 0
8234 7506 7518 0
8234 7507 0
8234 7507 7515 0
8234 7507 7516 0
8234 7507 7518 0
c (((aux1876 + aux1879 + aux1880)<=1)=tv=SATLiteral(8235))
-8235 7545 0
-8235 7539 7544 0
-8235 7540 0
-8235 7542 0
-8235 7530 7544 0
-8235 7530 7539 0
-8235 7530 7540 0
-8235 7530 7542 0
-8235 7531 0
-8235 7531 7539 0
-8235 7531 7540 0
-8235 7531 7542 0
8235 -7531 -7539 -7544 0
8235 -7530 -7540 -7544 0
8235 -7530 -7539 -7545 0
c ((1<=(aux1876 + aux1879 + aux1880))=tv=SATLiteral(8236))
-8236 -7530 -7539 -7544 0
8236 7544 0
8236 7539 0
8236 7540 0
8236 7542 0
8236 7530 0
8236 7530 7539 0
8236 7530 7540 0
8236 7530 7542 0
8236 7531 0
8236 7531 7539 0
8236 7531 7540 0
8236 7531 7542 0
c (((aux1882 + aux1885 + aux1886)<=1)=tv=SATLiteral(8237))
-8237 7569 0
-8237 7563 7568 0
-8237 7564 0
-8237 7566 0
-8237 7554 7568 0
-8237 7554 7563 0
-8237 7554 7564 0
-8237 7554 7566 0
-8237 7555 0
-8237 7555 7563 0
-8237 7555 7564 0
-8237 7555 7566 0
8237 -7555 -7563 -7568 0
8237 -7554 -7564 -7568 0
8237 -7554 -7563 -7569 0
c ((1<=(aux1882 + aux1885 + aux1886))=tv=SATLiteral(8238))
-8238 -7554 -7563 -7568 0
8238 7568 0
8238 7563 0
8238 7564 0
8238 7566 0
8238 7554 0
8238 7554 7563 0
8238 7554 7564 0
8238 7554 7566 0
8238 7555 0
8238 7555 7563 0
8238 7555 7564 0
8238 7555 7566 0
c (((aux1888 + aux1891 + aux1892)<=1)=tv=SATLiteral(8239))
-8239 7593 0
-8239 7587 7592 0
-8239 7588 0
-8239 7590 0
-8239 7578 7592 0
-8239 7578 7587 0
-8239 7578 7588 0
-8239 7578 7590 0
-8239 7579 0
-8239 7579 7587 0
-8239 7579 7588 0
-8239 7579 7590 0
8239 -7579 -7587 -7592 0
8239 -7578 -7588 -7592 0
8239 -7578 -7587 -7593 0
c ((1<=(aux1888 + aux1891 + aux1892))=tv=SATLiteral(8240))
-8240 -7578 -7587 -7592 0
8240 7592 0
8240 7587 0
8240 7588 0
8240 7590 0
8240 7578 0
8240 7578 7587 0
8240 7578 7588 0
8240 7578 7590 0
8240 7579 0
8240 7579 7587 0
8240 7579 7588 0
8240 7579 7590 0
c (((aux1894 + aux1897 + aux1898)<=1)=tv=SATLiteral(8241))
-8241 7617 0
-8241 7611 7616 0
-8241 7612 0
-8241 7614 0
-8241 7602 7616 0
-8241 7602 7611 0
-8241 7602 7612 0
-8241 7602 7614 0
-8241 7603 0
-8241 7603 7611 0
-8241 7603 7612 0
-8241 7603 7614 0
8241 -7603 -7611 -7616 0
8241 -7602 -7612 -7616 0
8241 -7602 -7611 -7617 0
c ((1<=(aux1894 + aux1897 + aux1898))=tv=SATLiteral(8242))
-8242 -7602 -7611 -7616 0
8242 7616 0
8242 7611 0
8242 7612 0
8242 7614 0
8242 7602 0
8242 7602 7611 0
8242 7602 7612 0
8242 7602 7614 0
8242 7603 0
8242 7603 7611 0
8242 7603 7612 0
8242 7603 7614 0
c (((aux1900 + aux1903 + aux1904)<=1)=tv=SATLiteral(8243))
-8243 7641 0
-8243 7635 7640 0
-8243 7636 0
-8243 7638 0
-8243 7626 7640 0
-8243 7626 7635 0
-8243 7626 7636 0
-8243 7626 7638 0
-8243 7627 0
-8243 7627 7635 0
-8243 7627 7636 0
-8243 7627 7638 0
8243 -7627 -7635 -7640 0
8243 -7626 -7636 -7640 0
8243 -7626 -7635 -7641 0
c ((1<=(aux1900 + aux1903 + aux1904))=tv=SATLiteral(8244))
-8244 -7626 -7635 -7640 0
8244 7640 0
8244 7635 0
8244 7636 0
8244 7638 0
8244 7626 0
8244 7626 7635 0
8244 7626 7636 0
8244 7626 7638 0
8244 7627 0
8244 7627 7635 0
8244 7627 7636 0
8244 7627 7638 0
c ((SATLiteral(7701) /\ SATLiteral(7702))=tv=SATLiteral(1308))
1308 -7701 -7702 0
7701 -1308 0
7702 -1308 0
c ((SATLiteral(7703) /\ SATLiteral(7704))=tv=SATLiteral(1309))
1309 -7703 -7704 0
7703 -1309 0
7704 -1309 0
c ((SATLiteral(7705) /\ SATLiteral(7706))=tv=SATLiteral(1310))
1310 -7705 -7706 0
7705 -1310 0
7706 -1310 0
c ((SATLiteral(7707) /\ SATLiteral(7708))=tv=SATLiteral(1311))
1311 -7707 -7708 0
7707 -1311 0
7708 -1311 0
c ((SATLiteral(7709) /\ SATLiteral(7710))=tv=SATLiteral(1312))
1312 -7709 -7710 0
7709 -1312 0
7710 -1312 0
c ((SATLiteral(7711) /\ SATLiteral(7712))=tv=SATLiteral(1313))
1313 -7711 -7712 0
7711 -1313 0
7712 -1313 0
c ((SATLiteral(7713) /\ SATLiteral(7714))=tv=SATLiteral(1314))
1314 -7713 -7714 0
7713 -1314 0
7714 -1314 0
c ((SATLiteral(7715) /\ SATLiteral(7716))=tv=SATLiteral(1315))
1315 -7715 -7716 0
7715 -1315 0
7716 -1315 0
c ((SATLiteral(7717) /\ SATLiteral(7718))=tv=SATLiteral(1316))
1316 -7717 -7718 0
7717 -1316 0
7718 -1316 0
c ((SATLiteral(7719) /\ SATLiteral(7720))=tv=SATLiteral(1317))
1317 -7719 -7720 0
7719 -1317 0
7720 -1317 0
c ((SATLiteral(7721) /\ SATLiteral(7722))=tv=SATLiteral(1318))
1318 -7721 -7722 0
7721 -1318 0
7722 -1318 0
c ((SATLiteral(7723) /\ SATLiteral(7724))=tv=SATLiteral(1319))
1319 -7723 -7724 0
7723 -1319 0
7724 -1319 0
c ((SATLiteral(7725) /\ SATLiteral(7726))=tv=SATLiteral(1320))
1320 -7725 -7726 0
7725 -1320 0
7726 -1320 0
c ((SATLiteral(7727) /\ SATLiteral(7728))=tv=SATLiteral(1321))
1321 -7727 -7728 0
7727 -1321 0
7728 -1321 0
c ((SATLiteral(7729) /\ SATLiteral(7730))=tv=SATLiteral(1322))
1322 -7729 -7730 0
7729 -1322 0
7730 -1322 0
c ((SATLiteral(7731) /\ SATLiteral(7732))=tv=SATLiteral(1323))
1323 -7731 -7732 0
7731 -1323 0
7732 -1323 0
c ((SATLiteral(7733) /\ SATLiteral(7734))=tv=SATLiteral(1324))
1324 -7733 -7734 0
7733 -1324 0
7734 -1324 0
c ((SATLiteral(7735) /\ SATLiteral(7736))=tv=SATLiteral(1325))
1325 -7735 -7736 0
7735 -1325 0
7736 -1325 0
c ((SATLiteral(7737) /\ SATLiteral(7738))=tv=SATLiteral(1326))
1326 -7737 -7738 0
7737 -1326 0
7738 -1326 0
c ((SATLiteral(7739) /\ SATLiteral(7740))=tv=SATLiteral(1327))
1327 -7739 -7740 0
7739 -1327 0
7740 -1327 0
c ((SATLiteral(7741) /\ SATLiteral(7742))=tv=SATLiteral(1328))
1328 -7741 -7742 0
7741 -1328 0
7742 -1328 0
c ((SATLiteral(7743) /\ SATLiteral(7744))=tv=SATLiteral(1329))
1329 -7743 -7744 0
7743 -1329 0
7744 -1329 0
c ((SATLiteral(7745) /\ SATLiteral(7746))=tv=SATLiteral(1330))
1330 -7745 -7746 0
7745 -1330 0
7746 -1330 0
c ((SATLiteral(7747) /\ SATLiteral(7748))=tv=SATLiteral(1331))
1331 -7747 -7748 0
7747 -1331 0
7748 -1331 0
c ((SATLiteral(7749) /\ SATLiteral(7750))=tv=SATLiteral(1332))
1332 -7749 -7750 0
7749 -1332 0
7750 -1332 0
c ((SATLiteral(7751) /\ SATLiteral(7752))=tv=SATLiteral(1333))
1333 -7751 -7752 0
7751 -1333 0
7752 -1333 0
c ((SATLiteral(7753) /\ SATLiteral(7754))=tv=SATLiteral(1334))
1334 -7753 -7754 0
7753 -1334 0
7754 -1334 0
c ((SATLiteral(7755) /\ SATLiteral(7756))=tv=SATLiteral(1335))
1335 -7755 -7756 0
7755 -1335 0
7756 -1335 0
c ((SATLiteral(7757) /\ SATLiteral(7758))=tv=SATLiteral(1336))
1336 -7757 -7758 0
7757 -1336 0
7758 -1336 0
c ((x_00001_00002 != x_00001_00003)=tv=SATLiteral(1337))
-17 32 1337 0
-19 34 1337 0
-21 36 1337 0
-23 38 1337 0
-25 40 1337 0
-27 42 1337 0
-29 44 1337 0
-31 46 1337 0
30 -45 1337 0
-32 17 1337 0
-34 19 1337 0
-36 21 1337 0
-38 23 1337 0
-40 25 1337 0
-42 27 1337 0
-44 29 1337 0
-46 31 1337 0
45 -30 1337 0
-17 -32 -1337 0
-19 -34 -1337 0
-21 -36 -1337 0
-23 -38 -1337 0
-25 -40 -1337 0
-27 -42 -1337 0
-29 -44 -1337 0
-31 -46 -1337 0
30 45 -1337 0
c ((x_00002_00009 != x_00003_00009)=tv=SATLiteral(1338))
-257 392 1338 0
-259 394 1338 0
-261 396 1338 0
-263 398 1338 0
-265 400 1338 0
-267 402 1338 0
-269 404 1338 0
-271 406 1338 0
270 -405 1338 0
-392 257 1338 0
-394 259 1338 0
-396 261 1338 0
-398 263 1338 0
-400 265 1338 0
-402 267 1338 0
-404 269 1338 0
-406 271 1338 0
405 -270 1338 0
-257 -392 -1338 0
-259 -394 -1338 0
-261 -396 -1338 0
-263 -398 -1338 0
-265 -400 -1338 0
-267 -402 -1338 0
-269 -404 -1338 0
-271 -406 -1338 0
270 405 -1338 0
c ((x_00003_00005 != x_00003_00006)=tv=SATLiteral(1339))
-332 347 1339 0
-334 349 1339 0
-336 351 1339 0
-338 353 1339 0
-340 355 1339 0
-342 357 1339 0
-344 359 1339 0
-346 361 1339 0
345 -360 1339 0
-347 332 1339 0
-349 334 1339 0
-351 336 1339 0
-353 338 1339 0
-355 340 1339 0
-357 342 1339 0
-359 344 1339 0
-361 346 1339 0
360 -345 1339 0
-332 -347 -1339 0
-334 -349 -1339 0
-336 -351 -1339 0
-338 -353 -1339 0
-340 -355 -1339 0
-342 -357 -1339 0
-344 -359 -1339 0
-346 -361 -1339 0
345 360 -1339 0
c ((x_00004_00008 != x_00004_00009)=tv=SATLiteral(1340))
-512 527 1340 0
-514 529 1340 0
-516 531 1340 0
-518 533 1340 0
-520 535 1340 0
-522 537 1340 0
-524 539 1340 0
-526 541 1340 0
525 -540 1340 0
-527 512 1340 0
-529 514 1340 0
-531 516 1340 0
-533 518 1340 0
-535 520 1340 0
-537 522 1340 0
-539 524 1340 0
-541 526 1340 0
540 -525 1340 0
-512 -527 -1340 0
-514 -529 -1340 0
-516 -531 -1340 0
-518 -533 -1340 0
-520 -535 -1340 0
-522 -537 -1340 0
-524 -539 -1340 0
-526 -541 -1340 0
525 540 -1340 0
c ((x_00005_00006 != x_00005_00007)=tv=SATLiteral(1341))
-617 632 1341 0
-619 634 1341 0
-621 636 1341 0
-623 638 1341 0
-625 640 1341 0
-627 642 1341 0
-629 644 1341 0
-631 646 1341 0
630 -645 1341 0
-632 617 1341 0
-634 619 1341 0
-636 621 1341 0
-638 623 1341 0
-640 625 1341 0
-642 627 1341 0
-644 629 1341 0
-646 631 1341 0
645 -630 1341 0
-617 -632 -1341 0
-619 -634 -1341 0
-621 -636 -1341 0
-623 -638 -1341 0
-625 -640 -1341 0
-627 -642 -1341 0
-629 -644 -1341 0
-631 -646 -1341 0
630 645 -1341 0
c ((x_00005_00008 != x_00005_00009)=tv=SATLiteral(1342))
-647 662 1342 0
-649 664 1342 0
-651 666 1342 0
-653 668 1342 0
-655 670 1342 0
-657 672 1342 0
-659 674 1342 0
-661 676 1342 0
660 -675 1342 0
-662 647 1342 0
-664 649 1342 0
-666 651 1342 0
-668 653 1342 0
-670 655 1342 0
-672 657 1342 0
-674 659 1342 0
-676 661 1342 0
675 -660 1342 0
-647 -662 -1342 0
-649 -664 -1342 0
-651 -666 -1342 0
-653 -668 -1342 0
-655 -670 -1342 0
-657 -672 -1342 0
-659 -674 -1342 0
-661 -676 -1342 0
660 675 -1342 0
c ((x_00006_00002 != x_00006_00003)=tv=SATLiteral(1343))
-692 707 1343 0
-694 709 1343 0
-696 711 1343 0
-698 713 1343 0
-700 715 1343 0
-702 717 1343 0
-704 719 1343 0
-706 721 1343 0
705 -720 1343 0
-707 692 1343 0
-709 694 1343 0
-711 696 1343 0
-713 698 1343 0
-715 700 1343 0
-717 702 1343 0
-719 704 1343 0
-721 706 1343 0
720 -705 1343 0
-692 -707 -1343 0
-694 -709 -1343 0
-696 -711 -1343 0
-698 -713 -1343 0
-700 -715 -1343 0
-702 -717 -1343 0
-704 -719 -1343 0
-706 -721 -1343 0
705 720 -1343 0
c ((x_00006_00007 != x_00006_00008)=tv=SATLiteral(1344))
-767 782 1344 0
-769 784 1344 0
-771 786 1344 0
-773 788 1344 0
-775 790 1344 0
-777 792 1344 0
-779 794 1344 0
-781 796 1344 0
780 -795 1344 0
-782 767 1344 0
-784 769 1344 0
-786 771 1344 0
-788 773 1344 0
-790 775 1344 0
-792 777 1344 0
-794 779 1344 0
-796 781 1344 0
795 -780 1344 0
-767 -782 -1344 0
-769 -784 -1344 0
-771 -786 -1344 0
-773 -788 -1344 0
-775 -790 -1344 0
-777 -792 -1344 0
-779 -794 -1344 0
-781 -796 -1344 0
780 795 -1344 0
c ((x_00007_00003 != x_00008_00003)=tv=SATLiteral(1345))
-842 977 1345 0
-844 979 1345 0
-846 981 1345 0
-848 983 1345 0
-850 985 1345 0
-852 987 1345 0
-854 989 1345 0
-856 991 1345 0
855 -990 1345 0
-977 842 1345 0
-979 844 1345 0
-981 846 1345 0
-983 848 1345 0
-985 850 1345 0
-987 852 1345 0
-989 854 1345 0
-991 856 1345 0
990 -855 1345 0
-842 -977 -1345 0
-844 -979 -1345 0
-846 -981 -1345 0
-848 -983 -1345 0
-850 -985 -1345 0
-852 -987 -1345 0
-854 -989 -1345 0
-856 -991 -1345 0
855 990 -1345 0
c ((x_00008_00004 != x_00009_00004)=tv=SATLiteral(1346))
-992 1127 1346 0
-994 1129 1346 0
-996 1131 1346 0
-998 1133 1346 0
-1000 1135 1346 0
-1002 1137 1346 0
-1004 1139 1346 0
-1006 1141 1346 0
1005 -1140 1346 0
-1127 992 1346 0
-1129 994 1346 0
-1131 996 1346 0
-1133 998 1346 0
-1135 1000 1346 0
-1137 1002 1346 0
-1139 1004 1346 0
-1141 1006 1346 0
1140 -1005 1346 0
-992 -1127 -1346 0
-994 -1129 -1346 0
-996 -1131 -1346 0
-998 -1133 -1346 0
-1000 -1135 -1346 0
-1002 -1137 -1346 0
-1004 -1139 -1346 0
-1006 -1141 -1346 0
1005 1140 -1346 0
c ((x_00008_00005 != x_00008_00006)=tv=SATLiteral(1347))
-1007 1022 1347 0
-1009 1024 1347 0
-1011 1026 1347 0
-1013 1028 1347 0
-1015 1030 1347 0
-1017 1032 1347 0
-1019 1034 1347 0
-1021 1036 1347 0
1020 -1035 1347 0
-1022 1007 1347 0
-1024 1009 1347 0
-1026 1011 1347 0
-1028 1013 1347 0
-1030 1015 1347 0
-1032 1017 1347 0
-1034 1019 1347 0
-1036 1021 1347 0
1035 -1020 1347 0
-1007 -1022 -1347 0
-1009 -1024 -1347 0
-1011 -1026 -1347 0
-1013 -1028 -1347 0
-1015 -1030 -1347 0
-1017 -1032 -1347 0
-1019 -1034 -1347 0
-1021 -1036 -1347 0
1020 1035 -1347 0
c ((SATLiteral(7759) /\ SATLiteral(7760))=tv=SATLiteral(1348))
1348 -7759 -7760 0
7759 -1348 0
7760 -1348 0
c ((SATLiteral(7761) /\ SATLiteral(7762))=tv=SATLiteral(1349))
1349 -7761 -7762 0
7761 -1349 0
7762 -1349 0
c ((SATLiteral(7763) /\ SATLiteral(7764))=tv=SATLiteral(1350))
1350 -7763 -7764 0
7763 -1350 0
7764 -1350 0
c ((SATLiteral(7765) /\ SATLiteral(7766))=tv=SATLiteral(1351))
1351 -7765 -7766 0
7765 -1351 0
7766 -1351 0
c ((SATLiteral(7767) /\ SATLiteral(7768))=tv=SATLiteral(1352))
1352 -7767 -7768 0
7767 -1352 0
7768 -1352 0
c ((SATLiteral(7769) /\ SATLiteral(7770))=tv=SATLiteral(1353))
1353 -7769 -7770 0
7769 -1353 0
7770 -1353 0
c ((SATLiteral(7771) /\ SATLiteral(7772))=tv=SATLiteral(1354))
1354 -7771 -7772 0
7771 -1354 0
7772 -1354 0
c ((SATLiteral(7773) /\ SATLiteral(7774))=tv=SATLiteral(1355))
1355 -7773 -7774 0
7773 -1355 0
7774 -1355 0
c ((SATLiteral(7775) /\ SATLiteral(7776))=tv=SATLiteral(1356))
1356 -7775 -7776 0
7775 -1356 0
7776 -1356 0
c ((SATLiteral(7777) /\ SATLiteral(7778))=tv=SATLiteral(1357))
1357 -7777 -7778 0
7777 -1357 0
7778 -1357 0
c ((SATLiteral(7779) /\ SATLiteral(7780))=tv=SATLiteral(1358))
1358 -7779 -7780 0
7779 -1358 0
7780 -1358 0
c ((SATLiteral(7781) /\ SATLiteral(7782))=tv=SATLiteral(1359))
1359 -7781 -7782 0
7781 -1359 0
7782 -1359 0
c ((SATLiteral(7783) /\ SATLiteral(7784))=tv=SATLiteral(1360))
1360 -7783 -7784 0
7783 -1360 0
7784 -1360 0
c ((SATLiteral(7785) /\ SATLiteral(7786))=tv=SATLiteral(1361))
1361 -7785 -7786 0
7785 -1361 0
7786 -1361 0
c ((SATLiteral(7787) /\ SATLiteral(7788))=tv=SATLiteral(1362))
1362 -7787 -7788 0
7787 -1362 0
7788 -1362 0
c ((SATLiteral(7789) /\ SATLiteral(7790))=tv=SATLiteral(1363))
1363 -7789 -7790 0
7789 -1363 0
7790 -1363 0
c ((SATLiteral(7791) /\ SATLiteral(7792))=tv=SATLiteral(1364))
1364 -7791 -7792 0
7791 -1364 0
7792 -1364 0
c ((SATLiteral(7793) /\ SATLiteral(7794))=tv=SATLiteral(1365))
1365 -7793 -7794 0
7793 -1365 0
7794 -1365 0
c ((SATLiteral(7795) /\ SATLiteral(7796))=tv=SATLiteral(1366))
1366 -7795 -7796 0
7795 -1366 0
7796 -1366 0
c ((SATLiteral(7797) /\ SATLiteral(7798))=tv=SATLiteral(1367))
1367 -7797 -7798 0
7797 -1367 0
7798 -1367 0
c ((SATLiteral(7799) /\ SATLiteral(7800))=tv=SATLiteral(1368))
1368 -7799 -7800 0
7799 -1368 0
7800 -1368 0
c ((SATLiteral(7801) /\ SATLiteral(7802))=tv=SATLiteral(1369))
1369 -7801 -7802 0
7801 -1369 0
7802 -1369 0
c ((SATLiteral(7803) /\ SATLiteral(7804))=tv=SATLiteral(1370))
1370 -7803 -7804 0
7803 -1370 0
7804 -1370 0
c ((SATLiteral(7805) /\ SATLiteral(7806))=tv=SATLiteral(1371))
1371 -7805 -7806 0
7805 -1371 0
7806 -1371 0
c ((SATLiteral(7807) /\ SATLiteral(7808))=tv=SATLiteral(1372))
1372 -7807 -7808 0
7807 -1372 0
7808 -1372 0
c ((SATLiteral(7809) /\ SATLiteral(7810))=tv=SATLiteral(1373))
1373 -7809 -7810 0
7809 -1373 0
7810 -1373 0
c ((SATLiteral(7811) /\ SATLiteral(7812))=tv=SATLiteral(1374))
1374 -7811 -7812 0
7811 -1374 0
7812 -1374 0
c ((SATLiteral(7813) /\ SATLiteral(7814))=tv=SATLiteral(1375))
1375 -7813 -7814 0
7813 -1375 0
7814 -1375 0
c ((SATLiteral(7815) /\ SATLiteral(7816))=tv=SATLiteral(1376))
1376 -7815 -7816 0
7815 -1376 0
7816 -1376 0
c ((SATLiteral(7817) /\ SATLiteral(7818))=tv=SATLiteral(1377))
1377 -7817 -7818 0
7817 -1377 0
7818 -1377 0
c ((SATLiteral(7819) /\ SATLiteral(7820))=tv=SATLiteral(1378))
1378 -7819 -7820 0
7819 -1378 0
7820 -1378 0
c ((SATLiteral(7821) /\ SATLiteral(7822))=tv=SATLiteral(1379))
1379 -7821 -7822 0
7821 -1379 0
7822 -1379 0
c ((SATLiteral(7823) /\ SATLiteral(7824))=tv=SATLiteral(1380))
1380 -7823 -7824 0
7823 -1380 0
7824 -1380 0
c ((SATLiteral(7825) /\ SATLiteral(7826))=tv=SATLiteral(1381))
1381 -7825 -7826 0
7825 -1381 0
7826 -1381 0
c ((SATLiteral(7827) /\ SATLiteral(7828))=tv=SATLiteral(1382))
1382 -7827 -7828 0
7827 -1382 0
7828 -1382 0
c ((SATLiteral(7829) /\ SATLiteral(7830))=tv=SATLiteral(1383))
1383 -7829 -7830 0
7829 -1383 0
7830 -1383 0
c ((SATLiteral(7831) /\ SATLiteral(7832))=tv=SATLiteral(1384))
1384 -7831 -7832 0
7831 -1384 0
7832 -1384 0
c ((SATLiteral(7833) /\ SATLiteral(7834))=tv=SATLiteral(1385))
1385 -7833 -7834 0
7833 -1385 0
7834 -1385 0
c ((SATLiteral(7835) /\ SATLiteral(7836))=tv=SATLiteral(1386))
1386 -7835 -7836 0
7835 -1386 0
7836 -1386 0
c ((SATLiteral(7837) /\ SATLiteral(7838))=tv=SATLiteral(1387))
1387 -7837 -7838 0
7837 -1387 0
7838 -1387 0
c ((SATLiteral(7839) /\ SATLiteral(7840))=tv=SATLiteral(1388))
1388 -7839 -7840 0
7839 -1388 0
7840 -1388 0
c ((SATLiteral(7841) /\ SATLiteral(7842))=tv=SATLiteral(1389))
1389 -7841 -7842 0
7841 -1389 0
7842 -1389 0
c ((SATLiteral(7843) /\ SATLiteral(7844))=tv=SATLiteral(1390))
1390 -7843 -7844 0
7843 -1390 0
7844 -1390 0
c ((SATLiteral(7845) /\ SATLiteral(7846))=tv=SATLiteral(1391))
1391 -7845 -7846 0
7845 -1391 0
7846 -1391 0
c ((SATLiteral(7847) /\ SATLiteral(7848))=tv=SATLiteral(1392))
1392 -7847 -7848 0
7847 -1392 0
7848 -1392 0
c ((SATLiteral(7849) /\ SATLiteral(7850))=tv=SATLiteral(1393))
1393 -7849 -7850 0
7849 -1393 0
7850 -1393 0
c ((SATLiteral(7851) /\ SATLiteral(7852))=tv=SATLiteral(1394))
1394 -7851 -7852 0
7851 -1394 0
7852 -1394 0
c ((SATLiteral(7853) /\ SATLiteral(7854))=tv=SATLiteral(1395))
1395 -7853 -7854 0
7853 -1395 0
7854 -1395 0
c ((SATLiteral(7855) /\ SATLiteral(7856))=tv=SATLiteral(1396))
1396 -7855 -7856 0
7855 -1396 0
7856 -1396 0
c ((SATLiteral(7857) /\ SATLiteral(7858))=tv=SATLiteral(1397))
1397 -7857 -7858 0
7857 -1397 0
7858 -1397 0
c ((SATLiteral(7859) /\ SATLiteral(7860))=tv=SATLiteral(1398))
1398 -7859 -7860 0
7859 -1398 0
7860 -1398 0
c ((SATLiteral(7861) /\ SATLiteral(7862))=tv=SATLiteral(1399))
1399 -7861 -7862 0
7861 -1399 0
7862 -1399 0
c ((SATLiteral(7863) /\ SATLiteral(7864))=tv=SATLiteral(1400))
1400 -7863 -7864 0
7863 -1400 0
7864 -1400 0
c ((SATLiteral(7865) /\ SATLiteral(7866))=tv=SATLiteral(1401))
1401 -7865 -7866 0
7865 -1401 0
7866 -1401 0
c ((SATLiteral(7867) /\ SATLiteral(7868))=tv=SATLiteral(1402))
1402 -7867 -7868 0
7867 -1402 0
7868 -1402 0
c ((SATLiteral(7869) /\ SATLiteral(7870))=tv=SATLiteral(1403))
1403 -7869 -7870 0
7869 -1403 0
7870 -1403 0
c ((SATLiteral(7871) /\ SATLiteral(7872))=tv=SATLiteral(1404))
1404 -7871 -7872 0
7871 -1404 0
7872 -1404 0
c ((SATLiteral(7873) /\ SATLiteral(7874))=tv=SATLiteral(1405))
1405 -7873 -7874 0
7873 -1405 0
7874 -1405 0
c ((SATLiteral(7875) /\ SATLiteral(7876))=tv=SATLiteral(1406))
1406 -7875 -7876 0
7875 -1406 0
7876 -1406 0
c ((SATLiteral(7877) /\ SATLiteral(7878))=tv=SATLiteral(1407))
1407 -7877 -7878 0
7877 -1407 0
7878 -1407 0
c ((SATLiteral(7879) /\ SATLiteral(7880))=tv=SATLiteral(1408))
1408 -7879 -7880 0
7879 -1408 0
7880 -1408 0
c ((SATLiteral(7881) /\ SATLiteral(7882))=tv=SATLiteral(1409))
1409 -7881 -7882 0
7881 -1409 0
7882 -1409 0
c ((SATLiteral(7883) /\ SATLiteral(7884))=tv=SATLiteral(1410))
1410 -7883 -7884 0
7883 -1410 0
7884 -1410 0
c ((SATLiteral(7885) /\ SATLiteral(7886))=tv=SATLiteral(1411))
1411 -7885 -7886 0
7885 -1411 0
7886 -1411 0
c ((SATLiteral(7887) /\ SATLiteral(7888))=tv=SATLiteral(1412))
1412 -7887 -7888 0
7887 -1412 0
7888 -1412 0
c ((SATLiteral(7889) /\ SATLiteral(7890))=tv=SATLiteral(1413))
1413 -7889 -7890 0
7889 -1413 0
7890 -1413 0
c ((SATLiteral(7891) /\ SATLiteral(7892))=tv=SATLiteral(1414))
1414 -7891 -7892 0
7891 -1414 0
7892 -1414 0
c ((SATLiteral(7893) /\ SATLiteral(7894))=tv=SATLiteral(1415))
1415 -7893 -7894 0
7893 -1415 0
7894 -1415 0
c ((SATLiteral(7895) /\ SATLiteral(7896))=tv=SATLiteral(1416))
1416 -7895 -7896 0
7895 -1416 0
7896 -1416 0
c ((SATLiteral(7897) /\ SATLiteral(7898))=tv=SATLiteral(1417))
1417 -7897 -7898 0
7897 -1417 0
7898 -1417 0
c ((SATLiteral(7899) /\ SATLiteral(7900))=tv=SATLiteral(1418))
1418 -7899 -7900 0
7899 -1418 0
7900 -1418 0
c ((SATLiteral(7901) /\ SATLiteral(7902))=tv=SATLiteral(1419))
1419 -7901 -7902 0
7901 -1419 0
7902 -1419 0
c ((SATLiteral(7903) /\ SATLiteral(7904))=tv=SATLiteral(1420))
1420 -7903 -7904 0
7903 -1420 0
7904 -1420 0
c ((SATLiteral(7905) /\ SATLiteral(7906))=tv=SATLiteral(1421))
1421 -7905 -7906 0
7905 -1421 0
7906 -1421 0
c ((SATLiteral(7907) /\ SATLiteral(7908))=tv=SATLiteral(1422))
1422 -7907 -7908 0
7907 -1422 0
7908 -1422 0
c ((SATLiteral(7909) /\ SATLiteral(7910))=tv=SATLiteral(1423))
1423 -7909 -7910 0
7909 -1423 0
7910 -1423 0
c ((SATLiteral(7911) /\ SATLiteral(7912))=tv=SATLiteral(1424))
1424 -7911 -7912 0
7911 -1424 0
7912 -1424 0
c ((SATLiteral(7913) /\ SATLiteral(7914))=tv=SATLiteral(1425))
1425 -7913 -7914 0
7913 -1425 0
7914 -1425 0
c ((SATLiteral(7915) /\ SATLiteral(7916))=tv=SATLiteral(1426))
1426 -7915 -7916 0
7915 -1426 0
7916 -1426 0
c ((SATLiteral(7917) /\ SATLiteral(7918))=tv=SATLiteral(1427))
1427 -7917 -7918 0
7917 -1427 0
7918 -1427 0
c ((SATLiteral(7919) /\ SATLiteral(7920))=tv=SATLiteral(1428))
1428 -7919 -7920 0
7919 -1428 0
7920 -1428 0
c ((SATLiteral(7921) /\ SATLiteral(7922))=tv=SATLiteral(1429))
1429 -7921 -7922 0
7921 -1429 0
7922 -1429 0
c ((SATLiteral(7923) /\ SATLiteral(7924))=tv=SATLiteral(1430))
1430 -7923 -7924 0
7923 -1430 0
7924 -1430 0
c ((SATLiteral(7925) /\ SATLiteral(7926))=tv=SATLiteral(1431))
1431 -7925 -7926 0
7925 -1431 0
7926 -1431 0
c ((SATLiteral(7927) /\ SATLiteral(7928))=tv=SATLiteral(1432))
1432 -7927 -7928 0
7927 -1432 0
7928 -1432 0
c ((SATLiteral(7929) /\ SATLiteral(7930))=tv=SATLiteral(1433))
1433 -7929 -7930 0
7929 -1433 0
7930 -1433 0
c ((SATLiteral(7931) /\ SATLiteral(7932))=tv=SATLiteral(1434))
1434 -7931 -7932 0
7931 -1434 0
7932 -1434 0
c ((SATLiteral(7933) /\ SATLiteral(7934))=tv=SATLiteral(1435))
1435 -7933 -7934 0
7933 -1435 0
7934 -1435 0
c ((SATLiteral(7935) /\ SATLiteral(7936))=tv=SATLiteral(1436))
1436 -7935 -7936 0
7935 -1436 0
7936 -1436 0
c ((SATLiteral(7937) /\ SATLiteral(7938))=tv=SATLiteral(1437))
1437 -7937 -7938 0
7937 -1437 0
7938 -1437 0
c ((SATLiteral(7939) /\ SATLiteral(7940))=tv=SATLiteral(1438))
1438 -7939 -7940 0
7939 -1438 0
7940 -1438 0
c ((SATLiteral(7941) /\ SATLiteral(7942))=tv=SATLiteral(1439))
1439 -7941 -7942 0
7941 -1439 0
7942 -1439 0
c ((SATLiteral(7943) /\ SATLiteral(7944))=tv=SATLiteral(1440))
1440 -7943 -7944 0
7943 -1440 0
7944 -1440 0
c ((SATLiteral(7945) /\ SATLiteral(7946))=tv=SATLiteral(1441))
1441 -7945 -7946 0
7945 -1441 0
7946 -1441 0
c ((SATLiteral(7947) /\ SATLiteral(7948))=tv=SATLiteral(1442))
1442 -7947 -7948 0
7947 -1442 0
7948 -1442 0
c ((SATLiteral(7949) /\ SATLiteral(7950))=tv=SATLiteral(1443))
1443 -7949 -7950 0
7949 -1443 0
7950 -1443 0
c ((SATLiteral(7951) /\ SATLiteral(7952))=tv=SATLiteral(1444))
1444 -7951 -7952 0
7951 -1444 0
7952 -1444 0
c ((SATLiteral(7953) /\ SATLiteral(7954))=tv=SATLiteral(1445))
1445 -7953 -7954 0
7953 -1445 0
7954 -1445 0
c ((SATLiteral(7955) /\ SATLiteral(7956))=tv=SATLiteral(1446))
1446 -7955 -7956 0
7955 -1446 0
7956 -1446 0
c ((SATLiteral(7957) /\ SATLiteral(7958))=tv=SATLiteral(1447))
1447 -7957 -7958 0
7957 -1447 0
7958 -1447 0
c ((SATLiteral(7959) /\ SATLiteral(7960))=tv=SATLiteral(1448))
1448 -7959 -7960 0
7959 -1448 0
7960 -1448 0
c ((SATLiteral(7961) /\ SATLiteral(7962))=tv=SATLiteral(1449))
1449 -7961 -7962 0
7961 -1449 0
7962 -1449 0
c ((SATLiteral(7963) /\ SATLiteral(7964))=tv=SATLiteral(1450))
1450 -7963 -7964 0
7963 -1450 0
7964 -1450 0
c ((SATLiteral(7965) /\ SATLiteral(7966))=tv=SATLiteral(1451))
1451 -7965 -7966 0
7965 -1451 0
7966 -1451 0
c ((SATLiteral(7967) /\ SATLiteral(7968))=tv=SATLiteral(1452))
1452 -7967 -7968 0
7967 -1452 0
7968 -1452 0
c ((SATLiteral(7969) /\ SATLiteral(7970))=tv=SATLiteral(1453))
1453 -7969 -7970 0
7969 -1453 0
7970 -1453 0
c ((SATLiteral(7971) /\ SATLiteral(7972))=tv=SATLiteral(1454))
1454 -7971 -7972 0
7971 -1454 0
7972 -1454 0
c ((SATLiteral(7973) /\ SATLiteral(7974))=tv=SATLiteral(1455))
1455 -7973 -7974 0
7973 -1455 0
7974 -1455 0
c ((SATLiteral(7975) /\ SATLiteral(7976))=tv=SATLiteral(1456))
1456 -7975 -7976 0
7975 -1456 0
7976 -1456 0
c ((SATLiteral(7977) /\ SATLiteral(7978))=tv=SATLiteral(1457))
1457 -7977 -7978 0
7977 -1457 0
7978 -1457 0
c ((SATLiteral(7979) /\ SATLiteral(7980))=tv=SATLiteral(1458))
1458 -7979 -7980 0
7979 -1458 0
7980 -1458 0
c ((SATLiteral(7981) /\ SATLiteral(7982))=tv=SATLiteral(1459))
1459 -7981 -7982 0
7981 -1459 0
7982 -1459 0
c ((SATLiteral(7983) /\ SATLiteral(7984))=tv=SATLiteral(1460))
1460 -7983 -7984 0
7983 -1460 0
7984 -1460 0
c ((SATLiteral(7985) /\ SATLiteral(7986))=tv=SATLiteral(1461))
1461 -7985 -7986 0
7985 -1461 0
7986 -1461 0
c ((SATLiteral(7987) /\ SATLiteral(7988))=tv=SATLiteral(1462))
1462 -7987 -7988 0
7987 -1462 0
7988 -1462 0
c ((SATLiteral(7989) /\ SATLiteral(7990))=tv=SATLiteral(1463))
1463 -7989 -7990 0
7989 -1463 0
7990 -1463 0
c ((SATLiteral(7991) /\ SATLiteral(7992))=tv=SATLiteral(1464))
1464 -7991 -7992 0
7991 -1464 0
7992 -1464 0
c ((SATLiteral(7993) /\ SATLiteral(7994))=tv=SATLiteral(1465))
1465 -7993 -7994 0
7993 -1465 0
7994 -1465 0
c ((SATLiteral(7995) /\ SATLiteral(7996))=tv=SATLiteral(1466))
1466 -7995 -7996 0
7995 -1466 0
7996 -1466 0
c ((SATLiteral(7997) /\ SATLiteral(7998))=tv=SATLiteral(1467))
1467 -7997 -7998 0
7997 -1467 0
7998 -1467 0
c ((SATLiteral(7999) /\ SATLiteral(8000))=tv=SATLiteral(1468))
1468 -7999 -8000 0
7999 -1468 0
8000 -1468 0
c ((SATLiteral(8001) /\ SATLiteral(8002))=tv=SATLiteral(1469))
1469 -8001 -8002 0
8001 -1469 0
8002 -1469 0
c ((SATLiteral(8003) /\ SATLiteral(8004))=tv=SATLiteral(1470))
1470 -8003 -8004 0
8003 -1470 0
8004 -1470 0
c ((SATLiteral(8005) /\ SATLiteral(8006))=tv=SATLiteral(1471))
1471 -8005 -8006 0
8005 -1471 0
8006 -1471 0
c ((SATLiteral(8007) /\ SATLiteral(8008))=tv=SATLiteral(1472))
1472 -8007 -8008 0
8007 -1472 0
8008 -1472 0
c ((SATLiteral(8009) /\ SATLiteral(8010))=tv=SATLiteral(1473))
1473 -8009 -8010 0
8009 -1473 0
8010 -1473 0
c ((SATLiteral(8011) /\ SATLiteral(8012))=tv=SATLiteral(1474))
1474 -8011 -8012 0
8011 -1474 0
8012 -1474 0
c ((SATLiteral(8013) /\ SATLiteral(8014))=tv=SATLiteral(1475))
1475 -8013 -8014 0
8013 -1475 0
8014 -1475 0
c ((SATLiteral(8015) /\ SATLiteral(8016))=tv=SATLiteral(1476))
1476 -8015 -8016 0
8015 -1476 0
8016 -1476 0
c ((SATLiteral(8017) /\ SATLiteral(8018))=tv=SATLiteral(1477))
1477 -8017 -8018 0
8017 -1477 0
8018 -1477 0
c ((SATLiteral(8019) /\ SATLiteral(8020))=tv=SATLiteral(1478))
1478 -8019 -8020 0
8019 -1478 0
8020 -1478 0
c ((SATLiteral(8021) /\ SATLiteral(8022))=tv=SATLiteral(1479))
1479 -8021 -8022 0
8021 -1479 0
8022 -1479 0
c ((SATLiteral(8023) /\ SATLiteral(8024))=tv=SATLiteral(1480))
1480 -8023 -8024 0
8023 -1480 0
8024 -1480 0
c ((SATLiteral(8025) /\ SATLiteral(8026))=tv=SATLiteral(1481))
1481 -8025 -8026 0
8025 -1481 0
8026 -1481 0
c ((SATLiteral(8027) /\ SATLiteral(8028))=tv=SATLiteral(1482))
1482 -8027 -8028 0
8027 -1482 0
8028 -1482 0
c ((SATLiteral(8029) /\ SATLiteral(8030))=tv=SATLiteral(1483))
1483 -8029 -8030 0
8029 -1483 0
8030 -1483 0
c ((SATLiteral(8031) /\ SATLiteral(8032))=tv=SATLiteral(1484))
1484 -8031 -8032 0
8031 -1484 0
8032 -1484 0
c ((SATLiteral(8033) /\ SATLiteral(8034))=tv=SATLiteral(1485))
1485 -8033 -8034 0
8033 -1485 0
8034 -1485 0
c ((SATLiteral(8035) /\ SATLiteral(8036))=tv=SATLiteral(1486))
1486 -8035 -8036 0
8035 -1486 0
8036 -1486 0
c ((SATLiteral(8037) /\ SATLiteral(8038))=tv=SATLiteral(1487))
1487 -8037 -8038 0
8037 -1487 0
8038 -1487 0
c ((SATLiteral(8039) /\ SATLiteral(8040))=tv=SATLiteral(1488))
1488 -8039 -8040 0
8039 -1488 0
8040 -1488 0
c ((SATLiteral(8041) /\ SATLiteral(8042))=tv=SATLiteral(1489))
1489 -8041 -8042 0
8041 -1489 0
8042 -1489 0
c ((SATLiteral(8043) /\ SATLiteral(8044))=tv=SATLiteral(1490))
1490 -8043 -8044 0
8043 -1490 0
8044 -1490 0
c ((SATLiteral(8045) /\ SATLiteral(8046))=tv=SATLiteral(1491))
1491 -8045 -8046 0
8045 -1491 0
8046 -1491 0
c ((SATLiteral(8047) /\ SATLiteral(8048))=tv=SATLiteral(1492))
1492 -8047 -8048 0
8047 -1492 0
8048 -1492 0
c ((SATLiteral(8049) /\ SATLiteral(8050))=tv=SATLiteral(1493))
1493 -8049 -8050 0
8049 -1493 0
8050 -1493 0
c ((SATLiteral(8051) /\ SATLiteral(8052))=tv=SATLiteral(1494))
1494 -8051 -8052 0
8051 -1494 0
8052 -1494 0
c ((SATLiteral(8053) /\ SATLiteral(8054))=tv=SATLiteral(1495))
1495 -8053 -8054 0
8053 -1495 0
8054 -1495 0
c ((SATLiteral(8055) /\ SATLiteral(8056))=tv=SATLiteral(1496))
1496 -8055 -8056 0
8055 -1496 0
8056 -1496 0
c ((SATLiteral(8057) /\ SATLiteral(8058))=tv=SATLiteral(1497))
1497 -8057 -8058 0
8057 -1497 0
8058 -1497 0
c ((SATLiteral(8059) /\ SATLiteral(8060))=tv=SATLiteral(1498))
1498 -8059 -8060 0
8059 -1498 0
8060 -1498 0
c ((SATLiteral(8061) /\ SATLiteral(8062))=tv=SATLiteral(1499))
1499 -8061 -8062 0
8061 -1499 0
8062 -1499 0
c ((SATLiteral(8063) /\ SATLiteral(8064))=tv=SATLiteral(1500))
1500 -8063 -8064 0
8063 -1500 0
8064 -1500 0
c ((SATLiteral(8065) /\ SATLiteral(8066))=tv=SATLiteral(1501))
1501 -8065 -8066 0
8065 -1501 0
8066 -1501 0
c ((SATLiteral(8067) /\ SATLiteral(8068))=tv=SATLiteral(1502))
1502 -8067 -8068 0
8067 -1502 0
8068 -1502 0
c ((SATLiteral(8069) /\ SATLiteral(8070))=tv=SATLiteral(1503))
1503 -8069 -8070 0
8069 -1503 0
8070 -1503 0
c ((SATLiteral(8071) /\ SATLiteral(8072))=tv=SATLiteral(1504))
1504 -8071 -8072 0
8071 -1504 0
8072 -1504 0
c ((SATLiteral(8073) /\ SATLiteral(8074))=tv=SATLiteral(1505))
1505 -8073 -8074 0
8073 -1505 0
8074 -1505 0
c ((SATLiteral(8075) /\ SATLiteral(8076))=tv=SATLiteral(1506))
1506 -8075 -8076 0
8075 -1506 0
8076 -1506 0
c ((SATLiteral(8077) /\ SATLiteral(8078))=tv=SATLiteral(1507))
1507 -8077 -8078 0
8077 -1507 0
8078 -1507 0
c ((SATLiteral(8079) /\ SATLiteral(8080))=tv=SATLiteral(1508))
1508 -8079 -8080 0
8079 -1508 0
8080 -1508 0
c ((SATLiteral(8081) /\ SATLiteral(8082))=tv=SATLiteral(1509))
1509 -8081 -8082 0
8081 -1509 0
8082 -1509 0
c ((SATLiteral(8083) /\ SATLiteral(8084))=tv=SATLiteral(1510))
1510 -8083 -8084 0
8083 -1510 0
8084 -1510 0
c ((SATLiteral(8085) /\ SATLiteral(8086))=tv=SATLiteral(1511))
1511 -8085 -8086 0
8085 -1511 0
8086 -1511 0
c ((SATLiteral(8087) /\ SATLiteral(8088))=tv=SATLiteral(1512))
1512 -8087 -8088 0
8087 -1512 0
8088 -1512 0
c ((SATLiteral(8089) /\ SATLiteral(8090))=tv=SATLiteral(1513))
1513 -8089 -8090 0
8089 -1513 0
8090 -1513 0
c ((SATLiteral(8091) /\ SATLiteral(8092))=tv=SATLiteral(1514))
1514 -8091 -8092 0
8091 -1514 0
8092 -1514 0
c ((SATLiteral(8093) /\ SATLiteral(8094))=tv=SATLiteral(1515))
1515 -8093 -8094 0
8093 -1515 0
8094 -1515 0
c ((SATLiteral(8095) /\ SATLiteral(8096))=tv=SATLiteral(1516))
1516 -8095 -8096 0
8095 -1516 0
8096 -1516 0
c ((SATLiteral(8097) /\ SATLiteral(8098))=tv=SATLiteral(1517))
1517 -8097 -8098 0
8097 -1517 0
8098 -1517 0
c ((SATLiteral(8099) /\ SATLiteral(8100))=tv=SATLiteral(1518))
1518 -8099 -8100 0
8099 -1518 0
8100 -1518 0
c ((SATLiteral(8101) /\ SATLiteral(8102))=tv=SATLiteral(1519))
1519 -8101 -8102 0
8101 -1519 0
8102 -1519 0
c ((SATLiteral(8103) /\ SATLiteral(8104))=tv=SATLiteral(1520))
1520 -8103 -8104 0
8103 -1520 0
8104 -1520 0
c ((SATLiteral(8105) /\ SATLiteral(8106))=tv=SATLiteral(1521))
1521 -8105 -8106 0
8105 -1521 0
8106 -1521 0
c ((SATLiteral(8107) /\ SATLiteral(8108))=tv=SATLiteral(1522))
1522 -8107 -8108 0
8107 -1522 0
8108 -1522 0
c ((SATLiteral(8109) /\ SATLiteral(8110))=tv=SATLiteral(1523))
1523 -8109 -8110 0
8109 -1523 0
8110 -1523 0
c ((SATLiteral(8111) /\ SATLiteral(8112))=tv=SATLiteral(1524))
1524 -8111 -8112 0
8111 -1524 0
8112 -1524 0
c ((SATLiteral(8113) /\ SATLiteral(8114))=tv=SATLiteral(1525))
1525 -8113 -8114 0
8113 -1525 0
8114 -1525 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1526))
1526 -8115 -8116 0
8115 -1526 0
8116 -1526 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1527))
1527 -8117 -8118 0
8117 -1527 0
8118 -1527 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1528))
1528 -8119 -8120 0
8119 -1528 0
8120 -1528 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1529))
1529 -8121 -8122 0
8121 -1529 0
8122 -1529 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1530))
1530 -8123 -8124 0
8123 -1530 0
8124 -1530 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1531))
1531 -8125 -8126 0
8125 -1531 0
8126 -1531 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1532))
1532 -8127 -8128 0
8127 -1532 0
8128 -1532 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1533))
1533 -8129 -8130 0
8129 -1533 0
8130 -1533 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1534))
1534 -8131 -8132 0
8131 -1534 0
8132 -1534 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1535))
1535 -8133 -8134 0
8133 -1535 0
8134 -1535 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1536))
1536 -8135 -8136 0
8135 -1536 0
8136 -1536 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1537))
1537 -8137 -8138 0
8137 -1537 0
8138 -1537 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1538))
1538 -8139 -8140 0
8139 -1538 0
8140 -1538 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1539))
1539 -8141 -8142 0
8141 -1539 0
8142 -1539 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1540))
1540 -8143 -8144 0
8143 -1540 0
8144 -1540 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1541))
1541 -8145 -8146 0
8145 -1541 0
8146 -1541 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1542))
1542 -8147 -8148 0
8147 -1542 0
8148 -1542 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1543))
1543 -8149 -8150 0
8149 -1543 0
8150 -1543 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1544))
1544 -8151 -8152 0
8151 -1544 0
8152 -1544 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1545))
1545 -8153 -8154 0
8153 -1545 0
8154 -1545 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1546))
1546 -8155 -8156 0
8155 -1546 0
8156 -1546 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1547))
1547 -8157 -8158 0
8157 -1547 0
8158 -1547 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1548))
1548 -8159 -8160 0
8159 -1548 0
8160 -1548 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1549))
1549 -8161 -8162 0
8161 -1549 0
8162 -1549 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1550))
1550 -8163 -8164 0
8163 -1550 0
8164 -1550 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1551))
1551 -8165 -8166 0
8165 -1551 0
8166 -1551 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1552))
1552 -8167 -8168 0
8167 -1552 0
8168 -1552 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1553))
1553 -8169 -8170 0
8169 -1553 0
8170 -1553 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1554))
1554 -8171 -8172 0
8171 -1554 0
8172 -1554 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1555))
1555 -8173 -8174 0
8173 -1555 0
8174 -1555 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1556))
1556 -8175 -8176 0
8175 -1556 0
8176 -1556 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1557))
1557 -8177 -8178 0
8177 -1557 0
8178 -1557 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1558))
1558 -8179 -8180 0
8179 -1558 0
8180 -1558 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1559))
1559 -8181 -8182 0
8181 -1559 0
8182 -1559 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1560))
1560 -8183 -8184 0
8183 -1560 0
8184 -1560 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1561))
1561 -8185 -8186 0
8185 -1561 0
8186 -1561 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1562))
1562 -8187 -8188 0
8187 -1562 0
8188 -1562 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1563))
1563 -8189 -8190 0
8189 -1563 0
8190 -1563 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1564))
1564 -8191 -8192 0
8191 -1564 0
8192 -1564 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1565))
1565 -8193 -8194 0
8193 -1565 0
8194 -1565 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1566))
1566 -8195 -8196 0
8195 -1566 0
8196 -1566 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1567))
1567 -8197 -8198 0
8197 -1567 0
8198 -1567 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1568))
1568 -8199 -8200 0
8199 -1568 0
8200 -1568 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1569))
1569 -8201 -8202 0
8201 -1569 0
8202 -1569 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1570))
1570 -8203 -8204 0
8203 -1570 0
8204 -1570 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1571))
1571 -8205 -8206 0
8205 -1571 0
8206 -1571 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1572))
1572 -8207 -8208 0
8207 -1572 0
8208 -1572 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1573))
1573 -8209 -8210 0
8209 -1573 0
8210 -1573 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1574))
1574 -8211 -8212 0
8211 -1574 0
8212 -1574 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1575))
1575 -8213 -8214 0
8213 -1575 0
8214 -1575 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1576))
1576 -8215 -8216 0
8215 -1576 0
8216 -1576 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1577))
1577 -8217 -8218 0
8217 -1577 0
8218 -1577 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1578))
1578 -8219 -8220 0
8219 -1578 0
8220 -1578 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1579))
1579 -8221 -8222 0
8221 -1579 0
8222 -1579 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1580))
1580 -8223 -8224 0
8223 -1580 0
8224 -1580 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1581))
1581 -8225 -8226 0
8225 -1581 0
8226 -1581 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1582))
1582 -8227 -8228 0
8227 -1582 0
8228 -1582 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1583))
1583 -8229 -8230 0
8229 -1583 0
8230 -1583 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1584))
1584 -8231 -8232 0
8231 -1584 0
8232 -1584 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1585))
1585 -8233 -8234 0
8233 -1585 0
8234 -1585 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1586))
1586 -8235 -8236 0
8235 -1586 0
8236 -1586 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1587))
1587 -8237 -8238 0
8237 -1587 0
8238 -1587 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1588))
1588 -8239 -8240 0
8239 -1588 0
8240 -1588 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1589))
1589 -8241 -8242 0
8241 -1589 0
8242 -1589 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1590))
1590 -8243 -8244 0
8243 -1590 0
8244 -1590 0
c (((SATLiteral(272) + SATLiteral(2) + SATLiteral(137))<=1)=tv=SATLiteral(1591))
-1591 -2 -137 0
-1591 -272 -137 0
-1591 -272 -2 0
1591 2 137 0
1591 272 137 0
1591 272 2 0
c (((SATLiteral(274) + SATLiteral(4) + SATLiteral(139))<=1)=tv=SATLiteral(1592))
-1592 -4 -139 0
-1592 -274 -139 0
-1592 -274 -4 0
1592 4 139 0
1592 274 139 0
1592 274 4 0
c (((SATLiteral(276) + SATLiteral(6) + SATLiteral(141))<=1)=tv=SATLiteral(1593))
-1593 -6 -141 0
-1593 -276 -141 0
-1593 -276 -6 0
1593 6 141 0
1593 276 141 0
1593 276 6 0
c (((SATLiteral(278) + SATLiteral(8) + SATLiteral(143))<=1)=tv=SATLiteral(1594))
-1594 -8 -143 0
-1594 -278 -143 0
-1594 -278 -8 0
1594 8 143 0
1594 278 143 0
1594 278 8 0
c (((SATLiteral(280) + SATLiteral(10) + SATLiteral(145))<=1)=tv=SATLiteral(1595))
-1595 -10 -145 0
-1595 -280 -145 0
-1595 -280 -10 0
1595 10 145 0
1595 280 145 0
1595 280 10 0
c (((SATLiteral(282) + SATLiteral(12) + SATLiteral(147))<=1)=tv=SATLiteral(1596))
-1596 -12 -147 0
-1596 -282 -147 0
-1596 -282 -12 0
1596 12 147 0
1596 282 147 0
1596 282 12 0
c (((SATLiteral(284) + SATLiteral(14) + SATLiteral(149))<=1)=tv=SATLiteral(1597))
-1597 -14 -149 0
-1597 -284 -149 0
-1597 -284 -14 0
1597 14 149 0
1597 284 149 0
1597 284 14 0
c (((SATLiteral(286) + SATLiteral(16) + SATLiteral(151))<=1)=tv=SATLiteral(1598))
-1598 -16 -151 0
-1598 -286 -151 0
-1598 -286 -16 0
1598 16 151 0
1598 286 151 0
1598 286 16 0
c (((SATLiteral(-285) + SATLiteral(-15) + SATLiteral(-150))<=1)=tv=SATLiteral(1599))
-1599 15 150 0
-1599 285 150 0
-1599 285 15 0
1599 -15 -150 0
1599 -285 -150 0
1599 -285 -15 0
c (((SATLiteral(317) + SATLiteral(47) + SATLiteral(182))<=1)=tv=SATLiteral(1600))
-1600 -47 -182 0
-1600 -317 -182 0
-1600 -317 -47 0
1600 47 182 0
1600 317 182 0
1600 317 47 0
c (((SATLiteral(319) + SATLiteral(49) + SATLiteral(184))<=1)=tv=SATLiteral(1601))
-1601 -49 -184 0
-1601 -319 -184 0
-1601 -319 -49 0
1601 49 184 0
1601 319 184 0
1601 319 49 0
c (((SATLiteral(321) + SATLiteral(51) + SATLiteral(186))<=1)=tv=SATLiteral(1602))
-1602 -51 -186 0
-1602 -321 -186 0
-1602 -321 -51 0
1602 51 186 0
1602 321 186 0
1602 321 51 0
c (((SATLiteral(323) + SATLiteral(53) + SATLiteral(188))<=1)=tv=SATLiteral(1603))
-1603 -53 -188 0
-1603 -323 -188 0
-1603 -323 -53 0
1603 53 188 0
1603 323 188 0
1603 323 53 0
c (((SATLiteral(325) + SATLiteral(55) + SATLiteral(190))<=1)=tv=SATLiteral(1604))
-1604 -55 -190 0
-1604 -325 -190 0
-1604 -325 -55 0
1604 55 190 0
1604 325 190 0
1604 325 55 0
c (((SATLiteral(327) + SATLiteral(57) + SATLiteral(192))<=1)=tv=SATLiteral(1605))
-1605 -57 -192 0
-1605 -327 -192 0
-1605 -327 -57 0
1605 57 192 0
1605 327 192 0
1605 327 57 0
c (((SATLiteral(329) + SATLiteral(59) + SATLiteral(194))<=1)=tv=SATLiteral(1606))
-1606 -59 -194 0
-1606 -329 -194 0
-1606 -329 -59 0
1606 59 194 0
1606 329 194 0
1606 329 59 0
c (((SATLiteral(331) + SATLiteral(61) + SATLiteral(196))<=1)=tv=SATLiteral(1607))
-1607 -61 -196 0
-1607 -331 -196 0
-1607 -331 -61 0
1607 61 196 0
1607 331 196 0
1607 331 61 0
c (((SATLiteral(-330) + SATLiteral(-60) + SATLiteral(-195))<=1)=tv=SATLiteral(1608))
-1608 60 195 0
-1608 330 195 0
-1608 330 60 0
1608 -60 -195 0
1608 -330 -195 0
1608 -330 -60 0
c (((SATLiteral(77) + aux1905 + SATLiteral(197))<=1)=tv=SATLiteral(1609))
-1609 7648 0
-1609 -197 7647 0
-1609 -77 7647 0
-1609 -77 -197 0
1609 197 -7647 0
1609 77 -7647 0
1609 77 197 -7648 0
c (((SATLiteral(79) + aux1906 + SATLiteral(199))<=1)=tv=SATLiteral(1610))
-1610 7651 0
-1610 -199 7650 0
-1610 -79 7650 0
-1610 -79 -199 0
1610 199 -7650 0
1610 79 -7650 0
1610 79 199 -7651 0
c (((SATLiteral(81) + aux1907 + SATLiteral(201))<=1)=tv=SATLiteral(1611))
-1611 7654 0
-1611 -201 7653 0
-1611 -81 7653 0
-1611 -81 -201 0
1611 201 -7653 0
1611 81 -7653 0
1611 81 201 -7654 0
c (((SATLiteral(83) + aux1908 + SATLiteral(203))<=1)=tv=SATLiteral(1612))
-1612 7657 0
-1612 -203 7656 0
-1612 -83 7656 0
-1612 -83 -203 0
1612 203 -7656 0
1612 83 -7656 0
1612 83 203 -7657 0
c (((SATLiteral(85) + aux1909 + SATLiteral(205))<=1)=tv=SATLiteral(1613))
-1613 7660 0
-1613 -205 7659 0
-1613 -85 7659 0
-1613 -85 -205 0
1613 205 -7659 0
1613 85 -7659 0
1613 85 205 -7660 0
c (((SATLiteral(87) + aux1910 + SATLiteral(207))<=1)=tv=SATLiteral(1614))
-1614 7663 0
-1614 -207 7662 0
-1614 -87 7662 0
-1614 -87 -207 0
1614 207 -7662 0
1614 87 -7662 0
1614 87 207 -7663 0
c (((SATLiteral(89) + aux1911 + SATLiteral(209))<=1)=tv=SATLiteral(1615))
-1615 7666 0
-1615 -209 7665 0
-1615 -89 7665 0
-1615 -89 -209 0
1615 209 -7665 0
1615 89 -7665 0
1615 89 209 -7666 0
c (((SATLiteral(91) + aux1912 + SATLiteral(211))<=1)=tv=SATLiteral(1616))
-1616 7669 0
-1616 -211 7668 0
-1616 -91 7668 0
-1616 -91 -211 0
1616 211 -7668 0
1616 91 -7668 0
1616 91 211 -7669 0
c (((SATLiteral(-90) + aux1913 + SATLiteral(-210))<=1)=tv=SATLiteral(1617))
-1617 7672 0
-1617 210 7671 0
-1617 90 7671 0
-1617 90 210 0
1617 -210 -7671 0
1617 -90 -7671 0
1617 -90 -210 -7672 0
c (((SATLiteral(92) + SATLiteral(107) + SATLiteral(122))<=1)=tv=SATLiteral(1618))
-1618 -107 -122 0
-1618 -92 -122 0
-1618 -92 -107 0
1618 107 122 0
1618 92 122 0
1618 92 107 0
c (((SATLiteral(94) + SATLiteral(109) + SATLiteral(124))<=1)=tv=SATLiteral(1619))
-1619 -109 -124 0
-1619 -94 -124 0
-1619 -94 -109 0
1619 109 124 0
1619 94 124 0
1619 94 109 0
c (((SATLiteral(96) + SATLiteral(111) + SATLiteral(126))<=1)=tv=SATLiteral(1620))
-1620 -111 -126 0
-1620 -96 -126 0
-1620 -96 -111 0
1620 111 126 0
1620 96 126 0
1620 96 111 0
c (((SATLiteral(98) + SATLiteral(113) + SATLiteral(128))<=1)=tv=SATLiteral(1621))
-1621 -113 -128 0
-1621 -98 -128 0
-1621 -98 -113 0
1621 113 128 0
1621 98 128 0
1621 98 113 0
c (((SATLiteral(100) + SATLiteral(115) + SATLiteral(130))<=1)=tv=SATLiteral(1622))
-1622 -115 -130 0
-1622 -100 -130 0
-1622 -100 -115 0
1622 115 130 0
1622 100 130 0
1622 100 115 0
c (((SATLiteral(102) + SATLiteral(117) + SATLiteral(132))<=1)=tv=SATLiteral(1623))
-1623 -117 -132 0
-1623 -102 -132 0
-1623 -102 -117 0
1623 117 132 0
1623 102 132 0
1623 102 117 0
c (((SATLiteral(104) + SATLiteral(119) + SATLiteral(134))<=1)=tv=SATLiteral(1624))
-1624 -119 -134 0
-1624 -104 -134 0
-1624 -104 -119 0
1624 119 134 0
1624 104 134 0
1624 104 119 0
c (((SATLiteral(106) + SATLiteral(121) + SATLiteral(136))<=1)=tv=SATLiteral(1625))
-1625 -121 -136 0
-1625 -106 -136 0
-1625 -106 -121 0
1625 121 136 0
1625 106 136 0
1625 106 121 0
c (((SATLiteral(-105) + SATLiteral(-120) + SATLiteral(-135))<=1)=tv=SATLiteral(1626))
-1626 120 135 0
-1626 105 135 0
-1626 105 120 0
1626 -120 -135 0
1626 -105 -135 0
1626 -105 -120 0
c (((SATLiteral(302) + SATLiteral(152) + SATLiteral(167))<=1)=tv=SATLiteral(1627))
-1627 -152 -167 0
-1627 -302 -167 0
-1627 -302 -152 0
1627 152 167 0
1627 302 167 0
1627 302 152 0
c (((SATLiteral(304) + SATLiteral(154) + SATLiteral(169))<=1)=tv=SATLiteral(1628))
-1628 -154 -169 0
-1628 -304 -169 0
-1628 -304 -154 0
1628 154 169 0
1628 304 169 0
1628 304 154 0
c (((SATLiteral(306) + SATLiteral(156) + SATLiteral(171))<=1)=tv=SATLiteral(1629))
-1629 -156 -171 0
-1629 -306 -171 0
-1629 -306 -156 0
1629 156 171 0
1629 306 171 0
1629 306 156 0
c (((SATLiteral(308) + SATLiteral(158) + SATLiteral(173))<=1)=tv=SATLiteral(1630))
-1630 -158 -173 0
-1630 -308 -173 0
-1630 -308 -158 0
1630 158 173 0
1630 308 173 0
1630 308 158 0
c (((SATLiteral(310) + SATLiteral(160) + SATLiteral(175))<=1)=tv=SATLiteral(1631))
-1631 -160 -175 0
-1631 -310 -175 0
-1631 -310 -160 0
1631 160 175 0
1631 310 175 0
1631 310 160 0
c (((SATLiteral(312) + SATLiteral(162) + SATLiteral(177))<=1)=tv=SATLiteral(1632))
-1632 -162 -177 0
-1632 -312 -177 0
-1632 -312 -162 0
1632 162 177 0
1632 312 177 0
1632 312 162 0
c (((SATLiteral(314) + SATLiteral(164) + SATLiteral(179))<=1)=tv=SATLiteral(1633))
-1633 -164 -179 0
-1633 -314 -179 0
-1633 -314 -164 0
1633 164 179 0
1633 314 179 0
1633 314 164 0
c (((SATLiteral(316) + SATLiteral(166) + SATLiteral(181))<=1)=tv=SATLiteral(1634))
-1634 -166 -181 0
-1634 -316 -181 0
-1634 -316 -166 0
1634 166 181 0
1634 316 181 0
1634 316 166 0
c (((SATLiteral(-315) + SATLiteral(-165) + SATLiteral(-180))<=1)=tv=SATLiteral(1635))
-1635 165 180 0
-1635 315 180 0
-1635 315 165 0
1635 -165 -180 0
1635 -315 -180 0
1635 -315 -165 0
c (((SATLiteral(377) + SATLiteral(227) + SATLiteral(242))<=1)=tv=SATLiteral(1636))
-1636 -227 -242 0
-1636 -377 -242 0
-1636 -377 -227 0
1636 227 242 0
1636 377 242 0
1636 377 227 0
c (((SATLiteral(379) + SATLiteral(229) + SATLiteral(244))<=1)=tv=SATLiteral(1637))
-1637 -229 -244 0
-1637 -379 -244 0
-1637 -379 -229 0
1637 229 244 0
1637 379 244 0
1637 379 229 0
c (((SATLiteral(381) + SATLiteral(231) + SATLiteral(246))<=1)=tv=SATLiteral(1638))
-1638 -231 -246 0
-1638 -381 -246 0
-1638 -381 -231 0
1638 231 246 0
1638 381 246 0
1638 381 231 0
c (((SATLiteral(383) + SATLiteral(233) + SATLiteral(248))<=1)=tv=SATLiteral(1639))
-1639 -233 -248 0
-1639 -383 -248 0
-1639 -383 -233 0
1639 233 248 0
1639 383 248 0
1639 383 233 0
c (((SATLiteral(385) + SATLiteral(235) + SATLiteral(250))<=1)=tv=SATLiteral(1640))
-1640 -235 -250 0
-1640 -385 -250 0
-1640 -385 -235 0
1640 235 250 0
1640 385 250 0
1640 385 235 0
c (((SATLiteral(387) + SATLiteral(237) + SATLiteral(252))<=1)=tv=SATLiteral(1641))
-1641 -237 -252 0
-1641 -387 -252 0
-1641 -387 -237 0
1641 237 252 0
1641 387 252 0
1641 387 237 0
c (((SATLiteral(389) + SATLiteral(239) + SATLiteral(254))<=1)=tv=SATLiteral(1642))
-1642 -239 -254 0
-1642 -389 -254 0
-1642 -389 -239 0
1642 239 254 0
1642 389 254 0
1642 389 239 0
c (((SATLiteral(391) + SATLiteral(241) + SATLiteral(256))<=1)=tv=SATLiteral(1643))
-1643 -241 -256 0
-1643 -391 -256 0
-1643 -391 -241 0
1643 241 256 0
1643 391 256 0
1643 391 241 0
c (((SATLiteral(-390) + SATLiteral(-240) + SATLiteral(-255))<=1)=tv=SATLiteral(1644))
-1644 240 255 0
-1644 390 255 0
-1644 390 240 0
1644 -240 -255 0
1644 -390 -255 0
1644 -390 -240 0
c (((SATLiteral(287) + SATLiteral(407) + SATLiteral(422))<=1)=tv=SATLiteral(1645))
-1645 -407 -422 0
-1645 -287 -422 0
-1645 -287 -407 0
1645 407 422 0
1645 287 422 0
1645 287 407 0
c (((SATLiteral(289) + SATLiteral(409) + SATLiteral(424))<=1)=tv=SATLiteral(1646))
-1646 -409 -424 0
-1646 -289 -424 0
-1646 -289 -409 0
1646 409 424 0
1646 289 424 0
1646 289 409 0
c (((SATLiteral(291) + SATLiteral(411) + SATLiteral(426))<=1)=tv=SATLiteral(1647))
-1647 -411 -426 0
-1647 -291 -426 0
-1647 -291 -411 0
1647 411 426 0
1647 291 426 0
1647 291 411 0
c (((SATLiteral(293) + SATLiteral(413) + SATLiteral(428))<=1)=tv=SATLiteral(1648))
-1648 -413 -428 0
-1648 -293 -428 0
-1648 -293 -413 0
1648 413 428 0
1648 293 428 0
1648 293 413 0
c (((SATLiteral(295) + SATLiteral(415) + SATLiteral(430))<=1)=tv=SATLiteral(1649))
-1649 -415 -430 0
-1649 -295 -430 0
-1649 -295 -415 0
1649 415 430 0
1649 295 430 0
1649 295 415 0
c (((SATLiteral(297) + SATLiteral(417) + SATLiteral(432))<=1)=tv=SATLiteral(1650))
-1650 -417 -432 0
-1650 -297 -432 0
-1650 -297 -417 0
1650 417 432 0
1650 297 432 0
1650 297 417 0
c (((SATLiteral(299) + SATLiteral(419) + SATLiteral(434))<=1)=tv=SATLiteral(1651))
-1651 -419 -434 0
-1651 -299 -434 0
-1651 -299 -419 0
1651 419 434 0
1651 299 434 0
1651 299 419 0
c (((SATLiteral(301) + SATLiteral(421) + SATLiteral(436))<=1)=tv=SATLiteral(1652))
-1652 -421 -436 0
-1652 -301 -436 0
-1652 -301 -421 0
1652 421 436 0
1652 301 436 0
1652 301 421 0
c (((SATLiteral(-300) + SATLiteral(-420) + SATLiteral(-435))<=1)=tv=SATLiteral(1653))
-1653 420 435 0
-1653 300 435 0
-1653 300 420 0
1653 -420 -435 0
1653 -300 -435 0
1653 -300 -420 0
c (((SATLiteral(362) + SATLiteral(482) + SATLiteral(497))<=1)=tv=SATLiteral(1654))
-1654 -482 -497 0
-1654 -362 -497 0
-1654 -362 -482 0
1654 482 497 0
1654 362 497 0
1654 362 482 0
c (((SATLiteral(364) + SATLiteral(484) + SATLiteral(499))<=1)=tv=SATLiteral(1655))
-1655 -484 -499 0
-1655 -364 -499 0
-1655 -364 -484 0
1655 484 499 0
1655 364 499 0
1655 364 484 0
c (((SATLiteral(366) + SATLiteral(486) + SATLiteral(501))<=1)=tv=SATLiteral(1656))
-1656 -486 -501 0
-1656 -366 -501 0
-1656 -366 -486 0
1656 486 501 0
1656 366 501 0
1656 366 486 0
c (((SATLiteral(368) + SATLiteral(488) + SATLiteral(503))<=1)=tv=SATLiteral(1657))
-1657 -488 -503 0
-1657 -368 -503 0
-1657 -368 -488 0
1657 488 503 0
1657 368 503 0
1657 368 488 0
c (((SATLiteral(370) + SATLiteral(490) + SATLiteral(505))<=1)=tv=SATLiteral(1658))
-1658 -490 -505 0
-1658 -370 -505 0
-1658 -370 -490 0
1658 490 505 0
1658 370 505 0
1658 370 490 0
c (((SATLiteral(372) + SATLiteral(492) + SATLiteral(507))<=1)=tv=SATLiteral(1659))
-1659 -492 -507 0
-1659 -372 -507 0
-1659 -372 -492 0
1659 492 507 0
1659 372 507 0
1659 372 492 0
c (((SATLiteral(374) + SATLiteral(494) + SATLiteral(509))<=1)=tv=SATLiteral(1660))
-1660 -494 -509 0
-1660 -374 -509 0
-1660 -374 -494 0
1660 494 509 0
1660 374 509 0
1660 374 494 0
c (((SATLiteral(376) + SATLiteral(496) + SATLiteral(511))<=1)=tv=SATLiteral(1661))
-1661 -496 -511 0
-1661 -376 -511 0
-1661 -376 -496 0
1661 496 511 0
1661 376 511 0
1661 376 496 0
c (((SATLiteral(-375) + SATLiteral(-495) + SATLiteral(-510))<=1)=tv=SATLiteral(1662))
-1662 495 510 0
-1662 375 510 0
-1662 375 495 0
1662 -495 -510 0
1662 -375 -510 0
1662 -375 -495 0
c (((SATLiteral(437) + SATLiteral(452) + SATLiteral(572))<=1)=tv=SATLiteral(1663))
-1663 -452 -572 0
-1663 -437 -572 0
-1663 -437 -452 0
1663 452 572 0
1663 437 572 0
1663 437 452 0
c (((SATLiteral(439) + SATLiteral(454) + SATLiteral(574))<=1)=tv=SATLiteral(1664))
-1664 -454 -574 0
-1664 -439 -574 0
-1664 -439 -454 0
1664 454 574 0
1664 439 574 0
1664 439 454 0
c (((SATLiteral(441) + SATLiteral(456) + SATLiteral(576))<=1)=tv=SATLiteral(1665))
-1665 -456 -576 0
-1665 -441 -576 0
-1665 -441 -456 0
1665 456 576 0
1665 441 576 0
1665 441 456 0
c (((SATLiteral(443) + SATLiteral(458) + SATLiteral(578))<=1)=tv=SATLiteral(1666))
-1666 -458 -578 0
-1666 -443 -578 0
-1666 -443 -458 0
1666 458 578 0
1666 443 578 0
1666 443 458 0
c (((SATLiteral(445) + SATLiteral(460) + SATLiteral(580))<=1)=tv=SATLiteral(1667))
-1667 -460 -580 0
-1667 -445 -580 0
-1667 -445 -460 0
1667 460 580 0
1667 445 580 0
1667 445 460 0
c (((SATLiteral(447) + SATLiteral(462) + SATLiteral(582))<=1)=tv=SATLiteral(1668))
-1668 -462 -582 0
-1668 -447 -582 0
-1668 -447 -462 0
1668 462 582 0
1668 447 582 0
1668 447 462 0
c (((SATLiteral(449) + SATLiteral(464) + SATLiteral(584))<=1)=tv=SATLiteral(1669))
-1669 -464 -584 0
-1669 -449 -584 0
-1669 -449 -464 0
1669 464 584 0
1669 449 584 0
1669 449 464 0
c (((SATLiteral(451) + SATLiteral(466) + SATLiteral(586))<=1)=tv=SATLiteral(1670))
-1670 -466 -586 0
-1670 -451 -586 0
-1670 -451 -466 0
1670 466 586 0
1670 451 586 0
1670 451 466 0
c (((SATLiteral(-450) + SATLiteral(-465) + SATLiteral(-585))<=1)=tv=SATLiteral(1671))
-1671 465 585 0
-1671 450 585 0
-1671 450 465 0
1671 -465 -585 0
1671 -450 -585 0
1671 -450 -465 0
c (((SATLiteral(467) + SATLiteral(587) + SATLiteral(602))<=1)=tv=SATLiteral(1672))
-1672 -587 -602 0
-1672 -467 -602 0
-1672 -467 -587 0
1672 587 602 0
1672 467 602 0
1672 467 587 0
c (((SATLiteral(469) + SATLiteral(589) + SATLiteral(604))<=1)=tv=SATLiteral(1673))
-1673 -589 -604 0
-1673 -469 -604 0
-1673 -469 -589 0
1673 589 604 0
1673 469 604 0
1673 469 589 0
c (((SATLiteral(471) + SATLiteral(591) + SATLiteral(606))<=1)=tv=SATLiteral(1674))
-1674 -591 -606 0
-1674 -471 -606 0
-1674 -471 -591 0
1674 591 606 0
1674 471 606 0
1674 471 591 0
c (((SATLiteral(473) + SATLiteral(593) + SATLiteral(608))<=1)=tv=SATLiteral(1675))
-1675 -593 -608 0
-1675 -473 -608 0
-1675 -473 -593 0
1675 593 608 0
1675 473 608 0
1675 473 593 0
c (((SATLiteral(475) + SATLiteral(595) + SATLiteral(610))<=1)=tv=SATLiteral(1676))
-1676 -595 -610 0
-1676 -475 -610 0
-1676 -475 -595 0
1676 595 610 0
1676 475 610 0
1676 475 595 0
c (((SATLiteral(477) + SATLiteral(597) + SATLiteral(612))<=1)=tv=SATLiteral(1677))
-1677 -597 -612 0
-1677 -477 -612 0
-1677 -477 -597 0
1677 597 612 0
1677 477 612 0
1677 477 597 0
c (((SATLiteral(479) + SATLiteral(599) + SATLiteral(614))<=1)=tv=SATLiteral(1678))
-1678 -599 -614 0
-1678 -479 -614 0
-1678 -479 -599 0
1678 599 614 0
1678 479 614 0
1678 479 599 0
c (((SATLiteral(481) + SATLiteral(601) + SATLiteral(616))<=1)=tv=SATLiteral(1679))
-1679 -601 -616 0
-1679 -481 -616 0
-1679 -481 -601 0
1679 601 616 0
1679 481 616 0
1679 481 601 0
c (((SATLiteral(-480) + SATLiteral(-600) + SATLiteral(-615))<=1)=tv=SATLiteral(1680))
-1680 600 615 0
-1680 480 615 0
-1680 480 600 0
1680 -600 -615 0
1680 -480 -615 0
1680 -480 -600 0
c (((SATLiteral(677) + SATLiteral(542) + SATLiteral(557))<=1)=tv=SATLiteral(1681))
-1681 -542 -557 0
-1681 -677 -557 0
-1681 -677 -542 0
1681 542 557 0
1681 677 557 0
1681 677 542 0
c (((SATLiteral(679) + SATLiteral(544) + SATLiteral(559))<=1)=tv=SATLiteral(1682))
-1682 -544 -559 0
-1682 -679 -559 0
-1682 -679 -544 0
1682 544 559 0
1682 679 559 0
1682 679 544 0
c (((SATLiteral(681) + SATLiteral(546) + SATLiteral(561))<=1)=tv=SATLiteral(1683))
-1683 -546 -561 0
-1683 -681 -561 0
-1683 -681 -546 0
1683 546 561 0
1683 681 561 0
1683 681 546 0
c (((SATLiteral(683) + SATLiteral(548) + SATLiteral(563))<=1)=tv=SATLiteral(1684))
-1684 -548 -563 0
-1684 -683 -563 0
-1684 -683 -548 0
1684 548 563 0
1684 683 563 0
1684 683 548 0
c (((SATLiteral(685) + SATLiteral(550) + SATLiteral(565))<=1)=tv=SATLiteral(1685))
-1685 -550 -565 0
-1685 -685 -565 0
-1685 -685 -550 0
1685 550 565 0
1685 685 565 0
1685 685 550 0
c (((SATLiteral(687) + SATLiteral(552) + SATLiteral(567))<=1)=tv=SATLiteral(1686))
-1686 -552 -567 0
-1686 -687 -567 0
-1686 -687 -552 0
1686 552 567 0
1686 687 567 0
1686 687 552 0
c (((SATLiteral(689) + SATLiteral(554) + SATLiteral(569))<=1)=tv=SATLiteral(1687))
-1687 -554 -569 0
-1687 -689 -569 0
-1687 -689 -554 0
1687 554 569 0
1687 689 569 0
1687 689 554 0
c (((SATLiteral(691) + SATLiteral(556) + SATLiteral(571))<=1)=tv=SATLiteral(1688))
-1688 -556 -571 0
-1688 -691 -571 0
-1688 -691 -556 0
1688 556 571 0
1688 691 571 0
1688 691 556 0
c (((SATLiteral(-690) + SATLiteral(-555) + SATLiteral(-570))<=1)=tv=SATLiteral(1689))
-1689 555 570 0
-1689 690 570 0
-1689 690 555 0
1689 -555 -570 0
1689 -690 -570 0
1689 -690 -555 0
c (((SATLiteral(722) + SATLiteral(737) + SATLiteral(857))<=1)=tv=SATLiteral(1690))
-1690 -737 -857 0
-1690 -722 -857 0
-1690 -722 -737 0
1690 737 857 0
1690 722 857 0
1690 722 737 0
c (((SATLiteral(724) + SATLiteral(739) + SATLiteral(859))<=1)=tv=SATLiteral(1691))
-1691 -739 -859 0
-1691 -724 -859 0
-1691 -724 -739 0
1691 739 859 0
1691 724 859 0
1691 724 739 0
c (((SATLiteral(726) + SATLiteral(741) + SATLiteral(861))<=1)=tv=SATLiteral(1692))
-1692 -741 -861 0
-1692 -726 -861 0
-1692 -726 -741 0
1692 741 861 0
1692 726 861 0
1692 726 741 0
c (((SATLiteral(728) + SATLiteral(743) + SATLiteral(863))<=1)=tv=SATLiteral(1693))
-1693 -743 -863 0
-1693 -728 -863 0
-1693 -728 -743 0
1693 743 863 0
1693 728 863 0
1693 728 743 0
c (((SATLiteral(730) + SATLiteral(745) + SATLiteral(865))<=1)=tv=SATLiteral(1694))
-1694 -745 -865 0
-1694 -730 -865 0
-1694 -730 -745 0
1694 745 865 0
1694 730 865 0
1694 730 745 0
c (((SATLiteral(732) + SATLiteral(747) + SATLiteral(867))<=1)=tv=SATLiteral(1695))
-1695 -747 -867 0
-1695 -732 -867 0
-1695 -732 -747 0
1695 747 867 0
1695 732 867 0
1695 732 747 0
c (((SATLiteral(734) + SATLiteral(749) + SATLiteral(869))<=1)=tv=SATLiteral(1696))
-1696 -749 -869 0
-1696 -734 -869 0
-1696 -734 -749 0
1696 749 869 0
1696 734 869 0
1696 734 749 0
c (((SATLiteral(736) + SATLiteral(751) + SATLiteral(871))<=1)=tv=SATLiteral(1697))
-1697 -751 -871 0
-1697 -736 -871 0
-1697 -736 -751 0
1697 751 871 0
1697 736 871 0
1697 736 751 0
c (((SATLiteral(-735) + SATLiteral(-750) + SATLiteral(-870))<=1)=tv=SATLiteral(1698))
-1698 750 870 0
-1698 735 870 0
-1698 735 750 0
1698 -750 -870 0
1698 -735 -870 0
1698 -735 -750 0
c (((SATLiteral(752) + SATLiteral(872) + SATLiteral(887))<=1)=tv=SATLiteral(1699))
-1699 -872 -887 0
-1699 -752 -887 0
-1699 -752 -872 0
1699 872 887 0
1699 752 887 0
1699 752 872 0
c (((SATLiteral(754) + SATLiteral(874) + SATLiteral(889))<=1)=tv=SATLiteral(1700))
-1700 -874 -889 0
-1700 -754 -889 0
-1700 -754 -874 0
1700 874 889 0
1700 754 889 0
1700 754 874 0
c (((SATLiteral(756) + SATLiteral(876) + SATLiteral(891))<=1)=tv=SATLiteral(1701))
-1701 -876 -891 0
-1701 -756 -891 0
-1701 -756 -876 0
1701 876 891 0
1701 756 891 0
1701 756 876 0
c (((SATLiteral(758) + SATLiteral(878) + SATLiteral(893))<=1)=tv=SATLiteral(1702))
-1702 -878 -893 0
-1702 -758 -893 0
-1702 -758 -878 0
1702 878 893 0
1702 758 893 0
1702 758 878 0
c (((SATLiteral(760) + SATLiteral(880) + SATLiteral(895))<=1)=tv=SATLiteral(1703))
-1703 -880 -895 0
-1703 -760 -895 0
-1703 -760 -880 0
1703 880 895 0
1703 760 895 0
1703 760 880 0
c (((SATLiteral(762) + SATLiteral(882) + SATLiteral(897))<=1)=tv=SATLiteral(1704))
-1704 -882 -897 0
-1704 -762 -897 0
-1704 -762 -882 0
1704 882 897 0
1704 762 897 0
1704 762 882 0
c (((SATLiteral(764) + SATLiteral(884) + SATLiteral(899))<=1)=tv=SATLiteral(1705))
-1705 -884 -899 0
-1705 -764 -899 0
-1705 -764 -884 0
1705 884 899 0
1705 764 899 0
1705 764 884 0
c (((SATLiteral(766) + SATLiteral(886) + SATLiteral(901))<=1)=tv=SATLiteral(1706))
-1706 -886 -901 0
-1706 -766 -901 0
-1706 -766 -886 0
1706 886 901 0
1706 766 901 0
1706 766 886 0
c (((SATLiteral(-765) + SATLiteral(-885) + SATLiteral(-900))<=1)=tv=SATLiteral(1707))
-1707 885 900 0
-1707 765 900 0
-1707 765 885 0
1707 -885 -900 0
1707 -765 -900 0
1707 -765 -885 0
c (((SATLiteral(962) + SATLiteral(812) + SATLiteral(827))<=1)=tv=SATLiteral(1708))
-1708 -812 -827 0
-1708 -962 -827 0
-1708 -962 -812 0
1708 812 827 0
1708 962 827 0
1708 962 812 0
c (((SATLiteral(964) + SATLiteral(814) + SATLiteral(829))<=1)=tv=SATLiteral(1709))
-1709 -814 -829 0
-1709 -964 -829 0
-1709 -964 -814 0
1709 814 829 0
1709 964 829 0
1709 964 814 0
c (((SATLiteral(966) + SATLiteral(816) + SATLiteral(831))<=1)=tv=SATLiteral(1710))
-1710 -816 -831 0
-1710 -966 -831 0
-1710 -966 -816 0
1710 816 831 0
1710 966 831 0
1710 966 816 0
c (((SATLiteral(968) + SATLiteral(818) + SATLiteral(833))<=1)=tv=SATLiteral(1711))
-1711 -818 -833 0
-1711 -968 -833 0
-1711 -968 -818 0
1711 818 833 0
1711 968 833 0
1711 968 818 0
c (((SATLiteral(970) + SATLiteral(820) + SATLiteral(835))<=1)=tv=SATLiteral(1712))
-1712 -820 -835 0
-1712 -970 -835 0
-1712 -970 -820 0
1712 820 835 0
1712 970 835 0
1712 970 820 0
c (((SATLiteral(972) + SATLiteral(822) + SATLiteral(837))<=1)=tv=SATLiteral(1713))
-1713 -822 -837 0
-1713 -972 -837 0
-1713 -972 -822 0
1713 822 837 0
1713 972 837 0
1713 972 822 0
c (((SATLiteral(974) + SATLiteral(824) + SATLiteral(839))<=1)=tv=SATLiteral(1714))
-1714 -824 -839 0
-1714 -974 -839 0
-1714 -974 -824 0
1714 824 839 0
1714 974 839 0
1714 974 824 0
c (((SATLiteral(976) + SATLiteral(826) + SATLiteral(841))<=1)=tv=SATLiteral(1715))
-1715 -826 -841 0
-1715 -976 -841 0
-1715 -976 -826 0
1715 826 841 0
1715 976 841 0
1715 976 826 0
c (((SATLiteral(-975) + SATLiteral(-825) + SATLiteral(-840))<=1)=tv=SATLiteral(1716))
-1716 825 840 0
-1716 975 840 0
-1716 975 825 0
1716 -825 -840 0
1716 -975 -840 0
1716 -975 -825 0
c (((SATLiteral(1052) + aux1914 + SATLiteral(902))<=1)=tv=SATLiteral(1717))
-1717 7675 0
-1717 -902 7674 0
-1717 -1052 7674 0
-1717 -1052 -902 0
1717 902 -7674 0
1717 1052 -7674 0
1717 1052 902 -7675 0
c (((SATLiteral(1054) + aux1915 + SATLiteral(904))<=1)=tv=SATLiteral(1718))
-1718 7678 0
-1718 -904 7677 0
-1718 -1054 7677 0
-1718 -1054 -904 0
1718 904 -7677 0
1718 1054 -7677 0
1718 1054 904 -7678 0
c (((SATLiteral(1056) + aux1916 + SATLiteral(906))<=1)=tv=SATLiteral(1719))
-1719 7681 0
-1719 -906 7680 0
-1719 -1056 7680 0
-1719 -1056 -906 0
1719 906 -7680 0
1719 1056 -7680 0
1719 1056 906 -7681 0
c (((SATLiteral(1058) + aux1917 + SATLiteral(908))<=1)=tv=SATLiteral(1720))
-1720 7684 0
-1720 -908 7683 0
-1720 -1058 7683 0
-1720 -1058 -908 0
1720 908 -7683 0
1720 1058 -7683 0
1720 1058 908 -7684 0
c (((SATLiteral(1060) + aux1918 + SATLiteral(910))<=1)=tv=SATLiteral(1721))
-1721 7687 0
-1721 -910 7686 0
-1721 -1060 7686 0
-1721 -1060 -910 0
1721 910 -7686 0
1721 1060 -7686 0
1721 1060 910 -7687 0
c (((SATLiteral(1062) + aux1919 + SATLiteral(912))<=1)=tv=SATLiteral(1722))
-1722 7690 0
-1722 -912 7689 0
-1722 -1062 7689 0
-1722 -1062 -912 0
1722 912 -7689 0
1722 1062 -7689 0
1722 1062 912 -7690 0
c (((SATLiteral(1064) + aux1920 + SATLiteral(914))<=1)=tv=SATLiteral(1723))
-1723 7693 0
-1723 -914 7692 0
-1723 -1064 7692 0
-1723 -1064 -914 0
1723 914 -7692 0
1723 1064 -7692 0
1723 1064 914 -7693 0
c (((SATLiteral(1066) + aux1921 + SATLiteral(916))<=1)=tv=SATLiteral(1724))
-1724 7696 0
-1724 -916 7695 0
-1724 -1066 7695 0
-1724 -1066 -916 0
1724 916 -7695 0
1724 1066 -7695 0
1724 1066 916 -7696 0
c (((SATLiteral(-1065) + aux1922 + SATLiteral(-915))<=1)=tv=SATLiteral(1725))
-1725 7699 0
-1725 915 7698 0
-1725 1065 7698 0
-1725 1065 915 0
1725 -915 -7698 0
1725 -1065 -7698 0
1725 -1065 -915 -7699 0
c (((SATLiteral(1067) + SATLiteral(1202) + SATLiteral(932))<=1)=tv=SATLiteral(1726))
-1726 -1202 -932 0
-1726 -1067 -932 0
-1726 -1067 -1202 0
1726 1202 932 0
1726 1067 932 0
1726 1067 1202 0
c (((SATLiteral(1069) + SATLiteral(1204) + SATLiteral(934))<=1)=tv=SATLiteral(1727))
-1727 -1204 -934 0
-1727 -1069 -934 0
-1727 -1069 -1204 0
1727 1204 934 0
1727 1069 934 0
1727 1069 1204 0
c (((SATLiteral(1071) + SATLiteral(1206) + SATLiteral(936))<=1)=tv=SATLiteral(1728))
-1728 -1206 -936 0
-1728 -1071 -936 0
-1728 -1071 -1206 0
1728 1206 936 0
1728 1071 936 0
1728 1071 1206 0
c (((SATLiteral(1073) + SATLiteral(1208) + SATLiteral(938))<=1)=tv=SATLiteral(1729))
-1729 -1208 -938 0
-1729 -1073 -938 0
-1729 -1073 -1208 0
1729 1208 938 0
1729 1073 938 0
1729 1073 1208 0
c (((SATLiteral(1075) + SATLiteral(1210) + SATLiteral(940))<=1)=tv=SATLiteral(1730))
-1730 -1210 -940 0
-1730 -1075 -940 0
-1730 -1075 -1210 0
1730 1210 940 0
1730 1075 940 0
1730 1075 1210 0
c (((SATLiteral(1077) + SATLiteral(1212) + SATLiteral(942))<=1)=tv=SATLiteral(1731))
-1731 -1212 -942 0
-1731 -1077 -942 0
-1731 -1077 -1212 0
1731 1212 942 0
1731 1077 942 0
1731 1077 1212 0
c (((SATLiteral(1079) + SATLiteral(1214) + SATLiteral(944))<=1)=tv=SATLiteral(1732))
-1732 -1214 -944 0
-1732 -1079 -944 0
-1732 -1079 -1214 0
1732 1214 944 0
1732 1079 944 0
1732 1079 1214 0
c (((SATLiteral(1081) + SATLiteral(1216) + SATLiteral(946))<=1)=tv=SATLiteral(1733))
-1733 -1216 -946 0
-1733 -1081 -946 0
-1733 -1081 -1216 0
1733 1216 946 0
1733 1081 946 0
1733 1081 1216 0
c (((SATLiteral(-1080) + SATLiteral(-1215) + SATLiteral(-945))<=1)=tv=SATLiteral(1734))
-1734 1215 945 0
-1734 1080 945 0
-1734 1080 1215 0
1734 -1215 -945 0
1734 -1080 -945 0
1734 -1080 -1215 0
c (((SATLiteral(947) + SATLiteral(1082) + SATLiteral(1097))<=1)=tv=SATLiteral(1735))
-1735 -1082 -1097 0
-1735 -947 -1097 0
-1735 -947 -1082 0
1735 1082 1097 0
1735 947 1097 0
1735 947 1082 0
c (((SATLiteral(949) + SATLiteral(1084) + SATLiteral(1099))<=1)=tv=SATLiteral(1736))
-1736 -1084 -1099 0
-1736 -949 -1099 0
-1736 -949 -1084 0
1736 1084 1099 0
1736 949 1099 0
1736 949 1084 0
c (((SATLiteral(951) + SATLiteral(1086) + SATLiteral(1101))<=1)=tv=SATLiteral(1737))
-1737 -1086 -1101 0
-1737 -951 -1101 0
-1737 -951 -1086 0
1737 1086 1101 0
1737 951 1101 0
1737 951 1086 0
c (((SATLiteral(953) + SATLiteral(1088) + SATLiteral(1103))<=1)=tv=SATLiteral(1738))
-1738 -1088 -1103 0
-1738 -953 -1103 0
-1738 -953 -1088 0
1738 1088 1103 0
1738 953 1103 0
1738 953 1088 0
c (((SATLiteral(955) + SATLiteral(1090) + SATLiteral(1105))<=1)=tv=SATLiteral(1739))
-1739 -1090 -1105 0
-1739 -955 -1105 0
-1739 -955 -1090 0
1739 1090 1105 0
1739 955 1105 0
1739 955 1090 0
c (((SATLiteral(957) + SATLiteral(1092) + SATLiteral(1107))<=1)=tv=SATLiteral(1740))
-1740 -1092 -1107 0
-1740 -957 -1107 0
-1740 -957 -1092 0
1740 1092 1107 0
1740 957 1107 0
1740 957 1092 0
c (((SATLiteral(959) + SATLiteral(1094) + SATLiteral(1109))<=1)=tv=SATLiteral(1741))
-1741 -1094 -1109 0
-1741 -959 -1109 0
-1741 -959 -1094 0
1741 1094 1109 0
1741 959 1109 0
1741 959 1094 0
c (((SATLiteral(961) + SATLiteral(1096) + SATLiteral(1111))<=1)=tv=SATLiteral(1742))
-1742 -1096 -1111 0
-1742 -961 -1111 0
-1742 -961 -1096 0
1742 1096 1111 0
1742 961 1111 0
1742 961 1096 0
c (((SATLiteral(-960) + SATLiteral(-1095) + SATLiteral(-1110))<=1)=tv=SATLiteral(1743))
-1743 1095 1110 0
-1743 960 1110 0
-1743 960 1095 0
1743 -1095 -1110 0
1743 -960 -1110 0
1743 -960 -1095 0
c (((SATLiteral(1157) + SATLiteral(1172) + SATLiteral(1187))<=1)=tv=SATLiteral(1744))
-1744 -1172 -1187 0
-1744 -1157 -1187 0
-1744 -1157 -1172 0
1744 1172 1187 0
1744 1157 1187 0
1744 1157 1172 0
c (((SATLiteral(1159) + SATLiteral(1174) + SATLiteral(1189))<=1)=tv=SATLiteral(1745))
-1745 -1174 -1189 0
-1745 -1159 -1189 0
-1745 -1159 -1174 0
1745 1174 1189 0
1745 1159 1189 0
1745 1159 1174 0
c (((SATLiteral(1161) + SATLiteral(1176) + SATLiteral(1191))<=1)=tv=SATLiteral(1746))
-1746 -1176 -1191 0
-1746 -1161 -1191 0
-1746 -1161 -1176 0
1746 1176 1191 0
1746 1161 1191 0
1746 1161 1176 0
c (((SATLiteral(1163) + SATLiteral(1178) + SATLiteral(1193))<=1)=tv=SATLiteral(1747))
-1747 -1178 -1193 0
-1747 -1163 -1193 0
-1747 -1163 -1178 0
1747 1178 1193 0
1747 1163 1193 0
1747 1163 1178 0
c (((SATLiteral(1165) + SATLiteral(1180) + SATLiteral(1195))<=1)=tv=SATLiteral(1748))
-1748 -1180 -1195 0
-1748 -1165 -1195 0
-1748 -1165 -1180 0
1748 1180 1195 0
1748 1165 1195 0
1748 1165 1180 0
c (((SATLiteral(1167) + SATLiteral(1182) + SATLiteral(1197))<=1)=tv=SATLiteral(1749))
-1749 -1182 -1197 0
-1749 -1167 -1197 0
-1749 -1167 -1182 0
1749 1182 1197 0
1749 1167 1197 0
1749 1167 1182 0
c (((SATLiteral(1169) + SATLiteral(1184) + SATLiteral(1199))<=1)=tv=SATLiteral(1750))
-1750 -1184 -1199 0
-1750 -1169 -1199 0
-1750 -1169 -1184 0
1750 1184 1199 0
1750 1169 1199 0
1750 1169 1184 0
c (((SATLiteral(1171) + SATLiteral(1186) + SATLiteral(1201))<=1)=tv=SATLiteral(1751))
-1751 -1186 -1201 0
-1751 -1171 -1201 0
-1751 -1171 -1186 0
1751 1186 1201 0
1751 1171 1201 0
1751 1171 1186 0
c (((SATLiteral(-1170) + SATLiteral(-1185) + SATLiteral(-1200))<=1)=tv=SATLiteral(1752))
-1752 1185 1200 0
-1752 1170 1200 0
-1752 1170 1185 0
1752 -1185 -1200 0
1752 -1170 -1200 0
1752 -1170 -1185 0
c (SATLiteral(1276) -> SATLiteral(1308))
-1276 1308 0
c (SATLiteral(1277) -> SATLiteral(1309))
-1277 1309 0
c (SATLiteral(1278) -> SATLiteral(1310))
-1278 1310 0
c (SATLiteral(1279) -> SATLiteral(1311))
-1279 1311 0
c (SATLiteral(1280) -> SATLiteral(1312))
-1280 1312 0
c (SATLiteral(1281) -> SATLiteral(1313))
-1281 1313 0
c (SATLiteral(1282) -> SATLiteral(1314))
-1282 1314 0
c (SATLiteral(1283) -> SATLiteral(1315))
-1283 1315 0
c (SATLiteral(1284) -> SATLiteral(1316))
-1284 1316 0
c (SATLiteral(1285) -> SATLiteral(1317))
-1285 1317 0
c (SATLiteral(1286) -> SATLiteral(1318))
-1286 1318 0
c (SATLiteral(1287) -> SATLiteral(1319))
-1287 1319 0
c (SATLiteral(1288) -> SATLiteral(1320))
-1288 1320 0
c (SATLiteral(1289) -> SATLiteral(1321))
-1289 1321 0
c (SATLiteral(1290) -> SATLiteral(1322))
-1290 1322 0
c (SATLiteral(1291) -> SATLiteral(1323))
-1291 1323 0
c (SATLiteral(1292) -> SATLiteral(1324))
-1292 1324 0
c (SATLiteral(1293) -> SATLiteral(1325))
-1293 1325 0
c (SATLiteral(1294) -> SATLiteral(1326))
-1294 1326 0
c (SATLiteral(1295) -> SATLiteral(1327))
-1295 1327 0
c (SATLiteral(1296) -> SATLiteral(1328))
-1296 1328 0
c (SATLiteral(1297) -> SATLiteral(801))
-1297 801 0
c (SATLiteral(1298) -> SATLiteral(1329))
-1298 1329 0
c (SATLiteral(1299) -> SATLiteral(1330))
-1299 1330 0
c (SATLiteral(1300) -> SATLiteral(1331))
-1300 1331 0
c (SATLiteral(1301) -> SATLiteral(1332))
-1301 1332 0
c (SATLiteral(1302) -> SATLiteral(1333))
-1302 1333 0
c (SATLiteral(1303) -> SATLiteral(1334))
-1303 1334 0
c (SATLiteral(1304) -> SATLiteral(1335))
-1304 1335 0
c (SATLiteral(1305) -> SATLiteral(1119))
-1305 1119 0
c (SATLiteral(1306) -> SATLiteral(1143))
-1306 1143 0
c (SATLiteral(1307) -> SATLiteral(1336))
-1307 1336 0
c (SATLiteral(1245) -> SATLiteral(1337))
-1245 1337 0
c (SATLiteral(1251) -> SATLiteral(1338))
-1251 1338 0
c (SATLiteral(1253) -> SATLiteral(1339))
-1253 1339 0
c (SATLiteral(1257) -> SATLiteral(1340))
-1257 1340 0
c (SATLiteral(1259) -> SATLiteral(1341))
-1259 1341 0
c (SATLiteral(1260) -> SATLiteral(1342))
-1260 1342 0
c (SATLiteral(1261) -> SATLiteral(1343))
-1261 1343 0
c (SATLiteral(1264) -> SATLiteral(1344))
-1264 1344 0
c (SATLiteral(1267) -> SATLiteral(1345))
-1267 1345 0
c (SATLiteral(1271) -> SATLiteral(1346))
-1271 1346 0
c (SATLiteral(1272) -> SATLiteral(1347))
-1272 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1217) -> SATLiteral(1349))
-1217 1349 0
c (SATLiteral(1217) -> SATLiteral(1350))
-1217 1350 0
c (SATLiteral(1217) -> SATLiteral(1351))
-1217 1351 0
c (SATLiteral(1217) -> SATLiteral(1352))
-1217 1352 0
c (SATLiteral(1217) -> SATLiteral(1353))
-1217 1353 0
c (SATLiteral(1217) -> SATLiteral(1354))
-1217 1354 0
c (SATLiteral(1217) -> SATLiteral(1355))
-1217 1355 0
c (SATLiteral(1217) -> SATLiteral(1356))
-1217 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1218) -> SATLiteral(1358))
-1218 1358 0
c (SATLiteral(1218) -> SATLiteral(1359))
-1218 1359 0
c (SATLiteral(1218) -> SATLiteral(1360))
-1218 1360 0
c (SATLiteral(1218) -> SATLiteral(1361))
-1218 1361 0
c (SATLiteral(1218) -> SATLiteral(1362))
-1218 1362 0
c (SATLiteral(1218) -> SATLiteral(1363))
-1218 1363 0
c (SATLiteral(1218) -> SATLiteral(1364))
-1218 1364 0
c (SATLiteral(1218) -> SATLiteral(1365))
-1218 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1219) -> SATLiteral(1367))
-1219 1367 0
c (SATLiteral(1219) -> SATLiteral(1368))
-1219 1368 0
c (SATLiteral(1219) -> SATLiteral(1369))
-1219 1369 0
c (SATLiteral(1219) -> SATLiteral(1370))
-1219 1370 0
c (SATLiteral(1219) -> SATLiteral(1371))
-1219 1371 0
c (SATLiteral(1219) -> SATLiteral(1372))
-1219 1372 0
c (SATLiteral(1219) -> SATLiteral(1373))
-1219 1373 0
c (SATLiteral(1219) -> SATLiteral(1374))
-1219 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1220) -> SATLiteral(1376))
-1220 1376 0
c (SATLiteral(1220) -> SATLiteral(1377))
-1220 1377 0
c (SATLiteral(1220) -> SATLiteral(1378))
-1220 1378 0
c (SATLiteral(1220) -> SATLiteral(1379))
-1220 1379 0
c (SATLiteral(1220) -> SATLiteral(1380))
-1220 1380 0
c (SATLiteral(1220) -> SATLiteral(1381))
-1220 1381 0
c (SATLiteral(1220) -> SATLiteral(1382))
-1220 1382 0
c (SATLiteral(1220) -> SATLiteral(1383))
-1220 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1221) -> SATLiteral(1385))
-1221 1385 0
c (SATLiteral(1221) -> SATLiteral(1386))
-1221 1386 0
c (SATLiteral(1221) -> SATLiteral(1387))
-1221 1387 0
c (SATLiteral(1221) -> SATLiteral(1388))
-1221 1388 0
c (SATLiteral(1221) -> SATLiteral(1389))
-1221 1389 0
c (SATLiteral(1221) -> SATLiteral(1390))
-1221 1390 0
c (SATLiteral(1221) -> SATLiteral(1391))
-1221 1391 0
c (SATLiteral(1221) -> SATLiteral(1392))
-1221 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1222) -> SATLiteral(1394))
-1222 1394 0
c (SATLiteral(1222) -> SATLiteral(1395))
-1222 1395 0
c (SATLiteral(1222) -> SATLiteral(1396))
-1222 1396 0
c (SATLiteral(1222) -> SATLiteral(1397))
-1222 1397 0
c (SATLiteral(1222) -> SATLiteral(1398))
-1222 1398 0
c (SATLiteral(1222) -> SATLiteral(1399))
-1222 1399 0
c (SATLiteral(1222) -> SATLiteral(1400))
-1222 1400 0
c (SATLiteral(1222) -> SATLiteral(1401))
-1222 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1223) -> SATLiteral(1403))
-1223 1403 0
c (SATLiteral(1223) -> SATLiteral(1404))
-1223 1404 0
c (SATLiteral(1223) -> SATLiteral(1405))
-1223 1405 0
c (SATLiteral(1223) -> SATLiteral(1406))
-1223 1406 0
c (SATLiteral(1223) -> SATLiteral(1407))
-1223 1407 0
c (SATLiteral(1223) -> SATLiteral(1408))
-1223 1408 0
c (SATLiteral(1223) -> SATLiteral(1409))
-1223 1409 0
c (SATLiteral(1223) -> SATLiteral(1410))
-1223 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1224) -> SATLiteral(1412))
-1224 1412 0
c (SATLiteral(1224) -> SATLiteral(1413))
-1224 1413 0
c (SATLiteral(1224) -> SATLiteral(1414))
-1224 1414 0
c (SATLiteral(1224) -> SATLiteral(1415))
-1224 1415 0
c (SATLiteral(1224) -> SATLiteral(1416))
-1224 1416 0
c (SATLiteral(1224) -> SATLiteral(1417))
-1224 1417 0
c (SATLiteral(1224) -> SATLiteral(1418))
-1224 1418 0
c (SATLiteral(1224) -> SATLiteral(1419))
-1224 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1225) -> SATLiteral(1421))
-1225 1421 0
c (SATLiteral(1225) -> SATLiteral(1422))
-1225 1422 0
c (SATLiteral(1225) -> SATLiteral(1423))
-1225 1423 0
c (SATLiteral(1225) -> SATLiteral(1424))
-1225 1424 0
c (SATLiteral(1225) -> SATLiteral(1425))
-1225 1425 0
c (SATLiteral(1225) -> SATLiteral(1426))
-1225 1426 0
c (SATLiteral(1225) -> SATLiteral(1427))
-1225 1427 0
c (SATLiteral(1225) -> SATLiteral(1428))
-1225 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1226) -> SATLiteral(1430))
-1226 1430 0
c (SATLiteral(1226) -> SATLiteral(1431))
-1226 1431 0
c (SATLiteral(1226) -> SATLiteral(1432))
-1226 1432 0
c (SATLiteral(1226) -> SATLiteral(1433))
-1226 1433 0
c (SATLiteral(1226) -> SATLiteral(1434))
-1226 1434 0
c (SATLiteral(1226) -> SATLiteral(1435))
-1226 1435 0
c (SATLiteral(1226) -> SATLiteral(1436))
-1226 1436 0
c (SATLiteral(1226) -> SATLiteral(1437))
-1226 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1227) -> SATLiteral(1439))
-1227 1439 0
c (SATLiteral(1227) -> SATLiteral(1440))
-1227 1440 0
c (SATLiteral(1227) -> SATLiteral(1441))
-1227 1441 0
c (SATLiteral(1227) -> SATLiteral(1442))
-1227 1442 0
c (SATLiteral(1227) -> SATLiteral(1443))
-1227 1443 0
c (SATLiteral(1227) -> SATLiteral(1444))
-1227 1444 0
c (SATLiteral(1227) -> SATLiteral(1445))
-1227 1445 0
c (SATLiteral(1227) -> SATLiteral(1446))
-1227 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1228) -> SATLiteral(1448))
-1228 1448 0
c (SATLiteral(1228) -> SATLiteral(1449))
-1228 1449 0
c (SATLiteral(1228) -> SATLiteral(1450))
-1228 1450 0
c (SATLiteral(1228) -> SATLiteral(1451))
-1228 1451 0
c (SATLiteral(1228) -> SATLiteral(1452))
-1228 1452 0
c (SATLiteral(1228) -> SATLiteral(1453))
-1228 1453 0
c (SATLiteral(1228) -> SATLiteral(1454))
-1228 1454 0
c (SATLiteral(1228) -> SATLiteral(1455))
-1228 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1229) -> SATLiteral(1457))
-1229 1457 0
c (SATLiteral(1229) -> SATLiteral(1458))
-1229 1458 0
c (SATLiteral(1229) -> SATLiteral(1459))
-1229 1459 0
c (SATLiteral(1229) -> SATLiteral(1460))
-1229 1460 0
c (SATLiteral(1229) -> SATLiteral(1461))
-1229 1461 0
c (SATLiteral(1229) -> SATLiteral(1462))
-1229 1462 0
c (SATLiteral(1229) -> SATLiteral(1463))
-1229 1463 0
c (SATLiteral(1229) -> SATLiteral(1464))
-1229 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1230) -> SATLiteral(1466))
-1230 1466 0
c (SATLiteral(1230) -> SATLiteral(1467))
-1230 1467 0
c (SATLiteral(1230) -> SATLiteral(1468))
-1230 1468 0
c (SATLiteral(1230) -> SATLiteral(1469))
-1230 1469 0
c (SATLiteral(1230) -> SATLiteral(1470))
-1230 1470 0
c (SATLiteral(1230) -> SATLiteral(1471))
-1230 1471 0
c (SATLiteral(1230) -> SATLiteral(1472))
-1230 1472 0
c (SATLiteral(1230) -> SATLiteral(1473))
-1230 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1231) -> SATLiteral(1475))
-1231 1475 0
c (SATLiteral(1231) -> SATLiteral(1476))
-1231 1476 0
c (SATLiteral(1231) -> SATLiteral(1477))
-1231 1477 0
c (SATLiteral(1231) -> SATLiteral(1478))
-1231 1478 0
c (SATLiteral(1231) -> SATLiteral(1479))
-1231 1479 0
c (SATLiteral(1231) -> SATLiteral(1480))
-1231 1480 0
c (SATLiteral(1231) -> SATLiteral(1481))
-1231 1481 0
c (SATLiteral(1231) -> SATLiteral(1482))
-1231 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1232) -> SATLiteral(1484))
-1232 1484 0
c (SATLiteral(1232) -> SATLiteral(1485))
-1232 1485 0
c (SATLiteral(1232) -> SATLiteral(1486))
-1232 1486 0
c (SATLiteral(1232) -> SATLiteral(1487))
-1232 1487 0
c (SATLiteral(1232) -> SATLiteral(1488))
-1232 1488 0
c (SATLiteral(1232) -> SATLiteral(1489))
-1232 1489 0
c (SATLiteral(1232) -> SATLiteral(1490))
-1232 1490 0
c (SATLiteral(1232) -> SATLiteral(1491))
-1232 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1233) -> SATLiteral(1493))
-1233 1493 0
c (SATLiteral(1233) -> SATLiteral(1494))
-1233 1494 0
c (SATLiteral(1233) -> SATLiteral(1495))
-1233 1495 0
c (SATLiteral(1233) -> SATLiteral(1496))
-1233 1496 0
c (SATLiteral(1233) -> SATLiteral(1497))
-1233 1497 0
c (SATLiteral(1233) -> SATLiteral(1498))
-1233 1498 0
c (SATLiteral(1233) -> SATLiteral(1499))
-1233 1499 0
c (SATLiteral(1233) -> SATLiteral(1500))
-1233 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1234) -> SATLiteral(1502))
-1234 1502 0
c (SATLiteral(1234) -> SATLiteral(1503))
-1234 1503 0
c (SATLiteral(1234) -> SATLiteral(1504))
-1234 1504 0
c (SATLiteral(1234) -> SATLiteral(1505))
-1234 1505 0
c (SATLiteral(1234) -> SATLiteral(1506))
-1234 1506 0
c (SATLiteral(1234) -> SATLiteral(1507))
-1234 1507 0
c (SATLiteral(1234) -> SATLiteral(1508))
-1234 1508 0
c (SATLiteral(1234) -> SATLiteral(1509))
-1234 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1235) -> SATLiteral(1511))
-1235 1511 0
c (SATLiteral(1235) -> SATLiteral(1512))
-1235 1512 0
c (SATLiteral(1235) -> SATLiteral(1513))
-1235 1513 0
c (SATLiteral(1235) -> SATLiteral(1514))
-1235 1514 0
c (SATLiteral(1235) -> SATLiteral(1515))
-1235 1515 0
c (SATLiteral(1235) -> SATLiteral(1516))
-1235 1516 0
c (SATLiteral(1235) -> SATLiteral(1517))
-1235 1517 0
c (SATLiteral(1235) -> SATLiteral(1518))
-1235 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1236) -> SATLiteral(1520))
-1236 1520 0
c (SATLiteral(1236) -> SATLiteral(1521))
-1236 1521 0
c (SATLiteral(1236) -> SATLiteral(1522))
-1236 1522 0
c (SATLiteral(1236) -> SATLiteral(1523))
-1236 1523 0
c (SATLiteral(1236) -> SATLiteral(1524))
-1236 1524 0
c (SATLiteral(1236) -> SATLiteral(1525))
-1236 1525 0
c (SATLiteral(1236) -> SATLiteral(1526))
-1236 1526 0
c (SATLiteral(1236) -> SATLiteral(1527))
-1236 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1237) -> SATLiteral(1529))
-1237 1529 0
c (SATLiteral(1237) -> SATLiteral(1530))
-1237 1530 0
c (SATLiteral(1237) -> SATLiteral(1531))
-1237 1531 0
c (SATLiteral(1237) -> SATLiteral(1532))
-1237 1532 0
c (SATLiteral(1237) -> SATLiteral(1533))
-1237 1533 0
c (SATLiteral(1237) -> SATLiteral(1534))
-1237 1534 0
c (SATLiteral(1237) -> SATLiteral(1535))
-1237 1535 0
c (SATLiteral(1237) -> SATLiteral(1536))
-1237 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1238) -> SATLiteral(1538))
-1238 1538 0
c (SATLiteral(1238) -> SATLiteral(1539))
-1238 1539 0
c (SATLiteral(1238) -> SATLiteral(1540))
-1238 1540 0
c (SATLiteral(1238) -> SATLiteral(1541))
-1238 1541 0
c (SATLiteral(1238) -> SATLiteral(1542))
-1238 1542 0
c (SATLiteral(1238) -> SATLiteral(1543))
-1238 1543 0
c (SATLiteral(1238) -> SATLiteral(1544))
-1238 1544 0
c (SATLiteral(1238) -> SATLiteral(1545))
-1238 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1239) -> SATLiteral(1547))
-1239 1547 0
c (SATLiteral(1239) -> SATLiteral(1548))
-1239 1548 0
c (SATLiteral(1239) -> SATLiteral(1549))
-1239 1549 0
c (SATLiteral(1239) -> SATLiteral(1550))
-1239 1550 0
c (SATLiteral(1239) -> SATLiteral(1551))
-1239 1551 0
c (SATLiteral(1239) -> SATLiteral(1552))
-1239 1552 0
c (SATLiteral(1239) -> SATLiteral(1553))
-1239 1553 0
c (SATLiteral(1239) -> SATLiteral(1554))
-1239 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1240) -> SATLiteral(1556))
-1240 1556 0
c (SATLiteral(1240) -> SATLiteral(1557))
-1240 1557 0
c (SATLiteral(1240) -> SATLiteral(1558))
-1240 1558 0
c (SATLiteral(1240) -> SATLiteral(1559))
-1240 1559 0
c (SATLiteral(1240) -> SATLiteral(1560))
-1240 1560 0
c (SATLiteral(1240) -> SATLiteral(1561))
-1240 1561 0
c (SATLiteral(1240) -> SATLiteral(1562))
-1240 1562 0
c (SATLiteral(1240) -> SATLiteral(1563))
-1240 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1241) -> SATLiteral(1565))
-1241 1565 0
c (SATLiteral(1241) -> SATLiteral(1566))
-1241 1566 0
c (SATLiteral(1241) -> SATLiteral(1567))
-1241 1567 0
c (SATLiteral(1241) -> SATLiteral(1568))
-1241 1568 0
c (SATLiteral(1241) -> SATLiteral(1569))
-1241 1569 0
c (SATLiteral(1241) -> SATLiteral(1570))
-1241 1570 0
c (SATLiteral(1241) -> SATLiteral(1571))
-1241 1571 0
c (SATLiteral(1241) -> SATLiteral(1572))
-1241 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1242) -> SATLiteral(1574))
-1242 1574 0
c (SATLiteral(1242) -> SATLiteral(1575))
-1242 1575 0
c (SATLiteral(1242) -> SATLiteral(1576))
-1242 1576 0
c (SATLiteral(1242) -> SATLiteral(1577))
-1242 1577 0
c (SATLiteral(1242) -> SATLiteral(1578))
-1242 1578 0
c (SATLiteral(1242) -> SATLiteral(1579))
-1242 1579 0
c (SATLiteral(1242) -> SATLiteral(1580))
-1242 1580 0
c (SATLiteral(1242) -> SATLiteral(1581))
-1242 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1243) -> SATLiteral(1583))
-1243 1583 0
c (SATLiteral(1243) -> SATLiteral(1584))
-1243 1584 0
c (SATLiteral(1243) -> SATLiteral(1585))
-1243 1585 0
c (SATLiteral(1243) -> SATLiteral(1586))
-1243 1586 0
c (SATLiteral(1243) -> SATLiteral(1587))
-1243 1587 0
c (SATLiteral(1243) -> SATLiteral(1588))
-1243 1588 0
c (SATLiteral(1243) -> SATLiteral(1589))
-1243 1589 0
c (SATLiteral(1243) -> SATLiteral(1590))
-1243 1590 0
c (SATLiteral(1244) -> SATLiteral(1591))
-1244 1591 0
c (SATLiteral(1244) -> SATLiteral(1592))
-1244 1592 0
c (SATLiteral(1244) -> SATLiteral(1593))
-1244 1593 0
c (SATLiteral(1244) -> SATLiteral(1594))
-1244 1594 0
c (SATLiteral(1244) -> SATLiteral(1595))
-1244 1595 0
c (SATLiteral(1244) -> SATLiteral(1596))
-1244 1596 0
c (SATLiteral(1244) -> SATLiteral(1597))
-1244 1597 0
c (SATLiteral(1244) -> SATLiteral(1598))
-1244 1598 0
c (SATLiteral(1244) -> SATLiteral(1599))
-1244 1599 0
c (SATLiteral(1246) -> SATLiteral(1600))
-1246 1600 0
c (SATLiteral(1246) -> SATLiteral(1601))
-1246 1601 0
c (SATLiteral(1246) -> SATLiteral(1602))
-1246 1602 0
c (SATLiteral(1246) -> SATLiteral(1603))
-1246 1603 0
c (SATLiteral(1246) -> SATLiteral(1604))
-1246 1604 0
c (SATLiteral(1246) -> SATLiteral(1605))
-1246 1605 0
c (SATLiteral(1246) -> SATLiteral(1606))
-1246 1606 0
c (SATLiteral(1246) -> SATLiteral(1607))
-1246 1607 0
c (SATLiteral(1246) -> SATLiteral(1608))
-1246 1608 0
c (SATLiteral(1247) -> SATLiteral(1609))
-1247 1609 0
c (SATLiteral(1247) -> SATLiteral(1610))
-1247 1610 0
c (SATLiteral(1247) -> SATLiteral(1611))
-1247 1611 0
c (SATLiteral(1247) -> SATLiteral(1612))
-1247 1612 0
c (SATLiteral(1247) -> SATLiteral(1613))
-1247 1613 0
c (SATLiteral(1247) -> SATLiteral(1614))
-1247 1614 0
c (SATLiteral(1247) -> SATLiteral(1615))
-1247 1615 0
c (SATLiteral(1247) -> SATLiteral(1616))
-1247 1616 0
c (SATLiteral(1247) -> SATLiteral(1617))
-1247 1617 0
c (SATLiteral(1248) -> SATLiteral(1618))
-1248 1618 0
c (SATLiteral(1248) -> SATLiteral(1619))
-1248 1619 0
c (SATLiteral(1248) -> SATLiteral(1620))
-1248 1620 0
c (SATLiteral(1248) -> SATLiteral(1621))
-1248 1621 0
c (SATLiteral(1248) -> SATLiteral(1622))
-1248 1622 0
c (SATLiteral(1248) -> SATLiteral(1623))
-1248 1623 0
c (SATLiteral(1248) -> SATLiteral(1624))
-1248 1624 0
c (SATLiteral(1248) -> SATLiteral(1625))
-1248 1625 0
c (SATLiteral(1248) -> SATLiteral(1626))
-1248 1626 0
c (SATLiteral(1249) -> SATLiteral(1627))
-1249 1627 0
c (SATLiteral(1249) -> SATLiteral(1628))
-1249 1628 0
c (SATLiteral(1249) -> SATLiteral(1629))
-1249 1629 0
c (SATLiteral(1249) -> SATLiteral(1630))
-1249 1630 0
c (SATLiteral(1249) -> SATLiteral(1631))
-1249 1631 0
c (SATLiteral(1249) -> SATLiteral(1632))
-1249 1632 0
c (SATLiteral(1249) -> SATLiteral(1633))
-1249 1633 0
c (SATLiteral(1249) -> SATLiteral(1634))
-1249 1634 0
c (SATLiteral(1249) -> SATLiteral(1635))
-1249 1635 0
c (SATLiteral(1250) -> SATLiteral(1636))
-1250 1636 0
c (SATLiteral(1250) -> SATLiteral(1637))
-1250 1637 0
c (SATLiteral(1250) -> SATLiteral(1638))
-1250 1638 0
c (SATLiteral(1250) -> SATLiteral(1639))
-1250 1639 0
c (SATLiteral(1250) -> SATLiteral(1640))
-1250 1640 0
c (SATLiteral(1250) -> SATLiteral(1641))
-1250 1641 0
c (SATLiteral(1250) -> SATLiteral(1642))
-1250 1642 0
c (SATLiteral(1250) -> SATLiteral(1643))
-1250 1643 0
c (SATLiteral(1250) -> SATLiteral(1644))
-1250 1644 0
c (SATLiteral(1252) -> SATLiteral(1645))
-1252 1645 0
c (SATLiteral(1252) -> SATLiteral(1646))
-1252 1646 0
c (SATLiteral(1252) -> SATLiteral(1647))
-1252 1647 0
c (SATLiteral(1252) -> SATLiteral(1648))
-1252 1648 0
c (SATLiteral(1252) -> SATLiteral(1649))
-1252 1649 0
c (SATLiteral(1252) -> SATLiteral(1650))
-1252 1650 0
c (SATLiteral(1252) -> SATLiteral(1651))
-1252 1651 0
c (SATLiteral(1252) -> SATLiteral(1652))
-1252 1652 0
c (SATLiteral(1252) -> SATLiteral(1653))
-1252 1653 0
c (SATLiteral(1254) -> SATLiteral(1654))
-1254 1654 0
c (SATLiteral(1254) -> SATLiteral(1655))
-1254 1655 0
c (SATLiteral(1254) -> SATLiteral(1656))
-1254 1656 0
c (SATLiteral(1254) -> SATLiteral(1657))
-1254 1657 0
c (SATLiteral(1254) -> SATLiteral(1658))
-1254 1658 0
c (SATLiteral(1254) -> SATLiteral(1659))
-1254 1659 0
c (SATLiteral(1254) -> SATLiteral(1660))
-1254 1660 0
c (SATLiteral(1254) -> SATLiteral(1661))
-1254 1661 0
c (SATLiteral(1254) -> SATLiteral(1662))
-1254 1662 0
c (SATLiteral(1255) -> SATLiteral(1663))
-1255 1663 0
c (SATLiteral(1255) -> SATLiteral(1664))
-1255 1664 0
c (SATLiteral(1255) -> SATLiteral(1665))
-1255 1665 0
c (SATLiteral(1255) -> SATLiteral(1666))
-1255 1666 0
c (SATLiteral(1255) -> SATLiteral(1667))
-1255 1667 0
c (SATLiteral(1255) -> SATLiteral(1668))
-1255 1668 0
c (SATLiteral(1255) -> SATLiteral(1669))
-1255 1669 0
c (SATLiteral(1255) -> SATLiteral(1670))
-1255 1670 0
c (SATLiteral(1255) -> SATLiteral(1671))
-1255 1671 0
c (SATLiteral(1256) -> SATLiteral(1672))
-1256 1672 0
c (SATLiteral(1256) -> SATLiteral(1673))
-1256 1673 0
c (SATLiteral(1256) -> SATLiteral(1674))
-1256 1674 0
c (SATLiteral(1256) -> SATLiteral(1675))
-1256 1675 0
c (SATLiteral(1256) -> SATLiteral(1676))
-1256 1676 0
c (SATLiteral(1256) -> SATLiteral(1677))
-1256 1677 0
c (SATLiteral(1256) -> SATLiteral(1678))
-1256 1678 0
c (SATLiteral(1256) -> SATLiteral(1679))
-1256 1679 0
c (SATLiteral(1256) -> SATLiteral(1680))
-1256 1680 0
c (SATLiteral(1258) -> SATLiteral(1681))
-1258 1681 0
c (SATLiteral(1258) -> SATLiteral(1682))
-1258 1682 0
c (SATLiteral(1258) -> SATLiteral(1683))
-1258 1683 0
c (SATLiteral(1258) -> SATLiteral(1684))
-1258 1684 0
c (SATLiteral(1258) -> SATLiteral(1685))
-1258 1685 0
c (SATLiteral(1258) -> SATLiteral(1686))
-1258 1686 0
c (SATLiteral(1258) -> SATLiteral(1687))
-1258 1687 0
c (SATLiteral(1258) -> SATLiteral(1688))
-1258 1688 0
c (SATLiteral(1258) -> SATLiteral(1689))
-1258 1689 0
c (SATLiteral(1262) -> SATLiteral(1690))
-1262 1690 0
c (SATLiteral(1262) -> SATLiteral(1691))
-1262 1691 0
c (SATLiteral(1262) -> SATLiteral(1692))
-1262 1692 0
c (SATLiteral(1262) -> SATLiteral(1693))
-1262 1693 0
c (SATLiteral(1262) -> SATLiteral(1694))
-1262 1694 0
c (SATLiteral(1262) -> SATLiteral(1695))
-1262 1695 0
c (SATLiteral(1262) -> SATLiteral(1696))
-1262 1696 0
c (SATLiteral(1262) -> SATLiteral(1697))
-1262 1697 0
c (SATLiteral(1262) -> SATLiteral(1698))
-1262 1698 0
c (SATLiteral(1263) -> SATLiteral(1699))
-1263 1699 0
c (SATLiteral(1263) -> SATLiteral(1700))
-1263 1700 0
c (SATLiteral(1263) -> SATLiteral(1701))
-1263 1701 0
c (SATLiteral(1263) -> SATLiteral(1702))
-1263 1702 0
c (SATLiteral(1263) -> SATLiteral(1703))
-1263 1703 0
c (SATLiteral(1263) -> SATLiteral(1704))
-1263 1704 0
c (SATLiteral(1263) -> SATLiteral(1705))
-1263 1705 0
c (SATLiteral(1263) -> SATLiteral(1706))
-1263 1706 0
c (SATLiteral(1263) -> SATLiteral(1707))
-1263 1707 0
c (SATLiteral(1266) -> SATLiteral(1708))
-1266 1708 0
c (SATLiteral(1266) -> SATLiteral(1709))
-1266 1709 0
c (SATLiteral(1266) -> SATLiteral(1710))
-1266 1710 0
c (SATLiteral(1266) -> SATLiteral(1711))
-1266 1711 0
c (SATLiteral(1266) -> SATLiteral(1712))
-1266 1712 0
c (SATLiteral(1266) -> SATLiteral(1713))
-1266 1713 0
c (SATLiteral(1266) -> SATLiteral(1714))
-1266 1714 0
c (SATLiteral(1266) -> SATLiteral(1715))
-1266 1715 0
c (SATLiteral(1266) -> SATLiteral(1716))
-1266 1716 0
c (SATLiteral(1268) -> SATLiteral(1717))
-1268 1717 0
c (SATLiteral(1268) -> SATLiteral(1718))
-1268 1718 0
c (SATLiteral(1268) -> SATLiteral(1719))
-1268 1719 0
c (SATLiteral(1268) -> SATLiteral(1720))
-1268 1720 0
c (SATLiteral(1268) -> SATLiteral(1721))
-1268 1721 0
c (SATLiteral(1268) -> SATLiteral(1722))
-1268 1722 0
c (SATLiteral(1268) -> SATLiteral(1723))
-1268 1723 0
c (SATLiteral(1268) -> SATLiteral(1724))
-1268 1724 0
c (SATLiteral(1268) -> SATLiteral(1725))
-1268 1725 0
c (SATLiteral(1269) -> SATLiteral(1726))
-1269 1726 0
c (SATLiteral(1269) -> SATLiteral(1727))
-1269 1727 0
c (SATLiteral(1269) -> SATLiteral(1728))
-1269 1728 0
c (SATLiteral(1269) -> SATLiteral(1729))
-1269 1729 0
c (SATLiteral(1269) -> SATLiteral(1730))
-1269 1730 0
c (SATLiteral(1269) -> SATLiteral(1731))
-1269 1731 0
c (SATLiteral(1269) -> SATLiteral(1732))
-1269 1732 0
c (SATLiteral(1269) -> SATLiteral(1733))
-1269 1733 0
c (SATLiteral(1269) -> SATLiteral(1734))
-1269 1734 0
c (SATLiteral(1270) -> SATLiteral(1735))
-1270 1735 0
c (SATLiteral(1270) -> SATLiteral(1736))
-1270 1736 0
c (SATLiteral(1270) -> SATLiteral(1737))
-1270 1737 0
c (SATLiteral(1270) -> SATLiteral(1738))
-1270 1738 0
c (SATLiteral(1270) -> SATLiteral(1739))
-1270 1739 0
c (SATLiteral(1270) -> SATLiteral(1740))
-1270 1740 0
c (SATLiteral(1270) -> SATLiteral(1741))
-1270 1741 0
c (SATLiteral(1270) -> SATLiteral(1742))
-1270 1742 0
c (SATLiteral(1270) -> SATLiteral(1743))
-1270 1743 0
c (SATLiteral(1275) -> SATLiteral(1744))
-1275 1744 0
c (SATLiteral(1275) -> SATLiteral(1745))
-1275 1745 0
c (SATLiteral(1275) -> SATLiteral(1746))
-1275 1746 0
c (SATLiteral(1275) -> SATLiteral(1747))
-1275 1747 0
c (SATLiteral(1275) -> SATLiteral(1748))
-1275 1748 0
c (SATLiteral(1275) -> SATLiteral(1749))
-1275 1749 0
c (SATLiteral(1275) -> SATLiteral(1750))
-1275 1750 0
c (SATLiteral(1275) -> SATLiteral(1751))
-1275 1751 0
c (SATLiteral(1275) -> SATLiteral(1752))
-1275 1752 0
c (( - aux445 + shift(x_00001_00006, -1) + shift(x_00002_00005, -1))<=0)
197 -1753 0
198 -1754 0
200 -1756 0
202 -1758 0
204 -1760 0
206 -1762 0
208 -1764 0
210 -1766 0
77 -1753 0
77 197 -1754 0
77 198 -1756 0
77 200 -1758 0
77 202 -1760 0
77 204 -1762 0
77 206 -1764 0
77 208 -1766 0
77 210 -1768 0
78 -1754 0
78 197 -1756 0
78 198 -1758 0
78 200 -1760 0
78 202 -1762 0
78 204 -1764 0
78 206 -1766 0
78 208 -1768 0
78 210 -1770 0
80 -1756 0
80 197 -1758 0
80 198 -1760 0
80 200 -1762 0
80 202 -1764 0
80 204 -1766 0
80 206 -1768 0
80 208 -1770 0
80 210 -1772 0
82 -1758 0
82 197 -1760 0
82 198 -1762 0
82 200 -1764 0
82 202 -1766 0
82 204 -1768 0
82 206 -1770 0
82 208 -1772 0
82 210 -1774 0
84 -1760 0
84 197 -1762 0
84 198 -1764 0
84 200 -1766 0
84 202 -1768 0
84 204 -1770 0
84 206 -1772 0
84 208 -1774 0
84 210 -1776 0
86 -1762 0
86 197 -1764 0
86 198 -1766 0
86 200 -1768 0
86 202 -1770 0
86 204 -1772 0
86 206 -1774 0
86 208 -1776 0
86 210 -1778 0
88 -1764 0
88 197 -1766 0
88 198 -1768 0
88 200 -1770 0
88 202 -1772 0
88 204 -1774 0
88 206 -1776 0
88 208 -1778 0
88 210 -1780 0
90 -1766 0
90 197 -1768 0
90 198 -1770 0
90 200 -1772 0
90 202 -1774 0
90 204 -1776 0
90 206 -1778 0
90 208 -1780 0
90 210 -1782 0
c (0<=( - aux445 + shift(x_00001_00006, -1) + shift(x_00002_00005, -1)))
-210 1782 0
-208 1780 0
-206 1778 0
-204 1776 0
-202 1774 0
-200 1772 0
-198 1770 0
-197 1768 0
-90 1782 0
-90 -210 1780 0
-90 -208 1778 0
-90 -206 1776 0
-90 -204 1774 0
-90 -202 1772 0
-90 -200 1770 0
-90 -198 1768 0
-90 -197 1766 0
-88 1780 0
-88 -210 1778 0
-88 -208 1776 0
-88 -206 1774 0
-88 -204 1772 0
-88 -202 1770 0
-88 -200 1768 0
-88 -198 1766 0
-88 -197 1764 0
-86 1778 0
-86 -210 1776 0
-86 -208 1774 0
-86 -206 1772 0
-86 -204 1770 0
-86 -202 1768 0
-86 -200 1766 0
-86 -198 1764 0
-86 -197 1762 0
-84 1776 0
-84 -210 1774 0
-84 -208 1772 0
-84 -206 1770 0
-84 -204 1768 0
-84 -202 1766 0
-84 -200 1764 0
-84 -198 1762 0
-84 -197 1760 0
-82 1774 0
-82 -210 1772 0
-82 -208 1770 0
-82 -206 1768 0
-82 -204 1766 0
-82 -202 1764 0
-82 -200 1762 0
-82 -198 1760 0
-82 -197 1758 0
-80 1772 0
-80 -210 1770 0
-80 -208 1768 0
-80 -206 1766 0
-80 -204 1764 0
-80 -202 1762 0
-80 -200 1760 0
-80 -198 1758 0
-80 -197 1756 0
-78 1770 0
-78 -210 1768 0
-78 -208 1766 0
-78 -206 1764 0
-78 -204 1762 0
-78 -202 1760 0
-78 -200 1758 0
-78 -198 1756 0
-78 -197 1754 0
-77 1768 0
-77 -210 1766 0
-77 -208 1764 0
-77 -206 1762 0
-77 -204 1760 0
-77 -202 1758 0
-77 -200 1756 0
-77 -198 1754 0
-77 -197 1753 0
c ((shift(x_00007_00007, -1) - aux446 + shift(x_00008_00008, -1))<=0)
1052 -1784 0
1053 -1785 0
1055 -1787 0
1057 -1789 0
1059 -1791 0
1061 -1793 0
1063 -1795 0
1065 -1797 0
902 -1784 0
902 1052 -1785 0
902 1053 -1787 0
902 1055 -1789 0
902 1057 -1791 0
902 1059 -1793 0
902 1061 -1795 0
902 1063 -1797 0
902 1065 -1799 0
903 -1785 0
903 1052 -1787 0
903 1053 -1789 0
903 1055 -1791 0
903 1057 -1793 0
903 1059 -1795 0
903 1061 -1797 0
903 1063 -1799 0
903 1065 -1801 0
905 -1787 0
905 1052 -1789 0
905 1053 -1791 0
905 1055 -1793 0
905 1057 -1795 0
905 1059 -1797 0
905 1061 -1799 0
905 1063 -1801 0
905 1065 -1803 0
907 -1789 0
907 1052 -1791 0
907 1053 -1793 0
907 1055 -1795 0
907 1057 -1797 0
907 1059 -1799 0
907 1061 -1801 0
907 1063 -1803 0
907 1065 -1805 0
909 -1791 0
909 1052 -1793 0
909 1053 -1795 0
909 1055 -1797 0
909 1057 -1799 0
909 1059 -1801 0
909 1061 -1803 0
909 1063 -1805 0
909 1065 -1807 0
911 -1793 0
911 1052 -1795 0
911 1053 -1797 0
911 1055 -1799 0
911 1057 -1801 0
911 1059 -1803 0
911 1061 -1805 0
911 1063 -1807 0
911 1065 -1809 0
913 -1795 0
913 1052 -1797 0
913 1053 -1799 0
913 1055 -1801 0
913 1057 -1803 0
913 1059 -1805 0
913 1061 -1807 0
913 1063 -1809 0
913 1065 -1811 0
915 -1797 0
915 1052 -1799 0
915 1053 -1801 0
915 1055 -1803 0
915 1057 -1805 0
915 1059 -1807 0
915 1061 -1809 0
915 1063 -1811 0
915 1065 -1813 0
c (0<=(shift(x_00007_00007, -1) - aux446 + shift(x_00008_00008, -1)))
-1065 1813 0
-1063 1811 0
-1061 1809 0
-1059 1807 0
-1057 1805 0
-1055 1803 0
-1053 1801 0
-1052 1799 0
-915 1813 0
-915 -1065 1811 0
-915 -1063 1809 0
-915 -1061 1807 0
-915 -1059 1805 0
-915 -1057 1803 0
-915 -1055 1801 0
-915 -1053 1799 0
-915 -1052 1797 0
-913 1811 0
-913 -1065 1809 0
-913 -1063 1807 0
-913 -1061 1805 0
-913 -1059 1803 0
-913 -1057 1801 0
-913 -1055 1799 0
-913 -1053 1797 0
-913 -1052 1795 0
-911 1809 0
-911 -1065 1807 0
-911 -1063 1805 0
-911 -1061 1803 0
-911 -1059 1801 0
-911 -1057 1799 0
-911 -1055 1797 0
-911 -1053 1795 0
-911 -1052 1793 0
-909 1807 0
-909 -1065 1805 0
-909 -1063 1803 0
-909 -1061 1801 0
-909 -1059 1799 0
-909 -1057 1797 0
-909 -1055 1795 0
-909 -1053 1793 0
-909 -1052 1791 0
-907 1805 0
-907 -1065 1803 0
-907 -1063 1801 0
-907 -1061 1799 0
-907 -1059 1797 0
-907 -1057 1795 0
-907 -1055 1793 0
-907 -1053 1791 0
-907 -1052 1789 0
-905 1803 0
-905 -1065 1801 0
-905 -1063 1799 0
-905 -1061 1797 0
-905 -1059 1795 0
-905 -1057 1793 0
-905 -1055 1791 0
-905 -1053 1789 0
-905 -1052 1787 0
-903 1801 0
-903 -1065 1799 0
-903 -1063 1797 0
-903 -1061 1795 0
-903 -1059 1793 0
-903 -1057 1791 0
-903 -1055 1789 0
-903 -1053 1787 0
-903 -1052 1785 0
-902 1799 0
-902 -1065 1797 0
-902 -1063 1795 0
-902 -1061 1793 0
-902 -1059 1791 0
-902 -1057 1789 0
-902 -1055 1787 0
-902 -1053 1785 0
-902 -1052 1784 0
c ((SATLiteral(62) - aux1905 + SATLiteral(212))<=0)
-212 -7647 0
-62 -7647 0
-62 -212 -7648 0
c (0<=(SATLiteral(62) - aux1905 + SATLiteral(212)))
212 7648 0
62 7648 0
62 212 7647 0
c ((SATLiteral(64) - aux1906 + SATLiteral(214))<=0)
-214 -7650 0
-64 -7650 0
-64 -214 -7651 0
c (0<=(SATLiteral(64) - aux1906 + SATLiteral(214)))
214 7651 0
64 7651 0
64 214 7650 0
c ((SATLiteral(66) - aux1907 + SATLiteral(216))<=0)
-216 -7653 0
-66 -7653 0
-66 -216 -7654 0
c (0<=(SATLiteral(66) - aux1907 + SATLiteral(216)))
216 7654 0
66 7654 0
66 216 7653 0
c ((SATLiteral(68) - aux1908 + SATLiteral(218))<=0)
-218 -7656 0
-68 -7656 0
-68 -218 -7657 0
c (0<=(SATLiteral(68) - aux1908 + SATLiteral(218)))
218 7657 0
68 7657 0
68 218 7656 0
c ((SATLiteral(70) - aux1909 + SATLiteral(220))<=0)
-220 -7659 0
-70 -7659 0
-70 -220 -7660 0
c (0<=(SATLiteral(70) - aux1909 + SATLiteral(220)))
220 7660 0
70 7660 0
70 220 7659 0
c ((SATLiteral(72) - aux1910 + SATLiteral(222))<=0)
-222 -7662 0
-72 -7662 0
-72 -222 -7663 0
c (0<=(SATLiteral(72) - aux1910 + SATLiteral(222)))
222 7663 0
72 7663 0
72 222 7662 0
c ((SATLiteral(74) - aux1911 + SATLiteral(224))<=0)
-224 -7665 0
-74 -7665 0
-74 -224 -7666 0
c (0<=(SATLiteral(74) - aux1911 + SATLiteral(224)))
224 7666 0
74 7666 0
74 224 7665 0
c ((SATLiteral(76) - aux1912 + SATLiteral(226))<=0)
-226 -7668 0
-76 -7668 0
-76 -226 -7669 0
c (0<=(SATLiteral(76) - aux1912 + SATLiteral(226)))
226 7669 0
76 7669 0
76 226 7668 0
c ((SATLiteral(-75) - aux1913 + SATLiteral(-225))<=0)
225 -7671 0
75 -7671 0
75 225 -7672 0
c (0<=(SATLiteral(-75) - aux1913 + SATLiteral(-225)))
-225 7672 0
-75 7672 0
-75 -225 7671 0
c ((SATLiteral(1037) - aux1914 + SATLiteral(917))<=0)
-917 -7674 0
-1037 -7674 0
-1037 -917 -7675 0
c (0<=(SATLiteral(1037) - aux1914 + SATLiteral(917)))
917 7675 0
1037 7675 0
1037 917 7674 0
c ((SATLiteral(1039) - aux1915 + SATLiteral(919))<=0)
-919 -7677 0
-1039 -7677 0
-1039 -919 -7678 0
c (0<=(SATLiteral(1039) - aux1915 + SATLiteral(919)))
919 7678 0
1039 7678 0
1039 919 7677 0
c ((SATLiteral(1041) - aux1916 + SATLiteral(921))<=0)
-921 -7680 0
-1041 -7680 0
-1041 -921 -7681 0
c (0<=(SATLiteral(1041) - aux1916 + SATLiteral(921)))
921 7681 0
1041 7681 0
1041 921 7680 0
c ((SATLiteral(1043) - aux1917 + SATLiteral(923))<=0)
-923 -7683 0
-1043 -7683 0
-1043 -923 -7684 0
c (0<=(SATLiteral(1043) - aux1917 + SATLiteral(923)))
923 7684 0
1043 7684 0
1043 923 7683 0
c ((SATLiteral(1045) - aux1918 + SATLiteral(925))<=0)
-925 -7686 0
-1045 -7686 0
-1045 -925 -7687 0
c (0<=(SATLiteral(1045) - aux1918 + SATLiteral(925)))
925 7687 0
1045 7687 0
1045 925 7686 0
c ((SATLiteral(1047) - aux1919 + SATLiteral(927))<=0)
-927 -7689 0
-1047 -7689 0
-1047 -927 -7690 0
c (0<=(SATLiteral(1047) - aux1919 + SATLiteral(927)))
927 7690 0
1047 7690 0
1047 927 7689 0
c ((SATLiteral(1049) - aux1920 + SATLiteral(929))<=0)
-929 -7692 0
-1049 -7692 0
-1049 -929 -7693 0
c (0<=(SATLiteral(1049) - aux1920 + SATLiteral(929)))
929 7693 0
1049 7693 0
1049 929 7692 0
c ((SATLiteral(1051) - aux1921 + SATLiteral(931))<=0)
-931 -7695 0
-1051 -7695 0
-1051 -931 -7696 0
c (0<=(SATLiteral(1051) - aux1921 + SATLiteral(931)))
931 7696 0
1051 7696 0
1051 931 7695 0
c ((SATLiteral(-1050) - aux1922 + SATLiteral(-930))<=0)
930 -7698 0
1050 -7698 0
1050 930 -7699 0
c (0<=(SATLiteral(-1050) - aux1922 + SATLiteral(-930)))
-930 7699 0
-1050 7699 0
-1050 -930 7698 0
c ((SATLiteral(272) - aux447 + SATLiteral(542))<=0)
-542 -1815 0
-272 -1815 0
-272 -542 -1816 0
c (0<=(SATLiteral(272) - aux447 + SATLiteral(542)))
542 1816 0
272 1816 0
272 542 1815 0
c ((SATLiteral(947) - aux448 + SATLiteral(812))<=0)
-812 -1818 0
-947 -1818 0
-947 -812 -1819 0
c (0<=(SATLiteral(947) - aux448 + SATLiteral(812)))
812 1819 0
947 1819 0
947 812 1818 0
c (( - aux449 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -1821 0
-677 -1821 0
-677 -137 -1822 0
c (0<=( - aux449 + SATLiteral(677) + SATLiteral(137)))
137 1822 0
677 1822 0
677 137 1821 0
c (( - aux450 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -1824 0
-407 -1824 0
-407 -1082 -1825 0
c (0<=( - aux450 + SATLiteral(407) + SATLiteral(1082)))
1082 1825 0
407 1825 0
407 1082 1824 0
c ((aux450 - aux451 + SATLiteral(2))<=0)
1824 -1827 0
1825 -1828 0
-2 -1827 0
-2 1824 -1828 0
-2 1825 -1830 0
c (0<=(aux450 - aux451 + SATLiteral(2)))
-1825 1830 0
-1824 1828 0
2 1830 0
2 -1825 1828 0
2 -1824 1827 0
c ((aux447 + aux449 - aux452)<=0)
1821 -1832 0
1822 -1833 0
1815 -1832 0
1815 1821 -1833 0
1815 1822 -1835 0
1816 -1833 0
1816 1821 -1835 0
1816 1822 -1837 0
c (0<=(aux447 + aux449 - aux452))
-1822 1837 0
-1821 1835 0
-1816 1837 0
-1816 -1822 1835 0
-1816 -1821 1833 0
-1815 1835 0
-1815 -1822 1833 0
-1815 -1821 1832 0
c ((SATLiteral(274) - aux453 + SATLiteral(544))<=0)
-544 -1839 0
-274 -1839 0
-274 -544 -1840 0
c (0<=(SATLiteral(274) - aux453 + SATLiteral(544)))
544 1840 0
274 1840 0
274 544 1839 0
c ((SATLiteral(949) - aux454 + SATLiteral(814))<=0)
-814 -1842 0
-949 -1842 0
-949 -814 -1843 0
c (0<=(SATLiteral(949) - aux454 + SATLiteral(814)))
814 1843 0
949 1843 0
949 814 1842 0
c (( - aux455 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -1845 0
-679 -1845 0
-679 -139 -1846 0
c (0<=( - aux455 + SATLiteral(679) + SATLiteral(139)))
139 1846 0
679 1846 0
679 139 1845 0
c (( - aux456 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -1848 0
-409 -1848 0
-409 -1084 -1849 0
c (0<=( - aux456 + SATLiteral(409) + SATLiteral(1084)))
1084 1849 0
409 1849 0
409 1084 1848 0
c ((aux456 - aux457 + SATLiteral(4))<=0)
1848 -1851 0
1849 -1852 0
-4 -1851 0
-4 1848 -1852 0
-4 1849 -1854 0
c (0<=(aux456 - aux457 + SATLiteral(4)))
-1849 1854 0
-1848 1852 0
4 1854 0
4 -1849 1852 0
4 -1848 1851 0
c ((aux453 + aux455 - aux458)<=0)
1845 -1856 0
1846 -1857 0
1839 -1856 0
1839 1845 -1857 0
1839 1846 -1859 0
1840 -1857 0
1840 1845 -1859 0
1840 1846 -1861 0
c (0<=(aux453 + aux455 - aux458))
-1846 1861 0
-1845 1859 0
-1840 1861 0
-1840 -1846 1859 0
-1840 -1845 1857 0
-1839 1859 0
-1839 -1846 1857 0
-1839 -1845 1856 0
c ((SATLiteral(276) - aux459 + SATLiteral(546))<=0)
-546 -1863 0
-276 -1863 0
-276 -546 -1864 0
c (0<=(SATLiteral(276) - aux459 + SATLiteral(546)))
546 1864 0
276 1864 0
276 546 1863 0
c ((SATLiteral(951) - aux460 + SATLiteral(816))<=0)
-816 -1866 0
-951 -1866 0
-951 -816 -1867 0
c (0<=(SATLiteral(951) - aux460 + SATLiteral(816)))
816 1867 0
951 1867 0
951 816 1866 0
c (( - aux461 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -1869 0
-681 -1869 0
-681 -141 -1870 0
c (0<=( - aux461 + SATLiteral(681) + SATLiteral(141)))
141 1870 0
681 1870 0
681 141 1869 0
c (( - aux462 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -1872 0
-411 -1872 0
-411 -1086 -1873 0
c (0<=( - aux462 + SATLiteral(411) + SATLiteral(1086)))
1086 1873 0
411 1873 0
411 1086 1872 0
c ((aux462 - aux463 + SATLiteral(6))<=0)
1872 -1875 0
1873 -1876 0
-6 -1875 0
-6 1872 -1876 0
-6 1873 -1878 0
c (0<=(aux462 - aux463 + SATLiteral(6)))
-1873 1878 0
-1872 1876 0
6 1878 0
6 -1873 1876 0
6 -1872 1875 0
c ((aux459 + aux461 - aux464)<=0)
1869 -1880 0
1870 -1881 0
1863 -1880 0
1863 1869 -1881 0
1863 1870 -1883 0
1864 -1881 0
1864 1869 -1883 0
1864 1870 -1885 0
c (0<=(aux459 + aux461 - aux464))
-1870 1885 0
-1869 1883 0
-1864 1885 0
-1864 -1870 1883 0
-1864 -1869 1881 0
-1863 1883 0
-1863 -1870 1881 0
-1863 -1869 1880 0
c ((SATLiteral(278) - aux465 + SATLiteral(548))<=0)
-548 -1887 0
-278 -1887 0
-278 -548 -1888 0
c (0<=(SATLiteral(278) - aux465 + SATLiteral(548)))
548 1888 0
278 1888 0
278 548 1887 0
c ((SATLiteral(953) - aux466 + SATLiteral(818))<=0)
-818 -1890 0
-953 -1890 0
-953 -818 -1891 0
c (0<=(SATLiteral(953) - aux466 + SATLiteral(818)))
818 1891 0
953 1891 0
953 818 1890 0
c (( - aux467 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -1893 0
-683 -1893 0
-683 -143 -1894 0
c (0<=( - aux467 + SATLiteral(683) + SATLiteral(143)))
143 1894 0
683 1894 0
683 143 1893 0
c (( - aux468 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -1896 0
-413 -1896 0
-413 -1088 -1897 0
c (0<=( - aux468 + SATLiteral(413) + SATLiteral(1088)))
1088 1897 0
413 1897 0
413 1088 1896 0
c ((aux468 - aux469 + SATLiteral(8))<=0)
1896 -1899 0
1897 -1900 0
-8 -1899 0
-8 1896 -1900 0
-8 1897 -1902 0
c (0<=(aux468 - aux469 + SATLiteral(8)))
-1897 1902 0
-1896 1900 0
8 1902 0
8 -1897 1900 0
8 -1896 1899 0
c ((aux465 + aux467 - aux470)<=0)
1893 -1904 0
1894 -1905 0
1887 -1904 0
1887 1893 -1905 0
1887 1894 -1907 0
1888 -1905 0
1888 1893 -1907 0
1888 1894 -1909 0
c (0<=(aux465 + aux467 - aux470))
-1894 1909 0
-1893 1907 0
-1888 1909 0
-1888 -1894 1907 0
-1888 -1893 1905 0
-1887 1907 0
-1887 -1894 1905 0
-1887 -1893 1904 0
c ((SATLiteral(280) - aux471 + SATLiteral(550))<=0)
-550 -1911 0
-280 -1911 0
-280 -550 -1912 0
c (0<=(SATLiteral(280) - aux471 + SATLiteral(550)))
550 1912 0
280 1912 0
280 550 1911 0
c ((SATLiteral(955) - aux472 + SATLiteral(820))<=0)
-820 -1914 0
-955 -1914 0
-955 -820 -1915 0
c (0<=(SATLiteral(955) - aux472 + SATLiteral(820)))
820 1915 0
955 1915 0
955 820 1914 0
c (( - aux473 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -1917 0
-685 -1917 0
-685 -145 -1918 0
c (0<=( - aux473 + SATLiteral(685) + SATLiteral(145)))
145 1918 0
685 1918 0
685 145 1917 0
c (( - aux474 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -1920 0
-415 -1920 0
-415 -1090 -1921 0
c (0<=( - aux474 + SATLiteral(415) + SATLiteral(1090)))
1090 1921 0
415 1921 0
415 1090 1920 0
c ((aux474 - aux475 + SATLiteral(10))<=0)
1920 -1923 0
1921 -1924 0
-10 -1923 0
-10 1920 -1924 0
-10 1921 -1926 0
c (0<=(aux474 - aux475 + SATLiteral(10)))
-1921 1926 0
-1920 1924 0
10 1926 0
10 -1921 1924 0
10 -1920 1923 0
c ((aux471 + aux473 - aux476)<=0)
1917 -1928 0
1918 -1929 0
1911 -1928 0
1911 1917 -1929 0
1911 1918 -1931 0
1912 -1929 0
1912 1917 -1931 0
1912 1918 -1933 0
c (0<=(aux471 + aux473 - aux476))
-1918 1933 0
-1917 1931 0
-1912 1933 0
-1912 -1918 1931 0
-1912 -1917 1929 0
-1911 1931 0
-1911 -1918 1929 0
-1911 -1917 1928 0
c ((SATLiteral(282) - aux477 + SATLiteral(552))<=0)
-552 -1935 0
-282 -1935 0
-282 -552 -1936 0
c (0<=(SATLiteral(282) - aux477 + SATLiteral(552)))
552 1936 0
282 1936 0
282 552 1935 0
c ((SATLiteral(957) - aux478 + SATLiteral(822))<=0)
-822 -1938 0
-957 -1938 0
-957 -822 -1939 0
c (0<=(SATLiteral(957) - aux478 + SATLiteral(822)))
822 1939 0
957 1939 0
957 822 1938 0
c (( - aux479 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -1941 0
-687 -1941 0
-687 -147 -1942 0
c (0<=( - aux479 + SATLiteral(687) + SATLiteral(147)))
147 1942 0
687 1942 0
687 147 1941 0
c (( - aux480 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -1944 0
-417 -1944 0
-417 -1092 -1945 0
c (0<=( - aux480 + SATLiteral(417) + SATLiteral(1092)))
1092 1945 0
417 1945 0
417 1092 1944 0
c ((aux480 - aux481 + SATLiteral(12))<=0)
1944 -1947 0
1945 -1948 0
-12 -1947 0
-12 1944 -1948 0
-12 1945 -1950 0
c (0<=(aux480 - aux481 + SATLiteral(12)))
-1945 1950 0
-1944 1948 0
12 1950 0
12 -1945 1948 0
12 -1944 1947 0
c ((aux477 + aux479 - aux482)<=0)
1941 -1952 0
1942 -1953 0
1935 -1952 0
1935 1941 -1953 0
1935 1942 -1955 0
1936 -1953 0
1936 1941 -1955 0
1936 1942 -1957 0
c (0<=(aux477 + aux479 - aux482))
-1942 1957 0
-1941 1955 0
-1936 1957 0
-1936 -1942 1955 0
-1936 -1941 1953 0
-1935 1955 0
-1935 -1942 1953 0
-1935 -1941 1952 0
c ((SATLiteral(284) - aux483 + SATLiteral(554))<=0)
-554 -1959 0
-284 -1959 0
-284 -554 -1960 0
c (0<=(SATLiteral(284) - aux483 + SATLiteral(554)))
554 1960 0
284 1960 0
284 554 1959 0
c ((SATLiteral(959) - aux484 + SATLiteral(824))<=0)
-824 -1962 0
-959 -1962 0
-959 -824 -1963 0
c (0<=(SATLiteral(959) - aux484 + SATLiteral(824)))
824 1963 0
959 1963 0
959 824 1962 0
c (( - aux485 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -1965 0
-689 -1965 0
-689 -149 -1966 0
c (0<=( - aux485 + SATLiteral(689) + SATLiteral(149)))
149 1966 0
689 1966 0
689 149 1965 0
c (( - aux486 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -1968 0
-419 -1968 0
-419 -1094 -1969 0
c (0<=( - aux486 + SATLiteral(419) + SATLiteral(1094)))
1094 1969 0
419 1969 0
419 1094 1968 0
c ((aux486 - aux487 + SATLiteral(14))<=0)
1968 -1971 0
1969 -1972 0
-14 -1971 0
-14 1968 -1972 0
-14 1969 -1974 0
c (0<=(aux486 - aux487 + SATLiteral(14)))
-1969 1974 0
-1968 1972 0
14 1974 0
14 -1969 1972 0
14 -1968 1971 0
c ((aux483 + aux485 - aux488)<=0)
1965 -1976 0
1966 -1977 0
1959 -1976 0
1959 1965 -1977 0
1959 1966 -1979 0
1960 -1977 0
1960 1965 -1979 0
1960 1966 -1981 0
c (0<=(aux483 + aux485 - aux488))
-1966 1981 0
-1965 1979 0
-1960 1981 0
-1960 -1966 1979 0
-1960 -1965 1977 0
-1959 1979 0
-1959 -1966 1977 0
-1959 -1965 1976 0
c ((SATLiteral(286) - aux489 + SATLiteral(556))<=0)
-556 -1983 0
-286 -1983 0
-286 -556 -1984 0
c (0<=(SATLiteral(286) - aux489 + SATLiteral(556)))
556 1984 0
286 1984 0
286 556 1983 0
c ((SATLiteral(961) - aux490 + SATLiteral(826))<=0)
-826 -1986 0
-961 -1986 0
-961 -826 -1987 0
c (0<=(SATLiteral(961) - aux490 + SATLiteral(826)))
826 1987 0
961 1987 0
961 826 1986 0
c (( - aux491 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -1989 0
-691 -1989 0
-691 -151 -1990 0
c (0<=( - aux491 + SATLiteral(691) + SATLiteral(151)))
151 1990 0
691 1990 0
691 151 1989 0
c (( - aux492 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -1992 0
-421 -1992 0
-421 -1096 -1993 0
c (0<=( - aux492 + SATLiteral(421) + SATLiteral(1096)))
1096 1993 0
421 1993 0
421 1096 1992 0
c ((aux492 - aux493 + SATLiteral(16))<=0)
1992 -1995 0
1993 -1996 0
-16 -1995 0
-16 1992 -1996 0
-16 1993 -1998 0
c (0<=(aux492 - aux493 + SATLiteral(16)))
-1993 1998 0
-1992 1996 0
16 1998 0
16 -1993 1996 0
16 -1992 1995 0
c ((aux489 + aux491 - aux494)<=0)
1989 -2000 0
1990 -2001 0
1983 -2000 0
1983 1989 -2001 0
1983 1990 -2003 0
1984 -2001 0
1984 1989 -2003 0
1984 1990 -2005 0
c (0<=(aux489 + aux491 - aux494))
-1990 2005 0
-1989 2003 0
-1984 2005 0
-1984 -1990 2003 0
-1984 -1989 2001 0
-1983 2003 0
-1983 -1990 2001 0
-1983 -1989 2000 0
c ((SATLiteral(-285) - aux495 + SATLiteral(-555))<=0)
555 -2007 0
285 -2007 0
285 555 -2008 0
c (0<=(SATLiteral(-285) - aux495 + SATLiteral(-555)))
-555 2008 0
-285 2008 0
-285 -555 2007 0
c ((SATLiteral(-960) - aux496 + SATLiteral(-825))<=0)
825 -2010 0
960 -2010 0
960 825 -2011 0
c (0<=(SATLiteral(-960) - aux496 + SATLiteral(-825)))
-825 2011 0
-960 2011 0
-960 -825 2010 0
c (( - aux497 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2013 0
690 -2013 0
690 150 -2014 0
c (0<=( - aux497 + SATLiteral(-690) + SATLiteral(-150)))
-150 2014 0
-690 2014 0
-690 -150 2013 0
c (( - aux498 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2016 0
420 -2016 0
420 1095 -2017 0
c (0<=( - aux498 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2017 0
-420 2017 0
-420 -1095 2016 0
c ((aux498 - aux499 + SATLiteral(-15))<=0)
2016 -2019 0
2017 -2020 0
15 -2019 0
15 2016 -2020 0
15 2017 -2022 0
c (0<=(aux498 - aux499 + SATLiteral(-15)))
-2017 2022 0
-2016 2020 0
-15 2022 0
-15 -2017 2020 0
-15 -2016 2019 0
c ((aux495 + aux497 - aux500)<=0)
2013 -2024 0
2014 -2025 0
2007 -2024 0
2007 2013 -2025 0
2007 2014 -2027 0
2008 -2025 0
2008 2013 -2027 0
2008 2014 -2029 0
c (0<=(aux495 + aux497 - aux500))
-2014 2029 0
-2013 2027 0
-2008 2029 0
-2008 -2014 2027 0
-2008 -2013 2025 0
-2007 2027 0
-2007 -2014 2025 0
-2007 -2013 2024 0
c ((SATLiteral(287) - aux501 + SATLiteral(557))<=0)
-557 -2031 0
-287 -2031 0
-287 -557 -2032 0
c (0<=(SATLiteral(287) - aux501 + SATLiteral(557)))
557 2032 0
287 2032 0
287 557 2031 0
c ((SATLiteral(962) - aux502 + SATLiteral(827))<=0)
-827 -2034 0
-962 -2034 0
-962 -827 -2035 0
c (0<=(SATLiteral(962) - aux502 + SATLiteral(827)))
827 2035 0
962 2035 0
962 827 2034 0
c (( - aux503 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2037 0
-692 -2037 0
-692 -152 -2038 0
c (0<=( - aux503 + SATLiteral(692) + SATLiteral(152)))
152 2038 0
692 2038 0
692 152 2037 0
c (( - aux504 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2040 0
-422 -2040 0
-422 -1097 -2041 0
c (0<=( - aux504 + SATLiteral(422) + SATLiteral(1097)))
1097 2041 0
422 2041 0
422 1097 2040 0
c ((aux504 - aux505 + SATLiteral(17))<=0)
2040 -2043 0
2041 -2044 0
-17 -2043 0
-17 2040 -2044 0
-17 2041 -2046 0
c (0<=(aux504 - aux505 + SATLiteral(17)))
-2041 2046 0
-2040 2044 0
17 2046 0
17 -2041 2044 0
17 -2040 2043 0
c ((aux501 + aux503 - aux506)<=0)
2037 -2048 0
2038 -2049 0
2031 -2048 0
2031 2037 -2049 0
2031 2038 -2051 0
2032 -2049 0
2032 2037 -2051 0
2032 2038 -2053 0
c (0<=(aux501 + aux503 - aux506))
-2038 2053 0
-2037 2051 0
-2032 2053 0
-2032 -2038 2051 0
-2032 -2037 2049 0
-2031 2051 0
-2031 -2038 2049 0
-2031 -2037 2048 0
c ((SATLiteral(289) - aux507 + SATLiteral(559))<=0)
-559 -2055 0
-289 -2055 0
-289 -559 -2056 0
c (0<=(SATLiteral(289) - aux507 + SATLiteral(559)))
559 2056 0
289 2056 0
289 559 2055 0
c ((SATLiteral(964) - aux508 + SATLiteral(829))<=0)
-829 -2058 0
-964 -2058 0
-964 -829 -2059 0
c (0<=(SATLiteral(964) - aux508 + SATLiteral(829)))
829 2059 0
964 2059 0
964 829 2058 0
c (( - aux509 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2061 0
-694 -2061 0
-694 -154 -2062 0
c (0<=( - aux509 + SATLiteral(694) + SATLiteral(154)))
154 2062 0
694 2062 0
694 154 2061 0
c (( - aux510 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2064 0
-424 -2064 0
-424 -1099 -2065 0
c (0<=( - aux510 + SATLiteral(424) + SATLiteral(1099)))
1099 2065 0
424 2065 0
424 1099 2064 0
c ((aux510 - aux511 + SATLiteral(19))<=0)
2064 -2067 0
2065 -2068 0
-19 -2067 0
-19 2064 -2068 0
-19 2065 -2070 0
c (0<=(aux510 - aux511 + SATLiteral(19)))
-2065 2070 0
-2064 2068 0
19 2070 0
19 -2065 2068 0
19 -2064 2067 0
c ((aux507 + aux509 - aux512)<=0)
2061 -2072 0
2062 -2073 0
2055 -2072 0
2055 2061 -2073 0
2055 2062 -2075 0
2056 -2073 0
2056 2061 -2075 0
2056 2062 -2077 0
c (0<=(aux507 + aux509 - aux512))
-2062 2077 0
-2061 2075 0
-2056 2077 0
-2056 -2062 2075 0
-2056 -2061 2073 0
-2055 2075 0
-2055 -2062 2073 0
-2055 -2061 2072 0
c ((SATLiteral(291) - aux513 + SATLiteral(561))<=0)
-561 -2079 0
-291 -2079 0
-291 -561 -2080 0
c (0<=(SATLiteral(291) - aux513 + SATLiteral(561)))
561 2080 0
291 2080 0
291 561 2079 0
c ((SATLiteral(966) - aux514 + SATLiteral(831))<=0)
-831 -2082 0
-966 -2082 0
-966 -831 -2083 0
c (0<=(SATLiteral(966) - aux514 + SATLiteral(831)))
831 2083 0
966 2083 0
966 831 2082 0
c (( - aux515 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2085 0
-696 -2085 0
-696 -156 -2086 0
c (0<=( - aux515 + SATLiteral(696) + SATLiteral(156)))
156 2086 0
696 2086 0
696 156 2085 0
c (( - aux516 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2088 0
-426 -2088 0
-426 -1101 -2089 0
c (0<=( - aux516 + SATLiteral(426) + SATLiteral(1101)))
1101 2089 0
426 2089 0
426 1101 2088 0
c ((aux516 - aux517 + SATLiteral(21))<=0)
2088 -2091 0
2089 -2092 0
-21 -2091 0
-21 2088 -2092 0
-21 2089 -2094 0
c (0<=(aux516 - aux517 + SATLiteral(21)))
-2089 2094 0
-2088 2092 0
21 2094 0
21 -2089 2092 0
21 -2088 2091 0
c ((aux513 + aux515 - aux518)<=0)
2085 -2096 0
2086 -2097 0
2079 -2096 0
2079 2085 -2097 0
2079 2086 -2099 0
2080 -2097 0
2080 2085 -2099 0
2080 2086 -2101 0
c (0<=(aux513 + aux515 - aux518))
-2086 2101 0
-2085 2099 0
-2080 2101 0
-2080 -2086 2099 0
-2080 -2085 2097 0
-2079 2099 0
-2079 -2086 2097 0
-2079 -2085 2096 0
c ((SATLiteral(293) - aux519 + SATLiteral(563))<=0)
-563 -2103 0
-293 -2103 0
-293 -563 -2104 0
c (0<=(SATLiteral(293) - aux519 + SATLiteral(563)))
563 2104 0
293 2104 0
293 563 2103 0
c ((SATLiteral(968) - aux520 + SATLiteral(833))<=0)
-833 -2106 0
-968 -2106 0
-968 -833 -2107 0
c (0<=(SATLiteral(968) - aux520 + SATLiteral(833)))
833 2107 0
968 2107 0
968 833 2106 0
c (( - aux521 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2109 0
-698 -2109 0
-698 -158 -2110 0
c (0<=( - aux521 + SATLiteral(698) + SATLiteral(158)))
158 2110 0
698 2110 0
698 158 2109 0
c (( - aux522 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2112 0
-428 -2112 0
-428 -1103 -2113 0
c (0<=( - aux522 + SATLiteral(428) + SATLiteral(1103)))
1103 2113 0
428 2113 0
428 1103 2112 0
c ((aux522 - aux523 + SATLiteral(23))<=0)
2112 -2115 0
2113 -2116 0
-23 -2115 0
-23 2112 -2116 0
-23 2113 -2118 0
c (0<=(aux522 - aux523 + SATLiteral(23)))
-2113 2118 0
-2112 2116 0
23 2118 0
23 -2113 2116 0
23 -2112 2115 0
c ((aux519 + aux521 - aux524)<=0)
2109 -2120 0
2110 -2121 0
2103 -2120 0
2103 2109 -2121 0
2103 2110 -2123 0
2104 -2121 0
2104 2109 -2123 0
2104 2110 -2125 0
c (0<=(aux519 + aux521 - aux524))
-2110 2125 0
-2109 2123 0
-2104 2125 0
-2104 -2110 2123 0
-2104 -2109 2121 0
-2103 2123 0
-2103 -2110 2121 0
-2103 -2109 2120 0
c ((SATLiteral(295) - aux525 + SATLiteral(565))<=0)
-565 -2127 0
-295 -2127 0
-295 -565 -2128 0
c (0<=(SATLiteral(295) - aux525 + SATLiteral(565)))
565 2128 0
295 2128 0
295 565 2127 0
c ((SATLiteral(970) - aux526 + SATLiteral(835))<=0)
-835 -2130 0
-970 -2130 0
-970 -835 -2131 0
c (0<=(SATLiteral(970) - aux526 + SATLiteral(835)))
835 2131 0
970 2131 0
970 835 2130 0
c (( - aux527 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2133 0
-700 -2133 0
-700 -160 -2134 0
c (0<=( - aux527 + SATLiteral(700) + SATLiteral(160)))
160 2134 0
700 2134 0
700 160 2133 0
c (( - aux528 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2136 0
-430 -2136 0
-430 -1105 -2137 0
c (0<=( - aux528 + SATLiteral(430) + SATLiteral(1105)))
1105 2137 0
430 2137 0
430 1105 2136 0
c ((aux528 - aux529 + SATLiteral(25))<=0)
2136 -2139 0
2137 -2140 0
-25 -2139 0
-25 2136 -2140 0
-25 2137 -2142 0
c (0<=(aux528 - aux529 + SATLiteral(25)))
-2137 2142 0
-2136 2140 0
25 2142 0
25 -2137 2140 0
25 -2136 2139 0
c ((aux525 + aux527 - aux530)<=0)
2133 -2144 0
2134 -2145 0
2127 -2144 0
2127 2133 -2145 0
2127 2134 -2147 0
2128 -2145 0
2128 2133 -2147 0
2128 2134 -2149 0
c (0<=(aux525 + aux527 - aux530))
-2134 2149 0
-2133 2147 0
-2128 2149 0
-2128 -2134 2147 0
-2128 -2133 2145 0
-2127 2147 0
-2127 -2134 2145 0
-2127 -2133 2144 0
c ((SATLiteral(297) - aux531 + SATLiteral(567))<=0)
-567 -2151 0
-297 -2151 0
-297 -567 -2152 0
c (0<=(SATLiteral(297) - aux531 + SATLiteral(567)))
567 2152 0
297 2152 0
297 567 2151 0
c ((SATLiteral(972) - aux532 + SATLiteral(837))<=0)
-837 -2154 0
-972 -2154 0
-972 -837 -2155 0
c (0<=(SATLiteral(972) - aux532 + SATLiteral(837)))
837 2155 0
972 2155 0
972 837 2154 0
c (( - aux533 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2157 0
-702 -2157 0
-702 -162 -2158 0
c (0<=( - aux533 + SATLiteral(702) + SATLiteral(162)))
162 2158 0
702 2158 0
702 162 2157 0
c (( - aux534 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2160 0
-432 -2160 0
-432 -1107 -2161 0
c (0<=( - aux534 + SATLiteral(432) + SATLiteral(1107)))
1107 2161 0
432 2161 0
432 1107 2160 0
c ((aux534 - aux535 + SATLiteral(27))<=0)
2160 -2163 0
2161 -2164 0
-27 -2163 0
-27 2160 -2164 0
-27 2161 -2166 0
c (0<=(aux534 - aux535 + SATLiteral(27)))
-2161 2166 0
-2160 2164 0
27 2166 0
27 -2161 2164 0
27 -2160 2163 0
c ((aux531 + aux533 - aux536)<=0)
2157 -2168 0
2158 -2169 0
2151 -2168 0
2151 2157 -2169 0
2151 2158 -2171 0
2152 -2169 0
2152 2157 -2171 0
2152 2158 -2173 0
c (0<=(aux531 + aux533 - aux536))
-2158 2173 0
-2157 2171 0
-2152 2173 0
-2152 -2158 2171 0
-2152 -2157 2169 0
-2151 2171 0
-2151 -2158 2169 0
-2151 -2157 2168 0
c ((SATLiteral(299) - aux537 + SATLiteral(569))<=0)
-569 -2175 0
-299 -2175 0
-299 -569 -2176 0
c (0<=(SATLiteral(299) - aux537 + SATLiteral(569)))
569 2176 0
299 2176 0
299 569 2175 0
c ((SATLiteral(974) - aux538 + SATLiteral(839))<=0)
-839 -2178 0
-974 -2178 0
-974 -839 -2179 0
c (0<=(SATLiteral(974) - aux538 + SATLiteral(839)))
839 2179 0
974 2179 0
974 839 2178 0
c (( - aux539 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2181 0
-704 -2181 0
-704 -164 -2182 0
c (0<=( - aux539 + SATLiteral(704) + SATLiteral(164)))
164 2182 0
704 2182 0
704 164 2181 0
c (( - aux540 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2184 0
-434 -2184 0
-434 -1109 -2185 0
c (0<=( - aux540 + SATLiteral(434) + SATLiteral(1109)))
1109 2185 0
434 2185 0
434 1109 2184 0
c ((aux540 - aux541 + SATLiteral(29))<=0)
2184 -2187 0
2185 -2188 0
-29 -2187 0
-29 2184 -2188 0
-29 2185 -2190 0
c (0<=(aux540 - aux541 + SATLiteral(29)))
-2185 2190 0
-2184 2188 0
29 2190 0
29 -2185 2188 0
29 -2184 2187 0
c ((aux537 + aux539 - aux542)<=0)
2181 -2192 0
2182 -2193 0
2175 -2192 0
2175 2181 -2193 0
2175 2182 -2195 0
2176 -2193 0
2176 2181 -2195 0
2176 2182 -2197 0
c (0<=(aux537 + aux539 - aux542))
-2182 2197 0
-2181 2195 0
-2176 2197 0
-2176 -2182 2195 0
-2176 -2181 2193 0
-2175 2195 0
-2175 -2182 2193 0
-2175 -2181 2192 0
c ((SATLiteral(301) - aux543 + SATLiteral(571))<=0)
-571 -2199 0
-301 -2199 0
-301 -571 -2200 0
c (0<=(SATLiteral(301) - aux543 + SATLiteral(571)))
571 2200 0
301 2200 0
301 571 2199 0
c ((SATLiteral(976) - aux544 + SATLiteral(841))<=0)
-841 -2202 0
-976 -2202 0
-976 -841 -2203 0
c (0<=(SATLiteral(976) - aux544 + SATLiteral(841)))
841 2203 0
976 2203 0
976 841 2202 0
c (( - aux545 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2205 0
-706 -2205 0
-706 -166 -2206 0
c (0<=( - aux545 + SATLiteral(706) + SATLiteral(166)))
166 2206 0
706 2206 0
706 166 2205 0
c (( - aux546 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2208 0
-436 -2208 0
-436 -1111 -2209 0
c (0<=( - aux546 + SATLiteral(436) + SATLiteral(1111)))
1111 2209 0
436 2209 0
436 1111 2208 0
c ((aux546 - aux547 + SATLiteral(31))<=0)
2208 -2211 0
2209 -2212 0
-31 -2211 0
-31 2208 -2212 0
-31 2209 -2214 0
c (0<=(aux546 - aux547 + SATLiteral(31)))
-2209 2214 0
-2208 2212 0
31 2214 0
31 -2209 2212 0
31 -2208 2211 0
c ((aux543 + aux545 - aux548)<=0)
2205 -2216 0
2206 -2217 0
2199 -2216 0
2199 2205 -2217 0
2199 2206 -2219 0
2200 -2217 0
2200 2205 -2219 0
2200 2206 -2221 0
c (0<=(aux543 + aux545 - aux548))
-2206 2221 0
-2205 2219 0
-2200 2221 0
-2200 -2206 2219 0
-2200 -2205 2217 0
-2199 2219 0
-2199 -2206 2217 0
-2199 -2205 2216 0
c ((SATLiteral(-300) - aux549 + SATLiteral(-570))<=0)
570 -2223 0
300 -2223 0
300 570 -2224 0
c (0<=(SATLiteral(-300) - aux549 + SATLiteral(-570)))
-570 2224 0
-300 2224 0
-300 -570 2223 0
c ((SATLiteral(-975) - aux550 + SATLiteral(-840))<=0)
840 -2226 0
975 -2226 0
975 840 -2227 0
c (0<=(SATLiteral(-975) - aux550 + SATLiteral(-840)))
-840 2227 0
-975 2227 0
-975 -840 2226 0
c (( - aux551 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2229 0
705 -2229 0
705 165 -2230 0
c (0<=( - aux551 + SATLiteral(-705) + SATLiteral(-165)))
-165 2230 0
-705 2230 0
-705 -165 2229 0
c (( - aux552 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2232 0
435 -2232 0
435 1110 -2233 0
c (0<=( - aux552 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2233 0
-435 2233 0
-435 -1110 2232 0
c ((aux552 - aux553 + SATLiteral(-30))<=0)
2232 -2235 0
2233 -2236 0
30 -2235 0
30 2232 -2236 0
30 2233 -2238 0
c (0<=(aux552 - aux553 + SATLiteral(-30)))
-2233 2238 0
-2232 2236 0
-30 2238 0
-30 -2233 2236 0
-30 -2232 2235 0
c ((aux549 + aux551 - aux554)<=0)
2229 -2240 0
2230 -2241 0
2223 -2240 0
2223 2229 -2241 0
2223 2230 -2243 0
2224 -2241 0
2224 2229 -2243 0
2224 2230 -2245 0
c (0<=(aux549 + aux551 - aux554))
-2230 2245 0
-2229 2243 0
-2224 2245 0
-2224 -2230 2243 0
-2224 -2229 2241 0
-2223 2243 0
-2223 -2230 2241 0
-2223 -2229 2240 0
c ((SATLiteral(302) - aux555 + SATLiteral(572))<=0)
-572 -2247 0
-302 -2247 0
-302 -572 -2248 0
c (0<=(SATLiteral(302) - aux555 + SATLiteral(572)))
572 2248 0
302 2248 0
302 572 2247 0
c ((SATLiteral(977) - aux556 + SATLiteral(842))<=0)
-842 -2250 0
-977 -2250 0
-977 -842 -2251 0
c (0<=(SATLiteral(977) - aux556 + SATLiteral(842)))
842 2251 0
977 2251 0
977 842 2250 0
c (( - aux557 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2253 0
-707 -2253 0
-707 -167 -2254 0
c (0<=( - aux557 + SATLiteral(707) + SATLiteral(167)))
167 2254 0
707 2254 0
707 167 2253 0
c (( - aux558 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2256 0
-437 -2256 0
-437 -1112 -2257 0
c (0<=( - aux558 + SATLiteral(437) + SATLiteral(1112)))
1112 2257 0
437 2257 0
437 1112 2256 0
c ((aux558 - aux559 + SATLiteral(32))<=0)
2256 -2259 0
2257 -2260 0
-32 -2259 0
-32 2256 -2260 0
-32 2257 -2262 0
c (0<=(aux558 - aux559 + SATLiteral(32)))
-2257 2262 0
-2256 2260 0
32 2262 0
32 -2257 2260 0
32 -2256 2259 0
c ((aux555 + aux557 - aux560)<=0)
2253 -2264 0
2254 -2265 0
2247 -2264 0
2247 2253 -2265 0
2247 2254 -2267 0
2248 -2265 0
2248 2253 -2267 0
2248 2254 -2269 0
c (0<=(aux555 + aux557 - aux560))
-2254 2269 0
-2253 2267 0
-2248 2269 0
-2248 -2254 2267 0
-2248 -2253 2265 0
-2247 2267 0
-2247 -2254 2265 0
-2247 -2253 2264 0
c ((SATLiteral(304) - aux561 + SATLiteral(574))<=0)
-574 -2271 0
-304 -2271 0
-304 -574 -2272 0
c (0<=(SATLiteral(304) - aux561 + SATLiteral(574)))
574 2272 0
304 2272 0
304 574 2271 0
c ((SATLiteral(979) - aux562 + SATLiteral(844))<=0)
-844 -2274 0
-979 -2274 0
-979 -844 -2275 0
c (0<=(SATLiteral(979) - aux562 + SATLiteral(844)))
844 2275 0
979 2275 0
979 844 2274 0
c (( - aux563 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2277 0
-709 -2277 0
-709 -169 -2278 0
c (0<=( - aux563 + SATLiteral(709) + SATLiteral(169)))
169 2278 0
709 2278 0
709 169 2277 0
c (( - aux564 + SATLiteral(439) + SATLiteral(1113))<=0)
-1113 -2280 0
-439 -2280 0
-439 -1113 -2281 0
c (0<=( - aux564 + SATLiteral(439) + SATLiteral(1113)))
1113 2281 0
439 2281 0
439 1113 2280 0
c ((aux564 - aux565 + SATLiteral(34))<=0)
2280 -2283 0
2281 -2284 0
-34 -2283 0
-34 2280 -2284 0
-34 2281 -2286 0
c (0<=(aux564 - aux565 + SATLiteral(34)))
-2281 2286 0
-2280 2284 0
34 2286 0
34 -2281 2284 0
34 -2280 2283 0
c ((aux561 + aux563 - aux566)<=0)
2277 -2288 0
2278 -2289 0
2271 -2288 0
2271 2277 -2289 0
2271 2278 -2291 0
2272 -2289 0
2272 2277 -2291 0
2272 2278 -2293 0
c (0<=(aux561 + aux563 - aux566))
-2278 2293 0
-2277 2291 0
-2272 2293 0
-2272 -2278 2291 0
-2272 -2277 2289 0
-2271 2291 0
-2271 -2278 2289 0
-2271 -2277 2288 0
c ((SATLiteral(306) - aux567 + SATLiteral(576))<=0)
-576 -2295 0
-306 -2295 0
-306 -576 -2296 0
c (0<=(SATLiteral(306) - aux567 + SATLiteral(576)))
576 2296 0
306 2296 0
306 576 2295 0
c ((SATLiteral(981) - aux568 + SATLiteral(846))<=0)
-846 -2298 0
-981 -2298 0
-981 -846 -2299 0
c (0<=(SATLiteral(981) - aux568 + SATLiteral(846)))
846 2299 0
981 2299 0
981 846 2298 0
c (( - aux569 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2301 0
-711 -2301 0
-711 -171 -2302 0
c (0<=( - aux569 + SATLiteral(711) + SATLiteral(171)))
171 2302 0
711 2302 0
711 171 2301 0
c (( - aux570 + SATLiteral(441) + SATLiteral(1114))<=0)
-1114 -2304 0
-441 -2304 0
-441 -1114 -2305 0
c (0<=( - aux570 + SATLiteral(441) + SATLiteral(1114)))
1114 2305 0
441 2305 0
441 1114 2304 0
c ((aux570 - aux571 + SATLiteral(36))<=0)
2304 -2307 0
2305 -2308 0
-36 -2307 0
-36 2304 -2308 0
-36 2305 -2310 0
c (0<=(aux570 - aux571 + SATLiteral(36)))
-2305 2310 0
-2304 2308 0
36 2310 0
36 -2305 2308 0
36 -2304 2307 0
c ((aux567 + aux569 - aux572)<=0)
2301 -2312 0
2302 -2313 0
2295 -2312 0
2295 2301 -2313 0
2295 2302 -2315 0
2296 -2313 0
2296 2301 -2315 0
2296 2302 -2317 0
c (0<=(aux567 + aux569 - aux572))
-2302 2317 0
-2301 2315 0
-2296 2317 0
-2296 -2302 2315 0
-2296 -2301 2313 0
-2295 2315 0
-2295 -2302 2313 0
-2295 -2301 2312 0
c ((SATLiteral(308) - aux573 + SATLiteral(578))<=0)
-578 -2319 0
-308 -2319 0
-308 -578 -2320 0
c (0<=(SATLiteral(308) - aux573 + SATLiteral(578)))
578 2320 0
308 2320 0
308 578 2319 0
c ((SATLiteral(983) - aux574 + SATLiteral(848))<=0)
-848 -2322 0
-983 -2322 0
-983 -848 -2323 0
c (0<=(SATLiteral(983) - aux574 + SATLiteral(848)))
848 2323 0
983 2323 0
983 848 2322 0
c (( - aux575 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2325 0
-713 -2325 0
-713 -173 -2326 0
c (0<=( - aux575 + SATLiteral(713) + SATLiteral(173)))
173 2326 0
713 2326 0
713 173 2325 0
c (( - aux576 + SATLiteral(443) + SATLiteral(1115))<=0)
-1115 -2328 0
-443 -2328 0
-443 -1115 -2329 0
c (0<=( - aux576 + SATLiteral(443) + SATLiteral(1115)))
1115 2329 0
443 2329 0
443 1115 2328 0
c ((aux576 - aux577 + SATLiteral(38))<=0)
2328 -2331 0
2329 -2332 0
-38 -2331 0
-38 2328 -2332 0
-38 2329 -2334 0
c (0<=(aux576 - aux577 + SATLiteral(38)))
-2329 2334 0
-2328 2332 0
38 2334 0
38 -2329 2332 0
38 -2328 2331 0
c ((aux573 + aux575 - aux578)<=0)
2325 -2336 0
2326 -2337 0
2319 -2336 0
2319 2325 -2337 0
2319 2326 -2339 0
2320 -2337 0
2320 2325 -2339 0
2320 2326 -2341 0
c (0<=(aux573 + aux575 - aux578))
-2326 2341 0
-2325 2339 0
-2320 2341 0
-2320 -2326 2339 0
-2320 -2325 2337 0
-2319 2339 0
-2319 -2326 2337 0
-2319 -2325 2336 0
c ((SATLiteral(310) - aux579 + SATLiteral(580))<=0)
-580 -2343 0
-310 -2343 0
-310 -580 -2344 0
c (0<=(SATLiteral(310) - aux579 + SATLiteral(580)))
580 2344 0
310 2344 0
310 580 2343 0
c ((SATLiteral(985) - aux580 + SATLiteral(850))<=0)
-850 -2346 0
-985 -2346 0
-985 -850 -2347 0
c (0<=(SATLiteral(985) - aux580 + SATLiteral(850)))
850 2347 0
985 2347 0
985 850 2346 0
c (( - aux581 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2349 0
-715 -2349 0
-715 -175 -2350 0
c (0<=( - aux581 + SATLiteral(715) + SATLiteral(175)))
175 2350 0
715 2350 0
715 175 2349 0
c (( - aux582 + SATLiteral(445) + SATLiteral(1116))<=0)
-1116 -2352 0
-445 -2352 0
-445 -1116 -2353 0
c (0<=( - aux582 + SATLiteral(445) + SATLiteral(1116)))
1116 2353 0
445 2353 0
445 1116 2352 0
c ((aux582 - aux583 + SATLiteral(40))<=0)
2352 -2355 0
2353 -2356 0
-40 -2355 0
-40 2352 -2356 0
-40 2353 -2358 0
c (0<=(aux582 - aux583 + SATLiteral(40)))
-2353 2358 0
-2352 2356 0
40 2358 0
40 -2353 2356 0
40 -2352 2355 0
c ((aux579 + aux581 - aux584)<=0)
2349 -2360 0
2350 -2361 0
2343 -2360 0
2343 2349 -2361 0
2343 2350 -2363 0
2344 -2361 0
2344 2349 -2363 0
2344 2350 -2365 0
c (0<=(aux579 + aux581 - aux584))
-2350 2365 0
-2349 2363 0
-2344 2365 0
-2344 -2350 2363 0
-2344 -2349 2361 0
-2343 2363 0
-2343 -2350 2361 0
-2343 -2349 2360 0
c ((SATLiteral(312) - aux585 + SATLiteral(582))<=0)
-582 -2367 0
-312 -2367 0
-312 -582 -2368 0
c (0<=(SATLiteral(312) - aux585 + SATLiteral(582)))
582 2368 0
312 2368 0
312 582 2367 0
c ((SATLiteral(987) - aux586 + SATLiteral(852))<=0)
-852 -2370 0
-987 -2370 0
-987 -852 -2371 0
c (0<=(SATLiteral(987) - aux586 + SATLiteral(852)))
852 2371 0
987 2371 0
987 852 2370 0
c (( - aux587 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2373 0
-717 -2373 0
-717 -177 -2374 0
c (0<=( - aux587 + SATLiteral(717) + SATLiteral(177)))
177 2374 0
717 2374 0
717 177 2373 0
c (( - aux588 + SATLiteral(447) + SATLiteral(1117))<=0)
-1117 -2376 0
-447 -2376 0
-447 -1117 -2377 0
c (0<=( - aux588 + SATLiteral(447) + SATLiteral(1117)))
1117 2377 0
447 2377 0
447 1117 2376 0
c ((aux588 - aux589 + SATLiteral(42))<=0)
2376 -2379 0
2377 -2380 0
-42 -2379 0
-42 2376 -2380 0
-42 2377 -2382 0
c (0<=(aux588 - aux589 + SATLiteral(42)))
-2377 2382 0
-2376 2380 0
42 2382 0
42 -2377 2380 0
42 -2376 2379 0
c ((aux585 + aux587 - aux590)<=0)
2373 -2384 0
2374 -2385 0
2367 -2384 0
2367 2373 -2385 0
2367 2374 -2387 0
2368 -2385 0
2368 2373 -2387 0
2368 2374 -2389 0
c (0<=(aux585 + aux587 - aux590))
-2374 2389 0
-2373 2387 0
-2368 2389 0
-2368 -2374 2387 0
-2368 -2373 2385 0
-2367 2387 0
-2367 -2374 2385 0
-2367 -2373 2384 0
c ((SATLiteral(314) - aux591 + SATLiteral(584))<=0)
-584 -2391 0
-314 -2391 0
-314 -584 -2392 0
c (0<=(SATLiteral(314) - aux591 + SATLiteral(584)))
584 2392 0
314 2392 0
314 584 2391 0
c ((SATLiteral(989) - aux592 + SATLiteral(854))<=0)
-854 -2394 0
-989 -2394 0
-989 -854 -2395 0
c (0<=(SATLiteral(989) - aux592 + SATLiteral(854)))
854 2395 0
989 2395 0
989 854 2394 0
c (( - aux593 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2397 0
-719 -2397 0
-719 -179 -2398 0
c (0<=( - aux593 + SATLiteral(719) + SATLiteral(179)))
179 2398 0
719 2398 0
719 179 2397 0
c (( - aux594 + SATLiteral(449) + SATLiteral(1118))<=0)
-1118 -2400 0
-449 -2400 0
-449 -1118 -2401 0
c (0<=( - aux594 + SATLiteral(449) + SATLiteral(1118)))
1118 2401 0
449 2401 0
449 1118 2400 0
c ((aux594 - aux595 + SATLiteral(44))<=0)
2400 -2403 0
2401 -2404 0
-44 -2403 0
-44 2400 -2404 0
-44 2401 -2406 0
c (0<=(aux594 - aux595 + SATLiteral(44)))
-2401 2406 0
-2400 2404 0
44 2406 0
44 -2401 2404 0
44 -2400 2403 0
c ((aux591 + aux593 - aux596)<=0)
2397 -2408 0
2398 -2409 0
2391 -2408 0
2391 2397 -2409 0
2391 2398 -2411 0
2392 -2409 0
2392 2397 -2411 0
2392 2398 -2413 0
c (0<=(aux591 + aux593 - aux596))
-2398 2413 0
-2397 2411 0
-2392 2413 0
-2392 -2398 2411 0
-2392 -2397 2409 0
-2391 2411 0
-2391 -2398 2409 0
-2391 -2397 2408 0
c ((SATLiteral(316) - aux597 + SATLiteral(586))<=0)
-586 -2415 0
-316 -2415 0
-316 -586 -2416 0
c (0<=(SATLiteral(316) - aux597 + SATLiteral(586)))
586 2416 0
316 2416 0
316 586 2415 0
c ((SATLiteral(991) - aux598 + SATLiteral(856))<=0)
-856 -2418 0
-991 -2418 0
-991 -856 -2419 0
c (0<=(SATLiteral(991) - aux598 + SATLiteral(856)))
856 2419 0
991 2419 0
991 856 2418 0
c (( - aux599 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2421 0
-721 -2421 0
-721 -181 -2422 0
c (0<=( - aux599 + SATLiteral(721) + SATLiteral(181)))
181 2422 0
721 2422 0
721 181 2421 0
c (( - aux600 + SATLiteral(451) + SATLiteral(1119))<=0)
-1119 -2424 0
-451 -2424 0
-451 -1119 -2425 0
c (0<=( - aux600 + SATLiteral(451) + SATLiteral(1119)))
1119 2425 0
451 2425 0
451 1119 2424 0
c ((aux600 - aux601 + SATLiteral(46))<=0)
2424 -2427 0
2425 -2428 0
-46 -2427 0
-46 2424 -2428 0
-46 2425 -2430 0
c (0<=(aux600 - aux601 + SATLiteral(46)))
-2425 2430 0
-2424 2428 0
46 2430 0
46 -2425 2428 0
46 -2424 2427 0
c ((aux597 + aux599 - aux602)<=0)
2421 -2432 0
2422 -2433 0
2415 -2432 0
2415 2421 -2433 0
2415 2422 -2435 0
2416 -2433 0
2416 2421 -2435 0
2416 2422 -2437 0
c (0<=(aux597 + aux599 - aux602))
-2422 2437 0
-2421 2435 0
-2416 2437 0
-2416 -2422 2435 0
-2416 -2421 2433 0
-2415 2435 0
-2415 -2422 2433 0
-2415 -2421 2432 0
c ((SATLiteral(-315) - aux603 + SATLiteral(-585))<=0)
585 -2439 0
315 -2439 0
315 585 -2440 0
c (0<=(SATLiteral(-315) - aux603 + SATLiteral(-585)))
-585 2440 0
-315 2440 0
-315 -585 2439 0
c ((SATLiteral(-990) - aux604 + SATLiteral(-855))<=0)
855 -2442 0
990 -2442 0
990 855 -2443 0
c (0<=(SATLiteral(-990) - aux604 + SATLiteral(-855)))
-855 2443 0
-990 2443 0
-990 -855 2442 0
c (( - aux605 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2445 0
720 -2445 0
720 180 -2446 0
c (0<=( - aux605 + SATLiteral(-720) + SATLiteral(-180)))
-180 2446 0
-720 2446 0
-720 -180 2445 0
c (( - aux606 + SATLiteral(-450) + SATLiteral(1120))<=0)
-1120 -2448 0
450 -2448 0
450 -1120 -2449 0
c (0<=( - aux606 + SATLiteral(-450) + SATLiteral(1120)))
1120 2449 0
-450 2449 0
-450 1120 2448 0
c ((aux606 - aux607 + SATLiteral(-45))<=0)
2448 -2451 0
2449 -2452 0
45 -2451 0
45 2448 -2452 0
45 2449 -2454 0
c (0<=(aux606 - aux607 + SATLiteral(-45)))
-2449 2454 0
-2448 2452 0
-45 2454 0
-45 -2449 2452 0
-45 -2448 2451 0
c ((aux603 + aux605 - aux608)<=0)
2445 -2456 0
2446 -2457 0
2439 -2456 0
2439 2445 -2457 0
2439 2446 -2459 0
2440 -2457 0
2440 2445 -2459 0
2440 2446 -2461 0
c (0<=(aux603 + aux605 - aux608))
-2446 2461 0
-2445 2459 0
-2440 2461 0
-2440 -2446 2459 0
-2440 -2445 2457 0
-2439 2459 0
-2439 -2446 2457 0
-2439 -2445 2456 0
c ((SATLiteral(317) - aux609 + SATLiteral(587))<=0)
-587 -2463 0
-317 -2463 0
-317 -587 -2464 0
c (0<=(SATLiteral(317) - aux609 + SATLiteral(587)))
587 2464 0
317 2464 0
317 587 2463 0
c ((SATLiteral(992) - aux610 + SATLiteral(857))<=0)
-857 -2466 0
-992 -2466 0
-992 -857 -2467 0
c (0<=(SATLiteral(992) - aux610 + SATLiteral(857)))
857 2467 0
992 2467 0
992 857 2466 0
c (( - aux611 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2469 0
-722 -2469 0
-722 -182 -2470 0
c (0<=( - aux611 + SATLiteral(722) + SATLiteral(182)))
182 2470 0
722 2470 0
722 182 2469 0
c (( - aux612 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2472 0
-452 -2472 0
-452 -1127 -2473 0
c (0<=( - aux612 + SATLiteral(452) + SATLiteral(1127)))
1127 2473 0
452 2473 0
452 1127 2472 0
c ((aux612 - aux613 + SATLiteral(47))<=0)
2472 -2475 0
2473 -2476 0
-47 -2475 0
-47 2472 -2476 0
-47 2473 -2478 0
c (0<=(aux612 - aux613 + SATLiteral(47)))
-2473 2478 0
-2472 2476 0
47 2478 0
47 -2473 2476 0
47 -2472 2475 0
c ((aux609 + aux611 - aux614)<=0)
2469 -2480 0
2470 -2481 0
2463 -2480 0
2463 2469 -2481 0
2463 2470 -2483 0
2464 -2481 0
2464 2469 -2483 0
2464 2470 -2485 0
c (0<=(aux609 + aux611 - aux614))
-2470 2485 0
-2469 2483 0
-2464 2485 0
-2464 -2470 2483 0
-2464 -2469 2481 0
-2463 2483 0
-2463 -2470 2481 0
-2463 -2469 2480 0
c ((SATLiteral(319) - aux615 + SATLiteral(589))<=0)
-589 -2487 0
-319 -2487 0
-319 -589 -2488 0
c (0<=(SATLiteral(319) - aux615 + SATLiteral(589)))
589 2488 0
319 2488 0
319 589 2487 0
c ((SATLiteral(994) - aux616 + SATLiteral(859))<=0)
-859 -2490 0
-994 -2490 0
-994 -859 -2491 0
c (0<=(SATLiteral(994) - aux616 + SATLiteral(859)))
859 2491 0
994 2491 0
994 859 2490 0
c (( - aux617 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2493 0
-724 -2493 0
-724 -184 -2494 0
c (0<=( - aux617 + SATLiteral(724) + SATLiteral(184)))
184 2494 0
724 2494 0
724 184 2493 0
c (( - aux618 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2496 0
-454 -2496 0
-454 -1129 -2497 0
c (0<=( - aux618 + SATLiteral(454) + SATLiteral(1129)))
1129 2497 0
454 2497 0
454 1129 2496 0
c ((aux618 - aux619 + SATLiteral(49))<=0)
2496 -2499 0
2497 -2500 0
-49 -2499 0
-49 2496 -2500 0
-49 2497 -2502 0
c (0<=(aux618 - aux619 + SATLiteral(49)))
-2497 2502 0
-2496 2500 0
49 2502 0
49 -2497 2500 0
49 -2496 2499 0
c ((aux615 + aux617 - aux620)<=0)
2493 -2504 0
2494 -2505 0
2487 -2504 0
2487 2493 -2505 0
2487 2494 -2507 0
2488 -2505 0
2488 2493 -2507 0
2488 2494 -2509 0
c (0<=(aux615 + aux617 - aux620))
-2494 2509 0
-2493 2507 0
-2488 2509 0
-2488 -2494 2507 0
-2488 -2493 2505 0
-2487 2507 0
-2487 -2494 2505 0
-2487 -2493 2504 0
c ((SATLiteral(321) - aux621 + SATLiteral(591))<=0)
-591 -2511 0
-321 -2511 0
-321 -591 -2512 0
c (0<=(SATLiteral(321) - aux621 + SATLiteral(591)))
591 2512 0
321 2512 0
321 591 2511 0
c ((SATLiteral(996) - aux622 + SATLiteral(861))<=0)
-861 -2514 0
-996 -2514 0
-996 -861 -2515 0
c (0<=(SATLiteral(996) - aux622 + SATLiteral(861)))
861 2515 0
996 2515 0
996 861 2514 0
c (( - aux623 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2517 0
-726 -2517 0
-726 -186 -2518 0
c (0<=( - aux623 + SATLiteral(726) + SATLiteral(186)))
186 2518 0
726 2518 0
726 186 2517 0
c (( - aux624 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2520 0
-456 -2520 0
-456 -1131 -2521 0
c (0<=( - aux624 + SATLiteral(456) + SATLiteral(1131)))
1131 2521 0
456 2521 0
456 1131 2520 0
c ((aux624 - aux625 + SATLiteral(51))<=0)
2520 -2523 0
2521 -2524 0
-51 -2523 0
-51 2520 -2524 0
-51 2521 -2526 0
c (0<=(aux624 - aux625 + SATLiteral(51)))
-2521 2526 0
-2520 2524 0
51 2526 0
51 -2521 2524 0
51 -2520 2523 0
c ((aux621 + aux623 - aux626)<=0)
2517 -2528 0
2518 -2529 0
2511 -2528 0
2511 2517 -2529 0
2511 2518 -2531 0
2512 -2529 0
2512 2517 -2531 0
2512 2518 -2533 0
c (0<=(aux621 + aux623 - aux626))
-2518 2533 0
-2517 2531 0
-2512 2533 0
-2512 -2518 2531 0
-2512 -2517 2529 0
-2511 2531 0
-2511 -2518 2529 0
-2511 -2517 2528 0
c ((SATLiteral(323) - aux627 + SATLiteral(593))<=0)
-593 -2535 0
-323 -2535 0
-323 -593 -2536 0
c (0<=(SATLiteral(323) - aux627 + SATLiteral(593)))
593 2536 0
323 2536 0
323 593 2535 0
c ((SATLiteral(998) - aux628 + SATLiteral(863))<=0)
-863 -2538 0
-998 -2538 0
-998 -863 -2539 0
c (0<=(SATLiteral(998) - aux628 + SATLiteral(863)))
863 2539 0
998 2539 0
998 863 2538 0
c (( - aux629 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2541 0
-728 -2541 0
-728 -188 -2542 0
c (0<=( - aux629 + SATLiteral(728) + SATLiteral(188)))
188 2542 0
728 2542 0
728 188 2541 0
c (( - aux630 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2544 0
-458 -2544 0
-458 -1133 -2545 0
c (0<=( - aux630 + SATLiteral(458) + SATLiteral(1133)))
1133 2545 0
458 2545 0
458 1133 2544 0
c ((aux630 - aux631 + SATLiteral(53))<=0)
2544 -2547 0
2545 -2548 0
-53 -2547 0
-53 2544 -2548 0
-53 2545 -2550 0
c (0<=(aux630 - aux631 + SATLiteral(53)))
-2545 2550 0
-2544 2548 0
53 2550 0
53 -2545 2548 0
53 -2544 2547 0
c ((aux627 + aux629 - aux632)<=0)
2541 -2552 0
2542 -2553 0
2535 -2552 0
2535 2541 -2553 0
2535 2542 -2555 0
2536 -2553 0
2536 2541 -2555 0
2536 2542 -2557 0
c (0<=(aux627 + aux629 - aux632))
-2542 2557 0
-2541 2555 0
-2536 2557 0
-2536 -2542 2555 0
-2536 -2541 2553 0
-2535 2555 0
-2535 -2542 2553 0
-2535 -2541 2552 0
c ((SATLiteral(325) - aux633 + SATLiteral(595))<=0)
-595 -2559 0
-325 -2559 0
-325 -595 -2560 0
c (0<=(SATLiteral(325) - aux633 + SATLiteral(595)))
595 2560 0
325 2560 0
325 595 2559 0
c ((SATLiteral(1000) - aux634 + SATLiteral(865))<=0)
-865 -2562 0
-1000 -2562 0
-1000 -865 -2563 0
c (0<=(SATLiteral(1000) - aux634 + SATLiteral(865)))
865 2563 0
1000 2563 0
1000 865 2562 0
c (( - aux635 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2565 0
-730 -2565 0
-730 -190 -2566 0
c (0<=( - aux635 + SATLiteral(730) + SATLiteral(190)))
190 2566 0
730 2566 0
730 190 2565 0
c (( - aux636 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2568 0
-460 -2568 0
-460 -1135 -2569 0
c (0<=( - aux636 + SATLiteral(460) + SATLiteral(1135)))
1135 2569 0
460 2569 0
460 1135 2568 0
c ((aux636 - aux637 + SATLiteral(55))<=0)
2568 -2571 0
2569 -2572 0
-55 -2571 0
-55 2568 -2572 0
-55 2569 -2574 0
c (0<=(aux636 - aux637 + SATLiteral(55)))
-2569 2574 0
-2568 2572 0
55 2574 0
55 -2569 2572 0
55 -2568 2571 0
c ((aux633 + aux635 - aux638)<=0)
2565 -2576 0
2566 -2577 0
2559 -2576 0
2559 2565 -2577 0
2559 2566 -2579 0
2560 -2577 0
2560 2565 -2579 0
2560 2566 -2581 0
c (0<=(aux633 + aux635 - aux638))
-2566 2581 0
-2565 2579 0
-2560 2581 0
-2560 -2566 2579 0
-2560 -2565 2577 0
-2559 2579 0
-2559 -2566 2577 0
-2559 -2565 2576 0
c ((SATLiteral(327) - aux639 + SATLiteral(597))<=0)
-597 -2583 0
-327 -2583 0
-327 -597 -2584 0
c (0<=(SATLiteral(327) - aux639 + SATLiteral(597)))
597 2584 0
327 2584 0
327 597 2583 0
c ((SATLiteral(1002) - aux640 + SATLiteral(867))<=0)
-867 -2586 0
-1002 -2586 0
-1002 -867 -2587 0
c (0<=(SATLiteral(1002) - aux640 + SATLiteral(867)))
867 2587 0
1002 2587 0
1002 867 2586 0
c (( - aux641 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2589 0
-732 -2589 0
-732 -192 -2590 0
c (0<=( - aux641 + SATLiteral(732) + SATLiteral(192)))
192 2590 0
732 2590 0
732 192 2589 0
c (( - aux642 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2592 0
-462 -2592 0
-462 -1137 -2593 0
c (0<=( - aux642 + SATLiteral(462) + SATLiteral(1137)))
1137 2593 0
462 2593 0
462 1137 2592 0
c ((aux642 - aux643 + SATLiteral(57))<=0)
2592 -2595 0
2593 -2596 0
-57 -2595 0
-57 2592 -2596 0
-57 2593 -2598 0
c (0<=(aux642 - aux643 + SATLiteral(57)))
-2593 2598 0
-2592 2596 0
57 2598 0
57 -2593 2596 0
57 -2592 2595 0
c ((aux639 + aux641 - aux644)<=0)
2589 -2600 0
2590 -2601 0
2583 -2600 0
2583 2589 -2601 0
2583 2590 -2603 0
2584 -2601 0
2584 2589 -2603 0
2584 2590 -2605 0
c (0<=(aux639 + aux641 - aux644))
-2590 2605 0
-2589 2603 0
-2584 2605 0
-2584 -2590 2603 0
-2584 -2589 2601 0
-2583 2603 0
-2583 -2590 2601 0
-2583 -2589 2600 0
c ((SATLiteral(329) - aux645 + SATLiteral(599))<=0)
-599 -2607 0
-329 -2607 0
-329 -599 -2608 0
c (0<=(SATLiteral(329) - aux645 + SATLiteral(599)))
599 2608 0
329 2608 0
329 599 2607 0
c ((SATLiteral(1004) - aux646 + SATLiteral(869))<=0)
-869 -2610 0
-1004 -2610 0
-1004 -869 -2611 0
c (0<=(SATLiteral(1004) - aux646 + SATLiteral(869)))
869 2611 0
1004 2611 0
1004 869 2610 0
c (( - aux647 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2613 0
-734 -2613 0
-734 -194 -2614 0
c (0<=( - aux647 + SATLiteral(734) + SATLiteral(194)))
194 2614 0
734 2614 0
734 194 2613 0
c (( - aux648 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2616 0
-464 -2616 0
-464 -1139 -2617 0
c (0<=( - aux648 + SATLiteral(464) + SATLiteral(1139)))
1139 2617 0
464 2617 0
464 1139 2616 0
c ((aux648 - aux649 + SATLiteral(59))<=0)
2616 -2619 0
2617 -2620 0
-59 -2619 0
-59 2616 -2620 0
-59 2617 -2622 0
c (0<=(aux648 - aux649 + SATLiteral(59)))
-2617 2622 0
-2616 2620 0
59 2622 0
59 -2617 2620 0
59 -2616 2619 0
c ((aux645 + aux647 - aux650)<=0)
2613 -2624 0
2614 -2625 0
2607 -2624 0
2607 2613 -2625 0
2607 2614 -2627 0
2608 -2625 0
2608 2613 -2627 0
2608 2614 -2629 0
c (0<=(aux645 + aux647 - aux650))
-2614 2629 0
-2613 2627 0
-2608 2629 0
-2608 -2614 2627 0
-2608 -2613 2625 0
-2607 2627 0
-2607 -2614 2625 0
-2607 -2613 2624 0
c ((SATLiteral(331) - aux651 + SATLiteral(601))<=0)
-601 -2631 0
-331 -2631 0
-331 -601 -2632 0
c (0<=(SATLiteral(331) - aux651 + SATLiteral(601)))
601 2632 0
331 2632 0
331 601 2631 0
c ((SATLiteral(1006) - aux652 + SATLiteral(871))<=0)
-871 -2634 0
-1006 -2634 0
-1006 -871 -2635 0
c (0<=(SATLiteral(1006) - aux652 + SATLiteral(871)))
871 2635 0
1006 2635 0
1006 871 2634 0
c (( - aux653 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2637 0
-736 -2637 0
-736 -196 -2638 0
c (0<=( - aux653 + SATLiteral(736) + SATLiteral(196)))
196 2638 0
736 2638 0
736 196 2637 0
c (( - aux654 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2640 0
-466 -2640 0
-466 -1141 -2641 0
c (0<=( - aux654 + SATLiteral(466) + SATLiteral(1141)))
1141 2641 0
466 2641 0
466 1141 2640 0
c ((aux654 - aux655 + SATLiteral(61))<=0)
2640 -2643 0
2641 -2644 0
-61 -2643 0
-61 2640 -2644 0
-61 2641 -2646 0
c (0<=(aux654 - aux655 + SATLiteral(61)))
-2641 2646 0
-2640 2644 0
61 2646 0
61 -2641 2644 0
61 -2640 2643 0
c ((aux651 + aux653 - aux656)<=0)
2637 -2648 0
2638 -2649 0
2631 -2648 0
2631 2637 -2649 0
2631 2638 -2651 0
2632 -2649 0
2632 2637 -2651 0
2632 2638 -2653 0
c (0<=(aux651 + aux653 - aux656))
-2638 2653 0
-2637 2651 0
-2632 2653 0
-2632 -2638 2651 0
-2632 -2637 2649 0
-2631 2651 0
-2631 -2638 2649 0
-2631 -2637 2648 0
c ((SATLiteral(-330) - aux657 + SATLiteral(-600))<=0)
600 -2655 0
330 -2655 0
330 600 -2656 0
c (0<=(SATLiteral(-330) - aux657 + SATLiteral(-600)))
-600 2656 0
-330 2656 0
-330 -600 2655 0
c ((SATLiteral(-1005) - aux658 + SATLiteral(-870))<=0)
870 -2658 0
1005 -2658 0
1005 870 -2659 0
c (0<=(SATLiteral(-1005) - aux658 + SATLiteral(-870)))
-870 2659 0
-1005 2659 0
-1005 -870 2658 0
c (( - aux659 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2661 0
735 -2661 0
735 195 -2662 0
c (0<=( - aux659 + SATLiteral(-735) + SATLiteral(-195)))
-195 2662 0
-735 2662 0
-735 -195 2661 0
c (( - aux660 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2664 0
465 -2664 0
465 1140 -2665 0
c (0<=( - aux660 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2665 0
-465 2665 0
-465 -1140 2664 0
c ((aux660 - aux661 + SATLiteral(-60))<=0)
2664 -2667 0
2665 -2668 0
60 -2667 0
60 2664 -2668 0
60 2665 -2670 0
c (0<=(aux660 - aux661 + SATLiteral(-60)))
-2665 2670 0
-2664 2668 0
-60 2670 0
-60 -2665 2668 0
-60 -2664 2667 0
c ((aux657 + aux659 - aux662)<=0)
2661 -2672 0
2662 -2673 0
2655 -2672 0
2655 2661 -2673 0
2655 2662 -2675 0
2656 -2673 0
2656 2661 -2675 0
2656 2662 -2677 0
c (0<=(aux657 + aux659 - aux662))
-2662 2677 0
-2661 2675 0
-2656 2677 0
-2656 -2662 2675 0
-2656 -2661 2673 0
-2655 2675 0
-2655 -2662 2673 0
-2655 -2661 2672 0
c ((SATLiteral(332) - aux663 + SATLiteral(602))<=0)
-602 -2679 0
-332 -2679 0
-332 -602 -2680 0
c (0<=(SATLiteral(332) - aux663 + SATLiteral(602)))
602 2680 0
332 2680 0
332 602 2679 0
c ((SATLiteral(1007) - aux664 + SATLiteral(872))<=0)
-872 -2682 0
-1007 -2682 0
-1007 -872 -2683 0
c (0<=(SATLiteral(1007) - aux664 + SATLiteral(872)))
872 2683 0
1007 2683 0
1007 872 2682 0
c (( - aux665 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2685 0
-737 -2685 0
-737 -197 -2686 0
c (0<=( - aux665 + SATLiteral(737) + SATLiteral(197)))
197 2686 0
737 2686 0
737 197 2685 0
c (( - aux666 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2688 0
-467 -2688 0
-467 -1142 -2689 0
c (0<=( - aux666 + SATLiteral(467) + SATLiteral(1142)))
1142 2689 0
467 2689 0
467 1142 2688 0
c ((aux666 - aux667 + SATLiteral(62))<=0)
2688 -2691 0
2689 -2692 0
-62 -2691 0
-62 2688 -2692 0
-62 2689 -2694 0
c (0<=(aux666 - aux667 + SATLiteral(62)))
-2689 2694 0
-2688 2692 0
62 2694 0
62 -2689 2692 0
62 -2688 2691 0
c ((aux663 + aux665 - aux668)<=0)
2685 -2696 0
2686 -2697 0
2679 -2696 0
2679 2685 -2697 0
2679 2686 -2699 0
2680 -2697 0
2680 2685 -2699 0
2680 2686 -2701 0
c (0<=(aux663 + aux665 - aux668))
-2686 2701 0
-2685 2699 0
-2680 2701 0
-2680 -2686 2699 0
-2680 -2685 2697 0
-2679 2699 0
-2679 -2686 2697 0
-2679 -2685 2696 0
c ((SATLiteral(334) - aux669 + SATLiteral(604))<=0)
-604 -2703 0
-334 -2703 0
-334 -604 -2704 0
c (0<=(SATLiteral(334) - aux669 + SATLiteral(604)))
604 2704 0
334 2704 0
334 604 2703 0
c ((SATLiteral(1009) - aux670 + SATLiteral(874))<=0)
-874 -2706 0
-1009 -2706 0
-1009 -874 -2707 0
c (0<=(SATLiteral(1009) - aux670 + SATLiteral(874)))
874 2707 0
1009 2707 0
1009 874 2706 0
c (( - aux671 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2709 0
-739 -2709 0
-739 -199 -2710 0
c (0<=( - aux671 + SATLiteral(739) + SATLiteral(199)))
199 2710 0
739 2710 0
739 199 2709 0
c (( - aux672 + SATLiteral(469) + SATLiteral(1143))<=0)
-1143 -2712 0
-469 -2712 0
-469 -1143 -2713 0
c (0<=( - aux672 + SATLiteral(469) + SATLiteral(1143)))
1143 2713 0
469 2713 0
469 1143 2712 0
c ((aux672 - aux673 + SATLiteral(64))<=0)
2712 -2715 0
2713 -2716 0
-64 -2715 0
-64 2712 -2716 0
-64 2713 -2718 0
c (0<=(aux672 - aux673 + SATLiteral(64)))
-2713 2718 0
-2712 2716 0
64 2718 0
64 -2713 2716 0
64 -2712 2715 0
c ((aux669 + aux671 - aux674)<=0)
2709 -2720 0
2710 -2721 0
2703 -2720 0
2703 2709 -2721 0
2703 2710 -2723 0
2704 -2721 0
2704 2709 -2723 0
2704 2710 -2725 0
c (0<=(aux669 + aux671 - aux674))
-2710 2725 0
-2709 2723 0
-2704 2725 0
-2704 -2710 2723 0
-2704 -2709 2721 0
-2703 2723 0
-2703 -2710 2721 0
-2703 -2709 2720 0
c ((SATLiteral(336) - aux675 + SATLiteral(606))<=0)
-606 -2727 0
-336 -2727 0
-336 -606 -2728 0
c (0<=(SATLiteral(336) - aux675 + SATLiteral(606)))
606 2728 0
336 2728 0
336 606 2727 0
c ((SATLiteral(1011) - aux676 + SATLiteral(876))<=0)
-876 -2730 0
-1011 -2730 0
-1011 -876 -2731 0
c (0<=(SATLiteral(1011) - aux676 + SATLiteral(876)))
876 2731 0
1011 2731 0
1011 876 2730 0
c (( - aux677 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2733 0
-741 -2733 0
-741 -201 -2734 0
c (0<=( - aux677 + SATLiteral(741) + SATLiteral(201)))
201 2734 0
741 2734 0
741 201 2733 0
c (( - aux678 + SATLiteral(471) + SATLiteral(1144))<=0)
-1144 -2736 0
-471 -2736 0
-471 -1144 -2737 0
c (0<=( - aux678 + SATLiteral(471) + SATLiteral(1144)))
1144 2737 0
471 2737 0
471 1144 2736 0
c ((aux678 - aux679 + SATLiteral(66))<=0)
2736 -2739 0
2737 -2740 0
-66 -2739 0
-66 2736 -2740 0
-66 2737 -2742 0
c (0<=(aux678 - aux679 + SATLiteral(66)))
-2737 2742 0
-2736 2740 0
66 2742 0
66 -2737 2740 0
66 -2736 2739 0
c ((aux675 + aux677 - aux680)<=0)
2733 -2744 0
2734 -2745 0
2727 -2744 0
2727 2733 -2745 0
2727 2734 -2747 0
2728 -2745 0
2728 2733 -2747 0
2728 2734 -2749 0
c (0<=(aux675 + aux677 - aux680))
-2734 2749 0
-2733 2747 0
-2728 2749 0
-2728 -2734 2747 0
-2728 -2733 2745 0
-2727 2747 0
-2727 -2734 2745 0
-2727 -2733 2744 0
c ((SATLiteral(338) - aux681 + SATLiteral(608))<=0)
-608 -2751 0
-338 -2751 0
-338 -608 -2752 0
c (0<=(SATLiteral(338) - aux681 + SATLiteral(608)))
608 2752 0
338 2752 0
338 608 2751 0
c ((SATLiteral(1013) - aux682 + SATLiteral(878))<=0)
-878 -2754 0
-1013 -2754 0
-1013 -878 -2755 0
c (0<=(SATLiteral(1013) - aux682 + SATLiteral(878)))
878 2755 0
1013 2755 0
1013 878 2754 0
c (( - aux683 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2757 0
-743 -2757 0
-743 -203 -2758 0
c (0<=( - aux683 + SATLiteral(743) + SATLiteral(203)))
203 2758 0
743 2758 0
743 203 2757 0
c (( - aux684 + SATLiteral(473) + SATLiteral(1145))<=0)
-1145 -2760 0
-473 -2760 0
-473 -1145 -2761 0
c (0<=( - aux684 + SATLiteral(473) + SATLiteral(1145)))
1145 2761 0
473 2761 0
473 1145 2760 0
c ((aux684 - aux685 + SATLiteral(68))<=0)
2760 -2763 0
2761 -2764 0
-68 -2763 0
-68 2760 -2764 0
-68 2761 -2766 0
c (0<=(aux684 - aux685 + SATLiteral(68)))
-2761 2766 0
-2760 2764 0
68 2766 0
68 -2761 2764 0
68 -2760 2763 0
c ((aux681 + aux683 - aux686)<=0)
2757 -2768 0
2758 -2769 0
2751 -2768 0
2751 2757 -2769 0
2751 2758 -2771 0
2752 -2769 0
2752 2757 -2771 0
2752 2758 -2773 0
c (0<=(aux681 + aux683 - aux686))
-2758 2773 0
-2757 2771 0
-2752 2773 0
-2752 -2758 2771 0
-2752 -2757 2769 0
-2751 2771 0
-2751 -2758 2769 0
-2751 -2757 2768 0
c ((SATLiteral(340) - aux687 + SATLiteral(610))<=0)
-610 -2775 0
-340 -2775 0
-340 -610 -2776 0
c (0<=(SATLiteral(340) - aux687 + SATLiteral(610)))
610 2776 0
340 2776 0
340 610 2775 0
c ((SATLiteral(1015) - aux688 + SATLiteral(880))<=0)
-880 -2778 0
-1015 -2778 0
-1015 -880 -2779 0
c (0<=(SATLiteral(1015) - aux688 + SATLiteral(880)))
880 2779 0
1015 2779 0
1015 880 2778 0
c (( - aux689 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2781 0
-745 -2781 0
-745 -205 -2782 0
c (0<=( - aux689 + SATLiteral(745) + SATLiteral(205)))
205 2782 0
745 2782 0
745 205 2781 0
c (( - aux690 + SATLiteral(475) + SATLiteral(1146))<=0)
-1146 -2784 0
-475 -2784 0
-475 -1146 -2785 0
c (0<=( - aux690 + SATLiteral(475) + SATLiteral(1146)))
1146 2785 0
475 2785 0
475 1146 2784 0
c ((aux690 - aux691 + SATLiteral(70))<=0)
2784 -2787 0
2785 -2788 0
-70 -2787 0
-70 2784 -2788 0
-70 2785 -2790 0
c (0<=(aux690 - aux691 + SATLiteral(70)))
-2785 2790 0
-2784 2788 0
70 2790 0
70 -2785 2788 0
70 -2784 2787 0
c ((aux687 + aux689 - aux692)<=0)
2781 -2792 0
2782 -2793 0
2775 -2792 0
2775 2781 -2793 0
2775 2782 -2795 0
2776 -2793 0
2776 2781 -2795 0
2776 2782 -2797 0
c (0<=(aux687 + aux689 - aux692))
-2782 2797 0
-2781 2795 0
-2776 2797 0
-2776 -2782 2795 0
-2776 -2781 2793 0
-2775 2795 0
-2775 -2782 2793 0
-2775 -2781 2792 0
c ((SATLiteral(342) - aux693 + SATLiteral(612))<=0)
-612 -2799 0
-342 -2799 0
-342 -612 -2800 0
c (0<=(SATLiteral(342) - aux693 + SATLiteral(612)))
612 2800 0
342 2800 0
342 612 2799 0
c ((SATLiteral(1017) - aux694 + SATLiteral(882))<=0)
-882 -2802 0
-1017 -2802 0
-1017 -882 -2803 0
c (0<=(SATLiteral(1017) - aux694 + SATLiteral(882)))
882 2803 0
1017 2803 0
1017 882 2802 0
c (( - aux695 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -2805 0
-747 -2805 0
-747 -207 -2806 0
c (0<=( - aux695 + SATLiteral(747) + SATLiteral(207)))
207 2806 0
747 2806 0
747 207 2805 0
c (( - aux696 + SATLiteral(477) + SATLiteral(1147))<=0)
-1147 -2808 0
-477 -2808 0
-477 -1147 -2809 0
c (0<=( - aux696 + SATLiteral(477) + SATLiteral(1147)))
1147 2809 0
477 2809 0
477 1147 2808 0
c ((aux696 - aux697 + SATLiteral(72))<=0)
2808 -2811 0
2809 -2812 0
-72 -2811 0
-72 2808 -2812 0
-72 2809 -2814 0
c (0<=(aux696 - aux697 + SATLiteral(72)))
-2809 2814 0
-2808 2812 0
72 2814 0
72 -2809 2812 0
72 -2808 2811 0
c ((aux693 + aux695 - aux698)<=0)
2805 -2816 0
2806 -2817 0
2799 -2816 0
2799 2805 -2817 0
2799 2806 -2819 0
2800 -2817 0
2800 2805 -2819 0
2800 2806 -2821 0
c (0<=(aux693 + aux695 - aux698))
-2806 2821 0
-2805 2819 0
-2800 2821 0
-2800 -2806 2819 0
-2800 -2805 2817 0
-2799 2819 0
-2799 -2806 2817 0
-2799 -2805 2816 0
c ((SATLiteral(344) - aux699 + SATLiteral(614))<=0)
-614 -2823 0
-344 -2823 0
-344 -614 -2824 0
c (0<=(SATLiteral(344) - aux699 + SATLiteral(614)))
614 2824 0
344 2824 0
344 614 2823 0
c ((SATLiteral(1019) - aux700 + SATLiteral(884))<=0)
-884 -2826 0
-1019 -2826 0
-1019 -884 -2827 0
c (0<=(SATLiteral(1019) - aux700 + SATLiteral(884)))
884 2827 0
1019 2827 0
1019 884 2826 0
c (( - aux701 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -2829 0
-749 -2829 0
-749 -209 -2830 0
c (0<=( - aux701 + SATLiteral(749) + SATLiteral(209)))
209 2830 0
749 2830 0
749 209 2829 0
c (( - aux702 + SATLiteral(479) + SATLiteral(1148))<=0)
-1148 -2832 0
-479 -2832 0
-479 -1148 -2833 0
c (0<=( - aux702 + SATLiteral(479) + SATLiteral(1148)))
1148 2833 0
479 2833 0
479 1148 2832 0
c ((aux702 - aux703 + SATLiteral(74))<=0)
2832 -2835 0
2833 -2836 0
-74 -2835 0
-74 2832 -2836 0
-74 2833 -2838 0
c (0<=(aux702 - aux703 + SATLiteral(74)))
-2833 2838 0
-2832 2836 0
74 2838 0
74 -2833 2836 0
74 -2832 2835 0
c ((aux699 + aux701 - aux704)<=0)
2829 -2840 0
2830 -2841 0
2823 -2840 0
2823 2829 -2841 0
2823 2830 -2843 0
2824 -2841 0
2824 2829 -2843 0
2824 2830 -2845 0
c (0<=(aux699 + aux701 - aux704))
-2830 2845 0
-2829 2843 0
-2824 2845 0
-2824 -2830 2843 0
-2824 -2829 2841 0
-2823 2843 0
-2823 -2830 2841 0
-2823 -2829 2840 0
c ((SATLiteral(346) - aux705 + SATLiteral(616))<=0)
-616 -2847 0
-346 -2847 0
-346 -616 -2848 0
c (0<=(SATLiteral(346) - aux705 + SATLiteral(616)))
616 2848 0
346 2848 0
346 616 2847 0
c ((SATLiteral(1021) - aux706 + SATLiteral(886))<=0)
-886 -2850 0
-1021 -2850 0
-1021 -886 -2851 0
c (0<=(SATLiteral(1021) - aux706 + SATLiteral(886)))
886 2851 0
1021 2851 0
1021 886 2850 0
c (( - aux707 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -2853 0
-751 -2853 0
-751 -211 -2854 0
c (0<=( - aux707 + SATLiteral(751) + SATLiteral(211)))
211 2854 0
751 2854 0
751 211 2853 0
c (( - aux708 + SATLiteral(481) + SATLiteral(1149))<=0)
-1149 -2856 0
-481 -2856 0
-481 -1149 -2857 0
c (0<=( - aux708 + SATLiteral(481) + SATLiteral(1149)))
1149 2857 0
481 2857 0
481 1149 2856 0
c ((aux708 - aux709 + SATLiteral(76))<=0)
2856 -2859 0
2857 -2860 0
-76 -2859 0
-76 2856 -2860 0
-76 2857 -2862 0
c (0<=(aux708 - aux709 + SATLiteral(76)))
-2857 2862 0
-2856 2860 0
76 2862 0
76 -2857 2860 0
76 -2856 2859 0
c ((aux705 + aux707 - aux710)<=0)
2853 -2864 0
2854 -2865 0
2847 -2864 0
2847 2853 -2865 0
2847 2854 -2867 0
2848 -2865 0
2848 2853 -2867 0
2848 2854 -2869 0
c (0<=(aux705 + aux707 - aux710))
-2854 2869 0
-2853 2867 0
-2848 2869 0
-2848 -2854 2867 0
-2848 -2853 2865 0
-2847 2867 0
-2847 -2854 2865 0
-2847 -2853 2864 0
c ((SATLiteral(-345) - aux711 + SATLiteral(-615))<=0)
615 -2871 0
345 -2871 0
345 615 -2872 0
c (0<=(SATLiteral(-345) - aux711 + SATLiteral(-615)))
-615 2872 0
-345 2872 0
-345 -615 2871 0
c ((SATLiteral(-1020) - aux712 + SATLiteral(-885))<=0)
885 -2874 0
1020 -2874 0
1020 885 -2875 0
c (0<=(SATLiteral(-1020) - aux712 + SATLiteral(-885)))
-885 2875 0
-1020 2875 0
-1020 -885 2874 0
c (( - aux713 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -2877 0
750 -2877 0
750 210 -2878 0
c (0<=( - aux713 + SATLiteral(-750) + SATLiteral(-210)))
-210 2878 0
-750 2878 0
-750 -210 2877 0
c (( - aux714 + SATLiteral(-480) + SATLiteral(1150))<=0)
-1150 -2880 0
480 -2880 0
480 -1150 -2881 0
c (0<=( - aux714 + SATLiteral(-480) + SATLiteral(1150)))
1150 2881 0
-480 2881 0
-480 1150 2880 0
c ((aux714 - aux715 + SATLiteral(-75))<=0)
2880 -2883 0
2881 -2884 0
75 -2883 0
75 2880 -2884 0
75 2881 -2886 0
c (0<=(aux714 - aux715 + SATLiteral(-75)))
-2881 2886 0
-2880 2884 0
-75 2886 0
-75 -2881 2884 0
-75 -2880 2883 0
c ((aux711 + aux713 - aux716)<=0)
2877 -2888 0
2878 -2889 0
2871 -2888 0
2871 2877 -2889 0
2871 2878 -2891 0
2872 -2889 0
2872 2877 -2891 0
2872 2878 -2893 0
c (0<=(aux711 + aux713 - aux716))
-2878 2893 0
-2877 2891 0
-2872 2893 0
-2872 -2878 2891 0
-2872 -2877 2889 0
-2871 2891 0
-2871 -2878 2889 0
-2871 -2877 2888 0
c ((SATLiteral(347) - aux717 + SATLiteral(617))<=0)
-617 -2895 0
-347 -2895 0
-347 -617 -2896 0
c (0<=(SATLiteral(347) - aux717 + SATLiteral(617)))
617 2896 0
347 2896 0
347 617 2895 0
c ((SATLiteral(1022) - aux718 + SATLiteral(887))<=0)
-887 -2898 0
-1022 -2898 0
-1022 -887 -2899 0
c (0<=(SATLiteral(1022) - aux718 + SATLiteral(887)))
887 2899 0
1022 2899 0
1022 887 2898 0
c (( - aux719 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -2901 0
-752 -2901 0
-752 -212 -2902 0
c (0<=( - aux719 + SATLiteral(752) + SATLiteral(212)))
212 2902 0
752 2902 0
752 212 2901 0
c (( - aux720 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -2904 0
-482 -2904 0
-482 -1157 -2905 0
c (0<=( - aux720 + SATLiteral(482) + SATLiteral(1157)))
1157 2905 0
482 2905 0
482 1157 2904 0
c ((aux720 - aux721 + SATLiteral(77))<=0)
2904 -2907 0
2905 -2908 0
-77 -2907 0
-77 2904 -2908 0
-77 2905 -2910 0
c (0<=(aux720 - aux721 + SATLiteral(77)))
-2905 2910 0
-2904 2908 0
77 2910 0
77 -2905 2908 0
77 -2904 2907 0
c ((aux717 + aux719 - aux722)<=0)
2901 -2912 0
2902 -2913 0
2895 -2912 0
2895 2901 -2913 0
2895 2902 -2915 0
2896 -2913 0
2896 2901 -2915 0
2896 2902 -2917 0
c (0<=(aux717 + aux719 - aux722))
-2902 2917 0
-2901 2915 0
-2896 2917 0
-2896 -2902 2915 0
-2896 -2901 2913 0
-2895 2915 0
-2895 -2902 2913 0
-2895 -2901 2912 0
c ((SATLiteral(349) - aux723 + SATLiteral(619))<=0)
-619 -2919 0
-349 -2919 0
-349 -619 -2920 0
c (0<=(SATLiteral(349) - aux723 + SATLiteral(619)))
619 2920 0
349 2920 0
349 619 2919 0
c ((SATLiteral(1024) - aux724 + SATLiteral(889))<=0)
-889 -2922 0
-1024 -2922 0
-1024 -889 -2923 0
c (0<=(SATLiteral(1024) - aux724 + SATLiteral(889)))
889 2923 0
1024 2923 0
1024 889 2922 0
c (( - aux725 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -2925 0
-754 -2925 0
-754 -214 -2926 0
c (0<=( - aux725 + SATLiteral(754) + SATLiteral(214)))
214 2926 0
754 2926 0
754 214 2925 0
c (( - aux726 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -2928 0
-484 -2928 0
-484 -1159 -2929 0
c (0<=( - aux726 + SATLiteral(484) + SATLiteral(1159)))
1159 2929 0
484 2929 0
484 1159 2928 0
c ((aux726 - aux727 + SATLiteral(79))<=0)
2928 -2931 0
2929 -2932 0
-79 -2931 0
-79 2928 -2932 0
-79 2929 -2934 0
c (0<=(aux726 - aux727 + SATLiteral(79)))
-2929 2934 0
-2928 2932 0
79 2934 0
79 -2929 2932 0
79 -2928 2931 0
c ((aux723 + aux725 - aux728)<=0)
2925 -2936 0
2926 -2937 0
2919 -2936 0
2919 2925 -2937 0
2919 2926 -2939 0
2920 -2937 0
2920 2925 -2939 0
2920 2926 -2941 0
c (0<=(aux723 + aux725 - aux728))
-2926 2941 0
-2925 2939 0
-2920 2941 0
-2920 -2926 2939 0
-2920 -2925 2937 0
-2919 2939 0
-2919 -2926 2937 0
-2919 -2925 2936 0
c ((SATLiteral(351) - aux729 + SATLiteral(621))<=0)
-621 -2943 0
-351 -2943 0
-351 -621 -2944 0
c (0<=(SATLiteral(351) - aux729 + SATLiteral(621)))
621 2944 0
351 2944 0
351 621 2943 0
c ((SATLiteral(1026) - aux730 + SATLiteral(891))<=0)
-891 -2946 0
-1026 -2946 0
-1026 -891 -2947 0
c (0<=(SATLiteral(1026) - aux730 + SATLiteral(891)))
891 2947 0
1026 2947 0
1026 891 2946 0
c (( - aux731 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -2949 0
-756 -2949 0
-756 -216 -2950 0
c (0<=( - aux731 + SATLiteral(756) + SATLiteral(216)))
216 2950 0
756 2950 0
756 216 2949 0
c (( - aux732 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -2952 0
-486 -2952 0
-486 -1161 -2953 0
c (0<=( - aux732 + SATLiteral(486) + SATLiteral(1161)))
1161 2953 0
486 2953 0
486 1161 2952 0
c ((aux732 - aux733 + SATLiteral(81))<=0)
2952 -2955 0
2953 -2956 0
-81 -2955 0
-81 2952 -2956 0
-81 2953 -2958 0
c (0<=(aux732 - aux733 + SATLiteral(81)))
-2953 2958 0
-2952 2956 0
81 2958 0
81 -2953 2956 0
81 -2952 2955 0
c ((aux729 + aux731 - aux734)<=0)
2949 -2960 0
2950 -2961 0
2943 -2960 0
2943 2949 -2961 0
2943 2950 -2963 0
2944 -2961 0
2944 2949 -2963 0
2944 2950 -2965 0
c (0<=(aux729 + aux731 - aux734))
-2950 2965 0
-2949 2963 0
-2944 2965 0
-2944 -2950 2963 0
-2944 -2949 2961 0
-2943 2963 0
-2943 -2950 2961 0
-2943 -2949 2960 0
c ((SATLiteral(353) - aux735 + SATLiteral(623))<=0)
-623 -2967 0
-353 -2967 0
-353 -623 -2968 0
c (0<=(SATLiteral(353) - aux735 + SATLiteral(623)))
623 2968 0
353 2968 0
353 623 2967 0
c ((SATLiteral(1028) - aux736 + SATLiteral(893))<=0)
-893 -2970 0
-1028 -2970 0
-1028 -893 -2971 0
c (0<=(SATLiteral(1028) - aux736 + SATLiteral(893)))
893 2971 0
1028 2971 0
1028 893 2970 0
c (( - aux737 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -2973 0
-758 -2973 0
-758 -218 -2974 0
c (0<=( - aux737 + SATLiteral(758) + SATLiteral(218)))
218 2974 0
758 2974 0
758 218 2973 0
c (( - aux738 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -2976 0
-488 -2976 0
-488 -1163 -2977 0
c (0<=( - aux738 + SATLiteral(488) + SATLiteral(1163)))
1163 2977 0
488 2977 0
488 1163 2976 0
c ((aux738 - aux739 + SATLiteral(83))<=0)
2976 -2979 0
2977 -2980 0
-83 -2979 0
-83 2976 -2980 0
-83 2977 -2982 0
c (0<=(aux738 - aux739 + SATLiteral(83)))
-2977 2982 0
-2976 2980 0
83 2982 0
83 -2977 2980 0
83 -2976 2979 0
c ((aux735 + aux737 - aux740)<=0)
2973 -2984 0
2974 -2985 0
2967 -2984 0
2967 2973 -2985 0
2967 2974 -2987 0
2968 -2985 0
2968 2973 -2987 0
2968 2974 -2989 0
c (0<=(aux735 + aux737 - aux740))
-2974 2989 0
-2973 2987 0
-2968 2989 0
-2968 -2974 2987 0
-2968 -2973 2985 0
-2967 2987 0
-2967 -2974 2985 0
-2967 -2973 2984 0
c ((SATLiteral(355) - aux741 + SATLiteral(625))<=0)
-625 -2991 0
-355 -2991 0
-355 -625 -2992 0
c (0<=(SATLiteral(355) - aux741 + SATLiteral(625)))
625 2992 0
355 2992 0
355 625 2991 0
c ((SATLiteral(1030) - aux742 + SATLiteral(895))<=0)
-895 -2994 0
-1030 -2994 0
-1030 -895 -2995 0
c (0<=(SATLiteral(1030) - aux742 + SATLiteral(895)))
895 2995 0
1030 2995 0
1030 895 2994 0
c (( - aux743 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -2997 0
-760 -2997 0
-760 -220 -2998 0
c (0<=( - aux743 + SATLiteral(760) + SATLiteral(220)))
220 2998 0
760 2998 0
760 220 2997 0
c (( - aux744 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3000 0
-490 -3000 0
-490 -1165 -3001 0
c (0<=( - aux744 + SATLiteral(490) + SATLiteral(1165)))
1165 3001 0
490 3001 0
490 1165 3000 0
c ((aux744 - aux745 + SATLiteral(85))<=0)
3000 -3003 0
3001 -3004 0
-85 -3003 0
-85 3000 -3004 0
-85 3001 -3006 0
c (0<=(aux744 - aux745 + SATLiteral(85)))
-3001 3006 0
-3000 3004 0
85 3006 0
85 -3001 3004 0
85 -3000 3003 0
c ((aux741 + aux743 - aux746)<=0)
2997 -3008 0
2998 -3009 0
2991 -3008 0
2991 2997 -3009 0
2991 2998 -3011 0
2992 -3009 0
2992 2997 -3011 0
2992 2998 -3013 0
c (0<=(aux741 + aux743 - aux746))
-2998 3013 0
-2997 3011 0
-2992 3013 0
-2992 -2998 3011 0
-2992 -2997 3009 0
-2991 3011 0
-2991 -2998 3009 0
-2991 -2997 3008 0
c ((SATLiteral(357) - aux747 + SATLiteral(627))<=0)
-627 -3015 0
-357 -3015 0
-357 -627 -3016 0
c (0<=(SATLiteral(357) - aux747 + SATLiteral(627)))
627 3016 0
357 3016 0
357 627 3015 0
c ((SATLiteral(1032) - aux748 + SATLiteral(897))<=0)
-897 -3018 0
-1032 -3018 0
-1032 -897 -3019 0
c (0<=(SATLiteral(1032) - aux748 + SATLiteral(897)))
897 3019 0
1032 3019 0
1032 897 3018 0
c (( - aux749 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3021 0
-762 -3021 0
-762 -222 -3022 0
c (0<=( - aux749 + SATLiteral(762) + SATLiteral(222)))
222 3022 0
762 3022 0
762 222 3021 0
c (( - aux750 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3024 0
-492 -3024 0
-492 -1167 -3025 0
c (0<=( - aux750 + SATLiteral(492) + SATLiteral(1167)))
1167 3025 0
492 3025 0
492 1167 3024 0
c ((aux750 - aux751 + SATLiteral(87))<=0)
3024 -3027 0
3025 -3028 0
-87 -3027 0
-87 3024 -3028 0
-87 3025 -3030 0
c (0<=(aux750 - aux751 + SATLiteral(87)))
-3025 3030 0
-3024 3028 0
87 3030 0
87 -3025 3028 0
87 -3024 3027 0
c ((aux747 + aux749 - aux752)<=0)
3021 -3032 0
3022 -3033 0
3015 -3032 0
3015 3021 -3033 0
3015 3022 -3035 0
3016 -3033 0
3016 3021 -3035 0
3016 3022 -3037 0
c (0<=(aux747 + aux749 - aux752))
-3022 3037 0
-3021 3035 0
-3016 3037 0
-3016 -3022 3035 0
-3016 -3021 3033 0
-3015 3035 0
-3015 -3022 3033 0
-3015 -3021 3032 0
c ((SATLiteral(359) - aux753 + SATLiteral(629))<=0)
-629 -3039 0
-359 -3039 0
-359 -629 -3040 0
c (0<=(SATLiteral(359) - aux753 + SATLiteral(629)))
629 3040 0
359 3040 0
359 629 3039 0
c ((SATLiteral(1034) - aux754 + SATLiteral(899))<=0)
-899 -3042 0
-1034 -3042 0
-1034 -899 -3043 0
c (0<=(SATLiteral(1034) - aux754 + SATLiteral(899)))
899 3043 0
1034 3043 0
1034 899 3042 0
c (( - aux755 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3045 0
-764 -3045 0
-764 -224 -3046 0
c (0<=( - aux755 + SATLiteral(764) + SATLiteral(224)))
224 3046 0
764 3046 0
764 224 3045 0
c (( - aux756 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3048 0
-494 -3048 0
-494 -1169 -3049 0
c (0<=( - aux756 + SATLiteral(494) + SATLiteral(1169)))
1169 3049 0
494 3049 0
494 1169 3048 0
c ((aux756 - aux757 + SATLiteral(89))<=0)
3048 -3051 0
3049 -3052 0
-89 -3051 0
-89 3048 -3052 0
-89 3049 -3054 0
c (0<=(aux756 - aux757 + SATLiteral(89)))
-3049 3054 0
-3048 3052 0
89 3054 0
89 -3049 3052 0
89 -3048 3051 0
c ((aux753 + aux755 - aux758)<=0)
3045 -3056 0
3046 -3057 0
3039 -3056 0
3039 3045 -3057 0
3039 3046 -3059 0
3040 -3057 0
3040 3045 -3059 0
3040 3046 -3061 0
c (0<=(aux753 + aux755 - aux758))
-3046 3061 0
-3045 3059 0
-3040 3061 0
-3040 -3046 3059 0
-3040 -3045 3057 0
-3039 3059 0
-3039 -3046 3057 0
-3039 -3045 3056 0
c ((SATLiteral(361) - aux759 + SATLiteral(631))<=0)
-631 -3063 0
-361 -3063 0
-361 -631 -3064 0
c (0<=(SATLiteral(361) - aux759 + SATLiteral(631)))
631 3064 0
361 3064 0
361 631 3063 0
c ((SATLiteral(1036) - aux760 + SATLiteral(901))<=0)
-901 -3066 0
-1036 -3066 0
-1036 -901 -3067 0
c (0<=(SATLiteral(1036) - aux760 + SATLiteral(901)))
901 3067 0
1036 3067 0
1036 901 3066 0
c (( - aux761 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3069 0
-766 -3069 0
-766 -226 -3070 0
c (0<=( - aux761 + SATLiteral(766) + SATLiteral(226)))
226 3070 0
766 3070 0
766 226 3069 0
c (( - aux762 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3072 0
-496 -3072 0
-496 -1171 -3073 0
c (0<=( - aux762 + SATLiteral(496) + SATLiteral(1171)))
1171 3073 0
496 3073 0
496 1171 3072 0
c ((aux762 - aux763 + SATLiteral(91))<=0)
3072 -3075 0
3073 -3076 0
-91 -3075 0
-91 3072 -3076 0
-91 3073 -3078 0
c (0<=(aux762 - aux763 + SATLiteral(91)))
-3073 3078 0
-3072 3076 0
91 3078 0
91 -3073 3076 0
91 -3072 3075 0
c ((aux759 + aux761 - aux764)<=0)
3069 -3080 0
3070 -3081 0
3063 -3080 0
3063 3069 -3081 0
3063 3070 -3083 0
3064 -3081 0
3064 3069 -3083 0
3064 3070 -3085 0
c (0<=(aux759 + aux761 - aux764))
-3070 3085 0
-3069 3083 0
-3064 3085 0
-3064 -3070 3083 0
-3064 -3069 3081 0
-3063 3083 0
-3063 -3070 3081 0
-3063 -3069 3080 0
c ((SATLiteral(-360) - aux765 + SATLiteral(-630))<=0)
630 -3087 0
360 -3087 0
360 630 -3088 0
c (0<=(SATLiteral(-360) - aux765 + SATLiteral(-630)))
-630 3088 0
-360 3088 0
-360 -630 3087 0
c ((SATLiteral(-1035) - aux766 + SATLiteral(-900))<=0)
900 -3090 0
1035 -3090 0
1035 900 -3091 0
c (0<=(SATLiteral(-1035) - aux766 + SATLiteral(-900)))
-900 3091 0
-1035 3091 0
-1035 -900 3090 0
c (( - aux767 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3093 0
765 -3093 0
765 225 -3094 0
c (0<=( - aux767 + SATLiteral(-765) + SATLiteral(-225)))
-225 3094 0
-765 3094 0
-765 -225 3093 0
c (( - aux768 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3096 0
495 -3096 0
495 1170 -3097 0
c (0<=( - aux768 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3097 0
-495 3097 0
-495 -1170 3096 0
c ((aux768 - aux769 + SATLiteral(-90))<=0)
3096 -3099 0
3097 -3100 0
90 -3099 0
90 3096 -3100 0
90 3097 -3102 0
c (0<=(aux768 - aux769 + SATLiteral(-90)))
-3097 3102 0
-3096 3100 0
-90 3102 0
-90 -3097 3100 0
-90 -3096 3099 0
c ((aux765 + aux767 - aux770)<=0)
3093 -3104 0
3094 -3105 0
3087 -3104 0
3087 3093 -3105 0
3087 3094 -3107 0
3088 -3105 0
3088 3093 -3107 0
3088 3094 -3109 0
c (0<=(aux765 + aux767 - aux770))
-3094 3109 0
-3093 3107 0
-3088 3109 0
-3088 -3094 3107 0
-3088 -3093 3105 0
-3087 3107 0
-3087 -3094 3105 0
-3087 -3093 3104 0
c ((SATLiteral(362) - aux771 + SATLiteral(632))<=0)
-632 -3111 0
-362 -3111 0
-362 -632 -3112 0
c (0<=(SATLiteral(362) - aux771 + SATLiteral(632)))
632 3112 0
362 3112 0
362 632 3111 0
c ((SATLiteral(1037) - aux772 + SATLiteral(902))<=0)
-902 -3114 0
-1037 -3114 0
-1037 -902 -3115 0
c (0<=(SATLiteral(1037) - aux772 + SATLiteral(902)))
902 3115 0
1037 3115 0
1037 902 3114 0
c (( - aux773 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3117 0
-767 -3117 0
-767 -227 -3118 0
c (0<=( - aux773 + SATLiteral(767) + SATLiteral(227)))
227 3118 0
767 3118 0
767 227 3117 0
c (( - aux774 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3120 0
-497 -3120 0
-497 -1172 -3121 0
c (0<=( - aux774 + SATLiteral(497) + SATLiteral(1172)))
1172 3121 0
497 3121 0
497 1172 3120 0
c ((aux774 - aux775 + SATLiteral(92))<=0)
3120 -3123 0
3121 -3124 0
-92 -3123 0
-92 3120 -3124 0
-92 3121 -3126 0
c (0<=(aux774 - aux775 + SATLiteral(92)))
-3121 3126 0
-3120 3124 0
92 3126 0
92 -3121 3124 0
92 -3120 3123 0
c ((aux771 + aux773 - aux776)<=0)
3117 -3128 0
3118 -3129 0
3111 -3128 0
3111 3117 -3129 0
3111 3118 -3131 0
3112 -3129 0
3112 3117 -3131 0
3112 3118 -3133 0
c (0<=(aux771 + aux773 - aux776))
-3118 3133 0
-3117 3131 0
-3112 3133 0
-3112 -3118 3131 0
-3112 -3117 3129 0
-3111 3131 0
-3111 -3118 3129 0
-3111 -3117 3128 0
c ((SATLiteral(364) - aux777 + SATLiteral(634))<=0)
-634 -3135 0
-364 -3135 0
-364 -634 -3136 0
c (0<=(SATLiteral(364) - aux777 + SATLiteral(634)))
634 3136 0
364 3136 0
364 634 3135 0
c ((SATLiteral(1039) - aux778 + SATLiteral(904))<=0)
-904 -3138 0
-1039 -3138 0
-1039 -904 -3139 0
c (0<=(SATLiteral(1039) - aux778 + SATLiteral(904)))
904 3139 0
1039 3139 0
1039 904 3138 0
c (( - aux779 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3141 0
-769 -3141 0
-769 -229 -3142 0
c (0<=( - aux779 + SATLiteral(769) + SATLiteral(229)))
229 3142 0
769 3142 0
769 229 3141 0
c (( - aux780 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3144 0
-499 -3144 0
-499 -1174 -3145 0
c (0<=( - aux780 + SATLiteral(499) + SATLiteral(1174)))
1174 3145 0
499 3145 0
499 1174 3144 0
c ((aux780 - aux781 + SATLiteral(94))<=0)
3144 -3147 0
3145 -3148 0
-94 -3147 0
-94 3144 -3148 0
-94 3145 -3150 0
c (0<=(aux780 - aux781 + SATLiteral(94)))
-3145 3150 0
-3144 3148 0
94 3150 0
94 -3145 3148 0
94 -3144 3147 0
c ((aux777 + aux779 - aux782)<=0)
3141 -3152 0
3142 -3153 0
3135 -3152 0
3135 3141 -3153 0
3135 3142 -3155 0
3136 -3153 0
3136 3141 -3155 0
3136 3142 -3157 0
c (0<=(aux777 + aux779 - aux782))
-3142 3157 0
-3141 3155 0
-3136 3157 0
-3136 -3142 3155 0
-3136 -3141 3153 0
-3135 3155 0
-3135 -3142 3153 0
-3135 -3141 3152 0
c ((SATLiteral(366) - aux783 + SATLiteral(636))<=0)
-636 -3159 0
-366 -3159 0
-366 -636 -3160 0
c (0<=(SATLiteral(366) - aux783 + SATLiteral(636)))
636 3160 0
366 3160 0
366 636 3159 0
c ((SATLiteral(1041) - aux784 + SATLiteral(906))<=0)
-906 -3162 0
-1041 -3162 0
-1041 -906 -3163 0
c (0<=(SATLiteral(1041) - aux784 + SATLiteral(906)))
906 3163 0
1041 3163 0
1041 906 3162 0
c (( - aux785 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3165 0
-771 -3165 0
-771 -231 -3166 0
c (0<=( - aux785 + SATLiteral(771) + SATLiteral(231)))
231 3166 0
771 3166 0
771 231 3165 0
c (( - aux786 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3168 0
-501 -3168 0
-501 -1176 -3169 0
c (0<=( - aux786 + SATLiteral(501) + SATLiteral(1176)))
1176 3169 0
501 3169 0
501 1176 3168 0
c ((aux786 - aux787 + SATLiteral(96))<=0)
3168 -3171 0
3169 -3172 0
-96 -3171 0
-96 3168 -3172 0
-96 3169 -3174 0
c (0<=(aux786 - aux787 + SATLiteral(96)))
-3169 3174 0
-3168 3172 0
96 3174 0
96 -3169 3172 0
96 -3168 3171 0
c ((aux783 + aux785 - aux788)<=0)
3165 -3176 0
3166 -3177 0
3159 -3176 0
3159 3165 -3177 0
3159 3166 -3179 0
3160 -3177 0
3160 3165 -3179 0
3160 3166 -3181 0
c (0<=(aux783 + aux785 - aux788))
-3166 3181 0
-3165 3179 0
-3160 3181 0
-3160 -3166 3179 0
-3160 -3165 3177 0
-3159 3179 0
-3159 -3166 3177 0
-3159 -3165 3176 0
c ((SATLiteral(368) - aux789 + SATLiteral(638))<=0)
-638 -3183 0
-368 -3183 0
-368 -638 -3184 0
c (0<=(SATLiteral(368) - aux789 + SATLiteral(638)))
638 3184 0
368 3184 0
368 638 3183 0
c ((SATLiteral(1043) - aux790 + SATLiteral(908))<=0)
-908 -3186 0
-1043 -3186 0
-1043 -908 -3187 0
c (0<=(SATLiteral(1043) - aux790 + SATLiteral(908)))
908 3187 0
1043 3187 0
1043 908 3186 0
c (( - aux791 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3189 0
-773 -3189 0
-773 -233 -3190 0
c (0<=( - aux791 + SATLiteral(773) + SATLiteral(233)))
233 3190 0
773 3190 0
773 233 3189 0
c (( - aux792 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3192 0
-503 -3192 0
-503 -1178 -3193 0
c (0<=( - aux792 + SATLiteral(503) + SATLiteral(1178)))
1178 3193 0
503 3193 0
503 1178 3192 0
c ((aux792 - aux793 + SATLiteral(98))<=0)
3192 -3195 0
3193 -3196 0
-98 -3195 0
-98 3192 -3196 0
-98 3193 -3198 0
c (0<=(aux792 - aux793 + SATLiteral(98)))
-3193 3198 0
-3192 3196 0
98 3198 0
98 -3193 3196 0
98 -3192 3195 0
c ((aux789 + aux791 - aux794)<=0)
3189 -3200 0
3190 -3201 0
3183 -3200 0
3183 3189 -3201 0
3183 3190 -3203 0
3184 -3201 0
3184 3189 -3203 0
3184 3190 -3205 0
c (0<=(aux789 + aux791 - aux794))
-3190 3205 0
-3189 3203 0
-3184 3205 0
-3184 -3190 3203 0
-3184 -3189 3201 0
-3183 3203 0
-3183 -3190 3201 0
-3183 -3189 3200 0
c ((SATLiteral(370) - aux795 + SATLiteral(640))<=0)
-640 -3207 0
-370 -3207 0
-370 -640 -3208 0
c (0<=(SATLiteral(370) - aux795 + SATLiteral(640)))
640 3208 0
370 3208 0
370 640 3207 0
c ((SATLiteral(1045) - aux796 + SATLiteral(910))<=0)
-910 -3210 0
-1045 -3210 0
-1045 -910 -3211 0
c (0<=(SATLiteral(1045) - aux796 + SATLiteral(910)))
910 3211 0
1045 3211 0
1045 910 3210 0
c (( - aux797 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3213 0
-775 -3213 0
-775 -235 -3214 0
c (0<=( - aux797 + SATLiteral(775) + SATLiteral(235)))
235 3214 0
775 3214 0
775 235 3213 0
c (( - aux798 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3216 0
-505 -3216 0
-505 -1180 -3217 0
c (0<=( - aux798 + SATLiteral(505) + SATLiteral(1180)))
1180 3217 0
505 3217 0
505 1180 3216 0
c ((aux798 - aux799 + SATLiteral(100))<=0)
3216 -3219 0
3217 -3220 0
-100 -3219 0
-100 3216 -3220 0
-100 3217 -3222 0
c (0<=(aux798 - aux799 + SATLiteral(100)))
-3217 3222 0
-3216 3220 0
100 3222 0
100 -3217 3220 0
100 -3216 3219 0
c ((aux795 + aux797 - aux800)<=0)
3213 -3224 0
3214 -3225 0
3207 -3224 0
3207 3213 -3225 0
3207 3214 -3227 0
3208 -3225 0
3208 3213 -3227 0
3208 3214 -3229 0
c (0<=(aux795 + aux797 - aux800))
-3214 3229 0
-3213 3227 0
-3208 3229 0
-3208 -3214 3227 0
-3208 -3213 3225 0
-3207 3227 0
-3207 -3214 3225 0
-3207 -3213 3224 0
c ((SATLiteral(372) - aux801 + SATLiteral(642))<=0)
-642 -3231 0
-372 -3231 0
-372 -642 -3232 0
c (0<=(SATLiteral(372) - aux801 + SATLiteral(642)))
642 3232 0
372 3232 0
372 642 3231 0
c ((SATLiteral(1047) - aux802 + SATLiteral(912))<=0)
-912 -3234 0
-1047 -3234 0
-1047 -912 -3235 0
c (0<=(SATLiteral(1047) - aux802 + SATLiteral(912)))
912 3235 0
1047 3235 0
1047 912 3234 0
c (( - aux803 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3237 0
-777 -3237 0
-777 -237 -3238 0
c (0<=( - aux803 + SATLiteral(777) + SATLiteral(237)))
237 3238 0
777 3238 0
777 237 3237 0
c (( - aux804 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3240 0
-507 -3240 0
-507 -1182 -3241 0
c (0<=( - aux804 + SATLiteral(507) + SATLiteral(1182)))
1182 3241 0
507 3241 0
507 1182 3240 0
c ((aux804 - aux805 + SATLiteral(102))<=0)
3240 -3243 0
3241 -3244 0
-102 -3243 0
-102 3240 -3244 0
-102 3241 -3246 0
c (0<=(aux804 - aux805 + SATLiteral(102)))
-3241 3246 0
-3240 3244 0
102 3246 0
102 -3241 3244 0
102 -3240 3243 0
c ((aux801 + aux803 - aux806)<=0)
3237 -3248 0
3238 -3249 0
3231 -3248 0
3231 3237 -3249 0
3231 3238 -3251 0
3232 -3249 0
3232 3237 -3251 0
3232 3238 -3253 0
c (0<=(aux801 + aux803 - aux806))
-3238 3253 0
-3237 3251 0
-3232 3253 0
-3232 -3238 3251 0
-3232 -3237 3249 0
-3231 3251 0
-3231 -3238 3249 0
-3231 -3237 3248 0
c ((SATLiteral(374) - aux807 + SATLiteral(644))<=0)
-644 -3255 0
-374 -3255 0
-374 -644 -3256 0
c (0<=(SATLiteral(374) - aux807 + SATLiteral(644)))
644 3256 0
374 3256 0
374 644 3255 0
c ((SATLiteral(1049) - aux808 + SATLiteral(914))<=0)
-914 -3258 0
-1049 -3258 0
-1049 -914 -3259 0
c (0<=(SATLiteral(1049) - aux808 + SATLiteral(914)))
914 3259 0
1049 3259 0
1049 914 3258 0
c (( - aux809 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3261 0
-779 -3261 0
-779 -239 -3262 0
c (0<=( - aux809 + SATLiteral(779) + SATLiteral(239)))
239 3262 0
779 3262 0
779 239 3261 0
c (( - aux810 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3264 0
-509 -3264 0
-509 -1184 -3265 0
c (0<=( - aux810 + SATLiteral(509) + SATLiteral(1184)))
1184 3265 0
509 3265 0
509 1184 3264 0
c ((aux810 - aux811 + SATLiteral(104))<=0)
3264 -3267 0
3265 -3268 0
-104 -3267 0
-104 3264 -3268 0
-104 3265 -3270 0
c (0<=(aux810 - aux811 + SATLiteral(104)))
-3265 3270 0
-3264 3268 0
104 3270 0
104 -3265 3268 0
104 -3264 3267 0
c ((aux807 + aux809 - aux812)<=0)
3261 -3272 0
3262 -3273 0
3255 -3272 0
3255 3261 -3273 0
3255 3262 -3275 0
3256 -3273 0
3256 3261 -3275 0
3256 3262 -3277 0
c (0<=(aux807 + aux809 - aux812))
-3262 3277 0
-3261 3275 0
-3256 3277 0
-3256 -3262 3275 0
-3256 -3261 3273 0
-3255 3275 0
-3255 -3262 3273 0
-3255 -3261 3272 0
c ((SATLiteral(376) - aux813 + SATLiteral(646))<=0)
-646 -3279 0
-376 -3279 0
-376 -646 -3280 0
c (0<=(SATLiteral(376) - aux813 + SATLiteral(646)))
646 3280 0
376 3280 0
376 646 3279 0
c ((SATLiteral(1051) - aux814 + SATLiteral(916))<=0)
-916 -3282 0
-1051 -3282 0
-1051 -916 -3283 0
c (0<=(SATLiteral(1051) - aux814 + SATLiteral(916)))
916 3283 0
1051 3283 0
1051 916 3282 0
c (( - aux815 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3285 0
-781 -3285 0
-781 -241 -3286 0
c (0<=( - aux815 + SATLiteral(781) + SATLiteral(241)))
241 3286 0
781 3286 0
781 241 3285 0
c (( - aux816 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3288 0
-511 -3288 0
-511 -1186 -3289 0
c (0<=( - aux816 + SATLiteral(511) + SATLiteral(1186)))
1186 3289 0
511 3289 0
511 1186 3288 0
c ((aux816 - aux817 + SATLiteral(106))<=0)
3288 -3291 0
3289 -3292 0
-106 -3291 0
-106 3288 -3292 0
-106 3289 -3294 0
c (0<=(aux816 - aux817 + SATLiteral(106)))
-3289 3294 0
-3288 3292 0
106 3294 0
106 -3289 3292 0
106 -3288 3291 0
c ((aux813 + aux815 - aux818)<=0)
3285 -3296 0
3286 -3297 0
3279 -3296 0
3279 3285 -3297 0
3279 3286 -3299 0
3280 -3297 0
3280 3285 -3299 0
3280 3286 -3301 0
c (0<=(aux813 + aux815 - aux818))
-3286 3301 0
-3285 3299 0
-3280 3301 0
-3280 -3286 3299 0
-3280 -3285 3297 0
-3279 3299 0
-3279 -3286 3297 0
-3279 -3285 3296 0
c ((SATLiteral(-375) - aux819 + SATLiteral(-645))<=0)
645 -3303 0
375 -3303 0
375 645 -3304 0
c (0<=(SATLiteral(-375) - aux819 + SATLiteral(-645)))
-645 3304 0
-375 3304 0
-375 -645 3303 0
c ((SATLiteral(-1050) - aux820 + SATLiteral(-915))<=0)
915 -3306 0
1050 -3306 0
1050 915 -3307 0
c (0<=(SATLiteral(-1050) - aux820 + SATLiteral(-915)))
-915 3307 0
-1050 3307 0
-1050 -915 3306 0
c (( - aux821 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3309 0
780 -3309 0
780 240 -3310 0
c (0<=( - aux821 + SATLiteral(-780) + SATLiteral(-240)))
-240 3310 0
-780 3310 0
-780 -240 3309 0
c (( - aux822 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3312 0
510 -3312 0
510 1185 -3313 0
c (0<=( - aux822 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3313 0
-510 3313 0
-510 -1185 3312 0
c ((aux822 - aux823 + SATLiteral(-105))<=0)
3312 -3315 0
3313 -3316 0
105 -3315 0
105 3312 -3316 0
105 3313 -3318 0
c (0<=(aux822 - aux823 + SATLiteral(-105)))
-3313 3318 0
-3312 3316 0
-105 3318 0
-105 -3313 3316 0
-105 -3312 3315 0
c ((aux819 + aux821 - aux824)<=0)
3309 -3320 0
3310 -3321 0
3303 -3320 0
3303 3309 -3321 0
3303 3310 -3323 0
3304 -3321 0
3304 3309 -3323 0
3304 3310 -3325 0
c (0<=(aux819 + aux821 - aux824))
-3310 3325 0
-3309 3323 0
-3304 3325 0
-3304 -3310 3323 0
-3304 -3309 3321 0
-3303 3323 0
-3303 -3310 3321 0
-3303 -3309 3320 0
c ((SATLiteral(377) - aux825 + SATLiteral(647))<=0)
-647 -3327 0
-377 -3327 0
-377 -647 -3328 0
c (0<=(SATLiteral(377) - aux825 + SATLiteral(647)))
647 3328 0
377 3328 0
377 647 3327 0
c ((SATLiteral(1052) - aux826 + SATLiteral(917))<=0)
-917 -3330 0
-1052 -3330 0
-1052 -917 -3331 0
c (0<=(SATLiteral(1052) - aux826 + SATLiteral(917)))
917 3331 0
1052 3331 0
1052 917 3330 0
c (( - aux827 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3333 0
-782 -3333 0
-782 -242 -3334 0
c (0<=( - aux827 + SATLiteral(782) + SATLiteral(242)))
242 3334 0
782 3334 0
782 242 3333 0
c (( - aux828 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3336 0
-512 -3336 0
-512 -1187 -3337 0
c (0<=( - aux828 + SATLiteral(512) + SATLiteral(1187)))
1187 3337 0
512 3337 0
512 1187 3336 0
c ((aux828 - aux829 + SATLiteral(107))<=0)
3336 -3339 0
3337 -3340 0
-107 -3339 0
-107 3336 -3340 0
-107 3337 -3342 0
c (0<=(aux828 - aux829 + SATLiteral(107)))
-3337 3342 0
-3336 3340 0
107 3342 0
107 -3337 3340 0
107 -3336 3339 0
c ((aux825 + aux827 - aux830)<=0)
3333 -3344 0
3334 -3345 0
3327 -3344 0
3327 3333 -3345 0
3327 3334 -3347 0
3328 -3345 0
3328 3333 -3347 0
3328 3334 -3349 0
c (0<=(aux825 + aux827 - aux830))
-3334 3349 0
-3333 3347 0
-3328 3349 0
-3328 -3334 3347 0
-3328 -3333 3345 0
-3327 3347 0
-3327 -3334 3345 0
-3327 -3333 3344 0
c ((SATLiteral(379) - aux831 + SATLiteral(649))<=0)
-649 -3351 0
-379 -3351 0
-379 -649 -3352 0
c (0<=(SATLiteral(379) - aux831 + SATLiteral(649)))
649 3352 0
379 3352 0
379 649 3351 0
c ((SATLiteral(1054) - aux832 + SATLiteral(919))<=0)
-919 -3354 0
-1054 -3354 0
-1054 -919 -3355 0
c (0<=(SATLiteral(1054) - aux832 + SATLiteral(919)))
919 3355 0
1054 3355 0
1054 919 3354 0
c (( - aux833 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3357 0
-784 -3357 0
-784 -244 -3358 0
c (0<=( - aux833 + SATLiteral(784) + SATLiteral(244)))
244 3358 0
784 3358 0
784 244 3357 0
c (( - aux834 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3360 0
-514 -3360 0
-514 -1189 -3361 0
c (0<=( - aux834 + SATLiteral(514) + SATLiteral(1189)))
1189 3361 0
514 3361 0
514 1189 3360 0
c ((aux834 - aux835 + SATLiteral(109))<=0)
3360 -3363 0
3361 -3364 0
-109 -3363 0
-109 3360 -3364 0
-109 3361 -3366 0
c (0<=(aux834 - aux835 + SATLiteral(109)))
-3361 3366 0
-3360 3364 0
109 3366 0
109 -3361 3364 0
109 -3360 3363 0
c ((aux831 + aux833 - aux836)<=0)
3357 -3368 0
3358 -3369 0
3351 -3368 0
3351 3357 -3369 0
3351 3358 -3371 0
3352 -3369 0
3352 3357 -3371 0
3352 3358 -3373 0
c (0<=(aux831 + aux833 - aux836))
-3358 3373 0
-3357 3371 0
-3352 3373 0
-3352 -3358 3371 0
-3352 -3357 3369 0
-3351 3371 0
-3351 -3358 3369 0
-3351 -3357 3368 0
c ((SATLiteral(381) - aux837 + SATLiteral(651))<=0)
-651 -3375 0
-381 -3375 0
-381 -651 -3376 0
c (0<=(SATLiteral(381) - aux837 + SATLiteral(651)))
651 3376 0
381 3376 0
381 651 3375 0
c ((SATLiteral(1056) - aux838 + SATLiteral(921))<=0)
-921 -3378 0
-1056 -3378 0
-1056 -921 -3379 0
c (0<=(SATLiteral(1056) - aux838 + SATLiteral(921)))
921 3379 0
1056 3379 0
1056 921 3378 0
c (( - aux839 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3381 0
-786 -3381 0
-786 -246 -3382 0
c (0<=( - aux839 + SATLiteral(786) + SATLiteral(246)))
246 3382 0
786 3382 0
786 246 3381 0
c (( - aux840 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3384 0
-516 -3384 0
-516 -1191 -3385 0
c (0<=( - aux840 + SATLiteral(516) + SATLiteral(1191)))
1191 3385 0
516 3385 0
516 1191 3384 0
c ((aux840 - aux841 + SATLiteral(111))<=0)
3384 -3387 0
3385 -3388 0
-111 -3387 0
-111 3384 -3388 0
-111 3385 -3390 0
c (0<=(aux840 - aux841 + SATLiteral(111)))
-3385 3390 0
-3384 3388 0
111 3390 0
111 -3385 3388 0
111 -3384 3387 0
c ((aux837 + aux839 - aux842)<=0)
3381 -3392 0
3382 -3393 0
3375 -3392 0
3375 3381 -3393 0
3375 3382 -3395 0
3376 -3393 0
3376 3381 -3395 0
3376 3382 -3397 0
c (0<=(aux837 + aux839 - aux842))
-3382 3397 0
-3381 3395 0
-3376 3397 0
-3376 -3382 3395 0
-3376 -3381 3393 0
-3375 3395 0
-3375 -3382 3393 0
-3375 -3381 3392 0
c ((SATLiteral(383) - aux843 + SATLiteral(653))<=0)
-653 -3399 0
-383 -3399 0
-383 -653 -3400 0
c (0<=(SATLiteral(383) - aux843 + SATLiteral(653)))
653 3400 0
383 3400 0
383 653 3399 0
c ((SATLiteral(1058) - aux844 + SATLiteral(923))<=0)
-923 -3402 0
-1058 -3402 0
-1058 -923 -3403 0
c (0<=(SATLiteral(1058) - aux844 + SATLiteral(923)))
923 3403 0
1058 3403 0
1058 923 3402 0
c (( - aux845 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3405 0
-788 -3405 0
-788 -248 -3406 0
c (0<=( - aux845 + SATLiteral(788) + SATLiteral(248)))
248 3406 0
788 3406 0
788 248 3405 0
c (( - aux846 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3408 0
-518 -3408 0
-518 -1193 -3409 0
c (0<=( - aux846 + SATLiteral(518) + SATLiteral(1193)))
1193 3409 0
518 3409 0
518 1193 3408 0
c ((aux846 - aux847 + SATLiteral(113))<=0)
3408 -3411 0
3409 -3412 0
-113 -3411 0
-113 3408 -3412 0
-113 3409 -3414 0
c (0<=(aux846 - aux847 + SATLiteral(113)))
-3409 3414 0
-3408 3412 0
113 3414 0
113 -3409 3412 0
113 -3408 3411 0
c ((aux843 + aux845 - aux848)<=0)
3405 -3416 0
3406 -3417 0
3399 -3416 0
3399 3405 -3417 0
3399 3406 -3419 0
3400 -3417 0
3400 3405 -3419 0
3400 3406 -3421 0
c (0<=(aux843 + aux845 - aux848))
-3406 3421 0
-3405 3419 0
-3400 3421 0
-3400 -3406 3419 0
-3400 -3405 3417 0
-3399 3419 0
-3399 -3406 3417 0
-3399 -3405 3416 0
c ((SATLiteral(385) - aux849 + SATLiteral(655))<=0)
-655 -3423 0
-385 -3423 0
-385 -655 -3424 0
c (0<=(SATLiteral(385) - aux849 + SATLiteral(655)))
655 3424 0
385 3424 0
385 655 3423 0
c ((SATLiteral(1060) - aux850 + SATLiteral(925))<=0)
-925 -3426 0
-1060 -3426 0
-1060 -925 -3427 0
c (0<=(SATLiteral(1060) - aux850 + SATLiteral(925)))
925 3427 0
1060 3427 0
1060 925 3426 0
c (( - aux851 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3429 0
-790 -3429 0
-790 -250 -3430 0
c (0<=( - aux851 + SATLiteral(790) + SATLiteral(250)))
250 3430 0
790 3430 0
790 250 3429 0
c (( - aux852 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3432 0
-520 -3432 0
-520 -1195 -3433 0
c (0<=( - aux852 + SATLiteral(520) + SATLiteral(1195)))
1195 3433 0
520 3433 0
520 1195 3432 0
c ((aux852 - aux853 + SATLiteral(115))<=0)
3432 -3435 0
3433 -3436 0
-115 -3435 0
-115 3432 -3436 0
-115 3433 -3438 0
c (0<=(aux852 - aux853 + SATLiteral(115)))
-3433 3438 0
-3432 3436 0
115 3438 0
115 -3433 3436 0
115 -3432 3435 0
c ((aux849 + aux851 - aux854)<=0)
3429 -3440 0
3430 -3441 0
3423 -3440 0
3423 3429 -3441 0
3423 3430 -3443 0
3424 -3441 0
3424 3429 -3443 0
3424 3430 -3445 0
c (0<=(aux849 + aux851 - aux854))
-3430 3445 0
-3429 3443 0
-3424 3445 0
-3424 -3430 3443 0
-3424 -3429 3441 0
-3423 3443 0
-3423 -3430 3441 0
-3423 -3429 3440 0
c ((SATLiteral(387) - aux855 + SATLiteral(657))<=0)
-657 -3447 0
-387 -3447 0
-387 -657 -3448 0
c (0<=(SATLiteral(387) - aux855 + SATLiteral(657)))
657 3448 0
387 3448 0
387 657 3447 0
c ((SATLiteral(1062) - aux856 + SATLiteral(927))<=0)
-927 -3450 0
-1062 -3450 0
-1062 -927 -3451 0
c (0<=(SATLiteral(1062) - aux856 + SATLiteral(927)))
927 3451 0
1062 3451 0
1062 927 3450 0
c (( - aux857 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3453 0
-792 -3453 0
-792 -252 -3454 0
c (0<=( - aux857 + SATLiteral(792) + SATLiteral(252)))
252 3454 0
792 3454 0
792 252 3453 0
c (( - aux858 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3456 0
-522 -3456 0
-522 -1197 -3457 0
c (0<=( - aux858 + SATLiteral(522) + SATLiteral(1197)))
1197 3457 0
522 3457 0
522 1197 3456 0
c ((aux858 - aux859 + SATLiteral(117))<=0)
3456 -3459 0
3457 -3460 0
-117 -3459 0
-117 3456 -3460 0
-117 3457 -3462 0
c (0<=(aux858 - aux859 + SATLiteral(117)))
-3457 3462 0
-3456 3460 0
117 3462 0
117 -3457 3460 0
117 -3456 3459 0
c ((aux855 + aux857 - aux860)<=0)
3453 -3464 0
3454 -3465 0
3447 -3464 0
3447 3453 -3465 0
3447 3454 -3467 0
3448 -3465 0
3448 3453 -3467 0
3448 3454 -3469 0
c (0<=(aux855 + aux857 - aux860))
-3454 3469 0
-3453 3467 0
-3448 3469 0
-3448 -3454 3467 0
-3448 -3453 3465 0
-3447 3467 0
-3447 -3454 3465 0
-3447 -3453 3464 0
c ((SATLiteral(389) - aux861 + SATLiteral(659))<=0)
-659 -3471 0
-389 -3471 0
-389 -659 -3472 0
c (0<=(SATLiteral(389) - aux861 + SATLiteral(659)))
659 3472 0
389 3472 0
389 659 3471 0
c ((SATLiteral(1064) - aux862 + SATLiteral(929))<=0)
-929 -3474 0
-1064 -3474 0
-1064 -929 -3475 0
c (0<=(SATLiteral(1064) - aux862 + SATLiteral(929)))
929 3475 0
1064 3475 0
1064 929 3474 0
c (( - aux863 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3477 0
-794 -3477 0
-794 -254 -3478 0
c (0<=( - aux863 + SATLiteral(794) + SATLiteral(254)))
254 3478 0
794 3478 0
794 254 3477 0
c (( - aux864 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3480 0
-524 -3480 0
-524 -1199 -3481 0
c (0<=( - aux864 + SATLiteral(524) + SATLiteral(1199)))
1199 3481 0
524 3481 0
524 1199 3480 0
c ((aux864 - aux865 + SATLiteral(119))<=0)
3480 -3483 0
3481 -3484 0
-119 -3483 0
-119 3480 -3484 0
-119 3481 -3486 0
c (0<=(aux864 - aux865 + SATLiteral(119)))
-3481 3486 0
-3480 3484 0
119 3486 0
119 -3481 3484 0
119 -3480 3483 0
c ((aux861 + aux863 - aux866)<=0)
3477 -3488 0
3478 -3489 0
3471 -3488 0
3471 3477 -3489 0
3471 3478 -3491 0
3472 -3489 0
3472 3477 -3491 0
3472 3478 -3493 0
c (0<=(aux861 + aux863 - aux866))
-3478 3493 0
-3477 3491 0
-3472 3493 0
-3472 -3478 3491 0
-3472 -3477 3489 0
-3471 3491 0
-3471 -3478 3489 0
-3471 -3477 3488 0
c ((SATLiteral(391) - aux867 + SATLiteral(661))<=0)
-661 -3495 0
-391 -3495 0
-391 -661 -3496 0
c (0<=(SATLiteral(391) - aux867 + SATLiteral(661)))
661 3496 0
391 3496 0
391 661 3495 0
c ((SATLiteral(1066) - aux868 + SATLiteral(931))<=0)
-931 -3498 0
-1066 -3498 0
-1066 -931 -3499 0
c (0<=(SATLiteral(1066) - aux868 + SATLiteral(931)))
931 3499 0
1066 3499 0
1066 931 3498 0
c (( - aux869 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3501 0
-796 -3501 0
-796 -256 -3502 0
c (0<=( - aux869 + SATLiteral(796) + SATLiteral(256)))
256 3502 0
796 3502 0
796 256 3501 0
c (( - aux870 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3504 0
-526 -3504 0
-526 -1201 -3505 0
c (0<=( - aux870 + SATLiteral(526) + SATLiteral(1201)))
1201 3505 0
526 3505 0
526 1201 3504 0
c ((aux870 - aux871 + SATLiteral(121))<=0)
3504 -3507 0
3505 -3508 0
-121 -3507 0
-121 3504 -3508 0
-121 3505 -3510 0
c (0<=(aux870 - aux871 + SATLiteral(121)))
-3505 3510 0
-3504 3508 0
121 3510 0
121 -3505 3508 0
121 -3504 3507 0
c ((aux867 + aux869 - aux872)<=0)
3501 -3512 0
3502 -3513 0
3495 -3512 0
3495 3501 -3513 0
3495 3502 -3515 0
3496 -3513 0
3496 3501 -3515 0
3496 3502 -3517 0
c (0<=(aux867 + aux869 - aux872))
-3502 3517 0
-3501 3515 0
-3496 3517 0
-3496 -3502 3515 0
-3496 -3501 3513 0
-3495 3515 0
-3495 -3502 3513 0
-3495 -3501 3512 0
c ((SATLiteral(-390) - aux873 + SATLiteral(-660))<=0)
660 -3519 0
390 -3519 0
390 660 -3520 0
c (0<=(SATLiteral(-390) - aux873 + SATLiteral(-660)))
-660 3520 0
-390 3520 0
-390 -660 3519 0
c ((SATLiteral(-1065) - aux874 + SATLiteral(-930))<=0)
930 -3522 0
1065 -3522 0
1065 930 -3523 0
c (0<=(SATLiteral(-1065) - aux874 + SATLiteral(-930)))
-930 3523 0
-1065 3523 0
-1065 -930 3522 0
c (( - aux875 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3525 0
795 -3525 0
795 255 -3526 0
c (0<=( - aux875 + SATLiteral(-795) + SATLiteral(-255)))
-255 3526 0
-795 3526 0
-795 -255 3525 0
c (( - aux876 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3528 0
525 -3528 0
525 1200 -3529 0
c (0<=( - aux876 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3529 0
-525 3529 0
-525 -1200 3528 0
c ((aux876 - aux877 + SATLiteral(-120))<=0)
3528 -3531 0
3529 -3532 0
120 -3531 0
120 3528 -3532 0
120 3529 -3534 0
c (0<=(aux876 - aux877 + SATLiteral(-120)))
-3529 3534 0
-3528 3532 0
-120 3534 0
-120 -3529 3532 0
-120 -3528 3531 0
c ((aux873 + aux875 - aux878)<=0)
3525 -3536 0
3526 -3537 0
3519 -3536 0
3519 3525 -3537 0
3519 3526 -3539 0
3520 -3537 0
3520 3525 -3539 0
3520 3526 -3541 0
c (0<=(aux873 + aux875 - aux878))
-3526 3541 0
-3525 3539 0
-3520 3541 0
-3520 -3526 3539 0
-3520 -3525 3537 0
-3519 3539 0
-3519 -3526 3537 0
-3519 -3525 3536 0
c ((SATLiteral(392) - aux879 + SATLiteral(662))<=0)
-662 -3543 0
-392 -3543 0
-392 -662 -3544 0
c (0<=(SATLiteral(392) - aux879 + SATLiteral(662)))
662 3544 0
392 3544 0
392 662 3543 0
c ((SATLiteral(1067) - aux880 + SATLiteral(932))<=0)
-932 -3546 0
-1067 -3546 0
-1067 -932 -3547 0
c (0<=(SATLiteral(1067) - aux880 + SATLiteral(932)))
932 3547 0
1067 3547 0
1067 932 3546 0
c (( - aux881 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3549 0
-797 -3549 0
-797 -257 -3550 0
c (0<=( - aux881 + SATLiteral(797) + SATLiteral(257)))
257 3550 0
797 3550 0
797 257 3549 0
c (( - aux882 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3552 0
-527 -3552 0
-527 -1202 -3553 0
c (0<=( - aux882 + SATLiteral(527) + SATLiteral(1202)))
1202 3553 0
527 3553 0
527 1202 3552 0
c ((aux882 - aux883 + SATLiteral(122))<=0)
3552 -3555 0
3553 -3556 0
-122 -3555 0
-122 3552 -3556 0
-122 3553 -3558 0
c (0<=(aux882 - aux883 + SATLiteral(122)))
-3553 3558 0
-3552 3556 0
122 3558 0
122 -3553 3556 0
122 -3552 3555 0
c ((aux879 + aux881 - aux884)<=0)
3549 -3560 0
3550 -3561 0
3543 -3560 0
3543 3549 -3561 0
3543 3550 -3563 0
3544 -3561 0
3544 3549 -3563 0
3544 3550 -3565 0
c (0<=(aux879 + aux881 - aux884))
-3550 3565 0
-3549 3563 0
-3544 3565 0
-3544 -3550 3563 0
-3544 -3549 3561 0
-3543 3563 0
-3543 -3550 3561 0
-3543 -3549 3560 0
c ((SATLiteral(394) - aux885 + SATLiteral(664))<=0)
-664 -3567 0
-394 -3567 0
-394 -664 -3568 0
c (0<=(SATLiteral(394) - aux885 + SATLiteral(664)))
664 3568 0
394 3568 0
394 664 3567 0
c ((SATLiteral(1069) - aux886 + SATLiteral(934))<=0)
-934 -3570 0
-1069 -3570 0
-1069 -934 -3571 0
c (0<=(SATLiteral(1069) - aux886 + SATLiteral(934)))
934 3571 0
1069 3571 0
1069 934 3570 0
c (( - aux887 + SATLiteral(798) + SATLiteral(259))<=0)
-259 -3573 0
-798 -3573 0
-798 -259 -3574 0
c (0<=( - aux887 + SATLiteral(798) + SATLiteral(259)))
259 3574 0
798 3574 0
798 259 3573 0
c (( - aux888 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3576 0
-529 -3576 0
-529 -1204 -3577 0
c (0<=( - aux888 + SATLiteral(529) + SATLiteral(1204)))
1204 3577 0
529 3577 0
529 1204 3576 0
c ((aux888 - aux889 + SATLiteral(124))<=0)
3576 -3579 0
3577 -3580 0
-124 -3579 0
-124 3576 -3580 0
-124 3577 -3582 0
c (0<=(aux888 - aux889 + SATLiteral(124)))
-3577 3582 0
-3576 3580 0
124 3582 0
124 -3577 3580 0
124 -3576 3579 0
c ((aux885 + aux887 - aux890)<=0)
3573 -3584 0
3574 -3585 0
3567 -3584 0
3567 3573 -3585 0
3567 3574 -3587 0
3568 -3585 0
3568 3573 -3587 0
3568 3574 -3589 0
c (0<=(aux885 + aux887 - aux890))
-3574 3589 0
-3573 3587 0
-3568 3589 0
-3568 -3574 3587 0
-3568 -3573 3585 0
-3567 3587 0
-3567 -3574 3585 0
-3567 -3573 3584 0
c ((SATLiteral(396) - aux891 + SATLiteral(666))<=0)
-666 -3591 0
-396 -3591 0
-396 -666 -3592 0
c (0<=(SATLiteral(396) - aux891 + SATLiteral(666)))
666 3592 0
396 3592 0
396 666 3591 0
c ((SATLiteral(1071) - aux892 + SATLiteral(936))<=0)
-936 -3594 0
-1071 -3594 0
-1071 -936 -3595 0
c (0<=(SATLiteral(1071) - aux892 + SATLiteral(936)))
936 3595 0
1071 3595 0
1071 936 3594 0
c (( - aux893 + SATLiteral(799) + SATLiteral(261))<=0)
-261 -3597 0
-799 -3597 0
-799 -261 -3598 0
c (0<=( - aux893 + SATLiteral(799) + SATLiteral(261)))
261 3598 0
799 3598 0
799 261 3597 0
c (( - aux894 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3600 0
-531 -3600 0
-531 -1206 -3601 0
c (0<=( - aux894 + SATLiteral(531) + SATLiteral(1206)))
1206 3601 0
531 3601 0
531 1206 3600 0
c ((aux894 - aux895 + SATLiteral(126))<=0)
3600 -3603 0
3601 -3604 0
-126 -3603 0
-126 3600 -3604 0
-126 3601 -3606 0
c (0<=(aux894 - aux895 + SATLiteral(126)))
-3601 3606 0
-3600 3604 0
126 3606 0
126 -3601 3604 0
126 -3600 3603 0
c ((aux891 + aux893 - aux896)<=0)
3597 -3608 0
3598 -3609 0
3591 -3608 0
3591 3597 -3609 0
3591 3598 -3611 0
3592 -3609 0
3592 3597 -3611 0
3592 3598 -3613 0
c (0<=(aux891 + aux893 - aux896))
-3598 3613 0
-3597 3611 0
-3592 3613 0
-3592 -3598 3611 0
-3592 -3597 3609 0
-3591 3611 0
-3591 -3598 3609 0
-3591 -3597 3608 0
c ((SATLiteral(398) - aux897 + SATLiteral(668))<=0)
-668 -3615 0
-398 -3615 0
-398 -668 -3616 0
c (0<=(SATLiteral(398) - aux897 + SATLiteral(668)))
668 3616 0
398 3616 0
398 668 3615 0
c ((SATLiteral(1073) - aux898 + SATLiteral(938))<=0)
-938 -3618 0
-1073 -3618 0
-1073 -938 -3619 0
c (0<=(SATLiteral(1073) - aux898 + SATLiteral(938)))
938 3619 0
1073 3619 0
1073 938 3618 0
c (( - aux899 + SATLiteral(800) + SATLiteral(263))<=0)
-263 -3621 0
-800 -3621 0
-800 -263 -3622 0
c (0<=( - aux899 + SATLiteral(800) + SATLiteral(263)))
263 3622 0
800 3622 0
800 263 3621 0
c (( - aux900 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3624 0
-533 -3624 0
-533 -1208 -3625 0
c (0<=( - aux900 + SATLiteral(533) + SATLiteral(1208)))
1208 3625 0
533 3625 0
533 1208 3624 0
c ((aux900 - aux901 + SATLiteral(128))<=0)
3624 -3627 0
3625 -3628 0
-128 -3627 0
-128 3624 -3628 0
-128 3625 -3630 0
c (0<=(aux900 - aux901 + SATLiteral(128)))
-3625 3630 0
-3624 3628 0
128 3630 0
128 -3625 3628 0
128 -3624 3627 0
c ((aux897 + aux899 - aux902)<=0)
3621 -3632 0
3622 -3633 0
3615 -3632 0
3615 3621 -3633 0
3615 3622 -3635 0
3616 -3633 0
3616 3621 -3635 0
3616 3622 -3637 0
c (0<=(aux897 + aux899 - aux902))
-3622 3637 0
-3621 3635 0
-3616 3637 0
-3616 -3622 3635 0
-3616 -3621 3633 0
-3615 3635 0
-3615 -3622 3633 0
-3615 -3621 3632 0
c ((SATLiteral(400) - aux903 + SATLiteral(670))<=0)
-670 -3639 0
-400 -3639 0
-400 -670 -3640 0
c (0<=(SATLiteral(400) - aux903 + SATLiteral(670)))
670 3640 0
400 3640 0
400 670 3639 0
c ((SATLiteral(1075) - aux904 + SATLiteral(940))<=0)
-940 -3642 0
-1075 -3642 0
-1075 -940 -3643 0
c (0<=(SATLiteral(1075) - aux904 + SATLiteral(940)))
940 3643 0
1075 3643 0
1075 940 3642 0
c (( - aux905 + SATLiteral(801) + SATLiteral(265))<=0)
-265 -3645 0
-801 -3645 0
-801 -265 -3646 0
c (0<=( - aux905 + SATLiteral(801) + SATLiteral(265)))
265 3646 0
801 3646 0
801 265 3645 0
c (( - aux906 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3648 0
-535 -3648 0
-535 -1210 -3649 0
c (0<=( - aux906 + SATLiteral(535) + SATLiteral(1210)))
1210 3649 0
535 3649 0
535 1210 3648 0
c ((aux906 - aux907 + SATLiteral(130))<=0)
3648 -3651 0
3649 -3652 0
-130 -3651 0
-130 3648 -3652 0
-130 3649 -3654 0
c (0<=(aux906 - aux907 + SATLiteral(130)))
-3649 3654 0
-3648 3652 0
130 3654 0
130 -3649 3652 0
130 -3648 3651 0
c ((aux903 + aux905 - aux908)<=0)
3645 -3656 0
3646 -3657 0
3639 -3656 0
3639 3645 -3657 0
3639 3646 -3659 0
3640 -3657 0
3640 3645 -3659 0
3640 3646 -3661 0
c (0<=(aux903 + aux905 - aux908))
-3646 3661 0
-3645 3659 0
-3640 3661 0
-3640 -3646 3659 0
-3640 -3645 3657 0
-3639 3659 0
-3639 -3646 3657 0
-3639 -3645 3656 0
c ((SATLiteral(402) - aux909 + SATLiteral(672))<=0)
-672 -3663 0
-402 -3663 0
-402 -672 -3664 0
c (0<=(SATLiteral(402) - aux909 + SATLiteral(672)))
672 3664 0
402 3664 0
402 672 3663 0
c ((SATLiteral(1077) - aux910 + SATLiteral(942))<=0)
-942 -3666 0
-1077 -3666 0
-1077 -942 -3667 0
c (0<=(SATLiteral(1077) - aux910 + SATLiteral(942)))
942 3667 0
1077 3667 0
1077 942 3666 0
c (( - aux911 + SATLiteral(802) + SATLiteral(267))<=0)
-267 -3669 0
-802 -3669 0
-802 -267 -3670 0
c (0<=( - aux911 + SATLiteral(802) + SATLiteral(267)))
267 3670 0
802 3670 0
802 267 3669 0
c (( - aux912 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3672 0
-537 -3672 0
-537 -1212 -3673 0
c (0<=( - aux912 + SATLiteral(537) + SATLiteral(1212)))
1212 3673 0
537 3673 0
537 1212 3672 0
c ((aux912 - aux913 + SATLiteral(132))<=0)
3672 -3675 0
3673 -3676 0
-132 -3675 0
-132 3672 -3676 0
-132 3673 -3678 0
c (0<=(aux912 - aux913 + SATLiteral(132)))
-3673 3678 0
-3672 3676 0
132 3678 0
132 -3673 3676 0
132 -3672 3675 0
c ((aux909 + aux911 - aux914)<=0)
3669 -3680 0
3670 -3681 0
3663 -3680 0
3663 3669 -3681 0
3663 3670 -3683 0
3664 -3681 0
3664 3669 -3683 0
3664 3670 -3685 0
c (0<=(aux909 + aux911 - aux914))
-3670 3685 0
-3669 3683 0
-3664 3685 0
-3664 -3670 3683 0
-3664 -3669 3681 0
-3663 3683 0
-3663 -3670 3681 0
-3663 -3669 3680 0
c ((SATLiteral(404) - aux915 + SATLiteral(674))<=0)
-674 -3687 0
-404 -3687 0
-404 -674 -3688 0
c (0<=(SATLiteral(404) - aux915 + SATLiteral(674)))
674 3688 0
404 3688 0
404 674 3687 0
c ((SATLiteral(1079) - aux916 + SATLiteral(944))<=0)
-944 -3690 0
-1079 -3690 0
-1079 -944 -3691 0
c (0<=(SATLiteral(1079) - aux916 + SATLiteral(944)))
944 3691 0
1079 3691 0
1079 944 3690 0
c (( - aux917 + SATLiteral(803) + SATLiteral(269))<=0)
-269 -3693 0
-803 -3693 0
-803 -269 -3694 0
c (0<=( - aux917 + SATLiteral(803) + SATLiteral(269)))
269 3694 0
803 3694 0
803 269 3693 0
c (( - aux918 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3696 0
-539 -3696 0
-539 -1214 -3697 0
c (0<=( - aux918 + SATLiteral(539) + SATLiteral(1214)))
1214 3697 0
539 3697 0
539 1214 3696 0
c ((aux918 - aux919 + SATLiteral(134))<=0)
3696 -3699 0
3697 -3700 0
-134 -3699 0
-134 3696 -3700 0
-134 3697 -3702 0
c (0<=(aux918 - aux919 + SATLiteral(134)))
-3697 3702 0
-3696 3700 0
134 3702 0
134 -3697 3700 0
134 -3696 3699 0
c ((aux915 + aux917 - aux920)<=0)
3693 -3704 0
3694 -3705 0
3687 -3704 0
3687 3693 -3705 0
3687 3694 -3707 0
3688 -3705 0
3688 3693 -3707 0
3688 3694 -3709 0
c (0<=(aux915 + aux917 - aux920))
-3694 3709 0
-3693 3707 0
-3688 3709 0
-3688 -3694 3707 0
-3688 -3693 3705 0
-3687 3707 0
-3687 -3694 3705 0
-3687 -3693 3704 0
c ((SATLiteral(406) - aux921 + SATLiteral(676))<=0)
-676 -3711 0
-406 -3711 0
-406 -676 -3712 0
c (0<=(SATLiteral(406) - aux921 + SATLiteral(676)))
676 3712 0
406 3712 0
406 676 3711 0
c ((SATLiteral(1081) - aux922 + SATLiteral(946))<=0)
-946 -3714 0
-1081 -3714 0
-1081 -946 -3715 0
c (0<=(SATLiteral(1081) - aux922 + SATLiteral(946)))
946 3715 0
1081 3715 0
1081 946 3714 0
c (( - aux923 + SATLiteral(804) + SATLiteral(271))<=0)
-271 -3717 0
-804 -3717 0
-804 -271 -3718 0
c (0<=( - aux923 + SATLiteral(804) + SATLiteral(271)))
271 3718 0
804 3718 0
804 271 3717 0
c (( - aux924 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3720 0
-541 -3720 0
-541 -1216 -3721 0
c (0<=( - aux924 + SATLiteral(541) + SATLiteral(1216)))
1216 3721 0
541 3721 0
541 1216 3720 0
c ((aux924 - aux925 + SATLiteral(136))<=0)
3720 -3723 0
3721 -3724 0
-136 -3723 0
-136 3720 -3724 0
-136 3721 -3726 0
c (0<=(aux924 - aux925 + SATLiteral(136)))
-3721 3726 0
-3720 3724 0
136 3726 0
136 -3721 3724 0
136 -3720 3723 0
c ((aux921 + aux923 - aux926)<=0)
3717 -3728 0
3718 -3729 0
3711 -3728 0
3711 3717 -3729 0
3711 3718 -3731 0
3712 -3729 0
3712 3717 -3731 0
3712 3718 -3733 0
c (0<=(aux921 + aux923 - aux926))
-3718 3733 0
-3717 3731 0
-3712 3733 0
-3712 -3718 3731 0
-3712 -3717 3729 0
-3711 3731 0
-3711 -3718 3729 0
-3711 -3717 3728 0
c ((SATLiteral(-405) - aux927 + SATLiteral(-675))<=0)
675 -3735 0
405 -3735 0
405 675 -3736 0
c (0<=(SATLiteral(-405) - aux927 + SATLiteral(-675)))
-675 3736 0
-405 3736 0
-405 -675 3735 0
c ((SATLiteral(-1080) - aux928 + SATLiteral(-945))<=0)
945 -3738 0
1080 -3738 0
1080 945 -3739 0
c (0<=(SATLiteral(-1080) - aux928 + SATLiteral(-945)))
-945 3739 0
-1080 3739 0
-1080 -945 3738 0
c (( - aux929 + SATLiteral(805) + SATLiteral(-270))<=0)
270 -3741 0
-805 -3741 0
-805 270 -3742 0
c (0<=( - aux929 + SATLiteral(805) + SATLiteral(-270)))
-270 3742 0
805 3742 0
805 -270 3741 0
c (( - aux930 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3744 0
540 -3744 0
540 1215 -3745 0
c (0<=( - aux930 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3745 0
-540 3745 0
-540 -1215 3744 0
c ((aux930 - aux931 + SATLiteral(-135))<=0)
3744 -3747 0
3745 -3748 0
135 -3747 0
135 3744 -3748 0
135 3745 -3750 0
c (0<=(aux930 - aux931 + SATLiteral(-135)))
-3745 3750 0
-3744 3748 0
-135 3750 0
-135 -3745 3748 0
-135 -3744 3747 0
c ((aux927 + aux929 - aux932)<=0)
3741 -3752 0
3742 -3753 0
3735 -3752 0
3735 3741 -3753 0
3735 3742 -3755 0
3736 -3753 0
3736 3741 -3755 0
3736 3742 -3757 0
c (0<=(aux927 + aux929 - aux932))
-3742 3757 0
-3741 3755 0
-3736 3757 0
-3736 -3742 3755 0
-3736 -3741 3753 0
-3735 3755 0
-3735 -3742 3753 0
-3735 -3741 3752 0
c (( - aux933 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3759 0
-2 -3759 0
-2 -122 -3760 0
c (0<=( - aux933 + SATLiteral(2) + SATLiteral(122)))
122 3760 0
2 3760 0
2 122 3759 0
c (( - aux934 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3762 0
-17 -3762 0
-17 -107 -3763 0
c (0<=( - aux934 + SATLiteral(17) + SATLiteral(107)))
107 3763 0
17 3763 0
17 107 3762 0
c (( - aux935 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3765 0
-47 -3765 0
-47 -92 -3766 0
c (0<=( - aux935 + SATLiteral(47) + SATLiteral(92)))
92 3766 0
47 3766 0
47 92 3765 0
c (( - aux936 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3768 0
-62 -3768 0
-62 -77 -3769 0
c (0<=( - aux936 + SATLiteral(62) + SATLiteral(77)))
77 3769 0
62 3769 0
62 77 3768 0
c ((aux936 - aux937 + SATLiteral(32))<=0)
3768 -3771 0
3769 -3772 0
-32 -3771 0
-32 3768 -3772 0
-32 3769 -3774 0
c (0<=(aux936 - aux937 + SATLiteral(32)))
-3769 3774 0
-3768 3772 0
32 3774 0
32 -3769 3772 0
32 -3768 3771 0
c ((aux933 + aux935 - aux938)<=0)
3765 -3776 0
3766 -3777 0
3759 -3776 0
3759 3765 -3777 0
3759 3766 -3779 0
3760 -3777 0
3760 3765 -3779 0
3760 3766 -3781 0
c (0<=(aux933 + aux935 - aux938))
-3766 3781 0
-3765 3779 0
-3760 3781 0
-3760 -3766 3779 0
-3760 -3765 3777 0
-3759 3779 0
-3759 -3766 3777 0
-3759 -3765 3776 0
c (( - aux939 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3783 0
-4 -3783 0
-4 -124 -3784 0
c (0<=( - aux939 + SATLiteral(4) + SATLiteral(124)))
124 3784 0
4 3784 0
4 124 3783 0
c (( - aux940 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3786 0
-19 -3786 0
-19 -109 -3787 0
c (0<=( - aux940 + SATLiteral(19) + SATLiteral(109)))
109 3787 0
19 3787 0
19 109 3786 0
c (( - aux941 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3789 0
-49 -3789 0
-49 -94 -3790 0
c (0<=( - aux941 + SATLiteral(49) + SATLiteral(94)))
94 3790 0
49 3790 0
49 94 3789 0
c (( - aux942 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3792 0
-64 -3792 0
-64 -79 -3793 0
c (0<=( - aux942 + SATLiteral(64) + SATLiteral(79)))
79 3793 0
64 3793 0
64 79 3792 0
c ((aux942 - aux943 + SATLiteral(34))<=0)
3792 -3795 0
3793 -3796 0
-34 -3795 0
-34 3792 -3796 0
-34 3793 -3798 0
c (0<=(aux942 - aux943 + SATLiteral(34)))
-3793 3798 0
-3792 3796 0
34 3798 0
34 -3793 3796 0
34 -3792 3795 0
c ((aux939 + aux941 - aux944)<=0)
3789 -3800 0
3790 -3801 0
3783 -3800 0
3783 3789 -3801 0
3783 3790 -3803 0
3784 -3801 0
3784 3789 -3803 0
3784 3790 -3805 0
c (0<=(aux939 + aux941 - aux944))
-3790 3805 0
-3789 3803 0
-3784 3805 0
-3784 -3790 3803 0
-3784 -3789 3801 0
-3783 3803 0
-3783 -3790 3801 0
-3783 -3789 3800 0
c (( - aux945 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -3807 0
-6 -3807 0
-6 -126 -3808 0
c (0<=( - aux945 + SATLiteral(6) + SATLiteral(126)))
126 3808 0
6 3808 0
6 126 3807 0
c (( - aux946 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -3810 0
-21 -3810 0
-21 -111 -3811 0
c (0<=( - aux946 + SATLiteral(21) + SATLiteral(111)))
111 3811 0
21 3811 0
21 111 3810 0
c (( - aux947 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -3813 0
-51 -3813 0
-51 -96 -3814 0
c (0<=( - aux947 + SATLiteral(51) + SATLiteral(96)))
96 3814 0
51 3814 0
51 96 3813 0
c (( - aux948 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -3816 0
-66 -3816 0
-66 -81 -3817 0
c (0<=( - aux948 + SATLiteral(66) + SATLiteral(81)))
81 3817 0
66 3817 0
66 81 3816 0
c ((aux948 - aux949 + SATLiteral(36))<=0)
3816 -3819 0
3817 -3820 0
-36 -3819 0
-36 3816 -3820 0
-36 3817 -3822 0
c (0<=(aux948 - aux949 + SATLiteral(36)))
-3817 3822 0
-3816 3820 0
36 3822 0
36 -3817 3820 0
36 -3816 3819 0
c ((aux945 + aux947 - aux950)<=0)
3813 -3824 0
3814 -3825 0
3807 -3824 0
3807 3813 -3825 0
3807 3814 -3827 0
3808 -3825 0
3808 3813 -3827 0
3808 3814 -3829 0
c (0<=(aux945 + aux947 - aux950))
-3814 3829 0
-3813 3827 0
-3808 3829 0
-3808 -3814 3827 0
-3808 -3813 3825 0
-3807 3827 0
-3807 -3814 3825 0
-3807 -3813 3824 0
c (( - aux951 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -3831 0
-8 -3831 0
-8 -128 -3832 0
c (0<=( - aux951 + SATLiteral(8) + SATLiteral(128)))
128 3832 0
8 3832 0
8 128 3831 0
c (( - aux952 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -3834 0
-23 -3834 0
-23 -113 -3835 0
c (0<=( - aux952 + SATLiteral(23) + SATLiteral(113)))
113 3835 0
23 3835 0
23 113 3834 0
c (( - aux953 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -3837 0
-53 -3837 0
-53 -98 -3838 0
c (0<=( - aux953 + SATLiteral(53) + SATLiteral(98)))
98 3838 0
53 3838 0
53 98 3837 0
c (( - aux954 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -3840 0
-68 -3840 0
-68 -83 -3841 0
c (0<=( - aux954 + SATLiteral(68) + SATLiteral(83)))
83 3841 0
68 3841 0
68 83 3840 0
c ((aux954 - aux955 + SATLiteral(38))<=0)
3840 -3843 0
3841 -3844 0
-38 -3843 0
-38 3840 -3844 0
-38 3841 -3846 0
c (0<=(aux954 - aux955 + SATLiteral(38)))
-3841 3846 0
-3840 3844 0
38 3846 0
38 -3841 3844 0
38 -3840 3843 0
c ((aux951 + aux953 - aux956)<=0)
3837 -3848 0
3838 -3849 0
3831 -3848 0
3831 3837 -3849 0
3831 3838 -3851 0
3832 -3849 0
3832 3837 -3851 0
3832 3838 -3853 0
c (0<=(aux951 + aux953 - aux956))
-3838 3853 0
-3837 3851 0
-3832 3853 0
-3832 -3838 3851 0
-3832 -3837 3849 0
-3831 3851 0
-3831 -3838 3849 0
-3831 -3837 3848 0
c (( - aux957 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -3855 0
-10 -3855 0
-10 -130 -3856 0
c (0<=( - aux957 + SATLiteral(10) + SATLiteral(130)))
130 3856 0
10 3856 0
10 130 3855 0
c (( - aux958 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -3858 0
-25 -3858 0
-25 -115 -3859 0
c (0<=( - aux958 + SATLiteral(25) + SATLiteral(115)))
115 3859 0
25 3859 0
25 115 3858 0
c (( - aux959 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -3861 0
-55 -3861 0
-55 -100 -3862 0
c (0<=( - aux959 + SATLiteral(55) + SATLiteral(100)))
100 3862 0
55 3862 0
55 100 3861 0
c (( - aux960 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -3864 0
-70 -3864 0
-70 -85 -3865 0
c (0<=( - aux960 + SATLiteral(70) + SATLiteral(85)))
85 3865 0
70 3865 0
70 85 3864 0
c ((aux960 - aux961 + SATLiteral(40))<=0)
3864 -3867 0
3865 -3868 0
-40 -3867 0
-40 3864 -3868 0
-40 3865 -3870 0
c (0<=(aux960 - aux961 + SATLiteral(40)))
-3865 3870 0
-3864 3868 0
40 3870 0
40 -3865 3868 0
40 -3864 3867 0
c ((aux957 + aux959 - aux962)<=0)
3861 -3872 0
3862 -3873 0
3855 -3872 0
3855 3861 -3873 0
3855 3862 -3875 0
3856 -3873 0
3856 3861 -3875 0
3856 3862 -3877 0
c (0<=(aux957 + aux959 - aux962))
-3862 3877 0
-3861 3875 0
-3856 3877 0
-3856 -3862 3875 0
-3856 -3861 3873 0
-3855 3875 0
-3855 -3862 3873 0
-3855 -3861 3872 0
c (( - aux963 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -3879 0
-12 -3879 0
-12 -132 -3880 0
c (0<=( - aux963 + SATLiteral(12) + SATLiteral(132)))
132 3880 0
12 3880 0
12 132 3879 0
c (( - aux964 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -3882 0
-27 -3882 0
-27 -117 -3883 0
c (0<=( - aux964 + SATLiteral(27) + SATLiteral(117)))
117 3883 0
27 3883 0
27 117 3882 0
c (( - aux965 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -3885 0
-57 -3885 0
-57 -102 -3886 0
c (0<=( - aux965 + SATLiteral(57) + SATLiteral(102)))
102 3886 0
57 3886 0
57 102 3885 0
c (( - aux966 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -3888 0
-72 -3888 0
-72 -87 -3889 0
c (0<=( - aux966 + SATLiteral(72) + SATLiteral(87)))
87 3889 0
72 3889 0
72 87 3888 0
c ((aux966 - aux967 + SATLiteral(42))<=0)
3888 -3891 0
3889 -3892 0
-42 -3891 0
-42 3888 -3892 0
-42 3889 -3894 0
c (0<=(aux966 - aux967 + SATLiteral(42)))
-3889 3894 0
-3888 3892 0
42 3894 0
42 -3889 3892 0
42 -3888 3891 0
c ((aux963 + aux965 - aux968)<=0)
3885 -3896 0
3886 -3897 0
3879 -3896 0
3879 3885 -3897 0
3879 3886 -3899 0
3880 -3897 0
3880 3885 -3899 0
3880 3886 -3901 0
c (0<=(aux963 + aux965 - aux968))
-3886 3901 0
-3885 3899 0
-3880 3901 0
-3880 -3886 3899 0
-3880 -3885 3897 0
-3879 3899 0
-3879 -3886 3897 0
-3879 -3885 3896 0
c (( - aux969 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -3903 0
-14 -3903 0
-14 -134 -3904 0
c (0<=( - aux969 + SATLiteral(14) + SATLiteral(134)))
134 3904 0
14 3904 0
14 134 3903 0
c (( - aux970 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -3906 0
-29 -3906 0
-29 -119 -3907 0
c (0<=( - aux970 + SATLiteral(29) + SATLiteral(119)))
119 3907 0
29 3907 0
29 119 3906 0
c (( - aux971 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -3909 0
-59 -3909 0
-59 -104 -3910 0
c (0<=( - aux971 + SATLiteral(59) + SATLiteral(104)))
104 3910 0
59 3910 0
59 104 3909 0
c (( - aux972 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -3912 0
-74 -3912 0
-74 -89 -3913 0
c (0<=( - aux972 + SATLiteral(74) + SATLiteral(89)))
89 3913 0
74 3913 0
74 89 3912 0
c ((aux972 - aux973 + SATLiteral(44))<=0)
3912 -3915 0
3913 -3916 0
-44 -3915 0
-44 3912 -3916 0
-44 3913 -3918 0
c (0<=(aux972 - aux973 + SATLiteral(44)))
-3913 3918 0
-3912 3916 0
44 3918 0
44 -3913 3916 0
44 -3912 3915 0
c ((aux969 + aux971 - aux974)<=0)
3909 -3920 0
3910 -3921 0
3903 -3920 0
3903 3909 -3921 0
3903 3910 -3923 0
3904 -3921 0
3904 3909 -3923 0
3904 3910 -3925 0
c (0<=(aux969 + aux971 - aux974))
-3910 3925 0
-3909 3923 0
-3904 3925 0
-3904 -3910 3923 0
-3904 -3909 3921 0
-3903 3923 0
-3903 -3910 3921 0
-3903 -3909 3920 0
c (( - aux975 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -3927 0
-16 -3927 0
-16 -136 -3928 0
c (0<=( - aux975 + SATLiteral(16) + SATLiteral(136)))
136 3928 0
16 3928 0
16 136 3927 0
c (( - aux976 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -3930 0
-31 -3930 0
-31 -121 -3931 0
c (0<=( - aux976 + SATLiteral(31) + SATLiteral(121)))
121 3931 0
31 3931 0
31 121 3930 0
c (( - aux977 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -3933 0
-61 -3933 0
-61 -106 -3934 0
c (0<=( - aux977 + SATLiteral(61) + SATLiteral(106)))
106 3934 0
61 3934 0
61 106 3933 0
c (( - aux978 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -3936 0
-76 -3936 0
-76 -91 -3937 0
c (0<=( - aux978 + SATLiteral(76) + SATLiteral(91)))
91 3937 0
76 3937 0
76 91 3936 0
c ((aux978 - aux979 + SATLiteral(46))<=0)
3936 -3939 0
3937 -3940 0
-46 -3939 0
-46 3936 -3940 0
-46 3937 -3942 0
c (0<=(aux978 - aux979 + SATLiteral(46)))
-3937 3942 0
-3936 3940 0
46 3942 0
46 -3937 3940 0
46 -3936 3939 0
c ((aux975 + aux977 - aux980)<=0)
3933 -3944 0
3934 -3945 0
3927 -3944 0
3927 3933 -3945 0
3927 3934 -3947 0
3928 -3945 0
3928 3933 -3947 0
3928 3934 -3949 0
c (0<=(aux975 + aux977 - aux980))
-3934 3949 0
-3933 3947 0
-3928 3949 0
-3928 -3934 3947 0
-3928 -3933 3945 0
-3927 3947 0
-3927 -3934 3945 0
-3927 -3933 3944 0
c (( - aux981 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -3951 0
15 -3951 0
15 135 -3952 0
c (0<=( - aux981 + SATLiteral(-15) + SATLiteral(-135)))
-135 3952 0
-15 3952 0
-15 -135 3951 0
c (( - aux982 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -3954 0
30 -3954 0
30 120 -3955 0
c (0<=( - aux982 + SATLiteral(-30) + SATLiteral(-120)))
-120 3955 0
-30 3955 0
-30 -120 3954 0
c (( - aux983 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -3957 0
60 -3957 0
60 105 -3958 0
c (0<=( - aux983 + SATLiteral(-60) + SATLiteral(-105)))
-105 3958 0
-60 3958 0
-60 -105 3957 0
c (( - aux984 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -3960 0
75 -3960 0
75 90 -3961 0
c (0<=( - aux984 + SATLiteral(-75) + SATLiteral(-90)))
-90 3961 0
-75 3961 0
-75 -90 3960 0
c ((aux984 - aux985 + SATLiteral(-45))<=0)
3960 -3963 0
3961 -3964 0
45 -3963 0
45 3960 -3964 0
45 3961 -3966 0
c (0<=(aux984 - aux985 + SATLiteral(-45)))
-3961 3966 0
-3960 3964 0
-45 3966 0
-45 -3961 3964 0
-45 -3960 3963 0
c ((aux981 + aux983 - aux986)<=0)
3957 -3968 0
3958 -3969 0
3951 -3968 0
3951 3957 -3969 0
3951 3958 -3971 0
3952 -3969 0
3952 3957 -3971 0
3952 3958 -3973 0
c (0<=(aux981 + aux983 - aux986))
-3958 3973 0
-3957 3971 0
-3952 3973 0
-3952 -3958 3971 0
-3952 -3957 3969 0
-3951 3971 0
-3951 -3958 3969 0
-3951 -3957 3968 0
c (( - aux987 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -3975 0
-137 -3975 0
-137 -257 -3976 0
c (0<=( - aux987 + SATLiteral(137) + SATLiteral(257)))
257 3976 0
137 3976 0
137 257 3975 0
c (( - aux988 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -3978 0
-152 -3978 0
-152 -242 -3979 0
c (0<=( - aux988 + SATLiteral(152) + SATLiteral(242)))
242 3979 0
152 3979 0
152 242 3978 0
c (( - aux989 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -3981 0
-182 -3981 0
-182 -227 -3982 0
c (0<=( - aux989 + SATLiteral(182) + SATLiteral(227)))
227 3982 0
182 3982 0
182 227 3981 0
c (( - aux990 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -3984 0
-197 -3984 0
-197 -212 -3985 0
c (0<=( - aux990 + SATLiteral(197) + SATLiteral(212)))
212 3985 0
197 3985 0
197 212 3984 0
c ((aux990 - aux991 + SATLiteral(167))<=0)
3984 -3987 0
3985 -3988 0
-167 -3987 0
-167 3984 -3988 0
-167 3985 -3990 0
c (0<=(aux990 - aux991 + SATLiteral(167)))
-3985 3990 0
-3984 3988 0
167 3990 0
167 -3985 3988 0
167 -3984 3987 0
c ((aux987 + aux989 - aux992)<=0)
3981 -3992 0
3982 -3993 0
3975 -3992 0
3975 3981 -3993 0
3975 3982 -3995 0
3976 -3993 0
3976 3981 -3995 0
3976 3982 -3997 0
c (0<=(aux987 + aux989 - aux992))
-3982 3997 0
-3981 3995 0
-3976 3997 0
-3976 -3982 3995 0
-3976 -3981 3993 0
-3975 3995 0
-3975 -3982 3993 0
-3975 -3981 3992 0
c (( - aux993 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -3999 0
-139 -3999 0
-139 -259 -4000 0
c (0<=( - aux993 + SATLiteral(139) + SATLiteral(259)))
259 4000 0
139 4000 0
139 259 3999 0
c (( - aux994 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4002 0
-154 -4002 0
-154 -244 -4003 0
c (0<=( - aux994 + SATLiteral(154) + SATLiteral(244)))
244 4003 0
154 4003 0
154 244 4002 0
c (( - aux995 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4005 0
-184 -4005 0
-184 -229 -4006 0
c (0<=( - aux995 + SATLiteral(184) + SATLiteral(229)))
229 4006 0
184 4006 0
184 229 4005 0
c (( - aux996 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4008 0
-199 -4008 0
-199 -214 -4009 0
c (0<=( - aux996 + SATLiteral(199) + SATLiteral(214)))
214 4009 0
199 4009 0
199 214 4008 0
c ((aux996 - aux997 + SATLiteral(169))<=0)
4008 -4011 0
4009 -4012 0
-169 -4011 0
-169 4008 -4012 0
-169 4009 -4014 0
c (0<=(aux996 - aux997 + SATLiteral(169)))
-4009 4014 0
-4008 4012 0
169 4014 0
169 -4009 4012 0
169 -4008 4011 0
c ((aux993 + aux995 - aux998)<=0)
4005 -4016 0
4006 -4017 0
3999 -4016 0
3999 4005 -4017 0
3999 4006 -4019 0
4000 -4017 0
4000 4005 -4019 0
4000 4006 -4021 0
c (0<=(aux993 + aux995 - aux998))
-4006 4021 0
-4005 4019 0
-4000 4021 0
-4000 -4006 4019 0
-4000 -4005 4017 0
-3999 4019 0
-3999 -4006 4017 0
-3999 -4005 4016 0
c (( - aux999 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4023 0
-141 -4023 0
-141 -261 -4024 0
c (0<=( - aux999 + SATLiteral(141) + SATLiteral(261)))
261 4024 0
141 4024 0
141 261 4023 0
c (( - aux1000 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4026 0
-156 -4026 0
-156 -246 -4027 0
c (0<=( - aux1000 + SATLiteral(156) + SATLiteral(246)))
246 4027 0
156 4027 0
156 246 4026 0
c (( - aux1001 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4029 0
-186 -4029 0
-186 -231 -4030 0
c (0<=( - aux1001 + SATLiteral(186) + SATLiteral(231)))
231 4030 0
186 4030 0
186 231 4029 0
c (( - aux1002 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4032 0
-201 -4032 0
-201 -216 -4033 0
c (0<=( - aux1002 + SATLiteral(201) + SATLiteral(216)))
216 4033 0
201 4033 0
201 216 4032 0
c ((aux1002 - aux1003 + SATLiteral(171))<=0)
4032 -4035 0
4033 -4036 0
-171 -4035 0
-171 4032 -4036 0
-171 4033 -4038 0
c (0<=(aux1002 - aux1003 + SATLiteral(171)))
-4033 4038 0
-4032 4036 0
171 4038 0
171 -4033 4036 0
171 -4032 4035 0
c ((aux999 + aux1001 - aux1004)<=0)
4029 -4040 0
4030 -4041 0
4023 -4040 0
4023 4029 -4041 0
4023 4030 -4043 0
4024 -4041 0
4024 4029 -4043 0
4024 4030 -4045 0
c (0<=(aux999 + aux1001 - aux1004))
-4030 4045 0
-4029 4043 0
-4024 4045 0
-4024 -4030 4043 0
-4024 -4029 4041 0
-4023 4043 0
-4023 -4030 4041 0
-4023 -4029 4040 0
c (( - aux1005 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4047 0
-143 -4047 0
-143 -263 -4048 0
c (0<=( - aux1005 + SATLiteral(143) + SATLiteral(263)))
263 4048 0
143 4048 0
143 263 4047 0
c (( - aux1006 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4050 0
-158 -4050 0
-158 -248 -4051 0
c (0<=( - aux1006 + SATLiteral(158) + SATLiteral(248)))
248 4051 0
158 4051 0
158 248 4050 0
c (( - aux1007 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4053 0
-188 -4053 0
-188 -233 -4054 0
c (0<=( - aux1007 + SATLiteral(188) + SATLiteral(233)))
233 4054 0
188 4054 0
188 233 4053 0
c (( - aux1008 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4056 0
-203 -4056 0
-203 -218 -4057 0
c (0<=( - aux1008 + SATLiteral(203) + SATLiteral(218)))
218 4057 0
203 4057 0
203 218 4056 0
c ((aux1008 - aux1009 + SATLiteral(173))<=0)
4056 -4059 0
4057 -4060 0
-173 -4059 0
-173 4056 -4060 0
-173 4057 -4062 0
c (0<=(aux1008 - aux1009 + SATLiteral(173)))
-4057 4062 0
-4056 4060 0
173 4062 0
173 -4057 4060 0
173 -4056 4059 0
c ((aux1005 + aux1007 - aux1010)<=0)
4053 -4064 0
4054 -4065 0
4047 -4064 0
4047 4053 -4065 0
4047 4054 -4067 0
4048 -4065 0
4048 4053 -4067 0
4048 4054 -4069 0
c (0<=(aux1005 + aux1007 - aux1010))
-4054 4069 0
-4053 4067 0
-4048 4069 0
-4048 -4054 4067 0
-4048 -4053 4065 0
-4047 4067 0
-4047 -4054 4065 0
-4047 -4053 4064 0
c (( - aux1011 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4071 0
-145 -4071 0
-145 -265 -4072 0
c (0<=( - aux1011 + SATLiteral(145) + SATLiteral(265)))
265 4072 0
145 4072 0
145 265 4071 0
c (( - aux1012 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4074 0
-160 -4074 0
-160 -250 -4075 0
c (0<=( - aux1012 + SATLiteral(160) + SATLiteral(250)))
250 4075 0
160 4075 0
160 250 4074 0
c (( - aux1013 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4077 0
-190 -4077 0
-190 -235 -4078 0
c (0<=( - aux1013 + SATLiteral(190) + SATLiteral(235)))
235 4078 0
190 4078 0
190 235 4077 0
c (( - aux1014 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4080 0
-205 -4080 0
-205 -220 -4081 0
c (0<=( - aux1014 + SATLiteral(205) + SATLiteral(220)))
220 4081 0
205 4081 0
205 220 4080 0
c ((aux1014 - aux1015 + SATLiteral(175))<=0)
4080 -4083 0
4081 -4084 0
-175 -4083 0
-175 4080 -4084 0
-175 4081 -4086 0
c (0<=(aux1014 - aux1015 + SATLiteral(175)))
-4081 4086 0
-4080 4084 0
175 4086 0
175 -4081 4084 0
175 -4080 4083 0
c ((aux1011 + aux1013 - aux1016)<=0)
4077 -4088 0
4078 -4089 0
4071 -4088 0
4071 4077 -4089 0
4071 4078 -4091 0
4072 -4089 0
4072 4077 -4091 0
4072 4078 -4093 0
c (0<=(aux1011 + aux1013 - aux1016))
-4078 4093 0
-4077 4091 0
-4072 4093 0
-4072 -4078 4091 0
-4072 -4077 4089 0
-4071 4091 0
-4071 -4078 4089 0
-4071 -4077 4088 0
c (( - aux1017 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4095 0
-147 -4095 0
-147 -267 -4096 0
c (0<=( - aux1017 + SATLiteral(147) + SATLiteral(267)))
267 4096 0
147 4096 0
147 267 4095 0
c (( - aux1018 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4098 0
-162 -4098 0
-162 -252 -4099 0
c (0<=( - aux1018 + SATLiteral(162) + SATLiteral(252)))
252 4099 0
162 4099 0
162 252 4098 0
c (( - aux1019 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4101 0
-192 -4101 0
-192 -237 -4102 0
c (0<=( - aux1019 + SATLiteral(192) + SATLiteral(237)))
237 4102 0
192 4102 0
192 237 4101 0
c (( - aux1020 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4104 0
-207 -4104 0
-207 -222 -4105 0
c (0<=( - aux1020 + SATLiteral(207) + SATLiteral(222)))
222 4105 0
207 4105 0
207 222 4104 0
c ((aux1020 - aux1021 + SATLiteral(177))<=0)
4104 -4107 0
4105 -4108 0
-177 -4107 0
-177 4104 -4108 0
-177 4105 -4110 0
c (0<=(aux1020 - aux1021 + SATLiteral(177)))
-4105 4110 0
-4104 4108 0
177 4110 0
177 -4105 4108 0
177 -4104 4107 0
c ((aux1017 + aux1019 - aux1022)<=0)
4101 -4112 0
4102 -4113 0
4095 -4112 0
4095 4101 -4113 0
4095 4102 -4115 0
4096 -4113 0
4096 4101 -4115 0
4096 4102 -4117 0
c (0<=(aux1017 + aux1019 - aux1022))
-4102 4117 0
-4101 4115 0
-4096 4117 0
-4096 -4102 4115 0
-4096 -4101 4113 0
-4095 4115 0
-4095 -4102 4113 0
-4095 -4101 4112 0
c (( - aux1023 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4119 0
-149 -4119 0
-149 -269 -4120 0
c (0<=( - aux1023 + SATLiteral(149) + SATLiteral(269)))
269 4120 0
149 4120 0
149 269 4119 0
c (( - aux1024 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4122 0
-164 -4122 0
-164 -254 -4123 0
c (0<=( - aux1024 + SATLiteral(164) + SATLiteral(254)))
254 4123 0
164 4123 0
164 254 4122 0
c (( - aux1025 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4125 0
-194 -4125 0
-194 -239 -4126 0
c (0<=( - aux1025 + SATLiteral(194) + SATLiteral(239)))
239 4126 0
194 4126 0
194 239 4125 0
c (( - aux1026 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4128 0
-209 -4128 0
-209 -224 -4129 0
c (0<=( - aux1026 + SATLiteral(209) + SATLiteral(224)))
224 4129 0
209 4129 0
209 224 4128 0
c ((aux1026 - aux1027 + SATLiteral(179))<=0)
4128 -4131 0
4129 -4132 0
-179 -4131 0
-179 4128 -4132 0
-179 4129 -4134 0
c (0<=(aux1026 - aux1027 + SATLiteral(179)))
-4129 4134 0
-4128 4132 0
179 4134 0
179 -4129 4132 0
179 -4128 4131 0
c ((aux1023 + aux1025 - aux1028)<=0)
4125 -4136 0
4126 -4137 0
4119 -4136 0
4119 4125 -4137 0
4119 4126 -4139 0
4120 -4137 0
4120 4125 -4139 0
4120 4126 -4141 0
c (0<=(aux1023 + aux1025 - aux1028))
-4126 4141 0
-4125 4139 0
-4120 4141 0
-4120 -4126 4139 0
-4120 -4125 4137 0
-4119 4139 0
-4119 -4126 4137 0
-4119 -4125 4136 0
c (( - aux1029 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4143 0
-151 -4143 0
-151 -271 -4144 0
c (0<=( - aux1029 + SATLiteral(151) + SATLiteral(271)))
271 4144 0
151 4144 0
151 271 4143 0
c (( - aux1030 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4146 0
-166 -4146 0
-166 -256 -4147 0
c (0<=( - aux1030 + SATLiteral(166) + SATLiteral(256)))
256 4147 0
166 4147 0
166 256 4146 0
c (( - aux1031 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4149 0
-196 -4149 0
-196 -241 -4150 0
c (0<=( - aux1031 + SATLiteral(196) + SATLiteral(241)))
241 4150 0
196 4150 0
196 241 4149 0
c (( - aux1032 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4152 0
-211 -4152 0
-211 -226 -4153 0
c (0<=( - aux1032 + SATLiteral(211) + SATLiteral(226)))
226 4153 0
211 4153 0
211 226 4152 0
c ((aux1032 - aux1033 + SATLiteral(181))<=0)
4152 -4155 0
4153 -4156 0
-181 -4155 0
-181 4152 -4156 0
-181 4153 -4158 0
c (0<=(aux1032 - aux1033 + SATLiteral(181)))
-4153 4158 0
-4152 4156 0
181 4158 0
181 -4153 4156 0
181 -4152 4155 0
c ((aux1029 + aux1031 - aux1034)<=0)
4149 -4160 0
4150 -4161 0
4143 -4160 0
4143 4149 -4161 0
4143 4150 -4163 0
4144 -4161 0
4144 4149 -4163 0
4144 4150 -4165 0
c (0<=(aux1029 + aux1031 - aux1034))
-4150 4165 0
-4149 4163 0
-4144 4165 0
-4144 -4150 4163 0
-4144 -4149 4161 0
-4143 4163 0
-4143 -4150 4161 0
-4143 -4149 4160 0
c (( - aux1035 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4167 0
150 -4167 0
150 270 -4168 0
c (0<=( - aux1035 + SATLiteral(-150) + SATLiteral(-270)))
-270 4168 0
-150 4168 0
-150 -270 4167 0
c (( - aux1036 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4170 0
165 -4170 0
165 255 -4171 0
c (0<=( - aux1036 + SATLiteral(-165) + SATLiteral(-255)))
-255 4171 0
-165 4171 0
-165 -255 4170 0
c (( - aux1037 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4173 0
195 -4173 0
195 240 -4174 0
c (0<=( - aux1037 + SATLiteral(-195) + SATLiteral(-240)))
-240 4174 0
-195 4174 0
-195 -240 4173 0
c (( - aux1038 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4176 0
210 -4176 0
210 225 -4177 0
c (0<=( - aux1038 + SATLiteral(-210) + SATLiteral(-225)))
-225 4177 0
-210 4177 0
-210 -225 4176 0
c ((aux1038 - aux1039 + SATLiteral(-180))<=0)
4176 -4179 0
4177 -4180 0
180 -4179 0
180 4176 -4180 0
180 4177 -4182 0
c (0<=(aux1038 - aux1039 + SATLiteral(-180)))
-4177 4182 0
-4176 4180 0
-180 4182 0
-180 -4177 4180 0
-180 -4176 4179 0
c ((aux1035 + aux1037 - aux1040)<=0)
4173 -4184 0
4174 -4185 0
4167 -4184 0
4167 4173 -4185 0
4167 4174 -4187 0
4168 -4185 0
4168 4173 -4187 0
4168 4174 -4189 0
c (0<=(aux1035 + aux1037 - aux1040))
-4174 4189 0
-4173 4187 0
-4168 4189 0
-4168 -4174 4187 0
-4168 -4173 4185 0
-4167 4187 0
-4167 -4174 4185 0
-4167 -4173 4184 0
c ((SATLiteral(272) + SATLiteral(392) - aux1041)<=0)
-392 -4191 0
-272 -4191 0
-272 -392 -4192 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1041))
392 4192 0
272 4192 0
272 392 4191 0
c ((SATLiteral(287) + SATLiteral(377) - aux1042)<=0)
-377 -4194 0
-287 -4194 0
-287 -377 -4195 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1042))
377 4195 0
287 4195 0
287 377 4194 0
c ((SATLiteral(317) + SATLiteral(362) - aux1043)<=0)
-362 -4197 0
-317 -4197 0
-317 -362 -4198 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1043))
362 4198 0
317 4198 0
317 362 4197 0
c ((SATLiteral(332) + SATLiteral(347) - aux1044)<=0)
-347 -4200 0
-332 -4200 0
-332 -347 -4201 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1044))
347 4201 0
332 4201 0
332 347 4200 0
c ((SATLiteral(302) + aux1044 - aux1045)<=0)
4200 -4203 0
4201 -4204 0
-302 -4203 0
-302 4200 -4204 0
-302 4201 -4206 0
c (0<=(SATLiteral(302) + aux1044 - aux1045))
-4201 4206 0
-4200 4204 0
302 4206 0
302 -4201 4204 0
302 -4200 4203 0
c ((aux1041 + aux1043 - aux1046)<=0)
4197 -4208 0
4198 -4209 0
4191 -4208 0
4191 4197 -4209 0
4191 4198 -4211 0
4192 -4209 0
4192 4197 -4211 0
4192 4198 -4213 0
c (0<=(aux1041 + aux1043 - aux1046))
-4198 4213 0
-4197 4211 0
-4192 4213 0
-4192 -4198 4211 0
-4192 -4197 4209 0
-4191 4211 0
-4191 -4198 4209 0
-4191 -4197 4208 0
c ((SATLiteral(274) + SATLiteral(394) - aux1047)<=0)
-394 -4215 0
-274 -4215 0
-274 -394 -4216 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1047))
394 4216 0
274 4216 0
274 394 4215 0
c ((SATLiteral(289) + SATLiteral(379) - aux1048)<=0)
-379 -4218 0
-289 -4218 0
-289 -379 -4219 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1048))
379 4219 0
289 4219 0
289 379 4218 0
c ((SATLiteral(319) + SATLiteral(364) - aux1049)<=0)
-364 -4221 0
-319 -4221 0
-319 -364 -4222 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1049))
364 4222 0
319 4222 0
319 364 4221 0
c ((SATLiteral(334) + SATLiteral(349) - aux1050)<=0)
-349 -4224 0
-334 -4224 0
-334 -349 -4225 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1050))
349 4225 0
334 4225 0
334 349 4224 0
c ((SATLiteral(304) + aux1050 - aux1051)<=0)
4224 -4227 0
4225 -4228 0
-304 -4227 0
-304 4224 -4228 0
-304 4225 -4230 0
c (0<=(SATLiteral(304) + aux1050 - aux1051))
-4225 4230 0
-4224 4228 0
304 4230 0
304 -4225 4228 0
304 -4224 4227 0
c ((aux1047 + aux1049 - aux1052)<=0)
4221 -4232 0
4222 -4233 0
4215 -4232 0
4215 4221 -4233 0
4215 4222 -4235 0
4216 -4233 0
4216 4221 -4235 0
4216 4222 -4237 0
c (0<=(aux1047 + aux1049 - aux1052))
-4222 4237 0
-4221 4235 0
-4216 4237 0
-4216 -4222 4235 0
-4216 -4221 4233 0
-4215 4235 0
-4215 -4222 4233 0
-4215 -4221 4232 0
c ((SATLiteral(276) + SATLiteral(396) - aux1053)<=0)
-396 -4239 0
-276 -4239 0
-276 -396 -4240 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1053))
396 4240 0
276 4240 0
276 396 4239 0
c ((SATLiteral(291) + SATLiteral(381) - aux1054)<=0)
-381 -4242 0
-291 -4242 0
-291 -381 -4243 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1054))
381 4243 0
291 4243 0
291 381 4242 0
c ((SATLiteral(321) + SATLiteral(366) - aux1055)<=0)
-366 -4245 0
-321 -4245 0
-321 -366 -4246 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1055))
366 4246 0
321 4246 0
321 366 4245 0
c ((SATLiteral(336) + SATLiteral(351) - aux1056)<=0)
-351 -4248 0
-336 -4248 0
-336 -351 -4249 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1056))
351 4249 0
336 4249 0
336 351 4248 0
c ((SATLiteral(306) + aux1056 - aux1057)<=0)
4248 -4251 0
4249 -4252 0
-306 -4251 0
-306 4248 -4252 0
-306 4249 -4254 0
c (0<=(SATLiteral(306) + aux1056 - aux1057))
-4249 4254 0
-4248 4252 0
306 4254 0
306 -4249 4252 0
306 -4248 4251 0
c ((aux1053 + aux1055 - aux1058)<=0)
4245 -4256 0
4246 -4257 0
4239 -4256 0
4239 4245 -4257 0
4239 4246 -4259 0
4240 -4257 0
4240 4245 -4259 0
4240 4246 -4261 0
c (0<=(aux1053 + aux1055 - aux1058))
-4246 4261 0
-4245 4259 0
-4240 4261 0
-4240 -4246 4259 0
-4240 -4245 4257 0
-4239 4259 0
-4239 -4246 4257 0
-4239 -4245 4256 0
c ((SATLiteral(278) + SATLiteral(398) - aux1059)<=0)
-398 -4263 0
-278 -4263 0
-278 -398 -4264 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1059))
398 4264 0
278 4264 0
278 398 4263 0
c ((SATLiteral(293) + SATLiteral(383) - aux1060)<=0)
-383 -4266 0
-293 -4266 0
-293 -383 -4267 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1060))
383 4267 0
293 4267 0
293 383 4266 0
c ((SATLiteral(323) + SATLiteral(368) - aux1061)<=0)
-368 -4269 0
-323 -4269 0
-323 -368 -4270 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1061))
368 4270 0
323 4270 0
323 368 4269 0
c ((SATLiteral(338) + SATLiteral(353) - aux1062)<=0)
-353 -4272 0
-338 -4272 0
-338 -353 -4273 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1062))
353 4273 0
338 4273 0
338 353 4272 0
c ((SATLiteral(308) + aux1062 - aux1063)<=0)
4272 -4275 0
4273 -4276 0
-308 -4275 0
-308 4272 -4276 0
-308 4273 -4278 0
c (0<=(SATLiteral(308) + aux1062 - aux1063))
-4273 4278 0
-4272 4276 0
308 4278 0
308 -4273 4276 0
308 -4272 4275 0
c ((aux1059 + aux1061 - aux1064)<=0)
4269 -4280 0
4270 -4281 0
4263 -4280 0
4263 4269 -4281 0
4263 4270 -4283 0
4264 -4281 0
4264 4269 -4283 0
4264 4270 -4285 0
c (0<=(aux1059 + aux1061 - aux1064))
-4270 4285 0
-4269 4283 0
-4264 4285 0
-4264 -4270 4283 0
-4264 -4269 4281 0
-4263 4283 0
-4263 -4270 4281 0
-4263 -4269 4280 0
c ((SATLiteral(280) + SATLiteral(400) - aux1065)<=0)
-400 -4287 0
-280 -4287 0
-280 -400 -4288 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1065))
400 4288 0
280 4288 0
280 400 4287 0
c ((SATLiteral(295) + SATLiteral(385) - aux1066)<=0)
-385 -4290 0
-295 -4290 0
-295 -385 -4291 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1066))
385 4291 0
295 4291 0
295 385 4290 0
c ((SATLiteral(325) + SATLiteral(370) - aux1067)<=0)
-370 -4293 0
-325 -4293 0
-325 -370 -4294 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1067))
370 4294 0
325 4294 0
325 370 4293 0
c ((SATLiteral(340) + SATLiteral(355) - aux1068)<=0)
-355 -4296 0
-340 -4296 0
-340 -355 -4297 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1068))
355 4297 0
340 4297 0
340 355 4296 0
c ((SATLiteral(310) + aux1068 - aux1069)<=0)
4296 -4299 0
4297 -4300 0
-310 -4299 0
-310 4296 -4300 0
-310 4297 -4302 0
c (0<=(SATLiteral(310) + aux1068 - aux1069))
-4297 4302 0
-4296 4300 0
310 4302 0
310 -4297 4300 0
310 -4296 4299 0
c ((aux1065 + aux1067 - aux1070)<=0)
4293 -4304 0
4294 -4305 0
4287 -4304 0
4287 4293 -4305 0
4287 4294 -4307 0
4288 -4305 0
4288 4293 -4307 0
4288 4294 -4309 0
c (0<=(aux1065 + aux1067 - aux1070))
-4294 4309 0
-4293 4307 0
-4288 4309 0
-4288 -4294 4307 0
-4288 -4293 4305 0
-4287 4307 0
-4287 -4294 4305 0
-4287 -4293 4304 0
c ((SATLiteral(282) + SATLiteral(402) - aux1071)<=0)
-402 -4311 0
-282 -4311 0
-282 -402 -4312 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1071))
402 4312 0
282 4312 0
282 402 4311 0
c ((SATLiteral(297) + SATLiteral(387) - aux1072)<=0)
-387 -4314 0
-297 -4314 0
-297 -387 -4315 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1072))
387 4315 0
297 4315 0
297 387 4314 0
c ((SATLiteral(327) + SATLiteral(372) - aux1073)<=0)
-372 -4317 0
-327 -4317 0
-327 -372 -4318 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1073))
372 4318 0
327 4318 0
327 372 4317 0
c ((SATLiteral(342) + SATLiteral(357) - aux1074)<=0)
-357 -4320 0
-342 -4320 0
-342 -357 -4321 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1074))
357 4321 0
342 4321 0
342 357 4320 0
c ((SATLiteral(312) + aux1074 - aux1075)<=0)
4320 -4323 0
4321 -4324 0
-312 -4323 0
-312 4320 -4324 0
-312 4321 -4326 0
c (0<=(SATLiteral(312) + aux1074 - aux1075))
-4321 4326 0
-4320 4324 0
312 4326 0
312 -4321 4324 0
312 -4320 4323 0
c ((aux1071 + aux1073 - aux1076)<=0)
4317 -4328 0
4318 -4329 0
4311 -4328 0
4311 4317 -4329 0
4311 4318 -4331 0
4312 -4329 0
4312 4317 -4331 0
4312 4318 -4333 0
c (0<=(aux1071 + aux1073 - aux1076))
-4318 4333 0
-4317 4331 0
-4312 4333 0
-4312 -4318 4331 0
-4312 -4317 4329 0
-4311 4331 0
-4311 -4318 4329 0
-4311 -4317 4328 0
c ((SATLiteral(284) + SATLiteral(404) - aux1077)<=0)
-404 -4335 0
-284 -4335 0
-284 -404 -4336 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1077))
404 4336 0
284 4336 0
284 404 4335 0
c ((SATLiteral(299) + SATLiteral(389) - aux1078)<=0)
-389 -4338 0
-299 -4338 0
-299 -389 -4339 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1078))
389 4339 0
299 4339 0
299 389 4338 0
c ((SATLiteral(329) + SATLiteral(374) - aux1079)<=0)
-374 -4341 0
-329 -4341 0
-329 -374 -4342 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1079))
374 4342 0
329 4342 0
329 374 4341 0
c ((SATLiteral(344) + SATLiteral(359) - aux1080)<=0)
-359 -4344 0
-344 -4344 0
-344 -359 -4345 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1080))
359 4345 0
344 4345 0
344 359 4344 0
c ((SATLiteral(314) + aux1080 - aux1081)<=0)
4344 -4347 0
4345 -4348 0
-314 -4347 0
-314 4344 -4348 0
-314 4345 -4350 0
c (0<=(SATLiteral(314) + aux1080 - aux1081))
-4345 4350 0
-4344 4348 0
314 4350 0
314 -4345 4348 0
314 -4344 4347 0
c ((aux1077 + aux1079 - aux1082)<=0)
4341 -4352 0
4342 -4353 0
4335 -4352 0
4335 4341 -4353 0
4335 4342 -4355 0
4336 -4353 0
4336 4341 -4355 0
4336 4342 -4357 0
c (0<=(aux1077 + aux1079 - aux1082))
-4342 4357 0
-4341 4355 0
-4336 4357 0
-4336 -4342 4355 0
-4336 -4341 4353 0
-4335 4355 0
-4335 -4342 4353 0
-4335 -4341 4352 0
c ((SATLiteral(286) + SATLiteral(406) - aux1083)<=0)
-406 -4359 0
-286 -4359 0
-286 -406 -4360 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1083))
406 4360 0
286 4360 0
286 406 4359 0
c ((SATLiteral(301) + SATLiteral(391) - aux1084)<=0)
-391 -4362 0
-301 -4362 0
-301 -391 -4363 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1084))
391 4363 0
301 4363 0
301 391 4362 0
c ((SATLiteral(331) + SATLiteral(376) - aux1085)<=0)
-376 -4365 0
-331 -4365 0
-331 -376 -4366 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1085))
376 4366 0
331 4366 0
331 376 4365 0
c ((SATLiteral(346) + SATLiteral(361) - aux1086)<=0)
-361 -4368 0
-346 -4368 0
-346 -361 -4369 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1086))
361 4369 0
346 4369 0
346 361 4368 0
c ((SATLiteral(316) + aux1086 - aux1087)<=0)
4368 -4371 0
4369 -4372 0
-316 -4371 0
-316 4368 -4372 0
-316 4369 -4374 0
c (0<=(SATLiteral(316) + aux1086 - aux1087))
-4369 4374 0
-4368 4372 0
316 4374 0
316 -4369 4372 0
316 -4368 4371 0
c ((aux1083 + aux1085 - aux1088)<=0)
4365 -4376 0
4366 -4377 0
4359 -4376 0
4359 4365 -4377 0
4359 4366 -4379 0
4360 -4377 0
4360 4365 -4379 0
4360 4366 -4381 0
c (0<=(aux1083 + aux1085 - aux1088))
-4366 4381 0
-4365 4379 0
-4360 4381 0
-4360 -4366 4379 0
-4360 -4365 4377 0
-4359 4379 0
-4359 -4366 4377 0
-4359 -4365 4376 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1089)<=0)
405 -4383 0
285 -4383 0
285 405 -4384 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1089))
-405 4384 0
-285 4384 0
-285 -405 4383 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1090)<=0)
390 -4386 0
300 -4386 0
300 390 -4387 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1090))
-390 4387 0
-300 4387 0
-300 -390 4386 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1091)<=0)
375 -4389 0
330 -4389 0
330 375 -4390 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1091))
-375 4390 0
-330 4390 0
-330 -375 4389 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1092)<=0)
360 -4392 0
345 -4392 0
345 360 -4393 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1092))
-360 4393 0
-345 4393 0
-345 -360 4392 0
c ((SATLiteral(-315) + aux1092 - aux1093)<=0)
4392 -4395 0
4393 -4396 0
315 -4395 0
315 4392 -4396 0
315 4393 -4398 0
c (0<=(SATLiteral(-315) + aux1092 - aux1093))
-4393 4398 0
-4392 4396 0
-315 4398 0
-315 -4393 4396 0
-315 -4392 4395 0
c ((aux1089 + aux1091 - aux1094)<=0)
4389 -4400 0
4390 -4401 0
4383 -4400 0
4383 4389 -4401 0
4383 4390 -4403 0
4384 -4401 0
4384 4389 -4403 0
4384 4390 -4405 0
c (0<=(aux1089 + aux1091 - aux1094))
-4390 4405 0
-4389 4403 0
-4384 4405 0
-4384 -4390 4403 0
-4384 -4389 4401 0
-4383 4403 0
-4383 -4390 4401 0
-4383 -4389 4400 0
c (( - aux1095 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4407 0
-407 -4407 0
-407 -527 -4408 0
c (0<=( - aux1095 + SATLiteral(407) + SATLiteral(527)))
527 4408 0
407 4408 0
407 527 4407 0
c (( - aux1096 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4410 0
-422 -4410 0
-422 -512 -4411 0
c (0<=( - aux1096 + SATLiteral(422) + SATLiteral(512)))
512 4411 0
422 4411 0
422 512 4410 0
c (( - aux1097 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4413 0
-452 -4413 0
-452 -497 -4414 0
c (0<=( - aux1097 + SATLiteral(452) + SATLiteral(497)))
497 4414 0
452 4414 0
452 497 4413 0
c (( - aux1098 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4416 0
-467 -4416 0
-467 -482 -4417 0
c (0<=( - aux1098 + SATLiteral(467) + SATLiteral(482)))
482 4417 0
467 4417 0
467 482 4416 0
c ((aux1098 - aux1099 + SATLiteral(437))<=0)
4416 -4419 0
4417 -4420 0
-437 -4419 0
-437 4416 -4420 0
-437 4417 -4422 0
c (0<=(aux1098 - aux1099 + SATLiteral(437)))
-4417 4422 0
-4416 4420 0
437 4422 0
437 -4417 4420 0
437 -4416 4419 0
c ((aux1095 + aux1097 - aux1100)<=0)
4413 -4424 0
4414 -4425 0
4407 -4424 0
4407 4413 -4425 0
4407 4414 -4427 0
4408 -4425 0
4408 4413 -4427 0
4408 4414 -4429 0
c (0<=(aux1095 + aux1097 - aux1100))
-4414 4429 0
-4413 4427 0
-4408 4429 0
-4408 -4414 4427 0
-4408 -4413 4425 0
-4407 4427 0
-4407 -4414 4425 0
-4407 -4413 4424 0
c (( - aux1101 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4431 0
-409 -4431 0
-409 -529 -4432 0
c (0<=( - aux1101 + SATLiteral(409) + SATLiteral(529)))
529 4432 0
409 4432 0
409 529 4431 0
c (( - aux1102 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4434 0
-424 -4434 0
-424 -514 -4435 0
c (0<=( - aux1102 + SATLiteral(424) + SATLiteral(514)))
514 4435 0
424 4435 0
424 514 4434 0
c (( - aux1103 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4437 0
-454 -4437 0
-454 -499 -4438 0
c (0<=( - aux1103 + SATLiteral(454) + SATLiteral(499)))
499 4438 0
454 4438 0
454 499 4437 0
c (( - aux1104 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4440 0
-469 -4440 0
-469 -484 -4441 0
c (0<=( - aux1104 + SATLiteral(469) + SATLiteral(484)))
484 4441 0
469 4441 0
469 484 4440 0
c ((aux1104 - aux1105 + SATLiteral(439))<=0)
4440 -4443 0
4441 -4444 0
-439 -4443 0
-439 4440 -4444 0
-439 4441 -4446 0
c (0<=(aux1104 - aux1105 + SATLiteral(439)))
-4441 4446 0
-4440 4444 0
439 4446 0
439 -4441 4444 0
439 -4440 4443 0
c ((aux1101 + aux1103 - aux1106)<=0)
4437 -4448 0
4438 -4449 0
4431 -4448 0
4431 4437 -4449 0
4431 4438 -4451 0
4432 -4449 0
4432 4437 -4451 0
4432 4438 -4453 0
c (0<=(aux1101 + aux1103 - aux1106))
-4438 4453 0
-4437 4451 0
-4432 4453 0
-4432 -4438 4451 0
-4432 -4437 4449 0
-4431 4451 0
-4431 -4438 4449 0
-4431 -4437 4448 0
c (( - aux1107 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4455 0
-411 -4455 0
-411 -531 -4456 0
c (0<=( - aux1107 + SATLiteral(411) + SATLiteral(531)))
531 4456 0
411 4456 0
411 531 4455 0
c (( - aux1108 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4458 0
-426 -4458 0
-426 -516 -4459 0
c (0<=( - aux1108 + SATLiteral(426) + SATLiteral(516)))
516 4459 0
426 4459 0
426 516 4458 0
c (( - aux1109 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4461 0
-456 -4461 0
-456 -501 -4462 0
c (0<=( - aux1109 + SATLiteral(456) + SATLiteral(501)))
501 4462 0
456 4462 0
456 501 4461 0
c (( - aux1110 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4464 0
-471 -4464 0
-471 -486 -4465 0
c (0<=( - aux1110 + SATLiteral(471) + SATLiteral(486)))
486 4465 0
471 4465 0
471 486 4464 0
c ((aux1110 - aux1111 + SATLiteral(441))<=0)
4464 -4467 0
4465 -4468 0
-441 -4467 0
-441 4464 -4468 0
-441 4465 -4470 0
c (0<=(aux1110 - aux1111 + SATLiteral(441)))
-4465 4470 0
-4464 4468 0
441 4470 0
441 -4465 4468 0
441 -4464 4467 0
c ((aux1107 + aux1109 - aux1112)<=0)
4461 -4472 0
4462 -4473 0
4455 -4472 0
4455 4461 -4473 0
4455 4462 -4475 0
4456 -4473 0
4456 4461 -4475 0
4456 4462 -4477 0
c (0<=(aux1107 + aux1109 - aux1112))
-4462 4477 0
-4461 4475 0
-4456 4477 0
-4456 -4462 4475 0
-4456 -4461 4473 0
-4455 4475 0
-4455 -4462 4473 0
-4455 -4461 4472 0
c (( - aux1113 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4479 0
-413 -4479 0
-413 -533 -4480 0
c (0<=( - aux1113 + SATLiteral(413) + SATLiteral(533)))
533 4480 0
413 4480 0
413 533 4479 0
c (( - aux1114 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4482 0
-428 -4482 0
-428 -518 -4483 0
c (0<=( - aux1114 + SATLiteral(428) + SATLiteral(518)))
518 4483 0
428 4483 0
428 518 4482 0
c (( - aux1115 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4485 0
-458 -4485 0
-458 -503 -4486 0
c (0<=( - aux1115 + SATLiteral(458) + SATLiteral(503)))
503 4486 0
458 4486 0
458 503 4485 0
c (( - aux1116 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4488 0
-473 -4488 0
-473 -488 -4489 0
c (0<=( - aux1116 + SATLiteral(473) + SATLiteral(488)))
488 4489 0
473 4489 0
473 488 4488 0
c ((aux1116 - aux1117 + SATLiteral(443))<=0)
4488 -4491 0
4489 -4492 0
-443 -4491 0
-443 4488 -4492 0
-443 4489 -4494 0
c (0<=(aux1116 - aux1117 + SATLiteral(443)))
-4489 4494 0
-4488 4492 0
443 4494 0
443 -4489 4492 0
443 -4488 4491 0
c ((aux1113 + aux1115 - aux1118)<=0)
4485 -4496 0
4486 -4497 0
4479 -4496 0
4479 4485 -4497 0
4479 4486 -4499 0
4480 -4497 0
4480 4485 -4499 0
4480 4486 -4501 0
c (0<=(aux1113 + aux1115 - aux1118))
-4486 4501 0
-4485 4499 0
-4480 4501 0
-4480 -4486 4499 0
-4480 -4485 4497 0
-4479 4499 0
-4479 -4486 4497 0
-4479 -4485 4496 0
c (( - aux1119 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4503 0
-415 -4503 0
-415 -535 -4504 0
c (0<=( - aux1119 + SATLiteral(415) + SATLiteral(535)))
535 4504 0
415 4504 0
415 535 4503 0
c (( - aux1120 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4506 0
-430 -4506 0
-430 -520 -4507 0
c (0<=( - aux1120 + SATLiteral(430) + SATLiteral(520)))
520 4507 0
430 4507 0
430 520 4506 0
c (( - aux1121 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4509 0
-460 -4509 0
-460 -505 -4510 0
c (0<=( - aux1121 + SATLiteral(460) + SATLiteral(505)))
505 4510 0
460 4510 0
460 505 4509 0
c (( - aux1122 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4512 0
-475 -4512 0
-475 -490 -4513 0
c (0<=( - aux1122 + SATLiteral(475) + SATLiteral(490)))
490 4513 0
475 4513 0
475 490 4512 0
c ((aux1122 - aux1123 + SATLiteral(445))<=0)
4512 -4515 0
4513 -4516 0
-445 -4515 0
-445 4512 -4516 0
-445 4513 -4518 0
c (0<=(aux1122 - aux1123 + SATLiteral(445)))
-4513 4518 0
-4512 4516 0
445 4518 0
445 -4513 4516 0
445 -4512 4515 0
c ((aux1119 + aux1121 - aux1124)<=0)
4509 -4520 0
4510 -4521 0
4503 -4520 0
4503 4509 -4521 0
4503 4510 -4523 0
4504 -4521 0
4504 4509 -4523 0
4504 4510 -4525 0
c (0<=(aux1119 + aux1121 - aux1124))
-4510 4525 0
-4509 4523 0
-4504 4525 0
-4504 -4510 4523 0
-4504 -4509 4521 0
-4503 4523 0
-4503 -4510 4521 0
-4503 -4509 4520 0
c (( - aux1125 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4527 0
-417 -4527 0
-417 -537 -4528 0
c (0<=( - aux1125 + SATLiteral(417) + SATLiteral(537)))
537 4528 0
417 4528 0
417 537 4527 0
c (( - aux1126 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4530 0
-432 -4530 0
-432 -522 -4531 0
c (0<=( - aux1126 + SATLiteral(432) + SATLiteral(522)))
522 4531 0
432 4531 0
432 522 4530 0
c (( - aux1127 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4533 0
-462 -4533 0
-462 -507 -4534 0
c (0<=( - aux1127 + SATLiteral(462) + SATLiteral(507)))
507 4534 0
462 4534 0
462 507 4533 0
c (( - aux1128 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4536 0
-477 -4536 0
-477 -492 -4537 0
c (0<=( - aux1128 + SATLiteral(477) + SATLiteral(492)))
492 4537 0
477 4537 0
477 492 4536 0
c ((aux1128 - aux1129 + SATLiteral(447))<=0)
4536 -4539 0
4537 -4540 0
-447 -4539 0
-447 4536 -4540 0
-447 4537 -4542 0
c (0<=(aux1128 - aux1129 + SATLiteral(447)))
-4537 4542 0
-4536 4540 0
447 4542 0
447 -4537 4540 0
447 -4536 4539 0
c ((aux1125 + aux1127 - aux1130)<=0)
4533 -4544 0
4534 -4545 0
4527 -4544 0
4527 4533 -4545 0
4527 4534 -4547 0
4528 -4545 0
4528 4533 -4547 0
4528 4534 -4549 0
c (0<=(aux1125 + aux1127 - aux1130))
-4534 4549 0
-4533 4547 0
-4528 4549 0
-4528 -4534 4547 0
-4528 -4533 4545 0
-4527 4547 0
-4527 -4534 4545 0
-4527 -4533 4544 0
c (( - aux1131 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4551 0
-419 -4551 0
-419 -539 -4552 0
c (0<=( - aux1131 + SATLiteral(419) + SATLiteral(539)))
539 4552 0
419 4552 0
419 539 4551 0
c (( - aux1132 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4554 0
-434 -4554 0
-434 -524 -4555 0
c (0<=( - aux1132 + SATLiteral(434) + SATLiteral(524)))
524 4555 0
434 4555 0
434 524 4554 0
c (( - aux1133 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4557 0
-464 -4557 0
-464 -509 -4558 0
c (0<=( - aux1133 + SATLiteral(464) + SATLiteral(509)))
509 4558 0
464 4558 0
464 509 4557 0
c (( - aux1134 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4560 0
-479 -4560 0
-479 -494 -4561 0
c (0<=( - aux1134 + SATLiteral(479) + SATLiteral(494)))
494 4561 0
479 4561 0
479 494 4560 0
c ((aux1134 - aux1135 + SATLiteral(449))<=0)
4560 -4563 0
4561 -4564 0
-449 -4563 0
-449 4560 -4564 0
-449 4561 -4566 0
c (0<=(aux1134 - aux1135 + SATLiteral(449)))
-4561 4566 0
-4560 4564 0
449 4566 0
449 -4561 4564 0
449 -4560 4563 0
c ((aux1131 + aux1133 - aux1136)<=0)
4557 -4568 0
4558 -4569 0
4551 -4568 0
4551 4557 -4569 0
4551 4558 -4571 0
4552 -4569 0
4552 4557 -4571 0
4552 4558 -4573 0
c (0<=(aux1131 + aux1133 - aux1136))
-4558 4573 0
-4557 4571 0
-4552 4573 0
-4552 -4558 4571 0
-4552 -4557 4569 0
-4551 4571 0
-4551 -4558 4569 0
-4551 -4557 4568 0
c (( - aux1137 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4575 0
-421 -4575 0
-421 -541 -4576 0
c (0<=( - aux1137 + SATLiteral(421) + SATLiteral(541)))
541 4576 0
421 4576 0
421 541 4575 0
c (( - aux1138 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4578 0
-436 -4578 0
-436 -526 -4579 0
c (0<=( - aux1138 + SATLiteral(436) + SATLiteral(526)))
526 4579 0
436 4579 0
436 526 4578 0
c (( - aux1139 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4581 0
-466 -4581 0
-466 -511 -4582 0
c (0<=( - aux1139 + SATLiteral(466) + SATLiteral(511)))
511 4582 0
466 4582 0
466 511 4581 0
c (( - aux1140 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4584 0
-481 -4584 0
-481 -496 -4585 0
c (0<=( - aux1140 + SATLiteral(481) + SATLiteral(496)))
496 4585 0
481 4585 0
481 496 4584 0
c ((aux1140 - aux1141 + SATLiteral(451))<=0)
4584 -4587 0
4585 -4588 0
-451 -4587 0
-451 4584 -4588 0
-451 4585 -4590 0
c (0<=(aux1140 - aux1141 + SATLiteral(451)))
-4585 4590 0
-4584 4588 0
451 4590 0
451 -4585 4588 0
451 -4584 4587 0
c ((aux1137 + aux1139 - aux1142)<=0)
4581 -4592 0
4582 -4593 0
4575 -4592 0
4575 4581 -4593 0
4575 4582 -4595 0
4576 -4593 0
4576 4581 -4595 0
4576 4582 -4597 0
c (0<=(aux1137 + aux1139 - aux1142))
-4582 4597 0
-4581 4595 0
-4576 4597 0
-4576 -4582 4595 0
-4576 -4581 4593 0
-4575 4595 0
-4575 -4582 4593 0
-4575 -4581 4592 0
c (( - aux1143 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4599 0
420 -4599 0
420 540 -4600 0
c (0<=( - aux1143 + SATLiteral(-420) + SATLiteral(-540)))
-540 4600 0
-420 4600 0
-420 -540 4599 0
c (( - aux1144 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4602 0
435 -4602 0
435 525 -4603 0
c (0<=( - aux1144 + SATLiteral(-435) + SATLiteral(-525)))
-525 4603 0
-435 4603 0
-435 -525 4602 0
c (( - aux1145 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4605 0
465 -4605 0
465 510 -4606 0
c (0<=( - aux1145 + SATLiteral(-465) + SATLiteral(-510)))
-510 4606 0
-465 4606 0
-465 -510 4605 0
c (( - aux1146 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4608 0
480 -4608 0
480 495 -4609 0
c (0<=( - aux1146 + SATLiteral(-480) + SATLiteral(-495)))
-495 4609 0
-480 4609 0
-480 -495 4608 0
c ((aux1146 - aux1147 + SATLiteral(-450))<=0)
4608 -4611 0
4609 -4612 0
450 -4611 0
450 4608 -4612 0
450 4609 -4614 0
c (0<=(aux1146 - aux1147 + SATLiteral(-450)))
-4609 4614 0
-4608 4612 0
-450 4614 0
-450 -4609 4612 0
-450 -4608 4611 0
c ((aux1143 + aux1145 - aux1148)<=0)
4605 -4616 0
4606 -4617 0
4599 -4616 0
4599 4605 -4617 0
4599 4606 -4619 0
4600 -4617 0
4600 4605 -4619 0
4600 4606 -4621 0
c (0<=(aux1143 + aux1145 - aux1148))
-4606 4621 0
-4605 4619 0
-4600 4621 0
-4600 -4606 4619 0
-4600 -4605 4617 0
-4599 4619 0
-4599 -4606 4617 0
-4599 -4605 4616 0
c (( - aux1149 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4623 0
-542 -4623 0
-542 -662 -4624 0
c (0<=( - aux1149 + SATLiteral(542) + SATLiteral(662)))
662 4624 0
542 4624 0
542 662 4623 0
c (( - aux1150 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4626 0
-557 -4626 0
-557 -647 -4627 0
c (0<=( - aux1150 + SATLiteral(557) + SATLiteral(647)))
647 4627 0
557 4627 0
557 647 4626 0
c (( - aux1151 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4629 0
-587 -4629 0
-587 -632 -4630 0
c (0<=( - aux1151 + SATLiteral(587) + SATLiteral(632)))
632 4630 0
587 4630 0
587 632 4629 0
c (( - aux1152 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4632 0
-602 -4632 0
-602 -617 -4633 0
c (0<=( - aux1152 + SATLiteral(602) + SATLiteral(617)))
617 4633 0
602 4633 0
602 617 4632 0
c ((aux1152 - aux1153 + SATLiteral(572))<=0)
4632 -4635 0
4633 -4636 0
-572 -4635 0
-572 4632 -4636 0
-572 4633 -4638 0
c (0<=(aux1152 - aux1153 + SATLiteral(572)))
-4633 4638 0
-4632 4636 0
572 4638 0
572 -4633 4636 0
572 -4632 4635 0
c ((aux1149 + aux1151 - aux1154)<=0)
4629 -4640 0
4630 -4641 0
4623 -4640 0
4623 4629 -4641 0
4623 4630 -4643 0
4624 -4641 0
4624 4629 -4643 0
4624 4630 -4645 0
c (0<=(aux1149 + aux1151 - aux1154))
-4630 4645 0
-4629 4643 0
-4624 4645 0
-4624 -4630 4643 0
-4624 -4629 4641 0
-4623 4643 0
-4623 -4630 4641 0
-4623 -4629 4640 0
c (( - aux1155 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4647 0
-544 -4647 0
-544 -664 -4648 0
c (0<=( - aux1155 + SATLiteral(544) + SATLiteral(664)))
664 4648 0
544 4648 0
544 664 4647 0
c (( - aux1156 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4650 0
-559 -4650 0
-559 -649 -4651 0
c (0<=( - aux1156 + SATLiteral(559) + SATLiteral(649)))
649 4651 0
559 4651 0
559 649 4650 0
c (( - aux1157 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4653 0
-589 -4653 0
-589 -634 -4654 0
c (0<=( - aux1157 + SATLiteral(589) + SATLiteral(634)))
634 4654 0
589 4654 0
589 634 4653 0
c (( - aux1158 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4656 0
-604 -4656 0
-604 -619 -4657 0
c (0<=( - aux1158 + SATLiteral(604) + SATLiteral(619)))
619 4657 0
604 4657 0
604 619 4656 0
c ((aux1158 - aux1159 + SATLiteral(574))<=0)
4656 -4659 0
4657 -4660 0
-574 -4659 0
-574 4656 -4660 0
-574 4657 -4662 0
c (0<=(aux1158 - aux1159 + SATLiteral(574)))
-4657 4662 0
-4656 4660 0
574 4662 0
574 -4657 4660 0
574 -4656 4659 0
c ((aux1155 + aux1157 - aux1160)<=0)
4653 -4664 0
4654 -4665 0
4647 -4664 0
4647 4653 -4665 0
4647 4654 -4667 0
4648 -4665 0
4648 4653 -4667 0
4648 4654 -4669 0
c (0<=(aux1155 + aux1157 - aux1160))
-4654 4669 0
-4653 4667 0
-4648 4669 0
-4648 -4654 4667 0
-4648 -4653 4665 0
-4647 4667 0
-4647 -4654 4665 0
-4647 -4653 4664 0
c (( - aux1161 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4671 0
-546 -4671 0
-546 -666 -4672 0
c (0<=( - aux1161 + SATLiteral(546) + SATLiteral(666)))
666 4672 0
546 4672 0
546 666 4671 0
c (( - aux1162 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4674 0
-561 -4674 0
-561 -651 -4675 0
c (0<=( - aux1162 + SATLiteral(561) + SATLiteral(651)))
651 4675 0
561 4675 0
561 651 4674 0
c (( - aux1163 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4677 0
-591 -4677 0
-591 -636 -4678 0
c (0<=( - aux1163 + SATLiteral(591) + SATLiteral(636)))
636 4678 0
591 4678 0
591 636 4677 0
c (( - aux1164 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4680 0
-606 -4680 0
-606 -621 -4681 0
c (0<=( - aux1164 + SATLiteral(606) + SATLiteral(621)))
621 4681 0
606 4681 0
606 621 4680 0
c ((aux1164 - aux1165 + SATLiteral(576))<=0)
4680 -4683 0
4681 -4684 0
-576 -4683 0
-576 4680 -4684 0
-576 4681 -4686 0
c (0<=(aux1164 - aux1165 + SATLiteral(576)))
-4681 4686 0
-4680 4684 0
576 4686 0
576 -4681 4684 0
576 -4680 4683 0
c ((aux1161 + aux1163 - aux1166)<=0)
4677 -4688 0
4678 -4689 0
4671 -4688 0
4671 4677 -4689 0
4671 4678 -4691 0
4672 -4689 0
4672 4677 -4691 0
4672 4678 -4693 0
c (0<=(aux1161 + aux1163 - aux1166))
-4678 4693 0
-4677 4691 0
-4672 4693 0
-4672 -4678 4691 0
-4672 -4677 4689 0
-4671 4691 0
-4671 -4678 4689 0
-4671 -4677 4688 0
c (( - aux1167 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4695 0
-548 -4695 0
-548 -668 -4696 0
c (0<=( - aux1167 + SATLiteral(548) + SATLiteral(668)))
668 4696 0
548 4696 0
548 668 4695 0
c (( - aux1168 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4698 0
-563 -4698 0
-563 -653 -4699 0
c (0<=( - aux1168 + SATLiteral(563) + SATLiteral(653)))
653 4699 0
563 4699 0
563 653 4698 0
c (( - aux1169 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4701 0
-593 -4701 0
-593 -638 -4702 0
c (0<=( - aux1169 + SATLiteral(593) + SATLiteral(638)))
638 4702 0
593 4702 0
593 638 4701 0
c (( - aux1170 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4704 0
-608 -4704 0
-608 -623 -4705 0
c (0<=( - aux1170 + SATLiteral(608) + SATLiteral(623)))
623 4705 0
608 4705 0
608 623 4704 0
c ((aux1170 - aux1171 + SATLiteral(578))<=0)
4704 -4707 0
4705 -4708 0
-578 -4707 0
-578 4704 -4708 0
-578 4705 -4710 0
c (0<=(aux1170 - aux1171 + SATLiteral(578)))
-4705 4710 0
-4704 4708 0
578 4710 0
578 -4705 4708 0
578 -4704 4707 0
c ((aux1167 + aux1169 - aux1172)<=0)
4701 -4712 0
4702 -4713 0
4695 -4712 0
4695 4701 -4713 0
4695 4702 -4715 0
4696 -4713 0
4696 4701 -4715 0
4696 4702 -4717 0
c (0<=(aux1167 + aux1169 - aux1172))
-4702 4717 0
-4701 4715 0
-4696 4717 0
-4696 -4702 4715 0
-4696 -4701 4713 0
-4695 4715 0
-4695 -4702 4713 0
-4695 -4701 4712 0
c (( - aux1173 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4719 0
-550 -4719 0
-550 -670 -4720 0
c (0<=( - aux1173 + SATLiteral(550) + SATLiteral(670)))
670 4720 0
550 4720 0
550 670 4719 0
c (( - aux1174 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4722 0
-565 -4722 0
-565 -655 -4723 0
c (0<=( - aux1174 + SATLiteral(565) + SATLiteral(655)))
655 4723 0
565 4723 0
565 655 4722 0
c (( - aux1175 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4725 0
-595 -4725 0
-595 -640 -4726 0
c (0<=( - aux1175 + SATLiteral(595) + SATLiteral(640)))
640 4726 0
595 4726 0
595 640 4725 0
c (( - aux1176 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4728 0
-610 -4728 0
-610 -625 -4729 0
c (0<=( - aux1176 + SATLiteral(610) + SATLiteral(625)))
625 4729 0
610 4729 0
610 625 4728 0
c ((aux1176 - aux1177 + SATLiteral(580))<=0)
4728 -4731 0
4729 -4732 0
-580 -4731 0
-580 4728 -4732 0
-580 4729 -4734 0
c (0<=(aux1176 - aux1177 + SATLiteral(580)))
-4729 4734 0
-4728 4732 0
580 4734 0
580 -4729 4732 0
580 -4728 4731 0
c ((aux1173 + aux1175 - aux1178)<=0)
4725 -4736 0
4726 -4737 0
4719 -4736 0
4719 4725 -4737 0
4719 4726 -4739 0
4720 -4737 0
4720 4725 -4739 0
4720 4726 -4741 0
c (0<=(aux1173 + aux1175 - aux1178))
-4726 4741 0
-4725 4739 0
-4720 4741 0
-4720 -4726 4739 0
-4720 -4725 4737 0
-4719 4739 0
-4719 -4726 4737 0
-4719 -4725 4736 0
c (( - aux1179 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4743 0
-552 -4743 0
-552 -672 -4744 0
c (0<=( - aux1179 + SATLiteral(552) + SATLiteral(672)))
672 4744 0
552 4744 0
552 672 4743 0
c (( - aux1180 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4746 0
-567 -4746 0
-567 -657 -4747 0
c (0<=( - aux1180 + SATLiteral(567) + SATLiteral(657)))
657 4747 0
567 4747 0
567 657 4746 0
c (( - aux1181 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4749 0
-597 -4749 0
-597 -642 -4750 0
c (0<=( - aux1181 + SATLiteral(597) + SATLiteral(642)))
642 4750 0
597 4750 0
597 642 4749 0
c (( - aux1182 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4752 0
-612 -4752 0
-612 -627 -4753 0
c (0<=( - aux1182 + SATLiteral(612) + SATLiteral(627)))
627 4753 0
612 4753 0
612 627 4752 0
c ((aux1182 - aux1183 + SATLiteral(582))<=0)
4752 -4755 0
4753 -4756 0
-582 -4755 0
-582 4752 -4756 0
-582 4753 -4758 0
c (0<=(aux1182 - aux1183 + SATLiteral(582)))
-4753 4758 0
-4752 4756 0
582 4758 0
582 -4753 4756 0
582 -4752 4755 0
c ((aux1179 + aux1181 - aux1184)<=0)
4749 -4760 0
4750 -4761 0
4743 -4760 0
4743 4749 -4761 0
4743 4750 -4763 0
4744 -4761 0
4744 4749 -4763 0
4744 4750 -4765 0
c (0<=(aux1179 + aux1181 - aux1184))
-4750 4765 0
-4749 4763 0
-4744 4765 0
-4744 -4750 4763 0
-4744 -4749 4761 0
-4743 4763 0
-4743 -4750 4761 0
-4743 -4749 4760 0
c (( - aux1185 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4767 0
-554 -4767 0
-554 -674 -4768 0
c (0<=( - aux1185 + SATLiteral(554) + SATLiteral(674)))
674 4768 0
554 4768 0
554 674 4767 0
c (( - aux1186 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4770 0
-569 -4770 0
-569 -659 -4771 0
c (0<=( - aux1186 + SATLiteral(569) + SATLiteral(659)))
659 4771 0
569 4771 0
569 659 4770 0
c (( - aux1187 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4773 0
-599 -4773 0
-599 -644 -4774 0
c (0<=( - aux1187 + SATLiteral(599) + SATLiteral(644)))
644 4774 0
599 4774 0
599 644 4773 0
c (( - aux1188 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4776 0
-614 -4776 0
-614 -629 -4777 0
c (0<=( - aux1188 + SATLiteral(614) + SATLiteral(629)))
629 4777 0
614 4777 0
614 629 4776 0
c ((aux1188 - aux1189 + SATLiteral(584))<=0)
4776 -4779 0
4777 -4780 0
-584 -4779 0
-584 4776 -4780 0
-584 4777 -4782 0
c (0<=(aux1188 - aux1189 + SATLiteral(584)))
-4777 4782 0
-4776 4780 0
584 4782 0
584 -4777 4780 0
584 -4776 4779 0
c ((aux1185 + aux1187 - aux1190)<=0)
4773 -4784 0
4774 -4785 0
4767 -4784 0
4767 4773 -4785 0
4767 4774 -4787 0
4768 -4785 0
4768 4773 -4787 0
4768 4774 -4789 0
c (0<=(aux1185 + aux1187 - aux1190))
-4774 4789 0
-4773 4787 0
-4768 4789 0
-4768 -4774 4787 0
-4768 -4773 4785 0
-4767 4787 0
-4767 -4774 4785 0
-4767 -4773 4784 0
c (( - aux1191 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4791 0
-556 -4791 0
-556 -676 -4792 0
c (0<=( - aux1191 + SATLiteral(556) + SATLiteral(676)))
676 4792 0
556 4792 0
556 676 4791 0
c (( - aux1192 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4794 0
-571 -4794 0
-571 -661 -4795 0
c (0<=( - aux1192 + SATLiteral(571) + SATLiteral(661)))
661 4795 0
571 4795 0
571 661 4794 0
c (( - aux1193 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4797 0
-601 -4797 0
-601 -646 -4798 0
c (0<=( - aux1193 + SATLiteral(601) + SATLiteral(646)))
646 4798 0
601 4798 0
601 646 4797 0
c (( - aux1194 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -4800 0
-616 -4800 0
-616 -631 -4801 0
c (0<=( - aux1194 + SATLiteral(616) + SATLiteral(631)))
631 4801 0
616 4801 0
616 631 4800 0
c ((aux1194 - aux1195 + SATLiteral(586))<=0)
4800 -4803 0
4801 -4804 0
-586 -4803 0
-586 4800 -4804 0
-586 4801 -4806 0
c (0<=(aux1194 - aux1195 + SATLiteral(586)))
-4801 4806 0
-4800 4804 0
586 4806 0
586 -4801 4804 0
586 -4800 4803 0
c ((aux1191 + aux1193 - aux1196)<=0)
4797 -4808 0
4798 -4809 0
4791 -4808 0
4791 4797 -4809 0
4791 4798 -4811 0
4792 -4809 0
4792 4797 -4811 0
4792 4798 -4813 0
c (0<=(aux1191 + aux1193 - aux1196))
-4798 4813 0
-4797 4811 0
-4792 4813 0
-4792 -4798 4811 0
-4792 -4797 4809 0
-4791 4811 0
-4791 -4798 4809 0
-4791 -4797 4808 0
c (( - aux1197 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -4815 0
555 -4815 0
555 675 -4816 0
c (0<=( - aux1197 + SATLiteral(-555) + SATLiteral(-675)))
-675 4816 0
-555 4816 0
-555 -675 4815 0
c (( - aux1198 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -4818 0
570 -4818 0
570 660 -4819 0
c (0<=( - aux1198 + SATLiteral(-570) + SATLiteral(-660)))
-660 4819 0
-570 4819 0
-570 -660 4818 0
c (( - aux1199 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -4821 0
600 -4821 0
600 645 -4822 0
c (0<=( - aux1199 + SATLiteral(-600) + SATLiteral(-645)))
-645 4822 0
-600 4822 0
-600 -645 4821 0
c (( - aux1200 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -4824 0
615 -4824 0
615 630 -4825 0
c (0<=( - aux1200 + SATLiteral(-615) + SATLiteral(-630)))
-630 4825 0
-615 4825 0
-615 -630 4824 0
c ((aux1200 - aux1201 + SATLiteral(-585))<=0)
4824 -4827 0
4825 -4828 0
585 -4827 0
585 4824 -4828 0
585 4825 -4830 0
c (0<=(aux1200 - aux1201 + SATLiteral(-585)))
-4825 4830 0
-4824 4828 0
-585 4830 0
-585 -4825 4828 0
-585 -4824 4827 0
c ((aux1197 + aux1199 - aux1202)<=0)
4821 -4832 0
4822 -4833 0
4815 -4832 0
4815 4821 -4833 0
4815 4822 -4835 0
4816 -4833 0
4816 4821 -4835 0
4816 4822 -4837 0
c (0<=(aux1197 + aux1199 - aux1202))
-4822 4837 0
-4821 4835 0
-4816 4837 0
-4816 -4822 4835 0
-4816 -4821 4833 0
-4815 4835 0
-4815 -4822 4833 0
-4815 -4821 4832 0
c ((SATLiteral(677) + SATLiteral(797) - aux1203)<=0)
-797 -4839 0
-677 -4839 0
-677 -797 -4840 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1203))
797 4840 0
677 4840 0
677 797 4839 0
c ((SATLiteral(692) + SATLiteral(782) - aux1204)<=0)
-782 -4842 0
-692 -4842 0
-692 -782 -4843 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1204))
782 4843 0
692 4843 0
692 782 4842 0
c ((SATLiteral(722) + SATLiteral(767) - aux1205)<=0)
-767 -4845 0
-722 -4845 0
-722 -767 -4846 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1205))
767 4846 0
722 4846 0
722 767 4845 0
c ((SATLiteral(737) + SATLiteral(752) - aux1206)<=0)
-752 -4848 0
-737 -4848 0
-737 -752 -4849 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1206))
752 4849 0
737 4849 0
737 752 4848 0
c ((SATLiteral(707) + aux1206 - aux1207)<=0)
4848 -4851 0
4849 -4852 0
-707 -4851 0
-707 4848 -4852 0
-707 4849 -4854 0
c (0<=(SATLiteral(707) + aux1206 - aux1207))
-4849 4854 0
-4848 4852 0
707 4854 0
707 -4849 4852 0
707 -4848 4851 0
c ((aux1203 + aux1205 - aux1208)<=0)
4845 -4856 0
4846 -4857 0
4839 -4856 0
4839 4845 -4857 0
4839 4846 -4859 0
4840 -4857 0
4840 4845 -4859 0
4840 4846 -4861 0
c (0<=(aux1203 + aux1205 - aux1208))
-4846 4861 0
-4845 4859 0
-4840 4861 0
-4840 -4846 4859 0
-4840 -4845 4857 0
-4839 4859 0
-4839 -4846 4857 0
-4839 -4845 4856 0
c ((SATLiteral(679) + SATLiteral(798) - aux1209)<=0)
-798 -4863 0
-679 -4863 0
-679 -798 -4864 0
c (0<=(SATLiteral(679) + SATLiteral(798) - aux1209))
798 4864 0
679 4864 0
679 798 4863 0
c ((SATLiteral(694) + SATLiteral(784) - aux1210)<=0)
-784 -4866 0
-694 -4866 0
-694 -784 -4867 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1210))
784 4867 0
694 4867 0
694 784 4866 0
c ((SATLiteral(724) + SATLiteral(769) - aux1211)<=0)
-769 -4869 0
-724 -4869 0
-724 -769 -4870 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1211))
769 4870 0
724 4870 0
724 769 4869 0
c ((SATLiteral(739) + SATLiteral(754) - aux1212)<=0)
-754 -4872 0
-739 -4872 0
-739 -754 -4873 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1212))
754 4873 0
739 4873 0
739 754 4872 0
c ((SATLiteral(709) + aux1212 - aux1213)<=0)
4872 -4875 0
4873 -4876 0
-709 -4875 0
-709 4872 -4876 0
-709 4873 -4878 0
c (0<=(SATLiteral(709) + aux1212 - aux1213))
-4873 4878 0
-4872 4876 0
709 4878 0
709 -4873 4876 0
709 -4872 4875 0
c ((aux1209 + aux1211 - aux1214)<=0)
4869 -4880 0
4870 -4881 0
4863 -4880 0
4863 4869 -4881 0
4863 4870 -4883 0
4864 -4881 0
4864 4869 -4883 0
4864 4870 -4885 0
c (0<=(aux1209 + aux1211 - aux1214))
-4870 4885 0
-4869 4883 0
-4864 4885 0
-4864 -4870 4883 0
-4864 -4869 4881 0
-4863 4883 0
-4863 -4870 4881 0
-4863 -4869 4880 0
c ((SATLiteral(681) + SATLiteral(799) - aux1215)<=0)
-799 -4887 0
-681 -4887 0
-681 -799 -4888 0
c (0<=(SATLiteral(681) + SATLiteral(799) - aux1215))
799 4888 0
681 4888 0
681 799 4887 0
c ((SATLiteral(696) + SATLiteral(786) - aux1216)<=0)
-786 -4890 0
-696 -4890 0
-696 -786 -4891 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1216))
786 4891 0
696 4891 0
696 786 4890 0
c ((SATLiteral(726) + SATLiteral(771) - aux1217)<=0)
-771 -4893 0
-726 -4893 0
-726 -771 -4894 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1217))
771 4894 0
726 4894 0
726 771 4893 0
c ((SATLiteral(741) + SATLiteral(756) - aux1218)<=0)
-756 -4896 0
-741 -4896 0
-741 -756 -4897 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1218))
756 4897 0
741 4897 0
741 756 4896 0
c ((SATLiteral(711) + aux1218 - aux1219)<=0)
4896 -4899 0
4897 -4900 0
-711 -4899 0
-711 4896 -4900 0
-711 4897 -4902 0
c (0<=(SATLiteral(711) + aux1218 - aux1219))
-4897 4902 0
-4896 4900 0
711 4902 0
711 -4897 4900 0
711 -4896 4899 0
c ((aux1215 + aux1217 - aux1220)<=0)
4893 -4904 0
4894 -4905 0
4887 -4904 0
4887 4893 -4905 0
4887 4894 -4907 0
4888 -4905 0
4888 4893 -4907 0
4888 4894 -4909 0
c (0<=(aux1215 + aux1217 - aux1220))
-4894 4909 0
-4893 4907 0
-4888 4909 0
-4888 -4894 4907 0
-4888 -4893 4905 0
-4887 4907 0
-4887 -4894 4905 0
-4887 -4893 4904 0
c ((SATLiteral(683) + SATLiteral(800) - aux1221)<=0)
-800 -4911 0
-683 -4911 0
-683 -800 -4912 0
c (0<=(SATLiteral(683) + SATLiteral(800) - aux1221))
800 4912 0
683 4912 0
683 800 4911 0
c ((SATLiteral(698) + SATLiteral(788) - aux1222)<=0)
-788 -4914 0
-698 -4914 0
-698 -788 -4915 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1222))
788 4915 0
698 4915 0
698 788 4914 0
c ((SATLiteral(728) + SATLiteral(773) - aux1223)<=0)
-773 -4917 0
-728 -4917 0
-728 -773 -4918 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1223))
773 4918 0
728 4918 0
728 773 4917 0
c ((SATLiteral(743) + SATLiteral(758) - aux1224)<=0)
-758 -4920 0
-743 -4920 0
-743 -758 -4921 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1224))
758 4921 0
743 4921 0
743 758 4920 0
c ((SATLiteral(713) + aux1224 - aux1225)<=0)
4920 -4923 0
4921 -4924 0
-713 -4923 0
-713 4920 -4924 0
-713 4921 -4926 0
c (0<=(SATLiteral(713) + aux1224 - aux1225))
-4921 4926 0
-4920 4924 0
713 4926 0
713 -4921 4924 0
713 -4920 4923 0
c ((aux1221 + aux1223 - aux1226)<=0)
4917 -4928 0
4918 -4929 0
4911 -4928 0
4911 4917 -4929 0
4911 4918 -4931 0
4912 -4929 0
4912 4917 -4931 0
4912 4918 -4933 0
c (0<=(aux1221 + aux1223 - aux1226))
-4918 4933 0
-4917 4931 0
-4912 4933 0
-4912 -4918 4931 0
-4912 -4917 4929 0
-4911 4931 0
-4911 -4918 4929 0
-4911 -4917 4928 0
c ((SATLiteral(685) + SATLiteral(801) - aux1227)<=0)
-801 -4935 0
-685 -4935 0
-685 -801 -4936 0
c (0<=(SATLiteral(685) + SATLiteral(801) - aux1227))
801 4936 0
685 4936 0
685 801 4935 0
c ((SATLiteral(700) + SATLiteral(790) - aux1228)<=0)
-790 -4938 0
-700 -4938 0
-700 -790 -4939 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1228))
790 4939 0
700 4939 0
700 790 4938 0
c ((SATLiteral(730) + SATLiteral(775) - aux1229)<=0)
-775 -4941 0
-730 -4941 0
-730 -775 -4942 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1229))
775 4942 0
730 4942 0
730 775 4941 0
c ((SATLiteral(745) + SATLiteral(760) - aux1230)<=0)
-760 -4944 0
-745 -4944 0
-745 -760 -4945 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1230))
760 4945 0
745 4945 0
745 760 4944 0
c ((SATLiteral(715) + aux1230 - aux1231)<=0)
4944 -4947 0
4945 -4948 0
-715 -4947 0
-715 4944 -4948 0
-715 4945 -4950 0
c (0<=(SATLiteral(715) + aux1230 - aux1231))
-4945 4950 0
-4944 4948 0
715 4950 0
715 -4945 4948 0
715 -4944 4947 0
c ((aux1227 + aux1229 - aux1232)<=0)
4941 -4952 0
4942 -4953 0
4935 -4952 0
4935 4941 -4953 0
4935 4942 -4955 0
4936 -4953 0
4936 4941 -4955 0
4936 4942 -4957 0
c (0<=(aux1227 + aux1229 - aux1232))
-4942 4957 0
-4941 4955 0
-4936 4957 0
-4936 -4942 4955 0
-4936 -4941 4953 0
-4935 4955 0
-4935 -4942 4953 0
-4935 -4941 4952 0
c ((SATLiteral(687) + SATLiteral(802) - aux1233)<=0)
-802 -4959 0
-687 -4959 0
-687 -802 -4960 0
c (0<=(SATLiteral(687) + SATLiteral(802) - aux1233))
802 4960 0
687 4960 0
687 802 4959 0
c ((SATLiteral(702) + SATLiteral(792) - aux1234)<=0)
-792 -4962 0
-702 -4962 0
-702 -792 -4963 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1234))
792 4963 0
702 4963 0
702 792 4962 0
c ((SATLiteral(732) + SATLiteral(777) - aux1235)<=0)
-777 -4965 0
-732 -4965 0
-732 -777 -4966 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1235))
777 4966 0
732 4966 0
732 777 4965 0
c ((SATLiteral(747) + SATLiteral(762) - aux1236)<=0)
-762 -4968 0
-747 -4968 0
-747 -762 -4969 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1236))
762 4969 0
747 4969 0
747 762 4968 0
c ((SATLiteral(717) + aux1236 - aux1237)<=0)
4968 -4971 0
4969 -4972 0
-717 -4971 0
-717 4968 -4972 0
-717 4969 -4974 0
c (0<=(SATLiteral(717) + aux1236 - aux1237))
-4969 4974 0
-4968 4972 0
717 4974 0
717 -4969 4972 0
717 -4968 4971 0
c ((aux1233 + aux1235 - aux1238)<=0)
4965 -4976 0
4966 -4977 0
4959 -4976 0
4959 4965 -4977 0
4959 4966 -4979 0
4960 -4977 0
4960 4965 -4979 0
4960 4966 -4981 0
c (0<=(aux1233 + aux1235 - aux1238))
-4966 4981 0
-4965 4979 0
-4960 4981 0
-4960 -4966 4979 0
-4960 -4965 4977 0
-4959 4979 0
-4959 -4966 4977 0
-4959 -4965 4976 0
c ((SATLiteral(689) + SATLiteral(803) - aux1239)<=0)
-803 -4983 0
-689 -4983 0
-689 -803 -4984 0
c (0<=(SATLiteral(689) + SATLiteral(803) - aux1239))
803 4984 0
689 4984 0
689 803 4983 0
c ((SATLiteral(704) + SATLiteral(794) - aux1240)<=0)
-794 -4986 0
-704 -4986 0
-704 -794 -4987 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1240))
794 4987 0
704 4987 0
704 794 4986 0
c ((SATLiteral(734) + SATLiteral(779) - aux1241)<=0)
-779 -4989 0
-734 -4989 0
-734 -779 -4990 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1241))
779 4990 0
734 4990 0
734 779 4989 0
c ((SATLiteral(749) + SATLiteral(764) - aux1242)<=0)
-764 -4992 0
-749 -4992 0
-749 -764 -4993 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1242))
764 4993 0
749 4993 0
749 764 4992 0
c ((SATLiteral(719) + aux1242 - aux1243)<=0)
4992 -4995 0
4993 -4996 0
-719 -4995 0
-719 4992 -4996 0
-719 4993 -4998 0
c (0<=(SATLiteral(719) + aux1242 - aux1243))
-4993 4998 0
-4992 4996 0
719 4998 0
719 -4993 4996 0
719 -4992 4995 0
c ((aux1239 + aux1241 - aux1244)<=0)
4989 -5000 0
4990 -5001 0
4983 -5000 0
4983 4989 -5001 0
4983 4990 -5003 0
4984 -5001 0
4984 4989 -5003 0
4984 4990 -5005 0
c (0<=(aux1239 + aux1241 - aux1244))
-4990 5005 0
-4989 5003 0
-4984 5005 0
-4984 -4990 5003 0
-4984 -4989 5001 0
-4983 5003 0
-4983 -4990 5001 0
-4983 -4989 5000 0
c ((SATLiteral(691) + SATLiteral(804) - aux1245)<=0)
-804 -5007 0
-691 -5007 0
-691 -804 -5008 0
c (0<=(SATLiteral(691) + SATLiteral(804) - aux1245))
804 5008 0
691 5008 0
691 804 5007 0
c ((SATLiteral(706) + SATLiteral(796) - aux1246)<=0)
-796 -5010 0
-706 -5010 0
-706 -796 -5011 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1246))
796 5011 0
706 5011 0
706 796 5010 0
c ((SATLiteral(736) + SATLiteral(781) - aux1247)<=0)
-781 -5013 0
-736 -5013 0
-736 -781 -5014 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1247))
781 5014 0
736 5014 0
736 781 5013 0
c ((SATLiteral(751) + SATLiteral(766) - aux1248)<=0)
-766 -5016 0
-751 -5016 0
-751 -766 -5017 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1248))
766 5017 0
751 5017 0
751 766 5016 0
c ((SATLiteral(721) + aux1248 - aux1249)<=0)
5016 -5019 0
5017 -5020 0
-721 -5019 0
-721 5016 -5020 0
-721 5017 -5022 0
c (0<=(SATLiteral(721) + aux1248 - aux1249))
-5017 5022 0
-5016 5020 0
721 5022 0
721 -5017 5020 0
721 -5016 5019 0
c ((aux1245 + aux1247 - aux1250)<=0)
5013 -5024 0
5014 -5025 0
5007 -5024 0
5007 5013 -5025 0
5007 5014 -5027 0
5008 -5025 0
5008 5013 -5027 0
5008 5014 -5029 0
c (0<=(aux1245 + aux1247 - aux1250))
-5014 5029 0
-5013 5027 0
-5008 5029 0
-5008 -5014 5027 0
-5008 -5013 5025 0
-5007 5027 0
-5007 -5014 5025 0
-5007 -5013 5024 0
c ((SATLiteral(-690) + SATLiteral(805) - aux1251)<=0)
-805 -5031 0
690 -5031 0
690 -805 -5032 0
c (0<=(SATLiteral(-690) + SATLiteral(805) - aux1251))
805 5032 0
-690 5032 0
-690 805 5031 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1252)<=0)
795 -5034 0
705 -5034 0
705 795 -5035 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1252))
-795 5035 0
-705 5035 0
-705 -795 5034 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1253)<=0)
780 -5037 0
735 -5037 0
735 780 -5038 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1253))
-780 5038 0
-735 5038 0
-735 -780 5037 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1254)<=0)
765 -5040 0
750 -5040 0
750 765 -5041 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1254))
-765 5041 0
-750 5041 0
-750 -765 5040 0
c ((SATLiteral(-720) + aux1254 - aux1255)<=0)
5040 -5043 0
5041 -5044 0
720 -5043 0
720 5040 -5044 0
720 5041 -5046 0
c (0<=(SATLiteral(-720) + aux1254 - aux1255))
-5041 5046 0
-5040 5044 0
-720 5046 0
-720 -5041 5044 0
-720 -5040 5043 0
c ((aux1251 + aux1253 - aux1256)<=0)
5037 -5048 0
5038 -5049 0
5031 -5048 0
5031 5037 -5049 0
5031 5038 -5051 0
5032 -5049 0
5032 5037 -5051 0
5032 5038 -5053 0
c (0<=(aux1251 + aux1253 - aux1256))
-5038 5053 0
-5037 5051 0
-5032 5053 0
-5032 -5038 5051 0
-5032 -5037 5049 0
-5031 5051 0
-5031 -5038 5049 0
-5031 -5037 5048 0
c (( - aux1257 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5055 0
-812 -5055 0
-812 -932 -5056 0
c (0<=( - aux1257 + SATLiteral(812) + SATLiteral(932)))
932 5056 0
812 5056 0
812 932 5055 0
c (( - aux1258 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5058 0
-827 -5058 0
-827 -917 -5059 0
c (0<=( - aux1258 + SATLiteral(827) + SATLiteral(917)))
917 5059 0
827 5059 0
827 917 5058 0
c (( - aux1259 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5061 0
-857 -5061 0
-857 -902 -5062 0
c (0<=( - aux1259 + SATLiteral(857) + SATLiteral(902)))
902 5062 0
857 5062 0
857 902 5061 0
c (( - aux1260 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5064 0
-872 -5064 0
-872 -887 -5065 0
c (0<=( - aux1260 + SATLiteral(872) + SATLiteral(887)))
887 5065 0
872 5065 0
872 887 5064 0
c ((aux1260 - aux1261 + SATLiteral(842))<=0)
5064 -5067 0
5065 -5068 0
-842 -5067 0
-842 5064 -5068 0
-842 5065 -5070 0
c (0<=(aux1260 - aux1261 + SATLiteral(842)))
-5065 5070 0
-5064 5068 0
842 5070 0
842 -5065 5068 0
842 -5064 5067 0
c ((aux1257 + aux1259 - aux1262)<=0)
5061 -5072 0
5062 -5073 0
5055 -5072 0
5055 5061 -5073 0
5055 5062 -5075 0
5056 -5073 0
5056 5061 -5075 0
5056 5062 -5077 0
c (0<=(aux1257 + aux1259 - aux1262))
-5062 5077 0
-5061 5075 0
-5056 5077 0
-5056 -5062 5075 0
-5056 -5061 5073 0
-5055 5075 0
-5055 -5062 5073 0
-5055 -5061 5072 0
c (( - aux1263 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5079 0
-814 -5079 0
-814 -934 -5080 0
c (0<=( - aux1263 + SATLiteral(814) + SATLiteral(934)))
934 5080 0
814 5080 0
814 934 5079 0
c (( - aux1264 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5082 0
-829 -5082 0
-829 -919 -5083 0
c (0<=( - aux1264 + SATLiteral(829) + SATLiteral(919)))
919 5083 0
829 5083 0
829 919 5082 0
c (( - aux1265 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5085 0
-859 -5085 0
-859 -904 -5086 0
c (0<=( - aux1265 + SATLiteral(859) + SATLiteral(904)))
904 5086 0
859 5086 0
859 904 5085 0
c (( - aux1266 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5088 0
-874 -5088 0
-874 -889 -5089 0
c (0<=( - aux1266 + SATLiteral(874) + SATLiteral(889)))
889 5089 0
874 5089 0
874 889 5088 0
c ((aux1266 - aux1267 + SATLiteral(844))<=0)
5088 -5091 0
5089 -5092 0
-844 -5091 0
-844 5088 -5092 0
-844 5089 -5094 0
c (0<=(aux1266 - aux1267 + SATLiteral(844)))
-5089 5094 0
-5088 5092 0
844 5094 0
844 -5089 5092 0
844 -5088 5091 0
c ((aux1263 + aux1265 - aux1268)<=0)
5085 -5096 0
5086 -5097 0
5079 -5096 0
5079 5085 -5097 0
5079 5086 -5099 0
5080 -5097 0
5080 5085 -5099 0
5080 5086 -5101 0
c (0<=(aux1263 + aux1265 - aux1268))
-5086 5101 0
-5085 5099 0
-5080 5101 0
-5080 -5086 5099 0
-5080 -5085 5097 0
-5079 5099 0
-5079 -5086 5097 0
-5079 -5085 5096 0
c (( - aux1269 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5103 0
-816 -5103 0
-816 -936 -5104 0
c (0<=( - aux1269 + SATLiteral(816) + SATLiteral(936)))
936 5104 0
816 5104 0
816 936 5103 0
c (( - aux1270 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5106 0
-831 -5106 0
-831 -921 -5107 0
c (0<=( - aux1270 + SATLiteral(831) + SATLiteral(921)))
921 5107 0
831 5107 0
831 921 5106 0
c (( - aux1271 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5109 0
-861 -5109 0
-861 -906 -5110 0
c (0<=( - aux1271 + SATLiteral(861) + SATLiteral(906)))
906 5110 0
861 5110 0
861 906 5109 0
c (( - aux1272 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5112 0
-876 -5112 0
-876 -891 -5113 0
c (0<=( - aux1272 + SATLiteral(876) + SATLiteral(891)))
891 5113 0
876 5113 0
876 891 5112 0
c ((aux1272 - aux1273 + SATLiteral(846))<=0)
5112 -5115 0
5113 -5116 0
-846 -5115 0
-846 5112 -5116 0
-846 5113 -5118 0
c (0<=(aux1272 - aux1273 + SATLiteral(846)))
-5113 5118 0
-5112 5116 0
846 5118 0
846 -5113 5116 0
846 -5112 5115 0
c ((aux1269 + aux1271 - aux1274)<=0)
5109 -5120 0
5110 -5121 0
5103 -5120 0
5103 5109 -5121 0
5103 5110 -5123 0
5104 -5121 0
5104 5109 -5123 0
5104 5110 -5125 0
c (0<=(aux1269 + aux1271 - aux1274))
-5110 5125 0
-5109 5123 0
-5104 5125 0
-5104 -5110 5123 0
-5104 -5109 5121 0
-5103 5123 0
-5103 -5110 5121 0
-5103 -5109 5120 0
c (( - aux1275 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5127 0
-818 -5127 0
-818 -938 -5128 0
c (0<=( - aux1275 + SATLiteral(818) + SATLiteral(938)))
938 5128 0
818 5128 0
818 938 5127 0
c (( - aux1276 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5130 0
-833 -5130 0
-833 -923 -5131 0
c (0<=( - aux1276 + SATLiteral(833) + SATLiteral(923)))
923 5131 0
833 5131 0
833 923 5130 0
c (( - aux1277 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5133 0
-863 -5133 0
-863 -908 -5134 0
c (0<=( - aux1277 + SATLiteral(863) + SATLiteral(908)))
908 5134 0
863 5134 0
863 908 5133 0
c (( - aux1278 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5136 0
-878 -5136 0
-878 -893 -5137 0
c (0<=( - aux1278 + SATLiteral(878) + SATLiteral(893)))
893 5137 0
878 5137 0
878 893 5136 0
c ((aux1278 - aux1279 + SATLiteral(848))<=0)
5136 -5139 0
5137 -5140 0
-848 -5139 0
-848 5136 -5140 0
-848 5137 -5142 0
c (0<=(aux1278 - aux1279 + SATLiteral(848)))
-5137 5142 0
-5136 5140 0
848 5142 0
848 -5137 5140 0
848 -5136 5139 0
c ((aux1275 + aux1277 - aux1280)<=0)
5133 -5144 0
5134 -5145 0
5127 -5144 0
5127 5133 -5145 0
5127 5134 -5147 0
5128 -5145 0
5128 5133 -5147 0
5128 5134 -5149 0
c (0<=(aux1275 + aux1277 - aux1280))
-5134 5149 0
-5133 5147 0
-5128 5149 0
-5128 -5134 5147 0
-5128 -5133 5145 0
-5127 5147 0
-5127 -5134 5145 0
-5127 -5133 5144 0
c (( - aux1281 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5151 0
-820 -5151 0
-820 -940 -5152 0
c (0<=( - aux1281 + SATLiteral(820) + SATLiteral(940)))
940 5152 0
820 5152 0
820 940 5151 0
c (( - aux1282 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5154 0
-835 -5154 0
-835 -925 -5155 0
c (0<=( - aux1282 + SATLiteral(835) + SATLiteral(925)))
925 5155 0
835 5155 0
835 925 5154 0
c (( - aux1283 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5157 0
-865 -5157 0
-865 -910 -5158 0
c (0<=( - aux1283 + SATLiteral(865) + SATLiteral(910)))
910 5158 0
865 5158 0
865 910 5157 0
c (( - aux1284 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5160 0
-880 -5160 0
-880 -895 -5161 0
c (0<=( - aux1284 + SATLiteral(880) + SATLiteral(895)))
895 5161 0
880 5161 0
880 895 5160 0
c ((aux1284 - aux1285 + SATLiteral(850))<=0)
5160 -5163 0
5161 -5164 0
-850 -5163 0
-850 5160 -5164 0
-850 5161 -5166 0
c (0<=(aux1284 - aux1285 + SATLiteral(850)))
-5161 5166 0
-5160 5164 0
850 5166 0
850 -5161 5164 0
850 -5160 5163 0
c ((aux1281 + aux1283 - aux1286)<=0)
5157 -5168 0
5158 -5169 0
5151 -5168 0
5151 5157 -5169 0
5151 5158 -5171 0
5152 -5169 0
5152 5157 -5171 0
5152 5158 -5173 0
c (0<=(aux1281 + aux1283 - aux1286))
-5158 5173 0
-5157 5171 0
-5152 5173 0
-5152 -5158 5171 0
-5152 -5157 5169 0
-5151 5171 0
-5151 -5158 5169 0
-5151 -5157 5168 0
c (( - aux1287 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5175 0
-822 -5175 0
-822 -942 -5176 0
c (0<=( - aux1287 + SATLiteral(822) + SATLiteral(942)))
942 5176 0
822 5176 0
822 942 5175 0
c (( - aux1288 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5178 0
-837 -5178 0
-837 -927 -5179 0
c (0<=( - aux1288 + SATLiteral(837) + SATLiteral(927)))
927 5179 0
837 5179 0
837 927 5178 0
c (( - aux1289 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5181 0
-867 -5181 0
-867 -912 -5182 0
c (0<=( - aux1289 + SATLiteral(867) + SATLiteral(912)))
912 5182 0
867 5182 0
867 912 5181 0
c (( - aux1290 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5184 0
-882 -5184 0
-882 -897 -5185 0
c (0<=( - aux1290 + SATLiteral(882) + SATLiteral(897)))
897 5185 0
882 5185 0
882 897 5184 0
c ((aux1290 - aux1291 + SATLiteral(852))<=0)
5184 -5187 0
5185 -5188 0
-852 -5187 0
-852 5184 -5188 0
-852 5185 -5190 0
c (0<=(aux1290 - aux1291 + SATLiteral(852)))
-5185 5190 0
-5184 5188 0
852 5190 0
852 -5185 5188 0
852 -5184 5187 0
c ((aux1287 + aux1289 - aux1292)<=0)
5181 -5192 0
5182 -5193 0
5175 -5192 0
5175 5181 -5193 0
5175 5182 -5195 0
5176 -5193 0
5176 5181 -5195 0
5176 5182 -5197 0
c (0<=(aux1287 + aux1289 - aux1292))
-5182 5197 0
-5181 5195 0
-5176 5197 0
-5176 -5182 5195 0
-5176 -5181 5193 0
-5175 5195 0
-5175 -5182 5193 0
-5175 -5181 5192 0
c (( - aux1293 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5199 0
-824 -5199 0
-824 -944 -5200 0
c (0<=( - aux1293 + SATLiteral(824) + SATLiteral(944)))
944 5200 0
824 5200 0
824 944 5199 0
c (( - aux1294 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5202 0
-839 -5202 0
-839 -929 -5203 0
c (0<=( - aux1294 + SATLiteral(839) + SATLiteral(929)))
929 5203 0
839 5203 0
839 929 5202 0
c (( - aux1295 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5205 0
-869 -5205 0
-869 -914 -5206 0
c (0<=( - aux1295 + SATLiteral(869) + SATLiteral(914)))
914 5206 0
869 5206 0
869 914 5205 0
c (( - aux1296 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5208 0
-884 -5208 0
-884 -899 -5209 0
c (0<=( - aux1296 + SATLiteral(884) + SATLiteral(899)))
899 5209 0
884 5209 0
884 899 5208 0
c ((aux1296 - aux1297 + SATLiteral(854))<=0)
5208 -5211 0
5209 -5212 0
-854 -5211 0
-854 5208 -5212 0
-854 5209 -5214 0
c (0<=(aux1296 - aux1297 + SATLiteral(854)))
-5209 5214 0
-5208 5212 0
854 5214 0
854 -5209 5212 0
854 -5208 5211 0
c ((aux1293 + aux1295 - aux1298)<=0)
5205 -5216 0
5206 -5217 0
5199 -5216 0
5199 5205 -5217 0
5199 5206 -5219 0
5200 -5217 0
5200 5205 -5219 0
5200 5206 -5221 0
c (0<=(aux1293 + aux1295 - aux1298))
-5206 5221 0
-5205 5219 0
-5200 5221 0
-5200 -5206 5219 0
-5200 -5205 5217 0
-5199 5219 0
-5199 -5206 5217 0
-5199 -5205 5216 0
c (( - aux1299 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5223 0
-826 -5223 0
-826 -946 -5224 0
c (0<=( - aux1299 + SATLiteral(826) + SATLiteral(946)))
946 5224 0
826 5224 0
826 946 5223 0
c (( - aux1300 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5226 0
-841 -5226 0
-841 -931 -5227 0
c (0<=( - aux1300 + SATLiteral(841) + SATLiteral(931)))
931 5227 0
841 5227 0
841 931 5226 0
c (( - aux1301 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5229 0
-871 -5229 0
-871 -916 -5230 0
c (0<=( - aux1301 + SATLiteral(871) + SATLiteral(916)))
916 5230 0
871 5230 0
871 916 5229 0
c (( - aux1302 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5232 0
-886 -5232 0
-886 -901 -5233 0
c (0<=( - aux1302 + SATLiteral(886) + SATLiteral(901)))
901 5233 0
886 5233 0
886 901 5232 0
c ((aux1302 - aux1303 + SATLiteral(856))<=0)
5232 -5235 0
5233 -5236 0
-856 -5235 0
-856 5232 -5236 0
-856 5233 -5238 0
c (0<=(aux1302 - aux1303 + SATLiteral(856)))
-5233 5238 0
-5232 5236 0
856 5238 0
856 -5233 5236 0
856 -5232 5235 0
c ((aux1299 + aux1301 - aux1304)<=0)
5229 -5240 0
5230 -5241 0
5223 -5240 0
5223 5229 -5241 0
5223 5230 -5243 0
5224 -5241 0
5224 5229 -5243 0
5224 5230 -5245 0
c (0<=(aux1299 + aux1301 - aux1304))
-5230 5245 0
-5229 5243 0
-5224 5245 0
-5224 -5230 5243 0
-5224 -5229 5241 0
-5223 5243 0
-5223 -5230 5241 0
-5223 -5229 5240 0
c (( - aux1305 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5247 0
825 -5247 0
825 945 -5248 0
c (0<=( - aux1305 + SATLiteral(-825) + SATLiteral(-945)))
-945 5248 0
-825 5248 0
-825 -945 5247 0
c (( - aux1306 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5250 0
840 -5250 0
840 930 -5251 0
c (0<=( - aux1306 + SATLiteral(-840) + SATLiteral(-930)))
-930 5251 0
-840 5251 0
-840 -930 5250 0
c (( - aux1307 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5253 0
870 -5253 0
870 915 -5254 0
c (0<=( - aux1307 + SATLiteral(-870) + SATLiteral(-915)))
-915 5254 0
-870 5254 0
-870 -915 5253 0
c (( - aux1308 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5256 0
885 -5256 0
885 900 -5257 0
c (0<=( - aux1308 + SATLiteral(-885) + SATLiteral(-900)))
-900 5257 0
-885 5257 0
-885 -900 5256 0
c ((aux1308 - aux1309 + SATLiteral(-855))<=0)
5256 -5259 0
5257 -5260 0
855 -5259 0
855 5256 -5260 0
855 5257 -5262 0
c (0<=(aux1308 - aux1309 + SATLiteral(-855)))
-5257 5262 0
-5256 5260 0
-855 5262 0
-855 -5257 5260 0
-855 -5256 5259 0
c ((aux1305 + aux1307 - aux1310)<=0)
5253 -5264 0
5254 -5265 0
5247 -5264 0
5247 5253 -5265 0
5247 5254 -5267 0
5248 -5265 0
5248 5253 -5267 0
5248 5254 -5269 0
c (0<=(aux1305 + aux1307 - aux1310))
-5254 5269 0
-5253 5267 0
-5248 5269 0
-5248 -5254 5267 0
-5248 -5253 5265 0
-5247 5267 0
-5247 -5254 5265 0
-5247 -5253 5264 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1311)<=0)
-1067 -5271 0
-947 -5271 0
-947 -1067 -5272 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1311))
1067 5272 0
947 5272 0
947 1067 5271 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1312)<=0)
-1052 -5274 0
-962 -5274 0
-962 -1052 -5275 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1312))
1052 5275 0
962 5275 0
962 1052 5274 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1313)<=0)
-1037 -5277 0
-992 -5277 0
-992 -1037 -5278 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1313))
1037 5278 0
992 5278 0
992 1037 5277 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1314)<=0)
-1022 -5280 0
-1007 -5280 0
-1007 -1022 -5281 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1314))
1022 5281 0
1007 5281 0
1007 1022 5280 0
c ((SATLiteral(977) + aux1314 - aux1315)<=0)
5280 -5283 0
5281 -5284 0
-977 -5283 0
-977 5280 -5284 0
-977 5281 -5286 0
c (0<=(SATLiteral(977) + aux1314 - aux1315))
-5281 5286 0
-5280 5284 0
977 5286 0
977 -5281 5284 0
977 -5280 5283 0
c ((aux1311 + aux1313 - aux1316)<=0)
5277 -5288 0
5278 -5289 0
5271 -5288 0
5271 5277 -5289 0
5271 5278 -5291 0
5272 -5289 0
5272 5277 -5291 0
5272 5278 -5293 0
c (0<=(aux1311 + aux1313 - aux1316))
-5278 5293 0
-5277 5291 0
-5272 5293 0
-5272 -5278 5291 0
-5272 -5277 5289 0
-5271 5291 0
-5271 -5278 5289 0
-5271 -5277 5288 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1317)<=0)
-1069 -5295 0
-949 -5295 0
-949 -1069 -5296 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1317))
1069 5296 0
949 5296 0
949 1069 5295 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1318)<=0)
-1054 -5298 0
-964 -5298 0
-964 -1054 -5299 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1318))
1054 5299 0
964 5299 0
964 1054 5298 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1319)<=0)
-1039 -5301 0
-994 -5301 0
-994 -1039 -5302 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1319))
1039 5302 0
994 5302 0
994 1039 5301 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1320)<=0)
-1024 -5304 0
-1009 -5304 0
-1009 -1024 -5305 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1320))
1024 5305 0
1009 5305 0
1009 1024 5304 0
c ((SATLiteral(979) + aux1320 - aux1321)<=0)
5304 -5307 0
5305 -5308 0
-979 -5307 0
-979 5304 -5308 0
-979 5305 -5310 0
c (0<=(SATLiteral(979) + aux1320 - aux1321))
-5305 5310 0
-5304 5308 0
979 5310 0
979 -5305 5308 0
979 -5304 5307 0
c ((aux1317 + aux1319 - aux1322)<=0)
5301 -5312 0
5302 -5313 0
5295 -5312 0
5295 5301 -5313 0
5295 5302 -5315 0
5296 -5313 0
5296 5301 -5315 0
5296 5302 -5317 0
c (0<=(aux1317 + aux1319 - aux1322))
-5302 5317 0
-5301 5315 0
-5296 5317 0
-5296 -5302 5315 0
-5296 -5301 5313 0
-5295 5315 0
-5295 -5302 5313 0
-5295 -5301 5312 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1323)<=0)
-1071 -5319 0
-951 -5319 0
-951 -1071 -5320 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1323))
1071 5320 0
951 5320 0
951 1071 5319 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1324)<=0)
-1056 -5322 0
-966 -5322 0
-966 -1056 -5323 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1324))
1056 5323 0
966 5323 0
966 1056 5322 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1325)<=0)
-1041 -5325 0
-996 -5325 0
-996 -1041 -5326 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1325))
1041 5326 0
996 5326 0
996 1041 5325 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1326)<=0)
-1026 -5328 0
-1011 -5328 0
-1011 -1026 -5329 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1326))
1026 5329 0
1011 5329 0
1011 1026 5328 0
c ((SATLiteral(981) + aux1326 - aux1327)<=0)
5328 -5331 0
5329 -5332 0
-981 -5331 0
-981 5328 -5332 0
-981 5329 -5334 0
c (0<=(SATLiteral(981) + aux1326 - aux1327))
-5329 5334 0
-5328 5332 0
981 5334 0
981 -5329 5332 0
981 -5328 5331 0
c ((aux1323 + aux1325 - aux1328)<=0)
5325 -5336 0
5326 -5337 0
5319 -5336 0
5319 5325 -5337 0
5319 5326 -5339 0
5320 -5337 0
5320 5325 -5339 0
5320 5326 -5341 0
c (0<=(aux1323 + aux1325 - aux1328))
-5326 5341 0
-5325 5339 0
-5320 5341 0
-5320 -5326 5339 0
-5320 -5325 5337 0
-5319 5339 0
-5319 -5326 5337 0
-5319 -5325 5336 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1329)<=0)
-1073 -5343 0
-953 -5343 0
-953 -1073 -5344 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1329))
1073 5344 0
953 5344 0
953 1073 5343 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1330)<=0)
-1058 -5346 0
-968 -5346 0
-968 -1058 -5347 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1330))
1058 5347 0
968 5347 0
968 1058 5346 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1331)<=0)
-1043 -5349 0
-998 -5349 0
-998 -1043 -5350 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1331))
1043 5350 0
998 5350 0
998 1043 5349 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1332)<=0)
-1028 -5352 0
-1013 -5352 0
-1013 -1028 -5353 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1332))
1028 5353 0
1013 5353 0
1013 1028 5352 0
c ((SATLiteral(983) + aux1332 - aux1333)<=0)
5352 -5355 0
5353 -5356 0
-983 -5355 0
-983 5352 -5356 0
-983 5353 -5358 0
c (0<=(SATLiteral(983) + aux1332 - aux1333))
-5353 5358 0
-5352 5356 0
983 5358 0
983 -5353 5356 0
983 -5352 5355 0
c ((aux1329 + aux1331 - aux1334)<=0)
5349 -5360 0
5350 -5361 0
5343 -5360 0
5343 5349 -5361 0
5343 5350 -5363 0
5344 -5361 0
5344 5349 -5363 0
5344 5350 -5365 0
c (0<=(aux1329 + aux1331 - aux1334))
-5350 5365 0
-5349 5363 0
-5344 5365 0
-5344 -5350 5363 0
-5344 -5349 5361 0
-5343 5363 0
-5343 -5350 5361 0
-5343 -5349 5360 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1335)<=0)
-1075 -5367 0
-955 -5367 0
-955 -1075 -5368 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1335))
1075 5368 0
955 5368 0
955 1075 5367 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1336)<=0)
-1060 -5370 0
-970 -5370 0
-970 -1060 -5371 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1336))
1060 5371 0
970 5371 0
970 1060 5370 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1337)<=0)
-1045 -5373 0
-1000 -5373 0
-1000 -1045 -5374 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1337))
1045 5374 0
1000 5374 0
1000 1045 5373 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1338)<=0)
-1030 -5376 0
-1015 -5376 0
-1015 -1030 -5377 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1338))
1030 5377 0
1015 5377 0
1015 1030 5376 0
c ((SATLiteral(985) + aux1338 - aux1339)<=0)
5376 -5379 0
5377 -5380 0
-985 -5379 0
-985 5376 -5380 0
-985 5377 -5382 0
c (0<=(SATLiteral(985) + aux1338 - aux1339))
-5377 5382 0
-5376 5380 0
985 5382 0
985 -5377 5380 0
985 -5376 5379 0
c ((aux1335 + aux1337 - aux1340)<=0)
5373 -5384 0
5374 -5385 0
5367 -5384 0
5367 5373 -5385 0
5367 5374 -5387 0
5368 -5385 0
5368 5373 -5387 0
5368 5374 -5389 0
c (0<=(aux1335 + aux1337 - aux1340))
-5374 5389 0
-5373 5387 0
-5368 5389 0
-5368 -5374 5387 0
-5368 -5373 5385 0
-5367 5387 0
-5367 -5374 5385 0
-5367 -5373 5384 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1341)<=0)
-1077 -5391 0
-957 -5391 0
-957 -1077 -5392 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1341))
1077 5392 0
957 5392 0
957 1077 5391 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1342)<=0)
-1062 -5394 0
-972 -5394 0
-972 -1062 -5395 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1342))
1062 5395 0
972 5395 0
972 1062 5394 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1343)<=0)
-1047 -5397 0
-1002 -5397 0
-1002 -1047 -5398 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1343))
1047 5398 0
1002 5398 0
1002 1047 5397 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1344)<=0)
-1032 -5400 0
-1017 -5400 0
-1017 -1032 -5401 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1344))
1032 5401 0
1017 5401 0
1017 1032 5400 0
c ((SATLiteral(987) + aux1344 - aux1345)<=0)
5400 -5403 0
5401 -5404 0
-987 -5403 0
-987 5400 -5404 0
-987 5401 -5406 0
c (0<=(SATLiteral(987) + aux1344 - aux1345))
-5401 5406 0
-5400 5404 0
987 5406 0
987 -5401 5404 0
987 -5400 5403 0
c ((aux1341 + aux1343 - aux1346)<=0)
5397 -5408 0
5398 -5409 0
5391 -5408 0
5391 5397 -5409 0
5391 5398 -5411 0
5392 -5409 0
5392 5397 -5411 0
5392 5398 -5413 0
c (0<=(aux1341 + aux1343 - aux1346))
-5398 5413 0
-5397 5411 0
-5392 5413 0
-5392 -5398 5411 0
-5392 -5397 5409 0
-5391 5411 0
-5391 -5398 5409 0
-5391 -5397 5408 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1347)<=0)
-1079 -5415 0
-959 -5415 0
-959 -1079 -5416 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1347))
1079 5416 0
959 5416 0
959 1079 5415 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1348)<=0)
-1064 -5418 0
-974 -5418 0
-974 -1064 -5419 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1348))
1064 5419 0
974 5419 0
974 1064 5418 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1349)<=0)
-1049 -5421 0
-1004 -5421 0
-1004 -1049 -5422 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1349))
1049 5422 0
1004 5422 0
1004 1049 5421 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1350)<=0)
-1034 -5424 0
-1019 -5424 0
-1019 -1034 -5425 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1350))
1034 5425 0
1019 5425 0
1019 1034 5424 0
c ((SATLiteral(989) + aux1350 - aux1351)<=0)
5424 -5427 0
5425 -5428 0
-989 -5427 0
-989 5424 -5428 0
-989 5425 -5430 0
c (0<=(SATLiteral(989) + aux1350 - aux1351))
-5425 5430 0
-5424 5428 0
989 5430 0
989 -5425 5428 0
989 -5424 5427 0
c ((aux1347 + aux1349 - aux1352)<=0)
5421 -5432 0
5422 -5433 0
5415 -5432 0
5415 5421 -5433 0
5415 5422 -5435 0
5416 -5433 0
5416 5421 -5435 0
5416 5422 -5437 0
c (0<=(aux1347 + aux1349 - aux1352))
-5422 5437 0
-5421 5435 0
-5416 5437 0
-5416 -5422 5435 0
-5416 -5421 5433 0
-5415 5435 0
-5415 -5422 5433 0
-5415 -5421 5432 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1353)<=0)
-1081 -5439 0
-961 -5439 0
-961 -1081 -5440 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1353))
1081 5440 0
961 5440 0
961 1081 5439 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1354)<=0)
-1066 -5442 0
-976 -5442 0
-976 -1066 -5443 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1354))
1066 5443 0
976 5443 0
976 1066 5442 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1355)<=0)
-1051 -5445 0
-1006 -5445 0
-1006 -1051 -5446 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1355))
1051 5446 0
1006 5446 0
1006 1051 5445 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1356)<=0)
-1036 -5448 0
-1021 -5448 0
-1021 -1036 -5449 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1356))
1036 5449 0
1021 5449 0
1021 1036 5448 0
c ((SATLiteral(991) + aux1356 - aux1357)<=0)
5448 -5451 0
5449 -5452 0
-991 -5451 0
-991 5448 -5452 0
-991 5449 -5454 0
c (0<=(SATLiteral(991) + aux1356 - aux1357))
-5449 5454 0
-5448 5452 0
991 5454 0
991 -5449 5452 0
991 -5448 5451 0
c ((aux1353 + aux1355 - aux1358)<=0)
5445 -5456 0
5446 -5457 0
5439 -5456 0
5439 5445 -5457 0
5439 5446 -5459 0
5440 -5457 0
5440 5445 -5459 0
5440 5446 -5461 0
c (0<=(aux1353 + aux1355 - aux1358))
-5446 5461 0
-5445 5459 0
-5440 5461 0
-5440 -5446 5459 0
-5440 -5445 5457 0
-5439 5459 0
-5439 -5446 5457 0
-5439 -5445 5456 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1359)<=0)
1080 -5463 0
960 -5463 0
960 1080 -5464 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1359))
-1080 5464 0
-960 5464 0
-960 -1080 5463 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1360)<=0)
1065 -5466 0
975 -5466 0
975 1065 -5467 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1360))
-1065 5467 0
-975 5467 0
-975 -1065 5466 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1361)<=0)
1050 -5469 0
1005 -5469 0
1005 1050 -5470 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1361))
-1050 5470 0
-1005 5470 0
-1005 -1050 5469 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1362)<=0)
1035 -5472 0
1020 -5472 0
1020 1035 -5473 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1362))
-1035 5473 0
-1020 5473 0
-1020 -1035 5472 0
c ((SATLiteral(-990) + aux1362 - aux1363)<=0)
5472 -5475 0
5473 -5476 0
990 -5475 0
990 5472 -5476 0
990 5473 -5478 0
c (0<=(SATLiteral(-990) + aux1362 - aux1363))
-5473 5478 0
-5472 5476 0
-990 5478 0
-990 -5473 5476 0
-990 -5472 5475 0
c ((aux1359 + aux1361 - aux1364)<=0)
5469 -5480 0
5470 -5481 0
5463 -5480 0
5463 5469 -5481 0
5463 5470 -5483 0
5464 -5481 0
5464 5469 -5483 0
5464 5470 -5485 0
c (0<=(aux1359 + aux1361 - aux1364))
-5470 5485 0
-5469 5483 0
-5464 5485 0
-5464 -5470 5483 0
-5464 -5469 5481 0
-5463 5483 0
-5463 -5470 5481 0
-5463 -5469 5480 0
c (( - aux1365 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5487 0
-1082 -5487 0
-1082 -1202 -5488 0
c (0<=( - aux1365 + SATLiteral(1082) + SATLiteral(1202)))
1202 5488 0
1082 5488 0
1082 1202 5487 0
c (( - aux1366 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5490 0
-1097 -5490 0
-1097 -1187 -5491 0
c (0<=( - aux1366 + SATLiteral(1097) + SATLiteral(1187)))
1187 5491 0
1097 5491 0
1097 1187 5490 0
c (( - aux1367 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5493 0
-1127 -5493 0
-1127 -1172 -5494 0
c (0<=( - aux1367 + SATLiteral(1127) + SATLiteral(1172)))
1172 5494 0
1127 5494 0
1127 1172 5493 0
c (( - aux1368 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5496 0
-1142 -5496 0
-1142 -1157 -5497 0
c (0<=( - aux1368 + SATLiteral(1142) + SATLiteral(1157)))
1157 5497 0
1142 5497 0
1142 1157 5496 0
c ((aux1368 - aux1369 + SATLiteral(1112))<=0)
5496 -5499 0
5497 -5500 0
-1112 -5499 0
-1112 5496 -5500 0
-1112 5497 -5502 0
c (0<=(aux1368 - aux1369 + SATLiteral(1112)))
-5497 5502 0
-5496 5500 0
1112 5502 0
1112 -5497 5500 0
1112 -5496 5499 0
c ((aux1365 + aux1367 - aux1370)<=0)
5493 -5504 0
5494 -5505 0
5487 -5504 0
5487 5493 -5505 0
5487 5494 -5507 0
5488 -5505 0
5488 5493 -5507 0
5488 5494 -5509 0
c (0<=(aux1365 + aux1367 - aux1370))
-5494 5509 0
-5493 5507 0
-5488 5509 0
-5488 -5494 5507 0
-5488 -5493 5505 0
-5487 5507 0
-5487 -5494 5505 0
-5487 -5493 5504 0
c (( - aux1371 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5511 0
-1084 -5511 0
-1084 -1204 -5512 0
c (0<=( - aux1371 + SATLiteral(1084) + SATLiteral(1204)))
1204 5512 0
1084 5512 0
1084 1204 5511 0
c (( - aux1372 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5514 0
-1099 -5514 0
-1099 -1189 -5515 0
c (0<=( - aux1372 + SATLiteral(1099) + SATLiteral(1189)))
1189 5515 0
1099 5515 0
1099 1189 5514 0
c (( - aux1373 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5517 0
-1129 -5517 0
-1129 -1174 -5518 0
c (0<=( - aux1373 + SATLiteral(1129) + SATLiteral(1174)))
1174 5518 0
1129 5518 0
1129 1174 5517 0
c (( - aux1374 + SATLiteral(1143) + SATLiteral(1159))<=0)
-1159 -5520 0
-1143 -5520 0
-1143 -1159 -5521 0
c (0<=( - aux1374 + SATLiteral(1143) + SATLiteral(1159)))
1159 5521 0
1143 5521 0
1143 1159 5520 0
c ((aux1374 - aux1375 + SATLiteral(1113))<=0)
5520 -5523 0
5521 -5524 0
-1113 -5523 0
-1113 5520 -5524 0
-1113 5521 -5526 0
c (0<=(aux1374 - aux1375 + SATLiteral(1113)))
-5521 5526 0
-5520 5524 0
1113 5526 0
1113 -5521 5524 0
1113 -5520 5523 0
c ((aux1371 + aux1373 - aux1376)<=0)
5517 -5528 0
5518 -5529 0
5511 -5528 0
5511 5517 -5529 0
5511 5518 -5531 0
5512 -5529 0
5512 5517 -5531 0
5512 5518 -5533 0
c (0<=(aux1371 + aux1373 - aux1376))
-5518 5533 0
-5517 5531 0
-5512 5533 0
-5512 -5518 5531 0
-5512 -5517 5529 0
-5511 5531 0
-5511 -5518 5529 0
-5511 -5517 5528 0
c (( - aux1377 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5535 0
-1086 -5535 0
-1086 -1206 -5536 0
c (0<=( - aux1377 + SATLiteral(1086) + SATLiteral(1206)))
1206 5536 0
1086 5536 0
1086 1206 5535 0
c (( - aux1378 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5538 0
-1101 -5538 0
-1101 -1191 -5539 0
c (0<=( - aux1378 + SATLiteral(1101) + SATLiteral(1191)))
1191 5539 0
1101 5539 0
1101 1191 5538 0
c (( - aux1379 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5541 0
-1131 -5541 0
-1131 -1176 -5542 0
c (0<=( - aux1379 + SATLiteral(1131) + SATLiteral(1176)))
1176 5542 0
1131 5542 0
1131 1176 5541 0
c (( - aux1380 + SATLiteral(1144) + SATLiteral(1161))<=0)
-1161 -5544 0
-1144 -5544 0
-1144 -1161 -5545 0
c (0<=( - aux1380 + SATLiteral(1144) + SATLiteral(1161)))
1161 5545 0
1144 5545 0
1144 1161 5544 0
c ((aux1380 - aux1381 + SATLiteral(1114))<=0)
5544 -5547 0
5545 -5548 0
-1114 -5547 0
-1114 5544 -5548 0
-1114 5545 -5550 0
c (0<=(aux1380 - aux1381 + SATLiteral(1114)))
-5545 5550 0
-5544 5548 0
1114 5550 0
1114 -5545 5548 0
1114 -5544 5547 0
c ((aux1377 + aux1379 - aux1382)<=0)
5541 -5552 0
5542 -5553 0
5535 -5552 0
5535 5541 -5553 0
5535 5542 -5555 0
5536 -5553 0
5536 5541 -5555 0
5536 5542 -5557 0
c (0<=(aux1377 + aux1379 - aux1382))
-5542 5557 0
-5541 5555 0
-5536 5557 0
-5536 -5542 5555 0
-5536 -5541 5553 0
-5535 5555 0
-5535 -5542 5553 0
-5535 -5541 5552 0
c (( - aux1383 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5559 0
-1088 -5559 0
-1088 -1208 -5560 0
c (0<=( - aux1383 + SATLiteral(1088) + SATLiteral(1208)))
1208 5560 0
1088 5560 0
1088 1208 5559 0
c (( - aux1384 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5562 0
-1103 -5562 0
-1103 -1193 -5563 0
c (0<=( - aux1384 + SATLiteral(1103) + SATLiteral(1193)))
1193 5563 0
1103 5563 0
1103 1193 5562 0
c (( - aux1385 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5565 0
-1133 -5565 0
-1133 -1178 -5566 0
c (0<=( - aux1385 + SATLiteral(1133) + SATLiteral(1178)))
1178 5566 0
1133 5566 0
1133 1178 5565 0
c (( - aux1386 + SATLiteral(1145) + SATLiteral(1163))<=0)
-1163 -5568 0
-1145 -5568 0
-1145 -1163 -5569 0
c (0<=( - aux1386 + SATLiteral(1145) + SATLiteral(1163)))
1163 5569 0
1145 5569 0
1145 1163 5568 0
c ((aux1386 - aux1387 + SATLiteral(1115))<=0)
5568 -5571 0
5569 -5572 0
-1115 -5571 0
-1115 5568 -5572 0
-1115 5569 -5574 0
c (0<=(aux1386 - aux1387 + SATLiteral(1115)))
-5569 5574 0
-5568 5572 0
1115 5574 0
1115 -5569 5572 0
1115 -5568 5571 0
c ((aux1383 + aux1385 - aux1388)<=0)
5565 -5576 0
5566 -5577 0
5559 -5576 0
5559 5565 -5577 0
5559 5566 -5579 0
5560 -5577 0
5560 5565 -5579 0
5560 5566 -5581 0
c (0<=(aux1383 + aux1385 - aux1388))
-5566 5581 0
-5565 5579 0
-5560 5581 0
-5560 -5566 5579 0
-5560 -5565 5577 0
-5559 5579 0
-5559 -5566 5577 0
-5559 -5565 5576 0
c (( - aux1389 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5583 0
-1090 -5583 0
-1090 -1210 -5584 0
c (0<=( - aux1389 + SATLiteral(1090) + SATLiteral(1210)))
1210 5584 0
1090 5584 0
1090 1210 5583 0
c (( - aux1390 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5586 0
-1105 -5586 0
-1105 -1195 -5587 0
c (0<=( - aux1390 + SATLiteral(1105) + SATLiteral(1195)))
1195 5587 0
1105 5587 0
1105 1195 5586 0
c (( - aux1391 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5589 0
-1135 -5589 0
-1135 -1180 -5590 0
c (0<=( - aux1391 + SATLiteral(1135) + SATLiteral(1180)))
1180 5590 0
1135 5590 0
1135 1180 5589 0
c (( - aux1392 + SATLiteral(1146) + SATLiteral(1165))<=0)
-1165 -5592 0
-1146 -5592 0
-1146 -1165 -5593 0
c (0<=( - aux1392 + SATLiteral(1146) + SATLiteral(1165)))
1165 5593 0
1146 5593 0
1146 1165 5592 0
c ((aux1392 - aux1393 + SATLiteral(1116))<=0)
5592 -5595 0
5593 -5596 0
-1116 -5595 0
-1116 5592 -5596 0
-1116 5593 -5598 0
c (0<=(aux1392 - aux1393 + SATLiteral(1116)))
-5593 5598 0
-5592 5596 0
1116 5598 0
1116 -5593 5596 0
1116 -5592 5595 0
c ((aux1389 + aux1391 - aux1394)<=0)
5589 -5600 0
5590 -5601 0
5583 -5600 0
5583 5589 -5601 0
5583 5590 -5603 0
5584 -5601 0
5584 5589 -5603 0
5584 5590 -5605 0
c (0<=(aux1389 + aux1391 - aux1394))
-5590 5605 0
-5589 5603 0
-5584 5605 0
-5584 -5590 5603 0
-5584 -5589 5601 0
-5583 5603 0
-5583 -5590 5601 0
-5583 -5589 5600 0
c (( - aux1395 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5607 0
-1092 -5607 0
-1092 -1212 -5608 0
c (0<=( - aux1395 + SATLiteral(1092) + SATLiteral(1212)))
1212 5608 0
1092 5608 0
1092 1212 5607 0
c (( - aux1396 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5610 0
-1107 -5610 0
-1107 -1197 -5611 0
c (0<=( - aux1396 + SATLiteral(1107) + SATLiteral(1197)))
1197 5611 0
1107 5611 0
1107 1197 5610 0
c (( - aux1397 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5613 0
-1137 -5613 0
-1137 -1182 -5614 0
c (0<=( - aux1397 + SATLiteral(1137) + SATLiteral(1182)))
1182 5614 0
1137 5614 0
1137 1182 5613 0
c (( - aux1398 + SATLiteral(1147) + SATLiteral(1167))<=0)
-1167 -5616 0
-1147 -5616 0
-1147 -1167 -5617 0
c (0<=( - aux1398 + SATLiteral(1147) + SATLiteral(1167)))
1167 5617 0
1147 5617 0
1147 1167 5616 0
c ((aux1398 - aux1399 + SATLiteral(1117))<=0)
5616 -5619 0
5617 -5620 0
-1117 -5619 0
-1117 5616 -5620 0
-1117 5617 -5622 0
c (0<=(aux1398 - aux1399 + SATLiteral(1117)))
-5617 5622 0
-5616 5620 0
1117 5622 0
1117 -5617 5620 0
1117 -5616 5619 0
c ((aux1395 + aux1397 - aux1400)<=0)
5613 -5624 0
5614 -5625 0
5607 -5624 0
5607 5613 -5625 0
5607 5614 -5627 0
5608 -5625 0
5608 5613 -5627 0
5608 5614 -5629 0
c (0<=(aux1395 + aux1397 - aux1400))
-5614 5629 0
-5613 5627 0
-5608 5629 0
-5608 -5614 5627 0
-5608 -5613 5625 0
-5607 5627 0
-5607 -5614 5625 0
-5607 -5613 5624 0
c (( - aux1401 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5631 0
-1094 -5631 0
-1094 -1214 -5632 0
c (0<=( - aux1401 + SATLiteral(1094) + SATLiteral(1214)))
1214 5632 0
1094 5632 0
1094 1214 5631 0
c (( - aux1402 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5634 0
-1109 -5634 0
-1109 -1199 -5635 0
c (0<=( - aux1402 + SATLiteral(1109) + SATLiteral(1199)))
1199 5635 0
1109 5635 0
1109 1199 5634 0
c (( - aux1403 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5637 0
-1139 -5637 0
-1139 -1184 -5638 0
c (0<=( - aux1403 + SATLiteral(1139) + SATLiteral(1184)))
1184 5638 0
1139 5638 0
1139 1184 5637 0
c (( - aux1404 + SATLiteral(1148) + SATLiteral(1169))<=0)
-1169 -5640 0
-1148 -5640 0
-1148 -1169 -5641 0
c (0<=( - aux1404 + SATLiteral(1148) + SATLiteral(1169)))
1169 5641 0
1148 5641 0
1148 1169 5640 0
c ((aux1404 - aux1405 + SATLiteral(1118))<=0)
5640 -5643 0
5641 -5644 0
-1118 -5643 0
-1118 5640 -5644 0
-1118 5641 -5646 0
c (0<=(aux1404 - aux1405 + SATLiteral(1118)))
-5641 5646 0
-5640 5644 0
1118 5646 0
1118 -5641 5644 0
1118 -5640 5643 0
c ((aux1401 + aux1403 - aux1406)<=0)
5637 -5648 0
5638 -5649 0
5631 -5648 0
5631 5637 -5649 0
5631 5638 -5651 0
5632 -5649 0
5632 5637 -5651 0
5632 5638 -5653 0
c (0<=(aux1401 + aux1403 - aux1406))
-5638 5653 0
-5637 5651 0
-5632 5653 0
-5632 -5638 5651 0
-5632 -5637 5649 0
-5631 5651 0
-5631 -5638 5649 0
-5631 -5637 5648 0
c (( - aux1407 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5655 0
-1096 -5655 0
-1096 -1216 -5656 0
c (0<=( - aux1407 + SATLiteral(1096) + SATLiteral(1216)))
1216 5656 0
1096 5656 0
1096 1216 5655 0
c (( - aux1408 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5658 0
-1111 -5658 0
-1111 -1201 -5659 0
c (0<=( - aux1408 + SATLiteral(1111) + SATLiteral(1201)))
1201 5659 0
1111 5659 0
1111 1201 5658 0
c (( - aux1409 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5661 0
-1141 -5661 0
-1141 -1186 -5662 0
c (0<=( - aux1409 + SATLiteral(1141) + SATLiteral(1186)))
1186 5662 0
1141 5662 0
1141 1186 5661 0
c (( - aux1410 + SATLiteral(1149) + SATLiteral(1171))<=0)
-1171 -5664 0
-1149 -5664 0
-1149 -1171 -5665 0
c (0<=( - aux1410 + SATLiteral(1149) + SATLiteral(1171)))
1171 5665 0
1149 5665 0
1149 1171 5664 0
c ((aux1410 - aux1411 + SATLiteral(1119))<=0)
5664 -5667 0
5665 -5668 0
-1119 -5667 0
-1119 5664 -5668 0
-1119 5665 -5670 0
c (0<=(aux1410 - aux1411 + SATLiteral(1119)))
-5665 5670 0
-5664 5668 0
1119 5670 0
1119 -5665 5668 0
1119 -5664 5667 0
c ((aux1407 + aux1409 - aux1412)<=0)
5661 -5672 0
5662 -5673 0
5655 -5672 0
5655 5661 -5673 0
5655 5662 -5675 0
5656 -5673 0
5656 5661 -5675 0
5656 5662 -5677 0
c (0<=(aux1407 + aux1409 - aux1412))
-5662 5677 0
-5661 5675 0
-5656 5677 0
-5656 -5662 5675 0
-5656 -5661 5673 0
-5655 5675 0
-5655 -5662 5673 0
-5655 -5661 5672 0
c (( - aux1413 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5679 0
1095 -5679 0
1095 1215 -5680 0
c (0<=( - aux1413 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5680 0
-1095 5680 0
-1095 -1215 5679 0
c (( - aux1414 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5682 0
1110 -5682 0
1110 1200 -5683 0
c (0<=( - aux1414 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5683 0
-1110 5683 0
-1110 -1200 5682 0
c (( - aux1415 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5685 0
1140 -5685 0
1140 1185 -5686 0
c (0<=( - aux1415 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5686 0
-1140 5686 0
-1140 -1185 5685 0
c (( - aux1416 + SATLiteral(1150) + SATLiteral(-1170))<=0)
1170 -5688 0
-1150 -5688 0
-1150 1170 -5689 0
c (0<=( - aux1416 + SATLiteral(1150) + SATLiteral(-1170)))
-1170 5689 0
1150 5689 0
1150 -1170 5688 0
c ((aux1416 - aux1417 + SATLiteral(1120))<=0)
5688 -5691 0
5689 -5692 0
-1120 -5691 0
-1120 5688 -5692 0
-1120 5689 -5694 0
c (0<=(aux1416 - aux1417 + SATLiteral(1120)))
-5689 5694 0
-5688 5692 0
1120 5694 0
1120 -5689 5692 0
1120 -5688 5691 0
c ((aux1413 + aux1415 - aux1418)<=0)
5685 -5696 0
5686 -5697 0
5679 -5696 0
5679 5685 -5697 0
5679 5686 -5699 0
5680 -5697 0
5680 5685 -5699 0
5680 5686 -5701 0
c (0<=(aux1413 + aux1415 - aux1418))
-5686 5701 0
-5685 5699 0
-5680 5701 0
-5680 -5686 5699 0
-5680 -5685 5697 0
-5679 5699 0
-5679 -5686 5697 0
-5679 -5685 5696 0
c ((SATLiteral(272) - aux1419 + SATLiteral(167))<=0)
-167 -5703 0
-272 -5703 0
-272 -167 -5704 0
c (0<=(SATLiteral(272) - aux1419 + SATLiteral(167)))
167 5704 0
272 5704 0
272 167 5703 0
c ((SATLiteral(287) - aux1420 + SATLiteral(152))<=0)
-152 -5706 0
-287 -5706 0
-287 -152 -5707 0
c (0<=(SATLiteral(287) - aux1420 + SATLiteral(152)))
152 5707 0
287 5707 0
287 152 5706 0
c ((SATLiteral(2) - aux1421 + SATLiteral(137))<=0)
-137 -5709 0
-2 -5709 0
-2 -137 -5710 0
c (0<=(SATLiteral(2) - aux1421 + SATLiteral(137)))
137 5710 0
2 5710 0
2 137 5709 0
c ((SATLiteral(17) + SATLiteral(32) - aux1422)<=0)
-32 -5712 0
-17 -5712 0
-17 -32 -5713 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1422))
32 5713 0
17 5713 0
17 32 5712 0
c ((SATLiteral(302) + aux1422 - aux1423)<=0)
5712 -5715 0
5713 -5716 0
-302 -5715 0
-302 5712 -5716 0
-302 5713 -5718 0
c (0<=(SATLiteral(302) + aux1422 - aux1423))
-5713 5718 0
-5712 5716 0
302 5718 0
302 -5713 5716 0
302 -5712 5715 0
c ((aux1419 + aux1421 - aux1424)<=0)
5709 -5720 0
5710 -5721 0
5703 -5720 0
5703 5709 -5721 0
5703 5710 -5723 0
5704 -5721 0
5704 5709 -5723 0
5704 5710 -5725 0
c (0<=(aux1419 + aux1421 - aux1424))
-5710 5725 0
-5709 5723 0
-5704 5725 0
-5704 -5710 5723 0
-5704 -5709 5721 0
-5703 5723 0
-5703 -5710 5721 0
-5703 -5709 5720 0
c ((SATLiteral(274) - aux1425 + SATLiteral(169))<=0)
-169 -5727 0
-274 -5727 0
-274 -169 -5728 0
c (0<=(SATLiteral(274) - aux1425 + SATLiteral(169)))
169 5728 0
274 5728 0
274 169 5727 0
c ((SATLiteral(289) - aux1426 + SATLiteral(154))<=0)
-154 -5730 0
-289 -5730 0
-289 -154 -5731 0
c (0<=(SATLiteral(289) - aux1426 + SATLiteral(154)))
154 5731 0
289 5731 0
289 154 5730 0
c ((SATLiteral(4) - aux1427 + SATLiteral(139))<=0)
-139 -5733 0
-4 -5733 0
-4 -139 -5734 0
c (0<=(SATLiteral(4) - aux1427 + SATLiteral(139)))
139 5734 0
4 5734 0
4 139 5733 0
c ((SATLiteral(19) + SATLiteral(34) - aux1428)<=0)
-34 -5736 0
-19 -5736 0
-19 -34 -5737 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1428))
34 5737 0
19 5737 0
19 34 5736 0
c ((SATLiteral(304) + aux1428 - aux1429)<=0)
5736 -5739 0
5737 -5740 0
-304 -5739 0
-304 5736 -5740 0
-304 5737 -5742 0
c (0<=(SATLiteral(304) + aux1428 - aux1429))
-5737 5742 0
-5736 5740 0
304 5742 0
304 -5737 5740 0
304 -5736 5739 0
c ((aux1425 + aux1427 - aux1430)<=0)
5733 -5744 0
5734 -5745 0
5727 -5744 0
5727 5733 -5745 0
5727 5734 -5747 0
5728 -5745 0
5728 5733 -5747 0
5728 5734 -5749 0
c (0<=(aux1425 + aux1427 - aux1430))
-5734 5749 0
-5733 5747 0
-5728 5749 0
-5728 -5734 5747 0
-5728 -5733 5745 0
-5727 5747 0
-5727 -5734 5745 0
-5727 -5733 5744 0
c ((SATLiteral(276) - aux1431 + SATLiteral(171))<=0)
-171 -5751 0
-276 -5751 0
-276 -171 -5752 0
c (0<=(SATLiteral(276) - aux1431 + SATLiteral(171)))
171 5752 0
276 5752 0
276 171 5751 0
c ((SATLiteral(291) - aux1432 + SATLiteral(156))<=0)
-156 -5754 0
-291 -5754 0
-291 -156 -5755 0
c (0<=(SATLiteral(291) - aux1432 + SATLiteral(156)))
156 5755 0
291 5755 0
291 156 5754 0
c ((SATLiteral(6) - aux1433 + SATLiteral(141))<=0)
-141 -5757 0
-6 -5757 0
-6 -141 -5758 0
c (0<=(SATLiteral(6) - aux1433 + SATLiteral(141)))
141 5758 0
6 5758 0
6 141 5757 0
c ((SATLiteral(21) + SATLiteral(36) - aux1434)<=0)
-36 -5760 0
-21 -5760 0
-21 -36 -5761 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1434))
36 5761 0
21 5761 0
21 36 5760 0
c ((SATLiteral(306) + aux1434 - aux1435)<=0)
5760 -5763 0
5761 -5764 0
-306 -5763 0
-306 5760 -5764 0
-306 5761 -5766 0
c (0<=(SATLiteral(306) + aux1434 - aux1435))
-5761 5766 0
-5760 5764 0
306 5766 0
306 -5761 5764 0
306 -5760 5763 0
c ((aux1431 + aux1433 - aux1436)<=0)
5757 -5768 0
5758 -5769 0
5751 -5768 0
5751 5757 -5769 0
5751 5758 -5771 0
5752 -5769 0
5752 5757 -5771 0
5752 5758 -5773 0
c (0<=(aux1431 + aux1433 - aux1436))
-5758 5773 0
-5757 5771 0
-5752 5773 0
-5752 -5758 5771 0
-5752 -5757 5769 0
-5751 5771 0
-5751 -5758 5769 0
-5751 -5757 5768 0
c ((SATLiteral(278) - aux1437 + SATLiteral(173))<=0)
-173 -5775 0
-278 -5775 0
-278 -173 -5776 0
c (0<=(SATLiteral(278) - aux1437 + SATLiteral(173)))
173 5776 0
278 5776 0
278 173 5775 0
c ((SATLiteral(293) - aux1438 + SATLiteral(158))<=0)
-158 -5778 0
-293 -5778 0
-293 -158 -5779 0
c (0<=(SATLiteral(293) - aux1438 + SATLiteral(158)))
158 5779 0
293 5779 0
293 158 5778 0
c ((SATLiteral(8) - aux1439 + SATLiteral(143))<=0)
-143 -5781 0
-8 -5781 0
-8 -143 -5782 0
c (0<=(SATLiteral(8) - aux1439 + SATLiteral(143)))
143 5782 0
8 5782 0
8 143 5781 0
c ((SATLiteral(23) + SATLiteral(38) - aux1440)<=0)
-38 -5784 0
-23 -5784 0
-23 -38 -5785 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1440))
38 5785 0
23 5785 0
23 38 5784 0
c ((SATLiteral(308) + aux1440 - aux1441)<=0)
5784 -5787 0
5785 -5788 0
-308 -5787 0
-308 5784 -5788 0
-308 5785 -5790 0
c (0<=(SATLiteral(308) + aux1440 - aux1441))
-5785 5790 0
-5784 5788 0
308 5790 0
308 -5785 5788 0
308 -5784 5787 0
c ((aux1437 + aux1439 - aux1442)<=0)
5781 -5792 0
5782 -5793 0
5775 -5792 0
5775 5781 -5793 0
5775 5782 -5795 0
5776 -5793 0
5776 5781 -5795 0
5776 5782 -5797 0
c (0<=(aux1437 + aux1439 - aux1442))
-5782 5797 0
-5781 5795 0
-5776 5797 0
-5776 -5782 5795 0
-5776 -5781 5793 0
-5775 5795 0
-5775 -5782 5793 0
-5775 -5781 5792 0
c ((SATLiteral(280) - aux1443 + SATLiteral(175))<=0)
-175 -5799 0
-280 -5799 0
-280 -175 -5800 0
c (0<=(SATLiteral(280) - aux1443 + SATLiteral(175)))
175 5800 0
280 5800 0
280 175 5799 0
c ((SATLiteral(295) - aux1444 + SATLiteral(160))<=0)
-160 -5802 0
-295 -5802 0
-295 -160 -5803 0
c (0<=(SATLiteral(295) - aux1444 + SATLiteral(160)))
160 5803 0
295 5803 0
295 160 5802 0
c ((SATLiteral(10) - aux1445 + SATLiteral(145))<=0)
-145 -5805 0
-10 -5805 0
-10 -145 -5806 0
c (0<=(SATLiteral(10) - aux1445 + SATLiteral(145)))
145 5806 0
10 5806 0
10 145 5805 0
c ((SATLiteral(25) + SATLiteral(40) - aux1446)<=0)
-40 -5808 0
-25 -5808 0
-25 -40 -5809 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1446))
40 5809 0
25 5809 0
25 40 5808 0
c ((SATLiteral(310) + aux1446 - aux1447)<=0)
5808 -5811 0
5809 -5812 0
-310 -5811 0
-310 5808 -5812 0
-310 5809 -5814 0
c (0<=(SATLiteral(310) + aux1446 - aux1447))
-5809 5814 0
-5808 5812 0
310 5814 0
310 -5809 5812 0
310 -5808 5811 0
c ((aux1443 + aux1445 - aux1448)<=0)
5805 -5816 0
5806 -5817 0
5799 -5816 0
5799 5805 -5817 0
5799 5806 -5819 0
5800 -5817 0
5800 5805 -5819 0
5800 5806 -5821 0
c (0<=(aux1443 + aux1445 - aux1448))
-5806 5821 0
-5805 5819 0
-5800 5821 0
-5800 -5806 5819 0
-5800 -5805 5817 0
-5799 5819 0
-5799 -5806 5817 0
-5799 -5805 5816 0
c ((SATLiteral(282) - aux1449 + SATLiteral(177))<=0)
-177 -5823 0
-282 -5823 0
-282 -177 -5824 0
c (0<=(SATLiteral(282) - aux1449 + SATLiteral(177)))
177 5824 0
282 5824 0
282 177 5823 0
c ((SATLiteral(297) - aux1450 + SATLiteral(162))<=0)
-162 -5826 0
-297 -5826 0
-297 -162 -5827 0
c (0<=(SATLiteral(297) - aux1450 + SATLiteral(162)))
162 5827 0
297 5827 0
297 162 5826 0
c ((SATLiteral(12) - aux1451 + SATLiteral(147))<=0)
-147 -5829 0
-12 -5829 0
-12 -147 -5830 0
c (0<=(SATLiteral(12) - aux1451 + SATLiteral(147)))
147 5830 0
12 5830 0
12 147 5829 0
c ((SATLiteral(27) + SATLiteral(42) - aux1452)<=0)
-42 -5832 0
-27 -5832 0
-27 -42 -5833 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1452))
42 5833 0
27 5833 0
27 42 5832 0
c ((SATLiteral(312) + aux1452 - aux1453)<=0)
5832 -5835 0
5833 -5836 0
-312 -5835 0
-312 5832 -5836 0
-312 5833 -5838 0
c (0<=(SATLiteral(312) + aux1452 - aux1453))
-5833 5838 0
-5832 5836 0
312 5838 0
312 -5833 5836 0
312 -5832 5835 0
c ((aux1449 + aux1451 - aux1454)<=0)
5829 -5840 0
5830 -5841 0
5823 -5840 0
5823 5829 -5841 0
5823 5830 -5843 0
5824 -5841 0
5824 5829 -5843 0
5824 5830 -5845 0
c (0<=(aux1449 + aux1451 - aux1454))
-5830 5845 0
-5829 5843 0
-5824 5845 0
-5824 -5830 5843 0
-5824 -5829 5841 0
-5823 5843 0
-5823 -5830 5841 0
-5823 -5829 5840 0
c ((SATLiteral(284) - aux1455 + SATLiteral(179))<=0)
-179 -5847 0
-284 -5847 0
-284 -179 -5848 0
c (0<=(SATLiteral(284) - aux1455 + SATLiteral(179)))
179 5848 0
284 5848 0
284 179 5847 0
c ((SATLiteral(299) - aux1456 + SATLiteral(164))<=0)
-164 -5850 0
-299 -5850 0
-299 -164 -5851 0
c (0<=(SATLiteral(299) - aux1456 + SATLiteral(164)))
164 5851 0
299 5851 0
299 164 5850 0
c ((SATLiteral(14) - aux1457 + SATLiteral(149))<=0)
-149 -5853 0
-14 -5853 0
-14 -149 -5854 0
c (0<=(SATLiteral(14) - aux1457 + SATLiteral(149)))
149 5854 0
14 5854 0
14 149 5853 0
c ((SATLiteral(29) + SATLiteral(44) - aux1458)<=0)
-44 -5856 0
-29 -5856 0
-29 -44 -5857 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1458))
44 5857 0
29 5857 0
29 44 5856 0
c ((SATLiteral(314) + aux1458 - aux1459)<=0)
5856 -5859 0
5857 -5860 0
-314 -5859 0
-314 5856 -5860 0
-314 5857 -5862 0
c (0<=(SATLiteral(314) + aux1458 - aux1459))
-5857 5862 0
-5856 5860 0
314 5862 0
314 -5857 5860 0
314 -5856 5859 0
c ((aux1455 + aux1457 - aux1460)<=0)
5853 -5864 0
5854 -5865 0
5847 -5864 0
5847 5853 -5865 0
5847 5854 -5867 0
5848 -5865 0
5848 5853 -5867 0
5848 5854 -5869 0
c (0<=(aux1455 + aux1457 - aux1460))
-5854 5869 0
-5853 5867 0
-5848 5869 0
-5848 -5854 5867 0
-5848 -5853 5865 0
-5847 5867 0
-5847 -5854 5865 0
-5847 -5853 5864 0
c ((SATLiteral(286) - aux1461 + SATLiteral(181))<=0)
-181 -5871 0
-286 -5871 0
-286 -181 -5872 0
c (0<=(SATLiteral(286) - aux1461 + SATLiteral(181)))
181 5872 0
286 5872 0
286 181 5871 0
c ((SATLiteral(301) - aux1462 + SATLiteral(166))<=0)
-166 -5874 0
-301 -5874 0
-301 -166 -5875 0
c (0<=(SATLiteral(301) - aux1462 + SATLiteral(166)))
166 5875 0
301 5875 0
301 166 5874 0
c ((SATLiteral(16) - aux1463 + SATLiteral(151))<=0)
-151 -5877 0
-16 -5877 0
-16 -151 -5878 0
c (0<=(SATLiteral(16) - aux1463 + SATLiteral(151)))
151 5878 0
16 5878 0
16 151 5877 0
c ((SATLiteral(31) + SATLiteral(46) - aux1464)<=0)
-46 -5880 0
-31 -5880 0
-31 -46 -5881 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1464))
46 5881 0
31 5881 0
31 46 5880 0
c ((SATLiteral(316) + aux1464 - aux1465)<=0)
5880 -5883 0
5881 -5884 0
-316 -5883 0
-316 5880 -5884 0
-316 5881 -5886 0
c (0<=(SATLiteral(316) + aux1464 - aux1465))
-5881 5886 0
-5880 5884 0
316 5886 0
316 -5881 5884 0
316 -5880 5883 0
c ((aux1461 + aux1463 - aux1466)<=0)
5877 -5888 0
5878 -5889 0
5871 -5888 0
5871 5877 -5889 0
5871 5878 -5891 0
5872 -5889 0
5872 5877 -5891 0
5872 5878 -5893 0
c (0<=(aux1461 + aux1463 - aux1466))
-5878 5893 0
-5877 5891 0
-5872 5893 0
-5872 -5878 5891 0
-5872 -5877 5889 0
-5871 5891 0
-5871 -5878 5889 0
-5871 -5877 5888 0
c ((SATLiteral(-285) - aux1467 + SATLiteral(-180))<=0)
180 -5895 0
285 -5895 0
285 180 -5896 0
c (0<=(SATLiteral(-285) - aux1467 + SATLiteral(-180)))
-180 5896 0
-285 5896 0
-285 -180 5895 0
c ((SATLiteral(-300) - aux1468 + SATLiteral(-165))<=0)
165 -5898 0
300 -5898 0
300 165 -5899 0
c (0<=(SATLiteral(-300) - aux1468 + SATLiteral(-165)))
-165 5899 0
-300 5899 0
-300 -165 5898 0
c ((SATLiteral(-15) - aux1469 + SATLiteral(-150))<=0)
150 -5901 0
15 -5901 0
15 150 -5902 0
c (0<=(SATLiteral(-15) - aux1469 + SATLiteral(-150)))
-150 5902 0
-15 5902 0
-15 -150 5901 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1470)<=0)
45 -5904 0
30 -5904 0
30 45 -5905 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1470))
-45 5905 0
-30 5905 0
-30 -45 5904 0
c ((SATLiteral(-315) + aux1470 - aux1471)<=0)
5904 -5907 0
5905 -5908 0
315 -5907 0
315 5904 -5908 0
315 5905 -5910 0
c (0<=(SATLiteral(-315) + aux1470 - aux1471))
-5905 5910 0
-5904 5908 0
-315 5910 0
-315 -5905 5908 0
-315 -5904 5907 0
c ((aux1467 + aux1469 - aux1472)<=0)
5901 -5912 0
5902 -5913 0
5895 -5912 0
5895 5901 -5913 0
5895 5902 -5915 0
5896 -5913 0
5896 5901 -5915 0
5896 5902 -5917 0
c (0<=(aux1467 + aux1469 - aux1472))
-5902 5917 0
-5901 5915 0
-5896 5917 0
-5896 -5902 5915 0
-5896 -5901 5913 0
-5895 5915 0
-5895 -5902 5913 0
-5895 -5901 5912 0
c ((SATLiteral(317) - aux1473 + SATLiteral(212))<=0)
-212 -5919 0
-317 -5919 0
-317 -212 -5920 0
c (0<=(SATLiteral(317) - aux1473 + SATLiteral(212)))
212 5920 0
317 5920 0
317 212 5919 0
c ((SATLiteral(332) - aux1474 + SATLiteral(197))<=0)
-197 -5922 0
-332 -5922 0
-332 -197 -5923 0
c (0<=(SATLiteral(332) - aux1474 + SATLiteral(197)))
197 5923 0
332 5923 0
332 197 5922 0
c ((SATLiteral(47) - aux1475 + SATLiteral(182))<=0)
-182 -5925 0
-47 -5925 0
-47 -182 -5926 0
c (0<=(SATLiteral(47) - aux1475 + SATLiteral(182)))
182 5926 0
47 5926 0
47 182 5925 0
c ((SATLiteral(62) + SATLiteral(77) - aux1476)<=0)
-77 -5928 0
-62 -5928 0
-62 -77 -5929 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1476))
77 5929 0
62 5929 0
62 77 5928 0
c ((SATLiteral(347) + aux1476 - aux1477)<=0)
5928 -5931 0
5929 -5932 0
-347 -5931 0
-347 5928 -5932 0
-347 5929 -5934 0
c (0<=(SATLiteral(347) + aux1476 - aux1477))
-5929 5934 0
-5928 5932 0
347 5934 0
347 -5929 5932 0
347 -5928 5931 0
c ((aux1473 + aux1475 - aux1478)<=0)
5925 -5936 0
5926 -5937 0
5919 -5936 0
5919 5925 -5937 0
5919 5926 -5939 0
5920 -5937 0
5920 5925 -5939 0
5920 5926 -5941 0
c (0<=(aux1473 + aux1475 - aux1478))
-5926 5941 0
-5925 5939 0
-5920 5941 0
-5920 -5926 5939 0
-5920 -5925 5937 0
-5919 5939 0
-5919 -5926 5937 0
-5919 -5925 5936 0
c ((SATLiteral(319) - aux1479 + SATLiteral(214))<=0)
-214 -5943 0
-319 -5943 0
-319 -214 -5944 0
c (0<=(SATLiteral(319) - aux1479 + SATLiteral(214)))
214 5944 0
319 5944 0
319 214 5943 0
c ((SATLiteral(334) - aux1480 + SATLiteral(199))<=0)
-199 -5946 0
-334 -5946 0
-334 -199 -5947 0
c (0<=(SATLiteral(334) - aux1480 + SATLiteral(199)))
199 5947 0
334 5947 0
334 199 5946 0
c ((SATLiteral(49) - aux1481 + SATLiteral(184))<=0)
-184 -5949 0
-49 -5949 0
-49 -184 -5950 0
c (0<=(SATLiteral(49) - aux1481 + SATLiteral(184)))
184 5950 0
49 5950 0
49 184 5949 0
c ((SATLiteral(64) + SATLiteral(79) - aux1482)<=0)
-79 -5952 0
-64 -5952 0
-64 -79 -5953 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1482))
79 5953 0
64 5953 0
64 79 5952 0
c ((SATLiteral(349) + aux1482 - aux1483)<=0)
5952 -5955 0
5953 -5956 0
-349 -5955 0
-349 5952 -5956 0
-349 5953 -5958 0
c (0<=(SATLiteral(349) + aux1482 - aux1483))
-5953 5958 0
-5952 5956 0
349 5958 0
349 -5953 5956 0
349 -5952 5955 0
c ((aux1479 + aux1481 - aux1484)<=0)
5949 -5960 0
5950 -5961 0
5943 -5960 0
5943 5949 -5961 0
5943 5950 -5963 0
5944 -5961 0
5944 5949 -5963 0
5944 5950 -5965 0
c (0<=(aux1479 + aux1481 - aux1484))
-5950 5965 0
-5949 5963 0
-5944 5965 0
-5944 -5950 5963 0
-5944 -5949 5961 0
-5943 5963 0
-5943 -5950 5961 0
-5943 -5949 5960 0
c ((SATLiteral(321) - aux1485 + SATLiteral(216))<=0)
-216 -5967 0
-321 -5967 0
-321 -216 -5968 0
c (0<=(SATLiteral(321) - aux1485 + SATLiteral(216)))
216 5968 0
321 5968 0
321 216 5967 0
c ((SATLiteral(336) - aux1486 + SATLiteral(201))<=0)
-201 -5970 0
-336 -5970 0
-336 -201 -5971 0
c (0<=(SATLiteral(336) - aux1486 + SATLiteral(201)))
201 5971 0
336 5971 0
336 201 5970 0
c ((SATLiteral(51) - aux1487 + SATLiteral(186))<=0)
-186 -5973 0
-51 -5973 0
-51 -186 -5974 0
c (0<=(SATLiteral(51) - aux1487 + SATLiteral(186)))
186 5974 0
51 5974 0
51 186 5973 0
c ((SATLiteral(66) + SATLiteral(81) - aux1488)<=0)
-81 -5976 0
-66 -5976 0
-66 -81 -5977 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1488))
81 5977 0
66 5977 0
66 81 5976 0
c ((SATLiteral(351) + aux1488 - aux1489)<=0)
5976 -5979 0
5977 -5980 0
-351 -5979 0
-351 5976 -5980 0
-351 5977 -5982 0
c (0<=(SATLiteral(351) + aux1488 - aux1489))
-5977 5982 0
-5976 5980 0
351 5982 0
351 -5977 5980 0
351 -5976 5979 0
c ((aux1485 + aux1487 - aux1490)<=0)
5973 -5984 0
5974 -5985 0
5967 -5984 0
5967 5973 -5985 0
5967 5974 -5987 0
5968 -5985 0
5968 5973 -5987 0
5968 5974 -5989 0
c (0<=(aux1485 + aux1487 - aux1490))
-5974 5989 0
-5973 5987 0
-5968 5989 0
-5968 -5974 5987 0
-5968 -5973 5985 0
-5967 5987 0
-5967 -5974 5985 0
-5967 -5973 5984 0
c ((SATLiteral(323) - aux1491 + SATLiteral(218))<=0)
-218 -5991 0
-323 -5991 0
-323 -218 -5992 0
c (0<=(SATLiteral(323) - aux1491 + SATLiteral(218)))
218 5992 0
323 5992 0
323 218 5991 0
c ((SATLiteral(338) - aux1492 + SATLiteral(203))<=0)
-203 -5994 0
-338 -5994 0
-338 -203 -5995 0
c (0<=(SATLiteral(338) - aux1492 + SATLiteral(203)))
203 5995 0
338 5995 0
338 203 5994 0
c ((SATLiteral(53) - aux1493 + SATLiteral(188))<=0)
-188 -5997 0
-53 -5997 0
-53 -188 -5998 0
c (0<=(SATLiteral(53) - aux1493 + SATLiteral(188)))
188 5998 0
53 5998 0
53 188 5997 0
c ((SATLiteral(68) + SATLiteral(83) - aux1494)<=0)
-83 -6000 0
-68 -6000 0
-68 -83 -6001 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1494))
83 6001 0
68 6001 0
68 83 6000 0
c ((SATLiteral(353) + aux1494 - aux1495)<=0)
6000 -6003 0
6001 -6004 0
-353 -6003 0
-353 6000 -6004 0
-353 6001 -6006 0
c (0<=(SATLiteral(353) + aux1494 - aux1495))
-6001 6006 0
-6000 6004 0
353 6006 0
353 -6001 6004 0
353 -6000 6003 0
c ((aux1491 + aux1493 - aux1496)<=0)
5997 -6008 0
5998 -6009 0
5991 -6008 0
5991 5997 -6009 0
5991 5998 -6011 0
5992 -6009 0
5992 5997 -6011 0
5992 5998 -6013 0
c (0<=(aux1491 + aux1493 - aux1496))
-5998 6013 0
-5997 6011 0
-5992 6013 0
-5992 -5998 6011 0
-5992 -5997 6009 0
-5991 6011 0
-5991 -5998 6009 0
-5991 -5997 6008 0
c ((SATLiteral(325) - aux1497 + SATLiteral(220))<=0)
-220 -6015 0
-325 -6015 0
-325 -220 -6016 0
c (0<=(SATLiteral(325) - aux1497 + SATLiteral(220)))
220 6016 0
325 6016 0
325 220 6015 0
c ((SATLiteral(340) - aux1498 + SATLiteral(205))<=0)
-205 -6018 0
-340 -6018 0
-340 -205 -6019 0
c (0<=(SATLiteral(340) - aux1498 + SATLiteral(205)))
205 6019 0
340 6019 0
340 205 6018 0
c ((SATLiteral(55) - aux1499 + SATLiteral(190))<=0)
-190 -6021 0
-55 -6021 0
-55 -190 -6022 0
c (0<=(SATLiteral(55) - aux1499 + SATLiteral(190)))
190 6022 0
55 6022 0
55 190 6021 0
c ((SATLiteral(70) + SATLiteral(85) - aux1500)<=0)
-85 -6024 0
-70 -6024 0
-70 -85 -6025 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1500))
85 6025 0
70 6025 0
70 85 6024 0
c ((SATLiteral(355) + aux1500 - aux1501)<=0)
6024 -6027 0
6025 -6028 0
-355 -6027 0
-355 6024 -6028 0
-355 6025 -6030 0
c (0<=(SATLiteral(355) + aux1500 - aux1501))
-6025 6030 0
-6024 6028 0
355 6030 0
355 -6025 6028 0
355 -6024 6027 0
c ((aux1497 + aux1499 - aux1502)<=0)
6021 -6032 0
6022 -6033 0
6015 -6032 0
6015 6021 -6033 0
6015 6022 -6035 0
6016 -6033 0
6016 6021 -6035 0
6016 6022 -6037 0
c (0<=(aux1497 + aux1499 - aux1502))
-6022 6037 0
-6021 6035 0
-6016 6037 0
-6016 -6022 6035 0
-6016 -6021 6033 0
-6015 6035 0
-6015 -6022 6033 0
-6015 -6021 6032 0
c ((SATLiteral(327) - aux1503 + SATLiteral(222))<=0)
-222 -6039 0
-327 -6039 0
-327 -222 -6040 0
c (0<=(SATLiteral(327) - aux1503 + SATLiteral(222)))
222 6040 0
327 6040 0
327 222 6039 0
c ((SATLiteral(342) - aux1504 + SATLiteral(207))<=0)
-207 -6042 0
-342 -6042 0
-342 -207 -6043 0
c (0<=(SATLiteral(342) - aux1504 + SATLiteral(207)))
207 6043 0
342 6043 0
342 207 6042 0
c ((SATLiteral(57) - aux1505 + SATLiteral(192))<=0)
-192 -6045 0
-57 -6045 0
-57 -192 -6046 0
c (0<=(SATLiteral(57) - aux1505 + SATLiteral(192)))
192 6046 0
57 6046 0
57 192 6045 0
c ((SATLiteral(72) + SATLiteral(87) - aux1506)<=0)
-87 -6048 0
-72 -6048 0
-72 -87 -6049 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1506))
87 6049 0
72 6049 0
72 87 6048 0
c ((SATLiteral(357) + aux1506 - aux1507)<=0)
6048 -6051 0
6049 -6052 0
-357 -6051 0
-357 6048 -6052 0
-357 6049 -6054 0
c (0<=(SATLiteral(357) + aux1506 - aux1507))
-6049 6054 0
-6048 6052 0
357 6054 0
357 -6049 6052 0
357 -6048 6051 0
c ((aux1503 + aux1505 - aux1508)<=0)
6045 -6056 0
6046 -6057 0
6039 -6056 0
6039 6045 -6057 0
6039 6046 -6059 0
6040 -6057 0
6040 6045 -6059 0
6040 6046 -6061 0
c (0<=(aux1503 + aux1505 - aux1508))
-6046 6061 0
-6045 6059 0
-6040 6061 0
-6040 -6046 6059 0
-6040 -6045 6057 0
-6039 6059 0
-6039 -6046 6057 0
-6039 -6045 6056 0
c ((SATLiteral(329) - aux1509 + SATLiteral(224))<=0)
-224 -6063 0
-329 -6063 0
-329 -224 -6064 0
c (0<=(SATLiteral(329) - aux1509 + SATLiteral(224)))
224 6064 0
329 6064 0
329 224 6063 0
c ((SATLiteral(344) - aux1510 + SATLiteral(209))<=0)
-209 -6066 0
-344 -6066 0
-344 -209 -6067 0
c (0<=(SATLiteral(344) - aux1510 + SATLiteral(209)))
209 6067 0
344 6067 0
344 209 6066 0
c ((SATLiteral(59) - aux1511 + SATLiteral(194))<=0)
-194 -6069 0
-59 -6069 0
-59 -194 -6070 0
c (0<=(SATLiteral(59) - aux1511 + SATLiteral(194)))
194 6070 0
59 6070 0
59 194 6069 0
c ((SATLiteral(74) + SATLiteral(89) - aux1512)<=0)
-89 -6072 0
-74 -6072 0
-74 -89 -6073 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1512))
89 6073 0
74 6073 0
74 89 6072 0
c ((SATLiteral(359) + aux1512 - aux1513)<=0)
6072 -6075 0
6073 -6076 0
-359 -6075 0
-359 6072 -6076 0
-359 6073 -6078 0
c (0<=(SATLiteral(359) + aux1512 - aux1513))
-6073 6078 0
-6072 6076 0
359 6078 0
359 -6073 6076 0
359 -6072 6075 0
c ((aux1509 + aux1511 - aux1514)<=0)
6069 -6080 0
6070 -6081 0
6063 -6080 0
6063 6069 -6081 0
6063 6070 -6083 0
6064 -6081 0
6064 6069 -6083 0
6064 6070 -6085 0
c (0<=(aux1509 + aux1511 - aux1514))
-6070 6085 0
-6069 6083 0
-6064 6085 0
-6064 -6070 6083 0
-6064 -6069 6081 0
-6063 6083 0
-6063 -6070 6081 0
-6063 -6069 6080 0
c ((SATLiteral(331) - aux1515 + SATLiteral(226))<=0)
-226 -6087 0
-331 -6087 0
-331 -226 -6088 0
c (0<=(SATLiteral(331) - aux1515 + SATLiteral(226)))
226 6088 0
331 6088 0
331 226 6087 0
c ((SATLiteral(346) - aux1516 + SATLiteral(211))<=0)
-211 -6090 0
-346 -6090 0
-346 -211 -6091 0
c (0<=(SATLiteral(346) - aux1516 + SATLiteral(211)))
211 6091 0
346 6091 0
346 211 6090 0
c ((SATLiteral(61) - aux1517 + SATLiteral(196))<=0)
-196 -6093 0
-61 -6093 0
-61 -196 -6094 0
c (0<=(SATLiteral(61) - aux1517 + SATLiteral(196)))
196 6094 0
61 6094 0
61 196 6093 0
c ((SATLiteral(76) + SATLiteral(91) - aux1518)<=0)
-91 -6096 0
-76 -6096 0
-76 -91 -6097 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1518))
91 6097 0
76 6097 0
76 91 6096 0
c ((SATLiteral(361) + aux1518 - aux1519)<=0)
6096 -6099 0
6097 -6100 0
-361 -6099 0
-361 6096 -6100 0
-361 6097 -6102 0
c (0<=(SATLiteral(361) + aux1518 - aux1519))
-6097 6102 0
-6096 6100 0
361 6102 0
361 -6097 6100 0
361 -6096 6099 0
c ((aux1515 + aux1517 - aux1520)<=0)
6093 -6104 0
6094 -6105 0
6087 -6104 0
6087 6093 -6105 0
6087 6094 -6107 0
6088 -6105 0
6088 6093 -6107 0
6088 6094 -6109 0
c (0<=(aux1515 + aux1517 - aux1520))
-6094 6109 0
-6093 6107 0
-6088 6109 0
-6088 -6094 6107 0
-6088 -6093 6105 0
-6087 6107 0
-6087 -6094 6105 0
-6087 -6093 6104 0
c ((SATLiteral(-330) - aux1521 + SATLiteral(-225))<=0)
225 -6111 0
330 -6111 0
330 225 -6112 0
c (0<=(SATLiteral(-330) - aux1521 + SATLiteral(-225)))
-225 6112 0
-330 6112 0
-330 -225 6111 0
c ((SATLiteral(-345) - aux1522 + SATLiteral(-210))<=0)
210 -6114 0
345 -6114 0
345 210 -6115 0
c (0<=(SATLiteral(-345) - aux1522 + SATLiteral(-210)))
-210 6115 0
-345 6115 0
-345 -210 6114 0
c ((SATLiteral(-60) - aux1523 + SATLiteral(-195))<=0)
195 -6117 0
60 -6117 0
60 195 -6118 0
c (0<=(SATLiteral(-60) - aux1523 + SATLiteral(-195)))
-195 6118 0
-60 6118 0
-60 -195 6117 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1524)<=0)
90 -6120 0
75 -6120 0
75 90 -6121 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1524))
-90 6121 0
-75 6121 0
-75 -90 6120 0
c ((SATLiteral(-360) + aux1524 - aux1525)<=0)
6120 -6123 0
6121 -6124 0
360 -6123 0
360 6120 -6124 0
360 6121 -6126 0
c (0<=(SATLiteral(-360) + aux1524 - aux1525))
-6121 6126 0
-6120 6124 0
-360 6126 0
-360 -6121 6124 0
-360 -6120 6123 0
c ((aux1521 + aux1523 - aux1526)<=0)
6117 -6128 0
6118 -6129 0
6111 -6128 0
6111 6117 -6129 0
6111 6118 -6131 0
6112 -6129 0
6112 6117 -6131 0
6112 6118 -6133 0
c (0<=(aux1521 + aux1523 - aux1526))
-6118 6133 0
-6117 6131 0
-6112 6133 0
-6112 -6118 6131 0
-6112 -6117 6129 0
-6111 6131 0
-6111 -6118 6129 0
-6111 -6117 6128 0
c ((SATLiteral(362) - aux1527 + SATLiteral(257))<=0)
-257 -6135 0
-362 -6135 0
-362 -257 -6136 0
c (0<=(SATLiteral(362) - aux1527 + SATLiteral(257)))
257 6136 0
362 6136 0
362 257 6135 0
c ((SATLiteral(377) - aux1528 + SATLiteral(242))<=0)
-242 -6138 0
-377 -6138 0
-377 -242 -6139 0
c (0<=(SATLiteral(377) - aux1528 + SATLiteral(242)))
242 6139 0
377 6139 0
377 242 6138 0
c ((SATLiteral(92) - aux1529 + SATLiteral(227))<=0)
-227 -6141 0
-92 -6141 0
-92 -227 -6142 0
c (0<=(SATLiteral(92) - aux1529 + SATLiteral(227)))
227 6142 0
92 6142 0
92 227 6141 0
c ((SATLiteral(107) + SATLiteral(122) - aux1530)<=0)
-122 -6144 0
-107 -6144 0
-107 -122 -6145 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1530))
122 6145 0
107 6145 0
107 122 6144 0
c ((SATLiteral(392) + aux1530 - aux1531)<=0)
6144 -6147 0
6145 -6148 0
-392 -6147 0
-392 6144 -6148 0
-392 6145 -6150 0
c (0<=(SATLiteral(392) + aux1530 - aux1531))
-6145 6150 0
-6144 6148 0
392 6150 0
392 -6145 6148 0
392 -6144 6147 0
c ((aux1527 + aux1529 - aux1532)<=0)
6141 -6152 0
6142 -6153 0
6135 -6152 0
6135 6141 -6153 0
6135 6142 -6155 0
6136 -6153 0
6136 6141 -6155 0
6136 6142 -6157 0
c (0<=(aux1527 + aux1529 - aux1532))
-6142 6157 0
-6141 6155 0
-6136 6157 0
-6136 -6142 6155 0
-6136 -6141 6153 0
-6135 6155 0
-6135 -6142 6153 0
-6135 -6141 6152 0
c ((SATLiteral(364) - aux1533 + SATLiteral(259))<=0)
-259 -6159 0
-364 -6159 0
-364 -259 -6160 0
c (0<=(SATLiteral(364) - aux1533 + SATLiteral(259)))
259 6160 0
364 6160 0
364 259 6159 0
c ((SATLiteral(379) - aux1534 + SATLiteral(244))<=0)
-244 -6162 0
-379 -6162 0
-379 -244 -6163 0
c (0<=(SATLiteral(379) - aux1534 + SATLiteral(244)))
244 6163 0
379 6163 0
379 244 6162 0
c ((SATLiteral(94) - aux1535 + SATLiteral(229))<=0)
-229 -6165 0
-94 -6165 0
-94 -229 -6166 0
c (0<=(SATLiteral(94) - aux1535 + SATLiteral(229)))
229 6166 0
94 6166 0
94 229 6165 0
c ((SATLiteral(109) + SATLiteral(124) - aux1536)<=0)
-124 -6168 0
-109 -6168 0
-109 -124 -6169 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1536))
124 6169 0
109 6169 0
109 124 6168 0
c ((SATLiteral(394) + aux1536 - aux1537)<=0)
6168 -6171 0
6169 -6172 0
-394 -6171 0
-394 6168 -6172 0
-394 6169 -6174 0
c (0<=(SATLiteral(394) + aux1536 - aux1537))
-6169 6174 0
-6168 6172 0
394 6174 0
394 -6169 6172 0
394 -6168 6171 0
c ((aux1533 + aux1535 - aux1538)<=0)
6165 -6176 0
6166 -6177 0
6159 -6176 0
6159 6165 -6177 0
6159 6166 -6179 0
6160 -6177 0
6160 6165 -6179 0
6160 6166 -6181 0
c (0<=(aux1533 + aux1535 - aux1538))
-6166 6181 0
-6165 6179 0
-6160 6181 0
-6160 -6166 6179 0
-6160 -6165 6177 0
-6159 6179 0
-6159 -6166 6177 0
-6159 -6165 6176 0
c ((SATLiteral(366) - aux1539 + SATLiteral(261))<=0)
-261 -6183 0
-366 -6183 0
-366 -261 -6184 0
c (0<=(SATLiteral(366) - aux1539 + SATLiteral(261)))
261 6184 0
366 6184 0
366 261 6183 0
c ((SATLiteral(381) - aux1540 + SATLiteral(246))<=0)
-246 -6186 0
-381 -6186 0
-381 -246 -6187 0
c (0<=(SATLiteral(381) - aux1540 + SATLiteral(246)))
246 6187 0
381 6187 0
381 246 6186 0
c ((SATLiteral(96) - aux1541 + SATLiteral(231))<=0)
-231 -6189 0
-96 -6189 0
-96 -231 -6190 0
c (0<=(SATLiteral(96) - aux1541 + SATLiteral(231)))
231 6190 0
96 6190 0
96 231 6189 0
c ((SATLiteral(111) + SATLiteral(126) - aux1542)<=0)
-126 -6192 0
-111 -6192 0
-111 -126 -6193 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1542))
126 6193 0
111 6193 0
111 126 6192 0
c ((SATLiteral(396) + aux1542 - aux1543)<=0)
6192 -6195 0
6193 -6196 0
-396 -6195 0
-396 6192 -6196 0
-396 6193 -6198 0
c (0<=(SATLiteral(396) + aux1542 - aux1543))
-6193 6198 0
-6192 6196 0
396 6198 0
396 -6193 6196 0
396 -6192 6195 0
c ((aux1539 + aux1541 - aux1544)<=0)
6189 -6200 0
6190 -6201 0
6183 -6200 0
6183 6189 -6201 0
6183 6190 -6203 0
6184 -6201 0
6184 6189 -6203 0
6184 6190 -6205 0
c (0<=(aux1539 + aux1541 - aux1544))
-6190 6205 0
-6189 6203 0
-6184 6205 0
-6184 -6190 6203 0
-6184 -6189 6201 0
-6183 6203 0
-6183 -6190 6201 0
-6183 -6189 6200 0
c ((SATLiteral(368) - aux1545 + SATLiteral(263))<=0)
-263 -6207 0
-368 -6207 0
-368 -263 -6208 0
c (0<=(SATLiteral(368) - aux1545 + SATLiteral(263)))
263 6208 0
368 6208 0
368 263 6207 0
c ((SATLiteral(383) - aux1546 + SATLiteral(248))<=0)
-248 -6210 0
-383 -6210 0
-383 -248 -6211 0
c (0<=(SATLiteral(383) - aux1546 + SATLiteral(248)))
248 6211 0
383 6211 0
383 248 6210 0
c ((SATLiteral(98) - aux1547 + SATLiteral(233))<=0)
-233 -6213 0
-98 -6213 0
-98 -233 -6214 0
c (0<=(SATLiteral(98) - aux1547 + SATLiteral(233)))
233 6214 0
98 6214 0
98 233 6213 0
c ((SATLiteral(113) + SATLiteral(128) - aux1548)<=0)
-128 -6216 0
-113 -6216 0
-113 -128 -6217 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1548))
128 6217 0
113 6217 0
113 128 6216 0
c ((SATLiteral(398) + aux1548 - aux1549)<=0)
6216 -6219 0
6217 -6220 0
-398 -6219 0
-398 6216 -6220 0
-398 6217 -6222 0
c (0<=(SATLiteral(398) + aux1548 - aux1549))
-6217 6222 0
-6216 6220 0
398 6222 0
398 -6217 6220 0
398 -6216 6219 0
c ((aux1545 + aux1547 - aux1550)<=0)
6213 -6224 0
6214 -6225 0
6207 -6224 0
6207 6213 -6225 0
6207 6214 -6227 0
6208 -6225 0
6208 6213 -6227 0
6208 6214 -6229 0
c (0<=(aux1545 + aux1547 - aux1550))
-6214 6229 0
-6213 6227 0
-6208 6229 0
-6208 -6214 6227 0
-6208 -6213 6225 0
-6207 6227 0
-6207 -6214 6225 0
-6207 -6213 6224 0
c ((SATLiteral(370) - aux1551 + SATLiteral(265))<=0)
-265 -6231 0
-370 -6231 0
-370 -265 -6232 0
c (0<=(SATLiteral(370) - aux1551 + SATLiteral(265)))
265 6232 0
370 6232 0
370 265 6231 0
c ((SATLiteral(385) - aux1552 + SATLiteral(250))<=0)
-250 -6234 0
-385 -6234 0
-385 -250 -6235 0
c (0<=(SATLiteral(385) - aux1552 + SATLiteral(250)))
250 6235 0
385 6235 0
385 250 6234 0
c ((SATLiteral(100) - aux1553 + SATLiteral(235))<=0)
-235 -6237 0
-100 -6237 0
-100 -235 -6238 0
c (0<=(SATLiteral(100) - aux1553 + SATLiteral(235)))
235 6238 0
100 6238 0
100 235 6237 0
c ((SATLiteral(115) + SATLiteral(130) - aux1554)<=0)
-130 -6240 0
-115 -6240 0
-115 -130 -6241 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1554))
130 6241 0
115 6241 0
115 130 6240 0
c ((SATLiteral(400) + aux1554 - aux1555)<=0)
6240 -6243 0
6241 -6244 0
-400 -6243 0
-400 6240 -6244 0
-400 6241 -6246 0
c (0<=(SATLiteral(400) + aux1554 - aux1555))
-6241 6246 0
-6240 6244 0
400 6246 0
400 -6241 6244 0
400 -6240 6243 0
c ((aux1551 + aux1553 - aux1556)<=0)
6237 -6248 0
6238 -6249 0
6231 -6248 0
6231 6237 -6249 0
6231 6238 -6251 0
6232 -6249 0
6232 6237 -6251 0
6232 6238 -6253 0
c (0<=(aux1551 + aux1553 - aux1556))
-6238 6253 0
-6237 6251 0
-6232 6253 0
-6232 -6238 6251 0
-6232 -6237 6249 0
-6231 6251 0
-6231 -6238 6249 0
-6231 -6237 6248 0
c ((SATLiteral(372) - aux1557 + SATLiteral(267))<=0)
-267 -6255 0
-372 -6255 0
-372 -267 -6256 0
c (0<=(SATLiteral(372) - aux1557 + SATLiteral(267)))
267 6256 0
372 6256 0
372 267 6255 0
c ((SATLiteral(387) - aux1558 + SATLiteral(252))<=0)
-252 -6258 0
-387 -6258 0
-387 -252 -6259 0
c (0<=(SATLiteral(387) - aux1558 + SATLiteral(252)))
252 6259 0
387 6259 0
387 252 6258 0
c ((SATLiteral(102) - aux1559 + SATLiteral(237))<=0)
-237 -6261 0
-102 -6261 0
-102 -237 -6262 0
c (0<=(SATLiteral(102) - aux1559 + SATLiteral(237)))
237 6262 0
102 6262 0
102 237 6261 0
c ((SATLiteral(117) + SATLiteral(132) - aux1560)<=0)
-132 -6264 0
-117 -6264 0
-117 -132 -6265 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1560))
132 6265 0
117 6265 0
117 132 6264 0
c ((SATLiteral(402) + aux1560 - aux1561)<=0)
6264 -6267 0
6265 -6268 0
-402 -6267 0
-402 6264 -6268 0
-402 6265 -6270 0
c (0<=(SATLiteral(402) + aux1560 - aux1561))
-6265 6270 0
-6264 6268 0
402 6270 0
402 -6265 6268 0
402 -6264 6267 0
c ((aux1557 + aux1559 - aux1562)<=0)
6261 -6272 0
6262 -6273 0
6255 -6272 0
6255 6261 -6273 0
6255 6262 -6275 0
6256 -6273 0
6256 6261 -6275 0
6256 6262 -6277 0
c (0<=(aux1557 + aux1559 - aux1562))
-6262 6277 0
-6261 6275 0
-6256 6277 0
-6256 -6262 6275 0
-6256 -6261 6273 0
-6255 6275 0
-6255 -6262 6273 0
-6255 -6261 6272 0
c ((SATLiteral(374) - aux1563 + SATLiteral(269))<=0)
-269 -6279 0
-374 -6279 0
-374 -269 -6280 0
c (0<=(SATLiteral(374) - aux1563 + SATLiteral(269)))
269 6280 0
374 6280 0
374 269 6279 0
c ((SATLiteral(389) - aux1564 + SATLiteral(254))<=0)
-254 -6282 0
-389 -6282 0
-389 -254 -6283 0
c (0<=(SATLiteral(389) - aux1564 + SATLiteral(254)))
254 6283 0
389 6283 0
389 254 6282 0
c ((SATLiteral(104) - aux1565 + SATLiteral(239))<=0)
-239 -6285 0
-104 -6285 0
-104 -239 -6286 0
c (0<=(SATLiteral(104) - aux1565 + SATLiteral(239)))
239 6286 0
104 6286 0
104 239 6285 0
c ((SATLiteral(119) + SATLiteral(134) - aux1566)<=0)
-134 -6288 0
-119 -6288 0
-119 -134 -6289 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1566))
134 6289 0
119 6289 0
119 134 6288 0
c ((SATLiteral(404) + aux1566 - aux1567)<=0)
6288 -6291 0
6289 -6292 0
-404 -6291 0
-404 6288 -6292 0
-404 6289 -6294 0
c (0<=(SATLiteral(404) + aux1566 - aux1567))
-6289 6294 0
-6288 6292 0
404 6294 0
404 -6289 6292 0
404 -6288 6291 0
c ((aux1563 + aux1565 - aux1568)<=0)
6285 -6296 0
6286 -6297 0
6279 -6296 0
6279 6285 -6297 0
6279 6286 -6299 0
6280 -6297 0
6280 6285 -6299 0
6280 6286 -6301 0
c (0<=(aux1563 + aux1565 - aux1568))
-6286 6301 0
-6285 6299 0
-6280 6301 0
-6280 -6286 6299 0
-6280 -6285 6297 0
-6279 6299 0
-6279 -6286 6297 0
-6279 -6285 6296 0
c ((SATLiteral(376) - aux1569 + SATLiteral(271))<=0)
-271 -6303 0
-376 -6303 0
-376 -271 -6304 0
c (0<=(SATLiteral(376) - aux1569 + SATLiteral(271)))
271 6304 0
376 6304 0
376 271 6303 0
c ((SATLiteral(391) - aux1570 + SATLiteral(256))<=0)
-256 -6306 0
-391 -6306 0
-391 -256 -6307 0
c (0<=(SATLiteral(391) - aux1570 + SATLiteral(256)))
256 6307 0
391 6307 0
391 256 6306 0
c ((SATLiteral(106) - aux1571 + SATLiteral(241))<=0)
-241 -6309 0
-106 -6309 0
-106 -241 -6310 0
c (0<=(SATLiteral(106) - aux1571 + SATLiteral(241)))
241 6310 0
106 6310 0
106 241 6309 0
c ((SATLiteral(121) + SATLiteral(136) - aux1572)<=0)
-136 -6312 0
-121 -6312 0
-121 -136 -6313 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1572))
136 6313 0
121 6313 0
121 136 6312 0
c ((SATLiteral(406) + aux1572 - aux1573)<=0)
6312 -6315 0
6313 -6316 0
-406 -6315 0
-406 6312 -6316 0
-406 6313 -6318 0
c (0<=(SATLiteral(406) + aux1572 - aux1573))
-6313 6318 0
-6312 6316 0
406 6318 0
406 -6313 6316 0
406 -6312 6315 0
c ((aux1569 + aux1571 - aux1574)<=0)
6309 -6320 0
6310 -6321 0
6303 -6320 0
6303 6309 -6321 0
6303 6310 -6323 0
6304 -6321 0
6304 6309 -6323 0
6304 6310 -6325 0
c (0<=(aux1569 + aux1571 - aux1574))
-6310 6325 0
-6309 6323 0
-6304 6325 0
-6304 -6310 6323 0
-6304 -6309 6321 0
-6303 6323 0
-6303 -6310 6321 0
-6303 -6309 6320 0
c ((SATLiteral(-375) - aux1575 + SATLiteral(-270))<=0)
270 -6327 0
375 -6327 0
375 270 -6328 0
c (0<=(SATLiteral(-375) - aux1575 + SATLiteral(-270)))
-270 6328 0
-375 6328 0
-375 -270 6327 0
c ((SATLiteral(-390) - aux1576 + SATLiteral(-255))<=0)
255 -6330 0
390 -6330 0
390 255 -6331 0
c (0<=(SATLiteral(-390) - aux1576 + SATLiteral(-255)))
-255 6331 0
-390 6331 0
-390 -255 6330 0
c ((SATLiteral(-105) - aux1577 + SATLiteral(-240))<=0)
240 -6333 0
105 -6333 0
105 240 -6334 0
c (0<=(SATLiteral(-105) - aux1577 + SATLiteral(-240)))
-240 6334 0
-105 6334 0
-105 -240 6333 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1578)<=0)
135 -6336 0
120 -6336 0
120 135 -6337 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1578))
-135 6337 0
-120 6337 0
-120 -135 6336 0
c ((SATLiteral(-405) + aux1578 - aux1579)<=0)
6336 -6339 0
6337 -6340 0
405 -6339 0
405 6336 -6340 0
405 6337 -6342 0
c (0<=(SATLiteral(-405) + aux1578 - aux1579))
-6337 6342 0
-6336 6340 0
-405 6342 0
-405 -6337 6340 0
-405 -6336 6339 0
c ((aux1575 + aux1577 - aux1580)<=0)
6333 -6344 0
6334 -6345 0
6327 -6344 0
6327 6333 -6345 0
6327 6334 -6347 0
6328 -6345 0
6328 6333 -6347 0
6328 6334 -6349 0
c (0<=(aux1575 + aux1577 - aux1580))
-6334 6349 0
-6333 6347 0
-6328 6349 0
-6328 -6334 6347 0
-6328 -6333 6345 0
-6327 6347 0
-6327 -6334 6345 0
-6327 -6333 6344 0
c ((SATLiteral(677) - aux1581 + SATLiteral(572))<=0)
-572 -6351 0
-677 -6351 0
-677 -572 -6352 0
c (0<=(SATLiteral(677) - aux1581 + SATLiteral(572)))
572 6352 0
677 6352 0
677 572 6351 0
c ((SATLiteral(692) - aux1582 + SATLiteral(557))<=0)
-557 -6354 0
-692 -6354 0
-692 -557 -6355 0
c (0<=(SATLiteral(692) - aux1582 + SATLiteral(557)))
557 6355 0
692 6355 0
692 557 6354 0
c (( - aux1583 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6357 0
-407 -6357 0
-407 -542 -6358 0
c (0<=( - aux1583 + SATLiteral(407) + SATLiteral(542)))
542 6358 0
407 6358 0
407 542 6357 0
c (( - aux1584 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6360 0
-422 -6360 0
-422 -437 -6361 0
c (0<=( - aux1584 + SATLiteral(422) + SATLiteral(437)))
437 6361 0
422 6361 0
422 437 6360 0
c ((SATLiteral(707) + aux1584 - aux1585)<=0)
6360 -6363 0
6361 -6364 0
-707 -6363 0
-707 6360 -6364 0
-707 6361 -6366 0
c (0<=(SATLiteral(707) + aux1584 - aux1585))
-6361 6366 0
-6360 6364 0
707 6366 0
707 -6361 6364 0
707 -6360 6363 0
c ((aux1581 + aux1583 - aux1586)<=0)
6357 -6368 0
6358 -6369 0
6351 -6368 0
6351 6357 -6369 0
6351 6358 -6371 0
6352 -6369 0
6352 6357 -6371 0
6352 6358 -6373 0
c (0<=(aux1581 + aux1583 - aux1586))
-6358 6373 0
-6357 6371 0
-6352 6373 0
-6352 -6358 6371 0
-6352 -6357 6369 0
-6351 6371 0
-6351 -6358 6369 0
-6351 -6357 6368 0
c ((SATLiteral(679) - aux1587 + SATLiteral(574))<=0)
-574 -6375 0
-679 -6375 0
-679 -574 -6376 0
c (0<=(SATLiteral(679) - aux1587 + SATLiteral(574)))
574 6376 0
679 6376 0
679 574 6375 0
c ((SATLiteral(694) - aux1588 + SATLiteral(559))<=0)
-559 -6378 0
-694 -6378 0
-694 -559 -6379 0
c (0<=(SATLiteral(694) - aux1588 + SATLiteral(559)))
559 6379 0
694 6379 0
694 559 6378 0
c (( - aux1589 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6381 0
-409 -6381 0
-409 -544 -6382 0
c (0<=( - aux1589 + SATLiteral(409) + SATLiteral(544)))
544 6382 0
409 6382 0
409 544 6381 0
c (( - aux1590 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6384 0
-424 -6384 0
-424 -439 -6385 0
c (0<=( - aux1590 + SATLiteral(424) + SATLiteral(439)))
439 6385 0
424 6385 0
424 439 6384 0
c ((SATLiteral(709) + aux1590 - aux1591)<=0)
6384 -6387 0
6385 -6388 0
-709 -6387 0
-709 6384 -6388 0
-709 6385 -6390 0
c (0<=(SATLiteral(709) + aux1590 - aux1591))
-6385 6390 0
-6384 6388 0
709 6390 0
709 -6385 6388 0
709 -6384 6387 0
c ((aux1587 + aux1589 - aux1592)<=0)
6381 -6392 0
6382 -6393 0
6375 -6392 0
6375 6381 -6393 0
6375 6382 -6395 0
6376 -6393 0
6376 6381 -6395 0
6376 6382 -6397 0
c (0<=(aux1587 + aux1589 - aux1592))
-6382 6397 0
-6381 6395 0
-6376 6397 0
-6376 -6382 6395 0
-6376 -6381 6393 0
-6375 6395 0
-6375 -6382 6393 0
-6375 -6381 6392 0
c ((SATLiteral(681) - aux1593 + SATLiteral(576))<=0)
-576 -6399 0
-681 -6399 0
-681 -576 -6400 0
c (0<=(SATLiteral(681) - aux1593 + SATLiteral(576)))
576 6400 0
681 6400 0
681 576 6399 0
c ((SATLiteral(696) - aux1594 + SATLiteral(561))<=0)
-561 -6402 0
-696 -6402 0
-696 -561 -6403 0
c (0<=(SATLiteral(696) - aux1594 + SATLiteral(561)))
561 6403 0
696 6403 0
696 561 6402 0
c (( - aux1595 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6405 0
-411 -6405 0
-411 -546 -6406 0
c (0<=( - aux1595 + SATLiteral(411) + SATLiteral(546)))
546 6406 0
411 6406 0
411 546 6405 0
c (( - aux1596 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6408 0
-426 -6408 0
-426 -441 -6409 0
c (0<=( - aux1596 + SATLiteral(426) + SATLiteral(441)))
441 6409 0
426 6409 0
426 441 6408 0
c ((SATLiteral(711) + aux1596 - aux1597)<=0)
6408 -6411 0
6409 -6412 0
-711 -6411 0
-711 6408 -6412 0
-711 6409 -6414 0
c (0<=(SATLiteral(711) + aux1596 - aux1597))
-6409 6414 0
-6408 6412 0
711 6414 0
711 -6409 6412 0
711 -6408 6411 0
c ((aux1593 + aux1595 - aux1598)<=0)
6405 -6416 0
6406 -6417 0
6399 -6416 0
6399 6405 -6417 0
6399 6406 -6419 0
6400 -6417 0
6400 6405 -6419 0
6400 6406 -6421 0
c (0<=(aux1593 + aux1595 - aux1598))
-6406 6421 0
-6405 6419 0
-6400 6421 0
-6400 -6406 6419 0
-6400 -6405 6417 0
-6399 6419 0
-6399 -6406 6417 0
-6399 -6405 6416 0
c ((SATLiteral(683) - aux1599 + SATLiteral(578))<=0)
-578 -6423 0
-683 -6423 0
-683 -578 -6424 0
c (0<=(SATLiteral(683) - aux1599 + SATLiteral(578)))
578 6424 0
683 6424 0
683 578 6423 0
c ((SATLiteral(698) - aux1600 + SATLiteral(563))<=0)
-563 -6426 0
-698 -6426 0
-698 -563 -6427 0
c (0<=(SATLiteral(698) - aux1600 + SATLiteral(563)))
563 6427 0
698 6427 0
698 563 6426 0
c (( - aux1601 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6429 0
-413 -6429 0
-413 -548 -6430 0
c (0<=( - aux1601 + SATLiteral(413) + SATLiteral(548)))
548 6430 0
413 6430 0
413 548 6429 0
c (( - aux1602 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6432 0
-428 -6432 0
-428 -443 -6433 0
c (0<=( - aux1602 + SATLiteral(428) + SATLiteral(443)))
443 6433 0
428 6433 0
428 443 6432 0
c ((SATLiteral(713) + aux1602 - aux1603)<=0)
6432 -6435 0
6433 -6436 0
-713 -6435 0
-713 6432 -6436 0
-713 6433 -6438 0
c (0<=(SATLiteral(713) + aux1602 - aux1603))
-6433 6438 0
-6432 6436 0
713 6438 0
713 -6433 6436 0
713 -6432 6435 0
c ((aux1599 + aux1601 - aux1604)<=0)
6429 -6440 0
6430 -6441 0
6423 -6440 0
6423 6429 -6441 0
6423 6430 -6443 0
6424 -6441 0
6424 6429 -6443 0
6424 6430 -6445 0
c (0<=(aux1599 + aux1601 - aux1604))
-6430 6445 0
-6429 6443 0
-6424 6445 0
-6424 -6430 6443 0
-6424 -6429 6441 0
-6423 6443 0
-6423 -6430 6441 0
-6423 -6429 6440 0
c ((SATLiteral(685) - aux1605 + SATLiteral(580))<=0)
-580 -6447 0
-685 -6447 0
-685 -580 -6448 0
c (0<=(SATLiteral(685) - aux1605 + SATLiteral(580)))
580 6448 0
685 6448 0
685 580 6447 0
c ((SATLiteral(700) - aux1606 + SATLiteral(565))<=0)
-565 -6450 0
-700 -6450 0
-700 -565 -6451 0
c (0<=(SATLiteral(700) - aux1606 + SATLiteral(565)))
565 6451 0
700 6451 0
700 565 6450 0
c (( - aux1607 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6453 0
-415 -6453 0
-415 -550 -6454 0
c (0<=( - aux1607 + SATLiteral(415) + SATLiteral(550)))
550 6454 0
415 6454 0
415 550 6453 0
c (( - aux1608 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6456 0
-430 -6456 0
-430 -445 -6457 0
c (0<=( - aux1608 + SATLiteral(430) + SATLiteral(445)))
445 6457 0
430 6457 0
430 445 6456 0
c ((SATLiteral(715) + aux1608 - aux1609)<=0)
6456 -6459 0
6457 -6460 0
-715 -6459 0
-715 6456 -6460 0
-715 6457 -6462 0
c (0<=(SATLiteral(715) + aux1608 - aux1609))
-6457 6462 0
-6456 6460 0
715 6462 0
715 -6457 6460 0
715 -6456 6459 0
c ((aux1605 + aux1607 - aux1610)<=0)
6453 -6464 0
6454 -6465 0
6447 -6464 0
6447 6453 -6465 0
6447 6454 -6467 0
6448 -6465 0
6448 6453 -6467 0
6448 6454 -6469 0
c (0<=(aux1605 + aux1607 - aux1610))
-6454 6469 0
-6453 6467 0
-6448 6469 0
-6448 -6454 6467 0
-6448 -6453 6465 0
-6447 6467 0
-6447 -6454 6465 0
-6447 -6453 6464 0
c ((SATLiteral(687) - aux1611 + SATLiteral(582))<=0)
-582 -6471 0
-687 -6471 0
-687 -582 -6472 0
c (0<=(SATLiteral(687) - aux1611 + SATLiteral(582)))
582 6472 0
687 6472 0
687 582 6471 0
c ((SATLiteral(702) - aux1612 + SATLiteral(567))<=0)
-567 -6474 0
-702 -6474 0
-702 -567 -6475 0
c (0<=(SATLiteral(702) - aux1612 + SATLiteral(567)))
567 6475 0
702 6475 0
702 567 6474 0
c (( - aux1613 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6477 0
-417 -6477 0
-417 -552 -6478 0
c (0<=( - aux1613 + SATLiteral(417) + SATLiteral(552)))
552 6478 0
417 6478 0
417 552 6477 0
c (( - aux1614 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6480 0
-432 -6480 0
-432 -447 -6481 0
c (0<=( - aux1614 + SATLiteral(432) + SATLiteral(447)))
447 6481 0
432 6481 0
432 447 6480 0
c ((SATLiteral(717) + aux1614 - aux1615)<=0)
6480 -6483 0
6481 -6484 0
-717 -6483 0
-717 6480 -6484 0
-717 6481 -6486 0
c (0<=(SATLiteral(717) + aux1614 - aux1615))
-6481 6486 0
-6480 6484 0
717 6486 0
717 -6481 6484 0
717 -6480 6483 0
c ((aux1611 + aux1613 - aux1616)<=0)
6477 -6488 0
6478 -6489 0
6471 -6488 0
6471 6477 -6489 0
6471 6478 -6491 0
6472 -6489 0
6472 6477 -6491 0
6472 6478 -6493 0
c (0<=(aux1611 + aux1613 - aux1616))
-6478 6493 0
-6477 6491 0
-6472 6493 0
-6472 -6478 6491 0
-6472 -6477 6489 0
-6471 6491 0
-6471 -6478 6489 0
-6471 -6477 6488 0
c ((SATLiteral(689) - aux1617 + SATLiteral(584))<=0)
-584 -6495 0
-689 -6495 0
-689 -584 -6496 0
c (0<=(SATLiteral(689) - aux1617 + SATLiteral(584)))
584 6496 0
689 6496 0
689 584 6495 0
c ((SATLiteral(704) - aux1618 + SATLiteral(569))<=0)
-569 -6498 0
-704 -6498 0
-704 -569 -6499 0
c (0<=(SATLiteral(704) - aux1618 + SATLiteral(569)))
569 6499 0
704 6499 0
704 569 6498 0
c (( - aux1619 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6501 0
-419 -6501 0
-419 -554 -6502 0
c (0<=( - aux1619 + SATLiteral(419) + SATLiteral(554)))
554 6502 0
419 6502 0
419 554 6501 0
c (( - aux1620 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6504 0
-434 -6504 0
-434 -449 -6505 0
c (0<=( - aux1620 + SATLiteral(434) + SATLiteral(449)))
449 6505 0
434 6505 0
434 449 6504 0
c ((SATLiteral(719) + aux1620 - aux1621)<=0)
6504 -6507 0
6505 -6508 0
-719 -6507 0
-719 6504 -6508 0
-719 6505 -6510 0
c (0<=(SATLiteral(719) + aux1620 - aux1621))
-6505 6510 0
-6504 6508 0
719 6510 0
719 -6505 6508 0
719 -6504 6507 0
c ((aux1617 + aux1619 - aux1622)<=0)
6501 -6512 0
6502 -6513 0
6495 -6512 0
6495 6501 -6513 0
6495 6502 -6515 0
6496 -6513 0
6496 6501 -6515 0
6496 6502 -6517 0
c (0<=(aux1617 + aux1619 - aux1622))
-6502 6517 0
-6501 6515 0
-6496 6517 0
-6496 -6502 6515 0
-6496 -6501 6513 0
-6495 6515 0
-6495 -6502 6513 0
-6495 -6501 6512 0
c ((SATLiteral(691) - aux1623 + SATLiteral(586))<=0)
-586 -6519 0
-691 -6519 0
-691 -586 -6520 0
c (0<=(SATLiteral(691) - aux1623 + SATLiteral(586)))
586 6520 0
691 6520 0
691 586 6519 0
c ((SATLiteral(706) - aux1624 + SATLiteral(571))<=0)
-571 -6522 0
-706 -6522 0
-706 -571 -6523 0
c (0<=(SATLiteral(706) - aux1624 + SATLiteral(571)))
571 6523 0
706 6523 0
706 571 6522 0
c (( - aux1625 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6525 0
-421 -6525 0
-421 -556 -6526 0
c (0<=( - aux1625 + SATLiteral(421) + SATLiteral(556)))
556 6526 0
421 6526 0
421 556 6525 0
c (( - aux1626 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6528 0
-436 -6528 0
-436 -451 -6529 0
c (0<=( - aux1626 + SATLiteral(436) + SATLiteral(451)))
451 6529 0
436 6529 0
436 451 6528 0
c ((SATLiteral(721) + aux1626 - aux1627)<=0)
6528 -6531 0
6529 -6532 0
-721 -6531 0
-721 6528 -6532 0
-721 6529 -6534 0
c (0<=(SATLiteral(721) + aux1626 - aux1627))
-6529 6534 0
-6528 6532 0
721 6534 0
721 -6529 6532 0
721 -6528 6531 0
c ((aux1623 + aux1625 - aux1628)<=0)
6525 -6536 0
6526 -6537 0
6519 -6536 0
6519 6525 -6537 0
6519 6526 -6539 0
6520 -6537 0
6520 6525 -6539 0
6520 6526 -6541 0
c (0<=(aux1623 + aux1625 - aux1628))
-6526 6541 0
-6525 6539 0
-6520 6541 0
-6520 -6526 6539 0
-6520 -6525 6537 0
-6519 6539 0
-6519 -6526 6537 0
-6519 -6525 6536 0
c ((SATLiteral(-690) - aux1629 + SATLiteral(-585))<=0)
585 -6543 0
690 -6543 0
690 585 -6544 0
c (0<=(SATLiteral(-690) - aux1629 + SATLiteral(-585)))
-585 6544 0
-690 6544 0
-690 -585 6543 0
c ((SATLiteral(-705) - aux1630 + SATLiteral(-570))<=0)
570 -6546 0
705 -6546 0
705 570 -6547 0
c (0<=(SATLiteral(-705) - aux1630 + SATLiteral(-570)))
-570 6547 0
-705 6547 0
-705 -570 6546 0
c (( - aux1631 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6549 0
420 -6549 0
420 555 -6550 0
c (0<=( - aux1631 + SATLiteral(-420) + SATLiteral(-555)))
-555 6550 0
-420 6550 0
-420 -555 6549 0
c (( - aux1632 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6552 0
435 -6552 0
435 450 -6553 0
c (0<=( - aux1632 + SATLiteral(-435) + SATLiteral(-450)))
-450 6553 0
-435 6553 0
-435 -450 6552 0
c ((SATLiteral(-720) + aux1632 - aux1633)<=0)
6552 -6555 0
6553 -6556 0
720 -6555 0
720 6552 -6556 0
720 6553 -6558 0
c (0<=(SATLiteral(-720) + aux1632 - aux1633))
-6553 6558 0
-6552 6556 0
-720 6558 0
-720 -6553 6556 0
-720 -6552 6555 0
c ((aux1629 + aux1631 - aux1634)<=0)
6549 -6560 0
6550 -6561 0
6543 -6560 0
6543 6549 -6561 0
6543 6550 -6563 0
6544 -6561 0
6544 6549 -6563 0
6544 6550 -6565 0
c (0<=(aux1629 + aux1631 - aux1634))
-6550 6565 0
-6549 6563 0
-6544 6565 0
-6544 -6550 6563 0
-6544 -6549 6561 0
-6543 6563 0
-6543 -6550 6561 0
-6543 -6549 6560 0
c ((SATLiteral(722) - aux1635 + SATLiteral(617))<=0)
-617 -6567 0
-722 -6567 0
-722 -617 -6568 0
c (0<=(SATLiteral(722) - aux1635 + SATLiteral(617)))
617 6568 0
722 6568 0
722 617 6567 0
c ((SATLiteral(737) - aux1636 + SATLiteral(602))<=0)
-602 -6570 0
-737 -6570 0
-737 -602 -6571 0
c (0<=(SATLiteral(737) - aux1636 + SATLiteral(602)))
602 6571 0
737 6571 0
737 602 6570 0
c (( - aux1637 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6573 0
-452 -6573 0
-452 -587 -6574 0
c (0<=( - aux1637 + SATLiteral(452) + SATLiteral(587)))
587 6574 0
452 6574 0
452 587 6573 0
c (( - aux1638 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6576 0
-467 -6576 0
-467 -482 -6577 0
c (0<=( - aux1638 + SATLiteral(467) + SATLiteral(482)))
482 6577 0
467 6577 0
467 482 6576 0
c ((SATLiteral(752) + aux1638 - aux1639)<=0)
6576 -6579 0
6577 -6580 0
-752 -6579 0
-752 6576 -6580 0
-752 6577 -6582 0
c (0<=(SATLiteral(752) + aux1638 - aux1639))
-6577 6582 0
-6576 6580 0
752 6582 0
752 -6577 6580 0
752 -6576 6579 0
c ((aux1635 + aux1637 - aux1640)<=0)
6573 -6584 0
6574 -6585 0
6567 -6584 0
6567 6573 -6585 0
6567 6574 -6587 0
6568 -6585 0
6568 6573 -6587 0
6568 6574 -6589 0
c (0<=(aux1635 + aux1637 - aux1640))
-6574 6589 0
-6573 6587 0
-6568 6589 0
-6568 -6574 6587 0
-6568 -6573 6585 0
-6567 6587 0
-6567 -6574 6585 0
-6567 -6573 6584 0
c ((SATLiteral(724) - aux1641 + SATLiteral(619))<=0)
-619 -6591 0
-724 -6591 0
-724 -619 -6592 0
c (0<=(SATLiteral(724) - aux1641 + SATLiteral(619)))
619 6592 0
724 6592 0
724 619 6591 0
c ((SATLiteral(739) - aux1642 + SATLiteral(604))<=0)
-604 -6594 0
-739 -6594 0
-739 -604 -6595 0
c (0<=(SATLiteral(739) - aux1642 + SATLiteral(604)))
604 6595 0
739 6595 0
739 604 6594 0
c (( - aux1643 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6597 0
-454 -6597 0
-454 -589 -6598 0
c (0<=( - aux1643 + SATLiteral(454) + SATLiteral(589)))
589 6598 0
454 6598 0
454 589 6597 0
c (( - aux1644 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6600 0
-469 -6600 0
-469 -484 -6601 0
c (0<=( - aux1644 + SATLiteral(469) + SATLiteral(484)))
484 6601 0
469 6601 0
469 484 6600 0
c ((SATLiteral(754) + aux1644 - aux1645)<=0)
6600 -6603 0
6601 -6604 0
-754 -6603 0
-754 6600 -6604 0
-754 6601 -6606 0
c (0<=(SATLiteral(754) + aux1644 - aux1645))
-6601 6606 0
-6600 6604 0
754 6606 0
754 -6601 6604 0
754 -6600 6603 0
c ((aux1641 + aux1643 - aux1646)<=0)
6597 -6608 0
6598 -6609 0
6591 -6608 0
6591 6597 -6609 0
6591 6598 -6611 0
6592 -6609 0
6592 6597 -6611 0
6592 6598 -6613 0
c (0<=(aux1641 + aux1643 - aux1646))
-6598 6613 0
-6597 6611 0
-6592 6613 0
-6592 -6598 6611 0
-6592 -6597 6609 0
-6591 6611 0
-6591 -6598 6609 0
-6591 -6597 6608 0
c ((SATLiteral(726) - aux1647 + SATLiteral(621))<=0)
-621 -6615 0
-726 -6615 0
-726 -621 -6616 0
c (0<=(SATLiteral(726) - aux1647 + SATLiteral(621)))
621 6616 0
726 6616 0
726 621 6615 0
c ((SATLiteral(741) - aux1648 + SATLiteral(606))<=0)
-606 -6618 0
-741 -6618 0
-741 -606 -6619 0
c (0<=(SATLiteral(741) - aux1648 + SATLiteral(606)))
606 6619 0
741 6619 0
741 606 6618 0
c (( - aux1649 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6621 0
-456 -6621 0
-456 -591 -6622 0
c (0<=( - aux1649 + SATLiteral(456) + SATLiteral(591)))
591 6622 0
456 6622 0
456 591 6621 0
c (( - aux1650 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6624 0
-471 -6624 0
-471 -486 -6625 0
c (0<=( - aux1650 + SATLiteral(471) + SATLiteral(486)))
486 6625 0
471 6625 0
471 486 6624 0
c ((SATLiteral(756) + aux1650 - aux1651)<=0)
6624 -6627 0
6625 -6628 0
-756 -6627 0
-756 6624 -6628 0
-756 6625 -6630 0
c (0<=(SATLiteral(756) + aux1650 - aux1651))
-6625 6630 0
-6624 6628 0
756 6630 0
756 -6625 6628 0
756 -6624 6627 0
c ((aux1647 + aux1649 - aux1652)<=0)
6621 -6632 0
6622 -6633 0
6615 -6632 0
6615 6621 -6633 0
6615 6622 -6635 0
6616 -6633 0
6616 6621 -6635 0
6616 6622 -6637 0
c (0<=(aux1647 + aux1649 - aux1652))
-6622 6637 0
-6621 6635 0
-6616 6637 0
-6616 -6622 6635 0
-6616 -6621 6633 0
-6615 6635 0
-6615 -6622 6633 0
-6615 -6621 6632 0
c ((SATLiteral(728) - aux1653 + SATLiteral(623))<=0)
-623 -6639 0
-728 -6639 0
-728 -623 -6640 0
c (0<=(SATLiteral(728) - aux1653 + SATLiteral(623)))
623 6640 0
728 6640 0
728 623 6639 0
c ((SATLiteral(743) - aux1654 + SATLiteral(608))<=0)
-608 -6642 0
-743 -6642 0
-743 -608 -6643 0
c (0<=(SATLiteral(743) - aux1654 + SATLiteral(608)))
608 6643 0
743 6643 0
743 608 6642 0
c (( - aux1655 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6645 0
-458 -6645 0
-458 -593 -6646 0
c (0<=( - aux1655 + SATLiteral(458) + SATLiteral(593)))
593 6646 0
458 6646 0
458 593 6645 0
c (( - aux1656 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6648 0
-473 -6648 0
-473 -488 -6649 0
c (0<=( - aux1656 + SATLiteral(473) + SATLiteral(488)))
488 6649 0
473 6649 0
473 488 6648 0
c ((SATLiteral(758) + aux1656 - aux1657)<=0)
6648 -6651 0
6649 -6652 0
-758 -6651 0
-758 6648 -6652 0
-758 6649 -6654 0
c (0<=(SATLiteral(758) + aux1656 - aux1657))
-6649 6654 0
-6648 6652 0
758 6654 0
758 -6649 6652 0
758 -6648 6651 0
c ((aux1653 + aux1655 - aux1658)<=0)
6645 -6656 0
6646 -6657 0
6639 -6656 0
6639 6645 -6657 0
6639 6646 -6659 0
6640 -6657 0
6640 6645 -6659 0
6640 6646 -6661 0
c (0<=(aux1653 + aux1655 - aux1658))
-6646 6661 0
-6645 6659 0
-6640 6661 0
-6640 -6646 6659 0
-6640 -6645 6657 0
-6639 6659 0
-6639 -6646 6657 0
-6639 -6645 6656 0
c ((SATLiteral(730) - aux1659 + SATLiteral(625))<=0)
-625 -6663 0
-730 -6663 0
-730 -625 -6664 0
c (0<=(SATLiteral(730) - aux1659 + SATLiteral(625)))
625 6664 0
730 6664 0
730 625 6663 0
c ((SATLiteral(745) - aux1660 + SATLiteral(610))<=0)
-610 -6666 0
-745 -6666 0
-745 -610 -6667 0
c (0<=(SATLiteral(745) - aux1660 + SATLiteral(610)))
610 6667 0
745 6667 0
745 610 6666 0
c (( - aux1661 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6669 0
-460 -6669 0
-460 -595 -6670 0
c (0<=( - aux1661 + SATLiteral(460) + SATLiteral(595)))
595 6670 0
460 6670 0
460 595 6669 0
c (( - aux1662 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6672 0
-475 -6672 0
-475 -490 -6673 0
c (0<=( - aux1662 + SATLiteral(475) + SATLiteral(490)))
490 6673 0
475 6673 0
475 490 6672 0
c ((SATLiteral(760) + aux1662 - aux1663)<=0)
6672 -6675 0
6673 -6676 0
-760 -6675 0
-760 6672 -6676 0
-760 6673 -6678 0
c (0<=(SATLiteral(760) + aux1662 - aux1663))
-6673 6678 0
-6672 6676 0
760 6678 0
760 -6673 6676 0
760 -6672 6675 0
c ((aux1659 + aux1661 - aux1664)<=0)
6669 -6680 0
6670 -6681 0
6663 -6680 0
6663 6669 -6681 0
6663 6670 -6683 0
6664 -6681 0
6664 6669 -6683 0
6664 6670 -6685 0
c (0<=(aux1659 + aux1661 - aux1664))
-6670 6685 0
-6669 6683 0
-6664 6685 0
-6664 -6670 6683 0
-6664 -6669 6681 0
-6663 6683 0
-6663 -6670 6681 0
-6663 -6669 6680 0
c ((SATLiteral(732) - aux1665 + SATLiteral(627))<=0)
-627 -6687 0
-732 -6687 0
-732 -627 -6688 0
c (0<=(SATLiteral(732) - aux1665 + SATLiteral(627)))
627 6688 0
732 6688 0
732 627 6687 0
c ((SATLiteral(747) - aux1666 + SATLiteral(612))<=0)
-612 -6690 0
-747 -6690 0
-747 -612 -6691 0
c (0<=(SATLiteral(747) - aux1666 + SATLiteral(612)))
612 6691 0
747 6691 0
747 612 6690 0
c (( - aux1667 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6693 0
-462 -6693 0
-462 -597 -6694 0
c (0<=( - aux1667 + SATLiteral(462) + SATLiteral(597)))
597 6694 0
462 6694 0
462 597 6693 0
c (( - aux1668 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6696 0
-477 -6696 0
-477 -492 -6697 0
c (0<=( - aux1668 + SATLiteral(477) + SATLiteral(492)))
492 6697 0
477 6697 0
477 492 6696 0
c ((SATLiteral(762) + aux1668 - aux1669)<=0)
6696 -6699 0
6697 -6700 0
-762 -6699 0
-762 6696 -6700 0
-762 6697 -6702 0
c (0<=(SATLiteral(762) + aux1668 - aux1669))
-6697 6702 0
-6696 6700 0
762 6702 0
762 -6697 6700 0
762 -6696 6699 0
c ((aux1665 + aux1667 - aux1670)<=0)
6693 -6704 0
6694 -6705 0
6687 -6704 0
6687 6693 -6705 0
6687 6694 -6707 0
6688 -6705 0
6688 6693 -6707 0
6688 6694 -6709 0
c (0<=(aux1665 + aux1667 - aux1670))
-6694 6709 0
-6693 6707 0
-6688 6709 0
-6688 -6694 6707 0
-6688 -6693 6705 0
-6687 6707 0
-6687 -6694 6705 0
-6687 -6693 6704 0
c ((SATLiteral(734) - aux1671 + SATLiteral(629))<=0)
-629 -6711 0
-734 -6711 0
-734 -629 -6712 0
c (0<=(SATLiteral(734) - aux1671 + SATLiteral(629)))
629 6712 0
734 6712 0
734 629 6711 0
c ((SATLiteral(749) - aux1672 + SATLiteral(614))<=0)
-614 -6714 0
-749 -6714 0
-749 -614 -6715 0
c (0<=(SATLiteral(749) - aux1672 + SATLiteral(614)))
614 6715 0
749 6715 0
749 614 6714 0
c (( - aux1673 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6717 0
-464 -6717 0
-464 -599 -6718 0
c (0<=( - aux1673 + SATLiteral(464) + SATLiteral(599)))
599 6718 0
464 6718 0
464 599 6717 0
c (( - aux1674 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6720 0
-479 -6720 0
-479 -494 -6721 0
c (0<=( - aux1674 + SATLiteral(479) + SATLiteral(494)))
494 6721 0
479 6721 0
479 494 6720 0
c ((SATLiteral(764) + aux1674 - aux1675)<=0)
6720 -6723 0
6721 -6724 0
-764 -6723 0
-764 6720 -6724 0
-764 6721 -6726 0
c (0<=(SATLiteral(764) + aux1674 - aux1675))
-6721 6726 0
-6720 6724 0
764 6726 0
764 -6721 6724 0
764 -6720 6723 0
c ((aux1671 + aux1673 - aux1676)<=0)
6717 -6728 0
6718 -6729 0
6711 -6728 0
6711 6717 -6729 0
6711 6718 -6731 0
6712 -6729 0
6712 6717 -6731 0
6712 6718 -6733 0
c (0<=(aux1671 + aux1673 - aux1676))
-6718 6733 0
-6717 6731 0
-6712 6733 0
-6712 -6718 6731 0
-6712 -6717 6729 0
-6711 6731 0
-6711 -6718 6729 0
-6711 -6717 6728 0
c ((SATLiteral(736) - aux1677 + SATLiteral(631))<=0)
-631 -6735 0
-736 -6735 0
-736 -631 -6736 0
c (0<=(SATLiteral(736) - aux1677 + SATLiteral(631)))
631 6736 0
736 6736 0
736 631 6735 0
c ((SATLiteral(751) - aux1678 + SATLiteral(616))<=0)
-616 -6738 0
-751 -6738 0
-751 -616 -6739 0
c (0<=(SATLiteral(751) - aux1678 + SATLiteral(616)))
616 6739 0
751 6739 0
751 616 6738 0
c (( - aux1679 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6741 0
-466 -6741 0
-466 -601 -6742 0
c (0<=( - aux1679 + SATLiteral(466) + SATLiteral(601)))
601 6742 0
466 6742 0
466 601 6741 0
c (( - aux1680 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6744 0
-481 -6744 0
-481 -496 -6745 0
c (0<=( - aux1680 + SATLiteral(481) + SATLiteral(496)))
496 6745 0
481 6745 0
481 496 6744 0
c ((SATLiteral(766) + aux1680 - aux1681)<=0)
6744 -6747 0
6745 -6748 0
-766 -6747 0
-766 6744 -6748 0
-766 6745 -6750 0
c (0<=(SATLiteral(766) + aux1680 - aux1681))
-6745 6750 0
-6744 6748 0
766 6750 0
766 -6745 6748 0
766 -6744 6747 0
c ((aux1677 + aux1679 - aux1682)<=0)
6741 -6752 0
6742 -6753 0
6735 -6752 0
6735 6741 -6753 0
6735 6742 -6755 0
6736 -6753 0
6736 6741 -6755 0
6736 6742 -6757 0
c (0<=(aux1677 + aux1679 - aux1682))
-6742 6757 0
-6741 6755 0
-6736 6757 0
-6736 -6742 6755 0
-6736 -6741 6753 0
-6735 6755 0
-6735 -6742 6753 0
-6735 -6741 6752 0
c ((SATLiteral(-735) - aux1683 + SATLiteral(-630))<=0)
630 -6759 0
735 -6759 0
735 630 -6760 0
c (0<=(SATLiteral(-735) - aux1683 + SATLiteral(-630)))
-630 6760 0
-735 6760 0
-735 -630 6759 0
c ((SATLiteral(-750) - aux1684 + SATLiteral(-615))<=0)
615 -6762 0
750 -6762 0
750 615 -6763 0
c (0<=(SATLiteral(-750) - aux1684 + SATLiteral(-615)))
-615 6763 0
-750 6763 0
-750 -615 6762 0
c (( - aux1685 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6765 0
465 -6765 0
465 600 -6766 0
c (0<=( - aux1685 + SATLiteral(-465) + SATLiteral(-600)))
-600 6766 0
-465 6766 0
-465 -600 6765 0
c (( - aux1686 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6768 0
480 -6768 0
480 495 -6769 0
c (0<=( - aux1686 + SATLiteral(-480) + SATLiteral(-495)))
-495 6769 0
-480 6769 0
-480 -495 6768 0
c ((SATLiteral(-765) + aux1686 - aux1687)<=0)
6768 -6771 0
6769 -6772 0
765 -6771 0
765 6768 -6772 0
765 6769 -6774 0
c (0<=(SATLiteral(-765) + aux1686 - aux1687))
-6769 6774 0
-6768 6772 0
-765 6774 0
-765 -6769 6772 0
-765 -6768 6771 0
c ((aux1683 + aux1685 - aux1688)<=0)
6765 -6776 0
6766 -6777 0
6759 -6776 0
6759 6765 -6777 0
6759 6766 -6779 0
6760 -6777 0
6760 6765 -6779 0
6760 6766 -6781 0
c (0<=(aux1683 + aux1685 - aux1688))
-6766 6781 0
-6765 6779 0
-6760 6781 0
-6760 -6766 6779 0
-6760 -6765 6777 0
-6759 6779 0
-6759 -6766 6777 0
-6759 -6765 6776 0
c ((SATLiteral(767) - aux1689 + SATLiteral(662))<=0)
-662 -6783 0
-767 -6783 0
-767 -662 -6784 0
c (0<=(SATLiteral(767) - aux1689 + SATLiteral(662)))
662 6784 0
767 6784 0
767 662 6783 0
c ((SATLiteral(782) - aux1690 + SATLiteral(647))<=0)
-647 -6786 0
-782 -6786 0
-782 -647 -6787 0
c (0<=(SATLiteral(782) - aux1690 + SATLiteral(647)))
647 6787 0
782 6787 0
782 647 6786 0
c (( - aux1691 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6789 0
-497 -6789 0
-497 -632 -6790 0
c (0<=( - aux1691 + SATLiteral(497) + SATLiteral(632)))
632 6790 0
497 6790 0
497 632 6789 0
c (( - aux1692 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6792 0
-512 -6792 0
-512 -527 -6793 0
c (0<=( - aux1692 + SATLiteral(512) + SATLiteral(527)))
527 6793 0
512 6793 0
512 527 6792 0
c ((SATLiteral(797) + aux1692 - aux1693)<=0)
6792 -6795 0
6793 -6796 0
-797 -6795 0
-797 6792 -6796 0
-797 6793 -6798 0
c (0<=(SATLiteral(797) + aux1692 - aux1693))
-6793 6798 0
-6792 6796 0
797 6798 0
797 -6793 6796 0
797 -6792 6795 0
c ((aux1689 + aux1691 - aux1694)<=0)
6789 -6800 0
6790 -6801 0
6783 -6800 0
6783 6789 -6801 0
6783 6790 -6803 0
6784 -6801 0
6784 6789 -6803 0
6784 6790 -6805 0
c (0<=(aux1689 + aux1691 - aux1694))
-6790 6805 0
-6789 6803 0
-6784 6805 0
-6784 -6790 6803 0
-6784 -6789 6801 0
-6783 6803 0
-6783 -6790 6801 0
-6783 -6789 6800 0
c ((SATLiteral(769) - aux1695 + SATLiteral(664))<=0)
-664 -6807 0
-769 -6807 0
-769 -664 -6808 0
c (0<=(SATLiteral(769) - aux1695 + SATLiteral(664)))
664 6808 0
769 6808 0
769 664 6807 0
c ((SATLiteral(784) - aux1696 + SATLiteral(649))<=0)
-649 -6810 0
-784 -6810 0
-784 -649 -6811 0
c (0<=(SATLiteral(784) - aux1696 + SATLiteral(649)))
649 6811 0
784 6811 0
784 649 6810 0
c (( - aux1697 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -6813 0
-499 -6813 0
-499 -634 -6814 0
c (0<=( - aux1697 + SATLiteral(499) + SATLiteral(634)))
634 6814 0
499 6814 0
499 634 6813 0
c (( - aux1698 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -6816 0
-514 -6816 0
-514 -529 -6817 0
c (0<=( - aux1698 + SATLiteral(514) + SATLiteral(529)))
529 6817 0
514 6817 0
514 529 6816 0
c ((SATLiteral(798) + aux1698 - aux1699)<=0)
6816 -6819 0
6817 -6820 0
-798 -6819 0
-798 6816 -6820 0
-798 6817 -6822 0
c (0<=(SATLiteral(798) + aux1698 - aux1699))
-6817 6822 0
-6816 6820 0
798 6822 0
798 -6817 6820 0
798 -6816 6819 0
c ((aux1695 + aux1697 - aux1700)<=0)
6813 -6824 0
6814 -6825 0
6807 -6824 0
6807 6813 -6825 0
6807 6814 -6827 0
6808 -6825 0
6808 6813 -6827 0
6808 6814 -6829 0
c (0<=(aux1695 + aux1697 - aux1700))
-6814 6829 0
-6813 6827 0
-6808 6829 0
-6808 -6814 6827 0
-6808 -6813 6825 0
-6807 6827 0
-6807 -6814 6825 0
-6807 -6813 6824 0
c ((SATLiteral(771) - aux1701 + SATLiteral(666))<=0)
-666 -6831 0
-771 -6831 0
-771 -666 -6832 0
c (0<=(SATLiteral(771) - aux1701 + SATLiteral(666)))
666 6832 0
771 6832 0
771 666 6831 0
c ((SATLiteral(786) - aux1702 + SATLiteral(651))<=0)
-651 -6834 0
-786 -6834 0
-786 -651 -6835 0
c (0<=(SATLiteral(786) - aux1702 + SATLiteral(651)))
651 6835 0
786 6835 0
786 651 6834 0
c (( - aux1703 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -6837 0
-501 -6837 0
-501 -636 -6838 0
c (0<=( - aux1703 + SATLiteral(501) + SATLiteral(636)))
636 6838 0
501 6838 0
501 636 6837 0
c (( - aux1704 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -6840 0
-516 -6840 0
-516 -531 -6841 0
c (0<=( - aux1704 + SATLiteral(516) + SATLiteral(531)))
531 6841 0
516 6841 0
516 531 6840 0
c ((SATLiteral(799) + aux1704 - aux1705)<=0)
6840 -6843 0
6841 -6844 0
-799 -6843 0
-799 6840 -6844 0
-799 6841 -6846 0
c (0<=(SATLiteral(799) + aux1704 - aux1705))
-6841 6846 0
-6840 6844 0
799 6846 0
799 -6841 6844 0
799 -6840 6843 0
c ((aux1701 + aux1703 - aux1706)<=0)
6837 -6848 0
6838 -6849 0
6831 -6848 0
6831 6837 -6849 0
6831 6838 -6851 0
6832 -6849 0
6832 6837 -6851 0
6832 6838 -6853 0
c (0<=(aux1701 + aux1703 - aux1706))
-6838 6853 0
-6837 6851 0
-6832 6853 0
-6832 -6838 6851 0
-6832 -6837 6849 0
-6831 6851 0
-6831 -6838 6849 0
-6831 -6837 6848 0
c ((SATLiteral(773) - aux1707 + SATLiteral(668))<=0)
-668 -6855 0
-773 -6855 0
-773 -668 -6856 0
c (0<=(SATLiteral(773) - aux1707 + SATLiteral(668)))
668 6856 0
773 6856 0
773 668 6855 0
c ((SATLiteral(788) - aux1708 + SATLiteral(653))<=0)
-653 -6858 0
-788 -6858 0
-788 -653 -6859 0
c (0<=(SATLiteral(788) - aux1708 + SATLiteral(653)))
653 6859 0
788 6859 0
788 653 6858 0
c (( - aux1709 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -6861 0
-503 -6861 0
-503 -638 -6862 0
c (0<=( - aux1709 + SATLiteral(503) + SATLiteral(638)))
638 6862 0
503 6862 0
503 638 6861 0
c (( - aux1710 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -6864 0
-518 -6864 0
-518 -533 -6865 0
c (0<=( - aux1710 + SATLiteral(518) + SATLiteral(533)))
533 6865 0
518 6865 0
518 533 6864 0
c ((SATLiteral(800) + aux1710 - aux1711)<=0)
6864 -6867 0
6865 -6868 0
-800 -6867 0
-800 6864 -6868 0
-800 6865 -6870 0
c (0<=(SATLiteral(800) + aux1710 - aux1711))
-6865 6870 0
-6864 6868 0
800 6870 0
800 -6865 6868 0
800 -6864 6867 0
c ((aux1707 + aux1709 - aux1712)<=0)
6861 -6872 0
6862 -6873 0
6855 -6872 0
6855 6861 -6873 0
6855 6862 -6875 0
6856 -6873 0
6856 6861 -6875 0
6856 6862 -6877 0
c (0<=(aux1707 + aux1709 - aux1712))
-6862 6877 0
-6861 6875 0
-6856 6877 0
-6856 -6862 6875 0
-6856 -6861 6873 0
-6855 6875 0
-6855 -6862 6873 0
-6855 -6861 6872 0
c ((SATLiteral(775) - aux1713 + SATLiteral(670))<=0)
-670 -6879 0
-775 -6879 0
-775 -670 -6880 0
c (0<=(SATLiteral(775) - aux1713 + SATLiteral(670)))
670 6880 0
775 6880 0
775 670 6879 0
c ((SATLiteral(790) - aux1714 + SATLiteral(655))<=0)
-655 -6882 0
-790 -6882 0
-790 -655 -6883 0
c (0<=(SATLiteral(790) - aux1714 + SATLiteral(655)))
655 6883 0
790 6883 0
790 655 6882 0
c (( - aux1715 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -6885 0
-505 -6885 0
-505 -640 -6886 0
c (0<=( - aux1715 + SATLiteral(505) + SATLiteral(640)))
640 6886 0
505 6886 0
505 640 6885 0
c (( - aux1716 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -6888 0
-520 -6888 0
-520 -535 -6889 0
c (0<=( - aux1716 + SATLiteral(520) + SATLiteral(535)))
535 6889 0
520 6889 0
520 535 6888 0
c ((SATLiteral(801) + aux1716 - aux1717)<=0)
6888 -6891 0
6889 -6892 0
-801 -6891 0
-801 6888 -6892 0
-801 6889 -6894 0
c (0<=(SATLiteral(801) + aux1716 - aux1717))
-6889 6894 0
-6888 6892 0
801 6894 0
801 -6889 6892 0
801 -6888 6891 0
c ((aux1713 + aux1715 - aux1718)<=0)
6885 -6896 0
6886 -6897 0
6879 -6896 0
6879 6885 -6897 0
6879 6886 -6899 0
6880 -6897 0
6880 6885 -6899 0
6880 6886 -6901 0
c (0<=(aux1713 + aux1715 - aux1718))
-6886 6901 0
-6885 6899 0
-6880 6901 0
-6880 -6886 6899 0
-6880 -6885 6897 0
-6879 6899 0
-6879 -6886 6897 0
-6879 -6885 6896 0
c ((SATLiteral(777) - aux1719 + SATLiteral(672))<=0)
-672 -6903 0
-777 -6903 0
-777 -672 -6904 0
c (0<=(SATLiteral(777) - aux1719 + SATLiteral(672)))
672 6904 0
777 6904 0
777 672 6903 0
c ((SATLiteral(792) - aux1720 + SATLiteral(657))<=0)
-657 -6906 0
-792 -6906 0
-792 -657 -6907 0
c (0<=(SATLiteral(792) - aux1720 + SATLiteral(657)))
657 6907 0
792 6907 0
792 657 6906 0
c (( - aux1721 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -6909 0
-507 -6909 0
-507 -642 -6910 0
c (0<=( - aux1721 + SATLiteral(507) + SATLiteral(642)))
642 6910 0
507 6910 0
507 642 6909 0
c (( - aux1722 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -6912 0
-522 -6912 0
-522 -537 -6913 0
c (0<=( - aux1722 + SATLiteral(522) + SATLiteral(537)))
537 6913 0
522 6913 0
522 537 6912 0
c ((SATLiteral(802) + aux1722 - aux1723)<=0)
6912 -6915 0
6913 -6916 0
-802 -6915 0
-802 6912 -6916 0
-802 6913 -6918 0
c (0<=(SATLiteral(802) + aux1722 - aux1723))
-6913 6918 0
-6912 6916 0
802 6918 0
802 -6913 6916 0
802 -6912 6915 0
c ((aux1719 + aux1721 - aux1724)<=0)
6909 -6920 0
6910 -6921 0
6903 -6920 0
6903 6909 -6921 0
6903 6910 -6923 0
6904 -6921 0
6904 6909 -6923 0
6904 6910 -6925 0
c (0<=(aux1719 + aux1721 - aux1724))
-6910 6925 0
-6909 6923 0
-6904 6925 0
-6904 -6910 6923 0
-6904 -6909 6921 0
-6903 6923 0
-6903 -6910 6921 0
-6903 -6909 6920 0
c ((SATLiteral(779) - aux1725 + SATLiteral(674))<=0)
-674 -6927 0
-779 -6927 0
-779 -674 -6928 0
c (0<=(SATLiteral(779) - aux1725 + SATLiteral(674)))
674 6928 0
779 6928 0
779 674 6927 0
c ((SATLiteral(794) - aux1726 + SATLiteral(659))<=0)
-659 -6930 0
-794 -6930 0
-794 -659 -6931 0
c (0<=(SATLiteral(794) - aux1726 + SATLiteral(659)))
659 6931 0
794 6931 0
794 659 6930 0
c (( - aux1727 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -6933 0
-509 -6933 0
-509 -644 -6934 0
c (0<=( - aux1727 + SATLiteral(509) + SATLiteral(644)))
644 6934 0
509 6934 0
509 644 6933 0
c (( - aux1728 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -6936 0
-524 -6936 0
-524 -539 -6937 0
c (0<=( - aux1728 + SATLiteral(524) + SATLiteral(539)))
539 6937 0
524 6937 0
524 539 6936 0
c ((SATLiteral(803) + aux1728 - aux1729)<=0)
6936 -6939 0
6937 -6940 0
-803 -6939 0
-803 6936 -6940 0
-803 6937 -6942 0
c (0<=(SATLiteral(803) + aux1728 - aux1729))
-6937 6942 0
-6936 6940 0
803 6942 0
803 -6937 6940 0
803 -6936 6939 0
c ((aux1725 + aux1727 - aux1730)<=0)
6933 -6944 0
6934 -6945 0
6927 -6944 0
6927 6933 -6945 0
6927 6934 -6947 0
6928 -6945 0
6928 6933 -6947 0
6928 6934 -6949 0
c (0<=(aux1725 + aux1727 - aux1730))
-6934 6949 0
-6933 6947 0
-6928 6949 0
-6928 -6934 6947 0
-6928 -6933 6945 0
-6927 6947 0
-6927 -6934 6945 0
-6927 -6933 6944 0
c ((SATLiteral(781) - aux1731 + SATLiteral(676))<=0)
-676 -6951 0
-781 -6951 0
-781 -676 -6952 0
c (0<=(SATLiteral(781) - aux1731 + SATLiteral(676)))
676 6952 0
781 6952 0
781 676 6951 0
c ((SATLiteral(796) - aux1732 + SATLiteral(661))<=0)
-661 -6954 0
-796 -6954 0
-796 -661 -6955 0
c (0<=(SATLiteral(796) - aux1732 + SATLiteral(661)))
661 6955 0
796 6955 0
796 661 6954 0
c (( - aux1733 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -6957 0
-511 -6957 0
-511 -646 -6958 0
c (0<=( - aux1733 + SATLiteral(511) + SATLiteral(646)))
646 6958 0
511 6958 0
511 646 6957 0
c (( - aux1734 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -6960 0
-526 -6960 0
-526 -541 -6961 0
c (0<=( - aux1734 + SATLiteral(526) + SATLiteral(541)))
541 6961 0
526 6961 0
526 541 6960 0
c ((SATLiteral(804) + aux1734 - aux1735)<=0)
6960 -6963 0
6961 -6964 0
-804 -6963 0
-804 6960 -6964 0
-804 6961 -6966 0
c (0<=(SATLiteral(804) + aux1734 - aux1735))
-6961 6966 0
-6960 6964 0
804 6966 0
804 -6961 6964 0
804 -6960 6963 0
c ((aux1731 + aux1733 - aux1736)<=0)
6957 -6968 0
6958 -6969 0
6951 -6968 0
6951 6957 -6969 0
6951 6958 -6971 0
6952 -6969 0
6952 6957 -6971 0
6952 6958 -6973 0
c (0<=(aux1731 + aux1733 - aux1736))
-6958 6973 0
-6957 6971 0
-6952 6973 0
-6952 -6958 6971 0
-6952 -6957 6969 0
-6951 6971 0
-6951 -6958 6969 0
-6951 -6957 6968 0
c ((SATLiteral(-780) - aux1737 + SATLiteral(-675))<=0)
675 -6975 0
780 -6975 0
780 675 -6976 0
c (0<=(SATLiteral(-780) - aux1737 + SATLiteral(-675)))
-675 6976 0
-780 6976 0
-780 -675 6975 0
c ((SATLiteral(-795) - aux1738 + SATLiteral(-660))<=0)
660 -6978 0
795 -6978 0
795 660 -6979 0
c (0<=(SATLiteral(-795) - aux1738 + SATLiteral(-660)))
-660 6979 0
-795 6979 0
-795 -660 6978 0
c (( - aux1739 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -6981 0
510 -6981 0
510 645 -6982 0
c (0<=( - aux1739 + SATLiteral(-510) + SATLiteral(-645)))
-645 6982 0
-510 6982 0
-510 -645 6981 0
c (( - aux1740 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -6984 0
525 -6984 0
525 540 -6985 0
c (0<=( - aux1740 + SATLiteral(-525) + SATLiteral(-540)))
-540 6985 0
-525 6985 0
-525 -540 6984 0
c ((SATLiteral(805) + aux1740 - aux1741)<=0)
6984 -6987 0
6985 -6988 0
-805 -6987 0
-805 6984 -6988 0
-805 6985 -6990 0
c (0<=(SATLiteral(805) + aux1740 - aux1741))
-6985 6990 0
-6984 6988 0
805 6990 0
805 -6985 6988 0
805 -6984 6987 0
c ((aux1737 + aux1739 - aux1742)<=0)
6981 -6992 0
6982 -6993 0
6975 -6992 0
6975 6981 -6993 0
6975 6982 -6995 0
6976 -6993 0
6976 6981 -6995 0
6976 6982 -6997 0
c (0<=(aux1737 + aux1739 - aux1742))
-6982 6997 0
-6981 6995 0
-6976 6997 0
-6976 -6982 6995 0
-6976 -6981 6993 0
-6975 6995 0
-6975 -6982 6993 0
-6975 -6981 6992 0
c ((SATLiteral(947) - aux1743 + SATLiteral(842))<=0)
-842 -6999 0
-947 -6999 0
-947 -842 -7000 0
c (0<=(SATLiteral(947) - aux1743 + SATLiteral(842)))
842 7000 0
947 7000 0
947 842 6999 0
c ((SATLiteral(962) - aux1744 + SATLiteral(827))<=0)
-827 -7002 0
-962 -7002 0
-962 -827 -7003 0
c (0<=(SATLiteral(962) - aux1744 + SATLiteral(827)))
827 7003 0
962 7003 0
962 827 7002 0
c (( - aux1745 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7005 0
-1082 -7005 0
-1082 -812 -7006 0
c (0<=( - aux1745 + SATLiteral(1082) + SATLiteral(812)))
812 7006 0
1082 7006 0
1082 812 7005 0
c (( - aux1746 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7008 0
-1097 -7008 0
-1097 -1112 -7009 0
c (0<=( - aux1746 + SATLiteral(1097) + SATLiteral(1112)))
1112 7009 0
1097 7009 0
1097 1112 7008 0
c ((SATLiteral(977) + aux1746 - aux1747)<=0)
7008 -7011 0
7009 -7012 0
-977 -7011 0
-977 7008 -7012 0
-977 7009 -7014 0
c (0<=(SATLiteral(977) + aux1746 - aux1747))
-7009 7014 0
-7008 7012 0
977 7014 0
977 -7009 7012 0
977 -7008 7011 0
c ((aux1743 + aux1745 - aux1748)<=0)
7005 -7016 0
7006 -7017 0
6999 -7016 0
6999 7005 -7017 0
6999 7006 -7019 0
7000 -7017 0
7000 7005 -7019 0
7000 7006 -7021 0
c (0<=(aux1743 + aux1745 - aux1748))
-7006 7021 0
-7005 7019 0
-7000 7021 0
-7000 -7006 7019 0
-7000 -7005 7017 0
-6999 7019 0
-6999 -7006 7017 0
-6999 -7005 7016 0
c ((SATLiteral(949) - aux1749 + SATLiteral(844))<=0)
-844 -7023 0
-949 -7023 0
-949 -844 -7024 0
c (0<=(SATLiteral(949) - aux1749 + SATLiteral(844)))
844 7024 0
949 7024 0
949 844 7023 0
c ((SATLiteral(964) - aux1750 + SATLiteral(829))<=0)
-829 -7026 0
-964 -7026 0
-964 -829 -7027 0
c (0<=(SATLiteral(964) - aux1750 + SATLiteral(829)))
829 7027 0
964 7027 0
964 829 7026 0
c (( - aux1751 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7029 0
-1084 -7029 0
-1084 -814 -7030 0
c (0<=( - aux1751 + SATLiteral(1084) + SATLiteral(814)))
814 7030 0
1084 7030 0
1084 814 7029 0
c (( - aux1752 + SATLiteral(1099) + SATLiteral(1113))<=0)
-1113 -7032 0
-1099 -7032 0
-1099 -1113 -7033 0
c (0<=( - aux1752 + SATLiteral(1099) + SATLiteral(1113)))
1113 7033 0
1099 7033 0
1099 1113 7032 0
c ((SATLiteral(979) + aux1752 - aux1753)<=0)
7032 -7035 0
7033 -7036 0
-979 -7035 0
-979 7032 -7036 0
-979 7033 -7038 0
c (0<=(SATLiteral(979) + aux1752 - aux1753))
-7033 7038 0
-7032 7036 0
979 7038 0
979 -7033 7036 0
979 -7032 7035 0
c ((aux1749 + aux1751 - aux1754)<=0)
7029 -7040 0
7030 -7041 0
7023 -7040 0
7023 7029 -7041 0
7023 7030 -7043 0
7024 -7041 0
7024 7029 -7043 0
7024 7030 -7045 0
c (0<=(aux1749 + aux1751 - aux1754))
-7030 7045 0
-7029 7043 0
-7024 7045 0
-7024 -7030 7043 0
-7024 -7029 7041 0
-7023 7043 0
-7023 -7030 7041 0
-7023 -7029 7040 0
c ((SATLiteral(951) - aux1755 + SATLiteral(846))<=0)
-846 -7047 0
-951 -7047 0
-951 -846 -7048 0
c (0<=(SATLiteral(951) - aux1755 + SATLiteral(846)))
846 7048 0
951 7048 0
951 846 7047 0
c ((SATLiteral(966) - aux1756 + SATLiteral(831))<=0)
-831 -7050 0
-966 -7050 0
-966 -831 -7051 0
c (0<=(SATLiteral(966) - aux1756 + SATLiteral(831)))
831 7051 0
966 7051 0
966 831 7050 0
c (( - aux1757 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7053 0
-1086 -7053 0
-1086 -816 -7054 0
c (0<=( - aux1757 + SATLiteral(1086) + SATLiteral(816)))
816 7054 0
1086 7054 0
1086 816 7053 0
c (( - aux1758 + SATLiteral(1101) + SATLiteral(1114))<=0)
-1114 -7056 0
-1101 -7056 0
-1101 -1114 -7057 0
c (0<=( - aux1758 + SATLiteral(1101) + SATLiteral(1114)))
1114 7057 0
1101 7057 0
1101 1114 7056 0
c ((SATLiteral(981) + aux1758 - aux1759)<=0)
7056 -7059 0
7057 -7060 0
-981 -7059 0
-981 7056 -7060 0
-981 7057 -7062 0
c (0<=(SATLiteral(981) + aux1758 - aux1759))
-7057 7062 0
-7056 7060 0
981 7062 0
981 -7057 7060 0
981 -7056 7059 0
c ((aux1755 + aux1757 - aux1760)<=0)
7053 -7064 0
7054 -7065 0
7047 -7064 0
7047 7053 -7065 0
7047 7054 -7067 0
7048 -7065 0
7048 7053 -7067 0
7048 7054 -7069 0
c (0<=(aux1755 + aux1757 - aux1760))
-7054 7069 0
-7053 7067 0
-7048 7069 0
-7048 -7054 7067 0
-7048 -7053 7065 0
-7047 7067 0
-7047 -7054 7065 0
-7047 -7053 7064 0
c ((SATLiteral(953) - aux1761 + SATLiteral(848))<=0)
-848 -7071 0
-953 -7071 0
-953 -848 -7072 0
c (0<=(SATLiteral(953) - aux1761 + SATLiteral(848)))
848 7072 0
953 7072 0
953 848 7071 0
c ((SATLiteral(968) - aux1762 + SATLiteral(833))<=0)
-833 -7074 0
-968 -7074 0
-968 -833 -7075 0
c (0<=(SATLiteral(968) - aux1762 + SATLiteral(833)))
833 7075 0
968 7075 0
968 833 7074 0
c (( - aux1763 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7077 0
-1088 -7077 0
-1088 -818 -7078 0
c (0<=( - aux1763 + SATLiteral(1088) + SATLiteral(818)))
818 7078 0
1088 7078 0
1088 818 7077 0
c (( - aux1764 + SATLiteral(1103) + SATLiteral(1115))<=0)
-1115 -7080 0
-1103 -7080 0
-1103 -1115 -7081 0
c (0<=( - aux1764 + SATLiteral(1103) + SATLiteral(1115)))
1115 7081 0
1103 7081 0
1103 1115 7080 0
c ((SATLiteral(983) + aux1764 - aux1765)<=0)
7080 -7083 0
7081 -7084 0
-983 -7083 0
-983 7080 -7084 0
-983 7081 -7086 0
c (0<=(SATLiteral(983) + aux1764 - aux1765))
-7081 7086 0
-7080 7084 0
983 7086 0
983 -7081 7084 0
983 -7080 7083 0
c ((aux1761 + aux1763 - aux1766)<=0)
7077 -7088 0
7078 -7089 0
7071 -7088 0
7071 7077 -7089 0
7071 7078 -7091 0
7072 -7089 0
7072 7077 -7091 0
7072 7078 -7093 0
c (0<=(aux1761 + aux1763 - aux1766))
-7078 7093 0
-7077 7091 0
-7072 7093 0
-7072 -7078 7091 0
-7072 -7077 7089 0
-7071 7091 0
-7071 -7078 7089 0
-7071 -7077 7088 0
c ((SATLiteral(955) - aux1767 + SATLiteral(850))<=0)
-850 -7095 0
-955 -7095 0
-955 -850 -7096 0
c (0<=(SATLiteral(955) - aux1767 + SATLiteral(850)))
850 7096 0
955 7096 0
955 850 7095 0
c ((SATLiteral(970) - aux1768 + SATLiteral(835))<=0)
-835 -7098 0
-970 -7098 0
-970 -835 -7099 0
c (0<=(SATLiteral(970) - aux1768 + SATLiteral(835)))
835 7099 0
970 7099 0
970 835 7098 0
c (( - aux1769 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7101 0
-1090 -7101 0
-1090 -820 -7102 0
c (0<=( - aux1769 + SATLiteral(1090) + SATLiteral(820)))
820 7102 0
1090 7102 0
1090 820 7101 0
c (( - aux1770 + SATLiteral(1105) + SATLiteral(1116))<=0)
-1116 -7104 0
-1105 -7104 0
-1105 -1116 -7105 0
c (0<=( - aux1770 + SATLiteral(1105) + SATLiteral(1116)))
1116 7105 0
1105 7105 0
1105 1116 7104 0
c ((SATLiteral(985) + aux1770 - aux1771)<=0)
7104 -7107 0
7105 -7108 0
-985 -7107 0
-985 7104 -7108 0
-985 7105 -7110 0
c (0<=(SATLiteral(985) + aux1770 - aux1771))
-7105 7110 0
-7104 7108 0
985 7110 0
985 -7105 7108 0
985 -7104 7107 0
c ((aux1767 + aux1769 - aux1772)<=0)
7101 -7112 0
7102 -7113 0
7095 -7112 0
7095 7101 -7113 0
7095 7102 -7115 0
7096 -7113 0
7096 7101 -7115 0
7096 7102 -7117 0
c (0<=(aux1767 + aux1769 - aux1772))
-7102 7117 0
-7101 7115 0
-7096 7117 0
-7096 -7102 7115 0
-7096 -7101 7113 0
-7095 7115 0
-7095 -7102 7113 0
-7095 -7101 7112 0
c ((SATLiteral(957) - aux1773 + SATLiteral(852))<=0)
-852 -7119 0
-957 -7119 0
-957 -852 -7120 0
c (0<=(SATLiteral(957) - aux1773 + SATLiteral(852)))
852 7120 0
957 7120 0
957 852 7119 0
c ((SATLiteral(972) - aux1774 + SATLiteral(837))<=0)
-837 -7122 0
-972 -7122 0
-972 -837 -7123 0
c (0<=(SATLiteral(972) - aux1774 + SATLiteral(837)))
837 7123 0
972 7123 0
972 837 7122 0
c (( - aux1775 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7125 0
-1092 -7125 0
-1092 -822 -7126 0
c (0<=( - aux1775 + SATLiteral(1092) + SATLiteral(822)))
822 7126 0
1092 7126 0
1092 822 7125 0
c (( - aux1776 + SATLiteral(1107) + SATLiteral(1117))<=0)
-1117 -7128 0
-1107 -7128 0
-1107 -1117 -7129 0
c (0<=( - aux1776 + SATLiteral(1107) + SATLiteral(1117)))
1117 7129 0
1107 7129 0
1107 1117 7128 0
c ((SATLiteral(987) + aux1776 - aux1777)<=0)
7128 -7131 0
7129 -7132 0
-987 -7131 0
-987 7128 -7132 0
-987 7129 -7134 0
c (0<=(SATLiteral(987) + aux1776 - aux1777))
-7129 7134 0
-7128 7132 0
987 7134 0
987 -7129 7132 0
987 -7128 7131 0
c ((aux1773 + aux1775 - aux1778)<=0)
7125 -7136 0
7126 -7137 0
7119 -7136 0
7119 7125 -7137 0
7119 7126 -7139 0
7120 -7137 0
7120 7125 -7139 0
7120 7126 -7141 0
c (0<=(aux1773 + aux1775 - aux1778))
-7126 7141 0
-7125 7139 0
-7120 7141 0
-7120 -7126 7139 0
-7120 -7125 7137 0
-7119 7139 0
-7119 -7126 7137 0
-7119 -7125 7136 0
c ((SATLiteral(959) - aux1779 + SATLiteral(854))<=0)
-854 -7143 0
-959 -7143 0
-959 -854 -7144 0
c (0<=(SATLiteral(959) - aux1779 + SATLiteral(854)))
854 7144 0
959 7144 0
959 854 7143 0
c ((SATLiteral(974) - aux1780 + SATLiteral(839))<=0)
-839 -7146 0
-974 -7146 0
-974 -839 -7147 0
c (0<=(SATLiteral(974) - aux1780 + SATLiteral(839)))
839 7147 0
974 7147 0
974 839 7146 0
c (( - aux1781 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7149 0
-1094 -7149 0
-1094 -824 -7150 0
c (0<=( - aux1781 + SATLiteral(1094) + SATLiteral(824)))
824 7150 0
1094 7150 0
1094 824 7149 0
c (( - aux1782 + SATLiteral(1109) + SATLiteral(1118))<=0)
-1118 -7152 0
-1109 -7152 0
-1109 -1118 -7153 0
c (0<=( - aux1782 + SATLiteral(1109) + SATLiteral(1118)))
1118 7153 0
1109 7153 0
1109 1118 7152 0
c ((SATLiteral(989) + aux1782 - aux1783)<=0)
7152 -7155 0
7153 -7156 0
-989 -7155 0
-989 7152 -7156 0
-989 7153 -7158 0
c (0<=(SATLiteral(989) + aux1782 - aux1783))
-7153 7158 0
-7152 7156 0
989 7158 0
989 -7153 7156 0
989 -7152 7155 0
c ((aux1779 + aux1781 - aux1784)<=0)
7149 -7160 0
7150 -7161 0
7143 -7160 0
7143 7149 -7161 0
7143 7150 -7163 0
7144 -7161 0
7144 7149 -7163 0
7144 7150 -7165 0
c (0<=(aux1779 + aux1781 - aux1784))
-7150 7165 0
-7149 7163 0
-7144 7165 0
-7144 -7150 7163 0
-7144 -7149 7161 0
-7143 7163 0
-7143 -7150 7161 0
-7143 -7149 7160 0
c ((SATLiteral(961) - aux1785 + SATLiteral(856))<=0)
-856 -7167 0
-961 -7167 0
-961 -856 -7168 0
c (0<=(SATLiteral(961) - aux1785 + SATLiteral(856)))
856 7168 0
961 7168 0
961 856 7167 0
c ((SATLiteral(976) - aux1786 + SATLiteral(841))<=0)
-841 -7170 0
-976 -7170 0
-976 -841 -7171 0
c (0<=(SATLiteral(976) - aux1786 + SATLiteral(841)))
841 7171 0
976 7171 0
976 841 7170 0
c (( - aux1787 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7173 0
-1096 -7173 0
-1096 -826 -7174 0
c (0<=( - aux1787 + SATLiteral(1096) + SATLiteral(826)))
826 7174 0
1096 7174 0
1096 826 7173 0
c (( - aux1788 + SATLiteral(1111) + SATLiteral(1119))<=0)
-1119 -7176 0
-1111 -7176 0
-1111 -1119 -7177 0
c (0<=( - aux1788 + SATLiteral(1111) + SATLiteral(1119)))
1119 7177 0
1111 7177 0
1111 1119 7176 0
c ((SATLiteral(991) + aux1788 - aux1789)<=0)
7176 -7179 0
7177 -7180 0
-991 -7179 0
-991 7176 -7180 0
-991 7177 -7182 0
c (0<=(SATLiteral(991) + aux1788 - aux1789))
-7177 7182 0
-7176 7180 0
991 7182 0
991 -7177 7180 0
991 -7176 7179 0
c ((aux1785 + aux1787 - aux1790)<=0)
7173 -7184 0
7174 -7185 0
7167 -7184 0
7167 7173 -7185 0
7167 7174 -7187 0
7168 -7185 0
7168 7173 -7187 0
7168 7174 -7189 0
c (0<=(aux1785 + aux1787 - aux1790))
-7174 7189 0
-7173 7187 0
-7168 7189 0
-7168 -7174 7187 0
-7168 -7173 7185 0
-7167 7187 0
-7167 -7174 7185 0
-7167 -7173 7184 0
c ((SATLiteral(-960) - aux1791 + SATLiteral(-855))<=0)
855 -7191 0
960 -7191 0
960 855 -7192 0
c (0<=(SATLiteral(-960) - aux1791 + SATLiteral(-855)))
-855 7192 0
-960 7192 0
-960 -855 7191 0
c ((SATLiteral(-975) - aux1792 + SATLiteral(-840))<=0)
840 -7194 0
975 -7194 0
975 840 -7195 0
c (0<=(SATLiteral(-975) - aux1792 + SATLiteral(-840)))
-840 7195 0
-975 7195 0
-975 -840 7194 0
c (( - aux1793 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7197 0
1095 -7197 0
1095 825 -7198 0
c (0<=( - aux1793 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7198 0
-1095 7198 0
-1095 -825 7197 0
c (( - aux1794 + SATLiteral(-1110) + SATLiteral(1120))<=0)
-1120 -7200 0
1110 -7200 0
1110 -1120 -7201 0
c (0<=( - aux1794 + SATLiteral(-1110) + SATLiteral(1120)))
1120 7201 0
-1110 7201 0
-1110 1120 7200 0
c ((SATLiteral(-990) + aux1794 - aux1795)<=0)
7200 -7203 0
7201 -7204 0
990 -7203 0
990 7200 -7204 0
990 7201 -7206 0
c (0<=(SATLiteral(-990) + aux1794 - aux1795))
-7201 7206 0
-7200 7204 0
-990 7206 0
-990 -7201 7204 0
-990 -7200 7203 0
c ((aux1791 + aux1793 - aux1796)<=0)
7197 -7208 0
7198 -7209 0
7191 -7208 0
7191 7197 -7209 0
7191 7198 -7211 0
7192 -7209 0
7192 7197 -7211 0
7192 7198 -7213 0
c (0<=(aux1791 + aux1793 - aux1796))
-7198 7213 0
-7197 7211 0
-7192 7213 0
-7192 -7198 7211 0
-7192 -7197 7209 0
-7191 7211 0
-7191 -7198 7209 0
-7191 -7197 7208 0
c ((SATLiteral(992) - aux1797 + SATLiteral(887))<=0)
-887 -7215 0
-992 -7215 0
-992 -887 -7216 0
c (0<=(SATLiteral(992) - aux1797 + SATLiteral(887)))
887 7216 0
992 7216 0
992 887 7215 0
c ((SATLiteral(1007) - aux1798 + SATLiteral(872))<=0)
-872 -7218 0
-1007 -7218 0
-1007 -872 -7219 0
c (0<=(SATLiteral(1007) - aux1798 + SATLiteral(872)))
872 7219 0
1007 7219 0
1007 872 7218 0
c (( - aux1799 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7221 0
-1127 -7221 0
-1127 -857 -7222 0
c (0<=( - aux1799 + SATLiteral(1127) + SATLiteral(857)))
857 7222 0
1127 7222 0
1127 857 7221 0
c (( - aux1800 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7224 0
-1142 -7224 0
-1142 -1157 -7225 0
c (0<=( - aux1800 + SATLiteral(1142) + SATLiteral(1157)))
1157 7225 0
1142 7225 0
1142 1157 7224 0
c ((SATLiteral(1022) + aux1800 - aux1801)<=0)
7224 -7227 0
7225 -7228 0
-1022 -7227 0
-1022 7224 -7228 0
-1022 7225 -7230 0
c (0<=(SATLiteral(1022) + aux1800 - aux1801))
-7225 7230 0
-7224 7228 0
1022 7230 0
1022 -7225 7228 0
1022 -7224 7227 0
c ((aux1797 + aux1799 - aux1802)<=0)
7221 -7232 0
7222 -7233 0
7215 -7232 0
7215 7221 -7233 0
7215 7222 -7235 0
7216 -7233 0
7216 7221 -7235 0
7216 7222 -7237 0
c (0<=(aux1797 + aux1799 - aux1802))
-7222 7237 0
-7221 7235 0
-7216 7237 0
-7216 -7222 7235 0
-7216 -7221 7233 0
-7215 7235 0
-7215 -7222 7233 0
-7215 -7221 7232 0
c ((SATLiteral(994) - aux1803 + SATLiteral(889))<=0)
-889 -7239 0
-994 -7239 0
-994 -889 -7240 0
c (0<=(SATLiteral(994) - aux1803 + SATLiteral(889)))
889 7240 0
994 7240 0
994 889 7239 0
c ((SATLiteral(1009) - aux1804 + SATLiteral(874))<=0)
-874 -7242 0
-1009 -7242 0
-1009 -874 -7243 0
c (0<=(SATLiteral(1009) - aux1804 + SATLiteral(874)))
874 7243 0
1009 7243 0
1009 874 7242 0
c (( - aux1805 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7245 0
-1129 -7245 0
-1129 -859 -7246 0
c (0<=( - aux1805 + SATLiteral(1129) + SATLiteral(859)))
859 7246 0
1129 7246 0
1129 859 7245 0
c (( - aux1806 + SATLiteral(1143) + SATLiteral(1159))<=0)
-1159 -7248 0
-1143 -7248 0
-1143 -1159 -7249 0
c (0<=( - aux1806 + SATLiteral(1143) + SATLiteral(1159)))
1159 7249 0
1143 7249 0
1143 1159 7248 0
c ((SATLiteral(1024) + aux1806 - aux1807)<=0)
7248 -7251 0
7249 -7252 0
-1024 -7251 0
-1024 7248 -7252 0
-1024 7249 -7254 0
c (0<=(SATLiteral(1024) + aux1806 - aux1807))
-7249 7254 0
-7248 7252 0
1024 7254 0
1024 -7249 7252 0
1024 -7248 7251 0
c ((aux1803 + aux1805 - aux1808)<=0)
7245 -7256 0
7246 -7257 0
7239 -7256 0
7239 7245 -7257 0
7239 7246 -7259 0
7240 -7257 0
7240 7245 -7259 0
7240 7246 -7261 0
c (0<=(aux1803 + aux1805 - aux1808))
-7246 7261 0
-7245 7259 0
-7240 7261 0
-7240 -7246 7259 0
-7240 -7245 7257 0
-7239 7259 0
-7239 -7246 7257 0
-7239 -7245 7256 0
c ((SATLiteral(996) - aux1809 + SATLiteral(891))<=0)
-891 -7263 0
-996 -7263 0
-996 -891 -7264 0
c (0<=(SATLiteral(996) - aux1809 + SATLiteral(891)))
891 7264 0
996 7264 0
996 891 7263 0
c ((SATLiteral(1011) - aux1810 + SATLiteral(876))<=0)
-876 -7266 0
-1011 -7266 0
-1011 -876 -7267 0
c (0<=(SATLiteral(1011) - aux1810 + SATLiteral(876)))
876 7267 0
1011 7267 0
1011 876 7266 0
c (( - aux1811 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7269 0
-1131 -7269 0
-1131 -861 -7270 0
c (0<=( - aux1811 + SATLiteral(1131) + SATLiteral(861)))
861 7270 0
1131 7270 0
1131 861 7269 0
c (( - aux1812 + SATLiteral(1144) + SATLiteral(1161))<=0)
-1161 -7272 0
-1144 -7272 0
-1144 -1161 -7273 0
c (0<=( - aux1812 + SATLiteral(1144) + SATLiteral(1161)))
1161 7273 0
1144 7273 0
1144 1161 7272 0
c ((SATLiteral(1026) + aux1812 - aux1813)<=0)
7272 -7275 0
7273 -7276 0
-1026 -7275 0
-1026 7272 -7276 0
-1026 7273 -7278 0
c (0<=(SATLiteral(1026) + aux1812 - aux1813))
-7273 7278 0
-7272 7276 0
1026 7278 0
1026 -7273 7276 0
1026 -7272 7275 0
c ((aux1809 + aux1811 - aux1814)<=0)
7269 -7280 0
7270 -7281 0
7263 -7280 0
7263 7269 -7281 0
7263 7270 -7283 0
7264 -7281 0
7264 7269 -7283 0
7264 7270 -7285 0
c (0<=(aux1809 + aux1811 - aux1814))
-7270 7285 0
-7269 7283 0
-7264 7285 0
-7264 -7270 7283 0
-7264 -7269 7281 0
-7263 7283 0
-7263 -7270 7281 0
-7263 -7269 7280 0
c ((SATLiteral(998) - aux1815 + SATLiteral(893))<=0)
-893 -7287 0
-998 -7287 0
-998 -893 -7288 0
c (0<=(SATLiteral(998) - aux1815 + SATLiteral(893)))
893 7288 0
998 7288 0
998 893 7287 0
c ((SATLiteral(1013) - aux1816 + SATLiteral(878))<=0)
-878 -7290 0
-1013 -7290 0
-1013 -878 -7291 0
c (0<=(SATLiteral(1013) - aux1816 + SATLiteral(878)))
878 7291 0
1013 7291 0
1013 878 7290 0
c (( - aux1817 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7293 0
-1133 -7293 0
-1133 -863 -7294 0
c (0<=( - aux1817 + SATLiteral(1133) + SATLiteral(863)))
863 7294 0
1133 7294 0
1133 863 7293 0
c (( - aux1818 + SATLiteral(1145) + SATLiteral(1163))<=0)
-1163 -7296 0
-1145 -7296 0
-1145 -1163 -7297 0
c (0<=( - aux1818 + SATLiteral(1145) + SATLiteral(1163)))
1163 7297 0
1145 7297 0
1145 1163 7296 0
c ((SATLiteral(1028) + aux1818 - aux1819)<=0)
7296 -7299 0
7297 -7300 0
-1028 -7299 0
-1028 7296 -7300 0
-1028 7297 -7302 0
c (0<=(SATLiteral(1028) + aux1818 - aux1819))
-7297 7302 0
-7296 7300 0
1028 7302 0
1028 -7297 7300 0
1028 -7296 7299 0
c ((aux1815 + aux1817 - aux1820)<=0)
7293 -7304 0
7294 -7305 0
7287 -7304 0
7287 7293 -7305 0
7287 7294 -7307 0
7288 -7305 0
7288 7293 -7307 0
7288 7294 -7309 0
c (0<=(aux1815 + aux1817 - aux1820))
-7294 7309 0
-7293 7307 0
-7288 7309 0
-7288 -7294 7307 0
-7288 -7293 7305 0
-7287 7307 0
-7287 -7294 7305 0
-7287 -7293 7304 0
c ((SATLiteral(1000) - aux1821 + SATLiteral(895))<=0)
-895 -7311 0
-1000 -7311 0
-1000 -895 -7312 0
c (0<=(SATLiteral(1000) - aux1821 + SATLiteral(895)))
895 7312 0
1000 7312 0
1000 895 7311 0
c ((SATLiteral(1015) - aux1822 + SATLiteral(880))<=0)
-880 -7314 0
-1015 -7314 0
-1015 -880 -7315 0
c (0<=(SATLiteral(1015) - aux1822 + SATLiteral(880)))
880 7315 0
1015 7315 0
1015 880 7314 0
c (( - aux1823 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7317 0
-1135 -7317 0
-1135 -865 -7318 0
c (0<=( - aux1823 + SATLiteral(1135) + SATLiteral(865)))
865 7318 0
1135 7318 0
1135 865 7317 0
c (( - aux1824 + SATLiteral(1146) + SATLiteral(1165))<=0)
-1165 -7320 0
-1146 -7320 0
-1146 -1165 -7321 0
c (0<=( - aux1824 + SATLiteral(1146) + SATLiteral(1165)))
1165 7321 0
1146 7321 0
1146 1165 7320 0
c ((SATLiteral(1030) + aux1824 - aux1825)<=0)
7320 -7323 0
7321 -7324 0
-1030 -7323 0
-1030 7320 -7324 0
-1030 7321 -7326 0
c (0<=(SATLiteral(1030) + aux1824 - aux1825))
-7321 7326 0
-7320 7324 0
1030 7326 0
1030 -7321 7324 0
1030 -7320 7323 0
c ((aux1821 + aux1823 - aux1826)<=0)
7317 -7328 0
7318 -7329 0
7311 -7328 0
7311 7317 -7329 0
7311 7318 -7331 0
7312 -7329 0
7312 7317 -7331 0
7312 7318 -7333 0
c (0<=(aux1821 + aux1823 - aux1826))
-7318 7333 0
-7317 7331 0
-7312 7333 0
-7312 -7318 7331 0
-7312 -7317 7329 0
-7311 7331 0
-7311 -7318 7329 0
-7311 -7317 7328 0
c ((SATLiteral(1002) - aux1827 + SATLiteral(897))<=0)
-897 -7335 0
-1002 -7335 0
-1002 -897 -7336 0
c (0<=(SATLiteral(1002) - aux1827 + SATLiteral(897)))
897 7336 0
1002 7336 0
1002 897 7335 0
c ((SATLiteral(1017) - aux1828 + SATLiteral(882))<=0)
-882 -7338 0
-1017 -7338 0
-1017 -882 -7339 0
c (0<=(SATLiteral(1017) - aux1828 + SATLiteral(882)))
882 7339 0
1017 7339 0
1017 882 7338 0
c (( - aux1829 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7341 0
-1137 -7341 0
-1137 -867 -7342 0
c (0<=( - aux1829 + SATLiteral(1137) + SATLiteral(867)))
867 7342 0
1137 7342 0
1137 867 7341 0
c (( - aux1830 + SATLiteral(1147) + SATLiteral(1167))<=0)
-1167 -7344 0
-1147 -7344 0
-1147 -1167 -7345 0
c (0<=( - aux1830 + SATLiteral(1147) + SATLiteral(1167)))
1167 7345 0
1147 7345 0
1147 1167 7344 0
c ((SATLiteral(1032) + aux1830 - aux1831)<=0)
7344 -7347 0
7345 -7348 0
-1032 -7347 0
-1032 7344 -7348 0
-1032 7345 -7350 0
c (0<=(SATLiteral(1032) + aux1830 - aux1831))
-7345 7350 0
-7344 7348 0
1032 7350 0
1032 -7345 7348 0
1032 -7344 7347 0
c ((aux1827 + aux1829 - aux1832)<=0)
7341 -7352 0
7342 -7353 0
7335 -7352 0
7335 7341 -7353 0
7335 7342 -7355 0
7336 -7353 0
7336 7341 -7355 0
7336 7342 -7357 0
c (0<=(aux1827 + aux1829 - aux1832))
-7342 7357 0
-7341 7355 0
-7336 7357 0
-7336 -7342 7355 0
-7336 -7341 7353 0
-7335 7355 0
-7335 -7342 7353 0
-7335 -7341 7352 0
c ((SATLiteral(1004) - aux1833 + SATLiteral(899))<=0)
-899 -7359 0
-1004 -7359 0
-1004 -899 -7360 0
c (0<=(SATLiteral(1004) - aux1833 + SATLiteral(899)))
899 7360 0
1004 7360 0
1004 899 7359 0
c ((SATLiteral(1019) - aux1834 + SATLiteral(884))<=0)
-884 -7362 0
-1019 -7362 0
-1019 -884 -7363 0
c (0<=(SATLiteral(1019) - aux1834 + SATLiteral(884)))
884 7363 0
1019 7363 0
1019 884 7362 0
c (( - aux1835 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7365 0
-1139 -7365 0
-1139 -869 -7366 0
c (0<=( - aux1835 + SATLiteral(1139) + SATLiteral(869)))
869 7366 0
1139 7366 0
1139 869 7365 0
c (( - aux1836 + SATLiteral(1148) + SATLiteral(1169))<=0)
-1169 -7368 0
-1148 -7368 0
-1148 -1169 -7369 0
c (0<=( - aux1836 + SATLiteral(1148) + SATLiteral(1169)))
1169 7369 0
1148 7369 0
1148 1169 7368 0
c ((SATLiteral(1034) + aux1836 - aux1837)<=0)
7368 -7371 0
7369 -7372 0
-1034 -7371 0
-1034 7368 -7372 0
-1034 7369 -7374 0
c (0<=(SATLiteral(1034) + aux1836 - aux1837))
-7369 7374 0
-7368 7372 0
1034 7374 0
1034 -7369 7372 0
1034 -7368 7371 0
c ((aux1833 + aux1835 - aux1838)<=0)
7365 -7376 0
7366 -7377 0
7359 -7376 0
7359 7365 -7377 0
7359 7366 -7379 0
7360 -7377 0
7360 7365 -7379 0
7360 7366 -7381 0
c (0<=(aux1833 + aux1835 - aux1838))
-7366 7381 0
-7365 7379 0
-7360 7381 0
-7360 -7366 7379 0
-7360 -7365 7377 0
-7359 7379 0
-7359 -7366 7377 0
-7359 -7365 7376 0
c ((SATLiteral(1006) - aux1839 + SATLiteral(901))<=0)
-901 -7383 0
-1006 -7383 0
-1006 -901 -7384 0
c (0<=(SATLiteral(1006) - aux1839 + SATLiteral(901)))
901 7384 0
1006 7384 0
1006 901 7383 0
c ((SATLiteral(1021) - aux1840 + SATLiteral(886))<=0)
-886 -7386 0
-1021 -7386 0
-1021 -886 -7387 0
c (0<=(SATLiteral(1021) - aux1840 + SATLiteral(886)))
886 7387 0
1021 7387 0
1021 886 7386 0
c (( - aux1841 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7389 0
-1141 -7389 0
-1141 -871 -7390 0
c (0<=( - aux1841 + SATLiteral(1141) + SATLiteral(871)))
871 7390 0
1141 7390 0
1141 871 7389 0
c (( - aux1842 + SATLiteral(1149) + SATLiteral(1171))<=0)
-1171 -7392 0
-1149 -7392 0
-1149 -1171 -7393 0
c (0<=( - aux1842 + SATLiteral(1149) + SATLiteral(1171)))
1171 7393 0
1149 7393 0
1149 1171 7392 0
c ((SATLiteral(1036) + aux1842 - aux1843)<=0)
7392 -7395 0
7393 -7396 0
-1036 -7395 0
-1036 7392 -7396 0
-1036 7393 -7398 0
c (0<=(SATLiteral(1036) + aux1842 - aux1843))
-7393 7398 0
-7392 7396 0
1036 7398 0
1036 -7393 7396 0
1036 -7392 7395 0
c ((aux1839 + aux1841 - aux1844)<=0)
7389 -7400 0
7390 -7401 0
7383 -7400 0
7383 7389 -7401 0
7383 7390 -7403 0
7384 -7401 0
7384 7389 -7403 0
7384 7390 -7405 0
c (0<=(aux1839 + aux1841 - aux1844))
-7390 7405 0
-7389 7403 0
-7384 7405 0
-7384 -7390 7403 0
-7384 -7389 7401 0
-7383 7403 0
-7383 -7390 7401 0
-7383 -7389 7400 0
c ((SATLiteral(-1005) - aux1845 + SATLiteral(-900))<=0)
900 -7407 0
1005 -7407 0
1005 900 -7408 0
c (0<=(SATLiteral(-1005) - aux1845 + SATLiteral(-900)))
-900 7408 0
-1005 7408 0
-1005 -900 7407 0
c ((SATLiteral(-1020) - aux1846 + SATLiteral(-885))<=0)
885 -7410 0
1020 -7410 0
1020 885 -7411 0
c (0<=(SATLiteral(-1020) - aux1846 + SATLiteral(-885)))
-885 7411 0
-1020 7411 0
-1020 -885 7410 0
c (( - aux1847 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7413 0
1140 -7413 0
1140 870 -7414 0
c (0<=( - aux1847 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7414 0
-1140 7414 0
-1140 -870 7413 0
c (( - aux1848 + SATLiteral(1150) + SATLiteral(-1170))<=0)
1170 -7416 0
-1150 -7416 0
-1150 1170 -7417 0
c (0<=( - aux1848 + SATLiteral(1150) + SATLiteral(-1170)))
-1170 7417 0
1150 7417 0
1150 -1170 7416 0
c ((SATLiteral(-1035) + aux1848 - aux1849)<=0)
7416 -7419 0
7417 -7420 0
1035 -7419 0
1035 7416 -7420 0
1035 7417 -7422 0
c (0<=(SATLiteral(-1035) + aux1848 - aux1849))
-7417 7422 0
-7416 7420 0
-1035 7422 0
-1035 -7417 7420 0
-1035 -7416 7419 0
c ((aux1845 + aux1847 - aux1850)<=0)
7413 -7424 0
7414 -7425 0
7407 -7424 0
7407 7413 -7425 0
7407 7414 -7427 0
7408 -7425 0
7408 7413 -7427 0
7408 7414 -7429 0
c (0<=(aux1845 + aux1847 - aux1850))
-7414 7429 0
-7413 7427 0
-7408 7429 0
-7408 -7414 7427 0
-7408 -7413 7425 0
-7407 7427 0
-7407 -7414 7425 0
-7407 -7413 7424 0
c ((SATLiteral(1037) - aux1851 + SATLiteral(932))<=0)
-932 -7431 0
-1037 -7431 0
-1037 -932 -7432 0
c (0<=(SATLiteral(1037) - aux1851 + SATLiteral(932)))
932 7432 0
1037 7432 0
1037 932 7431 0
c ((SATLiteral(1052) - aux1852 + SATLiteral(917))<=0)
-917 -7434 0
-1052 -7434 0
-1052 -917 -7435 0
c (0<=(SATLiteral(1052) - aux1852 + SATLiteral(917)))
917 7435 0
1052 7435 0
1052 917 7434 0
c (( - aux1853 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7437 0
-1172 -7437 0
-1172 -902 -7438 0
c (0<=( - aux1853 + SATLiteral(1172) + SATLiteral(902)))
902 7438 0
1172 7438 0
1172 902 7437 0
c (( - aux1854 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7440 0
-1187 -7440 0
-1187 -1202 -7441 0
c (0<=( - aux1854 + SATLiteral(1187) + SATLiteral(1202)))
1202 7441 0
1187 7441 0
1187 1202 7440 0
c ((SATLiteral(1067) + aux1854 - aux1855)<=0)
7440 -7443 0
7441 -7444 0
-1067 -7443 0
-1067 7440 -7444 0
-1067 7441 -7446 0
c (0<=(SATLiteral(1067) + aux1854 - aux1855))
-7441 7446 0
-7440 7444 0
1067 7446 0
1067 -7441 7444 0
1067 -7440 7443 0
c ((aux1851 + aux1853 - aux1856)<=0)
7437 -7448 0
7438 -7449 0
7431 -7448 0
7431 7437 -7449 0
7431 7438 -7451 0
7432 -7449 0
7432 7437 -7451 0
7432 7438 -7453 0
c (0<=(aux1851 + aux1853 - aux1856))
-7438 7453 0
-7437 7451 0
-7432 7453 0
-7432 -7438 7451 0
-7432 -7437 7449 0
-7431 7451 0
-7431 -7438 7449 0
-7431 -7437 7448 0
c ((SATLiteral(1039) - aux1857 + SATLiteral(934))<=0)
-934 -7455 0
-1039 -7455 0
-1039 -934 -7456 0
c (0<=(SATLiteral(1039) - aux1857 + SATLiteral(934)))
934 7456 0
1039 7456 0
1039 934 7455 0
c ((SATLiteral(1054) - aux1858 + SATLiteral(919))<=0)
-919 -7458 0
-1054 -7458 0
-1054 -919 -7459 0
c (0<=(SATLiteral(1054) - aux1858 + SATLiteral(919)))
919 7459 0
1054 7459 0
1054 919 7458 0
c (( - aux1859 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7461 0
-1174 -7461 0
-1174 -904 -7462 0
c (0<=( - aux1859 + SATLiteral(1174) + SATLiteral(904)))
904 7462 0
1174 7462 0
1174 904 7461 0
c (( - aux1860 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7464 0
-1189 -7464 0
-1189 -1204 -7465 0
c (0<=( - aux1860 + SATLiteral(1189) + SATLiteral(1204)))
1204 7465 0
1189 7465 0
1189 1204 7464 0
c ((SATLiteral(1069) + aux1860 - aux1861)<=0)
7464 -7467 0
7465 -7468 0
-1069 -7467 0
-1069 7464 -7468 0
-1069 7465 -7470 0
c (0<=(SATLiteral(1069) + aux1860 - aux1861))
-7465 7470 0
-7464 7468 0
1069 7470 0
1069 -7465 7468 0
1069 -7464 7467 0
c ((aux1857 + aux1859 - aux1862)<=0)
7461 -7472 0
7462 -7473 0
7455 -7472 0
7455 7461 -7473 0
7455 7462 -7475 0
7456 -7473 0
7456 7461 -7475 0
7456 7462 -7477 0
c (0<=(aux1857 + aux1859 - aux1862))
-7462 7477 0
-7461 7475 0
-7456 7477 0
-7456 -7462 7475 0
-7456 -7461 7473 0
-7455 7475 0
-7455 -7462 7473 0
-7455 -7461 7472 0
c ((SATLiteral(1041) - aux1863 + SATLiteral(936))<=0)
-936 -7479 0
-1041 -7479 0
-1041 -936 -7480 0
c (0<=(SATLiteral(1041) - aux1863 + SATLiteral(936)))
936 7480 0
1041 7480 0
1041 936 7479 0
c ((SATLiteral(1056) - aux1864 + SATLiteral(921))<=0)
-921 -7482 0
-1056 -7482 0
-1056 -921 -7483 0
c (0<=(SATLiteral(1056) - aux1864 + SATLiteral(921)))
921 7483 0
1056 7483 0
1056 921 7482 0
c (( - aux1865 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7485 0
-1176 -7485 0
-1176 -906 -7486 0
c (0<=( - aux1865 + SATLiteral(1176) + SATLiteral(906)))
906 7486 0
1176 7486 0
1176 906 7485 0
c (( - aux1866 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7488 0
-1191 -7488 0
-1191 -1206 -7489 0
c (0<=( - aux1866 + SATLiteral(1191) + SATLiteral(1206)))
1206 7489 0
1191 7489 0
1191 1206 7488 0
c ((SATLiteral(1071) + aux1866 - aux1867)<=0)
7488 -7491 0
7489 -7492 0
-1071 -7491 0
-1071 7488 -7492 0
-1071 7489 -7494 0
c (0<=(SATLiteral(1071) + aux1866 - aux1867))
-7489 7494 0
-7488 7492 0
1071 7494 0
1071 -7489 7492 0
1071 -7488 7491 0
c ((aux1863 + aux1865 - aux1868)<=0)
7485 -7496 0
7486 -7497 0
7479 -7496 0
7479 7485 -7497 0
7479 7486 -7499 0
7480 -7497 0
7480 7485 -7499 0
7480 7486 -7501 0
c (0<=(aux1863 + aux1865 - aux1868))
-7486 7501 0
-7485 7499 0
-7480 7501 0
-7480 -7486 7499 0
-7480 -7485 7497 0
-7479 7499 0
-7479 -7486 7497 0
-7479 -7485 7496 0
c ((SATLiteral(1043) - aux1869 + SATLiteral(938))<=0)
-938 -7503 0
-1043 -7503 0
-1043 -938 -7504 0
c (0<=(SATLiteral(1043) - aux1869 + SATLiteral(938)))
938 7504 0
1043 7504 0
1043 938 7503 0
c ((SATLiteral(1058) - aux1870 + SATLiteral(923))<=0)
-923 -7506 0
-1058 -7506 0
-1058 -923 -7507 0
c (0<=(SATLiteral(1058) - aux1870 + SATLiteral(923)))
923 7507 0
1058 7507 0
1058 923 7506 0
c (( - aux1871 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7509 0
-1178 -7509 0
-1178 -908 -7510 0
c (0<=( - aux1871 + SATLiteral(1178) + SATLiteral(908)))
908 7510 0
1178 7510 0
1178 908 7509 0
c (( - aux1872 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7512 0
-1193 -7512 0
-1193 -1208 -7513 0
c (0<=( - aux1872 + SATLiteral(1193) + SATLiteral(1208)))
1208 7513 0
1193 7513 0
1193 1208 7512 0
c ((SATLiteral(1073) + aux1872 - aux1873)<=0)
7512 -7515 0
7513 -7516 0
-1073 -7515 0
-1073 7512 -7516 0
-1073 7513 -7518 0
c (0<=(SATLiteral(1073) + aux1872 - aux1873))
-7513 7518 0
-7512 7516 0
1073 7518 0
1073 -7513 7516 0
1073 -7512 7515 0
c ((aux1869 + aux1871 - aux1874)<=0)
7509 -7520 0
7510 -7521 0
7503 -7520 0
7503 7509 -7521 0
7503 7510 -7523 0
7504 -7521 0
7504 7509 -7523 0
7504 7510 -7525 0
c (0<=(aux1869 + aux1871 - aux1874))
-7510 7525 0
-7509 7523 0
-7504 7525 0
-7504 -7510 7523 0
-7504 -7509 7521 0
-7503 7523 0
-7503 -7510 7521 0
-7503 -7509 7520 0
c ((SATLiteral(1045) - aux1875 + SATLiteral(940))<=0)
-940 -7527 0
-1045 -7527 0
-1045 -940 -7528 0
c (0<=(SATLiteral(1045) - aux1875 + SATLiteral(940)))
940 7528 0
1045 7528 0
1045 940 7527 0
c ((SATLiteral(1060) - aux1876 + SATLiteral(925))<=0)
-925 -7530 0
-1060 -7530 0
-1060 -925 -7531 0
c (0<=(SATLiteral(1060) - aux1876 + SATLiteral(925)))
925 7531 0
1060 7531 0
1060 925 7530 0
c (( - aux1877 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7533 0
-1180 -7533 0
-1180 -910 -7534 0
c (0<=( - aux1877 + SATLiteral(1180) + SATLiteral(910)))
910 7534 0
1180 7534 0
1180 910 7533 0
c (( - aux1878 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7536 0
-1195 -7536 0
-1195 -1210 -7537 0
c (0<=( - aux1878 + SATLiteral(1195) + SATLiteral(1210)))
1210 7537 0
1195 7537 0
1195 1210 7536 0
c ((SATLiteral(1075) + aux1878 - aux1879)<=0)
7536 -7539 0
7537 -7540 0
-1075 -7539 0
-1075 7536 -7540 0
-1075 7537 -7542 0
c (0<=(SATLiteral(1075) + aux1878 - aux1879))
-7537 7542 0
-7536 7540 0
1075 7542 0
1075 -7537 7540 0
1075 -7536 7539 0
c ((aux1875 + aux1877 - aux1880)<=0)
7533 -7544 0
7534 -7545 0
7527 -7544 0
7527 7533 -7545 0
7527 7534 -7547 0
7528 -7545 0
7528 7533 -7547 0
7528 7534 -7549 0
c (0<=(aux1875 + aux1877 - aux1880))
-7534 7549 0
-7533 7547 0
-7528 7549 0
-7528 -7534 7547 0
-7528 -7533 7545 0
-7527 7547 0
-7527 -7534 7545 0
-7527 -7533 7544 0
c ((SATLiteral(1047) - aux1881 + SATLiteral(942))<=0)
-942 -7551 0
-1047 -7551 0
-1047 -942 -7552 0
c (0<=(SATLiteral(1047) - aux1881 + SATLiteral(942)))
942 7552 0
1047 7552 0
1047 942 7551 0
c ((SATLiteral(1062) - aux1882 + SATLiteral(927))<=0)
-927 -7554 0
-1062 -7554 0
-1062 -927 -7555 0
c (0<=(SATLiteral(1062) - aux1882 + SATLiteral(927)))
927 7555 0
1062 7555 0
1062 927 7554 0
c (( - aux1883 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7557 0
-1182 -7557 0
-1182 -912 -7558 0
c (0<=( - aux1883 + SATLiteral(1182) + SATLiteral(912)))
912 7558 0
1182 7558 0
1182 912 7557 0
c (( - aux1884 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7560 0
-1197 -7560 0
-1197 -1212 -7561 0
c (0<=( - aux1884 + SATLiteral(1197) + SATLiteral(1212)))
1212 7561 0
1197 7561 0
1197 1212 7560 0
c ((SATLiteral(1077) + aux1884 - aux1885)<=0)
7560 -7563 0
7561 -7564 0
-1077 -7563 0
-1077 7560 -7564 0
-1077 7561 -7566 0
c (0<=(SATLiteral(1077) + aux1884 - aux1885))
-7561 7566 0
-7560 7564 0
1077 7566 0
1077 -7561 7564 0
1077 -7560 7563 0
c ((aux1881 + aux1883 - aux1886)<=0)
7557 -7568 0
7558 -7569 0
7551 -7568 0
7551 7557 -7569 0
7551 7558 -7571 0
7552 -7569 0
7552 7557 -7571 0
7552 7558 -7573 0
c (0<=(aux1881 + aux1883 - aux1886))
-7558 7573 0
-7557 7571 0
-7552 7573 0
-7552 -7558 7571 0
-7552 -7557 7569 0
-7551 7571 0
-7551 -7558 7569 0
-7551 -7557 7568 0
c ((SATLiteral(1049) - aux1887 + SATLiteral(944))<=0)
-944 -7575 0
-1049 -7575 0
-1049 -944 -7576 0
c (0<=(SATLiteral(1049) - aux1887 + SATLiteral(944)))
944 7576 0
1049 7576 0
1049 944 7575 0
c ((SATLiteral(1064) - aux1888 + SATLiteral(929))<=0)
-929 -7578 0
-1064 -7578 0
-1064 -929 -7579 0
c (0<=(SATLiteral(1064) - aux1888 + SATLiteral(929)))
929 7579 0
1064 7579 0
1064 929 7578 0
c (( - aux1889 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7581 0
-1184 -7581 0
-1184 -914 -7582 0
c (0<=( - aux1889 + SATLiteral(1184) + SATLiteral(914)))
914 7582 0
1184 7582 0
1184 914 7581 0
c (( - aux1890 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7584 0
-1199 -7584 0
-1199 -1214 -7585 0
c (0<=( - aux1890 + SATLiteral(1199) + SATLiteral(1214)))
1214 7585 0
1199 7585 0
1199 1214 7584 0
c ((SATLiteral(1079) + aux1890 - aux1891)<=0)
7584 -7587 0
7585 -7588 0
-1079 -7587 0
-1079 7584 -7588 0
-1079 7585 -7590 0
c (0<=(SATLiteral(1079) + aux1890 - aux1891))
-7585 7590 0
-7584 7588 0
1079 7590 0
1079 -7585 7588 0
1079 -7584 7587 0
c ((aux1887 + aux1889 - aux1892)<=0)
7581 -7592 0
7582 -7593 0
7575 -7592 0
7575 7581 -7593 0
7575 7582 -7595 0
7576 -7593 0
7576 7581 -7595 0
7576 7582 -7597 0
c (0<=(aux1887 + aux1889 - aux1892))
-7582 7597 0
-7581 7595 0
-7576 7597 0
-7576 -7582 7595 0
-7576 -7581 7593 0
-7575 7595 0
-7575 -7582 7593 0
-7575 -7581 7592 0
c ((SATLiteral(1051) - aux1893 + SATLiteral(946))<=0)
-946 -7599 0
-1051 -7599 0
-1051 -946 -7600 0
c (0<=(SATLiteral(1051) - aux1893 + SATLiteral(946)))
946 7600 0
1051 7600 0
1051 946 7599 0
c ((SATLiteral(1066) - aux1894 + SATLiteral(931))<=0)
-931 -7602 0
-1066 -7602 0
-1066 -931 -7603 0
c (0<=(SATLiteral(1066) - aux1894 + SATLiteral(931)))
931 7603 0
1066 7603 0
1066 931 7602 0
c (( - aux1895 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7605 0
-1186 -7605 0
-1186 -916 -7606 0
c (0<=( - aux1895 + SATLiteral(1186) + SATLiteral(916)))
916 7606 0
1186 7606 0
1186 916 7605 0
c (( - aux1896 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7608 0
-1201 -7608 0
-1201 -1216 -7609 0
c (0<=( - aux1896 + SATLiteral(1201) + SATLiteral(1216)))
1216 7609 0
1201 7609 0
1201 1216 7608 0
c ((SATLiteral(1081) + aux1896 - aux1897)<=0)
7608 -7611 0
7609 -7612 0
-1081 -7611 0
-1081 7608 -7612 0
-1081 7609 -7614 0
c (0<=(SATLiteral(1081) + aux1896 - aux1897))
-7609 7614 0
-7608 7612 0
1081 7614 0
1081 -7609 7612 0
1081 -7608 7611 0
c ((aux1893 + aux1895 - aux1898)<=0)
7605 -7616 0
7606 -7617 0
7599 -7616 0
7599 7605 -7617 0
7599 7606 -7619 0
7600 -7617 0
7600 7605 -7619 0
7600 7606 -7621 0
c (0<=(aux1893 + aux1895 - aux1898))
-7606 7621 0
-7605 7619 0
-7600 7621 0
-7600 -7606 7619 0
-7600 -7605 7617 0
-7599 7619 0
-7599 -7606 7617 0
-7599 -7605 7616 0
c ((SATLiteral(-1050) - aux1899 + SATLiteral(-945))<=0)
945 -7623 0
1050 -7623 0
1050 945 -7624 0
c (0<=(SATLiteral(-1050) - aux1899 + SATLiteral(-945)))
-945 7624 0
-1050 7624 0
-1050 -945 7623 0
c ((SATLiteral(-1065) - aux1900 + SATLiteral(-930))<=0)
930 -7626 0
1065 -7626 0
1065 930 -7627 0
c (0<=(SATLiteral(-1065) - aux1900 + SATLiteral(-930)))
-930 7627 0
-1065 7627 0
-1065 -930 7626 0
c (( - aux1901 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7629 0
1185 -7629 0
1185 915 -7630 0
c (0<=( - aux1901 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7630 0
-1185 7630 0
-1185 -915 7629 0
c (( - aux1902 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7632 0
1200 -7632 0
1200 1215 -7633 0
c (0<=( - aux1902 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7633 0
-1200 7633 0
-1200 -1215 7632 0
c ((SATLiteral(-1080) + aux1902 - aux1903)<=0)
7632 -7635 0
7633 -7636 0
1080 -7635 0
1080 7632 -7636 0
1080 7633 -7638 0
c (0<=(SATLiteral(-1080) + aux1902 - aux1903))
-7633 7638 0
-7632 7636 0
-1080 7638 0
-1080 -7633 7636 0
-1080 -7632 7635 0
c ((aux1899 + aux1901 - aux1904)<=0)
7629 -7640 0
7630 -7641 0
7623 -7640 0
7623 7629 -7641 0
7623 7630 -7643 0
7624 -7641 0
7624 7629 -7643 0
7624 7630 -7645 0
c (0<=(aux1899 + aux1901 - aux1904))
-7630 7645 0
-7629 7643 0
-7624 7645 0
-7624 -7630 7643 0
-7624 -7629 7641 0
-7623 7643 0
-7623 -7630 7641 0
-7623 -7629 7640 0
