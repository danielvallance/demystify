p cnf 8662 42676                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1273'
c Var 'sum_hint_00001' direct represents '1' with '1273'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1273'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1274'
c Var 'sum_hint_00002' direct represents '1' with '1274'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1274'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1275'
c Var 'sum_hint_00003' direct represents '1' with '1275'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1275'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1276'
c Var 'sum_hint_00004' direct represents '1' with '1276'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1276'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1277'
c Var 'sum_hint_00005' direct represents '1' with '1277'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1277'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1278'
c Var 'sum_hint_00006' direct represents '1' with '1278'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1278'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1279'
c Var 'sum_hint_00007' direct represents '1' with '1279'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1279'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1280'
c Var 'sum_hint_00008' direct represents '1' with '1280'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1280'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1281'
c Var 'sum_hint_00009' direct represents '1' with '1281'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1281'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1282'
c Var 'sum_hint_00010' direct represents '1' with '1282'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1282'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1283'
c Var 'sum_hint_00011' direct represents '1' with '1283'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1283'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1284'
c Var 'sum_hint_00012' direct represents '1' with '1284'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1284'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1285'
c Var 'sum_hint_00013' direct represents '1' with '1285'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1285'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1286'
c Var 'sum_hint_00014' direct represents '1' with '1286'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1286'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1287'
c Var 'sum_hint_00015' direct represents '1' with '1287'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1287'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1288'
c Var 'sum_hint_00016' direct represents '1' with '1288'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1288'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1289'
c Var 'sum_hint_00017' direct represents '1' with '1289'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1289'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1290'
c Var 'sum_hint_00018' direct represents '1' with '1290'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1290'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1291'
c Var 'sum_hint_00019' direct represents '1' with '1291'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1291'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1292'
c Var 'sum_hint_00020' direct represents '1' with '1292'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1292'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1293'
c Var 'sum_hint_00021' direct represents '1' with '1293'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1293'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1294'
c Var 'sum_hint_00022' direct represents '1' with '1294'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1294'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1295'
c Var 'sum_hint_00023' direct represents '1' with '1295'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1295'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1296'
c Var 'sum_hint_00024' direct represents '1' with '1296'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1296'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1297'
c Var 'sum_hint_00025' direct represents '1' with '1297'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1297'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1298'
c Var 'sum_hint_00026' direct represents '1' with '1298'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1298'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1299'
c Var 'sum_hint_00027' direct represents '1' with '1299'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1299'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1300'
c Var 'sum_hint_00028' direct represents '1' with '1300'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1300'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1301'
c Var 'sum_hint_00029' direct represents '1' with '1301'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1301'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00002_00001 + x_00001_00001)=tv=11))
c Var 'aux0' direct represents '0' with '-1302'
c Var 'aux0' direct represents '1' with '1302'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1302'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003 + x_00001_00002)=tv=13))
c Var 'aux1' direct represents '0' with '-1303'
c Var 'aux1' direct represents '1' with '1303'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1303'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00002_00004 + x_00002_00005 + x_00001_00003 + x_00001_00004)=tv=19))
c Var 'aux2' direct represents '0' with '-1304'
c Var 'aux2' direct represents '1' with '1304'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1304'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006 + x_00001_00007)=tv=17))
c Var 'aux3' direct represents '0' with '-1305'
c Var 'aux3' direct represents '1' with '1305'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1305'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00008 + x_00002_00009 + x_00001_00008 + x_00001_00009)=tv=21))
c Var 'aux4' direct represents '0' with '-1306'
c Var 'aux4' direct represents '1' with '1306'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1306'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00006 + x_00002_00007)=tv=9))
c Var 'aux5' direct represents '0' with '-1307'
c Var 'aux5' direct represents '1' with '1307'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1307'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002)=tv=17))
c Var 'aux6' direct represents '0' with '-1308'
c Var 'aux6' direct represents '1' with '1308'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1308'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00007_00003 + x_00007_00004 + x_00003_00003 + x_00004_00003 + x_00005_00003 + x_00006_00003)=tv=33))
c Var 'aux7' direct represents '0' with '-1309'
c Var 'aux7' direct represents '1' with '1309'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1309'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00004 + x_00003_00005 + x_00004_00004)=tv=18))
c Var 'aux8' direct represents '0' with '-1310'
c Var 'aux8' direct represents '1' with '1310'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1310'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00007_00007 + x_00003_00006 + x_00003_00007 + x_00004_00007 + x_00005_00007 + x_00006_00007)=tv=24))
c Var 'aux9' direct represents '0' with '-1311'
c Var 'aux9' direct represents '1' with '1311'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1311'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00003_00008 + x_00003_00009)=tv=8))
c Var 'aux10' direct represents '0' with '-1312'
c Var 'aux10' direct represents '1' with '1312'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1312'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002)=tv=3))
c Var 'aux11' direct represents '0' with '-1313'
c Var 'aux11' direct represents '1' with '1313'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1313'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00005 + x_00004_00006)=tv=10))
c Var 'aux12' direct represents '0' with '-1314'
c Var 'aux12' direct represents '1' with '1314'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1314'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008)=tv=12))
c Var 'aux13' direct represents '0' with '-1315'
c Var 'aux13' direct represents '1' with '1315'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1315'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009)=tv=10))
c Var 'aux14' direct represents '0' with '-1316'
c Var 'aux14' direct represents '1' with '1316'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1316'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00001 + x_00006_00001)=tv=13))
c Var 'aux15' direct represents '0' with '-1317'
c Var 'aux15' direct represents '1' with '1317'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1317'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002)=tv=11))
c Var 'aux16' direct represents '0' with '-1318'
c Var 'aux16' direct represents '1' with '1318'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1318'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00005_00004 + x_00005_00005 + x_00005_00006)=tv=14))
c Var 'aux17' direct represents '0' with '-1319'
c Var 'aux17' direct represents '1' with '1319'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1319'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00006_00004 + x_00006_00005)=tv=9))
c Var 'aux18' direct represents '0' with '-1320'
c Var 'aux18' direct represents '1' with '1320'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1320'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00005 + x_00007_00006 + x_00006_00006)=tv=19))
c Var 'aux19' direct represents '0' with '-1321'
c Var 'aux19' direct represents '1' with '1321'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1321'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00006_00008 + x_00006_00009)=tv=10))
c Var 'aux20' direct represents '0' with '-1322'
c Var 'aux20' direct represents '1' with '1322'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1322'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002)=tv=7))
c Var 'aux21' direct represents '0' with '-1323'
c Var 'aux21' direct represents '1' with '1323'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1323'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009)=tv=7))
c Var 'aux22' direct represents '0' with '-1324'
c Var 'aux22' direct represents '1' with '1324'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1324'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00009_00001 + x_00009_00002)=tv=17))
c Var 'aux23' direct represents '0' with '-1325'
c Var 'aux23' direct represents '1' with '1325'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1325'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004)=tv=10))
c Var 'aux24' direct represents '0' with '-1326'
c Var 'aux24' direct represents '1' with '1326'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1326'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00005 + x_00008_00006 + x_00009_00006 + x_00009_00007)=tv=24))
c Var 'aux25' direct represents '0' with '-1327'
c Var 'aux25' direct represents '1' with '1327'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1327'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008 + x_00009_00008)=tv=13))
c Var 'aux26' direct represents '0' with '-1328'
c Var 'aux26' direct represents '1' with '1328'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1328'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00009)=tv=13))
c Var 'aux27' direct represents '0' with '-1329'
c Var 'aux27' direct represents '1' with '1329'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1329'
c Encoding variable: aux28 with domain: bool (representing constraint ((x_00009_00003 + x_00009_00004 + x_00009_00005)=tv=13))
c Var 'aux28' direct represents '0' with '-1330'
c Var 'aux28' direct represents '1' with '1330'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1330'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00002_00001 != x_00001_00001))
c Var 'aux29' direct represents '0' with '-1331'
c Var 'aux29' direct represents '1' with '1331'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1331'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00002_00006 != x_00002_00007))
c Var 'aux30' direct represents '0' with '-1332'
c Var 'aux30' direct represents '1' with '1332'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1332'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00003_00001 != x_00003_00002))
c Var 'aux31' direct represents '0' with '-1333'
c Var 'aux31' direct represents '1' with '1333'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1333'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00003_00008 != x_00003_00009))
c Var 'aux32' direct represents '0' with '-1334'
c Var 'aux32' direct represents '1' with '1334'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1334'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00004_00001 != x_00004_00002))
c Var 'aux33' direct represents '0' with '-1335'
c Var 'aux33' direct represents '1' with '1335'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1335'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00004_00005 != x_00004_00006))
c Var 'aux34' direct represents '0' with '-1336'
c Var 'aux34' direct represents '1' with '1336'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1336'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00004_00008 != x_00005_00008))
c Var 'aux35' direct represents '0' with '-1337'
c Var 'aux35' direct represents '1' with '1337'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1337'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00004_00009 != x_00005_00009))
c Var 'aux36' direct represents '0' with '-1338'
c Var 'aux36' direct represents '1' with '1338'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1338'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00005_00001 != x_00006_00001))
c Var 'aux37' direct represents '0' with '-1339'
c Var 'aux37' direct represents '1' with '1339'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1339'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00005_00002 != x_00006_00002))
c Var 'aux38' direct represents '0' with '-1340'
c Var 'aux38' direct represents '1' with '1340'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1340'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00006_00004 != x_00006_00005))
c Var 'aux39' direct represents '0' with '-1341'
c Var 'aux39' direct represents '1' with '1341'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1341'
c Encoding variable: aux40 with domain: bool (representing constraint (x_00006_00008 != x_00006_00009))
c Var 'aux40' direct represents '0' with '-1342'
c Var 'aux40' direct represents '1' with '1342'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1342'
c Encoding variable: aux41 with domain: bool (representing constraint (x_00007_00001 != x_00007_00002))
c Var 'aux41' direct represents '0' with '-1343'
c Var 'aux41' direct represents '1' with '1343'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1343'
c Encoding variable: aux42 with domain: bool (representing constraint (x_00007_00008 != x_00007_00009))
c Var 'aux42' direct represents '0' with '-1344'
c Var 'aux42' direct represents '1' with '1344'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1344'
c Encoding variable: aux43 with domain: bool (representing constraint (x_00008_00003 != x_00008_00004))
c Var 'aux43' direct represents '0' with '-1345'
c Var 'aux43' direct represents '1' with '1345'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1345'
c Encoding variable: aux44 with domain: bool (representing constraint (x_00008_00009 != x_00009_00009))
c Var 'aux44' direct represents '0' with '-1346'
c Var 'aux44' direct represents '1' with '1346'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1346'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux45' direct represents '0' with '-1347'
c Var 'aux45' direct represents '1' with '1347'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1347'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux46' direct represents '0' with '-1348'
c Var 'aux46' direct represents '1' with '1348'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1348'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux47' direct represents '0' with '-1349'
c Var 'aux47' direct represents '1' with '1349'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1349'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux48' direct represents '0' with '-1350'
c Var 'aux48' direct represents '1' with '1350'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1350'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux49' direct represents '0' with '-1351'
c Var 'aux49' direct represents '1' with '1351'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1351'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux50' direct represents '0' with '-1352'
c Var 'aux50' direct represents '1' with '1352'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1352'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux51' direct represents '0' with '-1353'
c Var 'aux51' direct represents '1' with '1353'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1353'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux52' direct represents '0' with '-1354'
c Var 'aux52' direct represents '1' with '1354'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1354'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux53' direct represents '0' with '-1355'
c Var 'aux53' direct represents '1' with '1355'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1355'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux54' direct represents '0' with '-1356'
c Var 'aux54' direct represents '1' with '1356'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1356'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux55' direct represents '0' with '-1357'
c Var 'aux55' direct represents '1' with '1357'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1357'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux56' direct represents '0' with '-1358'
c Var 'aux56' direct represents '1' with '1358'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1358'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux57' direct represents '0' with '-1359'
c Var 'aux57' direct represents '1' with '1359'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1359'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux58' direct represents '0' with '-1360'
c Var 'aux58' direct represents '1' with '1360'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1360'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux59' direct represents '0' with '-1361'
c Var 'aux59' direct represents '1' with '1361'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1361'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux60' direct represents '0' with '-1362'
c Var 'aux60' direct represents '1' with '1362'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1362'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux61' direct represents '0' with '-1363'
c Var 'aux61' direct represents '1' with '1363'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1363'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux62' direct represents '0' with '-1364'
c Var 'aux62' direct represents '1' with '1364'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1364'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux63' direct represents '0' with '-1365'
c Var 'aux63' direct represents '1' with '1365'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1365'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux64' direct represents '0' with '-1366'
c Var 'aux64' direct represents '1' with '1366'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1366'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux65' direct represents '0' with '-1367'
c Var 'aux65' direct represents '1' with '1367'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1367'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux66' direct represents '0' with '-1368'
c Var 'aux66' direct represents '1' with '1368'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1368'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux67' direct represents '0' with '-1369'
c Var 'aux67' direct represents '1' with '1369'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1369'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux68' direct represents '0' with '-1370'
c Var 'aux68' direct represents '1' with '1370'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1370'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux69' direct represents '0' with '-1371'
c Var 'aux69' direct represents '1' with '1371'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1371'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux70' direct represents '0' with '-1372'
c Var 'aux70' direct represents '1' with '1372'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1372'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux71' direct represents '0' with '-1373'
c Var 'aux71' direct represents '1' with '1373'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1373'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux72' direct represents '0' with '-1374'
c Var 'aux72' direct represents '1' with '1374'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1374'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux73' direct represents '0' with '-1375'
c Var 'aux73' direct represents '1' with '1375'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1375'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux74' direct represents '0' with '-1376'
c Var 'aux74' direct represents '1' with '1376'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1376'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux75' direct represents '0' with '-1377'
c Var 'aux75' direct represents '1' with '1377'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1377'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux76' direct represents '0' with '-1378'
c Var 'aux76' direct represents '1' with '1378'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1378'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux77' direct represents '0' with '-1379'
c Var 'aux77' direct represents '1' with '1379'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1379'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux78' direct represents '0' with '-1380'
c Var 'aux78' direct represents '1' with '1380'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1380'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux79' direct represents '0' with '-1381'
c Var 'aux79' direct represents '1' with '1381'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1381'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux80' direct represents '0' with '-1382'
c Var 'aux80' direct represents '1' with '1382'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1382'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux81' direct represents '0' with '-1383'
c Var 'aux81' direct represents '1' with '1383'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1383'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux82' direct represents '0' with '-1384'
c Var 'aux82' direct represents '1' with '1384'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1384'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux83' direct represents '0' with '-1385'
c Var 'aux83' direct represents '1' with '1385'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1385'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux84' direct represents '0' with '-1386'
c Var 'aux84' direct represents '1' with '1386'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1386'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux85' direct represents '0' with '-1387'
c Var 'aux85' direct represents '1' with '1387'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1387'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux86' direct represents '0' with '-1388'
c Var 'aux86' direct represents '1' with '1388'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1388'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux87' direct represents '0' with '-1389'
c Var 'aux87' direct represents '1' with '1389'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1389'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux88' direct represents '0' with '-1390'
c Var 'aux88' direct represents '1' with '1390'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1390'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux89' direct represents '0' with '-1391'
c Var 'aux89' direct represents '1' with '1391'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1391'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux90' direct represents '0' with '-1392'
c Var 'aux90' direct represents '1' with '1392'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1392'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux91' direct represents '0' with '-1393'
c Var 'aux91' direct represents '1' with '1393'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1393'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux92' direct represents '0' with '-1394'
c Var 'aux92' direct represents '1' with '1394'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1394'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux93' direct represents '0' with '-1395'
c Var 'aux93' direct represents '1' with '1395'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1395'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux94' direct represents '0' with '-1396'
c Var 'aux94' direct represents '1' with '1396'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1396'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux95' direct represents '0' with '-1397'
c Var 'aux95' direct represents '1' with '1397'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1397'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux96' direct represents '0' with '-1398'
c Var 'aux96' direct represents '1' with '1398'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1398'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux97' direct represents '0' with '-1399'
c Var 'aux97' direct represents '1' with '1399'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1399'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux98' direct represents '0' with '-1400'
c Var 'aux98' direct represents '1' with '1400'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1400'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux99' direct represents '0' with '-1401'
c Var 'aux99' direct represents '1' with '1401'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1401'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux100' direct represents '0' with '-1402'
c Var 'aux100' direct represents '1' with '1402'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1402'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux101' direct represents '0' with '-1403'
c Var 'aux101' direct represents '1' with '1403'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1403'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux102' direct represents '0' with '-1404'
c Var 'aux102' direct represents '1' with '1404'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1404'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux103' direct represents '0' with '-1405'
c Var 'aux103' direct represents '1' with '1405'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1405'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux104' direct represents '0' with '-1406'
c Var 'aux104' direct represents '1' with '1406'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1406'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux105' direct represents '0' with '-1407'
c Var 'aux105' direct represents '1' with '1407'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1407'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux106' direct represents '0' with '-1408'
c Var 'aux106' direct represents '1' with '1408'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1408'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux107' direct represents '0' with '-1409'
c Var 'aux107' direct represents '1' with '1409'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1409'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux108' direct represents '0' with '-1410'
c Var 'aux108' direct represents '1' with '1410'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1410'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux109' direct represents '0' with '-1411'
c Var 'aux109' direct represents '1' with '1411'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1411'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux110' direct represents '0' with '-1412'
c Var 'aux110' direct represents '1' with '1412'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1412'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux111' direct represents '0' with '-1413'
c Var 'aux111' direct represents '1' with '1413'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1413'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux112' direct represents '0' with '-1414'
c Var 'aux112' direct represents '1' with '1414'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1414'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux113' direct represents '0' with '-1415'
c Var 'aux113' direct represents '1' with '1415'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1415'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux114' direct represents '0' with '-1416'
c Var 'aux114' direct represents '1' with '1416'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1416'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux115' direct represents '0' with '-1417'
c Var 'aux115' direct represents '1' with '1417'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1417'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux116' direct represents '0' with '-1418'
c Var 'aux116' direct represents '1' with '1418'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1418'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux117' direct represents '0' with '-1419'
c Var 'aux117' direct represents '1' with '1419'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1419'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux118' direct represents '0' with '-1420'
c Var 'aux118' direct represents '1' with '1420'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1420'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux119' direct represents '0' with '-1421'
c Var 'aux119' direct represents '1' with '1421'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1421'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux120' direct represents '0' with '-1422'
c Var 'aux120' direct represents '1' with '1422'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1422'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux121' direct represents '0' with '-1423'
c Var 'aux121' direct represents '1' with '1423'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1423'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux122' direct represents '0' with '-1424'
c Var 'aux122' direct represents '1' with '1424'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1424'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux123' direct represents '0' with '-1425'
c Var 'aux123' direct represents '1' with '1425'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1425'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux124' direct represents '0' with '-1426'
c Var 'aux124' direct represents '1' with '1426'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1426'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux125' direct represents '0' with '-1427'
c Var 'aux125' direct represents '1' with '1427'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1427'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux126' direct represents '0' with '-1428'
c Var 'aux126' direct represents '1' with '1428'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1428'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux127' direct represents '0' with '-1429'
c Var 'aux127' direct represents '1' with '1429'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1429'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux128' direct represents '0' with '-1430'
c Var 'aux128' direct represents '1' with '1430'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1430'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux129' direct represents '0' with '-1431'
c Var 'aux129' direct represents '1' with '1431'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1431'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux130' direct represents '0' with '-1432'
c Var 'aux130' direct represents '1' with '1432'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1432'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux131' direct represents '0' with '-1433'
c Var 'aux131' direct represents '1' with '1433'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1433'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux132' direct represents '0' with '-1434'
c Var 'aux132' direct represents '1' with '1434'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1434'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux133' direct represents '0' with '-1435'
c Var 'aux133' direct represents '1' with '1435'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1435'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux134' direct represents '0' with '-1436'
c Var 'aux134' direct represents '1' with '1436'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1436'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux135' direct represents '0' with '-1437'
c Var 'aux135' direct represents '1' with '1437'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1437'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux136' direct represents '0' with '-1438'
c Var 'aux136' direct represents '1' with '1438'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1438'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux137' direct represents '0' with '-1439'
c Var 'aux137' direct represents '1' with '1439'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1439'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux138' direct represents '0' with '-1440'
c Var 'aux138' direct represents '1' with '1440'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1440'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux139' direct represents '0' with '-1441'
c Var 'aux139' direct represents '1' with '1441'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1441'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux140' direct represents '0' with '-1442'
c Var 'aux140' direct represents '1' with '1442'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1442'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux141' direct represents '0' with '-1443'
c Var 'aux141' direct represents '1' with '1443'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1443'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux142' direct represents '0' with '-1444'
c Var 'aux142' direct represents '1' with '1444'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1444'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux143' direct represents '0' with '-1445'
c Var 'aux143' direct represents '1' with '1445'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1445'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux144' direct represents '0' with '-1446'
c Var 'aux144' direct represents '1' with '1446'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1446'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux145' direct represents '0' with '-1447'
c Var 'aux145' direct represents '1' with '1447'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1447'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux146' direct represents '0' with '-1448'
c Var 'aux146' direct represents '1' with '1448'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1448'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux147' direct represents '0' with '-1449'
c Var 'aux147' direct represents '1' with '1449'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1449'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux148' direct represents '0' with '-1450'
c Var 'aux148' direct represents '1' with '1450'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1450'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux149' direct represents '0' with '-1451'
c Var 'aux149' direct represents '1' with '1451'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1451'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux150' direct represents '0' with '-1452'
c Var 'aux150' direct represents '1' with '1452'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1452'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux151' direct represents '0' with '-1453'
c Var 'aux151' direct represents '1' with '1453'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1453'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux152' direct represents '0' with '-1454'
c Var 'aux152' direct represents '1' with '1454'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1454'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux153' direct represents '0' with '-1455'
c Var 'aux153' direct represents '1' with '1455'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1455'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux154' direct represents '0' with '-1456'
c Var 'aux154' direct represents '1' with '1456'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1456'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux155' direct represents '0' with '-1457'
c Var 'aux155' direct represents '1' with '1457'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1457'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux156' direct represents '0' with '-1458'
c Var 'aux156' direct represents '1' with '1458'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1458'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux157' direct represents '0' with '-1459'
c Var 'aux157' direct represents '1' with '1459'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1459'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux158' direct represents '0' with '-1460'
c Var 'aux158' direct represents '1' with '1460'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1460'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux159' direct represents '0' with '-1461'
c Var 'aux159' direct represents '1' with '1461'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1461'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux160' direct represents '0' with '-1462'
c Var 'aux160' direct represents '1' with '1462'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1462'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux161' direct represents '0' with '-1463'
c Var 'aux161' direct represents '1' with '1463'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1463'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux162' direct represents '0' with '-1464'
c Var 'aux162' direct represents '1' with '1464'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1464'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux163' direct represents '0' with '-1465'
c Var 'aux163' direct represents '1' with '1465'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1465'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux164' direct represents '0' with '-1466'
c Var 'aux164' direct represents '1' with '1466'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1466'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux165' direct represents '0' with '-1467'
c Var 'aux165' direct represents '1' with '1467'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1467'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux166' direct represents '0' with '-1468'
c Var 'aux166' direct represents '1' with '1468'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1468'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux167' direct represents '0' with '-1469'
c Var 'aux167' direct represents '1' with '1469'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1469'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux168' direct represents '0' with '-1470'
c Var 'aux168' direct represents '1' with '1470'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1470'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux169' direct represents '0' with '-1471'
c Var 'aux169' direct represents '1' with '1471'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1471'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux170' direct represents '0' with '-1472'
c Var 'aux170' direct represents '1' with '1472'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1472'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux171' direct represents '0' with '-1473'
c Var 'aux171' direct represents '1' with '1473'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1473'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux172' direct represents '0' with '-1474'
c Var 'aux172' direct represents '1' with '1474'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1474'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux173' direct represents '0' with '-1475'
c Var 'aux173' direct represents '1' with '1475'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1475'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux174' direct represents '0' with '-1476'
c Var 'aux174' direct represents '1' with '1476'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1476'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux175' direct represents '0' with '-1477'
c Var 'aux175' direct represents '1' with '1477'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1477'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux176' direct represents '0' with '-1478'
c Var 'aux176' direct represents '1' with '1478'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1478'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux177' direct represents '0' with '-1479'
c Var 'aux177' direct represents '1' with '1479'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1479'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux178' direct represents '0' with '-1480'
c Var 'aux178' direct represents '1' with '1480'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1480'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux179' direct represents '0' with '-1481'
c Var 'aux179' direct represents '1' with '1481'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1481'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux180' direct represents '0' with '-1482'
c Var 'aux180' direct represents '1' with '1482'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1482'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux181' direct represents '0' with '-1483'
c Var 'aux181' direct represents '1' with '1483'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1483'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux182' direct represents '0' with '-1484'
c Var 'aux182' direct represents '1' with '1484'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1484'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux183' direct represents '0' with '-1485'
c Var 'aux183' direct represents '1' with '1485'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1485'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux184' direct represents '0' with '-1486'
c Var 'aux184' direct represents '1' with '1486'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1486'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux185' direct represents '0' with '-1487'
c Var 'aux185' direct represents '1' with '1487'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1487'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux186' direct represents '0' with '-1488'
c Var 'aux186' direct represents '1' with '1488'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1488'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux187' direct represents '0' with '-1489'
c Var 'aux187' direct represents '1' with '1489'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1489'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux188' direct represents '0' with '-1490'
c Var 'aux188' direct represents '1' with '1490'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1490'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux189' direct represents '0' with '-1491'
c Var 'aux189' direct represents '1' with '1491'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1491'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux190' direct represents '0' with '-1492'
c Var 'aux190' direct represents '1' with '1492'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1492'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux191' direct represents '0' with '-1493'
c Var 'aux191' direct represents '1' with '1493'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1493'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux192' direct represents '0' with '-1494'
c Var 'aux192' direct represents '1' with '1494'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1494'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux193' direct represents '0' with '-1495'
c Var 'aux193' direct represents '1' with '1495'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1495'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux194' direct represents '0' with '-1496'
c Var 'aux194' direct represents '1' with '1496'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1496'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux195' direct represents '0' with '-1497'
c Var 'aux195' direct represents '1' with '1497'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1497'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux196' direct represents '0' with '-1498'
c Var 'aux196' direct represents '1' with '1498'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1498'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux197' direct represents '0' with '-1499'
c Var 'aux197' direct represents '1' with '1499'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1499'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux198' direct represents '0' with '-1500'
c Var 'aux198' direct represents '1' with '1500'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1500'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux199' direct represents '0' with '-1501'
c Var 'aux199' direct represents '1' with '1501'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1501'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux200' direct represents '0' with '-1502'
c Var 'aux200' direct represents '1' with '1502'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1502'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux201' direct represents '0' with '-1503'
c Var 'aux201' direct represents '1' with '1503'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1503'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux202' direct represents '0' with '-1504'
c Var 'aux202' direct represents '1' with '1504'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1504'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux203' direct represents '0' with '-1505'
c Var 'aux203' direct represents '1' with '1505'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1505'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux204' direct represents '0' with '-1506'
c Var 'aux204' direct represents '1' with '1506'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1506'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux205' direct represents '0' with '-1507'
c Var 'aux205' direct represents '1' with '1507'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1507'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux206' direct represents '0' with '-1508'
c Var 'aux206' direct represents '1' with '1508'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1508'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux207' direct represents '0' with '-1509'
c Var 'aux207' direct represents '1' with '1509'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1509'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux208' direct represents '0' with '-1510'
c Var 'aux208' direct represents '1' with '1510'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1510'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux209' direct represents '0' with '-1511'
c Var 'aux209' direct represents '1' with '1511'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1511'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux210' direct represents '0' with '-1512'
c Var 'aux210' direct represents '1' with '1512'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1512'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux211' direct represents '0' with '-1513'
c Var 'aux211' direct represents '1' with '1513'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1513'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux212' direct represents '0' with '-1514'
c Var 'aux212' direct represents '1' with '1514'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1514'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux213' direct represents '0' with '-1515'
c Var 'aux213' direct represents '1' with '1515'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1515'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux214' direct represents '0' with '-1516'
c Var 'aux214' direct represents '1' with '1516'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1516'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux215' direct represents '0' with '-1517'
c Var 'aux215' direct represents '1' with '1517'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1517'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux216' direct represents '0' with '-1518'
c Var 'aux216' direct represents '1' with '1518'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1518'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux217' direct represents '0' with '-1519'
c Var 'aux217' direct represents '1' with '1519'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1519'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux218' direct represents '0' with '-1520'
c Var 'aux218' direct represents '1' with '1520'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1520'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux219' direct represents '0' with '-1521'
c Var 'aux219' direct represents '1' with '1521'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1521'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux220' direct represents '0' with '-1522'
c Var 'aux220' direct represents '1' with '1522'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1522'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux221' direct represents '0' with '-1523'
c Var 'aux221' direct represents '1' with '1523'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1523'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux222' direct represents '0' with '-1524'
c Var 'aux222' direct represents '1' with '1524'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1524'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux223' direct represents '0' with '-1525'
c Var 'aux223' direct represents '1' with '1525'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1525'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux224' direct represents '0' with '-1526'
c Var 'aux224' direct represents '1' with '1526'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1526'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux225' direct represents '0' with '-1527'
c Var 'aux225' direct represents '1' with '1527'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1527'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux226' direct represents '0' with '-1528'
c Var 'aux226' direct represents '1' with '1528'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1528'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux227' direct represents '0' with '-1529'
c Var 'aux227' direct represents '1' with '1529'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1529'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux228' direct represents '0' with '-1530'
c Var 'aux228' direct represents '1' with '1530'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1530'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux229' direct represents '0' with '-1531'
c Var 'aux229' direct represents '1' with '1531'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1531'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux230' direct represents '0' with '-1532'
c Var 'aux230' direct represents '1' with '1532'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1532'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux231' direct represents '0' with '-1533'
c Var 'aux231' direct represents '1' with '1533'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1533'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux232' direct represents '0' with '-1534'
c Var 'aux232' direct represents '1' with '1534'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1534'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux233' direct represents '0' with '-1535'
c Var 'aux233' direct represents '1' with '1535'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1535'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux234' direct represents '0' with '-1536'
c Var 'aux234' direct represents '1' with '1536'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1536'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux235' direct represents '0' with '-1537'
c Var 'aux235' direct represents '1' with '1537'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1537'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux236' direct represents '0' with '-1538'
c Var 'aux236' direct represents '1' with '1538'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1538'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux237' direct represents '0' with '-1539'
c Var 'aux237' direct represents '1' with '1539'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1539'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux238' direct represents '0' with '-1540'
c Var 'aux238' direct represents '1' with '1540'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1540'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux239' direct represents '0' with '-1541'
c Var 'aux239' direct represents '1' with '1541'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1541'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux240' direct represents '0' with '-1542'
c Var 'aux240' direct represents '1' with '1542'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1542'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux241' direct represents '0' with '-1543'
c Var 'aux241' direct represents '1' with '1543'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1543'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux242' direct represents '0' with '-1544'
c Var 'aux242' direct represents '1' with '1544'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1544'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux243' direct represents '0' with '-1545'
c Var 'aux243' direct represents '1' with '1545'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1545'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux244' direct represents '0' with '-1546'
c Var 'aux244' direct represents '1' with '1546'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1546'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux245' direct represents '0' with '-1547'
c Var 'aux245' direct represents '1' with '1547'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1547'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux246' direct represents '0' with '-1548'
c Var 'aux246' direct represents '1' with '1548'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1548'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux247' direct represents '0' with '-1549'
c Var 'aux247' direct represents '1' with '1549'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1549'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux248' direct represents '0' with '-1550'
c Var 'aux248' direct represents '1' with '1550'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1550'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux249' direct represents '0' with '-1551'
c Var 'aux249' direct represents '1' with '1551'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1551'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux250' direct represents '0' with '-1552'
c Var 'aux250' direct represents '1' with '1552'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1552'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux251' direct represents '0' with '-1553'
c Var 'aux251' direct represents '1' with '1553'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1553'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux252' direct represents '0' with '-1554'
c Var 'aux252' direct represents '1' with '1554'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1554'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux253' direct represents '0' with '-1555'
c Var 'aux253' direct represents '1' with '1555'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1555'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux254' direct represents '0' with '-1556'
c Var 'aux254' direct represents '1' with '1556'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1556'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux255' direct represents '0' with '-1557'
c Var 'aux255' direct represents '1' with '1557'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1557'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux256' direct represents '0' with '-1558'
c Var 'aux256' direct represents '1' with '1558'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1558'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux257' direct represents '0' with '-1559'
c Var 'aux257' direct represents '1' with '1559'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1559'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux258' direct represents '0' with '-1560'
c Var 'aux258' direct represents '1' with '1560'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1560'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux259' direct represents '0' with '-1561'
c Var 'aux259' direct represents '1' with '1561'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1561'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux260' direct represents '0' with '-1562'
c Var 'aux260' direct represents '1' with '1562'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1562'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux261' direct represents '0' with '-1563'
c Var 'aux261' direct represents '1' with '1563'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1563'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux262' direct represents '0' with '-1564'
c Var 'aux262' direct represents '1' with '1564'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1564'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux263' direct represents '0' with '-1565'
c Var 'aux263' direct represents '1' with '1565'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1565'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux264' direct represents '0' with '-1566'
c Var 'aux264' direct represents '1' with '1566'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1566'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux265' direct represents '0' with '-1567'
c Var 'aux265' direct represents '1' with '1567'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1567'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux266' direct represents '0' with '-1568'
c Var 'aux266' direct represents '1' with '1568'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1568'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux267' direct represents '0' with '-1569'
c Var 'aux267' direct represents '1' with '1569'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1569'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux268' direct represents '0' with '-1570'
c Var 'aux268' direct represents '1' with '1570'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1570'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux269' direct represents '0' with '-1571'
c Var 'aux269' direct represents '1' with '1571'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1571'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux270' direct represents '0' with '-1572'
c Var 'aux270' direct represents '1' with '1572'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1572'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux271' direct represents '0' with '-1573'
c Var 'aux271' direct represents '1' with '1573'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1573'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux272' direct represents '0' with '-1574'
c Var 'aux272' direct represents '1' with '1574'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1574'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux273' direct represents '0' with '-1575'
c Var 'aux273' direct represents '1' with '1575'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1575'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux274' direct represents '0' with '-1576'
c Var 'aux274' direct represents '1' with '1576'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1576'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux275' direct represents '0' with '-1577'
c Var 'aux275' direct represents '1' with '1577'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1577'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux276' direct represents '0' with '-1578'
c Var 'aux276' direct represents '1' with '1578'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1578'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux277' direct represents '0' with '-1579'
c Var 'aux277' direct represents '1' with '1579'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1579'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux278' direct represents '0' with '-1580'
c Var 'aux278' direct represents '1' with '1580'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1580'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux279' direct represents '0' with '-1581'
c Var 'aux279' direct represents '1' with '1581'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1581'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux280' direct represents '0' with '-1582'
c Var 'aux280' direct represents '1' with '1582'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1582'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux281' direct represents '0' with '-1583'
c Var 'aux281' direct represents '1' with '1583'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1583'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux282' direct represents '0' with '-1584'
c Var 'aux282' direct represents '1' with '1584'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1584'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux283' direct represents '0' with '-1585'
c Var 'aux283' direct represents '1' with '1585'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1585'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux284' direct represents '0' with '-1586'
c Var 'aux284' direct represents '1' with '1586'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1586'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux285' direct represents '0' with '-1587'
c Var 'aux285' direct represents '1' with '1587'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1587'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux286' direct represents '0' with '-1588'
c Var 'aux286' direct represents '1' with '1588'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1588'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux287' direct represents '0' with '-1589'
c Var 'aux287' direct represents '1' with '1589'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1589'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00001_00002=1) + (x_00002_00002=1) + (x_00002_00003=1))<=1))
c Var 'aux288' direct represents '0' with '-1590'
c Var 'aux288' direct represents '1' with '1590'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1590'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00001_00002=2) + (x_00002_00002=2) + (x_00002_00003=2))<=1))
c Var 'aux289' direct represents '0' with '-1591'
c Var 'aux289' direct represents '1' with '1591'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1591'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00001_00002=3) + (x_00002_00002=3) + (x_00002_00003=3))<=1))
c Var 'aux290' direct represents '0' with '-1592'
c Var 'aux290' direct represents '1' with '1592'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1592'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00001_00002=4) + (x_00002_00002=4) + (x_00002_00003=4))<=1))
c Var 'aux291' direct represents '0' with '-1593'
c Var 'aux291' direct represents '1' with '1593'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1593'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00001_00002=5) + (x_00002_00002=5) + (x_00002_00003=5))<=1))
c Var 'aux292' direct represents '0' with '-1594'
c Var 'aux292' direct represents '1' with '1594'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1594'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00001_00002=6) + (x_00002_00002=6) + (x_00002_00003=6))<=1))
c Var 'aux293' direct represents '0' with '-1595'
c Var 'aux293' direct represents '1' with '1595'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1595'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00001_00002=7) + (x_00002_00002=7) + (x_00002_00003=7))<=1))
c Var 'aux294' direct represents '0' with '-1596'
c Var 'aux294' direct represents '1' with '1596'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1596'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00001_00002=8) + (x_00002_00002=8) + (x_00002_00003=8))<=1))
c Var 'aux295' direct represents '0' with '-1597'
c Var 'aux295' direct represents '1' with '1597'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1597'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00001_00002=9) + (x_00002_00002=9) + (x_00002_00003=9))<=1))
c Var 'aux296' direct represents '0' with '-1598'
c Var 'aux296' direct represents '1' with '1598'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1598'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00001_00003=1) + (x_00001_00004=1) + (x_00002_00004=1) + (x_00002_00005=1))<=1))
c Var 'aux297' direct represents '0' with '-1599'
c Var 'aux297' direct represents '1' with '1599'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1599'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00001_00003=2) + (x_00001_00004=2) + (x_00002_00004=2) + (x_00002_00005=2))<=1))
c Var 'aux298' direct represents '0' with '-1600'
c Var 'aux298' direct represents '1' with '1600'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1600'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00001_00003=3) + (x_00001_00004=3) + (x_00002_00004=3) + (x_00002_00005=3))<=1))
c Var 'aux299' direct represents '0' with '-1601'
c Var 'aux299' direct represents '1' with '1601'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1601'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00001_00003=4) + (x_00001_00004=4) + (x_00002_00004=4) + (x_00002_00005=4))<=1))
c Var 'aux300' direct represents '0' with '-1602'
c Var 'aux300' direct represents '1' with '1602'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1602'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00001_00003=5) + (x_00001_00004=5) + (x_00002_00004=5) + (x_00002_00005=5))<=1))
c Var 'aux301' direct represents '0' with '-1603'
c Var 'aux301' direct represents '1' with '1603'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1603'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00001_00003=6) + (x_00001_00004=6) + (x_00002_00004=6) + (x_00002_00005=6))<=1))
c Var 'aux302' direct represents '0' with '-1604'
c Var 'aux302' direct represents '1' with '1604'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1604'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00001_00003=7) + (x_00001_00004=7) + (x_00002_00004=7) + (x_00002_00005=7))<=1))
c Var 'aux303' direct represents '0' with '-1605'
c Var 'aux303' direct represents '1' with '1605'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1605'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00001_00003=8) + (x_00001_00004=8) + (x_00002_00004=8) + (x_00002_00005=8))<=1))
c Var 'aux304' direct represents '0' with '-1606'
c Var 'aux304' direct represents '1' with '1606'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1606'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00001_00003=9) + (x_00001_00004=9) + (x_00002_00004=9) + (x_00002_00005=9))<=1))
c Var 'aux305' direct represents '0' with '-1607'
c Var 'aux305' direct represents '1' with '1607'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1607'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1))<=1))
c Var 'aux306' direct represents '0' with '-1608'
c Var 'aux306' direct represents '1' with '1608'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1608'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2))<=1))
c Var 'aux307' direct represents '0' with '-1609'
c Var 'aux307' direct represents '1' with '1609'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1609'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3))<=1))
c Var 'aux308' direct represents '0' with '-1610'
c Var 'aux308' direct represents '1' with '1610'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1610'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4))<=1))
c Var 'aux309' direct represents '0' with '-1611'
c Var 'aux309' direct represents '1' with '1611'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1611'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5))<=1))
c Var 'aux310' direct represents '0' with '-1612'
c Var 'aux310' direct represents '1' with '1612'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1612'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6))<=1))
c Var 'aux311' direct represents '0' with '-1613'
c Var 'aux311' direct represents '1' with '1613'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1613'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7))<=1))
c Var 'aux312' direct represents '0' with '-1614'
c Var 'aux312' direct represents '1' with '1614'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1614'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8))<=1))
c Var 'aux313' direct represents '0' with '-1615'
c Var 'aux313' direct represents '1' with '1615'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1615'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9))<=1))
c Var 'aux314' direct represents '0' with '-1616'
c Var 'aux314' direct represents '1' with '1616'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1616'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00008=1) + (x_00002_00009=1))<=1))
c Var 'aux315' direct represents '0' with '-1617'
c Var 'aux315' direct represents '1' with '1617'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1617'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00008=2) + (x_00002_00009=2))<=1))
c Var 'aux316' direct represents '0' with '-1618'
c Var 'aux316' direct represents '1' with '1618'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1618'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00008=3) + (x_00002_00009=3))<=1))
c Var 'aux317' direct represents '0' with '-1619'
c Var 'aux317' direct represents '1' with '1619'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1619'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00008=4) + (x_00002_00009=4))<=1))
c Var 'aux318' direct represents '0' with '-1620'
c Var 'aux318' direct represents '1' with '1620'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1620'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00008=5) + (x_00002_00009=5))<=1))
c Var 'aux319' direct represents '0' with '-1621'
c Var 'aux319' direct represents '1' with '1621'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1621'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00008=6) + (x_00002_00009=6))<=1))
c Var 'aux320' direct represents '0' with '-1622'
c Var 'aux320' direct represents '1' with '1622'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1622'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00008=7) + (x_00002_00009=7))<=1))
c Var 'aux321' direct represents '0' with '-1623'
c Var 'aux321' direct represents '1' with '1623'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1623'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00008=8) + (x_00002_00009=8))<=1))
c Var 'aux322' direct represents '0' with '-1624'
c Var 'aux322' direct represents '1' with '1624'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1624'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00008=9) + (x_00002_00009=9))<=1))
c Var 'aux323' direct represents '0' with '-1625'
c Var 'aux323' direct represents '1' with '1625'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1625'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00005_00003=1))<=1))
c Var 'aux324' direct represents '0' with '-1626'
c Var 'aux324' direct represents '1' with '1626'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1626'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00005_00003=2))<=1))
c Var 'aux325' direct represents '0' with '-1627'
c Var 'aux325' direct represents '1' with '1627'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1627'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00005_00003=3))<=1))
c Var 'aux326' direct represents '0' with '-1628'
c Var 'aux326' direct represents '1' with '1628'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1628'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00005_00003=4))<=1))
c Var 'aux327' direct represents '0' with '-1629'
c Var 'aux327' direct represents '1' with '1629'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1629'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00005_00003=5))<=1))
c Var 'aux328' direct represents '0' with '-1630'
c Var 'aux328' direct represents '1' with '1630'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1630'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00005_00003=6))<=1))
c Var 'aux329' direct represents '0' with '-1631'
c Var 'aux329' direct represents '1' with '1631'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1631'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00005_00003=7))<=1))
c Var 'aux330' direct represents '0' with '-1632'
c Var 'aux330' direct represents '1' with '1632'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1632'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00005_00003=8))<=1))
c Var 'aux331' direct represents '0' with '-1633'
c Var 'aux331' direct represents '1' with '1633'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1633'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00005_00003=9))<=1))
c Var 'aux332' direct represents '0' with '-1634'
c Var 'aux332' direct represents '1' with '1634'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1634'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00004_00004=1))<=1))
c Var 'aux333' direct represents '0' with '-1635'
c Var 'aux333' direct represents '1' with '1635'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1635'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00004_00004=2))<=1))
c Var 'aux334' direct represents '0' with '-1636'
c Var 'aux334' direct represents '1' with '1636'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1636'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00004_00004=3))<=1))
c Var 'aux335' direct represents '0' with '-1637'
c Var 'aux335' direct represents '1' with '1637'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1637'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00004_00004=4))<=1))
c Var 'aux336' direct represents '0' with '-1638'
c Var 'aux336' direct represents '1' with '1638'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1638'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00004_00004=5))<=1))
c Var 'aux337' direct represents '0' with '-1639'
c Var 'aux337' direct represents '1' with '1639'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1639'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00004_00004=6))<=1))
c Var 'aux338' direct represents '0' with '-1640'
c Var 'aux338' direct represents '1' with '1640'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1640'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00004_00004=7))<=1))
c Var 'aux339' direct represents '0' with '-1641'
c Var 'aux339' direct represents '1' with '1641'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1641'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00004_00004=8))<=1))
c Var 'aux340' direct represents '0' with '-1642'
c Var 'aux340' direct represents '1' with '1642'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1642'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00004_00004=9))<=1))
c Var 'aux341' direct represents '0' with '-1643'
c Var 'aux341' direct represents '1' with '1643'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1643'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00003_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))<=1))
c Var 'aux342' direct represents '0' with '-1644'
c Var 'aux342' direct represents '1' with '1644'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1644'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00003_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))<=1))
c Var 'aux343' direct represents '0' with '-1645'
c Var 'aux343' direct represents '1' with '1645'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1645'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00003_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))<=1))
c Var 'aux344' direct represents '0' with '-1646'
c Var 'aux344' direct represents '1' with '1646'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1646'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00003_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))<=1))
c Var 'aux345' direct represents '0' with '-1647'
c Var 'aux345' direct represents '1' with '1647'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1647'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00003_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))<=1))
c Var 'aux346' direct represents '0' with '-1648'
c Var 'aux346' direct represents '1' with '1648'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1648'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00003_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))<=1))
c Var 'aux347' direct represents '0' with '-1649'
c Var 'aux347' direct represents '1' with '1649'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1649'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00003_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))<=1))
c Var 'aux348' direct represents '0' with '-1650'
c Var 'aux348' direct represents '1' with '1650'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1650'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00003_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))<=1))
c Var 'aux349' direct represents '0' with '-1651'
c Var 'aux349' direct represents '1' with '1651'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1651'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00003_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))<=1))
c Var 'aux350' direct represents '0' with '-1652'
c Var 'aux350' direct represents '1' with '1652'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1652'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))<=1))
c Var 'aux351' direct represents '0' with '-1653'
c Var 'aux351' direct represents '1' with '1653'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1653'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))<=1))
c Var 'aux352' direct represents '0' with '-1654'
c Var 'aux352' direct represents '1' with '1654'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1654'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))<=1))
c Var 'aux353' direct represents '0' with '-1655'
c Var 'aux353' direct represents '1' with '1655'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1655'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))<=1))
c Var 'aux354' direct represents '0' with '-1656'
c Var 'aux354' direct represents '1' with '1656'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1656'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))<=1))
c Var 'aux355' direct represents '0' with '-1657'
c Var 'aux355' direct represents '1' with '1657'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1657'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))<=1))
c Var 'aux356' direct represents '0' with '-1658'
c Var 'aux356' direct represents '1' with '1658'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1658'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))<=1))
c Var 'aux357' direct represents '0' with '-1659'
c Var 'aux357' direct represents '1' with '1659'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1659'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))<=1))
c Var 'aux358' direct represents '0' with '-1660'
c Var 'aux358' direct represents '1' with '1660'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1660'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))<=1))
c Var 'aux359' direct represents '0' with '-1661'
c Var 'aux359' direct represents '1' with '1661'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1661'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00007_00005=1) + (x_00007_00006=1))<=1))
c Var 'aux360' direct represents '0' with '-1662'
c Var 'aux360' direct represents '1' with '1662'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1662'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00007_00005=2) + (x_00007_00006=2))<=1))
c Var 'aux361' direct represents '0' with '-1663'
c Var 'aux361' direct represents '1' with '1663'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1663'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00007_00005=3) + (x_00007_00006=3))<=1))
c Var 'aux362' direct represents '0' with '-1664'
c Var 'aux362' direct represents '1' with '1664'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1664'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00007_00005=4) + (x_00007_00006=4))<=1))
c Var 'aux363' direct represents '0' with '-1665'
c Var 'aux363' direct represents '1' with '1665'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1665'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00007_00005=5) + (x_00007_00006=5))<=1))
c Var 'aux364' direct represents '0' with '-1666'
c Var 'aux364' direct represents '1' with '1666'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1666'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00007_00005=6) + (x_00007_00006=6))<=1))
c Var 'aux365' direct represents '0' with '-1667'
c Var 'aux365' direct represents '1' with '1667'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1667'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00007_00005=7) + (x_00007_00006=7))<=1))
c Var 'aux366' direct represents '0' with '-1668'
c Var 'aux366' direct represents '1' with '1668'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1668'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00007_00005=8) + (x_00007_00006=8))<=1))
c Var 'aux367' direct represents '0' with '-1669'
c Var 'aux367' direct represents '1' with '1669'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1669'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00007_00005=9) + (x_00007_00006=9))<=1))
c Var 'aux368' direct represents '0' with '-1670'
c Var 'aux368' direct represents '1' with '1670'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1670'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00009_00001=1) + (x_00009_00002=1))<=1))
c Var 'aux369' direct represents '0' with '-1671'
c Var 'aux369' direct represents '1' with '1671'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1671'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00009_00001=2) + (x_00009_00002=2))<=1))
c Var 'aux370' direct represents '0' with '-1672'
c Var 'aux370' direct represents '1' with '1672'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1672'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00009_00001=3) + (x_00009_00002=3))<=1))
c Var 'aux371' direct represents '0' with '-1673'
c Var 'aux371' direct represents '1' with '1673'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1673'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00009_00001=4) + (x_00009_00002=4))<=1))
c Var 'aux372' direct represents '0' with '-1674'
c Var 'aux372' direct represents '1' with '1674'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1674'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00009_00001=5) + (x_00009_00002=5))<=1))
c Var 'aux373' direct represents '0' with '-1675'
c Var 'aux373' direct represents '1' with '1675'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1675'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00009_00001=6) + (x_00009_00002=6))<=1))
c Var 'aux374' direct represents '0' with '-1676'
c Var 'aux374' direct represents '1' with '1676'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1676'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00009_00001=7) + (x_00009_00002=7))<=1))
c Var 'aux375' direct represents '0' with '-1677'
c Var 'aux375' direct represents '1' with '1677'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1677'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00009_00001=8) + (x_00009_00002=8))<=1))
c Var 'aux376' direct represents '0' with '-1678'
c Var 'aux376' direct represents '1' with '1678'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1678'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00009_00001=9) + (x_00009_00002=9))<=1))
c Var 'aux377' direct represents '0' with '-1679'
c Var 'aux377' direct represents '1' with '1679'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1679'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00006=1) + (x_00009_00007=1))<=1))
c Var 'aux378' direct represents '0' with '-1680'
c Var 'aux378' direct represents '1' with '1680'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1680'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00006=2) + (x_00009_00007=2))<=1))
c Var 'aux379' direct represents '0' with '-1681'
c Var 'aux379' direct represents '1' with '1681'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1681'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00006=3) + (x_00009_00007=3))<=1))
c Var 'aux380' direct represents '0' with '-1682'
c Var 'aux380' direct represents '1' with '1682'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1682'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00006=4) + (x_00009_00007=4))<=1))
c Var 'aux381' direct represents '0' with '-1683'
c Var 'aux381' direct represents '1' with '1683'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1683'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00006=5) + (x_00009_00007=5))<=1))
c Var 'aux382' direct represents '0' with '-1684'
c Var 'aux382' direct represents '1' with '1684'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1684'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00006=6) + (x_00009_00007=6))<=1))
c Var 'aux383' direct represents '0' with '-1685'
c Var 'aux383' direct represents '1' with '1685'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1685'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00006=7) + (x_00009_00007=7))<=1))
c Var 'aux384' direct represents '0' with '-1686'
c Var 'aux384' direct represents '1' with '1686'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1686'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00006=8) + (x_00009_00007=8))<=1))
c Var 'aux385' direct represents '0' with '-1687'
c Var 'aux385' direct represents '1' with '1687'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1687'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00006=9) + (x_00009_00007=9))<=1))
c Var 'aux386' direct represents '0' with '-1688'
c Var 'aux386' direct represents '1' with '1688'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1688'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00009_00008=1))<=1))
c Var 'aux387' direct represents '0' with '-1689'
c Var 'aux387' direct represents '1' with '1689'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1689'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00009_00008=2))<=1))
c Var 'aux388' direct represents '0' with '-1690'
c Var 'aux388' direct represents '1' with '1690'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1690'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00009_00008=3))<=1))
c Var 'aux389' direct represents '0' with '-1691'
c Var 'aux389' direct represents '1' with '1691'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1691'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00009_00008=4))<=1))
c Var 'aux390' direct represents '0' with '-1692'
c Var 'aux390' direct represents '1' with '1692'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1692'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00009_00008=5))<=1))
c Var 'aux391' direct represents '0' with '-1693'
c Var 'aux391' direct represents '1' with '1693'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1693'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00009_00008=6))<=1))
c Var 'aux392' direct represents '0' with '-1694'
c Var 'aux392' direct represents '1' with '1694'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1694'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00009_00008=7))<=1))
c Var 'aux393' direct represents '0' with '-1695'
c Var 'aux393' direct represents '1' with '1695'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1695'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00009_00008=8))<=1))
c Var 'aux394' direct represents '0' with '-1696'
c Var 'aux394' direct represents '1' with '1696'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1696'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00009_00008=9))<=1))
c Var 'aux395' direct represents '0' with '-1697'
c Var 'aux395' direct represents '1' with '1697'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1697'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1))<=1))
c Var 'aux396' direct represents '0' with '-1698'
c Var 'aux396' direct represents '1' with '1698'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1698'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2))<=1))
c Var 'aux397' direct represents '0' with '-1699'
c Var 'aux397' direct represents '1' with '1699'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1699'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3))<=1))
c Var 'aux398' direct represents '0' with '-1700'
c Var 'aux398' direct represents '1' with '1700'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1700'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4))<=1))
c Var 'aux399' direct represents '0' with '-1701'
c Var 'aux399' direct represents '1' with '1701'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1701'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5))<=1))
c Var 'aux400' direct represents '0' with '-1702'
c Var 'aux400' direct represents '1' with '1702'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1702'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6))<=1))
c Var 'aux401' direct represents '0' with '-1703'
c Var 'aux401' direct represents '1' with '1703'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1703'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7))<=1))
c Var 'aux402' direct represents '0' with '-1704'
c Var 'aux402' direct represents '1' with '1704'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1704'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8))<=1))
c Var 'aux403' direct represents '0' with '-1705'
c Var 'aux403' direct represents '1' with '1705'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1705'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9))<=1))
c Var 'aux404' direct represents '0' with '-1706'
c Var 'aux404' direct represents '1' with '1706'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1706'
c Encoding variable: aux405 with domain: int(0..16) (representing constraint (shift(x_00002_00004, -1) + shift(x_00001_00004, -1)))
c Both direct and order encoding.
c Var 'aux405' order represents '0' with '1707'
c Var 'aux405' direct represents '0' with '1707'
c Var 'aux405' order represents '1' with '1708'
-1707 1708 0
c Var 'aux405' direct represents '1' with '1709'
1707 -1708 1709 0
-1709 1708 0
-1709 -1707 0
c Var 'aux405' order represents '2' with '1710'
-1708 1710 0
c Var 'aux405' direct represents '2' with '1711'
1708 -1710 1711 0
-1711 1710 0
-1711 -1708 0
c Var 'aux405' order represents '3' with '1712'
-1710 1712 0
c Var 'aux405' direct represents '3' with '1713'
1710 -1712 1713 0
-1713 1712 0
-1713 -1710 0
c Var 'aux405' order represents '4' with '1714'
-1712 1714 0
c Var 'aux405' direct represents '4' with '1715'
1712 -1714 1715 0
-1715 1714 0
-1715 -1712 0
c Var 'aux405' order represents '5' with '1716'
-1714 1716 0
c Var 'aux405' direct represents '5' with '1717'
1714 -1716 1717 0
-1717 1716 0
-1717 -1714 0
c Var 'aux405' order represents '6' with '1718'
-1716 1718 0
c Var 'aux405' direct represents '6' with '1719'
1716 -1718 1719 0
-1719 1718 0
-1719 -1716 0
c Var 'aux405' order represents '7' with '1720'
-1718 1720 0
c Var 'aux405' direct represents '7' with '1721'
1718 -1720 1721 0
-1721 1720 0
-1721 -1718 0
c Var 'aux405' order represents '8' with '1722'
-1720 1722 0
c Var 'aux405' direct represents '8' with '1723'
1720 -1722 1723 0
-1723 1722 0
-1723 -1720 0
c Var 'aux405' order represents '9' with '1724'
-1722 1724 0
c Var 'aux405' direct represents '9' with '1725'
1722 -1724 1725 0
-1725 1724 0
-1725 -1722 0
c Var 'aux405' order represents '10' with '1726'
-1724 1726 0
c Var 'aux405' direct represents '10' with '1727'
1724 -1726 1727 0
-1727 1726 0
-1727 -1724 0
c Var 'aux405' order represents '11' with '1728'
-1726 1728 0
c Var 'aux405' direct represents '11' with '1729'
1726 -1728 1729 0
-1729 1728 0
-1729 -1726 0
c Var 'aux405' order represents '12' with '1730'
-1728 1730 0
c Var 'aux405' direct represents '12' with '1731'
1728 -1730 1731 0
-1731 1730 0
-1731 -1728 0
c Var 'aux405' order represents '13' with '1732'
-1730 1732 0
c Var 'aux405' direct represents '13' with '1733'
1730 -1732 1733 0
-1733 1732 0
-1733 -1730 0
c Var 'aux405' order represents '14' with '1734'
-1732 1734 0
c Var 'aux405' direct represents '14' with '1735'
1732 -1734 1735 0
-1735 1734 0
-1735 -1732 0
c Var 'aux405' order represents '15' with '1736'
-1734 1736 0
c Var 'aux405' direct represents '15' with '1737'
1734 -1736 1737 0
-1737 1736 0
-1737 -1734 0
c Var 'aux405' direct represents '16' with '-1736'
1707 1709 1711 1713 1715 1717 1719 1721 1723 1725 1727 1729 1731 1733 1735 1737 -1736 0
c Encoding variable: aux406 with domain: int(0..16) (representing constraint (shift(x_00002_00008, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux406' order represents '0' with '1738'
c Var 'aux406' direct represents '0' with '1738'
c Var 'aux406' order represents '1' with '1739'
-1738 1739 0
c Var 'aux406' direct represents '1' with '1740'
1738 -1739 1740 0
-1740 1739 0
-1740 -1738 0
c Var 'aux406' order represents '2' with '1741'
-1739 1741 0
c Var 'aux406' direct represents '2' with '1742'
1739 -1741 1742 0
-1742 1741 0
-1742 -1739 0
c Var 'aux406' order represents '3' with '1743'
-1741 1743 0
c Var 'aux406' direct represents '3' with '1744'
1741 -1743 1744 0
-1744 1743 0
-1744 -1741 0
c Var 'aux406' order represents '4' with '1745'
-1743 1745 0
c Var 'aux406' direct represents '4' with '1746'
1743 -1745 1746 0
-1746 1745 0
-1746 -1743 0
c Var 'aux406' order represents '5' with '1747'
-1745 1747 0
c Var 'aux406' direct represents '5' with '1748'
1745 -1747 1748 0
-1748 1747 0
-1748 -1745 0
c Var 'aux406' order represents '6' with '1749'
-1747 1749 0
c Var 'aux406' direct represents '6' with '1750'
1747 -1749 1750 0
-1750 1749 0
-1750 -1747 0
c Var 'aux406' order represents '7' with '1751'
-1749 1751 0
c Var 'aux406' direct represents '7' with '1752'
1749 -1751 1752 0
-1752 1751 0
-1752 -1749 0
c Var 'aux406' order represents '8' with '1753'
-1751 1753 0
c Var 'aux406' direct represents '8' with '1754'
1751 -1753 1754 0
-1754 1753 0
-1754 -1751 0
c Var 'aux406' order represents '9' with '1755'
-1753 1755 0
c Var 'aux406' direct represents '9' with '1756'
1753 -1755 1756 0
-1756 1755 0
-1756 -1753 0
c Var 'aux406' order represents '10' with '1757'
-1755 1757 0
c Var 'aux406' direct represents '10' with '1758'
1755 -1757 1758 0
-1758 1757 0
-1758 -1755 0
c Var 'aux406' order represents '11' with '1759'
-1757 1759 0
c Var 'aux406' direct represents '11' with '1760'
1757 -1759 1760 0
-1760 1759 0
-1760 -1757 0
c Var 'aux406' order represents '12' with '1761'
-1759 1761 0
c Var 'aux406' direct represents '12' with '1762'
1759 -1761 1762 0
-1762 1761 0
-1762 -1759 0
c Var 'aux406' order represents '13' with '1763'
-1761 1763 0
c Var 'aux406' direct represents '13' with '1764'
1761 -1763 1764 0
-1764 1763 0
-1764 -1761 0
c Var 'aux406' order represents '14' with '1765'
-1763 1765 0
c Var 'aux406' direct represents '14' with '1766'
1763 -1765 1766 0
-1766 1765 0
-1766 -1763 0
c Var 'aux406' order represents '15' with '1767'
-1765 1767 0
c Var 'aux406' direct represents '15' with '1768'
1765 -1767 1768 0
-1768 1767 0
-1768 -1765 0
c Var 'aux406' direct represents '16' with '-1767'
1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 -1767 0
c Encoding variable: aux407 with domain: int(0..16) (representing constraint (shift(x_00007_00003, -1) + shift(x_00006_00003, -1)))
c Both direct and order encoding.
c Var 'aux407' order represents '0' with '1769'
c Var 'aux407' direct represents '0' with '1769'
c Var 'aux407' order represents '1' with '1770'
-1769 1770 0
c Var 'aux407' direct represents '1' with '1771'
1769 -1770 1771 0
-1771 1770 0
-1771 -1769 0
c Var 'aux407' order represents '2' with '1772'
-1770 1772 0
c Var 'aux407' direct represents '2' with '1773'
1770 -1772 1773 0
-1773 1772 0
-1773 -1770 0
c Var 'aux407' order represents '3' with '1774'
-1772 1774 0
c Var 'aux407' direct represents '3' with '1775'
1772 -1774 1775 0
-1775 1774 0
-1775 -1772 0
c Var 'aux407' order represents '4' with '1776'
-1774 1776 0
c Var 'aux407' direct represents '4' with '1777'
1774 -1776 1777 0
-1777 1776 0
-1777 -1774 0
c Var 'aux407' order represents '5' with '1778'
-1776 1778 0
c Var 'aux407' direct represents '5' with '1779'
1776 -1778 1779 0
-1779 1778 0
-1779 -1776 0
c Var 'aux407' order represents '6' with '1780'
-1778 1780 0
c Var 'aux407' direct represents '6' with '1781'
1778 -1780 1781 0
-1781 1780 0
-1781 -1778 0
c Var 'aux407' order represents '7' with '1782'
-1780 1782 0
c Var 'aux407' direct represents '7' with '1783'
1780 -1782 1783 0
-1783 1782 0
-1783 -1780 0
c Var 'aux407' order represents '8' with '1784'
-1782 1784 0
c Var 'aux407' direct represents '8' with '1785'
1782 -1784 1785 0
-1785 1784 0
-1785 -1782 0
c Var 'aux407' order represents '9' with '1786'
-1784 1786 0
c Var 'aux407' direct represents '9' with '1787'
1784 -1786 1787 0
-1787 1786 0
-1787 -1784 0
c Var 'aux407' order represents '10' with '1788'
-1786 1788 0
c Var 'aux407' direct represents '10' with '1789'
1786 -1788 1789 0
-1789 1788 0
-1789 -1786 0
c Var 'aux407' order represents '11' with '1790'
-1788 1790 0
c Var 'aux407' direct represents '11' with '1791'
1788 -1790 1791 0
-1791 1790 0
-1791 -1788 0
c Var 'aux407' order represents '12' with '1792'
-1790 1792 0
c Var 'aux407' direct represents '12' with '1793'
1790 -1792 1793 0
-1793 1792 0
-1793 -1790 0
c Var 'aux407' order represents '13' with '1794'
-1792 1794 0
c Var 'aux407' direct represents '13' with '1795'
1792 -1794 1795 0
-1795 1794 0
-1795 -1792 0
c Var 'aux407' order represents '14' with '1796'
-1794 1796 0
c Var 'aux407' direct represents '14' with '1797'
1794 -1796 1797 0
-1797 1796 0
-1797 -1794 0
c Var 'aux407' order represents '15' with '1798'
-1796 1798 0
c Var 'aux407' direct represents '15' with '1799'
1796 -1798 1799 0
-1799 1798 0
-1799 -1796 0
c Var 'aux407' direct represents '16' with '-1798'
1769 1771 1773 1775 1777 1779 1781 1783 1785 1787 1789 1791 1793 1795 1797 1799 -1798 0
c Encoding variable: aux408 with domain: int(0..16) (representing constraint (shift(x_00005_00003, -1) + shift(x_00007_00004, -1)))
c Both direct and order encoding.
c Var 'aux408' order represents '0' with '1800'
c Var 'aux408' direct represents '0' with '1800'
c Var 'aux408' order represents '1' with '1801'
-1800 1801 0
c Var 'aux408' direct represents '1' with '1802'
1800 -1801 1802 0
-1802 1801 0
-1802 -1800 0
c Var 'aux408' order represents '2' with '1803'
-1801 1803 0
c Var 'aux408' direct represents '2' with '1804'
1801 -1803 1804 0
-1804 1803 0
-1804 -1801 0
c Var 'aux408' order represents '3' with '1805'
-1803 1805 0
c Var 'aux408' direct represents '3' with '1806'
1803 -1805 1806 0
-1806 1805 0
-1806 -1803 0
c Var 'aux408' order represents '4' with '1807'
-1805 1807 0
c Var 'aux408' direct represents '4' with '1808'
1805 -1807 1808 0
-1808 1807 0
-1808 -1805 0
c Var 'aux408' order represents '5' with '1809'
-1807 1809 0
c Var 'aux408' direct represents '5' with '1810'
1807 -1809 1810 0
-1810 1809 0
-1810 -1807 0
c Var 'aux408' order represents '6' with '1811'
-1809 1811 0
c Var 'aux408' direct represents '6' with '1812'
1809 -1811 1812 0
-1812 1811 0
-1812 -1809 0
c Var 'aux408' order represents '7' with '1813'
-1811 1813 0
c Var 'aux408' direct represents '7' with '1814'
1811 -1813 1814 0
-1814 1813 0
-1814 -1811 0
c Var 'aux408' order represents '8' with '1815'
-1813 1815 0
c Var 'aux408' direct represents '8' with '1816'
1813 -1815 1816 0
-1816 1815 0
-1816 -1813 0
c Var 'aux408' order represents '9' with '1817'
-1815 1817 0
c Var 'aux408' direct represents '9' with '1818'
1815 -1817 1818 0
-1818 1817 0
-1818 -1815 0
c Var 'aux408' order represents '10' with '1819'
-1817 1819 0
c Var 'aux408' direct represents '10' with '1820'
1817 -1819 1820 0
-1820 1819 0
-1820 -1817 0
c Var 'aux408' order represents '11' with '1821'
-1819 1821 0
c Var 'aux408' direct represents '11' with '1822'
1819 -1821 1822 0
-1822 1821 0
-1822 -1819 0
c Var 'aux408' order represents '12' with '1823'
-1821 1823 0
c Var 'aux408' direct represents '12' with '1824'
1821 -1823 1824 0
-1824 1823 0
-1824 -1821 0
c Var 'aux408' order represents '13' with '1825'
-1823 1825 0
c Var 'aux408' direct represents '13' with '1826'
1823 -1825 1826 0
-1826 1825 0
-1826 -1823 0
c Var 'aux408' order represents '14' with '1827'
-1825 1827 0
c Var 'aux408' direct represents '14' with '1828'
1825 -1827 1828 0
-1828 1827 0
-1828 -1825 0
c Var 'aux408' order represents '15' with '1829'
-1827 1829 0
c Var 'aux408' direct represents '15' with '1830'
1827 -1829 1830 0
-1830 1829 0
-1830 -1827 0
c Var 'aux408' direct represents '16' with '-1829'
1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 1830 -1829 0
c Encoding variable: aux409 with domain: int(0..16) (representing constraint (shift(x_00004_00003, -1) + shift(x_00003_00003, -1)))
c Both direct and order encoding.
c Var 'aux409' order represents '0' with '1831'
c Var 'aux409' direct represents '0' with '1831'
c Var 'aux409' order represents '1' with '1832'
-1831 1832 0
c Var 'aux409' direct represents '1' with '1833'
1831 -1832 1833 0
-1833 1832 0
-1833 -1831 0
c Var 'aux409' order represents '2' with '1834'
-1832 1834 0
c Var 'aux409' direct represents '2' with '1835'
1832 -1834 1835 0
-1835 1834 0
-1835 -1832 0
c Var 'aux409' order represents '3' with '1836'
-1834 1836 0
c Var 'aux409' direct represents '3' with '1837'
1834 -1836 1837 0
-1837 1836 0
-1837 -1834 0
c Var 'aux409' order represents '4' with '1838'
-1836 1838 0
c Var 'aux409' direct represents '4' with '1839'
1836 -1838 1839 0
-1839 1838 0
-1839 -1836 0
c Var 'aux409' order represents '5' with '1840'
-1838 1840 0
c Var 'aux409' direct represents '5' with '1841'
1838 -1840 1841 0
-1841 1840 0
-1841 -1838 0
c Var 'aux409' order represents '6' with '1842'
-1840 1842 0
c Var 'aux409' direct represents '6' with '1843'
1840 -1842 1843 0
-1843 1842 0
-1843 -1840 0
c Var 'aux409' order represents '7' with '1844'
-1842 1844 0
c Var 'aux409' direct represents '7' with '1845'
1842 -1844 1845 0
-1845 1844 0
-1845 -1842 0
c Var 'aux409' order represents '8' with '1846'
-1844 1846 0
c Var 'aux409' direct represents '8' with '1847'
1844 -1846 1847 0
-1847 1846 0
-1847 -1844 0
c Var 'aux409' order represents '9' with '1848'
-1846 1848 0
c Var 'aux409' direct represents '9' with '1849'
1846 -1848 1849 0
-1849 1848 0
-1849 -1846 0
c Var 'aux409' order represents '10' with '1850'
-1848 1850 0
c Var 'aux409' direct represents '10' with '1851'
1848 -1850 1851 0
-1851 1850 0
-1851 -1848 0
c Var 'aux409' order represents '11' with '1852'
-1850 1852 0
c Var 'aux409' direct represents '11' with '1853'
1850 -1852 1853 0
-1853 1852 0
-1853 -1850 0
c Var 'aux409' order represents '12' with '1854'
-1852 1854 0
c Var 'aux409' direct represents '12' with '1855'
1852 -1854 1855 0
-1855 1854 0
-1855 -1852 0
c Var 'aux409' order represents '13' with '1856'
-1854 1856 0
c Var 'aux409' direct represents '13' with '1857'
1854 -1856 1857 0
-1857 1856 0
-1857 -1854 0
c Var 'aux409' order represents '14' with '1858'
-1856 1858 0
c Var 'aux409' direct represents '14' with '1859'
1856 -1858 1859 0
-1859 1858 0
-1859 -1856 0
c Var 'aux409' order represents '15' with '1860'
-1858 1860 0
c Var 'aux409' direct represents '15' with '1861'
1858 -1860 1861 0
-1861 1860 0
-1861 -1858 0
c Var 'aux409' direct represents '16' with '-1860'
1831 1833 1835 1837 1839 1841 1843 1845 1847 1849 1851 1853 1855 1857 1859 1861 -1860 0
c Encoding variable: aux410 with domain: int(0..16) (representing constraint (shift(x_00007_00007, -1) + shift(x_00006_00007, -1)))
c Both direct and order encoding.
c Var 'aux410' order represents '0' with '1862'
c Var 'aux410' direct represents '0' with '1862'
c Var 'aux410' order represents '1' with '1863'
-1862 1863 0
c Var 'aux410' direct represents '1' with '1864'
1862 -1863 1864 0
-1864 1863 0
-1864 -1862 0
c Var 'aux410' order represents '2' with '1865'
-1863 1865 0
c Var 'aux410' direct represents '2' with '1866'
1863 -1865 1866 0
-1866 1865 0
-1866 -1863 0
c Var 'aux410' order represents '3' with '1867'
-1865 1867 0
c Var 'aux410' direct represents '3' with '1868'
1865 -1867 1868 0
-1868 1867 0
-1868 -1865 0
c Var 'aux410' order represents '4' with '1869'
-1867 1869 0
c Var 'aux410' direct represents '4' with '1870'
1867 -1869 1870 0
-1870 1869 0
-1870 -1867 0
c Var 'aux410' order represents '5' with '1871'
-1869 1871 0
c Var 'aux410' direct represents '5' with '1872'
1869 -1871 1872 0
-1872 1871 0
-1872 -1869 0
c Var 'aux410' order represents '6' with '1873'
-1871 1873 0
c Var 'aux410' direct represents '6' with '1874'
1871 -1873 1874 0
-1874 1873 0
-1874 -1871 0
c Var 'aux410' order represents '7' with '1875'
-1873 1875 0
c Var 'aux410' direct represents '7' with '1876'
1873 -1875 1876 0
-1876 1875 0
-1876 -1873 0
c Var 'aux410' order represents '8' with '1877'
-1875 1877 0
c Var 'aux410' direct represents '8' with '1878'
1875 -1877 1878 0
-1878 1877 0
-1878 -1875 0
c Var 'aux410' order represents '9' with '1879'
-1877 1879 0
c Var 'aux410' direct represents '9' with '1880'
1877 -1879 1880 0
-1880 1879 0
-1880 -1877 0
c Var 'aux410' order represents '10' with '1881'
-1879 1881 0
c Var 'aux410' direct represents '10' with '1882'
1879 -1881 1882 0
-1882 1881 0
-1882 -1879 0
c Var 'aux410' order represents '11' with '1883'
-1881 1883 0
c Var 'aux410' direct represents '11' with '1884'
1881 -1883 1884 0
-1884 1883 0
-1884 -1881 0
c Var 'aux410' order represents '12' with '1885'
-1883 1885 0
c Var 'aux410' direct represents '12' with '1886'
1883 -1885 1886 0
-1886 1885 0
-1886 -1883 0
c Var 'aux410' order represents '13' with '1887'
-1885 1887 0
c Var 'aux410' direct represents '13' with '1888'
1885 -1887 1888 0
-1888 1887 0
-1888 -1885 0
c Var 'aux410' order represents '14' with '1889'
-1887 1889 0
c Var 'aux410' direct represents '14' with '1890'
1887 -1889 1890 0
-1890 1889 0
-1890 -1887 0
c Var 'aux410' order represents '15' with '1891'
-1889 1891 0
c Var 'aux410' direct represents '15' with '1892'
1889 -1891 1892 0
-1892 1891 0
-1892 -1889 0
c Var 'aux410' direct represents '16' with '-1891'
1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 -1891 0
c Encoding variable: aux411 with domain: int(0..16) (representing constraint (shift(x_00005_00007, -1) + shift(x_00003_00006, -1)))
c Both direct and order encoding.
c Var 'aux411' order represents '0' with '1893'
c Var 'aux411' direct represents '0' with '1893'
c Var 'aux411' order represents '1' with '1894'
-1893 1894 0
c Var 'aux411' direct represents '1' with '1895'
1893 -1894 1895 0
-1895 1894 0
-1895 -1893 0
c Var 'aux411' order represents '2' with '1896'
-1894 1896 0
c Var 'aux411' direct represents '2' with '1897'
1894 -1896 1897 0
-1897 1896 0
-1897 -1894 0
c Var 'aux411' order represents '3' with '1898'
-1896 1898 0
c Var 'aux411' direct represents '3' with '1899'
1896 -1898 1899 0
-1899 1898 0
-1899 -1896 0
c Var 'aux411' order represents '4' with '1900'
-1898 1900 0
c Var 'aux411' direct represents '4' with '1901'
1898 -1900 1901 0
-1901 1900 0
-1901 -1898 0
c Var 'aux411' order represents '5' with '1902'
-1900 1902 0
c Var 'aux411' direct represents '5' with '1903'
1900 -1902 1903 0
-1903 1902 0
-1903 -1900 0
c Var 'aux411' order represents '6' with '1904'
-1902 1904 0
c Var 'aux411' direct represents '6' with '1905'
1902 -1904 1905 0
-1905 1904 0
-1905 -1902 0
c Var 'aux411' order represents '7' with '1906'
-1904 1906 0
c Var 'aux411' direct represents '7' with '1907'
1904 -1906 1907 0
-1907 1906 0
-1907 -1904 0
c Var 'aux411' order represents '8' with '1908'
-1906 1908 0
c Var 'aux411' direct represents '8' with '1909'
1906 -1908 1909 0
-1909 1908 0
-1909 -1906 0
c Var 'aux411' order represents '9' with '1910'
-1908 1910 0
c Var 'aux411' direct represents '9' with '1911'
1908 -1910 1911 0
-1911 1910 0
-1911 -1908 0
c Var 'aux411' order represents '10' with '1912'
-1910 1912 0
c Var 'aux411' direct represents '10' with '1913'
1910 -1912 1913 0
-1913 1912 0
-1913 -1910 0
c Var 'aux411' order represents '11' with '1914'
-1912 1914 0
c Var 'aux411' direct represents '11' with '1915'
1912 -1914 1915 0
-1915 1914 0
-1915 -1912 0
c Var 'aux411' order represents '12' with '1916'
-1914 1916 0
c Var 'aux411' direct represents '12' with '1917'
1914 -1916 1917 0
-1917 1916 0
-1917 -1914 0
c Var 'aux411' order represents '13' with '1918'
-1916 1918 0
c Var 'aux411' direct represents '13' with '1919'
1916 -1918 1919 0
-1919 1918 0
-1919 -1916 0
c Var 'aux411' order represents '14' with '1920'
-1918 1920 0
c Var 'aux411' direct represents '14' with '1921'
1918 -1920 1921 0
-1921 1920 0
-1921 -1918 0
c Var 'aux411' order represents '15' with '1922'
-1920 1922 0
c Var 'aux411' direct represents '15' with '1923'
1920 -1922 1923 0
-1923 1922 0
-1923 -1920 0
c Var 'aux411' direct represents '16' with '-1922'
1893 1895 1897 1899 1901 1903 1905 1907 1909 1911 1913 1915 1917 1919 1921 1923 -1922 0
c Encoding variable: aux412 with domain: int(0..16) (representing constraint (shift(x_00004_00007, -1) + shift(x_00003_00007, -1)))
c Both direct and order encoding.
c Var 'aux412' order represents '0' with '1924'
c Var 'aux412' direct represents '0' with '1924'
c Var 'aux412' order represents '1' with '1925'
-1924 1925 0
c Var 'aux412' direct represents '1' with '1926'
1924 -1925 1926 0
-1926 1925 0
-1926 -1924 0
c Var 'aux412' order represents '2' with '1927'
-1925 1927 0
c Var 'aux412' direct represents '2' with '1928'
1925 -1927 1928 0
-1928 1927 0
-1928 -1925 0
c Var 'aux412' order represents '3' with '1929'
-1927 1929 0
c Var 'aux412' direct represents '3' with '1930'
1927 -1929 1930 0
-1930 1929 0
-1930 -1927 0
c Var 'aux412' order represents '4' with '1931'
-1929 1931 0
c Var 'aux412' direct represents '4' with '1932'
1929 -1931 1932 0
-1932 1931 0
-1932 -1929 0
c Var 'aux412' order represents '5' with '1933'
-1931 1933 0
c Var 'aux412' direct represents '5' with '1934'
1931 -1933 1934 0
-1934 1933 0
-1934 -1931 0
c Var 'aux412' order represents '6' with '1935'
-1933 1935 0
c Var 'aux412' direct represents '6' with '1936'
1933 -1935 1936 0
-1936 1935 0
-1936 -1933 0
c Var 'aux412' order represents '7' with '1937'
-1935 1937 0
c Var 'aux412' direct represents '7' with '1938'
1935 -1937 1938 0
-1938 1937 0
-1938 -1935 0
c Var 'aux412' order represents '8' with '1939'
-1937 1939 0
c Var 'aux412' direct represents '8' with '1940'
1937 -1939 1940 0
-1940 1939 0
-1940 -1937 0
c Var 'aux412' order represents '9' with '1941'
-1939 1941 0
c Var 'aux412' direct represents '9' with '1942'
1939 -1941 1942 0
-1942 1941 0
-1942 -1939 0
c Var 'aux412' order represents '10' with '1943'
-1941 1943 0
c Var 'aux412' direct represents '10' with '1944'
1941 -1943 1944 0
-1944 1943 0
-1944 -1941 0
c Var 'aux412' order represents '11' with '1945'
-1943 1945 0
c Var 'aux412' direct represents '11' with '1946'
1943 -1945 1946 0
-1946 1945 0
-1946 -1943 0
c Var 'aux412' order represents '12' with '1947'
-1945 1947 0
c Var 'aux412' direct represents '12' with '1948'
1945 -1947 1948 0
-1948 1947 0
-1948 -1945 0
c Var 'aux412' order represents '13' with '1949'
-1947 1949 0
c Var 'aux412' direct represents '13' with '1950'
1947 -1949 1950 0
-1950 1949 0
-1950 -1947 0
c Var 'aux412' order represents '14' with '1951'
-1949 1951 0
c Var 'aux412' direct represents '14' with '1952'
1949 -1951 1952 0
-1952 1951 0
-1952 -1949 0
c Var 'aux412' order represents '15' with '1953'
-1951 1953 0
c Var 'aux412' direct represents '15' with '1954'
1951 -1953 1954 0
-1954 1953 0
-1954 -1951 0
c Var 'aux412' direct represents '16' with '-1953'
1924 1926 1928 1930 1932 1934 1936 1938 1940 1942 1944 1946 1948 1950 1952 1954 -1953 0
c Encoding variable: aux413 with domain: int(0..16) (representing constraint (shift(x_00008_00001, -1) + shift(x_00009_00002, -1)))
c Both direct and order encoding.
c Var 'aux413' order represents '0' with '1955'
c Var 'aux413' direct represents '0' with '1955'
c Var 'aux413' order represents '1' with '1956'
-1955 1956 0
c Var 'aux413' direct represents '1' with '1957'
1955 -1956 1957 0
-1957 1956 0
-1957 -1955 0
c Var 'aux413' order represents '2' with '1958'
-1956 1958 0
c Var 'aux413' direct represents '2' with '1959'
1956 -1958 1959 0
-1959 1958 0
-1959 -1956 0
c Var 'aux413' order represents '3' with '1960'
-1958 1960 0
c Var 'aux413' direct represents '3' with '1961'
1958 -1960 1961 0
-1961 1960 0
-1961 -1958 0
c Var 'aux413' order represents '4' with '1962'
-1960 1962 0
c Var 'aux413' direct represents '4' with '1963'
1960 -1962 1963 0
-1963 1962 0
-1963 -1960 0
c Var 'aux413' order represents '5' with '1964'
-1962 1964 0
c Var 'aux413' direct represents '5' with '1965'
1962 -1964 1965 0
-1965 1964 0
-1965 -1962 0
c Var 'aux413' order represents '6' with '1966'
-1964 1966 0
c Var 'aux413' direct represents '6' with '1967'
1964 -1966 1967 0
-1967 1966 0
-1967 -1964 0
c Var 'aux413' order represents '7' with '1968'
-1966 1968 0
c Var 'aux413' direct represents '7' with '1969'
1966 -1968 1969 0
-1969 1968 0
-1969 -1966 0
c Var 'aux413' order represents '8' with '1970'
-1968 1970 0
c Var 'aux413' direct represents '8' with '1971'
1968 -1970 1971 0
-1971 1970 0
-1971 -1968 0
c Var 'aux413' order represents '9' with '1972'
-1970 1972 0
c Var 'aux413' direct represents '9' with '1973'
1970 -1972 1973 0
-1973 1972 0
-1973 -1970 0
c Var 'aux413' order represents '10' with '1974'
-1972 1974 0
c Var 'aux413' direct represents '10' with '1975'
1972 -1974 1975 0
-1975 1974 0
-1975 -1972 0
c Var 'aux413' order represents '11' with '1976'
-1974 1976 0
c Var 'aux413' direct represents '11' with '1977'
1974 -1976 1977 0
-1977 1976 0
-1977 -1974 0
c Var 'aux413' order represents '12' with '1978'
-1976 1978 0
c Var 'aux413' direct represents '12' with '1979'
1976 -1978 1979 0
-1979 1978 0
-1979 -1976 0
c Var 'aux413' order represents '13' with '1980'
-1978 1980 0
c Var 'aux413' direct represents '13' with '1981'
1978 -1980 1981 0
-1981 1980 0
-1981 -1978 0
c Var 'aux413' order represents '14' with '1982'
-1980 1982 0
c Var 'aux413' direct represents '14' with '1983'
1980 -1982 1983 0
-1983 1982 0
-1983 -1980 0
c Var 'aux413' order represents '15' with '1984'
-1982 1984 0
c Var 'aux413' direct represents '15' with '1985'
1982 -1984 1985 0
-1985 1984 0
-1985 -1982 0
c Var 'aux413' direct represents '16' with '-1984'
1955 1957 1959 1961 1963 1965 1967 1969 1971 1973 1975 1977 1979 1981 1983 1985 -1984 0
c Encoding variable: aux414 with domain: int(0..16) (representing constraint (shift(x_00008_00005, -1) + shift(x_00009_00007, -1)))
c Both direct and order encoding.
c Var 'aux414' order represents '0' with '1986'
c Var 'aux414' direct represents '0' with '1986'
c Var 'aux414' order represents '1' with '1987'
-1986 1987 0
c Var 'aux414' direct represents '1' with '1988'
1986 -1987 1988 0
-1988 1987 0
-1988 -1986 0
c Var 'aux414' order represents '2' with '1989'
-1987 1989 0
c Var 'aux414' direct represents '2' with '1990'
1987 -1989 1990 0
-1990 1989 0
-1990 -1987 0
c Var 'aux414' order represents '3' with '1991'
-1989 1991 0
c Var 'aux414' direct represents '3' with '1992'
1989 -1991 1992 0
-1992 1991 0
-1992 -1989 0
c Var 'aux414' order represents '4' with '1993'
-1991 1993 0
c Var 'aux414' direct represents '4' with '1994'
1991 -1993 1994 0
-1994 1993 0
-1994 -1991 0
c Var 'aux414' order represents '5' with '1995'
-1993 1995 0
c Var 'aux414' direct represents '5' with '1996'
1993 -1995 1996 0
-1996 1995 0
-1996 -1993 0
c Var 'aux414' order represents '6' with '1997'
-1995 1997 0
c Var 'aux414' direct represents '6' with '1998'
1995 -1997 1998 0
-1998 1997 0
-1998 -1995 0
c Var 'aux414' order represents '7' with '1999'
-1997 1999 0
c Var 'aux414' direct represents '7' with '2000'
1997 -1999 2000 0
-2000 1999 0
-2000 -1997 0
c Var 'aux414' order represents '8' with '2001'
-1999 2001 0
c Var 'aux414' direct represents '8' with '2002'
1999 -2001 2002 0
-2002 2001 0
-2002 -1999 0
c Var 'aux414' order represents '9' with '2003'
-2001 2003 0
c Var 'aux414' direct represents '9' with '2004'
2001 -2003 2004 0
-2004 2003 0
-2004 -2001 0
c Var 'aux414' order represents '10' with '2005'
-2003 2005 0
c Var 'aux414' direct represents '10' with '2006'
2003 -2005 2006 0
-2006 2005 0
-2006 -2003 0
c Var 'aux414' order represents '11' with '2007'
-2005 2007 0
c Var 'aux414' direct represents '11' with '2008'
2005 -2007 2008 0
-2008 2007 0
-2008 -2005 0
c Var 'aux414' order represents '12' with '2009'
-2007 2009 0
c Var 'aux414' direct represents '12' with '2010'
2007 -2009 2010 0
-2010 2009 0
-2010 -2007 0
c Var 'aux414' order represents '13' with '2011'
-2009 2011 0
c Var 'aux414' direct represents '13' with '2012'
2009 -2011 2012 0
-2012 2011 0
-2012 -2009 0
c Var 'aux414' order represents '14' with '2013'
-2011 2013 0
c Var 'aux414' direct represents '14' with '2014'
2011 -2013 2014 0
-2014 2013 0
-2014 -2011 0
c Var 'aux414' order represents '15' with '2015'
-2013 2015 0
c Var 'aux414' direct represents '15' with '2016'
2013 -2015 2016 0
-2016 2015 0
-2016 -2013 0
c Var 'aux414' direct represents '16' with '-2015'
1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 2016 -2015 0
c Encoding variable: aux415 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux415' order represents '0' with '2017'
c Var 'aux415' direct represents '0' with '2017'
c Var 'aux415' order represents '1' with '2018'
-2017 2018 0
c Var 'aux415' direct represents '1' with '2019'
2017 -2018 2019 0
-2019 2018 0
-2019 -2017 0
c Var 'aux415' direct represents '2' with '-2018'
2017 2019 -2018 0
c Encoding variable: aux416 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux416' order represents '0' with '2020'
c Var 'aux416' direct represents '0' with '2020'
c Var 'aux416' order represents '1' with '2021'
-2020 2021 0
c Var 'aux416' direct represents '1' with '2022'
2020 -2021 2022 0
-2022 2021 0
-2022 -2020 0
c Var 'aux416' direct represents '2' with '-2021'
2020 2022 -2021 0
c Encoding variable: aux417 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux417' order represents '0' with '2023'
c Var 'aux417' direct represents '0' with '2023'
c Var 'aux417' order represents '1' with '2024'
-2023 2024 0
c Var 'aux417' direct represents '1' with '2025'
2023 -2024 2025 0
-2025 2024 0
-2025 -2023 0
c Var 'aux417' direct represents '2' with '-2024'
2023 2025 -2024 0
c Encoding variable: aux418 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux418' order represents '0' with '2026'
c Var 'aux418' direct represents '0' with '2026'
c Var 'aux418' order represents '1' with '2027'
-2026 2027 0
c Var 'aux418' direct represents '1' with '2028'
2026 -2027 2028 0
-2028 2027 0
-2028 -2026 0
c Var 'aux418' direct represents '2' with '-2027'
2026 2028 -2027 0
c Encoding variable: aux419 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux418))
c Both direct and order encoding.
c Var 'aux419' order represents '0' with '2029'
c Var 'aux419' direct represents '0' with '2029'
c Var 'aux419' order represents '1' with '2030'
-2029 2030 0
c Var 'aux419' direct represents '1' with '2031'
2029 -2030 2031 0
-2031 2030 0
-2031 -2029 0
c Var 'aux419' order represents '2' with '2032'
-2030 2032 0
c Var 'aux419' direct represents '2' with '2033'
2030 -2032 2033 0
-2033 2032 0
-2033 -2030 0
c Var 'aux419' direct represents '3' with '-2032'
2029 2031 2033 -2032 0
c Encoding variable: aux420 with domain: int(0..4) (representing constraint (aux415 + aux417))
c Both direct and order encoding.
c Var 'aux420' order represents '0' with '2034'
c Var 'aux420' direct represents '0' with '2034'
c Var 'aux420' order represents '1' with '2035'
-2034 2035 0
c Var 'aux420' direct represents '1' with '2036'
2034 -2035 2036 0
-2036 2035 0
-2036 -2034 0
c Var 'aux420' order represents '2' with '2037'
-2035 2037 0
c Var 'aux420' direct represents '2' with '2038'
2035 -2037 2038 0
-2038 2037 0
-2038 -2035 0
c Var 'aux420' order represents '3' with '2039'
-2037 2039 0
c Var 'aux420' direct represents '3' with '2040'
2037 -2039 2040 0
-2040 2039 0
-2040 -2037 0
c Var 'aux420' direct represents '4' with '-2039'
2034 2036 2038 2040 -2039 0
c Encoding variable: aux421 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux421' order represents '0' with '2041'
c Var 'aux421' direct represents '0' with '2041'
c Var 'aux421' order represents '1' with '2042'
-2041 2042 0
c Var 'aux421' direct represents '1' with '2043'
2041 -2042 2043 0
-2043 2042 0
-2043 -2041 0
c Var 'aux421' direct represents '2' with '-2042'
2041 2043 -2042 0
c Encoding variable: aux422 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux422' order represents '0' with '2044'
c Var 'aux422' direct represents '0' with '2044'
c Var 'aux422' order represents '1' with '2045'
-2044 2045 0
c Var 'aux422' direct represents '1' with '2046'
2044 -2045 2046 0
-2046 2045 0
-2046 -2044 0
c Var 'aux422' direct represents '2' with '-2045'
2044 2046 -2045 0
c Encoding variable: aux423 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux423' order represents '0' with '2047'
c Var 'aux423' direct represents '0' with '2047'
c Var 'aux423' order represents '1' with '2048'
-2047 2048 0
c Var 'aux423' direct represents '1' with '2049'
2047 -2048 2049 0
-2049 2048 0
-2049 -2047 0
c Var 'aux423' direct represents '2' with '-2048'
2047 2049 -2048 0
c Encoding variable: aux424 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux424' order represents '0' with '2050'
c Var 'aux424' direct represents '0' with '2050'
c Var 'aux424' order represents '1' with '2051'
-2050 2051 0
c Var 'aux424' direct represents '1' with '2052'
2050 -2051 2052 0
-2052 2051 0
-2052 -2050 0
c Var 'aux424' direct represents '2' with '-2051'
2050 2052 -2051 0
c Encoding variable: aux425 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux424))
c Both direct and order encoding.
c Var 'aux425' order represents '0' with '2053'
c Var 'aux425' direct represents '0' with '2053'
c Var 'aux425' order represents '1' with '2054'
-2053 2054 0
c Var 'aux425' direct represents '1' with '2055'
2053 -2054 2055 0
-2055 2054 0
-2055 -2053 0
c Var 'aux425' order represents '2' with '2056'
-2054 2056 0
c Var 'aux425' direct represents '2' with '2057'
2054 -2056 2057 0
-2057 2056 0
-2057 -2054 0
c Var 'aux425' direct represents '3' with '-2056'
2053 2055 2057 -2056 0
c Encoding variable: aux426 with domain: int(0..4) (representing constraint (aux421 + aux423))
c Both direct and order encoding.
c Var 'aux426' order represents '0' with '2058'
c Var 'aux426' direct represents '0' with '2058'
c Var 'aux426' order represents '1' with '2059'
-2058 2059 0
c Var 'aux426' direct represents '1' with '2060'
2058 -2059 2060 0
-2060 2059 0
-2060 -2058 0
c Var 'aux426' order represents '2' with '2061'
-2059 2061 0
c Var 'aux426' direct represents '2' with '2062'
2059 -2061 2062 0
-2062 2061 0
-2062 -2059 0
c Var 'aux426' order represents '3' with '2063'
-2061 2063 0
c Var 'aux426' direct represents '3' with '2064'
2061 -2063 2064 0
-2064 2063 0
-2064 -2061 0
c Var 'aux426' direct represents '4' with '-2063'
2058 2060 2062 2064 -2063 0
c Encoding variable: aux427 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux427' order represents '0' with '2065'
c Var 'aux427' direct represents '0' with '2065'
c Var 'aux427' order represents '1' with '2066'
-2065 2066 0
c Var 'aux427' direct represents '1' with '2067'
2065 -2066 2067 0
-2067 2066 0
-2067 -2065 0
c Var 'aux427' direct represents '2' with '-2066'
2065 2067 -2066 0
c Encoding variable: aux428 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux428' order represents '0' with '2068'
c Var 'aux428' direct represents '0' with '2068'
c Var 'aux428' order represents '1' with '2069'
-2068 2069 0
c Var 'aux428' direct represents '1' with '2070'
2068 -2069 2070 0
-2070 2069 0
-2070 -2068 0
c Var 'aux428' direct represents '2' with '-2069'
2068 2070 -2069 0
c Encoding variable: aux429 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux429' order represents '0' with '2071'
c Var 'aux429' direct represents '0' with '2071'
c Var 'aux429' order represents '1' with '2072'
-2071 2072 0
c Var 'aux429' direct represents '1' with '2073'
2071 -2072 2073 0
-2073 2072 0
-2073 -2071 0
c Var 'aux429' direct represents '2' with '-2072'
2071 2073 -2072 0
c Encoding variable: aux430 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux430' order represents '0' with '2074'
c Var 'aux430' direct represents '0' with '2074'
c Var 'aux430' order represents '1' with '2075'
-2074 2075 0
c Var 'aux430' direct represents '1' with '2076'
2074 -2075 2076 0
-2076 2075 0
-2076 -2074 0
c Var 'aux430' direct represents '2' with '-2075'
2074 2076 -2075 0
c Encoding variable: aux431 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux430))
c Both direct and order encoding.
c Var 'aux431' order represents '0' with '2077'
c Var 'aux431' direct represents '0' with '2077'
c Var 'aux431' order represents '1' with '2078'
-2077 2078 0
c Var 'aux431' direct represents '1' with '2079'
2077 -2078 2079 0
-2079 2078 0
-2079 -2077 0
c Var 'aux431' order represents '2' with '2080'
-2078 2080 0
c Var 'aux431' direct represents '2' with '2081'
2078 -2080 2081 0
-2081 2080 0
-2081 -2078 0
c Var 'aux431' direct represents '3' with '-2080'
2077 2079 2081 -2080 0
c Encoding variable: aux432 with domain: int(0..4) (representing constraint (aux427 + aux429))
c Both direct and order encoding.
c Var 'aux432' order represents '0' with '2082'
c Var 'aux432' direct represents '0' with '2082'
c Var 'aux432' order represents '1' with '2083'
-2082 2083 0
c Var 'aux432' direct represents '1' with '2084'
2082 -2083 2084 0
-2084 2083 0
-2084 -2082 0
c Var 'aux432' order represents '2' with '2085'
-2083 2085 0
c Var 'aux432' direct represents '2' with '2086'
2083 -2085 2086 0
-2086 2085 0
-2086 -2083 0
c Var 'aux432' order represents '3' with '2087'
-2085 2087 0
c Var 'aux432' direct represents '3' with '2088'
2085 -2087 2088 0
-2088 2087 0
-2088 -2085 0
c Var 'aux432' direct represents '4' with '-2087'
2082 2084 2086 2088 -2087 0
c Encoding variable: aux433 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux433' order represents '0' with '2089'
c Var 'aux433' direct represents '0' with '2089'
c Var 'aux433' order represents '1' with '2090'
-2089 2090 0
c Var 'aux433' direct represents '1' with '2091'
2089 -2090 2091 0
-2091 2090 0
-2091 -2089 0
c Var 'aux433' direct represents '2' with '-2090'
2089 2091 -2090 0
c Encoding variable: aux434 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux434' order represents '0' with '2092'
c Var 'aux434' direct represents '0' with '2092'
c Var 'aux434' order represents '1' with '2093'
-2092 2093 0
c Var 'aux434' direct represents '1' with '2094'
2092 -2093 2094 0
-2094 2093 0
-2094 -2092 0
c Var 'aux434' direct represents '2' with '-2093'
2092 2094 -2093 0
c Encoding variable: aux435 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux435' order represents '0' with '2095'
c Var 'aux435' direct represents '0' with '2095'
c Var 'aux435' order represents '1' with '2096'
-2095 2096 0
c Var 'aux435' direct represents '1' with '2097'
2095 -2096 2097 0
-2097 2096 0
-2097 -2095 0
c Var 'aux435' direct represents '2' with '-2096'
2095 2097 -2096 0
c Encoding variable: aux436 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux436' order represents '0' with '2098'
c Var 'aux436' direct represents '0' with '2098'
c Var 'aux436' order represents '1' with '2099'
-2098 2099 0
c Var 'aux436' direct represents '1' with '2100'
2098 -2099 2100 0
-2100 2099 0
-2100 -2098 0
c Var 'aux436' direct represents '2' with '-2099'
2098 2100 -2099 0
c Encoding variable: aux437 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux436))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '2101'
c Var 'aux437' direct represents '0' with '2101'
c Var 'aux437' order represents '1' with '2102'
-2101 2102 0
c Var 'aux437' direct represents '1' with '2103'
2101 -2102 2103 0
-2103 2102 0
-2103 -2101 0
c Var 'aux437' order represents '2' with '2104'
-2102 2104 0
c Var 'aux437' direct represents '2' with '2105'
2102 -2104 2105 0
-2105 2104 0
-2105 -2102 0
c Var 'aux437' direct represents '3' with '-2104'
2101 2103 2105 -2104 0
c Encoding variable: aux438 with domain: int(0..4) (representing constraint (aux433 + aux435))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '2106'
c Var 'aux438' direct represents '0' with '2106'
c Var 'aux438' order represents '1' with '2107'
-2106 2107 0
c Var 'aux438' direct represents '1' with '2108'
2106 -2107 2108 0
-2108 2107 0
-2108 -2106 0
c Var 'aux438' order represents '2' with '2109'
-2107 2109 0
c Var 'aux438' direct represents '2' with '2110'
2107 -2109 2110 0
-2110 2109 0
-2110 -2107 0
c Var 'aux438' order represents '3' with '2111'
-2109 2111 0
c Var 'aux438' direct represents '3' with '2112'
2109 -2111 2112 0
-2112 2111 0
-2112 -2109 0
c Var 'aux438' direct represents '4' with '-2111'
2106 2108 2110 2112 -2111 0
c Encoding variable: aux439 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '2113'
c Var 'aux439' direct represents '0' with '2113'
c Var 'aux439' order represents '1' with '2114'
-2113 2114 0
c Var 'aux439' direct represents '1' with '2115'
2113 -2114 2115 0
-2115 2114 0
-2115 -2113 0
c Var 'aux439' direct represents '2' with '-2114'
2113 2115 -2114 0
c Encoding variable: aux440 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '2116'
c Var 'aux440' direct represents '0' with '2116'
c Var 'aux440' order represents '1' with '2117'
-2116 2117 0
c Var 'aux440' direct represents '1' with '2118'
2116 -2117 2118 0
-2118 2117 0
-2118 -2116 0
c Var 'aux440' direct represents '2' with '-2117'
2116 2118 -2117 0
c Encoding variable: aux441 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '2119'
c Var 'aux441' direct represents '0' with '2119'
c Var 'aux441' order represents '1' with '2120'
-2119 2120 0
c Var 'aux441' direct represents '1' with '2121'
2119 -2120 2121 0
-2121 2120 0
-2121 -2119 0
c Var 'aux441' direct represents '2' with '-2120'
2119 2121 -2120 0
c Encoding variable: aux442 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '2122'
c Var 'aux442' direct represents '0' with '2122'
c Var 'aux442' order represents '1' with '2123'
-2122 2123 0
c Var 'aux442' direct represents '1' with '2124'
2122 -2123 2124 0
-2124 2123 0
-2124 -2122 0
c Var 'aux442' direct represents '2' with '-2123'
2122 2124 -2123 0
c Encoding variable: aux443 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux442))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '2125'
c Var 'aux443' direct represents '0' with '2125'
c Var 'aux443' order represents '1' with '2126'
-2125 2126 0
c Var 'aux443' direct represents '1' with '2127'
2125 -2126 2127 0
-2127 2126 0
-2127 -2125 0
c Var 'aux443' order represents '2' with '2128'
-2126 2128 0
c Var 'aux443' direct represents '2' with '2129'
2126 -2128 2129 0
-2129 2128 0
-2129 -2126 0
c Var 'aux443' direct represents '3' with '-2128'
2125 2127 2129 -2128 0
c Encoding variable: aux444 with domain: int(0..4) (representing constraint (aux439 + aux441))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '2130'
c Var 'aux444' direct represents '0' with '2130'
c Var 'aux444' order represents '1' with '2131'
-2130 2131 0
c Var 'aux444' direct represents '1' with '2132'
2130 -2131 2132 0
-2132 2131 0
-2132 -2130 0
c Var 'aux444' order represents '2' with '2133'
-2131 2133 0
c Var 'aux444' direct represents '2' with '2134'
2131 -2133 2134 0
-2134 2133 0
-2134 -2131 0
c Var 'aux444' order represents '3' with '2135'
-2133 2135 0
c Var 'aux444' direct represents '3' with '2136'
2133 -2135 2136 0
-2136 2135 0
-2136 -2133 0
c Var 'aux444' direct represents '4' with '-2135'
2130 2132 2134 2136 -2135 0
c Encoding variable: aux445 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '2137'
c Var 'aux445' direct represents '0' with '2137'
c Var 'aux445' order represents '1' with '2138'
-2137 2138 0
c Var 'aux445' direct represents '1' with '2139'
2137 -2138 2139 0
-2139 2138 0
-2139 -2137 0
c Var 'aux445' direct represents '2' with '-2138'
2137 2139 -2138 0
c Encoding variable: aux446 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '2140'
c Var 'aux446' direct represents '0' with '2140'
c Var 'aux446' order represents '1' with '2141'
-2140 2141 0
c Var 'aux446' direct represents '1' with '2142'
2140 -2141 2142 0
-2142 2141 0
-2142 -2140 0
c Var 'aux446' direct represents '2' with '-2141'
2140 2142 -2141 0
c Encoding variable: aux447 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '2143'
c Var 'aux447' direct represents '0' with '2143'
c Var 'aux447' order represents '1' with '2144'
-2143 2144 0
c Var 'aux447' direct represents '1' with '2145'
2143 -2144 2145 0
-2145 2144 0
-2145 -2143 0
c Var 'aux447' direct represents '2' with '-2144'
2143 2145 -2144 0
c Encoding variable: aux448 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '2146'
c Var 'aux448' direct represents '0' with '2146'
c Var 'aux448' order represents '1' with '2147'
-2146 2147 0
c Var 'aux448' direct represents '1' with '2148'
2146 -2147 2148 0
-2148 2147 0
-2148 -2146 0
c Var 'aux448' direct represents '2' with '-2147'
2146 2148 -2147 0
c Encoding variable: aux449 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux448))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '2149'
c Var 'aux449' direct represents '0' with '2149'
c Var 'aux449' order represents '1' with '2150'
-2149 2150 0
c Var 'aux449' direct represents '1' with '2151'
2149 -2150 2151 0
-2151 2150 0
-2151 -2149 0
c Var 'aux449' order represents '2' with '2152'
-2150 2152 0
c Var 'aux449' direct represents '2' with '2153'
2150 -2152 2153 0
-2153 2152 0
-2153 -2150 0
c Var 'aux449' direct represents '3' with '-2152'
2149 2151 2153 -2152 0
c Encoding variable: aux450 with domain: int(0..4) (representing constraint (aux445 + aux447))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '2154'
c Var 'aux450' direct represents '0' with '2154'
c Var 'aux450' order represents '1' with '2155'
-2154 2155 0
c Var 'aux450' direct represents '1' with '2156'
2154 -2155 2156 0
-2156 2155 0
-2156 -2154 0
c Var 'aux450' order represents '2' with '2157'
-2155 2157 0
c Var 'aux450' direct represents '2' with '2158'
2155 -2157 2158 0
-2158 2157 0
-2158 -2155 0
c Var 'aux450' order represents '3' with '2159'
-2157 2159 0
c Var 'aux450' direct represents '3' with '2160'
2157 -2159 2160 0
-2160 2159 0
-2160 -2157 0
c Var 'aux450' direct represents '4' with '-2159'
2154 2156 2158 2160 -2159 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '2161'
c Var 'aux451' direct represents '0' with '2161'
c Var 'aux451' order represents '1' with '2162'
-2161 2162 0
c Var 'aux451' direct represents '1' with '2163'
2161 -2162 2163 0
-2163 2162 0
-2163 -2161 0
c Var 'aux451' direct represents '2' with '-2162'
2161 2163 -2162 0
c Encoding variable: aux452 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '2164'
c Var 'aux452' direct represents '0' with '2164'
c Var 'aux452' order represents '1' with '2165'
-2164 2165 0
c Var 'aux452' direct represents '1' with '2166'
2164 -2165 2166 0
-2166 2165 0
-2166 -2164 0
c Var 'aux452' direct represents '2' with '-2165'
2164 2166 -2165 0
c Encoding variable: aux453 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '2167'
c Var 'aux453' direct represents '0' with '2167'
c Var 'aux453' order represents '1' with '2168'
-2167 2168 0
c Var 'aux453' direct represents '1' with '2169'
2167 -2168 2169 0
-2169 2168 0
-2169 -2167 0
c Var 'aux453' direct represents '2' with '-2168'
2167 2169 -2168 0
c Encoding variable: aux454 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '2170'
c Var 'aux454' direct represents '0' with '2170'
c Var 'aux454' order represents '1' with '2171'
-2170 2171 0
c Var 'aux454' direct represents '1' with '2172'
2170 -2171 2172 0
-2172 2171 0
-2172 -2170 0
c Var 'aux454' direct represents '2' with '-2171'
2170 2172 -2171 0
c Encoding variable: aux455 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux454))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '2173'
c Var 'aux455' direct represents '0' with '2173'
c Var 'aux455' order represents '1' with '2174'
-2173 2174 0
c Var 'aux455' direct represents '1' with '2175'
2173 -2174 2175 0
-2175 2174 0
-2175 -2173 0
c Var 'aux455' order represents '2' with '2176'
-2174 2176 0
c Var 'aux455' direct represents '2' with '2177'
2174 -2176 2177 0
-2177 2176 0
-2177 -2174 0
c Var 'aux455' direct represents '3' with '-2176'
2173 2175 2177 -2176 0
c Encoding variable: aux456 with domain: int(0..4) (representing constraint (aux451 + aux453))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '2178'
c Var 'aux456' direct represents '0' with '2178'
c Var 'aux456' order represents '1' with '2179'
-2178 2179 0
c Var 'aux456' direct represents '1' with '2180'
2178 -2179 2180 0
-2180 2179 0
-2180 -2178 0
c Var 'aux456' order represents '2' with '2181'
-2179 2181 0
c Var 'aux456' direct represents '2' with '2182'
2179 -2181 2182 0
-2182 2181 0
-2182 -2179 0
c Var 'aux456' order represents '3' with '2183'
-2181 2183 0
c Var 'aux456' direct represents '3' with '2184'
2181 -2183 2184 0
-2184 2183 0
-2184 -2181 0
c Var 'aux456' direct represents '4' with '-2183'
2178 2180 2182 2184 -2183 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '2185'
c Var 'aux457' direct represents '0' with '2185'
c Var 'aux457' order represents '1' with '2186'
-2185 2186 0
c Var 'aux457' direct represents '1' with '2187'
2185 -2186 2187 0
-2187 2186 0
-2187 -2185 0
c Var 'aux457' direct represents '2' with '-2186'
2185 2187 -2186 0
c Encoding variable: aux458 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '2188'
c Var 'aux458' direct represents '0' with '2188'
c Var 'aux458' order represents '1' with '2189'
-2188 2189 0
c Var 'aux458' direct represents '1' with '2190'
2188 -2189 2190 0
-2190 2189 0
-2190 -2188 0
c Var 'aux458' direct represents '2' with '-2189'
2188 2190 -2189 0
c Encoding variable: aux459 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '2191'
c Var 'aux459' direct represents '0' with '2191'
c Var 'aux459' order represents '1' with '2192'
-2191 2192 0
c Var 'aux459' direct represents '1' with '2193'
2191 -2192 2193 0
-2193 2192 0
-2193 -2191 0
c Var 'aux459' direct represents '2' with '-2192'
2191 2193 -2192 0
c Encoding variable: aux460 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '2194'
c Var 'aux460' direct represents '0' with '2194'
c Var 'aux460' order represents '1' with '2195'
-2194 2195 0
c Var 'aux460' direct represents '1' with '2196'
2194 -2195 2196 0
-2196 2195 0
-2196 -2194 0
c Var 'aux460' direct represents '2' with '-2195'
2194 2196 -2195 0
c Encoding variable: aux461 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux460))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '2197'
c Var 'aux461' direct represents '0' with '2197'
c Var 'aux461' order represents '1' with '2198'
-2197 2198 0
c Var 'aux461' direct represents '1' with '2199'
2197 -2198 2199 0
-2199 2198 0
-2199 -2197 0
c Var 'aux461' order represents '2' with '2200'
-2198 2200 0
c Var 'aux461' direct represents '2' with '2201'
2198 -2200 2201 0
-2201 2200 0
-2201 -2198 0
c Var 'aux461' direct represents '3' with '-2200'
2197 2199 2201 -2200 0
c Encoding variable: aux462 with domain: int(0..4) (representing constraint (aux457 + aux459))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '2202'
c Var 'aux462' direct represents '0' with '2202'
c Var 'aux462' order represents '1' with '2203'
-2202 2203 0
c Var 'aux462' direct represents '1' with '2204'
2202 -2203 2204 0
-2204 2203 0
-2204 -2202 0
c Var 'aux462' order represents '2' with '2205'
-2203 2205 0
c Var 'aux462' direct represents '2' with '2206'
2203 -2205 2206 0
-2206 2205 0
-2206 -2203 0
c Var 'aux462' order represents '3' with '2207'
-2205 2207 0
c Var 'aux462' direct represents '3' with '2208'
2205 -2207 2208 0
-2208 2207 0
-2208 -2205 0
c Var 'aux462' direct represents '4' with '-2207'
2202 2204 2206 2208 -2207 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '2209'
c Var 'aux463' direct represents '0' with '2209'
c Var 'aux463' order represents '1' with '2210'
-2209 2210 0
c Var 'aux463' direct represents '1' with '2211'
2209 -2210 2211 0
-2211 2210 0
-2211 -2209 0
c Var 'aux463' direct represents '2' with '-2210'
2209 2211 -2210 0
c Encoding variable: aux464 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '2212'
c Var 'aux464' direct represents '0' with '2212'
c Var 'aux464' order represents '1' with '2213'
-2212 2213 0
c Var 'aux464' direct represents '1' with '2214'
2212 -2213 2214 0
-2214 2213 0
-2214 -2212 0
c Var 'aux464' direct represents '2' with '-2213'
2212 2214 -2213 0
c Encoding variable: aux465 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '2215'
c Var 'aux465' direct represents '0' with '2215'
c Var 'aux465' order represents '1' with '2216'
-2215 2216 0
c Var 'aux465' direct represents '1' with '2217'
2215 -2216 2217 0
-2217 2216 0
-2217 -2215 0
c Var 'aux465' direct represents '2' with '-2216'
2215 2217 -2216 0
c Encoding variable: aux466 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '2218'
c Var 'aux466' direct represents '0' with '2218'
c Var 'aux466' order represents '1' with '2219'
-2218 2219 0
c Var 'aux466' direct represents '1' with '2220'
2218 -2219 2220 0
-2220 2219 0
-2220 -2218 0
c Var 'aux466' direct represents '2' with '-2219'
2218 2220 -2219 0
c Encoding variable: aux467 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux466))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '2221'
c Var 'aux467' direct represents '0' with '2221'
c Var 'aux467' order represents '1' with '2222'
-2221 2222 0
c Var 'aux467' direct represents '1' with '2223'
2221 -2222 2223 0
-2223 2222 0
-2223 -2221 0
c Var 'aux467' order represents '2' with '2224'
-2222 2224 0
c Var 'aux467' direct represents '2' with '2225'
2222 -2224 2225 0
-2225 2224 0
-2225 -2222 0
c Var 'aux467' direct represents '3' with '-2224'
2221 2223 2225 -2224 0
c Encoding variable: aux468 with domain: int(0..4) (representing constraint (aux463 + aux465))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2226'
c Var 'aux468' direct represents '0' with '2226'
c Var 'aux468' order represents '1' with '2227'
-2226 2227 0
c Var 'aux468' direct represents '1' with '2228'
2226 -2227 2228 0
-2228 2227 0
-2228 -2226 0
c Var 'aux468' order represents '2' with '2229'
-2227 2229 0
c Var 'aux468' direct represents '2' with '2230'
2227 -2229 2230 0
-2230 2229 0
-2230 -2227 0
c Var 'aux468' order represents '3' with '2231'
-2229 2231 0
c Var 'aux468' direct represents '3' with '2232'
2229 -2231 2232 0
-2232 2231 0
-2232 -2229 0
c Var 'aux468' direct represents '4' with '-2231'
2226 2228 2230 2232 -2231 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2233'
c Var 'aux469' direct represents '0' with '2233'
c Var 'aux469' order represents '1' with '2234'
-2233 2234 0
c Var 'aux469' direct represents '1' with '2235'
2233 -2234 2235 0
-2235 2234 0
-2235 -2233 0
c Var 'aux469' direct represents '2' with '-2234'
2233 2235 -2234 0
c Encoding variable: aux470 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2236'
c Var 'aux470' direct represents '0' with '2236'
c Var 'aux470' order represents '1' with '2237'
-2236 2237 0
c Var 'aux470' direct represents '1' with '2238'
2236 -2237 2238 0
-2238 2237 0
-2238 -2236 0
c Var 'aux470' direct represents '2' with '-2237'
2236 2238 -2237 0
c Encoding variable: aux471 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2239'
c Var 'aux471' direct represents '0' with '2239'
c Var 'aux471' order represents '1' with '2240'
-2239 2240 0
c Var 'aux471' direct represents '1' with '2241'
2239 -2240 2241 0
-2241 2240 0
-2241 -2239 0
c Var 'aux471' direct represents '2' with '-2240'
2239 2241 -2240 0
c Encoding variable: aux472 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2242'
c Var 'aux472' direct represents '0' with '2242'
c Var 'aux472' order represents '1' with '2243'
-2242 2243 0
c Var 'aux472' direct represents '1' with '2244'
2242 -2243 2244 0
-2244 2243 0
-2244 -2242 0
c Var 'aux472' direct represents '2' with '-2243'
2242 2244 -2243 0
c Encoding variable: aux473 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux472))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2245'
c Var 'aux473' direct represents '0' with '2245'
c Var 'aux473' order represents '1' with '2246'
-2245 2246 0
c Var 'aux473' direct represents '1' with '2247'
2245 -2246 2247 0
-2247 2246 0
-2247 -2245 0
c Var 'aux473' order represents '2' with '2248'
-2246 2248 0
c Var 'aux473' direct represents '2' with '2249'
2246 -2248 2249 0
-2249 2248 0
-2249 -2246 0
c Var 'aux473' direct represents '3' with '-2248'
2245 2247 2249 -2248 0
c Encoding variable: aux474 with domain: int(0..4) (representing constraint (aux469 + aux471))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2250'
c Var 'aux474' direct represents '0' with '2250'
c Var 'aux474' order represents '1' with '2251'
-2250 2251 0
c Var 'aux474' direct represents '1' with '2252'
2250 -2251 2252 0
-2252 2251 0
-2252 -2250 0
c Var 'aux474' order represents '2' with '2253'
-2251 2253 0
c Var 'aux474' direct represents '2' with '2254'
2251 -2253 2254 0
-2254 2253 0
-2254 -2251 0
c Var 'aux474' order represents '3' with '2255'
-2253 2255 0
c Var 'aux474' direct represents '3' with '2256'
2253 -2255 2256 0
-2256 2255 0
-2256 -2253 0
c Var 'aux474' direct represents '4' with '-2255'
2250 2252 2254 2256 -2255 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2257'
c Var 'aux475' direct represents '0' with '2257'
c Var 'aux475' order represents '1' with '2258'
-2257 2258 0
c Var 'aux475' direct represents '1' with '2259'
2257 -2258 2259 0
-2259 2258 0
-2259 -2257 0
c Var 'aux475' direct represents '2' with '-2258'
2257 2259 -2258 0
c Encoding variable: aux476 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2260'
c Var 'aux476' direct represents '0' with '2260'
c Var 'aux476' order represents '1' with '2261'
-2260 2261 0
c Var 'aux476' direct represents '1' with '2262'
2260 -2261 2262 0
-2262 2261 0
-2262 -2260 0
c Var 'aux476' direct represents '2' with '-2261'
2260 2262 -2261 0
c Encoding variable: aux477 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2263'
c Var 'aux477' direct represents '0' with '2263'
c Var 'aux477' order represents '1' with '2264'
-2263 2264 0
c Var 'aux477' direct represents '1' with '2265'
2263 -2264 2265 0
-2265 2264 0
-2265 -2263 0
c Var 'aux477' direct represents '2' with '-2264'
2263 2265 -2264 0
c Encoding variable: aux478 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2266'
c Var 'aux478' direct represents '0' with '2266'
c Var 'aux478' order represents '1' with '2267'
-2266 2267 0
c Var 'aux478' direct represents '1' with '2268'
2266 -2267 2268 0
-2268 2267 0
-2268 -2266 0
c Var 'aux478' direct represents '2' with '-2267'
2266 2268 -2267 0
c Encoding variable: aux479 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux478))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2269'
c Var 'aux479' direct represents '0' with '2269'
c Var 'aux479' order represents '1' with '2270'
-2269 2270 0
c Var 'aux479' direct represents '1' with '2271'
2269 -2270 2271 0
-2271 2270 0
-2271 -2269 0
c Var 'aux479' order represents '2' with '2272'
-2270 2272 0
c Var 'aux479' direct represents '2' with '2273'
2270 -2272 2273 0
-2273 2272 0
-2273 -2270 0
c Var 'aux479' direct represents '3' with '-2272'
2269 2271 2273 -2272 0
c Encoding variable: aux480 with domain: int(0..4) (representing constraint (aux475 + aux477))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2274'
c Var 'aux480' direct represents '0' with '2274'
c Var 'aux480' order represents '1' with '2275'
-2274 2275 0
c Var 'aux480' direct represents '1' with '2276'
2274 -2275 2276 0
-2276 2275 0
-2276 -2274 0
c Var 'aux480' order represents '2' with '2277'
-2275 2277 0
c Var 'aux480' direct represents '2' with '2278'
2275 -2277 2278 0
-2278 2277 0
-2278 -2275 0
c Var 'aux480' order represents '3' with '2279'
-2277 2279 0
c Var 'aux480' direct represents '3' with '2280'
2277 -2279 2280 0
-2280 2279 0
-2280 -2277 0
c Var 'aux480' direct represents '4' with '-2279'
2274 2276 2278 2280 -2279 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2281'
c Var 'aux481' direct represents '0' with '2281'
c Var 'aux481' order represents '1' with '2282'
-2281 2282 0
c Var 'aux481' direct represents '1' with '2283'
2281 -2282 2283 0
-2283 2282 0
-2283 -2281 0
c Var 'aux481' direct represents '2' with '-2282'
2281 2283 -2282 0
c Encoding variable: aux482 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2284'
c Var 'aux482' direct represents '0' with '2284'
c Var 'aux482' order represents '1' with '2285'
-2284 2285 0
c Var 'aux482' direct represents '1' with '2286'
2284 -2285 2286 0
-2286 2285 0
-2286 -2284 0
c Var 'aux482' direct represents '2' with '-2285'
2284 2286 -2285 0
c Encoding variable: aux483 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2287'
c Var 'aux483' direct represents '0' with '2287'
c Var 'aux483' order represents '1' with '2288'
-2287 2288 0
c Var 'aux483' direct represents '1' with '2289'
2287 -2288 2289 0
-2289 2288 0
-2289 -2287 0
c Var 'aux483' direct represents '2' with '-2288'
2287 2289 -2288 0
c Encoding variable: aux484 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2290'
c Var 'aux484' direct represents '0' with '2290'
c Var 'aux484' order represents '1' with '2291'
-2290 2291 0
c Var 'aux484' direct represents '1' with '2292'
2290 -2291 2292 0
-2292 2291 0
-2292 -2290 0
c Var 'aux484' direct represents '2' with '-2291'
2290 2292 -2291 0
c Encoding variable: aux485 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux484))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2293'
c Var 'aux485' direct represents '0' with '2293'
c Var 'aux485' order represents '1' with '2294'
-2293 2294 0
c Var 'aux485' direct represents '1' with '2295'
2293 -2294 2295 0
-2295 2294 0
-2295 -2293 0
c Var 'aux485' order represents '2' with '2296'
-2294 2296 0
c Var 'aux485' direct represents '2' with '2297'
2294 -2296 2297 0
-2297 2296 0
-2297 -2294 0
c Var 'aux485' direct represents '3' with '-2296'
2293 2295 2297 -2296 0
c Encoding variable: aux486 with domain: int(0..4) (representing constraint (aux481 + aux483))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2298'
c Var 'aux486' direct represents '0' with '2298'
c Var 'aux486' order represents '1' with '2299'
-2298 2299 0
c Var 'aux486' direct represents '1' with '2300'
2298 -2299 2300 0
-2300 2299 0
-2300 -2298 0
c Var 'aux486' order represents '2' with '2301'
-2299 2301 0
c Var 'aux486' direct represents '2' with '2302'
2299 -2301 2302 0
-2302 2301 0
-2302 -2299 0
c Var 'aux486' order represents '3' with '2303'
-2301 2303 0
c Var 'aux486' direct represents '3' with '2304'
2301 -2303 2304 0
-2304 2303 0
-2304 -2301 0
c Var 'aux486' direct represents '4' with '-2303'
2298 2300 2302 2304 -2303 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2305'
c Var 'aux487' direct represents '0' with '2305'
c Var 'aux487' order represents '1' with '2306'
-2305 2306 0
c Var 'aux487' direct represents '1' with '2307'
2305 -2306 2307 0
-2307 2306 0
-2307 -2305 0
c Var 'aux487' direct represents '2' with '-2306'
2305 2307 -2306 0
c Encoding variable: aux488 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2308'
c Var 'aux488' direct represents '0' with '2308'
c Var 'aux488' order represents '1' with '2309'
-2308 2309 0
c Var 'aux488' direct represents '1' with '2310'
2308 -2309 2310 0
-2310 2309 0
-2310 -2308 0
c Var 'aux488' direct represents '2' with '-2309'
2308 2310 -2309 0
c Encoding variable: aux489 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2311'
c Var 'aux489' direct represents '0' with '2311'
c Var 'aux489' order represents '1' with '2312'
-2311 2312 0
c Var 'aux489' direct represents '1' with '2313'
2311 -2312 2313 0
-2313 2312 0
-2313 -2311 0
c Var 'aux489' direct represents '2' with '-2312'
2311 2313 -2312 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2314'
c Var 'aux490' direct represents '0' with '2314'
c Var 'aux490' order represents '1' with '2315'
-2314 2315 0
c Var 'aux490' direct represents '1' with '2316'
2314 -2315 2316 0
-2316 2315 0
-2316 -2314 0
c Var 'aux490' direct represents '2' with '-2315'
2314 2316 -2315 0
c Encoding variable: aux491 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux490))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2317'
c Var 'aux491' direct represents '0' with '2317'
c Var 'aux491' order represents '1' with '2318'
-2317 2318 0
c Var 'aux491' direct represents '1' with '2319'
2317 -2318 2319 0
-2319 2318 0
-2319 -2317 0
c Var 'aux491' order represents '2' with '2320'
-2318 2320 0
c Var 'aux491' direct represents '2' with '2321'
2318 -2320 2321 0
-2321 2320 0
-2321 -2318 0
c Var 'aux491' direct represents '3' with '-2320'
2317 2319 2321 -2320 0
c Encoding variable: aux492 with domain: int(0..4) (representing constraint (aux487 + aux489))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2322'
c Var 'aux492' direct represents '0' with '2322'
c Var 'aux492' order represents '1' with '2323'
-2322 2323 0
c Var 'aux492' direct represents '1' with '2324'
2322 -2323 2324 0
-2324 2323 0
-2324 -2322 0
c Var 'aux492' order represents '2' with '2325'
-2323 2325 0
c Var 'aux492' direct represents '2' with '2326'
2323 -2325 2326 0
-2326 2325 0
-2326 -2323 0
c Var 'aux492' order represents '3' with '2327'
-2325 2327 0
c Var 'aux492' direct represents '3' with '2328'
2325 -2327 2328 0
-2328 2327 0
-2328 -2325 0
c Var 'aux492' direct represents '4' with '-2327'
2322 2324 2326 2328 -2327 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2329'
c Var 'aux493' direct represents '0' with '2329'
c Var 'aux493' order represents '1' with '2330'
-2329 2330 0
c Var 'aux493' direct represents '1' with '2331'
2329 -2330 2331 0
-2331 2330 0
-2331 -2329 0
c Var 'aux493' direct represents '2' with '-2330'
2329 2331 -2330 0
c Encoding variable: aux494 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2332'
c Var 'aux494' direct represents '0' with '2332'
c Var 'aux494' order represents '1' with '2333'
-2332 2333 0
c Var 'aux494' direct represents '1' with '2334'
2332 -2333 2334 0
-2334 2333 0
-2334 -2332 0
c Var 'aux494' direct represents '2' with '-2333'
2332 2334 -2333 0
c Encoding variable: aux495 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2335'
c Var 'aux495' direct represents '0' with '2335'
c Var 'aux495' order represents '1' with '2336'
-2335 2336 0
c Var 'aux495' direct represents '1' with '2337'
2335 -2336 2337 0
-2337 2336 0
-2337 -2335 0
c Var 'aux495' direct represents '2' with '-2336'
2335 2337 -2336 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2338'
c Var 'aux496' direct represents '0' with '2338'
c Var 'aux496' order represents '1' with '2339'
-2338 2339 0
c Var 'aux496' direct represents '1' with '2340'
2338 -2339 2340 0
-2340 2339 0
-2340 -2338 0
c Var 'aux496' direct represents '2' with '-2339'
2338 2340 -2339 0
c Encoding variable: aux497 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux496))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2341'
c Var 'aux497' direct represents '0' with '2341'
c Var 'aux497' order represents '1' with '2342'
-2341 2342 0
c Var 'aux497' direct represents '1' with '2343'
2341 -2342 2343 0
-2343 2342 0
-2343 -2341 0
c Var 'aux497' order represents '2' with '2344'
-2342 2344 0
c Var 'aux497' direct represents '2' with '2345'
2342 -2344 2345 0
-2345 2344 0
-2345 -2342 0
c Var 'aux497' direct represents '3' with '-2344'
2341 2343 2345 -2344 0
c Encoding variable: aux498 with domain: int(0..4) (representing constraint (aux493 + aux495))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2346'
c Var 'aux498' direct represents '0' with '2346'
c Var 'aux498' order represents '1' with '2347'
-2346 2347 0
c Var 'aux498' direct represents '1' with '2348'
2346 -2347 2348 0
-2348 2347 0
-2348 -2346 0
c Var 'aux498' order represents '2' with '2349'
-2347 2349 0
c Var 'aux498' direct represents '2' with '2350'
2347 -2349 2350 0
-2350 2349 0
-2350 -2347 0
c Var 'aux498' order represents '3' with '2351'
-2349 2351 0
c Var 'aux498' direct represents '3' with '2352'
2349 -2351 2352 0
-2352 2351 0
-2352 -2349 0
c Var 'aux498' direct represents '4' with '-2351'
2346 2348 2350 2352 -2351 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2353'
c Var 'aux499' direct represents '0' with '2353'
c Var 'aux499' order represents '1' with '2354'
-2353 2354 0
c Var 'aux499' direct represents '1' with '2355'
2353 -2354 2355 0
-2355 2354 0
-2355 -2353 0
c Var 'aux499' direct represents '2' with '-2354'
2353 2355 -2354 0
c Encoding variable: aux500 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2356'
c Var 'aux500' direct represents '0' with '2356'
c Var 'aux500' order represents '1' with '2357'
-2356 2357 0
c Var 'aux500' direct represents '1' with '2358'
2356 -2357 2358 0
-2358 2357 0
-2358 -2356 0
c Var 'aux500' direct represents '2' with '-2357'
2356 2358 -2357 0
c Encoding variable: aux501 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2359'
c Var 'aux501' direct represents '0' with '2359'
c Var 'aux501' order represents '1' with '2360'
-2359 2360 0
c Var 'aux501' direct represents '1' with '2361'
2359 -2360 2361 0
-2361 2360 0
-2361 -2359 0
c Var 'aux501' direct represents '2' with '-2360'
2359 2361 -2360 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2362'
c Var 'aux502' direct represents '0' with '2362'
c Var 'aux502' order represents '1' with '2363'
-2362 2363 0
c Var 'aux502' direct represents '1' with '2364'
2362 -2363 2364 0
-2364 2363 0
-2364 -2362 0
c Var 'aux502' direct represents '2' with '-2363'
2362 2364 -2363 0
c Encoding variable: aux503 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux502))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2365'
c Var 'aux503' direct represents '0' with '2365'
c Var 'aux503' order represents '1' with '2366'
-2365 2366 0
c Var 'aux503' direct represents '1' with '2367'
2365 -2366 2367 0
-2367 2366 0
-2367 -2365 0
c Var 'aux503' order represents '2' with '2368'
-2366 2368 0
c Var 'aux503' direct represents '2' with '2369'
2366 -2368 2369 0
-2369 2368 0
-2369 -2366 0
c Var 'aux503' direct represents '3' with '-2368'
2365 2367 2369 -2368 0
c Encoding variable: aux504 with domain: int(0..4) (representing constraint (aux499 + aux501))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2370'
c Var 'aux504' direct represents '0' with '2370'
c Var 'aux504' order represents '1' with '2371'
-2370 2371 0
c Var 'aux504' direct represents '1' with '2372'
2370 -2371 2372 0
-2372 2371 0
-2372 -2370 0
c Var 'aux504' order represents '2' with '2373'
-2371 2373 0
c Var 'aux504' direct represents '2' with '2374'
2371 -2373 2374 0
-2374 2373 0
-2374 -2371 0
c Var 'aux504' order represents '3' with '2375'
-2373 2375 0
c Var 'aux504' direct represents '3' with '2376'
2373 -2375 2376 0
-2376 2375 0
-2376 -2373 0
c Var 'aux504' direct represents '4' with '-2375'
2370 2372 2374 2376 -2375 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2377'
c Var 'aux505' direct represents '0' with '2377'
c Var 'aux505' order represents '1' with '2378'
-2377 2378 0
c Var 'aux505' direct represents '1' with '2379'
2377 -2378 2379 0
-2379 2378 0
-2379 -2377 0
c Var 'aux505' direct represents '2' with '-2378'
2377 2379 -2378 0
c Encoding variable: aux506 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2380'
c Var 'aux506' direct represents '0' with '2380'
c Var 'aux506' order represents '1' with '2381'
-2380 2381 0
c Var 'aux506' direct represents '1' with '2382'
2380 -2381 2382 0
-2382 2381 0
-2382 -2380 0
c Var 'aux506' direct represents '2' with '-2381'
2380 2382 -2381 0
c Encoding variable: aux507 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2383'
c Var 'aux507' direct represents '0' with '2383'
c Var 'aux507' order represents '1' with '2384'
-2383 2384 0
c Var 'aux507' direct represents '1' with '2385'
2383 -2384 2385 0
-2385 2384 0
-2385 -2383 0
c Var 'aux507' direct represents '2' with '-2384'
2383 2385 -2384 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2386'
c Var 'aux508' direct represents '0' with '2386'
c Var 'aux508' order represents '1' with '2387'
-2386 2387 0
c Var 'aux508' direct represents '1' with '2388'
2386 -2387 2388 0
-2388 2387 0
-2388 -2386 0
c Var 'aux508' direct represents '2' with '-2387'
2386 2388 -2387 0
c Encoding variable: aux509 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux508))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2389'
c Var 'aux509' direct represents '0' with '2389'
c Var 'aux509' order represents '1' with '2390'
-2389 2390 0
c Var 'aux509' direct represents '1' with '2391'
2389 -2390 2391 0
-2391 2390 0
-2391 -2389 0
c Var 'aux509' order represents '2' with '2392'
-2390 2392 0
c Var 'aux509' direct represents '2' with '2393'
2390 -2392 2393 0
-2393 2392 0
-2393 -2390 0
c Var 'aux509' direct represents '3' with '-2392'
2389 2391 2393 -2392 0
c Encoding variable: aux510 with domain: int(0..4) (representing constraint (aux505 + aux507))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2394'
c Var 'aux510' direct represents '0' with '2394'
c Var 'aux510' order represents '1' with '2395'
-2394 2395 0
c Var 'aux510' direct represents '1' with '2396'
2394 -2395 2396 0
-2396 2395 0
-2396 -2394 0
c Var 'aux510' order represents '2' with '2397'
-2395 2397 0
c Var 'aux510' direct represents '2' with '2398'
2395 -2397 2398 0
-2398 2397 0
-2398 -2395 0
c Var 'aux510' order represents '3' with '2399'
-2397 2399 0
c Var 'aux510' direct represents '3' with '2400'
2397 -2399 2400 0
-2400 2399 0
-2400 -2397 0
c Var 'aux510' direct represents '4' with '-2399'
2394 2396 2398 2400 -2399 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2401'
c Var 'aux511' direct represents '0' with '2401'
c Var 'aux511' order represents '1' with '2402'
-2401 2402 0
c Var 'aux511' direct represents '1' with '2403'
2401 -2402 2403 0
-2403 2402 0
-2403 -2401 0
c Var 'aux511' direct represents '2' with '-2402'
2401 2403 -2402 0
c Encoding variable: aux512 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2404'
c Var 'aux512' direct represents '0' with '2404'
c Var 'aux512' order represents '1' with '2405'
-2404 2405 0
c Var 'aux512' direct represents '1' with '2406'
2404 -2405 2406 0
-2406 2405 0
-2406 -2404 0
c Var 'aux512' direct represents '2' with '-2405'
2404 2406 -2405 0
c Encoding variable: aux513 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2407'
c Var 'aux513' direct represents '0' with '2407'
c Var 'aux513' order represents '1' with '2408'
-2407 2408 0
c Var 'aux513' direct represents '1' with '2409'
2407 -2408 2409 0
-2409 2408 0
-2409 -2407 0
c Var 'aux513' direct represents '2' with '-2408'
2407 2409 -2408 0
c Encoding variable: aux514 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2410'
c Var 'aux514' direct represents '0' with '2410'
c Var 'aux514' order represents '1' with '2411'
-2410 2411 0
c Var 'aux514' direct represents '1' with '2412'
2410 -2411 2412 0
-2412 2411 0
-2412 -2410 0
c Var 'aux514' direct represents '2' with '-2411'
2410 2412 -2411 0
c Encoding variable: aux515 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux514))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2413'
c Var 'aux515' direct represents '0' with '2413'
c Var 'aux515' order represents '1' with '2414'
-2413 2414 0
c Var 'aux515' direct represents '1' with '2415'
2413 -2414 2415 0
-2415 2414 0
-2415 -2413 0
c Var 'aux515' order represents '2' with '2416'
-2414 2416 0
c Var 'aux515' direct represents '2' with '2417'
2414 -2416 2417 0
-2417 2416 0
-2417 -2414 0
c Var 'aux515' direct represents '3' with '-2416'
2413 2415 2417 -2416 0
c Encoding variable: aux516 with domain: int(0..4) (representing constraint (aux511 + aux513))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2418'
c Var 'aux516' direct represents '0' with '2418'
c Var 'aux516' order represents '1' with '2419'
-2418 2419 0
c Var 'aux516' direct represents '1' with '2420'
2418 -2419 2420 0
-2420 2419 0
-2420 -2418 0
c Var 'aux516' order represents '2' with '2421'
-2419 2421 0
c Var 'aux516' direct represents '2' with '2422'
2419 -2421 2422 0
-2422 2421 0
-2422 -2419 0
c Var 'aux516' order represents '3' with '2423'
-2421 2423 0
c Var 'aux516' direct represents '3' with '2424'
2421 -2423 2424 0
-2424 2423 0
-2424 -2421 0
c Var 'aux516' direct represents '4' with '-2423'
2418 2420 2422 2424 -2423 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2425'
c Var 'aux517' direct represents '0' with '2425'
c Var 'aux517' order represents '1' with '2426'
-2425 2426 0
c Var 'aux517' direct represents '1' with '2427'
2425 -2426 2427 0
-2427 2426 0
-2427 -2425 0
c Var 'aux517' direct represents '2' with '-2426'
2425 2427 -2426 0
c Encoding variable: aux518 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2428'
c Var 'aux518' direct represents '0' with '2428'
c Var 'aux518' order represents '1' with '2429'
-2428 2429 0
c Var 'aux518' direct represents '1' with '2430'
2428 -2429 2430 0
-2430 2429 0
-2430 -2428 0
c Var 'aux518' direct represents '2' with '-2429'
2428 2430 -2429 0
c Encoding variable: aux519 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2431'
c Var 'aux519' direct represents '0' with '2431'
c Var 'aux519' order represents '1' with '2432'
-2431 2432 0
c Var 'aux519' direct represents '1' with '2433'
2431 -2432 2433 0
-2433 2432 0
-2433 -2431 0
c Var 'aux519' direct represents '2' with '-2432'
2431 2433 -2432 0
c Encoding variable: aux520 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2434'
c Var 'aux520' direct represents '0' with '2434'
c Var 'aux520' order represents '1' with '2435'
-2434 2435 0
c Var 'aux520' direct represents '1' with '2436'
2434 -2435 2436 0
-2436 2435 0
-2436 -2434 0
c Var 'aux520' direct represents '2' with '-2435'
2434 2436 -2435 0
c Encoding variable: aux521 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux520))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2437'
c Var 'aux521' direct represents '0' with '2437'
c Var 'aux521' order represents '1' with '2438'
-2437 2438 0
c Var 'aux521' direct represents '1' with '2439'
2437 -2438 2439 0
-2439 2438 0
-2439 -2437 0
c Var 'aux521' order represents '2' with '2440'
-2438 2440 0
c Var 'aux521' direct represents '2' with '2441'
2438 -2440 2441 0
-2441 2440 0
-2441 -2438 0
c Var 'aux521' direct represents '3' with '-2440'
2437 2439 2441 -2440 0
c Encoding variable: aux522 with domain: int(0..4) (representing constraint (aux517 + aux519))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2442'
c Var 'aux522' direct represents '0' with '2442'
c Var 'aux522' order represents '1' with '2443'
-2442 2443 0
c Var 'aux522' direct represents '1' with '2444'
2442 -2443 2444 0
-2444 2443 0
-2444 -2442 0
c Var 'aux522' order represents '2' with '2445'
-2443 2445 0
c Var 'aux522' direct represents '2' with '2446'
2443 -2445 2446 0
-2446 2445 0
-2446 -2443 0
c Var 'aux522' order represents '3' with '2447'
-2445 2447 0
c Var 'aux522' direct represents '3' with '2448'
2445 -2447 2448 0
-2448 2447 0
-2448 -2445 0
c Var 'aux522' direct represents '4' with '-2447'
2442 2444 2446 2448 -2447 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2449'
c Var 'aux523' direct represents '0' with '2449'
c Var 'aux523' order represents '1' with '2450'
-2449 2450 0
c Var 'aux523' direct represents '1' with '2451'
2449 -2450 2451 0
-2451 2450 0
-2451 -2449 0
c Var 'aux523' direct represents '2' with '-2450'
2449 2451 -2450 0
c Encoding variable: aux524 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2452'
c Var 'aux524' direct represents '0' with '2452'
c Var 'aux524' order represents '1' with '2453'
-2452 2453 0
c Var 'aux524' direct represents '1' with '2454'
2452 -2453 2454 0
-2454 2453 0
-2454 -2452 0
c Var 'aux524' direct represents '2' with '-2453'
2452 2454 -2453 0
c Encoding variable: aux525 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2455'
c Var 'aux525' direct represents '0' with '2455'
c Var 'aux525' order represents '1' with '2456'
-2455 2456 0
c Var 'aux525' direct represents '1' with '2457'
2455 -2456 2457 0
-2457 2456 0
-2457 -2455 0
c Var 'aux525' direct represents '2' with '-2456'
2455 2457 -2456 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2458'
c Var 'aux526' direct represents '0' with '2458'
c Var 'aux526' order represents '1' with '2459'
-2458 2459 0
c Var 'aux526' direct represents '1' with '2460'
2458 -2459 2460 0
-2460 2459 0
-2460 -2458 0
c Var 'aux526' direct represents '2' with '-2459'
2458 2460 -2459 0
c Encoding variable: aux527 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux526))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2461'
c Var 'aux527' direct represents '0' with '2461'
c Var 'aux527' order represents '1' with '2462'
-2461 2462 0
c Var 'aux527' direct represents '1' with '2463'
2461 -2462 2463 0
-2463 2462 0
-2463 -2461 0
c Var 'aux527' order represents '2' with '2464'
-2462 2464 0
c Var 'aux527' direct represents '2' with '2465'
2462 -2464 2465 0
-2465 2464 0
-2465 -2462 0
c Var 'aux527' direct represents '3' with '-2464'
2461 2463 2465 -2464 0
c Encoding variable: aux528 with domain: int(0..4) (representing constraint (aux523 + aux525))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2466'
c Var 'aux528' direct represents '0' with '2466'
c Var 'aux528' order represents '1' with '2467'
-2466 2467 0
c Var 'aux528' direct represents '1' with '2468'
2466 -2467 2468 0
-2468 2467 0
-2468 -2466 0
c Var 'aux528' order represents '2' with '2469'
-2467 2469 0
c Var 'aux528' direct represents '2' with '2470'
2467 -2469 2470 0
-2470 2469 0
-2470 -2467 0
c Var 'aux528' order represents '3' with '2471'
-2469 2471 0
c Var 'aux528' direct represents '3' with '2472'
2469 -2471 2472 0
-2472 2471 0
-2472 -2469 0
c Var 'aux528' direct represents '4' with '-2471'
2466 2468 2470 2472 -2471 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2473'
c Var 'aux529' direct represents '0' with '2473'
c Var 'aux529' order represents '1' with '2474'
-2473 2474 0
c Var 'aux529' direct represents '1' with '2475'
2473 -2474 2475 0
-2475 2474 0
-2475 -2473 0
c Var 'aux529' direct represents '2' with '-2474'
2473 2475 -2474 0
c Encoding variable: aux530 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2476'
c Var 'aux530' direct represents '0' with '2476'
c Var 'aux530' order represents '1' with '2477'
-2476 2477 0
c Var 'aux530' direct represents '1' with '2478'
2476 -2477 2478 0
-2478 2477 0
-2478 -2476 0
c Var 'aux530' direct represents '2' with '-2477'
2476 2478 -2477 0
c Encoding variable: aux531 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2479'
c Var 'aux531' direct represents '0' with '2479'
c Var 'aux531' order represents '1' with '2480'
-2479 2480 0
c Var 'aux531' direct represents '1' with '2481'
2479 -2480 2481 0
-2481 2480 0
-2481 -2479 0
c Var 'aux531' direct represents '2' with '-2480'
2479 2481 -2480 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2482'
c Var 'aux532' direct represents '0' with '2482'
c Var 'aux532' order represents '1' with '2483'
-2482 2483 0
c Var 'aux532' direct represents '1' with '2484'
2482 -2483 2484 0
-2484 2483 0
-2484 -2482 0
c Var 'aux532' direct represents '2' with '-2483'
2482 2484 -2483 0
c Encoding variable: aux533 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux532))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2485'
c Var 'aux533' direct represents '0' with '2485'
c Var 'aux533' order represents '1' with '2486'
-2485 2486 0
c Var 'aux533' direct represents '1' with '2487'
2485 -2486 2487 0
-2487 2486 0
-2487 -2485 0
c Var 'aux533' order represents '2' with '2488'
-2486 2488 0
c Var 'aux533' direct represents '2' with '2489'
2486 -2488 2489 0
-2489 2488 0
-2489 -2486 0
c Var 'aux533' direct represents '3' with '-2488'
2485 2487 2489 -2488 0
c Encoding variable: aux534 with domain: int(0..4) (representing constraint (aux529 + aux531))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2490'
c Var 'aux534' direct represents '0' with '2490'
c Var 'aux534' order represents '1' with '2491'
-2490 2491 0
c Var 'aux534' direct represents '1' with '2492'
2490 -2491 2492 0
-2492 2491 0
-2492 -2490 0
c Var 'aux534' order represents '2' with '2493'
-2491 2493 0
c Var 'aux534' direct represents '2' with '2494'
2491 -2493 2494 0
-2494 2493 0
-2494 -2491 0
c Var 'aux534' order represents '3' with '2495'
-2493 2495 0
c Var 'aux534' direct represents '3' with '2496'
2493 -2495 2496 0
-2496 2495 0
-2496 -2493 0
c Var 'aux534' direct represents '4' with '-2495'
2490 2492 2494 2496 -2495 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2497'
c Var 'aux535' direct represents '0' with '2497'
c Var 'aux535' order represents '1' with '2498'
-2497 2498 0
c Var 'aux535' direct represents '1' with '2499'
2497 -2498 2499 0
-2499 2498 0
-2499 -2497 0
c Var 'aux535' direct represents '2' with '-2498'
2497 2499 -2498 0
c Encoding variable: aux536 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2500'
c Var 'aux536' direct represents '0' with '2500'
c Var 'aux536' order represents '1' with '2501'
-2500 2501 0
c Var 'aux536' direct represents '1' with '2502'
2500 -2501 2502 0
-2502 2501 0
-2502 -2500 0
c Var 'aux536' direct represents '2' with '-2501'
2500 2502 -2501 0
c Encoding variable: aux537 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2503'
c Var 'aux537' direct represents '0' with '2503'
c Var 'aux537' order represents '1' with '2504'
-2503 2504 0
c Var 'aux537' direct represents '1' with '2505'
2503 -2504 2505 0
-2505 2504 0
-2505 -2503 0
c Var 'aux537' direct represents '2' with '-2504'
2503 2505 -2504 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2506'
c Var 'aux538' direct represents '0' with '2506'
c Var 'aux538' order represents '1' with '2507'
-2506 2507 0
c Var 'aux538' direct represents '1' with '2508'
2506 -2507 2508 0
-2508 2507 0
-2508 -2506 0
c Var 'aux538' direct represents '2' with '-2507'
2506 2508 -2507 0
c Encoding variable: aux539 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux538))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2509'
c Var 'aux539' direct represents '0' with '2509'
c Var 'aux539' order represents '1' with '2510'
-2509 2510 0
c Var 'aux539' direct represents '1' with '2511'
2509 -2510 2511 0
-2511 2510 0
-2511 -2509 0
c Var 'aux539' order represents '2' with '2512'
-2510 2512 0
c Var 'aux539' direct represents '2' with '2513'
2510 -2512 2513 0
-2513 2512 0
-2513 -2510 0
c Var 'aux539' direct represents '3' with '-2512'
2509 2511 2513 -2512 0
c Encoding variable: aux540 with domain: int(0..4) (representing constraint (aux535 + aux537))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2514'
c Var 'aux540' direct represents '0' with '2514'
c Var 'aux540' order represents '1' with '2515'
-2514 2515 0
c Var 'aux540' direct represents '1' with '2516'
2514 -2515 2516 0
-2516 2515 0
-2516 -2514 0
c Var 'aux540' order represents '2' with '2517'
-2515 2517 0
c Var 'aux540' direct represents '2' with '2518'
2515 -2517 2518 0
-2518 2517 0
-2518 -2515 0
c Var 'aux540' order represents '3' with '2519'
-2517 2519 0
c Var 'aux540' direct represents '3' with '2520'
2517 -2519 2520 0
-2520 2519 0
-2520 -2517 0
c Var 'aux540' direct represents '4' with '-2519'
2514 2516 2518 2520 -2519 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2521'
c Var 'aux541' direct represents '0' with '2521'
c Var 'aux541' order represents '1' with '2522'
-2521 2522 0
c Var 'aux541' direct represents '1' with '2523'
2521 -2522 2523 0
-2523 2522 0
-2523 -2521 0
c Var 'aux541' direct represents '2' with '-2522'
2521 2523 -2522 0
c Encoding variable: aux542 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2524'
c Var 'aux542' direct represents '0' with '2524'
c Var 'aux542' order represents '1' with '2525'
-2524 2525 0
c Var 'aux542' direct represents '1' with '2526'
2524 -2525 2526 0
-2526 2525 0
-2526 -2524 0
c Var 'aux542' direct represents '2' with '-2525'
2524 2526 -2525 0
c Encoding variable: aux543 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2527'
c Var 'aux543' direct represents '0' with '2527'
c Var 'aux543' order represents '1' with '2528'
-2527 2528 0
c Var 'aux543' direct represents '1' with '2529'
2527 -2528 2529 0
-2529 2528 0
-2529 -2527 0
c Var 'aux543' direct represents '2' with '-2528'
2527 2529 -2528 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2530'
c Var 'aux544' direct represents '0' with '2530'
c Var 'aux544' order represents '1' with '2531'
-2530 2531 0
c Var 'aux544' direct represents '1' with '2532'
2530 -2531 2532 0
-2532 2531 0
-2532 -2530 0
c Var 'aux544' direct represents '2' with '-2531'
2530 2532 -2531 0
c Encoding variable: aux545 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux544))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2533'
c Var 'aux545' direct represents '0' with '2533'
c Var 'aux545' order represents '1' with '2534'
-2533 2534 0
c Var 'aux545' direct represents '1' with '2535'
2533 -2534 2535 0
-2535 2534 0
-2535 -2533 0
c Var 'aux545' order represents '2' with '2536'
-2534 2536 0
c Var 'aux545' direct represents '2' with '2537'
2534 -2536 2537 0
-2537 2536 0
-2537 -2534 0
c Var 'aux545' direct represents '3' with '-2536'
2533 2535 2537 -2536 0
c Encoding variable: aux546 with domain: int(0..4) (representing constraint (aux541 + aux543))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2538'
c Var 'aux546' direct represents '0' with '2538'
c Var 'aux546' order represents '1' with '2539'
-2538 2539 0
c Var 'aux546' direct represents '1' with '2540'
2538 -2539 2540 0
-2540 2539 0
-2540 -2538 0
c Var 'aux546' order represents '2' with '2541'
-2539 2541 0
c Var 'aux546' direct represents '2' with '2542'
2539 -2541 2542 0
-2542 2541 0
-2542 -2539 0
c Var 'aux546' order represents '3' with '2543'
-2541 2543 0
c Var 'aux546' direct represents '3' with '2544'
2541 -2543 2544 0
-2544 2543 0
-2544 -2541 0
c Var 'aux546' direct represents '4' with '-2543'
2538 2540 2542 2544 -2543 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2545'
c Var 'aux547' direct represents '0' with '2545'
c Var 'aux547' order represents '1' with '2546'
-2545 2546 0
c Var 'aux547' direct represents '1' with '2547'
2545 -2546 2547 0
-2547 2546 0
-2547 -2545 0
c Var 'aux547' direct represents '2' with '-2546'
2545 2547 -2546 0
c Encoding variable: aux548 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2548'
c Var 'aux548' direct represents '0' with '2548'
c Var 'aux548' order represents '1' with '2549'
-2548 2549 0
c Var 'aux548' direct represents '1' with '2550'
2548 -2549 2550 0
-2550 2549 0
-2550 -2548 0
c Var 'aux548' direct represents '2' with '-2549'
2548 2550 -2549 0
c Encoding variable: aux549 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2551'
c Var 'aux549' direct represents '0' with '2551'
c Var 'aux549' order represents '1' with '2552'
-2551 2552 0
c Var 'aux549' direct represents '1' with '2553'
2551 -2552 2553 0
-2553 2552 0
-2553 -2551 0
c Var 'aux549' direct represents '2' with '-2552'
2551 2553 -2552 0
c Encoding variable: aux550 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2554'
c Var 'aux550' direct represents '0' with '2554'
c Var 'aux550' order represents '1' with '2555'
-2554 2555 0
c Var 'aux550' direct represents '1' with '2556'
2554 -2555 2556 0
-2556 2555 0
-2556 -2554 0
c Var 'aux550' direct represents '2' with '-2555'
2554 2556 -2555 0
c Encoding variable: aux551 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux550))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2557'
c Var 'aux551' direct represents '0' with '2557'
c Var 'aux551' order represents '1' with '2558'
-2557 2558 0
c Var 'aux551' direct represents '1' with '2559'
2557 -2558 2559 0
-2559 2558 0
-2559 -2557 0
c Var 'aux551' order represents '2' with '2560'
-2558 2560 0
c Var 'aux551' direct represents '2' with '2561'
2558 -2560 2561 0
-2561 2560 0
-2561 -2558 0
c Var 'aux551' direct represents '3' with '-2560'
2557 2559 2561 -2560 0
c Encoding variable: aux552 with domain: int(0..4) (representing constraint (aux547 + aux549))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2562'
c Var 'aux552' direct represents '0' with '2562'
c Var 'aux552' order represents '1' with '2563'
-2562 2563 0
c Var 'aux552' direct represents '1' with '2564'
2562 -2563 2564 0
-2564 2563 0
-2564 -2562 0
c Var 'aux552' order represents '2' with '2565'
-2563 2565 0
c Var 'aux552' direct represents '2' with '2566'
2563 -2565 2566 0
-2566 2565 0
-2566 -2563 0
c Var 'aux552' order represents '3' with '2567'
-2565 2567 0
c Var 'aux552' direct represents '3' with '2568'
2565 -2567 2568 0
-2568 2567 0
-2568 -2565 0
c Var 'aux552' direct represents '4' with '-2567'
2562 2564 2566 2568 -2567 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2569'
c Var 'aux553' direct represents '0' with '2569'
c Var 'aux553' order represents '1' with '2570'
-2569 2570 0
c Var 'aux553' direct represents '1' with '2571'
2569 -2570 2571 0
-2571 2570 0
-2571 -2569 0
c Var 'aux553' direct represents '2' with '-2570'
2569 2571 -2570 0
c Encoding variable: aux554 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2572'
c Var 'aux554' direct represents '0' with '2572'
c Var 'aux554' order represents '1' with '2573'
-2572 2573 0
c Var 'aux554' direct represents '1' with '2574'
2572 -2573 2574 0
-2574 2573 0
-2574 -2572 0
c Var 'aux554' direct represents '2' with '-2573'
2572 2574 -2573 0
c Encoding variable: aux555 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2575'
c Var 'aux555' direct represents '0' with '2575'
c Var 'aux555' order represents '1' with '2576'
-2575 2576 0
c Var 'aux555' direct represents '1' with '2577'
2575 -2576 2577 0
-2577 2576 0
-2577 -2575 0
c Var 'aux555' direct represents '2' with '-2576'
2575 2577 -2576 0
c Encoding variable: aux556 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2578'
c Var 'aux556' direct represents '0' with '2578'
c Var 'aux556' order represents '1' with '2579'
-2578 2579 0
c Var 'aux556' direct represents '1' with '2580'
2578 -2579 2580 0
-2580 2579 0
-2580 -2578 0
c Var 'aux556' direct represents '2' with '-2579'
2578 2580 -2579 0
c Encoding variable: aux557 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux556))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2581'
c Var 'aux557' direct represents '0' with '2581'
c Var 'aux557' order represents '1' with '2582'
-2581 2582 0
c Var 'aux557' direct represents '1' with '2583'
2581 -2582 2583 0
-2583 2582 0
-2583 -2581 0
c Var 'aux557' order represents '2' with '2584'
-2582 2584 0
c Var 'aux557' direct represents '2' with '2585'
2582 -2584 2585 0
-2585 2584 0
-2585 -2582 0
c Var 'aux557' direct represents '3' with '-2584'
2581 2583 2585 -2584 0
c Encoding variable: aux558 with domain: int(0..4) (representing constraint (aux553 + aux555))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2586'
c Var 'aux558' direct represents '0' with '2586'
c Var 'aux558' order represents '1' with '2587'
-2586 2587 0
c Var 'aux558' direct represents '1' with '2588'
2586 -2587 2588 0
-2588 2587 0
-2588 -2586 0
c Var 'aux558' order represents '2' with '2589'
-2587 2589 0
c Var 'aux558' direct represents '2' with '2590'
2587 -2589 2590 0
-2590 2589 0
-2590 -2587 0
c Var 'aux558' order represents '3' with '2591'
-2589 2591 0
c Var 'aux558' direct represents '3' with '2592'
2589 -2591 2592 0
-2592 2591 0
-2592 -2589 0
c Var 'aux558' direct represents '4' with '-2591'
2586 2588 2590 2592 -2591 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2593'
c Var 'aux559' direct represents '0' with '2593'
c Var 'aux559' order represents '1' with '2594'
-2593 2594 0
c Var 'aux559' direct represents '1' with '2595'
2593 -2594 2595 0
-2595 2594 0
-2595 -2593 0
c Var 'aux559' direct represents '2' with '-2594'
2593 2595 -2594 0
c Encoding variable: aux560 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2596'
c Var 'aux560' direct represents '0' with '2596'
c Var 'aux560' order represents '1' with '2597'
-2596 2597 0
c Var 'aux560' direct represents '1' with '2598'
2596 -2597 2598 0
-2598 2597 0
-2598 -2596 0
c Var 'aux560' direct represents '2' with '-2597'
2596 2598 -2597 0
c Encoding variable: aux561 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2599'
c Var 'aux561' direct represents '0' with '2599'
c Var 'aux561' order represents '1' with '2600'
-2599 2600 0
c Var 'aux561' direct represents '1' with '2601'
2599 -2600 2601 0
-2601 2600 0
-2601 -2599 0
c Var 'aux561' direct represents '2' with '-2600'
2599 2601 -2600 0
c Encoding variable: aux562 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2602'
c Var 'aux562' direct represents '0' with '2602'
c Var 'aux562' order represents '1' with '2603'
-2602 2603 0
c Var 'aux562' direct represents '1' with '2604'
2602 -2603 2604 0
-2604 2603 0
-2604 -2602 0
c Var 'aux562' direct represents '2' with '-2603'
2602 2604 -2603 0
c Encoding variable: aux563 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux562))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2605'
c Var 'aux563' direct represents '0' with '2605'
c Var 'aux563' order represents '1' with '2606'
-2605 2606 0
c Var 'aux563' direct represents '1' with '2607'
2605 -2606 2607 0
-2607 2606 0
-2607 -2605 0
c Var 'aux563' order represents '2' with '2608'
-2606 2608 0
c Var 'aux563' direct represents '2' with '2609'
2606 -2608 2609 0
-2609 2608 0
-2609 -2606 0
c Var 'aux563' direct represents '3' with '-2608'
2605 2607 2609 -2608 0
c Encoding variable: aux564 with domain: int(0..4) (representing constraint (aux559 + aux561))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2610'
c Var 'aux564' direct represents '0' with '2610'
c Var 'aux564' order represents '1' with '2611'
-2610 2611 0
c Var 'aux564' direct represents '1' with '2612'
2610 -2611 2612 0
-2612 2611 0
-2612 -2610 0
c Var 'aux564' order represents '2' with '2613'
-2611 2613 0
c Var 'aux564' direct represents '2' with '2614'
2611 -2613 2614 0
-2614 2613 0
-2614 -2611 0
c Var 'aux564' order represents '3' with '2615'
-2613 2615 0
c Var 'aux564' direct represents '3' with '2616'
2613 -2615 2616 0
-2616 2615 0
-2616 -2613 0
c Var 'aux564' direct represents '4' with '-2615'
2610 2612 2614 2616 -2615 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2617'
c Var 'aux565' direct represents '0' with '2617'
c Var 'aux565' order represents '1' with '2618'
-2617 2618 0
c Var 'aux565' direct represents '1' with '2619'
2617 -2618 2619 0
-2619 2618 0
-2619 -2617 0
c Var 'aux565' direct represents '2' with '-2618'
2617 2619 -2618 0
c Encoding variable: aux566 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2620'
c Var 'aux566' direct represents '0' with '2620'
c Var 'aux566' order represents '1' with '2621'
-2620 2621 0
c Var 'aux566' direct represents '1' with '2622'
2620 -2621 2622 0
-2622 2621 0
-2622 -2620 0
c Var 'aux566' direct represents '2' with '-2621'
2620 2622 -2621 0
c Encoding variable: aux567 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2623'
c Var 'aux567' direct represents '0' with '2623'
c Var 'aux567' order represents '1' with '2624'
-2623 2624 0
c Var 'aux567' direct represents '1' with '2625'
2623 -2624 2625 0
-2625 2624 0
-2625 -2623 0
c Var 'aux567' direct represents '2' with '-2624'
2623 2625 -2624 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2626'
c Var 'aux568' direct represents '0' with '2626'
c Var 'aux568' order represents '1' with '2627'
-2626 2627 0
c Var 'aux568' direct represents '1' with '2628'
2626 -2627 2628 0
-2628 2627 0
-2628 -2626 0
c Var 'aux568' direct represents '2' with '-2627'
2626 2628 -2627 0
c Encoding variable: aux569 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux568))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2629'
c Var 'aux569' direct represents '0' with '2629'
c Var 'aux569' order represents '1' with '2630'
-2629 2630 0
c Var 'aux569' direct represents '1' with '2631'
2629 -2630 2631 0
-2631 2630 0
-2631 -2629 0
c Var 'aux569' order represents '2' with '2632'
-2630 2632 0
c Var 'aux569' direct represents '2' with '2633'
2630 -2632 2633 0
-2633 2632 0
-2633 -2630 0
c Var 'aux569' direct represents '3' with '-2632'
2629 2631 2633 -2632 0
c Encoding variable: aux570 with domain: int(0..4) (representing constraint (aux565 + aux567))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2634'
c Var 'aux570' direct represents '0' with '2634'
c Var 'aux570' order represents '1' with '2635'
-2634 2635 0
c Var 'aux570' direct represents '1' with '2636'
2634 -2635 2636 0
-2636 2635 0
-2636 -2634 0
c Var 'aux570' order represents '2' with '2637'
-2635 2637 0
c Var 'aux570' direct represents '2' with '2638'
2635 -2637 2638 0
-2638 2637 0
-2638 -2635 0
c Var 'aux570' order represents '3' with '2639'
-2637 2639 0
c Var 'aux570' direct represents '3' with '2640'
2637 -2639 2640 0
-2640 2639 0
-2640 -2637 0
c Var 'aux570' direct represents '4' with '-2639'
2634 2636 2638 2640 -2639 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2641'
c Var 'aux571' direct represents '0' with '2641'
c Var 'aux571' order represents '1' with '2642'
-2641 2642 0
c Var 'aux571' direct represents '1' with '2643'
2641 -2642 2643 0
-2643 2642 0
-2643 -2641 0
c Var 'aux571' direct represents '2' with '-2642'
2641 2643 -2642 0
c Encoding variable: aux572 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2644'
c Var 'aux572' direct represents '0' with '2644'
c Var 'aux572' order represents '1' with '2645'
-2644 2645 0
c Var 'aux572' direct represents '1' with '2646'
2644 -2645 2646 0
-2646 2645 0
-2646 -2644 0
c Var 'aux572' direct represents '2' with '-2645'
2644 2646 -2645 0
c Encoding variable: aux573 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2647'
c Var 'aux573' direct represents '0' with '2647'
c Var 'aux573' order represents '1' with '2648'
-2647 2648 0
c Var 'aux573' direct represents '1' with '2649'
2647 -2648 2649 0
-2649 2648 0
-2649 -2647 0
c Var 'aux573' direct represents '2' with '-2648'
2647 2649 -2648 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2650'
c Var 'aux574' direct represents '0' with '2650'
c Var 'aux574' order represents '1' with '2651'
-2650 2651 0
c Var 'aux574' direct represents '1' with '2652'
2650 -2651 2652 0
-2652 2651 0
-2652 -2650 0
c Var 'aux574' direct represents '2' with '-2651'
2650 2652 -2651 0
c Encoding variable: aux575 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux574))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2653'
c Var 'aux575' direct represents '0' with '2653'
c Var 'aux575' order represents '1' with '2654'
-2653 2654 0
c Var 'aux575' direct represents '1' with '2655'
2653 -2654 2655 0
-2655 2654 0
-2655 -2653 0
c Var 'aux575' order represents '2' with '2656'
-2654 2656 0
c Var 'aux575' direct represents '2' with '2657'
2654 -2656 2657 0
-2657 2656 0
-2657 -2654 0
c Var 'aux575' direct represents '3' with '-2656'
2653 2655 2657 -2656 0
c Encoding variable: aux576 with domain: int(0..4) (representing constraint (aux571 + aux573))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2658'
c Var 'aux576' direct represents '0' with '2658'
c Var 'aux576' order represents '1' with '2659'
-2658 2659 0
c Var 'aux576' direct represents '1' with '2660'
2658 -2659 2660 0
-2660 2659 0
-2660 -2658 0
c Var 'aux576' order represents '2' with '2661'
-2659 2661 0
c Var 'aux576' direct represents '2' with '2662'
2659 -2661 2662 0
-2662 2661 0
-2662 -2659 0
c Var 'aux576' order represents '3' with '2663'
-2661 2663 0
c Var 'aux576' direct represents '3' with '2664'
2661 -2663 2664 0
-2664 2663 0
-2664 -2661 0
c Var 'aux576' direct represents '4' with '-2663'
2658 2660 2662 2664 -2663 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2665'
c Var 'aux577' direct represents '0' with '2665'
c Var 'aux577' order represents '1' with '2666'
-2665 2666 0
c Var 'aux577' direct represents '1' with '2667'
2665 -2666 2667 0
-2667 2666 0
-2667 -2665 0
c Var 'aux577' direct represents '2' with '-2666'
2665 2667 -2666 0
c Encoding variable: aux578 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2668'
c Var 'aux578' direct represents '0' with '2668'
c Var 'aux578' order represents '1' with '2669'
-2668 2669 0
c Var 'aux578' direct represents '1' with '2670'
2668 -2669 2670 0
-2670 2669 0
-2670 -2668 0
c Var 'aux578' direct represents '2' with '-2669'
2668 2670 -2669 0
c Encoding variable: aux579 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2671'
c Var 'aux579' direct represents '0' with '2671'
c Var 'aux579' order represents '1' with '2672'
-2671 2672 0
c Var 'aux579' direct represents '1' with '2673'
2671 -2672 2673 0
-2673 2672 0
-2673 -2671 0
c Var 'aux579' direct represents '2' with '-2672'
2671 2673 -2672 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2674'
c Var 'aux580' direct represents '0' with '2674'
c Var 'aux580' order represents '1' with '2675'
-2674 2675 0
c Var 'aux580' direct represents '1' with '2676'
2674 -2675 2676 0
-2676 2675 0
-2676 -2674 0
c Var 'aux580' direct represents '2' with '-2675'
2674 2676 -2675 0
c Encoding variable: aux581 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux580))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2677'
c Var 'aux581' direct represents '0' with '2677'
c Var 'aux581' order represents '1' with '2678'
-2677 2678 0
c Var 'aux581' direct represents '1' with '2679'
2677 -2678 2679 0
-2679 2678 0
-2679 -2677 0
c Var 'aux581' order represents '2' with '2680'
-2678 2680 0
c Var 'aux581' direct represents '2' with '2681'
2678 -2680 2681 0
-2681 2680 0
-2681 -2678 0
c Var 'aux581' direct represents '3' with '-2680'
2677 2679 2681 -2680 0
c Encoding variable: aux582 with domain: int(0..4) (representing constraint (aux577 + aux579))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2682'
c Var 'aux582' direct represents '0' with '2682'
c Var 'aux582' order represents '1' with '2683'
-2682 2683 0
c Var 'aux582' direct represents '1' with '2684'
2682 -2683 2684 0
-2684 2683 0
-2684 -2682 0
c Var 'aux582' order represents '2' with '2685'
-2683 2685 0
c Var 'aux582' direct represents '2' with '2686'
2683 -2685 2686 0
-2686 2685 0
-2686 -2683 0
c Var 'aux582' order represents '3' with '2687'
-2685 2687 0
c Var 'aux582' direct represents '3' with '2688'
2685 -2687 2688 0
-2688 2687 0
-2688 -2685 0
c Var 'aux582' direct represents '4' with '-2687'
2682 2684 2686 2688 -2687 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2689'
c Var 'aux583' direct represents '0' with '2689'
c Var 'aux583' order represents '1' with '2690'
-2689 2690 0
c Var 'aux583' direct represents '1' with '2691'
2689 -2690 2691 0
-2691 2690 0
-2691 -2689 0
c Var 'aux583' direct represents '2' with '-2690'
2689 2691 -2690 0
c Encoding variable: aux584 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2692'
c Var 'aux584' direct represents '0' with '2692'
c Var 'aux584' order represents '1' with '2693'
-2692 2693 0
c Var 'aux584' direct represents '1' with '2694'
2692 -2693 2694 0
-2694 2693 0
-2694 -2692 0
c Var 'aux584' direct represents '2' with '-2693'
2692 2694 -2693 0
c Encoding variable: aux585 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2695'
c Var 'aux585' direct represents '0' with '2695'
c Var 'aux585' order represents '1' with '2696'
-2695 2696 0
c Var 'aux585' direct represents '1' with '2697'
2695 -2696 2697 0
-2697 2696 0
-2697 -2695 0
c Var 'aux585' direct represents '2' with '-2696'
2695 2697 -2696 0
c Encoding variable: aux586 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2698'
c Var 'aux586' direct represents '0' with '2698'
c Var 'aux586' order represents '1' with '2699'
-2698 2699 0
c Var 'aux586' direct represents '1' with '2700'
2698 -2699 2700 0
-2700 2699 0
-2700 -2698 0
c Var 'aux586' direct represents '2' with '-2699'
2698 2700 -2699 0
c Encoding variable: aux587 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux586))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2701'
c Var 'aux587' direct represents '0' with '2701'
c Var 'aux587' order represents '1' with '2702'
-2701 2702 0
c Var 'aux587' direct represents '1' with '2703'
2701 -2702 2703 0
-2703 2702 0
-2703 -2701 0
c Var 'aux587' order represents '2' with '2704'
-2702 2704 0
c Var 'aux587' direct represents '2' with '2705'
2702 -2704 2705 0
-2705 2704 0
-2705 -2702 0
c Var 'aux587' direct represents '3' with '-2704'
2701 2703 2705 -2704 0
c Encoding variable: aux588 with domain: int(0..4) (representing constraint (aux583 + aux585))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2706'
c Var 'aux588' direct represents '0' with '2706'
c Var 'aux588' order represents '1' with '2707'
-2706 2707 0
c Var 'aux588' direct represents '1' with '2708'
2706 -2707 2708 0
-2708 2707 0
-2708 -2706 0
c Var 'aux588' order represents '2' with '2709'
-2707 2709 0
c Var 'aux588' direct represents '2' with '2710'
2707 -2709 2710 0
-2710 2709 0
-2710 -2707 0
c Var 'aux588' order represents '3' with '2711'
-2709 2711 0
c Var 'aux588' direct represents '3' with '2712'
2709 -2711 2712 0
-2712 2711 0
-2712 -2709 0
c Var 'aux588' direct represents '4' with '-2711'
2706 2708 2710 2712 -2711 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2713'
c Var 'aux589' direct represents '0' with '2713'
c Var 'aux589' order represents '1' with '2714'
-2713 2714 0
c Var 'aux589' direct represents '1' with '2715'
2713 -2714 2715 0
-2715 2714 0
-2715 -2713 0
c Var 'aux589' direct represents '2' with '-2714'
2713 2715 -2714 0
c Encoding variable: aux590 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2716'
c Var 'aux590' direct represents '0' with '2716'
c Var 'aux590' order represents '1' with '2717'
-2716 2717 0
c Var 'aux590' direct represents '1' with '2718'
2716 -2717 2718 0
-2718 2717 0
-2718 -2716 0
c Var 'aux590' direct represents '2' with '-2717'
2716 2718 -2717 0
c Encoding variable: aux591 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2719'
c Var 'aux591' direct represents '0' with '2719'
c Var 'aux591' order represents '1' with '2720'
-2719 2720 0
c Var 'aux591' direct represents '1' with '2721'
2719 -2720 2721 0
-2721 2720 0
-2721 -2719 0
c Var 'aux591' direct represents '2' with '-2720'
2719 2721 -2720 0
c Encoding variable: aux592 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2722'
c Var 'aux592' direct represents '0' with '2722'
c Var 'aux592' order represents '1' with '2723'
-2722 2723 0
c Var 'aux592' direct represents '1' with '2724'
2722 -2723 2724 0
-2724 2723 0
-2724 -2722 0
c Var 'aux592' direct represents '2' with '-2723'
2722 2724 -2723 0
c Encoding variable: aux593 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux592))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2725'
c Var 'aux593' direct represents '0' with '2725'
c Var 'aux593' order represents '1' with '2726'
-2725 2726 0
c Var 'aux593' direct represents '1' with '2727'
2725 -2726 2727 0
-2727 2726 0
-2727 -2725 0
c Var 'aux593' order represents '2' with '2728'
-2726 2728 0
c Var 'aux593' direct represents '2' with '2729'
2726 -2728 2729 0
-2729 2728 0
-2729 -2726 0
c Var 'aux593' direct represents '3' with '-2728'
2725 2727 2729 -2728 0
c Encoding variable: aux594 with domain: int(0..4) (representing constraint (aux589 + aux591))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2730'
c Var 'aux594' direct represents '0' with '2730'
c Var 'aux594' order represents '1' with '2731'
-2730 2731 0
c Var 'aux594' direct represents '1' with '2732'
2730 -2731 2732 0
-2732 2731 0
-2732 -2730 0
c Var 'aux594' order represents '2' with '2733'
-2731 2733 0
c Var 'aux594' direct represents '2' with '2734'
2731 -2733 2734 0
-2734 2733 0
-2734 -2731 0
c Var 'aux594' order represents '3' with '2735'
-2733 2735 0
c Var 'aux594' direct represents '3' with '2736'
2733 -2735 2736 0
-2736 2735 0
-2736 -2733 0
c Var 'aux594' direct represents '4' with '-2735'
2730 2732 2734 2736 -2735 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2737'
c Var 'aux595' direct represents '0' with '2737'
c Var 'aux595' order represents '1' with '2738'
-2737 2738 0
c Var 'aux595' direct represents '1' with '2739'
2737 -2738 2739 0
-2739 2738 0
-2739 -2737 0
c Var 'aux595' direct represents '2' with '-2738'
2737 2739 -2738 0
c Encoding variable: aux596 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2740'
c Var 'aux596' direct represents '0' with '2740'
c Var 'aux596' order represents '1' with '2741'
-2740 2741 0
c Var 'aux596' direct represents '1' with '2742'
2740 -2741 2742 0
-2742 2741 0
-2742 -2740 0
c Var 'aux596' direct represents '2' with '-2741'
2740 2742 -2741 0
c Encoding variable: aux597 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2743'
c Var 'aux597' direct represents '0' with '2743'
c Var 'aux597' order represents '1' with '2744'
-2743 2744 0
c Var 'aux597' direct represents '1' with '2745'
2743 -2744 2745 0
-2745 2744 0
-2745 -2743 0
c Var 'aux597' direct represents '2' with '-2744'
2743 2745 -2744 0
c Encoding variable: aux598 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2746'
c Var 'aux598' direct represents '0' with '2746'
c Var 'aux598' order represents '1' with '2747'
-2746 2747 0
c Var 'aux598' direct represents '1' with '2748'
2746 -2747 2748 0
-2748 2747 0
-2748 -2746 0
c Var 'aux598' direct represents '2' with '-2747'
2746 2748 -2747 0
c Encoding variable: aux599 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux598))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2749'
c Var 'aux599' direct represents '0' with '2749'
c Var 'aux599' order represents '1' with '2750'
-2749 2750 0
c Var 'aux599' direct represents '1' with '2751'
2749 -2750 2751 0
-2751 2750 0
-2751 -2749 0
c Var 'aux599' order represents '2' with '2752'
-2750 2752 0
c Var 'aux599' direct represents '2' with '2753'
2750 -2752 2753 0
-2753 2752 0
-2753 -2750 0
c Var 'aux599' direct represents '3' with '-2752'
2749 2751 2753 -2752 0
c Encoding variable: aux600 with domain: int(0..4) (representing constraint (aux595 + aux597))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2754'
c Var 'aux600' direct represents '0' with '2754'
c Var 'aux600' order represents '1' with '2755'
-2754 2755 0
c Var 'aux600' direct represents '1' with '2756'
2754 -2755 2756 0
-2756 2755 0
-2756 -2754 0
c Var 'aux600' order represents '2' with '2757'
-2755 2757 0
c Var 'aux600' direct represents '2' with '2758'
2755 -2757 2758 0
-2758 2757 0
-2758 -2755 0
c Var 'aux600' order represents '3' with '2759'
-2757 2759 0
c Var 'aux600' direct represents '3' with '2760'
2757 -2759 2760 0
-2760 2759 0
-2760 -2757 0
c Var 'aux600' direct represents '4' with '-2759'
2754 2756 2758 2760 -2759 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2761'
c Var 'aux601' direct represents '0' with '2761'
c Var 'aux601' order represents '1' with '2762'
-2761 2762 0
c Var 'aux601' direct represents '1' with '2763'
2761 -2762 2763 0
-2763 2762 0
-2763 -2761 0
c Var 'aux601' direct represents '2' with '-2762'
2761 2763 -2762 0
c Encoding variable: aux602 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2764'
c Var 'aux602' direct represents '0' with '2764'
c Var 'aux602' order represents '1' with '2765'
-2764 2765 0
c Var 'aux602' direct represents '1' with '2766'
2764 -2765 2766 0
-2766 2765 0
-2766 -2764 0
c Var 'aux602' direct represents '2' with '-2765'
2764 2766 -2765 0
c Encoding variable: aux603 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2767'
c Var 'aux603' direct represents '0' with '2767'
c Var 'aux603' order represents '1' with '2768'
-2767 2768 0
c Var 'aux603' direct represents '1' with '2769'
2767 -2768 2769 0
-2769 2768 0
-2769 -2767 0
c Var 'aux603' direct represents '2' with '-2768'
2767 2769 -2768 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2770'
c Var 'aux604' direct represents '0' with '2770'
c Var 'aux604' order represents '1' with '2771'
-2770 2771 0
c Var 'aux604' direct represents '1' with '2772'
2770 -2771 2772 0
-2772 2771 0
-2772 -2770 0
c Var 'aux604' direct represents '2' with '-2771'
2770 2772 -2771 0
c Encoding variable: aux605 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux604))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2773'
c Var 'aux605' direct represents '0' with '2773'
c Var 'aux605' order represents '1' with '2774'
-2773 2774 0
c Var 'aux605' direct represents '1' with '2775'
2773 -2774 2775 0
-2775 2774 0
-2775 -2773 0
c Var 'aux605' order represents '2' with '2776'
-2774 2776 0
c Var 'aux605' direct represents '2' with '2777'
2774 -2776 2777 0
-2777 2776 0
-2777 -2774 0
c Var 'aux605' direct represents '3' with '-2776'
2773 2775 2777 -2776 0
c Encoding variable: aux606 with domain: int(0..4) (representing constraint (aux601 + aux603))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2778'
c Var 'aux606' direct represents '0' with '2778'
c Var 'aux606' order represents '1' with '2779'
-2778 2779 0
c Var 'aux606' direct represents '1' with '2780'
2778 -2779 2780 0
-2780 2779 0
-2780 -2778 0
c Var 'aux606' order represents '2' with '2781'
-2779 2781 0
c Var 'aux606' direct represents '2' with '2782'
2779 -2781 2782 0
-2782 2781 0
-2782 -2779 0
c Var 'aux606' order represents '3' with '2783'
-2781 2783 0
c Var 'aux606' direct represents '3' with '2784'
2781 -2783 2784 0
-2784 2783 0
-2784 -2781 0
c Var 'aux606' direct represents '4' with '-2783'
2778 2780 2782 2784 -2783 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2785'
c Var 'aux607' direct represents '0' with '2785'
c Var 'aux607' order represents '1' with '2786'
-2785 2786 0
c Var 'aux607' direct represents '1' with '2787'
2785 -2786 2787 0
-2787 2786 0
-2787 -2785 0
c Var 'aux607' direct represents '2' with '-2786'
2785 2787 -2786 0
c Encoding variable: aux608 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2788'
c Var 'aux608' direct represents '0' with '2788'
c Var 'aux608' order represents '1' with '2789'
-2788 2789 0
c Var 'aux608' direct represents '1' with '2790'
2788 -2789 2790 0
-2790 2789 0
-2790 -2788 0
c Var 'aux608' direct represents '2' with '-2789'
2788 2790 -2789 0
c Encoding variable: aux609 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2791'
c Var 'aux609' direct represents '0' with '2791'
c Var 'aux609' order represents '1' with '2792'
-2791 2792 0
c Var 'aux609' direct represents '1' with '2793'
2791 -2792 2793 0
-2793 2792 0
-2793 -2791 0
c Var 'aux609' direct represents '2' with '-2792'
2791 2793 -2792 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2794'
c Var 'aux610' direct represents '0' with '2794'
c Var 'aux610' order represents '1' with '2795'
-2794 2795 0
c Var 'aux610' direct represents '1' with '2796'
2794 -2795 2796 0
-2796 2795 0
-2796 -2794 0
c Var 'aux610' direct represents '2' with '-2795'
2794 2796 -2795 0
c Encoding variable: aux611 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux610))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2797'
c Var 'aux611' direct represents '0' with '2797'
c Var 'aux611' order represents '1' with '2798'
-2797 2798 0
c Var 'aux611' direct represents '1' with '2799'
2797 -2798 2799 0
-2799 2798 0
-2799 -2797 0
c Var 'aux611' order represents '2' with '2800'
-2798 2800 0
c Var 'aux611' direct represents '2' with '2801'
2798 -2800 2801 0
-2801 2800 0
-2801 -2798 0
c Var 'aux611' direct represents '3' with '-2800'
2797 2799 2801 -2800 0
c Encoding variable: aux612 with domain: int(0..4) (representing constraint (aux607 + aux609))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2802'
c Var 'aux612' direct represents '0' with '2802'
c Var 'aux612' order represents '1' with '2803'
-2802 2803 0
c Var 'aux612' direct represents '1' with '2804'
2802 -2803 2804 0
-2804 2803 0
-2804 -2802 0
c Var 'aux612' order represents '2' with '2805'
-2803 2805 0
c Var 'aux612' direct represents '2' with '2806'
2803 -2805 2806 0
-2806 2805 0
-2806 -2803 0
c Var 'aux612' order represents '3' with '2807'
-2805 2807 0
c Var 'aux612' direct represents '3' with '2808'
2805 -2807 2808 0
-2808 2807 0
-2808 -2805 0
c Var 'aux612' direct represents '4' with '-2807'
2802 2804 2806 2808 -2807 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2809'
c Var 'aux613' direct represents '0' with '2809'
c Var 'aux613' order represents '1' with '2810'
-2809 2810 0
c Var 'aux613' direct represents '1' with '2811'
2809 -2810 2811 0
-2811 2810 0
-2811 -2809 0
c Var 'aux613' direct represents '2' with '-2810'
2809 2811 -2810 0
c Encoding variable: aux614 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2812'
c Var 'aux614' direct represents '0' with '2812'
c Var 'aux614' order represents '1' with '2813'
-2812 2813 0
c Var 'aux614' direct represents '1' with '2814'
2812 -2813 2814 0
-2814 2813 0
-2814 -2812 0
c Var 'aux614' direct represents '2' with '-2813'
2812 2814 -2813 0
c Encoding variable: aux615 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2815'
c Var 'aux615' direct represents '0' with '2815'
c Var 'aux615' order represents '1' with '2816'
-2815 2816 0
c Var 'aux615' direct represents '1' with '2817'
2815 -2816 2817 0
-2817 2816 0
-2817 -2815 0
c Var 'aux615' direct represents '2' with '-2816'
2815 2817 -2816 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2818'
c Var 'aux616' direct represents '0' with '2818'
c Var 'aux616' order represents '1' with '2819'
-2818 2819 0
c Var 'aux616' direct represents '1' with '2820'
2818 -2819 2820 0
-2820 2819 0
-2820 -2818 0
c Var 'aux616' direct represents '2' with '-2819'
2818 2820 -2819 0
c Encoding variable: aux617 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux616))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2821'
c Var 'aux617' direct represents '0' with '2821'
c Var 'aux617' order represents '1' with '2822'
-2821 2822 0
c Var 'aux617' direct represents '1' with '2823'
2821 -2822 2823 0
-2823 2822 0
-2823 -2821 0
c Var 'aux617' order represents '2' with '2824'
-2822 2824 0
c Var 'aux617' direct represents '2' with '2825'
2822 -2824 2825 0
-2825 2824 0
-2825 -2822 0
c Var 'aux617' direct represents '3' with '-2824'
2821 2823 2825 -2824 0
c Encoding variable: aux618 with domain: int(0..4) (representing constraint (aux613 + aux615))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2826'
c Var 'aux618' direct represents '0' with '2826'
c Var 'aux618' order represents '1' with '2827'
-2826 2827 0
c Var 'aux618' direct represents '1' with '2828'
2826 -2827 2828 0
-2828 2827 0
-2828 -2826 0
c Var 'aux618' order represents '2' with '2829'
-2827 2829 0
c Var 'aux618' direct represents '2' with '2830'
2827 -2829 2830 0
-2830 2829 0
-2830 -2827 0
c Var 'aux618' order represents '3' with '2831'
-2829 2831 0
c Var 'aux618' direct represents '3' with '2832'
2829 -2831 2832 0
-2832 2831 0
-2832 -2829 0
c Var 'aux618' direct represents '4' with '-2831'
2826 2828 2830 2832 -2831 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2833'
c Var 'aux619' direct represents '0' with '2833'
c Var 'aux619' order represents '1' with '2834'
-2833 2834 0
c Var 'aux619' direct represents '1' with '2835'
2833 -2834 2835 0
-2835 2834 0
-2835 -2833 0
c Var 'aux619' direct represents '2' with '-2834'
2833 2835 -2834 0
c Encoding variable: aux620 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2836'
c Var 'aux620' direct represents '0' with '2836'
c Var 'aux620' order represents '1' with '2837'
-2836 2837 0
c Var 'aux620' direct represents '1' with '2838'
2836 -2837 2838 0
-2838 2837 0
-2838 -2836 0
c Var 'aux620' direct represents '2' with '-2837'
2836 2838 -2837 0
c Encoding variable: aux621 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2839'
c Var 'aux621' direct represents '0' with '2839'
c Var 'aux621' order represents '1' with '2840'
-2839 2840 0
c Var 'aux621' direct represents '1' with '2841'
2839 -2840 2841 0
-2841 2840 0
-2841 -2839 0
c Var 'aux621' direct represents '2' with '-2840'
2839 2841 -2840 0
c Encoding variable: aux622 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2842'
c Var 'aux622' direct represents '0' with '2842'
c Var 'aux622' order represents '1' with '2843'
-2842 2843 0
c Var 'aux622' direct represents '1' with '2844'
2842 -2843 2844 0
-2844 2843 0
-2844 -2842 0
c Var 'aux622' direct represents '2' with '-2843'
2842 2844 -2843 0
c Encoding variable: aux623 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux622))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2845'
c Var 'aux623' direct represents '0' with '2845'
c Var 'aux623' order represents '1' with '2846'
-2845 2846 0
c Var 'aux623' direct represents '1' with '2847'
2845 -2846 2847 0
-2847 2846 0
-2847 -2845 0
c Var 'aux623' order represents '2' with '2848'
-2846 2848 0
c Var 'aux623' direct represents '2' with '2849'
2846 -2848 2849 0
-2849 2848 0
-2849 -2846 0
c Var 'aux623' direct represents '3' with '-2848'
2845 2847 2849 -2848 0
c Encoding variable: aux624 with domain: int(0..4) (representing constraint (aux619 + aux621))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2850'
c Var 'aux624' direct represents '0' with '2850'
c Var 'aux624' order represents '1' with '2851'
-2850 2851 0
c Var 'aux624' direct represents '1' with '2852'
2850 -2851 2852 0
-2852 2851 0
-2852 -2850 0
c Var 'aux624' order represents '2' with '2853'
-2851 2853 0
c Var 'aux624' direct represents '2' with '2854'
2851 -2853 2854 0
-2854 2853 0
-2854 -2851 0
c Var 'aux624' order represents '3' with '2855'
-2853 2855 0
c Var 'aux624' direct represents '3' with '2856'
2853 -2855 2856 0
-2856 2855 0
-2856 -2853 0
c Var 'aux624' direct represents '4' with '-2855'
2850 2852 2854 2856 -2855 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2857'
c Var 'aux625' direct represents '0' with '2857'
c Var 'aux625' order represents '1' with '2858'
-2857 2858 0
c Var 'aux625' direct represents '1' with '2859'
2857 -2858 2859 0
-2859 2858 0
-2859 -2857 0
c Var 'aux625' direct represents '2' with '-2858'
2857 2859 -2858 0
c Encoding variable: aux626 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2860'
c Var 'aux626' direct represents '0' with '2860'
c Var 'aux626' order represents '1' with '2861'
-2860 2861 0
c Var 'aux626' direct represents '1' with '2862'
2860 -2861 2862 0
-2862 2861 0
-2862 -2860 0
c Var 'aux626' direct represents '2' with '-2861'
2860 2862 -2861 0
c Encoding variable: aux627 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2863'
c Var 'aux627' direct represents '0' with '2863'
c Var 'aux627' order represents '1' with '2864'
-2863 2864 0
c Var 'aux627' direct represents '1' with '2865'
2863 -2864 2865 0
-2865 2864 0
-2865 -2863 0
c Var 'aux627' direct represents '2' with '-2864'
2863 2865 -2864 0
c Encoding variable: aux628 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2866'
c Var 'aux628' direct represents '0' with '2866'
c Var 'aux628' order represents '1' with '2867'
-2866 2867 0
c Var 'aux628' direct represents '1' with '2868'
2866 -2867 2868 0
-2868 2867 0
-2868 -2866 0
c Var 'aux628' direct represents '2' with '-2867'
2866 2868 -2867 0
c Encoding variable: aux629 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux628))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2869'
c Var 'aux629' direct represents '0' with '2869'
c Var 'aux629' order represents '1' with '2870'
-2869 2870 0
c Var 'aux629' direct represents '1' with '2871'
2869 -2870 2871 0
-2871 2870 0
-2871 -2869 0
c Var 'aux629' order represents '2' with '2872'
-2870 2872 0
c Var 'aux629' direct represents '2' with '2873'
2870 -2872 2873 0
-2873 2872 0
-2873 -2870 0
c Var 'aux629' direct represents '3' with '-2872'
2869 2871 2873 -2872 0
c Encoding variable: aux630 with domain: int(0..4) (representing constraint (aux625 + aux627))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2874'
c Var 'aux630' direct represents '0' with '2874'
c Var 'aux630' order represents '1' with '2875'
-2874 2875 0
c Var 'aux630' direct represents '1' with '2876'
2874 -2875 2876 0
-2876 2875 0
-2876 -2874 0
c Var 'aux630' order represents '2' with '2877'
-2875 2877 0
c Var 'aux630' direct represents '2' with '2878'
2875 -2877 2878 0
-2878 2877 0
-2878 -2875 0
c Var 'aux630' order represents '3' with '2879'
-2877 2879 0
c Var 'aux630' direct represents '3' with '2880'
2877 -2879 2880 0
-2880 2879 0
-2880 -2877 0
c Var 'aux630' direct represents '4' with '-2879'
2874 2876 2878 2880 -2879 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2881'
c Var 'aux631' direct represents '0' with '2881'
c Var 'aux631' order represents '1' with '2882'
-2881 2882 0
c Var 'aux631' direct represents '1' with '2883'
2881 -2882 2883 0
-2883 2882 0
-2883 -2881 0
c Var 'aux631' direct represents '2' with '-2882'
2881 2883 -2882 0
c Encoding variable: aux632 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2884'
c Var 'aux632' direct represents '0' with '2884'
c Var 'aux632' order represents '1' with '2885'
-2884 2885 0
c Var 'aux632' direct represents '1' with '2886'
2884 -2885 2886 0
-2886 2885 0
-2886 -2884 0
c Var 'aux632' direct represents '2' with '-2885'
2884 2886 -2885 0
c Encoding variable: aux633 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2887'
c Var 'aux633' direct represents '0' with '2887'
c Var 'aux633' order represents '1' with '2888'
-2887 2888 0
c Var 'aux633' direct represents '1' with '2889'
2887 -2888 2889 0
-2889 2888 0
-2889 -2887 0
c Var 'aux633' direct represents '2' with '-2888'
2887 2889 -2888 0
c Encoding variable: aux634 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2890'
c Var 'aux634' direct represents '0' with '2890'
c Var 'aux634' order represents '1' with '2891'
-2890 2891 0
c Var 'aux634' direct represents '1' with '2892'
2890 -2891 2892 0
-2892 2891 0
-2892 -2890 0
c Var 'aux634' direct represents '2' with '-2891'
2890 2892 -2891 0
c Encoding variable: aux635 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux634))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2893'
c Var 'aux635' direct represents '0' with '2893'
c Var 'aux635' order represents '1' with '2894'
-2893 2894 0
c Var 'aux635' direct represents '1' with '2895'
2893 -2894 2895 0
-2895 2894 0
-2895 -2893 0
c Var 'aux635' order represents '2' with '2896'
-2894 2896 0
c Var 'aux635' direct represents '2' with '2897'
2894 -2896 2897 0
-2897 2896 0
-2897 -2894 0
c Var 'aux635' direct represents '3' with '-2896'
2893 2895 2897 -2896 0
c Encoding variable: aux636 with domain: int(0..4) (representing constraint (aux631 + aux633))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2898'
c Var 'aux636' direct represents '0' with '2898'
c Var 'aux636' order represents '1' with '2899'
-2898 2899 0
c Var 'aux636' direct represents '1' with '2900'
2898 -2899 2900 0
-2900 2899 0
-2900 -2898 0
c Var 'aux636' order represents '2' with '2901'
-2899 2901 0
c Var 'aux636' direct represents '2' with '2902'
2899 -2901 2902 0
-2902 2901 0
-2902 -2899 0
c Var 'aux636' order represents '3' with '2903'
-2901 2903 0
c Var 'aux636' direct represents '3' with '2904'
2901 -2903 2904 0
-2904 2903 0
-2904 -2901 0
c Var 'aux636' direct represents '4' with '-2903'
2898 2900 2902 2904 -2903 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2905'
c Var 'aux637' direct represents '0' with '2905'
c Var 'aux637' order represents '1' with '2906'
-2905 2906 0
c Var 'aux637' direct represents '1' with '2907'
2905 -2906 2907 0
-2907 2906 0
-2907 -2905 0
c Var 'aux637' direct represents '2' with '-2906'
2905 2907 -2906 0
c Encoding variable: aux638 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2908'
c Var 'aux638' direct represents '0' with '2908'
c Var 'aux638' order represents '1' with '2909'
-2908 2909 0
c Var 'aux638' direct represents '1' with '2910'
2908 -2909 2910 0
-2910 2909 0
-2910 -2908 0
c Var 'aux638' direct represents '2' with '-2909'
2908 2910 -2909 0
c Encoding variable: aux639 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2911'
c Var 'aux639' direct represents '0' with '2911'
c Var 'aux639' order represents '1' with '2912'
-2911 2912 0
c Var 'aux639' direct represents '1' with '2913'
2911 -2912 2913 0
-2913 2912 0
-2913 -2911 0
c Var 'aux639' direct represents '2' with '-2912'
2911 2913 -2912 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2914'
c Var 'aux640' direct represents '0' with '2914'
c Var 'aux640' order represents '1' with '2915'
-2914 2915 0
c Var 'aux640' direct represents '1' with '2916'
2914 -2915 2916 0
-2916 2915 0
-2916 -2914 0
c Var 'aux640' direct represents '2' with '-2915'
2914 2916 -2915 0
c Encoding variable: aux641 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux640))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2917'
c Var 'aux641' direct represents '0' with '2917'
c Var 'aux641' order represents '1' with '2918'
-2917 2918 0
c Var 'aux641' direct represents '1' with '2919'
2917 -2918 2919 0
-2919 2918 0
-2919 -2917 0
c Var 'aux641' order represents '2' with '2920'
-2918 2920 0
c Var 'aux641' direct represents '2' with '2921'
2918 -2920 2921 0
-2921 2920 0
-2921 -2918 0
c Var 'aux641' direct represents '3' with '-2920'
2917 2919 2921 -2920 0
c Encoding variable: aux642 with domain: int(0..4) (representing constraint (aux637 + aux639))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2922'
c Var 'aux642' direct represents '0' with '2922'
c Var 'aux642' order represents '1' with '2923'
-2922 2923 0
c Var 'aux642' direct represents '1' with '2924'
2922 -2923 2924 0
-2924 2923 0
-2924 -2922 0
c Var 'aux642' order represents '2' with '2925'
-2923 2925 0
c Var 'aux642' direct represents '2' with '2926'
2923 -2925 2926 0
-2926 2925 0
-2926 -2923 0
c Var 'aux642' order represents '3' with '2927'
-2925 2927 0
c Var 'aux642' direct represents '3' with '2928'
2925 -2927 2928 0
-2928 2927 0
-2928 -2925 0
c Var 'aux642' direct represents '4' with '-2927'
2922 2924 2926 2928 -2927 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2929'
c Var 'aux643' direct represents '0' with '2929'
c Var 'aux643' order represents '1' with '2930'
-2929 2930 0
c Var 'aux643' direct represents '1' with '2931'
2929 -2930 2931 0
-2931 2930 0
-2931 -2929 0
c Var 'aux643' direct represents '2' with '-2930'
2929 2931 -2930 0
c Encoding variable: aux644 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2932'
c Var 'aux644' direct represents '0' with '2932'
c Var 'aux644' order represents '1' with '2933'
-2932 2933 0
c Var 'aux644' direct represents '1' with '2934'
2932 -2933 2934 0
-2934 2933 0
-2934 -2932 0
c Var 'aux644' direct represents '2' with '-2933'
2932 2934 -2933 0
c Encoding variable: aux645 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2935'
c Var 'aux645' direct represents '0' with '2935'
c Var 'aux645' order represents '1' with '2936'
-2935 2936 0
c Var 'aux645' direct represents '1' with '2937'
2935 -2936 2937 0
-2937 2936 0
-2937 -2935 0
c Var 'aux645' direct represents '2' with '-2936'
2935 2937 -2936 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2938'
c Var 'aux646' direct represents '0' with '2938'
c Var 'aux646' order represents '1' with '2939'
-2938 2939 0
c Var 'aux646' direct represents '1' with '2940'
2938 -2939 2940 0
-2940 2939 0
-2940 -2938 0
c Var 'aux646' direct represents '2' with '-2939'
2938 2940 -2939 0
c Encoding variable: aux647 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux646))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2941'
c Var 'aux647' direct represents '0' with '2941'
c Var 'aux647' order represents '1' with '2942'
-2941 2942 0
c Var 'aux647' direct represents '1' with '2943'
2941 -2942 2943 0
-2943 2942 0
-2943 -2941 0
c Var 'aux647' order represents '2' with '2944'
-2942 2944 0
c Var 'aux647' direct represents '2' with '2945'
2942 -2944 2945 0
-2945 2944 0
-2945 -2942 0
c Var 'aux647' direct represents '3' with '-2944'
2941 2943 2945 -2944 0
c Encoding variable: aux648 with domain: int(0..4) (representing constraint (aux643 + aux645))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2946'
c Var 'aux648' direct represents '0' with '2946'
c Var 'aux648' order represents '1' with '2947'
-2946 2947 0
c Var 'aux648' direct represents '1' with '2948'
2946 -2947 2948 0
-2948 2947 0
-2948 -2946 0
c Var 'aux648' order represents '2' with '2949'
-2947 2949 0
c Var 'aux648' direct represents '2' with '2950'
2947 -2949 2950 0
-2950 2949 0
-2950 -2947 0
c Var 'aux648' order represents '3' with '2951'
-2949 2951 0
c Var 'aux648' direct represents '3' with '2952'
2949 -2951 2952 0
-2952 2951 0
-2952 -2949 0
c Var 'aux648' direct represents '4' with '-2951'
2946 2948 2950 2952 -2951 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2953'
c Var 'aux649' direct represents '0' with '2953'
c Var 'aux649' order represents '1' with '2954'
-2953 2954 0
c Var 'aux649' direct represents '1' with '2955'
2953 -2954 2955 0
-2955 2954 0
-2955 -2953 0
c Var 'aux649' direct represents '2' with '-2954'
2953 2955 -2954 0
c Encoding variable: aux650 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2956'
c Var 'aux650' direct represents '0' with '2956'
c Var 'aux650' order represents '1' with '2957'
-2956 2957 0
c Var 'aux650' direct represents '1' with '2958'
2956 -2957 2958 0
-2958 2957 0
-2958 -2956 0
c Var 'aux650' direct represents '2' with '-2957'
2956 2958 -2957 0
c Encoding variable: aux651 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2959'
c Var 'aux651' direct represents '0' with '2959'
c Var 'aux651' order represents '1' with '2960'
-2959 2960 0
c Var 'aux651' direct represents '1' with '2961'
2959 -2960 2961 0
-2961 2960 0
-2961 -2959 0
c Var 'aux651' direct represents '2' with '-2960'
2959 2961 -2960 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2962'
c Var 'aux652' direct represents '0' with '2962'
c Var 'aux652' order represents '1' with '2963'
-2962 2963 0
c Var 'aux652' direct represents '1' with '2964'
2962 -2963 2964 0
-2964 2963 0
-2964 -2962 0
c Var 'aux652' direct represents '2' with '-2963'
2962 2964 -2963 0
c Encoding variable: aux653 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux652))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2965'
c Var 'aux653' direct represents '0' with '2965'
c Var 'aux653' order represents '1' with '2966'
-2965 2966 0
c Var 'aux653' direct represents '1' with '2967'
2965 -2966 2967 0
-2967 2966 0
-2967 -2965 0
c Var 'aux653' order represents '2' with '2968'
-2966 2968 0
c Var 'aux653' direct represents '2' with '2969'
2966 -2968 2969 0
-2969 2968 0
-2969 -2966 0
c Var 'aux653' direct represents '3' with '-2968'
2965 2967 2969 -2968 0
c Encoding variable: aux654 with domain: int(0..4) (representing constraint (aux649 + aux651))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2970'
c Var 'aux654' direct represents '0' with '2970'
c Var 'aux654' order represents '1' with '2971'
-2970 2971 0
c Var 'aux654' direct represents '1' with '2972'
2970 -2971 2972 0
-2972 2971 0
-2972 -2970 0
c Var 'aux654' order represents '2' with '2973'
-2971 2973 0
c Var 'aux654' direct represents '2' with '2974'
2971 -2973 2974 0
-2974 2973 0
-2974 -2971 0
c Var 'aux654' order represents '3' with '2975'
-2973 2975 0
c Var 'aux654' direct represents '3' with '2976'
2973 -2975 2976 0
-2976 2975 0
-2976 -2973 0
c Var 'aux654' direct represents '4' with '-2975'
2970 2972 2974 2976 -2975 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2977'
c Var 'aux655' direct represents '0' with '2977'
c Var 'aux655' order represents '1' with '2978'
-2977 2978 0
c Var 'aux655' direct represents '1' with '2979'
2977 -2978 2979 0
-2979 2978 0
-2979 -2977 0
c Var 'aux655' direct represents '2' with '-2978'
2977 2979 -2978 0
c Encoding variable: aux656 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2980'
c Var 'aux656' direct represents '0' with '2980'
c Var 'aux656' order represents '1' with '2981'
-2980 2981 0
c Var 'aux656' direct represents '1' with '2982'
2980 -2981 2982 0
-2982 2981 0
-2982 -2980 0
c Var 'aux656' direct represents '2' with '-2981'
2980 2982 -2981 0
c Encoding variable: aux657 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2983'
c Var 'aux657' direct represents '0' with '2983'
c Var 'aux657' order represents '1' with '2984'
-2983 2984 0
c Var 'aux657' direct represents '1' with '2985'
2983 -2984 2985 0
-2985 2984 0
-2985 -2983 0
c Var 'aux657' direct represents '2' with '-2984'
2983 2985 -2984 0
c Encoding variable: aux658 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2986'
c Var 'aux658' direct represents '0' with '2986'
c Var 'aux658' order represents '1' with '2987'
-2986 2987 0
c Var 'aux658' direct represents '1' with '2988'
2986 -2987 2988 0
-2988 2987 0
-2988 -2986 0
c Var 'aux658' direct represents '2' with '-2987'
2986 2988 -2987 0
c Encoding variable: aux659 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux658))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2989'
c Var 'aux659' direct represents '0' with '2989'
c Var 'aux659' order represents '1' with '2990'
-2989 2990 0
c Var 'aux659' direct represents '1' with '2991'
2989 -2990 2991 0
-2991 2990 0
-2991 -2989 0
c Var 'aux659' order represents '2' with '2992'
-2990 2992 0
c Var 'aux659' direct represents '2' with '2993'
2990 -2992 2993 0
-2993 2992 0
-2993 -2990 0
c Var 'aux659' direct represents '3' with '-2992'
2989 2991 2993 -2992 0
c Encoding variable: aux660 with domain: int(0..4) (representing constraint (aux655 + aux657))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2994'
c Var 'aux660' direct represents '0' with '2994'
c Var 'aux660' order represents '1' with '2995'
-2994 2995 0
c Var 'aux660' direct represents '1' with '2996'
2994 -2995 2996 0
-2996 2995 0
-2996 -2994 0
c Var 'aux660' order represents '2' with '2997'
-2995 2997 0
c Var 'aux660' direct represents '2' with '2998'
2995 -2997 2998 0
-2998 2997 0
-2998 -2995 0
c Var 'aux660' order represents '3' with '2999'
-2997 2999 0
c Var 'aux660' direct represents '3' with '3000'
2997 -2999 3000 0
-3000 2999 0
-3000 -2997 0
c Var 'aux660' direct represents '4' with '-2999'
2994 2996 2998 3000 -2999 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '3001'
c Var 'aux661' direct represents '0' with '3001'
c Var 'aux661' order represents '1' with '3002'
-3001 3002 0
c Var 'aux661' direct represents '1' with '3003'
3001 -3002 3003 0
-3003 3002 0
-3003 -3001 0
c Var 'aux661' direct represents '2' with '-3002'
3001 3003 -3002 0
c Encoding variable: aux662 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '3004'
c Var 'aux662' direct represents '0' with '3004'
c Var 'aux662' order represents '1' with '3005'
-3004 3005 0
c Var 'aux662' direct represents '1' with '3006'
3004 -3005 3006 0
-3006 3005 0
-3006 -3004 0
c Var 'aux662' direct represents '2' with '-3005'
3004 3006 -3005 0
c Encoding variable: aux663 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '3007'
c Var 'aux663' direct represents '0' with '3007'
c Var 'aux663' order represents '1' with '3008'
-3007 3008 0
c Var 'aux663' direct represents '1' with '3009'
3007 -3008 3009 0
-3009 3008 0
-3009 -3007 0
c Var 'aux663' direct represents '2' with '-3008'
3007 3009 -3008 0
c Encoding variable: aux664 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '3010'
c Var 'aux664' direct represents '0' with '3010'
c Var 'aux664' order represents '1' with '3011'
-3010 3011 0
c Var 'aux664' direct represents '1' with '3012'
3010 -3011 3012 0
-3012 3011 0
-3012 -3010 0
c Var 'aux664' direct represents '2' with '-3011'
3010 3012 -3011 0
c Encoding variable: aux665 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux664))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '3013'
c Var 'aux665' direct represents '0' with '3013'
c Var 'aux665' order represents '1' with '3014'
-3013 3014 0
c Var 'aux665' direct represents '1' with '3015'
3013 -3014 3015 0
-3015 3014 0
-3015 -3013 0
c Var 'aux665' order represents '2' with '3016'
-3014 3016 0
c Var 'aux665' direct represents '2' with '3017'
3014 -3016 3017 0
-3017 3016 0
-3017 -3014 0
c Var 'aux665' direct represents '3' with '-3016'
3013 3015 3017 -3016 0
c Encoding variable: aux666 with domain: int(0..4) (representing constraint (aux661 + aux663))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '3018'
c Var 'aux666' direct represents '0' with '3018'
c Var 'aux666' order represents '1' with '3019'
-3018 3019 0
c Var 'aux666' direct represents '1' with '3020'
3018 -3019 3020 0
-3020 3019 0
-3020 -3018 0
c Var 'aux666' order represents '2' with '3021'
-3019 3021 0
c Var 'aux666' direct represents '2' with '3022'
3019 -3021 3022 0
-3022 3021 0
-3022 -3019 0
c Var 'aux666' order represents '3' with '3023'
-3021 3023 0
c Var 'aux666' direct represents '3' with '3024'
3021 -3023 3024 0
-3024 3023 0
-3024 -3021 0
c Var 'aux666' direct represents '4' with '-3023'
3018 3020 3022 3024 -3023 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '3025'
c Var 'aux667' direct represents '0' with '3025'
c Var 'aux667' order represents '1' with '3026'
-3025 3026 0
c Var 'aux667' direct represents '1' with '3027'
3025 -3026 3027 0
-3027 3026 0
-3027 -3025 0
c Var 'aux667' direct represents '2' with '-3026'
3025 3027 -3026 0
c Encoding variable: aux668 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '3028'
c Var 'aux668' direct represents '0' with '3028'
c Var 'aux668' order represents '1' with '3029'
-3028 3029 0
c Var 'aux668' direct represents '1' with '3030'
3028 -3029 3030 0
-3030 3029 0
-3030 -3028 0
c Var 'aux668' direct represents '2' with '-3029'
3028 3030 -3029 0
c Encoding variable: aux669 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '3031'
c Var 'aux669' direct represents '0' with '3031'
c Var 'aux669' order represents '1' with '3032'
-3031 3032 0
c Var 'aux669' direct represents '1' with '3033'
3031 -3032 3033 0
-3033 3032 0
-3033 -3031 0
c Var 'aux669' direct represents '2' with '-3032'
3031 3033 -3032 0
c Encoding variable: aux670 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '3034'
c Var 'aux670' direct represents '0' with '3034'
c Var 'aux670' order represents '1' with '3035'
-3034 3035 0
c Var 'aux670' direct represents '1' with '3036'
3034 -3035 3036 0
-3036 3035 0
-3036 -3034 0
c Var 'aux670' direct represents '2' with '-3035'
3034 3036 -3035 0
c Encoding variable: aux671 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux670))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '3037'
c Var 'aux671' direct represents '0' with '3037'
c Var 'aux671' order represents '1' with '3038'
-3037 3038 0
c Var 'aux671' direct represents '1' with '3039'
3037 -3038 3039 0
-3039 3038 0
-3039 -3037 0
c Var 'aux671' order represents '2' with '3040'
-3038 3040 0
c Var 'aux671' direct represents '2' with '3041'
3038 -3040 3041 0
-3041 3040 0
-3041 -3038 0
c Var 'aux671' direct represents '3' with '-3040'
3037 3039 3041 -3040 0
c Encoding variable: aux672 with domain: int(0..4) (representing constraint (aux667 + aux669))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '3042'
c Var 'aux672' direct represents '0' with '3042'
c Var 'aux672' order represents '1' with '3043'
-3042 3043 0
c Var 'aux672' direct represents '1' with '3044'
3042 -3043 3044 0
-3044 3043 0
-3044 -3042 0
c Var 'aux672' order represents '2' with '3045'
-3043 3045 0
c Var 'aux672' direct represents '2' with '3046'
3043 -3045 3046 0
-3046 3045 0
-3046 -3043 0
c Var 'aux672' order represents '3' with '3047'
-3045 3047 0
c Var 'aux672' direct represents '3' with '3048'
3045 -3047 3048 0
-3048 3047 0
-3048 -3045 0
c Var 'aux672' direct represents '4' with '-3047'
3042 3044 3046 3048 -3047 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '3049'
c Var 'aux673' direct represents '0' with '3049'
c Var 'aux673' order represents '1' with '3050'
-3049 3050 0
c Var 'aux673' direct represents '1' with '3051'
3049 -3050 3051 0
-3051 3050 0
-3051 -3049 0
c Var 'aux673' direct represents '2' with '-3050'
3049 3051 -3050 0
c Encoding variable: aux674 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '3052'
c Var 'aux674' direct represents '0' with '3052'
c Var 'aux674' order represents '1' with '3053'
-3052 3053 0
c Var 'aux674' direct represents '1' with '3054'
3052 -3053 3054 0
-3054 3053 0
-3054 -3052 0
c Var 'aux674' direct represents '2' with '-3053'
3052 3054 -3053 0
c Encoding variable: aux675 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '3055'
c Var 'aux675' direct represents '0' with '3055'
c Var 'aux675' order represents '1' with '3056'
-3055 3056 0
c Var 'aux675' direct represents '1' with '3057'
3055 -3056 3057 0
-3057 3056 0
-3057 -3055 0
c Var 'aux675' direct represents '2' with '-3056'
3055 3057 -3056 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '3058'
c Var 'aux676' direct represents '0' with '3058'
c Var 'aux676' order represents '1' with '3059'
-3058 3059 0
c Var 'aux676' direct represents '1' with '3060'
3058 -3059 3060 0
-3060 3059 0
-3060 -3058 0
c Var 'aux676' direct represents '2' with '-3059'
3058 3060 -3059 0
c Encoding variable: aux677 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux676))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '3061'
c Var 'aux677' direct represents '0' with '3061'
c Var 'aux677' order represents '1' with '3062'
-3061 3062 0
c Var 'aux677' direct represents '1' with '3063'
3061 -3062 3063 0
-3063 3062 0
-3063 -3061 0
c Var 'aux677' order represents '2' with '3064'
-3062 3064 0
c Var 'aux677' direct represents '2' with '3065'
3062 -3064 3065 0
-3065 3064 0
-3065 -3062 0
c Var 'aux677' direct represents '3' with '-3064'
3061 3063 3065 -3064 0
c Encoding variable: aux678 with domain: int(0..4) (representing constraint (aux673 + aux675))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '3066'
c Var 'aux678' direct represents '0' with '3066'
c Var 'aux678' order represents '1' with '3067'
-3066 3067 0
c Var 'aux678' direct represents '1' with '3068'
3066 -3067 3068 0
-3068 3067 0
-3068 -3066 0
c Var 'aux678' order represents '2' with '3069'
-3067 3069 0
c Var 'aux678' direct represents '2' with '3070'
3067 -3069 3070 0
-3070 3069 0
-3070 -3067 0
c Var 'aux678' order represents '3' with '3071'
-3069 3071 0
c Var 'aux678' direct represents '3' with '3072'
3069 -3071 3072 0
-3072 3071 0
-3072 -3069 0
c Var 'aux678' direct represents '4' with '-3071'
3066 3068 3070 3072 -3071 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '3073'
c Var 'aux679' direct represents '0' with '3073'
c Var 'aux679' order represents '1' with '3074'
-3073 3074 0
c Var 'aux679' direct represents '1' with '3075'
3073 -3074 3075 0
-3075 3074 0
-3075 -3073 0
c Var 'aux679' direct represents '2' with '-3074'
3073 3075 -3074 0
c Encoding variable: aux680 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '3076'
c Var 'aux680' direct represents '0' with '3076'
c Var 'aux680' order represents '1' with '3077'
-3076 3077 0
c Var 'aux680' direct represents '1' with '3078'
3076 -3077 3078 0
-3078 3077 0
-3078 -3076 0
c Var 'aux680' direct represents '2' with '-3077'
3076 3078 -3077 0
c Encoding variable: aux681 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '3079'
c Var 'aux681' direct represents '0' with '3079'
c Var 'aux681' order represents '1' with '3080'
-3079 3080 0
c Var 'aux681' direct represents '1' with '3081'
3079 -3080 3081 0
-3081 3080 0
-3081 -3079 0
c Var 'aux681' direct represents '2' with '-3080'
3079 3081 -3080 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '3082'
c Var 'aux682' direct represents '0' with '3082'
c Var 'aux682' order represents '1' with '3083'
-3082 3083 0
c Var 'aux682' direct represents '1' with '3084'
3082 -3083 3084 0
-3084 3083 0
-3084 -3082 0
c Var 'aux682' direct represents '2' with '-3083'
3082 3084 -3083 0
c Encoding variable: aux683 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux682))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '3085'
c Var 'aux683' direct represents '0' with '3085'
c Var 'aux683' order represents '1' with '3086'
-3085 3086 0
c Var 'aux683' direct represents '1' with '3087'
3085 -3086 3087 0
-3087 3086 0
-3087 -3085 0
c Var 'aux683' order represents '2' with '3088'
-3086 3088 0
c Var 'aux683' direct represents '2' with '3089'
3086 -3088 3089 0
-3089 3088 0
-3089 -3086 0
c Var 'aux683' direct represents '3' with '-3088'
3085 3087 3089 -3088 0
c Encoding variable: aux684 with domain: int(0..4) (representing constraint (aux679 + aux681))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '3090'
c Var 'aux684' direct represents '0' with '3090'
c Var 'aux684' order represents '1' with '3091'
-3090 3091 0
c Var 'aux684' direct represents '1' with '3092'
3090 -3091 3092 0
-3092 3091 0
-3092 -3090 0
c Var 'aux684' order represents '2' with '3093'
-3091 3093 0
c Var 'aux684' direct represents '2' with '3094'
3091 -3093 3094 0
-3094 3093 0
-3094 -3091 0
c Var 'aux684' order represents '3' with '3095'
-3093 3095 0
c Var 'aux684' direct represents '3' with '3096'
3093 -3095 3096 0
-3096 3095 0
-3096 -3093 0
c Var 'aux684' direct represents '4' with '-3095'
3090 3092 3094 3096 -3095 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '3097'
c Var 'aux685' direct represents '0' with '3097'
c Var 'aux685' order represents '1' with '3098'
-3097 3098 0
c Var 'aux685' direct represents '1' with '3099'
3097 -3098 3099 0
-3099 3098 0
-3099 -3097 0
c Var 'aux685' direct represents '2' with '-3098'
3097 3099 -3098 0
c Encoding variable: aux686 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '3100'
c Var 'aux686' direct represents '0' with '3100'
c Var 'aux686' order represents '1' with '3101'
-3100 3101 0
c Var 'aux686' direct represents '1' with '3102'
3100 -3101 3102 0
-3102 3101 0
-3102 -3100 0
c Var 'aux686' direct represents '2' with '-3101'
3100 3102 -3101 0
c Encoding variable: aux687 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '3103'
c Var 'aux687' direct represents '0' with '3103'
c Var 'aux687' order represents '1' with '3104'
-3103 3104 0
c Var 'aux687' direct represents '1' with '3105'
3103 -3104 3105 0
-3105 3104 0
-3105 -3103 0
c Var 'aux687' direct represents '2' with '-3104'
3103 3105 -3104 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '3106'
c Var 'aux688' direct represents '0' with '3106'
c Var 'aux688' order represents '1' with '3107'
-3106 3107 0
c Var 'aux688' direct represents '1' with '3108'
3106 -3107 3108 0
-3108 3107 0
-3108 -3106 0
c Var 'aux688' direct represents '2' with '-3107'
3106 3108 -3107 0
c Encoding variable: aux689 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux688))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '3109'
c Var 'aux689' direct represents '0' with '3109'
c Var 'aux689' order represents '1' with '3110'
-3109 3110 0
c Var 'aux689' direct represents '1' with '3111'
3109 -3110 3111 0
-3111 3110 0
-3111 -3109 0
c Var 'aux689' order represents '2' with '3112'
-3110 3112 0
c Var 'aux689' direct represents '2' with '3113'
3110 -3112 3113 0
-3113 3112 0
-3113 -3110 0
c Var 'aux689' direct represents '3' with '-3112'
3109 3111 3113 -3112 0
c Encoding variable: aux690 with domain: int(0..4) (representing constraint (aux685 + aux687))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '3114'
c Var 'aux690' direct represents '0' with '3114'
c Var 'aux690' order represents '1' with '3115'
-3114 3115 0
c Var 'aux690' direct represents '1' with '3116'
3114 -3115 3116 0
-3116 3115 0
-3116 -3114 0
c Var 'aux690' order represents '2' with '3117'
-3115 3117 0
c Var 'aux690' direct represents '2' with '3118'
3115 -3117 3118 0
-3118 3117 0
-3118 -3115 0
c Var 'aux690' order represents '3' with '3119'
-3117 3119 0
c Var 'aux690' direct represents '3' with '3120'
3117 -3119 3120 0
-3120 3119 0
-3120 -3117 0
c Var 'aux690' direct represents '4' with '-3119'
3114 3116 3118 3120 -3119 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '3121'
c Var 'aux691' direct represents '0' with '3121'
c Var 'aux691' order represents '1' with '3122'
-3121 3122 0
c Var 'aux691' direct represents '1' with '3123'
3121 -3122 3123 0
-3123 3122 0
-3123 -3121 0
c Var 'aux691' direct represents '2' with '-3122'
3121 3123 -3122 0
c Encoding variable: aux692 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '3124'
c Var 'aux692' direct represents '0' with '3124'
c Var 'aux692' order represents '1' with '3125'
-3124 3125 0
c Var 'aux692' direct represents '1' with '3126'
3124 -3125 3126 0
-3126 3125 0
-3126 -3124 0
c Var 'aux692' direct represents '2' with '-3125'
3124 3126 -3125 0
c Encoding variable: aux693 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '3127'
c Var 'aux693' direct represents '0' with '3127'
c Var 'aux693' order represents '1' with '3128'
-3127 3128 0
c Var 'aux693' direct represents '1' with '3129'
3127 -3128 3129 0
-3129 3128 0
-3129 -3127 0
c Var 'aux693' direct represents '2' with '-3128'
3127 3129 -3128 0
c Encoding variable: aux694 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '3130'
c Var 'aux694' direct represents '0' with '3130'
c Var 'aux694' order represents '1' with '3131'
-3130 3131 0
c Var 'aux694' direct represents '1' with '3132'
3130 -3131 3132 0
-3132 3131 0
-3132 -3130 0
c Var 'aux694' direct represents '2' with '-3131'
3130 3132 -3131 0
c Encoding variable: aux695 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux694))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '3133'
c Var 'aux695' direct represents '0' with '3133'
c Var 'aux695' order represents '1' with '3134'
-3133 3134 0
c Var 'aux695' direct represents '1' with '3135'
3133 -3134 3135 0
-3135 3134 0
-3135 -3133 0
c Var 'aux695' order represents '2' with '3136'
-3134 3136 0
c Var 'aux695' direct represents '2' with '3137'
3134 -3136 3137 0
-3137 3136 0
-3137 -3134 0
c Var 'aux695' direct represents '3' with '-3136'
3133 3135 3137 -3136 0
c Encoding variable: aux696 with domain: int(0..4) (representing constraint (aux691 + aux693))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '3138'
c Var 'aux696' direct represents '0' with '3138'
c Var 'aux696' order represents '1' with '3139'
-3138 3139 0
c Var 'aux696' direct represents '1' with '3140'
3138 -3139 3140 0
-3140 3139 0
-3140 -3138 0
c Var 'aux696' order represents '2' with '3141'
-3139 3141 0
c Var 'aux696' direct represents '2' with '3142'
3139 -3141 3142 0
-3142 3141 0
-3142 -3139 0
c Var 'aux696' order represents '3' with '3143'
-3141 3143 0
c Var 'aux696' direct represents '3' with '3144'
3141 -3143 3144 0
-3144 3143 0
-3144 -3141 0
c Var 'aux696' direct represents '4' with '-3143'
3138 3140 3142 3144 -3143 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '3145'
c Var 'aux697' direct represents '0' with '3145'
c Var 'aux697' order represents '1' with '3146'
-3145 3146 0
c Var 'aux697' direct represents '1' with '3147'
3145 -3146 3147 0
-3147 3146 0
-3147 -3145 0
c Var 'aux697' direct represents '2' with '-3146'
3145 3147 -3146 0
c Encoding variable: aux698 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '3148'
c Var 'aux698' direct represents '0' with '3148'
c Var 'aux698' order represents '1' with '3149'
-3148 3149 0
c Var 'aux698' direct represents '1' with '3150'
3148 -3149 3150 0
-3150 3149 0
-3150 -3148 0
c Var 'aux698' direct represents '2' with '-3149'
3148 3150 -3149 0
c Encoding variable: aux699 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '3151'
c Var 'aux699' direct represents '0' with '3151'
c Var 'aux699' order represents '1' with '3152'
-3151 3152 0
c Var 'aux699' direct represents '1' with '3153'
3151 -3152 3153 0
-3153 3152 0
-3153 -3151 0
c Var 'aux699' direct represents '2' with '-3152'
3151 3153 -3152 0
c Encoding variable: aux700 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '3154'
c Var 'aux700' direct represents '0' with '3154'
c Var 'aux700' order represents '1' with '3155'
-3154 3155 0
c Var 'aux700' direct represents '1' with '3156'
3154 -3155 3156 0
-3156 3155 0
-3156 -3154 0
c Var 'aux700' direct represents '2' with '-3155'
3154 3156 -3155 0
c Encoding variable: aux701 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux700))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '3157'
c Var 'aux701' direct represents '0' with '3157'
c Var 'aux701' order represents '1' with '3158'
-3157 3158 0
c Var 'aux701' direct represents '1' with '3159'
3157 -3158 3159 0
-3159 3158 0
-3159 -3157 0
c Var 'aux701' order represents '2' with '3160'
-3158 3160 0
c Var 'aux701' direct represents '2' with '3161'
3158 -3160 3161 0
-3161 3160 0
-3161 -3158 0
c Var 'aux701' direct represents '3' with '-3160'
3157 3159 3161 -3160 0
c Encoding variable: aux702 with domain: int(0..4) (representing constraint (aux697 + aux699))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '3162'
c Var 'aux702' direct represents '0' with '3162'
c Var 'aux702' order represents '1' with '3163'
-3162 3163 0
c Var 'aux702' direct represents '1' with '3164'
3162 -3163 3164 0
-3164 3163 0
-3164 -3162 0
c Var 'aux702' order represents '2' with '3165'
-3163 3165 0
c Var 'aux702' direct represents '2' with '3166'
3163 -3165 3166 0
-3166 3165 0
-3166 -3163 0
c Var 'aux702' order represents '3' with '3167'
-3165 3167 0
c Var 'aux702' direct represents '3' with '3168'
3165 -3167 3168 0
-3168 3167 0
-3168 -3165 0
c Var 'aux702' direct represents '4' with '-3167'
3162 3164 3166 3168 -3167 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '3169'
c Var 'aux703' direct represents '0' with '3169'
c Var 'aux703' order represents '1' with '3170'
-3169 3170 0
c Var 'aux703' direct represents '1' with '3171'
3169 -3170 3171 0
-3171 3170 0
-3171 -3169 0
c Var 'aux703' direct represents '2' with '-3170'
3169 3171 -3170 0
c Encoding variable: aux704 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '3172'
c Var 'aux704' direct represents '0' with '3172'
c Var 'aux704' order represents '1' with '3173'
-3172 3173 0
c Var 'aux704' direct represents '1' with '3174'
3172 -3173 3174 0
-3174 3173 0
-3174 -3172 0
c Var 'aux704' direct represents '2' with '-3173'
3172 3174 -3173 0
c Encoding variable: aux705 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '3175'
c Var 'aux705' direct represents '0' with '3175'
c Var 'aux705' order represents '1' with '3176'
-3175 3176 0
c Var 'aux705' direct represents '1' with '3177'
3175 -3176 3177 0
-3177 3176 0
-3177 -3175 0
c Var 'aux705' direct represents '2' with '-3176'
3175 3177 -3176 0
c Encoding variable: aux706 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '3178'
c Var 'aux706' direct represents '0' with '3178'
c Var 'aux706' order represents '1' with '3179'
-3178 3179 0
c Var 'aux706' direct represents '1' with '3180'
3178 -3179 3180 0
-3180 3179 0
-3180 -3178 0
c Var 'aux706' direct represents '2' with '-3179'
3178 3180 -3179 0
c Encoding variable: aux707 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux706))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '3181'
c Var 'aux707' direct represents '0' with '3181'
c Var 'aux707' order represents '1' with '3182'
-3181 3182 0
c Var 'aux707' direct represents '1' with '3183'
3181 -3182 3183 0
-3183 3182 0
-3183 -3181 0
c Var 'aux707' order represents '2' with '3184'
-3182 3184 0
c Var 'aux707' direct represents '2' with '3185'
3182 -3184 3185 0
-3185 3184 0
-3185 -3182 0
c Var 'aux707' direct represents '3' with '-3184'
3181 3183 3185 -3184 0
c Encoding variable: aux708 with domain: int(0..4) (representing constraint (aux703 + aux705))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '3186'
c Var 'aux708' direct represents '0' with '3186'
c Var 'aux708' order represents '1' with '3187'
-3186 3187 0
c Var 'aux708' direct represents '1' with '3188'
3186 -3187 3188 0
-3188 3187 0
-3188 -3186 0
c Var 'aux708' order represents '2' with '3189'
-3187 3189 0
c Var 'aux708' direct represents '2' with '3190'
3187 -3189 3190 0
-3190 3189 0
-3190 -3187 0
c Var 'aux708' order represents '3' with '3191'
-3189 3191 0
c Var 'aux708' direct represents '3' with '3192'
3189 -3191 3192 0
-3192 3191 0
-3192 -3189 0
c Var 'aux708' direct represents '4' with '-3191'
3186 3188 3190 3192 -3191 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '3193'
c Var 'aux709' direct represents '0' with '3193'
c Var 'aux709' order represents '1' with '3194'
-3193 3194 0
c Var 'aux709' direct represents '1' with '3195'
3193 -3194 3195 0
-3195 3194 0
-3195 -3193 0
c Var 'aux709' direct represents '2' with '-3194'
3193 3195 -3194 0
c Encoding variable: aux710 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '3196'
c Var 'aux710' direct represents '0' with '3196'
c Var 'aux710' order represents '1' with '3197'
-3196 3197 0
c Var 'aux710' direct represents '1' with '3198'
3196 -3197 3198 0
-3198 3197 0
-3198 -3196 0
c Var 'aux710' direct represents '2' with '-3197'
3196 3198 -3197 0
c Encoding variable: aux711 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '3199'
c Var 'aux711' direct represents '0' with '3199'
c Var 'aux711' order represents '1' with '3200'
-3199 3200 0
c Var 'aux711' direct represents '1' with '3201'
3199 -3200 3201 0
-3201 3200 0
-3201 -3199 0
c Var 'aux711' direct represents '2' with '-3200'
3199 3201 -3200 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '3202'
c Var 'aux712' direct represents '0' with '3202'
c Var 'aux712' order represents '1' with '3203'
-3202 3203 0
c Var 'aux712' direct represents '1' with '3204'
3202 -3203 3204 0
-3204 3203 0
-3204 -3202 0
c Var 'aux712' direct represents '2' with '-3203'
3202 3204 -3203 0
c Encoding variable: aux713 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux712))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '3205'
c Var 'aux713' direct represents '0' with '3205'
c Var 'aux713' order represents '1' with '3206'
-3205 3206 0
c Var 'aux713' direct represents '1' with '3207'
3205 -3206 3207 0
-3207 3206 0
-3207 -3205 0
c Var 'aux713' order represents '2' with '3208'
-3206 3208 0
c Var 'aux713' direct represents '2' with '3209'
3206 -3208 3209 0
-3209 3208 0
-3209 -3206 0
c Var 'aux713' direct represents '3' with '-3208'
3205 3207 3209 -3208 0
c Encoding variable: aux714 with domain: int(0..4) (representing constraint (aux709 + aux711))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '3210'
c Var 'aux714' direct represents '0' with '3210'
c Var 'aux714' order represents '1' with '3211'
-3210 3211 0
c Var 'aux714' direct represents '1' with '3212'
3210 -3211 3212 0
-3212 3211 0
-3212 -3210 0
c Var 'aux714' order represents '2' with '3213'
-3211 3213 0
c Var 'aux714' direct represents '2' with '3214'
3211 -3213 3214 0
-3214 3213 0
-3214 -3211 0
c Var 'aux714' order represents '3' with '3215'
-3213 3215 0
c Var 'aux714' direct represents '3' with '3216'
3213 -3215 3216 0
-3216 3215 0
-3216 -3213 0
c Var 'aux714' direct represents '4' with '-3215'
3210 3212 3214 3216 -3215 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '3217'
c Var 'aux715' direct represents '0' with '3217'
c Var 'aux715' order represents '1' with '3218'
-3217 3218 0
c Var 'aux715' direct represents '1' with '3219'
3217 -3218 3219 0
-3219 3218 0
-3219 -3217 0
c Var 'aux715' direct represents '2' with '-3218'
3217 3219 -3218 0
c Encoding variable: aux716 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '3220'
c Var 'aux716' direct represents '0' with '3220'
c Var 'aux716' order represents '1' with '3221'
-3220 3221 0
c Var 'aux716' direct represents '1' with '3222'
3220 -3221 3222 0
-3222 3221 0
-3222 -3220 0
c Var 'aux716' direct represents '2' with '-3221'
3220 3222 -3221 0
c Encoding variable: aux717 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '3223'
c Var 'aux717' direct represents '0' with '3223'
c Var 'aux717' order represents '1' with '3224'
-3223 3224 0
c Var 'aux717' direct represents '1' with '3225'
3223 -3224 3225 0
-3225 3224 0
-3225 -3223 0
c Var 'aux717' direct represents '2' with '-3224'
3223 3225 -3224 0
c Encoding variable: aux718 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '3226'
c Var 'aux718' direct represents '0' with '3226'
c Var 'aux718' order represents '1' with '3227'
-3226 3227 0
c Var 'aux718' direct represents '1' with '3228'
3226 -3227 3228 0
-3228 3227 0
-3228 -3226 0
c Var 'aux718' direct represents '2' with '-3227'
3226 3228 -3227 0
c Encoding variable: aux719 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux718))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '3229'
c Var 'aux719' direct represents '0' with '3229'
c Var 'aux719' order represents '1' with '3230'
-3229 3230 0
c Var 'aux719' direct represents '1' with '3231'
3229 -3230 3231 0
-3231 3230 0
-3231 -3229 0
c Var 'aux719' order represents '2' with '3232'
-3230 3232 0
c Var 'aux719' direct represents '2' with '3233'
3230 -3232 3233 0
-3233 3232 0
-3233 -3230 0
c Var 'aux719' direct represents '3' with '-3232'
3229 3231 3233 -3232 0
c Encoding variable: aux720 with domain: int(0..4) (representing constraint (aux715 + aux717))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '3234'
c Var 'aux720' direct represents '0' with '3234'
c Var 'aux720' order represents '1' with '3235'
-3234 3235 0
c Var 'aux720' direct represents '1' with '3236'
3234 -3235 3236 0
-3236 3235 0
-3236 -3234 0
c Var 'aux720' order represents '2' with '3237'
-3235 3237 0
c Var 'aux720' direct represents '2' with '3238'
3235 -3237 3238 0
-3238 3237 0
-3238 -3235 0
c Var 'aux720' order represents '3' with '3239'
-3237 3239 0
c Var 'aux720' direct represents '3' with '3240'
3237 -3239 3240 0
-3240 3239 0
-3240 -3237 0
c Var 'aux720' direct represents '4' with '-3239'
3234 3236 3238 3240 -3239 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '3241'
c Var 'aux721' direct represents '0' with '3241'
c Var 'aux721' order represents '1' with '3242'
-3241 3242 0
c Var 'aux721' direct represents '1' with '3243'
3241 -3242 3243 0
-3243 3242 0
-3243 -3241 0
c Var 'aux721' direct represents '2' with '-3242'
3241 3243 -3242 0
c Encoding variable: aux722 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '3244'
c Var 'aux722' direct represents '0' with '3244'
c Var 'aux722' order represents '1' with '3245'
-3244 3245 0
c Var 'aux722' direct represents '1' with '3246'
3244 -3245 3246 0
-3246 3245 0
-3246 -3244 0
c Var 'aux722' direct represents '2' with '-3245'
3244 3246 -3245 0
c Encoding variable: aux723 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '3247'
c Var 'aux723' direct represents '0' with '3247'
c Var 'aux723' order represents '1' with '3248'
-3247 3248 0
c Var 'aux723' direct represents '1' with '3249'
3247 -3248 3249 0
-3249 3248 0
-3249 -3247 0
c Var 'aux723' direct represents '2' with '-3248'
3247 3249 -3248 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '3250'
c Var 'aux724' direct represents '0' with '3250'
c Var 'aux724' order represents '1' with '3251'
-3250 3251 0
c Var 'aux724' direct represents '1' with '3252'
3250 -3251 3252 0
-3252 3251 0
-3252 -3250 0
c Var 'aux724' direct represents '2' with '-3251'
3250 3252 -3251 0
c Encoding variable: aux725 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux724))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '3253'
c Var 'aux725' direct represents '0' with '3253'
c Var 'aux725' order represents '1' with '3254'
-3253 3254 0
c Var 'aux725' direct represents '1' with '3255'
3253 -3254 3255 0
-3255 3254 0
-3255 -3253 0
c Var 'aux725' order represents '2' with '3256'
-3254 3256 0
c Var 'aux725' direct represents '2' with '3257'
3254 -3256 3257 0
-3257 3256 0
-3257 -3254 0
c Var 'aux725' direct represents '3' with '-3256'
3253 3255 3257 -3256 0
c Encoding variable: aux726 with domain: int(0..4) (representing constraint (aux721 + aux723))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '3258'
c Var 'aux726' direct represents '0' with '3258'
c Var 'aux726' order represents '1' with '3259'
-3258 3259 0
c Var 'aux726' direct represents '1' with '3260'
3258 -3259 3260 0
-3260 3259 0
-3260 -3258 0
c Var 'aux726' order represents '2' with '3261'
-3259 3261 0
c Var 'aux726' direct represents '2' with '3262'
3259 -3261 3262 0
-3262 3261 0
-3262 -3259 0
c Var 'aux726' order represents '3' with '3263'
-3261 3263 0
c Var 'aux726' direct represents '3' with '3264'
3261 -3263 3264 0
-3264 3263 0
-3264 -3261 0
c Var 'aux726' direct represents '4' with '-3263'
3258 3260 3262 3264 -3263 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '3265'
c Var 'aux727' direct represents '0' with '3265'
c Var 'aux727' order represents '1' with '3266'
-3265 3266 0
c Var 'aux727' direct represents '1' with '3267'
3265 -3266 3267 0
-3267 3266 0
-3267 -3265 0
c Var 'aux727' direct represents '2' with '-3266'
3265 3267 -3266 0
c Encoding variable: aux728 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '3268'
c Var 'aux728' direct represents '0' with '3268'
c Var 'aux728' order represents '1' with '3269'
-3268 3269 0
c Var 'aux728' direct represents '1' with '3270'
3268 -3269 3270 0
-3270 3269 0
-3270 -3268 0
c Var 'aux728' direct represents '2' with '-3269'
3268 3270 -3269 0
c Encoding variable: aux729 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '3271'
c Var 'aux729' direct represents '0' with '3271'
c Var 'aux729' order represents '1' with '3272'
-3271 3272 0
c Var 'aux729' direct represents '1' with '3273'
3271 -3272 3273 0
-3273 3272 0
-3273 -3271 0
c Var 'aux729' direct represents '2' with '-3272'
3271 3273 -3272 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '3274'
c Var 'aux730' direct represents '0' with '3274'
c Var 'aux730' order represents '1' with '3275'
-3274 3275 0
c Var 'aux730' direct represents '1' with '3276'
3274 -3275 3276 0
-3276 3275 0
-3276 -3274 0
c Var 'aux730' direct represents '2' with '-3275'
3274 3276 -3275 0
c Encoding variable: aux731 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux730))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '3277'
c Var 'aux731' direct represents '0' with '3277'
c Var 'aux731' order represents '1' with '3278'
-3277 3278 0
c Var 'aux731' direct represents '1' with '3279'
3277 -3278 3279 0
-3279 3278 0
-3279 -3277 0
c Var 'aux731' order represents '2' with '3280'
-3278 3280 0
c Var 'aux731' direct represents '2' with '3281'
3278 -3280 3281 0
-3281 3280 0
-3281 -3278 0
c Var 'aux731' direct represents '3' with '-3280'
3277 3279 3281 -3280 0
c Encoding variable: aux732 with domain: int(0..4) (representing constraint (aux727 + aux729))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '3282'
c Var 'aux732' direct represents '0' with '3282'
c Var 'aux732' order represents '1' with '3283'
-3282 3283 0
c Var 'aux732' direct represents '1' with '3284'
3282 -3283 3284 0
-3284 3283 0
-3284 -3282 0
c Var 'aux732' order represents '2' with '3285'
-3283 3285 0
c Var 'aux732' direct represents '2' with '3286'
3283 -3285 3286 0
-3286 3285 0
-3286 -3283 0
c Var 'aux732' order represents '3' with '3287'
-3285 3287 0
c Var 'aux732' direct represents '3' with '3288'
3285 -3287 3288 0
-3288 3287 0
-3288 -3285 0
c Var 'aux732' direct represents '4' with '-3287'
3282 3284 3286 3288 -3287 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '3289'
c Var 'aux733' direct represents '0' with '3289'
c Var 'aux733' order represents '1' with '3290'
-3289 3290 0
c Var 'aux733' direct represents '1' with '3291'
3289 -3290 3291 0
-3291 3290 0
-3291 -3289 0
c Var 'aux733' direct represents '2' with '-3290'
3289 3291 -3290 0
c Encoding variable: aux734 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '3292'
c Var 'aux734' direct represents '0' with '3292'
c Var 'aux734' order represents '1' with '3293'
-3292 3293 0
c Var 'aux734' direct represents '1' with '3294'
3292 -3293 3294 0
-3294 3293 0
-3294 -3292 0
c Var 'aux734' direct represents '2' with '-3293'
3292 3294 -3293 0
c Encoding variable: aux735 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '3295'
c Var 'aux735' direct represents '0' with '3295'
c Var 'aux735' order represents '1' with '3296'
-3295 3296 0
c Var 'aux735' direct represents '1' with '3297'
3295 -3296 3297 0
-3297 3296 0
-3297 -3295 0
c Var 'aux735' direct represents '2' with '-3296'
3295 3297 -3296 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '3298'
c Var 'aux736' direct represents '0' with '3298'
c Var 'aux736' order represents '1' with '3299'
-3298 3299 0
c Var 'aux736' direct represents '1' with '3300'
3298 -3299 3300 0
-3300 3299 0
-3300 -3298 0
c Var 'aux736' direct represents '2' with '-3299'
3298 3300 -3299 0
c Encoding variable: aux737 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux736))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '3301'
c Var 'aux737' direct represents '0' with '3301'
c Var 'aux737' order represents '1' with '3302'
-3301 3302 0
c Var 'aux737' direct represents '1' with '3303'
3301 -3302 3303 0
-3303 3302 0
-3303 -3301 0
c Var 'aux737' order represents '2' with '3304'
-3302 3304 0
c Var 'aux737' direct represents '2' with '3305'
3302 -3304 3305 0
-3305 3304 0
-3305 -3302 0
c Var 'aux737' direct represents '3' with '-3304'
3301 3303 3305 -3304 0
c Encoding variable: aux738 with domain: int(0..4) (representing constraint (aux733 + aux735))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3306'
c Var 'aux738' direct represents '0' with '3306'
c Var 'aux738' order represents '1' with '3307'
-3306 3307 0
c Var 'aux738' direct represents '1' with '3308'
3306 -3307 3308 0
-3308 3307 0
-3308 -3306 0
c Var 'aux738' order represents '2' with '3309'
-3307 3309 0
c Var 'aux738' direct represents '2' with '3310'
3307 -3309 3310 0
-3310 3309 0
-3310 -3307 0
c Var 'aux738' order represents '3' with '3311'
-3309 3311 0
c Var 'aux738' direct represents '3' with '3312'
3309 -3311 3312 0
-3312 3311 0
-3312 -3309 0
c Var 'aux738' direct represents '4' with '-3311'
3306 3308 3310 3312 -3311 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3313'
c Var 'aux739' direct represents '0' with '3313'
c Var 'aux739' order represents '1' with '3314'
-3313 3314 0
c Var 'aux739' direct represents '1' with '3315'
3313 -3314 3315 0
-3315 3314 0
-3315 -3313 0
c Var 'aux739' direct represents '2' with '-3314'
3313 3315 -3314 0
c Encoding variable: aux740 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3316'
c Var 'aux740' direct represents '0' with '3316'
c Var 'aux740' order represents '1' with '3317'
-3316 3317 0
c Var 'aux740' direct represents '1' with '3318'
3316 -3317 3318 0
-3318 3317 0
-3318 -3316 0
c Var 'aux740' direct represents '2' with '-3317'
3316 3318 -3317 0
c Encoding variable: aux741 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3319'
c Var 'aux741' direct represents '0' with '3319'
c Var 'aux741' order represents '1' with '3320'
-3319 3320 0
c Var 'aux741' direct represents '1' with '3321'
3319 -3320 3321 0
-3321 3320 0
-3321 -3319 0
c Var 'aux741' direct represents '2' with '-3320'
3319 3321 -3320 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3322'
c Var 'aux742' direct represents '0' with '3322'
c Var 'aux742' order represents '1' with '3323'
-3322 3323 0
c Var 'aux742' direct represents '1' with '3324'
3322 -3323 3324 0
-3324 3323 0
-3324 -3322 0
c Var 'aux742' direct represents '2' with '-3323'
3322 3324 -3323 0
c Encoding variable: aux743 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux742))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3325'
c Var 'aux743' direct represents '0' with '3325'
c Var 'aux743' order represents '1' with '3326'
-3325 3326 0
c Var 'aux743' direct represents '1' with '3327'
3325 -3326 3327 0
-3327 3326 0
-3327 -3325 0
c Var 'aux743' order represents '2' with '3328'
-3326 3328 0
c Var 'aux743' direct represents '2' with '3329'
3326 -3328 3329 0
-3329 3328 0
-3329 -3326 0
c Var 'aux743' direct represents '3' with '-3328'
3325 3327 3329 -3328 0
c Encoding variable: aux744 with domain: int(0..4) (representing constraint (aux739 + aux741))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3330'
c Var 'aux744' direct represents '0' with '3330'
c Var 'aux744' order represents '1' with '3331'
-3330 3331 0
c Var 'aux744' direct represents '1' with '3332'
3330 -3331 3332 0
-3332 3331 0
-3332 -3330 0
c Var 'aux744' order represents '2' with '3333'
-3331 3333 0
c Var 'aux744' direct represents '2' with '3334'
3331 -3333 3334 0
-3334 3333 0
-3334 -3331 0
c Var 'aux744' order represents '3' with '3335'
-3333 3335 0
c Var 'aux744' direct represents '3' with '3336'
3333 -3335 3336 0
-3336 3335 0
-3336 -3333 0
c Var 'aux744' direct represents '4' with '-3335'
3330 3332 3334 3336 -3335 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3337'
c Var 'aux745' direct represents '0' with '3337'
c Var 'aux745' order represents '1' with '3338'
-3337 3338 0
c Var 'aux745' direct represents '1' with '3339'
3337 -3338 3339 0
-3339 3338 0
-3339 -3337 0
c Var 'aux745' direct represents '2' with '-3338'
3337 3339 -3338 0
c Encoding variable: aux746 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3340'
c Var 'aux746' direct represents '0' with '3340'
c Var 'aux746' order represents '1' with '3341'
-3340 3341 0
c Var 'aux746' direct represents '1' with '3342'
3340 -3341 3342 0
-3342 3341 0
-3342 -3340 0
c Var 'aux746' direct represents '2' with '-3341'
3340 3342 -3341 0
c Encoding variable: aux747 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3343'
c Var 'aux747' direct represents '0' with '3343'
c Var 'aux747' order represents '1' with '3344'
-3343 3344 0
c Var 'aux747' direct represents '1' with '3345'
3343 -3344 3345 0
-3345 3344 0
-3345 -3343 0
c Var 'aux747' direct represents '2' with '-3344'
3343 3345 -3344 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3346'
c Var 'aux748' direct represents '0' with '3346'
c Var 'aux748' order represents '1' with '3347'
-3346 3347 0
c Var 'aux748' direct represents '1' with '3348'
3346 -3347 3348 0
-3348 3347 0
-3348 -3346 0
c Var 'aux748' direct represents '2' with '-3347'
3346 3348 -3347 0
c Encoding variable: aux749 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux748))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3349'
c Var 'aux749' direct represents '0' with '3349'
c Var 'aux749' order represents '1' with '3350'
-3349 3350 0
c Var 'aux749' direct represents '1' with '3351'
3349 -3350 3351 0
-3351 3350 0
-3351 -3349 0
c Var 'aux749' order represents '2' with '3352'
-3350 3352 0
c Var 'aux749' direct represents '2' with '3353'
3350 -3352 3353 0
-3353 3352 0
-3353 -3350 0
c Var 'aux749' direct represents '3' with '-3352'
3349 3351 3353 -3352 0
c Encoding variable: aux750 with domain: int(0..4) (representing constraint (aux745 + aux747))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3354'
c Var 'aux750' direct represents '0' with '3354'
c Var 'aux750' order represents '1' with '3355'
-3354 3355 0
c Var 'aux750' direct represents '1' with '3356'
3354 -3355 3356 0
-3356 3355 0
-3356 -3354 0
c Var 'aux750' order represents '2' with '3357'
-3355 3357 0
c Var 'aux750' direct represents '2' with '3358'
3355 -3357 3358 0
-3358 3357 0
-3358 -3355 0
c Var 'aux750' order represents '3' with '3359'
-3357 3359 0
c Var 'aux750' direct represents '3' with '3360'
3357 -3359 3360 0
-3360 3359 0
-3360 -3357 0
c Var 'aux750' direct represents '4' with '-3359'
3354 3356 3358 3360 -3359 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3361'
c Var 'aux751' direct represents '0' with '3361'
c Var 'aux751' order represents '1' with '3362'
-3361 3362 0
c Var 'aux751' direct represents '1' with '3363'
3361 -3362 3363 0
-3363 3362 0
-3363 -3361 0
c Var 'aux751' direct represents '2' with '-3362'
3361 3363 -3362 0
c Encoding variable: aux752 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3364'
c Var 'aux752' direct represents '0' with '3364'
c Var 'aux752' order represents '1' with '3365'
-3364 3365 0
c Var 'aux752' direct represents '1' with '3366'
3364 -3365 3366 0
-3366 3365 0
-3366 -3364 0
c Var 'aux752' direct represents '2' with '-3365'
3364 3366 -3365 0
c Encoding variable: aux753 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3367'
c Var 'aux753' direct represents '0' with '3367'
c Var 'aux753' order represents '1' with '3368'
-3367 3368 0
c Var 'aux753' direct represents '1' with '3369'
3367 -3368 3369 0
-3369 3368 0
-3369 -3367 0
c Var 'aux753' direct represents '2' with '-3368'
3367 3369 -3368 0
c Encoding variable: aux754 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3370'
c Var 'aux754' direct represents '0' with '3370'
c Var 'aux754' order represents '1' with '3371'
-3370 3371 0
c Var 'aux754' direct represents '1' with '3372'
3370 -3371 3372 0
-3372 3371 0
-3372 -3370 0
c Var 'aux754' direct represents '2' with '-3371'
3370 3372 -3371 0
c Encoding variable: aux755 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux754))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3373'
c Var 'aux755' direct represents '0' with '3373'
c Var 'aux755' order represents '1' with '3374'
-3373 3374 0
c Var 'aux755' direct represents '1' with '3375'
3373 -3374 3375 0
-3375 3374 0
-3375 -3373 0
c Var 'aux755' order represents '2' with '3376'
-3374 3376 0
c Var 'aux755' direct represents '2' with '3377'
3374 -3376 3377 0
-3377 3376 0
-3377 -3374 0
c Var 'aux755' direct represents '3' with '-3376'
3373 3375 3377 -3376 0
c Encoding variable: aux756 with domain: int(0..4) (representing constraint (aux751 + aux753))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3378'
c Var 'aux756' direct represents '0' with '3378'
c Var 'aux756' order represents '1' with '3379'
-3378 3379 0
c Var 'aux756' direct represents '1' with '3380'
3378 -3379 3380 0
-3380 3379 0
-3380 -3378 0
c Var 'aux756' order represents '2' with '3381'
-3379 3381 0
c Var 'aux756' direct represents '2' with '3382'
3379 -3381 3382 0
-3382 3381 0
-3382 -3379 0
c Var 'aux756' order represents '3' with '3383'
-3381 3383 0
c Var 'aux756' direct represents '3' with '3384'
3381 -3383 3384 0
-3384 3383 0
-3384 -3381 0
c Var 'aux756' direct represents '4' with '-3383'
3378 3380 3382 3384 -3383 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3385'
c Var 'aux757' direct represents '0' with '3385'
c Var 'aux757' order represents '1' with '3386'
-3385 3386 0
c Var 'aux757' direct represents '1' with '3387'
3385 -3386 3387 0
-3387 3386 0
-3387 -3385 0
c Var 'aux757' direct represents '2' with '-3386'
3385 3387 -3386 0
c Encoding variable: aux758 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3388'
c Var 'aux758' direct represents '0' with '3388'
c Var 'aux758' order represents '1' with '3389'
-3388 3389 0
c Var 'aux758' direct represents '1' with '3390'
3388 -3389 3390 0
-3390 3389 0
-3390 -3388 0
c Var 'aux758' direct represents '2' with '-3389'
3388 3390 -3389 0
c Encoding variable: aux759 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3391'
c Var 'aux759' direct represents '0' with '3391'
c Var 'aux759' order represents '1' with '3392'
-3391 3392 0
c Var 'aux759' direct represents '1' with '3393'
3391 -3392 3393 0
-3393 3392 0
-3393 -3391 0
c Var 'aux759' direct represents '2' with '-3392'
3391 3393 -3392 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3394'
c Var 'aux760' direct represents '0' with '3394'
c Var 'aux760' order represents '1' with '3395'
-3394 3395 0
c Var 'aux760' direct represents '1' with '3396'
3394 -3395 3396 0
-3396 3395 0
-3396 -3394 0
c Var 'aux760' direct represents '2' with '-3395'
3394 3396 -3395 0
c Encoding variable: aux761 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux760))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3397'
c Var 'aux761' direct represents '0' with '3397'
c Var 'aux761' order represents '1' with '3398'
-3397 3398 0
c Var 'aux761' direct represents '1' with '3399'
3397 -3398 3399 0
-3399 3398 0
-3399 -3397 0
c Var 'aux761' order represents '2' with '3400'
-3398 3400 0
c Var 'aux761' direct represents '2' with '3401'
3398 -3400 3401 0
-3401 3400 0
-3401 -3398 0
c Var 'aux761' direct represents '3' with '-3400'
3397 3399 3401 -3400 0
c Encoding variable: aux762 with domain: int(0..4) (representing constraint (aux757 + aux759))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3402'
c Var 'aux762' direct represents '0' with '3402'
c Var 'aux762' order represents '1' with '3403'
-3402 3403 0
c Var 'aux762' direct represents '1' with '3404'
3402 -3403 3404 0
-3404 3403 0
-3404 -3402 0
c Var 'aux762' order represents '2' with '3405'
-3403 3405 0
c Var 'aux762' direct represents '2' with '3406'
3403 -3405 3406 0
-3406 3405 0
-3406 -3403 0
c Var 'aux762' order represents '3' with '3407'
-3405 3407 0
c Var 'aux762' direct represents '3' with '3408'
3405 -3407 3408 0
-3408 3407 0
-3408 -3405 0
c Var 'aux762' direct represents '4' with '-3407'
3402 3404 3406 3408 -3407 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3409'
c Var 'aux763' direct represents '0' with '3409'
c Var 'aux763' order represents '1' with '3410'
-3409 3410 0
c Var 'aux763' direct represents '1' with '3411'
3409 -3410 3411 0
-3411 3410 0
-3411 -3409 0
c Var 'aux763' direct represents '2' with '-3410'
3409 3411 -3410 0
c Encoding variable: aux764 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3412'
c Var 'aux764' direct represents '0' with '3412'
c Var 'aux764' order represents '1' with '3413'
-3412 3413 0
c Var 'aux764' direct represents '1' with '3414'
3412 -3413 3414 0
-3414 3413 0
-3414 -3412 0
c Var 'aux764' direct represents '2' with '-3413'
3412 3414 -3413 0
c Encoding variable: aux765 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3415'
c Var 'aux765' direct represents '0' with '3415'
c Var 'aux765' order represents '1' with '3416'
-3415 3416 0
c Var 'aux765' direct represents '1' with '3417'
3415 -3416 3417 0
-3417 3416 0
-3417 -3415 0
c Var 'aux765' direct represents '2' with '-3416'
3415 3417 -3416 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3418'
c Var 'aux766' direct represents '0' with '3418'
c Var 'aux766' order represents '1' with '3419'
-3418 3419 0
c Var 'aux766' direct represents '1' with '3420'
3418 -3419 3420 0
-3420 3419 0
-3420 -3418 0
c Var 'aux766' direct represents '2' with '-3419'
3418 3420 -3419 0
c Encoding variable: aux767 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux766))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3421'
c Var 'aux767' direct represents '0' with '3421'
c Var 'aux767' order represents '1' with '3422'
-3421 3422 0
c Var 'aux767' direct represents '1' with '3423'
3421 -3422 3423 0
-3423 3422 0
-3423 -3421 0
c Var 'aux767' order represents '2' with '3424'
-3422 3424 0
c Var 'aux767' direct represents '2' with '3425'
3422 -3424 3425 0
-3425 3424 0
-3425 -3422 0
c Var 'aux767' direct represents '3' with '-3424'
3421 3423 3425 -3424 0
c Encoding variable: aux768 with domain: int(0..4) (representing constraint (aux763 + aux765))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3426'
c Var 'aux768' direct represents '0' with '3426'
c Var 'aux768' order represents '1' with '3427'
-3426 3427 0
c Var 'aux768' direct represents '1' with '3428'
3426 -3427 3428 0
-3428 3427 0
-3428 -3426 0
c Var 'aux768' order represents '2' with '3429'
-3427 3429 0
c Var 'aux768' direct represents '2' with '3430'
3427 -3429 3430 0
-3430 3429 0
-3430 -3427 0
c Var 'aux768' order represents '3' with '3431'
-3429 3431 0
c Var 'aux768' direct represents '3' with '3432'
3429 -3431 3432 0
-3432 3431 0
-3432 -3429 0
c Var 'aux768' direct represents '4' with '-3431'
3426 3428 3430 3432 -3431 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3433'
c Var 'aux769' direct represents '0' with '3433'
c Var 'aux769' order represents '1' with '3434'
-3433 3434 0
c Var 'aux769' direct represents '1' with '3435'
3433 -3434 3435 0
-3435 3434 0
-3435 -3433 0
c Var 'aux769' direct represents '2' with '-3434'
3433 3435 -3434 0
c Encoding variable: aux770 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3436'
c Var 'aux770' direct represents '0' with '3436'
c Var 'aux770' order represents '1' with '3437'
-3436 3437 0
c Var 'aux770' direct represents '1' with '3438'
3436 -3437 3438 0
-3438 3437 0
-3438 -3436 0
c Var 'aux770' direct represents '2' with '-3437'
3436 3438 -3437 0
c Encoding variable: aux771 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3439'
c Var 'aux771' direct represents '0' with '3439'
c Var 'aux771' order represents '1' with '3440'
-3439 3440 0
c Var 'aux771' direct represents '1' with '3441'
3439 -3440 3441 0
-3441 3440 0
-3441 -3439 0
c Var 'aux771' direct represents '2' with '-3440'
3439 3441 -3440 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3442'
c Var 'aux772' direct represents '0' with '3442'
c Var 'aux772' order represents '1' with '3443'
-3442 3443 0
c Var 'aux772' direct represents '1' with '3444'
3442 -3443 3444 0
-3444 3443 0
-3444 -3442 0
c Var 'aux772' direct represents '2' with '-3443'
3442 3444 -3443 0
c Encoding variable: aux773 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux772))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3445'
c Var 'aux773' direct represents '0' with '3445'
c Var 'aux773' order represents '1' with '3446'
-3445 3446 0
c Var 'aux773' direct represents '1' with '3447'
3445 -3446 3447 0
-3447 3446 0
-3447 -3445 0
c Var 'aux773' order represents '2' with '3448'
-3446 3448 0
c Var 'aux773' direct represents '2' with '3449'
3446 -3448 3449 0
-3449 3448 0
-3449 -3446 0
c Var 'aux773' direct represents '3' with '-3448'
3445 3447 3449 -3448 0
c Encoding variable: aux774 with domain: int(0..4) (representing constraint (aux769 + aux771))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3450'
c Var 'aux774' direct represents '0' with '3450'
c Var 'aux774' order represents '1' with '3451'
-3450 3451 0
c Var 'aux774' direct represents '1' with '3452'
3450 -3451 3452 0
-3452 3451 0
-3452 -3450 0
c Var 'aux774' order represents '2' with '3453'
-3451 3453 0
c Var 'aux774' direct represents '2' with '3454'
3451 -3453 3454 0
-3454 3453 0
-3454 -3451 0
c Var 'aux774' order represents '3' with '3455'
-3453 3455 0
c Var 'aux774' direct represents '3' with '3456'
3453 -3455 3456 0
-3456 3455 0
-3456 -3453 0
c Var 'aux774' direct represents '4' with '-3455'
3450 3452 3454 3456 -3455 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3457'
c Var 'aux775' direct represents '0' with '3457'
c Var 'aux775' order represents '1' with '3458'
-3457 3458 0
c Var 'aux775' direct represents '1' with '3459'
3457 -3458 3459 0
-3459 3458 0
-3459 -3457 0
c Var 'aux775' direct represents '2' with '-3458'
3457 3459 -3458 0
c Encoding variable: aux776 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3460'
c Var 'aux776' direct represents '0' with '3460'
c Var 'aux776' order represents '1' with '3461'
-3460 3461 0
c Var 'aux776' direct represents '1' with '3462'
3460 -3461 3462 0
-3462 3461 0
-3462 -3460 0
c Var 'aux776' direct represents '2' with '-3461'
3460 3462 -3461 0
c Encoding variable: aux777 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3463'
c Var 'aux777' direct represents '0' with '3463'
c Var 'aux777' order represents '1' with '3464'
-3463 3464 0
c Var 'aux777' direct represents '1' with '3465'
3463 -3464 3465 0
-3465 3464 0
-3465 -3463 0
c Var 'aux777' direct represents '2' with '-3464'
3463 3465 -3464 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3466'
c Var 'aux778' direct represents '0' with '3466'
c Var 'aux778' order represents '1' with '3467'
-3466 3467 0
c Var 'aux778' direct represents '1' with '3468'
3466 -3467 3468 0
-3468 3467 0
-3468 -3466 0
c Var 'aux778' direct represents '2' with '-3467'
3466 3468 -3467 0
c Encoding variable: aux779 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux778))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3469'
c Var 'aux779' direct represents '0' with '3469'
c Var 'aux779' order represents '1' with '3470'
-3469 3470 0
c Var 'aux779' direct represents '1' with '3471'
3469 -3470 3471 0
-3471 3470 0
-3471 -3469 0
c Var 'aux779' order represents '2' with '3472'
-3470 3472 0
c Var 'aux779' direct represents '2' with '3473'
3470 -3472 3473 0
-3473 3472 0
-3473 -3470 0
c Var 'aux779' direct represents '3' with '-3472'
3469 3471 3473 -3472 0
c Encoding variable: aux780 with domain: int(0..4) (representing constraint (aux775 + aux777))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3474'
c Var 'aux780' direct represents '0' with '3474'
c Var 'aux780' order represents '1' with '3475'
-3474 3475 0
c Var 'aux780' direct represents '1' with '3476'
3474 -3475 3476 0
-3476 3475 0
-3476 -3474 0
c Var 'aux780' order represents '2' with '3477'
-3475 3477 0
c Var 'aux780' direct represents '2' with '3478'
3475 -3477 3478 0
-3478 3477 0
-3478 -3475 0
c Var 'aux780' order represents '3' with '3479'
-3477 3479 0
c Var 'aux780' direct represents '3' with '3480'
3477 -3479 3480 0
-3480 3479 0
-3480 -3477 0
c Var 'aux780' direct represents '4' with '-3479'
3474 3476 3478 3480 -3479 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3481'
c Var 'aux781' direct represents '0' with '3481'
c Var 'aux781' order represents '1' with '3482'
-3481 3482 0
c Var 'aux781' direct represents '1' with '3483'
3481 -3482 3483 0
-3483 3482 0
-3483 -3481 0
c Var 'aux781' direct represents '2' with '-3482'
3481 3483 -3482 0
c Encoding variable: aux782 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3484'
c Var 'aux782' direct represents '0' with '3484'
c Var 'aux782' order represents '1' with '3485'
-3484 3485 0
c Var 'aux782' direct represents '1' with '3486'
3484 -3485 3486 0
-3486 3485 0
-3486 -3484 0
c Var 'aux782' direct represents '2' with '-3485'
3484 3486 -3485 0
c Encoding variable: aux783 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3487'
c Var 'aux783' direct represents '0' with '3487'
c Var 'aux783' order represents '1' with '3488'
-3487 3488 0
c Var 'aux783' direct represents '1' with '3489'
3487 -3488 3489 0
-3489 3488 0
-3489 -3487 0
c Var 'aux783' direct represents '2' with '-3488'
3487 3489 -3488 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3490'
c Var 'aux784' direct represents '0' with '3490'
c Var 'aux784' order represents '1' with '3491'
-3490 3491 0
c Var 'aux784' direct represents '1' with '3492'
3490 -3491 3492 0
-3492 3491 0
-3492 -3490 0
c Var 'aux784' direct represents '2' with '-3491'
3490 3492 -3491 0
c Encoding variable: aux785 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux784))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3493'
c Var 'aux785' direct represents '0' with '3493'
c Var 'aux785' order represents '1' with '3494'
-3493 3494 0
c Var 'aux785' direct represents '1' with '3495'
3493 -3494 3495 0
-3495 3494 0
-3495 -3493 0
c Var 'aux785' order represents '2' with '3496'
-3494 3496 0
c Var 'aux785' direct represents '2' with '3497'
3494 -3496 3497 0
-3497 3496 0
-3497 -3494 0
c Var 'aux785' direct represents '3' with '-3496'
3493 3495 3497 -3496 0
c Encoding variable: aux786 with domain: int(0..4) (representing constraint (aux781 + aux783))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3498'
c Var 'aux786' direct represents '0' with '3498'
c Var 'aux786' order represents '1' with '3499'
-3498 3499 0
c Var 'aux786' direct represents '1' with '3500'
3498 -3499 3500 0
-3500 3499 0
-3500 -3498 0
c Var 'aux786' order represents '2' with '3501'
-3499 3501 0
c Var 'aux786' direct represents '2' with '3502'
3499 -3501 3502 0
-3502 3501 0
-3502 -3499 0
c Var 'aux786' order represents '3' with '3503'
-3501 3503 0
c Var 'aux786' direct represents '3' with '3504'
3501 -3503 3504 0
-3504 3503 0
-3504 -3501 0
c Var 'aux786' direct represents '4' with '-3503'
3498 3500 3502 3504 -3503 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3505'
c Var 'aux787' direct represents '0' with '3505'
c Var 'aux787' order represents '1' with '3506'
-3505 3506 0
c Var 'aux787' direct represents '1' with '3507'
3505 -3506 3507 0
-3507 3506 0
-3507 -3505 0
c Var 'aux787' direct represents '2' with '-3506'
3505 3507 -3506 0
c Encoding variable: aux788 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3508'
c Var 'aux788' direct represents '0' with '3508'
c Var 'aux788' order represents '1' with '3509'
-3508 3509 0
c Var 'aux788' direct represents '1' with '3510'
3508 -3509 3510 0
-3510 3509 0
-3510 -3508 0
c Var 'aux788' direct represents '2' with '-3509'
3508 3510 -3509 0
c Encoding variable: aux789 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3511'
c Var 'aux789' direct represents '0' with '3511'
c Var 'aux789' order represents '1' with '3512'
-3511 3512 0
c Var 'aux789' direct represents '1' with '3513'
3511 -3512 3513 0
-3513 3512 0
-3513 -3511 0
c Var 'aux789' direct represents '2' with '-3512'
3511 3513 -3512 0
c Encoding variable: aux790 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3514'
c Var 'aux790' direct represents '0' with '3514'
c Var 'aux790' order represents '1' with '3515'
-3514 3515 0
c Var 'aux790' direct represents '1' with '3516'
3514 -3515 3516 0
-3516 3515 0
-3516 -3514 0
c Var 'aux790' direct represents '2' with '-3515'
3514 3516 -3515 0
c Encoding variable: aux791 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux790))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3517'
c Var 'aux791' direct represents '0' with '3517'
c Var 'aux791' order represents '1' with '3518'
-3517 3518 0
c Var 'aux791' direct represents '1' with '3519'
3517 -3518 3519 0
-3519 3518 0
-3519 -3517 0
c Var 'aux791' order represents '2' with '3520'
-3518 3520 0
c Var 'aux791' direct represents '2' with '3521'
3518 -3520 3521 0
-3521 3520 0
-3521 -3518 0
c Var 'aux791' direct represents '3' with '-3520'
3517 3519 3521 -3520 0
c Encoding variable: aux792 with domain: int(0..4) (representing constraint (aux787 + aux789))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3522'
c Var 'aux792' direct represents '0' with '3522'
c Var 'aux792' order represents '1' with '3523'
-3522 3523 0
c Var 'aux792' direct represents '1' with '3524'
3522 -3523 3524 0
-3524 3523 0
-3524 -3522 0
c Var 'aux792' order represents '2' with '3525'
-3523 3525 0
c Var 'aux792' direct represents '2' with '3526'
3523 -3525 3526 0
-3526 3525 0
-3526 -3523 0
c Var 'aux792' order represents '3' with '3527'
-3525 3527 0
c Var 'aux792' direct represents '3' with '3528'
3525 -3527 3528 0
-3528 3527 0
-3528 -3525 0
c Var 'aux792' direct represents '4' with '-3527'
3522 3524 3526 3528 -3527 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3529'
c Var 'aux793' direct represents '0' with '3529'
c Var 'aux793' order represents '1' with '3530'
-3529 3530 0
c Var 'aux793' direct represents '1' with '3531'
3529 -3530 3531 0
-3531 3530 0
-3531 -3529 0
c Var 'aux793' direct represents '2' with '-3530'
3529 3531 -3530 0
c Encoding variable: aux794 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3532'
c Var 'aux794' direct represents '0' with '3532'
c Var 'aux794' order represents '1' with '3533'
-3532 3533 0
c Var 'aux794' direct represents '1' with '3534'
3532 -3533 3534 0
-3534 3533 0
-3534 -3532 0
c Var 'aux794' direct represents '2' with '-3533'
3532 3534 -3533 0
c Encoding variable: aux795 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3535'
c Var 'aux795' direct represents '0' with '3535'
c Var 'aux795' order represents '1' with '3536'
-3535 3536 0
c Var 'aux795' direct represents '1' with '3537'
3535 -3536 3537 0
-3537 3536 0
-3537 -3535 0
c Var 'aux795' direct represents '2' with '-3536'
3535 3537 -3536 0
c Encoding variable: aux796 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3538'
c Var 'aux796' direct represents '0' with '3538'
c Var 'aux796' order represents '1' with '3539'
-3538 3539 0
c Var 'aux796' direct represents '1' with '3540'
3538 -3539 3540 0
-3540 3539 0
-3540 -3538 0
c Var 'aux796' direct represents '2' with '-3539'
3538 3540 -3539 0
c Encoding variable: aux797 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux796))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3541'
c Var 'aux797' direct represents '0' with '3541'
c Var 'aux797' order represents '1' with '3542'
-3541 3542 0
c Var 'aux797' direct represents '1' with '3543'
3541 -3542 3543 0
-3543 3542 0
-3543 -3541 0
c Var 'aux797' order represents '2' with '3544'
-3542 3544 0
c Var 'aux797' direct represents '2' with '3545'
3542 -3544 3545 0
-3545 3544 0
-3545 -3542 0
c Var 'aux797' direct represents '3' with '-3544'
3541 3543 3545 -3544 0
c Encoding variable: aux798 with domain: int(0..4) (representing constraint (aux793 + aux795))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3546'
c Var 'aux798' direct represents '0' with '3546'
c Var 'aux798' order represents '1' with '3547'
-3546 3547 0
c Var 'aux798' direct represents '1' with '3548'
3546 -3547 3548 0
-3548 3547 0
-3548 -3546 0
c Var 'aux798' order represents '2' with '3549'
-3547 3549 0
c Var 'aux798' direct represents '2' with '3550'
3547 -3549 3550 0
-3550 3549 0
-3550 -3547 0
c Var 'aux798' order represents '3' with '3551'
-3549 3551 0
c Var 'aux798' direct represents '3' with '3552'
3549 -3551 3552 0
-3552 3551 0
-3552 -3549 0
c Var 'aux798' direct represents '4' with '-3551'
3546 3548 3550 3552 -3551 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3553'
c Var 'aux799' direct represents '0' with '3553'
c Var 'aux799' order represents '1' with '3554'
-3553 3554 0
c Var 'aux799' direct represents '1' with '3555'
3553 -3554 3555 0
-3555 3554 0
-3555 -3553 0
c Var 'aux799' direct represents '2' with '-3554'
3553 3555 -3554 0
c Encoding variable: aux800 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3556'
c Var 'aux800' direct represents '0' with '3556'
c Var 'aux800' order represents '1' with '3557'
-3556 3557 0
c Var 'aux800' direct represents '1' with '3558'
3556 -3557 3558 0
-3558 3557 0
-3558 -3556 0
c Var 'aux800' direct represents '2' with '-3557'
3556 3558 -3557 0
c Encoding variable: aux801 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3559'
c Var 'aux801' direct represents '0' with '3559'
c Var 'aux801' order represents '1' with '3560'
-3559 3560 0
c Var 'aux801' direct represents '1' with '3561'
3559 -3560 3561 0
-3561 3560 0
-3561 -3559 0
c Var 'aux801' direct represents '2' with '-3560'
3559 3561 -3560 0
c Encoding variable: aux802 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3562'
c Var 'aux802' direct represents '0' with '3562'
c Var 'aux802' order represents '1' with '3563'
-3562 3563 0
c Var 'aux802' direct represents '1' with '3564'
3562 -3563 3564 0
-3564 3563 0
-3564 -3562 0
c Var 'aux802' direct represents '2' with '-3563'
3562 3564 -3563 0
c Encoding variable: aux803 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux802))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3565'
c Var 'aux803' direct represents '0' with '3565'
c Var 'aux803' order represents '1' with '3566'
-3565 3566 0
c Var 'aux803' direct represents '1' with '3567'
3565 -3566 3567 0
-3567 3566 0
-3567 -3565 0
c Var 'aux803' order represents '2' with '3568'
-3566 3568 0
c Var 'aux803' direct represents '2' with '3569'
3566 -3568 3569 0
-3569 3568 0
-3569 -3566 0
c Var 'aux803' direct represents '3' with '-3568'
3565 3567 3569 -3568 0
c Encoding variable: aux804 with domain: int(0..4) (representing constraint (aux799 + aux801))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3570'
c Var 'aux804' direct represents '0' with '3570'
c Var 'aux804' order represents '1' with '3571'
-3570 3571 0
c Var 'aux804' direct represents '1' with '3572'
3570 -3571 3572 0
-3572 3571 0
-3572 -3570 0
c Var 'aux804' order represents '2' with '3573'
-3571 3573 0
c Var 'aux804' direct represents '2' with '3574'
3571 -3573 3574 0
-3574 3573 0
-3574 -3571 0
c Var 'aux804' order represents '3' with '3575'
-3573 3575 0
c Var 'aux804' direct represents '3' with '3576'
3573 -3575 3576 0
-3576 3575 0
-3576 -3573 0
c Var 'aux804' direct represents '4' with '-3575'
3570 3572 3574 3576 -3575 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3577'
c Var 'aux805' direct represents '0' with '3577'
c Var 'aux805' order represents '1' with '3578'
-3577 3578 0
c Var 'aux805' direct represents '1' with '3579'
3577 -3578 3579 0
-3579 3578 0
-3579 -3577 0
c Var 'aux805' direct represents '2' with '-3578'
3577 3579 -3578 0
c Encoding variable: aux806 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3580'
c Var 'aux806' direct represents '0' with '3580'
c Var 'aux806' order represents '1' with '3581'
-3580 3581 0
c Var 'aux806' direct represents '1' with '3582'
3580 -3581 3582 0
-3582 3581 0
-3582 -3580 0
c Var 'aux806' direct represents '2' with '-3581'
3580 3582 -3581 0
c Encoding variable: aux807 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3583'
c Var 'aux807' direct represents '0' with '3583'
c Var 'aux807' order represents '1' with '3584'
-3583 3584 0
c Var 'aux807' direct represents '1' with '3585'
3583 -3584 3585 0
-3585 3584 0
-3585 -3583 0
c Var 'aux807' direct represents '2' with '-3584'
3583 3585 -3584 0
c Encoding variable: aux808 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3586'
c Var 'aux808' direct represents '0' with '3586'
c Var 'aux808' order represents '1' with '3587'
-3586 3587 0
c Var 'aux808' direct represents '1' with '3588'
3586 -3587 3588 0
-3588 3587 0
-3588 -3586 0
c Var 'aux808' direct represents '2' with '-3587'
3586 3588 -3587 0
c Encoding variable: aux809 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux808))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3589'
c Var 'aux809' direct represents '0' with '3589'
c Var 'aux809' order represents '1' with '3590'
-3589 3590 0
c Var 'aux809' direct represents '1' with '3591'
3589 -3590 3591 0
-3591 3590 0
-3591 -3589 0
c Var 'aux809' order represents '2' with '3592'
-3590 3592 0
c Var 'aux809' direct represents '2' with '3593'
3590 -3592 3593 0
-3593 3592 0
-3593 -3590 0
c Var 'aux809' direct represents '3' with '-3592'
3589 3591 3593 -3592 0
c Encoding variable: aux810 with domain: int(0..4) (representing constraint (aux805 + aux807))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3594'
c Var 'aux810' direct represents '0' with '3594'
c Var 'aux810' order represents '1' with '3595'
-3594 3595 0
c Var 'aux810' direct represents '1' with '3596'
3594 -3595 3596 0
-3596 3595 0
-3596 -3594 0
c Var 'aux810' order represents '2' with '3597'
-3595 3597 0
c Var 'aux810' direct represents '2' with '3598'
3595 -3597 3598 0
-3598 3597 0
-3598 -3595 0
c Var 'aux810' order represents '3' with '3599'
-3597 3599 0
c Var 'aux810' direct represents '3' with '3600'
3597 -3599 3600 0
-3600 3599 0
-3600 -3597 0
c Var 'aux810' direct represents '4' with '-3599'
3594 3596 3598 3600 -3599 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3601'
c Var 'aux811' direct represents '0' with '3601'
c Var 'aux811' order represents '1' with '3602'
-3601 3602 0
c Var 'aux811' direct represents '1' with '3603'
3601 -3602 3603 0
-3603 3602 0
-3603 -3601 0
c Var 'aux811' direct represents '2' with '-3602'
3601 3603 -3602 0
c Encoding variable: aux812 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3604'
c Var 'aux812' direct represents '0' with '3604'
c Var 'aux812' order represents '1' with '3605'
-3604 3605 0
c Var 'aux812' direct represents '1' with '3606'
3604 -3605 3606 0
-3606 3605 0
-3606 -3604 0
c Var 'aux812' direct represents '2' with '-3605'
3604 3606 -3605 0
c Encoding variable: aux813 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3607'
c Var 'aux813' direct represents '0' with '3607'
c Var 'aux813' order represents '1' with '3608'
-3607 3608 0
c Var 'aux813' direct represents '1' with '3609'
3607 -3608 3609 0
-3609 3608 0
-3609 -3607 0
c Var 'aux813' direct represents '2' with '-3608'
3607 3609 -3608 0
c Encoding variable: aux814 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3610'
c Var 'aux814' direct represents '0' with '3610'
c Var 'aux814' order represents '1' with '3611'
-3610 3611 0
c Var 'aux814' direct represents '1' with '3612'
3610 -3611 3612 0
-3612 3611 0
-3612 -3610 0
c Var 'aux814' direct represents '2' with '-3611'
3610 3612 -3611 0
c Encoding variable: aux815 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux814))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3613'
c Var 'aux815' direct represents '0' with '3613'
c Var 'aux815' order represents '1' with '3614'
-3613 3614 0
c Var 'aux815' direct represents '1' with '3615'
3613 -3614 3615 0
-3615 3614 0
-3615 -3613 0
c Var 'aux815' order represents '2' with '3616'
-3614 3616 0
c Var 'aux815' direct represents '2' with '3617'
3614 -3616 3617 0
-3617 3616 0
-3617 -3614 0
c Var 'aux815' direct represents '3' with '-3616'
3613 3615 3617 -3616 0
c Encoding variable: aux816 with domain: int(0..4) (representing constraint (aux811 + aux813))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3618'
c Var 'aux816' direct represents '0' with '3618'
c Var 'aux816' order represents '1' with '3619'
-3618 3619 0
c Var 'aux816' direct represents '1' with '3620'
3618 -3619 3620 0
-3620 3619 0
-3620 -3618 0
c Var 'aux816' order represents '2' with '3621'
-3619 3621 0
c Var 'aux816' direct represents '2' with '3622'
3619 -3621 3622 0
-3622 3621 0
-3622 -3619 0
c Var 'aux816' order represents '3' with '3623'
-3621 3623 0
c Var 'aux816' direct represents '3' with '3624'
3621 -3623 3624 0
-3624 3623 0
-3624 -3621 0
c Var 'aux816' direct represents '4' with '-3623'
3618 3620 3622 3624 -3623 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3625'
c Var 'aux817' direct represents '0' with '3625'
c Var 'aux817' order represents '1' with '3626'
-3625 3626 0
c Var 'aux817' direct represents '1' with '3627'
3625 -3626 3627 0
-3627 3626 0
-3627 -3625 0
c Var 'aux817' direct represents '2' with '-3626'
3625 3627 -3626 0
c Encoding variable: aux818 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3628'
c Var 'aux818' direct represents '0' with '3628'
c Var 'aux818' order represents '1' with '3629'
-3628 3629 0
c Var 'aux818' direct represents '1' with '3630'
3628 -3629 3630 0
-3630 3629 0
-3630 -3628 0
c Var 'aux818' direct represents '2' with '-3629'
3628 3630 -3629 0
c Encoding variable: aux819 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3631'
c Var 'aux819' direct represents '0' with '3631'
c Var 'aux819' order represents '1' with '3632'
-3631 3632 0
c Var 'aux819' direct represents '1' with '3633'
3631 -3632 3633 0
-3633 3632 0
-3633 -3631 0
c Var 'aux819' direct represents '2' with '-3632'
3631 3633 -3632 0
c Encoding variable: aux820 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3634'
c Var 'aux820' direct represents '0' with '3634'
c Var 'aux820' order represents '1' with '3635'
-3634 3635 0
c Var 'aux820' direct represents '1' with '3636'
3634 -3635 3636 0
-3636 3635 0
-3636 -3634 0
c Var 'aux820' direct represents '2' with '-3635'
3634 3636 -3635 0
c Encoding variable: aux821 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux820))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3637'
c Var 'aux821' direct represents '0' with '3637'
c Var 'aux821' order represents '1' with '3638'
-3637 3638 0
c Var 'aux821' direct represents '1' with '3639'
3637 -3638 3639 0
-3639 3638 0
-3639 -3637 0
c Var 'aux821' order represents '2' with '3640'
-3638 3640 0
c Var 'aux821' direct represents '2' with '3641'
3638 -3640 3641 0
-3641 3640 0
-3641 -3638 0
c Var 'aux821' direct represents '3' with '-3640'
3637 3639 3641 -3640 0
c Encoding variable: aux822 with domain: int(0..4) (representing constraint (aux817 + aux819))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3642'
c Var 'aux822' direct represents '0' with '3642'
c Var 'aux822' order represents '1' with '3643'
-3642 3643 0
c Var 'aux822' direct represents '1' with '3644'
3642 -3643 3644 0
-3644 3643 0
-3644 -3642 0
c Var 'aux822' order represents '2' with '3645'
-3643 3645 0
c Var 'aux822' direct represents '2' with '3646'
3643 -3645 3646 0
-3646 3645 0
-3646 -3643 0
c Var 'aux822' order represents '3' with '3647'
-3645 3647 0
c Var 'aux822' direct represents '3' with '3648'
3645 -3647 3648 0
-3648 3647 0
-3648 -3645 0
c Var 'aux822' direct represents '4' with '-3647'
3642 3644 3646 3648 -3647 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3649'
c Var 'aux823' direct represents '0' with '3649'
c Var 'aux823' order represents '1' with '3650'
-3649 3650 0
c Var 'aux823' direct represents '1' with '3651'
3649 -3650 3651 0
-3651 3650 0
-3651 -3649 0
c Var 'aux823' direct represents '2' with '-3650'
3649 3651 -3650 0
c Encoding variable: aux824 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3652'
c Var 'aux824' direct represents '0' with '3652'
c Var 'aux824' order represents '1' with '3653'
-3652 3653 0
c Var 'aux824' direct represents '1' with '3654'
3652 -3653 3654 0
-3654 3653 0
-3654 -3652 0
c Var 'aux824' direct represents '2' with '-3653'
3652 3654 -3653 0
c Encoding variable: aux825 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3655'
c Var 'aux825' direct represents '0' with '3655'
c Var 'aux825' order represents '1' with '3656'
-3655 3656 0
c Var 'aux825' direct represents '1' with '3657'
3655 -3656 3657 0
-3657 3656 0
-3657 -3655 0
c Var 'aux825' direct represents '2' with '-3656'
3655 3657 -3656 0
c Encoding variable: aux826 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3658'
c Var 'aux826' direct represents '0' with '3658'
c Var 'aux826' order represents '1' with '3659'
-3658 3659 0
c Var 'aux826' direct represents '1' with '3660'
3658 -3659 3660 0
-3660 3659 0
-3660 -3658 0
c Var 'aux826' direct represents '2' with '-3659'
3658 3660 -3659 0
c Encoding variable: aux827 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux826))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3661'
c Var 'aux827' direct represents '0' with '3661'
c Var 'aux827' order represents '1' with '3662'
-3661 3662 0
c Var 'aux827' direct represents '1' with '3663'
3661 -3662 3663 0
-3663 3662 0
-3663 -3661 0
c Var 'aux827' order represents '2' with '3664'
-3662 3664 0
c Var 'aux827' direct represents '2' with '3665'
3662 -3664 3665 0
-3665 3664 0
-3665 -3662 0
c Var 'aux827' direct represents '3' with '-3664'
3661 3663 3665 -3664 0
c Encoding variable: aux828 with domain: int(0..4) (representing constraint (aux823 + aux825))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3666'
c Var 'aux828' direct represents '0' with '3666'
c Var 'aux828' order represents '1' with '3667'
-3666 3667 0
c Var 'aux828' direct represents '1' with '3668'
3666 -3667 3668 0
-3668 3667 0
-3668 -3666 0
c Var 'aux828' order represents '2' with '3669'
-3667 3669 0
c Var 'aux828' direct represents '2' with '3670'
3667 -3669 3670 0
-3670 3669 0
-3670 -3667 0
c Var 'aux828' order represents '3' with '3671'
-3669 3671 0
c Var 'aux828' direct represents '3' with '3672'
3669 -3671 3672 0
-3672 3671 0
-3672 -3669 0
c Var 'aux828' direct represents '4' with '-3671'
3666 3668 3670 3672 -3671 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3673'
c Var 'aux829' direct represents '0' with '3673'
c Var 'aux829' order represents '1' with '3674'
-3673 3674 0
c Var 'aux829' direct represents '1' with '3675'
3673 -3674 3675 0
-3675 3674 0
-3675 -3673 0
c Var 'aux829' direct represents '2' with '-3674'
3673 3675 -3674 0
c Encoding variable: aux830 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3676'
c Var 'aux830' direct represents '0' with '3676'
c Var 'aux830' order represents '1' with '3677'
-3676 3677 0
c Var 'aux830' direct represents '1' with '3678'
3676 -3677 3678 0
-3678 3677 0
-3678 -3676 0
c Var 'aux830' direct represents '2' with '-3677'
3676 3678 -3677 0
c Encoding variable: aux831 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3679'
c Var 'aux831' direct represents '0' with '3679'
c Var 'aux831' order represents '1' with '3680'
-3679 3680 0
c Var 'aux831' direct represents '1' with '3681'
3679 -3680 3681 0
-3681 3680 0
-3681 -3679 0
c Var 'aux831' direct represents '2' with '-3680'
3679 3681 -3680 0
c Encoding variable: aux832 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3682'
c Var 'aux832' direct represents '0' with '3682'
c Var 'aux832' order represents '1' with '3683'
-3682 3683 0
c Var 'aux832' direct represents '1' with '3684'
3682 -3683 3684 0
-3684 3683 0
-3684 -3682 0
c Var 'aux832' direct represents '2' with '-3683'
3682 3684 -3683 0
c Encoding variable: aux833 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux832))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3685'
c Var 'aux833' direct represents '0' with '3685'
c Var 'aux833' order represents '1' with '3686'
-3685 3686 0
c Var 'aux833' direct represents '1' with '3687'
3685 -3686 3687 0
-3687 3686 0
-3687 -3685 0
c Var 'aux833' order represents '2' with '3688'
-3686 3688 0
c Var 'aux833' direct represents '2' with '3689'
3686 -3688 3689 0
-3689 3688 0
-3689 -3686 0
c Var 'aux833' direct represents '3' with '-3688'
3685 3687 3689 -3688 0
c Encoding variable: aux834 with domain: int(0..4) (representing constraint (aux829 + aux831))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3690'
c Var 'aux834' direct represents '0' with '3690'
c Var 'aux834' order represents '1' with '3691'
-3690 3691 0
c Var 'aux834' direct represents '1' with '3692'
3690 -3691 3692 0
-3692 3691 0
-3692 -3690 0
c Var 'aux834' order represents '2' with '3693'
-3691 3693 0
c Var 'aux834' direct represents '2' with '3694'
3691 -3693 3694 0
-3694 3693 0
-3694 -3691 0
c Var 'aux834' order represents '3' with '3695'
-3693 3695 0
c Var 'aux834' direct represents '3' with '3696'
3693 -3695 3696 0
-3696 3695 0
-3696 -3693 0
c Var 'aux834' direct represents '4' with '-3695'
3690 3692 3694 3696 -3695 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3697'
c Var 'aux835' direct represents '0' with '3697'
c Var 'aux835' order represents '1' with '3698'
-3697 3698 0
c Var 'aux835' direct represents '1' with '3699'
3697 -3698 3699 0
-3699 3698 0
-3699 -3697 0
c Var 'aux835' direct represents '2' with '-3698'
3697 3699 -3698 0
c Encoding variable: aux836 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3700'
c Var 'aux836' direct represents '0' with '3700'
c Var 'aux836' order represents '1' with '3701'
-3700 3701 0
c Var 'aux836' direct represents '1' with '3702'
3700 -3701 3702 0
-3702 3701 0
-3702 -3700 0
c Var 'aux836' direct represents '2' with '-3701'
3700 3702 -3701 0
c Encoding variable: aux837 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3703'
c Var 'aux837' direct represents '0' with '3703'
c Var 'aux837' order represents '1' with '3704'
-3703 3704 0
c Var 'aux837' direct represents '1' with '3705'
3703 -3704 3705 0
-3705 3704 0
-3705 -3703 0
c Var 'aux837' direct represents '2' with '-3704'
3703 3705 -3704 0
c Encoding variable: aux838 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3706'
c Var 'aux838' direct represents '0' with '3706'
c Var 'aux838' order represents '1' with '3707'
-3706 3707 0
c Var 'aux838' direct represents '1' with '3708'
3706 -3707 3708 0
-3708 3707 0
-3708 -3706 0
c Var 'aux838' direct represents '2' with '-3707'
3706 3708 -3707 0
c Encoding variable: aux839 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux838))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3709'
c Var 'aux839' direct represents '0' with '3709'
c Var 'aux839' order represents '1' with '3710'
-3709 3710 0
c Var 'aux839' direct represents '1' with '3711'
3709 -3710 3711 0
-3711 3710 0
-3711 -3709 0
c Var 'aux839' order represents '2' with '3712'
-3710 3712 0
c Var 'aux839' direct represents '2' with '3713'
3710 -3712 3713 0
-3713 3712 0
-3713 -3710 0
c Var 'aux839' direct represents '3' with '-3712'
3709 3711 3713 -3712 0
c Encoding variable: aux840 with domain: int(0..4) (representing constraint (aux835 + aux837))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3714'
c Var 'aux840' direct represents '0' with '3714'
c Var 'aux840' order represents '1' with '3715'
-3714 3715 0
c Var 'aux840' direct represents '1' with '3716'
3714 -3715 3716 0
-3716 3715 0
-3716 -3714 0
c Var 'aux840' order represents '2' with '3717'
-3715 3717 0
c Var 'aux840' direct represents '2' with '3718'
3715 -3717 3718 0
-3718 3717 0
-3718 -3715 0
c Var 'aux840' order represents '3' with '3719'
-3717 3719 0
c Var 'aux840' direct represents '3' with '3720'
3717 -3719 3720 0
-3720 3719 0
-3720 -3717 0
c Var 'aux840' direct represents '4' with '-3719'
3714 3716 3718 3720 -3719 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3721'
c Var 'aux841' direct represents '0' with '3721'
c Var 'aux841' order represents '1' with '3722'
-3721 3722 0
c Var 'aux841' direct represents '1' with '3723'
3721 -3722 3723 0
-3723 3722 0
-3723 -3721 0
c Var 'aux841' direct represents '2' with '-3722'
3721 3723 -3722 0
c Encoding variable: aux842 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3724'
c Var 'aux842' direct represents '0' with '3724'
c Var 'aux842' order represents '1' with '3725'
-3724 3725 0
c Var 'aux842' direct represents '1' with '3726'
3724 -3725 3726 0
-3726 3725 0
-3726 -3724 0
c Var 'aux842' direct represents '2' with '-3725'
3724 3726 -3725 0
c Encoding variable: aux843 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3727'
c Var 'aux843' direct represents '0' with '3727'
c Var 'aux843' order represents '1' with '3728'
-3727 3728 0
c Var 'aux843' direct represents '1' with '3729'
3727 -3728 3729 0
-3729 3728 0
-3729 -3727 0
c Var 'aux843' direct represents '2' with '-3728'
3727 3729 -3728 0
c Encoding variable: aux844 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3730'
c Var 'aux844' direct represents '0' with '3730'
c Var 'aux844' order represents '1' with '3731'
-3730 3731 0
c Var 'aux844' direct represents '1' with '3732'
3730 -3731 3732 0
-3732 3731 0
-3732 -3730 0
c Var 'aux844' direct represents '2' with '-3731'
3730 3732 -3731 0
c Encoding variable: aux845 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux844))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3733'
c Var 'aux845' direct represents '0' with '3733'
c Var 'aux845' order represents '1' with '3734'
-3733 3734 0
c Var 'aux845' direct represents '1' with '3735'
3733 -3734 3735 0
-3735 3734 0
-3735 -3733 0
c Var 'aux845' order represents '2' with '3736'
-3734 3736 0
c Var 'aux845' direct represents '2' with '3737'
3734 -3736 3737 0
-3737 3736 0
-3737 -3734 0
c Var 'aux845' direct represents '3' with '-3736'
3733 3735 3737 -3736 0
c Encoding variable: aux846 with domain: int(0..4) (representing constraint (aux841 + aux843))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3738'
c Var 'aux846' direct represents '0' with '3738'
c Var 'aux846' order represents '1' with '3739'
-3738 3739 0
c Var 'aux846' direct represents '1' with '3740'
3738 -3739 3740 0
-3740 3739 0
-3740 -3738 0
c Var 'aux846' order represents '2' with '3741'
-3739 3741 0
c Var 'aux846' direct represents '2' with '3742'
3739 -3741 3742 0
-3742 3741 0
-3742 -3739 0
c Var 'aux846' order represents '3' with '3743'
-3741 3743 0
c Var 'aux846' direct represents '3' with '3744'
3741 -3743 3744 0
-3744 3743 0
-3744 -3741 0
c Var 'aux846' direct represents '4' with '-3743'
3738 3740 3742 3744 -3743 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3745'
c Var 'aux847' direct represents '0' with '3745'
c Var 'aux847' order represents '1' with '3746'
-3745 3746 0
c Var 'aux847' direct represents '1' with '3747'
3745 -3746 3747 0
-3747 3746 0
-3747 -3745 0
c Var 'aux847' direct represents '2' with '-3746'
3745 3747 -3746 0
c Encoding variable: aux848 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3748'
c Var 'aux848' direct represents '0' with '3748'
c Var 'aux848' order represents '1' with '3749'
-3748 3749 0
c Var 'aux848' direct represents '1' with '3750'
3748 -3749 3750 0
-3750 3749 0
-3750 -3748 0
c Var 'aux848' direct represents '2' with '-3749'
3748 3750 -3749 0
c Encoding variable: aux849 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3751'
c Var 'aux849' direct represents '0' with '3751'
c Var 'aux849' order represents '1' with '3752'
-3751 3752 0
c Var 'aux849' direct represents '1' with '3753'
3751 -3752 3753 0
-3753 3752 0
-3753 -3751 0
c Var 'aux849' direct represents '2' with '-3752'
3751 3753 -3752 0
c Encoding variable: aux850 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3754'
c Var 'aux850' direct represents '0' with '3754'
c Var 'aux850' order represents '1' with '3755'
-3754 3755 0
c Var 'aux850' direct represents '1' with '3756'
3754 -3755 3756 0
-3756 3755 0
-3756 -3754 0
c Var 'aux850' direct represents '2' with '-3755'
3754 3756 -3755 0
c Encoding variable: aux851 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux850))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3757'
c Var 'aux851' direct represents '0' with '3757'
c Var 'aux851' order represents '1' with '3758'
-3757 3758 0
c Var 'aux851' direct represents '1' with '3759'
3757 -3758 3759 0
-3759 3758 0
-3759 -3757 0
c Var 'aux851' order represents '2' with '3760'
-3758 3760 0
c Var 'aux851' direct represents '2' with '3761'
3758 -3760 3761 0
-3761 3760 0
-3761 -3758 0
c Var 'aux851' direct represents '3' with '-3760'
3757 3759 3761 -3760 0
c Encoding variable: aux852 with domain: int(0..4) (representing constraint (aux847 + aux849))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3762'
c Var 'aux852' direct represents '0' with '3762'
c Var 'aux852' order represents '1' with '3763'
-3762 3763 0
c Var 'aux852' direct represents '1' with '3764'
3762 -3763 3764 0
-3764 3763 0
-3764 -3762 0
c Var 'aux852' order represents '2' with '3765'
-3763 3765 0
c Var 'aux852' direct represents '2' with '3766'
3763 -3765 3766 0
-3766 3765 0
-3766 -3763 0
c Var 'aux852' order represents '3' with '3767'
-3765 3767 0
c Var 'aux852' direct represents '3' with '3768'
3765 -3767 3768 0
-3768 3767 0
-3768 -3765 0
c Var 'aux852' direct represents '4' with '-3767'
3762 3764 3766 3768 -3767 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3769'
c Var 'aux853' direct represents '0' with '3769'
c Var 'aux853' order represents '1' with '3770'
-3769 3770 0
c Var 'aux853' direct represents '1' with '3771'
3769 -3770 3771 0
-3771 3770 0
-3771 -3769 0
c Var 'aux853' direct represents '2' with '-3770'
3769 3771 -3770 0
c Encoding variable: aux854 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3772'
c Var 'aux854' direct represents '0' with '3772'
c Var 'aux854' order represents '1' with '3773'
-3772 3773 0
c Var 'aux854' direct represents '1' with '3774'
3772 -3773 3774 0
-3774 3773 0
-3774 -3772 0
c Var 'aux854' direct represents '2' with '-3773'
3772 3774 -3773 0
c Encoding variable: aux855 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3775'
c Var 'aux855' direct represents '0' with '3775'
c Var 'aux855' order represents '1' with '3776'
-3775 3776 0
c Var 'aux855' direct represents '1' with '3777'
3775 -3776 3777 0
-3777 3776 0
-3777 -3775 0
c Var 'aux855' direct represents '2' with '-3776'
3775 3777 -3776 0
c Encoding variable: aux856 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3778'
c Var 'aux856' direct represents '0' with '3778'
c Var 'aux856' order represents '1' with '3779'
-3778 3779 0
c Var 'aux856' direct represents '1' with '3780'
3778 -3779 3780 0
-3780 3779 0
-3780 -3778 0
c Var 'aux856' direct represents '2' with '-3779'
3778 3780 -3779 0
c Encoding variable: aux857 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux856))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3781'
c Var 'aux857' direct represents '0' with '3781'
c Var 'aux857' order represents '1' with '3782'
-3781 3782 0
c Var 'aux857' direct represents '1' with '3783'
3781 -3782 3783 0
-3783 3782 0
-3783 -3781 0
c Var 'aux857' order represents '2' with '3784'
-3782 3784 0
c Var 'aux857' direct represents '2' with '3785'
3782 -3784 3785 0
-3785 3784 0
-3785 -3782 0
c Var 'aux857' direct represents '3' with '-3784'
3781 3783 3785 -3784 0
c Encoding variable: aux858 with domain: int(0..4) (representing constraint (aux853 + aux855))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3786'
c Var 'aux858' direct represents '0' with '3786'
c Var 'aux858' order represents '1' with '3787'
-3786 3787 0
c Var 'aux858' direct represents '1' with '3788'
3786 -3787 3788 0
-3788 3787 0
-3788 -3786 0
c Var 'aux858' order represents '2' with '3789'
-3787 3789 0
c Var 'aux858' direct represents '2' with '3790'
3787 -3789 3790 0
-3790 3789 0
-3790 -3787 0
c Var 'aux858' order represents '3' with '3791'
-3789 3791 0
c Var 'aux858' direct represents '3' with '3792'
3789 -3791 3792 0
-3792 3791 0
-3792 -3789 0
c Var 'aux858' direct represents '4' with '-3791'
3786 3788 3790 3792 -3791 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3793'
c Var 'aux859' direct represents '0' with '3793'
c Var 'aux859' order represents '1' with '3794'
-3793 3794 0
c Var 'aux859' direct represents '1' with '3795'
3793 -3794 3795 0
-3795 3794 0
-3795 -3793 0
c Var 'aux859' direct represents '2' with '-3794'
3793 3795 -3794 0
c Encoding variable: aux860 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3796'
c Var 'aux860' direct represents '0' with '3796'
c Var 'aux860' order represents '1' with '3797'
-3796 3797 0
c Var 'aux860' direct represents '1' with '3798'
3796 -3797 3798 0
-3798 3797 0
-3798 -3796 0
c Var 'aux860' direct represents '2' with '-3797'
3796 3798 -3797 0
c Encoding variable: aux861 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3799'
c Var 'aux861' direct represents '0' with '3799'
c Var 'aux861' order represents '1' with '3800'
-3799 3800 0
c Var 'aux861' direct represents '1' with '3801'
3799 -3800 3801 0
-3801 3800 0
-3801 -3799 0
c Var 'aux861' direct represents '2' with '-3800'
3799 3801 -3800 0
c Encoding variable: aux862 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3802'
c Var 'aux862' direct represents '0' with '3802'
c Var 'aux862' order represents '1' with '3803'
-3802 3803 0
c Var 'aux862' direct represents '1' with '3804'
3802 -3803 3804 0
-3804 3803 0
-3804 -3802 0
c Var 'aux862' direct represents '2' with '-3803'
3802 3804 -3803 0
c Encoding variable: aux863 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux862))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3805'
c Var 'aux863' direct represents '0' with '3805'
c Var 'aux863' order represents '1' with '3806'
-3805 3806 0
c Var 'aux863' direct represents '1' with '3807'
3805 -3806 3807 0
-3807 3806 0
-3807 -3805 0
c Var 'aux863' order represents '2' with '3808'
-3806 3808 0
c Var 'aux863' direct represents '2' with '3809'
3806 -3808 3809 0
-3809 3808 0
-3809 -3806 0
c Var 'aux863' direct represents '3' with '-3808'
3805 3807 3809 -3808 0
c Encoding variable: aux864 with domain: int(0..4) (representing constraint (aux859 + aux861))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3810'
c Var 'aux864' direct represents '0' with '3810'
c Var 'aux864' order represents '1' with '3811'
-3810 3811 0
c Var 'aux864' direct represents '1' with '3812'
3810 -3811 3812 0
-3812 3811 0
-3812 -3810 0
c Var 'aux864' order represents '2' with '3813'
-3811 3813 0
c Var 'aux864' direct represents '2' with '3814'
3811 -3813 3814 0
-3814 3813 0
-3814 -3811 0
c Var 'aux864' order represents '3' with '3815'
-3813 3815 0
c Var 'aux864' direct represents '3' with '3816'
3813 -3815 3816 0
-3816 3815 0
-3816 -3813 0
c Var 'aux864' direct represents '4' with '-3815'
3810 3812 3814 3816 -3815 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3817'
c Var 'aux865' direct represents '0' with '3817'
c Var 'aux865' order represents '1' with '3818'
-3817 3818 0
c Var 'aux865' direct represents '1' with '3819'
3817 -3818 3819 0
-3819 3818 0
-3819 -3817 0
c Var 'aux865' direct represents '2' with '-3818'
3817 3819 -3818 0
c Encoding variable: aux866 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3820'
c Var 'aux866' direct represents '0' with '3820'
c Var 'aux866' order represents '1' with '3821'
-3820 3821 0
c Var 'aux866' direct represents '1' with '3822'
3820 -3821 3822 0
-3822 3821 0
-3822 -3820 0
c Var 'aux866' direct represents '2' with '-3821'
3820 3822 -3821 0
c Encoding variable: aux867 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3823'
c Var 'aux867' direct represents '0' with '3823'
c Var 'aux867' order represents '1' with '3824'
-3823 3824 0
c Var 'aux867' direct represents '1' with '3825'
3823 -3824 3825 0
-3825 3824 0
-3825 -3823 0
c Var 'aux867' direct represents '2' with '-3824'
3823 3825 -3824 0
c Encoding variable: aux868 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3826'
c Var 'aux868' direct represents '0' with '3826'
c Var 'aux868' order represents '1' with '3827'
-3826 3827 0
c Var 'aux868' direct represents '1' with '3828'
3826 -3827 3828 0
-3828 3827 0
-3828 -3826 0
c Var 'aux868' direct represents '2' with '-3827'
3826 3828 -3827 0
c Encoding variable: aux869 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux868))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3829'
c Var 'aux869' direct represents '0' with '3829'
c Var 'aux869' order represents '1' with '3830'
-3829 3830 0
c Var 'aux869' direct represents '1' with '3831'
3829 -3830 3831 0
-3831 3830 0
-3831 -3829 0
c Var 'aux869' order represents '2' with '3832'
-3830 3832 0
c Var 'aux869' direct represents '2' with '3833'
3830 -3832 3833 0
-3833 3832 0
-3833 -3830 0
c Var 'aux869' direct represents '3' with '-3832'
3829 3831 3833 -3832 0
c Encoding variable: aux870 with domain: int(0..4) (representing constraint (aux865 + aux867))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3834'
c Var 'aux870' direct represents '0' with '3834'
c Var 'aux870' order represents '1' with '3835'
-3834 3835 0
c Var 'aux870' direct represents '1' with '3836'
3834 -3835 3836 0
-3836 3835 0
-3836 -3834 0
c Var 'aux870' order represents '2' with '3837'
-3835 3837 0
c Var 'aux870' direct represents '2' with '3838'
3835 -3837 3838 0
-3838 3837 0
-3838 -3835 0
c Var 'aux870' order represents '3' with '3839'
-3837 3839 0
c Var 'aux870' direct represents '3' with '3840'
3837 -3839 3840 0
-3840 3839 0
-3840 -3837 0
c Var 'aux870' direct represents '4' with '-3839'
3834 3836 3838 3840 -3839 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3841'
c Var 'aux871' direct represents '0' with '3841'
c Var 'aux871' order represents '1' with '3842'
-3841 3842 0
c Var 'aux871' direct represents '1' with '3843'
3841 -3842 3843 0
-3843 3842 0
-3843 -3841 0
c Var 'aux871' direct represents '2' with '-3842'
3841 3843 -3842 0
c Encoding variable: aux872 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3844'
c Var 'aux872' direct represents '0' with '3844'
c Var 'aux872' order represents '1' with '3845'
-3844 3845 0
c Var 'aux872' direct represents '1' with '3846'
3844 -3845 3846 0
-3846 3845 0
-3846 -3844 0
c Var 'aux872' direct represents '2' with '-3845'
3844 3846 -3845 0
c Encoding variable: aux873 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3847'
c Var 'aux873' direct represents '0' with '3847'
c Var 'aux873' order represents '1' with '3848'
-3847 3848 0
c Var 'aux873' direct represents '1' with '3849'
3847 -3848 3849 0
-3849 3848 0
-3849 -3847 0
c Var 'aux873' direct represents '2' with '-3848'
3847 3849 -3848 0
c Encoding variable: aux874 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3850'
c Var 'aux874' direct represents '0' with '3850'
c Var 'aux874' order represents '1' with '3851'
-3850 3851 0
c Var 'aux874' direct represents '1' with '3852'
3850 -3851 3852 0
-3852 3851 0
-3852 -3850 0
c Var 'aux874' direct represents '2' with '-3851'
3850 3852 -3851 0
c Encoding variable: aux875 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux874))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3853'
c Var 'aux875' direct represents '0' with '3853'
c Var 'aux875' order represents '1' with '3854'
-3853 3854 0
c Var 'aux875' direct represents '1' with '3855'
3853 -3854 3855 0
-3855 3854 0
-3855 -3853 0
c Var 'aux875' order represents '2' with '3856'
-3854 3856 0
c Var 'aux875' direct represents '2' with '3857'
3854 -3856 3857 0
-3857 3856 0
-3857 -3854 0
c Var 'aux875' direct represents '3' with '-3856'
3853 3855 3857 -3856 0
c Encoding variable: aux876 with domain: int(0..4) (representing constraint (aux871 + aux873))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3858'
c Var 'aux876' direct represents '0' with '3858'
c Var 'aux876' order represents '1' with '3859'
-3858 3859 0
c Var 'aux876' direct represents '1' with '3860'
3858 -3859 3860 0
-3860 3859 0
-3860 -3858 0
c Var 'aux876' order represents '2' with '3861'
-3859 3861 0
c Var 'aux876' direct represents '2' with '3862'
3859 -3861 3862 0
-3862 3861 0
-3862 -3859 0
c Var 'aux876' order represents '3' with '3863'
-3861 3863 0
c Var 'aux876' direct represents '3' with '3864'
3861 -3863 3864 0
-3864 3863 0
-3864 -3861 0
c Var 'aux876' direct represents '4' with '-3863'
3858 3860 3862 3864 -3863 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3865'
c Var 'aux877' direct represents '0' with '3865'
c Var 'aux877' order represents '1' with '3866'
-3865 3866 0
c Var 'aux877' direct represents '1' with '3867'
3865 -3866 3867 0
-3867 3866 0
-3867 -3865 0
c Var 'aux877' direct represents '2' with '-3866'
3865 3867 -3866 0
c Encoding variable: aux878 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3868'
c Var 'aux878' direct represents '0' with '3868'
c Var 'aux878' order represents '1' with '3869'
-3868 3869 0
c Var 'aux878' direct represents '1' with '3870'
3868 -3869 3870 0
-3870 3869 0
-3870 -3868 0
c Var 'aux878' direct represents '2' with '-3869'
3868 3870 -3869 0
c Encoding variable: aux879 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3871'
c Var 'aux879' direct represents '0' with '3871'
c Var 'aux879' order represents '1' with '3872'
-3871 3872 0
c Var 'aux879' direct represents '1' with '3873'
3871 -3872 3873 0
-3873 3872 0
-3873 -3871 0
c Var 'aux879' direct represents '2' with '-3872'
3871 3873 -3872 0
c Encoding variable: aux880 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3874'
c Var 'aux880' direct represents '0' with '3874'
c Var 'aux880' order represents '1' with '3875'
-3874 3875 0
c Var 'aux880' direct represents '1' with '3876'
3874 -3875 3876 0
-3876 3875 0
-3876 -3874 0
c Var 'aux880' direct represents '2' with '-3875'
3874 3876 -3875 0
c Encoding variable: aux881 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux880))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3877'
c Var 'aux881' direct represents '0' with '3877'
c Var 'aux881' order represents '1' with '3878'
-3877 3878 0
c Var 'aux881' direct represents '1' with '3879'
3877 -3878 3879 0
-3879 3878 0
-3879 -3877 0
c Var 'aux881' order represents '2' with '3880'
-3878 3880 0
c Var 'aux881' direct represents '2' with '3881'
3878 -3880 3881 0
-3881 3880 0
-3881 -3878 0
c Var 'aux881' direct represents '3' with '-3880'
3877 3879 3881 -3880 0
c Encoding variable: aux882 with domain: int(0..4) (representing constraint (aux877 + aux879))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3882'
c Var 'aux882' direct represents '0' with '3882'
c Var 'aux882' order represents '1' with '3883'
-3882 3883 0
c Var 'aux882' direct represents '1' with '3884'
3882 -3883 3884 0
-3884 3883 0
-3884 -3882 0
c Var 'aux882' order represents '2' with '3885'
-3883 3885 0
c Var 'aux882' direct represents '2' with '3886'
3883 -3885 3886 0
-3886 3885 0
-3886 -3883 0
c Var 'aux882' order represents '3' with '3887'
-3885 3887 0
c Var 'aux882' direct represents '3' with '3888'
3885 -3887 3888 0
-3888 3887 0
-3888 -3885 0
c Var 'aux882' direct represents '4' with '-3887'
3882 3884 3886 3888 -3887 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3889'
c Var 'aux883' direct represents '0' with '3889'
c Var 'aux883' order represents '1' with '3890'
-3889 3890 0
c Var 'aux883' direct represents '1' with '3891'
3889 -3890 3891 0
-3891 3890 0
-3891 -3889 0
c Var 'aux883' direct represents '2' with '-3890'
3889 3891 -3890 0
c Encoding variable: aux884 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3892'
c Var 'aux884' direct represents '0' with '3892'
c Var 'aux884' order represents '1' with '3893'
-3892 3893 0
c Var 'aux884' direct represents '1' with '3894'
3892 -3893 3894 0
-3894 3893 0
-3894 -3892 0
c Var 'aux884' direct represents '2' with '-3893'
3892 3894 -3893 0
c Encoding variable: aux885 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3895'
c Var 'aux885' direct represents '0' with '3895'
c Var 'aux885' order represents '1' with '3896'
-3895 3896 0
c Var 'aux885' direct represents '1' with '3897'
3895 -3896 3897 0
-3897 3896 0
-3897 -3895 0
c Var 'aux885' direct represents '2' with '-3896'
3895 3897 -3896 0
c Encoding variable: aux886 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3898'
c Var 'aux886' direct represents '0' with '3898'
c Var 'aux886' order represents '1' with '3899'
-3898 3899 0
c Var 'aux886' direct represents '1' with '3900'
3898 -3899 3900 0
-3900 3899 0
-3900 -3898 0
c Var 'aux886' direct represents '2' with '-3899'
3898 3900 -3899 0
c Encoding variable: aux887 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux886))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3901'
c Var 'aux887' direct represents '0' with '3901'
c Var 'aux887' order represents '1' with '3902'
-3901 3902 0
c Var 'aux887' direct represents '1' with '3903'
3901 -3902 3903 0
-3903 3902 0
-3903 -3901 0
c Var 'aux887' order represents '2' with '3904'
-3902 3904 0
c Var 'aux887' direct represents '2' with '3905'
3902 -3904 3905 0
-3905 3904 0
-3905 -3902 0
c Var 'aux887' direct represents '3' with '-3904'
3901 3903 3905 -3904 0
c Encoding variable: aux888 with domain: int(0..4) (representing constraint (aux883 + aux885))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3906'
c Var 'aux888' direct represents '0' with '3906'
c Var 'aux888' order represents '1' with '3907'
-3906 3907 0
c Var 'aux888' direct represents '1' with '3908'
3906 -3907 3908 0
-3908 3907 0
-3908 -3906 0
c Var 'aux888' order represents '2' with '3909'
-3907 3909 0
c Var 'aux888' direct represents '2' with '3910'
3907 -3909 3910 0
-3910 3909 0
-3910 -3907 0
c Var 'aux888' order represents '3' with '3911'
-3909 3911 0
c Var 'aux888' direct represents '3' with '3912'
3909 -3911 3912 0
-3912 3911 0
-3912 -3909 0
c Var 'aux888' direct represents '4' with '-3911'
3906 3908 3910 3912 -3911 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3913'
c Var 'aux889' direct represents '0' with '3913'
c Var 'aux889' order represents '1' with '3914'
-3913 3914 0
c Var 'aux889' direct represents '1' with '3915'
3913 -3914 3915 0
-3915 3914 0
-3915 -3913 0
c Var 'aux889' direct represents '2' with '-3914'
3913 3915 -3914 0
c Encoding variable: aux890 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3916'
c Var 'aux890' direct represents '0' with '3916'
c Var 'aux890' order represents '1' with '3917'
-3916 3917 0
c Var 'aux890' direct represents '1' with '3918'
3916 -3917 3918 0
-3918 3917 0
-3918 -3916 0
c Var 'aux890' direct represents '2' with '-3917'
3916 3918 -3917 0
c Encoding variable: aux891 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3919'
c Var 'aux891' direct represents '0' with '3919'
c Var 'aux891' order represents '1' with '3920'
-3919 3920 0
c Var 'aux891' direct represents '1' with '3921'
3919 -3920 3921 0
-3921 3920 0
-3921 -3919 0
c Var 'aux891' direct represents '2' with '-3920'
3919 3921 -3920 0
c Encoding variable: aux892 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3922'
c Var 'aux892' direct represents '0' with '3922'
c Var 'aux892' order represents '1' with '3923'
-3922 3923 0
c Var 'aux892' direct represents '1' with '3924'
3922 -3923 3924 0
-3924 3923 0
-3924 -3922 0
c Var 'aux892' direct represents '2' with '-3923'
3922 3924 -3923 0
c Encoding variable: aux893 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux892))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3925'
c Var 'aux893' direct represents '0' with '3925'
c Var 'aux893' order represents '1' with '3926'
-3925 3926 0
c Var 'aux893' direct represents '1' with '3927'
3925 -3926 3927 0
-3927 3926 0
-3927 -3925 0
c Var 'aux893' order represents '2' with '3928'
-3926 3928 0
c Var 'aux893' direct represents '2' with '3929'
3926 -3928 3929 0
-3929 3928 0
-3929 -3926 0
c Var 'aux893' direct represents '3' with '-3928'
3925 3927 3929 -3928 0
c Encoding variable: aux894 with domain: int(0..4) (representing constraint (aux889 + aux891))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3930'
c Var 'aux894' direct represents '0' with '3930'
c Var 'aux894' order represents '1' with '3931'
-3930 3931 0
c Var 'aux894' direct represents '1' with '3932'
3930 -3931 3932 0
-3932 3931 0
-3932 -3930 0
c Var 'aux894' order represents '2' with '3933'
-3931 3933 0
c Var 'aux894' direct represents '2' with '3934'
3931 -3933 3934 0
-3934 3933 0
-3934 -3931 0
c Var 'aux894' order represents '3' with '3935'
-3933 3935 0
c Var 'aux894' direct represents '3' with '3936'
3933 -3935 3936 0
-3936 3935 0
-3936 -3933 0
c Var 'aux894' direct represents '4' with '-3935'
3930 3932 3934 3936 -3935 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3937'
c Var 'aux895' direct represents '0' with '3937'
c Var 'aux895' order represents '1' with '3938'
-3937 3938 0
c Var 'aux895' direct represents '1' with '3939'
3937 -3938 3939 0
-3939 3938 0
-3939 -3937 0
c Var 'aux895' direct represents '2' with '-3938'
3937 3939 -3938 0
c Encoding variable: aux896 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3940'
c Var 'aux896' direct represents '0' with '3940'
c Var 'aux896' order represents '1' with '3941'
-3940 3941 0
c Var 'aux896' direct represents '1' with '3942'
3940 -3941 3942 0
-3942 3941 0
-3942 -3940 0
c Var 'aux896' direct represents '2' with '-3941'
3940 3942 -3941 0
c Encoding variable: aux897 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3943'
c Var 'aux897' direct represents '0' with '3943'
c Var 'aux897' order represents '1' with '3944'
-3943 3944 0
c Var 'aux897' direct represents '1' with '3945'
3943 -3944 3945 0
-3945 3944 0
-3945 -3943 0
c Var 'aux897' direct represents '2' with '-3944'
3943 3945 -3944 0
c Encoding variable: aux898 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3946'
c Var 'aux898' direct represents '0' with '3946'
c Var 'aux898' order represents '1' with '3947'
-3946 3947 0
c Var 'aux898' direct represents '1' with '3948'
3946 -3947 3948 0
-3948 3947 0
-3948 -3946 0
c Var 'aux898' direct represents '2' with '-3947'
3946 3948 -3947 0
c Encoding variable: aux899 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux898))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3949'
c Var 'aux899' direct represents '0' with '3949'
c Var 'aux899' order represents '1' with '3950'
-3949 3950 0
c Var 'aux899' direct represents '1' with '3951'
3949 -3950 3951 0
-3951 3950 0
-3951 -3949 0
c Var 'aux899' order represents '2' with '3952'
-3950 3952 0
c Var 'aux899' direct represents '2' with '3953'
3950 -3952 3953 0
-3953 3952 0
-3953 -3950 0
c Var 'aux899' direct represents '3' with '-3952'
3949 3951 3953 -3952 0
c Encoding variable: aux900 with domain: int(0..4) (representing constraint (aux895 + aux897))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3954'
c Var 'aux900' direct represents '0' with '3954'
c Var 'aux900' order represents '1' with '3955'
-3954 3955 0
c Var 'aux900' direct represents '1' with '3956'
3954 -3955 3956 0
-3956 3955 0
-3956 -3954 0
c Var 'aux900' order represents '2' with '3957'
-3955 3957 0
c Var 'aux900' direct represents '2' with '3958'
3955 -3957 3958 0
-3958 3957 0
-3958 -3955 0
c Var 'aux900' order represents '3' with '3959'
-3957 3959 0
c Var 'aux900' direct represents '3' with '3960'
3957 -3959 3960 0
-3960 3959 0
-3960 -3957 0
c Var 'aux900' direct represents '4' with '-3959'
3954 3956 3958 3960 -3959 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3961'
c Var 'aux901' direct represents '0' with '3961'
c Var 'aux901' order represents '1' with '3962'
-3961 3962 0
c Var 'aux901' direct represents '1' with '3963'
3961 -3962 3963 0
-3963 3962 0
-3963 -3961 0
c Var 'aux901' direct represents '2' with '-3962'
3961 3963 -3962 0
c Encoding variable: aux902 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3964'
c Var 'aux902' direct represents '0' with '3964'
c Var 'aux902' order represents '1' with '3965'
-3964 3965 0
c Var 'aux902' direct represents '1' with '3966'
3964 -3965 3966 0
-3966 3965 0
-3966 -3964 0
c Var 'aux902' direct represents '2' with '-3965'
3964 3966 -3965 0
c Encoding variable: aux903 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3967'
c Var 'aux903' direct represents '0' with '3967'
c Var 'aux903' order represents '1' with '3968'
-3967 3968 0
c Var 'aux903' direct represents '1' with '3969'
3967 -3968 3969 0
-3969 3968 0
-3969 -3967 0
c Var 'aux903' direct represents '2' with '-3968'
3967 3969 -3968 0
c Encoding variable: aux904 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3970'
c Var 'aux904' direct represents '0' with '3970'
c Var 'aux904' order represents '1' with '3971'
-3970 3971 0
c Var 'aux904' direct represents '1' with '3972'
3970 -3971 3972 0
-3972 3971 0
-3972 -3970 0
c Var 'aux904' direct represents '2' with '-3971'
3970 3972 -3971 0
c Encoding variable: aux905 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux904))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3973'
c Var 'aux905' direct represents '0' with '3973'
c Var 'aux905' order represents '1' with '3974'
-3973 3974 0
c Var 'aux905' direct represents '1' with '3975'
3973 -3974 3975 0
-3975 3974 0
-3975 -3973 0
c Var 'aux905' order represents '2' with '3976'
-3974 3976 0
c Var 'aux905' direct represents '2' with '3977'
3974 -3976 3977 0
-3977 3976 0
-3977 -3974 0
c Var 'aux905' direct represents '3' with '-3976'
3973 3975 3977 -3976 0
c Encoding variable: aux906 with domain: int(0..4) (representing constraint (aux901 + aux903))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3978'
c Var 'aux906' direct represents '0' with '3978'
c Var 'aux906' order represents '1' with '3979'
-3978 3979 0
c Var 'aux906' direct represents '1' with '3980'
3978 -3979 3980 0
-3980 3979 0
-3980 -3978 0
c Var 'aux906' order represents '2' with '3981'
-3979 3981 0
c Var 'aux906' direct represents '2' with '3982'
3979 -3981 3982 0
-3982 3981 0
-3982 -3979 0
c Var 'aux906' order represents '3' with '3983'
-3981 3983 0
c Var 'aux906' direct represents '3' with '3984'
3981 -3983 3984 0
-3984 3983 0
-3984 -3981 0
c Var 'aux906' direct represents '4' with '-3983'
3978 3980 3982 3984 -3983 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3985'
c Var 'aux907' direct represents '0' with '3985'
c Var 'aux907' order represents '1' with '3986'
-3985 3986 0
c Var 'aux907' direct represents '1' with '3987'
3985 -3986 3987 0
-3987 3986 0
-3987 -3985 0
c Var 'aux907' direct represents '2' with '-3986'
3985 3987 -3986 0
c Encoding variable: aux908 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3988'
c Var 'aux908' direct represents '0' with '3988'
c Var 'aux908' order represents '1' with '3989'
-3988 3989 0
c Var 'aux908' direct represents '1' with '3990'
3988 -3989 3990 0
-3990 3989 0
-3990 -3988 0
c Var 'aux908' direct represents '2' with '-3989'
3988 3990 -3989 0
c Encoding variable: aux909 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3991'
c Var 'aux909' direct represents '0' with '3991'
c Var 'aux909' order represents '1' with '3992'
-3991 3992 0
c Var 'aux909' direct represents '1' with '3993'
3991 -3992 3993 0
-3993 3992 0
-3993 -3991 0
c Var 'aux909' direct represents '2' with '-3992'
3991 3993 -3992 0
c Encoding variable: aux910 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3994'
c Var 'aux910' direct represents '0' with '3994'
c Var 'aux910' order represents '1' with '3995'
-3994 3995 0
c Var 'aux910' direct represents '1' with '3996'
3994 -3995 3996 0
-3996 3995 0
-3996 -3994 0
c Var 'aux910' direct represents '2' with '-3995'
3994 3996 -3995 0
c Encoding variable: aux911 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux910))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3997'
c Var 'aux911' direct represents '0' with '3997'
c Var 'aux911' order represents '1' with '3998'
-3997 3998 0
c Var 'aux911' direct represents '1' with '3999'
3997 -3998 3999 0
-3999 3998 0
-3999 -3997 0
c Var 'aux911' order represents '2' with '4000'
-3998 4000 0
c Var 'aux911' direct represents '2' with '4001'
3998 -4000 4001 0
-4001 4000 0
-4001 -3998 0
c Var 'aux911' direct represents '3' with '-4000'
3997 3999 4001 -4000 0
c Encoding variable: aux912 with domain: int(0..4) (representing constraint (aux907 + aux909))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '4002'
c Var 'aux912' direct represents '0' with '4002'
c Var 'aux912' order represents '1' with '4003'
-4002 4003 0
c Var 'aux912' direct represents '1' with '4004'
4002 -4003 4004 0
-4004 4003 0
-4004 -4002 0
c Var 'aux912' order represents '2' with '4005'
-4003 4005 0
c Var 'aux912' direct represents '2' with '4006'
4003 -4005 4006 0
-4006 4005 0
-4006 -4003 0
c Var 'aux912' order represents '3' with '4007'
-4005 4007 0
c Var 'aux912' direct represents '3' with '4008'
4005 -4007 4008 0
-4008 4007 0
-4008 -4005 0
c Var 'aux912' direct represents '4' with '-4007'
4002 4004 4006 4008 -4007 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '4009'
c Var 'aux913' direct represents '0' with '4009'
c Var 'aux913' order represents '1' with '4010'
-4009 4010 0
c Var 'aux913' direct represents '1' with '4011'
4009 -4010 4011 0
-4011 4010 0
-4011 -4009 0
c Var 'aux913' direct represents '2' with '-4010'
4009 4011 -4010 0
c Encoding variable: aux914 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '4012'
c Var 'aux914' direct represents '0' with '4012'
c Var 'aux914' order represents '1' with '4013'
-4012 4013 0
c Var 'aux914' direct represents '1' with '4014'
4012 -4013 4014 0
-4014 4013 0
-4014 -4012 0
c Var 'aux914' direct represents '2' with '-4013'
4012 4014 -4013 0
c Encoding variable: aux915 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '4015'
c Var 'aux915' direct represents '0' with '4015'
c Var 'aux915' order represents '1' with '4016'
-4015 4016 0
c Var 'aux915' direct represents '1' with '4017'
4015 -4016 4017 0
-4017 4016 0
-4017 -4015 0
c Var 'aux915' direct represents '2' with '-4016'
4015 4017 -4016 0
c Encoding variable: aux916 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '4018'
c Var 'aux916' direct represents '0' with '4018'
c Var 'aux916' order represents '1' with '4019'
-4018 4019 0
c Var 'aux916' direct represents '1' with '4020'
4018 -4019 4020 0
-4020 4019 0
-4020 -4018 0
c Var 'aux916' direct represents '2' with '-4019'
4018 4020 -4019 0
c Encoding variable: aux917 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux916))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '4021'
c Var 'aux917' direct represents '0' with '4021'
c Var 'aux917' order represents '1' with '4022'
-4021 4022 0
c Var 'aux917' direct represents '1' with '4023'
4021 -4022 4023 0
-4023 4022 0
-4023 -4021 0
c Var 'aux917' order represents '2' with '4024'
-4022 4024 0
c Var 'aux917' direct represents '2' with '4025'
4022 -4024 4025 0
-4025 4024 0
-4025 -4022 0
c Var 'aux917' direct represents '3' with '-4024'
4021 4023 4025 -4024 0
c Encoding variable: aux918 with domain: int(0..4) (representing constraint (aux913 + aux915))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '4026'
c Var 'aux918' direct represents '0' with '4026'
c Var 'aux918' order represents '1' with '4027'
-4026 4027 0
c Var 'aux918' direct represents '1' with '4028'
4026 -4027 4028 0
-4028 4027 0
-4028 -4026 0
c Var 'aux918' order represents '2' with '4029'
-4027 4029 0
c Var 'aux918' direct represents '2' with '4030'
4027 -4029 4030 0
-4030 4029 0
-4030 -4027 0
c Var 'aux918' order represents '3' with '4031'
-4029 4031 0
c Var 'aux918' direct represents '3' with '4032'
4029 -4031 4032 0
-4032 4031 0
-4032 -4029 0
c Var 'aux918' direct represents '4' with '-4031'
4026 4028 4030 4032 -4031 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '4033'
c Var 'aux919' direct represents '0' with '4033'
c Var 'aux919' order represents '1' with '4034'
-4033 4034 0
c Var 'aux919' direct represents '1' with '4035'
4033 -4034 4035 0
-4035 4034 0
-4035 -4033 0
c Var 'aux919' direct represents '2' with '-4034'
4033 4035 -4034 0
c Encoding variable: aux920 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '4036'
c Var 'aux920' direct represents '0' with '4036'
c Var 'aux920' order represents '1' with '4037'
-4036 4037 0
c Var 'aux920' direct represents '1' with '4038'
4036 -4037 4038 0
-4038 4037 0
-4038 -4036 0
c Var 'aux920' direct represents '2' with '-4037'
4036 4038 -4037 0
c Encoding variable: aux921 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '4039'
c Var 'aux921' direct represents '0' with '4039'
c Var 'aux921' order represents '1' with '4040'
-4039 4040 0
c Var 'aux921' direct represents '1' with '4041'
4039 -4040 4041 0
-4041 4040 0
-4041 -4039 0
c Var 'aux921' direct represents '2' with '-4040'
4039 4041 -4040 0
c Encoding variable: aux922 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '4042'
c Var 'aux922' direct represents '0' with '4042'
c Var 'aux922' order represents '1' with '4043'
-4042 4043 0
c Var 'aux922' direct represents '1' with '4044'
4042 -4043 4044 0
-4044 4043 0
-4044 -4042 0
c Var 'aux922' direct represents '2' with '-4043'
4042 4044 -4043 0
c Encoding variable: aux923 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux922))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '4045'
c Var 'aux923' direct represents '0' with '4045'
c Var 'aux923' order represents '1' with '4046'
-4045 4046 0
c Var 'aux923' direct represents '1' with '4047'
4045 -4046 4047 0
-4047 4046 0
-4047 -4045 0
c Var 'aux923' order represents '2' with '4048'
-4046 4048 0
c Var 'aux923' direct represents '2' with '4049'
4046 -4048 4049 0
-4049 4048 0
-4049 -4046 0
c Var 'aux923' direct represents '3' with '-4048'
4045 4047 4049 -4048 0
c Encoding variable: aux924 with domain: int(0..4) (representing constraint (aux919 + aux921))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '4050'
c Var 'aux924' direct represents '0' with '4050'
c Var 'aux924' order represents '1' with '4051'
-4050 4051 0
c Var 'aux924' direct represents '1' with '4052'
4050 -4051 4052 0
-4052 4051 0
-4052 -4050 0
c Var 'aux924' order represents '2' with '4053'
-4051 4053 0
c Var 'aux924' direct represents '2' with '4054'
4051 -4053 4054 0
-4054 4053 0
-4054 -4051 0
c Var 'aux924' order represents '3' with '4055'
-4053 4055 0
c Var 'aux924' direct represents '3' with '4056'
4053 -4055 4056 0
-4056 4055 0
-4056 -4053 0
c Var 'aux924' direct represents '4' with '-4055'
4050 4052 4054 4056 -4055 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '4057'
c Var 'aux925' direct represents '0' with '4057'
c Var 'aux925' order represents '1' with '4058'
-4057 4058 0
c Var 'aux925' direct represents '1' with '4059'
4057 -4058 4059 0
-4059 4058 0
-4059 -4057 0
c Var 'aux925' direct represents '2' with '-4058'
4057 4059 -4058 0
c Encoding variable: aux926 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '4060'
c Var 'aux926' direct represents '0' with '4060'
c Var 'aux926' order represents '1' with '4061'
-4060 4061 0
c Var 'aux926' direct represents '1' with '4062'
4060 -4061 4062 0
-4062 4061 0
-4062 -4060 0
c Var 'aux926' direct represents '2' with '-4061'
4060 4062 -4061 0
c Encoding variable: aux927 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '4063'
c Var 'aux927' direct represents '0' with '4063'
c Var 'aux927' order represents '1' with '4064'
-4063 4064 0
c Var 'aux927' direct represents '1' with '4065'
4063 -4064 4065 0
-4065 4064 0
-4065 -4063 0
c Var 'aux927' direct represents '2' with '-4064'
4063 4065 -4064 0
c Encoding variable: aux928 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '4066'
c Var 'aux928' direct represents '0' with '4066'
c Var 'aux928' order represents '1' with '4067'
-4066 4067 0
c Var 'aux928' direct represents '1' with '4068'
4066 -4067 4068 0
-4068 4067 0
-4068 -4066 0
c Var 'aux928' direct represents '2' with '-4067'
4066 4068 -4067 0
c Encoding variable: aux929 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux928))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '4069'
c Var 'aux929' direct represents '0' with '4069'
c Var 'aux929' order represents '1' with '4070'
-4069 4070 0
c Var 'aux929' direct represents '1' with '4071'
4069 -4070 4071 0
-4071 4070 0
-4071 -4069 0
c Var 'aux929' order represents '2' with '4072'
-4070 4072 0
c Var 'aux929' direct represents '2' with '4073'
4070 -4072 4073 0
-4073 4072 0
-4073 -4070 0
c Var 'aux929' direct represents '3' with '-4072'
4069 4071 4073 -4072 0
c Encoding variable: aux930 with domain: int(0..4) (representing constraint (aux925 + aux927))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '4074'
c Var 'aux930' direct represents '0' with '4074'
c Var 'aux930' order represents '1' with '4075'
-4074 4075 0
c Var 'aux930' direct represents '1' with '4076'
4074 -4075 4076 0
-4076 4075 0
-4076 -4074 0
c Var 'aux930' order represents '2' with '4077'
-4075 4077 0
c Var 'aux930' direct represents '2' with '4078'
4075 -4077 4078 0
-4078 4077 0
-4078 -4075 0
c Var 'aux930' order represents '3' with '4079'
-4077 4079 0
c Var 'aux930' direct represents '3' with '4080'
4077 -4079 4080 0
-4080 4079 0
-4080 -4077 0
c Var 'aux930' direct represents '4' with '-4079'
4074 4076 4078 4080 -4079 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '4081'
c Var 'aux931' direct represents '0' with '4081'
c Var 'aux931' order represents '1' with '4082'
-4081 4082 0
c Var 'aux931' direct represents '1' with '4083'
4081 -4082 4083 0
-4083 4082 0
-4083 -4081 0
c Var 'aux931' direct represents '2' with '-4082'
4081 4083 -4082 0
c Encoding variable: aux932 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '4084'
c Var 'aux932' direct represents '0' with '4084'
c Var 'aux932' order represents '1' with '4085'
-4084 4085 0
c Var 'aux932' direct represents '1' with '4086'
4084 -4085 4086 0
-4086 4085 0
-4086 -4084 0
c Var 'aux932' direct represents '2' with '-4085'
4084 4086 -4085 0
c Encoding variable: aux933 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '4087'
c Var 'aux933' direct represents '0' with '4087'
c Var 'aux933' order represents '1' with '4088'
-4087 4088 0
c Var 'aux933' direct represents '1' with '4089'
4087 -4088 4089 0
-4089 4088 0
-4089 -4087 0
c Var 'aux933' direct represents '2' with '-4088'
4087 4089 -4088 0
c Encoding variable: aux934 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '4090'
c Var 'aux934' direct represents '0' with '4090'
c Var 'aux934' order represents '1' with '4091'
-4090 4091 0
c Var 'aux934' direct represents '1' with '4092'
4090 -4091 4092 0
-4092 4091 0
-4092 -4090 0
c Var 'aux934' direct represents '2' with '-4091'
4090 4092 -4091 0
c Encoding variable: aux935 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux934))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '4093'
c Var 'aux935' direct represents '0' with '4093'
c Var 'aux935' order represents '1' with '4094'
-4093 4094 0
c Var 'aux935' direct represents '1' with '4095'
4093 -4094 4095 0
-4095 4094 0
-4095 -4093 0
c Var 'aux935' order represents '2' with '4096'
-4094 4096 0
c Var 'aux935' direct represents '2' with '4097'
4094 -4096 4097 0
-4097 4096 0
-4097 -4094 0
c Var 'aux935' direct represents '3' with '-4096'
4093 4095 4097 -4096 0
c Encoding variable: aux936 with domain: int(0..4) (representing constraint (aux931 + aux933))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '4098'
c Var 'aux936' direct represents '0' with '4098'
c Var 'aux936' order represents '1' with '4099'
-4098 4099 0
c Var 'aux936' direct represents '1' with '4100'
4098 -4099 4100 0
-4100 4099 0
-4100 -4098 0
c Var 'aux936' order represents '2' with '4101'
-4099 4101 0
c Var 'aux936' direct represents '2' with '4102'
4099 -4101 4102 0
-4102 4101 0
-4102 -4099 0
c Var 'aux936' order represents '3' with '4103'
-4101 4103 0
c Var 'aux936' direct represents '3' with '4104'
4101 -4103 4104 0
-4104 4103 0
-4104 -4101 0
c Var 'aux936' direct represents '4' with '-4103'
4098 4100 4102 4104 -4103 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '4105'
c Var 'aux937' direct represents '0' with '4105'
c Var 'aux937' order represents '1' with '4106'
-4105 4106 0
c Var 'aux937' direct represents '1' with '4107'
4105 -4106 4107 0
-4107 4106 0
-4107 -4105 0
c Var 'aux937' direct represents '2' with '-4106'
4105 4107 -4106 0
c Encoding variable: aux938 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '4108'
c Var 'aux938' direct represents '0' with '4108'
c Var 'aux938' order represents '1' with '4109'
-4108 4109 0
c Var 'aux938' direct represents '1' with '4110'
4108 -4109 4110 0
-4110 4109 0
-4110 -4108 0
c Var 'aux938' direct represents '2' with '-4109'
4108 4110 -4109 0
c Encoding variable: aux939 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '4111'
c Var 'aux939' direct represents '0' with '4111'
c Var 'aux939' order represents '1' with '4112'
-4111 4112 0
c Var 'aux939' direct represents '1' with '4113'
4111 -4112 4113 0
-4113 4112 0
-4113 -4111 0
c Var 'aux939' direct represents '2' with '-4112'
4111 4113 -4112 0
c Encoding variable: aux940 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '4114'
c Var 'aux940' direct represents '0' with '4114'
c Var 'aux940' order represents '1' with '4115'
-4114 4115 0
c Var 'aux940' direct represents '1' with '4116'
4114 -4115 4116 0
-4116 4115 0
-4116 -4114 0
c Var 'aux940' direct represents '2' with '-4115'
4114 4116 -4115 0
c Encoding variable: aux941 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux940))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '4117'
c Var 'aux941' direct represents '0' with '4117'
c Var 'aux941' order represents '1' with '4118'
-4117 4118 0
c Var 'aux941' direct represents '1' with '4119'
4117 -4118 4119 0
-4119 4118 0
-4119 -4117 0
c Var 'aux941' order represents '2' with '4120'
-4118 4120 0
c Var 'aux941' direct represents '2' with '4121'
4118 -4120 4121 0
-4121 4120 0
-4121 -4118 0
c Var 'aux941' direct represents '3' with '-4120'
4117 4119 4121 -4120 0
c Encoding variable: aux942 with domain: int(0..4) (representing constraint (aux937 + aux939))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '4122'
c Var 'aux942' direct represents '0' with '4122'
c Var 'aux942' order represents '1' with '4123'
-4122 4123 0
c Var 'aux942' direct represents '1' with '4124'
4122 -4123 4124 0
-4124 4123 0
-4124 -4122 0
c Var 'aux942' order represents '2' with '4125'
-4123 4125 0
c Var 'aux942' direct represents '2' with '4126'
4123 -4125 4126 0
-4126 4125 0
-4126 -4123 0
c Var 'aux942' order represents '3' with '4127'
-4125 4127 0
c Var 'aux942' direct represents '3' with '4128'
4125 -4127 4128 0
-4128 4127 0
-4128 -4125 0
c Var 'aux942' direct represents '4' with '-4127'
4122 4124 4126 4128 -4127 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '4129'
c Var 'aux943' direct represents '0' with '4129'
c Var 'aux943' order represents '1' with '4130'
-4129 4130 0
c Var 'aux943' direct represents '1' with '4131'
4129 -4130 4131 0
-4131 4130 0
-4131 -4129 0
c Var 'aux943' direct represents '2' with '-4130'
4129 4131 -4130 0
c Encoding variable: aux944 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '4132'
c Var 'aux944' direct represents '0' with '4132'
c Var 'aux944' order represents '1' with '4133'
-4132 4133 0
c Var 'aux944' direct represents '1' with '4134'
4132 -4133 4134 0
-4134 4133 0
-4134 -4132 0
c Var 'aux944' direct represents '2' with '-4133'
4132 4134 -4133 0
c Encoding variable: aux945 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '4135'
c Var 'aux945' direct represents '0' with '4135'
c Var 'aux945' order represents '1' with '4136'
-4135 4136 0
c Var 'aux945' direct represents '1' with '4137'
4135 -4136 4137 0
-4137 4136 0
-4137 -4135 0
c Var 'aux945' direct represents '2' with '-4136'
4135 4137 -4136 0
c Encoding variable: aux946 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '4138'
c Var 'aux946' direct represents '0' with '4138'
c Var 'aux946' order represents '1' with '4139'
-4138 4139 0
c Var 'aux946' direct represents '1' with '4140'
4138 -4139 4140 0
-4140 4139 0
-4140 -4138 0
c Var 'aux946' direct represents '2' with '-4139'
4138 4140 -4139 0
c Encoding variable: aux947 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux946))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '4141'
c Var 'aux947' direct represents '0' with '4141'
c Var 'aux947' order represents '1' with '4142'
-4141 4142 0
c Var 'aux947' direct represents '1' with '4143'
4141 -4142 4143 0
-4143 4142 0
-4143 -4141 0
c Var 'aux947' order represents '2' with '4144'
-4142 4144 0
c Var 'aux947' direct represents '2' with '4145'
4142 -4144 4145 0
-4145 4144 0
-4145 -4142 0
c Var 'aux947' direct represents '3' with '-4144'
4141 4143 4145 -4144 0
c Encoding variable: aux948 with domain: int(0..4) (representing constraint (aux943 + aux945))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '4146'
c Var 'aux948' direct represents '0' with '4146'
c Var 'aux948' order represents '1' with '4147'
-4146 4147 0
c Var 'aux948' direct represents '1' with '4148'
4146 -4147 4148 0
-4148 4147 0
-4148 -4146 0
c Var 'aux948' order represents '2' with '4149'
-4147 4149 0
c Var 'aux948' direct represents '2' with '4150'
4147 -4149 4150 0
-4150 4149 0
-4150 -4147 0
c Var 'aux948' order represents '3' with '4151'
-4149 4151 0
c Var 'aux948' direct represents '3' with '4152'
4149 -4151 4152 0
-4152 4151 0
-4152 -4149 0
c Var 'aux948' direct represents '4' with '-4151'
4146 4148 4150 4152 -4151 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '4153'
c Var 'aux949' direct represents '0' with '4153'
c Var 'aux949' order represents '1' with '4154'
-4153 4154 0
c Var 'aux949' direct represents '1' with '4155'
4153 -4154 4155 0
-4155 4154 0
-4155 -4153 0
c Var 'aux949' direct represents '2' with '-4154'
4153 4155 -4154 0
c Encoding variable: aux950 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '4156'
c Var 'aux950' direct represents '0' with '4156'
c Var 'aux950' order represents '1' with '4157'
-4156 4157 0
c Var 'aux950' direct represents '1' with '4158'
4156 -4157 4158 0
-4158 4157 0
-4158 -4156 0
c Var 'aux950' direct represents '2' with '-4157'
4156 4158 -4157 0
c Encoding variable: aux951 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '4159'
c Var 'aux951' direct represents '0' with '4159'
c Var 'aux951' order represents '1' with '4160'
-4159 4160 0
c Var 'aux951' direct represents '1' with '4161'
4159 -4160 4161 0
-4161 4160 0
-4161 -4159 0
c Var 'aux951' direct represents '2' with '-4160'
4159 4161 -4160 0
c Encoding variable: aux952 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '4162'
c Var 'aux952' direct represents '0' with '4162'
c Var 'aux952' order represents '1' with '4163'
-4162 4163 0
c Var 'aux952' direct represents '1' with '4164'
4162 -4163 4164 0
-4164 4163 0
-4164 -4162 0
c Var 'aux952' direct represents '2' with '-4163'
4162 4164 -4163 0
c Encoding variable: aux953 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux952))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '4165'
c Var 'aux953' direct represents '0' with '4165'
c Var 'aux953' order represents '1' with '4166'
-4165 4166 0
c Var 'aux953' direct represents '1' with '4167'
4165 -4166 4167 0
-4167 4166 0
-4167 -4165 0
c Var 'aux953' order represents '2' with '4168'
-4166 4168 0
c Var 'aux953' direct represents '2' with '4169'
4166 -4168 4169 0
-4169 4168 0
-4169 -4166 0
c Var 'aux953' direct represents '3' with '-4168'
4165 4167 4169 -4168 0
c Encoding variable: aux954 with domain: int(0..4) (representing constraint (aux949 + aux951))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '4170'
c Var 'aux954' direct represents '0' with '4170'
c Var 'aux954' order represents '1' with '4171'
-4170 4171 0
c Var 'aux954' direct represents '1' with '4172'
4170 -4171 4172 0
-4172 4171 0
-4172 -4170 0
c Var 'aux954' order represents '2' with '4173'
-4171 4173 0
c Var 'aux954' direct represents '2' with '4174'
4171 -4173 4174 0
-4174 4173 0
-4174 -4171 0
c Var 'aux954' order represents '3' with '4175'
-4173 4175 0
c Var 'aux954' direct represents '3' with '4176'
4173 -4175 4176 0
-4176 4175 0
-4176 -4173 0
c Var 'aux954' direct represents '4' with '-4175'
4170 4172 4174 4176 -4175 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '4177'
c Var 'aux955' direct represents '0' with '4177'
c Var 'aux955' order represents '1' with '4178'
-4177 4178 0
c Var 'aux955' direct represents '1' with '4179'
4177 -4178 4179 0
-4179 4178 0
-4179 -4177 0
c Var 'aux955' direct represents '2' with '-4178'
4177 4179 -4178 0
c Encoding variable: aux956 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '4180'
c Var 'aux956' direct represents '0' with '4180'
c Var 'aux956' order represents '1' with '4181'
-4180 4181 0
c Var 'aux956' direct represents '1' with '4182'
4180 -4181 4182 0
-4182 4181 0
-4182 -4180 0
c Var 'aux956' direct represents '2' with '-4181'
4180 4182 -4181 0
c Encoding variable: aux957 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '4183'
c Var 'aux957' direct represents '0' with '4183'
c Var 'aux957' order represents '1' with '4184'
-4183 4184 0
c Var 'aux957' direct represents '1' with '4185'
4183 -4184 4185 0
-4185 4184 0
-4185 -4183 0
c Var 'aux957' direct represents '2' with '-4184'
4183 4185 -4184 0
c Encoding variable: aux958 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '4186'
c Var 'aux958' direct represents '0' with '4186'
c Var 'aux958' order represents '1' with '4187'
-4186 4187 0
c Var 'aux958' direct represents '1' with '4188'
4186 -4187 4188 0
-4188 4187 0
-4188 -4186 0
c Var 'aux958' direct represents '2' with '-4187'
4186 4188 -4187 0
c Encoding variable: aux959 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux958))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '4189'
c Var 'aux959' direct represents '0' with '4189'
c Var 'aux959' order represents '1' with '4190'
-4189 4190 0
c Var 'aux959' direct represents '1' with '4191'
4189 -4190 4191 0
-4191 4190 0
-4191 -4189 0
c Var 'aux959' order represents '2' with '4192'
-4190 4192 0
c Var 'aux959' direct represents '2' with '4193'
4190 -4192 4193 0
-4193 4192 0
-4193 -4190 0
c Var 'aux959' direct represents '3' with '-4192'
4189 4191 4193 -4192 0
c Encoding variable: aux960 with domain: int(0..4) (representing constraint (aux955 + aux957))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '4194'
c Var 'aux960' direct represents '0' with '4194'
c Var 'aux960' order represents '1' with '4195'
-4194 4195 0
c Var 'aux960' direct represents '1' with '4196'
4194 -4195 4196 0
-4196 4195 0
-4196 -4194 0
c Var 'aux960' order represents '2' with '4197'
-4195 4197 0
c Var 'aux960' direct represents '2' with '4198'
4195 -4197 4198 0
-4198 4197 0
-4198 -4195 0
c Var 'aux960' order represents '3' with '4199'
-4197 4199 0
c Var 'aux960' direct represents '3' with '4200'
4197 -4199 4200 0
-4200 4199 0
-4200 -4197 0
c Var 'aux960' direct represents '4' with '-4199'
4194 4196 4198 4200 -4199 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '4201'
c Var 'aux961' direct represents '0' with '4201'
c Var 'aux961' order represents '1' with '4202'
-4201 4202 0
c Var 'aux961' direct represents '1' with '4203'
4201 -4202 4203 0
-4203 4202 0
-4203 -4201 0
c Var 'aux961' direct represents '2' with '-4202'
4201 4203 -4202 0
c Encoding variable: aux962 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '4204'
c Var 'aux962' direct represents '0' with '4204'
c Var 'aux962' order represents '1' with '4205'
-4204 4205 0
c Var 'aux962' direct represents '1' with '4206'
4204 -4205 4206 0
-4206 4205 0
-4206 -4204 0
c Var 'aux962' direct represents '2' with '-4205'
4204 4206 -4205 0
c Encoding variable: aux963 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '4207'
c Var 'aux963' direct represents '0' with '4207'
c Var 'aux963' order represents '1' with '4208'
-4207 4208 0
c Var 'aux963' direct represents '1' with '4209'
4207 -4208 4209 0
-4209 4208 0
-4209 -4207 0
c Var 'aux963' direct represents '2' with '-4208'
4207 4209 -4208 0
c Encoding variable: aux964 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '4210'
c Var 'aux964' direct represents '0' with '4210'
c Var 'aux964' order represents '1' with '4211'
-4210 4211 0
c Var 'aux964' direct represents '1' with '4212'
4210 -4211 4212 0
-4212 4211 0
-4212 -4210 0
c Var 'aux964' direct represents '2' with '-4211'
4210 4212 -4211 0
c Encoding variable: aux965 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux964))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '4213'
c Var 'aux965' direct represents '0' with '4213'
c Var 'aux965' order represents '1' with '4214'
-4213 4214 0
c Var 'aux965' direct represents '1' with '4215'
4213 -4214 4215 0
-4215 4214 0
-4215 -4213 0
c Var 'aux965' order represents '2' with '4216'
-4214 4216 0
c Var 'aux965' direct represents '2' with '4217'
4214 -4216 4217 0
-4217 4216 0
-4217 -4214 0
c Var 'aux965' direct represents '3' with '-4216'
4213 4215 4217 -4216 0
c Encoding variable: aux966 with domain: int(0..4) (representing constraint (aux961 + aux963))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '4218'
c Var 'aux966' direct represents '0' with '4218'
c Var 'aux966' order represents '1' with '4219'
-4218 4219 0
c Var 'aux966' direct represents '1' with '4220'
4218 -4219 4220 0
-4220 4219 0
-4220 -4218 0
c Var 'aux966' order represents '2' with '4221'
-4219 4221 0
c Var 'aux966' direct represents '2' with '4222'
4219 -4221 4222 0
-4222 4221 0
-4222 -4219 0
c Var 'aux966' order represents '3' with '4223'
-4221 4223 0
c Var 'aux966' direct represents '3' with '4224'
4221 -4223 4224 0
-4224 4223 0
-4224 -4221 0
c Var 'aux966' direct represents '4' with '-4223'
4218 4220 4222 4224 -4223 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '4225'
c Var 'aux967' direct represents '0' with '4225'
c Var 'aux967' order represents '1' with '4226'
-4225 4226 0
c Var 'aux967' direct represents '1' with '4227'
4225 -4226 4227 0
-4227 4226 0
-4227 -4225 0
c Var 'aux967' direct represents '2' with '-4226'
4225 4227 -4226 0
c Encoding variable: aux968 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '4228'
c Var 'aux968' direct represents '0' with '4228'
c Var 'aux968' order represents '1' with '4229'
-4228 4229 0
c Var 'aux968' direct represents '1' with '4230'
4228 -4229 4230 0
-4230 4229 0
-4230 -4228 0
c Var 'aux968' direct represents '2' with '-4229'
4228 4230 -4229 0
c Encoding variable: aux969 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '4231'
c Var 'aux969' direct represents '0' with '4231'
c Var 'aux969' order represents '1' with '4232'
-4231 4232 0
c Var 'aux969' direct represents '1' with '4233'
4231 -4232 4233 0
-4233 4232 0
-4233 -4231 0
c Var 'aux969' direct represents '2' with '-4232'
4231 4233 -4232 0
c Encoding variable: aux970 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '4234'
c Var 'aux970' direct represents '0' with '4234'
c Var 'aux970' order represents '1' with '4235'
-4234 4235 0
c Var 'aux970' direct represents '1' with '4236'
4234 -4235 4236 0
-4236 4235 0
-4236 -4234 0
c Var 'aux970' direct represents '2' with '-4235'
4234 4236 -4235 0
c Encoding variable: aux971 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux970))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '4237'
c Var 'aux971' direct represents '0' with '4237'
c Var 'aux971' order represents '1' with '4238'
-4237 4238 0
c Var 'aux971' direct represents '1' with '4239'
4237 -4238 4239 0
-4239 4238 0
-4239 -4237 0
c Var 'aux971' order represents '2' with '4240'
-4238 4240 0
c Var 'aux971' direct represents '2' with '4241'
4238 -4240 4241 0
-4241 4240 0
-4241 -4238 0
c Var 'aux971' direct represents '3' with '-4240'
4237 4239 4241 -4240 0
c Encoding variable: aux972 with domain: int(0..4) (representing constraint (aux967 + aux969))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '4242'
c Var 'aux972' direct represents '0' with '4242'
c Var 'aux972' order represents '1' with '4243'
-4242 4243 0
c Var 'aux972' direct represents '1' with '4244'
4242 -4243 4244 0
-4244 4243 0
-4244 -4242 0
c Var 'aux972' order represents '2' with '4245'
-4243 4245 0
c Var 'aux972' direct represents '2' with '4246'
4243 -4245 4246 0
-4246 4245 0
-4246 -4243 0
c Var 'aux972' order represents '3' with '4247'
-4245 4247 0
c Var 'aux972' direct represents '3' with '4248'
4245 -4247 4248 0
-4248 4247 0
-4248 -4245 0
c Var 'aux972' direct represents '4' with '-4247'
4242 4244 4246 4248 -4247 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '4249'
c Var 'aux973' direct represents '0' with '4249'
c Var 'aux973' order represents '1' with '4250'
-4249 4250 0
c Var 'aux973' direct represents '1' with '4251'
4249 -4250 4251 0
-4251 4250 0
-4251 -4249 0
c Var 'aux973' direct represents '2' with '-4250'
4249 4251 -4250 0
c Encoding variable: aux974 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '4252'
c Var 'aux974' direct represents '0' with '4252'
c Var 'aux974' order represents '1' with '4253'
-4252 4253 0
c Var 'aux974' direct represents '1' with '4254'
4252 -4253 4254 0
-4254 4253 0
-4254 -4252 0
c Var 'aux974' direct represents '2' with '-4253'
4252 4254 -4253 0
c Encoding variable: aux975 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '4255'
c Var 'aux975' direct represents '0' with '4255'
c Var 'aux975' order represents '1' with '4256'
-4255 4256 0
c Var 'aux975' direct represents '1' with '4257'
4255 -4256 4257 0
-4257 4256 0
-4257 -4255 0
c Var 'aux975' direct represents '2' with '-4256'
4255 4257 -4256 0
c Encoding variable: aux976 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '4258'
c Var 'aux976' direct represents '0' with '4258'
c Var 'aux976' order represents '1' with '4259'
-4258 4259 0
c Var 'aux976' direct represents '1' with '4260'
4258 -4259 4260 0
-4260 4259 0
-4260 -4258 0
c Var 'aux976' direct represents '2' with '-4259'
4258 4260 -4259 0
c Encoding variable: aux977 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux976))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '4261'
c Var 'aux977' direct represents '0' with '4261'
c Var 'aux977' order represents '1' with '4262'
-4261 4262 0
c Var 'aux977' direct represents '1' with '4263'
4261 -4262 4263 0
-4263 4262 0
-4263 -4261 0
c Var 'aux977' order represents '2' with '4264'
-4262 4264 0
c Var 'aux977' direct represents '2' with '4265'
4262 -4264 4265 0
-4265 4264 0
-4265 -4262 0
c Var 'aux977' direct represents '3' with '-4264'
4261 4263 4265 -4264 0
c Encoding variable: aux978 with domain: int(0..4) (representing constraint (aux973 + aux975))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '4266'
c Var 'aux978' direct represents '0' with '4266'
c Var 'aux978' order represents '1' with '4267'
-4266 4267 0
c Var 'aux978' direct represents '1' with '4268'
4266 -4267 4268 0
-4268 4267 0
-4268 -4266 0
c Var 'aux978' order represents '2' with '4269'
-4267 4269 0
c Var 'aux978' direct represents '2' with '4270'
4267 -4269 4270 0
-4270 4269 0
-4270 -4267 0
c Var 'aux978' order represents '3' with '4271'
-4269 4271 0
c Var 'aux978' direct represents '3' with '4272'
4269 -4271 4272 0
-4272 4271 0
-4272 -4269 0
c Var 'aux978' direct represents '4' with '-4271'
4266 4268 4270 4272 -4271 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '4273'
c Var 'aux979' direct represents '0' with '4273'
c Var 'aux979' order represents '1' with '4274'
-4273 4274 0
c Var 'aux979' direct represents '1' with '4275'
4273 -4274 4275 0
-4275 4274 0
-4275 -4273 0
c Var 'aux979' direct represents '2' with '-4274'
4273 4275 -4274 0
c Encoding variable: aux980 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '4276'
c Var 'aux980' direct represents '0' with '4276'
c Var 'aux980' order represents '1' with '4277'
-4276 4277 0
c Var 'aux980' direct represents '1' with '4278'
4276 -4277 4278 0
-4278 4277 0
-4278 -4276 0
c Var 'aux980' direct represents '2' with '-4277'
4276 4278 -4277 0
c Encoding variable: aux981 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '4279'
c Var 'aux981' direct represents '0' with '4279'
c Var 'aux981' order represents '1' with '4280'
-4279 4280 0
c Var 'aux981' direct represents '1' with '4281'
4279 -4280 4281 0
-4281 4280 0
-4281 -4279 0
c Var 'aux981' direct represents '2' with '-4280'
4279 4281 -4280 0
c Encoding variable: aux982 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '4282'
c Var 'aux982' direct represents '0' with '4282'
c Var 'aux982' order represents '1' with '4283'
-4282 4283 0
c Var 'aux982' direct represents '1' with '4284'
4282 -4283 4284 0
-4284 4283 0
-4284 -4282 0
c Var 'aux982' direct represents '2' with '-4283'
4282 4284 -4283 0
c Encoding variable: aux983 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux982))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '4285'
c Var 'aux983' direct represents '0' with '4285'
c Var 'aux983' order represents '1' with '4286'
-4285 4286 0
c Var 'aux983' direct represents '1' with '4287'
4285 -4286 4287 0
-4287 4286 0
-4287 -4285 0
c Var 'aux983' order represents '2' with '4288'
-4286 4288 0
c Var 'aux983' direct represents '2' with '4289'
4286 -4288 4289 0
-4289 4288 0
-4289 -4286 0
c Var 'aux983' direct represents '3' with '-4288'
4285 4287 4289 -4288 0
c Encoding variable: aux984 with domain: int(0..4) (representing constraint (aux979 + aux981))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '4290'
c Var 'aux984' direct represents '0' with '4290'
c Var 'aux984' order represents '1' with '4291'
-4290 4291 0
c Var 'aux984' direct represents '1' with '4292'
4290 -4291 4292 0
-4292 4291 0
-4292 -4290 0
c Var 'aux984' order represents '2' with '4293'
-4291 4293 0
c Var 'aux984' direct represents '2' with '4294'
4291 -4293 4294 0
-4294 4293 0
-4294 -4291 0
c Var 'aux984' order represents '3' with '4295'
-4293 4295 0
c Var 'aux984' direct represents '3' with '4296'
4293 -4295 4296 0
-4296 4295 0
-4296 -4293 0
c Var 'aux984' direct represents '4' with '-4295'
4290 4292 4294 4296 -4295 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '4297'
c Var 'aux985' direct represents '0' with '4297'
c Var 'aux985' order represents '1' with '4298'
-4297 4298 0
c Var 'aux985' direct represents '1' with '4299'
4297 -4298 4299 0
-4299 4298 0
-4299 -4297 0
c Var 'aux985' direct represents '2' with '-4298'
4297 4299 -4298 0
c Encoding variable: aux986 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '4300'
c Var 'aux986' direct represents '0' with '4300'
c Var 'aux986' order represents '1' with '4301'
-4300 4301 0
c Var 'aux986' direct represents '1' with '4302'
4300 -4301 4302 0
-4302 4301 0
-4302 -4300 0
c Var 'aux986' direct represents '2' with '-4301'
4300 4302 -4301 0
c Encoding variable: aux987 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '4303'
c Var 'aux987' direct represents '0' with '4303'
c Var 'aux987' order represents '1' with '4304'
-4303 4304 0
c Var 'aux987' direct represents '1' with '4305'
4303 -4304 4305 0
-4305 4304 0
-4305 -4303 0
c Var 'aux987' direct represents '2' with '-4304'
4303 4305 -4304 0
c Encoding variable: aux988 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4306'
c Var 'aux988' direct represents '0' with '4306'
c Var 'aux988' order represents '1' with '4307'
-4306 4307 0
c Var 'aux988' direct represents '1' with '4308'
4306 -4307 4308 0
-4308 4307 0
-4308 -4306 0
c Var 'aux988' direct represents '2' with '-4307'
4306 4308 -4307 0
c Encoding variable: aux989 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux988))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4309'
c Var 'aux989' direct represents '0' with '4309'
c Var 'aux989' order represents '1' with '4310'
-4309 4310 0
c Var 'aux989' direct represents '1' with '4311'
4309 -4310 4311 0
-4311 4310 0
-4311 -4309 0
c Var 'aux989' order represents '2' with '4312'
-4310 4312 0
c Var 'aux989' direct represents '2' with '4313'
4310 -4312 4313 0
-4313 4312 0
-4313 -4310 0
c Var 'aux989' direct represents '3' with '-4312'
4309 4311 4313 -4312 0
c Encoding variable: aux990 with domain: int(0..4) (representing constraint (aux985 + aux987))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4314'
c Var 'aux990' direct represents '0' with '4314'
c Var 'aux990' order represents '1' with '4315'
-4314 4315 0
c Var 'aux990' direct represents '1' with '4316'
4314 -4315 4316 0
-4316 4315 0
-4316 -4314 0
c Var 'aux990' order represents '2' with '4317'
-4315 4317 0
c Var 'aux990' direct represents '2' with '4318'
4315 -4317 4318 0
-4318 4317 0
-4318 -4315 0
c Var 'aux990' order represents '3' with '4319'
-4317 4319 0
c Var 'aux990' direct represents '3' with '4320'
4317 -4319 4320 0
-4320 4319 0
-4320 -4317 0
c Var 'aux990' direct represents '4' with '-4319'
4314 4316 4318 4320 -4319 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4321'
c Var 'aux991' direct represents '0' with '4321'
c Var 'aux991' order represents '1' with '4322'
-4321 4322 0
c Var 'aux991' direct represents '1' with '4323'
4321 -4322 4323 0
-4323 4322 0
-4323 -4321 0
c Var 'aux991' direct represents '2' with '-4322'
4321 4323 -4322 0
c Encoding variable: aux992 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4324'
c Var 'aux992' direct represents '0' with '4324'
c Var 'aux992' order represents '1' with '4325'
-4324 4325 0
c Var 'aux992' direct represents '1' with '4326'
4324 -4325 4326 0
-4326 4325 0
-4326 -4324 0
c Var 'aux992' direct represents '2' with '-4325'
4324 4326 -4325 0
c Encoding variable: aux993 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4327'
c Var 'aux993' direct represents '0' with '4327'
c Var 'aux993' order represents '1' with '4328'
-4327 4328 0
c Var 'aux993' direct represents '1' with '4329'
4327 -4328 4329 0
-4329 4328 0
-4329 -4327 0
c Var 'aux993' direct represents '2' with '-4328'
4327 4329 -4328 0
c Encoding variable: aux994 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4330'
c Var 'aux994' direct represents '0' with '4330'
c Var 'aux994' order represents '1' with '4331'
-4330 4331 0
c Var 'aux994' direct represents '1' with '4332'
4330 -4331 4332 0
-4332 4331 0
-4332 -4330 0
c Var 'aux994' direct represents '2' with '-4331'
4330 4332 -4331 0
c Encoding variable: aux995 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux994))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4333'
c Var 'aux995' direct represents '0' with '4333'
c Var 'aux995' order represents '1' with '4334'
-4333 4334 0
c Var 'aux995' direct represents '1' with '4335'
4333 -4334 4335 0
-4335 4334 0
-4335 -4333 0
c Var 'aux995' order represents '2' with '4336'
-4334 4336 0
c Var 'aux995' direct represents '2' with '4337'
4334 -4336 4337 0
-4337 4336 0
-4337 -4334 0
c Var 'aux995' direct represents '3' with '-4336'
4333 4335 4337 -4336 0
c Encoding variable: aux996 with domain: int(0..4) (representing constraint (aux991 + aux993))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4338'
c Var 'aux996' direct represents '0' with '4338'
c Var 'aux996' order represents '1' with '4339'
-4338 4339 0
c Var 'aux996' direct represents '1' with '4340'
4338 -4339 4340 0
-4340 4339 0
-4340 -4338 0
c Var 'aux996' order represents '2' with '4341'
-4339 4341 0
c Var 'aux996' direct represents '2' with '4342'
4339 -4341 4342 0
-4342 4341 0
-4342 -4339 0
c Var 'aux996' order represents '3' with '4343'
-4341 4343 0
c Var 'aux996' direct represents '3' with '4344'
4341 -4343 4344 0
-4344 4343 0
-4344 -4341 0
c Var 'aux996' direct represents '4' with '-4343'
4338 4340 4342 4344 -4343 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4345'
c Var 'aux997' direct represents '0' with '4345'
c Var 'aux997' order represents '1' with '4346'
-4345 4346 0
c Var 'aux997' direct represents '1' with '4347'
4345 -4346 4347 0
-4347 4346 0
-4347 -4345 0
c Var 'aux997' direct represents '2' with '-4346'
4345 4347 -4346 0
c Encoding variable: aux998 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4348'
c Var 'aux998' direct represents '0' with '4348'
c Var 'aux998' order represents '1' with '4349'
-4348 4349 0
c Var 'aux998' direct represents '1' with '4350'
4348 -4349 4350 0
-4350 4349 0
-4350 -4348 0
c Var 'aux998' direct represents '2' with '-4349'
4348 4350 -4349 0
c Encoding variable: aux999 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4351'
c Var 'aux999' direct represents '0' with '4351'
c Var 'aux999' order represents '1' with '4352'
-4351 4352 0
c Var 'aux999' direct represents '1' with '4353'
4351 -4352 4353 0
-4353 4352 0
-4353 -4351 0
c Var 'aux999' direct represents '2' with '-4352'
4351 4353 -4352 0
c Encoding variable: aux1000 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4354'
c Var 'aux1000' direct represents '0' with '4354'
c Var 'aux1000' order represents '1' with '4355'
-4354 4355 0
c Var 'aux1000' direct represents '1' with '4356'
4354 -4355 4356 0
-4356 4355 0
-4356 -4354 0
c Var 'aux1000' direct represents '2' with '-4355'
4354 4356 -4355 0
c Encoding variable: aux1001 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1000))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4357'
c Var 'aux1001' direct represents '0' with '4357'
c Var 'aux1001' order represents '1' with '4358'
-4357 4358 0
c Var 'aux1001' direct represents '1' with '4359'
4357 -4358 4359 0
-4359 4358 0
-4359 -4357 0
c Var 'aux1001' order represents '2' with '4360'
-4358 4360 0
c Var 'aux1001' direct represents '2' with '4361'
4358 -4360 4361 0
-4361 4360 0
-4361 -4358 0
c Var 'aux1001' direct represents '3' with '-4360'
4357 4359 4361 -4360 0
c Encoding variable: aux1002 with domain: int(0..4) (representing constraint (aux997 + aux999))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4362'
c Var 'aux1002' direct represents '0' with '4362'
c Var 'aux1002' order represents '1' with '4363'
-4362 4363 0
c Var 'aux1002' direct represents '1' with '4364'
4362 -4363 4364 0
-4364 4363 0
-4364 -4362 0
c Var 'aux1002' order represents '2' with '4365'
-4363 4365 0
c Var 'aux1002' direct represents '2' with '4366'
4363 -4365 4366 0
-4366 4365 0
-4366 -4363 0
c Var 'aux1002' order represents '3' with '4367'
-4365 4367 0
c Var 'aux1002' direct represents '3' with '4368'
4365 -4367 4368 0
-4368 4367 0
-4368 -4365 0
c Var 'aux1002' direct represents '4' with '-4367'
4362 4364 4366 4368 -4367 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4369'
c Var 'aux1003' direct represents '0' with '4369'
c Var 'aux1003' order represents '1' with '4370'
-4369 4370 0
c Var 'aux1003' direct represents '1' with '4371'
4369 -4370 4371 0
-4371 4370 0
-4371 -4369 0
c Var 'aux1003' direct represents '2' with '-4370'
4369 4371 -4370 0
c Encoding variable: aux1004 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4372'
c Var 'aux1004' direct represents '0' with '4372'
c Var 'aux1004' order represents '1' with '4373'
-4372 4373 0
c Var 'aux1004' direct represents '1' with '4374'
4372 -4373 4374 0
-4374 4373 0
-4374 -4372 0
c Var 'aux1004' direct represents '2' with '-4373'
4372 4374 -4373 0
c Encoding variable: aux1005 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4375'
c Var 'aux1005' direct represents '0' with '4375'
c Var 'aux1005' order represents '1' with '4376'
-4375 4376 0
c Var 'aux1005' direct represents '1' with '4377'
4375 -4376 4377 0
-4377 4376 0
-4377 -4375 0
c Var 'aux1005' direct represents '2' with '-4376'
4375 4377 -4376 0
c Encoding variable: aux1006 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4378'
c Var 'aux1006' direct represents '0' with '4378'
c Var 'aux1006' order represents '1' with '4379'
-4378 4379 0
c Var 'aux1006' direct represents '1' with '4380'
4378 -4379 4380 0
-4380 4379 0
-4380 -4378 0
c Var 'aux1006' direct represents '2' with '-4379'
4378 4380 -4379 0
c Encoding variable: aux1007 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1006))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4381'
c Var 'aux1007' direct represents '0' with '4381'
c Var 'aux1007' order represents '1' with '4382'
-4381 4382 0
c Var 'aux1007' direct represents '1' with '4383'
4381 -4382 4383 0
-4383 4382 0
-4383 -4381 0
c Var 'aux1007' order represents '2' with '4384'
-4382 4384 0
c Var 'aux1007' direct represents '2' with '4385'
4382 -4384 4385 0
-4385 4384 0
-4385 -4382 0
c Var 'aux1007' direct represents '3' with '-4384'
4381 4383 4385 -4384 0
c Encoding variable: aux1008 with domain: int(0..4) (representing constraint (aux1003 + aux1005))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4386'
c Var 'aux1008' direct represents '0' with '4386'
c Var 'aux1008' order represents '1' with '4387'
-4386 4387 0
c Var 'aux1008' direct represents '1' with '4388'
4386 -4387 4388 0
-4388 4387 0
-4388 -4386 0
c Var 'aux1008' order represents '2' with '4389'
-4387 4389 0
c Var 'aux1008' direct represents '2' with '4390'
4387 -4389 4390 0
-4390 4389 0
-4390 -4387 0
c Var 'aux1008' order represents '3' with '4391'
-4389 4391 0
c Var 'aux1008' direct represents '3' with '4392'
4389 -4391 4392 0
-4392 4391 0
-4392 -4389 0
c Var 'aux1008' direct represents '4' with '-4391'
4386 4388 4390 4392 -4391 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4393'
c Var 'aux1009' direct represents '0' with '4393'
c Var 'aux1009' order represents '1' with '4394'
-4393 4394 0
c Var 'aux1009' direct represents '1' with '4395'
4393 -4394 4395 0
-4395 4394 0
-4395 -4393 0
c Var 'aux1009' direct represents '2' with '-4394'
4393 4395 -4394 0
c Encoding variable: aux1010 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4396'
c Var 'aux1010' direct represents '0' with '4396'
c Var 'aux1010' order represents '1' with '4397'
-4396 4397 0
c Var 'aux1010' direct represents '1' with '4398'
4396 -4397 4398 0
-4398 4397 0
-4398 -4396 0
c Var 'aux1010' direct represents '2' with '-4397'
4396 4398 -4397 0
c Encoding variable: aux1011 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4399'
c Var 'aux1011' direct represents '0' with '4399'
c Var 'aux1011' order represents '1' with '4400'
-4399 4400 0
c Var 'aux1011' direct represents '1' with '4401'
4399 -4400 4401 0
-4401 4400 0
-4401 -4399 0
c Var 'aux1011' direct represents '2' with '-4400'
4399 4401 -4400 0
c Encoding variable: aux1012 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4402'
c Var 'aux1012' direct represents '0' with '4402'
c Var 'aux1012' order represents '1' with '4403'
-4402 4403 0
c Var 'aux1012' direct represents '1' with '4404'
4402 -4403 4404 0
-4404 4403 0
-4404 -4402 0
c Var 'aux1012' direct represents '2' with '-4403'
4402 4404 -4403 0
c Encoding variable: aux1013 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1012))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4405'
c Var 'aux1013' direct represents '0' with '4405'
c Var 'aux1013' order represents '1' with '4406'
-4405 4406 0
c Var 'aux1013' direct represents '1' with '4407'
4405 -4406 4407 0
-4407 4406 0
-4407 -4405 0
c Var 'aux1013' order represents '2' with '4408'
-4406 4408 0
c Var 'aux1013' direct represents '2' with '4409'
4406 -4408 4409 0
-4409 4408 0
-4409 -4406 0
c Var 'aux1013' direct represents '3' with '-4408'
4405 4407 4409 -4408 0
c Encoding variable: aux1014 with domain: int(0..4) (representing constraint (aux1009 + aux1011))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4410'
c Var 'aux1014' direct represents '0' with '4410'
c Var 'aux1014' order represents '1' with '4411'
-4410 4411 0
c Var 'aux1014' direct represents '1' with '4412'
4410 -4411 4412 0
-4412 4411 0
-4412 -4410 0
c Var 'aux1014' order represents '2' with '4413'
-4411 4413 0
c Var 'aux1014' direct represents '2' with '4414'
4411 -4413 4414 0
-4414 4413 0
-4414 -4411 0
c Var 'aux1014' order represents '3' with '4415'
-4413 4415 0
c Var 'aux1014' direct represents '3' with '4416'
4413 -4415 4416 0
-4416 4415 0
-4416 -4413 0
c Var 'aux1014' direct represents '4' with '-4415'
4410 4412 4414 4416 -4415 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4417'
c Var 'aux1015' direct represents '0' with '4417'
c Var 'aux1015' order represents '1' with '4418'
-4417 4418 0
c Var 'aux1015' direct represents '1' with '4419'
4417 -4418 4419 0
-4419 4418 0
-4419 -4417 0
c Var 'aux1015' direct represents '2' with '-4418'
4417 4419 -4418 0
c Encoding variable: aux1016 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4420'
c Var 'aux1016' direct represents '0' with '4420'
c Var 'aux1016' order represents '1' with '4421'
-4420 4421 0
c Var 'aux1016' direct represents '1' with '4422'
4420 -4421 4422 0
-4422 4421 0
-4422 -4420 0
c Var 'aux1016' direct represents '2' with '-4421'
4420 4422 -4421 0
c Encoding variable: aux1017 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4423'
c Var 'aux1017' direct represents '0' with '4423'
c Var 'aux1017' order represents '1' with '4424'
-4423 4424 0
c Var 'aux1017' direct represents '1' with '4425'
4423 -4424 4425 0
-4425 4424 0
-4425 -4423 0
c Var 'aux1017' direct represents '2' with '-4424'
4423 4425 -4424 0
c Encoding variable: aux1018 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4426'
c Var 'aux1018' direct represents '0' with '4426'
c Var 'aux1018' order represents '1' with '4427'
-4426 4427 0
c Var 'aux1018' direct represents '1' with '4428'
4426 -4427 4428 0
-4428 4427 0
-4428 -4426 0
c Var 'aux1018' direct represents '2' with '-4427'
4426 4428 -4427 0
c Encoding variable: aux1019 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1018))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4429'
c Var 'aux1019' direct represents '0' with '4429'
c Var 'aux1019' order represents '1' with '4430'
-4429 4430 0
c Var 'aux1019' direct represents '1' with '4431'
4429 -4430 4431 0
-4431 4430 0
-4431 -4429 0
c Var 'aux1019' order represents '2' with '4432'
-4430 4432 0
c Var 'aux1019' direct represents '2' with '4433'
4430 -4432 4433 0
-4433 4432 0
-4433 -4430 0
c Var 'aux1019' direct represents '3' with '-4432'
4429 4431 4433 -4432 0
c Encoding variable: aux1020 with domain: int(0..4) (representing constraint (aux1015 + aux1017))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4434'
c Var 'aux1020' direct represents '0' with '4434'
c Var 'aux1020' order represents '1' with '4435'
-4434 4435 0
c Var 'aux1020' direct represents '1' with '4436'
4434 -4435 4436 0
-4436 4435 0
-4436 -4434 0
c Var 'aux1020' order represents '2' with '4437'
-4435 4437 0
c Var 'aux1020' direct represents '2' with '4438'
4435 -4437 4438 0
-4438 4437 0
-4438 -4435 0
c Var 'aux1020' order represents '3' with '4439'
-4437 4439 0
c Var 'aux1020' direct represents '3' with '4440'
4437 -4439 4440 0
-4440 4439 0
-4440 -4437 0
c Var 'aux1020' direct represents '4' with '-4439'
4434 4436 4438 4440 -4439 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4441'
c Var 'aux1021' direct represents '0' with '4441'
c Var 'aux1021' order represents '1' with '4442'
-4441 4442 0
c Var 'aux1021' direct represents '1' with '4443'
4441 -4442 4443 0
-4443 4442 0
-4443 -4441 0
c Var 'aux1021' direct represents '2' with '-4442'
4441 4443 -4442 0
c Encoding variable: aux1022 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4444'
c Var 'aux1022' direct represents '0' with '4444'
c Var 'aux1022' order represents '1' with '4445'
-4444 4445 0
c Var 'aux1022' direct represents '1' with '4446'
4444 -4445 4446 0
-4446 4445 0
-4446 -4444 0
c Var 'aux1022' direct represents '2' with '-4445'
4444 4446 -4445 0
c Encoding variable: aux1023 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4447'
c Var 'aux1023' direct represents '0' with '4447'
c Var 'aux1023' order represents '1' with '4448'
-4447 4448 0
c Var 'aux1023' direct represents '1' with '4449'
4447 -4448 4449 0
-4449 4448 0
-4449 -4447 0
c Var 'aux1023' direct represents '2' with '-4448'
4447 4449 -4448 0
c Encoding variable: aux1024 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4450'
c Var 'aux1024' direct represents '0' with '4450'
c Var 'aux1024' order represents '1' with '4451'
-4450 4451 0
c Var 'aux1024' direct represents '1' with '4452'
4450 -4451 4452 0
-4452 4451 0
-4452 -4450 0
c Var 'aux1024' direct represents '2' with '-4451'
4450 4452 -4451 0
c Encoding variable: aux1025 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1024))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4453'
c Var 'aux1025' direct represents '0' with '4453'
c Var 'aux1025' order represents '1' with '4454'
-4453 4454 0
c Var 'aux1025' direct represents '1' with '4455'
4453 -4454 4455 0
-4455 4454 0
-4455 -4453 0
c Var 'aux1025' order represents '2' with '4456'
-4454 4456 0
c Var 'aux1025' direct represents '2' with '4457'
4454 -4456 4457 0
-4457 4456 0
-4457 -4454 0
c Var 'aux1025' direct represents '3' with '-4456'
4453 4455 4457 -4456 0
c Encoding variable: aux1026 with domain: int(0..4) (representing constraint (aux1021 + aux1023))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4458'
c Var 'aux1026' direct represents '0' with '4458'
c Var 'aux1026' order represents '1' with '4459'
-4458 4459 0
c Var 'aux1026' direct represents '1' with '4460'
4458 -4459 4460 0
-4460 4459 0
-4460 -4458 0
c Var 'aux1026' order represents '2' with '4461'
-4459 4461 0
c Var 'aux1026' direct represents '2' with '4462'
4459 -4461 4462 0
-4462 4461 0
-4462 -4459 0
c Var 'aux1026' order represents '3' with '4463'
-4461 4463 0
c Var 'aux1026' direct represents '3' with '4464'
4461 -4463 4464 0
-4464 4463 0
-4464 -4461 0
c Var 'aux1026' direct represents '4' with '-4463'
4458 4460 4462 4464 -4463 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4465'
c Var 'aux1027' direct represents '0' with '4465'
c Var 'aux1027' order represents '1' with '4466'
-4465 4466 0
c Var 'aux1027' direct represents '1' with '4467'
4465 -4466 4467 0
-4467 4466 0
-4467 -4465 0
c Var 'aux1027' direct represents '2' with '-4466'
4465 4467 -4466 0
c Encoding variable: aux1028 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4468'
c Var 'aux1028' direct represents '0' with '4468'
c Var 'aux1028' order represents '1' with '4469'
-4468 4469 0
c Var 'aux1028' direct represents '1' with '4470'
4468 -4469 4470 0
-4470 4469 0
-4470 -4468 0
c Var 'aux1028' direct represents '2' with '-4469'
4468 4470 -4469 0
c Encoding variable: aux1029 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4471'
c Var 'aux1029' direct represents '0' with '4471'
c Var 'aux1029' order represents '1' with '4472'
-4471 4472 0
c Var 'aux1029' direct represents '1' with '4473'
4471 -4472 4473 0
-4473 4472 0
-4473 -4471 0
c Var 'aux1029' direct represents '2' with '-4472'
4471 4473 -4472 0
c Encoding variable: aux1030 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4474'
c Var 'aux1030' direct represents '0' with '4474'
c Var 'aux1030' order represents '1' with '4475'
-4474 4475 0
c Var 'aux1030' direct represents '1' with '4476'
4474 -4475 4476 0
-4476 4475 0
-4476 -4474 0
c Var 'aux1030' direct represents '2' with '-4475'
4474 4476 -4475 0
c Encoding variable: aux1031 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1030))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4477'
c Var 'aux1031' direct represents '0' with '4477'
c Var 'aux1031' order represents '1' with '4478'
-4477 4478 0
c Var 'aux1031' direct represents '1' with '4479'
4477 -4478 4479 0
-4479 4478 0
-4479 -4477 0
c Var 'aux1031' order represents '2' with '4480'
-4478 4480 0
c Var 'aux1031' direct represents '2' with '4481'
4478 -4480 4481 0
-4481 4480 0
-4481 -4478 0
c Var 'aux1031' direct represents '3' with '-4480'
4477 4479 4481 -4480 0
c Encoding variable: aux1032 with domain: int(0..4) (representing constraint (aux1027 + aux1029))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4482'
c Var 'aux1032' direct represents '0' with '4482'
c Var 'aux1032' order represents '1' with '4483'
-4482 4483 0
c Var 'aux1032' direct represents '1' with '4484'
4482 -4483 4484 0
-4484 4483 0
-4484 -4482 0
c Var 'aux1032' order represents '2' with '4485'
-4483 4485 0
c Var 'aux1032' direct represents '2' with '4486'
4483 -4485 4486 0
-4486 4485 0
-4486 -4483 0
c Var 'aux1032' order represents '3' with '4487'
-4485 4487 0
c Var 'aux1032' direct represents '3' with '4488'
4485 -4487 4488 0
-4488 4487 0
-4488 -4485 0
c Var 'aux1032' direct represents '4' with '-4487'
4482 4484 4486 4488 -4487 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4489'
c Var 'aux1033' direct represents '0' with '4489'
c Var 'aux1033' order represents '1' with '4490'
-4489 4490 0
c Var 'aux1033' direct represents '1' with '4491'
4489 -4490 4491 0
-4491 4490 0
-4491 -4489 0
c Var 'aux1033' direct represents '2' with '-4490'
4489 4491 -4490 0
c Encoding variable: aux1034 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4492'
c Var 'aux1034' direct represents '0' with '4492'
c Var 'aux1034' order represents '1' with '4493'
-4492 4493 0
c Var 'aux1034' direct represents '1' with '4494'
4492 -4493 4494 0
-4494 4493 0
-4494 -4492 0
c Var 'aux1034' direct represents '2' with '-4493'
4492 4494 -4493 0
c Encoding variable: aux1035 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4495'
c Var 'aux1035' direct represents '0' with '4495'
c Var 'aux1035' order represents '1' with '4496'
-4495 4496 0
c Var 'aux1035' direct represents '1' with '4497'
4495 -4496 4497 0
-4497 4496 0
-4497 -4495 0
c Var 'aux1035' direct represents '2' with '-4496'
4495 4497 -4496 0
c Encoding variable: aux1036 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4498'
c Var 'aux1036' direct represents '0' with '4498'
c Var 'aux1036' order represents '1' with '4499'
-4498 4499 0
c Var 'aux1036' direct represents '1' with '4500'
4498 -4499 4500 0
-4500 4499 0
-4500 -4498 0
c Var 'aux1036' direct represents '2' with '-4499'
4498 4500 -4499 0
c Encoding variable: aux1037 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1036))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4501'
c Var 'aux1037' direct represents '0' with '4501'
c Var 'aux1037' order represents '1' with '4502'
-4501 4502 0
c Var 'aux1037' direct represents '1' with '4503'
4501 -4502 4503 0
-4503 4502 0
-4503 -4501 0
c Var 'aux1037' order represents '2' with '4504'
-4502 4504 0
c Var 'aux1037' direct represents '2' with '4505'
4502 -4504 4505 0
-4505 4504 0
-4505 -4502 0
c Var 'aux1037' direct represents '3' with '-4504'
4501 4503 4505 -4504 0
c Encoding variable: aux1038 with domain: int(0..4) (representing constraint (aux1033 + aux1035))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4506'
c Var 'aux1038' direct represents '0' with '4506'
c Var 'aux1038' order represents '1' with '4507'
-4506 4507 0
c Var 'aux1038' direct represents '1' with '4508'
4506 -4507 4508 0
-4508 4507 0
-4508 -4506 0
c Var 'aux1038' order represents '2' with '4509'
-4507 4509 0
c Var 'aux1038' direct represents '2' with '4510'
4507 -4509 4510 0
-4510 4509 0
-4510 -4507 0
c Var 'aux1038' order represents '3' with '4511'
-4509 4511 0
c Var 'aux1038' direct represents '3' with '4512'
4509 -4511 4512 0
-4512 4511 0
-4512 -4509 0
c Var 'aux1038' direct represents '4' with '-4511'
4506 4508 4510 4512 -4511 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4513'
c Var 'aux1039' direct represents '0' with '4513'
c Var 'aux1039' order represents '1' with '4514'
-4513 4514 0
c Var 'aux1039' direct represents '1' with '4515'
4513 -4514 4515 0
-4515 4514 0
-4515 -4513 0
c Var 'aux1039' direct represents '2' with '-4514'
4513 4515 -4514 0
c Encoding variable: aux1040 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4516'
c Var 'aux1040' direct represents '0' with '4516'
c Var 'aux1040' order represents '1' with '4517'
-4516 4517 0
c Var 'aux1040' direct represents '1' with '4518'
4516 -4517 4518 0
-4518 4517 0
-4518 -4516 0
c Var 'aux1040' direct represents '2' with '-4517'
4516 4518 -4517 0
c Encoding variable: aux1041 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4519'
c Var 'aux1041' direct represents '0' with '4519'
c Var 'aux1041' order represents '1' with '4520'
-4519 4520 0
c Var 'aux1041' direct represents '1' with '4521'
4519 -4520 4521 0
-4521 4520 0
-4521 -4519 0
c Var 'aux1041' direct represents '2' with '-4520'
4519 4521 -4520 0
c Encoding variable: aux1042 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4522'
c Var 'aux1042' direct represents '0' with '4522'
c Var 'aux1042' order represents '1' with '4523'
-4522 4523 0
c Var 'aux1042' direct represents '1' with '4524'
4522 -4523 4524 0
-4524 4523 0
-4524 -4522 0
c Var 'aux1042' direct represents '2' with '-4523'
4522 4524 -4523 0
c Encoding variable: aux1043 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1042))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4525'
c Var 'aux1043' direct represents '0' with '4525'
c Var 'aux1043' order represents '1' with '4526'
-4525 4526 0
c Var 'aux1043' direct represents '1' with '4527'
4525 -4526 4527 0
-4527 4526 0
-4527 -4525 0
c Var 'aux1043' order represents '2' with '4528'
-4526 4528 0
c Var 'aux1043' direct represents '2' with '4529'
4526 -4528 4529 0
-4529 4528 0
-4529 -4526 0
c Var 'aux1043' direct represents '3' with '-4528'
4525 4527 4529 -4528 0
c Encoding variable: aux1044 with domain: int(0..4) (representing constraint (aux1039 + aux1041))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4530'
c Var 'aux1044' direct represents '0' with '4530'
c Var 'aux1044' order represents '1' with '4531'
-4530 4531 0
c Var 'aux1044' direct represents '1' with '4532'
4530 -4531 4532 0
-4532 4531 0
-4532 -4530 0
c Var 'aux1044' order represents '2' with '4533'
-4531 4533 0
c Var 'aux1044' direct represents '2' with '4534'
4531 -4533 4534 0
-4534 4533 0
-4534 -4531 0
c Var 'aux1044' order represents '3' with '4535'
-4533 4535 0
c Var 'aux1044' direct represents '3' with '4536'
4533 -4535 4536 0
-4536 4535 0
-4536 -4533 0
c Var 'aux1044' direct represents '4' with '-4535'
4530 4532 4534 4536 -4535 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4537'
c Var 'aux1045' direct represents '0' with '4537'
c Var 'aux1045' order represents '1' with '4538'
-4537 4538 0
c Var 'aux1045' direct represents '1' with '4539'
4537 -4538 4539 0
-4539 4538 0
-4539 -4537 0
c Var 'aux1045' direct represents '2' with '-4538'
4537 4539 -4538 0
c Encoding variable: aux1046 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4540'
c Var 'aux1046' direct represents '0' with '4540'
c Var 'aux1046' order represents '1' with '4541'
-4540 4541 0
c Var 'aux1046' direct represents '1' with '4542'
4540 -4541 4542 0
-4542 4541 0
-4542 -4540 0
c Var 'aux1046' direct represents '2' with '-4541'
4540 4542 -4541 0
c Encoding variable: aux1047 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4543'
c Var 'aux1047' direct represents '0' with '4543'
c Var 'aux1047' order represents '1' with '4544'
-4543 4544 0
c Var 'aux1047' direct represents '1' with '4545'
4543 -4544 4545 0
-4545 4544 0
-4545 -4543 0
c Var 'aux1047' direct represents '2' with '-4544'
4543 4545 -4544 0
c Encoding variable: aux1048 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4546'
c Var 'aux1048' direct represents '0' with '4546'
c Var 'aux1048' order represents '1' with '4547'
-4546 4547 0
c Var 'aux1048' direct represents '1' with '4548'
4546 -4547 4548 0
-4548 4547 0
-4548 -4546 0
c Var 'aux1048' direct represents '2' with '-4547'
4546 4548 -4547 0
c Encoding variable: aux1049 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1048))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4549'
c Var 'aux1049' direct represents '0' with '4549'
c Var 'aux1049' order represents '1' with '4550'
-4549 4550 0
c Var 'aux1049' direct represents '1' with '4551'
4549 -4550 4551 0
-4551 4550 0
-4551 -4549 0
c Var 'aux1049' order represents '2' with '4552'
-4550 4552 0
c Var 'aux1049' direct represents '2' with '4553'
4550 -4552 4553 0
-4553 4552 0
-4553 -4550 0
c Var 'aux1049' direct represents '3' with '-4552'
4549 4551 4553 -4552 0
c Encoding variable: aux1050 with domain: int(0..4) (representing constraint (aux1045 + aux1047))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4554'
c Var 'aux1050' direct represents '0' with '4554'
c Var 'aux1050' order represents '1' with '4555'
-4554 4555 0
c Var 'aux1050' direct represents '1' with '4556'
4554 -4555 4556 0
-4556 4555 0
-4556 -4554 0
c Var 'aux1050' order represents '2' with '4557'
-4555 4557 0
c Var 'aux1050' direct represents '2' with '4558'
4555 -4557 4558 0
-4558 4557 0
-4558 -4555 0
c Var 'aux1050' order represents '3' with '4559'
-4557 4559 0
c Var 'aux1050' direct represents '3' with '4560'
4557 -4559 4560 0
-4560 4559 0
-4560 -4557 0
c Var 'aux1050' direct represents '4' with '-4559'
4554 4556 4558 4560 -4559 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4561'
c Var 'aux1051' direct represents '0' with '4561'
c Var 'aux1051' order represents '1' with '4562'
-4561 4562 0
c Var 'aux1051' direct represents '1' with '4563'
4561 -4562 4563 0
-4563 4562 0
-4563 -4561 0
c Var 'aux1051' direct represents '2' with '-4562'
4561 4563 -4562 0
c Encoding variable: aux1052 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4564'
c Var 'aux1052' direct represents '0' with '4564'
c Var 'aux1052' order represents '1' with '4565'
-4564 4565 0
c Var 'aux1052' direct represents '1' with '4566'
4564 -4565 4566 0
-4566 4565 0
-4566 -4564 0
c Var 'aux1052' direct represents '2' with '-4565'
4564 4566 -4565 0
c Encoding variable: aux1053 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4567'
c Var 'aux1053' direct represents '0' with '4567'
c Var 'aux1053' order represents '1' with '4568'
-4567 4568 0
c Var 'aux1053' direct represents '1' with '4569'
4567 -4568 4569 0
-4569 4568 0
-4569 -4567 0
c Var 'aux1053' direct represents '2' with '-4568'
4567 4569 -4568 0
c Encoding variable: aux1054 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4570'
c Var 'aux1054' direct represents '0' with '4570'
c Var 'aux1054' order represents '1' with '4571'
-4570 4571 0
c Var 'aux1054' direct represents '1' with '4572'
4570 -4571 4572 0
-4572 4571 0
-4572 -4570 0
c Var 'aux1054' direct represents '2' with '-4571'
4570 4572 -4571 0
c Encoding variable: aux1055 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1054))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4573'
c Var 'aux1055' direct represents '0' with '4573'
c Var 'aux1055' order represents '1' with '4574'
-4573 4574 0
c Var 'aux1055' direct represents '1' with '4575'
4573 -4574 4575 0
-4575 4574 0
-4575 -4573 0
c Var 'aux1055' order represents '2' with '4576'
-4574 4576 0
c Var 'aux1055' direct represents '2' with '4577'
4574 -4576 4577 0
-4577 4576 0
-4577 -4574 0
c Var 'aux1055' direct represents '3' with '-4576'
4573 4575 4577 -4576 0
c Encoding variable: aux1056 with domain: int(0..4) (representing constraint (aux1051 + aux1053))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4578'
c Var 'aux1056' direct represents '0' with '4578'
c Var 'aux1056' order represents '1' with '4579'
-4578 4579 0
c Var 'aux1056' direct represents '1' with '4580'
4578 -4579 4580 0
-4580 4579 0
-4580 -4578 0
c Var 'aux1056' order represents '2' with '4581'
-4579 4581 0
c Var 'aux1056' direct represents '2' with '4582'
4579 -4581 4582 0
-4582 4581 0
-4582 -4579 0
c Var 'aux1056' order represents '3' with '4583'
-4581 4583 0
c Var 'aux1056' direct represents '3' with '4584'
4581 -4583 4584 0
-4584 4583 0
-4584 -4581 0
c Var 'aux1056' direct represents '4' with '-4583'
4578 4580 4582 4584 -4583 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4585'
c Var 'aux1057' direct represents '0' with '4585'
c Var 'aux1057' order represents '1' with '4586'
-4585 4586 0
c Var 'aux1057' direct represents '1' with '4587'
4585 -4586 4587 0
-4587 4586 0
-4587 -4585 0
c Var 'aux1057' direct represents '2' with '-4586'
4585 4587 -4586 0
c Encoding variable: aux1058 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4588'
c Var 'aux1058' direct represents '0' with '4588'
c Var 'aux1058' order represents '1' with '4589'
-4588 4589 0
c Var 'aux1058' direct represents '1' with '4590'
4588 -4589 4590 0
-4590 4589 0
-4590 -4588 0
c Var 'aux1058' direct represents '2' with '-4589'
4588 4590 -4589 0
c Encoding variable: aux1059 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4591'
c Var 'aux1059' direct represents '0' with '4591'
c Var 'aux1059' order represents '1' with '4592'
-4591 4592 0
c Var 'aux1059' direct represents '1' with '4593'
4591 -4592 4593 0
-4593 4592 0
-4593 -4591 0
c Var 'aux1059' direct represents '2' with '-4592'
4591 4593 -4592 0
c Encoding variable: aux1060 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4594'
c Var 'aux1060' direct represents '0' with '4594'
c Var 'aux1060' order represents '1' with '4595'
-4594 4595 0
c Var 'aux1060' direct represents '1' with '4596'
4594 -4595 4596 0
-4596 4595 0
-4596 -4594 0
c Var 'aux1060' direct represents '2' with '-4595'
4594 4596 -4595 0
c Encoding variable: aux1061 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1060))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4597'
c Var 'aux1061' direct represents '0' with '4597'
c Var 'aux1061' order represents '1' with '4598'
-4597 4598 0
c Var 'aux1061' direct represents '1' with '4599'
4597 -4598 4599 0
-4599 4598 0
-4599 -4597 0
c Var 'aux1061' order represents '2' with '4600'
-4598 4600 0
c Var 'aux1061' direct represents '2' with '4601'
4598 -4600 4601 0
-4601 4600 0
-4601 -4598 0
c Var 'aux1061' direct represents '3' with '-4600'
4597 4599 4601 -4600 0
c Encoding variable: aux1062 with domain: int(0..4) (representing constraint (aux1057 + aux1059))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4602'
c Var 'aux1062' direct represents '0' with '4602'
c Var 'aux1062' order represents '1' with '4603'
-4602 4603 0
c Var 'aux1062' direct represents '1' with '4604'
4602 -4603 4604 0
-4604 4603 0
-4604 -4602 0
c Var 'aux1062' order represents '2' with '4605'
-4603 4605 0
c Var 'aux1062' direct represents '2' with '4606'
4603 -4605 4606 0
-4606 4605 0
-4606 -4603 0
c Var 'aux1062' order represents '3' with '4607'
-4605 4607 0
c Var 'aux1062' direct represents '3' with '4608'
4605 -4607 4608 0
-4608 4607 0
-4608 -4605 0
c Var 'aux1062' direct represents '4' with '-4607'
4602 4604 4606 4608 -4607 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4609'
c Var 'aux1063' direct represents '0' with '4609'
c Var 'aux1063' order represents '1' with '4610'
-4609 4610 0
c Var 'aux1063' direct represents '1' with '4611'
4609 -4610 4611 0
-4611 4610 0
-4611 -4609 0
c Var 'aux1063' direct represents '2' with '-4610'
4609 4611 -4610 0
c Encoding variable: aux1064 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4612'
c Var 'aux1064' direct represents '0' with '4612'
c Var 'aux1064' order represents '1' with '4613'
-4612 4613 0
c Var 'aux1064' direct represents '1' with '4614'
4612 -4613 4614 0
-4614 4613 0
-4614 -4612 0
c Var 'aux1064' direct represents '2' with '-4613'
4612 4614 -4613 0
c Encoding variable: aux1065 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4615'
c Var 'aux1065' direct represents '0' with '4615'
c Var 'aux1065' order represents '1' with '4616'
-4615 4616 0
c Var 'aux1065' direct represents '1' with '4617'
4615 -4616 4617 0
-4617 4616 0
-4617 -4615 0
c Var 'aux1065' direct represents '2' with '-4616'
4615 4617 -4616 0
c Encoding variable: aux1066 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4618'
c Var 'aux1066' direct represents '0' with '4618'
c Var 'aux1066' order represents '1' with '4619'
-4618 4619 0
c Var 'aux1066' direct represents '1' with '4620'
4618 -4619 4620 0
-4620 4619 0
-4620 -4618 0
c Var 'aux1066' direct represents '2' with '-4619'
4618 4620 -4619 0
c Encoding variable: aux1067 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1066))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4621'
c Var 'aux1067' direct represents '0' with '4621'
c Var 'aux1067' order represents '1' with '4622'
-4621 4622 0
c Var 'aux1067' direct represents '1' with '4623'
4621 -4622 4623 0
-4623 4622 0
-4623 -4621 0
c Var 'aux1067' order represents '2' with '4624'
-4622 4624 0
c Var 'aux1067' direct represents '2' with '4625'
4622 -4624 4625 0
-4625 4624 0
-4625 -4622 0
c Var 'aux1067' direct represents '3' with '-4624'
4621 4623 4625 -4624 0
c Encoding variable: aux1068 with domain: int(0..4) (representing constraint (aux1063 + aux1065))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4626'
c Var 'aux1068' direct represents '0' with '4626'
c Var 'aux1068' order represents '1' with '4627'
-4626 4627 0
c Var 'aux1068' direct represents '1' with '4628'
4626 -4627 4628 0
-4628 4627 0
-4628 -4626 0
c Var 'aux1068' order represents '2' with '4629'
-4627 4629 0
c Var 'aux1068' direct represents '2' with '4630'
4627 -4629 4630 0
-4630 4629 0
-4630 -4627 0
c Var 'aux1068' order represents '3' with '4631'
-4629 4631 0
c Var 'aux1068' direct represents '3' with '4632'
4629 -4631 4632 0
-4632 4631 0
-4632 -4629 0
c Var 'aux1068' direct represents '4' with '-4631'
4626 4628 4630 4632 -4631 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4633'
c Var 'aux1069' direct represents '0' with '4633'
c Var 'aux1069' order represents '1' with '4634'
-4633 4634 0
c Var 'aux1069' direct represents '1' with '4635'
4633 -4634 4635 0
-4635 4634 0
-4635 -4633 0
c Var 'aux1069' direct represents '2' with '-4634'
4633 4635 -4634 0
c Encoding variable: aux1070 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4636'
c Var 'aux1070' direct represents '0' with '4636'
c Var 'aux1070' order represents '1' with '4637'
-4636 4637 0
c Var 'aux1070' direct represents '1' with '4638'
4636 -4637 4638 0
-4638 4637 0
-4638 -4636 0
c Var 'aux1070' direct represents '2' with '-4637'
4636 4638 -4637 0
c Encoding variable: aux1071 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4639'
c Var 'aux1071' direct represents '0' with '4639'
c Var 'aux1071' order represents '1' with '4640'
-4639 4640 0
c Var 'aux1071' direct represents '1' with '4641'
4639 -4640 4641 0
-4641 4640 0
-4641 -4639 0
c Var 'aux1071' direct represents '2' with '-4640'
4639 4641 -4640 0
c Encoding variable: aux1072 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4642'
c Var 'aux1072' direct represents '0' with '4642'
c Var 'aux1072' order represents '1' with '4643'
-4642 4643 0
c Var 'aux1072' direct represents '1' with '4644'
4642 -4643 4644 0
-4644 4643 0
-4644 -4642 0
c Var 'aux1072' direct represents '2' with '-4643'
4642 4644 -4643 0
c Encoding variable: aux1073 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1072))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4645'
c Var 'aux1073' direct represents '0' with '4645'
c Var 'aux1073' order represents '1' with '4646'
-4645 4646 0
c Var 'aux1073' direct represents '1' with '4647'
4645 -4646 4647 0
-4647 4646 0
-4647 -4645 0
c Var 'aux1073' order represents '2' with '4648'
-4646 4648 0
c Var 'aux1073' direct represents '2' with '4649'
4646 -4648 4649 0
-4649 4648 0
-4649 -4646 0
c Var 'aux1073' direct represents '3' with '-4648'
4645 4647 4649 -4648 0
c Encoding variable: aux1074 with domain: int(0..4) (representing constraint (aux1069 + aux1071))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4650'
c Var 'aux1074' direct represents '0' with '4650'
c Var 'aux1074' order represents '1' with '4651'
-4650 4651 0
c Var 'aux1074' direct represents '1' with '4652'
4650 -4651 4652 0
-4652 4651 0
-4652 -4650 0
c Var 'aux1074' order represents '2' with '4653'
-4651 4653 0
c Var 'aux1074' direct represents '2' with '4654'
4651 -4653 4654 0
-4654 4653 0
-4654 -4651 0
c Var 'aux1074' order represents '3' with '4655'
-4653 4655 0
c Var 'aux1074' direct represents '3' with '4656'
4653 -4655 4656 0
-4656 4655 0
-4656 -4653 0
c Var 'aux1074' direct represents '4' with '-4655'
4650 4652 4654 4656 -4655 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4657'
c Var 'aux1075' direct represents '0' with '4657'
c Var 'aux1075' order represents '1' with '4658'
-4657 4658 0
c Var 'aux1075' direct represents '1' with '4659'
4657 -4658 4659 0
-4659 4658 0
-4659 -4657 0
c Var 'aux1075' direct represents '2' with '-4658'
4657 4659 -4658 0
c Encoding variable: aux1076 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4660'
c Var 'aux1076' direct represents '0' with '4660'
c Var 'aux1076' order represents '1' with '4661'
-4660 4661 0
c Var 'aux1076' direct represents '1' with '4662'
4660 -4661 4662 0
-4662 4661 0
-4662 -4660 0
c Var 'aux1076' direct represents '2' with '-4661'
4660 4662 -4661 0
c Encoding variable: aux1077 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4663'
c Var 'aux1077' direct represents '0' with '4663'
c Var 'aux1077' order represents '1' with '4664'
-4663 4664 0
c Var 'aux1077' direct represents '1' with '4665'
4663 -4664 4665 0
-4665 4664 0
-4665 -4663 0
c Var 'aux1077' direct represents '2' with '-4664'
4663 4665 -4664 0
c Encoding variable: aux1078 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4666'
c Var 'aux1078' direct represents '0' with '4666'
c Var 'aux1078' order represents '1' with '4667'
-4666 4667 0
c Var 'aux1078' direct represents '1' with '4668'
4666 -4667 4668 0
-4668 4667 0
-4668 -4666 0
c Var 'aux1078' direct represents '2' with '-4667'
4666 4668 -4667 0
c Encoding variable: aux1079 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1078))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4669'
c Var 'aux1079' direct represents '0' with '4669'
c Var 'aux1079' order represents '1' with '4670'
-4669 4670 0
c Var 'aux1079' direct represents '1' with '4671'
4669 -4670 4671 0
-4671 4670 0
-4671 -4669 0
c Var 'aux1079' order represents '2' with '4672'
-4670 4672 0
c Var 'aux1079' direct represents '2' with '4673'
4670 -4672 4673 0
-4673 4672 0
-4673 -4670 0
c Var 'aux1079' direct represents '3' with '-4672'
4669 4671 4673 -4672 0
c Encoding variable: aux1080 with domain: int(0..4) (representing constraint (aux1075 + aux1077))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4674'
c Var 'aux1080' direct represents '0' with '4674'
c Var 'aux1080' order represents '1' with '4675'
-4674 4675 0
c Var 'aux1080' direct represents '1' with '4676'
4674 -4675 4676 0
-4676 4675 0
-4676 -4674 0
c Var 'aux1080' order represents '2' with '4677'
-4675 4677 0
c Var 'aux1080' direct represents '2' with '4678'
4675 -4677 4678 0
-4678 4677 0
-4678 -4675 0
c Var 'aux1080' order represents '3' with '4679'
-4677 4679 0
c Var 'aux1080' direct represents '3' with '4680'
4677 -4679 4680 0
-4680 4679 0
-4680 -4677 0
c Var 'aux1080' direct represents '4' with '-4679'
4674 4676 4678 4680 -4679 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4681'
c Var 'aux1081' direct represents '0' with '4681'
c Var 'aux1081' order represents '1' with '4682'
-4681 4682 0
c Var 'aux1081' direct represents '1' with '4683'
4681 -4682 4683 0
-4683 4682 0
-4683 -4681 0
c Var 'aux1081' direct represents '2' with '-4682'
4681 4683 -4682 0
c Encoding variable: aux1082 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4684'
c Var 'aux1082' direct represents '0' with '4684'
c Var 'aux1082' order represents '1' with '4685'
-4684 4685 0
c Var 'aux1082' direct represents '1' with '4686'
4684 -4685 4686 0
-4686 4685 0
-4686 -4684 0
c Var 'aux1082' direct represents '2' with '-4685'
4684 4686 -4685 0
c Encoding variable: aux1083 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4687'
c Var 'aux1083' direct represents '0' with '4687'
c Var 'aux1083' order represents '1' with '4688'
-4687 4688 0
c Var 'aux1083' direct represents '1' with '4689'
4687 -4688 4689 0
-4689 4688 0
-4689 -4687 0
c Var 'aux1083' direct represents '2' with '-4688'
4687 4689 -4688 0
c Encoding variable: aux1084 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4690'
c Var 'aux1084' direct represents '0' with '4690'
c Var 'aux1084' order represents '1' with '4691'
-4690 4691 0
c Var 'aux1084' direct represents '1' with '4692'
4690 -4691 4692 0
-4692 4691 0
-4692 -4690 0
c Var 'aux1084' direct represents '2' with '-4691'
4690 4692 -4691 0
c Encoding variable: aux1085 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1084))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4693'
c Var 'aux1085' direct represents '0' with '4693'
c Var 'aux1085' order represents '1' with '4694'
-4693 4694 0
c Var 'aux1085' direct represents '1' with '4695'
4693 -4694 4695 0
-4695 4694 0
-4695 -4693 0
c Var 'aux1085' order represents '2' with '4696'
-4694 4696 0
c Var 'aux1085' direct represents '2' with '4697'
4694 -4696 4697 0
-4697 4696 0
-4697 -4694 0
c Var 'aux1085' direct represents '3' with '-4696'
4693 4695 4697 -4696 0
c Encoding variable: aux1086 with domain: int(0..4) (representing constraint (aux1081 + aux1083))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4698'
c Var 'aux1086' direct represents '0' with '4698'
c Var 'aux1086' order represents '1' with '4699'
-4698 4699 0
c Var 'aux1086' direct represents '1' with '4700'
4698 -4699 4700 0
-4700 4699 0
-4700 -4698 0
c Var 'aux1086' order represents '2' with '4701'
-4699 4701 0
c Var 'aux1086' direct represents '2' with '4702'
4699 -4701 4702 0
-4702 4701 0
-4702 -4699 0
c Var 'aux1086' order represents '3' with '4703'
-4701 4703 0
c Var 'aux1086' direct represents '3' with '4704'
4701 -4703 4704 0
-4704 4703 0
-4704 -4701 0
c Var 'aux1086' direct represents '4' with '-4703'
4698 4700 4702 4704 -4703 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4705'
c Var 'aux1087' direct represents '0' with '4705'
c Var 'aux1087' order represents '1' with '4706'
-4705 4706 0
c Var 'aux1087' direct represents '1' with '4707'
4705 -4706 4707 0
-4707 4706 0
-4707 -4705 0
c Var 'aux1087' direct represents '2' with '-4706'
4705 4707 -4706 0
c Encoding variable: aux1088 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4708'
c Var 'aux1088' direct represents '0' with '4708'
c Var 'aux1088' order represents '1' with '4709'
-4708 4709 0
c Var 'aux1088' direct represents '1' with '4710'
4708 -4709 4710 0
-4710 4709 0
-4710 -4708 0
c Var 'aux1088' direct represents '2' with '-4709'
4708 4710 -4709 0
c Encoding variable: aux1089 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4711'
c Var 'aux1089' direct represents '0' with '4711'
c Var 'aux1089' order represents '1' with '4712'
-4711 4712 0
c Var 'aux1089' direct represents '1' with '4713'
4711 -4712 4713 0
-4713 4712 0
-4713 -4711 0
c Var 'aux1089' direct represents '2' with '-4712'
4711 4713 -4712 0
c Encoding variable: aux1090 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4714'
c Var 'aux1090' direct represents '0' with '4714'
c Var 'aux1090' order represents '1' with '4715'
-4714 4715 0
c Var 'aux1090' direct represents '1' with '4716'
4714 -4715 4716 0
-4716 4715 0
-4716 -4714 0
c Var 'aux1090' direct represents '2' with '-4715'
4714 4716 -4715 0
c Encoding variable: aux1091 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1090))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4717'
c Var 'aux1091' direct represents '0' with '4717'
c Var 'aux1091' order represents '1' with '4718'
-4717 4718 0
c Var 'aux1091' direct represents '1' with '4719'
4717 -4718 4719 0
-4719 4718 0
-4719 -4717 0
c Var 'aux1091' order represents '2' with '4720'
-4718 4720 0
c Var 'aux1091' direct represents '2' with '4721'
4718 -4720 4721 0
-4721 4720 0
-4721 -4718 0
c Var 'aux1091' direct represents '3' with '-4720'
4717 4719 4721 -4720 0
c Encoding variable: aux1092 with domain: int(0..4) (representing constraint (aux1087 + aux1089))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4722'
c Var 'aux1092' direct represents '0' with '4722'
c Var 'aux1092' order represents '1' with '4723'
-4722 4723 0
c Var 'aux1092' direct represents '1' with '4724'
4722 -4723 4724 0
-4724 4723 0
-4724 -4722 0
c Var 'aux1092' order represents '2' with '4725'
-4723 4725 0
c Var 'aux1092' direct represents '2' with '4726'
4723 -4725 4726 0
-4726 4725 0
-4726 -4723 0
c Var 'aux1092' order represents '3' with '4727'
-4725 4727 0
c Var 'aux1092' direct represents '3' with '4728'
4725 -4727 4728 0
-4728 4727 0
-4728 -4725 0
c Var 'aux1092' direct represents '4' with '-4727'
4722 4724 4726 4728 -4727 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4729'
c Var 'aux1093' direct represents '0' with '4729'
c Var 'aux1093' order represents '1' with '4730'
-4729 4730 0
c Var 'aux1093' direct represents '1' with '4731'
4729 -4730 4731 0
-4731 4730 0
-4731 -4729 0
c Var 'aux1093' direct represents '2' with '-4730'
4729 4731 -4730 0
c Encoding variable: aux1094 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4732'
c Var 'aux1094' direct represents '0' with '4732'
c Var 'aux1094' order represents '1' with '4733'
-4732 4733 0
c Var 'aux1094' direct represents '1' with '4734'
4732 -4733 4734 0
-4734 4733 0
-4734 -4732 0
c Var 'aux1094' direct represents '2' with '-4733'
4732 4734 -4733 0
c Encoding variable: aux1095 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4735'
c Var 'aux1095' direct represents '0' with '4735'
c Var 'aux1095' order represents '1' with '4736'
-4735 4736 0
c Var 'aux1095' direct represents '1' with '4737'
4735 -4736 4737 0
-4737 4736 0
-4737 -4735 0
c Var 'aux1095' direct represents '2' with '-4736'
4735 4737 -4736 0
c Encoding variable: aux1096 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4738'
c Var 'aux1096' direct represents '0' with '4738'
c Var 'aux1096' order represents '1' with '4739'
-4738 4739 0
c Var 'aux1096' direct represents '1' with '4740'
4738 -4739 4740 0
-4740 4739 0
-4740 -4738 0
c Var 'aux1096' direct represents '2' with '-4739'
4738 4740 -4739 0
c Encoding variable: aux1097 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1096))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4741'
c Var 'aux1097' direct represents '0' with '4741'
c Var 'aux1097' order represents '1' with '4742'
-4741 4742 0
c Var 'aux1097' direct represents '1' with '4743'
4741 -4742 4743 0
-4743 4742 0
-4743 -4741 0
c Var 'aux1097' order represents '2' with '4744'
-4742 4744 0
c Var 'aux1097' direct represents '2' with '4745'
4742 -4744 4745 0
-4745 4744 0
-4745 -4742 0
c Var 'aux1097' direct represents '3' with '-4744'
4741 4743 4745 -4744 0
c Encoding variable: aux1098 with domain: int(0..4) (representing constraint (aux1093 + aux1095))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4746'
c Var 'aux1098' direct represents '0' with '4746'
c Var 'aux1098' order represents '1' with '4747'
-4746 4747 0
c Var 'aux1098' direct represents '1' with '4748'
4746 -4747 4748 0
-4748 4747 0
-4748 -4746 0
c Var 'aux1098' order represents '2' with '4749'
-4747 4749 0
c Var 'aux1098' direct represents '2' with '4750'
4747 -4749 4750 0
-4750 4749 0
-4750 -4747 0
c Var 'aux1098' order represents '3' with '4751'
-4749 4751 0
c Var 'aux1098' direct represents '3' with '4752'
4749 -4751 4752 0
-4752 4751 0
-4752 -4749 0
c Var 'aux1098' direct represents '4' with '-4751'
4746 4748 4750 4752 -4751 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4753'
c Var 'aux1099' direct represents '0' with '4753'
c Var 'aux1099' order represents '1' with '4754'
-4753 4754 0
c Var 'aux1099' direct represents '1' with '4755'
4753 -4754 4755 0
-4755 4754 0
-4755 -4753 0
c Var 'aux1099' direct represents '2' with '-4754'
4753 4755 -4754 0
c Encoding variable: aux1100 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4756'
c Var 'aux1100' direct represents '0' with '4756'
c Var 'aux1100' order represents '1' with '4757'
-4756 4757 0
c Var 'aux1100' direct represents '1' with '4758'
4756 -4757 4758 0
-4758 4757 0
-4758 -4756 0
c Var 'aux1100' direct represents '2' with '-4757'
4756 4758 -4757 0
c Encoding variable: aux1101 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4759'
c Var 'aux1101' direct represents '0' with '4759'
c Var 'aux1101' order represents '1' with '4760'
-4759 4760 0
c Var 'aux1101' direct represents '1' with '4761'
4759 -4760 4761 0
-4761 4760 0
-4761 -4759 0
c Var 'aux1101' direct represents '2' with '-4760'
4759 4761 -4760 0
c Encoding variable: aux1102 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4762'
c Var 'aux1102' direct represents '0' with '4762'
c Var 'aux1102' order represents '1' with '4763'
-4762 4763 0
c Var 'aux1102' direct represents '1' with '4764'
4762 -4763 4764 0
-4764 4763 0
-4764 -4762 0
c Var 'aux1102' direct represents '2' with '-4763'
4762 4764 -4763 0
c Encoding variable: aux1103 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1102))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4765'
c Var 'aux1103' direct represents '0' with '4765'
c Var 'aux1103' order represents '1' with '4766'
-4765 4766 0
c Var 'aux1103' direct represents '1' with '4767'
4765 -4766 4767 0
-4767 4766 0
-4767 -4765 0
c Var 'aux1103' order represents '2' with '4768'
-4766 4768 0
c Var 'aux1103' direct represents '2' with '4769'
4766 -4768 4769 0
-4769 4768 0
-4769 -4766 0
c Var 'aux1103' direct represents '3' with '-4768'
4765 4767 4769 -4768 0
c Encoding variable: aux1104 with domain: int(0..4) (representing constraint (aux1099 + aux1101))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4770'
c Var 'aux1104' direct represents '0' with '4770'
c Var 'aux1104' order represents '1' with '4771'
-4770 4771 0
c Var 'aux1104' direct represents '1' with '4772'
4770 -4771 4772 0
-4772 4771 0
-4772 -4770 0
c Var 'aux1104' order represents '2' with '4773'
-4771 4773 0
c Var 'aux1104' direct represents '2' with '4774'
4771 -4773 4774 0
-4774 4773 0
-4774 -4771 0
c Var 'aux1104' order represents '3' with '4775'
-4773 4775 0
c Var 'aux1104' direct represents '3' with '4776'
4773 -4775 4776 0
-4776 4775 0
-4776 -4773 0
c Var 'aux1104' direct represents '4' with '-4775'
4770 4772 4774 4776 -4775 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4777'
c Var 'aux1105' direct represents '0' with '4777'
c Var 'aux1105' order represents '1' with '4778'
-4777 4778 0
c Var 'aux1105' direct represents '1' with '4779'
4777 -4778 4779 0
-4779 4778 0
-4779 -4777 0
c Var 'aux1105' direct represents '2' with '-4778'
4777 4779 -4778 0
c Encoding variable: aux1106 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4780'
c Var 'aux1106' direct represents '0' with '4780'
c Var 'aux1106' order represents '1' with '4781'
-4780 4781 0
c Var 'aux1106' direct represents '1' with '4782'
4780 -4781 4782 0
-4782 4781 0
-4782 -4780 0
c Var 'aux1106' direct represents '2' with '-4781'
4780 4782 -4781 0
c Encoding variable: aux1107 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4783'
c Var 'aux1107' direct represents '0' with '4783'
c Var 'aux1107' order represents '1' with '4784'
-4783 4784 0
c Var 'aux1107' direct represents '1' with '4785'
4783 -4784 4785 0
-4785 4784 0
-4785 -4783 0
c Var 'aux1107' direct represents '2' with '-4784'
4783 4785 -4784 0
c Encoding variable: aux1108 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4786'
c Var 'aux1108' direct represents '0' with '4786'
c Var 'aux1108' order represents '1' with '4787'
-4786 4787 0
c Var 'aux1108' direct represents '1' with '4788'
4786 -4787 4788 0
-4788 4787 0
-4788 -4786 0
c Var 'aux1108' direct represents '2' with '-4787'
4786 4788 -4787 0
c Encoding variable: aux1109 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1108))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4789'
c Var 'aux1109' direct represents '0' with '4789'
c Var 'aux1109' order represents '1' with '4790'
-4789 4790 0
c Var 'aux1109' direct represents '1' with '4791'
4789 -4790 4791 0
-4791 4790 0
-4791 -4789 0
c Var 'aux1109' order represents '2' with '4792'
-4790 4792 0
c Var 'aux1109' direct represents '2' with '4793'
4790 -4792 4793 0
-4793 4792 0
-4793 -4790 0
c Var 'aux1109' direct represents '3' with '-4792'
4789 4791 4793 -4792 0
c Encoding variable: aux1110 with domain: int(0..4) (representing constraint (aux1105 + aux1107))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4794'
c Var 'aux1110' direct represents '0' with '4794'
c Var 'aux1110' order represents '1' with '4795'
-4794 4795 0
c Var 'aux1110' direct represents '1' with '4796'
4794 -4795 4796 0
-4796 4795 0
-4796 -4794 0
c Var 'aux1110' order represents '2' with '4797'
-4795 4797 0
c Var 'aux1110' direct represents '2' with '4798'
4795 -4797 4798 0
-4798 4797 0
-4798 -4795 0
c Var 'aux1110' order represents '3' with '4799'
-4797 4799 0
c Var 'aux1110' direct represents '3' with '4800'
4797 -4799 4800 0
-4800 4799 0
-4800 -4797 0
c Var 'aux1110' direct represents '4' with '-4799'
4794 4796 4798 4800 -4799 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4801'
c Var 'aux1111' direct represents '0' with '4801'
c Var 'aux1111' order represents '1' with '4802'
-4801 4802 0
c Var 'aux1111' direct represents '1' with '4803'
4801 -4802 4803 0
-4803 4802 0
-4803 -4801 0
c Var 'aux1111' direct represents '2' with '-4802'
4801 4803 -4802 0
c Encoding variable: aux1112 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4804'
c Var 'aux1112' direct represents '0' with '4804'
c Var 'aux1112' order represents '1' with '4805'
-4804 4805 0
c Var 'aux1112' direct represents '1' with '4806'
4804 -4805 4806 0
-4806 4805 0
-4806 -4804 0
c Var 'aux1112' direct represents '2' with '-4805'
4804 4806 -4805 0
c Encoding variable: aux1113 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4807'
c Var 'aux1113' direct represents '0' with '4807'
c Var 'aux1113' order represents '1' with '4808'
-4807 4808 0
c Var 'aux1113' direct represents '1' with '4809'
4807 -4808 4809 0
-4809 4808 0
-4809 -4807 0
c Var 'aux1113' direct represents '2' with '-4808'
4807 4809 -4808 0
c Encoding variable: aux1114 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4810'
c Var 'aux1114' direct represents '0' with '4810'
c Var 'aux1114' order represents '1' with '4811'
-4810 4811 0
c Var 'aux1114' direct represents '1' with '4812'
4810 -4811 4812 0
-4812 4811 0
-4812 -4810 0
c Var 'aux1114' direct represents '2' with '-4811'
4810 4812 -4811 0
c Encoding variable: aux1115 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1114))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4813'
c Var 'aux1115' direct represents '0' with '4813'
c Var 'aux1115' order represents '1' with '4814'
-4813 4814 0
c Var 'aux1115' direct represents '1' with '4815'
4813 -4814 4815 0
-4815 4814 0
-4815 -4813 0
c Var 'aux1115' order represents '2' with '4816'
-4814 4816 0
c Var 'aux1115' direct represents '2' with '4817'
4814 -4816 4817 0
-4817 4816 0
-4817 -4814 0
c Var 'aux1115' direct represents '3' with '-4816'
4813 4815 4817 -4816 0
c Encoding variable: aux1116 with domain: int(0..4) (representing constraint (aux1111 + aux1113))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4818'
c Var 'aux1116' direct represents '0' with '4818'
c Var 'aux1116' order represents '1' with '4819'
-4818 4819 0
c Var 'aux1116' direct represents '1' with '4820'
4818 -4819 4820 0
-4820 4819 0
-4820 -4818 0
c Var 'aux1116' order represents '2' with '4821'
-4819 4821 0
c Var 'aux1116' direct represents '2' with '4822'
4819 -4821 4822 0
-4822 4821 0
-4822 -4819 0
c Var 'aux1116' order represents '3' with '4823'
-4821 4823 0
c Var 'aux1116' direct represents '3' with '4824'
4821 -4823 4824 0
-4824 4823 0
-4824 -4821 0
c Var 'aux1116' direct represents '4' with '-4823'
4818 4820 4822 4824 -4823 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4825'
c Var 'aux1117' direct represents '0' with '4825'
c Var 'aux1117' order represents '1' with '4826'
-4825 4826 0
c Var 'aux1117' direct represents '1' with '4827'
4825 -4826 4827 0
-4827 4826 0
-4827 -4825 0
c Var 'aux1117' direct represents '2' with '-4826'
4825 4827 -4826 0
c Encoding variable: aux1118 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4828'
c Var 'aux1118' direct represents '0' with '4828'
c Var 'aux1118' order represents '1' with '4829'
-4828 4829 0
c Var 'aux1118' direct represents '1' with '4830'
4828 -4829 4830 0
-4830 4829 0
-4830 -4828 0
c Var 'aux1118' direct represents '2' with '-4829'
4828 4830 -4829 0
c Encoding variable: aux1119 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4831'
c Var 'aux1119' direct represents '0' with '4831'
c Var 'aux1119' order represents '1' with '4832'
-4831 4832 0
c Var 'aux1119' direct represents '1' with '4833'
4831 -4832 4833 0
-4833 4832 0
-4833 -4831 0
c Var 'aux1119' direct represents '2' with '-4832'
4831 4833 -4832 0
c Encoding variable: aux1120 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4834'
c Var 'aux1120' direct represents '0' with '4834'
c Var 'aux1120' order represents '1' with '4835'
-4834 4835 0
c Var 'aux1120' direct represents '1' with '4836'
4834 -4835 4836 0
-4836 4835 0
-4836 -4834 0
c Var 'aux1120' direct represents '2' with '-4835'
4834 4836 -4835 0
c Encoding variable: aux1121 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1120))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4837'
c Var 'aux1121' direct represents '0' with '4837'
c Var 'aux1121' order represents '1' with '4838'
-4837 4838 0
c Var 'aux1121' direct represents '1' with '4839'
4837 -4838 4839 0
-4839 4838 0
-4839 -4837 0
c Var 'aux1121' order represents '2' with '4840'
-4838 4840 0
c Var 'aux1121' direct represents '2' with '4841'
4838 -4840 4841 0
-4841 4840 0
-4841 -4838 0
c Var 'aux1121' direct represents '3' with '-4840'
4837 4839 4841 -4840 0
c Encoding variable: aux1122 with domain: int(0..4) (representing constraint (aux1117 + aux1119))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4842'
c Var 'aux1122' direct represents '0' with '4842'
c Var 'aux1122' order represents '1' with '4843'
-4842 4843 0
c Var 'aux1122' direct represents '1' with '4844'
4842 -4843 4844 0
-4844 4843 0
-4844 -4842 0
c Var 'aux1122' order represents '2' with '4845'
-4843 4845 0
c Var 'aux1122' direct represents '2' with '4846'
4843 -4845 4846 0
-4846 4845 0
-4846 -4843 0
c Var 'aux1122' order represents '3' with '4847'
-4845 4847 0
c Var 'aux1122' direct represents '3' with '4848'
4845 -4847 4848 0
-4848 4847 0
-4848 -4845 0
c Var 'aux1122' direct represents '4' with '-4847'
4842 4844 4846 4848 -4847 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4849'
c Var 'aux1123' direct represents '0' with '4849'
c Var 'aux1123' order represents '1' with '4850'
-4849 4850 0
c Var 'aux1123' direct represents '1' with '4851'
4849 -4850 4851 0
-4851 4850 0
-4851 -4849 0
c Var 'aux1123' direct represents '2' with '-4850'
4849 4851 -4850 0
c Encoding variable: aux1124 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4852'
c Var 'aux1124' direct represents '0' with '4852'
c Var 'aux1124' order represents '1' with '4853'
-4852 4853 0
c Var 'aux1124' direct represents '1' with '4854'
4852 -4853 4854 0
-4854 4853 0
-4854 -4852 0
c Var 'aux1124' direct represents '2' with '-4853'
4852 4854 -4853 0
c Encoding variable: aux1125 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4855'
c Var 'aux1125' direct represents '0' with '4855'
c Var 'aux1125' order represents '1' with '4856'
-4855 4856 0
c Var 'aux1125' direct represents '1' with '4857'
4855 -4856 4857 0
-4857 4856 0
-4857 -4855 0
c Var 'aux1125' direct represents '2' with '-4856'
4855 4857 -4856 0
c Encoding variable: aux1126 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4858'
c Var 'aux1126' direct represents '0' with '4858'
c Var 'aux1126' order represents '1' with '4859'
-4858 4859 0
c Var 'aux1126' direct represents '1' with '4860'
4858 -4859 4860 0
-4860 4859 0
-4860 -4858 0
c Var 'aux1126' direct represents '2' with '-4859'
4858 4860 -4859 0
c Encoding variable: aux1127 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1126))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4861'
c Var 'aux1127' direct represents '0' with '4861'
c Var 'aux1127' order represents '1' with '4862'
-4861 4862 0
c Var 'aux1127' direct represents '1' with '4863'
4861 -4862 4863 0
-4863 4862 0
-4863 -4861 0
c Var 'aux1127' order represents '2' with '4864'
-4862 4864 0
c Var 'aux1127' direct represents '2' with '4865'
4862 -4864 4865 0
-4865 4864 0
-4865 -4862 0
c Var 'aux1127' direct represents '3' with '-4864'
4861 4863 4865 -4864 0
c Encoding variable: aux1128 with domain: int(0..4) (representing constraint (aux1123 + aux1125))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4866'
c Var 'aux1128' direct represents '0' with '4866'
c Var 'aux1128' order represents '1' with '4867'
-4866 4867 0
c Var 'aux1128' direct represents '1' with '4868'
4866 -4867 4868 0
-4868 4867 0
-4868 -4866 0
c Var 'aux1128' order represents '2' with '4869'
-4867 4869 0
c Var 'aux1128' direct represents '2' with '4870'
4867 -4869 4870 0
-4870 4869 0
-4870 -4867 0
c Var 'aux1128' order represents '3' with '4871'
-4869 4871 0
c Var 'aux1128' direct represents '3' with '4872'
4869 -4871 4872 0
-4872 4871 0
-4872 -4869 0
c Var 'aux1128' direct represents '4' with '-4871'
4866 4868 4870 4872 -4871 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4873'
c Var 'aux1129' direct represents '0' with '4873'
c Var 'aux1129' order represents '1' with '4874'
-4873 4874 0
c Var 'aux1129' direct represents '1' with '4875'
4873 -4874 4875 0
-4875 4874 0
-4875 -4873 0
c Var 'aux1129' direct represents '2' with '-4874'
4873 4875 -4874 0
c Encoding variable: aux1130 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4876'
c Var 'aux1130' direct represents '0' with '4876'
c Var 'aux1130' order represents '1' with '4877'
-4876 4877 0
c Var 'aux1130' direct represents '1' with '4878'
4876 -4877 4878 0
-4878 4877 0
-4878 -4876 0
c Var 'aux1130' direct represents '2' with '-4877'
4876 4878 -4877 0
c Encoding variable: aux1131 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4879'
c Var 'aux1131' direct represents '0' with '4879'
c Var 'aux1131' order represents '1' with '4880'
-4879 4880 0
c Var 'aux1131' direct represents '1' with '4881'
4879 -4880 4881 0
-4881 4880 0
-4881 -4879 0
c Var 'aux1131' direct represents '2' with '-4880'
4879 4881 -4880 0
c Encoding variable: aux1132 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4882'
c Var 'aux1132' direct represents '0' with '4882'
c Var 'aux1132' order represents '1' with '4883'
-4882 4883 0
c Var 'aux1132' direct represents '1' with '4884'
4882 -4883 4884 0
-4884 4883 0
-4884 -4882 0
c Var 'aux1132' direct represents '2' with '-4883'
4882 4884 -4883 0
c Encoding variable: aux1133 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1132))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4885'
c Var 'aux1133' direct represents '0' with '4885'
c Var 'aux1133' order represents '1' with '4886'
-4885 4886 0
c Var 'aux1133' direct represents '1' with '4887'
4885 -4886 4887 0
-4887 4886 0
-4887 -4885 0
c Var 'aux1133' order represents '2' with '4888'
-4886 4888 0
c Var 'aux1133' direct represents '2' with '4889'
4886 -4888 4889 0
-4889 4888 0
-4889 -4886 0
c Var 'aux1133' direct represents '3' with '-4888'
4885 4887 4889 -4888 0
c Encoding variable: aux1134 with domain: int(0..4) (representing constraint (aux1129 + aux1131))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4890'
c Var 'aux1134' direct represents '0' with '4890'
c Var 'aux1134' order represents '1' with '4891'
-4890 4891 0
c Var 'aux1134' direct represents '1' with '4892'
4890 -4891 4892 0
-4892 4891 0
-4892 -4890 0
c Var 'aux1134' order represents '2' with '4893'
-4891 4893 0
c Var 'aux1134' direct represents '2' with '4894'
4891 -4893 4894 0
-4894 4893 0
-4894 -4891 0
c Var 'aux1134' order represents '3' with '4895'
-4893 4895 0
c Var 'aux1134' direct represents '3' with '4896'
4893 -4895 4896 0
-4896 4895 0
-4896 -4893 0
c Var 'aux1134' direct represents '4' with '-4895'
4890 4892 4894 4896 -4895 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4897'
c Var 'aux1135' direct represents '0' with '4897'
c Var 'aux1135' order represents '1' with '4898'
-4897 4898 0
c Var 'aux1135' direct represents '1' with '4899'
4897 -4898 4899 0
-4899 4898 0
-4899 -4897 0
c Var 'aux1135' direct represents '2' with '-4898'
4897 4899 -4898 0
c Encoding variable: aux1136 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4900'
c Var 'aux1136' direct represents '0' with '4900'
c Var 'aux1136' order represents '1' with '4901'
-4900 4901 0
c Var 'aux1136' direct represents '1' with '4902'
4900 -4901 4902 0
-4902 4901 0
-4902 -4900 0
c Var 'aux1136' direct represents '2' with '-4901'
4900 4902 -4901 0
c Encoding variable: aux1137 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4903'
c Var 'aux1137' direct represents '0' with '4903'
c Var 'aux1137' order represents '1' with '4904'
-4903 4904 0
c Var 'aux1137' direct represents '1' with '4905'
4903 -4904 4905 0
-4905 4904 0
-4905 -4903 0
c Var 'aux1137' direct represents '2' with '-4904'
4903 4905 -4904 0
c Encoding variable: aux1138 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4906'
c Var 'aux1138' direct represents '0' with '4906'
c Var 'aux1138' order represents '1' with '4907'
-4906 4907 0
c Var 'aux1138' direct represents '1' with '4908'
4906 -4907 4908 0
-4908 4907 0
-4908 -4906 0
c Var 'aux1138' direct represents '2' with '-4907'
4906 4908 -4907 0
c Encoding variable: aux1139 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1138))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4909'
c Var 'aux1139' direct represents '0' with '4909'
c Var 'aux1139' order represents '1' with '4910'
-4909 4910 0
c Var 'aux1139' direct represents '1' with '4911'
4909 -4910 4911 0
-4911 4910 0
-4911 -4909 0
c Var 'aux1139' order represents '2' with '4912'
-4910 4912 0
c Var 'aux1139' direct represents '2' with '4913'
4910 -4912 4913 0
-4913 4912 0
-4913 -4910 0
c Var 'aux1139' direct represents '3' with '-4912'
4909 4911 4913 -4912 0
c Encoding variable: aux1140 with domain: int(0..4) (representing constraint (aux1135 + aux1137))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4914'
c Var 'aux1140' direct represents '0' with '4914'
c Var 'aux1140' order represents '1' with '4915'
-4914 4915 0
c Var 'aux1140' direct represents '1' with '4916'
4914 -4915 4916 0
-4916 4915 0
-4916 -4914 0
c Var 'aux1140' order represents '2' with '4917'
-4915 4917 0
c Var 'aux1140' direct represents '2' with '4918'
4915 -4917 4918 0
-4918 4917 0
-4918 -4915 0
c Var 'aux1140' order represents '3' with '4919'
-4917 4919 0
c Var 'aux1140' direct represents '3' with '4920'
4917 -4919 4920 0
-4920 4919 0
-4920 -4917 0
c Var 'aux1140' direct represents '4' with '-4919'
4914 4916 4918 4920 -4919 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4921'
c Var 'aux1141' direct represents '0' with '4921'
c Var 'aux1141' order represents '1' with '4922'
-4921 4922 0
c Var 'aux1141' direct represents '1' with '4923'
4921 -4922 4923 0
-4923 4922 0
-4923 -4921 0
c Var 'aux1141' direct represents '2' with '-4922'
4921 4923 -4922 0
c Encoding variable: aux1142 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4924'
c Var 'aux1142' direct represents '0' with '4924'
c Var 'aux1142' order represents '1' with '4925'
-4924 4925 0
c Var 'aux1142' direct represents '1' with '4926'
4924 -4925 4926 0
-4926 4925 0
-4926 -4924 0
c Var 'aux1142' direct represents '2' with '-4925'
4924 4926 -4925 0
c Encoding variable: aux1143 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4927'
c Var 'aux1143' direct represents '0' with '4927'
c Var 'aux1143' order represents '1' with '4928'
-4927 4928 0
c Var 'aux1143' direct represents '1' with '4929'
4927 -4928 4929 0
-4929 4928 0
-4929 -4927 0
c Var 'aux1143' direct represents '2' with '-4928'
4927 4929 -4928 0
c Encoding variable: aux1144 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4930'
c Var 'aux1144' direct represents '0' with '4930'
c Var 'aux1144' order represents '1' with '4931'
-4930 4931 0
c Var 'aux1144' direct represents '1' with '4932'
4930 -4931 4932 0
-4932 4931 0
-4932 -4930 0
c Var 'aux1144' direct represents '2' with '-4931'
4930 4932 -4931 0
c Encoding variable: aux1145 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1144))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4933'
c Var 'aux1145' direct represents '0' with '4933'
c Var 'aux1145' order represents '1' with '4934'
-4933 4934 0
c Var 'aux1145' direct represents '1' with '4935'
4933 -4934 4935 0
-4935 4934 0
-4935 -4933 0
c Var 'aux1145' order represents '2' with '4936'
-4934 4936 0
c Var 'aux1145' direct represents '2' with '4937'
4934 -4936 4937 0
-4937 4936 0
-4937 -4934 0
c Var 'aux1145' direct represents '3' with '-4936'
4933 4935 4937 -4936 0
c Encoding variable: aux1146 with domain: int(0..4) (representing constraint (aux1141 + aux1143))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4938'
c Var 'aux1146' direct represents '0' with '4938'
c Var 'aux1146' order represents '1' with '4939'
-4938 4939 0
c Var 'aux1146' direct represents '1' with '4940'
4938 -4939 4940 0
-4940 4939 0
-4940 -4938 0
c Var 'aux1146' order represents '2' with '4941'
-4939 4941 0
c Var 'aux1146' direct represents '2' with '4942'
4939 -4941 4942 0
-4942 4941 0
-4942 -4939 0
c Var 'aux1146' order represents '3' with '4943'
-4941 4943 0
c Var 'aux1146' direct represents '3' with '4944'
4941 -4943 4944 0
-4944 4943 0
-4944 -4941 0
c Var 'aux1146' direct represents '4' with '-4943'
4938 4940 4942 4944 -4943 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4945'
c Var 'aux1147' direct represents '0' with '4945'
c Var 'aux1147' order represents '1' with '4946'
-4945 4946 0
c Var 'aux1147' direct represents '1' with '4947'
4945 -4946 4947 0
-4947 4946 0
-4947 -4945 0
c Var 'aux1147' direct represents '2' with '-4946'
4945 4947 -4946 0
c Encoding variable: aux1148 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4948'
c Var 'aux1148' direct represents '0' with '4948'
c Var 'aux1148' order represents '1' with '4949'
-4948 4949 0
c Var 'aux1148' direct represents '1' with '4950'
4948 -4949 4950 0
-4950 4949 0
-4950 -4948 0
c Var 'aux1148' direct represents '2' with '-4949'
4948 4950 -4949 0
c Encoding variable: aux1149 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4951'
c Var 'aux1149' direct represents '0' with '4951'
c Var 'aux1149' order represents '1' with '4952'
-4951 4952 0
c Var 'aux1149' direct represents '1' with '4953'
4951 -4952 4953 0
-4953 4952 0
-4953 -4951 0
c Var 'aux1149' direct represents '2' with '-4952'
4951 4953 -4952 0
c Encoding variable: aux1150 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4954'
c Var 'aux1150' direct represents '0' with '4954'
c Var 'aux1150' order represents '1' with '4955'
-4954 4955 0
c Var 'aux1150' direct represents '1' with '4956'
4954 -4955 4956 0
-4956 4955 0
-4956 -4954 0
c Var 'aux1150' direct represents '2' with '-4955'
4954 4956 -4955 0
c Encoding variable: aux1151 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1150))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4957'
c Var 'aux1151' direct represents '0' with '4957'
c Var 'aux1151' order represents '1' with '4958'
-4957 4958 0
c Var 'aux1151' direct represents '1' with '4959'
4957 -4958 4959 0
-4959 4958 0
-4959 -4957 0
c Var 'aux1151' order represents '2' with '4960'
-4958 4960 0
c Var 'aux1151' direct represents '2' with '4961'
4958 -4960 4961 0
-4961 4960 0
-4961 -4958 0
c Var 'aux1151' direct represents '3' with '-4960'
4957 4959 4961 -4960 0
c Encoding variable: aux1152 with domain: int(0..4) (representing constraint (aux1147 + aux1149))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4962'
c Var 'aux1152' direct represents '0' with '4962'
c Var 'aux1152' order represents '1' with '4963'
-4962 4963 0
c Var 'aux1152' direct represents '1' with '4964'
4962 -4963 4964 0
-4964 4963 0
-4964 -4962 0
c Var 'aux1152' order represents '2' with '4965'
-4963 4965 0
c Var 'aux1152' direct represents '2' with '4966'
4963 -4965 4966 0
-4966 4965 0
-4966 -4963 0
c Var 'aux1152' order represents '3' with '4967'
-4965 4967 0
c Var 'aux1152' direct represents '3' with '4968'
4965 -4967 4968 0
-4968 4967 0
-4968 -4965 0
c Var 'aux1152' direct represents '4' with '-4967'
4962 4964 4966 4968 -4967 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4969'
c Var 'aux1153' direct represents '0' with '4969'
c Var 'aux1153' order represents '1' with '4970'
-4969 4970 0
c Var 'aux1153' direct represents '1' with '4971'
4969 -4970 4971 0
-4971 4970 0
-4971 -4969 0
c Var 'aux1153' direct represents '2' with '-4970'
4969 4971 -4970 0
c Encoding variable: aux1154 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4972'
c Var 'aux1154' direct represents '0' with '4972'
c Var 'aux1154' order represents '1' with '4973'
-4972 4973 0
c Var 'aux1154' direct represents '1' with '4974'
4972 -4973 4974 0
-4974 4973 0
-4974 -4972 0
c Var 'aux1154' direct represents '2' with '-4973'
4972 4974 -4973 0
c Encoding variable: aux1155 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4975'
c Var 'aux1155' direct represents '0' with '4975'
c Var 'aux1155' order represents '1' with '4976'
-4975 4976 0
c Var 'aux1155' direct represents '1' with '4977'
4975 -4976 4977 0
-4977 4976 0
-4977 -4975 0
c Var 'aux1155' direct represents '2' with '-4976'
4975 4977 -4976 0
c Encoding variable: aux1156 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4978'
c Var 'aux1156' direct represents '0' with '4978'
c Var 'aux1156' order represents '1' with '4979'
-4978 4979 0
c Var 'aux1156' direct represents '1' with '4980'
4978 -4979 4980 0
-4980 4979 0
-4980 -4978 0
c Var 'aux1156' direct represents '2' with '-4979'
4978 4980 -4979 0
c Encoding variable: aux1157 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1156))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4981'
c Var 'aux1157' direct represents '0' with '4981'
c Var 'aux1157' order represents '1' with '4982'
-4981 4982 0
c Var 'aux1157' direct represents '1' with '4983'
4981 -4982 4983 0
-4983 4982 0
-4983 -4981 0
c Var 'aux1157' order represents '2' with '4984'
-4982 4984 0
c Var 'aux1157' direct represents '2' with '4985'
4982 -4984 4985 0
-4985 4984 0
-4985 -4982 0
c Var 'aux1157' direct represents '3' with '-4984'
4981 4983 4985 -4984 0
c Encoding variable: aux1158 with domain: int(0..4) (representing constraint (aux1153 + aux1155))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4986'
c Var 'aux1158' direct represents '0' with '4986'
c Var 'aux1158' order represents '1' with '4987'
-4986 4987 0
c Var 'aux1158' direct represents '1' with '4988'
4986 -4987 4988 0
-4988 4987 0
-4988 -4986 0
c Var 'aux1158' order represents '2' with '4989'
-4987 4989 0
c Var 'aux1158' direct represents '2' with '4990'
4987 -4989 4990 0
-4990 4989 0
-4990 -4987 0
c Var 'aux1158' order represents '3' with '4991'
-4989 4991 0
c Var 'aux1158' direct represents '3' with '4992'
4989 -4991 4992 0
-4992 4991 0
-4992 -4989 0
c Var 'aux1158' direct represents '4' with '-4991'
4986 4988 4990 4992 -4991 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4993'
c Var 'aux1159' direct represents '0' with '4993'
c Var 'aux1159' order represents '1' with '4994'
-4993 4994 0
c Var 'aux1159' direct represents '1' with '4995'
4993 -4994 4995 0
-4995 4994 0
-4995 -4993 0
c Var 'aux1159' direct represents '2' with '-4994'
4993 4995 -4994 0
c Encoding variable: aux1160 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4996'
c Var 'aux1160' direct represents '0' with '4996'
c Var 'aux1160' order represents '1' with '4997'
-4996 4997 0
c Var 'aux1160' direct represents '1' with '4998'
4996 -4997 4998 0
-4998 4997 0
-4998 -4996 0
c Var 'aux1160' direct represents '2' with '-4997'
4996 4998 -4997 0
c Encoding variable: aux1161 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4999'
c Var 'aux1161' direct represents '0' with '4999'
c Var 'aux1161' order represents '1' with '5000'
-4999 5000 0
c Var 'aux1161' direct represents '1' with '5001'
4999 -5000 5001 0
-5001 5000 0
-5001 -4999 0
c Var 'aux1161' direct represents '2' with '-5000'
4999 5001 -5000 0
c Encoding variable: aux1162 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '5002'
c Var 'aux1162' direct represents '0' with '5002'
c Var 'aux1162' order represents '1' with '5003'
-5002 5003 0
c Var 'aux1162' direct represents '1' with '5004'
5002 -5003 5004 0
-5004 5003 0
-5004 -5002 0
c Var 'aux1162' direct represents '2' with '-5003'
5002 5004 -5003 0
c Encoding variable: aux1163 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1162))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '5005'
c Var 'aux1163' direct represents '0' with '5005'
c Var 'aux1163' order represents '1' with '5006'
-5005 5006 0
c Var 'aux1163' direct represents '1' with '5007'
5005 -5006 5007 0
-5007 5006 0
-5007 -5005 0
c Var 'aux1163' order represents '2' with '5008'
-5006 5008 0
c Var 'aux1163' direct represents '2' with '5009'
5006 -5008 5009 0
-5009 5008 0
-5009 -5006 0
c Var 'aux1163' direct represents '3' with '-5008'
5005 5007 5009 -5008 0
c Encoding variable: aux1164 with domain: int(0..4) (representing constraint (aux1159 + aux1161))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '5010'
c Var 'aux1164' direct represents '0' with '5010'
c Var 'aux1164' order represents '1' with '5011'
-5010 5011 0
c Var 'aux1164' direct represents '1' with '5012'
5010 -5011 5012 0
-5012 5011 0
-5012 -5010 0
c Var 'aux1164' order represents '2' with '5013'
-5011 5013 0
c Var 'aux1164' direct represents '2' with '5014'
5011 -5013 5014 0
-5014 5013 0
-5014 -5011 0
c Var 'aux1164' order represents '3' with '5015'
-5013 5015 0
c Var 'aux1164' direct represents '3' with '5016'
5013 -5015 5016 0
-5016 5015 0
-5016 -5013 0
c Var 'aux1164' direct represents '4' with '-5015'
5010 5012 5014 5016 -5015 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '5017'
c Var 'aux1165' direct represents '0' with '5017'
c Var 'aux1165' order represents '1' with '5018'
-5017 5018 0
c Var 'aux1165' direct represents '1' with '5019'
5017 -5018 5019 0
-5019 5018 0
-5019 -5017 0
c Var 'aux1165' direct represents '2' with '-5018'
5017 5019 -5018 0
c Encoding variable: aux1166 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '5020'
c Var 'aux1166' direct represents '0' with '5020'
c Var 'aux1166' order represents '1' with '5021'
-5020 5021 0
c Var 'aux1166' direct represents '1' with '5022'
5020 -5021 5022 0
-5022 5021 0
-5022 -5020 0
c Var 'aux1166' direct represents '2' with '-5021'
5020 5022 -5021 0
c Encoding variable: aux1167 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '5023'
c Var 'aux1167' direct represents '0' with '5023'
c Var 'aux1167' order represents '1' with '5024'
-5023 5024 0
c Var 'aux1167' direct represents '1' with '5025'
5023 -5024 5025 0
-5025 5024 0
-5025 -5023 0
c Var 'aux1167' direct represents '2' with '-5024'
5023 5025 -5024 0
c Encoding variable: aux1168 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '5026'
c Var 'aux1168' direct represents '0' with '5026'
c Var 'aux1168' order represents '1' with '5027'
-5026 5027 0
c Var 'aux1168' direct represents '1' with '5028'
5026 -5027 5028 0
-5028 5027 0
-5028 -5026 0
c Var 'aux1168' direct represents '2' with '-5027'
5026 5028 -5027 0
c Encoding variable: aux1169 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1168))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '5029'
c Var 'aux1169' direct represents '0' with '5029'
c Var 'aux1169' order represents '1' with '5030'
-5029 5030 0
c Var 'aux1169' direct represents '1' with '5031'
5029 -5030 5031 0
-5031 5030 0
-5031 -5029 0
c Var 'aux1169' order represents '2' with '5032'
-5030 5032 0
c Var 'aux1169' direct represents '2' with '5033'
5030 -5032 5033 0
-5033 5032 0
-5033 -5030 0
c Var 'aux1169' direct represents '3' with '-5032'
5029 5031 5033 -5032 0
c Encoding variable: aux1170 with domain: int(0..4) (representing constraint (aux1165 + aux1167))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '5034'
c Var 'aux1170' direct represents '0' with '5034'
c Var 'aux1170' order represents '1' with '5035'
-5034 5035 0
c Var 'aux1170' direct represents '1' with '5036'
5034 -5035 5036 0
-5036 5035 0
-5036 -5034 0
c Var 'aux1170' order represents '2' with '5037'
-5035 5037 0
c Var 'aux1170' direct represents '2' with '5038'
5035 -5037 5038 0
-5038 5037 0
-5038 -5035 0
c Var 'aux1170' order represents '3' with '5039'
-5037 5039 0
c Var 'aux1170' direct represents '3' with '5040'
5037 -5039 5040 0
-5040 5039 0
-5040 -5037 0
c Var 'aux1170' direct represents '4' with '-5039'
5034 5036 5038 5040 -5039 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '5041'
c Var 'aux1171' direct represents '0' with '5041'
c Var 'aux1171' order represents '1' with '5042'
-5041 5042 0
c Var 'aux1171' direct represents '1' with '5043'
5041 -5042 5043 0
-5043 5042 0
-5043 -5041 0
c Var 'aux1171' direct represents '2' with '-5042'
5041 5043 -5042 0
c Encoding variable: aux1172 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '5044'
c Var 'aux1172' direct represents '0' with '5044'
c Var 'aux1172' order represents '1' with '5045'
-5044 5045 0
c Var 'aux1172' direct represents '1' with '5046'
5044 -5045 5046 0
-5046 5045 0
-5046 -5044 0
c Var 'aux1172' direct represents '2' with '-5045'
5044 5046 -5045 0
c Encoding variable: aux1173 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '5047'
c Var 'aux1173' direct represents '0' with '5047'
c Var 'aux1173' order represents '1' with '5048'
-5047 5048 0
c Var 'aux1173' direct represents '1' with '5049'
5047 -5048 5049 0
-5049 5048 0
-5049 -5047 0
c Var 'aux1173' direct represents '2' with '-5048'
5047 5049 -5048 0
c Encoding variable: aux1174 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '5050'
c Var 'aux1174' direct represents '0' with '5050'
c Var 'aux1174' order represents '1' with '5051'
-5050 5051 0
c Var 'aux1174' direct represents '1' with '5052'
5050 -5051 5052 0
-5052 5051 0
-5052 -5050 0
c Var 'aux1174' direct represents '2' with '-5051'
5050 5052 -5051 0
c Encoding variable: aux1175 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1174))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '5053'
c Var 'aux1175' direct represents '0' with '5053'
c Var 'aux1175' order represents '1' with '5054'
-5053 5054 0
c Var 'aux1175' direct represents '1' with '5055'
5053 -5054 5055 0
-5055 5054 0
-5055 -5053 0
c Var 'aux1175' order represents '2' with '5056'
-5054 5056 0
c Var 'aux1175' direct represents '2' with '5057'
5054 -5056 5057 0
-5057 5056 0
-5057 -5054 0
c Var 'aux1175' direct represents '3' with '-5056'
5053 5055 5057 -5056 0
c Encoding variable: aux1176 with domain: int(0..4) (representing constraint (aux1171 + aux1173))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '5058'
c Var 'aux1176' direct represents '0' with '5058'
c Var 'aux1176' order represents '1' with '5059'
-5058 5059 0
c Var 'aux1176' direct represents '1' with '5060'
5058 -5059 5060 0
-5060 5059 0
-5060 -5058 0
c Var 'aux1176' order represents '2' with '5061'
-5059 5061 0
c Var 'aux1176' direct represents '2' with '5062'
5059 -5061 5062 0
-5062 5061 0
-5062 -5059 0
c Var 'aux1176' order represents '3' with '5063'
-5061 5063 0
c Var 'aux1176' direct represents '3' with '5064'
5061 -5063 5064 0
-5064 5063 0
-5064 -5061 0
c Var 'aux1176' direct represents '4' with '-5063'
5058 5060 5062 5064 -5063 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '5065'
c Var 'aux1177' direct represents '0' with '5065'
c Var 'aux1177' order represents '1' with '5066'
-5065 5066 0
c Var 'aux1177' direct represents '1' with '5067'
5065 -5066 5067 0
-5067 5066 0
-5067 -5065 0
c Var 'aux1177' direct represents '2' with '-5066'
5065 5067 -5066 0
c Encoding variable: aux1178 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '5068'
c Var 'aux1178' direct represents '0' with '5068'
c Var 'aux1178' order represents '1' with '5069'
-5068 5069 0
c Var 'aux1178' direct represents '1' with '5070'
5068 -5069 5070 0
-5070 5069 0
-5070 -5068 0
c Var 'aux1178' direct represents '2' with '-5069'
5068 5070 -5069 0
c Encoding variable: aux1179 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '5071'
c Var 'aux1179' direct represents '0' with '5071'
c Var 'aux1179' order represents '1' with '5072'
-5071 5072 0
c Var 'aux1179' direct represents '1' with '5073'
5071 -5072 5073 0
-5073 5072 0
-5073 -5071 0
c Var 'aux1179' direct represents '2' with '-5072'
5071 5073 -5072 0
c Encoding variable: aux1180 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '5074'
c Var 'aux1180' direct represents '0' with '5074'
c Var 'aux1180' order represents '1' with '5075'
-5074 5075 0
c Var 'aux1180' direct represents '1' with '5076'
5074 -5075 5076 0
-5076 5075 0
-5076 -5074 0
c Var 'aux1180' direct represents '2' with '-5075'
5074 5076 -5075 0
c Encoding variable: aux1181 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1180))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '5077'
c Var 'aux1181' direct represents '0' with '5077'
c Var 'aux1181' order represents '1' with '5078'
-5077 5078 0
c Var 'aux1181' direct represents '1' with '5079'
5077 -5078 5079 0
-5079 5078 0
-5079 -5077 0
c Var 'aux1181' order represents '2' with '5080'
-5078 5080 0
c Var 'aux1181' direct represents '2' with '5081'
5078 -5080 5081 0
-5081 5080 0
-5081 -5078 0
c Var 'aux1181' direct represents '3' with '-5080'
5077 5079 5081 -5080 0
c Encoding variable: aux1182 with domain: int(0..4) (representing constraint (aux1177 + aux1179))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '5082'
c Var 'aux1182' direct represents '0' with '5082'
c Var 'aux1182' order represents '1' with '5083'
-5082 5083 0
c Var 'aux1182' direct represents '1' with '5084'
5082 -5083 5084 0
-5084 5083 0
-5084 -5082 0
c Var 'aux1182' order represents '2' with '5085'
-5083 5085 0
c Var 'aux1182' direct represents '2' with '5086'
5083 -5085 5086 0
-5086 5085 0
-5086 -5083 0
c Var 'aux1182' order represents '3' with '5087'
-5085 5087 0
c Var 'aux1182' direct represents '3' with '5088'
5085 -5087 5088 0
-5088 5087 0
-5088 -5085 0
c Var 'aux1182' direct represents '4' with '-5087'
5082 5084 5086 5088 -5087 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '5089'
c Var 'aux1183' direct represents '0' with '5089'
c Var 'aux1183' order represents '1' with '5090'
-5089 5090 0
c Var 'aux1183' direct represents '1' with '5091'
5089 -5090 5091 0
-5091 5090 0
-5091 -5089 0
c Var 'aux1183' direct represents '2' with '-5090'
5089 5091 -5090 0
c Encoding variable: aux1184 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '5092'
c Var 'aux1184' direct represents '0' with '5092'
c Var 'aux1184' order represents '1' with '5093'
-5092 5093 0
c Var 'aux1184' direct represents '1' with '5094'
5092 -5093 5094 0
-5094 5093 0
-5094 -5092 0
c Var 'aux1184' direct represents '2' with '-5093'
5092 5094 -5093 0
c Encoding variable: aux1185 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '5095'
c Var 'aux1185' direct represents '0' with '5095'
c Var 'aux1185' order represents '1' with '5096'
-5095 5096 0
c Var 'aux1185' direct represents '1' with '5097'
5095 -5096 5097 0
-5097 5096 0
-5097 -5095 0
c Var 'aux1185' direct represents '2' with '-5096'
5095 5097 -5096 0
c Encoding variable: aux1186 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '5098'
c Var 'aux1186' direct represents '0' with '5098'
c Var 'aux1186' order represents '1' with '5099'
-5098 5099 0
c Var 'aux1186' direct represents '1' with '5100'
5098 -5099 5100 0
-5100 5099 0
-5100 -5098 0
c Var 'aux1186' direct represents '2' with '-5099'
5098 5100 -5099 0
c Encoding variable: aux1187 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1186))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '5101'
c Var 'aux1187' direct represents '0' with '5101'
c Var 'aux1187' order represents '1' with '5102'
-5101 5102 0
c Var 'aux1187' direct represents '1' with '5103'
5101 -5102 5103 0
-5103 5102 0
-5103 -5101 0
c Var 'aux1187' order represents '2' with '5104'
-5102 5104 0
c Var 'aux1187' direct represents '2' with '5105'
5102 -5104 5105 0
-5105 5104 0
-5105 -5102 0
c Var 'aux1187' direct represents '3' with '-5104'
5101 5103 5105 -5104 0
c Encoding variable: aux1188 with domain: int(0..4) (representing constraint (aux1183 + aux1185))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '5106'
c Var 'aux1188' direct represents '0' with '5106'
c Var 'aux1188' order represents '1' with '5107'
-5106 5107 0
c Var 'aux1188' direct represents '1' with '5108'
5106 -5107 5108 0
-5108 5107 0
-5108 -5106 0
c Var 'aux1188' order represents '2' with '5109'
-5107 5109 0
c Var 'aux1188' direct represents '2' with '5110'
5107 -5109 5110 0
-5110 5109 0
-5110 -5107 0
c Var 'aux1188' order represents '3' with '5111'
-5109 5111 0
c Var 'aux1188' direct represents '3' with '5112'
5109 -5111 5112 0
-5112 5111 0
-5112 -5109 0
c Var 'aux1188' direct represents '4' with '-5111'
5106 5108 5110 5112 -5111 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '5113'
c Var 'aux1189' direct represents '0' with '5113'
c Var 'aux1189' order represents '1' with '5114'
-5113 5114 0
c Var 'aux1189' direct represents '1' with '5115'
5113 -5114 5115 0
-5115 5114 0
-5115 -5113 0
c Var 'aux1189' direct represents '2' with '-5114'
5113 5115 -5114 0
c Encoding variable: aux1190 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '5116'
c Var 'aux1190' direct represents '0' with '5116'
c Var 'aux1190' order represents '1' with '5117'
-5116 5117 0
c Var 'aux1190' direct represents '1' with '5118'
5116 -5117 5118 0
-5118 5117 0
-5118 -5116 0
c Var 'aux1190' direct represents '2' with '-5117'
5116 5118 -5117 0
c Encoding variable: aux1191 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '5119'
c Var 'aux1191' direct represents '0' with '5119'
c Var 'aux1191' order represents '1' with '5120'
-5119 5120 0
c Var 'aux1191' direct represents '1' with '5121'
5119 -5120 5121 0
-5121 5120 0
-5121 -5119 0
c Var 'aux1191' direct represents '2' with '-5120'
5119 5121 -5120 0
c Encoding variable: aux1192 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '5122'
c Var 'aux1192' direct represents '0' with '5122'
c Var 'aux1192' order represents '1' with '5123'
-5122 5123 0
c Var 'aux1192' direct represents '1' with '5124'
5122 -5123 5124 0
-5124 5123 0
-5124 -5122 0
c Var 'aux1192' direct represents '2' with '-5123'
5122 5124 -5123 0
c Encoding variable: aux1193 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1192))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '5125'
c Var 'aux1193' direct represents '0' with '5125'
c Var 'aux1193' order represents '1' with '5126'
-5125 5126 0
c Var 'aux1193' direct represents '1' with '5127'
5125 -5126 5127 0
-5127 5126 0
-5127 -5125 0
c Var 'aux1193' order represents '2' with '5128'
-5126 5128 0
c Var 'aux1193' direct represents '2' with '5129'
5126 -5128 5129 0
-5129 5128 0
-5129 -5126 0
c Var 'aux1193' direct represents '3' with '-5128'
5125 5127 5129 -5128 0
c Encoding variable: aux1194 with domain: int(0..4) (representing constraint (aux1189 + aux1191))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '5130'
c Var 'aux1194' direct represents '0' with '5130'
c Var 'aux1194' order represents '1' with '5131'
-5130 5131 0
c Var 'aux1194' direct represents '1' with '5132'
5130 -5131 5132 0
-5132 5131 0
-5132 -5130 0
c Var 'aux1194' order represents '2' with '5133'
-5131 5133 0
c Var 'aux1194' direct represents '2' with '5134'
5131 -5133 5134 0
-5134 5133 0
-5134 -5131 0
c Var 'aux1194' order represents '3' with '5135'
-5133 5135 0
c Var 'aux1194' direct represents '3' with '5136'
5133 -5135 5136 0
-5136 5135 0
-5136 -5133 0
c Var 'aux1194' direct represents '4' with '-5135'
5130 5132 5134 5136 -5135 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '5137'
c Var 'aux1195' direct represents '0' with '5137'
c Var 'aux1195' order represents '1' with '5138'
-5137 5138 0
c Var 'aux1195' direct represents '1' with '5139'
5137 -5138 5139 0
-5139 5138 0
-5139 -5137 0
c Var 'aux1195' direct represents '2' with '-5138'
5137 5139 -5138 0
c Encoding variable: aux1196 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '5140'
c Var 'aux1196' direct represents '0' with '5140'
c Var 'aux1196' order represents '1' with '5141'
-5140 5141 0
c Var 'aux1196' direct represents '1' with '5142'
5140 -5141 5142 0
-5142 5141 0
-5142 -5140 0
c Var 'aux1196' direct represents '2' with '-5141'
5140 5142 -5141 0
c Encoding variable: aux1197 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '5143'
c Var 'aux1197' direct represents '0' with '5143'
c Var 'aux1197' order represents '1' with '5144'
-5143 5144 0
c Var 'aux1197' direct represents '1' with '5145'
5143 -5144 5145 0
-5145 5144 0
-5145 -5143 0
c Var 'aux1197' direct represents '2' with '-5144'
5143 5145 -5144 0
c Encoding variable: aux1198 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '5146'
c Var 'aux1198' direct represents '0' with '5146'
c Var 'aux1198' order represents '1' with '5147'
-5146 5147 0
c Var 'aux1198' direct represents '1' with '5148'
5146 -5147 5148 0
-5148 5147 0
-5148 -5146 0
c Var 'aux1198' direct represents '2' with '-5147'
5146 5148 -5147 0
c Encoding variable: aux1199 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1198))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '5149'
c Var 'aux1199' direct represents '0' with '5149'
c Var 'aux1199' order represents '1' with '5150'
-5149 5150 0
c Var 'aux1199' direct represents '1' with '5151'
5149 -5150 5151 0
-5151 5150 0
-5151 -5149 0
c Var 'aux1199' order represents '2' with '5152'
-5150 5152 0
c Var 'aux1199' direct represents '2' with '5153'
5150 -5152 5153 0
-5153 5152 0
-5153 -5150 0
c Var 'aux1199' direct represents '3' with '-5152'
5149 5151 5153 -5152 0
c Encoding variable: aux1200 with domain: int(0..4) (representing constraint (aux1195 + aux1197))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '5154'
c Var 'aux1200' direct represents '0' with '5154'
c Var 'aux1200' order represents '1' with '5155'
-5154 5155 0
c Var 'aux1200' direct represents '1' with '5156'
5154 -5155 5156 0
-5156 5155 0
-5156 -5154 0
c Var 'aux1200' order represents '2' with '5157'
-5155 5157 0
c Var 'aux1200' direct represents '2' with '5158'
5155 -5157 5158 0
-5158 5157 0
-5158 -5155 0
c Var 'aux1200' order represents '3' with '5159'
-5157 5159 0
c Var 'aux1200' direct represents '3' with '5160'
5157 -5159 5160 0
-5160 5159 0
-5160 -5157 0
c Var 'aux1200' direct represents '4' with '-5159'
5154 5156 5158 5160 -5159 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '5161'
c Var 'aux1201' direct represents '0' with '5161'
c Var 'aux1201' order represents '1' with '5162'
-5161 5162 0
c Var 'aux1201' direct represents '1' with '5163'
5161 -5162 5163 0
-5163 5162 0
-5163 -5161 0
c Var 'aux1201' direct represents '2' with '-5162'
5161 5163 -5162 0
c Encoding variable: aux1202 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '5164'
c Var 'aux1202' direct represents '0' with '5164'
c Var 'aux1202' order represents '1' with '5165'
-5164 5165 0
c Var 'aux1202' direct represents '1' with '5166'
5164 -5165 5166 0
-5166 5165 0
-5166 -5164 0
c Var 'aux1202' direct represents '2' with '-5165'
5164 5166 -5165 0
c Encoding variable: aux1203 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '5167'
c Var 'aux1203' direct represents '0' with '5167'
c Var 'aux1203' order represents '1' with '5168'
-5167 5168 0
c Var 'aux1203' direct represents '1' with '5169'
5167 -5168 5169 0
-5169 5168 0
-5169 -5167 0
c Var 'aux1203' direct represents '2' with '-5168'
5167 5169 -5168 0
c Encoding variable: aux1204 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '5170'
c Var 'aux1204' direct represents '0' with '5170'
c Var 'aux1204' order represents '1' with '5171'
-5170 5171 0
c Var 'aux1204' direct represents '1' with '5172'
5170 -5171 5172 0
-5172 5171 0
-5172 -5170 0
c Var 'aux1204' direct represents '2' with '-5171'
5170 5172 -5171 0
c Encoding variable: aux1205 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1204))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '5173'
c Var 'aux1205' direct represents '0' with '5173'
c Var 'aux1205' order represents '1' with '5174'
-5173 5174 0
c Var 'aux1205' direct represents '1' with '5175'
5173 -5174 5175 0
-5175 5174 0
-5175 -5173 0
c Var 'aux1205' order represents '2' with '5176'
-5174 5176 0
c Var 'aux1205' direct represents '2' with '5177'
5174 -5176 5177 0
-5177 5176 0
-5177 -5174 0
c Var 'aux1205' direct represents '3' with '-5176'
5173 5175 5177 -5176 0
c Encoding variable: aux1206 with domain: int(0..4) (representing constraint (aux1201 + aux1203))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '5178'
c Var 'aux1206' direct represents '0' with '5178'
c Var 'aux1206' order represents '1' with '5179'
-5178 5179 0
c Var 'aux1206' direct represents '1' with '5180'
5178 -5179 5180 0
-5180 5179 0
-5180 -5178 0
c Var 'aux1206' order represents '2' with '5181'
-5179 5181 0
c Var 'aux1206' direct represents '2' with '5182'
5179 -5181 5182 0
-5182 5181 0
-5182 -5179 0
c Var 'aux1206' order represents '3' with '5183'
-5181 5183 0
c Var 'aux1206' direct represents '3' with '5184'
5181 -5183 5184 0
-5184 5183 0
-5184 -5181 0
c Var 'aux1206' direct represents '4' with '-5183'
5178 5180 5182 5184 -5183 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '5185'
c Var 'aux1207' direct represents '0' with '5185'
c Var 'aux1207' order represents '1' with '5186'
-5185 5186 0
c Var 'aux1207' direct represents '1' with '5187'
5185 -5186 5187 0
-5187 5186 0
-5187 -5185 0
c Var 'aux1207' direct represents '2' with '-5186'
5185 5187 -5186 0
c Encoding variable: aux1208 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '5188'
c Var 'aux1208' direct represents '0' with '5188'
c Var 'aux1208' order represents '1' with '5189'
-5188 5189 0
c Var 'aux1208' direct represents '1' with '5190'
5188 -5189 5190 0
-5190 5189 0
-5190 -5188 0
c Var 'aux1208' direct represents '2' with '-5189'
5188 5190 -5189 0
c Encoding variable: aux1209 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '5191'
c Var 'aux1209' direct represents '0' with '5191'
c Var 'aux1209' order represents '1' with '5192'
-5191 5192 0
c Var 'aux1209' direct represents '1' with '5193'
5191 -5192 5193 0
-5193 5192 0
-5193 -5191 0
c Var 'aux1209' direct represents '2' with '-5192'
5191 5193 -5192 0
c Encoding variable: aux1210 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '5194'
c Var 'aux1210' direct represents '0' with '5194'
c Var 'aux1210' order represents '1' with '5195'
-5194 5195 0
c Var 'aux1210' direct represents '1' with '5196'
5194 -5195 5196 0
-5196 5195 0
-5196 -5194 0
c Var 'aux1210' direct represents '2' with '-5195'
5194 5196 -5195 0
c Encoding variable: aux1211 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1210))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '5197'
c Var 'aux1211' direct represents '0' with '5197'
c Var 'aux1211' order represents '1' with '5198'
-5197 5198 0
c Var 'aux1211' direct represents '1' with '5199'
5197 -5198 5199 0
-5199 5198 0
-5199 -5197 0
c Var 'aux1211' order represents '2' with '5200'
-5198 5200 0
c Var 'aux1211' direct represents '2' with '5201'
5198 -5200 5201 0
-5201 5200 0
-5201 -5198 0
c Var 'aux1211' direct represents '3' with '-5200'
5197 5199 5201 -5200 0
c Encoding variable: aux1212 with domain: int(0..4) (representing constraint (aux1207 + aux1209))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '5202'
c Var 'aux1212' direct represents '0' with '5202'
c Var 'aux1212' order represents '1' with '5203'
-5202 5203 0
c Var 'aux1212' direct represents '1' with '5204'
5202 -5203 5204 0
-5204 5203 0
-5204 -5202 0
c Var 'aux1212' order represents '2' with '5205'
-5203 5205 0
c Var 'aux1212' direct represents '2' with '5206'
5203 -5205 5206 0
-5206 5205 0
-5206 -5203 0
c Var 'aux1212' order represents '3' with '5207'
-5205 5207 0
c Var 'aux1212' direct represents '3' with '5208'
5205 -5207 5208 0
-5208 5207 0
-5208 -5205 0
c Var 'aux1212' direct represents '4' with '-5207'
5202 5204 5206 5208 -5207 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '5209'
c Var 'aux1213' direct represents '0' with '5209'
c Var 'aux1213' order represents '1' with '5210'
-5209 5210 0
c Var 'aux1213' direct represents '1' with '5211'
5209 -5210 5211 0
-5211 5210 0
-5211 -5209 0
c Var 'aux1213' direct represents '2' with '-5210'
5209 5211 -5210 0
c Encoding variable: aux1214 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '5212'
c Var 'aux1214' direct represents '0' with '5212'
c Var 'aux1214' order represents '1' with '5213'
-5212 5213 0
c Var 'aux1214' direct represents '1' with '5214'
5212 -5213 5214 0
-5214 5213 0
-5214 -5212 0
c Var 'aux1214' direct represents '2' with '-5213'
5212 5214 -5213 0
c Encoding variable: aux1215 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '5215'
c Var 'aux1215' direct represents '0' with '5215'
c Var 'aux1215' order represents '1' with '5216'
-5215 5216 0
c Var 'aux1215' direct represents '1' with '5217'
5215 -5216 5217 0
-5217 5216 0
-5217 -5215 0
c Var 'aux1215' direct represents '2' with '-5216'
5215 5217 -5216 0
c Encoding variable: aux1216 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '5218'
c Var 'aux1216' direct represents '0' with '5218'
c Var 'aux1216' order represents '1' with '5219'
-5218 5219 0
c Var 'aux1216' direct represents '1' with '5220'
5218 -5219 5220 0
-5220 5219 0
-5220 -5218 0
c Var 'aux1216' direct represents '2' with '-5219'
5218 5220 -5219 0
c Encoding variable: aux1217 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1216))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '5221'
c Var 'aux1217' direct represents '0' with '5221'
c Var 'aux1217' order represents '1' with '5222'
-5221 5222 0
c Var 'aux1217' direct represents '1' with '5223'
5221 -5222 5223 0
-5223 5222 0
-5223 -5221 0
c Var 'aux1217' order represents '2' with '5224'
-5222 5224 0
c Var 'aux1217' direct represents '2' with '5225'
5222 -5224 5225 0
-5225 5224 0
-5225 -5222 0
c Var 'aux1217' direct represents '3' with '-5224'
5221 5223 5225 -5224 0
c Encoding variable: aux1218 with domain: int(0..4) (representing constraint (aux1213 + aux1215))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '5226'
c Var 'aux1218' direct represents '0' with '5226'
c Var 'aux1218' order represents '1' with '5227'
-5226 5227 0
c Var 'aux1218' direct represents '1' with '5228'
5226 -5227 5228 0
-5228 5227 0
-5228 -5226 0
c Var 'aux1218' order represents '2' with '5229'
-5227 5229 0
c Var 'aux1218' direct represents '2' with '5230'
5227 -5229 5230 0
-5230 5229 0
-5230 -5227 0
c Var 'aux1218' order represents '3' with '5231'
-5229 5231 0
c Var 'aux1218' direct represents '3' with '5232'
5229 -5231 5232 0
-5232 5231 0
-5232 -5229 0
c Var 'aux1218' direct represents '4' with '-5231'
5226 5228 5230 5232 -5231 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '5233'
c Var 'aux1219' direct represents '0' with '5233'
c Var 'aux1219' order represents '1' with '5234'
-5233 5234 0
c Var 'aux1219' direct represents '1' with '5235'
5233 -5234 5235 0
-5235 5234 0
-5235 -5233 0
c Var 'aux1219' direct represents '2' with '-5234'
5233 5235 -5234 0
c Encoding variable: aux1220 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '5236'
c Var 'aux1220' direct represents '0' with '5236'
c Var 'aux1220' order represents '1' with '5237'
-5236 5237 0
c Var 'aux1220' direct represents '1' with '5238'
5236 -5237 5238 0
-5238 5237 0
-5238 -5236 0
c Var 'aux1220' direct represents '2' with '-5237'
5236 5238 -5237 0
c Encoding variable: aux1221 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '5239'
c Var 'aux1221' direct represents '0' with '5239'
c Var 'aux1221' order represents '1' with '5240'
-5239 5240 0
c Var 'aux1221' direct represents '1' with '5241'
5239 -5240 5241 0
-5241 5240 0
-5241 -5239 0
c Var 'aux1221' direct represents '2' with '-5240'
5239 5241 -5240 0
c Encoding variable: aux1222 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '5242'
c Var 'aux1222' direct represents '0' with '5242'
c Var 'aux1222' order represents '1' with '5243'
-5242 5243 0
c Var 'aux1222' direct represents '1' with '5244'
5242 -5243 5244 0
-5244 5243 0
-5244 -5242 0
c Var 'aux1222' direct represents '2' with '-5243'
5242 5244 -5243 0
c Encoding variable: aux1223 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1222))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '5245'
c Var 'aux1223' direct represents '0' with '5245'
c Var 'aux1223' order represents '1' with '5246'
-5245 5246 0
c Var 'aux1223' direct represents '1' with '5247'
5245 -5246 5247 0
-5247 5246 0
-5247 -5245 0
c Var 'aux1223' order represents '2' with '5248'
-5246 5248 0
c Var 'aux1223' direct represents '2' with '5249'
5246 -5248 5249 0
-5249 5248 0
-5249 -5246 0
c Var 'aux1223' direct represents '3' with '-5248'
5245 5247 5249 -5248 0
c Encoding variable: aux1224 with domain: int(0..4) (representing constraint (aux1219 + aux1221))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '5250'
c Var 'aux1224' direct represents '0' with '5250'
c Var 'aux1224' order represents '1' with '5251'
-5250 5251 0
c Var 'aux1224' direct represents '1' with '5252'
5250 -5251 5252 0
-5252 5251 0
-5252 -5250 0
c Var 'aux1224' order represents '2' with '5253'
-5251 5253 0
c Var 'aux1224' direct represents '2' with '5254'
5251 -5253 5254 0
-5254 5253 0
-5254 -5251 0
c Var 'aux1224' order represents '3' with '5255'
-5253 5255 0
c Var 'aux1224' direct represents '3' with '5256'
5253 -5255 5256 0
-5256 5255 0
-5256 -5253 0
c Var 'aux1224' direct represents '4' with '-5255'
5250 5252 5254 5256 -5255 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '5257'
c Var 'aux1225' direct represents '0' with '5257'
c Var 'aux1225' order represents '1' with '5258'
-5257 5258 0
c Var 'aux1225' direct represents '1' with '5259'
5257 -5258 5259 0
-5259 5258 0
-5259 -5257 0
c Var 'aux1225' direct represents '2' with '-5258'
5257 5259 -5258 0
c Encoding variable: aux1226 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '5260'
c Var 'aux1226' direct represents '0' with '5260'
c Var 'aux1226' order represents '1' with '5261'
-5260 5261 0
c Var 'aux1226' direct represents '1' with '5262'
5260 -5261 5262 0
-5262 5261 0
-5262 -5260 0
c Var 'aux1226' direct represents '2' with '-5261'
5260 5262 -5261 0
c Encoding variable: aux1227 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '5263'
c Var 'aux1227' direct represents '0' with '5263'
c Var 'aux1227' order represents '1' with '5264'
-5263 5264 0
c Var 'aux1227' direct represents '1' with '5265'
5263 -5264 5265 0
-5265 5264 0
-5265 -5263 0
c Var 'aux1227' direct represents '2' with '-5264'
5263 5265 -5264 0
c Encoding variable: aux1228 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '5266'
c Var 'aux1228' direct represents '0' with '5266'
c Var 'aux1228' order represents '1' with '5267'
-5266 5267 0
c Var 'aux1228' direct represents '1' with '5268'
5266 -5267 5268 0
-5268 5267 0
-5268 -5266 0
c Var 'aux1228' direct represents '2' with '-5267'
5266 5268 -5267 0
c Encoding variable: aux1229 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1228))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '5269'
c Var 'aux1229' direct represents '0' with '5269'
c Var 'aux1229' order represents '1' with '5270'
-5269 5270 0
c Var 'aux1229' direct represents '1' with '5271'
5269 -5270 5271 0
-5271 5270 0
-5271 -5269 0
c Var 'aux1229' order represents '2' with '5272'
-5270 5272 0
c Var 'aux1229' direct represents '2' with '5273'
5270 -5272 5273 0
-5273 5272 0
-5273 -5270 0
c Var 'aux1229' direct represents '3' with '-5272'
5269 5271 5273 -5272 0
c Encoding variable: aux1230 with domain: int(0..4) (representing constraint (aux1225 + aux1227))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '5274'
c Var 'aux1230' direct represents '0' with '5274'
c Var 'aux1230' order represents '1' with '5275'
-5274 5275 0
c Var 'aux1230' direct represents '1' with '5276'
5274 -5275 5276 0
-5276 5275 0
-5276 -5274 0
c Var 'aux1230' order represents '2' with '5277'
-5275 5277 0
c Var 'aux1230' direct represents '2' with '5278'
5275 -5277 5278 0
-5278 5277 0
-5278 -5275 0
c Var 'aux1230' order represents '3' with '5279'
-5277 5279 0
c Var 'aux1230' direct represents '3' with '5280'
5277 -5279 5280 0
-5280 5279 0
-5280 -5277 0
c Var 'aux1230' direct represents '4' with '-5279'
5274 5276 5278 5280 -5279 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '5281'
c Var 'aux1231' direct represents '0' with '5281'
c Var 'aux1231' order represents '1' with '5282'
-5281 5282 0
c Var 'aux1231' direct represents '1' with '5283'
5281 -5282 5283 0
-5283 5282 0
-5283 -5281 0
c Var 'aux1231' direct represents '2' with '-5282'
5281 5283 -5282 0
c Encoding variable: aux1232 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '5284'
c Var 'aux1232' direct represents '0' with '5284'
c Var 'aux1232' order represents '1' with '5285'
-5284 5285 0
c Var 'aux1232' direct represents '1' with '5286'
5284 -5285 5286 0
-5286 5285 0
-5286 -5284 0
c Var 'aux1232' direct represents '2' with '-5285'
5284 5286 -5285 0
c Encoding variable: aux1233 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '5287'
c Var 'aux1233' direct represents '0' with '5287'
c Var 'aux1233' order represents '1' with '5288'
-5287 5288 0
c Var 'aux1233' direct represents '1' with '5289'
5287 -5288 5289 0
-5289 5288 0
-5289 -5287 0
c Var 'aux1233' direct represents '2' with '-5288'
5287 5289 -5288 0
c Encoding variable: aux1234 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '5290'
c Var 'aux1234' direct represents '0' with '5290'
c Var 'aux1234' order represents '1' with '5291'
-5290 5291 0
c Var 'aux1234' direct represents '1' with '5292'
5290 -5291 5292 0
-5292 5291 0
-5292 -5290 0
c Var 'aux1234' direct represents '2' with '-5291'
5290 5292 -5291 0
c Encoding variable: aux1235 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1234))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '5293'
c Var 'aux1235' direct represents '0' with '5293'
c Var 'aux1235' order represents '1' with '5294'
-5293 5294 0
c Var 'aux1235' direct represents '1' with '5295'
5293 -5294 5295 0
-5295 5294 0
-5295 -5293 0
c Var 'aux1235' order represents '2' with '5296'
-5294 5296 0
c Var 'aux1235' direct represents '2' with '5297'
5294 -5296 5297 0
-5297 5296 0
-5297 -5294 0
c Var 'aux1235' direct represents '3' with '-5296'
5293 5295 5297 -5296 0
c Encoding variable: aux1236 with domain: int(0..4) (representing constraint (aux1231 + aux1233))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '5298'
c Var 'aux1236' direct represents '0' with '5298'
c Var 'aux1236' order represents '1' with '5299'
-5298 5299 0
c Var 'aux1236' direct represents '1' with '5300'
5298 -5299 5300 0
-5300 5299 0
-5300 -5298 0
c Var 'aux1236' order represents '2' with '5301'
-5299 5301 0
c Var 'aux1236' direct represents '2' with '5302'
5299 -5301 5302 0
-5302 5301 0
-5302 -5299 0
c Var 'aux1236' order represents '3' with '5303'
-5301 5303 0
c Var 'aux1236' direct represents '3' with '5304'
5301 -5303 5304 0
-5304 5303 0
-5304 -5301 0
c Var 'aux1236' direct represents '4' with '-5303'
5298 5300 5302 5304 -5303 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '5305'
c Var 'aux1237' direct represents '0' with '5305'
c Var 'aux1237' order represents '1' with '5306'
-5305 5306 0
c Var 'aux1237' direct represents '1' with '5307'
5305 -5306 5307 0
-5307 5306 0
-5307 -5305 0
c Var 'aux1237' direct represents '2' with '-5306'
5305 5307 -5306 0
c Encoding variable: aux1238 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5308'
c Var 'aux1238' direct represents '0' with '5308'
c Var 'aux1238' order represents '1' with '5309'
-5308 5309 0
c Var 'aux1238' direct represents '1' with '5310'
5308 -5309 5310 0
-5310 5309 0
-5310 -5308 0
c Var 'aux1238' direct represents '2' with '-5309'
5308 5310 -5309 0
c Encoding variable: aux1239 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5311'
c Var 'aux1239' direct represents '0' with '5311'
c Var 'aux1239' order represents '1' with '5312'
-5311 5312 0
c Var 'aux1239' direct represents '1' with '5313'
5311 -5312 5313 0
-5313 5312 0
-5313 -5311 0
c Var 'aux1239' direct represents '2' with '-5312'
5311 5313 -5312 0
c Encoding variable: aux1240 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5314'
c Var 'aux1240' direct represents '0' with '5314'
c Var 'aux1240' order represents '1' with '5315'
-5314 5315 0
c Var 'aux1240' direct represents '1' with '5316'
5314 -5315 5316 0
-5316 5315 0
-5316 -5314 0
c Var 'aux1240' direct represents '2' with '-5315'
5314 5316 -5315 0
c Encoding variable: aux1241 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1240))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5317'
c Var 'aux1241' direct represents '0' with '5317'
c Var 'aux1241' order represents '1' with '5318'
-5317 5318 0
c Var 'aux1241' direct represents '1' with '5319'
5317 -5318 5319 0
-5319 5318 0
-5319 -5317 0
c Var 'aux1241' order represents '2' with '5320'
-5318 5320 0
c Var 'aux1241' direct represents '2' with '5321'
5318 -5320 5321 0
-5321 5320 0
-5321 -5318 0
c Var 'aux1241' direct represents '3' with '-5320'
5317 5319 5321 -5320 0
c Encoding variable: aux1242 with domain: int(0..4) (representing constraint (aux1237 + aux1239))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5322'
c Var 'aux1242' direct represents '0' with '5322'
c Var 'aux1242' order represents '1' with '5323'
-5322 5323 0
c Var 'aux1242' direct represents '1' with '5324'
5322 -5323 5324 0
-5324 5323 0
-5324 -5322 0
c Var 'aux1242' order represents '2' with '5325'
-5323 5325 0
c Var 'aux1242' direct represents '2' with '5326'
5323 -5325 5326 0
-5326 5325 0
-5326 -5323 0
c Var 'aux1242' order represents '3' with '5327'
-5325 5327 0
c Var 'aux1242' direct represents '3' with '5328'
5325 -5327 5328 0
-5328 5327 0
-5328 -5325 0
c Var 'aux1242' direct represents '4' with '-5327'
5322 5324 5326 5328 -5327 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5329'
c Var 'aux1243' direct represents '0' with '5329'
c Var 'aux1243' order represents '1' with '5330'
-5329 5330 0
c Var 'aux1243' direct represents '1' with '5331'
5329 -5330 5331 0
-5331 5330 0
-5331 -5329 0
c Var 'aux1243' direct represents '2' with '-5330'
5329 5331 -5330 0
c Encoding variable: aux1244 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5332'
c Var 'aux1244' direct represents '0' with '5332'
c Var 'aux1244' order represents '1' with '5333'
-5332 5333 0
c Var 'aux1244' direct represents '1' with '5334'
5332 -5333 5334 0
-5334 5333 0
-5334 -5332 0
c Var 'aux1244' direct represents '2' with '-5333'
5332 5334 -5333 0
c Encoding variable: aux1245 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5335'
c Var 'aux1245' direct represents '0' with '5335'
c Var 'aux1245' order represents '1' with '5336'
-5335 5336 0
c Var 'aux1245' direct represents '1' with '5337'
5335 -5336 5337 0
-5337 5336 0
-5337 -5335 0
c Var 'aux1245' direct represents '2' with '-5336'
5335 5337 -5336 0
c Encoding variable: aux1246 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5338'
c Var 'aux1246' direct represents '0' with '5338'
c Var 'aux1246' order represents '1' with '5339'
-5338 5339 0
c Var 'aux1246' direct represents '1' with '5340'
5338 -5339 5340 0
-5340 5339 0
-5340 -5338 0
c Var 'aux1246' direct represents '2' with '-5339'
5338 5340 -5339 0
c Encoding variable: aux1247 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1246))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5341'
c Var 'aux1247' direct represents '0' with '5341'
c Var 'aux1247' order represents '1' with '5342'
-5341 5342 0
c Var 'aux1247' direct represents '1' with '5343'
5341 -5342 5343 0
-5343 5342 0
-5343 -5341 0
c Var 'aux1247' order represents '2' with '5344'
-5342 5344 0
c Var 'aux1247' direct represents '2' with '5345'
5342 -5344 5345 0
-5345 5344 0
-5345 -5342 0
c Var 'aux1247' direct represents '3' with '-5344'
5341 5343 5345 -5344 0
c Encoding variable: aux1248 with domain: int(0..4) (representing constraint (aux1243 + aux1245))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5346'
c Var 'aux1248' direct represents '0' with '5346'
c Var 'aux1248' order represents '1' with '5347'
-5346 5347 0
c Var 'aux1248' direct represents '1' with '5348'
5346 -5347 5348 0
-5348 5347 0
-5348 -5346 0
c Var 'aux1248' order represents '2' with '5349'
-5347 5349 0
c Var 'aux1248' direct represents '2' with '5350'
5347 -5349 5350 0
-5350 5349 0
-5350 -5347 0
c Var 'aux1248' order represents '3' with '5351'
-5349 5351 0
c Var 'aux1248' direct represents '3' with '5352'
5349 -5351 5352 0
-5352 5351 0
-5352 -5349 0
c Var 'aux1248' direct represents '4' with '-5351'
5346 5348 5350 5352 -5351 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5353'
c Var 'aux1249' direct represents '0' with '5353'
c Var 'aux1249' order represents '1' with '5354'
-5353 5354 0
c Var 'aux1249' direct represents '1' with '5355'
5353 -5354 5355 0
-5355 5354 0
-5355 -5353 0
c Var 'aux1249' direct represents '2' with '-5354'
5353 5355 -5354 0
c Encoding variable: aux1250 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5356'
c Var 'aux1250' direct represents '0' with '5356'
c Var 'aux1250' order represents '1' with '5357'
-5356 5357 0
c Var 'aux1250' direct represents '1' with '5358'
5356 -5357 5358 0
-5358 5357 0
-5358 -5356 0
c Var 'aux1250' direct represents '2' with '-5357'
5356 5358 -5357 0
c Encoding variable: aux1251 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5359'
c Var 'aux1251' direct represents '0' with '5359'
c Var 'aux1251' order represents '1' with '5360'
-5359 5360 0
c Var 'aux1251' direct represents '1' with '5361'
5359 -5360 5361 0
-5361 5360 0
-5361 -5359 0
c Var 'aux1251' direct represents '2' with '-5360'
5359 5361 -5360 0
c Encoding variable: aux1252 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5362'
c Var 'aux1252' direct represents '0' with '5362'
c Var 'aux1252' order represents '1' with '5363'
-5362 5363 0
c Var 'aux1252' direct represents '1' with '5364'
5362 -5363 5364 0
-5364 5363 0
-5364 -5362 0
c Var 'aux1252' direct represents '2' with '-5363'
5362 5364 -5363 0
c Encoding variable: aux1253 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1252))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5365'
c Var 'aux1253' direct represents '0' with '5365'
c Var 'aux1253' order represents '1' with '5366'
-5365 5366 0
c Var 'aux1253' direct represents '1' with '5367'
5365 -5366 5367 0
-5367 5366 0
-5367 -5365 0
c Var 'aux1253' order represents '2' with '5368'
-5366 5368 0
c Var 'aux1253' direct represents '2' with '5369'
5366 -5368 5369 0
-5369 5368 0
-5369 -5366 0
c Var 'aux1253' direct represents '3' with '-5368'
5365 5367 5369 -5368 0
c Encoding variable: aux1254 with domain: int(0..4) (representing constraint (aux1249 + aux1251))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5370'
c Var 'aux1254' direct represents '0' with '5370'
c Var 'aux1254' order represents '1' with '5371'
-5370 5371 0
c Var 'aux1254' direct represents '1' with '5372'
5370 -5371 5372 0
-5372 5371 0
-5372 -5370 0
c Var 'aux1254' order represents '2' with '5373'
-5371 5373 0
c Var 'aux1254' direct represents '2' with '5374'
5371 -5373 5374 0
-5374 5373 0
-5374 -5371 0
c Var 'aux1254' order represents '3' with '5375'
-5373 5375 0
c Var 'aux1254' direct represents '3' with '5376'
5373 -5375 5376 0
-5376 5375 0
-5376 -5373 0
c Var 'aux1254' direct represents '4' with '-5375'
5370 5372 5374 5376 -5375 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5377'
c Var 'aux1255' direct represents '0' with '5377'
c Var 'aux1255' order represents '1' with '5378'
-5377 5378 0
c Var 'aux1255' direct represents '1' with '5379'
5377 -5378 5379 0
-5379 5378 0
-5379 -5377 0
c Var 'aux1255' direct represents '2' with '-5378'
5377 5379 -5378 0
c Encoding variable: aux1256 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5380'
c Var 'aux1256' direct represents '0' with '5380'
c Var 'aux1256' order represents '1' with '5381'
-5380 5381 0
c Var 'aux1256' direct represents '1' with '5382'
5380 -5381 5382 0
-5382 5381 0
-5382 -5380 0
c Var 'aux1256' direct represents '2' with '-5381'
5380 5382 -5381 0
c Encoding variable: aux1257 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5383'
c Var 'aux1257' direct represents '0' with '5383'
c Var 'aux1257' order represents '1' with '5384'
-5383 5384 0
c Var 'aux1257' direct represents '1' with '5385'
5383 -5384 5385 0
-5385 5384 0
-5385 -5383 0
c Var 'aux1257' direct represents '2' with '-5384'
5383 5385 -5384 0
c Encoding variable: aux1258 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5386'
c Var 'aux1258' direct represents '0' with '5386'
c Var 'aux1258' order represents '1' with '5387'
-5386 5387 0
c Var 'aux1258' direct represents '1' with '5388'
5386 -5387 5388 0
-5388 5387 0
-5388 -5386 0
c Var 'aux1258' direct represents '2' with '-5387'
5386 5388 -5387 0
c Encoding variable: aux1259 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1258))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5389'
c Var 'aux1259' direct represents '0' with '5389'
c Var 'aux1259' order represents '1' with '5390'
-5389 5390 0
c Var 'aux1259' direct represents '1' with '5391'
5389 -5390 5391 0
-5391 5390 0
-5391 -5389 0
c Var 'aux1259' order represents '2' with '5392'
-5390 5392 0
c Var 'aux1259' direct represents '2' with '5393'
5390 -5392 5393 0
-5393 5392 0
-5393 -5390 0
c Var 'aux1259' direct represents '3' with '-5392'
5389 5391 5393 -5392 0
c Encoding variable: aux1260 with domain: int(0..4) (representing constraint (aux1255 + aux1257))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5394'
c Var 'aux1260' direct represents '0' with '5394'
c Var 'aux1260' order represents '1' with '5395'
-5394 5395 0
c Var 'aux1260' direct represents '1' with '5396'
5394 -5395 5396 0
-5396 5395 0
-5396 -5394 0
c Var 'aux1260' order represents '2' with '5397'
-5395 5397 0
c Var 'aux1260' direct represents '2' with '5398'
5395 -5397 5398 0
-5398 5397 0
-5398 -5395 0
c Var 'aux1260' order represents '3' with '5399'
-5397 5399 0
c Var 'aux1260' direct represents '3' with '5400'
5397 -5399 5400 0
-5400 5399 0
-5400 -5397 0
c Var 'aux1260' direct represents '4' with '-5399'
5394 5396 5398 5400 -5399 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5401'
c Var 'aux1261' direct represents '0' with '5401'
c Var 'aux1261' order represents '1' with '5402'
-5401 5402 0
c Var 'aux1261' direct represents '1' with '5403'
5401 -5402 5403 0
-5403 5402 0
-5403 -5401 0
c Var 'aux1261' direct represents '2' with '-5402'
5401 5403 -5402 0
c Encoding variable: aux1262 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5404'
c Var 'aux1262' direct represents '0' with '5404'
c Var 'aux1262' order represents '1' with '5405'
-5404 5405 0
c Var 'aux1262' direct represents '1' with '5406'
5404 -5405 5406 0
-5406 5405 0
-5406 -5404 0
c Var 'aux1262' direct represents '2' with '-5405'
5404 5406 -5405 0
c Encoding variable: aux1263 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5407'
c Var 'aux1263' direct represents '0' with '5407'
c Var 'aux1263' order represents '1' with '5408'
-5407 5408 0
c Var 'aux1263' direct represents '1' with '5409'
5407 -5408 5409 0
-5409 5408 0
-5409 -5407 0
c Var 'aux1263' direct represents '2' with '-5408'
5407 5409 -5408 0
c Encoding variable: aux1264 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5410'
c Var 'aux1264' direct represents '0' with '5410'
c Var 'aux1264' order represents '1' with '5411'
-5410 5411 0
c Var 'aux1264' direct represents '1' with '5412'
5410 -5411 5412 0
-5412 5411 0
-5412 -5410 0
c Var 'aux1264' direct represents '2' with '-5411'
5410 5412 -5411 0
c Encoding variable: aux1265 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1264))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5413'
c Var 'aux1265' direct represents '0' with '5413'
c Var 'aux1265' order represents '1' with '5414'
-5413 5414 0
c Var 'aux1265' direct represents '1' with '5415'
5413 -5414 5415 0
-5415 5414 0
-5415 -5413 0
c Var 'aux1265' order represents '2' with '5416'
-5414 5416 0
c Var 'aux1265' direct represents '2' with '5417'
5414 -5416 5417 0
-5417 5416 0
-5417 -5414 0
c Var 'aux1265' direct represents '3' with '-5416'
5413 5415 5417 -5416 0
c Encoding variable: aux1266 with domain: int(0..4) (representing constraint (aux1261 + aux1263))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5418'
c Var 'aux1266' direct represents '0' with '5418'
c Var 'aux1266' order represents '1' with '5419'
-5418 5419 0
c Var 'aux1266' direct represents '1' with '5420'
5418 -5419 5420 0
-5420 5419 0
-5420 -5418 0
c Var 'aux1266' order represents '2' with '5421'
-5419 5421 0
c Var 'aux1266' direct represents '2' with '5422'
5419 -5421 5422 0
-5422 5421 0
-5422 -5419 0
c Var 'aux1266' order represents '3' with '5423'
-5421 5423 0
c Var 'aux1266' direct represents '3' with '5424'
5421 -5423 5424 0
-5424 5423 0
-5424 -5421 0
c Var 'aux1266' direct represents '4' with '-5423'
5418 5420 5422 5424 -5423 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5425'
c Var 'aux1267' direct represents '0' with '5425'
c Var 'aux1267' order represents '1' with '5426'
-5425 5426 0
c Var 'aux1267' direct represents '1' with '5427'
5425 -5426 5427 0
-5427 5426 0
-5427 -5425 0
c Var 'aux1267' direct represents '2' with '-5426'
5425 5427 -5426 0
c Encoding variable: aux1268 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5428'
c Var 'aux1268' direct represents '0' with '5428'
c Var 'aux1268' order represents '1' with '5429'
-5428 5429 0
c Var 'aux1268' direct represents '1' with '5430'
5428 -5429 5430 0
-5430 5429 0
-5430 -5428 0
c Var 'aux1268' direct represents '2' with '-5429'
5428 5430 -5429 0
c Encoding variable: aux1269 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5431'
c Var 'aux1269' direct represents '0' with '5431'
c Var 'aux1269' order represents '1' with '5432'
-5431 5432 0
c Var 'aux1269' direct represents '1' with '5433'
5431 -5432 5433 0
-5433 5432 0
-5433 -5431 0
c Var 'aux1269' direct represents '2' with '-5432'
5431 5433 -5432 0
c Encoding variable: aux1270 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5434'
c Var 'aux1270' direct represents '0' with '5434'
c Var 'aux1270' order represents '1' with '5435'
-5434 5435 0
c Var 'aux1270' direct represents '1' with '5436'
5434 -5435 5436 0
-5436 5435 0
-5436 -5434 0
c Var 'aux1270' direct represents '2' with '-5435'
5434 5436 -5435 0
c Encoding variable: aux1271 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1270))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5437'
c Var 'aux1271' direct represents '0' with '5437'
c Var 'aux1271' order represents '1' with '5438'
-5437 5438 0
c Var 'aux1271' direct represents '1' with '5439'
5437 -5438 5439 0
-5439 5438 0
-5439 -5437 0
c Var 'aux1271' order represents '2' with '5440'
-5438 5440 0
c Var 'aux1271' direct represents '2' with '5441'
5438 -5440 5441 0
-5441 5440 0
-5441 -5438 0
c Var 'aux1271' direct represents '3' with '-5440'
5437 5439 5441 -5440 0
c Encoding variable: aux1272 with domain: int(0..4) (representing constraint (aux1267 + aux1269))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5442'
c Var 'aux1272' direct represents '0' with '5442'
c Var 'aux1272' order represents '1' with '5443'
-5442 5443 0
c Var 'aux1272' direct represents '1' with '5444'
5442 -5443 5444 0
-5444 5443 0
-5444 -5442 0
c Var 'aux1272' order represents '2' with '5445'
-5443 5445 0
c Var 'aux1272' direct represents '2' with '5446'
5443 -5445 5446 0
-5446 5445 0
-5446 -5443 0
c Var 'aux1272' order represents '3' with '5447'
-5445 5447 0
c Var 'aux1272' direct represents '3' with '5448'
5445 -5447 5448 0
-5448 5447 0
-5448 -5445 0
c Var 'aux1272' direct represents '4' with '-5447'
5442 5444 5446 5448 -5447 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5449'
c Var 'aux1273' direct represents '0' with '5449'
c Var 'aux1273' order represents '1' with '5450'
-5449 5450 0
c Var 'aux1273' direct represents '1' with '5451'
5449 -5450 5451 0
-5451 5450 0
-5451 -5449 0
c Var 'aux1273' direct represents '2' with '-5450'
5449 5451 -5450 0
c Encoding variable: aux1274 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5452'
c Var 'aux1274' direct represents '0' with '5452'
c Var 'aux1274' order represents '1' with '5453'
-5452 5453 0
c Var 'aux1274' direct represents '1' with '5454'
5452 -5453 5454 0
-5454 5453 0
-5454 -5452 0
c Var 'aux1274' direct represents '2' with '-5453'
5452 5454 -5453 0
c Encoding variable: aux1275 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5455'
c Var 'aux1275' direct represents '0' with '5455'
c Var 'aux1275' order represents '1' with '5456'
-5455 5456 0
c Var 'aux1275' direct represents '1' with '5457'
5455 -5456 5457 0
-5457 5456 0
-5457 -5455 0
c Var 'aux1275' direct represents '2' with '-5456'
5455 5457 -5456 0
c Encoding variable: aux1276 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5458'
c Var 'aux1276' direct represents '0' with '5458'
c Var 'aux1276' order represents '1' with '5459'
-5458 5459 0
c Var 'aux1276' direct represents '1' with '5460'
5458 -5459 5460 0
-5460 5459 0
-5460 -5458 0
c Var 'aux1276' direct represents '2' with '-5459'
5458 5460 -5459 0
c Encoding variable: aux1277 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1276))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5461'
c Var 'aux1277' direct represents '0' with '5461'
c Var 'aux1277' order represents '1' with '5462'
-5461 5462 0
c Var 'aux1277' direct represents '1' with '5463'
5461 -5462 5463 0
-5463 5462 0
-5463 -5461 0
c Var 'aux1277' order represents '2' with '5464'
-5462 5464 0
c Var 'aux1277' direct represents '2' with '5465'
5462 -5464 5465 0
-5465 5464 0
-5465 -5462 0
c Var 'aux1277' direct represents '3' with '-5464'
5461 5463 5465 -5464 0
c Encoding variable: aux1278 with domain: int(0..4) (representing constraint (aux1273 + aux1275))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5466'
c Var 'aux1278' direct represents '0' with '5466'
c Var 'aux1278' order represents '1' with '5467'
-5466 5467 0
c Var 'aux1278' direct represents '1' with '5468'
5466 -5467 5468 0
-5468 5467 0
-5468 -5466 0
c Var 'aux1278' order represents '2' with '5469'
-5467 5469 0
c Var 'aux1278' direct represents '2' with '5470'
5467 -5469 5470 0
-5470 5469 0
-5470 -5467 0
c Var 'aux1278' order represents '3' with '5471'
-5469 5471 0
c Var 'aux1278' direct represents '3' with '5472'
5469 -5471 5472 0
-5472 5471 0
-5472 -5469 0
c Var 'aux1278' direct represents '4' with '-5471'
5466 5468 5470 5472 -5471 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5473'
c Var 'aux1279' direct represents '0' with '5473'
c Var 'aux1279' order represents '1' with '5474'
-5473 5474 0
c Var 'aux1279' direct represents '1' with '5475'
5473 -5474 5475 0
-5475 5474 0
-5475 -5473 0
c Var 'aux1279' direct represents '2' with '-5474'
5473 5475 -5474 0
c Encoding variable: aux1280 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5476'
c Var 'aux1280' direct represents '0' with '5476'
c Var 'aux1280' order represents '1' with '5477'
-5476 5477 0
c Var 'aux1280' direct represents '1' with '5478'
5476 -5477 5478 0
-5478 5477 0
-5478 -5476 0
c Var 'aux1280' direct represents '2' with '-5477'
5476 5478 -5477 0
c Encoding variable: aux1281 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5479'
c Var 'aux1281' direct represents '0' with '5479'
c Var 'aux1281' order represents '1' with '5480'
-5479 5480 0
c Var 'aux1281' direct represents '1' with '5481'
5479 -5480 5481 0
-5481 5480 0
-5481 -5479 0
c Var 'aux1281' direct represents '2' with '-5480'
5479 5481 -5480 0
c Encoding variable: aux1282 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5482'
c Var 'aux1282' direct represents '0' with '5482'
c Var 'aux1282' order represents '1' with '5483'
-5482 5483 0
c Var 'aux1282' direct represents '1' with '5484'
5482 -5483 5484 0
-5484 5483 0
-5484 -5482 0
c Var 'aux1282' direct represents '2' with '-5483'
5482 5484 -5483 0
c Encoding variable: aux1283 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1282))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5485'
c Var 'aux1283' direct represents '0' with '5485'
c Var 'aux1283' order represents '1' with '5486'
-5485 5486 0
c Var 'aux1283' direct represents '1' with '5487'
5485 -5486 5487 0
-5487 5486 0
-5487 -5485 0
c Var 'aux1283' order represents '2' with '5488'
-5486 5488 0
c Var 'aux1283' direct represents '2' with '5489'
5486 -5488 5489 0
-5489 5488 0
-5489 -5486 0
c Var 'aux1283' direct represents '3' with '-5488'
5485 5487 5489 -5488 0
c Encoding variable: aux1284 with domain: int(0..4) (representing constraint (aux1279 + aux1281))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5490'
c Var 'aux1284' direct represents '0' with '5490'
c Var 'aux1284' order represents '1' with '5491'
-5490 5491 0
c Var 'aux1284' direct represents '1' with '5492'
5490 -5491 5492 0
-5492 5491 0
-5492 -5490 0
c Var 'aux1284' order represents '2' with '5493'
-5491 5493 0
c Var 'aux1284' direct represents '2' with '5494'
5491 -5493 5494 0
-5494 5493 0
-5494 -5491 0
c Var 'aux1284' order represents '3' with '5495'
-5493 5495 0
c Var 'aux1284' direct represents '3' with '5496'
5493 -5495 5496 0
-5496 5495 0
-5496 -5493 0
c Var 'aux1284' direct represents '4' with '-5495'
5490 5492 5494 5496 -5495 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5497'
c Var 'aux1285' direct represents '0' with '5497'
c Var 'aux1285' order represents '1' with '5498'
-5497 5498 0
c Var 'aux1285' direct represents '1' with '5499'
5497 -5498 5499 0
-5499 5498 0
-5499 -5497 0
c Var 'aux1285' direct represents '2' with '-5498'
5497 5499 -5498 0
c Encoding variable: aux1286 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5500'
c Var 'aux1286' direct represents '0' with '5500'
c Var 'aux1286' order represents '1' with '5501'
-5500 5501 0
c Var 'aux1286' direct represents '1' with '5502'
5500 -5501 5502 0
-5502 5501 0
-5502 -5500 0
c Var 'aux1286' direct represents '2' with '-5501'
5500 5502 -5501 0
c Encoding variable: aux1287 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5503'
c Var 'aux1287' direct represents '0' with '5503'
c Var 'aux1287' order represents '1' with '5504'
-5503 5504 0
c Var 'aux1287' direct represents '1' with '5505'
5503 -5504 5505 0
-5505 5504 0
-5505 -5503 0
c Var 'aux1287' direct represents '2' with '-5504'
5503 5505 -5504 0
c Encoding variable: aux1288 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5506'
c Var 'aux1288' direct represents '0' with '5506'
c Var 'aux1288' order represents '1' with '5507'
-5506 5507 0
c Var 'aux1288' direct represents '1' with '5508'
5506 -5507 5508 0
-5508 5507 0
-5508 -5506 0
c Var 'aux1288' direct represents '2' with '-5507'
5506 5508 -5507 0
c Encoding variable: aux1289 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1288))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5509'
c Var 'aux1289' direct represents '0' with '5509'
c Var 'aux1289' order represents '1' with '5510'
-5509 5510 0
c Var 'aux1289' direct represents '1' with '5511'
5509 -5510 5511 0
-5511 5510 0
-5511 -5509 0
c Var 'aux1289' order represents '2' with '5512'
-5510 5512 0
c Var 'aux1289' direct represents '2' with '5513'
5510 -5512 5513 0
-5513 5512 0
-5513 -5510 0
c Var 'aux1289' direct represents '3' with '-5512'
5509 5511 5513 -5512 0
c Encoding variable: aux1290 with domain: int(0..4) (representing constraint (aux1285 + aux1287))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5514'
c Var 'aux1290' direct represents '0' with '5514'
c Var 'aux1290' order represents '1' with '5515'
-5514 5515 0
c Var 'aux1290' direct represents '1' with '5516'
5514 -5515 5516 0
-5516 5515 0
-5516 -5514 0
c Var 'aux1290' order represents '2' with '5517'
-5515 5517 0
c Var 'aux1290' direct represents '2' with '5518'
5515 -5517 5518 0
-5518 5517 0
-5518 -5515 0
c Var 'aux1290' order represents '3' with '5519'
-5517 5519 0
c Var 'aux1290' direct represents '3' with '5520'
5517 -5519 5520 0
-5520 5519 0
-5520 -5517 0
c Var 'aux1290' direct represents '4' with '-5519'
5514 5516 5518 5520 -5519 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5521'
c Var 'aux1291' direct represents '0' with '5521'
c Var 'aux1291' order represents '1' with '5522'
-5521 5522 0
c Var 'aux1291' direct represents '1' with '5523'
5521 -5522 5523 0
-5523 5522 0
-5523 -5521 0
c Var 'aux1291' direct represents '2' with '-5522'
5521 5523 -5522 0
c Encoding variable: aux1292 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5524'
c Var 'aux1292' direct represents '0' with '5524'
c Var 'aux1292' order represents '1' with '5525'
-5524 5525 0
c Var 'aux1292' direct represents '1' with '5526'
5524 -5525 5526 0
-5526 5525 0
-5526 -5524 0
c Var 'aux1292' direct represents '2' with '-5525'
5524 5526 -5525 0
c Encoding variable: aux1293 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5527'
c Var 'aux1293' direct represents '0' with '5527'
c Var 'aux1293' order represents '1' with '5528'
-5527 5528 0
c Var 'aux1293' direct represents '1' with '5529'
5527 -5528 5529 0
-5529 5528 0
-5529 -5527 0
c Var 'aux1293' direct represents '2' with '-5528'
5527 5529 -5528 0
c Encoding variable: aux1294 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5530'
c Var 'aux1294' direct represents '0' with '5530'
c Var 'aux1294' order represents '1' with '5531'
-5530 5531 0
c Var 'aux1294' direct represents '1' with '5532'
5530 -5531 5532 0
-5532 5531 0
-5532 -5530 0
c Var 'aux1294' direct represents '2' with '-5531'
5530 5532 -5531 0
c Encoding variable: aux1295 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1294))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5533'
c Var 'aux1295' direct represents '0' with '5533'
c Var 'aux1295' order represents '1' with '5534'
-5533 5534 0
c Var 'aux1295' direct represents '1' with '5535'
5533 -5534 5535 0
-5535 5534 0
-5535 -5533 0
c Var 'aux1295' order represents '2' with '5536'
-5534 5536 0
c Var 'aux1295' direct represents '2' with '5537'
5534 -5536 5537 0
-5537 5536 0
-5537 -5534 0
c Var 'aux1295' direct represents '3' with '-5536'
5533 5535 5537 -5536 0
c Encoding variable: aux1296 with domain: int(0..4) (representing constraint (aux1291 + aux1293))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5538'
c Var 'aux1296' direct represents '0' with '5538'
c Var 'aux1296' order represents '1' with '5539'
-5538 5539 0
c Var 'aux1296' direct represents '1' with '5540'
5538 -5539 5540 0
-5540 5539 0
-5540 -5538 0
c Var 'aux1296' order represents '2' with '5541'
-5539 5541 0
c Var 'aux1296' direct represents '2' with '5542'
5539 -5541 5542 0
-5542 5541 0
-5542 -5539 0
c Var 'aux1296' order represents '3' with '5543'
-5541 5543 0
c Var 'aux1296' direct represents '3' with '5544'
5541 -5543 5544 0
-5544 5543 0
-5544 -5541 0
c Var 'aux1296' direct represents '4' with '-5543'
5538 5540 5542 5544 -5543 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5545'
c Var 'aux1297' direct represents '0' with '5545'
c Var 'aux1297' order represents '1' with '5546'
-5545 5546 0
c Var 'aux1297' direct represents '1' with '5547'
5545 -5546 5547 0
-5547 5546 0
-5547 -5545 0
c Var 'aux1297' direct represents '2' with '-5546'
5545 5547 -5546 0
c Encoding variable: aux1298 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5548'
c Var 'aux1298' direct represents '0' with '5548'
c Var 'aux1298' order represents '1' with '5549'
-5548 5549 0
c Var 'aux1298' direct represents '1' with '5550'
5548 -5549 5550 0
-5550 5549 0
-5550 -5548 0
c Var 'aux1298' direct represents '2' with '-5549'
5548 5550 -5549 0
c Encoding variable: aux1299 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5551'
c Var 'aux1299' direct represents '0' with '5551'
c Var 'aux1299' order represents '1' with '5552'
-5551 5552 0
c Var 'aux1299' direct represents '1' with '5553'
5551 -5552 5553 0
-5553 5552 0
-5553 -5551 0
c Var 'aux1299' direct represents '2' with '-5552'
5551 5553 -5552 0
c Encoding variable: aux1300 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5554'
c Var 'aux1300' direct represents '0' with '5554'
c Var 'aux1300' order represents '1' with '5555'
-5554 5555 0
c Var 'aux1300' direct represents '1' with '5556'
5554 -5555 5556 0
-5556 5555 0
-5556 -5554 0
c Var 'aux1300' direct represents '2' with '-5555'
5554 5556 -5555 0
c Encoding variable: aux1301 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1300))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5557'
c Var 'aux1301' direct represents '0' with '5557'
c Var 'aux1301' order represents '1' with '5558'
-5557 5558 0
c Var 'aux1301' direct represents '1' with '5559'
5557 -5558 5559 0
-5559 5558 0
-5559 -5557 0
c Var 'aux1301' order represents '2' with '5560'
-5558 5560 0
c Var 'aux1301' direct represents '2' with '5561'
5558 -5560 5561 0
-5561 5560 0
-5561 -5558 0
c Var 'aux1301' direct represents '3' with '-5560'
5557 5559 5561 -5560 0
c Encoding variable: aux1302 with domain: int(0..4) (representing constraint (aux1297 + aux1299))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5562'
c Var 'aux1302' direct represents '0' with '5562'
c Var 'aux1302' order represents '1' with '5563'
-5562 5563 0
c Var 'aux1302' direct represents '1' with '5564'
5562 -5563 5564 0
-5564 5563 0
-5564 -5562 0
c Var 'aux1302' order represents '2' with '5565'
-5563 5565 0
c Var 'aux1302' direct represents '2' with '5566'
5563 -5565 5566 0
-5566 5565 0
-5566 -5563 0
c Var 'aux1302' order represents '3' with '5567'
-5565 5567 0
c Var 'aux1302' direct represents '3' with '5568'
5565 -5567 5568 0
-5568 5567 0
-5568 -5565 0
c Var 'aux1302' direct represents '4' with '-5567'
5562 5564 5566 5568 -5567 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5569'
c Var 'aux1303' direct represents '0' with '5569'
c Var 'aux1303' order represents '1' with '5570'
-5569 5570 0
c Var 'aux1303' direct represents '1' with '5571'
5569 -5570 5571 0
-5571 5570 0
-5571 -5569 0
c Var 'aux1303' direct represents '2' with '-5570'
5569 5571 -5570 0
c Encoding variable: aux1304 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5572'
c Var 'aux1304' direct represents '0' with '5572'
c Var 'aux1304' order represents '1' with '5573'
-5572 5573 0
c Var 'aux1304' direct represents '1' with '5574'
5572 -5573 5574 0
-5574 5573 0
-5574 -5572 0
c Var 'aux1304' direct represents '2' with '-5573'
5572 5574 -5573 0
c Encoding variable: aux1305 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5575'
c Var 'aux1305' direct represents '0' with '5575'
c Var 'aux1305' order represents '1' with '5576'
-5575 5576 0
c Var 'aux1305' direct represents '1' with '5577'
5575 -5576 5577 0
-5577 5576 0
-5577 -5575 0
c Var 'aux1305' direct represents '2' with '-5576'
5575 5577 -5576 0
c Encoding variable: aux1306 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5578'
c Var 'aux1306' direct represents '0' with '5578'
c Var 'aux1306' order represents '1' with '5579'
-5578 5579 0
c Var 'aux1306' direct represents '1' with '5580'
5578 -5579 5580 0
-5580 5579 0
-5580 -5578 0
c Var 'aux1306' direct represents '2' with '-5579'
5578 5580 -5579 0
c Encoding variable: aux1307 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1306))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5581'
c Var 'aux1307' direct represents '0' with '5581'
c Var 'aux1307' order represents '1' with '5582'
-5581 5582 0
c Var 'aux1307' direct represents '1' with '5583'
5581 -5582 5583 0
-5583 5582 0
-5583 -5581 0
c Var 'aux1307' order represents '2' with '5584'
-5582 5584 0
c Var 'aux1307' direct represents '2' with '5585'
5582 -5584 5585 0
-5585 5584 0
-5585 -5582 0
c Var 'aux1307' direct represents '3' with '-5584'
5581 5583 5585 -5584 0
c Encoding variable: aux1308 with domain: int(0..4) (representing constraint (aux1303 + aux1305))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5586'
c Var 'aux1308' direct represents '0' with '5586'
c Var 'aux1308' order represents '1' with '5587'
-5586 5587 0
c Var 'aux1308' direct represents '1' with '5588'
5586 -5587 5588 0
-5588 5587 0
-5588 -5586 0
c Var 'aux1308' order represents '2' with '5589'
-5587 5589 0
c Var 'aux1308' direct represents '2' with '5590'
5587 -5589 5590 0
-5590 5589 0
-5590 -5587 0
c Var 'aux1308' order represents '3' with '5591'
-5589 5591 0
c Var 'aux1308' direct represents '3' with '5592'
5589 -5591 5592 0
-5592 5591 0
-5592 -5589 0
c Var 'aux1308' direct represents '4' with '-5591'
5586 5588 5590 5592 -5591 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5593'
c Var 'aux1309' direct represents '0' with '5593'
c Var 'aux1309' order represents '1' with '5594'
-5593 5594 0
c Var 'aux1309' direct represents '1' with '5595'
5593 -5594 5595 0
-5595 5594 0
-5595 -5593 0
c Var 'aux1309' direct represents '2' with '-5594'
5593 5595 -5594 0
c Encoding variable: aux1310 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5596'
c Var 'aux1310' direct represents '0' with '5596'
c Var 'aux1310' order represents '1' with '5597'
-5596 5597 0
c Var 'aux1310' direct represents '1' with '5598'
5596 -5597 5598 0
-5598 5597 0
-5598 -5596 0
c Var 'aux1310' direct represents '2' with '-5597'
5596 5598 -5597 0
c Encoding variable: aux1311 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5599'
c Var 'aux1311' direct represents '0' with '5599'
c Var 'aux1311' order represents '1' with '5600'
-5599 5600 0
c Var 'aux1311' direct represents '1' with '5601'
5599 -5600 5601 0
-5601 5600 0
-5601 -5599 0
c Var 'aux1311' direct represents '2' with '-5600'
5599 5601 -5600 0
c Encoding variable: aux1312 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5602'
c Var 'aux1312' direct represents '0' with '5602'
c Var 'aux1312' order represents '1' with '5603'
-5602 5603 0
c Var 'aux1312' direct represents '1' with '5604'
5602 -5603 5604 0
-5604 5603 0
-5604 -5602 0
c Var 'aux1312' direct represents '2' with '-5603'
5602 5604 -5603 0
c Encoding variable: aux1313 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1312))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5605'
c Var 'aux1313' direct represents '0' with '5605'
c Var 'aux1313' order represents '1' with '5606'
-5605 5606 0
c Var 'aux1313' direct represents '1' with '5607'
5605 -5606 5607 0
-5607 5606 0
-5607 -5605 0
c Var 'aux1313' order represents '2' with '5608'
-5606 5608 0
c Var 'aux1313' direct represents '2' with '5609'
5606 -5608 5609 0
-5609 5608 0
-5609 -5606 0
c Var 'aux1313' direct represents '3' with '-5608'
5605 5607 5609 -5608 0
c Encoding variable: aux1314 with domain: int(0..4) (representing constraint (aux1309 + aux1311))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5610'
c Var 'aux1314' direct represents '0' with '5610'
c Var 'aux1314' order represents '1' with '5611'
-5610 5611 0
c Var 'aux1314' direct represents '1' with '5612'
5610 -5611 5612 0
-5612 5611 0
-5612 -5610 0
c Var 'aux1314' order represents '2' with '5613'
-5611 5613 0
c Var 'aux1314' direct represents '2' with '5614'
5611 -5613 5614 0
-5614 5613 0
-5614 -5611 0
c Var 'aux1314' order represents '3' with '5615'
-5613 5615 0
c Var 'aux1314' direct represents '3' with '5616'
5613 -5615 5616 0
-5616 5615 0
-5616 -5613 0
c Var 'aux1314' direct represents '4' with '-5615'
5610 5612 5614 5616 -5615 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5617'
c Var 'aux1315' direct represents '0' with '5617'
c Var 'aux1315' order represents '1' with '5618'
-5617 5618 0
c Var 'aux1315' direct represents '1' with '5619'
5617 -5618 5619 0
-5619 5618 0
-5619 -5617 0
c Var 'aux1315' direct represents '2' with '-5618'
5617 5619 -5618 0
c Encoding variable: aux1316 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5620'
c Var 'aux1316' direct represents '0' with '5620'
c Var 'aux1316' order represents '1' with '5621'
-5620 5621 0
c Var 'aux1316' direct represents '1' with '5622'
5620 -5621 5622 0
-5622 5621 0
-5622 -5620 0
c Var 'aux1316' direct represents '2' with '-5621'
5620 5622 -5621 0
c Encoding variable: aux1317 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5623'
c Var 'aux1317' direct represents '0' with '5623'
c Var 'aux1317' order represents '1' with '5624'
-5623 5624 0
c Var 'aux1317' direct represents '1' with '5625'
5623 -5624 5625 0
-5625 5624 0
-5625 -5623 0
c Var 'aux1317' direct represents '2' with '-5624'
5623 5625 -5624 0
c Encoding variable: aux1318 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5626'
c Var 'aux1318' direct represents '0' with '5626'
c Var 'aux1318' order represents '1' with '5627'
-5626 5627 0
c Var 'aux1318' direct represents '1' with '5628'
5626 -5627 5628 0
-5628 5627 0
-5628 -5626 0
c Var 'aux1318' direct represents '2' with '-5627'
5626 5628 -5627 0
c Encoding variable: aux1319 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1318))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5629'
c Var 'aux1319' direct represents '0' with '5629'
c Var 'aux1319' order represents '1' with '5630'
-5629 5630 0
c Var 'aux1319' direct represents '1' with '5631'
5629 -5630 5631 0
-5631 5630 0
-5631 -5629 0
c Var 'aux1319' order represents '2' with '5632'
-5630 5632 0
c Var 'aux1319' direct represents '2' with '5633'
5630 -5632 5633 0
-5633 5632 0
-5633 -5630 0
c Var 'aux1319' direct represents '3' with '-5632'
5629 5631 5633 -5632 0
c Encoding variable: aux1320 with domain: int(0..4) (representing constraint (aux1315 + aux1317))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5634'
c Var 'aux1320' direct represents '0' with '5634'
c Var 'aux1320' order represents '1' with '5635'
-5634 5635 0
c Var 'aux1320' direct represents '1' with '5636'
5634 -5635 5636 0
-5636 5635 0
-5636 -5634 0
c Var 'aux1320' order represents '2' with '5637'
-5635 5637 0
c Var 'aux1320' direct represents '2' with '5638'
5635 -5637 5638 0
-5638 5637 0
-5638 -5635 0
c Var 'aux1320' order represents '3' with '5639'
-5637 5639 0
c Var 'aux1320' direct represents '3' with '5640'
5637 -5639 5640 0
-5640 5639 0
-5640 -5637 0
c Var 'aux1320' direct represents '4' with '-5639'
5634 5636 5638 5640 -5639 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5641'
c Var 'aux1321' direct represents '0' with '5641'
c Var 'aux1321' order represents '1' with '5642'
-5641 5642 0
c Var 'aux1321' direct represents '1' with '5643'
5641 -5642 5643 0
-5643 5642 0
-5643 -5641 0
c Var 'aux1321' direct represents '2' with '-5642'
5641 5643 -5642 0
c Encoding variable: aux1322 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5644'
c Var 'aux1322' direct represents '0' with '5644'
c Var 'aux1322' order represents '1' with '5645'
-5644 5645 0
c Var 'aux1322' direct represents '1' with '5646'
5644 -5645 5646 0
-5646 5645 0
-5646 -5644 0
c Var 'aux1322' direct represents '2' with '-5645'
5644 5646 -5645 0
c Encoding variable: aux1323 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5647'
c Var 'aux1323' direct represents '0' with '5647'
c Var 'aux1323' order represents '1' with '5648'
-5647 5648 0
c Var 'aux1323' direct represents '1' with '5649'
5647 -5648 5649 0
-5649 5648 0
-5649 -5647 0
c Var 'aux1323' direct represents '2' with '-5648'
5647 5649 -5648 0
c Encoding variable: aux1324 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5650'
c Var 'aux1324' direct represents '0' with '5650'
c Var 'aux1324' order represents '1' with '5651'
-5650 5651 0
c Var 'aux1324' direct represents '1' with '5652'
5650 -5651 5652 0
-5652 5651 0
-5652 -5650 0
c Var 'aux1324' direct represents '2' with '-5651'
5650 5652 -5651 0
c Encoding variable: aux1325 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1324))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5653'
c Var 'aux1325' direct represents '0' with '5653'
c Var 'aux1325' order represents '1' with '5654'
-5653 5654 0
c Var 'aux1325' direct represents '1' with '5655'
5653 -5654 5655 0
-5655 5654 0
-5655 -5653 0
c Var 'aux1325' order represents '2' with '5656'
-5654 5656 0
c Var 'aux1325' direct represents '2' with '5657'
5654 -5656 5657 0
-5657 5656 0
-5657 -5654 0
c Var 'aux1325' direct represents '3' with '-5656'
5653 5655 5657 -5656 0
c Encoding variable: aux1326 with domain: int(0..4) (representing constraint (aux1321 + aux1323))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5658'
c Var 'aux1326' direct represents '0' with '5658'
c Var 'aux1326' order represents '1' with '5659'
-5658 5659 0
c Var 'aux1326' direct represents '1' with '5660'
5658 -5659 5660 0
-5660 5659 0
-5660 -5658 0
c Var 'aux1326' order represents '2' with '5661'
-5659 5661 0
c Var 'aux1326' direct represents '2' with '5662'
5659 -5661 5662 0
-5662 5661 0
-5662 -5659 0
c Var 'aux1326' order represents '3' with '5663'
-5661 5663 0
c Var 'aux1326' direct represents '3' with '5664'
5661 -5663 5664 0
-5664 5663 0
-5664 -5661 0
c Var 'aux1326' direct represents '4' with '-5663'
5658 5660 5662 5664 -5663 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5665'
c Var 'aux1327' direct represents '0' with '5665'
c Var 'aux1327' order represents '1' with '5666'
-5665 5666 0
c Var 'aux1327' direct represents '1' with '5667'
5665 -5666 5667 0
-5667 5666 0
-5667 -5665 0
c Var 'aux1327' direct represents '2' with '-5666'
5665 5667 -5666 0
c Encoding variable: aux1328 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5668'
c Var 'aux1328' direct represents '0' with '5668'
c Var 'aux1328' order represents '1' with '5669'
-5668 5669 0
c Var 'aux1328' direct represents '1' with '5670'
5668 -5669 5670 0
-5670 5669 0
-5670 -5668 0
c Var 'aux1328' direct represents '2' with '-5669'
5668 5670 -5669 0
c Encoding variable: aux1329 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5671'
c Var 'aux1329' direct represents '0' with '5671'
c Var 'aux1329' order represents '1' with '5672'
-5671 5672 0
c Var 'aux1329' direct represents '1' with '5673'
5671 -5672 5673 0
-5673 5672 0
-5673 -5671 0
c Var 'aux1329' direct represents '2' with '-5672'
5671 5673 -5672 0
c Encoding variable: aux1330 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5674'
c Var 'aux1330' direct represents '0' with '5674'
c Var 'aux1330' order represents '1' with '5675'
-5674 5675 0
c Var 'aux1330' direct represents '1' with '5676'
5674 -5675 5676 0
-5676 5675 0
-5676 -5674 0
c Var 'aux1330' direct represents '2' with '-5675'
5674 5676 -5675 0
c Encoding variable: aux1331 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1330))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5677'
c Var 'aux1331' direct represents '0' with '5677'
c Var 'aux1331' order represents '1' with '5678'
-5677 5678 0
c Var 'aux1331' direct represents '1' with '5679'
5677 -5678 5679 0
-5679 5678 0
-5679 -5677 0
c Var 'aux1331' order represents '2' with '5680'
-5678 5680 0
c Var 'aux1331' direct represents '2' with '5681'
5678 -5680 5681 0
-5681 5680 0
-5681 -5678 0
c Var 'aux1331' direct represents '3' with '-5680'
5677 5679 5681 -5680 0
c Encoding variable: aux1332 with domain: int(0..4) (representing constraint (aux1327 + aux1329))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5682'
c Var 'aux1332' direct represents '0' with '5682'
c Var 'aux1332' order represents '1' with '5683'
-5682 5683 0
c Var 'aux1332' direct represents '1' with '5684'
5682 -5683 5684 0
-5684 5683 0
-5684 -5682 0
c Var 'aux1332' order represents '2' with '5685'
-5683 5685 0
c Var 'aux1332' direct represents '2' with '5686'
5683 -5685 5686 0
-5686 5685 0
-5686 -5683 0
c Var 'aux1332' order represents '3' with '5687'
-5685 5687 0
c Var 'aux1332' direct represents '3' with '5688'
5685 -5687 5688 0
-5688 5687 0
-5688 -5685 0
c Var 'aux1332' direct represents '4' with '-5687'
5682 5684 5686 5688 -5687 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5689'
c Var 'aux1333' direct represents '0' with '5689'
c Var 'aux1333' order represents '1' with '5690'
-5689 5690 0
c Var 'aux1333' direct represents '1' with '5691'
5689 -5690 5691 0
-5691 5690 0
-5691 -5689 0
c Var 'aux1333' direct represents '2' with '-5690'
5689 5691 -5690 0
c Encoding variable: aux1334 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5692'
c Var 'aux1334' direct represents '0' with '5692'
c Var 'aux1334' order represents '1' with '5693'
-5692 5693 0
c Var 'aux1334' direct represents '1' with '5694'
5692 -5693 5694 0
-5694 5693 0
-5694 -5692 0
c Var 'aux1334' direct represents '2' with '-5693'
5692 5694 -5693 0
c Encoding variable: aux1335 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5695'
c Var 'aux1335' direct represents '0' with '5695'
c Var 'aux1335' order represents '1' with '5696'
-5695 5696 0
c Var 'aux1335' direct represents '1' with '5697'
5695 -5696 5697 0
-5697 5696 0
-5697 -5695 0
c Var 'aux1335' direct represents '2' with '-5696'
5695 5697 -5696 0
c Encoding variable: aux1336 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5698'
c Var 'aux1336' direct represents '0' with '5698'
c Var 'aux1336' order represents '1' with '5699'
-5698 5699 0
c Var 'aux1336' direct represents '1' with '5700'
5698 -5699 5700 0
-5700 5699 0
-5700 -5698 0
c Var 'aux1336' direct represents '2' with '-5699'
5698 5700 -5699 0
c Encoding variable: aux1337 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1336))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5701'
c Var 'aux1337' direct represents '0' with '5701'
c Var 'aux1337' order represents '1' with '5702'
-5701 5702 0
c Var 'aux1337' direct represents '1' with '5703'
5701 -5702 5703 0
-5703 5702 0
-5703 -5701 0
c Var 'aux1337' order represents '2' with '5704'
-5702 5704 0
c Var 'aux1337' direct represents '2' with '5705'
5702 -5704 5705 0
-5705 5704 0
-5705 -5702 0
c Var 'aux1337' direct represents '3' with '-5704'
5701 5703 5705 -5704 0
c Encoding variable: aux1338 with domain: int(0..4) (representing constraint (aux1333 + aux1335))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5706'
c Var 'aux1338' direct represents '0' with '5706'
c Var 'aux1338' order represents '1' with '5707'
-5706 5707 0
c Var 'aux1338' direct represents '1' with '5708'
5706 -5707 5708 0
-5708 5707 0
-5708 -5706 0
c Var 'aux1338' order represents '2' with '5709'
-5707 5709 0
c Var 'aux1338' direct represents '2' with '5710'
5707 -5709 5710 0
-5710 5709 0
-5710 -5707 0
c Var 'aux1338' order represents '3' with '5711'
-5709 5711 0
c Var 'aux1338' direct represents '3' with '5712'
5709 -5711 5712 0
-5712 5711 0
-5712 -5709 0
c Var 'aux1338' direct represents '4' with '-5711'
5706 5708 5710 5712 -5711 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5713'
c Var 'aux1339' direct represents '0' with '5713'
c Var 'aux1339' order represents '1' with '5714'
-5713 5714 0
c Var 'aux1339' direct represents '1' with '5715'
5713 -5714 5715 0
-5715 5714 0
-5715 -5713 0
c Var 'aux1339' direct represents '2' with '-5714'
5713 5715 -5714 0
c Encoding variable: aux1340 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5716'
c Var 'aux1340' direct represents '0' with '5716'
c Var 'aux1340' order represents '1' with '5717'
-5716 5717 0
c Var 'aux1340' direct represents '1' with '5718'
5716 -5717 5718 0
-5718 5717 0
-5718 -5716 0
c Var 'aux1340' direct represents '2' with '-5717'
5716 5718 -5717 0
c Encoding variable: aux1341 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5719'
c Var 'aux1341' direct represents '0' with '5719'
c Var 'aux1341' order represents '1' with '5720'
-5719 5720 0
c Var 'aux1341' direct represents '1' with '5721'
5719 -5720 5721 0
-5721 5720 0
-5721 -5719 0
c Var 'aux1341' direct represents '2' with '-5720'
5719 5721 -5720 0
c Encoding variable: aux1342 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5722'
c Var 'aux1342' direct represents '0' with '5722'
c Var 'aux1342' order represents '1' with '5723'
-5722 5723 0
c Var 'aux1342' direct represents '1' with '5724'
5722 -5723 5724 0
-5724 5723 0
-5724 -5722 0
c Var 'aux1342' direct represents '2' with '-5723'
5722 5724 -5723 0
c Encoding variable: aux1343 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1342))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5725'
c Var 'aux1343' direct represents '0' with '5725'
c Var 'aux1343' order represents '1' with '5726'
-5725 5726 0
c Var 'aux1343' direct represents '1' with '5727'
5725 -5726 5727 0
-5727 5726 0
-5727 -5725 0
c Var 'aux1343' order represents '2' with '5728'
-5726 5728 0
c Var 'aux1343' direct represents '2' with '5729'
5726 -5728 5729 0
-5729 5728 0
-5729 -5726 0
c Var 'aux1343' direct represents '3' with '-5728'
5725 5727 5729 -5728 0
c Encoding variable: aux1344 with domain: int(0..4) (representing constraint (aux1339 + aux1341))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5730'
c Var 'aux1344' direct represents '0' with '5730'
c Var 'aux1344' order represents '1' with '5731'
-5730 5731 0
c Var 'aux1344' direct represents '1' with '5732'
5730 -5731 5732 0
-5732 5731 0
-5732 -5730 0
c Var 'aux1344' order represents '2' with '5733'
-5731 5733 0
c Var 'aux1344' direct represents '2' with '5734'
5731 -5733 5734 0
-5734 5733 0
-5734 -5731 0
c Var 'aux1344' order represents '3' with '5735'
-5733 5735 0
c Var 'aux1344' direct represents '3' with '5736'
5733 -5735 5736 0
-5736 5735 0
-5736 -5733 0
c Var 'aux1344' direct represents '4' with '-5735'
5730 5732 5734 5736 -5735 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5737'
c Var 'aux1345' direct represents '0' with '5737'
c Var 'aux1345' order represents '1' with '5738'
-5737 5738 0
c Var 'aux1345' direct represents '1' with '5739'
5737 -5738 5739 0
-5739 5738 0
-5739 -5737 0
c Var 'aux1345' direct represents '2' with '-5738'
5737 5739 -5738 0
c Encoding variable: aux1346 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5740'
c Var 'aux1346' direct represents '0' with '5740'
c Var 'aux1346' order represents '1' with '5741'
-5740 5741 0
c Var 'aux1346' direct represents '1' with '5742'
5740 -5741 5742 0
-5742 5741 0
-5742 -5740 0
c Var 'aux1346' direct represents '2' with '-5741'
5740 5742 -5741 0
c Encoding variable: aux1347 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5743'
c Var 'aux1347' direct represents '0' with '5743'
c Var 'aux1347' order represents '1' with '5744'
-5743 5744 0
c Var 'aux1347' direct represents '1' with '5745'
5743 -5744 5745 0
-5745 5744 0
-5745 -5743 0
c Var 'aux1347' direct represents '2' with '-5744'
5743 5745 -5744 0
c Encoding variable: aux1348 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5746'
c Var 'aux1348' direct represents '0' with '5746'
c Var 'aux1348' order represents '1' with '5747'
-5746 5747 0
c Var 'aux1348' direct represents '1' with '5748'
5746 -5747 5748 0
-5748 5747 0
-5748 -5746 0
c Var 'aux1348' direct represents '2' with '-5747'
5746 5748 -5747 0
c Encoding variable: aux1349 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1348))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5749'
c Var 'aux1349' direct represents '0' with '5749'
c Var 'aux1349' order represents '1' with '5750'
-5749 5750 0
c Var 'aux1349' direct represents '1' with '5751'
5749 -5750 5751 0
-5751 5750 0
-5751 -5749 0
c Var 'aux1349' order represents '2' with '5752'
-5750 5752 0
c Var 'aux1349' direct represents '2' with '5753'
5750 -5752 5753 0
-5753 5752 0
-5753 -5750 0
c Var 'aux1349' direct represents '3' with '-5752'
5749 5751 5753 -5752 0
c Encoding variable: aux1350 with domain: int(0..4) (representing constraint (aux1345 + aux1347))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5754'
c Var 'aux1350' direct represents '0' with '5754'
c Var 'aux1350' order represents '1' with '5755'
-5754 5755 0
c Var 'aux1350' direct represents '1' with '5756'
5754 -5755 5756 0
-5756 5755 0
-5756 -5754 0
c Var 'aux1350' order represents '2' with '5757'
-5755 5757 0
c Var 'aux1350' direct represents '2' with '5758'
5755 -5757 5758 0
-5758 5757 0
-5758 -5755 0
c Var 'aux1350' order represents '3' with '5759'
-5757 5759 0
c Var 'aux1350' direct represents '3' with '5760'
5757 -5759 5760 0
-5760 5759 0
-5760 -5757 0
c Var 'aux1350' direct represents '4' with '-5759'
5754 5756 5758 5760 -5759 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5761'
c Var 'aux1351' direct represents '0' with '5761'
c Var 'aux1351' order represents '1' with '5762'
-5761 5762 0
c Var 'aux1351' direct represents '1' with '5763'
5761 -5762 5763 0
-5763 5762 0
-5763 -5761 0
c Var 'aux1351' direct represents '2' with '-5762'
5761 5763 -5762 0
c Encoding variable: aux1352 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5764'
c Var 'aux1352' direct represents '0' with '5764'
c Var 'aux1352' order represents '1' with '5765'
-5764 5765 0
c Var 'aux1352' direct represents '1' with '5766'
5764 -5765 5766 0
-5766 5765 0
-5766 -5764 0
c Var 'aux1352' direct represents '2' with '-5765'
5764 5766 -5765 0
c Encoding variable: aux1353 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5767'
c Var 'aux1353' direct represents '0' with '5767'
c Var 'aux1353' order represents '1' with '5768'
-5767 5768 0
c Var 'aux1353' direct represents '1' with '5769'
5767 -5768 5769 0
-5769 5768 0
-5769 -5767 0
c Var 'aux1353' direct represents '2' with '-5768'
5767 5769 -5768 0
c Encoding variable: aux1354 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5770'
c Var 'aux1354' direct represents '0' with '5770'
c Var 'aux1354' order represents '1' with '5771'
-5770 5771 0
c Var 'aux1354' direct represents '1' with '5772'
5770 -5771 5772 0
-5772 5771 0
-5772 -5770 0
c Var 'aux1354' direct represents '2' with '-5771'
5770 5772 -5771 0
c Encoding variable: aux1355 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1354))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5773'
c Var 'aux1355' direct represents '0' with '5773'
c Var 'aux1355' order represents '1' with '5774'
-5773 5774 0
c Var 'aux1355' direct represents '1' with '5775'
5773 -5774 5775 0
-5775 5774 0
-5775 -5773 0
c Var 'aux1355' order represents '2' with '5776'
-5774 5776 0
c Var 'aux1355' direct represents '2' with '5777'
5774 -5776 5777 0
-5777 5776 0
-5777 -5774 0
c Var 'aux1355' direct represents '3' with '-5776'
5773 5775 5777 -5776 0
c Encoding variable: aux1356 with domain: int(0..4) (representing constraint (aux1351 + aux1353))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5778'
c Var 'aux1356' direct represents '0' with '5778'
c Var 'aux1356' order represents '1' with '5779'
-5778 5779 0
c Var 'aux1356' direct represents '1' with '5780'
5778 -5779 5780 0
-5780 5779 0
-5780 -5778 0
c Var 'aux1356' order represents '2' with '5781'
-5779 5781 0
c Var 'aux1356' direct represents '2' with '5782'
5779 -5781 5782 0
-5782 5781 0
-5782 -5779 0
c Var 'aux1356' order represents '3' with '5783'
-5781 5783 0
c Var 'aux1356' direct represents '3' with '5784'
5781 -5783 5784 0
-5784 5783 0
-5784 -5781 0
c Var 'aux1356' direct represents '4' with '-5783'
5778 5780 5782 5784 -5783 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5785'
c Var 'aux1357' direct represents '0' with '5785'
c Var 'aux1357' order represents '1' with '5786'
-5785 5786 0
c Var 'aux1357' direct represents '1' with '5787'
5785 -5786 5787 0
-5787 5786 0
-5787 -5785 0
c Var 'aux1357' direct represents '2' with '-5786'
5785 5787 -5786 0
c Encoding variable: aux1358 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5788'
c Var 'aux1358' direct represents '0' with '5788'
c Var 'aux1358' order represents '1' with '5789'
-5788 5789 0
c Var 'aux1358' direct represents '1' with '5790'
5788 -5789 5790 0
-5790 5789 0
-5790 -5788 0
c Var 'aux1358' direct represents '2' with '-5789'
5788 5790 -5789 0
c Encoding variable: aux1359 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5791'
c Var 'aux1359' direct represents '0' with '5791'
c Var 'aux1359' order represents '1' with '5792'
-5791 5792 0
c Var 'aux1359' direct represents '1' with '5793'
5791 -5792 5793 0
-5793 5792 0
-5793 -5791 0
c Var 'aux1359' direct represents '2' with '-5792'
5791 5793 -5792 0
c Encoding variable: aux1360 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5794'
c Var 'aux1360' direct represents '0' with '5794'
c Var 'aux1360' order represents '1' with '5795'
-5794 5795 0
c Var 'aux1360' direct represents '1' with '5796'
5794 -5795 5796 0
-5796 5795 0
-5796 -5794 0
c Var 'aux1360' direct represents '2' with '-5795'
5794 5796 -5795 0
c Encoding variable: aux1361 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1360))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5797'
c Var 'aux1361' direct represents '0' with '5797'
c Var 'aux1361' order represents '1' with '5798'
-5797 5798 0
c Var 'aux1361' direct represents '1' with '5799'
5797 -5798 5799 0
-5799 5798 0
-5799 -5797 0
c Var 'aux1361' order represents '2' with '5800'
-5798 5800 0
c Var 'aux1361' direct represents '2' with '5801'
5798 -5800 5801 0
-5801 5800 0
-5801 -5798 0
c Var 'aux1361' direct represents '3' with '-5800'
5797 5799 5801 -5800 0
c Encoding variable: aux1362 with domain: int(0..4) (representing constraint (aux1357 + aux1359))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5802'
c Var 'aux1362' direct represents '0' with '5802'
c Var 'aux1362' order represents '1' with '5803'
-5802 5803 0
c Var 'aux1362' direct represents '1' with '5804'
5802 -5803 5804 0
-5804 5803 0
-5804 -5802 0
c Var 'aux1362' order represents '2' with '5805'
-5803 5805 0
c Var 'aux1362' direct represents '2' with '5806'
5803 -5805 5806 0
-5806 5805 0
-5806 -5803 0
c Var 'aux1362' order represents '3' with '5807'
-5805 5807 0
c Var 'aux1362' direct represents '3' with '5808'
5805 -5807 5808 0
-5808 5807 0
-5808 -5805 0
c Var 'aux1362' direct represents '4' with '-5807'
5802 5804 5806 5808 -5807 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5809'
c Var 'aux1363' direct represents '0' with '5809'
c Var 'aux1363' order represents '1' with '5810'
-5809 5810 0
c Var 'aux1363' direct represents '1' with '5811'
5809 -5810 5811 0
-5811 5810 0
-5811 -5809 0
c Var 'aux1363' direct represents '2' with '-5810'
5809 5811 -5810 0
c Encoding variable: aux1364 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5812'
c Var 'aux1364' direct represents '0' with '5812'
c Var 'aux1364' order represents '1' with '5813'
-5812 5813 0
c Var 'aux1364' direct represents '1' with '5814'
5812 -5813 5814 0
-5814 5813 0
-5814 -5812 0
c Var 'aux1364' direct represents '2' with '-5813'
5812 5814 -5813 0
c Encoding variable: aux1365 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5815'
c Var 'aux1365' direct represents '0' with '5815'
c Var 'aux1365' order represents '1' with '5816'
-5815 5816 0
c Var 'aux1365' direct represents '1' with '5817'
5815 -5816 5817 0
-5817 5816 0
-5817 -5815 0
c Var 'aux1365' direct represents '2' with '-5816'
5815 5817 -5816 0
c Encoding variable: aux1366 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5818'
c Var 'aux1366' direct represents '0' with '5818'
c Var 'aux1366' order represents '1' with '5819'
-5818 5819 0
c Var 'aux1366' direct represents '1' with '5820'
5818 -5819 5820 0
-5820 5819 0
-5820 -5818 0
c Var 'aux1366' direct represents '2' with '-5819'
5818 5820 -5819 0
c Encoding variable: aux1367 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1366))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5821'
c Var 'aux1367' direct represents '0' with '5821'
c Var 'aux1367' order represents '1' with '5822'
-5821 5822 0
c Var 'aux1367' direct represents '1' with '5823'
5821 -5822 5823 0
-5823 5822 0
-5823 -5821 0
c Var 'aux1367' order represents '2' with '5824'
-5822 5824 0
c Var 'aux1367' direct represents '2' with '5825'
5822 -5824 5825 0
-5825 5824 0
-5825 -5822 0
c Var 'aux1367' direct represents '3' with '-5824'
5821 5823 5825 -5824 0
c Encoding variable: aux1368 with domain: int(0..4) (representing constraint (aux1363 + aux1365))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5826'
c Var 'aux1368' direct represents '0' with '5826'
c Var 'aux1368' order represents '1' with '5827'
-5826 5827 0
c Var 'aux1368' direct represents '1' with '5828'
5826 -5827 5828 0
-5828 5827 0
-5828 -5826 0
c Var 'aux1368' order represents '2' with '5829'
-5827 5829 0
c Var 'aux1368' direct represents '2' with '5830'
5827 -5829 5830 0
-5830 5829 0
-5830 -5827 0
c Var 'aux1368' order represents '3' with '5831'
-5829 5831 0
c Var 'aux1368' direct represents '3' with '5832'
5829 -5831 5832 0
-5832 5831 0
-5832 -5829 0
c Var 'aux1368' direct represents '4' with '-5831'
5826 5828 5830 5832 -5831 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5833'
c Var 'aux1369' direct represents '0' with '5833'
c Var 'aux1369' order represents '1' with '5834'
-5833 5834 0
c Var 'aux1369' direct represents '1' with '5835'
5833 -5834 5835 0
-5835 5834 0
-5835 -5833 0
c Var 'aux1369' direct represents '2' with '-5834'
5833 5835 -5834 0
c Encoding variable: aux1370 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5836'
c Var 'aux1370' direct represents '0' with '5836'
c Var 'aux1370' order represents '1' with '5837'
-5836 5837 0
c Var 'aux1370' direct represents '1' with '5838'
5836 -5837 5838 0
-5838 5837 0
-5838 -5836 0
c Var 'aux1370' direct represents '2' with '-5837'
5836 5838 -5837 0
c Encoding variable: aux1371 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5839'
c Var 'aux1371' direct represents '0' with '5839'
c Var 'aux1371' order represents '1' with '5840'
-5839 5840 0
c Var 'aux1371' direct represents '1' with '5841'
5839 -5840 5841 0
-5841 5840 0
-5841 -5839 0
c Var 'aux1371' direct represents '2' with '-5840'
5839 5841 -5840 0
c Encoding variable: aux1372 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5842'
c Var 'aux1372' direct represents '0' with '5842'
c Var 'aux1372' order represents '1' with '5843'
-5842 5843 0
c Var 'aux1372' direct represents '1' with '5844'
5842 -5843 5844 0
-5844 5843 0
-5844 -5842 0
c Var 'aux1372' direct represents '2' with '-5843'
5842 5844 -5843 0
c Encoding variable: aux1373 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1372))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5845'
c Var 'aux1373' direct represents '0' with '5845'
c Var 'aux1373' order represents '1' with '5846'
-5845 5846 0
c Var 'aux1373' direct represents '1' with '5847'
5845 -5846 5847 0
-5847 5846 0
-5847 -5845 0
c Var 'aux1373' order represents '2' with '5848'
-5846 5848 0
c Var 'aux1373' direct represents '2' with '5849'
5846 -5848 5849 0
-5849 5848 0
-5849 -5846 0
c Var 'aux1373' direct represents '3' with '-5848'
5845 5847 5849 -5848 0
c Encoding variable: aux1374 with domain: int(0..4) (representing constraint (aux1369 + aux1371))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5850'
c Var 'aux1374' direct represents '0' with '5850'
c Var 'aux1374' order represents '1' with '5851'
-5850 5851 0
c Var 'aux1374' direct represents '1' with '5852'
5850 -5851 5852 0
-5852 5851 0
-5852 -5850 0
c Var 'aux1374' order represents '2' with '5853'
-5851 5853 0
c Var 'aux1374' direct represents '2' with '5854'
5851 -5853 5854 0
-5854 5853 0
-5854 -5851 0
c Var 'aux1374' order represents '3' with '5855'
-5853 5855 0
c Var 'aux1374' direct represents '3' with '5856'
5853 -5855 5856 0
-5856 5855 0
-5856 -5853 0
c Var 'aux1374' direct represents '4' with '-5855'
5850 5852 5854 5856 -5855 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5857'
c Var 'aux1375' direct represents '0' with '5857'
c Var 'aux1375' order represents '1' with '5858'
-5857 5858 0
c Var 'aux1375' direct represents '1' with '5859'
5857 -5858 5859 0
-5859 5858 0
-5859 -5857 0
c Var 'aux1375' direct represents '2' with '-5858'
5857 5859 -5858 0
c Encoding variable: aux1376 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5860'
c Var 'aux1376' direct represents '0' with '5860'
c Var 'aux1376' order represents '1' with '5861'
-5860 5861 0
c Var 'aux1376' direct represents '1' with '5862'
5860 -5861 5862 0
-5862 5861 0
-5862 -5860 0
c Var 'aux1376' direct represents '2' with '-5861'
5860 5862 -5861 0
c Encoding variable: aux1377 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5863'
c Var 'aux1377' direct represents '0' with '5863'
c Var 'aux1377' order represents '1' with '5864'
-5863 5864 0
c Var 'aux1377' direct represents '1' with '5865'
5863 -5864 5865 0
-5865 5864 0
-5865 -5863 0
c Var 'aux1377' direct represents '2' with '-5864'
5863 5865 -5864 0
c Encoding variable: aux1378 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5866'
c Var 'aux1378' direct represents '0' with '5866'
c Var 'aux1378' order represents '1' with '5867'
-5866 5867 0
c Var 'aux1378' direct represents '1' with '5868'
5866 -5867 5868 0
-5868 5867 0
-5868 -5866 0
c Var 'aux1378' direct represents '2' with '-5867'
5866 5868 -5867 0
c Encoding variable: aux1379 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1378))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5869'
c Var 'aux1379' direct represents '0' with '5869'
c Var 'aux1379' order represents '1' with '5870'
-5869 5870 0
c Var 'aux1379' direct represents '1' with '5871'
5869 -5870 5871 0
-5871 5870 0
-5871 -5869 0
c Var 'aux1379' order represents '2' with '5872'
-5870 5872 0
c Var 'aux1379' direct represents '2' with '5873'
5870 -5872 5873 0
-5873 5872 0
-5873 -5870 0
c Var 'aux1379' direct represents '3' with '-5872'
5869 5871 5873 -5872 0
c Encoding variable: aux1380 with domain: int(0..4) (representing constraint (aux1375 + aux1377))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5874'
c Var 'aux1380' direct represents '0' with '5874'
c Var 'aux1380' order represents '1' with '5875'
-5874 5875 0
c Var 'aux1380' direct represents '1' with '5876'
5874 -5875 5876 0
-5876 5875 0
-5876 -5874 0
c Var 'aux1380' order represents '2' with '5877'
-5875 5877 0
c Var 'aux1380' direct represents '2' with '5878'
5875 -5877 5878 0
-5878 5877 0
-5878 -5875 0
c Var 'aux1380' order represents '3' with '5879'
-5877 5879 0
c Var 'aux1380' direct represents '3' with '5880'
5877 -5879 5880 0
-5880 5879 0
-5880 -5877 0
c Var 'aux1380' direct represents '4' with '-5879'
5874 5876 5878 5880 -5879 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5881'
c Var 'aux1381' direct represents '0' with '5881'
c Var 'aux1381' order represents '1' with '5882'
-5881 5882 0
c Var 'aux1381' direct represents '1' with '5883'
5881 -5882 5883 0
-5883 5882 0
-5883 -5881 0
c Var 'aux1381' direct represents '2' with '-5882'
5881 5883 -5882 0
c Encoding variable: aux1382 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5884'
c Var 'aux1382' direct represents '0' with '5884'
c Var 'aux1382' order represents '1' with '5885'
-5884 5885 0
c Var 'aux1382' direct represents '1' with '5886'
5884 -5885 5886 0
-5886 5885 0
-5886 -5884 0
c Var 'aux1382' direct represents '2' with '-5885'
5884 5886 -5885 0
c Encoding variable: aux1383 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5887'
c Var 'aux1383' direct represents '0' with '5887'
c Var 'aux1383' order represents '1' with '5888'
-5887 5888 0
c Var 'aux1383' direct represents '1' with '5889'
5887 -5888 5889 0
-5889 5888 0
-5889 -5887 0
c Var 'aux1383' direct represents '2' with '-5888'
5887 5889 -5888 0
c Encoding variable: aux1384 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5890'
c Var 'aux1384' direct represents '0' with '5890'
c Var 'aux1384' order represents '1' with '5891'
-5890 5891 0
c Var 'aux1384' direct represents '1' with '5892'
5890 -5891 5892 0
-5892 5891 0
-5892 -5890 0
c Var 'aux1384' direct represents '2' with '-5891'
5890 5892 -5891 0
c Encoding variable: aux1385 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1384))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5893'
c Var 'aux1385' direct represents '0' with '5893'
c Var 'aux1385' order represents '1' with '5894'
-5893 5894 0
c Var 'aux1385' direct represents '1' with '5895'
5893 -5894 5895 0
-5895 5894 0
-5895 -5893 0
c Var 'aux1385' order represents '2' with '5896'
-5894 5896 0
c Var 'aux1385' direct represents '2' with '5897'
5894 -5896 5897 0
-5897 5896 0
-5897 -5894 0
c Var 'aux1385' direct represents '3' with '-5896'
5893 5895 5897 -5896 0
c Encoding variable: aux1386 with domain: int(0..4) (representing constraint (aux1381 + aux1383))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5898'
c Var 'aux1386' direct represents '0' with '5898'
c Var 'aux1386' order represents '1' with '5899'
-5898 5899 0
c Var 'aux1386' direct represents '1' with '5900'
5898 -5899 5900 0
-5900 5899 0
-5900 -5898 0
c Var 'aux1386' order represents '2' with '5901'
-5899 5901 0
c Var 'aux1386' direct represents '2' with '5902'
5899 -5901 5902 0
-5902 5901 0
-5902 -5899 0
c Var 'aux1386' order represents '3' with '5903'
-5901 5903 0
c Var 'aux1386' direct represents '3' with '5904'
5901 -5903 5904 0
-5904 5903 0
-5904 -5901 0
c Var 'aux1386' direct represents '4' with '-5903'
5898 5900 5902 5904 -5903 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5905'
c Var 'aux1387' direct represents '0' with '5905'
c Var 'aux1387' order represents '1' with '5906'
-5905 5906 0
c Var 'aux1387' direct represents '1' with '5907'
5905 -5906 5907 0
-5907 5906 0
-5907 -5905 0
c Var 'aux1387' direct represents '2' with '-5906'
5905 5907 -5906 0
c Encoding variable: aux1388 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5908'
c Var 'aux1388' direct represents '0' with '5908'
c Var 'aux1388' order represents '1' with '5909'
-5908 5909 0
c Var 'aux1388' direct represents '1' with '5910'
5908 -5909 5910 0
-5910 5909 0
-5910 -5908 0
c Var 'aux1388' direct represents '2' with '-5909'
5908 5910 -5909 0
c Encoding variable: aux1389 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5911'
c Var 'aux1389' direct represents '0' with '5911'
c Var 'aux1389' order represents '1' with '5912'
-5911 5912 0
c Var 'aux1389' direct represents '1' with '5913'
5911 -5912 5913 0
-5913 5912 0
-5913 -5911 0
c Var 'aux1389' direct represents '2' with '-5912'
5911 5913 -5912 0
c Encoding variable: aux1390 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5914'
c Var 'aux1390' direct represents '0' with '5914'
c Var 'aux1390' order represents '1' with '5915'
-5914 5915 0
c Var 'aux1390' direct represents '1' with '5916'
5914 -5915 5916 0
-5916 5915 0
-5916 -5914 0
c Var 'aux1390' direct represents '2' with '-5915'
5914 5916 -5915 0
c Encoding variable: aux1391 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1390))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5917'
c Var 'aux1391' direct represents '0' with '5917'
c Var 'aux1391' order represents '1' with '5918'
-5917 5918 0
c Var 'aux1391' direct represents '1' with '5919'
5917 -5918 5919 0
-5919 5918 0
-5919 -5917 0
c Var 'aux1391' order represents '2' with '5920'
-5918 5920 0
c Var 'aux1391' direct represents '2' with '5921'
5918 -5920 5921 0
-5921 5920 0
-5921 -5918 0
c Var 'aux1391' direct represents '3' with '-5920'
5917 5919 5921 -5920 0
c Encoding variable: aux1392 with domain: int(0..4) (representing constraint (aux1387 + aux1389))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5922'
c Var 'aux1392' direct represents '0' with '5922'
c Var 'aux1392' order represents '1' with '5923'
-5922 5923 0
c Var 'aux1392' direct represents '1' with '5924'
5922 -5923 5924 0
-5924 5923 0
-5924 -5922 0
c Var 'aux1392' order represents '2' with '5925'
-5923 5925 0
c Var 'aux1392' direct represents '2' with '5926'
5923 -5925 5926 0
-5926 5925 0
-5926 -5923 0
c Var 'aux1392' order represents '3' with '5927'
-5925 5927 0
c Var 'aux1392' direct represents '3' with '5928'
5925 -5927 5928 0
-5928 5927 0
-5928 -5925 0
c Var 'aux1392' direct represents '4' with '-5927'
5922 5924 5926 5928 -5927 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5929'
c Var 'aux1393' direct represents '0' with '5929'
c Var 'aux1393' order represents '1' with '5930'
-5929 5930 0
c Var 'aux1393' direct represents '1' with '5931'
5929 -5930 5931 0
-5931 5930 0
-5931 -5929 0
c Var 'aux1393' direct represents '2' with '-5930'
5929 5931 -5930 0
c Encoding variable: aux1394 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5932'
c Var 'aux1394' direct represents '0' with '5932'
c Var 'aux1394' order represents '1' with '5933'
-5932 5933 0
c Var 'aux1394' direct represents '1' with '5934'
5932 -5933 5934 0
-5934 5933 0
-5934 -5932 0
c Var 'aux1394' direct represents '2' with '-5933'
5932 5934 -5933 0
c Encoding variable: aux1395 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5935'
c Var 'aux1395' direct represents '0' with '5935'
c Var 'aux1395' order represents '1' with '5936'
-5935 5936 0
c Var 'aux1395' direct represents '1' with '5937'
5935 -5936 5937 0
-5937 5936 0
-5937 -5935 0
c Var 'aux1395' direct represents '2' with '-5936'
5935 5937 -5936 0
c Encoding variable: aux1396 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5938'
c Var 'aux1396' direct represents '0' with '5938'
c Var 'aux1396' order represents '1' with '5939'
-5938 5939 0
c Var 'aux1396' direct represents '1' with '5940'
5938 -5939 5940 0
-5940 5939 0
-5940 -5938 0
c Var 'aux1396' direct represents '2' with '-5939'
5938 5940 -5939 0
c Encoding variable: aux1397 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1396))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5941'
c Var 'aux1397' direct represents '0' with '5941'
c Var 'aux1397' order represents '1' with '5942'
-5941 5942 0
c Var 'aux1397' direct represents '1' with '5943'
5941 -5942 5943 0
-5943 5942 0
-5943 -5941 0
c Var 'aux1397' order represents '2' with '5944'
-5942 5944 0
c Var 'aux1397' direct represents '2' with '5945'
5942 -5944 5945 0
-5945 5944 0
-5945 -5942 0
c Var 'aux1397' direct represents '3' with '-5944'
5941 5943 5945 -5944 0
c Encoding variable: aux1398 with domain: int(0..4) (representing constraint (aux1393 + aux1395))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5946'
c Var 'aux1398' direct represents '0' with '5946'
c Var 'aux1398' order represents '1' with '5947'
-5946 5947 0
c Var 'aux1398' direct represents '1' with '5948'
5946 -5947 5948 0
-5948 5947 0
-5948 -5946 0
c Var 'aux1398' order represents '2' with '5949'
-5947 5949 0
c Var 'aux1398' direct represents '2' with '5950'
5947 -5949 5950 0
-5950 5949 0
-5950 -5947 0
c Var 'aux1398' order represents '3' with '5951'
-5949 5951 0
c Var 'aux1398' direct represents '3' with '5952'
5949 -5951 5952 0
-5952 5951 0
-5952 -5949 0
c Var 'aux1398' direct represents '4' with '-5951'
5946 5948 5950 5952 -5951 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5953'
c Var 'aux1399' direct represents '0' with '5953'
c Var 'aux1399' order represents '1' with '5954'
-5953 5954 0
c Var 'aux1399' direct represents '1' with '5955'
5953 -5954 5955 0
-5955 5954 0
-5955 -5953 0
c Var 'aux1399' direct represents '2' with '-5954'
5953 5955 -5954 0
c Encoding variable: aux1400 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5956'
c Var 'aux1400' direct represents '0' with '5956'
c Var 'aux1400' order represents '1' with '5957'
-5956 5957 0
c Var 'aux1400' direct represents '1' with '5958'
5956 -5957 5958 0
-5958 5957 0
-5958 -5956 0
c Var 'aux1400' direct represents '2' with '-5957'
5956 5958 -5957 0
c Encoding variable: aux1401 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5959'
c Var 'aux1401' direct represents '0' with '5959'
c Var 'aux1401' order represents '1' with '5960'
-5959 5960 0
c Var 'aux1401' direct represents '1' with '5961'
5959 -5960 5961 0
-5961 5960 0
-5961 -5959 0
c Var 'aux1401' direct represents '2' with '-5960'
5959 5961 -5960 0
c Encoding variable: aux1402 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5962'
c Var 'aux1402' direct represents '0' with '5962'
c Var 'aux1402' order represents '1' with '5963'
-5962 5963 0
c Var 'aux1402' direct represents '1' with '5964'
5962 -5963 5964 0
-5964 5963 0
-5964 -5962 0
c Var 'aux1402' direct represents '2' with '-5963'
5962 5964 -5963 0
c Encoding variable: aux1403 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1402))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5965'
c Var 'aux1403' direct represents '0' with '5965'
c Var 'aux1403' order represents '1' with '5966'
-5965 5966 0
c Var 'aux1403' direct represents '1' with '5967'
5965 -5966 5967 0
-5967 5966 0
-5967 -5965 0
c Var 'aux1403' order represents '2' with '5968'
-5966 5968 0
c Var 'aux1403' direct represents '2' with '5969'
5966 -5968 5969 0
-5969 5968 0
-5969 -5966 0
c Var 'aux1403' direct represents '3' with '-5968'
5965 5967 5969 -5968 0
c Encoding variable: aux1404 with domain: int(0..4) (representing constraint (aux1399 + aux1401))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5970'
c Var 'aux1404' direct represents '0' with '5970'
c Var 'aux1404' order represents '1' with '5971'
-5970 5971 0
c Var 'aux1404' direct represents '1' with '5972'
5970 -5971 5972 0
-5972 5971 0
-5972 -5970 0
c Var 'aux1404' order represents '2' with '5973'
-5971 5973 0
c Var 'aux1404' direct represents '2' with '5974'
5971 -5973 5974 0
-5974 5973 0
-5974 -5971 0
c Var 'aux1404' order represents '3' with '5975'
-5973 5975 0
c Var 'aux1404' direct represents '3' with '5976'
5973 -5975 5976 0
-5976 5975 0
-5976 -5973 0
c Var 'aux1404' direct represents '4' with '-5975'
5970 5972 5974 5976 -5975 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5977'
c Var 'aux1405' direct represents '0' with '5977'
c Var 'aux1405' order represents '1' with '5978'
-5977 5978 0
c Var 'aux1405' direct represents '1' with '5979'
5977 -5978 5979 0
-5979 5978 0
-5979 -5977 0
c Var 'aux1405' direct represents '2' with '-5978'
5977 5979 -5978 0
c Encoding variable: aux1406 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5980'
c Var 'aux1406' direct represents '0' with '5980'
c Var 'aux1406' order represents '1' with '5981'
-5980 5981 0
c Var 'aux1406' direct represents '1' with '5982'
5980 -5981 5982 0
-5982 5981 0
-5982 -5980 0
c Var 'aux1406' direct represents '2' with '-5981'
5980 5982 -5981 0
c Encoding variable: aux1407 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5983'
c Var 'aux1407' direct represents '0' with '5983'
c Var 'aux1407' order represents '1' with '5984'
-5983 5984 0
c Var 'aux1407' direct represents '1' with '5985'
5983 -5984 5985 0
-5985 5984 0
-5985 -5983 0
c Var 'aux1407' direct represents '2' with '-5984'
5983 5985 -5984 0
c Encoding variable: aux1408 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5986'
c Var 'aux1408' direct represents '0' with '5986'
c Var 'aux1408' order represents '1' with '5987'
-5986 5987 0
c Var 'aux1408' direct represents '1' with '5988'
5986 -5987 5988 0
-5988 5987 0
-5988 -5986 0
c Var 'aux1408' direct represents '2' with '-5987'
5986 5988 -5987 0
c Encoding variable: aux1409 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1408))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5989'
c Var 'aux1409' direct represents '0' with '5989'
c Var 'aux1409' order represents '1' with '5990'
-5989 5990 0
c Var 'aux1409' direct represents '1' with '5991'
5989 -5990 5991 0
-5991 5990 0
-5991 -5989 0
c Var 'aux1409' order represents '2' with '5992'
-5990 5992 0
c Var 'aux1409' direct represents '2' with '5993'
5990 -5992 5993 0
-5993 5992 0
-5993 -5990 0
c Var 'aux1409' direct represents '3' with '-5992'
5989 5991 5993 -5992 0
c Encoding variable: aux1410 with domain: int(0..4) (representing constraint (aux1405 + aux1407))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5994'
c Var 'aux1410' direct represents '0' with '5994'
c Var 'aux1410' order represents '1' with '5995'
-5994 5995 0
c Var 'aux1410' direct represents '1' with '5996'
5994 -5995 5996 0
-5996 5995 0
-5996 -5994 0
c Var 'aux1410' order represents '2' with '5997'
-5995 5997 0
c Var 'aux1410' direct represents '2' with '5998'
5995 -5997 5998 0
-5998 5997 0
-5998 -5995 0
c Var 'aux1410' order represents '3' with '5999'
-5997 5999 0
c Var 'aux1410' direct represents '3' with '6000'
5997 -5999 6000 0
-6000 5999 0
-6000 -5997 0
c Var 'aux1410' direct represents '4' with '-5999'
5994 5996 5998 6000 -5999 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '6001'
c Var 'aux1411' direct represents '0' with '6001'
c Var 'aux1411' order represents '1' with '6002'
-6001 6002 0
c Var 'aux1411' direct represents '1' with '6003'
6001 -6002 6003 0
-6003 6002 0
-6003 -6001 0
c Var 'aux1411' direct represents '2' with '-6002'
6001 6003 -6002 0
c Encoding variable: aux1412 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '6004'
c Var 'aux1412' direct represents '0' with '6004'
c Var 'aux1412' order represents '1' with '6005'
-6004 6005 0
c Var 'aux1412' direct represents '1' with '6006'
6004 -6005 6006 0
-6006 6005 0
-6006 -6004 0
c Var 'aux1412' direct represents '2' with '-6005'
6004 6006 -6005 0
c Encoding variable: aux1413 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '6007'
c Var 'aux1413' direct represents '0' with '6007'
c Var 'aux1413' order represents '1' with '6008'
-6007 6008 0
c Var 'aux1413' direct represents '1' with '6009'
6007 -6008 6009 0
-6009 6008 0
-6009 -6007 0
c Var 'aux1413' direct represents '2' with '-6008'
6007 6009 -6008 0
c Encoding variable: aux1414 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '6010'
c Var 'aux1414' direct represents '0' with '6010'
c Var 'aux1414' order represents '1' with '6011'
-6010 6011 0
c Var 'aux1414' direct represents '1' with '6012'
6010 -6011 6012 0
-6012 6011 0
-6012 -6010 0
c Var 'aux1414' direct represents '2' with '-6011'
6010 6012 -6011 0
c Encoding variable: aux1415 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1414))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '6013'
c Var 'aux1415' direct represents '0' with '6013'
c Var 'aux1415' order represents '1' with '6014'
-6013 6014 0
c Var 'aux1415' direct represents '1' with '6015'
6013 -6014 6015 0
-6015 6014 0
-6015 -6013 0
c Var 'aux1415' order represents '2' with '6016'
-6014 6016 0
c Var 'aux1415' direct represents '2' with '6017'
6014 -6016 6017 0
-6017 6016 0
-6017 -6014 0
c Var 'aux1415' direct represents '3' with '-6016'
6013 6015 6017 -6016 0
c Encoding variable: aux1416 with domain: int(0..4) (representing constraint (aux1411 + aux1413))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '6018'
c Var 'aux1416' direct represents '0' with '6018'
c Var 'aux1416' order represents '1' with '6019'
-6018 6019 0
c Var 'aux1416' direct represents '1' with '6020'
6018 -6019 6020 0
-6020 6019 0
-6020 -6018 0
c Var 'aux1416' order represents '2' with '6021'
-6019 6021 0
c Var 'aux1416' direct represents '2' with '6022'
6019 -6021 6022 0
-6022 6021 0
-6022 -6019 0
c Var 'aux1416' order represents '3' with '6023'
-6021 6023 0
c Var 'aux1416' direct represents '3' with '6024'
6021 -6023 6024 0
-6024 6023 0
-6024 -6021 0
c Var 'aux1416' direct represents '4' with '-6023'
6018 6020 6022 6024 -6023 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '6025'
c Var 'aux1417' direct represents '0' with '6025'
c Var 'aux1417' order represents '1' with '6026'
-6025 6026 0
c Var 'aux1417' direct represents '1' with '6027'
6025 -6026 6027 0
-6027 6026 0
-6027 -6025 0
c Var 'aux1417' direct represents '2' with '-6026'
6025 6027 -6026 0
c Encoding variable: aux1418 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '6028'
c Var 'aux1418' direct represents '0' with '6028'
c Var 'aux1418' order represents '1' with '6029'
-6028 6029 0
c Var 'aux1418' direct represents '1' with '6030'
6028 -6029 6030 0
-6030 6029 0
-6030 -6028 0
c Var 'aux1418' direct represents '2' with '-6029'
6028 6030 -6029 0
c Encoding variable: aux1419 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '6031'
c Var 'aux1419' direct represents '0' with '6031'
c Var 'aux1419' order represents '1' with '6032'
-6031 6032 0
c Var 'aux1419' direct represents '1' with '6033'
6031 -6032 6033 0
-6033 6032 0
-6033 -6031 0
c Var 'aux1419' direct represents '2' with '-6032'
6031 6033 -6032 0
c Encoding variable: aux1420 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '6034'
c Var 'aux1420' direct represents '0' with '6034'
c Var 'aux1420' order represents '1' with '6035'
-6034 6035 0
c Var 'aux1420' direct represents '1' with '6036'
6034 -6035 6036 0
-6036 6035 0
-6036 -6034 0
c Var 'aux1420' direct represents '2' with '-6035'
6034 6036 -6035 0
c Encoding variable: aux1421 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1420))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '6037'
c Var 'aux1421' direct represents '0' with '6037'
c Var 'aux1421' order represents '1' with '6038'
-6037 6038 0
c Var 'aux1421' direct represents '1' with '6039'
6037 -6038 6039 0
-6039 6038 0
-6039 -6037 0
c Var 'aux1421' order represents '2' with '6040'
-6038 6040 0
c Var 'aux1421' direct represents '2' with '6041'
6038 -6040 6041 0
-6041 6040 0
-6041 -6038 0
c Var 'aux1421' direct represents '3' with '-6040'
6037 6039 6041 -6040 0
c Encoding variable: aux1422 with domain: int(0..4) (representing constraint (aux1417 + aux1419))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '6042'
c Var 'aux1422' direct represents '0' with '6042'
c Var 'aux1422' order represents '1' with '6043'
-6042 6043 0
c Var 'aux1422' direct represents '1' with '6044'
6042 -6043 6044 0
-6044 6043 0
-6044 -6042 0
c Var 'aux1422' order represents '2' with '6045'
-6043 6045 0
c Var 'aux1422' direct represents '2' with '6046'
6043 -6045 6046 0
-6046 6045 0
-6046 -6043 0
c Var 'aux1422' order represents '3' with '6047'
-6045 6047 0
c Var 'aux1422' direct represents '3' with '6048'
6045 -6047 6048 0
-6048 6047 0
-6048 -6045 0
c Var 'aux1422' direct represents '4' with '-6047'
6042 6044 6046 6048 -6047 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '6049'
c Var 'aux1423' direct represents '0' with '6049'
c Var 'aux1423' order represents '1' with '6050'
-6049 6050 0
c Var 'aux1423' direct represents '1' with '6051'
6049 -6050 6051 0
-6051 6050 0
-6051 -6049 0
c Var 'aux1423' direct represents '2' with '-6050'
6049 6051 -6050 0
c Encoding variable: aux1424 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '6052'
c Var 'aux1424' direct represents '0' with '6052'
c Var 'aux1424' order represents '1' with '6053'
-6052 6053 0
c Var 'aux1424' direct represents '1' with '6054'
6052 -6053 6054 0
-6054 6053 0
-6054 -6052 0
c Var 'aux1424' direct represents '2' with '-6053'
6052 6054 -6053 0
c Encoding variable: aux1425 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '6055'
c Var 'aux1425' direct represents '0' with '6055'
c Var 'aux1425' order represents '1' with '6056'
-6055 6056 0
c Var 'aux1425' direct represents '1' with '6057'
6055 -6056 6057 0
-6057 6056 0
-6057 -6055 0
c Var 'aux1425' direct represents '2' with '-6056'
6055 6057 -6056 0
c Encoding variable: aux1426 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '6058'
c Var 'aux1426' direct represents '0' with '6058'
c Var 'aux1426' order represents '1' with '6059'
-6058 6059 0
c Var 'aux1426' direct represents '1' with '6060'
6058 -6059 6060 0
-6060 6059 0
-6060 -6058 0
c Var 'aux1426' direct represents '2' with '-6059'
6058 6060 -6059 0
c Encoding variable: aux1427 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1426))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '6061'
c Var 'aux1427' direct represents '0' with '6061'
c Var 'aux1427' order represents '1' with '6062'
-6061 6062 0
c Var 'aux1427' direct represents '1' with '6063'
6061 -6062 6063 0
-6063 6062 0
-6063 -6061 0
c Var 'aux1427' order represents '2' with '6064'
-6062 6064 0
c Var 'aux1427' direct represents '2' with '6065'
6062 -6064 6065 0
-6065 6064 0
-6065 -6062 0
c Var 'aux1427' direct represents '3' with '-6064'
6061 6063 6065 -6064 0
c Encoding variable: aux1428 with domain: int(0..4) (representing constraint (aux1423 + aux1425))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '6066'
c Var 'aux1428' direct represents '0' with '6066'
c Var 'aux1428' order represents '1' with '6067'
-6066 6067 0
c Var 'aux1428' direct represents '1' with '6068'
6066 -6067 6068 0
-6068 6067 0
-6068 -6066 0
c Var 'aux1428' order represents '2' with '6069'
-6067 6069 0
c Var 'aux1428' direct represents '2' with '6070'
6067 -6069 6070 0
-6070 6069 0
-6070 -6067 0
c Var 'aux1428' order represents '3' with '6071'
-6069 6071 0
c Var 'aux1428' direct represents '3' with '6072'
6069 -6071 6072 0
-6072 6071 0
-6072 -6069 0
c Var 'aux1428' direct represents '4' with '-6071'
6066 6068 6070 6072 -6071 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '6073'
c Var 'aux1429' direct represents '0' with '6073'
c Var 'aux1429' order represents '1' with '6074'
-6073 6074 0
c Var 'aux1429' direct represents '1' with '6075'
6073 -6074 6075 0
-6075 6074 0
-6075 -6073 0
c Var 'aux1429' direct represents '2' with '-6074'
6073 6075 -6074 0
c Encoding variable: aux1430 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '6076'
c Var 'aux1430' direct represents '0' with '6076'
c Var 'aux1430' order represents '1' with '6077'
-6076 6077 0
c Var 'aux1430' direct represents '1' with '6078'
6076 -6077 6078 0
-6078 6077 0
-6078 -6076 0
c Var 'aux1430' direct represents '2' with '-6077'
6076 6078 -6077 0
c Encoding variable: aux1431 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '6079'
c Var 'aux1431' direct represents '0' with '6079'
c Var 'aux1431' order represents '1' with '6080'
-6079 6080 0
c Var 'aux1431' direct represents '1' with '6081'
6079 -6080 6081 0
-6081 6080 0
-6081 -6079 0
c Var 'aux1431' direct represents '2' with '-6080'
6079 6081 -6080 0
c Encoding variable: aux1432 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '6082'
c Var 'aux1432' direct represents '0' with '6082'
c Var 'aux1432' order represents '1' with '6083'
-6082 6083 0
c Var 'aux1432' direct represents '1' with '6084'
6082 -6083 6084 0
-6084 6083 0
-6084 -6082 0
c Var 'aux1432' direct represents '2' with '-6083'
6082 6084 -6083 0
c Encoding variable: aux1433 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1432))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '6085'
c Var 'aux1433' direct represents '0' with '6085'
c Var 'aux1433' order represents '1' with '6086'
-6085 6086 0
c Var 'aux1433' direct represents '1' with '6087'
6085 -6086 6087 0
-6087 6086 0
-6087 -6085 0
c Var 'aux1433' order represents '2' with '6088'
-6086 6088 0
c Var 'aux1433' direct represents '2' with '6089'
6086 -6088 6089 0
-6089 6088 0
-6089 -6086 0
c Var 'aux1433' direct represents '3' with '-6088'
6085 6087 6089 -6088 0
c Encoding variable: aux1434 with domain: int(0..4) (representing constraint (aux1429 + aux1431))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '6090'
c Var 'aux1434' direct represents '0' with '6090'
c Var 'aux1434' order represents '1' with '6091'
-6090 6091 0
c Var 'aux1434' direct represents '1' with '6092'
6090 -6091 6092 0
-6092 6091 0
-6092 -6090 0
c Var 'aux1434' order represents '2' with '6093'
-6091 6093 0
c Var 'aux1434' direct represents '2' with '6094'
6091 -6093 6094 0
-6094 6093 0
-6094 -6091 0
c Var 'aux1434' order represents '3' with '6095'
-6093 6095 0
c Var 'aux1434' direct represents '3' with '6096'
6093 -6095 6096 0
-6096 6095 0
-6096 -6093 0
c Var 'aux1434' direct represents '4' with '-6095'
6090 6092 6094 6096 -6095 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '6097'
c Var 'aux1435' direct represents '0' with '6097'
c Var 'aux1435' order represents '1' with '6098'
-6097 6098 0
c Var 'aux1435' direct represents '1' with '6099'
6097 -6098 6099 0
-6099 6098 0
-6099 -6097 0
c Var 'aux1435' direct represents '2' with '-6098'
6097 6099 -6098 0
c Encoding variable: aux1436 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '6100'
c Var 'aux1436' direct represents '0' with '6100'
c Var 'aux1436' order represents '1' with '6101'
-6100 6101 0
c Var 'aux1436' direct represents '1' with '6102'
6100 -6101 6102 0
-6102 6101 0
-6102 -6100 0
c Var 'aux1436' direct represents '2' with '-6101'
6100 6102 -6101 0
c Encoding variable: aux1437 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '6103'
c Var 'aux1437' direct represents '0' with '6103'
c Var 'aux1437' order represents '1' with '6104'
-6103 6104 0
c Var 'aux1437' direct represents '1' with '6105'
6103 -6104 6105 0
-6105 6104 0
-6105 -6103 0
c Var 'aux1437' direct represents '2' with '-6104'
6103 6105 -6104 0
c Encoding variable: aux1438 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '6106'
c Var 'aux1438' direct represents '0' with '6106'
c Var 'aux1438' order represents '1' with '6107'
-6106 6107 0
c Var 'aux1438' direct represents '1' with '6108'
6106 -6107 6108 0
-6108 6107 0
-6108 -6106 0
c Var 'aux1438' direct represents '2' with '-6107'
6106 6108 -6107 0
c Encoding variable: aux1439 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1438))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '6109'
c Var 'aux1439' direct represents '0' with '6109'
c Var 'aux1439' order represents '1' with '6110'
-6109 6110 0
c Var 'aux1439' direct represents '1' with '6111'
6109 -6110 6111 0
-6111 6110 0
-6111 -6109 0
c Var 'aux1439' order represents '2' with '6112'
-6110 6112 0
c Var 'aux1439' direct represents '2' with '6113'
6110 -6112 6113 0
-6113 6112 0
-6113 -6110 0
c Var 'aux1439' direct represents '3' with '-6112'
6109 6111 6113 -6112 0
c Encoding variable: aux1440 with domain: int(0..4) (representing constraint (aux1435 + aux1437))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '6114'
c Var 'aux1440' direct represents '0' with '6114'
c Var 'aux1440' order represents '1' with '6115'
-6114 6115 0
c Var 'aux1440' direct represents '1' with '6116'
6114 -6115 6116 0
-6116 6115 0
-6116 -6114 0
c Var 'aux1440' order represents '2' with '6117'
-6115 6117 0
c Var 'aux1440' direct represents '2' with '6118'
6115 -6117 6118 0
-6118 6117 0
-6118 -6115 0
c Var 'aux1440' order represents '3' with '6119'
-6117 6119 0
c Var 'aux1440' direct represents '3' with '6120'
6117 -6119 6120 0
-6120 6119 0
-6120 -6117 0
c Var 'aux1440' direct represents '4' with '-6119'
6114 6116 6118 6120 -6119 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '6121'
c Var 'aux1441' direct represents '0' with '6121'
c Var 'aux1441' order represents '1' with '6122'
-6121 6122 0
c Var 'aux1441' direct represents '1' with '6123'
6121 -6122 6123 0
-6123 6122 0
-6123 -6121 0
c Var 'aux1441' direct represents '2' with '-6122'
6121 6123 -6122 0
c Encoding variable: aux1442 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '6124'
c Var 'aux1442' direct represents '0' with '6124'
c Var 'aux1442' order represents '1' with '6125'
-6124 6125 0
c Var 'aux1442' direct represents '1' with '6126'
6124 -6125 6126 0
-6126 6125 0
-6126 -6124 0
c Var 'aux1442' direct represents '2' with '-6125'
6124 6126 -6125 0
c Encoding variable: aux1443 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '6127'
c Var 'aux1443' direct represents '0' with '6127'
c Var 'aux1443' order represents '1' with '6128'
-6127 6128 0
c Var 'aux1443' direct represents '1' with '6129'
6127 -6128 6129 0
-6129 6128 0
-6129 -6127 0
c Var 'aux1443' direct represents '2' with '-6128'
6127 6129 -6128 0
c Encoding variable: aux1444 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '6130'
c Var 'aux1444' direct represents '0' with '6130'
c Var 'aux1444' order represents '1' with '6131'
-6130 6131 0
c Var 'aux1444' direct represents '1' with '6132'
6130 -6131 6132 0
-6132 6131 0
-6132 -6130 0
c Var 'aux1444' direct represents '2' with '-6131'
6130 6132 -6131 0
c Encoding variable: aux1445 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1444))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '6133'
c Var 'aux1445' direct represents '0' with '6133'
c Var 'aux1445' order represents '1' with '6134'
-6133 6134 0
c Var 'aux1445' direct represents '1' with '6135'
6133 -6134 6135 0
-6135 6134 0
-6135 -6133 0
c Var 'aux1445' order represents '2' with '6136'
-6134 6136 0
c Var 'aux1445' direct represents '2' with '6137'
6134 -6136 6137 0
-6137 6136 0
-6137 -6134 0
c Var 'aux1445' direct represents '3' with '-6136'
6133 6135 6137 -6136 0
c Encoding variable: aux1446 with domain: int(0..4) (representing constraint (aux1441 + aux1443))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '6138'
c Var 'aux1446' direct represents '0' with '6138'
c Var 'aux1446' order represents '1' with '6139'
-6138 6139 0
c Var 'aux1446' direct represents '1' with '6140'
6138 -6139 6140 0
-6140 6139 0
-6140 -6138 0
c Var 'aux1446' order represents '2' with '6141'
-6139 6141 0
c Var 'aux1446' direct represents '2' with '6142'
6139 -6141 6142 0
-6142 6141 0
-6142 -6139 0
c Var 'aux1446' order represents '3' with '6143'
-6141 6143 0
c Var 'aux1446' direct represents '3' with '6144'
6141 -6143 6144 0
-6144 6143 0
-6144 -6141 0
c Var 'aux1446' direct represents '4' with '-6143'
6138 6140 6142 6144 -6143 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '6145'
c Var 'aux1447' direct represents '0' with '6145'
c Var 'aux1447' order represents '1' with '6146'
-6145 6146 0
c Var 'aux1447' direct represents '1' with '6147'
6145 -6146 6147 0
-6147 6146 0
-6147 -6145 0
c Var 'aux1447' direct represents '2' with '-6146'
6145 6147 -6146 0
c Encoding variable: aux1448 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '6148'
c Var 'aux1448' direct represents '0' with '6148'
c Var 'aux1448' order represents '1' with '6149'
-6148 6149 0
c Var 'aux1448' direct represents '1' with '6150'
6148 -6149 6150 0
-6150 6149 0
-6150 -6148 0
c Var 'aux1448' direct represents '2' with '-6149'
6148 6150 -6149 0
c Encoding variable: aux1449 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '6151'
c Var 'aux1449' direct represents '0' with '6151'
c Var 'aux1449' order represents '1' with '6152'
-6151 6152 0
c Var 'aux1449' direct represents '1' with '6153'
6151 -6152 6153 0
-6153 6152 0
-6153 -6151 0
c Var 'aux1449' direct represents '2' with '-6152'
6151 6153 -6152 0
c Encoding variable: aux1450 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '6154'
c Var 'aux1450' direct represents '0' with '6154'
c Var 'aux1450' order represents '1' with '6155'
-6154 6155 0
c Var 'aux1450' direct represents '1' with '6156'
6154 -6155 6156 0
-6156 6155 0
-6156 -6154 0
c Var 'aux1450' direct represents '2' with '-6155'
6154 6156 -6155 0
c Encoding variable: aux1451 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1450))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '6157'
c Var 'aux1451' direct represents '0' with '6157'
c Var 'aux1451' order represents '1' with '6158'
-6157 6158 0
c Var 'aux1451' direct represents '1' with '6159'
6157 -6158 6159 0
-6159 6158 0
-6159 -6157 0
c Var 'aux1451' order represents '2' with '6160'
-6158 6160 0
c Var 'aux1451' direct represents '2' with '6161'
6158 -6160 6161 0
-6161 6160 0
-6161 -6158 0
c Var 'aux1451' direct represents '3' with '-6160'
6157 6159 6161 -6160 0
c Encoding variable: aux1452 with domain: int(0..4) (representing constraint (aux1447 + aux1449))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '6162'
c Var 'aux1452' direct represents '0' with '6162'
c Var 'aux1452' order represents '1' with '6163'
-6162 6163 0
c Var 'aux1452' direct represents '1' with '6164'
6162 -6163 6164 0
-6164 6163 0
-6164 -6162 0
c Var 'aux1452' order represents '2' with '6165'
-6163 6165 0
c Var 'aux1452' direct represents '2' with '6166'
6163 -6165 6166 0
-6166 6165 0
-6166 -6163 0
c Var 'aux1452' order represents '3' with '6167'
-6165 6167 0
c Var 'aux1452' direct represents '3' with '6168'
6165 -6167 6168 0
-6168 6167 0
-6168 -6165 0
c Var 'aux1452' direct represents '4' with '-6167'
6162 6164 6166 6168 -6167 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '6169'
c Var 'aux1453' direct represents '0' with '6169'
c Var 'aux1453' order represents '1' with '6170'
-6169 6170 0
c Var 'aux1453' direct represents '1' with '6171'
6169 -6170 6171 0
-6171 6170 0
-6171 -6169 0
c Var 'aux1453' direct represents '2' with '-6170'
6169 6171 -6170 0
c Encoding variable: aux1454 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '6172'
c Var 'aux1454' direct represents '0' with '6172'
c Var 'aux1454' order represents '1' with '6173'
-6172 6173 0
c Var 'aux1454' direct represents '1' with '6174'
6172 -6173 6174 0
-6174 6173 0
-6174 -6172 0
c Var 'aux1454' direct represents '2' with '-6173'
6172 6174 -6173 0
c Encoding variable: aux1455 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '6175'
c Var 'aux1455' direct represents '0' with '6175'
c Var 'aux1455' order represents '1' with '6176'
-6175 6176 0
c Var 'aux1455' direct represents '1' with '6177'
6175 -6176 6177 0
-6177 6176 0
-6177 -6175 0
c Var 'aux1455' direct represents '2' with '-6176'
6175 6177 -6176 0
c Encoding variable: aux1456 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '6178'
c Var 'aux1456' direct represents '0' with '6178'
c Var 'aux1456' order represents '1' with '6179'
-6178 6179 0
c Var 'aux1456' direct represents '1' with '6180'
6178 -6179 6180 0
-6180 6179 0
-6180 -6178 0
c Var 'aux1456' direct represents '2' with '-6179'
6178 6180 -6179 0
c Encoding variable: aux1457 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1456))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '6181'
c Var 'aux1457' direct represents '0' with '6181'
c Var 'aux1457' order represents '1' with '6182'
-6181 6182 0
c Var 'aux1457' direct represents '1' with '6183'
6181 -6182 6183 0
-6183 6182 0
-6183 -6181 0
c Var 'aux1457' order represents '2' with '6184'
-6182 6184 0
c Var 'aux1457' direct represents '2' with '6185'
6182 -6184 6185 0
-6185 6184 0
-6185 -6182 0
c Var 'aux1457' direct represents '3' with '-6184'
6181 6183 6185 -6184 0
c Encoding variable: aux1458 with domain: int(0..4) (representing constraint (aux1453 + aux1455))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '6186'
c Var 'aux1458' direct represents '0' with '6186'
c Var 'aux1458' order represents '1' with '6187'
-6186 6187 0
c Var 'aux1458' direct represents '1' with '6188'
6186 -6187 6188 0
-6188 6187 0
-6188 -6186 0
c Var 'aux1458' order represents '2' with '6189'
-6187 6189 0
c Var 'aux1458' direct represents '2' with '6190'
6187 -6189 6190 0
-6190 6189 0
-6190 -6187 0
c Var 'aux1458' order represents '3' with '6191'
-6189 6191 0
c Var 'aux1458' direct represents '3' with '6192'
6189 -6191 6192 0
-6192 6191 0
-6192 -6189 0
c Var 'aux1458' direct represents '4' with '-6191'
6186 6188 6190 6192 -6191 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '6193'
c Var 'aux1459' direct represents '0' with '6193'
c Var 'aux1459' order represents '1' with '6194'
-6193 6194 0
c Var 'aux1459' direct represents '1' with '6195'
6193 -6194 6195 0
-6195 6194 0
-6195 -6193 0
c Var 'aux1459' direct represents '2' with '-6194'
6193 6195 -6194 0
c Encoding variable: aux1460 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '6196'
c Var 'aux1460' direct represents '0' with '6196'
c Var 'aux1460' order represents '1' with '6197'
-6196 6197 0
c Var 'aux1460' direct represents '1' with '6198'
6196 -6197 6198 0
-6198 6197 0
-6198 -6196 0
c Var 'aux1460' direct represents '2' with '-6197'
6196 6198 -6197 0
c Encoding variable: aux1461 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '6199'
c Var 'aux1461' direct represents '0' with '6199'
c Var 'aux1461' order represents '1' with '6200'
-6199 6200 0
c Var 'aux1461' direct represents '1' with '6201'
6199 -6200 6201 0
-6201 6200 0
-6201 -6199 0
c Var 'aux1461' direct represents '2' with '-6200'
6199 6201 -6200 0
c Encoding variable: aux1462 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '6202'
c Var 'aux1462' direct represents '0' with '6202'
c Var 'aux1462' order represents '1' with '6203'
-6202 6203 0
c Var 'aux1462' direct represents '1' with '6204'
6202 -6203 6204 0
-6204 6203 0
-6204 -6202 0
c Var 'aux1462' direct represents '2' with '-6203'
6202 6204 -6203 0
c Encoding variable: aux1463 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1462))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '6205'
c Var 'aux1463' direct represents '0' with '6205'
c Var 'aux1463' order represents '1' with '6206'
-6205 6206 0
c Var 'aux1463' direct represents '1' with '6207'
6205 -6206 6207 0
-6207 6206 0
-6207 -6205 0
c Var 'aux1463' order represents '2' with '6208'
-6206 6208 0
c Var 'aux1463' direct represents '2' with '6209'
6206 -6208 6209 0
-6209 6208 0
-6209 -6206 0
c Var 'aux1463' direct represents '3' with '-6208'
6205 6207 6209 -6208 0
c Encoding variable: aux1464 with domain: int(0..4) (representing constraint (aux1459 + aux1461))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '6210'
c Var 'aux1464' direct represents '0' with '6210'
c Var 'aux1464' order represents '1' with '6211'
-6210 6211 0
c Var 'aux1464' direct represents '1' with '6212'
6210 -6211 6212 0
-6212 6211 0
-6212 -6210 0
c Var 'aux1464' order represents '2' with '6213'
-6211 6213 0
c Var 'aux1464' direct represents '2' with '6214'
6211 -6213 6214 0
-6214 6213 0
-6214 -6211 0
c Var 'aux1464' order represents '3' with '6215'
-6213 6215 0
c Var 'aux1464' direct represents '3' with '6216'
6213 -6215 6216 0
-6216 6215 0
-6216 -6213 0
c Var 'aux1464' direct represents '4' with '-6215'
6210 6212 6214 6216 -6215 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '6217'
c Var 'aux1465' direct represents '0' with '6217'
c Var 'aux1465' order represents '1' with '6218'
-6217 6218 0
c Var 'aux1465' direct represents '1' with '6219'
6217 -6218 6219 0
-6219 6218 0
-6219 -6217 0
c Var 'aux1465' direct represents '2' with '-6218'
6217 6219 -6218 0
c Encoding variable: aux1466 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '6220'
c Var 'aux1466' direct represents '0' with '6220'
c Var 'aux1466' order represents '1' with '6221'
-6220 6221 0
c Var 'aux1466' direct represents '1' with '6222'
6220 -6221 6222 0
-6222 6221 0
-6222 -6220 0
c Var 'aux1466' direct represents '2' with '-6221'
6220 6222 -6221 0
c Encoding variable: aux1467 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '6223'
c Var 'aux1467' direct represents '0' with '6223'
c Var 'aux1467' order represents '1' with '6224'
-6223 6224 0
c Var 'aux1467' direct represents '1' with '6225'
6223 -6224 6225 0
-6225 6224 0
-6225 -6223 0
c Var 'aux1467' direct represents '2' with '-6224'
6223 6225 -6224 0
c Encoding variable: aux1468 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '6226'
c Var 'aux1468' direct represents '0' with '6226'
c Var 'aux1468' order represents '1' with '6227'
-6226 6227 0
c Var 'aux1468' direct represents '1' with '6228'
6226 -6227 6228 0
-6228 6227 0
-6228 -6226 0
c Var 'aux1468' direct represents '2' with '-6227'
6226 6228 -6227 0
c Encoding variable: aux1469 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1468))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '6229'
c Var 'aux1469' direct represents '0' with '6229'
c Var 'aux1469' order represents '1' with '6230'
-6229 6230 0
c Var 'aux1469' direct represents '1' with '6231'
6229 -6230 6231 0
-6231 6230 0
-6231 -6229 0
c Var 'aux1469' order represents '2' with '6232'
-6230 6232 0
c Var 'aux1469' direct represents '2' with '6233'
6230 -6232 6233 0
-6233 6232 0
-6233 -6230 0
c Var 'aux1469' direct represents '3' with '-6232'
6229 6231 6233 -6232 0
c Encoding variable: aux1470 with domain: int(0..4) (representing constraint (aux1465 + aux1467))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '6234'
c Var 'aux1470' direct represents '0' with '6234'
c Var 'aux1470' order represents '1' with '6235'
-6234 6235 0
c Var 'aux1470' direct represents '1' with '6236'
6234 -6235 6236 0
-6236 6235 0
-6236 -6234 0
c Var 'aux1470' order represents '2' with '6237'
-6235 6237 0
c Var 'aux1470' direct represents '2' with '6238'
6235 -6237 6238 0
-6238 6237 0
-6238 -6235 0
c Var 'aux1470' order represents '3' with '6239'
-6237 6239 0
c Var 'aux1470' direct represents '3' with '6240'
6237 -6239 6240 0
-6240 6239 0
-6240 -6237 0
c Var 'aux1470' direct represents '4' with '-6239'
6234 6236 6238 6240 -6239 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '6241'
c Var 'aux1471' direct represents '0' with '6241'
c Var 'aux1471' order represents '1' with '6242'
-6241 6242 0
c Var 'aux1471' direct represents '1' with '6243'
6241 -6242 6243 0
-6243 6242 0
-6243 -6241 0
c Var 'aux1471' direct represents '2' with '-6242'
6241 6243 -6242 0
c Encoding variable: aux1472 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '6244'
c Var 'aux1472' direct represents '0' with '6244'
c Var 'aux1472' order represents '1' with '6245'
-6244 6245 0
c Var 'aux1472' direct represents '1' with '6246'
6244 -6245 6246 0
-6246 6245 0
-6246 -6244 0
c Var 'aux1472' direct represents '2' with '-6245'
6244 6246 -6245 0
c Encoding variable: aux1473 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '6247'
c Var 'aux1473' direct represents '0' with '6247'
c Var 'aux1473' order represents '1' with '6248'
-6247 6248 0
c Var 'aux1473' direct represents '1' with '6249'
6247 -6248 6249 0
-6249 6248 0
-6249 -6247 0
c Var 'aux1473' direct represents '2' with '-6248'
6247 6249 -6248 0
c Encoding variable: aux1474 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '6250'
c Var 'aux1474' direct represents '0' with '6250'
c Var 'aux1474' order represents '1' with '6251'
-6250 6251 0
c Var 'aux1474' direct represents '1' with '6252'
6250 -6251 6252 0
-6252 6251 0
-6252 -6250 0
c Var 'aux1474' direct represents '2' with '-6251'
6250 6252 -6251 0
c Encoding variable: aux1475 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1474))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '6253'
c Var 'aux1475' direct represents '0' with '6253'
c Var 'aux1475' order represents '1' with '6254'
-6253 6254 0
c Var 'aux1475' direct represents '1' with '6255'
6253 -6254 6255 0
-6255 6254 0
-6255 -6253 0
c Var 'aux1475' order represents '2' with '6256'
-6254 6256 0
c Var 'aux1475' direct represents '2' with '6257'
6254 -6256 6257 0
-6257 6256 0
-6257 -6254 0
c Var 'aux1475' direct represents '3' with '-6256'
6253 6255 6257 -6256 0
c Encoding variable: aux1476 with domain: int(0..4) (representing constraint (aux1471 + aux1473))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '6258'
c Var 'aux1476' direct represents '0' with '6258'
c Var 'aux1476' order represents '1' with '6259'
-6258 6259 0
c Var 'aux1476' direct represents '1' with '6260'
6258 -6259 6260 0
-6260 6259 0
-6260 -6258 0
c Var 'aux1476' order represents '2' with '6261'
-6259 6261 0
c Var 'aux1476' direct represents '2' with '6262'
6259 -6261 6262 0
-6262 6261 0
-6262 -6259 0
c Var 'aux1476' order represents '3' with '6263'
-6261 6263 0
c Var 'aux1476' direct represents '3' with '6264'
6261 -6263 6264 0
-6264 6263 0
-6264 -6261 0
c Var 'aux1476' direct represents '4' with '-6263'
6258 6260 6262 6264 -6263 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '6265'
c Var 'aux1477' direct represents '0' with '6265'
c Var 'aux1477' order represents '1' with '6266'
-6265 6266 0
c Var 'aux1477' direct represents '1' with '6267'
6265 -6266 6267 0
-6267 6266 0
-6267 -6265 0
c Var 'aux1477' direct represents '2' with '-6266'
6265 6267 -6266 0
c Encoding variable: aux1478 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '6268'
c Var 'aux1478' direct represents '0' with '6268'
c Var 'aux1478' order represents '1' with '6269'
-6268 6269 0
c Var 'aux1478' direct represents '1' with '6270'
6268 -6269 6270 0
-6270 6269 0
-6270 -6268 0
c Var 'aux1478' direct represents '2' with '-6269'
6268 6270 -6269 0
c Encoding variable: aux1479 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '6271'
c Var 'aux1479' direct represents '0' with '6271'
c Var 'aux1479' order represents '1' with '6272'
-6271 6272 0
c Var 'aux1479' direct represents '1' with '6273'
6271 -6272 6273 0
-6273 6272 0
-6273 -6271 0
c Var 'aux1479' direct represents '2' with '-6272'
6271 6273 -6272 0
c Encoding variable: aux1480 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '6274'
c Var 'aux1480' direct represents '0' with '6274'
c Var 'aux1480' order represents '1' with '6275'
-6274 6275 0
c Var 'aux1480' direct represents '1' with '6276'
6274 -6275 6276 0
-6276 6275 0
-6276 -6274 0
c Var 'aux1480' direct represents '2' with '-6275'
6274 6276 -6275 0
c Encoding variable: aux1481 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1480))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '6277'
c Var 'aux1481' direct represents '0' with '6277'
c Var 'aux1481' order represents '1' with '6278'
-6277 6278 0
c Var 'aux1481' direct represents '1' with '6279'
6277 -6278 6279 0
-6279 6278 0
-6279 -6277 0
c Var 'aux1481' order represents '2' with '6280'
-6278 6280 0
c Var 'aux1481' direct represents '2' with '6281'
6278 -6280 6281 0
-6281 6280 0
-6281 -6278 0
c Var 'aux1481' direct represents '3' with '-6280'
6277 6279 6281 -6280 0
c Encoding variable: aux1482 with domain: int(0..4) (representing constraint (aux1477 + aux1479))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '6282'
c Var 'aux1482' direct represents '0' with '6282'
c Var 'aux1482' order represents '1' with '6283'
-6282 6283 0
c Var 'aux1482' direct represents '1' with '6284'
6282 -6283 6284 0
-6284 6283 0
-6284 -6282 0
c Var 'aux1482' order represents '2' with '6285'
-6283 6285 0
c Var 'aux1482' direct represents '2' with '6286'
6283 -6285 6286 0
-6286 6285 0
-6286 -6283 0
c Var 'aux1482' order represents '3' with '6287'
-6285 6287 0
c Var 'aux1482' direct represents '3' with '6288'
6285 -6287 6288 0
-6288 6287 0
-6288 -6285 0
c Var 'aux1482' direct represents '4' with '-6287'
6282 6284 6286 6288 -6287 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '6289'
c Var 'aux1483' direct represents '0' with '6289'
c Var 'aux1483' order represents '1' with '6290'
-6289 6290 0
c Var 'aux1483' direct represents '1' with '6291'
6289 -6290 6291 0
-6291 6290 0
-6291 -6289 0
c Var 'aux1483' direct represents '2' with '-6290'
6289 6291 -6290 0
c Encoding variable: aux1484 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '6292'
c Var 'aux1484' direct represents '0' with '6292'
c Var 'aux1484' order represents '1' with '6293'
-6292 6293 0
c Var 'aux1484' direct represents '1' with '6294'
6292 -6293 6294 0
-6294 6293 0
-6294 -6292 0
c Var 'aux1484' direct represents '2' with '-6293'
6292 6294 -6293 0
c Encoding variable: aux1485 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '6295'
c Var 'aux1485' direct represents '0' with '6295'
c Var 'aux1485' order represents '1' with '6296'
-6295 6296 0
c Var 'aux1485' direct represents '1' with '6297'
6295 -6296 6297 0
-6297 6296 0
-6297 -6295 0
c Var 'aux1485' direct represents '2' with '-6296'
6295 6297 -6296 0
c Encoding variable: aux1486 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '6298'
c Var 'aux1486' direct represents '0' with '6298'
c Var 'aux1486' order represents '1' with '6299'
-6298 6299 0
c Var 'aux1486' direct represents '1' with '6300'
6298 -6299 6300 0
-6300 6299 0
-6300 -6298 0
c Var 'aux1486' direct represents '2' with '-6299'
6298 6300 -6299 0
c Encoding variable: aux1487 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1486))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '6301'
c Var 'aux1487' direct represents '0' with '6301'
c Var 'aux1487' order represents '1' with '6302'
-6301 6302 0
c Var 'aux1487' direct represents '1' with '6303'
6301 -6302 6303 0
-6303 6302 0
-6303 -6301 0
c Var 'aux1487' order represents '2' with '6304'
-6302 6304 0
c Var 'aux1487' direct represents '2' with '6305'
6302 -6304 6305 0
-6305 6304 0
-6305 -6302 0
c Var 'aux1487' direct represents '3' with '-6304'
6301 6303 6305 -6304 0
c Encoding variable: aux1488 with domain: int(0..4) (representing constraint (aux1483 + aux1485))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6306'
c Var 'aux1488' direct represents '0' with '6306'
c Var 'aux1488' order represents '1' with '6307'
-6306 6307 0
c Var 'aux1488' direct represents '1' with '6308'
6306 -6307 6308 0
-6308 6307 0
-6308 -6306 0
c Var 'aux1488' order represents '2' with '6309'
-6307 6309 0
c Var 'aux1488' direct represents '2' with '6310'
6307 -6309 6310 0
-6310 6309 0
-6310 -6307 0
c Var 'aux1488' order represents '3' with '6311'
-6309 6311 0
c Var 'aux1488' direct represents '3' with '6312'
6309 -6311 6312 0
-6312 6311 0
-6312 -6309 0
c Var 'aux1488' direct represents '4' with '-6311'
6306 6308 6310 6312 -6311 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6313'
c Var 'aux1489' direct represents '0' with '6313'
c Var 'aux1489' order represents '1' with '6314'
-6313 6314 0
c Var 'aux1489' direct represents '1' with '6315'
6313 -6314 6315 0
-6315 6314 0
-6315 -6313 0
c Var 'aux1489' direct represents '2' with '-6314'
6313 6315 -6314 0
c Encoding variable: aux1490 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6316'
c Var 'aux1490' direct represents '0' with '6316'
c Var 'aux1490' order represents '1' with '6317'
-6316 6317 0
c Var 'aux1490' direct represents '1' with '6318'
6316 -6317 6318 0
-6318 6317 0
-6318 -6316 0
c Var 'aux1490' direct represents '2' with '-6317'
6316 6318 -6317 0
c Encoding variable: aux1491 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6319'
c Var 'aux1491' direct represents '0' with '6319'
c Var 'aux1491' order represents '1' with '6320'
-6319 6320 0
c Var 'aux1491' direct represents '1' with '6321'
6319 -6320 6321 0
-6321 6320 0
-6321 -6319 0
c Var 'aux1491' direct represents '2' with '-6320'
6319 6321 -6320 0
c Encoding variable: aux1492 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6322'
c Var 'aux1492' direct represents '0' with '6322'
c Var 'aux1492' order represents '1' with '6323'
-6322 6323 0
c Var 'aux1492' direct represents '1' with '6324'
6322 -6323 6324 0
-6324 6323 0
-6324 -6322 0
c Var 'aux1492' direct represents '2' with '-6323'
6322 6324 -6323 0
c Encoding variable: aux1493 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1492))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6325'
c Var 'aux1493' direct represents '0' with '6325'
c Var 'aux1493' order represents '1' with '6326'
-6325 6326 0
c Var 'aux1493' direct represents '1' with '6327'
6325 -6326 6327 0
-6327 6326 0
-6327 -6325 0
c Var 'aux1493' order represents '2' with '6328'
-6326 6328 0
c Var 'aux1493' direct represents '2' with '6329'
6326 -6328 6329 0
-6329 6328 0
-6329 -6326 0
c Var 'aux1493' direct represents '3' with '-6328'
6325 6327 6329 -6328 0
c Encoding variable: aux1494 with domain: int(0..4) (representing constraint (aux1489 + aux1491))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6330'
c Var 'aux1494' direct represents '0' with '6330'
c Var 'aux1494' order represents '1' with '6331'
-6330 6331 0
c Var 'aux1494' direct represents '1' with '6332'
6330 -6331 6332 0
-6332 6331 0
-6332 -6330 0
c Var 'aux1494' order represents '2' with '6333'
-6331 6333 0
c Var 'aux1494' direct represents '2' with '6334'
6331 -6333 6334 0
-6334 6333 0
-6334 -6331 0
c Var 'aux1494' order represents '3' with '6335'
-6333 6335 0
c Var 'aux1494' direct represents '3' with '6336'
6333 -6335 6336 0
-6336 6335 0
-6336 -6333 0
c Var 'aux1494' direct represents '4' with '-6335'
6330 6332 6334 6336 -6335 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6337'
c Var 'aux1495' direct represents '0' with '6337'
c Var 'aux1495' order represents '1' with '6338'
-6337 6338 0
c Var 'aux1495' direct represents '1' with '6339'
6337 -6338 6339 0
-6339 6338 0
-6339 -6337 0
c Var 'aux1495' direct represents '2' with '-6338'
6337 6339 -6338 0
c Encoding variable: aux1496 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6340'
c Var 'aux1496' direct represents '0' with '6340'
c Var 'aux1496' order represents '1' with '6341'
-6340 6341 0
c Var 'aux1496' direct represents '1' with '6342'
6340 -6341 6342 0
-6342 6341 0
-6342 -6340 0
c Var 'aux1496' direct represents '2' with '-6341'
6340 6342 -6341 0
c Encoding variable: aux1497 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6343'
c Var 'aux1497' direct represents '0' with '6343'
c Var 'aux1497' order represents '1' with '6344'
-6343 6344 0
c Var 'aux1497' direct represents '1' with '6345'
6343 -6344 6345 0
-6345 6344 0
-6345 -6343 0
c Var 'aux1497' direct represents '2' with '-6344'
6343 6345 -6344 0
c Encoding variable: aux1498 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6346'
c Var 'aux1498' direct represents '0' with '6346'
c Var 'aux1498' order represents '1' with '6347'
-6346 6347 0
c Var 'aux1498' direct represents '1' with '6348'
6346 -6347 6348 0
-6348 6347 0
-6348 -6346 0
c Var 'aux1498' direct represents '2' with '-6347'
6346 6348 -6347 0
c Encoding variable: aux1499 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1498))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6349'
c Var 'aux1499' direct represents '0' with '6349'
c Var 'aux1499' order represents '1' with '6350'
-6349 6350 0
c Var 'aux1499' direct represents '1' with '6351'
6349 -6350 6351 0
-6351 6350 0
-6351 -6349 0
c Var 'aux1499' order represents '2' with '6352'
-6350 6352 0
c Var 'aux1499' direct represents '2' with '6353'
6350 -6352 6353 0
-6353 6352 0
-6353 -6350 0
c Var 'aux1499' direct represents '3' with '-6352'
6349 6351 6353 -6352 0
c Encoding variable: aux1500 with domain: int(0..4) (representing constraint (aux1495 + aux1497))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6354'
c Var 'aux1500' direct represents '0' with '6354'
c Var 'aux1500' order represents '1' with '6355'
-6354 6355 0
c Var 'aux1500' direct represents '1' with '6356'
6354 -6355 6356 0
-6356 6355 0
-6356 -6354 0
c Var 'aux1500' order represents '2' with '6357'
-6355 6357 0
c Var 'aux1500' direct represents '2' with '6358'
6355 -6357 6358 0
-6358 6357 0
-6358 -6355 0
c Var 'aux1500' order represents '3' with '6359'
-6357 6359 0
c Var 'aux1500' direct represents '3' with '6360'
6357 -6359 6360 0
-6360 6359 0
-6360 -6357 0
c Var 'aux1500' direct represents '4' with '-6359'
6354 6356 6358 6360 -6359 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6361'
c Var 'aux1501' direct represents '0' with '6361'
c Var 'aux1501' order represents '1' with '6362'
-6361 6362 0
c Var 'aux1501' direct represents '1' with '6363'
6361 -6362 6363 0
-6363 6362 0
-6363 -6361 0
c Var 'aux1501' direct represents '2' with '-6362'
6361 6363 -6362 0
c Encoding variable: aux1502 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6364'
c Var 'aux1502' direct represents '0' with '6364'
c Var 'aux1502' order represents '1' with '6365'
-6364 6365 0
c Var 'aux1502' direct represents '1' with '6366'
6364 -6365 6366 0
-6366 6365 0
-6366 -6364 0
c Var 'aux1502' direct represents '2' with '-6365'
6364 6366 -6365 0
c Encoding variable: aux1503 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6367'
c Var 'aux1503' direct represents '0' with '6367'
c Var 'aux1503' order represents '1' with '6368'
-6367 6368 0
c Var 'aux1503' direct represents '1' with '6369'
6367 -6368 6369 0
-6369 6368 0
-6369 -6367 0
c Var 'aux1503' direct represents '2' with '-6368'
6367 6369 -6368 0
c Encoding variable: aux1504 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6370'
c Var 'aux1504' direct represents '0' with '6370'
c Var 'aux1504' order represents '1' with '6371'
-6370 6371 0
c Var 'aux1504' direct represents '1' with '6372'
6370 -6371 6372 0
-6372 6371 0
-6372 -6370 0
c Var 'aux1504' direct represents '2' with '-6371'
6370 6372 -6371 0
c Encoding variable: aux1505 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1504))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6373'
c Var 'aux1505' direct represents '0' with '6373'
c Var 'aux1505' order represents '1' with '6374'
-6373 6374 0
c Var 'aux1505' direct represents '1' with '6375'
6373 -6374 6375 0
-6375 6374 0
-6375 -6373 0
c Var 'aux1505' order represents '2' with '6376'
-6374 6376 0
c Var 'aux1505' direct represents '2' with '6377'
6374 -6376 6377 0
-6377 6376 0
-6377 -6374 0
c Var 'aux1505' direct represents '3' with '-6376'
6373 6375 6377 -6376 0
c Encoding variable: aux1506 with domain: int(0..4) (representing constraint (aux1501 + aux1503))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6378'
c Var 'aux1506' direct represents '0' with '6378'
c Var 'aux1506' order represents '1' with '6379'
-6378 6379 0
c Var 'aux1506' direct represents '1' with '6380'
6378 -6379 6380 0
-6380 6379 0
-6380 -6378 0
c Var 'aux1506' order represents '2' with '6381'
-6379 6381 0
c Var 'aux1506' direct represents '2' with '6382'
6379 -6381 6382 0
-6382 6381 0
-6382 -6379 0
c Var 'aux1506' order represents '3' with '6383'
-6381 6383 0
c Var 'aux1506' direct represents '3' with '6384'
6381 -6383 6384 0
-6384 6383 0
-6384 -6381 0
c Var 'aux1506' direct represents '4' with '-6383'
6378 6380 6382 6384 -6383 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6385'
c Var 'aux1507' direct represents '0' with '6385'
c Var 'aux1507' order represents '1' with '6386'
-6385 6386 0
c Var 'aux1507' direct represents '1' with '6387'
6385 -6386 6387 0
-6387 6386 0
-6387 -6385 0
c Var 'aux1507' direct represents '2' with '-6386'
6385 6387 -6386 0
c Encoding variable: aux1508 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6388'
c Var 'aux1508' direct represents '0' with '6388'
c Var 'aux1508' order represents '1' with '6389'
-6388 6389 0
c Var 'aux1508' direct represents '1' with '6390'
6388 -6389 6390 0
-6390 6389 0
-6390 -6388 0
c Var 'aux1508' direct represents '2' with '-6389'
6388 6390 -6389 0
c Encoding variable: aux1509 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6391'
c Var 'aux1509' direct represents '0' with '6391'
c Var 'aux1509' order represents '1' with '6392'
-6391 6392 0
c Var 'aux1509' direct represents '1' with '6393'
6391 -6392 6393 0
-6393 6392 0
-6393 -6391 0
c Var 'aux1509' direct represents '2' with '-6392'
6391 6393 -6392 0
c Encoding variable: aux1510 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6394'
c Var 'aux1510' direct represents '0' with '6394'
c Var 'aux1510' order represents '1' with '6395'
-6394 6395 0
c Var 'aux1510' direct represents '1' with '6396'
6394 -6395 6396 0
-6396 6395 0
-6396 -6394 0
c Var 'aux1510' direct represents '2' with '-6395'
6394 6396 -6395 0
c Encoding variable: aux1511 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1510))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6397'
c Var 'aux1511' direct represents '0' with '6397'
c Var 'aux1511' order represents '1' with '6398'
-6397 6398 0
c Var 'aux1511' direct represents '1' with '6399'
6397 -6398 6399 0
-6399 6398 0
-6399 -6397 0
c Var 'aux1511' order represents '2' with '6400'
-6398 6400 0
c Var 'aux1511' direct represents '2' with '6401'
6398 -6400 6401 0
-6401 6400 0
-6401 -6398 0
c Var 'aux1511' direct represents '3' with '-6400'
6397 6399 6401 -6400 0
c Encoding variable: aux1512 with domain: int(0..4) (representing constraint (aux1507 + aux1509))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6402'
c Var 'aux1512' direct represents '0' with '6402'
c Var 'aux1512' order represents '1' with '6403'
-6402 6403 0
c Var 'aux1512' direct represents '1' with '6404'
6402 -6403 6404 0
-6404 6403 0
-6404 -6402 0
c Var 'aux1512' order represents '2' with '6405'
-6403 6405 0
c Var 'aux1512' direct represents '2' with '6406'
6403 -6405 6406 0
-6406 6405 0
-6406 -6403 0
c Var 'aux1512' order represents '3' with '6407'
-6405 6407 0
c Var 'aux1512' direct represents '3' with '6408'
6405 -6407 6408 0
-6408 6407 0
-6408 -6405 0
c Var 'aux1512' direct represents '4' with '-6407'
6402 6404 6406 6408 -6407 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6409'
c Var 'aux1513' direct represents '0' with '6409'
c Var 'aux1513' order represents '1' with '6410'
-6409 6410 0
c Var 'aux1513' direct represents '1' with '6411'
6409 -6410 6411 0
-6411 6410 0
-6411 -6409 0
c Var 'aux1513' direct represents '2' with '-6410'
6409 6411 -6410 0
c Encoding variable: aux1514 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6412'
c Var 'aux1514' direct represents '0' with '6412'
c Var 'aux1514' order represents '1' with '6413'
-6412 6413 0
c Var 'aux1514' direct represents '1' with '6414'
6412 -6413 6414 0
-6414 6413 0
-6414 -6412 0
c Var 'aux1514' direct represents '2' with '-6413'
6412 6414 -6413 0
c Encoding variable: aux1515 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6415'
c Var 'aux1515' direct represents '0' with '6415'
c Var 'aux1515' order represents '1' with '6416'
-6415 6416 0
c Var 'aux1515' direct represents '1' with '6417'
6415 -6416 6417 0
-6417 6416 0
-6417 -6415 0
c Var 'aux1515' direct represents '2' with '-6416'
6415 6417 -6416 0
c Encoding variable: aux1516 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6418'
c Var 'aux1516' direct represents '0' with '6418'
c Var 'aux1516' order represents '1' with '6419'
-6418 6419 0
c Var 'aux1516' direct represents '1' with '6420'
6418 -6419 6420 0
-6420 6419 0
-6420 -6418 0
c Var 'aux1516' direct represents '2' with '-6419'
6418 6420 -6419 0
c Encoding variable: aux1517 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1516))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6421'
c Var 'aux1517' direct represents '0' with '6421'
c Var 'aux1517' order represents '1' with '6422'
-6421 6422 0
c Var 'aux1517' direct represents '1' with '6423'
6421 -6422 6423 0
-6423 6422 0
-6423 -6421 0
c Var 'aux1517' order represents '2' with '6424'
-6422 6424 0
c Var 'aux1517' direct represents '2' with '6425'
6422 -6424 6425 0
-6425 6424 0
-6425 -6422 0
c Var 'aux1517' direct represents '3' with '-6424'
6421 6423 6425 -6424 0
c Encoding variable: aux1518 with domain: int(0..4) (representing constraint (aux1513 + aux1515))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6426'
c Var 'aux1518' direct represents '0' with '6426'
c Var 'aux1518' order represents '1' with '6427'
-6426 6427 0
c Var 'aux1518' direct represents '1' with '6428'
6426 -6427 6428 0
-6428 6427 0
-6428 -6426 0
c Var 'aux1518' order represents '2' with '6429'
-6427 6429 0
c Var 'aux1518' direct represents '2' with '6430'
6427 -6429 6430 0
-6430 6429 0
-6430 -6427 0
c Var 'aux1518' order represents '3' with '6431'
-6429 6431 0
c Var 'aux1518' direct represents '3' with '6432'
6429 -6431 6432 0
-6432 6431 0
-6432 -6429 0
c Var 'aux1518' direct represents '4' with '-6431'
6426 6428 6430 6432 -6431 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6433'
c Var 'aux1519' direct represents '0' with '6433'
c Var 'aux1519' order represents '1' with '6434'
-6433 6434 0
c Var 'aux1519' direct represents '1' with '6435'
6433 -6434 6435 0
-6435 6434 0
-6435 -6433 0
c Var 'aux1519' direct represents '2' with '-6434'
6433 6435 -6434 0
c Encoding variable: aux1520 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6436'
c Var 'aux1520' direct represents '0' with '6436'
c Var 'aux1520' order represents '1' with '6437'
-6436 6437 0
c Var 'aux1520' direct represents '1' with '6438'
6436 -6437 6438 0
-6438 6437 0
-6438 -6436 0
c Var 'aux1520' direct represents '2' with '-6437'
6436 6438 -6437 0
c Encoding variable: aux1521 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6439'
c Var 'aux1521' direct represents '0' with '6439'
c Var 'aux1521' order represents '1' with '6440'
-6439 6440 0
c Var 'aux1521' direct represents '1' with '6441'
6439 -6440 6441 0
-6441 6440 0
-6441 -6439 0
c Var 'aux1521' direct represents '2' with '-6440'
6439 6441 -6440 0
c Encoding variable: aux1522 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6442'
c Var 'aux1522' direct represents '0' with '6442'
c Var 'aux1522' order represents '1' with '6443'
-6442 6443 0
c Var 'aux1522' direct represents '1' with '6444'
6442 -6443 6444 0
-6444 6443 0
-6444 -6442 0
c Var 'aux1522' direct represents '2' with '-6443'
6442 6444 -6443 0
c Encoding variable: aux1523 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1522))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6445'
c Var 'aux1523' direct represents '0' with '6445'
c Var 'aux1523' order represents '1' with '6446'
-6445 6446 0
c Var 'aux1523' direct represents '1' with '6447'
6445 -6446 6447 0
-6447 6446 0
-6447 -6445 0
c Var 'aux1523' order represents '2' with '6448'
-6446 6448 0
c Var 'aux1523' direct represents '2' with '6449'
6446 -6448 6449 0
-6449 6448 0
-6449 -6446 0
c Var 'aux1523' direct represents '3' with '-6448'
6445 6447 6449 -6448 0
c Encoding variable: aux1524 with domain: int(0..4) (representing constraint (aux1519 + aux1521))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6450'
c Var 'aux1524' direct represents '0' with '6450'
c Var 'aux1524' order represents '1' with '6451'
-6450 6451 0
c Var 'aux1524' direct represents '1' with '6452'
6450 -6451 6452 0
-6452 6451 0
-6452 -6450 0
c Var 'aux1524' order represents '2' with '6453'
-6451 6453 0
c Var 'aux1524' direct represents '2' with '6454'
6451 -6453 6454 0
-6454 6453 0
-6454 -6451 0
c Var 'aux1524' order represents '3' with '6455'
-6453 6455 0
c Var 'aux1524' direct represents '3' with '6456'
6453 -6455 6456 0
-6456 6455 0
-6456 -6453 0
c Var 'aux1524' direct represents '4' with '-6455'
6450 6452 6454 6456 -6455 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6457'
c Var 'aux1525' direct represents '0' with '6457'
c Var 'aux1525' order represents '1' with '6458'
-6457 6458 0
c Var 'aux1525' direct represents '1' with '6459'
6457 -6458 6459 0
-6459 6458 0
-6459 -6457 0
c Var 'aux1525' direct represents '2' with '-6458'
6457 6459 -6458 0
c Encoding variable: aux1526 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6460'
c Var 'aux1526' direct represents '0' with '6460'
c Var 'aux1526' order represents '1' with '6461'
-6460 6461 0
c Var 'aux1526' direct represents '1' with '6462'
6460 -6461 6462 0
-6462 6461 0
-6462 -6460 0
c Var 'aux1526' direct represents '2' with '-6461'
6460 6462 -6461 0
c Encoding variable: aux1527 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6463'
c Var 'aux1527' direct represents '0' with '6463'
c Var 'aux1527' order represents '1' with '6464'
-6463 6464 0
c Var 'aux1527' direct represents '1' with '6465'
6463 -6464 6465 0
-6465 6464 0
-6465 -6463 0
c Var 'aux1527' direct represents '2' with '-6464'
6463 6465 -6464 0
c Encoding variable: aux1528 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6466'
c Var 'aux1528' direct represents '0' with '6466'
c Var 'aux1528' order represents '1' with '6467'
-6466 6467 0
c Var 'aux1528' direct represents '1' with '6468'
6466 -6467 6468 0
-6468 6467 0
-6468 -6466 0
c Var 'aux1528' direct represents '2' with '-6467'
6466 6468 -6467 0
c Encoding variable: aux1529 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1528))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6469'
c Var 'aux1529' direct represents '0' with '6469'
c Var 'aux1529' order represents '1' with '6470'
-6469 6470 0
c Var 'aux1529' direct represents '1' with '6471'
6469 -6470 6471 0
-6471 6470 0
-6471 -6469 0
c Var 'aux1529' order represents '2' with '6472'
-6470 6472 0
c Var 'aux1529' direct represents '2' with '6473'
6470 -6472 6473 0
-6473 6472 0
-6473 -6470 0
c Var 'aux1529' direct represents '3' with '-6472'
6469 6471 6473 -6472 0
c Encoding variable: aux1530 with domain: int(0..4) (representing constraint (aux1525 + aux1527))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6474'
c Var 'aux1530' direct represents '0' with '6474'
c Var 'aux1530' order represents '1' with '6475'
-6474 6475 0
c Var 'aux1530' direct represents '1' with '6476'
6474 -6475 6476 0
-6476 6475 0
-6476 -6474 0
c Var 'aux1530' order represents '2' with '6477'
-6475 6477 0
c Var 'aux1530' direct represents '2' with '6478'
6475 -6477 6478 0
-6478 6477 0
-6478 -6475 0
c Var 'aux1530' order represents '3' with '6479'
-6477 6479 0
c Var 'aux1530' direct represents '3' with '6480'
6477 -6479 6480 0
-6480 6479 0
-6480 -6477 0
c Var 'aux1530' direct represents '4' with '-6479'
6474 6476 6478 6480 -6479 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6481'
c Var 'aux1531' direct represents '0' with '6481'
c Var 'aux1531' order represents '1' with '6482'
-6481 6482 0
c Var 'aux1531' direct represents '1' with '6483'
6481 -6482 6483 0
-6483 6482 0
-6483 -6481 0
c Var 'aux1531' direct represents '2' with '-6482'
6481 6483 -6482 0
c Encoding variable: aux1532 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6484'
c Var 'aux1532' direct represents '0' with '6484'
c Var 'aux1532' order represents '1' with '6485'
-6484 6485 0
c Var 'aux1532' direct represents '1' with '6486'
6484 -6485 6486 0
-6486 6485 0
-6486 -6484 0
c Var 'aux1532' direct represents '2' with '-6485'
6484 6486 -6485 0
c Encoding variable: aux1533 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6487'
c Var 'aux1533' direct represents '0' with '6487'
c Var 'aux1533' order represents '1' with '6488'
-6487 6488 0
c Var 'aux1533' direct represents '1' with '6489'
6487 -6488 6489 0
-6489 6488 0
-6489 -6487 0
c Var 'aux1533' direct represents '2' with '-6488'
6487 6489 -6488 0
c Encoding variable: aux1534 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6490'
c Var 'aux1534' direct represents '0' with '6490'
c Var 'aux1534' order represents '1' with '6491'
-6490 6491 0
c Var 'aux1534' direct represents '1' with '6492'
6490 -6491 6492 0
-6492 6491 0
-6492 -6490 0
c Var 'aux1534' direct represents '2' with '-6491'
6490 6492 -6491 0
c Encoding variable: aux1535 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1534))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6493'
c Var 'aux1535' direct represents '0' with '6493'
c Var 'aux1535' order represents '1' with '6494'
-6493 6494 0
c Var 'aux1535' direct represents '1' with '6495'
6493 -6494 6495 0
-6495 6494 0
-6495 -6493 0
c Var 'aux1535' order represents '2' with '6496'
-6494 6496 0
c Var 'aux1535' direct represents '2' with '6497'
6494 -6496 6497 0
-6497 6496 0
-6497 -6494 0
c Var 'aux1535' direct represents '3' with '-6496'
6493 6495 6497 -6496 0
c Encoding variable: aux1536 with domain: int(0..4) (representing constraint (aux1531 + aux1533))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6498'
c Var 'aux1536' direct represents '0' with '6498'
c Var 'aux1536' order represents '1' with '6499'
-6498 6499 0
c Var 'aux1536' direct represents '1' with '6500'
6498 -6499 6500 0
-6500 6499 0
-6500 -6498 0
c Var 'aux1536' order represents '2' with '6501'
-6499 6501 0
c Var 'aux1536' direct represents '2' with '6502'
6499 -6501 6502 0
-6502 6501 0
-6502 -6499 0
c Var 'aux1536' order represents '3' with '6503'
-6501 6503 0
c Var 'aux1536' direct represents '3' with '6504'
6501 -6503 6504 0
-6504 6503 0
-6504 -6501 0
c Var 'aux1536' direct represents '4' with '-6503'
6498 6500 6502 6504 -6503 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6505'
c Var 'aux1537' direct represents '0' with '6505'
c Var 'aux1537' order represents '1' with '6506'
-6505 6506 0
c Var 'aux1537' direct represents '1' with '6507'
6505 -6506 6507 0
-6507 6506 0
-6507 -6505 0
c Var 'aux1537' direct represents '2' with '-6506'
6505 6507 -6506 0
c Encoding variable: aux1538 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6508'
c Var 'aux1538' direct represents '0' with '6508'
c Var 'aux1538' order represents '1' with '6509'
-6508 6509 0
c Var 'aux1538' direct represents '1' with '6510'
6508 -6509 6510 0
-6510 6509 0
-6510 -6508 0
c Var 'aux1538' direct represents '2' with '-6509'
6508 6510 -6509 0
c Encoding variable: aux1539 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6511'
c Var 'aux1539' direct represents '0' with '6511'
c Var 'aux1539' order represents '1' with '6512'
-6511 6512 0
c Var 'aux1539' direct represents '1' with '6513'
6511 -6512 6513 0
-6513 6512 0
-6513 -6511 0
c Var 'aux1539' direct represents '2' with '-6512'
6511 6513 -6512 0
c Encoding variable: aux1540 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6514'
c Var 'aux1540' direct represents '0' with '6514'
c Var 'aux1540' order represents '1' with '6515'
-6514 6515 0
c Var 'aux1540' direct represents '1' with '6516'
6514 -6515 6516 0
-6516 6515 0
-6516 -6514 0
c Var 'aux1540' direct represents '2' with '-6515'
6514 6516 -6515 0
c Encoding variable: aux1541 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1540))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6517'
c Var 'aux1541' direct represents '0' with '6517'
c Var 'aux1541' order represents '1' with '6518'
-6517 6518 0
c Var 'aux1541' direct represents '1' with '6519'
6517 -6518 6519 0
-6519 6518 0
-6519 -6517 0
c Var 'aux1541' order represents '2' with '6520'
-6518 6520 0
c Var 'aux1541' direct represents '2' with '6521'
6518 -6520 6521 0
-6521 6520 0
-6521 -6518 0
c Var 'aux1541' direct represents '3' with '-6520'
6517 6519 6521 -6520 0
c Encoding variable: aux1542 with domain: int(0..4) (representing constraint (aux1537 + aux1539))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6522'
c Var 'aux1542' direct represents '0' with '6522'
c Var 'aux1542' order represents '1' with '6523'
-6522 6523 0
c Var 'aux1542' direct represents '1' with '6524'
6522 -6523 6524 0
-6524 6523 0
-6524 -6522 0
c Var 'aux1542' order represents '2' with '6525'
-6523 6525 0
c Var 'aux1542' direct represents '2' with '6526'
6523 -6525 6526 0
-6526 6525 0
-6526 -6523 0
c Var 'aux1542' order represents '3' with '6527'
-6525 6527 0
c Var 'aux1542' direct represents '3' with '6528'
6525 -6527 6528 0
-6528 6527 0
-6528 -6525 0
c Var 'aux1542' direct represents '4' with '-6527'
6522 6524 6526 6528 -6527 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6529'
c Var 'aux1543' direct represents '0' with '6529'
c Var 'aux1543' order represents '1' with '6530'
-6529 6530 0
c Var 'aux1543' direct represents '1' with '6531'
6529 -6530 6531 0
-6531 6530 0
-6531 -6529 0
c Var 'aux1543' direct represents '2' with '-6530'
6529 6531 -6530 0
c Encoding variable: aux1544 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6532'
c Var 'aux1544' direct represents '0' with '6532'
c Var 'aux1544' order represents '1' with '6533'
-6532 6533 0
c Var 'aux1544' direct represents '1' with '6534'
6532 -6533 6534 0
-6534 6533 0
-6534 -6532 0
c Var 'aux1544' direct represents '2' with '-6533'
6532 6534 -6533 0
c Encoding variable: aux1545 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6535'
c Var 'aux1545' direct represents '0' with '6535'
c Var 'aux1545' order represents '1' with '6536'
-6535 6536 0
c Var 'aux1545' direct represents '1' with '6537'
6535 -6536 6537 0
-6537 6536 0
-6537 -6535 0
c Var 'aux1545' direct represents '2' with '-6536'
6535 6537 -6536 0
c Encoding variable: aux1546 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6538'
c Var 'aux1546' direct represents '0' with '6538'
c Var 'aux1546' order represents '1' with '6539'
-6538 6539 0
c Var 'aux1546' direct represents '1' with '6540'
6538 -6539 6540 0
-6540 6539 0
-6540 -6538 0
c Var 'aux1546' direct represents '2' with '-6539'
6538 6540 -6539 0
c Encoding variable: aux1547 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1546))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6541'
c Var 'aux1547' direct represents '0' with '6541'
c Var 'aux1547' order represents '1' with '6542'
-6541 6542 0
c Var 'aux1547' direct represents '1' with '6543'
6541 -6542 6543 0
-6543 6542 0
-6543 -6541 0
c Var 'aux1547' order represents '2' with '6544'
-6542 6544 0
c Var 'aux1547' direct represents '2' with '6545'
6542 -6544 6545 0
-6545 6544 0
-6545 -6542 0
c Var 'aux1547' direct represents '3' with '-6544'
6541 6543 6545 -6544 0
c Encoding variable: aux1548 with domain: int(0..4) (representing constraint (aux1543 + aux1545))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6546'
c Var 'aux1548' direct represents '0' with '6546'
c Var 'aux1548' order represents '1' with '6547'
-6546 6547 0
c Var 'aux1548' direct represents '1' with '6548'
6546 -6547 6548 0
-6548 6547 0
-6548 -6546 0
c Var 'aux1548' order represents '2' with '6549'
-6547 6549 0
c Var 'aux1548' direct represents '2' with '6550'
6547 -6549 6550 0
-6550 6549 0
-6550 -6547 0
c Var 'aux1548' order represents '3' with '6551'
-6549 6551 0
c Var 'aux1548' direct represents '3' with '6552'
6549 -6551 6552 0
-6552 6551 0
-6552 -6549 0
c Var 'aux1548' direct represents '4' with '-6551'
6546 6548 6550 6552 -6551 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6553'
c Var 'aux1549' direct represents '0' with '6553'
c Var 'aux1549' order represents '1' with '6554'
-6553 6554 0
c Var 'aux1549' direct represents '1' with '6555'
6553 -6554 6555 0
-6555 6554 0
-6555 -6553 0
c Var 'aux1549' direct represents '2' with '-6554'
6553 6555 -6554 0
c Encoding variable: aux1550 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6556'
c Var 'aux1550' direct represents '0' with '6556'
c Var 'aux1550' order represents '1' with '6557'
-6556 6557 0
c Var 'aux1550' direct represents '1' with '6558'
6556 -6557 6558 0
-6558 6557 0
-6558 -6556 0
c Var 'aux1550' direct represents '2' with '-6557'
6556 6558 -6557 0
c Encoding variable: aux1551 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6559'
c Var 'aux1551' direct represents '0' with '6559'
c Var 'aux1551' order represents '1' with '6560'
-6559 6560 0
c Var 'aux1551' direct represents '1' with '6561'
6559 -6560 6561 0
-6561 6560 0
-6561 -6559 0
c Var 'aux1551' direct represents '2' with '-6560'
6559 6561 -6560 0
c Encoding variable: aux1552 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6562'
c Var 'aux1552' direct represents '0' with '6562'
c Var 'aux1552' order represents '1' with '6563'
-6562 6563 0
c Var 'aux1552' direct represents '1' with '6564'
6562 -6563 6564 0
-6564 6563 0
-6564 -6562 0
c Var 'aux1552' direct represents '2' with '-6563'
6562 6564 -6563 0
c Encoding variable: aux1553 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1552))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6565'
c Var 'aux1553' direct represents '0' with '6565'
c Var 'aux1553' order represents '1' with '6566'
-6565 6566 0
c Var 'aux1553' direct represents '1' with '6567'
6565 -6566 6567 0
-6567 6566 0
-6567 -6565 0
c Var 'aux1553' order represents '2' with '6568'
-6566 6568 0
c Var 'aux1553' direct represents '2' with '6569'
6566 -6568 6569 0
-6569 6568 0
-6569 -6566 0
c Var 'aux1553' direct represents '3' with '-6568'
6565 6567 6569 -6568 0
c Encoding variable: aux1554 with domain: int(0..4) (representing constraint (aux1549 + aux1551))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6570'
c Var 'aux1554' direct represents '0' with '6570'
c Var 'aux1554' order represents '1' with '6571'
-6570 6571 0
c Var 'aux1554' direct represents '1' with '6572'
6570 -6571 6572 0
-6572 6571 0
-6572 -6570 0
c Var 'aux1554' order represents '2' with '6573'
-6571 6573 0
c Var 'aux1554' direct represents '2' with '6574'
6571 -6573 6574 0
-6574 6573 0
-6574 -6571 0
c Var 'aux1554' order represents '3' with '6575'
-6573 6575 0
c Var 'aux1554' direct represents '3' with '6576'
6573 -6575 6576 0
-6576 6575 0
-6576 -6573 0
c Var 'aux1554' direct represents '4' with '-6575'
6570 6572 6574 6576 -6575 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6577'
c Var 'aux1555' direct represents '0' with '6577'
c Var 'aux1555' order represents '1' with '6578'
-6577 6578 0
c Var 'aux1555' direct represents '1' with '6579'
6577 -6578 6579 0
-6579 6578 0
-6579 -6577 0
c Var 'aux1555' direct represents '2' with '-6578'
6577 6579 -6578 0
c Encoding variable: aux1556 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6580'
c Var 'aux1556' direct represents '0' with '6580'
c Var 'aux1556' order represents '1' with '6581'
-6580 6581 0
c Var 'aux1556' direct represents '1' with '6582'
6580 -6581 6582 0
-6582 6581 0
-6582 -6580 0
c Var 'aux1556' direct represents '2' with '-6581'
6580 6582 -6581 0
c Encoding variable: aux1557 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6583'
c Var 'aux1557' direct represents '0' with '6583'
c Var 'aux1557' order represents '1' with '6584'
-6583 6584 0
c Var 'aux1557' direct represents '1' with '6585'
6583 -6584 6585 0
-6585 6584 0
-6585 -6583 0
c Var 'aux1557' direct represents '2' with '-6584'
6583 6585 -6584 0
c Encoding variable: aux1558 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6586'
c Var 'aux1558' direct represents '0' with '6586'
c Var 'aux1558' order represents '1' with '6587'
-6586 6587 0
c Var 'aux1558' direct represents '1' with '6588'
6586 -6587 6588 0
-6588 6587 0
-6588 -6586 0
c Var 'aux1558' direct represents '2' with '-6587'
6586 6588 -6587 0
c Encoding variable: aux1559 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1558))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6589'
c Var 'aux1559' direct represents '0' with '6589'
c Var 'aux1559' order represents '1' with '6590'
-6589 6590 0
c Var 'aux1559' direct represents '1' with '6591'
6589 -6590 6591 0
-6591 6590 0
-6591 -6589 0
c Var 'aux1559' order represents '2' with '6592'
-6590 6592 0
c Var 'aux1559' direct represents '2' with '6593'
6590 -6592 6593 0
-6593 6592 0
-6593 -6590 0
c Var 'aux1559' direct represents '3' with '-6592'
6589 6591 6593 -6592 0
c Encoding variable: aux1560 with domain: int(0..4) (representing constraint (aux1555 + aux1557))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6594'
c Var 'aux1560' direct represents '0' with '6594'
c Var 'aux1560' order represents '1' with '6595'
-6594 6595 0
c Var 'aux1560' direct represents '1' with '6596'
6594 -6595 6596 0
-6596 6595 0
-6596 -6594 0
c Var 'aux1560' order represents '2' with '6597'
-6595 6597 0
c Var 'aux1560' direct represents '2' with '6598'
6595 -6597 6598 0
-6598 6597 0
-6598 -6595 0
c Var 'aux1560' order represents '3' with '6599'
-6597 6599 0
c Var 'aux1560' direct represents '3' with '6600'
6597 -6599 6600 0
-6600 6599 0
-6600 -6597 0
c Var 'aux1560' direct represents '4' with '-6599'
6594 6596 6598 6600 -6599 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6601'
c Var 'aux1561' direct represents '0' with '6601'
c Var 'aux1561' order represents '1' with '6602'
-6601 6602 0
c Var 'aux1561' direct represents '1' with '6603'
6601 -6602 6603 0
-6603 6602 0
-6603 -6601 0
c Var 'aux1561' direct represents '2' with '-6602'
6601 6603 -6602 0
c Encoding variable: aux1562 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6604'
c Var 'aux1562' direct represents '0' with '6604'
c Var 'aux1562' order represents '1' with '6605'
-6604 6605 0
c Var 'aux1562' direct represents '1' with '6606'
6604 -6605 6606 0
-6606 6605 0
-6606 -6604 0
c Var 'aux1562' direct represents '2' with '-6605'
6604 6606 -6605 0
c Encoding variable: aux1563 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6607'
c Var 'aux1563' direct represents '0' with '6607'
c Var 'aux1563' order represents '1' with '6608'
-6607 6608 0
c Var 'aux1563' direct represents '1' with '6609'
6607 -6608 6609 0
-6609 6608 0
-6609 -6607 0
c Var 'aux1563' direct represents '2' with '-6608'
6607 6609 -6608 0
c Encoding variable: aux1564 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6610'
c Var 'aux1564' direct represents '0' with '6610'
c Var 'aux1564' order represents '1' with '6611'
-6610 6611 0
c Var 'aux1564' direct represents '1' with '6612'
6610 -6611 6612 0
-6612 6611 0
-6612 -6610 0
c Var 'aux1564' direct represents '2' with '-6611'
6610 6612 -6611 0
c Encoding variable: aux1565 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1564))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6613'
c Var 'aux1565' direct represents '0' with '6613'
c Var 'aux1565' order represents '1' with '6614'
-6613 6614 0
c Var 'aux1565' direct represents '1' with '6615'
6613 -6614 6615 0
-6615 6614 0
-6615 -6613 0
c Var 'aux1565' order represents '2' with '6616'
-6614 6616 0
c Var 'aux1565' direct represents '2' with '6617'
6614 -6616 6617 0
-6617 6616 0
-6617 -6614 0
c Var 'aux1565' direct represents '3' with '-6616'
6613 6615 6617 -6616 0
c Encoding variable: aux1566 with domain: int(0..4) (representing constraint (aux1561 + aux1563))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6618'
c Var 'aux1566' direct represents '0' with '6618'
c Var 'aux1566' order represents '1' with '6619'
-6618 6619 0
c Var 'aux1566' direct represents '1' with '6620'
6618 -6619 6620 0
-6620 6619 0
-6620 -6618 0
c Var 'aux1566' order represents '2' with '6621'
-6619 6621 0
c Var 'aux1566' direct represents '2' with '6622'
6619 -6621 6622 0
-6622 6621 0
-6622 -6619 0
c Var 'aux1566' order represents '3' with '6623'
-6621 6623 0
c Var 'aux1566' direct represents '3' with '6624'
6621 -6623 6624 0
-6624 6623 0
-6624 -6621 0
c Var 'aux1566' direct represents '4' with '-6623'
6618 6620 6622 6624 -6623 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6625'
c Var 'aux1567' direct represents '0' with '6625'
c Var 'aux1567' order represents '1' with '6626'
-6625 6626 0
c Var 'aux1567' direct represents '1' with '6627'
6625 -6626 6627 0
-6627 6626 0
-6627 -6625 0
c Var 'aux1567' direct represents '2' with '-6626'
6625 6627 -6626 0
c Encoding variable: aux1568 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6628'
c Var 'aux1568' direct represents '0' with '6628'
c Var 'aux1568' order represents '1' with '6629'
-6628 6629 0
c Var 'aux1568' direct represents '1' with '6630'
6628 -6629 6630 0
-6630 6629 0
-6630 -6628 0
c Var 'aux1568' direct represents '2' with '-6629'
6628 6630 -6629 0
c Encoding variable: aux1569 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6631'
c Var 'aux1569' direct represents '0' with '6631'
c Var 'aux1569' order represents '1' with '6632'
-6631 6632 0
c Var 'aux1569' direct represents '1' with '6633'
6631 -6632 6633 0
-6633 6632 0
-6633 -6631 0
c Var 'aux1569' direct represents '2' with '-6632'
6631 6633 -6632 0
c Encoding variable: aux1570 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6634'
c Var 'aux1570' direct represents '0' with '6634'
c Var 'aux1570' order represents '1' with '6635'
-6634 6635 0
c Var 'aux1570' direct represents '1' with '6636'
6634 -6635 6636 0
-6636 6635 0
-6636 -6634 0
c Var 'aux1570' direct represents '2' with '-6635'
6634 6636 -6635 0
c Encoding variable: aux1571 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1570))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6637'
c Var 'aux1571' direct represents '0' with '6637'
c Var 'aux1571' order represents '1' with '6638'
-6637 6638 0
c Var 'aux1571' direct represents '1' with '6639'
6637 -6638 6639 0
-6639 6638 0
-6639 -6637 0
c Var 'aux1571' order represents '2' with '6640'
-6638 6640 0
c Var 'aux1571' direct represents '2' with '6641'
6638 -6640 6641 0
-6641 6640 0
-6641 -6638 0
c Var 'aux1571' direct represents '3' with '-6640'
6637 6639 6641 -6640 0
c Encoding variable: aux1572 with domain: int(0..4) (representing constraint (aux1567 + aux1569))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6642'
c Var 'aux1572' direct represents '0' with '6642'
c Var 'aux1572' order represents '1' with '6643'
-6642 6643 0
c Var 'aux1572' direct represents '1' with '6644'
6642 -6643 6644 0
-6644 6643 0
-6644 -6642 0
c Var 'aux1572' order represents '2' with '6645'
-6643 6645 0
c Var 'aux1572' direct represents '2' with '6646'
6643 -6645 6646 0
-6646 6645 0
-6646 -6643 0
c Var 'aux1572' order represents '3' with '6647'
-6645 6647 0
c Var 'aux1572' direct represents '3' with '6648'
6645 -6647 6648 0
-6648 6647 0
-6648 -6645 0
c Var 'aux1572' direct represents '4' with '-6647'
6642 6644 6646 6648 -6647 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6649'
c Var 'aux1573' direct represents '0' with '6649'
c Var 'aux1573' order represents '1' with '6650'
-6649 6650 0
c Var 'aux1573' direct represents '1' with '6651'
6649 -6650 6651 0
-6651 6650 0
-6651 -6649 0
c Var 'aux1573' direct represents '2' with '-6650'
6649 6651 -6650 0
c Encoding variable: aux1574 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6652'
c Var 'aux1574' direct represents '0' with '6652'
c Var 'aux1574' order represents '1' with '6653'
-6652 6653 0
c Var 'aux1574' direct represents '1' with '6654'
6652 -6653 6654 0
-6654 6653 0
-6654 -6652 0
c Var 'aux1574' direct represents '2' with '-6653'
6652 6654 -6653 0
c Encoding variable: aux1575 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6655'
c Var 'aux1575' direct represents '0' with '6655'
c Var 'aux1575' order represents '1' with '6656'
-6655 6656 0
c Var 'aux1575' direct represents '1' with '6657'
6655 -6656 6657 0
-6657 6656 0
-6657 -6655 0
c Var 'aux1575' direct represents '2' with '-6656'
6655 6657 -6656 0
c Encoding variable: aux1576 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6658'
c Var 'aux1576' direct represents '0' with '6658'
c Var 'aux1576' order represents '1' with '6659'
-6658 6659 0
c Var 'aux1576' direct represents '1' with '6660'
6658 -6659 6660 0
-6660 6659 0
-6660 -6658 0
c Var 'aux1576' direct represents '2' with '-6659'
6658 6660 -6659 0
c Encoding variable: aux1577 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1576))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6661'
c Var 'aux1577' direct represents '0' with '6661'
c Var 'aux1577' order represents '1' with '6662'
-6661 6662 0
c Var 'aux1577' direct represents '1' with '6663'
6661 -6662 6663 0
-6663 6662 0
-6663 -6661 0
c Var 'aux1577' order represents '2' with '6664'
-6662 6664 0
c Var 'aux1577' direct represents '2' with '6665'
6662 -6664 6665 0
-6665 6664 0
-6665 -6662 0
c Var 'aux1577' direct represents '3' with '-6664'
6661 6663 6665 -6664 0
c Encoding variable: aux1578 with domain: int(0..4) (representing constraint (aux1573 + aux1575))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6666'
c Var 'aux1578' direct represents '0' with '6666'
c Var 'aux1578' order represents '1' with '6667'
-6666 6667 0
c Var 'aux1578' direct represents '1' with '6668'
6666 -6667 6668 0
-6668 6667 0
-6668 -6666 0
c Var 'aux1578' order represents '2' with '6669'
-6667 6669 0
c Var 'aux1578' direct represents '2' with '6670'
6667 -6669 6670 0
-6670 6669 0
-6670 -6667 0
c Var 'aux1578' order represents '3' with '6671'
-6669 6671 0
c Var 'aux1578' direct represents '3' with '6672'
6669 -6671 6672 0
-6672 6671 0
-6672 -6669 0
c Var 'aux1578' direct represents '4' with '-6671'
6666 6668 6670 6672 -6671 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6673'
c Var 'aux1579' direct represents '0' with '6673'
c Var 'aux1579' order represents '1' with '6674'
-6673 6674 0
c Var 'aux1579' direct represents '1' with '6675'
6673 -6674 6675 0
-6675 6674 0
-6675 -6673 0
c Var 'aux1579' direct represents '2' with '-6674'
6673 6675 -6674 0
c Encoding variable: aux1580 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6676'
c Var 'aux1580' direct represents '0' with '6676'
c Var 'aux1580' order represents '1' with '6677'
-6676 6677 0
c Var 'aux1580' direct represents '1' with '6678'
6676 -6677 6678 0
-6678 6677 0
-6678 -6676 0
c Var 'aux1580' direct represents '2' with '-6677'
6676 6678 -6677 0
c Encoding variable: aux1581 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6679'
c Var 'aux1581' direct represents '0' with '6679'
c Var 'aux1581' order represents '1' with '6680'
-6679 6680 0
c Var 'aux1581' direct represents '1' with '6681'
6679 -6680 6681 0
-6681 6680 0
-6681 -6679 0
c Var 'aux1581' direct represents '2' with '-6680'
6679 6681 -6680 0
c Encoding variable: aux1582 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6682'
c Var 'aux1582' direct represents '0' with '6682'
c Var 'aux1582' order represents '1' with '6683'
-6682 6683 0
c Var 'aux1582' direct represents '1' with '6684'
6682 -6683 6684 0
-6684 6683 0
-6684 -6682 0
c Var 'aux1582' direct represents '2' with '-6683'
6682 6684 -6683 0
c Encoding variable: aux1583 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1582))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6685'
c Var 'aux1583' direct represents '0' with '6685'
c Var 'aux1583' order represents '1' with '6686'
-6685 6686 0
c Var 'aux1583' direct represents '1' with '6687'
6685 -6686 6687 0
-6687 6686 0
-6687 -6685 0
c Var 'aux1583' order represents '2' with '6688'
-6686 6688 0
c Var 'aux1583' direct represents '2' with '6689'
6686 -6688 6689 0
-6689 6688 0
-6689 -6686 0
c Var 'aux1583' direct represents '3' with '-6688'
6685 6687 6689 -6688 0
c Encoding variable: aux1584 with domain: int(0..4) (representing constraint (aux1579 + aux1581))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6690'
c Var 'aux1584' direct represents '0' with '6690'
c Var 'aux1584' order represents '1' with '6691'
-6690 6691 0
c Var 'aux1584' direct represents '1' with '6692'
6690 -6691 6692 0
-6692 6691 0
-6692 -6690 0
c Var 'aux1584' order represents '2' with '6693'
-6691 6693 0
c Var 'aux1584' direct represents '2' with '6694'
6691 -6693 6694 0
-6694 6693 0
-6694 -6691 0
c Var 'aux1584' order represents '3' with '6695'
-6693 6695 0
c Var 'aux1584' direct represents '3' with '6696'
6693 -6695 6696 0
-6696 6695 0
-6696 -6693 0
c Var 'aux1584' direct represents '4' with '-6695'
6690 6692 6694 6696 -6695 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6697'
c Var 'aux1585' direct represents '0' with '6697'
c Var 'aux1585' order represents '1' with '6698'
-6697 6698 0
c Var 'aux1585' direct represents '1' with '6699'
6697 -6698 6699 0
-6699 6698 0
-6699 -6697 0
c Var 'aux1585' direct represents '2' with '-6698'
6697 6699 -6698 0
c Encoding variable: aux1586 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6700'
c Var 'aux1586' direct represents '0' with '6700'
c Var 'aux1586' order represents '1' with '6701'
-6700 6701 0
c Var 'aux1586' direct represents '1' with '6702'
6700 -6701 6702 0
-6702 6701 0
-6702 -6700 0
c Var 'aux1586' direct represents '2' with '-6701'
6700 6702 -6701 0
c Encoding variable: aux1587 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6703'
c Var 'aux1587' direct represents '0' with '6703'
c Var 'aux1587' order represents '1' with '6704'
-6703 6704 0
c Var 'aux1587' direct represents '1' with '6705'
6703 -6704 6705 0
-6705 6704 0
-6705 -6703 0
c Var 'aux1587' direct represents '2' with '-6704'
6703 6705 -6704 0
c Encoding variable: aux1588 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6706'
c Var 'aux1588' direct represents '0' with '6706'
c Var 'aux1588' order represents '1' with '6707'
-6706 6707 0
c Var 'aux1588' direct represents '1' with '6708'
6706 -6707 6708 0
-6708 6707 0
-6708 -6706 0
c Var 'aux1588' direct represents '2' with '-6707'
6706 6708 -6707 0
c Encoding variable: aux1589 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1588))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6709'
c Var 'aux1589' direct represents '0' with '6709'
c Var 'aux1589' order represents '1' with '6710'
-6709 6710 0
c Var 'aux1589' direct represents '1' with '6711'
6709 -6710 6711 0
-6711 6710 0
-6711 -6709 0
c Var 'aux1589' order represents '2' with '6712'
-6710 6712 0
c Var 'aux1589' direct represents '2' with '6713'
6710 -6712 6713 0
-6713 6712 0
-6713 -6710 0
c Var 'aux1589' direct represents '3' with '-6712'
6709 6711 6713 -6712 0
c Encoding variable: aux1590 with domain: int(0..4) (representing constraint (aux1585 + aux1587))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6714'
c Var 'aux1590' direct represents '0' with '6714'
c Var 'aux1590' order represents '1' with '6715'
-6714 6715 0
c Var 'aux1590' direct represents '1' with '6716'
6714 -6715 6716 0
-6716 6715 0
-6716 -6714 0
c Var 'aux1590' order represents '2' with '6717'
-6715 6717 0
c Var 'aux1590' direct represents '2' with '6718'
6715 -6717 6718 0
-6718 6717 0
-6718 -6715 0
c Var 'aux1590' order represents '3' with '6719'
-6717 6719 0
c Var 'aux1590' direct represents '3' with '6720'
6717 -6719 6720 0
-6720 6719 0
-6720 -6717 0
c Var 'aux1590' direct represents '4' with '-6719'
6714 6716 6718 6720 -6719 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6721'
c Var 'aux1591' direct represents '0' with '6721'
c Var 'aux1591' order represents '1' with '6722'
-6721 6722 0
c Var 'aux1591' direct represents '1' with '6723'
6721 -6722 6723 0
-6723 6722 0
-6723 -6721 0
c Var 'aux1591' direct represents '2' with '-6722'
6721 6723 -6722 0
c Encoding variable: aux1592 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6724'
c Var 'aux1592' direct represents '0' with '6724'
c Var 'aux1592' order represents '1' with '6725'
-6724 6725 0
c Var 'aux1592' direct represents '1' with '6726'
6724 -6725 6726 0
-6726 6725 0
-6726 -6724 0
c Var 'aux1592' direct represents '2' with '-6725'
6724 6726 -6725 0
c Encoding variable: aux1593 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6727'
c Var 'aux1593' direct represents '0' with '6727'
c Var 'aux1593' order represents '1' with '6728'
-6727 6728 0
c Var 'aux1593' direct represents '1' with '6729'
6727 -6728 6729 0
-6729 6728 0
-6729 -6727 0
c Var 'aux1593' direct represents '2' with '-6728'
6727 6729 -6728 0
c Encoding variable: aux1594 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6730'
c Var 'aux1594' direct represents '0' with '6730'
c Var 'aux1594' order represents '1' with '6731'
-6730 6731 0
c Var 'aux1594' direct represents '1' with '6732'
6730 -6731 6732 0
-6732 6731 0
-6732 -6730 0
c Var 'aux1594' direct represents '2' with '-6731'
6730 6732 -6731 0
c Encoding variable: aux1595 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1594))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6733'
c Var 'aux1595' direct represents '0' with '6733'
c Var 'aux1595' order represents '1' with '6734'
-6733 6734 0
c Var 'aux1595' direct represents '1' with '6735'
6733 -6734 6735 0
-6735 6734 0
-6735 -6733 0
c Var 'aux1595' order represents '2' with '6736'
-6734 6736 0
c Var 'aux1595' direct represents '2' with '6737'
6734 -6736 6737 0
-6737 6736 0
-6737 -6734 0
c Var 'aux1595' direct represents '3' with '-6736'
6733 6735 6737 -6736 0
c Encoding variable: aux1596 with domain: int(0..4) (representing constraint (aux1591 + aux1593))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6738'
c Var 'aux1596' direct represents '0' with '6738'
c Var 'aux1596' order represents '1' with '6739'
-6738 6739 0
c Var 'aux1596' direct represents '1' with '6740'
6738 -6739 6740 0
-6740 6739 0
-6740 -6738 0
c Var 'aux1596' order represents '2' with '6741'
-6739 6741 0
c Var 'aux1596' direct represents '2' with '6742'
6739 -6741 6742 0
-6742 6741 0
-6742 -6739 0
c Var 'aux1596' order represents '3' with '6743'
-6741 6743 0
c Var 'aux1596' direct represents '3' with '6744'
6741 -6743 6744 0
-6744 6743 0
-6744 -6741 0
c Var 'aux1596' direct represents '4' with '-6743'
6738 6740 6742 6744 -6743 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6745'
c Var 'aux1597' direct represents '0' with '6745'
c Var 'aux1597' order represents '1' with '6746'
-6745 6746 0
c Var 'aux1597' direct represents '1' with '6747'
6745 -6746 6747 0
-6747 6746 0
-6747 -6745 0
c Var 'aux1597' direct represents '2' with '-6746'
6745 6747 -6746 0
c Encoding variable: aux1598 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6748'
c Var 'aux1598' direct represents '0' with '6748'
c Var 'aux1598' order represents '1' with '6749'
-6748 6749 0
c Var 'aux1598' direct represents '1' with '6750'
6748 -6749 6750 0
-6750 6749 0
-6750 -6748 0
c Var 'aux1598' direct represents '2' with '-6749'
6748 6750 -6749 0
c Encoding variable: aux1599 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6751'
c Var 'aux1599' direct represents '0' with '6751'
c Var 'aux1599' order represents '1' with '6752'
-6751 6752 0
c Var 'aux1599' direct represents '1' with '6753'
6751 -6752 6753 0
-6753 6752 0
-6753 -6751 0
c Var 'aux1599' direct represents '2' with '-6752'
6751 6753 -6752 0
c Encoding variable: aux1600 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6754'
c Var 'aux1600' direct represents '0' with '6754'
c Var 'aux1600' order represents '1' with '6755'
-6754 6755 0
c Var 'aux1600' direct represents '1' with '6756'
6754 -6755 6756 0
-6756 6755 0
-6756 -6754 0
c Var 'aux1600' direct represents '2' with '-6755'
6754 6756 -6755 0
c Encoding variable: aux1601 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1600))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6757'
c Var 'aux1601' direct represents '0' with '6757'
c Var 'aux1601' order represents '1' with '6758'
-6757 6758 0
c Var 'aux1601' direct represents '1' with '6759'
6757 -6758 6759 0
-6759 6758 0
-6759 -6757 0
c Var 'aux1601' order represents '2' with '6760'
-6758 6760 0
c Var 'aux1601' direct represents '2' with '6761'
6758 -6760 6761 0
-6761 6760 0
-6761 -6758 0
c Var 'aux1601' direct represents '3' with '-6760'
6757 6759 6761 -6760 0
c Encoding variable: aux1602 with domain: int(0..4) (representing constraint (aux1597 + aux1599))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6762'
c Var 'aux1602' direct represents '0' with '6762'
c Var 'aux1602' order represents '1' with '6763'
-6762 6763 0
c Var 'aux1602' direct represents '1' with '6764'
6762 -6763 6764 0
-6764 6763 0
-6764 -6762 0
c Var 'aux1602' order represents '2' with '6765'
-6763 6765 0
c Var 'aux1602' direct represents '2' with '6766'
6763 -6765 6766 0
-6766 6765 0
-6766 -6763 0
c Var 'aux1602' order represents '3' with '6767'
-6765 6767 0
c Var 'aux1602' direct represents '3' with '6768'
6765 -6767 6768 0
-6768 6767 0
-6768 -6765 0
c Var 'aux1602' direct represents '4' with '-6767'
6762 6764 6766 6768 -6767 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6769'
c Var 'aux1603' direct represents '0' with '6769'
c Var 'aux1603' order represents '1' with '6770'
-6769 6770 0
c Var 'aux1603' direct represents '1' with '6771'
6769 -6770 6771 0
-6771 6770 0
-6771 -6769 0
c Var 'aux1603' direct represents '2' with '-6770'
6769 6771 -6770 0
c Encoding variable: aux1604 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6772'
c Var 'aux1604' direct represents '0' with '6772'
c Var 'aux1604' order represents '1' with '6773'
-6772 6773 0
c Var 'aux1604' direct represents '1' with '6774'
6772 -6773 6774 0
-6774 6773 0
-6774 -6772 0
c Var 'aux1604' direct represents '2' with '-6773'
6772 6774 -6773 0
c Encoding variable: aux1605 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6775'
c Var 'aux1605' direct represents '0' with '6775'
c Var 'aux1605' order represents '1' with '6776'
-6775 6776 0
c Var 'aux1605' direct represents '1' with '6777'
6775 -6776 6777 0
-6777 6776 0
-6777 -6775 0
c Var 'aux1605' direct represents '2' with '-6776'
6775 6777 -6776 0
c Encoding variable: aux1606 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6778'
c Var 'aux1606' direct represents '0' with '6778'
c Var 'aux1606' order represents '1' with '6779'
-6778 6779 0
c Var 'aux1606' direct represents '1' with '6780'
6778 -6779 6780 0
-6780 6779 0
-6780 -6778 0
c Var 'aux1606' direct represents '2' with '-6779'
6778 6780 -6779 0
c Encoding variable: aux1607 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1606))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6781'
c Var 'aux1607' direct represents '0' with '6781'
c Var 'aux1607' order represents '1' with '6782'
-6781 6782 0
c Var 'aux1607' direct represents '1' with '6783'
6781 -6782 6783 0
-6783 6782 0
-6783 -6781 0
c Var 'aux1607' order represents '2' with '6784'
-6782 6784 0
c Var 'aux1607' direct represents '2' with '6785'
6782 -6784 6785 0
-6785 6784 0
-6785 -6782 0
c Var 'aux1607' direct represents '3' with '-6784'
6781 6783 6785 -6784 0
c Encoding variable: aux1608 with domain: int(0..4) (representing constraint (aux1603 + aux1605))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6786'
c Var 'aux1608' direct represents '0' with '6786'
c Var 'aux1608' order represents '1' with '6787'
-6786 6787 0
c Var 'aux1608' direct represents '1' with '6788'
6786 -6787 6788 0
-6788 6787 0
-6788 -6786 0
c Var 'aux1608' order represents '2' with '6789'
-6787 6789 0
c Var 'aux1608' direct represents '2' with '6790'
6787 -6789 6790 0
-6790 6789 0
-6790 -6787 0
c Var 'aux1608' order represents '3' with '6791'
-6789 6791 0
c Var 'aux1608' direct represents '3' with '6792'
6789 -6791 6792 0
-6792 6791 0
-6792 -6789 0
c Var 'aux1608' direct represents '4' with '-6791'
6786 6788 6790 6792 -6791 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6793'
c Var 'aux1609' direct represents '0' with '6793'
c Var 'aux1609' order represents '1' with '6794'
-6793 6794 0
c Var 'aux1609' direct represents '1' with '6795'
6793 -6794 6795 0
-6795 6794 0
-6795 -6793 0
c Var 'aux1609' direct represents '2' with '-6794'
6793 6795 -6794 0
c Encoding variable: aux1610 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6796'
c Var 'aux1610' direct represents '0' with '6796'
c Var 'aux1610' order represents '1' with '6797'
-6796 6797 0
c Var 'aux1610' direct represents '1' with '6798'
6796 -6797 6798 0
-6798 6797 0
-6798 -6796 0
c Var 'aux1610' direct represents '2' with '-6797'
6796 6798 -6797 0
c Encoding variable: aux1611 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6799'
c Var 'aux1611' direct represents '0' with '6799'
c Var 'aux1611' order represents '1' with '6800'
-6799 6800 0
c Var 'aux1611' direct represents '1' with '6801'
6799 -6800 6801 0
-6801 6800 0
-6801 -6799 0
c Var 'aux1611' direct represents '2' with '-6800'
6799 6801 -6800 0
c Encoding variable: aux1612 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6802'
c Var 'aux1612' direct represents '0' with '6802'
c Var 'aux1612' order represents '1' with '6803'
-6802 6803 0
c Var 'aux1612' direct represents '1' with '6804'
6802 -6803 6804 0
-6804 6803 0
-6804 -6802 0
c Var 'aux1612' direct represents '2' with '-6803'
6802 6804 -6803 0
c Encoding variable: aux1613 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1612))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6805'
c Var 'aux1613' direct represents '0' with '6805'
c Var 'aux1613' order represents '1' with '6806'
-6805 6806 0
c Var 'aux1613' direct represents '1' with '6807'
6805 -6806 6807 0
-6807 6806 0
-6807 -6805 0
c Var 'aux1613' order represents '2' with '6808'
-6806 6808 0
c Var 'aux1613' direct represents '2' with '6809'
6806 -6808 6809 0
-6809 6808 0
-6809 -6806 0
c Var 'aux1613' direct represents '3' with '-6808'
6805 6807 6809 -6808 0
c Encoding variable: aux1614 with domain: int(0..4) (representing constraint (aux1609 + aux1611))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6810'
c Var 'aux1614' direct represents '0' with '6810'
c Var 'aux1614' order represents '1' with '6811'
-6810 6811 0
c Var 'aux1614' direct represents '1' with '6812'
6810 -6811 6812 0
-6812 6811 0
-6812 -6810 0
c Var 'aux1614' order represents '2' with '6813'
-6811 6813 0
c Var 'aux1614' direct represents '2' with '6814'
6811 -6813 6814 0
-6814 6813 0
-6814 -6811 0
c Var 'aux1614' order represents '3' with '6815'
-6813 6815 0
c Var 'aux1614' direct represents '3' with '6816'
6813 -6815 6816 0
-6816 6815 0
-6816 -6813 0
c Var 'aux1614' direct represents '4' with '-6815'
6810 6812 6814 6816 -6815 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6817'
c Var 'aux1615' direct represents '0' with '6817'
c Var 'aux1615' order represents '1' with '6818'
-6817 6818 0
c Var 'aux1615' direct represents '1' with '6819'
6817 -6818 6819 0
-6819 6818 0
-6819 -6817 0
c Var 'aux1615' direct represents '2' with '-6818'
6817 6819 -6818 0
c Encoding variable: aux1616 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6820'
c Var 'aux1616' direct represents '0' with '6820'
c Var 'aux1616' order represents '1' with '6821'
-6820 6821 0
c Var 'aux1616' direct represents '1' with '6822'
6820 -6821 6822 0
-6822 6821 0
-6822 -6820 0
c Var 'aux1616' direct represents '2' with '-6821'
6820 6822 -6821 0
c Encoding variable: aux1617 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6823'
c Var 'aux1617' direct represents '0' with '6823'
c Var 'aux1617' order represents '1' with '6824'
-6823 6824 0
c Var 'aux1617' direct represents '1' with '6825'
6823 -6824 6825 0
-6825 6824 0
-6825 -6823 0
c Var 'aux1617' direct represents '2' with '-6824'
6823 6825 -6824 0
c Encoding variable: aux1618 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6826'
c Var 'aux1618' direct represents '0' with '6826'
c Var 'aux1618' order represents '1' with '6827'
-6826 6827 0
c Var 'aux1618' direct represents '1' with '6828'
6826 -6827 6828 0
-6828 6827 0
-6828 -6826 0
c Var 'aux1618' direct represents '2' with '-6827'
6826 6828 -6827 0
c Encoding variable: aux1619 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1618))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6829'
c Var 'aux1619' direct represents '0' with '6829'
c Var 'aux1619' order represents '1' with '6830'
-6829 6830 0
c Var 'aux1619' direct represents '1' with '6831'
6829 -6830 6831 0
-6831 6830 0
-6831 -6829 0
c Var 'aux1619' order represents '2' with '6832'
-6830 6832 0
c Var 'aux1619' direct represents '2' with '6833'
6830 -6832 6833 0
-6833 6832 0
-6833 -6830 0
c Var 'aux1619' direct represents '3' with '-6832'
6829 6831 6833 -6832 0
c Encoding variable: aux1620 with domain: int(0..4) (representing constraint (aux1615 + aux1617))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6834'
c Var 'aux1620' direct represents '0' with '6834'
c Var 'aux1620' order represents '1' with '6835'
-6834 6835 0
c Var 'aux1620' direct represents '1' with '6836'
6834 -6835 6836 0
-6836 6835 0
-6836 -6834 0
c Var 'aux1620' order represents '2' with '6837'
-6835 6837 0
c Var 'aux1620' direct represents '2' with '6838'
6835 -6837 6838 0
-6838 6837 0
-6838 -6835 0
c Var 'aux1620' order represents '3' with '6839'
-6837 6839 0
c Var 'aux1620' direct represents '3' with '6840'
6837 -6839 6840 0
-6840 6839 0
-6840 -6837 0
c Var 'aux1620' direct represents '4' with '-6839'
6834 6836 6838 6840 -6839 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6841'
c Var 'aux1621' direct represents '0' with '6841'
c Var 'aux1621' order represents '1' with '6842'
-6841 6842 0
c Var 'aux1621' direct represents '1' with '6843'
6841 -6842 6843 0
-6843 6842 0
-6843 -6841 0
c Var 'aux1621' direct represents '2' with '-6842'
6841 6843 -6842 0
c Encoding variable: aux1622 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6844'
c Var 'aux1622' direct represents '0' with '6844'
c Var 'aux1622' order represents '1' with '6845'
-6844 6845 0
c Var 'aux1622' direct represents '1' with '6846'
6844 -6845 6846 0
-6846 6845 0
-6846 -6844 0
c Var 'aux1622' direct represents '2' with '-6845'
6844 6846 -6845 0
c Encoding variable: aux1623 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6847'
c Var 'aux1623' direct represents '0' with '6847'
c Var 'aux1623' order represents '1' with '6848'
-6847 6848 0
c Var 'aux1623' direct represents '1' with '6849'
6847 -6848 6849 0
-6849 6848 0
-6849 -6847 0
c Var 'aux1623' direct represents '2' with '-6848'
6847 6849 -6848 0
c Encoding variable: aux1624 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6850'
c Var 'aux1624' direct represents '0' with '6850'
c Var 'aux1624' order represents '1' with '6851'
-6850 6851 0
c Var 'aux1624' direct represents '1' with '6852'
6850 -6851 6852 0
-6852 6851 0
-6852 -6850 0
c Var 'aux1624' direct represents '2' with '-6851'
6850 6852 -6851 0
c Encoding variable: aux1625 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1624))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6853'
c Var 'aux1625' direct represents '0' with '6853'
c Var 'aux1625' order represents '1' with '6854'
-6853 6854 0
c Var 'aux1625' direct represents '1' with '6855'
6853 -6854 6855 0
-6855 6854 0
-6855 -6853 0
c Var 'aux1625' order represents '2' with '6856'
-6854 6856 0
c Var 'aux1625' direct represents '2' with '6857'
6854 -6856 6857 0
-6857 6856 0
-6857 -6854 0
c Var 'aux1625' direct represents '3' with '-6856'
6853 6855 6857 -6856 0
c Encoding variable: aux1626 with domain: int(0..4) (representing constraint (aux1621 + aux1623))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6858'
c Var 'aux1626' direct represents '0' with '6858'
c Var 'aux1626' order represents '1' with '6859'
-6858 6859 0
c Var 'aux1626' direct represents '1' with '6860'
6858 -6859 6860 0
-6860 6859 0
-6860 -6858 0
c Var 'aux1626' order represents '2' with '6861'
-6859 6861 0
c Var 'aux1626' direct represents '2' with '6862'
6859 -6861 6862 0
-6862 6861 0
-6862 -6859 0
c Var 'aux1626' order represents '3' with '6863'
-6861 6863 0
c Var 'aux1626' direct represents '3' with '6864'
6861 -6863 6864 0
-6864 6863 0
-6864 -6861 0
c Var 'aux1626' direct represents '4' with '-6863'
6858 6860 6862 6864 -6863 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6865'
c Var 'aux1627' direct represents '0' with '6865'
c Var 'aux1627' order represents '1' with '6866'
-6865 6866 0
c Var 'aux1627' direct represents '1' with '6867'
6865 -6866 6867 0
-6867 6866 0
-6867 -6865 0
c Var 'aux1627' direct represents '2' with '-6866'
6865 6867 -6866 0
c Encoding variable: aux1628 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6868'
c Var 'aux1628' direct represents '0' with '6868'
c Var 'aux1628' order represents '1' with '6869'
-6868 6869 0
c Var 'aux1628' direct represents '1' with '6870'
6868 -6869 6870 0
-6870 6869 0
-6870 -6868 0
c Var 'aux1628' direct represents '2' with '-6869'
6868 6870 -6869 0
c Encoding variable: aux1629 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6871'
c Var 'aux1629' direct represents '0' with '6871'
c Var 'aux1629' order represents '1' with '6872'
-6871 6872 0
c Var 'aux1629' direct represents '1' with '6873'
6871 -6872 6873 0
-6873 6872 0
-6873 -6871 0
c Var 'aux1629' direct represents '2' with '-6872'
6871 6873 -6872 0
c Encoding variable: aux1630 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6874'
c Var 'aux1630' direct represents '0' with '6874'
c Var 'aux1630' order represents '1' with '6875'
-6874 6875 0
c Var 'aux1630' direct represents '1' with '6876'
6874 -6875 6876 0
-6876 6875 0
-6876 -6874 0
c Var 'aux1630' direct represents '2' with '-6875'
6874 6876 -6875 0
c Encoding variable: aux1631 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1630))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6877'
c Var 'aux1631' direct represents '0' with '6877'
c Var 'aux1631' order represents '1' with '6878'
-6877 6878 0
c Var 'aux1631' direct represents '1' with '6879'
6877 -6878 6879 0
-6879 6878 0
-6879 -6877 0
c Var 'aux1631' order represents '2' with '6880'
-6878 6880 0
c Var 'aux1631' direct represents '2' with '6881'
6878 -6880 6881 0
-6881 6880 0
-6881 -6878 0
c Var 'aux1631' direct represents '3' with '-6880'
6877 6879 6881 -6880 0
c Encoding variable: aux1632 with domain: int(0..4) (representing constraint (aux1627 + aux1629))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6882'
c Var 'aux1632' direct represents '0' with '6882'
c Var 'aux1632' order represents '1' with '6883'
-6882 6883 0
c Var 'aux1632' direct represents '1' with '6884'
6882 -6883 6884 0
-6884 6883 0
-6884 -6882 0
c Var 'aux1632' order represents '2' with '6885'
-6883 6885 0
c Var 'aux1632' direct represents '2' with '6886'
6883 -6885 6886 0
-6886 6885 0
-6886 -6883 0
c Var 'aux1632' order represents '3' with '6887'
-6885 6887 0
c Var 'aux1632' direct represents '3' with '6888'
6885 -6887 6888 0
-6888 6887 0
-6888 -6885 0
c Var 'aux1632' direct represents '4' with '-6887'
6882 6884 6886 6888 -6887 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6889'
c Var 'aux1633' direct represents '0' with '6889'
c Var 'aux1633' order represents '1' with '6890'
-6889 6890 0
c Var 'aux1633' direct represents '1' with '6891'
6889 -6890 6891 0
-6891 6890 0
-6891 -6889 0
c Var 'aux1633' direct represents '2' with '-6890'
6889 6891 -6890 0
c Encoding variable: aux1634 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6892'
c Var 'aux1634' direct represents '0' with '6892'
c Var 'aux1634' order represents '1' with '6893'
-6892 6893 0
c Var 'aux1634' direct represents '1' with '6894'
6892 -6893 6894 0
-6894 6893 0
-6894 -6892 0
c Var 'aux1634' direct represents '2' with '-6893'
6892 6894 -6893 0
c Encoding variable: aux1635 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6895'
c Var 'aux1635' direct represents '0' with '6895'
c Var 'aux1635' order represents '1' with '6896'
-6895 6896 0
c Var 'aux1635' direct represents '1' with '6897'
6895 -6896 6897 0
-6897 6896 0
-6897 -6895 0
c Var 'aux1635' direct represents '2' with '-6896'
6895 6897 -6896 0
c Encoding variable: aux1636 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6898'
c Var 'aux1636' direct represents '0' with '6898'
c Var 'aux1636' order represents '1' with '6899'
-6898 6899 0
c Var 'aux1636' direct represents '1' with '6900'
6898 -6899 6900 0
-6900 6899 0
-6900 -6898 0
c Var 'aux1636' direct represents '2' with '-6899'
6898 6900 -6899 0
c Encoding variable: aux1637 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1636))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6901'
c Var 'aux1637' direct represents '0' with '6901'
c Var 'aux1637' order represents '1' with '6902'
-6901 6902 0
c Var 'aux1637' direct represents '1' with '6903'
6901 -6902 6903 0
-6903 6902 0
-6903 -6901 0
c Var 'aux1637' order represents '2' with '6904'
-6902 6904 0
c Var 'aux1637' direct represents '2' with '6905'
6902 -6904 6905 0
-6905 6904 0
-6905 -6902 0
c Var 'aux1637' direct represents '3' with '-6904'
6901 6903 6905 -6904 0
c Encoding variable: aux1638 with domain: int(0..4) (representing constraint (aux1633 + aux1635))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6906'
c Var 'aux1638' direct represents '0' with '6906'
c Var 'aux1638' order represents '1' with '6907'
-6906 6907 0
c Var 'aux1638' direct represents '1' with '6908'
6906 -6907 6908 0
-6908 6907 0
-6908 -6906 0
c Var 'aux1638' order represents '2' with '6909'
-6907 6909 0
c Var 'aux1638' direct represents '2' with '6910'
6907 -6909 6910 0
-6910 6909 0
-6910 -6907 0
c Var 'aux1638' order represents '3' with '6911'
-6909 6911 0
c Var 'aux1638' direct represents '3' with '6912'
6909 -6911 6912 0
-6912 6911 0
-6912 -6909 0
c Var 'aux1638' direct represents '4' with '-6911'
6906 6908 6910 6912 -6911 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6913'
c Var 'aux1639' direct represents '0' with '6913'
c Var 'aux1639' order represents '1' with '6914'
-6913 6914 0
c Var 'aux1639' direct represents '1' with '6915'
6913 -6914 6915 0
-6915 6914 0
-6915 -6913 0
c Var 'aux1639' direct represents '2' with '-6914'
6913 6915 -6914 0
c Encoding variable: aux1640 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6916'
c Var 'aux1640' direct represents '0' with '6916'
c Var 'aux1640' order represents '1' with '6917'
-6916 6917 0
c Var 'aux1640' direct represents '1' with '6918'
6916 -6917 6918 0
-6918 6917 0
-6918 -6916 0
c Var 'aux1640' direct represents '2' with '-6917'
6916 6918 -6917 0
c Encoding variable: aux1641 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6919'
c Var 'aux1641' direct represents '0' with '6919'
c Var 'aux1641' order represents '1' with '6920'
-6919 6920 0
c Var 'aux1641' direct represents '1' with '6921'
6919 -6920 6921 0
-6921 6920 0
-6921 -6919 0
c Var 'aux1641' direct represents '2' with '-6920'
6919 6921 -6920 0
c Encoding variable: aux1642 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6922'
c Var 'aux1642' direct represents '0' with '6922'
c Var 'aux1642' order represents '1' with '6923'
-6922 6923 0
c Var 'aux1642' direct represents '1' with '6924'
6922 -6923 6924 0
-6924 6923 0
-6924 -6922 0
c Var 'aux1642' direct represents '2' with '-6923'
6922 6924 -6923 0
c Encoding variable: aux1643 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1642))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6925'
c Var 'aux1643' direct represents '0' with '6925'
c Var 'aux1643' order represents '1' with '6926'
-6925 6926 0
c Var 'aux1643' direct represents '1' with '6927'
6925 -6926 6927 0
-6927 6926 0
-6927 -6925 0
c Var 'aux1643' order represents '2' with '6928'
-6926 6928 0
c Var 'aux1643' direct represents '2' with '6929'
6926 -6928 6929 0
-6929 6928 0
-6929 -6926 0
c Var 'aux1643' direct represents '3' with '-6928'
6925 6927 6929 -6928 0
c Encoding variable: aux1644 with domain: int(0..4) (representing constraint (aux1639 + aux1641))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6930'
c Var 'aux1644' direct represents '0' with '6930'
c Var 'aux1644' order represents '1' with '6931'
-6930 6931 0
c Var 'aux1644' direct represents '1' with '6932'
6930 -6931 6932 0
-6932 6931 0
-6932 -6930 0
c Var 'aux1644' order represents '2' with '6933'
-6931 6933 0
c Var 'aux1644' direct represents '2' with '6934'
6931 -6933 6934 0
-6934 6933 0
-6934 -6931 0
c Var 'aux1644' order represents '3' with '6935'
-6933 6935 0
c Var 'aux1644' direct represents '3' with '6936'
6933 -6935 6936 0
-6936 6935 0
-6936 -6933 0
c Var 'aux1644' direct represents '4' with '-6935'
6930 6932 6934 6936 -6935 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6937'
c Var 'aux1645' direct represents '0' with '6937'
c Var 'aux1645' order represents '1' with '6938'
-6937 6938 0
c Var 'aux1645' direct represents '1' with '6939'
6937 -6938 6939 0
-6939 6938 0
-6939 -6937 0
c Var 'aux1645' direct represents '2' with '-6938'
6937 6939 -6938 0
c Encoding variable: aux1646 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6940'
c Var 'aux1646' direct represents '0' with '6940'
c Var 'aux1646' order represents '1' with '6941'
-6940 6941 0
c Var 'aux1646' direct represents '1' with '6942'
6940 -6941 6942 0
-6942 6941 0
-6942 -6940 0
c Var 'aux1646' direct represents '2' with '-6941'
6940 6942 -6941 0
c Encoding variable: aux1647 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6943'
c Var 'aux1647' direct represents '0' with '6943'
c Var 'aux1647' order represents '1' with '6944'
-6943 6944 0
c Var 'aux1647' direct represents '1' with '6945'
6943 -6944 6945 0
-6945 6944 0
-6945 -6943 0
c Var 'aux1647' direct represents '2' with '-6944'
6943 6945 -6944 0
c Encoding variable: aux1648 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6946'
c Var 'aux1648' direct represents '0' with '6946'
c Var 'aux1648' order represents '1' with '6947'
-6946 6947 0
c Var 'aux1648' direct represents '1' with '6948'
6946 -6947 6948 0
-6948 6947 0
-6948 -6946 0
c Var 'aux1648' direct represents '2' with '-6947'
6946 6948 -6947 0
c Encoding variable: aux1649 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1648))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6949'
c Var 'aux1649' direct represents '0' with '6949'
c Var 'aux1649' order represents '1' with '6950'
-6949 6950 0
c Var 'aux1649' direct represents '1' with '6951'
6949 -6950 6951 0
-6951 6950 0
-6951 -6949 0
c Var 'aux1649' order represents '2' with '6952'
-6950 6952 0
c Var 'aux1649' direct represents '2' with '6953'
6950 -6952 6953 0
-6953 6952 0
-6953 -6950 0
c Var 'aux1649' direct represents '3' with '-6952'
6949 6951 6953 -6952 0
c Encoding variable: aux1650 with domain: int(0..4) (representing constraint (aux1645 + aux1647))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6954'
c Var 'aux1650' direct represents '0' with '6954'
c Var 'aux1650' order represents '1' with '6955'
-6954 6955 0
c Var 'aux1650' direct represents '1' with '6956'
6954 -6955 6956 0
-6956 6955 0
-6956 -6954 0
c Var 'aux1650' order represents '2' with '6957'
-6955 6957 0
c Var 'aux1650' direct represents '2' with '6958'
6955 -6957 6958 0
-6958 6957 0
-6958 -6955 0
c Var 'aux1650' order represents '3' with '6959'
-6957 6959 0
c Var 'aux1650' direct represents '3' with '6960'
6957 -6959 6960 0
-6960 6959 0
-6960 -6957 0
c Var 'aux1650' direct represents '4' with '-6959'
6954 6956 6958 6960 -6959 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6961'
c Var 'aux1651' direct represents '0' with '6961'
c Var 'aux1651' order represents '1' with '6962'
-6961 6962 0
c Var 'aux1651' direct represents '1' with '6963'
6961 -6962 6963 0
-6963 6962 0
-6963 -6961 0
c Var 'aux1651' direct represents '2' with '-6962'
6961 6963 -6962 0
c Encoding variable: aux1652 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6964'
c Var 'aux1652' direct represents '0' with '6964'
c Var 'aux1652' order represents '1' with '6965'
-6964 6965 0
c Var 'aux1652' direct represents '1' with '6966'
6964 -6965 6966 0
-6966 6965 0
-6966 -6964 0
c Var 'aux1652' direct represents '2' with '-6965'
6964 6966 -6965 0
c Encoding variable: aux1653 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6967'
c Var 'aux1653' direct represents '0' with '6967'
c Var 'aux1653' order represents '1' with '6968'
-6967 6968 0
c Var 'aux1653' direct represents '1' with '6969'
6967 -6968 6969 0
-6969 6968 0
-6969 -6967 0
c Var 'aux1653' direct represents '2' with '-6968'
6967 6969 -6968 0
c Encoding variable: aux1654 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6970'
c Var 'aux1654' direct represents '0' with '6970'
c Var 'aux1654' order represents '1' with '6971'
-6970 6971 0
c Var 'aux1654' direct represents '1' with '6972'
6970 -6971 6972 0
-6972 6971 0
-6972 -6970 0
c Var 'aux1654' direct represents '2' with '-6971'
6970 6972 -6971 0
c Encoding variable: aux1655 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1654))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6973'
c Var 'aux1655' direct represents '0' with '6973'
c Var 'aux1655' order represents '1' with '6974'
-6973 6974 0
c Var 'aux1655' direct represents '1' with '6975'
6973 -6974 6975 0
-6975 6974 0
-6975 -6973 0
c Var 'aux1655' order represents '2' with '6976'
-6974 6976 0
c Var 'aux1655' direct represents '2' with '6977'
6974 -6976 6977 0
-6977 6976 0
-6977 -6974 0
c Var 'aux1655' direct represents '3' with '-6976'
6973 6975 6977 -6976 0
c Encoding variable: aux1656 with domain: int(0..4) (representing constraint (aux1651 + aux1653))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6978'
c Var 'aux1656' direct represents '0' with '6978'
c Var 'aux1656' order represents '1' with '6979'
-6978 6979 0
c Var 'aux1656' direct represents '1' with '6980'
6978 -6979 6980 0
-6980 6979 0
-6980 -6978 0
c Var 'aux1656' order represents '2' with '6981'
-6979 6981 0
c Var 'aux1656' direct represents '2' with '6982'
6979 -6981 6982 0
-6982 6981 0
-6982 -6979 0
c Var 'aux1656' order represents '3' with '6983'
-6981 6983 0
c Var 'aux1656' direct represents '3' with '6984'
6981 -6983 6984 0
-6984 6983 0
-6984 -6981 0
c Var 'aux1656' direct represents '4' with '-6983'
6978 6980 6982 6984 -6983 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6985'
c Var 'aux1657' direct represents '0' with '6985'
c Var 'aux1657' order represents '1' with '6986'
-6985 6986 0
c Var 'aux1657' direct represents '1' with '6987'
6985 -6986 6987 0
-6987 6986 0
-6987 -6985 0
c Var 'aux1657' direct represents '2' with '-6986'
6985 6987 -6986 0
c Encoding variable: aux1658 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6988'
c Var 'aux1658' direct represents '0' with '6988'
c Var 'aux1658' order represents '1' with '6989'
-6988 6989 0
c Var 'aux1658' direct represents '1' with '6990'
6988 -6989 6990 0
-6990 6989 0
-6990 -6988 0
c Var 'aux1658' direct represents '2' with '-6989'
6988 6990 -6989 0
c Encoding variable: aux1659 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6991'
c Var 'aux1659' direct represents '0' with '6991'
c Var 'aux1659' order represents '1' with '6992'
-6991 6992 0
c Var 'aux1659' direct represents '1' with '6993'
6991 -6992 6993 0
-6993 6992 0
-6993 -6991 0
c Var 'aux1659' direct represents '2' with '-6992'
6991 6993 -6992 0
c Encoding variable: aux1660 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6994'
c Var 'aux1660' direct represents '0' with '6994'
c Var 'aux1660' order represents '1' with '6995'
-6994 6995 0
c Var 'aux1660' direct represents '1' with '6996'
6994 -6995 6996 0
-6996 6995 0
-6996 -6994 0
c Var 'aux1660' direct represents '2' with '-6995'
6994 6996 -6995 0
c Encoding variable: aux1661 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1660))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6997'
c Var 'aux1661' direct represents '0' with '6997'
c Var 'aux1661' order represents '1' with '6998'
-6997 6998 0
c Var 'aux1661' direct represents '1' with '6999'
6997 -6998 6999 0
-6999 6998 0
-6999 -6997 0
c Var 'aux1661' order represents '2' with '7000'
-6998 7000 0
c Var 'aux1661' direct represents '2' with '7001'
6998 -7000 7001 0
-7001 7000 0
-7001 -6998 0
c Var 'aux1661' direct represents '3' with '-7000'
6997 6999 7001 -7000 0
c Encoding variable: aux1662 with domain: int(0..4) (representing constraint (aux1657 + aux1659))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '7002'
c Var 'aux1662' direct represents '0' with '7002'
c Var 'aux1662' order represents '1' with '7003'
-7002 7003 0
c Var 'aux1662' direct represents '1' with '7004'
7002 -7003 7004 0
-7004 7003 0
-7004 -7002 0
c Var 'aux1662' order represents '2' with '7005'
-7003 7005 0
c Var 'aux1662' direct represents '2' with '7006'
7003 -7005 7006 0
-7006 7005 0
-7006 -7003 0
c Var 'aux1662' order represents '3' with '7007'
-7005 7007 0
c Var 'aux1662' direct represents '3' with '7008'
7005 -7007 7008 0
-7008 7007 0
-7008 -7005 0
c Var 'aux1662' direct represents '4' with '-7007'
7002 7004 7006 7008 -7007 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '7009'
c Var 'aux1663' direct represents '0' with '7009'
c Var 'aux1663' order represents '1' with '7010'
-7009 7010 0
c Var 'aux1663' direct represents '1' with '7011'
7009 -7010 7011 0
-7011 7010 0
-7011 -7009 0
c Var 'aux1663' direct represents '2' with '-7010'
7009 7011 -7010 0
c Encoding variable: aux1664 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '7012'
c Var 'aux1664' direct represents '0' with '7012'
c Var 'aux1664' order represents '1' with '7013'
-7012 7013 0
c Var 'aux1664' direct represents '1' with '7014'
7012 -7013 7014 0
-7014 7013 0
-7014 -7012 0
c Var 'aux1664' direct represents '2' with '-7013'
7012 7014 -7013 0
c Encoding variable: aux1665 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '7015'
c Var 'aux1665' direct represents '0' with '7015'
c Var 'aux1665' order represents '1' with '7016'
-7015 7016 0
c Var 'aux1665' direct represents '1' with '7017'
7015 -7016 7017 0
-7017 7016 0
-7017 -7015 0
c Var 'aux1665' direct represents '2' with '-7016'
7015 7017 -7016 0
c Encoding variable: aux1666 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '7018'
c Var 'aux1666' direct represents '0' with '7018'
c Var 'aux1666' order represents '1' with '7019'
-7018 7019 0
c Var 'aux1666' direct represents '1' with '7020'
7018 -7019 7020 0
-7020 7019 0
-7020 -7018 0
c Var 'aux1666' direct represents '2' with '-7019'
7018 7020 -7019 0
c Encoding variable: aux1667 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1666))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '7021'
c Var 'aux1667' direct represents '0' with '7021'
c Var 'aux1667' order represents '1' with '7022'
-7021 7022 0
c Var 'aux1667' direct represents '1' with '7023'
7021 -7022 7023 0
-7023 7022 0
-7023 -7021 0
c Var 'aux1667' order represents '2' with '7024'
-7022 7024 0
c Var 'aux1667' direct represents '2' with '7025'
7022 -7024 7025 0
-7025 7024 0
-7025 -7022 0
c Var 'aux1667' direct represents '3' with '-7024'
7021 7023 7025 -7024 0
c Encoding variable: aux1668 with domain: int(0..4) (representing constraint (aux1663 + aux1665))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '7026'
c Var 'aux1668' direct represents '0' with '7026'
c Var 'aux1668' order represents '1' with '7027'
-7026 7027 0
c Var 'aux1668' direct represents '1' with '7028'
7026 -7027 7028 0
-7028 7027 0
-7028 -7026 0
c Var 'aux1668' order represents '2' with '7029'
-7027 7029 0
c Var 'aux1668' direct represents '2' with '7030'
7027 -7029 7030 0
-7030 7029 0
-7030 -7027 0
c Var 'aux1668' order represents '3' with '7031'
-7029 7031 0
c Var 'aux1668' direct represents '3' with '7032'
7029 -7031 7032 0
-7032 7031 0
-7032 -7029 0
c Var 'aux1668' direct represents '4' with '-7031'
7026 7028 7030 7032 -7031 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '7033'
c Var 'aux1669' direct represents '0' with '7033'
c Var 'aux1669' order represents '1' with '7034'
-7033 7034 0
c Var 'aux1669' direct represents '1' with '7035'
7033 -7034 7035 0
-7035 7034 0
-7035 -7033 0
c Var 'aux1669' direct represents '2' with '-7034'
7033 7035 -7034 0
c Encoding variable: aux1670 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '7036'
c Var 'aux1670' direct represents '0' with '7036'
c Var 'aux1670' order represents '1' with '7037'
-7036 7037 0
c Var 'aux1670' direct represents '1' with '7038'
7036 -7037 7038 0
-7038 7037 0
-7038 -7036 0
c Var 'aux1670' direct represents '2' with '-7037'
7036 7038 -7037 0
c Encoding variable: aux1671 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '7039'
c Var 'aux1671' direct represents '0' with '7039'
c Var 'aux1671' order represents '1' with '7040'
-7039 7040 0
c Var 'aux1671' direct represents '1' with '7041'
7039 -7040 7041 0
-7041 7040 0
-7041 -7039 0
c Var 'aux1671' direct represents '2' with '-7040'
7039 7041 -7040 0
c Encoding variable: aux1672 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '7042'
c Var 'aux1672' direct represents '0' with '7042'
c Var 'aux1672' order represents '1' with '7043'
-7042 7043 0
c Var 'aux1672' direct represents '1' with '7044'
7042 -7043 7044 0
-7044 7043 0
-7044 -7042 0
c Var 'aux1672' direct represents '2' with '-7043'
7042 7044 -7043 0
c Encoding variable: aux1673 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1672))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '7045'
c Var 'aux1673' direct represents '0' with '7045'
c Var 'aux1673' order represents '1' with '7046'
-7045 7046 0
c Var 'aux1673' direct represents '1' with '7047'
7045 -7046 7047 0
-7047 7046 0
-7047 -7045 0
c Var 'aux1673' order represents '2' with '7048'
-7046 7048 0
c Var 'aux1673' direct represents '2' with '7049'
7046 -7048 7049 0
-7049 7048 0
-7049 -7046 0
c Var 'aux1673' direct represents '3' with '-7048'
7045 7047 7049 -7048 0
c Encoding variable: aux1674 with domain: int(0..4) (representing constraint (aux1669 + aux1671))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '7050'
c Var 'aux1674' direct represents '0' with '7050'
c Var 'aux1674' order represents '1' with '7051'
-7050 7051 0
c Var 'aux1674' direct represents '1' with '7052'
7050 -7051 7052 0
-7052 7051 0
-7052 -7050 0
c Var 'aux1674' order represents '2' with '7053'
-7051 7053 0
c Var 'aux1674' direct represents '2' with '7054'
7051 -7053 7054 0
-7054 7053 0
-7054 -7051 0
c Var 'aux1674' order represents '3' with '7055'
-7053 7055 0
c Var 'aux1674' direct represents '3' with '7056'
7053 -7055 7056 0
-7056 7055 0
-7056 -7053 0
c Var 'aux1674' direct represents '4' with '-7055'
7050 7052 7054 7056 -7055 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '7057'
c Var 'aux1675' direct represents '0' with '7057'
c Var 'aux1675' order represents '1' with '7058'
-7057 7058 0
c Var 'aux1675' direct represents '1' with '7059'
7057 -7058 7059 0
-7059 7058 0
-7059 -7057 0
c Var 'aux1675' direct represents '2' with '-7058'
7057 7059 -7058 0
c Encoding variable: aux1676 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '7060'
c Var 'aux1676' direct represents '0' with '7060'
c Var 'aux1676' order represents '1' with '7061'
-7060 7061 0
c Var 'aux1676' direct represents '1' with '7062'
7060 -7061 7062 0
-7062 7061 0
-7062 -7060 0
c Var 'aux1676' direct represents '2' with '-7061'
7060 7062 -7061 0
c Encoding variable: aux1677 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '7063'
c Var 'aux1677' direct represents '0' with '7063'
c Var 'aux1677' order represents '1' with '7064'
-7063 7064 0
c Var 'aux1677' direct represents '1' with '7065'
7063 -7064 7065 0
-7065 7064 0
-7065 -7063 0
c Var 'aux1677' direct represents '2' with '-7064'
7063 7065 -7064 0
c Encoding variable: aux1678 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '7066'
c Var 'aux1678' direct represents '0' with '7066'
c Var 'aux1678' order represents '1' with '7067'
-7066 7067 0
c Var 'aux1678' direct represents '1' with '7068'
7066 -7067 7068 0
-7068 7067 0
-7068 -7066 0
c Var 'aux1678' direct represents '2' with '-7067'
7066 7068 -7067 0
c Encoding variable: aux1679 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1678))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '7069'
c Var 'aux1679' direct represents '0' with '7069'
c Var 'aux1679' order represents '1' with '7070'
-7069 7070 0
c Var 'aux1679' direct represents '1' with '7071'
7069 -7070 7071 0
-7071 7070 0
-7071 -7069 0
c Var 'aux1679' order represents '2' with '7072'
-7070 7072 0
c Var 'aux1679' direct represents '2' with '7073'
7070 -7072 7073 0
-7073 7072 0
-7073 -7070 0
c Var 'aux1679' direct represents '3' with '-7072'
7069 7071 7073 -7072 0
c Encoding variable: aux1680 with domain: int(0..4) (representing constraint (aux1675 + aux1677))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '7074'
c Var 'aux1680' direct represents '0' with '7074'
c Var 'aux1680' order represents '1' with '7075'
-7074 7075 0
c Var 'aux1680' direct represents '1' with '7076'
7074 -7075 7076 0
-7076 7075 0
-7076 -7074 0
c Var 'aux1680' order represents '2' with '7077'
-7075 7077 0
c Var 'aux1680' direct represents '2' with '7078'
7075 -7077 7078 0
-7078 7077 0
-7078 -7075 0
c Var 'aux1680' order represents '3' with '7079'
-7077 7079 0
c Var 'aux1680' direct represents '3' with '7080'
7077 -7079 7080 0
-7080 7079 0
-7080 -7077 0
c Var 'aux1680' direct represents '4' with '-7079'
7074 7076 7078 7080 -7079 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '7081'
c Var 'aux1681' direct represents '0' with '7081'
c Var 'aux1681' order represents '1' with '7082'
-7081 7082 0
c Var 'aux1681' direct represents '1' with '7083'
7081 -7082 7083 0
-7083 7082 0
-7083 -7081 0
c Var 'aux1681' direct represents '2' with '-7082'
7081 7083 -7082 0
c Encoding variable: aux1682 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '7084'
c Var 'aux1682' direct represents '0' with '7084'
c Var 'aux1682' order represents '1' with '7085'
-7084 7085 0
c Var 'aux1682' direct represents '1' with '7086'
7084 -7085 7086 0
-7086 7085 0
-7086 -7084 0
c Var 'aux1682' direct represents '2' with '-7085'
7084 7086 -7085 0
c Encoding variable: aux1683 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '7087'
c Var 'aux1683' direct represents '0' with '7087'
c Var 'aux1683' order represents '1' with '7088'
-7087 7088 0
c Var 'aux1683' direct represents '1' with '7089'
7087 -7088 7089 0
-7089 7088 0
-7089 -7087 0
c Var 'aux1683' direct represents '2' with '-7088'
7087 7089 -7088 0
c Encoding variable: aux1684 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '7090'
c Var 'aux1684' direct represents '0' with '7090'
c Var 'aux1684' order represents '1' with '7091'
-7090 7091 0
c Var 'aux1684' direct represents '1' with '7092'
7090 -7091 7092 0
-7092 7091 0
-7092 -7090 0
c Var 'aux1684' direct represents '2' with '-7091'
7090 7092 -7091 0
c Encoding variable: aux1685 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1684))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '7093'
c Var 'aux1685' direct represents '0' with '7093'
c Var 'aux1685' order represents '1' with '7094'
-7093 7094 0
c Var 'aux1685' direct represents '1' with '7095'
7093 -7094 7095 0
-7095 7094 0
-7095 -7093 0
c Var 'aux1685' order represents '2' with '7096'
-7094 7096 0
c Var 'aux1685' direct represents '2' with '7097'
7094 -7096 7097 0
-7097 7096 0
-7097 -7094 0
c Var 'aux1685' direct represents '3' with '-7096'
7093 7095 7097 -7096 0
c Encoding variable: aux1686 with domain: int(0..4) (representing constraint (aux1681 + aux1683))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '7098'
c Var 'aux1686' direct represents '0' with '7098'
c Var 'aux1686' order represents '1' with '7099'
-7098 7099 0
c Var 'aux1686' direct represents '1' with '7100'
7098 -7099 7100 0
-7100 7099 0
-7100 -7098 0
c Var 'aux1686' order represents '2' with '7101'
-7099 7101 0
c Var 'aux1686' direct represents '2' with '7102'
7099 -7101 7102 0
-7102 7101 0
-7102 -7099 0
c Var 'aux1686' order represents '3' with '7103'
-7101 7103 0
c Var 'aux1686' direct represents '3' with '7104'
7101 -7103 7104 0
-7104 7103 0
-7104 -7101 0
c Var 'aux1686' direct represents '4' with '-7103'
7098 7100 7102 7104 -7103 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '7105'
c Var 'aux1687' direct represents '0' with '7105'
c Var 'aux1687' order represents '1' with '7106'
-7105 7106 0
c Var 'aux1687' direct represents '1' with '7107'
7105 -7106 7107 0
-7107 7106 0
-7107 -7105 0
c Var 'aux1687' direct represents '2' with '-7106'
7105 7107 -7106 0
c Encoding variable: aux1688 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '7108'
c Var 'aux1688' direct represents '0' with '7108'
c Var 'aux1688' order represents '1' with '7109'
-7108 7109 0
c Var 'aux1688' direct represents '1' with '7110'
7108 -7109 7110 0
-7110 7109 0
-7110 -7108 0
c Var 'aux1688' direct represents '2' with '-7109'
7108 7110 -7109 0
c Encoding variable: aux1689 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '7111'
c Var 'aux1689' direct represents '0' with '7111'
c Var 'aux1689' order represents '1' with '7112'
-7111 7112 0
c Var 'aux1689' direct represents '1' with '7113'
7111 -7112 7113 0
-7113 7112 0
-7113 -7111 0
c Var 'aux1689' direct represents '2' with '-7112'
7111 7113 -7112 0
c Encoding variable: aux1690 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '7114'
c Var 'aux1690' direct represents '0' with '7114'
c Var 'aux1690' order represents '1' with '7115'
-7114 7115 0
c Var 'aux1690' direct represents '1' with '7116'
7114 -7115 7116 0
-7116 7115 0
-7116 -7114 0
c Var 'aux1690' direct represents '2' with '-7115'
7114 7116 -7115 0
c Encoding variable: aux1691 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1690))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '7117'
c Var 'aux1691' direct represents '0' with '7117'
c Var 'aux1691' order represents '1' with '7118'
-7117 7118 0
c Var 'aux1691' direct represents '1' with '7119'
7117 -7118 7119 0
-7119 7118 0
-7119 -7117 0
c Var 'aux1691' order represents '2' with '7120'
-7118 7120 0
c Var 'aux1691' direct represents '2' with '7121'
7118 -7120 7121 0
-7121 7120 0
-7121 -7118 0
c Var 'aux1691' direct represents '3' with '-7120'
7117 7119 7121 -7120 0
c Encoding variable: aux1692 with domain: int(0..4) (representing constraint (aux1687 + aux1689))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '7122'
c Var 'aux1692' direct represents '0' with '7122'
c Var 'aux1692' order represents '1' with '7123'
-7122 7123 0
c Var 'aux1692' direct represents '1' with '7124'
7122 -7123 7124 0
-7124 7123 0
-7124 -7122 0
c Var 'aux1692' order represents '2' with '7125'
-7123 7125 0
c Var 'aux1692' direct represents '2' with '7126'
7123 -7125 7126 0
-7126 7125 0
-7126 -7123 0
c Var 'aux1692' order represents '3' with '7127'
-7125 7127 0
c Var 'aux1692' direct represents '3' with '7128'
7125 -7127 7128 0
-7128 7127 0
-7128 -7125 0
c Var 'aux1692' direct represents '4' with '-7127'
7122 7124 7126 7128 -7127 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '7129'
c Var 'aux1693' direct represents '0' with '7129'
c Var 'aux1693' order represents '1' with '7130'
-7129 7130 0
c Var 'aux1693' direct represents '1' with '7131'
7129 -7130 7131 0
-7131 7130 0
-7131 -7129 0
c Var 'aux1693' direct represents '2' with '-7130'
7129 7131 -7130 0
c Encoding variable: aux1694 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '7132'
c Var 'aux1694' direct represents '0' with '7132'
c Var 'aux1694' order represents '1' with '7133'
-7132 7133 0
c Var 'aux1694' direct represents '1' with '7134'
7132 -7133 7134 0
-7134 7133 0
-7134 -7132 0
c Var 'aux1694' direct represents '2' with '-7133'
7132 7134 -7133 0
c Encoding variable: aux1695 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '7135'
c Var 'aux1695' direct represents '0' with '7135'
c Var 'aux1695' order represents '1' with '7136'
-7135 7136 0
c Var 'aux1695' direct represents '1' with '7137'
7135 -7136 7137 0
-7137 7136 0
-7137 -7135 0
c Var 'aux1695' direct represents '2' with '-7136'
7135 7137 -7136 0
c Encoding variable: aux1696 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '7138'
c Var 'aux1696' direct represents '0' with '7138'
c Var 'aux1696' order represents '1' with '7139'
-7138 7139 0
c Var 'aux1696' direct represents '1' with '7140'
7138 -7139 7140 0
-7140 7139 0
-7140 -7138 0
c Var 'aux1696' direct represents '2' with '-7139'
7138 7140 -7139 0
c Encoding variable: aux1697 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1696))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '7141'
c Var 'aux1697' direct represents '0' with '7141'
c Var 'aux1697' order represents '1' with '7142'
-7141 7142 0
c Var 'aux1697' direct represents '1' with '7143'
7141 -7142 7143 0
-7143 7142 0
-7143 -7141 0
c Var 'aux1697' order represents '2' with '7144'
-7142 7144 0
c Var 'aux1697' direct represents '2' with '7145'
7142 -7144 7145 0
-7145 7144 0
-7145 -7142 0
c Var 'aux1697' direct represents '3' with '-7144'
7141 7143 7145 -7144 0
c Encoding variable: aux1698 with domain: int(0..4) (representing constraint (aux1693 + aux1695))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '7146'
c Var 'aux1698' direct represents '0' with '7146'
c Var 'aux1698' order represents '1' with '7147'
-7146 7147 0
c Var 'aux1698' direct represents '1' with '7148'
7146 -7147 7148 0
-7148 7147 0
-7148 -7146 0
c Var 'aux1698' order represents '2' with '7149'
-7147 7149 0
c Var 'aux1698' direct represents '2' with '7150'
7147 -7149 7150 0
-7150 7149 0
-7150 -7147 0
c Var 'aux1698' order represents '3' with '7151'
-7149 7151 0
c Var 'aux1698' direct represents '3' with '7152'
7149 -7151 7152 0
-7152 7151 0
-7152 -7149 0
c Var 'aux1698' direct represents '4' with '-7151'
7146 7148 7150 7152 -7151 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '7153'
c Var 'aux1699' direct represents '0' with '7153'
c Var 'aux1699' order represents '1' with '7154'
-7153 7154 0
c Var 'aux1699' direct represents '1' with '7155'
7153 -7154 7155 0
-7155 7154 0
-7155 -7153 0
c Var 'aux1699' direct represents '2' with '-7154'
7153 7155 -7154 0
c Encoding variable: aux1700 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '7156'
c Var 'aux1700' direct represents '0' with '7156'
c Var 'aux1700' order represents '1' with '7157'
-7156 7157 0
c Var 'aux1700' direct represents '1' with '7158'
7156 -7157 7158 0
-7158 7157 0
-7158 -7156 0
c Var 'aux1700' direct represents '2' with '-7157'
7156 7158 -7157 0
c Encoding variable: aux1701 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '7159'
c Var 'aux1701' direct represents '0' with '7159'
c Var 'aux1701' order represents '1' with '7160'
-7159 7160 0
c Var 'aux1701' direct represents '1' with '7161'
7159 -7160 7161 0
-7161 7160 0
-7161 -7159 0
c Var 'aux1701' direct represents '2' with '-7160'
7159 7161 -7160 0
c Encoding variable: aux1702 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '7162'
c Var 'aux1702' direct represents '0' with '7162'
c Var 'aux1702' order represents '1' with '7163'
-7162 7163 0
c Var 'aux1702' direct represents '1' with '7164'
7162 -7163 7164 0
-7164 7163 0
-7164 -7162 0
c Var 'aux1702' direct represents '2' with '-7163'
7162 7164 -7163 0
c Encoding variable: aux1703 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1702))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '7165'
c Var 'aux1703' direct represents '0' with '7165'
c Var 'aux1703' order represents '1' with '7166'
-7165 7166 0
c Var 'aux1703' direct represents '1' with '7167'
7165 -7166 7167 0
-7167 7166 0
-7167 -7165 0
c Var 'aux1703' order represents '2' with '7168'
-7166 7168 0
c Var 'aux1703' direct represents '2' with '7169'
7166 -7168 7169 0
-7169 7168 0
-7169 -7166 0
c Var 'aux1703' direct represents '3' with '-7168'
7165 7167 7169 -7168 0
c Encoding variable: aux1704 with domain: int(0..4) (representing constraint (aux1699 + aux1701))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '7170'
c Var 'aux1704' direct represents '0' with '7170'
c Var 'aux1704' order represents '1' with '7171'
-7170 7171 0
c Var 'aux1704' direct represents '1' with '7172'
7170 -7171 7172 0
-7172 7171 0
-7172 -7170 0
c Var 'aux1704' order represents '2' with '7173'
-7171 7173 0
c Var 'aux1704' direct represents '2' with '7174'
7171 -7173 7174 0
-7174 7173 0
-7174 -7171 0
c Var 'aux1704' order represents '3' with '7175'
-7173 7175 0
c Var 'aux1704' direct represents '3' with '7176'
7173 -7175 7176 0
-7176 7175 0
-7176 -7173 0
c Var 'aux1704' direct represents '4' with '-7175'
7170 7172 7174 7176 -7175 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '7177'
c Var 'aux1705' direct represents '0' with '7177'
c Var 'aux1705' order represents '1' with '7178'
-7177 7178 0
c Var 'aux1705' direct represents '1' with '7179'
7177 -7178 7179 0
-7179 7178 0
-7179 -7177 0
c Var 'aux1705' direct represents '2' with '-7178'
7177 7179 -7178 0
c Encoding variable: aux1706 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '7180'
c Var 'aux1706' direct represents '0' with '7180'
c Var 'aux1706' order represents '1' with '7181'
-7180 7181 0
c Var 'aux1706' direct represents '1' with '7182'
7180 -7181 7182 0
-7182 7181 0
-7182 -7180 0
c Var 'aux1706' direct represents '2' with '-7181'
7180 7182 -7181 0
c Encoding variable: aux1707 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '7183'
c Var 'aux1707' direct represents '0' with '7183'
c Var 'aux1707' order represents '1' with '7184'
-7183 7184 0
c Var 'aux1707' direct represents '1' with '7185'
7183 -7184 7185 0
-7185 7184 0
-7185 -7183 0
c Var 'aux1707' direct represents '2' with '-7184'
7183 7185 -7184 0
c Encoding variable: aux1708 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '7186'
c Var 'aux1708' direct represents '0' with '7186'
c Var 'aux1708' order represents '1' with '7187'
-7186 7187 0
c Var 'aux1708' direct represents '1' with '7188'
7186 -7187 7188 0
-7188 7187 0
-7188 -7186 0
c Var 'aux1708' direct represents '2' with '-7187'
7186 7188 -7187 0
c Encoding variable: aux1709 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1708))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '7189'
c Var 'aux1709' direct represents '0' with '7189'
c Var 'aux1709' order represents '1' with '7190'
-7189 7190 0
c Var 'aux1709' direct represents '1' with '7191'
7189 -7190 7191 0
-7191 7190 0
-7191 -7189 0
c Var 'aux1709' order represents '2' with '7192'
-7190 7192 0
c Var 'aux1709' direct represents '2' with '7193'
7190 -7192 7193 0
-7193 7192 0
-7193 -7190 0
c Var 'aux1709' direct represents '3' with '-7192'
7189 7191 7193 -7192 0
c Encoding variable: aux1710 with domain: int(0..4) (representing constraint (aux1705 + aux1707))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '7194'
c Var 'aux1710' direct represents '0' with '7194'
c Var 'aux1710' order represents '1' with '7195'
-7194 7195 0
c Var 'aux1710' direct represents '1' with '7196'
7194 -7195 7196 0
-7196 7195 0
-7196 -7194 0
c Var 'aux1710' order represents '2' with '7197'
-7195 7197 0
c Var 'aux1710' direct represents '2' with '7198'
7195 -7197 7198 0
-7198 7197 0
-7198 -7195 0
c Var 'aux1710' order represents '3' with '7199'
-7197 7199 0
c Var 'aux1710' direct represents '3' with '7200'
7197 -7199 7200 0
-7200 7199 0
-7200 -7197 0
c Var 'aux1710' direct represents '4' with '-7199'
7194 7196 7198 7200 -7199 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '7201'
c Var 'aux1711' direct represents '0' with '7201'
c Var 'aux1711' order represents '1' with '7202'
-7201 7202 0
c Var 'aux1711' direct represents '1' with '7203'
7201 -7202 7203 0
-7203 7202 0
-7203 -7201 0
c Var 'aux1711' direct represents '2' with '-7202'
7201 7203 -7202 0
c Encoding variable: aux1712 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '7204'
c Var 'aux1712' direct represents '0' with '7204'
c Var 'aux1712' order represents '1' with '7205'
-7204 7205 0
c Var 'aux1712' direct represents '1' with '7206'
7204 -7205 7206 0
-7206 7205 0
-7206 -7204 0
c Var 'aux1712' direct represents '2' with '-7205'
7204 7206 -7205 0
c Encoding variable: aux1713 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '7207'
c Var 'aux1713' direct represents '0' with '7207'
c Var 'aux1713' order represents '1' with '7208'
-7207 7208 0
c Var 'aux1713' direct represents '1' with '7209'
7207 -7208 7209 0
-7209 7208 0
-7209 -7207 0
c Var 'aux1713' direct represents '2' with '-7208'
7207 7209 -7208 0
c Encoding variable: aux1714 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '7210'
c Var 'aux1714' direct represents '0' with '7210'
c Var 'aux1714' order represents '1' with '7211'
-7210 7211 0
c Var 'aux1714' direct represents '1' with '7212'
7210 -7211 7212 0
-7212 7211 0
-7212 -7210 0
c Var 'aux1714' direct represents '2' with '-7211'
7210 7212 -7211 0
c Encoding variable: aux1715 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1714))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '7213'
c Var 'aux1715' direct represents '0' with '7213'
c Var 'aux1715' order represents '1' with '7214'
-7213 7214 0
c Var 'aux1715' direct represents '1' with '7215'
7213 -7214 7215 0
-7215 7214 0
-7215 -7213 0
c Var 'aux1715' order represents '2' with '7216'
-7214 7216 0
c Var 'aux1715' direct represents '2' with '7217'
7214 -7216 7217 0
-7217 7216 0
-7217 -7214 0
c Var 'aux1715' direct represents '3' with '-7216'
7213 7215 7217 -7216 0
c Encoding variable: aux1716 with domain: int(0..4) (representing constraint (aux1711 + aux1713))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '7218'
c Var 'aux1716' direct represents '0' with '7218'
c Var 'aux1716' order represents '1' with '7219'
-7218 7219 0
c Var 'aux1716' direct represents '1' with '7220'
7218 -7219 7220 0
-7220 7219 0
-7220 -7218 0
c Var 'aux1716' order represents '2' with '7221'
-7219 7221 0
c Var 'aux1716' direct represents '2' with '7222'
7219 -7221 7222 0
-7222 7221 0
-7222 -7219 0
c Var 'aux1716' order represents '3' with '7223'
-7221 7223 0
c Var 'aux1716' direct represents '3' with '7224'
7221 -7223 7224 0
-7224 7223 0
-7224 -7221 0
c Var 'aux1716' direct represents '4' with '-7223'
7218 7220 7222 7224 -7223 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '7225'
c Var 'aux1717' direct represents '0' with '7225'
c Var 'aux1717' order represents '1' with '7226'
-7225 7226 0
c Var 'aux1717' direct represents '1' with '7227'
7225 -7226 7227 0
-7227 7226 0
-7227 -7225 0
c Var 'aux1717' direct represents '2' with '-7226'
7225 7227 -7226 0
c Encoding variable: aux1718 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '7228'
c Var 'aux1718' direct represents '0' with '7228'
c Var 'aux1718' order represents '1' with '7229'
-7228 7229 0
c Var 'aux1718' direct represents '1' with '7230'
7228 -7229 7230 0
-7230 7229 0
-7230 -7228 0
c Var 'aux1718' direct represents '2' with '-7229'
7228 7230 -7229 0
c Encoding variable: aux1719 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '7231'
c Var 'aux1719' direct represents '0' with '7231'
c Var 'aux1719' order represents '1' with '7232'
-7231 7232 0
c Var 'aux1719' direct represents '1' with '7233'
7231 -7232 7233 0
-7233 7232 0
-7233 -7231 0
c Var 'aux1719' direct represents '2' with '-7232'
7231 7233 -7232 0
c Encoding variable: aux1720 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '7234'
c Var 'aux1720' direct represents '0' with '7234'
c Var 'aux1720' order represents '1' with '7235'
-7234 7235 0
c Var 'aux1720' direct represents '1' with '7236'
7234 -7235 7236 0
-7236 7235 0
-7236 -7234 0
c Var 'aux1720' direct represents '2' with '-7235'
7234 7236 -7235 0
c Encoding variable: aux1721 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1720))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '7237'
c Var 'aux1721' direct represents '0' with '7237'
c Var 'aux1721' order represents '1' with '7238'
-7237 7238 0
c Var 'aux1721' direct represents '1' with '7239'
7237 -7238 7239 0
-7239 7238 0
-7239 -7237 0
c Var 'aux1721' order represents '2' with '7240'
-7238 7240 0
c Var 'aux1721' direct represents '2' with '7241'
7238 -7240 7241 0
-7241 7240 0
-7241 -7238 0
c Var 'aux1721' direct represents '3' with '-7240'
7237 7239 7241 -7240 0
c Encoding variable: aux1722 with domain: int(0..4) (representing constraint (aux1717 + aux1719))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '7242'
c Var 'aux1722' direct represents '0' with '7242'
c Var 'aux1722' order represents '1' with '7243'
-7242 7243 0
c Var 'aux1722' direct represents '1' with '7244'
7242 -7243 7244 0
-7244 7243 0
-7244 -7242 0
c Var 'aux1722' order represents '2' with '7245'
-7243 7245 0
c Var 'aux1722' direct represents '2' with '7246'
7243 -7245 7246 0
-7246 7245 0
-7246 -7243 0
c Var 'aux1722' order represents '3' with '7247'
-7245 7247 0
c Var 'aux1722' direct represents '3' with '7248'
7245 -7247 7248 0
-7248 7247 0
-7248 -7245 0
c Var 'aux1722' direct represents '4' with '-7247'
7242 7244 7246 7248 -7247 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '7249'
c Var 'aux1723' direct represents '0' with '7249'
c Var 'aux1723' order represents '1' with '7250'
-7249 7250 0
c Var 'aux1723' direct represents '1' with '7251'
7249 -7250 7251 0
-7251 7250 0
-7251 -7249 0
c Var 'aux1723' direct represents '2' with '-7250'
7249 7251 -7250 0
c Encoding variable: aux1724 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '7252'
c Var 'aux1724' direct represents '0' with '7252'
c Var 'aux1724' order represents '1' with '7253'
-7252 7253 0
c Var 'aux1724' direct represents '1' with '7254'
7252 -7253 7254 0
-7254 7253 0
-7254 -7252 0
c Var 'aux1724' direct represents '2' with '-7253'
7252 7254 -7253 0
c Encoding variable: aux1725 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '7255'
c Var 'aux1725' direct represents '0' with '7255'
c Var 'aux1725' order represents '1' with '7256'
-7255 7256 0
c Var 'aux1725' direct represents '1' with '7257'
7255 -7256 7257 0
-7257 7256 0
-7257 -7255 0
c Var 'aux1725' direct represents '2' with '-7256'
7255 7257 -7256 0
c Encoding variable: aux1726 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '7258'
c Var 'aux1726' direct represents '0' with '7258'
c Var 'aux1726' order represents '1' with '7259'
-7258 7259 0
c Var 'aux1726' direct represents '1' with '7260'
7258 -7259 7260 0
-7260 7259 0
-7260 -7258 0
c Var 'aux1726' direct represents '2' with '-7259'
7258 7260 -7259 0
c Encoding variable: aux1727 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1726))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '7261'
c Var 'aux1727' direct represents '0' with '7261'
c Var 'aux1727' order represents '1' with '7262'
-7261 7262 0
c Var 'aux1727' direct represents '1' with '7263'
7261 -7262 7263 0
-7263 7262 0
-7263 -7261 0
c Var 'aux1727' order represents '2' with '7264'
-7262 7264 0
c Var 'aux1727' direct represents '2' with '7265'
7262 -7264 7265 0
-7265 7264 0
-7265 -7262 0
c Var 'aux1727' direct represents '3' with '-7264'
7261 7263 7265 -7264 0
c Encoding variable: aux1728 with domain: int(0..4) (representing constraint (aux1723 + aux1725))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '7266'
c Var 'aux1728' direct represents '0' with '7266'
c Var 'aux1728' order represents '1' with '7267'
-7266 7267 0
c Var 'aux1728' direct represents '1' with '7268'
7266 -7267 7268 0
-7268 7267 0
-7268 -7266 0
c Var 'aux1728' order represents '2' with '7269'
-7267 7269 0
c Var 'aux1728' direct represents '2' with '7270'
7267 -7269 7270 0
-7270 7269 0
-7270 -7267 0
c Var 'aux1728' order represents '3' with '7271'
-7269 7271 0
c Var 'aux1728' direct represents '3' with '7272'
7269 -7271 7272 0
-7272 7271 0
-7272 -7269 0
c Var 'aux1728' direct represents '4' with '-7271'
7266 7268 7270 7272 -7271 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '7273'
c Var 'aux1729' direct represents '0' with '7273'
c Var 'aux1729' order represents '1' with '7274'
-7273 7274 0
c Var 'aux1729' direct represents '1' with '7275'
7273 -7274 7275 0
-7275 7274 0
-7275 -7273 0
c Var 'aux1729' direct represents '2' with '-7274'
7273 7275 -7274 0
c Encoding variable: aux1730 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '7276'
c Var 'aux1730' direct represents '0' with '7276'
c Var 'aux1730' order represents '1' with '7277'
-7276 7277 0
c Var 'aux1730' direct represents '1' with '7278'
7276 -7277 7278 0
-7278 7277 0
-7278 -7276 0
c Var 'aux1730' direct represents '2' with '-7277'
7276 7278 -7277 0
c Encoding variable: aux1731 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '7279'
c Var 'aux1731' direct represents '0' with '7279'
c Var 'aux1731' order represents '1' with '7280'
-7279 7280 0
c Var 'aux1731' direct represents '1' with '7281'
7279 -7280 7281 0
-7281 7280 0
-7281 -7279 0
c Var 'aux1731' direct represents '2' with '-7280'
7279 7281 -7280 0
c Encoding variable: aux1732 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '7282'
c Var 'aux1732' direct represents '0' with '7282'
c Var 'aux1732' order represents '1' with '7283'
-7282 7283 0
c Var 'aux1732' direct represents '1' with '7284'
7282 -7283 7284 0
-7284 7283 0
-7284 -7282 0
c Var 'aux1732' direct represents '2' with '-7283'
7282 7284 -7283 0
c Encoding variable: aux1733 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1732))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '7285'
c Var 'aux1733' direct represents '0' with '7285'
c Var 'aux1733' order represents '1' with '7286'
-7285 7286 0
c Var 'aux1733' direct represents '1' with '7287'
7285 -7286 7287 0
-7287 7286 0
-7287 -7285 0
c Var 'aux1733' order represents '2' with '7288'
-7286 7288 0
c Var 'aux1733' direct represents '2' with '7289'
7286 -7288 7289 0
-7289 7288 0
-7289 -7286 0
c Var 'aux1733' direct represents '3' with '-7288'
7285 7287 7289 -7288 0
c Encoding variable: aux1734 with domain: int(0..4) (representing constraint (aux1729 + aux1731))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '7290'
c Var 'aux1734' direct represents '0' with '7290'
c Var 'aux1734' order represents '1' with '7291'
-7290 7291 0
c Var 'aux1734' direct represents '1' with '7292'
7290 -7291 7292 0
-7292 7291 0
-7292 -7290 0
c Var 'aux1734' order represents '2' with '7293'
-7291 7293 0
c Var 'aux1734' direct represents '2' with '7294'
7291 -7293 7294 0
-7294 7293 0
-7294 -7291 0
c Var 'aux1734' order represents '3' with '7295'
-7293 7295 0
c Var 'aux1734' direct represents '3' with '7296'
7293 -7295 7296 0
-7296 7295 0
-7296 -7293 0
c Var 'aux1734' direct represents '4' with '-7295'
7290 7292 7294 7296 -7295 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '7297'
c Var 'aux1735' direct represents '0' with '7297'
c Var 'aux1735' order represents '1' with '7298'
-7297 7298 0
c Var 'aux1735' direct represents '1' with '7299'
7297 -7298 7299 0
-7299 7298 0
-7299 -7297 0
c Var 'aux1735' direct represents '2' with '-7298'
7297 7299 -7298 0
c Encoding variable: aux1736 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '7300'
c Var 'aux1736' direct represents '0' with '7300'
c Var 'aux1736' order represents '1' with '7301'
-7300 7301 0
c Var 'aux1736' direct represents '1' with '7302'
7300 -7301 7302 0
-7302 7301 0
-7302 -7300 0
c Var 'aux1736' direct represents '2' with '-7301'
7300 7302 -7301 0
c Encoding variable: aux1737 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '7303'
c Var 'aux1737' direct represents '0' with '7303'
c Var 'aux1737' order represents '1' with '7304'
-7303 7304 0
c Var 'aux1737' direct represents '1' with '7305'
7303 -7304 7305 0
-7305 7304 0
-7305 -7303 0
c Var 'aux1737' direct represents '2' with '-7304'
7303 7305 -7304 0
c Encoding variable: aux1738 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7306'
c Var 'aux1738' direct represents '0' with '7306'
c Var 'aux1738' order represents '1' with '7307'
-7306 7307 0
c Var 'aux1738' direct represents '1' with '7308'
7306 -7307 7308 0
-7308 7307 0
-7308 -7306 0
c Var 'aux1738' direct represents '2' with '-7307'
7306 7308 -7307 0
c Encoding variable: aux1739 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1738))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7309'
c Var 'aux1739' direct represents '0' with '7309'
c Var 'aux1739' order represents '1' with '7310'
-7309 7310 0
c Var 'aux1739' direct represents '1' with '7311'
7309 -7310 7311 0
-7311 7310 0
-7311 -7309 0
c Var 'aux1739' order represents '2' with '7312'
-7310 7312 0
c Var 'aux1739' direct represents '2' with '7313'
7310 -7312 7313 0
-7313 7312 0
-7313 -7310 0
c Var 'aux1739' direct represents '3' with '-7312'
7309 7311 7313 -7312 0
c Encoding variable: aux1740 with domain: int(0..4) (representing constraint (aux1735 + aux1737))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7314'
c Var 'aux1740' direct represents '0' with '7314'
c Var 'aux1740' order represents '1' with '7315'
-7314 7315 0
c Var 'aux1740' direct represents '1' with '7316'
7314 -7315 7316 0
-7316 7315 0
-7316 -7314 0
c Var 'aux1740' order represents '2' with '7317'
-7315 7317 0
c Var 'aux1740' direct represents '2' with '7318'
7315 -7317 7318 0
-7318 7317 0
-7318 -7315 0
c Var 'aux1740' order represents '3' with '7319'
-7317 7319 0
c Var 'aux1740' direct represents '3' with '7320'
7317 -7319 7320 0
-7320 7319 0
-7320 -7317 0
c Var 'aux1740' direct represents '4' with '-7319'
7314 7316 7318 7320 -7319 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7321'
c Var 'aux1741' direct represents '0' with '7321'
c Var 'aux1741' order represents '1' with '7322'
-7321 7322 0
c Var 'aux1741' direct represents '1' with '7323'
7321 -7322 7323 0
-7323 7322 0
-7323 -7321 0
c Var 'aux1741' direct represents '2' with '-7322'
7321 7323 -7322 0
c Encoding variable: aux1742 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7324'
c Var 'aux1742' direct represents '0' with '7324'
c Var 'aux1742' order represents '1' with '7325'
-7324 7325 0
c Var 'aux1742' direct represents '1' with '7326'
7324 -7325 7326 0
-7326 7325 0
-7326 -7324 0
c Var 'aux1742' direct represents '2' with '-7325'
7324 7326 -7325 0
c Encoding variable: aux1743 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7327'
c Var 'aux1743' direct represents '0' with '7327'
c Var 'aux1743' order represents '1' with '7328'
-7327 7328 0
c Var 'aux1743' direct represents '1' with '7329'
7327 -7328 7329 0
-7329 7328 0
-7329 -7327 0
c Var 'aux1743' direct represents '2' with '-7328'
7327 7329 -7328 0
c Encoding variable: aux1744 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7330'
c Var 'aux1744' direct represents '0' with '7330'
c Var 'aux1744' order represents '1' with '7331'
-7330 7331 0
c Var 'aux1744' direct represents '1' with '7332'
7330 -7331 7332 0
-7332 7331 0
-7332 -7330 0
c Var 'aux1744' direct represents '2' with '-7331'
7330 7332 -7331 0
c Encoding variable: aux1745 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1744))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7333'
c Var 'aux1745' direct represents '0' with '7333'
c Var 'aux1745' order represents '1' with '7334'
-7333 7334 0
c Var 'aux1745' direct represents '1' with '7335'
7333 -7334 7335 0
-7335 7334 0
-7335 -7333 0
c Var 'aux1745' order represents '2' with '7336'
-7334 7336 0
c Var 'aux1745' direct represents '2' with '7337'
7334 -7336 7337 0
-7337 7336 0
-7337 -7334 0
c Var 'aux1745' direct represents '3' with '-7336'
7333 7335 7337 -7336 0
c Encoding variable: aux1746 with domain: int(0..4) (representing constraint (aux1741 + aux1743))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7338'
c Var 'aux1746' direct represents '0' with '7338'
c Var 'aux1746' order represents '1' with '7339'
-7338 7339 0
c Var 'aux1746' direct represents '1' with '7340'
7338 -7339 7340 0
-7340 7339 0
-7340 -7338 0
c Var 'aux1746' order represents '2' with '7341'
-7339 7341 0
c Var 'aux1746' direct represents '2' with '7342'
7339 -7341 7342 0
-7342 7341 0
-7342 -7339 0
c Var 'aux1746' order represents '3' with '7343'
-7341 7343 0
c Var 'aux1746' direct represents '3' with '7344'
7341 -7343 7344 0
-7344 7343 0
-7344 -7341 0
c Var 'aux1746' direct represents '4' with '-7343'
7338 7340 7342 7344 -7343 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7345'
c Var 'aux1747' direct represents '0' with '7345'
c Var 'aux1747' order represents '1' with '7346'
-7345 7346 0
c Var 'aux1747' direct represents '1' with '7347'
7345 -7346 7347 0
-7347 7346 0
-7347 -7345 0
c Var 'aux1747' direct represents '2' with '-7346'
7345 7347 -7346 0
c Encoding variable: aux1748 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7348'
c Var 'aux1748' direct represents '0' with '7348'
c Var 'aux1748' order represents '1' with '7349'
-7348 7349 0
c Var 'aux1748' direct represents '1' with '7350'
7348 -7349 7350 0
-7350 7349 0
-7350 -7348 0
c Var 'aux1748' direct represents '2' with '-7349'
7348 7350 -7349 0
c Encoding variable: aux1749 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7351'
c Var 'aux1749' direct represents '0' with '7351'
c Var 'aux1749' order represents '1' with '7352'
-7351 7352 0
c Var 'aux1749' direct represents '1' with '7353'
7351 -7352 7353 0
-7353 7352 0
-7353 -7351 0
c Var 'aux1749' direct represents '2' with '-7352'
7351 7353 -7352 0
c Encoding variable: aux1750 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7354'
c Var 'aux1750' direct represents '0' with '7354'
c Var 'aux1750' order represents '1' with '7355'
-7354 7355 0
c Var 'aux1750' direct represents '1' with '7356'
7354 -7355 7356 0
-7356 7355 0
-7356 -7354 0
c Var 'aux1750' direct represents '2' with '-7355'
7354 7356 -7355 0
c Encoding variable: aux1751 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1750))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7357'
c Var 'aux1751' direct represents '0' with '7357'
c Var 'aux1751' order represents '1' with '7358'
-7357 7358 0
c Var 'aux1751' direct represents '1' with '7359'
7357 -7358 7359 0
-7359 7358 0
-7359 -7357 0
c Var 'aux1751' order represents '2' with '7360'
-7358 7360 0
c Var 'aux1751' direct represents '2' with '7361'
7358 -7360 7361 0
-7361 7360 0
-7361 -7358 0
c Var 'aux1751' direct represents '3' with '-7360'
7357 7359 7361 -7360 0
c Encoding variable: aux1752 with domain: int(0..4) (representing constraint (aux1747 + aux1749))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7362'
c Var 'aux1752' direct represents '0' with '7362'
c Var 'aux1752' order represents '1' with '7363'
-7362 7363 0
c Var 'aux1752' direct represents '1' with '7364'
7362 -7363 7364 0
-7364 7363 0
-7364 -7362 0
c Var 'aux1752' order represents '2' with '7365'
-7363 7365 0
c Var 'aux1752' direct represents '2' with '7366'
7363 -7365 7366 0
-7366 7365 0
-7366 -7363 0
c Var 'aux1752' order represents '3' with '7367'
-7365 7367 0
c Var 'aux1752' direct represents '3' with '7368'
7365 -7367 7368 0
-7368 7367 0
-7368 -7365 0
c Var 'aux1752' direct represents '4' with '-7367'
7362 7364 7366 7368 -7367 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7369'
c Var 'aux1753' direct represents '0' with '7369'
c Var 'aux1753' order represents '1' with '7370'
-7369 7370 0
c Var 'aux1753' direct represents '1' with '7371'
7369 -7370 7371 0
-7371 7370 0
-7371 -7369 0
c Var 'aux1753' direct represents '2' with '-7370'
7369 7371 -7370 0
c Encoding variable: aux1754 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7372'
c Var 'aux1754' direct represents '0' with '7372'
c Var 'aux1754' order represents '1' with '7373'
-7372 7373 0
c Var 'aux1754' direct represents '1' with '7374'
7372 -7373 7374 0
-7374 7373 0
-7374 -7372 0
c Var 'aux1754' direct represents '2' with '-7373'
7372 7374 -7373 0
c Encoding variable: aux1755 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7375'
c Var 'aux1755' direct represents '0' with '7375'
c Var 'aux1755' order represents '1' with '7376'
-7375 7376 0
c Var 'aux1755' direct represents '1' with '7377'
7375 -7376 7377 0
-7377 7376 0
-7377 -7375 0
c Var 'aux1755' direct represents '2' with '-7376'
7375 7377 -7376 0
c Encoding variable: aux1756 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7378'
c Var 'aux1756' direct represents '0' with '7378'
c Var 'aux1756' order represents '1' with '7379'
-7378 7379 0
c Var 'aux1756' direct represents '1' with '7380'
7378 -7379 7380 0
-7380 7379 0
-7380 -7378 0
c Var 'aux1756' direct represents '2' with '-7379'
7378 7380 -7379 0
c Encoding variable: aux1757 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1756))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7381'
c Var 'aux1757' direct represents '0' with '7381'
c Var 'aux1757' order represents '1' with '7382'
-7381 7382 0
c Var 'aux1757' direct represents '1' with '7383'
7381 -7382 7383 0
-7383 7382 0
-7383 -7381 0
c Var 'aux1757' order represents '2' with '7384'
-7382 7384 0
c Var 'aux1757' direct represents '2' with '7385'
7382 -7384 7385 0
-7385 7384 0
-7385 -7382 0
c Var 'aux1757' direct represents '3' with '-7384'
7381 7383 7385 -7384 0
c Encoding variable: aux1758 with domain: int(0..4) (representing constraint (aux1753 + aux1755))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7386'
c Var 'aux1758' direct represents '0' with '7386'
c Var 'aux1758' order represents '1' with '7387'
-7386 7387 0
c Var 'aux1758' direct represents '1' with '7388'
7386 -7387 7388 0
-7388 7387 0
-7388 -7386 0
c Var 'aux1758' order represents '2' with '7389'
-7387 7389 0
c Var 'aux1758' direct represents '2' with '7390'
7387 -7389 7390 0
-7390 7389 0
-7390 -7387 0
c Var 'aux1758' order represents '3' with '7391'
-7389 7391 0
c Var 'aux1758' direct represents '3' with '7392'
7389 -7391 7392 0
-7392 7391 0
-7392 -7389 0
c Var 'aux1758' direct represents '4' with '-7391'
7386 7388 7390 7392 -7391 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7393'
c Var 'aux1759' direct represents '0' with '7393'
c Var 'aux1759' order represents '1' with '7394'
-7393 7394 0
c Var 'aux1759' direct represents '1' with '7395'
7393 -7394 7395 0
-7395 7394 0
-7395 -7393 0
c Var 'aux1759' direct represents '2' with '-7394'
7393 7395 -7394 0
c Encoding variable: aux1760 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7396'
c Var 'aux1760' direct represents '0' with '7396'
c Var 'aux1760' order represents '1' with '7397'
-7396 7397 0
c Var 'aux1760' direct represents '1' with '7398'
7396 -7397 7398 0
-7398 7397 0
-7398 -7396 0
c Var 'aux1760' direct represents '2' with '-7397'
7396 7398 -7397 0
c Encoding variable: aux1761 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7399'
c Var 'aux1761' direct represents '0' with '7399'
c Var 'aux1761' order represents '1' with '7400'
-7399 7400 0
c Var 'aux1761' direct represents '1' with '7401'
7399 -7400 7401 0
-7401 7400 0
-7401 -7399 0
c Var 'aux1761' direct represents '2' with '-7400'
7399 7401 -7400 0
c Encoding variable: aux1762 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7402'
c Var 'aux1762' direct represents '0' with '7402'
c Var 'aux1762' order represents '1' with '7403'
-7402 7403 0
c Var 'aux1762' direct represents '1' with '7404'
7402 -7403 7404 0
-7404 7403 0
-7404 -7402 0
c Var 'aux1762' direct represents '2' with '-7403'
7402 7404 -7403 0
c Encoding variable: aux1763 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1762))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7405'
c Var 'aux1763' direct represents '0' with '7405'
c Var 'aux1763' order represents '1' with '7406'
-7405 7406 0
c Var 'aux1763' direct represents '1' with '7407'
7405 -7406 7407 0
-7407 7406 0
-7407 -7405 0
c Var 'aux1763' order represents '2' with '7408'
-7406 7408 0
c Var 'aux1763' direct represents '2' with '7409'
7406 -7408 7409 0
-7409 7408 0
-7409 -7406 0
c Var 'aux1763' direct represents '3' with '-7408'
7405 7407 7409 -7408 0
c Encoding variable: aux1764 with domain: int(0..4) (representing constraint (aux1759 + aux1761))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7410'
c Var 'aux1764' direct represents '0' with '7410'
c Var 'aux1764' order represents '1' with '7411'
-7410 7411 0
c Var 'aux1764' direct represents '1' with '7412'
7410 -7411 7412 0
-7412 7411 0
-7412 -7410 0
c Var 'aux1764' order represents '2' with '7413'
-7411 7413 0
c Var 'aux1764' direct represents '2' with '7414'
7411 -7413 7414 0
-7414 7413 0
-7414 -7411 0
c Var 'aux1764' order represents '3' with '7415'
-7413 7415 0
c Var 'aux1764' direct represents '3' with '7416'
7413 -7415 7416 0
-7416 7415 0
-7416 -7413 0
c Var 'aux1764' direct represents '4' with '-7415'
7410 7412 7414 7416 -7415 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7417'
c Var 'aux1765' direct represents '0' with '7417'
c Var 'aux1765' order represents '1' with '7418'
-7417 7418 0
c Var 'aux1765' direct represents '1' with '7419'
7417 -7418 7419 0
-7419 7418 0
-7419 -7417 0
c Var 'aux1765' direct represents '2' with '-7418'
7417 7419 -7418 0
c Encoding variable: aux1766 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7420'
c Var 'aux1766' direct represents '0' with '7420'
c Var 'aux1766' order represents '1' with '7421'
-7420 7421 0
c Var 'aux1766' direct represents '1' with '7422'
7420 -7421 7422 0
-7422 7421 0
-7422 -7420 0
c Var 'aux1766' direct represents '2' with '-7421'
7420 7422 -7421 0
c Encoding variable: aux1767 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7423'
c Var 'aux1767' direct represents '0' with '7423'
c Var 'aux1767' order represents '1' with '7424'
-7423 7424 0
c Var 'aux1767' direct represents '1' with '7425'
7423 -7424 7425 0
-7425 7424 0
-7425 -7423 0
c Var 'aux1767' direct represents '2' with '-7424'
7423 7425 -7424 0
c Encoding variable: aux1768 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7426'
c Var 'aux1768' direct represents '0' with '7426'
c Var 'aux1768' order represents '1' with '7427'
-7426 7427 0
c Var 'aux1768' direct represents '1' with '7428'
7426 -7427 7428 0
-7428 7427 0
-7428 -7426 0
c Var 'aux1768' direct represents '2' with '-7427'
7426 7428 -7427 0
c Encoding variable: aux1769 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1768))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7429'
c Var 'aux1769' direct represents '0' with '7429'
c Var 'aux1769' order represents '1' with '7430'
-7429 7430 0
c Var 'aux1769' direct represents '1' with '7431'
7429 -7430 7431 0
-7431 7430 0
-7431 -7429 0
c Var 'aux1769' order represents '2' with '7432'
-7430 7432 0
c Var 'aux1769' direct represents '2' with '7433'
7430 -7432 7433 0
-7433 7432 0
-7433 -7430 0
c Var 'aux1769' direct represents '3' with '-7432'
7429 7431 7433 -7432 0
c Encoding variable: aux1770 with domain: int(0..4) (representing constraint (aux1765 + aux1767))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7434'
c Var 'aux1770' direct represents '0' with '7434'
c Var 'aux1770' order represents '1' with '7435'
-7434 7435 0
c Var 'aux1770' direct represents '1' with '7436'
7434 -7435 7436 0
-7436 7435 0
-7436 -7434 0
c Var 'aux1770' order represents '2' with '7437'
-7435 7437 0
c Var 'aux1770' direct represents '2' with '7438'
7435 -7437 7438 0
-7438 7437 0
-7438 -7435 0
c Var 'aux1770' order represents '3' with '7439'
-7437 7439 0
c Var 'aux1770' direct represents '3' with '7440'
7437 -7439 7440 0
-7440 7439 0
-7440 -7437 0
c Var 'aux1770' direct represents '4' with '-7439'
7434 7436 7438 7440 -7439 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7441'
c Var 'aux1771' direct represents '0' with '7441'
c Var 'aux1771' order represents '1' with '7442'
-7441 7442 0
c Var 'aux1771' direct represents '1' with '7443'
7441 -7442 7443 0
-7443 7442 0
-7443 -7441 0
c Var 'aux1771' direct represents '2' with '-7442'
7441 7443 -7442 0
c Encoding variable: aux1772 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7444'
c Var 'aux1772' direct represents '0' with '7444'
c Var 'aux1772' order represents '1' with '7445'
-7444 7445 0
c Var 'aux1772' direct represents '1' with '7446'
7444 -7445 7446 0
-7446 7445 0
-7446 -7444 0
c Var 'aux1772' direct represents '2' with '-7445'
7444 7446 -7445 0
c Encoding variable: aux1773 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7447'
c Var 'aux1773' direct represents '0' with '7447'
c Var 'aux1773' order represents '1' with '7448'
-7447 7448 0
c Var 'aux1773' direct represents '1' with '7449'
7447 -7448 7449 0
-7449 7448 0
-7449 -7447 0
c Var 'aux1773' direct represents '2' with '-7448'
7447 7449 -7448 0
c Encoding variable: aux1774 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7450'
c Var 'aux1774' direct represents '0' with '7450'
c Var 'aux1774' order represents '1' with '7451'
-7450 7451 0
c Var 'aux1774' direct represents '1' with '7452'
7450 -7451 7452 0
-7452 7451 0
-7452 -7450 0
c Var 'aux1774' direct represents '2' with '-7451'
7450 7452 -7451 0
c Encoding variable: aux1775 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1774))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7453'
c Var 'aux1775' direct represents '0' with '7453'
c Var 'aux1775' order represents '1' with '7454'
-7453 7454 0
c Var 'aux1775' direct represents '1' with '7455'
7453 -7454 7455 0
-7455 7454 0
-7455 -7453 0
c Var 'aux1775' order represents '2' with '7456'
-7454 7456 0
c Var 'aux1775' direct represents '2' with '7457'
7454 -7456 7457 0
-7457 7456 0
-7457 -7454 0
c Var 'aux1775' direct represents '3' with '-7456'
7453 7455 7457 -7456 0
c Encoding variable: aux1776 with domain: int(0..4) (representing constraint (aux1771 + aux1773))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7458'
c Var 'aux1776' direct represents '0' with '7458'
c Var 'aux1776' order represents '1' with '7459'
-7458 7459 0
c Var 'aux1776' direct represents '1' with '7460'
7458 -7459 7460 0
-7460 7459 0
-7460 -7458 0
c Var 'aux1776' order represents '2' with '7461'
-7459 7461 0
c Var 'aux1776' direct represents '2' with '7462'
7459 -7461 7462 0
-7462 7461 0
-7462 -7459 0
c Var 'aux1776' order represents '3' with '7463'
-7461 7463 0
c Var 'aux1776' direct represents '3' with '7464'
7461 -7463 7464 0
-7464 7463 0
-7464 -7461 0
c Var 'aux1776' direct represents '4' with '-7463'
7458 7460 7462 7464 -7463 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7465'
c Var 'aux1777' direct represents '0' with '7465'
c Var 'aux1777' order represents '1' with '7466'
-7465 7466 0
c Var 'aux1777' direct represents '1' with '7467'
7465 -7466 7467 0
-7467 7466 0
-7467 -7465 0
c Var 'aux1777' direct represents '2' with '-7466'
7465 7467 -7466 0
c Encoding variable: aux1778 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7468'
c Var 'aux1778' direct represents '0' with '7468'
c Var 'aux1778' order represents '1' with '7469'
-7468 7469 0
c Var 'aux1778' direct represents '1' with '7470'
7468 -7469 7470 0
-7470 7469 0
-7470 -7468 0
c Var 'aux1778' direct represents '2' with '-7469'
7468 7470 -7469 0
c Encoding variable: aux1779 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7471'
c Var 'aux1779' direct represents '0' with '7471'
c Var 'aux1779' order represents '1' with '7472'
-7471 7472 0
c Var 'aux1779' direct represents '1' with '7473'
7471 -7472 7473 0
-7473 7472 0
-7473 -7471 0
c Var 'aux1779' direct represents '2' with '-7472'
7471 7473 -7472 0
c Encoding variable: aux1780 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7474'
c Var 'aux1780' direct represents '0' with '7474'
c Var 'aux1780' order represents '1' with '7475'
-7474 7475 0
c Var 'aux1780' direct represents '1' with '7476'
7474 -7475 7476 0
-7476 7475 0
-7476 -7474 0
c Var 'aux1780' direct represents '2' with '-7475'
7474 7476 -7475 0
c Encoding variable: aux1781 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1780))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7477'
c Var 'aux1781' direct represents '0' with '7477'
c Var 'aux1781' order represents '1' with '7478'
-7477 7478 0
c Var 'aux1781' direct represents '1' with '7479'
7477 -7478 7479 0
-7479 7478 0
-7479 -7477 0
c Var 'aux1781' order represents '2' with '7480'
-7478 7480 0
c Var 'aux1781' direct represents '2' with '7481'
7478 -7480 7481 0
-7481 7480 0
-7481 -7478 0
c Var 'aux1781' direct represents '3' with '-7480'
7477 7479 7481 -7480 0
c Encoding variable: aux1782 with domain: int(0..4) (representing constraint (aux1777 + aux1779))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7482'
c Var 'aux1782' direct represents '0' with '7482'
c Var 'aux1782' order represents '1' with '7483'
-7482 7483 0
c Var 'aux1782' direct represents '1' with '7484'
7482 -7483 7484 0
-7484 7483 0
-7484 -7482 0
c Var 'aux1782' order represents '2' with '7485'
-7483 7485 0
c Var 'aux1782' direct represents '2' with '7486'
7483 -7485 7486 0
-7486 7485 0
-7486 -7483 0
c Var 'aux1782' order represents '3' with '7487'
-7485 7487 0
c Var 'aux1782' direct represents '3' with '7488'
7485 -7487 7488 0
-7488 7487 0
-7488 -7485 0
c Var 'aux1782' direct represents '4' with '-7487'
7482 7484 7486 7488 -7487 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7489'
c Var 'aux1783' direct represents '0' with '7489'
c Var 'aux1783' order represents '1' with '7490'
-7489 7490 0
c Var 'aux1783' direct represents '1' with '7491'
7489 -7490 7491 0
-7491 7490 0
-7491 -7489 0
c Var 'aux1783' direct represents '2' with '-7490'
7489 7491 -7490 0
c Encoding variable: aux1784 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7492'
c Var 'aux1784' direct represents '0' with '7492'
c Var 'aux1784' order represents '1' with '7493'
-7492 7493 0
c Var 'aux1784' direct represents '1' with '7494'
7492 -7493 7494 0
-7494 7493 0
-7494 -7492 0
c Var 'aux1784' direct represents '2' with '-7493'
7492 7494 -7493 0
c Encoding variable: aux1785 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7495'
c Var 'aux1785' direct represents '0' with '7495'
c Var 'aux1785' order represents '1' with '7496'
-7495 7496 0
c Var 'aux1785' direct represents '1' with '7497'
7495 -7496 7497 0
-7497 7496 0
-7497 -7495 0
c Var 'aux1785' direct represents '2' with '-7496'
7495 7497 -7496 0
c Encoding variable: aux1786 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7498'
c Var 'aux1786' direct represents '0' with '7498'
c Var 'aux1786' order represents '1' with '7499'
-7498 7499 0
c Var 'aux1786' direct represents '1' with '7500'
7498 -7499 7500 0
-7500 7499 0
-7500 -7498 0
c Var 'aux1786' direct represents '2' with '-7499'
7498 7500 -7499 0
c Encoding variable: aux1787 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1786))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7501'
c Var 'aux1787' direct represents '0' with '7501'
c Var 'aux1787' order represents '1' with '7502'
-7501 7502 0
c Var 'aux1787' direct represents '1' with '7503'
7501 -7502 7503 0
-7503 7502 0
-7503 -7501 0
c Var 'aux1787' order represents '2' with '7504'
-7502 7504 0
c Var 'aux1787' direct represents '2' with '7505'
7502 -7504 7505 0
-7505 7504 0
-7505 -7502 0
c Var 'aux1787' direct represents '3' with '-7504'
7501 7503 7505 -7504 0
c Encoding variable: aux1788 with domain: int(0..4) (representing constraint (aux1783 + aux1785))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7506'
c Var 'aux1788' direct represents '0' with '7506'
c Var 'aux1788' order represents '1' with '7507'
-7506 7507 0
c Var 'aux1788' direct represents '1' with '7508'
7506 -7507 7508 0
-7508 7507 0
-7508 -7506 0
c Var 'aux1788' order represents '2' with '7509'
-7507 7509 0
c Var 'aux1788' direct represents '2' with '7510'
7507 -7509 7510 0
-7510 7509 0
-7510 -7507 0
c Var 'aux1788' order represents '3' with '7511'
-7509 7511 0
c Var 'aux1788' direct represents '3' with '7512'
7509 -7511 7512 0
-7512 7511 0
-7512 -7509 0
c Var 'aux1788' direct represents '4' with '-7511'
7506 7508 7510 7512 -7511 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7513'
c Var 'aux1789' direct represents '0' with '7513'
c Var 'aux1789' order represents '1' with '7514'
-7513 7514 0
c Var 'aux1789' direct represents '1' with '7515'
7513 -7514 7515 0
-7515 7514 0
-7515 -7513 0
c Var 'aux1789' direct represents '2' with '-7514'
7513 7515 -7514 0
c Encoding variable: aux1790 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7516'
c Var 'aux1790' direct represents '0' with '7516'
c Var 'aux1790' order represents '1' with '7517'
-7516 7517 0
c Var 'aux1790' direct represents '1' with '7518'
7516 -7517 7518 0
-7518 7517 0
-7518 -7516 0
c Var 'aux1790' direct represents '2' with '-7517'
7516 7518 -7517 0
c Encoding variable: aux1791 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7519'
c Var 'aux1791' direct represents '0' with '7519'
c Var 'aux1791' order represents '1' with '7520'
-7519 7520 0
c Var 'aux1791' direct represents '1' with '7521'
7519 -7520 7521 0
-7521 7520 0
-7521 -7519 0
c Var 'aux1791' direct represents '2' with '-7520'
7519 7521 -7520 0
c Encoding variable: aux1792 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7522'
c Var 'aux1792' direct represents '0' with '7522'
c Var 'aux1792' order represents '1' with '7523'
-7522 7523 0
c Var 'aux1792' direct represents '1' with '7524'
7522 -7523 7524 0
-7524 7523 0
-7524 -7522 0
c Var 'aux1792' direct represents '2' with '-7523'
7522 7524 -7523 0
c Encoding variable: aux1793 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1792))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7525'
c Var 'aux1793' direct represents '0' with '7525'
c Var 'aux1793' order represents '1' with '7526'
-7525 7526 0
c Var 'aux1793' direct represents '1' with '7527'
7525 -7526 7527 0
-7527 7526 0
-7527 -7525 0
c Var 'aux1793' order represents '2' with '7528'
-7526 7528 0
c Var 'aux1793' direct represents '2' with '7529'
7526 -7528 7529 0
-7529 7528 0
-7529 -7526 0
c Var 'aux1793' direct represents '3' with '-7528'
7525 7527 7529 -7528 0
c Encoding variable: aux1794 with domain: int(0..4) (representing constraint (aux1789 + aux1791))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7530'
c Var 'aux1794' direct represents '0' with '7530'
c Var 'aux1794' order represents '1' with '7531'
-7530 7531 0
c Var 'aux1794' direct represents '1' with '7532'
7530 -7531 7532 0
-7532 7531 0
-7532 -7530 0
c Var 'aux1794' order represents '2' with '7533'
-7531 7533 0
c Var 'aux1794' direct represents '2' with '7534'
7531 -7533 7534 0
-7534 7533 0
-7534 -7531 0
c Var 'aux1794' order represents '3' with '7535'
-7533 7535 0
c Var 'aux1794' direct represents '3' with '7536'
7533 -7535 7536 0
-7536 7535 0
-7536 -7533 0
c Var 'aux1794' direct represents '4' with '-7535'
7530 7532 7534 7536 -7535 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7537'
c Var 'aux1795' direct represents '0' with '7537'
c Var 'aux1795' order represents '1' with '7538'
-7537 7538 0
c Var 'aux1795' direct represents '1' with '7539'
7537 -7538 7539 0
-7539 7538 0
-7539 -7537 0
c Var 'aux1795' direct represents '2' with '-7538'
7537 7539 -7538 0
c Encoding variable: aux1796 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7540'
c Var 'aux1796' direct represents '0' with '7540'
c Var 'aux1796' order represents '1' with '7541'
-7540 7541 0
c Var 'aux1796' direct represents '1' with '7542'
7540 -7541 7542 0
-7542 7541 0
-7542 -7540 0
c Var 'aux1796' direct represents '2' with '-7541'
7540 7542 -7541 0
c Encoding variable: aux1797 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7543'
c Var 'aux1797' direct represents '0' with '7543'
c Var 'aux1797' order represents '1' with '7544'
-7543 7544 0
c Var 'aux1797' direct represents '1' with '7545'
7543 -7544 7545 0
-7545 7544 0
-7545 -7543 0
c Var 'aux1797' direct represents '2' with '-7544'
7543 7545 -7544 0
c Encoding variable: aux1798 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7546'
c Var 'aux1798' direct represents '0' with '7546'
c Var 'aux1798' order represents '1' with '7547'
-7546 7547 0
c Var 'aux1798' direct represents '1' with '7548'
7546 -7547 7548 0
-7548 7547 0
-7548 -7546 0
c Var 'aux1798' direct represents '2' with '-7547'
7546 7548 -7547 0
c Encoding variable: aux1799 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1798))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7549'
c Var 'aux1799' direct represents '0' with '7549'
c Var 'aux1799' order represents '1' with '7550'
-7549 7550 0
c Var 'aux1799' direct represents '1' with '7551'
7549 -7550 7551 0
-7551 7550 0
-7551 -7549 0
c Var 'aux1799' order represents '2' with '7552'
-7550 7552 0
c Var 'aux1799' direct represents '2' with '7553'
7550 -7552 7553 0
-7553 7552 0
-7553 -7550 0
c Var 'aux1799' direct represents '3' with '-7552'
7549 7551 7553 -7552 0
c Encoding variable: aux1800 with domain: int(0..4) (representing constraint (aux1795 + aux1797))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7554'
c Var 'aux1800' direct represents '0' with '7554'
c Var 'aux1800' order represents '1' with '7555'
-7554 7555 0
c Var 'aux1800' direct represents '1' with '7556'
7554 -7555 7556 0
-7556 7555 0
-7556 -7554 0
c Var 'aux1800' order represents '2' with '7557'
-7555 7557 0
c Var 'aux1800' direct represents '2' with '7558'
7555 -7557 7558 0
-7558 7557 0
-7558 -7555 0
c Var 'aux1800' order represents '3' with '7559'
-7557 7559 0
c Var 'aux1800' direct represents '3' with '7560'
7557 -7559 7560 0
-7560 7559 0
-7560 -7557 0
c Var 'aux1800' direct represents '4' with '-7559'
7554 7556 7558 7560 -7559 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7561'
c Var 'aux1801' direct represents '0' with '7561'
c Var 'aux1801' order represents '1' with '7562'
-7561 7562 0
c Var 'aux1801' direct represents '1' with '7563'
7561 -7562 7563 0
-7563 7562 0
-7563 -7561 0
c Var 'aux1801' direct represents '2' with '-7562'
7561 7563 -7562 0
c Encoding variable: aux1802 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7564'
c Var 'aux1802' direct represents '0' with '7564'
c Var 'aux1802' order represents '1' with '7565'
-7564 7565 0
c Var 'aux1802' direct represents '1' with '7566'
7564 -7565 7566 0
-7566 7565 0
-7566 -7564 0
c Var 'aux1802' direct represents '2' with '-7565'
7564 7566 -7565 0
c Encoding variable: aux1803 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7567'
c Var 'aux1803' direct represents '0' with '7567'
c Var 'aux1803' order represents '1' with '7568'
-7567 7568 0
c Var 'aux1803' direct represents '1' with '7569'
7567 -7568 7569 0
-7569 7568 0
-7569 -7567 0
c Var 'aux1803' direct represents '2' with '-7568'
7567 7569 -7568 0
c Encoding variable: aux1804 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7570'
c Var 'aux1804' direct represents '0' with '7570'
c Var 'aux1804' order represents '1' with '7571'
-7570 7571 0
c Var 'aux1804' direct represents '1' with '7572'
7570 -7571 7572 0
-7572 7571 0
-7572 -7570 0
c Var 'aux1804' direct represents '2' with '-7571'
7570 7572 -7571 0
c Encoding variable: aux1805 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1804))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7573'
c Var 'aux1805' direct represents '0' with '7573'
c Var 'aux1805' order represents '1' with '7574'
-7573 7574 0
c Var 'aux1805' direct represents '1' with '7575'
7573 -7574 7575 0
-7575 7574 0
-7575 -7573 0
c Var 'aux1805' order represents '2' with '7576'
-7574 7576 0
c Var 'aux1805' direct represents '2' with '7577'
7574 -7576 7577 0
-7577 7576 0
-7577 -7574 0
c Var 'aux1805' direct represents '3' with '-7576'
7573 7575 7577 -7576 0
c Encoding variable: aux1806 with domain: int(0..4) (representing constraint (aux1801 + aux1803))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7578'
c Var 'aux1806' direct represents '0' with '7578'
c Var 'aux1806' order represents '1' with '7579'
-7578 7579 0
c Var 'aux1806' direct represents '1' with '7580'
7578 -7579 7580 0
-7580 7579 0
-7580 -7578 0
c Var 'aux1806' order represents '2' with '7581'
-7579 7581 0
c Var 'aux1806' direct represents '2' with '7582'
7579 -7581 7582 0
-7582 7581 0
-7582 -7579 0
c Var 'aux1806' order represents '3' with '7583'
-7581 7583 0
c Var 'aux1806' direct represents '3' with '7584'
7581 -7583 7584 0
-7584 7583 0
-7584 -7581 0
c Var 'aux1806' direct represents '4' with '-7583'
7578 7580 7582 7584 -7583 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7585'
c Var 'aux1807' direct represents '0' with '7585'
c Var 'aux1807' order represents '1' with '7586'
-7585 7586 0
c Var 'aux1807' direct represents '1' with '7587'
7585 -7586 7587 0
-7587 7586 0
-7587 -7585 0
c Var 'aux1807' direct represents '2' with '-7586'
7585 7587 -7586 0
c Encoding variable: aux1808 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7588'
c Var 'aux1808' direct represents '0' with '7588'
c Var 'aux1808' order represents '1' with '7589'
-7588 7589 0
c Var 'aux1808' direct represents '1' with '7590'
7588 -7589 7590 0
-7590 7589 0
-7590 -7588 0
c Var 'aux1808' direct represents '2' with '-7589'
7588 7590 -7589 0
c Encoding variable: aux1809 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7591'
c Var 'aux1809' direct represents '0' with '7591'
c Var 'aux1809' order represents '1' with '7592'
-7591 7592 0
c Var 'aux1809' direct represents '1' with '7593'
7591 -7592 7593 0
-7593 7592 0
-7593 -7591 0
c Var 'aux1809' direct represents '2' with '-7592'
7591 7593 -7592 0
c Encoding variable: aux1810 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7594'
c Var 'aux1810' direct represents '0' with '7594'
c Var 'aux1810' order represents '1' with '7595'
-7594 7595 0
c Var 'aux1810' direct represents '1' with '7596'
7594 -7595 7596 0
-7596 7595 0
-7596 -7594 0
c Var 'aux1810' direct represents '2' with '-7595'
7594 7596 -7595 0
c Encoding variable: aux1811 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1810))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7597'
c Var 'aux1811' direct represents '0' with '7597'
c Var 'aux1811' order represents '1' with '7598'
-7597 7598 0
c Var 'aux1811' direct represents '1' with '7599'
7597 -7598 7599 0
-7599 7598 0
-7599 -7597 0
c Var 'aux1811' order represents '2' with '7600'
-7598 7600 0
c Var 'aux1811' direct represents '2' with '7601'
7598 -7600 7601 0
-7601 7600 0
-7601 -7598 0
c Var 'aux1811' direct represents '3' with '-7600'
7597 7599 7601 -7600 0
c Encoding variable: aux1812 with domain: int(0..4) (representing constraint (aux1807 + aux1809))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7602'
c Var 'aux1812' direct represents '0' with '7602'
c Var 'aux1812' order represents '1' with '7603'
-7602 7603 0
c Var 'aux1812' direct represents '1' with '7604'
7602 -7603 7604 0
-7604 7603 0
-7604 -7602 0
c Var 'aux1812' order represents '2' with '7605'
-7603 7605 0
c Var 'aux1812' direct represents '2' with '7606'
7603 -7605 7606 0
-7606 7605 0
-7606 -7603 0
c Var 'aux1812' order represents '3' with '7607'
-7605 7607 0
c Var 'aux1812' direct represents '3' with '7608'
7605 -7607 7608 0
-7608 7607 0
-7608 -7605 0
c Var 'aux1812' direct represents '4' with '-7607'
7602 7604 7606 7608 -7607 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7609'
c Var 'aux1813' direct represents '0' with '7609'
c Var 'aux1813' order represents '1' with '7610'
-7609 7610 0
c Var 'aux1813' direct represents '1' with '7611'
7609 -7610 7611 0
-7611 7610 0
-7611 -7609 0
c Var 'aux1813' direct represents '2' with '-7610'
7609 7611 -7610 0
c Encoding variable: aux1814 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7612'
c Var 'aux1814' direct represents '0' with '7612'
c Var 'aux1814' order represents '1' with '7613'
-7612 7613 0
c Var 'aux1814' direct represents '1' with '7614'
7612 -7613 7614 0
-7614 7613 0
-7614 -7612 0
c Var 'aux1814' direct represents '2' with '-7613'
7612 7614 -7613 0
c Encoding variable: aux1815 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7615'
c Var 'aux1815' direct represents '0' with '7615'
c Var 'aux1815' order represents '1' with '7616'
-7615 7616 0
c Var 'aux1815' direct represents '1' with '7617'
7615 -7616 7617 0
-7617 7616 0
-7617 -7615 0
c Var 'aux1815' direct represents '2' with '-7616'
7615 7617 -7616 0
c Encoding variable: aux1816 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7618'
c Var 'aux1816' direct represents '0' with '7618'
c Var 'aux1816' order represents '1' with '7619'
-7618 7619 0
c Var 'aux1816' direct represents '1' with '7620'
7618 -7619 7620 0
-7620 7619 0
-7620 -7618 0
c Var 'aux1816' direct represents '2' with '-7619'
7618 7620 -7619 0
c Encoding variable: aux1817 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1816))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7621'
c Var 'aux1817' direct represents '0' with '7621'
c Var 'aux1817' order represents '1' with '7622'
-7621 7622 0
c Var 'aux1817' direct represents '1' with '7623'
7621 -7622 7623 0
-7623 7622 0
-7623 -7621 0
c Var 'aux1817' order represents '2' with '7624'
-7622 7624 0
c Var 'aux1817' direct represents '2' with '7625'
7622 -7624 7625 0
-7625 7624 0
-7625 -7622 0
c Var 'aux1817' direct represents '3' with '-7624'
7621 7623 7625 -7624 0
c Encoding variable: aux1818 with domain: int(0..4) (representing constraint (aux1813 + aux1815))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7626'
c Var 'aux1818' direct represents '0' with '7626'
c Var 'aux1818' order represents '1' with '7627'
-7626 7627 0
c Var 'aux1818' direct represents '1' with '7628'
7626 -7627 7628 0
-7628 7627 0
-7628 -7626 0
c Var 'aux1818' order represents '2' with '7629'
-7627 7629 0
c Var 'aux1818' direct represents '2' with '7630'
7627 -7629 7630 0
-7630 7629 0
-7630 -7627 0
c Var 'aux1818' order represents '3' with '7631'
-7629 7631 0
c Var 'aux1818' direct represents '3' with '7632'
7629 -7631 7632 0
-7632 7631 0
-7632 -7629 0
c Var 'aux1818' direct represents '4' with '-7631'
7626 7628 7630 7632 -7631 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7633'
c Var 'aux1819' direct represents '0' with '7633'
c Var 'aux1819' order represents '1' with '7634'
-7633 7634 0
c Var 'aux1819' direct represents '1' with '7635'
7633 -7634 7635 0
-7635 7634 0
-7635 -7633 0
c Var 'aux1819' direct represents '2' with '-7634'
7633 7635 -7634 0
c Encoding variable: aux1820 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7636'
c Var 'aux1820' direct represents '0' with '7636'
c Var 'aux1820' order represents '1' with '7637'
-7636 7637 0
c Var 'aux1820' direct represents '1' with '7638'
7636 -7637 7638 0
-7638 7637 0
-7638 -7636 0
c Var 'aux1820' direct represents '2' with '-7637'
7636 7638 -7637 0
c Encoding variable: aux1821 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7639'
c Var 'aux1821' direct represents '0' with '7639'
c Var 'aux1821' order represents '1' with '7640'
-7639 7640 0
c Var 'aux1821' direct represents '1' with '7641'
7639 -7640 7641 0
-7641 7640 0
-7641 -7639 0
c Var 'aux1821' direct represents '2' with '-7640'
7639 7641 -7640 0
c Encoding variable: aux1822 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7642'
c Var 'aux1822' direct represents '0' with '7642'
c Var 'aux1822' order represents '1' with '7643'
-7642 7643 0
c Var 'aux1822' direct represents '1' with '7644'
7642 -7643 7644 0
-7644 7643 0
-7644 -7642 0
c Var 'aux1822' direct represents '2' with '-7643'
7642 7644 -7643 0
c Encoding variable: aux1823 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1822))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7645'
c Var 'aux1823' direct represents '0' with '7645'
c Var 'aux1823' order represents '1' with '7646'
-7645 7646 0
c Var 'aux1823' direct represents '1' with '7647'
7645 -7646 7647 0
-7647 7646 0
-7647 -7645 0
c Var 'aux1823' order represents '2' with '7648'
-7646 7648 0
c Var 'aux1823' direct represents '2' with '7649'
7646 -7648 7649 0
-7649 7648 0
-7649 -7646 0
c Var 'aux1823' direct represents '3' with '-7648'
7645 7647 7649 -7648 0
c Encoding variable: aux1824 with domain: int(0..4) (representing constraint (aux1819 + aux1821))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7650'
c Var 'aux1824' direct represents '0' with '7650'
c Var 'aux1824' order represents '1' with '7651'
-7650 7651 0
c Var 'aux1824' direct represents '1' with '7652'
7650 -7651 7652 0
-7652 7651 0
-7652 -7650 0
c Var 'aux1824' order represents '2' with '7653'
-7651 7653 0
c Var 'aux1824' direct represents '2' with '7654'
7651 -7653 7654 0
-7654 7653 0
-7654 -7651 0
c Var 'aux1824' order represents '3' with '7655'
-7653 7655 0
c Var 'aux1824' direct represents '3' with '7656'
7653 -7655 7656 0
-7656 7655 0
-7656 -7653 0
c Var 'aux1824' direct represents '4' with '-7655'
7650 7652 7654 7656 -7655 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7657'
c Var 'aux1825' direct represents '0' with '7657'
c Var 'aux1825' order represents '1' with '7658'
-7657 7658 0
c Var 'aux1825' direct represents '1' with '7659'
7657 -7658 7659 0
-7659 7658 0
-7659 -7657 0
c Var 'aux1825' direct represents '2' with '-7658'
7657 7659 -7658 0
c Encoding variable: aux1826 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7660'
c Var 'aux1826' direct represents '0' with '7660'
c Var 'aux1826' order represents '1' with '7661'
-7660 7661 0
c Var 'aux1826' direct represents '1' with '7662'
7660 -7661 7662 0
-7662 7661 0
-7662 -7660 0
c Var 'aux1826' direct represents '2' with '-7661'
7660 7662 -7661 0
c Encoding variable: aux1827 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7663'
c Var 'aux1827' direct represents '0' with '7663'
c Var 'aux1827' order represents '1' with '7664'
-7663 7664 0
c Var 'aux1827' direct represents '1' with '7665'
7663 -7664 7665 0
-7665 7664 0
-7665 -7663 0
c Var 'aux1827' direct represents '2' with '-7664'
7663 7665 -7664 0
c Encoding variable: aux1828 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7666'
c Var 'aux1828' direct represents '0' with '7666'
c Var 'aux1828' order represents '1' with '7667'
-7666 7667 0
c Var 'aux1828' direct represents '1' with '7668'
7666 -7667 7668 0
-7668 7667 0
-7668 -7666 0
c Var 'aux1828' direct represents '2' with '-7667'
7666 7668 -7667 0
c Encoding variable: aux1829 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1828))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7669'
c Var 'aux1829' direct represents '0' with '7669'
c Var 'aux1829' order represents '1' with '7670'
-7669 7670 0
c Var 'aux1829' direct represents '1' with '7671'
7669 -7670 7671 0
-7671 7670 0
-7671 -7669 0
c Var 'aux1829' order represents '2' with '7672'
-7670 7672 0
c Var 'aux1829' direct represents '2' with '7673'
7670 -7672 7673 0
-7673 7672 0
-7673 -7670 0
c Var 'aux1829' direct represents '3' with '-7672'
7669 7671 7673 -7672 0
c Encoding variable: aux1830 with domain: int(0..4) (representing constraint (aux1825 + aux1827))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7674'
c Var 'aux1830' direct represents '0' with '7674'
c Var 'aux1830' order represents '1' with '7675'
-7674 7675 0
c Var 'aux1830' direct represents '1' with '7676'
7674 -7675 7676 0
-7676 7675 0
-7676 -7674 0
c Var 'aux1830' order represents '2' with '7677'
-7675 7677 0
c Var 'aux1830' direct represents '2' with '7678'
7675 -7677 7678 0
-7678 7677 0
-7678 -7675 0
c Var 'aux1830' order represents '3' with '7679'
-7677 7679 0
c Var 'aux1830' direct represents '3' with '7680'
7677 -7679 7680 0
-7680 7679 0
-7680 -7677 0
c Var 'aux1830' direct represents '4' with '-7679'
7674 7676 7678 7680 -7679 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7681'
c Var 'aux1831' direct represents '0' with '7681'
c Var 'aux1831' order represents '1' with '7682'
-7681 7682 0
c Var 'aux1831' direct represents '1' with '7683'
7681 -7682 7683 0
-7683 7682 0
-7683 -7681 0
c Var 'aux1831' direct represents '2' with '-7682'
7681 7683 -7682 0
c Encoding variable: aux1832 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7684'
c Var 'aux1832' direct represents '0' with '7684'
c Var 'aux1832' order represents '1' with '7685'
-7684 7685 0
c Var 'aux1832' direct represents '1' with '7686'
7684 -7685 7686 0
-7686 7685 0
-7686 -7684 0
c Var 'aux1832' direct represents '2' with '-7685'
7684 7686 -7685 0
c Encoding variable: aux1833 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7687'
c Var 'aux1833' direct represents '0' with '7687'
c Var 'aux1833' order represents '1' with '7688'
-7687 7688 0
c Var 'aux1833' direct represents '1' with '7689'
7687 -7688 7689 0
-7689 7688 0
-7689 -7687 0
c Var 'aux1833' direct represents '2' with '-7688'
7687 7689 -7688 0
c Encoding variable: aux1834 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7690'
c Var 'aux1834' direct represents '0' with '7690'
c Var 'aux1834' order represents '1' with '7691'
-7690 7691 0
c Var 'aux1834' direct represents '1' with '7692'
7690 -7691 7692 0
-7692 7691 0
-7692 -7690 0
c Var 'aux1834' direct represents '2' with '-7691'
7690 7692 -7691 0
c Encoding variable: aux1835 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1834))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7693'
c Var 'aux1835' direct represents '0' with '7693'
c Var 'aux1835' order represents '1' with '7694'
-7693 7694 0
c Var 'aux1835' direct represents '1' with '7695'
7693 -7694 7695 0
-7695 7694 0
-7695 -7693 0
c Var 'aux1835' order represents '2' with '7696'
-7694 7696 0
c Var 'aux1835' direct represents '2' with '7697'
7694 -7696 7697 0
-7697 7696 0
-7697 -7694 0
c Var 'aux1835' direct represents '3' with '-7696'
7693 7695 7697 -7696 0
c Encoding variable: aux1836 with domain: int(0..4) (representing constraint (aux1831 + aux1833))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7698'
c Var 'aux1836' direct represents '0' with '7698'
c Var 'aux1836' order represents '1' with '7699'
-7698 7699 0
c Var 'aux1836' direct represents '1' with '7700'
7698 -7699 7700 0
-7700 7699 0
-7700 -7698 0
c Var 'aux1836' order represents '2' with '7701'
-7699 7701 0
c Var 'aux1836' direct represents '2' with '7702'
7699 -7701 7702 0
-7702 7701 0
-7702 -7699 0
c Var 'aux1836' order represents '3' with '7703'
-7701 7703 0
c Var 'aux1836' direct represents '3' with '7704'
7701 -7703 7704 0
-7704 7703 0
-7704 -7701 0
c Var 'aux1836' direct represents '4' with '-7703'
7698 7700 7702 7704 -7703 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7705'
c Var 'aux1837' direct represents '0' with '7705'
c Var 'aux1837' order represents '1' with '7706'
-7705 7706 0
c Var 'aux1837' direct represents '1' with '7707'
7705 -7706 7707 0
-7707 7706 0
-7707 -7705 0
c Var 'aux1837' direct represents '2' with '-7706'
7705 7707 -7706 0
c Encoding variable: aux1838 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7708'
c Var 'aux1838' direct represents '0' with '7708'
c Var 'aux1838' order represents '1' with '7709'
-7708 7709 0
c Var 'aux1838' direct represents '1' with '7710'
7708 -7709 7710 0
-7710 7709 0
-7710 -7708 0
c Var 'aux1838' direct represents '2' with '-7709'
7708 7710 -7709 0
c Encoding variable: aux1839 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7711'
c Var 'aux1839' direct represents '0' with '7711'
c Var 'aux1839' order represents '1' with '7712'
-7711 7712 0
c Var 'aux1839' direct represents '1' with '7713'
7711 -7712 7713 0
-7713 7712 0
-7713 -7711 0
c Var 'aux1839' direct represents '2' with '-7712'
7711 7713 -7712 0
c Encoding variable: aux1840 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7714'
c Var 'aux1840' direct represents '0' with '7714'
c Var 'aux1840' order represents '1' with '7715'
-7714 7715 0
c Var 'aux1840' direct represents '1' with '7716'
7714 -7715 7716 0
-7716 7715 0
-7716 -7714 0
c Var 'aux1840' direct represents '2' with '-7715'
7714 7716 -7715 0
c Encoding variable: aux1841 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1840))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7717'
c Var 'aux1841' direct represents '0' with '7717'
c Var 'aux1841' order represents '1' with '7718'
-7717 7718 0
c Var 'aux1841' direct represents '1' with '7719'
7717 -7718 7719 0
-7719 7718 0
-7719 -7717 0
c Var 'aux1841' order represents '2' with '7720'
-7718 7720 0
c Var 'aux1841' direct represents '2' with '7721'
7718 -7720 7721 0
-7721 7720 0
-7721 -7718 0
c Var 'aux1841' direct represents '3' with '-7720'
7717 7719 7721 -7720 0
c Encoding variable: aux1842 with domain: int(0..4) (representing constraint (aux1837 + aux1839))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7722'
c Var 'aux1842' direct represents '0' with '7722'
c Var 'aux1842' order represents '1' with '7723'
-7722 7723 0
c Var 'aux1842' direct represents '1' with '7724'
7722 -7723 7724 0
-7724 7723 0
-7724 -7722 0
c Var 'aux1842' order represents '2' with '7725'
-7723 7725 0
c Var 'aux1842' direct represents '2' with '7726'
7723 -7725 7726 0
-7726 7725 0
-7726 -7723 0
c Var 'aux1842' order represents '3' with '7727'
-7725 7727 0
c Var 'aux1842' direct represents '3' with '7728'
7725 -7727 7728 0
-7728 7727 0
-7728 -7725 0
c Var 'aux1842' direct represents '4' with '-7727'
7722 7724 7726 7728 -7727 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7729'
c Var 'aux1843' direct represents '0' with '7729'
c Var 'aux1843' order represents '1' with '7730'
-7729 7730 0
c Var 'aux1843' direct represents '1' with '7731'
7729 -7730 7731 0
-7731 7730 0
-7731 -7729 0
c Var 'aux1843' direct represents '2' with '-7730'
7729 7731 -7730 0
c Encoding variable: aux1844 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7732'
c Var 'aux1844' direct represents '0' with '7732'
c Var 'aux1844' order represents '1' with '7733'
-7732 7733 0
c Var 'aux1844' direct represents '1' with '7734'
7732 -7733 7734 0
-7734 7733 0
-7734 -7732 0
c Var 'aux1844' direct represents '2' with '-7733'
7732 7734 -7733 0
c Encoding variable: aux1845 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7735'
c Var 'aux1845' direct represents '0' with '7735'
c Var 'aux1845' order represents '1' with '7736'
-7735 7736 0
c Var 'aux1845' direct represents '1' with '7737'
7735 -7736 7737 0
-7737 7736 0
-7737 -7735 0
c Var 'aux1845' direct represents '2' with '-7736'
7735 7737 -7736 0
c Encoding variable: aux1846 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7738'
c Var 'aux1846' direct represents '0' with '7738'
c Var 'aux1846' order represents '1' with '7739'
-7738 7739 0
c Var 'aux1846' direct represents '1' with '7740'
7738 -7739 7740 0
-7740 7739 0
-7740 -7738 0
c Var 'aux1846' direct represents '2' with '-7739'
7738 7740 -7739 0
c Encoding variable: aux1847 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1846))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7741'
c Var 'aux1847' direct represents '0' with '7741'
c Var 'aux1847' order represents '1' with '7742'
-7741 7742 0
c Var 'aux1847' direct represents '1' with '7743'
7741 -7742 7743 0
-7743 7742 0
-7743 -7741 0
c Var 'aux1847' order represents '2' with '7744'
-7742 7744 0
c Var 'aux1847' direct represents '2' with '7745'
7742 -7744 7745 0
-7745 7744 0
-7745 -7742 0
c Var 'aux1847' direct represents '3' with '-7744'
7741 7743 7745 -7744 0
c Encoding variable: aux1848 with domain: int(0..4) (representing constraint (aux1843 + aux1845))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7746'
c Var 'aux1848' direct represents '0' with '7746'
c Var 'aux1848' order represents '1' with '7747'
-7746 7747 0
c Var 'aux1848' direct represents '1' with '7748'
7746 -7747 7748 0
-7748 7747 0
-7748 -7746 0
c Var 'aux1848' order represents '2' with '7749'
-7747 7749 0
c Var 'aux1848' direct represents '2' with '7750'
7747 -7749 7750 0
-7750 7749 0
-7750 -7747 0
c Var 'aux1848' order represents '3' with '7751'
-7749 7751 0
c Var 'aux1848' direct represents '3' with '7752'
7749 -7751 7752 0
-7752 7751 0
-7752 -7749 0
c Var 'aux1848' direct represents '4' with '-7751'
7746 7748 7750 7752 -7751 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7753'
c Var 'aux1849' direct represents '0' with '7753'
c Var 'aux1849' order represents '1' with '7754'
-7753 7754 0
c Var 'aux1849' direct represents '1' with '7755'
7753 -7754 7755 0
-7755 7754 0
-7755 -7753 0
c Var 'aux1849' direct represents '2' with '-7754'
7753 7755 -7754 0
c Encoding variable: aux1850 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7756'
c Var 'aux1850' direct represents '0' with '7756'
c Var 'aux1850' order represents '1' with '7757'
-7756 7757 0
c Var 'aux1850' direct represents '1' with '7758'
7756 -7757 7758 0
-7758 7757 0
-7758 -7756 0
c Var 'aux1850' direct represents '2' with '-7757'
7756 7758 -7757 0
c Encoding variable: aux1851 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7759'
c Var 'aux1851' direct represents '0' with '7759'
c Var 'aux1851' order represents '1' with '7760'
-7759 7760 0
c Var 'aux1851' direct represents '1' with '7761'
7759 -7760 7761 0
-7761 7760 0
-7761 -7759 0
c Var 'aux1851' direct represents '2' with '-7760'
7759 7761 -7760 0
c Encoding variable: aux1852 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7762'
c Var 'aux1852' direct represents '0' with '7762'
c Var 'aux1852' order represents '1' with '7763'
-7762 7763 0
c Var 'aux1852' direct represents '1' with '7764'
7762 -7763 7764 0
-7764 7763 0
-7764 -7762 0
c Var 'aux1852' direct represents '2' with '-7763'
7762 7764 -7763 0
c Encoding variable: aux1853 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1852))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7765'
c Var 'aux1853' direct represents '0' with '7765'
c Var 'aux1853' order represents '1' with '7766'
-7765 7766 0
c Var 'aux1853' direct represents '1' with '7767'
7765 -7766 7767 0
-7767 7766 0
-7767 -7765 0
c Var 'aux1853' order represents '2' with '7768'
-7766 7768 0
c Var 'aux1853' direct represents '2' with '7769'
7766 -7768 7769 0
-7769 7768 0
-7769 -7766 0
c Var 'aux1853' direct represents '3' with '-7768'
7765 7767 7769 -7768 0
c Encoding variable: aux1854 with domain: int(0..4) (representing constraint (aux1849 + aux1851))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7770'
c Var 'aux1854' direct represents '0' with '7770'
c Var 'aux1854' order represents '1' with '7771'
-7770 7771 0
c Var 'aux1854' direct represents '1' with '7772'
7770 -7771 7772 0
-7772 7771 0
-7772 -7770 0
c Var 'aux1854' order represents '2' with '7773'
-7771 7773 0
c Var 'aux1854' direct represents '2' with '7774'
7771 -7773 7774 0
-7774 7773 0
-7774 -7771 0
c Var 'aux1854' order represents '3' with '7775'
-7773 7775 0
c Var 'aux1854' direct represents '3' with '7776'
7773 -7775 7776 0
-7776 7775 0
-7776 -7773 0
c Var 'aux1854' direct represents '4' with '-7775'
7770 7772 7774 7776 -7775 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7777'
c Var 'aux1855' direct represents '0' with '7777'
c Var 'aux1855' order represents '1' with '7778'
-7777 7778 0
c Var 'aux1855' direct represents '1' with '7779'
7777 -7778 7779 0
-7779 7778 0
-7779 -7777 0
c Var 'aux1855' direct represents '2' with '-7778'
7777 7779 -7778 0
c Encoding variable: aux1856 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7780'
c Var 'aux1856' direct represents '0' with '7780'
c Var 'aux1856' order represents '1' with '7781'
-7780 7781 0
c Var 'aux1856' direct represents '1' with '7782'
7780 -7781 7782 0
-7782 7781 0
-7782 -7780 0
c Var 'aux1856' direct represents '2' with '-7781'
7780 7782 -7781 0
c Encoding variable: aux1857 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7783'
c Var 'aux1857' direct represents '0' with '7783'
c Var 'aux1857' order represents '1' with '7784'
-7783 7784 0
c Var 'aux1857' direct represents '1' with '7785'
7783 -7784 7785 0
-7785 7784 0
-7785 -7783 0
c Var 'aux1857' direct represents '2' with '-7784'
7783 7785 -7784 0
c Encoding variable: aux1858 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7786'
c Var 'aux1858' direct represents '0' with '7786'
c Var 'aux1858' order represents '1' with '7787'
-7786 7787 0
c Var 'aux1858' direct represents '1' with '7788'
7786 -7787 7788 0
-7788 7787 0
-7788 -7786 0
c Var 'aux1858' direct represents '2' with '-7787'
7786 7788 -7787 0
c Encoding variable: aux1859 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1858))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7789'
c Var 'aux1859' direct represents '0' with '7789'
c Var 'aux1859' order represents '1' with '7790'
-7789 7790 0
c Var 'aux1859' direct represents '1' with '7791'
7789 -7790 7791 0
-7791 7790 0
-7791 -7789 0
c Var 'aux1859' order represents '2' with '7792'
-7790 7792 0
c Var 'aux1859' direct represents '2' with '7793'
7790 -7792 7793 0
-7793 7792 0
-7793 -7790 0
c Var 'aux1859' direct represents '3' with '-7792'
7789 7791 7793 -7792 0
c Encoding variable: aux1860 with domain: int(0..4) (representing constraint (aux1855 + aux1857))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7794'
c Var 'aux1860' direct represents '0' with '7794'
c Var 'aux1860' order represents '1' with '7795'
-7794 7795 0
c Var 'aux1860' direct represents '1' with '7796'
7794 -7795 7796 0
-7796 7795 0
-7796 -7794 0
c Var 'aux1860' order represents '2' with '7797'
-7795 7797 0
c Var 'aux1860' direct represents '2' with '7798'
7795 -7797 7798 0
-7798 7797 0
-7798 -7795 0
c Var 'aux1860' order represents '3' with '7799'
-7797 7799 0
c Var 'aux1860' direct represents '3' with '7800'
7797 -7799 7800 0
-7800 7799 0
-7800 -7797 0
c Var 'aux1860' direct represents '4' with '-7799'
7794 7796 7798 7800 -7799 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7801'
c Var 'aux1861' direct represents '0' with '7801'
c Var 'aux1861' order represents '1' with '7802'
-7801 7802 0
c Var 'aux1861' direct represents '1' with '7803'
7801 -7802 7803 0
-7803 7802 0
-7803 -7801 0
c Var 'aux1861' direct represents '2' with '-7802'
7801 7803 -7802 0
c Encoding variable: aux1862 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7804'
c Var 'aux1862' direct represents '0' with '7804'
c Var 'aux1862' order represents '1' with '7805'
-7804 7805 0
c Var 'aux1862' direct represents '1' with '7806'
7804 -7805 7806 0
-7806 7805 0
-7806 -7804 0
c Var 'aux1862' direct represents '2' with '-7805'
7804 7806 -7805 0
c Encoding variable: aux1863 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7807'
c Var 'aux1863' direct represents '0' with '7807'
c Var 'aux1863' order represents '1' with '7808'
-7807 7808 0
c Var 'aux1863' direct represents '1' with '7809'
7807 -7808 7809 0
-7809 7808 0
-7809 -7807 0
c Var 'aux1863' direct represents '2' with '-7808'
7807 7809 -7808 0
c Encoding variable: aux1864 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7810'
c Var 'aux1864' direct represents '0' with '7810'
c Var 'aux1864' order represents '1' with '7811'
-7810 7811 0
c Var 'aux1864' direct represents '1' with '7812'
7810 -7811 7812 0
-7812 7811 0
-7812 -7810 0
c Var 'aux1864' direct represents '2' with '-7811'
7810 7812 -7811 0
c Encoding variable: aux1865 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1864))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7813'
c Var 'aux1865' direct represents '0' with '7813'
c Var 'aux1865' order represents '1' with '7814'
-7813 7814 0
c Var 'aux1865' direct represents '1' with '7815'
7813 -7814 7815 0
-7815 7814 0
-7815 -7813 0
c Var 'aux1865' order represents '2' with '7816'
-7814 7816 0
c Var 'aux1865' direct represents '2' with '7817'
7814 -7816 7817 0
-7817 7816 0
-7817 -7814 0
c Var 'aux1865' direct represents '3' with '-7816'
7813 7815 7817 -7816 0
c Encoding variable: aux1866 with domain: int(0..4) (representing constraint (aux1861 + aux1863))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7818'
c Var 'aux1866' direct represents '0' with '7818'
c Var 'aux1866' order represents '1' with '7819'
-7818 7819 0
c Var 'aux1866' direct represents '1' with '7820'
7818 -7819 7820 0
-7820 7819 0
-7820 -7818 0
c Var 'aux1866' order represents '2' with '7821'
-7819 7821 0
c Var 'aux1866' direct represents '2' with '7822'
7819 -7821 7822 0
-7822 7821 0
-7822 -7819 0
c Var 'aux1866' order represents '3' with '7823'
-7821 7823 0
c Var 'aux1866' direct represents '3' with '7824'
7821 -7823 7824 0
-7824 7823 0
-7824 -7821 0
c Var 'aux1866' direct represents '4' with '-7823'
7818 7820 7822 7824 -7823 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7825'
c Var 'aux1867' direct represents '0' with '7825'
c Var 'aux1867' order represents '1' with '7826'
-7825 7826 0
c Var 'aux1867' direct represents '1' with '7827'
7825 -7826 7827 0
-7827 7826 0
-7827 -7825 0
c Var 'aux1867' direct represents '2' with '-7826'
7825 7827 -7826 0
c Encoding variable: aux1868 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7828'
c Var 'aux1868' direct represents '0' with '7828'
c Var 'aux1868' order represents '1' with '7829'
-7828 7829 0
c Var 'aux1868' direct represents '1' with '7830'
7828 -7829 7830 0
-7830 7829 0
-7830 -7828 0
c Var 'aux1868' direct represents '2' with '-7829'
7828 7830 -7829 0
c Encoding variable: aux1869 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7831'
c Var 'aux1869' direct represents '0' with '7831'
c Var 'aux1869' order represents '1' with '7832'
-7831 7832 0
c Var 'aux1869' direct represents '1' with '7833'
7831 -7832 7833 0
-7833 7832 0
-7833 -7831 0
c Var 'aux1869' direct represents '2' with '-7832'
7831 7833 -7832 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7834'
c Var 'aux1870' direct represents '0' with '7834'
c Var 'aux1870' order represents '1' with '7835'
-7834 7835 0
c Var 'aux1870' direct represents '1' with '7836'
7834 -7835 7836 0
-7836 7835 0
-7836 -7834 0
c Var 'aux1870' direct represents '2' with '-7835'
7834 7836 -7835 0
c Encoding variable: aux1871 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1870))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7837'
c Var 'aux1871' direct represents '0' with '7837'
c Var 'aux1871' order represents '1' with '7838'
-7837 7838 0
c Var 'aux1871' direct represents '1' with '7839'
7837 -7838 7839 0
-7839 7838 0
-7839 -7837 0
c Var 'aux1871' order represents '2' with '7840'
-7838 7840 0
c Var 'aux1871' direct represents '2' with '7841'
7838 -7840 7841 0
-7841 7840 0
-7841 -7838 0
c Var 'aux1871' direct represents '3' with '-7840'
7837 7839 7841 -7840 0
c Encoding variable: aux1872 with domain: int(0..4) (representing constraint (aux1867 + aux1869))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7842'
c Var 'aux1872' direct represents '0' with '7842'
c Var 'aux1872' order represents '1' with '7843'
-7842 7843 0
c Var 'aux1872' direct represents '1' with '7844'
7842 -7843 7844 0
-7844 7843 0
-7844 -7842 0
c Var 'aux1872' order represents '2' with '7845'
-7843 7845 0
c Var 'aux1872' direct represents '2' with '7846'
7843 -7845 7846 0
-7846 7845 0
-7846 -7843 0
c Var 'aux1872' order represents '3' with '7847'
-7845 7847 0
c Var 'aux1872' direct represents '3' with '7848'
7845 -7847 7848 0
-7848 7847 0
-7848 -7845 0
c Var 'aux1872' direct represents '4' with '-7847'
7842 7844 7846 7848 -7847 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7849'
c Var 'aux1873' direct represents '0' with '7849'
c Var 'aux1873' order represents '1' with '7850'
-7849 7850 0
c Var 'aux1873' direct represents '1' with '7851'
7849 -7850 7851 0
-7851 7850 0
-7851 -7849 0
c Var 'aux1873' direct represents '2' with '-7850'
7849 7851 -7850 0
c Encoding variable: aux1874 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7852'
c Var 'aux1874' direct represents '0' with '7852'
c Var 'aux1874' order represents '1' with '7853'
-7852 7853 0
c Var 'aux1874' direct represents '1' with '7854'
7852 -7853 7854 0
-7854 7853 0
-7854 -7852 0
c Var 'aux1874' direct represents '2' with '-7853'
7852 7854 -7853 0
c Encoding variable: aux1875 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7855'
c Var 'aux1875' direct represents '0' with '7855'
c Var 'aux1875' order represents '1' with '7856'
-7855 7856 0
c Var 'aux1875' direct represents '1' with '7857'
7855 -7856 7857 0
-7857 7856 0
-7857 -7855 0
c Var 'aux1875' direct represents '2' with '-7856'
7855 7857 -7856 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7858'
c Var 'aux1876' direct represents '0' with '7858'
c Var 'aux1876' order represents '1' with '7859'
-7858 7859 0
c Var 'aux1876' direct represents '1' with '7860'
7858 -7859 7860 0
-7860 7859 0
-7860 -7858 0
c Var 'aux1876' direct represents '2' with '-7859'
7858 7860 -7859 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7861'
c Var 'aux1877' direct represents '0' with '7861'
c Var 'aux1877' order represents '1' with '7862'
-7861 7862 0
c Var 'aux1877' direct represents '1' with '7863'
7861 -7862 7863 0
-7863 7862 0
-7863 -7861 0
c Var 'aux1877' direct represents '2' with '-7862'
7861 7863 -7862 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7864'
c Var 'aux1878' direct represents '0' with '7864'
c Var 'aux1878' order represents '1' with '7865'
-7864 7865 0
c Var 'aux1878' direct represents '1' with '7866'
7864 -7865 7866 0
-7866 7865 0
-7866 -7864 0
c Var 'aux1878' direct represents '2' with '-7865'
7864 7866 -7865 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7867'
c Var 'aux1879' direct represents '0' with '7867'
c Var 'aux1879' order represents '1' with '7868'
-7867 7868 0
c Var 'aux1879' direct represents '1' with '7869'
7867 -7868 7869 0
-7869 7868 0
-7869 -7867 0
c Var 'aux1879' direct represents '2' with '-7868'
7867 7869 -7868 0
c Encoding variable: aux1880 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7870'
c Var 'aux1880' direct represents '0' with '7870'
c Var 'aux1880' order represents '1' with '7871'
-7870 7871 0
c Var 'aux1880' direct represents '1' with '7872'
7870 -7871 7872 0
-7872 7871 0
-7872 -7870 0
c Var 'aux1880' direct represents '2' with '-7871'
7870 7872 -7871 0
c Encoding variable: aux1881 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7873'
c Var 'aux1881' direct represents '0' with '7873'
c Var 'aux1881' order represents '1' with '7874'
-7873 7874 0
c Var 'aux1881' direct represents '1' with '7875'
7873 -7874 7875 0
-7875 7874 0
-7875 -7873 0
c Var 'aux1881' direct represents '2' with '-7874'
7873 7875 -7874 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7876'
c Var 'aux1882' direct represents '0' with '7876'
c Var 'aux1882' order represents '1' with '7877'
-7876 7877 0
c Var 'aux1882' direct represents '1' with '7878'
7876 -7877 7878 0
-7878 7877 0
-7878 -7876 0
c Var 'aux1882' direct represents '2' with '-7877'
7876 7878 -7877 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7879'
c Var 'aux1883' direct represents '0' with '7879'
c Var 'aux1883' order represents '1' with '7880'
-7879 7880 0
c Var 'aux1883' direct represents '1' with '7881'
7879 -7880 7881 0
-7881 7880 0
-7881 -7879 0
c Var 'aux1883' direct represents '2' with '-7880'
7879 7881 -7880 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7882'
c Var 'aux1884' direct represents '0' with '7882'
c Var 'aux1884' order represents '1' with '7883'
-7882 7883 0
c Var 'aux1884' direct represents '1' with '7884'
7882 -7883 7884 0
-7884 7883 0
-7884 -7882 0
c Var 'aux1884' direct represents '2' with '-7883'
7882 7884 -7883 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7885'
c Var 'aux1885' direct represents '0' with '7885'
c Var 'aux1885' order represents '1' with '7886'
-7885 7886 0
c Var 'aux1885' direct represents '1' with '7887'
7885 -7886 7887 0
-7887 7886 0
-7887 -7885 0
c Var 'aux1885' direct represents '2' with '-7886'
7885 7887 -7886 0
c Encoding variable: aux1886 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7888'
c Var 'aux1886' direct represents '0' with '7888'
c Var 'aux1886' order represents '1' with '7889'
-7888 7889 0
c Var 'aux1886' direct represents '1' with '7890'
7888 -7889 7890 0
-7890 7889 0
-7890 -7888 0
c Var 'aux1886' direct represents '2' with '-7889'
7888 7890 -7889 0
c Encoding variable: aux1887 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7891'
c Var 'aux1887' direct represents '0' with '7891'
c Var 'aux1887' order represents '1' with '7892'
-7891 7892 0
c Var 'aux1887' direct represents '1' with '7893'
7891 -7892 7893 0
-7893 7892 0
-7893 -7891 0
c Var 'aux1887' direct represents '2' with '-7892'
7891 7893 -7892 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7894'
c Var 'aux1888' direct represents '0' with '7894'
c Var 'aux1888' order represents '1' with '7895'
-7894 7895 0
c Var 'aux1888' direct represents '1' with '7896'
7894 -7895 7896 0
-7896 7895 0
-7896 -7894 0
c Var 'aux1888' direct represents '2' with '-7895'
7894 7896 -7895 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7897'
c Var 'aux1889' direct represents '0' with '7897'
c Var 'aux1889' order represents '1' with '7898'
-7897 7898 0
c Var 'aux1889' direct represents '1' with '7899'
7897 -7898 7899 0
-7899 7898 0
-7899 -7897 0
c Var 'aux1889' direct represents '2' with '-7898'
7897 7899 -7898 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7900'
c Var 'aux1890' direct represents '0' with '7900'
c Var 'aux1890' order represents '1' with '7901'
-7900 7901 0
c Var 'aux1890' direct represents '1' with '7902'
7900 -7901 7902 0
-7902 7901 0
-7902 -7900 0
c Var 'aux1890' direct represents '2' with '-7901'
7900 7902 -7901 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7903'
c Var 'aux1891' direct represents '0' with '7903'
c Var 'aux1891' order represents '1' with '7904'
-7903 7904 0
c Var 'aux1891' direct represents '1' with '7905'
7903 -7904 7905 0
-7905 7904 0
-7905 -7903 0
c Var 'aux1891' direct represents '2' with '-7904'
7903 7905 -7904 0
c Encoding variable: aux1892 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7906'
c Var 'aux1892' direct represents '0' with '7906'
c Var 'aux1892' order represents '1' with '7907'
-7906 7907 0
c Var 'aux1892' direct represents '1' with '7908'
7906 -7907 7908 0
-7908 7907 0
-7908 -7906 0
c Var 'aux1892' direct represents '2' with '-7907'
7906 7908 -7907 0
c Encoding variable: aux1893 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7909'
c Var 'aux1893' direct represents '0' with '7909'
c Var 'aux1893' order represents '1' with '7910'
-7909 7910 0
c Var 'aux1893' direct represents '1' with '7911'
7909 -7910 7911 0
-7911 7910 0
-7911 -7909 0
c Var 'aux1893' direct represents '2' with '-7910'
7909 7911 -7910 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7912'
c Var 'aux1894' direct represents '0' with '7912'
c Var 'aux1894' order represents '1' with '7913'
-7912 7913 0
c Var 'aux1894' direct represents '1' with '7914'
7912 -7913 7914 0
-7914 7913 0
-7914 -7912 0
c Var 'aux1894' direct represents '2' with '-7913'
7912 7914 -7913 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7915'
c Var 'aux1895' direct represents '0' with '7915'
c Var 'aux1895' order represents '1' with '7916'
-7915 7916 0
c Var 'aux1895' direct represents '1' with '7917'
7915 -7916 7917 0
-7917 7916 0
-7917 -7915 0
c Var 'aux1895' direct represents '2' with '-7916'
7915 7917 -7916 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7918'
c Var 'aux1896' direct represents '0' with '7918'
c Var 'aux1896' order represents '1' with '7919'
-7918 7919 0
c Var 'aux1896' direct represents '1' with '7920'
7918 -7919 7920 0
-7920 7919 0
-7920 -7918 0
c Var 'aux1896' direct represents '2' with '-7919'
7918 7920 -7919 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7921'
c Var 'aux1897' direct represents '0' with '7921'
c Var 'aux1897' order represents '1' with '7922'
-7921 7922 0
c Var 'aux1897' direct represents '1' with '7923'
7921 -7922 7923 0
-7923 7922 0
-7923 -7921 0
c Var 'aux1897' direct represents '2' with '-7922'
7921 7923 -7922 0
c Encoding variable: aux1898 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7924'
c Var 'aux1898' direct represents '0' with '7924'
c Var 'aux1898' order represents '1' with '7925'
-7924 7925 0
c Var 'aux1898' direct represents '1' with '7926'
7924 -7925 7926 0
-7926 7925 0
-7926 -7924 0
c Var 'aux1898' direct represents '2' with '-7925'
7924 7926 -7925 0
c Encoding variable: aux1899 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7927'
c Var 'aux1899' direct represents '0' with '7927'
c Var 'aux1899' order represents '1' with '7928'
-7927 7928 0
c Var 'aux1899' direct represents '1' with '7929'
7927 -7928 7929 0
-7929 7928 0
-7929 -7927 0
c Var 'aux1899' direct represents '2' with '-7928'
7927 7929 -7928 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7930'
c Var 'aux1900' direct represents '0' with '7930'
c Var 'aux1900' order represents '1' with '7931'
-7930 7931 0
c Var 'aux1900' direct represents '1' with '7932'
7930 -7931 7932 0
-7932 7931 0
-7932 -7930 0
c Var 'aux1900' direct represents '2' with '-7931'
7930 7932 -7931 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7933'
c Var 'aux1901' direct represents '0' with '7933'
c Var 'aux1901' order represents '1' with '7934'
-7933 7934 0
c Var 'aux1901' direct represents '1' with '7935'
7933 -7934 7935 0
-7935 7934 0
-7935 -7933 0
c Var 'aux1901' direct represents '2' with '-7934'
7933 7935 -7934 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7936'
c Var 'aux1902' direct represents '0' with '7936'
c Var 'aux1902' order represents '1' with '7937'
-7936 7937 0
c Var 'aux1902' direct represents '1' with '7938'
7936 -7937 7938 0
-7938 7937 0
-7938 -7936 0
c Var 'aux1902' direct represents '2' with '-7937'
7936 7938 -7937 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7939'
c Var 'aux1903' direct represents '0' with '7939'
c Var 'aux1903' order represents '1' with '7940'
-7939 7940 0
c Var 'aux1903' direct represents '1' with '7941'
7939 -7940 7941 0
-7941 7940 0
-7941 -7939 0
c Var 'aux1903' direct represents '2' with '-7940'
7939 7941 -7940 0
c Encoding variable: aux1904 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7942'
c Var 'aux1904' direct represents '0' with '7942'
c Var 'aux1904' order represents '1' with '7943'
-7942 7943 0
c Var 'aux1904' direct represents '1' with '7944'
7942 -7943 7944 0
-7944 7943 0
-7944 -7942 0
c Var 'aux1904' direct represents '2' with '-7943'
7942 7944 -7943 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7945'
c Var 'aux1905' direct represents '0' with '7945'
c Var 'aux1905' order represents '1' with '7946'
-7945 7946 0
c Var 'aux1905' direct represents '1' with '7947'
7945 -7946 7947 0
-7947 7946 0
-7947 -7945 0
c Var 'aux1905' direct represents '2' with '-7946'
7945 7947 -7946 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7948'
c Var 'aux1906' direct represents '0' with '7948'
c Var 'aux1906' order represents '1' with '7949'
-7948 7949 0
c Var 'aux1906' direct represents '1' with '7950'
7948 -7949 7950 0
-7950 7949 0
-7950 -7948 0
c Var 'aux1906' direct represents '2' with '-7949'
7948 7950 -7949 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7951'
c Var 'aux1907' direct represents '0' with '7951'
c Var 'aux1907' order represents '1' with '7952'
-7951 7952 0
c Var 'aux1907' direct represents '1' with '7953'
7951 -7952 7953 0
-7953 7952 0
-7953 -7951 0
c Var 'aux1907' direct represents '2' with '-7952'
7951 7953 -7952 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7954'
c Var 'aux1908' direct represents '0' with '7954'
c Var 'aux1908' order represents '1' with '7955'
-7954 7955 0
c Var 'aux1908' direct represents '1' with '7956'
7954 -7955 7956 0
-7956 7955 0
-7956 -7954 0
c Var 'aux1908' direct represents '2' with '-7955'
7954 7956 -7955 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7957'
c Var 'aux1909' direct represents '0' with '7957'
c Var 'aux1909' order represents '1' with '7958'
-7957 7958 0
c Var 'aux1909' direct represents '1' with '7959'
7957 -7958 7959 0
-7959 7958 0
-7959 -7957 0
c Var 'aux1909' direct represents '2' with '-7958'
7957 7959 -7958 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7960'
c Var 'aux1910' direct represents '0' with '7960'
c Var 'aux1910' order represents '1' with '7961'
-7960 7961 0
c Var 'aux1910' direct represents '1' with '7962'
7960 -7961 7962 0
-7962 7961 0
-7962 -7960 0
c Var 'aux1910' direct represents '2' with '-7961'
7960 7962 -7961 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7963'
c Var 'aux1911' direct represents '0' with '7963'
c Var 'aux1911' order represents '1' with '7964'
-7963 7964 0
c Var 'aux1911' direct represents '1' with '7965'
7963 -7964 7965 0
-7965 7964 0
-7965 -7963 0
c Var 'aux1911' direct represents '2' with '-7964'
7963 7965 -7964 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7966'
c Var 'aux1912' direct represents '0' with '7966'
c Var 'aux1912' order represents '1' with '7967'
-7966 7967 0
c Var 'aux1912' direct represents '1' with '7968'
7966 -7967 7968 0
-7968 7967 0
-7968 -7966 0
c Var 'aux1912' direct represents '2' with '-7967'
7966 7968 -7967 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7969'
c Var 'aux1913' direct represents '0' with '7969'
c Var 'aux1913' order represents '1' with '7970'
-7969 7970 0
c Var 'aux1913' direct represents '1' with '7971'
7969 -7970 7971 0
-7971 7970 0
-7971 -7969 0
c Var 'aux1913' direct represents '2' with '-7970'
7969 7971 -7970 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7972'
c Var 'aux1914' direct represents '0' with '7972'
c Var 'aux1914' order represents '1' with '7973'
-7972 7973 0
c Var 'aux1914' direct represents '1' with '7974'
7972 -7973 7974 0
-7974 7973 0
-7974 -7972 0
c Var 'aux1914' direct represents '2' with '-7973'
7972 7974 -7973 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7975'
c Var 'aux1915' direct represents '0' with '7975'
c Var 'aux1915' order represents '1' with '7976'
-7975 7976 0
c Var 'aux1915' direct represents '1' with '7977'
7975 -7976 7977 0
-7977 7976 0
-7977 -7975 0
c Var 'aux1915' direct represents '2' with '-7976'
7975 7977 -7976 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7978'
c Var 'aux1916' direct represents '0' with '7978'
c Var 'aux1916' order represents '1' with '7979'
-7978 7979 0
c Var 'aux1916' direct represents '1' with '7980'
7978 -7979 7980 0
-7980 7979 0
-7980 -7978 0
c Var 'aux1916' direct represents '2' with '-7979'
7978 7980 -7979 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7981'
c Var 'aux1917' direct represents '0' with '7981'
c Var 'aux1917' order represents '1' with '7982'
-7981 7982 0
c Var 'aux1917' direct represents '1' with '7983'
7981 -7982 7983 0
-7983 7982 0
-7983 -7981 0
c Var 'aux1917' direct represents '2' with '-7982'
7981 7983 -7982 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7984'
c Var 'aux1918' direct represents '0' with '7984'
c Var 'aux1918' order represents '1' with '7985'
-7984 7985 0
c Var 'aux1918' direct represents '1' with '7986'
7984 -7985 7986 0
-7986 7985 0
-7986 -7984 0
c Var 'aux1918' direct represents '2' with '-7985'
7984 7986 -7985 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00003_00007=1)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7987'
c Var 'aux1919' direct represents '0' with '7987'
c Var 'aux1919' order represents '1' with '7988'
-7987 7988 0
c Var 'aux1919' direct represents '1' with '7989'
7987 -7988 7989 0
-7989 7988 0
-7989 -7987 0
c Var 'aux1919' direct represents '2' with '-7988'
7987 7989 -7988 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7990'
c Var 'aux1920' direct represents '0' with '7990'
c Var 'aux1920' order represents '1' with '7991'
-7990 7991 0
c Var 'aux1920' direct represents '1' with '7992'
7990 -7991 7992 0
-7992 7991 0
-7992 -7990 0
c Var 'aux1920' direct represents '2' with '-7991'
7990 7992 -7991 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7993'
c Var 'aux1921' direct represents '0' with '7993'
c Var 'aux1921' order represents '1' with '7994'
-7993 7994 0
c Var 'aux1921' direct represents '1' with '7995'
7993 -7994 7995 0
-7995 7994 0
-7995 -7993 0
c Var 'aux1921' direct represents '2' with '-7994'
7993 7995 -7994 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00003_00007=2)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7996'
c Var 'aux1922' direct represents '0' with '7996'
c Var 'aux1922' order represents '1' with '7997'
-7996 7997 0
c Var 'aux1922' direct represents '1' with '7998'
7996 -7997 7998 0
-7998 7997 0
-7998 -7996 0
c Var 'aux1922' direct represents '2' with '-7997'
7996 7998 -7997 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7999'
c Var 'aux1923' direct represents '0' with '7999'
c Var 'aux1923' order represents '1' with '8000'
-7999 8000 0
c Var 'aux1923' direct represents '1' with '8001'
7999 -8000 8001 0
-8001 8000 0
-8001 -7999 0
c Var 'aux1923' direct represents '2' with '-8000'
7999 8001 -8000 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '8002'
c Var 'aux1924' direct represents '0' with '8002'
c Var 'aux1924' order represents '1' with '8003'
-8002 8003 0
c Var 'aux1924' direct represents '1' with '8004'
8002 -8003 8004 0
-8004 8003 0
-8004 -8002 0
c Var 'aux1924' direct represents '2' with '-8003'
8002 8004 -8003 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00003_00007=3)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '8005'
c Var 'aux1925' direct represents '0' with '8005'
c Var 'aux1925' order represents '1' with '8006'
-8005 8006 0
c Var 'aux1925' direct represents '1' with '8007'
8005 -8006 8007 0
-8007 8006 0
-8007 -8005 0
c Var 'aux1925' direct represents '2' with '-8006'
8005 8007 -8006 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '8008'
c Var 'aux1926' direct represents '0' with '8008'
c Var 'aux1926' order represents '1' with '8009'
-8008 8009 0
c Var 'aux1926' direct represents '1' with '8010'
8008 -8009 8010 0
-8010 8009 0
-8010 -8008 0
c Var 'aux1926' direct represents '2' with '-8009'
8008 8010 -8009 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '8011'
c Var 'aux1927' direct represents '0' with '8011'
c Var 'aux1927' order represents '1' with '8012'
-8011 8012 0
c Var 'aux1927' direct represents '1' with '8013'
8011 -8012 8013 0
-8013 8012 0
-8013 -8011 0
c Var 'aux1927' direct represents '2' with '-8012'
8011 8013 -8012 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00003_00007=4)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '8014'
c Var 'aux1928' direct represents '0' with '8014'
c Var 'aux1928' order represents '1' with '8015'
-8014 8015 0
c Var 'aux1928' direct represents '1' with '8016'
8014 -8015 8016 0
-8016 8015 0
-8016 -8014 0
c Var 'aux1928' direct represents '2' with '-8015'
8014 8016 -8015 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '8017'
c Var 'aux1929' direct represents '0' with '8017'
c Var 'aux1929' order represents '1' with '8018'
-8017 8018 0
c Var 'aux1929' direct represents '1' with '8019'
8017 -8018 8019 0
-8019 8018 0
-8019 -8017 0
c Var 'aux1929' direct represents '2' with '-8018'
8017 8019 -8018 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '8020'
c Var 'aux1930' direct represents '0' with '8020'
c Var 'aux1930' order represents '1' with '8021'
-8020 8021 0
c Var 'aux1930' direct represents '1' with '8022'
8020 -8021 8022 0
-8022 8021 0
-8022 -8020 0
c Var 'aux1930' direct represents '2' with '-8021'
8020 8022 -8021 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00003_00007=5)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '8023'
c Var 'aux1931' direct represents '0' with '8023'
c Var 'aux1931' order represents '1' with '8024'
-8023 8024 0
c Var 'aux1931' direct represents '1' with '8025'
8023 -8024 8025 0
-8025 8024 0
-8025 -8023 0
c Var 'aux1931' direct represents '2' with '-8024'
8023 8025 -8024 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '8026'
c Var 'aux1932' direct represents '0' with '8026'
c Var 'aux1932' order represents '1' with '8027'
-8026 8027 0
c Var 'aux1932' direct represents '1' with '8028'
8026 -8027 8028 0
-8028 8027 0
-8028 -8026 0
c Var 'aux1932' direct represents '2' with '-8027'
8026 8028 -8027 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '8029'
c Var 'aux1933' direct represents '0' with '8029'
c Var 'aux1933' order represents '1' with '8030'
-8029 8030 0
c Var 'aux1933' direct represents '1' with '8031'
8029 -8030 8031 0
-8031 8030 0
-8031 -8029 0
c Var 'aux1933' direct represents '2' with '-8030'
8029 8031 -8030 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00003_00007=6)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '8032'
c Var 'aux1934' direct represents '0' with '8032'
c Var 'aux1934' order represents '1' with '8033'
-8032 8033 0
c Var 'aux1934' direct represents '1' with '8034'
8032 -8033 8034 0
-8034 8033 0
-8034 -8032 0
c Var 'aux1934' direct represents '2' with '-8033'
8032 8034 -8033 0
c Encoding variable: aux1935 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '8035'
c Var 'aux1935' direct represents '0' with '8035'
c Var 'aux1935' order represents '1' with '8036'
-8035 8036 0
c Var 'aux1935' direct represents '1' with '8037'
8035 -8036 8037 0
-8037 8036 0
-8037 -8035 0
c Var 'aux1935' direct represents '2' with '-8036'
8035 8037 -8036 0
c Encoding variable: aux1936 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '8038'
c Var 'aux1936' direct represents '0' with '8038'
c Var 'aux1936' order represents '1' with '8039'
-8038 8039 0
c Var 'aux1936' direct represents '1' with '8040'
8038 -8039 8040 0
-8040 8039 0
-8040 -8038 0
c Var 'aux1936' direct represents '2' with '-8039'
8038 8040 -8039 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00003_00007=7)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '8041'
c Var 'aux1937' direct represents '0' with '8041'
c Var 'aux1937' order represents '1' with '8042'
-8041 8042 0
c Var 'aux1937' direct represents '1' with '8043'
8041 -8042 8043 0
-8043 8042 0
-8043 -8041 0
c Var 'aux1937' direct represents '2' with '-8042'
8041 8043 -8042 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '8044'
c Var 'aux1938' direct represents '0' with '8044'
c Var 'aux1938' order represents '1' with '8045'
-8044 8045 0
c Var 'aux1938' direct represents '1' with '8046'
8044 -8045 8046 0
-8046 8045 0
-8046 -8044 0
c Var 'aux1938' direct represents '2' with '-8045'
8044 8046 -8045 0
c Encoding variable: aux1939 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '8047'
c Var 'aux1939' direct represents '0' with '8047'
c Var 'aux1939' order represents '1' with '8048'
-8047 8048 0
c Var 'aux1939' direct represents '1' with '8049'
8047 -8048 8049 0
-8049 8048 0
-8049 -8047 0
c Var 'aux1939' direct represents '2' with '-8048'
8047 8049 -8048 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00003_00007=8)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '8050'
c Var 'aux1940' direct represents '0' with '8050'
c Var 'aux1940' order represents '1' with '8051'
-8050 8051 0
c Var 'aux1940' direct represents '1' with '8052'
8050 -8051 8052 0
-8052 8051 0
-8052 -8050 0
c Var 'aux1940' direct represents '2' with '-8051'
8050 8052 -8051 0
c Encoding variable: aux1941 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '8053'
c Var 'aux1941' direct represents '0' with '8053'
c Var 'aux1941' order represents '1' with '8054'
-8053 8054 0
c Var 'aux1941' direct represents '1' with '8055'
8053 -8054 8055 0
-8055 8054 0
-8055 -8053 0
c Var 'aux1941' direct represents '2' with '-8054'
8053 8055 -8054 0
c Encoding variable: aux1942 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '8056'
c Var 'aux1942' direct represents '0' with '8056'
c Var 'aux1942' order represents '1' with '8057'
-8056 8057 0
c Var 'aux1942' direct represents '1' with '8058'
8056 -8057 8058 0
-8058 8057 0
-8058 -8056 0
c Var 'aux1942' direct represents '2' with '-8057'
8056 8058 -8057 0
c Encoding variable: aux1943 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00003_00007=9)))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '8059'
c Var 'aux1943' direct represents '0' with '8059'
c Var 'aux1943' order represents '1' with '8060'
-8059 8060 0
c Var 'aux1943' direct represents '1' with '8061'
8059 -8060 8061 0
-8061 8060 0
-8061 -8059 0
c Var 'aux1943' direct represents '2' with '-8060'
8059 8061 -8060 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '8062'
c Var 'aux1944' direct represents '0' with '8062'
c Var 'aux1944' order represents '1' with '8063'
-8062 8063 0
c Var 'aux1944' direct represents '1' with '8064'
8062 -8063 8064 0
-8064 8063 0
-8064 -8062 0
c Var 'aux1944' direct represents '2' with '-8063'
8062 8064 -8063 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '8065'
c Var 'aux1945' direct represents '0' with '8065'
c Var 'aux1945' order represents '1' with '8066'
-8065 8066 0
c Var 'aux1945' direct represents '1' with '8067'
8065 -8066 8067 0
-8067 8066 0
-8067 -8065 0
c Var 'aux1945' direct represents '2' with '-8066'
8065 8067 -8066 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '8068'
c Var 'aux1946' direct represents '0' with '8068'
c Var 'aux1946' order represents '1' with '8069'
-8068 8069 0
c Var 'aux1946' direct represents '1' with '8070'
8068 -8069 8070 0
-8070 8069 0
-8070 -8068 0
c Var 'aux1946' direct represents '2' with '-8069'
8068 8070 -8069 0
c Encoding variable: aux1947 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '8071'
c Var 'aux1947' direct represents '0' with '8071'
c Var 'aux1947' order represents '1' with '8072'
-8071 8072 0
c Var 'aux1947' direct represents '1' with '8073'
8071 -8072 8073 0
-8073 8072 0
-8073 -8071 0
c Var 'aux1947' direct represents '2' with '-8072'
8071 8073 -8072 0
c Encoding variable: aux1948 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '8074'
c Var 'aux1948' direct represents '0' with '8074'
c Var 'aux1948' order represents '1' with '8075'
-8074 8075 0
c Var 'aux1948' direct represents '1' with '8076'
8074 -8075 8076 0
-8076 8075 0
-8076 -8074 0
c Var 'aux1948' direct represents '2' with '-8075'
8074 8076 -8075 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '8077'
c Var 'aux1949' direct represents '0' with '8077'
c Var 'aux1949' order represents '1' with '8078'
-8077 8078 0
c Var 'aux1949' direct represents '1' with '8079'
8077 -8078 8079 0
-8079 8078 0
-8079 -8077 0
c Var 'aux1949' direct represents '2' with '-8078'
8077 8079 -8078 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '8080'
c Var 'aux1950' direct represents '0' with '8080'
c Var 'aux1950' order represents '1' with '8081'
-8080 8081 0
c Var 'aux1950' direct represents '1' with '8082'
8080 -8081 8082 0
-8082 8081 0
-8082 -8080 0
c Var 'aux1950' direct represents '2' with '-8081'
8080 8082 -8081 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '8083'
c Var 'aux1951' direct represents '0' with '8083'
c Var 'aux1951' order represents '1' with '8084'
-8083 8084 0
c Var 'aux1951' direct represents '1' with '8085'
8083 -8084 8085 0
-8085 8084 0
-8085 -8083 0
c Var 'aux1951' direct represents '2' with '-8084'
8083 8085 -8084 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '8086'
c Var 'aux1952' direct represents '0' with '8086'
c Var 'aux1952' order represents '1' with '8087'
-8086 8087 0
c Var 'aux1952' direct represents '1' with '8088'
8086 -8087 8088 0
-8088 8087 0
-8088 -8086 0
c Var 'aux1952' direct represents '2' with '-8087'
8086 8088 -8087 0
c Encoding variable: aux1953 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '8089'
c Var 'aux1953' direct represents '0' with '8089'
c Var 'aux1953' order represents '1' with '8090'
-8089 8090 0
c Var 'aux1953' direct represents '1' with '8091'
8089 -8090 8091 0
-8091 8090 0
-8091 -8089 0
c Var 'aux1953' direct represents '2' with '-8090'
8089 8091 -8090 0
c Encoding variable: aux1954 with domain: int(0..2) (representing constraint ((x_00008_00005=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '8092'
c Var 'aux1954' direct represents '0' with '8092'
c Var 'aux1954' order represents '1' with '8093'
-8092 8093 0
c Var 'aux1954' direct represents '1' with '8094'
8092 -8093 8094 0
-8094 8093 0
-8094 -8092 0
c Var 'aux1954' direct represents '2' with '-8093'
8092 8094 -8093 0
c Encoding variable: aux1955 with domain: int(0..2) (representing constraint ((x_00008_00005=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1955' order represents '0' with '8095'
c Var 'aux1955' direct represents '0' with '8095'
c Var 'aux1955' order represents '1' with '8096'
-8095 8096 0
c Var 'aux1955' direct represents '1' with '8097'
8095 -8096 8097 0
-8097 8096 0
-8097 -8095 0
c Var 'aux1955' direct represents '2' with '-8096'
8095 8097 -8096 0
c Encoding variable: aux1956 with domain: int(0..2) (representing constraint ((x_00008_00005=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1956' order represents '0' with '8098'
c Var 'aux1956' direct represents '0' with '8098'
c Var 'aux1956' order represents '1' with '8099'
-8098 8099 0
c Var 'aux1956' direct represents '1' with '8100'
8098 -8099 8100 0
-8100 8099 0
-8100 -8098 0
c Var 'aux1956' direct represents '2' with '-8099'
8098 8100 -8099 0
c Encoding variable: aux1957 with domain: int(0..2) (representing constraint ((x_00008_00005=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1957' order represents '0' with '8101'
c Var 'aux1957' direct represents '0' with '8101'
c Var 'aux1957' order represents '1' with '8102'
-8101 8102 0
c Var 'aux1957' direct represents '1' with '8103'
8101 -8102 8103 0
-8103 8102 0
-8103 -8101 0
c Var 'aux1957' direct represents '2' with '-8102'
8101 8103 -8102 0
c Encoding variable: aux1958 with domain: int(0..2) (representing constraint ((x_00008_00005=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1958' order represents '0' with '8104'
c Var 'aux1958' direct represents '0' with '8104'
c Var 'aux1958' order represents '1' with '8105'
-8104 8105 0
c Var 'aux1958' direct represents '1' with '8106'
8104 -8105 8106 0
-8106 8105 0
-8106 -8104 0
c Var 'aux1958' direct represents '2' with '-8105'
8104 8106 -8105 0
c Encoding variable: aux1959 with domain: int(0..2) (representing constraint ((x_00008_00005=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1959' order represents '0' with '8107'
c Var 'aux1959' direct represents '0' with '8107'
c Var 'aux1959' order represents '1' with '8108'
-8107 8108 0
c Var 'aux1959' direct represents '1' with '8109'
8107 -8108 8109 0
-8109 8108 0
-8109 -8107 0
c Var 'aux1959' direct represents '2' with '-8108'
8107 8109 -8108 0
c Encoding variable: aux1960 with domain: int(0..2) (representing constraint ((x_00008_00005=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1960' order represents '0' with '8110'
c Var 'aux1960' direct represents '0' with '8110'
c Var 'aux1960' order represents '1' with '8111'
-8110 8111 0
c Var 'aux1960' direct represents '1' with '8112'
8110 -8111 8112 0
-8112 8111 0
-8112 -8110 0
c Var 'aux1960' direct represents '2' with '-8111'
8110 8112 -8111 0
c Encoding variable: aux1961 with domain: int(0..2) (representing constraint ((x_00008_00005=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1961' order represents '0' with '8113'
c Var 'aux1961' direct represents '0' with '8113'
c Var 'aux1961' order represents '1' with '8114'
-8113 8114 0
c Var 'aux1961' direct represents '1' with '8115'
8113 -8114 8115 0
-8115 8114 0
-8115 -8113 0
c Var 'aux1961' direct represents '2' with '-8114'
8113 8115 -8114 0
c Encoding variable: aux1962 with domain: int(0..2) (representing constraint ((x_00008_00005=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1962' order represents '0' with '8116'
c Var 'aux1962' direct represents '0' with '8116'
c Var 'aux1962' order represents '1' with '8117'
-8116 8117 0
c Var 'aux1962' direct represents '1' with '8118'
8116 -8117 8118 0
-8118 8117 0
-8118 -8116 0
c Var 'aux1962' direct represents '2' with '-8117'
8116 8118 -8117 0
c Encoding variable: aux1963 with domain: bool (representing constraint ((x_00002_00001 + x_00001_00001)<=11))
c Var 'aux1963' direct represents '0' with '-8119'
c Var 'aux1963' direct represents '1' with '8119'
c Var 'aux1963' order represents '1' with '1'
c Var 'aux1963' order represents '0' with '-8119'
c Encoding variable: aux1964 with domain: bool (representing constraint (11<=(x_00002_00001 + x_00001_00001)))
c Var 'aux1964' direct represents '0' with '-8120'
c Var 'aux1964' direct represents '1' with '8120'
c Var 'aux1964' order represents '1' with '1'
c Var 'aux1964' order represents '0' with '-8120'
c Encoding variable: aux1965 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003 + x_00001_00002)<=13))
c Var 'aux1965' direct represents '0' with '-8121'
c Var 'aux1965' direct represents '1' with '8121'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-8121'
c Encoding variable: aux1966 with domain: bool (representing constraint (13<=(x_00002_00002 + x_00002_00003 + x_00001_00002)))
c Var 'aux1966' direct represents '0' with '-8122'
c Var 'aux1966' direct represents '1' with '8122'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-8122'
c Encoding variable: aux1967 with domain: bool (representing constraint ((aux405 + shift(x_00001_00003, -1) + shift(x_00002_00005, -1))<=15))
c Var 'aux1967' direct represents '0' with '-8123'
c Var 'aux1967' direct represents '1' with '8123'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-8123'
c Encoding variable: aux1968 with domain: bool (representing constraint (15<=(aux405 + shift(x_00001_00003, -1) + shift(x_00002_00005, -1))))
c Var 'aux1968' direct represents '0' with '-8124'
c Var 'aux1968' direct represents '1' with '8124'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-8124'
c Encoding variable: aux1969 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006 + x_00001_00007)<=17))
c Var 'aux1969' direct represents '0' with '-8125'
c Var 'aux1969' direct represents '1' with '8125'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-8125'
c Encoding variable: aux1970 with domain: bool (representing constraint (17<=(x_00001_00005 + x_00001_00006 + x_00001_00007)))
c Var 'aux1970' direct represents '0' with '-8126'
c Var 'aux1970' direct represents '1' with '8126'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-8126'
c Encoding variable: aux1971 with domain: bool (representing constraint ((aux406 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1))<=17))
c Var 'aux1971' direct represents '0' with '-8127'
c Var 'aux1971' direct represents '1' with '8127'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-8127'
c Encoding variable: aux1972 with domain: bool (representing constraint (17<=(aux406 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1))))
c Var 'aux1972' direct represents '0' with '-8128'
c Var 'aux1972' direct represents '1' with '8128'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-8128'
c Encoding variable: aux1973 with domain: bool (representing constraint ((x_00002_00006 + x_00002_00007)<=9))
c Var 'aux1973' direct represents '0' with '-8129'
c Var 'aux1973' direct represents '1' with '8129'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-8129'
c Encoding variable: aux1974 with domain: bool (representing constraint (9<=(x_00002_00006 + x_00002_00007)))
c Var 'aux1974' direct represents '0' with '-8130'
c Var 'aux1974' direct represents '1' with '8130'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-8130'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002)<=17))
c Var 'aux1975' direct represents '0' with '-8131'
c Var 'aux1975' direct represents '1' with '8131'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-8131'
c Encoding variable: aux1976 with domain: bool (representing constraint (17<=(x_00003_00001 + x_00003_00002)))
c Var 'aux1976' direct represents '0' with '-8132'
c Var 'aux1976' direct represents '1' with '8132'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-8132'
c Encoding variable: aux1977 with domain: bool (representing constraint ((aux407 + aux408 + aux409)<=27))
c Var 'aux1977' direct represents '0' with '-8133'
c Var 'aux1977' direct represents '1' with '8133'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-8133'
c Encoding variable: aux1978 with domain: bool (representing constraint (27<=(aux407 + aux408 + aux409)))
c Var 'aux1978' direct represents '0' with '-8134'
c Var 'aux1978' direct represents '1' with '8134'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-8134'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00003_00004 + x_00003_00005 + x_00004_00004)<=18))
c Var 'aux1979' direct represents '0' with '-8135'
c Var 'aux1979' direct represents '1' with '8135'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-8135'
c Encoding variable: aux1980 with domain: bool (representing constraint (18<=(x_00003_00004 + x_00003_00005 + x_00004_00004)))
c Var 'aux1980' direct represents '0' with '-8136'
c Var 'aux1980' direct represents '1' with '8136'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-8136'
c Encoding variable: aux1981 with domain: bool (representing constraint ((aux410 + aux411 + aux412)<=18))
c Var 'aux1981' direct represents '0' with '-8137'
c Var 'aux1981' direct represents '1' with '8137'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-8137'
c Encoding variable: aux1982 with domain: bool (representing constraint (18<=(aux410 + aux411 + aux412)))
c Var 'aux1982' direct represents '0' with '-8138'
c Var 'aux1982' direct represents '1' with '8138'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-8138'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00003_00008 + x_00003_00009)<=8))
c Var 'aux1983' direct represents '0' with '-8139'
c Var 'aux1983' direct represents '1' with '8139'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-8139'
c Encoding variable: aux1984 with domain: bool (representing constraint (8<=(x_00003_00008 + x_00003_00009)))
c Var 'aux1984' direct represents '0' with '-8140'
c Var 'aux1984' direct represents '1' with '8140'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-8140'
c Encoding variable: aux1985 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002)<=3))
c Var 'aux1985' direct represents '0' with '-8141'
c Var 'aux1985' direct represents '1' with '8141'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-8141'
c Encoding variable: aux1986 with domain: bool (representing constraint (3<=(x_00004_00001 + x_00004_00002)))
c Var 'aux1986' direct represents '0' with '-8142'
c Var 'aux1986' direct represents '1' with '8142'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-8142'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00004_00005 + x_00004_00006)<=10))
c Var 'aux1987' direct represents '0' with '-8143'
c Var 'aux1987' direct represents '1' with '8143'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-8143'
c Encoding variable: aux1988 with domain: bool (representing constraint (10<=(x_00004_00005 + x_00004_00006)))
c Var 'aux1988' direct represents '0' with '-8144'
c Var 'aux1988' direct represents '1' with '8144'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-8144'
c Encoding variable: aux1989 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008)<=12))
c Var 'aux1989' direct represents '0' with '-8145'
c Var 'aux1989' direct represents '1' with '8145'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-8145'
c Encoding variable: aux1990 with domain: bool (representing constraint (12<=(x_00004_00008 + x_00005_00008)))
c Var 'aux1990' direct represents '0' with '-8146'
c Var 'aux1990' direct represents '1' with '8146'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-8146'
c Encoding variable: aux1991 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009)<=10))
c Var 'aux1991' direct represents '0' with '-8147'
c Var 'aux1991' direct represents '1' with '8147'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-8147'
c Encoding variable: aux1992 with domain: bool (representing constraint (10<=(x_00004_00009 + x_00005_00009)))
c Var 'aux1992' direct represents '0' with '-8148'
c Var 'aux1992' direct represents '1' with '8148'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-8148'
c Encoding variable: aux1993 with domain: bool (representing constraint ((x_00005_00001 + x_00006_00001)<=13))
c Var 'aux1993' direct represents '0' with '-8149'
c Var 'aux1993' direct represents '1' with '8149'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-8149'
c Encoding variable: aux1994 with domain: bool (representing constraint (13<=(x_00005_00001 + x_00006_00001)))
c Var 'aux1994' direct represents '0' with '-8150'
c Var 'aux1994' direct represents '1' with '8150'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-8150'
c Encoding variable: aux1995 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002)<=11))
c Var 'aux1995' direct represents '0' with '-8151'
c Var 'aux1995' direct represents '1' with '8151'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-8151'
c Encoding variable: aux1996 with domain: bool (representing constraint (11<=(x_00005_00002 + x_00006_00002)))
c Var 'aux1996' direct represents '0' with '-8152'
c Var 'aux1996' direct represents '1' with '8152'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-8152'
c Encoding variable: aux1997 with domain: bool (representing constraint ((x_00005_00004 + x_00005_00005 + x_00005_00006)<=14))
c Var 'aux1997' direct represents '0' with '-8153'
c Var 'aux1997' direct represents '1' with '8153'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-8153'
c Encoding variable: aux1998 with domain: bool (representing constraint (14<=(x_00005_00004 + x_00005_00005 + x_00005_00006)))
c Var 'aux1998' direct represents '0' with '-8154'
c Var 'aux1998' direct represents '1' with '8154'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-8154'
c Encoding variable: aux1999 with domain: bool (representing constraint ((x_00006_00004 + x_00006_00005)<=9))
c Var 'aux1999' direct represents '0' with '-8155'
c Var 'aux1999' direct represents '1' with '8155'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-8155'
c Encoding variable: aux2000 with domain: bool (representing constraint (9<=(x_00006_00004 + x_00006_00005)))
c Var 'aux2000' direct represents '0' with '-8156'
c Var 'aux2000' direct represents '1' with '8156'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-8156'
c Encoding variable: aux2001 with domain: bool (representing constraint ((x_00007_00005 + x_00007_00006 + x_00006_00006)<=19))
c Var 'aux2001' direct represents '0' with '-8157'
c Var 'aux2001' direct represents '1' with '8157'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-8157'
c Encoding variable: aux2002 with domain: bool (representing constraint (19<=(x_00007_00005 + x_00007_00006 + x_00006_00006)))
c Var 'aux2002' direct represents '0' with '-8158'
c Var 'aux2002' direct represents '1' with '8158'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-8158'
c Encoding variable: aux2003 with domain: bool (representing constraint ((x_00006_00008 + x_00006_00009)<=10))
c Var 'aux2003' direct represents '0' with '-8159'
c Var 'aux2003' direct represents '1' with '8159'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-8159'
c Encoding variable: aux2004 with domain: bool (representing constraint (10<=(x_00006_00008 + x_00006_00009)))
c Var 'aux2004' direct represents '0' with '-8160'
c Var 'aux2004' direct represents '1' with '8160'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-8160'
c Encoding variable: aux2005 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002)<=7))
c Var 'aux2005' direct represents '0' with '-8161'
c Var 'aux2005' direct represents '1' with '8161'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-8161'
c Encoding variable: aux2006 with domain: bool (representing constraint (7<=(x_00007_00001 + x_00007_00002)))
c Var 'aux2006' direct represents '0' with '-8162'
c Var 'aux2006' direct represents '1' with '8162'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-8162'
c Encoding variable: aux2007 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009)<=7))
c Var 'aux2007' direct represents '0' with '-8163'
c Var 'aux2007' direct represents '1' with '8163'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-8163'
c Encoding variable: aux2008 with domain: bool (representing constraint (7<=(x_00007_00008 + x_00007_00009)))
c Var 'aux2008' direct represents '0' with '-8164'
c Var 'aux2008' direct represents '1' with '8164'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-8164'
c Encoding variable: aux2009 with domain: bool (representing constraint ((aux413 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1))<=13))
c Var 'aux2009' direct represents '0' with '-8165'
c Var 'aux2009' direct represents '1' with '8165'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-8165'
c Encoding variable: aux2010 with domain: bool (representing constraint (13<=(aux413 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1))))
c Var 'aux2010' direct represents '0' with '-8166'
c Var 'aux2010' direct represents '1' with '8166'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-8166'
c Encoding variable: aux2011 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004)<=10))
c Var 'aux2011' direct represents '0' with '-8167'
c Var 'aux2011' direct represents '1' with '8167'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-8167'
c Encoding variable: aux2012 with domain: bool (representing constraint (10<=(x_00008_00003 + x_00008_00004)))
c Var 'aux2012' direct represents '0' with '-8168'
c Var 'aux2012' direct represents '1' with '8168'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-8168'
c Encoding variable: aux2013 with domain: bool (representing constraint ((aux414 + shift(x_00008_00006, -1) + shift(x_00009_00006, -1))<=20))
c Var 'aux2013' direct represents '0' with '-8169'
c Var 'aux2013' direct represents '1' with '8169'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-8169'
c Encoding variable: aux2014 with domain: bool (representing constraint (20<=(aux414 + shift(x_00008_00006, -1) + shift(x_00009_00006, -1))))
c Var 'aux2014' direct represents '0' with '-8170'
c Var 'aux2014' direct represents '1' with '8170'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-8170'
c Encoding variable: aux2015 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008 + x_00009_00008)<=13))
c Var 'aux2015' direct represents '0' with '-8171'
c Var 'aux2015' direct represents '1' with '8171'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-8171'
c Encoding variable: aux2016 with domain: bool (representing constraint (13<=(x_00008_00007 + x_00008_00008 + x_00009_00008)))
c Var 'aux2016' direct represents '0' with '-8172'
c Var 'aux2016' direct represents '1' with '8172'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-8172'
c Encoding variable: aux2017 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00009)<=13))
c Var 'aux2017' direct represents '0' with '-8173'
c Var 'aux2017' direct represents '1' with '8173'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-8173'
c Encoding variable: aux2018 with domain: bool (representing constraint (13<=(x_00008_00009 + x_00009_00009)))
c Var 'aux2018' direct represents '0' with '-8174'
c Var 'aux2018' direct represents '1' with '8174'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-8174'
c Encoding variable: aux2019 with domain: bool (representing constraint ((x_00009_00003 + x_00009_00004 + x_00009_00005)<=13))
c Var 'aux2019' direct represents '0' with '-8175'
c Var 'aux2019' direct represents '1' with '8175'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-8175'
c Encoding variable: aux2020 with domain: bool (representing constraint (13<=(x_00009_00003 + x_00009_00004 + x_00009_00005)))
c Var 'aux2020' direct represents '0' with '-8176'
c Var 'aux2020' direct represents '1' with '8176'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-8176'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux416 + aux419 + aux420)<=1))
c Var 'aux2021' direct represents '0' with '-8177'
c Var 'aux2021' direct represents '1' with '8177'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-8177'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux416 + aux419 + aux420)))
c Var 'aux2022' direct represents '0' with '-8178'
c Var 'aux2022' direct represents '1' with '8178'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-8178'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux422 + aux425 + aux426)<=1))
c Var 'aux2023' direct represents '0' with '-8179'
c Var 'aux2023' direct represents '1' with '8179'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-8179'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux422 + aux425 + aux426)))
c Var 'aux2024' direct represents '0' with '-8180'
c Var 'aux2024' direct represents '1' with '8180'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-8180'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux428 + aux431 + aux432)<=1))
c Var 'aux2025' direct represents '0' with '-8181'
c Var 'aux2025' direct represents '1' with '8181'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-8181'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux428 + aux431 + aux432)))
c Var 'aux2026' direct represents '0' with '-8182'
c Var 'aux2026' direct represents '1' with '8182'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-8182'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux434 + aux437 + aux438)<=1))
c Var 'aux2027' direct represents '0' with '-8183'
c Var 'aux2027' direct represents '1' with '8183'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-8183'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux434 + aux437 + aux438)))
c Var 'aux2028' direct represents '0' with '-8184'
c Var 'aux2028' direct represents '1' with '8184'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-8184'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux440 + aux443 + aux444)<=1))
c Var 'aux2029' direct represents '0' with '-8185'
c Var 'aux2029' direct represents '1' with '8185'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-8185'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux440 + aux443 + aux444)))
c Var 'aux2030' direct represents '0' with '-8186'
c Var 'aux2030' direct represents '1' with '8186'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-8186'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux446 + aux449 + aux450)<=1))
c Var 'aux2031' direct represents '0' with '-8187'
c Var 'aux2031' direct represents '1' with '8187'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-8187'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux446 + aux449 + aux450)))
c Var 'aux2032' direct represents '0' with '-8188'
c Var 'aux2032' direct represents '1' with '8188'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-8188'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux452 + aux455 + aux456)<=1))
c Var 'aux2033' direct represents '0' with '-8189'
c Var 'aux2033' direct represents '1' with '8189'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-8189'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux452 + aux455 + aux456)))
c Var 'aux2034' direct represents '0' with '-8190'
c Var 'aux2034' direct represents '1' with '8190'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-8190'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux458 + aux461 + aux462)<=1))
c Var 'aux2035' direct represents '0' with '-8191'
c Var 'aux2035' direct represents '1' with '8191'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-8191'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux458 + aux461 + aux462)))
c Var 'aux2036' direct represents '0' with '-8192'
c Var 'aux2036' direct represents '1' with '8192'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-8192'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux464 + aux467 + aux468)<=1))
c Var 'aux2037' direct represents '0' with '-8193'
c Var 'aux2037' direct represents '1' with '8193'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-8193'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux464 + aux467 + aux468)))
c Var 'aux2038' direct represents '0' with '-8194'
c Var 'aux2038' direct represents '1' with '8194'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-8194'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux470 + aux473 + aux474)<=1))
c Var 'aux2039' direct represents '0' with '-8195'
c Var 'aux2039' direct represents '1' with '8195'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-8195'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux470 + aux473 + aux474)))
c Var 'aux2040' direct represents '0' with '-8196'
c Var 'aux2040' direct represents '1' with '8196'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-8196'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux476 + aux479 + aux480)<=1))
c Var 'aux2041' direct represents '0' with '-8197'
c Var 'aux2041' direct represents '1' with '8197'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-8197'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux476 + aux479 + aux480)))
c Var 'aux2042' direct represents '0' with '-8198'
c Var 'aux2042' direct represents '1' with '8198'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-8198'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux482 + aux485 + aux486)<=1))
c Var 'aux2043' direct represents '0' with '-8199'
c Var 'aux2043' direct represents '1' with '8199'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-8199'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux482 + aux485 + aux486)))
c Var 'aux2044' direct represents '0' with '-8200'
c Var 'aux2044' direct represents '1' with '8200'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-8200'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux488 + aux491 + aux492)<=1))
c Var 'aux2045' direct represents '0' with '-8201'
c Var 'aux2045' direct represents '1' with '8201'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-8201'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux488 + aux491 + aux492)))
c Var 'aux2046' direct represents '0' with '-8202'
c Var 'aux2046' direct represents '1' with '8202'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-8202'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux494 + aux497 + aux498)<=1))
c Var 'aux2047' direct represents '0' with '-8203'
c Var 'aux2047' direct represents '1' with '8203'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-8203'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux494 + aux497 + aux498)))
c Var 'aux2048' direct represents '0' with '-8204'
c Var 'aux2048' direct represents '1' with '8204'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-8204'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux500 + aux503 + aux504)<=1))
c Var 'aux2049' direct represents '0' with '-8205'
c Var 'aux2049' direct represents '1' with '8205'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-8205'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux500 + aux503 + aux504)))
c Var 'aux2050' direct represents '0' with '-8206'
c Var 'aux2050' direct represents '1' with '8206'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-8206'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux506 + aux509 + aux510)<=1))
c Var 'aux2051' direct represents '0' with '-8207'
c Var 'aux2051' direct represents '1' with '8207'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-8207'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux506 + aux509 + aux510)))
c Var 'aux2052' direct represents '0' with '-8208'
c Var 'aux2052' direct represents '1' with '8208'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-8208'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux512 + aux515 + aux516)<=1))
c Var 'aux2053' direct represents '0' with '-8209'
c Var 'aux2053' direct represents '1' with '8209'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-8209'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux512 + aux515 + aux516)))
c Var 'aux2054' direct represents '0' with '-8210'
c Var 'aux2054' direct represents '1' with '8210'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-8210'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux518 + aux521 + aux522)<=1))
c Var 'aux2055' direct represents '0' with '-8211'
c Var 'aux2055' direct represents '1' with '8211'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-8211'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux518 + aux521 + aux522)))
c Var 'aux2056' direct represents '0' with '-8212'
c Var 'aux2056' direct represents '1' with '8212'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-8212'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux524 + aux527 + aux528)<=1))
c Var 'aux2057' direct represents '0' with '-8213'
c Var 'aux2057' direct represents '1' with '8213'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-8213'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux524 + aux527 + aux528)))
c Var 'aux2058' direct represents '0' with '-8214'
c Var 'aux2058' direct represents '1' with '8214'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-8214'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux530 + aux533 + aux534)<=1))
c Var 'aux2059' direct represents '0' with '-8215'
c Var 'aux2059' direct represents '1' with '8215'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-8215'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux530 + aux533 + aux534)))
c Var 'aux2060' direct represents '0' with '-8216'
c Var 'aux2060' direct represents '1' with '8216'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-8216'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux536 + aux539 + aux540)<=1))
c Var 'aux2061' direct represents '0' with '-8217'
c Var 'aux2061' direct represents '1' with '8217'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-8217'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux536 + aux539 + aux540)))
c Var 'aux2062' direct represents '0' with '-8218'
c Var 'aux2062' direct represents '1' with '8218'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-8218'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux542 + aux545 + aux546)<=1))
c Var 'aux2063' direct represents '0' with '-8219'
c Var 'aux2063' direct represents '1' with '8219'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-8219'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux542 + aux545 + aux546)))
c Var 'aux2064' direct represents '0' with '-8220'
c Var 'aux2064' direct represents '1' with '8220'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-8220'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux548 + aux551 + aux552)<=1))
c Var 'aux2065' direct represents '0' with '-8221'
c Var 'aux2065' direct represents '1' with '8221'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-8221'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux548 + aux551 + aux552)))
c Var 'aux2066' direct represents '0' with '-8222'
c Var 'aux2066' direct represents '1' with '8222'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-8222'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux554 + aux557 + aux558)<=1))
c Var 'aux2067' direct represents '0' with '-8223'
c Var 'aux2067' direct represents '1' with '8223'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-8223'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux554 + aux557 + aux558)))
c Var 'aux2068' direct represents '0' with '-8224'
c Var 'aux2068' direct represents '1' with '8224'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-8224'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux560 + aux563 + aux564)<=1))
c Var 'aux2069' direct represents '0' with '-8225'
c Var 'aux2069' direct represents '1' with '8225'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-8225'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux560 + aux563 + aux564)))
c Var 'aux2070' direct represents '0' with '-8226'
c Var 'aux2070' direct represents '1' with '8226'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-8226'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux566 + aux569 + aux570)<=1))
c Var 'aux2071' direct represents '0' with '-8227'
c Var 'aux2071' direct represents '1' with '8227'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-8227'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux566 + aux569 + aux570)))
c Var 'aux2072' direct represents '0' with '-8228'
c Var 'aux2072' direct represents '1' with '8228'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-8228'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux572 + aux575 + aux576)<=1))
c Var 'aux2073' direct represents '0' with '-8229'
c Var 'aux2073' direct represents '1' with '8229'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-8229'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux572 + aux575 + aux576)))
c Var 'aux2074' direct represents '0' with '-8230'
c Var 'aux2074' direct represents '1' with '8230'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-8230'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux578 + aux581 + aux582)<=1))
c Var 'aux2075' direct represents '0' with '-8231'
c Var 'aux2075' direct represents '1' with '8231'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-8231'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux578 + aux581 + aux582)))
c Var 'aux2076' direct represents '0' with '-8232'
c Var 'aux2076' direct represents '1' with '8232'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-8232'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux584 + aux587 + aux588)<=1))
c Var 'aux2077' direct represents '0' with '-8233'
c Var 'aux2077' direct represents '1' with '8233'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-8233'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux584 + aux587 + aux588)))
c Var 'aux2078' direct represents '0' with '-8234'
c Var 'aux2078' direct represents '1' with '8234'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-8234'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux590 + aux593 + aux594)<=1))
c Var 'aux2079' direct represents '0' with '-8235'
c Var 'aux2079' direct represents '1' with '8235'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-8235'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux590 + aux593 + aux594)))
c Var 'aux2080' direct represents '0' with '-8236'
c Var 'aux2080' direct represents '1' with '8236'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-8236'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux596 + aux599 + aux600)<=1))
c Var 'aux2081' direct represents '0' with '-8237'
c Var 'aux2081' direct represents '1' with '8237'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-8237'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux596 + aux599 + aux600)))
c Var 'aux2082' direct represents '0' with '-8238'
c Var 'aux2082' direct represents '1' with '8238'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-8238'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux602 + aux605 + aux606)<=1))
c Var 'aux2083' direct represents '0' with '-8239'
c Var 'aux2083' direct represents '1' with '8239'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-8239'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux602 + aux605 + aux606)))
c Var 'aux2084' direct represents '0' with '-8240'
c Var 'aux2084' direct represents '1' with '8240'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-8240'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux608 + aux611 + aux612)<=1))
c Var 'aux2085' direct represents '0' with '-8241'
c Var 'aux2085' direct represents '1' with '8241'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-8241'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux608 + aux611 + aux612)))
c Var 'aux2086' direct represents '0' with '-8242'
c Var 'aux2086' direct represents '1' with '8242'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-8242'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux614 + aux617 + aux618)<=1))
c Var 'aux2087' direct represents '0' with '-8243'
c Var 'aux2087' direct represents '1' with '8243'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-8243'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux614 + aux617 + aux618)))
c Var 'aux2088' direct represents '0' with '-8244'
c Var 'aux2088' direct represents '1' with '8244'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-8244'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux620 + aux623 + aux624)<=1))
c Var 'aux2089' direct represents '0' with '-8245'
c Var 'aux2089' direct represents '1' with '8245'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-8245'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux620 + aux623 + aux624)))
c Var 'aux2090' direct represents '0' with '-8246'
c Var 'aux2090' direct represents '1' with '8246'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-8246'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux626 + aux629 + aux630)<=1))
c Var 'aux2091' direct represents '0' with '-8247'
c Var 'aux2091' direct represents '1' with '8247'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-8247'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux626 + aux629 + aux630)))
c Var 'aux2092' direct represents '0' with '-8248'
c Var 'aux2092' direct represents '1' with '8248'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-8248'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux632 + aux635 + aux636)<=1))
c Var 'aux2093' direct represents '0' with '-8249'
c Var 'aux2093' direct represents '1' with '8249'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-8249'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux632 + aux635 + aux636)))
c Var 'aux2094' direct represents '0' with '-8250'
c Var 'aux2094' direct represents '1' with '8250'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-8250'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux638 + aux641 + aux642)<=1))
c Var 'aux2095' direct represents '0' with '-8251'
c Var 'aux2095' direct represents '1' with '8251'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-8251'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux638 + aux641 + aux642)))
c Var 'aux2096' direct represents '0' with '-8252'
c Var 'aux2096' direct represents '1' with '8252'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-8252'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux644 + aux647 + aux648)<=1))
c Var 'aux2097' direct represents '0' with '-8253'
c Var 'aux2097' direct represents '1' with '8253'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-8253'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux644 + aux647 + aux648)))
c Var 'aux2098' direct represents '0' with '-8254'
c Var 'aux2098' direct represents '1' with '8254'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-8254'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux650 + aux653 + aux654)<=1))
c Var 'aux2099' direct represents '0' with '-8255'
c Var 'aux2099' direct represents '1' with '8255'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-8255'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux650 + aux653 + aux654)))
c Var 'aux2100' direct represents '0' with '-8256'
c Var 'aux2100' direct represents '1' with '8256'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-8256'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux656 + aux659 + aux660)<=1))
c Var 'aux2101' direct represents '0' with '-8257'
c Var 'aux2101' direct represents '1' with '8257'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-8257'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux656 + aux659 + aux660)))
c Var 'aux2102' direct represents '0' with '-8258'
c Var 'aux2102' direct represents '1' with '8258'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-8258'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux662 + aux665 + aux666)<=1))
c Var 'aux2103' direct represents '0' with '-8259'
c Var 'aux2103' direct represents '1' with '8259'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-8259'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux662 + aux665 + aux666)))
c Var 'aux2104' direct represents '0' with '-8260'
c Var 'aux2104' direct represents '1' with '8260'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-8260'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux668 + aux671 + aux672)<=1))
c Var 'aux2105' direct represents '0' with '-8261'
c Var 'aux2105' direct represents '1' with '8261'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-8261'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux668 + aux671 + aux672)))
c Var 'aux2106' direct represents '0' with '-8262'
c Var 'aux2106' direct represents '1' with '8262'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-8262'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux674 + aux677 + aux678)<=1))
c Var 'aux2107' direct represents '0' with '-8263'
c Var 'aux2107' direct represents '1' with '8263'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-8263'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux674 + aux677 + aux678)))
c Var 'aux2108' direct represents '0' with '-8264'
c Var 'aux2108' direct represents '1' with '8264'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-8264'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux680 + aux683 + aux684)<=1))
c Var 'aux2109' direct represents '0' with '-8265'
c Var 'aux2109' direct represents '1' with '8265'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-8265'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux680 + aux683 + aux684)))
c Var 'aux2110' direct represents '0' with '-8266'
c Var 'aux2110' direct represents '1' with '8266'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-8266'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux686 + aux689 + aux690)<=1))
c Var 'aux2111' direct represents '0' with '-8267'
c Var 'aux2111' direct represents '1' with '8267'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-8267'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux686 + aux689 + aux690)))
c Var 'aux2112' direct represents '0' with '-8268'
c Var 'aux2112' direct represents '1' with '8268'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-8268'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux692 + aux695 + aux696)<=1))
c Var 'aux2113' direct represents '0' with '-8269'
c Var 'aux2113' direct represents '1' with '8269'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-8269'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux692 + aux695 + aux696)))
c Var 'aux2114' direct represents '0' with '-8270'
c Var 'aux2114' direct represents '1' with '8270'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-8270'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux698 + aux701 + aux702)<=1))
c Var 'aux2115' direct represents '0' with '-8271'
c Var 'aux2115' direct represents '1' with '8271'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-8271'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux698 + aux701 + aux702)))
c Var 'aux2116' direct represents '0' with '-8272'
c Var 'aux2116' direct represents '1' with '8272'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-8272'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux704 + aux707 + aux708)<=1))
c Var 'aux2117' direct represents '0' with '-8273'
c Var 'aux2117' direct represents '1' with '8273'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-8273'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux704 + aux707 + aux708)))
c Var 'aux2118' direct represents '0' with '-8274'
c Var 'aux2118' direct represents '1' with '8274'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-8274'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux710 + aux713 + aux714)<=1))
c Var 'aux2119' direct represents '0' with '-8275'
c Var 'aux2119' direct represents '1' with '8275'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-8275'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux710 + aux713 + aux714)))
c Var 'aux2120' direct represents '0' with '-8276'
c Var 'aux2120' direct represents '1' with '8276'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-8276'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux716 + aux719 + aux720)<=1))
c Var 'aux2121' direct represents '0' with '-8277'
c Var 'aux2121' direct represents '1' with '8277'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-8277'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux716 + aux719 + aux720)))
c Var 'aux2122' direct represents '0' with '-8278'
c Var 'aux2122' direct represents '1' with '8278'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-8278'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux722 + aux725 + aux726)<=1))
c Var 'aux2123' direct represents '0' with '-8279'
c Var 'aux2123' direct represents '1' with '8279'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-8279'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux722 + aux725 + aux726)))
c Var 'aux2124' direct represents '0' with '-8280'
c Var 'aux2124' direct represents '1' with '8280'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-8280'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux728 + aux731 + aux732)<=1))
c Var 'aux2125' direct represents '0' with '-8281'
c Var 'aux2125' direct represents '1' with '8281'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-8281'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux728 + aux731 + aux732)))
c Var 'aux2126' direct represents '0' with '-8282'
c Var 'aux2126' direct represents '1' with '8282'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-8282'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux734 + aux737 + aux738)<=1))
c Var 'aux2127' direct represents '0' with '-8283'
c Var 'aux2127' direct represents '1' with '8283'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-8283'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux734 + aux737 + aux738)))
c Var 'aux2128' direct represents '0' with '-8284'
c Var 'aux2128' direct represents '1' with '8284'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-8284'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux740 + aux743 + aux744)<=1))
c Var 'aux2129' direct represents '0' with '-8285'
c Var 'aux2129' direct represents '1' with '8285'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-8285'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux740 + aux743 + aux744)))
c Var 'aux2130' direct represents '0' with '-8286'
c Var 'aux2130' direct represents '1' with '8286'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-8286'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux746 + aux749 + aux750)<=1))
c Var 'aux2131' direct represents '0' with '-8287'
c Var 'aux2131' direct represents '1' with '8287'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-8287'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux746 + aux749 + aux750)))
c Var 'aux2132' direct represents '0' with '-8288'
c Var 'aux2132' direct represents '1' with '8288'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-8288'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux752 + aux755 + aux756)<=1))
c Var 'aux2133' direct represents '0' with '-8289'
c Var 'aux2133' direct represents '1' with '8289'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-8289'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux752 + aux755 + aux756)))
c Var 'aux2134' direct represents '0' with '-8290'
c Var 'aux2134' direct represents '1' with '8290'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8290'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux758 + aux761 + aux762)<=1))
c Var 'aux2135' direct represents '0' with '-8291'
c Var 'aux2135' direct represents '1' with '8291'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8291'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux758 + aux761 + aux762)))
c Var 'aux2136' direct represents '0' with '-8292'
c Var 'aux2136' direct represents '1' with '8292'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8292'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux764 + aux767 + aux768)<=1))
c Var 'aux2137' direct represents '0' with '-8293'
c Var 'aux2137' direct represents '1' with '8293'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8293'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux764 + aux767 + aux768)))
c Var 'aux2138' direct represents '0' with '-8294'
c Var 'aux2138' direct represents '1' with '8294'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8294'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux770 + aux773 + aux774)<=1))
c Var 'aux2139' direct represents '0' with '-8295'
c Var 'aux2139' direct represents '1' with '8295'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8295'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux770 + aux773 + aux774)))
c Var 'aux2140' direct represents '0' with '-8296'
c Var 'aux2140' direct represents '1' with '8296'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8296'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux776 + aux779 + aux780)<=1))
c Var 'aux2141' direct represents '0' with '-8297'
c Var 'aux2141' direct represents '1' with '8297'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8297'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux776 + aux779 + aux780)))
c Var 'aux2142' direct represents '0' with '-8298'
c Var 'aux2142' direct represents '1' with '8298'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8298'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux782 + aux785 + aux786)<=1))
c Var 'aux2143' direct represents '0' with '-8299'
c Var 'aux2143' direct represents '1' with '8299'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8299'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux782 + aux785 + aux786)))
c Var 'aux2144' direct represents '0' with '-8300'
c Var 'aux2144' direct represents '1' with '8300'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8300'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux788 + aux791 + aux792)<=1))
c Var 'aux2145' direct represents '0' with '-8301'
c Var 'aux2145' direct represents '1' with '8301'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8301'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux788 + aux791 + aux792)))
c Var 'aux2146' direct represents '0' with '-8302'
c Var 'aux2146' direct represents '1' with '8302'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8302'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux794 + aux797 + aux798)<=1))
c Var 'aux2147' direct represents '0' with '-8303'
c Var 'aux2147' direct represents '1' with '8303'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8303'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux794 + aux797 + aux798)))
c Var 'aux2148' direct represents '0' with '-8304'
c Var 'aux2148' direct represents '1' with '8304'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8304'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux800 + aux803 + aux804)<=1))
c Var 'aux2149' direct represents '0' with '-8305'
c Var 'aux2149' direct represents '1' with '8305'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8305'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux800 + aux803 + aux804)))
c Var 'aux2150' direct represents '0' with '-8306'
c Var 'aux2150' direct represents '1' with '8306'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8306'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux806 + aux809 + aux810)<=1))
c Var 'aux2151' direct represents '0' with '-8307'
c Var 'aux2151' direct represents '1' with '8307'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8307'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux806 + aux809 + aux810)))
c Var 'aux2152' direct represents '0' with '-8308'
c Var 'aux2152' direct represents '1' with '8308'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8308'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux812 + aux815 + aux816)<=1))
c Var 'aux2153' direct represents '0' with '-8309'
c Var 'aux2153' direct represents '1' with '8309'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8309'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux812 + aux815 + aux816)))
c Var 'aux2154' direct represents '0' with '-8310'
c Var 'aux2154' direct represents '1' with '8310'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8310'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux818 + aux821 + aux822)<=1))
c Var 'aux2155' direct represents '0' with '-8311'
c Var 'aux2155' direct represents '1' with '8311'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8311'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux818 + aux821 + aux822)))
c Var 'aux2156' direct represents '0' with '-8312'
c Var 'aux2156' direct represents '1' with '8312'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8312'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux824 + aux827 + aux828)<=1))
c Var 'aux2157' direct represents '0' with '-8313'
c Var 'aux2157' direct represents '1' with '8313'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8313'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux824 + aux827 + aux828)))
c Var 'aux2158' direct represents '0' with '-8314'
c Var 'aux2158' direct represents '1' with '8314'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8314'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux830 + aux833 + aux834)<=1))
c Var 'aux2159' direct represents '0' with '-8315'
c Var 'aux2159' direct represents '1' with '8315'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8315'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux830 + aux833 + aux834)))
c Var 'aux2160' direct represents '0' with '-8316'
c Var 'aux2160' direct represents '1' with '8316'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8316'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux836 + aux839 + aux840)<=1))
c Var 'aux2161' direct represents '0' with '-8317'
c Var 'aux2161' direct represents '1' with '8317'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8317'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux836 + aux839 + aux840)))
c Var 'aux2162' direct represents '0' with '-8318'
c Var 'aux2162' direct represents '1' with '8318'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8318'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux842 + aux845 + aux846)<=1))
c Var 'aux2163' direct represents '0' with '-8319'
c Var 'aux2163' direct represents '1' with '8319'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8319'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux842 + aux845 + aux846)))
c Var 'aux2164' direct represents '0' with '-8320'
c Var 'aux2164' direct represents '1' with '8320'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8320'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux848 + aux851 + aux852)<=1))
c Var 'aux2165' direct represents '0' with '-8321'
c Var 'aux2165' direct represents '1' with '8321'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8321'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux848 + aux851 + aux852)))
c Var 'aux2166' direct represents '0' with '-8322'
c Var 'aux2166' direct represents '1' with '8322'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8322'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux854 + aux857 + aux858)<=1))
c Var 'aux2167' direct represents '0' with '-8323'
c Var 'aux2167' direct represents '1' with '8323'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8323'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux854 + aux857 + aux858)))
c Var 'aux2168' direct represents '0' with '-8324'
c Var 'aux2168' direct represents '1' with '8324'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8324'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux860 + aux863 + aux864)<=1))
c Var 'aux2169' direct represents '0' with '-8325'
c Var 'aux2169' direct represents '1' with '8325'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8325'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux860 + aux863 + aux864)))
c Var 'aux2170' direct represents '0' with '-8326'
c Var 'aux2170' direct represents '1' with '8326'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8326'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux866 + aux869 + aux870)<=1))
c Var 'aux2171' direct represents '0' with '-8327'
c Var 'aux2171' direct represents '1' with '8327'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8327'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux866 + aux869 + aux870)))
c Var 'aux2172' direct represents '0' with '-8328'
c Var 'aux2172' direct represents '1' with '8328'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8328'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux872 + aux875 + aux876)<=1))
c Var 'aux2173' direct represents '0' with '-8329'
c Var 'aux2173' direct represents '1' with '8329'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8329'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux872 + aux875 + aux876)))
c Var 'aux2174' direct represents '0' with '-8330'
c Var 'aux2174' direct represents '1' with '8330'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8330'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux878 + aux881 + aux882)<=1))
c Var 'aux2175' direct represents '0' with '-8331'
c Var 'aux2175' direct represents '1' with '8331'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8331'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux878 + aux881 + aux882)))
c Var 'aux2176' direct represents '0' with '-8332'
c Var 'aux2176' direct represents '1' with '8332'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8332'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux884 + aux887 + aux888)<=1))
c Var 'aux2177' direct represents '0' with '-8333'
c Var 'aux2177' direct represents '1' with '8333'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8333'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux884 + aux887 + aux888)))
c Var 'aux2178' direct represents '0' with '-8334'
c Var 'aux2178' direct represents '1' with '8334'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8334'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux890 + aux893 + aux894)<=1))
c Var 'aux2179' direct represents '0' with '-8335'
c Var 'aux2179' direct represents '1' with '8335'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8335'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux890 + aux893 + aux894)))
c Var 'aux2180' direct represents '0' with '-8336'
c Var 'aux2180' direct represents '1' with '8336'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8336'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux896 + aux899 + aux900)<=1))
c Var 'aux2181' direct represents '0' with '-8337'
c Var 'aux2181' direct represents '1' with '8337'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8337'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux896 + aux899 + aux900)))
c Var 'aux2182' direct represents '0' with '-8338'
c Var 'aux2182' direct represents '1' with '8338'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8338'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux902 + aux905 + aux906)<=1))
c Var 'aux2183' direct represents '0' with '-8339'
c Var 'aux2183' direct represents '1' with '8339'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8339'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux902 + aux905 + aux906)))
c Var 'aux2184' direct represents '0' with '-8340'
c Var 'aux2184' direct represents '1' with '8340'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8340'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux908 + aux911 + aux912)<=1))
c Var 'aux2185' direct represents '0' with '-8341'
c Var 'aux2185' direct represents '1' with '8341'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8341'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux908 + aux911 + aux912)))
c Var 'aux2186' direct represents '0' with '-8342'
c Var 'aux2186' direct represents '1' with '8342'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8342'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux914 + aux917 + aux918)<=1))
c Var 'aux2187' direct represents '0' with '-8343'
c Var 'aux2187' direct represents '1' with '8343'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8343'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux914 + aux917 + aux918)))
c Var 'aux2188' direct represents '0' with '-8344'
c Var 'aux2188' direct represents '1' with '8344'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8344'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux920 + aux923 + aux924)<=1))
c Var 'aux2189' direct represents '0' with '-8345'
c Var 'aux2189' direct represents '1' with '8345'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8345'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux920 + aux923 + aux924)))
c Var 'aux2190' direct represents '0' with '-8346'
c Var 'aux2190' direct represents '1' with '8346'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8346'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux926 + aux929 + aux930)<=1))
c Var 'aux2191' direct represents '0' with '-8347'
c Var 'aux2191' direct represents '1' with '8347'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8347'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux926 + aux929 + aux930)))
c Var 'aux2192' direct represents '0' with '-8348'
c Var 'aux2192' direct represents '1' with '8348'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8348'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux932 + aux935 + aux936)<=1))
c Var 'aux2193' direct represents '0' with '-8349'
c Var 'aux2193' direct represents '1' with '8349'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8349'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux932 + aux935 + aux936)))
c Var 'aux2194' direct represents '0' with '-8350'
c Var 'aux2194' direct represents '1' with '8350'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8350'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux938 + aux941 + aux942)<=1))
c Var 'aux2195' direct represents '0' with '-8351'
c Var 'aux2195' direct represents '1' with '8351'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8351'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux938 + aux941 + aux942)))
c Var 'aux2196' direct represents '0' with '-8352'
c Var 'aux2196' direct represents '1' with '8352'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8352'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux944 + aux947 + aux948)<=1))
c Var 'aux2197' direct represents '0' with '-8353'
c Var 'aux2197' direct represents '1' with '8353'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8353'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux944 + aux947 + aux948)))
c Var 'aux2198' direct represents '0' with '-8354'
c Var 'aux2198' direct represents '1' with '8354'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8354'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux950 + aux953 + aux954)<=1))
c Var 'aux2199' direct represents '0' with '-8355'
c Var 'aux2199' direct represents '1' with '8355'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8355'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux950 + aux953 + aux954)))
c Var 'aux2200' direct represents '0' with '-8356'
c Var 'aux2200' direct represents '1' with '8356'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8356'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux956 + aux959 + aux960)<=1))
c Var 'aux2201' direct represents '0' with '-8357'
c Var 'aux2201' direct represents '1' with '8357'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8357'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux956 + aux959 + aux960)))
c Var 'aux2202' direct represents '0' with '-8358'
c Var 'aux2202' direct represents '1' with '8358'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8358'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux962 + aux965 + aux966)<=1))
c Var 'aux2203' direct represents '0' with '-8359'
c Var 'aux2203' direct represents '1' with '8359'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8359'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux962 + aux965 + aux966)))
c Var 'aux2204' direct represents '0' with '-8360'
c Var 'aux2204' direct represents '1' with '8360'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8360'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux968 + aux971 + aux972)<=1))
c Var 'aux2205' direct represents '0' with '-8361'
c Var 'aux2205' direct represents '1' with '8361'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8361'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux968 + aux971 + aux972)))
c Var 'aux2206' direct represents '0' with '-8362'
c Var 'aux2206' direct represents '1' with '8362'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8362'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux974 + aux977 + aux978)<=1))
c Var 'aux2207' direct represents '0' with '-8363'
c Var 'aux2207' direct represents '1' with '8363'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8363'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux974 + aux977 + aux978)))
c Var 'aux2208' direct represents '0' with '-8364'
c Var 'aux2208' direct represents '1' with '8364'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8364'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux980 + aux983 + aux984)<=1))
c Var 'aux2209' direct represents '0' with '-8365'
c Var 'aux2209' direct represents '1' with '8365'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8365'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux980 + aux983 + aux984)))
c Var 'aux2210' direct represents '0' with '-8366'
c Var 'aux2210' direct represents '1' with '8366'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8366'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux986 + aux989 + aux990)<=1))
c Var 'aux2211' direct represents '0' with '-8367'
c Var 'aux2211' direct represents '1' with '8367'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8367'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux986 + aux989 + aux990)))
c Var 'aux2212' direct represents '0' with '-8368'
c Var 'aux2212' direct represents '1' with '8368'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8368'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux992 + aux995 + aux996)<=1))
c Var 'aux2213' direct represents '0' with '-8369'
c Var 'aux2213' direct represents '1' with '8369'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8369'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux992 + aux995 + aux996)))
c Var 'aux2214' direct represents '0' with '-8370'
c Var 'aux2214' direct represents '1' with '8370'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8370'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux998 + aux1001 + aux1002)<=1))
c Var 'aux2215' direct represents '0' with '-8371'
c Var 'aux2215' direct represents '1' with '8371'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8371'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux998 + aux1001 + aux1002)))
c Var 'aux2216' direct represents '0' with '-8372'
c Var 'aux2216' direct represents '1' with '8372'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8372'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1004 + aux1007 + aux1008)<=1))
c Var 'aux2217' direct represents '0' with '-8373'
c Var 'aux2217' direct represents '1' with '8373'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8373'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1004 + aux1007 + aux1008)))
c Var 'aux2218' direct represents '0' with '-8374'
c Var 'aux2218' direct represents '1' with '8374'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8374'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1010 + aux1013 + aux1014)<=1))
c Var 'aux2219' direct represents '0' with '-8375'
c Var 'aux2219' direct represents '1' with '8375'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8375'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1010 + aux1013 + aux1014)))
c Var 'aux2220' direct represents '0' with '-8376'
c Var 'aux2220' direct represents '1' with '8376'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8376'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1016 + aux1019 + aux1020)<=1))
c Var 'aux2221' direct represents '0' with '-8377'
c Var 'aux2221' direct represents '1' with '8377'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8377'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1016 + aux1019 + aux1020)))
c Var 'aux2222' direct represents '0' with '-8378'
c Var 'aux2222' direct represents '1' with '8378'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8378'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1022 + aux1025 + aux1026)<=1))
c Var 'aux2223' direct represents '0' with '-8379'
c Var 'aux2223' direct represents '1' with '8379'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8379'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1022 + aux1025 + aux1026)))
c Var 'aux2224' direct represents '0' with '-8380'
c Var 'aux2224' direct represents '1' with '8380'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8380'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1028 + aux1031 + aux1032)<=1))
c Var 'aux2225' direct represents '0' with '-8381'
c Var 'aux2225' direct represents '1' with '8381'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8381'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1028 + aux1031 + aux1032)))
c Var 'aux2226' direct represents '0' with '-8382'
c Var 'aux2226' direct represents '1' with '8382'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8382'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1034 + aux1037 + aux1038)<=1))
c Var 'aux2227' direct represents '0' with '-8383'
c Var 'aux2227' direct represents '1' with '8383'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8383'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1034 + aux1037 + aux1038)))
c Var 'aux2228' direct represents '0' with '-8384'
c Var 'aux2228' direct represents '1' with '8384'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8384'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1040 + aux1043 + aux1044)<=1))
c Var 'aux2229' direct represents '0' with '-8385'
c Var 'aux2229' direct represents '1' with '8385'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8385'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1040 + aux1043 + aux1044)))
c Var 'aux2230' direct represents '0' with '-8386'
c Var 'aux2230' direct represents '1' with '8386'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8386'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1046 + aux1049 + aux1050)<=1))
c Var 'aux2231' direct represents '0' with '-8387'
c Var 'aux2231' direct represents '1' with '8387'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8387'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1046 + aux1049 + aux1050)))
c Var 'aux2232' direct represents '0' with '-8388'
c Var 'aux2232' direct represents '1' with '8388'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8388'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1052 + aux1055 + aux1056)<=1))
c Var 'aux2233' direct represents '0' with '-8389'
c Var 'aux2233' direct represents '1' with '8389'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8389'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1052 + aux1055 + aux1056)))
c Var 'aux2234' direct represents '0' with '-8390'
c Var 'aux2234' direct represents '1' with '8390'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8390'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1058 + aux1061 + aux1062)<=1))
c Var 'aux2235' direct represents '0' with '-8391'
c Var 'aux2235' direct represents '1' with '8391'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8391'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1058 + aux1061 + aux1062)))
c Var 'aux2236' direct represents '0' with '-8392'
c Var 'aux2236' direct represents '1' with '8392'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8392'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1064 + aux1067 + aux1068)<=1))
c Var 'aux2237' direct represents '0' with '-8393'
c Var 'aux2237' direct represents '1' with '8393'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8393'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1064 + aux1067 + aux1068)))
c Var 'aux2238' direct represents '0' with '-8394'
c Var 'aux2238' direct represents '1' with '8394'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8394'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1070 + aux1073 + aux1074)<=1))
c Var 'aux2239' direct represents '0' with '-8395'
c Var 'aux2239' direct represents '1' with '8395'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8395'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1070 + aux1073 + aux1074)))
c Var 'aux2240' direct represents '0' with '-8396'
c Var 'aux2240' direct represents '1' with '8396'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8396'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1076 + aux1079 + aux1080)<=1))
c Var 'aux2241' direct represents '0' with '-8397'
c Var 'aux2241' direct represents '1' with '8397'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8397'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1076 + aux1079 + aux1080)))
c Var 'aux2242' direct represents '0' with '-8398'
c Var 'aux2242' direct represents '1' with '8398'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8398'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1082 + aux1085 + aux1086)<=1))
c Var 'aux2243' direct represents '0' with '-8399'
c Var 'aux2243' direct represents '1' with '8399'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8399'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1082 + aux1085 + aux1086)))
c Var 'aux2244' direct represents '0' with '-8400'
c Var 'aux2244' direct represents '1' with '8400'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8400'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1088 + aux1091 + aux1092)<=1))
c Var 'aux2245' direct represents '0' with '-8401'
c Var 'aux2245' direct represents '1' with '8401'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8401'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1088 + aux1091 + aux1092)))
c Var 'aux2246' direct represents '0' with '-8402'
c Var 'aux2246' direct represents '1' with '8402'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8402'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1094 + aux1097 + aux1098)<=1))
c Var 'aux2247' direct represents '0' with '-8403'
c Var 'aux2247' direct represents '1' with '8403'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8403'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1094 + aux1097 + aux1098)))
c Var 'aux2248' direct represents '0' with '-8404'
c Var 'aux2248' direct represents '1' with '8404'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8404'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1100 + aux1103 + aux1104)<=1))
c Var 'aux2249' direct represents '0' with '-8405'
c Var 'aux2249' direct represents '1' with '8405'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8405'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1100 + aux1103 + aux1104)))
c Var 'aux2250' direct represents '0' with '-8406'
c Var 'aux2250' direct represents '1' with '8406'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8406'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1106 + aux1109 + aux1110)<=1))
c Var 'aux2251' direct represents '0' with '-8407'
c Var 'aux2251' direct represents '1' with '8407'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8407'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1106 + aux1109 + aux1110)))
c Var 'aux2252' direct represents '0' with '-8408'
c Var 'aux2252' direct represents '1' with '8408'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8408'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1112 + aux1115 + aux1116)<=1))
c Var 'aux2253' direct represents '0' with '-8409'
c Var 'aux2253' direct represents '1' with '8409'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8409'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1112 + aux1115 + aux1116)))
c Var 'aux2254' direct represents '0' with '-8410'
c Var 'aux2254' direct represents '1' with '8410'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8410'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1118 + aux1121 + aux1122)<=1))
c Var 'aux2255' direct represents '0' with '-8411'
c Var 'aux2255' direct represents '1' with '8411'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8411'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1118 + aux1121 + aux1122)))
c Var 'aux2256' direct represents '0' with '-8412'
c Var 'aux2256' direct represents '1' with '8412'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8412'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1124 + aux1127 + aux1128)<=1))
c Var 'aux2257' direct represents '0' with '-8413'
c Var 'aux2257' direct represents '1' with '8413'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8413'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1124 + aux1127 + aux1128)))
c Var 'aux2258' direct represents '0' with '-8414'
c Var 'aux2258' direct represents '1' with '8414'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8414'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1130 + aux1133 + aux1134)<=1))
c Var 'aux2259' direct represents '0' with '-8415'
c Var 'aux2259' direct represents '1' with '8415'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8415'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1130 + aux1133 + aux1134)))
c Var 'aux2260' direct represents '0' with '-8416'
c Var 'aux2260' direct represents '1' with '8416'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8416'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1136 + aux1139 + aux1140)<=1))
c Var 'aux2261' direct represents '0' with '-8417'
c Var 'aux2261' direct represents '1' with '8417'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8417'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1136 + aux1139 + aux1140)))
c Var 'aux2262' direct represents '0' with '-8418'
c Var 'aux2262' direct represents '1' with '8418'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8418'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1142 + aux1145 + aux1146)<=1))
c Var 'aux2263' direct represents '0' with '-8419'
c Var 'aux2263' direct represents '1' with '8419'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8419'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1142 + aux1145 + aux1146)))
c Var 'aux2264' direct represents '0' with '-8420'
c Var 'aux2264' direct represents '1' with '8420'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8420'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1148 + aux1151 + aux1152)<=1))
c Var 'aux2265' direct represents '0' with '-8421'
c Var 'aux2265' direct represents '1' with '8421'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8421'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1148 + aux1151 + aux1152)))
c Var 'aux2266' direct represents '0' with '-8422'
c Var 'aux2266' direct represents '1' with '8422'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8422'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1154 + aux1157 + aux1158)<=1))
c Var 'aux2267' direct represents '0' with '-8423'
c Var 'aux2267' direct represents '1' with '8423'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8423'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1154 + aux1157 + aux1158)))
c Var 'aux2268' direct represents '0' with '-8424'
c Var 'aux2268' direct represents '1' with '8424'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8424'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1160 + aux1163 + aux1164)<=1))
c Var 'aux2269' direct represents '0' with '-8425'
c Var 'aux2269' direct represents '1' with '8425'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8425'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1160 + aux1163 + aux1164)))
c Var 'aux2270' direct represents '0' with '-8426'
c Var 'aux2270' direct represents '1' with '8426'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8426'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1166 + aux1169 + aux1170)<=1))
c Var 'aux2271' direct represents '0' with '-8427'
c Var 'aux2271' direct represents '1' with '8427'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8427'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1166 + aux1169 + aux1170)))
c Var 'aux2272' direct represents '0' with '-8428'
c Var 'aux2272' direct represents '1' with '8428'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8428'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1172 + aux1175 + aux1176)<=1))
c Var 'aux2273' direct represents '0' with '-8429'
c Var 'aux2273' direct represents '1' with '8429'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8429'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1172 + aux1175 + aux1176)))
c Var 'aux2274' direct represents '0' with '-8430'
c Var 'aux2274' direct represents '1' with '8430'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8430'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1178 + aux1181 + aux1182)<=1))
c Var 'aux2275' direct represents '0' with '-8431'
c Var 'aux2275' direct represents '1' with '8431'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8431'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1178 + aux1181 + aux1182)))
c Var 'aux2276' direct represents '0' with '-8432'
c Var 'aux2276' direct represents '1' with '8432'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8432'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1184 + aux1187 + aux1188)<=1))
c Var 'aux2277' direct represents '0' with '-8433'
c Var 'aux2277' direct represents '1' with '8433'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8433'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1184 + aux1187 + aux1188)))
c Var 'aux2278' direct represents '0' with '-8434'
c Var 'aux2278' direct represents '1' with '8434'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8434'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1190 + aux1193 + aux1194)<=1))
c Var 'aux2279' direct represents '0' with '-8435'
c Var 'aux2279' direct represents '1' with '8435'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8435'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1190 + aux1193 + aux1194)))
c Var 'aux2280' direct represents '0' with '-8436'
c Var 'aux2280' direct represents '1' with '8436'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8436'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1196 + aux1199 + aux1200)<=1))
c Var 'aux2281' direct represents '0' with '-8437'
c Var 'aux2281' direct represents '1' with '8437'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8437'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1196 + aux1199 + aux1200)))
c Var 'aux2282' direct represents '0' with '-8438'
c Var 'aux2282' direct represents '1' with '8438'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8438'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1202 + aux1205 + aux1206)<=1))
c Var 'aux2283' direct represents '0' with '-8439'
c Var 'aux2283' direct represents '1' with '8439'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8439'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1202 + aux1205 + aux1206)))
c Var 'aux2284' direct represents '0' with '-8440'
c Var 'aux2284' direct represents '1' with '8440'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8440'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1208 + aux1211 + aux1212)<=1))
c Var 'aux2285' direct represents '0' with '-8441'
c Var 'aux2285' direct represents '1' with '8441'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8441'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1208 + aux1211 + aux1212)))
c Var 'aux2286' direct represents '0' with '-8442'
c Var 'aux2286' direct represents '1' with '8442'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8442'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1214 + aux1217 + aux1218)<=1))
c Var 'aux2287' direct represents '0' with '-8443'
c Var 'aux2287' direct represents '1' with '8443'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8443'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1214 + aux1217 + aux1218)))
c Var 'aux2288' direct represents '0' with '-8444'
c Var 'aux2288' direct represents '1' with '8444'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8444'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1220 + aux1223 + aux1224)<=1))
c Var 'aux2289' direct represents '0' with '-8445'
c Var 'aux2289' direct represents '1' with '8445'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8445'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1220 + aux1223 + aux1224)))
c Var 'aux2290' direct represents '0' with '-8446'
c Var 'aux2290' direct represents '1' with '8446'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8446'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1226 + aux1229 + aux1230)<=1))
c Var 'aux2291' direct represents '0' with '-8447'
c Var 'aux2291' direct represents '1' with '8447'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8447'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1226 + aux1229 + aux1230)))
c Var 'aux2292' direct represents '0' with '-8448'
c Var 'aux2292' direct represents '1' with '8448'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8448'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1232 + aux1235 + aux1236)<=1))
c Var 'aux2293' direct represents '0' with '-8449'
c Var 'aux2293' direct represents '1' with '8449'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8449'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1232 + aux1235 + aux1236)))
c Var 'aux2294' direct represents '0' with '-8450'
c Var 'aux2294' direct represents '1' with '8450'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8450'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1238 + aux1241 + aux1242)<=1))
c Var 'aux2295' direct represents '0' with '-8451'
c Var 'aux2295' direct represents '1' with '8451'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8451'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1238 + aux1241 + aux1242)))
c Var 'aux2296' direct represents '0' with '-8452'
c Var 'aux2296' direct represents '1' with '8452'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8452'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1244 + aux1247 + aux1248)<=1))
c Var 'aux2297' direct represents '0' with '-8453'
c Var 'aux2297' direct represents '1' with '8453'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8453'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1244 + aux1247 + aux1248)))
c Var 'aux2298' direct represents '0' with '-8454'
c Var 'aux2298' direct represents '1' with '8454'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8454'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1250 + aux1253 + aux1254)<=1))
c Var 'aux2299' direct represents '0' with '-8455'
c Var 'aux2299' direct represents '1' with '8455'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8455'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1250 + aux1253 + aux1254)))
c Var 'aux2300' direct represents '0' with '-8456'
c Var 'aux2300' direct represents '1' with '8456'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8456'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1256 + aux1259 + aux1260)<=1))
c Var 'aux2301' direct represents '0' with '-8457'
c Var 'aux2301' direct represents '1' with '8457'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8457'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1256 + aux1259 + aux1260)))
c Var 'aux2302' direct represents '0' with '-8458'
c Var 'aux2302' direct represents '1' with '8458'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8458'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1262 + aux1265 + aux1266)<=1))
c Var 'aux2303' direct represents '0' with '-8459'
c Var 'aux2303' direct represents '1' with '8459'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8459'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1262 + aux1265 + aux1266)))
c Var 'aux2304' direct represents '0' with '-8460'
c Var 'aux2304' direct represents '1' with '8460'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8460'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1268 + aux1271 + aux1272)<=1))
c Var 'aux2305' direct represents '0' with '-8461'
c Var 'aux2305' direct represents '1' with '8461'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8461'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1268 + aux1271 + aux1272)))
c Var 'aux2306' direct represents '0' with '-8462'
c Var 'aux2306' direct represents '1' with '8462'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8462'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1274 + aux1277 + aux1278)<=1))
c Var 'aux2307' direct represents '0' with '-8463'
c Var 'aux2307' direct represents '1' with '8463'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8463'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1274 + aux1277 + aux1278)))
c Var 'aux2308' direct represents '0' with '-8464'
c Var 'aux2308' direct represents '1' with '8464'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8464'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1280 + aux1283 + aux1284)<=1))
c Var 'aux2309' direct represents '0' with '-8465'
c Var 'aux2309' direct represents '1' with '8465'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8465'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1280 + aux1283 + aux1284)))
c Var 'aux2310' direct represents '0' with '-8466'
c Var 'aux2310' direct represents '1' with '8466'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8466'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1286 + aux1289 + aux1290)<=1))
c Var 'aux2311' direct represents '0' with '-8467'
c Var 'aux2311' direct represents '1' with '8467'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8467'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1286 + aux1289 + aux1290)))
c Var 'aux2312' direct represents '0' with '-8468'
c Var 'aux2312' direct represents '1' with '8468'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8468'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1292 + aux1295 + aux1296)<=1))
c Var 'aux2313' direct represents '0' with '-8469'
c Var 'aux2313' direct represents '1' with '8469'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8469'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1292 + aux1295 + aux1296)))
c Var 'aux2314' direct represents '0' with '-8470'
c Var 'aux2314' direct represents '1' with '8470'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8470'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1298 + aux1301 + aux1302)<=1))
c Var 'aux2315' direct represents '0' with '-8471'
c Var 'aux2315' direct represents '1' with '8471'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8471'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1298 + aux1301 + aux1302)))
c Var 'aux2316' direct represents '0' with '-8472'
c Var 'aux2316' direct represents '1' with '8472'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8472'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1304 + aux1307 + aux1308)<=1))
c Var 'aux2317' direct represents '0' with '-8473'
c Var 'aux2317' direct represents '1' with '8473'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8473'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1304 + aux1307 + aux1308)))
c Var 'aux2318' direct represents '0' with '-8474'
c Var 'aux2318' direct represents '1' with '8474'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8474'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1310 + aux1313 + aux1314)<=1))
c Var 'aux2319' direct represents '0' with '-8475'
c Var 'aux2319' direct represents '1' with '8475'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8475'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1310 + aux1313 + aux1314)))
c Var 'aux2320' direct represents '0' with '-8476'
c Var 'aux2320' direct represents '1' with '8476'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8476'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1316 + aux1319 + aux1320)<=1))
c Var 'aux2321' direct represents '0' with '-8477'
c Var 'aux2321' direct represents '1' with '8477'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8477'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1316 + aux1319 + aux1320)))
c Var 'aux2322' direct represents '0' with '-8478'
c Var 'aux2322' direct represents '1' with '8478'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8478'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1322 + aux1325 + aux1326)<=1))
c Var 'aux2323' direct represents '0' with '-8479'
c Var 'aux2323' direct represents '1' with '8479'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8479'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1322 + aux1325 + aux1326)))
c Var 'aux2324' direct represents '0' with '-8480'
c Var 'aux2324' direct represents '1' with '8480'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8480'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1328 + aux1331 + aux1332)<=1))
c Var 'aux2325' direct represents '0' with '-8481'
c Var 'aux2325' direct represents '1' with '8481'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8481'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1328 + aux1331 + aux1332)))
c Var 'aux2326' direct represents '0' with '-8482'
c Var 'aux2326' direct represents '1' with '8482'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8482'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1334 + aux1337 + aux1338)<=1))
c Var 'aux2327' direct represents '0' with '-8483'
c Var 'aux2327' direct represents '1' with '8483'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8483'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1334 + aux1337 + aux1338)))
c Var 'aux2328' direct represents '0' with '-8484'
c Var 'aux2328' direct represents '1' with '8484'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8484'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1340 + aux1343 + aux1344)<=1))
c Var 'aux2329' direct represents '0' with '-8485'
c Var 'aux2329' direct represents '1' with '8485'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8485'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1340 + aux1343 + aux1344)))
c Var 'aux2330' direct represents '0' with '-8486'
c Var 'aux2330' direct represents '1' with '8486'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8486'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1346 + aux1349 + aux1350)<=1))
c Var 'aux2331' direct represents '0' with '-8487'
c Var 'aux2331' direct represents '1' with '8487'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8487'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1346 + aux1349 + aux1350)))
c Var 'aux2332' direct represents '0' with '-8488'
c Var 'aux2332' direct represents '1' with '8488'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8488'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1352 + aux1355 + aux1356)<=1))
c Var 'aux2333' direct represents '0' with '-8489'
c Var 'aux2333' direct represents '1' with '8489'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8489'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1352 + aux1355 + aux1356)))
c Var 'aux2334' direct represents '0' with '-8490'
c Var 'aux2334' direct represents '1' with '8490'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8490'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1358 + aux1361 + aux1362)<=1))
c Var 'aux2335' direct represents '0' with '-8491'
c Var 'aux2335' direct represents '1' with '8491'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8491'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1358 + aux1361 + aux1362)))
c Var 'aux2336' direct represents '0' with '-8492'
c Var 'aux2336' direct represents '1' with '8492'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8492'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1364 + aux1367 + aux1368)<=1))
c Var 'aux2337' direct represents '0' with '-8493'
c Var 'aux2337' direct represents '1' with '8493'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8493'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1364 + aux1367 + aux1368)))
c Var 'aux2338' direct represents '0' with '-8494'
c Var 'aux2338' direct represents '1' with '8494'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8494'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1370 + aux1373 + aux1374)<=1))
c Var 'aux2339' direct represents '0' with '-8495'
c Var 'aux2339' direct represents '1' with '8495'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8495'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1370 + aux1373 + aux1374)))
c Var 'aux2340' direct represents '0' with '-8496'
c Var 'aux2340' direct represents '1' with '8496'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8496'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1376 + aux1379 + aux1380)<=1))
c Var 'aux2341' direct represents '0' with '-8497'
c Var 'aux2341' direct represents '1' with '8497'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8497'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1376 + aux1379 + aux1380)))
c Var 'aux2342' direct represents '0' with '-8498'
c Var 'aux2342' direct represents '1' with '8498'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8498'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1382 + aux1385 + aux1386)<=1))
c Var 'aux2343' direct represents '0' with '-8499'
c Var 'aux2343' direct represents '1' with '8499'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8499'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1382 + aux1385 + aux1386)))
c Var 'aux2344' direct represents '0' with '-8500'
c Var 'aux2344' direct represents '1' with '8500'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8500'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1388 + aux1391 + aux1392)<=1))
c Var 'aux2345' direct represents '0' with '-8501'
c Var 'aux2345' direct represents '1' with '8501'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8501'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1388 + aux1391 + aux1392)))
c Var 'aux2346' direct represents '0' with '-8502'
c Var 'aux2346' direct represents '1' with '8502'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8502'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1394 + aux1397 + aux1398)<=1))
c Var 'aux2347' direct represents '0' with '-8503'
c Var 'aux2347' direct represents '1' with '8503'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8503'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1394 + aux1397 + aux1398)))
c Var 'aux2348' direct represents '0' with '-8504'
c Var 'aux2348' direct represents '1' with '8504'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8504'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1400 + aux1403 + aux1404)<=1))
c Var 'aux2349' direct represents '0' with '-8505'
c Var 'aux2349' direct represents '1' with '8505'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8505'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1400 + aux1403 + aux1404)))
c Var 'aux2350' direct represents '0' with '-8506'
c Var 'aux2350' direct represents '1' with '8506'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8506'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1406 + aux1409 + aux1410)<=1))
c Var 'aux2351' direct represents '0' with '-8507'
c Var 'aux2351' direct represents '1' with '8507'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8507'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1406 + aux1409 + aux1410)))
c Var 'aux2352' direct represents '0' with '-8508'
c Var 'aux2352' direct represents '1' with '8508'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8508'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1412 + aux1415 + aux1416)<=1))
c Var 'aux2353' direct represents '0' with '-8509'
c Var 'aux2353' direct represents '1' with '8509'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8509'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1412 + aux1415 + aux1416)))
c Var 'aux2354' direct represents '0' with '-8510'
c Var 'aux2354' direct represents '1' with '8510'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8510'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1418 + aux1421 + aux1422)<=1))
c Var 'aux2355' direct represents '0' with '-8511'
c Var 'aux2355' direct represents '1' with '8511'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8511'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1418 + aux1421 + aux1422)))
c Var 'aux2356' direct represents '0' with '-8512'
c Var 'aux2356' direct represents '1' with '8512'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8512'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1424 + aux1427 + aux1428)<=1))
c Var 'aux2357' direct represents '0' with '-8513'
c Var 'aux2357' direct represents '1' with '8513'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8513'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1424 + aux1427 + aux1428)))
c Var 'aux2358' direct represents '0' with '-8514'
c Var 'aux2358' direct represents '1' with '8514'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8514'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1430 + aux1433 + aux1434)<=1))
c Var 'aux2359' direct represents '0' with '-8515'
c Var 'aux2359' direct represents '1' with '8515'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8515'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1430 + aux1433 + aux1434)))
c Var 'aux2360' direct represents '0' with '-8516'
c Var 'aux2360' direct represents '1' with '8516'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8516'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1436 + aux1439 + aux1440)<=1))
c Var 'aux2361' direct represents '0' with '-8517'
c Var 'aux2361' direct represents '1' with '8517'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8517'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1436 + aux1439 + aux1440)))
c Var 'aux2362' direct represents '0' with '-8518'
c Var 'aux2362' direct represents '1' with '8518'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8518'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1442 + aux1445 + aux1446)<=1))
c Var 'aux2363' direct represents '0' with '-8519'
c Var 'aux2363' direct represents '1' with '8519'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8519'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1442 + aux1445 + aux1446)))
c Var 'aux2364' direct represents '0' with '-8520'
c Var 'aux2364' direct represents '1' with '8520'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8520'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1448 + aux1451 + aux1452)<=1))
c Var 'aux2365' direct represents '0' with '-8521'
c Var 'aux2365' direct represents '1' with '8521'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8521'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1448 + aux1451 + aux1452)))
c Var 'aux2366' direct represents '0' with '-8522'
c Var 'aux2366' direct represents '1' with '8522'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8522'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1454 + aux1457 + aux1458)<=1))
c Var 'aux2367' direct represents '0' with '-8523'
c Var 'aux2367' direct represents '1' with '8523'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8523'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1454 + aux1457 + aux1458)))
c Var 'aux2368' direct represents '0' with '-8524'
c Var 'aux2368' direct represents '1' with '8524'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8524'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1460 + aux1463 + aux1464)<=1))
c Var 'aux2369' direct represents '0' with '-8525'
c Var 'aux2369' direct represents '1' with '8525'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8525'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1460 + aux1463 + aux1464)))
c Var 'aux2370' direct represents '0' with '-8526'
c Var 'aux2370' direct represents '1' with '8526'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8526'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1466 + aux1469 + aux1470)<=1))
c Var 'aux2371' direct represents '0' with '-8527'
c Var 'aux2371' direct represents '1' with '8527'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8527'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1466 + aux1469 + aux1470)))
c Var 'aux2372' direct represents '0' with '-8528'
c Var 'aux2372' direct represents '1' with '8528'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8528'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1472 + aux1475 + aux1476)<=1))
c Var 'aux2373' direct represents '0' with '-8529'
c Var 'aux2373' direct represents '1' with '8529'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8529'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1472 + aux1475 + aux1476)))
c Var 'aux2374' direct represents '0' with '-8530'
c Var 'aux2374' direct represents '1' with '8530'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8530'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1478 + aux1481 + aux1482)<=1))
c Var 'aux2375' direct represents '0' with '-8531'
c Var 'aux2375' direct represents '1' with '8531'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8531'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1478 + aux1481 + aux1482)))
c Var 'aux2376' direct represents '0' with '-8532'
c Var 'aux2376' direct represents '1' with '8532'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8532'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1484 + aux1487 + aux1488)<=1))
c Var 'aux2377' direct represents '0' with '-8533'
c Var 'aux2377' direct represents '1' with '8533'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8533'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1484 + aux1487 + aux1488)))
c Var 'aux2378' direct represents '0' with '-8534'
c Var 'aux2378' direct represents '1' with '8534'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8534'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1490 + aux1493 + aux1494)<=1))
c Var 'aux2379' direct represents '0' with '-8535'
c Var 'aux2379' direct represents '1' with '8535'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8535'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1490 + aux1493 + aux1494)))
c Var 'aux2380' direct represents '0' with '-8536'
c Var 'aux2380' direct represents '1' with '8536'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8536'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1496 + aux1499 + aux1500)<=1))
c Var 'aux2381' direct represents '0' with '-8537'
c Var 'aux2381' direct represents '1' with '8537'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8537'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1496 + aux1499 + aux1500)))
c Var 'aux2382' direct represents '0' with '-8538'
c Var 'aux2382' direct represents '1' with '8538'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8538'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1502 + aux1505 + aux1506)<=1))
c Var 'aux2383' direct represents '0' with '-8539'
c Var 'aux2383' direct represents '1' with '8539'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8539'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1502 + aux1505 + aux1506)))
c Var 'aux2384' direct represents '0' with '-8540'
c Var 'aux2384' direct represents '1' with '8540'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8540'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1508 + aux1511 + aux1512)<=1))
c Var 'aux2385' direct represents '0' with '-8541'
c Var 'aux2385' direct represents '1' with '8541'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8541'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1508 + aux1511 + aux1512)))
c Var 'aux2386' direct represents '0' with '-8542'
c Var 'aux2386' direct represents '1' with '8542'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8542'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1514 + aux1517 + aux1518)<=1))
c Var 'aux2387' direct represents '0' with '-8543'
c Var 'aux2387' direct represents '1' with '8543'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8543'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1514 + aux1517 + aux1518)))
c Var 'aux2388' direct represents '0' with '-8544'
c Var 'aux2388' direct represents '1' with '8544'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8544'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1520 + aux1523 + aux1524)<=1))
c Var 'aux2389' direct represents '0' with '-8545'
c Var 'aux2389' direct represents '1' with '8545'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8545'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1520 + aux1523 + aux1524)))
c Var 'aux2390' direct represents '0' with '-8546'
c Var 'aux2390' direct represents '1' with '8546'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8546'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1526 + aux1529 + aux1530)<=1))
c Var 'aux2391' direct represents '0' with '-8547'
c Var 'aux2391' direct represents '1' with '8547'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8547'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1526 + aux1529 + aux1530)))
c Var 'aux2392' direct represents '0' with '-8548'
c Var 'aux2392' direct represents '1' with '8548'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8548'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1532 + aux1535 + aux1536)<=1))
c Var 'aux2393' direct represents '0' with '-8549'
c Var 'aux2393' direct represents '1' with '8549'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8549'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1532 + aux1535 + aux1536)))
c Var 'aux2394' direct represents '0' with '-8550'
c Var 'aux2394' direct represents '1' with '8550'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8550'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1538 + aux1541 + aux1542)<=1))
c Var 'aux2395' direct represents '0' with '-8551'
c Var 'aux2395' direct represents '1' with '8551'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8551'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1538 + aux1541 + aux1542)))
c Var 'aux2396' direct represents '0' with '-8552'
c Var 'aux2396' direct represents '1' with '8552'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8552'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1544 + aux1547 + aux1548)<=1))
c Var 'aux2397' direct represents '0' with '-8553'
c Var 'aux2397' direct represents '1' with '8553'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8553'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1544 + aux1547 + aux1548)))
c Var 'aux2398' direct represents '0' with '-8554'
c Var 'aux2398' direct represents '1' with '8554'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8554'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1550 + aux1553 + aux1554)<=1))
c Var 'aux2399' direct represents '0' with '-8555'
c Var 'aux2399' direct represents '1' with '8555'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8555'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1550 + aux1553 + aux1554)))
c Var 'aux2400' direct represents '0' with '-8556'
c Var 'aux2400' direct represents '1' with '8556'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8556'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1556 + aux1559 + aux1560)<=1))
c Var 'aux2401' direct represents '0' with '-8557'
c Var 'aux2401' direct represents '1' with '8557'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8557'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1556 + aux1559 + aux1560)))
c Var 'aux2402' direct represents '0' with '-8558'
c Var 'aux2402' direct represents '1' with '8558'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8558'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1562 + aux1565 + aux1566)<=1))
c Var 'aux2403' direct represents '0' with '-8559'
c Var 'aux2403' direct represents '1' with '8559'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8559'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1562 + aux1565 + aux1566)))
c Var 'aux2404' direct represents '0' with '-8560'
c Var 'aux2404' direct represents '1' with '8560'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8560'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1568 + aux1571 + aux1572)<=1))
c Var 'aux2405' direct represents '0' with '-8561'
c Var 'aux2405' direct represents '1' with '8561'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8561'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1568 + aux1571 + aux1572)))
c Var 'aux2406' direct represents '0' with '-8562'
c Var 'aux2406' direct represents '1' with '8562'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8562'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1574 + aux1577 + aux1578)<=1))
c Var 'aux2407' direct represents '0' with '-8563'
c Var 'aux2407' direct represents '1' with '8563'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8563'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1574 + aux1577 + aux1578)))
c Var 'aux2408' direct represents '0' with '-8564'
c Var 'aux2408' direct represents '1' with '8564'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8564'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1580 + aux1583 + aux1584)<=1))
c Var 'aux2409' direct represents '0' with '-8565'
c Var 'aux2409' direct represents '1' with '8565'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8565'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1580 + aux1583 + aux1584)))
c Var 'aux2410' direct represents '0' with '-8566'
c Var 'aux2410' direct represents '1' with '8566'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8566'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1586 + aux1589 + aux1590)<=1))
c Var 'aux2411' direct represents '0' with '-8567'
c Var 'aux2411' direct represents '1' with '8567'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8567'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1586 + aux1589 + aux1590)))
c Var 'aux2412' direct represents '0' with '-8568'
c Var 'aux2412' direct represents '1' with '8568'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8568'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1592 + aux1595 + aux1596)<=1))
c Var 'aux2413' direct represents '0' with '-8569'
c Var 'aux2413' direct represents '1' with '8569'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8569'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1592 + aux1595 + aux1596)))
c Var 'aux2414' direct represents '0' with '-8570'
c Var 'aux2414' direct represents '1' with '8570'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8570'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1598 + aux1601 + aux1602)<=1))
c Var 'aux2415' direct represents '0' with '-8571'
c Var 'aux2415' direct represents '1' with '8571'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8571'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1598 + aux1601 + aux1602)))
c Var 'aux2416' direct represents '0' with '-8572'
c Var 'aux2416' direct represents '1' with '8572'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8572'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1604 + aux1607 + aux1608)<=1))
c Var 'aux2417' direct represents '0' with '-8573'
c Var 'aux2417' direct represents '1' with '8573'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8573'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1604 + aux1607 + aux1608)))
c Var 'aux2418' direct represents '0' with '-8574'
c Var 'aux2418' direct represents '1' with '8574'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8574'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1610 + aux1613 + aux1614)<=1))
c Var 'aux2419' direct represents '0' with '-8575'
c Var 'aux2419' direct represents '1' with '8575'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8575'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1610 + aux1613 + aux1614)))
c Var 'aux2420' direct represents '0' with '-8576'
c Var 'aux2420' direct represents '1' with '8576'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8576'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1616 + aux1619 + aux1620)<=1))
c Var 'aux2421' direct represents '0' with '-8577'
c Var 'aux2421' direct represents '1' with '8577'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8577'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1616 + aux1619 + aux1620)))
c Var 'aux2422' direct represents '0' with '-8578'
c Var 'aux2422' direct represents '1' with '8578'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8578'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1622 + aux1625 + aux1626)<=1))
c Var 'aux2423' direct represents '0' with '-8579'
c Var 'aux2423' direct represents '1' with '8579'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8579'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1622 + aux1625 + aux1626)))
c Var 'aux2424' direct represents '0' with '-8580'
c Var 'aux2424' direct represents '1' with '8580'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8580'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1628 + aux1631 + aux1632)<=1))
c Var 'aux2425' direct represents '0' with '-8581'
c Var 'aux2425' direct represents '1' with '8581'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8581'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1628 + aux1631 + aux1632)))
c Var 'aux2426' direct represents '0' with '-8582'
c Var 'aux2426' direct represents '1' with '8582'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8582'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1634 + aux1637 + aux1638)<=1))
c Var 'aux2427' direct represents '0' with '-8583'
c Var 'aux2427' direct represents '1' with '8583'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8583'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1634 + aux1637 + aux1638)))
c Var 'aux2428' direct represents '0' with '-8584'
c Var 'aux2428' direct represents '1' with '8584'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8584'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1640 + aux1643 + aux1644)<=1))
c Var 'aux2429' direct represents '0' with '-8585'
c Var 'aux2429' direct represents '1' with '8585'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8585'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1640 + aux1643 + aux1644)))
c Var 'aux2430' direct represents '0' with '-8586'
c Var 'aux2430' direct represents '1' with '8586'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8586'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1646 + aux1649 + aux1650)<=1))
c Var 'aux2431' direct represents '0' with '-8587'
c Var 'aux2431' direct represents '1' with '8587'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8587'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1646 + aux1649 + aux1650)))
c Var 'aux2432' direct represents '0' with '-8588'
c Var 'aux2432' direct represents '1' with '8588'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8588'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1652 + aux1655 + aux1656)<=1))
c Var 'aux2433' direct represents '0' with '-8589'
c Var 'aux2433' direct represents '1' with '8589'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8589'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1652 + aux1655 + aux1656)))
c Var 'aux2434' direct represents '0' with '-8590'
c Var 'aux2434' direct represents '1' with '8590'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8590'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1658 + aux1661 + aux1662)<=1))
c Var 'aux2435' direct represents '0' with '-8591'
c Var 'aux2435' direct represents '1' with '8591'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8591'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1658 + aux1661 + aux1662)))
c Var 'aux2436' direct represents '0' with '-8592'
c Var 'aux2436' direct represents '1' with '8592'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8592'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1664 + aux1667 + aux1668)<=1))
c Var 'aux2437' direct represents '0' with '-8593'
c Var 'aux2437' direct represents '1' with '8593'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8593'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1664 + aux1667 + aux1668)))
c Var 'aux2438' direct represents '0' with '-8594'
c Var 'aux2438' direct represents '1' with '8594'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8594'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1670 + aux1673 + aux1674)<=1))
c Var 'aux2439' direct represents '0' with '-8595'
c Var 'aux2439' direct represents '1' with '8595'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8595'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1670 + aux1673 + aux1674)))
c Var 'aux2440' direct represents '0' with '-8596'
c Var 'aux2440' direct represents '1' with '8596'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8596'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1676 + aux1679 + aux1680)<=1))
c Var 'aux2441' direct represents '0' with '-8597'
c Var 'aux2441' direct represents '1' with '8597'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8597'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1676 + aux1679 + aux1680)))
c Var 'aux2442' direct represents '0' with '-8598'
c Var 'aux2442' direct represents '1' with '8598'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8598'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1682 + aux1685 + aux1686)<=1))
c Var 'aux2443' direct represents '0' with '-8599'
c Var 'aux2443' direct represents '1' with '8599'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8599'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1682 + aux1685 + aux1686)))
c Var 'aux2444' direct represents '0' with '-8600'
c Var 'aux2444' direct represents '1' with '8600'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8600'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1688 + aux1691 + aux1692)<=1))
c Var 'aux2445' direct represents '0' with '-8601'
c Var 'aux2445' direct represents '1' with '8601'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8601'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1688 + aux1691 + aux1692)))
c Var 'aux2446' direct represents '0' with '-8602'
c Var 'aux2446' direct represents '1' with '8602'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8602'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1694 + aux1697 + aux1698)<=1))
c Var 'aux2447' direct represents '0' with '-8603'
c Var 'aux2447' direct represents '1' with '8603'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8603'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1694 + aux1697 + aux1698)))
c Var 'aux2448' direct represents '0' with '-8604'
c Var 'aux2448' direct represents '1' with '8604'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8604'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1700 + aux1703 + aux1704)<=1))
c Var 'aux2449' direct represents '0' with '-8605'
c Var 'aux2449' direct represents '1' with '8605'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8605'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1700 + aux1703 + aux1704)))
c Var 'aux2450' direct represents '0' with '-8606'
c Var 'aux2450' direct represents '1' with '8606'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8606'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1706 + aux1709 + aux1710)<=1))
c Var 'aux2451' direct represents '0' with '-8607'
c Var 'aux2451' direct represents '1' with '8607'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8607'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1706 + aux1709 + aux1710)))
c Var 'aux2452' direct represents '0' with '-8608'
c Var 'aux2452' direct represents '1' with '8608'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8608'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1712 + aux1715 + aux1716)<=1))
c Var 'aux2453' direct represents '0' with '-8609'
c Var 'aux2453' direct represents '1' with '8609'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8609'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1712 + aux1715 + aux1716)))
c Var 'aux2454' direct represents '0' with '-8610'
c Var 'aux2454' direct represents '1' with '8610'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8610'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1718 + aux1721 + aux1722)<=1))
c Var 'aux2455' direct represents '0' with '-8611'
c Var 'aux2455' direct represents '1' with '8611'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8611'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1718 + aux1721 + aux1722)))
c Var 'aux2456' direct represents '0' with '-8612'
c Var 'aux2456' direct represents '1' with '8612'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8612'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1724 + aux1727 + aux1728)<=1))
c Var 'aux2457' direct represents '0' with '-8613'
c Var 'aux2457' direct represents '1' with '8613'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8613'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1724 + aux1727 + aux1728)))
c Var 'aux2458' direct represents '0' with '-8614'
c Var 'aux2458' direct represents '1' with '8614'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8614'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1730 + aux1733 + aux1734)<=1))
c Var 'aux2459' direct represents '0' with '-8615'
c Var 'aux2459' direct represents '1' with '8615'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8615'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1730 + aux1733 + aux1734)))
c Var 'aux2460' direct represents '0' with '-8616'
c Var 'aux2460' direct represents '1' with '8616'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8616'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1736 + aux1739 + aux1740)<=1))
c Var 'aux2461' direct represents '0' with '-8617'
c Var 'aux2461' direct represents '1' with '8617'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8617'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1736 + aux1739 + aux1740)))
c Var 'aux2462' direct represents '0' with '-8618'
c Var 'aux2462' direct represents '1' with '8618'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8618'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1742 + aux1745 + aux1746)<=1))
c Var 'aux2463' direct represents '0' with '-8619'
c Var 'aux2463' direct represents '1' with '8619'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8619'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1742 + aux1745 + aux1746)))
c Var 'aux2464' direct represents '0' with '-8620'
c Var 'aux2464' direct represents '1' with '8620'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8620'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1748 + aux1751 + aux1752)<=1))
c Var 'aux2465' direct represents '0' with '-8621'
c Var 'aux2465' direct represents '1' with '8621'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8621'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1748 + aux1751 + aux1752)))
c Var 'aux2466' direct represents '0' with '-8622'
c Var 'aux2466' direct represents '1' with '8622'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8622'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1754 + aux1757 + aux1758)<=1))
c Var 'aux2467' direct represents '0' with '-8623'
c Var 'aux2467' direct represents '1' with '8623'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8623'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1754 + aux1757 + aux1758)))
c Var 'aux2468' direct represents '0' with '-8624'
c Var 'aux2468' direct represents '1' with '8624'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8624'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1760 + aux1763 + aux1764)<=1))
c Var 'aux2469' direct represents '0' with '-8625'
c Var 'aux2469' direct represents '1' with '8625'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8625'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1760 + aux1763 + aux1764)))
c Var 'aux2470' direct represents '0' with '-8626'
c Var 'aux2470' direct represents '1' with '8626'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8626'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1766 + aux1769 + aux1770)<=1))
c Var 'aux2471' direct represents '0' with '-8627'
c Var 'aux2471' direct represents '1' with '8627'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8627'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1766 + aux1769 + aux1770)))
c Var 'aux2472' direct represents '0' with '-8628'
c Var 'aux2472' direct represents '1' with '8628'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8628'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1772 + aux1775 + aux1776)<=1))
c Var 'aux2473' direct represents '0' with '-8629'
c Var 'aux2473' direct represents '1' with '8629'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8629'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1772 + aux1775 + aux1776)))
c Var 'aux2474' direct represents '0' with '-8630'
c Var 'aux2474' direct represents '1' with '8630'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8630'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1778 + aux1781 + aux1782)<=1))
c Var 'aux2475' direct represents '0' with '-8631'
c Var 'aux2475' direct represents '1' with '8631'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8631'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1778 + aux1781 + aux1782)))
c Var 'aux2476' direct represents '0' with '-8632'
c Var 'aux2476' direct represents '1' with '8632'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8632'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1784 + aux1787 + aux1788)<=1))
c Var 'aux2477' direct represents '0' with '-8633'
c Var 'aux2477' direct represents '1' with '8633'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-8633'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1784 + aux1787 + aux1788)))
c Var 'aux2478' direct represents '0' with '-8634'
c Var 'aux2478' direct represents '1' with '8634'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-8634'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1790 + aux1793 + aux1794)<=1))
c Var 'aux2479' direct represents '0' with '-8635'
c Var 'aux2479' direct represents '1' with '8635'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-8635'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1790 + aux1793 + aux1794)))
c Var 'aux2480' direct represents '0' with '-8636'
c Var 'aux2480' direct represents '1' with '8636'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-8636'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1796 + aux1799 + aux1800)<=1))
c Var 'aux2481' direct represents '0' with '-8637'
c Var 'aux2481' direct represents '1' with '8637'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-8637'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1796 + aux1799 + aux1800)))
c Var 'aux2482' direct represents '0' with '-8638'
c Var 'aux2482' direct represents '1' with '8638'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-8638'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1802 + aux1805 + aux1806)<=1))
c Var 'aux2483' direct represents '0' with '-8639'
c Var 'aux2483' direct represents '1' with '8639'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-8639'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1802 + aux1805 + aux1806)))
c Var 'aux2484' direct represents '0' with '-8640'
c Var 'aux2484' direct represents '1' with '8640'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-8640'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1808 + aux1811 + aux1812)<=1))
c Var 'aux2485' direct represents '0' with '-8641'
c Var 'aux2485' direct represents '1' with '8641'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-8641'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1808 + aux1811 + aux1812)))
c Var 'aux2486' direct represents '0' with '-8642'
c Var 'aux2486' direct represents '1' with '8642'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-8642'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1814 + aux1817 + aux1818)<=1))
c Var 'aux2487' direct represents '0' with '-8643'
c Var 'aux2487' direct represents '1' with '8643'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-8643'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1814 + aux1817 + aux1818)))
c Var 'aux2488' direct represents '0' with '-8644'
c Var 'aux2488' direct represents '1' with '8644'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-8644'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1820 + aux1823 + aux1824)<=1))
c Var 'aux2489' direct represents '0' with '-8645'
c Var 'aux2489' direct represents '1' with '8645'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-8645'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1820 + aux1823 + aux1824)))
c Var 'aux2490' direct represents '0' with '-8646'
c Var 'aux2490' direct represents '1' with '8646'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-8646'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1826 + aux1829 + aux1830)<=1))
c Var 'aux2491' direct represents '0' with '-8647'
c Var 'aux2491' direct represents '1' with '8647'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-8647'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1826 + aux1829 + aux1830)))
c Var 'aux2492' direct represents '0' with '-8648'
c Var 'aux2492' direct represents '1' with '8648'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-8648'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1832 + aux1835 + aux1836)<=1))
c Var 'aux2493' direct represents '0' with '-8649'
c Var 'aux2493' direct represents '1' with '8649'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-8649'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1832 + aux1835 + aux1836)))
c Var 'aux2494' direct represents '0' with '-8650'
c Var 'aux2494' direct represents '1' with '8650'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-8650'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1838 + aux1841 + aux1842)<=1))
c Var 'aux2495' direct represents '0' with '-8651'
c Var 'aux2495' direct represents '1' with '8651'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-8651'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1838 + aux1841 + aux1842)))
c Var 'aux2496' direct represents '0' with '-8652'
c Var 'aux2496' direct represents '1' with '8652'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-8652'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1844 + aux1847 + aux1848)<=1))
c Var 'aux2497' direct represents '0' with '-8653'
c Var 'aux2497' direct represents '1' with '8653'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-8653'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1844 + aux1847 + aux1848)))
c Var 'aux2498' direct represents '0' with '-8654'
c Var 'aux2498' direct represents '1' with '8654'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-8654'
c Encoding variable: aux2499 with domain: bool (representing constraint ((aux1850 + aux1853 + aux1854)<=1))
c Var 'aux2499' direct represents '0' with '-8655'
c Var 'aux2499' direct represents '1' with '8655'
c Var 'aux2499' order represents '1' with '1'
c Var 'aux2499' order represents '0' with '-8655'
c Encoding variable: aux2500 with domain: bool (representing constraint (1<=(aux1850 + aux1853 + aux1854)))
c Var 'aux2500' direct represents '0' with '-8656'
c Var 'aux2500' direct represents '1' with '8656'
c Var 'aux2500' order represents '1' with '1'
c Var 'aux2500' order represents '0' with '-8656'
c Encoding variable: aux2501 with domain: bool (representing constraint ((aux1856 + aux1859 + aux1860)<=1))
c Var 'aux2501' direct represents '0' with '-8657'
c Var 'aux2501' direct represents '1' with '8657'
c Var 'aux2501' order represents '1' with '1'
c Var 'aux2501' order represents '0' with '-8657'
c Encoding variable: aux2502 with domain: bool (representing constraint (1<=(aux1856 + aux1859 + aux1860)))
c Var 'aux2502' direct represents '0' with '-8658'
c Var 'aux2502' direct represents '1' with '8658'
c Var 'aux2502' order represents '1' with '1'
c Var 'aux2502' order represents '0' with '-8658'
c Encoding variable: aux2503 with domain: bool (representing constraint ((aux1862 + aux1865 + aux1866)<=1))
c Var 'aux2503' direct represents '0' with '-8659'
c Var 'aux2503' direct represents '1' with '8659'
c Var 'aux2503' order represents '1' with '1'
c Var 'aux2503' order represents '0' with '-8659'
c Encoding variable: aux2504 with domain: bool (representing constraint (1<=(aux1862 + aux1865 + aux1866)))
c Var 'aux2504' direct represents '0' with '-8660'
c Var 'aux2504' direct represents '1' with '8660'
c Var 'aux2504' order represents '1' with '1'
c Var 'aux2504' order represents '0' with '-8660'
c Encoding variable: aux2505 with domain: bool (representing constraint ((aux1868 + aux1871 + aux1872)<=1))
c Var 'aux2505' direct represents '0' with '-8661'
c Var 'aux2505' direct represents '1' with '8661'
c Var 'aux2505' order represents '1' with '1'
c Var 'aux2505' order represents '0' with '-8661'
c Encoding variable: aux2506 with domain: bool (representing constraint (1<=(aux1868 + aux1871 + aux1872)))
c Var 'aux2506' direct represents '0' with '-8662'
c Var 'aux2506' direct represents '1' with '8662'
c Var 'aux2506' order represents '1' with '1'
c Var 'aux2506' order represents '0' with '-8662'
c (((x_00002_00001 + x_00001_00001)<=11)=tv=SATLiteral(8119))
-8119 138 15 0
-8119 140 13 0
-8119 142 11 0
-8119 144 9 0
-8119 146 7 0
-8119 148 5 0
-8119 150 3 0
8119 -3 0
8119 -150 -5 0
8119 -148 -7 0
8119 -146 -9 0
8119 -144 -11 0
8119 -142 -13 0
8119 -140 -15 0
8119 -138 0
8119 -137 0
c ((11<=(x_00002_00001 + x_00001_00001))=tv=SATLiteral(8120))
-8120 -2 0
-8120 -150 -3 0
-8120 -148 -5 0
-8120 -146 -7 0
-8120 -144 -9 0
-8120 -142 -11 0
-8120 -140 -13 0
-8120 -138 -15 0
-8120 -137 0
8120 137 15 0
8120 138 13 0
8120 140 11 0
8120 142 9 0
8120 144 7 0
8120 146 5 0
8120 148 3 0
8120 150 2 0
c (((x_00002_00002 + x_00002_00003 + x_00001_00002)<=13)=tv=SATLiteral(8121))
-8121 170 30 0
-8121 172 28 0
-8121 174 26 0
-8121 176 24 0
-8121 178 22 0
-8121 180 20 0
-8121 152 168 30 0
-8121 152 170 28 0
-8121 152 172 26 0
-8121 152 174 24 0
-8121 152 176 22 0
-8121 152 178 20 0
-8121 152 180 18 0
-8121 153 167 30 0
-8121 153 168 28 0
-8121 153 170 26 0
-8121 153 172 24 0
-8121 153 174 22 0
-8121 153 176 20 0
-8121 153 178 18 0
-8121 153 180 17 0
-8121 155 30 0
-8121 155 167 28 0
-8121 155 168 26 0
-8121 155 170 24 0
-8121 155 172 22 0
-8121 155 174 20 0
-8121 155 176 18 0
-8121 155 178 17 0
-8121 155 180 0
-8121 157 28 0
-8121 157 167 26 0
-8121 157 168 24 0
-8121 157 170 22 0
-8121 157 172 20 0
-8121 157 174 18 0
-8121 157 176 17 0
-8121 157 178 0
-8121 157 180 0
-8121 159 26 0
-8121 159 167 24 0
-8121 159 168 22 0
-8121 159 170 20 0
-8121 159 172 18 0
-8121 159 174 17 0
-8121 159 176 0
-8121 159 178 0
-8121 159 180 0
-8121 161 24 0
-8121 161 167 22 0
-8121 161 168 20 0
-8121 161 170 18 0
-8121 161 172 17 0
-8121 161 174 0
-8121 161 176 0
-8121 161 178 0
-8121 161 180 0
-8121 163 22 0
-8121 163 167 20 0
-8121 163 168 18 0
-8121 163 170 17 0
-8121 163 172 0
-8121 163 174 0
-8121 163 176 0
-8121 163 178 0
-8121 163 180 0
-8121 165 20 0
-8121 165 167 18 0
-8121 165 168 17 0
-8121 165 170 0
-8121 165 172 0
-8121 165 174 0
-8121 165 176 0
-8121 165 178 0
-8121 165 180 0
8121 -170 -17 0
8121 -168 -18 0
8121 -167 -20 0
8121 -165 -172 -17 0
8121 -165 -170 -18 0
8121 -165 -168 -20 0
8121 -165 -167 -22 0
8121 -163 -174 -17 0
8121 -163 -172 -18 0
8121 -163 -170 -20 0
8121 -163 -168 -22 0
8121 -163 -167 -24 0
8121 -161 -176 -17 0
8121 -161 -174 -18 0
8121 -161 -172 -20 0
8121 -161 -170 -22 0
8121 -161 -168 -24 0
8121 -161 -167 -26 0
8121 -159 -178 -17 0
8121 -159 -176 -18 0
8121 -159 -174 -20 0
8121 -159 -172 -22 0
8121 -159 -170 -24 0
8121 -159 -168 -26 0
8121 -159 -167 -28 0
8121 -157 -180 -17 0
8121 -157 -178 -18 0
8121 -157 -176 -20 0
8121 -157 -174 -22 0
8121 -157 -172 -24 0
8121 -157 -170 -26 0
8121 -157 -168 -28 0
8121 -157 -167 -30 0
8121 -155 -17 0
8121 -155 -180 -18 0
8121 -155 -178 -20 0
8121 -155 -176 -22 0
8121 -155 -174 -24 0
8121 -155 -172 -26 0
8121 -155 -170 -28 0
8121 -155 -168 -30 0
8121 -155 -167 0
8121 -153 -18 0
8121 -153 -180 -20 0
8121 -153 -178 -22 0
8121 -153 -176 -24 0
8121 -153 -174 -26 0
8121 -153 -172 -28 0
8121 -153 -170 -30 0
8121 -153 -168 0
8121 -153 -167 0
8121 -152 -20 0
8121 -152 -180 -22 0
8121 -152 -178 -24 0
8121 -152 -176 -26 0
8121 -152 -174 -28 0
8121 -152 -172 -30 0
8121 -152 -170 0
8121 -152 -168 0
8121 -152 -167 0
c ((13<=(x_00002_00002 + x_00002_00003 + x_00001_00002))=tv=SATLiteral(8122))
-8122 -168 -17 0
-8122 -167 -18 0
-8122 -165 -170 -17 0
-8122 -165 -168 -18 0
-8122 -165 -167 -20 0
-8122 -163 -172 -17 0
-8122 -163 -170 -18 0
-8122 -163 -168 -20 0
-8122 -163 -167 -22 0
-8122 -161 -174 -17 0
-8122 -161 -172 -18 0
-8122 -161 -170 -20 0
-8122 -161 -168 -22 0
-8122 -161 -167 -24 0
-8122 -159 -176 -17 0
-8122 -159 -174 -18 0
-8122 -159 -172 -20 0
-8122 -159 -170 -22 0
-8122 -159 -168 -24 0
-8122 -159 -167 -26 0
-8122 -157 -178 -17 0
-8122 -157 -176 -18 0
-8122 -157 -174 -20 0
-8122 -157 -172 -22 0
-8122 -157 -170 -24 0
-8122 -157 -168 -26 0
-8122 -157 -167 -28 0
-8122 -155 -180 -17 0
-8122 -155 -178 -18 0
-8122 -155 -176 -20 0
-8122 -155 -174 -22 0
-8122 -155 -172 -24 0
-8122 -155 -170 -26 0
-8122 -155 -168 -28 0
-8122 -155 -167 -30 0
-8122 -153 -17 0
-8122 -153 -180 -18 0
-8122 -153 -178 -20 0
-8122 -153 -176 -22 0
-8122 -153 -174 -24 0
-8122 -153 -172 -26 0
-8122 -153 -170 -28 0
-8122 -153 -168 -30 0
-8122 -153 -167 0
-8122 -152 -18 0
-8122 -152 -180 -20 0
-8122 -152 -178 -22 0
-8122 -152 -176 -24 0
-8122 -152 -174 -26 0
-8122 -152 -172 -28 0
-8122 -152 -170 -30 0
-8122 -152 -168 0
-8122 -152 -167 0
8122 168 30 0
8122 170 28 0
8122 172 26 0
8122 174 24 0
8122 176 22 0
8122 178 20 0
8122 180 18 0
8122 152 167 30 0
8122 152 168 28 0
8122 152 170 26 0
8122 152 172 24 0
8122 152 174 22 0
8122 152 176 20 0
8122 152 178 18 0
8122 152 180 17 0
8122 153 30 0
8122 153 167 28 0
8122 153 168 26 0
8122 153 170 24 0
8122 153 172 22 0
8122 153 174 20 0
8122 153 176 18 0
8122 153 178 17 0
8122 153 180 0
8122 155 28 0
8122 155 167 26 0
8122 155 168 24 0
8122 155 170 22 0
8122 155 172 20 0
8122 155 174 18 0
8122 155 176 17 0
8122 155 178 0
8122 155 180 0
8122 157 26 0
8122 157 167 24 0
8122 157 168 22 0
8122 157 170 20 0
8122 157 172 18 0
8122 157 174 17 0
8122 157 176 0
8122 157 178 0
8122 157 180 0
8122 159 24 0
8122 159 167 22 0
8122 159 168 20 0
8122 159 170 18 0
8122 159 172 17 0
8122 159 174 0
8122 159 176 0
8122 159 178 0
8122 159 180 0
8122 161 22 0
8122 161 167 20 0
8122 161 168 18 0
8122 161 170 17 0
8122 161 172 0
8122 161 174 0
8122 161 176 0
8122 161 178 0
8122 161 180 0
8122 163 20 0
8122 163 167 18 0
8122 163 168 17 0
8122 163 170 0
8122 163 172 0
8122 163 174 0
8122 163 176 0
8122 163 178 0
8122 163 180 0
8122 165 18 0
8122 165 167 17 0
8122 165 168 0
8122 165 170 0
8122 165 172 0
8122 165 174 0
8122 165 176 0
8122 165 178 0
8122 165 180 0
c (((aux405 + shift(x_00001_00003, -1) + shift(x_00002_00005, -1))<=15)=tv=SATLiteral(8123))
-8123 1736 0
-8123 197 1734 0
-8123 198 1732 0
-8123 200 1730 0
-8123 202 1728 0
-8123 204 1726 0
-8123 206 1724 0
-8123 208 1722 0
-8123 210 1720 0
-8123 32 1734 0
-8123 32 197 1732 0
-8123 32 198 1730 0
-8123 32 200 1728 0
-8123 32 202 1726 0
-8123 32 204 1724 0
-8123 32 206 1722 0
-8123 32 208 1720 0
-8123 32 210 1718 0
-8123 33 1732 0
-8123 33 197 1730 0
-8123 33 198 1728 0
-8123 33 200 1726 0
-8123 33 202 1724 0
-8123 33 204 1722 0
-8123 33 206 1720 0
-8123 33 208 1718 0
-8123 33 210 1716 0
-8123 35 1730 0
-8123 35 197 1728 0
-8123 35 198 1726 0
-8123 35 200 1724 0
-8123 35 202 1722 0
-8123 35 204 1720 0
-8123 35 206 1718 0
-8123 35 208 1716 0
-8123 35 210 1714 0
-8123 37 1728 0
-8123 37 197 1726 0
-8123 37 198 1724 0
-8123 37 200 1722 0
-8123 37 202 1720 0
-8123 37 204 1718 0
-8123 37 206 1716 0
-8123 37 208 1714 0
-8123 37 210 1712 0
-8123 39 1726 0
-8123 39 197 1724 0
-8123 39 198 1722 0
-8123 39 200 1720 0
-8123 39 202 1718 0
-8123 39 204 1716 0
-8123 39 206 1714 0
-8123 39 208 1712 0
-8123 39 210 1710 0
-8123 41 1724 0
-8123 41 197 1722 0
-8123 41 198 1720 0
-8123 41 200 1718 0
-8123 41 202 1716 0
-8123 41 204 1714 0
-8123 41 206 1712 0
-8123 41 208 1710 0
-8123 41 210 1708 0
-8123 43 1722 0
-8123 43 197 1720 0
-8123 43 198 1718 0
-8123 43 200 1716 0
-8123 43 202 1714 0
-8123 43 204 1712 0
-8123 43 206 1710 0
-8123 43 208 1708 0
-8123 43 210 1707 0
-8123 45 1720 0
-8123 45 197 1718 0
-8123 45 198 1716 0
-8123 45 200 1714 0
-8123 45 202 1712 0
-8123 45 204 1710 0
-8123 45 206 1708 0
-8123 45 208 1707 0
-8123 45 210 0
8123 -210 -1707 0
8123 -208 -1708 0
8123 -206 -1710 0
8123 -204 -1712 0
8123 -202 -1714 0
8123 -200 -1716 0
8123 -198 -1718 0
8123 -197 -1720 0
8123 -45 -1707 0
8123 -45 -210 -1708 0
8123 -45 -208 -1710 0
8123 -45 -206 -1712 0
8123 -45 -204 -1714 0
8123 -45 -202 -1716 0
8123 -45 -200 -1718 0
8123 -45 -198 -1720 0
8123 -45 -197 -1722 0
8123 -43 -1708 0
8123 -43 -210 -1710 0
8123 -43 -208 -1712 0
8123 -43 -206 -1714 0
8123 -43 -204 -1716 0
8123 -43 -202 -1718 0
8123 -43 -200 -1720 0
8123 -43 -198 -1722 0
8123 -43 -197 -1724 0
8123 -41 -1710 0
8123 -41 -210 -1712 0
8123 -41 -208 -1714 0
8123 -41 -206 -1716 0
8123 -41 -204 -1718 0
8123 -41 -202 -1720 0
8123 -41 -200 -1722 0
8123 -41 -198 -1724 0
8123 -41 -197 -1726 0
8123 -39 -1712 0
8123 -39 -210 -1714 0
8123 -39 -208 -1716 0
8123 -39 -206 -1718 0
8123 -39 -204 -1720 0
8123 -39 -202 -1722 0
8123 -39 -200 -1724 0
8123 -39 -198 -1726 0
8123 -39 -197 -1728 0
8123 -37 -1714 0
8123 -37 -210 -1716 0
8123 -37 -208 -1718 0
8123 -37 -206 -1720 0
8123 -37 -204 -1722 0
8123 -37 -202 -1724 0
8123 -37 -200 -1726 0
8123 -37 -198 -1728 0
8123 -37 -197 -1730 0
8123 -35 -1716 0
8123 -35 -210 -1718 0
8123 -35 -208 -1720 0
8123 -35 -206 -1722 0
8123 -35 -204 -1724 0
8123 -35 -202 -1726 0
8123 -35 -200 -1728 0
8123 -35 -198 -1730 0
8123 -35 -197 -1732 0
8123 -33 -1718 0
8123 -33 -210 -1720 0
8123 -33 -208 -1722 0
8123 -33 -206 -1724 0
8123 -33 -204 -1726 0
8123 -33 -202 -1728 0
8123 -33 -200 -1730 0
8123 -33 -198 -1732 0
8123 -33 -197 -1734 0
8123 -32 -1720 0
8123 -32 -210 -1722 0
8123 -32 -208 -1724 0
8123 -32 -206 -1726 0
8123 -32 -204 -1728 0
8123 -32 -202 -1730 0
8123 -32 -200 -1732 0
8123 -32 -198 -1734 0
8123 -32 -197 -1736 0
c ((15<=(aux405 + shift(x_00001_00003, -1) + shift(x_00002_00005, -1)))=tv=SATLiteral(8124))
-8124 -208 -1707 0
-8124 -206 -1708 0
-8124 -204 -1710 0
-8124 -202 -1712 0
-8124 -200 -1714 0
-8124 -198 -1716 0
-8124 -197 -1718 0
-8124 -45 -210 -1707 0
-8124 -45 -208 -1708 0
-8124 -45 -206 -1710 0
-8124 -45 -204 -1712 0
-8124 -45 -202 -1714 0
-8124 -45 -200 -1716 0
-8124 -45 -198 -1718 0
-8124 -45 -197 -1720 0
-8124 -43 -1707 0
-8124 -43 -210 -1708 0
-8124 -43 -208 -1710 0
-8124 -43 -206 -1712 0
-8124 -43 -204 -1714 0
-8124 -43 -202 -1716 0
-8124 -43 -200 -1718 0
-8124 -43 -198 -1720 0
-8124 -43 -197 -1722 0
-8124 -41 -1708 0
-8124 -41 -210 -1710 0
-8124 -41 -208 -1712 0
-8124 -41 -206 -1714 0
-8124 -41 -204 -1716 0
-8124 -41 -202 -1718 0
-8124 -41 -200 -1720 0
-8124 -41 -198 -1722 0
-8124 -41 -197 -1724 0
-8124 -39 -1710 0
-8124 -39 -210 -1712 0
-8124 -39 -208 -1714 0
-8124 -39 -206 -1716 0
-8124 -39 -204 -1718 0
-8124 -39 -202 -1720 0
-8124 -39 -200 -1722 0
-8124 -39 -198 -1724 0
-8124 -39 -197 -1726 0
-8124 -37 -1712 0
-8124 -37 -210 -1714 0
-8124 -37 -208 -1716 0
-8124 -37 -206 -1718 0
-8124 -37 -204 -1720 0
-8124 -37 -202 -1722 0
-8124 -37 -200 -1724 0
-8124 -37 -198 -1726 0
-8124 -37 -197 -1728 0
-8124 -35 -1714 0
-8124 -35 -210 -1716 0
-8124 -35 -208 -1718 0
-8124 -35 -206 -1720 0
-8124 -35 -204 -1722 0
-8124 -35 -202 -1724 0
-8124 -35 -200 -1726 0
-8124 -35 -198 -1728 0
-8124 -35 -197 -1730 0
-8124 -33 -1716 0
-8124 -33 -210 -1718 0
-8124 -33 -208 -1720 0
-8124 -33 -206 -1722 0
-8124 -33 -204 -1724 0
-8124 -33 -202 -1726 0
-8124 -33 -200 -1728 0
-8124 -33 -198 -1730 0
-8124 -33 -197 -1732 0
-8124 -32 -1718 0
-8124 -32 -210 -1720 0
-8124 -32 -208 -1722 0
-8124 -32 -206 -1724 0
-8124 -32 -204 -1726 0
-8124 -32 -202 -1728 0
-8124 -32 -200 -1730 0
-8124 -32 -198 -1732 0
-8124 -32 -197 -1734 0
8124 1734 0
8124 197 1732 0
8124 198 1730 0
8124 200 1728 0
8124 202 1726 0
8124 204 1724 0
8124 206 1722 0
8124 208 1720 0
8124 210 1718 0
8124 32 1732 0
8124 32 197 1730 0
8124 32 198 1728 0
8124 32 200 1726 0
8124 32 202 1724 0
8124 32 204 1722 0
8124 32 206 1720 0
8124 32 208 1718 0
8124 32 210 1716 0
8124 33 1730 0
8124 33 197 1728 0
8124 33 198 1726 0
8124 33 200 1724 0
8124 33 202 1722 0
8124 33 204 1720 0
8124 33 206 1718 0
8124 33 208 1716 0
8124 33 210 1714 0
8124 35 1728 0
8124 35 197 1726 0
8124 35 198 1724 0
8124 35 200 1722 0
8124 35 202 1720 0
8124 35 204 1718 0
8124 35 206 1716 0
8124 35 208 1714 0
8124 35 210 1712 0
8124 37 1726 0
8124 37 197 1724 0
8124 37 198 1722 0
8124 37 200 1720 0
8124 37 202 1718 0
8124 37 204 1716 0
8124 37 206 1714 0
8124 37 208 1712 0
8124 37 210 1710 0
8124 39 1724 0
8124 39 197 1722 0
8124 39 198 1720 0
8124 39 200 1718 0
8124 39 202 1716 0
8124 39 204 1714 0
8124 39 206 1712 0
8124 39 208 1710 0
8124 39 210 1708 0
8124 41 1722 0
8124 41 197 1720 0
8124 41 198 1718 0
8124 41 200 1716 0
8124 41 202 1714 0
8124 41 204 1712 0
8124 41 206 1710 0
8124 41 208 1708 0
8124 41 210 1707 0
8124 43 1720 0
8124 43 197 1718 0
8124 43 198 1716 0
8124 43 200 1714 0
8124 43 202 1712 0
8124 43 204 1710 0
8124 43 206 1708 0
8124 43 208 1707 0
8124 43 210 0
8124 45 1718 0
8124 45 197 1716 0
8124 45 198 1714 0
8124 45 200 1712 0
8124 45 202 1710 0
8124 45 204 1708 0
8124 45 206 1707 0
8124 45 208 0
8124 45 210 0
c (((x_00001_00005 + x_00001_00006 + x_00001_00007)<=17)=tv=SATLiteral(8125))
-8125 88 105 0
-8125 90 103 0
-8125 62 86 105 0
-8125 62 88 103 0
-8125 62 90 101 0
-8125 63 84 105 0
-8125 63 86 103 0
-8125 63 88 101 0
-8125 63 90 99 0
-8125 65 82 105 0
-8125 65 84 103 0
-8125 65 86 101 0
-8125 65 88 99 0
-8125 65 90 97 0
-8125 67 80 105 0
-8125 67 82 103 0
-8125 67 84 101 0
-8125 67 86 99 0
-8125 67 88 97 0
-8125 67 90 95 0
-8125 69 78 105 0
-8125 69 80 103 0
-8125 69 82 101 0
-8125 69 84 99 0
-8125 69 86 97 0
-8125 69 88 95 0
-8125 69 90 93 0
-8125 71 77 105 0
-8125 71 78 103 0
-8125 71 80 101 0
-8125 71 82 99 0
-8125 71 84 97 0
-8125 71 86 95 0
-8125 71 88 93 0
-8125 71 90 92 0
-8125 73 105 0
-8125 73 77 103 0
-8125 73 78 101 0
-8125 73 80 99 0
-8125 73 82 97 0
-8125 73 84 95 0
-8125 73 86 93 0
-8125 73 88 92 0
-8125 73 90 0
-8125 75 103 0
-8125 75 77 101 0
-8125 75 78 99 0
-8125 75 80 97 0
-8125 75 82 95 0
-8125 75 84 93 0
-8125 75 86 92 0
-8125 75 88 0
-8125 75 90 0
8125 -88 -92 0
8125 -86 -93 0
8125 -84 -95 0
8125 -82 -97 0
8125 -80 -99 0
8125 -78 -101 0
8125 -77 -103 0
8125 -75 -90 -92 0
8125 -75 -88 -93 0
8125 -75 -86 -95 0
8125 -75 -84 -97 0
8125 -75 -82 -99 0
8125 -75 -80 -101 0
8125 -75 -78 -103 0
8125 -75 -77 -105 0
8125 -73 -92 0
8125 -73 -90 -93 0
8125 -73 -88 -95 0
8125 -73 -86 -97 0
8125 -73 -84 -99 0
8125 -73 -82 -101 0
8125 -73 -80 -103 0
8125 -73 -78 -105 0
8125 -73 -77 0
8125 -71 -93 0
8125 -71 -90 -95 0
8125 -71 -88 -97 0
8125 -71 -86 -99 0
8125 -71 -84 -101 0
8125 -71 -82 -103 0
8125 -71 -80 -105 0
8125 -71 -78 0
8125 -71 -77 0
8125 -69 -95 0
8125 -69 -90 -97 0
8125 -69 -88 -99 0
8125 -69 -86 -101 0
8125 -69 -84 -103 0
8125 -69 -82 -105 0
8125 -69 -80 0
8125 -69 -78 0
8125 -69 -77 0
8125 -67 -97 0
8125 -67 -90 -99 0
8125 -67 -88 -101 0
8125 -67 -86 -103 0
8125 -67 -84 -105 0
8125 -67 -82 0
8125 -67 -80 0
8125 -67 -78 0
8125 -67 -77 0
8125 -65 -99 0
8125 -65 -90 -101 0
8125 -65 -88 -103 0
8125 -65 -86 -105 0
8125 -65 -84 0
8125 -65 -82 0
8125 -65 -80 0
8125 -65 -78 0
8125 -65 -77 0
8125 -63 -101 0
8125 -63 -90 -103 0
8125 -63 -88 -105 0
8125 -63 -86 0
8125 -63 -84 0
8125 -63 -82 0
8125 -63 -80 0
8125 -63 -78 0
8125 -63 -77 0
8125 -62 -103 0
8125 -62 -90 -105 0
8125 -62 -88 0
8125 -62 -86 0
8125 -62 -84 0
8125 -62 -82 0
8125 -62 -80 0
8125 -62 -78 0
8125 -62 -77 0
c ((17<=(x_00001_00005 + x_00001_00006 + x_00001_00007))=tv=SATLiteral(8126))
-8126 -86 -92 0
-8126 -84 -93 0
-8126 -82 -95 0
-8126 -80 -97 0
-8126 -78 -99 0
-8126 -77 -101 0
-8126 -75 -88 -92 0
-8126 -75 -86 -93 0
-8126 -75 -84 -95 0
-8126 -75 -82 -97 0
-8126 -75 -80 -99 0
-8126 -75 -78 -101 0
-8126 -75 -77 -103 0
-8126 -73 -90 -92 0
-8126 -73 -88 -93 0
-8126 -73 -86 -95 0
-8126 -73 -84 -97 0
-8126 -73 -82 -99 0
-8126 -73 -80 -101 0
-8126 -73 -78 -103 0
-8126 -73 -77 -105 0
-8126 -71 -92 0
-8126 -71 -90 -93 0
-8126 -71 -88 -95 0
-8126 -71 -86 -97 0
-8126 -71 -84 -99 0
-8126 -71 -82 -101 0
-8126 -71 -80 -103 0
-8126 -71 -78 -105 0
-8126 -71 -77 0
-8126 -69 -93 0
-8126 -69 -90 -95 0
-8126 -69 -88 -97 0
-8126 -69 -86 -99 0
-8126 -69 -84 -101 0
-8126 -69 -82 -103 0
-8126 -69 -80 -105 0
-8126 -69 -78 0
-8126 -69 -77 0
-8126 -67 -95 0
-8126 -67 -90 -97 0
-8126 -67 -88 -99 0
-8126 -67 -86 -101 0
-8126 -67 -84 -103 0
-8126 -67 -82 -105 0
-8126 -67 -80 0
-8126 -67 -78 0
-8126 -67 -77 0
-8126 -65 -97 0
-8126 -65 -90 -99 0
-8126 -65 -88 -101 0
-8126 -65 -86 -103 0
-8126 -65 -84 -105 0
-8126 -65 -82 0
-8126 -65 -80 0
-8126 -65 -78 0
-8126 -65 -77 0
-8126 -63 -99 0
-8126 -63 -90 -101 0
-8126 -63 -88 -103 0
-8126 -63 -86 -105 0
-8126 -63 -84 0
-8126 -63 -82 0
-8126 -63 -80 0
-8126 -63 -78 0
-8126 -63 -77 0
-8126 -62 -101 0
-8126 -62 -90 -103 0
-8126 -62 -88 -105 0
-8126 -62 -86 0
-8126 -62 -84 0
-8126 -62 -82 0
-8126 -62 -80 0
-8126 -62 -78 0
-8126 -62 -77 0
8126 86 105 0
8126 88 103 0
8126 90 101 0
8126 62 84 105 0
8126 62 86 103 0
8126 62 88 101 0
8126 62 90 99 0
8126 63 82 105 0
8126 63 84 103 0
8126 63 86 101 0
8126 63 88 99 0
8126 63 90 97 0
8126 65 80 105 0
8126 65 82 103 0
8126 65 84 101 0
8126 65 86 99 0
8126 65 88 97 0
8126 65 90 95 0
8126 67 78 105 0
8126 67 80 103 0
8126 67 82 101 0
8126 67 84 99 0
8126 67 86 97 0
8126 67 88 95 0
8126 67 90 93 0
8126 69 77 105 0
8126 69 78 103 0
8126 69 80 101 0
8126 69 82 99 0
8126 69 84 97 0
8126 69 86 95 0
8126 69 88 93 0
8126 69 90 92 0
8126 71 105 0
8126 71 77 103 0
8126 71 78 101 0
8126 71 80 99 0
8126 71 82 97 0
8126 71 84 95 0
8126 71 86 93 0
8126 71 88 92 0
8126 71 90 0
8126 73 103 0
8126 73 77 101 0
8126 73 78 99 0
8126 73 80 97 0
8126 73 82 95 0
8126 73 84 93 0
8126 73 86 92 0
8126 73 88 0
8126 73 90 0
8126 75 101 0
8126 75 77 99 0
8126 75 78 97 0
8126 75 80 95 0
8126 75 82 93 0
8126 75 84 92 0
8126 75 86 0
8126 75 88 0
8126 75 90 0
c (((aux406 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1))<=17)=tv=SATLiteral(8127))
-8127 258 1767 0
-8127 260 1765 0
-8127 262 1763 0
-8127 264 1761 0
-8127 266 1759 0
-8127 268 1757 0
-8127 270 1755 0
-8127 107 257 1767 0
-8127 107 258 1765 0
-8127 107 260 1763 0
-8127 107 262 1761 0
-8127 107 264 1759 0
-8127 107 266 1757 0
-8127 107 268 1755 0
-8127 107 270 1753 0
-8127 108 1767 0
-8127 108 257 1765 0
-8127 108 258 1763 0
-8127 108 260 1761 0
-8127 108 262 1759 0
-8127 108 264 1757 0
-8127 108 266 1755 0
-8127 108 268 1753 0
-8127 108 270 1751 0
-8127 110 1765 0
-8127 110 257 1763 0
-8127 110 258 1761 0
-8127 110 260 1759 0
-8127 110 262 1757 0
-8127 110 264 1755 0
-8127 110 266 1753 0
-8127 110 268 1751 0
-8127 110 270 1749 0
-8127 112 1763 0
-8127 112 257 1761 0
-8127 112 258 1759 0
-8127 112 260 1757 0
-8127 112 262 1755 0
-8127 112 264 1753 0
-8127 112 266 1751 0
-8127 112 268 1749 0
-8127 112 270 1747 0
-8127 114 1761 0
-8127 114 257 1759 0
-8127 114 258 1757 0
-8127 114 260 1755 0
-8127 114 262 1753 0
-8127 114 264 1751 0
-8127 114 266 1749 0
-8127 114 268 1747 0
-8127 114 270 1745 0
-8127 116 1759 0
-8127 116 257 1757 0
-8127 116 258 1755 0
-8127 116 260 1753 0
-8127 116 262 1751 0
-8127 116 264 1749 0
-8127 116 266 1747 0
-8127 116 268 1745 0
-8127 116 270 1743 0
-8127 118 1757 0
-8127 118 257 1755 0
-8127 118 258 1753 0
-8127 118 260 1751 0
-8127 118 262 1749 0
-8127 118 264 1747 0
-8127 118 266 1745 0
-8127 118 268 1743 0
-8127 118 270 1741 0
-8127 120 1755 0
-8127 120 257 1753 0
-8127 120 258 1751 0
-8127 120 260 1749 0
-8127 120 262 1747 0
-8127 120 264 1745 0
-8127 120 266 1743 0
-8127 120 268 1741 0
-8127 120 270 1739 0
8127 -1739 0
8127 -270 -1741 0
8127 -268 -1743 0
8127 -266 -1745 0
8127 -264 -1747 0
8127 -262 -1749 0
8127 -260 -1751 0
8127 -258 -1753 0
8127 -257 -1755 0
8127 -120 -1741 0
8127 -120 -270 -1743 0
8127 -120 -268 -1745 0
8127 -120 -266 -1747 0
8127 -120 -264 -1749 0
8127 -120 -262 -1751 0
8127 -120 -260 -1753 0
8127 -120 -258 -1755 0
8127 -120 -257 -1757 0
8127 -118 -1743 0
8127 -118 -270 -1745 0
8127 -118 -268 -1747 0
8127 -118 -266 -1749 0
8127 -118 -264 -1751 0
8127 -118 -262 -1753 0
8127 -118 -260 -1755 0
8127 -118 -258 -1757 0
8127 -118 -257 -1759 0
8127 -116 -1745 0
8127 -116 -270 -1747 0
8127 -116 -268 -1749 0
8127 -116 -266 -1751 0
8127 -116 -264 -1753 0
8127 -116 -262 -1755 0
8127 -116 -260 -1757 0
8127 -116 -258 -1759 0
8127 -116 -257 -1761 0
8127 -114 -1747 0
8127 -114 -270 -1749 0
8127 -114 -268 -1751 0
8127 -114 -266 -1753 0
8127 -114 -264 -1755 0
8127 -114 -262 -1757 0
8127 -114 -260 -1759 0
8127 -114 -258 -1761 0
8127 -114 -257 -1763 0
8127 -112 -1749 0
8127 -112 -270 -1751 0
8127 -112 -268 -1753 0
8127 -112 -266 -1755 0
8127 -112 -264 -1757 0
8127 -112 -262 -1759 0
8127 -112 -260 -1761 0
8127 -112 -258 -1763 0
8127 -112 -257 -1765 0
8127 -110 -1751 0
8127 -110 -270 -1753 0
8127 -110 -268 -1755 0
8127 -110 -266 -1757 0
8127 -110 -264 -1759 0
8127 -110 -262 -1761 0
8127 -110 -260 -1763 0
8127 -110 -258 -1765 0
8127 -110 -257 -1767 0
8127 -108 -1753 0
8127 -108 -270 -1755 0
8127 -108 -268 -1757 0
8127 -108 -266 -1759 0
8127 -108 -264 -1761 0
8127 -108 -262 -1763 0
8127 -108 -260 -1765 0
8127 -108 -258 -1767 0
8127 -108 -257 0
8127 -107 -1755 0
8127 -107 -270 -1757 0
8127 -107 -268 -1759 0
8127 -107 -266 -1761 0
8127 -107 -264 -1763 0
8127 -107 -262 -1765 0
8127 -107 -260 -1767 0
8127 -107 -258 0
8127 -107 -257 0
c ((17<=(aux406 + shift(x_00001_00008, -1) + shift(x_00002_00009, -1)))=tv=SATLiteral(8128))
-8128 -1738 0
-8128 -270 -1739 0
-8128 -268 -1741 0
-8128 -266 -1743 0
-8128 -264 -1745 0
-8128 -262 -1747 0
-8128 -260 -1749 0
-8128 -258 -1751 0
-8128 -257 -1753 0
-8128 -120 -1739 0
-8128 -120 -270 -1741 0
-8128 -120 -268 -1743 0
-8128 -120 -266 -1745 0
-8128 -120 -264 -1747 0
-8128 -120 -262 -1749 0
-8128 -120 -260 -1751 0
-8128 -120 -258 -1753 0
-8128 -120 -257 -1755 0
-8128 -118 -1741 0
-8128 -118 -270 -1743 0
-8128 -118 -268 -1745 0
-8128 -118 -266 -1747 0
-8128 -118 -264 -1749 0
-8128 -118 -262 -1751 0
-8128 -118 -260 -1753 0
-8128 -118 -258 -1755 0
-8128 -118 -257 -1757 0
-8128 -116 -1743 0
-8128 -116 -270 -1745 0
-8128 -116 -268 -1747 0
-8128 -116 -266 -1749 0
-8128 -116 -264 -1751 0
-8128 -116 -262 -1753 0
-8128 -116 -260 -1755 0
-8128 -116 -258 -1757 0
-8128 -116 -257 -1759 0
-8128 -114 -1745 0
-8128 -114 -270 -1747 0
-8128 -114 -268 -1749 0
-8128 -114 -266 -1751 0
-8128 -114 -264 -1753 0
-8128 -114 -262 -1755 0
-8128 -114 -260 -1757 0
-8128 -114 -258 -1759 0
-8128 -114 -257 -1761 0
-8128 -112 -1747 0
-8128 -112 -270 -1749 0
-8128 -112 -268 -1751 0
-8128 -112 -266 -1753 0
-8128 -112 -264 -1755 0
-8128 -112 -262 -1757 0
-8128 -112 -260 -1759 0
-8128 -112 -258 -1761 0
-8128 -112 -257 -1763 0
-8128 -110 -1749 0
-8128 -110 -270 -1751 0
-8128 -110 -268 -1753 0
-8128 -110 -266 -1755 0
-8128 -110 -264 -1757 0
-8128 -110 -262 -1759 0
-8128 -110 -260 -1761 0
-8128 -110 -258 -1763 0
-8128 -110 -257 -1765 0
-8128 -108 -1751 0
-8128 -108 -270 -1753 0
-8128 -108 -268 -1755 0
-8128 -108 -266 -1757 0
-8128 -108 -264 -1759 0
-8128 -108 -262 -1761 0
-8128 -108 -260 -1763 0
-8128 -108 -258 -1765 0
-8128 -108 -257 -1767 0
-8128 -107 -1753 0
-8128 -107 -270 -1755 0
-8128 -107 -268 -1757 0
-8128 -107 -266 -1759 0
-8128 -107 -264 -1761 0
-8128 -107 -262 -1763 0
-8128 -107 -260 -1765 0
-8128 -107 -258 -1767 0
-8128 -107 -257 0
8128 257 1767 0
8128 258 1765 0
8128 260 1763 0
8128 262 1761 0
8128 264 1759 0
8128 266 1757 0
8128 268 1755 0
8128 270 1753 0
8128 107 1767 0
8128 107 257 1765 0
8128 107 258 1763 0
8128 107 260 1761 0
8128 107 262 1759 0
8128 107 264 1757 0
8128 107 266 1755 0
8128 107 268 1753 0
8128 107 270 1751 0
8128 108 1765 0
8128 108 257 1763 0
8128 108 258 1761 0
8128 108 260 1759 0
8128 108 262 1757 0
8128 108 264 1755 0
8128 108 266 1753 0
8128 108 268 1751 0
8128 108 270 1749 0
8128 110 1763 0
8128 110 257 1761 0
8128 110 258 1759 0
8128 110 260 1757 0
8128 110 262 1755 0
8128 110 264 1753 0
8128 110 266 1751 0
8128 110 268 1749 0
8128 110 270 1747 0
8128 112 1761 0
8128 112 257 1759 0
8128 112 258 1757 0
8128 112 260 1755 0
8128 112 262 1753 0
8128 112 264 1751 0
8128 112 266 1749 0
8128 112 268 1747 0
8128 112 270 1745 0
8128 114 1759 0
8128 114 257 1757 0
8128 114 258 1755 0
8128 114 260 1753 0
8128 114 262 1751 0
8128 114 264 1749 0
8128 114 266 1747 0
8128 114 268 1745 0
8128 114 270 1743 0
8128 116 1757 0
8128 116 257 1755 0
8128 116 258 1753 0
8128 116 260 1751 0
8128 116 262 1749 0
8128 116 264 1747 0
8128 116 266 1745 0
8128 116 268 1743 0
8128 116 270 1741 0
8128 118 1755 0
8128 118 257 1753 0
8128 118 258 1751 0
8128 118 260 1749 0
8128 118 262 1747 0
8128 118 264 1745 0
8128 118 266 1743 0
8128 118 268 1741 0
8128 118 270 1739 0
8128 120 1753 0
8128 120 257 1751 0
8128 120 258 1749 0
8128 120 260 1747 0
8128 120 262 1745 0
8128 120 264 1743 0
8128 120 266 1741 0
8128 120 268 1739 0
8128 120 270 1738 0
c (((x_00002_00006 + x_00002_00007)<=9)=tv=SATLiteral(8129))
-8129 240 0
-8129 212 238 0
-8129 213 236 0
-8129 215 234 0
-8129 217 232 0
-8129 219 230 0
-8129 221 228 0
-8129 223 227 0
-8129 225 0
8129 -225 -227 0
8129 -223 -228 0
8129 -221 -230 0
8129 -219 -232 0
8129 -217 -234 0
8129 -215 -236 0
8129 -213 -238 0
8129 -212 -240 0
c ((9<=(x_00002_00006 + x_00002_00007))=tv=SATLiteral(8130))
-8130 -223 -227 0
-8130 -221 -228 0
-8130 -219 -230 0
-8130 -217 -232 0
-8130 -215 -234 0
-8130 -213 -236 0
-8130 -212 -238 0
8130 238 0
8130 212 236 0
8130 213 234 0
8130 215 232 0
8130 217 230 0
8130 219 228 0
8130 221 227 0
8130 223 0
8130 225 0
c (((x_00003_00001 + x_00003_00002)<=17)=tv=SATLiteral(8131))
-8131 285 300 0
8131 -300 0
8131 -285 0
8131 -283 0
8131 -281 0
8131 -279 0
8131 -277 0
8131 -275 0
8131 -273 0
8131 -272 0
c ((17<=(x_00003_00001 + x_00003_00002))=tv=SATLiteral(8132))
-8132 -298 0
-8132 -285 -300 0
-8132 -283 0
-8132 -281 0
-8132 -279 0
-8132 -277 0
-8132 -275 0
-8132 -273 0
-8132 -272 0
8132 283 300 0
8132 285 298 0
c (((aux407 + aux408 + aux409)<=27)=tv=SATLiteral(8133))
-8133 1821 1860 0
-8133 1823 1858 0
-8133 1825 1856 0
-8133 1827 1854 0
-8133 1829 1852 0
-8133 1769 1819 1860 0
-8133 1769 1821 1858 0
-8133 1769 1823 1856 0
-8133 1769 1825 1854 0
-8133 1769 1827 1852 0
-8133 1769 1829 1850 0
-8133 1770 1817 1860 0
-8133 1770 1819 1858 0
-8133 1770 1821 1856 0
-8133 1770 1823 1854 0
-8133 1770 1825 1852 0
-8133 1770 1827 1850 0
-8133 1770 1829 1848 0
-8133 1772 1815 1860 0
-8133 1772 1817 1858 0
-8133 1772 1819 1856 0
-8133 1772 1821 1854 0
-8133 1772 1823 1852 0
-8133 1772 1825 1850 0
-8133 1772 1827 1848 0
-8133 1772 1829 1846 0
-8133 1774 1813 1860 0
-8133 1774 1815 1858 0
-8133 1774 1817 1856 0
-8133 1774 1819 1854 0
-8133 1774 1821 1852 0
-8133 1774 1823 1850 0
-8133 1774 1825 1848 0
-8133 1774 1827 1846 0
-8133 1774 1829 1844 0
-8133 1776 1811 1860 0
-8133 1776 1813 1858 0
-8133 1776 1815 1856 0
-8133 1776 1817 1854 0
-8133 1776 1819 1852 0
-8133 1776 1821 1850 0
-8133 1776 1823 1848 0
-8133 1776 1825 1846 0
-8133 1776 1827 1844 0
-8133 1776 1829 1842 0
-8133 1778 1809 1860 0
-8133 1778 1811 1858 0
-8133 1778 1813 1856 0
-8133 1778 1815 1854 0
-8133 1778 1817 1852 0
-8133 1778 1819 1850 0
-8133 1778 1821 1848 0
-8133 1778 1823 1846 0
-8133 1778 1825 1844 0
-8133 1778 1827 1842 0
-8133 1778 1829 1840 0
-8133 1780 1807 1860 0
-8133 1780 1809 1858 0
-8133 1780 1811 1856 0
-8133 1780 1813 1854 0
-8133 1780 1815 1852 0
-8133 1780 1817 1850 0
-8133 1780 1819 1848 0
-8133 1780 1821 1846 0
-8133 1780 1823 1844 0
-8133 1780 1825 1842 0
-8133 1780 1827 1840 0
-8133 1780 1829 1838 0
-8133 1782 1805 1860 0
-8133 1782 1807 1858 0
-8133 1782 1809 1856 0
-8133 1782 1811 1854 0
-8133 1782 1813 1852 0
-8133 1782 1815 1850 0
-8133 1782 1817 1848 0
-8133 1782 1819 1846 0
-8133 1782 1821 1844 0
-8133 1782 1823 1842 0
-8133 1782 1825 1840 0
-8133 1782 1827 1838 0
-8133 1782 1829 1836 0
-8133 1784 1803 1860 0
-8133 1784 1805 1858 0
-8133 1784 1807 1856 0
-8133 1784 1809 1854 0
-8133 1784 1811 1852 0
-8133 1784 1813 1850 0
-8133 1784 1815 1848 0
-8133 1784 1817 1846 0
-8133 1784 1819 1844 0
-8133 1784 1821 1842 0
-8133 1784 1823 1840 0
-8133 1784 1825 1838 0
-8133 1784 1827 1836 0
-8133 1784 1829 1834 0
-8133 1786 1801 1860 0
-8133 1786 1803 1858 0
-8133 1786 1805 1856 0
-8133 1786 1807 1854 0
-8133 1786 1809 1852 0
-8133 1786 1811 1850 0
-8133 1786 1813 1848 0
-8133 1786 1815 1846 0
-8133 1786 1817 1844 0
-8133 1786 1819 1842 0
-8133 1786 1821 1840 0
-8133 1786 1823 1838 0
-8133 1786 1825 1836 0
-8133 1786 1827 1834 0
-8133 1786 1829 1832 0
-8133 1788 1800 1860 0
-8133 1788 1801 1858 0
-8133 1788 1803 1856 0
-8133 1788 1805 1854 0
-8133 1788 1807 1852 0
-8133 1788 1809 1850 0
-8133 1788 1811 1848 0
-8133 1788 1813 1846 0
-8133 1788 1815 1844 0
-8133 1788 1817 1842 0
-8133 1788 1819 1840 0
-8133 1788 1821 1838 0
-8133 1788 1823 1836 0
-8133 1788 1825 1834 0
-8133 1788 1827 1832 0
-8133 1788 1829 1831 0
-8133 1790 1860 0
-8133 1790 1800 1858 0
-8133 1790 1801 1856 0
-8133 1790 1803 1854 0
-8133 1790 1805 1852 0
-8133 1790 1807 1850 0
-8133 1790 1809 1848 0
-8133 1790 1811 1846 0
-8133 1790 1813 1844 0
-8133 1790 1815 1842 0
-8133 1790 1817 1840 0
-8133 1790 1819 1838 0
-8133 1790 1821 1836 0
-8133 1790 1823 1834 0
-8133 1790 1825 1832 0
-8133 1790 1827 1831 0
-8133 1790 1829 0
-8133 1792 1858 0
-8133 1792 1800 1856 0
-8133 1792 1801 1854 0
-8133 1792 1803 1852 0
-8133 1792 1805 1850 0
-8133 1792 1807 1848 0
-8133 1792 1809 1846 0
-8133 1792 1811 1844 0
-8133 1792 1813 1842 0
-8133 1792 1815 1840 0
-8133 1792 1817 1838 0
-8133 1792 1819 1836 0
-8133 1792 1821 1834 0
-8133 1792 1823 1832 0
-8133 1792 1825 1831 0
-8133 1792 1827 0
-8133 1792 1829 0
-8133 1794 1856 0
-8133 1794 1800 1854 0
-8133 1794 1801 1852 0
-8133 1794 1803 1850 0
-8133 1794 1805 1848 0
-8133 1794 1807 1846 0
-8133 1794 1809 1844 0
-8133 1794 1811 1842 0
-8133 1794 1813 1840 0
-8133 1794 1815 1838 0
-8133 1794 1817 1836 0
-8133 1794 1819 1834 0
-8133 1794 1821 1832 0
-8133 1794 1823 1831 0
-8133 1794 1825 0
-8133 1794 1827 0
-8133 1794 1829 0
-8133 1796 1854 0
-8133 1796 1800 1852 0
-8133 1796 1801 1850 0
-8133 1796 1803 1848 0
-8133 1796 1805 1846 0
-8133 1796 1807 1844 0
-8133 1796 1809 1842 0
-8133 1796 1811 1840 0
-8133 1796 1813 1838 0
-8133 1796 1815 1836 0
-8133 1796 1817 1834 0
-8133 1796 1819 1832 0
-8133 1796 1821 1831 0
-8133 1796 1823 0
-8133 1796 1825 0
-8133 1796 1827 0
-8133 1796 1829 0
-8133 1798 1852 0
-8133 1798 1800 1850 0
-8133 1798 1801 1848 0
-8133 1798 1803 1846 0
-8133 1798 1805 1844 0
-8133 1798 1807 1842 0
-8133 1798 1809 1840 0
-8133 1798 1811 1838 0
-8133 1798 1813 1836 0
-8133 1798 1815 1834 0
-8133 1798 1817 1832 0
-8133 1798 1819 1831 0
-8133 1798 1821 0
-8133 1798 1823 0
-8133 1798 1825 0
-8133 1798 1827 0
-8133 1798 1829 0
8133 -1821 -1831 0
8133 -1819 -1832 0
8133 -1817 -1834 0
8133 -1815 -1836 0
8133 -1813 -1838 0
8133 -1811 -1840 0
8133 -1809 -1842 0
8133 -1807 -1844 0
8133 -1805 -1846 0
8133 -1803 -1848 0
8133 -1801 -1850 0
8133 -1800 -1852 0
8133 -1798 -1823 -1831 0
8133 -1798 -1821 -1832 0
8133 -1798 -1819 -1834 0
8133 -1798 -1817 -1836 0
8133 -1798 -1815 -1838 0
8133 -1798 -1813 -1840 0
8133 -1798 -1811 -1842 0
8133 -1798 -1809 -1844 0
8133 -1798 -1807 -1846 0
8133 -1798 -1805 -1848 0
8133 -1798 -1803 -1850 0
8133 -1798 -1801 -1852 0
8133 -1798 -1800 -1854 0
8133 -1796 -1825 -1831 0
8133 -1796 -1823 -1832 0
8133 -1796 -1821 -1834 0
8133 -1796 -1819 -1836 0
8133 -1796 -1817 -1838 0
8133 -1796 -1815 -1840 0
8133 -1796 -1813 -1842 0
8133 -1796 -1811 -1844 0
8133 -1796 -1809 -1846 0
8133 -1796 -1807 -1848 0
8133 -1796 -1805 -1850 0
8133 -1796 -1803 -1852 0
8133 -1796 -1801 -1854 0
8133 -1796 -1800 -1856 0
8133 -1794 -1827 -1831 0
8133 -1794 -1825 -1832 0
8133 -1794 -1823 -1834 0
8133 -1794 -1821 -1836 0
8133 -1794 -1819 -1838 0
8133 -1794 -1817 -1840 0
8133 -1794 -1815 -1842 0
8133 -1794 -1813 -1844 0
8133 -1794 -1811 -1846 0
8133 -1794 -1809 -1848 0
8133 -1794 -1807 -1850 0
8133 -1794 -1805 -1852 0
8133 -1794 -1803 -1854 0
8133 -1794 -1801 -1856 0
8133 -1794 -1800 -1858 0
8133 -1792 -1829 -1831 0
8133 -1792 -1827 -1832 0
8133 -1792 -1825 -1834 0
8133 -1792 -1823 -1836 0
8133 -1792 -1821 -1838 0
8133 -1792 -1819 -1840 0
8133 -1792 -1817 -1842 0
8133 -1792 -1815 -1844 0
8133 -1792 -1813 -1846 0
8133 -1792 -1811 -1848 0
8133 -1792 -1809 -1850 0
8133 -1792 -1807 -1852 0
8133 -1792 -1805 -1854 0
8133 -1792 -1803 -1856 0
8133 -1792 -1801 -1858 0
8133 -1792 -1800 -1860 0
8133 -1790 -1831 0
8133 -1790 -1829 -1832 0
8133 -1790 -1827 -1834 0
8133 -1790 -1825 -1836 0
8133 -1790 -1823 -1838 0
8133 -1790 -1821 -1840 0
8133 -1790 -1819 -1842 0
8133 -1790 -1817 -1844 0
8133 -1790 -1815 -1846 0
8133 -1790 -1813 -1848 0
8133 -1790 -1811 -1850 0
8133 -1790 -1809 -1852 0
8133 -1790 -1807 -1854 0
8133 -1790 -1805 -1856 0
8133 -1790 -1803 -1858 0
8133 -1790 -1801 -1860 0
8133 -1790 -1800 0
8133 -1788 -1832 0
8133 -1788 -1829 -1834 0
8133 -1788 -1827 -1836 0
8133 -1788 -1825 -1838 0
8133 -1788 -1823 -1840 0
8133 -1788 -1821 -1842 0
8133 -1788 -1819 -1844 0
8133 -1788 -1817 -1846 0
8133 -1788 -1815 -1848 0
8133 -1788 -1813 -1850 0
8133 -1788 -1811 -1852 0
8133 -1788 -1809 -1854 0
8133 -1788 -1807 -1856 0
8133 -1788 -1805 -1858 0
8133 -1788 -1803 -1860 0
8133 -1788 -1801 0
8133 -1788 -1800 0
8133 -1786 -1834 0
8133 -1786 -1829 -1836 0
8133 -1786 -1827 -1838 0
8133 -1786 -1825 -1840 0
8133 -1786 -1823 -1842 0
8133 -1786 -1821 -1844 0
8133 -1786 -1819 -1846 0
8133 -1786 -1817 -1848 0
8133 -1786 -1815 -1850 0
8133 -1786 -1813 -1852 0
8133 -1786 -1811 -1854 0
8133 -1786 -1809 -1856 0
8133 -1786 -1807 -1858 0
8133 -1786 -1805 -1860 0
8133 -1786 -1803 0
8133 -1786 -1801 0
8133 -1786 -1800 0
8133 -1784 -1836 0
8133 -1784 -1829 -1838 0
8133 -1784 -1827 -1840 0
8133 -1784 -1825 -1842 0
8133 -1784 -1823 -1844 0
8133 -1784 -1821 -1846 0
8133 -1784 -1819 -1848 0
8133 -1784 -1817 -1850 0
8133 -1784 -1815 -1852 0
8133 -1784 -1813 -1854 0
8133 -1784 -1811 -1856 0
8133 -1784 -1809 -1858 0
8133 -1784 -1807 -1860 0
8133 -1784 -1805 0
8133 -1784 -1803 0
8133 -1784 -1801 0
8133 -1784 -1800 0
8133 -1782 -1838 0
8133 -1782 -1829 -1840 0
8133 -1782 -1827 -1842 0
8133 -1782 -1825 -1844 0
8133 -1782 -1823 -1846 0
8133 -1782 -1821 -1848 0
8133 -1782 -1819 -1850 0
8133 -1782 -1817 -1852 0
8133 -1782 -1815 -1854 0
8133 -1782 -1813 -1856 0
8133 -1782 -1811 -1858 0
8133 -1782 -1809 -1860 0
8133 -1782 -1807 0
8133 -1782 -1805 0
8133 -1782 -1803 0
8133 -1782 -1801 0
8133 -1782 -1800 0
8133 -1780 -1840 0
8133 -1780 -1829 -1842 0
8133 -1780 -1827 -1844 0
8133 -1780 -1825 -1846 0
8133 -1780 -1823 -1848 0
8133 -1780 -1821 -1850 0
8133 -1780 -1819 -1852 0
8133 -1780 -1817 -1854 0
8133 -1780 -1815 -1856 0
8133 -1780 -1813 -1858 0
8133 -1780 -1811 -1860 0
8133 -1780 -1809 0
8133 -1780 -1807 0
8133 -1780 -1805 0
8133 -1780 -1803 0
8133 -1780 -1801 0
8133 -1780 -1800 0
8133 -1778 -1842 0
8133 -1778 -1829 -1844 0
8133 -1778 -1827 -1846 0
8133 -1778 -1825 -1848 0
8133 -1778 -1823 -1850 0
8133 -1778 -1821 -1852 0
8133 -1778 -1819 -1854 0
8133 -1778 -1817 -1856 0
8133 -1778 -1815 -1858 0
8133 -1778 -1813 -1860 0
8133 -1778 -1811 0
8133 -1778 -1809 0
8133 -1778 -1807 0
8133 -1778 -1805 0
8133 -1778 -1803 0
8133 -1778 -1801 0
8133 -1778 -1800 0
8133 -1776 -1844 0
8133 -1776 -1829 -1846 0
8133 -1776 -1827 -1848 0
8133 -1776 -1825 -1850 0
8133 -1776 -1823 -1852 0
8133 -1776 -1821 -1854 0
8133 -1776 -1819 -1856 0
8133 -1776 -1817 -1858 0
8133 -1776 -1815 -1860 0
8133 -1776 -1813 0
8133 -1776 -1811 0
8133 -1776 -1809 0
8133 -1776 -1807 0
8133 -1776 -1805 0
8133 -1776 -1803 0
8133 -1776 -1801 0
8133 -1776 -1800 0
8133 -1774 -1846 0
8133 -1774 -1829 -1848 0
8133 -1774 -1827 -1850 0
8133 -1774 -1825 -1852 0
8133 -1774 -1823 -1854 0
8133 -1774 -1821 -1856 0
8133 -1774 -1819 -1858 0
8133 -1774 -1817 -1860 0
8133 -1774 -1815 0
8133 -1774 -1813 0
8133 -1774 -1811 0
8133 -1774 -1809 0
8133 -1774 -1807 0
8133 -1774 -1805 0
8133 -1774 -1803 0
8133 -1774 -1801 0
8133 -1774 -1800 0
8133 -1772 -1848 0
8133 -1772 -1829 -1850 0
8133 -1772 -1827 -1852 0
8133 -1772 -1825 -1854 0
8133 -1772 -1823 -1856 0
8133 -1772 -1821 -1858 0
8133 -1772 -1819 -1860 0
8133 -1772 -1817 0
8133 -1772 -1815 0
8133 -1772 -1813 0
8133 -1772 -1811 0
8133 -1772 -1809 0
8133 -1772 -1807 0
8133 -1772 -1805 0
8133 -1772 -1803 0
8133 -1772 -1801 0
8133 -1772 -1800 0
8133 -1770 -1850 0
8133 -1770 -1829 -1852 0
8133 -1770 -1827 -1854 0
8133 -1770 -1825 -1856 0
8133 -1770 -1823 -1858 0
8133 -1770 -1821 -1860 0
8133 -1770 -1819 0
8133 -1770 -1817 0
8133 -1770 -1815 0
8133 -1770 -1813 0
8133 -1770 -1811 0
8133 -1770 -1809 0
8133 -1770 -1807 0
8133 -1770 -1805 0
8133 -1770 -1803 0
8133 -1770 -1801 0
8133 -1770 -1800 0
8133 -1769 -1852 0
8133 -1769 -1829 -1854 0
8133 -1769 -1827 -1856 0
8133 -1769 -1825 -1858 0
8133 -1769 -1823 -1860 0
8133 -1769 -1821 0
8133 -1769 -1819 0
8133 -1769 -1817 0
8133 -1769 -1815 0
8133 -1769 -1813 0
8133 -1769 -1811 0
8133 -1769 -1809 0
8133 -1769 -1807 0
8133 -1769 -1805 0
8133 -1769 -1803 0
8133 -1769 -1801 0
8133 -1769 -1800 0
c ((27<=(aux407 + aux408 + aux409))=tv=SATLiteral(8134))
-8134 -1819 -1831 0
-8134 -1817 -1832 0
-8134 -1815 -1834 0
-8134 -1813 -1836 0
-8134 -1811 -1838 0
-8134 -1809 -1840 0
-8134 -1807 -1842 0
-8134 -1805 -1844 0
-8134 -1803 -1846 0
-8134 -1801 -1848 0
-8134 -1800 -1850 0
-8134 -1798 -1821 -1831 0
-8134 -1798 -1819 -1832 0
-8134 -1798 -1817 -1834 0
-8134 -1798 -1815 -1836 0
-8134 -1798 -1813 -1838 0
-8134 -1798 -1811 -1840 0
-8134 -1798 -1809 -1842 0
-8134 -1798 -1807 -1844 0
-8134 -1798 -1805 -1846 0
-8134 -1798 -1803 -1848 0
-8134 -1798 -1801 -1850 0
-8134 -1798 -1800 -1852 0
-8134 -1796 -1823 -1831 0
-8134 -1796 -1821 -1832 0
-8134 -1796 -1819 -1834 0
-8134 -1796 -1817 -1836 0
-8134 -1796 -1815 -1838 0
-8134 -1796 -1813 -1840 0
-8134 -1796 -1811 -1842 0
-8134 -1796 -1809 -1844 0
-8134 -1796 -1807 -1846 0
-8134 -1796 -1805 -1848 0
-8134 -1796 -1803 -1850 0
-8134 -1796 -1801 -1852 0
-8134 -1796 -1800 -1854 0
-8134 -1794 -1825 -1831 0
-8134 -1794 -1823 -1832 0
-8134 -1794 -1821 -1834 0
-8134 -1794 -1819 -1836 0
-8134 -1794 -1817 -1838 0
-8134 -1794 -1815 -1840 0
-8134 -1794 -1813 -1842 0
-8134 -1794 -1811 -1844 0
-8134 -1794 -1809 -1846 0
-8134 -1794 -1807 -1848 0
-8134 -1794 -1805 -1850 0
-8134 -1794 -1803 -1852 0
-8134 -1794 -1801 -1854 0
-8134 -1794 -1800 -1856 0
-8134 -1792 -1827 -1831 0
-8134 -1792 -1825 -1832 0
-8134 -1792 -1823 -1834 0
-8134 -1792 -1821 -1836 0
-8134 -1792 -1819 -1838 0
-8134 -1792 -1817 -1840 0
-8134 -1792 -1815 -1842 0
-8134 -1792 -1813 -1844 0
-8134 -1792 -1811 -1846 0
-8134 -1792 -1809 -1848 0
-8134 -1792 -1807 -1850 0
-8134 -1792 -1805 -1852 0
-8134 -1792 -1803 -1854 0
-8134 -1792 -1801 -1856 0
-8134 -1792 -1800 -1858 0
-8134 -1790 -1829 -1831 0
-8134 -1790 -1827 -1832 0
-8134 -1790 -1825 -1834 0
-8134 -1790 -1823 -1836 0
-8134 -1790 -1821 -1838 0
-8134 -1790 -1819 -1840 0
-8134 -1790 -1817 -1842 0
-8134 -1790 -1815 -1844 0
-8134 -1790 -1813 -1846 0
-8134 -1790 -1811 -1848 0
-8134 -1790 -1809 -1850 0
-8134 -1790 -1807 -1852 0
-8134 -1790 -1805 -1854 0
-8134 -1790 -1803 -1856 0
-8134 -1790 -1801 -1858 0
-8134 -1790 -1800 -1860 0
-8134 -1788 -1831 0
-8134 -1788 -1829 -1832 0
-8134 -1788 -1827 -1834 0
-8134 -1788 -1825 -1836 0
-8134 -1788 -1823 -1838 0
-8134 -1788 -1821 -1840 0
-8134 -1788 -1819 -1842 0
-8134 -1788 -1817 -1844 0
-8134 -1788 -1815 -1846 0
-8134 -1788 -1813 -1848 0
-8134 -1788 -1811 -1850 0
-8134 -1788 -1809 -1852 0
-8134 -1788 -1807 -1854 0
-8134 -1788 -1805 -1856 0
-8134 -1788 -1803 -1858 0
-8134 -1788 -1801 -1860 0
-8134 -1788 -1800 0
-8134 -1786 -1832 0
-8134 -1786 -1829 -1834 0
-8134 -1786 -1827 -1836 0
-8134 -1786 -1825 -1838 0
-8134 -1786 -1823 -1840 0
-8134 -1786 -1821 -1842 0
-8134 -1786 -1819 -1844 0
-8134 -1786 -1817 -1846 0
-8134 -1786 -1815 -1848 0
-8134 -1786 -1813 -1850 0
-8134 -1786 -1811 -1852 0
-8134 -1786 -1809 -1854 0
-8134 -1786 -1807 -1856 0
-8134 -1786 -1805 -1858 0
-8134 -1786 -1803 -1860 0
-8134 -1786 -1801 0
-8134 -1786 -1800 0
-8134 -1784 -1834 0
-8134 -1784 -1829 -1836 0
-8134 -1784 -1827 -1838 0
-8134 -1784 -1825 -1840 0
-8134 -1784 -1823 -1842 0
-8134 -1784 -1821 -1844 0
-8134 -1784 -1819 -1846 0
-8134 -1784 -1817 -1848 0
-8134 -1784 -1815 -1850 0
-8134 -1784 -1813 -1852 0
-8134 -1784 -1811 -1854 0
-8134 -1784 -1809 -1856 0
-8134 -1784 -1807 -1858 0
-8134 -1784 -1805 -1860 0
-8134 -1784 -1803 0
-8134 -1784 -1801 0
-8134 -1784 -1800 0
-8134 -1782 -1836 0
-8134 -1782 -1829 -1838 0
-8134 -1782 -1827 -1840 0
-8134 -1782 -1825 -1842 0
-8134 -1782 -1823 -1844 0
-8134 -1782 -1821 -1846 0
-8134 -1782 -1819 -1848 0
-8134 -1782 -1817 -1850 0
-8134 -1782 -1815 -1852 0
-8134 -1782 -1813 -1854 0
-8134 -1782 -1811 -1856 0
-8134 -1782 -1809 -1858 0
-8134 -1782 -1807 -1860 0
-8134 -1782 -1805 0
-8134 -1782 -1803 0
-8134 -1782 -1801 0
-8134 -1782 -1800 0
-8134 -1780 -1838 0
-8134 -1780 -1829 -1840 0
-8134 -1780 -1827 -1842 0
-8134 -1780 -1825 -1844 0
-8134 -1780 -1823 -1846 0
-8134 -1780 -1821 -1848 0
-8134 -1780 -1819 -1850 0
-8134 -1780 -1817 -1852 0
-8134 -1780 -1815 -1854 0
-8134 -1780 -1813 -1856 0
-8134 -1780 -1811 -1858 0
-8134 -1780 -1809 -1860 0
-8134 -1780 -1807 0
-8134 -1780 -1805 0
-8134 -1780 -1803 0
-8134 -1780 -1801 0
-8134 -1780 -1800 0
-8134 -1778 -1840 0
-8134 -1778 -1829 -1842 0
-8134 -1778 -1827 -1844 0
-8134 -1778 -1825 -1846 0
-8134 -1778 -1823 -1848 0
-8134 -1778 -1821 -1850 0
-8134 -1778 -1819 -1852 0
-8134 -1778 -1817 -1854 0
-8134 -1778 -1815 -1856 0
-8134 -1778 -1813 -1858 0
-8134 -1778 -1811 -1860 0
-8134 -1778 -1809 0
-8134 -1778 -1807 0
-8134 -1778 -1805 0
-8134 -1778 -1803 0
-8134 -1778 -1801 0
-8134 -1778 -1800 0
-8134 -1776 -1842 0
-8134 -1776 -1829 -1844 0
-8134 -1776 -1827 -1846 0
-8134 -1776 -1825 -1848 0
-8134 -1776 -1823 -1850 0
-8134 -1776 -1821 -1852 0
-8134 -1776 -1819 -1854 0
-8134 -1776 -1817 -1856 0
-8134 -1776 -1815 -1858 0
-8134 -1776 -1813 -1860 0
-8134 -1776 -1811 0
-8134 -1776 -1809 0
-8134 -1776 -1807 0
-8134 -1776 -1805 0
-8134 -1776 -1803 0
-8134 -1776 -1801 0
-8134 -1776 -1800 0
-8134 -1774 -1844 0
-8134 -1774 -1829 -1846 0
-8134 -1774 -1827 -1848 0
-8134 -1774 -1825 -1850 0
-8134 -1774 -1823 -1852 0
-8134 -1774 -1821 -1854 0
-8134 -1774 -1819 -1856 0
-8134 -1774 -1817 -1858 0
-8134 -1774 -1815 -1860 0
-8134 -1774 -1813 0
-8134 -1774 -1811 0
-8134 -1774 -1809 0
-8134 -1774 -1807 0
-8134 -1774 -1805 0
-8134 -1774 -1803 0
-8134 -1774 -1801 0
-8134 -1774 -1800 0
-8134 -1772 -1846 0
-8134 -1772 -1829 -1848 0
-8134 -1772 -1827 -1850 0
-8134 -1772 -1825 -1852 0
-8134 -1772 -1823 -1854 0
-8134 -1772 -1821 -1856 0
-8134 -1772 -1819 -1858 0
-8134 -1772 -1817 -1860 0
-8134 -1772 -1815 0
-8134 -1772 -1813 0
-8134 -1772 -1811 0
-8134 -1772 -1809 0
-8134 -1772 -1807 0
-8134 -1772 -1805 0
-8134 -1772 -1803 0
-8134 -1772 -1801 0
-8134 -1772 -1800 0
-8134 -1770 -1848 0
-8134 -1770 -1829 -1850 0
-8134 -1770 -1827 -1852 0
-8134 -1770 -1825 -1854 0
-8134 -1770 -1823 -1856 0
-8134 -1770 -1821 -1858 0
-8134 -1770 -1819 -1860 0
-8134 -1770 -1817 0
-8134 -1770 -1815 0
-8134 -1770 -1813 0
-8134 -1770 -1811 0
-8134 -1770 -1809 0
-8134 -1770 -1807 0
-8134 -1770 -1805 0
-8134 -1770 -1803 0
-8134 -1770 -1801 0
-8134 -1770 -1800 0
-8134 -1769 -1850 0
-8134 -1769 -1829 -1852 0
-8134 -1769 -1827 -1854 0
-8134 -1769 -1825 -1856 0
-8134 -1769 -1823 -1858 0
-8134 -1769 -1821 -1860 0
-8134 -1769 -1819 0
-8134 -1769 -1817 0
-8134 -1769 -1815 0
-8134 -1769 -1813 0
-8134 -1769 -1811 0
-8134 -1769 -1809 0
-8134 -1769 -1807 0
-8134 -1769 -1805 0
-8134 -1769 -1803 0
-8134 -1769 -1801 0
-8134 -1769 -1800 0
8134 1819 1860 0
8134 1821 1858 0
8134 1823 1856 0
8134 1825 1854 0
8134 1827 1852 0
8134 1829 1850 0
8134 1769 1817 1860 0
8134 1769 1819 1858 0
8134 1769 1821 1856 0
8134 1769 1823 1854 0
8134 1769 1825 1852 0
8134 1769 1827 1850 0
8134 1769 1829 1848 0
8134 1770 1815 1860 0
8134 1770 1817 1858 0
8134 1770 1819 1856 0
8134 1770 1821 1854 0
8134 1770 1823 1852 0
8134 1770 1825 1850 0
8134 1770 1827 1848 0
8134 1770 1829 1846 0
8134 1772 1813 1860 0
8134 1772 1815 1858 0
8134 1772 1817 1856 0
8134 1772 1819 1854 0
8134 1772 1821 1852 0
8134 1772 1823 1850 0
8134 1772 1825 1848 0
8134 1772 1827 1846 0
8134 1772 1829 1844 0
8134 1774 1811 1860 0
8134 1774 1813 1858 0
8134 1774 1815 1856 0
8134 1774 1817 1854 0
8134 1774 1819 1852 0
8134 1774 1821 1850 0
8134 1774 1823 1848 0
8134 1774 1825 1846 0
8134 1774 1827 1844 0
8134 1774 1829 1842 0
8134 1776 1809 1860 0
8134 1776 1811 1858 0
8134 1776 1813 1856 0
8134 1776 1815 1854 0
8134 1776 1817 1852 0
8134 1776 1819 1850 0
8134 1776 1821 1848 0
8134 1776 1823 1846 0
8134 1776 1825 1844 0
8134 1776 1827 1842 0
8134 1776 1829 1840 0
8134 1778 1807 1860 0
8134 1778 1809 1858 0
8134 1778 1811 1856 0
8134 1778 1813 1854 0
8134 1778 1815 1852 0
8134 1778 1817 1850 0
8134 1778 1819 1848 0
8134 1778 1821 1846 0
8134 1778 1823 1844 0
8134 1778 1825 1842 0
8134 1778 1827 1840 0
8134 1778 1829 1838 0
8134 1780 1805 1860 0
8134 1780 1807 1858 0
8134 1780 1809 1856 0
8134 1780 1811 1854 0
8134 1780 1813 1852 0
8134 1780 1815 1850 0
8134 1780 1817 1848 0
8134 1780 1819 1846 0
8134 1780 1821 1844 0
8134 1780 1823 1842 0
8134 1780 1825 1840 0
8134 1780 1827 1838 0
8134 1780 1829 1836 0
8134 1782 1803 1860 0
8134 1782 1805 1858 0
8134 1782 1807 1856 0
8134 1782 1809 1854 0
8134 1782 1811 1852 0
8134 1782 1813 1850 0
8134 1782 1815 1848 0
8134 1782 1817 1846 0
8134 1782 1819 1844 0
8134 1782 1821 1842 0
8134 1782 1823 1840 0
8134 1782 1825 1838 0
8134 1782 1827 1836 0
8134 1782 1829 1834 0
8134 1784 1801 1860 0
8134 1784 1803 1858 0
8134 1784 1805 1856 0
8134 1784 1807 1854 0
8134 1784 1809 1852 0
8134 1784 1811 1850 0
8134 1784 1813 1848 0
8134 1784 1815 1846 0
8134 1784 1817 1844 0
8134 1784 1819 1842 0
8134 1784 1821 1840 0
8134 1784 1823 1838 0
8134 1784 1825 1836 0
8134 1784 1827 1834 0
8134 1784 1829 1832 0
8134 1786 1800 1860 0
8134 1786 1801 1858 0
8134 1786 1803 1856 0
8134 1786 1805 1854 0
8134 1786 1807 1852 0
8134 1786 1809 1850 0
8134 1786 1811 1848 0
8134 1786 1813 1846 0
8134 1786 1815 1844 0
8134 1786 1817 1842 0
8134 1786 1819 1840 0
8134 1786 1821 1838 0
8134 1786 1823 1836 0
8134 1786 1825 1834 0
8134 1786 1827 1832 0
8134 1786 1829 1831 0
8134 1788 1860 0
8134 1788 1800 1858 0
8134 1788 1801 1856 0
8134 1788 1803 1854 0
8134 1788 1805 1852 0
8134 1788 1807 1850 0
8134 1788 1809 1848 0
8134 1788 1811 1846 0
8134 1788 1813 1844 0
8134 1788 1815 1842 0
8134 1788 1817 1840 0
8134 1788 1819 1838 0
8134 1788 1821 1836 0
8134 1788 1823 1834 0
8134 1788 1825 1832 0
8134 1788 1827 1831 0
8134 1788 1829 0
8134 1790 1858 0
8134 1790 1800 1856 0
8134 1790 1801 1854 0
8134 1790 1803 1852 0
8134 1790 1805 1850 0
8134 1790 1807 1848 0
8134 1790 1809 1846 0
8134 1790 1811 1844 0
8134 1790 1813 1842 0
8134 1790 1815 1840 0
8134 1790 1817 1838 0
8134 1790 1819 1836 0
8134 1790 1821 1834 0
8134 1790 1823 1832 0
8134 1790 1825 1831 0
8134 1790 1827 0
8134 1790 1829 0
8134 1792 1856 0
8134 1792 1800 1854 0
8134 1792 1801 1852 0
8134 1792 1803 1850 0
8134 1792 1805 1848 0
8134 1792 1807 1846 0
8134 1792 1809 1844 0
8134 1792 1811 1842 0
8134 1792 1813 1840 0
8134 1792 1815 1838 0
8134 1792 1817 1836 0
8134 1792 1819 1834 0
8134 1792 1821 1832 0
8134 1792 1823 1831 0
8134 1792 1825 0
8134 1792 1827 0
8134 1792 1829 0
8134 1794 1854 0
8134 1794 1800 1852 0
8134 1794 1801 1850 0
8134 1794 1803 1848 0
8134 1794 1805 1846 0
8134 1794 1807 1844 0
8134 1794 1809 1842 0
8134 1794 1811 1840 0
8134 1794 1813 1838 0
8134 1794 1815 1836 0
8134 1794 1817 1834 0
8134 1794 1819 1832 0
8134 1794 1821 1831 0
8134 1794 1823 0
8134 1794 1825 0
8134 1794 1827 0
8134 1794 1829 0
8134 1796 1852 0
8134 1796 1800 1850 0
8134 1796 1801 1848 0
8134 1796 1803 1846 0
8134 1796 1805 1844 0
8134 1796 1807 1842 0
8134 1796 1809 1840 0
8134 1796 1811 1838 0
8134 1796 1813 1836 0
8134 1796 1815 1834 0
8134 1796 1817 1832 0
8134 1796 1819 1831 0
8134 1796 1821 0
8134 1796 1823 0
8134 1796 1825 0
8134 1796 1827 0
8134 1796 1829 0
8134 1798 1850 0
8134 1798 1800 1848 0
8134 1798 1801 1846 0
8134 1798 1803 1844 0
8134 1798 1805 1842 0
8134 1798 1807 1840 0
8134 1798 1809 1838 0
8134 1798 1811 1836 0
8134 1798 1813 1834 0
8134 1798 1815 1832 0
8134 1798 1817 1831 0
8134 1798 1819 0
8134 1798 1821 0
8134 1798 1823 0
8134 1798 1825 0
8134 1798 1827 0
8134 1798 1829 0
c (((x_00003_00004 + x_00003_00005 + x_00004_00004)<=18)=tv=SATLiteral(8135))
-8135 345 465 0
-8135 317 343 465 0
-8135 317 345 463 0
-8135 318 341 465 0
-8135 318 343 463 0
-8135 318 345 461 0
-8135 320 339 465 0
-8135 320 341 463 0
-8135 320 343 461 0
-8135 320 345 459 0
-8135 322 337 465 0
-8135 322 339 463 0
-8135 322 341 461 0
-8135 322 343 459 0
-8135 322 345 457 0
-8135 324 335 465 0
-8135 324 337 463 0
-8135 324 339 461 0
-8135 324 341 459 0
-8135 324 343 457 0
-8135 324 345 455 0
-8135 326 333 465 0
-8135 326 335 463 0
-8135 326 337 461 0
-8135 326 339 459 0
-8135 326 341 457 0
-8135 326 343 455 0
-8135 326 345 453 0
-8135 328 332 465 0
-8135 328 333 463 0
-8135 328 335 461 0
-8135 328 337 459 0
-8135 328 339 457 0
-8135 328 341 455 0
-8135 328 343 453 0
-8135 328 345 452 0
-8135 330 465 0
-8135 330 332 463 0
-8135 330 333 461 0
-8135 330 335 459 0
-8135 330 337 457 0
-8135 330 339 455 0
-8135 330 341 453 0
-8135 330 343 452 0
-8135 330 345 0
8135 -345 -452 0
8135 -343 -453 0
8135 -341 -455 0
8135 -339 -457 0
8135 -337 -459 0
8135 -335 -461 0
8135 -333 -463 0
8135 -332 -465 0
8135 -330 -452 0
8135 -330 -345 -453 0
8135 -330 -343 -455 0
8135 -330 -341 -457 0
8135 -330 -339 -459 0
8135 -330 -337 -461 0
8135 -330 -335 -463 0
8135 -330 -333 -465 0
8135 -330 -332 0
8135 -328 -453 0
8135 -328 -345 -455 0
8135 -328 -343 -457 0
8135 -328 -341 -459 0
8135 -328 -339 -461 0
8135 -328 -337 -463 0
8135 -328 -335 -465 0
8135 -328 -333 0
8135 -328 -332 0
8135 -326 -455 0
8135 -326 -345 -457 0
8135 -326 -343 -459 0
8135 -326 -341 -461 0
8135 -326 -339 -463 0
8135 -326 -337 -465 0
8135 -326 -335 0
8135 -326 -333 0
8135 -326 -332 0
8135 -324 -457 0
8135 -324 -345 -459 0
8135 -324 -343 -461 0
8135 -324 -341 -463 0
8135 -324 -339 -465 0
8135 -324 -337 0
8135 -324 -335 0
8135 -324 -333 0
8135 -324 -332 0
8135 -322 -459 0
8135 -322 -345 -461 0
8135 -322 -343 -463 0
8135 -322 -341 -465 0
8135 -322 -339 0
8135 -322 -337 0
8135 -322 -335 0
8135 -322 -333 0
8135 -322 -332 0
8135 -320 -461 0
8135 -320 -345 -463 0
8135 -320 -343 -465 0
8135 -320 -341 0
8135 -320 -339 0
8135 -320 -337 0
8135 -320 -335 0
8135 -320 -333 0
8135 -320 -332 0
8135 -318 -463 0
8135 -318 -345 -465 0
8135 -318 -343 0
8135 -318 -341 0
8135 -318 -339 0
8135 -318 -337 0
8135 -318 -335 0
8135 -318 -333 0
8135 -318 -332 0
8135 -317 -465 0
8135 -317 -345 0
8135 -317 -343 0
8135 -317 -341 0
8135 -317 -339 0
8135 -317 -337 0
8135 -317 -335 0
8135 -317 -333 0
8135 -317 -332 0
c ((18<=(x_00003_00004 + x_00003_00005 + x_00004_00004))=tv=SATLiteral(8136))
-8136 -343 -452 0
-8136 -341 -453 0
-8136 -339 -455 0
-8136 -337 -457 0
-8136 -335 -459 0
-8136 -333 -461 0
-8136 -332 -463 0
-8136 -330 -345 -452 0
-8136 -330 -343 -453 0
-8136 -330 -341 -455 0
-8136 -330 -339 -457 0
-8136 -330 -337 -459 0
-8136 -330 -335 -461 0
-8136 -330 -333 -463 0
-8136 -330 -332 -465 0
-8136 -328 -452 0
-8136 -328 -345 -453 0
-8136 -328 -343 -455 0
-8136 -328 -341 -457 0
-8136 -328 -339 -459 0
-8136 -328 -337 -461 0
-8136 -328 -335 -463 0
-8136 -328 -333 -465 0
-8136 -328 -332 0
-8136 -326 -453 0
-8136 -326 -345 -455 0
-8136 -326 -343 -457 0
-8136 -326 -341 -459 0
-8136 -326 -339 -461 0
-8136 -326 -337 -463 0
-8136 -326 -335 -465 0
-8136 -326 -333 0
-8136 -326 -332 0
-8136 -324 -455 0
-8136 -324 -345 -457 0
-8136 -324 -343 -459 0
-8136 -324 -341 -461 0
-8136 -324 -339 -463 0
-8136 -324 -337 -465 0
-8136 -324 -335 0
-8136 -324 -333 0
-8136 -324 -332 0
-8136 -322 -457 0
-8136 -322 -345 -459 0
-8136 -322 -343 -461 0
-8136 -322 -341 -463 0
-8136 -322 -339 -465 0
-8136 -322 -337 0
-8136 -322 -335 0
-8136 -322 -333 0
-8136 -322 -332 0
-8136 -320 -459 0
-8136 -320 -345 -461 0
-8136 -320 -343 -463 0
-8136 -320 -341 -465 0
-8136 -320 -339 0
-8136 -320 -337 0
-8136 -320 -335 0
-8136 -320 -333 0
-8136 -320 -332 0
-8136 -318 -461 0
-8136 -318 -345 -463 0
-8136 -318 -343 -465 0
-8136 -318 -341 0
-8136 -318 -339 0
-8136 -318 -337 0
-8136 -318 -335 0
-8136 -318 -333 0
-8136 -318 -332 0
-8136 -317 -463 0
-8136 -317 -345 -465 0
-8136 -317 -343 0
-8136 -317 -341 0
-8136 -317 -339 0
-8136 -317 -337 0
-8136 -317 -335 0
-8136 -317 -333 0
-8136 -317 -332 0
8136 343 465 0
8136 345 463 0
8136 317 341 465 0
8136 317 343 463 0
8136 317 345 461 0
8136 318 339 465 0
8136 318 341 463 0
8136 318 343 461 0
8136 318 345 459 0
8136 320 337 465 0
8136 320 339 463 0
8136 320 341 461 0
8136 320 343 459 0
8136 320 345 457 0
8136 322 335 465 0
8136 322 337 463 0
8136 322 339 461 0
8136 322 341 459 0
8136 322 343 457 0
8136 322 345 455 0
8136 324 333 465 0
8136 324 335 463 0
8136 324 337 461 0
8136 324 339 459 0
8136 324 341 457 0
8136 324 343 455 0
8136 324 345 453 0
8136 326 332 465 0
8136 326 333 463 0
8136 326 335 461 0
8136 326 337 459 0
8136 326 339 457 0
8136 326 341 455 0
8136 326 343 453 0
8136 326 345 452 0
8136 328 465 0
8136 328 332 463 0
8136 328 333 461 0
8136 328 335 459 0
8136 328 337 457 0
8136 328 339 455 0
8136 328 341 453 0
8136 328 343 452 0
8136 328 345 0
8136 330 463 0
8136 330 332 461 0
8136 330 333 459 0
8136 330 335 457 0
8136 330 337 455 0
8136 330 339 453 0
8136 330 341 452 0
8136 330 343 0
8136 330 345 0
c (((aux410 + aux411 + aux412)<=18)=tv=SATLiteral(8137))
-8137 1896 1953 0
-8137 1898 1951 0
-8137 1900 1949 0
-8137 1902 1947 0
-8137 1904 1945 0
-8137 1906 1943 0
-8137 1908 1941 0
-8137 1910 1939 0
-8137 1912 1937 0
-8137 1914 1935 0
-8137 1916 1933 0
-8137 1918 1931 0
-8137 1920 1929 0
-8137 1922 1927 0
-8137 1862 1894 1953 0
-8137 1862 1896 1951 0
-8137 1862 1898 1949 0
-8137 1862 1900 1947 0
-8137 1862 1902 1945 0
-8137 1862 1904 1943 0
-8137 1862 1906 1941 0
-8137 1862 1908 1939 0
-8137 1862 1910 1937 0
-8137 1862 1912 1935 0
-8137 1862 1914 1933 0
-8137 1862 1916 1931 0
-8137 1862 1918 1929 0
-8137 1862 1920 1927 0
-8137 1862 1922 1925 0
-8137 1863 1893 1953 0
-8137 1863 1894 1951 0
-8137 1863 1896 1949 0
-8137 1863 1898 1947 0
-8137 1863 1900 1945 0
-8137 1863 1902 1943 0
-8137 1863 1904 1941 0
-8137 1863 1906 1939 0
-8137 1863 1908 1937 0
-8137 1863 1910 1935 0
-8137 1863 1912 1933 0
-8137 1863 1914 1931 0
-8137 1863 1916 1929 0
-8137 1863 1918 1927 0
-8137 1863 1920 1925 0
-8137 1863 1922 1924 0
-8137 1865 1953 0
-8137 1865 1893 1951 0
-8137 1865 1894 1949 0
-8137 1865 1896 1947 0
-8137 1865 1898 1945 0
-8137 1865 1900 1943 0
-8137 1865 1902 1941 0
-8137 1865 1904 1939 0
-8137 1865 1906 1937 0
-8137 1865 1908 1935 0
-8137 1865 1910 1933 0
-8137 1865 1912 1931 0
-8137 1865 1914 1929 0
-8137 1865 1916 1927 0
-8137 1865 1918 1925 0
-8137 1865 1920 1924 0
-8137 1865 1922 0
-8137 1867 1951 0
-8137 1867 1893 1949 0
-8137 1867 1894 1947 0
-8137 1867 1896 1945 0
-8137 1867 1898 1943 0
-8137 1867 1900 1941 0
-8137 1867 1902 1939 0
-8137 1867 1904 1937 0
-8137 1867 1906 1935 0
-8137 1867 1908 1933 0
-8137 1867 1910 1931 0
-8137 1867 1912 1929 0
-8137 1867 1914 1927 0
-8137 1867 1916 1925 0
-8137 1867 1918 1924 0
-8137 1867 1920 0
-8137 1867 1922 0
-8137 1869 1949 0
-8137 1869 1893 1947 0
-8137 1869 1894 1945 0
-8137 1869 1896 1943 0
-8137 1869 1898 1941 0
-8137 1869 1900 1939 0
-8137 1869 1902 1937 0
-8137 1869 1904 1935 0
-8137 1869 1906 1933 0
-8137 1869 1908 1931 0
-8137 1869 1910 1929 0
-8137 1869 1912 1927 0
-8137 1869 1914 1925 0
-8137 1869 1916 1924 0
-8137 1869 1918 0
-8137 1869 1920 0
-8137 1869 1922 0
-8137 1871 1947 0
-8137 1871 1893 1945 0
-8137 1871 1894 1943 0
-8137 1871 1896 1941 0
-8137 1871 1898 1939 0
-8137 1871 1900 1937 0
-8137 1871 1902 1935 0
-8137 1871 1904 1933 0
-8137 1871 1906 1931 0
-8137 1871 1908 1929 0
-8137 1871 1910 1927 0
-8137 1871 1912 1925 0
-8137 1871 1914 1924 0
-8137 1871 1916 0
-8137 1871 1918 0
-8137 1871 1920 0
-8137 1871 1922 0
-8137 1873 1945 0
-8137 1873 1893 1943 0
-8137 1873 1894 1941 0
-8137 1873 1896 1939 0
-8137 1873 1898 1937 0
-8137 1873 1900 1935 0
-8137 1873 1902 1933 0
-8137 1873 1904 1931 0
-8137 1873 1906 1929 0
-8137 1873 1908 1927 0
-8137 1873 1910 1925 0
-8137 1873 1912 1924 0
-8137 1873 1914 0
-8137 1873 1916 0
-8137 1873 1918 0
-8137 1873 1920 0
-8137 1873 1922 0
-8137 1875 1943 0
-8137 1875 1893 1941 0
-8137 1875 1894 1939 0
-8137 1875 1896 1937 0
-8137 1875 1898 1935 0
-8137 1875 1900 1933 0
-8137 1875 1902 1931 0
-8137 1875 1904 1929 0
-8137 1875 1906 1927 0
-8137 1875 1908 1925 0
-8137 1875 1910 1924 0
-8137 1875 1912 0
-8137 1875 1914 0
-8137 1875 1916 0
-8137 1875 1918 0
-8137 1875 1920 0
-8137 1875 1922 0
-8137 1877 1941 0
-8137 1877 1893 1939 0
-8137 1877 1894 1937 0
-8137 1877 1896 1935 0
-8137 1877 1898 1933 0
-8137 1877 1900 1931 0
-8137 1877 1902 1929 0
-8137 1877 1904 1927 0
-8137 1877 1906 1925 0
-8137 1877 1908 1924 0
-8137 1877 1910 0
-8137 1877 1912 0
-8137 1877 1914 0
-8137 1877 1916 0
-8137 1877 1918 0
-8137 1877 1920 0
-8137 1877 1922 0
-8137 1879 1939 0
-8137 1879 1893 1937 0
-8137 1879 1894 1935 0
-8137 1879 1896 1933 0
-8137 1879 1898 1931 0
-8137 1879 1900 1929 0
-8137 1879 1902 1927 0
-8137 1879 1904 1925 0
-8137 1879 1906 1924 0
-8137 1879 1908 0
-8137 1879 1910 0
-8137 1879 1912 0
-8137 1879 1914 0
-8137 1879 1916 0
-8137 1879 1918 0
-8137 1879 1920 0
-8137 1879 1922 0
-8137 1881 1937 0
-8137 1881 1893 1935 0
-8137 1881 1894 1933 0
-8137 1881 1896 1931 0
-8137 1881 1898 1929 0
-8137 1881 1900 1927 0
-8137 1881 1902 1925 0
-8137 1881 1904 1924 0
-8137 1881 1906 0
-8137 1881 1908 0
-8137 1881 1910 0
-8137 1881 1912 0
-8137 1881 1914 0
-8137 1881 1916 0
-8137 1881 1918 0
-8137 1881 1920 0
-8137 1881 1922 0
-8137 1883 1935 0
-8137 1883 1893 1933 0
-8137 1883 1894 1931 0
-8137 1883 1896 1929 0
-8137 1883 1898 1927 0
-8137 1883 1900 1925 0
-8137 1883 1902 1924 0
-8137 1883 1904 0
-8137 1883 1906 0
-8137 1883 1908 0
-8137 1883 1910 0
-8137 1883 1912 0
-8137 1883 1914 0
-8137 1883 1916 0
-8137 1883 1918 0
-8137 1883 1920 0
-8137 1883 1922 0
-8137 1885 1933 0
-8137 1885 1893 1931 0
-8137 1885 1894 1929 0
-8137 1885 1896 1927 0
-8137 1885 1898 1925 0
-8137 1885 1900 1924 0
-8137 1885 1902 0
-8137 1885 1904 0
-8137 1885 1906 0
-8137 1885 1908 0
-8137 1885 1910 0
-8137 1885 1912 0
-8137 1885 1914 0
-8137 1885 1916 0
-8137 1885 1918 0
-8137 1885 1920 0
-8137 1885 1922 0
-8137 1887 1931 0
-8137 1887 1893 1929 0
-8137 1887 1894 1927 0
-8137 1887 1896 1925 0
-8137 1887 1898 1924 0
-8137 1887 1900 0
-8137 1887 1902 0
-8137 1887 1904 0
-8137 1887 1906 0
-8137 1887 1908 0
-8137 1887 1910 0
-8137 1887 1912 0
-8137 1887 1914 0
-8137 1887 1916 0
-8137 1887 1918 0
-8137 1887 1920 0
-8137 1887 1922 0
-8137 1889 1929 0
-8137 1889 1893 1927 0
-8137 1889 1894 1925 0
-8137 1889 1896 1924 0
-8137 1889 1898 0
-8137 1889 1900 0
-8137 1889 1902 0
-8137 1889 1904 0
-8137 1889 1906 0
-8137 1889 1908 0
-8137 1889 1910 0
-8137 1889 1912 0
-8137 1889 1914 0
-8137 1889 1916 0
-8137 1889 1918 0
-8137 1889 1920 0
-8137 1889 1922 0
-8137 1891 1927 0
-8137 1891 1893 1925 0
-8137 1891 1894 1924 0
-8137 1891 1896 0
-8137 1891 1898 0
-8137 1891 1900 0
-8137 1891 1902 0
-8137 1891 1904 0
-8137 1891 1906 0
-8137 1891 1908 0
-8137 1891 1910 0
-8137 1891 1912 0
-8137 1891 1914 0
-8137 1891 1916 0
-8137 1891 1918 0
-8137 1891 1920 0
-8137 1891 1922 0
8137 -1896 -1924 0
8137 -1894 -1925 0
8137 -1893 -1927 0
8137 -1891 -1898 -1924 0
8137 -1891 -1896 -1925 0
8137 -1891 -1894 -1927 0
8137 -1891 -1893 -1929 0
8137 -1889 -1900 -1924 0
8137 -1889 -1898 -1925 0
8137 -1889 -1896 -1927 0
8137 -1889 -1894 -1929 0
8137 -1889 -1893 -1931 0
8137 -1887 -1902 -1924 0
8137 -1887 -1900 -1925 0
8137 -1887 -1898 -1927 0
8137 -1887 -1896 -1929 0
8137 -1887 -1894 -1931 0
8137 -1887 -1893 -1933 0
8137 -1885 -1904 -1924 0
8137 -1885 -1902 -1925 0
8137 -1885 -1900 -1927 0
8137 -1885 -1898 -1929 0
8137 -1885 -1896 -1931 0
8137 -1885 -1894 -1933 0
8137 -1885 -1893 -1935 0
8137 -1883 -1906 -1924 0
8137 -1883 -1904 -1925 0
8137 -1883 -1902 -1927 0
8137 -1883 -1900 -1929 0
8137 -1883 -1898 -1931 0
8137 -1883 -1896 -1933 0
8137 -1883 -1894 -1935 0
8137 -1883 -1893 -1937 0
8137 -1881 -1908 -1924 0
8137 -1881 -1906 -1925 0
8137 -1881 -1904 -1927 0
8137 -1881 -1902 -1929 0
8137 -1881 -1900 -1931 0
8137 -1881 -1898 -1933 0
8137 -1881 -1896 -1935 0
8137 -1881 -1894 -1937 0
8137 -1881 -1893 -1939 0
8137 -1879 -1910 -1924 0
8137 -1879 -1908 -1925 0
8137 -1879 -1906 -1927 0
8137 -1879 -1904 -1929 0
8137 -1879 -1902 -1931 0
8137 -1879 -1900 -1933 0
8137 -1879 -1898 -1935 0
8137 -1879 -1896 -1937 0
8137 -1879 -1894 -1939 0
8137 -1879 -1893 -1941 0
8137 -1877 -1912 -1924 0
8137 -1877 -1910 -1925 0
8137 -1877 -1908 -1927 0
8137 -1877 -1906 -1929 0
8137 -1877 -1904 -1931 0
8137 -1877 -1902 -1933 0
8137 -1877 -1900 -1935 0
8137 -1877 -1898 -1937 0
8137 -1877 -1896 -1939 0
8137 -1877 -1894 -1941 0
8137 -1877 -1893 -1943 0
8137 -1875 -1914 -1924 0
8137 -1875 -1912 -1925 0
8137 -1875 -1910 -1927 0
8137 -1875 -1908 -1929 0
8137 -1875 -1906 -1931 0
8137 -1875 -1904 -1933 0
8137 -1875 -1902 -1935 0
8137 -1875 -1900 -1937 0
8137 -1875 -1898 -1939 0
8137 -1875 -1896 -1941 0
8137 -1875 -1894 -1943 0
8137 -1875 -1893 -1945 0
8137 -1873 -1916 -1924 0
8137 -1873 -1914 -1925 0
8137 -1873 -1912 -1927 0
8137 -1873 -1910 -1929 0
8137 -1873 -1908 -1931 0
8137 -1873 -1906 -1933 0
8137 -1873 -1904 -1935 0
8137 -1873 -1902 -1937 0
8137 -1873 -1900 -1939 0
8137 -1873 -1898 -1941 0
8137 -1873 -1896 -1943 0
8137 -1873 -1894 -1945 0
8137 -1873 -1893 -1947 0
8137 -1871 -1918 -1924 0
8137 -1871 -1916 -1925 0
8137 -1871 -1914 -1927 0
8137 -1871 -1912 -1929 0
8137 -1871 -1910 -1931 0
8137 -1871 -1908 -1933 0
8137 -1871 -1906 -1935 0
8137 -1871 -1904 -1937 0
8137 -1871 -1902 -1939 0
8137 -1871 -1900 -1941 0
8137 -1871 -1898 -1943 0
8137 -1871 -1896 -1945 0
8137 -1871 -1894 -1947 0
8137 -1871 -1893 -1949 0
8137 -1869 -1920 -1924 0
8137 -1869 -1918 -1925 0
8137 -1869 -1916 -1927 0
8137 -1869 -1914 -1929 0
8137 -1869 -1912 -1931 0
8137 -1869 -1910 -1933 0
8137 -1869 -1908 -1935 0
8137 -1869 -1906 -1937 0
8137 -1869 -1904 -1939 0
8137 -1869 -1902 -1941 0
8137 -1869 -1900 -1943 0
8137 -1869 -1898 -1945 0
8137 -1869 -1896 -1947 0
8137 -1869 -1894 -1949 0
8137 -1869 -1893 -1951 0
8137 -1867 -1922 -1924 0
8137 -1867 -1920 -1925 0
8137 -1867 -1918 -1927 0
8137 -1867 -1916 -1929 0
8137 -1867 -1914 -1931 0
8137 -1867 -1912 -1933 0
8137 -1867 -1910 -1935 0
8137 -1867 -1908 -1937 0
8137 -1867 -1906 -1939 0
8137 -1867 -1904 -1941 0
8137 -1867 -1902 -1943 0
8137 -1867 -1900 -1945 0
8137 -1867 -1898 -1947 0
8137 -1867 -1896 -1949 0
8137 -1867 -1894 -1951 0
8137 -1867 -1893 -1953 0
8137 -1865 -1924 0
8137 -1865 -1922 -1925 0
8137 -1865 -1920 -1927 0
8137 -1865 -1918 -1929 0
8137 -1865 -1916 -1931 0
8137 -1865 -1914 -1933 0
8137 -1865 -1912 -1935 0
8137 -1865 -1910 -1937 0
8137 -1865 -1908 -1939 0
8137 -1865 -1906 -1941 0
8137 -1865 -1904 -1943 0
8137 -1865 -1902 -1945 0
8137 -1865 -1900 -1947 0
8137 -1865 -1898 -1949 0
8137 -1865 -1896 -1951 0
8137 -1865 -1894 -1953 0
8137 -1865 -1893 0
8137 -1863 -1925 0
8137 -1863 -1922 -1927 0
8137 -1863 -1920 -1929 0
8137 -1863 -1918 -1931 0
8137 -1863 -1916 -1933 0
8137 -1863 -1914 -1935 0
8137 -1863 -1912 -1937 0
8137 -1863 -1910 -1939 0
8137 -1863 -1908 -1941 0
8137 -1863 -1906 -1943 0
8137 -1863 -1904 -1945 0
8137 -1863 -1902 -1947 0
8137 -1863 -1900 -1949 0
8137 -1863 -1898 -1951 0
8137 -1863 -1896 -1953 0
8137 -1863 -1894 0
8137 -1863 -1893 0
8137 -1862 -1927 0
8137 -1862 -1922 -1929 0
8137 -1862 -1920 -1931 0
8137 -1862 -1918 -1933 0
8137 -1862 -1916 -1935 0
8137 -1862 -1914 -1937 0
8137 -1862 -1912 -1939 0
8137 -1862 -1910 -1941 0
8137 -1862 -1908 -1943 0
8137 -1862 -1906 -1945 0
8137 -1862 -1904 -1947 0
8137 -1862 -1902 -1949 0
8137 -1862 -1900 -1951 0
8137 -1862 -1898 -1953 0
8137 -1862 -1896 0
8137 -1862 -1894 0
8137 -1862 -1893 0
c ((18<=(aux410 + aux411 + aux412))=tv=SATLiteral(8138))
-8138 -1894 -1924 0
-8138 -1893 -1925 0
-8138 -1891 -1896 -1924 0
-8138 -1891 -1894 -1925 0
-8138 -1891 -1893 -1927 0
-8138 -1889 -1898 -1924 0
-8138 -1889 -1896 -1925 0
-8138 -1889 -1894 -1927 0
-8138 -1889 -1893 -1929 0
-8138 -1887 -1900 -1924 0
-8138 -1887 -1898 -1925 0
-8138 -1887 -1896 -1927 0
-8138 -1887 -1894 -1929 0
-8138 -1887 -1893 -1931 0
-8138 -1885 -1902 -1924 0
-8138 -1885 -1900 -1925 0
-8138 -1885 -1898 -1927 0
-8138 -1885 -1896 -1929 0
-8138 -1885 -1894 -1931 0
-8138 -1885 -1893 -1933 0
-8138 -1883 -1904 -1924 0
-8138 -1883 -1902 -1925 0
-8138 -1883 -1900 -1927 0
-8138 -1883 -1898 -1929 0
-8138 -1883 -1896 -1931 0
-8138 -1883 -1894 -1933 0
-8138 -1883 -1893 -1935 0
-8138 -1881 -1906 -1924 0
-8138 -1881 -1904 -1925 0
-8138 -1881 -1902 -1927 0
-8138 -1881 -1900 -1929 0
-8138 -1881 -1898 -1931 0
-8138 -1881 -1896 -1933 0
-8138 -1881 -1894 -1935 0
-8138 -1881 -1893 -1937 0
-8138 -1879 -1908 -1924 0
-8138 -1879 -1906 -1925 0
-8138 -1879 -1904 -1927 0
-8138 -1879 -1902 -1929 0
-8138 -1879 -1900 -1931 0
-8138 -1879 -1898 -1933 0
-8138 -1879 -1896 -1935 0
-8138 -1879 -1894 -1937 0
-8138 -1879 -1893 -1939 0
-8138 -1877 -1910 -1924 0
-8138 -1877 -1908 -1925 0
-8138 -1877 -1906 -1927 0
-8138 -1877 -1904 -1929 0
-8138 -1877 -1902 -1931 0
-8138 -1877 -1900 -1933 0
-8138 -1877 -1898 -1935 0
-8138 -1877 -1896 -1937 0
-8138 -1877 -1894 -1939 0
-8138 -1877 -1893 -1941 0
-8138 -1875 -1912 -1924 0
-8138 -1875 -1910 -1925 0
-8138 -1875 -1908 -1927 0
-8138 -1875 -1906 -1929 0
-8138 -1875 -1904 -1931 0
-8138 -1875 -1902 -1933 0
-8138 -1875 -1900 -1935 0
-8138 -1875 -1898 -1937 0
-8138 -1875 -1896 -1939 0
-8138 -1875 -1894 -1941 0
-8138 -1875 -1893 -1943 0
-8138 -1873 -1914 -1924 0
-8138 -1873 -1912 -1925 0
-8138 -1873 -1910 -1927 0
-8138 -1873 -1908 -1929 0
-8138 -1873 -1906 -1931 0
-8138 -1873 -1904 -1933 0
-8138 -1873 -1902 -1935 0
-8138 -1873 -1900 -1937 0
-8138 -1873 -1898 -1939 0
-8138 -1873 -1896 -1941 0
-8138 -1873 -1894 -1943 0
-8138 -1873 -1893 -1945 0
-8138 -1871 -1916 -1924 0
-8138 -1871 -1914 -1925 0
-8138 -1871 -1912 -1927 0
-8138 -1871 -1910 -1929 0
-8138 -1871 -1908 -1931 0
-8138 -1871 -1906 -1933 0
-8138 -1871 -1904 -1935 0
-8138 -1871 -1902 -1937 0
-8138 -1871 -1900 -1939 0
-8138 -1871 -1898 -1941 0
-8138 -1871 -1896 -1943 0
-8138 -1871 -1894 -1945 0
-8138 -1871 -1893 -1947 0
-8138 -1869 -1918 -1924 0
-8138 -1869 -1916 -1925 0
-8138 -1869 -1914 -1927 0
-8138 -1869 -1912 -1929 0
-8138 -1869 -1910 -1931 0
-8138 -1869 -1908 -1933 0
-8138 -1869 -1906 -1935 0
-8138 -1869 -1904 -1937 0
-8138 -1869 -1902 -1939 0
-8138 -1869 -1900 -1941 0
-8138 -1869 -1898 -1943 0
-8138 -1869 -1896 -1945 0
-8138 -1869 -1894 -1947 0
-8138 -1869 -1893 -1949 0
-8138 -1867 -1920 -1924 0
-8138 -1867 -1918 -1925 0
-8138 -1867 -1916 -1927 0
-8138 -1867 -1914 -1929 0
-8138 -1867 -1912 -1931 0
-8138 -1867 -1910 -1933 0
-8138 -1867 -1908 -1935 0
-8138 -1867 -1906 -1937 0
-8138 -1867 -1904 -1939 0
-8138 -1867 -1902 -1941 0
-8138 -1867 -1900 -1943 0
-8138 -1867 -1898 -1945 0
-8138 -1867 -1896 -1947 0
-8138 -1867 -1894 -1949 0
-8138 -1867 -1893 -1951 0
-8138 -1865 -1922 -1924 0
-8138 -1865 -1920 -1925 0
-8138 -1865 -1918 -1927 0
-8138 -1865 -1916 -1929 0
-8138 -1865 -1914 -1931 0
-8138 -1865 -1912 -1933 0
-8138 -1865 -1910 -1935 0
-8138 -1865 -1908 -1937 0
-8138 -1865 -1906 -1939 0
-8138 -1865 -1904 -1941 0
-8138 -1865 -1902 -1943 0
-8138 -1865 -1900 -1945 0
-8138 -1865 -1898 -1947 0
-8138 -1865 -1896 -1949 0
-8138 -1865 -1894 -1951 0
-8138 -1865 -1893 -1953 0
-8138 -1863 -1924 0
-8138 -1863 -1922 -1925 0
-8138 -1863 -1920 -1927 0
-8138 -1863 -1918 -1929 0
-8138 -1863 -1916 -1931 0
-8138 -1863 -1914 -1933 0
-8138 -1863 -1912 -1935 0
-8138 -1863 -1910 -1937 0
-8138 -1863 -1908 -1939 0
-8138 -1863 -1906 -1941 0
-8138 -1863 -1904 -1943 0
-8138 -1863 -1902 -1945 0
-8138 -1863 -1900 -1947 0
-8138 -1863 -1898 -1949 0
-8138 -1863 -1896 -1951 0
-8138 -1863 -1894 -1953 0
-8138 -1863 -1893 0
-8138 -1862 -1925 0
-8138 -1862 -1922 -1927 0
-8138 -1862 -1920 -1929 0
-8138 -1862 -1918 -1931 0
-8138 -1862 -1916 -1933 0
-8138 -1862 -1914 -1935 0
-8138 -1862 -1912 -1937 0
-8138 -1862 -1910 -1939 0
-8138 -1862 -1908 -1941 0
-8138 -1862 -1906 -1943 0
-8138 -1862 -1904 -1945 0
-8138 -1862 -1902 -1947 0
-8138 -1862 -1900 -1949 0
-8138 -1862 -1898 -1951 0
-8138 -1862 -1896 -1953 0
-8138 -1862 -1894 0
-8138 -1862 -1893 0
8138 1894 1953 0
8138 1896 1951 0
8138 1898 1949 0
8138 1900 1947 0
8138 1902 1945 0
8138 1904 1943 0
8138 1906 1941 0
8138 1908 1939 0
8138 1910 1937 0
8138 1912 1935 0
8138 1914 1933 0
8138 1916 1931 0
8138 1918 1929 0
8138 1920 1927 0
8138 1922 1925 0
8138 1862 1893 1953 0
8138 1862 1894 1951 0
8138 1862 1896 1949 0
8138 1862 1898 1947 0
8138 1862 1900 1945 0
8138 1862 1902 1943 0
8138 1862 1904 1941 0
8138 1862 1906 1939 0
8138 1862 1908 1937 0
8138 1862 1910 1935 0
8138 1862 1912 1933 0
8138 1862 1914 1931 0
8138 1862 1916 1929 0
8138 1862 1918 1927 0
8138 1862 1920 1925 0
8138 1862 1922 1924 0
8138 1863 1953 0
8138 1863 1893 1951 0
8138 1863 1894 1949 0
8138 1863 1896 1947 0
8138 1863 1898 1945 0
8138 1863 1900 1943 0
8138 1863 1902 1941 0
8138 1863 1904 1939 0
8138 1863 1906 1937 0
8138 1863 1908 1935 0
8138 1863 1910 1933 0
8138 1863 1912 1931 0
8138 1863 1914 1929 0
8138 1863 1916 1927 0
8138 1863 1918 1925 0
8138 1863 1920 1924 0
8138 1863 1922 0
8138 1865 1951 0
8138 1865 1893 1949 0
8138 1865 1894 1947 0
8138 1865 1896 1945 0
8138 1865 1898 1943 0
8138 1865 1900 1941 0
8138 1865 1902 1939 0
8138 1865 1904 1937 0
8138 1865 1906 1935 0
8138 1865 1908 1933 0
8138 1865 1910 1931 0
8138 1865 1912 1929 0
8138 1865 1914 1927 0
8138 1865 1916 1925 0
8138 1865 1918 1924 0
8138 1865 1920 0
8138 1865 1922 0
8138 1867 1949 0
8138 1867 1893 1947 0
8138 1867 1894 1945 0
8138 1867 1896 1943 0
8138 1867 1898 1941 0
8138 1867 1900 1939 0
8138 1867 1902 1937 0
8138 1867 1904 1935 0
8138 1867 1906 1933 0
8138 1867 1908 1931 0
8138 1867 1910 1929 0
8138 1867 1912 1927 0
8138 1867 1914 1925 0
8138 1867 1916 1924 0
8138 1867 1918 0
8138 1867 1920 0
8138 1867 1922 0
8138 1869 1947 0
8138 1869 1893 1945 0
8138 1869 1894 1943 0
8138 1869 1896 1941 0
8138 1869 1898 1939 0
8138 1869 1900 1937 0
8138 1869 1902 1935 0
8138 1869 1904 1933 0
8138 1869 1906 1931 0
8138 1869 1908 1929 0
8138 1869 1910 1927 0
8138 1869 1912 1925 0
8138 1869 1914 1924 0
8138 1869 1916 0
8138 1869 1918 0
8138 1869 1920 0
8138 1869 1922 0
8138 1871 1945 0
8138 1871 1893 1943 0
8138 1871 1894 1941 0
8138 1871 1896 1939 0
8138 1871 1898 1937 0
8138 1871 1900 1935 0
8138 1871 1902 1933 0
8138 1871 1904 1931 0
8138 1871 1906 1929 0
8138 1871 1908 1927 0
8138 1871 1910 1925 0
8138 1871 1912 1924 0
8138 1871 1914 0
8138 1871 1916 0
8138 1871 1918 0
8138 1871 1920 0
8138 1871 1922 0
8138 1873 1943 0
8138 1873 1893 1941 0
8138 1873 1894 1939 0
8138 1873 1896 1937 0
8138 1873 1898 1935 0
8138 1873 1900 1933 0
8138 1873 1902 1931 0
8138 1873 1904 1929 0
8138 1873 1906 1927 0
8138 1873 1908 1925 0
8138 1873 1910 1924 0
8138 1873 1912 0
8138 1873 1914 0
8138 1873 1916 0
8138 1873 1918 0
8138 1873 1920 0
8138 1873 1922 0
8138 1875 1941 0
8138 1875 1893 1939 0
8138 1875 1894 1937 0
8138 1875 1896 1935 0
8138 1875 1898 1933 0
8138 1875 1900 1931 0
8138 1875 1902 1929 0
8138 1875 1904 1927 0
8138 1875 1906 1925 0
8138 1875 1908 1924 0
8138 1875 1910 0
8138 1875 1912 0
8138 1875 1914 0
8138 1875 1916 0
8138 1875 1918 0
8138 1875 1920 0
8138 1875 1922 0
8138 1877 1939 0
8138 1877 1893 1937 0
8138 1877 1894 1935 0
8138 1877 1896 1933 0
8138 1877 1898 1931 0
8138 1877 1900 1929 0
8138 1877 1902 1927 0
8138 1877 1904 1925 0
8138 1877 1906 1924 0
8138 1877 1908 0
8138 1877 1910 0
8138 1877 1912 0
8138 1877 1914 0
8138 1877 1916 0
8138 1877 1918 0
8138 1877 1920 0
8138 1877 1922 0
8138 1879 1937 0
8138 1879 1893 1935 0
8138 1879 1894 1933 0
8138 1879 1896 1931 0
8138 1879 1898 1929 0
8138 1879 1900 1927 0
8138 1879 1902 1925 0
8138 1879 1904 1924 0
8138 1879 1906 0
8138 1879 1908 0
8138 1879 1910 0
8138 1879 1912 0
8138 1879 1914 0
8138 1879 1916 0
8138 1879 1918 0
8138 1879 1920 0
8138 1879 1922 0
8138 1881 1935 0
8138 1881 1893 1933 0
8138 1881 1894 1931 0
8138 1881 1896 1929 0
8138 1881 1898 1927 0
8138 1881 1900 1925 0
8138 1881 1902 1924 0
8138 1881 1904 0
8138 1881 1906 0
8138 1881 1908 0
8138 1881 1910 0
8138 1881 1912 0
8138 1881 1914 0
8138 1881 1916 0
8138 1881 1918 0
8138 1881 1920 0
8138 1881 1922 0
8138 1883 1933 0
8138 1883 1893 1931 0
8138 1883 1894 1929 0
8138 1883 1896 1927 0
8138 1883 1898 1925 0
8138 1883 1900 1924 0
8138 1883 1902 0
8138 1883 1904 0
8138 1883 1906 0
8138 1883 1908 0
8138 1883 1910 0
8138 1883 1912 0
8138 1883 1914 0
8138 1883 1916 0
8138 1883 1918 0
8138 1883 1920 0
8138 1883 1922 0
8138 1885 1931 0
8138 1885 1893 1929 0
8138 1885 1894 1927 0
8138 1885 1896 1925 0
8138 1885 1898 1924 0
8138 1885 1900 0
8138 1885 1902 0
8138 1885 1904 0
8138 1885 1906 0
8138 1885 1908 0
8138 1885 1910 0
8138 1885 1912 0
8138 1885 1914 0
8138 1885 1916 0
8138 1885 1918 0
8138 1885 1920 0
8138 1885 1922 0
8138 1887 1929 0
8138 1887 1893 1927 0
8138 1887 1894 1925 0
8138 1887 1896 1924 0
8138 1887 1898 0
8138 1887 1900 0
8138 1887 1902 0
8138 1887 1904 0
8138 1887 1906 0
8138 1887 1908 0
8138 1887 1910 0
8138 1887 1912 0
8138 1887 1914 0
8138 1887 1916 0
8138 1887 1918 0
8138 1887 1920 0
8138 1887 1922 0
8138 1889 1927 0
8138 1889 1893 1925 0
8138 1889 1894 1924 0
8138 1889 1896 0
8138 1889 1898 0
8138 1889 1900 0
8138 1889 1902 0
8138 1889 1904 0
8138 1889 1906 0
8138 1889 1908 0
8138 1889 1910 0
8138 1889 1912 0
8138 1889 1914 0
8138 1889 1916 0
8138 1889 1918 0
8138 1889 1920 0
8138 1889 1922 0
8138 1891 1925 0
8138 1891 1893 1924 0
8138 1891 1894 0
8138 1891 1896 0
8138 1891 1898 0
8138 1891 1900 0
8138 1891 1902 0
8138 1891 1904 0
8138 1891 1906 0
8138 1891 1908 0
8138 1891 1910 0
8138 1891 1912 0
8138 1891 1914 0
8138 1891 1916 0
8138 1891 1918 0
8138 1891 1920 0
8138 1891 1922 0
c (((x_00003_00008 + x_00003_00009)<=8)=tv=SATLiteral(8139))
-8139 403 0
-8139 377 401 0
-8139 378 399 0
-8139 380 397 0
-8139 382 395 0
-8139 384 393 0
-8139 386 392 0
-8139 388 0
-8139 390 0
8139 -388 -392 0
8139 -386 -393 0
8139 -384 -395 0
8139 -382 -397 0
8139 -380 -399 0
8139 -378 -401 0
8139 -377 -403 0
c ((8<=(x_00003_00008 + x_00003_00009))=tv=SATLiteral(8140))
-8140 -386 -392 0
-8140 -384 -393 0
-8140 -382 -395 0
-8140 -380 -397 0
-8140 -378 -399 0
-8140 -377 -401 0
8140 401 0
8140 377 399 0
8140 378 397 0
8140 380 395 0
8140 382 393 0
8140 384 392 0
8140 386 0
8140 388 0
8140 390 0
c (((x_00004_00001 + x_00004_00002)<=3)=tv=SATLiteral(8141))
-8141 423 0
-8141 407 422 0
-8141 408 0
-8141 410 0
-8141 412 0
-8141 414 0
-8141 416 0
-8141 418 0
-8141 420 0
8141 -408 -422 0
8141 -407 -423 0
c ((3<=(x_00004_00001 + x_00004_00002))=tv=SATLiteral(8142))
-8142 -407 -422 0
8142 422 0
8142 407 0
8142 408 0
8142 410 0
8142 412 0
8142 414 0
8142 416 0
8142 418 0
8142 420 0
c (((x_00004_00005 + x_00004_00006)<=10)=tv=SATLiteral(8143))
-8143 467 495 0
-8143 468 493 0
-8143 470 491 0
-8143 472 489 0
-8143 474 487 0
-8143 476 485 0
-8143 478 483 0
-8143 480 482 0
8143 -482 0
8143 -480 -483 0
8143 -478 -485 0
8143 -476 -487 0
8143 -474 -489 0
8143 -472 -491 0
8143 -470 -493 0
8143 -468 -495 0
8143 -467 0
c ((10<=(x_00004_00005 + x_00004_00006))=tv=SATLiteral(8144))
-8144 -480 -482 0
-8144 -478 -483 0
-8144 -476 -485 0
-8144 -474 -487 0
-8144 -472 -489 0
-8144 -470 -491 0
-8144 -468 -493 0
-8144 -467 -495 0
8144 495 0
8144 467 493 0
8144 468 491 0
8144 470 489 0
8144 472 487 0
8144 474 485 0
8144 476 483 0
8144 478 482 0
8144 480 0
c (((x_00004_00008 + x_00005_00008)<=12)=tv=SATLiteral(8145))
-8145 515 660 0
-8145 517 658 0
-8145 519 656 0
-8145 521 654 0
-8145 523 652 0
-8145 525 650 0
8145 -650 0
8145 -525 -652 0
8145 -523 -654 0
8145 -521 -656 0
8145 -519 -658 0
8145 -517 -660 0
8145 -515 0
8145 -513 0
8145 -512 0
c ((12<=(x_00004_00008 + x_00005_00008))=tv=SATLiteral(8146))
-8146 -648 0
-8146 -525 -650 0
-8146 -523 -652 0
-8146 -521 -654 0
-8146 -519 -656 0
-8146 -517 -658 0
-8146 -515 -660 0
-8146 -513 0
-8146 -512 0
8146 513 660 0
8146 515 658 0
8146 517 656 0
8146 519 654 0
8146 521 652 0
8146 523 650 0
8146 525 648 0
c (((x_00004_00009 + x_00005_00009)<=10)=tv=SATLiteral(8147))
-8147 527 675 0
-8147 528 673 0
-8147 530 671 0
-8147 532 669 0
-8147 534 667 0
-8147 536 665 0
-8147 538 663 0
-8147 540 662 0
8147 -662 0
8147 -540 -663 0
8147 -538 -665 0
8147 -536 -667 0
8147 -534 -669 0
8147 -532 -671 0
8147 -530 -673 0
8147 -528 -675 0
8147 -527 0
c ((10<=(x_00004_00009 + x_00005_00009))=tv=SATLiteral(8148))
-8148 -540 -662 0
-8148 -538 -663 0
-8148 -536 -665 0
-8148 -534 -667 0
-8148 -532 -669 0
-8148 -530 -671 0
-8148 -528 -673 0
-8148 -527 -675 0
8148 675 0
8148 527 673 0
8148 528 671 0
8148 530 669 0
8148 532 667 0
8148 534 665 0
8148 536 663 0
8148 538 662 0
8148 540 0
c (((x_00005_00001 + x_00006_00001)<=13)=tv=SATLiteral(8149))
-8149 547 690 0
-8149 549 688 0
-8149 551 686 0
-8149 553 684 0
-8149 555 682 0
8149 -682 0
8149 -555 -684 0
8149 -553 -686 0
8149 -551 -688 0
8149 -549 -690 0
8149 -547 0
8149 -545 0
8149 -543 0
8149 -542 0
c ((13<=(x_00005_00001 + x_00006_00001))=tv=SATLiteral(8150))
-8150 -680 0
-8150 -555 -682 0
-8150 -553 -684 0
-8150 -551 -686 0
-8150 -549 -688 0
-8150 -547 -690 0
-8150 -545 0
-8150 -543 0
-8150 -542 0
8150 545 690 0
8150 547 688 0
8150 549 686 0
8150 551 684 0
8150 553 682 0
8150 555 680 0
c (((x_00005_00002 + x_00006_00002)<=11)=tv=SATLiteral(8151))
-8151 558 705 0
-8151 560 703 0
-8151 562 701 0
-8151 564 699 0
-8151 566 697 0
-8151 568 695 0
-8151 570 693 0
8151 -693 0
8151 -570 -695 0
8151 -568 -697 0
8151 -566 -699 0
8151 -564 -701 0
8151 -562 -703 0
8151 -560 -705 0
8151 -558 0
8151 -557 0
c ((11<=(x_00005_00002 + x_00006_00002))=tv=SATLiteral(8152))
-8152 -692 0
-8152 -570 -693 0
-8152 -568 -695 0
-8152 -566 -697 0
-8152 -564 -699 0
-8152 -562 -701 0
-8152 -560 -703 0
-8152 -558 -705 0
-8152 -557 0
8152 557 705 0
8152 558 703 0
8152 560 701 0
8152 562 699 0
8152 564 697 0
8152 566 695 0
8152 568 693 0
8152 570 692 0
c (((x_00005_00004 + x_00005_00005 + x_00005_00006)<=14)=tv=SATLiteral(8153))
-8153 607 630 0
-8153 609 628 0
-8153 611 626 0
-8153 613 624 0
-8153 615 622 0
-8153 587 605 630 0
-8153 587 607 628 0
-8153 587 609 626 0
-8153 587 611 624 0
-8153 587 613 622 0
-8153 587 615 620 0
-8153 588 603 630 0
-8153 588 605 628 0
-8153 588 607 626 0
-8153 588 609 624 0
-8153 588 611 622 0
-8153 588 613 620 0
-8153 588 615 618 0
-8153 590 602 630 0
-8153 590 603 628 0
-8153 590 605 626 0
-8153 590 607 624 0
-8153 590 609 622 0
-8153 590 611 620 0
-8153 590 613 618 0
-8153 590 615 617 0
-8153 592 630 0
-8153 592 602 628 0
-8153 592 603 626 0
-8153 592 605 624 0
-8153 592 607 622 0
-8153 592 609 620 0
-8153 592 611 618 0
-8153 592 613 617 0
-8153 592 615 0
-8153 594 628 0
-8153 594 602 626 0
-8153 594 603 624 0
-8153 594 605 622 0
-8153 594 607 620 0
-8153 594 609 618 0
-8153 594 611 617 0
-8153 594 613 0
-8153 594 615 0
-8153 596 626 0
-8153 596 602 624 0
-8153 596 603 622 0
-8153 596 605 620 0
-8153 596 607 618 0
-8153 596 609 617 0
-8153 596 611 0
-8153 596 613 0
-8153 596 615 0
-8153 598 624 0
-8153 598 602 622 0
-8153 598 603 620 0
-8153 598 605 618 0
-8153 598 607 617 0
-8153 598 609 0
-8153 598 611 0
-8153 598 613 0
-8153 598 615 0
-8153 600 622 0
-8153 600 602 620 0
-8153 600 603 618 0
-8153 600 605 617 0
-8153 600 607 0
-8153 600 609 0
-8153 600 611 0
-8153 600 613 0
-8153 600 615 0
8153 -607 -617 0
8153 -605 -618 0
8153 -603 -620 0
8153 -602 -622 0
8153 -600 -609 -617 0
8153 -600 -607 -618 0
8153 -600 -605 -620 0
8153 -600 -603 -622 0
8153 -600 -602 -624 0
8153 -598 -611 -617 0
8153 -598 -609 -618 0
8153 -598 -607 -620 0
8153 -598 -605 -622 0
8153 -598 -603 -624 0
8153 -598 -602 -626 0
8153 -596 -613 -617 0
8153 -596 -611 -618 0
8153 -596 -609 -620 0
8153 -596 -607 -622 0
8153 -596 -605 -624 0
8153 -596 -603 -626 0
8153 -596 -602 -628 0
8153 -594 -615 -617 0
8153 -594 -613 -618 0
8153 -594 -611 -620 0
8153 -594 -609 -622 0
8153 -594 -607 -624 0
8153 -594 -605 -626 0
8153 -594 -603 -628 0
8153 -594 -602 -630 0
8153 -592 -617 0
8153 -592 -615 -618 0
8153 -592 -613 -620 0
8153 -592 -611 -622 0
8153 -592 -609 -624 0
8153 -592 -607 -626 0
8153 -592 -605 -628 0
8153 -592 -603 -630 0
8153 -592 -602 0
8153 -590 -618 0
8153 -590 -615 -620 0
8153 -590 -613 -622 0
8153 -590 -611 -624 0
8153 -590 -609 -626 0
8153 -590 -607 -628 0
8153 -590 -605 -630 0
8153 -590 -603 0
8153 -590 -602 0
8153 -588 -620 0
8153 -588 -615 -622 0
8153 -588 -613 -624 0
8153 -588 -611 -626 0
8153 -588 -609 -628 0
8153 -588 -607 -630 0
8153 -588 -605 0
8153 -588 -603 0
8153 -588 -602 0
8153 -587 -622 0
8153 -587 -615 -624 0
8153 -587 -613 -626 0
8153 -587 -611 -628 0
8153 -587 -609 -630 0
8153 -587 -607 0
8153 -587 -605 0
8153 -587 -603 0
8153 -587 -602 0
c ((14<=(x_00005_00004 + x_00005_00005 + x_00005_00006))=tv=SATLiteral(8154))
-8154 -605 -617 0
-8154 -603 -618 0
-8154 -602 -620 0
-8154 -600 -607 -617 0
-8154 -600 -605 -618 0
-8154 -600 -603 -620 0
-8154 -600 -602 -622 0
-8154 -598 -609 -617 0
-8154 -598 -607 -618 0
-8154 -598 -605 -620 0
-8154 -598 -603 -622 0
-8154 -598 -602 -624 0
-8154 -596 -611 -617 0
-8154 -596 -609 -618 0
-8154 -596 -607 -620 0
-8154 -596 -605 -622 0
-8154 -596 -603 -624 0
-8154 -596 -602 -626 0
-8154 -594 -613 -617 0
-8154 -594 -611 -618 0
-8154 -594 -609 -620 0
-8154 -594 -607 -622 0
-8154 -594 -605 -624 0
-8154 -594 -603 -626 0
-8154 -594 -602 -628 0
-8154 -592 -615 -617 0
-8154 -592 -613 -618 0
-8154 -592 -611 -620 0
-8154 -592 -609 -622 0
-8154 -592 -607 -624 0
-8154 -592 -605 -626 0
-8154 -592 -603 -628 0
-8154 -592 -602 -630 0
-8154 -590 -617 0
-8154 -590 -615 -618 0
-8154 -590 -613 -620 0
-8154 -590 -611 -622 0
-8154 -590 -609 -624 0
-8154 -590 -607 -626 0
-8154 -590 -605 -628 0
-8154 -590 -603 -630 0
-8154 -590 -602 0
-8154 -588 -618 0
-8154 -588 -615 -620 0
-8154 -588 -613 -622 0
-8154 -588 -611 -624 0
-8154 -588 -609 -626 0
-8154 -588 -607 -628 0
-8154 -588 -605 -630 0
-8154 -588 -603 0
-8154 -588 -602 0
-8154 -587 -620 0
-8154 -587 -615 -622 0
-8154 -587 -613 -624 0
-8154 -587 -611 -626 0
-8154 -587 -609 -628 0
-8154 -587 -607 -630 0
-8154 -587 -605 0
-8154 -587 -603 0
-8154 -587 -602 0
8154 605 630 0
8154 607 628 0
8154 609 626 0
8154 611 624 0
8154 613 622 0
8154 615 620 0
8154 587 603 630 0
8154 587 605 628 0
8154 587 607 626 0
8154 587 609 624 0
8154 587 611 622 0
8154 587 613 620 0
8154 587 615 618 0
8154 588 602 630 0
8154 588 603 628 0
8154 588 605 626 0
8154 588 607 624 0
8154 588 609 622 0
8154 588 611 620 0
8154 588 613 618 0
8154 588 615 617 0
8154 590 630 0
8154 590 602 628 0
8154 590 603 626 0
8154 590 605 624 0
8154 590 607 622 0
8154 590 609 620 0
8154 590 611 618 0
8154 590 613 617 0
8154 590 615 0
8154 592 628 0
8154 592 602 626 0
8154 592 603 624 0
8154 592 605 622 0
8154 592 607 620 0
8154 592 609 618 0
8154 592 611 617 0
8154 592 613 0
8154 592 615 0
8154 594 626 0
8154 594 602 624 0
8154 594 603 622 0
8154 594 605 620 0
8154 594 607 618 0
8154 594 609 617 0
8154 594 611 0
8154 594 613 0
8154 594 615 0
8154 596 624 0
8154 596 602 622 0
8154 596 603 620 0
8154 596 605 618 0
8154 596 607 617 0
8154 596 609 0
8154 596 611 0
8154 596 613 0
8154 596 615 0
8154 598 622 0
8154 598 602 620 0
8154 598 603 618 0
8154 598 605 617 0
8154 598 607 0
8154 598 609 0
8154 598 611 0
8154 598 613 0
8154 598 615 0
8154 600 620 0
8154 600 602 618 0
8154 600 603 617 0
8154 600 605 0
8154 600 607 0
8154 600 609 0
8154 600 611 0
8154 600 613 0
8154 600 615 0
c (((x_00006_00004 + x_00006_00005)<=9)=tv=SATLiteral(8155))
-8155 750 0
-8155 722 748 0
-8155 723 746 0
-8155 725 744 0
-8155 727 742 0
-8155 729 740 0
-8155 731 738 0
-8155 733 737 0
-8155 735 0
8155 -735 -737 0
8155 -733 -738 0
8155 -731 -740 0
8155 -729 -742 0
8155 -727 -744 0
8155 -725 -746 0
8155 -723 -748 0
8155 -722 -750 0
c ((9<=(x_00006_00004 + x_00006_00005))=tv=SATLiteral(8156))
-8156 -733 -737 0
-8156 -731 -738 0
-8156 -729 -740 0
-8156 -727 -742 0
-8156 -725 -744 0
-8156 -723 -746 0
-8156 -722 -748 0
8156 748 0
8156 722 746 0
8156 723 744 0
8156 725 742 0
8156 727 740 0
8156 729 738 0
8156 731 737 0
8156 733 0
8156 735 0
c (((x_00007_00005 + x_00007_00006 + x_00006_00006)<=19)=tv=SATLiteral(8157))
-8157 872 900 765 0
-8157 873 898 765 0
-8157 873 900 763 0
-8157 875 896 765 0
-8157 875 898 763 0
-8157 875 900 761 0
-8157 877 894 765 0
-8157 877 896 763 0
-8157 877 898 761 0
-8157 877 900 759 0
-8157 879 892 765 0
-8157 879 894 763 0
-8157 879 896 761 0
-8157 879 898 759 0
-8157 879 900 757 0
-8157 881 890 765 0
-8157 881 892 763 0
-8157 881 894 761 0
-8157 881 896 759 0
-8157 881 898 757 0
-8157 881 900 755 0
-8157 883 888 765 0
-8157 883 890 763 0
-8157 883 892 761 0
-8157 883 894 759 0
-8157 883 896 757 0
-8157 883 898 755 0
-8157 883 900 753 0
-8157 885 887 765 0
-8157 885 888 763 0
-8157 885 890 761 0
-8157 885 892 759 0
-8157 885 894 757 0
-8157 885 896 755 0
-8157 885 898 753 0
-8157 885 900 752 0
8157 -752 0
8157 -900 -753 0
8157 -898 -755 0
8157 -896 -757 0
8157 -894 -759 0
8157 -892 -761 0
8157 -890 -763 0
8157 -888 -765 0
8157 -887 0
8157 -885 -753 0
8157 -885 -900 -755 0
8157 -885 -898 -757 0
8157 -885 -896 -759 0
8157 -885 -894 -761 0
8157 -885 -892 -763 0
8157 -885 -890 -765 0
8157 -885 -888 0
8157 -885 -887 0
8157 -883 -755 0
8157 -883 -900 -757 0
8157 -883 -898 -759 0
8157 -883 -896 -761 0
8157 -883 -894 -763 0
8157 -883 -892 -765 0
8157 -883 -890 0
8157 -883 -888 0
8157 -883 -887 0
8157 -881 -757 0
8157 -881 -900 -759 0
8157 -881 -898 -761 0
8157 -881 -896 -763 0
8157 -881 -894 -765 0
8157 -881 -892 0
8157 -881 -890 0
8157 -881 -888 0
8157 -881 -887 0
8157 -879 -759 0
8157 -879 -900 -761 0
8157 -879 -898 -763 0
8157 -879 -896 -765 0
8157 -879 -894 0
8157 -879 -892 0
8157 -879 -890 0
8157 -879 -888 0
8157 -879 -887 0
8157 -877 -761 0
8157 -877 -900 -763 0
8157 -877 -898 -765 0
8157 -877 -896 0
8157 -877 -894 0
8157 -877 -892 0
8157 -877 -890 0
8157 -877 -888 0
8157 -877 -887 0
8157 -875 -763 0
8157 -875 -900 -765 0
8157 -875 -898 0
8157 -875 -896 0
8157 -875 -894 0
8157 -875 -892 0
8157 -875 -890 0
8157 -875 -888 0
8157 -875 -887 0
8157 -873 -765 0
8157 -873 -900 0
8157 -873 -898 0
8157 -873 -896 0
8157 -873 -894 0
8157 -873 -892 0
8157 -873 -890 0
8157 -873 -888 0
8157 -873 -887 0
8157 -872 0
8157 -872 -900 0
8157 -872 -898 0
8157 -872 -896 0
8157 -872 -894 0
8157 -872 -892 0
8157 -872 -890 0
8157 -872 -888 0
8157 -872 -887 0
c ((19<=(x_00007_00005 + x_00007_00006 + x_00006_00006))=tv=SATLiteral(8158))
-8158 -900 -752 0
-8158 -898 -753 0
-8158 -896 -755 0
-8158 -894 -757 0
-8158 -892 -759 0
-8158 -890 -761 0
-8158 -888 -763 0
-8158 -887 -765 0
-8158 -885 -752 0
-8158 -885 -900 -753 0
-8158 -885 -898 -755 0
-8158 -885 -896 -757 0
-8158 -885 -894 -759 0
-8158 -885 -892 -761 0
-8158 -885 -890 -763 0
-8158 -885 -888 -765 0
-8158 -885 -887 0
-8158 -883 -753 0
-8158 -883 -900 -755 0
-8158 -883 -898 -757 0
-8158 -883 -896 -759 0
-8158 -883 -894 -761 0
-8158 -883 -892 -763 0
-8158 -883 -890 -765 0
-8158 -883 -888 0
-8158 -883 -887 0
-8158 -881 -755 0
-8158 -881 -900 -757 0
-8158 -881 -898 -759 0
-8158 -881 -896 -761 0
-8158 -881 -894 -763 0
-8158 -881 -892 -765 0
-8158 -881 -890 0
-8158 -881 -888 0
-8158 -881 -887 0
-8158 -879 -757 0
-8158 -879 -900 -759 0
-8158 -879 -898 -761 0
-8158 -879 -896 -763 0
-8158 -879 -894 -765 0
-8158 -879 -892 0
-8158 -879 -890 0
-8158 -879 -888 0
-8158 -879 -887 0
-8158 -877 -759 0
-8158 -877 -900 -761 0
-8158 -877 -898 -763 0
-8158 -877 -896 -765 0
-8158 -877 -894 0
-8158 -877 -892 0
-8158 -877 -890 0
-8158 -877 -888 0
-8158 -877 -887 0
-8158 -875 -761 0
-8158 -875 -900 -763 0
-8158 -875 -898 -765 0
-8158 -875 -896 0
-8158 -875 -894 0
-8158 -875 -892 0
-8158 -875 -890 0
-8158 -875 -888 0
-8158 -875 -887 0
-8158 -873 -763 0
-8158 -873 -900 -765 0
-8158 -873 -898 0
-8158 -873 -896 0
-8158 -873 -894 0
-8158 -873 -892 0
-8158 -873 -890 0
-8158 -873 -888 0
-8158 -873 -887 0
-8158 -872 -765 0
-8158 -872 -900 0
-8158 -872 -898 0
-8158 -872 -896 0
-8158 -872 -894 0
-8158 -872 -892 0
-8158 -872 -890 0
-8158 -872 -888 0
-8158 -872 -887 0
8158 900 765 0
8158 872 898 765 0
8158 872 900 763 0
8158 873 896 765 0
8158 873 898 763 0
8158 873 900 761 0
8158 875 894 765 0
8158 875 896 763 0
8158 875 898 761 0
8158 875 900 759 0
8158 877 892 765 0
8158 877 894 763 0
8158 877 896 761 0
8158 877 898 759 0
8158 877 900 757 0
8158 879 890 765 0
8158 879 892 763 0
8158 879 894 761 0
8158 879 896 759 0
8158 879 898 757 0
8158 879 900 755 0
8158 881 888 765 0
8158 881 890 763 0
8158 881 892 761 0
8158 881 894 759 0
8158 881 896 757 0
8158 881 898 755 0
8158 881 900 753 0
8158 883 887 765 0
8158 883 888 763 0
8158 883 890 761 0
8158 883 892 759 0
8158 883 894 757 0
8158 883 896 755 0
8158 883 898 753 0
8158 883 900 752 0
8158 885 765 0
8158 885 887 763 0
8158 885 888 761 0
8158 885 890 759 0
8158 885 892 757 0
8158 885 894 755 0
8158 885 896 753 0
8158 885 898 752 0
8158 885 900 0
c (((x_00006_00008 + x_00006_00009)<=10)=tv=SATLiteral(8159))
-8159 782 810 0
-8159 783 808 0
-8159 785 806 0
-8159 787 804 0
-8159 789 802 0
-8159 791 800 0
-8159 793 798 0
-8159 795 797 0
8159 -797 0
8159 -795 -798 0
8159 -793 -800 0
8159 -791 -802 0
8159 -789 -804 0
8159 -787 -806 0
8159 -785 -808 0
8159 -783 -810 0
8159 -782 0
c ((10<=(x_00006_00008 + x_00006_00009))=tv=SATLiteral(8160))
-8160 -795 -797 0
-8160 -793 -798 0
-8160 -791 -800 0
-8160 -789 -802 0
-8160 -787 -804 0
-8160 -785 -806 0
-8160 -783 -808 0
-8160 -782 -810 0
8160 810 0
8160 782 808 0
8160 783 806 0
8160 785 804 0
8160 787 802 0
8160 789 800 0
8160 791 798 0
8160 793 797 0
8160 795 0
c (((x_00007_00001 + x_00007_00002)<=7)=tv=SATLiteral(8161))
-8161 836 0
-8161 812 834 0
-8161 813 832 0
-8161 815 830 0
-8161 817 828 0
-8161 819 827 0
-8161 821 0
-8161 823 0
-8161 825 0
8161 -821 -827 0
8161 -819 -828 0
8161 -817 -830 0
8161 -815 -832 0
8161 -813 -834 0
8161 -812 -836 0
c ((7<=(x_00007_00001 + x_00007_00002))=tv=SATLiteral(8162))
-8162 -819 -827 0
-8162 -817 -828 0
-8162 -815 -830 0
-8162 -813 -832 0
-8162 -812 -834 0
8162 834 0
8162 812 832 0
8162 813 830 0
8162 815 828 0
8162 817 827 0
8162 819 0
8162 821 0
8162 823 0
8162 825 0
c (((x_00007_00008 + x_00007_00009)<=7)=tv=SATLiteral(8163))
-8163 941 0
-8163 917 939 0
-8163 918 937 0
-8163 920 935 0
-8163 922 933 0
-8163 924 932 0
-8163 926 0
-8163 928 0
-8163 930 0
8163 -926 -932 0
8163 -924 -933 0
8163 -922 -935 0
8163 -920 -937 0
8163 -918 -939 0
8163 -917 -941 0
c ((7<=(x_00007_00008 + x_00007_00009))=tv=SATLiteral(8164))
-8164 -924 -932 0
-8164 -922 -933 0
-8164 -920 -935 0
-8164 -918 -937 0
-8164 -917 -939 0
8164 939 0
8164 917 937 0
8164 918 935 0
8164 920 933 0
8164 922 932 0
8164 924 0
8164 926 0
8164 928 0
8164 930 0
c (((aux413 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1))<=13)=tv=SATLiteral(8165))
-8165 1980 0
-8165 1082 1978 0
-8165 1083 1976 0
-8165 1085 1974 0
-8165 1087 1972 0
-8165 1089 1970 0
-8165 1091 1968 0
-8165 1093 1966 0
-8165 1095 1964 0
-8165 962 1978 0
-8165 962 1082 1976 0
-8165 962 1083 1974 0
-8165 962 1085 1972 0
-8165 962 1087 1970 0
-8165 962 1089 1968 0
-8165 962 1091 1966 0
-8165 962 1093 1964 0
-8165 962 1095 1962 0
-8165 963 1976 0
-8165 963 1082 1974 0
-8165 963 1083 1972 0
-8165 963 1085 1970 0
-8165 963 1087 1968 0
-8165 963 1089 1966 0
-8165 963 1091 1964 0
-8165 963 1093 1962 0
-8165 963 1095 1960 0
-8165 965 1974 0
-8165 965 1082 1972 0
-8165 965 1083 1970 0
-8165 965 1085 1968 0
-8165 965 1087 1966 0
-8165 965 1089 1964 0
-8165 965 1091 1962 0
-8165 965 1093 1960 0
-8165 965 1095 1958 0
-8165 967 1972 0
-8165 967 1082 1970 0
-8165 967 1083 1968 0
-8165 967 1085 1966 0
-8165 967 1087 1964 0
-8165 967 1089 1962 0
-8165 967 1091 1960 0
-8165 967 1093 1958 0
-8165 967 1095 1956 0
-8165 969 1970 0
-8165 969 1082 1968 0
-8165 969 1083 1966 0
-8165 969 1085 1964 0
-8165 969 1087 1962 0
-8165 969 1089 1960 0
-8165 969 1091 1958 0
-8165 969 1093 1956 0
-8165 969 1095 1955 0
-8165 971 1968 0
-8165 971 1082 1966 0
-8165 971 1083 1964 0
-8165 971 1085 1962 0
-8165 971 1087 1960 0
-8165 971 1089 1958 0
-8165 971 1091 1956 0
-8165 971 1093 1955 0
-8165 971 1095 0
-8165 973 1966 0
-8165 973 1082 1964 0
-8165 973 1083 1962 0
-8165 973 1085 1960 0
-8165 973 1087 1958 0
-8165 973 1089 1956 0
-8165 973 1091 1955 0
-8165 973 1093 0
-8165 973 1095 0
-8165 975 1964 0
-8165 975 1082 1962 0
-8165 975 1083 1960 0
-8165 975 1085 1958 0
-8165 975 1087 1956 0
-8165 975 1089 1955 0
-8165 975 1091 0
-8165 975 1093 0
-8165 975 1095 0
8165 -1091 -1955 0
8165 -1089 -1956 0
8165 -1087 -1958 0
8165 -1085 -1960 0
8165 -1083 -1962 0
8165 -1082 -1964 0
8165 -975 -1093 -1955 0
8165 -975 -1091 -1956 0
8165 -975 -1089 -1958 0
8165 -975 -1087 -1960 0
8165 -975 -1085 -1962 0
8165 -975 -1083 -1964 0
8165 -975 -1082 -1966 0
8165 -973 -1095 -1955 0
8165 -973 -1093 -1956 0
8165 -973 -1091 -1958 0
8165 -973 -1089 -1960 0
8165 -973 -1087 -1962 0
8165 -973 -1085 -1964 0
8165 -973 -1083 -1966 0
8165 -973 -1082 -1968 0
8165 -971 -1955 0
8165 -971 -1095 -1956 0
8165 -971 -1093 -1958 0
8165 -971 -1091 -1960 0
8165 -971 -1089 -1962 0
8165 -971 -1087 -1964 0
8165 -971 -1085 -1966 0
8165 -971 -1083 -1968 0
8165 -971 -1082 -1970 0
8165 -969 -1956 0
8165 -969 -1095 -1958 0
8165 -969 -1093 -1960 0
8165 -969 -1091 -1962 0
8165 -969 -1089 -1964 0
8165 -969 -1087 -1966 0
8165 -969 -1085 -1968 0
8165 -969 -1083 -1970 0
8165 -969 -1082 -1972 0
8165 -967 -1958 0
8165 -967 -1095 -1960 0
8165 -967 -1093 -1962 0
8165 -967 -1091 -1964 0
8165 -967 -1089 -1966 0
8165 -967 -1087 -1968 0
8165 -967 -1085 -1970 0
8165 -967 -1083 -1972 0
8165 -967 -1082 -1974 0
8165 -965 -1960 0
8165 -965 -1095 -1962 0
8165 -965 -1093 -1964 0
8165 -965 -1091 -1966 0
8165 -965 -1089 -1968 0
8165 -965 -1087 -1970 0
8165 -965 -1085 -1972 0
8165 -965 -1083 -1974 0
8165 -965 -1082 -1976 0
8165 -963 -1962 0
8165 -963 -1095 -1964 0
8165 -963 -1093 -1966 0
8165 -963 -1091 -1968 0
8165 -963 -1089 -1970 0
8165 -963 -1087 -1972 0
8165 -963 -1085 -1974 0
8165 -963 -1083 -1976 0
8165 -963 -1082 -1978 0
8165 -962 -1964 0
8165 -962 -1095 -1966 0
8165 -962 -1093 -1968 0
8165 -962 -1091 -1970 0
8165 -962 -1089 -1972 0
8165 -962 -1087 -1974 0
8165 -962 -1085 -1976 0
8165 -962 -1083 -1978 0
8165 -962 -1082 -1980 0
c ((13<=(aux413 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1)))=tv=SATLiteral(8166))
-8166 -1089 -1955 0
-8166 -1087 -1956 0
-8166 -1085 -1958 0
-8166 -1083 -1960 0
-8166 -1082 -1962 0
-8166 -975 -1091 -1955 0
-8166 -975 -1089 -1956 0
-8166 -975 -1087 -1958 0
-8166 -975 -1085 -1960 0
-8166 -975 -1083 -1962 0
-8166 -975 -1082 -1964 0
-8166 -973 -1093 -1955 0
-8166 -973 -1091 -1956 0
-8166 -973 -1089 -1958 0
-8166 -973 -1087 -1960 0
-8166 -973 -1085 -1962 0
-8166 -973 -1083 -1964 0
-8166 -973 -1082 -1966 0
-8166 -971 -1095 -1955 0
-8166 -971 -1093 -1956 0
-8166 -971 -1091 -1958 0
-8166 -971 -1089 -1960 0
-8166 -971 -1087 -1962 0
-8166 -971 -1085 -1964 0
-8166 -971 -1083 -1966 0
-8166 -971 -1082 -1968 0
-8166 -969 -1955 0
-8166 -969 -1095 -1956 0
-8166 -969 -1093 -1958 0
-8166 -969 -1091 -1960 0
-8166 -969 -1089 -1962 0
-8166 -969 -1087 -1964 0
-8166 -969 -1085 -1966 0
-8166 -969 -1083 -1968 0
-8166 -969 -1082 -1970 0
-8166 -967 -1956 0
-8166 -967 -1095 -1958 0
-8166 -967 -1093 -1960 0
-8166 -967 -1091 -1962 0
-8166 -967 -1089 -1964 0
-8166 -967 -1087 -1966 0
-8166 -967 -1085 -1968 0
-8166 -967 -1083 -1970 0
-8166 -967 -1082 -1972 0
-8166 -965 -1958 0
-8166 -965 -1095 -1960 0
-8166 -965 -1093 -1962 0
-8166 -965 -1091 -1964 0
-8166 -965 -1089 -1966 0
-8166 -965 -1087 -1968 0
-8166 -965 -1085 -1970 0
-8166 -965 -1083 -1972 0
-8166 -965 -1082 -1974 0
-8166 -963 -1960 0
-8166 -963 -1095 -1962 0
-8166 -963 -1093 -1964 0
-8166 -963 -1091 -1966 0
-8166 -963 -1089 -1968 0
-8166 -963 -1087 -1970 0
-8166 -963 -1085 -1972 0
-8166 -963 -1083 -1974 0
-8166 -963 -1082 -1976 0
-8166 -962 -1962 0
-8166 -962 -1095 -1964 0
-8166 -962 -1093 -1966 0
-8166 -962 -1091 -1968 0
-8166 -962 -1089 -1970 0
-8166 -962 -1087 -1972 0
-8166 -962 -1085 -1974 0
-8166 -962 -1083 -1976 0
-8166 -962 -1082 -1978 0
8166 1978 0
8166 1082 1976 0
8166 1083 1974 0
8166 1085 1972 0
8166 1087 1970 0
8166 1089 1968 0
8166 1091 1966 0
8166 1093 1964 0
8166 1095 1962 0
8166 962 1976 0
8166 962 1082 1974 0
8166 962 1083 1972 0
8166 962 1085 1970 0
8166 962 1087 1968 0
8166 962 1089 1966 0
8166 962 1091 1964 0
8166 962 1093 1962 0
8166 962 1095 1960 0
8166 963 1974 0
8166 963 1082 1972 0
8166 963 1083 1970 0
8166 963 1085 1968 0
8166 963 1087 1966 0
8166 963 1089 1964 0
8166 963 1091 1962 0
8166 963 1093 1960 0
8166 963 1095 1958 0
8166 965 1972 0
8166 965 1082 1970 0
8166 965 1083 1968 0
8166 965 1085 1966 0
8166 965 1087 1964 0
8166 965 1089 1962 0
8166 965 1091 1960 0
8166 965 1093 1958 0
8166 965 1095 1956 0
8166 967 1970 0
8166 967 1082 1968 0
8166 967 1083 1966 0
8166 967 1085 1964 0
8166 967 1087 1962 0
8166 967 1089 1960 0
8166 967 1091 1958 0
8166 967 1093 1956 0
8166 967 1095 1955 0
8166 969 1968 0
8166 969 1082 1966 0
8166 969 1083 1964 0
8166 969 1085 1962 0
8166 969 1087 1960 0
8166 969 1089 1958 0
8166 969 1091 1956 0
8166 969 1093 1955 0
8166 969 1095 0
8166 971 1966 0
8166 971 1082 1964 0
8166 971 1083 1962 0
8166 971 1085 1960 0
8166 971 1087 1958 0
8166 971 1089 1956 0
8166 971 1091 1955 0
8166 971 1093 0
8166 971 1095 0
8166 973 1964 0
8166 973 1082 1962 0
8166 973 1083 1960 0
8166 973 1085 1958 0
8166 973 1087 1956 0
8166 973 1089 1955 0
8166 973 1091 0
8166 973 1093 0
8166 973 1095 0
8166 975 1962 0
8166 975 1082 1960 0
8166 975 1083 1958 0
8166 975 1085 1956 0
8166 975 1087 1955 0
8166 975 1089 0
8166 975 1091 0
8166 975 1093 0
8166 975 1095 0
c (((x_00008_00003 + x_00008_00004)<=10)=tv=SATLiteral(8167))
-8167 977 1005 0
-8167 978 1003 0
-8167 980 1001 0
-8167 982 999 0
-8167 984 997 0
-8167 986 995 0
-8167 988 993 0
-8167 990 992 0
8167 -992 0
8167 -990 -993 0
8167 -988 -995 0
8167 -986 -997 0
8167 -984 -999 0
8167 -982 -1001 0
8167 -980 -1003 0
8167 -978 -1005 0
8167 -977 0
c ((10<=(x_00008_00003 + x_00008_00004))=tv=SATLiteral(8168))
-8168 -990 -992 0
-8168 -988 -993 0
-8168 -986 -995 0
-8168 -984 -997 0
-8168 -982 -999 0
-8168 -980 -1001 0
-8168 -978 -1003 0
-8168 -977 -1005 0
8168 1005 0
8168 977 1003 0
8168 978 1001 0
8168 980 999 0
8168 982 997 0
8168 984 995 0
8168 986 993 0
8168 988 992 0
8168 990 0
c (((aux414 + shift(x_00008_00006, -1) + shift(x_00009_00006, -1))<=20)=tv=SATLiteral(8169))
-8169 1164 2015 0
-8169 1166 2013 0
-8169 1168 2011 0
-8169 1170 2009 0
-8169 1022 1162 2015 0
-8169 1022 1164 2013 0
-8169 1022 1166 2011 0
-8169 1022 1168 2009 0
-8169 1022 1170 2007 0
-8169 1023 1160 2015 0
-8169 1023 1162 2013 0
-8169 1023 1164 2011 0
-8169 1023 1166 2009 0
-8169 1023 1168 2007 0
-8169 1023 1170 2005 0
-8169 1025 1158 2015 0
-8169 1025 1160 2013 0
-8169 1025 1162 2011 0
-8169 1025 1164 2009 0
-8169 1025 1166 2007 0
-8169 1025 1168 2005 0
-8169 1025 1170 2003 0
-8169 1027 1157 2015 0
-8169 1027 1158 2013 0
-8169 1027 1160 2011 0
-8169 1027 1162 2009 0
-8169 1027 1164 2007 0
-8169 1027 1166 2005 0
-8169 1027 1168 2003 0
-8169 1027 1170 2001 0
-8169 1029 2015 0
-8169 1029 1157 2013 0
-8169 1029 1158 2011 0
-8169 1029 1160 2009 0
-8169 1029 1162 2007 0
-8169 1029 1164 2005 0
-8169 1029 1166 2003 0
-8169 1029 1168 2001 0
-8169 1029 1170 1999 0
-8169 1031 2013 0
-8169 1031 1157 2011 0
-8169 1031 1158 2009 0
-8169 1031 1160 2007 0
-8169 1031 1162 2005 0
-8169 1031 1164 2003 0
-8169 1031 1166 2001 0
-8169 1031 1168 1999 0
-8169 1031 1170 1997 0
-8169 1033 2011 0
-8169 1033 1157 2009 0
-8169 1033 1158 2007 0
-8169 1033 1160 2005 0
-8169 1033 1162 2003 0
-8169 1033 1164 2001 0
-8169 1033 1166 1999 0
-8169 1033 1168 1997 0
-8169 1033 1170 1995 0
-8169 1035 2009 0
-8169 1035 1157 2007 0
-8169 1035 1158 2005 0
-8169 1035 1160 2003 0
-8169 1035 1162 2001 0
-8169 1035 1164 1999 0
-8169 1035 1166 1997 0
-8169 1035 1168 1995 0
-8169 1035 1170 1993 0
8169 -1993 0
8169 -1170 -1995 0
8169 -1168 -1997 0
8169 -1166 -1999 0
8169 -1164 -2001 0
8169 -1162 -2003 0
8169 -1160 -2005 0
8169 -1158 -2007 0
8169 -1157 -2009 0
8169 -1035 -1995 0
8169 -1035 -1170 -1997 0
8169 -1035 -1168 -1999 0
8169 -1035 -1166 -2001 0
8169 -1035 -1164 -2003 0
8169 -1035 -1162 -2005 0
8169 -1035 -1160 -2007 0
8169 -1035 -1158 -2009 0
8169 -1035 -1157 -2011 0
8169 -1033 -1997 0
8169 -1033 -1170 -1999 0
8169 -1033 -1168 -2001 0
8169 -1033 -1166 -2003 0
8169 -1033 -1164 -2005 0
8169 -1033 -1162 -2007 0
8169 -1033 -1160 -2009 0
8169 -1033 -1158 -2011 0
8169 -1033 -1157 -2013 0
8169 -1031 -1999 0
8169 -1031 -1170 -2001 0
8169 -1031 -1168 -2003 0
8169 -1031 -1166 -2005 0
8169 -1031 -1164 -2007 0
8169 -1031 -1162 -2009 0
8169 -1031 -1160 -2011 0
8169 -1031 -1158 -2013 0
8169 -1031 -1157 -2015 0
8169 -1029 -2001 0
8169 -1029 -1170 -2003 0
8169 -1029 -1168 -2005 0
8169 -1029 -1166 -2007 0
8169 -1029 -1164 -2009 0
8169 -1029 -1162 -2011 0
8169 -1029 -1160 -2013 0
8169 -1029 -1158 -2015 0
8169 -1029 -1157 0
8169 -1027 -2003 0
8169 -1027 -1170 -2005 0
8169 -1027 -1168 -2007 0
8169 -1027 -1166 -2009 0
8169 -1027 -1164 -2011 0
8169 -1027 -1162 -2013 0
8169 -1027 -1160 -2015 0
8169 -1027 -1158 0
8169 -1027 -1157 0
8169 -1025 -2005 0
8169 -1025 -1170 -2007 0
8169 -1025 -1168 -2009 0
8169 -1025 -1166 -2011 0
8169 -1025 -1164 -2013 0
8169 -1025 -1162 -2015 0
8169 -1025 -1160 0
8169 -1025 -1158 0
8169 -1025 -1157 0
8169 -1023 -2007 0
8169 -1023 -1170 -2009 0
8169 -1023 -1168 -2011 0
8169 -1023 -1166 -2013 0
8169 -1023 -1164 -2015 0
8169 -1023 -1162 0
8169 -1023 -1160 0
8169 -1023 -1158 0
8169 -1023 -1157 0
8169 -1022 -2009 0
8169 -1022 -1170 -2011 0
8169 -1022 -1168 -2013 0
8169 -1022 -1166 -2015 0
8169 -1022 -1164 0
8169 -1022 -1162 0
8169 -1022 -1160 0
8169 -1022 -1158 0
8169 -1022 -1157 0
c ((20<=(aux414 + shift(x_00008_00006, -1) + shift(x_00009_00006, -1)))=tv=SATLiteral(8170))
-8170 -1991 0
-8170 -1170 -1993 0
-8170 -1168 -1995 0
-8170 -1166 -1997 0
-8170 -1164 -1999 0
-8170 -1162 -2001 0
-8170 -1160 -2003 0
-8170 -1158 -2005 0
-8170 -1157 -2007 0
-8170 -1035 -1993 0
-8170 -1035 -1170 -1995 0
-8170 -1035 -1168 -1997 0
-8170 -1035 -1166 -1999 0
-8170 -1035 -1164 -2001 0
-8170 -1035 -1162 -2003 0
-8170 -1035 -1160 -2005 0
-8170 -1035 -1158 -2007 0
-8170 -1035 -1157 -2009 0
-8170 -1033 -1995 0
-8170 -1033 -1170 -1997 0
-8170 -1033 -1168 -1999 0
-8170 -1033 -1166 -2001 0
-8170 -1033 -1164 -2003 0
-8170 -1033 -1162 -2005 0
-8170 -1033 -1160 -2007 0
-8170 -1033 -1158 -2009 0
-8170 -1033 -1157 -2011 0
-8170 -1031 -1997 0
-8170 -1031 -1170 -1999 0
-8170 -1031 -1168 -2001 0
-8170 -1031 -1166 -2003 0
-8170 -1031 -1164 -2005 0
-8170 -1031 -1162 -2007 0
-8170 -1031 -1160 -2009 0
-8170 -1031 -1158 -2011 0
-8170 -1031 -1157 -2013 0
-8170 -1029 -1999 0
-8170 -1029 -1170 -2001 0
-8170 -1029 -1168 -2003 0
-8170 -1029 -1166 -2005 0
-8170 -1029 -1164 -2007 0
-8170 -1029 -1162 -2009 0
-8170 -1029 -1160 -2011 0
-8170 -1029 -1158 -2013 0
-8170 -1029 -1157 -2015 0
-8170 -1027 -2001 0
-8170 -1027 -1170 -2003 0
-8170 -1027 -1168 -2005 0
-8170 -1027 -1166 -2007 0
-8170 -1027 -1164 -2009 0
-8170 -1027 -1162 -2011 0
-8170 -1027 -1160 -2013 0
-8170 -1027 -1158 -2015 0
-8170 -1027 -1157 0
-8170 -1025 -2003 0
-8170 -1025 -1170 -2005 0
-8170 -1025 -1168 -2007 0
-8170 -1025 -1166 -2009 0
-8170 -1025 -1164 -2011 0
-8170 -1025 -1162 -2013 0
-8170 -1025 -1160 -2015 0
-8170 -1025 -1158 0
-8170 -1025 -1157 0
-8170 -1023 -2005 0
-8170 -1023 -1170 -2007 0
-8170 -1023 -1168 -2009 0
-8170 -1023 -1166 -2011 0
-8170 -1023 -1164 -2013 0
-8170 -1023 -1162 -2015 0
-8170 -1023 -1160 0
-8170 -1023 -1158 0
-8170 -1023 -1157 0
-8170 -1022 -2007 0
-8170 -1022 -1170 -2009 0
-8170 -1022 -1168 -2011 0
-8170 -1022 -1166 -2013 0
-8170 -1022 -1164 -2015 0
-8170 -1022 -1162 0
-8170 -1022 -1160 0
-8170 -1022 -1158 0
-8170 -1022 -1157 0
8170 1162 2015 0
8170 1164 2013 0
8170 1166 2011 0
8170 1168 2009 0
8170 1170 2007 0
8170 1022 1160 2015 0
8170 1022 1162 2013 0
8170 1022 1164 2011 0
8170 1022 1166 2009 0
8170 1022 1168 2007 0
8170 1022 1170 2005 0
8170 1023 1158 2015 0
8170 1023 1160 2013 0
8170 1023 1162 2011 0
8170 1023 1164 2009 0
8170 1023 1166 2007 0
8170 1023 1168 2005 0
8170 1023 1170 2003 0
8170 1025 1157 2015 0
8170 1025 1158 2013 0
8170 1025 1160 2011 0
8170 1025 1162 2009 0
8170 1025 1164 2007 0
8170 1025 1166 2005 0
8170 1025 1168 2003 0
8170 1025 1170 2001 0
8170 1027 2015 0
8170 1027 1157 2013 0
8170 1027 1158 2011 0
8170 1027 1160 2009 0
8170 1027 1162 2007 0
8170 1027 1164 2005 0
8170 1027 1166 2003 0
8170 1027 1168 2001 0
8170 1027 1170 1999 0
8170 1029 2013 0
8170 1029 1157 2011 0
8170 1029 1158 2009 0
8170 1029 1160 2007 0
8170 1029 1162 2005 0
8170 1029 1164 2003 0
8170 1029 1166 2001 0
8170 1029 1168 1999 0
8170 1029 1170 1997 0
8170 1031 2011 0
8170 1031 1157 2009 0
8170 1031 1158 2007 0
8170 1031 1160 2005 0
8170 1031 1162 2003 0
8170 1031 1164 2001 0
8170 1031 1166 1999 0
8170 1031 1168 1997 0
8170 1031 1170 1995 0
8170 1033 2009 0
8170 1033 1157 2007 0
8170 1033 1158 2005 0
8170 1033 1160 2003 0
8170 1033 1162 2001 0
8170 1033 1164 1999 0
8170 1033 1166 1997 0
8170 1033 1168 1995 0
8170 1033 1170 1993 0
8170 1035 2007 0
8170 1035 1157 2005 0
8170 1035 1158 2003 0
8170 1035 1160 2001 0
8170 1035 1162 1999 0
8170 1035 1164 1997 0
8170 1035 1166 1995 0
8170 1035 1168 1993 0
8170 1035 1170 1991 0
c (((x_00008_00007 + x_00008_00008 + x_00009_00008)<=13)=tv=SATLiteral(8171))
-8171 1055 1200 0
-8171 1057 1198 0
-8171 1059 1196 0
-8171 1061 1194 0
-8171 1063 1192 0
-8171 1065 1190 0
-8171 1037 1053 1200 0
-8171 1037 1055 1198 0
-8171 1037 1057 1196 0
-8171 1037 1059 1194 0
-8171 1037 1061 1192 0
-8171 1037 1063 1190 0
-8171 1037 1065 1188 0
-8171 1038 1052 1200 0
-8171 1038 1053 1198 0
-8171 1038 1055 1196 0
-8171 1038 1057 1194 0
-8171 1038 1059 1192 0
-8171 1038 1061 1190 0
-8171 1038 1063 1188 0
-8171 1038 1065 1187 0
-8171 1040 1200 0
-8171 1040 1052 1198 0
-8171 1040 1053 1196 0
-8171 1040 1055 1194 0
-8171 1040 1057 1192 0
-8171 1040 1059 1190 0
-8171 1040 1061 1188 0
-8171 1040 1063 1187 0
-8171 1040 1065 0
-8171 1042 1198 0
-8171 1042 1052 1196 0
-8171 1042 1053 1194 0
-8171 1042 1055 1192 0
-8171 1042 1057 1190 0
-8171 1042 1059 1188 0
-8171 1042 1061 1187 0
-8171 1042 1063 0
-8171 1042 1065 0
-8171 1044 1196 0
-8171 1044 1052 1194 0
-8171 1044 1053 1192 0
-8171 1044 1055 1190 0
-8171 1044 1057 1188 0
-8171 1044 1059 1187 0
-8171 1044 1061 0
-8171 1044 1063 0
-8171 1044 1065 0
-8171 1046 1194 0
-8171 1046 1052 1192 0
-8171 1046 1053 1190 0
-8171 1046 1055 1188 0
-8171 1046 1057 1187 0
-8171 1046 1059 0
-8171 1046 1061 0
-8171 1046 1063 0
-8171 1046 1065 0
-8171 1048 1192 0
-8171 1048 1052 1190 0
-8171 1048 1053 1188 0
-8171 1048 1055 1187 0
-8171 1048 1057 0
-8171 1048 1059 0
-8171 1048 1061 0
-8171 1048 1063 0
-8171 1048 1065 0
-8171 1050 1190 0
-8171 1050 1052 1188 0
-8171 1050 1053 1187 0
-8171 1050 1055 0
-8171 1050 1057 0
-8171 1050 1059 0
-8171 1050 1061 0
-8171 1050 1063 0
-8171 1050 1065 0
8171 -1055 -1187 0
8171 -1053 -1188 0
8171 -1052 -1190 0
8171 -1050 -1057 -1187 0
8171 -1050 -1055 -1188 0
8171 -1050 -1053 -1190 0
8171 -1050 -1052 -1192 0
8171 -1048 -1059 -1187 0
8171 -1048 -1057 -1188 0
8171 -1048 -1055 -1190 0
8171 -1048 -1053 -1192 0
8171 -1048 -1052 -1194 0
8171 -1046 -1061 -1187 0
8171 -1046 -1059 -1188 0
8171 -1046 -1057 -1190 0
8171 -1046 -1055 -1192 0
8171 -1046 -1053 -1194 0
8171 -1046 -1052 -1196 0
8171 -1044 -1063 -1187 0
8171 -1044 -1061 -1188 0
8171 -1044 -1059 -1190 0
8171 -1044 -1057 -1192 0
8171 -1044 -1055 -1194 0
8171 -1044 -1053 -1196 0
8171 -1044 -1052 -1198 0
8171 -1042 -1065 -1187 0
8171 -1042 -1063 -1188 0
8171 -1042 -1061 -1190 0
8171 -1042 -1059 -1192 0
8171 -1042 -1057 -1194 0
8171 -1042 -1055 -1196 0
8171 -1042 -1053 -1198 0
8171 -1042 -1052 -1200 0
8171 -1040 -1187 0
8171 -1040 -1065 -1188 0
8171 -1040 -1063 -1190 0
8171 -1040 -1061 -1192 0
8171 -1040 -1059 -1194 0
8171 -1040 -1057 -1196 0
8171 -1040 -1055 -1198 0
8171 -1040 -1053 -1200 0
8171 -1040 -1052 0
8171 -1038 -1188 0
8171 -1038 -1065 -1190 0
8171 -1038 -1063 -1192 0
8171 -1038 -1061 -1194 0
8171 -1038 -1059 -1196 0
8171 -1038 -1057 -1198 0
8171 -1038 -1055 -1200 0
8171 -1038 -1053 0
8171 -1038 -1052 0
8171 -1037 -1190 0
8171 -1037 -1065 -1192 0
8171 -1037 -1063 -1194 0
8171 -1037 -1061 -1196 0
8171 -1037 -1059 -1198 0
8171 -1037 -1057 -1200 0
8171 -1037 -1055 0
8171 -1037 -1053 0
8171 -1037 -1052 0
c ((13<=(x_00008_00007 + x_00008_00008 + x_00009_00008))=tv=SATLiteral(8172))
-8172 -1053 -1187 0
-8172 -1052 -1188 0
-8172 -1050 -1055 -1187 0
-8172 -1050 -1053 -1188 0
-8172 -1050 -1052 -1190 0
-8172 -1048 -1057 -1187 0
-8172 -1048 -1055 -1188 0
-8172 -1048 -1053 -1190 0
-8172 -1048 -1052 -1192 0
-8172 -1046 -1059 -1187 0
-8172 -1046 -1057 -1188 0
-8172 -1046 -1055 -1190 0
-8172 -1046 -1053 -1192 0
-8172 -1046 -1052 -1194 0
-8172 -1044 -1061 -1187 0
-8172 -1044 -1059 -1188 0
-8172 -1044 -1057 -1190 0
-8172 -1044 -1055 -1192 0
-8172 -1044 -1053 -1194 0
-8172 -1044 -1052 -1196 0
-8172 -1042 -1063 -1187 0
-8172 -1042 -1061 -1188 0
-8172 -1042 -1059 -1190 0
-8172 -1042 -1057 -1192 0
-8172 -1042 -1055 -1194 0
-8172 -1042 -1053 -1196 0
-8172 -1042 -1052 -1198 0
-8172 -1040 -1065 -1187 0
-8172 -1040 -1063 -1188 0
-8172 -1040 -1061 -1190 0
-8172 -1040 -1059 -1192 0
-8172 -1040 -1057 -1194 0
-8172 -1040 -1055 -1196 0
-8172 -1040 -1053 -1198 0
-8172 -1040 -1052 -1200 0
-8172 -1038 -1187 0
-8172 -1038 -1065 -1188 0
-8172 -1038 -1063 -1190 0
-8172 -1038 -1061 -1192 0
-8172 -1038 -1059 -1194 0
-8172 -1038 -1057 -1196 0
-8172 -1038 -1055 -1198 0
-8172 -1038 -1053 -1200 0
-8172 -1038 -1052 0
-8172 -1037 -1188 0
-8172 -1037 -1065 -1190 0
-8172 -1037 -1063 -1192 0
-8172 -1037 -1061 -1194 0
-8172 -1037 -1059 -1196 0
-8172 -1037 -1057 -1198 0
-8172 -1037 -1055 -1200 0
-8172 -1037 -1053 0
-8172 -1037 -1052 0
8172 1053 1200 0
8172 1055 1198 0
8172 1057 1196 0
8172 1059 1194 0
8172 1061 1192 0
8172 1063 1190 0
8172 1065 1188 0
8172 1037 1052 1200 0
8172 1037 1053 1198 0
8172 1037 1055 1196 0
8172 1037 1057 1194 0
8172 1037 1059 1192 0
8172 1037 1061 1190 0
8172 1037 1063 1188 0
8172 1037 1065 1187 0
8172 1038 1200 0
8172 1038 1052 1198 0
8172 1038 1053 1196 0
8172 1038 1055 1194 0
8172 1038 1057 1192 0
8172 1038 1059 1190 0
8172 1038 1061 1188 0
8172 1038 1063 1187 0
8172 1038 1065 0
8172 1040 1198 0
8172 1040 1052 1196 0
8172 1040 1053 1194 0
8172 1040 1055 1192 0
8172 1040 1057 1190 0
8172 1040 1059 1188 0
8172 1040 1061 1187 0
8172 1040 1063 0
8172 1040 1065 0
8172 1042 1196 0
8172 1042 1052 1194 0
8172 1042 1053 1192 0
8172 1042 1055 1190 0
8172 1042 1057 1188 0
8172 1042 1059 1187 0
8172 1042 1061 0
8172 1042 1063 0
8172 1042 1065 0
8172 1044 1194 0
8172 1044 1052 1192 0
8172 1044 1053 1190 0
8172 1044 1055 1188 0
8172 1044 1057 1187 0
8172 1044 1059 0
8172 1044 1061 0
8172 1044 1063 0
8172 1044 1065 0
8172 1046 1192 0
8172 1046 1052 1190 0
8172 1046 1053 1188 0
8172 1046 1055 1187 0
8172 1046 1057 0
8172 1046 1059 0
8172 1046 1061 0
8172 1046 1063 0
8172 1046 1065 0
8172 1048 1190 0
8172 1048 1052 1188 0
8172 1048 1053 1187 0
8172 1048 1055 0
8172 1048 1057 0
8172 1048 1059 0
8172 1048 1061 0
8172 1048 1063 0
8172 1048 1065 0
8172 1050 1188 0
8172 1050 1052 1187 0
8172 1050 1053 0
8172 1050 1055 0
8172 1050 1057 0
8172 1050 1059 0
8172 1050 1061 0
8172 1050 1063 0
8172 1050 1065 0
c (((x_00008_00009 + x_00009_00009)<=13)=tv=SATLiteral(8173))
-8173 1072 1215 0
-8173 1074 1213 0
-8173 1076 1211 0
-8173 1078 1209 0
-8173 1080 1207 0
8173 -1207 0
8173 -1080 -1209 0
8173 -1078 -1211 0
8173 -1076 -1213 0
8173 -1074 -1215 0
8173 -1072 0
8173 -1070 0
8173 -1068 0
8173 -1067 0
c ((13<=(x_00008_00009 + x_00009_00009))=tv=SATLiteral(8174))
-8174 -1205 0
-8174 -1080 -1207 0
-8174 -1078 -1209 0
-8174 -1076 -1211 0
-8174 -1074 -1213 0
-8174 -1072 -1215 0
-8174 -1070 0
-8174 -1068 0
-8174 -1067 0
8174 1070 1215 0
8174 1072 1213 0
8174 1074 1211 0
8174 1076 1209 0
8174 1078 1207 0
8174 1080 1205 0
c (((x_00009_00003 + x_00009_00004 + x_00009_00005)<=13)=tv=SATLiteral(8175))
-8175 1130 1155 0
-8175 1132 1153 0
-8175 1134 1151 0
-8175 1136 1149 0
-8175 1138 1147 0
-8175 1140 1145 0
-8175 1112 1128 1155 0
-8175 1112 1130 1153 0
-8175 1112 1132 1151 0
-8175 1112 1134 1149 0
-8175 1112 1136 1147 0
-8175 1112 1138 1145 0
-8175 1112 1140 1143 0
-8175 1113 1127 1155 0
-8175 1113 1128 1153 0
-8175 1113 1130 1151 0
-8175 1113 1132 1149 0
-8175 1113 1134 1147 0
-8175 1113 1136 1145 0
-8175 1113 1138 1143 0
-8175 1113 1140 1142 0
-8175 1115 1155 0
-8175 1115 1127 1153 0
-8175 1115 1128 1151 0
-8175 1115 1130 1149 0
-8175 1115 1132 1147 0
-8175 1115 1134 1145 0
-8175 1115 1136 1143 0
-8175 1115 1138 1142 0
-8175 1115 1140 0
-8175 1117 1153 0
-8175 1117 1127 1151 0
-8175 1117 1128 1149 0
-8175 1117 1130 1147 0
-8175 1117 1132 1145 0
-8175 1117 1134 1143 0
-8175 1117 1136 1142 0
-8175 1117 1138 0
-8175 1117 1140 0
-8175 1119 1151 0
-8175 1119 1127 1149 0
-8175 1119 1128 1147 0
-8175 1119 1130 1145 0
-8175 1119 1132 1143 0
-8175 1119 1134 1142 0
-8175 1119 1136 0
-8175 1119 1138 0
-8175 1119 1140 0
-8175 1121 1149 0
-8175 1121 1127 1147 0
-8175 1121 1128 1145 0
-8175 1121 1130 1143 0
-8175 1121 1132 1142 0
-8175 1121 1134 0
-8175 1121 1136 0
-8175 1121 1138 0
-8175 1121 1140 0
-8175 1123 1147 0
-8175 1123 1127 1145 0
-8175 1123 1128 1143 0
-8175 1123 1130 1142 0
-8175 1123 1132 0
-8175 1123 1134 0
-8175 1123 1136 0
-8175 1123 1138 0
-8175 1123 1140 0
-8175 1125 1145 0
-8175 1125 1127 1143 0
-8175 1125 1128 1142 0
-8175 1125 1130 0
-8175 1125 1132 0
-8175 1125 1134 0
-8175 1125 1136 0
-8175 1125 1138 0
-8175 1125 1140 0
8175 -1130 -1142 0
8175 -1128 -1143 0
8175 -1127 -1145 0
8175 -1125 -1132 -1142 0
8175 -1125 -1130 -1143 0
8175 -1125 -1128 -1145 0
8175 -1125 -1127 -1147 0
8175 -1123 -1134 -1142 0
8175 -1123 -1132 -1143 0
8175 -1123 -1130 -1145 0
8175 -1123 -1128 -1147 0
8175 -1123 -1127 -1149 0
8175 -1121 -1136 -1142 0
8175 -1121 -1134 -1143 0
8175 -1121 -1132 -1145 0
8175 -1121 -1130 -1147 0
8175 -1121 -1128 -1149 0
8175 -1121 -1127 -1151 0
8175 -1119 -1138 -1142 0
8175 -1119 -1136 -1143 0
8175 -1119 -1134 -1145 0
8175 -1119 -1132 -1147 0
8175 -1119 -1130 -1149 0
8175 -1119 -1128 -1151 0
8175 -1119 -1127 -1153 0
8175 -1117 -1140 -1142 0
8175 -1117 -1138 -1143 0
8175 -1117 -1136 -1145 0
8175 -1117 -1134 -1147 0
8175 -1117 -1132 -1149 0
8175 -1117 -1130 -1151 0
8175 -1117 -1128 -1153 0
8175 -1117 -1127 -1155 0
8175 -1115 -1142 0
8175 -1115 -1140 -1143 0
8175 -1115 -1138 -1145 0
8175 -1115 -1136 -1147 0
8175 -1115 -1134 -1149 0
8175 -1115 -1132 -1151 0
8175 -1115 -1130 -1153 0
8175 -1115 -1128 -1155 0
8175 -1115 -1127 0
8175 -1113 -1143 0
8175 -1113 -1140 -1145 0
8175 -1113 -1138 -1147 0
8175 -1113 -1136 -1149 0
8175 -1113 -1134 -1151 0
8175 -1113 -1132 -1153 0
8175 -1113 -1130 -1155 0
8175 -1113 -1128 0
8175 -1113 -1127 0
8175 -1112 -1145 0
8175 -1112 -1140 -1147 0
8175 -1112 -1138 -1149 0
8175 -1112 -1136 -1151 0
8175 -1112 -1134 -1153 0
8175 -1112 -1132 -1155 0
8175 -1112 -1130 0
8175 -1112 -1128 0
8175 -1112 -1127 0
c ((13<=(x_00009_00003 + x_00009_00004 + x_00009_00005))=tv=SATLiteral(8176))
-8176 -1128 -1142 0
-8176 -1127 -1143 0
-8176 -1125 -1130 -1142 0
-8176 -1125 -1128 -1143 0
-8176 -1125 -1127 -1145 0
-8176 -1123 -1132 -1142 0
-8176 -1123 -1130 -1143 0
-8176 -1123 -1128 -1145 0
-8176 -1123 -1127 -1147 0
-8176 -1121 -1134 -1142 0
-8176 -1121 -1132 -1143 0
-8176 -1121 -1130 -1145 0
-8176 -1121 -1128 -1147 0
-8176 -1121 -1127 -1149 0
-8176 -1119 -1136 -1142 0
-8176 -1119 -1134 -1143 0
-8176 -1119 -1132 -1145 0
-8176 -1119 -1130 -1147 0
-8176 -1119 -1128 -1149 0
-8176 -1119 -1127 -1151 0
-8176 -1117 -1138 -1142 0
-8176 -1117 -1136 -1143 0
-8176 -1117 -1134 -1145 0
-8176 -1117 -1132 -1147 0
-8176 -1117 -1130 -1149 0
-8176 -1117 -1128 -1151 0
-8176 -1117 -1127 -1153 0
-8176 -1115 -1140 -1142 0
-8176 -1115 -1138 -1143 0
-8176 -1115 -1136 -1145 0
-8176 -1115 -1134 -1147 0
-8176 -1115 -1132 -1149 0
-8176 -1115 -1130 -1151 0
-8176 -1115 -1128 -1153 0
-8176 -1115 -1127 -1155 0
-8176 -1113 -1142 0
-8176 -1113 -1140 -1143 0
-8176 -1113 -1138 -1145 0
-8176 -1113 -1136 -1147 0
-8176 -1113 -1134 -1149 0
-8176 -1113 -1132 -1151 0
-8176 -1113 -1130 -1153 0
-8176 -1113 -1128 -1155 0
-8176 -1113 -1127 0
-8176 -1112 -1143 0
-8176 -1112 -1140 -1145 0
-8176 -1112 -1138 -1147 0
-8176 -1112 -1136 -1149 0
-8176 -1112 -1134 -1151 0
-8176 -1112 -1132 -1153 0
-8176 -1112 -1130 -1155 0
-8176 -1112 -1128 0
-8176 -1112 -1127 0
8176 1128 1155 0
8176 1130 1153 0
8176 1132 1151 0
8176 1134 1149 0
8176 1136 1147 0
8176 1138 1145 0
8176 1140 1143 0
8176 1112 1127 1155 0
8176 1112 1128 1153 0
8176 1112 1130 1151 0
8176 1112 1132 1149 0
8176 1112 1134 1147 0
8176 1112 1136 1145 0
8176 1112 1138 1143 0
8176 1112 1140 1142 0
8176 1113 1155 0
8176 1113 1127 1153 0
8176 1113 1128 1151 0
8176 1113 1130 1149 0
8176 1113 1132 1147 0
8176 1113 1134 1145 0
8176 1113 1136 1143 0
8176 1113 1138 1142 0
8176 1113 1140 0
8176 1115 1153 0
8176 1115 1127 1151 0
8176 1115 1128 1149 0
8176 1115 1130 1147 0
8176 1115 1132 1145 0
8176 1115 1134 1143 0
8176 1115 1136 1142 0
8176 1115 1138 0
8176 1115 1140 0
8176 1117 1151 0
8176 1117 1127 1149 0
8176 1117 1128 1147 0
8176 1117 1130 1145 0
8176 1117 1132 1143 0
8176 1117 1134 1142 0
8176 1117 1136 0
8176 1117 1138 0
8176 1117 1140 0
8176 1119 1149 0
8176 1119 1127 1147 0
8176 1119 1128 1145 0
8176 1119 1130 1143 0
8176 1119 1132 1142 0
8176 1119 1134 0
8176 1119 1136 0
8176 1119 1138 0
8176 1119 1140 0
8176 1121 1147 0
8176 1121 1127 1145 0
8176 1121 1128 1143 0
8176 1121 1130 1142 0
8176 1121 1132 0
8176 1121 1134 0
8176 1121 1136 0
8176 1121 1138 0
8176 1121 1140 0
8176 1123 1145 0
8176 1123 1127 1143 0
8176 1123 1128 1142 0
8176 1123 1130 0
8176 1123 1132 0
8176 1123 1134 0
8176 1123 1136 0
8176 1123 1138 0
8176 1123 1140 0
8176 1125 1143 0
8176 1125 1127 1142 0
8176 1125 1128 0
8176 1125 1130 0
8176 1125 1132 0
8176 1125 1134 0
8176 1125 1136 0
8176 1125 1138 0
8176 1125 1140 0
c (((aux416 + aux419 + aux420)<=1)=tv=SATLiteral(8177))
-8177 2035 0
-8177 2029 2034 0
-8177 2030 0
-8177 2032 0
-8177 2020 2034 0
-8177 2020 2029 0
-8177 2020 2030 0
-8177 2020 2032 0
-8177 2021 0
-8177 2021 2029 0
-8177 2021 2030 0
-8177 2021 2032 0
8177 -2021 -2029 -2034 0
8177 -2020 -2030 -2034 0
8177 -2020 -2029 -2035 0
c ((1<=(aux416 + aux419 + aux420))=tv=SATLiteral(8178))
-8178 -2020 -2029 -2034 0
8178 2034 0
8178 2029 0
8178 2030 0
8178 2032 0
8178 2020 0
8178 2020 2029 0
8178 2020 2030 0
8178 2020 2032 0
8178 2021 0
8178 2021 2029 0
8178 2021 2030 0
8178 2021 2032 0
c (((aux422 + aux425 + aux426)<=1)=tv=SATLiteral(8179))
-8179 2059 0
-8179 2053 2058 0
-8179 2054 0
-8179 2056 0
-8179 2044 2058 0
-8179 2044 2053 0
-8179 2044 2054 0
-8179 2044 2056 0
-8179 2045 0
-8179 2045 2053 0
-8179 2045 2054 0
-8179 2045 2056 0
8179 -2045 -2053 -2058 0
8179 -2044 -2054 -2058 0
8179 -2044 -2053 -2059 0
c ((1<=(aux422 + aux425 + aux426))=tv=SATLiteral(8180))
-8180 -2044 -2053 -2058 0
8180 2058 0
8180 2053 0
8180 2054 0
8180 2056 0
8180 2044 0
8180 2044 2053 0
8180 2044 2054 0
8180 2044 2056 0
8180 2045 0
8180 2045 2053 0
8180 2045 2054 0
8180 2045 2056 0
c (((aux428 + aux431 + aux432)<=1)=tv=SATLiteral(8181))
-8181 2083 0
-8181 2077 2082 0
-8181 2078 0
-8181 2080 0
-8181 2068 2082 0
-8181 2068 2077 0
-8181 2068 2078 0
-8181 2068 2080 0
-8181 2069 0
-8181 2069 2077 0
-8181 2069 2078 0
-8181 2069 2080 0
8181 -2069 -2077 -2082 0
8181 -2068 -2078 -2082 0
8181 -2068 -2077 -2083 0
c ((1<=(aux428 + aux431 + aux432))=tv=SATLiteral(8182))
-8182 -2068 -2077 -2082 0
8182 2082 0
8182 2077 0
8182 2078 0
8182 2080 0
8182 2068 0
8182 2068 2077 0
8182 2068 2078 0
8182 2068 2080 0
8182 2069 0
8182 2069 2077 0
8182 2069 2078 0
8182 2069 2080 0
c (((aux434 + aux437 + aux438)<=1)=tv=SATLiteral(8183))
-8183 2107 0
-8183 2101 2106 0
-8183 2102 0
-8183 2104 0
-8183 2092 2106 0
-8183 2092 2101 0
-8183 2092 2102 0
-8183 2092 2104 0
-8183 2093 0
-8183 2093 2101 0
-8183 2093 2102 0
-8183 2093 2104 0
8183 -2093 -2101 -2106 0
8183 -2092 -2102 -2106 0
8183 -2092 -2101 -2107 0
c ((1<=(aux434 + aux437 + aux438))=tv=SATLiteral(8184))
-8184 -2092 -2101 -2106 0
8184 2106 0
8184 2101 0
8184 2102 0
8184 2104 0
8184 2092 0
8184 2092 2101 0
8184 2092 2102 0
8184 2092 2104 0
8184 2093 0
8184 2093 2101 0
8184 2093 2102 0
8184 2093 2104 0
c (((aux440 + aux443 + aux444)<=1)=tv=SATLiteral(8185))
-8185 2131 0
-8185 2125 2130 0
-8185 2126 0
-8185 2128 0
-8185 2116 2130 0
-8185 2116 2125 0
-8185 2116 2126 0
-8185 2116 2128 0
-8185 2117 0
-8185 2117 2125 0
-8185 2117 2126 0
-8185 2117 2128 0
8185 -2117 -2125 -2130 0
8185 -2116 -2126 -2130 0
8185 -2116 -2125 -2131 0
c ((1<=(aux440 + aux443 + aux444))=tv=SATLiteral(8186))
-8186 -2116 -2125 -2130 0
8186 2130 0
8186 2125 0
8186 2126 0
8186 2128 0
8186 2116 0
8186 2116 2125 0
8186 2116 2126 0
8186 2116 2128 0
8186 2117 0
8186 2117 2125 0
8186 2117 2126 0
8186 2117 2128 0
c (((aux446 + aux449 + aux450)<=1)=tv=SATLiteral(8187))
-8187 2155 0
-8187 2149 2154 0
-8187 2150 0
-8187 2152 0
-8187 2140 2154 0
-8187 2140 2149 0
-8187 2140 2150 0
-8187 2140 2152 0
-8187 2141 0
-8187 2141 2149 0
-8187 2141 2150 0
-8187 2141 2152 0
8187 -2141 -2149 -2154 0
8187 -2140 -2150 -2154 0
8187 -2140 -2149 -2155 0
c ((1<=(aux446 + aux449 + aux450))=tv=SATLiteral(8188))
-8188 -2140 -2149 -2154 0
8188 2154 0
8188 2149 0
8188 2150 0
8188 2152 0
8188 2140 0
8188 2140 2149 0
8188 2140 2150 0
8188 2140 2152 0
8188 2141 0
8188 2141 2149 0
8188 2141 2150 0
8188 2141 2152 0
c (((aux452 + aux455 + aux456)<=1)=tv=SATLiteral(8189))
-8189 2179 0
-8189 2173 2178 0
-8189 2174 0
-8189 2176 0
-8189 2164 2178 0
-8189 2164 2173 0
-8189 2164 2174 0
-8189 2164 2176 0
-8189 2165 0
-8189 2165 2173 0
-8189 2165 2174 0
-8189 2165 2176 0
8189 -2165 -2173 -2178 0
8189 -2164 -2174 -2178 0
8189 -2164 -2173 -2179 0
c ((1<=(aux452 + aux455 + aux456))=tv=SATLiteral(8190))
-8190 -2164 -2173 -2178 0
8190 2178 0
8190 2173 0
8190 2174 0
8190 2176 0
8190 2164 0
8190 2164 2173 0
8190 2164 2174 0
8190 2164 2176 0
8190 2165 0
8190 2165 2173 0
8190 2165 2174 0
8190 2165 2176 0
c (((aux458 + aux461 + aux462)<=1)=tv=SATLiteral(8191))
-8191 2203 0
-8191 2197 2202 0
-8191 2198 0
-8191 2200 0
-8191 2188 2202 0
-8191 2188 2197 0
-8191 2188 2198 0
-8191 2188 2200 0
-8191 2189 0
-8191 2189 2197 0
-8191 2189 2198 0
-8191 2189 2200 0
8191 -2189 -2197 -2202 0
8191 -2188 -2198 -2202 0
8191 -2188 -2197 -2203 0
c ((1<=(aux458 + aux461 + aux462))=tv=SATLiteral(8192))
-8192 -2188 -2197 -2202 0
8192 2202 0
8192 2197 0
8192 2198 0
8192 2200 0
8192 2188 0
8192 2188 2197 0
8192 2188 2198 0
8192 2188 2200 0
8192 2189 0
8192 2189 2197 0
8192 2189 2198 0
8192 2189 2200 0
c (((aux464 + aux467 + aux468)<=1)=tv=SATLiteral(8193))
-8193 2227 0
-8193 2221 2226 0
-8193 2222 0
-8193 2224 0
-8193 2212 2226 0
-8193 2212 2221 0
-8193 2212 2222 0
-8193 2212 2224 0
-8193 2213 0
-8193 2213 2221 0
-8193 2213 2222 0
-8193 2213 2224 0
8193 -2213 -2221 -2226 0
8193 -2212 -2222 -2226 0
8193 -2212 -2221 -2227 0
c ((1<=(aux464 + aux467 + aux468))=tv=SATLiteral(8194))
-8194 -2212 -2221 -2226 0
8194 2226 0
8194 2221 0
8194 2222 0
8194 2224 0
8194 2212 0
8194 2212 2221 0
8194 2212 2222 0
8194 2212 2224 0
8194 2213 0
8194 2213 2221 0
8194 2213 2222 0
8194 2213 2224 0
c (((aux470 + aux473 + aux474)<=1)=tv=SATLiteral(8195))
-8195 2251 0
-8195 2245 2250 0
-8195 2246 0
-8195 2248 0
-8195 2236 2250 0
-8195 2236 2245 0
-8195 2236 2246 0
-8195 2236 2248 0
-8195 2237 0
-8195 2237 2245 0
-8195 2237 2246 0
-8195 2237 2248 0
8195 -2237 -2245 -2250 0
8195 -2236 -2246 -2250 0
8195 -2236 -2245 -2251 0
c ((1<=(aux470 + aux473 + aux474))=tv=SATLiteral(8196))
-8196 -2236 -2245 -2250 0
8196 2250 0
8196 2245 0
8196 2246 0
8196 2248 0
8196 2236 0
8196 2236 2245 0
8196 2236 2246 0
8196 2236 2248 0
8196 2237 0
8196 2237 2245 0
8196 2237 2246 0
8196 2237 2248 0
c (((aux476 + aux479 + aux480)<=1)=tv=SATLiteral(8197))
-8197 2275 0
-8197 2269 2274 0
-8197 2270 0
-8197 2272 0
-8197 2260 2274 0
-8197 2260 2269 0
-8197 2260 2270 0
-8197 2260 2272 0
-8197 2261 0
-8197 2261 2269 0
-8197 2261 2270 0
-8197 2261 2272 0
8197 -2261 -2269 -2274 0
8197 -2260 -2270 -2274 0
8197 -2260 -2269 -2275 0
c ((1<=(aux476 + aux479 + aux480))=tv=SATLiteral(8198))
-8198 -2260 -2269 -2274 0
8198 2274 0
8198 2269 0
8198 2270 0
8198 2272 0
8198 2260 0
8198 2260 2269 0
8198 2260 2270 0
8198 2260 2272 0
8198 2261 0
8198 2261 2269 0
8198 2261 2270 0
8198 2261 2272 0
c (((aux482 + aux485 + aux486)<=1)=tv=SATLiteral(8199))
-8199 2299 0
-8199 2293 2298 0
-8199 2294 0
-8199 2296 0
-8199 2284 2298 0
-8199 2284 2293 0
-8199 2284 2294 0
-8199 2284 2296 0
-8199 2285 0
-8199 2285 2293 0
-8199 2285 2294 0
-8199 2285 2296 0
8199 -2285 -2293 -2298 0
8199 -2284 -2294 -2298 0
8199 -2284 -2293 -2299 0
c ((1<=(aux482 + aux485 + aux486))=tv=SATLiteral(8200))
-8200 -2284 -2293 -2298 0
8200 2298 0
8200 2293 0
8200 2294 0
8200 2296 0
8200 2284 0
8200 2284 2293 0
8200 2284 2294 0
8200 2284 2296 0
8200 2285 0
8200 2285 2293 0
8200 2285 2294 0
8200 2285 2296 0
c (((aux488 + aux491 + aux492)<=1)=tv=SATLiteral(8201))
-8201 2323 0
-8201 2317 2322 0
-8201 2318 0
-8201 2320 0
-8201 2308 2322 0
-8201 2308 2317 0
-8201 2308 2318 0
-8201 2308 2320 0
-8201 2309 0
-8201 2309 2317 0
-8201 2309 2318 0
-8201 2309 2320 0
8201 -2309 -2317 -2322 0
8201 -2308 -2318 -2322 0
8201 -2308 -2317 -2323 0
c ((1<=(aux488 + aux491 + aux492))=tv=SATLiteral(8202))
-8202 -2308 -2317 -2322 0
8202 2322 0
8202 2317 0
8202 2318 0
8202 2320 0
8202 2308 0
8202 2308 2317 0
8202 2308 2318 0
8202 2308 2320 0
8202 2309 0
8202 2309 2317 0
8202 2309 2318 0
8202 2309 2320 0
c (((aux494 + aux497 + aux498)<=1)=tv=SATLiteral(8203))
-8203 2347 0
-8203 2341 2346 0
-8203 2342 0
-8203 2344 0
-8203 2332 2346 0
-8203 2332 2341 0
-8203 2332 2342 0
-8203 2332 2344 0
-8203 2333 0
-8203 2333 2341 0
-8203 2333 2342 0
-8203 2333 2344 0
8203 -2333 -2341 -2346 0
8203 -2332 -2342 -2346 0
8203 -2332 -2341 -2347 0
c ((1<=(aux494 + aux497 + aux498))=tv=SATLiteral(8204))
-8204 -2332 -2341 -2346 0
8204 2346 0
8204 2341 0
8204 2342 0
8204 2344 0
8204 2332 0
8204 2332 2341 0
8204 2332 2342 0
8204 2332 2344 0
8204 2333 0
8204 2333 2341 0
8204 2333 2342 0
8204 2333 2344 0
c (((aux500 + aux503 + aux504)<=1)=tv=SATLiteral(8205))
-8205 2371 0
-8205 2365 2370 0
-8205 2366 0
-8205 2368 0
-8205 2356 2370 0
-8205 2356 2365 0
-8205 2356 2366 0
-8205 2356 2368 0
-8205 2357 0
-8205 2357 2365 0
-8205 2357 2366 0
-8205 2357 2368 0
8205 -2357 -2365 -2370 0
8205 -2356 -2366 -2370 0
8205 -2356 -2365 -2371 0
c ((1<=(aux500 + aux503 + aux504))=tv=SATLiteral(8206))
-8206 -2356 -2365 -2370 0
8206 2370 0
8206 2365 0
8206 2366 0
8206 2368 0
8206 2356 0
8206 2356 2365 0
8206 2356 2366 0
8206 2356 2368 0
8206 2357 0
8206 2357 2365 0
8206 2357 2366 0
8206 2357 2368 0
c (((aux506 + aux509 + aux510)<=1)=tv=SATLiteral(8207))
-8207 2395 0
-8207 2389 2394 0
-8207 2390 0
-8207 2392 0
-8207 2380 2394 0
-8207 2380 2389 0
-8207 2380 2390 0
-8207 2380 2392 0
-8207 2381 0
-8207 2381 2389 0
-8207 2381 2390 0
-8207 2381 2392 0
8207 -2381 -2389 -2394 0
8207 -2380 -2390 -2394 0
8207 -2380 -2389 -2395 0
c ((1<=(aux506 + aux509 + aux510))=tv=SATLiteral(8208))
-8208 -2380 -2389 -2394 0
8208 2394 0
8208 2389 0
8208 2390 0
8208 2392 0
8208 2380 0
8208 2380 2389 0
8208 2380 2390 0
8208 2380 2392 0
8208 2381 0
8208 2381 2389 0
8208 2381 2390 0
8208 2381 2392 0
c (((aux512 + aux515 + aux516)<=1)=tv=SATLiteral(8209))
-8209 2419 0
-8209 2413 2418 0
-8209 2414 0
-8209 2416 0
-8209 2404 2418 0
-8209 2404 2413 0
-8209 2404 2414 0
-8209 2404 2416 0
-8209 2405 0
-8209 2405 2413 0
-8209 2405 2414 0
-8209 2405 2416 0
8209 -2405 -2413 -2418 0
8209 -2404 -2414 -2418 0
8209 -2404 -2413 -2419 0
c ((1<=(aux512 + aux515 + aux516))=tv=SATLiteral(8210))
-8210 -2404 -2413 -2418 0
8210 2418 0
8210 2413 0
8210 2414 0
8210 2416 0
8210 2404 0
8210 2404 2413 0
8210 2404 2414 0
8210 2404 2416 0
8210 2405 0
8210 2405 2413 0
8210 2405 2414 0
8210 2405 2416 0
c (((aux518 + aux521 + aux522)<=1)=tv=SATLiteral(8211))
-8211 2443 0
-8211 2437 2442 0
-8211 2438 0
-8211 2440 0
-8211 2428 2442 0
-8211 2428 2437 0
-8211 2428 2438 0
-8211 2428 2440 0
-8211 2429 0
-8211 2429 2437 0
-8211 2429 2438 0
-8211 2429 2440 0
8211 -2429 -2437 -2442 0
8211 -2428 -2438 -2442 0
8211 -2428 -2437 -2443 0
c ((1<=(aux518 + aux521 + aux522))=tv=SATLiteral(8212))
-8212 -2428 -2437 -2442 0
8212 2442 0
8212 2437 0
8212 2438 0
8212 2440 0
8212 2428 0
8212 2428 2437 0
8212 2428 2438 0
8212 2428 2440 0
8212 2429 0
8212 2429 2437 0
8212 2429 2438 0
8212 2429 2440 0
c (((aux524 + aux527 + aux528)<=1)=tv=SATLiteral(8213))
-8213 2467 0
-8213 2461 2466 0
-8213 2462 0
-8213 2464 0
-8213 2452 2466 0
-8213 2452 2461 0
-8213 2452 2462 0
-8213 2452 2464 0
-8213 2453 0
-8213 2453 2461 0
-8213 2453 2462 0
-8213 2453 2464 0
8213 -2453 -2461 -2466 0
8213 -2452 -2462 -2466 0
8213 -2452 -2461 -2467 0
c ((1<=(aux524 + aux527 + aux528))=tv=SATLiteral(8214))
-8214 -2452 -2461 -2466 0
8214 2466 0
8214 2461 0
8214 2462 0
8214 2464 0
8214 2452 0
8214 2452 2461 0
8214 2452 2462 0
8214 2452 2464 0
8214 2453 0
8214 2453 2461 0
8214 2453 2462 0
8214 2453 2464 0
c (((aux530 + aux533 + aux534)<=1)=tv=SATLiteral(8215))
-8215 2491 0
-8215 2485 2490 0
-8215 2486 0
-8215 2488 0
-8215 2476 2490 0
-8215 2476 2485 0
-8215 2476 2486 0
-8215 2476 2488 0
-8215 2477 0
-8215 2477 2485 0
-8215 2477 2486 0
-8215 2477 2488 0
8215 -2477 -2485 -2490 0
8215 -2476 -2486 -2490 0
8215 -2476 -2485 -2491 0
c ((1<=(aux530 + aux533 + aux534))=tv=SATLiteral(8216))
-8216 -2476 -2485 -2490 0
8216 2490 0
8216 2485 0
8216 2486 0
8216 2488 0
8216 2476 0
8216 2476 2485 0
8216 2476 2486 0
8216 2476 2488 0
8216 2477 0
8216 2477 2485 0
8216 2477 2486 0
8216 2477 2488 0
c (((aux536 + aux539 + aux540)<=1)=tv=SATLiteral(8217))
-8217 2515 0
-8217 2509 2514 0
-8217 2510 0
-8217 2512 0
-8217 2500 2514 0
-8217 2500 2509 0
-8217 2500 2510 0
-8217 2500 2512 0
-8217 2501 0
-8217 2501 2509 0
-8217 2501 2510 0
-8217 2501 2512 0
8217 -2501 -2509 -2514 0
8217 -2500 -2510 -2514 0
8217 -2500 -2509 -2515 0
c ((1<=(aux536 + aux539 + aux540))=tv=SATLiteral(8218))
-8218 -2500 -2509 -2514 0
8218 2514 0
8218 2509 0
8218 2510 0
8218 2512 0
8218 2500 0
8218 2500 2509 0
8218 2500 2510 0
8218 2500 2512 0
8218 2501 0
8218 2501 2509 0
8218 2501 2510 0
8218 2501 2512 0
c (((aux542 + aux545 + aux546)<=1)=tv=SATLiteral(8219))
-8219 2539 0
-8219 2533 2538 0
-8219 2534 0
-8219 2536 0
-8219 2524 2538 0
-8219 2524 2533 0
-8219 2524 2534 0
-8219 2524 2536 0
-8219 2525 0
-8219 2525 2533 0
-8219 2525 2534 0
-8219 2525 2536 0
8219 -2525 -2533 -2538 0
8219 -2524 -2534 -2538 0
8219 -2524 -2533 -2539 0
c ((1<=(aux542 + aux545 + aux546))=tv=SATLiteral(8220))
-8220 -2524 -2533 -2538 0
8220 2538 0
8220 2533 0
8220 2534 0
8220 2536 0
8220 2524 0
8220 2524 2533 0
8220 2524 2534 0
8220 2524 2536 0
8220 2525 0
8220 2525 2533 0
8220 2525 2534 0
8220 2525 2536 0
c (((aux548 + aux551 + aux552)<=1)=tv=SATLiteral(8221))
-8221 2563 0
-8221 2557 2562 0
-8221 2558 0
-8221 2560 0
-8221 2548 2562 0
-8221 2548 2557 0
-8221 2548 2558 0
-8221 2548 2560 0
-8221 2549 0
-8221 2549 2557 0
-8221 2549 2558 0
-8221 2549 2560 0
8221 -2549 -2557 -2562 0
8221 -2548 -2558 -2562 0
8221 -2548 -2557 -2563 0
c ((1<=(aux548 + aux551 + aux552))=tv=SATLiteral(8222))
-8222 -2548 -2557 -2562 0
8222 2562 0
8222 2557 0
8222 2558 0
8222 2560 0
8222 2548 0
8222 2548 2557 0
8222 2548 2558 0
8222 2548 2560 0
8222 2549 0
8222 2549 2557 0
8222 2549 2558 0
8222 2549 2560 0
c (((aux554 + aux557 + aux558)<=1)=tv=SATLiteral(8223))
-8223 2587 0
-8223 2581 2586 0
-8223 2582 0
-8223 2584 0
-8223 2572 2586 0
-8223 2572 2581 0
-8223 2572 2582 0
-8223 2572 2584 0
-8223 2573 0
-8223 2573 2581 0
-8223 2573 2582 0
-8223 2573 2584 0
8223 -2573 -2581 -2586 0
8223 -2572 -2582 -2586 0
8223 -2572 -2581 -2587 0
c ((1<=(aux554 + aux557 + aux558))=tv=SATLiteral(8224))
-8224 -2572 -2581 -2586 0
8224 2586 0
8224 2581 0
8224 2582 0
8224 2584 0
8224 2572 0
8224 2572 2581 0
8224 2572 2582 0
8224 2572 2584 0
8224 2573 0
8224 2573 2581 0
8224 2573 2582 0
8224 2573 2584 0
c (((aux560 + aux563 + aux564)<=1)=tv=SATLiteral(8225))
-8225 2611 0
-8225 2605 2610 0
-8225 2606 0
-8225 2608 0
-8225 2596 2610 0
-8225 2596 2605 0
-8225 2596 2606 0
-8225 2596 2608 0
-8225 2597 0
-8225 2597 2605 0
-8225 2597 2606 0
-8225 2597 2608 0
8225 -2597 -2605 -2610 0
8225 -2596 -2606 -2610 0
8225 -2596 -2605 -2611 0
c ((1<=(aux560 + aux563 + aux564))=tv=SATLiteral(8226))
-8226 -2596 -2605 -2610 0
8226 2610 0
8226 2605 0
8226 2606 0
8226 2608 0
8226 2596 0
8226 2596 2605 0
8226 2596 2606 0
8226 2596 2608 0
8226 2597 0
8226 2597 2605 0
8226 2597 2606 0
8226 2597 2608 0
c (((aux566 + aux569 + aux570)<=1)=tv=SATLiteral(8227))
-8227 2635 0
-8227 2629 2634 0
-8227 2630 0
-8227 2632 0
-8227 2620 2634 0
-8227 2620 2629 0
-8227 2620 2630 0
-8227 2620 2632 0
-8227 2621 0
-8227 2621 2629 0
-8227 2621 2630 0
-8227 2621 2632 0
8227 -2621 -2629 -2634 0
8227 -2620 -2630 -2634 0
8227 -2620 -2629 -2635 0
c ((1<=(aux566 + aux569 + aux570))=tv=SATLiteral(8228))
-8228 -2620 -2629 -2634 0
8228 2634 0
8228 2629 0
8228 2630 0
8228 2632 0
8228 2620 0
8228 2620 2629 0
8228 2620 2630 0
8228 2620 2632 0
8228 2621 0
8228 2621 2629 0
8228 2621 2630 0
8228 2621 2632 0
c (((aux572 + aux575 + aux576)<=1)=tv=SATLiteral(8229))
-8229 2659 0
-8229 2653 2658 0
-8229 2654 0
-8229 2656 0
-8229 2644 2658 0
-8229 2644 2653 0
-8229 2644 2654 0
-8229 2644 2656 0
-8229 2645 0
-8229 2645 2653 0
-8229 2645 2654 0
-8229 2645 2656 0
8229 -2645 -2653 -2658 0
8229 -2644 -2654 -2658 0
8229 -2644 -2653 -2659 0
c ((1<=(aux572 + aux575 + aux576))=tv=SATLiteral(8230))
-8230 -2644 -2653 -2658 0
8230 2658 0
8230 2653 0
8230 2654 0
8230 2656 0
8230 2644 0
8230 2644 2653 0
8230 2644 2654 0
8230 2644 2656 0
8230 2645 0
8230 2645 2653 0
8230 2645 2654 0
8230 2645 2656 0
c (((aux578 + aux581 + aux582)<=1)=tv=SATLiteral(8231))
-8231 2683 0
-8231 2677 2682 0
-8231 2678 0
-8231 2680 0
-8231 2668 2682 0
-8231 2668 2677 0
-8231 2668 2678 0
-8231 2668 2680 0
-8231 2669 0
-8231 2669 2677 0
-8231 2669 2678 0
-8231 2669 2680 0
8231 -2669 -2677 -2682 0
8231 -2668 -2678 -2682 0
8231 -2668 -2677 -2683 0
c ((1<=(aux578 + aux581 + aux582))=tv=SATLiteral(8232))
-8232 -2668 -2677 -2682 0
8232 2682 0
8232 2677 0
8232 2678 0
8232 2680 0
8232 2668 0
8232 2668 2677 0
8232 2668 2678 0
8232 2668 2680 0
8232 2669 0
8232 2669 2677 0
8232 2669 2678 0
8232 2669 2680 0
c (((aux584 + aux587 + aux588)<=1)=tv=SATLiteral(8233))
-8233 2707 0
-8233 2701 2706 0
-8233 2702 0
-8233 2704 0
-8233 2692 2706 0
-8233 2692 2701 0
-8233 2692 2702 0
-8233 2692 2704 0
-8233 2693 0
-8233 2693 2701 0
-8233 2693 2702 0
-8233 2693 2704 0
8233 -2693 -2701 -2706 0
8233 -2692 -2702 -2706 0
8233 -2692 -2701 -2707 0
c ((1<=(aux584 + aux587 + aux588))=tv=SATLiteral(8234))
-8234 -2692 -2701 -2706 0
8234 2706 0
8234 2701 0
8234 2702 0
8234 2704 0
8234 2692 0
8234 2692 2701 0
8234 2692 2702 0
8234 2692 2704 0
8234 2693 0
8234 2693 2701 0
8234 2693 2702 0
8234 2693 2704 0
c (((aux590 + aux593 + aux594)<=1)=tv=SATLiteral(8235))
-8235 2731 0
-8235 2725 2730 0
-8235 2726 0
-8235 2728 0
-8235 2716 2730 0
-8235 2716 2725 0
-8235 2716 2726 0
-8235 2716 2728 0
-8235 2717 0
-8235 2717 2725 0
-8235 2717 2726 0
-8235 2717 2728 0
8235 -2717 -2725 -2730 0
8235 -2716 -2726 -2730 0
8235 -2716 -2725 -2731 0
c ((1<=(aux590 + aux593 + aux594))=tv=SATLiteral(8236))
-8236 -2716 -2725 -2730 0
8236 2730 0
8236 2725 0
8236 2726 0
8236 2728 0
8236 2716 0
8236 2716 2725 0
8236 2716 2726 0
8236 2716 2728 0
8236 2717 0
8236 2717 2725 0
8236 2717 2726 0
8236 2717 2728 0
c (((aux596 + aux599 + aux600)<=1)=tv=SATLiteral(8237))
-8237 2755 0
-8237 2749 2754 0
-8237 2750 0
-8237 2752 0
-8237 2740 2754 0
-8237 2740 2749 0
-8237 2740 2750 0
-8237 2740 2752 0
-8237 2741 0
-8237 2741 2749 0
-8237 2741 2750 0
-8237 2741 2752 0
8237 -2741 -2749 -2754 0
8237 -2740 -2750 -2754 0
8237 -2740 -2749 -2755 0
c ((1<=(aux596 + aux599 + aux600))=tv=SATLiteral(8238))
-8238 -2740 -2749 -2754 0
8238 2754 0
8238 2749 0
8238 2750 0
8238 2752 0
8238 2740 0
8238 2740 2749 0
8238 2740 2750 0
8238 2740 2752 0
8238 2741 0
8238 2741 2749 0
8238 2741 2750 0
8238 2741 2752 0
c (((aux602 + aux605 + aux606)<=1)=tv=SATLiteral(8239))
-8239 2779 0
-8239 2773 2778 0
-8239 2774 0
-8239 2776 0
-8239 2764 2778 0
-8239 2764 2773 0
-8239 2764 2774 0
-8239 2764 2776 0
-8239 2765 0
-8239 2765 2773 0
-8239 2765 2774 0
-8239 2765 2776 0
8239 -2765 -2773 -2778 0
8239 -2764 -2774 -2778 0
8239 -2764 -2773 -2779 0
c ((1<=(aux602 + aux605 + aux606))=tv=SATLiteral(8240))
-8240 -2764 -2773 -2778 0
8240 2778 0
8240 2773 0
8240 2774 0
8240 2776 0
8240 2764 0
8240 2764 2773 0
8240 2764 2774 0
8240 2764 2776 0
8240 2765 0
8240 2765 2773 0
8240 2765 2774 0
8240 2765 2776 0
c (((aux608 + aux611 + aux612)<=1)=tv=SATLiteral(8241))
-8241 2803 0
-8241 2797 2802 0
-8241 2798 0
-8241 2800 0
-8241 2788 2802 0
-8241 2788 2797 0
-8241 2788 2798 0
-8241 2788 2800 0
-8241 2789 0
-8241 2789 2797 0
-8241 2789 2798 0
-8241 2789 2800 0
8241 -2789 -2797 -2802 0
8241 -2788 -2798 -2802 0
8241 -2788 -2797 -2803 0
c ((1<=(aux608 + aux611 + aux612))=tv=SATLiteral(8242))
-8242 -2788 -2797 -2802 0
8242 2802 0
8242 2797 0
8242 2798 0
8242 2800 0
8242 2788 0
8242 2788 2797 0
8242 2788 2798 0
8242 2788 2800 0
8242 2789 0
8242 2789 2797 0
8242 2789 2798 0
8242 2789 2800 0
c (((aux614 + aux617 + aux618)<=1)=tv=SATLiteral(8243))
-8243 2827 0
-8243 2821 2826 0
-8243 2822 0
-8243 2824 0
-8243 2812 2826 0
-8243 2812 2821 0
-8243 2812 2822 0
-8243 2812 2824 0
-8243 2813 0
-8243 2813 2821 0
-8243 2813 2822 0
-8243 2813 2824 0
8243 -2813 -2821 -2826 0
8243 -2812 -2822 -2826 0
8243 -2812 -2821 -2827 0
c ((1<=(aux614 + aux617 + aux618))=tv=SATLiteral(8244))
-8244 -2812 -2821 -2826 0
8244 2826 0
8244 2821 0
8244 2822 0
8244 2824 0
8244 2812 0
8244 2812 2821 0
8244 2812 2822 0
8244 2812 2824 0
8244 2813 0
8244 2813 2821 0
8244 2813 2822 0
8244 2813 2824 0
c (((aux620 + aux623 + aux624)<=1)=tv=SATLiteral(8245))
-8245 2851 0
-8245 2845 2850 0
-8245 2846 0
-8245 2848 0
-8245 2836 2850 0
-8245 2836 2845 0
-8245 2836 2846 0
-8245 2836 2848 0
-8245 2837 0
-8245 2837 2845 0
-8245 2837 2846 0
-8245 2837 2848 0
8245 -2837 -2845 -2850 0
8245 -2836 -2846 -2850 0
8245 -2836 -2845 -2851 0
c ((1<=(aux620 + aux623 + aux624))=tv=SATLiteral(8246))
-8246 -2836 -2845 -2850 0
8246 2850 0
8246 2845 0
8246 2846 0
8246 2848 0
8246 2836 0
8246 2836 2845 0
8246 2836 2846 0
8246 2836 2848 0
8246 2837 0
8246 2837 2845 0
8246 2837 2846 0
8246 2837 2848 0
c (((aux626 + aux629 + aux630)<=1)=tv=SATLiteral(8247))
-8247 2875 0
-8247 2869 2874 0
-8247 2870 0
-8247 2872 0
-8247 2860 2874 0
-8247 2860 2869 0
-8247 2860 2870 0
-8247 2860 2872 0
-8247 2861 0
-8247 2861 2869 0
-8247 2861 2870 0
-8247 2861 2872 0
8247 -2861 -2869 -2874 0
8247 -2860 -2870 -2874 0
8247 -2860 -2869 -2875 0
c ((1<=(aux626 + aux629 + aux630))=tv=SATLiteral(8248))
-8248 -2860 -2869 -2874 0
8248 2874 0
8248 2869 0
8248 2870 0
8248 2872 0
8248 2860 0
8248 2860 2869 0
8248 2860 2870 0
8248 2860 2872 0
8248 2861 0
8248 2861 2869 0
8248 2861 2870 0
8248 2861 2872 0
c (((aux632 + aux635 + aux636)<=1)=tv=SATLiteral(8249))
-8249 2899 0
-8249 2893 2898 0
-8249 2894 0
-8249 2896 0
-8249 2884 2898 0
-8249 2884 2893 0
-8249 2884 2894 0
-8249 2884 2896 0
-8249 2885 0
-8249 2885 2893 0
-8249 2885 2894 0
-8249 2885 2896 0
8249 -2885 -2893 -2898 0
8249 -2884 -2894 -2898 0
8249 -2884 -2893 -2899 0
c ((1<=(aux632 + aux635 + aux636))=tv=SATLiteral(8250))
-8250 -2884 -2893 -2898 0
8250 2898 0
8250 2893 0
8250 2894 0
8250 2896 0
8250 2884 0
8250 2884 2893 0
8250 2884 2894 0
8250 2884 2896 0
8250 2885 0
8250 2885 2893 0
8250 2885 2894 0
8250 2885 2896 0
c (((aux638 + aux641 + aux642)<=1)=tv=SATLiteral(8251))
-8251 2923 0
-8251 2917 2922 0
-8251 2918 0
-8251 2920 0
-8251 2908 2922 0
-8251 2908 2917 0
-8251 2908 2918 0
-8251 2908 2920 0
-8251 2909 0
-8251 2909 2917 0
-8251 2909 2918 0
-8251 2909 2920 0
8251 -2909 -2917 -2922 0
8251 -2908 -2918 -2922 0
8251 -2908 -2917 -2923 0
c ((1<=(aux638 + aux641 + aux642))=tv=SATLiteral(8252))
-8252 -2908 -2917 -2922 0
8252 2922 0
8252 2917 0
8252 2918 0
8252 2920 0
8252 2908 0
8252 2908 2917 0
8252 2908 2918 0
8252 2908 2920 0
8252 2909 0
8252 2909 2917 0
8252 2909 2918 0
8252 2909 2920 0
c (((aux644 + aux647 + aux648)<=1)=tv=SATLiteral(8253))
-8253 2947 0
-8253 2941 2946 0
-8253 2942 0
-8253 2944 0
-8253 2932 2946 0
-8253 2932 2941 0
-8253 2932 2942 0
-8253 2932 2944 0
-8253 2933 0
-8253 2933 2941 0
-8253 2933 2942 0
-8253 2933 2944 0
8253 -2933 -2941 -2946 0
8253 -2932 -2942 -2946 0
8253 -2932 -2941 -2947 0
c ((1<=(aux644 + aux647 + aux648))=tv=SATLiteral(8254))
-8254 -2932 -2941 -2946 0
8254 2946 0
8254 2941 0
8254 2942 0
8254 2944 0
8254 2932 0
8254 2932 2941 0
8254 2932 2942 0
8254 2932 2944 0
8254 2933 0
8254 2933 2941 0
8254 2933 2942 0
8254 2933 2944 0
c (((aux650 + aux653 + aux654)<=1)=tv=SATLiteral(8255))
-8255 2971 0
-8255 2965 2970 0
-8255 2966 0
-8255 2968 0
-8255 2956 2970 0
-8255 2956 2965 0
-8255 2956 2966 0
-8255 2956 2968 0
-8255 2957 0
-8255 2957 2965 0
-8255 2957 2966 0
-8255 2957 2968 0
8255 -2957 -2965 -2970 0
8255 -2956 -2966 -2970 0
8255 -2956 -2965 -2971 0
c ((1<=(aux650 + aux653 + aux654))=tv=SATLiteral(8256))
-8256 -2956 -2965 -2970 0
8256 2970 0
8256 2965 0
8256 2966 0
8256 2968 0
8256 2956 0
8256 2956 2965 0
8256 2956 2966 0
8256 2956 2968 0
8256 2957 0
8256 2957 2965 0
8256 2957 2966 0
8256 2957 2968 0
c (((aux656 + aux659 + aux660)<=1)=tv=SATLiteral(8257))
-8257 2995 0
-8257 2989 2994 0
-8257 2990 0
-8257 2992 0
-8257 2980 2994 0
-8257 2980 2989 0
-8257 2980 2990 0
-8257 2980 2992 0
-8257 2981 0
-8257 2981 2989 0
-8257 2981 2990 0
-8257 2981 2992 0
8257 -2981 -2989 -2994 0
8257 -2980 -2990 -2994 0
8257 -2980 -2989 -2995 0
c ((1<=(aux656 + aux659 + aux660))=tv=SATLiteral(8258))
-8258 -2980 -2989 -2994 0
8258 2994 0
8258 2989 0
8258 2990 0
8258 2992 0
8258 2980 0
8258 2980 2989 0
8258 2980 2990 0
8258 2980 2992 0
8258 2981 0
8258 2981 2989 0
8258 2981 2990 0
8258 2981 2992 0
c (((aux662 + aux665 + aux666)<=1)=tv=SATLiteral(8259))
-8259 3019 0
-8259 3013 3018 0
-8259 3014 0
-8259 3016 0
-8259 3004 3018 0
-8259 3004 3013 0
-8259 3004 3014 0
-8259 3004 3016 0
-8259 3005 0
-8259 3005 3013 0
-8259 3005 3014 0
-8259 3005 3016 0
8259 -3005 -3013 -3018 0
8259 -3004 -3014 -3018 0
8259 -3004 -3013 -3019 0
c ((1<=(aux662 + aux665 + aux666))=tv=SATLiteral(8260))
-8260 -3004 -3013 -3018 0
8260 3018 0
8260 3013 0
8260 3014 0
8260 3016 0
8260 3004 0
8260 3004 3013 0
8260 3004 3014 0
8260 3004 3016 0
8260 3005 0
8260 3005 3013 0
8260 3005 3014 0
8260 3005 3016 0
c (((aux668 + aux671 + aux672)<=1)=tv=SATLiteral(8261))
-8261 3043 0
-8261 3037 3042 0
-8261 3038 0
-8261 3040 0
-8261 3028 3042 0
-8261 3028 3037 0
-8261 3028 3038 0
-8261 3028 3040 0
-8261 3029 0
-8261 3029 3037 0
-8261 3029 3038 0
-8261 3029 3040 0
8261 -3029 -3037 -3042 0
8261 -3028 -3038 -3042 0
8261 -3028 -3037 -3043 0
c ((1<=(aux668 + aux671 + aux672))=tv=SATLiteral(8262))
-8262 -3028 -3037 -3042 0
8262 3042 0
8262 3037 0
8262 3038 0
8262 3040 0
8262 3028 0
8262 3028 3037 0
8262 3028 3038 0
8262 3028 3040 0
8262 3029 0
8262 3029 3037 0
8262 3029 3038 0
8262 3029 3040 0
c (((aux674 + aux677 + aux678)<=1)=tv=SATLiteral(8263))
-8263 3067 0
-8263 3061 3066 0
-8263 3062 0
-8263 3064 0
-8263 3052 3066 0
-8263 3052 3061 0
-8263 3052 3062 0
-8263 3052 3064 0
-8263 3053 0
-8263 3053 3061 0
-8263 3053 3062 0
-8263 3053 3064 0
8263 -3053 -3061 -3066 0
8263 -3052 -3062 -3066 0
8263 -3052 -3061 -3067 0
c ((1<=(aux674 + aux677 + aux678))=tv=SATLiteral(8264))
-8264 -3052 -3061 -3066 0
8264 3066 0
8264 3061 0
8264 3062 0
8264 3064 0
8264 3052 0
8264 3052 3061 0
8264 3052 3062 0
8264 3052 3064 0
8264 3053 0
8264 3053 3061 0
8264 3053 3062 0
8264 3053 3064 0
c (((aux680 + aux683 + aux684)<=1)=tv=SATLiteral(8265))
-8265 3091 0
-8265 3085 3090 0
-8265 3086 0
-8265 3088 0
-8265 3076 3090 0
-8265 3076 3085 0
-8265 3076 3086 0
-8265 3076 3088 0
-8265 3077 0
-8265 3077 3085 0
-8265 3077 3086 0
-8265 3077 3088 0
8265 -3077 -3085 -3090 0
8265 -3076 -3086 -3090 0
8265 -3076 -3085 -3091 0
c ((1<=(aux680 + aux683 + aux684))=tv=SATLiteral(8266))
-8266 -3076 -3085 -3090 0
8266 3090 0
8266 3085 0
8266 3086 0
8266 3088 0
8266 3076 0
8266 3076 3085 0
8266 3076 3086 0
8266 3076 3088 0
8266 3077 0
8266 3077 3085 0
8266 3077 3086 0
8266 3077 3088 0
c (((aux686 + aux689 + aux690)<=1)=tv=SATLiteral(8267))
-8267 3115 0
-8267 3109 3114 0
-8267 3110 0
-8267 3112 0
-8267 3100 3114 0
-8267 3100 3109 0
-8267 3100 3110 0
-8267 3100 3112 0
-8267 3101 0
-8267 3101 3109 0
-8267 3101 3110 0
-8267 3101 3112 0
8267 -3101 -3109 -3114 0
8267 -3100 -3110 -3114 0
8267 -3100 -3109 -3115 0
c ((1<=(aux686 + aux689 + aux690))=tv=SATLiteral(8268))
-8268 -3100 -3109 -3114 0
8268 3114 0
8268 3109 0
8268 3110 0
8268 3112 0
8268 3100 0
8268 3100 3109 0
8268 3100 3110 0
8268 3100 3112 0
8268 3101 0
8268 3101 3109 0
8268 3101 3110 0
8268 3101 3112 0
c (((aux692 + aux695 + aux696)<=1)=tv=SATLiteral(8269))
-8269 3139 0
-8269 3133 3138 0
-8269 3134 0
-8269 3136 0
-8269 3124 3138 0
-8269 3124 3133 0
-8269 3124 3134 0
-8269 3124 3136 0
-8269 3125 0
-8269 3125 3133 0
-8269 3125 3134 0
-8269 3125 3136 0
8269 -3125 -3133 -3138 0
8269 -3124 -3134 -3138 0
8269 -3124 -3133 -3139 0
c ((1<=(aux692 + aux695 + aux696))=tv=SATLiteral(8270))
-8270 -3124 -3133 -3138 0
8270 3138 0
8270 3133 0
8270 3134 0
8270 3136 0
8270 3124 0
8270 3124 3133 0
8270 3124 3134 0
8270 3124 3136 0
8270 3125 0
8270 3125 3133 0
8270 3125 3134 0
8270 3125 3136 0
c (((aux698 + aux701 + aux702)<=1)=tv=SATLiteral(8271))
-8271 3163 0
-8271 3157 3162 0
-8271 3158 0
-8271 3160 0
-8271 3148 3162 0
-8271 3148 3157 0
-8271 3148 3158 0
-8271 3148 3160 0
-8271 3149 0
-8271 3149 3157 0
-8271 3149 3158 0
-8271 3149 3160 0
8271 -3149 -3157 -3162 0
8271 -3148 -3158 -3162 0
8271 -3148 -3157 -3163 0
c ((1<=(aux698 + aux701 + aux702))=tv=SATLiteral(8272))
-8272 -3148 -3157 -3162 0
8272 3162 0
8272 3157 0
8272 3158 0
8272 3160 0
8272 3148 0
8272 3148 3157 0
8272 3148 3158 0
8272 3148 3160 0
8272 3149 0
8272 3149 3157 0
8272 3149 3158 0
8272 3149 3160 0
c (((aux704 + aux707 + aux708)<=1)=tv=SATLiteral(8273))
-8273 3187 0
-8273 3181 3186 0
-8273 3182 0
-8273 3184 0
-8273 3172 3186 0
-8273 3172 3181 0
-8273 3172 3182 0
-8273 3172 3184 0
-8273 3173 0
-8273 3173 3181 0
-8273 3173 3182 0
-8273 3173 3184 0
8273 -3173 -3181 -3186 0
8273 -3172 -3182 -3186 0
8273 -3172 -3181 -3187 0
c ((1<=(aux704 + aux707 + aux708))=tv=SATLiteral(8274))
-8274 -3172 -3181 -3186 0
8274 3186 0
8274 3181 0
8274 3182 0
8274 3184 0
8274 3172 0
8274 3172 3181 0
8274 3172 3182 0
8274 3172 3184 0
8274 3173 0
8274 3173 3181 0
8274 3173 3182 0
8274 3173 3184 0
c (((aux710 + aux713 + aux714)<=1)=tv=SATLiteral(8275))
-8275 3211 0
-8275 3205 3210 0
-8275 3206 0
-8275 3208 0
-8275 3196 3210 0
-8275 3196 3205 0
-8275 3196 3206 0
-8275 3196 3208 0
-8275 3197 0
-8275 3197 3205 0
-8275 3197 3206 0
-8275 3197 3208 0
8275 -3197 -3205 -3210 0
8275 -3196 -3206 -3210 0
8275 -3196 -3205 -3211 0
c ((1<=(aux710 + aux713 + aux714))=tv=SATLiteral(8276))
-8276 -3196 -3205 -3210 0
8276 3210 0
8276 3205 0
8276 3206 0
8276 3208 0
8276 3196 0
8276 3196 3205 0
8276 3196 3206 0
8276 3196 3208 0
8276 3197 0
8276 3197 3205 0
8276 3197 3206 0
8276 3197 3208 0
c (((aux716 + aux719 + aux720)<=1)=tv=SATLiteral(8277))
-8277 3235 0
-8277 3229 3234 0
-8277 3230 0
-8277 3232 0
-8277 3220 3234 0
-8277 3220 3229 0
-8277 3220 3230 0
-8277 3220 3232 0
-8277 3221 0
-8277 3221 3229 0
-8277 3221 3230 0
-8277 3221 3232 0
8277 -3221 -3229 -3234 0
8277 -3220 -3230 -3234 0
8277 -3220 -3229 -3235 0
c ((1<=(aux716 + aux719 + aux720))=tv=SATLiteral(8278))
-8278 -3220 -3229 -3234 0
8278 3234 0
8278 3229 0
8278 3230 0
8278 3232 0
8278 3220 0
8278 3220 3229 0
8278 3220 3230 0
8278 3220 3232 0
8278 3221 0
8278 3221 3229 0
8278 3221 3230 0
8278 3221 3232 0
c (((aux722 + aux725 + aux726)<=1)=tv=SATLiteral(8279))
-8279 3259 0
-8279 3253 3258 0
-8279 3254 0
-8279 3256 0
-8279 3244 3258 0
-8279 3244 3253 0
-8279 3244 3254 0
-8279 3244 3256 0
-8279 3245 0
-8279 3245 3253 0
-8279 3245 3254 0
-8279 3245 3256 0
8279 -3245 -3253 -3258 0
8279 -3244 -3254 -3258 0
8279 -3244 -3253 -3259 0
c ((1<=(aux722 + aux725 + aux726))=tv=SATLiteral(8280))
-8280 -3244 -3253 -3258 0
8280 3258 0
8280 3253 0
8280 3254 0
8280 3256 0
8280 3244 0
8280 3244 3253 0
8280 3244 3254 0
8280 3244 3256 0
8280 3245 0
8280 3245 3253 0
8280 3245 3254 0
8280 3245 3256 0
c (((aux728 + aux731 + aux732)<=1)=tv=SATLiteral(8281))
-8281 3283 0
-8281 3277 3282 0
-8281 3278 0
-8281 3280 0
-8281 3268 3282 0
-8281 3268 3277 0
-8281 3268 3278 0
-8281 3268 3280 0
-8281 3269 0
-8281 3269 3277 0
-8281 3269 3278 0
-8281 3269 3280 0
8281 -3269 -3277 -3282 0
8281 -3268 -3278 -3282 0
8281 -3268 -3277 -3283 0
c ((1<=(aux728 + aux731 + aux732))=tv=SATLiteral(8282))
-8282 -3268 -3277 -3282 0
8282 3282 0
8282 3277 0
8282 3278 0
8282 3280 0
8282 3268 0
8282 3268 3277 0
8282 3268 3278 0
8282 3268 3280 0
8282 3269 0
8282 3269 3277 0
8282 3269 3278 0
8282 3269 3280 0
c (((aux734 + aux737 + aux738)<=1)=tv=SATLiteral(8283))
-8283 3307 0
-8283 3301 3306 0
-8283 3302 0
-8283 3304 0
-8283 3292 3306 0
-8283 3292 3301 0
-8283 3292 3302 0
-8283 3292 3304 0
-8283 3293 0
-8283 3293 3301 0
-8283 3293 3302 0
-8283 3293 3304 0
8283 -3293 -3301 -3306 0
8283 -3292 -3302 -3306 0
8283 -3292 -3301 -3307 0
c ((1<=(aux734 + aux737 + aux738))=tv=SATLiteral(8284))
-8284 -3292 -3301 -3306 0
8284 3306 0
8284 3301 0
8284 3302 0
8284 3304 0
8284 3292 0
8284 3292 3301 0
8284 3292 3302 0
8284 3292 3304 0
8284 3293 0
8284 3293 3301 0
8284 3293 3302 0
8284 3293 3304 0
c (((aux740 + aux743 + aux744)<=1)=tv=SATLiteral(8285))
-8285 3331 0
-8285 3325 3330 0
-8285 3326 0
-8285 3328 0
-8285 3316 3330 0
-8285 3316 3325 0
-8285 3316 3326 0
-8285 3316 3328 0
-8285 3317 0
-8285 3317 3325 0
-8285 3317 3326 0
-8285 3317 3328 0
8285 -3317 -3325 -3330 0
8285 -3316 -3326 -3330 0
8285 -3316 -3325 -3331 0
c ((1<=(aux740 + aux743 + aux744))=tv=SATLiteral(8286))
-8286 -3316 -3325 -3330 0
8286 3330 0
8286 3325 0
8286 3326 0
8286 3328 0
8286 3316 0
8286 3316 3325 0
8286 3316 3326 0
8286 3316 3328 0
8286 3317 0
8286 3317 3325 0
8286 3317 3326 0
8286 3317 3328 0
c (((aux746 + aux749 + aux750)<=1)=tv=SATLiteral(8287))
-8287 3355 0
-8287 3349 3354 0
-8287 3350 0
-8287 3352 0
-8287 3340 3354 0
-8287 3340 3349 0
-8287 3340 3350 0
-8287 3340 3352 0
-8287 3341 0
-8287 3341 3349 0
-8287 3341 3350 0
-8287 3341 3352 0
8287 -3341 -3349 -3354 0
8287 -3340 -3350 -3354 0
8287 -3340 -3349 -3355 0
c ((1<=(aux746 + aux749 + aux750))=tv=SATLiteral(8288))
-8288 -3340 -3349 -3354 0
8288 3354 0
8288 3349 0
8288 3350 0
8288 3352 0
8288 3340 0
8288 3340 3349 0
8288 3340 3350 0
8288 3340 3352 0
8288 3341 0
8288 3341 3349 0
8288 3341 3350 0
8288 3341 3352 0
c (((aux752 + aux755 + aux756)<=1)=tv=SATLiteral(8289))
-8289 3379 0
-8289 3373 3378 0
-8289 3374 0
-8289 3376 0
-8289 3364 3378 0
-8289 3364 3373 0
-8289 3364 3374 0
-8289 3364 3376 0
-8289 3365 0
-8289 3365 3373 0
-8289 3365 3374 0
-8289 3365 3376 0
8289 -3365 -3373 -3378 0
8289 -3364 -3374 -3378 0
8289 -3364 -3373 -3379 0
c ((1<=(aux752 + aux755 + aux756))=tv=SATLiteral(8290))
-8290 -3364 -3373 -3378 0
8290 3378 0
8290 3373 0
8290 3374 0
8290 3376 0
8290 3364 0
8290 3364 3373 0
8290 3364 3374 0
8290 3364 3376 0
8290 3365 0
8290 3365 3373 0
8290 3365 3374 0
8290 3365 3376 0
c (((aux758 + aux761 + aux762)<=1)=tv=SATLiteral(8291))
-8291 3403 0
-8291 3397 3402 0
-8291 3398 0
-8291 3400 0
-8291 3388 3402 0
-8291 3388 3397 0
-8291 3388 3398 0
-8291 3388 3400 0
-8291 3389 0
-8291 3389 3397 0
-8291 3389 3398 0
-8291 3389 3400 0
8291 -3389 -3397 -3402 0
8291 -3388 -3398 -3402 0
8291 -3388 -3397 -3403 0
c ((1<=(aux758 + aux761 + aux762))=tv=SATLiteral(8292))
-8292 -3388 -3397 -3402 0
8292 3402 0
8292 3397 0
8292 3398 0
8292 3400 0
8292 3388 0
8292 3388 3397 0
8292 3388 3398 0
8292 3388 3400 0
8292 3389 0
8292 3389 3397 0
8292 3389 3398 0
8292 3389 3400 0
c (((aux764 + aux767 + aux768)<=1)=tv=SATLiteral(8293))
-8293 3427 0
-8293 3421 3426 0
-8293 3422 0
-8293 3424 0
-8293 3412 3426 0
-8293 3412 3421 0
-8293 3412 3422 0
-8293 3412 3424 0
-8293 3413 0
-8293 3413 3421 0
-8293 3413 3422 0
-8293 3413 3424 0
8293 -3413 -3421 -3426 0
8293 -3412 -3422 -3426 0
8293 -3412 -3421 -3427 0
c ((1<=(aux764 + aux767 + aux768))=tv=SATLiteral(8294))
-8294 -3412 -3421 -3426 0
8294 3426 0
8294 3421 0
8294 3422 0
8294 3424 0
8294 3412 0
8294 3412 3421 0
8294 3412 3422 0
8294 3412 3424 0
8294 3413 0
8294 3413 3421 0
8294 3413 3422 0
8294 3413 3424 0
c (((aux770 + aux773 + aux774)<=1)=tv=SATLiteral(8295))
-8295 3451 0
-8295 3445 3450 0
-8295 3446 0
-8295 3448 0
-8295 3436 3450 0
-8295 3436 3445 0
-8295 3436 3446 0
-8295 3436 3448 0
-8295 3437 0
-8295 3437 3445 0
-8295 3437 3446 0
-8295 3437 3448 0
8295 -3437 -3445 -3450 0
8295 -3436 -3446 -3450 0
8295 -3436 -3445 -3451 0
c ((1<=(aux770 + aux773 + aux774))=tv=SATLiteral(8296))
-8296 -3436 -3445 -3450 0
8296 3450 0
8296 3445 0
8296 3446 0
8296 3448 0
8296 3436 0
8296 3436 3445 0
8296 3436 3446 0
8296 3436 3448 0
8296 3437 0
8296 3437 3445 0
8296 3437 3446 0
8296 3437 3448 0
c (((aux776 + aux779 + aux780)<=1)=tv=SATLiteral(8297))
-8297 3475 0
-8297 3469 3474 0
-8297 3470 0
-8297 3472 0
-8297 3460 3474 0
-8297 3460 3469 0
-8297 3460 3470 0
-8297 3460 3472 0
-8297 3461 0
-8297 3461 3469 0
-8297 3461 3470 0
-8297 3461 3472 0
8297 -3461 -3469 -3474 0
8297 -3460 -3470 -3474 0
8297 -3460 -3469 -3475 0
c ((1<=(aux776 + aux779 + aux780))=tv=SATLiteral(8298))
-8298 -3460 -3469 -3474 0
8298 3474 0
8298 3469 0
8298 3470 0
8298 3472 0
8298 3460 0
8298 3460 3469 0
8298 3460 3470 0
8298 3460 3472 0
8298 3461 0
8298 3461 3469 0
8298 3461 3470 0
8298 3461 3472 0
c (((aux782 + aux785 + aux786)<=1)=tv=SATLiteral(8299))
-8299 3499 0
-8299 3493 3498 0
-8299 3494 0
-8299 3496 0
-8299 3484 3498 0
-8299 3484 3493 0
-8299 3484 3494 0
-8299 3484 3496 0
-8299 3485 0
-8299 3485 3493 0
-8299 3485 3494 0
-8299 3485 3496 0
8299 -3485 -3493 -3498 0
8299 -3484 -3494 -3498 0
8299 -3484 -3493 -3499 0
c ((1<=(aux782 + aux785 + aux786))=tv=SATLiteral(8300))
-8300 -3484 -3493 -3498 0
8300 3498 0
8300 3493 0
8300 3494 0
8300 3496 0
8300 3484 0
8300 3484 3493 0
8300 3484 3494 0
8300 3484 3496 0
8300 3485 0
8300 3485 3493 0
8300 3485 3494 0
8300 3485 3496 0
c (((aux788 + aux791 + aux792)<=1)=tv=SATLiteral(8301))
-8301 3523 0
-8301 3517 3522 0
-8301 3518 0
-8301 3520 0
-8301 3508 3522 0
-8301 3508 3517 0
-8301 3508 3518 0
-8301 3508 3520 0
-8301 3509 0
-8301 3509 3517 0
-8301 3509 3518 0
-8301 3509 3520 0
8301 -3509 -3517 -3522 0
8301 -3508 -3518 -3522 0
8301 -3508 -3517 -3523 0
c ((1<=(aux788 + aux791 + aux792))=tv=SATLiteral(8302))
-8302 -3508 -3517 -3522 0
8302 3522 0
8302 3517 0
8302 3518 0
8302 3520 0
8302 3508 0
8302 3508 3517 0
8302 3508 3518 0
8302 3508 3520 0
8302 3509 0
8302 3509 3517 0
8302 3509 3518 0
8302 3509 3520 0
c (((aux794 + aux797 + aux798)<=1)=tv=SATLiteral(8303))
-8303 3547 0
-8303 3541 3546 0
-8303 3542 0
-8303 3544 0
-8303 3532 3546 0
-8303 3532 3541 0
-8303 3532 3542 0
-8303 3532 3544 0
-8303 3533 0
-8303 3533 3541 0
-8303 3533 3542 0
-8303 3533 3544 0
8303 -3533 -3541 -3546 0
8303 -3532 -3542 -3546 0
8303 -3532 -3541 -3547 0
c ((1<=(aux794 + aux797 + aux798))=tv=SATLiteral(8304))
-8304 -3532 -3541 -3546 0
8304 3546 0
8304 3541 0
8304 3542 0
8304 3544 0
8304 3532 0
8304 3532 3541 0
8304 3532 3542 0
8304 3532 3544 0
8304 3533 0
8304 3533 3541 0
8304 3533 3542 0
8304 3533 3544 0
c (((aux800 + aux803 + aux804)<=1)=tv=SATLiteral(8305))
-8305 3571 0
-8305 3565 3570 0
-8305 3566 0
-8305 3568 0
-8305 3556 3570 0
-8305 3556 3565 0
-8305 3556 3566 0
-8305 3556 3568 0
-8305 3557 0
-8305 3557 3565 0
-8305 3557 3566 0
-8305 3557 3568 0
8305 -3557 -3565 -3570 0
8305 -3556 -3566 -3570 0
8305 -3556 -3565 -3571 0
c ((1<=(aux800 + aux803 + aux804))=tv=SATLiteral(8306))
-8306 -3556 -3565 -3570 0
8306 3570 0
8306 3565 0
8306 3566 0
8306 3568 0
8306 3556 0
8306 3556 3565 0
8306 3556 3566 0
8306 3556 3568 0
8306 3557 0
8306 3557 3565 0
8306 3557 3566 0
8306 3557 3568 0
c (((aux806 + aux809 + aux810)<=1)=tv=SATLiteral(8307))
-8307 3595 0
-8307 3589 3594 0
-8307 3590 0
-8307 3592 0
-8307 3580 3594 0
-8307 3580 3589 0
-8307 3580 3590 0
-8307 3580 3592 0
-8307 3581 0
-8307 3581 3589 0
-8307 3581 3590 0
-8307 3581 3592 0
8307 -3581 -3589 -3594 0
8307 -3580 -3590 -3594 0
8307 -3580 -3589 -3595 0
c ((1<=(aux806 + aux809 + aux810))=tv=SATLiteral(8308))
-8308 -3580 -3589 -3594 0
8308 3594 0
8308 3589 0
8308 3590 0
8308 3592 0
8308 3580 0
8308 3580 3589 0
8308 3580 3590 0
8308 3580 3592 0
8308 3581 0
8308 3581 3589 0
8308 3581 3590 0
8308 3581 3592 0
c (((aux812 + aux815 + aux816)<=1)=tv=SATLiteral(8309))
-8309 3619 0
-8309 3613 3618 0
-8309 3614 0
-8309 3616 0
-8309 3604 3618 0
-8309 3604 3613 0
-8309 3604 3614 0
-8309 3604 3616 0
-8309 3605 0
-8309 3605 3613 0
-8309 3605 3614 0
-8309 3605 3616 0
8309 -3605 -3613 -3618 0
8309 -3604 -3614 -3618 0
8309 -3604 -3613 -3619 0
c ((1<=(aux812 + aux815 + aux816))=tv=SATLiteral(8310))
-8310 -3604 -3613 -3618 0
8310 3618 0
8310 3613 0
8310 3614 0
8310 3616 0
8310 3604 0
8310 3604 3613 0
8310 3604 3614 0
8310 3604 3616 0
8310 3605 0
8310 3605 3613 0
8310 3605 3614 0
8310 3605 3616 0
c (((aux818 + aux821 + aux822)<=1)=tv=SATLiteral(8311))
-8311 3643 0
-8311 3637 3642 0
-8311 3638 0
-8311 3640 0
-8311 3628 3642 0
-8311 3628 3637 0
-8311 3628 3638 0
-8311 3628 3640 0
-8311 3629 0
-8311 3629 3637 0
-8311 3629 3638 0
-8311 3629 3640 0
8311 -3629 -3637 -3642 0
8311 -3628 -3638 -3642 0
8311 -3628 -3637 -3643 0
c ((1<=(aux818 + aux821 + aux822))=tv=SATLiteral(8312))
-8312 -3628 -3637 -3642 0
8312 3642 0
8312 3637 0
8312 3638 0
8312 3640 0
8312 3628 0
8312 3628 3637 0
8312 3628 3638 0
8312 3628 3640 0
8312 3629 0
8312 3629 3637 0
8312 3629 3638 0
8312 3629 3640 0
c (((aux824 + aux827 + aux828)<=1)=tv=SATLiteral(8313))
-8313 3667 0
-8313 3661 3666 0
-8313 3662 0
-8313 3664 0
-8313 3652 3666 0
-8313 3652 3661 0
-8313 3652 3662 0
-8313 3652 3664 0
-8313 3653 0
-8313 3653 3661 0
-8313 3653 3662 0
-8313 3653 3664 0
8313 -3653 -3661 -3666 0
8313 -3652 -3662 -3666 0
8313 -3652 -3661 -3667 0
c ((1<=(aux824 + aux827 + aux828))=tv=SATLiteral(8314))
-8314 -3652 -3661 -3666 0
8314 3666 0
8314 3661 0
8314 3662 0
8314 3664 0
8314 3652 0
8314 3652 3661 0
8314 3652 3662 0
8314 3652 3664 0
8314 3653 0
8314 3653 3661 0
8314 3653 3662 0
8314 3653 3664 0
c (((aux830 + aux833 + aux834)<=1)=tv=SATLiteral(8315))
-8315 3691 0
-8315 3685 3690 0
-8315 3686 0
-8315 3688 0
-8315 3676 3690 0
-8315 3676 3685 0
-8315 3676 3686 0
-8315 3676 3688 0
-8315 3677 0
-8315 3677 3685 0
-8315 3677 3686 0
-8315 3677 3688 0
8315 -3677 -3685 -3690 0
8315 -3676 -3686 -3690 0
8315 -3676 -3685 -3691 0
c ((1<=(aux830 + aux833 + aux834))=tv=SATLiteral(8316))
-8316 -3676 -3685 -3690 0
8316 3690 0
8316 3685 0
8316 3686 0
8316 3688 0
8316 3676 0
8316 3676 3685 0
8316 3676 3686 0
8316 3676 3688 0
8316 3677 0
8316 3677 3685 0
8316 3677 3686 0
8316 3677 3688 0
c (((aux836 + aux839 + aux840)<=1)=tv=SATLiteral(8317))
-8317 3715 0
-8317 3709 3714 0
-8317 3710 0
-8317 3712 0
-8317 3700 3714 0
-8317 3700 3709 0
-8317 3700 3710 0
-8317 3700 3712 0
-8317 3701 0
-8317 3701 3709 0
-8317 3701 3710 0
-8317 3701 3712 0
8317 -3701 -3709 -3714 0
8317 -3700 -3710 -3714 0
8317 -3700 -3709 -3715 0
c ((1<=(aux836 + aux839 + aux840))=tv=SATLiteral(8318))
-8318 -3700 -3709 -3714 0
8318 3714 0
8318 3709 0
8318 3710 0
8318 3712 0
8318 3700 0
8318 3700 3709 0
8318 3700 3710 0
8318 3700 3712 0
8318 3701 0
8318 3701 3709 0
8318 3701 3710 0
8318 3701 3712 0
c (((aux842 + aux845 + aux846)<=1)=tv=SATLiteral(8319))
-8319 3739 0
-8319 3733 3738 0
-8319 3734 0
-8319 3736 0
-8319 3724 3738 0
-8319 3724 3733 0
-8319 3724 3734 0
-8319 3724 3736 0
-8319 3725 0
-8319 3725 3733 0
-8319 3725 3734 0
-8319 3725 3736 0
8319 -3725 -3733 -3738 0
8319 -3724 -3734 -3738 0
8319 -3724 -3733 -3739 0
c ((1<=(aux842 + aux845 + aux846))=tv=SATLiteral(8320))
-8320 -3724 -3733 -3738 0
8320 3738 0
8320 3733 0
8320 3734 0
8320 3736 0
8320 3724 0
8320 3724 3733 0
8320 3724 3734 0
8320 3724 3736 0
8320 3725 0
8320 3725 3733 0
8320 3725 3734 0
8320 3725 3736 0
c (((aux848 + aux851 + aux852)<=1)=tv=SATLiteral(8321))
-8321 3763 0
-8321 3757 3762 0
-8321 3758 0
-8321 3760 0
-8321 3748 3762 0
-8321 3748 3757 0
-8321 3748 3758 0
-8321 3748 3760 0
-8321 3749 0
-8321 3749 3757 0
-8321 3749 3758 0
-8321 3749 3760 0
8321 -3749 -3757 -3762 0
8321 -3748 -3758 -3762 0
8321 -3748 -3757 -3763 0
c ((1<=(aux848 + aux851 + aux852))=tv=SATLiteral(8322))
-8322 -3748 -3757 -3762 0
8322 3762 0
8322 3757 0
8322 3758 0
8322 3760 0
8322 3748 0
8322 3748 3757 0
8322 3748 3758 0
8322 3748 3760 0
8322 3749 0
8322 3749 3757 0
8322 3749 3758 0
8322 3749 3760 0
c (((aux854 + aux857 + aux858)<=1)=tv=SATLiteral(8323))
-8323 3787 0
-8323 3781 3786 0
-8323 3782 0
-8323 3784 0
-8323 3772 3786 0
-8323 3772 3781 0
-8323 3772 3782 0
-8323 3772 3784 0
-8323 3773 0
-8323 3773 3781 0
-8323 3773 3782 0
-8323 3773 3784 0
8323 -3773 -3781 -3786 0
8323 -3772 -3782 -3786 0
8323 -3772 -3781 -3787 0
c ((1<=(aux854 + aux857 + aux858))=tv=SATLiteral(8324))
-8324 -3772 -3781 -3786 0
8324 3786 0
8324 3781 0
8324 3782 0
8324 3784 0
8324 3772 0
8324 3772 3781 0
8324 3772 3782 0
8324 3772 3784 0
8324 3773 0
8324 3773 3781 0
8324 3773 3782 0
8324 3773 3784 0
c (((aux860 + aux863 + aux864)<=1)=tv=SATLiteral(8325))
-8325 3811 0
-8325 3805 3810 0
-8325 3806 0
-8325 3808 0
-8325 3796 3810 0
-8325 3796 3805 0
-8325 3796 3806 0
-8325 3796 3808 0
-8325 3797 0
-8325 3797 3805 0
-8325 3797 3806 0
-8325 3797 3808 0
8325 -3797 -3805 -3810 0
8325 -3796 -3806 -3810 0
8325 -3796 -3805 -3811 0
c ((1<=(aux860 + aux863 + aux864))=tv=SATLiteral(8326))
-8326 -3796 -3805 -3810 0
8326 3810 0
8326 3805 0
8326 3806 0
8326 3808 0
8326 3796 0
8326 3796 3805 0
8326 3796 3806 0
8326 3796 3808 0
8326 3797 0
8326 3797 3805 0
8326 3797 3806 0
8326 3797 3808 0
c (((aux866 + aux869 + aux870)<=1)=tv=SATLiteral(8327))
-8327 3835 0
-8327 3829 3834 0
-8327 3830 0
-8327 3832 0
-8327 3820 3834 0
-8327 3820 3829 0
-8327 3820 3830 0
-8327 3820 3832 0
-8327 3821 0
-8327 3821 3829 0
-8327 3821 3830 0
-8327 3821 3832 0
8327 -3821 -3829 -3834 0
8327 -3820 -3830 -3834 0
8327 -3820 -3829 -3835 0
c ((1<=(aux866 + aux869 + aux870))=tv=SATLiteral(8328))
-8328 -3820 -3829 -3834 0
8328 3834 0
8328 3829 0
8328 3830 0
8328 3832 0
8328 3820 0
8328 3820 3829 0
8328 3820 3830 0
8328 3820 3832 0
8328 3821 0
8328 3821 3829 0
8328 3821 3830 0
8328 3821 3832 0
c (((aux872 + aux875 + aux876)<=1)=tv=SATLiteral(8329))
-8329 3859 0
-8329 3853 3858 0
-8329 3854 0
-8329 3856 0
-8329 3844 3858 0
-8329 3844 3853 0
-8329 3844 3854 0
-8329 3844 3856 0
-8329 3845 0
-8329 3845 3853 0
-8329 3845 3854 0
-8329 3845 3856 0
8329 -3845 -3853 -3858 0
8329 -3844 -3854 -3858 0
8329 -3844 -3853 -3859 0
c ((1<=(aux872 + aux875 + aux876))=tv=SATLiteral(8330))
-8330 -3844 -3853 -3858 0
8330 3858 0
8330 3853 0
8330 3854 0
8330 3856 0
8330 3844 0
8330 3844 3853 0
8330 3844 3854 0
8330 3844 3856 0
8330 3845 0
8330 3845 3853 0
8330 3845 3854 0
8330 3845 3856 0
c (((aux878 + aux881 + aux882)<=1)=tv=SATLiteral(8331))
-8331 3883 0
-8331 3877 3882 0
-8331 3878 0
-8331 3880 0
-8331 3868 3882 0
-8331 3868 3877 0
-8331 3868 3878 0
-8331 3868 3880 0
-8331 3869 0
-8331 3869 3877 0
-8331 3869 3878 0
-8331 3869 3880 0
8331 -3869 -3877 -3882 0
8331 -3868 -3878 -3882 0
8331 -3868 -3877 -3883 0
c ((1<=(aux878 + aux881 + aux882))=tv=SATLiteral(8332))
-8332 -3868 -3877 -3882 0
8332 3882 0
8332 3877 0
8332 3878 0
8332 3880 0
8332 3868 0
8332 3868 3877 0
8332 3868 3878 0
8332 3868 3880 0
8332 3869 0
8332 3869 3877 0
8332 3869 3878 0
8332 3869 3880 0
c (((aux884 + aux887 + aux888)<=1)=tv=SATLiteral(8333))
-8333 3907 0
-8333 3901 3906 0
-8333 3902 0
-8333 3904 0
-8333 3892 3906 0
-8333 3892 3901 0
-8333 3892 3902 0
-8333 3892 3904 0
-8333 3893 0
-8333 3893 3901 0
-8333 3893 3902 0
-8333 3893 3904 0
8333 -3893 -3901 -3906 0
8333 -3892 -3902 -3906 0
8333 -3892 -3901 -3907 0
c ((1<=(aux884 + aux887 + aux888))=tv=SATLiteral(8334))
-8334 -3892 -3901 -3906 0
8334 3906 0
8334 3901 0
8334 3902 0
8334 3904 0
8334 3892 0
8334 3892 3901 0
8334 3892 3902 0
8334 3892 3904 0
8334 3893 0
8334 3893 3901 0
8334 3893 3902 0
8334 3893 3904 0
c (((aux890 + aux893 + aux894)<=1)=tv=SATLiteral(8335))
-8335 3931 0
-8335 3925 3930 0
-8335 3926 0
-8335 3928 0
-8335 3916 3930 0
-8335 3916 3925 0
-8335 3916 3926 0
-8335 3916 3928 0
-8335 3917 0
-8335 3917 3925 0
-8335 3917 3926 0
-8335 3917 3928 0
8335 -3917 -3925 -3930 0
8335 -3916 -3926 -3930 0
8335 -3916 -3925 -3931 0
c ((1<=(aux890 + aux893 + aux894))=tv=SATLiteral(8336))
-8336 -3916 -3925 -3930 0
8336 3930 0
8336 3925 0
8336 3926 0
8336 3928 0
8336 3916 0
8336 3916 3925 0
8336 3916 3926 0
8336 3916 3928 0
8336 3917 0
8336 3917 3925 0
8336 3917 3926 0
8336 3917 3928 0
c (((aux896 + aux899 + aux900)<=1)=tv=SATLiteral(8337))
-8337 3955 0
-8337 3949 3954 0
-8337 3950 0
-8337 3952 0
-8337 3940 3954 0
-8337 3940 3949 0
-8337 3940 3950 0
-8337 3940 3952 0
-8337 3941 0
-8337 3941 3949 0
-8337 3941 3950 0
-8337 3941 3952 0
8337 -3941 -3949 -3954 0
8337 -3940 -3950 -3954 0
8337 -3940 -3949 -3955 0
c ((1<=(aux896 + aux899 + aux900))=tv=SATLiteral(8338))
-8338 -3940 -3949 -3954 0
8338 3954 0
8338 3949 0
8338 3950 0
8338 3952 0
8338 3940 0
8338 3940 3949 0
8338 3940 3950 0
8338 3940 3952 0
8338 3941 0
8338 3941 3949 0
8338 3941 3950 0
8338 3941 3952 0
c (((aux902 + aux905 + aux906)<=1)=tv=SATLiteral(8339))
-8339 3979 0
-8339 3973 3978 0
-8339 3974 0
-8339 3976 0
-8339 3964 3978 0
-8339 3964 3973 0
-8339 3964 3974 0
-8339 3964 3976 0
-8339 3965 0
-8339 3965 3973 0
-8339 3965 3974 0
-8339 3965 3976 0
8339 -3965 -3973 -3978 0
8339 -3964 -3974 -3978 0
8339 -3964 -3973 -3979 0
c ((1<=(aux902 + aux905 + aux906))=tv=SATLiteral(8340))
-8340 -3964 -3973 -3978 0
8340 3978 0
8340 3973 0
8340 3974 0
8340 3976 0
8340 3964 0
8340 3964 3973 0
8340 3964 3974 0
8340 3964 3976 0
8340 3965 0
8340 3965 3973 0
8340 3965 3974 0
8340 3965 3976 0
c (((aux908 + aux911 + aux912)<=1)=tv=SATLiteral(8341))
-8341 4003 0
-8341 3997 4002 0
-8341 3998 0
-8341 4000 0
-8341 3988 4002 0
-8341 3988 3997 0
-8341 3988 3998 0
-8341 3988 4000 0
-8341 3989 0
-8341 3989 3997 0
-8341 3989 3998 0
-8341 3989 4000 0
8341 -3989 -3997 -4002 0
8341 -3988 -3998 -4002 0
8341 -3988 -3997 -4003 0
c ((1<=(aux908 + aux911 + aux912))=tv=SATLiteral(8342))
-8342 -3988 -3997 -4002 0
8342 4002 0
8342 3997 0
8342 3998 0
8342 4000 0
8342 3988 0
8342 3988 3997 0
8342 3988 3998 0
8342 3988 4000 0
8342 3989 0
8342 3989 3997 0
8342 3989 3998 0
8342 3989 4000 0
c (((aux914 + aux917 + aux918)<=1)=tv=SATLiteral(8343))
-8343 4027 0
-8343 4021 4026 0
-8343 4022 0
-8343 4024 0
-8343 4012 4026 0
-8343 4012 4021 0
-8343 4012 4022 0
-8343 4012 4024 0
-8343 4013 0
-8343 4013 4021 0
-8343 4013 4022 0
-8343 4013 4024 0
8343 -4013 -4021 -4026 0
8343 -4012 -4022 -4026 0
8343 -4012 -4021 -4027 0
c ((1<=(aux914 + aux917 + aux918))=tv=SATLiteral(8344))
-8344 -4012 -4021 -4026 0
8344 4026 0
8344 4021 0
8344 4022 0
8344 4024 0
8344 4012 0
8344 4012 4021 0
8344 4012 4022 0
8344 4012 4024 0
8344 4013 0
8344 4013 4021 0
8344 4013 4022 0
8344 4013 4024 0
c (((aux920 + aux923 + aux924)<=1)=tv=SATLiteral(8345))
-8345 4051 0
-8345 4045 4050 0
-8345 4046 0
-8345 4048 0
-8345 4036 4050 0
-8345 4036 4045 0
-8345 4036 4046 0
-8345 4036 4048 0
-8345 4037 0
-8345 4037 4045 0
-8345 4037 4046 0
-8345 4037 4048 0
8345 -4037 -4045 -4050 0
8345 -4036 -4046 -4050 0
8345 -4036 -4045 -4051 0
c ((1<=(aux920 + aux923 + aux924))=tv=SATLiteral(8346))
-8346 -4036 -4045 -4050 0
8346 4050 0
8346 4045 0
8346 4046 0
8346 4048 0
8346 4036 0
8346 4036 4045 0
8346 4036 4046 0
8346 4036 4048 0
8346 4037 0
8346 4037 4045 0
8346 4037 4046 0
8346 4037 4048 0
c (((aux926 + aux929 + aux930)<=1)=tv=SATLiteral(8347))
-8347 4075 0
-8347 4069 4074 0
-8347 4070 0
-8347 4072 0
-8347 4060 4074 0
-8347 4060 4069 0
-8347 4060 4070 0
-8347 4060 4072 0
-8347 4061 0
-8347 4061 4069 0
-8347 4061 4070 0
-8347 4061 4072 0
8347 -4061 -4069 -4074 0
8347 -4060 -4070 -4074 0
8347 -4060 -4069 -4075 0
c ((1<=(aux926 + aux929 + aux930))=tv=SATLiteral(8348))
-8348 -4060 -4069 -4074 0
8348 4074 0
8348 4069 0
8348 4070 0
8348 4072 0
8348 4060 0
8348 4060 4069 0
8348 4060 4070 0
8348 4060 4072 0
8348 4061 0
8348 4061 4069 0
8348 4061 4070 0
8348 4061 4072 0
c (((aux932 + aux935 + aux936)<=1)=tv=SATLiteral(8349))
-8349 4099 0
-8349 4093 4098 0
-8349 4094 0
-8349 4096 0
-8349 4084 4098 0
-8349 4084 4093 0
-8349 4084 4094 0
-8349 4084 4096 0
-8349 4085 0
-8349 4085 4093 0
-8349 4085 4094 0
-8349 4085 4096 0
8349 -4085 -4093 -4098 0
8349 -4084 -4094 -4098 0
8349 -4084 -4093 -4099 0
c ((1<=(aux932 + aux935 + aux936))=tv=SATLiteral(8350))
-8350 -4084 -4093 -4098 0
8350 4098 0
8350 4093 0
8350 4094 0
8350 4096 0
8350 4084 0
8350 4084 4093 0
8350 4084 4094 0
8350 4084 4096 0
8350 4085 0
8350 4085 4093 0
8350 4085 4094 0
8350 4085 4096 0
c (((aux938 + aux941 + aux942)<=1)=tv=SATLiteral(8351))
-8351 4123 0
-8351 4117 4122 0
-8351 4118 0
-8351 4120 0
-8351 4108 4122 0
-8351 4108 4117 0
-8351 4108 4118 0
-8351 4108 4120 0
-8351 4109 0
-8351 4109 4117 0
-8351 4109 4118 0
-8351 4109 4120 0
8351 -4109 -4117 -4122 0
8351 -4108 -4118 -4122 0
8351 -4108 -4117 -4123 0
c ((1<=(aux938 + aux941 + aux942))=tv=SATLiteral(8352))
-8352 -4108 -4117 -4122 0
8352 4122 0
8352 4117 0
8352 4118 0
8352 4120 0
8352 4108 0
8352 4108 4117 0
8352 4108 4118 0
8352 4108 4120 0
8352 4109 0
8352 4109 4117 0
8352 4109 4118 0
8352 4109 4120 0
c (((aux944 + aux947 + aux948)<=1)=tv=SATLiteral(8353))
-8353 4147 0
-8353 4141 4146 0
-8353 4142 0
-8353 4144 0
-8353 4132 4146 0
-8353 4132 4141 0
-8353 4132 4142 0
-8353 4132 4144 0
-8353 4133 0
-8353 4133 4141 0
-8353 4133 4142 0
-8353 4133 4144 0
8353 -4133 -4141 -4146 0
8353 -4132 -4142 -4146 0
8353 -4132 -4141 -4147 0
c ((1<=(aux944 + aux947 + aux948))=tv=SATLiteral(8354))
-8354 -4132 -4141 -4146 0
8354 4146 0
8354 4141 0
8354 4142 0
8354 4144 0
8354 4132 0
8354 4132 4141 0
8354 4132 4142 0
8354 4132 4144 0
8354 4133 0
8354 4133 4141 0
8354 4133 4142 0
8354 4133 4144 0
c (((aux950 + aux953 + aux954)<=1)=tv=SATLiteral(8355))
-8355 4171 0
-8355 4165 4170 0
-8355 4166 0
-8355 4168 0
-8355 4156 4170 0
-8355 4156 4165 0
-8355 4156 4166 0
-8355 4156 4168 0
-8355 4157 0
-8355 4157 4165 0
-8355 4157 4166 0
-8355 4157 4168 0
8355 -4157 -4165 -4170 0
8355 -4156 -4166 -4170 0
8355 -4156 -4165 -4171 0
c ((1<=(aux950 + aux953 + aux954))=tv=SATLiteral(8356))
-8356 -4156 -4165 -4170 0
8356 4170 0
8356 4165 0
8356 4166 0
8356 4168 0
8356 4156 0
8356 4156 4165 0
8356 4156 4166 0
8356 4156 4168 0
8356 4157 0
8356 4157 4165 0
8356 4157 4166 0
8356 4157 4168 0
c (((aux956 + aux959 + aux960)<=1)=tv=SATLiteral(8357))
-8357 4195 0
-8357 4189 4194 0
-8357 4190 0
-8357 4192 0
-8357 4180 4194 0
-8357 4180 4189 0
-8357 4180 4190 0
-8357 4180 4192 0
-8357 4181 0
-8357 4181 4189 0
-8357 4181 4190 0
-8357 4181 4192 0
8357 -4181 -4189 -4194 0
8357 -4180 -4190 -4194 0
8357 -4180 -4189 -4195 0
c ((1<=(aux956 + aux959 + aux960))=tv=SATLiteral(8358))
-8358 -4180 -4189 -4194 0
8358 4194 0
8358 4189 0
8358 4190 0
8358 4192 0
8358 4180 0
8358 4180 4189 0
8358 4180 4190 0
8358 4180 4192 0
8358 4181 0
8358 4181 4189 0
8358 4181 4190 0
8358 4181 4192 0
c (((aux962 + aux965 + aux966)<=1)=tv=SATLiteral(8359))
-8359 4219 0
-8359 4213 4218 0
-8359 4214 0
-8359 4216 0
-8359 4204 4218 0
-8359 4204 4213 0
-8359 4204 4214 0
-8359 4204 4216 0
-8359 4205 0
-8359 4205 4213 0
-8359 4205 4214 0
-8359 4205 4216 0
8359 -4205 -4213 -4218 0
8359 -4204 -4214 -4218 0
8359 -4204 -4213 -4219 0
c ((1<=(aux962 + aux965 + aux966))=tv=SATLiteral(8360))
-8360 -4204 -4213 -4218 0
8360 4218 0
8360 4213 0
8360 4214 0
8360 4216 0
8360 4204 0
8360 4204 4213 0
8360 4204 4214 0
8360 4204 4216 0
8360 4205 0
8360 4205 4213 0
8360 4205 4214 0
8360 4205 4216 0
c (((aux968 + aux971 + aux972)<=1)=tv=SATLiteral(8361))
-8361 4243 0
-8361 4237 4242 0
-8361 4238 0
-8361 4240 0
-8361 4228 4242 0
-8361 4228 4237 0
-8361 4228 4238 0
-8361 4228 4240 0
-8361 4229 0
-8361 4229 4237 0
-8361 4229 4238 0
-8361 4229 4240 0
8361 -4229 -4237 -4242 0
8361 -4228 -4238 -4242 0
8361 -4228 -4237 -4243 0
c ((1<=(aux968 + aux971 + aux972))=tv=SATLiteral(8362))
-8362 -4228 -4237 -4242 0
8362 4242 0
8362 4237 0
8362 4238 0
8362 4240 0
8362 4228 0
8362 4228 4237 0
8362 4228 4238 0
8362 4228 4240 0
8362 4229 0
8362 4229 4237 0
8362 4229 4238 0
8362 4229 4240 0
c (((aux974 + aux977 + aux978)<=1)=tv=SATLiteral(8363))
-8363 4267 0
-8363 4261 4266 0
-8363 4262 0
-8363 4264 0
-8363 4252 4266 0
-8363 4252 4261 0
-8363 4252 4262 0
-8363 4252 4264 0
-8363 4253 0
-8363 4253 4261 0
-8363 4253 4262 0
-8363 4253 4264 0
8363 -4253 -4261 -4266 0
8363 -4252 -4262 -4266 0
8363 -4252 -4261 -4267 0
c ((1<=(aux974 + aux977 + aux978))=tv=SATLiteral(8364))
-8364 -4252 -4261 -4266 0
8364 4266 0
8364 4261 0
8364 4262 0
8364 4264 0
8364 4252 0
8364 4252 4261 0
8364 4252 4262 0
8364 4252 4264 0
8364 4253 0
8364 4253 4261 0
8364 4253 4262 0
8364 4253 4264 0
c (((aux980 + aux983 + aux984)<=1)=tv=SATLiteral(8365))
-8365 4291 0
-8365 4285 4290 0
-8365 4286 0
-8365 4288 0
-8365 4276 4290 0
-8365 4276 4285 0
-8365 4276 4286 0
-8365 4276 4288 0
-8365 4277 0
-8365 4277 4285 0
-8365 4277 4286 0
-8365 4277 4288 0
8365 -4277 -4285 -4290 0
8365 -4276 -4286 -4290 0
8365 -4276 -4285 -4291 0
c ((1<=(aux980 + aux983 + aux984))=tv=SATLiteral(8366))
-8366 -4276 -4285 -4290 0
8366 4290 0
8366 4285 0
8366 4286 0
8366 4288 0
8366 4276 0
8366 4276 4285 0
8366 4276 4286 0
8366 4276 4288 0
8366 4277 0
8366 4277 4285 0
8366 4277 4286 0
8366 4277 4288 0
c (((aux986 + aux989 + aux990)<=1)=tv=SATLiteral(8367))
-8367 4315 0
-8367 4309 4314 0
-8367 4310 0
-8367 4312 0
-8367 4300 4314 0
-8367 4300 4309 0
-8367 4300 4310 0
-8367 4300 4312 0
-8367 4301 0
-8367 4301 4309 0
-8367 4301 4310 0
-8367 4301 4312 0
8367 -4301 -4309 -4314 0
8367 -4300 -4310 -4314 0
8367 -4300 -4309 -4315 0
c ((1<=(aux986 + aux989 + aux990))=tv=SATLiteral(8368))
-8368 -4300 -4309 -4314 0
8368 4314 0
8368 4309 0
8368 4310 0
8368 4312 0
8368 4300 0
8368 4300 4309 0
8368 4300 4310 0
8368 4300 4312 0
8368 4301 0
8368 4301 4309 0
8368 4301 4310 0
8368 4301 4312 0
c (((aux992 + aux995 + aux996)<=1)=tv=SATLiteral(8369))
-8369 4339 0
-8369 4333 4338 0
-8369 4334 0
-8369 4336 0
-8369 4324 4338 0
-8369 4324 4333 0
-8369 4324 4334 0
-8369 4324 4336 0
-8369 4325 0
-8369 4325 4333 0
-8369 4325 4334 0
-8369 4325 4336 0
8369 -4325 -4333 -4338 0
8369 -4324 -4334 -4338 0
8369 -4324 -4333 -4339 0
c ((1<=(aux992 + aux995 + aux996))=tv=SATLiteral(8370))
-8370 -4324 -4333 -4338 0
8370 4338 0
8370 4333 0
8370 4334 0
8370 4336 0
8370 4324 0
8370 4324 4333 0
8370 4324 4334 0
8370 4324 4336 0
8370 4325 0
8370 4325 4333 0
8370 4325 4334 0
8370 4325 4336 0
c (((aux998 + aux1001 + aux1002)<=1)=tv=SATLiteral(8371))
-8371 4363 0
-8371 4357 4362 0
-8371 4358 0
-8371 4360 0
-8371 4348 4362 0
-8371 4348 4357 0
-8371 4348 4358 0
-8371 4348 4360 0
-8371 4349 0
-8371 4349 4357 0
-8371 4349 4358 0
-8371 4349 4360 0
8371 -4349 -4357 -4362 0
8371 -4348 -4358 -4362 0
8371 -4348 -4357 -4363 0
c ((1<=(aux998 + aux1001 + aux1002))=tv=SATLiteral(8372))
-8372 -4348 -4357 -4362 0
8372 4362 0
8372 4357 0
8372 4358 0
8372 4360 0
8372 4348 0
8372 4348 4357 0
8372 4348 4358 0
8372 4348 4360 0
8372 4349 0
8372 4349 4357 0
8372 4349 4358 0
8372 4349 4360 0
c (((aux1004 + aux1007 + aux1008)<=1)=tv=SATLiteral(8373))
-8373 4387 0
-8373 4381 4386 0
-8373 4382 0
-8373 4384 0
-8373 4372 4386 0
-8373 4372 4381 0
-8373 4372 4382 0
-8373 4372 4384 0
-8373 4373 0
-8373 4373 4381 0
-8373 4373 4382 0
-8373 4373 4384 0
8373 -4373 -4381 -4386 0
8373 -4372 -4382 -4386 0
8373 -4372 -4381 -4387 0
c ((1<=(aux1004 + aux1007 + aux1008))=tv=SATLiteral(8374))
-8374 -4372 -4381 -4386 0
8374 4386 0
8374 4381 0
8374 4382 0
8374 4384 0
8374 4372 0
8374 4372 4381 0
8374 4372 4382 0
8374 4372 4384 0
8374 4373 0
8374 4373 4381 0
8374 4373 4382 0
8374 4373 4384 0
c (((aux1010 + aux1013 + aux1014)<=1)=tv=SATLiteral(8375))
-8375 4411 0
-8375 4405 4410 0
-8375 4406 0
-8375 4408 0
-8375 4396 4410 0
-8375 4396 4405 0
-8375 4396 4406 0
-8375 4396 4408 0
-8375 4397 0
-8375 4397 4405 0
-8375 4397 4406 0
-8375 4397 4408 0
8375 -4397 -4405 -4410 0
8375 -4396 -4406 -4410 0
8375 -4396 -4405 -4411 0
c ((1<=(aux1010 + aux1013 + aux1014))=tv=SATLiteral(8376))
-8376 -4396 -4405 -4410 0
8376 4410 0
8376 4405 0
8376 4406 0
8376 4408 0
8376 4396 0
8376 4396 4405 0
8376 4396 4406 0
8376 4396 4408 0
8376 4397 0
8376 4397 4405 0
8376 4397 4406 0
8376 4397 4408 0
c (((aux1016 + aux1019 + aux1020)<=1)=tv=SATLiteral(8377))
-8377 4435 0
-8377 4429 4434 0
-8377 4430 0
-8377 4432 0
-8377 4420 4434 0
-8377 4420 4429 0
-8377 4420 4430 0
-8377 4420 4432 0
-8377 4421 0
-8377 4421 4429 0
-8377 4421 4430 0
-8377 4421 4432 0
8377 -4421 -4429 -4434 0
8377 -4420 -4430 -4434 0
8377 -4420 -4429 -4435 0
c ((1<=(aux1016 + aux1019 + aux1020))=tv=SATLiteral(8378))
-8378 -4420 -4429 -4434 0
8378 4434 0
8378 4429 0
8378 4430 0
8378 4432 0
8378 4420 0
8378 4420 4429 0
8378 4420 4430 0
8378 4420 4432 0
8378 4421 0
8378 4421 4429 0
8378 4421 4430 0
8378 4421 4432 0
c (((aux1022 + aux1025 + aux1026)<=1)=tv=SATLiteral(8379))
-8379 4459 0
-8379 4453 4458 0
-8379 4454 0
-8379 4456 0
-8379 4444 4458 0
-8379 4444 4453 0
-8379 4444 4454 0
-8379 4444 4456 0
-8379 4445 0
-8379 4445 4453 0
-8379 4445 4454 0
-8379 4445 4456 0
8379 -4445 -4453 -4458 0
8379 -4444 -4454 -4458 0
8379 -4444 -4453 -4459 0
c ((1<=(aux1022 + aux1025 + aux1026))=tv=SATLiteral(8380))
-8380 -4444 -4453 -4458 0
8380 4458 0
8380 4453 0
8380 4454 0
8380 4456 0
8380 4444 0
8380 4444 4453 0
8380 4444 4454 0
8380 4444 4456 0
8380 4445 0
8380 4445 4453 0
8380 4445 4454 0
8380 4445 4456 0
c (((aux1028 + aux1031 + aux1032)<=1)=tv=SATLiteral(8381))
-8381 4483 0
-8381 4477 4482 0
-8381 4478 0
-8381 4480 0
-8381 4468 4482 0
-8381 4468 4477 0
-8381 4468 4478 0
-8381 4468 4480 0
-8381 4469 0
-8381 4469 4477 0
-8381 4469 4478 0
-8381 4469 4480 0
8381 -4469 -4477 -4482 0
8381 -4468 -4478 -4482 0
8381 -4468 -4477 -4483 0
c ((1<=(aux1028 + aux1031 + aux1032))=tv=SATLiteral(8382))
-8382 -4468 -4477 -4482 0
8382 4482 0
8382 4477 0
8382 4478 0
8382 4480 0
8382 4468 0
8382 4468 4477 0
8382 4468 4478 0
8382 4468 4480 0
8382 4469 0
8382 4469 4477 0
8382 4469 4478 0
8382 4469 4480 0
c (((aux1034 + aux1037 + aux1038)<=1)=tv=SATLiteral(8383))
-8383 4507 0
-8383 4501 4506 0
-8383 4502 0
-8383 4504 0
-8383 4492 4506 0
-8383 4492 4501 0
-8383 4492 4502 0
-8383 4492 4504 0
-8383 4493 0
-8383 4493 4501 0
-8383 4493 4502 0
-8383 4493 4504 0
8383 -4493 -4501 -4506 0
8383 -4492 -4502 -4506 0
8383 -4492 -4501 -4507 0
c ((1<=(aux1034 + aux1037 + aux1038))=tv=SATLiteral(8384))
-8384 -4492 -4501 -4506 0
8384 4506 0
8384 4501 0
8384 4502 0
8384 4504 0
8384 4492 0
8384 4492 4501 0
8384 4492 4502 0
8384 4492 4504 0
8384 4493 0
8384 4493 4501 0
8384 4493 4502 0
8384 4493 4504 0
c (((aux1040 + aux1043 + aux1044)<=1)=tv=SATLiteral(8385))
-8385 4531 0
-8385 4525 4530 0
-8385 4526 0
-8385 4528 0
-8385 4516 4530 0
-8385 4516 4525 0
-8385 4516 4526 0
-8385 4516 4528 0
-8385 4517 0
-8385 4517 4525 0
-8385 4517 4526 0
-8385 4517 4528 0
8385 -4517 -4525 -4530 0
8385 -4516 -4526 -4530 0
8385 -4516 -4525 -4531 0
c ((1<=(aux1040 + aux1043 + aux1044))=tv=SATLiteral(8386))
-8386 -4516 -4525 -4530 0
8386 4530 0
8386 4525 0
8386 4526 0
8386 4528 0
8386 4516 0
8386 4516 4525 0
8386 4516 4526 0
8386 4516 4528 0
8386 4517 0
8386 4517 4525 0
8386 4517 4526 0
8386 4517 4528 0
c (((aux1046 + aux1049 + aux1050)<=1)=tv=SATLiteral(8387))
-8387 4555 0
-8387 4549 4554 0
-8387 4550 0
-8387 4552 0
-8387 4540 4554 0
-8387 4540 4549 0
-8387 4540 4550 0
-8387 4540 4552 0
-8387 4541 0
-8387 4541 4549 0
-8387 4541 4550 0
-8387 4541 4552 0
8387 -4541 -4549 -4554 0
8387 -4540 -4550 -4554 0
8387 -4540 -4549 -4555 0
c ((1<=(aux1046 + aux1049 + aux1050))=tv=SATLiteral(8388))
-8388 -4540 -4549 -4554 0
8388 4554 0
8388 4549 0
8388 4550 0
8388 4552 0
8388 4540 0
8388 4540 4549 0
8388 4540 4550 0
8388 4540 4552 0
8388 4541 0
8388 4541 4549 0
8388 4541 4550 0
8388 4541 4552 0
c (((aux1052 + aux1055 + aux1056)<=1)=tv=SATLiteral(8389))
-8389 4579 0
-8389 4573 4578 0
-8389 4574 0
-8389 4576 0
-8389 4564 4578 0
-8389 4564 4573 0
-8389 4564 4574 0
-8389 4564 4576 0
-8389 4565 0
-8389 4565 4573 0
-8389 4565 4574 0
-8389 4565 4576 0
8389 -4565 -4573 -4578 0
8389 -4564 -4574 -4578 0
8389 -4564 -4573 -4579 0
c ((1<=(aux1052 + aux1055 + aux1056))=tv=SATLiteral(8390))
-8390 -4564 -4573 -4578 0
8390 4578 0
8390 4573 0
8390 4574 0
8390 4576 0
8390 4564 0
8390 4564 4573 0
8390 4564 4574 0
8390 4564 4576 0
8390 4565 0
8390 4565 4573 0
8390 4565 4574 0
8390 4565 4576 0
c (((aux1058 + aux1061 + aux1062)<=1)=tv=SATLiteral(8391))
-8391 4603 0
-8391 4597 4602 0
-8391 4598 0
-8391 4600 0
-8391 4588 4602 0
-8391 4588 4597 0
-8391 4588 4598 0
-8391 4588 4600 0
-8391 4589 0
-8391 4589 4597 0
-8391 4589 4598 0
-8391 4589 4600 0
8391 -4589 -4597 -4602 0
8391 -4588 -4598 -4602 0
8391 -4588 -4597 -4603 0
c ((1<=(aux1058 + aux1061 + aux1062))=tv=SATLiteral(8392))
-8392 -4588 -4597 -4602 0
8392 4602 0
8392 4597 0
8392 4598 0
8392 4600 0
8392 4588 0
8392 4588 4597 0
8392 4588 4598 0
8392 4588 4600 0
8392 4589 0
8392 4589 4597 0
8392 4589 4598 0
8392 4589 4600 0
c (((aux1064 + aux1067 + aux1068)<=1)=tv=SATLiteral(8393))
-8393 4627 0
-8393 4621 4626 0
-8393 4622 0
-8393 4624 0
-8393 4612 4626 0
-8393 4612 4621 0
-8393 4612 4622 0
-8393 4612 4624 0
-8393 4613 0
-8393 4613 4621 0
-8393 4613 4622 0
-8393 4613 4624 0
8393 -4613 -4621 -4626 0
8393 -4612 -4622 -4626 0
8393 -4612 -4621 -4627 0
c ((1<=(aux1064 + aux1067 + aux1068))=tv=SATLiteral(8394))
-8394 -4612 -4621 -4626 0
8394 4626 0
8394 4621 0
8394 4622 0
8394 4624 0
8394 4612 0
8394 4612 4621 0
8394 4612 4622 0
8394 4612 4624 0
8394 4613 0
8394 4613 4621 0
8394 4613 4622 0
8394 4613 4624 0
c (((aux1070 + aux1073 + aux1074)<=1)=tv=SATLiteral(8395))
-8395 4651 0
-8395 4645 4650 0
-8395 4646 0
-8395 4648 0
-8395 4636 4650 0
-8395 4636 4645 0
-8395 4636 4646 0
-8395 4636 4648 0
-8395 4637 0
-8395 4637 4645 0
-8395 4637 4646 0
-8395 4637 4648 0
8395 -4637 -4645 -4650 0
8395 -4636 -4646 -4650 0
8395 -4636 -4645 -4651 0
c ((1<=(aux1070 + aux1073 + aux1074))=tv=SATLiteral(8396))
-8396 -4636 -4645 -4650 0
8396 4650 0
8396 4645 0
8396 4646 0
8396 4648 0
8396 4636 0
8396 4636 4645 0
8396 4636 4646 0
8396 4636 4648 0
8396 4637 0
8396 4637 4645 0
8396 4637 4646 0
8396 4637 4648 0
c (((aux1076 + aux1079 + aux1080)<=1)=tv=SATLiteral(8397))
-8397 4675 0
-8397 4669 4674 0
-8397 4670 0
-8397 4672 0
-8397 4660 4674 0
-8397 4660 4669 0
-8397 4660 4670 0
-8397 4660 4672 0
-8397 4661 0
-8397 4661 4669 0
-8397 4661 4670 0
-8397 4661 4672 0
8397 -4661 -4669 -4674 0
8397 -4660 -4670 -4674 0
8397 -4660 -4669 -4675 0
c ((1<=(aux1076 + aux1079 + aux1080))=tv=SATLiteral(8398))
-8398 -4660 -4669 -4674 0
8398 4674 0
8398 4669 0
8398 4670 0
8398 4672 0
8398 4660 0
8398 4660 4669 0
8398 4660 4670 0
8398 4660 4672 0
8398 4661 0
8398 4661 4669 0
8398 4661 4670 0
8398 4661 4672 0
c (((aux1082 + aux1085 + aux1086)<=1)=tv=SATLiteral(8399))
-8399 4699 0
-8399 4693 4698 0
-8399 4694 0
-8399 4696 0
-8399 4684 4698 0
-8399 4684 4693 0
-8399 4684 4694 0
-8399 4684 4696 0
-8399 4685 0
-8399 4685 4693 0
-8399 4685 4694 0
-8399 4685 4696 0
8399 -4685 -4693 -4698 0
8399 -4684 -4694 -4698 0
8399 -4684 -4693 -4699 0
c ((1<=(aux1082 + aux1085 + aux1086))=tv=SATLiteral(8400))
-8400 -4684 -4693 -4698 0
8400 4698 0
8400 4693 0
8400 4694 0
8400 4696 0
8400 4684 0
8400 4684 4693 0
8400 4684 4694 0
8400 4684 4696 0
8400 4685 0
8400 4685 4693 0
8400 4685 4694 0
8400 4685 4696 0
c (((aux1088 + aux1091 + aux1092)<=1)=tv=SATLiteral(8401))
-8401 4723 0
-8401 4717 4722 0
-8401 4718 0
-8401 4720 0
-8401 4708 4722 0
-8401 4708 4717 0
-8401 4708 4718 0
-8401 4708 4720 0
-8401 4709 0
-8401 4709 4717 0
-8401 4709 4718 0
-8401 4709 4720 0
8401 -4709 -4717 -4722 0
8401 -4708 -4718 -4722 0
8401 -4708 -4717 -4723 0
c ((1<=(aux1088 + aux1091 + aux1092))=tv=SATLiteral(8402))
-8402 -4708 -4717 -4722 0
8402 4722 0
8402 4717 0
8402 4718 0
8402 4720 0
8402 4708 0
8402 4708 4717 0
8402 4708 4718 0
8402 4708 4720 0
8402 4709 0
8402 4709 4717 0
8402 4709 4718 0
8402 4709 4720 0
c (((aux1094 + aux1097 + aux1098)<=1)=tv=SATLiteral(8403))
-8403 4747 0
-8403 4741 4746 0
-8403 4742 0
-8403 4744 0
-8403 4732 4746 0
-8403 4732 4741 0
-8403 4732 4742 0
-8403 4732 4744 0
-8403 4733 0
-8403 4733 4741 0
-8403 4733 4742 0
-8403 4733 4744 0
8403 -4733 -4741 -4746 0
8403 -4732 -4742 -4746 0
8403 -4732 -4741 -4747 0
c ((1<=(aux1094 + aux1097 + aux1098))=tv=SATLiteral(8404))
-8404 -4732 -4741 -4746 0
8404 4746 0
8404 4741 0
8404 4742 0
8404 4744 0
8404 4732 0
8404 4732 4741 0
8404 4732 4742 0
8404 4732 4744 0
8404 4733 0
8404 4733 4741 0
8404 4733 4742 0
8404 4733 4744 0
c (((aux1100 + aux1103 + aux1104)<=1)=tv=SATLiteral(8405))
-8405 4771 0
-8405 4765 4770 0
-8405 4766 0
-8405 4768 0
-8405 4756 4770 0
-8405 4756 4765 0
-8405 4756 4766 0
-8405 4756 4768 0
-8405 4757 0
-8405 4757 4765 0
-8405 4757 4766 0
-8405 4757 4768 0
8405 -4757 -4765 -4770 0
8405 -4756 -4766 -4770 0
8405 -4756 -4765 -4771 0
c ((1<=(aux1100 + aux1103 + aux1104))=tv=SATLiteral(8406))
-8406 -4756 -4765 -4770 0
8406 4770 0
8406 4765 0
8406 4766 0
8406 4768 0
8406 4756 0
8406 4756 4765 0
8406 4756 4766 0
8406 4756 4768 0
8406 4757 0
8406 4757 4765 0
8406 4757 4766 0
8406 4757 4768 0
c (((aux1106 + aux1109 + aux1110)<=1)=tv=SATLiteral(8407))
-8407 4795 0
-8407 4789 4794 0
-8407 4790 0
-8407 4792 0
-8407 4780 4794 0
-8407 4780 4789 0
-8407 4780 4790 0
-8407 4780 4792 0
-8407 4781 0
-8407 4781 4789 0
-8407 4781 4790 0
-8407 4781 4792 0
8407 -4781 -4789 -4794 0
8407 -4780 -4790 -4794 0
8407 -4780 -4789 -4795 0
c ((1<=(aux1106 + aux1109 + aux1110))=tv=SATLiteral(8408))
-8408 -4780 -4789 -4794 0
8408 4794 0
8408 4789 0
8408 4790 0
8408 4792 0
8408 4780 0
8408 4780 4789 0
8408 4780 4790 0
8408 4780 4792 0
8408 4781 0
8408 4781 4789 0
8408 4781 4790 0
8408 4781 4792 0
c (((aux1112 + aux1115 + aux1116)<=1)=tv=SATLiteral(8409))
-8409 4819 0
-8409 4813 4818 0
-8409 4814 0
-8409 4816 0
-8409 4804 4818 0
-8409 4804 4813 0
-8409 4804 4814 0
-8409 4804 4816 0
-8409 4805 0
-8409 4805 4813 0
-8409 4805 4814 0
-8409 4805 4816 0
8409 -4805 -4813 -4818 0
8409 -4804 -4814 -4818 0
8409 -4804 -4813 -4819 0
c ((1<=(aux1112 + aux1115 + aux1116))=tv=SATLiteral(8410))
-8410 -4804 -4813 -4818 0
8410 4818 0
8410 4813 0
8410 4814 0
8410 4816 0
8410 4804 0
8410 4804 4813 0
8410 4804 4814 0
8410 4804 4816 0
8410 4805 0
8410 4805 4813 0
8410 4805 4814 0
8410 4805 4816 0
c (((aux1118 + aux1121 + aux1122)<=1)=tv=SATLiteral(8411))
-8411 4843 0
-8411 4837 4842 0
-8411 4838 0
-8411 4840 0
-8411 4828 4842 0
-8411 4828 4837 0
-8411 4828 4838 0
-8411 4828 4840 0
-8411 4829 0
-8411 4829 4837 0
-8411 4829 4838 0
-8411 4829 4840 0
8411 -4829 -4837 -4842 0
8411 -4828 -4838 -4842 0
8411 -4828 -4837 -4843 0
c ((1<=(aux1118 + aux1121 + aux1122))=tv=SATLiteral(8412))
-8412 -4828 -4837 -4842 0
8412 4842 0
8412 4837 0
8412 4838 0
8412 4840 0
8412 4828 0
8412 4828 4837 0
8412 4828 4838 0
8412 4828 4840 0
8412 4829 0
8412 4829 4837 0
8412 4829 4838 0
8412 4829 4840 0
c (((aux1124 + aux1127 + aux1128)<=1)=tv=SATLiteral(8413))
-8413 4867 0
-8413 4861 4866 0
-8413 4862 0
-8413 4864 0
-8413 4852 4866 0
-8413 4852 4861 0
-8413 4852 4862 0
-8413 4852 4864 0
-8413 4853 0
-8413 4853 4861 0
-8413 4853 4862 0
-8413 4853 4864 0
8413 -4853 -4861 -4866 0
8413 -4852 -4862 -4866 0
8413 -4852 -4861 -4867 0
c ((1<=(aux1124 + aux1127 + aux1128))=tv=SATLiteral(8414))
-8414 -4852 -4861 -4866 0
8414 4866 0
8414 4861 0
8414 4862 0
8414 4864 0
8414 4852 0
8414 4852 4861 0
8414 4852 4862 0
8414 4852 4864 0
8414 4853 0
8414 4853 4861 0
8414 4853 4862 0
8414 4853 4864 0
c (((aux1130 + aux1133 + aux1134)<=1)=tv=SATLiteral(8415))
-8415 4891 0
-8415 4885 4890 0
-8415 4886 0
-8415 4888 0
-8415 4876 4890 0
-8415 4876 4885 0
-8415 4876 4886 0
-8415 4876 4888 0
-8415 4877 0
-8415 4877 4885 0
-8415 4877 4886 0
-8415 4877 4888 0
8415 -4877 -4885 -4890 0
8415 -4876 -4886 -4890 0
8415 -4876 -4885 -4891 0
c ((1<=(aux1130 + aux1133 + aux1134))=tv=SATLiteral(8416))
-8416 -4876 -4885 -4890 0
8416 4890 0
8416 4885 0
8416 4886 0
8416 4888 0
8416 4876 0
8416 4876 4885 0
8416 4876 4886 0
8416 4876 4888 0
8416 4877 0
8416 4877 4885 0
8416 4877 4886 0
8416 4877 4888 0
c (((aux1136 + aux1139 + aux1140)<=1)=tv=SATLiteral(8417))
-8417 4915 0
-8417 4909 4914 0
-8417 4910 0
-8417 4912 0
-8417 4900 4914 0
-8417 4900 4909 0
-8417 4900 4910 0
-8417 4900 4912 0
-8417 4901 0
-8417 4901 4909 0
-8417 4901 4910 0
-8417 4901 4912 0
8417 -4901 -4909 -4914 0
8417 -4900 -4910 -4914 0
8417 -4900 -4909 -4915 0
c ((1<=(aux1136 + aux1139 + aux1140))=tv=SATLiteral(8418))
-8418 -4900 -4909 -4914 0
8418 4914 0
8418 4909 0
8418 4910 0
8418 4912 0
8418 4900 0
8418 4900 4909 0
8418 4900 4910 0
8418 4900 4912 0
8418 4901 0
8418 4901 4909 0
8418 4901 4910 0
8418 4901 4912 0
c (((aux1142 + aux1145 + aux1146)<=1)=tv=SATLiteral(8419))
-8419 4939 0
-8419 4933 4938 0
-8419 4934 0
-8419 4936 0
-8419 4924 4938 0
-8419 4924 4933 0
-8419 4924 4934 0
-8419 4924 4936 0
-8419 4925 0
-8419 4925 4933 0
-8419 4925 4934 0
-8419 4925 4936 0
8419 -4925 -4933 -4938 0
8419 -4924 -4934 -4938 0
8419 -4924 -4933 -4939 0
c ((1<=(aux1142 + aux1145 + aux1146))=tv=SATLiteral(8420))
-8420 -4924 -4933 -4938 0
8420 4938 0
8420 4933 0
8420 4934 0
8420 4936 0
8420 4924 0
8420 4924 4933 0
8420 4924 4934 0
8420 4924 4936 0
8420 4925 0
8420 4925 4933 0
8420 4925 4934 0
8420 4925 4936 0
c (((aux1148 + aux1151 + aux1152)<=1)=tv=SATLiteral(8421))
-8421 4963 0
-8421 4957 4962 0
-8421 4958 0
-8421 4960 0
-8421 4948 4962 0
-8421 4948 4957 0
-8421 4948 4958 0
-8421 4948 4960 0
-8421 4949 0
-8421 4949 4957 0
-8421 4949 4958 0
-8421 4949 4960 0
8421 -4949 -4957 -4962 0
8421 -4948 -4958 -4962 0
8421 -4948 -4957 -4963 0
c ((1<=(aux1148 + aux1151 + aux1152))=tv=SATLiteral(8422))
-8422 -4948 -4957 -4962 0
8422 4962 0
8422 4957 0
8422 4958 0
8422 4960 0
8422 4948 0
8422 4948 4957 0
8422 4948 4958 0
8422 4948 4960 0
8422 4949 0
8422 4949 4957 0
8422 4949 4958 0
8422 4949 4960 0
c (((aux1154 + aux1157 + aux1158)<=1)=tv=SATLiteral(8423))
-8423 4987 0
-8423 4981 4986 0
-8423 4982 0
-8423 4984 0
-8423 4972 4986 0
-8423 4972 4981 0
-8423 4972 4982 0
-8423 4972 4984 0
-8423 4973 0
-8423 4973 4981 0
-8423 4973 4982 0
-8423 4973 4984 0
8423 -4973 -4981 -4986 0
8423 -4972 -4982 -4986 0
8423 -4972 -4981 -4987 0
c ((1<=(aux1154 + aux1157 + aux1158))=tv=SATLiteral(8424))
-8424 -4972 -4981 -4986 0
8424 4986 0
8424 4981 0
8424 4982 0
8424 4984 0
8424 4972 0
8424 4972 4981 0
8424 4972 4982 0
8424 4972 4984 0
8424 4973 0
8424 4973 4981 0
8424 4973 4982 0
8424 4973 4984 0
c (((aux1160 + aux1163 + aux1164)<=1)=tv=SATLiteral(8425))
-8425 5011 0
-8425 5005 5010 0
-8425 5006 0
-8425 5008 0
-8425 4996 5010 0
-8425 4996 5005 0
-8425 4996 5006 0
-8425 4996 5008 0
-8425 4997 0
-8425 4997 5005 0
-8425 4997 5006 0
-8425 4997 5008 0
8425 -4997 -5005 -5010 0
8425 -4996 -5006 -5010 0
8425 -4996 -5005 -5011 0
c ((1<=(aux1160 + aux1163 + aux1164))=tv=SATLiteral(8426))
-8426 -4996 -5005 -5010 0
8426 5010 0
8426 5005 0
8426 5006 0
8426 5008 0
8426 4996 0
8426 4996 5005 0
8426 4996 5006 0
8426 4996 5008 0
8426 4997 0
8426 4997 5005 0
8426 4997 5006 0
8426 4997 5008 0
c (((aux1166 + aux1169 + aux1170)<=1)=tv=SATLiteral(8427))
-8427 5035 0
-8427 5029 5034 0
-8427 5030 0
-8427 5032 0
-8427 5020 5034 0
-8427 5020 5029 0
-8427 5020 5030 0
-8427 5020 5032 0
-8427 5021 0
-8427 5021 5029 0
-8427 5021 5030 0
-8427 5021 5032 0
8427 -5021 -5029 -5034 0
8427 -5020 -5030 -5034 0
8427 -5020 -5029 -5035 0
c ((1<=(aux1166 + aux1169 + aux1170))=tv=SATLiteral(8428))
-8428 -5020 -5029 -5034 0
8428 5034 0
8428 5029 0
8428 5030 0
8428 5032 0
8428 5020 0
8428 5020 5029 0
8428 5020 5030 0
8428 5020 5032 0
8428 5021 0
8428 5021 5029 0
8428 5021 5030 0
8428 5021 5032 0
c (((aux1172 + aux1175 + aux1176)<=1)=tv=SATLiteral(8429))
-8429 5059 0
-8429 5053 5058 0
-8429 5054 0
-8429 5056 0
-8429 5044 5058 0
-8429 5044 5053 0
-8429 5044 5054 0
-8429 5044 5056 0
-8429 5045 0
-8429 5045 5053 0
-8429 5045 5054 0
-8429 5045 5056 0
8429 -5045 -5053 -5058 0
8429 -5044 -5054 -5058 0
8429 -5044 -5053 -5059 0
c ((1<=(aux1172 + aux1175 + aux1176))=tv=SATLiteral(8430))
-8430 -5044 -5053 -5058 0
8430 5058 0
8430 5053 0
8430 5054 0
8430 5056 0
8430 5044 0
8430 5044 5053 0
8430 5044 5054 0
8430 5044 5056 0
8430 5045 0
8430 5045 5053 0
8430 5045 5054 0
8430 5045 5056 0
c (((aux1178 + aux1181 + aux1182)<=1)=tv=SATLiteral(8431))
-8431 5083 0
-8431 5077 5082 0
-8431 5078 0
-8431 5080 0
-8431 5068 5082 0
-8431 5068 5077 0
-8431 5068 5078 0
-8431 5068 5080 0
-8431 5069 0
-8431 5069 5077 0
-8431 5069 5078 0
-8431 5069 5080 0
8431 -5069 -5077 -5082 0
8431 -5068 -5078 -5082 0
8431 -5068 -5077 -5083 0
c ((1<=(aux1178 + aux1181 + aux1182))=tv=SATLiteral(8432))
-8432 -5068 -5077 -5082 0
8432 5082 0
8432 5077 0
8432 5078 0
8432 5080 0
8432 5068 0
8432 5068 5077 0
8432 5068 5078 0
8432 5068 5080 0
8432 5069 0
8432 5069 5077 0
8432 5069 5078 0
8432 5069 5080 0
c (((aux1184 + aux1187 + aux1188)<=1)=tv=SATLiteral(8433))
-8433 5107 0
-8433 5101 5106 0
-8433 5102 0
-8433 5104 0
-8433 5092 5106 0
-8433 5092 5101 0
-8433 5092 5102 0
-8433 5092 5104 0
-8433 5093 0
-8433 5093 5101 0
-8433 5093 5102 0
-8433 5093 5104 0
8433 -5093 -5101 -5106 0
8433 -5092 -5102 -5106 0
8433 -5092 -5101 -5107 0
c ((1<=(aux1184 + aux1187 + aux1188))=tv=SATLiteral(8434))
-8434 -5092 -5101 -5106 0
8434 5106 0
8434 5101 0
8434 5102 0
8434 5104 0
8434 5092 0
8434 5092 5101 0
8434 5092 5102 0
8434 5092 5104 0
8434 5093 0
8434 5093 5101 0
8434 5093 5102 0
8434 5093 5104 0
c (((aux1190 + aux1193 + aux1194)<=1)=tv=SATLiteral(8435))
-8435 5131 0
-8435 5125 5130 0
-8435 5126 0
-8435 5128 0
-8435 5116 5130 0
-8435 5116 5125 0
-8435 5116 5126 0
-8435 5116 5128 0
-8435 5117 0
-8435 5117 5125 0
-8435 5117 5126 0
-8435 5117 5128 0
8435 -5117 -5125 -5130 0
8435 -5116 -5126 -5130 0
8435 -5116 -5125 -5131 0
c ((1<=(aux1190 + aux1193 + aux1194))=tv=SATLiteral(8436))
-8436 -5116 -5125 -5130 0
8436 5130 0
8436 5125 0
8436 5126 0
8436 5128 0
8436 5116 0
8436 5116 5125 0
8436 5116 5126 0
8436 5116 5128 0
8436 5117 0
8436 5117 5125 0
8436 5117 5126 0
8436 5117 5128 0
c (((aux1196 + aux1199 + aux1200)<=1)=tv=SATLiteral(8437))
-8437 5155 0
-8437 5149 5154 0
-8437 5150 0
-8437 5152 0
-8437 5140 5154 0
-8437 5140 5149 0
-8437 5140 5150 0
-8437 5140 5152 0
-8437 5141 0
-8437 5141 5149 0
-8437 5141 5150 0
-8437 5141 5152 0
8437 -5141 -5149 -5154 0
8437 -5140 -5150 -5154 0
8437 -5140 -5149 -5155 0
c ((1<=(aux1196 + aux1199 + aux1200))=tv=SATLiteral(8438))
-8438 -5140 -5149 -5154 0
8438 5154 0
8438 5149 0
8438 5150 0
8438 5152 0
8438 5140 0
8438 5140 5149 0
8438 5140 5150 0
8438 5140 5152 0
8438 5141 0
8438 5141 5149 0
8438 5141 5150 0
8438 5141 5152 0
c (((aux1202 + aux1205 + aux1206)<=1)=tv=SATLiteral(8439))
-8439 5179 0
-8439 5173 5178 0
-8439 5174 0
-8439 5176 0
-8439 5164 5178 0
-8439 5164 5173 0
-8439 5164 5174 0
-8439 5164 5176 0
-8439 5165 0
-8439 5165 5173 0
-8439 5165 5174 0
-8439 5165 5176 0
8439 -5165 -5173 -5178 0
8439 -5164 -5174 -5178 0
8439 -5164 -5173 -5179 0
c ((1<=(aux1202 + aux1205 + aux1206))=tv=SATLiteral(8440))
-8440 -5164 -5173 -5178 0
8440 5178 0
8440 5173 0
8440 5174 0
8440 5176 0
8440 5164 0
8440 5164 5173 0
8440 5164 5174 0
8440 5164 5176 0
8440 5165 0
8440 5165 5173 0
8440 5165 5174 0
8440 5165 5176 0
c (((aux1208 + aux1211 + aux1212)<=1)=tv=SATLiteral(8441))
-8441 5203 0
-8441 5197 5202 0
-8441 5198 0
-8441 5200 0
-8441 5188 5202 0
-8441 5188 5197 0
-8441 5188 5198 0
-8441 5188 5200 0
-8441 5189 0
-8441 5189 5197 0
-8441 5189 5198 0
-8441 5189 5200 0
8441 -5189 -5197 -5202 0
8441 -5188 -5198 -5202 0
8441 -5188 -5197 -5203 0
c ((1<=(aux1208 + aux1211 + aux1212))=tv=SATLiteral(8442))
-8442 -5188 -5197 -5202 0
8442 5202 0
8442 5197 0
8442 5198 0
8442 5200 0
8442 5188 0
8442 5188 5197 0
8442 5188 5198 0
8442 5188 5200 0
8442 5189 0
8442 5189 5197 0
8442 5189 5198 0
8442 5189 5200 0
c (((aux1214 + aux1217 + aux1218)<=1)=tv=SATLiteral(8443))
-8443 5227 0
-8443 5221 5226 0
-8443 5222 0
-8443 5224 0
-8443 5212 5226 0
-8443 5212 5221 0
-8443 5212 5222 0
-8443 5212 5224 0
-8443 5213 0
-8443 5213 5221 0
-8443 5213 5222 0
-8443 5213 5224 0
8443 -5213 -5221 -5226 0
8443 -5212 -5222 -5226 0
8443 -5212 -5221 -5227 0
c ((1<=(aux1214 + aux1217 + aux1218))=tv=SATLiteral(8444))
-8444 -5212 -5221 -5226 0
8444 5226 0
8444 5221 0
8444 5222 0
8444 5224 0
8444 5212 0
8444 5212 5221 0
8444 5212 5222 0
8444 5212 5224 0
8444 5213 0
8444 5213 5221 0
8444 5213 5222 0
8444 5213 5224 0
c (((aux1220 + aux1223 + aux1224)<=1)=tv=SATLiteral(8445))
-8445 5251 0
-8445 5245 5250 0
-8445 5246 0
-8445 5248 0
-8445 5236 5250 0
-8445 5236 5245 0
-8445 5236 5246 0
-8445 5236 5248 0
-8445 5237 0
-8445 5237 5245 0
-8445 5237 5246 0
-8445 5237 5248 0
8445 -5237 -5245 -5250 0
8445 -5236 -5246 -5250 0
8445 -5236 -5245 -5251 0
c ((1<=(aux1220 + aux1223 + aux1224))=tv=SATLiteral(8446))
-8446 -5236 -5245 -5250 0
8446 5250 0
8446 5245 0
8446 5246 0
8446 5248 0
8446 5236 0
8446 5236 5245 0
8446 5236 5246 0
8446 5236 5248 0
8446 5237 0
8446 5237 5245 0
8446 5237 5246 0
8446 5237 5248 0
c (((aux1226 + aux1229 + aux1230)<=1)=tv=SATLiteral(8447))
-8447 5275 0
-8447 5269 5274 0
-8447 5270 0
-8447 5272 0
-8447 5260 5274 0
-8447 5260 5269 0
-8447 5260 5270 0
-8447 5260 5272 0
-8447 5261 0
-8447 5261 5269 0
-8447 5261 5270 0
-8447 5261 5272 0
8447 -5261 -5269 -5274 0
8447 -5260 -5270 -5274 0
8447 -5260 -5269 -5275 0
c ((1<=(aux1226 + aux1229 + aux1230))=tv=SATLiteral(8448))
-8448 -5260 -5269 -5274 0
8448 5274 0
8448 5269 0
8448 5270 0
8448 5272 0
8448 5260 0
8448 5260 5269 0
8448 5260 5270 0
8448 5260 5272 0
8448 5261 0
8448 5261 5269 0
8448 5261 5270 0
8448 5261 5272 0
c (((aux1232 + aux1235 + aux1236)<=1)=tv=SATLiteral(8449))
-8449 5299 0
-8449 5293 5298 0
-8449 5294 0
-8449 5296 0
-8449 5284 5298 0
-8449 5284 5293 0
-8449 5284 5294 0
-8449 5284 5296 0
-8449 5285 0
-8449 5285 5293 0
-8449 5285 5294 0
-8449 5285 5296 0
8449 -5285 -5293 -5298 0
8449 -5284 -5294 -5298 0
8449 -5284 -5293 -5299 0
c ((1<=(aux1232 + aux1235 + aux1236))=tv=SATLiteral(8450))
-8450 -5284 -5293 -5298 0
8450 5298 0
8450 5293 0
8450 5294 0
8450 5296 0
8450 5284 0
8450 5284 5293 0
8450 5284 5294 0
8450 5284 5296 0
8450 5285 0
8450 5285 5293 0
8450 5285 5294 0
8450 5285 5296 0
c (((aux1238 + aux1241 + aux1242)<=1)=tv=SATLiteral(8451))
-8451 5323 0
-8451 5317 5322 0
-8451 5318 0
-8451 5320 0
-8451 5308 5322 0
-8451 5308 5317 0
-8451 5308 5318 0
-8451 5308 5320 0
-8451 5309 0
-8451 5309 5317 0
-8451 5309 5318 0
-8451 5309 5320 0
8451 -5309 -5317 -5322 0
8451 -5308 -5318 -5322 0
8451 -5308 -5317 -5323 0
c ((1<=(aux1238 + aux1241 + aux1242))=tv=SATLiteral(8452))
-8452 -5308 -5317 -5322 0
8452 5322 0
8452 5317 0
8452 5318 0
8452 5320 0
8452 5308 0
8452 5308 5317 0
8452 5308 5318 0
8452 5308 5320 0
8452 5309 0
8452 5309 5317 0
8452 5309 5318 0
8452 5309 5320 0
c (((aux1244 + aux1247 + aux1248)<=1)=tv=SATLiteral(8453))
-8453 5347 0
-8453 5341 5346 0
-8453 5342 0
-8453 5344 0
-8453 5332 5346 0
-8453 5332 5341 0
-8453 5332 5342 0
-8453 5332 5344 0
-8453 5333 0
-8453 5333 5341 0
-8453 5333 5342 0
-8453 5333 5344 0
8453 -5333 -5341 -5346 0
8453 -5332 -5342 -5346 0
8453 -5332 -5341 -5347 0
c ((1<=(aux1244 + aux1247 + aux1248))=tv=SATLiteral(8454))
-8454 -5332 -5341 -5346 0
8454 5346 0
8454 5341 0
8454 5342 0
8454 5344 0
8454 5332 0
8454 5332 5341 0
8454 5332 5342 0
8454 5332 5344 0
8454 5333 0
8454 5333 5341 0
8454 5333 5342 0
8454 5333 5344 0
c (((aux1250 + aux1253 + aux1254)<=1)=tv=SATLiteral(8455))
-8455 5371 0
-8455 5365 5370 0
-8455 5366 0
-8455 5368 0
-8455 5356 5370 0
-8455 5356 5365 0
-8455 5356 5366 0
-8455 5356 5368 0
-8455 5357 0
-8455 5357 5365 0
-8455 5357 5366 0
-8455 5357 5368 0
8455 -5357 -5365 -5370 0
8455 -5356 -5366 -5370 0
8455 -5356 -5365 -5371 0
c ((1<=(aux1250 + aux1253 + aux1254))=tv=SATLiteral(8456))
-8456 -5356 -5365 -5370 0
8456 5370 0
8456 5365 0
8456 5366 0
8456 5368 0
8456 5356 0
8456 5356 5365 0
8456 5356 5366 0
8456 5356 5368 0
8456 5357 0
8456 5357 5365 0
8456 5357 5366 0
8456 5357 5368 0
c (((aux1256 + aux1259 + aux1260)<=1)=tv=SATLiteral(8457))
-8457 5395 0
-8457 5389 5394 0
-8457 5390 0
-8457 5392 0
-8457 5380 5394 0
-8457 5380 5389 0
-8457 5380 5390 0
-8457 5380 5392 0
-8457 5381 0
-8457 5381 5389 0
-8457 5381 5390 0
-8457 5381 5392 0
8457 -5381 -5389 -5394 0
8457 -5380 -5390 -5394 0
8457 -5380 -5389 -5395 0
c ((1<=(aux1256 + aux1259 + aux1260))=tv=SATLiteral(8458))
-8458 -5380 -5389 -5394 0
8458 5394 0
8458 5389 0
8458 5390 0
8458 5392 0
8458 5380 0
8458 5380 5389 0
8458 5380 5390 0
8458 5380 5392 0
8458 5381 0
8458 5381 5389 0
8458 5381 5390 0
8458 5381 5392 0
c (((aux1262 + aux1265 + aux1266)<=1)=tv=SATLiteral(8459))
-8459 5419 0
-8459 5413 5418 0
-8459 5414 0
-8459 5416 0
-8459 5404 5418 0
-8459 5404 5413 0
-8459 5404 5414 0
-8459 5404 5416 0
-8459 5405 0
-8459 5405 5413 0
-8459 5405 5414 0
-8459 5405 5416 0
8459 -5405 -5413 -5418 0
8459 -5404 -5414 -5418 0
8459 -5404 -5413 -5419 0
c ((1<=(aux1262 + aux1265 + aux1266))=tv=SATLiteral(8460))
-8460 -5404 -5413 -5418 0
8460 5418 0
8460 5413 0
8460 5414 0
8460 5416 0
8460 5404 0
8460 5404 5413 0
8460 5404 5414 0
8460 5404 5416 0
8460 5405 0
8460 5405 5413 0
8460 5405 5414 0
8460 5405 5416 0
c (((aux1268 + aux1271 + aux1272)<=1)=tv=SATLiteral(8461))
-8461 5443 0
-8461 5437 5442 0
-8461 5438 0
-8461 5440 0
-8461 5428 5442 0
-8461 5428 5437 0
-8461 5428 5438 0
-8461 5428 5440 0
-8461 5429 0
-8461 5429 5437 0
-8461 5429 5438 0
-8461 5429 5440 0
8461 -5429 -5437 -5442 0
8461 -5428 -5438 -5442 0
8461 -5428 -5437 -5443 0
c ((1<=(aux1268 + aux1271 + aux1272))=tv=SATLiteral(8462))
-8462 -5428 -5437 -5442 0
8462 5442 0
8462 5437 0
8462 5438 0
8462 5440 0
8462 5428 0
8462 5428 5437 0
8462 5428 5438 0
8462 5428 5440 0
8462 5429 0
8462 5429 5437 0
8462 5429 5438 0
8462 5429 5440 0
c (((aux1274 + aux1277 + aux1278)<=1)=tv=SATLiteral(8463))
-8463 5467 0
-8463 5461 5466 0
-8463 5462 0
-8463 5464 0
-8463 5452 5466 0
-8463 5452 5461 0
-8463 5452 5462 0
-8463 5452 5464 0
-8463 5453 0
-8463 5453 5461 0
-8463 5453 5462 0
-8463 5453 5464 0
8463 -5453 -5461 -5466 0
8463 -5452 -5462 -5466 0
8463 -5452 -5461 -5467 0
c ((1<=(aux1274 + aux1277 + aux1278))=tv=SATLiteral(8464))
-8464 -5452 -5461 -5466 0
8464 5466 0
8464 5461 0
8464 5462 0
8464 5464 0
8464 5452 0
8464 5452 5461 0
8464 5452 5462 0
8464 5452 5464 0
8464 5453 0
8464 5453 5461 0
8464 5453 5462 0
8464 5453 5464 0
c (((aux1280 + aux1283 + aux1284)<=1)=tv=SATLiteral(8465))
-8465 5491 0
-8465 5485 5490 0
-8465 5486 0
-8465 5488 0
-8465 5476 5490 0
-8465 5476 5485 0
-8465 5476 5486 0
-8465 5476 5488 0
-8465 5477 0
-8465 5477 5485 0
-8465 5477 5486 0
-8465 5477 5488 0
8465 -5477 -5485 -5490 0
8465 -5476 -5486 -5490 0
8465 -5476 -5485 -5491 0
c ((1<=(aux1280 + aux1283 + aux1284))=tv=SATLiteral(8466))
-8466 -5476 -5485 -5490 0
8466 5490 0
8466 5485 0
8466 5486 0
8466 5488 0
8466 5476 0
8466 5476 5485 0
8466 5476 5486 0
8466 5476 5488 0
8466 5477 0
8466 5477 5485 0
8466 5477 5486 0
8466 5477 5488 0
c (((aux1286 + aux1289 + aux1290)<=1)=tv=SATLiteral(8467))
-8467 5515 0
-8467 5509 5514 0
-8467 5510 0
-8467 5512 0
-8467 5500 5514 0
-8467 5500 5509 0
-8467 5500 5510 0
-8467 5500 5512 0
-8467 5501 0
-8467 5501 5509 0
-8467 5501 5510 0
-8467 5501 5512 0
8467 -5501 -5509 -5514 0
8467 -5500 -5510 -5514 0
8467 -5500 -5509 -5515 0
c ((1<=(aux1286 + aux1289 + aux1290))=tv=SATLiteral(8468))
-8468 -5500 -5509 -5514 0
8468 5514 0
8468 5509 0
8468 5510 0
8468 5512 0
8468 5500 0
8468 5500 5509 0
8468 5500 5510 0
8468 5500 5512 0
8468 5501 0
8468 5501 5509 0
8468 5501 5510 0
8468 5501 5512 0
c (((aux1292 + aux1295 + aux1296)<=1)=tv=SATLiteral(8469))
-8469 5539 0
-8469 5533 5538 0
-8469 5534 0
-8469 5536 0
-8469 5524 5538 0
-8469 5524 5533 0
-8469 5524 5534 0
-8469 5524 5536 0
-8469 5525 0
-8469 5525 5533 0
-8469 5525 5534 0
-8469 5525 5536 0
8469 -5525 -5533 -5538 0
8469 -5524 -5534 -5538 0
8469 -5524 -5533 -5539 0
c ((1<=(aux1292 + aux1295 + aux1296))=tv=SATLiteral(8470))
-8470 -5524 -5533 -5538 0
8470 5538 0
8470 5533 0
8470 5534 0
8470 5536 0
8470 5524 0
8470 5524 5533 0
8470 5524 5534 0
8470 5524 5536 0
8470 5525 0
8470 5525 5533 0
8470 5525 5534 0
8470 5525 5536 0
c (((aux1298 + aux1301 + aux1302)<=1)=tv=SATLiteral(8471))
-8471 5563 0
-8471 5557 5562 0
-8471 5558 0
-8471 5560 0
-8471 5548 5562 0
-8471 5548 5557 0
-8471 5548 5558 0
-8471 5548 5560 0
-8471 5549 0
-8471 5549 5557 0
-8471 5549 5558 0
-8471 5549 5560 0
8471 -5549 -5557 -5562 0
8471 -5548 -5558 -5562 0
8471 -5548 -5557 -5563 0
c ((1<=(aux1298 + aux1301 + aux1302))=tv=SATLiteral(8472))
-8472 -5548 -5557 -5562 0
8472 5562 0
8472 5557 0
8472 5558 0
8472 5560 0
8472 5548 0
8472 5548 5557 0
8472 5548 5558 0
8472 5548 5560 0
8472 5549 0
8472 5549 5557 0
8472 5549 5558 0
8472 5549 5560 0
c (((aux1304 + aux1307 + aux1308)<=1)=tv=SATLiteral(8473))
-8473 5587 0
-8473 5581 5586 0
-8473 5582 0
-8473 5584 0
-8473 5572 5586 0
-8473 5572 5581 0
-8473 5572 5582 0
-8473 5572 5584 0
-8473 5573 0
-8473 5573 5581 0
-8473 5573 5582 0
-8473 5573 5584 0
8473 -5573 -5581 -5586 0
8473 -5572 -5582 -5586 0
8473 -5572 -5581 -5587 0
c ((1<=(aux1304 + aux1307 + aux1308))=tv=SATLiteral(8474))
-8474 -5572 -5581 -5586 0
8474 5586 0
8474 5581 0
8474 5582 0
8474 5584 0
8474 5572 0
8474 5572 5581 0
8474 5572 5582 0
8474 5572 5584 0
8474 5573 0
8474 5573 5581 0
8474 5573 5582 0
8474 5573 5584 0
c (((aux1310 + aux1313 + aux1314)<=1)=tv=SATLiteral(8475))
-8475 5611 0
-8475 5605 5610 0
-8475 5606 0
-8475 5608 0
-8475 5596 5610 0
-8475 5596 5605 0
-8475 5596 5606 0
-8475 5596 5608 0
-8475 5597 0
-8475 5597 5605 0
-8475 5597 5606 0
-8475 5597 5608 0
8475 -5597 -5605 -5610 0
8475 -5596 -5606 -5610 0
8475 -5596 -5605 -5611 0
c ((1<=(aux1310 + aux1313 + aux1314))=tv=SATLiteral(8476))
-8476 -5596 -5605 -5610 0
8476 5610 0
8476 5605 0
8476 5606 0
8476 5608 0
8476 5596 0
8476 5596 5605 0
8476 5596 5606 0
8476 5596 5608 0
8476 5597 0
8476 5597 5605 0
8476 5597 5606 0
8476 5597 5608 0
c (((aux1316 + aux1319 + aux1320)<=1)=tv=SATLiteral(8477))
-8477 5635 0
-8477 5629 5634 0
-8477 5630 0
-8477 5632 0
-8477 5620 5634 0
-8477 5620 5629 0
-8477 5620 5630 0
-8477 5620 5632 0
-8477 5621 0
-8477 5621 5629 0
-8477 5621 5630 0
-8477 5621 5632 0
8477 -5621 -5629 -5634 0
8477 -5620 -5630 -5634 0
8477 -5620 -5629 -5635 0
c ((1<=(aux1316 + aux1319 + aux1320))=tv=SATLiteral(8478))
-8478 -5620 -5629 -5634 0
8478 5634 0
8478 5629 0
8478 5630 0
8478 5632 0
8478 5620 0
8478 5620 5629 0
8478 5620 5630 0
8478 5620 5632 0
8478 5621 0
8478 5621 5629 0
8478 5621 5630 0
8478 5621 5632 0
c (((aux1322 + aux1325 + aux1326)<=1)=tv=SATLiteral(8479))
-8479 5659 0
-8479 5653 5658 0
-8479 5654 0
-8479 5656 0
-8479 5644 5658 0
-8479 5644 5653 0
-8479 5644 5654 0
-8479 5644 5656 0
-8479 5645 0
-8479 5645 5653 0
-8479 5645 5654 0
-8479 5645 5656 0
8479 -5645 -5653 -5658 0
8479 -5644 -5654 -5658 0
8479 -5644 -5653 -5659 0
c ((1<=(aux1322 + aux1325 + aux1326))=tv=SATLiteral(8480))
-8480 -5644 -5653 -5658 0
8480 5658 0
8480 5653 0
8480 5654 0
8480 5656 0
8480 5644 0
8480 5644 5653 0
8480 5644 5654 0
8480 5644 5656 0
8480 5645 0
8480 5645 5653 0
8480 5645 5654 0
8480 5645 5656 0
c (((aux1328 + aux1331 + aux1332)<=1)=tv=SATLiteral(8481))
-8481 5683 0
-8481 5677 5682 0
-8481 5678 0
-8481 5680 0
-8481 5668 5682 0
-8481 5668 5677 0
-8481 5668 5678 0
-8481 5668 5680 0
-8481 5669 0
-8481 5669 5677 0
-8481 5669 5678 0
-8481 5669 5680 0
8481 -5669 -5677 -5682 0
8481 -5668 -5678 -5682 0
8481 -5668 -5677 -5683 0
c ((1<=(aux1328 + aux1331 + aux1332))=tv=SATLiteral(8482))
-8482 -5668 -5677 -5682 0
8482 5682 0
8482 5677 0
8482 5678 0
8482 5680 0
8482 5668 0
8482 5668 5677 0
8482 5668 5678 0
8482 5668 5680 0
8482 5669 0
8482 5669 5677 0
8482 5669 5678 0
8482 5669 5680 0
c (((aux1334 + aux1337 + aux1338)<=1)=tv=SATLiteral(8483))
-8483 5707 0
-8483 5701 5706 0
-8483 5702 0
-8483 5704 0
-8483 5692 5706 0
-8483 5692 5701 0
-8483 5692 5702 0
-8483 5692 5704 0
-8483 5693 0
-8483 5693 5701 0
-8483 5693 5702 0
-8483 5693 5704 0
8483 -5693 -5701 -5706 0
8483 -5692 -5702 -5706 0
8483 -5692 -5701 -5707 0
c ((1<=(aux1334 + aux1337 + aux1338))=tv=SATLiteral(8484))
-8484 -5692 -5701 -5706 0
8484 5706 0
8484 5701 0
8484 5702 0
8484 5704 0
8484 5692 0
8484 5692 5701 0
8484 5692 5702 0
8484 5692 5704 0
8484 5693 0
8484 5693 5701 0
8484 5693 5702 0
8484 5693 5704 0
c (((aux1340 + aux1343 + aux1344)<=1)=tv=SATLiteral(8485))
-8485 5731 0
-8485 5725 5730 0
-8485 5726 0
-8485 5728 0
-8485 5716 5730 0
-8485 5716 5725 0
-8485 5716 5726 0
-8485 5716 5728 0
-8485 5717 0
-8485 5717 5725 0
-8485 5717 5726 0
-8485 5717 5728 0
8485 -5717 -5725 -5730 0
8485 -5716 -5726 -5730 0
8485 -5716 -5725 -5731 0
c ((1<=(aux1340 + aux1343 + aux1344))=tv=SATLiteral(8486))
-8486 -5716 -5725 -5730 0
8486 5730 0
8486 5725 0
8486 5726 0
8486 5728 0
8486 5716 0
8486 5716 5725 0
8486 5716 5726 0
8486 5716 5728 0
8486 5717 0
8486 5717 5725 0
8486 5717 5726 0
8486 5717 5728 0
c (((aux1346 + aux1349 + aux1350)<=1)=tv=SATLiteral(8487))
-8487 5755 0
-8487 5749 5754 0
-8487 5750 0
-8487 5752 0
-8487 5740 5754 0
-8487 5740 5749 0
-8487 5740 5750 0
-8487 5740 5752 0
-8487 5741 0
-8487 5741 5749 0
-8487 5741 5750 0
-8487 5741 5752 0
8487 -5741 -5749 -5754 0
8487 -5740 -5750 -5754 0
8487 -5740 -5749 -5755 0
c ((1<=(aux1346 + aux1349 + aux1350))=tv=SATLiteral(8488))
-8488 -5740 -5749 -5754 0
8488 5754 0
8488 5749 0
8488 5750 0
8488 5752 0
8488 5740 0
8488 5740 5749 0
8488 5740 5750 0
8488 5740 5752 0
8488 5741 0
8488 5741 5749 0
8488 5741 5750 0
8488 5741 5752 0
c (((aux1352 + aux1355 + aux1356)<=1)=tv=SATLiteral(8489))
-8489 5779 0
-8489 5773 5778 0
-8489 5774 0
-8489 5776 0
-8489 5764 5778 0
-8489 5764 5773 0
-8489 5764 5774 0
-8489 5764 5776 0
-8489 5765 0
-8489 5765 5773 0
-8489 5765 5774 0
-8489 5765 5776 0
8489 -5765 -5773 -5778 0
8489 -5764 -5774 -5778 0
8489 -5764 -5773 -5779 0
c ((1<=(aux1352 + aux1355 + aux1356))=tv=SATLiteral(8490))
-8490 -5764 -5773 -5778 0
8490 5778 0
8490 5773 0
8490 5774 0
8490 5776 0
8490 5764 0
8490 5764 5773 0
8490 5764 5774 0
8490 5764 5776 0
8490 5765 0
8490 5765 5773 0
8490 5765 5774 0
8490 5765 5776 0
c (((aux1358 + aux1361 + aux1362)<=1)=tv=SATLiteral(8491))
-8491 5803 0
-8491 5797 5802 0
-8491 5798 0
-8491 5800 0
-8491 5788 5802 0
-8491 5788 5797 0
-8491 5788 5798 0
-8491 5788 5800 0
-8491 5789 0
-8491 5789 5797 0
-8491 5789 5798 0
-8491 5789 5800 0
8491 -5789 -5797 -5802 0
8491 -5788 -5798 -5802 0
8491 -5788 -5797 -5803 0
c ((1<=(aux1358 + aux1361 + aux1362))=tv=SATLiteral(8492))
-8492 -5788 -5797 -5802 0
8492 5802 0
8492 5797 0
8492 5798 0
8492 5800 0
8492 5788 0
8492 5788 5797 0
8492 5788 5798 0
8492 5788 5800 0
8492 5789 0
8492 5789 5797 0
8492 5789 5798 0
8492 5789 5800 0
c (((aux1364 + aux1367 + aux1368)<=1)=tv=SATLiteral(8493))
-8493 5827 0
-8493 5821 5826 0
-8493 5822 0
-8493 5824 0
-8493 5812 5826 0
-8493 5812 5821 0
-8493 5812 5822 0
-8493 5812 5824 0
-8493 5813 0
-8493 5813 5821 0
-8493 5813 5822 0
-8493 5813 5824 0
8493 -5813 -5821 -5826 0
8493 -5812 -5822 -5826 0
8493 -5812 -5821 -5827 0
c ((1<=(aux1364 + aux1367 + aux1368))=tv=SATLiteral(8494))
-8494 -5812 -5821 -5826 0
8494 5826 0
8494 5821 0
8494 5822 0
8494 5824 0
8494 5812 0
8494 5812 5821 0
8494 5812 5822 0
8494 5812 5824 0
8494 5813 0
8494 5813 5821 0
8494 5813 5822 0
8494 5813 5824 0
c (((aux1370 + aux1373 + aux1374)<=1)=tv=SATLiteral(8495))
-8495 5851 0
-8495 5845 5850 0
-8495 5846 0
-8495 5848 0
-8495 5836 5850 0
-8495 5836 5845 0
-8495 5836 5846 0
-8495 5836 5848 0
-8495 5837 0
-8495 5837 5845 0
-8495 5837 5846 0
-8495 5837 5848 0
8495 -5837 -5845 -5850 0
8495 -5836 -5846 -5850 0
8495 -5836 -5845 -5851 0
c ((1<=(aux1370 + aux1373 + aux1374))=tv=SATLiteral(8496))
-8496 -5836 -5845 -5850 0
8496 5850 0
8496 5845 0
8496 5846 0
8496 5848 0
8496 5836 0
8496 5836 5845 0
8496 5836 5846 0
8496 5836 5848 0
8496 5837 0
8496 5837 5845 0
8496 5837 5846 0
8496 5837 5848 0
c (((aux1376 + aux1379 + aux1380)<=1)=tv=SATLiteral(8497))
-8497 5875 0
-8497 5869 5874 0
-8497 5870 0
-8497 5872 0
-8497 5860 5874 0
-8497 5860 5869 0
-8497 5860 5870 0
-8497 5860 5872 0
-8497 5861 0
-8497 5861 5869 0
-8497 5861 5870 0
-8497 5861 5872 0
8497 -5861 -5869 -5874 0
8497 -5860 -5870 -5874 0
8497 -5860 -5869 -5875 0
c ((1<=(aux1376 + aux1379 + aux1380))=tv=SATLiteral(8498))
-8498 -5860 -5869 -5874 0
8498 5874 0
8498 5869 0
8498 5870 0
8498 5872 0
8498 5860 0
8498 5860 5869 0
8498 5860 5870 0
8498 5860 5872 0
8498 5861 0
8498 5861 5869 0
8498 5861 5870 0
8498 5861 5872 0
c (((aux1382 + aux1385 + aux1386)<=1)=tv=SATLiteral(8499))
-8499 5899 0
-8499 5893 5898 0
-8499 5894 0
-8499 5896 0
-8499 5884 5898 0
-8499 5884 5893 0
-8499 5884 5894 0
-8499 5884 5896 0
-8499 5885 0
-8499 5885 5893 0
-8499 5885 5894 0
-8499 5885 5896 0
8499 -5885 -5893 -5898 0
8499 -5884 -5894 -5898 0
8499 -5884 -5893 -5899 0
c ((1<=(aux1382 + aux1385 + aux1386))=tv=SATLiteral(8500))
-8500 -5884 -5893 -5898 0
8500 5898 0
8500 5893 0
8500 5894 0
8500 5896 0
8500 5884 0
8500 5884 5893 0
8500 5884 5894 0
8500 5884 5896 0
8500 5885 0
8500 5885 5893 0
8500 5885 5894 0
8500 5885 5896 0
c (((aux1388 + aux1391 + aux1392)<=1)=tv=SATLiteral(8501))
-8501 5923 0
-8501 5917 5922 0
-8501 5918 0
-8501 5920 0
-8501 5908 5922 0
-8501 5908 5917 0
-8501 5908 5918 0
-8501 5908 5920 0
-8501 5909 0
-8501 5909 5917 0
-8501 5909 5918 0
-8501 5909 5920 0
8501 -5909 -5917 -5922 0
8501 -5908 -5918 -5922 0
8501 -5908 -5917 -5923 0
c ((1<=(aux1388 + aux1391 + aux1392))=tv=SATLiteral(8502))
-8502 -5908 -5917 -5922 0
8502 5922 0
8502 5917 0
8502 5918 0
8502 5920 0
8502 5908 0
8502 5908 5917 0
8502 5908 5918 0
8502 5908 5920 0
8502 5909 0
8502 5909 5917 0
8502 5909 5918 0
8502 5909 5920 0
c (((aux1394 + aux1397 + aux1398)<=1)=tv=SATLiteral(8503))
-8503 5947 0
-8503 5941 5946 0
-8503 5942 0
-8503 5944 0
-8503 5932 5946 0
-8503 5932 5941 0
-8503 5932 5942 0
-8503 5932 5944 0
-8503 5933 0
-8503 5933 5941 0
-8503 5933 5942 0
-8503 5933 5944 0
8503 -5933 -5941 -5946 0
8503 -5932 -5942 -5946 0
8503 -5932 -5941 -5947 0
c ((1<=(aux1394 + aux1397 + aux1398))=tv=SATLiteral(8504))
-8504 -5932 -5941 -5946 0
8504 5946 0
8504 5941 0
8504 5942 0
8504 5944 0
8504 5932 0
8504 5932 5941 0
8504 5932 5942 0
8504 5932 5944 0
8504 5933 0
8504 5933 5941 0
8504 5933 5942 0
8504 5933 5944 0
c (((aux1400 + aux1403 + aux1404)<=1)=tv=SATLiteral(8505))
-8505 5971 0
-8505 5965 5970 0
-8505 5966 0
-8505 5968 0
-8505 5956 5970 0
-8505 5956 5965 0
-8505 5956 5966 0
-8505 5956 5968 0
-8505 5957 0
-8505 5957 5965 0
-8505 5957 5966 0
-8505 5957 5968 0
8505 -5957 -5965 -5970 0
8505 -5956 -5966 -5970 0
8505 -5956 -5965 -5971 0
c ((1<=(aux1400 + aux1403 + aux1404))=tv=SATLiteral(8506))
-8506 -5956 -5965 -5970 0
8506 5970 0
8506 5965 0
8506 5966 0
8506 5968 0
8506 5956 0
8506 5956 5965 0
8506 5956 5966 0
8506 5956 5968 0
8506 5957 0
8506 5957 5965 0
8506 5957 5966 0
8506 5957 5968 0
c (((aux1406 + aux1409 + aux1410)<=1)=tv=SATLiteral(8507))
-8507 5995 0
-8507 5989 5994 0
-8507 5990 0
-8507 5992 0
-8507 5980 5994 0
-8507 5980 5989 0
-8507 5980 5990 0
-8507 5980 5992 0
-8507 5981 0
-8507 5981 5989 0
-8507 5981 5990 0
-8507 5981 5992 0
8507 -5981 -5989 -5994 0
8507 -5980 -5990 -5994 0
8507 -5980 -5989 -5995 0
c ((1<=(aux1406 + aux1409 + aux1410))=tv=SATLiteral(8508))
-8508 -5980 -5989 -5994 0
8508 5994 0
8508 5989 0
8508 5990 0
8508 5992 0
8508 5980 0
8508 5980 5989 0
8508 5980 5990 0
8508 5980 5992 0
8508 5981 0
8508 5981 5989 0
8508 5981 5990 0
8508 5981 5992 0
c (((aux1412 + aux1415 + aux1416)<=1)=tv=SATLiteral(8509))
-8509 6019 0
-8509 6013 6018 0
-8509 6014 0
-8509 6016 0
-8509 6004 6018 0
-8509 6004 6013 0
-8509 6004 6014 0
-8509 6004 6016 0
-8509 6005 0
-8509 6005 6013 0
-8509 6005 6014 0
-8509 6005 6016 0
8509 -6005 -6013 -6018 0
8509 -6004 -6014 -6018 0
8509 -6004 -6013 -6019 0
c ((1<=(aux1412 + aux1415 + aux1416))=tv=SATLiteral(8510))
-8510 -6004 -6013 -6018 0
8510 6018 0
8510 6013 0
8510 6014 0
8510 6016 0
8510 6004 0
8510 6004 6013 0
8510 6004 6014 0
8510 6004 6016 0
8510 6005 0
8510 6005 6013 0
8510 6005 6014 0
8510 6005 6016 0
c (((aux1418 + aux1421 + aux1422)<=1)=tv=SATLiteral(8511))
-8511 6043 0
-8511 6037 6042 0
-8511 6038 0
-8511 6040 0
-8511 6028 6042 0
-8511 6028 6037 0
-8511 6028 6038 0
-8511 6028 6040 0
-8511 6029 0
-8511 6029 6037 0
-8511 6029 6038 0
-8511 6029 6040 0
8511 -6029 -6037 -6042 0
8511 -6028 -6038 -6042 0
8511 -6028 -6037 -6043 0
c ((1<=(aux1418 + aux1421 + aux1422))=tv=SATLiteral(8512))
-8512 -6028 -6037 -6042 0
8512 6042 0
8512 6037 0
8512 6038 0
8512 6040 0
8512 6028 0
8512 6028 6037 0
8512 6028 6038 0
8512 6028 6040 0
8512 6029 0
8512 6029 6037 0
8512 6029 6038 0
8512 6029 6040 0
c (((aux1424 + aux1427 + aux1428)<=1)=tv=SATLiteral(8513))
-8513 6067 0
-8513 6061 6066 0
-8513 6062 0
-8513 6064 0
-8513 6052 6066 0
-8513 6052 6061 0
-8513 6052 6062 0
-8513 6052 6064 0
-8513 6053 0
-8513 6053 6061 0
-8513 6053 6062 0
-8513 6053 6064 0
8513 -6053 -6061 -6066 0
8513 -6052 -6062 -6066 0
8513 -6052 -6061 -6067 0
c ((1<=(aux1424 + aux1427 + aux1428))=tv=SATLiteral(8514))
-8514 -6052 -6061 -6066 0
8514 6066 0
8514 6061 0
8514 6062 0
8514 6064 0
8514 6052 0
8514 6052 6061 0
8514 6052 6062 0
8514 6052 6064 0
8514 6053 0
8514 6053 6061 0
8514 6053 6062 0
8514 6053 6064 0
c (((aux1430 + aux1433 + aux1434)<=1)=tv=SATLiteral(8515))
-8515 6091 0
-8515 6085 6090 0
-8515 6086 0
-8515 6088 0
-8515 6076 6090 0
-8515 6076 6085 0
-8515 6076 6086 0
-8515 6076 6088 0
-8515 6077 0
-8515 6077 6085 0
-8515 6077 6086 0
-8515 6077 6088 0
8515 -6077 -6085 -6090 0
8515 -6076 -6086 -6090 0
8515 -6076 -6085 -6091 0
c ((1<=(aux1430 + aux1433 + aux1434))=tv=SATLiteral(8516))
-8516 -6076 -6085 -6090 0
8516 6090 0
8516 6085 0
8516 6086 0
8516 6088 0
8516 6076 0
8516 6076 6085 0
8516 6076 6086 0
8516 6076 6088 0
8516 6077 0
8516 6077 6085 0
8516 6077 6086 0
8516 6077 6088 0
c (((aux1436 + aux1439 + aux1440)<=1)=tv=SATLiteral(8517))
-8517 6115 0
-8517 6109 6114 0
-8517 6110 0
-8517 6112 0
-8517 6100 6114 0
-8517 6100 6109 0
-8517 6100 6110 0
-8517 6100 6112 0
-8517 6101 0
-8517 6101 6109 0
-8517 6101 6110 0
-8517 6101 6112 0
8517 -6101 -6109 -6114 0
8517 -6100 -6110 -6114 0
8517 -6100 -6109 -6115 0
c ((1<=(aux1436 + aux1439 + aux1440))=tv=SATLiteral(8518))
-8518 -6100 -6109 -6114 0
8518 6114 0
8518 6109 0
8518 6110 0
8518 6112 0
8518 6100 0
8518 6100 6109 0
8518 6100 6110 0
8518 6100 6112 0
8518 6101 0
8518 6101 6109 0
8518 6101 6110 0
8518 6101 6112 0
c (((aux1442 + aux1445 + aux1446)<=1)=tv=SATLiteral(8519))
-8519 6139 0
-8519 6133 6138 0
-8519 6134 0
-8519 6136 0
-8519 6124 6138 0
-8519 6124 6133 0
-8519 6124 6134 0
-8519 6124 6136 0
-8519 6125 0
-8519 6125 6133 0
-8519 6125 6134 0
-8519 6125 6136 0
8519 -6125 -6133 -6138 0
8519 -6124 -6134 -6138 0
8519 -6124 -6133 -6139 0
c ((1<=(aux1442 + aux1445 + aux1446))=tv=SATLiteral(8520))
-8520 -6124 -6133 -6138 0
8520 6138 0
8520 6133 0
8520 6134 0
8520 6136 0
8520 6124 0
8520 6124 6133 0
8520 6124 6134 0
8520 6124 6136 0
8520 6125 0
8520 6125 6133 0
8520 6125 6134 0
8520 6125 6136 0
c (((aux1448 + aux1451 + aux1452)<=1)=tv=SATLiteral(8521))
-8521 6163 0
-8521 6157 6162 0
-8521 6158 0
-8521 6160 0
-8521 6148 6162 0
-8521 6148 6157 0
-8521 6148 6158 0
-8521 6148 6160 0
-8521 6149 0
-8521 6149 6157 0
-8521 6149 6158 0
-8521 6149 6160 0
8521 -6149 -6157 -6162 0
8521 -6148 -6158 -6162 0
8521 -6148 -6157 -6163 0
c ((1<=(aux1448 + aux1451 + aux1452))=tv=SATLiteral(8522))
-8522 -6148 -6157 -6162 0
8522 6162 0
8522 6157 0
8522 6158 0
8522 6160 0
8522 6148 0
8522 6148 6157 0
8522 6148 6158 0
8522 6148 6160 0
8522 6149 0
8522 6149 6157 0
8522 6149 6158 0
8522 6149 6160 0
c (((aux1454 + aux1457 + aux1458)<=1)=tv=SATLiteral(8523))
-8523 6187 0
-8523 6181 6186 0
-8523 6182 0
-8523 6184 0
-8523 6172 6186 0
-8523 6172 6181 0
-8523 6172 6182 0
-8523 6172 6184 0
-8523 6173 0
-8523 6173 6181 0
-8523 6173 6182 0
-8523 6173 6184 0
8523 -6173 -6181 -6186 0
8523 -6172 -6182 -6186 0
8523 -6172 -6181 -6187 0
c ((1<=(aux1454 + aux1457 + aux1458))=tv=SATLiteral(8524))
-8524 -6172 -6181 -6186 0
8524 6186 0
8524 6181 0
8524 6182 0
8524 6184 0
8524 6172 0
8524 6172 6181 0
8524 6172 6182 0
8524 6172 6184 0
8524 6173 0
8524 6173 6181 0
8524 6173 6182 0
8524 6173 6184 0
c (((aux1460 + aux1463 + aux1464)<=1)=tv=SATLiteral(8525))
-8525 6211 0
-8525 6205 6210 0
-8525 6206 0
-8525 6208 0
-8525 6196 6210 0
-8525 6196 6205 0
-8525 6196 6206 0
-8525 6196 6208 0
-8525 6197 0
-8525 6197 6205 0
-8525 6197 6206 0
-8525 6197 6208 0
8525 -6197 -6205 -6210 0
8525 -6196 -6206 -6210 0
8525 -6196 -6205 -6211 0
c ((1<=(aux1460 + aux1463 + aux1464))=tv=SATLiteral(8526))
-8526 -6196 -6205 -6210 0
8526 6210 0
8526 6205 0
8526 6206 0
8526 6208 0
8526 6196 0
8526 6196 6205 0
8526 6196 6206 0
8526 6196 6208 0
8526 6197 0
8526 6197 6205 0
8526 6197 6206 0
8526 6197 6208 0
c (((aux1466 + aux1469 + aux1470)<=1)=tv=SATLiteral(8527))
-8527 6235 0
-8527 6229 6234 0
-8527 6230 0
-8527 6232 0
-8527 6220 6234 0
-8527 6220 6229 0
-8527 6220 6230 0
-8527 6220 6232 0
-8527 6221 0
-8527 6221 6229 0
-8527 6221 6230 0
-8527 6221 6232 0
8527 -6221 -6229 -6234 0
8527 -6220 -6230 -6234 0
8527 -6220 -6229 -6235 0
c ((1<=(aux1466 + aux1469 + aux1470))=tv=SATLiteral(8528))
-8528 -6220 -6229 -6234 0
8528 6234 0
8528 6229 0
8528 6230 0
8528 6232 0
8528 6220 0
8528 6220 6229 0
8528 6220 6230 0
8528 6220 6232 0
8528 6221 0
8528 6221 6229 0
8528 6221 6230 0
8528 6221 6232 0
c (((aux1472 + aux1475 + aux1476)<=1)=tv=SATLiteral(8529))
-8529 6259 0
-8529 6253 6258 0
-8529 6254 0
-8529 6256 0
-8529 6244 6258 0
-8529 6244 6253 0
-8529 6244 6254 0
-8529 6244 6256 0
-8529 6245 0
-8529 6245 6253 0
-8529 6245 6254 0
-8529 6245 6256 0
8529 -6245 -6253 -6258 0
8529 -6244 -6254 -6258 0
8529 -6244 -6253 -6259 0
c ((1<=(aux1472 + aux1475 + aux1476))=tv=SATLiteral(8530))
-8530 -6244 -6253 -6258 0
8530 6258 0
8530 6253 0
8530 6254 0
8530 6256 0
8530 6244 0
8530 6244 6253 0
8530 6244 6254 0
8530 6244 6256 0
8530 6245 0
8530 6245 6253 0
8530 6245 6254 0
8530 6245 6256 0
c (((aux1478 + aux1481 + aux1482)<=1)=tv=SATLiteral(8531))
-8531 6283 0
-8531 6277 6282 0
-8531 6278 0
-8531 6280 0
-8531 6268 6282 0
-8531 6268 6277 0
-8531 6268 6278 0
-8531 6268 6280 0
-8531 6269 0
-8531 6269 6277 0
-8531 6269 6278 0
-8531 6269 6280 0
8531 -6269 -6277 -6282 0
8531 -6268 -6278 -6282 0
8531 -6268 -6277 -6283 0
c ((1<=(aux1478 + aux1481 + aux1482))=tv=SATLiteral(8532))
-8532 -6268 -6277 -6282 0
8532 6282 0
8532 6277 0
8532 6278 0
8532 6280 0
8532 6268 0
8532 6268 6277 0
8532 6268 6278 0
8532 6268 6280 0
8532 6269 0
8532 6269 6277 0
8532 6269 6278 0
8532 6269 6280 0
c (((aux1484 + aux1487 + aux1488)<=1)=tv=SATLiteral(8533))
-8533 6307 0
-8533 6301 6306 0
-8533 6302 0
-8533 6304 0
-8533 6292 6306 0
-8533 6292 6301 0
-8533 6292 6302 0
-8533 6292 6304 0
-8533 6293 0
-8533 6293 6301 0
-8533 6293 6302 0
-8533 6293 6304 0
8533 -6293 -6301 -6306 0
8533 -6292 -6302 -6306 0
8533 -6292 -6301 -6307 0
c ((1<=(aux1484 + aux1487 + aux1488))=tv=SATLiteral(8534))
-8534 -6292 -6301 -6306 0
8534 6306 0
8534 6301 0
8534 6302 0
8534 6304 0
8534 6292 0
8534 6292 6301 0
8534 6292 6302 0
8534 6292 6304 0
8534 6293 0
8534 6293 6301 0
8534 6293 6302 0
8534 6293 6304 0
c (((aux1490 + aux1493 + aux1494)<=1)=tv=SATLiteral(8535))
-8535 6331 0
-8535 6325 6330 0
-8535 6326 0
-8535 6328 0
-8535 6316 6330 0
-8535 6316 6325 0
-8535 6316 6326 0
-8535 6316 6328 0
-8535 6317 0
-8535 6317 6325 0
-8535 6317 6326 0
-8535 6317 6328 0
8535 -6317 -6325 -6330 0
8535 -6316 -6326 -6330 0
8535 -6316 -6325 -6331 0
c ((1<=(aux1490 + aux1493 + aux1494))=tv=SATLiteral(8536))
-8536 -6316 -6325 -6330 0
8536 6330 0
8536 6325 0
8536 6326 0
8536 6328 0
8536 6316 0
8536 6316 6325 0
8536 6316 6326 0
8536 6316 6328 0
8536 6317 0
8536 6317 6325 0
8536 6317 6326 0
8536 6317 6328 0
c (((aux1496 + aux1499 + aux1500)<=1)=tv=SATLiteral(8537))
-8537 6355 0
-8537 6349 6354 0
-8537 6350 0
-8537 6352 0
-8537 6340 6354 0
-8537 6340 6349 0
-8537 6340 6350 0
-8537 6340 6352 0
-8537 6341 0
-8537 6341 6349 0
-8537 6341 6350 0
-8537 6341 6352 0
8537 -6341 -6349 -6354 0
8537 -6340 -6350 -6354 0
8537 -6340 -6349 -6355 0
c ((1<=(aux1496 + aux1499 + aux1500))=tv=SATLiteral(8538))
-8538 -6340 -6349 -6354 0
8538 6354 0
8538 6349 0
8538 6350 0
8538 6352 0
8538 6340 0
8538 6340 6349 0
8538 6340 6350 0
8538 6340 6352 0
8538 6341 0
8538 6341 6349 0
8538 6341 6350 0
8538 6341 6352 0
c (((aux1502 + aux1505 + aux1506)<=1)=tv=SATLiteral(8539))
-8539 6379 0
-8539 6373 6378 0
-8539 6374 0
-8539 6376 0
-8539 6364 6378 0
-8539 6364 6373 0
-8539 6364 6374 0
-8539 6364 6376 0
-8539 6365 0
-8539 6365 6373 0
-8539 6365 6374 0
-8539 6365 6376 0
8539 -6365 -6373 -6378 0
8539 -6364 -6374 -6378 0
8539 -6364 -6373 -6379 0
c ((1<=(aux1502 + aux1505 + aux1506))=tv=SATLiteral(8540))
-8540 -6364 -6373 -6378 0
8540 6378 0
8540 6373 0
8540 6374 0
8540 6376 0
8540 6364 0
8540 6364 6373 0
8540 6364 6374 0
8540 6364 6376 0
8540 6365 0
8540 6365 6373 0
8540 6365 6374 0
8540 6365 6376 0
c (((aux1508 + aux1511 + aux1512)<=1)=tv=SATLiteral(8541))
-8541 6403 0
-8541 6397 6402 0
-8541 6398 0
-8541 6400 0
-8541 6388 6402 0
-8541 6388 6397 0
-8541 6388 6398 0
-8541 6388 6400 0
-8541 6389 0
-8541 6389 6397 0
-8541 6389 6398 0
-8541 6389 6400 0
8541 -6389 -6397 -6402 0
8541 -6388 -6398 -6402 0
8541 -6388 -6397 -6403 0
c ((1<=(aux1508 + aux1511 + aux1512))=tv=SATLiteral(8542))
-8542 -6388 -6397 -6402 0
8542 6402 0
8542 6397 0
8542 6398 0
8542 6400 0
8542 6388 0
8542 6388 6397 0
8542 6388 6398 0
8542 6388 6400 0
8542 6389 0
8542 6389 6397 0
8542 6389 6398 0
8542 6389 6400 0
c (((aux1514 + aux1517 + aux1518)<=1)=tv=SATLiteral(8543))
-8543 6427 0
-8543 6421 6426 0
-8543 6422 0
-8543 6424 0
-8543 6412 6426 0
-8543 6412 6421 0
-8543 6412 6422 0
-8543 6412 6424 0
-8543 6413 0
-8543 6413 6421 0
-8543 6413 6422 0
-8543 6413 6424 0
8543 -6413 -6421 -6426 0
8543 -6412 -6422 -6426 0
8543 -6412 -6421 -6427 0
c ((1<=(aux1514 + aux1517 + aux1518))=tv=SATLiteral(8544))
-8544 -6412 -6421 -6426 0
8544 6426 0
8544 6421 0
8544 6422 0
8544 6424 0
8544 6412 0
8544 6412 6421 0
8544 6412 6422 0
8544 6412 6424 0
8544 6413 0
8544 6413 6421 0
8544 6413 6422 0
8544 6413 6424 0
c (((aux1520 + aux1523 + aux1524)<=1)=tv=SATLiteral(8545))
-8545 6451 0
-8545 6445 6450 0
-8545 6446 0
-8545 6448 0
-8545 6436 6450 0
-8545 6436 6445 0
-8545 6436 6446 0
-8545 6436 6448 0
-8545 6437 0
-8545 6437 6445 0
-8545 6437 6446 0
-8545 6437 6448 0
8545 -6437 -6445 -6450 0
8545 -6436 -6446 -6450 0
8545 -6436 -6445 -6451 0
c ((1<=(aux1520 + aux1523 + aux1524))=tv=SATLiteral(8546))
-8546 -6436 -6445 -6450 0
8546 6450 0
8546 6445 0
8546 6446 0
8546 6448 0
8546 6436 0
8546 6436 6445 0
8546 6436 6446 0
8546 6436 6448 0
8546 6437 0
8546 6437 6445 0
8546 6437 6446 0
8546 6437 6448 0
c (((aux1526 + aux1529 + aux1530)<=1)=tv=SATLiteral(8547))
-8547 6475 0
-8547 6469 6474 0
-8547 6470 0
-8547 6472 0
-8547 6460 6474 0
-8547 6460 6469 0
-8547 6460 6470 0
-8547 6460 6472 0
-8547 6461 0
-8547 6461 6469 0
-8547 6461 6470 0
-8547 6461 6472 0
8547 -6461 -6469 -6474 0
8547 -6460 -6470 -6474 0
8547 -6460 -6469 -6475 0
c ((1<=(aux1526 + aux1529 + aux1530))=tv=SATLiteral(8548))
-8548 -6460 -6469 -6474 0
8548 6474 0
8548 6469 0
8548 6470 0
8548 6472 0
8548 6460 0
8548 6460 6469 0
8548 6460 6470 0
8548 6460 6472 0
8548 6461 0
8548 6461 6469 0
8548 6461 6470 0
8548 6461 6472 0
c (((aux1532 + aux1535 + aux1536)<=1)=tv=SATLiteral(8549))
-8549 6499 0
-8549 6493 6498 0
-8549 6494 0
-8549 6496 0
-8549 6484 6498 0
-8549 6484 6493 0
-8549 6484 6494 0
-8549 6484 6496 0
-8549 6485 0
-8549 6485 6493 0
-8549 6485 6494 0
-8549 6485 6496 0
8549 -6485 -6493 -6498 0
8549 -6484 -6494 -6498 0
8549 -6484 -6493 -6499 0
c ((1<=(aux1532 + aux1535 + aux1536))=tv=SATLiteral(8550))
-8550 -6484 -6493 -6498 0
8550 6498 0
8550 6493 0
8550 6494 0
8550 6496 0
8550 6484 0
8550 6484 6493 0
8550 6484 6494 0
8550 6484 6496 0
8550 6485 0
8550 6485 6493 0
8550 6485 6494 0
8550 6485 6496 0
c (((aux1538 + aux1541 + aux1542)<=1)=tv=SATLiteral(8551))
-8551 6523 0
-8551 6517 6522 0
-8551 6518 0
-8551 6520 0
-8551 6508 6522 0
-8551 6508 6517 0
-8551 6508 6518 0
-8551 6508 6520 0
-8551 6509 0
-8551 6509 6517 0
-8551 6509 6518 0
-8551 6509 6520 0
8551 -6509 -6517 -6522 0
8551 -6508 -6518 -6522 0
8551 -6508 -6517 -6523 0
c ((1<=(aux1538 + aux1541 + aux1542))=tv=SATLiteral(8552))
-8552 -6508 -6517 -6522 0
8552 6522 0
8552 6517 0
8552 6518 0
8552 6520 0
8552 6508 0
8552 6508 6517 0
8552 6508 6518 0
8552 6508 6520 0
8552 6509 0
8552 6509 6517 0
8552 6509 6518 0
8552 6509 6520 0
c (((aux1544 + aux1547 + aux1548)<=1)=tv=SATLiteral(8553))
-8553 6547 0
-8553 6541 6546 0
-8553 6542 0
-8553 6544 0
-8553 6532 6546 0
-8553 6532 6541 0
-8553 6532 6542 0
-8553 6532 6544 0
-8553 6533 0
-8553 6533 6541 0
-8553 6533 6542 0
-8553 6533 6544 0
8553 -6533 -6541 -6546 0
8553 -6532 -6542 -6546 0
8553 -6532 -6541 -6547 0
c ((1<=(aux1544 + aux1547 + aux1548))=tv=SATLiteral(8554))
-8554 -6532 -6541 -6546 0
8554 6546 0
8554 6541 0
8554 6542 0
8554 6544 0
8554 6532 0
8554 6532 6541 0
8554 6532 6542 0
8554 6532 6544 0
8554 6533 0
8554 6533 6541 0
8554 6533 6542 0
8554 6533 6544 0
c (((aux1550 + aux1553 + aux1554)<=1)=tv=SATLiteral(8555))
-8555 6571 0
-8555 6565 6570 0
-8555 6566 0
-8555 6568 0
-8555 6556 6570 0
-8555 6556 6565 0
-8555 6556 6566 0
-8555 6556 6568 0
-8555 6557 0
-8555 6557 6565 0
-8555 6557 6566 0
-8555 6557 6568 0
8555 -6557 -6565 -6570 0
8555 -6556 -6566 -6570 0
8555 -6556 -6565 -6571 0
c ((1<=(aux1550 + aux1553 + aux1554))=tv=SATLiteral(8556))
-8556 -6556 -6565 -6570 0
8556 6570 0
8556 6565 0
8556 6566 0
8556 6568 0
8556 6556 0
8556 6556 6565 0
8556 6556 6566 0
8556 6556 6568 0
8556 6557 0
8556 6557 6565 0
8556 6557 6566 0
8556 6557 6568 0
c (((aux1556 + aux1559 + aux1560)<=1)=tv=SATLiteral(8557))
-8557 6595 0
-8557 6589 6594 0
-8557 6590 0
-8557 6592 0
-8557 6580 6594 0
-8557 6580 6589 0
-8557 6580 6590 0
-8557 6580 6592 0
-8557 6581 0
-8557 6581 6589 0
-8557 6581 6590 0
-8557 6581 6592 0
8557 -6581 -6589 -6594 0
8557 -6580 -6590 -6594 0
8557 -6580 -6589 -6595 0
c ((1<=(aux1556 + aux1559 + aux1560))=tv=SATLiteral(8558))
-8558 -6580 -6589 -6594 0
8558 6594 0
8558 6589 0
8558 6590 0
8558 6592 0
8558 6580 0
8558 6580 6589 0
8558 6580 6590 0
8558 6580 6592 0
8558 6581 0
8558 6581 6589 0
8558 6581 6590 0
8558 6581 6592 0
c (((aux1562 + aux1565 + aux1566)<=1)=tv=SATLiteral(8559))
-8559 6619 0
-8559 6613 6618 0
-8559 6614 0
-8559 6616 0
-8559 6604 6618 0
-8559 6604 6613 0
-8559 6604 6614 0
-8559 6604 6616 0
-8559 6605 0
-8559 6605 6613 0
-8559 6605 6614 0
-8559 6605 6616 0
8559 -6605 -6613 -6618 0
8559 -6604 -6614 -6618 0
8559 -6604 -6613 -6619 0
c ((1<=(aux1562 + aux1565 + aux1566))=tv=SATLiteral(8560))
-8560 -6604 -6613 -6618 0
8560 6618 0
8560 6613 0
8560 6614 0
8560 6616 0
8560 6604 0
8560 6604 6613 0
8560 6604 6614 0
8560 6604 6616 0
8560 6605 0
8560 6605 6613 0
8560 6605 6614 0
8560 6605 6616 0
c (((aux1568 + aux1571 + aux1572)<=1)=tv=SATLiteral(8561))
-8561 6643 0
-8561 6637 6642 0
-8561 6638 0
-8561 6640 0
-8561 6628 6642 0
-8561 6628 6637 0
-8561 6628 6638 0
-8561 6628 6640 0
-8561 6629 0
-8561 6629 6637 0
-8561 6629 6638 0
-8561 6629 6640 0
8561 -6629 -6637 -6642 0
8561 -6628 -6638 -6642 0
8561 -6628 -6637 -6643 0
c ((1<=(aux1568 + aux1571 + aux1572))=tv=SATLiteral(8562))
-8562 -6628 -6637 -6642 0
8562 6642 0
8562 6637 0
8562 6638 0
8562 6640 0
8562 6628 0
8562 6628 6637 0
8562 6628 6638 0
8562 6628 6640 0
8562 6629 0
8562 6629 6637 0
8562 6629 6638 0
8562 6629 6640 0
c (((aux1574 + aux1577 + aux1578)<=1)=tv=SATLiteral(8563))
-8563 6667 0
-8563 6661 6666 0
-8563 6662 0
-8563 6664 0
-8563 6652 6666 0
-8563 6652 6661 0
-8563 6652 6662 0
-8563 6652 6664 0
-8563 6653 0
-8563 6653 6661 0
-8563 6653 6662 0
-8563 6653 6664 0
8563 -6653 -6661 -6666 0
8563 -6652 -6662 -6666 0
8563 -6652 -6661 -6667 0
c ((1<=(aux1574 + aux1577 + aux1578))=tv=SATLiteral(8564))
-8564 -6652 -6661 -6666 0
8564 6666 0
8564 6661 0
8564 6662 0
8564 6664 0
8564 6652 0
8564 6652 6661 0
8564 6652 6662 0
8564 6652 6664 0
8564 6653 0
8564 6653 6661 0
8564 6653 6662 0
8564 6653 6664 0
c (((aux1580 + aux1583 + aux1584)<=1)=tv=SATLiteral(8565))
-8565 6691 0
-8565 6685 6690 0
-8565 6686 0
-8565 6688 0
-8565 6676 6690 0
-8565 6676 6685 0
-8565 6676 6686 0
-8565 6676 6688 0
-8565 6677 0
-8565 6677 6685 0
-8565 6677 6686 0
-8565 6677 6688 0
8565 -6677 -6685 -6690 0
8565 -6676 -6686 -6690 0
8565 -6676 -6685 -6691 0
c ((1<=(aux1580 + aux1583 + aux1584))=tv=SATLiteral(8566))
-8566 -6676 -6685 -6690 0
8566 6690 0
8566 6685 0
8566 6686 0
8566 6688 0
8566 6676 0
8566 6676 6685 0
8566 6676 6686 0
8566 6676 6688 0
8566 6677 0
8566 6677 6685 0
8566 6677 6686 0
8566 6677 6688 0
c (((aux1586 + aux1589 + aux1590)<=1)=tv=SATLiteral(8567))
-8567 6715 0
-8567 6709 6714 0
-8567 6710 0
-8567 6712 0
-8567 6700 6714 0
-8567 6700 6709 0
-8567 6700 6710 0
-8567 6700 6712 0
-8567 6701 0
-8567 6701 6709 0
-8567 6701 6710 0
-8567 6701 6712 0
8567 -6701 -6709 -6714 0
8567 -6700 -6710 -6714 0
8567 -6700 -6709 -6715 0
c ((1<=(aux1586 + aux1589 + aux1590))=tv=SATLiteral(8568))
-8568 -6700 -6709 -6714 0
8568 6714 0
8568 6709 0
8568 6710 0
8568 6712 0
8568 6700 0
8568 6700 6709 0
8568 6700 6710 0
8568 6700 6712 0
8568 6701 0
8568 6701 6709 0
8568 6701 6710 0
8568 6701 6712 0
c (((aux1592 + aux1595 + aux1596)<=1)=tv=SATLiteral(8569))
-8569 6739 0
-8569 6733 6738 0
-8569 6734 0
-8569 6736 0
-8569 6724 6738 0
-8569 6724 6733 0
-8569 6724 6734 0
-8569 6724 6736 0
-8569 6725 0
-8569 6725 6733 0
-8569 6725 6734 0
-8569 6725 6736 0
8569 -6725 -6733 -6738 0
8569 -6724 -6734 -6738 0
8569 -6724 -6733 -6739 0
c ((1<=(aux1592 + aux1595 + aux1596))=tv=SATLiteral(8570))
-8570 -6724 -6733 -6738 0
8570 6738 0
8570 6733 0
8570 6734 0
8570 6736 0
8570 6724 0
8570 6724 6733 0
8570 6724 6734 0
8570 6724 6736 0
8570 6725 0
8570 6725 6733 0
8570 6725 6734 0
8570 6725 6736 0
c (((aux1598 + aux1601 + aux1602)<=1)=tv=SATLiteral(8571))
-8571 6763 0
-8571 6757 6762 0
-8571 6758 0
-8571 6760 0
-8571 6748 6762 0
-8571 6748 6757 0
-8571 6748 6758 0
-8571 6748 6760 0
-8571 6749 0
-8571 6749 6757 0
-8571 6749 6758 0
-8571 6749 6760 0
8571 -6749 -6757 -6762 0
8571 -6748 -6758 -6762 0
8571 -6748 -6757 -6763 0
c ((1<=(aux1598 + aux1601 + aux1602))=tv=SATLiteral(8572))
-8572 -6748 -6757 -6762 0
8572 6762 0
8572 6757 0
8572 6758 0
8572 6760 0
8572 6748 0
8572 6748 6757 0
8572 6748 6758 0
8572 6748 6760 0
8572 6749 0
8572 6749 6757 0
8572 6749 6758 0
8572 6749 6760 0
c (((aux1604 + aux1607 + aux1608)<=1)=tv=SATLiteral(8573))
-8573 6787 0
-8573 6781 6786 0
-8573 6782 0
-8573 6784 0
-8573 6772 6786 0
-8573 6772 6781 0
-8573 6772 6782 0
-8573 6772 6784 0
-8573 6773 0
-8573 6773 6781 0
-8573 6773 6782 0
-8573 6773 6784 0
8573 -6773 -6781 -6786 0
8573 -6772 -6782 -6786 0
8573 -6772 -6781 -6787 0
c ((1<=(aux1604 + aux1607 + aux1608))=tv=SATLiteral(8574))
-8574 -6772 -6781 -6786 0
8574 6786 0
8574 6781 0
8574 6782 0
8574 6784 0
8574 6772 0
8574 6772 6781 0
8574 6772 6782 0
8574 6772 6784 0
8574 6773 0
8574 6773 6781 0
8574 6773 6782 0
8574 6773 6784 0
c (((aux1610 + aux1613 + aux1614)<=1)=tv=SATLiteral(8575))
-8575 6811 0
-8575 6805 6810 0
-8575 6806 0
-8575 6808 0
-8575 6796 6810 0
-8575 6796 6805 0
-8575 6796 6806 0
-8575 6796 6808 0
-8575 6797 0
-8575 6797 6805 0
-8575 6797 6806 0
-8575 6797 6808 0
8575 -6797 -6805 -6810 0
8575 -6796 -6806 -6810 0
8575 -6796 -6805 -6811 0
c ((1<=(aux1610 + aux1613 + aux1614))=tv=SATLiteral(8576))
-8576 -6796 -6805 -6810 0
8576 6810 0
8576 6805 0
8576 6806 0
8576 6808 0
8576 6796 0
8576 6796 6805 0
8576 6796 6806 0
8576 6796 6808 0
8576 6797 0
8576 6797 6805 0
8576 6797 6806 0
8576 6797 6808 0
c (((aux1616 + aux1619 + aux1620)<=1)=tv=SATLiteral(8577))
-8577 6835 0
-8577 6829 6834 0
-8577 6830 0
-8577 6832 0
-8577 6820 6834 0
-8577 6820 6829 0
-8577 6820 6830 0
-8577 6820 6832 0
-8577 6821 0
-8577 6821 6829 0
-8577 6821 6830 0
-8577 6821 6832 0
8577 -6821 -6829 -6834 0
8577 -6820 -6830 -6834 0
8577 -6820 -6829 -6835 0
c ((1<=(aux1616 + aux1619 + aux1620))=tv=SATLiteral(8578))
-8578 -6820 -6829 -6834 0
8578 6834 0
8578 6829 0
8578 6830 0
8578 6832 0
8578 6820 0
8578 6820 6829 0
8578 6820 6830 0
8578 6820 6832 0
8578 6821 0
8578 6821 6829 0
8578 6821 6830 0
8578 6821 6832 0
c (((aux1622 + aux1625 + aux1626)<=1)=tv=SATLiteral(8579))
-8579 6859 0
-8579 6853 6858 0
-8579 6854 0
-8579 6856 0
-8579 6844 6858 0
-8579 6844 6853 0
-8579 6844 6854 0
-8579 6844 6856 0
-8579 6845 0
-8579 6845 6853 0
-8579 6845 6854 0
-8579 6845 6856 0
8579 -6845 -6853 -6858 0
8579 -6844 -6854 -6858 0
8579 -6844 -6853 -6859 0
c ((1<=(aux1622 + aux1625 + aux1626))=tv=SATLiteral(8580))
-8580 -6844 -6853 -6858 0
8580 6858 0
8580 6853 0
8580 6854 0
8580 6856 0
8580 6844 0
8580 6844 6853 0
8580 6844 6854 0
8580 6844 6856 0
8580 6845 0
8580 6845 6853 0
8580 6845 6854 0
8580 6845 6856 0
c (((aux1628 + aux1631 + aux1632)<=1)=tv=SATLiteral(8581))
-8581 6883 0
-8581 6877 6882 0
-8581 6878 0
-8581 6880 0
-8581 6868 6882 0
-8581 6868 6877 0
-8581 6868 6878 0
-8581 6868 6880 0
-8581 6869 0
-8581 6869 6877 0
-8581 6869 6878 0
-8581 6869 6880 0
8581 -6869 -6877 -6882 0
8581 -6868 -6878 -6882 0
8581 -6868 -6877 -6883 0
c ((1<=(aux1628 + aux1631 + aux1632))=tv=SATLiteral(8582))
-8582 -6868 -6877 -6882 0
8582 6882 0
8582 6877 0
8582 6878 0
8582 6880 0
8582 6868 0
8582 6868 6877 0
8582 6868 6878 0
8582 6868 6880 0
8582 6869 0
8582 6869 6877 0
8582 6869 6878 0
8582 6869 6880 0
c (((aux1634 + aux1637 + aux1638)<=1)=tv=SATLiteral(8583))
-8583 6907 0
-8583 6901 6906 0
-8583 6902 0
-8583 6904 0
-8583 6892 6906 0
-8583 6892 6901 0
-8583 6892 6902 0
-8583 6892 6904 0
-8583 6893 0
-8583 6893 6901 0
-8583 6893 6902 0
-8583 6893 6904 0
8583 -6893 -6901 -6906 0
8583 -6892 -6902 -6906 0
8583 -6892 -6901 -6907 0
c ((1<=(aux1634 + aux1637 + aux1638))=tv=SATLiteral(8584))
-8584 -6892 -6901 -6906 0
8584 6906 0
8584 6901 0
8584 6902 0
8584 6904 0
8584 6892 0
8584 6892 6901 0
8584 6892 6902 0
8584 6892 6904 0
8584 6893 0
8584 6893 6901 0
8584 6893 6902 0
8584 6893 6904 0
c (((aux1640 + aux1643 + aux1644)<=1)=tv=SATLiteral(8585))
-8585 6931 0
-8585 6925 6930 0
-8585 6926 0
-8585 6928 0
-8585 6916 6930 0
-8585 6916 6925 0
-8585 6916 6926 0
-8585 6916 6928 0
-8585 6917 0
-8585 6917 6925 0
-8585 6917 6926 0
-8585 6917 6928 0
8585 -6917 -6925 -6930 0
8585 -6916 -6926 -6930 0
8585 -6916 -6925 -6931 0
c ((1<=(aux1640 + aux1643 + aux1644))=tv=SATLiteral(8586))
-8586 -6916 -6925 -6930 0
8586 6930 0
8586 6925 0
8586 6926 0
8586 6928 0
8586 6916 0
8586 6916 6925 0
8586 6916 6926 0
8586 6916 6928 0
8586 6917 0
8586 6917 6925 0
8586 6917 6926 0
8586 6917 6928 0
c (((aux1646 + aux1649 + aux1650)<=1)=tv=SATLiteral(8587))
-8587 6955 0
-8587 6949 6954 0
-8587 6950 0
-8587 6952 0
-8587 6940 6954 0
-8587 6940 6949 0
-8587 6940 6950 0
-8587 6940 6952 0
-8587 6941 0
-8587 6941 6949 0
-8587 6941 6950 0
-8587 6941 6952 0
8587 -6941 -6949 -6954 0
8587 -6940 -6950 -6954 0
8587 -6940 -6949 -6955 0
c ((1<=(aux1646 + aux1649 + aux1650))=tv=SATLiteral(8588))
-8588 -6940 -6949 -6954 0
8588 6954 0
8588 6949 0
8588 6950 0
8588 6952 0
8588 6940 0
8588 6940 6949 0
8588 6940 6950 0
8588 6940 6952 0
8588 6941 0
8588 6941 6949 0
8588 6941 6950 0
8588 6941 6952 0
c (((aux1652 + aux1655 + aux1656)<=1)=tv=SATLiteral(8589))
-8589 6979 0
-8589 6973 6978 0
-8589 6974 0
-8589 6976 0
-8589 6964 6978 0
-8589 6964 6973 0
-8589 6964 6974 0
-8589 6964 6976 0
-8589 6965 0
-8589 6965 6973 0
-8589 6965 6974 0
-8589 6965 6976 0
8589 -6965 -6973 -6978 0
8589 -6964 -6974 -6978 0
8589 -6964 -6973 -6979 0
c ((1<=(aux1652 + aux1655 + aux1656))=tv=SATLiteral(8590))
-8590 -6964 -6973 -6978 0
8590 6978 0
8590 6973 0
8590 6974 0
8590 6976 0
8590 6964 0
8590 6964 6973 0
8590 6964 6974 0
8590 6964 6976 0
8590 6965 0
8590 6965 6973 0
8590 6965 6974 0
8590 6965 6976 0
c (((aux1658 + aux1661 + aux1662)<=1)=tv=SATLiteral(8591))
-8591 7003 0
-8591 6997 7002 0
-8591 6998 0
-8591 7000 0
-8591 6988 7002 0
-8591 6988 6997 0
-8591 6988 6998 0
-8591 6988 7000 0
-8591 6989 0
-8591 6989 6997 0
-8591 6989 6998 0
-8591 6989 7000 0
8591 -6989 -6997 -7002 0
8591 -6988 -6998 -7002 0
8591 -6988 -6997 -7003 0
c ((1<=(aux1658 + aux1661 + aux1662))=tv=SATLiteral(8592))
-8592 -6988 -6997 -7002 0
8592 7002 0
8592 6997 0
8592 6998 0
8592 7000 0
8592 6988 0
8592 6988 6997 0
8592 6988 6998 0
8592 6988 7000 0
8592 6989 0
8592 6989 6997 0
8592 6989 6998 0
8592 6989 7000 0
c (((aux1664 + aux1667 + aux1668)<=1)=tv=SATLiteral(8593))
-8593 7027 0
-8593 7021 7026 0
-8593 7022 0
-8593 7024 0
-8593 7012 7026 0
-8593 7012 7021 0
-8593 7012 7022 0
-8593 7012 7024 0
-8593 7013 0
-8593 7013 7021 0
-8593 7013 7022 0
-8593 7013 7024 0
8593 -7013 -7021 -7026 0
8593 -7012 -7022 -7026 0
8593 -7012 -7021 -7027 0
c ((1<=(aux1664 + aux1667 + aux1668))=tv=SATLiteral(8594))
-8594 -7012 -7021 -7026 0
8594 7026 0
8594 7021 0
8594 7022 0
8594 7024 0
8594 7012 0
8594 7012 7021 0
8594 7012 7022 0
8594 7012 7024 0
8594 7013 0
8594 7013 7021 0
8594 7013 7022 0
8594 7013 7024 0
c (((aux1670 + aux1673 + aux1674)<=1)=tv=SATLiteral(8595))
-8595 7051 0
-8595 7045 7050 0
-8595 7046 0
-8595 7048 0
-8595 7036 7050 0
-8595 7036 7045 0
-8595 7036 7046 0
-8595 7036 7048 0
-8595 7037 0
-8595 7037 7045 0
-8595 7037 7046 0
-8595 7037 7048 0
8595 -7037 -7045 -7050 0
8595 -7036 -7046 -7050 0
8595 -7036 -7045 -7051 0
c ((1<=(aux1670 + aux1673 + aux1674))=tv=SATLiteral(8596))
-8596 -7036 -7045 -7050 0
8596 7050 0
8596 7045 0
8596 7046 0
8596 7048 0
8596 7036 0
8596 7036 7045 0
8596 7036 7046 0
8596 7036 7048 0
8596 7037 0
8596 7037 7045 0
8596 7037 7046 0
8596 7037 7048 0
c (((aux1676 + aux1679 + aux1680)<=1)=tv=SATLiteral(8597))
-8597 7075 0
-8597 7069 7074 0
-8597 7070 0
-8597 7072 0
-8597 7060 7074 0
-8597 7060 7069 0
-8597 7060 7070 0
-8597 7060 7072 0
-8597 7061 0
-8597 7061 7069 0
-8597 7061 7070 0
-8597 7061 7072 0
8597 -7061 -7069 -7074 0
8597 -7060 -7070 -7074 0
8597 -7060 -7069 -7075 0
c ((1<=(aux1676 + aux1679 + aux1680))=tv=SATLiteral(8598))
-8598 -7060 -7069 -7074 0
8598 7074 0
8598 7069 0
8598 7070 0
8598 7072 0
8598 7060 0
8598 7060 7069 0
8598 7060 7070 0
8598 7060 7072 0
8598 7061 0
8598 7061 7069 0
8598 7061 7070 0
8598 7061 7072 0
c (((aux1682 + aux1685 + aux1686)<=1)=tv=SATLiteral(8599))
-8599 7099 0
-8599 7093 7098 0
-8599 7094 0
-8599 7096 0
-8599 7084 7098 0
-8599 7084 7093 0
-8599 7084 7094 0
-8599 7084 7096 0
-8599 7085 0
-8599 7085 7093 0
-8599 7085 7094 0
-8599 7085 7096 0
8599 -7085 -7093 -7098 0
8599 -7084 -7094 -7098 0
8599 -7084 -7093 -7099 0
c ((1<=(aux1682 + aux1685 + aux1686))=tv=SATLiteral(8600))
-8600 -7084 -7093 -7098 0
8600 7098 0
8600 7093 0
8600 7094 0
8600 7096 0
8600 7084 0
8600 7084 7093 0
8600 7084 7094 0
8600 7084 7096 0
8600 7085 0
8600 7085 7093 0
8600 7085 7094 0
8600 7085 7096 0
c (((aux1688 + aux1691 + aux1692)<=1)=tv=SATLiteral(8601))
-8601 7123 0
-8601 7117 7122 0
-8601 7118 0
-8601 7120 0
-8601 7108 7122 0
-8601 7108 7117 0
-8601 7108 7118 0
-8601 7108 7120 0
-8601 7109 0
-8601 7109 7117 0
-8601 7109 7118 0
-8601 7109 7120 0
8601 -7109 -7117 -7122 0
8601 -7108 -7118 -7122 0
8601 -7108 -7117 -7123 0
c ((1<=(aux1688 + aux1691 + aux1692))=tv=SATLiteral(8602))
-8602 -7108 -7117 -7122 0
8602 7122 0
8602 7117 0
8602 7118 0
8602 7120 0
8602 7108 0
8602 7108 7117 0
8602 7108 7118 0
8602 7108 7120 0
8602 7109 0
8602 7109 7117 0
8602 7109 7118 0
8602 7109 7120 0
c (((aux1694 + aux1697 + aux1698)<=1)=tv=SATLiteral(8603))
-8603 7147 0
-8603 7141 7146 0
-8603 7142 0
-8603 7144 0
-8603 7132 7146 0
-8603 7132 7141 0
-8603 7132 7142 0
-8603 7132 7144 0
-8603 7133 0
-8603 7133 7141 0
-8603 7133 7142 0
-8603 7133 7144 0
8603 -7133 -7141 -7146 0
8603 -7132 -7142 -7146 0
8603 -7132 -7141 -7147 0
c ((1<=(aux1694 + aux1697 + aux1698))=tv=SATLiteral(8604))
-8604 -7132 -7141 -7146 0
8604 7146 0
8604 7141 0
8604 7142 0
8604 7144 0
8604 7132 0
8604 7132 7141 0
8604 7132 7142 0
8604 7132 7144 0
8604 7133 0
8604 7133 7141 0
8604 7133 7142 0
8604 7133 7144 0
c (((aux1700 + aux1703 + aux1704)<=1)=tv=SATLiteral(8605))
-8605 7171 0
-8605 7165 7170 0
-8605 7166 0
-8605 7168 0
-8605 7156 7170 0
-8605 7156 7165 0
-8605 7156 7166 0
-8605 7156 7168 0
-8605 7157 0
-8605 7157 7165 0
-8605 7157 7166 0
-8605 7157 7168 0
8605 -7157 -7165 -7170 0
8605 -7156 -7166 -7170 0
8605 -7156 -7165 -7171 0
c ((1<=(aux1700 + aux1703 + aux1704))=tv=SATLiteral(8606))
-8606 -7156 -7165 -7170 0
8606 7170 0
8606 7165 0
8606 7166 0
8606 7168 0
8606 7156 0
8606 7156 7165 0
8606 7156 7166 0
8606 7156 7168 0
8606 7157 0
8606 7157 7165 0
8606 7157 7166 0
8606 7157 7168 0
c (((aux1706 + aux1709 + aux1710)<=1)=tv=SATLiteral(8607))
-8607 7195 0
-8607 7189 7194 0
-8607 7190 0
-8607 7192 0
-8607 7180 7194 0
-8607 7180 7189 0
-8607 7180 7190 0
-8607 7180 7192 0
-8607 7181 0
-8607 7181 7189 0
-8607 7181 7190 0
-8607 7181 7192 0
8607 -7181 -7189 -7194 0
8607 -7180 -7190 -7194 0
8607 -7180 -7189 -7195 0
c ((1<=(aux1706 + aux1709 + aux1710))=tv=SATLiteral(8608))
-8608 -7180 -7189 -7194 0
8608 7194 0
8608 7189 0
8608 7190 0
8608 7192 0
8608 7180 0
8608 7180 7189 0
8608 7180 7190 0
8608 7180 7192 0
8608 7181 0
8608 7181 7189 0
8608 7181 7190 0
8608 7181 7192 0
c (((aux1712 + aux1715 + aux1716)<=1)=tv=SATLiteral(8609))
-8609 7219 0
-8609 7213 7218 0
-8609 7214 0
-8609 7216 0
-8609 7204 7218 0
-8609 7204 7213 0
-8609 7204 7214 0
-8609 7204 7216 0
-8609 7205 0
-8609 7205 7213 0
-8609 7205 7214 0
-8609 7205 7216 0
8609 -7205 -7213 -7218 0
8609 -7204 -7214 -7218 0
8609 -7204 -7213 -7219 0
c ((1<=(aux1712 + aux1715 + aux1716))=tv=SATLiteral(8610))
-8610 -7204 -7213 -7218 0
8610 7218 0
8610 7213 0
8610 7214 0
8610 7216 0
8610 7204 0
8610 7204 7213 0
8610 7204 7214 0
8610 7204 7216 0
8610 7205 0
8610 7205 7213 0
8610 7205 7214 0
8610 7205 7216 0
c (((aux1718 + aux1721 + aux1722)<=1)=tv=SATLiteral(8611))
-8611 7243 0
-8611 7237 7242 0
-8611 7238 0
-8611 7240 0
-8611 7228 7242 0
-8611 7228 7237 0
-8611 7228 7238 0
-8611 7228 7240 0
-8611 7229 0
-8611 7229 7237 0
-8611 7229 7238 0
-8611 7229 7240 0
8611 -7229 -7237 -7242 0
8611 -7228 -7238 -7242 0
8611 -7228 -7237 -7243 0
c ((1<=(aux1718 + aux1721 + aux1722))=tv=SATLiteral(8612))
-8612 -7228 -7237 -7242 0
8612 7242 0
8612 7237 0
8612 7238 0
8612 7240 0
8612 7228 0
8612 7228 7237 0
8612 7228 7238 0
8612 7228 7240 0
8612 7229 0
8612 7229 7237 0
8612 7229 7238 0
8612 7229 7240 0
c (((aux1724 + aux1727 + aux1728)<=1)=tv=SATLiteral(8613))
-8613 7267 0
-8613 7261 7266 0
-8613 7262 0
-8613 7264 0
-8613 7252 7266 0
-8613 7252 7261 0
-8613 7252 7262 0
-8613 7252 7264 0
-8613 7253 0
-8613 7253 7261 0
-8613 7253 7262 0
-8613 7253 7264 0
8613 -7253 -7261 -7266 0
8613 -7252 -7262 -7266 0
8613 -7252 -7261 -7267 0
c ((1<=(aux1724 + aux1727 + aux1728))=tv=SATLiteral(8614))
-8614 -7252 -7261 -7266 0
8614 7266 0
8614 7261 0
8614 7262 0
8614 7264 0
8614 7252 0
8614 7252 7261 0
8614 7252 7262 0
8614 7252 7264 0
8614 7253 0
8614 7253 7261 0
8614 7253 7262 0
8614 7253 7264 0
c (((aux1730 + aux1733 + aux1734)<=1)=tv=SATLiteral(8615))
-8615 7291 0
-8615 7285 7290 0
-8615 7286 0
-8615 7288 0
-8615 7276 7290 0
-8615 7276 7285 0
-8615 7276 7286 0
-8615 7276 7288 0
-8615 7277 0
-8615 7277 7285 0
-8615 7277 7286 0
-8615 7277 7288 0
8615 -7277 -7285 -7290 0
8615 -7276 -7286 -7290 0
8615 -7276 -7285 -7291 0
c ((1<=(aux1730 + aux1733 + aux1734))=tv=SATLiteral(8616))
-8616 -7276 -7285 -7290 0
8616 7290 0
8616 7285 0
8616 7286 0
8616 7288 0
8616 7276 0
8616 7276 7285 0
8616 7276 7286 0
8616 7276 7288 0
8616 7277 0
8616 7277 7285 0
8616 7277 7286 0
8616 7277 7288 0
c (((aux1736 + aux1739 + aux1740)<=1)=tv=SATLiteral(8617))
-8617 7315 0
-8617 7309 7314 0
-8617 7310 0
-8617 7312 0
-8617 7300 7314 0
-8617 7300 7309 0
-8617 7300 7310 0
-8617 7300 7312 0
-8617 7301 0
-8617 7301 7309 0
-8617 7301 7310 0
-8617 7301 7312 0
8617 -7301 -7309 -7314 0
8617 -7300 -7310 -7314 0
8617 -7300 -7309 -7315 0
c ((1<=(aux1736 + aux1739 + aux1740))=tv=SATLiteral(8618))
-8618 -7300 -7309 -7314 0
8618 7314 0
8618 7309 0
8618 7310 0
8618 7312 0
8618 7300 0
8618 7300 7309 0
8618 7300 7310 0
8618 7300 7312 0
8618 7301 0
8618 7301 7309 0
8618 7301 7310 0
8618 7301 7312 0
c (((aux1742 + aux1745 + aux1746)<=1)=tv=SATLiteral(8619))
-8619 7339 0
-8619 7333 7338 0
-8619 7334 0
-8619 7336 0
-8619 7324 7338 0
-8619 7324 7333 0
-8619 7324 7334 0
-8619 7324 7336 0
-8619 7325 0
-8619 7325 7333 0
-8619 7325 7334 0
-8619 7325 7336 0
8619 -7325 -7333 -7338 0
8619 -7324 -7334 -7338 0
8619 -7324 -7333 -7339 0
c ((1<=(aux1742 + aux1745 + aux1746))=tv=SATLiteral(8620))
-8620 -7324 -7333 -7338 0
8620 7338 0
8620 7333 0
8620 7334 0
8620 7336 0
8620 7324 0
8620 7324 7333 0
8620 7324 7334 0
8620 7324 7336 0
8620 7325 0
8620 7325 7333 0
8620 7325 7334 0
8620 7325 7336 0
c (((aux1748 + aux1751 + aux1752)<=1)=tv=SATLiteral(8621))
-8621 7363 0
-8621 7357 7362 0
-8621 7358 0
-8621 7360 0
-8621 7348 7362 0
-8621 7348 7357 0
-8621 7348 7358 0
-8621 7348 7360 0
-8621 7349 0
-8621 7349 7357 0
-8621 7349 7358 0
-8621 7349 7360 0
8621 -7349 -7357 -7362 0
8621 -7348 -7358 -7362 0
8621 -7348 -7357 -7363 0
c ((1<=(aux1748 + aux1751 + aux1752))=tv=SATLiteral(8622))
-8622 -7348 -7357 -7362 0
8622 7362 0
8622 7357 0
8622 7358 0
8622 7360 0
8622 7348 0
8622 7348 7357 0
8622 7348 7358 0
8622 7348 7360 0
8622 7349 0
8622 7349 7357 0
8622 7349 7358 0
8622 7349 7360 0
c (((aux1754 + aux1757 + aux1758)<=1)=tv=SATLiteral(8623))
-8623 7387 0
-8623 7381 7386 0
-8623 7382 0
-8623 7384 0
-8623 7372 7386 0
-8623 7372 7381 0
-8623 7372 7382 0
-8623 7372 7384 0
-8623 7373 0
-8623 7373 7381 0
-8623 7373 7382 0
-8623 7373 7384 0
8623 -7373 -7381 -7386 0
8623 -7372 -7382 -7386 0
8623 -7372 -7381 -7387 0
c ((1<=(aux1754 + aux1757 + aux1758))=tv=SATLiteral(8624))
-8624 -7372 -7381 -7386 0
8624 7386 0
8624 7381 0
8624 7382 0
8624 7384 0
8624 7372 0
8624 7372 7381 0
8624 7372 7382 0
8624 7372 7384 0
8624 7373 0
8624 7373 7381 0
8624 7373 7382 0
8624 7373 7384 0
c (((aux1760 + aux1763 + aux1764)<=1)=tv=SATLiteral(8625))
-8625 7411 0
-8625 7405 7410 0
-8625 7406 0
-8625 7408 0
-8625 7396 7410 0
-8625 7396 7405 0
-8625 7396 7406 0
-8625 7396 7408 0
-8625 7397 0
-8625 7397 7405 0
-8625 7397 7406 0
-8625 7397 7408 0
8625 -7397 -7405 -7410 0
8625 -7396 -7406 -7410 0
8625 -7396 -7405 -7411 0
c ((1<=(aux1760 + aux1763 + aux1764))=tv=SATLiteral(8626))
-8626 -7396 -7405 -7410 0
8626 7410 0
8626 7405 0
8626 7406 0
8626 7408 0
8626 7396 0
8626 7396 7405 0
8626 7396 7406 0
8626 7396 7408 0
8626 7397 0
8626 7397 7405 0
8626 7397 7406 0
8626 7397 7408 0
c (((aux1766 + aux1769 + aux1770)<=1)=tv=SATLiteral(8627))
-8627 7435 0
-8627 7429 7434 0
-8627 7430 0
-8627 7432 0
-8627 7420 7434 0
-8627 7420 7429 0
-8627 7420 7430 0
-8627 7420 7432 0
-8627 7421 0
-8627 7421 7429 0
-8627 7421 7430 0
-8627 7421 7432 0
8627 -7421 -7429 -7434 0
8627 -7420 -7430 -7434 0
8627 -7420 -7429 -7435 0
c ((1<=(aux1766 + aux1769 + aux1770))=tv=SATLiteral(8628))
-8628 -7420 -7429 -7434 0
8628 7434 0
8628 7429 0
8628 7430 0
8628 7432 0
8628 7420 0
8628 7420 7429 0
8628 7420 7430 0
8628 7420 7432 0
8628 7421 0
8628 7421 7429 0
8628 7421 7430 0
8628 7421 7432 0
c (((aux1772 + aux1775 + aux1776)<=1)=tv=SATLiteral(8629))
-8629 7459 0
-8629 7453 7458 0
-8629 7454 0
-8629 7456 0
-8629 7444 7458 0
-8629 7444 7453 0
-8629 7444 7454 0
-8629 7444 7456 0
-8629 7445 0
-8629 7445 7453 0
-8629 7445 7454 0
-8629 7445 7456 0
8629 -7445 -7453 -7458 0
8629 -7444 -7454 -7458 0
8629 -7444 -7453 -7459 0
c ((1<=(aux1772 + aux1775 + aux1776))=tv=SATLiteral(8630))
-8630 -7444 -7453 -7458 0
8630 7458 0
8630 7453 0
8630 7454 0
8630 7456 0
8630 7444 0
8630 7444 7453 0
8630 7444 7454 0
8630 7444 7456 0
8630 7445 0
8630 7445 7453 0
8630 7445 7454 0
8630 7445 7456 0
c (((aux1778 + aux1781 + aux1782)<=1)=tv=SATLiteral(8631))
-8631 7483 0
-8631 7477 7482 0
-8631 7478 0
-8631 7480 0
-8631 7468 7482 0
-8631 7468 7477 0
-8631 7468 7478 0
-8631 7468 7480 0
-8631 7469 0
-8631 7469 7477 0
-8631 7469 7478 0
-8631 7469 7480 0
8631 -7469 -7477 -7482 0
8631 -7468 -7478 -7482 0
8631 -7468 -7477 -7483 0
c ((1<=(aux1778 + aux1781 + aux1782))=tv=SATLiteral(8632))
-8632 -7468 -7477 -7482 0
8632 7482 0
8632 7477 0
8632 7478 0
8632 7480 0
8632 7468 0
8632 7468 7477 0
8632 7468 7478 0
8632 7468 7480 0
8632 7469 0
8632 7469 7477 0
8632 7469 7478 0
8632 7469 7480 0
c (((aux1784 + aux1787 + aux1788)<=1)=tv=SATLiteral(8633))
-8633 7507 0
-8633 7501 7506 0
-8633 7502 0
-8633 7504 0
-8633 7492 7506 0
-8633 7492 7501 0
-8633 7492 7502 0
-8633 7492 7504 0
-8633 7493 0
-8633 7493 7501 0
-8633 7493 7502 0
-8633 7493 7504 0
8633 -7493 -7501 -7506 0
8633 -7492 -7502 -7506 0
8633 -7492 -7501 -7507 0
c ((1<=(aux1784 + aux1787 + aux1788))=tv=SATLiteral(8634))
-8634 -7492 -7501 -7506 0
8634 7506 0
8634 7501 0
8634 7502 0
8634 7504 0
8634 7492 0
8634 7492 7501 0
8634 7492 7502 0
8634 7492 7504 0
8634 7493 0
8634 7493 7501 0
8634 7493 7502 0
8634 7493 7504 0
c (((aux1790 + aux1793 + aux1794)<=1)=tv=SATLiteral(8635))
-8635 7531 0
-8635 7525 7530 0
-8635 7526 0
-8635 7528 0
-8635 7516 7530 0
-8635 7516 7525 0
-8635 7516 7526 0
-8635 7516 7528 0
-8635 7517 0
-8635 7517 7525 0
-8635 7517 7526 0
-8635 7517 7528 0
8635 -7517 -7525 -7530 0
8635 -7516 -7526 -7530 0
8635 -7516 -7525 -7531 0
c ((1<=(aux1790 + aux1793 + aux1794))=tv=SATLiteral(8636))
-8636 -7516 -7525 -7530 0
8636 7530 0
8636 7525 0
8636 7526 0
8636 7528 0
8636 7516 0
8636 7516 7525 0
8636 7516 7526 0
8636 7516 7528 0
8636 7517 0
8636 7517 7525 0
8636 7517 7526 0
8636 7517 7528 0
c (((aux1796 + aux1799 + aux1800)<=1)=tv=SATLiteral(8637))
-8637 7555 0
-8637 7549 7554 0
-8637 7550 0
-8637 7552 0
-8637 7540 7554 0
-8637 7540 7549 0
-8637 7540 7550 0
-8637 7540 7552 0
-8637 7541 0
-8637 7541 7549 0
-8637 7541 7550 0
-8637 7541 7552 0
8637 -7541 -7549 -7554 0
8637 -7540 -7550 -7554 0
8637 -7540 -7549 -7555 0
c ((1<=(aux1796 + aux1799 + aux1800))=tv=SATLiteral(8638))
-8638 -7540 -7549 -7554 0
8638 7554 0
8638 7549 0
8638 7550 0
8638 7552 0
8638 7540 0
8638 7540 7549 0
8638 7540 7550 0
8638 7540 7552 0
8638 7541 0
8638 7541 7549 0
8638 7541 7550 0
8638 7541 7552 0
c (((aux1802 + aux1805 + aux1806)<=1)=tv=SATLiteral(8639))
-8639 7579 0
-8639 7573 7578 0
-8639 7574 0
-8639 7576 0
-8639 7564 7578 0
-8639 7564 7573 0
-8639 7564 7574 0
-8639 7564 7576 0
-8639 7565 0
-8639 7565 7573 0
-8639 7565 7574 0
-8639 7565 7576 0
8639 -7565 -7573 -7578 0
8639 -7564 -7574 -7578 0
8639 -7564 -7573 -7579 0
c ((1<=(aux1802 + aux1805 + aux1806))=tv=SATLiteral(8640))
-8640 -7564 -7573 -7578 0
8640 7578 0
8640 7573 0
8640 7574 0
8640 7576 0
8640 7564 0
8640 7564 7573 0
8640 7564 7574 0
8640 7564 7576 0
8640 7565 0
8640 7565 7573 0
8640 7565 7574 0
8640 7565 7576 0
c (((aux1808 + aux1811 + aux1812)<=1)=tv=SATLiteral(8641))
-8641 7603 0
-8641 7597 7602 0
-8641 7598 0
-8641 7600 0
-8641 7588 7602 0
-8641 7588 7597 0
-8641 7588 7598 0
-8641 7588 7600 0
-8641 7589 0
-8641 7589 7597 0
-8641 7589 7598 0
-8641 7589 7600 0
8641 -7589 -7597 -7602 0
8641 -7588 -7598 -7602 0
8641 -7588 -7597 -7603 0
c ((1<=(aux1808 + aux1811 + aux1812))=tv=SATLiteral(8642))
-8642 -7588 -7597 -7602 0
8642 7602 0
8642 7597 0
8642 7598 0
8642 7600 0
8642 7588 0
8642 7588 7597 0
8642 7588 7598 0
8642 7588 7600 0
8642 7589 0
8642 7589 7597 0
8642 7589 7598 0
8642 7589 7600 0
c (((aux1814 + aux1817 + aux1818)<=1)=tv=SATLiteral(8643))
-8643 7627 0
-8643 7621 7626 0
-8643 7622 0
-8643 7624 0
-8643 7612 7626 0
-8643 7612 7621 0
-8643 7612 7622 0
-8643 7612 7624 0
-8643 7613 0
-8643 7613 7621 0
-8643 7613 7622 0
-8643 7613 7624 0
8643 -7613 -7621 -7626 0
8643 -7612 -7622 -7626 0
8643 -7612 -7621 -7627 0
c ((1<=(aux1814 + aux1817 + aux1818))=tv=SATLiteral(8644))
-8644 -7612 -7621 -7626 0
8644 7626 0
8644 7621 0
8644 7622 0
8644 7624 0
8644 7612 0
8644 7612 7621 0
8644 7612 7622 0
8644 7612 7624 0
8644 7613 0
8644 7613 7621 0
8644 7613 7622 0
8644 7613 7624 0
c (((aux1820 + aux1823 + aux1824)<=1)=tv=SATLiteral(8645))
-8645 7651 0
-8645 7645 7650 0
-8645 7646 0
-8645 7648 0
-8645 7636 7650 0
-8645 7636 7645 0
-8645 7636 7646 0
-8645 7636 7648 0
-8645 7637 0
-8645 7637 7645 0
-8645 7637 7646 0
-8645 7637 7648 0
8645 -7637 -7645 -7650 0
8645 -7636 -7646 -7650 0
8645 -7636 -7645 -7651 0
c ((1<=(aux1820 + aux1823 + aux1824))=tv=SATLiteral(8646))
-8646 -7636 -7645 -7650 0
8646 7650 0
8646 7645 0
8646 7646 0
8646 7648 0
8646 7636 0
8646 7636 7645 0
8646 7636 7646 0
8646 7636 7648 0
8646 7637 0
8646 7637 7645 0
8646 7637 7646 0
8646 7637 7648 0
c (((aux1826 + aux1829 + aux1830)<=1)=tv=SATLiteral(8647))
-8647 7675 0
-8647 7669 7674 0
-8647 7670 0
-8647 7672 0
-8647 7660 7674 0
-8647 7660 7669 0
-8647 7660 7670 0
-8647 7660 7672 0
-8647 7661 0
-8647 7661 7669 0
-8647 7661 7670 0
-8647 7661 7672 0
8647 -7661 -7669 -7674 0
8647 -7660 -7670 -7674 0
8647 -7660 -7669 -7675 0
c ((1<=(aux1826 + aux1829 + aux1830))=tv=SATLiteral(8648))
-8648 -7660 -7669 -7674 0
8648 7674 0
8648 7669 0
8648 7670 0
8648 7672 0
8648 7660 0
8648 7660 7669 0
8648 7660 7670 0
8648 7660 7672 0
8648 7661 0
8648 7661 7669 0
8648 7661 7670 0
8648 7661 7672 0
c (((aux1832 + aux1835 + aux1836)<=1)=tv=SATLiteral(8649))
-8649 7699 0
-8649 7693 7698 0
-8649 7694 0
-8649 7696 0
-8649 7684 7698 0
-8649 7684 7693 0
-8649 7684 7694 0
-8649 7684 7696 0
-8649 7685 0
-8649 7685 7693 0
-8649 7685 7694 0
-8649 7685 7696 0
8649 -7685 -7693 -7698 0
8649 -7684 -7694 -7698 0
8649 -7684 -7693 -7699 0
c ((1<=(aux1832 + aux1835 + aux1836))=tv=SATLiteral(8650))
-8650 -7684 -7693 -7698 0
8650 7698 0
8650 7693 0
8650 7694 0
8650 7696 0
8650 7684 0
8650 7684 7693 0
8650 7684 7694 0
8650 7684 7696 0
8650 7685 0
8650 7685 7693 0
8650 7685 7694 0
8650 7685 7696 0
c (((aux1838 + aux1841 + aux1842)<=1)=tv=SATLiteral(8651))
-8651 7723 0
-8651 7717 7722 0
-8651 7718 0
-8651 7720 0
-8651 7708 7722 0
-8651 7708 7717 0
-8651 7708 7718 0
-8651 7708 7720 0
-8651 7709 0
-8651 7709 7717 0
-8651 7709 7718 0
-8651 7709 7720 0
8651 -7709 -7717 -7722 0
8651 -7708 -7718 -7722 0
8651 -7708 -7717 -7723 0
c ((1<=(aux1838 + aux1841 + aux1842))=tv=SATLiteral(8652))
-8652 -7708 -7717 -7722 0
8652 7722 0
8652 7717 0
8652 7718 0
8652 7720 0
8652 7708 0
8652 7708 7717 0
8652 7708 7718 0
8652 7708 7720 0
8652 7709 0
8652 7709 7717 0
8652 7709 7718 0
8652 7709 7720 0
c (((aux1844 + aux1847 + aux1848)<=1)=tv=SATLiteral(8653))
-8653 7747 0
-8653 7741 7746 0
-8653 7742 0
-8653 7744 0
-8653 7732 7746 0
-8653 7732 7741 0
-8653 7732 7742 0
-8653 7732 7744 0
-8653 7733 0
-8653 7733 7741 0
-8653 7733 7742 0
-8653 7733 7744 0
8653 -7733 -7741 -7746 0
8653 -7732 -7742 -7746 0
8653 -7732 -7741 -7747 0
c ((1<=(aux1844 + aux1847 + aux1848))=tv=SATLiteral(8654))
-8654 -7732 -7741 -7746 0
8654 7746 0
8654 7741 0
8654 7742 0
8654 7744 0
8654 7732 0
8654 7732 7741 0
8654 7732 7742 0
8654 7732 7744 0
8654 7733 0
8654 7733 7741 0
8654 7733 7742 0
8654 7733 7744 0
c (((aux1850 + aux1853 + aux1854)<=1)=tv=SATLiteral(8655))
-8655 7771 0
-8655 7765 7770 0
-8655 7766 0
-8655 7768 0
-8655 7756 7770 0
-8655 7756 7765 0
-8655 7756 7766 0
-8655 7756 7768 0
-8655 7757 0
-8655 7757 7765 0
-8655 7757 7766 0
-8655 7757 7768 0
8655 -7757 -7765 -7770 0
8655 -7756 -7766 -7770 0
8655 -7756 -7765 -7771 0
c ((1<=(aux1850 + aux1853 + aux1854))=tv=SATLiteral(8656))
-8656 -7756 -7765 -7770 0
8656 7770 0
8656 7765 0
8656 7766 0
8656 7768 0
8656 7756 0
8656 7756 7765 0
8656 7756 7766 0
8656 7756 7768 0
8656 7757 0
8656 7757 7765 0
8656 7757 7766 0
8656 7757 7768 0
c (((aux1856 + aux1859 + aux1860)<=1)=tv=SATLiteral(8657))
-8657 7795 0
-8657 7789 7794 0
-8657 7790 0
-8657 7792 0
-8657 7780 7794 0
-8657 7780 7789 0
-8657 7780 7790 0
-8657 7780 7792 0
-8657 7781 0
-8657 7781 7789 0
-8657 7781 7790 0
-8657 7781 7792 0
8657 -7781 -7789 -7794 0
8657 -7780 -7790 -7794 0
8657 -7780 -7789 -7795 0
c ((1<=(aux1856 + aux1859 + aux1860))=tv=SATLiteral(8658))
-8658 -7780 -7789 -7794 0
8658 7794 0
8658 7789 0
8658 7790 0
8658 7792 0
8658 7780 0
8658 7780 7789 0
8658 7780 7790 0
8658 7780 7792 0
8658 7781 0
8658 7781 7789 0
8658 7781 7790 0
8658 7781 7792 0
c (((aux1862 + aux1865 + aux1866)<=1)=tv=SATLiteral(8659))
-8659 7819 0
-8659 7813 7818 0
-8659 7814 0
-8659 7816 0
-8659 7804 7818 0
-8659 7804 7813 0
-8659 7804 7814 0
-8659 7804 7816 0
-8659 7805 0
-8659 7805 7813 0
-8659 7805 7814 0
-8659 7805 7816 0
8659 -7805 -7813 -7818 0
8659 -7804 -7814 -7818 0
8659 -7804 -7813 -7819 0
c ((1<=(aux1862 + aux1865 + aux1866))=tv=SATLiteral(8660))
-8660 -7804 -7813 -7818 0
8660 7818 0
8660 7813 0
8660 7814 0
8660 7816 0
8660 7804 0
8660 7804 7813 0
8660 7804 7814 0
8660 7804 7816 0
8660 7805 0
8660 7805 7813 0
8660 7805 7814 0
8660 7805 7816 0
c (((aux1868 + aux1871 + aux1872)<=1)=tv=SATLiteral(8661))
-8661 7843 0
-8661 7837 7842 0
-8661 7838 0
-8661 7840 0
-8661 7828 7842 0
-8661 7828 7837 0
-8661 7828 7838 0
-8661 7828 7840 0
-8661 7829 0
-8661 7829 7837 0
-8661 7829 7838 0
-8661 7829 7840 0
8661 -7829 -7837 -7842 0
8661 -7828 -7838 -7842 0
8661 -7828 -7837 -7843 0
c ((1<=(aux1868 + aux1871 + aux1872))=tv=SATLiteral(8662))
-8662 -7828 -7837 -7842 0
8662 7842 0
8662 7837 0
8662 7838 0
8662 7840 0
8662 7828 0
8662 7828 7837 0
8662 7828 7838 0
8662 7828 7840 0
8662 7829 0
8662 7829 7837 0
8662 7829 7838 0
8662 7829 7840 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1302))
1302 -8119 -8120 0
8119 -1302 0
8120 -1302 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1303))
1303 -8121 -8122 0
8121 -1303 0
8122 -1303 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1304))
1304 -8123 -8124 0
8123 -1304 0
8124 -1304 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1305))
1305 -8125 -8126 0
8125 -1305 0
8126 -1305 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1306))
1306 -8127 -8128 0
8127 -1306 0
8128 -1306 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1307))
1307 -8129 -8130 0
8129 -1307 0
8130 -1307 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1308))
1308 -8131 -8132 0
8131 -1308 0
8132 -1308 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1309))
1309 -8133 -8134 0
8133 -1309 0
8134 -1309 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1310))
1310 -8135 -8136 0
8135 -1310 0
8136 -1310 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1311))
1311 -8137 -8138 0
8137 -1311 0
8138 -1311 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1312))
1312 -8139 -8140 0
8139 -1312 0
8140 -1312 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1313))
1313 -8141 -8142 0
8141 -1313 0
8142 -1313 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1314))
1314 -8143 -8144 0
8143 -1314 0
8144 -1314 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1315))
1315 -8145 -8146 0
8145 -1315 0
8146 -1315 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1316))
1316 -8147 -8148 0
8147 -1316 0
8148 -1316 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1317))
1317 -8149 -8150 0
8149 -1317 0
8150 -1317 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1318))
1318 -8151 -8152 0
8151 -1318 0
8152 -1318 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1319))
1319 -8153 -8154 0
8153 -1319 0
8154 -1319 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1320))
1320 -8155 -8156 0
8155 -1320 0
8156 -1320 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1321))
1321 -8157 -8158 0
8157 -1321 0
8158 -1321 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1322))
1322 -8159 -8160 0
8159 -1322 0
8160 -1322 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1323))
1323 -8161 -8162 0
8161 -1323 0
8162 -1323 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1324))
1324 -8163 -8164 0
8163 -1324 0
8164 -1324 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1325))
1325 -8165 -8166 0
8165 -1325 0
8166 -1325 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1326))
1326 -8167 -8168 0
8167 -1326 0
8168 -1326 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1327))
1327 -8169 -8170 0
8169 -1327 0
8170 -1327 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1328))
1328 -8171 -8172 0
8171 -1328 0
8172 -1328 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1329))
1329 -8173 -8174 0
8173 -1329 0
8174 -1329 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1330))
1330 -8175 -8176 0
8175 -1330 0
8176 -1330 0
c ((x_00002_00001 != x_00001_00001)=tv=SATLiteral(1331))
-137 2 1331 0
-139 4 1331 0
-141 6 1331 0
-143 8 1331 0
-145 10 1331 0
-147 12 1331 0
-149 14 1331 0
-151 16 1331 0
150 -15 1331 0
-2 137 1331 0
-4 139 1331 0
-6 141 1331 0
-8 143 1331 0
-10 145 1331 0
-12 147 1331 0
-14 149 1331 0
-16 151 1331 0
15 -150 1331 0
-137 -2 -1331 0
-139 -4 -1331 0
-141 -6 -1331 0
-143 -8 -1331 0
-145 -10 -1331 0
-147 -12 -1331 0
-149 -14 -1331 0
-151 -16 -1331 0
150 15 -1331 0
c ((x_00002_00006 != x_00002_00007)=tv=SATLiteral(1332))
-212 227 1332 0
-214 229 1332 0
-216 231 1332 0
-218 233 1332 0
-220 235 1332 0
-222 237 1332 0
-224 239 1332 0
-226 241 1332 0
225 -240 1332 0
-227 212 1332 0
-229 214 1332 0
-231 216 1332 0
-233 218 1332 0
-235 220 1332 0
-237 222 1332 0
-239 224 1332 0
-241 226 1332 0
240 -225 1332 0
-212 -227 -1332 0
-214 -229 -1332 0
-216 -231 -1332 0
-218 -233 -1332 0
-220 -235 -1332 0
-222 -237 -1332 0
-224 -239 -1332 0
-226 -241 -1332 0
225 240 -1332 0
c ((x_00003_00001 != x_00003_00002)=tv=SATLiteral(1333))
-272 287 1333 0
-274 289 1333 0
-276 291 1333 0
-278 293 1333 0
-280 295 1333 0
-282 297 1333 0
-284 299 1333 0
-286 301 1333 0
285 -300 1333 0
-287 272 1333 0
-289 274 1333 0
-291 276 1333 0
-293 278 1333 0
-295 280 1333 0
-297 282 1333 0
-299 284 1333 0
-301 286 1333 0
300 -285 1333 0
-272 -287 -1333 0
-274 -289 -1333 0
-276 -291 -1333 0
-278 -293 -1333 0
-280 -295 -1333 0
-282 -297 -1333 0
-284 -299 -1333 0
-286 -301 -1333 0
285 300 -1333 0
c ((x_00003_00008 != x_00003_00009)=tv=SATLiteral(1334))
-377 392 1334 0
-379 394 1334 0
-381 396 1334 0
-383 398 1334 0
-385 400 1334 0
-387 402 1334 0
-389 404 1334 0
-391 406 1334 0
390 -405 1334 0
-392 377 1334 0
-394 379 1334 0
-396 381 1334 0
-398 383 1334 0
-400 385 1334 0
-402 387 1334 0
-404 389 1334 0
-406 391 1334 0
405 -390 1334 0
-377 -392 -1334 0
-379 -394 -1334 0
-381 -396 -1334 0
-383 -398 -1334 0
-385 -400 -1334 0
-387 -402 -1334 0
-389 -404 -1334 0
-391 -406 -1334 0
390 405 -1334 0
c ((x_00004_00001 != x_00004_00002)=tv=SATLiteral(1335))
-407 422 1335 0
-409 424 1335 0
-411 426 1335 0
-413 428 1335 0
-415 430 1335 0
-417 432 1335 0
-419 434 1335 0
-421 436 1335 0
420 -435 1335 0
-422 407 1335 0
-424 409 1335 0
-426 411 1335 0
-428 413 1335 0
-430 415 1335 0
-432 417 1335 0
-434 419 1335 0
-436 421 1335 0
435 -420 1335 0
-407 -422 -1335 0
-409 -424 -1335 0
-411 -426 -1335 0
-413 -428 -1335 0
-415 -430 -1335 0
-417 -432 -1335 0
-419 -434 -1335 0
-421 -436 -1335 0
420 435 -1335 0
c ((x_00004_00005 != x_00004_00006)=tv=SATLiteral(1336))
-467 482 1336 0
-469 484 1336 0
-471 486 1336 0
-473 488 1336 0
-475 490 1336 0
-477 492 1336 0
-479 494 1336 0
-481 496 1336 0
480 -495 1336 0
-482 467 1336 0
-484 469 1336 0
-486 471 1336 0
-488 473 1336 0
-490 475 1336 0
-492 477 1336 0
-494 479 1336 0
-496 481 1336 0
495 -480 1336 0
-467 -482 -1336 0
-469 -484 -1336 0
-471 -486 -1336 0
-473 -488 -1336 0
-475 -490 -1336 0
-477 -492 -1336 0
-479 -494 -1336 0
-481 -496 -1336 0
480 495 -1336 0
c ((x_00004_00008 != x_00005_00008)=tv=SATLiteral(1337))
-512 647 1337 0
-514 649 1337 0
-516 651 1337 0
-518 653 1337 0
-520 655 1337 0
-522 657 1337 0
-524 659 1337 0
-526 661 1337 0
525 -660 1337 0
-647 512 1337 0
-649 514 1337 0
-651 516 1337 0
-653 518 1337 0
-655 520 1337 0
-657 522 1337 0
-659 524 1337 0
-661 526 1337 0
660 -525 1337 0
-512 -647 -1337 0
-514 -649 -1337 0
-516 -651 -1337 0
-518 -653 -1337 0
-520 -655 -1337 0
-522 -657 -1337 0
-524 -659 -1337 0
-526 -661 -1337 0
525 660 -1337 0
c ((x_00004_00009 != x_00005_00009)=tv=SATLiteral(1338))
-527 662 1338 0
-529 664 1338 0
-531 666 1338 0
-533 668 1338 0
-535 670 1338 0
-537 672 1338 0
-539 674 1338 0
-541 676 1338 0
540 -675 1338 0
-662 527 1338 0
-664 529 1338 0
-666 531 1338 0
-668 533 1338 0
-670 535 1338 0
-672 537 1338 0
-674 539 1338 0
-676 541 1338 0
675 -540 1338 0
-527 -662 -1338 0
-529 -664 -1338 0
-531 -666 -1338 0
-533 -668 -1338 0
-535 -670 -1338 0
-537 -672 -1338 0
-539 -674 -1338 0
-541 -676 -1338 0
540 675 -1338 0
c ((x_00005_00001 != x_00006_00001)=tv=SATLiteral(1339))
-542 677 1339 0
-544 679 1339 0
-546 681 1339 0
-548 683 1339 0
-550 685 1339 0
-552 687 1339 0
-554 689 1339 0
-556 691 1339 0
555 -690 1339 0
-677 542 1339 0
-679 544 1339 0
-681 546 1339 0
-683 548 1339 0
-685 550 1339 0
-687 552 1339 0
-689 554 1339 0
-691 556 1339 0
690 -555 1339 0
-542 -677 -1339 0
-544 -679 -1339 0
-546 -681 -1339 0
-548 -683 -1339 0
-550 -685 -1339 0
-552 -687 -1339 0
-554 -689 -1339 0
-556 -691 -1339 0
555 690 -1339 0
c ((x_00005_00002 != x_00006_00002)=tv=SATLiteral(1340))
-557 692 1340 0
-559 694 1340 0
-561 696 1340 0
-563 698 1340 0
-565 700 1340 0
-567 702 1340 0
-569 704 1340 0
-571 706 1340 0
570 -705 1340 0
-692 557 1340 0
-694 559 1340 0
-696 561 1340 0
-698 563 1340 0
-700 565 1340 0
-702 567 1340 0
-704 569 1340 0
-706 571 1340 0
705 -570 1340 0
-557 -692 -1340 0
-559 -694 -1340 0
-561 -696 -1340 0
-563 -698 -1340 0
-565 -700 -1340 0
-567 -702 -1340 0
-569 -704 -1340 0
-571 -706 -1340 0
570 705 -1340 0
c ((x_00006_00004 != x_00006_00005)=tv=SATLiteral(1341))
-722 737 1341 0
-724 739 1341 0
-726 741 1341 0
-728 743 1341 0
-730 745 1341 0
-732 747 1341 0
-734 749 1341 0
-736 751 1341 0
735 -750 1341 0
-737 722 1341 0
-739 724 1341 0
-741 726 1341 0
-743 728 1341 0
-745 730 1341 0
-747 732 1341 0
-749 734 1341 0
-751 736 1341 0
750 -735 1341 0
-722 -737 -1341 0
-724 -739 -1341 0
-726 -741 -1341 0
-728 -743 -1341 0
-730 -745 -1341 0
-732 -747 -1341 0
-734 -749 -1341 0
-736 -751 -1341 0
735 750 -1341 0
c ((x_00006_00008 != x_00006_00009)=tv=SATLiteral(1342))
-782 797 1342 0
-784 799 1342 0
-786 801 1342 0
-788 803 1342 0
-790 805 1342 0
-792 807 1342 0
-794 809 1342 0
-796 811 1342 0
795 -810 1342 0
-797 782 1342 0
-799 784 1342 0
-801 786 1342 0
-803 788 1342 0
-805 790 1342 0
-807 792 1342 0
-809 794 1342 0
-811 796 1342 0
810 -795 1342 0
-782 -797 -1342 0
-784 -799 -1342 0
-786 -801 -1342 0
-788 -803 -1342 0
-790 -805 -1342 0
-792 -807 -1342 0
-794 -809 -1342 0
-796 -811 -1342 0
795 810 -1342 0
c ((x_00007_00001 != x_00007_00002)=tv=SATLiteral(1343))
-812 827 1343 0
-814 829 1343 0
-816 831 1343 0
-818 833 1343 0
-820 835 1343 0
-822 837 1343 0
-824 839 1343 0
-826 841 1343 0
825 -840 1343 0
-827 812 1343 0
-829 814 1343 0
-831 816 1343 0
-833 818 1343 0
-835 820 1343 0
-837 822 1343 0
-839 824 1343 0
-841 826 1343 0
840 -825 1343 0
-812 -827 -1343 0
-814 -829 -1343 0
-816 -831 -1343 0
-818 -833 -1343 0
-820 -835 -1343 0
-822 -837 -1343 0
-824 -839 -1343 0
-826 -841 -1343 0
825 840 -1343 0
c ((x_00007_00008 != x_00007_00009)=tv=SATLiteral(1344))
-917 932 1344 0
-919 934 1344 0
-921 936 1344 0
-923 938 1344 0
-925 940 1344 0
-927 942 1344 0
-929 944 1344 0
-931 946 1344 0
930 -945 1344 0
-932 917 1344 0
-934 919 1344 0
-936 921 1344 0
-938 923 1344 0
-940 925 1344 0
-942 927 1344 0
-944 929 1344 0
-946 931 1344 0
945 -930 1344 0
-917 -932 -1344 0
-919 -934 -1344 0
-921 -936 -1344 0
-923 -938 -1344 0
-925 -940 -1344 0
-927 -942 -1344 0
-929 -944 -1344 0
-931 -946 -1344 0
930 945 -1344 0
c ((x_00008_00003 != x_00008_00004)=tv=SATLiteral(1345))
-977 992 1345 0
-979 994 1345 0
-981 996 1345 0
-983 998 1345 0
-985 1000 1345 0
-987 1002 1345 0
-989 1004 1345 0
-991 1006 1345 0
990 -1005 1345 0
-992 977 1345 0
-994 979 1345 0
-996 981 1345 0
-998 983 1345 0
-1000 985 1345 0
-1002 987 1345 0
-1004 989 1345 0
-1006 991 1345 0
1005 -990 1345 0
-977 -992 -1345 0
-979 -994 -1345 0
-981 -996 -1345 0
-983 -998 -1345 0
-985 -1000 -1345 0
-987 -1002 -1345 0
-989 -1004 -1345 0
-991 -1006 -1345 0
990 1005 -1345 0
c ((x_00008_00009 != x_00009_00009)=tv=SATLiteral(1346))
-1067 1202 1346 0
-1069 1204 1346 0
-1071 1206 1346 0
-1073 1208 1346 0
-1075 1210 1346 0
-1077 1212 1346 0
-1079 1214 1346 0
-1081 1216 1346 0
1080 -1215 1346 0
-1202 1067 1346 0
-1204 1069 1346 0
-1206 1071 1346 0
-1208 1073 1346 0
-1210 1075 1346 0
-1212 1077 1346 0
-1214 1079 1346 0
-1216 1081 1346 0
1215 -1080 1346 0
-1067 -1202 -1346 0
-1069 -1204 -1346 0
-1071 -1206 -1346 0
-1073 -1208 -1346 0
-1075 -1210 -1346 0
-1077 -1212 -1346 0
-1079 -1214 -1346 0
-1081 -1216 -1346 0
1080 1215 -1346 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1347))
1347 -8177 -8178 0
8177 -1347 0
8178 -1347 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1348))
1348 -8179 -8180 0
8179 -1348 0
8180 -1348 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1349))
1349 -8181 -8182 0
8181 -1349 0
8182 -1349 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1350))
1350 -8183 -8184 0
8183 -1350 0
8184 -1350 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1351))
1351 -8185 -8186 0
8185 -1351 0
8186 -1351 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1352))
1352 -8187 -8188 0
8187 -1352 0
8188 -1352 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1353))
1353 -8189 -8190 0
8189 -1353 0
8190 -1353 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1354))
1354 -8191 -8192 0
8191 -1354 0
8192 -1354 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1355))
1355 -8193 -8194 0
8193 -1355 0
8194 -1355 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1356))
1356 -8195 -8196 0
8195 -1356 0
8196 -1356 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1357))
1357 -8197 -8198 0
8197 -1357 0
8198 -1357 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1358))
1358 -8199 -8200 0
8199 -1358 0
8200 -1358 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1359))
1359 -8201 -8202 0
8201 -1359 0
8202 -1359 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1360))
1360 -8203 -8204 0
8203 -1360 0
8204 -1360 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1361))
1361 -8205 -8206 0
8205 -1361 0
8206 -1361 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1362))
1362 -8207 -8208 0
8207 -1362 0
8208 -1362 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1363))
1363 -8209 -8210 0
8209 -1363 0
8210 -1363 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1364))
1364 -8211 -8212 0
8211 -1364 0
8212 -1364 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1365))
1365 -8213 -8214 0
8213 -1365 0
8214 -1365 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1366))
1366 -8215 -8216 0
8215 -1366 0
8216 -1366 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1367))
1367 -8217 -8218 0
8217 -1367 0
8218 -1367 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1368))
1368 -8219 -8220 0
8219 -1368 0
8220 -1368 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1369))
1369 -8221 -8222 0
8221 -1369 0
8222 -1369 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1370))
1370 -8223 -8224 0
8223 -1370 0
8224 -1370 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1371))
1371 -8225 -8226 0
8225 -1371 0
8226 -1371 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1372))
1372 -8227 -8228 0
8227 -1372 0
8228 -1372 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1373))
1373 -8229 -8230 0
8229 -1373 0
8230 -1373 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1374))
1374 -8231 -8232 0
8231 -1374 0
8232 -1374 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1375))
1375 -8233 -8234 0
8233 -1375 0
8234 -1375 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1376))
1376 -8235 -8236 0
8235 -1376 0
8236 -1376 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1377))
1377 -8237 -8238 0
8237 -1377 0
8238 -1377 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1378))
1378 -8239 -8240 0
8239 -1378 0
8240 -1378 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1379))
1379 -8241 -8242 0
8241 -1379 0
8242 -1379 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1380))
1380 -8243 -8244 0
8243 -1380 0
8244 -1380 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1381))
1381 -8245 -8246 0
8245 -1381 0
8246 -1381 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1382))
1382 -8247 -8248 0
8247 -1382 0
8248 -1382 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1383))
1383 -8249 -8250 0
8249 -1383 0
8250 -1383 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1384))
1384 -8251 -8252 0
8251 -1384 0
8252 -1384 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1385))
1385 -8253 -8254 0
8253 -1385 0
8254 -1385 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1386))
1386 -8255 -8256 0
8255 -1386 0
8256 -1386 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1387))
1387 -8257 -8258 0
8257 -1387 0
8258 -1387 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1388))
1388 -8259 -8260 0
8259 -1388 0
8260 -1388 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1389))
1389 -8261 -8262 0
8261 -1389 0
8262 -1389 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1390))
1390 -8263 -8264 0
8263 -1390 0
8264 -1390 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1391))
1391 -8265 -8266 0
8265 -1391 0
8266 -1391 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1392))
1392 -8267 -8268 0
8267 -1392 0
8268 -1392 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1393))
1393 -8269 -8270 0
8269 -1393 0
8270 -1393 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1394))
1394 -8271 -8272 0
8271 -1394 0
8272 -1394 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1395))
1395 -8273 -8274 0
8273 -1395 0
8274 -1395 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1396))
1396 -8275 -8276 0
8275 -1396 0
8276 -1396 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1397))
1397 -8277 -8278 0
8277 -1397 0
8278 -1397 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1398))
1398 -8279 -8280 0
8279 -1398 0
8280 -1398 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1399))
1399 -8281 -8282 0
8281 -1399 0
8282 -1399 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1400))
1400 -8283 -8284 0
8283 -1400 0
8284 -1400 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1401))
1401 -8285 -8286 0
8285 -1401 0
8286 -1401 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1402))
1402 -8287 -8288 0
8287 -1402 0
8288 -1402 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1403))
1403 -8289 -8290 0
8289 -1403 0
8290 -1403 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1404))
1404 -8291 -8292 0
8291 -1404 0
8292 -1404 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1405))
1405 -8293 -8294 0
8293 -1405 0
8294 -1405 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1406))
1406 -8295 -8296 0
8295 -1406 0
8296 -1406 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1407))
1407 -8297 -8298 0
8297 -1407 0
8298 -1407 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1408))
1408 -8299 -8300 0
8299 -1408 0
8300 -1408 0
c ((SATLiteral(8301) /\ SATLiteral(8302))=tv=SATLiteral(1409))
1409 -8301 -8302 0
8301 -1409 0
8302 -1409 0
c ((SATLiteral(8303) /\ SATLiteral(8304))=tv=SATLiteral(1410))
1410 -8303 -8304 0
8303 -1410 0
8304 -1410 0
c ((SATLiteral(8305) /\ SATLiteral(8306))=tv=SATLiteral(1411))
1411 -8305 -8306 0
8305 -1411 0
8306 -1411 0
c ((SATLiteral(8307) /\ SATLiteral(8308))=tv=SATLiteral(1412))
1412 -8307 -8308 0
8307 -1412 0
8308 -1412 0
c ((SATLiteral(8309) /\ SATLiteral(8310))=tv=SATLiteral(1413))
1413 -8309 -8310 0
8309 -1413 0
8310 -1413 0
c ((SATLiteral(8311) /\ SATLiteral(8312))=tv=SATLiteral(1414))
1414 -8311 -8312 0
8311 -1414 0
8312 -1414 0
c ((SATLiteral(8313) /\ SATLiteral(8314))=tv=SATLiteral(1415))
1415 -8313 -8314 0
8313 -1415 0
8314 -1415 0
c ((SATLiteral(8315) /\ SATLiteral(8316))=tv=SATLiteral(1416))
1416 -8315 -8316 0
8315 -1416 0
8316 -1416 0
c ((SATLiteral(8317) /\ SATLiteral(8318))=tv=SATLiteral(1417))
1417 -8317 -8318 0
8317 -1417 0
8318 -1417 0
c ((SATLiteral(8319) /\ SATLiteral(8320))=tv=SATLiteral(1418))
1418 -8319 -8320 0
8319 -1418 0
8320 -1418 0
c ((SATLiteral(8321) /\ SATLiteral(8322))=tv=SATLiteral(1419))
1419 -8321 -8322 0
8321 -1419 0
8322 -1419 0
c ((SATLiteral(8323) /\ SATLiteral(8324))=tv=SATLiteral(1420))
1420 -8323 -8324 0
8323 -1420 0
8324 -1420 0
c ((SATLiteral(8325) /\ SATLiteral(8326))=tv=SATLiteral(1421))
1421 -8325 -8326 0
8325 -1421 0
8326 -1421 0
c ((SATLiteral(8327) /\ SATLiteral(8328))=tv=SATLiteral(1422))
1422 -8327 -8328 0
8327 -1422 0
8328 -1422 0
c ((SATLiteral(8329) /\ SATLiteral(8330))=tv=SATLiteral(1423))
1423 -8329 -8330 0
8329 -1423 0
8330 -1423 0
c ((SATLiteral(8331) /\ SATLiteral(8332))=tv=SATLiteral(1424))
1424 -8331 -8332 0
8331 -1424 0
8332 -1424 0
c ((SATLiteral(8333) /\ SATLiteral(8334))=tv=SATLiteral(1425))
1425 -8333 -8334 0
8333 -1425 0
8334 -1425 0
c ((SATLiteral(8335) /\ SATLiteral(8336))=tv=SATLiteral(1426))
1426 -8335 -8336 0
8335 -1426 0
8336 -1426 0
c ((SATLiteral(8337) /\ SATLiteral(8338))=tv=SATLiteral(1427))
1427 -8337 -8338 0
8337 -1427 0
8338 -1427 0
c ((SATLiteral(8339) /\ SATLiteral(8340))=tv=SATLiteral(1428))
1428 -8339 -8340 0
8339 -1428 0
8340 -1428 0
c ((SATLiteral(8341) /\ SATLiteral(8342))=tv=SATLiteral(1429))
1429 -8341 -8342 0
8341 -1429 0
8342 -1429 0
c ((SATLiteral(8343) /\ SATLiteral(8344))=tv=SATLiteral(1430))
1430 -8343 -8344 0
8343 -1430 0
8344 -1430 0
c ((SATLiteral(8345) /\ SATLiteral(8346))=tv=SATLiteral(1431))
1431 -8345 -8346 0
8345 -1431 0
8346 -1431 0
c ((SATLiteral(8347) /\ SATLiteral(8348))=tv=SATLiteral(1432))
1432 -8347 -8348 0
8347 -1432 0
8348 -1432 0
c ((SATLiteral(8349) /\ SATLiteral(8350))=tv=SATLiteral(1433))
1433 -8349 -8350 0
8349 -1433 0
8350 -1433 0
c ((SATLiteral(8351) /\ SATLiteral(8352))=tv=SATLiteral(1434))
1434 -8351 -8352 0
8351 -1434 0
8352 -1434 0
c ((SATLiteral(8353) /\ SATLiteral(8354))=tv=SATLiteral(1435))
1435 -8353 -8354 0
8353 -1435 0
8354 -1435 0
c ((SATLiteral(8355) /\ SATLiteral(8356))=tv=SATLiteral(1436))
1436 -8355 -8356 0
8355 -1436 0
8356 -1436 0
c ((SATLiteral(8357) /\ SATLiteral(8358))=tv=SATLiteral(1437))
1437 -8357 -8358 0
8357 -1437 0
8358 -1437 0
c ((SATLiteral(8359) /\ SATLiteral(8360))=tv=SATLiteral(1438))
1438 -8359 -8360 0
8359 -1438 0
8360 -1438 0
c ((SATLiteral(8361) /\ SATLiteral(8362))=tv=SATLiteral(1439))
1439 -8361 -8362 0
8361 -1439 0
8362 -1439 0
c ((SATLiteral(8363) /\ SATLiteral(8364))=tv=SATLiteral(1440))
1440 -8363 -8364 0
8363 -1440 0
8364 -1440 0
c ((SATLiteral(8365) /\ SATLiteral(8366))=tv=SATLiteral(1441))
1441 -8365 -8366 0
8365 -1441 0
8366 -1441 0
c ((SATLiteral(8367) /\ SATLiteral(8368))=tv=SATLiteral(1442))
1442 -8367 -8368 0
8367 -1442 0
8368 -1442 0
c ((SATLiteral(8369) /\ SATLiteral(8370))=tv=SATLiteral(1443))
1443 -8369 -8370 0
8369 -1443 0
8370 -1443 0
c ((SATLiteral(8371) /\ SATLiteral(8372))=tv=SATLiteral(1444))
1444 -8371 -8372 0
8371 -1444 0
8372 -1444 0
c ((SATLiteral(8373) /\ SATLiteral(8374))=tv=SATLiteral(1445))
1445 -8373 -8374 0
8373 -1445 0
8374 -1445 0
c ((SATLiteral(8375) /\ SATLiteral(8376))=tv=SATLiteral(1446))
1446 -8375 -8376 0
8375 -1446 0
8376 -1446 0
c ((SATLiteral(8377) /\ SATLiteral(8378))=tv=SATLiteral(1447))
1447 -8377 -8378 0
8377 -1447 0
8378 -1447 0
c ((SATLiteral(8379) /\ SATLiteral(8380))=tv=SATLiteral(1448))
1448 -8379 -8380 0
8379 -1448 0
8380 -1448 0
c ((SATLiteral(8381) /\ SATLiteral(8382))=tv=SATLiteral(1449))
1449 -8381 -8382 0
8381 -1449 0
8382 -1449 0
c ((SATLiteral(8383) /\ SATLiteral(8384))=tv=SATLiteral(1450))
1450 -8383 -8384 0
8383 -1450 0
8384 -1450 0
c ((SATLiteral(8385) /\ SATLiteral(8386))=tv=SATLiteral(1451))
1451 -8385 -8386 0
8385 -1451 0
8386 -1451 0
c ((SATLiteral(8387) /\ SATLiteral(8388))=tv=SATLiteral(1452))
1452 -8387 -8388 0
8387 -1452 0
8388 -1452 0
c ((SATLiteral(8389) /\ SATLiteral(8390))=tv=SATLiteral(1453))
1453 -8389 -8390 0
8389 -1453 0
8390 -1453 0
c ((SATLiteral(8391) /\ SATLiteral(8392))=tv=SATLiteral(1454))
1454 -8391 -8392 0
8391 -1454 0
8392 -1454 0
c ((SATLiteral(8393) /\ SATLiteral(8394))=tv=SATLiteral(1455))
1455 -8393 -8394 0
8393 -1455 0
8394 -1455 0
c ((SATLiteral(8395) /\ SATLiteral(8396))=tv=SATLiteral(1456))
1456 -8395 -8396 0
8395 -1456 0
8396 -1456 0
c ((SATLiteral(8397) /\ SATLiteral(8398))=tv=SATLiteral(1457))
1457 -8397 -8398 0
8397 -1457 0
8398 -1457 0
c ((SATLiteral(8399) /\ SATLiteral(8400))=tv=SATLiteral(1458))
1458 -8399 -8400 0
8399 -1458 0
8400 -1458 0
c ((SATLiteral(8401) /\ SATLiteral(8402))=tv=SATLiteral(1459))
1459 -8401 -8402 0
8401 -1459 0
8402 -1459 0
c ((SATLiteral(8403) /\ SATLiteral(8404))=tv=SATLiteral(1460))
1460 -8403 -8404 0
8403 -1460 0
8404 -1460 0
c ((SATLiteral(8405) /\ SATLiteral(8406))=tv=SATLiteral(1461))
1461 -8405 -8406 0
8405 -1461 0
8406 -1461 0
c ((SATLiteral(8407) /\ SATLiteral(8408))=tv=SATLiteral(1462))
1462 -8407 -8408 0
8407 -1462 0
8408 -1462 0
c ((SATLiteral(8409) /\ SATLiteral(8410))=tv=SATLiteral(1463))
1463 -8409 -8410 0
8409 -1463 0
8410 -1463 0
c ((SATLiteral(8411) /\ SATLiteral(8412))=tv=SATLiteral(1464))
1464 -8411 -8412 0
8411 -1464 0
8412 -1464 0
c ((SATLiteral(8413) /\ SATLiteral(8414))=tv=SATLiteral(1465))
1465 -8413 -8414 0
8413 -1465 0
8414 -1465 0
c ((SATLiteral(8415) /\ SATLiteral(8416))=tv=SATLiteral(1466))
1466 -8415 -8416 0
8415 -1466 0
8416 -1466 0
c ((SATLiteral(8417) /\ SATLiteral(8418))=tv=SATLiteral(1467))
1467 -8417 -8418 0
8417 -1467 0
8418 -1467 0
c ((SATLiteral(8419) /\ SATLiteral(8420))=tv=SATLiteral(1468))
1468 -8419 -8420 0
8419 -1468 0
8420 -1468 0
c ((SATLiteral(8421) /\ SATLiteral(8422))=tv=SATLiteral(1469))
1469 -8421 -8422 0
8421 -1469 0
8422 -1469 0
c ((SATLiteral(8423) /\ SATLiteral(8424))=tv=SATLiteral(1470))
1470 -8423 -8424 0
8423 -1470 0
8424 -1470 0
c ((SATLiteral(8425) /\ SATLiteral(8426))=tv=SATLiteral(1471))
1471 -8425 -8426 0
8425 -1471 0
8426 -1471 0
c ((SATLiteral(8427) /\ SATLiteral(8428))=tv=SATLiteral(1472))
1472 -8427 -8428 0
8427 -1472 0
8428 -1472 0
c ((SATLiteral(8429) /\ SATLiteral(8430))=tv=SATLiteral(1473))
1473 -8429 -8430 0
8429 -1473 0
8430 -1473 0
c ((SATLiteral(8431) /\ SATLiteral(8432))=tv=SATLiteral(1474))
1474 -8431 -8432 0
8431 -1474 0
8432 -1474 0
c ((SATLiteral(8433) /\ SATLiteral(8434))=tv=SATLiteral(1475))
1475 -8433 -8434 0
8433 -1475 0
8434 -1475 0
c ((SATLiteral(8435) /\ SATLiteral(8436))=tv=SATLiteral(1476))
1476 -8435 -8436 0
8435 -1476 0
8436 -1476 0
c ((SATLiteral(8437) /\ SATLiteral(8438))=tv=SATLiteral(1477))
1477 -8437 -8438 0
8437 -1477 0
8438 -1477 0
c ((SATLiteral(8439) /\ SATLiteral(8440))=tv=SATLiteral(1478))
1478 -8439 -8440 0
8439 -1478 0
8440 -1478 0
c ((SATLiteral(8441) /\ SATLiteral(8442))=tv=SATLiteral(1479))
1479 -8441 -8442 0
8441 -1479 0
8442 -1479 0
c ((SATLiteral(8443) /\ SATLiteral(8444))=tv=SATLiteral(1480))
1480 -8443 -8444 0
8443 -1480 0
8444 -1480 0
c ((SATLiteral(8445) /\ SATLiteral(8446))=tv=SATLiteral(1481))
1481 -8445 -8446 0
8445 -1481 0
8446 -1481 0
c ((SATLiteral(8447) /\ SATLiteral(8448))=tv=SATLiteral(1482))
1482 -8447 -8448 0
8447 -1482 0
8448 -1482 0
c ((SATLiteral(8449) /\ SATLiteral(8450))=tv=SATLiteral(1483))
1483 -8449 -8450 0
8449 -1483 0
8450 -1483 0
c ((SATLiteral(8451) /\ SATLiteral(8452))=tv=SATLiteral(1484))
1484 -8451 -8452 0
8451 -1484 0
8452 -1484 0
c ((SATLiteral(8453) /\ SATLiteral(8454))=tv=SATLiteral(1485))
1485 -8453 -8454 0
8453 -1485 0
8454 -1485 0
c ((SATLiteral(8455) /\ SATLiteral(8456))=tv=SATLiteral(1486))
1486 -8455 -8456 0
8455 -1486 0
8456 -1486 0
c ((SATLiteral(8457) /\ SATLiteral(8458))=tv=SATLiteral(1487))
1487 -8457 -8458 0
8457 -1487 0
8458 -1487 0
c ((SATLiteral(8459) /\ SATLiteral(8460))=tv=SATLiteral(1488))
1488 -8459 -8460 0
8459 -1488 0
8460 -1488 0
c ((SATLiteral(8461) /\ SATLiteral(8462))=tv=SATLiteral(1489))
1489 -8461 -8462 0
8461 -1489 0
8462 -1489 0
c ((SATLiteral(8463) /\ SATLiteral(8464))=tv=SATLiteral(1490))
1490 -8463 -8464 0
8463 -1490 0
8464 -1490 0
c ((SATLiteral(8465) /\ SATLiteral(8466))=tv=SATLiteral(1491))
1491 -8465 -8466 0
8465 -1491 0
8466 -1491 0
c ((SATLiteral(8467) /\ SATLiteral(8468))=tv=SATLiteral(1492))
1492 -8467 -8468 0
8467 -1492 0
8468 -1492 0
c ((SATLiteral(8469) /\ SATLiteral(8470))=tv=SATLiteral(1493))
1493 -8469 -8470 0
8469 -1493 0
8470 -1493 0
c ((SATLiteral(8471) /\ SATLiteral(8472))=tv=SATLiteral(1494))
1494 -8471 -8472 0
8471 -1494 0
8472 -1494 0
c ((SATLiteral(8473) /\ SATLiteral(8474))=tv=SATLiteral(1495))
1495 -8473 -8474 0
8473 -1495 0
8474 -1495 0
c ((SATLiteral(8475) /\ SATLiteral(8476))=tv=SATLiteral(1496))
1496 -8475 -8476 0
8475 -1496 0
8476 -1496 0
c ((SATLiteral(8477) /\ SATLiteral(8478))=tv=SATLiteral(1497))
1497 -8477 -8478 0
8477 -1497 0
8478 -1497 0
c ((SATLiteral(8479) /\ SATLiteral(8480))=tv=SATLiteral(1498))
1498 -8479 -8480 0
8479 -1498 0
8480 -1498 0
c ((SATLiteral(8481) /\ SATLiteral(8482))=tv=SATLiteral(1499))
1499 -8481 -8482 0
8481 -1499 0
8482 -1499 0
c ((SATLiteral(8483) /\ SATLiteral(8484))=tv=SATLiteral(1500))
1500 -8483 -8484 0
8483 -1500 0
8484 -1500 0
c ((SATLiteral(8485) /\ SATLiteral(8486))=tv=SATLiteral(1501))
1501 -8485 -8486 0
8485 -1501 0
8486 -1501 0
c ((SATLiteral(8487) /\ SATLiteral(8488))=tv=SATLiteral(1502))
1502 -8487 -8488 0
8487 -1502 0
8488 -1502 0
c ((SATLiteral(8489) /\ SATLiteral(8490))=tv=SATLiteral(1503))
1503 -8489 -8490 0
8489 -1503 0
8490 -1503 0
c ((SATLiteral(8491) /\ SATLiteral(8492))=tv=SATLiteral(1504))
1504 -8491 -8492 0
8491 -1504 0
8492 -1504 0
c ((SATLiteral(8493) /\ SATLiteral(8494))=tv=SATLiteral(1505))
1505 -8493 -8494 0
8493 -1505 0
8494 -1505 0
c ((SATLiteral(8495) /\ SATLiteral(8496))=tv=SATLiteral(1506))
1506 -8495 -8496 0
8495 -1506 0
8496 -1506 0
c ((SATLiteral(8497) /\ SATLiteral(8498))=tv=SATLiteral(1507))
1507 -8497 -8498 0
8497 -1507 0
8498 -1507 0
c ((SATLiteral(8499) /\ SATLiteral(8500))=tv=SATLiteral(1508))
1508 -8499 -8500 0
8499 -1508 0
8500 -1508 0
c ((SATLiteral(8501) /\ SATLiteral(8502))=tv=SATLiteral(1509))
1509 -8501 -8502 0
8501 -1509 0
8502 -1509 0
c ((SATLiteral(8503) /\ SATLiteral(8504))=tv=SATLiteral(1510))
1510 -8503 -8504 0
8503 -1510 0
8504 -1510 0
c ((SATLiteral(8505) /\ SATLiteral(8506))=tv=SATLiteral(1511))
1511 -8505 -8506 0
8505 -1511 0
8506 -1511 0
c ((SATLiteral(8507) /\ SATLiteral(8508))=tv=SATLiteral(1512))
1512 -8507 -8508 0
8507 -1512 0
8508 -1512 0
c ((SATLiteral(8509) /\ SATLiteral(8510))=tv=SATLiteral(1513))
1513 -8509 -8510 0
8509 -1513 0
8510 -1513 0
c ((SATLiteral(8511) /\ SATLiteral(8512))=tv=SATLiteral(1514))
1514 -8511 -8512 0
8511 -1514 0
8512 -1514 0
c ((SATLiteral(8513) /\ SATLiteral(8514))=tv=SATLiteral(1515))
1515 -8513 -8514 0
8513 -1515 0
8514 -1515 0
c ((SATLiteral(8515) /\ SATLiteral(8516))=tv=SATLiteral(1516))
1516 -8515 -8516 0
8515 -1516 0
8516 -1516 0
c ((SATLiteral(8517) /\ SATLiteral(8518))=tv=SATLiteral(1517))
1517 -8517 -8518 0
8517 -1517 0
8518 -1517 0
c ((SATLiteral(8519) /\ SATLiteral(8520))=tv=SATLiteral(1518))
1518 -8519 -8520 0
8519 -1518 0
8520 -1518 0
c ((SATLiteral(8521) /\ SATLiteral(8522))=tv=SATLiteral(1519))
1519 -8521 -8522 0
8521 -1519 0
8522 -1519 0
c ((SATLiteral(8523) /\ SATLiteral(8524))=tv=SATLiteral(1520))
1520 -8523 -8524 0
8523 -1520 0
8524 -1520 0
c ((SATLiteral(8525) /\ SATLiteral(8526))=tv=SATLiteral(1521))
1521 -8525 -8526 0
8525 -1521 0
8526 -1521 0
c ((SATLiteral(8527) /\ SATLiteral(8528))=tv=SATLiteral(1522))
1522 -8527 -8528 0
8527 -1522 0
8528 -1522 0
c ((SATLiteral(8529) /\ SATLiteral(8530))=tv=SATLiteral(1523))
1523 -8529 -8530 0
8529 -1523 0
8530 -1523 0
c ((SATLiteral(8531) /\ SATLiteral(8532))=tv=SATLiteral(1524))
1524 -8531 -8532 0
8531 -1524 0
8532 -1524 0
c ((SATLiteral(8533) /\ SATLiteral(8534))=tv=SATLiteral(1525))
1525 -8533 -8534 0
8533 -1525 0
8534 -1525 0
c ((SATLiteral(8535) /\ SATLiteral(8536))=tv=SATLiteral(1526))
1526 -8535 -8536 0
8535 -1526 0
8536 -1526 0
c ((SATLiteral(8537) /\ SATLiteral(8538))=tv=SATLiteral(1527))
1527 -8537 -8538 0
8537 -1527 0
8538 -1527 0
c ((SATLiteral(8539) /\ SATLiteral(8540))=tv=SATLiteral(1528))
1528 -8539 -8540 0
8539 -1528 0
8540 -1528 0
c ((SATLiteral(8541) /\ SATLiteral(8542))=tv=SATLiteral(1529))
1529 -8541 -8542 0
8541 -1529 0
8542 -1529 0
c ((SATLiteral(8543) /\ SATLiteral(8544))=tv=SATLiteral(1530))
1530 -8543 -8544 0
8543 -1530 0
8544 -1530 0
c ((SATLiteral(8545) /\ SATLiteral(8546))=tv=SATLiteral(1531))
1531 -8545 -8546 0
8545 -1531 0
8546 -1531 0
c ((SATLiteral(8547) /\ SATLiteral(8548))=tv=SATLiteral(1532))
1532 -8547 -8548 0
8547 -1532 0
8548 -1532 0
c ((SATLiteral(8549) /\ SATLiteral(8550))=tv=SATLiteral(1533))
1533 -8549 -8550 0
8549 -1533 0
8550 -1533 0
c ((SATLiteral(8551) /\ SATLiteral(8552))=tv=SATLiteral(1534))
1534 -8551 -8552 0
8551 -1534 0
8552 -1534 0
c ((SATLiteral(8553) /\ SATLiteral(8554))=tv=SATLiteral(1535))
1535 -8553 -8554 0
8553 -1535 0
8554 -1535 0
c ((SATLiteral(8555) /\ SATLiteral(8556))=tv=SATLiteral(1536))
1536 -8555 -8556 0
8555 -1536 0
8556 -1536 0
c ((SATLiteral(8557) /\ SATLiteral(8558))=tv=SATLiteral(1537))
1537 -8557 -8558 0
8557 -1537 0
8558 -1537 0
c ((SATLiteral(8559) /\ SATLiteral(8560))=tv=SATLiteral(1538))
1538 -8559 -8560 0
8559 -1538 0
8560 -1538 0
c ((SATLiteral(8561) /\ SATLiteral(8562))=tv=SATLiteral(1539))
1539 -8561 -8562 0
8561 -1539 0
8562 -1539 0
c ((SATLiteral(8563) /\ SATLiteral(8564))=tv=SATLiteral(1540))
1540 -8563 -8564 0
8563 -1540 0
8564 -1540 0
c ((SATLiteral(8565) /\ SATLiteral(8566))=tv=SATLiteral(1541))
1541 -8565 -8566 0
8565 -1541 0
8566 -1541 0
c ((SATLiteral(8567) /\ SATLiteral(8568))=tv=SATLiteral(1542))
1542 -8567 -8568 0
8567 -1542 0
8568 -1542 0
c ((SATLiteral(8569) /\ SATLiteral(8570))=tv=SATLiteral(1543))
1543 -8569 -8570 0
8569 -1543 0
8570 -1543 0
c ((SATLiteral(8571) /\ SATLiteral(8572))=tv=SATLiteral(1544))
1544 -8571 -8572 0
8571 -1544 0
8572 -1544 0
c ((SATLiteral(8573) /\ SATLiteral(8574))=tv=SATLiteral(1545))
1545 -8573 -8574 0
8573 -1545 0
8574 -1545 0
c ((SATLiteral(8575) /\ SATLiteral(8576))=tv=SATLiteral(1546))
1546 -8575 -8576 0
8575 -1546 0
8576 -1546 0
c ((SATLiteral(8577) /\ SATLiteral(8578))=tv=SATLiteral(1547))
1547 -8577 -8578 0
8577 -1547 0
8578 -1547 0
c ((SATLiteral(8579) /\ SATLiteral(8580))=tv=SATLiteral(1548))
1548 -8579 -8580 0
8579 -1548 0
8580 -1548 0
c ((SATLiteral(8581) /\ SATLiteral(8582))=tv=SATLiteral(1549))
1549 -8581 -8582 0
8581 -1549 0
8582 -1549 0
c ((SATLiteral(8583) /\ SATLiteral(8584))=tv=SATLiteral(1550))
1550 -8583 -8584 0
8583 -1550 0
8584 -1550 0
c ((SATLiteral(8585) /\ SATLiteral(8586))=tv=SATLiteral(1551))
1551 -8585 -8586 0
8585 -1551 0
8586 -1551 0
c ((SATLiteral(8587) /\ SATLiteral(8588))=tv=SATLiteral(1552))
1552 -8587 -8588 0
8587 -1552 0
8588 -1552 0
c ((SATLiteral(8589) /\ SATLiteral(8590))=tv=SATLiteral(1553))
1553 -8589 -8590 0
8589 -1553 0
8590 -1553 0
c ((SATLiteral(8591) /\ SATLiteral(8592))=tv=SATLiteral(1554))
1554 -8591 -8592 0
8591 -1554 0
8592 -1554 0
c ((SATLiteral(8593) /\ SATLiteral(8594))=tv=SATLiteral(1555))
1555 -8593 -8594 0
8593 -1555 0
8594 -1555 0
c ((SATLiteral(8595) /\ SATLiteral(8596))=tv=SATLiteral(1556))
1556 -8595 -8596 0
8595 -1556 0
8596 -1556 0
c ((SATLiteral(8597) /\ SATLiteral(8598))=tv=SATLiteral(1557))
1557 -8597 -8598 0
8597 -1557 0
8598 -1557 0
c ((SATLiteral(8599) /\ SATLiteral(8600))=tv=SATLiteral(1558))
1558 -8599 -8600 0
8599 -1558 0
8600 -1558 0
c ((SATLiteral(8601) /\ SATLiteral(8602))=tv=SATLiteral(1559))
1559 -8601 -8602 0
8601 -1559 0
8602 -1559 0
c ((SATLiteral(8603) /\ SATLiteral(8604))=tv=SATLiteral(1560))
1560 -8603 -8604 0
8603 -1560 0
8604 -1560 0
c ((SATLiteral(8605) /\ SATLiteral(8606))=tv=SATLiteral(1561))
1561 -8605 -8606 0
8605 -1561 0
8606 -1561 0
c ((SATLiteral(8607) /\ SATLiteral(8608))=tv=SATLiteral(1562))
1562 -8607 -8608 0
8607 -1562 0
8608 -1562 0
c ((SATLiteral(8609) /\ SATLiteral(8610))=tv=SATLiteral(1563))
1563 -8609 -8610 0
8609 -1563 0
8610 -1563 0
c ((SATLiteral(8611) /\ SATLiteral(8612))=tv=SATLiteral(1564))
1564 -8611 -8612 0
8611 -1564 0
8612 -1564 0
c ((SATLiteral(8613) /\ SATLiteral(8614))=tv=SATLiteral(1565))
1565 -8613 -8614 0
8613 -1565 0
8614 -1565 0
c ((SATLiteral(8615) /\ SATLiteral(8616))=tv=SATLiteral(1566))
1566 -8615 -8616 0
8615 -1566 0
8616 -1566 0
c ((SATLiteral(8617) /\ SATLiteral(8618))=tv=SATLiteral(1567))
1567 -8617 -8618 0
8617 -1567 0
8618 -1567 0
c ((SATLiteral(8619) /\ SATLiteral(8620))=tv=SATLiteral(1568))
1568 -8619 -8620 0
8619 -1568 0
8620 -1568 0
c ((SATLiteral(8621) /\ SATLiteral(8622))=tv=SATLiteral(1569))
1569 -8621 -8622 0
8621 -1569 0
8622 -1569 0
c ((SATLiteral(8623) /\ SATLiteral(8624))=tv=SATLiteral(1570))
1570 -8623 -8624 0
8623 -1570 0
8624 -1570 0
c ((SATLiteral(8625) /\ SATLiteral(8626))=tv=SATLiteral(1571))
1571 -8625 -8626 0
8625 -1571 0
8626 -1571 0
c ((SATLiteral(8627) /\ SATLiteral(8628))=tv=SATLiteral(1572))
1572 -8627 -8628 0
8627 -1572 0
8628 -1572 0
c ((SATLiteral(8629) /\ SATLiteral(8630))=tv=SATLiteral(1573))
1573 -8629 -8630 0
8629 -1573 0
8630 -1573 0
c ((SATLiteral(8631) /\ SATLiteral(8632))=tv=SATLiteral(1574))
1574 -8631 -8632 0
8631 -1574 0
8632 -1574 0
c ((SATLiteral(8633) /\ SATLiteral(8634))=tv=SATLiteral(1575))
1575 -8633 -8634 0
8633 -1575 0
8634 -1575 0
c ((SATLiteral(8635) /\ SATLiteral(8636))=tv=SATLiteral(1576))
1576 -8635 -8636 0
8635 -1576 0
8636 -1576 0
c ((SATLiteral(8637) /\ SATLiteral(8638))=tv=SATLiteral(1577))
1577 -8637 -8638 0
8637 -1577 0
8638 -1577 0
c ((SATLiteral(8639) /\ SATLiteral(8640))=tv=SATLiteral(1578))
1578 -8639 -8640 0
8639 -1578 0
8640 -1578 0
c ((SATLiteral(8641) /\ SATLiteral(8642))=tv=SATLiteral(1579))
1579 -8641 -8642 0
8641 -1579 0
8642 -1579 0
c ((SATLiteral(8643) /\ SATLiteral(8644))=tv=SATLiteral(1580))
1580 -8643 -8644 0
8643 -1580 0
8644 -1580 0
c ((SATLiteral(8645) /\ SATLiteral(8646))=tv=SATLiteral(1581))
1581 -8645 -8646 0
8645 -1581 0
8646 -1581 0
c ((SATLiteral(8647) /\ SATLiteral(8648))=tv=SATLiteral(1582))
1582 -8647 -8648 0
8647 -1582 0
8648 -1582 0
c ((SATLiteral(8649) /\ SATLiteral(8650))=tv=SATLiteral(1583))
1583 -8649 -8650 0
8649 -1583 0
8650 -1583 0
c ((SATLiteral(8651) /\ SATLiteral(8652))=tv=SATLiteral(1584))
1584 -8651 -8652 0
8651 -1584 0
8652 -1584 0
c ((SATLiteral(8653) /\ SATLiteral(8654))=tv=SATLiteral(1585))
1585 -8653 -8654 0
8653 -1585 0
8654 -1585 0
c ((SATLiteral(8655) /\ SATLiteral(8656))=tv=SATLiteral(1586))
1586 -8655 -8656 0
8655 -1586 0
8656 -1586 0
c ((SATLiteral(8657) /\ SATLiteral(8658))=tv=SATLiteral(1587))
1587 -8657 -8658 0
8657 -1587 0
8658 -1587 0
c ((SATLiteral(8659) /\ SATLiteral(8660))=tv=SATLiteral(1588))
1588 -8659 -8660 0
8659 -1588 0
8660 -1588 0
c ((SATLiteral(8661) /\ SATLiteral(8662))=tv=SATLiteral(1589))
1589 -8661 -8662 0
8661 -1589 0
8662 -1589 0
c (((SATLiteral(17) + SATLiteral(152) + SATLiteral(167))<=1)=tv=SATLiteral(1590))
-1590 -152 -167 0
-1590 -17 -167 0
-1590 -17 -152 0
1590 152 167 0
1590 17 167 0
1590 17 152 0
c (((SATLiteral(19) + SATLiteral(154) + SATLiteral(169))<=1)=tv=SATLiteral(1591))
-1591 -154 -169 0
-1591 -19 -169 0
-1591 -19 -154 0
1591 154 169 0
1591 19 169 0
1591 19 154 0
c (((SATLiteral(21) + SATLiteral(156) + SATLiteral(171))<=1)=tv=SATLiteral(1592))
-1592 -156 -171 0
-1592 -21 -171 0
-1592 -21 -156 0
1592 156 171 0
1592 21 171 0
1592 21 156 0
c (((SATLiteral(23) + SATLiteral(158) + SATLiteral(173))<=1)=tv=SATLiteral(1593))
-1593 -158 -173 0
-1593 -23 -173 0
-1593 -23 -158 0
1593 158 173 0
1593 23 173 0
1593 23 158 0
c (((SATLiteral(25) + SATLiteral(160) + SATLiteral(175))<=1)=tv=SATLiteral(1594))
-1594 -160 -175 0
-1594 -25 -175 0
-1594 -25 -160 0
1594 160 175 0
1594 25 175 0
1594 25 160 0
c (((SATLiteral(27) + SATLiteral(162) + SATLiteral(177))<=1)=tv=SATLiteral(1595))
-1595 -162 -177 0
-1595 -27 -177 0
-1595 -27 -162 0
1595 162 177 0
1595 27 177 0
1595 27 162 0
c (((SATLiteral(29) + SATLiteral(164) + SATLiteral(179))<=1)=tv=SATLiteral(1596))
-1596 -164 -179 0
-1596 -29 -179 0
-1596 -29 -164 0
1596 164 179 0
1596 29 179 0
1596 29 164 0
c (((SATLiteral(31) + SATLiteral(166) + SATLiteral(181))<=1)=tv=SATLiteral(1597))
-1597 -166 -181 0
-1597 -31 -181 0
-1597 -31 -166 0
1597 166 181 0
1597 31 181 0
1597 31 166 0
c (((SATLiteral(-30) + SATLiteral(-165) + SATLiteral(-180))<=1)=tv=SATLiteral(1598))
-1598 165 180 0
-1598 30 180 0
-1598 30 165 0
1598 -165 -180 0
1598 -30 -180 0
1598 -30 -165 0
c (((SATLiteral(47) + aux1873 + SATLiteral(182))<=1)=tv=SATLiteral(1599))
-1599 7850 0
-1599 -182 7849 0
-1599 -47 7849 0
-1599 -47 -182 0
1599 182 -7849 0
1599 47 -7849 0
1599 47 182 -7850 0
c (((SATLiteral(49) + aux1874 + SATLiteral(184))<=1)=tv=SATLiteral(1600))
-1600 7853 0
-1600 -184 7852 0
-1600 -49 7852 0
-1600 -49 -184 0
1600 184 -7852 0
1600 49 -7852 0
1600 49 184 -7853 0
c (((SATLiteral(51) + aux1875 + SATLiteral(186))<=1)=tv=SATLiteral(1601))
-1601 7856 0
-1601 -186 7855 0
-1601 -51 7855 0
-1601 -51 -186 0
1601 186 -7855 0
1601 51 -7855 0
1601 51 186 -7856 0
c (((SATLiteral(53) + aux1876 + SATLiteral(188))<=1)=tv=SATLiteral(1602))
-1602 7859 0
-1602 -188 7858 0
-1602 -53 7858 0
-1602 -53 -188 0
1602 188 -7858 0
1602 53 -7858 0
1602 53 188 -7859 0
c (((SATLiteral(55) + aux1877 + SATLiteral(190))<=1)=tv=SATLiteral(1603))
-1603 7862 0
-1603 -190 7861 0
-1603 -55 7861 0
-1603 -55 -190 0
1603 190 -7861 0
1603 55 -7861 0
1603 55 190 -7862 0
c (((SATLiteral(57) + aux1878 + SATLiteral(192))<=1)=tv=SATLiteral(1604))
-1604 7865 0
-1604 -192 7864 0
-1604 -57 7864 0
-1604 -57 -192 0
1604 192 -7864 0
1604 57 -7864 0
1604 57 192 -7865 0
c (((SATLiteral(59) + aux1879 + SATLiteral(194))<=1)=tv=SATLiteral(1605))
-1605 7868 0
-1605 -194 7867 0
-1605 -59 7867 0
-1605 -59 -194 0
1605 194 -7867 0
1605 59 -7867 0
1605 59 194 -7868 0
c (((SATLiteral(61) + aux1880 + SATLiteral(196))<=1)=tv=SATLiteral(1606))
-1606 7871 0
-1606 -196 7870 0
-1606 -61 7870 0
-1606 -61 -196 0
1606 196 -7870 0
1606 61 -7870 0
1606 61 196 -7871 0
c (((SATLiteral(-60) + aux1881 + SATLiteral(-195))<=1)=tv=SATLiteral(1607))
-1607 7874 0
-1607 195 7873 0
-1607 60 7873 0
-1607 60 195 0
1607 -195 -7873 0
1607 -60 -7873 0
1607 -60 -195 -7874 0
c (((SATLiteral(62) + SATLiteral(77) + SATLiteral(92))<=1)=tv=SATLiteral(1608))
-1608 -77 -92 0
-1608 -62 -92 0
-1608 -62 -77 0
1608 77 92 0
1608 62 92 0
1608 62 77 0
c (((SATLiteral(64) + SATLiteral(79) + SATLiteral(94))<=1)=tv=SATLiteral(1609))
-1609 -79 -94 0
-1609 -64 -94 0
-1609 -64 -79 0
1609 79 94 0
1609 64 94 0
1609 64 79 0
c (((SATLiteral(66) + SATLiteral(81) + SATLiteral(96))<=1)=tv=SATLiteral(1610))
-1610 -81 -96 0
-1610 -66 -96 0
-1610 -66 -81 0
1610 81 96 0
1610 66 96 0
1610 66 81 0
c (((SATLiteral(68) + SATLiteral(83) + SATLiteral(98))<=1)=tv=SATLiteral(1611))
-1611 -83 -98 0
-1611 -68 -98 0
-1611 -68 -83 0
1611 83 98 0
1611 68 98 0
1611 68 83 0
c (((SATLiteral(70) + SATLiteral(85) + SATLiteral(100))<=1)=tv=SATLiteral(1612))
-1612 -85 -100 0
-1612 -70 -100 0
-1612 -70 -85 0
1612 85 100 0
1612 70 100 0
1612 70 85 0
c (((SATLiteral(72) + SATLiteral(87) + SATLiteral(102))<=1)=tv=SATLiteral(1613))
-1613 -87 -102 0
-1613 -72 -102 0
-1613 -72 -87 0
1613 87 102 0
1613 72 102 0
1613 72 87 0
c (((SATLiteral(74) + SATLiteral(89) + SATLiteral(104))<=1)=tv=SATLiteral(1614))
-1614 -89 -104 0
-1614 -74 -104 0
-1614 -74 -89 0
1614 89 104 0
1614 74 104 0
1614 74 89 0
c (((SATLiteral(76) + SATLiteral(91) + SATLiteral(106))<=1)=tv=SATLiteral(1615))
-1615 -91 -106 0
-1615 -76 -106 0
-1615 -76 -91 0
1615 91 106 0
1615 76 106 0
1615 76 91 0
c (((SATLiteral(-75) + SATLiteral(-90) + SATLiteral(-105))<=1)=tv=SATLiteral(1616))
-1616 90 105 0
-1616 75 105 0
-1616 75 90 0
1616 -90 -105 0
1616 -75 -105 0
1616 -75 -90 0
c (((SATLiteral(122) + aux1882 + SATLiteral(242))<=1)=tv=SATLiteral(1617))
-1617 7877 0
-1617 -242 7876 0
-1617 -122 7876 0
-1617 -122 -242 0
1617 242 -7876 0
1617 122 -7876 0
1617 122 242 -7877 0
c (((SATLiteral(124) + aux1883 + SATLiteral(244))<=1)=tv=SATLiteral(1618))
-1618 7880 0
-1618 -244 7879 0
-1618 -124 7879 0
-1618 -124 -244 0
1618 244 -7879 0
1618 124 -7879 0
1618 124 244 -7880 0
c (((SATLiteral(126) + aux1884 + SATLiteral(246))<=1)=tv=SATLiteral(1619))
-1619 7883 0
-1619 -246 7882 0
-1619 -126 7882 0
-1619 -126 -246 0
1619 246 -7882 0
1619 126 -7882 0
1619 126 246 -7883 0
c (((SATLiteral(128) + aux1885 + SATLiteral(248))<=1)=tv=SATLiteral(1620))
-1620 7886 0
-1620 -248 7885 0
-1620 -128 7885 0
-1620 -128 -248 0
1620 248 -7885 0
1620 128 -7885 0
1620 128 248 -7886 0
c (((SATLiteral(130) + aux1886 + SATLiteral(250))<=1)=tv=SATLiteral(1621))
-1621 7889 0
-1621 -250 7888 0
-1621 -130 7888 0
-1621 -130 -250 0
1621 250 -7888 0
1621 130 -7888 0
1621 130 250 -7889 0
c (((SATLiteral(132) + aux1887 + SATLiteral(252))<=1)=tv=SATLiteral(1622))
-1622 7892 0
-1622 -252 7891 0
-1622 -132 7891 0
-1622 -132 -252 0
1622 252 -7891 0
1622 132 -7891 0
1622 132 252 -7892 0
c (((SATLiteral(134) + aux1888 + SATLiteral(254))<=1)=tv=SATLiteral(1623))
-1623 7895 0
-1623 -254 7894 0
-1623 -134 7894 0
-1623 -134 -254 0
1623 254 -7894 0
1623 134 -7894 0
1623 134 254 -7895 0
c (((SATLiteral(136) + aux1889 + SATLiteral(256))<=1)=tv=SATLiteral(1624))
-1624 7898 0
-1624 -256 7897 0
-1624 -136 7897 0
-1624 -136 -256 0
1624 256 -7897 0
1624 136 -7897 0
1624 136 256 -7898 0
c (((SATLiteral(-135) + aux1890 + SATLiteral(-255))<=1)=tv=SATLiteral(1625))
-1625 7901 0
-1625 255 7900 0
-1625 135 7900 0
-1625 135 255 0
1625 -255 -7900 0
1625 -135 -7900 0
1625 -135 -255 -7901 0
c (((aux1891 + aux1892 + aux1893)<=1)=tv=SATLiteral(1626))
-1626 7910 0
-1626 7906 7909 0
-1626 7907 0
-1626 7903 7909 0
-1626 7903 7906 0
-1626 7903 7907 0
-1626 7904 0
-1626 7904 7906 0
-1626 7904 7907 0
1626 -7904 -7906 -7909 0
1626 -7903 -7907 -7909 0
1626 -7903 -7906 -7910 0
c (((aux1894 + aux1895 + aux1896)<=1)=tv=SATLiteral(1627))
-1627 7919 0
-1627 7915 7918 0
-1627 7916 0
-1627 7912 7918 0
-1627 7912 7915 0
-1627 7912 7916 0
-1627 7913 0
-1627 7913 7915 0
-1627 7913 7916 0
1627 -7913 -7915 -7918 0
1627 -7912 -7916 -7918 0
1627 -7912 -7915 -7919 0
c (((aux1897 + aux1898 + aux1899)<=1)=tv=SATLiteral(1628))
-1628 7928 0
-1628 7924 7927 0
-1628 7925 0
-1628 7921 7927 0
-1628 7921 7924 0
-1628 7921 7925 0
-1628 7922 0
-1628 7922 7924 0
-1628 7922 7925 0
1628 -7922 -7924 -7927 0
1628 -7921 -7925 -7927 0
1628 -7921 -7924 -7928 0
c (((aux1900 + aux1901 + aux1902)<=1)=tv=SATLiteral(1629))
-1629 7937 0
-1629 7933 7936 0
-1629 7934 0
-1629 7930 7936 0
-1629 7930 7933 0
-1629 7930 7934 0
-1629 7931 0
-1629 7931 7933 0
-1629 7931 7934 0
1629 -7931 -7933 -7936 0
1629 -7930 -7934 -7936 0
1629 -7930 -7933 -7937 0
c (((aux1903 + aux1904 + aux1905)<=1)=tv=SATLiteral(1630))
-1630 7946 0
-1630 7942 7945 0
-1630 7943 0
-1630 7939 7945 0
-1630 7939 7942 0
-1630 7939 7943 0
-1630 7940 0
-1630 7940 7942 0
-1630 7940 7943 0
1630 -7940 -7942 -7945 0
1630 -7939 -7943 -7945 0
1630 -7939 -7942 -7946 0
c (((aux1906 + aux1907 + aux1908)<=1)=tv=SATLiteral(1631))
-1631 7955 0
-1631 7951 7954 0
-1631 7952 0
-1631 7948 7954 0
-1631 7948 7951 0
-1631 7948 7952 0
-1631 7949 0
-1631 7949 7951 0
-1631 7949 7952 0
1631 -7949 -7951 -7954 0
1631 -7948 -7952 -7954 0
1631 -7948 -7951 -7955 0
c (((aux1909 + aux1910 + aux1911)<=1)=tv=SATLiteral(1632))
-1632 7964 0
-1632 7960 7963 0
-1632 7961 0
-1632 7957 7963 0
-1632 7957 7960 0
-1632 7957 7961 0
-1632 7958 0
-1632 7958 7960 0
-1632 7958 7961 0
1632 -7958 -7960 -7963 0
1632 -7957 -7961 -7963 0
1632 -7957 -7960 -7964 0
c (((aux1912 + aux1913 + aux1914)<=1)=tv=SATLiteral(1633))
-1633 7973 0
-1633 7969 7972 0
-1633 7970 0
-1633 7966 7972 0
-1633 7966 7969 0
-1633 7966 7970 0
-1633 7967 0
-1633 7967 7969 0
-1633 7967 7970 0
1633 -7967 -7969 -7972 0
1633 -7966 -7970 -7972 0
1633 -7966 -7969 -7973 0
c (((aux1915 + aux1916 + aux1917)<=1)=tv=SATLiteral(1634))
-1634 7982 0
-1634 7978 7981 0
-1634 7979 0
-1634 7975 7981 0
-1634 7975 7978 0
-1634 7975 7979 0
-1634 7976 0
-1634 7976 7978 0
-1634 7976 7979 0
1634 -7976 -7978 -7981 0
1634 -7975 -7979 -7981 0
1634 -7975 -7978 -7982 0
c (((SATLiteral(317) + SATLiteral(332) + SATLiteral(452))<=1)=tv=SATLiteral(1635))
-1635 -332 -452 0
-1635 -317 -452 0
-1635 -317 -332 0
1635 332 452 0
1635 317 452 0
1635 317 332 0
c (((SATLiteral(319) + SATLiteral(334) + SATLiteral(454))<=1)=tv=SATLiteral(1636))
-1636 -334 -454 0
-1636 -319 -454 0
-1636 -319 -334 0
1636 334 454 0
1636 319 454 0
1636 319 334 0
c (((SATLiteral(321) + SATLiteral(336) + SATLiteral(456))<=1)=tv=SATLiteral(1637))
-1637 -336 -456 0
-1637 -321 -456 0
-1637 -321 -336 0
1637 336 456 0
1637 321 456 0
1637 321 336 0
c (((SATLiteral(323) + SATLiteral(338) + SATLiteral(458))<=1)=tv=SATLiteral(1638))
-1638 -338 -458 0
-1638 -323 -458 0
-1638 -323 -338 0
1638 338 458 0
1638 323 458 0
1638 323 338 0
c (((SATLiteral(325) + SATLiteral(340) + SATLiteral(460))<=1)=tv=SATLiteral(1639))
-1639 -340 -460 0
-1639 -325 -460 0
-1639 -325 -340 0
1639 340 460 0
1639 325 460 0
1639 325 340 0
c (((SATLiteral(327) + SATLiteral(342) + SATLiteral(462))<=1)=tv=SATLiteral(1640))
-1640 -342 -462 0
-1640 -327 -462 0
-1640 -327 -342 0
1640 342 462 0
1640 327 462 0
1640 327 342 0
c (((SATLiteral(329) + SATLiteral(344) + SATLiteral(464))<=1)=tv=SATLiteral(1641))
-1641 -344 -464 0
-1641 -329 -464 0
-1641 -329 -344 0
1641 344 464 0
1641 329 464 0
1641 329 344 0
c (((SATLiteral(331) + SATLiteral(346) + SATLiteral(466))<=1)=tv=SATLiteral(1642))
-1642 -346 -466 0
-1642 -331 -466 0
-1642 -331 -346 0
1642 346 466 0
1642 331 466 0
1642 331 346 0
c (((SATLiteral(-330) + SATLiteral(-345) + SATLiteral(-465))<=1)=tv=SATLiteral(1643))
-1643 345 465 0
-1643 330 465 0
-1643 330 345 0
1643 -345 -465 0
1643 -330 -465 0
1643 -330 -345 0
c (((aux1918 + aux1919 + aux1920)<=1)=tv=SATLiteral(1644))
-1644 7991 0
-1644 7987 7990 0
-1644 7988 0
-1644 7984 7990 0
-1644 7984 7987 0
-1644 7984 7988 0
-1644 7985 0
-1644 7985 7987 0
-1644 7985 7988 0
1644 -7985 -7987 -7990 0
1644 -7984 -7988 -7990 0
1644 -7984 -7987 -7991 0
c (((aux1921 + aux1922 + aux1923)<=1)=tv=SATLiteral(1645))
-1645 8000 0
-1645 7996 7999 0
-1645 7997 0
-1645 7993 7999 0
-1645 7993 7996 0
-1645 7993 7997 0
-1645 7994 0
-1645 7994 7996 0
-1645 7994 7997 0
1645 -7994 -7996 -7999 0
1645 -7993 -7997 -7999 0
1645 -7993 -7996 -8000 0
c (((aux1924 + aux1925 + aux1926)<=1)=tv=SATLiteral(1646))
-1646 8009 0
-1646 8005 8008 0
-1646 8006 0
-1646 8002 8008 0
-1646 8002 8005 0
-1646 8002 8006 0
-1646 8003 0
-1646 8003 8005 0
-1646 8003 8006 0
1646 -8003 -8005 -8008 0
1646 -8002 -8006 -8008 0
1646 -8002 -8005 -8009 0
c (((aux1927 + aux1928 + aux1929)<=1)=tv=SATLiteral(1647))
-1647 8018 0
-1647 8014 8017 0
-1647 8015 0
-1647 8011 8017 0
-1647 8011 8014 0
-1647 8011 8015 0
-1647 8012 0
-1647 8012 8014 0
-1647 8012 8015 0
1647 -8012 -8014 -8017 0
1647 -8011 -8015 -8017 0
1647 -8011 -8014 -8018 0
c (((aux1930 + aux1931 + aux1932)<=1)=tv=SATLiteral(1648))
-1648 8027 0
-1648 8023 8026 0
-1648 8024 0
-1648 8020 8026 0
-1648 8020 8023 0
-1648 8020 8024 0
-1648 8021 0
-1648 8021 8023 0
-1648 8021 8024 0
1648 -8021 -8023 -8026 0
1648 -8020 -8024 -8026 0
1648 -8020 -8023 -8027 0
c (((aux1933 + aux1934 + aux1935)<=1)=tv=SATLiteral(1649))
-1649 8036 0
-1649 8032 8035 0
-1649 8033 0
-1649 8029 8035 0
-1649 8029 8032 0
-1649 8029 8033 0
-1649 8030 0
-1649 8030 8032 0
-1649 8030 8033 0
1649 -8030 -8032 -8035 0
1649 -8029 -8033 -8035 0
1649 -8029 -8032 -8036 0
c (((aux1936 + aux1937 + aux1938)<=1)=tv=SATLiteral(1650))
-1650 8045 0
-1650 8041 8044 0
-1650 8042 0
-1650 8038 8044 0
-1650 8038 8041 0
-1650 8038 8042 0
-1650 8039 0
-1650 8039 8041 0
-1650 8039 8042 0
1650 -8039 -8041 -8044 0
1650 -8038 -8042 -8044 0
1650 -8038 -8041 -8045 0
c (((aux1939 + aux1940 + aux1941)<=1)=tv=SATLiteral(1651))
-1651 8054 0
-1651 8050 8053 0
-1651 8051 0
-1651 8047 8053 0
-1651 8047 8050 0
-1651 8047 8051 0
-1651 8048 0
-1651 8048 8050 0
-1651 8048 8051 0
1651 -8048 -8050 -8053 0
1651 -8047 -8051 -8053 0
1651 -8047 -8050 -8054 0
c (((aux1942 + aux1943 + aux1944)<=1)=tv=SATLiteral(1652))
-1652 8063 0
-1652 8059 8062 0
-1652 8060 0
-1652 8056 8062 0
-1652 8056 8059 0
-1652 8056 8060 0
-1652 8057 0
-1652 8057 8059 0
-1652 8057 8060 0
1652 -8057 -8059 -8062 0
1652 -8056 -8060 -8062 0
1652 -8056 -8059 -8063 0
c (((SATLiteral(587) + SATLiteral(602) + SATLiteral(617))<=1)=tv=SATLiteral(1653))
-1653 -602 -617 0
-1653 -587 -617 0
-1653 -587 -602 0
1653 602 617 0
1653 587 617 0
1653 587 602 0
c (((SATLiteral(589) + SATLiteral(604) + SATLiteral(619))<=1)=tv=SATLiteral(1654))
-1654 -604 -619 0
-1654 -589 -619 0
-1654 -589 -604 0
1654 604 619 0
1654 589 619 0
1654 589 604 0
c (((SATLiteral(591) + SATLiteral(606) + SATLiteral(621))<=1)=tv=SATLiteral(1655))
-1655 -606 -621 0
-1655 -591 -621 0
-1655 -591 -606 0
1655 606 621 0
1655 591 621 0
1655 591 606 0
c (((SATLiteral(593) + SATLiteral(608) + SATLiteral(623))<=1)=tv=SATLiteral(1656))
-1656 -608 -623 0
-1656 -593 -623 0
-1656 -593 -608 0
1656 608 623 0
1656 593 623 0
1656 593 608 0
c (((SATLiteral(595) + SATLiteral(610) + SATLiteral(625))<=1)=tv=SATLiteral(1657))
-1657 -610 -625 0
-1657 -595 -625 0
-1657 -595 -610 0
1657 610 625 0
1657 595 625 0
1657 595 610 0
c (((SATLiteral(597) + SATLiteral(612) + SATLiteral(627))<=1)=tv=SATLiteral(1658))
-1658 -612 -627 0
-1658 -597 -627 0
-1658 -597 -612 0
1658 612 627 0
1658 597 627 0
1658 597 612 0
c (((SATLiteral(599) + SATLiteral(614) + SATLiteral(629))<=1)=tv=SATLiteral(1659))
-1659 -614 -629 0
-1659 -599 -629 0
-1659 -599 -614 0
1659 614 629 0
1659 599 629 0
1659 599 614 0
c (((SATLiteral(601) + SATLiteral(616) + SATLiteral(631))<=1)=tv=SATLiteral(1660))
-1660 -616 -631 0
-1660 -601 -631 0
-1660 -601 -616 0
1660 616 631 0
1660 601 631 0
1660 601 616 0
c (((SATLiteral(-600) + SATLiteral(-615) + SATLiteral(-630))<=1)=tv=SATLiteral(1661))
-1661 615 630 0
-1661 600 630 0
-1661 600 615 0
1661 -615 -630 0
1661 -600 -630 0
1661 -600 -615 0
c (((SATLiteral(752) + SATLiteral(872) + SATLiteral(887))<=1)=tv=SATLiteral(1662))
-1662 -872 -887 0
-1662 -752 -887 0
-1662 -752 -872 0
1662 872 887 0
1662 752 887 0
1662 752 872 0
c (((SATLiteral(754) + SATLiteral(874) + SATLiteral(889))<=1)=tv=SATLiteral(1663))
-1663 -874 -889 0
-1663 -754 -889 0
-1663 -754 -874 0
1663 874 889 0
1663 754 889 0
1663 754 874 0
c (((SATLiteral(756) + SATLiteral(876) + SATLiteral(891))<=1)=tv=SATLiteral(1664))
-1664 -876 -891 0
-1664 -756 -891 0
-1664 -756 -876 0
1664 876 891 0
1664 756 891 0
1664 756 876 0
c (((SATLiteral(758) + SATLiteral(878) + SATLiteral(893))<=1)=tv=SATLiteral(1665))
-1665 -878 -893 0
-1665 -758 -893 0
-1665 -758 -878 0
1665 878 893 0
1665 758 893 0
1665 758 878 0
c (((SATLiteral(760) + SATLiteral(880) + SATLiteral(895))<=1)=tv=SATLiteral(1666))
-1666 -880 -895 0
-1666 -760 -895 0
-1666 -760 -880 0
1666 880 895 0
1666 760 895 0
1666 760 880 0
c (((SATLiteral(762) + SATLiteral(882) + SATLiteral(897))<=1)=tv=SATLiteral(1667))
-1667 -882 -897 0
-1667 -762 -897 0
-1667 -762 -882 0
1667 882 897 0
1667 762 897 0
1667 762 882 0
c (((SATLiteral(764) + SATLiteral(884) + SATLiteral(899))<=1)=tv=SATLiteral(1668))
-1668 -884 -899 0
-1668 -764 -899 0
-1668 -764 -884 0
1668 884 899 0
1668 764 899 0
1668 764 884 0
c (((SATLiteral(766) + SATLiteral(886) + SATLiteral(901))<=1)=tv=SATLiteral(1669))
-1669 -886 -901 0
-1669 -766 -901 0
-1669 -766 -886 0
1669 886 901 0
1669 766 901 0
1669 766 886 0
c (((SATLiteral(-765) + SATLiteral(-885) + SATLiteral(-900))<=1)=tv=SATLiteral(1670))
-1670 885 900 0
-1670 765 900 0
-1670 765 885 0
1670 -885 -900 0
1670 -765 -900 0
1670 -765 -885 0
c (((SATLiteral(962) + aux1945 + SATLiteral(1082))<=1)=tv=SATLiteral(1671))
-1671 8066 0
-1671 -1082 8065 0
-1671 -962 8065 0
-1671 -962 -1082 0
1671 1082 -8065 0
1671 962 -8065 0
1671 962 1082 -8066 0
c (((SATLiteral(964) + aux1946 + SATLiteral(1084))<=1)=tv=SATLiteral(1672))
-1672 8069 0
-1672 -1084 8068 0
-1672 -964 8068 0
-1672 -964 -1084 0
1672 1084 -8068 0
1672 964 -8068 0
1672 964 1084 -8069 0
c (((SATLiteral(966) + aux1947 + SATLiteral(1086))<=1)=tv=SATLiteral(1673))
-1673 8072 0
-1673 -1086 8071 0
-1673 -966 8071 0
-1673 -966 -1086 0
1673 1086 -8071 0
1673 966 -8071 0
1673 966 1086 -8072 0
c (((SATLiteral(968) + aux1948 + SATLiteral(1088))<=1)=tv=SATLiteral(1674))
-1674 8075 0
-1674 -1088 8074 0
-1674 -968 8074 0
-1674 -968 -1088 0
1674 1088 -8074 0
1674 968 -8074 0
1674 968 1088 -8075 0
c (((SATLiteral(970) + aux1949 + SATLiteral(1090))<=1)=tv=SATLiteral(1675))
-1675 8078 0
-1675 -1090 8077 0
-1675 -970 8077 0
-1675 -970 -1090 0
1675 1090 -8077 0
1675 970 -8077 0
1675 970 1090 -8078 0
c (((SATLiteral(972) + aux1950 + SATLiteral(1092))<=1)=tv=SATLiteral(1676))
-1676 8081 0
-1676 -1092 8080 0
-1676 -972 8080 0
-1676 -972 -1092 0
1676 1092 -8080 0
1676 972 -8080 0
1676 972 1092 -8081 0
c (((SATLiteral(974) + aux1951 + SATLiteral(1094))<=1)=tv=SATLiteral(1677))
-1677 8084 0
-1677 -1094 8083 0
-1677 -974 8083 0
-1677 -974 -1094 0
1677 1094 -8083 0
1677 974 -8083 0
1677 974 1094 -8084 0
c (((SATLiteral(976) + aux1952 + SATLiteral(1096))<=1)=tv=SATLiteral(1678))
-1678 8087 0
-1678 -1096 8086 0
-1678 -976 8086 0
-1678 -976 -1096 0
1678 1096 -8086 0
1678 976 -8086 0
1678 976 1096 -8087 0
c (((SATLiteral(-975) + aux1953 + SATLiteral(-1095))<=1)=tv=SATLiteral(1679))
-1679 8090 0
-1679 1095 8089 0
-1679 975 8089 0
-1679 975 1095 0
1679 -1095 -8089 0
1679 -975 -8089 0
1679 -975 -1095 -8090 0
c (((SATLiteral(1022) + aux1954 + SATLiteral(1157))<=1)=tv=SATLiteral(1680))
-1680 8093 0
-1680 -1157 8092 0
-1680 -1022 8092 0
-1680 -1022 -1157 0
1680 1157 -8092 0
1680 1022 -8092 0
1680 1022 1157 -8093 0
c (((SATLiteral(1024) + aux1955 + SATLiteral(1159))<=1)=tv=SATLiteral(1681))
-1681 8096 0
-1681 -1159 8095 0
-1681 -1024 8095 0
-1681 -1024 -1159 0
1681 1159 -8095 0
1681 1024 -8095 0
1681 1024 1159 -8096 0
c (((SATLiteral(1026) + aux1956 + SATLiteral(1161))<=1)=tv=SATLiteral(1682))
-1682 8099 0
-1682 -1161 8098 0
-1682 -1026 8098 0
-1682 -1026 -1161 0
1682 1161 -8098 0
1682 1026 -8098 0
1682 1026 1161 -8099 0
c (((SATLiteral(1028) + aux1957 + SATLiteral(1163))<=1)=tv=SATLiteral(1683))
-1683 8102 0
-1683 -1163 8101 0
-1683 -1028 8101 0
-1683 -1028 -1163 0
1683 1163 -8101 0
1683 1028 -8101 0
1683 1028 1163 -8102 0
c (((SATLiteral(1030) + aux1958 + SATLiteral(1165))<=1)=tv=SATLiteral(1684))
-1684 8105 0
-1684 -1165 8104 0
-1684 -1030 8104 0
-1684 -1030 -1165 0
1684 1165 -8104 0
1684 1030 -8104 0
1684 1030 1165 -8105 0
c (((SATLiteral(1032) + aux1959 + SATLiteral(1167))<=1)=tv=SATLiteral(1685))
-1685 8108 0
-1685 -1167 8107 0
-1685 -1032 8107 0
-1685 -1032 -1167 0
1685 1167 -8107 0
1685 1032 -8107 0
1685 1032 1167 -8108 0
c (((SATLiteral(1034) + aux1960 + SATLiteral(1169))<=1)=tv=SATLiteral(1686))
-1686 8111 0
-1686 -1169 8110 0
-1686 -1034 8110 0
-1686 -1034 -1169 0
1686 1169 -8110 0
1686 1034 -8110 0
1686 1034 1169 -8111 0
c (((SATLiteral(1036) + aux1961 + SATLiteral(1171))<=1)=tv=SATLiteral(1687))
-1687 8114 0
-1687 -1171 8113 0
-1687 -1036 8113 0
-1687 -1036 -1171 0
1687 1171 -8113 0
1687 1036 -8113 0
1687 1036 1171 -8114 0
c (((SATLiteral(-1035) + aux1962 + SATLiteral(-1170))<=1)=tv=SATLiteral(1688))
-1688 8117 0
-1688 1170 8116 0
-1688 1035 8116 0
-1688 1035 1170 0
1688 -1170 -8116 0
1688 -1035 -8116 0
1688 -1035 -1170 -8117 0
c (((SATLiteral(1037) + SATLiteral(1052) + SATLiteral(1187))<=1)=tv=SATLiteral(1689))
-1689 -1052 -1187 0
-1689 -1037 -1187 0
-1689 -1037 -1052 0
1689 1052 1187 0
1689 1037 1187 0
1689 1037 1052 0
c (((SATLiteral(1039) + SATLiteral(1054) + SATLiteral(1189))<=1)=tv=SATLiteral(1690))
-1690 -1054 -1189 0
-1690 -1039 -1189 0
-1690 -1039 -1054 0
1690 1054 1189 0
1690 1039 1189 0
1690 1039 1054 0
c (((SATLiteral(1041) + SATLiteral(1056) + SATLiteral(1191))<=1)=tv=SATLiteral(1691))
-1691 -1056 -1191 0
-1691 -1041 -1191 0
-1691 -1041 -1056 0
1691 1056 1191 0
1691 1041 1191 0
1691 1041 1056 0
c (((SATLiteral(1043) + SATLiteral(1058) + SATLiteral(1193))<=1)=tv=SATLiteral(1692))
-1692 -1058 -1193 0
-1692 -1043 -1193 0
-1692 -1043 -1058 0
1692 1058 1193 0
1692 1043 1193 0
1692 1043 1058 0
c (((SATLiteral(1045) + SATLiteral(1060) + SATLiteral(1195))<=1)=tv=SATLiteral(1693))
-1693 -1060 -1195 0
-1693 -1045 -1195 0
-1693 -1045 -1060 0
1693 1060 1195 0
1693 1045 1195 0
1693 1045 1060 0
c (((SATLiteral(1047) + SATLiteral(1062) + SATLiteral(1197))<=1)=tv=SATLiteral(1694))
-1694 -1062 -1197 0
-1694 -1047 -1197 0
-1694 -1047 -1062 0
1694 1062 1197 0
1694 1047 1197 0
1694 1047 1062 0
c (((SATLiteral(1049) + SATLiteral(1064) + SATLiteral(1199))<=1)=tv=SATLiteral(1695))
-1695 -1064 -1199 0
-1695 -1049 -1199 0
-1695 -1049 -1064 0
1695 1064 1199 0
1695 1049 1199 0
1695 1049 1064 0
c (((SATLiteral(1051) + SATLiteral(1066) + SATLiteral(1201))<=1)=tv=SATLiteral(1696))
-1696 -1066 -1201 0
-1696 -1051 -1201 0
-1696 -1051 -1066 0
1696 1066 1201 0
1696 1051 1201 0
1696 1051 1066 0
c (((SATLiteral(-1050) + SATLiteral(-1065) + SATLiteral(-1200))<=1)=tv=SATLiteral(1697))
-1697 1065 1200 0
-1697 1050 1200 0
-1697 1050 1065 0
1697 -1065 -1200 0
1697 -1050 -1200 0
1697 -1050 -1065 0
c (((SATLiteral(1112) + SATLiteral(1127) + SATLiteral(1142))<=1)=tv=SATLiteral(1698))
-1698 -1127 -1142 0
-1698 -1112 -1142 0
-1698 -1112 -1127 0
1698 1127 1142 0
1698 1112 1142 0
1698 1112 1127 0
c (((SATLiteral(1114) + SATLiteral(1129) + SATLiteral(1144))<=1)=tv=SATLiteral(1699))
-1699 -1129 -1144 0
-1699 -1114 -1144 0
-1699 -1114 -1129 0
1699 1129 1144 0
1699 1114 1144 0
1699 1114 1129 0
c (((SATLiteral(1116) + SATLiteral(1131) + SATLiteral(1146))<=1)=tv=SATLiteral(1700))
-1700 -1131 -1146 0
-1700 -1116 -1146 0
-1700 -1116 -1131 0
1700 1131 1146 0
1700 1116 1146 0
1700 1116 1131 0
c (((SATLiteral(1118) + SATLiteral(1133) + SATLiteral(1148))<=1)=tv=SATLiteral(1701))
-1701 -1133 -1148 0
-1701 -1118 -1148 0
-1701 -1118 -1133 0
1701 1133 1148 0
1701 1118 1148 0
1701 1118 1133 0
c (((SATLiteral(1120) + SATLiteral(1135) + SATLiteral(1150))<=1)=tv=SATLiteral(1702))
-1702 -1135 -1150 0
-1702 -1120 -1150 0
-1702 -1120 -1135 0
1702 1135 1150 0
1702 1120 1150 0
1702 1120 1135 0
c (((SATLiteral(1122) + SATLiteral(1137) + SATLiteral(1152))<=1)=tv=SATLiteral(1703))
-1703 -1137 -1152 0
-1703 -1122 -1152 0
-1703 -1122 -1137 0
1703 1137 1152 0
1703 1122 1152 0
1703 1122 1137 0
c (((SATLiteral(1124) + SATLiteral(1139) + SATLiteral(1154))<=1)=tv=SATLiteral(1704))
-1704 -1139 -1154 0
-1704 -1124 -1154 0
-1704 -1124 -1139 0
1704 1139 1154 0
1704 1124 1154 0
1704 1124 1139 0
c (((SATLiteral(1126) + SATLiteral(1141) + SATLiteral(1156))<=1)=tv=SATLiteral(1705))
-1705 -1141 -1156 0
-1705 -1126 -1156 0
-1705 -1126 -1141 0
1705 1141 1156 0
1705 1126 1156 0
1705 1126 1141 0
c (((SATLiteral(-1125) + SATLiteral(-1140) + SATLiteral(-1155))<=1)=tv=SATLiteral(1706))
-1706 1140 1155 0
-1706 1125 1155 0
-1706 1125 1140 0
1706 -1140 -1155 0
1706 -1125 -1155 0
1706 -1125 -1140 0
c (SATLiteral(1273) -> SATLiteral(1302))
-1273 1302 0
c (SATLiteral(1274) -> SATLiteral(1303))
-1274 1303 0
c (SATLiteral(1275) -> SATLiteral(1304))
-1275 1304 0
c (SATLiteral(1276) -> SATLiteral(1305))
-1276 1305 0
c (SATLiteral(1277) -> SATLiteral(1306))
-1277 1306 0
c (SATLiteral(1278) -> SATLiteral(1307))
-1278 1307 0
c (SATLiteral(1279) -> SATLiteral(1308))
-1279 1308 0
c (SATLiteral(1280) -> SATLiteral(1309))
-1280 1309 0
c (SATLiteral(1281) -> SATLiteral(1310))
-1281 1310 0
c (SATLiteral(1282) -> SATLiteral(1311))
-1282 1311 0
c (SATLiteral(1283) -> SATLiteral(1312))
-1283 1312 0
c (SATLiteral(1284) -> SATLiteral(1313))
-1284 1313 0
c (SATLiteral(1285) -> SATLiteral(1314))
-1285 1314 0
c (SATLiteral(1286) -> SATLiteral(1315))
-1286 1315 0
c (SATLiteral(1287) -> SATLiteral(1316))
-1287 1316 0
c (SATLiteral(1288) -> SATLiteral(1317))
-1288 1317 0
c (SATLiteral(1289) -> SATLiteral(1318))
-1289 1318 0
c (SATLiteral(1290) -> SATLiteral(1319))
-1290 1319 0
c (SATLiteral(1291) -> SATLiteral(1320))
-1291 1320 0
c (SATLiteral(1292) -> SATLiteral(1321))
-1292 1321 0
c (SATLiteral(1293) -> SATLiteral(1322))
-1293 1322 0
c (SATLiteral(1294) -> SATLiteral(1323))
-1294 1323 0
c (SATLiteral(1295) -> SATLiteral(1324))
-1295 1324 0
c (SATLiteral(1296) -> SATLiteral(1325))
-1296 1325 0
c (SATLiteral(1297) -> SATLiteral(1326))
-1297 1326 0
c (SATLiteral(1298) -> SATLiteral(1327))
-1298 1327 0
c (SATLiteral(1299) -> SATLiteral(1328))
-1299 1328 0
c (SATLiteral(1300) -> SATLiteral(1329))
-1300 1329 0
c (SATLiteral(1301) -> SATLiteral(1330))
-1301 1330 0
c (SATLiteral(1244) -> SATLiteral(1331))
-1244 1331 0
c (SATLiteral(1249) -> SATLiteral(1332))
-1249 1332 0
c (SATLiteral(1250) -> SATLiteral(1333))
-1250 1333 0
c (SATLiteral(1254) -> SATLiteral(1334))
-1254 1334 0
c (SATLiteral(1255) -> SATLiteral(1335))
-1255 1335 0
c (SATLiteral(1256) -> SATLiteral(1336))
-1256 1336 0
c (SATLiteral(1257) -> SATLiteral(1337))
-1257 1337 0
c (SATLiteral(1258) -> SATLiteral(1338))
-1258 1338 0
c (SATLiteral(1259) -> SATLiteral(1339))
-1259 1339 0
c (SATLiteral(1260) -> SATLiteral(1340))
-1260 1340 0
c (SATLiteral(1262) -> SATLiteral(1341))
-1262 1341 0
c (SATLiteral(1264) -> SATLiteral(1342))
-1264 1342 0
c (SATLiteral(1265) -> SATLiteral(1343))
-1265 1343 0
c (SATLiteral(1266) -> SATLiteral(1344))
-1266 1344 0
c (SATLiteral(1268) -> SATLiteral(1345))
-1268 1345 0
c (SATLiteral(1271) -> SATLiteral(1346))
-1271 1346 0
c (SATLiteral(1217) -> SATLiteral(1347))
-1217 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1217) -> SATLiteral(1349))
-1217 1349 0
c (SATLiteral(1217) -> SATLiteral(1350))
-1217 1350 0
c (SATLiteral(1217) -> SATLiteral(1351))
-1217 1351 0
c (SATLiteral(1217) -> SATLiteral(1352))
-1217 1352 0
c (SATLiteral(1217) -> SATLiteral(1353))
-1217 1353 0
c (SATLiteral(1217) -> SATLiteral(1354))
-1217 1354 0
c (SATLiteral(1217) -> SATLiteral(1355))
-1217 1355 0
c (SATLiteral(1218) -> SATLiteral(1356))
-1218 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1218) -> SATLiteral(1358))
-1218 1358 0
c (SATLiteral(1218) -> SATLiteral(1359))
-1218 1359 0
c (SATLiteral(1218) -> SATLiteral(1360))
-1218 1360 0
c (SATLiteral(1218) -> SATLiteral(1361))
-1218 1361 0
c (SATLiteral(1218) -> SATLiteral(1362))
-1218 1362 0
c (SATLiteral(1218) -> SATLiteral(1363))
-1218 1363 0
c (SATLiteral(1218) -> SATLiteral(1364))
-1218 1364 0
c (SATLiteral(1219) -> SATLiteral(1365))
-1219 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1219) -> SATLiteral(1367))
-1219 1367 0
c (SATLiteral(1219) -> SATLiteral(1368))
-1219 1368 0
c (SATLiteral(1219) -> SATLiteral(1369))
-1219 1369 0
c (SATLiteral(1219) -> SATLiteral(1370))
-1219 1370 0
c (SATLiteral(1219) -> SATLiteral(1371))
-1219 1371 0
c (SATLiteral(1219) -> SATLiteral(1372))
-1219 1372 0
c (SATLiteral(1219) -> SATLiteral(1373))
-1219 1373 0
c (SATLiteral(1220) -> SATLiteral(1374))
-1220 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1220) -> SATLiteral(1376))
-1220 1376 0
c (SATLiteral(1220) -> SATLiteral(1377))
-1220 1377 0
c (SATLiteral(1220) -> SATLiteral(1378))
-1220 1378 0
c (SATLiteral(1220) -> SATLiteral(1379))
-1220 1379 0
c (SATLiteral(1220) -> SATLiteral(1380))
-1220 1380 0
c (SATLiteral(1220) -> SATLiteral(1381))
-1220 1381 0
c (SATLiteral(1220) -> SATLiteral(1382))
-1220 1382 0
c (SATLiteral(1221) -> SATLiteral(1383))
-1221 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1221) -> SATLiteral(1385))
-1221 1385 0
c (SATLiteral(1221) -> SATLiteral(1386))
-1221 1386 0
c (SATLiteral(1221) -> SATLiteral(1387))
-1221 1387 0
c (SATLiteral(1221) -> SATLiteral(1388))
-1221 1388 0
c (SATLiteral(1221) -> SATLiteral(1389))
-1221 1389 0
c (SATLiteral(1221) -> SATLiteral(1390))
-1221 1390 0
c (SATLiteral(1221) -> SATLiteral(1391))
-1221 1391 0
c (SATLiteral(1222) -> SATLiteral(1392))
-1222 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1222) -> SATLiteral(1394))
-1222 1394 0
c (SATLiteral(1222) -> SATLiteral(1395))
-1222 1395 0
c (SATLiteral(1222) -> SATLiteral(1396))
-1222 1396 0
c (SATLiteral(1222) -> SATLiteral(1397))
-1222 1397 0
c (SATLiteral(1222) -> SATLiteral(1398))
-1222 1398 0
c (SATLiteral(1222) -> SATLiteral(1399))
-1222 1399 0
c (SATLiteral(1222) -> SATLiteral(1400))
-1222 1400 0
c (SATLiteral(1223) -> SATLiteral(1401))
-1223 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1223) -> SATLiteral(1403))
-1223 1403 0
c (SATLiteral(1223) -> SATLiteral(1404))
-1223 1404 0
c (SATLiteral(1223) -> SATLiteral(1405))
-1223 1405 0
c (SATLiteral(1223) -> SATLiteral(1406))
-1223 1406 0
c (SATLiteral(1223) -> SATLiteral(1407))
-1223 1407 0
c (SATLiteral(1223) -> SATLiteral(1408))
-1223 1408 0
c (SATLiteral(1223) -> SATLiteral(1409))
-1223 1409 0
c (SATLiteral(1224) -> SATLiteral(1410))
-1224 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1224) -> SATLiteral(1412))
-1224 1412 0
c (SATLiteral(1224) -> SATLiteral(1413))
-1224 1413 0
c (SATLiteral(1224) -> SATLiteral(1414))
-1224 1414 0
c (SATLiteral(1224) -> SATLiteral(1415))
-1224 1415 0
c (SATLiteral(1224) -> SATLiteral(1416))
-1224 1416 0
c (SATLiteral(1224) -> SATLiteral(1417))
-1224 1417 0
c (SATLiteral(1224) -> SATLiteral(1418))
-1224 1418 0
c (SATLiteral(1225) -> SATLiteral(1419))
-1225 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1225) -> SATLiteral(1421))
-1225 1421 0
c (SATLiteral(1225) -> SATLiteral(1422))
-1225 1422 0
c (SATLiteral(1225) -> SATLiteral(1423))
-1225 1423 0
c (SATLiteral(1225) -> SATLiteral(1424))
-1225 1424 0
c (SATLiteral(1225) -> SATLiteral(1425))
-1225 1425 0
c (SATLiteral(1225) -> SATLiteral(1426))
-1225 1426 0
c (SATLiteral(1225) -> SATLiteral(1427))
-1225 1427 0
c (SATLiteral(1226) -> SATLiteral(1428))
-1226 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1226) -> SATLiteral(1430))
-1226 1430 0
c (SATLiteral(1226) -> SATLiteral(1431))
-1226 1431 0
c (SATLiteral(1226) -> SATLiteral(1432))
-1226 1432 0
c (SATLiteral(1226) -> SATLiteral(1433))
-1226 1433 0
c (SATLiteral(1226) -> SATLiteral(1434))
-1226 1434 0
c (SATLiteral(1226) -> SATLiteral(1435))
-1226 1435 0
c (SATLiteral(1226) -> SATLiteral(1436))
-1226 1436 0
c (SATLiteral(1227) -> SATLiteral(1437))
-1227 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1227) -> SATLiteral(1439))
-1227 1439 0
c (SATLiteral(1227) -> SATLiteral(1440))
-1227 1440 0
c (SATLiteral(1227) -> SATLiteral(1441))
-1227 1441 0
c (SATLiteral(1227) -> SATLiteral(1442))
-1227 1442 0
c (SATLiteral(1227) -> SATLiteral(1443))
-1227 1443 0
c (SATLiteral(1227) -> SATLiteral(1444))
-1227 1444 0
c (SATLiteral(1227) -> SATLiteral(1445))
-1227 1445 0
c (SATLiteral(1228) -> SATLiteral(1446))
-1228 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1228) -> SATLiteral(1448))
-1228 1448 0
c (SATLiteral(1228) -> SATLiteral(1449))
-1228 1449 0
c (SATLiteral(1228) -> SATLiteral(1450))
-1228 1450 0
c (SATLiteral(1228) -> SATLiteral(1451))
-1228 1451 0
c (SATLiteral(1228) -> SATLiteral(1452))
-1228 1452 0
c (SATLiteral(1228) -> SATLiteral(1453))
-1228 1453 0
c (SATLiteral(1228) -> SATLiteral(1454))
-1228 1454 0
c (SATLiteral(1229) -> SATLiteral(1455))
-1229 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1229) -> SATLiteral(1457))
-1229 1457 0
c (SATLiteral(1229) -> SATLiteral(1458))
-1229 1458 0
c (SATLiteral(1229) -> SATLiteral(1459))
-1229 1459 0
c (SATLiteral(1229) -> SATLiteral(1460))
-1229 1460 0
c (SATLiteral(1229) -> SATLiteral(1461))
-1229 1461 0
c (SATLiteral(1229) -> SATLiteral(1462))
-1229 1462 0
c (SATLiteral(1229) -> SATLiteral(1463))
-1229 1463 0
c (SATLiteral(1230) -> SATLiteral(1464))
-1230 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1230) -> SATLiteral(1466))
-1230 1466 0
c (SATLiteral(1230) -> SATLiteral(1467))
-1230 1467 0
c (SATLiteral(1230) -> SATLiteral(1468))
-1230 1468 0
c (SATLiteral(1230) -> SATLiteral(1469))
-1230 1469 0
c (SATLiteral(1230) -> SATLiteral(1470))
-1230 1470 0
c (SATLiteral(1230) -> SATLiteral(1471))
-1230 1471 0
c (SATLiteral(1230) -> SATLiteral(1472))
-1230 1472 0
c (SATLiteral(1231) -> SATLiteral(1473))
-1231 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1231) -> SATLiteral(1475))
-1231 1475 0
c (SATLiteral(1231) -> SATLiteral(1476))
-1231 1476 0
c (SATLiteral(1231) -> SATLiteral(1477))
-1231 1477 0
c (SATLiteral(1231) -> SATLiteral(1478))
-1231 1478 0
c (SATLiteral(1231) -> SATLiteral(1479))
-1231 1479 0
c (SATLiteral(1231) -> SATLiteral(1480))
-1231 1480 0
c (SATLiteral(1231) -> SATLiteral(1481))
-1231 1481 0
c (SATLiteral(1232) -> SATLiteral(1482))
-1232 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1232) -> SATLiteral(1484))
-1232 1484 0
c (SATLiteral(1232) -> SATLiteral(1485))
-1232 1485 0
c (SATLiteral(1232) -> SATLiteral(1486))
-1232 1486 0
c (SATLiteral(1232) -> SATLiteral(1487))
-1232 1487 0
c (SATLiteral(1232) -> SATLiteral(1488))
-1232 1488 0
c (SATLiteral(1232) -> SATLiteral(1489))
-1232 1489 0
c (SATLiteral(1232) -> SATLiteral(1490))
-1232 1490 0
c (SATLiteral(1233) -> SATLiteral(1491))
-1233 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1233) -> SATLiteral(1493))
-1233 1493 0
c (SATLiteral(1233) -> SATLiteral(1494))
-1233 1494 0
c (SATLiteral(1233) -> SATLiteral(1495))
-1233 1495 0
c (SATLiteral(1233) -> SATLiteral(1496))
-1233 1496 0
c (SATLiteral(1233) -> SATLiteral(1497))
-1233 1497 0
c (SATLiteral(1233) -> SATLiteral(1498))
-1233 1498 0
c (SATLiteral(1233) -> SATLiteral(1499))
-1233 1499 0
c (SATLiteral(1234) -> SATLiteral(1500))
-1234 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1234) -> SATLiteral(1502))
-1234 1502 0
c (SATLiteral(1234) -> SATLiteral(1503))
-1234 1503 0
c (SATLiteral(1234) -> SATLiteral(1504))
-1234 1504 0
c (SATLiteral(1234) -> SATLiteral(1505))
-1234 1505 0
c (SATLiteral(1234) -> SATLiteral(1506))
-1234 1506 0
c (SATLiteral(1234) -> SATLiteral(1507))
-1234 1507 0
c (SATLiteral(1234) -> SATLiteral(1508))
-1234 1508 0
c (SATLiteral(1235) -> SATLiteral(1509))
-1235 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1235) -> SATLiteral(1511))
-1235 1511 0
c (SATLiteral(1235) -> SATLiteral(1512))
-1235 1512 0
c (SATLiteral(1235) -> SATLiteral(1513))
-1235 1513 0
c (SATLiteral(1235) -> SATLiteral(1514))
-1235 1514 0
c (SATLiteral(1235) -> SATLiteral(1515))
-1235 1515 0
c (SATLiteral(1235) -> SATLiteral(1516))
-1235 1516 0
c (SATLiteral(1235) -> SATLiteral(1517))
-1235 1517 0
c (SATLiteral(1236) -> SATLiteral(1518))
-1236 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1236) -> SATLiteral(1520))
-1236 1520 0
c (SATLiteral(1236) -> SATLiteral(1521))
-1236 1521 0
c (SATLiteral(1236) -> SATLiteral(1522))
-1236 1522 0
c (SATLiteral(1236) -> SATLiteral(1523))
-1236 1523 0
c (SATLiteral(1236) -> SATLiteral(1524))
-1236 1524 0
c (SATLiteral(1236) -> SATLiteral(1525))
-1236 1525 0
c (SATLiteral(1236) -> SATLiteral(1526))
-1236 1526 0
c (SATLiteral(1237) -> SATLiteral(1527))
-1237 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1237) -> SATLiteral(1529))
-1237 1529 0
c (SATLiteral(1237) -> SATLiteral(1530))
-1237 1530 0
c (SATLiteral(1237) -> SATLiteral(1531))
-1237 1531 0
c (SATLiteral(1237) -> SATLiteral(1532))
-1237 1532 0
c (SATLiteral(1237) -> SATLiteral(1533))
-1237 1533 0
c (SATLiteral(1237) -> SATLiteral(1534))
-1237 1534 0
c (SATLiteral(1237) -> SATLiteral(1535))
-1237 1535 0
c (SATLiteral(1238) -> SATLiteral(1536))
-1238 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1238) -> SATLiteral(1538))
-1238 1538 0
c (SATLiteral(1238) -> SATLiteral(1539))
-1238 1539 0
c (SATLiteral(1238) -> SATLiteral(1540))
-1238 1540 0
c (SATLiteral(1238) -> SATLiteral(1541))
-1238 1541 0
c (SATLiteral(1238) -> SATLiteral(1542))
-1238 1542 0
c (SATLiteral(1238) -> SATLiteral(1543))
-1238 1543 0
c (SATLiteral(1238) -> SATLiteral(1544))
-1238 1544 0
c (SATLiteral(1239) -> SATLiteral(1545))
-1239 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1239) -> SATLiteral(1547))
-1239 1547 0
c (SATLiteral(1239) -> SATLiteral(1548))
-1239 1548 0
c (SATLiteral(1239) -> SATLiteral(1549))
-1239 1549 0
c (SATLiteral(1239) -> SATLiteral(1550))
-1239 1550 0
c (SATLiteral(1239) -> SATLiteral(1551))
-1239 1551 0
c (SATLiteral(1239) -> SATLiteral(1552))
-1239 1552 0
c (SATLiteral(1239) -> SATLiteral(1553))
-1239 1553 0
c (SATLiteral(1240) -> SATLiteral(1554))
-1240 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1240) -> SATLiteral(1556))
-1240 1556 0
c (SATLiteral(1240) -> SATLiteral(1557))
-1240 1557 0
c (SATLiteral(1240) -> SATLiteral(1558))
-1240 1558 0
c (SATLiteral(1240) -> SATLiteral(1559))
-1240 1559 0
c (SATLiteral(1240) -> SATLiteral(1560))
-1240 1560 0
c (SATLiteral(1240) -> SATLiteral(1561))
-1240 1561 0
c (SATLiteral(1240) -> SATLiteral(1562))
-1240 1562 0
c (SATLiteral(1241) -> SATLiteral(1563))
-1241 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1241) -> SATLiteral(1565))
-1241 1565 0
c (SATLiteral(1241) -> SATLiteral(1566))
-1241 1566 0
c (SATLiteral(1241) -> SATLiteral(1567))
-1241 1567 0
c (SATLiteral(1241) -> SATLiteral(1568))
-1241 1568 0
c (SATLiteral(1241) -> SATLiteral(1569))
-1241 1569 0
c (SATLiteral(1241) -> SATLiteral(1570))
-1241 1570 0
c (SATLiteral(1241) -> SATLiteral(1571))
-1241 1571 0
c (SATLiteral(1242) -> SATLiteral(1572))
-1242 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1242) -> SATLiteral(1574))
-1242 1574 0
c (SATLiteral(1242) -> SATLiteral(1575))
-1242 1575 0
c (SATLiteral(1242) -> SATLiteral(1576))
-1242 1576 0
c (SATLiteral(1242) -> SATLiteral(1577))
-1242 1577 0
c (SATLiteral(1242) -> SATLiteral(1578))
-1242 1578 0
c (SATLiteral(1242) -> SATLiteral(1579))
-1242 1579 0
c (SATLiteral(1242) -> SATLiteral(1580))
-1242 1580 0
c (SATLiteral(1243) -> SATLiteral(1581))
-1243 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1243) -> SATLiteral(1583))
-1243 1583 0
c (SATLiteral(1243) -> SATLiteral(1584))
-1243 1584 0
c (SATLiteral(1243) -> SATLiteral(1585))
-1243 1585 0
c (SATLiteral(1243) -> SATLiteral(1586))
-1243 1586 0
c (SATLiteral(1243) -> SATLiteral(1587))
-1243 1587 0
c (SATLiteral(1243) -> SATLiteral(1588))
-1243 1588 0
c (SATLiteral(1243) -> SATLiteral(1589))
-1243 1589 0
c (SATLiteral(1245) -> SATLiteral(1590))
-1245 1590 0
c (SATLiteral(1245) -> SATLiteral(1591))
-1245 1591 0
c (SATLiteral(1245) -> SATLiteral(1592))
-1245 1592 0
c (SATLiteral(1245) -> SATLiteral(1593))
-1245 1593 0
c (SATLiteral(1245) -> SATLiteral(1594))
-1245 1594 0
c (SATLiteral(1245) -> SATLiteral(1595))
-1245 1595 0
c (SATLiteral(1245) -> SATLiteral(1596))
-1245 1596 0
c (SATLiteral(1245) -> SATLiteral(1597))
-1245 1597 0
c (SATLiteral(1245) -> SATLiteral(1598))
-1245 1598 0
c (SATLiteral(1246) -> SATLiteral(1599))
-1246 1599 0
c (SATLiteral(1246) -> SATLiteral(1600))
-1246 1600 0
c (SATLiteral(1246) -> SATLiteral(1601))
-1246 1601 0
c (SATLiteral(1246) -> SATLiteral(1602))
-1246 1602 0
c (SATLiteral(1246) -> SATLiteral(1603))
-1246 1603 0
c (SATLiteral(1246) -> SATLiteral(1604))
-1246 1604 0
c (SATLiteral(1246) -> SATLiteral(1605))
-1246 1605 0
c (SATLiteral(1246) -> SATLiteral(1606))
-1246 1606 0
c (SATLiteral(1246) -> SATLiteral(1607))
-1246 1607 0
c (SATLiteral(1247) -> SATLiteral(1608))
-1247 1608 0
c (SATLiteral(1247) -> SATLiteral(1609))
-1247 1609 0
c (SATLiteral(1247) -> SATLiteral(1610))
-1247 1610 0
c (SATLiteral(1247) -> SATLiteral(1611))
-1247 1611 0
c (SATLiteral(1247) -> SATLiteral(1612))
-1247 1612 0
c (SATLiteral(1247) -> SATLiteral(1613))
-1247 1613 0
c (SATLiteral(1247) -> SATLiteral(1614))
-1247 1614 0
c (SATLiteral(1247) -> SATLiteral(1615))
-1247 1615 0
c (SATLiteral(1247) -> SATLiteral(1616))
-1247 1616 0
c (SATLiteral(1248) -> SATLiteral(1617))
-1248 1617 0
c (SATLiteral(1248) -> SATLiteral(1618))
-1248 1618 0
c (SATLiteral(1248) -> SATLiteral(1619))
-1248 1619 0
c (SATLiteral(1248) -> SATLiteral(1620))
-1248 1620 0
c (SATLiteral(1248) -> SATLiteral(1621))
-1248 1621 0
c (SATLiteral(1248) -> SATLiteral(1622))
-1248 1622 0
c (SATLiteral(1248) -> SATLiteral(1623))
-1248 1623 0
c (SATLiteral(1248) -> SATLiteral(1624))
-1248 1624 0
c (SATLiteral(1248) -> SATLiteral(1625))
-1248 1625 0
c (SATLiteral(1251) -> SATLiteral(1626))
-1251 1626 0
c (SATLiteral(1251) -> SATLiteral(1627))
-1251 1627 0
c (SATLiteral(1251) -> SATLiteral(1628))
-1251 1628 0
c (SATLiteral(1251) -> SATLiteral(1629))
-1251 1629 0
c (SATLiteral(1251) -> SATLiteral(1630))
-1251 1630 0
c (SATLiteral(1251) -> SATLiteral(1631))
-1251 1631 0
c (SATLiteral(1251) -> SATLiteral(1632))
-1251 1632 0
c (SATLiteral(1251) -> SATLiteral(1633))
-1251 1633 0
c (SATLiteral(1251) -> SATLiteral(1634))
-1251 1634 0
c (SATLiteral(1252) -> SATLiteral(1635))
-1252 1635 0
c (SATLiteral(1252) -> SATLiteral(1636))
-1252 1636 0
c (SATLiteral(1252) -> SATLiteral(1637))
-1252 1637 0
c (SATLiteral(1252) -> SATLiteral(1638))
-1252 1638 0
c (SATLiteral(1252) -> SATLiteral(1639))
-1252 1639 0
c (SATLiteral(1252) -> SATLiteral(1640))
-1252 1640 0
c (SATLiteral(1252) -> SATLiteral(1641))
-1252 1641 0
c (SATLiteral(1252) -> SATLiteral(1642))
-1252 1642 0
c (SATLiteral(1252) -> SATLiteral(1643))
-1252 1643 0
c (SATLiteral(1253) -> SATLiteral(1644))
-1253 1644 0
c (SATLiteral(1253) -> SATLiteral(1645))
-1253 1645 0
c (SATLiteral(1253) -> SATLiteral(1646))
-1253 1646 0
c (SATLiteral(1253) -> SATLiteral(1647))
-1253 1647 0
c (SATLiteral(1253) -> SATLiteral(1648))
-1253 1648 0
c (SATLiteral(1253) -> SATLiteral(1649))
-1253 1649 0
c (SATLiteral(1253) -> SATLiteral(1650))
-1253 1650 0
c (SATLiteral(1253) -> SATLiteral(1651))
-1253 1651 0
c (SATLiteral(1253) -> SATLiteral(1652))
-1253 1652 0
c (SATLiteral(1261) -> SATLiteral(1653))
-1261 1653 0
c (SATLiteral(1261) -> SATLiteral(1654))
-1261 1654 0
c (SATLiteral(1261) -> SATLiteral(1655))
-1261 1655 0
c (SATLiteral(1261) -> SATLiteral(1656))
-1261 1656 0
c (SATLiteral(1261) -> SATLiteral(1657))
-1261 1657 0
c (SATLiteral(1261) -> SATLiteral(1658))
-1261 1658 0
c (SATLiteral(1261) -> SATLiteral(1659))
-1261 1659 0
c (SATLiteral(1261) -> SATLiteral(1660))
-1261 1660 0
c (SATLiteral(1261) -> SATLiteral(1661))
-1261 1661 0
c (SATLiteral(1263) -> SATLiteral(1662))
-1263 1662 0
c (SATLiteral(1263) -> SATLiteral(1663))
-1263 1663 0
c (SATLiteral(1263) -> SATLiteral(1664))
-1263 1664 0
c (SATLiteral(1263) -> SATLiteral(1665))
-1263 1665 0
c (SATLiteral(1263) -> SATLiteral(1666))
-1263 1666 0
c (SATLiteral(1263) -> SATLiteral(1667))
-1263 1667 0
c (SATLiteral(1263) -> SATLiteral(1668))
-1263 1668 0
c (SATLiteral(1263) -> SATLiteral(1669))
-1263 1669 0
c (SATLiteral(1263) -> SATLiteral(1670))
-1263 1670 0
c (SATLiteral(1267) -> SATLiteral(1671))
-1267 1671 0
c (SATLiteral(1267) -> SATLiteral(1672))
-1267 1672 0
c (SATLiteral(1267) -> SATLiteral(1673))
-1267 1673 0
c (SATLiteral(1267) -> SATLiteral(1674))
-1267 1674 0
c (SATLiteral(1267) -> SATLiteral(1675))
-1267 1675 0
c (SATLiteral(1267) -> SATLiteral(1676))
-1267 1676 0
c (SATLiteral(1267) -> SATLiteral(1677))
-1267 1677 0
c (SATLiteral(1267) -> SATLiteral(1678))
-1267 1678 0
c (SATLiteral(1267) -> SATLiteral(1679))
-1267 1679 0
c (SATLiteral(1269) -> SATLiteral(1680))
-1269 1680 0
c (SATLiteral(1269) -> SATLiteral(1681))
-1269 1681 0
c (SATLiteral(1269) -> SATLiteral(1682))
-1269 1682 0
c (SATLiteral(1269) -> SATLiteral(1683))
-1269 1683 0
c (SATLiteral(1269) -> SATLiteral(1684))
-1269 1684 0
c (SATLiteral(1269) -> SATLiteral(1685))
-1269 1685 0
c (SATLiteral(1269) -> SATLiteral(1686))
-1269 1686 0
c (SATLiteral(1269) -> SATLiteral(1687))
-1269 1687 0
c (SATLiteral(1269) -> SATLiteral(1688))
-1269 1688 0
c (SATLiteral(1270) -> SATLiteral(1689))
-1270 1689 0
c (SATLiteral(1270) -> SATLiteral(1690))
-1270 1690 0
c (SATLiteral(1270) -> SATLiteral(1691))
-1270 1691 0
c (SATLiteral(1270) -> SATLiteral(1692))
-1270 1692 0
c (SATLiteral(1270) -> SATLiteral(1693))
-1270 1693 0
c (SATLiteral(1270) -> SATLiteral(1694))
-1270 1694 0
c (SATLiteral(1270) -> SATLiteral(1695))
-1270 1695 0
c (SATLiteral(1270) -> SATLiteral(1696))
-1270 1696 0
c (SATLiteral(1270) -> SATLiteral(1697))
-1270 1697 0
c (SATLiteral(1272) -> SATLiteral(1698))
-1272 1698 0
c (SATLiteral(1272) -> SATLiteral(1699))
-1272 1699 0
c (SATLiteral(1272) -> SATLiteral(1700))
-1272 1700 0
c (SATLiteral(1272) -> SATLiteral(1701))
-1272 1701 0
c (SATLiteral(1272) -> SATLiteral(1702))
-1272 1702 0
c (SATLiteral(1272) -> SATLiteral(1703))
-1272 1703 0
c (SATLiteral(1272) -> SATLiteral(1704))
-1272 1704 0
c (SATLiteral(1272) -> SATLiteral(1705))
-1272 1705 0
c (SATLiteral(1272) -> SATLiteral(1706))
-1272 1706 0
c (( - aux405 + shift(x_00001_00004, -1) + shift(x_00002_00004, -1))<=0)
182 -1707 0
183 -1708 0
185 -1710 0
187 -1712 0
189 -1714 0
191 -1716 0
193 -1718 0
195 -1720 0
47 -1707 0
47 182 -1708 0
47 183 -1710 0
47 185 -1712 0
47 187 -1714 0
47 189 -1716 0
47 191 -1718 0
47 193 -1720 0
47 195 -1722 0
48 -1708 0
48 182 -1710 0
48 183 -1712 0
48 185 -1714 0
48 187 -1716 0
48 189 -1718 0
48 191 -1720 0
48 193 -1722 0
48 195 -1724 0
50 -1710 0
50 182 -1712 0
50 183 -1714 0
50 185 -1716 0
50 187 -1718 0
50 189 -1720 0
50 191 -1722 0
50 193 -1724 0
50 195 -1726 0
52 -1712 0
52 182 -1714 0
52 183 -1716 0
52 185 -1718 0
52 187 -1720 0
52 189 -1722 0
52 191 -1724 0
52 193 -1726 0
52 195 -1728 0
54 -1714 0
54 182 -1716 0
54 183 -1718 0
54 185 -1720 0
54 187 -1722 0
54 189 -1724 0
54 191 -1726 0
54 193 -1728 0
54 195 -1730 0
56 -1716 0
56 182 -1718 0
56 183 -1720 0
56 185 -1722 0
56 187 -1724 0
56 189 -1726 0
56 191 -1728 0
56 193 -1730 0
56 195 -1732 0
58 -1718 0
58 182 -1720 0
58 183 -1722 0
58 185 -1724 0
58 187 -1726 0
58 189 -1728 0
58 191 -1730 0
58 193 -1732 0
58 195 -1734 0
60 -1720 0
60 182 -1722 0
60 183 -1724 0
60 185 -1726 0
60 187 -1728 0
60 189 -1730 0
60 191 -1732 0
60 193 -1734 0
60 195 -1736 0
c (0<=( - aux405 + shift(x_00001_00004, -1) + shift(x_00002_00004, -1)))
-195 1736 0
-193 1734 0
-191 1732 0
-189 1730 0
-187 1728 0
-185 1726 0
-183 1724 0
-182 1722 0
-60 1736 0
-60 -195 1734 0
-60 -193 1732 0
-60 -191 1730 0
-60 -189 1728 0
-60 -187 1726 0
-60 -185 1724 0
-60 -183 1722 0
-60 -182 1720 0
-58 1734 0
-58 -195 1732 0
-58 -193 1730 0
-58 -191 1728 0
-58 -189 1726 0
-58 -187 1724 0
-58 -185 1722 0
-58 -183 1720 0
-58 -182 1718 0
-56 1732 0
-56 -195 1730 0
-56 -193 1728 0
-56 -191 1726 0
-56 -189 1724 0
-56 -187 1722 0
-56 -185 1720 0
-56 -183 1718 0
-56 -182 1716 0
-54 1730 0
-54 -195 1728 0
-54 -193 1726 0
-54 -191 1724 0
-54 -189 1722 0
-54 -187 1720 0
-54 -185 1718 0
-54 -183 1716 0
-54 -182 1714 0
-52 1728 0
-52 -195 1726 0
-52 -193 1724 0
-52 -191 1722 0
-52 -189 1720 0
-52 -187 1718 0
-52 -185 1716 0
-52 -183 1714 0
-52 -182 1712 0
-50 1726 0
-50 -195 1724 0
-50 -193 1722 0
-50 -191 1720 0
-50 -189 1718 0
-50 -187 1716 0
-50 -185 1714 0
-50 -183 1712 0
-50 -182 1710 0
-48 1724 0
-48 -195 1722 0
-48 -193 1720 0
-48 -191 1718 0
-48 -189 1716 0
-48 -187 1714 0
-48 -185 1712 0
-48 -183 1710 0
-48 -182 1708 0
-47 1722 0
-47 -195 1720 0
-47 -193 1718 0
-47 -191 1716 0
-47 -189 1714 0
-47 -187 1712 0
-47 -185 1710 0
-47 -183 1708 0
-47 -182 1707 0
c (( - aux406 + shift(x_00001_00009, -1) + shift(x_00002_00008, -1))<=0)
242 -1738 0
243 -1739 0
245 -1741 0
247 -1743 0
249 -1745 0
251 -1747 0
253 -1749 0
255 -1751 0
122 -1738 0
122 242 -1739 0
122 243 -1741 0
122 245 -1743 0
122 247 -1745 0
122 249 -1747 0
122 251 -1749 0
122 253 -1751 0
122 255 -1753 0
123 -1739 0
123 242 -1741 0
123 243 -1743 0
123 245 -1745 0
123 247 -1747 0
123 249 -1749 0
123 251 -1751 0
123 253 -1753 0
123 255 -1755 0
125 -1741 0
125 242 -1743 0
125 243 -1745 0
125 245 -1747 0
125 247 -1749 0
125 249 -1751 0
125 251 -1753 0
125 253 -1755 0
125 255 -1757 0
127 -1743 0
127 242 -1745 0
127 243 -1747 0
127 245 -1749 0
127 247 -1751 0
127 249 -1753 0
127 251 -1755 0
127 253 -1757 0
127 255 -1759 0
129 -1745 0
129 242 -1747 0
129 243 -1749 0
129 245 -1751 0
129 247 -1753 0
129 249 -1755 0
129 251 -1757 0
129 253 -1759 0
129 255 -1761 0
131 -1747 0
131 242 -1749 0
131 243 -1751 0
131 245 -1753 0
131 247 -1755 0
131 249 -1757 0
131 251 -1759 0
131 253 -1761 0
131 255 -1763 0
133 -1749 0
133 242 -1751 0
133 243 -1753 0
133 245 -1755 0
133 247 -1757 0
133 249 -1759 0
133 251 -1761 0
133 253 -1763 0
133 255 -1765 0
135 -1751 0
135 242 -1753 0
135 243 -1755 0
135 245 -1757 0
135 247 -1759 0
135 249 -1761 0
135 251 -1763 0
135 253 -1765 0
135 255 -1767 0
c (0<=( - aux406 + shift(x_00001_00009, -1) + shift(x_00002_00008, -1)))
-255 1767 0
-253 1765 0
-251 1763 0
-249 1761 0
-247 1759 0
-245 1757 0
-243 1755 0
-242 1753 0
-135 1767 0
-135 -255 1765 0
-135 -253 1763 0
-135 -251 1761 0
-135 -249 1759 0
-135 -247 1757 0
-135 -245 1755 0
-135 -243 1753 0
-135 -242 1751 0
-133 1765 0
-133 -255 1763 0
-133 -253 1761 0
-133 -251 1759 0
-133 -249 1757 0
-133 -247 1755 0
-133 -245 1753 0
-133 -243 1751 0
-133 -242 1749 0
-131 1763 0
-131 -255 1761 0
-131 -253 1759 0
-131 -251 1757 0
-131 -249 1755 0
-131 -247 1753 0
-131 -245 1751 0
-131 -243 1749 0
-131 -242 1747 0
-129 1761 0
-129 -255 1759 0
-129 -253 1757 0
-129 -251 1755 0
-129 -249 1753 0
-129 -247 1751 0
-129 -245 1749 0
-129 -243 1747 0
-129 -242 1745 0
-127 1759 0
-127 -255 1757 0
-127 -253 1755 0
-127 -251 1753 0
-127 -249 1751 0
-127 -247 1749 0
-127 -245 1747 0
-127 -243 1745 0
-127 -242 1743 0
-125 1757 0
-125 -255 1755 0
-125 -253 1753 0
-125 -251 1751 0
-125 -249 1749 0
-125 -247 1747 0
-125 -245 1745 0
-125 -243 1743 0
-125 -242 1741 0
-123 1755 0
-123 -255 1753 0
-123 -253 1751 0
-123 -251 1749 0
-123 -249 1747 0
-123 -247 1745 0
-123 -245 1743 0
-123 -243 1741 0
-123 -242 1739 0
-122 1753 0
-122 -255 1751 0
-122 -253 1749 0
-122 -251 1747 0
-122 -249 1745 0
-122 -247 1743 0
-122 -245 1741 0
-122 -243 1739 0
-122 -242 1738 0
c (( - aux413 + shift(x_00008_00001, -1) + shift(x_00009_00002, -1))<=0)
1097 -1955 0
1098 -1956 0
1100 -1958 0
1102 -1960 0
1104 -1962 0
1106 -1964 0
1108 -1966 0
1110 -1968 0
947 -1955 0
947 1097 -1956 0
947 1098 -1958 0
947 1100 -1960 0
947 1102 -1962 0
947 1104 -1964 0
947 1106 -1966 0
947 1108 -1968 0
947 1110 -1970 0
948 -1956 0
948 1097 -1958 0
948 1098 -1960 0
948 1100 -1962 0
948 1102 -1964 0
948 1104 -1966 0
948 1106 -1968 0
948 1108 -1970 0
948 1110 -1972 0
950 -1958 0
950 1097 -1960 0
950 1098 -1962 0
950 1100 -1964 0
950 1102 -1966 0
950 1104 -1968 0
950 1106 -1970 0
950 1108 -1972 0
950 1110 -1974 0
952 -1960 0
952 1097 -1962 0
952 1098 -1964 0
952 1100 -1966 0
952 1102 -1968 0
952 1104 -1970 0
952 1106 -1972 0
952 1108 -1974 0
952 1110 -1976 0
954 -1962 0
954 1097 -1964 0
954 1098 -1966 0
954 1100 -1968 0
954 1102 -1970 0
954 1104 -1972 0
954 1106 -1974 0
954 1108 -1976 0
954 1110 -1978 0
956 -1964 0
956 1097 -1966 0
956 1098 -1968 0
956 1100 -1970 0
956 1102 -1972 0
956 1104 -1974 0
956 1106 -1976 0
956 1108 -1978 0
956 1110 -1980 0
958 -1966 0
958 1097 -1968 0
958 1098 -1970 0
958 1100 -1972 0
958 1102 -1974 0
958 1104 -1976 0
958 1106 -1978 0
958 1108 -1980 0
958 1110 -1982 0
960 -1968 0
960 1097 -1970 0
960 1098 -1972 0
960 1100 -1974 0
960 1102 -1976 0
960 1104 -1978 0
960 1106 -1980 0
960 1108 -1982 0
960 1110 -1984 0
c (0<=( - aux413 + shift(x_00008_00001, -1) + shift(x_00009_00002, -1)))
-1110 1984 0
-1108 1982 0
-1106 1980 0
-1104 1978 0
-1102 1976 0
-1100 1974 0
-1098 1972 0
-1097 1970 0
-960 1984 0
-960 -1110 1982 0
-960 -1108 1980 0
-960 -1106 1978 0
-960 -1104 1976 0
-960 -1102 1974 0
-960 -1100 1972 0
-960 -1098 1970 0
-960 -1097 1968 0
-958 1982 0
-958 -1110 1980 0
-958 -1108 1978 0
-958 -1106 1976 0
-958 -1104 1974 0
-958 -1102 1972 0
-958 -1100 1970 0
-958 -1098 1968 0
-958 -1097 1966 0
-956 1980 0
-956 -1110 1978 0
-956 -1108 1976 0
-956 -1106 1974 0
-956 -1104 1972 0
-956 -1102 1970 0
-956 -1100 1968 0
-956 -1098 1966 0
-956 -1097 1964 0
-954 1978 0
-954 -1110 1976 0
-954 -1108 1974 0
-954 -1106 1972 0
-954 -1104 1970 0
-954 -1102 1968 0
-954 -1100 1966 0
-954 -1098 1964 0
-954 -1097 1962 0
-952 1976 0
-952 -1110 1974 0
-952 -1108 1972 0
-952 -1106 1970 0
-952 -1104 1968 0
-952 -1102 1966 0
-952 -1100 1964 0
-952 -1098 1962 0
-952 -1097 1960 0
-950 1974 0
-950 -1110 1972 0
-950 -1108 1970 0
-950 -1106 1968 0
-950 -1104 1966 0
-950 -1102 1964 0
-950 -1100 1962 0
-950 -1098 1960 0
-950 -1097 1958 0
-948 1972 0
-948 -1110 1970 0
-948 -1108 1968 0
-948 -1106 1966 0
-948 -1104 1964 0
-948 -1102 1962 0
-948 -1100 1960 0
-948 -1098 1958 0
-948 -1097 1956 0
-947 1970 0
-947 -1110 1968 0
-947 -1108 1966 0
-947 -1106 1964 0
-947 -1104 1962 0
-947 -1102 1960 0
-947 -1100 1958 0
-947 -1098 1956 0
-947 -1097 1955 0
c (( - aux414 + shift(x_00008_00005, -1) + shift(x_00009_00007, -1))<=0)
1172 -1986 0
1173 -1987 0
1175 -1989 0
1177 -1991 0
1179 -1993 0
1181 -1995 0
1183 -1997 0
1185 -1999 0
1007 -1986 0
1007 1172 -1987 0
1007 1173 -1989 0
1007 1175 -1991 0
1007 1177 -1993 0
1007 1179 -1995 0
1007 1181 -1997 0
1007 1183 -1999 0
1007 1185 -2001 0
1008 -1987 0
1008 1172 -1989 0
1008 1173 -1991 0
1008 1175 -1993 0
1008 1177 -1995 0
1008 1179 -1997 0
1008 1181 -1999 0
1008 1183 -2001 0
1008 1185 -2003 0
1010 -1989 0
1010 1172 -1991 0
1010 1173 -1993 0
1010 1175 -1995 0
1010 1177 -1997 0
1010 1179 -1999 0
1010 1181 -2001 0
1010 1183 -2003 0
1010 1185 -2005 0
1012 -1991 0
1012 1172 -1993 0
1012 1173 -1995 0
1012 1175 -1997 0
1012 1177 -1999 0
1012 1179 -2001 0
1012 1181 -2003 0
1012 1183 -2005 0
1012 1185 -2007 0
1014 -1993 0
1014 1172 -1995 0
1014 1173 -1997 0
1014 1175 -1999 0
1014 1177 -2001 0
1014 1179 -2003 0
1014 1181 -2005 0
1014 1183 -2007 0
1014 1185 -2009 0
1016 -1995 0
1016 1172 -1997 0
1016 1173 -1999 0
1016 1175 -2001 0
1016 1177 -2003 0
1016 1179 -2005 0
1016 1181 -2007 0
1016 1183 -2009 0
1016 1185 -2011 0
1018 -1997 0
1018 1172 -1999 0
1018 1173 -2001 0
1018 1175 -2003 0
1018 1177 -2005 0
1018 1179 -2007 0
1018 1181 -2009 0
1018 1183 -2011 0
1018 1185 -2013 0
1020 -1999 0
1020 1172 -2001 0
1020 1173 -2003 0
1020 1175 -2005 0
1020 1177 -2007 0
1020 1179 -2009 0
1020 1181 -2011 0
1020 1183 -2013 0
1020 1185 -2015 0
c (0<=( - aux414 + shift(x_00008_00005, -1) + shift(x_00009_00007, -1)))
-1185 2015 0
-1183 2013 0
-1181 2011 0
-1179 2009 0
-1177 2007 0
-1175 2005 0
-1173 2003 0
-1172 2001 0
-1020 2015 0
-1020 -1185 2013 0
-1020 -1183 2011 0
-1020 -1181 2009 0
-1020 -1179 2007 0
-1020 -1177 2005 0
-1020 -1175 2003 0
-1020 -1173 2001 0
-1020 -1172 1999 0
-1018 2013 0
-1018 -1185 2011 0
-1018 -1183 2009 0
-1018 -1181 2007 0
-1018 -1179 2005 0
-1018 -1177 2003 0
-1018 -1175 2001 0
-1018 -1173 1999 0
-1018 -1172 1997 0
-1016 2011 0
-1016 -1185 2009 0
-1016 -1183 2007 0
-1016 -1181 2005 0
-1016 -1179 2003 0
-1016 -1177 2001 0
-1016 -1175 1999 0
-1016 -1173 1997 0
-1016 -1172 1995 0
-1014 2009 0
-1014 -1185 2007 0
-1014 -1183 2005 0
-1014 -1181 2003 0
-1014 -1179 2001 0
-1014 -1177 1999 0
-1014 -1175 1997 0
-1014 -1173 1995 0
-1014 -1172 1993 0
-1012 2007 0
-1012 -1185 2005 0
-1012 -1183 2003 0
-1012 -1181 2001 0
-1012 -1179 1999 0
-1012 -1177 1997 0
-1012 -1175 1995 0
-1012 -1173 1993 0
-1012 -1172 1991 0
-1010 2005 0
-1010 -1185 2003 0
-1010 -1183 2001 0
-1010 -1181 1999 0
-1010 -1179 1997 0
-1010 -1177 1995 0
-1010 -1175 1993 0
-1010 -1173 1991 0
-1010 -1172 1989 0
-1008 2003 0
-1008 -1185 2001 0
-1008 -1183 1999 0
-1008 -1181 1997 0
-1008 -1179 1995 0
-1008 -1177 1993 0
-1008 -1175 1991 0
-1008 -1173 1989 0
-1008 -1172 1987 0
-1007 2001 0
-1007 -1185 1999 0
-1007 -1183 1997 0
-1007 -1181 1995 0
-1007 -1179 1993 0
-1007 -1177 1991 0
-1007 -1175 1989 0
-1007 -1173 1987 0
-1007 -1172 1986 0
c ((SATLiteral(32) - aux1873 + SATLiteral(197))<=0)
-197 -7849 0
-32 -7849 0
-32 -197 -7850 0
c (0<=(SATLiteral(32) - aux1873 + SATLiteral(197)))
197 7850 0
32 7850 0
32 197 7849 0
c ((SATLiteral(34) - aux1874 + SATLiteral(199))<=0)
-199 -7852 0
-34 -7852 0
-34 -199 -7853 0
c (0<=(SATLiteral(34) - aux1874 + SATLiteral(199)))
199 7853 0
34 7853 0
34 199 7852 0
c ((SATLiteral(36) - aux1875 + SATLiteral(201))<=0)
-201 -7855 0
-36 -7855 0
-36 -201 -7856 0
c (0<=(SATLiteral(36) - aux1875 + SATLiteral(201)))
201 7856 0
36 7856 0
36 201 7855 0
c ((SATLiteral(38) - aux1876 + SATLiteral(203))<=0)
-203 -7858 0
-38 -7858 0
-38 -203 -7859 0
c (0<=(SATLiteral(38) - aux1876 + SATLiteral(203)))
203 7859 0
38 7859 0
38 203 7858 0
c ((SATLiteral(40) - aux1877 + SATLiteral(205))<=0)
-205 -7861 0
-40 -7861 0
-40 -205 -7862 0
c (0<=(SATLiteral(40) - aux1877 + SATLiteral(205)))
205 7862 0
40 7862 0
40 205 7861 0
c ((SATLiteral(42) - aux1878 + SATLiteral(207))<=0)
-207 -7864 0
-42 -7864 0
-42 -207 -7865 0
c (0<=(SATLiteral(42) - aux1878 + SATLiteral(207)))
207 7865 0
42 7865 0
42 207 7864 0
c ((SATLiteral(44) - aux1879 + SATLiteral(209))<=0)
-209 -7867 0
-44 -7867 0
-44 -209 -7868 0
c (0<=(SATLiteral(44) - aux1879 + SATLiteral(209)))
209 7868 0
44 7868 0
44 209 7867 0
c ((SATLiteral(46) - aux1880 + SATLiteral(211))<=0)
-211 -7870 0
-46 -7870 0
-46 -211 -7871 0
c (0<=(SATLiteral(46) - aux1880 + SATLiteral(211)))
211 7871 0
46 7871 0
46 211 7870 0
c ((SATLiteral(-45) - aux1881 + SATLiteral(-210))<=0)
210 -7873 0
45 -7873 0
45 210 -7874 0
c (0<=(SATLiteral(-45) - aux1881 + SATLiteral(-210)))
-210 7874 0
-45 7874 0
-45 -210 7873 0
c ((SATLiteral(107) - aux1882 + SATLiteral(257))<=0)
-257 -7876 0
-107 -7876 0
-107 -257 -7877 0
c (0<=(SATLiteral(107) - aux1882 + SATLiteral(257)))
257 7877 0
107 7877 0
107 257 7876 0
c ((SATLiteral(109) - aux1883 + SATLiteral(259))<=0)
-259 -7879 0
-109 -7879 0
-109 -259 -7880 0
c (0<=(SATLiteral(109) - aux1883 + SATLiteral(259)))
259 7880 0
109 7880 0
109 259 7879 0
c ((SATLiteral(111) - aux1884 + SATLiteral(261))<=0)
-261 -7882 0
-111 -7882 0
-111 -261 -7883 0
c (0<=(SATLiteral(111) - aux1884 + SATLiteral(261)))
261 7883 0
111 7883 0
111 261 7882 0
c ((SATLiteral(113) - aux1885 + SATLiteral(263))<=0)
-263 -7885 0
-113 -7885 0
-113 -263 -7886 0
c (0<=(SATLiteral(113) - aux1885 + SATLiteral(263)))
263 7886 0
113 7886 0
113 263 7885 0
c ((SATLiteral(115) - aux1886 + SATLiteral(265))<=0)
-265 -7888 0
-115 -7888 0
-115 -265 -7889 0
c (0<=(SATLiteral(115) - aux1886 + SATLiteral(265)))
265 7889 0
115 7889 0
115 265 7888 0
c ((SATLiteral(117) - aux1887 + SATLiteral(267))<=0)
-267 -7891 0
-117 -7891 0
-117 -267 -7892 0
c (0<=(SATLiteral(117) - aux1887 + SATLiteral(267)))
267 7892 0
117 7892 0
117 267 7891 0
c ((SATLiteral(119) - aux1888 + SATLiteral(269))<=0)
-269 -7894 0
-119 -7894 0
-119 -269 -7895 0
c (0<=(SATLiteral(119) - aux1888 + SATLiteral(269)))
269 7895 0
119 7895 0
119 269 7894 0
c ((SATLiteral(121) - aux1889 + SATLiteral(271))<=0)
-271 -7897 0
-121 -7897 0
-121 -271 -7898 0
c (0<=(SATLiteral(121) - aux1889 + SATLiteral(271)))
271 7898 0
121 7898 0
121 271 7897 0
c ((SATLiteral(-120) - aux1890 + SATLiteral(-270))<=0)
270 -7900 0
120 -7900 0
120 270 -7901 0
c (0<=(SATLiteral(-120) - aux1890 + SATLiteral(-270)))
-270 7901 0
-120 7901 0
-120 -270 7900 0
c ((SATLiteral(947) - aux1945 + SATLiteral(1097))<=0)
-1097 -8065 0
-947 -8065 0
-947 -1097 -8066 0
c (0<=(SATLiteral(947) - aux1945 + SATLiteral(1097)))
1097 8066 0
947 8066 0
947 1097 8065 0
c ((SATLiteral(949) - aux1946 + SATLiteral(1099))<=0)
-1099 -8068 0
-949 -8068 0
-949 -1099 -8069 0
c (0<=(SATLiteral(949) - aux1946 + SATLiteral(1099)))
1099 8069 0
949 8069 0
949 1099 8068 0
c ((SATLiteral(951) - aux1947 + SATLiteral(1101))<=0)
-1101 -8071 0
-951 -8071 0
-951 -1101 -8072 0
c (0<=(SATLiteral(951) - aux1947 + SATLiteral(1101)))
1101 8072 0
951 8072 0
951 1101 8071 0
c ((SATLiteral(953) - aux1948 + SATLiteral(1103))<=0)
-1103 -8074 0
-953 -8074 0
-953 -1103 -8075 0
c (0<=(SATLiteral(953) - aux1948 + SATLiteral(1103)))
1103 8075 0
953 8075 0
953 1103 8074 0
c ((SATLiteral(955) - aux1949 + SATLiteral(1105))<=0)
-1105 -8077 0
-955 -8077 0
-955 -1105 -8078 0
c (0<=(SATLiteral(955) - aux1949 + SATLiteral(1105)))
1105 8078 0
955 8078 0
955 1105 8077 0
c ((SATLiteral(957) - aux1950 + SATLiteral(1107))<=0)
-1107 -8080 0
-957 -8080 0
-957 -1107 -8081 0
c (0<=(SATLiteral(957) - aux1950 + SATLiteral(1107)))
1107 8081 0
957 8081 0
957 1107 8080 0
c ((SATLiteral(959) - aux1951 + SATLiteral(1109))<=0)
-1109 -8083 0
-959 -8083 0
-959 -1109 -8084 0
c (0<=(SATLiteral(959) - aux1951 + SATLiteral(1109)))
1109 8084 0
959 8084 0
959 1109 8083 0
c ((SATLiteral(961) - aux1952 + SATLiteral(1111))<=0)
-1111 -8086 0
-961 -8086 0
-961 -1111 -8087 0
c (0<=(SATLiteral(961) - aux1952 + SATLiteral(1111)))
1111 8087 0
961 8087 0
961 1111 8086 0
c ((SATLiteral(-960) - aux1953 + SATLiteral(-1110))<=0)
1110 -8089 0
960 -8089 0
960 1110 -8090 0
c (0<=(SATLiteral(-960) - aux1953 + SATLiteral(-1110)))
-1110 8090 0
-960 8090 0
-960 -1110 8089 0
c ((SATLiteral(1007) - aux1954 + SATLiteral(1172))<=0)
-1172 -8092 0
-1007 -8092 0
-1007 -1172 -8093 0
c (0<=(SATLiteral(1007) - aux1954 + SATLiteral(1172)))
1172 8093 0
1007 8093 0
1007 1172 8092 0
c ((SATLiteral(1009) - aux1955 + SATLiteral(1174))<=0)
-1174 -8095 0
-1009 -8095 0
-1009 -1174 -8096 0
c (0<=(SATLiteral(1009) - aux1955 + SATLiteral(1174)))
1174 8096 0
1009 8096 0
1009 1174 8095 0
c ((SATLiteral(1011) - aux1956 + SATLiteral(1176))<=0)
-1176 -8098 0
-1011 -8098 0
-1011 -1176 -8099 0
c (0<=(SATLiteral(1011) - aux1956 + SATLiteral(1176)))
1176 8099 0
1011 8099 0
1011 1176 8098 0
c ((SATLiteral(1013) - aux1957 + SATLiteral(1178))<=0)
-1178 -8101 0
-1013 -8101 0
-1013 -1178 -8102 0
c (0<=(SATLiteral(1013) - aux1957 + SATLiteral(1178)))
1178 8102 0
1013 8102 0
1013 1178 8101 0
c ((SATLiteral(1015) - aux1958 + SATLiteral(1180))<=0)
-1180 -8104 0
-1015 -8104 0
-1015 -1180 -8105 0
c (0<=(SATLiteral(1015) - aux1958 + SATLiteral(1180)))
1180 8105 0
1015 8105 0
1015 1180 8104 0
c ((SATLiteral(1017) - aux1959 + SATLiteral(1182))<=0)
-1182 -8107 0
-1017 -8107 0
-1017 -1182 -8108 0
c (0<=(SATLiteral(1017) - aux1959 + SATLiteral(1182)))
1182 8108 0
1017 8108 0
1017 1182 8107 0
c ((SATLiteral(1019) - aux1960 + SATLiteral(1184))<=0)
-1184 -8110 0
-1019 -8110 0
-1019 -1184 -8111 0
c (0<=(SATLiteral(1019) - aux1960 + SATLiteral(1184)))
1184 8111 0
1019 8111 0
1019 1184 8110 0
c ((SATLiteral(1021) - aux1961 + SATLiteral(1186))<=0)
-1186 -8113 0
-1021 -8113 0
-1021 -1186 -8114 0
c (0<=(SATLiteral(1021) - aux1961 + SATLiteral(1186)))
1186 8114 0
1021 8114 0
1021 1186 8113 0
c ((SATLiteral(-1020) - aux1962 + SATLiteral(-1185))<=0)
1185 -8116 0
1020 -8116 0
1020 1185 -8117 0
c (0<=(SATLiteral(-1020) - aux1962 + SATLiteral(-1185)))
-1185 8117 0
-1020 8117 0
-1020 -1185 8116 0
c ((shift(x_00007_00003, -1) - aux407 + shift(x_00006_00003, -1))<=0)
707 -1769 0
708 -1770 0
710 -1772 0
712 -1774 0
714 -1776 0
716 -1778 0
718 -1780 0
720 -1782 0
842 -1769 0
842 707 -1770 0
842 708 -1772 0
842 710 -1774 0
842 712 -1776 0
842 714 -1778 0
842 716 -1780 0
842 718 -1782 0
842 720 -1784 0
843 -1770 0
843 707 -1772 0
843 708 -1774 0
843 710 -1776 0
843 712 -1778 0
843 714 -1780 0
843 716 -1782 0
843 718 -1784 0
843 720 -1786 0
845 -1772 0
845 707 -1774 0
845 708 -1776 0
845 710 -1778 0
845 712 -1780 0
845 714 -1782 0
845 716 -1784 0
845 718 -1786 0
845 720 -1788 0
847 -1774 0
847 707 -1776 0
847 708 -1778 0
847 710 -1780 0
847 712 -1782 0
847 714 -1784 0
847 716 -1786 0
847 718 -1788 0
847 720 -1790 0
849 -1776 0
849 707 -1778 0
849 708 -1780 0
849 710 -1782 0
849 712 -1784 0
849 714 -1786 0
849 716 -1788 0
849 718 -1790 0
849 720 -1792 0
851 -1778 0
851 707 -1780 0
851 708 -1782 0
851 710 -1784 0
851 712 -1786 0
851 714 -1788 0
851 716 -1790 0
851 718 -1792 0
851 720 -1794 0
853 -1780 0
853 707 -1782 0
853 708 -1784 0
853 710 -1786 0
853 712 -1788 0
853 714 -1790 0
853 716 -1792 0
853 718 -1794 0
853 720 -1796 0
855 -1782 0
855 707 -1784 0
855 708 -1786 0
855 710 -1788 0
855 712 -1790 0
855 714 -1792 0
855 716 -1794 0
855 718 -1796 0
855 720 -1798 0
c (0<=(shift(x_00007_00003, -1) - aux407 + shift(x_00006_00003, -1)))
-720 1798 0
-718 1796 0
-716 1794 0
-714 1792 0
-712 1790 0
-710 1788 0
-708 1786 0
-707 1784 0
-855 1798 0
-855 -720 1796 0
-855 -718 1794 0
-855 -716 1792 0
-855 -714 1790 0
-855 -712 1788 0
-855 -710 1786 0
-855 -708 1784 0
-855 -707 1782 0
-853 1796 0
-853 -720 1794 0
-853 -718 1792 0
-853 -716 1790 0
-853 -714 1788 0
-853 -712 1786 0
-853 -710 1784 0
-853 -708 1782 0
-853 -707 1780 0
-851 1794 0
-851 -720 1792 0
-851 -718 1790 0
-851 -716 1788 0
-851 -714 1786 0
-851 -712 1784 0
-851 -710 1782 0
-851 -708 1780 0
-851 -707 1778 0
-849 1792 0
-849 -720 1790 0
-849 -718 1788 0
-849 -716 1786 0
-849 -714 1784 0
-849 -712 1782 0
-849 -710 1780 0
-849 -708 1778 0
-849 -707 1776 0
-847 1790 0
-847 -720 1788 0
-847 -718 1786 0
-847 -716 1784 0
-847 -714 1782 0
-847 -712 1780 0
-847 -710 1778 0
-847 -708 1776 0
-847 -707 1774 0
-845 1788 0
-845 -720 1786 0
-845 -718 1784 0
-845 -716 1782 0
-845 -714 1780 0
-845 -712 1778 0
-845 -710 1776 0
-845 -708 1774 0
-845 -707 1772 0
-843 1786 0
-843 -720 1784 0
-843 -718 1782 0
-843 -716 1780 0
-843 -714 1778 0
-843 -712 1776 0
-843 -710 1774 0
-843 -708 1772 0
-843 -707 1770 0
-842 1784 0
-842 -720 1782 0
-842 -718 1780 0
-842 -716 1778 0
-842 -714 1776 0
-842 -712 1774 0
-842 -710 1772 0
-842 -708 1770 0
-842 -707 1769 0
c ((shift(x_00007_00004, -1) - aux408 + shift(x_00005_00003, -1))<=0)
572 -1800 0
573 -1801 0
575 -1803 0
577 -1805 0
579 -1807 0
581 -1809 0
583 -1811 0
585 -1813 0
857 -1800 0
857 572 -1801 0
857 573 -1803 0
857 575 -1805 0
857 577 -1807 0
857 579 -1809 0
857 581 -1811 0
857 583 -1813 0
857 585 -1815 0
858 -1801 0
858 572 -1803 0
858 573 -1805 0
858 575 -1807 0
858 577 -1809 0
858 579 -1811 0
858 581 -1813 0
858 583 -1815 0
858 585 -1817 0
860 -1803 0
860 572 -1805 0
860 573 -1807 0
860 575 -1809 0
860 577 -1811 0
860 579 -1813 0
860 581 -1815 0
860 583 -1817 0
860 585 -1819 0
862 -1805 0
862 572 -1807 0
862 573 -1809 0
862 575 -1811 0
862 577 -1813 0
862 579 -1815 0
862 581 -1817 0
862 583 -1819 0
862 585 -1821 0
864 -1807 0
864 572 -1809 0
864 573 -1811 0
864 575 -1813 0
864 577 -1815 0
864 579 -1817 0
864 581 -1819 0
864 583 -1821 0
864 585 -1823 0
866 -1809 0
866 572 -1811 0
866 573 -1813 0
866 575 -1815 0
866 577 -1817 0
866 579 -1819 0
866 581 -1821 0
866 583 -1823 0
866 585 -1825 0
868 -1811 0
868 572 -1813 0
868 573 -1815 0
868 575 -1817 0
868 577 -1819 0
868 579 -1821 0
868 581 -1823 0
868 583 -1825 0
868 585 -1827 0
870 -1813 0
870 572 -1815 0
870 573 -1817 0
870 575 -1819 0
870 577 -1821 0
870 579 -1823 0
870 581 -1825 0
870 583 -1827 0
870 585 -1829 0
c (0<=(shift(x_00007_00004, -1) - aux408 + shift(x_00005_00003, -1)))
-585 1829 0
-583 1827 0
-581 1825 0
-579 1823 0
-577 1821 0
-575 1819 0
-573 1817 0
-572 1815 0
-870 1829 0
-870 -585 1827 0
-870 -583 1825 0
-870 -581 1823 0
-870 -579 1821 0
-870 -577 1819 0
-870 -575 1817 0
-870 -573 1815 0
-870 -572 1813 0
-868 1827 0
-868 -585 1825 0
-868 -583 1823 0
-868 -581 1821 0
-868 -579 1819 0
-868 -577 1817 0
-868 -575 1815 0
-868 -573 1813 0
-868 -572 1811 0
-866 1825 0
-866 -585 1823 0
-866 -583 1821 0
-866 -581 1819 0
-866 -579 1817 0
-866 -577 1815 0
-866 -575 1813 0
-866 -573 1811 0
-866 -572 1809 0
-864 1823 0
-864 -585 1821 0
-864 -583 1819 0
-864 -581 1817 0
-864 -579 1815 0
-864 -577 1813 0
-864 -575 1811 0
-864 -573 1809 0
-864 -572 1807 0
-862 1821 0
-862 -585 1819 0
-862 -583 1817 0
-862 -581 1815 0
-862 -579 1813 0
-862 -577 1811 0
-862 -575 1809 0
-862 -573 1807 0
-862 -572 1805 0
-860 1819 0
-860 -585 1817 0
-860 -583 1815 0
-860 -581 1813 0
-860 -579 1811 0
-860 -577 1809 0
-860 -575 1807 0
-860 -573 1805 0
-860 -572 1803 0
-858 1817 0
-858 -585 1815 0
-858 -583 1813 0
-858 -581 1811 0
-858 -579 1809 0
-858 -577 1807 0
-858 -575 1805 0
-858 -573 1803 0
-858 -572 1801 0
-857 1815 0
-857 -585 1813 0
-857 -583 1811 0
-857 -581 1809 0
-857 -579 1807 0
-857 -577 1805 0
-857 -575 1803 0
-857 -573 1801 0
-857 -572 1800 0
c (( - aux409 + shift(x_00003_00003, -1) + shift(x_00004_00003, -1))<=0)
437 -1831 0
438 -1832 0
440 -1834 0
442 -1836 0
444 -1838 0
446 -1840 0
448 -1842 0
450 -1844 0
302 -1831 0
302 437 -1832 0
302 438 -1834 0
302 440 -1836 0
302 442 -1838 0
302 444 -1840 0
302 446 -1842 0
302 448 -1844 0
302 450 -1846 0
303 -1832 0
303 437 -1834 0
303 438 -1836 0
303 440 -1838 0
303 442 -1840 0
303 444 -1842 0
303 446 -1844 0
303 448 -1846 0
303 450 -1848 0
305 -1834 0
305 437 -1836 0
305 438 -1838 0
305 440 -1840 0
305 442 -1842 0
305 444 -1844 0
305 446 -1846 0
305 448 -1848 0
305 450 -1850 0
307 -1836 0
307 437 -1838 0
307 438 -1840 0
307 440 -1842 0
307 442 -1844 0
307 444 -1846 0
307 446 -1848 0
307 448 -1850 0
307 450 -1852 0
309 -1838 0
309 437 -1840 0
309 438 -1842 0
309 440 -1844 0
309 442 -1846 0
309 444 -1848 0
309 446 -1850 0
309 448 -1852 0
309 450 -1854 0
311 -1840 0
311 437 -1842 0
311 438 -1844 0
311 440 -1846 0
311 442 -1848 0
311 444 -1850 0
311 446 -1852 0
311 448 -1854 0
311 450 -1856 0
313 -1842 0
313 437 -1844 0
313 438 -1846 0
313 440 -1848 0
313 442 -1850 0
313 444 -1852 0
313 446 -1854 0
313 448 -1856 0
313 450 -1858 0
315 -1844 0
315 437 -1846 0
315 438 -1848 0
315 440 -1850 0
315 442 -1852 0
315 444 -1854 0
315 446 -1856 0
315 448 -1858 0
315 450 -1860 0
c (0<=( - aux409 + shift(x_00003_00003, -1) + shift(x_00004_00003, -1)))
-450 1860 0
-448 1858 0
-446 1856 0
-444 1854 0
-442 1852 0
-440 1850 0
-438 1848 0
-437 1846 0
-315 1860 0
-315 -450 1858 0
-315 -448 1856 0
-315 -446 1854 0
-315 -444 1852 0
-315 -442 1850 0
-315 -440 1848 0
-315 -438 1846 0
-315 -437 1844 0
-313 1858 0
-313 -450 1856 0
-313 -448 1854 0
-313 -446 1852 0
-313 -444 1850 0
-313 -442 1848 0
-313 -440 1846 0
-313 -438 1844 0
-313 -437 1842 0
-311 1856 0
-311 -450 1854 0
-311 -448 1852 0
-311 -446 1850 0
-311 -444 1848 0
-311 -442 1846 0
-311 -440 1844 0
-311 -438 1842 0
-311 -437 1840 0
-309 1854 0
-309 -450 1852 0
-309 -448 1850 0
-309 -446 1848 0
-309 -444 1846 0
-309 -442 1844 0
-309 -440 1842 0
-309 -438 1840 0
-309 -437 1838 0
-307 1852 0
-307 -450 1850 0
-307 -448 1848 0
-307 -446 1846 0
-307 -444 1844 0
-307 -442 1842 0
-307 -440 1840 0
-307 -438 1838 0
-307 -437 1836 0
-305 1850 0
-305 -450 1848 0
-305 -448 1846 0
-305 -446 1844 0
-305 -444 1842 0
-305 -442 1840 0
-305 -440 1838 0
-305 -438 1836 0
-305 -437 1834 0
-303 1848 0
-303 -450 1846 0
-303 -448 1844 0
-303 -446 1842 0
-303 -444 1840 0
-303 -442 1838 0
-303 -440 1836 0
-303 -438 1834 0
-303 -437 1832 0
-302 1846 0
-302 -450 1844 0
-302 -448 1842 0
-302 -446 1840 0
-302 -444 1838 0
-302 -442 1836 0
-302 -440 1834 0
-302 -438 1832 0
-302 -437 1831 0
c ((shift(x_00007_00007, -1) - aux410 + shift(x_00006_00007, -1))<=0)
767 -1862 0
768 -1863 0
770 -1865 0
772 -1867 0
774 -1869 0
776 -1871 0
778 -1873 0
780 -1875 0
902 -1862 0
902 767 -1863 0
902 768 -1865 0
902 770 -1867 0
902 772 -1869 0
902 774 -1871 0
902 776 -1873 0
902 778 -1875 0
902 780 -1877 0
903 -1863 0
903 767 -1865 0
903 768 -1867 0
903 770 -1869 0
903 772 -1871 0
903 774 -1873 0
903 776 -1875 0
903 778 -1877 0
903 780 -1879 0
905 -1865 0
905 767 -1867 0
905 768 -1869 0
905 770 -1871 0
905 772 -1873 0
905 774 -1875 0
905 776 -1877 0
905 778 -1879 0
905 780 -1881 0
907 -1867 0
907 767 -1869 0
907 768 -1871 0
907 770 -1873 0
907 772 -1875 0
907 774 -1877 0
907 776 -1879 0
907 778 -1881 0
907 780 -1883 0
909 -1869 0
909 767 -1871 0
909 768 -1873 0
909 770 -1875 0
909 772 -1877 0
909 774 -1879 0
909 776 -1881 0
909 778 -1883 0
909 780 -1885 0
911 -1871 0
911 767 -1873 0
911 768 -1875 0
911 770 -1877 0
911 772 -1879 0
911 774 -1881 0
911 776 -1883 0
911 778 -1885 0
911 780 -1887 0
913 -1873 0
913 767 -1875 0
913 768 -1877 0
913 770 -1879 0
913 772 -1881 0
913 774 -1883 0
913 776 -1885 0
913 778 -1887 0
913 780 -1889 0
915 -1875 0
915 767 -1877 0
915 768 -1879 0
915 770 -1881 0
915 772 -1883 0
915 774 -1885 0
915 776 -1887 0
915 778 -1889 0
915 780 -1891 0
c (0<=(shift(x_00007_00007, -1) - aux410 + shift(x_00006_00007, -1)))
-780 1891 0
-778 1889 0
-776 1887 0
-774 1885 0
-772 1883 0
-770 1881 0
-768 1879 0
-767 1877 0
-915 1891 0
-915 -780 1889 0
-915 -778 1887 0
-915 -776 1885 0
-915 -774 1883 0
-915 -772 1881 0
-915 -770 1879 0
-915 -768 1877 0
-915 -767 1875 0
-913 1889 0
-913 -780 1887 0
-913 -778 1885 0
-913 -776 1883 0
-913 -774 1881 0
-913 -772 1879 0
-913 -770 1877 0
-913 -768 1875 0
-913 -767 1873 0
-911 1887 0
-911 -780 1885 0
-911 -778 1883 0
-911 -776 1881 0
-911 -774 1879 0
-911 -772 1877 0
-911 -770 1875 0
-911 -768 1873 0
-911 -767 1871 0
-909 1885 0
-909 -780 1883 0
-909 -778 1881 0
-909 -776 1879 0
-909 -774 1877 0
-909 -772 1875 0
-909 -770 1873 0
-909 -768 1871 0
-909 -767 1869 0
-907 1883 0
-907 -780 1881 0
-907 -778 1879 0
-907 -776 1877 0
-907 -774 1875 0
-907 -772 1873 0
-907 -770 1871 0
-907 -768 1869 0
-907 -767 1867 0
-905 1881 0
-905 -780 1879 0
-905 -778 1877 0
-905 -776 1875 0
-905 -774 1873 0
-905 -772 1871 0
-905 -770 1869 0
-905 -768 1867 0
-905 -767 1865 0
-903 1879 0
-903 -780 1877 0
-903 -778 1875 0
-903 -776 1873 0
-903 -774 1871 0
-903 -772 1869 0
-903 -770 1867 0
-903 -768 1865 0
-903 -767 1863 0
-902 1877 0
-902 -780 1875 0
-902 -778 1873 0
-902 -776 1871 0
-902 -774 1869 0
-902 -772 1867 0
-902 -770 1865 0
-902 -768 1863 0
-902 -767 1862 0
c (( - aux411 + shift(x_00005_00007, -1) + shift(x_00003_00006, -1))<=0)
347 -1893 0
348 -1894 0
350 -1896 0
352 -1898 0
354 -1900 0
356 -1902 0
358 -1904 0
360 -1906 0
632 -1893 0
632 347 -1894 0
632 348 -1896 0
632 350 -1898 0
632 352 -1900 0
632 354 -1902 0
632 356 -1904 0
632 358 -1906 0
632 360 -1908 0
633 -1894 0
633 347 -1896 0
633 348 -1898 0
633 350 -1900 0
633 352 -1902 0
633 354 -1904 0
633 356 -1906 0
633 358 -1908 0
633 360 -1910 0
635 -1896 0
635 347 -1898 0
635 348 -1900 0
635 350 -1902 0
635 352 -1904 0
635 354 -1906 0
635 356 -1908 0
635 358 -1910 0
635 360 -1912 0
637 -1898 0
637 347 -1900 0
637 348 -1902 0
637 350 -1904 0
637 352 -1906 0
637 354 -1908 0
637 356 -1910 0
637 358 -1912 0
637 360 -1914 0
639 -1900 0
639 347 -1902 0
639 348 -1904 0
639 350 -1906 0
639 352 -1908 0
639 354 -1910 0
639 356 -1912 0
639 358 -1914 0
639 360 -1916 0
641 -1902 0
641 347 -1904 0
641 348 -1906 0
641 350 -1908 0
641 352 -1910 0
641 354 -1912 0
641 356 -1914 0
641 358 -1916 0
641 360 -1918 0
643 -1904 0
643 347 -1906 0
643 348 -1908 0
643 350 -1910 0
643 352 -1912 0
643 354 -1914 0
643 356 -1916 0
643 358 -1918 0
643 360 -1920 0
645 -1906 0
645 347 -1908 0
645 348 -1910 0
645 350 -1912 0
645 352 -1914 0
645 354 -1916 0
645 356 -1918 0
645 358 -1920 0
645 360 -1922 0
c (0<=( - aux411 + shift(x_00005_00007, -1) + shift(x_00003_00006, -1)))
-360 1922 0
-358 1920 0
-356 1918 0
-354 1916 0
-352 1914 0
-350 1912 0
-348 1910 0
-347 1908 0
-645 1922 0
-645 -360 1920 0
-645 -358 1918 0
-645 -356 1916 0
-645 -354 1914 0
-645 -352 1912 0
-645 -350 1910 0
-645 -348 1908 0
-645 -347 1906 0
-643 1920 0
-643 -360 1918 0
-643 -358 1916 0
-643 -356 1914 0
-643 -354 1912 0
-643 -352 1910 0
-643 -350 1908 0
-643 -348 1906 0
-643 -347 1904 0
-641 1918 0
-641 -360 1916 0
-641 -358 1914 0
-641 -356 1912 0
-641 -354 1910 0
-641 -352 1908 0
-641 -350 1906 0
-641 -348 1904 0
-641 -347 1902 0
-639 1916 0
-639 -360 1914 0
-639 -358 1912 0
-639 -356 1910 0
-639 -354 1908 0
-639 -352 1906 0
-639 -350 1904 0
-639 -348 1902 0
-639 -347 1900 0
-637 1914 0
-637 -360 1912 0
-637 -358 1910 0
-637 -356 1908 0
-637 -354 1906 0
-637 -352 1904 0
-637 -350 1902 0
-637 -348 1900 0
-637 -347 1898 0
-635 1912 0
-635 -360 1910 0
-635 -358 1908 0
-635 -356 1906 0
-635 -354 1904 0
-635 -352 1902 0
-635 -350 1900 0
-635 -348 1898 0
-635 -347 1896 0
-633 1910 0
-633 -360 1908 0
-633 -358 1906 0
-633 -356 1904 0
-633 -354 1902 0
-633 -352 1900 0
-633 -350 1898 0
-633 -348 1896 0
-633 -347 1894 0
-632 1908 0
-632 -360 1906 0
-632 -358 1904 0
-632 -356 1902 0
-632 -354 1900 0
-632 -352 1898 0
-632 -350 1896 0
-632 -348 1894 0
-632 -347 1893 0
c (( - aux412 + shift(x_00003_00007, -1) + shift(x_00004_00007, -1))<=0)
497 -1924 0
498 -1925 0
500 -1927 0
502 -1929 0
504 -1931 0
506 -1933 0
508 -1935 0
510 -1937 0
362 -1924 0
362 497 -1925 0
362 498 -1927 0
362 500 -1929 0
362 502 -1931 0
362 504 -1933 0
362 506 -1935 0
362 508 -1937 0
362 510 -1939 0
363 -1925 0
363 497 -1927 0
363 498 -1929 0
363 500 -1931 0
363 502 -1933 0
363 504 -1935 0
363 506 -1937 0
363 508 -1939 0
363 510 -1941 0
365 -1927 0
365 497 -1929 0
365 498 -1931 0
365 500 -1933 0
365 502 -1935 0
365 504 -1937 0
365 506 -1939 0
365 508 -1941 0
365 510 -1943 0
367 -1929 0
367 497 -1931 0
367 498 -1933 0
367 500 -1935 0
367 502 -1937 0
367 504 -1939 0
367 506 -1941 0
367 508 -1943 0
367 510 -1945 0
369 -1931 0
369 497 -1933 0
369 498 -1935 0
369 500 -1937 0
369 502 -1939 0
369 504 -1941 0
369 506 -1943 0
369 508 -1945 0
369 510 -1947 0
371 -1933 0
371 497 -1935 0
371 498 -1937 0
371 500 -1939 0
371 502 -1941 0
371 504 -1943 0
371 506 -1945 0
371 508 -1947 0
371 510 -1949 0
373 -1935 0
373 497 -1937 0
373 498 -1939 0
373 500 -1941 0
373 502 -1943 0
373 504 -1945 0
373 506 -1947 0
373 508 -1949 0
373 510 -1951 0
375 -1937 0
375 497 -1939 0
375 498 -1941 0
375 500 -1943 0
375 502 -1945 0
375 504 -1947 0
375 506 -1949 0
375 508 -1951 0
375 510 -1953 0
c (0<=( - aux412 + shift(x_00003_00007, -1) + shift(x_00004_00007, -1)))
-510 1953 0
-508 1951 0
-506 1949 0
-504 1947 0
-502 1945 0
-500 1943 0
-498 1941 0
-497 1939 0
-375 1953 0
-375 -510 1951 0
-375 -508 1949 0
-375 -506 1947 0
-375 -504 1945 0
-375 -502 1943 0
-375 -500 1941 0
-375 -498 1939 0
-375 -497 1937 0
-373 1951 0
-373 -510 1949 0
-373 -508 1947 0
-373 -506 1945 0
-373 -504 1943 0
-373 -502 1941 0
-373 -500 1939 0
-373 -498 1937 0
-373 -497 1935 0
-371 1949 0
-371 -510 1947 0
-371 -508 1945 0
-371 -506 1943 0
-371 -504 1941 0
-371 -502 1939 0
-371 -500 1937 0
-371 -498 1935 0
-371 -497 1933 0
-369 1947 0
-369 -510 1945 0
-369 -508 1943 0
-369 -506 1941 0
-369 -504 1939 0
-369 -502 1937 0
-369 -500 1935 0
-369 -498 1933 0
-369 -497 1931 0
-367 1945 0
-367 -510 1943 0
-367 -508 1941 0
-367 -506 1939 0
-367 -504 1937 0
-367 -502 1935 0
-367 -500 1933 0
-367 -498 1931 0
-367 -497 1929 0
-365 1943 0
-365 -510 1941 0
-365 -508 1939 0
-365 -506 1937 0
-365 -504 1935 0
-365 -502 1933 0
-365 -500 1931 0
-365 -498 1929 0
-365 -497 1927 0
-363 1941 0
-363 -510 1939 0
-363 -508 1937 0
-363 -506 1935 0
-363 -504 1933 0
-363 -502 1931 0
-363 -500 1929 0
-363 -498 1927 0
-363 -497 1925 0
-362 1939 0
-362 -510 1937 0
-362 -508 1935 0
-362 -506 1933 0
-362 -504 1931 0
-362 -502 1929 0
-362 -500 1927 0
-362 -498 1925 0
-362 -497 1924 0
c ((SATLiteral(272) - aux415 + SATLiteral(542))<=0)
-542 -2017 0
-272 -2017 0
-272 -542 -2018 0
c (0<=(SATLiteral(272) - aux415 + SATLiteral(542)))
542 2018 0
272 2018 0
272 542 2017 0
c ((SATLiteral(947) - aux416 + SATLiteral(812))<=0)
-812 -2020 0
-947 -2020 0
-947 -812 -2021 0
c (0<=(SATLiteral(947) - aux416 + SATLiteral(812)))
812 2021 0
947 2021 0
947 812 2020 0
c (( - aux417 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -2023 0
-677 -2023 0
-677 -137 -2024 0
c (0<=( - aux417 + SATLiteral(677) + SATLiteral(137)))
137 2024 0
677 2024 0
677 137 2023 0
c (( - aux418 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -2026 0
-407 -2026 0
-407 -1082 -2027 0
c (0<=( - aux418 + SATLiteral(407) + SATLiteral(1082)))
1082 2027 0
407 2027 0
407 1082 2026 0
c ((aux418 - aux419 + SATLiteral(2))<=0)
2026 -2029 0
2027 -2030 0
-2 -2029 0
-2 2026 -2030 0
-2 2027 -2032 0
c (0<=(aux418 - aux419 + SATLiteral(2)))
-2027 2032 0
-2026 2030 0
2 2032 0
2 -2027 2030 0
2 -2026 2029 0
c ((aux415 + aux417 - aux420)<=0)
2023 -2034 0
2024 -2035 0
2017 -2034 0
2017 2023 -2035 0
2017 2024 -2037 0
2018 -2035 0
2018 2023 -2037 0
2018 2024 -2039 0
c (0<=(aux415 + aux417 - aux420))
-2024 2039 0
-2023 2037 0
-2018 2039 0
-2018 -2024 2037 0
-2018 -2023 2035 0
-2017 2037 0
-2017 -2024 2035 0
-2017 -2023 2034 0
c ((SATLiteral(274) - aux421 + SATLiteral(544))<=0)
-544 -2041 0
-274 -2041 0
-274 -544 -2042 0
c (0<=(SATLiteral(274) - aux421 + SATLiteral(544)))
544 2042 0
274 2042 0
274 544 2041 0
c ((SATLiteral(949) - aux422 + SATLiteral(814))<=0)
-814 -2044 0
-949 -2044 0
-949 -814 -2045 0
c (0<=(SATLiteral(949) - aux422 + SATLiteral(814)))
814 2045 0
949 2045 0
949 814 2044 0
c (( - aux423 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -2047 0
-679 -2047 0
-679 -139 -2048 0
c (0<=( - aux423 + SATLiteral(679) + SATLiteral(139)))
139 2048 0
679 2048 0
679 139 2047 0
c (( - aux424 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -2050 0
-409 -2050 0
-409 -1084 -2051 0
c (0<=( - aux424 + SATLiteral(409) + SATLiteral(1084)))
1084 2051 0
409 2051 0
409 1084 2050 0
c ((aux424 - aux425 + SATLiteral(4))<=0)
2050 -2053 0
2051 -2054 0
-4 -2053 0
-4 2050 -2054 0
-4 2051 -2056 0
c (0<=(aux424 - aux425 + SATLiteral(4)))
-2051 2056 0
-2050 2054 0
4 2056 0
4 -2051 2054 0
4 -2050 2053 0
c ((aux421 + aux423 - aux426)<=0)
2047 -2058 0
2048 -2059 0
2041 -2058 0
2041 2047 -2059 0
2041 2048 -2061 0
2042 -2059 0
2042 2047 -2061 0
2042 2048 -2063 0
c (0<=(aux421 + aux423 - aux426))
-2048 2063 0
-2047 2061 0
-2042 2063 0
-2042 -2048 2061 0
-2042 -2047 2059 0
-2041 2061 0
-2041 -2048 2059 0
-2041 -2047 2058 0
c ((SATLiteral(276) - aux427 + SATLiteral(546))<=0)
-546 -2065 0
-276 -2065 0
-276 -546 -2066 0
c (0<=(SATLiteral(276) - aux427 + SATLiteral(546)))
546 2066 0
276 2066 0
276 546 2065 0
c ((SATLiteral(951) - aux428 + SATLiteral(816))<=0)
-816 -2068 0
-951 -2068 0
-951 -816 -2069 0
c (0<=(SATLiteral(951) - aux428 + SATLiteral(816)))
816 2069 0
951 2069 0
951 816 2068 0
c (( - aux429 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -2071 0
-681 -2071 0
-681 -141 -2072 0
c (0<=( - aux429 + SATLiteral(681) + SATLiteral(141)))
141 2072 0
681 2072 0
681 141 2071 0
c (( - aux430 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -2074 0
-411 -2074 0
-411 -1086 -2075 0
c (0<=( - aux430 + SATLiteral(411) + SATLiteral(1086)))
1086 2075 0
411 2075 0
411 1086 2074 0
c ((aux430 - aux431 + SATLiteral(6))<=0)
2074 -2077 0
2075 -2078 0
-6 -2077 0
-6 2074 -2078 0
-6 2075 -2080 0
c (0<=(aux430 - aux431 + SATLiteral(6)))
-2075 2080 0
-2074 2078 0
6 2080 0
6 -2075 2078 0
6 -2074 2077 0
c ((aux427 + aux429 - aux432)<=0)
2071 -2082 0
2072 -2083 0
2065 -2082 0
2065 2071 -2083 0
2065 2072 -2085 0
2066 -2083 0
2066 2071 -2085 0
2066 2072 -2087 0
c (0<=(aux427 + aux429 - aux432))
-2072 2087 0
-2071 2085 0
-2066 2087 0
-2066 -2072 2085 0
-2066 -2071 2083 0
-2065 2085 0
-2065 -2072 2083 0
-2065 -2071 2082 0
c ((SATLiteral(278) - aux433 + SATLiteral(548))<=0)
-548 -2089 0
-278 -2089 0
-278 -548 -2090 0
c (0<=(SATLiteral(278) - aux433 + SATLiteral(548)))
548 2090 0
278 2090 0
278 548 2089 0
c ((SATLiteral(953) - aux434 + SATLiteral(818))<=0)
-818 -2092 0
-953 -2092 0
-953 -818 -2093 0
c (0<=(SATLiteral(953) - aux434 + SATLiteral(818)))
818 2093 0
953 2093 0
953 818 2092 0
c (( - aux435 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -2095 0
-683 -2095 0
-683 -143 -2096 0
c (0<=( - aux435 + SATLiteral(683) + SATLiteral(143)))
143 2096 0
683 2096 0
683 143 2095 0
c (( - aux436 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -2098 0
-413 -2098 0
-413 -1088 -2099 0
c (0<=( - aux436 + SATLiteral(413) + SATLiteral(1088)))
1088 2099 0
413 2099 0
413 1088 2098 0
c ((aux436 - aux437 + SATLiteral(8))<=0)
2098 -2101 0
2099 -2102 0
-8 -2101 0
-8 2098 -2102 0
-8 2099 -2104 0
c (0<=(aux436 - aux437 + SATLiteral(8)))
-2099 2104 0
-2098 2102 0
8 2104 0
8 -2099 2102 0
8 -2098 2101 0
c ((aux433 + aux435 - aux438)<=0)
2095 -2106 0
2096 -2107 0
2089 -2106 0
2089 2095 -2107 0
2089 2096 -2109 0
2090 -2107 0
2090 2095 -2109 0
2090 2096 -2111 0
c (0<=(aux433 + aux435 - aux438))
-2096 2111 0
-2095 2109 0
-2090 2111 0
-2090 -2096 2109 0
-2090 -2095 2107 0
-2089 2109 0
-2089 -2096 2107 0
-2089 -2095 2106 0
c ((SATLiteral(280) - aux439 + SATLiteral(550))<=0)
-550 -2113 0
-280 -2113 0
-280 -550 -2114 0
c (0<=(SATLiteral(280) - aux439 + SATLiteral(550)))
550 2114 0
280 2114 0
280 550 2113 0
c ((SATLiteral(955) - aux440 + SATLiteral(820))<=0)
-820 -2116 0
-955 -2116 0
-955 -820 -2117 0
c (0<=(SATLiteral(955) - aux440 + SATLiteral(820)))
820 2117 0
955 2117 0
955 820 2116 0
c (( - aux441 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -2119 0
-685 -2119 0
-685 -145 -2120 0
c (0<=( - aux441 + SATLiteral(685) + SATLiteral(145)))
145 2120 0
685 2120 0
685 145 2119 0
c (( - aux442 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -2122 0
-415 -2122 0
-415 -1090 -2123 0
c (0<=( - aux442 + SATLiteral(415) + SATLiteral(1090)))
1090 2123 0
415 2123 0
415 1090 2122 0
c ((aux442 - aux443 + SATLiteral(10))<=0)
2122 -2125 0
2123 -2126 0
-10 -2125 0
-10 2122 -2126 0
-10 2123 -2128 0
c (0<=(aux442 - aux443 + SATLiteral(10)))
-2123 2128 0
-2122 2126 0
10 2128 0
10 -2123 2126 0
10 -2122 2125 0
c ((aux439 + aux441 - aux444)<=0)
2119 -2130 0
2120 -2131 0
2113 -2130 0
2113 2119 -2131 0
2113 2120 -2133 0
2114 -2131 0
2114 2119 -2133 0
2114 2120 -2135 0
c (0<=(aux439 + aux441 - aux444))
-2120 2135 0
-2119 2133 0
-2114 2135 0
-2114 -2120 2133 0
-2114 -2119 2131 0
-2113 2133 0
-2113 -2120 2131 0
-2113 -2119 2130 0
c ((SATLiteral(282) - aux445 + SATLiteral(552))<=0)
-552 -2137 0
-282 -2137 0
-282 -552 -2138 0
c (0<=(SATLiteral(282) - aux445 + SATLiteral(552)))
552 2138 0
282 2138 0
282 552 2137 0
c ((SATLiteral(957) - aux446 + SATLiteral(822))<=0)
-822 -2140 0
-957 -2140 0
-957 -822 -2141 0
c (0<=(SATLiteral(957) - aux446 + SATLiteral(822)))
822 2141 0
957 2141 0
957 822 2140 0
c (( - aux447 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -2143 0
-687 -2143 0
-687 -147 -2144 0
c (0<=( - aux447 + SATLiteral(687) + SATLiteral(147)))
147 2144 0
687 2144 0
687 147 2143 0
c (( - aux448 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2146 0
-417 -2146 0
-417 -1092 -2147 0
c (0<=( - aux448 + SATLiteral(417) + SATLiteral(1092)))
1092 2147 0
417 2147 0
417 1092 2146 0
c ((aux448 - aux449 + SATLiteral(12))<=0)
2146 -2149 0
2147 -2150 0
-12 -2149 0
-12 2146 -2150 0
-12 2147 -2152 0
c (0<=(aux448 - aux449 + SATLiteral(12)))
-2147 2152 0
-2146 2150 0
12 2152 0
12 -2147 2150 0
12 -2146 2149 0
c ((aux445 + aux447 - aux450)<=0)
2143 -2154 0
2144 -2155 0
2137 -2154 0
2137 2143 -2155 0
2137 2144 -2157 0
2138 -2155 0
2138 2143 -2157 0
2138 2144 -2159 0
c (0<=(aux445 + aux447 - aux450))
-2144 2159 0
-2143 2157 0
-2138 2159 0
-2138 -2144 2157 0
-2138 -2143 2155 0
-2137 2157 0
-2137 -2144 2155 0
-2137 -2143 2154 0
c ((SATLiteral(284) - aux451 + SATLiteral(554))<=0)
-554 -2161 0
-284 -2161 0
-284 -554 -2162 0
c (0<=(SATLiteral(284) - aux451 + SATLiteral(554)))
554 2162 0
284 2162 0
284 554 2161 0
c ((SATLiteral(959) - aux452 + SATLiteral(824))<=0)
-824 -2164 0
-959 -2164 0
-959 -824 -2165 0
c (0<=(SATLiteral(959) - aux452 + SATLiteral(824)))
824 2165 0
959 2165 0
959 824 2164 0
c (( - aux453 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -2167 0
-689 -2167 0
-689 -149 -2168 0
c (0<=( - aux453 + SATLiteral(689) + SATLiteral(149)))
149 2168 0
689 2168 0
689 149 2167 0
c (( - aux454 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2170 0
-419 -2170 0
-419 -1094 -2171 0
c (0<=( - aux454 + SATLiteral(419) + SATLiteral(1094)))
1094 2171 0
419 2171 0
419 1094 2170 0
c ((aux454 - aux455 + SATLiteral(14))<=0)
2170 -2173 0
2171 -2174 0
-14 -2173 0
-14 2170 -2174 0
-14 2171 -2176 0
c (0<=(aux454 - aux455 + SATLiteral(14)))
-2171 2176 0
-2170 2174 0
14 2176 0
14 -2171 2174 0
14 -2170 2173 0
c ((aux451 + aux453 - aux456)<=0)
2167 -2178 0
2168 -2179 0
2161 -2178 0
2161 2167 -2179 0
2161 2168 -2181 0
2162 -2179 0
2162 2167 -2181 0
2162 2168 -2183 0
c (0<=(aux451 + aux453 - aux456))
-2168 2183 0
-2167 2181 0
-2162 2183 0
-2162 -2168 2181 0
-2162 -2167 2179 0
-2161 2181 0
-2161 -2168 2179 0
-2161 -2167 2178 0
c ((SATLiteral(286) - aux457 + SATLiteral(556))<=0)
-556 -2185 0
-286 -2185 0
-286 -556 -2186 0
c (0<=(SATLiteral(286) - aux457 + SATLiteral(556)))
556 2186 0
286 2186 0
286 556 2185 0
c ((SATLiteral(961) - aux458 + SATLiteral(826))<=0)
-826 -2188 0
-961 -2188 0
-961 -826 -2189 0
c (0<=(SATLiteral(961) - aux458 + SATLiteral(826)))
826 2189 0
961 2189 0
961 826 2188 0
c (( - aux459 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2191 0
-691 -2191 0
-691 -151 -2192 0
c (0<=( - aux459 + SATLiteral(691) + SATLiteral(151)))
151 2192 0
691 2192 0
691 151 2191 0
c (( - aux460 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2194 0
-421 -2194 0
-421 -1096 -2195 0
c (0<=( - aux460 + SATLiteral(421) + SATLiteral(1096)))
1096 2195 0
421 2195 0
421 1096 2194 0
c ((aux460 - aux461 + SATLiteral(16))<=0)
2194 -2197 0
2195 -2198 0
-16 -2197 0
-16 2194 -2198 0
-16 2195 -2200 0
c (0<=(aux460 - aux461 + SATLiteral(16)))
-2195 2200 0
-2194 2198 0
16 2200 0
16 -2195 2198 0
16 -2194 2197 0
c ((aux457 + aux459 - aux462)<=0)
2191 -2202 0
2192 -2203 0
2185 -2202 0
2185 2191 -2203 0
2185 2192 -2205 0
2186 -2203 0
2186 2191 -2205 0
2186 2192 -2207 0
c (0<=(aux457 + aux459 - aux462))
-2192 2207 0
-2191 2205 0
-2186 2207 0
-2186 -2192 2205 0
-2186 -2191 2203 0
-2185 2205 0
-2185 -2192 2203 0
-2185 -2191 2202 0
c ((SATLiteral(-285) - aux463 + SATLiteral(-555))<=0)
555 -2209 0
285 -2209 0
285 555 -2210 0
c (0<=(SATLiteral(-285) - aux463 + SATLiteral(-555)))
-555 2210 0
-285 2210 0
-285 -555 2209 0
c ((SATLiteral(-960) - aux464 + SATLiteral(-825))<=0)
825 -2212 0
960 -2212 0
960 825 -2213 0
c (0<=(SATLiteral(-960) - aux464 + SATLiteral(-825)))
-825 2213 0
-960 2213 0
-960 -825 2212 0
c (( - aux465 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2215 0
690 -2215 0
690 150 -2216 0
c (0<=( - aux465 + SATLiteral(-690) + SATLiteral(-150)))
-150 2216 0
-690 2216 0
-690 -150 2215 0
c (( - aux466 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2218 0
420 -2218 0
420 1095 -2219 0
c (0<=( - aux466 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2219 0
-420 2219 0
-420 -1095 2218 0
c ((aux466 - aux467 + SATLiteral(-15))<=0)
2218 -2221 0
2219 -2222 0
15 -2221 0
15 2218 -2222 0
15 2219 -2224 0
c (0<=(aux466 - aux467 + SATLiteral(-15)))
-2219 2224 0
-2218 2222 0
-15 2224 0
-15 -2219 2222 0
-15 -2218 2221 0
c ((aux463 + aux465 - aux468)<=0)
2215 -2226 0
2216 -2227 0
2209 -2226 0
2209 2215 -2227 0
2209 2216 -2229 0
2210 -2227 0
2210 2215 -2229 0
2210 2216 -2231 0
c (0<=(aux463 + aux465 - aux468))
-2216 2231 0
-2215 2229 0
-2210 2231 0
-2210 -2216 2229 0
-2210 -2215 2227 0
-2209 2229 0
-2209 -2216 2227 0
-2209 -2215 2226 0
c ((SATLiteral(287) - aux469 + SATLiteral(557))<=0)
-557 -2233 0
-287 -2233 0
-287 -557 -2234 0
c (0<=(SATLiteral(287) - aux469 + SATLiteral(557)))
557 2234 0
287 2234 0
287 557 2233 0
c ((SATLiteral(962) - aux470 + SATLiteral(827))<=0)
-827 -2236 0
-962 -2236 0
-962 -827 -2237 0
c (0<=(SATLiteral(962) - aux470 + SATLiteral(827)))
827 2237 0
962 2237 0
962 827 2236 0
c (( - aux471 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2239 0
-692 -2239 0
-692 -152 -2240 0
c (0<=( - aux471 + SATLiteral(692) + SATLiteral(152)))
152 2240 0
692 2240 0
692 152 2239 0
c (( - aux472 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2242 0
-422 -2242 0
-422 -1097 -2243 0
c (0<=( - aux472 + SATLiteral(422) + SATLiteral(1097)))
1097 2243 0
422 2243 0
422 1097 2242 0
c ((aux472 - aux473 + SATLiteral(17))<=0)
2242 -2245 0
2243 -2246 0
-17 -2245 0
-17 2242 -2246 0
-17 2243 -2248 0
c (0<=(aux472 - aux473 + SATLiteral(17)))
-2243 2248 0
-2242 2246 0
17 2248 0
17 -2243 2246 0
17 -2242 2245 0
c ((aux469 + aux471 - aux474)<=0)
2239 -2250 0
2240 -2251 0
2233 -2250 0
2233 2239 -2251 0
2233 2240 -2253 0
2234 -2251 0
2234 2239 -2253 0
2234 2240 -2255 0
c (0<=(aux469 + aux471 - aux474))
-2240 2255 0
-2239 2253 0
-2234 2255 0
-2234 -2240 2253 0
-2234 -2239 2251 0
-2233 2253 0
-2233 -2240 2251 0
-2233 -2239 2250 0
c ((SATLiteral(289) - aux475 + SATLiteral(559))<=0)
-559 -2257 0
-289 -2257 0
-289 -559 -2258 0
c (0<=(SATLiteral(289) - aux475 + SATLiteral(559)))
559 2258 0
289 2258 0
289 559 2257 0
c ((SATLiteral(964) - aux476 + SATLiteral(829))<=0)
-829 -2260 0
-964 -2260 0
-964 -829 -2261 0
c (0<=(SATLiteral(964) - aux476 + SATLiteral(829)))
829 2261 0
964 2261 0
964 829 2260 0
c (( - aux477 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2263 0
-694 -2263 0
-694 -154 -2264 0
c (0<=( - aux477 + SATLiteral(694) + SATLiteral(154)))
154 2264 0
694 2264 0
694 154 2263 0
c (( - aux478 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2266 0
-424 -2266 0
-424 -1099 -2267 0
c (0<=( - aux478 + SATLiteral(424) + SATLiteral(1099)))
1099 2267 0
424 2267 0
424 1099 2266 0
c ((aux478 - aux479 + SATLiteral(19))<=0)
2266 -2269 0
2267 -2270 0
-19 -2269 0
-19 2266 -2270 0
-19 2267 -2272 0
c (0<=(aux478 - aux479 + SATLiteral(19)))
-2267 2272 0
-2266 2270 0
19 2272 0
19 -2267 2270 0
19 -2266 2269 0
c ((aux475 + aux477 - aux480)<=0)
2263 -2274 0
2264 -2275 0
2257 -2274 0
2257 2263 -2275 0
2257 2264 -2277 0
2258 -2275 0
2258 2263 -2277 0
2258 2264 -2279 0
c (0<=(aux475 + aux477 - aux480))
-2264 2279 0
-2263 2277 0
-2258 2279 0
-2258 -2264 2277 0
-2258 -2263 2275 0
-2257 2277 0
-2257 -2264 2275 0
-2257 -2263 2274 0
c ((SATLiteral(291) - aux481 + SATLiteral(561))<=0)
-561 -2281 0
-291 -2281 0
-291 -561 -2282 0
c (0<=(SATLiteral(291) - aux481 + SATLiteral(561)))
561 2282 0
291 2282 0
291 561 2281 0
c ((SATLiteral(966) - aux482 + SATLiteral(831))<=0)
-831 -2284 0
-966 -2284 0
-966 -831 -2285 0
c (0<=(SATLiteral(966) - aux482 + SATLiteral(831)))
831 2285 0
966 2285 0
966 831 2284 0
c (( - aux483 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2287 0
-696 -2287 0
-696 -156 -2288 0
c (0<=( - aux483 + SATLiteral(696) + SATLiteral(156)))
156 2288 0
696 2288 0
696 156 2287 0
c (( - aux484 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2290 0
-426 -2290 0
-426 -1101 -2291 0
c (0<=( - aux484 + SATLiteral(426) + SATLiteral(1101)))
1101 2291 0
426 2291 0
426 1101 2290 0
c ((aux484 - aux485 + SATLiteral(21))<=0)
2290 -2293 0
2291 -2294 0
-21 -2293 0
-21 2290 -2294 0
-21 2291 -2296 0
c (0<=(aux484 - aux485 + SATLiteral(21)))
-2291 2296 0
-2290 2294 0
21 2296 0
21 -2291 2294 0
21 -2290 2293 0
c ((aux481 + aux483 - aux486)<=0)
2287 -2298 0
2288 -2299 0
2281 -2298 0
2281 2287 -2299 0
2281 2288 -2301 0
2282 -2299 0
2282 2287 -2301 0
2282 2288 -2303 0
c (0<=(aux481 + aux483 - aux486))
-2288 2303 0
-2287 2301 0
-2282 2303 0
-2282 -2288 2301 0
-2282 -2287 2299 0
-2281 2301 0
-2281 -2288 2299 0
-2281 -2287 2298 0
c ((SATLiteral(293) - aux487 + SATLiteral(563))<=0)
-563 -2305 0
-293 -2305 0
-293 -563 -2306 0
c (0<=(SATLiteral(293) - aux487 + SATLiteral(563)))
563 2306 0
293 2306 0
293 563 2305 0
c ((SATLiteral(968) - aux488 + SATLiteral(833))<=0)
-833 -2308 0
-968 -2308 0
-968 -833 -2309 0
c (0<=(SATLiteral(968) - aux488 + SATLiteral(833)))
833 2309 0
968 2309 0
968 833 2308 0
c (( - aux489 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2311 0
-698 -2311 0
-698 -158 -2312 0
c (0<=( - aux489 + SATLiteral(698) + SATLiteral(158)))
158 2312 0
698 2312 0
698 158 2311 0
c (( - aux490 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2314 0
-428 -2314 0
-428 -1103 -2315 0
c (0<=( - aux490 + SATLiteral(428) + SATLiteral(1103)))
1103 2315 0
428 2315 0
428 1103 2314 0
c ((aux490 - aux491 + SATLiteral(23))<=0)
2314 -2317 0
2315 -2318 0
-23 -2317 0
-23 2314 -2318 0
-23 2315 -2320 0
c (0<=(aux490 - aux491 + SATLiteral(23)))
-2315 2320 0
-2314 2318 0
23 2320 0
23 -2315 2318 0
23 -2314 2317 0
c ((aux487 + aux489 - aux492)<=0)
2311 -2322 0
2312 -2323 0
2305 -2322 0
2305 2311 -2323 0
2305 2312 -2325 0
2306 -2323 0
2306 2311 -2325 0
2306 2312 -2327 0
c (0<=(aux487 + aux489 - aux492))
-2312 2327 0
-2311 2325 0
-2306 2327 0
-2306 -2312 2325 0
-2306 -2311 2323 0
-2305 2325 0
-2305 -2312 2323 0
-2305 -2311 2322 0
c ((SATLiteral(295) - aux493 + SATLiteral(565))<=0)
-565 -2329 0
-295 -2329 0
-295 -565 -2330 0
c (0<=(SATLiteral(295) - aux493 + SATLiteral(565)))
565 2330 0
295 2330 0
295 565 2329 0
c ((SATLiteral(970) - aux494 + SATLiteral(835))<=0)
-835 -2332 0
-970 -2332 0
-970 -835 -2333 0
c (0<=(SATLiteral(970) - aux494 + SATLiteral(835)))
835 2333 0
970 2333 0
970 835 2332 0
c (( - aux495 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2335 0
-700 -2335 0
-700 -160 -2336 0
c (0<=( - aux495 + SATLiteral(700) + SATLiteral(160)))
160 2336 0
700 2336 0
700 160 2335 0
c (( - aux496 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2338 0
-430 -2338 0
-430 -1105 -2339 0
c (0<=( - aux496 + SATLiteral(430) + SATLiteral(1105)))
1105 2339 0
430 2339 0
430 1105 2338 0
c ((aux496 - aux497 + SATLiteral(25))<=0)
2338 -2341 0
2339 -2342 0
-25 -2341 0
-25 2338 -2342 0
-25 2339 -2344 0
c (0<=(aux496 - aux497 + SATLiteral(25)))
-2339 2344 0
-2338 2342 0
25 2344 0
25 -2339 2342 0
25 -2338 2341 0
c ((aux493 + aux495 - aux498)<=0)
2335 -2346 0
2336 -2347 0
2329 -2346 0
2329 2335 -2347 0
2329 2336 -2349 0
2330 -2347 0
2330 2335 -2349 0
2330 2336 -2351 0
c (0<=(aux493 + aux495 - aux498))
-2336 2351 0
-2335 2349 0
-2330 2351 0
-2330 -2336 2349 0
-2330 -2335 2347 0
-2329 2349 0
-2329 -2336 2347 0
-2329 -2335 2346 0
c ((SATLiteral(297) - aux499 + SATLiteral(567))<=0)
-567 -2353 0
-297 -2353 0
-297 -567 -2354 0
c (0<=(SATLiteral(297) - aux499 + SATLiteral(567)))
567 2354 0
297 2354 0
297 567 2353 0
c ((SATLiteral(972) - aux500 + SATLiteral(837))<=0)
-837 -2356 0
-972 -2356 0
-972 -837 -2357 0
c (0<=(SATLiteral(972) - aux500 + SATLiteral(837)))
837 2357 0
972 2357 0
972 837 2356 0
c (( - aux501 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2359 0
-702 -2359 0
-702 -162 -2360 0
c (0<=( - aux501 + SATLiteral(702) + SATLiteral(162)))
162 2360 0
702 2360 0
702 162 2359 0
c (( - aux502 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2362 0
-432 -2362 0
-432 -1107 -2363 0
c (0<=( - aux502 + SATLiteral(432) + SATLiteral(1107)))
1107 2363 0
432 2363 0
432 1107 2362 0
c ((aux502 - aux503 + SATLiteral(27))<=0)
2362 -2365 0
2363 -2366 0
-27 -2365 0
-27 2362 -2366 0
-27 2363 -2368 0
c (0<=(aux502 - aux503 + SATLiteral(27)))
-2363 2368 0
-2362 2366 0
27 2368 0
27 -2363 2366 0
27 -2362 2365 0
c ((aux499 + aux501 - aux504)<=0)
2359 -2370 0
2360 -2371 0
2353 -2370 0
2353 2359 -2371 0
2353 2360 -2373 0
2354 -2371 0
2354 2359 -2373 0
2354 2360 -2375 0
c (0<=(aux499 + aux501 - aux504))
-2360 2375 0
-2359 2373 0
-2354 2375 0
-2354 -2360 2373 0
-2354 -2359 2371 0
-2353 2373 0
-2353 -2360 2371 0
-2353 -2359 2370 0
c ((SATLiteral(299) - aux505 + SATLiteral(569))<=0)
-569 -2377 0
-299 -2377 0
-299 -569 -2378 0
c (0<=(SATLiteral(299) - aux505 + SATLiteral(569)))
569 2378 0
299 2378 0
299 569 2377 0
c ((SATLiteral(974) - aux506 + SATLiteral(839))<=0)
-839 -2380 0
-974 -2380 0
-974 -839 -2381 0
c (0<=(SATLiteral(974) - aux506 + SATLiteral(839)))
839 2381 0
974 2381 0
974 839 2380 0
c (( - aux507 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2383 0
-704 -2383 0
-704 -164 -2384 0
c (0<=( - aux507 + SATLiteral(704) + SATLiteral(164)))
164 2384 0
704 2384 0
704 164 2383 0
c (( - aux508 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2386 0
-434 -2386 0
-434 -1109 -2387 0
c (0<=( - aux508 + SATLiteral(434) + SATLiteral(1109)))
1109 2387 0
434 2387 0
434 1109 2386 0
c ((aux508 - aux509 + SATLiteral(29))<=0)
2386 -2389 0
2387 -2390 0
-29 -2389 0
-29 2386 -2390 0
-29 2387 -2392 0
c (0<=(aux508 - aux509 + SATLiteral(29)))
-2387 2392 0
-2386 2390 0
29 2392 0
29 -2387 2390 0
29 -2386 2389 0
c ((aux505 + aux507 - aux510)<=0)
2383 -2394 0
2384 -2395 0
2377 -2394 0
2377 2383 -2395 0
2377 2384 -2397 0
2378 -2395 0
2378 2383 -2397 0
2378 2384 -2399 0
c (0<=(aux505 + aux507 - aux510))
-2384 2399 0
-2383 2397 0
-2378 2399 0
-2378 -2384 2397 0
-2378 -2383 2395 0
-2377 2397 0
-2377 -2384 2395 0
-2377 -2383 2394 0
c ((SATLiteral(301) - aux511 + SATLiteral(571))<=0)
-571 -2401 0
-301 -2401 0
-301 -571 -2402 0
c (0<=(SATLiteral(301) - aux511 + SATLiteral(571)))
571 2402 0
301 2402 0
301 571 2401 0
c ((SATLiteral(976) - aux512 + SATLiteral(841))<=0)
-841 -2404 0
-976 -2404 0
-976 -841 -2405 0
c (0<=(SATLiteral(976) - aux512 + SATLiteral(841)))
841 2405 0
976 2405 0
976 841 2404 0
c (( - aux513 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2407 0
-706 -2407 0
-706 -166 -2408 0
c (0<=( - aux513 + SATLiteral(706) + SATLiteral(166)))
166 2408 0
706 2408 0
706 166 2407 0
c (( - aux514 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2410 0
-436 -2410 0
-436 -1111 -2411 0
c (0<=( - aux514 + SATLiteral(436) + SATLiteral(1111)))
1111 2411 0
436 2411 0
436 1111 2410 0
c ((aux514 - aux515 + SATLiteral(31))<=0)
2410 -2413 0
2411 -2414 0
-31 -2413 0
-31 2410 -2414 0
-31 2411 -2416 0
c (0<=(aux514 - aux515 + SATLiteral(31)))
-2411 2416 0
-2410 2414 0
31 2416 0
31 -2411 2414 0
31 -2410 2413 0
c ((aux511 + aux513 - aux516)<=0)
2407 -2418 0
2408 -2419 0
2401 -2418 0
2401 2407 -2419 0
2401 2408 -2421 0
2402 -2419 0
2402 2407 -2421 0
2402 2408 -2423 0
c (0<=(aux511 + aux513 - aux516))
-2408 2423 0
-2407 2421 0
-2402 2423 0
-2402 -2408 2421 0
-2402 -2407 2419 0
-2401 2421 0
-2401 -2408 2419 0
-2401 -2407 2418 0
c ((SATLiteral(-300) - aux517 + SATLiteral(-570))<=0)
570 -2425 0
300 -2425 0
300 570 -2426 0
c (0<=(SATLiteral(-300) - aux517 + SATLiteral(-570)))
-570 2426 0
-300 2426 0
-300 -570 2425 0
c ((SATLiteral(-975) - aux518 + SATLiteral(-840))<=0)
840 -2428 0
975 -2428 0
975 840 -2429 0
c (0<=(SATLiteral(-975) - aux518 + SATLiteral(-840)))
-840 2429 0
-975 2429 0
-975 -840 2428 0
c (( - aux519 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2431 0
705 -2431 0
705 165 -2432 0
c (0<=( - aux519 + SATLiteral(-705) + SATLiteral(-165)))
-165 2432 0
-705 2432 0
-705 -165 2431 0
c (( - aux520 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2434 0
435 -2434 0
435 1110 -2435 0
c (0<=( - aux520 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2435 0
-435 2435 0
-435 -1110 2434 0
c ((aux520 - aux521 + SATLiteral(-30))<=0)
2434 -2437 0
2435 -2438 0
30 -2437 0
30 2434 -2438 0
30 2435 -2440 0
c (0<=(aux520 - aux521 + SATLiteral(-30)))
-2435 2440 0
-2434 2438 0
-30 2440 0
-30 -2435 2438 0
-30 -2434 2437 0
c ((aux517 + aux519 - aux522)<=0)
2431 -2442 0
2432 -2443 0
2425 -2442 0
2425 2431 -2443 0
2425 2432 -2445 0
2426 -2443 0
2426 2431 -2445 0
2426 2432 -2447 0
c (0<=(aux517 + aux519 - aux522))
-2432 2447 0
-2431 2445 0
-2426 2447 0
-2426 -2432 2445 0
-2426 -2431 2443 0
-2425 2445 0
-2425 -2432 2443 0
-2425 -2431 2442 0
c ((SATLiteral(302) - aux523 + SATLiteral(572))<=0)
-572 -2449 0
-302 -2449 0
-302 -572 -2450 0
c (0<=(SATLiteral(302) - aux523 + SATLiteral(572)))
572 2450 0
302 2450 0
302 572 2449 0
c ((SATLiteral(977) - aux524 + SATLiteral(842))<=0)
-842 -2452 0
-977 -2452 0
-977 -842 -2453 0
c (0<=(SATLiteral(977) - aux524 + SATLiteral(842)))
842 2453 0
977 2453 0
977 842 2452 0
c (( - aux525 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2455 0
-707 -2455 0
-707 -167 -2456 0
c (0<=( - aux525 + SATLiteral(707) + SATLiteral(167)))
167 2456 0
707 2456 0
707 167 2455 0
c (( - aux526 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2458 0
-437 -2458 0
-437 -1112 -2459 0
c (0<=( - aux526 + SATLiteral(437) + SATLiteral(1112)))
1112 2459 0
437 2459 0
437 1112 2458 0
c ((aux526 - aux527 + SATLiteral(32))<=0)
2458 -2461 0
2459 -2462 0
-32 -2461 0
-32 2458 -2462 0
-32 2459 -2464 0
c (0<=(aux526 - aux527 + SATLiteral(32)))
-2459 2464 0
-2458 2462 0
32 2464 0
32 -2459 2462 0
32 -2458 2461 0
c ((aux523 + aux525 - aux528)<=0)
2455 -2466 0
2456 -2467 0
2449 -2466 0
2449 2455 -2467 0
2449 2456 -2469 0
2450 -2467 0
2450 2455 -2469 0
2450 2456 -2471 0
c (0<=(aux523 + aux525 - aux528))
-2456 2471 0
-2455 2469 0
-2450 2471 0
-2450 -2456 2469 0
-2450 -2455 2467 0
-2449 2469 0
-2449 -2456 2467 0
-2449 -2455 2466 0
c ((SATLiteral(304) - aux529 + SATLiteral(574))<=0)
-574 -2473 0
-304 -2473 0
-304 -574 -2474 0
c (0<=(SATLiteral(304) - aux529 + SATLiteral(574)))
574 2474 0
304 2474 0
304 574 2473 0
c ((SATLiteral(979) - aux530 + SATLiteral(844))<=0)
-844 -2476 0
-979 -2476 0
-979 -844 -2477 0
c (0<=(SATLiteral(979) - aux530 + SATLiteral(844)))
844 2477 0
979 2477 0
979 844 2476 0
c (( - aux531 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2479 0
-709 -2479 0
-709 -169 -2480 0
c (0<=( - aux531 + SATLiteral(709) + SATLiteral(169)))
169 2480 0
709 2480 0
709 169 2479 0
c (( - aux532 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2482 0
-439 -2482 0
-439 -1114 -2483 0
c (0<=( - aux532 + SATLiteral(439) + SATLiteral(1114)))
1114 2483 0
439 2483 0
439 1114 2482 0
c ((aux532 - aux533 + SATLiteral(34))<=0)
2482 -2485 0
2483 -2486 0
-34 -2485 0
-34 2482 -2486 0
-34 2483 -2488 0
c (0<=(aux532 - aux533 + SATLiteral(34)))
-2483 2488 0
-2482 2486 0
34 2488 0
34 -2483 2486 0
34 -2482 2485 0
c ((aux529 + aux531 - aux534)<=0)
2479 -2490 0
2480 -2491 0
2473 -2490 0
2473 2479 -2491 0
2473 2480 -2493 0
2474 -2491 0
2474 2479 -2493 0
2474 2480 -2495 0
c (0<=(aux529 + aux531 - aux534))
-2480 2495 0
-2479 2493 0
-2474 2495 0
-2474 -2480 2493 0
-2474 -2479 2491 0
-2473 2493 0
-2473 -2480 2491 0
-2473 -2479 2490 0
c ((SATLiteral(306) - aux535 + SATLiteral(576))<=0)
-576 -2497 0
-306 -2497 0
-306 -576 -2498 0
c (0<=(SATLiteral(306) - aux535 + SATLiteral(576)))
576 2498 0
306 2498 0
306 576 2497 0
c ((SATLiteral(981) - aux536 + SATLiteral(846))<=0)
-846 -2500 0
-981 -2500 0
-981 -846 -2501 0
c (0<=(SATLiteral(981) - aux536 + SATLiteral(846)))
846 2501 0
981 2501 0
981 846 2500 0
c (( - aux537 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2503 0
-711 -2503 0
-711 -171 -2504 0
c (0<=( - aux537 + SATLiteral(711) + SATLiteral(171)))
171 2504 0
711 2504 0
711 171 2503 0
c (( - aux538 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2506 0
-441 -2506 0
-441 -1116 -2507 0
c (0<=( - aux538 + SATLiteral(441) + SATLiteral(1116)))
1116 2507 0
441 2507 0
441 1116 2506 0
c ((aux538 - aux539 + SATLiteral(36))<=0)
2506 -2509 0
2507 -2510 0
-36 -2509 0
-36 2506 -2510 0
-36 2507 -2512 0
c (0<=(aux538 - aux539 + SATLiteral(36)))
-2507 2512 0
-2506 2510 0
36 2512 0
36 -2507 2510 0
36 -2506 2509 0
c ((aux535 + aux537 - aux540)<=0)
2503 -2514 0
2504 -2515 0
2497 -2514 0
2497 2503 -2515 0
2497 2504 -2517 0
2498 -2515 0
2498 2503 -2517 0
2498 2504 -2519 0
c (0<=(aux535 + aux537 - aux540))
-2504 2519 0
-2503 2517 0
-2498 2519 0
-2498 -2504 2517 0
-2498 -2503 2515 0
-2497 2517 0
-2497 -2504 2515 0
-2497 -2503 2514 0
c ((SATLiteral(308) - aux541 + SATLiteral(578))<=0)
-578 -2521 0
-308 -2521 0
-308 -578 -2522 0
c (0<=(SATLiteral(308) - aux541 + SATLiteral(578)))
578 2522 0
308 2522 0
308 578 2521 0
c ((SATLiteral(983) - aux542 + SATLiteral(848))<=0)
-848 -2524 0
-983 -2524 0
-983 -848 -2525 0
c (0<=(SATLiteral(983) - aux542 + SATLiteral(848)))
848 2525 0
983 2525 0
983 848 2524 0
c (( - aux543 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2527 0
-713 -2527 0
-713 -173 -2528 0
c (0<=( - aux543 + SATLiteral(713) + SATLiteral(173)))
173 2528 0
713 2528 0
713 173 2527 0
c (( - aux544 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2530 0
-443 -2530 0
-443 -1118 -2531 0
c (0<=( - aux544 + SATLiteral(443) + SATLiteral(1118)))
1118 2531 0
443 2531 0
443 1118 2530 0
c ((aux544 - aux545 + SATLiteral(38))<=0)
2530 -2533 0
2531 -2534 0
-38 -2533 0
-38 2530 -2534 0
-38 2531 -2536 0
c (0<=(aux544 - aux545 + SATLiteral(38)))
-2531 2536 0
-2530 2534 0
38 2536 0
38 -2531 2534 0
38 -2530 2533 0
c ((aux541 + aux543 - aux546)<=0)
2527 -2538 0
2528 -2539 0
2521 -2538 0
2521 2527 -2539 0
2521 2528 -2541 0
2522 -2539 0
2522 2527 -2541 0
2522 2528 -2543 0
c (0<=(aux541 + aux543 - aux546))
-2528 2543 0
-2527 2541 0
-2522 2543 0
-2522 -2528 2541 0
-2522 -2527 2539 0
-2521 2541 0
-2521 -2528 2539 0
-2521 -2527 2538 0
c ((SATLiteral(310) - aux547 + SATLiteral(580))<=0)
-580 -2545 0
-310 -2545 0
-310 -580 -2546 0
c (0<=(SATLiteral(310) - aux547 + SATLiteral(580)))
580 2546 0
310 2546 0
310 580 2545 0
c ((SATLiteral(985) - aux548 + SATLiteral(850))<=0)
-850 -2548 0
-985 -2548 0
-985 -850 -2549 0
c (0<=(SATLiteral(985) - aux548 + SATLiteral(850)))
850 2549 0
985 2549 0
985 850 2548 0
c (( - aux549 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2551 0
-715 -2551 0
-715 -175 -2552 0
c (0<=( - aux549 + SATLiteral(715) + SATLiteral(175)))
175 2552 0
715 2552 0
715 175 2551 0
c (( - aux550 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2554 0
-445 -2554 0
-445 -1120 -2555 0
c (0<=( - aux550 + SATLiteral(445) + SATLiteral(1120)))
1120 2555 0
445 2555 0
445 1120 2554 0
c ((aux550 - aux551 + SATLiteral(40))<=0)
2554 -2557 0
2555 -2558 0
-40 -2557 0
-40 2554 -2558 0
-40 2555 -2560 0
c (0<=(aux550 - aux551 + SATLiteral(40)))
-2555 2560 0
-2554 2558 0
40 2560 0
40 -2555 2558 0
40 -2554 2557 0
c ((aux547 + aux549 - aux552)<=0)
2551 -2562 0
2552 -2563 0
2545 -2562 0
2545 2551 -2563 0
2545 2552 -2565 0
2546 -2563 0
2546 2551 -2565 0
2546 2552 -2567 0
c (0<=(aux547 + aux549 - aux552))
-2552 2567 0
-2551 2565 0
-2546 2567 0
-2546 -2552 2565 0
-2546 -2551 2563 0
-2545 2565 0
-2545 -2552 2563 0
-2545 -2551 2562 0
c ((SATLiteral(312) - aux553 + SATLiteral(582))<=0)
-582 -2569 0
-312 -2569 0
-312 -582 -2570 0
c (0<=(SATLiteral(312) - aux553 + SATLiteral(582)))
582 2570 0
312 2570 0
312 582 2569 0
c ((SATLiteral(987) - aux554 + SATLiteral(852))<=0)
-852 -2572 0
-987 -2572 0
-987 -852 -2573 0
c (0<=(SATLiteral(987) - aux554 + SATLiteral(852)))
852 2573 0
987 2573 0
987 852 2572 0
c (( - aux555 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2575 0
-717 -2575 0
-717 -177 -2576 0
c (0<=( - aux555 + SATLiteral(717) + SATLiteral(177)))
177 2576 0
717 2576 0
717 177 2575 0
c (( - aux556 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2578 0
-447 -2578 0
-447 -1122 -2579 0
c (0<=( - aux556 + SATLiteral(447) + SATLiteral(1122)))
1122 2579 0
447 2579 0
447 1122 2578 0
c ((aux556 - aux557 + SATLiteral(42))<=0)
2578 -2581 0
2579 -2582 0
-42 -2581 0
-42 2578 -2582 0
-42 2579 -2584 0
c (0<=(aux556 - aux557 + SATLiteral(42)))
-2579 2584 0
-2578 2582 0
42 2584 0
42 -2579 2582 0
42 -2578 2581 0
c ((aux553 + aux555 - aux558)<=0)
2575 -2586 0
2576 -2587 0
2569 -2586 0
2569 2575 -2587 0
2569 2576 -2589 0
2570 -2587 0
2570 2575 -2589 0
2570 2576 -2591 0
c (0<=(aux553 + aux555 - aux558))
-2576 2591 0
-2575 2589 0
-2570 2591 0
-2570 -2576 2589 0
-2570 -2575 2587 0
-2569 2589 0
-2569 -2576 2587 0
-2569 -2575 2586 0
c ((SATLiteral(314) - aux559 + SATLiteral(584))<=0)
-584 -2593 0
-314 -2593 0
-314 -584 -2594 0
c (0<=(SATLiteral(314) - aux559 + SATLiteral(584)))
584 2594 0
314 2594 0
314 584 2593 0
c ((SATLiteral(989) - aux560 + SATLiteral(854))<=0)
-854 -2596 0
-989 -2596 0
-989 -854 -2597 0
c (0<=(SATLiteral(989) - aux560 + SATLiteral(854)))
854 2597 0
989 2597 0
989 854 2596 0
c (( - aux561 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2599 0
-719 -2599 0
-719 -179 -2600 0
c (0<=( - aux561 + SATLiteral(719) + SATLiteral(179)))
179 2600 0
719 2600 0
719 179 2599 0
c (( - aux562 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2602 0
-449 -2602 0
-449 -1124 -2603 0
c (0<=( - aux562 + SATLiteral(449) + SATLiteral(1124)))
1124 2603 0
449 2603 0
449 1124 2602 0
c ((aux562 - aux563 + SATLiteral(44))<=0)
2602 -2605 0
2603 -2606 0
-44 -2605 0
-44 2602 -2606 0
-44 2603 -2608 0
c (0<=(aux562 - aux563 + SATLiteral(44)))
-2603 2608 0
-2602 2606 0
44 2608 0
44 -2603 2606 0
44 -2602 2605 0
c ((aux559 + aux561 - aux564)<=0)
2599 -2610 0
2600 -2611 0
2593 -2610 0
2593 2599 -2611 0
2593 2600 -2613 0
2594 -2611 0
2594 2599 -2613 0
2594 2600 -2615 0
c (0<=(aux559 + aux561 - aux564))
-2600 2615 0
-2599 2613 0
-2594 2615 0
-2594 -2600 2613 0
-2594 -2599 2611 0
-2593 2613 0
-2593 -2600 2611 0
-2593 -2599 2610 0
c ((SATLiteral(316) - aux565 + SATLiteral(586))<=0)
-586 -2617 0
-316 -2617 0
-316 -586 -2618 0
c (0<=(SATLiteral(316) - aux565 + SATLiteral(586)))
586 2618 0
316 2618 0
316 586 2617 0
c ((SATLiteral(991) - aux566 + SATLiteral(856))<=0)
-856 -2620 0
-991 -2620 0
-991 -856 -2621 0
c (0<=(SATLiteral(991) - aux566 + SATLiteral(856)))
856 2621 0
991 2621 0
991 856 2620 0
c (( - aux567 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2623 0
-721 -2623 0
-721 -181 -2624 0
c (0<=( - aux567 + SATLiteral(721) + SATLiteral(181)))
181 2624 0
721 2624 0
721 181 2623 0
c (( - aux568 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2626 0
-451 -2626 0
-451 -1126 -2627 0
c (0<=( - aux568 + SATLiteral(451) + SATLiteral(1126)))
1126 2627 0
451 2627 0
451 1126 2626 0
c ((aux568 - aux569 + SATLiteral(46))<=0)
2626 -2629 0
2627 -2630 0
-46 -2629 0
-46 2626 -2630 0
-46 2627 -2632 0
c (0<=(aux568 - aux569 + SATLiteral(46)))
-2627 2632 0
-2626 2630 0
46 2632 0
46 -2627 2630 0
46 -2626 2629 0
c ((aux565 + aux567 - aux570)<=0)
2623 -2634 0
2624 -2635 0
2617 -2634 0
2617 2623 -2635 0
2617 2624 -2637 0
2618 -2635 0
2618 2623 -2637 0
2618 2624 -2639 0
c (0<=(aux565 + aux567 - aux570))
-2624 2639 0
-2623 2637 0
-2618 2639 0
-2618 -2624 2637 0
-2618 -2623 2635 0
-2617 2637 0
-2617 -2624 2635 0
-2617 -2623 2634 0
c ((SATLiteral(-315) - aux571 + SATLiteral(-585))<=0)
585 -2641 0
315 -2641 0
315 585 -2642 0
c (0<=(SATLiteral(-315) - aux571 + SATLiteral(-585)))
-585 2642 0
-315 2642 0
-315 -585 2641 0
c ((SATLiteral(-990) - aux572 + SATLiteral(-855))<=0)
855 -2644 0
990 -2644 0
990 855 -2645 0
c (0<=(SATLiteral(-990) - aux572 + SATLiteral(-855)))
-855 2645 0
-990 2645 0
-990 -855 2644 0
c (( - aux573 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2647 0
720 -2647 0
720 180 -2648 0
c (0<=( - aux573 + SATLiteral(-720) + SATLiteral(-180)))
-180 2648 0
-720 2648 0
-720 -180 2647 0
c (( - aux574 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2650 0
450 -2650 0
450 1125 -2651 0
c (0<=( - aux574 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2651 0
-450 2651 0
-450 -1125 2650 0
c ((aux574 - aux575 + SATLiteral(-45))<=0)
2650 -2653 0
2651 -2654 0
45 -2653 0
45 2650 -2654 0
45 2651 -2656 0
c (0<=(aux574 - aux575 + SATLiteral(-45)))
-2651 2656 0
-2650 2654 0
-45 2656 0
-45 -2651 2654 0
-45 -2650 2653 0
c ((aux571 + aux573 - aux576)<=0)
2647 -2658 0
2648 -2659 0
2641 -2658 0
2641 2647 -2659 0
2641 2648 -2661 0
2642 -2659 0
2642 2647 -2661 0
2642 2648 -2663 0
c (0<=(aux571 + aux573 - aux576))
-2648 2663 0
-2647 2661 0
-2642 2663 0
-2642 -2648 2661 0
-2642 -2647 2659 0
-2641 2661 0
-2641 -2648 2659 0
-2641 -2647 2658 0
c ((SATLiteral(317) - aux577 + SATLiteral(587))<=0)
-587 -2665 0
-317 -2665 0
-317 -587 -2666 0
c (0<=(SATLiteral(317) - aux577 + SATLiteral(587)))
587 2666 0
317 2666 0
317 587 2665 0
c ((SATLiteral(992) - aux578 + SATLiteral(857))<=0)
-857 -2668 0
-992 -2668 0
-992 -857 -2669 0
c (0<=(SATLiteral(992) - aux578 + SATLiteral(857)))
857 2669 0
992 2669 0
992 857 2668 0
c (( - aux579 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2671 0
-722 -2671 0
-722 -182 -2672 0
c (0<=( - aux579 + SATLiteral(722) + SATLiteral(182)))
182 2672 0
722 2672 0
722 182 2671 0
c (( - aux580 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2674 0
-452 -2674 0
-452 -1127 -2675 0
c (0<=( - aux580 + SATLiteral(452) + SATLiteral(1127)))
1127 2675 0
452 2675 0
452 1127 2674 0
c ((aux580 - aux581 + SATLiteral(47))<=0)
2674 -2677 0
2675 -2678 0
-47 -2677 0
-47 2674 -2678 0
-47 2675 -2680 0
c (0<=(aux580 - aux581 + SATLiteral(47)))
-2675 2680 0
-2674 2678 0
47 2680 0
47 -2675 2678 0
47 -2674 2677 0
c ((aux577 + aux579 - aux582)<=0)
2671 -2682 0
2672 -2683 0
2665 -2682 0
2665 2671 -2683 0
2665 2672 -2685 0
2666 -2683 0
2666 2671 -2685 0
2666 2672 -2687 0
c (0<=(aux577 + aux579 - aux582))
-2672 2687 0
-2671 2685 0
-2666 2687 0
-2666 -2672 2685 0
-2666 -2671 2683 0
-2665 2685 0
-2665 -2672 2683 0
-2665 -2671 2682 0
c ((SATLiteral(319) - aux583 + SATLiteral(589))<=0)
-589 -2689 0
-319 -2689 0
-319 -589 -2690 0
c (0<=(SATLiteral(319) - aux583 + SATLiteral(589)))
589 2690 0
319 2690 0
319 589 2689 0
c ((SATLiteral(994) - aux584 + SATLiteral(859))<=0)
-859 -2692 0
-994 -2692 0
-994 -859 -2693 0
c (0<=(SATLiteral(994) - aux584 + SATLiteral(859)))
859 2693 0
994 2693 0
994 859 2692 0
c (( - aux585 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2695 0
-724 -2695 0
-724 -184 -2696 0
c (0<=( - aux585 + SATLiteral(724) + SATLiteral(184)))
184 2696 0
724 2696 0
724 184 2695 0
c (( - aux586 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2698 0
-454 -2698 0
-454 -1129 -2699 0
c (0<=( - aux586 + SATLiteral(454) + SATLiteral(1129)))
1129 2699 0
454 2699 0
454 1129 2698 0
c ((aux586 - aux587 + SATLiteral(49))<=0)
2698 -2701 0
2699 -2702 0
-49 -2701 0
-49 2698 -2702 0
-49 2699 -2704 0
c (0<=(aux586 - aux587 + SATLiteral(49)))
-2699 2704 0
-2698 2702 0
49 2704 0
49 -2699 2702 0
49 -2698 2701 0
c ((aux583 + aux585 - aux588)<=0)
2695 -2706 0
2696 -2707 0
2689 -2706 0
2689 2695 -2707 0
2689 2696 -2709 0
2690 -2707 0
2690 2695 -2709 0
2690 2696 -2711 0
c (0<=(aux583 + aux585 - aux588))
-2696 2711 0
-2695 2709 0
-2690 2711 0
-2690 -2696 2709 0
-2690 -2695 2707 0
-2689 2709 0
-2689 -2696 2707 0
-2689 -2695 2706 0
c ((SATLiteral(321) - aux589 + SATLiteral(591))<=0)
-591 -2713 0
-321 -2713 0
-321 -591 -2714 0
c (0<=(SATLiteral(321) - aux589 + SATLiteral(591)))
591 2714 0
321 2714 0
321 591 2713 0
c ((SATLiteral(996) - aux590 + SATLiteral(861))<=0)
-861 -2716 0
-996 -2716 0
-996 -861 -2717 0
c (0<=(SATLiteral(996) - aux590 + SATLiteral(861)))
861 2717 0
996 2717 0
996 861 2716 0
c (( - aux591 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2719 0
-726 -2719 0
-726 -186 -2720 0
c (0<=( - aux591 + SATLiteral(726) + SATLiteral(186)))
186 2720 0
726 2720 0
726 186 2719 0
c (( - aux592 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2722 0
-456 -2722 0
-456 -1131 -2723 0
c (0<=( - aux592 + SATLiteral(456) + SATLiteral(1131)))
1131 2723 0
456 2723 0
456 1131 2722 0
c ((aux592 - aux593 + SATLiteral(51))<=0)
2722 -2725 0
2723 -2726 0
-51 -2725 0
-51 2722 -2726 0
-51 2723 -2728 0
c (0<=(aux592 - aux593 + SATLiteral(51)))
-2723 2728 0
-2722 2726 0
51 2728 0
51 -2723 2726 0
51 -2722 2725 0
c ((aux589 + aux591 - aux594)<=0)
2719 -2730 0
2720 -2731 0
2713 -2730 0
2713 2719 -2731 0
2713 2720 -2733 0
2714 -2731 0
2714 2719 -2733 0
2714 2720 -2735 0
c (0<=(aux589 + aux591 - aux594))
-2720 2735 0
-2719 2733 0
-2714 2735 0
-2714 -2720 2733 0
-2714 -2719 2731 0
-2713 2733 0
-2713 -2720 2731 0
-2713 -2719 2730 0
c ((SATLiteral(323) - aux595 + SATLiteral(593))<=0)
-593 -2737 0
-323 -2737 0
-323 -593 -2738 0
c (0<=(SATLiteral(323) - aux595 + SATLiteral(593)))
593 2738 0
323 2738 0
323 593 2737 0
c ((SATLiteral(998) - aux596 + SATLiteral(863))<=0)
-863 -2740 0
-998 -2740 0
-998 -863 -2741 0
c (0<=(SATLiteral(998) - aux596 + SATLiteral(863)))
863 2741 0
998 2741 0
998 863 2740 0
c (( - aux597 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2743 0
-728 -2743 0
-728 -188 -2744 0
c (0<=( - aux597 + SATLiteral(728) + SATLiteral(188)))
188 2744 0
728 2744 0
728 188 2743 0
c (( - aux598 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2746 0
-458 -2746 0
-458 -1133 -2747 0
c (0<=( - aux598 + SATLiteral(458) + SATLiteral(1133)))
1133 2747 0
458 2747 0
458 1133 2746 0
c ((aux598 - aux599 + SATLiteral(53))<=0)
2746 -2749 0
2747 -2750 0
-53 -2749 0
-53 2746 -2750 0
-53 2747 -2752 0
c (0<=(aux598 - aux599 + SATLiteral(53)))
-2747 2752 0
-2746 2750 0
53 2752 0
53 -2747 2750 0
53 -2746 2749 0
c ((aux595 + aux597 - aux600)<=0)
2743 -2754 0
2744 -2755 0
2737 -2754 0
2737 2743 -2755 0
2737 2744 -2757 0
2738 -2755 0
2738 2743 -2757 0
2738 2744 -2759 0
c (0<=(aux595 + aux597 - aux600))
-2744 2759 0
-2743 2757 0
-2738 2759 0
-2738 -2744 2757 0
-2738 -2743 2755 0
-2737 2757 0
-2737 -2744 2755 0
-2737 -2743 2754 0
c ((SATLiteral(325) - aux601 + SATLiteral(595))<=0)
-595 -2761 0
-325 -2761 0
-325 -595 -2762 0
c (0<=(SATLiteral(325) - aux601 + SATLiteral(595)))
595 2762 0
325 2762 0
325 595 2761 0
c ((SATLiteral(1000) - aux602 + SATLiteral(865))<=0)
-865 -2764 0
-1000 -2764 0
-1000 -865 -2765 0
c (0<=(SATLiteral(1000) - aux602 + SATLiteral(865)))
865 2765 0
1000 2765 0
1000 865 2764 0
c (( - aux603 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2767 0
-730 -2767 0
-730 -190 -2768 0
c (0<=( - aux603 + SATLiteral(730) + SATLiteral(190)))
190 2768 0
730 2768 0
730 190 2767 0
c (( - aux604 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2770 0
-460 -2770 0
-460 -1135 -2771 0
c (0<=( - aux604 + SATLiteral(460) + SATLiteral(1135)))
1135 2771 0
460 2771 0
460 1135 2770 0
c ((aux604 - aux605 + SATLiteral(55))<=0)
2770 -2773 0
2771 -2774 0
-55 -2773 0
-55 2770 -2774 0
-55 2771 -2776 0
c (0<=(aux604 - aux605 + SATLiteral(55)))
-2771 2776 0
-2770 2774 0
55 2776 0
55 -2771 2774 0
55 -2770 2773 0
c ((aux601 + aux603 - aux606)<=0)
2767 -2778 0
2768 -2779 0
2761 -2778 0
2761 2767 -2779 0
2761 2768 -2781 0
2762 -2779 0
2762 2767 -2781 0
2762 2768 -2783 0
c (0<=(aux601 + aux603 - aux606))
-2768 2783 0
-2767 2781 0
-2762 2783 0
-2762 -2768 2781 0
-2762 -2767 2779 0
-2761 2781 0
-2761 -2768 2779 0
-2761 -2767 2778 0
c ((SATLiteral(327) - aux607 + SATLiteral(597))<=0)
-597 -2785 0
-327 -2785 0
-327 -597 -2786 0
c (0<=(SATLiteral(327) - aux607 + SATLiteral(597)))
597 2786 0
327 2786 0
327 597 2785 0
c ((SATLiteral(1002) - aux608 + SATLiteral(867))<=0)
-867 -2788 0
-1002 -2788 0
-1002 -867 -2789 0
c (0<=(SATLiteral(1002) - aux608 + SATLiteral(867)))
867 2789 0
1002 2789 0
1002 867 2788 0
c (( - aux609 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2791 0
-732 -2791 0
-732 -192 -2792 0
c (0<=( - aux609 + SATLiteral(732) + SATLiteral(192)))
192 2792 0
732 2792 0
732 192 2791 0
c (( - aux610 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2794 0
-462 -2794 0
-462 -1137 -2795 0
c (0<=( - aux610 + SATLiteral(462) + SATLiteral(1137)))
1137 2795 0
462 2795 0
462 1137 2794 0
c ((aux610 - aux611 + SATLiteral(57))<=0)
2794 -2797 0
2795 -2798 0
-57 -2797 0
-57 2794 -2798 0
-57 2795 -2800 0
c (0<=(aux610 - aux611 + SATLiteral(57)))
-2795 2800 0
-2794 2798 0
57 2800 0
57 -2795 2798 0
57 -2794 2797 0
c ((aux607 + aux609 - aux612)<=0)
2791 -2802 0
2792 -2803 0
2785 -2802 0
2785 2791 -2803 0
2785 2792 -2805 0
2786 -2803 0
2786 2791 -2805 0
2786 2792 -2807 0
c (0<=(aux607 + aux609 - aux612))
-2792 2807 0
-2791 2805 0
-2786 2807 0
-2786 -2792 2805 0
-2786 -2791 2803 0
-2785 2805 0
-2785 -2792 2803 0
-2785 -2791 2802 0
c ((SATLiteral(329) - aux613 + SATLiteral(599))<=0)
-599 -2809 0
-329 -2809 0
-329 -599 -2810 0
c (0<=(SATLiteral(329) - aux613 + SATLiteral(599)))
599 2810 0
329 2810 0
329 599 2809 0
c ((SATLiteral(1004) - aux614 + SATLiteral(869))<=0)
-869 -2812 0
-1004 -2812 0
-1004 -869 -2813 0
c (0<=(SATLiteral(1004) - aux614 + SATLiteral(869)))
869 2813 0
1004 2813 0
1004 869 2812 0
c (( - aux615 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2815 0
-734 -2815 0
-734 -194 -2816 0
c (0<=( - aux615 + SATLiteral(734) + SATLiteral(194)))
194 2816 0
734 2816 0
734 194 2815 0
c (( - aux616 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2818 0
-464 -2818 0
-464 -1139 -2819 0
c (0<=( - aux616 + SATLiteral(464) + SATLiteral(1139)))
1139 2819 0
464 2819 0
464 1139 2818 0
c ((aux616 - aux617 + SATLiteral(59))<=0)
2818 -2821 0
2819 -2822 0
-59 -2821 0
-59 2818 -2822 0
-59 2819 -2824 0
c (0<=(aux616 - aux617 + SATLiteral(59)))
-2819 2824 0
-2818 2822 0
59 2824 0
59 -2819 2822 0
59 -2818 2821 0
c ((aux613 + aux615 - aux618)<=0)
2815 -2826 0
2816 -2827 0
2809 -2826 0
2809 2815 -2827 0
2809 2816 -2829 0
2810 -2827 0
2810 2815 -2829 0
2810 2816 -2831 0
c (0<=(aux613 + aux615 - aux618))
-2816 2831 0
-2815 2829 0
-2810 2831 0
-2810 -2816 2829 0
-2810 -2815 2827 0
-2809 2829 0
-2809 -2816 2827 0
-2809 -2815 2826 0
c ((SATLiteral(331) - aux619 + SATLiteral(601))<=0)
-601 -2833 0
-331 -2833 0
-331 -601 -2834 0
c (0<=(SATLiteral(331) - aux619 + SATLiteral(601)))
601 2834 0
331 2834 0
331 601 2833 0
c ((SATLiteral(1006) - aux620 + SATLiteral(871))<=0)
-871 -2836 0
-1006 -2836 0
-1006 -871 -2837 0
c (0<=(SATLiteral(1006) - aux620 + SATLiteral(871)))
871 2837 0
1006 2837 0
1006 871 2836 0
c (( - aux621 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2839 0
-736 -2839 0
-736 -196 -2840 0
c (0<=( - aux621 + SATLiteral(736) + SATLiteral(196)))
196 2840 0
736 2840 0
736 196 2839 0
c (( - aux622 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2842 0
-466 -2842 0
-466 -1141 -2843 0
c (0<=( - aux622 + SATLiteral(466) + SATLiteral(1141)))
1141 2843 0
466 2843 0
466 1141 2842 0
c ((aux622 - aux623 + SATLiteral(61))<=0)
2842 -2845 0
2843 -2846 0
-61 -2845 0
-61 2842 -2846 0
-61 2843 -2848 0
c (0<=(aux622 - aux623 + SATLiteral(61)))
-2843 2848 0
-2842 2846 0
61 2848 0
61 -2843 2846 0
61 -2842 2845 0
c ((aux619 + aux621 - aux624)<=0)
2839 -2850 0
2840 -2851 0
2833 -2850 0
2833 2839 -2851 0
2833 2840 -2853 0
2834 -2851 0
2834 2839 -2853 0
2834 2840 -2855 0
c (0<=(aux619 + aux621 - aux624))
-2840 2855 0
-2839 2853 0
-2834 2855 0
-2834 -2840 2853 0
-2834 -2839 2851 0
-2833 2853 0
-2833 -2840 2851 0
-2833 -2839 2850 0
c ((SATLiteral(-330) - aux625 + SATLiteral(-600))<=0)
600 -2857 0
330 -2857 0
330 600 -2858 0
c (0<=(SATLiteral(-330) - aux625 + SATLiteral(-600)))
-600 2858 0
-330 2858 0
-330 -600 2857 0
c ((SATLiteral(-1005) - aux626 + SATLiteral(-870))<=0)
870 -2860 0
1005 -2860 0
1005 870 -2861 0
c (0<=(SATLiteral(-1005) - aux626 + SATLiteral(-870)))
-870 2861 0
-1005 2861 0
-1005 -870 2860 0
c (( - aux627 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2863 0
735 -2863 0
735 195 -2864 0
c (0<=( - aux627 + SATLiteral(-735) + SATLiteral(-195)))
-195 2864 0
-735 2864 0
-735 -195 2863 0
c (( - aux628 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2866 0
465 -2866 0
465 1140 -2867 0
c (0<=( - aux628 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2867 0
-465 2867 0
-465 -1140 2866 0
c ((aux628 - aux629 + SATLiteral(-60))<=0)
2866 -2869 0
2867 -2870 0
60 -2869 0
60 2866 -2870 0
60 2867 -2872 0
c (0<=(aux628 - aux629 + SATLiteral(-60)))
-2867 2872 0
-2866 2870 0
-60 2872 0
-60 -2867 2870 0
-60 -2866 2869 0
c ((aux625 + aux627 - aux630)<=0)
2863 -2874 0
2864 -2875 0
2857 -2874 0
2857 2863 -2875 0
2857 2864 -2877 0
2858 -2875 0
2858 2863 -2877 0
2858 2864 -2879 0
c (0<=(aux625 + aux627 - aux630))
-2864 2879 0
-2863 2877 0
-2858 2879 0
-2858 -2864 2877 0
-2858 -2863 2875 0
-2857 2877 0
-2857 -2864 2875 0
-2857 -2863 2874 0
c ((SATLiteral(332) - aux631 + SATLiteral(602))<=0)
-602 -2881 0
-332 -2881 0
-332 -602 -2882 0
c (0<=(SATLiteral(332) - aux631 + SATLiteral(602)))
602 2882 0
332 2882 0
332 602 2881 0
c ((SATLiteral(1007) - aux632 + SATLiteral(872))<=0)
-872 -2884 0
-1007 -2884 0
-1007 -872 -2885 0
c (0<=(SATLiteral(1007) - aux632 + SATLiteral(872)))
872 2885 0
1007 2885 0
1007 872 2884 0
c (( - aux633 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2887 0
-737 -2887 0
-737 -197 -2888 0
c (0<=( - aux633 + SATLiteral(737) + SATLiteral(197)))
197 2888 0
737 2888 0
737 197 2887 0
c (( - aux634 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2890 0
-467 -2890 0
-467 -1142 -2891 0
c (0<=( - aux634 + SATLiteral(467) + SATLiteral(1142)))
1142 2891 0
467 2891 0
467 1142 2890 0
c ((aux634 - aux635 + SATLiteral(62))<=0)
2890 -2893 0
2891 -2894 0
-62 -2893 0
-62 2890 -2894 0
-62 2891 -2896 0
c (0<=(aux634 - aux635 + SATLiteral(62)))
-2891 2896 0
-2890 2894 0
62 2896 0
62 -2891 2894 0
62 -2890 2893 0
c ((aux631 + aux633 - aux636)<=0)
2887 -2898 0
2888 -2899 0
2881 -2898 0
2881 2887 -2899 0
2881 2888 -2901 0
2882 -2899 0
2882 2887 -2901 0
2882 2888 -2903 0
c (0<=(aux631 + aux633 - aux636))
-2888 2903 0
-2887 2901 0
-2882 2903 0
-2882 -2888 2901 0
-2882 -2887 2899 0
-2881 2901 0
-2881 -2888 2899 0
-2881 -2887 2898 0
c ((SATLiteral(334) - aux637 + SATLiteral(604))<=0)
-604 -2905 0
-334 -2905 0
-334 -604 -2906 0
c (0<=(SATLiteral(334) - aux637 + SATLiteral(604)))
604 2906 0
334 2906 0
334 604 2905 0
c ((SATLiteral(1009) - aux638 + SATLiteral(874))<=0)
-874 -2908 0
-1009 -2908 0
-1009 -874 -2909 0
c (0<=(SATLiteral(1009) - aux638 + SATLiteral(874)))
874 2909 0
1009 2909 0
1009 874 2908 0
c (( - aux639 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2911 0
-739 -2911 0
-739 -199 -2912 0
c (0<=( - aux639 + SATLiteral(739) + SATLiteral(199)))
199 2912 0
739 2912 0
739 199 2911 0
c (( - aux640 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2914 0
-469 -2914 0
-469 -1144 -2915 0
c (0<=( - aux640 + SATLiteral(469) + SATLiteral(1144)))
1144 2915 0
469 2915 0
469 1144 2914 0
c ((aux640 - aux641 + SATLiteral(64))<=0)
2914 -2917 0
2915 -2918 0
-64 -2917 0
-64 2914 -2918 0
-64 2915 -2920 0
c (0<=(aux640 - aux641 + SATLiteral(64)))
-2915 2920 0
-2914 2918 0
64 2920 0
64 -2915 2918 0
64 -2914 2917 0
c ((aux637 + aux639 - aux642)<=0)
2911 -2922 0
2912 -2923 0
2905 -2922 0
2905 2911 -2923 0
2905 2912 -2925 0
2906 -2923 0
2906 2911 -2925 0
2906 2912 -2927 0
c (0<=(aux637 + aux639 - aux642))
-2912 2927 0
-2911 2925 0
-2906 2927 0
-2906 -2912 2925 0
-2906 -2911 2923 0
-2905 2925 0
-2905 -2912 2923 0
-2905 -2911 2922 0
c ((SATLiteral(336) - aux643 + SATLiteral(606))<=0)
-606 -2929 0
-336 -2929 0
-336 -606 -2930 0
c (0<=(SATLiteral(336) - aux643 + SATLiteral(606)))
606 2930 0
336 2930 0
336 606 2929 0
c ((SATLiteral(1011) - aux644 + SATLiteral(876))<=0)
-876 -2932 0
-1011 -2932 0
-1011 -876 -2933 0
c (0<=(SATLiteral(1011) - aux644 + SATLiteral(876)))
876 2933 0
1011 2933 0
1011 876 2932 0
c (( - aux645 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2935 0
-741 -2935 0
-741 -201 -2936 0
c (0<=( - aux645 + SATLiteral(741) + SATLiteral(201)))
201 2936 0
741 2936 0
741 201 2935 0
c (( - aux646 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2938 0
-471 -2938 0
-471 -1146 -2939 0
c (0<=( - aux646 + SATLiteral(471) + SATLiteral(1146)))
1146 2939 0
471 2939 0
471 1146 2938 0
c ((aux646 - aux647 + SATLiteral(66))<=0)
2938 -2941 0
2939 -2942 0
-66 -2941 0
-66 2938 -2942 0
-66 2939 -2944 0
c (0<=(aux646 - aux647 + SATLiteral(66)))
-2939 2944 0
-2938 2942 0
66 2944 0
66 -2939 2942 0
66 -2938 2941 0
c ((aux643 + aux645 - aux648)<=0)
2935 -2946 0
2936 -2947 0
2929 -2946 0
2929 2935 -2947 0
2929 2936 -2949 0
2930 -2947 0
2930 2935 -2949 0
2930 2936 -2951 0
c (0<=(aux643 + aux645 - aux648))
-2936 2951 0
-2935 2949 0
-2930 2951 0
-2930 -2936 2949 0
-2930 -2935 2947 0
-2929 2949 0
-2929 -2936 2947 0
-2929 -2935 2946 0
c ((SATLiteral(338) - aux649 + SATLiteral(608))<=0)
-608 -2953 0
-338 -2953 0
-338 -608 -2954 0
c (0<=(SATLiteral(338) - aux649 + SATLiteral(608)))
608 2954 0
338 2954 0
338 608 2953 0
c ((SATLiteral(1013) - aux650 + SATLiteral(878))<=0)
-878 -2956 0
-1013 -2956 0
-1013 -878 -2957 0
c (0<=(SATLiteral(1013) - aux650 + SATLiteral(878)))
878 2957 0
1013 2957 0
1013 878 2956 0
c (( - aux651 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2959 0
-743 -2959 0
-743 -203 -2960 0
c (0<=( - aux651 + SATLiteral(743) + SATLiteral(203)))
203 2960 0
743 2960 0
743 203 2959 0
c (( - aux652 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2962 0
-473 -2962 0
-473 -1148 -2963 0
c (0<=( - aux652 + SATLiteral(473) + SATLiteral(1148)))
1148 2963 0
473 2963 0
473 1148 2962 0
c ((aux652 - aux653 + SATLiteral(68))<=0)
2962 -2965 0
2963 -2966 0
-68 -2965 0
-68 2962 -2966 0
-68 2963 -2968 0
c (0<=(aux652 - aux653 + SATLiteral(68)))
-2963 2968 0
-2962 2966 0
68 2968 0
68 -2963 2966 0
68 -2962 2965 0
c ((aux649 + aux651 - aux654)<=0)
2959 -2970 0
2960 -2971 0
2953 -2970 0
2953 2959 -2971 0
2953 2960 -2973 0
2954 -2971 0
2954 2959 -2973 0
2954 2960 -2975 0
c (0<=(aux649 + aux651 - aux654))
-2960 2975 0
-2959 2973 0
-2954 2975 0
-2954 -2960 2973 0
-2954 -2959 2971 0
-2953 2973 0
-2953 -2960 2971 0
-2953 -2959 2970 0
c ((SATLiteral(340) - aux655 + SATLiteral(610))<=0)
-610 -2977 0
-340 -2977 0
-340 -610 -2978 0
c (0<=(SATLiteral(340) - aux655 + SATLiteral(610)))
610 2978 0
340 2978 0
340 610 2977 0
c ((SATLiteral(1015) - aux656 + SATLiteral(880))<=0)
-880 -2980 0
-1015 -2980 0
-1015 -880 -2981 0
c (0<=(SATLiteral(1015) - aux656 + SATLiteral(880)))
880 2981 0
1015 2981 0
1015 880 2980 0
c (( - aux657 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2983 0
-745 -2983 0
-745 -205 -2984 0
c (0<=( - aux657 + SATLiteral(745) + SATLiteral(205)))
205 2984 0
745 2984 0
745 205 2983 0
c (( - aux658 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2986 0
-475 -2986 0
-475 -1150 -2987 0
c (0<=( - aux658 + SATLiteral(475) + SATLiteral(1150)))
1150 2987 0
475 2987 0
475 1150 2986 0
c ((aux658 - aux659 + SATLiteral(70))<=0)
2986 -2989 0
2987 -2990 0
-70 -2989 0
-70 2986 -2990 0
-70 2987 -2992 0
c (0<=(aux658 - aux659 + SATLiteral(70)))
-2987 2992 0
-2986 2990 0
70 2992 0
70 -2987 2990 0
70 -2986 2989 0
c ((aux655 + aux657 - aux660)<=0)
2983 -2994 0
2984 -2995 0
2977 -2994 0
2977 2983 -2995 0
2977 2984 -2997 0
2978 -2995 0
2978 2983 -2997 0
2978 2984 -2999 0
c (0<=(aux655 + aux657 - aux660))
-2984 2999 0
-2983 2997 0
-2978 2999 0
-2978 -2984 2997 0
-2978 -2983 2995 0
-2977 2997 0
-2977 -2984 2995 0
-2977 -2983 2994 0
c ((SATLiteral(342) - aux661 + SATLiteral(612))<=0)
-612 -3001 0
-342 -3001 0
-342 -612 -3002 0
c (0<=(SATLiteral(342) - aux661 + SATLiteral(612)))
612 3002 0
342 3002 0
342 612 3001 0
c ((SATLiteral(1017) - aux662 + SATLiteral(882))<=0)
-882 -3004 0
-1017 -3004 0
-1017 -882 -3005 0
c (0<=(SATLiteral(1017) - aux662 + SATLiteral(882)))
882 3005 0
1017 3005 0
1017 882 3004 0
c (( - aux663 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -3007 0
-747 -3007 0
-747 -207 -3008 0
c (0<=( - aux663 + SATLiteral(747) + SATLiteral(207)))
207 3008 0
747 3008 0
747 207 3007 0
c (( - aux664 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -3010 0
-477 -3010 0
-477 -1152 -3011 0
c (0<=( - aux664 + SATLiteral(477) + SATLiteral(1152)))
1152 3011 0
477 3011 0
477 1152 3010 0
c ((aux664 - aux665 + SATLiteral(72))<=0)
3010 -3013 0
3011 -3014 0
-72 -3013 0
-72 3010 -3014 0
-72 3011 -3016 0
c (0<=(aux664 - aux665 + SATLiteral(72)))
-3011 3016 0
-3010 3014 0
72 3016 0
72 -3011 3014 0
72 -3010 3013 0
c ((aux661 + aux663 - aux666)<=0)
3007 -3018 0
3008 -3019 0
3001 -3018 0
3001 3007 -3019 0
3001 3008 -3021 0
3002 -3019 0
3002 3007 -3021 0
3002 3008 -3023 0
c (0<=(aux661 + aux663 - aux666))
-3008 3023 0
-3007 3021 0
-3002 3023 0
-3002 -3008 3021 0
-3002 -3007 3019 0
-3001 3021 0
-3001 -3008 3019 0
-3001 -3007 3018 0
c ((SATLiteral(344) - aux667 + SATLiteral(614))<=0)
-614 -3025 0
-344 -3025 0
-344 -614 -3026 0
c (0<=(SATLiteral(344) - aux667 + SATLiteral(614)))
614 3026 0
344 3026 0
344 614 3025 0
c ((SATLiteral(1019) - aux668 + SATLiteral(884))<=0)
-884 -3028 0
-1019 -3028 0
-1019 -884 -3029 0
c (0<=(SATLiteral(1019) - aux668 + SATLiteral(884)))
884 3029 0
1019 3029 0
1019 884 3028 0
c (( - aux669 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -3031 0
-749 -3031 0
-749 -209 -3032 0
c (0<=( - aux669 + SATLiteral(749) + SATLiteral(209)))
209 3032 0
749 3032 0
749 209 3031 0
c (( - aux670 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -3034 0
-479 -3034 0
-479 -1154 -3035 0
c (0<=( - aux670 + SATLiteral(479) + SATLiteral(1154)))
1154 3035 0
479 3035 0
479 1154 3034 0
c ((aux670 - aux671 + SATLiteral(74))<=0)
3034 -3037 0
3035 -3038 0
-74 -3037 0
-74 3034 -3038 0
-74 3035 -3040 0
c (0<=(aux670 - aux671 + SATLiteral(74)))
-3035 3040 0
-3034 3038 0
74 3040 0
74 -3035 3038 0
74 -3034 3037 0
c ((aux667 + aux669 - aux672)<=0)
3031 -3042 0
3032 -3043 0
3025 -3042 0
3025 3031 -3043 0
3025 3032 -3045 0
3026 -3043 0
3026 3031 -3045 0
3026 3032 -3047 0
c (0<=(aux667 + aux669 - aux672))
-3032 3047 0
-3031 3045 0
-3026 3047 0
-3026 -3032 3045 0
-3026 -3031 3043 0
-3025 3045 0
-3025 -3032 3043 0
-3025 -3031 3042 0
c ((SATLiteral(346) - aux673 + SATLiteral(616))<=0)
-616 -3049 0
-346 -3049 0
-346 -616 -3050 0
c (0<=(SATLiteral(346) - aux673 + SATLiteral(616)))
616 3050 0
346 3050 0
346 616 3049 0
c ((SATLiteral(1021) - aux674 + SATLiteral(886))<=0)
-886 -3052 0
-1021 -3052 0
-1021 -886 -3053 0
c (0<=(SATLiteral(1021) - aux674 + SATLiteral(886)))
886 3053 0
1021 3053 0
1021 886 3052 0
c (( - aux675 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -3055 0
-751 -3055 0
-751 -211 -3056 0
c (0<=( - aux675 + SATLiteral(751) + SATLiteral(211)))
211 3056 0
751 3056 0
751 211 3055 0
c (( - aux676 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -3058 0
-481 -3058 0
-481 -1156 -3059 0
c (0<=( - aux676 + SATLiteral(481) + SATLiteral(1156)))
1156 3059 0
481 3059 0
481 1156 3058 0
c ((aux676 - aux677 + SATLiteral(76))<=0)
3058 -3061 0
3059 -3062 0
-76 -3061 0
-76 3058 -3062 0
-76 3059 -3064 0
c (0<=(aux676 - aux677 + SATLiteral(76)))
-3059 3064 0
-3058 3062 0
76 3064 0
76 -3059 3062 0
76 -3058 3061 0
c ((aux673 + aux675 - aux678)<=0)
3055 -3066 0
3056 -3067 0
3049 -3066 0
3049 3055 -3067 0
3049 3056 -3069 0
3050 -3067 0
3050 3055 -3069 0
3050 3056 -3071 0
c (0<=(aux673 + aux675 - aux678))
-3056 3071 0
-3055 3069 0
-3050 3071 0
-3050 -3056 3069 0
-3050 -3055 3067 0
-3049 3069 0
-3049 -3056 3067 0
-3049 -3055 3066 0
c ((SATLiteral(-345) - aux679 + SATLiteral(-615))<=0)
615 -3073 0
345 -3073 0
345 615 -3074 0
c (0<=(SATLiteral(-345) - aux679 + SATLiteral(-615)))
-615 3074 0
-345 3074 0
-345 -615 3073 0
c ((SATLiteral(-1020) - aux680 + SATLiteral(-885))<=0)
885 -3076 0
1020 -3076 0
1020 885 -3077 0
c (0<=(SATLiteral(-1020) - aux680 + SATLiteral(-885)))
-885 3077 0
-1020 3077 0
-1020 -885 3076 0
c (( - aux681 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -3079 0
750 -3079 0
750 210 -3080 0
c (0<=( - aux681 + SATLiteral(-750) + SATLiteral(-210)))
-210 3080 0
-750 3080 0
-750 -210 3079 0
c (( - aux682 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -3082 0
480 -3082 0
480 1155 -3083 0
c (0<=( - aux682 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 3083 0
-480 3083 0
-480 -1155 3082 0
c ((aux682 - aux683 + SATLiteral(-75))<=0)
3082 -3085 0
3083 -3086 0
75 -3085 0
75 3082 -3086 0
75 3083 -3088 0
c (0<=(aux682 - aux683 + SATLiteral(-75)))
-3083 3088 0
-3082 3086 0
-75 3088 0
-75 -3083 3086 0
-75 -3082 3085 0
c ((aux679 + aux681 - aux684)<=0)
3079 -3090 0
3080 -3091 0
3073 -3090 0
3073 3079 -3091 0
3073 3080 -3093 0
3074 -3091 0
3074 3079 -3093 0
3074 3080 -3095 0
c (0<=(aux679 + aux681 - aux684))
-3080 3095 0
-3079 3093 0
-3074 3095 0
-3074 -3080 3093 0
-3074 -3079 3091 0
-3073 3093 0
-3073 -3080 3091 0
-3073 -3079 3090 0
c ((SATLiteral(347) - aux685 + SATLiteral(617))<=0)
-617 -3097 0
-347 -3097 0
-347 -617 -3098 0
c (0<=(SATLiteral(347) - aux685 + SATLiteral(617)))
617 3098 0
347 3098 0
347 617 3097 0
c ((SATLiteral(1022) - aux686 + SATLiteral(887))<=0)
-887 -3100 0
-1022 -3100 0
-1022 -887 -3101 0
c (0<=(SATLiteral(1022) - aux686 + SATLiteral(887)))
887 3101 0
1022 3101 0
1022 887 3100 0
c (( - aux687 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -3103 0
-752 -3103 0
-752 -212 -3104 0
c (0<=( - aux687 + SATLiteral(752) + SATLiteral(212)))
212 3104 0
752 3104 0
752 212 3103 0
c (( - aux688 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -3106 0
-482 -3106 0
-482 -1157 -3107 0
c (0<=( - aux688 + SATLiteral(482) + SATLiteral(1157)))
1157 3107 0
482 3107 0
482 1157 3106 0
c ((aux688 - aux689 + SATLiteral(77))<=0)
3106 -3109 0
3107 -3110 0
-77 -3109 0
-77 3106 -3110 0
-77 3107 -3112 0
c (0<=(aux688 - aux689 + SATLiteral(77)))
-3107 3112 0
-3106 3110 0
77 3112 0
77 -3107 3110 0
77 -3106 3109 0
c ((aux685 + aux687 - aux690)<=0)
3103 -3114 0
3104 -3115 0
3097 -3114 0
3097 3103 -3115 0
3097 3104 -3117 0
3098 -3115 0
3098 3103 -3117 0
3098 3104 -3119 0
c (0<=(aux685 + aux687 - aux690))
-3104 3119 0
-3103 3117 0
-3098 3119 0
-3098 -3104 3117 0
-3098 -3103 3115 0
-3097 3117 0
-3097 -3104 3115 0
-3097 -3103 3114 0
c ((SATLiteral(349) - aux691 + SATLiteral(619))<=0)
-619 -3121 0
-349 -3121 0
-349 -619 -3122 0
c (0<=(SATLiteral(349) - aux691 + SATLiteral(619)))
619 3122 0
349 3122 0
349 619 3121 0
c ((SATLiteral(1024) - aux692 + SATLiteral(889))<=0)
-889 -3124 0
-1024 -3124 0
-1024 -889 -3125 0
c (0<=(SATLiteral(1024) - aux692 + SATLiteral(889)))
889 3125 0
1024 3125 0
1024 889 3124 0
c (( - aux693 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3127 0
-754 -3127 0
-754 -214 -3128 0
c (0<=( - aux693 + SATLiteral(754) + SATLiteral(214)))
214 3128 0
754 3128 0
754 214 3127 0
c (( - aux694 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3130 0
-484 -3130 0
-484 -1159 -3131 0
c (0<=( - aux694 + SATLiteral(484) + SATLiteral(1159)))
1159 3131 0
484 3131 0
484 1159 3130 0
c ((aux694 - aux695 + SATLiteral(79))<=0)
3130 -3133 0
3131 -3134 0
-79 -3133 0
-79 3130 -3134 0
-79 3131 -3136 0
c (0<=(aux694 - aux695 + SATLiteral(79)))
-3131 3136 0
-3130 3134 0
79 3136 0
79 -3131 3134 0
79 -3130 3133 0
c ((aux691 + aux693 - aux696)<=0)
3127 -3138 0
3128 -3139 0
3121 -3138 0
3121 3127 -3139 0
3121 3128 -3141 0
3122 -3139 0
3122 3127 -3141 0
3122 3128 -3143 0
c (0<=(aux691 + aux693 - aux696))
-3128 3143 0
-3127 3141 0
-3122 3143 0
-3122 -3128 3141 0
-3122 -3127 3139 0
-3121 3141 0
-3121 -3128 3139 0
-3121 -3127 3138 0
c ((SATLiteral(351) - aux697 + SATLiteral(621))<=0)
-621 -3145 0
-351 -3145 0
-351 -621 -3146 0
c (0<=(SATLiteral(351) - aux697 + SATLiteral(621)))
621 3146 0
351 3146 0
351 621 3145 0
c ((SATLiteral(1026) - aux698 + SATLiteral(891))<=0)
-891 -3148 0
-1026 -3148 0
-1026 -891 -3149 0
c (0<=(SATLiteral(1026) - aux698 + SATLiteral(891)))
891 3149 0
1026 3149 0
1026 891 3148 0
c (( - aux699 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3151 0
-756 -3151 0
-756 -216 -3152 0
c (0<=( - aux699 + SATLiteral(756) + SATLiteral(216)))
216 3152 0
756 3152 0
756 216 3151 0
c (( - aux700 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3154 0
-486 -3154 0
-486 -1161 -3155 0
c (0<=( - aux700 + SATLiteral(486) + SATLiteral(1161)))
1161 3155 0
486 3155 0
486 1161 3154 0
c ((aux700 - aux701 + SATLiteral(81))<=0)
3154 -3157 0
3155 -3158 0
-81 -3157 0
-81 3154 -3158 0
-81 3155 -3160 0
c (0<=(aux700 - aux701 + SATLiteral(81)))
-3155 3160 0
-3154 3158 0
81 3160 0
81 -3155 3158 0
81 -3154 3157 0
c ((aux697 + aux699 - aux702)<=0)
3151 -3162 0
3152 -3163 0
3145 -3162 0
3145 3151 -3163 0
3145 3152 -3165 0
3146 -3163 0
3146 3151 -3165 0
3146 3152 -3167 0
c (0<=(aux697 + aux699 - aux702))
-3152 3167 0
-3151 3165 0
-3146 3167 0
-3146 -3152 3165 0
-3146 -3151 3163 0
-3145 3165 0
-3145 -3152 3163 0
-3145 -3151 3162 0
c ((SATLiteral(353) - aux703 + SATLiteral(623))<=0)
-623 -3169 0
-353 -3169 0
-353 -623 -3170 0
c (0<=(SATLiteral(353) - aux703 + SATLiteral(623)))
623 3170 0
353 3170 0
353 623 3169 0
c ((SATLiteral(1028) - aux704 + SATLiteral(893))<=0)
-893 -3172 0
-1028 -3172 0
-1028 -893 -3173 0
c (0<=(SATLiteral(1028) - aux704 + SATLiteral(893)))
893 3173 0
1028 3173 0
1028 893 3172 0
c (( - aux705 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3175 0
-758 -3175 0
-758 -218 -3176 0
c (0<=( - aux705 + SATLiteral(758) + SATLiteral(218)))
218 3176 0
758 3176 0
758 218 3175 0
c (( - aux706 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3178 0
-488 -3178 0
-488 -1163 -3179 0
c (0<=( - aux706 + SATLiteral(488) + SATLiteral(1163)))
1163 3179 0
488 3179 0
488 1163 3178 0
c ((aux706 - aux707 + SATLiteral(83))<=0)
3178 -3181 0
3179 -3182 0
-83 -3181 0
-83 3178 -3182 0
-83 3179 -3184 0
c (0<=(aux706 - aux707 + SATLiteral(83)))
-3179 3184 0
-3178 3182 0
83 3184 0
83 -3179 3182 0
83 -3178 3181 0
c ((aux703 + aux705 - aux708)<=0)
3175 -3186 0
3176 -3187 0
3169 -3186 0
3169 3175 -3187 0
3169 3176 -3189 0
3170 -3187 0
3170 3175 -3189 0
3170 3176 -3191 0
c (0<=(aux703 + aux705 - aux708))
-3176 3191 0
-3175 3189 0
-3170 3191 0
-3170 -3176 3189 0
-3170 -3175 3187 0
-3169 3189 0
-3169 -3176 3187 0
-3169 -3175 3186 0
c ((SATLiteral(355) - aux709 + SATLiteral(625))<=0)
-625 -3193 0
-355 -3193 0
-355 -625 -3194 0
c (0<=(SATLiteral(355) - aux709 + SATLiteral(625)))
625 3194 0
355 3194 0
355 625 3193 0
c ((SATLiteral(1030) - aux710 + SATLiteral(895))<=0)
-895 -3196 0
-1030 -3196 0
-1030 -895 -3197 0
c (0<=(SATLiteral(1030) - aux710 + SATLiteral(895)))
895 3197 0
1030 3197 0
1030 895 3196 0
c (( - aux711 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3199 0
-760 -3199 0
-760 -220 -3200 0
c (0<=( - aux711 + SATLiteral(760) + SATLiteral(220)))
220 3200 0
760 3200 0
760 220 3199 0
c (( - aux712 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3202 0
-490 -3202 0
-490 -1165 -3203 0
c (0<=( - aux712 + SATLiteral(490) + SATLiteral(1165)))
1165 3203 0
490 3203 0
490 1165 3202 0
c ((aux712 - aux713 + SATLiteral(85))<=0)
3202 -3205 0
3203 -3206 0
-85 -3205 0
-85 3202 -3206 0
-85 3203 -3208 0
c (0<=(aux712 - aux713 + SATLiteral(85)))
-3203 3208 0
-3202 3206 0
85 3208 0
85 -3203 3206 0
85 -3202 3205 0
c ((aux709 + aux711 - aux714)<=0)
3199 -3210 0
3200 -3211 0
3193 -3210 0
3193 3199 -3211 0
3193 3200 -3213 0
3194 -3211 0
3194 3199 -3213 0
3194 3200 -3215 0
c (0<=(aux709 + aux711 - aux714))
-3200 3215 0
-3199 3213 0
-3194 3215 0
-3194 -3200 3213 0
-3194 -3199 3211 0
-3193 3213 0
-3193 -3200 3211 0
-3193 -3199 3210 0
c ((SATLiteral(357) - aux715 + SATLiteral(627))<=0)
-627 -3217 0
-357 -3217 0
-357 -627 -3218 0
c (0<=(SATLiteral(357) - aux715 + SATLiteral(627)))
627 3218 0
357 3218 0
357 627 3217 0
c ((SATLiteral(1032) - aux716 + SATLiteral(897))<=0)
-897 -3220 0
-1032 -3220 0
-1032 -897 -3221 0
c (0<=(SATLiteral(1032) - aux716 + SATLiteral(897)))
897 3221 0
1032 3221 0
1032 897 3220 0
c (( - aux717 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3223 0
-762 -3223 0
-762 -222 -3224 0
c (0<=( - aux717 + SATLiteral(762) + SATLiteral(222)))
222 3224 0
762 3224 0
762 222 3223 0
c (( - aux718 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3226 0
-492 -3226 0
-492 -1167 -3227 0
c (0<=( - aux718 + SATLiteral(492) + SATLiteral(1167)))
1167 3227 0
492 3227 0
492 1167 3226 0
c ((aux718 - aux719 + SATLiteral(87))<=0)
3226 -3229 0
3227 -3230 0
-87 -3229 0
-87 3226 -3230 0
-87 3227 -3232 0
c (0<=(aux718 - aux719 + SATLiteral(87)))
-3227 3232 0
-3226 3230 0
87 3232 0
87 -3227 3230 0
87 -3226 3229 0
c ((aux715 + aux717 - aux720)<=0)
3223 -3234 0
3224 -3235 0
3217 -3234 0
3217 3223 -3235 0
3217 3224 -3237 0
3218 -3235 0
3218 3223 -3237 0
3218 3224 -3239 0
c (0<=(aux715 + aux717 - aux720))
-3224 3239 0
-3223 3237 0
-3218 3239 0
-3218 -3224 3237 0
-3218 -3223 3235 0
-3217 3237 0
-3217 -3224 3235 0
-3217 -3223 3234 0
c ((SATLiteral(359) - aux721 + SATLiteral(629))<=0)
-629 -3241 0
-359 -3241 0
-359 -629 -3242 0
c (0<=(SATLiteral(359) - aux721 + SATLiteral(629)))
629 3242 0
359 3242 0
359 629 3241 0
c ((SATLiteral(1034) - aux722 + SATLiteral(899))<=0)
-899 -3244 0
-1034 -3244 0
-1034 -899 -3245 0
c (0<=(SATLiteral(1034) - aux722 + SATLiteral(899)))
899 3245 0
1034 3245 0
1034 899 3244 0
c (( - aux723 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3247 0
-764 -3247 0
-764 -224 -3248 0
c (0<=( - aux723 + SATLiteral(764) + SATLiteral(224)))
224 3248 0
764 3248 0
764 224 3247 0
c (( - aux724 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3250 0
-494 -3250 0
-494 -1169 -3251 0
c (0<=( - aux724 + SATLiteral(494) + SATLiteral(1169)))
1169 3251 0
494 3251 0
494 1169 3250 0
c ((aux724 - aux725 + SATLiteral(89))<=0)
3250 -3253 0
3251 -3254 0
-89 -3253 0
-89 3250 -3254 0
-89 3251 -3256 0
c (0<=(aux724 - aux725 + SATLiteral(89)))
-3251 3256 0
-3250 3254 0
89 3256 0
89 -3251 3254 0
89 -3250 3253 0
c ((aux721 + aux723 - aux726)<=0)
3247 -3258 0
3248 -3259 0
3241 -3258 0
3241 3247 -3259 0
3241 3248 -3261 0
3242 -3259 0
3242 3247 -3261 0
3242 3248 -3263 0
c (0<=(aux721 + aux723 - aux726))
-3248 3263 0
-3247 3261 0
-3242 3263 0
-3242 -3248 3261 0
-3242 -3247 3259 0
-3241 3261 0
-3241 -3248 3259 0
-3241 -3247 3258 0
c ((SATLiteral(361) - aux727 + SATLiteral(631))<=0)
-631 -3265 0
-361 -3265 0
-361 -631 -3266 0
c (0<=(SATLiteral(361) - aux727 + SATLiteral(631)))
631 3266 0
361 3266 0
361 631 3265 0
c ((SATLiteral(1036) - aux728 + SATLiteral(901))<=0)
-901 -3268 0
-1036 -3268 0
-1036 -901 -3269 0
c (0<=(SATLiteral(1036) - aux728 + SATLiteral(901)))
901 3269 0
1036 3269 0
1036 901 3268 0
c (( - aux729 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3271 0
-766 -3271 0
-766 -226 -3272 0
c (0<=( - aux729 + SATLiteral(766) + SATLiteral(226)))
226 3272 0
766 3272 0
766 226 3271 0
c (( - aux730 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3274 0
-496 -3274 0
-496 -1171 -3275 0
c (0<=( - aux730 + SATLiteral(496) + SATLiteral(1171)))
1171 3275 0
496 3275 0
496 1171 3274 0
c ((aux730 - aux731 + SATLiteral(91))<=0)
3274 -3277 0
3275 -3278 0
-91 -3277 0
-91 3274 -3278 0
-91 3275 -3280 0
c (0<=(aux730 - aux731 + SATLiteral(91)))
-3275 3280 0
-3274 3278 0
91 3280 0
91 -3275 3278 0
91 -3274 3277 0
c ((aux727 + aux729 - aux732)<=0)
3271 -3282 0
3272 -3283 0
3265 -3282 0
3265 3271 -3283 0
3265 3272 -3285 0
3266 -3283 0
3266 3271 -3285 0
3266 3272 -3287 0
c (0<=(aux727 + aux729 - aux732))
-3272 3287 0
-3271 3285 0
-3266 3287 0
-3266 -3272 3285 0
-3266 -3271 3283 0
-3265 3285 0
-3265 -3272 3283 0
-3265 -3271 3282 0
c ((SATLiteral(-360) - aux733 + SATLiteral(-630))<=0)
630 -3289 0
360 -3289 0
360 630 -3290 0
c (0<=(SATLiteral(-360) - aux733 + SATLiteral(-630)))
-630 3290 0
-360 3290 0
-360 -630 3289 0
c ((SATLiteral(-1035) - aux734 + SATLiteral(-900))<=0)
900 -3292 0
1035 -3292 0
1035 900 -3293 0
c (0<=(SATLiteral(-1035) - aux734 + SATLiteral(-900)))
-900 3293 0
-1035 3293 0
-1035 -900 3292 0
c (( - aux735 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3295 0
765 -3295 0
765 225 -3296 0
c (0<=( - aux735 + SATLiteral(-765) + SATLiteral(-225)))
-225 3296 0
-765 3296 0
-765 -225 3295 0
c (( - aux736 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3298 0
495 -3298 0
495 1170 -3299 0
c (0<=( - aux736 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3299 0
-495 3299 0
-495 -1170 3298 0
c ((aux736 - aux737 + SATLiteral(-90))<=0)
3298 -3301 0
3299 -3302 0
90 -3301 0
90 3298 -3302 0
90 3299 -3304 0
c (0<=(aux736 - aux737 + SATLiteral(-90)))
-3299 3304 0
-3298 3302 0
-90 3304 0
-90 -3299 3302 0
-90 -3298 3301 0
c ((aux733 + aux735 - aux738)<=0)
3295 -3306 0
3296 -3307 0
3289 -3306 0
3289 3295 -3307 0
3289 3296 -3309 0
3290 -3307 0
3290 3295 -3309 0
3290 3296 -3311 0
c (0<=(aux733 + aux735 - aux738))
-3296 3311 0
-3295 3309 0
-3290 3311 0
-3290 -3296 3309 0
-3290 -3295 3307 0
-3289 3309 0
-3289 -3296 3307 0
-3289 -3295 3306 0
c ((SATLiteral(362) - aux739 + SATLiteral(632))<=0)
-632 -3313 0
-362 -3313 0
-362 -632 -3314 0
c (0<=(SATLiteral(362) - aux739 + SATLiteral(632)))
632 3314 0
362 3314 0
362 632 3313 0
c ((SATLiteral(1037) - aux740 + SATLiteral(902))<=0)
-902 -3316 0
-1037 -3316 0
-1037 -902 -3317 0
c (0<=(SATLiteral(1037) - aux740 + SATLiteral(902)))
902 3317 0
1037 3317 0
1037 902 3316 0
c (( - aux741 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3319 0
-767 -3319 0
-767 -227 -3320 0
c (0<=( - aux741 + SATLiteral(767) + SATLiteral(227)))
227 3320 0
767 3320 0
767 227 3319 0
c (( - aux742 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3322 0
-497 -3322 0
-497 -1172 -3323 0
c (0<=( - aux742 + SATLiteral(497) + SATLiteral(1172)))
1172 3323 0
497 3323 0
497 1172 3322 0
c ((aux742 - aux743 + SATLiteral(92))<=0)
3322 -3325 0
3323 -3326 0
-92 -3325 0
-92 3322 -3326 0
-92 3323 -3328 0
c (0<=(aux742 - aux743 + SATLiteral(92)))
-3323 3328 0
-3322 3326 0
92 3328 0
92 -3323 3326 0
92 -3322 3325 0
c ((aux739 + aux741 - aux744)<=0)
3319 -3330 0
3320 -3331 0
3313 -3330 0
3313 3319 -3331 0
3313 3320 -3333 0
3314 -3331 0
3314 3319 -3333 0
3314 3320 -3335 0
c (0<=(aux739 + aux741 - aux744))
-3320 3335 0
-3319 3333 0
-3314 3335 0
-3314 -3320 3333 0
-3314 -3319 3331 0
-3313 3333 0
-3313 -3320 3331 0
-3313 -3319 3330 0
c ((SATLiteral(364) - aux745 + SATLiteral(634))<=0)
-634 -3337 0
-364 -3337 0
-364 -634 -3338 0
c (0<=(SATLiteral(364) - aux745 + SATLiteral(634)))
634 3338 0
364 3338 0
364 634 3337 0
c ((SATLiteral(1039) - aux746 + SATLiteral(904))<=0)
-904 -3340 0
-1039 -3340 0
-1039 -904 -3341 0
c (0<=(SATLiteral(1039) - aux746 + SATLiteral(904)))
904 3341 0
1039 3341 0
1039 904 3340 0
c (( - aux747 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3343 0
-769 -3343 0
-769 -229 -3344 0
c (0<=( - aux747 + SATLiteral(769) + SATLiteral(229)))
229 3344 0
769 3344 0
769 229 3343 0
c (( - aux748 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3346 0
-499 -3346 0
-499 -1174 -3347 0
c (0<=( - aux748 + SATLiteral(499) + SATLiteral(1174)))
1174 3347 0
499 3347 0
499 1174 3346 0
c ((aux748 - aux749 + SATLiteral(94))<=0)
3346 -3349 0
3347 -3350 0
-94 -3349 0
-94 3346 -3350 0
-94 3347 -3352 0
c (0<=(aux748 - aux749 + SATLiteral(94)))
-3347 3352 0
-3346 3350 0
94 3352 0
94 -3347 3350 0
94 -3346 3349 0
c ((aux745 + aux747 - aux750)<=0)
3343 -3354 0
3344 -3355 0
3337 -3354 0
3337 3343 -3355 0
3337 3344 -3357 0
3338 -3355 0
3338 3343 -3357 0
3338 3344 -3359 0
c (0<=(aux745 + aux747 - aux750))
-3344 3359 0
-3343 3357 0
-3338 3359 0
-3338 -3344 3357 0
-3338 -3343 3355 0
-3337 3357 0
-3337 -3344 3355 0
-3337 -3343 3354 0
c ((SATLiteral(366) - aux751 + SATLiteral(636))<=0)
-636 -3361 0
-366 -3361 0
-366 -636 -3362 0
c (0<=(SATLiteral(366) - aux751 + SATLiteral(636)))
636 3362 0
366 3362 0
366 636 3361 0
c ((SATLiteral(1041) - aux752 + SATLiteral(906))<=0)
-906 -3364 0
-1041 -3364 0
-1041 -906 -3365 0
c (0<=(SATLiteral(1041) - aux752 + SATLiteral(906)))
906 3365 0
1041 3365 0
1041 906 3364 0
c (( - aux753 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3367 0
-771 -3367 0
-771 -231 -3368 0
c (0<=( - aux753 + SATLiteral(771) + SATLiteral(231)))
231 3368 0
771 3368 0
771 231 3367 0
c (( - aux754 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3370 0
-501 -3370 0
-501 -1176 -3371 0
c (0<=( - aux754 + SATLiteral(501) + SATLiteral(1176)))
1176 3371 0
501 3371 0
501 1176 3370 0
c ((aux754 - aux755 + SATLiteral(96))<=0)
3370 -3373 0
3371 -3374 0
-96 -3373 0
-96 3370 -3374 0
-96 3371 -3376 0
c (0<=(aux754 - aux755 + SATLiteral(96)))
-3371 3376 0
-3370 3374 0
96 3376 0
96 -3371 3374 0
96 -3370 3373 0
c ((aux751 + aux753 - aux756)<=0)
3367 -3378 0
3368 -3379 0
3361 -3378 0
3361 3367 -3379 0
3361 3368 -3381 0
3362 -3379 0
3362 3367 -3381 0
3362 3368 -3383 0
c (0<=(aux751 + aux753 - aux756))
-3368 3383 0
-3367 3381 0
-3362 3383 0
-3362 -3368 3381 0
-3362 -3367 3379 0
-3361 3381 0
-3361 -3368 3379 0
-3361 -3367 3378 0
c ((SATLiteral(368) - aux757 + SATLiteral(638))<=0)
-638 -3385 0
-368 -3385 0
-368 -638 -3386 0
c (0<=(SATLiteral(368) - aux757 + SATLiteral(638)))
638 3386 0
368 3386 0
368 638 3385 0
c ((SATLiteral(1043) - aux758 + SATLiteral(908))<=0)
-908 -3388 0
-1043 -3388 0
-1043 -908 -3389 0
c (0<=(SATLiteral(1043) - aux758 + SATLiteral(908)))
908 3389 0
1043 3389 0
1043 908 3388 0
c (( - aux759 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3391 0
-773 -3391 0
-773 -233 -3392 0
c (0<=( - aux759 + SATLiteral(773) + SATLiteral(233)))
233 3392 0
773 3392 0
773 233 3391 0
c (( - aux760 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3394 0
-503 -3394 0
-503 -1178 -3395 0
c (0<=( - aux760 + SATLiteral(503) + SATLiteral(1178)))
1178 3395 0
503 3395 0
503 1178 3394 0
c ((aux760 - aux761 + SATLiteral(98))<=0)
3394 -3397 0
3395 -3398 0
-98 -3397 0
-98 3394 -3398 0
-98 3395 -3400 0
c (0<=(aux760 - aux761 + SATLiteral(98)))
-3395 3400 0
-3394 3398 0
98 3400 0
98 -3395 3398 0
98 -3394 3397 0
c ((aux757 + aux759 - aux762)<=0)
3391 -3402 0
3392 -3403 0
3385 -3402 0
3385 3391 -3403 0
3385 3392 -3405 0
3386 -3403 0
3386 3391 -3405 0
3386 3392 -3407 0
c (0<=(aux757 + aux759 - aux762))
-3392 3407 0
-3391 3405 0
-3386 3407 0
-3386 -3392 3405 0
-3386 -3391 3403 0
-3385 3405 0
-3385 -3392 3403 0
-3385 -3391 3402 0
c ((SATLiteral(370) - aux763 + SATLiteral(640))<=0)
-640 -3409 0
-370 -3409 0
-370 -640 -3410 0
c (0<=(SATLiteral(370) - aux763 + SATLiteral(640)))
640 3410 0
370 3410 0
370 640 3409 0
c ((SATLiteral(1045) - aux764 + SATLiteral(910))<=0)
-910 -3412 0
-1045 -3412 0
-1045 -910 -3413 0
c (0<=(SATLiteral(1045) - aux764 + SATLiteral(910)))
910 3413 0
1045 3413 0
1045 910 3412 0
c (( - aux765 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3415 0
-775 -3415 0
-775 -235 -3416 0
c (0<=( - aux765 + SATLiteral(775) + SATLiteral(235)))
235 3416 0
775 3416 0
775 235 3415 0
c (( - aux766 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3418 0
-505 -3418 0
-505 -1180 -3419 0
c (0<=( - aux766 + SATLiteral(505) + SATLiteral(1180)))
1180 3419 0
505 3419 0
505 1180 3418 0
c ((aux766 - aux767 + SATLiteral(100))<=0)
3418 -3421 0
3419 -3422 0
-100 -3421 0
-100 3418 -3422 0
-100 3419 -3424 0
c (0<=(aux766 - aux767 + SATLiteral(100)))
-3419 3424 0
-3418 3422 0
100 3424 0
100 -3419 3422 0
100 -3418 3421 0
c ((aux763 + aux765 - aux768)<=0)
3415 -3426 0
3416 -3427 0
3409 -3426 0
3409 3415 -3427 0
3409 3416 -3429 0
3410 -3427 0
3410 3415 -3429 0
3410 3416 -3431 0
c (0<=(aux763 + aux765 - aux768))
-3416 3431 0
-3415 3429 0
-3410 3431 0
-3410 -3416 3429 0
-3410 -3415 3427 0
-3409 3429 0
-3409 -3416 3427 0
-3409 -3415 3426 0
c ((SATLiteral(372) - aux769 + SATLiteral(642))<=0)
-642 -3433 0
-372 -3433 0
-372 -642 -3434 0
c (0<=(SATLiteral(372) - aux769 + SATLiteral(642)))
642 3434 0
372 3434 0
372 642 3433 0
c ((SATLiteral(1047) - aux770 + SATLiteral(912))<=0)
-912 -3436 0
-1047 -3436 0
-1047 -912 -3437 0
c (0<=(SATLiteral(1047) - aux770 + SATLiteral(912)))
912 3437 0
1047 3437 0
1047 912 3436 0
c (( - aux771 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3439 0
-777 -3439 0
-777 -237 -3440 0
c (0<=( - aux771 + SATLiteral(777) + SATLiteral(237)))
237 3440 0
777 3440 0
777 237 3439 0
c (( - aux772 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3442 0
-507 -3442 0
-507 -1182 -3443 0
c (0<=( - aux772 + SATLiteral(507) + SATLiteral(1182)))
1182 3443 0
507 3443 0
507 1182 3442 0
c ((aux772 - aux773 + SATLiteral(102))<=0)
3442 -3445 0
3443 -3446 0
-102 -3445 0
-102 3442 -3446 0
-102 3443 -3448 0
c (0<=(aux772 - aux773 + SATLiteral(102)))
-3443 3448 0
-3442 3446 0
102 3448 0
102 -3443 3446 0
102 -3442 3445 0
c ((aux769 + aux771 - aux774)<=0)
3439 -3450 0
3440 -3451 0
3433 -3450 0
3433 3439 -3451 0
3433 3440 -3453 0
3434 -3451 0
3434 3439 -3453 0
3434 3440 -3455 0
c (0<=(aux769 + aux771 - aux774))
-3440 3455 0
-3439 3453 0
-3434 3455 0
-3434 -3440 3453 0
-3434 -3439 3451 0
-3433 3453 0
-3433 -3440 3451 0
-3433 -3439 3450 0
c ((SATLiteral(374) - aux775 + SATLiteral(644))<=0)
-644 -3457 0
-374 -3457 0
-374 -644 -3458 0
c (0<=(SATLiteral(374) - aux775 + SATLiteral(644)))
644 3458 0
374 3458 0
374 644 3457 0
c ((SATLiteral(1049) - aux776 + SATLiteral(914))<=0)
-914 -3460 0
-1049 -3460 0
-1049 -914 -3461 0
c (0<=(SATLiteral(1049) - aux776 + SATLiteral(914)))
914 3461 0
1049 3461 0
1049 914 3460 0
c (( - aux777 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3463 0
-779 -3463 0
-779 -239 -3464 0
c (0<=( - aux777 + SATLiteral(779) + SATLiteral(239)))
239 3464 0
779 3464 0
779 239 3463 0
c (( - aux778 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3466 0
-509 -3466 0
-509 -1184 -3467 0
c (0<=( - aux778 + SATLiteral(509) + SATLiteral(1184)))
1184 3467 0
509 3467 0
509 1184 3466 0
c ((aux778 - aux779 + SATLiteral(104))<=0)
3466 -3469 0
3467 -3470 0
-104 -3469 0
-104 3466 -3470 0
-104 3467 -3472 0
c (0<=(aux778 - aux779 + SATLiteral(104)))
-3467 3472 0
-3466 3470 0
104 3472 0
104 -3467 3470 0
104 -3466 3469 0
c ((aux775 + aux777 - aux780)<=0)
3463 -3474 0
3464 -3475 0
3457 -3474 0
3457 3463 -3475 0
3457 3464 -3477 0
3458 -3475 0
3458 3463 -3477 0
3458 3464 -3479 0
c (0<=(aux775 + aux777 - aux780))
-3464 3479 0
-3463 3477 0
-3458 3479 0
-3458 -3464 3477 0
-3458 -3463 3475 0
-3457 3477 0
-3457 -3464 3475 0
-3457 -3463 3474 0
c ((SATLiteral(376) - aux781 + SATLiteral(646))<=0)
-646 -3481 0
-376 -3481 0
-376 -646 -3482 0
c (0<=(SATLiteral(376) - aux781 + SATLiteral(646)))
646 3482 0
376 3482 0
376 646 3481 0
c ((SATLiteral(1051) - aux782 + SATLiteral(916))<=0)
-916 -3484 0
-1051 -3484 0
-1051 -916 -3485 0
c (0<=(SATLiteral(1051) - aux782 + SATLiteral(916)))
916 3485 0
1051 3485 0
1051 916 3484 0
c (( - aux783 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3487 0
-781 -3487 0
-781 -241 -3488 0
c (0<=( - aux783 + SATLiteral(781) + SATLiteral(241)))
241 3488 0
781 3488 0
781 241 3487 0
c (( - aux784 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3490 0
-511 -3490 0
-511 -1186 -3491 0
c (0<=( - aux784 + SATLiteral(511) + SATLiteral(1186)))
1186 3491 0
511 3491 0
511 1186 3490 0
c ((aux784 - aux785 + SATLiteral(106))<=0)
3490 -3493 0
3491 -3494 0
-106 -3493 0
-106 3490 -3494 0
-106 3491 -3496 0
c (0<=(aux784 - aux785 + SATLiteral(106)))
-3491 3496 0
-3490 3494 0
106 3496 0
106 -3491 3494 0
106 -3490 3493 0
c ((aux781 + aux783 - aux786)<=0)
3487 -3498 0
3488 -3499 0
3481 -3498 0
3481 3487 -3499 0
3481 3488 -3501 0
3482 -3499 0
3482 3487 -3501 0
3482 3488 -3503 0
c (0<=(aux781 + aux783 - aux786))
-3488 3503 0
-3487 3501 0
-3482 3503 0
-3482 -3488 3501 0
-3482 -3487 3499 0
-3481 3501 0
-3481 -3488 3499 0
-3481 -3487 3498 0
c ((SATLiteral(-375) - aux787 + SATLiteral(-645))<=0)
645 -3505 0
375 -3505 0
375 645 -3506 0
c (0<=(SATLiteral(-375) - aux787 + SATLiteral(-645)))
-645 3506 0
-375 3506 0
-375 -645 3505 0
c ((SATLiteral(-1050) - aux788 + SATLiteral(-915))<=0)
915 -3508 0
1050 -3508 0
1050 915 -3509 0
c (0<=(SATLiteral(-1050) - aux788 + SATLiteral(-915)))
-915 3509 0
-1050 3509 0
-1050 -915 3508 0
c (( - aux789 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3511 0
780 -3511 0
780 240 -3512 0
c (0<=( - aux789 + SATLiteral(-780) + SATLiteral(-240)))
-240 3512 0
-780 3512 0
-780 -240 3511 0
c (( - aux790 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3514 0
510 -3514 0
510 1185 -3515 0
c (0<=( - aux790 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3515 0
-510 3515 0
-510 -1185 3514 0
c ((aux790 - aux791 + SATLiteral(-105))<=0)
3514 -3517 0
3515 -3518 0
105 -3517 0
105 3514 -3518 0
105 3515 -3520 0
c (0<=(aux790 - aux791 + SATLiteral(-105)))
-3515 3520 0
-3514 3518 0
-105 3520 0
-105 -3515 3518 0
-105 -3514 3517 0
c ((aux787 + aux789 - aux792)<=0)
3511 -3522 0
3512 -3523 0
3505 -3522 0
3505 3511 -3523 0
3505 3512 -3525 0
3506 -3523 0
3506 3511 -3525 0
3506 3512 -3527 0
c (0<=(aux787 + aux789 - aux792))
-3512 3527 0
-3511 3525 0
-3506 3527 0
-3506 -3512 3525 0
-3506 -3511 3523 0
-3505 3525 0
-3505 -3512 3523 0
-3505 -3511 3522 0
c ((SATLiteral(377) - aux793 + SATLiteral(647))<=0)
-647 -3529 0
-377 -3529 0
-377 -647 -3530 0
c (0<=(SATLiteral(377) - aux793 + SATLiteral(647)))
647 3530 0
377 3530 0
377 647 3529 0
c ((SATLiteral(1052) - aux794 + SATLiteral(917))<=0)
-917 -3532 0
-1052 -3532 0
-1052 -917 -3533 0
c (0<=(SATLiteral(1052) - aux794 + SATLiteral(917)))
917 3533 0
1052 3533 0
1052 917 3532 0
c (( - aux795 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3535 0
-782 -3535 0
-782 -242 -3536 0
c (0<=( - aux795 + SATLiteral(782) + SATLiteral(242)))
242 3536 0
782 3536 0
782 242 3535 0
c (( - aux796 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3538 0
-512 -3538 0
-512 -1187 -3539 0
c (0<=( - aux796 + SATLiteral(512) + SATLiteral(1187)))
1187 3539 0
512 3539 0
512 1187 3538 0
c ((aux796 - aux797 + SATLiteral(107))<=0)
3538 -3541 0
3539 -3542 0
-107 -3541 0
-107 3538 -3542 0
-107 3539 -3544 0
c (0<=(aux796 - aux797 + SATLiteral(107)))
-3539 3544 0
-3538 3542 0
107 3544 0
107 -3539 3542 0
107 -3538 3541 0
c ((aux793 + aux795 - aux798)<=0)
3535 -3546 0
3536 -3547 0
3529 -3546 0
3529 3535 -3547 0
3529 3536 -3549 0
3530 -3547 0
3530 3535 -3549 0
3530 3536 -3551 0
c (0<=(aux793 + aux795 - aux798))
-3536 3551 0
-3535 3549 0
-3530 3551 0
-3530 -3536 3549 0
-3530 -3535 3547 0
-3529 3549 0
-3529 -3536 3547 0
-3529 -3535 3546 0
c ((SATLiteral(379) - aux799 + SATLiteral(649))<=0)
-649 -3553 0
-379 -3553 0
-379 -649 -3554 0
c (0<=(SATLiteral(379) - aux799 + SATLiteral(649)))
649 3554 0
379 3554 0
379 649 3553 0
c ((SATLiteral(1054) - aux800 + SATLiteral(919))<=0)
-919 -3556 0
-1054 -3556 0
-1054 -919 -3557 0
c (0<=(SATLiteral(1054) - aux800 + SATLiteral(919)))
919 3557 0
1054 3557 0
1054 919 3556 0
c (( - aux801 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3559 0
-784 -3559 0
-784 -244 -3560 0
c (0<=( - aux801 + SATLiteral(784) + SATLiteral(244)))
244 3560 0
784 3560 0
784 244 3559 0
c (( - aux802 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3562 0
-514 -3562 0
-514 -1189 -3563 0
c (0<=( - aux802 + SATLiteral(514) + SATLiteral(1189)))
1189 3563 0
514 3563 0
514 1189 3562 0
c ((aux802 - aux803 + SATLiteral(109))<=0)
3562 -3565 0
3563 -3566 0
-109 -3565 0
-109 3562 -3566 0
-109 3563 -3568 0
c (0<=(aux802 - aux803 + SATLiteral(109)))
-3563 3568 0
-3562 3566 0
109 3568 0
109 -3563 3566 0
109 -3562 3565 0
c ((aux799 + aux801 - aux804)<=0)
3559 -3570 0
3560 -3571 0
3553 -3570 0
3553 3559 -3571 0
3553 3560 -3573 0
3554 -3571 0
3554 3559 -3573 0
3554 3560 -3575 0
c (0<=(aux799 + aux801 - aux804))
-3560 3575 0
-3559 3573 0
-3554 3575 0
-3554 -3560 3573 0
-3554 -3559 3571 0
-3553 3573 0
-3553 -3560 3571 0
-3553 -3559 3570 0
c ((SATLiteral(381) - aux805 + SATLiteral(651))<=0)
-651 -3577 0
-381 -3577 0
-381 -651 -3578 0
c (0<=(SATLiteral(381) - aux805 + SATLiteral(651)))
651 3578 0
381 3578 0
381 651 3577 0
c ((SATLiteral(1056) - aux806 + SATLiteral(921))<=0)
-921 -3580 0
-1056 -3580 0
-1056 -921 -3581 0
c (0<=(SATLiteral(1056) - aux806 + SATLiteral(921)))
921 3581 0
1056 3581 0
1056 921 3580 0
c (( - aux807 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3583 0
-786 -3583 0
-786 -246 -3584 0
c (0<=( - aux807 + SATLiteral(786) + SATLiteral(246)))
246 3584 0
786 3584 0
786 246 3583 0
c (( - aux808 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3586 0
-516 -3586 0
-516 -1191 -3587 0
c (0<=( - aux808 + SATLiteral(516) + SATLiteral(1191)))
1191 3587 0
516 3587 0
516 1191 3586 0
c ((aux808 - aux809 + SATLiteral(111))<=0)
3586 -3589 0
3587 -3590 0
-111 -3589 0
-111 3586 -3590 0
-111 3587 -3592 0
c (0<=(aux808 - aux809 + SATLiteral(111)))
-3587 3592 0
-3586 3590 0
111 3592 0
111 -3587 3590 0
111 -3586 3589 0
c ((aux805 + aux807 - aux810)<=0)
3583 -3594 0
3584 -3595 0
3577 -3594 0
3577 3583 -3595 0
3577 3584 -3597 0
3578 -3595 0
3578 3583 -3597 0
3578 3584 -3599 0
c (0<=(aux805 + aux807 - aux810))
-3584 3599 0
-3583 3597 0
-3578 3599 0
-3578 -3584 3597 0
-3578 -3583 3595 0
-3577 3597 0
-3577 -3584 3595 0
-3577 -3583 3594 0
c ((SATLiteral(383) - aux811 + SATLiteral(653))<=0)
-653 -3601 0
-383 -3601 0
-383 -653 -3602 0
c (0<=(SATLiteral(383) - aux811 + SATLiteral(653)))
653 3602 0
383 3602 0
383 653 3601 0
c ((SATLiteral(1058) - aux812 + SATLiteral(923))<=0)
-923 -3604 0
-1058 -3604 0
-1058 -923 -3605 0
c (0<=(SATLiteral(1058) - aux812 + SATLiteral(923)))
923 3605 0
1058 3605 0
1058 923 3604 0
c (( - aux813 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3607 0
-788 -3607 0
-788 -248 -3608 0
c (0<=( - aux813 + SATLiteral(788) + SATLiteral(248)))
248 3608 0
788 3608 0
788 248 3607 0
c (( - aux814 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3610 0
-518 -3610 0
-518 -1193 -3611 0
c (0<=( - aux814 + SATLiteral(518) + SATLiteral(1193)))
1193 3611 0
518 3611 0
518 1193 3610 0
c ((aux814 - aux815 + SATLiteral(113))<=0)
3610 -3613 0
3611 -3614 0
-113 -3613 0
-113 3610 -3614 0
-113 3611 -3616 0
c (0<=(aux814 - aux815 + SATLiteral(113)))
-3611 3616 0
-3610 3614 0
113 3616 0
113 -3611 3614 0
113 -3610 3613 0
c ((aux811 + aux813 - aux816)<=0)
3607 -3618 0
3608 -3619 0
3601 -3618 0
3601 3607 -3619 0
3601 3608 -3621 0
3602 -3619 0
3602 3607 -3621 0
3602 3608 -3623 0
c (0<=(aux811 + aux813 - aux816))
-3608 3623 0
-3607 3621 0
-3602 3623 0
-3602 -3608 3621 0
-3602 -3607 3619 0
-3601 3621 0
-3601 -3608 3619 0
-3601 -3607 3618 0
c ((SATLiteral(385) - aux817 + SATLiteral(655))<=0)
-655 -3625 0
-385 -3625 0
-385 -655 -3626 0
c (0<=(SATLiteral(385) - aux817 + SATLiteral(655)))
655 3626 0
385 3626 0
385 655 3625 0
c ((SATLiteral(1060) - aux818 + SATLiteral(925))<=0)
-925 -3628 0
-1060 -3628 0
-1060 -925 -3629 0
c (0<=(SATLiteral(1060) - aux818 + SATLiteral(925)))
925 3629 0
1060 3629 0
1060 925 3628 0
c (( - aux819 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3631 0
-790 -3631 0
-790 -250 -3632 0
c (0<=( - aux819 + SATLiteral(790) + SATLiteral(250)))
250 3632 0
790 3632 0
790 250 3631 0
c (( - aux820 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3634 0
-520 -3634 0
-520 -1195 -3635 0
c (0<=( - aux820 + SATLiteral(520) + SATLiteral(1195)))
1195 3635 0
520 3635 0
520 1195 3634 0
c ((aux820 - aux821 + SATLiteral(115))<=0)
3634 -3637 0
3635 -3638 0
-115 -3637 0
-115 3634 -3638 0
-115 3635 -3640 0
c (0<=(aux820 - aux821 + SATLiteral(115)))
-3635 3640 0
-3634 3638 0
115 3640 0
115 -3635 3638 0
115 -3634 3637 0
c ((aux817 + aux819 - aux822)<=0)
3631 -3642 0
3632 -3643 0
3625 -3642 0
3625 3631 -3643 0
3625 3632 -3645 0
3626 -3643 0
3626 3631 -3645 0
3626 3632 -3647 0
c (0<=(aux817 + aux819 - aux822))
-3632 3647 0
-3631 3645 0
-3626 3647 0
-3626 -3632 3645 0
-3626 -3631 3643 0
-3625 3645 0
-3625 -3632 3643 0
-3625 -3631 3642 0
c ((SATLiteral(387) - aux823 + SATLiteral(657))<=0)
-657 -3649 0
-387 -3649 0
-387 -657 -3650 0
c (0<=(SATLiteral(387) - aux823 + SATLiteral(657)))
657 3650 0
387 3650 0
387 657 3649 0
c ((SATLiteral(1062) - aux824 + SATLiteral(927))<=0)
-927 -3652 0
-1062 -3652 0
-1062 -927 -3653 0
c (0<=(SATLiteral(1062) - aux824 + SATLiteral(927)))
927 3653 0
1062 3653 0
1062 927 3652 0
c (( - aux825 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3655 0
-792 -3655 0
-792 -252 -3656 0
c (0<=( - aux825 + SATLiteral(792) + SATLiteral(252)))
252 3656 0
792 3656 0
792 252 3655 0
c (( - aux826 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3658 0
-522 -3658 0
-522 -1197 -3659 0
c (0<=( - aux826 + SATLiteral(522) + SATLiteral(1197)))
1197 3659 0
522 3659 0
522 1197 3658 0
c ((aux826 - aux827 + SATLiteral(117))<=0)
3658 -3661 0
3659 -3662 0
-117 -3661 0
-117 3658 -3662 0
-117 3659 -3664 0
c (0<=(aux826 - aux827 + SATLiteral(117)))
-3659 3664 0
-3658 3662 0
117 3664 0
117 -3659 3662 0
117 -3658 3661 0
c ((aux823 + aux825 - aux828)<=0)
3655 -3666 0
3656 -3667 0
3649 -3666 0
3649 3655 -3667 0
3649 3656 -3669 0
3650 -3667 0
3650 3655 -3669 0
3650 3656 -3671 0
c (0<=(aux823 + aux825 - aux828))
-3656 3671 0
-3655 3669 0
-3650 3671 0
-3650 -3656 3669 0
-3650 -3655 3667 0
-3649 3669 0
-3649 -3656 3667 0
-3649 -3655 3666 0
c ((SATLiteral(389) - aux829 + SATLiteral(659))<=0)
-659 -3673 0
-389 -3673 0
-389 -659 -3674 0
c (0<=(SATLiteral(389) - aux829 + SATLiteral(659)))
659 3674 0
389 3674 0
389 659 3673 0
c ((SATLiteral(1064) - aux830 + SATLiteral(929))<=0)
-929 -3676 0
-1064 -3676 0
-1064 -929 -3677 0
c (0<=(SATLiteral(1064) - aux830 + SATLiteral(929)))
929 3677 0
1064 3677 0
1064 929 3676 0
c (( - aux831 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3679 0
-794 -3679 0
-794 -254 -3680 0
c (0<=( - aux831 + SATLiteral(794) + SATLiteral(254)))
254 3680 0
794 3680 0
794 254 3679 0
c (( - aux832 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3682 0
-524 -3682 0
-524 -1199 -3683 0
c (0<=( - aux832 + SATLiteral(524) + SATLiteral(1199)))
1199 3683 0
524 3683 0
524 1199 3682 0
c ((aux832 - aux833 + SATLiteral(119))<=0)
3682 -3685 0
3683 -3686 0
-119 -3685 0
-119 3682 -3686 0
-119 3683 -3688 0
c (0<=(aux832 - aux833 + SATLiteral(119)))
-3683 3688 0
-3682 3686 0
119 3688 0
119 -3683 3686 0
119 -3682 3685 0
c ((aux829 + aux831 - aux834)<=0)
3679 -3690 0
3680 -3691 0
3673 -3690 0
3673 3679 -3691 0
3673 3680 -3693 0
3674 -3691 0
3674 3679 -3693 0
3674 3680 -3695 0
c (0<=(aux829 + aux831 - aux834))
-3680 3695 0
-3679 3693 0
-3674 3695 0
-3674 -3680 3693 0
-3674 -3679 3691 0
-3673 3693 0
-3673 -3680 3691 0
-3673 -3679 3690 0
c ((SATLiteral(391) - aux835 + SATLiteral(661))<=0)
-661 -3697 0
-391 -3697 0
-391 -661 -3698 0
c (0<=(SATLiteral(391) - aux835 + SATLiteral(661)))
661 3698 0
391 3698 0
391 661 3697 0
c ((SATLiteral(1066) - aux836 + SATLiteral(931))<=0)
-931 -3700 0
-1066 -3700 0
-1066 -931 -3701 0
c (0<=(SATLiteral(1066) - aux836 + SATLiteral(931)))
931 3701 0
1066 3701 0
1066 931 3700 0
c (( - aux837 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3703 0
-796 -3703 0
-796 -256 -3704 0
c (0<=( - aux837 + SATLiteral(796) + SATLiteral(256)))
256 3704 0
796 3704 0
796 256 3703 0
c (( - aux838 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3706 0
-526 -3706 0
-526 -1201 -3707 0
c (0<=( - aux838 + SATLiteral(526) + SATLiteral(1201)))
1201 3707 0
526 3707 0
526 1201 3706 0
c ((aux838 - aux839 + SATLiteral(121))<=0)
3706 -3709 0
3707 -3710 0
-121 -3709 0
-121 3706 -3710 0
-121 3707 -3712 0
c (0<=(aux838 - aux839 + SATLiteral(121)))
-3707 3712 0
-3706 3710 0
121 3712 0
121 -3707 3710 0
121 -3706 3709 0
c ((aux835 + aux837 - aux840)<=0)
3703 -3714 0
3704 -3715 0
3697 -3714 0
3697 3703 -3715 0
3697 3704 -3717 0
3698 -3715 0
3698 3703 -3717 0
3698 3704 -3719 0
c (0<=(aux835 + aux837 - aux840))
-3704 3719 0
-3703 3717 0
-3698 3719 0
-3698 -3704 3717 0
-3698 -3703 3715 0
-3697 3717 0
-3697 -3704 3715 0
-3697 -3703 3714 0
c ((SATLiteral(-390) - aux841 + SATLiteral(-660))<=0)
660 -3721 0
390 -3721 0
390 660 -3722 0
c (0<=(SATLiteral(-390) - aux841 + SATLiteral(-660)))
-660 3722 0
-390 3722 0
-390 -660 3721 0
c ((SATLiteral(-1065) - aux842 + SATLiteral(-930))<=0)
930 -3724 0
1065 -3724 0
1065 930 -3725 0
c (0<=(SATLiteral(-1065) - aux842 + SATLiteral(-930)))
-930 3725 0
-1065 3725 0
-1065 -930 3724 0
c (( - aux843 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3727 0
795 -3727 0
795 255 -3728 0
c (0<=( - aux843 + SATLiteral(-795) + SATLiteral(-255)))
-255 3728 0
-795 3728 0
-795 -255 3727 0
c (( - aux844 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3730 0
525 -3730 0
525 1200 -3731 0
c (0<=( - aux844 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3731 0
-525 3731 0
-525 -1200 3730 0
c ((aux844 - aux845 + SATLiteral(-120))<=0)
3730 -3733 0
3731 -3734 0
120 -3733 0
120 3730 -3734 0
120 3731 -3736 0
c (0<=(aux844 - aux845 + SATLiteral(-120)))
-3731 3736 0
-3730 3734 0
-120 3736 0
-120 -3731 3734 0
-120 -3730 3733 0
c ((aux841 + aux843 - aux846)<=0)
3727 -3738 0
3728 -3739 0
3721 -3738 0
3721 3727 -3739 0
3721 3728 -3741 0
3722 -3739 0
3722 3727 -3741 0
3722 3728 -3743 0
c (0<=(aux841 + aux843 - aux846))
-3728 3743 0
-3727 3741 0
-3722 3743 0
-3722 -3728 3741 0
-3722 -3727 3739 0
-3721 3741 0
-3721 -3728 3739 0
-3721 -3727 3738 0
c ((SATLiteral(392) - aux847 + SATLiteral(662))<=0)
-662 -3745 0
-392 -3745 0
-392 -662 -3746 0
c (0<=(SATLiteral(392) - aux847 + SATLiteral(662)))
662 3746 0
392 3746 0
392 662 3745 0
c ((SATLiteral(1067) - aux848 + SATLiteral(932))<=0)
-932 -3748 0
-1067 -3748 0
-1067 -932 -3749 0
c (0<=(SATLiteral(1067) - aux848 + SATLiteral(932)))
932 3749 0
1067 3749 0
1067 932 3748 0
c (( - aux849 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3751 0
-797 -3751 0
-797 -257 -3752 0
c (0<=( - aux849 + SATLiteral(797) + SATLiteral(257)))
257 3752 0
797 3752 0
797 257 3751 0
c (( - aux850 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3754 0
-527 -3754 0
-527 -1202 -3755 0
c (0<=( - aux850 + SATLiteral(527) + SATLiteral(1202)))
1202 3755 0
527 3755 0
527 1202 3754 0
c ((aux850 - aux851 + SATLiteral(122))<=0)
3754 -3757 0
3755 -3758 0
-122 -3757 0
-122 3754 -3758 0
-122 3755 -3760 0
c (0<=(aux850 - aux851 + SATLiteral(122)))
-3755 3760 0
-3754 3758 0
122 3760 0
122 -3755 3758 0
122 -3754 3757 0
c ((aux847 + aux849 - aux852)<=0)
3751 -3762 0
3752 -3763 0
3745 -3762 0
3745 3751 -3763 0
3745 3752 -3765 0
3746 -3763 0
3746 3751 -3765 0
3746 3752 -3767 0
c (0<=(aux847 + aux849 - aux852))
-3752 3767 0
-3751 3765 0
-3746 3767 0
-3746 -3752 3765 0
-3746 -3751 3763 0
-3745 3765 0
-3745 -3752 3763 0
-3745 -3751 3762 0
c ((SATLiteral(394) - aux853 + SATLiteral(664))<=0)
-664 -3769 0
-394 -3769 0
-394 -664 -3770 0
c (0<=(SATLiteral(394) - aux853 + SATLiteral(664)))
664 3770 0
394 3770 0
394 664 3769 0
c ((SATLiteral(1069) - aux854 + SATLiteral(934))<=0)
-934 -3772 0
-1069 -3772 0
-1069 -934 -3773 0
c (0<=(SATLiteral(1069) - aux854 + SATLiteral(934)))
934 3773 0
1069 3773 0
1069 934 3772 0
c (( - aux855 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3775 0
-799 -3775 0
-799 -259 -3776 0
c (0<=( - aux855 + SATLiteral(799) + SATLiteral(259)))
259 3776 0
799 3776 0
799 259 3775 0
c (( - aux856 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3778 0
-529 -3778 0
-529 -1204 -3779 0
c (0<=( - aux856 + SATLiteral(529) + SATLiteral(1204)))
1204 3779 0
529 3779 0
529 1204 3778 0
c ((aux856 - aux857 + SATLiteral(124))<=0)
3778 -3781 0
3779 -3782 0
-124 -3781 0
-124 3778 -3782 0
-124 3779 -3784 0
c (0<=(aux856 - aux857 + SATLiteral(124)))
-3779 3784 0
-3778 3782 0
124 3784 0
124 -3779 3782 0
124 -3778 3781 0
c ((aux853 + aux855 - aux858)<=0)
3775 -3786 0
3776 -3787 0
3769 -3786 0
3769 3775 -3787 0
3769 3776 -3789 0
3770 -3787 0
3770 3775 -3789 0
3770 3776 -3791 0
c (0<=(aux853 + aux855 - aux858))
-3776 3791 0
-3775 3789 0
-3770 3791 0
-3770 -3776 3789 0
-3770 -3775 3787 0
-3769 3789 0
-3769 -3776 3787 0
-3769 -3775 3786 0
c ((SATLiteral(396) - aux859 + SATLiteral(666))<=0)
-666 -3793 0
-396 -3793 0
-396 -666 -3794 0
c (0<=(SATLiteral(396) - aux859 + SATLiteral(666)))
666 3794 0
396 3794 0
396 666 3793 0
c ((SATLiteral(1071) - aux860 + SATLiteral(936))<=0)
-936 -3796 0
-1071 -3796 0
-1071 -936 -3797 0
c (0<=(SATLiteral(1071) - aux860 + SATLiteral(936)))
936 3797 0
1071 3797 0
1071 936 3796 0
c (( - aux861 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3799 0
-801 -3799 0
-801 -261 -3800 0
c (0<=( - aux861 + SATLiteral(801) + SATLiteral(261)))
261 3800 0
801 3800 0
801 261 3799 0
c (( - aux862 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3802 0
-531 -3802 0
-531 -1206 -3803 0
c (0<=( - aux862 + SATLiteral(531) + SATLiteral(1206)))
1206 3803 0
531 3803 0
531 1206 3802 0
c ((aux862 - aux863 + SATLiteral(126))<=0)
3802 -3805 0
3803 -3806 0
-126 -3805 0
-126 3802 -3806 0
-126 3803 -3808 0
c (0<=(aux862 - aux863 + SATLiteral(126)))
-3803 3808 0
-3802 3806 0
126 3808 0
126 -3803 3806 0
126 -3802 3805 0
c ((aux859 + aux861 - aux864)<=0)
3799 -3810 0
3800 -3811 0
3793 -3810 0
3793 3799 -3811 0
3793 3800 -3813 0
3794 -3811 0
3794 3799 -3813 0
3794 3800 -3815 0
c (0<=(aux859 + aux861 - aux864))
-3800 3815 0
-3799 3813 0
-3794 3815 0
-3794 -3800 3813 0
-3794 -3799 3811 0
-3793 3813 0
-3793 -3800 3811 0
-3793 -3799 3810 0
c ((SATLiteral(398) - aux865 + SATLiteral(668))<=0)
-668 -3817 0
-398 -3817 0
-398 -668 -3818 0
c (0<=(SATLiteral(398) - aux865 + SATLiteral(668)))
668 3818 0
398 3818 0
398 668 3817 0
c ((SATLiteral(1073) - aux866 + SATLiteral(938))<=0)
-938 -3820 0
-1073 -3820 0
-1073 -938 -3821 0
c (0<=(SATLiteral(1073) - aux866 + SATLiteral(938)))
938 3821 0
1073 3821 0
1073 938 3820 0
c (( - aux867 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3823 0
-803 -3823 0
-803 -263 -3824 0
c (0<=( - aux867 + SATLiteral(803) + SATLiteral(263)))
263 3824 0
803 3824 0
803 263 3823 0
c (( - aux868 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3826 0
-533 -3826 0
-533 -1208 -3827 0
c (0<=( - aux868 + SATLiteral(533) + SATLiteral(1208)))
1208 3827 0
533 3827 0
533 1208 3826 0
c ((aux868 - aux869 + SATLiteral(128))<=0)
3826 -3829 0
3827 -3830 0
-128 -3829 0
-128 3826 -3830 0
-128 3827 -3832 0
c (0<=(aux868 - aux869 + SATLiteral(128)))
-3827 3832 0
-3826 3830 0
128 3832 0
128 -3827 3830 0
128 -3826 3829 0
c ((aux865 + aux867 - aux870)<=0)
3823 -3834 0
3824 -3835 0
3817 -3834 0
3817 3823 -3835 0
3817 3824 -3837 0
3818 -3835 0
3818 3823 -3837 0
3818 3824 -3839 0
c (0<=(aux865 + aux867 - aux870))
-3824 3839 0
-3823 3837 0
-3818 3839 0
-3818 -3824 3837 0
-3818 -3823 3835 0
-3817 3837 0
-3817 -3824 3835 0
-3817 -3823 3834 0
c ((SATLiteral(400) - aux871 + SATLiteral(670))<=0)
-670 -3841 0
-400 -3841 0
-400 -670 -3842 0
c (0<=(SATLiteral(400) - aux871 + SATLiteral(670)))
670 3842 0
400 3842 0
400 670 3841 0
c ((SATLiteral(1075) - aux872 + SATLiteral(940))<=0)
-940 -3844 0
-1075 -3844 0
-1075 -940 -3845 0
c (0<=(SATLiteral(1075) - aux872 + SATLiteral(940)))
940 3845 0
1075 3845 0
1075 940 3844 0
c (( - aux873 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3847 0
-805 -3847 0
-805 -265 -3848 0
c (0<=( - aux873 + SATLiteral(805) + SATLiteral(265)))
265 3848 0
805 3848 0
805 265 3847 0
c (( - aux874 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3850 0
-535 -3850 0
-535 -1210 -3851 0
c (0<=( - aux874 + SATLiteral(535) + SATLiteral(1210)))
1210 3851 0
535 3851 0
535 1210 3850 0
c ((aux874 - aux875 + SATLiteral(130))<=0)
3850 -3853 0
3851 -3854 0
-130 -3853 0
-130 3850 -3854 0
-130 3851 -3856 0
c (0<=(aux874 - aux875 + SATLiteral(130)))
-3851 3856 0
-3850 3854 0
130 3856 0
130 -3851 3854 0
130 -3850 3853 0
c ((aux871 + aux873 - aux876)<=0)
3847 -3858 0
3848 -3859 0
3841 -3858 0
3841 3847 -3859 0
3841 3848 -3861 0
3842 -3859 0
3842 3847 -3861 0
3842 3848 -3863 0
c (0<=(aux871 + aux873 - aux876))
-3848 3863 0
-3847 3861 0
-3842 3863 0
-3842 -3848 3861 0
-3842 -3847 3859 0
-3841 3861 0
-3841 -3848 3859 0
-3841 -3847 3858 0
c ((SATLiteral(402) - aux877 + SATLiteral(672))<=0)
-672 -3865 0
-402 -3865 0
-402 -672 -3866 0
c (0<=(SATLiteral(402) - aux877 + SATLiteral(672)))
672 3866 0
402 3866 0
402 672 3865 0
c ((SATLiteral(1077) - aux878 + SATLiteral(942))<=0)
-942 -3868 0
-1077 -3868 0
-1077 -942 -3869 0
c (0<=(SATLiteral(1077) - aux878 + SATLiteral(942)))
942 3869 0
1077 3869 0
1077 942 3868 0
c (( - aux879 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3871 0
-807 -3871 0
-807 -267 -3872 0
c (0<=( - aux879 + SATLiteral(807) + SATLiteral(267)))
267 3872 0
807 3872 0
807 267 3871 0
c (( - aux880 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3874 0
-537 -3874 0
-537 -1212 -3875 0
c (0<=( - aux880 + SATLiteral(537) + SATLiteral(1212)))
1212 3875 0
537 3875 0
537 1212 3874 0
c ((aux880 - aux881 + SATLiteral(132))<=0)
3874 -3877 0
3875 -3878 0
-132 -3877 0
-132 3874 -3878 0
-132 3875 -3880 0
c (0<=(aux880 - aux881 + SATLiteral(132)))
-3875 3880 0
-3874 3878 0
132 3880 0
132 -3875 3878 0
132 -3874 3877 0
c ((aux877 + aux879 - aux882)<=0)
3871 -3882 0
3872 -3883 0
3865 -3882 0
3865 3871 -3883 0
3865 3872 -3885 0
3866 -3883 0
3866 3871 -3885 0
3866 3872 -3887 0
c (0<=(aux877 + aux879 - aux882))
-3872 3887 0
-3871 3885 0
-3866 3887 0
-3866 -3872 3885 0
-3866 -3871 3883 0
-3865 3885 0
-3865 -3872 3883 0
-3865 -3871 3882 0
c ((SATLiteral(404) - aux883 + SATLiteral(674))<=0)
-674 -3889 0
-404 -3889 0
-404 -674 -3890 0
c (0<=(SATLiteral(404) - aux883 + SATLiteral(674)))
674 3890 0
404 3890 0
404 674 3889 0
c ((SATLiteral(1079) - aux884 + SATLiteral(944))<=0)
-944 -3892 0
-1079 -3892 0
-1079 -944 -3893 0
c (0<=(SATLiteral(1079) - aux884 + SATLiteral(944)))
944 3893 0
1079 3893 0
1079 944 3892 0
c (( - aux885 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3895 0
-809 -3895 0
-809 -269 -3896 0
c (0<=( - aux885 + SATLiteral(809) + SATLiteral(269)))
269 3896 0
809 3896 0
809 269 3895 0
c (( - aux886 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3898 0
-539 -3898 0
-539 -1214 -3899 0
c (0<=( - aux886 + SATLiteral(539) + SATLiteral(1214)))
1214 3899 0
539 3899 0
539 1214 3898 0
c ((aux886 - aux887 + SATLiteral(134))<=0)
3898 -3901 0
3899 -3902 0
-134 -3901 0
-134 3898 -3902 0
-134 3899 -3904 0
c (0<=(aux886 - aux887 + SATLiteral(134)))
-3899 3904 0
-3898 3902 0
134 3904 0
134 -3899 3902 0
134 -3898 3901 0
c ((aux883 + aux885 - aux888)<=0)
3895 -3906 0
3896 -3907 0
3889 -3906 0
3889 3895 -3907 0
3889 3896 -3909 0
3890 -3907 0
3890 3895 -3909 0
3890 3896 -3911 0
c (0<=(aux883 + aux885 - aux888))
-3896 3911 0
-3895 3909 0
-3890 3911 0
-3890 -3896 3909 0
-3890 -3895 3907 0
-3889 3909 0
-3889 -3896 3907 0
-3889 -3895 3906 0
c ((SATLiteral(406) - aux889 + SATLiteral(676))<=0)
-676 -3913 0
-406 -3913 0
-406 -676 -3914 0
c (0<=(SATLiteral(406) - aux889 + SATLiteral(676)))
676 3914 0
406 3914 0
406 676 3913 0
c ((SATLiteral(1081) - aux890 + SATLiteral(946))<=0)
-946 -3916 0
-1081 -3916 0
-1081 -946 -3917 0
c (0<=(SATLiteral(1081) - aux890 + SATLiteral(946)))
946 3917 0
1081 3917 0
1081 946 3916 0
c (( - aux891 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3919 0
-811 -3919 0
-811 -271 -3920 0
c (0<=( - aux891 + SATLiteral(811) + SATLiteral(271)))
271 3920 0
811 3920 0
811 271 3919 0
c (( - aux892 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3922 0
-541 -3922 0
-541 -1216 -3923 0
c (0<=( - aux892 + SATLiteral(541) + SATLiteral(1216)))
1216 3923 0
541 3923 0
541 1216 3922 0
c ((aux892 - aux893 + SATLiteral(136))<=0)
3922 -3925 0
3923 -3926 0
-136 -3925 0
-136 3922 -3926 0
-136 3923 -3928 0
c (0<=(aux892 - aux893 + SATLiteral(136)))
-3923 3928 0
-3922 3926 0
136 3928 0
136 -3923 3926 0
136 -3922 3925 0
c ((aux889 + aux891 - aux894)<=0)
3919 -3930 0
3920 -3931 0
3913 -3930 0
3913 3919 -3931 0
3913 3920 -3933 0
3914 -3931 0
3914 3919 -3933 0
3914 3920 -3935 0
c (0<=(aux889 + aux891 - aux894))
-3920 3935 0
-3919 3933 0
-3914 3935 0
-3914 -3920 3933 0
-3914 -3919 3931 0
-3913 3933 0
-3913 -3920 3931 0
-3913 -3919 3930 0
c ((SATLiteral(-405) - aux895 + SATLiteral(-675))<=0)
675 -3937 0
405 -3937 0
405 675 -3938 0
c (0<=(SATLiteral(-405) - aux895 + SATLiteral(-675)))
-675 3938 0
-405 3938 0
-405 -675 3937 0
c ((SATLiteral(-1080) - aux896 + SATLiteral(-945))<=0)
945 -3940 0
1080 -3940 0
1080 945 -3941 0
c (0<=(SATLiteral(-1080) - aux896 + SATLiteral(-945)))
-945 3941 0
-1080 3941 0
-1080 -945 3940 0
c (( - aux897 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3943 0
810 -3943 0
810 270 -3944 0
c (0<=( - aux897 + SATLiteral(-810) + SATLiteral(-270)))
-270 3944 0
-810 3944 0
-810 -270 3943 0
c (( - aux898 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3946 0
540 -3946 0
540 1215 -3947 0
c (0<=( - aux898 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3947 0
-540 3947 0
-540 -1215 3946 0
c ((aux898 - aux899 + SATLiteral(-135))<=0)
3946 -3949 0
3947 -3950 0
135 -3949 0
135 3946 -3950 0
135 3947 -3952 0
c (0<=(aux898 - aux899 + SATLiteral(-135)))
-3947 3952 0
-3946 3950 0
-135 3952 0
-135 -3947 3950 0
-135 -3946 3949 0
c ((aux895 + aux897 - aux900)<=0)
3943 -3954 0
3944 -3955 0
3937 -3954 0
3937 3943 -3955 0
3937 3944 -3957 0
3938 -3955 0
3938 3943 -3957 0
3938 3944 -3959 0
c (0<=(aux895 + aux897 - aux900))
-3944 3959 0
-3943 3957 0
-3938 3959 0
-3938 -3944 3957 0
-3938 -3943 3955 0
-3937 3957 0
-3937 -3944 3955 0
-3937 -3943 3954 0
c (( - aux901 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3961 0
-2 -3961 0
-2 -122 -3962 0
c (0<=( - aux901 + SATLiteral(2) + SATLiteral(122)))
122 3962 0
2 3962 0
2 122 3961 0
c (( - aux902 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3964 0
-17 -3964 0
-17 -107 -3965 0
c (0<=( - aux902 + SATLiteral(17) + SATLiteral(107)))
107 3965 0
17 3965 0
17 107 3964 0
c (( - aux903 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3967 0
-47 -3967 0
-47 -92 -3968 0
c (0<=( - aux903 + SATLiteral(47) + SATLiteral(92)))
92 3968 0
47 3968 0
47 92 3967 0
c (( - aux904 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3970 0
-62 -3970 0
-62 -77 -3971 0
c (0<=( - aux904 + SATLiteral(62) + SATLiteral(77)))
77 3971 0
62 3971 0
62 77 3970 0
c ((aux904 - aux905 + SATLiteral(32))<=0)
3970 -3973 0
3971 -3974 0
-32 -3973 0
-32 3970 -3974 0
-32 3971 -3976 0
c (0<=(aux904 - aux905 + SATLiteral(32)))
-3971 3976 0
-3970 3974 0
32 3976 0
32 -3971 3974 0
32 -3970 3973 0
c ((aux901 + aux903 - aux906)<=0)
3967 -3978 0
3968 -3979 0
3961 -3978 0
3961 3967 -3979 0
3961 3968 -3981 0
3962 -3979 0
3962 3967 -3981 0
3962 3968 -3983 0
c (0<=(aux901 + aux903 - aux906))
-3968 3983 0
-3967 3981 0
-3962 3983 0
-3962 -3968 3981 0
-3962 -3967 3979 0
-3961 3981 0
-3961 -3968 3979 0
-3961 -3967 3978 0
c (( - aux907 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3985 0
-4 -3985 0
-4 -124 -3986 0
c (0<=( - aux907 + SATLiteral(4) + SATLiteral(124)))
124 3986 0
4 3986 0
4 124 3985 0
c (( - aux908 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3988 0
-19 -3988 0
-19 -109 -3989 0
c (0<=( - aux908 + SATLiteral(19) + SATLiteral(109)))
109 3989 0
19 3989 0
19 109 3988 0
c (( - aux909 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3991 0
-49 -3991 0
-49 -94 -3992 0
c (0<=( - aux909 + SATLiteral(49) + SATLiteral(94)))
94 3992 0
49 3992 0
49 94 3991 0
c (( - aux910 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3994 0
-64 -3994 0
-64 -79 -3995 0
c (0<=( - aux910 + SATLiteral(64) + SATLiteral(79)))
79 3995 0
64 3995 0
64 79 3994 0
c ((aux910 - aux911 + SATLiteral(34))<=0)
3994 -3997 0
3995 -3998 0
-34 -3997 0
-34 3994 -3998 0
-34 3995 -4000 0
c (0<=(aux910 - aux911 + SATLiteral(34)))
-3995 4000 0
-3994 3998 0
34 4000 0
34 -3995 3998 0
34 -3994 3997 0
c ((aux907 + aux909 - aux912)<=0)
3991 -4002 0
3992 -4003 0
3985 -4002 0
3985 3991 -4003 0
3985 3992 -4005 0
3986 -4003 0
3986 3991 -4005 0
3986 3992 -4007 0
c (0<=(aux907 + aux909 - aux912))
-3992 4007 0
-3991 4005 0
-3986 4007 0
-3986 -3992 4005 0
-3986 -3991 4003 0
-3985 4005 0
-3985 -3992 4003 0
-3985 -3991 4002 0
c (( - aux913 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -4009 0
-6 -4009 0
-6 -126 -4010 0
c (0<=( - aux913 + SATLiteral(6) + SATLiteral(126)))
126 4010 0
6 4010 0
6 126 4009 0
c (( - aux914 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -4012 0
-21 -4012 0
-21 -111 -4013 0
c (0<=( - aux914 + SATLiteral(21) + SATLiteral(111)))
111 4013 0
21 4013 0
21 111 4012 0
c (( - aux915 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -4015 0
-51 -4015 0
-51 -96 -4016 0
c (0<=( - aux915 + SATLiteral(51) + SATLiteral(96)))
96 4016 0
51 4016 0
51 96 4015 0
c (( - aux916 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -4018 0
-66 -4018 0
-66 -81 -4019 0
c (0<=( - aux916 + SATLiteral(66) + SATLiteral(81)))
81 4019 0
66 4019 0
66 81 4018 0
c ((aux916 - aux917 + SATLiteral(36))<=0)
4018 -4021 0
4019 -4022 0
-36 -4021 0
-36 4018 -4022 0
-36 4019 -4024 0
c (0<=(aux916 - aux917 + SATLiteral(36)))
-4019 4024 0
-4018 4022 0
36 4024 0
36 -4019 4022 0
36 -4018 4021 0
c ((aux913 + aux915 - aux918)<=0)
4015 -4026 0
4016 -4027 0
4009 -4026 0
4009 4015 -4027 0
4009 4016 -4029 0
4010 -4027 0
4010 4015 -4029 0
4010 4016 -4031 0
c (0<=(aux913 + aux915 - aux918))
-4016 4031 0
-4015 4029 0
-4010 4031 0
-4010 -4016 4029 0
-4010 -4015 4027 0
-4009 4029 0
-4009 -4016 4027 0
-4009 -4015 4026 0
c (( - aux919 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -4033 0
-8 -4033 0
-8 -128 -4034 0
c (0<=( - aux919 + SATLiteral(8) + SATLiteral(128)))
128 4034 0
8 4034 0
8 128 4033 0
c (( - aux920 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -4036 0
-23 -4036 0
-23 -113 -4037 0
c (0<=( - aux920 + SATLiteral(23) + SATLiteral(113)))
113 4037 0
23 4037 0
23 113 4036 0
c (( - aux921 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -4039 0
-53 -4039 0
-53 -98 -4040 0
c (0<=( - aux921 + SATLiteral(53) + SATLiteral(98)))
98 4040 0
53 4040 0
53 98 4039 0
c (( - aux922 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -4042 0
-68 -4042 0
-68 -83 -4043 0
c (0<=( - aux922 + SATLiteral(68) + SATLiteral(83)))
83 4043 0
68 4043 0
68 83 4042 0
c ((aux922 - aux923 + SATLiteral(38))<=0)
4042 -4045 0
4043 -4046 0
-38 -4045 0
-38 4042 -4046 0
-38 4043 -4048 0
c (0<=(aux922 - aux923 + SATLiteral(38)))
-4043 4048 0
-4042 4046 0
38 4048 0
38 -4043 4046 0
38 -4042 4045 0
c ((aux919 + aux921 - aux924)<=0)
4039 -4050 0
4040 -4051 0
4033 -4050 0
4033 4039 -4051 0
4033 4040 -4053 0
4034 -4051 0
4034 4039 -4053 0
4034 4040 -4055 0
c (0<=(aux919 + aux921 - aux924))
-4040 4055 0
-4039 4053 0
-4034 4055 0
-4034 -4040 4053 0
-4034 -4039 4051 0
-4033 4053 0
-4033 -4040 4051 0
-4033 -4039 4050 0
c (( - aux925 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -4057 0
-10 -4057 0
-10 -130 -4058 0
c (0<=( - aux925 + SATLiteral(10) + SATLiteral(130)))
130 4058 0
10 4058 0
10 130 4057 0
c (( - aux926 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -4060 0
-25 -4060 0
-25 -115 -4061 0
c (0<=( - aux926 + SATLiteral(25) + SATLiteral(115)))
115 4061 0
25 4061 0
25 115 4060 0
c (( - aux927 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -4063 0
-55 -4063 0
-55 -100 -4064 0
c (0<=( - aux927 + SATLiteral(55) + SATLiteral(100)))
100 4064 0
55 4064 0
55 100 4063 0
c (( - aux928 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -4066 0
-70 -4066 0
-70 -85 -4067 0
c (0<=( - aux928 + SATLiteral(70) + SATLiteral(85)))
85 4067 0
70 4067 0
70 85 4066 0
c ((aux928 - aux929 + SATLiteral(40))<=0)
4066 -4069 0
4067 -4070 0
-40 -4069 0
-40 4066 -4070 0
-40 4067 -4072 0
c (0<=(aux928 - aux929 + SATLiteral(40)))
-4067 4072 0
-4066 4070 0
40 4072 0
40 -4067 4070 0
40 -4066 4069 0
c ((aux925 + aux927 - aux930)<=0)
4063 -4074 0
4064 -4075 0
4057 -4074 0
4057 4063 -4075 0
4057 4064 -4077 0
4058 -4075 0
4058 4063 -4077 0
4058 4064 -4079 0
c (0<=(aux925 + aux927 - aux930))
-4064 4079 0
-4063 4077 0
-4058 4079 0
-4058 -4064 4077 0
-4058 -4063 4075 0
-4057 4077 0
-4057 -4064 4075 0
-4057 -4063 4074 0
c (( - aux931 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -4081 0
-12 -4081 0
-12 -132 -4082 0
c (0<=( - aux931 + SATLiteral(12) + SATLiteral(132)))
132 4082 0
12 4082 0
12 132 4081 0
c (( - aux932 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -4084 0
-27 -4084 0
-27 -117 -4085 0
c (0<=( - aux932 + SATLiteral(27) + SATLiteral(117)))
117 4085 0
27 4085 0
27 117 4084 0
c (( - aux933 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -4087 0
-57 -4087 0
-57 -102 -4088 0
c (0<=( - aux933 + SATLiteral(57) + SATLiteral(102)))
102 4088 0
57 4088 0
57 102 4087 0
c (( - aux934 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -4090 0
-72 -4090 0
-72 -87 -4091 0
c (0<=( - aux934 + SATLiteral(72) + SATLiteral(87)))
87 4091 0
72 4091 0
72 87 4090 0
c ((aux934 - aux935 + SATLiteral(42))<=0)
4090 -4093 0
4091 -4094 0
-42 -4093 0
-42 4090 -4094 0
-42 4091 -4096 0
c (0<=(aux934 - aux935 + SATLiteral(42)))
-4091 4096 0
-4090 4094 0
42 4096 0
42 -4091 4094 0
42 -4090 4093 0
c ((aux931 + aux933 - aux936)<=0)
4087 -4098 0
4088 -4099 0
4081 -4098 0
4081 4087 -4099 0
4081 4088 -4101 0
4082 -4099 0
4082 4087 -4101 0
4082 4088 -4103 0
c (0<=(aux931 + aux933 - aux936))
-4088 4103 0
-4087 4101 0
-4082 4103 0
-4082 -4088 4101 0
-4082 -4087 4099 0
-4081 4101 0
-4081 -4088 4099 0
-4081 -4087 4098 0
c (( - aux937 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -4105 0
-14 -4105 0
-14 -134 -4106 0
c (0<=( - aux937 + SATLiteral(14) + SATLiteral(134)))
134 4106 0
14 4106 0
14 134 4105 0
c (( - aux938 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -4108 0
-29 -4108 0
-29 -119 -4109 0
c (0<=( - aux938 + SATLiteral(29) + SATLiteral(119)))
119 4109 0
29 4109 0
29 119 4108 0
c (( - aux939 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -4111 0
-59 -4111 0
-59 -104 -4112 0
c (0<=( - aux939 + SATLiteral(59) + SATLiteral(104)))
104 4112 0
59 4112 0
59 104 4111 0
c (( - aux940 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -4114 0
-74 -4114 0
-74 -89 -4115 0
c (0<=( - aux940 + SATLiteral(74) + SATLiteral(89)))
89 4115 0
74 4115 0
74 89 4114 0
c ((aux940 - aux941 + SATLiteral(44))<=0)
4114 -4117 0
4115 -4118 0
-44 -4117 0
-44 4114 -4118 0
-44 4115 -4120 0
c (0<=(aux940 - aux941 + SATLiteral(44)))
-4115 4120 0
-4114 4118 0
44 4120 0
44 -4115 4118 0
44 -4114 4117 0
c ((aux937 + aux939 - aux942)<=0)
4111 -4122 0
4112 -4123 0
4105 -4122 0
4105 4111 -4123 0
4105 4112 -4125 0
4106 -4123 0
4106 4111 -4125 0
4106 4112 -4127 0
c (0<=(aux937 + aux939 - aux942))
-4112 4127 0
-4111 4125 0
-4106 4127 0
-4106 -4112 4125 0
-4106 -4111 4123 0
-4105 4125 0
-4105 -4112 4123 0
-4105 -4111 4122 0
c (( - aux943 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4129 0
-16 -4129 0
-16 -136 -4130 0
c (0<=( - aux943 + SATLiteral(16) + SATLiteral(136)))
136 4130 0
16 4130 0
16 136 4129 0
c (( - aux944 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -4132 0
-31 -4132 0
-31 -121 -4133 0
c (0<=( - aux944 + SATLiteral(31) + SATLiteral(121)))
121 4133 0
31 4133 0
31 121 4132 0
c (( - aux945 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -4135 0
-61 -4135 0
-61 -106 -4136 0
c (0<=( - aux945 + SATLiteral(61) + SATLiteral(106)))
106 4136 0
61 4136 0
61 106 4135 0
c (( - aux946 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -4138 0
-76 -4138 0
-76 -91 -4139 0
c (0<=( - aux946 + SATLiteral(76) + SATLiteral(91)))
91 4139 0
76 4139 0
76 91 4138 0
c ((aux946 - aux947 + SATLiteral(46))<=0)
4138 -4141 0
4139 -4142 0
-46 -4141 0
-46 4138 -4142 0
-46 4139 -4144 0
c (0<=(aux946 - aux947 + SATLiteral(46)))
-4139 4144 0
-4138 4142 0
46 4144 0
46 -4139 4142 0
46 -4138 4141 0
c ((aux943 + aux945 - aux948)<=0)
4135 -4146 0
4136 -4147 0
4129 -4146 0
4129 4135 -4147 0
4129 4136 -4149 0
4130 -4147 0
4130 4135 -4149 0
4130 4136 -4151 0
c (0<=(aux943 + aux945 - aux948))
-4136 4151 0
-4135 4149 0
-4130 4151 0
-4130 -4136 4149 0
-4130 -4135 4147 0
-4129 4149 0
-4129 -4136 4147 0
-4129 -4135 4146 0
c (( - aux949 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -4153 0
15 -4153 0
15 135 -4154 0
c (0<=( - aux949 + SATLiteral(-15) + SATLiteral(-135)))
-135 4154 0
-15 4154 0
-15 -135 4153 0
c (( - aux950 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -4156 0
30 -4156 0
30 120 -4157 0
c (0<=( - aux950 + SATLiteral(-30) + SATLiteral(-120)))
-120 4157 0
-30 4157 0
-30 -120 4156 0
c (( - aux951 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -4159 0
60 -4159 0
60 105 -4160 0
c (0<=( - aux951 + SATLiteral(-60) + SATLiteral(-105)))
-105 4160 0
-60 4160 0
-60 -105 4159 0
c (( - aux952 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -4162 0
75 -4162 0
75 90 -4163 0
c (0<=( - aux952 + SATLiteral(-75) + SATLiteral(-90)))
-90 4163 0
-75 4163 0
-75 -90 4162 0
c ((aux952 - aux953 + SATLiteral(-45))<=0)
4162 -4165 0
4163 -4166 0
45 -4165 0
45 4162 -4166 0
45 4163 -4168 0
c (0<=(aux952 - aux953 + SATLiteral(-45)))
-4163 4168 0
-4162 4166 0
-45 4168 0
-45 -4163 4166 0
-45 -4162 4165 0
c ((aux949 + aux951 - aux954)<=0)
4159 -4170 0
4160 -4171 0
4153 -4170 0
4153 4159 -4171 0
4153 4160 -4173 0
4154 -4171 0
4154 4159 -4173 0
4154 4160 -4175 0
c (0<=(aux949 + aux951 - aux954))
-4160 4175 0
-4159 4173 0
-4154 4175 0
-4154 -4160 4173 0
-4154 -4159 4171 0
-4153 4173 0
-4153 -4160 4171 0
-4153 -4159 4170 0
c (( - aux955 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4177 0
-137 -4177 0
-137 -257 -4178 0
c (0<=( - aux955 + SATLiteral(137) + SATLiteral(257)))
257 4178 0
137 4178 0
137 257 4177 0
c (( - aux956 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4180 0
-152 -4180 0
-152 -242 -4181 0
c (0<=( - aux956 + SATLiteral(152) + SATLiteral(242)))
242 4181 0
152 4181 0
152 242 4180 0
c (( - aux957 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4183 0
-182 -4183 0
-182 -227 -4184 0
c (0<=( - aux957 + SATLiteral(182) + SATLiteral(227)))
227 4184 0
182 4184 0
182 227 4183 0
c (( - aux958 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4186 0
-197 -4186 0
-197 -212 -4187 0
c (0<=( - aux958 + SATLiteral(197) + SATLiteral(212)))
212 4187 0
197 4187 0
197 212 4186 0
c ((aux958 - aux959 + SATLiteral(167))<=0)
4186 -4189 0
4187 -4190 0
-167 -4189 0
-167 4186 -4190 0
-167 4187 -4192 0
c (0<=(aux958 - aux959 + SATLiteral(167)))
-4187 4192 0
-4186 4190 0
167 4192 0
167 -4187 4190 0
167 -4186 4189 0
c ((aux955 + aux957 - aux960)<=0)
4183 -4194 0
4184 -4195 0
4177 -4194 0
4177 4183 -4195 0
4177 4184 -4197 0
4178 -4195 0
4178 4183 -4197 0
4178 4184 -4199 0
c (0<=(aux955 + aux957 - aux960))
-4184 4199 0
-4183 4197 0
-4178 4199 0
-4178 -4184 4197 0
-4178 -4183 4195 0
-4177 4197 0
-4177 -4184 4195 0
-4177 -4183 4194 0
c (( - aux961 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4201 0
-139 -4201 0
-139 -259 -4202 0
c (0<=( - aux961 + SATLiteral(139) + SATLiteral(259)))
259 4202 0
139 4202 0
139 259 4201 0
c (( - aux962 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4204 0
-154 -4204 0
-154 -244 -4205 0
c (0<=( - aux962 + SATLiteral(154) + SATLiteral(244)))
244 4205 0
154 4205 0
154 244 4204 0
c (( - aux963 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4207 0
-184 -4207 0
-184 -229 -4208 0
c (0<=( - aux963 + SATLiteral(184) + SATLiteral(229)))
229 4208 0
184 4208 0
184 229 4207 0
c (( - aux964 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4210 0
-199 -4210 0
-199 -214 -4211 0
c (0<=( - aux964 + SATLiteral(199) + SATLiteral(214)))
214 4211 0
199 4211 0
199 214 4210 0
c ((aux964 - aux965 + SATLiteral(169))<=0)
4210 -4213 0
4211 -4214 0
-169 -4213 0
-169 4210 -4214 0
-169 4211 -4216 0
c (0<=(aux964 - aux965 + SATLiteral(169)))
-4211 4216 0
-4210 4214 0
169 4216 0
169 -4211 4214 0
169 -4210 4213 0
c ((aux961 + aux963 - aux966)<=0)
4207 -4218 0
4208 -4219 0
4201 -4218 0
4201 4207 -4219 0
4201 4208 -4221 0
4202 -4219 0
4202 4207 -4221 0
4202 4208 -4223 0
c (0<=(aux961 + aux963 - aux966))
-4208 4223 0
-4207 4221 0
-4202 4223 0
-4202 -4208 4221 0
-4202 -4207 4219 0
-4201 4221 0
-4201 -4208 4219 0
-4201 -4207 4218 0
c (( - aux967 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4225 0
-141 -4225 0
-141 -261 -4226 0
c (0<=( - aux967 + SATLiteral(141) + SATLiteral(261)))
261 4226 0
141 4226 0
141 261 4225 0
c (( - aux968 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4228 0
-156 -4228 0
-156 -246 -4229 0
c (0<=( - aux968 + SATLiteral(156) + SATLiteral(246)))
246 4229 0
156 4229 0
156 246 4228 0
c (( - aux969 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4231 0
-186 -4231 0
-186 -231 -4232 0
c (0<=( - aux969 + SATLiteral(186) + SATLiteral(231)))
231 4232 0
186 4232 0
186 231 4231 0
c (( - aux970 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4234 0
-201 -4234 0
-201 -216 -4235 0
c (0<=( - aux970 + SATLiteral(201) + SATLiteral(216)))
216 4235 0
201 4235 0
201 216 4234 0
c ((aux970 - aux971 + SATLiteral(171))<=0)
4234 -4237 0
4235 -4238 0
-171 -4237 0
-171 4234 -4238 0
-171 4235 -4240 0
c (0<=(aux970 - aux971 + SATLiteral(171)))
-4235 4240 0
-4234 4238 0
171 4240 0
171 -4235 4238 0
171 -4234 4237 0
c ((aux967 + aux969 - aux972)<=0)
4231 -4242 0
4232 -4243 0
4225 -4242 0
4225 4231 -4243 0
4225 4232 -4245 0
4226 -4243 0
4226 4231 -4245 0
4226 4232 -4247 0
c (0<=(aux967 + aux969 - aux972))
-4232 4247 0
-4231 4245 0
-4226 4247 0
-4226 -4232 4245 0
-4226 -4231 4243 0
-4225 4245 0
-4225 -4232 4243 0
-4225 -4231 4242 0
c (( - aux973 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4249 0
-143 -4249 0
-143 -263 -4250 0
c (0<=( - aux973 + SATLiteral(143) + SATLiteral(263)))
263 4250 0
143 4250 0
143 263 4249 0
c (( - aux974 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4252 0
-158 -4252 0
-158 -248 -4253 0
c (0<=( - aux974 + SATLiteral(158) + SATLiteral(248)))
248 4253 0
158 4253 0
158 248 4252 0
c (( - aux975 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4255 0
-188 -4255 0
-188 -233 -4256 0
c (0<=( - aux975 + SATLiteral(188) + SATLiteral(233)))
233 4256 0
188 4256 0
188 233 4255 0
c (( - aux976 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4258 0
-203 -4258 0
-203 -218 -4259 0
c (0<=( - aux976 + SATLiteral(203) + SATLiteral(218)))
218 4259 0
203 4259 0
203 218 4258 0
c ((aux976 - aux977 + SATLiteral(173))<=0)
4258 -4261 0
4259 -4262 0
-173 -4261 0
-173 4258 -4262 0
-173 4259 -4264 0
c (0<=(aux976 - aux977 + SATLiteral(173)))
-4259 4264 0
-4258 4262 0
173 4264 0
173 -4259 4262 0
173 -4258 4261 0
c ((aux973 + aux975 - aux978)<=0)
4255 -4266 0
4256 -4267 0
4249 -4266 0
4249 4255 -4267 0
4249 4256 -4269 0
4250 -4267 0
4250 4255 -4269 0
4250 4256 -4271 0
c (0<=(aux973 + aux975 - aux978))
-4256 4271 0
-4255 4269 0
-4250 4271 0
-4250 -4256 4269 0
-4250 -4255 4267 0
-4249 4269 0
-4249 -4256 4267 0
-4249 -4255 4266 0
c (( - aux979 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4273 0
-145 -4273 0
-145 -265 -4274 0
c (0<=( - aux979 + SATLiteral(145) + SATLiteral(265)))
265 4274 0
145 4274 0
145 265 4273 0
c (( - aux980 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4276 0
-160 -4276 0
-160 -250 -4277 0
c (0<=( - aux980 + SATLiteral(160) + SATLiteral(250)))
250 4277 0
160 4277 0
160 250 4276 0
c (( - aux981 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4279 0
-190 -4279 0
-190 -235 -4280 0
c (0<=( - aux981 + SATLiteral(190) + SATLiteral(235)))
235 4280 0
190 4280 0
190 235 4279 0
c (( - aux982 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4282 0
-205 -4282 0
-205 -220 -4283 0
c (0<=( - aux982 + SATLiteral(205) + SATLiteral(220)))
220 4283 0
205 4283 0
205 220 4282 0
c ((aux982 - aux983 + SATLiteral(175))<=0)
4282 -4285 0
4283 -4286 0
-175 -4285 0
-175 4282 -4286 0
-175 4283 -4288 0
c (0<=(aux982 - aux983 + SATLiteral(175)))
-4283 4288 0
-4282 4286 0
175 4288 0
175 -4283 4286 0
175 -4282 4285 0
c ((aux979 + aux981 - aux984)<=0)
4279 -4290 0
4280 -4291 0
4273 -4290 0
4273 4279 -4291 0
4273 4280 -4293 0
4274 -4291 0
4274 4279 -4293 0
4274 4280 -4295 0
c (0<=(aux979 + aux981 - aux984))
-4280 4295 0
-4279 4293 0
-4274 4295 0
-4274 -4280 4293 0
-4274 -4279 4291 0
-4273 4293 0
-4273 -4280 4291 0
-4273 -4279 4290 0
c (( - aux985 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4297 0
-147 -4297 0
-147 -267 -4298 0
c (0<=( - aux985 + SATLiteral(147) + SATLiteral(267)))
267 4298 0
147 4298 0
147 267 4297 0
c (( - aux986 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4300 0
-162 -4300 0
-162 -252 -4301 0
c (0<=( - aux986 + SATLiteral(162) + SATLiteral(252)))
252 4301 0
162 4301 0
162 252 4300 0
c (( - aux987 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4303 0
-192 -4303 0
-192 -237 -4304 0
c (0<=( - aux987 + SATLiteral(192) + SATLiteral(237)))
237 4304 0
192 4304 0
192 237 4303 0
c (( - aux988 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4306 0
-207 -4306 0
-207 -222 -4307 0
c (0<=( - aux988 + SATLiteral(207) + SATLiteral(222)))
222 4307 0
207 4307 0
207 222 4306 0
c ((aux988 - aux989 + SATLiteral(177))<=0)
4306 -4309 0
4307 -4310 0
-177 -4309 0
-177 4306 -4310 0
-177 4307 -4312 0
c (0<=(aux988 - aux989 + SATLiteral(177)))
-4307 4312 0
-4306 4310 0
177 4312 0
177 -4307 4310 0
177 -4306 4309 0
c ((aux985 + aux987 - aux990)<=0)
4303 -4314 0
4304 -4315 0
4297 -4314 0
4297 4303 -4315 0
4297 4304 -4317 0
4298 -4315 0
4298 4303 -4317 0
4298 4304 -4319 0
c (0<=(aux985 + aux987 - aux990))
-4304 4319 0
-4303 4317 0
-4298 4319 0
-4298 -4304 4317 0
-4298 -4303 4315 0
-4297 4317 0
-4297 -4304 4315 0
-4297 -4303 4314 0
c (( - aux991 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4321 0
-149 -4321 0
-149 -269 -4322 0
c (0<=( - aux991 + SATLiteral(149) + SATLiteral(269)))
269 4322 0
149 4322 0
149 269 4321 0
c (( - aux992 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4324 0
-164 -4324 0
-164 -254 -4325 0
c (0<=( - aux992 + SATLiteral(164) + SATLiteral(254)))
254 4325 0
164 4325 0
164 254 4324 0
c (( - aux993 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4327 0
-194 -4327 0
-194 -239 -4328 0
c (0<=( - aux993 + SATLiteral(194) + SATLiteral(239)))
239 4328 0
194 4328 0
194 239 4327 0
c (( - aux994 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4330 0
-209 -4330 0
-209 -224 -4331 0
c (0<=( - aux994 + SATLiteral(209) + SATLiteral(224)))
224 4331 0
209 4331 0
209 224 4330 0
c ((aux994 - aux995 + SATLiteral(179))<=0)
4330 -4333 0
4331 -4334 0
-179 -4333 0
-179 4330 -4334 0
-179 4331 -4336 0
c (0<=(aux994 - aux995 + SATLiteral(179)))
-4331 4336 0
-4330 4334 0
179 4336 0
179 -4331 4334 0
179 -4330 4333 0
c ((aux991 + aux993 - aux996)<=0)
4327 -4338 0
4328 -4339 0
4321 -4338 0
4321 4327 -4339 0
4321 4328 -4341 0
4322 -4339 0
4322 4327 -4341 0
4322 4328 -4343 0
c (0<=(aux991 + aux993 - aux996))
-4328 4343 0
-4327 4341 0
-4322 4343 0
-4322 -4328 4341 0
-4322 -4327 4339 0
-4321 4341 0
-4321 -4328 4339 0
-4321 -4327 4338 0
c (( - aux997 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4345 0
-151 -4345 0
-151 -271 -4346 0
c (0<=( - aux997 + SATLiteral(151) + SATLiteral(271)))
271 4346 0
151 4346 0
151 271 4345 0
c (( - aux998 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4348 0
-166 -4348 0
-166 -256 -4349 0
c (0<=( - aux998 + SATLiteral(166) + SATLiteral(256)))
256 4349 0
166 4349 0
166 256 4348 0
c (( - aux999 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4351 0
-196 -4351 0
-196 -241 -4352 0
c (0<=( - aux999 + SATLiteral(196) + SATLiteral(241)))
241 4352 0
196 4352 0
196 241 4351 0
c (( - aux1000 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4354 0
-211 -4354 0
-211 -226 -4355 0
c (0<=( - aux1000 + SATLiteral(211) + SATLiteral(226)))
226 4355 0
211 4355 0
211 226 4354 0
c ((aux1000 - aux1001 + SATLiteral(181))<=0)
4354 -4357 0
4355 -4358 0
-181 -4357 0
-181 4354 -4358 0
-181 4355 -4360 0
c (0<=(aux1000 - aux1001 + SATLiteral(181)))
-4355 4360 0
-4354 4358 0
181 4360 0
181 -4355 4358 0
181 -4354 4357 0
c ((aux997 + aux999 - aux1002)<=0)
4351 -4362 0
4352 -4363 0
4345 -4362 0
4345 4351 -4363 0
4345 4352 -4365 0
4346 -4363 0
4346 4351 -4365 0
4346 4352 -4367 0
c (0<=(aux997 + aux999 - aux1002))
-4352 4367 0
-4351 4365 0
-4346 4367 0
-4346 -4352 4365 0
-4346 -4351 4363 0
-4345 4365 0
-4345 -4352 4363 0
-4345 -4351 4362 0
c (( - aux1003 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4369 0
150 -4369 0
150 270 -4370 0
c (0<=( - aux1003 + SATLiteral(-150) + SATLiteral(-270)))
-270 4370 0
-150 4370 0
-150 -270 4369 0
c (( - aux1004 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4372 0
165 -4372 0
165 255 -4373 0
c (0<=( - aux1004 + SATLiteral(-165) + SATLiteral(-255)))
-255 4373 0
-165 4373 0
-165 -255 4372 0
c (( - aux1005 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4375 0
195 -4375 0
195 240 -4376 0
c (0<=( - aux1005 + SATLiteral(-195) + SATLiteral(-240)))
-240 4376 0
-195 4376 0
-195 -240 4375 0
c (( - aux1006 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4378 0
210 -4378 0
210 225 -4379 0
c (0<=( - aux1006 + SATLiteral(-210) + SATLiteral(-225)))
-225 4379 0
-210 4379 0
-210 -225 4378 0
c ((aux1006 - aux1007 + SATLiteral(-180))<=0)
4378 -4381 0
4379 -4382 0
180 -4381 0
180 4378 -4382 0
180 4379 -4384 0
c (0<=(aux1006 - aux1007 + SATLiteral(-180)))
-4379 4384 0
-4378 4382 0
-180 4384 0
-180 -4379 4382 0
-180 -4378 4381 0
c ((aux1003 + aux1005 - aux1008)<=0)
4375 -4386 0
4376 -4387 0
4369 -4386 0
4369 4375 -4387 0
4369 4376 -4389 0
4370 -4387 0
4370 4375 -4389 0
4370 4376 -4391 0
c (0<=(aux1003 + aux1005 - aux1008))
-4376 4391 0
-4375 4389 0
-4370 4391 0
-4370 -4376 4389 0
-4370 -4375 4387 0
-4369 4389 0
-4369 -4376 4387 0
-4369 -4375 4386 0
c ((SATLiteral(272) + SATLiteral(392) - aux1009)<=0)
-392 -4393 0
-272 -4393 0
-272 -392 -4394 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1009))
392 4394 0
272 4394 0
272 392 4393 0
c ((SATLiteral(287) + SATLiteral(377) - aux1010)<=0)
-377 -4396 0
-287 -4396 0
-287 -377 -4397 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1010))
377 4397 0
287 4397 0
287 377 4396 0
c ((SATLiteral(317) + SATLiteral(362) - aux1011)<=0)
-362 -4399 0
-317 -4399 0
-317 -362 -4400 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1011))
362 4400 0
317 4400 0
317 362 4399 0
c ((SATLiteral(332) + SATLiteral(347) - aux1012)<=0)
-347 -4402 0
-332 -4402 0
-332 -347 -4403 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1012))
347 4403 0
332 4403 0
332 347 4402 0
c ((SATLiteral(302) + aux1012 - aux1013)<=0)
4402 -4405 0
4403 -4406 0
-302 -4405 0
-302 4402 -4406 0
-302 4403 -4408 0
c (0<=(SATLiteral(302) + aux1012 - aux1013))
-4403 4408 0
-4402 4406 0
302 4408 0
302 -4403 4406 0
302 -4402 4405 0
c ((aux1009 + aux1011 - aux1014)<=0)
4399 -4410 0
4400 -4411 0
4393 -4410 0
4393 4399 -4411 0
4393 4400 -4413 0
4394 -4411 0
4394 4399 -4413 0
4394 4400 -4415 0
c (0<=(aux1009 + aux1011 - aux1014))
-4400 4415 0
-4399 4413 0
-4394 4415 0
-4394 -4400 4413 0
-4394 -4399 4411 0
-4393 4413 0
-4393 -4400 4411 0
-4393 -4399 4410 0
c ((SATLiteral(274) + SATLiteral(394) - aux1015)<=0)
-394 -4417 0
-274 -4417 0
-274 -394 -4418 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1015))
394 4418 0
274 4418 0
274 394 4417 0
c ((SATLiteral(289) + SATLiteral(379) - aux1016)<=0)
-379 -4420 0
-289 -4420 0
-289 -379 -4421 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1016))
379 4421 0
289 4421 0
289 379 4420 0
c ((SATLiteral(319) + SATLiteral(364) - aux1017)<=0)
-364 -4423 0
-319 -4423 0
-319 -364 -4424 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1017))
364 4424 0
319 4424 0
319 364 4423 0
c ((SATLiteral(334) + SATLiteral(349) - aux1018)<=0)
-349 -4426 0
-334 -4426 0
-334 -349 -4427 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1018))
349 4427 0
334 4427 0
334 349 4426 0
c ((SATLiteral(304) + aux1018 - aux1019)<=0)
4426 -4429 0
4427 -4430 0
-304 -4429 0
-304 4426 -4430 0
-304 4427 -4432 0
c (0<=(SATLiteral(304) + aux1018 - aux1019))
-4427 4432 0
-4426 4430 0
304 4432 0
304 -4427 4430 0
304 -4426 4429 0
c ((aux1015 + aux1017 - aux1020)<=0)
4423 -4434 0
4424 -4435 0
4417 -4434 0
4417 4423 -4435 0
4417 4424 -4437 0
4418 -4435 0
4418 4423 -4437 0
4418 4424 -4439 0
c (0<=(aux1015 + aux1017 - aux1020))
-4424 4439 0
-4423 4437 0
-4418 4439 0
-4418 -4424 4437 0
-4418 -4423 4435 0
-4417 4437 0
-4417 -4424 4435 0
-4417 -4423 4434 0
c ((SATLiteral(276) + SATLiteral(396) - aux1021)<=0)
-396 -4441 0
-276 -4441 0
-276 -396 -4442 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1021))
396 4442 0
276 4442 0
276 396 4441 0
c ((SATLiteral(291) + SATLiteral(381) - aux1022)<=0)
-381 -4444 0
-291 -4444 0
-291 -381 -4445 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1022))
381 4445 0
291 4445 0
291 381 4444 0
c ((SATLiteral(321) + SATLiteral(366) - aux1023)<=0)
-366 -4447 0
-321 -4447 0
-321 -366 -4448 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1023))
366 4448 0
321 4448 0
321 366 4447 0
c ((SATLiteral(336) + SATLiteral(351) - aux1024)<=0)
-351 -4450 0
-336 -4450 0
-336 -351 -4451 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1024))
351 4451 0
336 4451 0
336 351 4450 0
c ((SATLiteral(306) + aux1024 - aux1025)<=0)
4450 -4453 0
4451 -4454 0
-306 -4453 0
-306 4450 -4454 0
-306 4451 -4456 0
c (0<=(SATLiteral(306) + aux1024 - aux1025))
-4451 4456 0
-4450 4454 0
306 4456 0
306 -4451 4454 0
306 -4450 4453 0
c ((aux1021 + aux1023 - aux1026)<=0)
4447 -4458 0
4448 -4459 0
4441 -4458 0
4441 4447 -4459 0
4441 4448 -4461 0
4442 -4459 0
4442 4447 -4461 0
4442 4448 -4463 0
c (0<=(aux1021 + aux1023 - aux1026))
-4448 4463 0
-4447 4461 0
-4442 4463 0
-4442 -4448 4461 0
-4442 -4447 4459 0
-4441 4461 0
-4441 -4448 4459 0
-4441 -4447 4458 0
c ((SATLiteral(278) + SATLiteral(398) - aux1027)<=0)
-398 -4465 0
-278 -4465 0
-278 -398 -4466 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1027))
398 4466 0
278 4466 0
278 398 4465 0
c ((SATLiteral(293) + SATLiteral(383) - aux1028)<=0)
-383 -4468 0
-293 -4468 0
-293 -383 -4469 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1028))
383 4469 0
293 4469 0
293 383 4468 0
c ((SATLiteral(323) + SATLiteral(368) - aux1029)<=0)
-368 -4471 0
-323 -4471 0
-323 -368 -4472 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1029))
368 4472 0
323 4472 0
323 368 4471 0
c ((SATLiteral(338) + SATLiteral(353) - aux1030)<=0)
-353 -4474 0
-338 -4474 0
-338 -353 -4475 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1030))
353 4475 0
338 4475 0
338 353 4474 0
c ((SATLiteral(308) + aux1030 - aux1031)<=0)
4474 -4477 0
4475 -4478 0
-308 -4477 0
-308 4474 -4478 0
-308 4475 -4480 0
c (0<=(SATLiteral(308) + aux1030 - aux1031))
-4475 4480 0
-4474 4478 0
308 4480 0
308 -4475 4478 0
308 -4474 4477 0
c ((aux1027 + aux1029 - aux1032)<=0)
4471 -4482 0
4472 -4483 0
4465 -4482 0
4465 4471 -4483 0
4465 4472 -4485 0
4466 -4483 0
4466 4471 -4485 0
4466 4472 -4487 0
c (0<=(aux1027 + aux1029 - aux1032))
-4472 4487 0
-4471 4485 0
-4466 4487 0
-4466 -4472 4485 0
-4466 -4471 4483 0
-4465 4485 0
-4465 -4472 4483 0
-4465 -4471 4482 0
c ((SATLiteral(280) + SATLiteral(400) - aux1033)<=0)
-400 -4489 0
-280 -4489 0
-280 -400 -4490 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1033))
400 4490 0
280 4490 0
280 400 4489 0
c ((SATLiteral(295) + SATLiteral(385) - aux1034)<=0)
-385 -4492 0
-295 -4492 0
-295 -385 -4493 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1034))
385 4493 0
295 4493 0
295 385 4492 0
c ((SATLiteral(325) + SATLiteral(370) - aux1035)<=0)
-370 -4495 0
-325 -4495 0
-325 -370 -4496 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1035))
370 4496 0
325 4496 0
325 370 4495 0
c ((SATLiteral(340) + SATLiteral(355) - aux1036)<=0)
-355 -4498 0
-340 -4498 0
-340 -355 -4499 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1036))
355 4499 0
340 4499 0
340 355 4498 0
c ((SATLiteral(310) + aux1036 - aux1037)<=0)
4498 -4501 0
4499 -4502 0
-310 -4501 0
-310 4498 -4502 0
-310 4499 -4504 0
c (0<=(SATLiteral(310) + aux1036 - aux1037))
-4499 4504 0
-4498 4502 0
310 4504 0
310 -4499 4502 0
310 -4498 4501 0
c ((aux1033 + aux1035 - aux1038)<=0)
4495 -4506 0
4496 -4507 0
4489 -4506 0
4489 4495 -4507 0
4489 4496 -4509 0
4490 -4507 0
4490 4495 -4509 0
4490 4496 -4511 0
c (0<=(aux1033 + aux1035 - aux1038))
-4496 4511 0
-4495 4509 0
-4490 4511 0
-4490 -4496 4509 0
-4490 -4495 4507 0
-4489 4509 0
-4489 -4496 4507 0
-4489 -4495 4506 0
c ((SATLiteral(282) + SATLiteral(402) - aux1039)<=0)
-402 -4513 0
-282 -4513 0
-282 -402 -4514 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1039))
402 4514 0
282 4514 0
282 402 4513 0
c ((SATLiteral(297) + SATLiteral(387) - aux1040)<=0)
-387 -4516 0
-297 -4516 0
-297 -387 -4517 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1040))
387 4517 0
297 4517 0
297 387 4516 0
c ((SATLiteral(327) + SATLiteral(372) - aux1041)<=0)
-372 -4519 0
-327 -4519 0
-327 -372 -4520 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1041))
372 4520 0
327 4520 0
327 372 4519 0
c ((SATLiteral(342) + SATLiteral(357) - aux1042)<=0)
-357 -4522 0
-342 -4522 0
-342 -357 -4523 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1042))
357 4523 0
342 4523 0
342 357 4522 0
c ((SATLiteral(312) + aux1042 - aux1043)<=0)
4522 -4525 0
4523 -4526 0
-312 -4525 0
-312 4522 -4526 0
-312 4523 -4528 0
c (0<=(SATLiteral(312) + aux1042 - aux1043))
-4523 4528 0
-4522 4526 0
312 4528 0
312 -4523 4526 0
312 -4522 4525 0
c ((aux1039 + aux1041 - aux1044)<=0)
4519 -4530 0
4520 -4531 0
4513 -4530 0
4513 4519 -4531 0
4513 4520 -4533 0
4514 -4531 0
4514 4519 -4533 0
4514 4520 -4535 0
c (0<=(aux1039 + aux1041 - aux1044))
-4520 4535 0
-4519 4533 0
-4514 4535 0
-4514 -4520 4533 0
-4514 -4519 4531 0
-4513 4533 0
-4513 -4520 4531 0
-4513 -4519 4530 0
c ((SATLiteral(284) + SATLiteral(404) - aux1045)<=0)
-404 -4537 0
-284 -4537 0
-284 -404 -4538 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1045))
404 4538 0
284 4538 0
284 404 4537 0
c ((SATLiteral(299) + SATLiteral(389) - aux1046)<=0)
-389 -4540 0
-299 -4540 0
-299 -389 -4541 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1046))
389 4541 0
299 4541 0
299 389 4540 0
c ((SATLiteral(329) + SATLiteral(374) - aux1047)<=0)
-374 -4543 0
-329 -4543 0
-329 -374 -4544 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1047))
374 4544 0
329 4544 0
329 374 4543 0
c ((SATLiteral(344) + SATLiteral(359) - aux1048)<=0)
-359 -4546 0
-344 -4546 0
-344 -359 -4547 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1048))
359 4547 0
344 4547 0
344 359 4546 0
c ((SATLiteral(314) + aux1048 - aux1049)<=0)
4546 -4549 0
4547 -4550 0
-314 -4549 0
-314 4546 -4550 0
-314 4547 -4552 0
c (0<=(SATLiteral(314) + aux1048 - aux1049))
-4547 4552 0
-4546 4550 0
314 4552 0
314 -4547 4550 0
314 -4546 4549 0
c ((aux1045 + aux1047 - aux1050)<=0)
4543 -4554 0
4544 -4555 0
4537 -4554 0
4537 4543 -4555 0
4537 4544 -4557 0
4538 -4555 0
4538 4543 -4557 0
4538 4544 -4559 0
c (0<=(aux1045 + aux1047 - aux1050))
-4544 4559 0
-4543 4557 0
-4538 4559 0
-4538 -4544 4557 0
-4538 -4543 4555 0
-4537 4557 0
-4537 -4544 4555 0
-4537 -4543 4554 0
c ((SATLiteral(286) + SATLiteral(406) - aux1051)<=0)
-406 -4561 0
-286 -4561 0
-286 -406 -4562 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1051))
406 4562 0
286 4562 0
286 406 4561 0
c ((SATLiteral(301) + SATLiteral(391) - aux1052)<=0)
-391 -4564 0
-301 -4564 0
-301 -391 -4565 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1052))
391 4565 0
301 4565 0
301 391 4564 0
c ((SATLiteral(331) + SATLiteral(376) - aux1053)<=0)
-376 -4567 0
-331 -4567 0
-331 -376 -4568 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1053))
376 4568 0
331 4568 0
331 376 4567 0
c ((SATLiteral(346) + SATLiteral(361) - aux1054)<=0)
-361 -4570 0
-346 -4570 0
-346 -361 -4571 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1054))
361 4571 0
346 4571 0
346 361 4570 0
c ((SATLiteral(316) + aux1054 - aux1055)<=0)
4570 -4573 0
4571 -4574 0
-316 -4573 0
-316 4570 -4574 0
-316 4571 -4576 0
c (0<=(SATLiteral(316) + aux1054 - aux1055))
-4571 4576 0
-4570 4574 0
316 4576 0
316 -4571 4574 0
316 -4570 4573 0
c ((aux1051 + aux1053 - aux1056)<=0)
4567 -4578 0
4568 -4579 0
4561 -4578 0
4561 4567 -4579 0
4561 4568 -4581 0
4562 -4579 0
4562 4567 -4581 0
4562 4568 -4583 0
c (0<=(aux1051 + aux1053 - aux1056))
-4568 4583 0
-4567 4581 0
-4562 4583 0
-4562 -4568 4581 0
-4562 -4567 4579 0
-4561 4581 0
-4561 -4568 4579 0
-4561 -4567 4578 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1057)<=0)
405 -4585 0
285 -4585 0
285 405 -4586 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1057))
-405 4586 0
-285 4586 0
-285 -405 4585 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1058)<=0)
390 -4588 0
300 -4588 0
300 390 -4589 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1058))
-390 4589 0
-300 4589 0
-300 -390 4588 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1059)<=0)
375 -4591 0
330 -4591 0
330 375 -4592 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1059))
-375 4592 0
-330 4592 0
-330 -375 4591 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1060)<=0)
360 -4594 0
345 -4594 0
345 360 -4595 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1060))
-360 4595 0
-345 4595 0
-345 -360 4594 0
c ((SATLiteral(-315) + aux1060 - aux1061)<=0)
4594 -4597 0
4595 -4598 0
315 -4597 0
315 4594 -4598 0
315 4595 -4600 0
c (0<=(SATLiteral(-315) + aux1060 - aux1061))
-4595 4600 0
-4594 4598 0
-315 4600 0
-315 -4595 4598 0
-315 -4594 4597 0
c ((aux1057 + aux1059 - aux1062)<=0)
4591 -4602 0
4592 -4603 0
4585 -4602 0
4585 4591 -4603 0
4585 4592 -4605 0
4586 -4603 0
4586 4591 -4605 0
4586 4592 -4607 0
c (0<=(aux1057 + aux1059 - aux1062))
-4592 4607 0
-4591 4605 0
-4586 4607 0
-4586 -4592 4605 0
-4586 -4591 4603 0
-4585 4605 0
-4585 -4592 4603 0
-4585 -4591 4602 0
c (( - aux1063 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4609 0
-407 -4609 0
-407 -527 -4610 0
c (0<=( - aux1063 + SATLiteral(407) + SATLiteral(527)))
527 4610 0
407 4610 0
407 527 4609 0
c (( - aux1064 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4612 0
-422 -4612 0
-422 -512 -4613 0
c (0<=( - aux1064 + SATLiteral(422) + SATLiteral(512)))
512 4613 0
422 4613 0
422 512 4612 0
c (( - aux1065 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4615 0
-452 -4615 0
-452 -497 -4616 0
c (0<=( - aux1065 + SATLiteral(452) + SATLiteral(497)))
497 4616 0
452 4616 0
452 497 4615 0
c (( - aux1066 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4618 0
-467 -4618 0
-467 -482 -4619 0
c (0<=( - aux1066 + SATLiteral(467) + SATLiteral(482)))
482 4619 0
467 4619 0
467 482 4618 0
c ((aux1066 - aux1067 + SATLiteral(437))<=0)
4618 -4621 0
4619 -4622 0
-437 -4621 0
-437 4618 -4622 0
-437 4619 -4624 0
c (0<=(aux1066 - aux1067 + SATLiteral(437)))
-4619 4624 0
-4618 4622 0
437 4624 0
437 -4619 4622 0
437 -4618 4621 0
c ((aux1063 + aux1065 - aux1068)<=0)
4615 -4626 0
4616 -4627 0
4609 -4626 0
4609 4615 -4627 0
4609 4616 -4629 0
4610 -4627 0
4610 4615 -4629 0
4610 4616 -4631 0
c (0<=(aux1063 + aux1065 - aux1068))
-4616 4631 0
-4615 4629 0
-4610 4631 0
-4610 -4616 4629 0
-4610 -4615 4627 0
-4609 4629 0
-4609 -4616 4627 0
-4609 -4615 4626 0
c (( - aux1069 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4633 0
-409 -4633 0
-409 -529 -4634 0
c (0<=( - aux1069 + SATLiteral(409) + SATLiteral(529)))
529 4634 0
409 4634 0
409 529 4633 0
c (( - aux1070 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4636 0
-424 -4636 0
-424 -514 -4637 0
c (0<=( - aux1070 + SATLiteral(424) + SATLiteral(514)))
514 4637 0
424 4637 0
424 514 4636 0
c (( - aux1071 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4639 0
-454 -4639 0
-454 -499 -4640 0
c (0<=( - aux1071 + SATLiteral(454) + SATLiteral(499)))
499 4640 0
454 4640 0
454 499 4639 0
c (( - aux1072 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4642 0
-469 -4642 0
-469 -484 -4643 0
c (0<=( - aux1072 + SATLiteral(469) + SATLiteral(484)))
484 4643 0
469 4643 0
469 484 4642 0
c ((aux1072 - aux1073 + SATLiteral(439))<=0)
4642 -4645 0
4643 -4646 0
-439 -4645 0
-439 4642 -4646 0
-439 4643 -4648 0
c (0<=(aux1072 - aux1073 + SATLiteral(439)))
-4643 4648 0
-4642 4646 0
439 4648 0
439 -4643 4646 0
439 -4642 4645 0
c ((aux1069 + aux1071 - aux1074)<=0)
4639 -4650 0
4640 -4651 0
4633 -4650 0
4633 4639 -4651 0
4633 4640 -4653 0
4634 -4651 0
4634 4639 -4653 0
4634 4640 -4655 0
c (0<=(aux1069 + aux1071 - aux1074))
-4640 4655 0
-4639 4653 0
-4634 4655 0
-4634 -4640 4653 0
-4634 -4639 4651 0
-4633 4653 0
-4633 -4640 4651 0
-4633 -4639 4650 0
c (( - aux1075 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4657 0
-411 -4657 0
-411 -531 -4658 0
c (0<=( - aux1075 + SATLiteral(411) + SATLiteral(531)))
531 4658 0
411 4658 0
411 531 4657 0
c (( - aux1076 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4660 0
-426 -4660 0
-426 -516 -4661 0
c (0<=( - aux1076 + SATLiteral(426) + SATLiteral(516)))
516 4661 0
426 4661 0
426 516 4660 0
c (( - aux1077 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4663 0
-456 -4663 0
-456 -501 -4664 0
c (0<=( - aux1077 + SATLiteral(456) + SATLiteral(501)))
501 4664 0
456 4664 0
456 501 4663 0
c (( - aux1078 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4666 0
-471 -4666 0
-471 -486 -4667 0
c (0<=( - aux1078 + SATLiteral(471) + SATLiteral(486)))
486 4667 0
471 4667 0
471 486 4666 0
c ((aux1078 - aux1079 + SATLiteral(441))<=0)
4666 -4669 0
4667 -4670 0
-441 -4669 0
-441 4666 -4670 0
-441 4667 -4672 0
c (0<=(aux1078 - aux1079 + SATLiteral(441)))
-4667 4672 0
-4666 4670 0
441 4672 0
441 -4667 4670 0
441 -4666 4669 0
c ((aux1075 + aux1077 - aux1080)<=0)
4663 -4674 0
4664 -4675 0
4657 -4674 0
4657 4663 -4675 0
4657 4664 -4677 0
4658 -4675 0
4658 4663 -4677 0
4658 4664 -4679 0
c (0<=(aux1075 + aux1077 - aux1080))
-4664 4679 0
-4663 4677 0
-4658 4679 0
-4658 -4664 4677 0
-4658 -4663 4675 0
-4657 4677 0
-4657 -4664 4675 0
-4657 -4663 4674 0
c (( - aux1081 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4681 0
-413 -4681 0
-413 -533 -4682 0
c (0<=( - aux1081 + SATLiteral(413) + SATLiteral(533)))
533 4682 0
413 4682 0
413 533 4681 0
c (( - aux1082 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4684 0
-428 -4684 0
-428 -518 -4685 0
c (0<=( - aux1082 + SATLiteral(428) + SATLiteral(518)))
518 4685 0
428 4685 0
428 518 4684 0
c (( - aux1083 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4687 0
-458 -4687 0
-458 -503 -4688 0
c (0<=( - aux1083 + SATLiteral(458) + SATLiteral(503)))
503 4688 0
458 4688 0
458 503 4687 0
c (( - aux1084 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4690 0
-473 -4690 0
-473 -488 -4691 0
c (0<=( - aux1084 + SATLiteral(473) + SATLiteral(488)))
488 4691 0
473 4691 0
473 488 4690 0
c ((aux1084 - aux1085 + SATLiteral(443))<=0)
4690 -4693 0
4691 -4694 0
-443 -4693 0
-443 4690 -4694 0
-443 4691 -4696 0
c (0<=(aux1084 - aux1085 + SATLiteral(443)))
-4691 4696 0
-4690 4694 0
443 4696 0
443 -4691 4694 0
443 -4690 4693 0
c ((aux1081 + aux1083 - aux1086)<=0)
4687 -4698 0
4688 -4699 0
4681 -4698 0
4681 4687 -4699 0
4681 4688 -4701 0
4682 -4699 0
4682 4687 -4701 0
4682 4688 -4703 0
c (0<=(aux1081 + aux1083 - aux1086))
-4688 4703 0
-4687 4701 0
-4682 4703 0
-4682 -4688 4701 0
-4682 -4687 4699 0
-4681 4701 0
-4681 -4688 4699 0
-4681 -4687 4698 0
c (( - aux1087 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4705 0
-415 -4705 0
-415 -535 -4706 0
c (0<=( - aux1087 + SATLiteral(415) + SATLiteral(535)))
535 4706 0
415 4706 0
415 535 4705 0
c (( - aux1088 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4708 0
-430 -4708 0
-430 -520 -4709 0
c (0<=( - aux1088 + SATLiteral(430) + SATLiteral(520)))
520 4709 0
430 4709 0
430 520 4708 0
c (( - aux1089 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4711 0
-460 -4711 0
-460 -505 -4712 0
c (0<=( - aux1089 + SATLiteral(460) + SATLiteral(505)))
505 4712 0
460 4712 0
460 505 4711 0
c (( - aux1090 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4714 0
-475 -4714 0
-475 -490 -4715 0
c (0<=( - aux1090 + SATLiteral(475) + SATLiteral(490)))
490 4715 0
475 4715 0
475 490 4714 0
c ((aux1090 - aux1091 + SATLiteral(445))<=0)
4714 -4717 0
4715 -4718 0
-445 -4717 0
-445 4714 -4718 0
-445 4715 -4720 0
c (0<=(aux1090 - aux1091 + SATLiteral(445)))
-4715 4720 0
-4714 4718 0
445 4720 0
445 -4715 4718 0
445 -4714 4717 0
c ((aux1087 + aux1089 - aux1092)<=0)
4711 -4722 0
4712 -4723 0
4705 -4722 0
4705 4711 -4723 0
4705 4712 -4725 0
4706 -4723 0
4706 4711 -4725 0
4706 4712 -4727 0
c (0<=(aux1087 + aux1089 - aux1092))
-4712 4727 0
-4711 4725 0
-4706 4727 0
-4706 -4712 4725 0
-4706 -4711 4723 0
-4705 4725 0
-4705 -4712 4723 0
-4705 -4711 4722 0
c (( - aux1093 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4729 0
-417 -4729 0
-417 -537 -4730 0
c (0<=( - aux1093 + SATLiteral(417) + SATLiteral(537)))
537 4730 0
417 4730 0
417 537 4729 0
c (( - aux1094 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4732 0
-432 -4732 0
-432 -522 -4733 0
c (0<=( - aux1094 + SATLiteral(432) + SATLiteral(522)))
522 4733 0
432 4733 0
432 522 4732 0
c (( - aux1095 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4735 0
-462 -4735 0
-462 -507 -4736 0
c (0<=( - aux1095 + SATLiteral(462) + SATLiteral(507)))
507 4736 0
462 4736 0
462 507 4735 0
c (( - aux1096 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4738 0
-477 -4738 0
-477 -492 -4739 0
c (0<=( - aux1096 + SATLiteral(477) + SATLiteral(492)))
492 4739 0
477 4739 0
477 492 4738 0
c ((aux1096 - aux1097 + SATLiteral(447))<=0)
4738 -4741 0
4739 -4742 0
-447 -4741 0
-447 4738 -4742 0
-447 4739 -4744 0
c (0<=(aux1096 - aux1097 + SATLiteral(447)))
-4739 4744 0
-4738 4742 0
447 4744 0
447 -4739 4742 0
447 -4738 4741 0
c ((aux1093 + aux1095 - aux1098)<=0)
4735 -4746 0
4736 -4747 0
4729 -4746 0
4729 4735 -4747 0
4729 4736 -4749 0
4730 -4747 0
4730 4735 -4749 0
4730 4736 -4751 0
c (0<=(aux1093 + aux1095 - aux1098))
-4736 4751 0
-4735 4749 0
-4730 4751 0
-4730 -4736 4749 0
-4730 -4735 4747 0
-4729 4749 0
-4729 -4736 4747 0
-4729 -4735 4746 0
c (( - aux1099 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4753 0
-419 -4753 0
-419 -539 -4754 0
c (0<=( - aux1099 + SATLiteral(419) + SATLiteral(539)))
539 4754 0
419 4754 0
419 539 4753 0
c (( - aux1100 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4756 0
-434 -4756 0
-434 -524 -4757 0
c (0<=( - aux1100 + SATLiteral(434) + SATLiteral(524)))
524 4757 0
434 4757 0
434 524 4756 0
c (( - aux1101 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4759 0
-464 -4759 0
-464 -509 -4760 0
c (0<=( - aux1101 + SATLiteral(464) + SATLiteral(509)))
509 4760 0
464 4760 0
464 509 4759 0
c (( - aux1102 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4762 0
-479 -4762 0
-479 -494 -4763 0
c (0<=( - aux1102 + SATLiteral(479) + SATLiteral(494)))
494 4763 0
479 4763 0
479 494 4762 0
c ((aux1102 - aux1103 + SATLiteral(449))<=0)
4762 -4765 0
4763 -4766 0
-449 -4765 0
-449 4762 -4766 0
-449 4763 -4768 0
c (0<=(aux1102 - aux1103 + SATLiteral(449)))
-4763 4768 0
-4762 4766 0
449 4768 0
449 -4763 4766 0
449 -4762 4765 0
c ((aux1099 + aux1101 - aux1104)<=0)
4759 -4770 0
4760 -4771 0
4753 -4770 0
4753 4759 -4771 0
4753 4760 -4773 0
4754 -4771 0
4754 4759 -4773 0
4754 4760 -4775 0
c (0<=(aux1099 + aux1101 - aux1104))
-4760 4775 0
-4759 4773 0
-4754 4775 0
-4754 -4760 4773 0
-4754 -4759 4771 0
-4753 4773 0
-4753 -4760 4771 0
-4753 -4759 4770 0
c (( - aux1105 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4777 0
-421 -4777 0
-421 -541 -4778 0
c (0<=( - aux1105 + SATLiteral(421) + SATLiteral(541)))
541 4778 0
421 4778 0
421 541 4777 0
c (( - aux1106 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4780 0
-436 -4780 0
-436 -526 -4781 0
c (0<=( - aux1106 + SATLiteral(436) + SATLiteral(526)))
526 4781 0
436 4781 0
436 526 4780 0
c (( - aux1107 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4783 0
-466 -4783 0
-466 -511 -4784 0
c (0<=( - aux1107 + SATLiteral(466) + SATLiteral(511)))
511 4784 0
466 4784 0
466 511 4783 0
c (( - aux1108 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4786 0
-481 -4786 0
-481 -496 -4787 0
c (0<=( - aux1108 + SATLiteral(481) + SATLiteral(496)))
496 4787 0
481 4787 0
481 496 4786 0
c ((aux1108 - aux1109 + SATLiteral(451))<=0)
4786 -4789 0
4787 -4790 0
-451 -4789 0
-451 4786 -4790 0
-451 4787 -4792 0
c (0<=(aux1108 - aux1109 + SATLiteral(451)))
-4787 4792 0
-4786 4790 0
451 4792 0
451 -4787 4790 0
451 -4786 4789 0
c ((aux1105 + aux1107 - aux1110)<=0)
4783 -4794 0
4784 -4795 0
4777 -4794 0
4777 4783 -4795 0
4777 4784 -4797 0
4778 -4795 0
4778 4783 -4797 0
4778 4784 -4799 0
c (0<=(aux1105 + aux1107 - aux1110))
-4784 4799 0
-4783 4797 0
-4778 4799 0
-4778 -4784 4797 0
-4778 -4783 4795 0
-4777 4797 0
-4777 -4784 4795 0
-4777 -4783 4794 0
c (( - aux1111 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4801 0
420 -4801 0
420 540 -4802 0
c (0<=( - aux1111 + SATLiteral(-420) + SATLiteral(-540)))
-540 4802 0
-420 4802 0
-420 -540 4801 0
c (( - aux1112 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4804 0
435 -4804 0
435 525 -4805 0
c (0<=( - aux1112 + SATLiteral(-435) + SATLiteral(-525)))
-525 4805 0
-435 4805 0
-435 -525 4804 0
c (( - aux1113 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4807 0
465 -4807 0
465 510 -4808 0
c (0<=( - aux1113 + SATLiteral(-465) + SATLiteral(-510)))
-510 4808 0
-465 4808 0
-465 -510 4807 0
c (( - aux1114 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4810 0
480 -4810 0
480 495 -4811 0
c (0<=( - aux1114 + SATLiteral(-480) + SATLiteral(-495)))
-495 4811 0
-480 4811 0
-480 -495 4810 0
c ((aux1114 - aux1115 + SATLiteral(-450))<=0)
4810 -4813 0
4811 -4814 0
450 -4813 0
450 4810 -4814 0
450 4811 -4816 0
c (0<=(aux1114 - aux1115 + SATLiteral(-450)))
-4811 4816 0
-4810 4814 0
-450 4816 0
-450 -4811 4814 0
-450 -4810 4813 0
c ((aux1111 + aux1113 - aux1116)<=0)
4807 -4818 0
4808 -4819 0
4801 -4818 0
4801 4807 -4819 0
4801 4808 -4821 0
4802 -4819 0
4802 4807 -4821 0
4802 4808 -4823 0
c (0<=(aux1111 + aux1113 - aux1116))
-4808 4823 0
-4807 4821 0
-4802 4823 0
-4802 -4808 4821 0
-4802 -4807 4819 0
-4801 4821 0
-4801 -4808 4819 0
-4801 -4807 4818 0
c (( - aux1117 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4825 0
-542 -4825 0
-542 -662 -4826 0
c (0<=( - aux1117 + SATLiteral(542) + SATLiteral(662)))
662 4826 0
542 4826 0
542 662 4825 0
c (( - aux1118 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4828 0
-557 -4828 0
-557 -647 -4829 0
c (0<=( - aux1118 + SATLiteral(557) + SATLiteral(647)))
647 4829 0
557 4829 0
557 647 4828 0
c (( - aux1119 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4831 0
-587 -4831 0
-587 -632 -4832 0
c (0<=( - aux1119 + SATLiteral(587) + SATLiteral(632)))
632 4832 0
587 4832 0
587 632 4831 0
c (( - aux1120 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4834 0
-602 -4834 0
-602 -617 -4835 0
c (0<=( - aux1120 + SATLiteral(602) + SATLiteral(617)))
617 4835 0
602 4835 0
602 617 4834 0
c ((aux1120 - aux1121 + SATLiteral(572))<=0)
4834 -4837 0
4835 -4838 0
-572 -4837 0
-572 4834 -4838 0
-572 4835 -4840 0
c (0<=(aux1120 - aux1121 + SATLiteral(572)))
-4835 4840 0
-4834 4838 0
572 4840 0
572 -4835 4838 0
572 -4834 4837 0
c ((aux1117 + aux1119 - aux1122)<=0)
4831 -4842 0
4832 -4843 0
4825 -4842 0
4825 4831 -4843 0
4825 4832 -4845 0
4826 -4843 0
4826 4831 -4845 0
4826 4832 -4847 0
c (0<=(aux1117 + aux1119 - aux1122))
-4832 4847 0
-4831 4845 0
-4826 4847 0
-4826 -4832 4845 0
-4826 -4831 4843 0
-4825 4845 0
-4825 -4832 4843 0
-4825 -4831 4842 0
c (( - aux1123 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4849 0
-544 -4849 0
-544 -664 -4850 0
c (0<=( - aux1123 + SATLiteral(544) + SATLiteral(664)))
664 4850 0
544 4850 0
544 664 4849 0
c (( - aux1124 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4852 0
-559 -4852 0
-559 -649 -4853 0
c (0<=( - aux1124 + SATLiteral(559) + SATLiteral(649)))
649 4853 0
559 4853 0
559 649 4852 0
c (( - aux1125 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4855 0
-589 -4855 0
-589 -634 -4856 0
c (0<=( - aux1125 + SATLiteral(589) + SATLiteral(634)))
634 4856 0
589 4856 0
589 634 4855 0
c (( - aux1126 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4858 0
-604 -4858 0
-604 -619 -4859 0
c (0<=( - aux1126 + SATLiteral(604) + SATLiteral(619)))
619 4859 0
604 4859 0
604 619 4858 0
c ((aux1126 - aux1127 + SATLiteral(574))<=0)
4858 -4861 0
4859 -4862 0
-574 -4861 0
-574 4858 -4862 0
-574 4859 -4864 0
c (0<=(aux1126 - aux1127 + SATLiteral(574)))
-4859 4864 0
-4858 4862 0
574 4864 0
574 -4859 4862 0
574 -4858 4861 0
c ((aux1123 + aux1125 - aux1128)<=0)
4855 -4866 0
4856 -4867 0
4849 -4866 0
4849 4855 -4867 0
4849 4856 -4869 0
4850 -4867 0
4850 4855 -4869 0
4850 4856 -4871 0
c (0<=(aux1123 + aux1125 - aux1128))
-4856 4871 0
-4855 4869 0
-4850 4871 0
-4850 -4856 4869 0
-4850 -4855 4867 0
-4849 4869 0
-4849 -4856 4867 0
-4849 -4855 4866 0
c (( - aux1129 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4873 0
-546 -4873 0
-546 -666 -4874 0
c (0<=( - aux1129 + SATLiteral(546) + SATLiteral(666)))
666 4874 0
546 4874 0
546 666 4873 0
c (( - aux1130 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4876 0
-561 -4876 0
-561 -651 -4877 0
c (0<=( - aux1130 + SATLiteral(561) + SATLiteral(651)))
651 4877 0
561 4877 0
561 651 4876 0
c (( - aux1131 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4879 0
-591 -4879 0
-591 -636 -4880 0
c (0<=( - aux1131 + SATLiteral(591) + SATLiteral(636)))
636 4880 0
591 4880 0
591 636 4879 0
c (( - aux1132 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4882 0
-606 -4882 0
-606 -621 -4883 0
c (0<=( - aux1132 + SATLiteral(606) + SATLiteral(621)))
621 4883 0
606 4883 0
606 621 4882 0
c ((aux1132 - aux1133 + SATLiteral(576))<=0)
4882 -4885 0
4883 -4886 0
-576 -4885 0
-576 4882 -4886 0
-576 4883 -4888 0
c (0<=(aux1132 - aux1133 + SATLiteral(576)))
-4883 4888 0
-4882 4886 0
576 4888 0
576 -4883 4886 0
576 -4882 4885 0
c ((aux1129 + aux1131 - aux1134)<=0)
4879 -4890 0
4880 -4891 0
4873 -4890 0
4873 4879 -4891 0
4873 4880 -4893 0
4874 -4891 0
4874 4879 -4893 0
4874 4880 -4895 0
c (0<=(aux1129 + aux1131 - aux1134))
-4880 4895 0
-4879 4893 0
-4874 4895 0
-4874 -4880 4893 0
-4874 -4879 4891 0
-4873 4893 0
-4873 -4880 4891 0
-4873 -4879 4890 0
c (( - aux1135 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4897 0
-548 -4897 0
-548 -668 -4898 0
c (0<=( - aux1135 + SATLiteral(548) + SATLiteral(668)))
668 4898 0
548 4898 0
548 668 4897 0
c (( - aux1136 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4900 0
-563 -4900 0
-563 -653 -4901 0
c (0<=( - aux1136 + SATLiteral(563) + SATLiteral(653)))
653 4901 0
563 4901 0
563 653 4900 0
c (( - aux1137 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4903 0
-593 -4903 0
-593 -638 -4904 0
c (0<=( - aux1137 + SATLiteral(593) + SATLiteral(638)))
638 4904 0
593 4904 0
593 638 4903 0
c (( - aux1138 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4906 0
-608 -4906 0
-608 -623 -4907 0
c (0<=( - aux1138 + SATLiteral(608) + SATLiteral(623)))
623 4907 0
608 4907 0
608 623 4906 0
c ((aux1138 - aux1139 + SATLiteral(578))<=0)
4906 -4909 0
4907 -4910 0
-578 -4909 0
-578 4906 -4910 0
-578 4907 -4912 0
c (0<=(aux1138 - aux1139 + SATLiteral(578)))
-4907 4912 0
-4906 4910 0
578 4912 0
578 -4907 4910 0
578 -4906 4909 0
c ((aux1135 + aux1137 - aux1140)<=0)
4903 -4914 0
4904 -4915 0
4897 -4914 0
4897 4903 -4915 0
4897 4904 -4917 0
4898 -4915 0
4898 4903 -4917 0
4898 4904 -4919 0
c (0<=(aux1135 + aux1137 - aux1140))
-4904 4919 0
-4903 4917 0
-4898 4919 0
-4898 -4904 4917 0
-4898 -4903 4915 0
-4897 4917 0
-4897 -4904 4915 0
-4897 -4903 4914 0
c (( - aux1141 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4921 0
-550 -4921 0
-550 -670 -4922 0
c (0<=( - aux1141 + SATLiteral(550) + SATLiteral(670)))
670 4922 0
550 4922 0
550 670 4921 0
c (( - aux1142 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4924 0
-565 -4924 0
-565 -655 -4925 0
c (0<=( - aux1142 + SATLiteral(565) + SATLiteral(655)))
655 4925 0
565 4925 0
565 655 4924 0
c (( - aux1143 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4927 0
-595 -4927 0
-595 -640 -4928 0
c (0<=( - aux1143 + SATLiteral(595) + SATLiteral(640)))
640 4928 0
595 4928 0
595 640 4927 0
c (( - aux1144 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4930 0
-610 -4930 0
-610 -625 -4931 0
c (0<=( - aux1144 + SATLiteral(610) + SATLiteral(625)))
625 4931 0
610 4931 0
610 625 4930 0
c ((aux1144 - aux1145 + SATLiteral(580))<=0)
4930 -4933 0
4931 -4934 0
-580 -4933 0
-580 4930 -4934 0
-580 4931 -4936 0
c (0<=(aux1144 - aux1145 + SATLiteral(580)))
-4931 4936 0
-4930 4934 0
580 4936 0
580 -4931 4934 0
580 -4930 4933 0
c ((aux1141 + aux1143 - aux1146)<=0)
4927 -4938 0
4928 -4939 0
4921 -4938 0
4921 4927 -4939 0
4921 4928 -4941 0
4922 -4939 0
4922 4927 -4941 0
4922 4928 -4943 0
c (0<=(aux1141 + aux1143 - aux1146))
-4928 4943 0
-4927 4941 0
-4922 4943 0
-4922 -4928 4941 0
-4922 -4927 4939 0
-4921 4941 0
-4921 -4928 4939 0
-4921 -4927 4938 0
c (( - aux1147 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4945 0
-552 -4945 0
-552 -672 -4946 0
c (0<=( - aux1147 + SATLiteral(552) + SATLiteral(672)))
672 4946 0
552 4946 0
552 672 4945 0
c (( - aux1148 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4948 0
-567 -4948 0
-567 -657 -4949 0
c (0<=( - aux1148 + SATLiteral(567) + SATLiteral(657)))
657 4949 0
567 4949 0
567 657 4948 0
c (( - aux1149 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4951 0
-597 -4951 0
-597 -642 -4952 0
c (0<=( - aux1149 + SATLiteral(597) + SATLiteral(642)))
642 4952 0
597 4952 0
597 642 4951 0
c (( - aux1150 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4954 0
-612 -4954 0
-612 -627 -4955 0
c (0<=( - aux1150 + SATLiteral(612) + SATLiteral(627)))
627 4955 0
612 4955 0
612 627 4954 0
c ((aux1150 - aux1151 + SATLiteral(582))<=0)
4954 -4957 0
4955 -4958 0
-582 -4957 0
-582 4954 -4958 0
-582 4955 -4960 0
c (0<=(aux1150 - aux1151 + SATLiteral(582)))
-4955 4960 0
-4954 4958 0
582 4960 0
582 -4955 4958 0
582 -4954 4957 0
c ((aux1147 + aux1149 - aux1152)<=0)
4951 -4962 0
4952 -4963 0
4945 -4962 0
4945 4951 -4963 0
4945 4952 -4965 0
4946 -4963 0
4946 4951 -4965 0
4946 4952 -4967 0
c (0<=(aux1147 + aux1149 - aux1152))
-4952 4967 0
-4951 4965 0
-4946 4967 0
-4946 -4952 4965 0
-4946 -4951 4963 0
-4945 4965 0
-4945 -4952 4963 0
-4945 -4951 4962 0
c (( - aux1153 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4969 0
-554 -4969 0
-554 -674 -4970 0
c (0<=( - aux1153 + SATLiteral(554) + SATLiteral(674)))
674 4970 0
554 4970 0
554 674 4969 0
c (( - aux1154 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4972 0
-569 -4972 0
-569 -659 -4973 0
c (0<=( - aux1154 + SATLiteral(569) + SATLiteral(659)))
659 4973 0
569 4973 0
569 659 4972 0
c (( - aux1155 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4975 0
-599 -4975 0
-599 -644 -4976 0
c (0<=( - aux1155 + SATLiteral(599) + SATLiteral(644)))
644 4976 0
599 4976 0
599 644 4975 0
c (( - aux1156 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4978 0
-614 -4978 0
-614 -629 -4979 0
c (0<=( - aux1156 + SATLiteral(614) + SATLiteral(629)))
629 4979 0
614 4979 0
614 629 4978 0
c ((aux1156 - aux1157 + SATLiteral(584))<=0)
4978 -4981 0
4979 -4982 0
-584 -4981 0
-584 4978 -4982 0
-584 4979 -4984 0
c (0<=(aux1156 - aux1157 + SATLiteral(584)))
-4979 4984 0
-4978 4982 0
584 4984 0
584 -4979 4982 0
584 -4978 4981 0
c ((aux1153 + aux1155 - aux1158)<=0)
4975 -4986 0
4976 -4987 0
4969 -4986 0
4969 4975 -4987 0
4969 4976 -4989 0
4970 -4987 0
4970 4975 -4989 0
4970 4976 -4991 0
c (0<=(aux1153 + aux1155 - aux1158))
-4976 4991 0
-4975 4989 0
-4970 4991 0
-4970 -4976 4989 0
-4970 -4975 4987 0
-4969 4989 0
-4969 -4976 4987 0
-4969 -4975 4986 0
c (( - aux1159 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4993 0
-556 -4993 0
-556 -676 -4994 0
c (0<=( - aux1159 + SATLiteral(556) + SATLiteral(676)))
676 4994 0
556 4994 0
556 676 4993 0
c (( - aux1160 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4996 0
-571 -4996 0
-571 -661 -4997 0
c (0<=( - aux1160 + SATLiteral(571) + SATLiteral(661)))
661 4997 0
571 4997 0
571 661 4996 0
c (( - aux1161 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4999 0
-601 -4999 0
-601 -646 -5000 0
c (0<=( - aux1161 + SATLiteral(601) + SATLiteral(646)))
646 5000 0
601 5000 0
601 646 4999 0
c (( - aux1162 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -5002 0
-616 -5002 0
-616 -631 -5003 0
c (0<=( - aux1162 + SATLiteral(616) + SATLiteral(631)))
631 5003 0
616 5003 0
616 631 5002 0
c ((aux1162 - aux1163 + SATLiteral(586))<=0)
5002 -5005 0
5003 -5006 0
-586 -5005 0
-586 5002 -5006 0
-586 5003 -5008 0
c (0<=(aux1162 - aux1163 + SATLiteral(586)))
-5003 5008 0
-5002 5006 0
586 5008 0
586 -5003 5006 0
586 -5002 5005 0
c ((aux1159 + aux1161 - aux1164)<=0)
4999 -5010 0
5000 -5011 0
4993 -5010 0
4993 4999 -5011 0
4993 5000 -5013 0
4994 -5011 0
4994 4999 -5013 0
4994 5000 -5015 0
c (0<=(aux1159 + aux1161 - aux1164))
-5000 5015 0
-4999 5013 0
-4994 5015 0
-4994 -5000 5013 0
-4994 -4999 5011 0
-4993 5013 0
-4993 -5000 5011 0
-4993 -4999 5010 0
c (( - aux1165 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -5017 0
555 -5017 0
555 675 -5018 0
c (0<=( - aux1165 + SATLiteral(-555) + SATLiteral(-675)))
-675 5018 0
-555 5018 0
-555 -675 5017 0
c (( - aux1166 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -5020 0
570 -5020 0
570 660 -5021 0
c (0<=( - aux1166 + SATLiteral(-570) + SATLiteral(-660)))
-660 5021 0
-570 5021 0
-570 -660 5020 0
c (( - aux1167 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -5023 0
600 -5023 0
600 645 -5024 0
c (0<=( - aux1167 + SATLiteral(-600) + SATLiteral(-645)))
-645 5024 0
-600 5024 0
-600 -645 5023 0
c (( - aux1168 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -5026 0
615 -5026 0
615 630 -5027 0
c (0<=( - aux1168 + SATLiteral(-615) + SATLiteral(-630)))
-630 5027 0
-615 5027 0
-615 -630 5026 0
c ((aux1168 - aux1169 + SATLiteral(-585))<=0)
5026 -5029 0
5027 -5030 0
585 -5029 0
585 5026 -5030 0
585 5027 -5032 0
c (0<=(aux1168 - aux1169 + SATLiteral(-585)))
-5027 5032 0
-5026 5030 0
-585 5032 0
-585 -5027 5030 0
-585 -5026 5029 0
c ((aux1165 + aux1167 - aux1170)<=0)
5023 -5034 0
5024 -5035 0
5017 -5034 0
5017 5023 -5035 0
5017 5024 -5037 0
5018 -5035 0
5018 5023 -5037 0
5018 5024 -5039 0
c (0<=(aux1165 + aux1167 - aux1170))
-5024 5039 0
-5023 5037 0
-5018 5039 0
-5018 -5024 5037 0
-5018 -5023 5035 0
-5017 5037 0
-5017 -5024 5035 0
-5017 -5023 5034 0
c ((SATLiteral(677) + SATLiteral(797) - aux1171)<=0)
-797 -5041 0
-677 -5041 0
-677 -797 -5042 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1171))
797 5042 0
677 5042 0
677 797 5041 0
c ((SATLiteral(692) + SATLiteral(782) - aux1172)<=0)
-782 -5044 0
-692 -5044 0
-692 -782 -5045 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1172))
782 5045 0
692 5045 0
692 782 5044 0
c ((SATLiteral(722) + SATLiteral(767) - aux1173)<=0)
-767 -5047 0
-722 -5047 0
-722 -767 -5048 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1173))
767 5048 0
722 5048 0
722 767 5047 0
c ((SATLiteral(737) + SATLiteral(752) - aux1174)<=0)
-752 -5050 0
-737 -5050 0
-737 -752 -5051 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1174))
752 5051 0
737 5051 0
737 752 5050 0
c ((SATLiteral(707) + aux1174 - aux1175)<=0)
5050 -5053 0
5051 -5054 0
-707 -5053 0
-707 5050 -5054 0
-707 5051 -5056 0
c (0<=(SATLiteral(707) + aux1174 - aux1175))
-5051 5056 0
-5050 5054 0
707 5056 0
707 -5051 5054 0
707 -5050 5053 0
c ((aux1171 + aux1173 - aux1176)<=0)
5047 -5058 0
5048 -5059 0
5041 -5058 0
5041 5047 -5059 0
5041 5048 -5061 0
5042 -5059 0
5042 5047 -5061 0
5042 5048 -5063 0
c (0<=(aux1171 + aux1173 - aux1176))
-5048 5063 0
-5047 5061 0
-5042 5063 0
-5042 -5048 5061 0
-5042 -5047 5059 0
-5041 5061 0
-5041 -5048 5059 0
-5041 -5047 5058 0
c ((SATLiteral(679) + SATLiteral(799) - aux1177)<=0)
-799 -5065 0
-679 -5065 0
-679 -799 -5066 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1177))
799 5066 0
679 5066 0
679 799 5065 0
c ((SATLiteral(694) + SATLiteral(784) - aux1178)<=0)
-784 -5068 0
-694 -5068 0
-694 -784 -5069 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1178))
784 5069 0
694 5069 0
694 784 5068 0
c ((SATLiteral(724) + SATLiteral(769) - aux1179)<=0)
-769 -5071 0
-724 -5071 0
-724 -769 -5072 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1179))
769 5072 0
724 5072 0
724 769 5071 0
c ((SATLiteral(739) + SATLiteral(754) - aux1180)<=0)
-754 -5074 0
-739 -5074 0
-739 -754 -5075 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1180))
754 5075 0
739 5075 0
739 754 5074 0
c ((SATLiteral(709) + aux1180 - aux1181)<=0)
5074 -5077 0
5075 -5078 0
-709 -5077 0
-709 5074 -5078 0
-709 5075 -5080 0
c (0<=(SATLiteral(709) + aux1180 - aux1181))
-5075 5080 0
-5074 5078 0
709 5080 0
709 -5075 5078 0
709 -5074 5077 0
c ((aux1177 + aux1179 - aux1182)<=0)
5071 -5082 0
5072 -5083 0
5065 -5082 0
5065 5071 -5083 0
5065 5072 -5085 0
5066 -5083 0
5066 5071 -5085 0
5066 5072 -5087 0
c (0<=(aux1177 + aux1179 - aux1182))
-5072 5087 0
-5071 5085 0
-5066 5087 0
-5066 -5072 5085 0
-5066 -5071 5083 0
-5065 5085 0
-5065 -5072 5083 0
-5065 -5071 5082 0
c ((SATLiteral(681) + SATLiteral(801) - aux1183)<=0)
-801 -5089 0
-681 -5089 0
-681 -801 -5090 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1183))
801 5090 0
681 5090 0
681 801 5089 0
c ((SATLiteral(696) + SATLiteral(786) - aux1184)<=0)
-786 -5092 0
-696 -5092 0
-696 -786 -5093 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1184))
786 5093 0
696 5093 0
696 786 5092 0
c ((SATLiteral(726) + SATLiteral(771) - aux1185)<=0)
-771 -5095 0
-726 -5095 0
-726 -771 -5096 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1185))
771 5096 0
726 5096 0
726 771 5095 0
c ((SATLiteral(741) + SATLiteral(756) - aux1186)<=0)
-756 -5098 0
-741 -5098 0
-741 -756 -5099 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1186))
756 5099 0
741 5099 0
741 756 5098 0
c ((SATLiteral(711) + aux1186 - aux1187)<=0)
5098 -5101 0
5099 -5102 0
-711 -5101 0
-711 5098 -5102 0
-711 5099 -5104 0
c (0<=(SATLiteral(711) + aux1186 - aux1187))
-5099 5104 0
-5098 5102 0
711 5104 0
711 -5099 5102 0
711 -5098 5101 0
c ((aux1183 + aux1185 - aux1188)<=0)
5095 -5106 0
5096 -5107 0
5089 -5106 0
5089 5095 -5107 0
5089 5096 -5109 0
5090 -5107 0
5090 5095 -5109 0
5090 5096 -5111 0
c (0<=(aux1183 + aux1185 - aux1188))
-5096 5111 0
-5095 5109 0
-5090 5111 0
-5090 -5096 5109 0
-5090 -5095 5107 0
-5089 5109 0
-5089 -5096 5107 0
-5089 -5095 5106 0
c ((SATLiteral(683) + SATLiteral(803) - aux1189)<=0)
-803 -5113 0
-683 -5113 0
-683 -803 -5114 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1189))
803 5114 0
683 5114 0
683 803 5113 0
c ((SATLiteral(698) + SATLiteral(788) - aux1190)<=0)
-788 -5116 0
-698 -5116 0
-698 -788 -5117 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1190))
788 5117 0
698 5117 0
698 788 5116 0
c ((SATLiteral(728) + SATLiteral(773) - aux1191)<=0)
-773 -5119 0
-728 -5119 0
-728 -773 -5120 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1191))
773 5120 0
728 5120 0
728 773 5119 0
c ((SATLiteral(743) + SATLiteral(758) - aux1192)<=0)
-758 -5122 0
-743 -5122 0
-743 -758 -5123 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1192))
758 5123 0
743 5123 0
743 758 5122 0
c ((SATLiteral(713) + aux1192 - aux1193)<=0)
5122 -5125 0
5123 -5126 0
-713 -5125 0
-713 5122 -5126 0
-713 5123 -5128 0
c (0<=(SATLiteral(713) + aux1192 - aux1193))
-5123 5128 0
-5122 5126 0
713 5128 0
713 -5123 5126 0
713 -5122 5125 0
c ((aux1189 + aux1191 - aux1194)<=0)
5119 -5130 0
5120 -5131 0
5113 -5130 0
5113 5119 -5131 0
5113 5120 -5133 0
5114 -5131 0
5114 5119 -5133 0
5114 5120 -5135 0
c (0<=(aux1189 + aux1191 - aux1194))
-5120 5135 0
-5119 5133 0
-5114 5135 0
-5114 -5120 5133 0
-5114 -5119 5131 0
-5113 5133 0
-5113 -5120 5131 0
-5113 -5119 5130 0
c ((SATLiteral(685) + SATLiteral(805) - aux1195)<=0)
-805 -5137 0
-685 -5137 0
-685 -805 -5138 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1195))
805 5138 0
685 5138 0
685 805 5137 0
c ((SATLiteral(700) + SATLiteral(790) - aux1196)<=0)
-790 -5140 0
-700 -5140 0
-700 -790 -5141 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1196))
790 5141 0
700 5141 0
700 790 5140 0
c ((SATLiteral(730) + SATLiteral(775) - aux1197)<=0)
-775 -5143 0
-730 -5143 0
-730 -775 -5144 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1197))
775 5144 0
730 5144 0
730 775 5143 0
c ((SATLiteral(745) + SATLiteral(760) - aux1198)<=0)
-760 -5146 0
-745 -5146 0
-745 -760 -5147 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1198))
760 5147 0
745 5147 0
745 760 5146 0
c ((SATLiteral(715) + aux1198 - aux1199)<=0)
5146 -5149 0
5147 -5150 0
-715 -5149 0
-715 5146 -5150 0
-715 5147 -5152 0
c (0<=(SATLiteral(715) + aux1198 - aux1199))
-5147 5152 0
-5146 5150 0
715 5152 0
715 -5147 5150 0
715 -5146 5149 0
c ((aux1195 + aux1197 - aux1200)<=0)
5143 -5154 0
5144 -5155 0
5137 -5154 0
5137 5143 -5155 0
5137 5144 -5157 0
5138 -5155 0
5138 5143 -5157 0
5138 5144 -5159 0
c (0<=(aux1195 + aux1197 - aux1200))
-5144 5159 0
-5143 5157 0
-5138 5159 0
-5138 -5144 5157 0
-5138 -5143 5155 0
-5137 5157 0
-5137 -5144 5155 0
-5137 -5143 5154 0
c ((SATLiteral(687) + SATLiteral(807) - aux1201)<=0)
-807 -5161 0
-687 -5161 0
-687 -807 -5162 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1201))
807 5162 0
687 5162 0
687 807 5161 0
c ((SATLiteral(702) + SATLiteral(792) - aux1202)<=0)
-792 -5164 0
-702 -5164 0
-702 -792 -5165 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1202))
792 5165 0
702 5165 0
702 792 5164 0
c ((SATLiteral(732) + SATLiteral(777) - aux1203)<=0)
-777 -5167 0
-732 -5167 0
-732 -777 -5168 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1203))
777 5168 0
732 5168 0
732 777 5167 0
c ((SATLiteral(747) + SATLiteral(762) - aux1204)<=0)
-762 -5170 0
-747 -5170 0
-747 -762 -5171 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1204))
762 5171 0
747 5171 0
747 762 5170 0
c ((SATLiteral(717) + aux1204 - aux1205)<=0)
5170 -5173 0
5171 -5174 0
-717 -5173 0
-717 5170 -5174 0
-717 5171 -5176 0
c (0<=(SATLiteral(717) + aux1204 - aux1205))
-5171 5176 0
-5170 5174 0
717 5176 0
717 -5171 5174 0
717 -5170 5173 0
c ((aux1201 + aux1203 - aux1206)<=0)
5167 -5178 0
5168 -5179 0
5161 -5178 0
5161 5167 -5179 0
5161 5168 -5181 0
5162 -5179 0
5162 5167 -5181 0
5162 5168 -5183 0
c (0<=(aux1201 + aux1203 - aux1206))
-5168 5183 0
-5167 5181 0
-5162 5183 0
-5162 -5168 5181 0
-5162 -5167 5179 0
-5161 5181 0
-5161 -5168 5179 0
-5161 -5167 5178 0
c ((SATLiteral(689) + SATLiteral(809) - aux1207)<=0)
-809 -5185 0
-689 -5185 0
-689 -809 -5186 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1207))
809 5186 0
689 5186 0
689 809 5185 0
c ((SATLiteral(704) + SATLiteral(794) - aux1208)<=0)
-794 -5188 0
-704 -5188 0
-704 -794 -5189 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1208))
794 5189 0
704 5189 0
704 794 5188 0
c ((SATLiteral(734) + SATLiteral(779) - aux1209)<=0)
-779 -5191 0
-734 -5191 0
-734 -779 -5192 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1209))
779 5192 0
734 5192 0
734 779 5191 0
c ((SATLiteral(749) + SATLiteral(764) - aux1210)<=0)
-764 -5194 0
-749 -5194 0
-749 -764 -5195 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1210))
764 5195 0
749 5195 0
749 764 5194 0
c ((SATLiteral(719) + aux1210 - aux1211)<=0)
5194 -5197 0
5195 -5198 0
-719 -5197 0
-719 5194 -5198 0
-719 5195 -5200 0
c (0<=(SATLiteral(719) + aux1210 - aux1211))
-5195 5200 0
-5194 5198 0
719 5200 0
719 -5195 5198 0
719 -5194 5197 0
c ((aux1207 + aux1209 - aux1212)<=0)
5191 -5202 0
5192 -5203 0
5185 -5202 0
5185 5191 -5203 0
5185 5192 -5205 0
5186 -5203 0
5186 5191 -5205 0
5186 5192 -5207 0
c (0<=(aux1207 + aux1209 - aux1212))
-5192 5207 0
-5191 5205 0
-5186 5207 0
-5186 -5192 5205 0
-5186 -5191 5203 0
-5185 5205 0
-5185 -5192 5203 0
-5185 -5191 5202 0
c ((SATLiteral(691) + SATLiteral(811) - aux1213)<=0)
-811 -5209 0
-691 -5209 0
-691 -811 -5210 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1213))
811 5210 0
691 5210 0
691 811 5209 0
c ((SATLiteral(706) + SATLiteral(796) - aux1214)<=0)
-796 -5212 0
-706 -5212 0
-706 -796 -5213 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1214))
796 5213 0
706 5213 0
706 796 5212 0
c ((SATLiteral(736) + SATLiteral(781) - aux1215)<=0)
-781 -5215 0
-736 -5215 0
-736 -781 -5216 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1215))
781 5216 0
736 5216 0
736 781 5215 0
c ((SATLiteral(751) + SATLiteral(766) - aux1216)<=0)
-766 -5218 0
-751 -5218 0
-751 -766 -5219 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1216))
766 5219 0
751 5219 0
751 766 5218 0
c ((SATLiteral(721) + aux1216 - aux1217)<=0)
5218 -5221 0
5219 -5222 0
-721 -5221 0
-721 5218 -5222 0
-721 5219 -5224 0
c (0<=(SATLiteral(721) + aux1216 - aux1217))
-5219 5224 0
-5218 5222 0
721 5224 0
721 -5219 5222 0
721 -5218 5221 0
c ((aux1213 + aux1215 - aux1218)<=0)
5215 -5226 0
5216 -5227 0
5209 -5226 0
5209 5215 -5227 0
5209 5216 -5229 0
5210 -5227 0
5210 5215 -5229 0
5210 5216 -5231 0
c (0<=(aux1213 + aux1215 - aux1218))
-5216 5231 0
-5215 5229 0
-5210 5231 0
-5210 -5216 5229 0
-5210 -5215 5227 0
-5209 5229 0
-5209 -5216 5227 0
-5209 -5215 5226 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1219)<=0)
810 -5233 0
690 -5233 0
690 810 -5234 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1219))
-810 5234 0
-690 5234 0
-690 -810 5233 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1220)<=0)
795 -5236 0
705 -5236 0
705 795 -5237 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1220))
-795 5237 0
-705 5237 0
-705 -795 5236 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1221)<=0)
780 -5239 0
735 -5239 0
735 780 -5240 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1221))
-780 5240 0
-735 5240 0
-735 -780 5239 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1222)<=0)
765 -5242 0
750 -5242 0
750 765 -5243 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1222))
-765 5243 0
-750 5243 0
-750 -765 5242 0
c ((SATLiteral(-720) + aux1222 - aux1223)<=0)
5242 -5245 0
5243 -5246 0
720 -5245 0
720 5242 -5246 0
720 5243 -5248 0
c (0<=(SATLiteral(-720) + aux1222 - aux1223))
-5243 5248 0
-5242 5246 0
-720 5248 0
-720 -5243 5246 0
-720 -5242 5245 0
c ((aux1219 + aux1221 - aux1224)<=0)
5239 -5250 0
5240 -5251 0
5233 -5250 0
5233 5239 -5251 0
5233 5240 -5253 0
5234 -5251 0
5234 5239 -5253 0
5234 5240 -5255 0
c (0<=(aux1219 + aux1221 - aux1224))
-5240 5255 0
-5239 5253 0
-5234 5255 0
-5234 -5240 5253 0
-5234 -5239 5251 0
-5233 5253 0
-5233 -5240 5251 0
-5233 -5239 5250 0
c (( - aux1225 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5257 0
-812 -5257 0
-812 -932 -5258 0
c (0<=( - aux1225 + SATLiteral(812) + SATLiteral(932)))
932 5258 0
812 5258 0
812 932 5257 0
c (( - aux1226 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5260 0
-827 -5260 0
-827 -917 -5261 0
c (0<=( - aux1226 + SATLiteral(827) + SATLiteral(917)))
917 5261 0
827 5261 0
827 917 5260 0
c (( - aux1227 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5263 0
-857 -5263 0
-857 -902 -5264 0
c (0<=( - aux1227 + SATLiteral(857) + SATLiteral(902)))
902 5264 0
857 5264 0
857 902 5263 0
c (( - aux1228 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5266 0
-872 -5266 0
-872 -887 -5267 0
c (0<=( - aux1228 + SATLiteral(872) + SATLiteral(887)))
887 5267 0
872 5267 0
872 887 5266 0
c ((aux1228 - aux1229 + SATLiteral(842))<=0)
5266 -5269 0
5267 -5270 0
-842 -5269 0
-842 5266 -5270 0
-842 5267 -5272 0
c (0<=(aux1228 - aux1229 + SATLiteral(842)))
-5267 5272 0
-5266 5270 0
842 5272 0
842 -5267 5270 0
842 -5266 5269 0
c ((aux1225 + aux1227 - aux1230)<=0)
5263 -5274 0
5264 -5275 0
5257 -5274 0
5257 5263 -5275 0
5257 5264 -5277 0
5258 -5275 0
5258 5263 -5277 0
5258 5264 -5279 0
c (0<=(aux1225 + aux1227 - aux1230))
-5264 5279 0
-5263 5277 0
-5258 5279 0
-5258 -5264 5277 0
-5258 -5263 5275 0
-5257 5277 0
-5257 -5264 5275 0
-5257 -5263 5274 0
c (( - aux1231 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5281 0
-814 -5281 0
-814 -934 -5282 0
c (0<=( - aux1231 + SATLiteral(814) + SATLiteral(934)))
934 5282 0
814 5282 0
814 934 5281 0
c (( - aux1232 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5284 0
-829 -5284 0
-829 -919 -5285 0
c (0<=( - aux1232 + SATLiteral(829) + SATLiteral(919)))
919 5285 0
829 5285 0
829 919 5284 0
c (( - aux1233 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5287 0
-859 -5287 0
-859 -904 -5288 0
c (0<=( - aux1233 + SATLiteral(859) + SATLiteral(904)))
904 5288 0
859 5288 0
859 904 5287 0
c (( - aux1234 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5290 0
-874 -5290 0
-874 -889 -5291 0
c (0<=( - aux1234 + SATLiteral(874) + SATLiteral(889)))
889 5291 0
874 5291 0
874 889 5290 0
c ((aux1234 - aux1235 + SATLiteral(844))<=0)
5290 -5293 0
5291 -5294 0
-844 -5293 0
-844 5290 -5294 0
-844 5291 -5296 0
c (0<=(aux1234 - aux1235 + SATLiteral(844)))
-5291 5296 0
-5290 5294 0
844 5296 0
844 -5291 5294 0
844 -5290 5293 0
c ((aux1231 + aux1233 - aux1236)<=0)
5287 -5298 0
5288 -5299 0
5281 -5298 0
5281 5287 -5299 0
5281 5288 -5301 0
5282 -5299 0
5282 5287 -5301 0
5282 5288 -5303 0
c (0<=(aux1231 + aux1233 - aux1236))
-5288 5303 0
-5287 5301 0
-5282 5303 0
-5282 -5288 5301 0
-5282 -5287 5299 0
-5281 5301 0
-5281 -5288 5299 0
-5281 -5287 5298 0
c (( - aux1237 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5305 0
-816 -5305 0
-816 -936 -5306 0
c (0<=( - aux1237 + SATLiteral(816) + SATLiteral(936)))
936 5306 0
816 5306 0
816 936 5305 0
c (( - aux1238 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5308 0
-831 -5308 0
-831 -921 -5309 0
c (0<=( - aux1238 + SATLiteral(831) + SATLiteral(921)))
921 5309 0
831 5309 0
831 921 5308 0
c (( - aux1239 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5311 0
-861 -5311 0
-861 -906 -5312 0
c (0<=( - aux1239 + SATLiteral(861) + SATLiteral(906)))
906 5312 0
861 5312 0
861 906 5311 0
c (( - aux1240 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5314 0
-876 -5314 0
-876 -891 -5315 0
c (0<=( - aux1240 + SATLiteral(876) + SATLiteral(891)))
891 5315 0
876 5315 0
876 891 5314 0
c ((aux1240 - aux1241 + SATLiteral(846))<=0)
5314 -5317 0
5315 -5318 0
-846 -5317 0
-846 5314 -5318 0
-846 5315 -5320 0
c (0<=(aux1240 - aux1241 + SATLiteral(846)))
-5315 5320 0
-5314 5318 0
846 5320 0
846 -5315 5318 0
846 -5314 5317 0
c ((aux1237 + aux1239 - aux1242)<=0)
5311 -5322 0
5312 -5323 0
5305 -5322 0
5305 5311 -5323 0
5305 5312 -5325 0
5306 -5323 0
5306 5311 -5325 0
5306 5312 -5327 0
c (0<=(aux1237 + aux1239 - aux1242))
-5312 5327 0
-5311 5325 0
-5306 5327 0
-5306 -5312 5325 0
-5306 -5311 5323 0
-5305 5325 0
-5305 -5312 5323 0
-5305 -5311 5322 0
c (( - aux1243 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5329 0
-818 -5329 0
-818 -938 -5330 0
c (0<=( - aux1243 + SATLiteral(818) + SATLiteral(938)))
938 5330 0
818 5330 0
818 938 5329 0
c (( - aux1244 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5332 0
-833 -5332 0
-833 -923 -5333 0
c (0<=( - aux1244 + SATLiteral(833) + SATLiteral(923)))
923 5333 0
833 5333 0
833 923 5332 0
c (( - aux1245 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5335 0
-863 -5335 0
-863 -908 -5336 0
c (0<=( - aux1245 + SATLiteral(863) + SATLiteral(908)))
908 5336 0
863 5336 0
863 908 5335 0
c (( - aux1246 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5338 0
-878 -5338 0
-878 -893 -5339 0
c (0<=( - aux1246 + SATLiteral(878) + SATLiteral(893)))
893 5339 0
878 5339 0
878 893 5338 0
c ((aux1246 - aux1247 + SATLiteral(848))<=0)
5338 -5341 0
5339 -5342 0
-848 -5341 0
-848 5338 -5342 0
-848 5339 -5344 0
c (0<=(aux1246 - aux1247 + SATLiteral(848)))
-5339 5344 0
-5338 5342 0
848 5344 0
848 -5339 5342 0
848 -5338 5341 0
c ((aux1243 + aux1245 - aux1248)<=0)
5335 -5346 0
5336 -5347 0
5329 -5346 0
5329 5335 -5347 0
5329 5336 -5349 0
5330 -5347 0
5330 5335 -5349 0
5330 5336 -5351 0
c (0<=(aux1243 + aux1245 - aux1248))
-5336 5351 0
-5335 5349 0
-5330 5351 0
-5330 -5336 5349 0
-5330 -5335 5347 0
-5329 5349 0
-5329 -5336 5347 0
-5329 -5335 5346 0
c (( - aux1249 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5353 0
-820 -5353 0
-820 -940 -5354 0
c (0<=( - aux1249 + SATLiteral(820) + SATLiteral(940)))
940 5354 0
820 5354 0
820 940 5353 0
c (( - aux1250 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5356 0
-835 -5356 0
-835 -925 -5357 0
c (0<=( - aux1250 + SATLiteral(835) + SATLiteral(925)))
925 5357 0
835 5357 0
835 925 5356 0
c (( - aux1251 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5359 0
-865 -5359 0
-865 -910 -5360 0
c (0<=( - aux1251 + SATLiteral(865) + SATLiteral(910)))
910 5360 0
865 5360 0
865 910 5359 0
c (( - aux1252 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5362 0
-880 -5362 0
-880 -895 -5363 0
c (0<=( - aux1252 + SATLiteral(880) + SATLiteral(895)))
895 5363 0
880 5363 0
880 895 5362 0
c ((aux1252 - aux1253 + SATLiteral(850))<=0)
5362 -5365 0
5363 -5366 0
-850 -5365 0
-850 5362 -5366 0
-850 5363 -5368 0
c (0<=(aux1252 - aux1253 + SATLiteral(850)))
-5363 5368 0
-5362 5366 0
850 5368 0
850 -5363 5366 0
850 -5362 5365 0
c ((aux1249 + aux1251 - aux1254)<=0)
5359 -5370 0
5360 -5371 0
5353 -5370 0
5353 5359 -5371 0
5353 5360 -5373 0
5354 -5371 0
5354 5359 -5373 0
5354 5360 -5375 0
c (0<=(aux1249 + aux1251 - aux1254))
-5360 5375 0
-5359 5373 0
-5354 5375 0
-5354 -5360 5373 0
-5354 -5359 5371 0
-5353 5373 0
-5353 -5360 5371 0
-5353 -5359 5370 0
c (( - aux1255 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5377 0
-822 -5377 0
-822 -942 -5378 0
c (0<=( - aux1255 + SATLiteral(822) + SATLiteral(942)))
942 5378 0
822 5378 0
822 942 5377 0
c (( - aux1256 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5380 0
-837 -5380 0
-837 -927 -5381 0
c (0<=( - aux1256 + SATLiteral(837) + SATLiteral(927)))
927 5381 0
837 5381 0
837 927 5380 0
c (( - aux1257 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5383 0
-867 -5383 0
-867 -912 -5384 0
c (0<=( - aux1257 + SATLiteral(867) + SATLiteral(912)))
912 5384 0
867 5384 0
867 912 5383 0
c (( - aux1258 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5386 0
-882 -5386 0
-882 -897 -5387 0
c (0<=( - aux1258 + SATLiteral(882) + SATLiteral(897)))
897 5387 0
882 5387 0
882 897 5386 0
c ((aux1258 - aux1259 + SATLiteral(852))<=0)
5386 -5389 0
5387 -5390 0
-852 -5389 0
-852 5386 -5390 0
-852 5387 -5392 0
c (0<=(aux1258 - aux1259 + SATLiteral(852)))
-5387 5392 0
-5386 5390 0
852 5392 0
852 -5387 5390 0
852 -5386 5389 0
c ((aux1255 + aux1257 - aux1260)<=0)
5383 -5394 0
5384 -5395 0
5377 -5394 0
5377 5383 -5395 0
5377 5384 -5397 0
5378 -5395 0
5378 5383 -5397 0
5378 5384 -5399 0
c (0<=(aux1255 + aux1257 - aux1260))
-5384 5399 0
-5383 5397 0
-5378 5399 0
-5378 -5384 5397 0
-5378 -5383 5395 0
-5377 5397 0
-5377 -5384 5395 0
-5377 -5383 5394 0
c (( - aux1261 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5401 0
-824 -5401 0
-824 -944 -5402 0
c (0<=( - aux1261 + SATLiteral(824) + SATLiteral(944)))
944 5402 0
824 5402 0
824 944 5401 0
c (( - aux1262 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5404 0
-839 -5404 0
-839 -929 -5405 0
c (0<=( - aux1262 + SATLiteral(839) + SATLiteral(929)))
929 5405 0
839 5405 0
839 929 5404 0
c (( - aux1263 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5407 0
-869 -5407 0
-869 -914 -5408 0
c (0<=( - aux1263 + SATLiteral(869) + SATLiteral(914)))
914 5408 0
869 5408 0
869 914 5407 0
c (( - aux1264 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5410 0
-884 -5410 0
-884 -899 -5411 0
c (0<=( - aux1264 + SATLiteral(884) + SATLiteral(899)))
899 5411 0
884 5411 0
884 899 5410 0
c ((aux1264 - aux1265 + SATLiteral(854))<=0)
5410 -5413 0
5411 -5414 0
-854 -5413 0
-854 5410 -5414 0
-854 5411 -5416 0
c (0<=(aux1264 - aux1265 + SATLiteral(854)))
-5411 5416 0
-5410 5414 0
854 5416 0
854 -5411 5414 0
854 -5410 5413 0
c ((aux1261 + aux1263 - aux1266)<=0)
5407 -5418 0
5408 -5419 0
5401 -5418 0
5401 5407 -5419 0
5401 5408 -5421 0
5402 -5419 0
5402 5407 -5421 0
5402 5408 -5423 0
c (0<=(aux1261 + aux1263 - aux1266))
-5408 5423 0
-5407 5421 0
-5402 5423 0
-5402 -5408 5421 0
-5402 -5407 5419 0
-5401 5421 0
-5401 -5408 5419 0
-5401 -5407 5418 0
c (( - aux1267 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5425 0
-826 -5425 0
-826 -946 -5426 0
c (0<=( - aux1267 + SATLiteral(826) + SATLiteral(946)))
946 5426 0
826 5426 0
826 946 5425 0
c (( - aux1268 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5428 0
-841 -5428 0
-841 -931 -5429 0
c (0<=( - aux1268 + SATLiteral(841) + SATLiteral(931)))
931 5429 0
841 5429 0
841 931 5428 0
c (( - aux1269 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5431 0
-871 -5431 0
-871 -916 -5432 0
c (0<=( - aux1269 + SATLiteral(871) + SATLiteral(916)))
916 5432 0
871 5432 0
871 916 5431 0
c (( - aux1270 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5434 0
-886 -5434 0
-886 -901 -5435 0
c (0<=( - aux1270 + SATLiteral(886) + SATLiteral(901)))
901 5435 0
886 5435 0
886 901 5434 0
c ((aux1270 - aux1271 + SATLiteral(856))<=0)
5434 -5437 0
5435 -5438 0
-856 -5437 0
-856 5434 -5438 0
-856 5435 -5440 0
c (0<=(aux1270 - aux1271 + SATLiteral(856)))
-5435 5440 0
-5434 5438 0
856 5440 0
856 -5435 5438 0
856 -5434 5437 0
c ((aux1267 + aux1269 - aux1272)<=0)
5431 -5442 0
5432 -5443 0
5425 -5442 0
5425 5431 -5443 0
5425 5432 -5445 0
5426 -5443 0
5426 5431 -5445 0
5426 5432 -5447 0
c (0<=(aux1267 + aux1269 - aux1272))
-5432 5447 0
-5431 5445 0
-5426 5447 0
-5426 -5432 5445 0
-5426 -5431 5443 0
-5425 5445 0
-5425 -5432 5443 0
-5425 -5431 5442 0
c (( - aux1273 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5449 0
825 -5449 0
825 945 -5450 0
c (0<=( - aux1273 + SATLiteral(-825) + SATLiteral(-945)))
-945 5450 0
-825 5450 0
-825 -945 5449 0
c (( - aux1274 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5452 0
840 -5452 0
840 930 -5453 0
c (0<=( - aux1274 + SATLiteral(-840) + SATLiteral(-930)))
-930 5453 0
-840 5453 0
-840 -930 5452 0
c (( - aux1275 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5455 0
870 -5455 0
870 915 -5456 0
c (0<=( - aux1275 + SATLiteral(-870) + SATLiteral(-915)))
-915 5456 0
-870 5456 0
-870 -915 5455 0
c (( - aux1276 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5458 0
885 -5458 0
885 900 -5459 0
c (0<=( - aux1276 + SATLiteral(-885) + SATLiteral(-900)))
-900 5459 0
-885 5459 0
-885 -900 5458 0
c ((aux1276 - aux1277 + SATLiteral(-855))<=0)
5458 -5461 0
5459 -5462 0
855 -5461 0
855 5458 -5462 0
855 5459 -5464 0
c (0<=(aux1276 - aux1277 + SATLiteral(-855)))
-5459 5464 0
-5458 5462 0
-855 5464 0
-855 -5459 5462 0
-855 -5458 5461 0
c ((aux1273 + aux1275 - aux1278)<=0)
5455 -5466 0
5456 -5467 0
5449 -5466 0
5449 5455 -5467 0
5449 5456 -5469 0
5450 -5467 0
5450 5455 -5469 0
5450 5456 -5471 0
c (0<=(aux1273 + aux1275 - aux1278))
-5456 5471 0
-5455 5469 0
-5450 5471 0
-5450 -5456 5469 0
-5450 -5455 5467 0
-5449 5469 0
-5449 -5456 5467 0
-5449 -5455 5466 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1279)<=0)
-1067 -5473 0
-947 -5473 0
-947 -1067 -5474 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1279))
1067 5474 0
947 5474 0
947 1067 5473 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1280)<=0)
-1052 -5476 0
-962 -5476 0
-962 -1052 -5477 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1280))
1052 5477 0
962 5477 0
962 1052 5476 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1281)<=0)
-1037 -5479 0
-992 -5479 0
-992 -1037 -5480 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1281))
1037 5480 0
992 5480 0
992 1037 5479 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1282)<=0)
-1022 -5482 0
-1007 -5482 0
-1007 -1022 -5483 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1282))
1022 5483 0
1007 5483 0
1007 1022 5482 0
c ((SATLiteral(977) + aux1282 - aux1283)<=0)
5482 -5485 0
5483 -5486 0
-977 -5485 0
-977 5482 -5486 0
-977 5483 -5488 0
c (0<=(SATLiteral(977) + aux1282 - aux1283))
-5483 5488 0
-5482 5486 0
977 5488 0
977 -5483 5486 0
977 -5482 5485 0
c ((aux1279 + aux1281 - aux1284)<=0)
5479 -5490 0
5480 -5491 0
5473 -5490 0
5473 5479 -5491 0
5473 5480 -5493 0
5474 -5491 0
5474 5479 -5493 0
5474 5480 -5495 0
c (0<=(aux1279 + aux1281 - aux1284))
-5480 5495 0
-5479 5493 0
-5474 5495 0
-5474 -5480 5493 0
-5474 -5479 5491 0
-5473 5493 0
-5473 -5480 5491 0
-5473 -5479 5490 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1285)<=0)
-1069 -5497 0
-949 -5497 0
-949 -1069 -5498 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1285))
1069 5498 0
949 5498 0
949 1069 5497 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1286)<=0)
-1054 -5500 0
-964 -5500 0
-964 -1054 -5501 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1286))
1054 5501 0
964 5501 0
964 1054 5500 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1287)<=0)
-1039 -5503 0
-994 -5503 0
-994 -1039 -5504 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1287))
1039 5504 0
994 5504 0
994 1039 5503 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1288)<=0)
-1024 -5506 0
-1009 -5506 0
-1009 -1024 -5507 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1288))
1024 5507 0
1009 5507 0
1009 1024 5506 0
c ((SATLiteral(979) + aux1288 - aux1289)<=0)
5506 -5509 0
5507 -5510 0
-979 -5509 0
-979 5506 -5510 0
-979 5507 -5512 0
c (0<=(SATLiteral(979) + aux1288 - aux1289))
-5507 5512 0
-5506 5510 0
979 5512 0
979 -5507 5510 0
979 -5506 5509 0
c ((aux1285 + aux1287 - aux1290)<=0)
5503 -5514 0
5504 -5515 0
5497 -5514 0
5497 5503 -5515 0
5497 5504 -5517 0
5498 -5515 0
5498 5503 -5517 0
5498 5504 -5519 0
c (0<=(aux1285 + aux1287 - aux1290))
-5504 5519 0
-5503 5517 0
-5498 5519 0
-5498 -5504 5517 0
-5498 -5503 5515 0
-5497 5517 0
-5497 -5504 5515 0
-5497 -5503 5514 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1291)<=0)
-1071 -5521 0
-951 -5521 0
-951 -1071 -5522 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1291))
1071 5522 0
951 5522 0
951 1071 5521 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1292)<=0)
-1056 -5524 0
-966 -5524 0
-966 -1056 -5525 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1292))
1056 5525 0
966 5525 0
966 1056 5524 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1293)<=0)
-1041 -5527 0
-996 -5527 0
-996 -1041 -5528 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1293))
1041 5528 0
996 5528 0
996 1041 5527 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1294)<=0)
-1026 -5530 0
-1011 -5530 0
-1011 -1026 -5531 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1294))
1026 5531 0
1011 5531 0
1011 1026 5530 0
c ((SATLiteral(981) + aux1294 - aux1295)<=0)
5530 -5533 0
5531 -5534 0
-981 -5533 0
-981 5530 -5534 0
-981 5531 -5536 0
c (0<=(SATLiteral(981) + aux1294 - aux1295))
-5531 5536 0
-5530 5534 0
981 5536 0
981 -5531 5534 0
981 -5530 5533 0
c ((aux1291 + aux1293 - aux1296)<=0)
5527 -5538 0
5528 -5539 0
5521 -5538 0
5521 5527 -5539 0
5521 5528 -5541 0
5522 -5539 0
5522 5527 -5541 0
5522 5528 -5543 0
c (0<=(aux1291 + aux1293 - aux1296))
-5528 5543 0
-5527 5541 0
-5522 5543 0
-5522 -5528 5541 0
-5522 -5527 5539 0
-5521 5541 0
-5521 -5528 5539 0
-5521 -5527 5538 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1297)<=0)
-1073 -5545 0
-953 -5545 0
-953 -1073 -5546 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1297))
1073 5546 0
953 5546 0
953 1073 5545 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1298)<=0)
-1058 -5548 0
-968 -5548 0
-968 -1058 -5549 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1298))
1058 5549 0
968 5549 0
968 1058 5548 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1299)<=0)
-1043 -5551 0
-998 -5551 0
-998 -1043 -5552 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1299))
1043 5552 0
998 5552 0
998 1043 5551 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1300)<=0)
-1028 -5554 0
-1013 -5554 0
-1013 -1028 -5555 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1300))
1028 5555 0
1013 5555 0
1013 1028 5554 0
c ((SATLiteral(983) + aux1300 - aux1301)<=0)
5554 -5557 0
5555 -5558 0
-983 -5557 0
-983 5554 -5558 0
-983 5555 -5560 0
c (0<=(SATLiteral(983) + aux1300 - aux1301))
-5555 5560 0
-5554 5558 0
983 5560 0
983 -5555 5558 0
983 -5554 5557 0
c ((aux1297 + aux1299 - aux1302)<=0)
5551 -5562 0
5552 -5563 0
5545 -5562 0
5545 5551 -5563 0
5545 5552 -5565 0
5546 -5563 0
5546 5551 -5565 0
5546 5552 -5567 0
c (0<=(aux1297 + aux1299 - aux1302))
-5552 5567 0
-5551 5565 0
-5546 5567 0
-5546 -5552 5565 0
-5546 -5551 5563 0
-5545 5565 0
-5545 -5552 5563 0
-5545 -5551 5562 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1303)<=0)
-1075 -5569 0
-955 -5569 0
-955 -1075 -5570 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1303))
1075 5570 0
955 5570 0
955 1075 5569 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1304)<=0)
-1060 -5572 0
-970 -5572 0
-970 -1060 -5573 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1304))
1060 5573 0
970 5573 0
970 1060 5572 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1305)<=0)
-1045 -5575 0
-1000 -5575 0
-1000 -1045 -5576 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1305))
1045 5576 0
1000 5576 0
1000 1045 5575 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1306)<=0)
-1030 -5578 0
-1015 -5578 0
-1015 -1030 -5579 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1306))
1030 5579 0
1015 5579 0
1015 1030 5578 0
c ((SATLiteral(985) + aux1306 - aux1307)<=0)
5578 -5581 0
5579 -5582 0
-985 -5581 0
-985 5578 -5582 0
-985 5579 -5584 0
c (0<=(SATLiteral(985) + aux1306 - aux1307))
-5579 5584 0
-5578 5582 0
985 5584 0
985 -5579 5582 0
985 -5578 5581 0
c ((aux1303 + aux1305 - aux1308)<=0)
5575 -5586 0
5576 -5587 0
5569 -5586 0
5569 5575 -5587 0
5569 5576 -5589 0
5570 -5587 0
5570 5575 -5589 0
5570 5576 -5591 0
c (0<=(aux1303 + aux1305 - aux1308))
-5576 5591 0
-5575 5589 0
-5570 5591 0
-5570 -5576 5589 0
-5570 -5575 5587 0
-5569 5589 0
-5569 -5576 5587 0
-5569 -5575 5586 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1309)<=0)
-1077 -5593 0
-957 -5593 0
-957 -1077 -5594 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1309))
1077 5594 0
957 5594 0
957 1077 5593 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1310)<=0)
-1062 -5596 0
-972 -5596 0
-972 -1062 -5597 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1310))
1062 5597 0
972 5597 0
972 1062 5596 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1311)<=0)
-1047 -5599 0
-1002 -5599 0
-1002 -1047 -5600 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1311))
1047 5600 0
1002 5600 0
1002 1047 5599 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1312)<=0)
-1032 -5602 0
-1017 -5602 0
-1017 -1032 -5603 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1312))
1032 5603 0
1017 5603 0
1017 1032 5602 0
c ((SATLiteral(987) + aux1312 - aux1313)<=0)
5602 -5605 0
5603 -5606 0
-987 -5605 0
-987 5602 -5606 0
-987 5603 -5608 0
c (0<=(SATLiteral(987) + aux1312 - aux1313))
-5603 5608 0
-5602 5606 0
987 5608 0
987 -5603 5606 0
987 -5602 5605 0
c ((aux1309 + aux1311 - aux1314)<=0)
5599 -5610 0
5600 -5611 0
5593 -5610 0
5593 5599 -5611 0
5593 5600 -5613 0
5594 -5611 0
5594 5599 -5613 0
5594 5600 -5615 0
c (0<=(aux1309 + aux1311 - aux1314))
-5600 5615 0
-5599 5613 0
-5594 5615 0
-5594 -5600 5613 0
-5594 -5599 5611 0
-5593 5613 0
-5593 -5600 5611 0
-5593 -5599 5610 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1315)<=0)
-1079 -5617 0
-959 -5617 0
-959 -1079 -5618 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1315))
1079 5618 0
959 5618 0
959 1079 5617 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1316)<=0)
-1064 -5620 0
-974 -5620 0
-974 -1064 -5621 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1316))
1064 5621 0
974 5621 0
974 1064 5620 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1317)<=0)
-1049 -5623 0
-1004 -5623 0
-1004 -1049 -5624 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1317))
1049 5624 0
1004 5624 0
1004 1049 5623 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1318)<=0)
-1034 -5626 0
-1019 -5626 0
-1019 -1034 -5627 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1318))
1034 5627 0
1019 5627 0
1019 1034 5626 0
c ((SATLiteral(989) + aux1318 - aux1319)<=0)
5626 -5629 0
5627 -5630 0
-989 -5629 0
-989 5626 -5630 0
-989 5627 -5632 0
c (0<=(SATLiteral(989) + aux1318 - aux1319))
-5627 5632 0
-5626 5630 0
989 5632 0
989 -5627 5630 0
989 -5626 5629 0
c ((aux1315 + aux1317 - aux1320)<=0)
5623 -5634 0
5624 -5635 0
5617 -5634 0
5617 5623 -5635 0
5617 5624 -5637 0
5618 -5635 0
5618 5623 -5637 0
5618 5624 -5639 0
c (0<=(aux1315 + aux1317 - aux1320))
-5624 5639 0
-5623 5637 0
-5618 5639 0
-5618 -5624 5637 0
-5618 -5623 5635 0
-5617 5637 0
-5617 -5624 5635 0
-5617 -5623 5634 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1321)<=0)
-1081 -5641 0
-961 -5641 0
-961 -1081 -5642 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1321))
1081 5642 0
961 5642 0
961 1081 5641 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1322)<=0)
-1066 -5644 0
-976 -5644 0
-976 -1066 -5645 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1322))
1066 5645 0
976 5645 0
976 1066 5644 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1323)<=0)
-1051 -5647 0
-1006 -5647 0
-1006 -1051 -5648 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1323))
1051 5648 0
1006 5648 0
1006 1051 5647 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1324)<=0)
-1036 -5650 0
-1021 -5650 0
-1021 -1036 -5651 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1324))
1036 5651 0
1021 5651 0
1021 1036 5650 0
c ((SATLiteral(991) + aux1324 - aux1325)<=0)
5650 -5653 0
5651 -5654 0
-991 -5653 0
-991 5650 -5654 0
-991 5651 -5656 0
c (0<=(SATLiteral(991) + aux1324 - aux1325))
-5651 5656 0
-5650 5654 0
991 5656 0
991 -5651 5654 0
991 -5650 5653 0
c ((aux1321 + aux1323 - aux1326)<=0)
5647 -5658 0
5648 -5659 0
5641 -5658 0
5641 5647 -5659 0
5641 5648 -5661 0
5642 -5659 0
5642 5647 -5661 0
5642 5648 -5663 0
c (0<=(aux1321 + aux1323 - aux1326))
-5648 5663 0
-5647 5661 0
-5642 5663 0
-5642 -5648 5661 0
-5642 -5647 5659 0
-5641 5661 0
-5641 -5648 5659 0
-5641 -5647 5658 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1327)<=0)
1080 -5665 0
960 -5665 0
960 1080 -5666 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1327))
-1080 5666 0
-960 5666 0
-960 -1080 5665 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1328)<=0)
1065 -5668 0
975 -5668 0
975 1065 -5669 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1328))
-1065 5669 0
-975 5669 0
-975 -1065 5668 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1329)<=0)
1050 -5671 0
1005 -5671 0
1005 1050 -5672 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1329))
-1050 5672 0
-1005 5672 0
-1005 -1050 5671 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1330)<=0)
1035 -5674 0
1020 -5674 0
1020 1035 -5675 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1330))
-1035 5675 0
-1020 5675 0
-1020 -1035 5674 0
c ((SATLiteral(-990) + aux1330 - aux1331)<=0)
5674 -5677 0
5675 -5678 0
990 -5677 0
990 5674 -5678 0
990 5675 -5680 0
c (0<=(SATLiteral(-990) + aux1330 - aux1331))
-5675 5680 0
-5674 5678 0
-990 5680 0
-990 -5675 5678 0
-990 -5674 5677 0
c ((aux1327 + aux1329 - aux1332)<=0)
5671 -5682 0
5672 -5683 0
5665 -5682 0
5665 5671 -5683 0
5665 5672 -5685 0
5666 -5683 0
5666 5671 -5685 0
5666 5672 -5687 0
c (0<=(aux1327 + aux1329 - aux1332))
-5672 5687 0
-5671 5685 0
-5666 5687 0
-5666 -5672 5685 0
-5666 -5671 5683 0
-5665 5685 0
-5665 -5672 5683 0
-5665 -5671 5682 0
c (( - aux1333 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5689 0
-1082 -5689 0
-1082 -1202 -5690 0
c (0<=( - aux1333 + SATLiteral(1082) + SATLiteral(1202)))
1202 5690 0
1082 5690 0
1082 1202 5689 0
c (( - aux1334 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5692 0
-1097 -5692 0
-1097 -1187 -5693 0
c (0<=( - aux1334 + SATLiteral(1097) + SATLiteral(1187)))
1187 5693 0
1097 5693 0
1097 1187 5692 0
c (( - aux1335 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5695 0
-1127 -5695 0
-1127 -1172 -5696 0
c (0<=( - aux1335 + SATLiteral(1127) + SATLiteral(1172)))
1172 5696 0
1127 5696 0
1127 1172 5695 0
c (( - aux1336 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5698 0
-1142 -5698 0
-1142 -1157 -5699 0
c (0<=( - aux1336 + SATLiteral(1142) + SATLiteral(1157)))
1157 5699 0
1142 5699 0
1142 1157 5698 0
c ((aux1336 - aux1337 + SATLiteral(1112))<=0)
5698 -5701 0
5699 -5702 0
-1112 -5701 0
-1112 5698 -5702 0
-1112 5699 -5704 0
c (0<=(aux1336 - aux1337 + SATLiteral(1112)))
-5699 5704 0
-5698 5702 0
1112 5704 0
1112 -5699 5702 0
1112 -5698 5701 0
c ((aux1333 + aux1335 - aux1338)<=0)
5695 -5706 0
5696 -5707 0
5689 -5706 0
5689 5695 -5707 0
5689 5696 -5709 0
5690 -5707 0
5690 5695 -5709 0
5690 5696 -5711 0
c (0<=(aux1333 + aux1335 - aux1338))
-5696 5711 0
-5695 5709 0
-5690 5711 0
-5690 -5696 5709 0
-5690 -5695 5707 0
-5689 5709 0
-5689 -5696 5707 0
-5689 -5695 5706 0
c (( - aux1339 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5713 0
-1084 -5713 0
-1084 -1204 -5714 0
c (0<=( - aux1339 + SATLiteral(1084) + SATLiteral(1204)))
1204 5714 0
1084 5714 0
1084 1204 5713 0
c (( - aux1340 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5716 0
-1099 -5716 0
-1099 -1189 -5717 0
c (0<=( - aux1340 + SATLiteral(1099) + SATLiteral(1189)))
1189 5717 0
1099 5717 0
1099 1189 5716 0
c (( - aux1341 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5719 0
-1129 -5719 0
-1129 -1174 -5720 0
c (0<=( - aux1341 + SATLiteral(1129) + SATLiteral(1174)))
1174 5720 0
1129 5720 0
1129 1174 5719 0
c (( - aux1342 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5722 0
-1144 -5722 0
-1144 -1159 -5723 0
c (0<=( - aux1342 + SATLiteral(1144) + SATLiteral(1159)))
1159 5723 0
1144 5723 0
1144 1159 5722 0
c ((aux1342 - aux1343 + SATLiteral(1114))<=0)
5722 -5725 0
5723 -5726 0
-1114 -5725 0
-1114 5722 -5726 0
-1114 5723 -5728 0
c (0<=(aux1342 - aux1343 + SATLiteral(1114)))
-5723 5728 0
-5722 5726 0
1114 5728 0
1114 -5723 5726 0
1114 -5722 5725 0
c ((aux1339 + aux1341 - aux1344)<=0)
5719 -5730 0
5720 -5731 0
5713 -5730 0
5713 5719 -5731 0
5713 5720 -5733 0
5714 -5731 0
5714 5719 -5733 0
5714 5720 -5735 0
c (0<=(aux1339 + aux1341 - aux1344))
-5720 5735 0
-5719 5733 0
-5714 5735 0
-5714 -5720 5733 0
-5714 -5719 5731 0
-5713 5733 0
-5713 -5720 5731 0
-5713 -5719 5730 0
c (( - aux1345 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5737 0
-1086 -5737 0
-1086 -1206 -5738 0
c (0<=( - aux1345 + SATLiteral(1086) + SATLiteral(1206)))
1206 5738 0
1086 5738 0
1086 1206 5737 0
c (( - aux1346 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5740 0
-1101 -5740 0
-1101 -1191 -5741 0
c (0<=( - aux1346 + SATLiteral(1101) + SATLiteral(1191)))
1191 5741 0
1101 5741 0
1101 1191 5740 0
c (( - aux1347 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5743 0
-1131 -5743 0
-1131 -1176 -5744 0
c (0<=( - aux1347 + SATLiteral(1131) + SATLiteral(1176)))
1176 5744 0
1131 5744 0
1131 1176 5743 0
c (( - aux1348 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5746 0
-1146 -5746 0
-1146 -1161 -5747 0
c (0<=( - aux1348 + SATLiteral(1146) + SATLiteral(1161)))
1161 5747 0
1146 5747 0
1146 1161 5746 0
c ((aux1348 - aux1349 + SATLiteral(1116))<=0)
5746 -5749 0
5747 -5750 0
-1116 -5749 0
-1116 5746 -5750 0
-1116 5747 -5752 0
c (0<=(aux1348 - aux1349 + SATLiteral(1116)))
-5747 5752 0
-5746 5750 0
1116 5752 0
1116 -5747 5750 0
1116 -5746 5749 0
c ((aux1345 + aux1347 - aux1350)<=0)
5743 -5754 0
5744 -5755 0
5737 -5754 0
5737 5743 -5755 0
5737 5744 -5757 0
5738 -5755 0
5738 5743 -5757 0
5738 5744 -5759 0
c (0<=(aux1345 + aux1347 - aux1350))
-5744 5759 0
-5743 5757 0
-5738 5759 0
-5738 -5744 5757 0
-5738 -5743 5755 0
-5737 5757 0
-5737 -5744 5755 0
-5737 -5743 5754 0
c (( - aux1351 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5761 0
-1088 -5761 0
-1088 -1208 -5762 0
c (0<=( - aux1351 + SATLiteral(1088) + SATLiteral(1208)))
1208 5762 0
1088 5762 0
1088 1208 5761 0
c (( - aux1352 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5764 0
-1103 -5764 0
-1103 -1193 -5765 0
c (0<=( - aux1352 + SATLiteral(1103) + SATLiteral(1193)))
1193 5765 0
1103 5765 0
1103 1193 5764 0
c (( - aux1353 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5767 0
-1133 -5767 0
-1133 -1178 -5768 0
c (0<=( - aux1353 + SATLiteral(1133) + SATLiteral(1178)))
1178 5768 0
1133 5768 0
1133 1178 5767 0
c (( - aux1354 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5770 0
-1148 -5770 0
-1148 -1163 -5771 0
c (0<=( - aux1354 + SATLiteral(1148) + SATLiteral(1163)))
1163 5771 0
1148 5771 0
1148 1163 5770 0
c ((aux1354 - aux1355 + SATLiteral(1118))<=0)
5770 -5773 0
5771 -5774 0
-1118 -5773 0
-1118 5770 -5774 0
-1118 5771 -5776 0
c (0<=(aux1354 - aux1355 + SATLiteral(1118)))
-5771 5776 0
-5770 5774 0
1118 5776 0
1118 -5771 5774 0
1118 -5770 5773 0
c ((aux1351 + aux1353 - aux1356)<=0)
5767 -5778 0
5768 -5779 0
5761 -5778 0
5761 5767 -5779 0
5761 5768 -5781 0
5762 -5779 0
5762 5767 -5781 0
5762 5768 -5783 0
c (0<=(aux1351 + aux1353 - aux1356))
-5768 5783 0
-5767 5781 0
-5762 5783 0
-5762 -5768 5781 0
-5762 -5767 5779 0
-5761 5781 0
-5761 -5768 5779 0
-5761 -5767 5778 0
c (( - aux1357 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5785 0
-1090 -5785 0
-1090 -1210 -5786 0
c (0<=( - aux1357 + SATLiteral(1090) + SATLiteral(1210)))
1210 5786 0
1090 5786 0
1090 1210 5785 0
c (( - aux1358 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5788 0
-1105 -5788 0
-1105 -1195 -5789 0
c (0<=( - aux1358 + SATLiteral(1105) + SATLiteral(1195)))
1195 5789 0
1105 5789 0
1105 1195 5788 0
c (( - aux1359 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5791 0
-1135 -5791 0
-1135 -1180 -5792 0
c (0<=( - aux1359 + SATLiteral(1135) + SATLiteral(1180)))
1180 5792 0
1135 5792 0
1135 1180 5791 0
c (( - aux1360 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5794 0
-1150 -5794 0
-1150 -1165 -5795 0
c (0<=( - aux1360 + SATLiteral(1150) + SATLiteral(1165)))
1165 5795 0
1150 5795 0
1150 1165 5794 0
c ((aux1360 - aux1361 + SATLiteral(1120))<=0)
5794 -5797 0
5795 -5798 0
-1120 -5797 0
-1120 5794 -5798 0
-1120 5795 -5800 0
c (0<=(aux1360 - aux1361 + SATLiteral(1120)))
-5795 5800 0
-5794 5798 0
1120 5800 0
1120 -5795 5798 0
1120 -5794 5797 0
c ((aux1357 + aux1359 - aux1362)<=0)
5791 -5802 0
5792 -5803 0
5785 -5802 0
5785 5791 -5803 0
5785 5792 -5805 0
5786 -5803 0
5786 5791 -5805 0
5786 5792 -5807 0
c (0<=(aux1357 + aux1359 - aux1362))
-5792 5807 0
-5791 5805 0
-5786 5807 0
-5786 -5792 5805 0
-5786 -5791 5803 0
-5785 5805 0
-5785 -5792 5803 0
-5785 -5791 5802 0
c (( - aux1363 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5809 0
-1092 -5809 0
-1092 -1212 -5810 0
c (0<=( - aux1363 + SATLiteral(1092) + SATLiteral(1212)))
1212 5810 0
1092 5810 0
1092 1212 5809 0
c (( - aux1364 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5812 0
-1107 -5812 0
-1107 -1197 -5813 0
c (0<=( - aux1364 + SATLiteral(1107) + SATLiteral(1197)))
1197 5813 0
1107 5813 0
1107 1197 5812 0
c (( - aux1365 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5815 0
-1137 -5815 0
-1137 -1182 -5816 0
c (0<=( - aux1365 + SATLiteral(1137) + SATLiteral(1182)))
1182 5816 0
1137 5816 0
1137 1182 5815 0
c (( - aux1366 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5818 0
-1152 -5818 0
-1152 -1167 -5819 0
c (0<=( - aux1366 + SATLiteral(1152) + SATLiteral(1167)))
1167 5819 0
1152 5819 0
1152 1167 5818 0
c ((aux1366 - aux1367 + SATLiteral(1122))<=0)
5818 -5821 0
5819 -5822 0
-1122 -5821 0
-1122 5818 -5822 0
-1122 5819 -5824 0
c (0<=(aux1366 - aux1367 + SATLiteral(1122)))
-5819 5824 0
-5818 5822 0
1122 5824 0
1122 -5819 5822 0
1122 -5818 5821 0
c ((aux1363 + aux1365 - aux1368)<=0)
5815 -5826 0
5816 -5827 0
5809 -5826 0
5809 5815 -5827 0
5809 5816 -5829 0
5810 -5827 0
5810 5815 -5829 0
5810 5816 -5831 0
c (0<=(aux1363 + aux1365 - aux1368))
-5816 5831 0
-5815 5829 0
-5810 5831 0
-5810 -5816 5829 0
-5810 -5815 5827 0
-5809 5829 0
-5809 -5816 5827 0
-5809 -5815 5826 0
c (( - aux1369 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5833 0
-1094 -5833 0
-1094 -1214 -5834 0
c (0<=( - aux1369 + SATLiteral(1094) + SATLiteral(1214)))
1214 5834 0
1094 5834 0
1094 1214 5833 0
c (( - aux1370 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5836 0
-1109 -5836 0
-1109 -1199 -5837 0
c (0<=( - aux1370 + SATLiteral(1109) + SATLiteral(1199)))
1199 5837 0
1109 5837 0
1109 1199 5836 0
c (( - aux1371 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5839 0
-1139 -5839 0
-1139 -1184 -5840 0
c (0<=( - aux1371 + SATLiteral(1139) + SATLiteral(1184)))
1184 5840 0
1139 5840 0
1139 1184 5839 0
c (( - aux1372 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5842 0
-1154 -5842 0
-1154 -1169 -5843 0
c (0<=( - aux1372 + SATLiteral(1154) + SATLiteral(1169)))
1169 5843 0
1154 5843 0
1154 1169 5842 0
c ((aux1372 - aux1373 + SATLiteral(1124))<=0)
5842 -5845 0
5843 -5846 0
-1124 -5845 0
-1124 5842 -5846 0
-1124 5843 -5848 0
c (0<=(aux1372 - aux1373 + SATLiteral(1124)))
-5843 5848 0
-5842 5846 0
1124 5848 0
1124 -5843 5846 0
1124 -5842 5845 0
c ((aux1369 + aux1371 - aux1374)<=0)
5839 -5850 0
5840 -5851 0
5833 -5850 0
5833 5839 -5851 0
5833 5840 -5853 0
5834 -5851 0
5834 5839 -5853 0
5834 5840 -5855 0
c (0<=(aux1369 + aux1371 - aux1374))
-5840 5855 0
-5839 5853 0
-5834 5855 0
-5834 -5840 5853 0
-5834 -5839 5851 0
-5833 5853 0
-5833 -5840 5851 0
-5833 -5839 5850 0
c (( - aux1375 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5857 0
-1096 -5857 0
-1096 -1216 -5858 0
c (0<=( - aux1375 + SATLiteral(1096) + SATLiteral(1216)))
1216 5858 0
1096 5858 0
1096 1216 5857 0
c (( - aux1376 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5860 0
-1111 -5860 0
-1111 -1201 -5861 0
c (0<=( - aux1376 + SATLiteral(1111) + SATLiteral(1201)))
1201 5861 0
1111 5861 0
1111 1201 5860 0
c (( - aux1377 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5863 0
-1141 -5863 0
-1141 -1186 -5864 0
c (0<=( - aux1377 + SATLiteral(1141) + SATLiteral(1186)))
1186 5864 0
1141 5864 0
1141 1186 5863 0
c (( - aux1378 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5866 0
-1156 -5866 0
-1156 -1171 -5867 0
c (0<=( - aux1378 + SATLiteral(1156) + SATLiteral(1171)))
1171 5867 0
1156 5867 0
1156 1171 5866 0
c ((aux1378 - aux1379 + SATLiteral(1126))<=0)
5866 -5869 0
5867 -5870 0
-1126 -5869 0
-1126 5866 -5870 0
-1126 5867 -5872 0
c (0<=(aux1378 - aux1379 + SATLiteral(1126)))
-5867 5872 0
-5866 5870 0
1126 5872 0
1126 -5867 5870 0
1126 -5866 5869 0
c ((aux1375 + aux1377 - aux1380)<=0)
5863 -5874 0
5864 -5875 0
5857 -5874 0
5857 5863 -5875 0
5857 5864 -5877 0
5858 -5875 0
5858 5863 -5877 0
5858 5864 -5879 0
c (0<=(aux1375 + aux1377 - aux1380))
-5864 5879 0
-5863 5877 0
-5858 5879 0
-5858 -5864 5877 0
-5858 -5863 5875 0
-5857 5877 0
-5857 -5864 5875 0
-5857 -5863 5874 0
c (( - aux1381 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5881 0
1095 -5881 0
1095 1215 -5882 0
c (0<=( - aux1381 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5882 0
-1095 5882 0
-1095 -1215 5881 0
c (( - aux1382 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5884 0
1110 -5884 0
1110 1200 -5885 0
c (0<=( - aux1382 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5885 0
-1110 5885 0
-1110 -1200 5884 0
c (( - aux1383 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5887 0
1140 -5887 0
1140 1185 -5888 0
c (0<=( - aux1383 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5888 0
-1140 5888 0
-1140 -1185 5887 0
c (( - aux1384 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5890 0
1155 -5890 0
1155 1170 -5891 0
c (0<=( - aux1384 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5891 0
-1155 5891 0
-1155 -1170 5890 0
c ((aux1384 - aux1385 + SATLiteral(-1125))<=0)
5890 -5893 0
5891 -5894 0
1125 -5893 0
1125 5890 -5894 0
1125 5891 -5896 0
c (0<=(aux1384 - aux1385 + SATLiteral(-1125)))
-5891 5896 0
-5890 5894 0
-1125 5896 0
-1125 -5891 5894 0
-1125 -5890 5893 0
c ((aux1381 + aux1383 - aux1386)<=0)
5887 -5898 0
5888 -5899 0
5881 -5898 0
5881 5887 -5899 0
5881 5888 -5901 0
5882 -5899 0
5882 5887 -5901 0
5882 5888 -5903 0
c (0<=(aux1381 + aux1383 - aux1386))
-5888 5903 0
-5887 5901 0
-5882 5903 0
-5882 -5888 5901 0
-5882 -5887 5899 0
-5881 5901 0
-5881 -5888 5899 0
-5881 -5887 5898 0
c ((SATLiteral(272) - aux1387 + SATLiteral(167))<=0)
-167 -5905 0
-272 -5905 0
-272 -167 -5906 0
c (0<=(SATLiteral(272) - aux1387 + SATLiteral(167)))
167 5906 0
272 5906 0
272 167 5905 0
c ((SATLiteral(287) - aux1388 + SATLiteral(152))<=0)
-152 -5908 0
-287 -5908 0
-287 -152 -5909 0
c (0<=(SATLiteral(287) - aux1388 + SATLiteral(152)))
152 5909 0
287 5909 0
287 152 5908 0
c ((SATLiteral(2) - aux1389 + SATLiteral(137))<=0)
-137 -5911 0
-2 -5911 0
-2 -137 -5912 0
c (0<=(SATLiteral(2) - aux1389 + SATLiteral(137)))
137 5912 0
2 5912 0
2 137 5911 0
c ((SATLiteral(17) + SATLiteral(32) - aux1390)<=0)
-32 -5914 0
-17 -5914 0
-17 -32 -5915 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1390))
32 5915 0
17 5915 0
17 32 5914 0
c ((SATLiteral(302) + aux1390 - aux1391)<=0)
5914 -5917 0
5915 -5918 0
-302 -5917 0
-302 5914 -5918 0
-302 5915 -5920 0
c (0<=(SATLiteral(302) + aux1390 - aux1391))
-5915 5920 0
-5914 5918 0
302 5920 0
302 -5915 5918 0
302 -5914 5917 0
c ((aux1387 + aux1389 - aux1392)<=0)
5911 -5922 0
5912 -5923 0
5905 -5922 0
5905 5911 -5923 0
5905 5912 -5925 0
5906 -5923 0
5906 5911 -5925 0
5906 5912 -5927 0
c (0<=(aux1387 + aux1389 - aux1392))
-5912 5927 0
-5911 5925 0
-5906 5927 0
-5906 -5912 5925 0
-5906 -5911 5923 0
-5905 5925 0
-5905 -5912 5923 0
-5905 -5911 5922 0
c ((SATLiteral(274) - aux1393 + SATLiteral(169))<=0)
-169 -5929 0
-274 -5929 0
-274 -169 -5930 0
c (0<=(SATLiteral(274) - aux1393 + SATLiteral(169)))
169 5930 0
274 5930 0
274 169 5929 0
c ((SATLiteral(289) - aux1394 + SATLiteral(154))<=0)
-154 -5932 0
-289 -5932 0
-289 -154 -5933 0
c (0<=(SATLiteral(289) - aux1394 + SATLiteral(154)))
154 5933 0
289 5933 0
289 154 5932 0
c ((SATLiteral(4) - aux1395 + SATLiteral(139))<=0)
-139 -5935 0
-4 -5935 0
-4 -139 -5936 0
c (0<=(SATLiteral(4) - aux1395 + SATLiteral(139)))
139 5936 0
4 5936 0
4 139 5935 0
c ((SATLiteral(19) + SATLiteral(34) - aux1396)<=0)
-34 -5938 0
-19 -5938 0
-19 -34 -5939 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1396))
34 5939 0
19 5939 0
19 34 5938 0
c ((SATLiteral(304) + aux1396 - aux1397)<=0)
5938 -5941 0
5939 -5942 0
-304 -5941 0
-304 5938 -5942 0
-304 5939 -5944 0
c (0<=(SATLiteral(304) + aux1396 - aux1397))
-5939 5944 0
-5938 5942 0
304 5944 0
304 -5939 5942 0
304 -5938 5941 0
c ((aux1393 + aux1395 - aux1398)<=0)
5935 -5946 0
5936 -5947 0
5929 -5946 0
5929 5935 -5947 0
5929 5936 -5949 0
5930 -5947 0
5930 5935 -5949 0
5930 5936 -5951 0
c (0<=(aux1393 + aux1395 - aux1398))
-5936 5951 0
-5935 5949 0
-5930 5951 0
-5930 -5936 5949 0
-5930 -5935 5947 0
-5929 5949 0
-5929 -5936 5947 0
-5929 -5935 5946 0
c ((SATLiteral(276) - aux1399 + SATLiteral(171))<=0)
-171 -5953 0
-276 -5953 0
-276 -171 -5954 0
c (0<=(SATLiteral(276) - aux1399 + SATLiteral(171)))
171 5954 0
276 5954 0
276 171 5953 0
c ((SATLiteral(291) - aux1400 + SATLiteral(156))<=0)
-156 -5956 0
-291 -5956 0
-291 -156 -5957 0
c (0<=(SATLiteral(291) - aux1400 + SATLiteral(156)))
156 5957 0
291 5957 0
291 156 5956 0
c ((SATLiteral(6) - aux1401 + SATLiteral(141))<=0)
-141 -5959 0
-6 -5959 0
-6 -141 -5960 0
c (0<=(SATLiteral(6) - aux1401 + SATLiteral(141)))
141 5960 0
6 5960 0
6 141 5959 0
c ((SATLiteral(21) + SATLiteral(36) - aux1402)<=0)
-36 -5962 0
-21 -5962 0
-21 -36 -5963 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1402))
36 5963 0
21 5963 0
21 36 5962 0
c ((SATLiteral(306) + aux1402 - aux1403)<=0)
5962 -5965 0
5963 -5966 0
-306 -5965 0
-306 5962 -5966 0
-306 5963 -5968 0
c (0<=(SATLiteral(306) + aux1402 - aux1403))
-5963 5968 0
-5962 5966 0
306 5968 0
306 -5963 5966 0
306 -5962 5965 0
c ((aux1399 + aux1401 - aux1404)<=0)
5959 -5970 0
5960 -5971 0
5953 -5970 0
5953 5959 -5971 0
5953 5960 -5973 0
5954 -5971 0
5954 5959 -5973 0
5954 5960 -5975 0
c (0<=(aux1399 + aux1401 - aux1404))
-5960 5975 0
-5959 5973 0
-5954 5975 0
-5954 -5960 5973 0
-5954 -5959 5971 0
-5953 5973 0
-5953 -5960 5971 0
-5953 -5959 5970 0
c ((SATLiteral(278) - aux1405 + SATLiteral(173))<=0)
-173 -5977 0
-278 -5977 0
-278 -173 -5978 0
c (0<=(SATLiteral(278) - aux1405 + SATLiteral(173)))
173 5978 0
278 5978 0
278 173 5977 0
c ((SATLiteral(293) - aux1406 + SATLiteral(158))<=0)
-158 -5980 0
-293 -5980 0
-293 -158 -5981 0
c (0<=(SATLiteral(293) - aux1406 + SATLiteral(158)))
158 5981 0
293 5981 0
293 158 5980 0
c ((SATLiteral(8) - aux1407 + SATLiteral(143))<=0)
-143 -5983 0
-8 -5983 0
-8 -143 -5984 0
c (0<=(SATLiteral(8) - aux1407 + SATLiteral(143)))
143 5984 0
8 5984 0
8 143 5983 0
c ((SATLiteral(23) + SATLiteral(38) - aux1408)<=0)
-38 -5986 0
-23 -5986 0
-23 -38 -5987 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1408))
38 5987 0
23 5987 0
23 38 5986 0
c ((SATLiteral(308) + aux1408 - aux1409)<=0)
5986 -5989 0
5987 -5990 0
-308 -5989 0
-308 5986 -5990 0
-308 5987 -5992 0
c (0<=(SATLiteral(308) + aux1408 - aux1409))
-5987 5992 0
-5986 5990 0
308 5992 0
308 -5987 5990 0
308 -5986 5989 0
c ((aux1405 + aux1407 - aux1410)<=0)
5983 -5994 0
5984 -5995 0
5977 -5994 0
5977 5983 -5995 0
5977 5984 -5997 0
5978 -5995 0
5978 5983 -5997 0
5978 5984 -5999 0
c (0<=(aux1405 + aux1407 - aux1410))
-5984 5999 0
-5983 5997 0
-5978 5999 0
-5978 -5984 5997 0
-5978 -5983 5995 0
-5977 5997 0
-5977 -5984 5995 0
-5977 -5983 5994 0
c ((SATLiteral(280) - aux1411 + SATLiteral(175))<=0)
-175 -6001 0
-280 -6001 0
-280 -175 -6002 0
c (0<=(SATLiteral(280) - aux1411 + SATLiteral(175)))
175 6002 0
280 6002 0
280 175 6001 0
c ((SATLiteral(295) - aux1412 + SATLiteral(160))<=0)
-160 -6004 0
-295 -6004 0
-295 -160 -6005 0
c (0<=(SATLiteral(295) - aux1412 + SATLiteral(160)))
160 6005 0
295 6005 0
295 160 6004 0
c ((SATLiteral(10) - aux1413 + SATLiteral(145))<=0)
-145 -6007 0
-10 -6007 0
-10 -145 -6008 0
c (0<=(SATLiteral(10) - aux1413 + SATLiteral(145)))
145 6008 0
10 6008 0
10 145 6007 0
c ((SATLiteral(25) + SATLiteral(40) - aux1414)<=0)
-40 -6010 0
-25 -6010 0
-25 -40 -6011 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1414))
40 6011 0
25 6011 0
25 40 6010 0
c ((SATLiteral(310) + aux1414 - aux1415)<=0)
6010 -6013 0
6011 -6014 0
-310 -6013 0
-310 6010 -6014 0
-310 6011 -6016 0
c (0<=(SATLiteral(310) + aux1414 - aux1415))
-6011 6016 0
-6010 6014 0
310 6016 0
310 -6011 6014 0
310 -6010 6013 0
c ((aux1411 + aux1413 - aux1416)<=0)
6007 -6018 0
6008 -6019 0
6001 -6018 0
6001 6007 -6019 0
6001 6008 -6021 0
6002 -6019 0
6002 6007 -6021 0
6002 6008 -6023 0
c (0<=(aux1411 + aux1413 - aux1416))
-6008 6023 0
-6007 6021 0
-6002 6023 0
-6002 -6008 6021 0
-6002 -6007 6019 0
-6001 6021 0
-6001 -6008 6019 0
-6001 -6007 6018 0
c ((SATLiteral(282) - aux1417 + SATLiteral(177))<=0)
-177 -6025 0
-282 -6025 0
-282 -177 -6026 0
c (0<=(SATLiteral(282) - aux1417 + SATLiteral(177)))
177 6026 0
282 6026 0
282 177 6025 0
c ((SATLiteral(297) - aux1418 + SATLiteral(162))<=0)
-162 -6028 0
-297 -6028 0
-297 -162 -6029 0
c (0<=(SATLiteral(297) - aux1418 + SATLiteral(162)))
162 6029 0
297 6029 0
297 162 6028 0
c ((SATLiteral(12) - aux1419 + SATLiteral(147))<=0)
-147 -6031 0
-12 -6031 0
-12 -147 -6032 0
c (0<=(SATLiteral(12) - aux1419 + SATLiteral(147)))
147 6032 0
12 6032 0
12 147 6031 0
c ((SATLiteral(27) + SATLiteral(42) - aux1420)<=0)
-42 -6034 0
-27 -6034 0
-27 -42 -6035 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1420))
42 6035 0
27 6035 0
27 42 6034 0
c ((SATLiteral(312) + aux1420 - aux1421)<=0)
6034 -6037 0
6035 -6038 0
-312 -6037 0
-312 6034 -6038 0
-312 6035 -6040 0
c (0<=(SATLiteral(312) + aux1420 - aux1421))
-6035 6040 0
-6034 6038 0
312 6040 0
312 -6035 6038 0
312 -6034 6037 0
c ((aux1417 + aux1419 - aux1422)<=0)
6031 -6042 0
6032 -6043 0
6025 -6042 0
6025 6031 -6043 0
6025 6032 -6045 0
6026 -6043 0
6026 6031 -6045 0
6026 6032 -6047 0
c (0<=(aux1417 + aux1419 - aux1422))
-6032 6047 0
-6031 6045 0
-6026 6047 0
-6026 -6032 6045 0
-6026 -6031 6043 0
-6025 6045 0
-6025 -6032 6043 0
-6025 -6031 6042 0
c ((SATLiteral(284) - aux1423 + SATLiteral(179))<=0)
-179 -6049 0
-284 -6049 0
-284 -179 -6050 0
c (0<=(SATLiteral(284) - aux1423 + SATLiteral(179)))
179 6050 0
284 6050 0
284 179 6049 0
c ((SATLiteral(299) - aux1424 + SATLiteral(164))<=0)
-164 -6052 0
-299 -6052 0
-299 -164 -6053 0
c (0<=(SATLiteral(299) - aux1424 + SATLiteral(164)))
164 6053 0
299 6053 0
299 164 6052 0
c ((SATLiteral(14) - aux1425 + SATLiteral(149))<=0)
-149 -6055 0
-14 -6055 0
-14 -149 -6056 0
c (0<=(SATLiteral(14) - aux1425 + SATLiteral(149)))
149 6056 0
14 6056 0
14 149 6055 0
c ((SATLiteral(29) + SATLiteral(44) - aux1426)<=0)
-44 -6058 0
-29 -6058 0
-29 -44 -6059 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1426))
44 6059 0
29 6059 0
29 44 6058 0
c ((SATLiteral(314) + aux1426 - aux1427)<=0)
6058 -6061 0
6059 -6062 0
-314 -6061 0
-314 6058 -6062 0
-314 6059 -6064 0
c (0<=(SATLiteral(314) + aux1426 - aux1427))
-6059 6064 0
-6058 6062 0
314 6064 0
314 -6059 6062 0
314 -6058 6061 0
c ((aux1423 + aux1425 - aux1428)<=0)
6055 -6066 0
6056 -6067 0
6049 -6066 0
6049 6055 -6067 0
6049 6056 -6069 0
6050 -6067 0
6050 6055 -6069 0
6050 6056 -6071 0
c (0<=(aux1423 + aux1425 - aux1428))
-6056 6071 0
-6055 6069 0
-6050 6071 0
-6050 -6056 6069 0
-6050 -6055 6067 0
-6049 6069 0
-6049 -6056 6067 0
-6049 -6055 6066 0
c ((SATLiteral(286) - aux1429 + SATLiteral(181))<=0)
-181 -6073 0
-286 -6073 0
-286 -181 -6074 0
c (0<=(SATLiteral(286) - aux1429 + SATLiteral(181)))
181 6074 0
286 6074 0
286 181 6073 0
c ((SATLiteral(301) - aux1430 + SATLiteral(166))<=0)
-166 -6076 0
-301 -6076 0
-301 -166 -6077 0
c (0<=(SATLiteral(301) - aux1430 + SATLiteral(166)))
166 6077 0
301 6077 0
301 166 6076 0
c ((SATLiteral(16) - aux1431 + SATLiteral(151))<=0)
-151 -6079 0
-16 -6079 0
-16 -151 -6080 0
c (0<=(SATLiteral(16) - aux1431 + SATLiteral(151)))
151 6080 0
16 6080 0
16 151 6079 0
c ((SATLiteral(31) + SATLiteral(46) - aux1432)<=0)
-46 -6082 0
-31 -6082 0
-31 -46 -6083 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1432))
46 6083 0
31 6083 0
31 46 6082 0
c ((SATLiteral(316) + aux1432 - aux1433)<=0)
6082 -6085 0
6083 -6086 0
-316 -6085 0
-316 6082 -6086 0
-316 6083 -6088 0
c (0<=(SATLiteral(316) + aux1432 - aux1433))
-6083 6088 0
-6082 6086 0
316 6088 0
316 -6083 6086 0
316 -6082 6085 0
c ((aux1429 + aux1431 - aux1434)<=0)
6079 -6090 0
6080 -6091 0
6073 -6090 0
6073 6079 -6091 0
6073 6080 -6093 0
6074 -6091 0
6074 6079 -6093 0
6074 6080 -6095 0
c (0<=(aux1429 + aux1431 - aux1434))
-6080 6095 0
-6079 6093 0
-6074 6095 0
-6074 -6080 6093 0
-6074 -6079 6091 0
-6073 6093 0
-6073 -6080 6091 0
-6073 -6079 6090 0
c ((SATLiteral(-285) - aux1435 + SATLiteral(-180))<=0)
180 -6097 0
285 -6097 0
285 180 -6098 0
c (0<=(SATLiteral(-285) - aux1435 + SATLiteral(-180)))
-180 6098 0
-285 6098 0
-285 -180 6097 0
c ((SATLiteral(-300) - aux1436 + SATLiteral(-165))<=0)
165 -6100 0
300 -6100 0
300 165 -6101 0
c (0<=(SATLiteral(-300) - aux1436 + SATLiteral(-165)))
-165 6101 0
-300 6101 0
-300 -165 6100 0
c ((SATLiteral(-15) - aux1437 + SATLiteral(-150))<=0)
150 -6103 0
15 -6103 0
15 150 -6104 0
c (0<=(SATLiteral(-15) - aux1437 + SATLiteral(-150)))
-150 6104 0
-15 6104 0
-15 -150 6103 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1438)<=0)
45 -6106 0
30 -6106 0
30 45 -6107 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1438))
-45 6107 0
-30 6107 0
-30 -45 6106 0
c ((SATLiteral(-315) + aux1438 - aux1439)<=0)
6106 -6109 0
6107 -6110 0
315 -6109 0
315 6106 -6110 0
315 6107 -6112 0
c (0<=(SATLiteral(-315) + aux1438 - aux1439))
-6107 6112 0
-6106 6110 0
-315 6112 0
-315 -6107 6110 0
-315 -6106 6109 0
c ((aux1435 + aux1437 - aux1440)<=0)
6103 -6114 0
6104 -6115 0
6097 -6114 0
6097 6103 -6115 0
6097 6104 -6117 0
6098 -6115 0
6098 6103 -6117 0
6098 6104 -6119 0
c (0<=(aux1435 + aux1437 - aux1440))
-6104 6119 0
-6103 6117 0
-6098 6119 0
-6098 -6104 6117 0
-6098 -6103 6115 0
-6097 6117 0
-6097 -6104 6115 0
-6097 -6103 6114 0
c ((SATLiteral(317) - aux1441 + SATLiteral(212))<=0)
-212 -6121 0
-317 -6121 0
-317 -212 -6122 0
c (0<=(SATLiteral(317) - aux1441 + SATLiteral(212)))
212 6122 0
317 6122 0
317 212 6121 0
c ((SATLiteral(332) - aux1442 + SATLiteral(197))<=0)
-197 -6124 0
-332 -6124 0
-332 -197 -6125 0
c (0<=(SATLiteral(332) - aux1442 + SATLiteral(197)))
197 6125 0
332 6125 0
332 197 6124 0
c ((SATLiteral(47) - aux1443 + SATLiteral(182))<=0)
-182 -6127 0
-47 -6127 0
-47 -182 -6128 0
c (0<=(SATLiteral(47) - aux1443 + SATLiteral(182)))
182 6128 0
47 6128 0
47 182 6127 0
c ((SATLiteral(62) + SATLiteral(77) - aux1444)<=0)
-77 -6130 0
-62 -6130 0
-62 -77 -6131 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1444))
77 6131 0
62 6131 0
62 77 6130 0
c ((SATLiteral(347) + aux1444 - aux1445)<=0)
6130 -6133 0
6131 -6134 0
-347 -6133 0
-347 6130 -6134 0
-347 6131 -6136 0
c (0<=(SATLiteral(347) + aux1444 - aux1445))
-6131 6136 0
-6130 6134 0
347 6136 0
347 -6131 6134 0
347 -6130 6133 0
c ((aux1441 + aux1443 - aux1446)<=0)
6127 -6138 0
6128 -6139 0
6121 -6138 0
6121 6127 -6139 0
6121 6128 -6141 0
6122 -6139 0
6122 6127 -6141 0
6122 6128 -6143 0
c (0<=(aux1441 + aux1443 - aux1446))
-6128 6143 0
-6127 6141 0
-6122 6143 0
-6122 -6128 6141 0
-6122 -6127 6139 0
-6121 6141 0
-6121 -6128 6139 0
-6121 -6127 6138 0
c ((SATLiteral(319) - aux1447 + SATLiteral(214))<=0)
-214 -6145 0
-319 -6145 0
-319 -214 -6146 0
c (0<=(SATLiteral(319) - aux1447 + SATLiteral(214)))
214 6146 0
319 6146 0
319 214 6145 0
c ((SATLiteral(334) - aux1448 + SATLiteral(199))<=0)
-199 -6148 0
-334 -6148 0
-334 -199 -6149 0
c (0<=(SATLiteral(334) - aux1448 + SATLiteral(199)))
199 6149 0
334 6149 0
334 199 6148 0
c ((SATLiteral(49) - aux1449 + SATLiteral(184))<=0)
-184 -6151 0
-49 -6151 0
-49 -184 -6152 0
c (0<=(SATLiteral(49) - aux1449 + SATLiteral(184)))
184 6152 0
49 6152 0
49 184 6151 0
c ((SATLiteral(64) + SATLiteral(79) - aux1450)<=0)
-79 -6154 0
-64 -6154 0
-64 -79 -6155 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1450))
79 6155 0
64 6155 0
64 79 6154 0
c ((SATLiteral(349) + aux1450 - aux1451)<=0)
6154 -6157 0
6155 -6158 0
-349 -6157 0
-349 6154 -6158 0
-349 6155 -6160 0
c (0<=(SATLiteral(349) + aux1450 - aux1451))
-6155 6160 0
-6154 6158 0
349 6160 0
349 -6155 6158 0
349 -6154 6157 0
c ((aux1447 + aux1449 - aux1452)<=0)
6151 -6162 0
6152 -6163 0
6145 -6162 0
6145 6151 -6163 0
6145 6152 -6165 0
6146 -6163 0
6146 6151 -6165 0
6146 6152 -6167 0
c (0<=(aux1447 + aux1449 - aux1452))
-6152 6167 0
-6151 6165 0
-6146 6167 0
-6146 -6152 6165 0
-6146 -6151 6163 0
-6145 6165 0
-6145 -6152 6163 0
-6145 -6151 6162 0
c ((SATLiteral(321) - aux1453 + SATLiteral(216))<=0)
-216 -6169 0
-321 -6169 0
-321 -216 -6170 0
c (0<=(SATLiteral(321) - aux1453 + SATLiteral(216)))
216 6170 0
321 6170 0
321 216 6169 0
c ((SATLiteral(336) - aux1454 + SATLiteral(201))<=0)
-201 -6172 0
-336 -6172 0
-336 -201 -6173 0
c (0<=(SATLiteral(336) - aux1454 + SATLiteral(201)))
201 6173 0
336 6173 0
336 201 6172 0
c ((SATLiteral(51) - aux1455 + SATLiteral(186))<=0)
-186 -6175 0
-51 -6175 0
-51 -186 -6176 0
c (0<=(SATLiteral(51) - aux1455 + SATLiteral(186)))
186 6176 0
51 6176 0
51 186 6175 0
c ((SATLiteral(66) + SATLiteral(81) - aux1456)<=0)
-81 -6178 0
-66 -6178 0
-66 -81 -6179 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1456))
81 6179 0
66 6179 0
66 81 6178 0
c ((SATLiteral(351) + aux1456 - aux1457)<=0)
6178 -6181 0
6179 -6182 0
-351 -6181 0
-351 6178 -6182 0
-351 6179 -6184 0
c (0<=(SATLiteral(351) + aux1456 - aux1457))
-6179 6184 0
-6178 6182 0
351 6184 0
351 -6179 6182 0
351 -6178 6181 0
c ((aux1453 + aux1455 - aux1458)<=0)
6175 -6186 0
6176 -6187 0
6169 -6186 0
6169 6175 -6187 0
6169 6176 -6189 0
6170 -6187 0
6170 6175 -6189 0
6170 6176 -6191 0
c (0<=(aux1453 + aux1455 - aux1458))
-6176 6191 0
-6175 6189 0
-6170 6191 0
-6170 -6176 6189 0
-6170 -6175 6187 0
-6169 6189 0
-6169 -6176 6187 0
-6169 -6175 6186 0
c ((SATLiteral(323) - aux1459 + SATLiteral(218))<=0)
-218 -6193 0
-323 -6193 0
-323 -218 -6194 0
c (0<=(SATLiteral(323) - aux1459 + SATLiteral(218)))
218 6194 0
323 6194 0
323 218 6193 0
c ((SATLiteral(338) - aux1460 + SATLiteral(203))<=0)
-203 -6196 0
-338 -6196 0
-338 -203 -6197 0
c (0<=(SATLiteral(338) - aux1460 + SATLiteral(203)))
203 6197 0
338 6197 0
338 203 6196 0
c ((SATLiteral(53) - aux1461 + SATLiteral(188))<=0)
-188 -6199 0
-53 -6199 0
-53 -188 -6200 0
c (0<=(SATLiteral(53) - aux1461 + SATLiteral(188)))
188 6200 0
53 6200 0
53 188 6199 0
c ((SATLiteral(68) + SATLiteral(83) - aux1462)<=0)
-83 -6202 0
-68 -6202 0
-68 -83 -6203 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1462))
83 6203 0
68 6203 0
68 83 6202 0
c ((SATLiteral(353) + aux1462 - aux1463)<=0)
6202 -6205 0
6203 -6206 0
-353 -6205 0
-353 6202 -6206 0
-353 6203 -6208 0
c (0<=(SATLiteral(353) + aux1462 - aux1463))
-6203 6208 0
-6202 6206 0
353 6208 0
353 -6203 6206 0
353 -6202 6205 0
c ((aux1459 + aux1461 - aux1464)<=0)
6199 -6210 0
6200 -6211 0
6193 -6210 0
6193 6199 -6211 0
6193 6200 -6213 0
6194 -6211 0
6194 6199 -6213 0
6194 6200 -6215 0
c (0<=(aux1459 + aux1461 - aux1464))
-6200 6215 0
-6199 6213 0
-6194 6215 0
-6194 -6200 6213 0
-6194 -6199 6211 0
-6193 6213 0
-6193 -6200 6211 0
-6193 -6199 6210 0
c ((SATLiteral(325) - aux1465 + SATLiteral(220))<=0)
-220 -6217 0
-325 -6217 0
-325 -220 -6218 0
c (0<=(SATLiteral(325) - aux1465 + SATLiteral(220)))
220 6218 0
325 6218 0
325 220 6217 0
c ((SATLiteral(340) - aux1466 + SATLiteral(205))<=0)
-205 -6220 0
-340 -6220 0
-340 -205 -6221 0
c (0<=(SATLiteral(340) - aux1466 + SATLiteral(205)))
205 6221 0
340 6221 0
340 205 6220 0
c ((SATLiteral(55) - aux1467 + SATLiteral(190))<=0)
-190 -6223 0
-55 -6223 0
-55 -190 -6224 0
c (0<=(SATLiteral(55) - aux1467 + SATLiteral(190)))
190 6224 0
55 6224 0
55 190 6223 0
c ((SATLiteral(70) + SATLiteral(85) - aux1468)<=0)
-85 -6226 0
-70 -6226 0
-70 -85 -6227 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1468))
85 6227 0
70 6227 0
70 85 6226 0
c ((SATLiteral(355) + aux1468 - aux1469)<=0)
6226 -6229 0
6227 -6230 0
-355 -6229 0
-355 6226 -6230 0
-355 6227 -6232 0
c (0<=(SATLiteral(355) + aux1468 - aux1469))
-6227 6232 0
-6226 6230 0
355 6232 0
355 -6227 6230 0
355 -6226 6229 0
c ((aux1465 + aux1467 - aux1470)<=0)
6223 -6234 0
6224 -6235 0
6217 -6234 0
6217 6223 -6235 0
6217 6224 -6237 0
6218 -6235 0
6218 6223 -6237 0
6218 6224 -6239 0
c (0<=(aux1465 + aux1467 - aux1470))
-6224 6239 0
-6223 6237 0
-6218 6239 0
-6218 -6224 6237 0
-6218 -6223 6235 0
-6217 6237 0
-6217 -6224 6235 0
-6217 -6223 6234 0
c ((SATLiteral(327) - aux1471 + SATLiteral(222))<=0)
-222 -6241 0
-327 -6241 0
-327 -222 -6242 0
c (0<=(SATLiteral(327) - aux1471 + SATLiteral(222)))
222 6242 0
327 6242 0
327 222 6241 0
c ((SATLiteral(342) - aux1472 + SATLiteral(207))<=0)
-207 -6244 0
-342 -6244 0
-342 -207 -6245 0
c (0<=(SATLiteral(342) - aux1472 + SATLiteral(207)))
207 6245 0
342 6245 0
342 207 6244 0
c ((SATLiteral(57) - aux1473 + SATLiteral(192))<=0)
-192 -6247 0
-57 -6247 0
-57 -192 -6248 0
c (0<=(SATLiteral(57) - aux1473 + SATLiteral(192)))
192 6248 0
57 6248 0
57 192 6247 0
c ((SATLiteral(72) + SATLiteral(87) - aux1474)<=0)
-87 -6250 0
-72 -6250 0
-72 -87 -6251 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1474))
87 6251 0
72 6251 0
72 87 6250 0
c ((SATLiteral(357) + aux1474 - aux1475)<=0)
6250 -6253 0
6251 -6254 0
-357 -6253 0
-357 6250 -6254 0
-357 6251 -6256 0
c (0<=(SATLiteral(357) + aux1474 - aux1475))
-6251 6256 0
-6250 6254 0
357 6256 0
357 -6251 6254 0
357 -6250 6253 0
c ((aux1471 + aux1473 - aux1476)<=0)
6247 -6258 0
6248 -6259 0
6241 -6258 0
6241 6247 -6259 0
6241 6248 -6261 0
6242 -6259 0
6242 6247 -6261 0
6242 6248 -6263 0
c (0<=(aux1471 + aux1473 - aux1476))
-6248 6263 0
-6247 6261 0
-6242 6263 0
-6242 -6248 6261 0
-6242 -6247 6259 0
-6241 6261 0
-6241 -6248 6259 0
-6241 -6247 6258 0
c ((SATLiteral(329) - aux1477 + SATLiteral(224))<=0)
-224 -6265 0
-329 -6265 0
-329 -224 -6266 0
c (0<=(SATLiteral(329) - aux1477 + SATLiteral(224)))
224 6266 0
329 6266 0
329 224 6265 0
c ((SATLiteral(344) - aux1478 + SATLiteral(209))<=0)
-209 -6268 0
-344 -6268 0
-344 -209 -6269 0
c (0<=(SATLiteral(344) - aux1478 + SATLiteral(209)))
209 6269 0
344 6269 0
344 209 6268 0
c ((SATLiteral(59) - aux1479 + SATLiteral(194))<=0)
-194 -6271 0
-59 -6271 0
-59 -194 -6272 0
c (0<=(SATLiteral(59) - aux1479 + SATLiteral(194)))
194 6272 0
59 6272 0
59 194 6271 0
c ((SATLiteral(74) + SATLiteral(89) - aux1480)<=0)
-89 -6274 0
-74 -6274 0
-74 -89 -6275 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1480))
89 6275 0
74 6275 0
74 89 6274 0
c ((SATLiteral(359) + aux1480 - aux1481)<=0)
6274 -6277 0
6275 -6278 0
-359 -6277 0
-359 6274 -6278 0
-359 6275 -6280 0
c (0<=(SATLiteral(359) + aux1480 - aux1481))
-6275 6280 0
-6274 6278 0
359 6280 0
359 -6275 6278 0
359 -6274 6277 0
c ((aux1477 + aux1479 - aux1482)<=0)
6271 -6282 0
6272 -6283 0
6265 -6282 0
6265 6271 -6283 0
6265 6272 -6285 0
6266 -6283 0
6266 6271 -6285 0
6266 6272 -6287 0
c (0<=(aux1477 + aux1479 - aux1482))
-6272 6287 0
-6271 6285 0
-6266 6287 0
-6266 -6272 6285 0
-6266 -6271 6283 0
-6265 6285 0
-6265 -6272 6283 0
-6265 -6271 6282 0
c ((SATLiteral(331) - aux1483 + SATLiteral(226))<=0)
-226 -6289 0
-331 -6289 0
-331 -226 -6290 0
c (0<=(SATLiteral(331) - aux1483 + SATLiteral(226)))
226 6290 0
331 6290 0
331 226 6289 0
c ((SATLiteral(346) - aux1484 + SATLiteral(211))<=0)
-211 -6292 0
-346 -6292 0
-346 -211 -6293 0
c (0<=(SATLiteral(346) - aux1484 + SATLiteral(211)))
211 6293 0
346 6293 0
346 211 6292 0
c ((SATLiteral(61) - aux1485 + SATLiteral(196))<=0)
-196 -6295 0
-61 -6295 0
-61 -196 -6296 0
c (0<=(SATLiteral(61) - aux1485 + SATLiteral(196)))
196 6296 0
61 6296 0
61 196 6295 0
c ((SATLiteral(76) + SATLiteral(91) - aux1486)<=0)
-91 -6298 0
-76 -6298 0
-76 -91 -6299 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1486))
91 6299 0
76 6299 0
76 91 6298 0
c ((SATLiteral(361) + aux1486 - aux1487)<=0)
6298 -6301 0
6299 -6302 0
-361 -6301 0
-361 6298 -6302 0
-361 6299 -6304 0
c (0<=(SATLiteral(361) + aux1486 - aux1487))
-6299 6304 0
-6298 6302 0
361 6304 0
361 -6299 6302 0
361 -6298 6301 0
c ((aux1483 + aux1485 - aux1488)<=0)
6295 -6306 0
6296 -6307 0
6289 -6306 0
6289 6295 -6307 0
6289 6296 -6309 0
6290 -6307 0
6290 6295 -6309 0
6290 6296 -6311 0
c (0<=(aux1483 + aux1485 - aux1488))
-6296 6311 0
-6295 6309 0
-6290 6311 0
-6290 -6296 6309 0
-6290 -6295 6307 0
-6289 6309 0
-6289 -6296 6307 0
-6289 -6295 6306 0
c ((SATLiteral(-330) - aux1489 + SATLiteral(-225))<=0)
225 -6313 0
330 -6313 0
330 225 -6314 0
c (0<=(SATLiteral(-330) - aux1489 + SATLiteral(-225)))
-225 6314 0
-330 6314 0
-330 -225 6313 0
c ((SATLiteral(-345) - aux1490 + SATLiteral(-210))<=0)
210 -6316 0
345 -6316 0
345 210 -6317 0
c (0<=(SATLiteral(-345) - aux1490 + SATLiteral(-210)))
-210 6317 0
-345 6317 0
-345 -210 6316 0
c ((SATLiteral(-60) - aux1491 + SATLiteral(-195))<=0)
195 -6319 0
60 -6319 0
60 195 -6320 0
c (0<=(SATLiteral(-60) - aux1491 + SATLiteral(-195)))
-195 6320 0
-60 6320 0
-60 -195 6319 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1492)<=0)
90 -6322 0
75 -6322 0
75 90 -6323 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1492))
-90 6323 0
-75 6323 0
-75 -90 6322 0
c ((SATLiteral(-360) + aux1492 - aux1493)<=0)
6322 -6325 0
6323 -6326 0
360 -6325 0
360 6322 -6326 0
360 6323 -6328 0
c (0<=(SATLiteral(-360) + aux1492 - aux1493))
-6323 6328 0
-6322 6326 0
-360 6328 0
-360 -6323 6326 0
-360 -6322 6325 0
c ((aux1489 + aux1491 - aux1494)<=0)
6319 -6330 0
6320 -6331 0
6313 -6330 0
6313 6319 -6331 0
6313 6320 -6333 0
6314 -6331 0
6314 6319 -6333 0
6314 6320 -6335 0
c (0<=(aux1489 + aux1491 - aux1494))
-6320 6335 0
-6319 6333 0
-6314 6335 0
-6314 -6320 6333 0
-6314 -6319 6331 0
-6313 6333 0
-6313 -6320 6331 0
-6313 -6319 6330 0
c ((SATLiteral(362) - aux1495 + SATLiteral(257))<=0)
-257 -6337 0
-362 -6337 0
-362 -257 -6338 0
c (0<=(SATLiteral(362) - aux1495 + SATLiteral(257)))
257 6338 0
362 6338 0
362 257 6337 0
c ((SATLiteral(377) - aux1496 + SATLiteral(242))<=0)
-242 -6340 0
-377 -6340 0
-377 -242 -6341 0
c (0<=(SATLiteral(377) - aux1496 + SATLiteral(242)))
242 6341 0
377 6341 0
377 242 6340 0
c ((SATLiteral(92) - aux1497 + SATLiteral(227))<=0)
-227 -6343 0
-92 -6343 0
-92 -227 -6344 0
c (0<=(SATLiteral(92) - aux1497 + SATLiteral(227)))
227 6344 0
92 6344 0
92 227 6343 0
c ((SATLiteral(107) + SATLiteral(122) - aux1498)<=0)
-122 -6346 0
-107 -6346 0
-107 -122 -6347 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1498))
122 6347 0
107 6347 0
107 122 6346 0
c ((SATLiteral(392) + aux1498 - aux1499)<=0)
6346 -6349 0
6347 -6350 0
-392 -6349 0
-392 6346 -6350 0
-392 6347 -6352 0
c (0<=(SATLiteral(392) + aux1498 - aux1499))
-6347 6352 0
-6346 6350 0
392 6352 0
392 -6347 6350 0
392 -6346 6349 0
c ((aux1495 + aux1497 - aux1500)<=0)
6343 -6354 0
6344 -6355 0
6337 -6354 0
6337 6343 -6355 0
6337 6344 -6357 0
6338 -6355 0
6338 6343 -6357 0
6338 6344 -6359 0
c (0<=(aux1495 + aux1497 - aux1500))
-6344 6359 0
-6343 6357 0
-6338 6359 0
-6338 -6344 6357 0
-6338 -6343 6355 0
-6337 6357 0
-6337 -6344 6355 0
-6337 -6343 6354 0
c ((SATLiteral(364) - aux1501 + SATLiteral(259))<=0)
-259 -6361 0
-364 -6361 0
-364 -259 -6362 0
c (0<=(SATLiteral(364) - aux1501 + SATLiteral(259)))
259 6362 0
364 6362 0
364 259 6361 0
c ((SATLiteral(379) - aux1502 + SATLiteral(244))<=0)
-244 -6364 0
-379 -6364 0
-379 -244 -6365 0
c (0<=(SATLiteral(379) - aux1502 + SATLiteral(244)))
244 6365 0
379 6365 0
379 244 6364 0
c ((SATLiteral(94) - aux1503 + SATLiteral(229))<=0)
-229 -6367 0
-94 -6367 0
-94 -229 -6368 0
c (0<=(SATLiteral(94) - aux1503 + SATLiteral(229)))
229 6368 0
94 6368 0
94 229 6367 0
c ((SATLiteral(109) + SATLiteral(124) - aux1504)<=0)
-124 -6370 0
-109 -6370 0
-109 -124 -6371 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1504))
124 6371 0
109 6371 0
109 124 6370 0
c ((SATLiteral(394) + aux1504 - aux1505)<=0)
6370 -6373 0
6371 -6374 0
-394 -6373 0
-394 6370 -6374 0
-394 6371 -6376 0
c (0<=(SATLiteral(394) + aux1504 - aux1505))
-6371 6376 0
-6370 6374 0
394 6376 0
394 -6371 6374 0
394 -6370 6373 0
c ((aux1501 + aux1503 - aux1506)<=0)
6367 -6378 0
6368 -6379 0
6361 -6378 0
6361 6367 -6379 0
6361 6368 -6381 0
6362 -6379 0
6362 6367 -6381 0
6362 6368 -6383 0
c (0<=(aux1501 + aux1503 - aux1506))
-6368 6383 0
-6367 6381 0
-6362 6383 0
-6362 -6368 6381 0
-6362 -6367 6379 0
-6361 6381 0
-6361 -6368 6379 0
-6361 -6367 6378 0
c ((SATLiteral(366) - aux1507 + SATLiteral(261))<=0)
-261 -6385 0
-366 -6385 0
-366 -261 -6386 0
c (0<=(SATLiteral(366) - aux1507 + SATLiteral(261)))
261 6386 0
366 6386 0
366 261 6385 0
c ((SATLiteral(381) - aux1508 + SATLiteral(246))<=0)
-246 -6388 0
-381 -6388 0
-381 -246 -6389 0
c (0<=(SATLiteral(381) - aux1508 + SATLiteral(246)))
246 6389 0
381 6389 0
381 246 6388 0
c ((SATLiteral(96) - aux1509 + SATLiteral(231))<=0)
-231 -6391 0
-96 -6391 0
-96 -231 -6392 0
c (0<=(SATLiteral(96) - aux1509 + SATLiteral(231)))
231 6392 0
96 6392 0
96 231 6391 0
c ((SATLiteral(111) + SATLiteral(126) - aux1510)<=0)
-126 -6394 0
-111 -6394 0
-111 -126 -6395 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1510))
126 6395 0
111 6395 0
111 126 6394 0
c ((SATLiteral(396) + aux1510 - aux1511)<=0)
6394 -6397 0
6395 -6398 0
-396 -6397 0
-396 6394 -6398 0
-396 6395 -6400 0
c (0<=(SATLiteral(396) + aux1510 - aux1511))
-6395 6400 0
-6394 6398 0
396 6400 0
396 -6395 6398 0
396 -6394 6397 0
c ((aux1507 + aux1509 - aux1512)<=0)
6391 -6402 0
6392 -6403 0
6385 -6402 0
6385 6391 -6403 0
6385 6392 -6405 0
6386 -6403 0
6386 6391 -6405 0
6386 6392 -6407 0
c (0<=(aux1507 + aux1509 - aux1512))
-6392 6407 0
-6391 6405 0
-6386 6407 0
-6386 -6392 6405 0
-6386 -6391 6403 0
-6385 6405 0
-6385 -6392 6403 0
-6385 -6391 6402 0
c ((SATLiteral(368) - aux1513 + SATLiteral(263))<=0)
-263 -6409 0
-368 -6409 0
-368 -263 -6410 0
c (0<=(SATLiteral(368) - aux1513 + SATLiteral(263)))
263 6410 0
368 6410 0
368 263 6409 0
c ((SATLiteral(383) - aux1514 + SATLiteral(248))<=0)
-248 -6412 0
-383 -6412 0
-383 -248 -6413 0
c (0<=(SATLiteral(383) - aux1514 + SATLiteral(248)))
248 6413 0
383 6413 0
383 248 6412 0
c ((SATLiteral(98) - aux1515 + SATLiteral(233))<=0)
-233 -6415 0
-98 -6415 0
-98 -233 -6416 0
c (0<=(SATLiteral(98) - aux1515 + SATLiteral(233)))
233 6416 0
98 6416 0
98 233 6415 0
c ((SATLiteral(113) + SATLiteral(128) - aux1516)<=0)
-128 -6418 0
-113 -6418 0
-113 -128 -6419 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1516))
128 6419 0
113 6419 0
113 128 6418 0
c ((SATLiteral(398) + aux1516 - aux1517)<=0)
6418 -6421 0
6419 -6422 0
-398 -6421 0
-398 6418 -6422 0
-398 6419 -6424 0
c (0<=(SATLiteral(398) + aux1516 - aux1517))
-6419 6424 0
-6418 6422 0
398 6424 0
398 -6419 6422 0
398 -6418 6421 0
c ((aux1513 + aux1515 - aux1518)<=0)
6415 -6426 0
6416 -6427 0
6409 -6426 0
6409 6415 -6427 0
6409 6416 -6429 0
6410 -6427 0
6410 6415 -6429 0
6410 6416 -6431 0
c (0<=(aux1513 + aux1515 - aux1518))
-6416 6431 0
-6415 6429 0
-6410 6431 0
-6410 -6416 6429 0
-6410 -6415 6427 0
-6409 6429 0
-6409 -6416 6427 0
-6409 -6415 6426 0
c ((SATLiteral(370) - aux1519 + SATLiteral(265))<=0)
-265 -6433 0
-370 -6433 0
-370 -265 -6434 0
c (0<=(SATLiteral(370) - aux1519 + SATLiteral(265)))
265 6434 0
370 6434 0
370 265 6433 0
c ((SATLiteral(385) - aux1520 + SATLiteral(250))<=0)
-250 -6436 0
-385 -6436 0
-385 -250 -6437 0
c (0<=(SATLiteral(385) - aux1520 + SATLiteral(250)))
250 6437 0
385 6437 0
385 250 6436 0
c ((SATLiteral(100) - aux1521 + SATLiteral(235))<=0)
-235 -6439 0
-100 -6439 0
-100 -235 -6440 0
c (0<=(SATLiteral(100) - aux1521 + SATLiteral(235)))
235 6440 0
100 6440 0
100 235 6439 0
c ((SATLiteral(115) + SATLiteral(130) - aux1522)<=0)
-130 -6442 0
-115 -6442 0
-115 -130 -6443 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1522))
130 6443 0
115 6443 0
115 130 6442 0
c ((SATLiteral(400) + aux1522 - aux1523)<=0)
6442 -6445 0
6443 -6446 0
-400 -6445 0
-400 6442 -6446 0
-400 6443 -6448 0
c (0<=(SATLiteral(400) + aux1522 - aux1523))
-6443 6448 0
-6442 6446 0
400 6448 0
400 -6443 6446 0
400 -6442 6445 0
c ((aux1519 + aux1521 - aux1524)<=0)
6439 -6450 0
6440 -6451 0
6433 -6450 0
6433 6439 -6451 0
6433 6440 -6453 0
6434 -6451 0
6434 6439 -6453 0
6434 6440 -6455 0
c (0<=(aux1519 + aux1521 - aux1524))
-6440 6455 0
-6439 6453 0
-6434 6455 0
-6434 -6440 6453 0
-6434 -6439 6451 0
-6433 6453 0
-6433 -6440 6451 0
-6433 -6439 6450 0
c ((SATLiteral(372) - aux1525 + SATLiteral(267))<=0)
-267 -6457 0
-372 -6457 0
-372 -267 -6458 0
c (0<=(SATLiteral(372) - aux1525 + SATLiteral(267)))
267 6458 0
372 6458 0
372 267 6457 0
c ((SATLiteral(387) - aux1526 + SATLiteral(252))<=0)
-252 -6460 0
-387 -6460 0
-387 -252 -6461 0
c (0<=(SATLiteral(387) - aux1526 + SATLiteral(252)))
252 6461 0
387 6461 0
387 252 6460 0
c ((SATLiteral(102) - aux1527 + SATLiteral(237))<=0)
-237 -6463 0
-102 -6463 0
-102 -237 -6464 0
c (0<=(SATLiteral(102) - aux1527 + SATLiteral(237)))
237 6464 0
102 6464 0
102 237 6463 0
c ((SATLiteral(117) + SATLiteral(132) - aux1528)<=0)
-132 -6466 0
-117 -6466 0
-117 -132 -6467 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1528))
132 6467 0
117 6467 0
117 132 6466 0
c ((SATLiteral(402) + aux1528 - aux1529)<=0)
6466 -6469 0
6467 -6470 0
-402 -6469 0
-402 6466 -6470 0
-402 6467 -6472 0
c (0<=(SATLiteral(402) + aux1528 - aux1529))
-6467 6472 0
-6466 6470 0
402 6472 0
402 -6467 6470 0
402 -6466 6469 0
c ((aux1525 + aux1527 - aux1530)<=0)
6463 -6474 0
6464 -6475 0
6457 -6474 0
6457 6463 -6475 0
6457 6464 -6477 0
6458 -6475 0
6458 6463 -6477 0
6458 6464 -6479 0
c (0<=(aux1525 + aux1527 - aux1530))
-6464 6479 0
-6463 6477 0
-6458 6479 0
-6458 -6464 6477 0
-6458 -6463 6475 0
-6457 6477 0
-6457 -6464 6475 0
-6457 -6463 6474 0
c ((SATLiteral(374) - aux1531 + SATLiteral(269))<=0)
-269 -6481 0
-374 -6481 0
-374 -269 -6482 0
c (0<=(SATLiteral(374) - aux1531 + SATLiteral(269)))
269 6482 0
374 6482 0
374 269 6481 0
c ((SATLiteral(389) - aux1532 + SATLiteral(254))<=0)
-254 -6484 0
-389 -6484 0
-389 -254 -6485 0
c (0<=(SATLiteral(389) - aux1532 + SATLiteral(254)))
254 6485 0
389 6485 0
389 254 6484 0
c ((SATLiteral(104) - aux1533 + SATLiteral(239))<=0)
-239 -6487 0
-104 -6487 0
-104 -239 -6488 0
c (0<=(SATLiteral(104) - aux1533 + SATLiteral(239)))
239 6488 0
104 6488 0
104 239 6487 0
c ((SATLiteral(119) + SATLiteral(134) - aux1534)<=0)
-134 -6490 0
-119 -6490 0
-119 -134 -6491 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1534))
134 6491 0
119 6491 0
119 134 6490 0
c ((SATLiteral(404) + aux1534 - aux1535)<=0)
6490 -6493 0
6491 -6494 0
-404 -6493 0
-404 6490 -6494 0
-404 6491 -6496 0
c (0<=(SATLiteral(404) + aux1534 - aux1535))
-6491 6496 0
-6490 6494 0
404 6496 0
404 -6491 6494 0
404 -6490 6493 0
c ((aux1531 + aux1533 - aux1536)<=0)
6487 -6498 0
6488 -6499 0
6481 -6498 0
6481 6487 -6499 0
6481 6488 -6501 0
6482 -6499 0
6482 6487 -6501 0
6482 6488 -6503 0
c (0<=(aux1531 + aux1533 - aux1536))
-6488 6503 0
-6487 6501 0
-6482 6503 0
-6482 -6488 6501 0
-6482 -6487 6499 0
-6481 6501 0
-6481 -6488 6499 0
-6481 -6487 6498 0
c ((SATLiteral(376) - aux1537 + SATLiteral(271))<=0)
-271 -6505 0
-376 -6505 0
-376 -271 -6506 0
c (0<=(SATLiteral(376) - aux1537 + SATLiteral(271)))
271 6506 0
376 6506 0
376 271 6505 0
c ((SATLiteral(391) - aux1538 + SATLiteral(256))<=0)
-256 -6508 0
-391 -6508 0
-391 -256 -6509 0
c (0<=(SATLiteral(391) - aux1538 + SATLiteral(256)))
256 6509 0
391 6509 0
391 256 6508 0
c ((SATLiteral(106) - aux1539 + SATLiteral(241))<=0)
-241 -6511 0
-106 -6511 0
-106 -241 -6512 0
c (0<=(SATLiteral(106) - aux1539 + SATLiteral(241)))
241 6512 0
106 6512 0
106 241 6511 0
c ((SATLiteral(121) + SATLiteral(136) - aux1540)<=0)
-136 -6514 0
-121 -6514 0
-121 -136 -6515 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1540))
136 6515 0
121 6515 0
121 136 6514 0
c ((SATLiteral(406) + aux1540 - aux1541)<=0)
6514 -6517 0
6515 -6518 0
-406 -6517 0
-406 6514 -6518 0
-406 6515 -6520 0
c (0<=(SATLiteral(406) + aux1540 - aux1541))
-6515 6520 0
-6514 6518 0
406 6520 0
406 -6515 6518 0
406 -6514 6517 0
c ((aux1537 + aux1539 - aux1542)<=0)
6511 -6522 0
6512 -6523 0
6505 -6522 0
6505 6511 -6523 0
6505 6512 -6525 0
6506 -6523 0
6506 6511 -6525 0
6506 6512 -6527 0
c (0<=(aux1537 + aux1539 - aux1542))
-6512 6527 0
-6511 6525 0
-6506 6527 0
-6506 -6512 6525 0
-6506 -6511 6523 0
-6505 6525 0
-6505 -6512 6523 0
-6505 -6511 6522 0
c ((SATLiteral(-375) - aux1543 + SATLiteral(-270))<=0)
270 -6529 0
375 -6529 0
375 270 -6530 0
c (0<=(SATLiteral(-375) - aux1543 + SATLiteral(-270)))
-270 6530 0
-375 6530 0
-375 -270 6529 0
c ((SATLiteral(-390) - aux1544 + SATLiteral(-255))<=0)
255 -6532 0
390 -6532 0
390 255 -6533 0
c (0<=(SATLiteral(-390) - aux1544 + SATLiteral(-255)))
-255 6533 0
-390 6533 0
-390 -255 6532 0
c ((SATLiteral(-105) - aux1545 + SATLiteral(-240))<=0)
240 -6535 0
105 -6535 0
105 240 -6536 0
c (0<=(SATLiteral(-105) - aux1545 + SATLiteral(-240)))
-240 6536 0
-105 6536 0
-105 -240 6535 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1546)<=0)
135 -6538 0
120 -6538 0
120 135 -6539 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1546))
-135 6539 0
-120 6539 0
-120 -135 6538 0
c ((SATLiteral(-405) + aux1546 - aux1547)<=0)
6538 -6541 0
6539 -6542 0
405 -6541 0
405 6538 -6542 0
405 6539 -6544 0
c (0<=(SATLiteral(-405) + aux1546 - aux1547))
-6539 6544 0
-6538 6542 0
-405 6544 0
-405 -6539 6542 0
-405 -6538 6541 0
c ((aux1543 + aux1545 - aux1548)<=0)
6535 -6546 0
6536 -6547 0
6529 -6546 0
6529 6535 -6547 0
6529 6536 -6549 0
6530 -6547 0
6530 6535 -6549 0
6530 6536 -6551 0
c (0<=(aux1543 + aux1545 - aux1548))
-6536 6551 0
-6535 6549 0
-6530 6551 0
-6530 -6536 6549 0
-6530 -6535 6547 0
-6529 6549 0
-6529 -6536 6547 0
-6529 -6535 6546 0
c ((SATLiteral(677) - aux1549 + SATLiteral(572))<=0)
-572 -6553 0
-677 -6553 0
-677 -572 -6554 0
c (0<=(SATLiteral(677) - aux1549 + SATLiteral(572)))
572 6554 0
677 6554 0
677 572 6553 0
c ((SATLiteral(692) - aux1550 + SATLiteral(557))<=0)
-557 -6556 0
-692 -6556 0
-692 -557 -6557 0
c (0<=(SATLiteral(692) - aux1550 + SATLiteral(557)))
557 6557 0
692 6557 0
692 557 6556 0
c (( - aux1551 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6559 0
-407 -6559 0
-407 -542 -6560 0
c (0<=( - aux1551 + SATLiteral(407) + SATLiteral(542)))
542 6560 0
407 6560 0
407 542 6559 0
c (( - aux1552 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6562 0
-422 -6562 0
-422 -437 -6563 0
c (0<=( - aux1552 + SATLiteral(422) + SATLiteral(437)))
437 6563 0
422 6563 0
422 437 6562 0
c ((SATLiteral(707) + aux1552 - aux1553)<=0)
6562 -6565 0
6563 -6566 0
-707 -6565 0
-707 6562 -6566 0
-707 6563 -6568 0
c (0<=(SATLiteral(707) + aux1552 - aux1553))
-6563 6568 0
-6562 6566 0
707 6568 0
707 -6563 6566 0
707 -6562 6565 0
c ((aux1549 + aux1551 - aux1554)<=0)
6559 -6570 0
6560 -6571 0
6553 -6570 0
6553 6559 -6571 0
6553 6560 -6573 0
6554 -6571 0
6554 6559 -6573 0
6554 6560 -6575 0
c (0<=(aux1549 + aux1551 - aux1554))
-6560 6575 0
-6559 6573 0
-6554 6575 0
-6554 -6560 6573 0
-6554 -6559 6571 0
-6553 6573 0
-6553 -6560 6571 0
-6553 -6559 6570 0
c ((SATLiteral(679) - aux1555 + SATLiteral(574))<=0)
-574 -6577 0
-679 -6577 0
-679 -574 -6578 0
c (0<=(SATLiteral(679) - aux1555 + SATLiteral(574)))
574 6578 0
679 6578 0
679 574 6577 0
c ((SATLiteral(694) - aux1556 + SATLiteral(559))<=0)
-559 -6580 0
-694 -6580 0
-694 -559 -6581 0
c (0<=(SATLiteral(694) - aux1556 + SATLiteral(559)))
559 6581 0
694 6581 0
694 559 6580 0
c (( - aux1557 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6583 0
-409 -6583 0
-409 -544 -6584 0
c (0<=( - aux1557 + SATLiteral(409) + SATLiteral(544)))
544 6584 0
409 6584 0
409 544 6583 0
c (( - aux1558 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6586 0
-424 -6586 0
-424 -439 -6587 0
c (0<=( - aux1558 + SATLiteral(424) + SATLiteral(439)))
439 6587 0
424 6587 0
424 439 6586 0
c ((SATLiteral(709) + aux1558 - aux1559)<=0)
6586 -6589 0
6587 -6590 0
-709 -6589 0
-709 6586 -6590 0
-709 6587 -6592 0
c (0<=(SATLiteral(709) + aux1558 - aux1559))
-6587 6592 0
-6586 6590 0
709 6592 0
709 -6587 6590 0
709 -6586 6589 0
c ((aux1555 + aux1557 - aux1560)<=0)
6583 -6594 0
6584 -6595 0
6577 -6594 0
6577 6583 -6595 0
6577 6584 -6597 0
6578 -6595 0
6578 6583 -6597 0
6578 6584 -6599 0
c (0<=(aux1555 + aux1557 - aux1560))
-6584 6599 0
-6583 6597 0
-6578 6599 0
-6578 -6584 6597 0
-6578 -6583 6595 0
-6577 6597 0
-6577 -6584 6595 0
-6577 -6583 6594 0
c ((SATLiteral(681) - aux1561 + SATLiteral(576))<=0)
-576 -6601 0
-681 -6601 0
-681 -576 -6602 0
c (0<=(SATLiteral(681) - aux1561 + SATLiteral(576)))
576 6602 0
681 6602 0
681 576 6601 0
c ((SATLiteral(696) - aux1562 + SATLiteral(561))<=0)
-561 -6604 0
-696 -6604 0
-696 -561 -6605 0
c (0<=(SATLiteral(696) - aux1562 + SATLiteral(561)))
561 6605 0
696 6605 0
696 561 6604 0
c (( - aux1563 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6607 0
-411 -6607 0
-411 -546 -6608 0
c (0<=( - aux1563 + SATLiteral(411) + SATLiteral(546)))
546 6608 0
411 6608 0
411 546 6607 0
c (( - aux1564 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6610 0
-426 -6610 0
-426 -441 -6611 0
c (0<=( - aux1564 + SATLiteral(426) + SATLiteral(441)))
441 6611 0
426 6611 0
426 441 6610 0
c ((SATLiteral(711) + aux1564 - aux1565)<=0)
6610 -6613 0
6611 -6614 0
-711 -6613 0
-711 6610 -6614 0
-711 6611 -6616 0
c (0<=(SATLiteral(711) + aux1564 - aux1565))
-6611 6616 0
-6610 6614 0
711 6616 0
711 -6611 6614 0
711 -6610 6613 0
c ((aux1561 + aux1563 - aux1566)<=0)
6607 -6618 0
6608 -6619 0
6601 -6618 0
6601 6607 -6619 0
6601 6608 -6621 0
6602 -6619 0
6602 6607 -6621 0
6602 6608 -6623 0
c (0<=(aux1561 + aux1563 - aux1566))
-6608 6623 0
-6607 6621 0
-6602 6623 0
-6602 -6608 6621 0
-6602 -6607 6619 0
-6601 6621 0
-6601 -6608 6619 0
-6601 -6607 6618 0
c ((SATLiteral(683) - aux1567 + SATLiteral(578))<=0)
-578 -6625 0
-683 -6625 0
-683 -578 -6626 0
c (0<=(SATLiteral(683) - aux1567 + SATLiteral(578)))
578 6626 0
683 6626 0
683 578 6625 0
c ((SATLiteral(698) - aux1568 + SATLiteral(563))<=0)
-563 -6628 0
-698 -6628 0
-698 -563 -6629 0
c (0<=(SATLiteral(698) - aux1568 + SATLiteral(563)))
563 6629 0
698 6629 0
698 563 6628 0
c (( - aux1569 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6631 0
-413 -6631 0
-413 -548 -6632 0
c (0<=( - aux1569 + SATLiteral(413) + SATLiteral(548)))
548 6632 0
413 6632 0
413 548 6631 0
c (( - aux1570 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6634 0
-428 -6634 0
-428 -443 -6635 0
c (0<=( - aux1570 + SATLiteral(428) + SATLiteral(443)))
443 6635 0
428 6635 0
428 443 6634 0
c ((SATLiteral(713) + aux1570 - aux1571)<=0)
6634 -6637 0
6635 -6638 0
-713 -6637 0
-713 6634 -6638 0
-713 6635 -6640 0
c (0<=(SATLiteral(713) + aux1570 - aux1571))
-6635 6640 0
-6634 6638 0
713 6640 0
713 -6635 6638 0
713 -6634 6637 0
c ((aux1567 + aux1569 - aux1572)<=0)
6631 -6642 0
6632 -6643 0
6625 -6642 0
6625 6631 -6643 0
6625 6632 -6645 0
6626 -6643 0
6626 6631 -6645 0
6626 6632 -6647 0
c (0<=(aux1567 + aux1569 - aux1572))
-6632 6647 0
-6631 6645 0
-6626 6647 0
-6626 -6632 6645 0
-6626 -6631 6643 0
-6625 6645 0
-6625 -6632 6643 0
-6625 -6631 6642 0
c ((SATLiteral(685) - aux1573 + SATLiteral(580))<=0)
-580 -6649 0
-685 -6649 0
-685 -580 -6650 0
c (0<=(SATLiteral(685) - aux1573 + SATLiteral(580)))
580 6650 0
685 6650 0
685 580 6649 0
c ((SATLiteral(700) - aux1574 + SATLiteral(565))<=0)
-565 -6652 0
-700 -6652 0
-700 -565 -6653 0
c (0<=(SATLiteral(700) - aux1574 + SATLiteral(565)))
565 6653 0
700 6653 0
700 565 6652 0
c (( - aux1575 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6655 0
-415 -6655 0
-415 -550 -6656 0
c (0<=( - aux1575 + SATLiteral(415) + SATLiteral(550)))
550 6656 0
415 6656 0
415 550 6655 0
c (( - aux1576 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6658 0
-430 -6658 0
-430 -445 -6659 0
c (0<=( - aux1576 + SATLiteral(430) + SATLiteral(445)))
445 6659 0
430 6659 0
430 445 6658 0
c ((SATLiteral(715) + aux1576 - aux1577)<=0)
6658 -6661 0
6659 -6662 0
-715 -6661 0
-715 6658 -6662 0
-715 6659 -6664 0
c (0<=(SATLiteral(715) + aux1576 - aux1577))
-6659 6664 0
-6658 6662 0
715 6664 0
715 -6659 6662 0
715 -6658 6661 0
c ((aux1573 + aux1575 - aux1578)<=0)
6655 -6666 0
6656 -6667 0
6649 -6666 0
6649 6655 -6667 0
6649 6656 -6669 0
6650 -6667 0
6650 6655 -6669 0
6650 6656 -6671 0
c (0<=(aux1573 + aux1575 - aux1578))
-6656 6671 0
-6655 6669 0
-6650 6671 0
-6650 -6656 6669 0
-6650 -6655 6667 0
-6649 6669 0
-6649 -6656 6667 0
-6649 -6655 6666 0
c ((SATLiteral(687) - aux1579 + SATLiteral(582))<=0)
-582 -6673 0
-687 -6673 0
-687 -582 -6674 0
c (0<=(SATLiteral(687) - aux1579 + SATLiteral(582)))
582 6674 0
687 6674 0
687 582 6673 0
c ((SATLiteral(702) - aux1580 + SATLiteral(567))<=0)
-567 -6676 0
-702 -6676 0
-702 -567 -6677 0
c (0<=(SATLiteral(702) - aux1580 + SATLiteral(567)))
567 6677 0
702 6677 0
702 567 6676 0
c (( - aux1581 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6679 0
-417 -6679 0
-417 -552 -6680 0
c (0<=( - aux1581 + SATLiteral(417) + SATLiteral(552)))
552 6680 0
417 6680 0
417 552 6679 0
c (( - aux1582 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6682 0
-432 -6682 0
-432 -447 -6683 0
c (0<=( - aux1582 + SATLiteral(432) + SATLiteral(447)))
447 6683 0
432 6683 0
432 447 6682 0
c ((SATLiteral(717) + aux1582 - aux1583)<=0)
6682 -6685 0
6683 -6686 0
-717 -6685 0
-717 6682 -6686 0
-717 6683 -6688 0
c (0<=(SATLiteral(717) + aux1582 - aux1583))
-6683 6688 0
-6682 6686 0
717 6688 0
717 -6683 6686 0
717 -6682 6685 0
c ((aux1579 + aux1581 - aux1584)<=0)
6679 -6690 0
6680 -6691 0
6673 -6690 0
6673 6679 -6691 0
6673 6680 -6693 0
6674 -6691 0
6674 6679 -6693 0
6674 6680 -6695 0
c (0<=(aux1579 + aux1581 - aux1584))
-6680 6695 0
-6679 6693 0
-6674 6695 0
-6674 -6680 6693 0
-6674 -6679 6691 0
-6673 6693 0
-6673 -6680 6691 0
-6673 -6679 6690 0
c ((SATLiteral(689) - aux1585 + SATLiteral(584))<=0)
-584 -6697 0
-689 -6697 0
-689 -584 -6698 0
c (0<=(SATLiteral(689) - aux1585 + SATLiteral(584)))
584 6698 0
689 6698 0
689 584 6697 0
c ((SATLiteral(704) - aux1586 + SATLiteral(569))<=0)
-569 -6700 0
-704 -6700 0
-704 -569 -6701 0
c (0<=(SATLiteral(704) - aux1586 + SATLiteral(569)))
569 6701 0
704 6701 0
704 569 6700 0
c (( - aux1587 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6703 0
-419 -6703 0
-419 -554 -6704 0
c (0<=( - aux1587 + SATLiteral(419) + SATLiteral(554)))
554 6704 0
419 6704 0
419 554 6703 0
c (( - aux1588 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6706 0
-434 -6706 0
-434 -449 -6707 0
c (0<=( - aux1588 + SATLiteral(434) + SATLiteral(449)))
449 6707 0
434 6707 0
434 449 6706 0
c ((SATLiteral(719) + aux1588 - aux1589)<=0)
6706 -6709 0
6707 -6710 0
-719 -6709 0
-719 6706 -6710 0
-719 6707 -6712 0
c (0<=(SATLiteral(719) + aux1588 - aux1589))
-6707 6712 0
-6706 6710 0
719 6712 0
719 -6707 6710 0
719 -6706 6709 0
c ((aux1585 + aux1587 - aux1590)<=0)
6703 -6714 0
6704 -6715 0
6697 -6714 0
6697 6703 -6715 0
6697 6704 -6717 0
6698 -6715 0
6698 6703 -6717 0
6698 6704 -6719 0
c (0<=(aux1585 + aux1587 - aux1590))
-6704 6719 0
-6703 6717 0
-6698 6719 0
-6698 -6704 6717 0
-6698 -6703 6715 0
-6697 6717 0
-6697 -6704 6715 0
-6697 -6703 6714 0
c ((SATLiteral(691) - aux1591 + SATLiteral(586))<=0)
-586 -6721 0
-691 -6721 0
-691 -586 -6722 0
c (0<=(SATLiteral(691) - aux1591 + SATLiteral(586)))
586 6722 0
691 6722 0
691 586 6721 0
c ((SATLiteral(706) - aux1592 + SATLiteral(571))<=0)
-571 -6724 0
-706 -6724 0
-706 -571 -6725 0
c (0<=(SATLiteral(706) - aux1592 + SATLiteral(571)))
571 6725 0
706 6725 0
706 571 6724 0
c (( - aux1593 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6727 0
-421 -6727 0
-421 -556 -6728 0
c (0<=( - aux1593 + SATLiteral(421) + SATLiteral(556)))
556 6728 0
421 6728 0
421 556 6727 0
c (( - aux1594 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6730 0
-436 -6730 0
-436 -451 -6731 0
c (0<=( - aux1594 + SATLiteral(436) + SATLiteral(451)))
451 6731 0
436 6731 0
436 451 6730 0
c ((SATLiteral(721) + aux1594 - aux1595)<=0)
6730 -6733 0
6731 -6734 0
-721 -6733 0
-721 6730 -6734 0
-721 6731 -6736 0
c (0<=(SATLiteral(721) + aux1594 - aux1595))
-6731 6736 0
-6730 6734 0
721 6736 0
721 -6731 6734 0
721 -6730 6733 0
c ((aux1591 + aux1593 - aux1596)<=0)
6727 -6738 0
6728 -6739 0
6721 -6738 0
6721 6727 -6739 0
6721 6728 -6741 0
6722 -6739 0
6722 6727 -6741 0
6722 6728 -6743 0
c (0<=(aux1591 + aux1593 - aux1596))
-6728 6743 0
-6727 6741 0
-6722 6743 0
-6722 -6728 6741 0
-6722 -6727 6739 0
-6721 6741 0
-6721 -6728 6739 0
-6721 -6727 6738 0
c ((SATLiteral(-690) - aux1597 + SATLiteral(-585))<=0)
585 -6745 0
690 -6745 0
690 585 -6746 0
c (0<=(SATLiteral(-690) - aux1597 + SATLiteral(-585)))
-585 6746 0
-690 6746 0
-690 -585 6745 0
c ((SATLiteral(-705) - aux1598 + SATLiteral(-570))<=0)
570 -6748 0
705 -6748 0
705 570 -6749 0
c (0<=(SATLiteral(-705) - aux1598 + SATLiteral(-570)))
-570 6749 0
-705 6749 0
-705 -570 6748 0
c (( - aux1599 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6751 0
420 -6751 0
420 555 -6752 0
c (0<=( - aux1599 + SATLiteral(-420) + SATLiteral(-555)))
-555 6752 0
-420 6752 0
-420 -555 6751 0
c (( - aux1600 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6754 0
435 -6754 0
435 450 -6755 0
c (0<=( - aux1600 + SATLiteral(-435) + SATLiteral(-450)))
-450 6755 0
-435 6755 0
-435 -450 6754 0
c ((SATLiteral(-720) + aux1600 - aux1601)<=0)
6754 -6757 0
6755 -6758 0
720 -6757 0
720 6754 -6758 0
720 6755 -6760 0
c (0<=(SATLiteral(-720) + aux1600 - aux1601))
-6755 6760 0
-6754 6758 0
-720 6760 0
-720 -6755 6758 0
-720 -6754 6757 0
c ((aux1597 + aux1599 - aux1602)<=0)
6751 -6762 0
6752 -6763 0
6745 -6762 0
6745 6751 -6763 0
6745 6752 -6765 0
6746 -6763 0
6746 6751 -6765 0
6746 6752 -6767 0
c (0<=(aux1597 + aux1599 - aux1602))
-6752 6767 0
-6751 6765 0
-6746 6767 0
-6746 -6752 6765 0
-6746 -6751 6763 0
-6745 6765 0
-6745 -6752 6763 0
-6745 -6751 6762 0
c ((SATLiteral(722) - aux1603 + SATLiteral(617))<=0)
-617 -6769 0
-722 -6769 0
-722 -617 -6770 0
c (0<=(SATLiteral(722) - aux1603 + SATLiteral(617)))
617 6770 0
722 6770 0
722 617 6769 0
c ((SATLiteral(737) - aux1604 + SATLiteral(602))<=0)
-602 -6772 0
-737 -6772 0
-737 -602 -6773 0
c (0<=(SATLiteral(737) - aux1604 + SATLiteral(602)))
602 6773 0
737 6773 0
737 602 6772 0
c (( - aux1605 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6775 0
-452 -6775 0
-452 -587 -6776 0
c (0<=( - aux1605 + SATLiteral(452) + SATLiteral(587)))
587 6776 0
452 6776 0
452 587 6775 0
c (( - aux1606 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6778 0
-467 -6778 0
-467 -482 -6779 0
c (0<=( - aux1606 + SATLiteral(467) + SATLiteral(482)))
482 6779 0
467 6779 0
467 482 6778 0
c ((SATLiteral(752) + aux1606 - aux1607)<=0)
6778 -6781 0
6779 -6782 0
-752 -6781 0
-752 6778 -6782 0
-752 6779 -6784 0
c (0<=(SATLiteral(752) + aux1606 - aux1607))
-6779 6784 0
-6778 6782 0
752 6784 0
752 -6779 6782 0
752 -6778 6781 0
c ((aux1603 + aux1605 - aux1608)<=0)
6775 -6786 0
6776 -6787 0
6769 -6786 0
6769 6775 -6787 0
6769 6776 -6789 0
6770 -6787 0
6770 6775 -6789 0
6770 6776 -6791 0
c (0<=(aux1603 + aux1605 - aux1608))
-6776 6791 0
-6775 6789 0
-6770 6791 0
-6770 -6776 6789 0
-6770 -6775 6787 0
-6769 6789 0
-6769 -6776 6787 0
-6769 -6775 6786 0
c ((SATLiteral(724) - aux1609 + SATLiteral(619))<=0)
-619 -6793 0
-724 -6793 0
-724 -619 -6794 0
c (0<=(SATLiteral(724) - aux1609 + SATLiteral(619)))
619 6794 0
724 6794 0
724 619 6793 0
c ((SATLiteral(739) - aux1610 + SATLiteral(604))<=0)
-604 -6796 0
-739 -6796 0
-739 -604 -6797 0
c (0<=(SATLiteral(739) - aux1610 + SATLiteral(604)))
604 6797 0
739 6797 0
739 604 6796 0
c (( - aux1611 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6799 0
-454 -6799 0
-454 -589 -6800 0
c (0<=( - aux1611 + SATLiteral(454) + SATLiteral(589)))
589 6800 0
454 6800 0
454 589 6799 0
c (( - aux1612 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6802 0
-469 -6802 0
-469 -484 -6803 0
c (0<=( - aux1612 + SATLiteral(469) + SATLiteral(484)))
484 6803 0
469 6803 0
469 484 6802 0
c ((SATLiteral(754) + aux1612 - aux1613)<=0)
6802 -6805 0
6803 -6806 0
-754 -6805 0
-754 6802 -6806 0
-754 6803 -6808 0
c (0<=(SATLiteral(754) + aux1612 - aux1613))
-6803 6808 0
-6802 6806 0
754 6808 0
754 -6803 6806 0
754 -6802 6805 0
c ((aux1609 + aux1611 - aux1614)<=0)
6799 -6810 0
6800 -6811 0
6793 -6810 0
6793 6799 -6811 0
6793 6800 -6813 0
6794 -6811 0
6794 6799 -6813 0
6794 6800 -6815 0
c (0<=(aux1609 + aux1611 - aux1614))
-6800 6815 0
-6799 6813 0
-6794 6815 0
-6794 -6800 6813 0
-6794 -6799 6811 0
-6793 6813 0
-6793 -6800 6811 0
-6793 -6799 6810 0
c ((SATLiteral(726) - aux1615 + SATLiteral(621))<=0)
-621 -6817 0
-726 -6817 0
-726 -621 -6818 0
c (0<=(SATLiteral(726) - aux1615 + SATLiteral(621)))
621 6818 0
726 6818 0
726 621 6817 0
c ((SATLiteral(741) - aux1616 + SATLiteral(606))<=0)
-606 -6820 0
-741 -6820 0
-741 -606 -6821 0
c (0<=(SATLiteral(741) - aux1616 + SATLiteral(606)))
606 6821 0
741 6821 0
741 606 6820 0
c (( - aux1617 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6823 0
-456 -6823 0
-456 -591 -6824 0
c (0<=( - aux1617 + SATLiteral(456) + SATLiteral(591)))
591 6824 0
456 6824 0
456 591 6823 0
c (( - aux1618 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6826 0
-471 -6826 0
-471 -486 -6827 0
c (0<=( - aux1618 + SATLiteral(471) + SATLiteral(486)))
486 6827 0
471 6827 0
471 486 6826 0
c ((SATLiteral(756) + aux1618 - aux1619)<=0)
6826 -6829 0
6827 -6830 0
-756 -6829 0
-756 6826 -6830 0
-756 6827 -6832 0
c (0<=(SATLiteral(756) + aux1618 - aux1619))
-6827 6832 0
-6826 6830 0
756 6832 0
756 -6827 6830 0
756 -6826 6829 0
c ((aux1615 + aux1617 - aux1620)<=0)
6823 -6834 0
6824 -6835 0
6817 -6834 0
6817 6823 -6835 0
6817 6824 -6837 0
6818 -6835 0
6818 6823 -6837 0
6818 6824 -6839 0
c (0<=(aux1615 + aux1617 - aux1620))
-6824 6839 0
-6823 6837 0
-6818 6839 0
-6818 -6824 6837 0
-6818 -6823 6835 0
-6817 6837 0
-6817 -6824 6835 0
-6817 -6823 6834 0
c ((SATLiteral(728) - aux1621 + SATLiteral(623))<=0)
-623 -6841 0
-728 -6841 0
-728 -623 -6842 0
c (0<=(SATLiteral(728) - aux1621 + SATLiteral(623)))
623 6842 0
728 6842 0
728 623 6841 0
c ((SATLiteral(743) - aux1622 + SATLiteral(608))<=0)
-608 -6844 0
-743 -6844 0
-743 -608 -6845 0
c (0<=(SATLiteral(743) - aux1622 + SATLiteral(608)))
608 6845 0
743 6845 0
743 608 6844 0
c (( - aux1623 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6847 0
-458 -6847 0
-458 -593 -6848 0
c (0<=( - aux1623 + SATLiteral(458) + SATLiteral(593)))
593 6848 0
458 6848 0
458 593 6847 0
c (( - aux1624 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6850 0
-473 -6850 0
-473 -488 -6851 0
c (0<=( - aux1624 + SATLiteral(473) + SATLiteral(488)))
488 6851 0
473 6851 0
473 488 6850 0
c ((SATLiteral(758) + aux1624 - aux1625)<=0)
6850 -6853 0
6851 -6854 0
-758 -6853 0
-758 6850 -6854 0
-758 6851 -6856 0
c (0<=(SATLiteral(758) + aux1624 - aux1625))
-6851 6856 0
-6850 6854 0
758 6856 0
758 -6851 6854 0
758 -6850 6853 0
c ((aux1621 + aux1623 - aux1626)<=0)
6847 -6858 0
6848 -6859 0
6841 -6858 0
6841 6847 -6859 0
6841 6848 -6861 0
6842 -6859 0
6842 6847 -6861 0
6842 6848 -6863 0
c (0<=(aux1621 + aux1623 - aux1626))
-6848 6863 0
-6847 6861 0
-6842 6863 0
-6842 -6848 6861 0
-6842 -6847 6859 0
-6841 6861 0
-6841 -6848 6859 0
-6841 -6847 6858 0
c ((SATLiteral(730) - aux1627 + SATLiteral(625))<=0)
-625 -6865 0
-730 -6865 0
-730 -625 -6866 0
c (0<=(SATLiteral(730) - aux1627 + SATLiteral(625)))
625 6866 0
730 6866 0
730 625 6865 0
c ((SATLiteral(745) - aux1628 + SATLiteral(610))<=0)
-610 -6868 0
-745 -6868 0
-745 -610 -6869 0
c (0<=(SATLiteral(745) - aux1628 + SATLiteral(610)))
610 6869 0
745 6869 0
745 610 6868 0
c (( - aux1629 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6871 0
-460 -6871 0
-460 -595 -6872 0
c (0<=( - aux1629 + SATLiteral(460) + SATLiteral(595)))
595 6872 0
460 6872 0
460 595 6871 0
c (( - aux1630 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6874 0
-475 -6874 0
-475 -490 -6875 0
c (0<=( - aux1630 + SATLiteral(475) + SATLiteral(490)))
490 6875 0
475 6875 0
475 490 6874 0
c ((SATLiteral(760) + aux1630 - aux1631)<=0)
6874 -6877 0
6875 -6878 0
-760 -6877 0
-760 6874 -6878 0
-760 6875 -6880 0
c (0<=(SATLiteral(760) + aux1630 - aux1631))
-6875 6880 0
-6874 6878 0
760 6880 0
760 -6875 6878 0
760 -6874 6877 0
c ((aux1627 + aux1629 - aux1632)<=0)
6871 -6882 0
6872 -6883 0
6865 -6882 0
6865 6871 -6883 0
6865 6872 -6885 0
6866 -6883 0
6866 6871 -6885 0
6866 6872 -6887 0
c (0<=(aux1627 + aux1629 - aux1632))
-6872 6887 0
-6871 6885 0
-6866 6887 0
-6866 -6872 6885 0
-6866 -6871 6883 0
-6865 6885 0
-6865 -6872 6883 0
-6865 -6871 6882 0
c ((SATLiteral(732) - aux1633 + SATLiteral(627))<=0)
-627 -6889 0
-732 -6889 0
-732 -627 -6890 0
c (0<=(SATLiteral(732) - aux1633 + SATLiteral(627)))
627 6890 0
732 6890 0
732 627 6889 0
c ((SATLiteral(747) - aux1634 + SATLiteral(612))<=0)
-612 -6892 0
-747 -6892 0
-747 -612 -6893 0
c (0<=(SATLiteral(747) - aux1634 + SATLiteral(612)))
612 6893 0
747 6893 0
747 612 6892 0
c (( - aux1635 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6895 0
-462 -6895 0
-462 -597 -6896 0
c (0<=( - aux1635 + SATLiteral(462) + SATLiteral(597)))
597 6896 0
462 6896 0
462 597 6895 0
c (( - aux1636 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6898 0
-477 -6898 0
-477 -492 -6899 0
c (0<=( - aux1636 + SATLiteral(477) + SATLiteral(492)))
492 6899 0
477 6899 0
477 492 6898 0
c ((SATLiteral(762) + aux1636 - aux1637)<=0)
6898 -6901 0
6899 -6902 0
-762 -6901 0
-762 6898 -6902 0
-762 6899 -6904 0
c (0<=(SATLiteral(762) + aux1636 - aux1637))
-6899 6904 0
-6898 6902 0
762 6904 0
762 -6899 6902 0
762 -6898 6901 0
c ((aux1633 + aux1635 - aux1638)<=0)
6895 -6906 0
6896 -6907 0
6889 -6906 0
6889 6895 -6907 0
6889 6896 -6909 0
6890 -6907 0
6890 6895 -6909 0
6890 6896 -6911 0
c (0<=(aux1633 + aux1635 - aux1638))
-6896 6911 0
-6895 6909 0
-6890 6911 0
-6890 -6896 6909 0
-6890 -6895 6907 0
-6889 6909 0
-6889 -6896 6907 0
-6889 -6895 6906 0
c ((SATLiteral(734) - aux1639 + SATLiteral(629))<=0)
-629 -6913 0
-734 -6913 0
-734 -629 -6914 0
c (0<=(SATLiteral(734) - aux1639 + SATLiteral(629)))
629 6914 0
734 6914 0
734 629 6913 0
c ((SATLiteral(749) - aux1640 + SATLiteral(614))<=0)
-614 -6916 0
-749 -6916 0
-749 -614 -6917 0
c (0<=(SATLiteral(749) - aux1640 + SATLiteral(614)))
614 6917 0
749 6917 0
749 614 6916 0
c (( - aux1641 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6919 0
-464 -6919 0
-464 -599 -6920 0
c (0<=( - aux1641 + SATLiteral(464) + SATLiteral(599)))
599 6920 0
464 6920 0
464 599 6919 0
c (( - aux1642 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6922 0
-479 -6922 0
-479 -494 -6923 0
c (0<=( - aux1642 + SATLiteral(479) + SATLiteral(494)))
494 6923 0
479 6923 0
479 494 6922 0
c ((SATLiteral(764) + aux1642 - aux1643)<=0)
6922 -6925 0
6923 -6926 0
-764 -6925 0
-764 6922 -6926 0
-764 6923 -6928 0
c (0<=(SATLiteral(764) + aux1642 - aux1643))
-6923 6928 0
-6922 6926 0
764 6928 0
764 -6923 6926 0
764 -6922 6925 0
c ((aux1639 + aux1641 - aux1644)<=0)
6919 -6930 0
6920 -6931 0
6913 -6930 0
6913 6919 -6931 0
6913 6920 -6933 0
6914 -6931 0
6914 6919 -6933 0
6914 6920 -6935 0
c (0<=(aux1639 + aux1641 - aux1644))
-6920 6935 0
-6919 6933 0
-6914 6935 0
-6914 -6920 6933 0
-6914 -6919 6931 0
-6913 6933 0
-6913 -6920 6931 0
-6913 -6919 6930 0
c ((SATLiteral(736) - aux1645 + SATLiteral(631))<=0)
-631 -6937 0
-736 -6937 0
-736 -631 -6938 0
c (0<=(SATLiteral(736) - aux1645 + SATLiteral(631)))
631 6938 0
736 6938 0
736 631 6937 0
c ((SATLiteral(751) - aux1646 + SATLiteral(616))<=0)
-616 -6940 0
-751 -6940 0
-751 -616 -6941 0
c (0<=(SATLiteral(751) - aux1646 + SATLiteral(616)))
616 6941 0
751 6941 0
751 616 6940 0
c (( - aux1647 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6943 0
-466 -6943 0
-466 -601 -6944 0
c (0<=( - aux1647 + SATLiteral(466) + SATLiteral(601)))
601 6944 0
466 6944 0
466 601 6943 0
c (( - aux1648 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6946 0
-481 -6946 0
-481 -496 -6947 0
c (0<=( - aux1648 + SATLiteral(481) + SATLiteral(496)))
496 6947 0
481 6947 0
481 496 6946 0
c ((SATLiteral(766) + aux1648 - aux1649)<=0)
6946 -6949 0
6947 -6950 0
-766 -6949 0
-766 6946 -6950 0
-766 6947 -6952 0
c (0<=(SATLiteral(766) + aux1648 - aux1649))
-6947 6952 0
-6946 6950 0
766 6952 0
766 -6947 6950 0
766 -6946 6949 0
c ((aux1645 + aux1647 - aux1650)<=0)
6943 -6954 0
6944 -6955 0
6937 -6954 0
6937 6943 -6955 0
6937 6944 -6957 0
6938 -6955 0
6938 6943 -6957 0
6938 6944 -6959 0
c (0<=(aux1645 + aux1647 - aux1650))
-6944 6959 0
-6943 6957 0
-6938 6959 0
-6938 -6944 6957 0
-6938 -6943 6955 0
-6937 6957 0
-6937 -6944 6955 0
-6937 -6943 6954 0
c ((SATLiteral(-735) - aux1651 + SATLiteral(-630))<=0)
630 -6961 0
735 -6961 0
735 630 -6962 0
c (0<=(SATLiteral(-735) - aux1651 + SATLiteral(-630)))
-630 6962 0
-735 6962 0
-735 -630 6961 0
c ((SATLiteral(-750) - aux1652 + SATLiteral(-615))<=0)
615 -6964 0
750 -6964 0
750 615 -6965 0
c (0<=(SATLiteral(-750) - aux1652 + SATLiteral(-615)))
-615 6965 0
-750 6965 0
-750 -615 6964 0
c (( - aux1653 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6967 0
465 -6967 0
465 600 -6968 0
c (0<=( - aux1653 + SATLiteral(-465) + SATLiteral(-600)))
-600 6968 0
-465 6968 0
-465 -600 6967 0
c (( - aux1654 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6970 0
480 -6970 0
480 495 -6971 0
c (0<=( - aux1654 + SATLiteral(-480) + SATLiteral(-495)))
-495 6971 0
-480 6971 0
-480 -495 6970 0
c ((SATLiteral(-765) + aux1654 - aux1655)<=0)
6970 -6973 0
6971 -6974 0
765 -6973 0
765 6970 -6974 0
765 6971 -6976 0
c (0<=(SATLiteral(-765) + aux1654 - aux1655))
-6971 6976 0
-6970 6974 0
-765 6976 0
-765 -6971 6974 0
-765 -6970 6973 0
c ((aux1651 + aux1653 - aux1656)<=0)
6967 -6978 0
6968 -6979 0
6961 -6978 0
6961 6967 -6979 0
6961 6968 -6981 0
6962 -6979 0
6962 6967 -6981 0
6962 6968 -6983 0
c (0<=(aux1651 + aux1653 - aux1656))
-6968 6983 0
-6967 6981 0
-6962 6983 0
-6962 -6968 6981 0
-6962 -6967 6979 0
-6961 6981 0
-6961 -6968 6979 0
-6961 -6967 6978 0
c ((SATLiteral(767) - aux1657 + SATLiteral(662))<=0)
-662 -6985 0
-767 -6985 0
-767 -662 -6986 0
c (0<=(SATLiteral(767) - aux1657 + SATLiteral(662)))
662 6986 0
767 6986 0
767 662 6985 0
c ((SATLiteral(782) - aux1658 + SATLiteral(647))<=0)
-647 -6988 0
-782 -6988 0
-782 -647 -6989 0
c (0<=(SATLiteral(782) - aux1658 + SATLiteral(647)))
647 6989 0
782 6989 0
782 647 6988 0
c (( - aux1659 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6991 0
-497 -6991 0
-497 -632 -6992 0
c (0<=( - aux1659 + SATLiteral(497) + SATLiteral(632)))
632 6992 0
497 6992 0
497 632 6991 0
c (( - aux1660 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6994 0
-512 -6994 0
-512 -527 -6995 0
c (0<=( - aux1660 + SATLiteral(512) + SATLiteral(527)))
527 6995 0
512 6995 0
512 527 6994 0
c ((SATLiteral(797) + aux1660 - aux1661)<=0)
6994 -6997 0
6995 -6998 0
-797 -6997 0
-797 6994 -6998 0
-797 6995 -7000 0
c (0<=(SATLiteral(797) + aux1660 - aux1661))
-6995 7000 0
-6994 6998 0
797 7000 0
797 -6995 6998 0
797 -6994 6997 0
c ((aux1657 + aux1659 - aux1662)<=0)
6991 -7002 0
6992 -7003 0
6985 -7002 0
6985 6991 -7003 0
6985 6992 -7005 0
6986 -7003 0
6986 6991 -7005 0
6986 6992 -7007 0
c (0<=(aux1657 + aux1659 - aux1662))
-6992 7007 0
-6991 7005 0
-6986 7007 0
-6986 -6992 7005 0
-6986 -6991 7003 0
-6985 7005 0
-6985 -6992 7003 0
-6985 -6991 7002 0
c ((SATLiteral(769) - aux1663 + SATLiteral(664))<=0)
-664 -7009 0
-769 -7009 0
-769 -664 -7010 0
c (0<=(SATLiteral(769) - aux1663 + SATLiteral(664)))
664 7010 0
769 7010 0
769 664 7009 0
c ((SATLiteral(784) - aux1664 + SATLiteral(649))<=0)
-649 -7012 0
-784 -7012 0
-784 -649 -7013 0
c (0<=(SATLiteral(784) - aux1664 + SATLiteral(649)))
649 7013 0
784 7013 0
784 649 7012 0
c (( - aux1665 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -7015 0
-499 -7015 0
-499 -634 -7016 0
c (0<=( - aux1665 + SATLiteral(499) + SATLiteral(634)))
634 7016 0
499 7016 0
499 634 7015 0
c (( - aux1666 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -7018 0
-514 -7018 0
-514 -529 -7019 0
c (0<=( - aux1666 + SATLiteral(514) + SATLiteral(529)))
529 7019 0
514 7019 0
514 529 7018 0
c ((SATLiteral(799) + aux1666 - aux1667)<=0)
7018 -7021 0
7019 -7022 0
-799 -7021 0
-799 7018 -7022 0
-799 7019 -7024 0
c (0<=(SATLiteral(799) + aux1666 - aux1667))
-7019 7024 0
-7018 7022 0
799 7024 0
799 -7019 7022 0
799 -7018 7021 0
c ((aux1663 + aux1665 - aux1668)<=0)
7015 -7026 0
7016 -7027 0
7009 -7026 0
7009 7015 -7027 0
7009 7016 -7029 0
7010 -7027 0
7010 7015 -7029 0
7010 7016 -7031 0
c (0<=(aux1663 + aux1665 - aux1668))
-7016 7031 0
-7015 7029 0
-7010 7031 0
-7010 -7016 7029 0
-7010 -7015 7027 0
-7009 7029 0
-7009 -7016 7027 0
-7009 -7015 7026 0
c ((SATLiteral(771) - aux1669 + SATLiteral(666))<=0)
-666 -7033 0
-771 -7033 0
-771 -666 -7034 0
c (0<=(SATLiteral(771) - aux1669 + SATLiteral(666)))
666 7034 0
771 7034 0
771 666 7033 0
c ((SATLiteral(786) - aux1670 + SATLiteral(651))<=0)
-651 -7036 0
-786 -7036 0
-786 -651 -7037 0
c (0<=(SATLiteral(786) - aux1670 + SATLiteral(651)))
651 7037 0
786 7037 0
786 651 7036 0
c (( - aux1671 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -7039 0
-501 -7039 0
-501 -636 -7040 0
c (0<=( - aux1671 + SATLiteral(501) + SATLiteral(636)))
636 7040 0
501 7040 0
501 636 7039 0
c (( - aux1672 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -7042 0
-516 -7042 0
-516 -531 -7043 0
c (0<=( - aux1672 + SATLiteral(516) + SATLiteral(531)))
531 7043 0
516 7043 0
516 531 7042 0
c ((SATLiteral(801) + aux1672 - aux1673)<=0)
7042 -7045 0
7043 -7046 0
-801 -7045 0
-801 7042 -7046 0
-801 7043 -7048 0
c (0<=(SATLiteral(801) + aux1672 - aux1673))
-7043 7048 0
-7042 7046 0
801 7048 0
801 -7043 7046 0
801 -7042 7045 0
c ((aux1669 + aux1671 - aux1674)<=0)
7039 -7050 0
7040 -7051 0
7033 -7050 0
7033 7039 -7051 0
7033 7040 -7053 0
7034 -7051 0
7034 7039 -7053 0
7034 7040 -7055 0
c (0<=(aux1669 + aux1671 - aux1674))
-7040 7055 0
-7039 7053 0
-7034 7055 0
-7034 -7040 7053 0
-7034 -7039 7051 0
-7033 7053 0
-7033 -7040 7051 0
-7033 -7039 7050 0
c ((SATLiteral(773) - aux1675 + SATLiteral(668))<=0)
-668 -7057 0
-773 -7057 0
-773 -668 -7058 0
c (0<=(SATLiteral(773) - aux1675 + SATLiteral(668)))
668 7058 0
773 7058 0
773 668 7057 0
c ((SATLiteral(788) - aux1676 + SATLiteral(653))<=0)
-653 -7060 0
-788 -7060 0
-788 -653 -7061 0
c (0<=(SATLiteral(788) - aux1676 + SATLiteral(653)))
653 7061 0
788 7061 0
788 653 7060 0
c (( - aux1677 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -7063 0
-503 -7063 0
-503 -638 -7064 0
c (0<=( - aux1677 + SATLiteral(503) + SATLiteral(638)))
638 7064 0
503 7064 0
503 638 7063 0
c (( - aux1678 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -7066 0
-518 -7066 0
-518 -533 -7067 0
c (0<=( - aux1678 + SATLiteral(518) + SATLiteral(533)))
533 7067 0
518 7067 0
518 533 7066 0
c ((SATLiteral(803) + aux1678 - aux1679)<=0)
7066 -7069 0
7067 -7070 0
-803 -7069 0
-803 7066 -7070 0
-803 7067 -7072 0
c (0<=(SATLiteral(803) + aux1678 - aux1679))
-7067 7072 0
-7066 7070 0
803 7072 0
803 -7067 7070 0
803 -7066 7069 0
c ((aux1675 + aux1677 - aux1680)<=0)
7063 -7074 0
7064 -7075 0
7057 -7074 0
7057 7063 -7075 0
7057 7064 -7077 0
7058 -7075 0
7058 7063 -7077 0
7058 7064 -7079 0
c (0<=(aux1675 + aux1677 - aux1680))
-7064 7079 0
-7063 7077 0
-7058 7079 0
-7058 -7064 7077 0
-7058 -7063 7075 0
-7057 7077 0
-7057 -7064 7075 0
-7057 -7063 7074 0
c ((SATLiteral(775) - aux1681 + SATLiteral(670))<=0)
-670 -7081 0
-775 -7081 0
-775 -670 -7082 0
c (0<=(SATLiteral(775) - aux1681 + SATLiteral(670)))
670 7082 0
775 7082 0
775 670 7081 0
c ((SATLiteral(790) - aux1682 + SATLiteral(655))<=0)
-655 -7084 0
-790 -7084 0
-790 -655 -7085 0
c (0<=(SATLiteral(790) - aux1682 + SATLiteral(655)))
655 7085 0
790 7085 0
790 655 7084 0
c (( - aux1683 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -7087 0
-505 -7087 0
-505 -640 -7088 0
c (0<=( - aux1683 + SATLiteral(505) + SATLiteral(640)))
640 7088 0
505 7088 0
505 640 7087 0
c (( - aux1684 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -7090 0
-520 -7090 0
-520 -535 -7091 0
c (0<=( - aux1684 + SATLiteral(520) + SATLiteral(535)))
535 7091 0
520 7091 0
520 535 7090 0
c ((SATLiteral(805) + aux1684 - aux1685)<=0)
7090 -7093 0
7091 -7094 0
-805 -7093 0
-805 7090 -7094 0
-805 7091 -7096 0
c (0<=(SATLiteral(805) + aux1684 - aux1685))
-7091 7096 0
-7090 7094 0
805 7096 0
805 -7091 7094 0
805 -7090 7093 0
c ((aux1681 + aux1683 - aux1686)<=0)
7087 -7098 0
7088 -7099 0
7081 -7098 0
7081 7087 -7099 0
7081 7088 -7101 0
7082 -7099 0
7082 7087 -7101 0
7082 7088 -7103 0
c (0<=(aux1681 + aux1683 - aux1686))
-7088 7103 0
-7087 7101 0
-7082 7103 0
-7082 -7088 7101 0
-7082 -7087 7099 0
-7081 7101 0
-7081 -7088 7099 0
-7081 -7087 7098 0
c ((SATLiteral(777) - aux1687 + SATLiteral(672))<=0)
-672 -7105 0
-777 -7105 0
-777 -672 -7106 0
c (0<=(SATLiteral(777) - aux1687 + SATLiteral(672)))
672 7106 0
777 7106 0
777 672 7105 0
c ((SATLiteral(792) - aux1688 + SATLiteral(657))<=0)
-657 -7108 0
-792 -7108 0
-792 -657 -7109 0
c (0<=(SATLiteral(792) - aux1688 + SATLiteral(657)))
657 7109 0
792 7109 0
792 657 7108 0
c (( - aux1689 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -7111 0
-507 -7111 0
-507 -642 -7112 0
c (0<=( - aux1689 + SATLiteral(507) + SATLiteral(642)))
642 7112 0
507 7112 0
507 642 7111 0
c (( - aux1690 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -7114 0
-522 -7114 0
-522 -537 -7115 0
c (0<=( - aux1690 + SATLiteral(522) + SATLiteral(537)))
537 7115 0
522 7115 0
522 537 7114 0
c ((SATLiteral(807) + aux1690 - aux1691)<=0)
7114 -7117 0
7115 -7118 0
-807 -7117 0
-807 7114 -7118 0
-807 7115 -7120 0
c (0<=(SATLiteral(807) + aux1690 - aux1691))
-7115 7120 0
-7114 7118 0
807 7120 0
807 -7115 7118 0
807 -7114 7117 0
c ((aux1687 + aux1689 - aux1692)<=0)
7111 -7122 0
7112 -7123 0
7105 -7122 0
7105 7111 -7123 0
7105 7112 -7125 0
7106 -7123 0
7106 7111 -7125 0
7106 7112 -7127 0
c (0<=(aux1687 + aux1689 - aux1692))
-7112 7127 0
-7111 7125 0
-7106 7127 0
-7106 -7112 7125 0
-7106 -7111 7123 0
-7105 7125 0
-7105 -7112 7123 0
-7105 -7111 7122 0
c ((SATLiteral(779) - aux1693 + SATLiteral(674))<=0)
-674 -7129 0
-779 -7129 0
-779 -674 -7130 0
c (0<=(SATLiteral(779) - aux1693 + SATLiteral(674)))
674 7130 0
779 7130 0
779 674 7129 0
c ((SATLiteral(794) - aux1694 + SATLiteral(659))<=0)
-659 -7132 0
-794 -7132 0
-794 -659 -7133 0
c (0<=(SATLiteral(794) - aux1694 + SATLiteral(659)))
659 7133 0
794 7133 0
794 659 7132 0
c (( - aux1695 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7135 0
-509 -7135 0
-509 -644 -7136 0
c (0<=( - aux1695 + SATLiteral(509) + SATLiteral(644)))
644 7136 0
509 7136 0
509 644 7135 0
c (( - aux1696 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7138 0
-524 -7138 0
-524 -539 -7139 0
c (0<=( - aux1696 + SATLiteral(524) + SATLiteral(539)))
539 7139 0
524 7139 0
524 539 7138 0
c ((SATLiteral(809) + aux1696 - aux1697)<=0)
7138 -7141 0
7139 -7142 0
-809 -7141 0
-809 7138 -7142 0
-809 7139 -7144 0
c (0<=(SATLiteral(809) + aux1696 - aux1697))
-7139 7144 0
-7138 7142 0
809 7144 0
809 -7139 7142 0
809 -7138 7141 0
c ((aux1693 + aux1695 - aux1698)<=0)
7135 -7146 0
7136 -7147 0
7129 -7146 0
7129 7135 -7147 0
7129 7136 -7149 0
7130 -7147 0
7130 7135 -7149 0
7130 7136 -7151 0
c (0<=(aux1693 + aux1695 - aux1698))
-7136 7151 0
-7135 7149 0
-7130 7151 0
-7130 -7136 7149 0
-7130 -7135 7147 0
-7129 7149 0
-7129 -7136 7147 0
-7129 -7135 7146 0
c ((SATLiteral(781) - aux1699 + SATLiteral(676))<=0)
-676 -7153 0
-781 -7153 0
-781 -676 -7154 0
c (0<=(SATLiteral(781) - aux1699 + SATLiteral(676)))
676 7154 0
781 7154 0
781 676 7153 0
c ((SATLiteral(796) - aux1700 + SATLiteral(661))<=0)
-661 -7156 0
-796 -7156 0
-796 -661 -7157 0
c (0<=(SATLiteral(796) - aux1700 + SATLiteral(661)))
661 7157 0
796 7157 0
796 661 7156 0
c (( - aux1701 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7159 0
-511 -7159 0
-511 -646 -7160 0
c (0<=( - aux1701 + SATLiteral(511) + SATLiteral(646)))
646 7160 0
511 7160 0
511 646 7159 0
c (( - aux1702 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7162 0
-526 -7162 0
-526 -541 -7163 0
c (0<=( - aux1702 + SATLiteral(526) + SATLiteral(541)))
541 7163 0
526 7163 0
526 541 7162 0
c ((SATLiteral(811) + aux1702 - aux1703)<=0)
7162 -7165 0
7163 -7166 0
-811 -7165 0
-811 7162 -7166 0
-811 7163 -7168 0
c (0<=(SATLiteral(811) + aux1702 - aux1703))
-7163 7168 0
-7162 7166 0
811 7168 0
811 -7163 7166 0
811 -7162 7165 0
c ((aux1699 + aux1701 - aux1704)<=0)
7159 -7170 0
7160 -7171 0
7153 -7170 0
7153 7159 -7171 0
7153 7160 -7173 0
7154 -7171 0
7154 7159 -7173 0
7154 7160 -7175 0
c (0<=(aux1699 + aux1701 - aux1704))
-7160 7175 0
-7159 7173 0
-7154 7175 0
-7154 -7160 7173 0
-7154 -7159 7171 0
-7153 7173 0
-7153 -7160 7171 0
-7153 -7159 7170 0
c ((SATLiteral(-780) - aux1705 + SATLiteral(-675))<=0)
675 -7177 0
780 -7177 0
780 675 -7178 0
c (0<=(SATLiteral(-780) - aux1705 + SATLiteral(-675)))
-675 7178 0
-780 7178 0
-780 -675 7177 0
c ((SATLiteral(-795) - aux1706 + SATLiteral(-660))<=0)
660 -7180 0
795 -7180 0
795 660 -7181 0
c (0<=(SATLiteral(-795) - aux1706 + SATLiteral(-660)))
-660 7181 0
-795 7181 0
-795 -660 7180 0
c (( - aux1707 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7183 0
510 -7183 0
510 645 -7184 0
c (0<=( - aux1707 + SATLiteral(-510) + SATLiteral(-645)))
-645 7184 0
-510 7184 0
-510 -645 7183 0
c (( - aux1708 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7186 0
525 -7186 0
525 540 -7187 0
c (0<=( - aux1708 + SATLiteral(-525) + SATLiteral(-540)))
-540 7187 0
-525 7187 0
-525 -540 7186 0
c ((SATLiteral(-810) + aux1708 - aux1709)<=0)
7186 -7189 0
7187 -7190 0
810 -7189 0
810 7186 -7190 0
810 7187 -7192 0
c (0<=(SATLiteral(-810) + aux1708 - aux1709))
-7187 7192 0
-7186 7190 0
-810 7192 0
-810 -7187 7190 0
-810 -7186 7189 0
c ((aux1705 + aux1707 - aux1710)<=0)
7183 -7194 0
7184 -7195 0
7177 -7194 0
7177 7183 -7195 0
7177 7184 -7197 0
7178 -7195 0
7178 7183 -7197 0
7178 7184 -7199 0
c (0<=(aux1705 + aux1707 - aux1710))
-7184 7199 0
-7183 7197 0
-7178 7199 0
-7178 -7184 7197 0
-7178 -7183 7195 0
-7177 7197 0
-7177 -7184 7195 0
-7177 -7183 7194 0
c ((SATLiteral(947) - aux1711 + SATLiteral(842))<=0)
-842 -7201 0
-947 -7201 0
-947 -842 -7202 0
c (0<=(SATLiteral(947) - aux1711 + SATLiteral(842)))
842 7202 0
947 7202 0
947 842 7201 0
c ((SATLiteral(962) - aux1712 + SATLiteral(827))<=0)
-827 -7204 0
-962 -7204 0
-962 -827 -7205 0
c (0<=(SATLiteral(962) - aux1712 + SATLiteral(827)))
827 7205 0
962 7205 0
962 827 7204 0
c (( - aux1713 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7207 0
-1082 -7207 0
-1082 -812 -7208 0
c (0<=( - aux1713 + SATLiteral(1082) + SATLiteral(812)))
812 7208 0
1082 7208 0
1082 812 7207 0
c (( - aux1714 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7210 0
-1097 -7210 0
-1097 -1112 -7211 0
c (0<=( - aux1714 + SATLiteral(1097) + SATLiteral(1112)))
1112 7211 0
1097 7211 0
1097 1112 7210 0
c ((SATLiteral(977) + aux1714 - aux1715)<=0)
7210 -7213 0
7211 -7214 0
-977 -7213 0
-977 7210 -7214 0
-977 7211 -7216 0
c (0<=(SATLiteral(977) + aux1714 - aux1715))
-7211 7216 0
-7210 7214 0
977 7216 0
977 -7211 7214 0
977 -7210 7213 0
c ((aux1711 + aux1713 - aux1716)<=0)
7207 -7218 0
7208 -7219 0
7201 -7218 0
7201 7207 -7219 0
7201 7208 -7221 0
7202 -7219 0
7202 7207 -7221 0
7202 7208 -7223 0
c (0<=(aux1711 + aux1713 - aux1716))
-7208 7223 0
-7207 7221 0
-7202 7223 0
-7202 -7208 7221 0
-7202 -7207 7219 0
-7201 7221 0
-7201 -7208 7219 0
-7201 -7207 7218 0
c ((SATLiteral(949) - aux1717 + SATLiteral(844))<=0)
-844 -7225 0
-949 -7225 0
-949 -844 -7226 0
c (0<=(SATLiteral(949) - aux1717 + SATLiteral(844)))
844 7226 0
949 7226 0
949 844 7225 0
c ((SATLiteral(964) - aux1718 + SATLiteral(829))<=0)
-829 -7228 0
-964 -7228 0
-964 -829 -7229 0
c (0<=(SATLiteral(964) - aux1718 + SATLiteral(829)))
829 7229 0
964 7229 0
964 829 7228 0
c (( - aux1719 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7231 0
-1084 -7231 0
-1084 -814 -7232 0
c (0<=( - aux1719 + SATLiteral(1084) + SATLiteral(814)))
814 7232 0
1084 7232 0
1084 814 7231 0
c (( - aux1720 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7234 0
-1099 -7234 0
-1099 -1114 -7235 0
c (0<=( - aux1720 + SATLiteral(1099) + SATLiteral(1114)))
1114 7235 0
1099 7235 0
1099 1114 7234 0
c ((SATLiteral(979) + aux1720 - aux1721)<=0)
7234 -7237 0
7235 -7238 0
-979 -7237 0
-979 7234 -7238 0
-979 7235 -7240 0
c (0<=(SATLiteral(979) + aux1720 - aux1721))
-7235 7240 0
-7234 7238 0
979 7240 0
979 -7235 7238 0
979 -7234 7237 0
c ((aux1717 + aux1719 - aux1722)<=0)
7231 -7242 0
7232 -7243 0
7225 -7242 0
7225 7231 -7243 0
7225 7232 -7245 0
7226 -7243 0
7226 7231 -7245 0
7226 7232 -7247 0
c (0<=(aux1717 + aux1719 - aux1722))
-7232 7247 0
-7231 7245 0
-7226 7247 0
-7226 -7232 7245 0
-7226 -7231 7243 0
-7225 7245 0
-7225 -7232 7243 0
-7225 -7231 7242 0
c ((SATLiteral(951) - aux1723 + SATLiteral(846))<=0)
-846 -7249 0
-951 -7249 0
-951 -846 -7250 0
c (0<=(SATLiteral(951) - aux1723 + SATLiteral(846)))
846 7250 0
951 7250 0
951 846 7249 0
c ((SATLiteral(966) - aux1724 + SATLiteral(831))<=0)
-831 -7252 0
-966 -7252 0
-966 -831 -7253 0
c (0<=(SATLiteral(966) - aux1724 + SATLiteral(831)))
831 7253 0
966 7253 0
966 831 7252 0
c (( - aux1725 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7255 0
-1086 -7255 0
-1086 -816 -7256 0
c (0<=( - aux1725 + SATLiteral(1086) + SATLiteral(816)))
816 7256 0
1086 7256 0
1086 816 7255 0
c (( - aux1726 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7258 0
-1101 -7258 0
-1101 -1116 -7259 0
c (0<=( - aux1726 + SATLiteral(1101) + SATLiteral(1116)))
1116 7259 0
1101 7259 0
1101 1116 7258 0
c ((SATLiteral(981) + aux1726 - aux1727)<=0)
7258 -7261 0
7259 -7262 0
-981 -7261 0
-981 7258 -7262 0
-981 7259 -7264 0
c (0<=(SATLiteral(981) + aux1726 - aux1727))
-7259 7264 0
-7258 7262 0
981 7264 0
981 -7259 7262 0
981 -7258 7261 0
c ((aux1723 + aux1725 - aux1728)<=0)
7255 -7266 0
7256 -7267 0
7249 -7266 0
7249 7255 -7267 0
7249 7256 -7269 0
7250 -7267 0
7250 7255 -7269 0
7250 7256 -7271 0
c (0<=(aux1723 + aux1725 - aux1728))
-7256 7271 0
-7255 7269 0
-7250 7271 0
-7250 -7256 7269 0
-7250 -7255 7267 0
-7249 7269 0
-7249 -7256 7267 0
-7249 -7255 7266 0
c ((SATLiteral(953) - aux1729 + SATLiteral(848))<=0)
-848 -7273 0
-953 -7273 0
-953 -848 -7274 0
c (0<=(SATLiteral(953) - aux1729 + SATLiteral(848)))
848 7274 0
953 7274 0
953 848 7273 0
c ((SATLiteral(968) - aux1730 + SATLiteral(833))<=0)
-833 -7276 0
-968 -7276 0
-968 -833 -7277 0
c (0<=(SATLiteral(968) - aux1730 + SATLiteral(833)))
833 7277 0
968 7277 0
968 833 7276 0
c (( - aux1731 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7279 0
-1088 -7279 0
-1088 -818 -7280 0
c (0<=( - aux1731 + SATLiteral(1088) + SATLiteral(818)))
818 7280 0
1088 7280 0
1088 818 7279 0
c (( - aux1732 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7282 0
-1103 -7282 0
-1103 -1118 -7283 0
c (0<=( - aux1732 + SATLiteral(1103) + SATLiteral(1118)))
1118 7283 0
1103 7283 0
1103 1118 7282 0
c ((SATLiteral(983) + aux1732 - aux1733)<=0)
7282 -7285 0
7283 -7286 0
-983 -7285 0
-983 7282 -7286 0
-983 7283 -7288 0
c (0<=(SATLiteral(983) + aux1732 - aux1733))
-7283 7288 0
-7282 7286 0
983 7288 0
983 -7283 7286 0
983 -7282 7285 0
c ((aux1729 + aux1731 - aux1734)<=0)
7279 -7290 0
7280 -7291 0
7273 -7290 0
7273 7279 -7291 0
7273 7280 -7293 0
7274 -7291 0
7274 7279 -7293 0
7274 7280 -7295 0
c (0<=(aux1729 + aux1731 - aux1734))
-7280 7295 0
-7279 7293 0
-7274 7295 0
-7274 -7280 7293 0
-7274 -7279 7291 0
-7273 7293 0
-7273 -7280 7291 0
-7273 -7279 7290 0
c ((SATLiteral(955) - aux1735 + SATLiteral(850))<=0)
-850 -7297 0
-955 -7297 0
-955 -850 -7298 0
c (0<=(SATLiteral(955) - aux1735 + SATLiteral(850)))
850 7298 0
955 7298 0
955 850 7297 0
c ((SATLiteral(970) - aux1736 + SATLiteral(835))<=0)
-835 -7300 0
-970 -7300 0
-970 -835 -7301 0
c (0<=(SATLiteral(970) - aux1736 + SATLiteral(835)))
835 7301 0
970 7301 0
970 835 7300 0
c (( - aux1737 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7303 0
-1090 -7303 0
-1090 -820 -7304 0
c (0<=( - aux1737 + SATLiteral(1090) + SATLiteral(820)))
820 7304 0
1090 7304 0
1090 820 7303 0
c (( - aux1738 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7306 0
-1105 -7306 0
-1105 -1120 -7307 0
c (0<=( - aux1738 + SATLiteral(1105) + SATLiteral(1120)))
1120 7307 0
1105 7307 0
1105 1120 7306 0
c ((SATLiteral(985) + aux1738 - aux1739)<=0)
7306 -7309 0
7307 -7310 0
-985 -7309 0
-985 7306 -7310 0
-985 7307 -7312 0
c (0<=(SATLiteral(985) + aux1738 - aux1739))
-7307 7312 0
-7306 7310 0
985 7312 0
985 -7307 7310 0
985 -7306 7309 0
c ((aux1735 + aux1737 - aux1740)<=0)
7303 -7314 0
7304 -7315 0
7297 -7314 0
7297 7303 -7315 0
7297 7304 -7317 0
7298 -7315 0
7298 7303 -7317 0
7298 7304 -7319 0
c (0<=(aux1735 + aux1737 - aux1740))
-7304 7319 0
-7303 7317 0
-7298 7319 0
-7298 -7304 7317 0
-7298 -7303 7315 0
-7297 7317 0
-7297 -7304 7315 0
-7297 -7303 7314 0
c ((SATLiteral(957) - aux1741 + SATLiteral(852))<=0)
-852 -7321 0
-957 -7321 0
-957 -852 -7322 0
c (0<=(SATLiteral(957) - aux1741 + SATLiteral(852)))
852 7322 0
957 7322 0
957 852 7321 0
c ((SATLiteral(972) - aux1742 + SATLiteral(837))<=0)
-837 -7324 0
-972 -7324 0
-972 -837 -7325 0
c (0<=(SATLiteral(972) - aux1742 + SATLiteral(837)))
837 7325 0
972 7325 0
972 837 7324 0
c (( - aux1743 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7327 0
-1092 -7327 0
-1092 -822 -7328 0
c (0<=( - aux1743 + SATLiteral(1092) + SATLiteral(822)))
822 7328 0
1092 7328 0
1092 822 7327 0
c (( - aux1744 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7330 0
-1107 -7330 0
-1107 -1122 -7331 0
c (0<=( - aux1744 + SATLiteral(1107) + SATLiteral(1122)))
1122 7331 0
1107 7331 0
1107 1122 7330 0
c ((SATLiteral(987) + aux1744 - aux1745)<=0)
7330 -7333 0
7331 -7334 0
-987 -7333 0
-987 7330 -7334 0
-987 7331 -7336 0
c (0<=(SATLiteral(987) + aux1744 - aux1745))
-7331 7336 0
-7330 7334 0
987 7336 0
987 -7331 7334 0
987 -7330 7333 0
c ((aux1741 + aux1743 - aux1746)<=0)
7327 -7338 0
7328 -7339 0
7321 -7338 0
7321 7327 -7339 0
7321 7328 -7341 0
7322 -7339 0
7322 7327 -7341 0
7322 7328 -7343 0
c (0<=(aux1741 + aux1743 - aux1746))
-7328 7343 0
-7327 7341 0
-7322 7343 0
-7322 -7328 7341 0
-7322 -7327 7339 0
-7321 7341 0
-7321 -7328 7339 0
-7321 -7327 7338 0
c ((SATLiteral(959) - aux1747 + SATLiteral(854))<=0)
-854 -7345 0
-959 -7345 0
-959 -854 -7346 0
c (0<=(SATLiteral(959) - aux1747 + SATLiteral(854)))
854 7346 0
959 7346 0
959 854 7345 0
c ((SATLiteral(974) - aux1748 + SATLiteral(839))<=0)
-839 -7348 0
-974 -7348 0
-974 -839 -7349 0
c (0<=(SATLiteral(974) - aux1748 + SATLiteral(839)))
839 7349 0
974 7349 0
974 839 7348 0
c (( - aux1749 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7351 0
-1094 -7351 0
-1094 -824 -7352 0
c (0<=( - aux1749 + SATLiteral(1094) + SATLiteral(824)))
824 7352 0
1094 7352 0
1094 824 7351 0
c (( - aux1750 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7354 0
-1109 -7354 0
-1109 -1124 -7355 0
c (0<=( - aux1750 + SATLiteral(1109) + SATLiteral(1124)))
1124 7355 0
1109 7355 0
1109 1124 7354 0
c ((SATLiteral(989) + aux1750 - aux1751)<=0)
7354 -7357 0
7355 -7358 0
-989 -7357 0
-989 7354 -7358 0
-989 7355 -7360 0
c (0<=(SATLiteral(989) + aux1750 - aux1751))
-7355 7360 0
-7354 7358 0
989 7360 0
989 -7355 7358 0
989 -7354 7357 0
c ((aux1747 + aux1749 - aux1752)<=0)
7351 -7362 0
7352 -7363 0
7345 -7362 0
7345 7351 -7363 0
7345 7352 -7365 0
7346 -7363 0
7346 7351 -7365 0
7346 7352 -7367 0
c (0<=(aux1747 + aux1749 - aux1752))
-7352 7367 0
-7351 7365 0
-7346 7367 0
-7346 -7352 7365 0
-7346 -7351 7363 0
-7345 7365 0
-7345 -7352 7363 0
-7345 -7351 7362 0
c ((SATLiteral(961) - aux1753 + SATLiteral(856))<=0)
-856 -7369 0
-961 -7369 0
-961 -856 -7370 0
c (0<=(SATLiteral(961) - aux1753 + SATLiteral(856)))
856 7370 0
961 7370 0
961 856 7369 0
c ((SATLiteral(976) - aux1754 + SATLiteral(841))<=0)
-841 -7372 0
-976 -7372 0
-976 -841 -7373 0
c (0<=(SATLiteral(976) - aux1754 + SATLiteral(841)))
841 7373 0
976 7373 0
976 841 7372 0
c (( - aux1755 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7375 0
-1096 -7375 0
-1096 -826 -7376 0
c (0<=( - aux1755 + SATLiteral(1096) + SATLiteral(826)))
826 7376 0
1096 7376 0
1096 826 7375 0
c (( - aux1756 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7378 0
-1111 -7378 0
-1111 -1126 -7379 0
c (0<=( - aux1756 + SATLiteral(1111) + SATLiteral(1126)))
1126 7379 0
1111 7379 0
1111 1126 7378 0
c ((SATLiteral(991) + aux1756 - aux1757)<=0)
7378 -7381 0
7379 -7382 0
-991 -7381 0
-991 7378 -7382 0
-991 7379 -7384 0
c (0<=(SATLiteral(991) + aux1756 - aux1757))
-7379 7384 0
-7378 7382 0
991 7384 0
991 -7379 7382 0
991 -7378 7381 0
c ((aux1753 + aux1755 - aux1758)<=0)
7375 -7386 0
7376 -7387 0
7369 -7386 0
7369 7375 -7387 0
7369 7376 -7389 0
7370 -7387 0
7370 7375 -7389 0
7370 7376 -7391 0
c (0<=(aux1753 + aux1755 - aux1758))
-7376 7391 0
-7375 7389 0
-7370 7391 0
-7370 -7376 7389 0
-7370 -7375 7387 0
-7369 7389 0
-7369 -7376 7387 0
-7369 -7375 7386 0
c ((SATLiteral(-960) - aux1759 + SATLiteral(-855))<=0)
855 -7393 0
960 -7393 0
960 855 -7394 0
c (0<=(SATLiteral(-960) - aux1759 + SATLiteral(-855)))
-855 7394 0
-960 7394 0
-960 -855 7393 0
c ((SATLiteral(-975) - aux1760 + SATLiteral(-840))<=0)
840 -7396 0
975 -7396 0
975 840 -7397 0
c (0<=(SATLiteral(-975) - aux1760 + SATLiteral(-840)))
-840 7397 0
-975 7397 0
-975 -840 7396 0
c (( - aux1761 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7399 0
1095 -7399 0
1095 825 -7400 0
c (0<=( - aux1761 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7400 0
-1095 7400 0
-1095 -825 7399 0
c (( - aux1762 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7402 0
1110 -7402 0
1110 1125 -7403 0
c (0<=( - aux1762 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7403 0
-1110 7403 0
-1110 -1125 7402 0
c ((SATLiteral(-990) + aux1762 - aux1763)<=0)
7402 -7405 0
7403 -7406 0
990 -7405 0
990 7402 -7406 0
990 7403 -7408 0
c (0<=(SATLiteral(-990) + aux1762 - aux1763))
-7403 7408 0
-7402 7406 0
-990 7408 0
-990 -7403 7406 0
-990 -7402 7405 0
c ((aux1759 + aux1761 - aux1764)<=0)
7399 -7410 0
7400 -7411 0
7393 -7410 0
7393 7399 -7411 0
7393 7400 -7413 0
7394 -7411 0
7394 7399 -7413 0
7394 7400 -7415 0
c (0<=(aux1759 + aux1761 - aux1764))
-7400 7415 0
-7399 7413 0
-7394 7415 0
-7394 -7400 7413 0
-7394 -7399 7411 0
-7393 7413 0
-7393 -7400 7411 0
-7393 -7399 7410 0
c ((SATLiteral(992) - aux1765 + SATLiteral(887))<=0)
-887 -7417 0
-992 -7417 0
-992 -887 -7418 0
c (0<=(SATLiteral(992) - aux1765 + SATLiteral(887)))
887 7418 0
992 7418 0
992 887 7417 0
c ((SATLiteral(1007) - aux1766 + SATLiteral(872))<=0)
-872 -7420 0
-1007 -7420 0
-1007 -872 -7421 0
c (0<=(SATLiteral(1007) - aux1766 + SATLiteral(872)))
872 7421 0
1007 7421 0
1007 872 7420 0
c (( - aux1767 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7423 0
-1127 -7423 0
-1127 -857 -7424 0
c (0<=( - aux1767 + SATLiteral(1127) + SATLiteral(857)))
857 7424 0
1127 7424 0
1127 857 7423 0
c (( - aux1768 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7426 0
-1142 -7426 0
-1142 -1157 -7427 0
c (0<=( - aux1768 + SATLiteral(1142) + SATLiteral(1157)))
1157 7427 0
1142 7427 0
1142 1157 7426 0
c ((SATLiteral(1022) + aux1768 - aux1769)<=0)
7426 -7429 0
7427 -7430 0
-1022 -7429 0
-1022 7426 -7430 0
-1022 7427 -7432 0
c (0<=(SATLiteral(1022) + aux1768 - aux1769))
-7427 7432 0
-7426 7430 0
1022 7432 0
1022 -7427 7430 0
1022 -7426 7429 0
c ((aux1765 + aux1767 - aux1770)<=0)
7423 -7434 0
7424 -7435 0
7417 -7434 0
7417 7423 -7435 0
7417 7424 -7437 0
7418 -7435 0
7418 7423 -7437 0
7418 7424 -7439 0
c (0<=(aux1765 + aux1767 - aux1770))
-7424 7439 0
-7423 7437 0
-7418 7439 0
-7418 -7424 7437 0
-7418 -7423 7435 0
-7417 7437 0
-7417 -7424 7435 0
-7417 -7423 7434 0
c ((SATLiteral(994) - aux1771 + SATLiteral(889))<=0)
-889 -7441 0
-994 -7441 0
-994 -889 -7442 0
c (0<=(SATLiteral(994) - aux1771 + SATLiteral(889)))
889 7442 0
994 7442 0
994 889 7441 0
c ((SATLiteral(1009) - aux1772 + SATLiteral(874))<=0)
-874 -7444 0
-1009 -7444 0
-1009 -874 -7445 0
c (0<=(SATLiteral(1009) - aux1772 + SATLiteral(874)))
874 7445 0
1009 7445 0
1009 874 7444 0
c (( - aux1773 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7447 0
-1129 -7447 0
-1129 -859 -7448 0
c (0<=( - aux1773 + SATLiteral(1129) + SATLiteral(859)))
859 7448 0
1129 7448 0
1129 859 7447 0
c (( - aux1774 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7450 0
-1144 -7450 0
-1144 -1159 -7451 0
c (0<=( - aux1774 + SATLiteral(1144) + SATLiteral(1159)))
1159 7451 0
1144 7451 0
1144 1159 7450 0
c ((SATLiteral(1024) + aux1774 - aux1775)<=0)
7450 -7453 0
7451 -7454 0
-1024 -7453 0
-1024 7450 -7454 0
-1024 7451 -7456 0
c (0<=(SATLiteral(1024) + aux1774 - aux1775))
-7451 7456 0
-7450 7454 0
1024 7456 0
1024 -7451 7454 0
1024 -7450 7453 0
c ((aux1771 + aux1773 - aux1776)<=0)
7447 -7458 0
7448 -7459 0
7441 -7458 0
7441 7447 -7459 0
7441 7448 -7461 0
7442 -7459 0
7442 7447 -7461 0
7442 7448 -7463 0
c (0<=(aux1771 + aux1773 - aux1776))
-7448 7463 0
-7447 7461 0
-7442 7463 0
-7442 -7448 7461 0
-7442 -7447 7459 0
-7441 7461 0
-7441 -7448 7459 0
-7441 -7447 7458 0
c ((SATLiteral(996) - aux1777 + SATLiteral(891))<=0)
-891 -7465 0
-996 -7465 0
-996 -891 -7466 0
c (0<=(SATLiteral(996) - aux1777 + SATLiteral(891)))
891 7466 0
996 7466 0
996 891 7465 0
c ((SATLiteral(1011) - aux1778 + SATLiteral(876))<=0)
-876 -7468 0
-1011 -7468 0
-1011 -876 -7469 0
c (0<=(SATLiteral(1011) - aux1778 + SATLiteral(876)))
876 7469 0
1011 7469 0
1011 876 7468 0
c (( - aux1779 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7471 0
-1131 -7471 0
-1131 -861 -7472 0
c (0<=( - aux1779 + SATLiteral(1131) + SATLiteral(861)))
861 7472 0
1131 7472 0
1131 861 7471 0
c (( - aux1780 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7474 0
-1146 -7474 0
-1146 -1161 -7475 0
c (0<=( - aux1780 + SATLiteral(1146) + SATLiteral(1161)))
1161 7475 0
1146 7475 0
1146 1161 7474 0
c ((SATLiteral(1026) + aux1780 - aux1781)<=0)
7474 -7477 0
7475 -7478 0
-1026 -7477 0
-1026 7474 -7478 0
-1026 7475 -7480 0
c (0<=(SATLiteral(1026) + aux1780 - aux1781))
-7475 7480 0
-7474 7478 0
1026 7480 0
1026 -7475 7478 0
1026 -7474 7477 0
c ((aux1777 + aux1779 - aux1782)<=0)
7471 -7482 0
7472 -7483 0
7465 -7482 0
7465 7471 -7483 0
7465 7472 -7485 0
7466 -7483 0
7466 7471 -7485 0
7466 7472 -7487 0
c (0<=(aux1777 + aux1779 - aux1782))
-7472 7487 0
-7471 7485 0
-7466 7487 0
-7466 -7472 7485 0
-7466 -7471 7483 0
-7465 7485 0
-7465 -7472 7483 0
-7465 -7471 7482 0
c ((SATLiteral(998) - aux1783 + SATLiteral(893))<=0)
-893 -7489 0
-998 -7489 0
-998 -893 -7490 0
c (0<=(SATLiteral(998) - aux1783 + SATLiteral(893)))
893 7490 0
998 7490 0
998 893 7489 0
c ((SATLiteral(1013) - aux1784 + SATLiteral(878))<=0)
-878 -7492 0
-1013 -7492 0
-1013 -878 -7493 0
c (0<=(SATLiteral(1013) - aux1784 + SATLiteral(878)))
878 7493 0
1013 7493 0
1013 878 7492 0
c (( - aux1785 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7495 0
-1133 -7495 0
-1133 -863 -7496 0
c (0<=( - aux1785 + SATLiteral(1133) + SATLiteral(863)))
863 7496 0
1133 7496 0
1133 863 7495 0
c (( - aux1786 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7498 0
-1148 -7498 0
-1148 -1163 -7499 0
c (0<=( - aux1786 + SATLiteral(1148) + SATLiteral(1163)))
1163 7499 0
1148 7499 0
1148 1163 7498 0
c ((SATLiteral(1028) + aux1786 - aux1787)<=0)
7498 -7501 0
7499 -7502 0
-1028 -7501 0
-1028 7498 -7502 0
-1028 7499 -7504 0
c (0<=(SATLiteral(1028) + aux1786 - aux1787))
-7499 7504 0
-7498 7502 0
1028 7504 0
1028 -7499 7502 0
1028 -7498 7501 0
c ((aux1783 + aux1785 - aux1788)<=0)
7495 -7506 0
7496 -7507 0
7489 -7506 0
7489 7495 -7507 0
7489 7496 -7509 0
7490 -7507 0
7490 7495 -7509 0
7490 7496 -7511 0
c (0<=(aux1783 + aux1785 - aux1788))
-7496 7511 0
-7495 7509 0
-7490 7511 0
-7490 -7496 7509 0
-7490 -7495 7507 0
-7489 7509 0
-7489 -7496 7507 0
-7489 -7495 7506 0
c ((SATLiteral(1000) - aux1789 + SATLiteral(895))<=0)
-895 -7513 0
-1000 -7513 0
-1000 -895 -7514 0
c (0<=(SATLiteral(1000) - aux1789 + SATLiteral(895)))
895 7514 0
1000 7514 0
1000 895 7513 0
c ((SATLiteral(1015) - aux1790 + SATLiteral(880))<=0)
-880 -7516 0
-1015 -7516 0
-1015 -880 -7517 0
c (0<=(SATLiteral(1015) - aux1790 + SATLiteral(880)))
880 7517 0
1015 7517 0
1015 880 7516 0
c (( - aux1791 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7519 0
-1135 -7519 0
-1135 -865 -7520 0
c (0<=( - aux1791 + SATLiteral(1135) + SATLiteral(865)))
865 7520 0
1135 7520 0
1135 865 7519 0
c (( - aux1792 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7522 0
-1150 -7522 0
-1150 -1165 -7523 0
c (0<=( - aux1792 + SATLiteral(1150) + SATLiteral(1165)))
1165 7523 0
1150 7523 0
1150 1165 7522 0
c ((SATLiteral(1030) + aux1792 - aux1793)<=0)
7522 -7525 0
7523 -7526 0
-1030 -7525 0
-1030 7522 -7526 0
-1030 7523 -7528 0
c (0<=(SATLiteral(1030) + aux1792 - aux1793))
-7523 7528 0
-7522 7526 0
1030 7528 0
1030 -7523 7526 0
1030 -7522 7525 0
c ((aux1789 + aux1791 - aux1794)<=0)
7519 -7530 0
7520 -7531 0
7513 -7530 0
7513 7519 -7531 0
7513 7520 -7533 0
7514 -7531 0
7514 7519 -7533 0
7514 7520 -7535 0
c (0<=(aux1789 + aux1791 - aux1794))
-7520 7535 0
-7519 7533 0
-7514 7535 0
-7514 -7520 7533 0
-7514 -7519 7531 0
-7513 7533 0
-7513 -7520 7531 0
-7513 -7519 7530 0
c ((SATLiteral(1002) - aux1795 + SATLiteral(897))<=0)
-897 -7537 0
-1002 -7537 0
-1002 -897 -7538 0
c (0<=(SATLiteral(1002) - aux1795 + SATLiteral(897)))
897 7538 0
1002 7538 0
1002 897 7537 0
c ((SATLiteral(1017) - aux1796 + SATLiteral(882))<=0)
-882 -7540 0
-1017 -7540 0
-1017 -882 -7541 0
c (0<=(SATLiteral(1017) - aux1796 + SATLiteral(882)))
882 7541 0
1017 7541 0
1017 882 7540 0
c (( - aux1797 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7543 0
-1137 -7543 0
-1137 -867 -7544 0
c (0<=( - aux1797 + SATLiteral(1137) + SATLiteral(867)))
867 7544 0
1137 7544 0
1137 867 7543 0
c (( - aux1798 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7546 0
-1152 -7546 0
-1152 -1167 -7547 0
c (0<=( - aux1798 + SATLiteral(1152) + SATLiteral(1167)))
1167 7547 0
1152 7547 0
1152 1167 7546 0
c ((SATLiteral(1032) + aux1798 - aux1799)<=0)
7546 -7549 0
7547 -7550 0
-1032 -7549 0
-1032 7546 -7550 0
-1032 7547 -7552 0
c (0<=(SATLiteral(1032) + aux1798 - aux1799))
-7547 7552 0
-7546 7550 0
1032 7552 0
1032 -7547 7550 0
1032 -7546 7549 0
c ((aux1795 + aux1797 - aux1800)<=0)
7543 -7554 0
7544 -7555 0
7537 -7554 0
7537 7543 -7555 0
7537 7544 -7557 0
7538 -7555 0
7538 7543 -7557 0
7538 7544 -7559 0
c (0<=(aux1795 + aux1797 - aux1800))
-7544 7559 0
-7543 7557 0
-7538 7559 0
-7538 -7544 7557 0
-7538 -7543 7555 0
-7537 7557 0
-7537 -7544 7555 0
-7537 -7543 7554 0
c ((SATLiteral(1004) - aux1801 + SATLiteral(899))<=0)
-899 -7561 0
-1004 -7561 0
-1004 -899 -7562 0
c (0<=(SATLiteral(1004) - aux1801 + SATLiteral(899)))
899 7562 0
1004 7562 0
1004 899 7561 0
c ((SATLiteral(1019) - aux1802 + SATLiteral(884))<=0)
-884 -7564 0
-1019 -7564 0
-1019 -884 -7565 0
c (0<=(SATLiteral(1019) - aux1802 + SATLiteral(884)))
884 7565 0
1019 7565 0
1019 884 7564 0
c (( - aux1803 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7567 0
-1139 -7567 0
-1139 -869 -7568 0
c (0<=( - aux1803 + SATLiteral(1139) + SATLiteral(869)))
869 7568 0
1139 7568 0
1139 869 7567 0
c (( - aux1804 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7570 0
-1154 -7570 0
-1154 -1169 -7571 0
c (0<=( - aux1804 + SATLiteral(1154) + SATLiteral(1169)))
1169 7571 0
1154 7571 0
1154 1169 7570 0
c ((SATLiteral(1034) + aux1804 - aux1805)<=0)
7570 -7573 0
7571 -7574 0
-1034 -7573 0
-1034 7570 -7574 0
-1034 7571 -7576 0
c (0<=(SATLiteral(1034) + aux1804 - aux1805))
-7571 7576 0
-7570 7574 0
1034 7576 0
1034 -7571 7574 0
1034 -7570 7573 0
c ((aux1801 + aux1803 - aux1806)<=0)
7567 -7578 0
7568 -7579 0
7561 -7578 0
7561 7567 -7579 0
7561 7568 -7581 0
7562 -7579 0
7562 7567 -7581 0
7562 7568 -7583 0
c (0<=(aux1801 + aux1803 - aux1806))
-7568 7583 0
-7567 7581 0
-7562 7583 0
-7562 -7568 7581 0
-7562 -7567 7579 0
-7561 7581 0
-7561 -7568 7579 0
-7561 -7567 7578 0
c ((SATLiteral(1006) - aux1807 + SATLiteral(901))<=0)
-901 -7585 0
-1006 -7585 0
-1006 -901 -7586 0
c (0<=(SATLiteral(1006) - aux1807 + SATLiteral(901)))
901 7586 0
1006 7586 0
1006 901 7585 0
c ((SATLiteral(1021) - aux1808 + SATLiteral(886))<=0)
-886 -7588 0
-1021 -7588 0
-1021 -886 -7589 0
c (0<=(SATLiteral(1021) - aux1808 + SATLiteral(886)))
886 7589 0
1021 7589 0
1021 886 7588 0
c (( - aux1809 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7591 0
-1141 -7591 0
-1141 -871 -7592 0
c (0<=( - aux1809 + SATLiteral(1141) + SATLiteral(871)))
871 7592 0
1141 7592 0
1141 871 7591 0
c (( - aux1810 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7594 0
-1156 -7594 0
-1156 -1171 -7595 0
c (0<=( - aux1810 + SATLiteral(1156) + SATLiteral(1171)))
1171 7595 0
1156 7595 0
1156 1171 7594 0
c ((SATLiteral(1036) + aux1810 - aux1811)<=0)
7594 -7597 0
7595 -7598 0
-1036 -7597 0
-1036 7594 -7598 0
-1036 7595 -7600 0
c (0<=(SATLiteral(1036) + aux1810 - aux1811))
-7595 7600 0
-7594 7598 0
1036 7600 0
1036 -7595 7598 0
1036 -7594 7597 0
c ((aux1807 + aux1809 - aux1812)<=0)
7591 -7602 0
7592 -7603 0
7585 -7602 0
7585 7591 -7603 0
7585 7592 -7605 0
7586 -7603 0
7586 7591 -7605 0
7586 7592 -7607 0
c (0<=(aux1807 + aux1809 - aux1812))
-7592 7607 0
-7591 7605 0
-7586 7607 0
-7586 -7592 7605 0
-7586 -7591 7603 0
-7585 7605 0
-7585 -7592 7603 0
-7585 -7591 7602 0
c ((SATLiteral(-1005) - aux1813 + SATLiteral(-900))<=0)
900 -7609 0
1005 -7609 0
1005 900 -7610 0
c (0<=(SATLiteral(-1005) - aux1813 + SATLiteral(-900)))
-900 7610 0
-1005 7610 0
-1005 -900 7609 0
c ((SATLiteral(-1020) - aux1814 + SATLiteral(-885))<=0)
885 -7612 0
1020 -7612 0
1020 885 -7613 0
c (0<=(SATLiteral(-1020) - aux1814 + SATLiteral(-885)))
-885 7613 0
-1020 7613 0
-1020 -885 7612 0
c (( - aux1815 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7615 0
1140 -7615 0
1140 870 -7616 0
c (0<=( - aux1815 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7616 0
-1140 7616 0
-1140 -870 7615 0
c (( - aux1816 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7618 0
1155 -7618 0
1155 1170 -7619 0
c (0<=( - aux1816 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7619 0
-1155 7619 0
-1155 -1170 7618 0
c ((SATLiteral(-1035) + aux1816 - aux1817)<=0)
7618 -7621 0
7619 -7622 0
1035 -7621 0
1035 7618 -7622 0
1035 7619 -7624 0
c (0<=(SATLiteral(-1035) + aux1816 - aux1817))
-7619 7624 0
-7618 7622 0
-1035 7624 0
-1035 -7619 7622 0
-1035 -7618 7621 0
c ((aux1813 + aux1815 - aux1818)<=0)
7615 -7626 0
7616 -7627 0
7609 -7626 0
7609 7615 -7627 0
7609 7616 -7629 0
7610 -7627 0
7610 7615 -7629 0
7610 7616 -7631 0
c (0<=(aux1813 + aux1815 - aux1818))
-7616 7631 0
-7615 7629 0
-7610 7631 0
-7610 -7616 7629 0
-7610 -7615 7627 0
-7609 7629 0
-7609 -7616 7627 0
-7609 -7615 7626 0
c ((SATLiteral(1037) - aux1819 + SATLiteral(932))<=0)
-932 -7633 0
-1037 -7633 0
-1037 -932 -7634 0
c (0<=(SATLiteral(1037) - aux1819 + SATLiteral(932)))
932 7634 0
1037 7634 0
1037 932 7633 0
c ((SATLiteral(1052) - aux1820 + SATLiteral(917))<=0)
-917 -7636 0
-1052 -7636 0
-1052 -917 -7637 0
c (0<=(SATLiteral(1052) - aux1820 + SATLiteral(917)))
917 7637 0
1052 7637 0
1052 917 7636 0
c (( - aux1821 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7639 0
-1172 -7639 0
-1172 -902 -7640 0
c (0<=( - aux1821 + SATLiteral(1172) + SATLiteral(902)))
902 7640 0
1172 7640 0
1172 902 7639 0
c (( - aux1822 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7642 0
-1187 -7642 0
-1187 -1202 -7643 0
c (0<=( - aux1822 + SATLiteral(1187) + SATLiteral(1202)))
1202 7643 0
1187 7643 0
1187 1202 7642 0
c ((SATLiteral(1067) + aux1822 - aux1823)<=0)
7642 -7645 0
7643 -7646 0
-1067 -7645 0
-1067 7642 -7646 0
-1067 7643 -7648 0
c (0<=(SATLiteral(1067) + aux1822 - aux1823))
-7643 7648 0
-7642 7646 0
1067 7648 0
1067 -7643 7646 0
1067 -7642 7645 0
c ((aux1819 + aux1821 - aux1824)<=0)
7639 -7650 0
7640 -7651 0
7633 -7650 0
7633 7639 -7651 0
7633 7640 -7653 0
7634 -7651 0
7634 7639 -7653 0
7634 7640 -7655 0
c (0<=(aux1819 + aux1821 - aux1824))
-7640 7655 0
-7639 7653 0
-7634 7655 0
-7634 -7640 7653 0
-7634 -7639 7651 0
-7633 7653 0
-7633 -7640 7651 0
-7633 -7639 7650 0
c ((SATLiteral(1039) - aux1825 + SATLiteral(934))<=0)
-934 -7657 0
-1039 -7657 0
-1039 -934 -7658 0
c (0<=(SATLiteral(1039) - aux1825 + SATLiteral(934)))
934 7658 0
1039 7658 0
1039 934 7657 0
c ((SATLiteral(1054) - aux1826 + SATLiteral(919))<=0)
-919 -7660 0
-1054 -7660 0
-1054 -919 -7661 0
c (0<=(SATLiteral(1054) - aux1826 + SATLiteral(919)))
919 7661 0
1054 7661 0
1054 919 7660 0
c (( - aux1827 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7663 0
-1174 -7663 0
-1174 -904 -7664 0
c (0<=( - aux1827 + SATLiteral(1174) + SATLiteral(904)))
904 7664 0
1174 7664 0
1174 904 7663 0
c (( - aux1828 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7666 0
-1189 -7666 0
-1189 -1204 -7667 0
c (0<=( - aux1828 + SATLiteral(1189) + SATLiteral(1204)))
1204 7667 0
1189 7667 0
1189 1204 7666 0
c ((SATLiteral(1069) + aux1828 - aux1829)<=0)
7666 -7669 0
7667 -7670 0
-1069 -7669 0
-1069 7666 -7670 0
-1069 7667 -7672 0
c (0<=(SATLiteral(1069) + aux1828 - aux1829))
-7667 7672 0
-7666 7670 0
1069 7672 0
1069 -7667 7670 0
1069 -7666 7669 0
c ((aux1825 + aux1827 - aux1830)<=0)
7663 -7674 0
7664 -7675 0
7657 -7674 0
7657 7663 -7675 0
7657 7664 -7677 0
7658 -7675 0
7658 7663 -7677 0
7658 7664 -7679 0
c (0<=(aux1825 + aux1827 - aux1830))
-7664 7679 0
-7663 7677 0
-7658 7679 0
-7658 -7664 7677 0
-7658 -7663 7675 0
-7657 7677 0
-7657 -7664 7675 0
-7657 -7663 7674 0
c ((SATLiteral(1041) - aux1831 + SATLiteral(936))<=0)
-936 -7681 0
-1041 -7681 0
-1041 -936 -7682 0
c (0<=(SATLiteral(1041) - aux1831 + SATLiteral(936)))
936 7682 0
1041 7682 0
1041 936 7681 0
c ((SATLiteral(1056) - aux1832 + SATLiteral(921))<=0)
-921 -7684 0
-1056 -7684 0
-1056 -921 -7685 0
c (0<=(SATLiteral(1056) - aux1832 + SATLiteral(921)))
921 7685 0
1056 7685 0
1056 921 7684 0
c (( - aux1833 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7687 0
-1176 -7687 0
-1176 -906 -7688 0
c (0<=( - aux1833 + SATLiteral(1176) + SATLiteral(906)))
906 7688 0
1176 7688 0
1176 906 7687 0
c (( - aux1834 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7690 0
-1191 -7690 0
-1191 -1206 -7691 0
c (0<=( - aux1834 + SATLiteral(1191) + SATLiteral(1206)))
1206 7691 0
1191 7691 0
1191 1206 7690 0
c ((SATLiteral(1071) + aux1834 - aux1835)<=0)
7690 -7693 0
7691 -7694 0
-1071 -7693 0
-1071 7690 -7694 0
-1071 7691 -7696 0
c (0<=(SATLiteral(1071) + aux1834 - aux1835))
-7691 7696 0
-7690 7694 0
1071 7696 0
1071 -7691 7694 0
1071 -7690 7693 0
c ((aux1831 + aux1833 - aux1836)<=0)
7687 -7698 0
7688 -7699 0
7681 -7698 0
7681 7687 -7699 0
7681 7688 -7701 0
7682 -7699 0
7682 7687 -7701 0
7682 7688 -7703 0
c (0<=(aux1831 + aux1833 - aux1836))
-7688 7703 0
-7687 7701 0
-7682 7703 0
-7682 -7688 7701 0
-7682 -7687 7699 0
-7681 7701 0
-7681 -7688 7699 0
-7681 -7687 7698 0
c ((SATLiteral(1043) - aux1837 + SATLiteral(938))<=0)
-938 -7705 0
-1043 -7705 0
-1043 -938 -7706 0
c (0<=(SATLiteral(1043) - aux1837 + SATLiteral(938)))
938 7706 0
1043 7706 0
1043 938 7705 0
c ((SATLiteral(1058) - aux1838 + SATLiteral(923))<=0)
-923 -7708 0
-1058 -7708 0
-1058 -923 -7709 0
c (0<=(SATLiteral(1058) - aux1838 + SATLiteral(923)))
923 7709 0
1058 7709 0
1058 923 7708 0
c (( - aux1839 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7711 0
-1178 -7711 0
-1178 -908 -7712 0
c (0<=( - aux1839 + SATLiteral(1178) + SATLiteral(908)))
908 7712 0
1178 7712 0
1178 908 7711 0
c (( - aux1840 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7714 0
-1193 -7714 0
-1193 -1208 -7715 0
c (0<=( - aux1840 + SATLiteral(1193) + SATLiteral(1208)))
1208 7715 0
1193 7715 0
1193 1208 7714 0
c ((SATLiteral(1073) + aux1840 - aux1841)<=0)
7714 -7717 0
7715 -7718 0
-1073 -7717 0
-1073 7714 -7718 0
-1073 7715 -7720 0
c (0<=(SATLiteral(1073) + aux1840 - aux1841))
-7715 7720 0
-7714 7718 0
1073 7720 0
1073 -7715 7718 0
1073 -7714 7717 0
c ((aux1837 + aux1839 - aux1842)<=0)
7711 -7722 0
7712 -7723 0
7705 -7722 0
7705 7711 -7723 0
7705 7712 -7725 0
7706 -7723 0
7706 7711 -7725 0
7706 7712 -7727 0
c (0<=(aux1837 + aux1839 - aux1842))
-7712 7727 0
-7711 7725 0
-7706 7727 0
-7706 -7712 7725 0
-7706 -7711 7723 0
-7705 7725 0
-7705 -7712 7723 0
-7705 -7711 7722 0
c ((SATLiteral(1045) - aux1843 + SATLiteral(940))<=0)
-940 -7729 0
-1045 -7729 0
-1045 -940 -7730 0
c (0<=(SATLiteral(1045) - aux1843 + SATLiteral(940)))
940 7730 0
1045 7730 0
1045 940 7729 0
c ((SATLiteral(1060) - aux1844 + SATLiteral(925))<=0)
-925 -7732 0
-1060 -7732 0
-1060 -925 -7733 0
c (0<=(SATLiteral(1060) - aux1844 + SATLiteral(925)))
925 7733 0
1060 7733 0
1060 925 7732 0
c (( - aux1845 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7735 0
-1180 -7735 0
-1180 -910 -7736 0
c (0<=( - aux1845 + SATLiteral(1180) + SATLiteral(910)))
910 7736 0
1180 7736 0
1180 910 7735 0
c (( - aux1846 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7738 0
-1195 -7738 0
-1195 -1210 -7739 0
c (0<=( - aux1846 + SATLiteral(1195) + SATLiteral(1210)))
1210 7739 0
1195 7739 0
1195 1210 7738 0
c ((SATLiteral(1075) + aux1846 - aux1847)<=0)
7738 -7741 0
7739 -7742 0
-1075 -7741 0
-1075 7738 -7742 0
-1075 7739 -7744 0
c (0<=(SATLiteral(1075) + aux1846 - aux1847))
-7739 7744 0
-7738 7742 0
1075 7744 0
1075 -7739 7742 0
1075 -7738 7741 0
c ((aux1843 + aux1845 - aux1848)<=0)
7735 -7746 0
7736 -7747 0
7729 -7746 0
7729 7735 -7747 0
7729 7736 -7749 0
7730 -7747 0
7730 7735 -7749 0
7730 7736 -7751 0
c (0<=(aux1843 + aux1845 - aux1848))
-7736 7751 0
-7735 7749 0
-7730 7751 0
-7730 -7736 7749 0
-7730 -7735 7747 0
-7729 7749 0
-7729 -7736 7747 0
-7729 -7735 7746 0
c ((SATLiteral(1047) - aux1849 + SATLiteral(942))<=0)
-942 -7753 0
-1047 -7753 0
-1047 -942 -7754 0
c (0<=(SATLiteral(1047) - aux1849 + SATLiteral(942)))
942 7754 0
1047 7754 0
1047 942 7753 0
c ((SATLiteral(1062) - aux1850 + SATLiteral(927))<=0)
-927 -7756 0
-1062 -7756 0
-1062 -927 -7757 0
c (0<=(SATLiteral(1062) - aux1850 + SATLiteral(927)))
927 7757 0
1062 7757 0
1062 927 7756 0
c (( - aux1851 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7759 0
-1182 -7759 0
-1182 -912 -7760 0
c (0<=( - aux1851 + SATLiteral(1182) + SATLiteral(912)))
912 7760 0
1182 7760 0
1182 912 7759 0
c (( - aux1852 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7762 0
-1197 -7762 0
-1197 -1212 -7763 0
c (0<=( - aux1852 + SATLiteral(1197) + SATLiteral(1212)))
1212 7763 0
1197 7763 0
1197 1212 7762 0
c ((SATLiteral(1077) + aux1852 - aux1853)<=0)
7762 -7765 0
7763 -7766 0
-1077 -7765 0
-1077 7762 -7766 0
-1077 7763 -7768 0
c (0<=(SATLiteral(1077) + aux1852 - aux1853))
-7763 7768 0
-7762 7766 0
1077 7768 0
1077 -7763 7766 0
1077 -7762 7765 0
c ((aux1849 + aux1851 - aux1854)<=0)
7759 -7770 0
7760 -7771 0
7753 -7770 0
7753 7759 -7771 0
7753 7760 -7773 0
7754 -7771 0
7754 7759 -7773 0
7754 7760 -7775 0
c (0<=(aux1849 + aux1851 - aux1854))
-7760 7775 0
-7759 7773 0
-7754 7775 0
-7754 -7760 7773 0
-7754 -7759 7771 0
-7753 7773 0
-7753 -7760 7771 0
-7753 -7759 7770 0
c ((SATLiteral(1049) - aux1855 + SATLiteral(944))<=0)
-944 -7777 0
-1049 -7777 0
-1049 -944 -7778 0
c (0<=(SATLiteral(1049) - aux1855 + SATLiteral(944)))
944 7778 0
1049 7778 0
1049 944 7777 0
c ((SATLiteral(1064) - aux1856 + SATLiteral(929))<=0)
-929 -7780 0
-1064 -7780 0
-1064 -929 -7781 0
c (0<=(SATLiteral(1064) - aux1856 + SATLiteral(929)))
929 7781 0
1064 7781 0
1064 929 7780 0
c (( - aux1857 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7783 0
-1184 -7783 0
-1184 -914 -7784 0
c (0<=( - aux1857 + SATLiteral(1184) + SATLiteral(914)))
914 7784 0
1184 7784 0
1184 914 7783 0
c (( - aux1858 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7786 0
-1199 -7786 0
-1199 -1214 -7787 0
c (0<=( - aux1858 + SATLiteral(1199) + SATLiteral(1214)))
1214 7787 0
1199 7787 0
1199 1214 7786 0
c ((SATLiteral(1079) + aux1858 - aux1859)<=0)
7786 -7789 0
7787 -7790 0
-1079 -7789 0
-1079 7786 -7790 0
-1079 7787 -7792 0
c (0<=(SATLiteral(1079) + aux1858 - aux1859))
-7787 7792 0
-7786 7790 0
1079 7792 0
1079 -7787 7790 0
1079 -7786 7789 0
c ((aux1855 + aux1857 - aux1860)<=0)
7783 -7794 0
7784 -7795 0
7777 -7794 0
7777 7783 -7795 0
7777 7784 -7797 0
7778 -7795 0
7778 7783 -7797 0
7778 7784 -7799 0
c (0<=(aux1855 + aux1857 - aux1860))
-7784 7799 0
-7783 7797 0
-7778 7799 0
-7778 -7784 7797 0
-7778 -7783 7795 0
-7777 7797 0
-7777 -7784 7795 0
-7777 -7783 7794 0
c ((SATLiteral(1051) - aux1861 + SATLiteral(946))<=0)
-946 -7801 0
-1051 -7801 0
-1051 -946 -7802 0
c (0<=(SATLiteral(1051) - aux1861 + SATLiteral(946)))
946 7802 0
1051 7802 0
1051 946 7801 0
c ((SATLiteral(1066) - aux1862 + SATLiteral(931))<=0)
-931 -7804 0
-1066 -7804 0
-1066 -931 -7805 0
c (0<=(SATLiteral(1066) - aux1862 + SATLiteral(931)))
931 7805 0
1066 7805 0
1066 931 7804 0
c (( - aux1863 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7807 0
-1186 -7807 0
-1186 -916 -7808 0
c (0<=( - aux1863 + SATLiteral(1186) + SATLiteral(916)))
916 7808 0
1186 7808 0
1186 916 7807 0
c (( - aux1864 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7810 0
-1201 -7810 0
-1201 -1216 -7811 0
c (0<=( - aux1864 + SATLiteral(1201) + SATLiteral(1216)))
1216 7811 0
1201 7811 0
1201 1216 7810 0
c ((SATLiteral(1081) + aux1864 - aux1865)<=0)
7810 -7813 0
7811 -7814 0
-1081 -7813 0
-1081 7810 -7814 0
-1081 7811 -7816 0
c (0<=(SATLiteral(1081) + aux1864 - aux1865))
-7811 7816 0
-7810 7814 0
1081 7816 0
1081 -7811 7814 0
1081 -7810 7813 0
c ((aux1861 + aux1863 - aux1866)<=0)
7807 -7818 0
7808 -7819 0
7801 -7818 0
7801 7807 -7819 0
7801 7808 -7821 0
7802 -7819 0
7802 7807 -7821 0
7802 7808 -7823 0
c (0<=(aux1861 + aux1863 - aux1866))
-7808 7823 0
-7807 7821 0
-7802 7823 0
-7802 -7808 7821 0
-7802 -7807 7819 0
-7801 7821 0
-7801 -7808 7819 0
-7801 -7807 7818 0
c ((SATLiteral(-1050) - aux1867 + SATLiteral(-945))<=0)
945 -7825 0
1050 -7825 0
1050 945 -7826 0
c (0<=(SATLiteral(-1050) - aux1867 + SATLiteral(-945)))
-945 7826 0
-1050 7826 0
-1050 -945 7825 0
c ((SATLiteral(-1065) - aux1868 + SATLiteral(-930))<=0)
930 -7828 0
1065 -7828 0
1065 930 -7829 0
c (0<=(SATLiteral(-1065) - aux1868 + SATLiteral(-930)))
-930 7829 0
-1065 7829 0
-1065 -930 7828 0
c (( - aux1869 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7831 0
1185 -7831 0
1185 915 -7832 0
c (0<=( - aux1869 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7832 0
-1185 7832 0
-1185 -915 7831 0
c (( - aux1870 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7834 0
1200 -7834 0
1200 1215 -7835 0
c (0<=( - aux1870 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7835 0
-1200 7835 0
-1200 -1215 7834 0
c ((SATLiteral(-1080) + aux1870 - aux1871)<=0)
7834 -7837 0
7835 -7838 0
1080 -7837 0
1080 7834 -7838 0
1080 7835 -7840 0
c (0<=(SATLiteral(-1080) + aux1870 - aux1871))
-7835 7840 0
-7834 7838 0
-1080 7840 0
-1080 -7835 7838 0
-1080 -7834 7837 0
c ((aux1867 + aux1869 - aux1872)<=0)
7831 -7842 0
7832 -7843 0
7825 -7842 0
7825 7831 -7843 0
7825 7832 -7845 0
7826 -7843 0
7826 7831 -7845 0
7826 7832 -7847 0
c (0<=(aux1867 + aux1869 - aux1872))
-7832 7847 0
-7831 7845 0
-7826 7847 0
-7826 -7832 7845 0
-7826 -7831 7843 0
-7825 7845 0
-7825 -7832 7843 0
-7825 -7831 7842 0
c ((SATLiteral(302) - aux1891 + SATLiteral(572))<=0)
-572 -7903 0
-302 -7903 0
-302 -572 -7904 0
c (0<=(SATLiteral(302) - aux1891 + SATLiteral(572)))
572 7904 0
302 7904 0
302 572 7903 0
c ((SATLiteral(707) - aux1892 + SATLiteral(857))<=0)
-857 -7906 0
-707 -7906 0
-707 -857 -7907 0
c (0<=(SATLiteral(707) - aux1892 + SATLiteral(857)))
857 7907 0
707 7907 0
707 857 7906 0
c (( - aux1893 + SATLiteral(437) + SATLiteral(842))<=0)
-842 -7909 0
-437 -7909 0
-437 -842 -7910 0
c (0<=( - aux1893 + SATLiteral(437) + SATLiteral(842)))
842 7910 0
437 7910 0
437 842 7909 0
c ((SATLiteral(304) - aux1894 + SATLiteral(574))<=0)
-574 -7912 0
-304 -7912 0
-304 -574 -7913 0
c (0<=(SATLiteral(304) - aux1894 + SATLiteral(574)))
574 7913 0
304 7913 0
304 574 7912 0
c ((SATLiteral(709) - aux1895 + SATLiteral(859))<=0)
-859 -7915 0
-709 -7915 0
-709 -859 -7916 0
c (0<=(SATLiteral(709) - aux1895 + SATLiteral(859)))
859 7916 0
709 7916 0
709 859 7915 0
c (( - aux1896 + SATLiteral(439) + SATLiteral(844))<=0)
-844 -7918 0
-439 -7918 0
-439 -844 -7919 0
c (0<=( - aux1896 + SATLiteral(439) + SATLiteral(844)))
844 7919 0
439 7919 0
439 844 7918 0
c ((SATLiteral(306) - aux1897 + SATLiteral(576))<=0)
-576 -7921 0
-306 -7921 0
-306 -576 -7922 0
c (0<=(SATLiteral(306) - aux1897 + SATLiteral(576)))
576 7922 0
306 7922 0
306 576 7921 0
c ((SATLiteral(711) - aux1898 + SATLiteral(861))<=0)
-861 -7924 0
-711 -7924 0
-711 -861 -7925 0
c (0<=(SATLiteral(711) - aux1898 + SATLiteral(861)))
861 7925 0
711 7925 0
711 861 7924 0
c (( - aux1899 + SATLiteral(441) + SATLiteral(846))<=0)
-846 -7927 0
-441 -7927 0
-441 -846 -7928 0
c (0<=( - aux1899 + SATLiteral(441) + SATLiteral(846)))
846 7928 0
441 7928 0
441 846 7927 0
c ((SATLiteral(308) - aux1900 + SATLiteral(578))<=0)
-578 -7930 0
-308 -7930 0
-308 -578 -7931 0
c (0<=(SATLiteral(308) - aux1900 + SATLiteral(578)))
578 7931 0
308 7931 0
308 578 7930 0
c ((SATLiteral(713) - aux1901 + SATLiteral(863))<=0)
-863 -7933 0
-713 -7933 0
-713 -863 -7934 0
c (0<=(SATLiteral(713) - aux1901 + SATLiteral(863)))
863 7934 0
713 7934 0
713 863 7933 0
c (( - aux1902 + SATLiteral(443) + SATLiteral(848))<=0)
-848 -7936 0
-443 -7936 0
-443 -848 -7937 0
c (0<=( - aux1902 + SATLiteral(443) + SATLiteral(848)))
848 7937 0
443 7937 0
443 848 7936 0
c ((SATLiteral(310) - aux1903 + SATLiteral(580))<=0)
-580 -7939 0
-310 -7939 0
-310 -580 -7940 0
c (0<=(SATLiteral(310) - aux1903 + SATLiteral(580)))
580 7940 0
310 7940 0
310 580 7939 0
c ((SATLiteral(715) - aux1904 + SATLiteral(865))<=0)
-865 -7942 0
-715 -7942 0
-715 -865 -7943 0
c (0<=(SATLiteral(715) - aux1904 + SATLiteral(865)))
865 7943 0
715 7943 0
715 865 7942 0
c (( - aux1905 + SATLiteral(445) + SATLiteral(850))<=0)
-850 -7945 0
-445 -7945 0
-445 -850 -7946 0
c (0<=( - aux1905 + SATLiteral(445) + SATLiteral(850)))
850 7946 0
445 7946 0
445 850 7945 0
c ((SATLiteral(312) - aux1906 + SATLiteral(582))<=0)
-582 -7948 0
-312 -7948 0
-312 -582 -7949 0
c (0<=(SATLiteral(312) - aux1906 + SATLiteral(582)))
582 7949 0
312 7949 0
312 582 7948 0
c ((SATLiteral(717) - aux1907 + SATLiteral(867))<=0)
-867 -7951 0
-717 -7951 0
-717 -867 -7952 0
c (0<=(SATLiteral(717) - aux1907 + SATLiteral(867)))
867 7952 0
717 7952 0
717 867 7951 0
c (( - aux1908 + SATLiteral(447) + SATLiteral(852))<=0)
-852 -7954 0
-447 -7954 0
-447 -852 -7955 0
c (0<=( - aux1908 + SATLiteral(447) + SATLiteral(852)))
852 7955 0
447 7955 0
447 852 7954 0
c ((SATLiteral(314) - aux1909 + SATLiteral(584))<=0)
-584 -7957 0
-314 -7957 0
-314 -584 -7958 0
c (0<=(SATLiteral(314) - aux1909 + SATLiteral(584)))
584 7958 0
314 7958 0
314 584 7957 0
c ((SATLiteral(719) - aux1910 + SATLiteral(869))<=0)
-869 -7960 0
-719 -7960 0
-719 -869 -7961 0
c (0<=(SATLiteral(719) - aux1910 + SATLiteral(869)))
869 7961 0
719 7961 0
719 869 7960 0
c (( - aux1911 + SATLiteral(449) + SATLiteral(854))<=0)
-854 -7963 0
-449 -7963 0
-449 -854 -7964 0
c (0<=( - aux1911 + SATLiteral(449) + SATLiteral(854)))
854 7964 0
449 7964 0
449 854 7963 0
c ((SATLiteral(316) - aux1912 + SATLiteral(586))<=0)
-586 -7966 0
-316 -7966 0
-316 -586 -7967 0
c (0<=(SATLiteral(316) - aux1912 + SATLiteral(586)))
586 7967 0
316 7967 0
316 586 7966 0
c ((SATLiteral(721) - aux1913 + SATLiteral(871))<=0)
-871 -7969 0
-721 -7969 0
-721 -871 -7970 0
c (0<=(SATLiteral(721) - aux1913 + SATLiteral(871)))
871 7970 0
721 7970 0
721 871 7969 0
c (( - aux1914 + SATLiteral(451) + SATLiteral(856))<=0)
-856 -7972 0
-451 -7972 0
-451 -856 -7973 0
c (0<=( - aux1914 + SATLiteral(451) + SATLiteral(856)))
856 7973 0
451 7973 0
451 856 7972 0
c ((SATLiteral(-315) - aux1915 + SATLiteral(-585))<=0)
585 -7975 0
315 -7975 0
315 585 -7976 0
c (0<=(SATLiteral(-315) - aux1915 + SATLiteral(-585)))
-585 7976 0
-315 7976 0
-315 -585 7975 0
c ((SATLiteral(-720) - aux1916 + SATLiteral(-870))<=0)
870 -7978 0
720 -7978 0
720 870 -7979 0
c (0<=(SATLiteral(-720) - aux1916 + SATLiteral(-870)))
-870 7979 0
-720 7979 0
-720 -870 7978 0
c (( - aux1917 + SATLiteral(-450) + SATLiteral(-855))<=0)
855 -7981 0
450 -7981 0
450 855 -7982 0
c (0<=( - aux1917 + SATLiteral(-450) + SATLiteral(-855)))
-855 7982 0
-450 7982 0
-450 -855 7981 0
c ((SATLiteral(347) - aux1918 + SATLiteral(632))<=0)
-632 -7984 0
-347 -7984 0
-347 -632 -7985 0
c (0<=(SATLiteral(347) - aux1918 + SATLiteral(632)))
632 7985 0
347 7985 0
347 632 7984 0
c ((SATLiteral(362) - aux1919 + SATLiteral(902))<=0)
-902 -7987 0
-362 -7987 0
-362 -902 -7988 0
c (0<=(SATLiteral(362) - aux1919 + SATLiteral(902)))
902 7988 0
362 7988 0
362 902 7987 0
c ((SATLiteral(767) - aux1920 + SATLiteral(497))<=0)
-497 -7990 0
-767 -7990 0
-767 -497 -7991 0
c (0<=(SATLiteral(767) - aux1920 + SATLiteral(497)))
497 7991 0
767 7991 0
767 497 7990 0
c ((SATLiteral(349) - aux1921 + SATLiteral(634))<=0)
-634 -7993 0
-349 -7993 0
-349 -634 -7994 0
c (0<=(SATLiteral(349) - aux1921 + SATLiteral(634)))
634 7994 0
349 7994 0
349 634 7993 0
c ((SATLiteral(364) - aux1922 + SATLiteral(904))<=0)
-904 -7996 0
-364 -7996 0
-364 -904 -7997 0
c (0<=(SATLiteral(364) - aux1922 + SATLiteral(904)))
904 7997 0
364 7997 0
364 904 7996 0
c ((SATLiteral(769) - aux1923 + SATLiteral(499))<=0)
-499 -7999 0
-769 -7999 0
-769 -499 -8000 0
c (0<=(SATLiteral(769) - aux1923 + SATLiteral(499)))
499 8000 0
769 8000 0
769 499 7999 0
c ((SATLiteral(351) - aux1924 + SATLiteral(636))<=0)
-636 -8002 0
-351 -8002 0
-351 -636 -8003 0
c (0<=(SATLiteral(351) - aux1924 + SATLiteral(636)))
636 8003 0
351 8003 0
351 636 8002 0
c ((SATLiteral(366) - aux1925 + SATLiteral(906))<=0)
-906 -8005 0
-366 -8005 0
-366 -906 -8006 0
c (0<=(SATLiteral(366) - aux1925 + SATLiteral(906)))
906 8006 0
366 8006 0
366 906 8005 0
c ((SATLiteral(771) - aux1926 + SATLiteral(501))<=0)
-501 -8008 0
-771 -8008 0
-771 -501 -8009 0
c (0<=(SATLiteral(771) - aux1926 + SATLiteral(501)))
501 8009 0
771 8009 0
771 501 8008 0
c ((SATLiteral(353) - aux1927 + SATLiteral(638))<=0)
-638 -8011 0
-353 -8011 0
-353 -638 -8012 0
c (0<=(SATLiteral(353) - aux1927 + SATLiteral(638)))
638 8012 0
353 8012 0
353 638 8011 0
c ((SATLiteral(368) - aux1928 + SATLiteral(908))<=0)
-908 -8014 0
-368 -8014 0
-368 -908 -8015 0
c (0<=(SATLiteral(368) - aux1928 + SATLiteral(908)))
908 8015 0
368 8015 0
368 908 8014 0
c ((SATLiteral(773) - aux1929 + SATLiteral(503))<=0)
-503 -8017 0
-773 -8017 0
-773 -503 -8018 0
c (0<=(SATLiteral(773) - aux1929 + SATLiteral(503)))
503 8018 0
773 8018 0
773 503 8017 0
c ((SATLiteral(355) - aux1930 + SATLiteral(640))<=0)
-640 -8020 0
-355 -8020 0
-355 -640 -8021 0
c (0<=(SATLiteral(355) - aux1930 + SATLiteral(640)))
640 8021 0
355 8021 0
355 640 8020 0
c ((SATLiteral(370) - aux1931 + SATLiteral(910))<=0)
-910 -8023 0
-370 -8023 0
-370 -910 -8024 0
c (0<=(SATLiteral(370) - aux1931 + SATLiteral(910)))
910 8024 0
370 8024 0
370 910 8023 0
c ((SATLiteral(775) - aux1932 + SATLiteral(505))<=0)
-505 -8026 0
-775 -8026 0
-775 -505 -8027 0
c (0<=(SATLiteral(775) - aux1932 + SATLiteral(505)))
505 8027 0
775 8027 0
775 505 8026 0
c ((SATLiteral(357) - aux1933 + SATLiteral(642))<=0)
-642 -8029 0
-357 -8029 0
-357 -642 -8030 0
c (0<=(SATLiteral(357) - aux1933 + SATLiteral(642)))
642 8030 0
357 8030 0
357 642 8029 0
c ((SATLiteral(372) - aux1934 + SATLiteral(912))<=0)
-912 -8032 0
-372 -8032 0
-372 -912 -8033 0
c (0<=(SATLiteral(372) - aux1934 + SATLiteral(912)))
912 8033 0
372 8033 0
372 912 8032 0
c ((SATLiteral(777) - aux1935 + SATLiteral(507))<=0)
-507 -8035 0
-777 -8035 0
-777 -507 -8036 0
c (0<=(SATLiteral(777) - aux1935 + SATLiteral(507)))
507 8036 0
777 8036 0
777 507 8035 0
c ((SATLiteral(359) - aux1936 + SATLiteral(644))<=0)
-644 -8038 0
-359 -8038 0
-359 -644 -8039 0
c (0<=(SATLiteral(359) - aux1936 + SATLiteral(644)))
644 8039 0
359 8039 0
359 644 8038 0
c ((SATLiteral(374) - aux1937 + SATLiteral(914))<=0)
-914 -8041 0
-374 -8041 0
-374 -914 -8042 0
c (0<=(SATLiteral(374) - aux1937 + SATLiteral(914)))
914 8042 0
374 8042 0
374 914 8041 0
c ((SATLiteral(779) - aux1938 + SATLiteral(509))<=0)
-509 -8044 0
-779 -8044 0
-779 -509 -8045 0
c (0<=(SATLiteral(779) - aux1938 + SATLiteral(509)))
509 8045 0
779 8045 0
779 509 8044 0
c ((SATLiteral(361) - aux1939 + SATLiteral(646))<=0)
-646 -8047 0
-361 -8047 0
-361 -646 -8048 0
c (0<=(SATLiteral(361) - aux1939 + SATLiteral(646)))
646 8048 0
361 8048 0
361 646 8047 0
c ((SATLiteral(376) - aux1940 + SATLiteral(916))<=0)
-916 -8050 0
-376 -8050 0
-376 -916 -8051 0
c (0<=(SATLiteral(376) - aux1940 + SATLiteral(916)))
916 8051 0
376 8051 0
376 916 8050 0
c ((SATLiteral(781) - aux1941 + SATLiteral(511))<=0)
-511 -8053 0
-781 -8053 0
-781 -511 -8054 0
c (0<=(SATLiteral(781) - aux1941 + SATLiteral(511)))
511 8054 0
781 8054 0
781 511 8053 0
c ((SATLiteral(-360) - aux1942 + SATLiteral(-645))<=0)
645 -8056 0
360 -8056 0
360 645 -8057 0
c (0<=(SATLiteral(-360) - aux1942 + SATLiteral(-645)))
-645 8057 0
-360 8057 0
-360 -645 8056 0
c ((SATLiteral(-375) - aux1943 + SATLiteral(-915))<=0)
915 -8059 0
375 -8059 0
375 915 -8060 0
c (0<=(SATLiteral(-375) - aux1943 + SATLiteral(-915)))
-915 8060 0
-375 8060 0
-375 -915 8059 0
c ((SATLiteral(-780) - aux1944 + SATLiteral(-510))<=0)
510 -8062 0
780 -8062 0
780 510 -8063 0
c (0<=(SATLiteral(-780) - aux1944 + SATLiteral(-510)))
-510 8063 0
-780 8063 0
-780 -510 8062 0
