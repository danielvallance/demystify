p cnf 8398 40247                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' direct represents '2' with '138'
c Var 'x_00002_00001' direct represents '3' with '139'
c Var 'x_00002_00001' direct represents '4' with '140'
c Var 'x_00002_00001' direct represents '5' with '141'
c Var 'x_00002_00001' direct represents '6' with '142'
c Var 'x_00002_00001' direct represents '7' with '143'
c Var 'x_00002_00001' direct represents '8' with '144'
c Var 'x_00002_00001' direct represents '9' with '145'
137 138 139 140 141 142 143 144 145 0
-137 146 0
-137 149 0
-138 147 0
-138 149 0
-139 148 0
-139 149 0
-140 146 0
-140 150 0
-141 147 0
-141 150 0
-142 148 0
-142 150 0
-143 146 0
-143 151 0
-144 147 0
-144 151 0
-145 148 0
-145 151 0
-146 -147 0
-146 -148 0
-147 -148 0
-149 -150 0
-149 -151 0
-150 -151 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' direct represents '2' with '303'
c Var 'x_00003_00003' direct represents '3' with '304'
c Var 'x_00003_00003' direct represents '4' with '305'
c Var 'x_00003_00003' direct represents '5' with '306'
c Var 'x_00003_00003' direct represents '6' with '307'
c Var 'x_00003_00003' direct represents '7' with '308'
c Var 'x_00003_00003' direct represents '8' with '309'
c Var 'x_00003_00003' direct represents '9' with '310'
302 303 304 305 306 307 308 309 310 0
-302 311 0
-302 314 0
-303 312 0
-303 314 0
-304 313 0
-304 314 0
-305 311 0
-305 315 0
-306 312 0
-306 315 0
-307 313 0
-307 315 0
-308 311 0
-308 316 0
-309 312 0
-309 316 0
-310 313 0
-310 316 0
-311 -312 0
-311 -313 0
-312 -313 0
-314 -315 0
-314 -316 0
-315 -316 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' direct represents '2' with '903'
c Var 'x_00007_00007' direct represents '3' with '904'
c Var 'x_00007_00007' direct represents '4' with '905'
c Var 'x_00007_00007' direct represents '5' with '906'
c Var 'x_00007_00007' direct represents '6' with '907'
c Var 'x_00007_00007' direct represents '7' with '908'
c Var 'x_00007_00007' direct represents '8' with '909'
c Var 'x_00007_00007' direct represents '9' with '910'
902 903 904 905 906 907 908 909 910 0
-902 911 0
-902 914 0
-903 912 0
-903 914 0
-904 913 0
-904 914 0
-905 911 0
-905 915 0
-906 912 0
-906 915 0
-907 913 0
-907 915 0
-908 911 0
-908 916 0
-909 912 0
-909 916 0
-910 913 0
-910 916 0
-911 -912 0
-911 -913 0
-912 -913 0
-914 -915 0
-914 -916 0
-915 -916 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' direct represents '2' with '1068'
c Var 'x_00008_00009' direct represents '3' with '1069'
c Var 'x_00008_00009' direct represents '4' with '1070'
c Var 'x_00008_00009' direct represents '5' with '1071'
c Var 'x_00008_00009' direct represents '6' with '1072'
c Var 'x_00008_00009' direct represents '7' with '1073'
c Var 'x_00008_00009' direct represents '8' with '1074'
c Var 'x_00008_00009' direct represents '9' with '1075'
1067 1068 1069 1070 1071 1072 1073 1074 1075 0
-1067 1076 0
-1067 1079 0
-1068 1077 0
-1068 1079 0
-1069 1078 0
-1069 1079 0
-1070 1076 0
-1070 1080 0
-1071 1077 0
-1071 1080 0
-1072 1078 0
-1072 1080 0
-1073 1076 0
-1073 1081 0
-1074 1077 0
-1074 1081 0
-1075 1078 0
-1075 1081 0
-1076 -1077 0
-1076 -1078 0
-1077 -1078 0
-1079 -1080 0
-1079 -1081 0
-1080 -1081 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
1248 -1248 0
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
1253 -1253 0
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
1268 -1268 0
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
1272 -1272 0
c Encoding variable: alldiff_hint_00030 with domain: bool (representing constraint )
c Var 'alldiff_hint_00030' direct represents '0' with '-1273'
c Var 'alldiff_hint_00030' direct represents '1' with '1273'
c Var 'alldiff_hint_00030' order represents '1' with '1'
c Var 'alldiff_hint_00030' order represents '0' with '-1273'
c Encoding variable: alldiff_hint_00031 with domain: bool (representing constraint )
c Var 'alldiff_hint_00031' direct represents '0' with '-1274'
c Var 'alldiff_hint_00031' direct represents '1' with '1274'
c Var 'alldiff_hint_00031' order represents '1' with '1'
c Var 'alldiff_hint_00031' order represents '0' with '-1274'
c Encoding variable: alldiff_hint_00032 with domain: bool (representing constraint )
c Var 'alldiff_hint_00032' direct represents '0' with '-1275'
c Var 'alldiff_hint_00032' direct represents '1' with '1275'
c Var 'alldiff_hint_00032' order represents '1' with '1'
c Var 'alldiff_hint_00032' order represents '0' with '-1275'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1276'
c Var 'sum_hint_00001' direct represents '1' with '1276'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1276'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1277'
c Var 'sum_hint_00002' direct represents '1' with '1277'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1277'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1278'
c Var 'sum_hint_00003' direct represents '1' with '1278'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1278'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1279'
c Var 'sum_hint_00004' direct represents '1' with '1279'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1279'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1280'
c Var 'sum_hint_00005' direct represents '1' with '1280'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1280'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1281'
c Var 'sum_hint_00006' direct represents '1' with '1281'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1281'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1282'
c Var 'sum_hint_00007' direct represents '1' with '1282'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1282'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1283'
c Var 'sum_hint_00008' direct represents '1' with '1283'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1283'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1284'
c Var 'sum_hint_00009' direct represents '1' with '1284'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1284'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1285'
c Var 'sum_hint_00010' direct represents '1' with '1285'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1285'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1286'
c Var 'sum_hint_00011' direct represents '1' with '1286'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1286'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1287'
c Var 'sum_hint_00012' direct represents '1' with '1287'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1287'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1288'
c Var 'sum_hint_00013' direct represents '1' with '1288'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1288'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1289'
c Var 'sum_hint_00014' direct represents '1' with '1289'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1289'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1290'
c Var 'sum_hint_00015' direct represents '1' with '1290'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1290'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1291'
c Var 'sum_hint_00016' direct represents '1' with '1291'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1291'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1292'
c Var 'sum_hint_00017' direct represents '1' with '1292'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1292'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1293'
c Var 'sum_hint_00018' direct represents '1' with '1293'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1293'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1294'
c Var 'sum_hint_00019' direct represents '1' with '1294'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1294'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1295'
c Var 'sum_hint_00020' direct represents '1' with '1295'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1295'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1296'
c Var 'sum_hint_00021' direct represents '1' with '1296'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1296'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1297'
c Var 'sum_hint_00022' direct represents '1' with '1297'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1297'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1298'
c Var 'sum_hint_00023' direct represents '1' with '1298'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1298'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1299'
c Var 'sum_hint_00024' direct represents '1' with '1299'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1299'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1300'
c Var 'sum_hint_00025' direct represents '1' with '1300'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1300'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1301'
c Var 'sum_hint_00026' direct represents '1' with '1301'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1301'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1302'
c Var 'sum_hint_00027' direct represents '1' with '1302'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1302'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1303'
c Var 'sum_hint_00028' direct represents '1' with '1303'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1303'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1304'
c Var 'sum_hint_00029' direct represents '1' with '1304'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1304'
c Encoding variable: sum_hint_00030 with domain: bool (representing constraint )
c Var 'sum_hint_00030' direct represents '0' with '-1305'
c Var 'sum_hint_00030' direct represents '1' with '1305'
c Var 'sum_hint_00030' order represents '1' with '1'
c Var 'sum_hint_00030' order represents '0' with '-1305'
c Encoding variable: sum_hint_00031 with domain: bool (representing constraint )
c Var 'sum_hint_00031' direct represents '0' with '-1306'
c Var 'sum_hint_00031' direct represents '1' with '1306'
c Var 'sum_hint_00031' order represents '1' with '1'
c Var 'sum_hint_00031' order represents '0' with '-1306'
c Encoding variable: sum_hint_00032 with domain: bool (representing constraint )
c Var 'sum_hint_00032' direct represents '0' with '-1307'
c Var 'sum_hint_00032' direct represents '1' with '1307'
c Var 'sum_hint_00032' order represents '1' with '1'
c Var 'sum_hint_00032' order represents '0' with '-1307'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002 + x_00001_00003 + x_00001_00004)=tv=25))
c Var 'aux0' direct represents '0' with '-1308'
c Var 'aux0' direct represents '1' with '1308'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1308'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006)=tv=3))
c Var 'aux1' direct represents '0' with '-1309'
c Var 'aux1' direct represents '1' with '1309'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1309'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00001_00007 + x_00001_00008)=tv=11))
c Var 'aux2' direct represents '0' with '-1310'
c Var 'aux2' direct represents '1' with '1310'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1310'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00009 + x_00003_00008 + x_00003_00009 + x_00001_00009)=tv=21))
c Var 'aux3' direct represents '0' with '-1311'
c Var 'aux3' direct represents '1' with '1311'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1311'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003 + x_00002_00004)=tv=18))
c Var 'aux4' direct represents '0' with '-1312'
c Var 'aux4' direct represents '1' with '1312'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1312'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006)=tv=7))
c Var 'aux5' direct represents '0' with '-1313'
c Var 'aux5' direct represents '1' with '1313'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1313'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00003_00007)=tv=13))
c Var 'aux6' direct represents '0' with '-1314'
c Var 'aux6' direct represents '1' with '1314'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1314'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002)=tv=5))
c Var 'aux7' direct represents '0' with '-1315'
c Var 'aux7' direct represents '1' with '1315'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1315'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00004 + x_00004_00004 + x_00004_00005)=tv=16))
c Var 'aux8' direct represents '0' with '-1316'
c Var 'aux8' direct represents '1' with '1316'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1316'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)=tv=14))
c Var 'aux9' direct represents '0' with '-1317'
c Var 'aux9' direct represents '1' with '1317'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1317'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00004_00001 + x_00005_00001 + x_00006_00001)=tv=8))
c Var 'aux10' direct represents '0' with '-1318'
c Var 'aux10' direct represents '1' with '1318'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1318'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00002 + x_00004_00003)=tv=14))
c Var 'aux11' direct represents '0' with '-1319'
c Var 'aux11' direct represents '1' with '1319'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1319'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00006 + x_00005_00005 + x_00005_00006 + x_00005_00007)=tv=20))
c Var 'aux12' direct represents '0' with '-1320'
c Var 'aux12' direct represents '1' with '1320'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1320'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00007 + x_00004_00008 + x_00005_00008)=tv=11))
c Var 'aux13' direct represents '0' with '-1321'
c Var 'aux13' direct represents '1' with '1321'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1321'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009 + x_00006_00009)=tv=16))
c Var 'aux14' direct represents '0' with '-1322'
c Var 'aux14' direct represents '1' with '1322'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1322'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002 + x_00006_00003)=tv=18))
c Var 'aux15' direct represents '0' with '-1323'
c Var 'aux15' direct represents '1' with '1323'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1323'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00005_00003 + x_00005_00004 + x_00006_00004)=tv=16))
c Var 'aux16' direct represents '0' with '-1324'
c Var 'aux16' direct represents '1' with '1324'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1324'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00007_00006 + x_00006_00005 + x_00006_00006)=tv=15))
c Var 'aux17' direct represents '0' with '-1325'
c Var 'aux17' direct represents '1' with '1325'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1325'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)=tv=15))
c Var 'aux18' direct represents '0' with '-1326'
c Var 'aux18' direct represents '1' with '1326'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1326'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00008_00001 + x_00009_00001)=tv=25))
c Var 'aux19' direct represents '0' with '-1327'
c Var 'aux19' direct represents '1' with '1327'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1327'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00003 + x_00008_00002 + x_00008_00003)=tv=14))
c Var 'aux20' direct represents '0' with '-1328'
c Var 'aux20' direct represents '1' with '1328'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1328'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005)=tv=12))
c Var 'aux21' direct represents '0' with '-1329'
c Var 'aux21' direct represents '1' with '1329'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1329'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009)=tv=7))
c Var 'aux22' direct represents '0' with '-1330'
c Var 'aux22' direct represents '1' with '1330'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1330'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00008_00004 + x_00008_00005)=tv=3))
c Var 'aux23' direct represents '0' with '-1331'
c Var 'aux23' direct represents '1' with '1331'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1331'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00006 + x_00008_00007 + x_00008_00008)=tv=19))
c Var 'aux24' direct represents '0' with '-1332'
c Var 'aux24' direct represents '1' with '1332'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1332'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00009_00002 + x_00009_00003)=tv=6))
c Var 'aux25' direct represents '0' with '-1333'
c Var 'aux25' direct represents '1' with '1333'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1333'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00009_00004 + x_00009_00005)=tv=13))
c Var 'aux26' direct represents '0' with '-1334'
c Var 'aux26' direct represents '1' with '1334'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1334'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00009_00006 + x_00009_00007 + x_00009_00008 + x_00009_00009)=tv=17))
c Var 'aux27' direct represents '0' with '-1335'
c Var 'aux27' direct represents '1' with '1335'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1335'
c Encoding variable: aux28 with domain: bool (representing constraint (x_00001_00005 != x_00001_00006))
c Var 'aux28' direct represents '0' with '-1336'
c Var 'aux28' direct represents '1' with '1336'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1336'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00001_00007 != x_00001_00008))
c Var 'aux29' direct represents '0' with '-1337'
c Var 'aux29' direct represents '1' with '1337'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1337'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00002_00005 != x_00002_00006))
c Var 'aux30' direct represents '0' with '-1338'
c Var 'aux30' direct represents '1' with '1338'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1338'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00003_00001 != x_00003_00002))
c Var 'aux31' direct represents '0' with '-1339'
c Var 'aux31' direct represents '1' with '1339'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1339'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00003_00005 != x_00003_00006))
c Var 'aux32' direct represents '0' with '-1340'
c Var 'aux32' direct represents '1' with '1340'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1340'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00004_00002 != x_00004_00003))
c Var 'aux33' direct represents '0' with '-1341'
c Var 'aux33' direct represents '1' with '1341'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1341'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00006_00007 != x_00006_00008))
c Var 'aux34' direct represents '0' with '-1342'
c Var 'aux34' direct represents '1' with '1342'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1342'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00007_00004 != x_00007_00005))
c Var 'aux35' direct represents '0' with '-1343'
c Var 'aux35' direct represents '1' with '1343'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1343'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00007_00008 != x_00007_00009))
c Var 'aux36' direct represents '0' with '-1344'
c Var 'aux36' direct represents '1' with '1344'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1344'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00008_00004 != x_00008_00005))
c Var 'aux37' direct represents '0' with '-1345'
c Var 'aux37' direct represents '1' with '1345'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1345'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00009_00002 != x_00009_00003))
c Var 'aux38' direct represents '0' with '-1346'
c Var 'aux38' direct represents '1' with '1346'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1346'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00009_00004 != x_00009_00005))
c Var 'aux39' direct represents '0' with '-1347'
c Var 'aux39' direct represents '1' with '1347'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1347'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux40' direct represents '0' with '-1348'
c Var 'aux40' direct represents '1' with '1348'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1348'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux41' direct represents '0' with '-1349'
c Var 'aux41' direct represents '1' with '1349'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1349'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux42' direct represents '0' with '-1350'
c Var 'aux42' direct represents '1' with '1350'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1350'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux43' direct represents '0' with '-1351'
c Var 'aux43' direct represents '1' with '1351'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1351'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux44' direct represents '0' with '-1352'
c Var 'aux44' direct represents '1' with '1352'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1352'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux45' direct represents '0' with '-1353'
c Var 'aux45' direct represents '1' with '1353'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1353'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux46' direct represents '0' with '-1354'
c Var 'aux46' direct represents '1' with '1354'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1354'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux47' direct represents '0' with '-1355'
c Var 'aux47' direct represents '1' with '1355'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1355'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux48' direct represents '0' with '-1356'
c Var 'aux48' direct represents '1' with '1356'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1356'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux49' direct represents '0' with '-1357'
c Var 'aux49' direct represents '1' with '1357'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1357'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux50' direct represents '0' with '-1358'
c Var 'aux50' direct represents '1' with '1358'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1358'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux51' direct represents '0' with '-1359'
c Var 'aux51' direct represents '1' with '1359'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1359'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux52' direct represents '0' with '-1360'
c Var 'aux52' direct represents '1' with '1360'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1360'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux53' direct represents '0' with '-1361'
c Var 'aux53' direct represents '1' with '1361'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1361'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux54' direct represents '0' with '-1362'
c Var 'aux54' direct represents '1' with '1362'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1362'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux55' direct represents '0' with '-1363'
c Var 'aux55' direct represents '1' with '1363'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1363'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux56' direct represents '0' with '-1364'
c Var 'aux56' direct represents '1' with '1364'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1364'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux57' direct represents '0' with '-1365'
c Var 'aux57' direct represents '1' with '1365'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1365'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux58' direct represents '0' with '-1366'
c Var 'aux58' direct represents '1' with '1366'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1366'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux59' direct represents '0' with '-1367'
c Var 'aux59' direct represents '1' with '1367'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1367'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux60' direct represents '0' with '-1368'
c Var 'aux60' direct represents '1' with '1368'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1368'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux61' direct represents '0' with '-1369'
c Var 'aux61' direct represents '1' with '1369'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1369'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux62' direct represents '0' with '-1370'
c Var 'aux62' direct represents '1' with '1370'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1370'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux63' direct represents '0' with '-1371'
c Var 'aux63' direct represents '1' with '1371'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1371'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux64' direct represents '0' with '-1372'
c Var 'aux64' direct represents '1' with '1372'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1372'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux65' direct represents '0' with '-1373'
c Var 'aux65' direct represents '1' with '1373'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1373'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux66' direct represents '0' with '-1374'
c Var 'aux66' direct represents '1' with '1374'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1374'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux67' direct represents '0' with '-1375'
c Var 'aux67' direct represents '1' with '1375'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1375'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux68' direct represents '0' with '-1376'
c Var 'aux68' direct represents '1' with '1376'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1376'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux69' direct represents '0' with '-1377'
c Var 'aux69' direct represents '1' with '1377'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1377'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux70' direct represents '0' with '-1378'
c Var 'aux70' direct represents '1' with '1378'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1378'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux71' direct represents '0' with '-1379'
c Var 'aux71' direct represents '1' with '1379'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1379'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux72' direct represents '0' with '-1380'
c Var 'aux72' direct represents '1' with '1380'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1380'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux73' direct represents '0' with '-1381'
c Var 'aux73' direct represents '1' with '1381'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1381'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux74' direct represents '0' with '-1382'
c Var 'aux74' direct represents '1' with '1382'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1382'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux75' direct represents '0' with '-1383'
c Var 'aux75' direct represents '1' with '1383'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1383'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux76' direct represents '0' with '-1384'
c Var 'aux76' direct represents '1' with '1384'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1384'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux77' direct represents '0' with '-1385'
c Var 'aux77' direct represents '1' with '1385'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1385'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux78' direct represents '0' with '-1386'
c Var 'aux78' direct represents '1' with '1386'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1386'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux79' direct represents '0' with '-1387'
c Var 'aux79' direct represents '1' with '1387'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1387'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux80' direct represents '0' with '-1388'
c Var 'aux80' direct represents '1' with '1388'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1388'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux81' direct represents '0' with '-1389'
c Var 'aux81' direct represents '1' with '1389'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1389'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux82' direct represents '0' with '-1390'
c Var 'aux82' direct represents '1' with '1390'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1390'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux83' direct represents '0' with '-1391'
c Var 'aux83' direct represents '1' with '1391'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1391'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux84' direct represents '0' with '-1392'
c Var 'aux84' direct represents '1' with '1392'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1392'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux85' direct represents '0' with '-1393'
c Var 'aux85' direct represents '1' with '1393'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1393'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux86' direct represents '0' with '-1394'
c Var 'aux86' direct represents '1' with '1394'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1394'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux87' direct represents '0' with '-1395'
c Var 'aux87' direct represents '1' with '1395'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1395'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux88' direct represents '0' with '-1396'
c Var 'aux88' direct represents '1' with '1396'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1396'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux89' direct represents '0' with '-1397'
c Var 'aux89' direct represents '1' with '1397'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1397'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux90' direct represents '0' with '-1398'
c Var 'aux90' direct represents '1' with '1398'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1398'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux91' direct represents '0' with '-1399'
c Var 'aux91' direct represents '1' with '1399'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1399'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux92' direct represents '0' with '-1400'
c Var 'aux92' direct represents '1' with '1400'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1400'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux93' direct represents '0' with '-1401'
c Var 'aux93' direct represents '1' with '1401'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1401'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux94' direct represents '0' with '-1402'
c Var 'aux94' direct represents '1' with '1402'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1402'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux95' direct represents '0' with '-1403'
c Var 'aux95' direct represents '1' with '1403'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1403'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux96' direct represents '0' with '-1404'
c Var 'aux96' direct represents '1' with '1404'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1404'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux97' direct represents '0' with '-1405'
c Var 'aux97' direct represents '1' with '1405'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1405'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux98' direct represents '0' with '-1406'
c Var 'aux98' direct represents '1' with '1406'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1406'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux99' direct represents '0' with '-1407'
c Var 'aux99' direct represents '1' with '1407'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1407'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux100' direct represents '0' with '-1408'
c Var 'aux100' direct represents '1' with '1408'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1408'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux101' direct represents '0' with '-1409'
c Var 'aux101' direct represents '1' with '1409'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1409'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux102' direct represents '0' with '-1410'
c Var 'aux102' direct represents '1' with '1410'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1410'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux103' direct represents '0' with '-1411'
c Var 'aux103' direct represents '1' with '1411'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1411'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux104' direct represents '0' with '-1412'
c Var 'aux104' direct represents '1' with '1412'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1412'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux105' direct represents '0' with '-1413'
c Var 'aux105' direct represents '1' with '1413'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1413'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux106' direct represents '0' with '-1414'
c Var 'aux106' direct represents '1' with '1414'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1414'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux107' direct represents '0' with '-1415'
c Var 'aux107' direct represents '1' with '1415'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1415'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux108' direct represents '0' with '-1416'
c Var 'aux108' direct represents '1' with '1416'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1416'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux109' direct represents '0' with '-1417'
c Var 'aux109' direct represents '1' with '1417'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1417'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux110' direct represents '0' with '-1418'
c Var 'aux110' direct represents '1' with '1418'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1418'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux111' direct represents '0' with '-1419'
c Var 'aux111' direct represents '1' with '1419'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1419'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux112' direct represents '0' with '-1420'
c Var 'aux112' direct represents '1' with '1420'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1420'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux113' direct represents '0' with '-1421'
c Var 'aux113' direct represents '1' with '1421'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1421'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux114' direct represents '0' with '-1422'
c Var 'aux114' direct represents '1' with '1422'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1422'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux115' direct represents '0' with '-1423'
c Var 'aux115' direct represents '1' with '1423'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1423'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux116' direct represents '0' with '-1424'
c Var 'aux116' direct represents '1' with '1424'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1424'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux117' direct represents '0' with '-1425'
c Var 'aux117' direct represents '1' with '1425'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1425'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux118' direct represents '0' with '-1426'
c Var 'aux118' direct represents '1' with '1426'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1426'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux119' direct represents '0' with '-1427'
c Var 'aux119' direct represents '1' with '1427'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1427'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux120' direct represents '0' with '-1428'
c Var 'aux120' direct represents '1' with '1428'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1428'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux121' direct represents '0' with '-1429'
c Var 'aux121' direct represents '1' with '1429'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1429'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux122' direct represents '0' with '-1430'
c Var 'aux122' direct represents '1' with '1430'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1430'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux123' direct represents '0' with '-1431'
c Var 'aux123' direct represents '1' with '1431'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1431'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux124' direct represents '0' with '-1432'
c Var 'aux124' direct represents '1' with '1432'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1432'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux125' direct represents '0' with '-1433'
c Var 'aux125' direct represents '1' with '1433'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1433'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux126' direct represents '0' with '-1434'
c Var 'aux126' direct represents '1' with '1434'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1434'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux127' direct represents '0' with '-1435'
c Var 'aux127' direct represents '1' with '1435'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1435'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux128' direct represents '0' with '-1436'
c Var 'aux128' direct represents '1' with '1436'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1436'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux129' direct represents '0' with '-1437'
c Var 'aux129' direct represents '1' with '1437'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1437'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux130' direct represents '0' with '-1438'
c Var 'aux130' direct represents '1' with '1438'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1438'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux131' direct represents '0' with '-1439'
c Var 'aux131' direct represents '1' with '1439'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1439'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux132' direct represents '0' with '-1440'
c Var 'aux132' direct represents '1' with '1440'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1440'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux133' direct represents '0' with '-1441'
c Var 'aux133' direct represents '1' with '1441'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1441'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux134' direct represents '0' with '-1442'
c Var 'aux134' direct represents '1' with '1442'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1442'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux135' direct represents '0' with '-1443'
c Var 'aux135' direct represents '1' with '1443'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1443'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux136' direct represents '0' with '-1444'
c Var 'aux136' direct represents '1' with '1444'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1444'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux137' direct represents '0' with '-1445'
c Var 'aux137' direct represents '1' with '1445'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1445'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux138' direct represents '0' with '-1446'
c Var 'aux138' direct represents '1' with '1446'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1446'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux139' direct represents '0' with '-1447'
c Var 'aux139' direct represents '1' with '1447'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1447'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux140' direct represents '0' with '-1448'
c Var 'aux140' direct represents '1' with '1448'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1448'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux141' direct represents '0' with '-1449'
c Var 'aux141' direct represents '1' with '1449'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1449'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux142' direct represents '0' with '-1450'
c Var 'aux142' direct represents '1' with '1450'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1450'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux143' direct represents '0' with '-1451'
c Var 'aux143' direct represents '1' with '1451'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1451'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux144' direct represents '0' with '-1452'
c Var 'aux144' direct represents '1' with '1452'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1452'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux145' direct represents '0' with '-1453'
c Var 'aux145' direct represents '1' with '1453'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1453'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux146' direct represents '0' with '-1454'
c Var 'aux146' direct represents '1' with '1454'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1454'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux147' direct represents '0' with '-1455'
c Var 'aux147' direct represents '1' with '1455'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1455'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux148' direct represents '0' with '-1456'
c Var 'aux148' direct represents '1' with '1456'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1456'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux149' direct represents '0' with '-1457'
c Var 'aux149' direct represents '1' with '1457'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1457'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux150' direct represents '0' with '-1458'
c Var 'aux150' direct represents '1' with '1458'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1458'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux151' direct represents '0' with '-1459'
c Var 'aux151' direct represents '1' with '1459'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1459'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux152' direct represents '0' with '-1460'
c Var 'aux152' direct represents '1' with '1460'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1460'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux153' direct represents '0' with '-1461'
c Var 'aux153' direct represents '1' with '1461'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1461'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux154' direct represents '0' with '-1462'
c Var 'aux154' direct represents '1' with '1462'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1462'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux155' direct represents '0' with '-1463'
c Var 'aux155' direct represents '1' with '1463'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1463'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux156' direct represents '0' with '-1464'
c Var 'aux156' direct represents '1' with '1464'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1464'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux157' direct represents '0' with '-1465'
c Var 'aux157' direct represents '1' with '1465'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1465'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux158' direct represents '0' with '-1466'
c Var 'aux158' direct represents '1' with '1466'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1466'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux159' direct represents '0' with '-1467'
c Var 'aux159' direct represents '1' with '1467'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1467'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux160' direct represents '0' with '-1468'
c Var 'aux160' direct represents '1' with '1468'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1468'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux161' direct represents '0' with '-1469'
c Var 'aux161' direct represents '1' with '1469'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1469'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux162' direct represents '0' with '-1470'
c Var 'aux162' direct represents '1' with '1470'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1470'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux163' direct represents '0' with '-1471'
c Var 'aux163' direct represents '1' with '1471'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1471'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux164' direct represents '0' with '-1472'
c Var 'aux164' direct represents '1' with '1472'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1472'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux165' direct represents '0' with '-1473'
c Var 'aux165' direct represents '1' with '1473'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1473'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux166' direct represents '0' with '-1474'
c Var 'aux166' direct represents '1' with '1474'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1474'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux167' direct represents '0' with '-1475'
c Var 'aux167' direct represents '1' with '1475'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1475'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux168' direct represents '0' with '-1476'
c Var 'aux168' direct represents '1' with '1476'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1476'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux169' direct represents '0' with '-1477'
c Var 'aux169' direct represents '1' with '1477'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1477'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux170' direct represents '0' with '-1478'
c Var 'aux170' direct represents '1' with '1478'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1478'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux171' direct represents '0' with '-1479'
c Var 'aux171' direct represents '1' with '1479'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1479'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux172' direct represents '0' with '-1480'
c Var 'aux172' direct represents '1' with '1480'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1480'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux173' direct represents '0' with '-1481'
c Var 'aux173' direct represents '1' with '1481'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1481'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux174' direct represents '0' with '-1482'
c Var 'aux174' direct represents '1' with '1482'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1482'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux175' direct represents '0' with '-1483'
c Var 'aux175' direct represents '1' with '1483'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1483'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux176' direct represents '0' with '-1484'
c Var 'aux176' direct represents '1' with '1484'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1484'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux177' direct represents '0' with '-1485'
c Var 'aux177' direct represents '1' with '1485'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1485'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux178' direct represents '0' with '-1486'
c Var 'aux178' direct represents '1' with '1486'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1486'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux179' direct represents '0' with '-1487'
c Var 'aux179' direct represents '1' with '1487'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1487'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux180' direct represents '0' with '-1488'
c Var 'aux180' direct represents '1' with '1488'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1488'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux181' direct represents '0' with '-1489'
c Var 'aux181' direct represents '1' with '1489'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1489'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux182' direct represents '0' with '-1490'
c Var 'aux182' direct represents '1' with '1490'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1490'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux183' direct represents '0' with '-1491'
c Var 'aux183' direct represents '1' with '1491'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1491'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux184' direct represents '0' with '-1492'
c Var 'aux184' direct represents '1' with '1492'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1492'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux185' direct represents '0' with '-1493'
c Var 'aux185' direct represents '1' with '1493'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1493'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux186' direct represents '0' with '-1494'
c Var 'aux186' direct represents '1' with '1494'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1494'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux187' direct represents '0' with '-1495'
c Var 'aux187' direct represents '1' with '1495'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1495'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux188' direct represents '0' with '-1496'
c Var 'aux188' direct represents '1' with '1496'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1496'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux189' direct represents '0' with '-1497'
c Var 'aux189' direct represents '1' with '1497'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1497'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux190' direct represents '0' with '-1498'
c Var 'aux190' direct represents '1' with '1498'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1498'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux191' direct represents '0' with '-1499'
c Var 'aux191' direct represents '1' with '1499'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1499'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux192' direct represents '0' with '-1500'
c Var 'aux192' direct represents '1' with '1500'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1500'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux193' direct represents '0' with '-1501'
c Var 'aux193' direct represents '1' with '1501'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1501'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux194' direct represents '0' with '-1502'
c Var 'aux194' direct represents '1' with '1502'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1502'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux195' direct represents '0' with '-1503'
c Var 'aux195' direct represents '1' with '1503'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1503'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux196' direct represents '0' with '-1504'
c Var 'aux196' direct represents '1' with '1504'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1504'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux197' direct represents '0' with '-1505'
c Var 'aux197' direct represents '1' with '1505'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1505'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux198' direct represents '0' with '-1506'
c Var 'aux198' direct represents '1' with '1506'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1506'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux199' direct represents '0' with '-1507'
c Var 'aux199' direct represents '1' with '1507'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1507'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux200' direct represents '0' with '-1508'
c Var 'aux200' direct represents '1' with '1508'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1508'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux201' direct represents '0' with '-1509'
c Var 'aux201' direct represents '1' with '1509'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1509'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux202' direct represents '0' with '-1510'
c Var 'aux202' direct represents '1' with '1510'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1510'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux203' direct represents '0' with '-1511'
c Var 'aux203' direct represents '1' with '1511'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1511'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux204' direct represents '0' with '-1512'
c Var 'aux204' direct represents '1' with '1512'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1512'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux205' direct represents '0' with '-1513'
c Var 'aux205' direct represents '1' with '1513'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1513'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux206' direct represents '0' with '-1514'
c Var 'aux206' direct represents '1' with '1514'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1514'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux207' direct represents '0' with '-1515'
c Var 'aux207' direct represents '1' with '1515'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1515'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux208' direct represents '0' with '-1516'
c Var 'aux208' direct represents '1' with '1516'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1516'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux209' direct represents '0' with '-1517'
c Var 'aux209' direct represents '1' with '1517'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1517'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux210' direct represents '0' with '-1518'
c Var 'aux210' direct represents '1' with '1518'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1518'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux211' direct represents '0' with '-1519'
c Var 'aux211' direct represents '1' with '1519'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1519'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux212' direct represents '0' with '-1520'
c Var 'aux212' direct represents '1' with '1520'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1520'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux213' direct represents '0' with '-1521'
c Var 'aux213' direct represents '1' with '1521'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1521'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux214' direct represents '0' with '-1522'
c Var 'aux214' direct represents '1' with '1522'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1522'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux215' direct represents '0' with '-1523'
c Var 'aux215' direct represents '1' with '1523'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1523'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux216' direct represents '0' with '-1524'
c Var 'aux216' direct represents '1' with '1524'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1524'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux217' direct represents '0' with '-1525'
c Var 'aux217' direct represents '1' with '1525'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1525'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux218' direct represents '0' with '-1526'
c Var 'aux218' direct represents '1' with '1526'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1526'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux219' direct represents '0' with '-1527'
c Var 'aux219' direct represents '1' with '1527'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1527'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux220' direct represents '0' with '-1528'
c Var 'aux220' direct represents '1' with '1528'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1528'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux221' direct represents '0' with '-1529'
c Var 'aux221' direct represents '1' with '1529'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1529'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux222' direct represents '0' with '-1530'
c Var 'aux222' direct represents '1' with '1530'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1530'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux223' direct represents '0' with '-1531'
c Var 'aux223' direct represents '1' with '1531'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1531'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux224' direct represents '0' with '-1532'
c Var 'aux224' direct represents '1' with '1532'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1532'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux225' direct represents '0' with '-1533'
c Var 'aux225' direct represents '1' with '1533'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1533'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux226' direct represents '0' with '-1534'
c Var 'aux226' direct represents '1' with '1534'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1534'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux227' direct represents '0' with '-1535'
c Var 'aux227' direct represents '1' with '1535'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1535'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux228' direct represents '0' with '-1536'
c Var 'aux228' direct represents '1' with '1536'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1536'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux229' direct represents '0' with '-1537'
c Var 'aux229' direct represents '1' with '1537'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1537'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux230' direct represents '0' with '-1538'
c Var 'aux230' direct represents '1' with '1538'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1538'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux231' direct represents '0' with '-1539'
c Var 'aux231' direct represents '1' with '1539'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1539'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux232' direct represents '0' with '-1540'
c Var 'aux232' direct represents '1' with '1540'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1540'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux233' direct represents '0' with '-1541'
c Var 'aux233' direct represents '1' with '1541'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1541'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux234' direct represents '0' with '-1542'
c Var 'aux234' direct represents '1' with '1542'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1542'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux235' direct represents '0' with '-1543'
c Var 'aux235' direct represents '1' with '1543'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1543'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux236' direct represents '0' with '-1544'
c Var 'aux236' direct represents '1' with '1544'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1544'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux237' direct represents '0' with '-1545'
c Var 'aux237' direct represents '1' with '1545'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1545'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux238' direct represents '0' with '-1546'
c Var 'aux238' direct represents '1' with '1546'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1546'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux239' direct represents '0' with '-1547'
c Var 'aux239' direct represents '1' with '1547'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1547'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux240' direct represents '0' with '-1548'
c Var 'aux240' direct represents '1' with '1548'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1548'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux241' direct represents '0' with '-1549'
c Var 'aux241' direct represents '1' with '1549'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1549'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux242' direct represents '0' with '-1550'
c Var 'aux242' direct represents '1' with '1550'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1550'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux243' direct represents '0' with '-1551'
c Var 'aux243' direct represents '1' with '1551'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1551'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux244' direct represents '0' with '-1552'
c Var 'aux244' direct represents '1' with '1552'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1552'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux245' direct represents '0' with '-1553'
c Var 'aux245' direct represents '1' with '1553'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1553'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux246' direct represents '0' with '-1554'
c Var 'aux246' direct represents '1' with '1554'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1554'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux247' direct represents '0' with '-1555'
c Var 'aux247' direct represents '1' with '1555'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1555'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux248' direct represents '0' with '-1556'
c Var 'aux248' direct represents '1' with '1556'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1556'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux249' direct represents '0' with '-1557'
c Var 'aux249' direct represents '1' with '1557'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1557'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux250' direct represents '0' with '-1558'
c Var 'aux250' direct represents '1' with '1558'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1558'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux251' direct represents '0' with '-1559'
c Var 'aux251' direct represents '1' with '1559'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1559'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux252' direct represents '0' with '-1560'
c Var 'aux252' direct represents '1' with '1560'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1560'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux253' direct represents '0' with '-1561'
c Var 'aux253' direct represents '1' with '1561'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1561'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux254' direct represents '0' with '-1562'
c Var 'aux254' direct represents '1' with '1562'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1562'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux255' direct represents '0' with '-1563'
c Var 'aux255' direct represents '1' with '1563'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1563'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux256' direct represents '0' with '-1564'
c Var 'aux256' direct represents '1' with '1564'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1564'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux257' direct represents '0' with '-1565'
c Var 'aux257' direct represents '1' with '1565'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1565'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux258' direct represents '0' with '-1566'
c Var 'aux258' direct represents '1' with '1566'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1566'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux259' direct represents '0' with '-1567'
c Var 'aux259' direct represents '1' with '1567'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1567'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux260' direct represents '0' with '-1568'
c Var 'aux260' direct represents '1' with '1568'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1568'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux261' direct represents '0' with '-1569'
c Var 'aux261' direct represents '1' with '1569'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1569'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux262' direct represents '0' with '-1570'
c Var 'aux262' direct represents '1' with '1570'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1570'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux263' direct represents '0' with '-1571'
c Var 'aux263' direct represents '1' with '1571'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1571'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux264' direct represents '0' with '-1572'
c Var 'aux264' direct represents '1' with '1572'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1572'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux265' direct represents '0' with '-1573'
c Var 'aux265' direct represents '1' with '1573'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1573'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux266' direct represents '0' with '-1574'
c Var 'aux266' direct represents '1' with '1574'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1574'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux267' direct represents '0' with '-1575'
c Var 'aux267' direct represents '1' with '1575'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1575'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux268' direct represents '0' with '-1576'
c Var 'aux268' direct represents '1' with '1576'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1576'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux269' direct represents '0' with '-1577'
c Var 'aux269' direct represents '1' with '1577'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1577'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux270' direct represents '0' with '-1578'
c Var 'aux270' direct represents '1' with '1578'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1578'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux271' direct represents '0' with '-1579'
c Var 'aux271' direct represents '1' with '1579'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1579'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux272' direct represents '0' with '-1580'
c Var 'aux272' direct represents '1' with '1580'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1580'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux273' direct represents '0' with '-1581'
c Var 'aux273' direct represents '1' with '1581'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1581'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux274' direct represents '0' with '-1582'
c Var 'aux274' direct represents '1' with '1582'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1582'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux275' direct represents '0' with '-1583'
c Var 'aux275' direct represents '1' with '1583'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1583'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux276' direct represents '0' with '-1584'
c Var 'aux276' direct represents '1' with '1584'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1584'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux277' direct represents '0' with '-1585'
c Var 'aux277' direct represents '1' with '1585'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1585'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux278' direct represents '0' with '-1586'
c Var 'aux278' direct represents '1' with '1586'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1586'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux279' direct represents '0' with '-1587'
c Var 'aux279' direct represents '1' with '1587'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1587'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux280' direct represents '0' with '-1588'
c Var 'aux280' direct represents '1' with '1588'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1588'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux281' direct represents '0' with '-1589'
c Var 'aux281' direct represents '1' with '1589'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1589'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux282' direct represents '0' with '-1590'
c Var 'aux282' direct represents '1' with '1590'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1590'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1))<=1))
c Var 'aux283' direct represents '0' with '-1591'
c Var 'aux283' direct represents '1' with '1591'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1591'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2))<=1))
c Var 'aux284' direct represents '0' with '-1592'
c Var 'aux284' direct represents '1' with '1592'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1592'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3))<=1))
c Var 'aux285' direct represents '0' with '-1593'
c Var 'aux285' direct represents '1' with '1593'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1593'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4))<=1))
c Var 'aux286' direct represents '0' with '-1594'
c Var 'aux286' direct represents '1' with '1594'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1594'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5))<=1))
c Var 'aux287' direct represents '0' with '-1595'
c Var 'aux287' direct represents '1' with '1595'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1595'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6))<=1))
c Var 'aux288' direct represents '0' with '-1596'
c Var 'aux288' direct represents '1' with '1596'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1596'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7))<=1))
c Var 'aux289' direct represents '0' with '-1597'
c Var 'aux289' direct represents '1' with '1597'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1597'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8))<=1))
c Var 'aux290' direct represents '0' with '-1598'
c Var 'aux290' direct represents '1' with '1598'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1598'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9))<=1))
c Var 'aux291' direct represents '0' with '-1599'
c Var 'aux291' direct represents '1' with '1599'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1599'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00009=1) + (x_00002_00009=1))<=1))
c Var 'aux292' direct represents '0' with '-1600'
c Var 'aux292' direct represents '1' with '1600'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1600'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00009=2) + (x_00002_00009=2))<=1))
c Var 'aux293' direct represents '0' with '-1601'
c Var 'aux293' direct represents '1' with '1601'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1601'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00009=3) + (x_00002_00009=3))<=1))
c Var 'aux294' direct represents '0' with '-1602'
c Var 'aux294' direct represents '1' with '1602'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1602'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00009=4) + (x_00002_00009=4))<=1))
c Var 'aux295' direct represents '0' with '-1603'
c Var 'aux295' direct represents '1' with '1603'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1603'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00009=5) + (x_00002_00009=5))<=1))
c Var 'aux296' direct represents '0' with '-1604'
c Var 'aux296' direct represents '1' with '1604'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1604'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00009=6) + (x_00002_00009=6))<=1))
c Var 'aux297' direct represents '0' with '-1605'
c Var 'aux297' direct represents '1' with '1605'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1605'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00009=7) + (x_00002_00009=7))<=1))
c Var 'aux298' direct represents '0' with '-1606'
c Var 'aux298' direct represents '1' with '1606'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1606'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00009=8) + (x_00002_00009=8))<=1))
c Var 'aux299' direct represents '0' with '-1607'
c Var 'aux299' direct represents '1' with '1607'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1607'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00009=9) + (x_00002_00009=9))<=1))
c Var 'aux300' direct represents '0' with '-1608'
c Var 'aux300' direct represents '1' with '1608'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1608'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1))<=1))
c Var 'aux301' direct represents '0' with '-1609'
c Var 'aux301' direct represents '1' with '1609'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1609'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2))<=1))
c Var 'aux302' direct represents '0' with '-1610'
c Var 'aux302' direct represents '1' with '1610'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1610'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3))<=1))
c Var 'aux303' direct represents '0' with '-1611'
c Var 'aux303' direct represents '1' with '1611'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1611'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4))<=1))
c Var 'aux304' direct represents '0' with '-1612'
c Var 'aux304' direct represents '1' with '1612'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1612'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5))<=1))
c Var 'aux305' direct represents '0' with '-1613'
c Var 'aux305' direct represents '1' with '1613'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1613'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6))<=1))
c Var 'aux306' direct represents '0' with '-1614'
c Var 'aux306' direct represents '1' with '1614'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1614'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7))<=1))
c Var 'aux307' direct represents '0' with '-1615'
c Var 'aux307' direct represents '1' with '1615'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1615'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8))<=1))
c Var 'aux308' direct represents '0' with '-1616'
c Var 'aux308' direct represents '1' with '1616'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1616'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9))<=1))
c Var 'aux309' direct represents '0' with '-1617'
c Var 'aux309' direct represents '1' with '1617'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1617'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00002_00007=1) + (x_00002_00008=1))<=1))
c Var 'aux310' direct represents '0' with '-1618'
c Var 'aux310' direct represents '1' with '1618'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1618'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00002_00007=2) + (x_00002_00008=2))<=1))
c Var 'aux311' direct represents '0' with '-1619'
c Var 'aux311' direct represents '1' with '1619'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1619'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00002_00007=3) + (x_00002_00008=3))<=1))
c Var 'aux312' direct represents '0' with '-1620'
c Var 'aux312' direct represents '1' with '1620'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1620'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00002_00007=4) + (x_00002_00008=4))<=1))
c Var 'aux313' direct represents '0' with '-1621'
c Var 'aux313' direct represents '1' with '1621'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1621'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00002_00007=5) + (x_00002_00008=5))<=1))
c Var 'aux314' direct represents '0' with '-1622'
c Var 'aux314' direct represents '1' with '1622'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1622'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00002_00007=6) + (x_00002_00008=6))<=1))
c Var 'aux315' direct represents '0' with '-1623'
c Var 'aux315' direct represents '1' with '1623'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1623'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00002_00007=7) + (x_00002_00008=7))<=1))
c Var 'aux316' direct represents '0' with '-1624'
c Var 'aux316' direct represents '1' with '1624'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1624'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00002_00007=8) + (x_00002_00008=8))<=1))
c Var 'aux317' direct represents '0' with '-1625'
c Var 'aux317' direct represents '1' with '1625'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1625'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00002_00007=9) + (x_00002_00008=9))<=1))
c Var 'aux318' direct represents '0' with '-1626'
c Var 'aux318' direct represents '1' with '1626'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1626'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00004_00004=1) + (x_00004_00005=1))<=1))
c Var 'aux319' direct represents '0' with '-1627'
c Var 'aux319' direct represents '1' with '1627'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1627'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00004_00004=2) + (x_00004_00005=2))<=1))
c Var 'aux320' direct represents '0' with '-1628'
c Var 'aux320' direct represents '1' with '1628'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1628'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00004_00004=3) + (x_00004_00005=3))<=1))
c Var 'aux321' direct represents '0' with '-1629'
c Var 'aux321' direct represents '1' with '1629'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1629'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00004_00004=4) + (x_00004_00005=4))<=1))
c Var 'aux322' direct represents '0' with '-1630'
c Var 'aux322' direct represents '1' with '1630'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1630'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00004_00004=5) + (x_00004_00005=5))<=1))
c Var 'aux323' direct represents '0' with '-1631'
c Var 'aux323' direct represents '1' with '1631'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1631'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00004_00004=6) + (x_00004_00005=6))<=1))
c Var 'aux324' direct represents '0' with '-1632'
c Var 'aux324' direct represents '1' with '1632'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1632'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00004_00004=7) + (x_00004_00005=7))<=1))
c Var 'aux325' direct represents '0' with '-1633'
c Var 'aux325' direct represents '1' with '1633'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1633'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00004_00004=8) + (x_00004_00005=8))<=1))
c Var 'aux326' direct represents '0' with '-1634'
c Var 'aux326' direct represents '1' with '1634'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1634'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00004_00004=9) + (x_00004_00005=9))<=1))
c Var 'aux327' direct represents '0' with '-1635'
c Var 'aux327' direct represents '1' with '1635'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1635'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00004_00001=1) + (x_00005_00001=1))<=1))
c Var 'aux328' direct represents '0' with '-1636'
c Var 'aux328' direct represents '1' with '1636'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1636'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00004_00001=2) + (x_00005_00001=2))<=1))
c Var 'aux329' direct represents '0' with '-1637'
c Var 'aux329' direct represents '1' with '1637'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1637'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00004_00001=3) + (x_00005_00001=3))<=1))
c Var 'aux330' direct represents '0' with '-1638'
c Var 'aux330' direct represents '1' with '1638'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1638'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00004_00001=4) + (x_00005_00001=4))<=1))
c Var 'aux331' direct represents '0' with '-1639'
c Var 'aux331' direct represents '1' with '1639'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1639'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00004_00001=5) + (x_00005_00001=5))<=1))
c Var 'aux332' direct represents '0' with '-1640'
c Var 'aux332' direct represents '1' with '1640'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1640'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00004_00001=6) + (x_00005_00001=6))<=1))
c Var 'aux333' direct represents '0' with '-1641'
c Var 'aux333' direct represents '1' with '1641'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1641'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00004_00001=7) + (x_00005_00001=7))<=1))
c Var 'aux334' direct represents '0' with '-1642'
c Var 'aux334' direct represents '1' with '1642'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1642'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00004_00001=8) + (x_00005_00001=8))<=1))
c Var 'aux335' direct represents '0' with '-1643'
c Var 'aux335' direct represents '1' with '1643'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1643'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00004_00001=9) + (x_00005_00001=9))<=1))
c Var 'aux336' direct represents '0' with '-1644'
c Var 'aux336' direct represents '1' with '1644'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1644'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00004_00006=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1))<=1))
c Var 'aux337' direct represents '0' with '-1645'
c Var 'aux337' direct represents '1' with '1645'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1645'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00004_00006=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2))<=1))
c Var 'aux338' direct represents '0' with '-1646'
c Var 'aux338' direct represents '1' with '1646'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1646'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00004_00006=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3))<=1))
c Var 'aux339' direct represents '0' with '-1647'
c Var 'aux339' direct represents '1' with '1647'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1647'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00004_00006=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4))<=1))
c Var 'aux340' direct represents '0' with '-1648'
c Var 'aux340' direct represents '1' with '1648'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1648'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00004_00006=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5))<=1))
c Var 'aux341' direct represents '0' with '-1649'
c Var 'aux341' direct represents '1' with '1649'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1649'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00004_00006=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6))<=1))
c Var 'aux342' direct represents '0' with '-1650'
c Var 'aux342' direct represents '1' with '1650'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1650'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00004_00006=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7))<=1))
c Var 'aux343' direct represents '0' with '-1651'
c Var 'aux343' direct represents '1' with '1651'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1651'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00004_00006=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8))<=1))
c Var 'aux344' direct represents '0' with '-1652'
c Var 'aux344' direct represents '1' with '1652'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1652'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00004_00006=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9))<=1))
c Var 'aux345' direct represents '0' with '-1653'
c Var 'aux345' direct represents '1' with '1653'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1653'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00004_00007=1) + (x_00004_00008=1) + (x_00005_00008=1))<=1))
c Var 'aux346' direct represents '0' with '-1654'
c Var 'aux346' direct represents '1' with '1654'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1654'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00004_00007=2) + (x_00004_00008=2) + (x_00005_00008=2))<=1))
c Var 'aux347' direct represents '0' with '-1655'
c Var 'aux347' direct represents '1' with '1655'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1655'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00004_00007=3) + (x_00004_00008=3) + (x_00005_00008=3))<=1))
c Var 'aux348' direct represents '0' with '-1656'
c Var 'aux348' direct represents '1' with '1656'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1656'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00004_00007=4) + (x_00004_00008=4) + (x_00005_00008=4))<=1))
c Var 'aux349' direct represents '0' with '-1657'
c Var 'aux349' direct represents '1' with '1657'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1657'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00004_00007=5) + (x_00004_00008=5) + (x_00005_00008=5))<=1))
c Var 'aux350' direct represents '0' with '-1658'
c Var 'aux350' direct represents '1' with '1658'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1658'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00004_00007=6) + (x_00004_00008=6) + (x_00005_00008=6))<=1))
c Var 'aux351' direct represents '0' with '-1659'
c Var 'aux351' direct represents '1' with '1659'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1659'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00004_00007=7) + (x_00004_00008=7) + (x_00005_00008=7))<=1))
c Var 'aux352' direct represents '0' with '-1660'
c Var 'aux352' direct represents '1' with '1660'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1660'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00004_00007=8) + (x_00004_00008=8) + (x_00005_00008=8))<=1))
c Var 'aux353' direct represents '0' with '-1661'
c Var 'aux353' direct represents '1' with '1661'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1661'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00004_00007=9) + (x_00004_00008=9) + (x_00005_00008=9))<=1))
c Var 'aux354' direct represents '0' with '-1662'
c Var 'aux354' direct represents '1' with '1662'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1662'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00006_00009=1) + (x_00004_00009=1) + (x_00005_00009=1))<=1))
c Var 'aux355' direct represents '0' with '-1663'
c Var 'aux355' direct represents '1' with '1663'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1663'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00006_00009=2) + (x_00004_00009=2) + (x_00005_00009=2))<=1))
c Var 'aux356' direct represents '0' with '-1664'
c Var 'aux356' direct represents '1' with '1664'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1664'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00006_00009=3) + (x_00004_00009=3) + (x_00005_00009=3))<=1))
c Var 'aux357' direct represents '0' with '-1665'
c Var 'aux357' direct represents '1' with '1665'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1665'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00006_00009=4) + (x_00004_00009=4) + (x_00005_00009=4))<=1))
c Var 'aux358' direct represents '0' with '-1666'
c Var 'aux358' direct represents '1' with '1666'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1666'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00006_00009=5) + (x_00004_00009=5) + (x_00005_00009=5))<=1))
c Var 'aux359' direct represents '0' with '-1667'
c Var 'aux359' direct represents '1' with '1667'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1667'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00006_00009=6) + (x_00004_00009=6) + (x_00005_00009=6))<=1))
c Var 'aux360' direct represents '0' with '-1668'
c Var 'aux360' direct represents '1' with '1668'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1668'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00006_00009=7) + (x_00004_00009=7) + (x_00005_00009=7))<=1))
c Var 'aux361' direct represents '0' with '-1669'
c Var 'aux361' direct represents '1' with '1669'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1669'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00006_00009=8) + (x_00004_00009=8) + (x_00005_00009=8))<=1))
c Var 'aux362' direct represents '0' with '-1670'
c Var 'aux362' direct represents '1' with '1670'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1670'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00006_00009=9) + (x_00004_00009=9) + (x_00005_00009=9))<=1))
c Var 'aux363' direct represents '0' with '-1671'
c Var 'aux363' direct represents '1' with '1671'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1671'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00006_00002=1) + (x_00006_00003=1) + (x_00005_00002=1))<=1))
c Var 'aux364' direct represents '0' with '-1672'
c Var 'aux364' direct represents '1' with '1672'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1672'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00006_00002=2) + (x_00006_00003=2) + (x_00005_00002=2))<=1))
c Var 'aux365' direct represents '0' with '-1673'
c Var 'aux365' direct represents '1' with '1673'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1673'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00006_00002=3) + (x_00006_00003=3) + (x_00005_00002=3))<=1))
c Var 'aux366' direct represents '0' with '-1674'
c Var 'aux366' direct represents '1' with '1674'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1674'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00006_00002=4) + (x_00006_00003=4) + (x_00005_00002=4))<=1))
c Var 'aux367' direct represents '0' with '-1675'
c Var 'aux367' direct represents '1' with '1675'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1675'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00006_00002=5) + (x_00006_00003=5) + (x_00005_00002=5))<=1))
c Var 'aux368' direct represents '0' with '-1676'
c Var 'aux368' direct represents '1' with '1676'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1676'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00006_00002=6) + (x_00006_00003=6) + (x_00005_00002=6))<=1))
c Var 'aux369' direct represents '0' with '-1677'
c Var 'aux369' direct represents '1' with '1677'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1677'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00006_00002=7) + (x_00006_00003=7) + (x_00005_00002=7))<=1))
c Var 'aux370' direct represents '0' with '-1678'
c Var 'aux370' direct represents '1' with '1678'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1678'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00006_00002=8) + (x_00006_00003=8) + (x_00005_00002=8))<=1))
c Var 'aux371' direct represents '0' with '-1679'
c Var 'aux371' direct represents '1' with '1679'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1679'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00002=9) + (x_00006_00003=9) + (x_00005_00002=9))<=1))
c Var 'aux372' direct represents '0' with '-1680'
c Var 'aux372' direct represents '1' with '1680'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1680'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00005_00003=1) + (x_00005_00004=1))<=1))
c Var 'aux373' direct represents '0' with '-1681'
c Var 'aux373' direct represents '1' with '1681'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1681'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00005_00003=2) + (x_00005_00004=2))<=1))
c Var 'aux374' direct represents '0' with '-1682'
c Var 'aux374' direct represents '1' with '1682'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1682'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00005_00003=3) + (x_00005_00004=3))<=1))
c Var 'aux375' direct represents '0' with '-1683'
c Var 'aux375' direct represents '1' with '1683'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1683'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00005_00003=4) + (x_00005_00004=4))<=1))
c Var 'aux376' direct represents '0' with '-1684'
c Var 'aux376' direct represents '1' with '1684'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1684'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00005_00003=5) + (x_00005_00004=5))<=1))
c Var 'aux377' direct represents '0' with '-1685'
c Var 'aux377' direct represents '1' with '1685'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1685'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00005_00003=6) + (x_00005_00004=6))<=1))
c Var 'aux378' direct represents '0' with '-1686'
c Var 'aux378' direct represents '1' with '1686'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1686'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00005_00003=7) + (x_00005_00004=7))<=1))
c Var 'aux379' direct represents '0' with '-1687'
c Var 'aux379' direct represents '1' with '1687'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1687'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00005_00003=8) + (x_00005_00004=8))<=1))
c Var 'aux380' direct represents '0' with '-1688'
c Var 'aux380' direct represents '1' with '1688'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1688'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00005_00003=9) + (x_00005_00004=9))<=1))
c Var 'aux381' direct represents '0' with '-1689'
c Var 'aux381' direct represents '1' with '1689'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1689'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00006_00005=1) + (x_00006_00006=1) + (x_00007_00006=1))<=1))
c Var 'aux382' direct represents '0' with '-1690'
c Var 'aux382' direct represents '1' with '1690'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1690'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00006_00005=2) + (x_00006_00006=2) + (x_00007_00006=2))<=1))
c Var 'aux383' direct represents '0' with '-1691'
c Var 'aux383' direct represents '1' with '1691'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1691'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00006_00005=3) + (x_00006_00006=3) + (x_00007_00006=3))<=1))
c Var 'aux384' direct represents '0' with '-1692'
c Var 'aux384' direct represents '1' with '1692'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1692'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00006_00005=4) + (x_00006_00006=4) + (x_00007_00006=4))<=1))
c Var 'aux385' direct represents '0' with '-1693'
c Var 'aux385' direct represents '1' with '1693'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1693'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00006_00005=5) + (x_00006_00006=5) + (x_00007_00006=5))<=1))
c Var 'aux386' direct represents '0' with '-1694'
c Var 'aux386' direct represents '1' with '1694'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1694'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00006_00005=6) + (x_00006_00006=6) + (x_00007_00006=6))<=1))
c Var 'aux387' direct represents '0' with '-1695'
c Var 'aux387' direct represents '1' with '1695'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1695'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00006_00005=7) + (x_00006_00006=7) + (x_00007_00006=7))<=1))
c Var 'aux388' direct represents '0' with '-1696'
c Var 'aux388' direct represents '1' with '1696'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1696'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00006_00005=8) + (x_00006_00006=8) + (x_00007_00006=8))<=1))
c Var 'aux389' direct represents '0' with '-1697'
c Var 'aux389' direct represents '1' with '1697'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1697'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00006_00005=9) + (x_00006_00006=9) + (x_00007_00006=9))<=1))
c Var 'aux390' direct represents '0' with '-1698'
c Var 'aux390' direct represents '1' with '1698'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1698'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00009_00001=1) + (x_00007_00001=1) + (x_00007_00002=1))<=1))
c Var 'aux391' direct represents '0' with '-1699'
c Var 'aux391' direct represents '1' with '1699'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1699'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00009_00001=2) + (x_00007_00001=2) + (x_00007_00002=2))<=1))
c Var 'aux392' direct represents '0' with '-1700'
c Var 'aux392' direct represents '1' with '1700'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1700'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00009_00001=3) + (x_00007_00001=3) + (x_00007_00002=3))<=1))
c Var 'aux393' direct represents '0' with '-1701'
c Var 'aux393' direct represents '1' with '1701'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1701'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00009_00001=4) + (x_00007_00001=4) + (x_00007_00002=4))<=1))
c Var 'aux394' direct represents '0' with '-1702'
c Var 'aux394' direct represents '1' with '1702'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1702'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00009_00001=5) + (x_00007_00001=5) + (x_00007_00002=5))<=1))
c Var 'aux395' direct represents '0' with '-1703'
c Var 'aux395' direct represents '1' with '1703'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1703'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00009_00001=6) + (x_00007_00001=6) + (x_00007_00002=6))<=1))
c Var 'aux396' direct represents '0' with '-1704'
c Var 'aux396' direct represents '1' with '1704'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1704'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00009_00001=7) + (x_00007_00001=7) + (x_00007_00002=7))<=1))
c Var 'aux397' direct represents '0' with '-1705'
c Var 'aux397' direct represents '1' with '1705'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1705'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00009_00001=8) + (x_00007_00001=8) + (x_00007_00002=8))<=1))
c Var 'aux398' direct represents '0' with '-1706'
c Var 'aux398' direct represents '1' with '1706'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1706'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00009_00001=9) + (x_00007_00001=9) + (x_00007_00002=9))<=1))
c Var 'aux399' direct represents '0' with '-1707'
c Var 'aux399' direct represents '1' with '1707'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1707'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00008_00002=1) + (x_00008_00003=1) + (x_00007_00003=1))<=1))
c Var 'aux400' direct represents '0' with '-1708'
c Var 'aux400' direct represents '1' with '1708'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1708'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00008_00002=2) + (x_00008_00003=2) + (x_00007_00003=2))<=1))
c Var 'aux401' direct represents '0' with '-1709'
c Var 'aux401' direct represents '1' with '1709'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1709'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00008_00002=3) + (x_00008_00003=3) + (x_00007_00003=3))<=1))
c Var 'aux402' direct represents '0' with '-1710'
c Var 'aux402' direct represents '1' with '1710'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1710'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00008_00002=4) + (x_00008_00003=4) + (x_00007_00003=4))<=1))
c Var 'aux403' direct represents '0' with '-1711'
c Var 'aux403' direct represents '1' with '1711'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1711'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00008_00002=5) + (x_00008_00003=5) + (x_00007_00003=5))<=1))
c Var 'aux404' direct represents '0' with '-1712'
c Var 'aux404' direct represents '1' with '1712'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1712'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00008_00002=6) + (x_00008_00003=6) + (x_00007_00003=6))<=1))
c Var 'aux405' direct represents '0' with '-1713'
c Var 'aux405' direct represents '1' with '1713'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1713'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00008_00002=7) + (x_00008_00003=7) + (x_00007_00003=7))<=1))
c Var 'aux406' direct represents '0' with '-1714'
c Var 'aux406' direct represents '1' with '1714'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1714'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00008_00002=8) + (x_00008_00003=8) + (x_00007_00003=8))<=1))
c Var 'aux407' direct represents '0' with '-1715'
c Var 'aux407' direct represents '1' with '1715'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1715'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00008_00002=9) + (x_00008_00003=9) + (x_00007_00003=9))<=1))
c Var 'aux408' direct represents '0' with '-1716'
c Var 'aux408' direct represents '1' with '1716'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1716'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1))<=1))
c Var 'aux409' direct represents '0' with '-1717'
c Var 'aux409' direct represents '1' with '1717'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1717'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2))<=1))
c Var 'aux410' direct represents '0' with '-1718'
c Var 'aux410' direct represents '1' with '1718'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1718'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3))<=1))
c Var 'aux411' direct represents '0' with '-1719'
c Var 'aux411' direct represents '1' with '1719'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1719'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4))<=1))
c Var 'aux412' direct represents '0' with '-1720'
c Var 'aux412' direct represents '1' with '1720'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1720'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5))<=1))
c Var 'aux413' direct represents '0' with '-1721'
c Var 'aux413' direct represents '1' with '1721'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1721'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6))<=1))
c Var 'aux414' direct represents '0' with '-1722'
c Var 'aux414' direct represents '1' with '1722'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1722'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7))<=1))
c Var 'aux415' direct represents '0' with '-1723'
c Var 'aux415' direct represents '1' with '1723'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1723'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8))<=1))
c Var 'aux416' direct represents '0' with '-1724'
c Var 'aux416' direct represents '1' with '1724'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1724'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9))<=1))
c Var 'aux417' direct represents '0' with '-1725'
c Var 'aux417' direct represents '1' with '1725'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1725'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))<=1))
c Var 'aux418' direct represents '0' with '-1726'
c Var 'aux418' direct represents '1' with '1726'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1726'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))<=1))
c Var 'aux419' direct represents '0' with '-1727'
c Var 'aux419' direct represents '1' with '1727'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1727'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))<=1))
c Var 'aux420' direct represents '0' with '-1728'
c Var 'aux420' direct represents '1' with '1728'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1728'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))<=1))
c Var 'aux421' direct represents '0' with '-1729'
c Var 'aux421' direct represents '1' with '1729'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1729'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))<=1))
c Var 'aux422' direct represents '0' with '-1730'
c Var 'aux422' direct represents '1' with '1730'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1730'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))<=1))
c Var 'aux423' direct represents '0' with '-1731'
c Var 'aux423' direct represents '1' with '1731'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1731'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))<=1))
c Var 'aux424' direct represents '0' with '-1732'
c Var 'aux424' direct represents '1' with '1732'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1732'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))<=1))
c Var 'aux425' direct represents '0' with '-1733'
c Var 'aux425' direct represents '1' with '1733'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1733'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))<=1))
c Var 'aux426' direct represents '0' with '-1734'
c Var 'aux426' direct represents '1' with '1734'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1734'
c Encoding variable: aux427 with domain: int(0..16) (representing constraint (shift(x_00001_00001, -1) + shift(x_00001_00004, -1)))
c Both direct and order encoding.
c Var 'aux427' order represents '0' with '1735'
c Var 'aux427' direct represents '0' with '1735'
c Var 'aux427' order represents '1' with '1736'
-1735 1736 0
c Var 'aux427' direct represents '1' with '1737'
1735 -1736 1737 0
-1737 1736 0
-1737 -1735 0
c Var 'aux427' order represents '2' with '1738'
-1736 1738 0
c Var 'aux427' direct represents '2' with '1739'
1736 -1738 1739 0
-1739 1738 0
-1739 -1736 0
c Var 'aux427' order represents '3' with '1740'
-1738 1740 0
c Var 'aux427' direct represents '3' with '1741'
1738 -1740 1741 0
-1741 1740 0
-1741 -1738 0
c Var 'aux427' order represents '4' with '1742'
-1740 1742 0
c Var 'aux427' direct represents '4' with '1743'
1740 -1742 1743 0
-1743 1742 0
-1743 -1740 0
c Var 'aux427' order represents '5' with '1744'
-1742 1744 0
c Var 'aux427' direct represents '5' with '1745'
1742 -1744 1745 0
-1745 1744 0
-1745 -1742 0
c Var 'aux427' order represents '6' with '1746'
-1744 1746 0
c Var 'aux427' direct represents '6' with '1747'
1744 -1746 1747 0
-1747 1746 0
-1747 -1744 0
c Var 'aux427' order represents '7' with '1748'
-1746 1748 0
c Var 'aux427' direct represents '7' with '1749'
1746 -1748 1749 0
-1749 1748 0
-1749 -1746 0
c Var 'aux427' order represents '8' with '1750'
-1748 1750 0
c Var 'aux427' direct represents '8' with '1751'
1748 -1750 1751 0
-1751 1750 0
-1751 -1748 0
c Var 'aux427' order represents '9' with '1752'
-1750 1752 0
c Var 'aux427' direct represents '9' with '1753'
1750 -1752 1753 0
-1753 1752 0
-1753 -1750 0
c Var 'aux427' order represents '10' with '1754'
-1752 1754 0
c Var 'aux427' direct represents '10' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux427' order represents '11' with '1756'
-1754 1756 0
c Var 'aux427' direct represents '11' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux427' order represents '12' with '1758'
-1756 1758 0
c Var 'aux427' direct represents '12' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux427' order represents '13' with '1760'
-1758 1760 0
c Var 'aux427' direct represents '13' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux427' order represents '14' with '1762'
-1760 1762 0
c Var 'aux427' direct represents '14' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux427' order represents '15' with '1764'
-1762 1764 0
c Var 'aux427' direct represents '15' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux427' direct represents '16' with '-1764'
1735 1737 1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 -1764 0
c Encoding variable: aux428 with domain: int(0..16) (representing constraint (shift(x_00002_00009, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux428' order represents '0' with '1766'
c Var 'aux428' direct represents '0' with '1766'
c Var 'aux428' order represents '1' with '1767'
-1766 1767 0
c Var 'aux428' direct represents '1' with '1768'
1766 -1767 1768 0
-1768 1767 0
-1768 -1766 0
c Var 'aux428' order represents '2' with '1769'
-1767 1769 0
c Var 'aux428' direct represents '2' with '1770'
1767 -1769 1770 0
-1770 1769 0
-1770 -1767 0
c Var 'aux428' order represents '3' with '1771'
-1769 1771 0
c Var 'aux428' direct represents '3' with '1772'
1769 -1771 1772 0
-1772 1771 0
-1772 -1769 0
c Var 'aux428' order represents '4' with '1773'
-1771 1773 0
c Var 'aux428' direct represents '4' with '1774'
1771 -1773 1774 0
-1774 1773 0
-1774 -1771 0
c Var 'aux428' order represents '5' with '1775'
-1773 1775 0
c Var 'aux428' direct represents '5' with '1776'
1773 -1775 1776 0
-1776 1775 0
-1776 -1773 0
c Var 'aux428' order represents '6' with '1777'
-1775 1777 0
c Var 'aux428' direct represents '6' with '1778'
1775 -1777 1778 0
-1778 1777 0
-1778 -1775 0
c Var 'aux428' order represents '7' with '1779'
-1777 1779 0
c Var 'aux428' direct represents '7' with '1780'
1777 -1779 1780 0
-1780 1779 0
-1780 -1777 0
c Var 'aux428' order represents '8' with '1781'
-1779 1781 0
c Var 'aux428' direct represents '8' with '1782'
1779 -1781 1782 0
-1782 1781 0
-1782 -1779 0
c Var 'aux428' order represents '9' with '1783'
-1781 1783 0
c Var 'aux428' direct represents '9' with '1784'
1781 -1783 1784 0
-1784 1783 0
-1784 -1781 0
c Var 'aux428' order represents '10' with '1785'
-1783 1785 0
c Var 'aux428' direct represents '10' with '1786'
1783 -1785 1786 0
-1786 1785 0
-1786 -1783 0
c Var 'aux428' order represents '11' with '1787'
-1785 1787 0
c Var 'aux428' direct represents '11' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux428' order represents '12' with '1789'
-1787 1789 0
c Var 'aux428' direct represents '12' with '1790'
1787 -1789 1790 0
-1790 1789 0
-1790 -1787 0
c Var 'aux428' order represents '13' with '1791'
-1789 1791 0
c Var 'aux428' direct represents '13' with '1792'
1789 -1791 1792 0
-1792 1791 0
-1792 -1789 0
c Var 'aux428' order represents '14' with '1793'
-1791 1793 0
c Var 'aux428' direct represents '14' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux428' order represents '15' with '1795'
-1793 1795 0
c Var 'aux428' direct represents '15' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux428' direct represents '16' with '-1795'
1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 -1795 0
c Encoding variable: aux429 with domain: int(0..16) (representing constraint (shift(x_00004_00006, -1) + shift(x_00005_00007, -1)))
c Both direct and order encoding.
c Var 'aux429' order represents '0' with '1797'
c Var 'aux429' direct represents '0' with '1797'
c Var 'aux429' order represents '1' with '1798'
-1797 1798 0
c Var 'aux429' direct represents '1' with '1799'
1797 -1798 1799 0
-1799 1798 0
-1799 -1797 0
c Var 'aux429' order represents '2' with '1800'
-1798 1800 0
c Var 'aux429' direct represents '2' with '1801'
1798 -1800 1801 0
-1801 1800 0
-1801 -1798 0
c Var 'aux429' order represents '3' with '1802'
-1800 1802 0
c Var 'aux429' direct represents '3' with '1803'
1800 -1802 1803 0
-1803 1802 0
-1803 -1800 0
c Var 'aux429' order represents '4' with '1804'
-1802 1804 0
c Var 'aux429' direct represents '4' with '1805'
1802 -1804 1805 0
-1805 1804 0
-1805 -1802 0
c Var 'aux429' order represents '5' with '1806'
-1804 1806 0
c Var 'aux429' direct represents '5' with '1807'
1804 -1806 1807 0
-1807 1806 0
-1807 -1804 0
c Var 'aux429' order represents '6' with '1808'
-1806 1808 0
c Var 'aux429' direct represents '6' with '1809'
1806 -1808 1809 0
-1809 1808 0
-1809 -1806 0
c Var 'aux429' order represents '7' with '1810'
-1808 1810 0
c Var 'aux429' direct represents '7' with '1811'
1808 -1810 1811 0
-1811 1810 0
-1811 -1808 0
c Var 'aux429' order represents '8' with '1812'
-1810 1812 0
c Var 'aux429' direct represents '8' with '1813'
1810 -1812 1813 0
-1813 1812 0
-1813 -1810 0
c Var 'aux429' order represents '9' with '1814'
-1812 1814 0
c Var 'aux429' direct represents '9' with '1815'
1812 -1814 1815 0
-1815 1814 0
-1815 -1812 0
c Var 'aux429' order represents '10' with '1816'
-1814 1816 0
c Var 'aux429' direct represents '10' with '1817'
1814 -1816 1817 0
-1817 1816 0
-1817 -1814 0
c Var 'aux429' order represents '11' with '1818'
-1816 1818 0
c Var 'aux429' direct represents '11' with '1819'
1816 -1818 1819 0
-1819 1818 0
-1819 -1816 0
c Var 'aux429' order represents '12' with '1820'
-1818 1820 0
c Var 'aux429' direct represents '12' with '1821'
1818 -1820 1821 0
-1821 1820 0
-1821 -1818 0
c Var 'aux429' order represents '13' with '1822'
-1820 1822 0
c Var 'aux429' direct represents '13' with '1823'
1820 -1822 1823 0
-1823 1822 0
-1823 -1820 0
c Var 'aux429' order represents '14' with '1824'
-1822 1824 0
c Var 'aux429' direct represents '14' with '1825'
1822 -1824 1825 0
-1825 1824 0
-1825 -1822 0
c Var 'aux429' order represents '15' with '1826'
-1824 1826 0
c Var 'aux429' direct represents '15' with '1827'
1824 -1826 1827 0
-1827 1826 0
-1827 -1824 0
c Var 'aux429' direct represents '16' with '-1826'
1797 1799 1801 1803 1805 1807 1809 1811 1813 1815 1817 1819 1821 1823 1825 1827 -1826 0
c Encoding variable: aux430 with domain: int(0..16) (representing constraint (shift(x_00007_00001, -1) + shift(x_00009_00001, -1)))
c Both direct and order encoding.
c Var 'aux430' order represents '0' with '1828'
c Var 'aux430' direct represents '0' with '1828'
c Var 'aux430' order represents '1' with '1829'
-1828 1829 0
c Var 'aux430' direct represents '1' with '1830'
1828 -1829 1830 0
-1830 1829 0
-1830 -1828 0
c Var 'aux430' order represents '2' with '1831'
-1829 1831 0
c Var 'aux430' direct represents '2' with '1832'
1829 -1831 1832 0
-1832 1831 0
-1832 -1829 0
c Var 'aux430' order represents '3' with '1833'
-1831 1833 0
c Var 'aux430' direct represents '3' with '1834'
1831 -1833 1834 0
-1834 1833 0
-1834 -1831 0
c Var 'aux430' order represents '4' with '1835'
-1833 1835 0
c Var 'aux430' direct represents '4' with '1836'
1833 -1835 1836 0
-1836 1835 0
-1836 -1833 0
c Var 'aux430' order represents '5' with '1837'
-1835 1837 0
c Var 'aux430' direct represents '5' with '1838'
1835 -1837 1838 0
-1838 1837 0
-1838 -1835 0
c Var 'aux430' order represents '6' with '1839'
-1837 1839 0
c Var 'aux430' direct represents '6' with '1840'
1837 -1839 1840 0
-1840 1839 0
-1840 -1837 0
c Var 'aux430' order represents '7' with '1841'
-1839 1841 0
c Var 'aux430' direct represents '7' with '1842'
1839 -1841 1842 0
-1842 1841 0
-1842 -1839 0
c Var 'aux430' order represents '8' with '1843'
-1841 1843 0
c Var 'aux430' direct represents '8' with '1844'
1841 -1843 1844 0
-1844 1843 0
-1844 -1841 0
c Var 'aux430' order represents '9' with '1845'
-1843 1845 0
c Var 'aux430' direct represents '9' with '1846'
1843 -1845 1846 0
-1846 1845 0
-1846 -1843 0
c Var 'aux430' order represents '10' with '1847'
-1845 1847 0
c Var 'aux430' direct represents '10' with '1848'
1845 -1847 1848 0
-1848 1847 0
-1848 -1845 0
c Var 'aux430' order represents '11' with '1849'
-1847 1849 0
c Var 'aux430' direct represents '11' with '1850'
1847 -1849 1850 0
-1850 1849 0
-1850 -1847 0
c Var 'aux430' order represents '12' with '1851'
-1849 1851 0
c Var 'aux430' direct represents '12' with '1852'
1849 -1851 1852 0
-1852 1851 0
-1852 -1849 0
c Var 'aux430' order represents '13' with '1853'
-1851 1853 0
c Var 'aux430' direct represents '13' with '1854'
1851 -1853 1854 0
-1854 1853 0
-1854 -1851 0
c Var 'aux430' order represents '14' with '1855'
-1853 1855 0
c Var 'aux430' direct represents '14' with '1856'
1853 -1855 1856 0
-1856 1855 0
-1856 -1853 0
c Var 'aux430' order represents '15' with '1857'
-1855 1857 0
c Var 'aux430' direct represents '15' with '1858'
1855 -1857 1858 0
-1858 1857 0
-1858 -1855 0
c Var 'aux430' direct represents '16' with '-1857'
1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 -1857 0
c Encoding variable: aux431 with domain: int(0..16) (representing constraint (shift(x_00009_00006, -1) + shift(x_00009_00009, -1)))
c Both direct and order encoding.
c Var 'aux431' order represents '0' with '1859'
c Var 'aux431' direct represents '0' with '1859'
c Var 'aux431' order represents '1' with '1860'
-1859 1860 0
c Var 'aux431' direct represents '1' with '1861'
1859 -1860 1861 0
-1861 1860 0
-1861 -1859 0
c Var 'aux431' order represents '2' with '1862'
-1860 1862 0
c Var 'aux431' direct represents '2' with '1863'
1860 -1862 1863 0
-1863 1862 0
-1863 -1860 0
c Var 'aux431' order represents '3' with '1864'
-1862 1864 0
c Var 'aux431' direct represents '3' with '1865'
1862 -1864 1865 0
-1865 1864 0
-1865 -1862 0
c Var 'aux431' order represents '4' with '1866'
-1864 1866 0
c Var 'aux431' direct represents '4' with '1867'
1864 -1866 1867 0
-1867 1866 0
-1867 -1864 0
c Var 'aux431' order represents '5' with '1868'
-1866 1868 0
c Var 'aux431' direct represents '5' with '1869'
1866 -1868 1869 0
-1869 1868 0
-1869 -1866 0
c Var 'aux431' order represents '6' with '1870'
-1868 1870 0
c Var 'aux431' direct represents '6' with '1871'
1868 -1870 1871 0
-1871 1870 0
-1871 -1868 0
c Var 'aux431' order represents '7' with '1872'
-1870 1872 0
c Var 'aux431' direct represents '7' with '1873'
1870 -1872 1873 0
-1873 1872 0
-1873 -1870 0
c Var 'aux431' order represents '8' with '1874'
-1872 1874 0
c Var 'aux431' direct represents '8' with '1875'
1872 -1874 1875 0
-1875 1874 0
-1875 -1872 0
c Var 'aux431' order represents '9' with '1876'
-1874 1876 0
c Var 'aux431' direct represents '9' with '1877'
1874 -1876 1877 0
-1877 1876 0
-1877 -1874 0
c Var 'aux431' order represents '10' with '1878'
-1876 1878 0
c Var 'aux431' direct represents '10' with '1879'
1876 -1878 1879 0
-1879 1878 0
-1879 -1876 0
c Var 'aux431' order represents '11' with '1880'
-1878 1880 0
c Var 'aux431' direct represents '11' with '1881'
1878 -1880 1881 0
-1881 1880 0
-1881 -1878 0
c Var 'aux431' order represents '12' with '1882'
-1880 1882 0
c Var 'aux431' direct represents '12' with '1883'
1880 -1882 1883 0
-1883 1882 0
-1883 -1880 0
c Var 'aux431' order represents '13' with '1884'
-1882 1884 0
c Var 'aux431' direct represents '13' with '1885'
1882 -1884 1885 0
-1885 1884 0
-1885 -1882 0
c Var 'aux431' order represents '14' with '1886'
-1884 1886 0
c Var 'aux431' direct represents '14' with '1887'
1884 -1886 1887 0
-1887 1886 0
-1887 -1884 0
c Var 'aux431' order represents '15' with '1888'
-1886 1888 0
c Var 'aux431' direct represents '15' with '1889'
1886 -1888 1889 0
-1889 1888 0
-1889 -1886 0
c Var 'aux431' direct represents '16' with '-1888'
1859 1861 1863 1865 1867 1869 1871 1873 1875 1877 1879 1881 1883 1885 1887 1889 -1888 0
c Encoding variable: aux432 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux432' order represents '0' with '1890'
c Var 'aux432' direct represents '0' with '1890'
c Var 'aux432' order represents '1' with '1891'
-1890 1891 0
c Var 'aux432' direct represents '1' with '1892'
1890 -1891 1892 0
-1892 1891 0
-1892 -1890 0
c Var 'aux432' direct represents '2' with '-1891'
1890 1892 -1891 0
c Encoding variable: aux433 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux433' order represents '0' with '1893'
c Var 'aux433' direct represents '0' with '1893'
c Var 'aux433' order represents '1' with '1894'
-1893 1894 0
c Var 'aux433' direct represents '1' with '1895'
1893 -1894 1895 0
-1895 1894 0
-1895 -1893 0
c Var 'aux433' direct represents '2' with '-1894'
1893 1895 -1894 0
c Encoding variable: aux434 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux434' order represents '0' with '1896'
c Var 'aux434' direct represents '0' with '1896'
c Var 'aux434' order represents '1' with '1897'
-1896 1897 0
c Var 'aux434' direct represents '1' with '1898'
1896 -1897 1898 0
-1898 1897 0
-1898 -1896 0
c Var 'aux434' direct represents '2' with '-1897'
1896 1898 -1897 0
c Encoding variable: aux435 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux435' order represents '0' with '1899'
c Var 'aux435' direct represents '0' with '1899'
c Var 'aux435' order represents '1' with '1900'
-1899 1900 0
c Var 'aux435' direct represents '1' with '1901'
1899 -1900 1901 0
-1901 1900 0
-1901 -1899 0
c Var 'aux435' direct represents '2' with '-1900'
1899 1901 -1900 0
c Encoding variable: aux436 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux435))
c Both direct and order encoding.
c Var 'aux436' order represents '0' with '1902'
c Var 'aux436' direct represents '0' with '1902'
c Var 'aux436' order represents '1' with '1903'
-1902 1903 0
c Var 'aux436' direct represents '1' with '1904'
1902 -1903 1904 0
-1904 1903 0
-1904 -1902 0
c Var 'aux436' order represents '2' with '1905'
-1903 1905 0
c Var 'aux436' direct represents '2' with '1906'
1903 -1905 1906 0
-1906 1905 0
-1906 -1903 0
c Var 'aux436' direct represents '3' with '-1905'
1902 1904 1906 -1905 0
c Encoding variable: aux437 with domain: int(0..4) (representing constraint (aux432 + aux434))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '1907'
c Var 'aux437' direct represents '0' with '1907'
c Var 'aux437' order represents '1' with '1908'
-1907 1908 0
c Var 'aux437' direct represents '1' with '1909'
1907 -1908 1909 0
-1909 1908 0
-1909 -1907 0
c Var 'aux437' order represents '2' with '1910'
-1908 1910 0
c Var 'aux437' direct represents '2' with '1911'
1908 -1910 1911 0
-1911 1910 0
-1911 -1908 0
c Var 'aux437' order represents '3' with '1912'
-1910 1912 0
c Var 'aux437' direct represents '3' with '1913'
1910 -1912 1913 0
-1913 1912 0
-1913 -1910 0
c Var 'aux437' direct represents '4' with '-1912'
1907 1909 1911 1913 -1912 0
c Encoding variable: aux438 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '1914'
c Var 'aux438' direct represents '0' with '1914'
c Var 'aux438' order represents '1' with '1915'
-1914 1915 0
c Var 'aux438' direct represents '1' with '1916'
1914 -1915 1916 0
-1916 1915 0
-1916 -1914 0
c Var 'aux438' direct represents '2' with '-1915'
1914 1916 -1915 0
c Encoding variable: aux439 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '1917'
c Var 'aux439' direct represents '0' with '1917'
c Var 'aux439' order represents '1' with '1918'
-1917 1918 0
c Var 'aux439' direct represents '1' with '1919'
1917 -1918 1919 0
-1919 1918 0
-1919 -1917 0
c Var 'aux439' direct represents '2' with '-1918'
1917 1919 -1918 0
c Encoding variable: aux440 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '1920'
c Var 'aux440' direct represents '0' with '1920'
c Var 'aux440' order represents '1' with '1921'
-1920 1921 0
c Var 'aux440' direct represents '1' with '1922'
1920 -1921 1922 0
-1922 1921 0
-1922 -1920 0
c Var 'aux440' direct represents '2' with '-1921'
1920 1922 -1921 0
c Encoding variable: aux441 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '1923'
c Var 'aux441' direct represents '0' with '1923'
c Var 'aux441' order represents '1' with '1924'
-1923 1924 0
c Var 'aux441' direct represents '1' with '1925'
1923 -1924 1925 0
-1925 1924 0
-1925 -1923 0
c Var 'aux441' direct represents '2' with '-1924'
1923 1925 -1924 0
c Encoding variable: aux442 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux441))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '1926'
c Var 'aux442' direct represents '0' with '1926'
c Var 'aux442' order represents '1' with '1927'
-1926 1927 0
c Var 'aux442' direct represents '1' with '1928'
1926 -1927 1928 0
-1928 1927 0
-1928 -1926 0
c Var 'aux442' order represents '2' with '1929'
-1927 1929 0
c Var 'aux442' direct represents '2' with '1930'
1927 -1929 1930 0
-1930 1929 0
-1930 -1927 0
c Var 'aux442' direct represents '3' with '-1929'
1926 1928 1930 -1929 0
c Encoding variable: aux443 with domain: int(0..4) (representing constraint (aux438 + aux440))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '1931'
c Var 'aux443' direct represents '0' with '1931'
c Var 'aux443' order represents '1' with '1932'
-1931 1932 0
c Var 'aux443' direct represents '1' with '1933'
1931 -1932 1933 0
-1933 1932 0
-1933 -1931 0
c Var 'aux443' order represents '2' with '1934'
-1932 1934 0
c Var 'aux443' direct represents '2' with '1935'
1932 -1934 1935 0
-1935 1934 0
-1935 -1932 0
c Var 'aux443' order represents '3' with '1936'
-1934 1936 0
c Var 'aux443' direct represents '3' with '1937'
1934 -1936 1937 0
-1937 1936 0
-1937 -1934 0
c Var 'aux443' direct represents '4' with '-1936'
1931 1933 1935 1937 -1936 0
c Encoding variable: aux444 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '1938'
c Var 'aux444' direct represents '0' with '1938'
c Var 'aux444' order represents '1' with '1939'
-1938 1939 0
c Var 'aux444' direct represents '1' with '1940'
1938 -1939 1940 0
-1940 1939 0
-1940 -1938 0
c Var 'aux444' direct represents '2' with '-1939'
1938 1940 -1939 0
c Encoding variable: aux445 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '1941'
c Var 'aux445' direct represents '0' with '1941'
c Var 'aux445' order represents '1' with '1942'
-1941 1942 0
c Var 'aux445' direct represents '1' with '1943'
1941 -1942 1943 0
-1943 1942 0
-1943 -1941 0
c Var 'aux445' direct represents '2' with '-1942'
1941 1943 -1942 0
c Encoding variable: aux446 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '1944'
c Var 'aux446' direct represents '0' with '1944'
c Var 'aux446' order represents '1' with '1945'
-1944 1945 0
c Var 'aux446' direct represents '1' with '1946'
1944 -1945 1946 0
-1946 1945 0
-1946 -1944 0
c Var 'aux446' direct represents '2' with '-1945'
1944 1946 -1945 0
c Encoding variable: aux447 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '1947'
c Var 'aux447' direct represents '0' with '1947'
c Var 'aux447' order represents '1' with '1948'
-1947 1948 0
c Var 'aux447' direct represents '1' with '1949'
1947 -1948 1949 0
-1949 1948 0
-1949 -1947 0
c Var 'aux447' direct represents '2' with '-1948'
1947 1949 -1948 0
c Encoding variable: aux448 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux447))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '1950'
c Var 'aux448' direct represents '0' with '1950'
c Var 'aux448' order represents '1' with '1951'
-1950 1951 0
c Var 'aux448' direct represents '1' with '1952'
1950 -1951 1952 0
-1952 1951 0
-1952 -1950 0
c Var 'aux448' order represents '2' with '1953'
-1951 1953 0
c Var 'aux448' direct represents '2' with '1954'
1951 -1953 1954 0
-1954 1953 0
-1954 -1951 0
c Var 'aux448' direct represents '3' with '-1953'
1950 1952 1954 -1953 0
c Encoding variable: aux449 with domain: int(0..4) (representing constraint (aux444 + aux446))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '1955'
c Var 'aux449' direct represents '0' with '1955'
c Var 'aux449' order represents '1' with '1956'
-1955 1956 0
c Var 'aux449' direct represents '1' with '1957'
1955 -1956 1957 0
-1957 1956 0
-1957 -1955 0
c Var 'aux449' order represents '2' with '1958'
-1956 1958 0
c Var 'aux449' direct represents '2' with '1959'
1956 -1958 1959 0
-1959 1958 0
-1959 -1956 0
c Var 'aux449' order represents '3' with '1960'
-1958 1960 0
c Var 'aux449' direct represents '3' with '1961'
1958 -1960 1961 0
-1961 1960 0
-1961 -1958 0
c Var 'aux449' direct represents '4' with '-1960'
1955 1957 1959 1961 -1960 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '1962'
c Var 'aux450' direct represents '0' with '1962'
c Var 'aux450' order represents '1' with '1963'
-1962 1963 0
c Var 'aux450' direct represents '1' with '1964'
1962 -1963 1964 0
-1964 1963 0
-1964 -1962 0
c Var 'aux450' direct represents '2' with '-1963'
1962 1964 -1963 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '1965'
c Var 'aux451' direct represents '0' with '1965'
c Var 'aux451' order represents '1' with '1966'
-1965 1966 0
c Var 'aux451' direct represents '1' with '1967'
1965 -1966 1967 0
-1967 1966 0
-1967 -1965 0
c Var 'aux451' direct represents '2' with '-1966'
1965 1967 -1966 0
c Encoding variable: aux452 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '1968'
c Var 'aux452' direct represents '0' with '1968'
c Var 'aux452' order represents '1' with '1969'
-1968 1969 0
c Var 'aux452' direct represents '1' with '1970'
1968 -1969 1970 0
-1970 1969 0
-1970 -1968 0
c Var 'aux452' direct represents '2' with '-1969'
1968 1970 -1969 0
c Encoding variable: aux453 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '1971'
c Var 'aux453' direct represents '0' with '1971'
c Var 'aux453' order represents '1' with '1972'
-1971 1972 0
c Var 'aux453' direct represents '1' with '1973'
1971 -1972 1973 0
-1973 1972 0
-1973 -1971 0
c Var 'aux453' direct represents '2' with '-1972'
1971 1973 -1972 0
c Encoding variable: aux454 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux453))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '1974'
c Var 'aux454' direct represents '0' with '1974'
c Var 'aux454' order represents '1' with '1975'
-1974 1975 0
c Var 'aux454' direct represents '1' with '1976'
1974 -1975 1976 0
-1976 1975 0
-1976 -1974 0
c Var 'aux454' order represents '2' with '1977'
-1975 1977 0
c Var 'aux454' direct represents '2' with '1978'
1975 -1977 1978 0
-1978 1977 0
-1978 -1975 0
c Var 'aux454' direct represents '3' with '-1977'
1974 1976 1978 -1977 0
c Encoding variable: aux455 with domain: int(0..4) (representing constraint (aux450 + aux452))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '1979'
c Var 'aux455' direct represents '0' with '1979'
c Var 'aux455' order represents '1' with '1980'
-1979 1980 0
c Var 'aux455' direct represents '1' with '1981'
1979 -1980 1981 0
-1981 1980 0
-1981 -1979 0
c Var 'aux455' order represents '2' with '1982'
-1980 1982 0
c Var 'aux455' direct represents '2' with '1983'
1980 -1982 1983 0
-1983 1982 0
-1983 -1980 0
c Var 'aux455' order represents '3' with '1984'
-1982 1984 0
c Var 'aux455' direct represents '3' with '1985'
1982 -1984 1985 0
-1985 1984 0
-1985 -1982 0
c Var 'aux455' direct represents '4' with '-1984'
1979 1981 1983 1985 -1984 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '1986'
c Var 'aux456' direct represents '0' with '1986'
c Var 'aux456' order represents '1' with '1987'
-1986 1987 0
c Var 'aux456' direct represents '1' with '1988'
1986 -1987 1988 0
-1988 1987 0
-1988 -1986 0
c Var 'aux456' direct represents '2' with '-1987'
1986 1988 -1987 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '1989'
c Var 'aux457' direct represents '0' with '1989'
c Var 'aux457' order represents '1' with '1990'
-1989 1990 0
c Var 'aux457' direct represents '1' with '1991'
1989 -1990 1991 0
-1991 1990 0
-1991 -1989 0
c Var 'aux457' direct represents '2' with '-1990'
1989 1991 -1990 0
c Encoding variable: aux458 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '1992'
c Var 'aux458' direct represents '0' with '1992'
c Var 'aux458' order represents '1' with '1993'
-1992 1993 0
c Var 'aux458' direct represents '1' with '1994'
1992 -1993 1994 0
-1994 1993 0
-1994 -1992 0
c Var 'aux458' direct represents '2' with '-1993'
1992 1994 -1993 0
c Encoding variable: aux459 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '1995'
c Var 'aux459' direct represents '0' with '1995'
c Var 'aux459' order represents '1' with '1996'
-1995 1996 0
c Var 'aux459' direct represents '1' with '1997'
1995 -1996 1997 0
-1997 1996 0
-1997 -1995 0
c Var 'aux459' direct represents '2' with '-1996'
1995 1997 -1996 0
c Encoding variable: aux460 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux459))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '1998'
c Var 'aux460' direct represents '0' with '1998'
c Var 'aux460' order represents '1' with '1999'
-1998 1999 0
c Var 'aux460' direct represents '1' with '2000'
1998 -1999 2000 0
-2000 1999 0
-2000 -1998 0
c Var 'aux460' order represents '2' with '2001'
-1999 2001 0
c Var 'aux460' direct represents '2' with '2002'
1999 -2001 2002 0
-2002 2001 0
-2002 -1999 0
c Var 'aux460' direct represents '3' with '-2001'
1998 2000 2002 -2001 0
c Encoding variable: aux461 with domain: int(0..4) (representing constraint (aux456 + aux458))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '2003'
c Var 'aux461' direct represents '0' with '2003'
c Var 'aux461' order represents '1' with '2004'
-2003 2004 0
c Var 'aux461' direct represents '1' with '2005'
2003 -2004 2005 0
-2005 2004 0
-2005 -2003 0
c Var 'aux461' order represents '2' with '2006'
-2004 2006 0
c Var 'aux461' direct represents '2' with '2007'
2004 -2006 2007 0
-2007 2006 0
-2007 -2004 0
c Var 'aux461' order represents '3' with '2008'
-2006 2008 0
c Var 'aux461' direct represents '3' with '2009'
2006 -2008 2009 0
-2009 2008 0
-2009 -2006 0
c Var 'aux461' direct represents '4' with '-2008'
2003 2005 2007 2009 -2008 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '2010'
c Var 'aux462' direct represents '0' with '2010'
c Var 'aux462' order represents '1' with '2011'
-2010 2011 0
c Var 'aux462' direct represents '1' with '2012'
2010 -2011 2012 0
-2012 2011 0
-2012 -2010 0
c Var 'aux462' direct represents '2' with '-2011'
2010 2012 -2011 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '2013'
c Var 'aux463' direct represents '0' with '2013'
c Var 'aux463' order represents '1' with '2014'
-2013 2014 0
c Var 'aux463' direct represents '1' with '2015'
2013 -2014 2015 0
-2015 2014 0
-2015 -2013 0
c Var 'aux463' direct represents '2' with '-2014'
2013 2015 -2014 0
c Encoding variable: aux464 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '2016'
c Var 'aux464' direct represents '0' with '2016'
c Var 'aux464' order represents '1' with '2017'
-2016 2017 0
c Var 'aux464' direct represents '1' with '2018'
2016 -2017 2018 0
-2018 2017 0
-2018 -2016 0
c Var 'aux464' direct represents '2' with '-2017'
2016 2018 -2017 0
c Encoding variable: aux465 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '2019'
c Var 'aux465' direct represents '0' with '2019'
c Var 'aux465' order represents '1' with '2020'
-2019 2020 0
c Var 'aux465' direct represents '1' with '2021'
2019 -2020 2021 0
-2021 2020 0
-2021 -2019 0
c Var 'aux465' direct represents '2' with '-2020'
2019 2021 -2020 0
c Encoding variable: aux466 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux465))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '2022'
c Var 'aux466' direct represents '0' with '2022'
c Var 'aux466' order represents '1' with '2023'
-2022 2023 0
c Var 'aux466' direct represents '1' with '2024'
2022 -2023 2024 0
-2024 2023 0
-2024 -2022 0
c Var 'aux466' order represents '2' with '2025'
-2023 2025 0
c Var 'aux466' direct represents '2' with '2026'
2023 -2025 2026 0
-2026 2025 0
-2026 -2023 0
c Var 'aux466' direct represents '3' with '-2025'
2022 2024 2026 -2025 0
c Encoding variable: aux467 with domain: int(0..4) (representing constraint (aux462 + aux464))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '2027'
c Var 'aux467' direct represents '0' with '2027'
c Var 'aux467' order represents '1' with '2028'
-2027 2028 0
c Var 'aux467' direct represents '1' with '2029'
2027 -2028 2029 0
-2029 2028 0
-2029 -2027 0
c Var 'aux467' order represents '2' with '2030'
-2028 2030 0
c Var 'aux467' direct represents '2' with '2031'
2028 -2030 2031 0
-2031 2030 0
-2031 -2028 0
c Var 'aux467' order represents '3' with '2032'
-2030 2032 0
c Var 'aux467' direct represents '3' with '2033'
2030 -2032 2033 0
-2033 2032 0
-2033 -2030 0
c Var 'aux467' direct represents '4' with '-2032'
2027 2029 2031 2033 -2032 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2034'
c Var 'aux468' direct represents '0' with '2034'
c Var 'aux468' order represents '1' with '2035'
-2034 2035 0
c Var 'aux468' direct represents '1' with '2036'
2034 -2035 2036 0
-2036 2035 0
-2036 -2034 0
c Var 'aux468' direct represents '2' with '-2035'
2034 2036 -2035 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2037'
c Var 'aux469' direct represents '0' with '2037'
c Var 'aux469' order represents '1' with '2038'
-2037 2038 0
c Var 'aux469' direct represents '1' with '2039'
2037 -2038 2039 0
-2039 2038 0
-2039 -2037 0
c Var 'aux469' direct represents '2' with '-2038'
2037 2039 -2038 0
c Encoding variable: aux470 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2040'
c Var 'aux470' direct represents '0' with '2040'
c Var 'aux470' order represents '1' with '2041'
-2040 2041 0
c Var 'aux470' direct represents '1' with '2042'
2040 -2041 2042 0
-2042 2041 0
-2042 -2040 0
c Var 'aux470' direct represents '2' with '-2041'
2040 2042 -2041 0
c Encoding variable: aux471 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2043'
c Var 'aux471' direct represents '0' with '2043'
c Var 'aux471' order represents '1' with '2044'
-2043 2044 0
c Var 'aux471' direct represents '1' with '2045'
2043 -2044 2045 0
-2045 2044 0
-2045 -2043 0
c Var 'aux471' direct represents '2' with '-2044'
2043 2045 -2044 0
c Encoding variable: aux472 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux471))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2046'
c Var 'aux472' direct represents '0' with '2046'
c Var 'aux472' order represents '1' with '2047'
-2046 2047 0
c Var 'aux472' direct represents '1' with '2048'
2046 -2047 2048 0
-2048 2047 0
-2048 -2046 0
c Var 'aux472' order represents '2' with '2049'
-2047 2049 0
c Var 'aux472' direct represents '2' with '2050'
2047 -2049 2050 0
-2050 2049 0
-2050 -2047 0
c Var 'aux472' direct represents '3' with '-2049'
2046 2048 2050 -2049 0
c Encoding variable: aux473 with domain: int(0..4) (representing constraint (aux468 + aux470))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2051'
c Var 'aux473' direct represents '0' with '2051'
c Var 'aux473' order represents '1' with '2052'
-2051 2052 0
c Var 'aux473' direct represents '1' with '2053'
2051 -2052 2053 0
-2053 2052 0
-2053 -2051 0
c Var 'aux473' order represents '2' with '2054'
-2052 2054 0
c Var 'aux473' direct represents '2' with '2055'
2052 -2054 2055 0
-2055 2054 0
-2055 -2052 0
c Var 'aux473' order represents '3' with '2056'
-2054 2056 0
c Var 'aux473' direct represents '3' with '2057'
2054 -2056 2057 0
-2057 2056 0
-2057 -2054 0
c Var 'aux473' direct represents '4' with '-2056'
2051 2053 2055 2057 -2056 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2058'
c Var 'aux474' direct represents '0' with '2058'
c Var 'aux474' order represents '1' with '2059'
-2058 2059 0
c Var 'aux474' direct represents '1' with '2060'
2058 -2059 2060 0
-2060 2059 0
-2060 -2058 0
c Var 'aux474' direct represents '2' with '-2059'
2058 2060 -2059 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2061'
c Var 'aux475' direct represents '0' with '2061'
c Var 'aux475' order represents '1' with '2062'
-2061 2062 0
c Var 'aux475' direct represents '1' with '2063'
2061 -2062 2063 0
-2063 2062 0
-2063 -2061 0
c Var 'aux475' direct represents '2' with '-2062'
2061 2063 -2062 0
c Encoding variable: aux476 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2064'
c Var 'aux476' direct represents '0' with '2064'
c Var 'aux476' order represents '1' with '2065'
-2064 2065 0
c Var 'aux476' direct represents '1' with '2066'
2064 -2065 2066 0
-2066 2065 0
-2066 -2064 0
c Var 'aux476' direct represents '2' with '-2065'
2064 2066 -2065 0
c Encoding variable: aux477 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2067'
c Var 'aux477' direct represents '0' with '2067'
c Var 'aux477' order represents '1' with '2068'
-2067 2068 0
c Var 'aux477' direct represents '1' with '2069'
2067 -2068 2069 0
-2069 2068 0
-2069 -2067 0
c Var 'aux477' direct represents '2' with '-2068'
2067 2069 -2068 0
c Encoding variable: aux478 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux477))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2070'
c Var 'aux478' direct represents '0' with '2070'
c Var 'aux478' order represents '1' with '2071'
-2070 2071 0
c Var 'aux478' direct represents '1' with '2072'
2070 -2071 2072 0
-2072 2071 0
-2072 -2070 0
c Var 'aux478' order represents '2' with '2073'
-2071 2073 0
c Var 'aux478' direct represents '2' with '2074'
2071 -2073 2074 0
-2074 2073 0
-2074 -2071 0
c Var 'aux478' direct represents '3' with '-2073'
2070 2072 2074 -2073 0
c Encoding variable: aux479 with domain: int(0..4) (representing constraint (aux474 + aux476))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2075'
c Var 'aux479' direct represents '0' with '2075'
c Var 'aux479' order represents '1' with '2076'
-2075 2076 0
c Var 'aux479' direct represents '1' with '2077'
2075 -2076 2077 0
-2077 2076 0
-2077 -2075 0
c Var 'aux479' order represents '2' with '2078'
-2076 2078 0
c Var 'aux479' direct represents '2' with '2079'
2076 -2078 2079 0
-2079 2078 0
-2079 -2076 0
c Var 'aux479' order represents '3' with '2080'
-2078 2080 0
c Var 'aux479' direct represents '3' with '2081'
2078 -2080 2081 0
-2081 2080 0
-2081 -2078 0
c Var 'aux479' direct represents '4' with '-2080'
2075 2077 2079 2081 -2080 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2082'
c Var 'aux480' direct represents '0' with '2082'
c Var 'aux480' order represents '1' with '2083'
-2082 2083 0
c Var 'aux480' direct represents '1' with '2084'
2082 -2083 2084 0
-2084 2083 0
-2084 -2082 0
c Var 'aux480' direct represents '2' with '-2083'
2082 2084 -2083 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2085'
c Var 'aux481' direct represents '0' with '2085'
c Var 'aux481' order represents '1' with '2086'
-2085 2086 0
c Var 'aux481' direct represents '1' with '2087'
2085 -2086 2087 0
-2087 2086 0
-2087 -2085 0
c Var 'aux481' direct represents '2' with '-2086'
2085 2087 -2086 0
c Encoding variable: aux482 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2088'
c Var 'aux482' direct represents '0' with '2088'
c Var 'aux482' order represents '1' with '2089'
-2088 2089 0
c Var 'aux482' direct represents '1' with '2090'
2088 -2089 2090 0
-2090 2089 0
-2090 -2088 0
c Var 'aux482' direct represents '2' with '-2089'
2088 2090 -2089 0
c Encoding variable: aux483 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2091'
c Var 'aux483' direct represents '0' with '2091'
c Var 'aux483' order represents '1' with '2092'
-2091 2092 0
c Var 'aux483' direct represents '1' with '2093'
2091 -2092 2093 0
-2093 2092 0
-2093 -2091 0
c Var 'aux483' direct represents '2' with '-2092'
2091 2093 -2092 0
c Encoding variable: aux484 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux483))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2094'
c Var 'aux484' direct represents '0' with '2094'
c Var 'aux484' order represents '1' with '2095'
-2094 2095 0
c Var 'aux484' direct represents '1' with '2096'
2094 -2095 2096 0
-2096 2095 0
-2096 -2094 0
c Var 'aux484' order represents '2' with '2097'
-2095 2097 0
c Var 'aux484' direct represents '2' with '2098'
2095 -2097 2098 0
-2098 2097 0
-2098 -2095 0
c Var 'aux484' direct represents '3' with '-2097'
2094 2096 2098 -2097 0
c Encoding variable: aux485 with domain: int(0..4) (representing constraint (aux480 + aux482))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2099'
c Var 'aux485' direct represents '0' with '2099'
c Var 'aux485' order represents '1' with '2100'
-2099 2100 0
c Var 'aux485' direct represents '1' with '2101'
2099 -2100 2101 0
-2101 2100 0
-2101 -2099 0
c Var 'aux485' order represents '2' with '2102'
-2100 2102 0
c Var 'aux485' direct represents '2' with '2103'
2100 -2102 2103 0
-2103 2102 0
-2103 -2100 0
c Var 'aux485' order represents '3' with '2104'
-2102 2104 0
c Var 'aux485' direct represents '3' with '2105'
2102 -2104 2105 0
-2105 2104 0
-2105 -2102 0
c Var 'aux485' direct represents '4' with '-2104'
2099 2101 2103 2105 -2104 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2106'
c Var 'aux486' direct represents '0' with '2106'
c Var 'aux486' order represents '1' with '2107'
-2106 2107 0
c Var 'aux486' direct represents '1' with '2108'
2106 -2107 2108 0
-2108 2107 0
-2108 -2106 0
c Var 'aux486' direct represents '2' with '-2107'
2106 2108 -2107 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2109'
c Var 'aux487' direct represents '0' with '2109'
c Var 'aux487' order represents '1' with '2110'
-2109 2110 0
c Var 'aux487' direct represents '1' with '2111'
2109 -2110 2111 0
-2111 2110 0
-2111 -2109 0
c Var 'aux487' direct represents '2' with '-2110'
2109 2111 -2110 0
c Encoding variable: aux488 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2112'
c Var 'aux488' direct represents '0' with '2112'
c Var 'aux488' order represents '1' with '2113'
-2112 2113 0
c Var 'aux488' direct represents '1' with '2114'
2112 -2113 2114 0
-2114 2113 0
-2114 -2112 0
c Var 'aux488' direct represents '2' with '-2113'
2112 2114 -2113 0
c Encoding variable: aux489 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2115'
c Var 'aux489' direct represents '0' with '2115'
c Var 'aux489' order represents '1' with '2116'
-2115 2116 0
c Var 'aux489' direct represents '1' with '2117'
2115 -2116 2117 0
-2117 2116 0
-2117 -2115 0
c Var 'aux489' direct represents '2' with '-2116'
2115 2117 -2116 0
c Encoding variable: aux490 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux489))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2118'
c Var 'aux490' direct represents '0' with '2118'
c Var 'aux490' order represents '1' with '2119'
-2118 2119 0
c Var 'aux490' direct represents '1' with '2120'
2118 -2119 2120 0
-2120 2119 0
-2120 -2118 0
c Var 'aux490' order represents '2' with '2121'
-2119 2121 0
c Var 'aux490' direct represents '2' with '2122'
2119 -2121 2122 0
-2122 2121 0
-2122 -2119 0
c Var 'aux490' direct represents '3' with '-2121'
2118 2120 2122 -2121 0
c Encoding variable: aux491 with domain: int(0..4) (representing constraint (aux486 + aux488))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2123'
c Var 'aux491' direct represents '0' with '2123'
c Var 'aux491' order represents '1' with '2124'
-2123 2124 0
c Var 'aux491' direct represents '1' with '2125'
2123 -2124 2125 0
-2125 2124 0
-2125 -2123 0
c Var 'aux491' order represents '2' with '2126'
-2124 2126 0
c Var 'aux491' direct represents '2' with '2127'
2124 -2126 2127 0
-2127 2126 0
-2127 -2124 0
c Var 'aux491' order represents '3' with '2128'
-2126 2128 0
c Var 'aux491' direct represents '3' with '2129'
2126 -2128 2129 0
-2129 2128 0
-2129 -2126 0
c Var 'aux491' direct represents '4' with '-2128'
2123 2125 2127 2129 -2128 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2130'
c Var 'aux492' direct represents '0' with '2130'
c Var 'aux492' order represents '1' with '2131'
-2130 2131 0
c Var 'aux492' direct represents '1' with '2132'
2130 -2131 2132 0
-2132 2131 0
-2132 -2130 0
c Var 'aux492' direct represents '2' with '-2131'
2130 2132 -2131 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2133'
c Var 'aux493' direct represents '0' with '2133'
c Var 'aux493' order represents '1' with '2134'
-2133 2134 0
c Var 'aux493' direct represents '1' with '2135'
2133 -2134 2135 0
-2135 2134 0
-2135 -2133 0
c Var 'aux493' direct represents '2' with '-2134'
2133 2135 -2134 0
c Encoding variable: aux494 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2136'
c Var 'aux494' direct represents '0' with '2136'
c Var 'aux494' order represents '1' with '2137'
-2136 2137 0
c Var 'aux494' direct represents '1' with '2138'
2136 -2137 2138 0
-2138 2137 0
-2138 -2136 0
c Var 'aux494' direct represents '2' with '-2137'
2136 2138 -2137 0
c Encoding variable: aux495 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2139'
c Var 'aux495' direct represents '0' with '2139'
c Var 'aux495' order represents '1' with '2140'
-2139 2140 0
c Var 'aux495' direct represents '1' with '2141'
2139 -2140 2141 0
-2141 2140 0
-2141 -2139 0
c Var 'aux495' direct represents '2' with '-2140'
2139 2141 -2140 0
c Encoding variable: aux496 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux495))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2142'
c Var 'aux496' direct represents '0' with '2142'
c Var 'aux496' order represents '1' with '2143'
-2142 2143 0
c Var 'aux496' direct represents '1' with '2144'
2142 -2143 2144 0
-2144 2143 0
-2144 -2142 0
c Var 'aux496' order represents '2' with '2145'
-2143 2145 0
c Var 'aux496' direct represents '2' with '2146'
2143 -2145 2146 0
-2146 2145 0
-2146 -2143 0
c Var 'aux496' direct represents '3' with '-2145'
2142 2144 2146 -2145 0
c Encoding variable: aux497 with domain: int(0..4) (representing constraint (aux492 + aux494))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2147'
c Var 'aux497' direct represents '0' with '2147'
c Var 'aux497' order represents '1' with '2148'
-2147 2148 0
c Var 'aux497' direct represents '1' with '2149'
2147 -2148 2149 0
-2149 2148 0
-2149 -2147 0
c Var 'aux497' order represents '2' with '2150'
-2148 2150 0
c Var 'aux497' direct represents '2' with '2151'
2148 -2150 2151 0
-2151 2150 0
-2151 -2148 0
c Var 'aux497' order represents '3' with '2152'
-2150 2152 0
c Var 'aux497' direct represents '3' with '2153'
2150 -2152 2153 0
-2153 2152 0
-2153 -2150 0
c Var 'aux497' direct represents '4' with '-2152'
2147 2149 2151 2153 -2152 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2154'
c Var 'aux498' direct represents '0' with '2154'
c Var 'aux498' order represents '1' with '2155'
-2154 2155 0
c Var 'aux498' direct represents '1' with '2156'
2154 -2155 2156 0
-2156 2155 0
-2156 -2154 0
c Var 'aux498' direct represents '2' with '-2155'
2154 2156 -2155 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2157'
c Var 'aux499' direct represents '0' with '2157'
c Var 'aux499' order represents '1' with '2158'
-2157 2158 0
c Var 'aux499' direct represents '1' with '2159'
2157 -2158 2159 0
-2159 2158 0
-2159 -2157 0
c Var 'aux499' direct represents '2' with '-2158'
2157 2159 -2158 0
c Encoding variable: aux500 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2160'
c Var 'aux500' direct represents '0' with '2160'
c Var 'aux500' order represents '1' with '2161'
-2160 2161 0
c Var 'aux500' direct represents '1' with '2162'
2160 -2161 2162 0
-2162 2161 0
-2162 -2160 0
c Var 'aux500' direct represents '2' with '-2161'
2160 2162 -2161 0
c Encoding variable: aux501 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2163'
c Var 'aux501' direct represents '0' with '2163'
c Var 'aux501' order represents '1' with '2164'
-2163 2164 0
c Var 'aux501' direct represents '1' with '2165'
2163 -2164 2165 0
-2165 2164 0
-2165 -2163 0
c Var 'aux501' direct represents '2' with '-2164'
2163 2165 -2164 0
c Encoding variable: aux502 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux501))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2166'
c Var 'aux502' direct represents '0' with '2166'
c Var 'aux502' order represents '1' with '2167'
-2166 2167 0
c Var 'aux502' direct represents '1' with '2168'
2166 -2167 2168 0
-2168 2167 0
-2168 -2166 0
c Var 'aux502' order represents '2' with '2169'
-2167 2169 0
c Var 'aux502' direct represents '2' with '2170'
2167 -2169 2170 0
-2170 2169 0
-2170 -2167 0
c Var 'aux502' direct represents '3' with '-2169'
2166 2168 2170 -2169 0
c Encoding variable: aux503 with domain: int(0..4) (representing constraint (aux498 + aux500))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2171'
c Var 'aux503' direct represents '0' with '2171'
c Var 'aux503' order represents '1' with '2172'
-2171 2172 0
c Var 'aux503' direct represents '1' with '2173'
2171 -2172 2173 0
-2173 2172 0
-2173 -2171 0
c Var 'aux503' order represents '2' with '2174'
-2172 2174 0
c Var 'aux503' direct represents '2' with '2175'
2172 -2174 2175 0
-2175 2174 0
-2175 -2172 0
c Var 'aux503' order represents '3' with '2176'
-2174 2176 0
c Var 'aux503' direct represents '3' with '2177'
2174 -2176 2177 0
-2177 2176 0
-2177 -2174 0
c Var 'aux503' direct represents '4' with '-2176'
2171 2173 2175 2177 -2176 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2178'
c Var 'aux504' direct represents '0' with '2178'
c Var 'aux504' order represents '1' with '2179'
-2178 2179 0
c Var 'aux504' direct represents '1' with '2180'
2178 -2179 2180 0
-2180 2179 0
-2180 -2178 0
c Var 'aux504' direct represents '2' with '-2179'
2178 2180 -2179 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2181'
c Var 'aux505' direct represents '0' with '2181'
c Var 'aux505' order represents '1' with '2182'
-2181 2182 0
c Var 'aux505' direct represents '1' with '2183'
2181 -2182 2183 0
-2183 2182 0
-2183 -2181 0
c Var 'aux505' direct represents '2' with '-2182'
2181 2183 -2182 0
c Encoding variable: aux506 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2184'
c Var 'aux506' direct represents '0' with '2184'
c Var 'aux506' order represents '1' with '2185'
-2184 2185 0
c Var 'aux506' direct represents '1' with '2186'
2184 -2185 2186 0
-2186 2185 0
-2186 -2184 0
c Var 'aux506' direct represents '2' with '-2185'
2184 2186 -2185 0
c Encoding variable: aux507 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2187'
c Var 'aux507' direct represents '0' with '2187'
c Var 'aux507' order represents '1' with '2188'
-2187 2188 0
c Var 'aux507' direct represents '1' with '2189'
2187 -2188 2189 0
-2189 2188 0
-2189 -2187 0
c Var 'aux507' direct represents '2' with '-2188'
2187 2189 -2188 0
c Encoding variable: aux508 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux507))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2190'
c Var 'aux508' direct represents '0' with '2190'
c Var 'aux508' order represents '1' with '2191'
-2190 2191 0
c Var 'aux508' direct represents '1' with '2192'
2190 -2191 2192 0
-2192 2191 0
-2192 -2190 0
c Var 'aux508' order represents '2' with '2193'
-2191 2193 0
c Var 'aux508' direct represents '2' with '2194'
2191 -2193 2194 0
-2194 2193 0
-2194 -2191 0
c Var 'aux508' direct represents '3' with '-2193'
2190 2192 2194 -2193 0
c Encoding variable: aux509 with domain: int(0..4) (representing constraint (aux504 + aux506))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2195'
c Var 'aux509' direct represents '0' with '2195'
c Var 'aux509' order represents '1' with '2196'
-2195 2196 0
c Var 'aux509' direct represents '1' with '2197'
2195 -2196 2197 0
-2197 2196 0
-2197 -2195 0
c Var 'aux509' order represents '2' with '2198'
-2196 2198 0
c Var 'aux509' direct represents '2' with '2199'
2196 -2198 2199 0
-2199 2198 0
-2199 -2196 0
c Var 'aux509' order represents '3' with '2200'
-2198 2200 0
c Var 'aux509' direct represents '3' with '2201'
2198 -2200 2201 0
-2201 2200 0
-2201 -2198 0
c Var 'aux509' direct represents '4' with '-2200'
2195 2197 2199 2201 -2200 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2202'
c Var 'aux510' direct represents '0' with '2202'
c Var 'aux510' order represents '1' with '2203'
-2202 2203 0
c Var 'aux510' direct represents '1' with '2204'
2202 -2203 2204 0
-2204 2203 0
-2204 -2202 0
c Var 'aux510' direct represents '2' with '-2203'
2202 2204 -2203 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2205'
c Var 'aux511' direct represents '0' with '2205'
c Var 'aux511' order represents '1' with '2206'
-2205 2206 0
c Var 'aux511' direct represents '1' with '2207'
2205 -2206 2207 0
-2207 2206 0
-2207 -2205 0
c Var 'aux511' direct represents '2' with '-2206'
2205 2207 -2206 0
c Encoding variable: aux512 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2208'
c Var 'aux512' direct represents '0' with '2208'
c Var 'aux512' order represents '1' with '2209'
-2208 2209 0
c Var 'aux512' direct represents '1' with '2210'
2208 -2209 2210 0
-2210 2209 0
-2210 -2208 0
c Var 'aux512' direct represents '2' with '-2209'
2208 2210 -2209 0
c Encoding variable: aux513 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2211'
c Var 'aux513' direct represents '0' with '2211'
c Var 'aux513' order represents '1' with '2212'
-2211 2212 0
c Var 'aux513' direct represents '1' with '2213'
2211 -2212 2213 0
-2213 2212 0
-2213 -2211 0
c Var 'aux513' direct represents '2' with '-2212'
2211 2213 -2212 0
c Encoding variable: aux514 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux513))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2214'
c Var 'aux514' direct represents '0' with '2214'
c Var 'aux514' order represents '1' with '2215'
-2214 2215 0
c Var 'aux514' direct represents '1' with '2216'
2214 -2215 2216 0
-2216 2215 0
-2216 -2214 0
c Var 'aux514' order represents '2' with '2217'
-2215 2217 0
c Var 'aux514' direct represents '2' with '2218'
2215 -2217 2218 0
-2218 2217 0
-2218 -2215 0
c Var 'aux514' direct represents '3' with '-2217'
2214 2216 2218 -2217 0
c Encoding variable: aux515 with domain: int(0..4) (representing constraint (aux510 + aux512))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2219'
c Var 'aux515' direct represents '0' with '2219'
c Var 'aux515' order represents '1' with '2220'
-2219 2220 0
c Var 'aux515' direct represents '1' with '2221'
2219 -2220 2221 0
-2221 2220 0
-2221 -2219 0
c Var 'aux515' order represents '2' with '2222'
-2220 2222 0
c Var 'aux515' direct represents '2' with '2223'
2220 -2222 2223 0
-2223 2222 0
-2223 -2220 0
c Var 'aux515' order represents '3' with '2224'
-2222 2224 0
c Var 'aux515' direct represents '3' with '2225'
2222 -2224 2225 0
-2225 2224 0
-2225 -2222 0
c Var 'aux515' direct represents '4' with '-2224'
2219 2221 2223 2225 -2224 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2226'
c Var 'aux516' direct represents '0' with '2226'
c Var 'aux516' order represents '1' with '2227'
-2226 2227 0
c Var 'aux516' direct represents '1' with '2228'
2226 -2227 2228 0
-2228 2227 0
-2228 -2226 0
c Var 'aux516' direct represents '2' with '-2227'
2226 2228 -2227 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2229'
c Var 'aux517' direct represents '0' with '2229'
c Var 'aux517' order represents '1' with '2230'
-2229 2230 0
c Var 'aux517' direct represents '1' with '2231'
2229 -2230 2231 0
-2231 2230 0
-2231 -2229 0
c Var 'aux517' direct represents '2' with '-2230'
2229 2231 -2230 0
c Encoding variable: aux518 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2232'
c Var 'aux518' direct represents '0' with '2232'
c Var 'aux518' order represents '1' with '2233'
-2232 2233 0
c Var 'aux518' direct represents '1' with '2234'
2232 -2233 2234 0
-2234 2233 0
-2234 -2232 0
c Var 'aux518' direct represents '2' with '-2233'
2232 2234 -2233 0
c Encoding variable: aux519 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2235'
c Var 'aux519' direct represents '0' with '2235'
c Var 'aux519' order represents '1' with '2236'
-2235 2236 0
c Var 'aux519' direct represents '1' with '2237'
2235 -2236 2237 0
-2237 2236 0
-2237 -2235 0
c Var 'aux519' direct represents '2' with '-2236'
2235 2237 -2236 0
c Encoding variable: aux520 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux519))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2238'
c Var 'aux520' direct represents '0' with '2238'
c Var 'aux520' order represents '1' with '2239'
-2238 2239 0
c Var 'aux520' direct represents '1' with '2240'
2238 -2239 2240 0
-2240 2239 0
-2240 -2238 0
c Var 'aux520' order represents '2' with '2241'
-2239 2241 0
c Var 'aux520' direct represents '2' with '2242'
2239 -2241 2242 0
-2242 2241 0
-2242 -2239 0
c Var 'aux520' direct represents '3' with '-2241'
2238 2240 2242 -2241 0
c Encoding variable: aux521 with domain: int(0..4) (representing constraint (aux516 + aux518))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2243'
c Var 'aux521' direct represents '0' with '2243'
c Var 'aux521' order represents '1' with '2244'
-2243 2244 0
c Var 'aux521' direct represents '1' with '2245'
2243 -2244 2245 0
-2245 2244 0
-2245 -2243 0
c Var 'aux521' order represents '2' with '2246'
-2244 2246 0
c Var 'aux521' direct represents '2' with '2247'
2244 -2246 2247 0
-2247 2246 0
-2247 -2244 0
c Var 'aux521' order represents '3' with '2248'
-2246 2248 0
c Var 'aux521' direct represents '3' with '2249'
2246 -2248 2249 0
-2249 2248 0
-2249 -2246 0
c Var 'aux521' direct represents '4' with '-2248'
2243 2245 2247 2249 -2248 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2250'
c Var 'aux522' direct represents '0' with '2250'
c Var 'aux522' order represents '1' with '2251'
-2250 2251 0
c Var 'aux522' direct represents '1' with '2252'
2250 -2251 2252 0
-2252 2251 0
-2252 -2250 0
c Var 'aux522' direct represents '2' with '-2251'
2250 2252 -2251 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2253'
c Var 'aux523' direct represents '0' with '2253'
c Var 'aux523' order represents '1' with '2254'
-2253 2254 0
c Var 'aux523' direct represents '1' with '2255'
2253 -2254 2255 0
-2255 2254 0
-2255 -2253 0
c Var 'aux523' direct represents '2' with '-2254'
2253 2255 -2254 0
c Encoding variable: aux524 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2256'
c Var 'aux524' direct represents '0' with '2256'
c Var 'aux524' order represents '1' with '2257'
-2256 2257 0
c Var 'aux524' direct represents '1' with '2258'
2256 -2257 2258 0
-2258 2257 0
-2258 -2256 0
c Var 'aux524' direct represents '2' with '-2257'
2256 2258 -2257 0
c Encoding variable: aux525 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2259'
c Var 'aux525' direct represents '0' with '2259'
c Var 'aux525' order represents '1' with '2260'
-2259 2260 0
c Var 'aux525' direct represents '1' with '2261'
2259 -2260 2261 0
-2261 2260 0
-2261 -2259 0
c Var 'aux525' direct represents '2' with '-2260'
2259 2261 -2260 0
c Encoding variable: aux526 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux525))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2262'
c Var 'aux526' direct represents '0' with '2262'
c Var 'aux526' order represents '1' with '2263'
-2262 2263 0
c Var 'aux526' direct represents '1' with '2264'
2262 -2263 2264 0
-2264 2263 0
-2264 -2262 0
c Var 'aux526' order represents '2' with '2265'
-2263 2265 0
c Var 'aux526' direct represents '2' with '2266'
2263 -2265 2266 0
-2266 2265 0
-2266 -2263 0
c Var 'aux526' direct represents '3' with '-2265'
2262 2264 2266 -2265 0
c Encoding variable: aux527 with domain: int(0..4) (representing constraint (aux522 + aux524))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2267'
c Var 'aux527' direct represents '0' with '2267'
c Var 'aux527' order represents '1' with '2268'
-2267 2268 0
c Var 'aux527' direct represents '1' with '2269'
2267 -2268 2269 0
-2269 2268 0
-2269 -2267 0
c Var 'aux527' order represents '2' with '2270'
-2268 2270 0
c Var 'aux527' direct represents '2' with '2271'
2268 -2270 2271 0
-2271 2270 0
-2271 -2268 0
c Var 'aux527' order represents '3' with '2272'
-2270 2272 0
c Var 'aux527' direct represents '3' with '2273'
2270 -2272 2273 0
-2273 2272 0
-2273 -2270 0
c Var 'aux527' direct represents '4' with '-2272'
2267 2269 2271 2273 -2272 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2274'
c Var 'aux528' direct represents '0' with '2274'
c Var 'aux528' order represents '1' with '2275'
-2274 2275 0
c Var 'aux528' direct represents '1' with '2276'
2274 -2275 2276 0
-2276 2275 0
-2276 -2274 0
c Var 'aux528' direct represents '2' with '-2275'
2274 2276 -2275 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2277'
c Var 'aux529' direct represents '0' with '2277'
c Var 'aux529' order represents '1' with '2278'
-2277 2278 0
c Var 'aux529' direct represents '1' with '2279'
2277 -2278 2279 0
-2279 2278 0
-2279 -2277 0
c Var 'aux529' direct represents '2' with '-2278'
2277 2279 -2278 0
c Encoding variable: aux530 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2280'
c Var 'aux530' direct represents '0' with '2280'
c Var 'aux530' order represents '1' with '2281'
-2280 2281 0
c Var 'aux530' direct represents '1' with '2282'
2280 -2281 2282 0
-2282 2281 0
-2282 -2280 0
c Var 'aux530' direct represents '2' with '-2281'
2280 2282 -2281 0
c Encoding variable: aux531 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2283'
c Var 'aux531' direct represents '0' with '2283'
c Var 'aux531' order represents '1' with '2284'
-2283 2284 0
c Var 'aux531' direct represents '1' with '2285'
2283 -2284 2285 0
-2285 2284 0
-2285 -2283 0
c Var 'aux531' direct represents '2' with '-2284'
2283 2285 -2284 0
c Encoding variable: aux532 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux531))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2286'
c Var 'aux532' direct represents '0' with '2286'
c Var 'aux532' order represents '1' with '2287'
-2286 2287 0
c Var 'aux532' direct represents '1' with '2288'
2286 -2287 2288 0
-2288 2287 0
-2288 -2286 0
c Var 'aux532' order represents '2' with '2289'
-2287 2289 0
c Var 'aux532' direct represents '2' with '2290'
2287 -2289 2290 0
-2290 2289 0
-2290 -2287 0
c Var 'aux532' direct represents '3' with '-2289'
2286 2288 2290 -2289 0
c Encoding variable: aux533 with domain: int(0..4) (representing constraint (aux528 + aux530))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2291'
c Var 'aux533' direct represents '0' with '2291'
c Var 'aux533' order represents '1' with '2292'
-2291 2292 0
c Var 'aux533' direct represents '1' with '2293'
2291 -2292 2293 0
-2293 2292 0
-2293 -2291 0
c Var 'aux533' order represents '2' with '2294'
-2292 2294 0
c Var 'aux533' direct represents '2' with '2295'
2292 -2294 2295 0
-2295 2294 0
-2295 -2292 0
c Var 'aux533' order represents '3' with '2296'
-2294 2296 0
c Var 'aux533' direct represents '3' with '2297'
2294 -2296 2297 0
-2297 2296 0
-2297 -2294 0
c Var 'aux533' direct represents '4' with '-2296'
2291 2293 2295 2297 -2296 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2298'
c Var 'aux534' direct represents '0' with '2298'
c Var 'aux534' order represents '1' with '2299'
-2298 2299 0
c Var 'aux534' direct represents '1' with '2300'
2298 -2299 2300 0
-2300 2299 0
-2300 -2298 0
c Var 'aux534' direct represents '2' with '-2299'
2298 2300 -2299 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2301'
c Var 'aux535' direct represents '0' with '2301'
c Var 'aux535' order represents '1' with '2302'
-2301 2302 0
c Var 'aux535' direct represents '1' with '2303'
2301 -2302 2303 0
-2303 2302 0
-2303 -2301 0
c Var 'aux535' direct represents '2' with '-2302'
2301 2303 -2302 0
c Encoding variable: aux536 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2304'
c Var 'aux536' direct represents '0' with '2304'
c Var 'aux536' order represents '1' with '2305'
-2304 2305 0
c Var 'aux536' direct represents '1' with '2306'
2304 -2305 2306 0
-2306 2305 0
-2306 -2304 0
c Var 'aux536' direct represents '2' with '-2305'
2304 2306 -2305 0
c Encoding variable: aux537 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2307'
c Var 'aux537' direct represents '0' with '2307'
c Var 'aux537' order represents '1' with '2308'
-2307 2308 0
c Var 'aux537' direct represents '1' with '2309'
2307 -2308 2309 0
-2309 2308 0
-2309 -2307 0
c Var 'aux537' direct represents '2' with '-2308'
2307 2309 -2308 0
c Encoding variable: aux538 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux537))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2310'
c Var 'aux538' direct represents '0' with '2310'
c Var 'aux538' order represents '1' with '2311'
-2310 2311 0
c Var 'aux538' direct represents '1' with '2312'
2310 -2311 2312 0
-2312 2311 0
-2312 -2310 0
c Var 'aux538' order represents '2' with '2313'
-2311 2313 0
c Var 'aux538' direct represents '2' with '2314'
2311 -2313 2314 0
-2314 2313 0
-2314 -2311 0
c Var 'aux538' direct represents '3' with '-2313'
2310 2312 2314 -2313 0
c Encoding variable: aux539 with domain: int(0..4) (representing constraint (aux534 + aux536))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2315'
c Var 'aux539' direct represents '0' with '2315'
c Var 'aux539' order represents '1' with '2316'
-2315 2316 0
c Var 'aux539' direct represents '1' with '2317'
2315 -2316 2317 0
-2317 2316 0
-2317 -2315 0
c Var 'aux539' order represents '2' with '2318'
-2316 2318 0
c Var 'aux539' direct represents '2' with '2319'
2316 -2318 2319 0
-2319 2318 0
-2319 -2316 0
c Var 'aux539' order represents '3' with '2320'
-2318 2320 0
c Var 'aux539' direct represents '3' with '2321'
2318 -2320 2321 0
-2321 2320 0
-2321 -2318 0
c Var 'aux539' direct represents '4' with '-2320'
2315 2317 2319 2321 -2320 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2322'
c Var 'aux540' direct represents '0' with '2322'
c Var 'aux540' order represents '1' with '2323'
-2322 2323 0
c Var 'aux540' direct represents '1' with '2324'
2322 -2323 2324 0
-2324 2323 0
-2324 -2322 0
c Var 'aux540' direct represents '2' with '-2323'
2322 2324 -2323 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2325'
c Var 'aux541' direct represents '0' with '2325'
c Var 'aux541' order represents '1' with '2326'
-2325 2326 0
c Var 'aux541' direct represents '1' with '2327'
2325 -2326 2327 0
-2327 2326 0
-2327 -2325 0
c Var 'aux541' direct represents '2' with '-2326'
2325 2327 -2326 0
c Encoding variable: aux542 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2328'
c Var 'aux542' direct represents '0' with '2328'
c Var 'aux542' order represents '1' with '2329'
-2328 2329 0
c Var 'aux542' direct represents '1' with '2330'
2328 -2329 2330 0
-2330 2329 0
-2330 -2328 0
c Var 'aux542' direct represents '2' with '-2329'
2328 2330 -2329 0
c Encoding variable: aux543 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2331'
c Var 'aux543' direct represents '0' with '2331'
c Var 'aux543' order represents '1' with '2332'
-2331 2332 0
c Var 'aux543' direct represents '1' with '2333'
2331 -2332 2333 0
-2333 2332 0
-2333 -2331 0
c Var 'aux543' direct represents '2' with '-2332'
2331 2333 -2332 0
c Encoding variable: aux544 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux543))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2334'
c Var 'aux544' direct represents '0' with '2334'
c Var 'aux544' order represents '1' with '2335'
-2334 2335 0
c Var 'aux544' direct represents '1' with '2336'
2334 -2335 2336 0
-2336 2335 0
-2336 -2334 0
c Var 'aux544' order represents '2' with '2337'
-2335 2337 0
c Var 'aux544' direct represents '2' with '2338'
2335 -2337 2338 0
-2338 2337 0
-2338 -2335 0
c Var 'aux544' direct represents '3' with '-2337'
2334 2336 2338 -2337 0
c Encoding variable: aux545 with domain: int(0..4) (representing constraint (aux540 + aux542))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2339'
c Var 'aux545' direct represents '0' with '2339'
c Var 'aux545' order represents '1' with '2340'
-2339 2340 0
c Var 'aux545' direct represents '1' with '2341'
2339 -2340 2341 0
-2341 2340 0
-2341 -2339 0
c Var 'aux545' order represents '2' with '2342'
-2340 2342 0
c Var 'aux545' direct represents '2' with '2343'
2340 -2342 2343 0
-2343 2342 0
-2343 -2340 0
c Var 'aux545' order represents '3' with '2344'
-2342 2344 0
c Var 'aux545' direct represents '3' with '2345'
2342 -2344 2345 0
-2345 2344 0
-2345 -2342 0
c Var 'aux545' direct represents '4' with '-2344'
2339 2341 2343 2345 -2344 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2346'
c Var 'aux546' direct represents '0' with '2346'
c Var 'aux546' order represents '1' with '2347'
-2346 2347 0
c Var 'aux546' direct represents '1' with '2348'
2346 -2347 2348 0
-2348 2347 0
-2348 -2346 0
c Var 'aux546' direct represents '2' with '-2347'
2346 2348 -2347 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2349'
c Var 'aux547' direct represents '0' with '2349'
c Var 'aux547' order represents '1' with '2350'
-2349 2350 0
c Var 'aux547' direct represents '1' with '2351'
2349 -2350 2351 0
-2351 2350 0
-2351 -2349 0
c Var 'aux547' direct represents '2' with '-2350'
2349 2351 -2350 0
c Encoding variable: aux548 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2352'
c Var 'aux548' direct represents '0' with '2352'
c Var 'aux548' order represents '1' with '2353'
-2352 2353 0
c Var 'aux548' direct represents '1' with '2354'
2352 -2353 2354 0
-2354 2353 0
-2354 -2352 0
c Var 'aux548' direct represents '2' with '-2353'
2352 2354 -2353 0
c Encoding variable: aux549 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2355'
c Var 'aux549' direct represents '0' with '2355'
c Var 'aux549' order represents '1' with '2356'
-2355 2356 0
c Var 'aux549' direct represents '1' with '2357'
2355 -2356 2357 0
-2357 2356 0
-2357 -2355 0
c Var 'aux549' direct represents '2' with '-2356'
2355 2357 -2356 0
c Encoding variable: aux550 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux549))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2358'
c Var 'aux550' direct represents '0' with '2358'
c Var 'aux550' order represents '1' with '2359'
-2358 2359 0
c Var 'aux550' direct represents '1' with '2360'
2358 -2359 2360 0
-2360 2359 0
-2360 -2358 0
c Var 'aux550' order represents '2' with '2361'
-2359 2361 0
c Var 'aux550' direct represents '2' with '2362'
2359 -2361 2362 0
-2362 2361 0
-2362 -2359 0
c Var 'aux550' direct represents '3' with '-2361'
2358 2360 2362 -2361 0
c Encoding variable: aux551 with domain: int(0..4) (representing constraint (aux546 + aux548))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2363'
c Var 'aux551' direct represents '0' with '2363'
c Var 'aux551' order represents '1' with '2364'
-2363 2364 0
c Var 'aux551' direct represents '1' with '2365'
2363 -2364 2365 0
-2365 2364 0
-2365 -2363 0
c Var 'aux551' order represents '2' with '2366'
-2364 2366 0
c Var 'aux551' direct represents '2' with '2367'
2364 -2366 2367 0
-2367 2366 0
-2367 -2364 0
c Var 'aux551' order represents '3' with '2368'
-2366 2368 0
c Var 'aux551' direct represents '3' with '2369'
2366 -2368 2369 0
-2369 2368 0
-2369 -2366 0
c Var 'aux551' direct represents '4' with '-2368'
2363 2365 2367 2369 -2368 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2370'
c Var 'aux552' direct represents '0' with '2370'
c Var 'aux552' order represents '1' with '2371'
-2370 2371 0
c Var 'aux552' direct represents '1' with '2372'
2370 -2371 2372 0
-2372 2371 0
-2372 -2370 0
c Var 'aux552' direct represents '2' with '-2371'
2370 2372 -2371 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2373'
c Var 'aux553' direct represents '0' with '2373'
c Var 'aux553' order represents '1' with '2374'
-2373 2374 0
c Var 'aux553' direct represents '1' with '2375'
2373 -2374 2375 0
-2375 2374 0
-2375 -2373 0
c Var 'aux553' direct represents '2' with '-2374'
2373 2375 -2374 0
c Encoding variable: aux554 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2376'
c Var 'aux554' direct represents '0' with '2376'
c Var 'aux554' order represents '1' with '2377'
-2376 2377 0
c Var 'aux554' direct represents '1' with '2378'
2376 -2377 2378 0
-2378 2377 0
-2378 -2376 0
c Var 'aux554' direct represents '2' with '-2377'
2376 2378 -2377 0
c Encoding variable: aux555 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2379'
c Var 'aux555' direct represents '0' with '2379'
c Var 'aux555' order represents '1' with '2380'
-2379 2380 0
c Var 'aux555' direct represents '1' with '2381'
2379 -2380 2381 0
-2381 2380 0
-2381 -2379 0
c Var 'aux555' direct represents '2' with '-2380'
2379 2381 -2380 0
c Encoding variable: aux556 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux555))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2382'
c Var 'aux556' direct represents '0' with '2382'
c Var 'aux556' order represents '1' with '2383'
-2382 2383 0
c Var 'aux556' direct represents '1' with '2384'
2382 -2383 2384 0
-2384 2383 0
-2384 -2382 0
c Var 'aux556' order represents '2' with '2385'
-2383 2385 0
c Var 'aux556' direct represents '2' with '2386'
2383 -2385 2386 0
-2386 2385 0
-2386 -2383 0
c Var 'aux556' direct represents '3' with '-2385'
2382 2384 2386 -2385 0
c Encoding variable: aux557 with domain: int(0..4) (representing constraint (aux552 + aux554))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2387'
c Var 'aux557' direct represents '0' with '2387'
c Var 'aux557' order represents '1' with '2388'
-2387 2388 0
c Var 'aux557' direct represents '1' with '2389'
2387 -2388 2389 0
-2389 2388 0
-2389 -2387 0
c Var 'aux557' order represents '2' with '2390'
-2388 2390 0
c Var 'aux557' direct represents '2' with '2391'
2388 -2390 2391 0
-2391 2390 0
-2391 -2388 0
c Var 'aux557' order represents '3' with '2392'
-2390 2392 0
c Var 'aux557' direct represents '3' with '2393'
2390 -2392 2393 0
-2393 2392 0
-2393 -2390 0
c Var 'aux557' direct represents '4' with '-2392'
2387 2389 2391 2393 -2392 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2394'
c Var 'aux558' direct represents '0' with '2394'
c Var 'aux558' order represents '1' with '2395'
-2394 2395 0
c Var 'aux558' direct represents '1' with '2396'
2394 -2395 2396 0
-2396 2395 0
-2396 -2394 0
c Var 'aux558' direct represents '2' with '-2395'
2394 2396 -2395 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2397'
c Var 'aux559' direct represents '0' with '2397'
c Var 'aux559' order represents '1' with '2398'
-2397 2398 0
c Var 'aux559' direct represents '1' with '2399'
2397 -2398 2399 0
-2399 2398 0
-2399 -2397 0
c Var 'aux559' direct represents '2' with '-2398'
2397 2399 -2398 0
c Encoding variable: aux560 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2400'
c Var 'aux560' direct represents '0' with '2400'
c Var 'aux560' order represents '1' with '2401'
-2400 2401 0
c Var 'aux560' direct represents '1' with '2402'
2400 -2401 2402 0
-2402 2401 0
-2402 -2400 0
c Var 'aux560' direct represents '2' with '-2401'
2400 2402 -2401 0
c Encoding variable: aux561 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2403'
c Var 'aux561' direct represents '0' with '2403'
c Var 'aux561' order represents '1' with '2404'
-2403 2404 0
c Var 'aux561' direct represents '1' with '2405'
2403 -2404 2405 0
-2405 2404 0
-2405 -2403 0
c Var 'aux561' direct represents '2' with '-2404'
2403 2405 -2404 0
c Encoding variable: aux562 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux561))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2406'
c Var 'aux562' direct represents '0' with '2406'
c Var 'aux562' order represents '1' with '2407'
-2406 2407 0
c Var 'aux562' direct represents '1' with '2408'
2406 -2407 2408 0
-2408 2407 0
-2408 -2406 0
c Var 'aux562' order represents '2' with '2409'
-2407 2409 0
c Var 'aux562' direct represents '2' with '2410'
2407 -2409 2410 0
-2410 2409 0
-2410 -2407 0
c Var 'aux562' direct represents '3' with '-2409'
2406 2408 2410 -2409 0
c Encoding variable: aux563 with domain: int(0..4) (representing constraint (aux558 + aux560))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2411'
c Var 'aux563' direct represents '0' with '2411'
c Var 'aux563' order represents '1' with '2412'
-2411 2412 0
c Var 'aux563' direct represents '1' with '2413'
2411 -2412 2413 0
-2413 2412 0
-2413 -2411 0
c Var 'aux563' order represents '2' with '2414'
-2412 2414 0
c Var 'aux563' direct represents '2' with '2415'
2412 -2414 2415 0
-2415 2414 0
-2415 -2412 0
c Var 'aux563' order represents '3' with '2416'
-2414 2416 0
c Var 'aux563' direct represents '3' with '2417'
2414 -2416 2417 0
-2417 2416 0
-2417 -2414 0
c Var 'aux563' direct represents '4' with '-2416'
2411 2413 2415 2417 -2416 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2418'
c Var 'aux564' direct represents '0' with '2418'
c Var 'aux564' order represents '1' with '2419'
-2418 2419 0
c Var 'aux564' direct represents '1' with '2420'
2418 -2419 2420 0
-2420 2419 0
-2420 -2418 0
c Var 'aux564' direct represents '2' with '-2419'
2418 2420 -2419 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2421'
c Var 'aux565' direct represents '0' with '2421'
c Var 'aux565' order represents '1' with '2422'
-2421 2422 0
c Var 'aux565' direct represents '1' with '2423'
2421 -2422 2423 0
-2423 2422 0
-2423 -2421 0
c Var 'aux565' direct represents '2' with '-2422'
2421 2423 -2422 0
c Encoding variable: aux566 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2424'
c Var 'aux566' direct represents '0' with '2424'
c Var 'aux566' order represents '1' with '2425'
-2424 2425 0
c Var 'aux566' direct represents '1' with '2426'
2424 -2425 2426 0
-2426 2425 0
-2426 -2424 0
c Var 'aux566' direct represents '2' with '-2425'
2424 2426 -2425 0
c Encoding variable: aux567 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2427'
c Var 'aux567' direct represents '0' with '2427'
c Var 'aux567' order represents '1' with '2428'
-2427 2428 0
c Var 'aux567' direct represents '1' with '2429'
2427 -2428 2429 0
-2429 2428 0
-2429 -2427 0
c Var 'aux567' direct represents '2' with '-2428'
2427 2429 -2428 0
c Encoding variable: aux568 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux567))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2430'
c Var 'aux568' direct represents '0' with '2430'
c Var 'aux568' order represents '1' with '2431'
-2430 2431 0
c Var 'aux568' direct represents '1' with '2432'
2430 -2431 2432 0
-2432 2431 0
-2432 -2430 0
c Var 'aux568' order represents '2' with '2433'
-2431 2433 0
c Var 'aux568' direct represents '2' with '2434'
2431 -2433 2434 0
-2434 2433 0
-2434 -2431 0
c Var 'aux568' direct represents '3' with '-2433'
2430 2432 2434 -2433 0
c Encoding variable: aux569 with domain: int(0..4) (representing constraint (aux564 + aux566))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2435'
c Var 'aux569' direct represents '0' with '2435'
c Var 'aux569' order represents '1' with '2436'
-2435 2436 0
c Var 'aux569' direct represents '1' with '2437'
2435 -2436 2437 0
-2437 2436 0
-2437 -2435 0
c Var 'aux569' order represents '2' with '2438'
-2436 2438 0
c Var 'aux569' direct represents '2' with '2439'
2436 -2438 2439 0
-2439 2438 0
-2439 -2436 0
c Var 'aux569' order represents '3' with '2440'
-2438 2440 0
c Var 'aux569' direct represents '3' with '2441'
2438 -2440 2441 0
-2441 2440 0
-2441 -2438 0
c Var 'aux569' direct represents '4' with '-2440'
2435 2437 2439 2441 -2440 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2442'
c Var 'aux570' direct represents '0' with '2442'
c Var 'aux570' order represents '1' with '2443'
-2442 2443 0
c Var 'aux570' direct represents '1' with '2444'
2442 -2443 2444 0
-2444 2443 0
-2444 -2442 0
c Var 'aux570' direct represents '2' with '-2443'
2442 2444 -2443 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2445'
c Var 'aux571' direct represents '0' with '2445'
c Var 'aux571' order represents '1' with '2446'
-2445 2446 0
c Var 'aux571' direct represents '1' with '2447'
2445 -2446 2447 0
-2447 2446 0
-2447 -2445 0
c Var 'aux571' direct represents '2' with '-2446'
2445 2447 -2446 0
c Encoding variable: aux572 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2448'
c Var 'aux572' direct represents '0' with '2448'
c Var 'aux572' order represents '1' with '2449'
-2448 2449 0
c Var 'aux572' direct represents '1' with '2450'
2448 -2449 2450 0
-2450 2449 0
-2450 -2448 0
c Var 'aux572' direct represents '2' with '-2449'
2448 2450 -2449 0
c Encoding variable: aux573 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2451'
c Var 'aux573' direct represents '0' with '2451'
c Var 'aux573' order represents '1' with '2452'
-2451 2452 0
c Var 'aux573' direct represents '1' with '2453'
2451 -2452 2453 0
-2453 2452 0
-2453 -2451 0
c Var 'aux573' direct represents '2' with '-2452'
2451 2453 -2452 0
c Encoding variable: aux574 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux573))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2454'
c Var 'aux574' direct represents '0' with '2454'
c Var 'aux574' order represents '1' with '2455'
-2454 2455 0
c Var 'aux574' direct represents '1' with '2456'
2454 -2455 2456 0
-2456 2455 0
-2456 -2454 0
c Var 'aux574' order represents '2' with '2457'
-2455 2457 0
c Var 'aux574' direct represents '2' with '2458'
2455 -2457 2458 0
-2458 2457 0
-2458 -2455 0
c Var 'aux574' direct represents '3' with '-2457'
2454 2456 2458 -2457 0
c Encoding variable: aux575 with domain: int(0..4) (representing constraint (aux570 + aux572))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2459'
c Var 'aux575' direct represents '0' with '2459'
c Var 'aux575' order represents '1' with '2460'
-2459 2460 0
c Var 'aux575' direct represents '1' with '2461'
2459 -2460 2461 0
-2461 2460 0
-2461 -2459 0
c Var 'aux575' order represents '2' with '2462'
-2460 2462 0
c Var 'aux575' direct represents '2' with '2463'
2460 -2462 2463 0
-2463 2462 0
-2463 -2460 0
c Var 'aux575' order represents '3' with '2464'
-2462 2464 0
c Var 'aux575' direct represents '3' with '2465'
2462 -2464 2465 0
-2465 2464 0
-2465 -2462 0
c Var 'aux575' direct represents '4' with '-2464'
2459 2461 2463 2465 -2464 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2466'
c Var 'aux576' direct represents '0' with '2466'
c Var 'aux576' order represents '1' with '2467'
-2466 2467 0
c Var 'aux576' direct represents '1' with '2468'
2466 -2467 2468 0
-2468 2467 0
-2468 -2466 0
c Var 'aux576' direct represents '2' with '-2467'
2466 2468 -2467 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2469'
c Var 'aux577' direct represents '0' with '2469'
c Var 'aux577' order represents '1' with '2470'
-2469 2470 0
c Var 'aux577' direct represents '1' with '2471'
2469 -2470 2471 0
-2471 2470 0
-2471 -2469 0
c Var 'aux577' direct represents '2' with '-2470'
2469 2471 -2470 0
c Encoding variable: aux578 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2472'
c Var 'aux578' direct represents '0' with '2472'
c Var 'aux578' order represents '1' with '2473'
-2472 2473 0
c Var 'aux578' direct represents '1' with '2474'
2472 -2473 2474 0
-2474 2473 0
-2474 -2472 0
c Var 'aux578' direct represents '2' with '-2473'
2472 2474 -2473 0
c Encoding variable: aux579 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2475'
c Var 'aux579' direct represents '0' with '2475'
c Var 'aux579' order represents '1' with '2476'
-2475 2476 0
c Var 'aux579' direct represents '1' with '2477'
2475 -2476 2477 0
-2477 2476 0
-2477 -2475 0
c Var 'aux579' direct represents '2' with '-2476'
2475 2477 -2476 0
c Encoding variable: aux580 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux579))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2478'
c Var 'aux580' direct represents '0' with '2478'
c Var 'aux580' order represents '1' with '2479'
-2478 2479 0
c Var 'aux580' direct represents '1' with '2480'
2478 -2479 2480 0
-2480 2479 0
-2480 -2478 0
c Var 'aux580' order represents '2' with '2481'
-2479 2481 0
c Var 'aux580' direct represents '2' with '2482'
2479 -2481 2482 0
-2482 2481 0
-2482 -2479 0
c Var 'aux580' direct represents '3' with '-2481'
2478 2480 2482 -2481 0
c Encoding variable: aux581 with domain: int(0..4) (representing constraint (aux576 + aux578))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2483'
c Var 'aux581' direct represents '0' with '2483'
c Var 'aux581' order represents '1' with '2484'
-2483 2484 0
c Var 'aux581' direct represents '1' with '2485'
2483 -2484 2485 0
-2485 2484 0
-2485 -2483 0
c Var 'aux581' order represents '2' with '2486'
-2484 2486 0
c Var 'aux581' direct represents '2' with '2487'
2484 -2486 2487 0
-2487 2486 0
-2487 -2484 0
c Var 'aux581' order represents '3' with '2488'
-2486 2488 0
c Var 'aux581' direct represents '3' with '2489'
2486 -2488 2489 0
-2489 2488 0
-2489 -2486 0
c Var 'aux581' direct represents '4' with '-2488'
2483 2485 2487 2489 -2488 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2490'
c Var 'aux582' direct represents '0' with '2490'
c Var 'aux582' order represents '1' with '2491'
-2490 2491 0
c Var 'aux582' direct represents '1' with '2492'
2490 -2491 2492 0
-2492 2491 0
-2492 -2490 0
c Var 'aux582' direct represents '2' with '-2491'
2490 2492 -2491 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2493'
c Var 'aux583' direct represents '0' with '2493'
c Var 'aux583' order represents '1' with '2494'
-2493 2494 0
c Var 'aux583' direct represents '1' with '2495'
2493 -2494 2495 0
-2495 2494 0
-2495 -2493 0
c Var 'aux583' direct represents '2' with '-2494'
2493 2495 -2494 0
c Encoding variable: aux584 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2496'
c Var 'aux584' direct represents '0' with '2496'
c Var 'aux584' order represents '1' with '2497'
-2496 2497 0
c Var 'aux584' direct represents '1' with '2498'
2496 -2497 2498 0
-2498 2497 0
-2498 -2496 0
c Var 'aux584' direct represents '2' with '-2497'
2496 2498 -2497 0
c Encoding variable: aux585 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2499'
c Var 'aux585' direct represents '0' with '2499'
c Var 'aux585' order represents '1' with '2500'
-2499 2500 0
c Var 'aux585' direct represents '1' with '2501'
2499 -2500 2501 0
-2501 2500 0
-2501 -2499 0
c Var 'aux585' direct represents '2' with '-2500'
2499 2501 -2500 0
c Encoding variable: aux586 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux585))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2502'
c Var 'aux586' direct represents '0' with '2502'
c Var 'aux586' order represents '1' with '2503'
-2502 2503 0
c Var 'aux586' direct represents '1' with '2504'
2502 -2503 2504 0
-2504 2503 0
-2504 -2502 0
c Var 'aux586' order represents '2' with '2505'
-2503 2505 0
c Var 'aux586' direct represents '2' with '2506'
2503 -2505 2506 0
-2506 2505 0
-2506 -2503 0
c Var 'aux586' direct represents '3' with '-2505'
2502 2504 2506 -2505 0
c Encoding variable: aux587 with domain: int(0..4) (representing constraint (aux582 + aux584))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2507'
c Var 'aux587' direct represents '0' with '2507'
c Var 'aux587' order represents '1' with '2508'
-2507 2508 0
c Var 'aux587' direct represents '1' with '2509'
2507 -2508 2509 0
-2509 2508 0
-2509 -2507 0
c Var 'aux587' order represents '2' with '2510'
-2508 2510 0
c Var 'aux587' direct represents '2' with '2511'
2508 -2510 2511 0
-2511 2510 0
-2511 -2508 0
c Var 'aux587' order represents '3' with '2512'
-2510 2512 0
c Var 'aux587' direct represents '3' with '2513'
2510 -2512 2513 0
-2513 2512 0
-2513 -2510 0
c Var 'aux587' direct represents '4' with '-2512'
2507 2509 2511 2513 -2512 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2514'
c Var 'aux588' direct represents '0' with '2514'
c Var 'aux588' order represents '1' with '2515'
-2514 2515 0
c Var 'aux588' direct represents '1' with '2516'
2514 -2515 2516 0
-2516 2515 0
-2516 -2514 0
c Var 'aux588' direct represents '2' with '-2515'
2514 2516 -2515 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2517'
c Var 'aux589' direct represents '0' with '2517'
c Var 'aux589' order represents '1' with '2518'
-2517 2518 0
c Var 'aux589' direct represents '1' with '2519'
2517 -2518 2519 0
-2519 2518 0
-2519 -2517 0
c Var 'aux589' direct represents '2' with '-2518'
2517 2519 -2518 0
c Encoding variable: aux590 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2520'
c Var 'aux590' direct represents '0' with '2520'
c Var 'aux590' order represents '1' with '2521'
-2520 2521 0
c Var 'aux590' direct represents '1' with '2522'
2520 -2521 2522 0
-2522 2521 0
-2522 -2520 0
c Var 'aux590' direct represents '2' with '-2521'
2520 2522 -2521 0
c Encoding variable: aux591 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2523'
c Var 'aux591' direct represents '0' with '2523'
c Var 'aux591' order represents '1' with '2524'
-2523 2524 0
c Var 'aux591' direct represents '1' with '2525'
2523 -2524 2525 0
-2525 2524 0
-2525 -2523 0
c Var 'aux591' direct represents '2' with '-2524'
2523 2525 -2524 0
c Encoding variable: aux592 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux591))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2526'
c Var 'aux592' direct represents '0' with '2526'
c Var 'aux592' order represents '1' with '2527'
-2526 2527 0
c Var 'aux592' direct represents '1' with '2528'
2526 -2527 2528 0
-2528 2527 0
-2528 -2526 0
c Var 'aux592' order represents '2' with '2529'
-2527 2529 0
c Var 'aux592' direct represents '2' with '2530'
2527 -2529 2530 0
-2530 2529 0
-2530 -2527 0
c Var 'aux592' direct represents '3' with '-2529'
2526 2528 2530 -2529 0
c Encoding variable: aux593 with domain: int(0..4) (representing constraint (aux588 + aux590))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2531'
c Var 'aux593' direct represents '0' with '2531'
c Var 'aux593' order represents '1' with '2532'
-2531 2532 0
c Var 'aux593' direct represents '1' with '2533'
2531 -2532 2533 0
-2533 2532 0
-2533 -2531 0
c Var 'aux593' order represents '2' with '2534'
-2532 2534 0
c Var 'aux593' direct represents '2' with '2535'
2532 -2534 2535 0
-2535 2534 0
-2535 -2532 0
c Var 'aux593' order represents '3' with '2536'
-2534 2536 0
c Var 'aux593' direct represents '3' with '2537'
2534 -2536 2537 0
-2537 2536 0
-2537 -2534 0
c Var 'aux593' direct represents '4' with '-2536'
2531 2533 2535 2537 -2536 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2538'
c Var 'aux594' direct represents '0' with '2538'
c Var 'aux594' order represents '1' with '2539'
-2538 2539 0
c Var 'aux594' direct represents '1' with '2540'
2538 -2539 2540 0
-2540 2539 0
-2540 -2538 0
c Var 'aux594' direct represents '2' with '-2539'
2538 2540 -2539 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2541'
c Var 'aux595' direct represents '0' with '2541'
c Var 'aux595' order represents '1' with '2542'
-2541 2542 0
c Var 'aux595' direct represents '1' with '2543'
2541 -2542 2543 0
-2543 2542 0
-2543 -2541 0
c Var 'aux595' direct represents '2' with '-2542'
2541 2543 -2542 0
c Encoding variable: aux596 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2544'
c Var 'aux596' direct represents '0' with '2544'
c Var 'aux596' order represents '1' with '2545'
-2544 2545 0
c Var 'aux596' direct represents '1' with '2546'
2544 -2545 2546 0
-2546 2545 0
-2546 -2544 0
c Var 'aux596' direct represents '2' with '-2545'
2544 2546 -2545 0
c Encoding variable: aux597 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2547'
c Var 'aux597' direct represents '0' with '2547'
c Var 'aux597' order represents '1' with '2548'
-2547 2548 0
c Var 'aux597' direct represents '1' with '2549'
2547 -2548 2549 0
-2549 2548 0
-2549 -2547 0
c Var 'aux597' direct represents '2' with '-2548'
2547 2549 -2548 0
c Encoding variable: aux598 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux597))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2550'
c Var 'aux598' direct represents '0' with '2550'
c Var 'aux598' order represents '1' with '2551'
-2550 2551 0
c Var 'aux598' direct represents '1' with '2552'
2550 -2551 2552 0
-2552 2551 0
-2552 -2550 0
c Var 'aux598' order represents '2' with '2553'
-2551 2553 0
c Var 'aux598' direct represents '2' with '2554'
2551 -2553 2554 0
-2554 2553 0
-2554 -2551 0
c Var 'aux598' direct represents '3' with '-2553'
2550 2552 2554 -2553 0
c Encoding variable: aux599 with domain: int(0..4) (representing constraint (aux594 + aux596))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2555'
c Var 'aux599' direct represents '0' with '2555'
c Var 'aux599' order represents '1' with '2556'
-2555 2556 0
c Var 'aux599' direct represents '1' with '2557'
2555 -2556 2557 0
-2557 2556 0
-2557 -2555 0
c Var 'aux599' order represents '2' with '2558'
-2556 2558 0
c Var 'aux599' direct represents '2' with '2559'
2556 -2558 2559 0
-2559 2558 0
-2559 -2556 0
c Var 'aux599' order represents '3' with '2560'
-2558 2560 0
c Var 'aux599' direct represents '3' with '2561'
2558 -2560 2561 0
-2561 2560 0
-2561 -2558 0
c Var 'aux599' direct represents '4' with '-2560'
2555 2557 2559 2561 -2560 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2562'
c Var 'aux600' direct represents '0' with '2562'
c Var 'aux600' order represents '1' with '2563'
-2562 2563 0
c Var 'aux600' direct represents '1' with '2564'
2562 -2563 2564 0
-2564 2563 0
-2564 -2562 0
c Var 'aux600' direct represents '2' with '-2563'
2562 2564 -2563 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2565'
c Var 'aux601' direct represents '0' with '2565'
c Var 'aux601' order represents '1' with '2566'
-2565 2566 0
c Var 'aux601' direct represents '1' with '2567'
2565 -2566 2567 0
-2567 2566 0
-2567 -2565 0
c Var 'aux601' direct represents '2' with '-2566'
2565 2567 -2566 0
c Encoding variable: aux602 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2568'
c Var 'aux602' direct represents '0' with '2568'
c Var 'aux602' order represents '1' with '2569'
-2568 2569 0
c Var 'aux602' direct represents '1' with '2570'
2568 -2569 2570 0
-2570 2569 0
-2570 -2568 0
c Var 'aux602' direct represents '2' with '-2569'
2568 2570 -2569 0
c Encoding variable: aux603 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2571'
c Var 'aux603' direct represents '0' with '2571'
c Var 'aux603' order represents '1' with '2572'
-2571 2572 0
c Var 'aux603' direct represents '1' with '2573'
2571 -2572 2573 0
-2573 2572 0
-2573 -2571 0
c Var 'aux603' direct represents '2' with '-2572'
2571 2573 -2572 0
c Encoding variable: aux604 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux603))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2574'
c Var 'aux604' direct represents '0' with '2574'
c Var 'aux604' order represents '1' with '2575'
-2574 2575 0
c Var 'aux604' direct represents '1' with '2576'
2574 -2575 2576 0
-2576 2575 0
-2576 -2574 0
c Var 'aux604' order represents '2' with '2577'
-2575 2577 0
c Var 'aux604' direct represents '2' with '2578'
2575 -2577 2578 0
-2578 2577 0
-2578 -2575 0
c Var 'aux604' direct represents '3' with '-2577'
2574 2576 2578 -2577 0
c Encoding variable: aux605 with domain: int(0..4) (representing constraint (aux600 + aux602))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2579'
c Var 'aux605' direct represents '0' with '2579'
c Var 'aux605' order represents '1' with '2580'
-2579 2580 0
c Var 'aux605' direct represents '1' with '2581'
2579 -2580 2581 0
-2581 2580 0
-2581 -2579 0
c Var 'aux605' order represents '2' with '2582'
-2580 2582 0
c Var 'aux605' direct represents '2' with '2583'
2580 -2582 2583 0
-2583 2582 0
-2583 -2580 0
c Var 'aux605' order represents '3' with '2584'
-2582 2584 0
c Var 'aux605' direct represents '3' with '2585'
2582 -2584 2585 0
-2585 2584 0
-2585 -2582 0
c Var 'aux605' direct represents '4' with '-2584'
2579 2581 2583 2585 -2584 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2586'
c Var 'aux606' direct represents '0' with '2586'
c Var 'aux606' order represents '1' with '2587'
-2586 2587 0
c Var 'aux606' direct represents '1' with '2588'
2586 -2587 2588 0
-2588 2587 0
-2588 -2586 0
c Var 'aux606' direct represents '2' with '-2587'
2586 2588 -2587 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2589'
c Var 'aux607' direct represents '0' with '2589'
c Var 'aux607' order represents '1' with '2590'
-2589 2590 0
c Var 'aux607' direct represents '1' with '2591'
2589 -2590 2591 0
-2591 2590 0
-2591 -2589 0
c Var 'aux607' direct represents '2' with '-2590'
2589 2591 -2590 0
c Encoding variable: aux608 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2592'
c Var 'aux608' direct represents '0' with '2592'
c Var 'aux608' order represents '1' with '2593'
-2592 2593 0
c Var 'aux608' direct represents '1' with '2594'
2592 -2593 2594 0
-2594 2593 0
-2594 -2592 0
c Var 'aux608' direct represents '2' with '-2593'
2592 2594 -2593 0
c Encoding variable: aux609 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2595'
c Var 'aux609' direct represents '0' with '2595'
c Var 'aux609' order represents '1' with '2596'
-2595 2596 0
c Var 'aux609' direct represents '1' with '2597'
2595 -2596 2597 0
-2597 2596 0
-2597 -2595 0
c Var 'aux609' direct represents '2' with '-2596'
2595 2597 -2596 0
c Encoding variable: aux610 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux609))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2598'
c Var 'aux610' direct represents '0' with '2598'
c Var 'aux610' order represents '1' with '2599'
-2598 2599 0
c Var 'aux610' direct represents '1' with '2600'
2598 -2599 2600 0
-2600 2599 0
-2600 -2598 0
c Var 'aux610' order represents '2' with '2601'
-2599 2601 0
c Var 'aux610' direct represents '2' with '2602'
2599 -2601 2602 0
-2602 2601 0
-2602 -2599 0
c Var 'aux610' direct represents '3' with '-2601'
2598 2600 2602 -2601 0
c Encoding variable: aux611 with domain: int(0..4) (representing constraint (aux606 + aux608))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2603'
c Var 'aux611' direct represents '0' with '2603'
c Var 'aux611' order represents '1' with '2604'
-2603 2604 0
c Var 'aux611' direct represents '1' with '2605'
2603 -2604 2605 0
-2605 2604 0
-2605 -2603 0
c Var 'aux611' order represents '2' with '2606'
-2604 2606 0
c Var 'aux611' direct represents '2' with '2607'
2604 -2606 2607 0
-2607 2606 0
-2607 -2604 0
c Var 'aux611' order represents '3' with '2608'
-2606 2608 0
c Var 'aux611' direct represents '3' with '2609'
2606 -2608 2609 0
-2609 2608 0
-2609 -2606 0
c Var 'aux611' direct represents '4' with '-2608'
2603 2605 2607 2609 -2608 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2610'
c Var 'aux612' direct represents '0' with '2610'
c Var 'aux612' order represents '1' with '2611'
-2610 2611 0
c Var 'aux612' direct represents '1' with '2612'
2610 -2611 2612 0
-2612 2611 0
-2612 -2610 0
c Var 'aux612' direct represents '2' with '-2611'
2610 2612 -2611 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2613'
c Var 'aux613' direct represents '0' with '2613'
c Var 'aux613' order represents '1' with '2614'
-2613 2614 0
c Var 'aux613' direct represents '1' with '2615'
2613 -2614 2615 0
-2615 2614 0
-2615 -2613 0
c Var 'aux613' direct represents '2' with '-2614'
2613 2615 -2614 0
c Encoding variable: aux614 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2616'
c Var 'aux614' direct represents '0' with '2616'
c Var 'aux614' order represents '1' with '2617'
-2616 2617 0
c Var 'aux614' direct represents '1' with '2618'
2616 -2617 2618 0
-2618 2617 0
-2618 -2616 0
c Var 'aux614' direct represents '2' with '-2617'
2616 2618 -2617 0
c Encoding variable: aux615 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2619'
c Var 'aux615' direct represents '0' with '2619'
c Var 'aux615' order represents '1' with '2620'
-2619 2620 0
c Var 'aux615' direct represents '1' with '2621'
2619 -2620 2621 0
-2621 2620 0
-2621 -2619 0
c Var 'aux615' direct represents '2' with '-2620'
2619 2621 -2620 0
c Encoding variable: aux616 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux615))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2622'
c Var 'aux616' direct represents '0' with '2622'
c Var 'aux616' order represents '1' with '2623'
-2622 2623 0
c Var 'aux616' direct represents '1' with '2624'
2622 -2623 2624 0
-2624 2623 0
-2624 -2622 0
c Var 'aux616' order represents '2' with '2625'
-2623 2625 0
c Var 'aux616' direct represents '2' with '2626'
2623 -2625 2626 0
-2626 2625 0
-2626 -2623 0
c Var 'aux616' direct represents '3' with '-2625'
2622 2624 2626 -2625 0
c Encoding variable: aux617 with domain: int(0..4) (representing constraint (aux612 + aux614))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2627'
c Var 'aux617' direct represents '0' with '2627'
c Var 'aux617' order represents '1' with '2628'
-2627 2628 0
c Var 'aux617' direct represents '1' with '2629'
2627 -2628 2629 0
-2629 2628 0
-2629 -2627 0
c Var 'aux617' order represents '2' with '2630'
-2628 2630 0
c Var 'aux617' direct represents '2' with '2631'
2628 -2630 2631 0
-2631 2630 0
-2631 -2628 0
c Var 'aux617' order represents '3' with '2632'
-2630 2632 0
c Var 'aux617' direct represents '3' with '2633'
2630 -2632 2633 0
-2633 2632 0
-2633 -2630 0
c Var 'aux617' direct represents '4' with '-2632'
2627 2629 2631 2633 -2632 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2634'
c Var 'aux618' direct represents '0' with '2634'
c Var 'aux618' order represents '1' with '2635'
-2634 2635 0
c Var 'aux618' direct represents '1' with '2636'
2634 -2635 2636 0
-2636 2635 0
-2636 -2634 0
c Var 'aux618' direct represents '2' with '-2635'
2634 2636 -2635 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2637'
c Var 'aux619' direct represents '0' with '2637'
c Var 'aux619' order represents '1' with '2638'
-2637 2638 0
c Var 'aux619' direct represents '1' with '2639'
2637 -2638 2639 0
-2639 2638 0
-2639 -2637 0
c Var 'aux619' direct represents '2' with '-2638'
2637 2639 -2638 0
c Encoding variable: aux620 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2640'
c Var 'aux620' direct represents '0' with '2640'
c Var 'aux620' order represents '1' with '2641'
-2640 2641 0
c Var 'aux620' direct represents '1' with '2642'
2640 -2641 2642 0
-2642 2641 0
-2642 -2640 0
c Var 'aux620' direct represents '2' with '-2641'
2640 2642 -2641 0
c Encoding variable: aux621 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2643'
c Var 'aux621' direct represents '0' with '2643'
c Var 'aux621' order represents '1' with '2644'
-2643 2644 0
c Var 'aux621' direct represents '1' with '2645'
2643 -2644 2645 0
-2645 2644 0
-2645 -2643 0
c Var 'aux621' direct represents '2' with '-2644'
2643 2645 -2644 0
c Encoding variable: aux622 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux621))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2646'
c Var 'aux622' direct represents '0' with '2646'
c Var 'aux622' order represents '1' with '2647'
-2646 2647 0
c Var 'aux622' direct represents '1' with '2648'
2646 -2647 2648 0
-2648 2647 0
-2648 -2646 0
c Var 'aux622' order represents '2' with '2649'
-2647 2649 0
c Var 'aux622' direct represents '2' with '2650'
2647 -2649 2650 0
-2650 2649 0
-2650 -2647 0
c Var 'aux622' direct represents '3' with '-2649'
2646 2648 2650 -2649 0
c Encoding variable: aux623 with domain: int(0..4) (representing constraint (aux618 + aux620))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2651'
c Var 'aux623' direct represents '0' with '2651'
c Var 'aux623' order represents '1' with '2652'
-2651 2652 0
c Var 'aux623' direct represents '1' with '2653'
2651 -2652 2653 0
-2653 2652 0
-2653 -2651 0
c Var 'aux623' order represents '2' with '2654'
-2652 2654 0
c Var 'aux623' direct represents '2' with '2655'
2652 -2654 2655 0
-2655 2654 0
-2655 -2652 0
c Var 'aux623' order represents '3' with '2656'
-2654 2656 0
c Var 'aux623' direct represents '3' with '2657'
2654 -2656 2657 0
-2657 2656 0
-2657 -2654 0
c Var 'aux623' direct represents '4' with '-2656'
2651 2653 2655 2657 -2656 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2658'
c Var 'aux624' direct represents '0' with '2658'
c Var 'aux624' order represents '1' with '2659'
-2658 2659 0
c Var 'aux624' direct represents '1' with '2660'
2658 -2659 2660 0
-2660 2659 0
-2660 -2658 0
c Var 'aux624' direct represents '2' with '-2659'
2658 2660 -2659 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2661'
c Var 'aux625' direct represents '0' with '2661'
c Var 'aux625' order represents '1' with '2662'
-2661 2662 0
c Var 'aux625' direct represents '1' with '2663'
2661 -2662 2663 0
-2663 2662 0
-2663 -2661 0
c Var 'aux625' direct represents '2' with '-2662'
2661 2663 -2662 0
c Encoding variable: aux626 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2664'
c Var 'aux626' direct represents '0' with '2664'
c Var 'aux626' order represents '1' with '2665'
-2664 2665 0
c Var 'aux626' direct represents '1' with '2666'
2664 -2665 2666 0
-2666 2665 0
-2666 -2664 0
c Var 'aux626' direct represents '2' with '-2665'
2664 2666 -2665 0
c Encoding variable: aux627 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2667'
c Var 'aux627' direct represents '0' with '2667'
c Var 'aux627' order represents '1' with '2668'
-2667 2668 0
c Var 'aux627' direct represents '1' with '2669'
2667 -2668 2669 0
-2669 2668 0
-2669 -2667 0
c Var 'aux627' direct represents '2' with '-2668'
2667 2669 -2668 0
c Encoding variable: aux628 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux627))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2670'
c Var 'aux628' direct represents '0' with '2670'
c Var 'aux628' order represents '1' with '2671'
-2670 2671 0
c Var 'aux628' direct represents '1' with '2672'
2670 -2671 2672 0
-2672 2671 0
-2672 -2670 0
c Var 'aux628' order represents '2' with '2673'
-2671 2673 0
c Var 'aux628' direct represents '2' with '2674'
2671 -2673 2674 0
-2674 2673 0
-2674 -2671 0
c Var 'aux628' direct represents '3' with '-2673'
2670 2672 2674 -2673 0
c Encoding variable: aux629 with domain: int(0..4) (representing constraint (aux624 + aux626))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2675'
c Var 'aux629' direct represents '0' with '2675'
c Var 'aux629' order represents '1' with '2676'
-2675 2676 0
c Var 'aux629' direct represents '1' with '2677'
2675 -2676 2677 0
-2677 2676 0
-2677 -2675 0
c Var 'aux629' order represents '2' with '2678'
-2676 2678 0
c Var 'aux629' direct represents '2' with '2679'
2676 -2678 2679 0
-2679 2678 0
-2679 -2676 0
c Var 'aux629' order represents '3' with '2680'
-2678 2680 0
c Var 'aux629' direct represents '3' with '2681'
2678 -2680 2681 0
-2681 2680 0
-2681 -2678 0
c Var 'aux629' direct represents '4' with '-2680'
2675 2677 2679 2681 -2680 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2682'
c Var 'aux630' direct represents '0' with '2682'
c Var 'aux630' order represents '1' with '2683'
-2682 2683 0
c Var 'aux630' direct represents '1' with '2684'
2682 -2683 2684 0
-2684 2683 0
-2684 -2682 0
c Var 'aux630' direct represents '2' with '-2683'
2682 2684 -2683 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2685'
c Var 'aux631' direct represents '0' with '2685'
c Var 'aux631' order represents '1' with '2686'
-2685 2686 0
c Var 'aux631' direct represents '1' with '2687'
2685 -2686 2687 0
-2687 2686 0
-2687 -2685 0
c Var 'aux631' direct represents '2' with '-2686'
2685 2687 -2686 0
c Encoding variable: aux632 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2688'
c Var 'aux632' direct represents '0' with '2688'
c Var 'aux632' order represents '1' with '2689'
-2688 2689 0
c Var 'aux632' direct represents '1' with '2690'
2688 -2689 2690 0
-2690 2689 0
-2690 -2688 0
c Var 'aux632' direct represents '2' with '-2689'
2688 2690 -2689 0
c Encoding variable: aux633 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2691'
c Var 'aux633' direct represents '0' with '2691'
c Var 'aux633' order represents '1' with '2692'
-2691 2692 0
c Var 'aux633' direct represents '1' with '2693'
2691 -2692 2693 0
-2693 2692 0
-2693 -2691 0
c Var 'aux633' direct represents '2' with '-2692'
2691 2693 -2692 0
c Encoding variable: aux634 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux633))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2694'
c Var 'aux634' direct represents '0' with '2694'
c Var 'aux634' order represents '1' with '2695'
-2694 2695 0
c Var 'aux634' direct represents '1' with '2696'
2694 -2695 2696 0
-2696 2695 0
-2696 -2694 0
c Var 'aux634' order represents '2' with '2697'
-2695 2697 0
c Var 'aux634' direct represents '2' with '2698'
2695 -2697 2698 0
-2698 2697 0
-2698 -2695 0
c Var 'aux634' direct represents '3' with '-2697'
2694 2696 2698 -2697 0
c Encoding variable: aux635 with domain: int(0..4) (representing constraint (aux630 + aux632))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2699'
c Var 'aux635' direct represents '0' with '2699'
c Var 'aux635' order represents '1' with '2700'
-2699 2700 0
c Var 'aux635' direct represents '1' with '2701'
2699 -2700 2701 0
-2701 2700 0
-2701 -2699 0
c Var 'aux635' order represents '2' with '2702'
-2700 2702 0
c Var 'aux635' direct represents '2' with '2703'
2700 -2702 2703 0
-2703 2702 0
-2703 -2700 0
c Var 'aux635' order represents '3' with '2704'
-2702 2704 0
c Var 'aux635' direct represents '3' with '2705'
2702 -2704 2705 0
-2705 2704 0
-2705 -2702 0
c Var 'aux635' direct represents '4' with '-2704'
2699 2701 2703 2705 -2704 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2706'
c Var 'aux636' direct represents '0' with '2706'
c Var 'aux636' order represents '1' with '2707'
-2706 2707 0
c Var 'aux636' direct represents '1' with '2708'
2706 -2707 2708 0
-2708 2707 0
-2708 -2706 0
c Var 'aux636' direct represents '2' with '-2707'
2706 2708 -2707 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2709'
c Var 'aux637' direct represents '0' with '2709'
c Var 'aux637' order represents '1' with '2710'
-2709 2710 0
c Var 'aux637' direct represents '1' with '2711'
2709 -2710 2711 0
-2711 2710 0
-2711 -2709 0
c Var 'aux637' direct represents '2' with '-2710'
2709 2711 -2710 0
c Encoding variable: aux638 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2712'
c Var 'aux638' direct represents '0' with '2712'
c Var 'aux638' order represents '1' with '2713'
-2712 2713 0
c Var 'aux638' direct represents '1' with '2714'
2712 -2713 2714 0
-2714 2713 0
-2714 -2712 0
c Var 'aux638' direct represents '2' with '-2713'
2712 2714 -2713 0
c Encoding variable: aux639 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2715'
c Var 'aux639' direct represents '0' with '2715'
c Var 'aux639' order represents '1' with '2716'
-2715 2716 0
c Var 'aux639' direct represents '1' with '2717'
2715 -2716 2717 0
-2717 2716 0
-2717 -2715 0
c Var 'aux639' direct represents '2' with '-2716'
2715 2717 -2716 0
c Encoding variable: aux640 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux639))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2718'
c Var 'aux640' direct represents '0' with '2718'
c Var 'aux640' order represents '1' with '2719'
-2718 2719 0
c Var 'aux640' direct represents '1' with '2720'
2718 -2719 2720 0
-2720 2719 0
-2720 -2718 0
c Var 'aux640' order represents '2' with '2721'
-2719 2721 0
c Var 'aux640' direct represents '2' with '2722'
2719 -2721 2722 0
-2722 2721 0
-2722 -2719 0
c Var 'aux640' direct represents '3' with '-2721'
2718 2720 2722 -2721 0
c Encoding variable: aux641 with domain: int(0..4) (representing constraint (aux636 + aux638))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2723'
c Var 'aux641' direct represents '0' with '2723'
c Var 'aux641' order represents '1' with '2724'
-2723 2724 0
c Var 'aux641' direct represents '1' with '2725'
2723 -2724 2725 0
-2725 2724 0
-2725 -2723 0
c Var 'aux641' order represents '2' with '2726'
-2724 2726 0
c Var 'aux641' direct represents '2' with '2727'
2724 -2726 2727 0
-2727 2726 0
-2727 -2724 0
c Var 'aux641' order represents '3' with '2728'
-2726 2728 0
c Var 'aux641' direct represents '3' with '2729'
2726 -2728 2729 0
-2729 2728 0
-2729 -2726 0
c Var 'aux641' direct represents '4' with '-2728'
2723 2725 2727 2729 -2728 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2730'
c Var 'aux642' direct represents '0' with '2730'
c Var 'aux642' order represents '1' with '2731'
-2730 2731 0
c Var 'aux642' direct represents '1' with '2732'
2730 -2731 2732 0
-2732 2731 0
-2732 -2730 0
c Var 'aux642' direct represents '2' with '-2731'
2730 2732 -2731 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2733'
c Var 'aux643' direct represents '0' with '2733'
c Var 'aux643' order represents '1' with '2734'
-2733 2734 0
c Var 'aux643' direct represents '1' with '2735'
2733 -2734 2735 0
-2735 2734 0
-2735 -2733 0
c Var 'aux643' direct represents '2' with '-2734'
2733 2735 -2734 0
c Encoding variable: aux644 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2736'
c Var 'aux644' direct represents '0' with '2736'
c Var 'aux644' order represents '1' with '2737'
-2736 2737 0
c Var 'aux644' direct represents '1' with '2738'
2736 -2737 2738 0
-2738 2737 0
-2738 -2736 0
c Var 'aux644' direct represents '2' with '-2737'
2736 2738 -2737 0
c Encoding variable: aux645 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2739'
c Var 'aux645' direct represents '0' with '2739'
c Var 'aux645' order represents '1' with '2740'
-2739 2740 0
c Var 'aux645' direct represents '1' with '2741'
2739 -2740 2741 0
-2741 2740 0
-2741 -2739 0
c Var 'aux645' direct represents '2' with '-2740'
2739 2741 -2740 0
c Encoding variable: aux646 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux645))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2742'
c Var 'aux646' direct represents '0' with '2742'
c Var 'aux646' order represents '1' with '2743'
-2742 2743 0
c Var 'aux646' direct represents '1' with '2744'
2742 -2743 2744 0
-2744 2743 0
-2744 -2742 0
c Var 'aux646' order represents '2' with '2745'
-2743 2745 0
c Var 'aux646' direct represents '2' with '2746'
2743 -2745 2746 0
-2746 2745 0
-2746 -2743 0
c Var 'aux646' direct represents '3' with '-2745'
2742 2744 2746 -2745 0
c Encoding variable: aux647 with domain: int(0..4) (representing constraint (aux642 + aux644))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2747'
c Var 'aux647' direct represents '0' with '2747'
c Var 'aux647' order represents '1' with '2748'
-2747 2748 0
c Var 'aux647' direct represents '1' with '2749'
2747 -2748 2749 0
-2749 2748 0
-2749 -2747 0
c Var 'aux647' order represents '2' with '2750'
-2748 2750 0
c Var 'aux647' direct represents '2' with '2751'
2748 -2750 2751 0
-2751 2750 0
-2751 -2748 0
c Var 'aux647' order represents '3' with '2752'
-2750 2752 0
c Var 'aux647' direct represents '3' with '2753'
2750 -2752 2753 0
-2753 2752 0
-2753 -2750 0
c Var 'aux647' direct represents '4' with '-2752'
2747 2749 2751 2753 -2752 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2754'
c Var 'aux648' direct represents '0' with '2754'
c Var 'aux648' order represents '1' with '2755'
-2754 2755 0
c Var 'aux648' direct represents '1' with '2756'
2754 -2755 2756 0
-2756 2755 0
-2756 -2754 0
c Var 'aux648' direct represents '2' with '-2755'
2754 2756 -2755 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2757'
c Var 'aux649' direct represents '0' with '2757'
c Var 'aux649' order represents '1' with '2758'
-2757 2758 0
c Var 'aux649' direct represents '1' with '2759'
2757 -2758 2759 0
-2759 2758 0
-2759 -2757 0
c Var 'aux649' direct represents '2' with '-2758'
2757 2759 -2758 0
c Encoding variable: aux650 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2760'
c Var 'aux650' direct represents '0' with '2760'
c Var 'aux650' order represents '1' with '2761'
-2760 2761 0
c Var 'aux650' direct represents '1' with '2762'
2760 -2761 2762 0
-2762 2761 0
-2762 -2760 0
c Var 'aux650' direct represents '2' with '-2761'
2760 2762 -2761 0
c Encoding variable: aux651 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2763'
c Var 'aux651' direct represents '0' with '2763'
c Var 'aux651' order represents '1' with '2764'
-2763 2764 0
c Var 'aux651' direct represents '1' with '2765'
2763 -2764 2765 0
-2765 2764 0
-2765 -2763 0
c Var 'aux651' direct represents '2' with '-2764'
2763 2765 -2764 0
c Encoding variable: aux652 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux651))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2766'
c Var 'aux652' direct represents '0' with '2766'
c Var 'aux652' order represents '1' with '2767'
-2766 2767 0
c Var 'aux652' direct represents '1' with '2768'
2766 -2767 2768 0
-2768 2767 0
-2768 -2766 0
c Var 'aux652' order represents '2' with '2769'
-2767 2769 0
c Var 'aux652' direct represents '2' with '2770'
2767 -2769 2770 0
-2770 2769 0
-2770 -2767 0
c Var 'aux652' direct represents '3' with '-2769'
2766 2768 2770 -2769 0
c Encoding variable: aux653 with domain: int(0..4) (representing constraint (aux648 + aux650))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2771'
c Var 'aux653' direct represents '0' with '2771'
c Var 'aux653' order represents '1' with '2772'
-2771 2772 0
c Var 'aux653' direct represents '1' with '2773'
2771 -2772 2773 0
-2773 2772 0
-2773 -2771 0
c Var 'aux653' order represents '2' with '2774'
-2772 2774 0
c Var 'aux653' direct represents '2' with '2775'
2772 -2774 2775 0
-2775 2774 0
-2775 -2772 0
c Var 'aux653' order represents '3' with '2776'
-2774 2776 0
c Var 'aux653' direct represents '3' with '2777'
2774 -2776 2777 0
-2777 2776 0
-2777 -2774 0
c Var 'aux653' direct represents '4' with '-2776'
2771 2773 2775 2777 -2776 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2778'
c Var 'aux654' direct represents '0' with '2778'
c Var 'aux654' order represents '1' with '2779'
-2778 2779 0
c Var 'aux654' direct represents '1' with '2780'
2778 -2779 2780 0
-2780 2779 0
-2780 -2778 0
c Var 'aux654' direct represents '2' with '-2779'
2778 2780 -2779 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2781'
c Var 'aux655' direct represents '0' with '2781'
c Var 'aux655' order represents '1' with '2782'
-2781 2782 0
c Var 'aux655' direct represents '1' with '2783'
2781 -2782 2783 0
-2783 2782 0
-2783 -2781 0
c Var 'aux655' direct represents '2' with '-2782'
2781 2783 -2782 0
c Encoding variable: aux656 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2784'
c Var 'aux656' direct represents '0' with '2784'
c Var 'aux656' order represents '1' with '2785'
-2784 2785 0
c Var 'aux656' direct represents '1' with '2786'
2784 -2785 2786 0
-2786 2785 0
-2786 -2784 0
c Var 'aux656' direct represents '2' with '-2785'
2784 2786 -2785 0
c Encoding variable: aux657 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2787'
c Var 'aux657' direct represents '0' with '2787'
c Var 'aux657' order represents '1' with '2788'
-2787 2788 0
c Var 'aux657' direct represents '1' with '2789'
2787 -2788 2789 0
-2789 2788 0
-2789 -2787 0
c Var 'aux657' direct represents '2' with '-2788'
2787 2789 -2788 0
c Encoding variable: aux658 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux657))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2790'
c Var 'aux658' direct represents '0' with '2790'
c Var 'aux658' order represents '1' with '2791'
-2790 2791 0
c Var 'aux658' direct represents '1' with '2792'
2790 -2791 2792 0
-2792 2791 0
-2792 -2790 0
c Var 'aux658' order represents '2' with '2793'
-2791 2793 0
c Var 'aux658' direct represents '2' with '2794'
2791 -2793 2794 0
-2794 2793 0
-2794 -2791 0
c Var 'aux658' direct represents '3' with '-2793'
2790 2792 2794 -2793 0
c Encoding variable: aux659 with domain: int(0..4) (representing constraint (aux654 + aux656))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2795'
c Var 'aux659' direct represents '0' with '2795'
c Var 'aux659' order represents '1' with '2796'
-2795 2796 0
c Var 'aux659' direct represents '1' with '2797'
2795 -2796 2797 0
-2797 2796 0
-2797 -2795 0
c Var 'aux659' order represents '2' with '2798'
-2796 2798 0
c Var 'aux659' direct represents '2' with '2799'
2796 -2798 2799 0
-2799 2798 0
-2799 -2796 0
c Var 'aux659' order represents '3' with '2800'
-2798 2800 0
c Var 'aux659' direct represents '3' with '2801'
2798 -2800 2801 0
-2801 2800 0
-2801 -2798 0
c Var 'aux659' direct represents '4' with '-2800'
2795 2797 2799 2801 -2800 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2802'
c Var 'aux660' direct represents '0' with '2802'
c Var 'aux660' order represents '1' with '2803'
-2802 2803 0
c Var 'aux660' direct represents '1' with '2804'
2802 -2803 2804 0
-2804 2803 0
-2804 -2802 0
c Var 'aux660' direct represents '2' with '-2803'
2802 2804 -2803 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2805'
c Var 'aux661' direct represents '0' with '2805'
c Var 'aux661' order represents '1' with '2806'
-2805 2806 0
c Var 'aux661' direct represents '1' with '2807'
2805 -2806 2807 0
-2807 2806 0
-2807 -2805 0
c Var 'aux661' direct represents '2' with '-2806'
2805 2807 -2806 0
c Encoding variable: aux662 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2808'
c Var 'aux662' direct represents '0' with '2808'
c Var 'aux662' order represents '1' with '2809'
-2808 2809 0
c Var 'aux662' direct represents '1' with '2810'
2808 -2809 2810 0
-2810 2809 0
-2810 -2808 0
c Var 'aux662' direct represents '2' with '-2809'
2808 2810 -2809 0
c Encoding variable: aux663 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2811'
c Var 'aux663' direct represents '0' with '2811'
c Var 'aux663' order represents '1' with '2812'
-2811 2812 0
c Var 'aux663' direct represents '1' with '2813'
2811 -2812 2813 0
-2813 2812 0
-2813 -2811 0
c Var 'aux663' direct represents '2' with '-2812'
2811 2813 -2812 0
c Encoding variable: aux664 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux663))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2814'
c Var 'aux664' direct represents '0' with '2814'
c Var 'aux664' order represents '1' with '2815'
-2814 2815 0
c Var 'aux664' direct represents '1' with '2816'
2814 -2815 2816 0
-2816 2815 0
-2816 -2814 0
c Var 'aux664' order represents '2' with '2817'
-2815 2817 0
c Var 'aux664' direct represents '2' with '2818'
2815 -2817 2818 0
-2818 2817 0
-2818 -2815 0
c Var 'aux664' direct represents '3' with '-2817'
2814 2816 2818 -2817 0
c Encoding variable: aux665 with domain: int(0..4) (representing constraint (aux660 + aux662))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2819'
c Var 'aux665' direct represents '0' with '2819'
c Var 'aux665' order represents '1' with '2820'
-2819 2820 0
c Var 'aux665' direct represents '1' with '2821'
2819 -2820 2821 0
-2821 2820 0
-2821 -2819 0
c Var 'aux665' order represents '2' with '2822'
-2820 2822 0
c Var 'aux665' direct represents '2' with '2823'
2820 -2822 2823 0
-2823 2822 0
-2823 -2820 0
c Var 'aux665' order represents '3' with '2824'
-2822 2824 0
c Var 'aux665' direct represents '3' with '2825'
2822 -2824 2825 0
-2825 2824 0
-2825 -2822 0
c Var 'aux665' direct represents '4' with '-2824'
2819 2821 2823 2825 -2824 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2826'
c Var 'aux666' direct represents '0' with '2826'
c Var 'aux666' order represents '1' with '2827'
-2826 2827 0
c Var 'aux666' direct represents '1' with '2828'
2826 -2827 2828 0
-2828 2827 0
-2828 -2826 0
c Var 'aux666' direct represents '2' with '-2827'
2826 2828 -2827 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2829'
c Var 'aux667' direct represents '0' with '2829'
c Var 'aux667' order represents '1' with '2830'
-2829 2830 0
c Var 'aux667' direct represents '1' with '2831'
2829 -2830 2831 0
-2831 2830 0
-2831 -2829 0
c Var 'aux667' direct represents '2' with '-2830'
2829 2831 -2830 0
c Encoding variable: aux668 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2832'
c Var 'aux668' direct represents '0' with '2832'
c Var 'aux668' order represents '1' with '2833'
-2832 2833 0
c Var 'aux668' direct represents '1' with '2834'
2832 -2833 2834 0
-2834 2833 0
-2834 -2832 0
c Var 'aux668' direct represents '2' with '-2833'
2832 2834 -2833 0
c Encoding variable: aux669 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2835'
c Var 'aux669' direct represents '0' with '2835'
c Var 'aux669' order represents '1' with '2836'
-2835 2836 0
c Var 'aux669' direct represents '1' with '2837'
2835 -2836 2837 0
-2837 2836 0
-2837 -2835 0
c Var 'aux669' direct represents '2' with '-2836'
2835 2837 -2836 0
c Encoding variable: aux670 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux669))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2838'
c Var 'aux670' direct represents '0' with '2838'
c Var 'aux670' order represents '1' with '2839'
-2838 2839 0
c Var 'aux670' direct represents '1' with '2840'
2838 -2839 2840 0
-2840 2839 0
-2840 -2838 0
c Var 'aux670' order represents '2' with '2841'
-2839 2841 0
c Var 'aux670' direct represents '2' with '2842'
2839 -2841 2842 0
-2842 2841 0
-2842 -2839 0
c Var 'aux670' direct represents '3' with '-2841'
2838 2840 2842 -2841 0
c Encoding variable: aux671 with domain: int(0..4) (representing constraint (aux666 + aux668))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2843'
c Var 'aux671' direct represents '0' with '2843'
c Var 'aux671' order represents '1' with '2844'
-2843 2844 0
c Var 'aux671' direct represents '1' with '2845'
2843 -2844 2845 0
-2845 2844 0
-2845 -2843 0
c Var 'aux671' order represents '2' with '2846'
-2844 2846 0
c Var 'aux671' direct represents '2' with '2847'
2844 -2846 2847 0
-2847 2846 0
-2847 -2844 0
c Var 'aux671' order represents '3' with '2848'
-2846 2848 0
c Var 'aux671' direct represents '3' with '2849'
2846 -2848 2849 0
-2849 2848 0
-2849 -2846 0
c Var 'aux671' direct represents '4' with '-2848'
2843 2845 2847 2849 -2848 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2850'
c Var 'aux672' direct represents '0' with '2850'
c Var 'aux672' order represents '1' with '2851'
-2850 2851 0
c Var 'aux672' direct represents '1' with '2852'
2850 -2851 2852 0
-2852 2851 0
-2852 -2850 0
c Var 'aux672' direct represents '2' with '-2851'
2850 2852 -2851 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2853'
c Var 'aux673' direct represents '0' with '2853'
c Var 'aux673' order represents '1' with '2854'
-2853 2854 0
c Var 'aux673' direct represents '1' with '2855'
2853 -2854 2855 0
-2855 2854 0
-2855 -2853 0
c Var 'aux673' direct represents '2' with '-2854'
2853 2855 -2854 0
c Encoding variable: aux674 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2856'
c Var 'aux674' direct represents '0' with '2856'
c Var 'aux674' order represents '1' with '2857'
-2856 2857 0
c Var 'aux674' direct represents '1' with '2858'
2856 -2857 2858 0
-2858 2857 0
-2858 -2856 0
c Var 'aux674' direct represents '2' with '-2857'
2856 2858 -2857 0
c Encoding variable: aux675 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2859'
c Var 'aux675' direct represents '0' with '2859'
c Var 'aux675' order represents '1' with '2860'
-2859 2860 0
c Var 'aux675' direct represents '1' with '2861'
2859 -2860 2861 0
-2861 2860 0
-2861 -2859 0
c Var 'aux675' direct represents '2' with '-2860'
2859 2861 -2860 0
c Encoding variable: aux676 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux675))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2862'
c Var 'aux676' direct represents '0' with '2862'
c Var 'aux676' order represents '1' with '2863'
-2862 2863 0
c Var 'aux676' direct represents '1' with '2864'
2862 -2863 2864 0
-2864 2863 0
-2864 -2862 0
c Var 'aux676' order represents '2' with '2865'
-2863 2865 0
c Var 'aux676' direct represents '2' with '2866'
2863 -2865 2866 0
-2866 2865 0
-2866 -2863 0
c Var 'aux676' direct represents '3' with '-2865'
2862 2864 2866 -2865 0
c Encoding variable: aux677 with domain: int(0..4) (representing constraint (aux672 + aux674))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2867'
c Var 'aux677' direct represents '0' with '2867'
c Var 'aux677' order represents '1' with '2868'
-2867 2868 0
c Var 'aux677' direct represents '1' with '2869'
2867 -2868 2869 0
-2869 2868 0
-2869 -2867 0
c Var 'aux677' order represents '2' with '2870'
-2868 2870 0
c Var 'aux677' direct represents '2' with '2871'
2868 -2870 2871 0
-2871 2870 0
-2871 -2868 0
c Var 'aux677' order represents '3' with '2872'
-2870 2872 0
c Var 'aux677' direct represents '3' with '2873'
2870 -2872 2873 0
-2873 2872 0
-2873 -2870 0
c Var 'aux677' direct represents '4' with '-2872'
2867 2869 2871 2873 -2872 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2874'
c Var 'aux678' direct represents '0' with '2874'
c Var 'aux678' order represents '1' with '2875'
-2874 2875 0
c Var 'aux678' direct represents '1' with '2876'
2874 -2875 2876 0
-2876 2875 0
-2876 -2874 0
c Var 'aux678' direct represents '2' with '-2875'
2874 2876 -2875 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2877'
c Var 'aux679' direct represents '0' with '2877'
c Var 'aux679' order represents '1' with '2878'
-2877 2878 0
c Var 'aux679' direct represents '1' with '2879'
2877 -2878 2879 0
-2879 2878 0
-2879 -2877 0
c Var 'aux679' direct represents '2' with '-2878'
2877 2879 -2878 0
c Encoding variable: aux680 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2880'
c Var 'aux680' direct represents '0' with '2880'
c Var 'aux680' order represents '1' with '2881'
-2880 2881 0
c Var 'aux680' direct represents '1' with '2882'
2880 -2881 2882 0
-2882 2881 0
-2882 -2880 0
c Var 'aux680' direct represents '2' with '-2881'
2880 2882 -2881 0
c Encoding variable: aux681 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2883'
c Var 'aux681' direct represents '0' with '2883'
c Var 'aux681' order represents '1' with '2884'
-2883 2884 0
c Var 'aux681' direct represents '1' with '2885'
2883 -2884 2885 0
-2885 2884 0
-2885 -2883 0
c Var 'aux681' direct represents '2' with '-2884'
2883 2885 -2884 0
c Encoding variable: aux682 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux681))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '2886'
c Var 'aux682' direct represents '0' with '2886'
c Var 'aux682' order represents '1' with '2887'
-2886 2887 0
c Var 'aux682' direct represents '1' with '2888'
2886 -2887 2888 0
-2888 2887 0
-2888 -2886 0
c Var 'aux682' order represents '2' with '2889'
-2887 2889 0
c Var 'aux682' direct represents '2' with '2890'
2887 -2889 2890 0
-2890 2889 0
-2890 -2887 0
c Var 'aux682' direct represents '3' with '-2889'
2886 2888 2890 -2889 0
c Encoding variable: aux683 with domain: int(0..4) (representing constraint (aux678 + aux680))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '2891'
c Var 'aux683' direct represents '0' with '2891'
c Var 'aux683' order represents '1' with '2892'
-2891 2892 0
c Var 'aux683' direct represents '1' with '2893'
2891 -2892 2893 0
-2893 2892 0
-2893 -2891 0
c Var 'aux683' order represents '2' with '2894'
-2892 2894 0
c Var 'aux683' direct represents '2' with '2895'
2892 -2894 2895 0
-2895 2894 0
-2895 -2892 0
c Var 'aux683' order represents '3' with '2896'
-2894 2896 0
c Var 'aux683' direct represents '3' with '2897'
2894 -2896 2897 0
-2897 2896 0
-2897 -2894 0
c Var 'aux683' direct represents '4' with '-2896'
2891 2893 2895 2897 -2896 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '2898'
c Var 'aux684' direct represents '0' with '2898'
c Var 'aux684' order represents '1' with '2899'
-2898 2899 0
c Var 'aux684' direct represents '1' with '2900'
2898 -2899 2900 0
-2900 2899 0
-2900 -2898 0
c Var 'aux684' direct represents '2' with '-2899'
2898 2900 -2899 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '2901'
c Var 'aux685' direct represents '0' with '2901'
c Var 'aux685' order represents '1' with '2902'
-2901 2902 0
c Var 'aux685' direct represents '1' with '2903'
2901 -2902 2903 0
-2903 2902 0
-2903 -2901 0
c Var 'aux685' direct represents '2' with '-2902'
2901 2903 -2902 0
c Encoding variable: aux686 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '2904'
c Var 'aux686' direct represents '0' with '2904'
c Var 'aux686' order represents '1' with '2905'
-2904 2905 0
c Var 'aux686' direct represents '1' with '2906'
2904 -2905 2906 0
-2906 2905 0
-2906 -2904 0
c Var 'aux686' direct represents '2' with '-2905'
2904 2906 -2905 0
c Encoding variable: aux687 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '2907'
c Var 'aux687' direct represents '0' with '2907'
c Var 'aux687' order represents '1' with '2908'
-2907 2908 0
c Var 'aux687' direct represents '1' with '2909'
2907 -2908 2909 0
-2909 2908 0
-2909 -2907 0
c Var 'aux687' direct represents '2' with '-2908'
2907 2909 -2908 0
c Encoding variable: aux688 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux687))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '2910'
c Var 'aux688' direct represents '0' with '2910'
c Var 'aux688' order represents '1' with '2911'
-2910 2911 0
c Var 'aux688' direct represents '1' with '2912'
2910 -2911 2912 0
-2912 2911 0
-2912 -2910 0
c Var 'aux688' order represents '2' with '2913'
-2911 2913 0
c Var 'aux688' direct represents '2' with '2914'
2911 -2913 2914 0
-2914 2913 0
-2914 -2911 0
c Var 'aux688' direct represents '3' with '-2913'
2910 2912 2914 -2913 0
c Encoding variable: aux689 with domain: int(0..4) (representing constraint (aux684 + aux686))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '2915'
c Var 'aux689' direct represents '0' with '2915'
c Var 'aux689' order represents '1' with '2916'
-2915 2916 0
c Var 'aux689' direct represents '1' with '2917'
2915 -2916 2917 0
-2917 2916 0
-2917 -2915 0
c Var 'aux689' order represents '2' with '2918'
-2916 2918 0
c Var 'aux689' direct represents '2' with '2919'
2916 -2918 2919 0
-2919 2918 0
-2919 -2916 0
c Var 'aux689' order represents '3' with '2920'
-2918 2920 0
c Var 'aux689' direct represents '3' with '2921'
2918 -2920 2921 0
-2921 2920 0
-2921 -2918 0
c Var 'aux689' direct represents '4' with '-2920'
2915 2917 2919 2921 -2920 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '2922'
c Var 'aux690' direct represents '0' with '2922'
c Var 'aux690' order represents '1' with '2923'
-2922 2923 0
c Var 'aux690' direct represents '1' with '2924'
2922 -2923 2924 0
-2924 2923 0
-2924 -2922 0
c Var 'aux690' direct represents '2' with '-2923'
2922 2924 -2923 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '2925'
c Var 'aux691' direct represents '0' with '2925'
c Var 'aux691' order represents '1' with '2926'
-2925 2926 0
c Var 'aux691' direct represents '1' with '2927'
2925 -2926 2927 0
-2927 2926 0
-2927 -2925 0
c Var 'aux691' direct represents '2' with '-2926'
2925 2927 -2926 0
c Encoding variable: aux692 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '2928'
c Var 'aux692' direct represents '0' with '2928'
c Var 'aux692' order represents '1' with '2929'
-2928 2929 0
c Var 'aux692' direct represents '1' with '2930'
2928 -2929 2930 0
-2930 2929 0
-2930 -2928 0
c Var 'aux692' direct represents '2' with '-2929'
2928 2930 -2929 0
c Encoding variable: aux693 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '2931'
c Var 'aux693' direct represents '0' with '2931'
c Var 'aux693' order represents '1' with '2932'
-2931 2932 0
c Var 'aux693' direct represents '1' with '2933'
2931 -2932 2933 0
-2933 2932 0
-2933 -2931 0
c Var 'aux693' direct represents '2' with '-2932'
2931 2933 -2932 0
c Encoding variable: aux694 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux693))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '2934'
c Var 'aux694' direct represents '0' with '2934'
c Var 'aux694' order represents '1' with '2935'
-2934 2935 0
c Var 'aux694' direct represents '1' with '2936'
2934 -2935 2936 0
-2936 2935 0
-2936 -2934 0
c Var 'aux694' order represents '2' with '2937'
-2935 2937 0
c Var 'aux694' direct represents '2' with '2938'
2935 -2937 2938 0
-2938 2937 0
-2938 -2935 0
c Var 'aux694' direct represents '3' with '-2937'
2934 2936 2938 -2937 0
c Encoding variable: aux695 with domain: int(0..4) (representing constraint (aux690 + aux692))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '2939'
c Var 'aux695' direct represents '0' with '2939'
c Var 'aux695' order represents '1' with '2940'
-2939 2940 0
c Var 'aux695' direct represents '1' with '2941'
2939 -2940 2941 0
-2941 2940 0
-2941 -2939 0
c Var 'aux695' order represents '2' with '2942'
-2940 2942 0
c Var 'aux695' direct represents '2' with '2943'
2940 -2942 2943 0
-2943 2942 0
-2943 -2940 0
c Var 'aux695' order represents '3' with '2944'
-2942 2944 0
c Var 'aux695' direct represents '3' with '2945'
2942 -2944 2945 0
-2945 2944 0
-2945 -2942 0
c Var 'aux695' direct represents '4' with '-2944'
2939 2941 2943 2945 -2944 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '2946'
c Var 'aux696' direct represents '0' with '2946'
c Var 'aux696' order represents '1' with '2947'
-2946 2947 0
c Var 'aux696' direct represents '1' with '2948'
2946 -2947 2948 0
-2948 2947 0
-2948 -2946 0
c Var 'aux696' direct represents '2' with '-2947'
2946 2948 -2947 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '2949'
c Var 'aux697' direct represents '0' with '2949'
c Var 'aux697' order represents '1' with '2950'
-2949 2950 0
c Var 'aux697' direct represents '1' with '2951'
2949 -2950 2951 0
-2951 2950 0
-2951 -2949 0
c Var 'aux697' direct represents '2' with '-2950'
2949 2951 -2950 0
c Encoding variable: aux698 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '2952'
c Var 'aux698' direct represents '0' with '2952'
c Var 'aux698' order represents '1' with '2953'
-2952 2953 0
c Var 'aux698' direct represents '1' with '2954'
2952 -2953 2954 0
-2954 2953 0
-2954 -2952 0
c Var 'aux698' direct represents '2' with '-2953'
2952 2954 -2953 0
c Encoding variable: aux699 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '2955'
c Var 'aux699' direct represents '0' with '2955'
c Var 'aux699' order represents '1' with '2956'
-2955 2956 0
c Var 'aux699' direct represents '1' with '2957'
2955 -2956 2957 0
-2957 2956 0
-2957 -2955 0
c Var 'aux699' direct represents '2' with '-2956'
2955 2957 -2956 0
c Encoding variable: aux700 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux699))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '2958'
c Var 'aux700' direct represents '0' with '2958'
c Var 'aux700' order represents '1' with '2959'
-2958 2959 0
c Var 'aux700' direct represents '1' with '2960'
2958 -2959 2960 0
-2960 2959 0
-2960 -2958 0
c Var 'aux700' order represents '2' with '2961'
-2959 2961 0
c Var 'aux700' direct represents '2' with '2962'
2959 -2961 2962 0
-2962 2961 0
-2962 -2959 0
c Var 'aux700' direct represents '3' with '-2961'
2958 2960 2962 -2961 0
c Encoding variable: aux701 with domain: int(0..4) (representing constraint (aux696 + aux698))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '2963'
c Var 'aux701' direct represents '0' with '2963'
c Var 'aux701' order represents '1' with '2964'
-2963 2964 0
c Var 'aux701' direct represents '1' with '2965'
2963 -2964 2965 0
-2965 2964 0
-2965 -2963 0
c Var 'aux701' order represents '2' with '2966'
-2964 2966 0
c Var 'aux701' direct represents '2' with '2967'
2964 -2966 2967 0
-2967 2966 0
-2967 -2964 0
c Var 'aux701' order represents '3' with '2968'
-2966 2968 0
c Var 'aux701' direct represents '3' with '2969'
2966 -2968 2969 0
-2969 2968 0
-2969 -2966 0
c Var 'aux701' direct represents '4' with '-2968'
2963 2965 2967 2969 -2968 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '2970'
c Var 'aux702' direct represents '0' with '2970'
c Var 'aux702' order represents '1' with '2971'
-2970 2971 0
c Var 'aux702' direct represents '1' with '2972'
2970 -2971 2972 0
-2972 2971 0
-2972 -2970 0
c Var 'aux702' direct represents '2' with '-2971'
2970 2972 -2971 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '2973'
c Var 'aux703' direct represents '0' with '2973'
c Var 'aux703' order represents '1' with '2974'
-2973 2974 0
c Var 'aux703' direct represents '1' with '2975'
2973 -2974 2975 0
-2975 2974 0
-2975 -2973 0
c Var 'aux703' direct represents '2' with '-2974'
2973 2975 -2974 0
c Encoding variable: aux704 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '2976'
c Var 'aux704' direct represents '0' with '2976'
c Var 'aux704' order represents '1' with '2977'
-2976 2977 0
c Var 'aux704' direct represents '1' with '2978'
2976 -2977 2978 0
-2978 2977 0
-2978 -2976 0
c Var 'aux704' direct represents '2' with '-2977'
2976 2978 -2977 0
c Encoding variable: aux705 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '2979'
c Var 'aux705' direct represents '0' with '2979'
c Var 'aux705' order represents '1' with '2980'
-2979 2980 0
c Var 'aux705' direct represents '1' with '2981'
2979 -2980 2981 0
-2981 2980 0
-2981 -2979 0
c Var 'aux705' direct represents '2' with '-2980'
2979 2981 -2980 0
c Encoding variable: aux706 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux705))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '2982'
c Var 'aux706' direct represents '0' with '2982'
c Var 'aux706' order represents '1' with '2983'
-2982 2983 0
c Var 'aux706' direct represents '1' with '2984'
2982 -2983 2984 0
-2984 2983 0
-2984 -2982 0
c Var 'aux706' order represents '2' with '2985'
-2983 2985 0
c Var 'aux706' direct represents '2' with '2986'
2983 -2985 2986 0
-2986 2985 0
-2986 -2983 0
c Var 'aux706' direct represents '3' with '-2985'
2982 2984 2986 -2985 0
c Encoding variable: aux707 with domain: int(0..4) (representing constraint (aux702 + aux704))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '2987'
c Var 'aux707' direct represents '0' with '2987'
c Var 'aux707' order represents '1' with '2988'
-2987 2988 0
c Var 'aux707' direct represents '1' with '2989'
2987 -2988 2989 0
-2989 2988 0
-2989 -2987 0
c Var 'aux707' order represents '2' with '2990'
-2988 2990 0
c Var 'aux707' direct represents '2' with '2991'
2988 -2990 2991 0
-2991 2990 0
-2991 -2988 0
c Var 'aux707' order represents '3' with '2992'
-2990 2992 0
c Var 'aux707' direct represents '3' with '2993'
2990 -2992 2993 0
-2993 2992 0
-2993 -2990 0
c Var 'aux707' direct represents '4' with '-2992'
2987 2989 2991 2993 -2992 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '2994'
c Var 'aux708' direct represents '0' with '2994'
c Var 'aux708' order represents '1' with '2995'
-2994 2995 0
c Var 'aux708' direct represents '1' with '2996'
2994 -2995 2996 0
-2996 2995 0
-2996 -2994 0
c Var 'aux708' direct represents '2' with '-2995'
2994 2996 -2995 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '2997'
c Var 'aux709' direct represents '0' with '2997'
c Var 'aux709' order represents '1' with '2998'
-2997 2998 0
c Var 'aux709' direct represents '1' with '2999'
2997 -2998 2999 0
-2999 2998 0
-2999 -2997 0
c Var 'aux709' direct represents '2' with '-2998'
2997 2999 -2998 0
c Encoding variable: aux710 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '3000'
c Var 'aux710' direct represents '0' with '3000'
c Var 'aux710' order represents '1' with '3001'
-3000 3001 0
c Var 'aux710' direct represents '1' with '3002'
3000 -3001 3002 0
-3002 3001 0
-3002 -3000 0
c Var 'aux710' direct represents '2' with '-3001'
3000 3002 -3001 0
c Encoding variable: aux711 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '3003'
c Var 'aux711' direct represents '0' with '3003'
c Var 'aux711' order represents '1' with '3004'
-3003 3004 0
c Var 'aux711' direct represents '1' with '3005'
3003 -3004 3005 0
-3005 3004 0
-3005 -3003 0
c Var 'aux711' direct represents '2' with '-3004'
3003 3005 -3004 0
c Encoding variable: aux712 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux711))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '3006'
c Var 'aux712' direct represents '0' with '3006'
c Var 'aux712' order represents '1' with '3007'
-3006 3007 0
c Var 'aux712' direct represents '1' with '3008'
3006 -3007 3008 0
-3008 3007 0
-3008 -3006 0
c Var 'aux712' order represents '2' with '3009'
-3007 3009 0
c Var 'aux712' direct represents '2' with '3010'
3007 -3009 3010 0
-3010 3009 0
-3010 -3007 0
c Var 'aux712' direct represents '3' with '-3009'
3006 3008 3010 -3009 0
c Encoding variable: aux713 with domain: int(0..4) (representing constraint (aux708 + aux710))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '3011'
c Var 'aux713' direct represents '0' with '3011'
c Var 'aux713' order represents '1' with '3012'
-3011 3012 0
c Var 'aux713' direct represents '1' with '3013'
3011 -3012 3013 0
-3013 3012 0
-3013 -3011 0
c Var 'aux713' order represents '2' with '3014'
-3012 3014 0
c Var 'aux713' direct represents '2' with '3015'
3012 -3014 3015 0
-3015 3014 0
-3015 -3012 0
c Var 'aux713' order represents '3' with '3016'
-3014 3016 0
c Var 'aux713' direct represents '3' with '3017'
3014 -3016 3017 0
-3017 3016 0
-3017 -3014 0
c Var 'aux713' direct represents '4' with '-3016'
3011 3013 3015 3017 -3016 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '3018'
c Var 'aux714' direct represents '0' with '3018'
c Var 'aux714' order represents '1' with '3019'
-3018 3019 0
c Var 'aux714' direct represents '1' with '3020'
3018 -3019 3020 0
-3020 3019 0
-3020 -3018 0
c Var 'aux714' direct represents '2' with '-3019'
3018 3020 -3019 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '3021'
c Var 'aux715' direct represents '0' with '3021'
c Var 'aux715' order represents '1' with '3022'
-3021 3022 0
c Var 'aux715' direct represents '1' with '3023'
3021 -3022 3023 0
-3023 3022 0
-3023 -3021 0
c Var 'aux715' direct represents '2' with '-3022'
3021 3023 -3022 0
c Encoding variable: aux716 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '3024'
c Var 'aux716' direct represents '0' with '3024'
c Var 'aux716' order represents '1' with '3025'
-3024 3025 0
c Var 'aux716' direct represents '1' with '3026'
3024 -3025 3026 0
-3026 3025 0
-3026 -3024 0
c Var 'aux716' direct represents '2' with '-3025'
3024 3026 -3025 0
c Encoding variable: aux717 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '3027'
c Var 'aux717' direct represents '0' with '3027'
c Var 'aux717' order represents '1' with '3028'
-3027 3028 0
c Var 'aux717' direct represents '1' with '3029'
3027 -3028 3029 0
-3029 3028 0
-3029 -3027 0
c Var 'aux717' direct represents '2' with '-3028'
3027 3029 -3028 0
c Encoding variable: aux718 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux717))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '3030'
c Var 'aux718' direct represents '0' with '3030'
c Var 'aux718' order represents '1' with '3031'
-3030 3031 0
c Var 'aux718' direct represents '1' with '3032'
3030 -3031 3032 0
-3032 3031 0
-3032 -3030 0
c Var 'aux718' order represents '2' with '3033'
-3031 3033 0
c Var 'aux718' direct represents '2' with '3034'
3031 -3033 3034 0
-3034 3033 0
-3034 -3031 0
c Var 'aux718' direct represents '3' with '-3033'
3030 3032 3034 -3033 0
c Encoding variable: aux719 with domain: int(0..4) (representing constraint (aux714 + aux716))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '3035'
c Var 'aux719' direct represents '0' with '3035'
c Var 'aux719' order represents '1' with '3036'
-3035 3036 0
c Var 'aux719' direct represents '1' with '3037'
3035 -3036 3037 0
-3037 3036 0
-3037 -3035 0
c Var 'aux719' order represents '2' with '3038'
-3036 3038 0
c Var 'aux719' direct represents '2' with '3039'
3036 -3038 3039 0
-3039 3038 0
-3039 -3036 0
c Var 'aux719' order represents '3' with '3040'
-3038 3040 0
c Var 'aux719' direct represents '3' with '3041'
3038 -3040 3041 0
-3041 3040 0
-3041 -3038 0
c Var 'aux719' direct represents '4' with '-3040'
3035 3037 3039 3041 -3040 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '3042'
c Var 'aux720' direct represents '0' with '3042'
c Var 'aux720' order represents '1' with '3043'
-3042 3043 0
c Var 'aux720' direct represents '1' with '3044'
3042 -3043 3044 0
-3044 3043 0
-3044 -3042 0
c Var 'aux720' direct represents '2' with '-3043'
3042 3044 -3043 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '3045'
c Var 'aux721' direct represents '0' with '3045'
c Var 'aux721' order represents '1' with '3046'
-3045 3046 0
c Var 'aux721' direct represents '1' with '3047'
3045 -3046 3047 0
-3047 3046 0
-3047 -3045 0
c Var 'aux721' direct represents '2' with '-3046'
3045 3047 -3046 0
c Encoding variable: aux722 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '3048'
c Var 'aux722' direct represents '0' with '3048'
c Var 'aux722' order represents '1' with '3049'
-3048 3049 0
c Var 'aux722' direct represents '1' with '3050'
3048 -3049 3050 0
-3050 3049 0
-3050 -3048 0
c Var 'aux722' direct represents '2' with '-3049'
3048 3050 -3049 0
c Encoding variable: aux723 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '3051'
c Var 'aux723' direct represents '0' with '3051'
c Var 'aux723' order represents '1' with '3052'
-3051 3052 0
c Var 'aux723' direct represents '1' with '3053'
3051 -3052 3053 0
-3053 3052 0
-3053 -3051 0
c Var 'aux723' direct represents '2' with '-3052'
3051 3053 -3052 0
c Encoding variable: aux724 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux723))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '3054'
c Var 'aux724' direct represents '0' with '3054'
c Var 'aux724' order represents '1' with '3055'
-3054 3055 0
c Var 'aux724' direct represents '1' with '3056'
3054 -3055 3056 0
-3056 3055 0
-3056 -3054 0
c Var 'aux724' order represents '2' with '3057'
-3055 3057 0
c Var 'aux724' direct represents '2' with '3058'
3055 -3057 3058 0
-3058 3057 0
-3058 -3055 0
c Var 'aux724' direct represents '3' with '-3057'
3054 3056 3058 -3057 0
c Encoding variable: aux725 with domain: int(0..4) (representing constraint (aux720 + aux722))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '3059'
c Var 'aux725' direct represents '0' with '3059'
c Var 'aux725' order represents '1' with '3060'
-3059 3060 0
c Var 'aux725' direct represents '1' with '3061'
3059 -3060 3061 0
-3061 3060 0
-3061 -3059 0
c Var 'aux725' order represents '2' with '3062'
-3060 3062 0
c Var 'aux725' direct represents '2' with '3063'
3060 -3062 3063 0
-3063 3062 0
-3063 -3060 0
c Var 'aux725' order represents '3' with '3064'
-3062 3064 0
c Var 'aux725' direct represents '3' with '3065'
3062 -3064 3065 0
-3065 3064 0
-3065 -3062 0
c Var 'aux725' direct represents '4' with '-3064'
3059 3061 3063 3065 -3064 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '3066'
c Var 'aux726' direct represents '0' with '3066'
c Var 'aux726' order represents '1' with '3067'
-3066 3067 0
c Var 'aux726' direct represents '1' with '3068'
3066 -3067 3068 0
-3068 3067 0
-3068 -3066 0
c Var 'aux726' direct represents '2' with '-3067'
3066 3068 -3067 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '3069'
c Var 'aux727' direct represents '0' with '3069'
c Var 'aux727' order represents '1' with '3070'
-3069 3070 0
c Var 'aux727' direct represents '1' with '3071'
3069 -3070 3071 0
-3071 3070 0
-3071 -3069 0
c Var 'aux727' direct represents '2' with '-3070'
3069 3071 -3070 0
c Encoding variable: aux728 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '3072'
c Var 'aux728' direct represents '0' with '3072'
c Var 'aux728' order represents '1' with '3073'
-3072 3073 0
c Var 'aux728' direct represents '1' with '3074'
3072 -3073 3074 0
-3074 3073 0
-3074 -3072 0
c Var 'aux728' direct represents '2' with '-3073'
3072 3074 -3073 0
c Encoding variable: aux729 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '3075'
c Var 'aux729' direct represents '0' with '3075'
c Var 'aux729' order represents '1' with '3076'
-3075 3076 0
c Var 'aux729' direct represents '1' with '3077'
3075 -3076 3077 0
-3077 3076 0
-3077 -3075 0
c Var 'aux729' direct represents '2' with '-3076'
3075 3077 -3076 0
c Encoding variable: aux730 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux729))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '3078'
c Var 'aux730' direct represents '0' with '3078'
c Var 'aux730' order represents '1' with '3079'
-3078 3079 0
c Var 'aux730' direct represents '1' with '3080'
3078 -3079 3080 0
-3080 3079 0
-3080 -3078 0
c Var 'aux730' order represents '2' with '3081'
-3079 3081 0
c Var 'aux730' direct represents '2' with '3082'
3079 -3081 3082 0
-3082 3081 0
-3082 -3079 0
c Var 'aux730' direct represents '3' with '-3081'
3078 3080 3082 -3081 0
c Encoding variable: aux731 with domain: int(0..4) (representing constraint (aux726 + aux728))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '3083'
c Var 'aux731' direct represents '0' with '3083'
c Var 'aux731' order represents '1' with '3084'
-3083 3084 0
c Var 'aux731' direct represents '1' with '3085'
3083 -3084 3085 0
-3085 3084 0
-3085 -3083 0
c Var 'aux731' order represents '2' with '3086'
-3084 3086 0
c Var 'aux731' direct represents '2' with '3087'
3084 -3086 3087 0
-3087 3086 0
-3087 -3084 0
c Var 'aux731' order represents '3' with '3088'
-3086 3088 0
c Var 'aux731' direct represents '3' with '3089'
3086 -3088 3089 0
-3089 3088 0
-3089 -3086 0
c Var 'aux731' direct represents '4' with '-3088'
3083 3085 3087 3089 -3088 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '3090'
c Var 'aux732' direct represents '0' with '3090'
c Var 'aux732' order represents '1' with '3091'
-3090 3091 0
c Var 'aux732' direct represents '1' with '3092'
3090 -3091 3092 0
-3092 3091 0
-3092 -3090 0
c Var 'aux732' direct represents '2' with '-3091'
3090 3092 -3091 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '3093'
c Var 'aux733' direct represents '0' with '3093'
c Var 'aux733' order represents '1' with '3094'
-3093 3094 0
c Var 'aux733' direct represents '1' with '3095'
3093 -3094 3095 0
-3095 3094 0
-3095 -3093 0
c Var 'aux733' direct represents '2' with '-3094'
3093 3095 -3094 0
c Encoding variable: aux734 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '3096'
c Var 'aux734' direct represents '0' with '3096'
c Var 'aux734' order represents '1' with '3097'
-3096 3097 0
c Var 'aux734' direct represents '1' with '3098'
3096 -3097 3098 0
-3098 3097 0
-3098 -3096 0
c Var 'aux734' direct represents '2' with '-3097'
3096 3098 -3097 0
c Encoding variable: aux735 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '3099'
c Var 'aux735' direct represents '0' with '3099'
c Var 'aux735' order represents '1' with '3100'
-3099 3100 0
c Var 'aux735' direct represents '1' with '3101'
3099 -3100 3101 0
-3101 3100 0
-3101 -3099 0
c Var 'aux735' direct represents '2' with '-3100'
3099 3101 -3100 0
c Encoding variable: aux736 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux735))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '3102'
c Var 'aux736' direct represents '0' with '3102'
c Var 'aux736' order represents '1' with '3103'
-3102 3103 0
c Var 'aux736' direct represents '1' with '3104'
3102 -3103 3104 0
-3104 3103 0
-3104 -3102 0
c Var 'aux736' order represents '2' with '3105'
-3103 3105 0
c Var 'aux736' direct represents '2' with '3106'
3103 -3105 3106 0
-3106 3105 0
-3106 -3103 0
c Var 'aux736' direct represents '3' with '-3105'
3102 3104 3106 -3105 0
c Encoding variable: aux737 with domain: int(0..4) (representing constraint (aux732 + aux734))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '3107'
c Var 'aux737' direct represents '0' with '3107'
c Var 'aux737' order represents '1' with '3108'
-3107 3108 0
c Var 'aux737' direct represents '1' with '3109'
3107 -3108 3109 0
-3109 3108 0
-3109 -3107 0
c Var 'aux737' order represents '2' with '3110'
-3108 3110 0
c Var 'aux737' direct represents '2' with '3111'
3108 -3110 3111 0
-3111 3110 0
-3111 -3108 0
c Var 'aux737' order represents '3' with '3112'
-3110 3112 0
c Var 'aux737' direct represents '3' with '3113'
3110 -3112 3113 0
-3113 3112 0
-3113 -3110 0
c Var 'aux737' direct represents '4' with '-3112'
3107 3109 3111 3113 -3112 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3114'
c Var 'aux738' direct represents '0' with '3114'
c Var 'aux738' order represents '1' with '3115'
-3114 3115 0
c Var 'aux738' direct represents '1' with '3116'
3114 -3115 3116 0
-3116 3115 0
-3116 -3114 0
c Var 'aux738' direct represents '2' with '-3115'
3114 3116 -3115 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3117'
c Var 'aux739' direct represents '0' with '3117'
c Var 'aux739' order represents '1' with '3118'
-3117 3118 0
c Var 'aux739' direct represents '1' with '3119'
3117 -3118 3119 0
-3119 3118 0
-3119 -3117 0
c Var 'aux739' direct represents '2' with '-3118'
3117 3119 -3118 0
c Encoding variable: aux740 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3120'
c Var 'aux740' direct represents '0' with '3120'
c Var 'aux740' order represents '1' with '3121'
-3120 3121 0
c Var 'aux740' direct represents '1' with '3122'
3120 -3121 3122 0
-3122 3121 0
-3122 -3120 0
c Var 'aux740' direct represents '2' with '-3121'
3120 3122 -3121 0
c Encoding variable: aux741 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3123'
c Var 'aux741' direct represents '0' with '3123'
c Var 'aux741' order represents '1' with '3124'
-3123 3124 0
c Var 'aux741' direct represents '1' with '3125'
3123 -3124 3125 0
-3125 3124 0
-3125 -3123 0
c Var 'aux741' direct represents '2' with '-3124'
3123 3125 -3124 0
c Encoding variable: aux742 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux741))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3126'
c Var 'aux742' direct represents '0' with '3126'
c Var 'aux742' order represents '1' with '3127'
-3126 3127 0
c Var 'aux742' direct represents '1' with '3128'
3126 -3127 3128 0
-3128 3127 0
-3128 -3126 0
c Var 'aux742' order represents '2' with '3129'
-3127 3129 0
c Var 'aux742' direct represents '2' with '3130'
3127 -3129 3130 0
-3130 3129 0
-3130 -3127 0
c Var 'aux742' direct represents '3' with '-3129'
3126 3128 3130 -3129 0
c Encoding variable: aux743 with domain: int(0..4) (representing constraint (aux738 + aux740))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3131'
c Var 'aux743' direct represents '0' with '3131'
c Var 'aux743' order represents '1' with '3132'
-3131 3132 0
c Var 'aux743' direct represents '1' with '3133'
3131 -3132 3133 0
-3133 3132 0
-3133 -3131 0
c Var 'aux743' order represents '2' with '3134'
-3132 3134 0
c Var 'aux743' direct represents '2' with '3135'
3132 -3134 3135 0
-3135 3134 0
-3135 -3132 0
c Var 'aux743' order represents '3' with '3136'
-3134 3136 0
c Var 'aux743' direct represents '3' with '3137'
3134 -3136 3137 0
-3137 3136 0
-3137 -3134 0
c Var 'aux743' direct represents '4' with '-3136'
3131 3133 3135 3137 -3136 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3138'
c Var 'aux744' direct represents '0' with '3138'
c Var 'aux744' order represents '1' with '3139'
-3138 3139 0
c Var 'aux744' direct represents '1' with '3140'
3138 -3139 3140 0
-3140 3139 0
-3140 -3138 0
c Var 'aux744' direct represents '2' with '-3139'
3138 3140 -3139 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3141'
c Var 'aux745' direct represents '0' with '3141'
c Var 'aux745' order represents '1' with '3142'
-3141 3142 0
c Var 'aux745' direct represents '1' with '3143'
3141 -3142 3143 0
-3143 3142 0
-3143 -3141 0
c Var 'aux745' direct represents '2' with '-3142'
3141 3143 -3142 0
c Encoding variable: aux746 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3144'
c Var 'aux746' direct represents '0' with '3144'
c Var 'aux746' order represents '1' with '3145'
-3144 3145 0
c Var 'aux746' direct represents '1' with '3146'
3144 -3145 3146 0
-3146 3145 0
-3146 -3144 0
c Var 'aux746' direct represents '2' with '-3145'
3144 3146 -3145 0
c Encoding variable: aux747 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3147'
c Var 'aux747' direct represents '0' with '3147'
c Var 'aux747' order represents '1' with '3148'
-3147 3148 0
c Var 'aux747' direct represents '1' with '3149'
3147 -3148 3149 0
-3149 3148 0
-3149 -3147 0
c Var 'aux747' direct represents '2' with '-3148'
3147 3149 -3148 0
c Encoding variable: aux748 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux747))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3150'
c Var 'aux748' direct represents '0' with '3150'
c Var 'aux748' order represents '1' with '3151'
-3150 3151 0
c Var 'aux748' direct represents '1' with '3152'
3150 -3151 3152 0
-3152 3151 0
-3152 -3150 0
c Var 'aux748' order represents '2' with '3153'
-3151 3153 0
c Var 'aux748' direct represents '2' with '3154'
3151 -3153 3154 0
-3154 3153 0
-3154 -3151 0
c Var 'aux748' direct represents '3' with '-3153'
3150 3152 3154 -3153 0
c Encoding variable: aux749 with domain: int(0..4) (representing constraint (aux744 + aux746))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3155'
c Var 'aux749' direct represents '0' with '3155'
c Var 'aux749' order represents '1' with '3156'
-3155 3156 0
c Var 'aux749' direct represents '1' with '3157'
3155 -3156 3157 0
-3157 3156 0
-3157 -3155 0
c Var 'aux749' order represents '2' with '3158'
-3156 3158 0
c Var 'aux749' direct represents '2' with '3159'
3156 -3158 3159 0
-3159 3158 0
-3159 -3156 0
c Var 'aux749' order represents '3' with '3160'
-3158 3160 0
c Var 'aux749' direct represents '3' with '3161'
3158 -3160 3161 0
-3161 3160 0
-3161 -3158 0
c Var 'aux749' direct represents '4' with '-3160'
3155 3157 3159 3161 -3160 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3162'
c Var 'aux750' direct represents '0' with '3162'
c Var 'aux750' order represents '1' with '3163'
-3162 3163 0
c Var 'aux750' direct represents '1' with '3164'
3162 -3163 3164 0
-3164 3163 0
-3164 -3162 0
c Var 'aux750' direct represents '2' with '-3163'
3162 3164 -3163 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3165'
c Var 'aux751' direct represents '0' with '3165'
c Var 'aux751' order represents '1' with '3166'
-3165 3166 0
c Var 'aux751' direct represents '1' with '3167'
3165 -3166 3167 0
-3167 3166 0
-3167 -3165 0
c Var 'aux751' direct represents '2' with '-3166'
3165 3167 -3166 0
c Encoding variable: aux752 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3168'
c Var 'aux752' direct represents '0' with '3168'
c Var 'aux752' order represents '1' with '3169'
-3168 3169 0
c Var 'aux752' direct represents '1' with '3170'
3168 -3169 3170 0
-3170 3169 0
-3170 -3168 0
c Var 'aux752' direct represents '2' with '-3169'
3168 3170 -3169 0
c Encoding variable: aux753 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3171'
c Var 'aux753' direct represents '0' with '3171'
c Var 'aux753' order represents '1' with '3172'
-3171 3172 0
c Var 'aux753' direct represents '1' with '3173'
3171 -3172 3173 0
-3173 3172 0
-3173 -3171 0
c Var 'aux753' direct represents '2' with '-3172'
3171 3173 -3172 0
c Encoding variable: aux754 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux753))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3174'
c Var 'aux754' direct represents '0' with '3174'
c Var 'aux754' order represents '1' with '3175'
-3174 3175 0
c Var 'aux754' direct represents '1' with '3176'
3174 -3175 3176 0
-3176 3175 0
-3176 -3174 0
c Var 'aux754' order represents '2' with '3177'
-3175 3177 0
c Var 'aux754' direct represents '2' with '3178'
3175 -3177 3178 0
-3178 3177 0
-3178 -3175 0
c Var 'aux754' direct represents '3' with '-3177'
3174 3176 3178 -3177 0
c Encoding variable: aux755 with domain: int(0..4) (representing constraint (aux750 + aux752))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3179'
c Var 'aux755' direct represents '0' with '3179'
c Var 'aux755' order represents '1' with '3180'
-3179 3180 0
c Var 'aux755' direct represents '1' with '3181'
3179 -3180 3181 0
-3181 3180 0
-3181 -3179 0
c Var 'aux755' order represents '2' with '3182'
-3180 3182 0
c Var 'aux755' direct represents '2' with '3183'
3180 -3182 3183 0
-3183 3182 0
-3183 -3180 0
c Var 'aux755' order represents '3' with '3184'
-3182 3184 0
c Var 'aux755' direct represents '3' with '3185'
3182 -3184 3185 0
-3185 3184 0
-3185 -3182 0
c Var 'aux755' direct represents '4' with '-3184'
3179 3181 3183 3185 -3184 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3186'
c Var 'aux756' direct represents '0' with '3186'
c Var 'aux756' order represents '1' with '3187'
-3186 3187 0
c Var 'aux756' direct represents '1' with '3188'
3186 -3187 3188 0
-3188 3187 0
-3188 -3186 0
c Var 'aux756' direct represents '2' with '-3187'
3186 3188 -3187 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3189'
c Var 'aux757' direct represents '0' with '3189'
c Var 'aux757' order represents '1' with '3190'
-3189 3190 0
c Var 'aux757' direct represents '1' with '3191'
3189 -3190 3191 0
-3191 3190 0
-3191 -3189 0
c Var 'aux757' direct represents '2' with '-3190'
3189 3191 -3190 0
c Encoding variable: aux758 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3192'
c Var 'aux758' direct represents '0' with '3192'
c Var 'aux758' order represents '1' with '3193'
-3192 3193 0
c Var 'aux758' direct represents '1' with '3194'
3192 -3193 3194 0
-3194 3193 0
-3194 -3192 0
c Var 'aux758' direct represents '2' with '-3193'
3192 3194 -3193 0
c Encoding variable: aux759 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3195'
c Var 'aux759' direct represents '0' with '3195'
c Var 'aux759' order represents '1' with '3196'
-3195 3196 0
c Var 'aux759' direct represents '1' with '3197'
3195 -3196 3197 0
-3197 3196 0
-3197 -3195 0
c Var 'aux759' direct represents '2' with '-3196'
3195 3197 -3196 0
c Encoding variable: aux760 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux759))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3198'
c Var 'aux760' direct represents '0' with '3198'
c Var 'aux760' order represents '1' with '3199'
-3198 3199 0
c Var 'aux760' direct represents '1' with '3200'
3198 -3199 3200 0
-3200 3199 0
-3200 -3198 0
c Var 'aux760' order represents '2' with '3201'
-3199 3201 0
c Var 'aux760' direct represents '2' with '3202'
3199 -3201 3202 0
-3202 3201 0
-3202 -3199 0
c Var 'aux760' direct represents '3' with '-3201'
3198 3200 3202 -3201 0
c Encoding variable: aux761 with domain: int(0..4) (representing constraint (aux756 + aux758))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3203'
c Var 'aux761' direct represents '0' with '3203'
c Var 'aux761' order represents '1' with '3204'
-3203 3204 0
c Var 'aux761' direct represents '1' with '3205'
3203 -3204 3205 0
-3205 3204 0
-3205 -3203 0
c Var 'aux761' order represents '2' with '3206'
-3204 3206 0
c Var 'aux761' direct represents '2' with '3207'
3204 -3206 3207 0
-3207 3206 0
-3207 -3204 0
c Var 'aux761' order represents '3' with '3208'
-3206 3208 0
c Var 'aux761' direct represents '3' with '3209'
3206 -3208 3209 0
-3209 3208 0
-3209 -3206 0
c Var 'aux761' direct represents '4' with '-3208'
3203 3205 3207 3209 -3208 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3210'
c Var 'aux762' direct represents '0' with '3210'
c Var 'aux762' order represents '1' with '3211'
-3210 3211 0
c Var 'aux762' direct represents '1' with '3212'
3210 -3211 3212 0
-3212 3211 0
-3212 -3210 0
c Var 'aux762' direct represents '2' with '-3211'
3210 3212 -3211 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3213'
c Var 'aux763' direct represents '0' with '3213'
c Var 'aux763' order represents '1' with '3214'
-3213 3214 0
c Var 'aux763' direct represents '1' with '3215'
3213 -3214 3215 0
-3215 3214 0
-3215 -3213 0
c Var 'aux763' direct represents '2' with '-3214'
3213 3215 -3214 0
c Encoding variable: aux764 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3216'
c Var 'aux764' direct represents '0' with '3216'
c Var 'aux764' order represents '1' with '3217'
-3216 3217 0
c Var 'aux764' direct represents '1' with '3218'
3216 -3217 3218 0
-3218 3217 0
-3218 -3216 0
c Var 'aux764' direct represents '2' with '-3217'
3216 3218 -3217 0
c Encoding variable: aux765 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3219'
c Var 'aux765' direct represents '0' with '3219'
c Var 'aux765' order represents '1' with '3220'
-3219 3220 0
c Var 'aux765' direct represents '1' with '3221'
3219 -3220 3221 0
-3221 3220 0
-3221 -3219 0
c Var 'aux765' direct represents '2' with '-3220'
3219 3221 -3220 0
c Encoding variable: aux766 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux765))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3222'
c Var 'aux766' direct represents '0' with '3222'
c Var 'aux766' order represents '1' with '3223'
-3222 3223 0
c Var 'aux766' direct represents '1' with '3224'
3222 -3223 3224 0
-3224 3223 0
-3224 -3222 0
c Var 'aux766' order represents '2' with '3225'
-3223 3225 0
c Var 'aux766' direct represents '2' with '3226'
3223 -3225 3226 0
-3226 3225 0
-3226 -3223 0
c Var 'aux766' direct represents '3' with '-3225'
3222 3224 3226 -3225 0
c Encoding variable: aux767 with domain: int(0..4) (representing constraint (aux762 + aux764))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3227'
c Var 'aux767' direct represents '0' with '3227'
c Var 'aux767' order represents '1' with '3228'
-3227 3228 0
c Var 'aux767' direct represents '1' with '3229'
3227 -3228 3229 0
-3229 3228 0
-3229 -3227 0
c Var 'aux767' order represents '2' with '3230'
-3228 3230 0
c Var 'aux767' direct represents '2' with '3231'
3228 -3230 3231 0
-3231 3230 0
-3231 -3228 0
c Var 'aux767' order represents '3' with '3232'
-3230 3232 0
c Var 'aux767' direct represents '3' with '3233'
3230 -3232 3233 0
-3233 3232 0
-3233 -3230 0
c Var 'aux767' direct represents '4' with '-3232'
3227 3229 3231 3233 -3232 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3234'
c Var 'aux768' direct represents '0' with '3234'
c Var 'aux768' order represents '1' with '3235'
-3234 3235 0
c Var 'aux768' direct represents '1' with '3236'
3234 -3235 3236 0
-3236 3235 0
-3236 -3234 0
c Var 'aux768' direct represents '2' with '-3235'
3234 3236 -3235 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3237'
c Var 'aux769' direct represents '0' with '3237'
c Var 'aux769' order represents '1' with '3238'
-3237 3238 0
c Var 'aux769' direct represents '1' with '3239'
3237 -3238 3239 0
-3239 3238 0
-3239 -3237 0
c Var 'aux769' direct represents '2' with '-3238'
3237 3239 -3238 0
c Encoding variable: aux770 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3240'
c Var 'aux770' direct represents '0' with '3240'
c Var 'aux770' order represents '1' with '3241'
-3240 3241 0
c Var 'aux770' direct represents '1' with '3242'
3240 -3241 3242 0
-3242 3241 0
-3242 -3240 0
c Var 'aux770' direct represents '2' with '-3241'
3240 3242 -3241 0
c Encoding variable: aux771 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3243'
c Var 'aux771' direct represents '0' with '3243'
c Var 'aux771' order represents '1' with '3244'
-3243 3244 0
c Var 'aux771' direct represents '1' with '3245'
3243 -3244 3245 0
-3245 3244 0
-3245 -3243 0
c Var 'aux771' direct represents '2' with '-3244'
3243 3245 -3244 0
c Encoding variable: aux772 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux771))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3246'
c Var 'aux772' direct represents '0' with '3246'
c Var 'aux772' order represents '1' with '3247'
-3246 3247 0
c Var 'aux772' direct represents '1' with '3248'
3246 -3247 3248 0
-3248 3247 0
-3248 -3246 0
c Var 'aux772' order represents '2' with '3249'
-3247 3249 0
c Var 'aux772' direct represents '2' with '3250'
3247 -3249 3250 0
-3250 3249 0
-3250 -3247 0
c Var 'aux772' direct represents '3' with '-3249'
3246 3248 3250 -3249 0
c Encoding variable: aux773 with domain: int(0..4) (representing constraint (aux768 + aux770))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3251'
c Var 'aux773' direct represents '0' with '3251'
c Var 'aux773' order represents '1' with '3252'
-3251 3252 0
c Var 'aux773' direct represents '1' with '3253'
3251 -3252 3253 0
-3253 3252 0
-3253 -3251 0
c Var 'aux773' order represents '2' with '3254'
-3252 3254 0
c Var 'aux773' direct represents '2' with '3255'
3252 -3254 3255 0
-3255 3254 0
-3255 -3252 0
c Var 'aux773' order represents '3' with '3256'
-3254 3256 0
c Var 'aux773' direct represents '3' with '3257'
3254 -3256 3257 0
-3257 3256 0
-3257 -3254 0
c Var 'aux773' direct represents '4' with '-3256'
3251 3253 3255 3257 -3256 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3258'
c Var 'aux774' direct represents '0' with '3258'
c Var 'aux774' order represents '1' with '3259'
-3258 3259 0
c Var 'aux774' direct represents '1' with '3260'
3258 -3259 3260 0
-3260 3259 0
-3260 -3258 0
c Var 'aux774' direct represents '2' with '-3259'
3258 3260 -3259 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3261'
c Var 'aux775' direct represents '0' with '3261'
c Var 'aux775' order represents '1' with '3262'
-3261 3262 0
c Var 'aux775' direct represents '1' with '3263'
3261 -3262 3263 0
-3263 3262 0
-3263 -3261 0
c Var 'aux775' direct represents '2' with '-3262'
3261 3263 -3262 0
c Encoding variable: aux776 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3264'
c Var 'aux776' direct represents '0' with '3264'
c Var 'aux776' order represents '1' with '3265'
-3264 3265 0
c Var 'aux776' direct represents '1' with '3266'
3264 -3265 3266 0
-3266 3265 0
-3266 -3264 0
c Var 'aux776' direct represents '2' with '-3265'
3264 3266 -3265 0
c Encoding variable: aux777 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3267'
c Var 'aux777' direct represents '0' with '3267'
c Var 'aux777' order represents '1' with '3268'
-3267 3268 0
c Var 'aux777' direct represents '1' with '3269'
3267 -3268 3269 0
-3269 3268 0
-3269 -3267 0
c Var 'aux777' direct represents '2' with '-3268'
3267 3269 -3268 0
c Encoding variable: aux778 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux777))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3270'
c Var 'aux778' direct represents '0' with '3270'
c Var 'aux778' order represents '1' with '3271'
-3270 3271 0
c Var 'aux778' direct represents '1' with '3272'
3270 -3271 3272 0
-3272 3271 0
-3272 -3270 0
c Var 'aux778' order represents '2' with '3273'
-3271 3273 0
c Var 'aux778' direct represents '2' with '3274'
3271 -3273 3274 0
-3274 3273 0
-3274 -3271 0
c Var 'aux778' direct represents '3' with '-3273'
3270 3272 3274 -3273 0
c Encoding variable: aux779 with domain: int(0..4) (representing constraint (aux774 + aux776))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3275'
c Var 'aux779' direct represents '0' with '3275'
c Var 'aux779' order represents '1' with '3276'
-3275 3276 0
c Var 'aux779' direct represents '1' with '3277'
3275 -3276 3277 0
-3277 3276 0
-3277 -3275 0
c Var 'aux779' order represents '2' with '3278'
-3276 3278 0
c Var 'aux779' direct represents '2' with '3279'
3276 -3278 3279 0
-3279 3278 0
-3279 -3276 0
c Var 'aux779' order represents '3' with '3280'
-3278 3280 0
c Var 'aux779' direct represents '3' with '3281'
3278 -3280 3281 0
-3281 3280 0
-3281 -3278 0
c Var 'aux779' direct represents '4' with '-3280'
3275 3277 3279 3281 -3280 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3282'
c Var 'aux780' direct represents '0' with '3282'
c Var 'aux780' order represents '1' with '3283'
-3282 3283 0
c Var 'aux780' direct represents '1' with '3284'
3282 -3283 3284 0
-3284 3283 0
-3284 -3282 0
c Var 'aux780' direct represents '2' with '-3283'
3282 3284 -3283 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3285'
c Var 'aux781' direct represents '0' with '3285'
c Var 'aux781' order represents '1' with '3286'
-3285 3286 0
c Var 'aux781' direct represents '1' with '3287'
3285 -3286 3287 0
-3287 3286 0
-3287 -3285 0
c Var 'aux781' direct represents '2' with '-3286'
3285 3287 -3286 0
c Encoding variable: aux782 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3288'
c Var 'aux782' direct represents '0' with '3288'
c Var 'aux782' order represents '1' with '3289'
-3288 3289 0
c Var 'aux782' direct represents '1' with '3290'
3288 -3289 3290 0
-3290 3289 0
-3290 -3288 0
c Var 'aux782' direct represents '2' with '-3289'
3288 3290 -3289 0
c Encoding variable: aux783 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3291'
c Var 'aux783' direct represents '0' with '3291'
c Var 'aux783' order represents '1' with '3292'
-3291 3292 0
c Var 'aux783' direct represents '1' with '3293'
3291 -3292 3293 0
-3293 3292 0
-3293 -3291 0
c Var 'aux783' direct represents '2' with '-3292'
3291 3293 -3292 0
c Encoding variable: aux784 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux783))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3294'
c Var 'aux784' direct represents '0' with '3294'
c Var 'aux784' order represents '1' with '3295'
-3294 3295 0
c Var 'aux784' direct represents '1' with '3296'
3294 -3295 3296 0
-3296 3295 0
-3296 -3294 0
c Var 'aux784' order represents '2' with '3297'
-3295 3297 0
c Var 'aux784' direct represents '2' with '3298'
3295 -3297 3298 0
-3298 3297 0
-3298 -3295 0
c Var 'aux784' direct represents '3' with '-3297'
3294 3296 3298 -3297 0
c Encoding variable: aux785 with domain: int(0..4) (representing constraint (aux780 + aux782))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3299'
c Var 'aux785' direct represents '0' with '3299'
c Var 'aux785' order represents '1' with '3300'
-3299 3300 0
c Var 'aux785' direct represents '1' with '3301'
3299 -3300 3301 0
-3301 3300 0
-3301 -3299 0
c Var 'aux785' order represents '2' with '3302'
-3300 3302 0
c Var 'aux785' direct represents '2' with '3303'
3300 -3302 3303 0
-3303 3302 0
-3303 -3300 0
c Var 'aux785' order represents '3' with '3304'
-3302 3304 0
c Var 'aux785' direct represents '3' with '3305'
3302 -3304 3305 0
-3305 3304 0
-3305 -3302 0
c Var 'aux785' direct represents '4' with '-3304'
3299 3301 3303 3305 -3304 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3306'
c Var 'aux786' direct represents '0' with '3306'
c Var 'aux786' order represents '1' with '3307'
-3306 3307 0
c Var 'aux786' direct represents '1' with '3308'
3306 -3307 3308 0
-3308 3307 0
-3308 -3306 0
c Var 'aux786' direct represents '2' with '-3307'
3306 3308 -3307 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3309'
c Var 'aux787' direct represents '0' with '3309'
c Var 'aux787' order represents '1' with '3310'
-3309 3310 0
c Var 'aux787' direct represents '1' with '3311'
3309 -3310 3311 0
-3311 3310 0
-3311 -3309 0
c Var 'aux787' direct represents '2' with '-3310'
3309 3311 -3310 0
c Encoding variable: aux788 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3312'
c Var 'aux788' direct represents '0' with '3312'
c Var 'aux788' order represents '1' with '3313'
-3312 3313 0
c Var 'aux788' direct represents '1' with '3314'
3312 -3313 3314 0
-3314 3313 0
-3314 -3312 0
c Var 'aux788' direct represents '2' with '-3313'
3312 3314 -3313 0
c Encoding variable: aux789 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3315'
c Var 'aux789' direct represents '0' with '3315'
c Var 'aux789' order represents '1' with '3316'
-3315 3316 0
c Var 'aux789' direct represents '1' with '3317'
3315 -3316 3317 0
-3317 3316 0
-3317 -3315 0
c Var 'aux789' direct represents '2' with '-3316'
3315 3317 -3316 0
c Encoding variable: aux790 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux789))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3318'
c Var 'aux790' direct represents '0' with '3318'
c Var 'aux790' order represents '1' with '3319'
-3318 3319 0
c Var 'aux790' direct represents '1' with '3320'
3318 -3319 3320 0
-3320 3319 0
-3320 -3318 0
c Var 'aux790' order represents '2' with '3321'
-3319 3321 0
c Var 'aux790' direct represents '2' with '3322'
3319 -3321 3322 0
-3322 3321 0
-3322 -3319 0
c Var 'aux790' direct represents '3' with '-3321'
3318 3320 3322 -3321 0
c Encoding variable: aux791 with domain: int(0..4) (representing constraint (aux786 + aux788))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3323'
c Var 'aux791' direct represents '0' with '3323'
c Var 'aux791' order represents '1' with '3324'
-3323 3324 0
c Var 'aux791' direct represents '1' with '3325'
3323 -3324 3325 0
-3325 3324 0
-3325 -3323 0
c Var 'aux791' order represents '2' with '3326'
-3324 3326 0
c Var 'aux791' direct represents '2' with '3327'
3324 -3326 3327 0
-3327 3326 0
-3327 -3324 0
c Var 'aux791' order represents '3' with '3328'
-3326 3328 0
c Var 'aux791' direct represents '3' with '3329'
3326 -3328 3329 0
-3329 3328 0
-3329 -3326 0
c Var 'aux791' direct represents '4' with '-3328'
3323 3325 3327 3329 -3328 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3330'
c Var 'aux792' direct represents '0' with '3330'
c Var 'aux792' order represents '1' with '3331'
-3330 3331 0
c Var 'aux792' direct represents '1' with '3332'
3330 -3331 3332 0
-3332 3331 0
-3332 -3330 0
c Var 'aux792' direct represents '2' with '-3331'
3330 3332 -3331 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3333'
c Var 'aux793' direct represents '0' with '3333'
c Var 'aux793' order represents '1' with '3334'
-3333 3334 0
c Var 'aux793' direct represents '1' with '3335'
3333 -3334 3335 0
-3335 3334 0
-3335 -3333 0
c Var 'aux793' direct represents '2' with '-3334'
3333 3335 -3334 0
c Encoding variable: aux794 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3336'
c Var 'aux794' direct represents '0' with '3336'
c Var 'aux794' order represents '1' with '3337'
-3336 3337 0
c Var 'aux794' direct represents '1' with '3338'
3336 -3337 3338 0
-3338 3337 0
-3338 -3336 0
c Var 'aux794' direct represents '2' with '-3337'
3336 3338 -3337 0
c Encoding variable: aux795 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3339'
c Var 'aux795' direct represents '0' with '3339'
c Var 'aux795' order represents '1' with '3340'
-3339 3340 0
c Var 'aux795' direct represents '1' with '3341'
3339 -3340 3341 0
-3341 3340 0
-3341 -3339 0
c Var 'aux795' direct represents '2' with '-3340'
3339 3341 -3340 0
c Encoding variable: aux796 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux795))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3342'
c Var 'aux796' direct represents '0' with '3342'
c Var 'aux796' order represents '1' with '3343'
-3342 3343 0
c Var 'aux796' direct represents '1' with '3344'
3342 -3343 3344 0
-3344 3343 0
-3344 -3342 0
c Var 'aux796' order represents '2' with '3345'
-3343 3345 0
c Var 'aux796' direct represents '2' with '3346'
3343 -3345 3346 0
-3346 3345 0
-3346 -3343 0
c Var 'aux796' direct represents '3' with '-3345'
3342 3344 3346 -3345 0
c Encoding variable: aux797 with domain: int(0..4) (representing constraint (aux792 + aux794))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3347'
c Var 'aux797' direct represents '0' with '3347'
c Var 'aux797' order represents '1' with '3348'
-3347 3348 0
c Var 'aux797' direct represents '1' with '3349'
3347 -3348 3349 0
-3349 3348 0
-3349 -3347 0
c Var 'aux797' order represents '2' with '3350'
-3348 3350 0
c Var 'aux797' direct represents '2' with '3351'
3348 -3350 3351 0
-3351 3350 0
-3351 -3348 0
c Var 'aux797' order represents '3' with '3352'
-3350 3352 0
c Var 'aux797' direct represents '3' with '3353'
3350 -3352 3353 0
-3353 3352 0
-3353 -3350 0
c Var 'aux797' direct represents '4' with '-3352'
3347 3349 3351 3353 -3352 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3354'
c Var 'aux798' direct represents '0' with '3354'
c Var 'aux798' order represents '1' with '3355'
-3354 3355 0
c Var 'aux798' direct represents '1' with '3356'
3354 -3355 3356 0
-3356 3355 0
-3356 -3354 0
c Var 'aux798' direct represents '2' with '-3355'
3354 3356 -3355 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3357'
c Var 'aux799' direct represents '0' with '3357'
c Var 'aux799' order represents '1' with '3358'
-3357 3358 0
c Var 'aux799' direct represents '1' with '3359'
3357 -3358 3359 0
-3359 3358 0
-3359 -3357 0
c Var 'aux799' direct represents '2' with '-3358'
3357 3359 -3358 0
c Encoding variable: aux800 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3360'
c Var 'aux800' direct represents '0' with '3360'
c Var 'aux800' order represents '1' with '3361'
-3360 3361 0
c Var 'aux800' direct represents '1' with '3362'
3360 -3361 3362 0
-3362 3361 0
-3362 -3360 0
c Var 'aux800' direct represents '2' with '-3361'
3360 3362 -3361 0
c Encoding variable: aux801 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3363'
c Var 'aux801' direct represents '0' with '3363'
c Var 'aux801' order represents '1' with '3364'
-3363 3364 0
c Var 'aux801' direct represents '1' with '3365'
3363 -3364 3365 0
-3365 3364 0
-3365 -3363 0
c Var 'aux801' direct represents '2' with '-3364'
3363 3365 -3364 0
c Encoding variable: aux802 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux801))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3366'
c Var 'aux802' direct represents '0' with '3366'
c Var 'aux802' order represents '1' with '3367'
-3366 3367 0
c Var 'aux802' direct represents '1' with '3368'
3366 -3367 3368 0
-3368 3367 0
-3368 -3366 0
c Var 'aux802' order represents '2' with '3369'
-3367 3369 0
c Var 'aux802' direct represents '2' with '3370'
3367 -3369 3370 0
-3370 3369 0
-3370 -3367 0
c Var 'aux802' direct represents '3' with '-3369'
3366 3368 3370 -3369 0
c Encoding variable: aux803 with domain: int(0..4) (representing constraint (aux798 + aux800))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3371'
c Var 'aux803' direct represents '0' with '3371'
c Var 'aux803' order represents '1' with '3372'
-3371 3372 0
c Var 'aux803' direct represents '1' with '3373'
3371 -3372 3373 0
-3373 3372 0
-3373 -3371 0
c Var 'aux803' order represents '2' with '3374'
-3372 3374 0
c Var 'aux803' direct represents '2' with '3375'
3372 -3374 3375 0
-3375 3374 0
-3375 -3372 0
c Var 'aux803' order represents '3' with '3376'
-3374 3376 0
c Var 'aux803' direct represents '3' with '3377'
3374 -3376 3377 0
-3377 3376 0
-3377 -3374 0
c Var 'aux803' direct represents '4' with '-3376'
3371 3373 3375 3377 -3376 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3378'
c Var 'aux804' direct represents '0' with '3378'
c Var 'aux804' order represents '1' with '3379'
-3378 3379 0
c Var 'aux804' direct represents '1' with '3380'
3378 -3379 3380 0
-3380 3379 0
-3380 -3378 0
c Var 'aux804' direct represents '2' with '-3379'
3378 3380 -3379 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3381'
c Var 'aux805' direct represents '0' with '3381'
c Var 'aux805' order represents '1' with '3382'
-3381 3382 0
c Var 'aux805' direct represents '1' with '3383'
3381 -3382 3383 0
-3383 3382 0
-3383 -3381 0
c Var 'aux805' direct represents '2' with '-3382'
3381 3383 -3382 0
c Encoding variable: aux806 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3384'
c Var 'aux806' direct represents '0' with '3384'
c Var 'aux806' order represents '1' with '3385'
-3384 3385 0
c Var 'aux806' direct represents '1' with '3386'
3384 -3385 3386 0
-3386 3385 0
-3386 -3384 0
c Var 'aux806' direct represents '2' with '-3385'
3384 3386 -3385 0
c Encoding variable: aux807 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3387'
c Var 'aux807' direct represents '0' with '3387'
c Var 'aux807' order represents '1' with '3388'
-3387 3388 0
c Var 'aux807' direct represents '1' with '3389'
3387 -3388 3389 0
-3389 3388 0
-3389 -3387 0
c Var 'aux807' direct represents '2' with '-3388'
3387 3389 -3388 0
c Encoding variable: aux808 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux807))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3390'
c Var 'aux808' direct represents '0' with '3390'
c Var 'aux808' order represents '1' with '3391'
-3390 3391 0
c Var 'aux808' direct represents '1' with '3392'
3390 -3391 3392 0
-3392 3391 0
-3392 -3390 0
c Var 'aux808' order represents '2' with '3393'
-3391 3393 0
c Var 'aux808' direct represents '2' with '3394'
3391 -3393 3394 0
-3394 3393 0
-3394 -3391 0
c Var 'aux808' direct represents '3' with '-3393'
3390 3392 3394 -3393 0
c Encoding variable: aux809 with domain: int(0..4) (representing constraint (aux804 + aux806))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3395'
c Var 'aux809' direct represents '0' with '3395'
c Var 'aux809' order represents '1' with '3396'
-3395 3396 0
c Var 'aux809' direct represents '1' with '3397'
3395 -3396 3397 0
-3397 3396 0
-3397 -3395 0
c Var 'aux809' order represents '2' with '3398'
-3396 3398 0
c Var 'aux809' direct represents '2' with '3399'
3396 -3398 3399 0
-3399 3398 0
-3399 -3396 0
c Var 'aux809' order represents '3' with '3400'
-3398 3400 0
c Var 'aux809' direct represents '3' with '3401'
3398 -3400 3401 0
-3401 3400 0
-3401 -3398 0
c Var 'aux809' direct represents '4' with '-3400'
3395 3397 3399 3401 -3400 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3402'
c Var 'aux810' direct represents '0' with '3402'
c Var 'aux810' order represents '1' with '3403'
-3402 3403 0
c Var 'aux810' direct represents '1' with '3404'
3402 -3403 3404 0
-3404 3403 0
-3404 -3402 0
c Var 'aux810' direct represents '2' with '-3403'
3402 3404 -3403 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3405'
c Var 'aux811' direct represents '0' with '3405'
c Var 'aux811' order represents '1' with '3406'
-3405 3406 0
c Var 'aux811' direct represents '1' with '3407'
3405 -3406 3407 0
-3407 3406 0
-3407 -3405 0
c Var 'aux811' direct represents '2' with '-3406'
3405 3407 -3406 0
c Encoding variable: aux812 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3408'
c Var 'aux812' direct represents '0' with '3408'
c Var 'aux812' order represents '1' with '3409'
-3408 3409 0
c Var 'aux812' direct represents '1' with '3410'
3408 -3409 3410 0
-3410 3409 0
-3410 -3408 0
c Var 'aux812' direct represents '2' with '-3409'
3408 3410 -3409 0
c Encoding variable: aux813 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3411'
c Var 'aux813' direct represents '0' with '3411'
c Var 'aux813' order represents '1' with '3412'
-3411 3412 0
c Var 'aux813' direct represents '1' with '3413'
3411 -3412 3413 0
-3413 3412 0
-3413 -3411 0
c Var 'aux813' direct represents '2' with '-3412'
3411 3413 -3412 0
c Encoding variable: aux814 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux813))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3414'
c Var 'aux814' direct represents '0' with '3414'
c Var 'aux814' order represents '1' with '3415'
-3414 3415 0
c Var 'aux814' direct represents '1' with '3416'
3414 -3415 3416 0
-3416 3415 0
-3416 -3414 0
c Var 'aux814' order represents '2' with '3417'
-3415 3417 0
c Var 'aux814' direct represents '2' with '3418'
3415 -3417 3418 0
-3418 3417 0
-3418 -3415 0
c Var 'aux814' direct represents '3' with '-3417'
3414 3416 3418 -3417 0
c Encoding variable: aux815 with domain: int(0..4) (representing constraint (aux810 + aux812))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3419'
c Var 'aux815' direct represents '0' with '3419'
c Var 'aux815' order represents '1' with '3420'
-3419 3420 0
c Var 'aux815' direct represents '1' with '3421'
3419 -3420 3421 0
-3421 3420 0
-3421 -3419 0
c Var 'aux815' order represents '2' with '3422'
-3420 3422 0
c Var 'aux815' direct represents '2' with '3423'
3420 -3422 3423 0
-3423 3422 0
-3423 -3420 0
c Var 'aux815' order represents '3' with '3424'
-3422 3424 0
c Var 'aux815' direct represents '3' with '3425'
3422 -3424 3425 0
-3425 3424 0
-3425 -3422 0
c Var 'aux815' direct represents '4' with '-3424'
3419 3421 3423 3425 -3424 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3426'
c Var 'aux816' direct represents '0' with '3426'
c Var 'aux816' order represents '1' with '3427'
-3426 3427 0
c Var 'aux816' direct represents '1' with '3428'
3426 -3427 3428 0
-3428 3427 0
-3428 -3426 0
c Var 'aux816' direct represents '2' with '-3427'
3426 3428 -3427 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3429'
c Var 'aux817' direct represents '0' with '3429'
c Var 'aux817' order represents '1' with '3430'
-3429 3430 0
c Var 'aux817' direct represents '1' with '3431'
3429 -3430 3431 0
-3431 3430 0
-3431 -3429 0
c Var 'aux817' direct represents '2' with '-3430'
3429 3431 -3430 0
c Encoding variable: aux818 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3432'
c Var 'aux818' direct represents '0' with '3432'
c Var 'aux818' order represents '1' with '3433'
-3432 3433 0
c Var 'aux818' direct represents '1' with '3434'
3432 -3433 3434 0
-3434 3433 0
-3434 -3432 0
c Var 'aux818' direct represents '2' with '-3433'
3432 3434 -3433 0
c Encoding variable: aux819 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3435'
c Var 'aux819' direct represents '0' with '3435'
c Var 'aux819' order represents '1' with '3436'
-3435 3436 0
c Var 'aux819' direct represents '1' with '3437'
3435 -3436 3437 0
-3437 3436 0
-3437 -3435 0
c Var 'aux819' direct represents '2' with '-3436'
3435 3437 -3436 0
c Encoding variable: aux820 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux819))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3438'
c Var 'aux820' direct represents '0' with '3438'
c Var 'aux820' order represents '1' with '3439'
-3438 3439 0
c Var 'aux820' direct represents '1' with '3440'
3438 -3439 3440 0
-3440 3439 0
-3440 -3438 0
c Var 'aux820' order represents '2' with '3441'
-3439 3441 0
c Var 'aux820' direct represents '2' with '3442'
3439 -3441 3442 0
-3442 3441 0
-3442 -3439 0
c Var 'aux820' direct represents '3' with '-3441'
3438 3440 3442 -3441 0
c Encoding variable: aux821 with domain: int(0..4) (representing constraint (aux816 + aux818))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3443'
c Var 'aux821' direct represents '0' with '3443'
c Var 'aux821' order represents '1' with '3444'
-3443 3444 0
c Var 'aux821' direct represents '1' with '3445'
3443 -3444 3445 0
-3445 3444 0
-3445 -3443 0
c Var 'aux821' order represents '2' with '3446'
-3444 3446 0
c Var 'aux821' direct represents '2' with '3447'
3444 -3446 3447 0
-3447 3446 0
-3447 -3444 0
c Var 'aux821' order represents '3' with '3448'
-3446 3448 0
c Var 'aux821' direct represents '3' with '3449'
3446 -3448 3449 0
-3449 3448 0
-3449 -3446 0
c Var 'aux821' direct represents '4' with '-3448'
3443 3445 3447 3449 -3448 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3450'
c Var 'aux822' direct represents '0' with '3450'
c Var 'aux822' order represents '1' with '3451'
-3450 3451 0
c Var 'aux822' direct represents '1' with '3452'
3450 -3451 3452 0
-3452 3451 0
-3452 -3450 0
c Var 'aux822' direct represents '2' with '-3451'
3450 3452 -3451 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3453'
c Var 'aux823' direct represents '0' with '3453'
c Var 'aux823' order represents '1' with '3454'
-3453 3454 0
c Var 'aux823' direct represents '1' with '3455'
3453 -3454 3455 0
-3455 3454 0
-3455 -3453 0
c Var 'aux823' direct represents '2' with '-3454'
3453 3455 -3454 0
c Encoding variable: aux824 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3456'
c Var 'aux824' direct represents '0' with '3456'
c Var 'aux824' order represents '1' with '3457'
-3456 3457 0
c Var 'aux824' direct represents '1' with '3458'
3456 -3457 3458 0
-3458 3457 0
-3458 -3456 0
c Var 'aux824' direct represents '2' with '-3457'
3456 3458 -3457 0
c Encoding variable: aux825 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3459'
c Var 'aux825' direct represents '0' with '3459'
c Var 'aux825' order represents '1' with '3460'
-3459 3460 0
c Var 'aux825' direct represents '1' with '3461'
3459 -3460 3461 0
-3461 3460 0
-3461 -3459 0
c Var 'aux825' direct represents '2' with '-3460'
3459 3461 -3460 0
c Encoding variable: aux826 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux825))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3462'
c Var 'aux826' direct represents '0' with '3462'
c Var 'aux826' order represents '1' with '3463'
-3462 3463 0
c Var 'aux826' direct represents '1' with '3464'
3462 -3463 3464 0
-3464 3463 0
-3464 -3462 0
c Var 'aux826' order represents '2' with '3465'
-3463 3465 0
c Var 'aux826' direct represents '2' with '3466'
3463 -3465 3466 0
-3466 3465 0
-3466 -3463 0
c Var 'aux826' direct represents '3' with '-3465'
3462 3464 3466 -3465 0
c Encoding variable: aux827 with domain: int(0..4) (representing constraint (aux822 + aux824))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3467'
c Var 'aux827' direct represents '0' with '3467'
c Var 'aux827' order represents '1' with '3468'
-3467 3468 0
c Var 'aux827' direct represents '1' with '3469'
3467 -3468 3469 0
-3469 3468 0
-3469 -3467 0
c Var 'aux827' order represents '2' with '3470'
-3468 3470 0
c Var 'aux827' direct represents '2' with '3471'
3468 -3470 3471 0
-3471 3470 0
-3471 -3468 0
c Var 'aux827' order represents '3' with '3472'
-3470 3472 0
c Var 'aux827' direct represents '3' with '3473'
3470 -3472 3473 0
-3473 3472 0
-3473 -3470 0
c Var 'aux827' direct represents '4' with '-3472'
3467 3469 3471 3473 -3472 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3474'
c Var 'aux828' direct represents '0' with '3474'
c Var 'aux828' order represents '1' with '3475'
-3474 3475 0
c Var 'aux828' direct represents '1' with '3476'
3474 -3475 3476 0
-3476 3475 0
-3476 -3474 0
c Var 'aux828' direct represents '2' with '-3475'
3474 3476 -3475 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3477'
c Var 'aux829' direct represents '0' with '3477'
c Var 'aux829' order represents '1' with '3478'
-3477 3478 0
c Var 'aux829' direct represents '1' with '3479'
3477 -3478 3479 0
-3479 3478 0
-3479 -3477 0
c Var 'aux829' direct represents '2' with '-3478'
3477 3479 -3478 0
c Encoding variable: aux830 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3480'
c Var 'aux830' direct represents '0' with '3480'
c Var 'aux830' order represents '1' with '3481'
-3480 3481 0
c Var 'aux830' direct represents '1' with '3482'
3480 -3481 3482 0
-3482 3481 0
-3482 -3480 0
c Var 'aux830' direct represents '2' with '-3481'
3480 3482 -3481 0
c Encoding variable: aux831 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3483'
c Var 'aux831' direct represents '0' with '3483'
c Var 'aux831' order represents '1' with '3484'
-3483 3484 0
c Var 'aux831' direct represents '1' with '3485'
3483 -3484 3485 0
-3485 3484 0
-3485 -3483 0
c Var 'aux831' direct represents '2' with '-3484'
3483 3485 -3484 0
c Encoding variable: aux832 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux831))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3486'
c Var 'aux832' direct represents '0' with '3486'
c Var 'aux832' order represents '1' with '3487'
-3486 3487 0
c Var 'aux832' direct represents '1' with '3488'
3486 -3487 3488 0
-3488 3487 0
-3488 -3486 0
c Var 'aux832' order represents '2' with '3489'
-3487 3489 0
c Var 'aux832' direct represents '2' with '3490'
3487 -3489 3490 0
-3490 3489 0
-3490 -3487 0
c Var 'aux832' direct represents '3' with '-3489'
3486 3488 3490 -3489 0
c Encoding variable: aux833 with domain: int(0..4) (representing constraint (aux828 + aux830))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3491'
c Var 'aux833' direct represents '0' with '3491'
c Var 'aux833' order represents '1' with '3492'
-3491 3492 0
c Var 'aux833' direct represents '1' with '3493'
3491 -3492 3493 0
-3493 3492 0
-3493 -3491 0
c Var 'aux833' order represents '2' with '3494'
-3492 3494 0
c Var 'aux833' direct represents '2' with '3495'
3492 -3494 3495 0
-3495 3494 0
-3495 -3492 0
c Var 'aux833' order represents '3' with '3496'
-3494 3496 0
c Var 'aux833' direct represents '3' with '3497'
3494 -3496 3497 0
-3497 3496 0
-3497 -3494 0
c Var 'aux833' direct represents '4' with '-3496'
3491 3493 3495 3497 -3496 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3498'
c Var 'aux834' direct represents '0' with '3498'
c Var 'aux834' order represents '1' with '3499'
-3498 3499 0
c Var 'aux834' direct represents '1' with '3500'
3498 -3499 3500 0
-3500 3499 0
-3500 -3498 0
c Var 'aux834' direct represents '2' with '-3499'
3498 3500 -3499 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3501'
c Var 'aux835' direct represents '0' with '3501'
c Var 'aux835' order represents '1' with '3502'
-3501 3502 0
c Var 'aux835' direct represents '1' with '3503'
3501 -3502 3503 0
-3503 3502 0
-3503 -3501 0
c Var 'aux835' direct represents '2' with '-3502'
3501 3503 -3502 0
c Encoding variable: aux836 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3504'
c Var 'aux836' direct represents '0' with '3504'
c Var 'aux836' order represents '1' with '3505'
-3504 3505 0
c Var 'aux836' direct represents '1' with '3506'
3504 -3505 3506 0
-3506 3505 0
-3506 -3504 0
c Var 'aux836' direct represents '2' with '-3505'
3504 3506 -3505 0
c Encoding variable: aux837 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3507'
c Var 'aux837' direct represents '0' with '3507'
c Var 'aux837' order represents '1' with '3508'
-3507 3508 0
c Var 'aux837' direct represents '1' with '3509'
3507 -3508 3509 0
-3509 3508 0
-3509 -3507 0
c Var 'aux837' direct represents '2' with '-3508'
3507 3509 -3508 0
c Encoding variable: aux838 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux837))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3510'
c Var 'aux838' direct represents '0' with '3510'
c Var 'aux838' order represents '1' with '3511'
-3510 3511 0
c Var 'aux838' direct represents '1' with '3512'
3510 -3511 3512 0
-3512 3511 0
-3512 -3510 0
c Var 'aux838' order represents '2' with '3513'
-3511 3513 0
c Var 'aux838' direct represents '2' with '3514'
3511 -3513 3514 0
-3514 3513 0
-3514 -3511 0
c Var 'aux838' direct represents '3' with '-3513'
3510 3512 3514 -3513 0
c Encoding variable: aux839 with domain: int(0..4) (representing constraint (aux834 + aux836))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3515'
c Var 'aux839' direct represents '0' with '3515'
c Var 'aux839' order represents '1' with '3516'
-3515 3516 0
c Var 'aux839' direct represents '1' with '3517'
3515 -3516 3517 0
-3517 3516 0
-3517 -3515 0
c Var 'aux839' order represents '2' with '3518'
-3516 3518 0
c Var 'aux839' direct represents '2' with '3519'
3516 -3518 3519 0
-3519 3518 0
-3519 -3516 0
c Var 'aux839' order represents '3' with '3520'
-3518 3520 0
c Var 'aux839' direct represents '3' with '3521'
3518 -3520 3521 0
-3521 3520 0
-3521 -3518 0
c Var 'aux839' direct represents '4' with '-3520'
3515 3517 3519 3521 -3520 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3522'
c Var 'aux840' direct represents '0' with '3522'
c Var 'aux840' order represents '1' with '3523'
-3522 3523 0
c Var 'aux840' direct represents '1' with '3524'
3522 -3523 3524 0
-3524 3523 0
-3524 -3522 0
c Var 'aux840' direct represents '2' with '-3523'
3522 3524 -3523 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3525'
c Var 'aux841' direct represents '0' with '3525'
c Var 'aux841' order represents '1' with '3526'
-3525 3526 0
c Var 'aux841' direct represents '1' with '3527'
3525 -3526 3527 0
-3527 3526 0
-3527 -3525 0
c Var 'aux841' direct represents '2' with '-3526'
3525 3527 -3526 0
c Encoding variable: aux842 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3528'
c Var 'aux842' direct represents '0' with '3528'
c Var 'aux842' order represents '1' with '3529'
-3528 3529 0
c Var 'aux842' direct represents '1' with '3530'
3528 -3529 3530 0
-3530 3529 0
-3530 -3528 0
c Var 'aux842' direct represents '2' with '-3529'
3528 3530 -3529 0
c Encoding variable: aux843 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3531'
c Var 'aux843' direct represents '0' with '3531'
c Var 'aux843' order represents '1' with '3532'
-3531 3532 0
c Var 'aux843' direct represents '1' with '3533'
3531 -3532 3533 0
-3533 3532 0
-3533 -3531 0
c Var 'aux843' direct represents '2' with '-3532'
3531 3533 -3532 0
c Encoding variable: aux844 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux843))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3534'
c Var 'aux844' direct represents '0' with '3534'
c Var 'aux844' order represents '1' with '3535'
-3534 3535 0
c Var 'aux844' direct represents '1' with '3536'
3534 -3535 3536 0
-3536 3535 0
-3536 -3534 0
c Var 'aux844' order represents '2' with '3537'
-3535 3537 0
c Var 'aux844' direct represents '2' with '3538'
3535 -3537 3538 0
-3538 3537 0
-3538 -3535 0
c Var 'aux844' direct represents '3' with '-3537'
3534 3536 3538 -3537 0
c Encoding variable: aux845 with domain: int(0..4) (representing constraint (aux840 + aux842))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3539'
c Var 'aux845' direct represents '0' with '3539'
c Var 'aux845' order represents '1' with '3540'
-3539 3540 0
c Var 'aux845' direct represents '1' with '3541'
3539 -3540 3541 0
-3541 3540 0
-3541 -3539 0
c Var 'aux845' order represents '2' with '3542'
-3540 3542 0
c Var 'aux845' direct represents '2' with '3543'
3540 -3542 3543 0
-3543 3542 0
-3543 -3540 0
c Var 'aux845' order represents '3' with '3544'
-3542 3544 0
c Var 'aux845' direct represents '3' with '3545'
3542 -3544 3545 0
-3545 3544 0
-3545 -3542 0
c Var 'aux845' direct represents '4' with '-3544'
3539 3541 3543 3545 -3544 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3546'
c Var 'aux846' direct represents '0' with '3546'
c Var 'aux846' order represents '1' with '3547'
-3546 3547 0
c Var 'aux846' direct represents '1' with '3548'
3546 -3547 3548 0
-3548 3547 0
-3548 -3546 0
c Var 'aux846' direct represents '2' with '-3547'
3546 3548 -3547 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3549'
c Var 'aux847' direct represents '0' with '3549'
c Var 'aux847' order represents '1' with '3550'
-3549 3550 0
c Var 'aux847' direct represents '1' with '3551'
3549 -3550 3551 0
-3551 3550 0
-3551 -3549 0
c Var 'aux847' direct represents '2' with '-3550'
3549 3551 -3550 0
c Encoding variable: aux848 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3552'
c Var 'aux848' direct represents '0' with '3552'
c Var 'aux848' order represents '1' with '3553'
-3552 3553 0
c Var 'aux848' direct represents '1' with '3554'
3552 -3553 3554 0
-3554 3553 0
-3554 -3552 0
c Var 'aux848' direct represents '2' with '-3553'
3552 3554 -3553 0
c Encoding variable: aux849 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3555'
c Var 'aux849' direct represents '0' with '3555'
c Var 'aux849' order represents '1' with '3556'
-3555 3556 0
c Var 'aux849' direct represents '1' with '3557'
3555 -3556 3557 0
-3557 3556 0
-3557 -3555 0
c Var 'aux849' direct represents '2' with '-3556'
3555 3557 -3556 0
c Encoding variable: aux850 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux849))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3558'
c Var 'aux850' direct represents '0' with '3558'
c Var 'aux850' order represents '1' with '3559'
-3558 3559 0
c Var 'aux850' direct represents '1' with '3560'
3558 -3559 3560 0
-3560 3559 0
-3560 -3558 0
c Var 'aux850' order represents '2' with '3561'
-3559 3561 0
c Var 'aux850' direct represents '2' with '3562'
3559 -3561 3562 0
-3562 3561 0
-3562 -3559 0
c Var 'aux850' direct represents '3' with '-3561'
3558 3560 3562 -3561 0
c Encoding variable: aux851 with domain: int(0..4) (representing constraint (aux846 + aux848))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3563'
c Var 'aux851' direct represents '0' with '3563'
c Var 'aux851' order represents '1' with '3564'
-3563 3564 0
c Var 'aux851' direct represents '1' with '3565'
3563 -3564 3565 0
-3565 3564 0
-3565 -3563 0
c Var 'aux851' order represents '2' with '3566'
-3564 3566 0
c Var 'aux851' direct represents '2' with '3567'
3564 -3566 3567 0
-3567 3566 0
-3567 -3564 0
c Var 'aux851' order represents '3' with '3568'
-3566 3568 0
c Var 'aux851' direct represents '3' with '3569'
3566 -3568 3569 0
-3569 3568 0
-3569 -3566 0
c Var 'aux851' direct represents '4' with '-3568'
3563 3565 3567 3569 -3568 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3570'
c Var 'aux852' direct represents '0' with '3570'
c Var 'aux852' order represents '1' with '3571'
-3570 3571 0
c Var 'aux852' direct represents '1' with '3572'
3570 -3571 3572 0
-3572 3571 0
-3572 -3570 0
c Var 'aux852' direct represents '2' with '-3571'
3570 3572 -3571 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3573'
c Var 'aux853' direct represents '0' with '3573'
c Var 'aux853' order represents '1' with '3574'
-3573 3574 0
c Var 'aux853' direct represents '1' with '3575'
3573 -3574 3575 0
-3575 3574 0
-3575 -3573 0
c Var 'aux853' direct represents '2' with '-3574'
3573 3575 -3574 0
c Encoding variable: aux854 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3576'
c Var 'aux854' direct represents '0' with '3576'
c Var 'aux854' order represents '1' with '3577'
-3576 3577 0
c Var 'aux854' direct represents '1' with '3578'
3576 -3577 3578 0
-3578 3577 0
-3578 -3576 0
c Var 'aux854' direct represents '2' with '-3577'
3576 3578 -3577 0
c Encoding variable: aux855 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3579'
c Var 'aux855' direct represents '0' with '3579'
c Var 'aux855' order represents '1' with '3580'
-3579 3580 0
c Var 'aux855' direct represents '1' with '3581'
3579 -3580 3581 0
-3581 3580 0
-3581 -3579 0
c Var 'aux855' direct represents '2' with '-3580'
3579 3581 -3580 0
c Encoding variable: aux856 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux855))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3582'
c Var 'aux856' direct represents '0' with '3582'
c Var 'aux856' order represents '1' with '3583'
-3582 3583 0
c Var 'aux856' direct represents '1' with '3584'
3582 -3583 3584 0
-3584 3583 0
-3584 -3582 0
c Var 'aux856' order represents '2' with '3585'
-3583 3585 0
c Var 'aux856' direct represents '2' with '3586'
3583 -3585 3586 0
-3586 3585 0
-3586 -3583 0
c Var 'aux856' direct represents '3' with '-3585'
3582 3584 3586 -3585 0
c Encoding variable: aux857 with domain: int(0..4) (representing constraint (aux852 + aux854))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3587'
c Var 'aux857' direct represents '0' with '3587'
c Var 'aux857' order represents '1' with '3588'
-3587 3588 0
c Var 'aux857' direct represents '1' with '3589'
3587 -3588 3589 0
-3589 3588 0
-3589 -3587 0
c Var 'aux857' order represents '2' with '3590'
-3588 3590 0
c Var 'aux857' direct represents '2' with '3591'
3588 -3590 3591 0
-3591 3590 0
-3591 -3588 0
c Var 'aux857' order represents '3' with '3592'
-3590 3592 0
c Var 'aux857' direct represents '3' with '3593'
3590 -3592 3593 0
-3593 3592 0
-3593 -3590 0
c Var 'aux857' direct represents '4' with '-3592'
3587 3589 3591 3593 -3592 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3594'
c Var 'aux858' direct represents '0' with '3594'
c Var 'aux858' order represents '1' with '3595'
-3594 3595 0
c Var 'aux858' direct represents '1' with '3596'
3594 -3595 3596 0
-3596 3595 0
-3596 -3594 0
c Var 'aux858' direct represents '2' with '-3595'
3594 3596 -3595 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3597'
c Var 'aux859' direct represents '0' with '3597'
c Var 'aux859' order represents '1' with '3598'
-3597 3598 0
c Var 'aux859' direct represents '1' with '3599'
3597 -3598 3599 0
-3599 3598 0
-3599 -3597 0
c Var 'aux859' direct represents '2' with '-3598'
3597 3599 -3598 0
c Encoding variable: aux860 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3600'
c Var 'aux860' direct represents '0' with '3600'
c Var 'aux860' order represents '1' with '3601'
-3600 3601 0
c Var 'aux860' direct represents '1' with '3602'
3600 -3601 3602 0
-3602 3601 0
-3602 -3600 0
c Var 'aux860' direct represents '2' with '-3601'
3600 3602 -3601 0
c Encoding variable: aux861 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3603'
c Var 'aux861' direct represents '0' with '3603'
c Var 'aux861' order represents '1' with '3604'
-3603 3604 0
c Var 'aux861' direct represents '1' with '3605'
3603 -3604 3605 0
-3605 3604 0
-3605 -3603 0
c Var 'aux861' direct represents '2' with '-3604'
3603 3605 -3604 0
c Encoding variable: aux862 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux861))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3606'
c Var 'aux862' direct represents '0' with '3606'
c Var 'aux862' order represents '1' with '3607'
-3606 3607 0
c Var 'aux862' direct represents '1' with '3608'
3606 -3607 3608 0
-3608 3607 0
-3608 -3606 0
c Var 'aux862' order represents '2' with '3609'
-3607 3609 0
c Var 'aux862' direct represents '2' with '3610'
3607 -3609 3610 0
-3610 3609 0
-3610 -3607 0
c Var 'aux862' direct represents '3' with '-3609'
3606 3608 3610 -3609 0
c Encoding variable: aux863 with domain: int(0..4) (representing constraint (aux858 + aux860))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3611'
c Var 'aux863' direct represents '0' with '3611'
c Var 'aux863' order represents '1' with '3612'
-3611 3612 0
c Var 'aux863' direct represents '1' with '3613'
3611 -3612 3613 0
-3613 3612 0
-3613 -3611 0
c Var 'aux863' order represents '2' with '3614'
-3612 3614 0
c Var 'aux863' direct represents '2' with '3615'
3612 -3614 3615 0
-3615 3614 0
-3615 -3612 0
c Var 'aux863' order represents '3' with '3616'
-3614 3616 0
c Var 'aux863' direct represents '3' with '3617'
3614 -3616 3617 0
-3617 3616 0
-3617 -3614 0
c Var 'aux863' direct represents '4' with '-3616'
3611 3613 3615 3617 -3616 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3618'
c Var 'aux864' direct represents '0' with '3618'
c Var 'aux864' order represents '1' with '3619'
-3618 3619 0
c Var 'aux864' direct represents '1' with '3620'
3618 -3619 3620 0
-3620 3619 0
-3620 -3618 0
c Var 'aux864' direct represents '2' with '-3619'
3618 3620 -3619 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3621'
c Var 'aux865' direct represents '0' with '3621'
c Var 'aux865' order represents '1' with '3622'
-3621 3622 0
c Var 'aux865' direct represents '1' with '3623'
3621 -3622 3623 0
-3623 3622 0
-3623 -3621 0
c Var 'aux865' direct represents '2' with '-3622'
3621 3623 -3622 0
c Encoding variable: aux866 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3624'
c Var 'aux866' direct represents '0' with '3624'
c Var 'aux866' order represents '1' with '3625'
-3624 3625 0
c Var 'aux866' direct represents '1' with '3626'
3624 -3625 3626 0
-3626 3625 0
-3626 -3624 0
c Var 'aux866' direct represents '2' with '-3625'
3624 3626 -3625 0
c Encoding variable: aux867 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3627'
c Var 'aux867' direct represents '0' with '3627'
c Var 'aux867' order represents '1' with '3628'
-3627 3628 0
c Var 'aux867' direct represents '1' with '3629'
3627 -3628 3629 0
-3629 3628 0
-3629 -3627 0
c Var 'aux867' direct represents '2' with '-3628'
3627 3629 -3628 0
c Encoding variable: aux868 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux867))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3630'
c Var 'aux868' direct represents '0' with '3630'
c Var 'aux868' order represents '1' with '3631'
-3630 3631 0
c Var 'aux868' direct represents '1' with '3632'
3630 -3631 3632 0
-3632 3631 0
-3632 -3630 0
c Var 'aux868' order represents '2' with '3633'
-3631 3633 0
c Var 'aux868' direct represents '2' with '3634'
3631 -3633 3634 0
-3634 3633 0
-3634 -3631 0
c Var 'aux868' direct represents '3' with '-3633'
3630 3632 3634 -3633 0
c Encoding variable: aux869 with domain: int(0..4) (representing constraint (aux864 + aux866))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3635'
c Var 'aux869' direct represents '0' with '3635'
c Var 'aux869' order represents '1' with '3636'
-3635 3636 0
c Var 'aux869' direct represents '1' with '3637'
3635 -3636 3637 0
-3637 3636 0
-3637 -3635 0
c Var 'aux869' order represents '2' with '3638'
-3636 3638 0
c Var 'aux869' direct represents '2' with '3639'
3636 -3638 3639 0
-3639 3638 0
-3639 -3636 0
c Var 'aux869' order represents '3' with '3640'
-3638 3640 0
c Var 'aux869' direct represents '3' with '3641'
3638 -3640 3641 0
-3641 3640 0
-3641 -3638 0
c Var 'aux869' direct represents '4' with '-3640'
3635 3637 3639 3641 -3640 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3642'
c Var 'aux870' direct represents '0' with '3642'
c Var 'aux870' order represents '1' with '3643'
-3642 3643 0
c Var 'aux870' direct represents '1' with '3644'
3642 -3643 3644 0
-3644 3643 0
-3644 -3642 0
c Var 'aux870' direct represents '2' with '-3643'
3642 3644 -3643 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3645'
c Var 'aux871' direct represents '0' with '3645'
c Var 'aux871' order represents '1' with '3646'
-3645 3646 0
c Var 'aux871' direct represents '1' with '3647'
3645 -3646 3647 0
-3647 3646 0
-3647 -3645 0
c Var 'aux871' direct represents '2' with '-3646'
3645 3647 -3646 0
c Encoding variable: aux872 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3648'
c Var 'aux872' direct represents '0' with '3648'
c Var 'aux872' order represents '1' with '3649'
-3648 3649 0
c Var 'aux872' direct represents '1' with '3650'
3648 -3649 3650 0
-3650 3649 0
-3650 -3648 0
c Var 'aux872' direct represents '2' with '-3649'
3648 3650 -3649 0
c Encoding variable: aux873 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3651'
c Var 'aux873' direct represents '0' with '3651'
c Var 'aux873' order represents '1' with '3652'
-3651 3652 0
c Var 'aux873' direct represents '1' with '3653'
3651 -3652 3653 0
-3653 3652 0
-3653 -3651 0
c Var 'aux873' direct represents '2' with '-3652'
3651 3653 -3652 0
c Encoding variable: aux874 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux873))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3654'
c Var 'aux874' direct represents '0' with '3654'
c Var 'aux874' order represents '1' with '3655'
-3654 3655 0
c Var 'aux874' direct represents '1' with '3656'
3654 -3655 3656 0
-3656 3655 0
-3656 -3654 0
c Var 'aux874' order represents '2' with '3657'
-3655 3657 0
c Var 'aux874' direct represents '2' with '3658'
3655 -3657 3658 0
-3658 3657 0
-3658 -3655 0
c Var 'aux874' direct represents '3' with '-3657'
3654 3656 3658 -3657 0
c Encoding variable: aux875 with domain: int(0..4) (representing constraint (aux870 + aux872))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3659'
c Var 'aux875' direct represents '0' with '3659'
c Var 'aux875' order represents '1' with '3660'
-3659 3660 0
c Var 'aux875' direct represents '1' with '3661'
3659 -3660 3661 0
-3661 3660 0
-3661 -3659 0
c Var 'aux875' order represents '2' with '3662'
-3660 3662 0
c Var 'aux875' direct represents '2' with '3663'
3660 -3662 3663 0
-3663 3662 0
-3663 -3660 0
c Var 'aux875' order represents '3' with '3664'
-3662 3664 0
c Var 'aux875' direct represents '3' with '3665'
3662 -3664 3665 0
-3665 3664 0
-3665 -3662 0
c Var 'aux875' direct represents '4' with '-3664'
3659 3661 3663 3665 -3664 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3666'
c Var 'aux876' direct represents '0' with '3666'
c Var 'aux876' order represents '1' with '3667'
-3666 3667 0
c Var 'aux876' direct represents '1' with '3668'
3666 -3667 3668 0
-3668 3667 0
-3668 -3666 0
c Var 'aux876' direct represents '2' with '-3667'
3666 3668 -3667 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3669'
c Var 'aux877' direct represents '0' with '3669'
c Var 'aux877' order represents '1' with '3670'
-3669 3670 0
c Var 'aux877' direct represents '1' with '3671'
3669 -3670 3671 0
-3671 3670 0
-3671 -3669 0
c Var 'aux877' direct represents '2' with '-3670'
3669 3671 -3670 0
c Encoding variable: aux878 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3672'
c Var 'aux878' direct represents '0' with '3672'
c Var 'aux878' order represents '1' with '3673'
-3672 3673 0
c Var 'aux878' direct represents '1' with '3674'
3672 -3673 3674 0
-3674 3673 0
-3674 -3672 0
c Var 'aux878' direct represents '2' with '-3673'
3672 3674 -3673 0
c Encoding variable: aux879 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3675'
c Var 'aux879' direct represents '0' with '3675'
c Var 'aux879' order represents '1' with '3676'
-3675 3676 0
c Var 'aux879' direct represents '1' with '3677'
3675 -3676 3677 0
-3677 3676 0
-3677 -3675 0
c Var 'aux879' direct represents '2' with '-3676'
3675 3677 -3676 0
c Encoding variable: aux880 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux879))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3678'
c Var 'aux880' direct represents '0' with '3678'
c Var 'aux880' order represents '1' with '3679'
-3678 3679 0
c Var 'aux880' direct represents '1' with '3680'
3678 -3679 3680 0
-3680 3679 0
-3680 -3678 0
c Var 'aux880' order represents '2' with '3681'
-3679 3681 0
c Var 'aux880' direct represents '2' with '3682'
3679 -3681 3682 0
-3682 3681 0
-3682 -3679 0
c Var 'aux880' direct represents '3' with '-3681'
3678 3680 3682 -3681 0
c Encoding variable: aux881 with domain: int(0..4) (representing constraint (aux876 + aux878))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3683'
c Var 'aux881' direct represents '0' with '3683'
c Var 'aux881' order represents '1' with '3684'
-3683 3684 0
c Var 'aux881' direct represents '1' with '3685'
3683 -3684 3685 0
-3685 3684 0
-3685 -3683 0
c Var 'aux881' order represents '2' with '3686'
-3684 3686 0
c Var 'aux881' direct represents '2' with '3687'
3684 -3686 3687 0
-3687 3686 0
-3687 -3684 0
c Var 'aux881' order represents '3' with '3688'
-3686 3688 0
c Var 'aux881' direct represents '3' with '3689'
3686 -3688 3689 0
-3689 3688 0
-3689 -3686 0
c Var 'aux881' direct represents '4' with '-3688'
3683 3685 3687 3689 -3688 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3690'
c Var 'aux882' direct represents '0' with '3690'
c Var 'aux882' order represents '1' with '3691'
-3690 3691 0
c Var 'aux882' direct represents '1' with '3692'
3690 -3691 3692 0
-3692 3691 0
-3692 -3690 0
c Var 'aux882' direct represents '2' with '-3691'
3690 3692 -3691 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3693'
c Var 'aux883' direct represents '0' with '3693'
c Var 'aux883' order represents '1' with '3694'
-3693 3694 0
c Var 'aux883' direct represents '1' with '3695'
3693 -3694 3695 0
-3695 3694 0
-3695 -3693 0
c Var 'aux883' direct represents '2' with '-3694'
3693 3695 -3694 0
c Encoding variable: aux884 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3696'
c Var 'aux884' direct represents '0' with '3696'
c Var 'aux884' order represents '1' with '3697'
-3696 3697 0
c Var 'aux884' direct represents '1' with '3698'
3696 -3697 3698 0
-3698 3697 0
-3698 -3696 0
c Var 'aux884' direct represents '2' with '-3697'
3696 3698 -3697 0
c Encoding variable: aux885 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3699'
c Var 'aux885' direct represents '0' with '3699'
c Var 'aux885' order represents '1' with '3700'
-3699 3700 0
c Var 'aux885' direct represents '1' with '3701'
3699 -3700 3701 0
-3701 3700 0
-3701 -3699 0
c Var 'aux885' direct represents '2' with '-3700'
3699 3701 -3700 0
c Encoding variable: aux886 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux885))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3702'
c Var 'aux886' direct represents '0' with '3702'
c Var 'aux886' order represents '1' with '3703'
-3702 3703 0
c Var 'aux886' direct represents '1' with '3704'
3702 -3703 3704 0
-3704 3703 0
-3704 -3702 0
c Var 'aux886' order represents '2' with '3705'
-3703 3705 0
c Var 'aux886' direct represents '2' with '3706'
3703 -3705 3706 0
-3706 3705 0
-3706 -3703 0
c Var 'aux886' direct represents '3' with '-3705'
3702 3704 3706 -3705 0
c Encoding variable: aux887 with domain: int(0..4) (representing constraint (aux882 + aux884))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3707'
c Var 'aux887' direct represents '0' with '3707'
c Var 'aux887' order represents '1' with '3708'
-3707 3708 0
c Var 'aux887' direct represents '1' with '3709'
3707 -3708 3709 0
-3709 3708 0
-3709 -3707 0
c Var 'aux887' order represents '2' with '3710'
-3708 3710 0
c Var 'aux887' direct represents '2' with '3711'
3708 -3710 3711 0
-3711 3710 0
-3711 -3708 0
c Var 'aux887' order represents '3' with '3712'
-3710 3712 0
c Var 'aux887' direct represents '3' with '3713'
3710 -3712 3713 0
-3713 3712 0
-3713 -3710 0
c Var 'aux887' direct represents '4' with '-3712'
3707 3709 3711 3713 -3712 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3714'
c Var 'aux888' direct represents '0' with '3714'
c Var 'aux888' order represents '1' with '3715'
-3714 3715 0
c Var 'aux888' direct represents '1' with '3716'
3714 -3715 3716 0
-3716 3715 0
-3716 -3714 0
c Var 'aux888' direct represents '2' with '-3715'
3714 3716 -3715 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3717'
c Var 'aux889' direct represents '0' with '3717'
c Var 'aux889' order represents '1' with '3718'
-3717 3718 0
c Var 'aux889' direct represents '1' with '3719'
3717 -3718 3719 0
-3719 3718 0
-3719 -3717 0
c Var 'aux889' direct represents '2' with '-3718'
3717 3719 -3718 0
c Encoding variable: aux890 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3720'
c Var 'aux890' direct represents '0' with '3720'
c Var 'aux890' order represents '1' with '3721'
-3720 3721 0
c Var 'aux890' direct represents '1' with '3722'
3720 -3721 3722 0
-3722 3721 0
-3722 -3720 0
c Var 'aux890' direct represents '2' with '-3721'
3720 3722 -3721 0
c Encoding variable: aux891 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3723'
c Var 'aux891' direct represents '0' with '3723'
c Var 'aux891' order represents '1' with '3724'
-3723 3724 0
c Var 'aux891' direct represents '1' with '3725'
3723 -3724 3725 0
-3725 3724 0
-3725 -3723 0
c Var 'aux891' direct represents '2' with '-3724'
3723 3725 -3724 0
c Encoding variable: aux892 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux891))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3726'
c Var 'aux892' direct represents '0' with '3726'
c Var 'aux892' order represents '1' with '3727'
-3726 3727 0
c Var 'aux892' direct represents '1' with '3728'
3726 -3727 3728 0
-3728 3727 0
-3728 -3726 0
c Var 'aux892' order represents '2' with '3729'
-3727 3729 0
c Var 'aux892' direct represents '2' with '3730'
3727 -3729 3730 0
-3730 3729 0
-3730 -3727 0
c Var 'aux892' direct represents '3' with '-3729'
3726 3728 3730 -3729 0
c Encoding variable: aux893 with domain: int(0..4) (representing constraint (aux888 + aux890))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3731'
c Var 'aux893' direct represents '0' with '3731'
c Var 'aux893' order represents '1' with '3732'
-3731 3732 0
c Var 'aux893' direct represents '1' with '3733'
3731 -3732 3733 0
-3733 3732 0
-3733 -3731 0
c Var 'aux893' order represents '2' with '3734'
-3732 3734 0
c Var 'aux893' direct represents '2' with '3735'
3732 -3734 3735 0
-3735 3734 0
-3735 -3732 0
c Var 'aux893' order represents '3' with '3736'
-3734 3736 0
c Var 'aux893' direct represents '3' with '3737'
3734 -3736 3737 0
-3737 3736 0
-3737 -3734 0
c Var 'aux893' direct represents '4' with '-3736'
3731 3733 3735 3737 -3736 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3738'
c Var 'aux894' direct represents '0' with '3738'
c Var 'aux894' order represents '1' with '3739'
-3738 3739 0
c Var 'aux894' direct represents '1' with '3740'
3738 -3739 3740 0
-3740 3739 0
-3740 -3738 0
c Var 'aux894' direct represents '2' with '-3739'
3738 3740 -3739 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3741'
c Var 'aux895' direct represents '0' with '3741'
c Var 'aux895' order represents '1' with '3742'
-3741 3742 0
c Var 'aux895' direct represents '1' with '3743'
3741 -3742 3743 0
-3743 3742 0
-3743 -3741 0
c Var 'aux895' direct represents '2' with '-3742'
3741 3743 -3742 0
c Encoding variable: aux896 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3744'
c Var 'aux896' direct represents '0' with '3744'
c Var 'aux896' order represents '1' with '3745'
-3744 3745 0
c Var 'aux896' direct represents '1' with '3746'
3744 -3745 3746 0
-3746 3745 0
-3746 -3744 0
c Var 'aux896' direct represents '2' with '-3745'
3744 3746 -3745 0
c Encoding variable: aux897 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3747'
c Var 'aux897' direct represents '0' with '3747'
c Var 'aux897' order represents '1' with '3748'
-3747 3748 0
c Var 'aux897' direct represents '1' with '3749'
3747 -3748 3749 0
-3749 3748 0
-3749 -3747 0
c Var 'aux897' direct represents '2' with '-3748'
3747 3749 -3748 0
c Encoding variable: aux898 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux897))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3750'
c Var 'aux898' direct represents '0' with '3750'
c Var 'aux898' order represents '1' with '3751'
-3750 3751 0
c Var 'aux898' direct represents '1' with '3752'
3750 -3751 3752 0
-3752 3751 0
-3752 -3750 0
c Var 'aux898' order represents '2' with '3753'
-3751 3753 0
c Var 'aux898' direct represents '2' with '3754'
3751 -3753 3754 0
-3754 3753 0
-3754 -3751 0
c Var 'aux898' direct represents '3' with '-3753'
3750 3752 3754 -3753 0
c Encoding variable: aux899 with domain: int(0..4) (representing constraint (aux894 + aux896))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3755'
c Var 'aux899' direct represents '0' with '3755'
c Var 'aux899' order represents '1' with '3756'
-3755 3756 0
c Var 'aux899' direct represents '1' with '3757'
3755 -3756 3757 0
-3757 3756 0
-3757 -3755 0
c Var 'aux899' order represents '2' with '3758'
-3756 3758 0
c Var 'aux899' direct represents '2' with '3759'
3756 -3758 3759 0
-3759 3758 0
-3759 -3756 0
c Var 'aux899' order represents '3' with '3760'
-3758 3760 0
c Var 'aux899' direct represents '3' with '3761'
3758 -3760 3761 0
-3761 3760 0
-3761 -3758 0
c Var 'aux899' direct represents '4' with '-3760'
3755 3757 3759 3761 -3760 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3762'
c Var 'aux900' direct represents '0' with '3762'
c Var 'aux900' order represents '1' with '3763'
-3762 3763 0
c Var 'aux900' direct represents '1' with '3764'
3762 -3763 3764 0
-3764 3763 0
-3764 -3762 0
c Var 'aux900' direct represents '2' with '-3763'
3762 3764 -3763 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3765'
c Var 'aux901' direct represents '0' with '3765'
c Var 'aux901' order represents '1' with '3766'
-3765 3766 0
c Var 'aux901' direct represents '1' with '3767'
3765 -3766 3767 0
-3767 3766 0
-3767 -3765 0
c Var 'aux901' direct represents '2' with '-3766'
3765 3767 -3766 0
c Encoding variable: aux902 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3768'
c Var 'aux902' direct represents '0' with '3768'
c Var 'aux902' order represents '1' with '3769'
-3768 3769 0
c Var 'aux902' direct represents '1' with '3770'
3768 -3769 3770 0
-3770 3769 0
-3770 -3768 0
c Var 'aux902' direct represents '2' with '-3769'
3768 3770 -3769 0
c Encoding variable: aux903 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3771'
c Var 'aux903' direct represents '0' with '3771'
c Var 'aux903' order represents '1' with '3772'
-3771 3772 0
c Var 'aux903' direct represents '1' with '3773'
3771 -3772 3773 0
-3773 3772 0
-3773 -3771 0
c Var 'aux903' direct represents '2' with '-3772'
3771 3773 -3772 0
c Encoding variable: aux904 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux903))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3774'
c Var 'aux904' direct represents '0' with '3774'
c Var 'aux904' order represents '1' with '3775'
-3774 3775 0
c Var 'aux904' direct represents '1' with '3776'
3774 -3775 3776 0
-3776 3775 0
-3776 -3774 0
c Var 'aux904' order represents '2' with '3777'
-3775 3777 0
c Var 'aux904' direct represents '2' with '3778'
3775 -3777 3778 0
-3778 3777 0
-3778 -3775 0
c Var 'aux904' direct represents '3' with '-3777'
3774 3776 3778 -3777 0
c Encoding variable: aux905 with domain: int(0..4) (representing constraint (aux900 + aux902))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3779'
c Var 'aux905' direct represents '0' with '3779'
c Var 'aux905' order represents '1' with '3780'
-3779 3780 0
c Var 'aux905' direct represents '1' with '3781'
3779 -3780 3781 0
-3781 3780 0
-3781 -3779 0
c Var 'aux905' order represents '2' with '3782'
-3780 3782 0
c Var 'aux905' direct represents '2' with '3783'
3780 -3782 3783 0
-3783 3782 0
-3783 -3780 0
c Var 'aux905' order represents '3' with '3784'
-3782 3784 0
c Var 'aux905' direct represents '3' with '3785'
3782 -3784 3785 0
-3785 3784 0
-3785 -3782 0
c Var 'aux905' direct represents '4' with '-3784'
3779 3781 3783 3785 -3784 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3786'
c Var 'aux906' direct represents '0' with '3786'
c Var 'aux906' order represents '1' with '3787'
-3786 3787 0
c Var 'aux906' direct represents '1' with '3788'
3786 -3787 3788 0
-3788 3787 0
-3788 -3786 0
c Var 'aux906' direct represents '2' with '-3787'
3786 3788 -3787 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3789'
c Var 'aux907' direct represents '0' with '3789'
c Var 'aux907' order represents '1' with '3790'
-3789 3790 0
c Var 'aux907' direct represents '1' with '3791'
3789 -3790 3791 0
-3791 3790 0
-3791 -3789 0
c Var 'aux907' direct represents '2' with '-3790'
3789 3791 -3790 0
c Encoding variable: aux908 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3792'
c Var 'aux908' direct represents '0' with '3792'
c Var 'aux908' order represents '1' with '3793'
-3792 3793 0
c Var 'aux908' direct represents '1' with '3794'
3792 -3793 3794 0
-3794 3793 0
-3794 -3792 0
c Var 'aux908' direct represents '2' with '-3793'
3792 3794 -3793 0
c Encoding variable: aux909 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3795'
c Var 'aux909' direct represents '0' with '3795'
c Var 'aux909' order represents '1' with '3796'
-3795 3796 0
c Var 'aux909' direct represents '1' with '3797'
3795 -3796 3797 0
-3797 3796 0
-3797 -3795 0
c Var 'aux909' direct represents '2' with '-3796'
3795 3797 -3796 0
c Encoding variable: aux910 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux909))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3798'
c Var 'aux910' direct represents '0' with '3798'
c Var 'aux910' order represents '1' with '3799'
-3798 3799 0
c Var 'aux910' direct represents '1' with '3800'
3798 -3799 3800 0
-3800 3799 0
-3800 -3798 0
c Var 'aux910' order represents '2' with '3801'
-3799 3801 0
c Var 'aux910' direct represents '2' with '3802'
3799 -3801 3802 0
-3802 3801 0
-3802 -3799 0
c Var 'aux910' direct represents '3' with '-3801'
3798 3800 3802 -3801 0
c Encoding variable: aux911 with domain: int(0..4) (representing constraint (aux906 + aux908))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3803'
c Var 'aux911' direct represents '0' with '3803'
c Var 'aux911' order represents '1' with '3804'
-3803 3804 0
c Var 'aux911' direct represents '1' with '3805'
3803 -3804 3805 0
-3805 3804 0
-3805 -3803 0
c Var 'aux911' order represents '2' with '3806'
-3804 3806 0
c Var 'aux911' direct represents '2' with '3807'
3804 -3806 3807 0
-3807 3806 0
-3807 -3804 0
c Var 'aux911' order represents '3' with '3808'
-3806 3808 0
c Var 'aux911' direct represents '3' with '3809'
3806 -3808 3809 0
-3809 3808 0
-3809 -3806 0
c Var 'aux911' direct represents '4' with '-3808'
3803 3805 3807 3809 -3808 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3810'
c Var 'aux912' direct represents '0' with '3810'
c Var 'aux912' order represents '1' with '3811'
-3810 3811 0
c Var 'aux912' direct represents '1' with '3812'
3810 -3811 3812 0
-3812 3811 0
-3812 -3810 0
c Var 'aux912' direct represents '2' with '-3811'
3810 3812 -3811 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3813'
c Var 'aux913' direct represents '0' with '3813'
c Var 'aux913' order represents '1' with '3814'
-3813 3814 0
c Var 'aux913' direct represents '1' with '3815'
3813 -3814 3815 0
-3815 3814 0
-3815 -3813 0
c Var 'aux913' direct represents '2' with '-3814'
3813 3815 -3814 0
c Encoding variable: aux914 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3816'
c Var 'aux914' direct represents '0' with '3816'
c Var 'aux914' order represents '1' with '3817'
-3816 3817 0
c Var 'aux914' direct represents '1' with '3818'
3816 -3817 3818 0
-3818 3817 0
-3818 -3816 0
c Var 'aux914' direct represents '2' with '-3817'
3816 3818 -3817 0
c Encoding variable: aux915 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3819'
c Var 'aux915' direct represents '0' with '3819'
c Var 'aux915' order represents '1' with '3820'
-3819 3820 0
c Var 'aux915' direct represents '1' with '3821'
3819 -3820 3821 0
-3821 3820 0
-3821 -3819 0
c Var 'aux915' direct represents '2' with '-3820'
3819 3821 -3820 0
c Encoding variable: aux916 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux915))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3822'
c Var 'aux916' direct represents '0' with '3822'
c Var 'aux916' order represents '1' with '3823'
-3822 3823 0
c Var 'aux916' direct represents '1' with '3824'
3822 -3823 3824 0
-3824 3823 0
-3824 -3822 0
c Var 'aux916' order represents '2' with '3825'
-3823 3825 0
c Var 'aux916' direct represents '2' with '3826'
3823 -3825 3826 0
-3826 3825 0
-3826 -3823 0
c Var 'aux916' direct represents '3' with '-3825'
3822 3824 3826 -3825 0
c Encoding variable: aux917 with domain: int(0..4) (representing constraint (aux912 + aux914))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3827'
c Var 'aux917' direct represents '0' with '3827'
c Var 'aux917' order represents '1' with '3828'
-3827 3828 0
c Var 'aux917' direct represents '1' with '3829'
3827 -3828 3829 0
-3829 3828 0
-3829 -3827 0
c Var 'aux917' order represents '2' with '3830'
-3828 3830 0
c Var 'aux917' direct represents '2' with '3831'
3828 -3830 3831 0
-3831 3830 0
-3831 -3828 0
c Var 'aux917' order represents '3' with '3832'
-3830 3832 0
c Var 'aux917' direct represents '3' with '3833'
3830 -3832 3833 0
-3833 3832 0
-3833 -3830 0
c Var 'aux917' direct represents '4' with '-3832'
3827 3829 3831 3833 -3832 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3834'
c Var 'aux918' direct represents '0' with '3834'
c Var 'aux918' order represents '1' with '3835'
-3834 3835 0
c Var 'aux918' direct represents '1' with '3836'
3834 -3835 3836 0
-3836 3835 0
-3836 -3834 0
c Var 'aux918' direct represents '2' with '-3835'
3834 3836 -3835 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3837'
c Var 'aux919' direct represents '0' with '3837'
c Var 'aux919' order represents '1' with '3838'
-3837 3838 0
c Var 'aux919' direct represents '1' with '3839'
3837 -3838 3839 0
-3839 3838 0
-3839 -3837 0
c Var 'aux919' direct represents '2' with '-3838'
3837 3839 -3838 0
c Encoding variable: aux920 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3840'
c Var 'aux920' direct represents '0' with '3840'
c Var 'aux920' order represents '1' with '3841'
-3840 3841 0
c Var 'aux920' direct represents '1' with '3842'
3840 -3841 3842 0
-3842 3841 0
-3842 -3840 0
c Var 'aux920' direct represents '2' with '-3841'
3840 3842 -3841 0
c Encoding variable: aux921 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3843'
c Var 'aux921' direct represents '0' with '3843'
c Var 'aux921' order represents '1' with '3844'
-3843 3844 0
c Var 'aux921' direct represents '1' with '3845'
3843 -3844 3845 0
-3845 3844 0
-3845 -3843 0
c Var 'aux921' direct represents '2' with '-3844'
3843 3845 -3844 0
c Encoding variable: aux922 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux921))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3846'
c Var 'aux922' direct represents '0' with '3846'
c Var 'aux922' order represents '1' with '3847'
-3846 3847 0
c Var 'aux922' direct represents '1' with '3848'
3846 -3847 3848 0
-3848 3847 0
-3848 -3846 0
c Var 'aux922' order represents '2' with '3849'
-3847 3849 0
c Var 'aux922' direct represents '2' with '3850'
3847 -3849 3850 0
-3850 3849 0
-3850 -3847 0
c Var 'aux922' direct represents '3' with '-3849'
3846 3848 3850 -3849 0
c Encoding variable: aux923 with domain: int(0..4) (representing constraint (aux918 + aux920))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3851'
c Var 'aux923' direct represents '0' with '3851'
c Var 'aux923' order represents '1' with '3852'
-3851 3852 0
c Var 'aux923' direct represents '1' with '3853'
3851 -3852 3853 0
-3853 3852 0
-3853 -3851 0
c Var 'aux923' order represents '2' with '3854'
-3852 3854 0
c Var 'aux923' direct represents '2' with '3855'
3852 -3854 3855 0
-3855 3854 0
-3855 -3852 0
c Var 'aux923' order represents '3' with '3856'
-3854 3856 0
c Var 'aux923' direct represents '3' with '3857'
3854 -3856 3857 0
-3857 3856 0
-3857 -3854 0
c Var 'aux923' direct represents '4' with '-3856'
3851 3853 3855 3857 -3856 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3858'
c Var 'aux924' direct represents '0' with '3858'
c Var 'aux924' order represents '1' with '3859'
-3858 3859 0
c Var 'aux924' direct represents '1' with '3860'
3858 -3859 3860 0
-3860 3859 0
-3860 -3858 0
c Var 'aux924' direct represents '2' with '-3859'
3858 3860 -3859 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3861'
c Var 'aux925' direct represents '0' with '3861'
c Var 'aux925' order represents '1' with '3862'
-3861 3862 0
c Var 'aux925' direct represents '1' with '3863'
3861 -3862 3863 0
-3863 3862 0
-3863 -3861 0
c Var 'aux925' direct represents '2' with '-3862'
3861 3863 -3862 0
c Encoding variable: aux926 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3864'
c Var 'aux926' direct represents '0' with '3864'
c Var 'aux926' order represents '1' with '3865'
-3864 3865 0
c Var 'aux926' direct represents '1' with '3866'
3864 -3865 3866 0
-3866 3865 0
-3866 -3864 0
c Var 'aux926' direct represents '2' with '-3865'
3864 3866 -3865 0
c Encoding variable: aux927 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3867'
c Var 'aux927' direct represents '0' with '3867'
c Var 'aux927' order represents '1' with '3868'
-3867 3868 0
c Var 'aux927' direct represents '1' with '3869'
3867 -3868 3869 0
-3869 3868 0
-3869 -3867 0
c Var 'aux927' direct represents '2' with '-3868'
3867 3869 -3868 0
c Encoding variable: aux928 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux927))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3870'
c Var 'aux928' direct represents '0' with '3870'
c Var 'aux928' order represents '1' with '3871'
-3870 3871 0
c Var 'aux928' direct represents '1' with '3872'
3870 -3871 3872 0
-3872 3871 0
-3872 -3870 0
c Var 'aux928' order represents '2' with '3873'
-3871 3873 0
c Var 'aux928' direct represents '2' with '3874'
3871 -3873 3874 0
-3874 3873 0
-3874 -3871 0
c Var 'aux928' direct represents '3' with '-3873'
3870 3872 3874 -3873 0
c Encoding variable: aux929 with domain: int(0..4) (representing constraint (aux924 + aux926))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3875'
c Var 'aux929' direct represents '0' with '3875'
c Var 'aux929' order represents '1' with '3876'
-3875 3876 0
c Var 'aux929' direct represents '1' with '3877'
3875 -3876 3877 0
-3877 3876 0
-3877 -3875 0
c Var 'aux929' order represents '2' with '3878'
-3876 3878 0
c Var 'aux929' direct represents '2' with '3879'
3876 -3878 3879 0
-3879 3878 0
-3879 -3876 0
c Var 'aux929' order represents '3' with '3880'
-3878 3880 0
c Var 'aux929' direct represents '3' with '3881'
3878 -3880 3881 0
-3881 3880 0
-3881 -3878 0
c Var 'aux929' direct represents '4' with '-3880'
3875 3877 3879 3881 -3880 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3882'
c Var 'aux930' direct represents '0' with '3882'
c Var 'aux930' order represents '1' with '3883'
-3882 3883 0
c Var 'aux930' direct represents '1' with '3884'
3882 -3883 3884 0
-3884 3883 0
-3884 -3882 0
c Var 'aux930' direct represents '2' with '-3883'
3882 3884 -3883 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3885'
c Var 'aux931' direct represents '0' with '3885'
c Var 'aux931' order represents '1' with '3886'
-3885 3886 0
c Var 'aux931' direct represents '1' with '3887'
3885 -3886 3887 0
-3887 3886 0
-3887 -3885 0
c Var 'aux931' direct represents '2' with '-3886'
3885 3887 -3886 0
c Encoding variable: aux932 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '3888'
c Var 'aux932' direct represents '0' with '3888'
c Var 'aux932' order represents '1' with '3889'
-3888 3889 0
c Var 'aux932' direct represents '1' with '3890'
3888 -3889 3890 0
-3890 3889 0
-3890 -3888 0
c Var 'aux932' direct represents '2' with '-3889'
3888 3890 -3889 0
c Encoding variable: aux933 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '3891'
c Var 'aux933' direct represents '0' with '3891'
c Var 'aux933' order represents '1' with '3892'
-3891 3892 0
c Var 'aux933' direct represents '1' with '3893'
3891 -3892 3893 0
-3893 3892 0
-3893 -3891 0
c Var 'aux933' direct represents '2' with '-3892'
3891 3893 -3892 0
c Encoding variable: aux934 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux933))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '3894'
c Var 'aux934' direct represents '0' with '3894'
c Var 'aux934' order represents '1' with '3895'
-3894 3895 0
c Var 'aux934' direct represents '1' with '3896'
3894 -3895 3896 0
-3896 3895 0
-3896 -3894 0
c Var 'aux934' order represents '2' with '3897'
-3895 3897 0
c Var 'aux934' direct represents '2' with '3898'
3895 -3897 3898 0
-3898 3897 0
-3898 -3895 0
c Var 'aux934' direct represents '3' with '-3897'
3894 3896 3898 -3897 0
c Encoding variable: aux935 with domain: int(0..4) (representing constraint (aux930 + aux932))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '3899'
c Var 'aux935' direct represents '0' with '3899'
c Var 'aux935' order represents '1' with '3900'
-3899 3900 0
c Var 'aux935' direct represents '1' with '3901'
3899 -3900 3901 0
-3901 3900 0
-3901 -3899 0
c Var 'aux935' order represents '2' with '3902'
-3900 3902 0
c Var 'aux935' direct represents '2' with '3903'
3900 -3902 3903 0
-3903 3902 0
-3903 -3900 0
c Var 'aux935' order represents '3' with '3904'
-3902 3904 0
c Var 'aux935' direct represents '3' with '3905'
3902 -3904 3905 0
-3905 3904 0
-3905 -3902 0
c Var 'aux935' direct represents '4' with '-3904'
3899 3901 3903 3905 -3904 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '3906'
c Var 'aux936' direct represents '0' with '3906'
c Var 'aux936' order represents '1' with '3907'
-3906 3907 0
c Var 'aux936' direct represents '1' with '3908'
3906 -3907 3908 0
-3908 3907 0
-3908 -3906 0
c Var 'aux936' direct represents '2' with '-3907'
3906 3908 -3907 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '3909'
c Var 'aux937' direct represents '0' with '3909'
c Var 'aux937' order represents '1' with '3910'
-3909 3910 0
c Var 'aux937' direct represents '1' with '3911'
3909 -3910 3911 0
-3911 3910 0
-3911 -3909 0
c Var 'aux937' direct represents '2' with '-3910'
3909 3911 -3910 0
c Encoding variable: aux938 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '3912'
c Var 'aux938' direct represents '0' with '3912'
c Var 'aux938' order represents '1' with '3913'
-3912 3913 0
c Var 'aux938' direct represents '1' with '3914'
3912 -3913 3914 0
-3914 3913 0
-3914 -3912 0
c Var 'aux938' direct represents '2' with '-3913'
3912 3914 -3913 0
c Encoding variable: aux939 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '3915'
c Var 'aux939' direct represents '0' with '3915'
c Var 'aux939' order represents '1' with '3916'
-3915 3916 0
c Var 'aux939' direct represents '1' with '3917'
3915 -3916 3917 0
-3917 3916 0
-3917 -3915 0
c Var 'aux939' direct represents '2' with '-3916'
3915 3917 -3916 0
c Encoding variable: aux940 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux939))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '3918'
c Var 'aux940' direct represents '0' with '3918'
c Var 'aux940' order represents '1' with '3919'
-3918 3919 0
c Var 'aux940' direct represents '1' with '3920'
3918 -3919 3920 0
-3920 3919 0
-3920 -3918 0
c Var 'aux940' order represents '2' with '3921'
-3919 3921 0
c Var 'aux940' direct represents '2' with '3922'
3919 -3921 3922 0
-3922 3921 0
-3922 -3919 0
c Var 'aux940' direct represents '3' with '-3921'
3918 3920 3922 -3921 0
c Encoding variable: aux941 with domain: int(0..4) (representing constraint (aux936 + aux938))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '3923'
c Var 'aux941' direct represents '0' with '3923'
c Var 'aux941' order represents '1' with '3924'
-3923 3924 0
c Var 'aux941' direct represents '1' with '3925'
3923 -3924 3925 0
-3925 3924 0
-3925 -3923 0
c Var 'aux941' order represents '2' with '3926'
-3924 3926 0
c Var 'aux941' direct represents '2' with '3927'
3924 -3926 3927 0
-3927 3926 0
-3927 -3924 0
c Var 'aux941' order represents '3' with '3928'
-3926 3928 0
c Var 'aux941' direct represents '3' with '3929'
3926 -3928 3929 0
-3929 3928 0
-3929 -3926 0
c Var 'aux941' direct represents '4' with '-3928'
3923 3925 3927 3929 -3928 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '3930'
c Var 'aux942' direct represents '0' with '3930'
c Var 'aux942' order represents '1' with '3931'
-3930 3931 0
c Var 'aux942' direct represents '1' with '3932'
3930 -3931 3932 0
-3932 3931 0
-3932 -3930 0
c Var 'aux942' direct represents '2' with '-3931'
3930 3932 -3931 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '3933'
c Var 'aux943' direct represents '0' with '3933'
c Var 'aux943' order represents '1' with '3934'
-3933 3934 0
c Var 'aux943' direct represents '1' with '3935'
3933 -3934 3935 0
-3935 3934 0
-3935 -3933 0
c Var 'aux943' direct represents '2' with '-3934'
3933 3935 -3934 0
c Encoding variable: aux944 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '3936'
c Var 'aux944' direct represents '0' with '3936'
c Var 'aux944' order represents '1' with '3937'
-3936 3937 0
c Var 'aux944' direct represents '1' with '3938'
3936 -3937 3938 0
-3938 3937 0
-3938 -3936 0
c Var 'aux944' direct represents '2' with '-3937'
3936 3938 -3937 0
c Encoding variable: aux945 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '3939'
c Var 'aux945' direct represents '0' with '3939'
c Var 'aux945' order represents '1' with '3940'
-3939 3940 0
c Var 'aux945' direct represents '1' with '3941'
3939 -3940 3941 0
-3941 3940 0
-3941 -3939 0
c Var 'aux945' direct represents '2' with '-3940'
3939 3941 -3940 0
c Encoding variable: aux946 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux945))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '3942'
c Var 'aux946' direct represents '0' with '3942'
c Var 'aux946' order represents '1' with '3943'
-3942 3943 0
c Var 'aux946' direct represents '1' with '3944'
3942 -3943 3944 0
-3944 3943 0
-3944 -3942 0
c Var 'aux946' order represents '2' with '3945'
-3943 3945 0
c Var 'aux946' direct represents '2' with '3946'
3943 -3945 3946 0
-3946 3945 0
-3946 -3943 0
c Var 'aux946' direct represents '3' with '-3945'
3942 3944 3946 -3945 0
c Encoding variable: aux947 with domain: int(0..4) (representing constraint (aux942 + aux944))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '3947'
c Var 'aux947' direct represents '0' with '3947'
c Var 'aux947' order represents '1' with '3948'
-3947 3948 0
c Var 'aux947' direct represents '1' with '3949'
3947 -3948 3949 0
-3949 3948 0
-3949 -3947 0
c Var 'aux947' order represents '2' with '3950'
-3948 3950 0
c Var 'aux947' direct represents '2' with '3951'
3948 -3950 3951 0
-3951 3950 0
-3951 -3948 0
c Var 'aux947' order represents '3' with '3952'
-3950 3952 0
c Var 'aux947' direct represents '3' with '3953'
3950 -3952 3953 0
-3953 3952 0
-3953 -3950 0
c Var 'aux947' direct represents '4' with '-3952'
3947 3949 3951 3953 -3952 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '3954'
c Var 'aux948' direct represents '0' with '3954'
c Var 'aux948' order represents '1' with '3955'
-3954 3955 0
c Var 'aux948' direct represents '1' with '3956'
3954 -3955 3956 0
-3956 3955 0
-3956 -3954 0
c Var 'aux948' direct represents '2' with '-3955'
3954 3956 -3955 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '3957'
c Var 'aux949' direct represents '0' with '3957'
c Var 'aux949' order represents '1' with '3958'
-3957 3958 0
c Var 'aux949' direct represents '1' with '3959'
3957 -3958 3959 0
-3959 3958 0
-3959 -3957 0
c Var 'aux949' direct represents '2' with '-3958'
3957 3959 -3958 0
c Encoding variable: aux950 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '3960'
c Var 'aux950' direct represents '0' with '3960'
c Var 'aux950' order represents '1' with '3961'
-3960 3961 0
c Var 'aux950' direct represents '1' with '3962'
3960 -3961 3962 0
-3962 3961 0
-3962 -3960 0
c Var 'aux950' direct represents '2' with '-3961'
3960 3962 -3961 0
c Encoding variable: aux951 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '3963'
c Var 'aux951' direct represents '0' with '3963'
c Var 'aux951' order represents '1' with '3964'
-3963 3964 0
c Var 'aux951' direct represents '1' with '3965'
3963 -3964 3965 0
-3965 3964 0
-3965 -3963 0
c Var 'aux951' direct represents '2' with '-3964'
3963 3965 -3964 0
c Encoding variable: aux952 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux951))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '3966'
c Var 'aux952' direct represents '0' with '3966'
c Var 'aux952' order represents '1' with '3967'
-3966 3967 0
c Var 'aux952' direct represents '1' with '3968'
3966 -3967 3968 0
-3968 3967 0
-3968 -3966 0
c Var 'aux952' order represents '2' with '3969'
-3967 3969 0
c Var 'aux952' direct represents '2' with '3970'
3967 -3969 3970 0
-3970 3969 0
-3970 -3967 0
c Var 'aux952' direct represents '3' with '-3969'
3966 3968 3970 -3969 0
c Encoding variable: aux953 with domain: int(0..4) (representing constraint (aux948 + aux950))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '3971'
c Var 'aux953' direct represents '0' with '3971'
c Var 'aux953' order represents '1' with '3972'
-3971 3972 0
c Var 'aux953' direct represents '1' with '3973'
3971 -3972 3973 0
-3973 3972 0
-3973 -3971 0
c Var 'aux953' order represents '2' with '3974'
-3972 3974 0
c Var 'aux953' direct represents '2' with '3975'
3972 -3974 3975 0
-3975 3974 0
-3975 -3972 0
c Var 'aux953' order represents '3' with '3976'
-3974 3976 0
c Var 'aux953' direct represents '3' with '3977'
3974 -3976 3977 0
-3977 3976 0
-3977 -3974 0
c Var 'aux953' direct represents '4' with '-3976'
3971 3973 3975 3977 -3976 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '3978'
c Var 'aux954' direct represents '0' with '3978'
c Var 'aux954' order represents '1' with '3979'
-3978 3979 0
c Var 'aux954' direct represents '1' with '3980'
3978 -3979 3980 0
-3980 3979 0
-3980 -3978 0
c Var 'aux954' direct represents '2' with '-3979'
3978 3980 -3979 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '3981'
c Var 'aux955' direct represents '0' with '3981'
c Var 'aux955' order represents '1' with '3982'
-3981 3982 0
c Var 'aux955' direct represents '1' with '3983'
3981 -3982 3983 0
-3983 3982 0
-3983 -3981 0
c Var 'aux955' direct represents '2' with '-3982'
3981 3983 -3982 0
c Encoding variable: aux956 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '3984'
c Var 'aux956' direct represents '0' with '3984'
c Var 'aux956' order represents '1' with '3985'
-3984 3985 0
c Var 'aux956' direct represents '1' with '3986'
3984 -3985 3986 0
-3986 3985 0
-3986 -3984 0
c Var 'aux956' direct represents '2' with '-3985'
3984 3986 -3985 0
c Encoding variable: aux957 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '3987'
c Var 'aux957' direct represents '0' with '3987'
c Var 'aux957' order represents '1' with '3988'
-3987 3988 0
c Var 'aux957' direct represents '1' with '3989'
3987 -3988 3989 0
-3989 3988 0
-3989 -3987 0
c Var 'aux957' direct represents '2' with '-3988'
3987 3989 -3988 0
c Encoding variable: aux958 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux957))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '3990'
c Var 'aux958' direct represents '0' with '3990'
c Var 'aux958' order represents '1' with '3991'
-3990 3991 0
c Var 'aux958' direct represents '1' with '3992'
3990 -3991 3992 0
-3992 3991 0
-3992 -3990 0
c Var 'aux958' order represents '2' with '3993'
-3991 3993 0
c Var 'aux958' direct represents '2' with '3994'
3991 -3993 3994 0
-3994 3993 0
-3994 -3991 0
c Var 'aux958' direct represents '3' with '-3993'
3990 3992 3994 -3993 0
c Encoding variable: aux959 with domain: int(0..4) (representing constraint (aux954 + aux956))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '3995'
c Var 'aux959' direct represents '0' with '3995'
c Var 'aux959' order represents '1' with '3996'
-3995 3996 0
c Var 'aux959' direct represents '1' with '3997'
3995 -3996 3997 0
-3997 3996 0
-3997 -3995 0
c Var 'aux959' order represents '2' with '3998'
-3996 3998 0
c Var 'aux959' direct represents '2' with '3999'
3996 -3998 3999 0
-3999 3998 0
-3999 -3996 0
c Var 'aux959' order represents '3' with '4000'
-3998 4000 0
c Var 'aux959' direct represents '3' with '4001'
3998 -4000 4001 0
-4001 4000 0
-4001 -3998 0
c Var 'aux959' direct represents '4' with '-4000'
3995 3997 3999 4001 -4000 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '4002'
c Var 'aux960' direct represents '0' with '4002'
c Var 'aux960' order represents '1' with '4003'
-4002 4003 0
c Var 'aux960' direct represents '1' with '4004'
4002 -4003 4004 0
-4004 4003 0
-4004 -4002 0
c Var 'aux960' direct represents '2' with '-4003'
4002 4004 -4003 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '4005'
c Var 'aux961' direct represents '0' with '4005'
c Var 'aux961' order represents '1' with '4006'
-4005 4006 0
c Var 'aux961' direct represents '1' with '4007'
4005 -4006 4007 0
-4007 4006 0
-4007 -4005 0
c Var 'aux961' direct represents '2' with '-4006'
4005 4007 -4006 0
c Encoding variable: aux962 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '4008'
c Var 'aux962' direct represents '0' with '4008'
c Var 'aux962' order represents '1' with '4009'
-4008 4009 0
c Var 'aux962' direct represents '1' with '4010'
4008 -4009 4010 0
-4010 4009 0
-4010 -4008 0
c Var 'aux962' direct represents '2' with '-4009'
4008 4010 -4009 0
c Encoding variable: aux963 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '4011'
c Var 'aux963' direct represents '0' with '4011'
c Var 'aux963' order represents '1' with '4012'
-4011 4012 0
c Var 'aux963' direct represents '1' with '4013'
4011 -4012 4013 0
-4013 4012 0
-4013 -4011 0
c Var 'aux963' direct represents '2' with '-4012'
4011 4013 -4012 0
c Encoding variable: aux964 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux963))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '4014'
c Var 'aux964' direct represents '0' with '4014'
c Var 'aux964' order represents '1' with '4015'
-4014 4015 0
c Var 'aux964' direct represents '1' with '4016'
4014 -4015 4016 0
-4016 4015 0
-4016 -4014 0
c Var 'aux964' order represents '2' with '4017'
-4015 4017 0
c Var 'aux964' direct represents '2' with '4018'
4015 -4017 4018 0
-4018 4017 0
-4018 -4015 0
c Var 'aux964' direct represents '3' with '-4017'
4014 4016 4018 -4017 0
c Encoding variable: aux965 with domain: int(0..4) (representing constraint (aux960 + aux962))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '4019'
c Var 'aux965' direct represents '0' with '4019'
c Var 'aux965' order represents '1' with '4020'
-4019 4020 0
c Var 'aux965' direct represents '1' with '4021'
4019 -4020 4021 0
-4021 4020 0
-4021 -4019 0
c Var 'aux965' order represents '2' with '4022'
-4020 4022 0
c Var 'aux965' direct represents '2' with '4023'
4020 -4022 4023 0
-4023 4022 0
-4023 -4020 0
c Var 'aux965' order represents '3' with '4024'
-4022 4024 0
c Var 'aux965' direct represents '3' with '4025'
4022 -4024 4025 0
-4025 4024 0
-4025 -4022 0
c Var 'aux965' direct represents '4' with '-4024'
4019 4021 4023 4025 -4024 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '4026'
c Var 'aux966' direct represents '0' with '4026'
c Var 'aux966' order represents '1' with '4027'
-4026 4027 0
c Var 'aux966' direct represents '1' with '4028'
4026 -4027 4028 0
-4028 4027 0
-4028 -4026 0
c Var 'aux966' direct represents '2' with '-4027'
4026 4028 -4027 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '4029'
c Var 'aux967' direct represents '0' with '4029'
c Var 'aux967' order represents '1' with '4030'
-4029 4030 0
c Var 'aux967' direct represents '1' with '4031'
4029 -4030 4031 0
-4031 4030 0
-4031 -4029 0
c Var 'aux967' direct represents '2' with '-4030'
4029 4031 -4030 0
c Encoding variable: aux968 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '4032'
c Var 'aux968' direct represents '0' with '4032'
c Var 'aux968' order represents '1' with '4033'
-4032 4033 0
c Var 'aux968' direct represents '1' with '4034'
4032 -4033 4034 0
-4034 4033 0
-4034 -4032 0
c Var 'aux968' direct represents '2' with '-4033'
4032 4034 -4033 0
c Encoding variable: aux969 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '4035'
c Var 'aux969' direct represents '0' with '4035'
c Var 'aux969' order represents '1' with '4036'
-4035 4036 0
c Var 'aux969' direct represents '1' with '4037'
4035 -4036 4037 0
-4037 4036 0
-4037 -4035 0
c Var 'aux969' direct represents '2' with '-4036'
4035 4037 -4036 0
c Encoding variable: aux970 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux969))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '4038'
c Var 'aux970' direct represents '0' with '4038'
c Var 'aux970' order represents '1' with '4039'
-4038 4039 0
c Var 'aux970' direct represents '1' with '4040'
4038 -4039 4040 0
-4040 4039 0
-4040 -4038 0
c Var 'aux970' order represents '2' with '4041'
-4039 4041 0
c Var 'aux970' direct represents '2' with '4042'
4039 -4041 4042 0
-4042 4041 0
-4042 -4039 0
c Var 'aux970' direct represents '3' with '-4041'
4038 4040 4042 -4041 0
c Encoding variable: aux971 with domain: int(0..4) (representing constraint (aux966 + aux968))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '4043'
c Var 'aux971' direct represents '0' with '4043'
c Var 'aux971' order represents '1' with '4044'
-4043 4044 0
c Var 'aux971' direct represents '1' with '4045'
4043 -4044 4045 0
-4045 4044 0
-4045 -4043 0
c Var 'aux971' order represents '2' with '4046'
-4044 4046 0
c Var 'aux971' direct represents '2' with '4047'
4044 -4046 4047 0
-4047 4046 0
-4047 -4044 0
c Var 'aux971' order represents '3' with '4048'
-4046 4048 0
c Var 'aux971' direct represents '3' with '4049'
4046 -4048 4049 0
-4049 4048 0
-4049 -4046 0
c Var 'aux971' direct represents '4' with '-4048'
4043 4045 4047 4049 -4048 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '4050'
c Var 'aux972' direct represents '0' with '4050'
c Var 'aux972' order represents '1' with '4051'
-4050 4051 0
c Var 'aux972' direct represents '1' with '4052'
4050 -4051 4052 0
-4052 4051 0
-4052 -4050 0
c Var 'aux972' direct represents '2' with '-4051'
4050 4052 -4051 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '4053'
c Var 'aux973' direct represents '0' with '4053'
c Var 'aux973' order represents '1' with '4054'
-4053 4054 0
c Var 'aux973' direct represents '1' with '4055'
4053 -4054 4055 0
-4055 4054 0
-4055 -4053 0
c Var 'aux973' direct represents '2' with '-4054'
4053 4055 -4054 0
c Encoding variable: aux974 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '4056'
c Var 'aux974' direct represents '0' with '4056'
c Var 'aux974' order represents '1' with '4057'
-4056 4057 0
c Var 'aux974' direct represents '1' with '4058'
4056 -4057 4058 0
-4058 4057 0
-4058 -4056 0
c Var 'aux974' direct represents '2' with '-4057'
4056 4058 -4057 0
c Encoding variable: aux975 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '4059'
c Var 'aux975' direct represents '0' with '4059'
c Var 'aux975' order represents '1' with '4060'
-4059 4060 0
c Var 'aux975' direct represents '1' with '4061'
4059 -4060 4061 0
-4061 4060 0
-4061 -4059 0
c Var 'aux975' direct represents '2' with '-4060'
4059 4061 -4060 0
c Encoding variable: aux976 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux975))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '4062'
c Var 'aux976' direct represents '0' with '4062'
c Var 'aux976' order represents '1' with '4063'
-4062 4063 0
c Var 'aux976' direct represents '1' with '4064'
4062 -4063 4064 0
-4064 4063 0
-4064 -4062 0
c Var 'aux976' order represents '2' with '4065'
-4063 4065 0
c Var 'aux976' direct represents '2' with '4066'
4063 -4065 4066 0
-4066 4065 0
-4066 -4063 0
c Var 'aux976' direct represents '3' with '-4065'
4062 4064 4066 -4065 0
c Encoding variable: aux977 with domain: int(0..4) (representing constraint (aux972 + aux974))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '4067'
c Var 'aux977' direct represents '0' with '4067'
c Var 'aux977' order represents '1' with '4068'
-4067 4068 0
c Var 'aux977' direct represents '1' with '4069'
4067 -4068 4069 0
-4069 4068 0
-4069 -4067 0
c Var 'aux977' order represents '2' with '4070'
-4068 4070 0
c Var 'aux977' direct represents '2' with '4071'
4068 -4070 4071 0
-4071 4070 0
-4071 -4068 0
c Var 'aux977' order represents '3' with '4072'
-4070 4072 0
c Var 'aux977' direct represents '3' with '4073'
4070 -4072 4073 0
-4073 4072 0
-4073 -4070 0
c Var 'aux977' direct represents '4' with '-4072'
4067 4069 4071 4073 -4072 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '4074'
c Var 'aux978' direct represents '0' with '4074'
c Var 'aux978' order represents '1' with '4075'
-4074 4075 0
c Var 'aux978' direct represents '1' with '4076'
4074 -4075 4076 0
-4076 4075 0
-4076 -4074 0
c Var 'aux978' direct represents '2' with '-4075'
4074 4076 -4075 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '4077'
c Var 'aux979' direct represents '0' with '4077'
c Var 'aux979' order represents '1' with '4078'
-4077 4078 0
c Var 'aux979' direct represents '1' with '4079'
4077 -4078 4079 0
-4079 4078 0
-4079 -4077 0
c Var 'aux979' direct represents '2' with '-4078'
4077 4079 -4078 0
c Encoding variable: aux980 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '4080'
c Var 'aux980' direct represents '0' with '4080'
c Var 'aux980' order represents '1' with '4081'
-4080 4081 0
c Var 'aux980' direct represents '1' with '4082'
4080 -4081 4082 0
-4082 4081 0
-4082 -4080 0
c Var 'aux980' direct represents '2' with '-4081'
4080 4082 -4081 0
c Encoding variable: aux981 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '4083'
c Var 'aux981' direct represents '0' with '4083'
c Var 'aux981' order represents '1' with '4084'
-4083 4084 0
c Var 'aux981' direct represents '1' with '4085'
4083 -4084 4085 0
-4085 4084 0
-4085 -4083 0
c Var 'aux981' direct represents '2' with '-4084'
4083 4085 -4084 0
c Encoding variable: aux982 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux981))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '4086'
c Var 'aux982' direct represents '0' with '4086'
c Var 'aux982' order represents '1' with '4087'
-4086 4087 0
c Var 'aux982' direct represents '1' with '4088'
4086 -4087 4088 0
-4088 4087 0
-4088 -4086 0
c Var 'aux982' order represents '2' with '4089'
-4087 4089 0
c Var 'aux982' direct represents '2' with '4090'
4087 -4089 4090 0
-4090 4089 0
-4090 -4087 0
c Var 'aux982' direct represents '3' with '-4089'
4086 4088 4090 -4089 0
c Encoding variable: aux983 with domain: int(0..4) (representing constraint (aux978 + aux980))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '4091'
c Var 'aux983' direct represents '0' with '4091'
c Var 'aux983' order represents '1' with '4092'
-4091 4092 0
c Var 'aux983' direct represents '1' with '4093'
4091 -4092 4093 0
-4093 4092 0
-4093 -4091 0
c Var 'aux983' order represents '2' with '4094'
-4092 4094 0
c Var 'aux983' direct represents '2' with '4095'
4092 -4094 4095 0
-4095 4094 0
-4095 -4092 0
c Var 'aux983' order represents '3' with '4096'
-4094 4096 0
c Var 'aux983' direct represents '3' with '4097'
4094 -4096 4097 0
-4097 4096 0
-4097 -4094 0
c Var 'aux983' direct represents '4' with '-4096'
4091 4093 4095 4097 -4096 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '4098'
c Var 'aux984' direct represents '0' with '4098'
c Var 'aux984' order represents '1' with '4099'
-4098 4099 0
c Var 'aux984' direct represents '1' with '4100'
4098 -4099 4100 0
-4100 4099 0
-4100 -4098 0
c Var 'aux984' direct represents '2' with '-4099'
4098 4100 -4099 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '4101'
c Var 'aux985' direct represents '0' with '4101'
c Var 'aux985' order represents '1' with '4102'
-4101 4102 0
c Var 'aux985' direct represents '1' with '4103'
4101 -4102 4103 0
-4103 4102 0
-4103 -4101 0
c Var 'aux985' direct represents '2' with '-4102'
4101 4103 -4102 0
c Encoding variable: aux986 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '4104'
c Var 'aux986' direct represents '0' with '4104'
c Var 'aux986' order represents '1' with '4105'
-4104 4105 0
c Var 'aux986' direct represents '1' with '4106'
4104 -4105 4106 0
-4106 4105 0
-4106 -4104 0
c Var 'aux986' direct represents '2' with '-4105'
4104 4106 -4105 0
c Encoding variable: aux987 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '4107'
c Var 'aux987' direct represents '0' with '4107'
c Var 'aux987' order represents '1' with '4108'
-4107 4108 0
c Var 'aux987' direct represents '1' with '4109'
4107 -4108 4109 0
-4109 4108 0
-4109 -4107 0
c Var 'aux987' direct represents '2' with '-4108'
4107 4109 -4108 0
c Encoding variable: aux988 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux987))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4110'
c Var 'aux988' direct represents '0' with '4110'
c Var 'aux988' order represents '1' with '4111'
-4110 4111 0
c Var 'aux988' direct represents '1' with '4112'
4110 -4111 4112 0
-4112 4111 0
-4112 -4110 0
c Var 'aux988' order represents '2' with '4113'
-4111 4113 0
c Var 'aux988' direct represents '2' with '4114'
4111 -4113 4114 0
-4114 4113 0
-4114 -4111 0
c Var 'aux988' direct represents '3' with '-4113'
4110 4112 4114 -4113 0
c Encoding variable: aux989 with domain: int(0..4) (representing constraint (aux984 + aux986))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4115'
c Var 'aux989' direct represents '0' with '4115'
c Var 'aux989' order represents '1' with '4116'
-4115 4116 0
c Var 'aux989' direct represents '1' with '4117'
4115 -4116 4117 0
-4117 4116 0
-4117 -4115 0
c Var 'aux989' order represents '2' with '4118'
-4116 4118 0
c Var 'aux989' direct represents '2' with '4119'
4116 -4118 4119 0
-4119 4118 0
-4119 -4116 0
c Var 'aux989' order represents '3' with '4120'
-4118 4120 0
c Var 'aux989' direct represents '3' with '4121'
4118 -4120 4121 0
-4121 4120 0
-4121 -4118 0
c Var 'aux989' direct represents '4' with '-4120'
4115 4117 4119 4121 -4120 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4122'
c Var 'aux990' direct represents '0' with '4122'
c Var 'aux990' order represents '1' with '4123'
-4122 4123 0
c Var 'aux990' direct represents '1' with '4124'
4122 -4123 4124 0
-4124 4123 0
-4124 -4122 0
c Var 'aux990' direct represents '2' with '-4123'
4122 4124 -4123 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4125'
c Var 'aux991' direct represents '0' with '4125'
c Var 'aux991' order represents '1' with '4126'
-4125 4126 0
c Var 'aux991' direct represents '1' with '4127'
4125 -4126 4127 0
-4127 4126 0
-4127 -4125 0
c Var 'aux991' direct represents '2' with '-4126'
4125 4127 -4126 0
c Encoding variable: aux992 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4128'
c Var 'aux992' direct represents '0' with '4128'
c Var 'aux992' order represents '1' with '4129'
-4128 4129 0
c Var 'aux992' direct represents '1' with '4130'
4128 -4129 4130 0
-4130 4129 0
-4130 -4128 0
c Var 'aux992' direct represents '2' with '-4129'
4128 4130 -4129 0
c Encoding variable: aux993 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4131'
c Var 'aux993' direct represents '0' with '4131'
c Var 'aux993' order represents '1' with '4132'
-4131 4132 0
c Var 'aux993' direct represents '1' with '4133'
4131 -4132 4133 0
-4133 4132 0
-4133 -4131 0
c Var 'aux993' direct represents '2' with '-4132'
4131 4133 -4132 0
c Encoding variable: aux994 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux993))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4134'
c Var 'aux994' direct represents '0' with '4134'
c Var 'aux994' order represents '1' with '4135'
-4134 4135 0
c Var 'aux994' direct represents '1' with '4136'
4134 -4135 4136 0
-4136 4135 0
-4136 -4134 0
c Var 'aux994' order represents '2' with '4137'
-4135 4137 0
c Var 'aux994' direct represents '2' with '4138'
4135 -4137 4138 0
-4138 4137 0
-4138 -4135 0
c Var 'aux994' direct represents '3' with '-4137'
4134 4136 4138 -4137 0
c Encoding variable: aux995 with domain: int(0..4) (representing constraint (aux990 + aux992))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4139'
c Var 'aux995' direct represents '0' with '4139'
c Var 'aux995' order represents '1' with '4140'
-4139 4140 0
c Var 'aux995' direct represents '1' with '4141'
4139 -4140 4141 0
-4141 4140 0
-4141 -4139 0
c Var 'aux995' order represents '2' with '4142'
-4140 4142 0
c Var 'aux995' direct represents '2' with '4143'
4140 -4142 4143 0
-4143 4142 0
-4143 -4140 0
c Var 'aux995' order represents '3' with '4144'
-4142 4144 0
c Var 'aux995' direct represents '3' with '4145'
4142 -4144 4145 0
-4145 4144 0
-4145 -4142 0
c Var 'aux995' direct represents '4' with '-4144'
4139 4141 4143 4145 -4144 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4146'
c Var 'aux996' direct represents '0' with '4146'
c Var 'aux996' order represents '1' with '4147'
-4146 4147 0
c Var 'aux996' direct represents '1' with '4148'
4146 -4147 4148 0
-4148 4147 0
-4148 -4146 0
c Var 'aux996' direct represents '2' with '-4147'
4146 4148 -4147 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4149'
c Var 'aux997' direct represents '0' with '4149'
c Var 'aux997' order represents '1' with '4150'
-4149 4150 0
c Var 'aux997' direct represents '1' with '4151'
4149 -4150 4151 0
-4151 4150 0
-4151 -4149 0
c Var 'aux997' direct represents '2' with '-4150'
4149 4151 -4150 0
c Encoding variable: aux998 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4152'
c Var 'aux998' direct represents '0' with '4152'
c Var 'aux998' order represents '1' with '4153'
-4152 4153 0
c Var 'aux998' direct represents '1' with '4154'
4152 -4153 4154 0
-4154 4153 0
-4154 -4152 0
c Var 'aux998' direct represents '2' with '-4153'
4152 4154 -4153 0
c Encoding variable: aux999 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4155'
c Var 'aux999' direct represents '0' with '4155'
c Var 'aux999' order represents '1' with '4156'
-4155 4156 0
c Var 'aux999' direct represents '1' with '4157'
4155 -4156 4157 0
-4157 4156 0
-4157 -4155 0
c Var 'aux999' direct represents '2' with '-4156'
4155 4157 -4156 0
c Encoding variable: aux1000 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux999))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4158'
c Var 'aux1000' direct represents '0' with '4158'
c Var 'aux1000' order represents '1' with '4159'
-4158 4159 0
c Var 'aux1000' direct represents '1' with '4160'
4158 -4159 4160 0
-4160 4159 0
-4160 -4158 0
c Var 'aux1000' order represents '2' with '4161'
-4159 4161 0
c Var 'aux1000' direct represents '2' with '4162'
4159 -4161 4162 0
-4162 4161 0
-4162 -4159 0
c Var 'aux1000' direct represents '3' with '-4161'
4158 4160 4162 -4161 0
c Encoding variable: aux1001 with domain: int(0..4) (representing constraint (aux996 + aux998))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4163'
c Var 'aux1001' direct represents '0' with '4163'
c Var 'aux1001' order represents '1' with '4164'
-4163 4164 0
c Var 'aux1001' direct represents '1' with '4165'
4163 -4164 4165 0
-4165 4164 0
-4165 -4163 0
c Var 'aux1001' order represents '2' with '4166'
-4164 4166 0
c Var 'aux1001' direct represents '2' with '4167'
4164 -4166 4167 0
-4167 4166 0
-4167 -4164 0
c Var 'aux1001' order represents '3' with '4168'
-4166 4168 0
c Var 'aux1001' direct represents '3' with '4169'
4166 -4168 4169 0
-4169 4168 0
-4169 -4166 0
c Var 'aux1001' direct represents '4' with '-4168'
4163 4165 4167 4169 -4168 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4170'
c Var 'aux1002' direct represents '0' with '4170'
c Var 'aux1002' order represents '1' with '4171'
-4170 4171 0
c Var 'aux1002' direct represents '1' with '4172'
4170 -4171 4172 0
-4172 4171 0
-4172 -4170 0
c Var 'aux1002' direct represents '2' with '-4171'
4170 4172 -4171 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4173'
c Var 'aux1003' direct represents '0' with '4173'
c Var 'aux1003' order represents '1' with '4174'
-4173 4174 0
c Var 'aux1003' direct represents '1' with '4175'
4173 -4174 4175 0
-4175 4174 0
-4175 -4173 0
c Var 'aux1003' direct represents '2' with '-4174'
4173 4175 -4174 0
c Encoding variable: aux1004 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4176'
c Var 'aux1004' direct represents '0' with '4176'
c Var 'aux1004' order represents '1' with '4177'
-4176 4177 0
c Var 'aux1004' direct represents '1' with '4178'
4176 -4177 4178 0
-4178 4177 0
-4178 -4176 0
c Var 'aux1004' direct represents '2' with '-4177'
4176 4178 -4177 0
c Encoding variable: aux1005 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4179'
c Var 'aux1005' direct represents '0' with '4179'
c Var 'aux1005' order represents '1' with '4180'
-4179 4180 0
c Var 'aux1005' direct represents '1' with '4181'
4179 -4180 4181 0
-4181 4180 0
-4181 -4179 0
c Var 'aux1005' direct represents '2' with '-4180'
4179 4181 -4180 0
c Encoding variable: aux1006 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1005))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4182'
c Var 'aux1006' direct represents '0' with '4182'
c Var 'aux1006' order represents '1' with '4183'
-4182 4183 0
c Var 'aux1006' direct represents '1' with '4184'
4182 -4183 4184 0
-4184 4183 0
-4184 -4182 0
c Var 'aux1006' order represents '2' with '4185'
-4183 4185 0
c Var 'aux1006' direct represents '2' with '4186'
4183 -4185 4186 0
-4186 4185 0
-4186 -4183 0
c Var 'aux1006' direct represents '3' with '-4185'
4182 4184 4186 -4185 0
c Encoding variable: aux1007 with domain: int(0..4) (representing constraint (aux1002 + aux1004))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4187'
c Var 'aux1007' direct represents '0' with '4187'
c Var 'aux1007' order represents '1' with '4188'
-4187 4188 0
c Var 'aux1007' direct represents '1' with '4189'
4187 -4188 4189 0
-4189 4188 0
-4189 -4187 0
c Var 'aux1007' order represents '2' with '4190'
-4188 4190 0
c Var 'aux1007' direct represents '2' with '4191'
4188 -4190 4191 0
-4191 4190 0
-4191 -4188 0
c Var 'aux1007' order represents '3' with '4192'
-4190 4192 0
c Var 'aux1007' direct represents '3' with '4193'
4190 -4192 4193 0
-4193 4192 0
-4193 -4190 0
c Var 'aux1007' direct represents '4' with '-4192'
4187 4189 4191 4193 -4192 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4194'
c Var 'aux1008' direct represents '0' with '4194'
c Var 'aux1008' order represents '1' with '4195'
-4194 4195 0
c Var 'aux1008' direct represents '1' with '4196'
4194 -4195 4196 0
-4196 4195 0
-4196 -4194 0
c Var 'aux1008' direct represents '2' with '-4195'
4194 4196 -4195 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4197'
c Var 'aux1009' direct represents '0' with '4197'
c Var 'aux1009' order represents '1' with '4198'
-4197 4198 0
c Var 'aux1009' direct represents '1' with '4199'
4197 -4198 4199 0
-4199 4198 0
-4199 -4197 0
c Var 'aux1009' direct represents '2' with '-4198'
4197 4199 -4198 0
c Encoding variable: aux1010 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4200'
c Var 'aux1010' direct represents '0' with '4200'
c Var 'aux1010' order represents '1' with '4201'
-4200 4201 0
c Var 'aux1010' direct represents '1' with '4202'
4200 -4201 4202 0
-4202 4201 0
-4202 -4200 0
c Var 'aux1010' direct represents '2' with '-4201'
4200 4202 -4201 0
c Encoding variable: aux1011 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4203'
c Var 'aux1011' direct represents '0' with '4203'
c Var 'aux1011' order represents '1' with '4204'
-4203 4204 0
c Var 'aux1011' direct represents '1' with '4205'
4203 -4204 4205 0
-4205 4204 0
-4205 -4203 0
c Var 'aux1011' direct represents '2' with '-4204'
4203 4205 -4204 0
c Encoding variable: aux1012 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1011))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4206'
c Var 'aux1012' direct represents '0' with '4206'
c Var 'aux1012' order represents '1' with '4207'
-4206 4207 0
c Var 'aux1012' direct represents '1' with '4208'
4206 -4207 4208 0
-4208 4207 0
-4208 -4206 0
c Var 'aux1012' order represents '2' with '4209'
-4207 4209 0
c Var 'aux1012' direct represents '2' with '4210'
4207 -4209 4210 0
-4210 4209 0
-4210 -4207 0
c Var 'aux1012' direct represents '3' with '-4209'
4206 4208 4210 -4209 0
c Encoding variable: aux1013 with domain: int(0..4) (representing constraint (aux1008 + aux1010))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4211'
c Var 'aux1013' direct represents '0' with '4211'
c Var 'aux1013' order represents '1' with '4212'
-4211 4212 0
c Var 'aux1013' direct represents '1' with '4213'
4211 -4212 4213 0
-4213 4212 0
-4213 -4211 0
c Var 'aux1013' order represents '2' with '4214'
-4212 4214 0
c Var 'aux1013' direct represents '2' with '4215'
4212 -4214 4215 0
-4215 4214 0
-4215 -4212 0
c Var 'aux1013' order represents '3' with '4216'
-4214 4216 0
c Var 'aux1013' direct represents '3' with '4217'
4214 -4216 4217 0
-4217 4216 0
-4217 -4214 0
c Var 'aux1013' direct represents '4' with '-4216'
4211 4213 4215 4217 -4216 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4218'
c Var 'aux1014' direct represents '0' with '4218'
c Var 'aux1014' order represents '1' with '4219'
-4218 4219 0
c Var 'aux1014' direct represents '1' with '4220'
4218 -4219 4220 0
-4220 4219 0
-4220 -4218 0
c Var 'aux1014' direct represents '2' with '-4219'
4218 4220 -4219 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4221'
c Var 'aux1015' direct represents '0' with '4221'
c Var 'aux1015' order represents '1' with '4222'
-4221 4222 0
c Var 'aux1015' direct represents '1' with '4223'
4221 -4222 4223 0
-4223 4222 0
-4223 -4221 0
c Var 'aux1015' direct represents '2' with '-4222'
4221 4223 -4222 0
c Encoding variable: aux1016 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4224'
c Var 'aux1016' direct represents '0' with '4224'
c Var 'aux1016' order represents '1' with '4225'
-4224 4225 0
c Var 'aux1016' direct represents '1' with '4226'
4224 -4225 4226 0
-4226 4225 0
-4226 -4224 0
c Var 'aux1016' direct represents '2' with '-4225'
4224 4226 -4225 0
c Encoding variable: aux1017 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4227'
c Var 'aux1017' direct represents '0' with '4227'
c Var 'aux1017' order represents '1' with '4228'
-4227 4228 0
c Var 'aux1017' direct represents '1' with '4229'
4227 -4228 4229 0
-4229 4228 0
-4229 -4227 0
c Var 'aux1017' direct represents '2' with '-4228'
4227 4229 -4228 0
c Encoding variable: aux1018 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1017))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4230'
c Var 'aux1018' direct represents '0' with '4230'
c Var 'aux1018' order represents '1' with '4231'
-4230 4231 0
c Var 'aux1018' direct represents '1' with '4232'
4230 -4231 4232 0
-4232 4231 0
-4232 -4230 0
c Var 'aux1018' order represents '2' with '4233'
-4231 4233 0
c Var 'aux1018' direct represents '2' with '4234'
4231 -4233 4234 0
-4234 4233 0
-4234 -4231 0
c Var 'aux1018' direct represents '3' with '-4233'
4230 4232 4234 -4233 0
c Encoding variable: aux1019 with domain: int(0..4) (representing constraint (aux1014 + aux1016))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4235'
c Var 'aux1019' direct represents '0' with '4235'
c Var 'aux1019' order represents '1' with '4236'
-4235 4236 0
c Var 'aux1019' direct represents '1' with '4237'
4235 -4236 4237 0
-4237 4236 0
-4237 -4235 0
c Var 'aux1019' order represents '2' with '4238'
-4236 4238 0
c Var 'aux1019' direct represents '2' with '4239'
4236 -4238 4239 0
-4239 4238 0
-4239 -4236 0
c Var 'aux1019' order represents '3' with '4240'
-4238 4240 0
c Var 'aux1019' direct represents '3' with '4241'
4238 -4240 4241 0
-4241 4240 0
-4241 -4238 0
c Var 'aux1019' direct represents '4' with '-4240'
4235 4237 4239 4241 -4240 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4242'
c Var 'aux1020' direct represents '0' with '4242'
c Var 'aux1020' order represents '1' with '4243'
-4242 4243 0
c Var 'aux1020' direct represents '1' with '4244'
4242 -4243 4244 0
-4244 4243 0
-4244 -4242 0
c Var 'aux1020' direct represents '2' with '-4243'
4242 4244 -4243 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4245'
c Var 'aux1021' direct represents '0' with '4245'
c Var 'aux1021' order represents '1' with '4246'
-4245 4246 0
c Var 'aux1021' direct represents '1' with '4247'
4245 -4246 4247 0
-4247 4246 0
-4247 -4245 0
c Var 'aux1021' direct represents '2' with '-4246'
4245 4247 -4246 0
c Encoding variable: aux1022 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4248'
c Var 'aux1022' direct represents '0' with '4248'
c Var 'aux1022' order represents '1' with '4249'
-4248 4249 0
c Var 'aux1022' direct represents '1' with '4250'
4248 -4249 4250 0
-4250 4249 0
-4250 -4248 0
c Var 'aux1022' direct represents '2' with '-4249'
4248 4250 -4249 0
c Encoding variable: aux1023 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4251'
c Var 'aux1023' direct represents '0' with '4251'
c Var 'aux1023' order represents '1' with '4252'
-4251 4252 0
c Var 'aux1023' direct represents '1' with '4253'
4251 -4252 4253 0
-4253 4252 0
-4253 -4251 0
c Var 'aux1023' direct represents '2' with '-4252'
4251 4253 -4252 0
c Encoding variable: aux1024 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1023))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4254'
c Var 'aux1024' direct represents '0' with '4254'
c Var 'aux1024' order represents '1' with '4255'
-4254 4255 0
c Var 'aux1024' direct represents '1' with '4256'
4254 -4255 4256 0
-4256 4255 0
-4256 -4254 0
c Var 'aux1024' order represents '2' with '4257'
-4255 4257 0
c Var 'aux1024' direct represents '2' with '4258'
4255 -4257 4258 0
-4258 4257 0
-4258 -4255 0
c Var 'aux1024' direct represents '3' with '-4257'
4254 4256 4258 -4257 0
c Encoding variable: aux1025 with domain: int(0..4) (representing constraint (aux1020 + aux1022))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4259'
c Var 'aux1025' direct represents '0' with '4259'
c Var 'aux1025' order represents '1' with '4260'
-4259 4260 0
c Var 'aux1025' direct represents '1' with '4261'
4259 -4260 4261 0
-4261 4260 0
-4261 -4259 0
c Var 'aux1025' order represents '2' with '4262'
-4260 4262 0
c Var 'aux1025' direct represents '2' with '4263'
4260 -4262 4263 0
-4263 4262 0
-4263 -4260 0
c Var 'aux1025' order represents '3' with '4264'
-4262 4264 0
c Var 'aux1025' direct represents '3' with '4265'
4262 -4264 4265 0
-4265 4264 0
-4265 -4262 0
c Var 'aux1025' direct represents '4' with '-4264'
4259 4261 4263 4265 -4264 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4266'
c Var 'aux1026' direct represents '0' with '4266'
c Var 'aux1026' order represents '1' with '4267'
-4266 4267 0
c Var 'aux1026' direct represents '1' with '4268'
4266 -4267 4268 0
-4268 4267 0
-4268 -4266 0
c Var 'aux1026' direct represents '2' with '-4267'
4266 4268 -4267 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4269'
c Var 'aux1027' direct represents '0' with '4269'
c Var 'aux1027' order represents '1' with '4270'
-4269 4270 0
c Var 'aux1027' direct represents '1' with '4271'
4269 -4270 4271 0
-4271 4270 0
-4271 -4269 0
c Var 'aux1027' direct represents '2' with '-4270'
4269 4271 -4270 0
c Encoding variable: aux1028 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4272'
c Var 'aux1028' direct represents '0' with '4272'
c Var 'aux1028' order represents '1' with '4273'
-4272 4273 0
c Var 'aux1028' direct represents '1' with '4274'
4272 -4273 4274 0
-4274 4273 0
-4274 -4272 0
c Var 'aux1028' direct represents '2' with '-4273'
4272 4274 -4273 0
c Encoding variable: aux1029 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4275'
c Var 'aux1029' direct represents '0' with '4275'
c Var 'aux1029' order represents '1' with '4276'
-4275 4276 0
c Var 'aux1029' direct represents '1' with '4277'
4275 -4276 4277 0
-4277 4276 0
-4277 -4275 0
c Var 'aux1029' direct represents '2' with '-4276'
4275 4277 -4276 0
c Encoding variable: aux1030 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1029))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4278'
c Var 'aux1030' direct represents '0' with '4278'
c Var 'aux1030' order represents '1' with '4279'
-4278 4279 0
c Var 'aux1030' direct represents '1' with '4280'
4278 -4279 4280 0
-4280 4279 0
-4280 -4278 0
c Var 'aux1030' order represents '2' with '4281'
-4279 4281 0
c Var 'aux1030' direct represents '2' with '4282'
4279 -4281 4282 0
-4282 4281 0
-4282 -4279 0
c Var 'aux1030' direct represents '3' with '-4281'
4278 4280 4282 -4281 0
c Encoding variable: aux1031 with domain: int(0..4) (representing constraint (aux1026 + aux1028))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4283'
c Var 'aux1031' direct represents '0' with '4283'
c Var 'aux1031' order represents '1' with '4284'
-4283 4284 0
c Var 'aux1031' direct represents '1' with '4285'
4283 -4284 4285 0
-4285 4284 0
-4285 -4283 0
c Var 'aux1031' order represents '2' with '4286'
-4284 4286 0
c Var 'aux1031' direct represents '2' with '4287'
4284 -4286 4287 0
-4287 4286 0
-4287 -4284 0
c Var 'aux1031' order represents '3' with '4288'
-4286 4288 0
c Var 'aux1031' direct represents '3' with '4289'
4286 -4288 4289 0
-4289 4288 0
-4289 -4286 0
c Var 'aux1031' direct represents '4' with '-4288'
4283 4285 4287 4289 -4288 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4290'
c Var 'aux1032' direct represents '0' with '4290'
c Var 'aux1032' order represents '1' with '4291'
-4290 4291 0
c Var 'aux1032' direct represents '1' with '4292'
4290 -4291 4292 0
-4292 4291 0
-4292 -4290 0
c Var 'aux1032' direct represents '2' with '-4291'
4290 4292 -4291 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4293'
c Var 'aux1033' direct represents '0' with '4293'
c Var 'aux1033' order represents '1' with '4294'
-4293 4294 0
c Var 'aux1033' direct represents '1' with '4295'
4293 -4294 4295 0
-4295 4294 0
-4295 -4293 0
c Var 'aux1033' direct represents '2' with '-4294'
4293 4295 -4294 0
c Encoding variable: aux1034 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4296'
c Var 'aux1034' direct represents '0' with '4296'
c Var 'aux1034' order represents '1' with '4297'
-4296 4297 0
c Var 'aux1034' direct represents '1' with '4298'
4296 -4297 4298 0
-4298 4297 0
-4298 -4296 0
c Var 'aux1034' direct represents '2' with '-4297'
4296 4298 -4297 0
c Encoding variable: aux1035 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4299'
c Var 'aux1035' direct represents '0' with '4299'
c Var 'aux1035' order represents '1' with '4300'
-4299 4300 0
c Var 'aux1035' direct represents '1' with '4301'
4299 -4300 4301 0
-4301 4300 0
-4301 -4299 0
c Var 'aux1035' direct represents '2' with '-4300'
4299 4301 -4300 0
c Encoding variable: aux1036 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1035))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4302'
c Var 'aux1036' direct represents '0' with '4302'
c Var 'aux1036' order represents '1' with '4303'
-4302 4303 0
c Var 'aux1036' direct represents '1' with '4304'
4302 -4303 4304 0
-4304 4303 0
-4304 -4302 0
c Var 'aux1036' order represents '2' with '4305'
-4303 4305 0
c Var 'aux1036' direct represents '2' with '4306'
4303 -4305 4306 0
-4306 4305 0
-4306 -4303 0
c Var 'aux1036' direct represents '3' with '-4305'
4302 4304 4306 -4305 0
c Encoding variable: aux1037 with domain: int(0..4) (representing constraint (aux1032 + aux1034))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4307'
c Var 'aux1037' direct represents '0' with '4307'
c Var 'aux1037' order represents '1' with '4308'
-4307 4308 0
c Var 'aux1037' direct represents '1' with '4309'
4307 -4308 4309 0
-4309 4308 0
-4309 -4307 0
c Var 'aux1037' order represents '2' with '4310'
-4308 4310 0
c Var 'aux1037' direct represents '2' with '4311'
4308 -4310 4311 0
-4311 4310 0
-4311 -4308 0
c Var 'aux1037' order represents '3' with '4312'
-4310 4312 0
c Var 'aux1037' direct represents '3' with '4313'
4310 -4312 4313 0
-4313 4312 0
-4313 -4310 0
c Var 'aux1037' direct represents '4' with '-4312'
4307 4309 4311 4313 -4312 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4314'
c Var 'aux1038' direct represents '0' with '4314'
c Var 'aux1038' order represents '1' with '4315'
-4314 4315 0
c Var 'aux1038' direct represents '1' with '4316'
4314 -4315 4316 0
-4316 4315 0
-4316 -4314 0
c Var 'aux1038' direct represents '2' with '-4315'
4314 4316 -4315 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4317'
c Var 'aux1039' direct represents '0' with '4317'
c Var 'aux1039' order represents '1' with '4318'
-4317 4318 0
c Var 'aux1039' direct represents '1' with '4319'
4317 -4318 4319 0
-4319 4318 0
-4319 -4317 0
c Var 'aux1039' direct represents '2' with '-4318'
4317 4319 -4318 0
c Encoding variable: aux1040 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4320'
c Var 'aux1040' direct represents '0' with '4320'
c Var 'aux1040' order represents '1' with '4321'
-4320 4321 0
c Var 'aux1040' direct represents '1' with '4322'
4320 -4321 4322 0
-4322 4321 0
-4322 -4320 0
c Var 'aux1040' direct represents '2' with '-4321'
4320 4322 -4321 0
c Encoding variable: aux1041 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4323'
c Var 'aux1041' direct represents '0' with '4323'
c Var 'aux1041' order represents '1' with '4324'
-4323 4324 0
c Var 'aux1041' direct represents '1' with '4325'
4323 -4324 4325 0
-4325 4324 0
-4325 -4323 0
c Var 'aux1041' direct represents '2' with '-4324'
4323 4325 -4324 0
c Encoding variable: aux1042 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1041))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4326'
c Var 'aux1042' direct represents '0' with '4326'
c Var 'aux1042' order represents '1' with '4327'
-4326 4327 0
c Var 'aux1042' direct represents '1' with '4328'
4326 -4327 4328 0
-4328 4327 0
-4328 -4326 0
c Var 'aux1042' order represents '2' with '4329'
-4327 4329 0
c Var 'aux1042' direct represents '2' with '4330'
4327 -4329 4330 0
-4330 4329 0
-4330 -4327 0
c Var 'aux1042' direct represents '3' with '-4329'
4326 4328 4330 -4329 0
c Encoding variable: aux1043 with domain: int(0..4) (representing constraint (aux1038 + aux1040))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4331'
c Var 'aux1043' direct represents '0' with '4331'
c Var 'aux1043' order represents '1' with '4332'
-4331 4332 0
c Var 'aux1043' direct represents '1' with '4333'
4331 -4332 4333 0
-4333 4332 0
-4333 -4331 0
c Var 'aux1043' order represents '2' with '4334'
-4332 4334 0
c Var 'aux1043' direct represents '2' with '4335'
4332 -4334 4335 0
-4335 4334 0
-4335 -4332 0
c Var 'aux1043' order represents '3' with '4336'
-4334 4336 0
c Var 'aux1043' direct represents '3' with '4337'
4334 -4336 4337 0
-4337 4336 0
-4337 -4334 0
c Var 'aux1043' direct represents '4' with '-4336'
4331 4333 4335 4337 -4336 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4338'
c Var 'aux1044' direct represents '0' with '4338'
c Var 'aux1044' order represents '1' with '4339'
-4338 4339 0
c Var 'aux1044' direct represents '1' with '4340'
4338 -4339 4340 0
-4340 4339 0
-4340 -4338 0
c Var 'aux1044' direct represents '2' with '-4339'
4338 4340 -4339 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4341'
c Var 'aux1045' direct represents '0' with '4341'
c Var 'aux1045' order represents '1' with '4342'
-4341 4342 0
c Var 'aux1045' direct represents '1' with '4343'
4341 -4342 4343 0
-4343 4342 0
-4343 -4341 0
c Var 'aux1045' direct represents '2' with '-4342'
4341 4343 -4342 0
c Encoding variable: aux1046 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4344'
c Var 'aux1046' direct represents '0' with '4344'
c Var 'aux1046' order represents '1' with '4345'
-4344 4345 0
c Var 'aux1046' direct represents '1' with '4346'
4344 -4345 4346 0
-4346 4345 0
-4346 -4344 0
c Var 'aux1046' direct represents '2' with '-4345'
4344 4346 -4345 0
c Encoding variable: aux1047 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4347'
c Var 'aux1047' direct represents '0' with '4347'
c Var 'aux1047' order represents '1' with '4348'
-4347 4348 0
c Var 'aux1047' direct represents '1' with '4349'
4347 -4348 4349 0
-4349 4348 0
-4349 -4347 0
c Var 'aux1047' direct represents '2' with '-4348'
4347 4349 -4348 0
c Encoding variable: aux1048 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1047))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4350'
c Var 'aux1048' direct represents '0' with '4350'
c Var 'aux1048' order represents '1' with '4351'
-4350 4351 0
c Var 'aux1048' direct represents '1' with '4352'
4350 -4351 4352 0
-4352 4351 0
-4352 -4350 0
c Var 'aux1048' order represents '2' with '4353'
-4351 4353 0
c Var 'aux1048' direct represents '2' with '4354'
4351 -4353 4354 0
-4354 4353 0
-4354 -4351 0
c Var 'aux1048' direct represents '3' with '-4353'
4350 4352 4354 -4353 0
c Encoding variable: aux1049 with domain: int(0..4) (representing constraint (aux1044 + aux1046))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4355'
c Var 'aux1049' direct represents '0' with '4355'
c Var 'aux1049' order represents '1' with '4356'
-4355 4356 0
c Var 'aux1049' direct represents '1' with '4357'
4355 -4356 4357 0
-4357 4356 0
-4357 -4355 0
c Var 'aux1049' order represents '2' with '4358'
-4356 4358 0
c Var 'aux1049' direct represents '2' with '4359'
4356 -4358 4359 0
-4359 4358 0
-4359 -4356 0
c Var 'aux1049' order represents '3' with '4360'
-4358 4360 0
c Var 'aux1049' direct represents '3' with '4361'
4358 -4360 4361 0
-4361 4360 0
-4361 -4358 0
c Var 'aux1049' direct represents '4' with '-4360'
4355 4357 4359 4361 -4360 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4362'
c Var 'aux1050' direct represents '0' with '4362'
c Var 'aux1050' order represents '1' with '4363'
-4362 4363 0
c Var 'aux1050' direct represents '1' with '4364'
4362 -4363 4364 0
-4364 4363 0
-4364 -4362 0
c Var 'aux1050' direct represents '2' with '-4363'
4362 4364 -4363 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4365'
c Var 'aux1051' direct represents '0' with '4365'
c Var 'aux1051' order represents '1' with '4366'
-4365 4366 0
c Var 'aux1051' direct represents '1' with '4367'
4365 -4366 4367 0
-4367 4366 0
-4367 -4365 0
c Var 'aux1051' direct represents '2' with '-4366'
4365 4367 -4366 0
c Encoding variable: aux1052 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4368'
c Var 'aux1052' direct represents '0' with '4368'
c Var 'aux1052' order represents '1' with '4369'
-4368 4369 0
c Var 'aux1052' direct represents '1' with '4370'
4368 -4369 4370 0
-4370 4369 0
-4370 -4368 0
c Var 'aux1052' direct represents '2' with '-4369'
4368 4370 -4369 0
c Encoding variable: aux1053 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4371'
c Var 'aux1053' direct represents '0' with '4371'
c Var 'aux1053' order represents '1' with '4372'
-4371 4372 0
c Var 'aux1053' direct represents '1' with '4373'
4371 -4372 4373 0
-4373 4372 0
-4373 -4371 0
c Var 'aux1053' direct represents '2' with '-4372'
4371 4373 -4372 0
c Encoding variable: aux1054 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1053))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4374'
c Var 'aux1054' direct represents '0' with '4374'
c Var 'aux1054' order represents '1' with '4375'
-4374 4375 0
c Var 'aux1054' direct represents '1' with '4376'
4374 -4375 4376 0
-4376 4375 0
-4376 -4374 0
c Var 'aux1054' order represents '2' with '4377'
-4375 4377 0
c Var 'aux1054' direct represents '2' with '4378'
4375 -4377 4378 0
-4378 4377 0
-4378 -4375 0
c Var 'aux1054' direct represents '3' with '-4377'
4374 4376 4378 -4377 0
c Encoding variable: aux1055 with domain: int(0..4) (representing constraint (aux1050 + aux1052))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4379'
c Var 'aux1055' direct represents '0' with '4379'
c Var 'aux1055' order represents '1' with '4380'
-4379 4380 0
c Var 'aux1055' direct represents '1' with '4381'
4379 -4380 4381 0
-4381 4380 0
-4381 -4379 0
c Var 'aux1055' order represents '2' with '4382'
-4380 4382 0
c Var 'aux1055' direct represents '2' with '4383'
4380 -4382 4383 0
-4383 4382 0
-4383 -4380 0
c Var 'aux1055' order represents '3' with '4384'
-4382 4384 0
c Var 'aux1055' direct represents '3' with '4385'
4382 -4384 4385 0
-4385 4384 0
-4385 -4382 0
c Var 'aux1055' direct represents '4' with '-4384'
4379 4381 4383 4385 -4384 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4386'
c Var 'aux1056' direct represents '0' with '4386'
c Var 'aux1056' order represents '1' with '4387'
-4386 4387 0
c Var 'aux1056' direct represents '1' with '4388'
4386 -4387 4388 0
-4388 4387 0
-4388 -4386 0
c Var 'aux1056' direct represents '2' with '-4387'
4386 4388 -4387 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4389'
c Var 'aux1057' direct represents '0' with '4389'
c Var 'aux1057' order represents '1' with '4390'
-4389 4390 0
c Var 'aux1057' direct represents '1' with '4391'
4389 -4390 4391 0
-4391 4390 0
-4391 -4389 0
c Var 'aux1057' direct represents '2' with '-4390'
4389 4391 -4390 0
c Encoding variable: aux1058 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4392'
c Var 'aux1058' direct represents '0' with '4392'
c Var 'aux1058' order represents '1' with '4393'
-4392 4393 0
c Var 'aux1058' direct represents '1' with '4394'
4392 -4393 4394 0
-4394 4393 0
-4394 -4392 0
c Var 'aux1058' direct represents '2' with '-4393'
4392 4394 -4393 0
c Encoding variable: aux1059 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4395'
c Var 'aux1059' direct represents '0' with '4395'
c Var 'aux1059' order represents '1' with '4396'
-4395 4396 0
c Var 'aux1059' direct represents '1' with '4397'
4395 -4396 4397 0
-4397 4396 0
-4397 -4395 0
c Var 'aux1059' direct represents '2' with '-4396'
4395 4397 -4396 0
c Encoding variable: aux1060 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1059))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4398'
c Var 'aux1060' direct represents '0' with '4398'
c Var 'aux1060' order represents '1' with '4399'
-4398 4399 0
c Var 'aux1060' direct represents '1' with '4400'
4398 -4399 4400 0
-4400 4399 0
-4400 -4398 0
c Var 'aux1060' order represents '2' with '4401'
-4399 4401 0
c Var 'aux1060' direct represents '2' with '4402'
4399 -4401 4402 0
-4402 4401 0
-4402 -4399 0
c Var 'aux1060' direct represents '3' with '-4401'
4398 4400 4402 -4401 0
c Encoding variable: aux1061 with domain: int(0..4) (representing constraint (aux1056 + aux1058))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4403'
c Var 'aux1061' direct represents '0' with '4403'
c Var 'aux1061' order represents '1' with '4404'
-4403 4404 0
c Var 'aux1061' direct represents '1' with '4405'
4403 -4404 4405 0
-4405 4404 0
-4405 -4403 0
c Var 'aux1061' order represents '2' with '4406'
-4404 4406 0
c Var 'aux1061' direct represents '2' with '4407'
4404 -4406 4407 0
-4407 4406 0
-4407 -4404 0
c Var 'aux1061' order represents '3' with '4408'
-4406 4408 0
c Var 'aux1061' direct represents '3' with '4409'
4406 -4408 4409 0
-4409 4408 0
-4409 -4406 0
c Var 'aux1061' direct represents '4' with '-4408'
4403 4405 4407 4409 -4408 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4410'
c Var 'aux1062' direct represents '0' with '4410'
c Var 'aux1062' order represents '1' with '4411'
-4410 4411 0
c Var 'aux1062' direct represents '1' with '4412'
4410 -4411 4412 0
-4412 4411 0
-4412 -4410 0
c Var 'aux1062' direct represents '2' with '-4411'
4410 4412 -4411 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4413'
c Var 'aux1063' direct represents '0' with '4413'
c Var 'aux1063' order represents '1' with '4414'
-4413 4414 0
c Var 'aux1063' direct represents '1' with '4415'
4413 -4414 4415 0
-4415 4414 0
-4415 -4413 0
c Var 'aux1063' direct represents '2' with '-4414'
4413 4415 -4414 0
c Encoding variable: aux1064 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4416'
c Var 'aux1064' direct represents '0' with '4416'
c Var 'aux1064' order represents '1' with '4417'
-4416 4417 0
c Var 'aux1064' direct represents '1' with '4418'
4416 -4417 4418 0
-4418 4417 0
-4418 -4416 0
c Var 'aux1064' direct represents '2' with '-4417'
4416 4418 -4417 0
c Encoding variable: aux1065 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4419'
c Var 'aux1065' direct represents '0' with '4419'
c Var 'aux1065' order represents '1' with '4420'
-4419 4420 0
c Var 'aux1065' direct represents '1' with '4421'
4419 -4420 4421 0
-4421 4420 0
-4421 -4419 0
c Var 'aux1065' direct represents '2' with '-4420'
4419 4421 -4420 0
c Encoding variable: aux1066 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1065))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4422'
c Var 'aux1066' direct represents '0' with '4422'
c Var 'aux1066' order represents '1' with '4423'
-4422 4423 0
c Var 'aux1066' direct represents '1' with '4424'
4422 -4423 4424 0
-4424 4423 0
-4424 -4422 0
c Var 'aux1066' order represents '2' with '4425'
-4423 4425 0
c Var 'aux1066' direct represents '2' with '4426'
4423 -4425 4426 0
-4426 4425 0
-4426 -4423 0
c Var 'aux1066' direct represents '3' with '-4425'
4422 4424 4426 -4425 0
c Encoding variable: aux1067 with domain: int(0..4) (representing constraint (aux1062 + aux1064))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4427'
c Var 'aux1067' direct represents '0' with '4427'
c Var 'aux1067' order represents '1' with '4428'
-4427 4428 0
c Var 'aux1067' direct represents '1' with '4429'
4427 -4428 4429 0
-4429 4428 0
-4429 -4427 0
c Var 'aux1067' order represents '2' with '4430'
-4428 4430 0
c Var 'aux1067' direct represents '2' with '4431'
4428 -4430 4431 0
-4431 4430 0
-4431 -4428 0
c Var 'aux1067' order represents '3' with '4432'
-4430 4432 0
c Var 'aux1067' direct represents '3' with '4433'
4430 -4432 4433 0
-4433 4432 0
-4433 -4430 0
c Var 'aux1067' direct represents '4' with '-4432'
4427 4429 4431 4433 -4432 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4434'
c Var 'aux1068' direct represents '0' with '4434'
c Var 'aux1068' order represents '1' with '4435'
-4434 4435 0
c Var 'aux1068' direct represents '1' with '4436'
4434 -4435 4436 0
-4436 4435 0
-4436 -4434 0
c Var 'aux1068' direct represents '2' with '-4435'
4434 4436 -4435 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4437'
c Var 'aux1069' direct represents '0' with '4437'
c Var 'aux1069' order represents '1' with '4438'
-4437 4438 0
c Var 'aux1069' direct represents '1' with '4439'
4437 -4438 4439 0
-4439 4438 0
-4439 -4437 0
c Var 'aux1069' direct represents '2' with '-4438'
4437 4439 -4438 0
c Encoding variable: aux1070 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4440'
c Var 'aux1070' direct represents '0' with '4440'
c Var 'aux1070' order represents '1' with '4441'
-4440 4441 0
c Var 'aux1070' direct represents '1' with '4442'
4440 -4441 4442 0
-4442 4441 0
-4442 -4440 0
c Var 'aux1070' direct represents '2' with '-4441'
4440 4442 -4441 0
c Encoding variable: aux1071 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4443'
c Var 'aux1071' direct represents '0' with '4443'
c Var 'aux1071' order represents '1' with '4444'
-4443 4444 0
c Var 'aux1071' direct represents '1' with '4445'
4443 -4444 4445 0
-4445 4444 0
-4445 -4443 0
c Var 'aux1071' direct represents '2' with '-4444'
4443 4445 -4444 0
c Encoding variable: aux1072 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1071))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4446'
c Var 'aux1072' direct represents '0' with '4446'
c Var 'aux1072' order represents '1' with '4447'
-4446 4447 0
c Var 'aux1072' direct represents '1' with '4448'
4446 -4447 4448 0
-4448 4447 0
-4448 -4446 0
c Var 'aux1072' order represents '2' with '4449'
-4447 4449 0
c Var 'aux1072' direct represents '2' with '4450'
4447 -4449 4450 0
-4450 4449 0
-4450 -4447 0
c Var 'aux1072' direct represents '3' with '-4449'
4446 4448 4450 -4449 0
c Encoding variable: aux1073 with domain: int(0..4) (representing constraint (aux1068 + aux1070))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4451'
c Var 'aux1073' direct represents '0' with '4451'
c Var 'aux1073' order represents '1' with '4452'
-4451 4452 0
c Var 'aux1073' direct represents '1' with '4453'
4451 -4452 4453 0
-4453 4452 0
-4453 -4451 0
c Var 'aux1073' order represents '2' with '4454'
-4452 4454 0
c Var 'aux1073' direct represents '2' with '4455'
4452 -4454 4455 0
-4455 4454 0
-4455 -4452 0
c Var 'aux1073' order represents '3' with '4456'
-4454 4456 0
c Var 'aux1073' direct represents '3' with '4457'
4454 -4456 4457 0
-4457 4456 0
-4457 -4454 0
c Var 'aux1073' direct represents '4' with '-4456'
4451 4453 4455 4457 -4456 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4458'
c Var 'aux1074' direct represents '0' with '4458'
c Var 'aux1074' order represents '1' with '4459'
-4458 4459 0
c Var 'aux1074' direct represents '1' with '4460'
4458 -4459 4460 0
-4460 4459 0
-4460 -4458 0
c Var 'aux1074' direct represents '2' with '-4459'
4458 4460 -4459 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4461'
c Var 'aux1075' direct represents '0' with '4461'
c Var 'aux1075' order represents '1' with '4462'
-4461 4462 0
c Var 'aux1075' direct represents '1' with '4463'
4461 -4462 4463 0
-4463 4462 0
-4463 -4461 0
c Var 'aux1075' direct represents '2' with '-4462'
4461 4463 -4462 0
c Encoding variable: aux1076 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4464'
c Var 'aux1076' direct represents '0' with '4464'
c Var 'aux1076' order represents '1' with '4465'
-4464 4465 0
c Var 'aux1076' direct represents '1' with '4466'
4464 -4465 4466 0
-4466 4465 0
-4466 -4464 0
c Var 'aux1076' direct represents '2' with '-4465'
4464 4466 -4465 0
c Encoding variable: aux1077 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4467'
c Var 'aux1077' direct represents '0' with '4467'
c Var 'aux1077' order represents '1' with '4468'
-4467 4468 0
c Var 'aux1077' direct represents '1' with '4469'
4467 -4468 4469 0
-4469 4468 0
-4469 -4467 0
c Var 'aux1077' direct represents '2' with '-4468'
4467 4469 -4468 0
c Encoding variable: aux1078 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1077))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4470'
c Var 'aux1078' direct represents '0' with '4470'
c Var 'aux1078' order represents '1' with '4471'
-4470 4471 0
c Var 'aux1078' direct represents '1' with '4472'
4470 -4471 4472 0
-4472 4471 0
-4472 -4470 0
c Var 'aux1078' order represents '2' with '4473'
-4471 4473 0
c Var 'aux1078' direct represents '2' with '4474'
4471 -4473 4474 0
-4474 4473 0
-4474 -4471 0
c Var 'aux1078' direct represents '3' with '-4473'
4470 4472 4474 -4473 0
c Encoding variable: aux1079 with domain: int(0..4) (representing constraint (aux1074 + aux1076))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4475'
c Var 'aux1079' direct represents '0' with '4475'
c Var 'aux1079' order represents '1' with '4476'
-4475 4476 0
c Var 'aux1079' direct represents '1' with '4477'
4475 -4476 4477 0
-4477 4476 0
-4477 -4475 0
c Var 'aux1079' order represents '2' with '4478'
-4476 4478 0
c Var 'aux1079' direct represents '2' with '4479'
4476 -4478 4479 0
-4479 4478 0
-4479 -4476 0
c Var 'aux1079' order represents '3' with '4480'
-4478 4480 0
c Var 'aux1079' direct represents '3' with '4481'
4478 -4480 4481 0
-4481 4480 0
-4481 -4478 0
c Var 'aux1079' direct represents '4' with '-4480'
4475 4477 4479 4481 -4480 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4482'
c Var 'aux1080' direct represents '0' with '4482'
c Var 'aux1080' order represents '1' with '4483'
-4482 4483 0
c Var 'aux1080' direct represents '1' with '4484'
4482 -4483 4484 0
-4484 4483 0
-4484 -4482 0
c Var 'aux1080' direct represents '2' with '-4483'
4482 4484 -4483 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4485'
c Var 'aux1081' direct represents '0' with '4485'
c Var 'aux1081' order represents '1' with '4486'
-4485 4486 0
c Var 'aux1081' direct represents '1' with '4487'
4485 -4486 4487 0
-4487 4486 0
-4487 -4485 0
c Var 'aux1081' direct represents '2' with '-4486'
4485 4487 -4486 0
c Encoding variable: aux1082 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4488'
c Var 'aux1082' direct represents '0' with '4488'
c Var 'aux1082' order represents '1' with '4489'
-4488 4489 0
c Var 'aux1082' direct represents '1' with '4490'
4488 -4489 4490 0
-4490 4489 0
-4490 -4488 0
c Var 'aux1082' direct represents '2' with '-4489'
4488 4490 -4489 0
c Encoding variable: aux1083 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4491'
c Var 'aux1083' direct represents '0' with '4491'
c Var 'aux1083' order represents '1' with '4492'
-4491 4492 0
c Var 'aux1083' direct represents '1' with '4493'
4491 -4492 4493 0
-4493 4492 0
-4493 -4491 0
c Var 'aux1083' direct represents '2' with '-4492'
4491 4493 -4492 0
c Encoding variable: aux1084 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1083))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4494'
c Var 'aux1084' direct represents '0' with '4494'
c Var 'aux1084' order represents '1' with '4495'
-4494 4495 0
c Var 'aux1084' direct represents '1' with '4496'
4494 -4495 4496 0
-4496 4495 0
-4496 -4494 0
c Var 'aux1084' order represents '2' with '4497'
-4495 4497 0
c Var 'aux1084' direct represents '2' with '4498'
4495 -4497 4498 0
-4498 4497 0
-4498 -4495 0
c Var 'aux1084' direct represents '3' with '-4497'
4494 4496 4498 -4497 0
c Encoding variable: aux1085 with domain: int(0..4) (representing constraint (aux1080 + aux1082))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4499'
c Var 'aux1085' direct represents '0' with '4499'
c Var 'aux1085' order represents '1' with '4500'
-4499 4500 0
c Var 'aux1085' direct represents '1' with '4501'
4499 -4500 4501 0
-4501 4500 0
-4501 -4499 0
c Var 'aux1085' order represents '2' with '4502'
-4500 4502 0
c Var 'aux1085' direct represents '2' with '4503'
4500 -4502 4503 0
-4503 4502 0
-4503 -4500 0
c Var 'aux1085' order represents '3' with '4504'
-4502 4504 0
c Var 'aux1085' direct represents '3' with '4505'
4502 -4504 4505 0
-4505 4504 0
-4505 -4502 0
c Var 'aux1085' direct represents '4' with '-4504'
4499 4501 4503 4505 -4504 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4506'
c Var 'aux1086' direct represents '0' with '4506'
c Var 'aux1086' order represents '1' with '4507'
-4506 4507 0
c Var 'aux1086' direct represents '1' with '4508'
4506 -4507 4508 0
-4508 4507 0
-4508 -4506 0
c Var 'aux1086' direct represents '2' with '-4507'
4506 4508 -4507 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4509'
c Var 'aux1087' direct represents '0' with '4509'
c Var 'aux1087' order represents '1' with '4510'
-4509 4510 0
c Var 'aux1087' direct represents '1' with '4511'
4509 -4510 4511 0
-4511 4510 0
-4511 -4509 0
c Var 'aux1087' direct represents '2' with '-4510'
4509 4511 -4510 0
c Encoding variable: aux1088 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4512'
c Var 'aux1088' direct represents '0' with '4512'
c Var 'aux1088' order represents '1' with '4513'
-4512 4513 0
c Var 'aux1088' direct represents '1' with '4514'
4512 -4513 4514 0
-4514 4513 0
-4514 -4512 0
c Var 'aux1088' direct represents '2' with '-4513'
4512 4514 -4513 0
c Encoding variable: aux1089 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4515'
c Var 'aux1089' direct represents '0' with '4515'
c Var 'aux1089' order represents '1' with '4516'
-4515 4516 0
c Var 'aux1089' direct represents '1' with '4517'
4515 -4516 4517 0
-4517 4516 0
-4517 -4515 0
c Var 'aux1089' direct represents '2' with '-4516'
4515 4517 -4516 0
c Encoding variable: aux1090 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1089))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4518'
c Var 'aux1090' direct represents '0' with '4518'
c Var 'aux1090' order represents '1' with '4519'
-4518 4519 0
c Var 'aux1090' direct represents '1' with '4520'
4518 -4519 4520 0
-4520 4519 0
-4520 -4518 0
c Var 'aux1090' order represents '2' with '4521'
-4519 4521 0
c Var 'aux1090' direct represents '2' with '4522'
4519 -4521 4522 0
-4522 4521 0
-4522 -4519 0
c Var 'aux1090' direct represents '3' with '-4521'
4518 4520 4522 -4521 0
c Encoding variable: aux1091 with domain: int(0..4) (representing constraint (aux1086 + aux1088))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4523'
c Var 'aux1091' direct represents '0' with '4523'
c Var 'aux1091' order represents '1' with '4524'
-4523 4524 0
c Var 'aux1091' direct represents '1' with '4525'
4523 -4524 4525 0
-4525 4524 0
-4525 -4523 0
c Var 'aux1091' order represents '2' with '4526'
-4524 4526 0
c Var 'aux1091' direct represents '2' with '4527'
4524 -4526 4527 0
-4527 4526 0
-4527 -4524 0
c Var 'aux1091' order represents '3' with '4528'
-4526 4528 0
c Var 'aux1091' direct represents '3' with '4529'
4526 -4528 4529 0
-4529 4528 0
-4529 -4526 0
c Var 'aux1091' direct represents '4' with '-4528'
4523 4525 4527 4529 -4528 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4530'
c Var 'aux1092' direct represents '0' with '4530'
c Var 'aux1092' order represents '1' with '4531'
-4530 4531 0
c Var 'aux1092' direct represents '1' with '4532'
4530 -4531 4532 0
-4532 4531 0
-4532 -4530 0
c Var 'aux1092' direct represents '2' with '-4531'
4530 4532 -4531 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4533'
c Var 'aux1093' direct represents '0' with '4533'
c Var 'aux1093' order represents '1' with '4534'
-4533 4534 0
c Var 'aux1093' direct represents '1' with '4535'
4533 -4534 4535 0
-4535 4534 0
-4535 -4533 0
c Var 'aux1093' direct represents '2' with '-4534'
4533 4535 -4534 0
c Encoding variable: aux1094 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4536'
c Var 'aux1094' direct represents '0' with '4536'
c Var 'aux1094' order represents '1' with '4537'
-4536 4537 0
c Var 'aux1094' direct represents '1' with '4538'
4536 -4537 4538 0
-4538 4537 0
-4538 -4536 0
c Var 'aux1094' direct represents '2' with '-4537'
4536 4538 -4537 0
c Encoding variable: aux1095 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4539'
c Var 'aux1095' direct represents '0' with '4539'
c Var 'aux1095' order represents '1' with '4540'
-4539 4540 0
c Var 'aux1095' direct represents '1' with '4541'
4539 -4540 4541 0
-4541 4540 0
-4541 -4539 0
c Var 'aux1095' direct represents '2' with '-4540'
4539 4541 -4540 0
c Encoding variable: aux1096 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1095))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4542'
c Var 'aux1096' direct represents '0' with '4542'
c Var 'aux1096' order represents '1' with '4543'
-4542 4543 0
c Var 'aux1096' direct represents '1' with '4544'
4542 -4543 4544 0
-4544 4543 0
-4544 -4542 0
c Var 'aux1096' order represents '2' with '4545'
-4543 4545 0
c Var 'aux1096' direct represents '2' with '4546'
4543 -4545 4546 0
-4546 4545 0
-4546 -4543 0
c Var 'aux1096' direct represents '3' with '-4545'
4542 4544 4546 -4545 0
c Encoding variable: aux1097 with domain: int(0..4) (representing constraint (aux1092 + aux1094))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4547'
c Var 'aux1097' direct represents '0' with '4547'
c Var 'aux1097' order represents '1' with '4548'
-4547 4548 0
c Var 'aux1097' direct represents '1' with '4549'
4547 -4548 4549 0
-4549 4548 0
-4549 -4547 0
c Var 'aux1097' order represents '2' with '4550'
-4548 4550 0
c Var 'aux1097' direct represents '2' with '4551'
4548 -4550 4551 0
-4551 4550 0
-4551 -4548 0
c Var 'aux1097' order represents '3' with '4552'
-4550 4552 0
c Var 'aux1097' direct represents '3' with '4553'
4550 -4552 4553 0
-4553 4552 0
-4553 -4550 0
c Var 'aux1097' direct represents '4' with '-4552'
4547 4549 4551 4553 -4552 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4554'
c Var 'aux1098' direct represents '0' with '4554'
c Var 'aux1098' order represents '1' with '4555'
-4554 4555 0
c Var 'aux1098' direct represents '1' with '4556'
4554 -4555 4556 0
-4556 4555 0
-4556 -4554 0
c Var 'aux1098' direct represents '2' with '-4555'
4554 4556 -4555 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4557'
c Var 'aux1099' direct represents '0' with '4557'
c Var 'aux1099' order represents '1' with '4558'
-4557 4558 0
c Var 'aux1099' direct represents '1' with '4559'
4557 -4558 4559 0
-4559 4558 0
-4559 -4557 0
c Var 'aux1099' direct represents '2' with '-4558'
4557 4559 -4558 0
c Encoding variable: aux1100 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4560'
c Var 'aux1100' direct represents '0' with '4560'
c Var 'aux1100' order represents '1' with '4561'
-4560 4561 0
c Var 'aux1100' direct represents '1' with '4562'
4560 -4561 4562 0
-4562 4561 0
-4562 -4560 0
c Var 'aux1100' direct represents '2' with '-4561'
4560 4562 -4561 0
c Encoding variable: aux1101 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4563'
c Var 'aux1101' direct represents '0' with '4563'
c Var 'aux1101' order represents '1' with '4564'
-4563 4564 0
c Var 'aux1101' direct represents '1' with '4565'
4563 -4564 4565 0
-4565 4564 0
-4565 -4563 0
c Var 'aux1101' direct represents '2' with '-4564'
4563 4565 -4564 0
c Encoding variable: aux1102 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1101))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4566'
c Var 'aux1102' direct represents '0' with '4566'
c Var 'aux1102' order represents '1' with '4567'
-4566 4567 0
c Var 'aux1102' direct represents '1' with '4568'
4566 -4567 4568 0
-4568 4567 0
-4568 -4566 0
c Var 'aux1102' order represents '2' with '4569'
-4567 4569 0
c Var 'aux1102' direct represents '2' with '4570'
4567 -4569 4570 0
-4570 4569 0
-4570 -4567 0
c Var 'aux1102' direct represents '3' with '-4569'
4566 4568 4570 -4569 0
c Encoding variable: aux1103 with domain: int(0..4) (representing constraint (aux1098 + aux1100))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4571'
c Var 'aux1103' direct represents '0' with '4571'
c Var 'aux1103' order represents '1' with '4572'
-4571 4572 0
c Var 'aux1103' direct represents '1' with '4573'
4571 -4572 4573 0
-4573 4572 0
-4573 -4571 0
c Var 'aux1103' order represents '2' with '4574'
-4572 4574 0
c Var 'aux1103' direct represents '2' with '4575'
4572 -4574 4575 0
-4575 4574 0
-4575 -4572 0
c Var 'aux1103' order represents '3' with '4576'
-4574 4576 0
c Var 'aux1103' direct represents '3' with '4577'
4574 -4576 4577 0
-4577 4576 0
-4577 -4574 0
c Var 'aux1103' direct represents '4' with '-4576'
4571 4573 4575 4577 -4576 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4578'
c Var 'aux1104' direct represents '0' with '4578'
c Var 'aux1104' order represents '1' with '4579'
-4578 4579 0
c Var 'aux1104' direct represents '1' with '4580'
4578 -4579 4580 0
-4580 4579 0
-4580 -4578 0
c Var 'aux1104' direct represents '2' with '-4579'
4578 4580 -4579 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4581'
c Var 'aux1105' direct represents '0' with '4581'
c Var 'aux1105' order represents '1' with '4582'
-4581 4582 0
c Var 'aux1105' direct represents '1' with '4583'
4581 -4582 4583 0
-4583 4582 0
-4583 -4581 0
c Var 'aux1105' direct represents '2' with '-4582'
4581 4583 -4582 0
c Encoding variable: aux1106 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4584'
c Var 'aux1106' direct represents '0' with '4584'
c Var 'aux1106' order represents '1' with '4585'
-4584 4585 0
c Var 'aux1106' direct represents '1' with '4586'
4584 -4585 4586 0
-4586 4585 0
-4586 -4584 0
c Var 'aux1106' direct represents '2' with '-4585'
4584 4586 -4585 0
c Encoding variable: aux1107 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4587'
c Var 'aux1107' direct represents '0' with '4587'
c Var 'aux1107' order represents '1' with '4588'
-4587 4588 0
c Var 'aux1107' direct represents '1' with '4589'
4587 -4588 4589 0
-4589 4588 0
-4589 -4587 0
c Var 'aux1107' direct represents '2' with '-4588'
4587 4589 -4588 0
c Encoding variable: aux1108 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1107))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4590'
c Var 'aux1108' direct represents '0' with '4590'
c Var 'aux1108' order represents '1' with '4591'
-4590 4591 0
c Var 'aux1108' direct represents '1' with '4592'
4590 -4591 4592 0
-4592 4591 0
-4592 -4590 0
c Var 'aux1108' order represents '2' with '4593'
-4591 4593 0
c Var 'aux1108' direct represents '2' with '4594'
4591 -4593 4594 0
-4594 4593 0
-4594 -4591 0
c Var 'aux1108' direct represents '3' with '-4593'
4590 4592 4594 -4593 0
c Encoding variable: aux1109 with domain: int(0..4) (representing constraint (aux1104 + aux1106))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4595'
c Var 'aux1109' direct represents '0' with '4595'
c Var 'aux1109' order represents '1' with '4596'
-4595 4596 0
c Var 'aux1109' direct represents '1' with '4597'
4595 -4596 4597 0
-4597 4596 0
-4597 -4595 0
c Var 'aux1109' order represents '2' with '4598'
-4596 4598 0
c Var 'aux1109' direct represents '2' with '4599'
4596 -4598 4599 0
-4599 4598 0
-4599 -4596 0
c Var 'aux1109' order represents '3' with '4600'
-4598 4600 0
c Var 'aux1109' direct represents '3' with '4601'
4598 -4600 4601 0
-4601 4600 0
-4601 -4598 0
c Var 'aux1109' direct represents '4' with '-4600'
4595 4597 4599 4601 -4600 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4602'
c Var 'aux1110' direct represents '0' with '4602'
c Var 'aux1110' order represents '1' with '4603'
-4602 4603 0
c Var 'aux1110' direct represents '1' with '4604'
4602 -4603 4604 0
-4604 4603 0
-4604 -4602 0
c Var 'aux1110' direct represents '2' with '-4603'
4602 4604 -4603 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4605'
c Var 'aux1111' direct represents '0' with '4605'
c Var 'aux1111' order represents '1' with '4606'
-4605 4606 0
c Var 'aux1111' direct represents '1' with '4607'
4605 -4606 4607 0
-4607 4606 0
-4607 -4605 0
c Var 'aux1111' direct represents '2' with '-4606'
4605 4607 -4606 0
c Encoding variable: aux1112 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4608'
c Var 'aux1112' direct represents '0' with '4608'
c Var 'aux1112' order represents '1' with '4609'
-4608 4609 0
c Var 'aux1112' direct represents '1' with '4610'
4608 -4609 4610 0
-4610 4609 0
-4610 -4608 0
c Var 'aux1112' direct represents '2' with '-4609'
4608 4610 -4609 0
c Encoding variable: aux1113 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4611'
c Var 'aux1113' direct represents '0' with '4611'
c Var 'aux1113' order represents '1' with '4612'
-4611 4612 0
c Var 'aux1113' direct represents '1' with '4613'
4611 -4612 4613 0
-4613 4612 0
-4613 -4611 0
c Var 'aux1113' direct represents '2' with '-4612'
4611 4613 -4612 0
c Encoding variable: aux1114 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1113))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4614'
c Var 'aux1114' direct represents '0' with '4614'
c Var 'aux1114' order represents '1' with '4615'
-4614 4615 0
c Var 'aux1114' direct represents '1' with '4616'
4614 -4615 4616 0
-4616 4615 0
-4616 -4614 0
c Var 'aux1114' order represents '2' with '4617'
-4615 4617 0
c Var 'aux1114' direct represents '2' with '4618'
4615 -4617 4618 0
-4618 4617 0
-4618 -4615 0
c Var 'aux1114' direct represents '3' with '-4617'
4614 4616 4618 -4617 0
c Encoding variable: aux1115 with domain: int(0..4) (representing constraint (aux1110 + aux1112))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4619'
c Var 'aux1115' direct represents '0' with '4619'
c Var 'aux1115' order represents '1' with '4620'
-4619 4620 0
c Var 'aux1115' direct represents '1' with '4621'
4619 -4620 4621 0
-4621 4620 0
-4621 -4619 0
c Var 'aux1115' order represents '2' with '4622'
-4620 4622 0
c Var 'aux1115' direct represents '2' with '4623'
4620 -4622 4623 0
-4623 4622 0
-4623 -4620 0
c Var 'aux1115' order represents '3' with '4624'
-4622 4624 0
c Var 'aux1115' direct represents '3' with '4625'
4622 -4624 4625 0
-4625 4624 0
-4625 -4622 0
c Var 'aux1115' direct represents '4' with '-4624'
4619 4621 4623 4625 -4624 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4626'
c Var 'aux1116' direct represents '0' with '4626'
c Var 'aux1116' order represents '1' with '4627'
-4626 4627 0
c Var 'aux1116' direct represents '1' with '4628'
4626 -4627 4628 0
-4628 4627 0
-4628 -4626 0
c Var 'aux1116' direct represents '2' with '-4627'
4626 4628 -4627 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4629'
c Var 'aux1117' direct represents '0' with '4629'
c Var 'aux1117' order represents '1' with '4630'
-4629 4630 0
c Var 'aux1117' direct represents '1' with '4631'
4629 -4630 4631 0
-4631 4630 0
-4631 -4629 0
c Var 'aux1117' direct represents '2' with '-4630'
4629 4631 -4630 0
c Encoding variable: aux1118 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4632'
c Var 'aux1118' direct represents '0' with '4632'
c Var 'aux1118' order represents '1' with '4633'
-4632 4633 0
c Var 'aux1118' direct represents '1' with '4634'
4632 -4633 4634 0
-4634 4633 0
-4634 -4632 0
c Var 'aux1118' direct represents '2' with '-4633'
4632 4634 -4633 0
c Encoding variable: aux1119 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4635'
c Var 'aux1119' direct represents '0' with '4635'
c Var 'aux1119' order represents '1' with '4636'
-4635 4636 0
c Var 'aux1119' direct represents '1' with '4637'
4635 -4636 4637 0
-4637 4636 0
-4637 -4635 0
c Var 'aux1119' direct represents '2' with '-4636'
4635 4637 -4636 0
c Encoding variable: aux1120 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1119))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4638'
c Var 'aux1120' direct represents '0' with '4638'
c Var 'aux1120' order represents '1' with '4639'
-4638 4639 0
c Var 'aux1120' direct represents '1' with '4640'
4638 -4639 4640 0
-4640 4639 0
-4640 -4638 0
c Var 'aux1120' order represents '2' with '4641'
-4639 4641 0
c Var 'aux1120' direct represents '2' with '4642'
4639 -4641 4642 0
-4642 4641 0
-4642 -4639 0
c Var 'aux1120' direct represents '3' with '-4641'
4638 4640 4642 -4641 0
c Encoding variable: aux1121 with domain: int(0..4) (representing constraint (aux1116 + aux1118))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4643'
c Var 'aux1121' direct represents '0' with '4643'
c Var 'aux1121' order represents '1' with '4644'
-4643 4644 0
c Var 'aux1121' direct represents '1' with '4645'
4643 -4644 4645 0
-4645 4644 0
-4645 -4643 0
c Var 'aux1121' order represents '2' with '4646'
-4644 4646 0
c Var 'aux1121' direct represents '2' with '4647'
4644 -4646 4647 0
-4647 4646 0
-4647 -4644 0
c Var 'aux1121' order represents '3' with '4648'
-4646 4648 0
c Var 'aux1121' direct represents '3' with '4649'
4646 -4648 4649 0
-4649 4648 0
-4649 -4646 0
c Var 'aux1121' direct represents '4' with '-4648'
4643 4645 4647 4649 -4648 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4650'
c Var 'aux1122' direct represents '0' with '4650'
c Var 'aux1122' order represents '1' with '4651'
-4650 4651 0
c Var 'aux1122' direct represents '1' with '4652'
4650 -4651 4652 0
-4652 4651 0
-4652 -4650 0
c Var 'aux1122' direct represents '2' with '-4651'
4650 4652 -4651 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4653'
c Var 'aux1123' direct represents '0' with '4653'
c Var 'aux1123' order represents '1' with '4654'
-4653 4654 0
c Var 'aux1123' direct represents '1' with '4655'
4653 -4654 4655 0
-4655 4654 0
-4655 -4653 0
c Var 'aux1123' direct represents '2' with '-4654'
4653 4655 -4654 0
c Encoding variable: aux1124 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4656'
c Var 'aux1124' direct represents '0' with '4656'
c Var 'aux1124' order represents '1' with '4657'
-4656 4657 0
c Var 'aux1124' direct represents '1' with '4658'
4656 -4657 4658 0
-4658 4657 0
-4658 -4656 0
c Var 'aux1124' direct represents '2' with '-4657'
4656 4658 -4657 0
c Encoding variable: aux1125 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4659'
c Var 'aux1125' direct represents '0' with '4659'
c Var 'aux1125' order represents '1' with '4660'
-4659 4660 0
c Var 'aux1125' direct represents '1' with '4661'
4659 -4660 4661 0
-4661 4660 0
-4661 -4659 0
c Var 'aux1125' direct represents '2' with '-4660'
4659 4661 -4660 0
c Encoding variable: aux1126 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1125))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4662'
c Var 'aux1126' direct represents '0' with '4662'
c Var 'aux1126' order represents '1' with '4663'
-4662 4663 0
c Var 'aux1126' direct represents '1' with '4664'
4662 -4663 4664 0
-4664 4663 0
-4664 -4662 0
c Var 'aux1126' order represents '2' with '4665'
-4663 4665 0
c Var 'aux1126' direct represents '2' with '4666'
4663 -4665 4666 0
-4666 4665 0
-4666 -4663 0
c Var 'aux1126' direct represents '3' with '-4665'
4662 4664 4666 -4665 0
c Encoding variable: aux1127 with domain: int(0..4) (representing constraint (aux1122 + aux1124))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4667'
c Var 'aux1127' direct represents '0' with '4667'
c Var 'aux1127' order represents '1' with '4668'
-4667 4668 0
c Var 'aux1127' direct represents '1' with '4669'
4667 -4668 4669 0
-4669 4668 0
-4669 -4667 0
c Var 'aux1127' order represents '2' with '4670'
-4668 4670 0
c Var 'aux1127' direct represents '2' with '4671'
4668 -4670 4671 0
-4671 4670 0
-4671 -4668 0
c Var 'aux1127' order represents '3' with '4672'
-4670 4672 0
c Var 'aux1127' direct represents '3' with '4673'
4670 -4672 4673 0
-4673 4672 0
-4673 -4670 0
c Var 'aux1127' direct represents '4' with '-4672'
4667 4669 4671 4673 -4672 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4674'
c Var 'aux1128' direct represents '0' with '4674'
c Var 'aux1128' order represents '1' with '4675'
-4674 4675 0
c Var 'aux1128' direct represents '1' with '4676'
4674 -4675 4676 0
-4676 4675 0
-4676 -4674 0
c Var 'aux1128' direct represents '2' with '-4675'
4674 4676 -4675 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4677'
c Var 'aux1129' direct represents '0' with '4677'
c Var 'aux1129' order represents '1' with '4678'
-4677 4678 0
c Var 'aux1129' direct represents '1' with '4679'
4677 -4678 4679 0
-4679 4678 0
-4679 -4677 0
c Var 'aux1129' direct represents '2' with '-4678'
4677 4679 -4678 0
c Encoding variable: aux1130 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4680'
c Var 'aux1130' direct represents '0' with '4680'
c Var 'aux1130' order represents '1' with '4681'
-4680 4681 0
c Var 'aux1130' direct represents '1' with '4682'
4680 -4681 4682 0
-4682 4681 0
-4682 -4680 0
c Var 'aux1130' direct represents '2' with '-4681'
4680 4682 -4681 0
c Encoding variable: aux1131 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4683'
c Var 'aux1131' direct represents '0' with '4683'
c Var 'aux1131' order represents '1' with '4684'
-4683 4684 0
c Var 'aux1131' direct represents '1' with '4685'
4683 -4684 4685 0
-4685 4684 0
-4685 -4683 0
c Var 'aux1131' direct represents '2' with '-4684'
4683 4685 -4684 0
c Encoding variable: aux1132 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1131))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4686'
c Var 'aux1132' direct represents '0' with '4686'
c Var 'aux1132' order represents '1' with '4687'
-4686 4687 0
c Var 'aux1132' direct represents '1' with '4688'
4686 -4687 4688 0
-4688 4687 0
-4688 -4686 0
c Var 'aux1132' order represents '2' with '4689'
-4687 4689 0
c Var 'aux1132' direct represents '2' with '4690'
4687 -4689 4690 0
-4690 4689 0
-4690 -4687 0
c Var 'aux1132' direct represents '3' with '-4689'
4686 4688 4690 -4689 0
c Encoding variable: aux1133 with domain: int(0..4) (representing constraint (aux1128 + aux1130))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4691'
c Var 'aux1133' direct represents '0' with '4691'
c Var 'aux1133' order represents '1' with '4692'
-4691 4692 0
c Var 'aux1133' direct represents '1' with '4693'
4691 -4692 4693 0
-4693 4692 0
-4693 -4691 0
c Var 'aux1133' order represents '2' with '4694'
-4692 4694 0
c Var 'aux1133' direct represents '2' with '4695'
4692 -4694 4695 0
-4695 4694 0
-4695 -4692 0
c Var 'aux1133' order represents '3' with '4696'
-4694 4696 0
c Var 'aux1133' direct represents '3' with '4697'
4694 -4696 4697 0
-4697 4696 0
-4697 -4694 0
c Var 'aux1133' direct represents '4' with '-4696'
4691 4693 4695 4697 -4696 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4698'
c Var 'aux1134' direct represents '0' with '4698'
c Var 'aux1134' order represents '1' with '4699'
-4698 4699 0
c Var 'aux1134' direct represents '1' with '4700'
4698 -4699 4700 0
-4700 4699 0
-4700 -4698 0
c Var 'aux1134' direct represents '2' with '-4699'
4698 4700 -4699 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4701'
c Var 'aux1135' direct represents '0' with '4701'
c Var 'aux1135' order represents '1' with '4702'
-4701 4702 0
c Var 'aux1135' direct represents '1' with '4703'
4701 -4702 4703 0
-4703 4702 0
-4703 -4701 0
c Var 'aux1135' direct represents '2' with '-4702'
4701 4703 -4702 0
c Encoding variable: aux1136 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4704'
c Var 'aux1136' direct represents '0' with '4704'
c Var 'aux1136' order represents '1' with '4705'
-4704 4705 0
c Var 'aux1136' direct represents '1' with '4706'
4704 -4705 4706 0
-4706 4705 0
-4706 -4704 0
c Var 'aux1136' direct represents '2' with '-4705'
4704 4706 -4705 0
c Encoding variable: aux1137 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4707'
c Var 'aux1137' direct represents '0' with '4707'
c Var 'aux1137' order represents '1' with '4708'
-4707 4708 0
c Var 'aux1137' direct represents '1' with '4709'
4707 -4708 4709 0
-4709 4708 0
-4709 -4707 0
c Var 'aux1137' direct represents '2' with '-4708'
4707 4709 -4708 0
c Encoding variable: aux1138 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1137))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4710'
c Var 'aux1138' direct represents '0' with '4710'
c Var 'aux1138' order represents '1' with '4711'
-4710 4711 0
c Var 'aux1138' direct represents '1' with '4712'
4710 -4711 4712 0
-4712 4711 0
-4712 -4710 0
c Var 'aux1138' order represents '2' with '4713'
-4711 4713 0
c Var 'aux1138' direct represents '2' with '4714'
4711 -4713 4714 0
-4714 4713 0
-4714 -4711 0
c Var 'aux1138' direct represents '3' with '-4713'
4710 4712 4714 -4713 0
c Encoding variable: aux1139 with domain: int(0..4) (representing constraint (aux1134 + aux1136))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4715'
c Var 'aux1139' direct represents '0' with '4715'
c Var 'aux1139' order represents '1' with '4716'
-4715 4716 0
c Var 'aux1139' direct represents '1' with '4717'
4715 -4716 4717 0
-4717 4716 0
-4717 -4715 0
c Var 'aux1139' order represents '2' with '4718'
-4716 4718 0
c Var 'aux1139' direct represents '2' with '4719'
4716 -4718 4719 0
-4719 4718 0
-4719 -4716 0
c Var 'aux1139' order represents '3' with '4720'
-4718 4720 0
c Var 'aux1139' direct represents '3' with '4721'
4718 -4720 4721 0
-4721 4720 0
-4721 -4718 0
c Var 'aux1139' direct represents '4' with '-4720'
4715 4717 4719 4721 -4720 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4722'
c Var 'aux1140' direct represents '0' with '4722'
c Var 'aux1140' order represents '1' with '4723'
-4722 4723 0
c Var 'aux1140' direct represents '1' with '4724'
4722 -4723 4724 0
-4724 4723 0
-4724 -4722 0
c Var 'aux1140' direct represents '2' with '-4723'
4722 4724 -4723 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4725'
c Var 'aux1141' direct represents '0' with '4725'
c Var 'aux1141' order represents '1' with '4726'
-4725 4726 0
c Var 'aux1141' direct represents '1' with '4727'
4725 -4726 4727 0
-4727 4726 0
-4727 -4725 0
c Var 'aux1141' direct represents '2' with '-4726'
4725 4727 -4726 0
c Encoding variable: aux1142 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4728'
c Var 'aux1142' direct represents '0' with '4728'
c Var 'aux1142' order represents '1' with '4729'
-4728 4729 0
c Var 'aux1142' direct represents '1' with '4730'
4728 -4729 4730 0
-4730 4729 0
-4730 -4728 0
c Var 'aux1142' direct represents '2' with '-4729'
4728 4730 -4729 0
c Encoding variable: aux1143 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4731'
c Var 'aux1143' direct represents '0' with '4731'
c Var 'aux1143' order represents '1' with '4732'
-4731 4732 0
c Var 'aux1143' direct represents '1' with '4733'
4731 -4732 4733 0
-4733 4732 0
-4733 -4731 0
c Var 'aux1143' direct represents '2' with '-4732'
4731 4733 -4732 0
c Encoding variable: aux1144 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1143))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4734'
c Var 'aux1144' direct represents '0' with '4734'
c Var 'aux1144' order represents '1' with '4735'
-4734 4735 0
c Var 'aux1144' direct represents '1' with '4736'
4734 -4735 4736 0
-4736 4735 0
-4736 -4734 0
c Var 'aux1144' order represents '2' with '4737'
-4735 4737 0
c Var 'aux1144' direct represents '2' with '4738'
4735 -4737 4738 0
-4738 4737 0
-4738 -4735 0
c Var 'aux1144' direct represents '3' with '-4737'
4734 4736 4738 -4737 0
c Encoding variable: aux1145 with domain: int(0..4) (representing constraint (aux1140 + aux1142))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4739'
c Var 'aux1145' direct represents '0' with '4739'
c Var 'aux1145' order represents '1' with '4740'
-4739 4740 0
c Var 'aux1145' direct represents '1' with '4741'
4739 -4740 4741 0
-4741 4740 0
-4741 -4739 0
c Var 'aux1145' order represents '2' with '4742'
-4740 4742 0
c Var 'aux1145' direct represents '2' with '4743'
4740 -4742 4743 0
-4743 4742 0
-4743 -4740 0
c Var 'aux1145' order represents '3' with '4744'
-4742 4744 0
c Var 'aux1145' direct represents '3' with '4745'
4742 -4744 4745 0
-4745 4744 0
-4745 -4742 0
c Var 'aux1145' direct represents '4' with '-4744'
4739 4741 4743 4745 -4744 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4746'
c Var 'aux1146' direct represents '0' with '4746'
c Var 'aux1146' order represents '1' with '4747'
-4746 4747 0
c Var 'aux1146' direct represents '1' with '4748'
4746 -4747 4748 0
-4748 4747 0
-4748 -4746 0
c Var 'aux1146' direct represents '2' with '-4747'
4746 4748 -4747 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4749'
c Var 'aux1147' direct represents '0' with '4749'
c Var 'aux1147' order represents '1' with '4750'
-4749 4750 0
c Var 'aux1147' direct represents '1' with '4751'
4749 -4750 4751 0
-4751 4750 0
-4751 -4749 0
c Var 'aux1147' direct represents '2' with '-4750'
4749 4751 -4750 0
c Encoding variable: aux1148 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4752'
c Var 'aux1148' direct represents '0' with '4752'
c Var 'aux1148' order represents '1' with '4753'
-4752 4753 0
c Var 'aux1148' direct represents '1' with '4754'
4752 -4753 4754 0
-4754 4753 0
-4754 -4752 0
c Var 'aux1148' direct represents '2' with '-4753'
4752 4754 -4753 0
c Encoding variable: aux1149 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4755'
c Var 'aux1149' direct represents '0' with '4755'
c Var 'aux1149' order represents '1' with '4756'
-4755 4756 0
c Var 'aux1149' direct represents '1' with '4757'
4755 -4756 4757 0
-4757 4756 0
-4757 -4755 0
c Var 'aux1149' direct represents '2' with '-4756'
4755 4757 -4756 0
c Encoding variable: aux1150 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1149))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4758'
c Var 'aux1150' direct represents '0' with '4758'
c Var 'aux1150' order represents '1' with '4759'
-4758 4759 0
c Var 'aux1150' direct represents '1' with '4760'
4758 -4759 4760 0
-4760 4759 0
-4760 -4758 0
c Var 'aux1150' order represents '2' with '4761'
-4759 4761 0
c Var 'aux1150' direct represents '2' with '4762'
4759 -4761 4762 0
-4762 4761 0
-4762 -4759 0
c Var 'aux1150' direct represents '3' with '-4761'
4758 4760 4762 -4761 0
c Encoding variable: aux1151 with domain: int(0..4) (representing constraint (aux1146 + aux1148))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4763'
c Var 'aux1151' direct represents '0' with '4763'
c Var 'aux1151' order represents '1' with '4764'
-4763 4764 0
c Var 'aux1151' direct represents '1' with '4765'
4763 -4764 4765 0
-4765 4764 0
-4765 -4763 0
c Var 'aux1151' order represents '2' with '4766'
-4764 4766 0
c Var 'aux1151' direct represents '2' with '4767'
4764 -4766 4767 0
-4767 4766 0
-4767 -4764 0
c Var 'aux1151' order represents '3' with '4768'
-4766 4768 0
c Var 'aux1151' direct represents '3' with '4769'
4766 -4768 4769 0
-4769 4768 0
-4769 -4766 0
c Var 'aux1151' direct represents '4' with '-4768'
4763 4765 4767 4769 -4768 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4770'
c Var 'aux1152' direct represents '0' with '4770'
c Var 'aux1152' order represents '1' with '4771'
-4770 4771 0
c Var 'aux1152' direct represents '1' with '4772'
4770 -4771 4772 0
-4772 4771 0
-4772 -4770 0
c Var 'aux1152' direct represents '2' with '-4771'
4770 4772 -4771 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4773'
c Var 'aux1153' direct represents '0' with '4773'
c Var 'aux1153' order represents '1' with '4774'
-4773 4774 0
c Var 'aux1153' direct represents '1' with '4775'
4773 -4774 4775 0
-4775 4774 0
-4775 -4773 0
c Var 'aux1153' direct represents '2' with '-4774'
4773 4775 -4774 0
c Encoding variable: aux1154 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4776'
c Var 'aux1154' direct represents '0' with '4776'
c Var 'aux1154' order represents '1' with '4777'
-4776 4777 0
c Var 'aux1154' direct represents '1' with '4778'
4776 -4777 4778 0
-4778 4777 0
-4778 -4776 0
c Var 'aux1154' direct represents '2' with '-4777'
4776 4778 -4777 0
c Encoding variable: aux1155 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4779'
c Var 'aux1155' direct represents '0' with '4779'
c Var 'aux1155' order represents '1' with '4780'
-4779 4780 0
c Var 'aux1155' direct represents '1' with '4781'
4779 -4780 4781 0
-4781 4780 0
-4781 -4779 0
c Var 'aux1155' direct represents '2' with '-4780'
4779 4781 -4780 0
c Encoding variable: aux1156 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1155))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4782'
c Var 'aux1156' direct represents '0' with '4782'
c Var 'aux1156' order represents '1' with '4783'
-4782 4783 0
c Var 'aux1156' direct represents '1' with '4784'
4782 -4783 4784 0
-4784 4783 0
-4784 -4782 0
c Var 'aux1156' order represents '2' with '4785'
-4783 4785 0
c Var 'aux1156' direct represents '2' with '4786'
4783 -4785 4786 0
-4786 4785 0
-4786 -4783 0
c Var 'aux1156' direct represents '3' with '-4785'
4782 4784 4786 -4785 0
c Encoding variable: aux1157 with domain: int(0..4) (representing constraint (aux1152 + aux1154))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4787'
c Var 'aux1157' direct represents '0' with '4787'
c Var 'aux1157' order represents '1' with '4788'
-4787 4788 0
c Var 'aux1157' direct represents '1' with '4789'
4787 -4788 4789 0
-4789 4788 0
-4789 -4787 0
c Var 'aux1157' order represents '2' with '4790'
-4788 4790 0
c Var 'aux1157' direct represents '2' with '4791'
4788 -4790 4791 0
-4791 4790 0
-4791 -4788 0
c Var 'aux1157' order represents '3' with '4792'
-4790 4792 0
c Var 'aux1157' direct represents '3' with '4793'
4790 -4792 4793 0
-4793 4792 0
-4793 -4790 0
c Var 'aux1157' direct represents '4' with '-4792'
4787 4789 4791 4793 -4792 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4794'
c Var 'aux1158' direct represents '0' with '4794'
c Var 'aux1158' order represents '1' with '4795'
-4794 4795 0
c Var 'aux1158' direct represents '1' with '4796'
4794 -4795 4796 0
-4796 4795 0
-4796 -4794 0
c Var 'aux1158' direct represents '2' with '-4795'
4794 4796 -4795 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4797'
c Var 'aux1159' direct represents '0' with '4797'
c Var 'aux1159' order represents '1' with '4798'
-4797 4798 0
c Var 'aux1159' direct represents '1' with '4799'
4797 -4798 4799 0
-4799 4798 0
-4799 -4797 0
c Var 'aux1159' direct represents '2' with '-4798'
4797 4799 -4798 0
c Encoding variable: aux1160 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4800'
c Var 'aux1160' direct represents '0' with '4800'
c Var 'aux1160' order represents '1' with '4801'
-4800 4801 0
c Var 'aux1160' direct represents '1' with '4802'
4800 -4801 4802 0
-4802 4801 0
-4802 -4800 0
c Var 'aux1160' direct represents '2' with '-4801'
4800 4802 -4801 0
c Encoding variable: aux1161 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4803'
c Var 'aux1161' direct represents '0' with '4803'
c Var 'aux1161' order represents '1' with '4804'
-4803 4804 0
c Var 'aux1161' direct represents '1' with '4805'
4803 -4804 4805 0
-4805 4804 0
-4805 -4803 0
c Var 'aux1161' direct represents '2' with '-4804'
4803 4805 -4804 0
c Encoding variable: aux1162 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1161))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4806'
c Var 'aux1162' direct represents '0' with '4806'
c Var 'aux1162' order represents '1' with '4807'
-4806 4807 0
c Var 'aux1162' direct represents '1' with '4808'
4806 -4807 4808 0
-4808 4807 0
-4808 -4806 0
c Var 'aux1162' order represents '2' with '4809'
-4807 4809 0
c Var 'aux1162' direct represents '2' with '4810'
4807 -4809 4810 0
-4810 4809 0
-4810 -4807 0
c Var 'aux1162' direct represents '3' with '-4809'
4806 4808 4810 -4809 0
c Encoding variable: aux1163 with domain: int(0..4) (representing constraint (aux1158 + aux1160))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4811'
c Var 'aux1163' direct represents '0' with '4811'
c Var 'aux1163' order represents '1' with '4812'
-4811 4812 0
c Var 'aux1163' direct represents '1' with '4813'
4811 -4812 4813 0
-4813 4812 0
-4813 -4811 0
c Var 'aux1163' order represents '2' with '4814'
-4812 4814 0
c Var 'aux1163' direct represents '2' with '4815'
4812 -4814 4815 0
-4815 4814 0
-4815 -4812 0
c Var 'aux1163' order represents '3' with '4816'
-4814 4816 0
c Var 'aux1163' direct represents '3' with '4817'
4814 -4816 4817 0
-4817 4816 0
-4817 -4814 0
c Var 'aux1163' direct represents '4' with '-4816'
4811 4813 4815 4817 -4816 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4818'
c Var 'aux1164' direct represents '0' with '4818'
c Var 'aux1164' order represents '1' with '4819'
-4818 4819 0
c Var 'aux1164' direct represents '1' with '4820'
4818 -4819 4820 0
-4820 4819 0
-4820 -4818 0
c Var 'aux1164' direct represents '2' with '-4819'
4818 4820 -4819 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4821'
c Var 'aux1165' direct represents '0' with '4821'
c Var 'aux1165' order represents '1' with '4822'
-4821 4822 0
c Var 'aux1165' direct represents '1' with '4823'
4821 -4822 4823 0
-4823 4822 0
-4823 -4821 0
c Var 'aux1165' direct represents '2' with '-4822'
4821 4823 -4822 0
c Encoding variable: aux1166 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4824'
c Var 'aux1166' direct represents '0' with '4824'
c Var 'aux1166' order represents '1' with '4825'
-4824 4825 0
c Var 'aux1166' direct represents '1' with '4826'
4824 -4825 4826 0
-4826 4825 0
-4826 -4824 0
c Var 'aux1166' direct represents '2' with '-4825'
4824 4826 -4825 0
c Encoding variable: aux1167 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4827'
c Var 'aux1167' direct represents '0' with '4827'
c Var 'aux1167' order represents '1' with '4828'
-4827 4828 0
c Var 'aux1167' direct represents '1' with '4829'
4827 -4828 4829 0
-4829 4828 0
-4829 -4827 0
c Var 'aux1167' direct represents '2' with '-4828'
4827 4829 -4828 0
c Encoding variable: aux1168 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1167))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4830'
c Var 'aux1168' direct represents '0' with '4830'
c Var 'aux1168' order represents '1' with '4831'
-4830 4831 0
c Var 'aux1168' direct represents '1' with '4832'
4830 -4831 4832 0
-4832 4831 0
-4832 -4830 0
c Var 'aux1168' order represents '2' with '4833'
-4831 4833 0
c Var 'aux1168' direct represents '2' with '4834'
4831 -4833 4834 0
-4834 4833 0
-4834 -4831 0
c Var 'aux1168' direct represents '3' with '-4833'
4830 4832 4834 -4833 0
c Encoding variable: aux1169 with domain: int(0..4) (representing constraint (aux1164 + aux1166))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4835'
c Var 'aux1169' direct represents '0' with '4835'
c Var 'aux1169' order represents '1' with '4836'
-4835 4836 0
c Var 'aux1169' direct represents '1' with '4837'
4835 -4836 4837 0
-4837 4836 0
-4837 -4835 0
c Var 'aux1169' order represents '2' with '4838'
-4836 4838 0
c Var 'aux1169' direct represents '2' with '4839'
4836 -4838 4839 0
-4839 4838 0
-4839 -4836 0
c Var 'aux1169' order represents '3' with '4840'
-4838 4840 0
c Var 'aux1169' direct represents '3' with '4841'
4838 -4840 4841 0
-4841 4840 0
-4841 -4838 0
c Var 'aux1169' direct represents '4' with '-4840'
4835 4837 4839 4841 -4840 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4842'
c Var 'aux1170' direct represents '0' with '4842'
c Var 'aux1170' order represents '1' with '4843'
-4842 4843 0
c Var 'aux1170' direct represents '1' with '4844'
4842 -4843 4844 0
-4844 4843 0
-4844 -4842 0
c Var 'aux1170' direct represents '2' with '-4843'
4842 4844 -4843 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4845'
c Var 'aux1171' direct represents '0' with '4845'
c Var 'aux1171' order represents '1' with '4846'
-4845 4846 0
c Var 'aux1171' direct represents '1' with '4847'
4845 -4846 4847 0
-4847 4846 0
-4847 -4845 0
c Var 'aux1171' direct represents '2' with '-4846'
4845 4847 -4846 0
c Encoding variable: aux1172 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4848'
c Var 'aux1172' direct represents '0' with '4848'
c Var 'aux1172' order represents '1' with '4849'
-4848 4849 0
c Var 'aux1172' direct represents '1' with '4850'
4848 -4849 4850 0
-4850 4849 0
-4850 -4848 0
c Var 'aux1172' direct represents '2' with '-4849'
4848 4850 -4849 0
c Encoding variable: aux1173 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4851'
c Var 'aux1173' direct represents '0' with '4851'
c Var 'aux1173' order represents '1' with '4852'
-4851 4852 0
c Var 'aux1173' direct represents '1' with '4853'
4851 -4852 4853 0
-4853 4852 0
-4853 -4851 0
c Var 'aux1173' direct represents '2' with '-4852'
4851 4853 -4852 0
c Encoding variable: aux1174 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1173))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4854'
c Var 'aux1174' direct represents '0' with '4854'
c Var 'aux1174' order represents '1' with '4855'
-4854 4855 0
c Var 'aux1174' direct represents '1' with '4856'
4854 -4855 4856 0
-4856 4855 0
-4856 -4854 0
c Var 'aux1174' order represents '2' with '4857'
-4855 4857 0
c Var 'aux1174' direct represents '2' with '4858'
4855 -4857 4858 0
-4858 4857 0
-4858 -4855 0
c Var 'aux1174' direct represents '3' with '-4857'
4854 4856 4858 -4857 0
c Encoding variable: aux1175 with domain: int(0..4) (representing constraint (aux1170 + aux1172))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4859'
c Var 'aux1175' direct represents '0' with '4859'
c Var 'aux1175' order represents '1' with '4860'
-4859 4860 0
c Var 'aux1175' direct represents '1' with '4861'
4859 -4860 4861 0
-4861 4860 0
-4861 -4859 0
c Var 'aux1175' order represents '2' with '4862'
-4860 4862 0
c Var 'aux1175' direct represents '2' with '4863'
4860 -4862 4863 0
-4863 4862 0
-4863 -4860 0
c Var 'aux1175' order represents '3' with '4864'
-4862 4864 0
c Var 'aux1175' direct represents '3' with '4865'
4862 -4864 4865 0
-4865 4864 0
-4865 -4862 0
c Var 'aux1175' direct represents '4' with '-4864'
4859 4861 4863 4865 -4864 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4866'
c Var 'aux1176' direct represents '0' with '4866'
c Var 'aux1176' order represents '1' with '4867'
-4866 4867 0
c Var 'aux1176' direct represents '1' with '4868'
4866 -4867 4868 0
-4868 4867 0
-4868 -4866 0
c Var 'aux1176' direct represents '2' with '-4867'
4866 4868 -4867 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4869'
c Var 'aux1177' direct represents '0' with '4869'
c Var 'aux1177' order represents '1' with '4870'
-4869 4870 0
c Var 'aux1177' direct represents '1' with '4871'
4869 -4870 4871 0
-4871 4870 0
-4871 -4869 0
c Var 'aux1177' direct represents '2' with '-4870'
4869 4871 -4870 0
c Encoding variable: aux1178 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4872'
c Var 'aux1178' direct represents '0' with '4872'
c Var 'aux1178' order represents '1' with '4873'
-4872 4873 0
c Var 'aux1178' direct represents '1' with '4874'
4872 -4873 4874 0
-4874 4873 0
-4874 -4872 0
c Var 'aux1178' direct represents '2' with '-4873'
4872 4874 -4873 0
c Encoding variable: aux1179 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4875'
c Var 'aux1179' direct represents '0' with '4875'
c Var 'aux1179' order represents '1' with '4876'
-4875 4876 0
c Var 'aux1179' direct represents '1' with '4877'
4875 -4876 4877 0
-4877 4876 0
-4877 -4875 0
c Var 'aux1179' direct represents '2' with '-4876'
4875 4877 -4876 0
c Encoding variable: aux1180 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1179))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4878'
c Var 'aux1180' direct represents '0' with '4878'
c Var 'aux1180' order represents '1' with '4879'
-4878 4879 0
c Var 'aux1180' direct represents '1' with '4880'
4878 -4879 4880 0
-4880 4879 0
-4880 -4878 0
c Var 'aux1180' order represents '2' with '4881'
-4879 4881 0
c Var 'aux1180' direct represents '2' with '4882'
4879 -4881 4882 0
-4882 4881 0
-4882 -4879 0
c Var 'aux1180' direct represents '3' with '-4881'
4878 4880 4882 -4881 0
c Encoding variable: aux1181 with domain: int(0..4) (representing constraint (aux1176 + aux1178))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '4883'
c Var 'aux1181' direct represents '0' with '4883'
c Var 'aux1181' order represents '1' with '4884'
-4883 4884 0
c Var 'aux1181' direct represents '1' with '4885'
4883 -4884 4885 0
-4885 4884 0
-4885 -4883 0
c Var 'aux1181' order represents '2' with '4886'
-4884 4886 0
c Var 'aux1181' direct represents '2' with '4887'
4884 -4886 4887 0
-4887 4886 0
-4887 -4884 0
c Var 'aux1181' order represents '3' with '4888'
-4886 4888 0
c Var 'aux1181' direct represents '3' with '4889'
4886 -4888 4889 0
-4889 4888 0
-4889 -4886 0
c Var 'aux1181' direct represents '4' with '-4888'
4883 4885 4887 4889 -4888 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '4890'
c Var 'aux1182' direct represents '0' with '4890'
c Var 'aux1182' order represents '1' with '4891'
-4890 4891 0
c Var 'aux1182' direct represents '1' with '4892'
4890 -4891 4892 0
-4892 4891 0
-4892 -4890 0
c Var 'aux1182' direct represents '2' with '-4891'
4890 4892 -4891 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '4893'
c Var 'aux1183' direct represents '0' with '4893'
c Var 'aux1183' order represents '1' with '4894'
-4893 4894 0
c Var 'aux1183' direct represents '1' with '4895'
4893 -4894 4895 0
-4895 4894 0
-4895 -4893 0
c Var 'aux1183' direct represents '2' with '-4894'
4893 4895 -4894 0
c Encoding variable: aux1184 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '4896'
c Var 'aux1184' direct represents '0' with '4896'
c Var 'aux1184' order represents '1' with '4897'
-4896 4897 0
c Var 'aux1184' direct represents '1' with '4898'
4896 -4897 4898 0
-4898 4897 0
-4898 -4896 0
c Var 'aux1184' direct represents '2' with '-4897'
4896 4898 -4897 0
c Encoding variable: aux1185 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '4899'
c Var 'aux1185' direct represents '0' with '4899'
c Var 'aux1185' order represents '1' with '4900'
-4899 4900 0
c Var 'aux1185' direct represents '1' with '4901'
4899 -4900 4901 0
-4901 4900 0
-4901 -4899 0
c Var 'aux1185' direct represents '2' with '-4900'
4899 4901 -4900 0
c Encoding variable: aux1186 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1185))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '4902'
c Var 'aux1186' direct represents '0' with '4902'
c Var 'aux1186' order represents '1' with '4903'
-4902 4903 0
c Var 'aux1186' direct represents '1' with '4904'
4902 -4903 4904 0
-4904 4903 0
-4904 -4902 0
c Var 'aux1186' order represents '2' with '4905'
-4903 4905 0
c Var 'aux1186' direct represents '2' with '4906'
4903 -4905 4906 0
-4906 4905 0
-4906 -4903 0
c Var 'aux1186' direct represents '3' with '-4905'
4902 4904 4906 -4905 0
c Encoding variable: aux1187 with domain: int(0..4) (representing constraint (aux1182 + aux1184))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '4907'
c Var 'aux1187' direct represents '0' with '4907'
c Var 'aux1187' order represents '1' with '4908'
-4907 4908 0
c Var 'aux1187' direct represents '1' with '4909'
4907 -4908 4909 0
-4909 4908 0
-4909 -4907 0
c Var 'aux1187' order represents '2' with '4910'
-4908 4910 0
c Var 'aux1187' direct represents '2' with '4911'
4908 -4910 4911 0
-4911 4910 0
-4911 -4908 0
c Var 'aux1187' order represents '3' with '4912'
-4910 4912 0
c Var 'aux1187' direct represents '3' with '4913'
4910 -4912 4913 0
-4913 4912 0
-4913 -4910 0
c Var 'aux1187' direct represents '4' with '-4912'
4907 4909 4911 4913 -4912 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '4914'
c Var 'aux1188' direct represents '0' with '4914'
c Var 'aux1188' order represents '1' with '4915'
-4914 4915 0
c Var 'aux1188' direct represents '1' with '4916'
4914 -4915 4916 0
-4916 4915 0
-4916 -4914 0
c Var 'aux1188' direct represents '2' with '-4915'
4914 4916 -4915 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '4917'
c Var 'aux1189' direct represents '0' with '4917'
c Var 'aux1189' order represents '1' with '4918'
-4917 4918 0
c Var 'aux1189' direct represents '1' with '4919'
4917 -4918 4919 0
-4919 4918 0
-4919 -4917 0
c Var 'aux1189' direct represents '2' with '-4918'
4917 4919 -4918 0
c Encoding variable: aux1190 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '4920'
c Var 'aux1190' direct represents '0' with '4920'
c Var 'aux1190' order represents '1' with '4921'
-4920 4921 0
c Var 'aux1190' direct represents '1' with '4922'
4920 -4921 4922 0
-4922 4921 0
-4922 -4920 0
c Var 'aux1190' direct represents '2' with '-4921'
4920 4922 -4921 0
c Encoding variable: aux1191 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '4923'
c Var 'aux1191' direct represents '0' with '4923'
c Var 'aux1191' order represents '1' with '4924'
-4923 4924 0
c Var 'aux1191' direct represents '1' with '4925'
4923 -4924 4925 0
-4925 4924 0
-4925 -4923 0
c Var 'aux1191' direct represents '2' with '-4924'
4923 4925 -4924 0
c Encoding variable: aux1192 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1191))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '4926'
c Var 'aux1192' direct represents '0' with '4926'
c Var 'aux1192' order represents '1' with '4927'
-4926 4927 0
c Var 'aux1192' direct represents '1' with '4928'
4926 -4927 4928 0
-4928 4927 0
-4928 -4926 0
c Var 'aux1192' order represents '2' with '4929'
-4927 4929 0
c Var 'aux1192' direct represents '2' with '4930'
4927 -4929 4930 0
-4930 4929 0
-4930 -4927 0
c Var 'aux1192' direct represents '3' with '-4929'
4926 4928 4930 -4929 0
c Encoding variable: aux1193 with domain: int(0..4) (representing constraint (aux1188 + aux1190))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '4931'
c Var 'aux1193' direct represents '0' with '4931'
c Var 'aux1193' order represents '1' with '4932'
-4931 4932 0
c Var 'aux1193' direct represents '1' with '4933'
4931 -4932 4933 0
-4933 4932 0
-4933 -4931 0
c Var 'aux1193' order represents '2' with '4934'
-4932 4934 0
c Var 'aux1193' direct represents '2' with '4935'
4932 -4934 4935 0
-4935 4934 0
-4935 -4932 0
c Var 'aux1193' order represents '3' with '4936'
-4934 4936 0
c Var 'aux1193' direct represents '3' with '4937'
4934 -4936 4937 0
-4937 4936 0
-4937 -4934 0
c Var 'aux1193' direct represents '4' with '-4936'
4931 4933 4935 4937 -4936 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '4938'
c Var 'aux1194' direct represents '0' with '4938'
c Var 'aux1194' order represents '1' with '4939'
-4938 4939 0
c Var 'aux1194' direct represents '1' with '4940'
4938 -4939 4940 0
-4940 4939 0
-4940 -4938 0
c Var 'aux1194' direct represents '2' with '-4939'
4938 4940 -4939 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '4941'
c Var 'aux1195' direct represents '0' with '4941'
c Var 'aux1195' order represents '1' with '4942'
-4941 4942 0
c Var 'aux1195' direct represents '1' with '4943'
4941 -4942 4943 0
-4943 4942 0
-4943 -4941 0
c Var 'aux1195' direct represents '2' with '-4942'
4941 4943 -4942 0
c Encoding variable: aux1196 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '4944'
c Var 'aux1196' direct represents '0' with '4944'
c Var 'aux1196' order represents '1' with '4945'
-4944 4945 0
c Var 'aux1196' direct represents '1' with '4946'
4944 -4945 4946 0
-4946 4945 0
-4946 -4944 0
c Var 'aux1196' direct represents '2' with '-4945'
4944 4946 -4945 0
c Encoding variable: aux1197 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '4947'
c Var 'aux1197' direct represents '0' with '4947'
c Var 'aux1197' order represents '1' with '4948'
-4947 4948 0
c Var 'aux1197' direct represents '1' with '4949'
4947 -4948 4949 0
-4949 4948 0
-4949 -4947 0
c Var 'aux1197' direct represents '2' with '-4948'
4947 4949 -4948 0
c Encoding variable: aux1198 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1197))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '4950'
c Var 'aux1198' direct represents '0' with '4950'
c Var 'aux1198' order represents '1' with '4951'
-4950 4951 0
c Var 'aux1198' direct represents '1' with '4952'
4950 -4951 4952 0
-4952 4951 0
-4952 -4950 0
c Var 'aux1198' order represents '2' with '4953'
-4951 4953 0
c Var 'aux1198' direct represents '2' with '4954'
4951 -4953 4954 0
-4954 4953 0
-4954 -4951 0
c Var 'aux1198' direct represents '3' with '-4953'
4950 4952 4954 -4953 0
c Encoding variable: aux1199 with domain: int(0..4) (representing constraint (aux1194 + aux1196))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '4955'
c Var 'aux1199' direct represents '0' with '4955'
c Var 'aux1199' order represents '1' with '4956'
-4955 4956 0
c Var 'aux1199' direct represents '1' with '4957'
4955 -4956 4957 0
-4957 4956 0
-4957 -4955 0
c Var 'aux1199' order represents '2' with '4958'
-4956 4958 0
c Var 'aux1199' direct represents '2' with '4959'
4956 -4958 4959 0
-4959 4958 0
-4959 -4956 0
c Var 'aux1199' order represents '3' with '4960'
-4958 4960 0
c Var 'aux1199' direct represents '3' with '4961'
4958 -4960 4961 0
-4961 4960 0
-4961 -4958 0
c Var 'aux1199' direct represents '4' with '-4960'
4955 4957 4959 4961 -4960 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '4962'
c Var 'aux1200' direct represents '0' with '4962'
c Var 'aux1200' order represents '1' with '4963'
-4962 4963 0
c Var 'aux1200' direct represents '1' with '4964'
4962 -4963 4964 0
-4964 4963 0
-4964 -4962 0
c Var 'aux1200' direct represents '2' with '-4963'
4962 4964 -4963 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '4965'
c Var 'aux1201' direct represents '0' with '4965'
c Var 'aux1201' order represents '1' with '4966'
-4965 4966 0
c Var 'aux1201' direct represents '1' with '4967'
4965 -4966 4967 0
-4967 4966 0
-4967 -4965 0
c Var 'aux1201' direct represents '2' with '-4966'
4965 4967 -4966 0
c Encoding variable: aux1202 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '4968'
c Var 'aux1202' direct represents '0' with '4968'
c Var 'aux1202' order represents '1' with '4969'
-4968 4969 0
c Var 'aux1202' direct represents '1' with '4970'
4968 -4969 4970 0
-4970 4969 0
-4970 -4968 0
c Var 'aux1202' direct represents '2' with '-4969'
4968 4970 -4969 0
c Encoding variable: aux1203 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '4971'
c Var 'aux1203' direct represents '0' with '4971'
c Var 'aux1203' order represents '1' with '4972'
-4971 4972 0
c Var 'aux1203' direct represents '1' with '4973'
4971 -4972 4973 0
-4973 4972 0
-4973 -4971 0
c Var 'aux1203' direct represents '2' with '-4972'
4971 4973 -4972 0
c Encoding variable: aux1204 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1203))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '4974'
c Var 'aux1204' direct represents '0' with '4974'
c Var 'aux1204' order represents '1' with '4975'
-4974 4975 0
c Var 'aux1204' direct represents '1' with '4976'
4974 -4975 4976 0
-4976 4975 0
-4976 -4974 0
c Var 'aux1204' order represents '2' with '4977'
-4975 4977 0
c Var 'aux1204' direct represents '2' with '4978'
4975 -4977 4978 0
-4978 4977 0
-4978 -4975 0
c Var 'aux1204' direct represents '3' with '-4977'
4974 4976 4978 -4977 0
c Encoding variable: aux1205 with domain: int(0..4) (representing constraint (aux1200 + aux1202))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '4979'
c Var 'aux1205' direct represents '0' with '4979'
c Var 'aux1205' order represents '1' with '4980'
-4979 4980 0
c Var 'aux1205' direct represents '1' with '4981'
4979 -4980 4981 0
-4981 4980 0
-4981 -4979 0
c Var 'aux1205' order represents '2' with '4982'
-4980 4982 0
c Var 'aux1205' direct represents '2' with '4983'
4980 -4982 4983 0
-4983 4982 0
-4983 -4980 0
c Var 'aux1205' order represents '3' with '4984'
-4982 4984 0
c Var 'aux1205' direct represents '3' with '4985'
4982 -4984 4985 0
-4985 4984 0
-4985 -4982 0
c Var 'aux1205' direct represents '4' with '-4984'
4979 4981 4983 4985 -4984 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '4986'
c Var 'aux1206' direct represents '0' with '4986'
c Var 'aux1206' order represents '1' with '4987'
-4986 4987 0
c Var 'aux1206' direct represents '1' with '4988'
4986 -4987 4988 0
-4988 4987 0
-4988 -4986 0
c Var 'aux1206' direct represents '2' with '-4987'
4986 4988 -4987 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '4989'
c Var 'aux1207' direct represents '0' with '4989'
c Var 'aux1207' order represents '1' with '4990'
-4989 4990 0
c Var 'aux1207' direct represents '1' with '4991'
4989 -4990 4991 0
-4991 4990 0
-4991 -4989 0
c Var 'aux1207' direct represents '2' with '-4990'
4989 4991 -4990 0
c Encoding variable: aux1208 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '4992'
c Var 'aux1208' direct represents '0' with '4992'
c Var 'aux1208' order represents '1' with '4993'
-4992 4993 0
c Var 'aux1208' direct represents '1' with '4994'
4992 -4993 4994 0
-4994 4993 0
-4994 -4992 0
c Var 'aux1208' direct represents '2' with '-4993'
4992 4994 -4993 0
c Encoding variable: aux1209 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '4995'
c Var 'aux1209' direct represents '0' with '4995'
c Var 'aux1209' order represents '1' with '4996'
-4995 4996 0
c Var 'aux1209' direct represents '1' with '4997'
4995 -4996 4997 0
-4997 4996 0
-4997 -4995 0
c Var 'aux1209' direct represents '2' with '-4996'
4995 4997 -4996 0
c Encoding variable: aux1210 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1209))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '4998'
c Var 'aux1210' direct represents '0' with '4998'
c Var 'aux1210' order represents '1' with '4999'
-4998 4999 0
c Var 'aux1210' direct represents '1' with '5000'
4998 -4999 5000 0
-5000 4999 0
-5000 -4998 0
c Var 'aux1210' order represents '2' with '5001'
-4999 5001 0
c Var 'aux1210' direct represents '2' with '5002'
4999 -5001 5002 0
-5002 5001 0
-5002 -4999 0
c Var 'aux1210' direct represents '3' with '-5001'
4998 5000 5002 -5001 0
c Encoding variable: aux1211 with domain: int(0..4) (representing constraint (aux1206 + aux1208))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '5003'
c Var 'aux1211' direct represents '0' with '5003'
c Var 'aux1211' order represents '1' with '5004'
-5003 5004 0
c Var 'aux1211' direct represents '1' with '5005'
5003 -5004 5005 0
-5005 5004 0
-5005 -5003 0
c Var 'aux1211' order represents '2' with '5006'
-5004 5006 0
c Var 'aux1211' direct represents '2' with '5007'
5004 -5006 5007 0
-5007 5006 0
-5007 -5004 0
c Var 'aux1211' order represents '3' with '5008'
-5006 5008 0
c Var 'aux1211' direct represents '3' with '5009'
5006 -5008 5009 0
-5009 5008 0
-5009 -5006 0
c Var 'aux1211' direct represents '4' with '-5008'
5003 5005 5007 5009 -5008 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '5010'
c Var 'aux1212' direct represents '0' with '5010'
c Var 'aux1212' order represents '1' with '5011'
-5010 5011 0
c Var 'aux1212' direct represents '1' with '5012'
5010 -5011 5012 0
-5012 5011 0
-5012 -5010 0
c Var 'aux1212' direct represents '2' with '-5011'
5010 5012 -5011 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '5013'
c Var 'aux1213' direct represents '0' with '5013'
c Var 'aux1213' order represents '1' with '5014'
-5013 5014 0
c Var 'aux1213' direct represents '1' with '5015'
5013 -5014 5015 0
-5015 5014 0
-5015 -5013 0
c Var 'aux1213' direct represents '2' with '-5014'
5013 5015 -5014 0
c Encoding variable: aux1214 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '5016'
c Var 'aux1214' direct represents '0' with '5016'
c Var 'aux1214' order represents '1' with '5017'
-5016 5017 0
c Var 'aux1214' direct represents '1' with '5018'
5016 -5017 5018 0
-5018 5017 0
-5018 -5016 0
c Var 'aux1214' direct represents '2' with '-5017'
5016 5018 -5017 0
c Encoding variable: aux1215 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '5019'
c Var 'aux1215' direct represents '0' with '5019'
c Var 'aux1215' order represents '1' with '5020'
-5019 5020 0
c Var 'aux1215' direct represents '1' with '5021'
5019 -5020 5021 0
-5021 5020 0
-5021 -5019 0
c Var 'aux1215' direct represents '2' with '-5020'
5019 5021 -5020 0
c Encoding variable: aux1216 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1215))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '5022'
c Var 'aux1216' direct represents '0' with '5022'
c Var 'aux1216' order represents '1' with '5023'
-5022 5023 0
c Var 'aux1216' direct represents '1' with '5024'
5022 -5023 5024 0
-5024 5023 0
-5024 -5022 0
c Var 'aux1216' order represents '2' with '5025'
-5023 5025 0
c Var 'aux1216' direct represents '2' with '5026'
5023 -5025 5026 0
-5026 5025 0
-5026 -5023 0
c Var 'aux1216' direct represents '3' with '-5025'
5022 5024 5026 -5025 0
c Encoding variable: aux1217 with domain: int(0..4) (representing constraint (aux1212 + aux1214))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '5027'
c Var 'aux1217' direct represents '0' with '5027'
c Var 'aux1217' order represents '1' with '5028'
-5027 5028 0
c Var 'aux1217' direct represents '1' with '5029'
5027 -5028 5029 0
-5029 5028 0
-5029 -5027 0
c Var 'aux1217' order represents '2' with '5030'
-5028 5030 0
c Var 'aux1217' direct represents '2' with '5031'
5028 -5030 5031 0
-5031 5030 0
-5031 -5028 0
c Var 'aux1217' order represents '3' with '5032'
-5030 5032 0
c Var 'aux1217' direct represents '3' with '5033'
5030 -5032 5033 0
-5033 5032 0
-5033 -5030 0
c Var 'aux1217' direct represents '4' with '-5032'
5027 5029 5031 5033 -5032 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '5034'
c Var 'aux1218' direct represents '0' with '5034'
c Var 'aux1218' order represents '1' with '5035'
-5034 5035 0
c Var 'aux1218' direct represents '1' with '5036'
5034 -5035 5036 0
-5036 5035 0
-5036 -5034 0
c Var 'aux1218' direct represents '2' with '-5035'
5034 5036 -5035 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '5037'
c Var 'aux1219' direct represents '0' with '5037'
c Var 'aux1219' order represents '1' with '5038'
-5037 5038 0
c Var 'aux1219' direct represents '1' with '5039'
5037 -5038 5039 0
-5039 5038 0
-5039 -5037 0
c Var 'aux1219' direct represents '2' with '-5038'
5037 5039 -5038 0
c Encoding variable: aux1220 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '5040'
c Var 'aux1220' direct represents '0' with '5040'
c Var 'aux1220' order represents '1' with '5041'
-5040 5041 0
c Var 'aux1220' direct represents '1' with '5042'
5040 -5041 5042 0
-5042 5041 0
-5042 -5040 0
c Var 'aux1220' direct represents '2' with '-5041'
5040 5042 -5041 0
c Encoding variable: aux1221 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '5043'
c Var 'aux1221' direct represents '0' with '5043'
c Var 'aux1221' order represents '1' with '5044'
-5043 5044 0
c Var 'aux1221' direct represents '1' with '5045'
5043 -5044 5045 0
-5045 5044 0
-5045 -5043 0
c Var 'aux1221' direct represents '2' with '-5044'
5043 5045 -5044 0
c Encoding variable: aux1222 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1221))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '5046'
c Var 'aux1222' direct represents '0' with '5046'
c Var 'aux1222' order represents '1' with '5047'
-5046 5047 0
c Var 'aux1222' direct represents '1' with '5048'
5046 -5047 5048 0
-5048 5047 0
-5048 -5046 0
c Var 'aux1222' order represents '2' with '5049'
-5047 5049 0
c Var 'aux1222' direct represents '2' with '5050'
5047 -5049 5050 0
-5050 5049 0
-5050 -5047 0
c Var 'aux1222' direct represents '3' with '-5049'
5046 5048 5050 -5049 0
c Encoding variable: aux1223 with domain: int(0..4) (representing constraint (aux1218 + aux1220))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '5051'
c Var 'aux1223' direct represents '0' with '5051'
c Var 'aux1223' order represents '1' with '5052'
-5051 5052 0
c Var 'aux1223' direct represents '1' with '5053'
5051 -5052 5053 0
-5053 5052 0
-5053 -5051 0
c Var 'aux1223' order represents '2' with '5054'
-5052 5054 0
c Var 'aux1223' direct represents '2' with '5055'
5052 -5054 5055 0
-5055 5054 0
-5055 -5052 0
c Var 'aux1223' order represents '3' with '5056'
-5054 5056 0
c Var 'aux1223' direct represents '3' with '5057'
5054 -5056 5057 0
-5057 5056 0
-5057 -5054 0
c Var 'aux1223' direct represents '4' with '-5056'
5051 5053 5055 5057 -5056 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '5058'
c Var 'aux1224' direct represents '0' with '5058'
c Var 'aux1224' order represents '1' with '5059'
-5058 5059 0
c Var 'aux1224' direct represents '1' with '5060'
5058 -5059 5060 0
-5060 5059 0
-5060 -5058 0
c Var 'aux1224' direct represents '2' with '-5059'
5058 5060 -5059 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '5061'
c Var 'aux1225' direct represents '0' with '5061'
c Var 'aux1225' order represents '1' with '5062'
-5061 5062 0
c Var 'aux1225' direct represents '1' with '5063'
5061 -5062 5063 0
-5063 5062 0
-5063 -5061 0
c Var 'aux1225' direct represents '2' with '-5062'
5061 5063 -5062 0
c Encoding variable: aux1226 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '5064'
c Var 'aux1226' direct represents '0' with '5064'
c Var 'aux1226' order represents '1' with '5065'
-5064 5065 0
c Var 'aux1226' direct represents '1' with '5066'
5064 -5065 5066 0
-5066 5065 0
-5066 -5064 0
c Var 'aux1226' direct represents '2' with '-5065'
5064 5066 -5065 0
c Encoding variable: aux1227 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '5067'
c Var 'aux1227' direct represents '0' with '5067'
c Var 'aux1227' order represents '1' with '5068'
-5067 5068 0
c Var 'aux1227' direct represents '1' with '5069'
5067 -5068 5069 0
-5069 5068 0
-5069 -5067 0
c Var 'aux1227' direct represents '2' with '-5068'
5067 5069 -5068 0
c Encoding variable: aux1228 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1227))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '5070'
c Var 'aux1228' direct represents '0' with '5070'
c Var 'aux1228' order represents '1' with '5071'
-5070 5071 0
c Var 'aux1228' direct represents '1' with '5072'
5070 -5071 5072 0
-5072 5071 0
-5072 -5070 0
c Var 'aux1228' order represents '2' with '5073'
-5071 5073 0
c Var 'aux1228' direct represents '2' with '5074'
5071 -5073 5074 0
-5074 5073 0
-5074 -5071 0
c Var 'aux1228' direct represents '3' with '-5073'
5070 5072 5074 -5073 0
c Encoding variable: aux1229 with domain: int(0..4) (representing constraint (aux1224 + aux1226))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '5075'
c Var 'aux1229' direct represents '0' with '5075'
c Var 'aux1229' order represents '1' with '5076'
-5075 5076 0
c Var 'aux1229' direct represents '1' with '5077'
5075 -5076 5077 0
-5077 5076 0
-5077 -5075 0
c Var 'aux1229' order represents '2' with '5078'
-5076 5078 0
c Var 'aux1229' direct represents '2' with '5079'
5076 -5078 5079 0
-5079 5078 0
-5079 -5076 0
c Var 'aux1229' order represents '3' with '5080'
-5078 5080 0
c Var 'aux1229' direct represents '3' with '5081'
5078 -5080 5081 0
-5081 5080 0
-5081 -5078 0
c Var 'aux1229' direct represents '4' with '-5080'
5075 5077 5079 5081 -5080 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '5082'
c Var 'aux1230' direct represents '0' with '5082'
c Var 'aux1230' order represents '1' with '5083'
-5082 5083 0
c Var 'aux1230' direct represents '1' with '5084'
5082 -5083 5084 0
-5084 5083 0
-5084 -5082 0
c Var 'aux1230' direct represents '2' with '-5083'
5082 5084 -5083 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '5085'
c Var 'aux1231' direct represents '0' with '5085'
c Var 'aux1231' order represents '1' with '5086'
-5085 5086 0
c Var 'aux1231' direct represents '1' with '5087'
5085 -5086 5087 0
-5087 5086 0
-5087 -5085 0
c Var 'aux1231' direct represents '2' with '-5086'
5085 5087 -5086 0
c Encoding variable: aux1232 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '5088'
c Var 'aux1232' direct represents '0' with '5088'
c Var 'aux1232' order represents '1' with '5089'
-5088 5089 0
c Var 'aux1232' direct represents '1' with '5090'
5088 -5089 5090 0
-5090 5089 0
-5090 -5088 0
c Var 'aux1232' direct represents '2' with '-5089'
5088 5090 -5089 0
c Encoding variable: aux1233 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '5091'
c Var 'aux1233' direct represents '0' with '5091'
c Var 'aux1233' order represents '1' with '5092'
-5091 5092 0
c Var 'aux1233' direct represents '1' with '5093'
5091 -5092 5093 0
-5093 5092 0
-5093 -5091 0
c Var 'aux1233' direct represents '2' with '-5092'
5091 5093 -5092 0
c Encoding variable: aux1234 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1233))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '5094'
c Var 'aux1234' direct represents '0' with '5094'
c Var 'aux1234' order represents '1' with '5095'
-5094 5095 0
c Var 'aux1234' direct represents '1' with '5096'
5094 -5095 5096 0
-5096 5095 0
-5096 -5094 0
c Var 'aux1234' order represents '2' with '5097'
-5095 5097 0
c Var 'aux1234' direct represents '2' with '5098'
5095 -5097 5098 0
-5098 5097 0
-5098 -5095 0
c Var 'aux1234' direct represents '3' with '-5097'
5094 5096 5098 -5097 0
c Encoding variable: aux1235 with domain: int(0..4) (representing constraint (aux1230 + aux1232))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '5099'
c Var 'aux1235' direct represents '0' with '5099'
c Var 'aux1235' order represents '1' with '5100'
-5099 5100 0
c Var 'aux1235' direct represents '1' with '5101'
5099 -5100 5101 0
-5101 5100 0
-5101 -5099 0
c Var 'aux1235' order represents '2' with '5102'
-5100 5102 0
c Var 'aux1235' direct represents '2' with '5103'
5100 -5102 5103 0
-5103 5102 0
-5103 -5100 0
c Var 'aux1235' order represents '3' with '5104'
-5102 5104 0
c Var 'aux1235' direct represents '3' with '5105'
5102 -5104 5105 0
-5105 5104 0
-5105 -5102 0
c Var 'aux1235' direct represents '4' with '-5104'
5099 5101 5103 5105 -5104 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '5106'
c Var 'aux1236' direct represents '0' with '5106'
c Var 'aux1236' order represents '1' with '5107'
-5106 5107 0
c Var 'aux1236' direct represents '1' with '5108'
5106 -5107 5108 0
-5108 5107 0
-5108 -5106 0
c Var 'aux1236' direct represents '2' with '-5107'
5106 5108 -5107 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '5109'
c Var 'aux1237' direct represents '0' with '5109'
c Var 'aux1237' order represents '1' with '5110'
-5109 5110 0
c Var 'aux1237' direct represents '1' with '5111'
5109 -5110 5111 0
-5111 5110 0
-5111 -5109 0
c Var 'aux1237' direct represents '2' with '-5110'
5109 5111 -5110 0
c Encoding variable: aux1238 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5112'
c Var 'aux1238' direct represents '0' with '5112'
c Var 'aux1238' order represents '1' with '5113'
-5112 5113 0
c Var 'aux1238' direct represents '1' with '5114'
5112 -5113 5114 0
-5114 5113 0
-5114 -5112 0
c Var 'aux1238' direct represents '2' with '-5113'
5112 5114 -5113 0
c Encoding variable: aux1239 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5115'
c Var 'aux1239' direct represents '0' with '5115'
c Var 'aux1239' order represents '1' with '5116'
-5115 5116 0
c Var 'aux1239' direct represents '1' with '5117'
5115 -5116 5117 0
-5117 5116 0
-5117 -5115 0
c Var 'aux1239' direct represents '2' with '-5116'
5115 5117 -5116 0
c Encoding variable: aux1240 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1239))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5118'
c Var 'aux1240' direct represents '0' with '5118'
c Var 'aux1240' order represents '1' with '5119'
-5118 5119 0
c Var 'aux1240' direct represents '1' with '5120'
5118 -5119 5120 0
-5120 5119 0
-5120 -5118 0
c Var 'aux1240' order represents '2' with '5121'
-5119 5121 0
c Var 'aux1240' direct represents '2' with '5122'
5119 -5121 5122 0
-5122 5121 0
-5122 -5119 0
c Var 'aux1240' direct represents '3' with '-5121'
5118 5120 5122 -5121 0
c Encoding variable: aux1241 with domain: int(0..4) (representing constraint (aux1236 + aux1238))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5123'
c Var 'aux1241' direct represents '0' with '5123'
c Var 'aux1241' order represents '1' with '5124'
-5123 5124 0
c Var 'aux1241' direct represents '1' with '5125'
5123 -5124 5125 0
-5125 5124 0
-5125 -5123 0
c Var 'aux1241' order represents '2' with '5126'
-5124 5126 0
c Var 'aux1241' direct represents '2' with '5127'
5124 -5126 5127 0
-5127 5126 0
-5127 -5124 0
c Var 'aux1241' order represents '3' with '5128'
-5126 5128 0
c Var 'aux1241' direct represents '3' with '5129'
5126 -5128 5129 0
-5129 5128 0
-5129 -5126 0
c Var 'aux1241' direct represents '4' with '-5128'
5123 5125 5127 5129 -5128 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5130'
c Var 'aux1242' direct represents '0' with '5130'
c Var 'aux1242' order represents '1' with '5131'
-5130 5131 0
c Var 'aux1242' direct represents '1' with '5132'
5130 -5131 5132 0
-5132 5131 0
-5132 -5130 0
c Var 'aux1242' direct represents '2' with '-5131'
5130 5132 -5131 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5133'
c Var 'aux1243' direct represents '0' with '5133'
c Var 'aux1243' order represents '1' with '5134'
-5133 5134 0
c Var 'aux1243' direct represents '1' with '5135'
5133 -5134 5135 0
-5135 5134 0
-5135 -5133 0
c Var 'aux1243' direct represents '2' with '-5134'
5133 5135 -5134 0
c Encoding variable: aux1244 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5136'
c Var 'aux1244' direct represents '0' with '5136'
c Var 'aux1244' order represents '1' with '5137'
-5136 5137 0
c Var 'aux1244' direct represents '1' with '5138'
5136 -5137 5138 0
-5138 5137 0
-5138 -5136 0
c Var 'aux1244' direct represents '2' with '-5137'
5136 5138 -5137 0
c Encoding variable: aux1245 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5139'
c Var 'aux1245' direct represents '0' with '5139'
c Var 'aux1245' order represents '1' with '5140'
-5139 5140 0
c Var 'aux1245' direct represents '1' with '5141'
5139 -5140 5141 0
-5141 5140 0
-5141 -5139 0
c Var 'aux1245' direct represents '2' with '-5140'
5139 5141 -5140 0
c Encoding variable: aux1246 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1245))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5142'
c Var 'aux1246' direct represents '0' with '5142'
c Var 'aux1246' order represents '1' with '5143'
-5142 5143 0
c Var 'aux1246' direct represents '1' with '5144'
5142 -5143 5144 0
-5144 5143 0
-5144 -5142 0
c Var 'aux1246' order represents '2' with '5145'
-5143 5145 0
c Var 'aux1246' direct represents '2' with '5146'
5143 -5145 5146 0
-5146 5145 0
-5146 -5143 0
c Var 'aux1246' direct represents '3' with '-5145'
5142 5144 5146 -5145 0
c Encoding variable: aux1247 with domain: int(0..4) (representing constraint (aux1242 + aux1244))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5147'
c Var 'aux1247' direct represents '0' with '5147'
c Var 'aux1247' order represents '1' with '5148'
-5147 5148 0
c Var 'aux1247' direct represents '1' with '5149'
5147 -5148 5149 0
-5149 5148 0
-5149 -5147 0
c Var 'aux1247' order represents '2' with '5150'
-5148 5150 0
c Var 'aux1247' direct represents '2' with '5151'
5148 -5150 5151 0
-5151 5150 0
-5151 -5148 0
c Var 'aux1247' order represents '3' with '5152'
-5150 5152 0
c Var 'aux1247' direct represents '3' with '5153'
5150 -5152 5153 0
-5153 5152 0
-5153 -5150 0
c Var 'aux1247' direct represents '4' with '-5152'
5147 5149 5151 5153 -5152 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5154'
c Var 'aux1248' direct represents '0' with '5154'
c Var 'aux1248' order represents '1' with '5155'
-5154 5155 0
c Var 'aux1248' direct represents '1' with '5156'
5154 -5155 5156 0
-5156 5155 0
-5156 -5154 0
c Var 'aux1248' direct represents '2' with '-5155'
5154 5156 -5155 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5157'
c Var 'aux1249' direct represents '0' with '5157'
c Var 'aux1249' order represents '1' with '5158'
-5157 5158 0
c Var 'aux1249' direct represents '1' with '5159'
5157 -5158 5159 0
-5159 5158 0
-5159 -5157 0
c Var 'aux1249' direct represents '2' with '-5158'
5157 5159 -5158 0
c Encoding variable: aux1250 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5160'
c Var 'aux1250' direct represents '0' with '5160'
c Var 'aux1250' order represents '1' with '5161'
-5160 5161 0
c Var 'aux1250' direct represents '1' with '5162'
5160 -5161 5162 0
-5162 5161 0
-5162 -5160 0
c Var 'aux1250' direct represents '2' with '-5161'
5160 5162 -5161 0
c Encoding variable: aux1251 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5163'
c Var 'aux1251' direct represents '0' with '5163'
c Var 'aux1251' order represents '1' with '5164'
-5163 5164 0
c Var 'aux1251' direct represents '1' with '5165'
5163 -5164 5165 0
-5165 5164 0
-5165 -5163 0
c Var 'aux1251' direct represents '2' with '-5164'
5163 5165 -5164 0
c Encoding variable: aux1252 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1251))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5166'
c Var 'aux1252' direct represents '0' with '5166'
c Var 'aux1252' order represents '1' with '5167'
-5166 5167 0
c Var 'aux1252' direct represents '1' with '5168'
5166 -5167 5168 0
-5168 5167 0
-5168 -5166 0
c Var 'aux1252' order represents '2' with '5169'
-5167 5169 0
c Var 'aux1252' direct represents '2' with '5170'
5167 -5169 5170 0
-5170 5169 0
-5170 -5167 0
c Var 'aux1252' direct represents '3' with '-5169'
5166 5168 5170 -5169 0
c Encoding variable: aux1253 with domain: int(0..4) (representing constraint (aux1248 + aux1250))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5171'
c Var 'aux1253' direct represents '0' with '5171'
c Var 'aux1253' order represents '1' with '5172'
-5171 5172 0
c Var 'aux1253' direct represents '1' with '5173'
5171 -5172 5173 0
-5173 5172 0
-5173 -5171 0
c Var 'aux1253' order represents '2' with '5174'
-5172 5174 0
c Var 'aux1253' direct represents '2' with '5175'
5172 -5174 5175 0
-5175 5174 0
-5175 -5172 0
c Var 'aux1253' order represents '3' with '5176'
-5174 5176 0
c Var 'aux1253' direct represents '3' with '5177'
5174 -5176 5177 0
-5177 5176 0
-5177 -5174 0
c Var 'aux1253' direct represents '4' with '-5176'
5171 5173 5175 5177 -5176 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5178'
c Var 'aux1254' direct represents '0' with '5178'
c Var 'aux1254' order represents '1' with '5179'
-5178 5179 0
c Var 'aux1254' direct represents '1' with '5180'
5178 -5179 5180 0
-5180 5179 0
-5180 -5178 0
c Var 'aux1254' direct represents '2' with '-5179'
5178 5180 -5179 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5181'
c Var 'aux1255' direct represents '0' with '5181'
c Var 'aux1255' order represents '1' with '5182'
-5181 5182 0
c Var 'aux1255' direct represents '1' with '5183'
5181 -5182 5183 0
-5183 5182 0
-5183 -5181 0
c Var 'aux1255' direct represents '2' with '-5182'
5181 5183 -5182 0
c Encoding variable: aux1256 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5184'
c Var 'aux1256' direct represents '0' with '5184'
c Var 'aux1256' order represents '1' with '5185'
-5184 5185 0
c Var 'aux1256' direct represents '1' with '5186'
5184 -5185 5186 0
-5186 5185 0
-5186 -5184 0
c Var 'aux1256' direct represents '2' with '-5185'
5184 5186 -5185 0
c Encoding variable: aux1257 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5187'
c Var 'aux1257' direct represents '0' with '5187'
c Var 'aux1257' order represents '1' with '5188'
-5187 5188 0
c Var 'aux1257' direct represents '1' with '5189'
5187 -5188 5189 0
-5189 5188 0
-5189 -5187 0
c Var 'aux1257' direct represents '2' with '-5188'
5187 5189 -5188 0
c Encoding variable: aux1258 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1257))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5190'
c Var 'aux1258' direct represents '0' with '5190'
c Var 'aux1258' order represents '1' with '5191'
-5190 5191 0
c Var 'aux1258' direct represents '1' with '5192'
5190 -5191 5192 0
-5192 5191 0
-5192 -5190 0
c Var 'aux1258' order represents '2' with '5193'
-5191 5193 0
c Var 'aux1258' direct represents '2' with '5194'
5191 -5193 5194 0
-5194 5193 0
-5194 -5191 0
c Var 'aux1258' direct represents '3' with '-5193'
5190 5192 5194 -5193 0
c Encoding variable: aux1259 with domain: int(0..4) (representing constraint (aux1254 + aux1256))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5195'
c Var 'aux1259' direct represents '0' with '5195'
c Var 'aux1259' order represents '1' with '5196'
-5195 5196 0
c Var 'aux1259' direct represents '1' with '5197'
5195 -5196 5197 0
-5197 5196 0
-5197 -5195 0
c Var 'aux1259' order represents '2' with '5198'
-5196 5198 0
c Var 'aux1259' direct represents '2' with '5199'
5196 -5198 5199 0
-5199 5198 0
-5199 -5196 0
c Var 'aux1259' order represents '3' with '5200'
-5198 5200 0
c Var 'aux1259' direct represents '3' with '5201'
5198 -5200 5201 0
-5201 5200 0
-5201 -5198 0
c Var 'aux1259' direct represents '4' with '-5200'
5195 5197 5199 5201 -5200 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5202'
c Var 'aux1260' direct represents '0' with '5202'
c Var 'aux1260' order represents '1' with '5203'
-5202 5203 0
c Var 'aux1260' direct represents '1' with '5204'
5202 -5203 5204 0
-5204 5203 0
-5204 -5202 0
c Var 'aux1260' direct represents '2' with '-5203'
5202 5204 -5203 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5205'
c Var 'aux1261' direct represents '0' with '5205'
c Var 'aux1261' order represents '1' with '5206'
-5205 5206 0
c Var 'aux1261' direct represents '1' with '5207'
5205 -5206 5207 0
-5207 5206 0
-5207 -5205 0
c Var 'aux1261' direct represents '2' with '-5206'
5205 5207 -5206 0
c Encoding variable: aux1262 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5208'
c Var 'aux1262' direct represents '0' with '5208'
c Var 'aux1262' order represents '1' with '5209'
-5208 5209 0
c Var 'aux1262' direct represents '1' with '5210'
5208 -5209 5210 0
-5210 5209 0
-5210 -5208 0
c Var 'aux1262' direct represents '2' with '-5209'
5208 5210 -5209 0
c Encoding variable: aux1263 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5211'
c Var 'aux1263' direct represents '0' with '5211'
c Var 'aux1263' order represents '1' with '5212'
-5211 5212 0
c Var 'aux1263' direct represents '1' with '5213'
5211 -5212 5213 0
-5213 5212 0
-5213 -5211 0
c Var 'aux1263' direct represents '2' with '-5212'
5211 5213 -5212 0
c Encoding variable: aux1264 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1263))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5214'
c Var 'aux1264' direct represents '0' with '5214'
c Var 'aux1264' order represents '1' with '5215'
-5214 5215 0
c Var 'aux1264' direct represents '1' with '5216'
5214 -5215 5216 0
-5216 5215 0
-5216 -5214 0
c Var 'aux1264' order represents '2' with '5217'
-5215 5217 0
c Var 'aux1264' direct represents '2' with '5218'
5215 -5217 5218 0
-5218 5217 0
-5218 -5215 0
c Var 'aux1264' direct represents '3' with '-5217'
5214 5216 5218 -5217 0
c Encoding variable: aux1265 with domain: int(0..4) (representing constraint (aux1260 + aux1262))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5219'
c Var 'aux1265' direct represents '0' with '5219'
c Var 'aux1265' order represents '1' with '5220'
-5219 5220 0
c Var 'aux1265' direct represents '1' with '5221'
5219 -5220 5221 0
-5221 5220 0
-5221 -5219 0
c Var 'aux1265' order represents '2' with '5222'
-5220 5222 0
c Var 'aux1265' direct represents '2' with '5223'
5220 -5222 5223 0
-5223 5222 0
-5223 -5220 0
c Var 'aux1265' order represents '3' with '5224'
-5222 5224 0
c Var 'aux1265' direct represents '3' with '5225'
5222 -5224 5225 0
-5225 5224 0
-5225 -5222 0
c Var 'aux1265' direct represents '4' with '-5224'
5219 5221 5223 5225 -5224 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5226'
c Var 'aux1266' direct represents '0' with '5226'
c Var 'aux1266' order represents '1' with '5227'
-5226 5227 0
c Var 'aux1266' direct represents '1' with '5228'
5226 -5227 5228 0
-5228 5227 0
-5228 -5226 0
c Var 'aux1266' direct represents '2' with '-5227'
5226 5228 -5227 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5229'
c Var 'aux1267' direct represents '0' with '5229'
c Var 'aux1267' order represents '1' with '5230'
-5229 5230 0
c Var 'aux1267' direct represents '1' with '5231'
5229 -5230 5231 0
-5231 5230 0
-5231 -5229 0
c Var 'aux1267' direct represents '2' with '-5230'
5229 5231 -5230 0
c Encoding variable: aux1268 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5232'
c Var 'aux1268' direct represents '0' with '5232'
c Var 'aux1268' order represents '1' with '5233'
-5232 5233 0
c Var 'aux1268' direct represents '1' with '5234'
5232 -5233 5234 0
-5234 5233 0
-5234 -5232 0
c Var 'aux1268' direct represents '2' with '-5233'
5232 5234 -5233 0
c Encoding variable: aux1269 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5235'
c Var 'aux1269' direct represents '0' with '5235'
c Var 'aux1269' order represents '1' with '5236'
-5235 5236 0
c Var 'aux1269' direct represents '1' with '5237'
5235 -5236 5237 0
-5237 5236 0
-5237 -5235 0
c Var 'aux1269' direct represents '2' with '-5236'
5235 5237 -5236 0
c Encoding variable: aux1270 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1269))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5238'
c Var 'aux1270' direct represents '0' with '5238'
c Var 'aux1270' order represents '1' with '5239'
-5238 5239 0
c Var 'aux1270' direct represents '1' with '5240'
5238 -5239 5240 0
-5240 5239 0
-5240 -5238 0
c Var 'aux1270' order represents '2' with '5241'
-5239 5241 0
c Var 'aux1270' direct represents '2' with '5242'
5239 -5241 5242 0
-5242 5241 0
-5242 -5239 0
c Var 'aux1270' direct represents '3' with '-5241'
5238 5240 5242 -5241 0
c Encoding variable: aux1271 with domain: int(0..4) (representing constraint (aux1266 + aux1268))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5243'
c Var 'aux1271' direct represents '0' with '5243'
c Var 'aux1271' order represents '1' with '5244'
-5243 5244 0
c Var 'aux1271' direct represents '1' with '5245'
5243 -5244 5245 0
-5245 5244 0
-5245 -5243 0
c Var 'aux1271' order represents '2' with '5246'
-5244 5246 0
c Var 'aux1271' direct represents '2' with '5247'
5244 -5246 5247 0
-5247 5246 0
-5247 -5244 0
c Var 'aux1271' order represents '3' with '5248'
-5246 5248 0
c Var 'aux1271' direct represents '3' with '5249'
5246 -5248 5249 0
-5249 5248 0
-5249 -5246 0
c Var 'aux1271' direct represents '4' with '-5248'
5243 5245 5247 5249 -5248 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5250'
c Var 'aux1272' direct represents '0' with '5250'
c Var 'aux1272' order represents '1' with '5251'
-5250 5251 0
c Var 'aux1272' direct represents '1' with '5252'
5250 -5251 5252 0
-5252 5251 0
-5252 -5250 0
c Var 'aux1272' direct represents '2' with '-5251'
5250 5252 -5251 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5253'
c Var 'aux1273' direct represents '0' with '5253'
c Var 'aux1273' order represents '1' with '5254'
-5253 5254 0
c Var 'aux1273' direct represents '1' with '5255'
5253 -5254 5255 0
-5255 5254 0
-5255 -5253 0
c Var 'aux1273' direct represents '2' with '-5254'
5253 5255 -5254 0
c Encoding variable: aux1274 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5256'
c Var 'aux1274' direct represents '0' with '5256'
c Var 'aux1274' order represents '1' with '5257'
-5256 5257 0
c Var 'aux1274' direct represents '1' with '5258'
5256 -5257 5258 0
-5258 5257 0
-5258 -5256 0
c Var 'aux1274' direct represents '2' with '-5257'
5256 5258 -5257 0
c Encoding variable: aux1275 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5259'
c Var 'aux1275' direct represents '0' with '5259'
c Var 'aux1275' order represents '1' with '5260'
-5259 5260 0
c Var 'aux1275' direct represents '1' with '5261'
5259 -5260 5261 0
-5261 5260 0
-5261 -5259 0
c Var 'aux1275' direct represents '2' with '-5260'
5259 5261 -5260 0
c Encoding variable: aux1276 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1275))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5262'
c Var 'aux1276' direct represents '0' with '5262'
c Var 'aux1276' order represents '1' with '5263'
-5262 5263 0
c Var 'aux1276' direct represents '1' with '5264'
5262 -5263 5264 0
-5264 5263 0
-5264 -5262 0
c Var 'aux1276' order represents '2' with '5265'
-5263 5265 0
c Var 'aux1276' direct represents '2' with '5266'
5263 -5265 5266 0
-5266 5265 0
-5266 -5263 0
c Var 'aux1276' direct represents '3' with '-5265'
5262 5264 5266 -5265 0
c Encoding variable: aux1277 with domain: int(0..4) (representing constraint (aux1272 + aux1274))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5267'
c Var 'aux1277' direct represents '0' with '5267'
c Var 'aux1277' order represents '1' with '5268'
-5267 5268 0
c Var 'aux1277' direct represents '1' with '5269'
5267 -5268 5269 0
-5269 5268 0
-5269 -5267 0
c Var 'aux1277' order represents '2' with '5270'
-5268 5270 0
c Var 'aux1277' direct represents '2' with '5271'
5268 -5270 5271 0
-5271 5270 0
-5271 -5268 0
c Var 'aux1277' order represents '3' with '5272'
-5270 5272 0
c Var 'aux1277' direct represents '3' with '5273'
5270 -5272 5273 0
-5273 5272 0
-5273 -5270 0
c Var 'aux1277' direct represents '4' with '-5272'
5267 5269 5271 5273 -5272 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5274'
c Var 'aux1278' direct represents '0' with '5274'
c Var 'aux1278' order represents '1' with '5275'
-5274 5275 0
c Var 'aux1278' direct represents '1' with '5276'
5274 -5275 5276 0
-5276 5275 0
-5276 -5274 0
c Var 'aux1278' direct represents '2' with '-5275'
5274 5276 -5275 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5277'
c Var 'aux1279' direct represents '0' with '5277'
c Var 'aux1279' order represents '1' with '5278'
-5277 5278 0
c Var 'aux1279' direct represents '1' with '5279'
5277 -5278 5279 0
-5279 5278 0
-5279 -5277 0
c Var 'aux1279' direct represents '2' with '-5278'
5277 5279 -5278 0
c Encoding variable: aux1280 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5280'
c Var 'aux1280' direct represents '0' with '5280'
c Var 'aux1280' order represents '1' with '5281'
-5280 5281 0
c Var 'aux1280' direct represents '1' with '5282'
5280 -5281 5282 0
-5282 5281 0
-5282 -5280 0
c Var 'aux1280' direct represents '2' with '-5281'
5280 5282 -5281 0
c Encoding variable: aux1281 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5283'
c Var 'aux1281' direct represents '0' with '5283'
c Var 'aux1281' order represents '1' with '5284'
-5283 5284 0
c Var 'aux1281' direct represents '1' with '5285'
5283 -5284 5285 0
-5285 5284 0
-5285 -5283 0
c Var 'aux1281' direct represents '2' with '-5284'
5283 5285 -5284 0
c Encoding variable: aux1282 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1281))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5286'
c Var 'aux1282' direct represents '0' with '5286'
c Var 'aux1282' order represents '1' with '5287'
-5286 5287 0
c Var 'aux1282' direct represents '1' with '5288'
5286 -5287 5288 0
-5288 5287 0
-5288 -5286 0
c Var 'aux1282' order represents '2' with '5289'
-5287 5289 0
c Var 'aux1282' direct represents '2' with '5290'
5287 -5289 5290 0
-5290 5289 0
-5290 -5287 0
c Var 'aux1282' direct represents '3' with '-5289'
5286 5288 5290 -5289 0
c Encoding variable: aux1283 with domain: int(0..4) (representing constraint (aux1278 + aux1280))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5291'
c Var 'aux1283' direct represents '0' with '5291'
c Var 'aux1283' order represents '1' with '5292'
-5291 5292 0
c Var 'aux1283' direct represents '1' with '5293'
5291 -5292 5293 0
-5293 5292 0
-5293 -5291 0
c Var 'aux1283' order represents '2' with '5294'
-5292 5294 0
c Var 'aux1283' direct represents '2' with '5295'
5292 -5294 5295 0
-5295 5294 0
-5295 -5292 0
c Var 'aux1283' order represents '3' with '5296'
-5294 5296 0
c Var 'aux1283' direct represents '3' with '5297'
5294 -5296 5297 0
-5297 5296 0
-5297 -5294 0
c Var 'aux1283' direct represents '4' with '-5296'
5291 5293 5295 5297 -5296 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5298'
c Var 'aux1284' direct represents '0' with '5298'
c Var 'aux1284' order represents '1' with '5299'
-5298 5299 0
c Var 'aux1284' direct represents '1' with '5300'
5298 -5299 5300 0
-5300 5299 0
-5300 -5298 0
c Var 'aux1284' direct represents '2' with '-5299'
5298 5300 -5299 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5301'
c Var 'aux1285' direct represents '0' with '5301'
c Var 'aux1285' order represents '1' with '5302'
-5301 5302 0
c Var 'aux1285' direct represents '1' with '5303'
5301 -5302 5303 0
-5303 5302 0
-5303 -5301 0
c Var 'aux1285' direct represents '2' with '-5302'
5301 5303 -5302 0
c Encoding variable: aux1286 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5304'
c Var 'aux1286' direct represents '0' with '5304'
c Var 'aux1286' order represents '1' with '5305'
-5304 5305 0
c Var 'aux1286' direct represents '1' with '5306'
5304 -5305 5306 0
-5306 5305 0
-5306 -5304 0
c Var 'aux1286' direct represents '2' with '-5305'
5304 5306 -5305 0
c Encoding variable: aux1287 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5307'
c Var 'aux1287' direct represents '0' with '5307'
c Var 'aux1287' order represents '1' with '5308'
-5307 5308 0
c Var 'aux1287' direct represents '1' with '5309'
5307 -5308 5309 0
-5309 5308 0
-5309 -5307 0
c Var 'aux1287' direct represents '2' with '-5308'
5307 5309 -5308 0
c Encoding variable: aux1288 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1287))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5310'
c Var 'aux1288' direct represents '0' with '5310'
c Var 'aux1288' order represents '1' with '5311'
-5310 5311 0
c Var 'aux1288' direct represents '1' with '5312'
5310 -5311 5312 0
-5312 5311 0
-5312 -5310 0
c Var 'aux1288' order represents '2' with '5313'
-5311 5313 0
c Var 'aux1288' direct represents '2' with '5314'
5311 -5313 5314 0
-5314 5313 0
-5314 -5311 0
c Var 'aux1288' direct represents '3' with '-5313'
5310 5312 5314 -5313 0
c Encoding variable: aux1289 with domain: int(0..4) (representing constraint (aux1284 + aux1286))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5315'
c Var 'aux1289' direct represents '0' with '5315'
c Var 'aux1289' order represents '1' with '5316'
-5315 5316 0
c Var 'aux1289' direct represents '1' with '5317'
5315 -5316 5317 0
-5317 5316 0
-5317 -5315 0
c Var 'aux1289' order represents '2' with '5318'
-5316 5318 0
c Var 'aux1289' direct represents '2' with '5319'
5316 -5318 5319 0
-5319 5318 0
-5319 -5316 0
c Var 'aux1289' order represents '3' with '5320'
-5318 5320 0
c Var 'aux1289' direct represents '3' with '5321'
5318 -5320 5321 0
-5321 5320 0
-5321 -5318 0
c Var 'aux1289' direct represents '4' with '-5320'
5315 5317 5319 5321 -5320 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5322'
c Var 'aux1290' direct represents '0' with '5322'
c Var 'aux1290' order represents '1' with '5323'
-5322 5323 0
c Var 'aux1290' direct represents '1' with '5324'
5322 -5323 5324 0
-5324 5323 0
-5324 -5322 0
c Var 'aux1290' direct represents '2' with '-5323'
5322 5324 -5323 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5325'
c Var 'aux1291' direct represents '0' with '5325'
c Var 'aux1291' order represents '1' with '5326'
-5325 5326 0
c Var 'aux1291' direct represents '1' with '5327'
5325 -5326 5327 0
-5327 5326 0
-5327 -5325 0
c Var 'aux1291' direct represents '2' with '-5326'
5325 5327 -5326 0
c Encoding variable: aux1292 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5328'
c Var 'aux1292' direct represents '0' with '5328'
c Var 'aux1292' order represents '1' with '5329'
-5328 5329 0
c Var 'aux1292' direct represents '1' with '5330'
5328 -5329 5330 0
-5330 5329 0
-5330 -5328 0
c Var 'aux1292' direct represents '2' with '-5329'
5328 5330 -5329 0
c Encoding variable: aux1293 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5331'
c Var 'aux1293' direct represents '0' with '5331'
c Var 'aux1293' order represents '1' with '5332'
-5331 5332 0
c Var 'aux1293' direct represents '1' with '5333'
5331 -5332 5333 0
-5333 5332 0
-5333 -5331 0
c Var 'aux1293' direct represents '2' with '-5332'
5331 5333 -5332 0
c Encoding variable: aux1294 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1293))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5334'
c Var 'aux1294' direct represents '0' with '5334'
c Var 'aux1294' order represents '1' with '5335'
-5334 5335 0
c Var 'aux1294' direct represents '1' with '5336'
5334 -5335 5336 0
-5336 5335 0
-5336 -5334 0
c Var 'aux1294' order represents '2' with '5337'
-5335 5337 0
c Var 'aux1294' direct represents '2' with '5338'
5335 -5337 5338 0
-5338 5337 0
-5338 -5335 0
c Var 'aux1294' direct represents '3' with '-5337'
5334 5336 5338 -5337 0
c Encoding variable: aux1295 with domain: int(0..4) (representing constraint (aux1290 + aux1292))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5339'
c Var 'aux1295' direct represents '0' with '5339'
c Var 'aux1295' order represents '1' with '5340'
-5339 5340 0
c Var 'aux1295' direct represents '1' with '5341'
5339 -5340 5341 0
-5341 5340 0
-5341 -5339 0
c Var 'aux1295' order represents '2' with '5342'
-5340 5342 0
c Var 'aux1295' direct represents '2' with '5343'
5340 -5342 5343 0
-5343 5342 0
-5343 -5340 0
c Var 'aux1295' order represents '3' with '5344'
-5342 5344 0
c Var 'aux1295' direct represents '3' with '5345'
5342 -5344 5345 0
-5345 5344 0
-5345 -5342 0
c Var 'aux1295' direct represents '4' with '-5344'
5339 5341 5343 5345 -5344 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5346'
c Var 'aux1296' direct represents '0' with '5346'
c Var 'aux1296' order represents '1' with '5347'
-5346 5347 0
c Var 'aux1296' direct represents '1' with '5348'
5346 -5347 5348 0
-5348 5347 0
-5348 -5346 0
c Var 'aux1296' direct represents '2' with '-5347'
5346 5348 -5347 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5349'
c Var 'aux1297' direct represents '0' with '5349'
c Var 'aux1297' order represents '1' with '5350'
-5349 5350 0
c Var 'aux1297' direct represents '1' with '5351'
5349 -5350 5351 0
-5351 5350 0
-5351 -5349 0
c Var 'aux1297' direct represents '2' with '-5350'
5349 5351 -5350 0
c Encoding variable: aux1298 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5352'
c Var 'aux1298' direct represents '0' with '5352'
c Var 'aux1298' order represents '1' with '5353'
-5352 5353 0
c Var 'aux1298' direct represents '1' with '5354'
5352 -5353 5354 0
-5354 5353 0
-5354 -5352 0
c Var 'aux1298' direct represents '2' with '-5353'
5352 5354 -5353 0
c Encoding variable: aux1299 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5355'
c Var 'aux1299' direct represents '0' with '5355'
c Var 'aux1299' order represents '1' with '5356'
-5355 5356 0
c Var 'aux1299' direct represents '1' with '5357'
5355 -5356 5357 0
-5357 5356 0
-5357 -5355 0
c Var 'aux1299' direct represents '2' with '-5356'
5355 5357 -5356 0
c Encoding variable: aux1300 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1299))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5358'
c Var 'aux1300' direct represents '0' with '5358'
c Var 'aux1300' order represents '1' with '5359'
-5358 5359 0
c Var 'aux1300' direct represents '1' with '5360'
5358 -5359 5360 0
-5360 5359 0
-5360 -5358 0
c Var 'aux1300' order represents '2' with '5361'
-5359 5361 0
c Var 'aux1300' direct represents '2' with '5362'
5359 -5361 5362 0
-5362 5361 0
-5362 -5359 0
c Var 'aux1300' direct represents '3' with '-5361'
5358 5360 5362 -5361 0
c Encoding variable: aux1301 with domain: int(0..4) (representing constraint (aux1296 + aux1298))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5363'
c Var 'aux1301' direct represents '0' with '5363'
c Var 'aux1301' order represents '1' with '5364'
-5363 5364 0
c Var 'aux1301' direct represents '1' with '5365'
5363 -5364 5365 0
-5365 5364 0
-5365 -5363 0
c Var 'aux1301' order represents '2' with '5366'
-5364 5366 0
c Var 'aux1301' direct represents '2' with '5367'
5364 -5366 5367 0
-5367 5366 0
-5367 -5364 0
c Var 'aux1301' order represents '3' with '5368'
-5366 5368 0
c Var 'aux1301' direct represents '3' with '5369'
5366 -5368 5369 0
-5369 5368 0
-5369 -5366 0
c Var 'aux1301' direct represents '4' with '-5368'
5363 5365 5367 5369 -5368 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5370'
c Var 'aux1302' direct represents '0' with '5370'
c Var 'aux1302' order represents '1' with '5371'
-5370 5371 0
c Var 'aux1302' direct represents '1' with '5372'
5370 -5371 5372 0
-5372 5371 0
-5372 -5370 0
c Var 'aux1302' direct represents '2' with '-5371'
5370 5372 -5371 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5373'
c Var 'aux1303' direct represents '0' with '5373'
c Var 'aux1303' order represents '1' with '5374'
-5373 5374 0
c Var 'aux1303' direct represents '1' with '5375'
5373 -5374 5375 0
-5375 5374 0
-5375 -5373 0
c Var 'aux1303' direct represents '2' with '-5374'
5373 5375 -5374 0
c Encoding variable: aux1304 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5376'
c Var 'aux1304' direct represents '0' with '5376'
c Var 'aux1304' order represents '1' with '5377'
-5376 5377 0
c Var 'aux1304' direct represents '1' with '5378'
5376 -5377 5378 0
-5378 5377 0
-5378 -5376 0
c Var 'aux1304' direct represents '2' with '-5377'
5376 5378 -5377 0
c Encoding variable: aux1305 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5379'
c Var 'aux1305' direct represents '0' with '5379'
c Var 'aux1305' order represents '1' with '5380'
-5379 5380 0
c Var 'aux1305' direct represents '1' with '5381'
5379 -5380 5381 0
-5381 5380 0
-5381 -5379 0
c Var 'aux1305' direct represents '2' with '-5380'
5379 5381 -5380 0
c Encoding variable: aux1306 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1305))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5382'
c Var 'aux1306' direct represents '0' with '5382'
c Var 'aux1306' order represents '1' with '5383'
-5382 5383 0
c Var 'aux1306' direct represents '1' with '5384'
5382 -5383 5384 0
-5384 5383 0
-5384 -5382 0
c Var 'aux1306' order represents '2' with '5385'
-5383 5385 0
c Var 'aux1306' direct represents '2' with '5386'
5383 -5385 5386 0
-5386 5385 0
-5386 -5383 0
c Var 'aux1306' direct represents '3' with '-5385'
5382 5384 5386 -5385 0
c Encoding variable: aux1307 with domain: int(0..4) (representing constraint (aux1302 + aux1304))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5387'
c Var 'aux1307' direct represents '0' with '5387'
c Var 'aux1307' order represents '1' with '5388'
-5387 5388 0
c Var 'aux1307' direct represents '1' with '5389'
5387 -5388 5389 0
-5389 5388 0
-5389 -5387 0
c Var 'aux1307' order represents '2' with '5390'
-5388 5390 0
c Var 'aux1307' direct represents '2' with '5391'
5388 -5390 5391 0
-5391 5390 0
-5391 -5388 0
c Var 'aux1307' order represents '3' with '5392'
-5390 5392 0
c Var 'aux1307' direct represents '3' with '5393'
5390 -5392 5393 0
-5393 5392 0
-5393 -5390 0
c Var 'aux1307' direct represents '4' with '-5392'
5387 5389 5391 5393 -5392 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5394'
c Var 'aux1308' direct represents '0' with '5394'
c Var 'aux1308' order represents '1' with '5395'
-5394 5395 0
c Var 'aux1308' direct represents '1' with '5396'
5394 -5395 5396 0
-5396 5395 0
-5396 -5394 0
c Var 'aux1308' direct represents '2' with '-5395'
5394 5396 -5395 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5397'
c Var 'aux1309' direct represents '0' with '5397'
c Var 'aux1309' order represents '1' with '5398'
-5397 5398 0
c Var 'aux1309' direct represents '1' with '5399'
5397 -5398 5399 0
-5399 5398 0
-5399 -5397 0
c Var 'aux1309' direct represents '2' with '-5398'
5397 5399 -5398 0
c Encoding variable: aux1310 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5400'
c Var 'aux1310' direct represents '0' with '5400'
c Var 'aux1310' order represents '1' with '5401'
-5400 5401 0
c Var 'aux1310' direct represents '1' with '5402'
5400 -5401 5402 0
-5402 5401 0
-5402 -5400 0
c Var 'aux1310' direct represents '2' with '-5401'
5400 5402 -5401 0
c Encoding variable: aux1311 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5403'
c Var 'aux1311' direct represents '0' with '5403'
c Var 'aux1311' order represents '1' with '5404'
-5403 5404 0
c Var 'aux1311' direct represents '1' with '5405'
5403 -5404 5405 0
-5405 5404 0
-5405 -5403 0
c Var 'aux1311' direct represents '2' with '-5404'
5403 5405 -5404 0
c Encoding variable: aux1312 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1311))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5406'
c Var 'aux1312' direct represents '0' with '5406'
c Var 'aux1312' order represents '1' with '5407'
-5406 5407 0
c Var 'aux1312' direct represents '1' with '5408'
5406 -5407 5408 0
-5408 5407 0
-5408 -5406 0
c Var 'aux1312' order represents '2' with '5409'
-5407 5409 0
c Var 'aux1312' direct represents '2' with '5410'
5407 -5409 5410 0
-5410 5409 0
-5410 -5407 0
c Var 'aux1312' direct represents '3' with '-5409'
5406 5408 5410 -5409 0
c Encoding variable: aux1313 with domain: int(0..4) (representing constraint (aux1308 + aux1310))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5411'
c Var 'aux1313' direct represents '0' with '5411'
c Var 'aux1313' order represents '1' with '5412'
-5411 5412 0
c Var 'aux1313' direct represents '1' with '5413'
5411 -5412 5413 0
-5413 5412 0
-5413 -5411 0
c Var 'aux1313' order represents '2' with '5414'
-5412 5414 0
c Var 'aux1313' direct represents '2' with '5415'
5412 -5414 5415 0
-5415 5414 0
-5415 -5412 0
c Var 'aux1313' order represents '3' with '5416'
-5414 5416 0
c Var 'aux1313' direct represents '3' with '5417'
5414 -5416 5417 0
-5417 5416 0
-5417 -5414 0
c Var 'aux1313' direct represents '4' with '-5416'
5411 5413 5415 5417 -5416 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5418'
c Var 'aux1314' direct represents '0' with '5418'
c Var 'aux1314' order represents '1' with '5419'
-5418 5419 0
c Var 'aux1314' direct represents '1' with '5420'
5418 -5419 5420 0
-5420 5419 0
-5420 -5418 0
c Var 'aux1314' direct represents '2' with '-5419'
5418 5420 -5419 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5421'
c Var 'aux1315' direct represents '0' with '5421'
c Var 'aux1315' order represents '1' with '5422'
-5421 5422 0
c Var 'aux1315' direct represents '1' with '5423'
5421 -5422 5423 0
-5423 5422 0
-5423 -5421 0
c Var 'aux1315' direct represents '2' with '-5422'
5421 5423 -5422 0
c Encoding variable: aux1316 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5424'
c Var 'aux1316' direct represents '0' with '5424'
c Var 'aux1316' order represents '1' with '5425'
-5424 5425 0
c Var 'aux1316' direct represents '1' with '5426'
5424 -5425 5426 0
-5426 5425 0
-5426 -5424 0
c Var 'aux1316' direct represents '2' with '-5425'
5424 5426 -5425 0
c Encoding variable: aux1317 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5427'
c Var 'aux1317' direct represents '0' with '5427'
c Var 'aux1317' order represents '1' with '5428'
-5427 5428 0
c Var 'aux1317' direct represents '1' with '5429'
5427 -5428 5429 0
-5429 5428 0
-5429 -5427 0
c Var 'aux1317' direct represents '2' with '-5428'
5427 5429 -5428 0
c Encoding variable: aux1318 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1317))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5430'
c Var 'aux1318' direct represents '0' with '5430'
c Var 'aux1318' order represents '1' with '5431'
-5430 5431 0
c Var 'aux1318' direct represents '1' with '5432'
5430 -5431 5432 0
-5432 5431 0
-5432 -5430 0
c Var 'aux1318' order represents '2' with '5433'
-5431 5433 0
c Var 'aux1318' direct represents '2' with '5434'
5431 -5433 5434 0
-5434 5433 0
-5434 -5431 0
c Var 'aux1318' direct represents '3' with '-5433'
5430 5432 5434 -5433 0
c Encoding variable: aux1319 with domain: int(0..4) (representing constraint (aux1314 + aux1316))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5435'
c Var 'aux1319' direct represents '0' with '5435'
c Var 'aux1319' order represents '1' with '5436'
-5435 5436 0
c Var 'aux1319' direct represents '1' with '5437'
5435 -5436 5437 0
-5437 5436 0
-5437 -5435 0
c Var 'aux1319' order represents '2' with '5438'
-5436 5438 0
c Var 'aux1319' direct represents '2' with '5439'
5436 -5438 5439 0
-5439 5438 0
-5439 -5436 0
c Var 'aux1319' order represents '3' with '5440'
-5438 5440 0
c Var 'aux1319' direct represents '3' with '5441'
5438 -5440 5441 0
-5441 5440 0
-5441 -5438 0
c Var 'aux1319' direct represents '4' with '-5440'
5435 5437 5439 5441 -5440 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5442'
c Var 'aux1320' direct represents '0' with '5442'
c Var 'aux1320' order represents '1' with '5443'
-5442 5443 0
c Var 'aux1320' direct represents '1' with '5444'
5442 -5443 5444 0
-5444 5443 0
-5444 -5442 0
c Var 'aux1320' direct represents '2' with '-5443'
5442 5444 -5443 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5445'
c Var 'aux1321' direct represents '0' with '5445'
c Var 'aux1321' order represents '1' with '5446'
-5445 5446 0
c Var 'aux1321' direct represents '1' with '5447'
5445 -5446 5447 0
-5447 5446 0
-5447 -5445 0
c Var 'aux1321' direct represents '2' with '-5446'
5445 5447 -5446 0
c Encoding variable: aux1322 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5448'
c Var 'aux1322' direct represents '0' with '5448'
c Var 'aux1322' order represents '1' with '5449'
-5448 5449 0
c Var 'aux1322' direct represents '1' with '5450'
5448 -5449 5450 0
-5450 5449 0
-5450 -5448 0
c Var 'aux1322' direct represents '2' with '-5449'
5448 5450 -5449 0
c Encoding variable: aux1323 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5451'
c Var 'aux1323' direct represents '0' with '5451'
c Var 'aux1323' order represents '1' with '5452'
-5451 5452 0
c Var 'aux1323' direct represents '1' with '5453'
5451 -5452 5453 0
-5453 5452 0
-5453 -5451 0
c Var 'aux1323' direct represents '2' with '-5452'
5451 5453 -5452 0
c Encoding variable: aux1324 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1323))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5454'
c Var 'aux1324' direct represents '0' with '5454'
c Var 'aux1324' order represents '1' with '5455'
-5454 5455 0
c Var 'aux1324' direct represents '1' with '5456'
5454 -5455 5456 0
-5456 5455 0
-5456 -5454 0
c Var 'aux1324' order represents '2' with '5457'
-5455 5457 0
c Var 'aux1324' direct represents '2' with '5458'
5455 -5457 5458 0
-5458 5457 0
-5458 -5455 0
c Var 'aux1324' direct represents '3' with '-5457'
5454 5456 5458 -5457 0
c Encoding variable: aux1325 with domain: int(0..4) (representing constraint (aux1320 + aux1322))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5459'
c Var 'aux1325' direct represents '0' with '5459'
c Var 'aux1325' order represents '1' with '5460'
-5459 5460 0
c Var 'aux1325' direct represents '1' with '5461'
5459 -5460 5461 0
-5461 5460 0
-5461 -5459 0
c Var 'aux1325' order represents '2' with '5462'
-5460 5462 0
c Var 'aux1325' direct represents '2' with '5463'
5460 -5462 5463 0
-5463 5462 0
-5463 -5460 0
c Var 'aux1325' order represents '3' with '5464'
-5462 5464 0
c Var 'aux1325' direct represents '3' with '5465'
5462 -5464 5465 0
-5465 5464 0
-5465 -5462 0
c Var 'aux1325' direct represents '4' with '-5464'
5459 5461 5463 5465 -5464 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5466'
c Var 'aux1326' direct represents '0' with '5466'
c Var 'aux1326' order represents '1' with '5467'
-5466 5467 0
c Var 'aux1326' direct represents '1' with '5468'
5466 -5467 5468 0
-5468 5467 0
-5468 -5466 0
c Var 'aux1326' direct represents '2' with '-5467'
5466 5468 -5467 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5469'
c Var 'aux1327' direct represents '0' with '5469'
c Var 'aux1327' order represents '1' with '5470'
-5469 5470 0
c Var 'aux1327' direct represents '1' with '5471'
5469 -5470 5471 0
-5471 5470 0
-5471 -5469 0
c Var 'aux1327' direct represents '2' with '-5470'
5469 5471 -5470 0
c Encoding variable: aux1328 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5472'
c Var 'aux1328' direct represents '0' with '5472'
c Var 'aux1328' order represents '1' with '5473'
-5472 5473 0
c Var 'aux1328' direct represents '1' with '5474'
5472 -5473 5474 0
-5474 5473 0
-5474 -5472 0
c Var 'aux1328' direct represents '2' with '-5473'
5472 5474 -5473 0
c Encoding variable: aux1329 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5475'
c Var 'aux1329' direct represents '0' with '5475'
c Var 'aux1329' order represents '1' with '5476'
-5475 5476 0
c Var 'aux1329' direct represents '1' with '5477'
5475 -5476 5477 0
-5477 5476 0
-5477 -5475 0
c Var 'aux1329' direct represents '2' with '-5476'
5475 5477 -5476 0
c Encoding variable: aux1330 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1329))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5478'
c Var 'aux1330' direct represents '0' with '5478'
c Var 'aux1330' order represents '1' with '5479'
-5478 5479 0
c Var 'aux1330' direct represents '1' with '5480'
5478 -5479 5480 0
-5480 5479 0
-5480 -5478 0
c Var 'aux1330' order represents '2' with '5481'
-5479 5481 0
c Var 'aux1330' direct represents '2' with '5482'
5479 -5481 5482 0
-5482 5481 0
-5482 -5479 0
c Var 'aux1330' direct represents '3' with '-5481'
5478 5480 5482 -5481 0
c Encoding variable: aux1331 with domain: int(0..4) (representing constraint (aux1326 + aux1328))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5483'
c Var 'aux1331' direct represents '0' with '5483'
c Var 'aux1331' order represents '1' with '5484'
-5483 5484 0
c Var 'aux1331' direct represents '1' with '5485'
5483 -5484 5485 0
-5485 5484 0
-5485 -5483 0
c Var 'aux1331' order represents '2' with '5486'
-5484 5486 0
c Var 'aux1331' direct represents '2' with '5487'
5484 -5486 5487 0
-5487 5486 0
-5487 -5484 0
c Var 'aux1331' order represents '3' with '5488'
-5486 5488 0
c Var 'aux1331' direct represents '3' with '5489'
5486 -5488 5489 0
-5489 5488 0
-5489 -5486 0
c Var 'aux1331' direct represents '4' with '-5488'
5483 5485 5487 5489 -5488 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5490'
c Var 'aux1332' direct represents '0' with '5490'
c Var 'aux1332' order represents '1' with '5491'
-5490 5491 0
c Var 'aux1332' direct represents '1' with '5492'
5490 -5491 5492 0
-5492 5491 0
-5492 -5490 0
c Var 'aux1332' direct represents '2' with '-5491'
5490 5492 -5491 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5493'
c Var 'aux1333' direct represents '0' with '5493'
c Var 'aux1333' order represents '1' with '5494'
-5493 5494 0
c Var 'aux1333' direct represents '1' with '5495'
5493 -5494 5495 0
-5495 5494 0
-5495 -5493 0
c Var 'aux1333' direct represents '2' with '-5494'
5493 5495 -5494 0
c Encoding variable: aux1334 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5496'
c Var 'aux1334' direct represents '0' with '5496'
c Var 'aux1334' order represents '1' with '5497'
-5496 5497 0
c Var 'aux1334' direct represents '1' with '5498'
5496 -5497 5498 0
-5498 5497 0
-5498 -5496 0
c Var 'aux1334' direct represents '2' with '-5497'
5496 5498 -5497 0
c Encoding variable: aux1335 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5499'
c Var 'aux1335' direct represents '0' with '5499'
c Var 'aux1335' order represents '1' with '5500'
-5499 5500 0
c Var 'aux1335' direct represents '1' with '5501'
5499 -5500 5501 0
-5501 5500 0
-5501 -5499 0
c Var 'aux1335' direct represents '2' with '-5500'
5499 5501 -5500 0
c Encoding variable: aux1336 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1335))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5502'
c Var 'aux1336' direct represents '0' with '5502'
c Var 'aux1336' order represents '1' with '5503'
-5502 5503 0
c Var 'aux1336' direct represents '1' with '5504'
5502 -5503 5504 0
-5504 5503 0
-5504 -5502 0
c Var 'aux1336' order represents '2' with '5505'
-5503 5505 0
c Var 'aux1336' direct represents '2' with '5506'
5503 -5505 5506 0
-5506 5505 0
-5506 -5503 0
c Var 'aux1336' direct represents '3' with '-5505'
5502 5504 5506 -5505 0
c Encoding variable: aux1337 with domain: int(0..4) (representing constraint (aux1332 + aux1334))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5507'
c Var 'aux1337' direct represents '0' with '5507'
c Var 'aux1337' order represents '1' with '5508'
-5507 5508 0
c Var 'aux1337' direct represents '1' with '5509'
5507 -5508 5509 0
-5509 5508 0
-5509 -5507 0
c Var 'aux1337' order represents '2' with '5510'
-5508 5510 0
c Var 'aux1337' direct represents '2' with '5511'
5508 -5510 5511 0
-5511 5510 0
-5511 -5508 0
c Var 'aux1337' order represents '3' with '5512'
-5510 5512 0
c Var 'aux1337' direct represents '3' with '5513'
5510 -5512 5513 0
-5513 5512 0
-5513 -5510 0
c Var 'aux1337' direct represents '4' with '-5512'
5507 5509 5511 5513 -5512 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5514'
c Var 'aux1338' direct represents '0' with '5514'
c Var 'aux1338' order represents '1' with '5515'
-5514 5515 0
c Var 'aux1338' direct represents '1' with '5516'
5514 -5515 5516 0
-5516 5515 0
-5516 -5514 0
c Var 'aux1338' direct represents '2' with '-5515'
5514 5516 -5515 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5517'
c Var 'aux1339' direct represents '0' with '5517'
c Var 'aux1339' order represents '1' with '5518'
-5517 5518 0
c Var 'aux1339' direct represents '1' with '5519'
5517 -5518 5519 0
-5519 5518 0
-5519 -5517 0
c Var 'aux1339' direct represents '2' with '-5518'
5517 5519 -5518 0
c Encoding variable: aux1340 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5520'
c Var 'aux1340' direct represents '0' with '5520'
c Var 'aux1340' order represents '1' with '5521'
-5520 5521 0
c Var 'aux1340' direct represents '1' with '5522'
5520 -5521 5522 0
-5522 5521 0
-5522 -5520 0
c Var 'aux1340' direct represents '2' with '-5521'
5520 5522 -5521 0
c Encoding variable: aux1341 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5523'
c Var 'aux1341' direct represents '0' with '5523'
c Var 'aux1341' order represents '1' with '5524'
-5523 5524 0
c Var 'aux1341' direct represents '1' with '5525'
5523 -5524 5525 0
-5525 5524 0
-5525 -5523 0
c Var 'aux1341' direct represents '2' with '-5524'
5523 5525 -5524 0
c Encoding variable: aux1342 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1341))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5526'
c Var 'aux1342' direct represents '0' with '5526'
c Var 'aux1342' order represents '1' with '5527'
-5526 5527 0
c Var 'aux1342' direct represents '1' with '5528'
5526 -5527 5528 0
-5528 5527 0
-5528 -5526 0
c Var 'aux1342' order represents '2' with '5529'
-5527 5529 0
c Var 'aux1342' direct represents '2' with '5530'
5527 -5529 5530 0
-5530 5529 0
-5530 -5527 0
c Var 'aux1342' direct represents '3' with '-5529'
5526 5528 5530 -5529 0
c Encoding variable: aux1343 with domain: int(0..4) (representing constraint (aux1338 + aux1340))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5531'
c Var 'aux1343' direct represents '0' with '5531'
c Var 'aux1343' order represents '1' with '5532'
-5531 5532 0
c Var 'aux1343' direct represents '1' with '5533'
5531 -5532 5533 0
-5533 5532 0
-5533 -5531 0
c Var 'aux1343' order represents '2' with '5534'
-5532 5534 0
c Var 'aux1343' direct represents '2' with '5535'
5532 -5534 5535 0
-5535 5534 0
-5535 -5532 0
c Var 'aux1343' order represents '3' with '5536'
-5534 5536 0
c Var 'aux1343' direct represents '3' with '5537'
5534 -5536 5537 0
-5537 5536 0
-5537 -5534 0
c Var 'aux1343' direct represents '4' with '-5536'
5531 5533 5535 5537 -5536 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5538'
c Var 'aux1344' direct represents '0' with '5538'
c Var 'aux1344' order represents '1' with '5539'
-5538 5539 0
c Var 'aux1344' direct represents '1' with '5540'
5538 -5539 5540 0
-5540 5539 0
-5540 -5538 0
c Var 'aux1344' direct represents '2' with '-5539'
5538 5540 -5539 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5541'
c Var 'aux1345' direct represents '0' with '5541'
c Var 'aux1345' order represents '1' with '5542'
-5541 5542 0
c Var 'aux1345' direct represents '1' with '5543'
5541 -5542 5543 0
-5543 5542 0
-5543 -5541 0
c Var 'aux1345' direct represents '2' with '-5542'
5541 5543 -5542 0
c Encoding variable: aux1346 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5544'
c Var 'aux1346' direct represents '0' with '5544'
c Var 'aux1346' order represents '1' with '5545'
-5544 5545 0
c Var 'aux1346' direct represents '1' with '5546'
5544 -5545 5546 0
-5546 5545 0
-5546 -5544 0
c Var 'aux1346' direct represents '2' with '-5545'
5544 5546 -5545 0
c Encoding variable: aux1347 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5547'
c Var 'aux1347' direct represents '0' with '5547'
c Var 'aux1347' order represents '1' with '5548'
-5547 5548 0
c Var 'aux1347' direct represents '1' with '5549'
5547 -5548 5549 0
-5549 5548 0
-5549 -5547 0
c Var 'aux1347' direct represents '2' with '-5548'
5547 5549 -5548 0
c Encoding variable: aux1348 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1347))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5550'
c Var 'aux1348' direct represents '0' with '5550'
c Var 'aux1348' order represents '1' with '5551'
-5550 5551 0
c Var 'aux1348' direct represents '1' with '5552'
5550 -5551 5552 0
-5552 5551 0
-5552 -5550 0
c Var 'aux1348' order represents '2' with '5553'
-5551 5553 0
c Var 'aux1348' direct represents '2' with '5554'
5551 -5553 5554 0
-5554 5553 0
-5554 -5551 0
c Var 'aux1348' direct represents '3' with '-5553'
5550 5552 5554 -5553 0
c Encoding variable: aux1349 with domain: int(0..4) (representing constraint (aux1344 + aux1346))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5555'
c Var 'aux1349' direct represents '0' with '5555'
c Var 'aux1349' order represents '1' with '5556'
-5555 5556 0
c Var 'aux1349' direct represents '1' with '5557'
5555 -5556 5557 0
-5557 5556 0
-5557 -5555 0
c Var 'aux1349' order represents '2' with '5558'
-5556 5558 0
c Var 'aux1349' direct represents '2' with '5559'
5556 -5558 5559 0
-5559 5558 0
-5559 -5556 0
c Var 'aux1349' order represents '3' with '5560'
-5558 5560 0
c Var 'aux1349' direct represents '3' with '5561'
5558 -5560 5561 0
-5561 5560 0
-5561 -5558 0
c Var 'aux1349' direct represents '4' with '-5560'
5555 5557 5559 5561 -5560 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5562'
c Var 'aux1350' direct represents '0' with '5562'
c Var 'aux1350' order represents '1' with '5563'
-5562 5563 0
c Var 'aux1350' direct represents '1' with '5564'
5562 -5563 5564 0
-5564 5563 0
-5564 -5562 0
c Var 'aux1350' direct represents '2' with '-5563'
5562 5564 -5563 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5565'
c Var 'aux1351' direct represents '0' with '5565'
c Var 'aux1351' order represents '1' with '5566'
-5565 5566 0
c Var 'aux1351' direct represents '1' with '5567'
5565 -5566 5567 0
-5567 5566 0
-5567 -5565 0
c Var 'aux1351' direct represents '2' with '-5566'
5565 5567 -5566 0
c Encoding variable: aux1352 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5568'
c Var 'aux1352' direct represents '0' with '5568'
c Var 'aux1352' order represents '1' with '5569'
-5568 5569 0
c Var 'aux1352' direct represents '1' with '5570'
5568 -5569 5570 0
-5570 5569 0
-5570 -5568 0
c Var 'aux1352' direct represents '2' with '-5569'
5568 5570 -5569 0
c Encoding variable: aux1353 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5571'
c Var 'aux1353' direct represents '0' with '5571'
c Var 'aux1353' order represents '1' with '5572'
-5571 5572 0
c Var 'aux1353' direct represents '1' with '5573'
5571 -5572 5573 0
-5573 5572 0
-5573 -5571 0
c Var 'aux1353' direct represents '2' with '-5572'
5571 5573 -5572 0
c Encoding variable: aux1354 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1353))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5574'
c Var 'aux1354' direct represents '0' with '5574'
c Var 'aux1354' order represents '1' with '5575'
-5574 5575 0
c Var 'aux1354' direct represents '1' with '5576'
5574 -5575 5576 0
-5576 5575 0
-5576 -5574 0
c Var 'aux1354' order represents '2' with '5577'
-5575 5577 0
c Var 'aux1354' direct represents '2' with '5578'
5575 -5577 5578 0
-5578 5577 0
-5578 -5575 0
c Var 'aux1354' direct represents '3' with '-5577'
5574 5576 5578 -5577 0
c Encoding variable: aux1355 with domain: int(0..4) (representing constraint (aux1350 + aux1352))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5579'
c Var 'aux1355' direct represents '0' with '5579'
c Var 'aux1355' order represents '1' with '5580'
-5579 5580 0
c Var 'aux1355' direct represents '1' with '5581'
5579 -5580 5581 0
-5581 5580 0
-5581 -5579 0
c Var 'aux1355' order represents '2' with '5582'
-5580 5582 0
c Var 'aux1355' direct represents '2' with '5583'
5580 -5582 5583 0
-5583 5582 0
-5583 -5580 0
c Var 'aux1355' order represents '3' with '5584'
-5582 5584 0
c Var 'aux1355' direct represents '3' with '5585'
5582 -5584 5585 0
-5585 5584 0
-5585 -5582 0
c Var 'aux1355' direct represents '4' with '-5584'
5579 5581 5583 5585 -5584 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5586'
c Var 'aux1356' direct represents '0' with '5586'
c Var 'aux1356' order represents '1' with '5587'
-5586 5587 0
c Var 'aux1356' direct represents '1' with '5588'
5586 -5587 5588 0
-5588 5587 0
-5588 -5586 0
c Var 'aux1356' direct represents '2' with '-5587'
5586 5588 -5587 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5589'
c Var 'aux1357' direct represents '0' with '5589'
c Var 'aux1357' order represents '1' with '5590'
-5589 5590 0
c Var 'aux1357' direct represents '1' with '5591'
5589 -5590 5591 0
-5591 5590 0
-5591 -5589 0
c Var 'aux1357' direct represents '2' with '-5590'
5589 5591 -5590 0
c Encoding variable: aux1358 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5592'
c Var 'aux1358' direct represents '0' with '5592'
c Var 'aux1358' order represents '1' with '5593'
-5592 5593 0
c Var 'aux1358' direct represents '1' with '5594'
5592 -5593 5594 0
-5594 5593 0
-5594 -5592 0
c Var 'aux1358' direct represents '2' with '-5593'
5592 5594 -5593 0
c Encoding variable: aux1359 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5595'
c Var 'aux1359' direct represents '0' with '5595'
c Var 'aux1359' order represents '1' with '5596'
-5595 5596 0
c Var 'aux1359' direct represents '1' with '5597'
5595 -5596 5597 0
-5597 5596 0
-5597 -5595 0
c Var 'aux1359' direct represents '2' with '-5596'
5595 5597 -5596 0
c Encoding variable: aux1360 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1359))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5598'
c Var 'aux1360' direct represents '0' with '5598'
c Var 'aux1360' order represents '1' with '5599'
-5598 5599 0
c Var 'aux1360' direct represents '1' with '5600'
5598 -5599 5600 0
-5600 5599 0
-5600 -5598 0
c Var 'aux1360' order represents '2' with '5601'
-5599 5601 0
c Var 'aux1360' direct represents '2' with '5602'
5599 -5601 5602 0
-5602 5601 0
-5602 -5599 0
c Var 'aux1360' direct represents '3' with '-5601'
5598 5600 5602 -5601 0
c Encoding variable: aux1361 with domain: int(0..4) (representing constraint (aux1356 + aux1358))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5603'
c Var 'aux1361' direct represents '0' with '5603'
c Var 'aux1361' order represents '1' with '5604'
-5603 5604 0
c Var 'aux1361' direct represents '1' with '5605'
5603 -5604 5605 0
-5605 5604 0
-5605 -5603 0
c Var 'aux1361' order represents '2' with '5606'
-5604 5606 0
c Var 'aux1361' direct represents '2' with '5607'
5604 -5606 5607 0
-5607 5606 0
-5607 -5604 0
c Var 'aux1361' order represents '3' with '5608'
-5606 5608 0
c Var 'aux1361' direct represents '3' with '5609'
5606 -5608 5609 0
-5609 5608 0
-5609 -5606 0
c Var 'aux1361' direct represents '4' with '-5608'
5603 5605 5607 5609 -5608 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5610'
c Var 'aux1362' direct represents '0' with '5610'
c Var 'aux1362' order represents '1' with '5611'
-5610 5611 0
c Var 'aux1362' direct represents '1' with '5612'
5610 -5611 5612 0
-5612 5611 0
-5612 -5610 0
c Var 'aux1362' direct represents '2' with '-5611'
5610 5612 -5611 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5613'
c Var 'aux1363' direct represents '0' with '5613'
c Var 'aux1363' order represents '1' with '5614'
-5613 5614 0
c Var 'aux1363' direct represents '1' with '5615'
5613 -5614 5615 0
-5615 5614 0
-5615 -5613 0
c Var 'aux1363' direct represents '2' with '-5614'
5613 5615 -5614 0
c Encoding variable: aux1364 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5616'
c Var 'aux1364' direct represents '0' with '5616'
c Var 'aux1364' order represents '1' with '5617'
-5616 5617 0
c Var 'aux1364' direct represents '1' with '5618'
5616 -5617 5618 0
-5618 5617 0
-5618 -5616 0
c Var 'aux1364' direct represents '2' with '-5617'
5616 5618 -5617 0
c Encoding variable: aux1365 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5619'
c Var 'aux1365' direct represents '0' with '5619'
c Var 'aux1365' order represents '1' with '5620'
-5619 5620 0
c Var 'aux1365' direct represents '1' with '5621'
5619 -5620 5621 0
-5621 5620 0
-5621 -5619 0
c Var 'aux1365' direct represents '2' with '-5620'
5619 5621 -5620 0
c Encoding variable: aux1366 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1365))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5622'
c Var 'aux1366' direct represents '0' with '5622'
c Var 'aux1366' order represents '1' with '5623'
-5622 5623 0
c Var 'aux1366' direct represents '1' with '5624'
5622 -5623 5624 0
-5624 5623 0
-5624 -5622 0
c Var 'aux1366' order represents '2' with '5625'
-5623 5625 0
c Var 'aux1366' direct represents '2' with '5626'
5623 -5625 5626 0
-5626 5625 0
-5626 -5623 0
c Var 'aux1366' direct represents '3' with '-5625'
5622 5624 5626 -5625 0
c Encoding variable: aux1367 with domain: int(0..4) (representing constraint (aux1362 + aux1364))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5627'
c Var 'aux1367' direct represents '0' with '5627'
c Var 'aux1367' order represents '1' with '5628'
-5627 5628 0
c Var 'aux1367' direct represents '1' with '5629'
5627 -5628 5629 0
-5629 5628 0
-5629 -5627 0
c Var 'aux1367' order represents '2' with '5630'
-5628 5630 0
c Var 'aux1367' direct represents '2' with '5631'
5628 -5630 5631 0
-5631 5630 0
-5631 -5628 0
c Var 'aux1367' order represents '3' with '5632'
-5630 5632 0
c Var 'aux1367' direct represents '3' with '5633'
5630 -5632 5633 0
-5633 5632 0
-5633 -5630 0
c Var 'aux1367' direct represents '4' with '-5632'
5627 5629 5631 5633 -5632 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5634'
c Var 'aux1368' direct represents '0' with '5634'
c Var 'aux1368' order represents '1' with '5635'
-5634 5635 0
c Var 'aux1368' direct represents '1' with '5636'
5634 -5635 5636 0
-5636 5635 0
-5636 -5634 0
c Var 'aux1368' direct represents '2' with '-5635'
5634 5636 -5635 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5637'
c Var 'aux1369' direct represents '0' with '5637'
c Var 'aux1369' order represents '1' with '5638'
-5637 5638 0
c Var 'aux1369' direct represents '1' with '5639'
5637 -5638 5639 0
-5639 5638 0
-5639 -5637 0
c Var 'aux1369' direct represents '2' with '-5638'
5637 5639 -5638 0
c Encoding variable: aux1370 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5640'
c Var 'aux1370' direct represents '0' with '5640'
c Var 'aux1370' order represents '1' with '5641'
-5640 5641 0
c Var 'aux1370' direct represents '1' with '5642'
5640 -5641 5642 0
-5642 5641 0
-5642 -5640 0
c Var 'aux1370' direct represents '2' with '-5641'
5640 5642 -5641 0
c Encoding variable: aux1371 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5643'
c Var 'aux1371' direct represents '0' with '5643'
c Var 'aux1371' order represents '1' with '5644'
-5643 5644 0
c Var 'aux1371' direct represents '1' with '5645'
5643 -5644 5645 0
-5645 5644 0
-5645 -5643 0
c Var 'aux1371' direct represents '2' with '-5644'
5643 5645 -5644 0
c Encoding variable: aux1372 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1371))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5646'
c Var 'aux1372' direct represents '0' with '5646'
c Var 'aux1372' order represents '1' with '5647'
-5646 5647 0
c Var 'aux1372' direct represents '1' with '5648'
5646 -5647 5648 0
-5648 5647 0
-5648 -5646 0
c Var 'aux1372' order represents '2' with '5649'
-5647 5649 0
c Var 'aux1372' direct represents '2' with '5650'
5647 -5649 5650 0
-5650 5649 0
-5650 -5647 0
c Var 'aux1372' direct represents '3' with '-5649'
5646 5648 5650 -5649 0
c Encoding variable: aux1373 with domain: int(0..4) (representing constraint (aux1368 + aux1370))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5651'
c Var 'aux1373' direct represents '0' with '5651'
c Var 'aux1373' order represents '1' with '5652'
-5651 5652 0
c Var 'aux1373' direct represents '1' with '5653'
5651 -5652 5653 0
-5653 5652 0
-5653 -5651 0
c Var 'aux1373' order represents '2' with '5654'
-5652 5654 0
c Var 'aux1373' direct represents '2' with '5655'
5652 -5654 5655 0
-5655 5654 0
-5655 -5652 0
c Var 'aux1373' order represents '3' with '5656'
-5654 5656 0
c Var 'aux1373' direct represents '3' with '5657'
5654 -5656 5657 0
-5657 5656 0
-5657 -5654 0
c Var 'aux1373' direct represents '4' with '-5656'
5651 5653 5655 5657 -5656 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5658'
c Var 'aux1374' direct represents '0' with '5658'
c Var 'aux1374' order represents '1' with '5659'
-5658 5659 0
c Var 'aux1374' direct represents '1' with '5660'
5658 -5659 5660 0
-5660 5659 0
-5660 -5658 0
c Var 'aux1374' direct represents '2' with '-5659'
5658 5660 -5659 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5661'
c Var 'aux1375' direct represents '0' with '5661'
c Var 'aux1375' order represents '1' with '5662'
-5661 5662 0
c Var 'aux1375' direct represents '1' with '5663'
5661 -5662 5663 0
-5663 5662 0
-5663 -5661 0
c Var 'aux1375' direct represents '2' with '-5662'
5661 5663 -5662 0
c Encoding variable: aux1376 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5664'
c Var 'aux1376' direct represents '0' with '5664'
c Var 'aux1376' order represents '1' with '5665'
-5664 5665 0
c Var 'aux1376' direct represents '1' with '5666'
5664 -5665 5666 0
-5666 5665 0
-5666 -5664 0
c Var 'aux1376' direct represents '2' with '-5665'
5664 5666 -5665 0
c Encoding variable: aux1377 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5667'
c Var 'aux1377' direct represents '0' with '5667'
c Var 'aux1377' order represents '1' with '5668'
-5667 5668 0
c Var 'aux1377' direct represents '1' with '5669'
5667 -5668 5669 0
-5669 5668 0
-5669 -5667 0
c Var 'aux1377' direct represents '2' with '-5668'
5667 5669 -5668 0
c Encoding variable: aux1378 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1377))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5670'
c Var 'aux1378' direct represents '0' with '5670'
c Var 'aux1378' order represents '1' with '5671'
-5670 5671 0
c Var 'aux1378' direct represents '1' with '5672'
5670 -5671 5672 0
-5672 5671 0
-5672 -5670 0
c Var 'aux1378' order represents '2' with '5673'
-5671 5673 0
c Var 'aux1378' direct represents '2' with '5674'
5671 -5673 5674 0
-5674 5673 0
-5674 -5671 0
c Var 'aux1378' direct represents '3' with '-5673'
5670 5672 5674 -5673 0
c Encoding variable: aux1379 with domain: int(0..4) (representing constraint (aux1374 + aux1376))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5675'
c Var 'aux1379' direct represents '0' with '5675'
c Var 'aux1379' order represents '1' with '5676'
-5675 5676 0
c Var 'aux1379' direct represents '1' with '5677'
5675 -5676 5677 0
-5677 5676 0
-5677 -5675 0
c Var 'aux1379' order represents '2' with '5678'
-5676 5678 0
c Var 'aux1379' direct represents '2' with '5679'
5676 -5678 5679 0
-5679 5678 0
-5679 -5676 0
c Var 'aux1379' order represents '3' with '5680'
-5678 5680 0
c Var 'aux1379' direct represents '3' with '5681'
5678 -5680 5681 0
-5681 5680 0
-5681 -5678 0
c Var 'aux1379' direct represents '4' with '-5680'
5675 5677 5679 5681 -5680 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5682'
c Var 'aux1380' direct represents '0' with '5682'
c Var 'aux1380' order represents '1' with '5683'
-5682 5683 0
c Var 'aux1380' direct represents '1' with '5684'
5682 -5683 5684 0
-5684 5683 0
-5684 -5682 0
c Var 'aux1380' direct represents '2' with '-5683'
5682 5684 -5683 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5685'
c Var 'aux1381' direct represents '0' with '5685'
c Var 'aux1381' order represents '1' with '5686'
-5685 5686 0
c Var 'aux1381' direct represents '1' with '5687'
5685 -5686 5687 0
-5687 5686 0
-5687 -5685 0
c Var 'aux1381' direct represents '2' with '-5686'
5685 5687 -5686 0
c Encoding variable: aux1382 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5688'
c Var 'aux1382' direct represents '0' with '5688'
c Var 'aux1382' order represents '1' with '5689'
-5688 5689 0
c Var 'aux1382' direct represents '1' with '5690'
5688 -5689 5690 0
-5690 5689 0
-5690 -5688 0
c Var 'aux1382' direct represents '2' with '-5689'
5688 5690 -5689 0
c Encoding variable: aux1383 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5691'
c Var 'aux1383' direct represents '0' with '5691'
c Var 'aux1383' order represents '1' with '5692'
-5691 5692 0
c Var 'aux1383' direct represents '1' with '5693'
5691 -5692 5693 0
-5693 5692 0
-5693 -5691 0
c Var 'aux1383' direct represents '2' with '-5692'
5691 5693 -5692 0
c Encoding variable: aux1384 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1383))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5694'
c Var 'aux1384' direct represents '0' with '5694'
c Var 'aux1384' order represents '1' with '5695'
-5694 5695 0
c Var 'aux1384' direct represents '1' with '5696'
5694 -5695 5696 0
-5696 5695 0
-5696 -5694 0
c Var 'aux1384' order represents '2' with '5697'
-5695 5697 0
c Var 'aux1384' direct represents '2' with '5698'
5695 -5697 5698 0
-5698 5697 0
-5698 -5695 0
c Var 'aux1384' direct represents '3' with '-5697'
5694 5696 5698 -5697 0
c Encoding variable: aux1385 with domain: int(0..4) (representing constraint (aux1380 + aux1382))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5699'
c Var 'aux1385' direct represents '0' with '5699'
c Var 'aux1385' order represents '1' with '5700'
-5699 5700 0
c Var 'aux1385' direct represents '1' with '5701'
5699 -5700 5701 0
-5701 5700 0
-5701 -5699 0
c Var 'aux1385' order represents '2' with '5702'
-5700 5702 0
c Var 'aux1385' direct represents '2' with '5703'
5700 -5702 5703 0
-5703 5702 0
-5703 -5700 0
c Var 'aux1385' order represents '3' with '5704'
-5702 5704 0
c Var 'aux1385' direct represents '3' with '5705'
5702 -5704 5705 0
-5705 5704 0
-5705 -5702 0
c Var 'aux1385' direct represents '4' with '-5704'
5699 5701 5703 5705 -5704 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5706'
c Var 'aux1386' direct represents '0' with '5706'
c Var 'aux1386' order represents '1' with '5707'
-5706 5707 0
c Var 'aux1386' direct represents '1' with '5708'
5706 -5707 5708 0
-5708 5707 0
-5708 -5706 0
c Var 'aux1386' direct represents '2' with '-5707'
5706 5708 -5707 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5709'
c Var 'aux1387' direct represents '0' with '5709'
c Var 'aux1387' order represents '1' with '5710'
-5709 5710 0
c Var 'aux1387' direct represents '1' with '5711'
5709 -5710 5711 0
-5711 5710 0
-5711 -5709 0
c Var 'aux1387' direct represents '2' with '-5710'
5709 5711 -5710 0
c Encoding variable: aux1388 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5712'
c Var 'aux1388' direct represents '0' with '5712'
c Var 'aux1388' order represents '1' with '5713'
-5712 5713 0
c Var 'aux1388' direct represents '1' with '5714'
5712 -5713 5714 0
-5714 5713 0
-5714 -5712 0
c Var 'aux1388' direct represents '2' with '-5713'
5712 5714 -5713 0
c Encoding variable: aux1389 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5715'
c Var 'aux1389' direct represents '0' with '5715'
c Var 'aux1389' order represents '1' with '5716'
-5715 5716 0
c Var 'aux1389' direct represents '1' with '5717'
5715 -5716 5717 0
-5717 5716 0
-5717 -5715 0
c Var 'aux1389' direct represents '2' with '-5716'
5715 5717 -5716 0
c Encoding variable: aux1390 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1389))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5718'
c Var 'aux1390' direct represents '0' with '5718'
c Var 'aux1390' order represents '1' with '5719'
-5718 5719 0
c Var 'aux1390' direct represents '1' with '5720'
5718 -5719 5720 0
-5720 5719 0
-5720 -5718 0
c Var 'aux1390' order represents '2' with '5721'
-5719 5721 0
c Var 'aux1390' direct represents '2' with '5722'
5719 -5721 5722 0
-5722 5721 0
-5722 -5719 0
c Var 'aux1390' direct represents '3' with '-5721'
5718 5720 5722 -5721 0
c Encoding variable: aux1391 with domain: int(0..4) (representing constraint (aux1386 + aux1388))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5723'
c Var 'aux1391' direct represents '0' with '5723'
c Var 'aux1391' order represents '1' with '5724'
-5723 5724 0
c Var 'aux1391' direct represents '1' with '5725'
5723 -5724 5725 0
-5725 5724 0
-5725 -5723 0
c Var 'aux1391' order represents '2' with '5726'
-5724 5726 0
c Var 'aux1391' direct represents '2' with '5727'
5724 -5726 5727 0
-5727 5726 0
-5727 -5724 0
c Var 'aux1391' order represents '3' with '5728'
-5726 5728 0
c Var 'aux1391' direct represents '3' with '5729'
5726 -5728 5729 0
-5729 5728 0
-5729 -5726 0
c Var 'aux1391' direct represents '4' with '-5728'
5723 5725 5727 5729 -5728 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5730'
c Var 'aux1392' direct represents '0' with '5730'
c Var 'aux1392' order represents '1' with '5731'
-5730 5731 0
c Var 'aux1392' direct represents '1' with '5732'
5730 -5731 5732 0
-5732 5731 0
-5732 -5730 0
c Var 'aux1392' direct represents '2' with '-5731'
5730 5732 -5731 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5733'
c Var 'aux1393' direct represents '0' with '5733'
c Var 'aux1393' order represents '1' with '5734'
-5733 5734 0
c Var 'aux1393' direct represents '1' with '5735'
5733 -5734 5735 0
-5735 5734 0
-5735 -5733 0
c Var 'aux1393' direct represents '2' with '-5734'
5733 5735 -5734 0
c Encoding variable: aux1394 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5736'
c Var 'aux1394' direct represents '0' with '5736'
c Var 'aux1394' order represents '1' with '5737'
-5736 5737 0
c Var 'aux1394' direct represents '1' with '5738'
5736 -5737 5738 0
-5738 5737 0
-5738 -5736 0
c Var 'aux1394' direct represents '2' with '-5737'
5736 5738 -5737 0
c Encoding variable: aux1395 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5739'
c Var 'aux1395' direct represents '0' with '5739'
c Var 'aux1395' order represents '1' with '5740'
-5739 5740 0
c Var 'aux1395' direct represents '1' with '5741'
5739 -5740 5741 0
-5741 5740 0
-5741 -5739 0
c Var 'aux1395' direct represents '2' with '-5740'
5739 5741 -5740 0
c Encoding variable: aux1396 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1395))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5742'
c Var 'aux1396' direct represents '0' with '5742'
c Var 'aux1396' order represents '1' with '5743'
-5742 5743 0
c Var 'aux1396' direct represents '1' with '5744'
5742 -5743 5744 0
-5744 5743 0
-5744 -5742 0
c Var 'aux1396' order represents '2' with '5745'
-5743 5745 0
c Var 'aux1396' direct represents '2' with '5746'
5743 -5745 5746 0
-5746 5745 0
-5746 -5743 0
c Var 'aux1396' direct represents '3' with '-5745'
5742 5744 5746 -5745 0
c Encoding variable: aux1397 with domain: int(0..4) (representing constraint (aux1392 + aux1394))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5747'
c Var 'aux1397' direct represents '0' with '5747'
c Var 'aux1397' order represents '1' with '5748'
-5747 5748 0
c Var 'aux1397' direct represents '1' with '5749'
5747 -5748 5749 0
-5749 5748 0
-5749 -5747 0
c Var 'aux1397' order represents '2' with '5750'
-5748 5750 0
c Var 'aux1397' direct represents '2' with '5751'
5748 -5750 5751 0
-5751 5750 0
-5751 -5748 0
c Var 'aux1397' order represents '3' with '5752'
-5750 5752 0
c Var 'aux1397' direct represents '3' with '5753'
5750 -5752 5753 0
-5753 5752 0
-5753 -5750 0
c Var 'aux1397' direct represents '4' with '-5752'
5747 5749 5751 5753 -5752 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5754'
c Var 'aux1398' direct represents '0' with '5754'
c Var 'aux1398' order represents '1' with '5755'
-5754 5755 0
c Var 'aux1398' direct represents '1' with '5756'
5754 -5755 5756 0
-5756 5755 0
-5756 -5754 0
c Var 'aux1398' direct represents '2' with '-5755'
5754 5756 -5755 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5757'
c Var 'aux1399' direct represents '0' with '5757'
c Var 'aux1399' order represents '1' with '5758'
-5757 5758 0
c Var 'aux1399' direct represents '1' with '5759'
5757 -5758 5759 0
-5759 5758 0
-5759 -5757 0
c Var 'aux1399' direct represents '2' with '-5758'
5757 5759 -5758 0
c Encoding variable: aux1400 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5760'
c Var 'aux1400' direct represents '0' with '5760'
c Var 'aux1400' order represents '1' with '5761'
-5760 5761 0
c Var 'aux1400' direct represents '1' with '5762'
5760 -5761 5762 0
-5762 5761 0
-5762 -5760 0
c Var 'aux1400' direct represents '2' with '-5761'
5760 5762 -5761 0
c Encoding variable: aux1401 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5763'
c Var 'aux1401' direct represents '0' with '5763'
c Var 'aux1401' order represents '1' with '5764'
-5763 5764 0
c Var 'aux1401' direct represents '1' with '5765'
5763 -5764 5765 0
-5765 5764 0
-5765 -5763 0
c Var 'aux1401' direct represents '2' with '-5764'
5763 5765 -5764 0
c Encoding variable: aux1402 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1401))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5766'
c Var 'aux1402' direct represents '0' with '5766'
c Var 'aux1402' order represents '1' with '5767'
-5766 5767 0
c Var 'aux1402' direct represents '1' with '5768'
5766 -5767 5768 0
-5768 5767 0
-5768 -5766 0
c Var 'aux1402' order represents '2' with '5769'
-5767 5769 0
c Var 'aux1402' direct represents '2' with '5770'
5767 -5769 5770 0
-5770 5769 0
-5770 -5767 0
c Var 'aux1402' direct represents '3' with '-5769'
5766 5768 5770 -5769 0
c Encoding variable: aux1403 with domain: int(0..4) (representing constraint (aux1398 + aux1400))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5771'
c Var 'aux1403' direct represents '0' with '5771'
c Var 'aux1403' order represents '1' with '5772'
-5771 5772 0
c Var 'aux1403' direct represents '1' with '5773'
5771 -5772 5773 0
-5773 5772 0
-5773 -5771 0
c Var 'aux1403' order represents '2' with '5774'
-5772 5774 0
c Var 'aux1403' direct represents '2' with '5775'
5772 -5774 5775 0
-5775 5774 0
-5775 -5772 0
c Var 'aux1403' order represents '3' with '5776'
-5774 5776 0
c Var 'aux1403' direct represents '3' with '5777'
5774 -5776 5777 0
-5777 5776 0
-5777 -5774 0
c Var 'aux1403' direct represents '4' with '-5776'
5771 5773 5775 5777 -5776 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5778'
c Var 'aux1404' direct represents '0' with '5778'
c Var 'aux1404' order represents '1' with '5779'
-5778 5779 0
c Var 'aux1404' direct represents '1' with '5780'
5778 -5779 5780 0
-5780 5779 0
-5780 -5778 0
c Var 'aux1404' direct represents '2' with '-5779'
5778 5780 -5779 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5781'
c Var 'aux1405' direct represents '0' with '5781'
c Var 'aux1405' order represents '1' with '5782'
-5781 5782 0
c Var 'aux1405' direct represents '1' with '5783'
5781 -5782 5783 0
-5783 5782 0
-5783 -5781 0
c Var 'aux1405' direct represents '2' with '-5782'
5781 5783 -5782 0
c Encoding variable: aux1406 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5784'
c Var 'aux1406' direct represents '0' with '5784'
c Var 'aux1406' order represents '1' with '5785'
-5784 5785 0
c Var 'aux1406' direct represents '1' with '5786'
5784 -5785 5786 0
-5786 5785 0
-5786 -5784 0
c Var 'aux1406' direct represents '2' with '-5785'
5784 5786 -5785 0
c Encoding variable: aux1407 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5787'
c Var 'aux1407' direct represents '0' with '5787'
c Var 'aux1407' order represents '1' with '5788'
-5787 5788 0
c Var 'aux1407' direct represents '1' with '5789'
5787 -5788 5789 0
-5789 5788 0
-5789 -5787 0
c Var 'aux1407' direct represents '2' with '-5788'
5787 5789 -5788 0
c Encoding variable: aux1408 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1407))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5790'
c Var 'aux1408' direct represents '0' with '5790'
c Var 'aux1408' order represents '1' with '5791'
-5790 5791 0
c Var 'aux1408' direct represents '1' with '5792'
5790 -5791 5792 0
-5792 5791 0
-5792 -5790 0
c Var 'aux1408' order represents '2' with '5793'
-5791 5793 0
c Var 'aux1408' direct represents '2' with '5794'
5791 -5793 5794 0
-5794 5793 0
-5794 -5791 0
c Var 'aux1408' direct represents '3' with '-5793'
5790 5792 5794 -5793 0
c Encoding variable: aux1409 with domain: int(0..4) (representing constraint (aux1404 + aux1406))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5795'
c Var 'aux1409' direct represents '0' with '5795'
c Var 'aux1409' order represents '1' with '5796'
-5795 5796 0
c Var 'aux1409' direct represents '1' with '5797'
5795 -5796 5797 0
-5797 5796 0
-5797 -5795 0
c Var 'aux1409' order represents '2' with '5798'
-5796 5798 0
c Var 'aux1409' direct represents '2' with '5799'
5796 -5798 5799 0
-5799 5798 0
-5799 -5796 0
c Var 'aux1409' order represents '3' with '5800'
-5798 5800 0
c Var 'aux1409' direct represents '3' with '5801'
5798 -5800 5801 0
-5801 5800 0
-5801 -5798 0
c Var 'aux1409' direct represents '4' with '-5800'
5795 5797 5799 5801 -5800 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5802'
c Var 'aux1410' direct represents '0' with '5802'
c Var 'aux1410' order represents '1' with '5803'
-5802 5803 0
c Var 'aux1410' direct represents '1' with '5804'
5802 -5803 5804 0
-5804 5803 0
-5804 -5802 0
c Var 'aux1410' direct represents '2' with '-5803'
5802 5804 -5803 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5805'
c Var 'aux1411' direct represents '0' with '5805'
c Var 'aux1411' order represents '1' with '5806'
-5805 5806 0
c Var 'aux1411' direct represents '1' with '5807'
5805 -5806 5807 0
-5807 5806 0
-5807 -5805 0
c Var 'aux1411' direct represents '2' with '-5806'
5805 5807 -5806 0
c Encoding variable: aux1412 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5808'
c Var 'aux1412' direct represents '0' with '5808'
c Var 'aux1412' order represents '1' with '5809'
-5808 5809 0
c Var 'aux1412' direct represents '1' with '5810'
5808 -5809 5810 0
-5810 5809 0
-5810 -5808 0
c Var 'aux1412' direct represents '2' with '-5809'
5808 5810 -5809 0
c Encoding variable: aux1413 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5811'
c Var 'aux1413' direct represents '0' with '5811'
c Var 'aux1413' order represents '1' with '5812'
-5811 5812 0
c Var 'aux1413' direct represents '1' with '5813'
5811 -5812 5813 0
-5813 5812 0
-5813 -5811 0
c Var 'aux1413' direct represents '2' with '-5812'
5811 5813 -5812 0
c Encoding variable: aux1414 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1413))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5814'
c Var 'aux1414' direct represents '0' with '5814'
c Var 'aux1414' order represents '1' with '5815'
-5814 5815 0
c Var 'aux1414' direct represents '1' with '5816'
5814 -5815 5816 0
-5816 5815 0
-5816 -5814 0
c Var 'aux1414' order represents '2' with '5817'
-5815 5817 0
c Var 'aux1414' direct represents '2' with '5818'
5815 -5817 5818 0
-5818 5817 0
-5818 -5815 0
c Var 'aux1414' direct represents '3' with '-5817'
5814 5816 5818 -5817 0
c Encoding variable: aux1415 with domain: int(0..4) (representing constraint (aux1410 + aux1412))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5819'
c Var 'aux1415' direct represents '0' with '5819'
c Var 'aux1415' order represents '1' with '5820'
-5819 5820 0
c Var 'aux1415' direct represents '1' with '5821'
5819 -5820 5821 0
-5821 5820 0
-5821 -5819 0
c Var 'aux1415' order represents '2' with '5822'
-5820 5822 0
c Var 'aux1415' direct represents '2' with '5823'
5820 -5822 5823 0
-5823 5822 0
-5823 -5820 0
c Var 'aux1415' order represents '3' with '5824'
-5822 5824 0
c Var 'aux1415' direct represents '3' with '5825'
5822 -5824 5825 0
-5825 5824 0
-5825 -5822 0
c Var 'aux1415' direct represents '4' with '-5824'
5819 5821 5823 5825 -5824 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5826'
c Var 'aux1416' direct represents '0' with '5826'
c Var 'aux1416' order represents '1' with '5827'
-5826 5827 0
c Var 'aux1416' direct represents '1' with '5828'
5826 -5827 5828 0
-5828 5827 0
-5828 -5826 0
c Var 'aux1416' direct represents '2' with '-5827'
5826 5828 -5827 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5829'
c Var 'aux1417' direct represents '0' with '5829'
c Var 'aux1417' order represents '1' with '5830'
-5829 5830 0
c Var 'aux1417' direct represents '1' with '5831'
5829 -5830 5831 0
-5831 5830 0
-5831 -5829 0
c Var 'aux1417' direct represents '2' with '-5830'
5829 5831 -5830 0
c Encoding variable: aux1418 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5832'
c Var 'aux1418' direct represents '0' with '5832'
c Var 'aux1418' order represents '1' with '5833'
-5832 5833 0
c Var 'aux1418' direct represents '1' with '5834'
5832 -5833 5834 0
-5834 5833 0
-5834 -5832 0
c Var 'aux1418' direct represents '2' with '-5833'
5832 5834 -5833 0
c Encoding variable: aux1419 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5835'
c Var 'aux1419' direct represents '0' with '5835'
c Var 'aux1419' order represents '1' with '5836'
-5835 5836 0
c Var 'aux1419' direct represents '1' with '5837'
5835 -5836 5837 0
-5837 5836 0
-5837 -5835 0
c Var 'aux1419' direct represents '2' with '-5836'
5835 5837 -5836 0
c Encoding variable: aux1420 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1419))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5838'
c Var 'aux1420' direct represents '0' with '5838'
c Var 'aux1420' order represents '1' with '5839'
-5838 5839 0
c Var 'aux1420' direct represents '1' with '5840'
5838 -5839 5840 0
-5840 5839 0
-5840 -5838 0
c Var 'aux1420' order represents '2' with '5841'
-5839 5841 0
c Var 'aux1420' direct represents '2' with '5842'
5839 -5841 5842 0
-5842 5841 0
-5842 -5839 0
c Var 'aux1420' direct represents '3' with '-5841'
5838 5840 5842 -5841 0
c Encoding variable: aux1421 with domain: int(0..4) (representing constraint (aux1416 + aux1418))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5843'
c Var 'aux1421' direct represents '0' with '5843'
c Var 'aux1421' order represents '1' with '5844'
-5843 5844 0
c Var 'aux1421' direct represents '1' with '5845'
5843 -5844 5845 0
-5845 5844 0
-5845 -5843 0
c Var 'aux1421' order represents '2' with '5846'
-5844 5846 0
c Var 'aux1421' direct represents '2' with '5847'
5844 -5846 5847 0
-5847 5846 0
-5847 -5844 0
c Var 'aux1421' order represents '3' with '5848'
-5846 5848 0
c Var 'aux1421' direct represents '3' with '5849'
5846 -5848 5849 0
-5849 5848 0
-5849 -5846 0
c Var 'aux1421' direct represents '4' with '-5848'
5843 5845 5847 5849 -5848 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5850'
c Var 'aux1422' direct represents '0' with '5850'
c Var 'aux1422' order represents '1' with '5851'
-5850 5851 0
c Var 'aux1422' direct represents '1' with '5852'
5850 -5851 5852 0
-5852 5851 0
-5852 -5850 0
c Var 'aux1422' direct represents '2' with '-5851'
5850 5852 -5851 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5853'
c Var 'aux1423' direct represents '0' with '5853'
c Var 'aux1423' order represents '1' with '5854'
-5853 5854 0
c Var 'aux1423' direct represents '1' with '5855'
5853 -5854 5855 0
-5855 5854 0
-5855 -5853 0
c Var 'aux1423' direct represents '2' with '-5854'
5853 5855 -5854 0
c Encoding variable: aux1424 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5856'
c Var 'aux1424' direct represents '0' with '5856'
c Var 'aux1424' order represents '1' with '5857'
-5856 5857 0
c Var 'aux1424' direct represents '1' with '5858'
5856 -5857 5858 0
-5858 5857 0
-5858 -5856 0
c Var 'aux1424' direct represents '2' with '-5857'
5856 5858 -5857 0
c Encoding variable: aux1425 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5859'
c Var 'aux1425' direct represents '0' with '5859'
c Var 'aux1425' order represents '1' with '5860'
-5859 5860 0
c Var 'aux1425' direct represents '1' with '5861'
5859 -5860 5861 0
-5861 5860 0
-5861 -5859 0
c Var 'aux1425' direct represents '2' with '-5860'
5859 5861 -5860 0
c Encoding variable: aux1426 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1425))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5862'
c Var 'aux1426' direct represents '0' with '5862'
c Var 'aux1426' order represents '1' with '5863'
-5862 5863 0
c Var 'aux1426' direct represents '1' with '5864'
5862 -5863 5864 0
-5864 5863 0
-5864 -5862 0
c Var 'aux1426' order represents '2' with '5865'
-5863 5865 0
c Var 'aux1426' direct represents '2' with '5866'
5863 -5865 5866 0
-5866 5865 0
-5866 -5863 0
c Var 'aux1426' direct represents '3' with '-5865'
5862 5864 5866 -5865 0
c Encoding variable: aux1427 with domain: int(0..4) (representing constraint (aux1422 + aux1424))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5867'
c Var 'aux1427' direct represents '0' with '5867'
c Var 'aux1427' order represents '1' with '5868'
-5867 5868 0
c Var 'aux1427' direct represents '1' with '5869'
5867 -5868 5869 0
-5869 5868 0
-5869 -5867 0
c Var 'aux1427' order represents '2' with '5870'
-5868 5870 0
c Var 'aux1427' direct represents '2' with '5871'
5868 -5870 5871 0
-5871 5870 0
-5871 -5868 0
c Var 'aux1427' order represents '3' with '5872'
-5870 5872 0
c Var 'aux1427' direct represents '3' with '5873'
5870 -5872 5873 0
-5873 5872 0
-5873 -5870 0
c Var 'aux1427' direct represents '4' with '-5872'
5867 5869 5871 5873 -5872 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5874'
c Var 'aux1428' direct represents '0' with '5874'
c Var 'aux1428' order represents '1' with '5875'
-5874 5875 0
c Var 'aux1428' direct represents '1' with '5876'
5874 -5875 5876 0
-5876 5875 0
-5876 -5874 0
c Var 'aux1428' direct represents '2' with '-5875'
5874 5876 -5875 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5877'
c Var 'aux1429' direct represents '0' with '5877'
c Var 'aux1429' order represents '1' with '5878'
-5877 5878 0
c Var 'aux1429' direct represents '1' with '5879'
5877 -5878 5879 0
-5879 5878 0
-5879 -5877 0
c Var 'aux1429' direct represents '2' with '-5878'
5877 5879 -5878 0
c Encoding variable: aux1430 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5880'
c Var 'aux1430' direct represents '0' with '5880'
c Var 'aux1430' order represents '1' with '5881'
-5880 5881 0
c Var 'aux1430' direct represents '1' with '5882'
5880 -5881 5882 0
-5882 5881 0
-5882 -5880 0
c Var 'aux1430' direct represents '2' with '-5881'
5880 5882 -5881 0
c Encoding variable: aux1431 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5883'
c Var 'aux1431' direct represents '0' with '5883'
c Var 'aux1431' order represents '1' with '5884'
-5883 5884 0
c Var 'aux1431' direct represents '1' with '5885'
5883 -5884 5885 0
-5885 5884 0
-5885 -5883 0
c Var 'aux1431' direct represents '2' with '-5884'
5883 5885 -5884 0
c Encoding variable: aux1432 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1431))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '5886'
c Var 'aux1432' direct represents '0' with '5886'
c Var 'aux1432' order represents '1' with '5887'
-5886 5887 0
c Var 'aux1432' direct represents '1' with '5888'
5886 -5887 5888 0
-5888 5887 0
-5888 -5886 0
c Var 'aux1432' order represents '2' with '5889'
-5887 5889 0
c Var 'aux1432' direct represents '2' with '5890'
5887 -5889 5890 0
-5890 5889 0
-5890 -5887 0
c Var 'aux1432' direct represents '3' with '-5889'
5886 5888 5890 -5889 0
c Encoding variable: aux1433 with domain: int(0..4) (representing constraint (aux1428 + aux1430))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '5891'
c Var 'aux1433' direct represents '0' with '5891'
c Var 'aux1433' order represents '1' with '5892'
-5891 5892 0
c Var 'aux1433' direct represents '1' with '5893'
5891 -5892 5893 0
-5893 5892 0
-5893 -5891 0
c Var 'aux1433' order represents '2' with '5894'
-5892 5894 0
c Var 'aux1433' direct represents '2' with '5895'
5892 -5894 5895 0
-5895 5894 0
-5895 -5892 0
c Var 'aux1433' order represents '3' with '5896'
-5894 5896 0
c Var 'aux1433' direct represents '3' with '5897'
5894 -5896 5897 0
-5897 5896 0
-5897 -5894 0
c Var 'aux1433' direct represents '4' with '-5896'
5891 5893 5895 5897 -5896 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '5898'
c Var 'aux1434' direct represents '0' with '5898'
c Var 'aux1434' order represents '1' with '5899'
-5898 5899 0
c Var 'aux1434' direct represents '1' with '5900'
5898 -5899 5900 0
-5900 5899 0
-5900 -5898 0
c Var 'aux1434' direct represents '2' with '-5899'
5898 5900 -5899 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '5901'
c Var 'aux1435' direct represents '0' with '5901'
c Var 'aux1435' order represents '1' with '5902'
-5901 5902 0
c Var 'aux1435' direct represents '1' with '5903'
5901 -5902 5903 0
-5903 5902 0
-5903 -5901 0
c Var 'aux1435' direct represents '2' with '-5902'
5901 5903 -5902 0
c Encoding variable: aux1436 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '5904'
c Var 'aux1436' direct represents '0' with '5904'
c Var 'aux1436' order represents '1' with '5905'
-5904 5905 0
c Var 'aux1436' direct represents '1' with '5906'
5904 -5905 5906 0
-5906 5905 0
-5906 -5904 0
c Var 'aux1436' direct represents '2' with '-5905'
5904 5906 -5905 0
c Encoding variable: aux1437 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '5907'
c Var 'aux1437' direct represents '0' with '5907'
c Var 'aux1437' order represents '1' with '5908'
-5907 5908 0
c Var 'aux1437' direct represents '1' with '5909'
5907 -5908 5909 0
-5909 5908 0
-5909 -5907 0
c Var 'aux1437' direct represents '2' with '-5908'
5907 5909 -5908 0
c Encoding variable: aux1438 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1437))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '5910'
c Var 'aux1438' direct represents '0' with '5910'
c Var 'aux1438' order represents '1' with '5911'
-5910 5911 0
c Var 'aux1438' direct represents '1' with '5912'
5910 -5911 5912 0
-5912 5911 0
-5912 -5910 0
c Var 'aux1438' order represents '2' with '5913'
-5911 5913 0
c Var 'aux1438' direct represents '2' with '5914'
5911 -5913 5914 0
-5914 5913 0
-5914 -5911 0
c Var 'aux1438' direct represents '3' with '-5913'
5910 5912 5914 -5913 0
c Encoding variable: aux1439 with domain: int(0..4) (representing constraint (aux1434 + aux1436))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '5915'
c Var 'aux1439' direct represents '0' with '5915'
c Var 'aux1439' order represents '1' with '5916'
-5915 5916 0
c Var 'aux1439' direct represents '1' with '5917'
5915 -5916 5917 0
-5917 5916 0
-5917 -5915 0
c Var 'aux1439' order represents '2' with '5918'
-5916 5918 0
c Var 'aux1439' direct represents '2' with '5919'
5916 -5918 5919 0
-5919 5918 0
-5919 -5916 0
c Var 'aux1439' order represents '3' with '5920'
-5918 5920 0
c Var 'aux1439' direct represents '3' with '5921'
5918 -5920 5921 0
-5921 5920 0
-5921 -5918 0
c Var 'aux1439' direct represents '4' with '-5920'
5915 5917 5919 5921 -5920 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '5922'
c Var 'aux1440' direct represents '0' with '5922'
c Var 'aux1440' order represents '1' with '5923'
-5922 5923 0
c Var 'aux1440' direct represents '1' with '5924'
5922 -5923 5924 0
-5924 5923 0
-5924 -5922 0
c Var 'aux1440' direct represents '2' with '-5923'
5922 5924 -5923 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '5925'
c Var 'aux1441' direct represents '0' with '5925'
c Var 'aux1441' order represents '1' with '5926'
-5925 5926 0
c Var 'aux1441' direct represents '1' with '5927'
5925 -5926 5927 0
-5927 5926 0
-5927 -5925 0
c Var 'aux1441' direct represents '2' with '-5926'
5925 5927 -5926 0
c Encoding variable: aux1442 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '5928'
c Var 'aux1442' direct represents '0' with '5928'
c Var 'aux1442' order represents '1' with '5929'
-5928 5929 0
c Var 'aux1442' direct represents '1' with '5930'
5928 -5929 5930 0
-5930 5929 0
-5930 -5928 0
c Var 'aux1442' direct represents '2' with '-5929'
5928 5930 -5929 0
c Encoding variable: aux1443 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '5931'
c Var 'aux1443' direct represents '0' with '5931'
c Var 'aux1443' order represents '1' with '5932'
-5931 5932 0
c Var 'aux1443' direct represents '1' with '5933'
5931 -5932 5933 0
-5933 5932 0
-5933 -5931 0
c Var 'aux1443' direct represents '2' with '-5932'
5931 5933 -5932 0
c Encoding variable: aux1444 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1443))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '5934'
c Var 'aux1444' direct represents '0' with '5934'
c Var 'aux1444' order represents '1' with '5935'
-5934 5935 0
c Var 'aux1444' direct represents '1' with '5936'
5934 -5935 5936 0
-5936 5935 0
-5936 -5934 0
c Var 'aux1444' order represents '2' with '5937'
-5935 5937 0
c Var 'aux1444' direct represents '2' with '5938'
5935 -5937 5938 0
-5938 5937 0
-5938 -5935 0
c Var 'aux1444' direct represents '3' with '-5937'
5934 5936 5938 -5937 0
c Encoding variable: aux1445 with domain: int(0..4) (representing constraint (aux1440 + aux1442))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '5939'
c Var 'aux1445' direct represents '0' with '5939'
c Var 'aux1445' order represents '1' with '5940'
-5939 5940 0
c Var 'aux1445' direct represents '1' with '5941'
5939 -5940 5941 0
-5941 5940 0
-5941 -5939 0
c Var 'aux1445' order represents '2' with '5942'
-5940 5942 0
c Var 'aux1445' direct represents '2' with '5943'
5940 -5942 5943 0
-5943 5942 0
-5943 -5940 0
c Var 'aux1445' order represents '3' with '5944'
-5942 5944 0
c Var 'aux1445' direct represents '3' with '5945'
5942 -5944 5945 0
-5945 5944 0
-5945 -5942 0
c Var 'aux1445' direct represents '4' with '-5944'
5939 5941 5943 5945 -5944 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '5946'
c Var 'aux1446' direct represents '0' with '5946'
c Var 'aux1446' order represents '1' with '5947'
-5946 5947 0
c Var 'aux1446' direct represents '1' with '5948'
5946 -5947 5948 0
-5948 5947 0
-5948 -5946 0
c Var 'aux1446' direct represents '2' with '-5947'
5946 5948 -5947 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '5949'
c Var 'aux1447' direct represents '0' with '5949'
c Var 'aux1447' order represents '1' with '5950'
-5949 5950 0
c Var 'aux1447' direct represents '1' with '5951'
5949 -5950 5951 0
-5951 5950 0
-5951 -5949 0
c Var 'aux1447' direct represents '2' with '-5950'
5949 5951 -5950 0
c Encoding variable: aux1448 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '5952'
c Var 'aux1448' direct represents '0' with '5952'
c Var 'aux1448' order represents '1' with '5953'
-5952 5953 0
c Var 'aux1448' direct represents '1' with '5954'
5952 -5953 5954 0
-5954 5953 0
-5954 -5952 0
c Var 'aux1448' direct represents '2' with '-5953'
5952 5954 -5953 0
c Encoding variable: aux1449 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '5955'
c Var 'aux1449' direct represents '0' with '5955'
c Var 'aux1449' order represents '1' with '5956'
-5955 5956 0
c Var 'aux1449' direct represents '1' with '5957'
5955 -5956 5957 0
-5957 5956 0
-5957 -5955 0
c Var 'aux1449' direct represents '2' with '-5956'
5955 5957 -5956 0
c Encoding variable: aux1450 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1449))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '5958'
c Var 'aux1450' direct represents '0' with '5958'
c Var 'aux1450' order represents '1' with '5959'
-5958 5959 0
c Var 'aux1450' direct represents '1' with '5960'
5958 -5959 5960 0
-5960 5959 0
-5960 -5958 0
c Var 'aux1450' order represents '2' with '5961'
-5959 5961 0
c Var 'aux1450' direct represents '2' with '5962'
5959 -5961 5962 0
-5962 5961 0
-5962 -5959 0
c Var 'aux1450' direct represents '3' with '-5961'
5958 5960 5962 -5961 0
c Encoding variable: aux1451 with domain: int(0..4) (representing constraint (aux1446 + aux1448))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '5963'
c Var 'aux1451' direct represents '0' with '5963'
c Var 'aux1451' order represents '1' with '5964'
-5963 5964 0
c Var 'aux1451' direct represents '1' with '5965'
5963 -5964 5965 0
-5965 5964 0
-5965 -5963 0
c Var 'aux1451' order represents '2' with '5966'
-5964 5966 0
c Var 'aux1451' direct represents '2' with '5967'
5964 -5966 5967 0
-5967 5966 0
-5967 -5964 0
c Var 'aux1451' order represents '3' with '5968'
-5966 5968 0
c Var 'aux1451' direct represents '3' with '5969'
5966 -5968 5969 0
-5969 5968 0
-5969 -5966 0
c Var 'aux1451' direct represents '4' with '-5968'
5963 5965 5967 5969 -5968 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '5970'
c Var 'aux1452' direct represents '0' with '5970'
c Var 'aux1452' order represents '1' with '5971'
-5970 5971 0
c Var 'aux1452' direct represents '1' with '5972'
5970 -5971 5972 0
-5972 5971 0
-5972 -5970 0
c Var 'aux1452' direct represents '2' with '-5971'
5970 5972 -5971 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '5973'
c Var 'aux1453' direct represents '0' with '5973'
c Var 'aux1453' order represents '1' with '5974'
-5973 5974 0
c Var 'aux1453' direct represents '1' with '5975'
5973 -5974 5975 0
-5975 5974 0
-5975 -5973 0
c Var 'aux1453' direct represents '2' with '-5974'
5973 5975 -5974 0
c Encoding variable: aux1454 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '5976'
c Var 'aux1454' direct represents '0' with '5976'
c Var 'aux1454' order represents '1' with '5977'
-5976 5977 0
c Var 'aux1454' direct represents '1' with '5978'
5976 -5977 5978 0
-5978 5977 0
-5978 -5976 0
c Var 'aux1454' direct represents '2' with '-5977'
5976 5978 -5977 0
c Encoding variable: aux1455 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '5979'
c Var 'aux1455' direct represents '0' with '5979'
c Var 'aux1455' order represents '1' with '5980'
-5979 5980 0
c Var 'aux1455' direct represents '1' with '5981'
5979 -5980 5981 0
-5981 5980 0
-5981 -5979 0
c Var 'aux1455' direct represents '2' with '-5980'
5979 5981 -5980 0
c Encoding variable: aux1456 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1455))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '5982'
c Var 'aux1456' direct represents '0' with '5982'
c Var 'aux1456' order represents '1' with '5983'
-5982 5983 0
c Var 'aux1456' direct represents '1' with '5984'
5982 -5983 5984 0
-5984 5983 0
-5984 -5982 0
c Var 'aux1456' order represents '2' with '5985'
-5983 5985 0
c Var 'aux1456' direct represents '2' with '5986'
5983 -5985 5986 0
-5986 5985 0
-5986 -5983 0
c Var 'aux1456' direct represents '3' with '-5985'
5982 5984 5986 -5985 0
c Encoding variable: aux1457 with domain: int(0..4) (representing constraint (aux1452 + aux1454))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '5987'
c Var 'aux1457' direct represents '0' with '5987'
c Var 'aux1457' order represents '1' with '5988'
-5987 5988 0
c Var 'aux1457' direct represents '1' with '5989'
5987 -5988 5989 0
-5989 5988 0
-5989 -5987 0
c Var 'aux1457' order represents '2' with '5990'
-5988 5990 0
c Var 'aux1457' direct represents '2' with '5991'
5988 -5990 5991 0
-5991 5990 0
-5991 -5988 0
c Var 'aux1457' order represents '3' with '5992'
-5990 5992 0
c Var 'aux1457' direct represents '3' with '5993'
5990 -5992 5993 0
-5993 5992 0
-5993 -5990 0
c Var 'aux1457' direct represents '4' with '-5992'
5987 5989 5991 5993 -5992 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '5994'
c Var 'aux1458' direct represents '0' with '5994'
c Var 'aux1458' order represents '1' with '5995'
-5994 5995 0
c Var 'aux1458' direct represents '1' with '5996'
5994 -5995 5996 0
-5996 5995 0
-5996 -5994 0
c Var 'aux1458' direct represents '2' with '-5995'
5994 5996 -5995 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '5997'
c Var 'aux1459' direct represents '0' with '5997'
c Var 'aux1459' order represents '1' with '5998'
-5997 5998 0
c Var 'aux1459' direct represents '1' with '5999'
5997 -5998 5999 0
-5999 5998 0
-5999 -5997 0
c Var 'aux1459' direct represents '2' with '-5998'
5997 5999 -5998 0
c Encoding variable: aux1460 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '6000'
c Var 'aux1460' direct represents '0' with '6000'
c Var 'aux1460' order represents '1' with '6001'
-6000 6001 0
c Var 'aux1460' direct represents '1' with '6002'
6000 -6001 6002 0
-6002 6001 0
-6002 -6000 0
c Var 'aux1460' direct represents '2' with '-6001'
6000 6002 -6001 0
c Encoding variable: aux1461 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '6003'
c Var 'aux1461' direct represents '0' with '6003'
c Var 'aux1461' order represents '1' with '6004'
-6003 6004 0
c Var 'aux1461' direct represents '1' with '6005'
6003 -6004 6005 0
-6005 6004 0
-6005 -6003 0
c Var 'aux1461' direct represents '2' with '-6004'
6003 6005 -6004 0
c Encoding variable: aux1462 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1461))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '6006'
c Var 'aux1462' direct represents '0' with '6006'
c Var 'aux1462' order represents '1' with '6007'
-6006 6007 0
c Var 'aux1462' direct represents '1' with '6008'
6006 -6007 6008 0
-6008 6007 0
-6008 -6006 0
c Var 'aux1462' order represents '2' with '6009'
-6007 6009 0
c Var 'aux1462' direct represents '2' with '6010'
6007 -6009 6010 0
-6010 6009 0
-6010 -6007 0
c Var 'aux1462' direct represents '3' with '-6009'
6006 6008 6010 -6009 0
c Encoding variable: aux1463 with domain: int(0..4) (representing constraint (aux1458 + aux1460))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '6011'
c Var 'aux1463' direct represents '0' with '6011'
c Var 'aux1463' order represents '1' with '6012'
-6011 6012 0
c Var 'aux1463' direct represents '1' with '6013'
6011 -6012 6013 0
-6013 6012 0
-6013 -6011 0
c Var 'aux1463' order represents '2' with '6014'
-6012 6014 0
c Var 'aux1463' direct represents '2' with '6015'
6012 -6014 6015 0
-6015 6014 0
-6015 -6012 0
c Var 'aux1463' order represents '3' with '6016'
-6014 6016 0
c Var 'aux1463' direct represents '3' with '6017'
6014 -6016 6017 0
-6017 6016 0
-6017 -6014 0
c Var 'aux1463' direct represents '4' with '-6016'
6011 6013 6015 6017 -6016 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '6018'
c Var 'aux1464' direct represents '0' with '6018'
c Var 'aux1464' order represents '1' with '6019'
-6018 6019 0
c Var 'aux1464' direct represents '1' with '6020'
6018 -6019 6020 0
-6020 6019 0
-6020 -6018 0
c Var 'aux1464' direct represents '2' with '-6019'
6018 6020 -6019 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '6021'
c Var 'aux1465' direct represents '0' with '6021'
c Var 'aux1465' order represents '1' with '6022'
-6021 6022 0
c Var 'aux1465' direct represents '1' with '6023'
6021 -6022 6023 0
-6023 6022 0
-6023 -6021 0
c Var 'aux1465' direct represents '2' with '-6022'
6021 6023 -6022 0
c Encoding variable: aux1466 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '6024'
c Var 'aux1466' direct represents '0' with '6024'
c Var 'aux1466' order represents '1' with '6025'
-6024 6025 0
c Var 'aux1466' direct represents '1' with '6026'
6024 -6025 6026 0
-6026 6025 0
-6026 -6024 0
c Var 'aux1466' direct represents '2' with '-6025'
6024 6026 -6025 0
c Encoding variable: aux1467 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '6027'
c Var 'aux1467' direct represents '0' with '6027'
c Var 'aux1467' order represents '1' with '6028'
-6027 6028 0
c Var 'aux1467' direct represents '1' with '6029'
6027 -6028 6029 0
-6029 6028 0
-6029 -6027 0
c Var 'aux1467' direct represents '2' with '-6028'
6027 6029 -6028 0
c Encoding variable: aux1468 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1467))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '6030'
c Var 'aux1468' direct represents '0' with '6030'
c Var 'aux1468' order represents '1' with '6031'
-6030 6031 0
c Var 'aux1468' direct represents '1' with '6032'
6030 -6031 6032 0
-6032 6031 0
-6032 -6030 0
c Var 'aux1468' order represents '2' with '6033'
-6031 6033 0
c Var 'aux1468' direct represents '2' with '6034'
6031 -6033 6034 0
-6034 6033 0
-6034 -6031 0
c Var 'aux1468' direct represents '3' with '-6033'
6030 6032 6034 -6033 0
c Encoding variable: aux1469 with domain: int(0..4) (representing constraint (aux1464 + aux1466))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '6035'
c Var 'aux1469' direct represents '0' with '6035'
c Var 'aux1469' order represents '1' with '6036'
-6035 6036 0
c Var 'aux1469' direct represents '1' with '6037'
6035 -6036 6037 0
-6037 6036 0
-6037 -6035 0
c Var 'aux1469' order represents '2' with '6038'
-6036 6038 0
c Var 'aux1469' direct represents '2' with '6039'
6036 -6038 6039 0
-6039 6038 0
-6039 -6036 0
c Var 'aux1469' order represents '3' with '6040'
-6038 6040 0
c Var 'aux1469' direct represents '3' with '6041'
6038 -6040 6041 0
-6041 6040 0
-6041 -6038 0
c Var 'aux1469' direct represents '4' with '-6040'
6035 6037 6039 6041 -6040 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '6042'
c Var 'aux1470' direct represents '0' with '6042'
c Var 'aux1470' order represents '1' with '6043'
-6042 6043 0
c Var 'aux1470' direct represents '1' with '6044'
6042 -6043 6044 0
-6044 6043 0
-6044 -6042 0
c Var 'aux1470' direct represents '2' with '-6043'
6042 6044 -6043 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '6045'
c Var 'aux1471' direct represents '0' with '6045'
c Var 'aux1471' order represents '1' with '6046'
-6045 6046 0
c Var 'aux1471' direct represents '1' with '6047'
6045 -6046 6047 0
-6047 6046 0
-6047 -6045 0
c Var 'aux1471' direct represents '2' with '-6046'
6045 6047 -6046 0
c Encoding variable: aux1472 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '6048'
c Var 'aux1472' direct represents '0' with '6048'
c Var 'aux1472' order represents '1' with '6049'
-6048 6049 0
c Var 'aux1472' direct represents '1' with '6050'
6048 -6049 6050 0
-6050 6049 0
-6050 -6048 0
c Var 'aux1472' direct represents '2' with '-6049'
6048 6050 -6049 0
c Encoding variable: aux1473 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '6051'
c Var 'aux1473' direct represents '0' with '6051'
c Var 'aux1473' order represents '1' with '6052'
-6051 6052 0
c Var 'aux1473' direct represents '1' with '6053'
6051 -6052 6053 0
-6053 6052 0
-6053 -6051 0
c Var 'aux1473' direct represents '2' with '-6052'
6051 6053 -6052 0
c Encoding variable: aux1474 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1473))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '6054'
c Var 'aux1474' direct represents '0' with '6054'
c Var 'aux1474' order represents '1' with '6055'
-6054 6055 0
c Var 'aux1474' direct represents '1' with '6056'
6054 -6055 6056 0
-6056 6055 0
-6056 -6054 0
c Var 'aux1474' order represents '2' with '6057'
-6055 6057 0
c Var 'aux1474' direct represents '2' with '6058'
6055 -6057 6058 0
-6058 6057 0
-6058 -6055 0
c Var 'aux1474' direct represents '3' with '-6057'
6054 6056 6058 -6057 0
c Encoding variable: aux1475 with domain: int(0..4) (representing constraint (aux1470 + aux1472))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '6059'
c Var 'aux1475' direct represents '0' with '6059'
c Var 'aux1475' order represents '1' with '6060'
-6059 6060 0
c Var 'aux1475' direct represents '1' with '6061'
6059 -6060 6061 0
-6061 6060 0
-6061 -6059 0
c Var 'aux1475' order represents '2' with '6062'
-6060 6062 0
c Var 'aux1475' direct represents '2' with '6063'
6060 -6062 6063 0
-6063 6062 0
-6063 -6060 0
c Var 'aux1475' order represents '3' with '6064'
-6062 6064 0
c Var 'aux1475' direct represents '3' with '6065'
6062 -6064 6065 0
-6065 6064 0
-6065 -6062 0
c Var 'aux1475' direct represents '4' with '-6064'
6059 6061 6063 6065 -6064 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '6066'
c Var 'aux1476' direct represents '0' with '6066'
c Var 'aux1476' order represents '1' with '6067'
-6066 6067 0
c Var 'aux1476' direct represents '1' with '6068'
6066 -6067 6068 0
-6068 6067 0
-6068 -6066 0
c Var 'aux1476' direct represents '2' with '-6067'
6066 6068 -6067 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '6069'
c Var 'aux1477' direct represents '0' with '6069'
c Var 'aux1477' order represents '1' with '6070'
-6069 6070 0
c Var 'aux1477' direct represents '1' with '6071'
6069 -6070 6071 0
-6071 6070 0
-6071 -6069 0
c Var 'aux1477' direct represents '2' with '-6070'
6069 6071 -6070 0
c Encoding variable: aux1478 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '6072'
c Var 'aux1478' direct represents '0' with '6072'
c Var 'aux1478' order represents '1' with '6073'
-6072 6073 0
c Var 'aux1478' direct represents '1' with '6074'
6072 -6073 6074 0
-6074 6073 0
-6074 -6072 0
c Var 'aux1478' direct represents '2' with '-6073'
6072 6074 -6073 0
c Encoding variable: aux1479 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '6075'
c Var 'aux1479' direct represents '0' with '6075'
c Var 'aux1479' order represents '1' with '6076'
-6075 6076 0
c Var 'aux1479' direct represents '1' with '6077'
6075 -6076 6077 0
-6077 6076 0
-6077 -6075 0
c Var 'aux1479' direct represents '2' with '-6076'
6075 6077 -6076 0
c Encoding variable: aux1480 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1479))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '6078'
c Var 'aux1480' direct represents '0' with '6078'
c Var 'aux1480' order represents '1' with '6079'
-6078 6079 0
c Var 'aux1480' direct represents '1' with '6080'
6078 -6079 6080 0
-6080 6079 0
-6080 -6078 0
c Var 'aux1480' order represents '2' with '6081'
-6079 6081 0
c Var 'aux1480' direct represents '2' with '6082'
6079 -6081 6082 0
-6082 6081 0
-6082 -6079 0
c Var 'aux1480' direct represents '3' with '-6081'
6078 6080 6082 -6081 0
c Encoding variable: aux1481 with domain: int(0..4) (representing constraint (aux1476 + aux1478))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '6083'
c Var 'aux1481' direct represents '0' with '6083'
c Var 'aux1481' order represents '1' with '6084'
-6083 6084 0
c Var 'aux1481' direct represents '1' with '6085'
6083 -6084 6085 0
-6085 6084 0
-6085 -6083 0
c Var 'aux1481' order represents '2' with '6086'
-6084 6086 0
c Var 'aux1481' direct represents '2' with '6087'
6084 -6086 6087 0
-6087 6086 0
-6087 -6084 0
c Var 'aux1481' order represents '3' with '6088'
-6086 6088 0
c Var 'aux1481' direct represents '3' with '6089'
6086 -6088 6089 0
-6089 6088 0
-6089 -6086 0
c Var 'aux1481' direct represents '4' with '-6088'
6083 6085 6087 6089 -6088 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '6090'
c Var 'aux1482' direct represents '0' with '6090'
c Var 'aux1482' order represents '1' with '6091'
-6090 6091 0
c Var 'aux1482' direct represents '1' with '6092'
6090 -6091 6092 0
-6092 6091 0
-6092 -6090 0
c Var 'aux1482' direct represents '2' with '-6091'
6090 6092 -6091 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '6093'
c Var 'aux1483' direct represents '0' with '6093'
c Var 'aux1483' order represents '1' with '6094'
-6093 6094 0
c Var 'aux1483' direct represents '1' with '6095'
6093 -6094 6095 0
-6095 6094 0
-6095 -6093 0
c Var 'aux1483' direct represents '2' with '-6094'
6093 6095 -6094 0
c Encoding variable: aux1484 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '6096'
c Var 'aux1484' direct represents '0' with '6096'
c Var 'aux1484' order represents '1' with '6097'
-6096 6097 0
c Var 'aux1484' direct represents '1' with '6098'
6096 -6097 6098 0
-6098 6097 0
-6098 -6096 0
c Var 'aux1484' direct represents '2' with '-6097'
6096 6098 -6097 0
c Encoding variable: aux1485 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '6099'
c Var 'aux1485' direct represents '0' with '6099'
c Var 'aux1485' order represents '1' with '6100'
-6099 6100 0
c Var 'aux1485' direct represents '1' with '6101'
6099 -6100 6101 0
-6101 6100 0
-6101 -6099 0
c Var 'aux1485' direct represents '2' with '-6100'
6099 6101 -6100 0
c Encoding variable: aux1486 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1485))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '6102'
c Var 'aux1486' direct represents '0' with '6102'
c Var 'aux1486' order represents '1' with '6103'
-6102 6103 0
c Var 'aux1486' direct represents '1' with '6104'
6102 -6103 6104 0
-6104 6103 0
-6104 -6102 0
c Var 'aux1486' order represents '2' with '6105'
-6103 6105 0
c Var 'aux1486' direct represents '2' with '6106'
6103 -6105 6106 0
-6106 6105 0
-6106 -6103 0
c Var 'aux1486' direct represents '3' with '-6105'
6102 6104 6106 -6105 0
c Encoding variable: aux1487 with domain: int(0..4) (representing constraint (aux1482 + aux1484))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '6107'
c Var 'aux1487' direct represents '0' with '6107'
c Var 'aux1487' order represents '1' with '6108'
-6107 6108 0
c Var 'aux1487' direct represents '1' with '6109'
6107 -6108 6109 0
-6109 6108 0
-6109 -6107 0
c Var 'aux1487' order represents '2' with '6110'
-6108 6110 0
c Var 'aux1487' direct represents '2' with '6111'
6108 -6110 6111 0
-6111 6110 0
-6111 -6108 0
c Var 'aux1487' order represents '3' with '6112'
-6110 6112 0
c Var 'aux1487' direct represents '3' with '6113'
6110 -6112 6113 0
-6113 6112 0
-6113 -6110 0
c Var 'aux1487' direct represents '4' with '-6112'
6107 6109 6111 6113 -6112 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6114'
c Var 'aux1488' direct represents '0' with '6114'
c Var 'aux1488' order represents '1' with '6115'
-6114 6115 0
c Var 'aux1488' direct represents '1' with '6116'
6114 -6115 6116 0
-6116 6115 0
-6116 -6114 0
c Var 'aux1488' direct represents '2' with '-6115'
6114 6116 -6115 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6117'
c Var 'aux1489' direct represents '0' with '6117'
c Var 'aux1489' order represents '1' with '6118'
-6117 6118 0
c Var 'aux1489' direct represents '1' with '6119'
6117 -6118 6119 0
-6119 6118 0
-6119 -6117 0
c Var 'aux1489' direct represents '2' with '-6118'
6117 6119 -6118 0
c Encoding variable: aux1490 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6120'
c Var 'aux1490' direct represents '0' with '6120'
c Var 'aux1490' order represents '1' with '6121'
-6120 6121 0
c Var 'aux1490' direct represents '1' with '6122'
6120 -6121 6122 0
-6122 6121 0
-6122 -6120 0
c Var 'aux1490' direct represents '2' with '-6121'
6120 6122 -6121 0
c Encoding variable: aux1491 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6123'
c Var 'aux1491' direct represents '0' with '6123'
c Var 'aux1491' order represents '1' with '6124'
-6123 6124 0
c Var 'aux1491' direct represents '1' with '6125'
6123 -6124 6125 0
-6125 6124 0
-6125 -6123 0
c Var 'aux1491' direct represents '2' with '-6124'
6123 6125 -6124 0
c Encoding variable: aux1492 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1491))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6126'
c Var 'aux1492' direct represents '0' with '6126'
c Var 'aux1492' order represents '1' with '6127'
-6126 6127 0
c Var 'aux1492' direct represents '1' with '6128'
6126 -6127 6128 0
-6128 6127 0
-6128 -6126 0
c Var 'aux1492' order represents '2' with '6129'
-6127 6129 0
c Var 'aux1492' direct represents '2' with '6130'
6127 -6129 6130 0
-6130 6129 0
-6130 -6127 0
c Var 'aux1492' direct represents '3' with '-6129'
6126 6128 6130 -6129 0
c Encoding variable: aux1493 with domain: int(0..4) (representing constraint (aux1488 + aux1490))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6131'
c Var 'aux1493' direct represents '0' with '6131'
c Var 'aux1493' order represents '1' with '6132'
-6131 6132 0
c Var 'aux1493' direct represents '1' with '6133'
6131 -6132 6133 0
-6133 6132 0
-6133 -6131 0
c Var 'aux1493' order represents '2' with '6134'
-6132 6134 0
c Var 'aux1493' direct represents '2' with '6135'
6132 -6134 6135 0
-6135 6134 0
-6135 -6132 0
c Var 'aux1493' order represents '3' with '6136'
-6134 6136 0
c Var 'aux1493' direct represents '3' with '6137'
6134 -6136 6137 0
-6137 6136 0
-6137 -6134 0
c Var 'aux1493' direct represents '4' with '-6136'
6131 6133 6135 6137 -6136 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6138'
c Var 'aux1494' direct represents '0' with '6138'
c Var 'aux1494' order represents '1' with '6139'
-6138 6139 0
c Var 'aux1494' direct represents '1' with '6140'
6138 -6139 6140 0
-6140 6139 0
-6140 -6138 0
c Var 'aux1494' direct represents '2' with '-6139'
6138 6140 -6139 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6141'
c Var 'aux1495' direct represents '0' with '6141'
c Var 'aux1495' order represents '1' with '6142'
-6141 6142 0
c Var 'aux1495' direct represents '1' with '6143'
6141 -6142 6143 0
-6143 6142 0
-6143 -6141 0
c Var 'aux1495' direct represents '2' with '-6142'
6141 6143 -6142 0
c Encoding variable: aux1496 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6144'
c Var 'aux1496' direct represents '0' with '6144'
c Var 'aux1496' order represents '1' with '6145'
-6144 6145 0
c Var 'aux1496' direct represents '1' with '6146'
6144 -6145 6146 0
-6146 6145 0
-6146 -6144 0
c Var 'aux1496' direct represents '2' with '-6145'
6144 6146 -6145 0
c Encoding variable: aux1497 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6147'
c Var 'aux1497' direct represents '0' with '6147'
c Var 'aux1497' order represents '1' with '6148'
-6147 6148 0
c Var 'aux1497' direct represents '1' with '6149'
6147 -6148 6149 0
-6149 6148 0
-6149 -6147 0
c Var 'aux1497' direct represents '2' with '-6148'
6147 6149 -6148 0
c Encoding variable: aux1498 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1497))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6150'
c Var 'aux1498' direct represents '0' with '6150'
c Var 'aux1498' order represents '1' with '6151'
-6150 6151 0
c Var 'aux1498' direct represents '1' with '6152'
6150 -6151 6152 0
-6152 6151 0
-6152 -6150 0
c Var 'aux1498' order represents '2' with '6153'
-6151 6153 0
c Var 'aux1498' direct represents '2' with '6154'
6151 -6153 6154 0
-6154 6153 0
-6154 -6151 0
c Var 'aux1498' direct represents '3' with '-6153'
6150 6152 6154 -6153 0
c Encoding variable: aux1499 with domain: int(0..4) (representing constraint (aux1494 + aux1496))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6155'
c Var 'aux1499' direct represents '0' with '6155'
c Var 'aux1499' order represents '1' with '6156'
-6155 6156 0
c Var 'aux1499' direct represents '1' with '6157'
6155 -6156 6157 0
-6157 6156 0
-6157 -6155 0
c Var 'aux1499' order represents '2' with '6158'
-6156 6158 0
c Var 'aux1499' direct represents '2' with '6159'
6156 -6158 6159 0
-6159 6158 0
-6159 -6156 0
c Var 'aux1499' order represents '3' with '6160'
-6158 6160 0
c Var 'aux1499' direct represents '3' with '6161'
6158 -6160 6161 0
-6161 6160 0
-6161 -6158 0
c Var 'aux1499' direct represents '4' with '-6160'
6155 6157 6159 6161 -6160 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6162'
c Var 'aux1500' direct represents '0' with '6162'
c Var 'aux1500' order represents '1' with '6163'
-6162 6163 0
c Var 'aux1500' direct represents '1' with '6164'
6162 -6163 6164 0
-6164 6163 0
-6164 -6162 0
c Var 'aux1500' direct represents '2' with '-6163'
6162 6164 -6163 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6165'
c Var 'aux1501' direct represents '0' with '6165'
c Var 'aux1501' order represents '1' with '6166'
-6165 6166 0
c Var 'aux1501' direct represents '1' with '6167'
6165 -6166 6167 0
-6167 6166 0
-6167 -6165 0
c Var 'aux1501' direct represents '2' with '-6166'
6165 6167 -6166 0
c Encoding variable: aux1502 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6168'
c Var 'aux1502' direct represents '0' with '6168'
c Var 'aux1502' order represents '1' with '6169'
-6168 6169 0
c Var 'aux1502' direct represents '1' with '6170'
6168 -6169 6170 0
-6170 6169 0
-6170 -6168 0
c Var 'aux1502' direct represents '2' with '-6169'
6168 6170 -6169 0
c Encoding variable: aux1503 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6171'
c Var 'aux1503' direct represents '0' with '6171'
c Var 'aux1503' order represents '1' with '6172'
-6171 6172 0
c Var 'aux1503' direct represents '1' with '6173'
6171 -6172 6173 0
-6173 6172 0
-6173 -6171 0
c Var 'aux1503' direct represents '2' with '-6172'
6171 6173 -6172 0
c Encoding variable: aux1504 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1503))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6174'
c Var 'aux1504' direct represents '0' with '6174'
c Var 'aux1504' order represents '1' with '6175'
-6174 6175 0
c Var 'aux1504' direct represents '1' with '6176'
6174 -6175 6176 0
-6176 6175 0
-6176 -6174 0
c Var 'aux1504' order represents '2' with '6177'
-6175 6177 0
c Var 'aux1504' direct represents '2' with '6178'
6175 -6177 6178 0
-6178 6177 0
-6178 -6175 0
c Var 'aux1504' direct represents '3' with '-6177'
6174 6176 6178 -6177 0
c Encoding variable: aux1505 with domain: int(0..4) (representing constraint (aux1500 + aux1502))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6179'
c Var 'aux1505' direct represents '0' with '6179'
c Var 'aux1505' order represents '1' with '6180'
-6179 6180 0
c Var 'aux1505' direct represents '1' with '6181'
6179 -6180 6181 0
-6181 6180 0
-6181 -6179 0
c Var 'aux1505' order represents '2' with '6182'
-6180 6182 0
c Var 'aux1505' direct represents '2' with '6183'
6180 -6182 6183 0
-6183 6182 0
-6183 -6180 0
c Var 'aux1505' order represents '3' with '6184'
-6182 6184 0
c Var 'aux1505' direct represents '3' with '6185'
6182 -6184 6185 0
-6185 6184 0
-6185 -6182 0
c Var 'aux1505' direct represents '4' with '-6184'
6179 6181 6183 6185 -6184 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6186'
c Var 'aux1506' direct represents '0' with '6186'
c Var 'aux1506' order represents '1' with '6187'
-6186 6187 0
c Var 'aux1506' direct represents '1' with '6188'
6186 -6187 6188 0
-6188 6187 0
-6188 -6186 0
c Var 'aux1506' direct represents '2' with '-6187'
6186 6188 -6187 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6189'
c Var 'aux1507' direct represents '0' with '6189'
c Var 'aux1507' order represents '1' with '6190'
-6189 6190 0
c Var 'aux1507' direct represents '1' with '6191'
6189 -6190 6191 0
-6191 6190 0
-6191 -6189 0
c Var 'aux1507' direct represents '2' with '-6190'
6189 6191 -6190 0
c Encoding variable: aux1508 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6192'
c Var 'aux1508' direct represents '0' with '6192'
c Var 'aux1508' order represents '1' with '6193'
-6192 6193 0
c Var 'aux1508' direct represents '1' with '6194'
6192 -6193 6194 0
-6194 6193 0
-6194 -6192 0
c Var 'aux1508' direct represents '2' with '-6193'
6192 6194 -6193 0
c Encoding variable: aux1509 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6195'
c Var 'aux1509' direct represents '0' with '6195'
c Var 'aux1509' order represents '1' with '6196'
-6195 6196 0
c Var 'aux1509' direct represents '1' with '6197'
6195 -6196 6197 0
-6197 6196 0
-6197 -6195 0
c Var 'aux1509' direct represents '2' with '-6196'
6195 6197 -6196 0
c Encoding variable: aux1510 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1509))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6198'
c Var 'aux1510' direct represents '0' with '6198'
c Var 'aux1510' order represents '1' with '6199'
-6198 6199 0
c Var 'aux1510' direct represents '1' with '6200'
6198 -6199 6200 0
-6200 6199 0
-6200 -6198 0
c Var 'aux1510' order represents '2' with '6201'
-6199 6201 0
c Var 'aux1510' direct represents '2' with '6202'
6199 -6201 6202 0
-6202 6201 0
-6202 -6199 0
c Var 'aux1510' direct represents '3' with '-6201'
6198 6200 6202 -6201 0
c Encoding variable: aux1511 with domain: int(0..4) (representing constraint (aux1506 + aux1508))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6203'
c Var 'aux1511' direct represents '0' with '6203'
c Var 'aux1511' order represents '1' with '6204'
-6203 6204 0
c Var 'aux1511' direct represents '1' with '6205'
6203 -6204 6205 0
-6205 6204 0
-6205 -6203 0
c Var 'aux1511' order represents '2' with '6206'
-6204 6206 0
c Var 'aux1511' direct represents '2' with '6207'
6204 -6206 6207 0
-6207 6206 0
-6207 -6204 0
c Var 'aux1511' order represents '3' with '6208'
-6206 6208 0
c Var 'aux1511' direct represents '3' with '6209'
6206 -6208 6209 0
-6209 6208 0
-6209 -6206 0
c Var 'aux1511' direct represents '4' with '-6208'
6203 6205 6207 6209 -6208 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6210'
c Var 'aux1512' direct represents '0' with '6210'
c Var 'aux1512' order represents '1' with '6211'
-6210 6211 0
c Var 'aux1512' direct represents '1' with '6212'
6210 -6211 6212 0
-6212 6211 0
-6212 -6210 0
c Var 'aux1512' direct represents '2' with '-6211'
6210 6212 -6211 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6213'
c Var 'aux1513' direct represents '0' with '6213'
c Var 'aux1513' order represents '1' with '6214'
-6213 6214 0
c Var 'aux1513' direct represents '1' with '6215'
6213 -6214 6215 0
-6215 6214 0
-6215 -6213 0
c Var 'aux1513' direct represents '2' with '-6214'
6213 6215 -6214 0
c Encoding variable: aux1514 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6216'
c Var 'aux1514' direct represents '0' with '6216'
c Var 'aux1514' order represents '1' with '6217'
-6216 6217 0
c Var 'aux1514' direct represents '1' with '6218'
6216 -6217 6218 0
-6218 6217 0
-6218 -6216 0
c Var 'aux1514' direct represents '2' with '-6217'
6216 6218 -6217 0
c Encoding variable: aux1515 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6219'
c Var 'aux1515' direct represents '0' with '6219'
c Var 'aux1515' order represents '1' with '6220'
-6219 6220 0
c Var 'aux1515' direct represents '1' with '6221'
6219 -6220 6221 0
-6221 6220 0
-6221 -6219 0
c Var 'aux1515' direct represents '2' with '-6220'
6219 6221 -6220 0
c Encoding variable: aux1516 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1515))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6222'
c Var 'aux1516' direct represents '0' with '6222'
c Var 'aux1516' order represents '1' with '6223'
-6222 6223 0
c Var 'aux1516' direct represents '1' with '6224'
6222 -6223 6224 0
-6224 6223 0
-6224 -6222 0
c Var 'aux1516' order represents '2' with '6225'
-6223 6225 0
c Var 'aux1516' direct represents '2' with '6226'
6223 -6225 6226 0
-6226 6225 0
-6226 -6223 0
c Var 'aux1516' direct represents '3' with '-6225'
6222 6224 6226 -6225 0
c Encoding variable: aux1517 with domain: int(0..4) (representing constraint (aux1512 + aux1514))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6227'
c Var 'aux1517' direct represents '0' with '6227'
c Var 'aux1517' order represents '1' with '6228'
-6227 6228 0
c Var 'aux1517' direct represents '1' with '6229'
6227 -6228 6229 0
-6229 6228 0
-6229 -6227 0
c Var 'aux1517' order represents '2' with '6230'
-6228 6230 0
c Var 'aux1517' direct represents '2' with '6231'
6228 -6230 6231 0
-6231 6230 0
-6231 -6228 0
c Var 'aux1517' order represents '3' with '6232'
-6230 6232 0
c Var 'aux1517' direct represents '3' with '6233'
6230 -6232 6233 0
-6233 6232 0
-6233 -6230 0
c Var 'aux1517' direct represents '4' with '-6232'
6227 6229 6231 6233 -6232 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6234'
c Var 'aux1518' direct represents '0' with '6234'
c Var 'aux1518' order represents '1' with '6235'
-6234 6235 0
c Var 'aux1518' direct represents '1' with '6236'
6234 -6235 6236 0
-6236 6235 0
-6236 -6234 0
c Var 'aux1518' direct represents '2' with '-6235'
6234 6236 -6235 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6237'
c Var 'aux1519' direct represents '0' with '6237'
c Var 'aux1519' order represents '1' with '6238'
-6237 6238 0
c Var 'aux1519' direct represents '1' with '6239'
6237 -6238 6239 0
-6239 6238 0
-6239 -6237 0
c Var 'aux1519' direct represents '2' with '-6238'
6237 6239 -6238 0
c Encoding variable: aux1520 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6240'
c Var 'aux1520' direct represents '0' with '6240'
c Var 'aux1520' order represents '1' with '6241'
-6240 6241 0
c Var 'aux1520' direct represents '1' with '6242'
6240 -6241 6242 0
-6242 6241 0
-6242 -6240 0
c Var 'aux1520' direct represents '2' with '-6241'
6240 6242 -6241 0
c Encoding variable: aux1521 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6243'
c Var 'aux1521' direct represents '0' with '6243'
c Var 'aux1521' order represents '1' with '6244'
-6243 6244 0
c Var 'aux1521' direct represents '1' with '6245'
6243 -6244 6245 0
-6245 6244 0
-6245 -6243 0
c Var 'aux1521' direct represents '2' with '-6244'
6243 6245 -6244 0
c Encoding variable: aux1522 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1521))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6246'
c Var 'aux1522' direct represents '0' with '6246'
c Var 'aux1522' order represents '1' with '6247'
-6246 6247 0
c Var 'aux1522' direct represents '1' with '6248'
6246 -6247 6248 0
-6248 6247 0
-6248 -6246 0
c Var 'aux1522' order represents '2' with '6249'
-6247 6249 0
c Var 'aux1522' direct represents '2' with '6250'
6247 -6249 6250 0
-6250 6249 0
-6250 -6247 0
c Var 'aux1522' direct represents '3' with '-6249'
6246 6248 6250 -6249 0
c Encoding variable: aux1523 with domain: int(0..4) (representing constraint (aux1518 + aux1520))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6251'
c Var 'aux1523' direct represents '0' with '6251'
c Var 'aux1523' order represents '1' with '6252'
-6251 6252 0
c Var 'aux1523' direct represents '1' with '6253'
6251 -6252 6253 0
-6253 6252 0
-6253 -6251 0
c Var 'aux1523' order represents '2' with '6254'
-6252 6254 0
c Var 'aux1523' direct represents '2' with '6255'
6252 -6254 6255 0
-6255 6254 0
-6255 -6252 0
c Var 'aux1523' order represents '3' with '6256'
-6254 6256 0
c Var 'aux1523' direct represents '3' with '6257'
6254 -6256 6257 0
-6257 6256 0
-6257 -6254 0
c Var 'aux1523' direct represents '4' with '-6256'
6251 6253 6255 6257 -6256 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6258'
c Var 'aux1524' direct represents '0' with '6258'
c Var 'aux1524' order represents '1' with '6259'
-6258 6259 0
c Var 'aux1524' direct represents '1' with '6260'
6258 -6259 6260 0
-6260 6259 0
-6260 -6258 0
c Var 'aux1524' direct represents '2' with '-6259'
6258 6260 -6259 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6261'
c Var 'aux1525' direct represents '0' with '6261'
c Var 'aux1525' order represents '1' with '6262'
-6261 6262 0
c Var 'aux1525' direct represents '1' with '6263'
6261 -6262 6263 0
-6263 6262 0
-6263 -6261 0
c Var 'aux1525' direct represents '2' with '-6262'
6261 6263 -6262 0
c Encoding variable: aux1526 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6264'
c Var 'aux1526' direct represents '0' with '6264'
c Var 'aux1526' order represents '1' with '6265'
-6264 6265 0
c Var 'aux1526' direct represents '1' with '6266'
6264 -6265 6266 0
-6266 6265 0
-6266 -6264 0
c Var 'aux1526' direct represents '2' with '-6265'
6264 6266 -6265 0
c Encoding variable: aux1527 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6267'
c Var 'aux1527' direct represents '0' with '6267'
c Var 'aux1527' order represents '1' with '6268'
-6267 6268 0
c Var 'aux1527' direct represents '1' with '6269'
6267 -6268 6269 0
-6269 6268 0
-6269 -6267 0
c Var 'aux1527' direct represents '2' with '-6268'
6267 6269 -6268 0
c Encoding variable: aux1528 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1527))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6270'
c Var 'aux1528' direct represents '0' with '6270'
c Var 'aux1528' order represents '1' with '6271'
-6270 6271 0
c Var 'aux1528' direct represents '1' with '6272'
6270 -6271 6272 0
-6272 6271 0
-6272 -6270 0
c Var 'aux1528' order represents '2' with '6273'
-6271 6273 0
c Var 'aux1528' direct represents '2' with '6274'
6271 -6273 6274 0
-6274 6273 0
-6274 -6271 0
c Var 'aux1528' direct represents '3' with '-6273'
6270 6272 6274 -6273 0
c Encoding variable: aux1529 with domain: int(0..4) (representing constraint (aux1524 + aux1526))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6275'
c Var 'aux1529' direct represents '0' with '6275'
c Var 'aux1529' order represents '1' with '6276'
-6275 6276 0
c Var 'aux1529' direct represents '1' with '6277'
6275 -6276 6277 0
-6277 6276 0
-6277 -6275 0
c Var 'aux1529' order represents '2' with '6278'
-6276 6278 0
c Var 'aux1529' direct represents '2' with '6279'
6276 -6278 6279 0
-6279 6278 0
-6279 -6276 0
c Var 'aux1529' order represents '3' with '6280'
-6278 6280 0
c Var 'aux1529' direct represents '3' with '6281'
6278 -6280 6281 0
-6281 6280 0
-6281 -6278 0
c Var 'aux1529' direct represents '4' with '-6280'
6275 6277 6279 6281 -6280 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6282'
c Var 'aux1530' direct represents '0' with '6282'
c Var 'aux1530' order represents '1' with '6283'
-6282 6283 0
c Var 'aux1530' direct represents '1' with '6284'
6282 -6283 6284 0
-6284 6283 0
-6284 -6282 0
c Var 'aux1530' direct represents '2' with '-6283'
6282 6284 -6283 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6285'
c Var 'aux1531' direct represents '0' with '6285'
c Var 'aux1531' order represents '1' with '6286'
-6285 6286 0
c Var 'aux1531' direct represents '1' with '6287'
6285 -6286 6287 0
-6287 6286 0
-6287 -6285 0
c Var 'aux1531' direct represents '2' with '-6286'
6285 6287 -6286 0
c Encoding variable: aux1532 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6288'
c Var 'aux1532' direct represents '0' with '6288'
c Var 'aux1532' order represents '1' with '6289'
-6288 6289 0
c Var 'aux1532' direct represents '1' with '6290'
6288 -6289 6290 0
-6290 6289 0
-6290 -6288 0
c Var 'aux1532' direct represents '2' with '-6289'
6288 6290 -6289 0
c Encoding variable: aux1533 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6291'
c Var 'aux1533' direct represents '0' with '6291'
c Var 'aux1533' order represents '1' with '6292'
-6291 6292 0
c Var 'aux1533' direct represents '1' with '6293'
6291 -6292 6293 0
-6293 6292 0
-6293 -6291 0
c Var 'aux1533' direct represents '2' with '-6292'
6291 6293 -6292 0
c Encoding variable: aux1534 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1533))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6294'
c Var 'aux1534' direct represents '0' with '6294'
c Var 'aux1534' order represents '1' with '6295'
-6294 6295 0
c Var 'aux1534' direct represents '1' with '6296'
6294 -6295 6296 0
-6296 6295 0
-6296 -6294 0
c Var 'aux1534' order represents '2' with '6297'
-6295 6297 0
c Var 'aux1534' direct represents '2' with '6298'
6295 -6297 6298 0
-6298 6297 0
-6298 -6295 0
c Var 'aux1534' direct represents '3' with '-6297'
6294 6296 6298 -6297 0
c Encoding variable: aux1535 with domain: int(0..4) (representing constraint (aux1530 + aux1532))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6299'
c Var 'aux1535' direct represents '0' with '6299'
c Var 'aux1535' order represents '1' with '6300'
-6299 6300 0
c Var 'aux1535' direct represents '1' with '6301'
6299 -6300 6301 0
-6301 6300 0
-6301 -6299 0
c Var 'aux1535' order represents '2' with '6302'
-6300 6302 0
c Var 'aux1535' direct represents '2' with '6303'
6300 -6302 6303 0
-6303 6302 0
-6303 -6300 0
c Var 'aux1535' order represents '3' with '6304'
-6302 6304 0
c Var 'aux1535' direct represents '3' with '6305'
6302 -6304 6305 0
-6305 6304 0
-6305 -6302 0
c Var 'aux1535' direct represents '4' with '-6304'
6299 6301 6303 6305 -6304 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6306'
c Var 'aux1536' direct represents '0' with '6306'
c Var 'aux1536' order represents '1' with '6307'
-6306 6307 0
c Var 'aux1536' direct represents '1' with '6308'
6306 -6307 6308 0
-6308 6307 0
-6308 -6306 0
c Var 'aux1536' direct represents '2' with '-6307'
6306 6308 -6307 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6309'
c Var 'aux1537' direct represents '0' with '6309'
c Var 'aux1537' order represents '1' with '6310'
-6309 6310 0
c Var 'aux1537' direct represents '1' with '6311'
6309 -6310 6311 0
-6311 6310 0
-6311 -6309 0
c Var 'aux1537' direct represents '2' with '-6310'
6309 6311 -6310 0
c Encoding variable: aux1538 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6312'
c Var 'aux1538' direct represents '0' with '6312'
c Var 'aux1538' order represents '1' with '6313'
-6312 6313 0
c Var 'aux1538' direct represents '1' with '6314'
6312 -6313 6314 0
-6314 6313 0
-6314 -6312 0
c Var 'aux1538' direct represents '2' with '-6313'
6312 6314 -6313 0
c Encoding variable: aux1539 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6315'
c Var 'aux1539' direct represents '0' with '6315'
c Var 'aux1539' order represents '1' with '6316'
-6315 6316 0
c Var 'aux1539' direct represents '1' with '6317'
6315 -6316 6317 0
-6317 6316 0
-6317 -6315 0
c Var 'aux1539' direct represents '2' with '-6316'
6315 6317 -6316 0
c Encoding variable: aux1540 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1539))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6318'
c Var 'aux1540' direct represents '0' with '6318'
c Var 'aux1540' order represents '1' with '6319'
-6318 6319 0
c Var 'aux1540' direct represents '1' with '6320'
6318 -6319 6320 0
-6320 6319 0
-6320 -6318 0
c Var 'aux1540' order represents '2' with '6321'
-6319 6321 0
c Var 'aux1540' direct represents '2' with '6322'
6319 -6321 6322 0
-6322 6321 0
-6322 -6319 0
c Var 'aux1540' direct represents '3' with '-6321'
6318 6320 6322 -6321 0
c Encoding variable: aux1541 with domain: int(0..4) (representing constraint (aux1536 + aux1538))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6323'
c Var 'aux1541' direct represents '0' with '6323'
c Var 'aux1541' order represents '1' with '6324'
-6323 6324 0
c Var 'aux1541' direct represents '1' with '6325'
6323 -6324 6325 0
-6325 6324 0
-6325 -6323 0
c Var 'aux1541' order represents '2' with '6326'
-6324 6326 0
c Var 'aux1541' direct represents '2' with '6327'
6324 -6326 6327 0
-6327 6326 0
-6327 -6324 0
c Var 'aux1541' order represents '3' with '6328'
-6326 6328 0
c Var 'aux1541' direct represents '3' with '6329'
6326 -6328 6329 0
-6329 6328 0
-6329 -6326 0
c Var 'aux1541' direct represents '4' with '-6328'
6323 6325 6327 6329 -6328 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6330'
c Var 'aux1542' direct represents '0' with '6330'
c Var 'aux1542' order represents '1' with '6331'
-6330 6331 0
c Var 'aux1542' direct represents '1' with '6332'
6330 -6331 6332 0
-6332 6331 0
-6332 -6330 0
c Var 'aux1542' direct represents '2' with '-6331'
6330 6332 -6331 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6333'
c Var 'aux1543' direct represents '0' with '6333'
c Var 'aux1543' order represents '1' with '6334'
-6333 6334 0
c Var 'aux1543' direct represents '1' with '6335'
6333 -6334 6335 0
-6335 6334 0
-6335 -6333 0
c Var 'aux1543' direct represents '2' with '-6334'
6333 6335 -6334 0
c Encoding variable: aux1544 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6336'
c Var 'aux1544' direct represents '0' with '6336'
c Var 'aux1544' order represents '1' with '6337'
-6336 6337 0
c Var 'aux1544' direct represents '1' with '6338'
6336 -6337 6338 0
-6338 6337 0
-6338 -6336 0
c Var 'aux1544' direct represents '2' with '-6337'
6336 6338 -6337 0
c Encoding variable: aux1545 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6339'
c Var 'aux1545' direct represents '0' with '6339'
c Var 'aux1545' order represents '1' with '6340'
-6339 6340 0
c Var 'aux1545' direct represents '1' with '6341'
6339 -6340 6341 0
-6341 6340 0
-6341 -6339 0
c Var 'aux1545' direct represents '2' with '-6340'
6339 6341 -6340 0
c Encoding variable: aux1546 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1545))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6342'
c Var 'aux1546' direct represents '0' with '6342'
c Var 'aux1546' order represents '1' with '6343'
-6342 6343 0
c Var 'aux1546' direct represents '1' with '6344'
6342 -6343 6344 0
-6344 6343 0
-6344 -6342 0
c Var 'aux1546' order represents '2' with '6345'
-6343 6345 0
c Var 'aux1546' direct represents '2' with '6346'
6343 -6345 6346 0
-6346 6345 0
-6346 -6343 0
c Var 'aux1546' direct represents '3' with '-6345'
6342 6344 6346 -6345 0
c Encoding variable: aux1547 with domain: int(0..4) (representing constraint (aux1542 + aux1544))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6347'
c Var 'aux1547' direct represents '0' with '6347'
c Var 'aux1547' order represents '1' with '6348'
-6347 6348 0
c Var 'aux1547' direct represents '1' with '6349'
6347 -6348 6349 0
-6349 6348 0
-6349 -6347 0
c Var 'aux1547' order represents '2' with '6350'
-6348 6350 0
c Var 'aux1547' direct represents '2' with '6351'
6348 -6350 6351 0
-6351 6350 0
-6351 -6348 0
c Var 'aux1547' order represents '3' with '6352'
-6350 6352 0
c Var 'aux1547' direct represents '3' with '6353'
6350 -6352 6353 0
-6353 6352 0
-6353 -6350 0
c Var 'aux1547' direct represents '4' with '-6352'
6347 6349 6351 6353 -6352 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6354'
c Var 'aux1548' direct represents '0' with '6354'
c Var 'aux1548' order represents '1' with '6355'
-6354 6355 0
c Var 'aux1548' direct represents '1' with '6356'
6354 -6355 6356 0
-6356 6355 0
-6356 -6354 0
c Var 'aux1548' direct represents '2' with '-6355'
6354 6356 -6355 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6357'
c Var 'aux1549' direct represents '0' with '6357'
c Var 'aux1549' order represents '1' with '6358'
-6357 6358 0
c Var 'aux1549' direct represents '1' with '6359'
6357 -6358 6359 0
-6359 6358 0
-6359 -6357 0
c Var 'aux1549' direct represents '2' with '-6358'
6357 6359 -6358 0
c Encoding variable: aux1550 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6360'
c Var 'aux1550' direct represents '0' with '6360'
c Var 'aux1550' order represents '1' with '6361'
-6360 6361 0
c Var 'aux1550' direct represents '1' with '6362'
6360 -6361 6362 0
-6362 6361 0
-6362 -6360 0
c Var 'aux1550' direct represents '2' with '-6361'
6360 6362 -6361 0
c Encoding variable: aux1551 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6363'
c Var 'aux1551' direct represents '0' with '6363'
c Var 'aux1551' order represents '1' with '6364'
-6363 6364 0
c Var 'aux1551' direct represents '1' with '6365'
6363 -6364 6365 0
-6365 6364 0
-6365 -6363 0
c Var 'aux1551' direct represents '2' with '-6364'
6363 6365 -6364 0
c Encoding variable: aux1552 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1551))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6366'
c Var 'aux1552' direct represents '0' with '6366'
c Var 'aux1552' order represents '1' with '6367'
-6366 6367 0
c Var 'aux1552' direct represents '1' with '6368'
6366 -6367 6368 0
-6368 6367 0
-6368 -6366 0
c Var 'aux1552' order represents '2' with '6369'
-6367 6369 0
c Var 'aux1552' direct represents '2' with '6370'
6367 -6369 6370 0
-6370 6369 0
-6370 -6367 0
c Var 'aux1552' direct represents '3' with '-6369'
6366 6368 6370 -6369 0
c Encoding variable: aux1553 with domain: int(0..4) (representing constraint (aux1548 + aux1550))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6371'
c Var 'aux1553' direct represents '0' with '6371'
c Var 'aux1553' order represents '1' with '6372'
-6371 6372 0
c Var 'aux1553' direct represents '1' with '6373'
6371 -6372 6373 0
-6373 6372 0
-6373 -6371 0
c Var 'aux1553' order represents '2' with '6374'
-6372 6374 0
c Var 'aux1553' direct represents '2' with '6375'
6372 -6374 6375 0
-6375 6374 0
-6375 -6372 0
c Var 'aux1553' order represents '3' with '6376'
-6374 6376 0
c Var 'aux1553' direct represents '3' with '6377'
6374 -6376 6377 0
-6377 6376 0
-6377 -6374 0
c Var 'aux1553' direct represents '4' with '-6376'
6371 6373 6375 6377 -6376 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6378'
c Var 'aux1554' direct represents '0' with '6378'
c Var 'aux1554' order represents '1' with '6379'
-6378 6379 0
c Var 'aux1554' direct represents '1' with '6380'
6378 -6379 6380 0
-6380 6379 0
-6380 -6378 0
c Var 'aux1554' direct represents '2' with '-6379'
6378 6380 -6379 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6381'
c Var 'aux1555' direct represents '0' with '6381'
c Var 'aux1555' order represents '1' with '6382'
-6381 6382 0
c Var 'aux1555' direct represents '1' with '6383'
6381 -6382 6383 0
-6383 6382 0
-6383 -6381 0
c Var 'aux1555' direct represents '2' with '-6382'
6381 6383 -6382 0
c Encoding variable: aux1556 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6384'
c Var 'aux1556' direct represents '0' with '6384'
c Var 'aux1556' order represents '1' with '6385'
-6384 6385 0
c Var 'aux1556' direct represents '1' with '6386'
6384 -6385 6386 0
-6386 6385 0
-6386 -6384 0
c Var 'aux1556' direct represents '2' with '-6385'
6384 6386 -6385 0
c Encoding variable: aux1557 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6387'
c Var 'aux1557' direct represents '0' with '6387'
c Var 'aux1557' order represents '1' with '6388'
-6387 6388 0
c Var 'aux1557' direct represents '1' with '6389'
6387 -6388 6389 0
-6389 6388 0
-6389 -6387 0
c Var 'aux1557' direct represents '2' with '-6388'
6387 6389 -6388 0
c Encoding variable: aux1558 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1557))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6390'
c Var 'aux1558' direct represents '0' with '6390'
c Var 'aux1558' order represents '1' with '6391'
-6390 6391 0
c Var 'aux1558' direct represents '1' with '6392'
6390 -6391 6392 0
-6392 6391 0
-6392 -6390 0
c Var 'aux1558' order represents '2' with '6393'
-6391 6393 0
c Var 'aux1558' direct represents '2' with '6394'
6391 -6393 6394 0
-6394 6393 0
-6394 -6391 0
c Var 'aux1558' direct represents '3' with '-6393'
6390 6392 6394 -6393 0
c Encoding variable: aux1559 with domain: int(0..4) (representing constraint (aux1554 + aux1556))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6395'
c Var 'aux1559' direct represents '0' with '6395'
c Var 'aux1559' order represents '1' with '6396'
-6395 6396 0
c Var 'aux1559' direct represents '1' with '6397'
6395 -6396 6397 0
-6397 6396 0
-6397 -6395 0
c Var 'aux1559' order represents '2' with '6398'
-6396 6398 0
c Var 'aux1559' direct represents '2' with '6399'
6396 -6398 6399 0
-6399 6398 0
-6399 -6396 0
c Var 'aux1559' order represents '3' with '6400'
-6398 6400 0
c Var 'aux1559' direct represents '3' with '6401'
6398 -6400 6401 0
-6401 6400 0
-6401 -6398 0
c Var 'aux1559' direct represents '4' with '-6400'
6395 6397 6399 6401 -6400 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6402'
c Var 'aux1560' direct represents '0' with '6402'
c Var 'aux1560' order represents '1' with '6403'
-6402 6403 0
c Var 'aux1560' direct represents '1' with '6404'
6402 -6403 6404 0
-6404 6403 0
-6404 -6402 0
c Var 'aux1560' direct represents '2' with '-6403'
6402 6404 -6403 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6405'
c Var 'aux1561' direct represents '0' with '6405'
c Var 'aux1561' order represents '1' with '6406'
-6405 6406 0
c Var 'aux1561' direct represents '1' with '6407'
6405 -6406 6407 0
-6407 6406 0
-6407 -6405 0
c Var 'aux1561' direct represents '2' with '-6406'
6405 6407 -6406 0
c Encoding variable: aux1562 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6408'
c Var 'aux1562' direct represents '0' with '6408'
c Var 'aux1562' order represents '1' with '6409'
-6408 6409 0
c Var 'aux1562' direct represents '1' with '6410'
6408 -6409 6410 0
-6410 6409 0
-6410 -6408 0
c Var 'aux1562' direct represents '2' with '-6409'
6408 6410 -6409 0
c Encoding variable: aux1563 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6411'
c Var 'aux1563' direct represents '0' with '6411'
c Var 'aux1563' order represents '1' with '6412'
-6411 6412 0
c Var 'aux1563' direct represents '1' with '6413'
6411 -6412 6413 0
-6413 6412 0
-6413 -6411 0
c Var 'aux1563' direct represents '2' with '-6412'
6411 6413 -6412 0
c Encoding variable: aux1564 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1563))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6414'
c Var 'aux1564' direct represents '0' with '6414'
c Var 'aux1564' order represents '1' with '6415'
-6414 6415 0
c Var 'aux1564' direct represents '1' with '6416'
6414 -6415 6416 0
-6416 6415 0
-6416 -6414 0
c Var 'aux1564' order represents '2' with '6417'
-6415 6417 0
c Var 'aux1564' direct represents '2' with '6418'
6415 -6417 6418 0
-6418 6417 0
-6418 -6415 0
c Var 'aux1564' direct represents '3' with '-6417'
6414 6416 6418 -6417 0
c Encoding variable: aux1565 with domain: int(0..4) (representing constraint (aux1560 + aux1562))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6419'
c Var 'aux1565' direct represents '0' with '6419'
c Var 'aux1565' order represents '1' with '6420'
-6419 6420 0
c Var 'aux1565' direct represents '1' with '6421'
6419 -6420 6421 0
-6421 6420 0
-6421 -6419 0
c Var 'aux1565' order represents '2' with '6422'
-6420 6422 0
c Var 'aux1565' direct represents '2' with '6423'
6420 -6422 6423 0
-6423 6422 0
-6423 -6420 0
c Var 'aux1565' order represents '3' with '6424'
-6422 6424 0
c Var 'aux1565' direct represents '3' with '6425'
6422 -6424 6425 0
-6425 6424 0
-6425 -6422 0
c Var 'aux1565' direct represents '4' with '-6424'
6419 6421 6423 6425 -6424 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6426'
c Var 'aux1566' direct represents '0' with '6426'
c Var 'aux1566' order represents '1' with '6427'
-6426 6427 0
c Var 'aux1566' direct represents '1' with '6428'
6426 -6427 6428 0
-6428 6427 0
-6428 -6426 0
c Var 'aux1566' direct represents '2' with '-6427'
6426 6428 -6427 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6429'
c Var 'aux1567' direct represents '0' with '6429'
c Var 'aux1567' order represents '1' with '6430'
-6429 6430 0
c Var 'aux1567' direct represents '1' with '6431'
6429 -6430 6431 0
-6431 6430 0
-6431 -6429 0
c Var 'aux1567' direct represents '2' with '-6430'
6429 6431 -6430 0
c Encoding variable: aux1568 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6432'
c Var 'aux1568' direct represents '0' with '6432'
c Var 'aux1568' order represents '1' with '6433'
-6432 6433 0
c Var 'aux1568' direct represents '1' with '6434'
6432 -6433 6434 0
-6434 6433 0
-6434 -6432 0
c Var 'aux1568' direct represents '2' with '-6433'
6432 6434 -6433 0
c Encoding variable: aux1569 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6435'
c Var 'aux1569' direct represents '0' with '6435'
c Var 'aux1569' order represents '1' with '6436'
-6435 6436 0
c Var 'aux1569' direct represents '1' with '6437'
6435 -6436 6437 0
-6437 6436 0
-6437 -6435 0
c Var 'aux1569' direct represents '2' with '-6436'
6435 6437 -6436 0
c Encoding variable: aux1570 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1569))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6438'
c Var 'aux1570' direct represents '0' with '6438'
c Var 'aux1570' order represents '1' with '6439'
-6438 6439 0
c Var 'aux1570' direct represents '1' with '6440'
6438 -6439 6440 0
-6440 6439 0
-6440 -6438 0
c Var 'aux1570' order represents '2' with '6441'
-6439 6441 0
c Var 'aux1570' direct represents '2' with '6442'
6439 -6441 6442 0
-6442 6441 0
-6442 -6439 0
c Var 'aux1570' direct represents '3' with '-6441'
6438 6440 6442 -6441 0
c Encoding variable: aux1571 with domain: int(0..4) (representing constraint (aux1566 + aux1568))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6443'
c Var 'aux1571' direct represents '0' with '6443'
c Var 'aux1571' order represents '1' with '6444'
-6443 6444 0
c Var 'aux1571' direct represents '1' with '6445'
6443 -6444 6445 0
-6445 6444 0
-6445 -6443 0
c Var 'aux1571' order represents '2' with '6446'
-6444 6446 0
c Var 'aux1571' direct represents '2' with '6447'
6444 -6446 6447 0
-6447 6446 0
-6447 -6444 0
c Var 'aux1571' order represents '3' with '6448'
-6446 6448 0
c Var 'aux1571' direct represents '3' with '6449'
6446 -6448 6449 0
-6449 6448 0
-6449 -6446 0
c Var 'aux1571' direct represents '4' with '-6448'
6443 6445 6447 6449 -6448 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6450'
c Var 'aux1572' direct represents '0' with '6450'
c Var 'aux1572' order represents '1' with '6451'
-6450 6451 0
c Var 'aux1572' direct represents '1' with '6452'
6450 -6451 6452 0
-6452 6451 0
-6452 -6450 0
c Var 'aux1572' direct represents '2' with '-6451'
6450 6452 -6451 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6453'
c Var 'aux1573' direct represents '0' with '6453'
c Var 'aux1573' order represents '1' with '6454'
-6453 6454 0
c Var 'aux1573' direct represents '1' with '6455'
6453 -6454 6455 0
-6455 6454 0
-6455 -6453 0
c Var 'aux1573' direct represents '2' with '-6454'
6453 6455 -6454 0
c Encoding variable: aux1574 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6456'
c Var 'aux1574' direct represents '0' with '6456'
c Var 'aux1574' order represents '1' with '6457'
-6456 6457 0
c Var 'aux1574' direct represents '1' with '6458'
6456 -6457 6458 0
-6458 6457 0
-6458 -6456 0
c Var 'aux1574' direct represents '2' with '-6457'
6456 6458 -6457 0
c Encoding variable: aux1575 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6459'
c Var 'aux1575' direct represents '0' with '6459'
c Var 'aux1575' order represents '1' with '6460'
-6459 6460 0
c Var 'aux1575' direct represents '1' with '6461'
6459 -6460 6461 0
-6461 6460 0
-6461 -6459 0
c Var 'aux1575' direct represents '2' with '-6460'
6459 6461 -6460 0
c Encoding variable: aux1576 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1575))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6462'
c Var 'aux1576' direct represents '0' with '6462'
c Var 'aux1576' order represents '1' with '6463'
-6462 6463 0
c Var 'aux1576' direct represents '1' with '6464'
6462 -6463 6464 0
-6464 6463 0
-6464 -6462 0
c Var 'aux1576' order represents '2' with '6465'
-6463 6465 0
c Var 'aux1576' direct represents '2' with '6466'
6463 -6465 6466 0
-6466 6465 0
-6466 -6463 0
c Var 'aux1576' direct represents '3' with '-6465'
6462 6464 6466 -6465 0
c Encoding variable: aux1577 with domain: int(0..4) (representing constraint (aux1572 + aux1574))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6467'
c Var 'aux1577' direct represents '0' with '6467'
c Var 'aux1577' order represents '1' with '6468'
-6467 6468 0
c Var 'aux1577' direct represents '1' with '6469'
6467 -6468 6469 0
-6469 6468 0
-6469 -6467 0
c Var 'aux1577' order represents '2' with '6470'
-6468 6470 0
c Var 'aux1577' direct represents '2' with '6471'
6468 -6470 6471 0
-6471 6470 0
-6471 -6468 0
c Var 'aux1577' order represents '3' with '6472'
-6470 6472 0
c Var 'aux1577' direct represents '3' with '6473'
6470 -6472 6473 0
-6473 6472 0
-6473 -6470 0
c Var 'aux1577' direct represents '4' with '-6472'
6467 6469 6471 6473 -6472 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6474'
c Var 'aux1578' direct represents '0' with '6474'
c Var 'aux1578' order represents '1' with '6475'
-6474 6475 0
c Var 'aux1578' direct represents '1' with '6476'
6474 -6475 6476 0
-6476 6475 0
-6476 -6474 0
c Var 'aux1578' direct represents '2' with '-6475'
6474 6476 -6475 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6477'
c Var 'aux1579' direct represents '0' with '6477'
c Var 'aux1579' order represents '1' with '6478'
-6477 6478 0
c Var 'aux1579' direct represents '1' with '6479'
6477 -6478 6479 0
-6479 6478 0
-6479 -6477 0
c Var 'aux1579' direct represents '2' with '-6478'
6477 6479 -6478 0
c Encoding variable: aux1580 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6480'
c Var 'aux1580' direct represents '0' with '6480'
c Var 'aux1580' order represents '1' with '6481'
-6480 6481 0
c Var 'aux1580' direct represents '1' with '6482'
6480 -6481 6482 0
-6482 6481 0
-6482 -6480 0
c Var 'aux1580' direct represents '2' with '-6481'
6480 6482 -6481 0
c Encoding variable: aux1581 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6483'
c Var 'aux1581' direct represents '0' with '6483'
c Var 'aux1581' order represents '1' with '6484'
-6483 6484 0
c Var 'aux1581' direct represents '1' with '6485'
6483 -6484 6485 0
-6485 6484 0
-6485 -6483 0
c Var 'aux1581' direct represents '2' with '-6484'
6483 6485 -6484 0
c Encoding variable: aux1582 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1581))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6486'
c Var 'aux1582' direct represents '0' with '6486'
c Var 'aux1582' order represents '1' with '6487'
-6486 6487 0
c Var 'aux1582' direct represents '1' with '6488'
6486 -6487 6488 0
-6488 6487 0
-6488 -6486 0
c Var 'aux1582' order represents '2' with '6489'
-6487 6489 0
c Var 'aux1582' direct represents '2' with '6490'
6487 -6489 6490 0
-6490 6489 0
-6490 -6487 0
c Var 'aux1582' direct represents '3' with '-6489'
6486 6488 6490 -6489 0
c Encoding variable: aux1583 with domain: int(0..4) (representing constraint (aux1578 + aux1580))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6491'
c Var 'aux1583' direct represents '0' with '6491'
c Var 'aux1583' order represents '1' with '6492'
-6491 6492 0
c Var 'aux1583' direct represents '1' with '6493'
6491 -6492 6493 0
-6493 6492 0
-6493 -6491 0
c Var 'aux1583' order represents '2' with '6494'
-6492 6494 0
c Var 'aux1583' direct represents '2' with '6495'
6492 -6494 6495 0
-6495 6494 0
-6495 -6492 0
c Var 'aux1583' order represents '3' with '6496'
-6494 6496 0
c Var 'aux1583' direct represents '3' with '6497'
6494 -6496 6497 0
-6497 6496 0
-6497 -6494 0
c Var 'aux1583' direct represents '4' with '-6496'
6491 6493 6495 6497 -6496 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6498'
c Var 'aux1584' direct represents '0' with '6498'
c Var 'aux1584' order represents '1' with '6499'
-6498 6499 0
c Var 'aux1584' direct represents '1' with '6500'
6498 -6499 6500 0
-6500 6499 0
-6500 -6498 0
c Var 'aux1584' direct represents '2' with '-6499'
6498 6500 -6499 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6501'
c Var 'aux1585' direct represents '0' with '6501'
c Var 'aux1585' order represents '1' with '6502'
-6501 6502 0
c Var 'aux1585' direct represents '1' with '6503'
6501 -6502 6503 0
-6503 6502 0
-6503 -6501 0
c Var 'aux1585' direct represents '2' with '-6502'
6501 6503 -6502 0
c Encoding variable: aux1586 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6504'
c Var 'aux1586' direct represents '0' with '6504'
c Var 'aux1586' order represents '1' with '6505'
-6504 6505 0
c Var 'aux1586' direct represents '1' with '6506'
6504 -6505 6506 0
-6506 6505 0
-6506 -6504 0
c Var 'aux1586' direct represents '2' with '-6505'
6504 6506 -6505 0
c Encoding variable: aux1587 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6507'
c Var 'aux1587' direct represents '0' with '6507'
c Var 'aux1587' order represents '1' with '6508'
-6507 6508 0
c Var 'aux1587' direct represents '1' with '6509'
6507 -6508 6509 0
-6509 6508 0
-6509 -6507 0
c Var 'aux1587' direct represents '2' with '-6508'
6507 6509 -6508 0
c Encoding variable: aux1588 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1587))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6510'
c Var 'aux1588' direct represents '0' with '6510'
c Var 'aux1588' order represents '1' with '6511'
-6510 6511 0
c Var 'aux1588' direct represents '1' with '6512'
6510 -6511 6512 0
-6512 6511 0
-6512 -6510 0
c Var 'aux1588' order represents '2' with '6513'
-6511 6513 0
c Var 'aux1588' direct represents '2' with '6514'
6511 -6513 6514 0
-6514 6513 0
-6514 -6511 0
c Var 'aux1588' direct represents '3' with '-6513'
6510 6512 6514 -6513 0
c Encoding variable: aux1589 with domain: int(0..4) (representing constraint (aux1584 + aux1586))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6515'
c Var 'aux1589' direct represents '0' with '6515'
c Var 'aux1589' order represents '1' with '6516'
-6515 6516 0
c Var 'aux1589' direct represents '1' with '6517'
6515 -6516 6517 0
-6517 6516 0
-6517 -6515 0
c Var 'aux1589' order represents '2' with '6518'
-6516 6518 0
c Var 'aux1589' direct represents '2' with '6519'
6516 -6518 6519 0
-6519 6518 0
-6519 -6516 0
c Var 'aux1589' order represents '3' with '6520'
-6518 6520 0
c Var 'aux1589' direct represents '3' with '6521'
6518 -6520 6521 0
-6521 6520 0
-6521 -6518 0
c Var 'aux1589' direct represents '4' with '-6520'
6515 6517 6519 6521 -6520 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6522'
c Var 'aux1590' direct represents '0' with '6522'
c Var 'aux1590' order represents '1' with '6523'
-6522 6523 0
c Var 'aux1590' direct represents '1' with '6524'
6522 -6523 6524 0
-6524 6523 0
-6524 -6522 0
c Var 'aux1590' direct represents '2' with '-6523'
6522 6524 -6523 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6525'
c Var 'aux1591' direct represents '0' with '6525'
c Var 'aux1591' order represents '1' with '6526'
-6525 6526 0
c Var 'aux1591' direct represents '1' with '6527'
6525 -6526 6527 0
-6527 6526 0
-6527 -6525 0
c Var 'aux1591' direct represents '2' with '-6526'
6525 6527 -6526 0
c Encoding variable: aux1592 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6528'
c Var 'aux1592' direct represents '0' with '6528'
c Var 'aux1592' order represents '1' with '6529'
-6528 6529 0
c Var 'aux1592' direct represents '1' with '6530'
6528 -6529 6530 0
-6530 6529 0
-6530 -6528 0
c Var 'aux1592' direct represents '2' with '-6529'
6528 6530 -6529 0
c Encoding variable: aux1593 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6531'
c Var 'aux1593' direct represents '0' with '6531'
c Var 'aux1593' order represents '1' with '6532'
-6531 6532 0
c Var 'aux1593' direct represents '1' with '6533'
6531 -6532 6533 0
-6533 6532 0
-6533 -6531 0
c Var 'aux1593' direct represents '2' with '-6532'
6531 6533 -6532 0
c Encoding variable: aux1594 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1593))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6534'
c Var 'aux1594' direct represents '0' with '6534'
c Var 'aux1594' order represents '1' with '6535'
-6534 6535 0
c Var 'aux1594' direct represents '1' with '6536'
6534 -6535 6536 0
-6536 6535 0
-6536 -6534 0
c Var 'aux1594' order represents '2' with '6537'
-6535 6537 0
c Var 'aux1594' direct represents '2' with '6538'
6535 -6537 6538 0
-6538 6537 0
-6538 -6535 0
c Var 'aux1594' direct represents '3' with '-6537'
6534 6536 6538 -6537 0
c Encoding variable: aux1595 with domain: int(0..4) (representing constraint (aux1590 + aux1592))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6539'
c Var 'aux1595' direct represents '0' with '6539'
c Var 'aux1595' order represents '1' with '6540'
-6539 6540 0
c Var 'aux1595' direct represents '1' with '6541'
6539 -6540 6541 0
-6541 6540 0
-6541 -6539 0
c Var 'aux1595' order represents '2' with '6542'
-6540 6542 0
c Var 'aux1595' direct represents '2' with '6543'
6540 -6542 6543 0
-6543 6542 0
-6543 -6540 0
c Var 'aux1595' order represents '3' with '6544'
-6542 6544 0
c Var 'aux1595' direct represents '3' with '6545'
6542 -6544 6545 0
-6545 6544 0
-6545 -6542 0
c Var 'aux1595' direct represents '4' with '-6544'
6539 6541 6543 6545 -6544 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6546'
c Var 'aux1596' direct represents '0' with '6546'
c Var 'aux1596' order represents '1' with '6547'
-6546 6547 0
c Var 'aux1596' direct represents '1' with '6548'
6546 -6547 6548 0
-6548 6547 0
-6548 -6546 0
c Var 'aux1596' direct represents '2' with '-6547'
6546 6548 -6547 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6549'
c Var 'aux1597' direct represents '0' with '6549'
c Var 'aux1597' order represents '1' with '6550'
-6549 6550 0
c Var 'aux1597' direct represents '1' with '6551'
6549 -6550 6551 0
-6551 6550 0
-6551 -6549 0
c Var 'aux1597' direct represents '2' with '-6550'
6549 6551 -6550 0
c Encoding variable: aux1598 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6552'
c Var 'aux1598' direct represents '0' with '6552'
c Var 'aux1598' order represents '1' with '6553'
-6552 6553 0
c Var 'aux1598' direct represents '1' with '6554'
6552 -6553 6554 0
-6554 6553 0
-6554 -6552 0
c Var 'aux1598' direct represents '2' with '-6553'
6552 6554 -6553 0
c Encoding variable: aux1599 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6555'
c Var 'aux1599' direct represents '0' with '6555'
c Var 'aux1599' order represents '1' with '6556'
-6555 6556 0
c Var 'aux1599' direct represents '1' with '6557'
6555 -6556 6557 0
-6557 6556 0
-6557 -6555 0
c Var 'aux1599' direct represents '2' with '-6556'
6555 6557 -6556 0
c Encoding variable: aux1600 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1599))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6558'
c Var 'aux1600' direct represents '0' with '6558'
c Var 'aux1600' order represents '1' with '6559'
-6558 6559 0
c Var 'aux1600' direct represents '1' with '6560'
6558 -6559 6560 0
-6560 6559 0
-6560 -6558 0
c Var 'aux1600' order represents '2' with '6561'
-6559 6561 0
c Var 'aux1600' direct represents '2' with '6562'
6559 -6561 6562 0
-6562 6561 0
-6562 -6559 0
c Var 'aux1600' direct represents '3' with '-6561'
6558 6560 6562 -6561 0
c Encoding variable: aux1601 with domain: int(0..4) (representing constraint (aux1596 + aux1598))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6563'
c Var 'aux1601' direct represents '0' with '6563'
c Var 'aux1601' order represents '1' with '6564'
-6563 6564 0
c Var 'aux1601' direct represents '1' with '6565'
6563 -6564 6565 0
-6565 6564 0
-6565 -6563 0
c Var 'aux1601' order represents '2' with '6566'
-6564 6566 0
c Var 'aux1601' direct represents '2' with '6567'
6564 -6566 6567 0
-6567 6566 0
-6567 -6564 0
c Var 'aux1601' order represents '3' with '6568'
-6566 6568 0
c Var 'aux1601' direct represents '3' with '6569'
6566 -6568 6569 0
-6569 6568 0
-6569 -6566 0
c Var 'aux1601' direct represents '4' with '-6568'
6563 6565 6567 6569 -6568 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6570'
c Var 'aux1602' direct represents '0' with '6570'
c Var 'aux1602' order represents '1' with '6571'
-6570 6571 0
c Var 'aux1602' direct represents '1' with '6572'
6570 -6571 6572 0
-6572 6571 0
-6572 -6570 0
c Var 'aux1602' direct represents '2' with '-6571'
6570 6572 -6571 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6573'
c Var 'aux1603' direct represents '0' with '6573'
c Var 'aux1603' order represents '1' with '6574'
-6573 6574 0
c Var 'aux1603' direct represents '1' with '6575'
6573 -6574 6575 0
-6575 6574 0
-6575 -6573 0
c Var 'aux1603' direct represents '2' with '-6574'
6573 6575 -6574 0
c Encoding variable: aux1604 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6576'
c Var 'aux1604' direct represents '0' with '6576'
c Var 'aux1604' order represents '1' with '6577'
-6576 6577 0
c Var 'aux1604' direct represents '1' with '6578'
6576 -6577 6578 0
-6578 6577 0
-6578 -6576 0
c Var 'aux1604' direct represents '2' with '-6577'
6576 6578 -6577 0
c Encoding variable: aux1605 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6579'
c Var 'aux1605' direct represents '0' with '6579'
c Var 'aux1605' order represents '1' with '6580'
-6579 6580 0
c Var 'aux1605' direct represents '1' with '6581'
6579 -6580 6581 0
-6581 6580 0
-6581 -6579 0
c Var 'aux1605' direct represents '2' with '-6580'
6579 6581 -6580 0
c Encoding variable: aux1606 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1605))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6582'
c Var 'aux1606' direct represents '0' with '6582'
c Var 'aux1606' order represents '1' with '6583'
-6582 6583 0
c Var 'aux1606' direct represents '1' with '6584'
6582 -6583 6584 0
-6584 6583 0
-6584 -6582 0
c Var 'aux1606' order represents '2' with '6585'
-6583 6585 0
c Var 'aux1606' direct represents '2' with '6586'
6583 -6585 6586 0
-6586 6585 0
-6586 -6583 0
c Var 'aux1606' direct represents '3' with '-6585'
6582 6584 6586 -6585 0
c Encoding variable: aux1607 with domain: int(0..4) (representing constraint (aux1602 + aux1604))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6587'
c Var 'aux1607' direct represents '0' with '6587'
c Var 'aux1607' order represents '1' with '6588'
-6587 6588 0
c Var 'aux1607' direct represents '1' with '6589'
6587 -6588 6589 0
-6589 6588 0
-6589 -6587 0
c Var 'aux1607' order represents '2' with '6590'
-6588 6590 0
c Var 'aux1607' direct represents '2' with '6591'
6588 -6590 6591 0
-6591 6590 0
-6591 -6588 0
c Var 'aux1607' order represents '3' with '6592'
-6590 6592 0
c Var 'aux1607' direct represents '3' with '6593'
6590 -6592 6593 0
-6593 6592 0
-6593 -6590 0
c Var 'aux1607' direct represents '4' with '-6592'
6587 6589 6591 6593 -6592 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6594'
c Var 'aux1608' direct represents '0' with '6594'
c Var 'aux1608' order represents '1' with '6595'
-6594 6595 0
c Var 'aux1608' direct represents '1' with '6596'
6594 -6595 6596 0
-6596 6595 0
-6596 -6594 0
c Var 'aux1608' direct represents '2' with '-6595'
6594 6596 -6595 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6597'
c Var 'aux1609' direct represents '0' with '6597'
c Var 'aux1609' order represents '1' with '6598'
-6597 6598 0
c Var 'aux1609' direct represents '1' with '6599'
6597 -6598 6599 0
-6599 6598 0
-6599 -6597 0
c Var 'aux1609' direct represents '2' with '-6598'
6597 6599 -6598 0
c Encoding variable: aux1610 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6600'
c Var 'aux1610' direct represents '0' with '6600'
c Var 'aux1610' order represents '1' with '6601'
-6600 6601 0
c Var 'aux1610' direct represents '1' with '6602'
6600 -6601 6602 0
-6602 6601 0
-6602 -6600 0
c Var 'aux1610' direct represents '2' with '-6601'
6600 6602 -6601 0
c Encoding variable: aux1611 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6603'
c Var 'aux1611' direct represents '0' with '6603'
c Var 'aux1611' order represents '1' with '6604'
-6603 6604 0
c Var 'aux1611' direct represents '1' with '6605'
6603 -6604 6605 0
-6605 6604 0
-6605 -6603 0
c Var 'aux1611' direct represents '2' with '-6604'
6603 6605 -6604 0
c Encoding variable: aux1612 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1611))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6606'
c Var 'aux1612' direct represents '0' with '6606'
c Var 'aux1612' order represents '1' with '6607'
-6606 6607 0
c Var 'aux1612' direct represents '1' with '6608'
6606 -6607 6608 0
-6608 6607 0
-6608 -6606 0
c Var 'aux1612' order represents '2' with '6609'
-6607 6609 0
c Var 'aux1612' direct represents '2' with '6610'
6607 -6609 6610 0
-6610 6609 0
-6610 -6607 0
c Var 'aux1612' direct represents '3' with '-6609'
6606 6608 6610 -6609 0
c Encoding variable: aux1613 with domain: int(0..4) (representing constraint (aux1608 + aux1610))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6611'
c Var 'aux1613' direct represents '0' with '6611'
c Var 'aux1613' order represents '1' with '6612'
-6611 6612 0
c Var 'aux1613' direct represents '1' with '6613'
6611 -6612 6613 0
-6613 6612 0
-6613 -6611 0
c Var 'aux1613' order represents '2' with '6614'
-6612 6614 0
c Var 'aux1613' direct represents '2' with '6615'
6612 -6614 6615 0
-6615 6614 0
-6615 -6612 0
c Var 'aux1613' order represents '3' with '6616'
-6614 6616 0
c Var 'aux1613' direct represents '3' with '6617'
6614 -6616 6617 0
-6617 6616 0
-6617 -6614 0
c Var 'aux1613' direct represents '4' with '-6616'
6611 6613 6615 6617 -6616 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6618'
c Var 'aux1614' direct represents '0' with '6618'
c Var 'aux1614' order represents '1' with '6619'
-6618 6619 0
c Var 'aux1614' direct represents '1' with '6620'
6618 -6619 6620 0
-6620 6619 0
-6620 -6618 0
c Var 'aux1614' direct represents '2' with '-6619'
6618 6620 -6619 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6621'
c Var 'aux1615' direct represents '0' with '6621'
c Var 'aux1615' order represents '1' with '6622'
-6621 6622 0
c Var 'aux1615' direct represents '1' with '6623'
6621 -6622 6623 0
-6623 6622 0
-6623 -6621 0
c Var 'aux1615' direct represents '2' with '-6622'
6621 6623 -6622 0
c Encoding variable: aux1616 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6624'
c Var 'aux1616' direct represents '0' with '6624'
c Var 'aux1616' order represents '1' with '6625'
-6624 6625 0
c Var 'aux1616' direct represents '1' with '6626'
6624 -6625 6626 0
-6626 6625 0
-6626 -6624 0
c Var 'aux1616' direct represents '2' with '-6625'
6624 6626 -6625 0
c Encoding variable: aux1617 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6627'
c Var 'aux1617' direct represents '0' with '6627'
c Var 'aux1617' order represents '1' with '6628'
-6627 6628 0
c Var 'aux1617' direct represents '1' with '6629'
6627 -6628 6629 0
-6629 6628 0
-6629 -6627 0
c Var 'aux1617' direct represents '2' with '-6628'
6627 6629 -6628 0
c Encoding variable: aux1618 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1617))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6630'
c Var 'aux1618' direct represents '0' with '6630'
c Var 'aux1618' order represents '1' with '6631'
-6630 6631 0
c Var 'aux1618' direct represents '1' with '6632'
6630 -6631 6632 0
-6632 6631 0
-6632 -6630 0
c Var 'aux1618' order represents '2' with '6633'
-6631 6633 0
c Var 'aux1618' direct represents '2' with '6634'
6631 -6633 6634 0
-6634 6633 0
-6634 -6631 0
c Var 'aux1618' direct represents '3' with '-6633'
6630 6632 6634 -6633 0
c Encoding variable: aux1619 with domain: int(0..4) (representing constraint (aux1614 + aux1616))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6635'
c Var 'aux1619' direct represents '0' with '6635'
c Var 'aux1619' order represents '1' with '6636'
-6635 6636 0
c Var 'aux1619' direct represents '1' with '6637'
6635 -6636 6637 0
-6637 6636 0
-6637 -6635 0
c Var 'aux1619' order represents '2' with '6638'
-6636 6638 0
c Var 'aux1619' direct represents '2' with '6639'
6636 -6638 6639 0
-6639 6638 0
-6639 -6636 0
c Var 'aux1619' order represents '3' with '6640'
-6638 6640 0
c Var 'aux1619' direct represents '3' with '6641'
6638 -6640 6641 0
-6641 6640 0
-6641 -6638 0
c Var 'aux1619' direct represents '4' with '-6640'
6635 6637 6639 6641 -6640 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6642'
c Var 'aux1620' direct represents '0' with '6642'
c Var 'aux1620' order represents '1' with '6643'
-6642 6643 0
c Var 'aux1620' direct represents '1' with '6644'
6642 -6643 6644 0
-6644 6643 0
-6644 -6642 0
c Var 'aux1620' direct represents '2' with '-6643'
6642 6644 -6643 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6645'
c Var 'aux1621' direct represents '0' with '6645'
c Var 'aux1621' order represents '1' with '6646'
-6645 6646 0
c Var 'aux1621' direct represents '1' with '6647'
6645 -6646 6647 0
-6647 6646 0
-6647 -6645 0
c Var 'aux1621' direct represents '2' with '-6646'
6645 6647 -6646 0
c Encoding variable: aux1622 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6648'
c Var 'aux1622' direct represents '0' with '6648'
c Var 'aux1622' order represents '1' with '6649'
-6648 6649 0
c Var 'aux1622' direct represents '1' with '6650'
6648 -6649 6650 0
-6650 6649 0
-6650 -6648 0
c Var 'aux1622' direct represents '2' with '-6649'
6648 6650 -6649 0
c Encoding variable: aux1623 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6651'
c Var 'aux1623' direct represents '0' with '6651'
c Var 'aux1623' order represents '1' with '6652'
-6651 6652 0
c Var 'aux1623' direct represents '1' with '6653'
6651 -6652 6653 0
-6653 6652 0
-6653 -6651 0
c Var 'aux1623' direct represents '2' with '-6652'
6651 6653 -6652 0
c Encoding variable: aux1624 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1623))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6654'
c Var 'aux1624' direct represents '0' with '6654'
c Var 'aux1624' order represents '1' with '6655'
-6654 6655 0
c Var 'aux1624' direct represents '1' with '6656'
6654 -6655 6656 0
-6656 6655 0
-6656 -6654 0
c Var 'aux1624' order represents '2' with '6657'
-6655 6657 0
c Var 'aux1624' direct represents '2' with '6658'
6655 -6657 6658 0
-6658 6657 0
-6658 -6655 0
c Var 'aux1624' direct represents '3' with '-6657'
6654 6656 6658 -6657 0
c Encoding variable: aux1625 with domain: int(0..4) (representing constraint (aux1620 + aux1622))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6659'
c Var 'aux1625' direct represents '0' with '6659'
c Var 'aux1625' order represents '1' with '6660'
-6659 6660 0
c Var 'aux1625' direct represents '1' with '6661'
6659 -6660 6661 0
-6661 6660 0
-6661 -6659 0
c Var 'aux1625' order represents '2' with '6662'
-6660 6662 0
c Var 'aux1625' direct represents '2' with '6663'
6660 -6662 6663 0
-6663 6662 0
-6663 -6660 0
c Var 'aux1625' order represents '3' with '6664'
-6662 6664 0
c Var 'aux1625' direct represents '3' with '6665'
6662 -6664 6665 0
-6665 6664 0
-6665 -6662 0
c Var 'aux1625' direct represents '4' with '-6664'
6659 6661 6663 6665 -6664 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6666'
c Var 'aux1626' direct represents '0' with '6666'
c Var 'aux1626' order represents '1' with '6667'
-6666 6667 0
c Var 'aux1626' direct represents '1' with '6668'
6666 -6667 6668 0
-6668 6667 0
-6668 -6666 0
c Var 'aux1626' direct represents '2' with '-6667'
6666 6668 -6667 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6669'
c Var 'aux1627' direct represents '0' with '6669'
c Var 'aux1627' order represents '1' with '6670'
-6669 6670 0
c Var 'aux1627' direct represents '1' with '6671'
6669 -6670 6671 0
-6671 6670 0
-6671 -6669 0
c Var 'aux1627' direct represents '2' with '-6670'
6669 6671 -6670 0
c Encoding variable: aux1628 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6672'
c Var 'aux1628' direct represents '0' with '6672'
c Var 'aux1628' order represents '1' with '6673'
-6672 6673 0
c Var 'aux1628' direct represents '1' with '6674'
6672 -6673 6674 0
-6674 6673 0
-6674 -6672 0
c Var 'aux1628' direct represents '2' with '-6673'
6672 6674 -6673 0
c Encoding variable: aux1629 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6675'
c Var 'aux1629' direct represents '0' with '6675'
c Var 'aux1629' order represents '1' with '6676'
-6675 6676 0
c Var 'aux1629' direct represents '1' with '6677'
6675 -6676 6677 0
-6677 6676 0
-6677 -6675 0
c Var 'aux1629' direct represents '2' with '-6676'
6675 6677 -6676 0
c Encoding variable: aux1630 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1629))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6678'
c Var 'aux1630' direct represents '0' with '6678'
c Var 'aux1630' order represents '1' with '6679'
-6678 6679 0
c Var 'aux1630' direct represents '1' with '6680'
6678 -6679 6680 0
-6680 6679 0
-6680 -6678 0
c Var 'aux1630' order represents '2' with '6681'
-6679 6681 0
c Var 'aux1630' direct represents '2' with '6682'
6679 -6681 6682 0
-6682 6681 0
-6682 -6679 0
c Var 'aux1630' direct represents '3' with '-6681'
6678 6680 6682 -6681 0
c Encoding variable: aux1631 with domain: int(0..4) (representing constraint (aux1626 + aux1628))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6683'
c Var 'aux1631' direct represents '0' with '6683'
c Var 'aux1631' order represents '1' with '6684'
-6683 6684 0
c Var 'aux1631' direct represents '1' with '6685'
6683 -6684 6685 0
-6685 6684 0
-6685 -6683 0
c Var 'aux1631' order represents '2' with '6686'
-6684 6686 0
c Var 'aux1631' direct represents '2' with '6687'
6684 -6686 6687 0
-6687 6686 0
-6687 -6684 0
c Var 'aux1631' order represents '3' with '6688'
-6686 6688 0
c Var 'aux1631' direct represents '3' with '6689'
6686 -6688 6689 0
-6689 6688 0
-6689 -6686 0
c Var 'aux1631' direct represents '4' with '-6688'
6683 6685 6687 6689 -6688 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6690'
c Var 'aux1632' direct represents '0' with '6690'
c Var 'aux1632' order represents '1' with '6691'
-6690 6691 0
c Var 'aux1632' direct represents '1' with '6692'
6690 -6691 6692 0
-6692 6691 0
-6692 -6690 0
c Var 'aux1632' direct represents '2' with '-6691'
6690 6692 -6691 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6693'
c Var 'aux1633' direct represents '0' with '6693'
c Var 'aux1633' order represents '1' with '6694'
-6693 6694 0
c Var 'aux1633' direct represents '1' with '6695'
6693 -6694 6695 0
-6695 6694 0
-6695 -6693 0
c Var 'aux1633' direct represents '2' with '-6694'
6693 6695 -6694 0
c Encoding variable: aux1634 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6696'
c Var 'aux1634' direct represents '0' with '6696'
c Var 'aux1634' order represents '1' with '6697'
-6696 6697 0
c Var 'aux1634' direct represents '1' with '6698'
6696 -6697 6698 0
-6698 6697 0
-6698 -6696 0
c Var 'aux1634' direct represents '2' with '-6697'
6696 6698 -6697 0
c Encoding variable: aux1635 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6699'
c Var 'aux1635' direct represents '0' with '6699'
c Var 'aux1635' order represents '1' with '6700'
-6699 6700 0
c Var 'aux1635' direct represents '1' with '6701'
6699 -6700 6701 0
-6701 6700 0
-6701 -6699 0
c Var 'aux1635' direct represents '2' with '-6700'
6699 6701 -6700 0
c Encoding variable: aux1636 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1635))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6702'
c Var 'aux1636' direct represents '0' with '6702'
c Var 'aux1636' order represents '1' with '6703'
-6702 6703 0
c Var 'aux1636' direct represents '1' with '6704'
6702 -6703 6704 0
-6704 6703 0
-6704 -6702 0
c Var 'aux1636' order represents '2' with '6705'
-6703 6705 0
c Var 'aux1636' direct represents '2' with '6706'
6703 -6705 6706 0
-6706 6705 0
-6706 -6703 0
c Var 'aux1636' direct represents '3' with '-6705'
6702 6704 6706 -6705 0
c Encoding variable: aux1637 with domain: int(0..4) (representing constraint (aux1632 + aux1634))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6707'
c Var 'aux1637' direct represents '0' with '6707'
c Var 'aux1637' order represents '1' with '6708'
-6707 6708 0
c Var 'aux1637' direct represents '1' with '6709'
6707 -6708 6709 0
-6709 6708 0
-6709 -6707 0
c Var 'aux1637' order represents '2' with '6710'
-6708 6710 0
c Var 'aux1637' direct represents '2' with '6711'
6708 -6710 6711 0
-6711 6710 0
-6711 -6708 0
c Var 'aux1637' order represents '3' with '6712'
-6710 6712 0
c Var 'aux1637' direct represents '3' with '6713'
6710 -6712 6713 0
-6713 6712 0
-6713 -6710 0
c Var 'aux1637' direct represents '4' with '-6712'
6707 6709 6711 6713 -6712 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6714'
c Var 'aux1638' direct represents '0' with '6714'
c Var 'aux1638' order represents '1' with '6715'
-6714 6715 0
c Var 'aux1638' direct represents '1' with '6716'
6714 -6715 6716 0
-6716 6715 0
-6716 -6714 0
c Var 'aux1638' direct represents '2' with '-6715'
6714 6716 -6715 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6717'
c Var 'aux1639' direct represents '0' with '6717'
c Var 'aux1639' order represents '1' with '6718'
-6717 6718 0
c Var 'aux1639' direct represents '1' with '6719'
6717 -6718 6719 0
-6719 6718 0
-6719 -6717 0
c Var 'aux1639' direct represents '2' with '-6718'
6717 6719 -6718 0
c Encoding variable: aux1640 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6720'
c Var 'aux1640' direct represents '0' with '6720'
c Var 'aux1640' order represents '1' with '6721'
-6720 6721 0
c Var 'aux1640' direct represents '1' with '6722'
6720 -6721 6722 0
-6722 6721 0
-6722 -6720 0
c Var 'aux1640' direct represents '2' with '-6721'
6720 6722 -6721 0
c Encoding variable: aux1641 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6723'
c Var 'aux1641' direct represents '0' with '6723'
c Var 'aux1641' order represents '1' with '6724'
-6723 6724 0
c Var 'aux1641' direct represents '1' with '6725'
6723 -6724 6725 0
-6725 6724 0
-6725 -6723 0
c Var 'aux1641' direct represents '2' with '-6724'
6723 6725 -6724 0
c Encoding variable: aux1642 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1641))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6726'
c Var 'aux1642' direct represents '0' with '6726'
c Var 'aux1642' order represents '1' with '6727'
-6726 6727 0
c Var 'aux1642' direct represents '1' with '6728'
6726 -6727 6728 0
-6728 6727 0
-6728 -6726 0
c Var 'aux1642' order represents '2' with '6729'
-6727 6729 0
c Var 'aux1642' direct represents '2' with '6730'
6727 -6729 6730 0
-6730 6729 0
-6730 -6727 0
c Var 'aux1642' direct represents '3' with '-6729'
6726 6728 6730 -6729 0
c Encoding variable: aux1643 with domain: int(0..4) (representing constraint (aux1638 + aux1640))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6731'
c Var 'aux1643' direct represents '0' with '6731'
c Var 'aux1643' order represents '1' with '6732'
-6731 6732 0
c Var 'aux1643' direct represents '1' with '6733'
6731 -6732 6733 0
-6733 6732 0
-6733 -6731 0
c Var 'aux1643' order represents '2' with '6734'
-6732 6734 0
c Var 'aux1643' direct represents '2' with '6735'
6732 -6734 6735 0
-6735 6734 0
-6735 -6732 0
c Var 'aux1643' order represents '3' with '6736'
-6734 6736 0
c Var 'aux1643' direct represents '3' with '6737'
6734 -6736 6737 0
-6737 6736 0
-6737 -6734 0
c Var 'aux1643' direct represents '4' with '-6736'
6731 6733 6735 6737 -6736 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6738'
c Var 'aux1644' direct represents '0' with '6738'
c Var 'aux1644' order represents '1' with '6739'
-6738 6739 0
c Var 'aux1644' direct represents '1' with '6740'
6738 -6739 6740 0
-6740 6739 0
-6740 -6738 0
c Var 'aux1644' direct represents '2' with '-6739'
6738 6740 -6739 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6741'
c Var 'aux1645' direct represents '0' with '6741'
c Var 'aux1645' order represents '1' with '6742'
-6741 6742 0
c Var 'aux1645' direct represents '1' with '6743'
6741 -6742 6743 0
-6743 6742 0
-6743 -6741 0
c Var 'aux1645' direct represents '2' with '-6742'
6741 6743 -6742 0
c Encoding variable: aux1646 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6744'
c Var 'aux1646' direct represents '0' with '6744'
c Var 'aux1646' order represents '1' with '6745'
-6744 6745 0
c Var 'aux1646' direct represents '1' with '6746'
6744 -6745 6746 0
-6746 6745 0
-6746 -6744 0
c Var 'aux1646' direct represents '2' with '-6745'
6744 6746 -6745 0
c Encoding variable: aux1647 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6747'
c Var 'aux1647' direct represents '0' with '6747'
c Var 'aux1647' order represents '1' with '6748'
-6747 6748 0
c Var 'aux1647' direct represents '1' with '6749'
6747 -6748 6749 0
-6749 6748 0
-6749 -6747 0
c Var 'aux1647' direct represents '2' with '-6748'
6747 6749 -6748 0
c Encoding variable: aux1648 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1647))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6750'
c Var 'aux1648' direct represents '0' with '6750'
c Var 'aux1648' order represents '1' with '6751'
-6750 6751 0
c Var 'aux1648' direct represents '1' with '6752'
6750 -6751 6752 0
-6752 6751 0
-6752 -6750 0
c Var 'aux1648' order represents '2' with '6753'
-6751 6753 0
c Var 'aux1648' direct represents '2' with '6754'
6751 -6753 6754 0
-6754 6753 0
-6754 -6751 0
c Var 'aux1648' direct represents '3' with '-6753'
6750 6752 6754 -6753 0
c Encoding variable: aux1649 with domain: int(0..4) (representing constraint (aux1644 + aux1646))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6755'
c Var 'aux1649' direct represents '0' with '6755'
c Var 'aux1649' order represents '1' with '6756'
-6755 6756 0
c Var 'aux1649' direct represents '1' with '6757'
6755 -6756 6757 0
-6757 6756 0
-6757 -6755 0
c Var 'aux1649' order represents '2' with '6758'
-6756 6758 0
c Var 'aux1649' direct represents '2' with '6759'
6756 -6758 6759 0
-6759 6758 0
-6759 -6756 0
c Var 'aux1649' order represents '3' with '6760'
-6758 6760 0
c Var 'aux1649' direct represents '3' with '6761'
6758 -6760 6761 0
-6761 6760 0
-6761 -6758 0
c Var 'aux1649' direct represents '4' with '-6760'
6755 6757 6759 6761 -6760 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6762'
c Var 'aux1650' direct represents '0' with '6762'
c Var 'aux1650' order represents '1' with '6763'
-6762 6763 0
c Var 'aux1650' direct represents '1' with '6764'
6762 -6763 6764 0
-6764 6763 0
-6764 -6762 0
c Var 'aux1650' direct represents '2' with '-6763'
6762 6764 -6763 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6765'
c Var 'aux1651' direct represents '0' with '6765'
c Var 'aux1651' order represents '1' with '6766'
-6765 6766 0
c Var 'aux1651' direct represents '1' with '6767'
6765 -6766 6767 0
-6767 6766 0
-6767 -6765 0
c Var 'aux1651' direct represents '2' with '-6766'
6765 6767 -6766 0
c Encoding variable: aux1652 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6768'
c Var 'aux1652' direct represents '0' with '6768'
c Var 'aux1652' order represents '1' with '6769'
-6768 6769 0
c Var 'aux1652' direct represents '1' with '6770'
6768 -6769 6770 0
-6770 6769 0
-6770 -6768 0
c Var 'aux1652' direct represents '2' with '-6769'
6768 6770 -6769 0
c Encoding variable: aux1653 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6771'
c Var 'aux1653' direct represents '0' with '6771'
c Var 'aux1653' order represents '1' with '6772'
-6771 6772 0
c Var 'aux1653' direct represents '1' with '6773'
6771 -6772 6773 0
-6773 6772 0
-6773 -6771 0
c Var 'aux1653' direct represents '2' with '-6772'
6771 6773 -6772 0
c Encoding variable: aux1654 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1653))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6774'
c Var 'aux1654' direct represents '0' with '6774'
c Var 'aux1654' order represents '1' with '6775'
-6774 6775 0
c Var 'aux1654' direct represents '1' with '6776'
6774 -6775 6776 0
-6776 6775 0
-6776 -6774 0
c Var 'aux1654' order represents '2' with '6777'
-6775 6777 0
c Var 'aux1654' direct represents '2' with '6778'
6775 -6777 6778 0
-6778 6777 0
-6778 -6775 0
c Var 'aux1654' direct represents '3' with '-6777'
6774 6776 6778 -6777 0
c Encoding variable: aux1655 with domain: int(0..4) (representing constraint (aux1650 + aux1652))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6779'
c Var 'aux1655' direct represents '0' with '6779'
c Var 'aux1655' order represents '1' with '6780'
-6779 6780 0
c Var 'aux1655' direct represents '1' with '6781'
6779 -6780 6781 0
-6781 6780 0
-6781 -6779 0
c Var 'aux1655' order represents '2' with '6782'
-6780 6782 0
c Var 'aux1655' direct represents '2' with '6783'
6780 -6782 6783 0
-6783 6782 0
-6783 -6780 0
c Var 'aux1655' order represents '3' with '6784'
-6782 6784 0
c Var 'aux1655' direct represents '3' with '6785'
6782 -6784 6785 0
-6785 6784 0
-6785 -6782 0
c Var 'aux1655' direct represents '4' with '-6784'
6779 6781 6783 6785 -6784 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6786'
c Var 'aux1656' direct represents '0' with '6786'
c Var 'aux1656' order represents '1' with '6787'
-6786 6787 0
c Var 'aux1656' direct represents '1' with '6788'
6786 -6787 6788 0
-6788 6787 0
-6788 -6786 0
c Var 'aux1656' direct represents '2' with '-6787'
6786 6788 -6787 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6789'
c Var 'aux1657' direct represents '0' with '6789'
c Var 'aux1657' order represents '1' with '6790'
-6789 6790 0
c Var 'aux1657' direct represents '1' with '6791'
6789 -6790 6791 0
-6791 6790 0
-6791 -6789 0
c Var 'aux1657' direct represents '2' with '-6790'
6789 6791 -6790 0
c Encoding variable: aux1658 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6792'
c Var 'aux1658' direct represents '0' with '6792'
c Var 'aux1658' order represents '1' with '6793'
-6792 6793 0
c Var 'aux1658' direct represents '1' with '6794'
6792 -6793 6794 0
-6794 6793 0
-6794 -6792 0
c Var 'aux1658' direct represents '2' with '-6793'
6792 6794 -6793 0
c Encoding variable: aux1659 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6795'
c Var 'aux1659' direct represents '0' with '6795'
c Var 'aux1659' order represents '1' with '6796'
-6795 6796 0
c Var 'aux1659' direct represents '1' with '6797'
6795 -6796 6797 0
-6797 6796 0
-6797 -6795 0
c Var 'aux1659' direct represents '2' with '-6796'
6795 6797 -6796 0
c Encoding variable: aux1660 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1659))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6798'
c Var 'aux1660' direct represents '0' with '6798'
c Var 'aux1660' order represents '1' with '6799'
-6798 6799 0
c Var 'aux1660' direct represents '1' with '6800'
6798 -6799 6800 0
-6800 6799 0
-6800 -6798 0
c Var 'aux1660' order represents '2' with '6801'
-6799 6801 0
c Var 'aux1660' direct represents '2' with '6802'
6799 -6801 6802 0
-6802 6801 0
-6802 -6799 0
c Var 'aux1660' direct represents '3' with '-6801'
6798 6800 6802 -6801 0
c Encoding variable: aux1661 with domain: int(0..4) (representing constraint (aux1656 + aux1658))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6803'
c Var 'aux1661' direct represents '0' with '6803'
c Var 'aux1661' order represents '1' with '6804'
-6803 6804 0
c Var 'aux1661' direct represents '1' with '6805'
6803 -6804 6805 0
-6805 6804 0
-6805 -6803 0
c Var 'aux1661' order represents '2' with '6806'
-6804 6806 0
c Var 'aux1661' direct represents '2' with '6807'
6804 -6806 6807 0
-6807 6806 0
-6807 -6804 0
c Var 'aux1661' order represents '3' with '6808'
-6806 6808 0
c Var 'aux1661' direct represents '3' with '6809'
6806 -6808 6809 0
-6809 6808 0
-6809 -6806 0
c Var 'aux1661' direct represents '4' with '-6808'
6803 6805 6807 6809 -6808 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6810'
c Var 'aux1662' direct represents '0' with '6810'
c Var 'aux1662' order represents '1' with '6811'
-6810 6811 0
c Var 'aux1662' direct represents '1' with '6812'
6810 -6811 6812 0
-6812 6811 0
-6812 -6810 0
c Var 'aux1662' direct represents '2' with '-6811'
6810 6812 -6811 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6813'
c Var 'aux1663' direct represents '0' with '6813'
c Var 'aux1663' order represents '1' with '6814'
-6813 6814 0
c Var 'aux1663' direct represents '1' with '6815'
6813 -6814 6815 0
-6815 6814 0
-6815 -6813 0
c Var 'aux1663' direct represents '2' with '-6814'
6813 6815 -6814 0
c Encoding variable: aux1664 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6816'
c Var 'aux1664' direct represents '0' with '6816'
c Var 'aux1664' order represents '1' with '6817'
-6816 6817 0
c Var 'aux1664' direct represents '1' with '6818'
6816 -6817 6818 0
-6818 6817 0
-6818 -6816 0
c Var 'aux1664' direct represents '2' with '-6817'
6816 6818 -6817 0
c Encoding variable: aux1665 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6819'
c Var 'aux1665' direct represents '0' with '6819'
c Var 'aux1665' order represents '1' with '6820'
-6819 6820 0
c Var 'aux1665' direct represents '1' with '6821'
6819 -6820 6821 0
-6821 6820 0
-6821 -6819 0
c Var 'aux1665' direct represents '2' with '-6820'
6819 6821 -6820 0
c Encoding variable: aux1666 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1665))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6822'
c Var 'aux1666' direct represents '0' with '6822'
c Var 'aux1666' order represents '1' with '6823'
-6822 6823 0
c Var 'aux1666' direct represents '1' with '6824'
6822 -6823 6824 0
-6824 6823 0
-6824 -6822 0
c Var 'aux1666' order represents '2' with '6825'
-6823 6825 0
c Var 'aux1666' direct represents '2' with '6826'
6823 -6825 6826 0
-6826 6825 0
-6826 -6823 0
c Var 'aux1666' direct represents '3' with '-6825'
6822 6824 6826 -6825 0
c Encoding variable: aux1667 with domain: int(0..4) (representing constraint (aux1662 + aux1664))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6827'
c Var 'aux1667' direct represents '0' with '6827'
c Var 'aux1667' order represents '1' with '6828'
-6827 6828 0
c Var 'aux1667' direct represents '1' with '6829'
6827 -6828 6829 0
-6829 6828 0
-6829 -6827 0
c Var 'aux1667' order represents '2' with '6830'
-6828 6830 0
c Var 'aux1667' direct represents '2' with '6831'
6828 -6830 6831 0
-6831 6830 0
-6831 -6828 0
c Var 'aux1667' order represents '3' with '6832'
-6830 6832 0
c Var 'aux1667' direct represents '3' with '6833'
6830 -6832 6833 0
-6833 6832 0
-6833 -6830 0
c Var 'aux1667' direct represents '4' with '-6832'
6827 6829 6831 6833 -6832 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6834'
c Var 'aux1668' direct represents '0' with '6834'
c Var 'aux1668' order represents '1' with '6835'
-6834 6835 0
c Var 'aux1668' direct represents '1' with '6836'
6834 -6835 6836 0
-6836 6835 0
-6836 -6834 0
c Var 'aux1668' direct represents '2' with '-6835'
6834 6836 -6835 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6837'
c Var 'aux1669' direct represents '0' with '6837'
c Var 'aux1669' order represents '1' with '6838'
-6837 6838 0
c Var 'aux1669' direct represents '1' with '6839'
6837 -6838 6839 0
-6839 6838 0
-6839 -6837 0
c Var 'aux1669' direct represents '2' with '-6838'
6837 6839 -6838 0
c Encoding variable: aux1670 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6840'
c Var 'aux1670' direct represents '0' with '6840'
c Var 'aux1670' order represents '1' with '6841'
-6840 6841 0
c Var 'aux1670' direct represents '1' with '6842'
6840 -6841 6842 0
-6842 6841 0
-6842 -6840 0
c Var 'aux1670' direct represents '2' with '-6841'
6840 6842 -6841 0
c Encoding variable: aux1671 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6843'
c Var 'aux1671' direct represents '0' with '6843'
c Var 'aux1671' order represents '1' with '6844'
-6843 6844 0
c Var 'aux1671' direct represents '1' with '6845'
6843 -6844 6845 0
-6845 6844 0
-6845 -6843 0
c Var 'aux1671' direct represents '2' with '-6844'
6843 6845 -6844 0
c Encoding variable: aux1672 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1671))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6846'
c Var 'aux1672' direct represents '0' with '6846'
c Var 'aux1672' order represents '1' with '6847'
-6846 6847 0
c Var 'aux1672' direct represents '1' with '6848'
6846 -6847 6848 0
-6848 6847 0
-6848 -6846 0
c Var 'aux1672' order represents '2' with '6849'
-6847 6849 0
c Var 'aux1672' direct represents '2' with '6850'
6847 -6849 6850 0
-6850 6849 0
-6850 -6847 0
c Var 'aux1672' direct represents '3' with '-6849'
6846 6848 6850 -6849 0
c Encoding variable: aux1673 with domain: int(0..4) (representing constraint (aux1668 + aux1670))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6851'
c Var 'aux1673' direct represents '0' with '6851'
c Var 'aux1673' order represents '1' with '6852'
-6851 6852 0
c Var 'aux1673' direct represents '1' with '6853'
6851 -6852 6853 0
-6853 6852 0
-6853 -6851 0
c Var 'aux1673' order represents '2' with '6854'
-6852 6854 0
c Var 'aux1673' direct represents '2' with '6855'
6852 -6854 6855 0
-6855 6854 0
-6855 -6852 0
c Var 'aux1673' order represents '3' with '6856'
-6854 6856 0
c Var 'aux1673' direct represents '3' with '6857'
6854 -6856 6857 0
-6857 6856 0
-6857 -6854 0
c Var 'aux1673' direct represents '4' with '-6856'
6851 6853 6855 6857 -6856 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6858'
c Var 'aux1674' direct represents '0' with '6858'
c Var 'aux1674' order represents '1' with '6859'
-6858 6859 0
c Var 'aux1674' direct represents '1' with '6860'
6858 -6859 6860 0
-6860 6859 0
-6860 -6858 0
c Var 'aux1674' direct represents '2' with '-6859'
6858 6860 -6859 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6861'
c Var 'aux1675' direct represents '0' with '6861'
c Var 'aux1675' order represents '1' with '6862'
-6861 6862 0
c Var 'aux1675' direct represents '1' with '6863'
6861 -6862 6863 0
-6863 6862 0
-6863 -6861 0
c Var 'aux1675' direct represents '2' with '-6862'
6861 6863 -6862 0
c Encoding variable: aux1676 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6864'
c Var 'aux1676' direct represents '0' with '6864'
c Var 'aux1676' order represents '1' with '6865'
-6864 6865 0
c Var 'aux1676' direct represents '1' with '6866'
6864 -6865 6866 0
-6866 6865 0
-6866 -6864 0
c Var 'aux1676' direct represents '2' with '-6865'
6864 6866 -6865 0
c Encoding variable: aux1677 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6867'
c Var 'aux1677' direct represents '0' with '6867'
c Var 'aux1677' order represents '1' with '6868'
-6867 6868 0
c Var 'aux1677' direct represents '1' with '6869'
6867 -6868 6869 0
-6869 6868 0
-6869 -6867 0
c Var 'aux1677' direct represents '2' with '-6868'
6867 6869 -6868 0
c Encoding variable: aux1678 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1677))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6870'
c Var 'aux1678' direct represents '0' with '6870'
c Var 'aux1678' order represents '1' with '6871'
-6870 6871 0
c Var 'aux1678' direct represents '1' with '6872'
6870 -6871 6872 0
-6872 6871 0
-6872 -6870 0
c Var 'aux1678' order represents '2' with '6873'
-6871 6873 0
c Var 'aux1678' direct represents '2' with '6874'
6871 -6873 6874 0
-6874 6873 0
-6874 -6871 0
c Var 'aux1678' direct represents '3' with '-6873'
6870 6872 6874 -6873 0
c Encoding variable: aux1679 with domain: int(0..4) (representing constraint (aux1674 + aux1676))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6875'
c Var 'aux1679' direct represents '0' with '6875'
c Var 'aux1679' order represents '1' with '6876'
-6875 6876 0
c Var 'aux1679' direct represents '1' with '6877'
6875 -6876 6877 0
-6877 6876 0
-6877 -6875 0
c Var 'aux1679' order represents '2' with '6878'
-6876 6878 0
c Var 'aux1679' direct represents '2' with '6879'
6876 -6878 6879 0
-6879 6878 0
-6879 -6876 0
c Var 'aux1679' order represents '3' with '6880'
-6878 6880 0
c Var 'aux1679' direct represents '3' with '6881'
6878 -6880 6881 0
-6881 6880 0
-6881 -6878 0
c Var 'aux1679' direct represents '4' with '-6880'
6875 6877 6879 6881 -6880 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6882'
c Var 'aux1680' direct represents '0' with '6882'
c Var 'aux1680' order represents '1' with '6883'
-6882 6883 0
c Var 'aux1680' direct represents '1' with '6884'
6882 -6883 6884 0
-6884 6883 0
-6884 -6882 0
c Var 'aux1680' direct represents '2' with '-6883'
6882 6884 -6883 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6885'
c Var 'aux1681' direct represents '0' with '6885'
c Var 'aux1681' order represents '1' with '6886'
-6885 6886 0
c Var 'aux1681' direct represents '1' with '6887'
6885 -6886 6887 0
-6887 6886 0
-6887 -6885 0
c Var 'aux1681' direct represents '2' with '-6886'
6885 6887 -6886 0
c Encoding variable: aux1682 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '6888'
c Var 'aux1682' direct represents '0' with '6888'
c Var 'aux1682' order represents '1' with '6889'
-6888 6889 0
c Var 'aux1682' direct represents '1' with '6890'
6888 -6889 6890 0
-6890 6889 0
-6890 -6888 0
c Var 'aux1682' direct represents '2' with '-6889'
6888 6890 -6889 0
c Encoding variable: aux1683 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '6891'
c Var 'aux1683' direct represents '0' with '6891'
c Var 'aux1683' order represents '1' with '6892'
-6891 6892 0
c Var 'aux1683' direct represents '1' with '6893'
6891 -6892 6893 0
-6893 6892 0
-6893 -6891 0
c Var 'aux1683' direct represents '2' with '-6892'
6891 6893 -6892 0
c Encoding variable: aux1684 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1683))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '6894'
c Var 'aux1684' direct represents '0' with '6894'
c Var 'aux1684' order represents '1' with '6895'
-6894 6895 0
c Var 'aux1684' direct represents '1' with '6896'
6894 -6895 6896 0
-6896 6895 0
-6896 -6894 0
c Var 'aux1684' order represents '2' with '6897'
-6895 6897 0
c Var 'aux1684' direct represents '2' with '6898'
6895 -6897 6898 0
-6898 6897 0
-6898 -6895 0
c Var 'aux1684' direct represents '3' with '-6897'
6894 6896 6898 -6897 0
c Encoding variable: aux1685 with domain: int(0..4) (representing constraint (aux1680 + aux1682))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '6899'
c Var 'aux1685' direct represents '0' with '6899'
c Var 'aux1685' order represents '1' with '6900'
-6899 6900 0
c Var 'aux1685' direct represents '1' with '6901'
6899 -6900 6901 0
-6901 6900 0
-6901 -6899 0
c Var 'aux1685' order represents '2' with '6902'
-6900 6902 0
c Var 'aux1685' direct represents '2' with '6903'
6900 -6902 6903 0
-6903 6902 0
-6903 -6900 0
c Var 'aux1685' order represents '3' with '6904'
-6902 6904 0
c Var 'aux1685' direct represents '3' with '6905'
6902 -6904 6905 0
-6905 6904 0
-6905 -6902 0
c Var 'aux1685' direct represents '4' with '-6904'
6899 6901 6903 6905 -6904 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '6906'
c Var 'aux1686' direct represents '0' with '6906'
c Var 'aux1686' order represents '1' with '6907'
-6906 6907 0
c Var 'aux1686' direct represents '1' with '6908'
6906 -6907 6908 0
-6908 6907 0
-6908 -6906 0
c Var 'aux1686' direct represents '2' with '-6907'
6906 6908 -6907 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '6909'
c Var 'aux1687' direct represents '0' with '6909'
c Var 'aux1687' order represents '1' with '6910'
-6909 6910 0
c Var 'aux1687' direct represents '1' with '6911'
6909 -6910 6911 0
-6911 6910 0
-6911 -6909 0
c Var 'aux1687' direct represents '2' with '-6910'
6909 6911 -6910 0
c Encoding variable: aux1688 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '6912'
c Var 'aux1688' direct represents '0' with '6912'
c Var 'aux1688' order represents '1' with '6913'
-6912 6913 0
c Var 'aux1688' direct represents '1' with '6914'
6912 -6913 6914 0
-6914 6913 0
-6914 -6912 0
c Var 'aux1688' direct represents '2' with '-6913'
6912 6914 -6913 0
c Encoding variable: aux1689 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '6915'
c Var 'aux1689' direct represents '0' with '6915'
c Var 'aux1689' order represents '1' with '6916'
-6915 6916 0
c Var 'aux1689' direct represents '1' with '6917'
6915 -6916 6917 0
-6917 6916 0
-6917 -6915 0
c Var 'aux1689' direct represents '2' with '-6916'
6915 6917 -6916 0
c Encoding variable: aux1690 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1689))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '6918'
c Var 'aux1690' direct represents '0' with '6918'
c Var 'aux1690' order represents '1' with '6919'
-6918 6919 0
c Var 'aux1690' direct represents '1' with '6920'
6918 -6919 6920 0
-6920 6919 0
-6920 -6918 0
c Var 'aux1690' order represents '2' with '6921'
-6919 6921 0
c Var 'aux1690' direct represents '2' with '6922'
6919 -6921 6922 0
-6922 6921 0
-6922 -6919 0
c Var 'aux1690' direct represents '3' with '-6921'
6918 6920 6922 -6921 0
c Encoding variable: aux1691 with domain: int(0..4) (representing constraint (aux1686 + aux1688))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '6923'
c Var 'aux1691' direct represents '0' with '6923'
c Var 'aux1691' order represents '1' with '6924'
-6923 6924 0
c Var 'aux1691' direct represents '1' with '6925'
6923 -6924 6925 0
-6925 6924 0
-6925 -6923 0
c Var 'aux1691' order represents '2' with '6926'
-6924 6926 0
c Var 'aux1691' direct represents '2' with '6927'
6924 -6926 6927 0
-6927 6926 0
-6927 -6924 0
c Var 'aux1691' order represents '3' with '6928'
-6926 6928 0
c Var 'aux1691' direct represents '3' with '6929'
6926 -6928 6929 0
-6929 6928 0
-6929 -6926 0
c Var 'aux1691' direct represents '4' with '-6928'
6923 6925 6927 6929 -6928 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '6930'
c Var 'aux1692' direct represents '0' with '6930'
c Var 'aux1692' order represents '1' with '6931'
-6930 6931 0
c Var 'aux1692' direct represents '1' with '6932'
6930 -6931 6932 0
-6932 6931 0
-6932 -6930 0
c Var 'aux1692' direct represents '2' with '-6931'
6930 6932 -6931 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '6933'
c Var 'aux1693' direct represents '0' with '6933'
c Var 'aux1693' order represents '1' with '6934'
-6933 6934 0
c Var 'aux1693' direct represents '1' with '6935'
6933 -6934 6935 0
-6935 6934 0
-6935 -6933 0
c Var 'aux1693' direct represents '2' with '-6934'
6933 6935 -6934 0
c Encoding variable: aux1694 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '6936'
c Var 'aux1694' direct represents '0' with '6936'
c Var 'aux1694' order represents '1' with '6937'
-6936 6937 0
c Var 'aux1694' direct represents '1' with '6938'
6936 -6937 6938 0
-6938 6937 0
-6938 -6936 0
c Var 'aux1694' direct represents '2' with '-6937'
6936 6938 -6937 0
c Encoding variable: aux1695 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '6939'
c Var 'aux1695' direct represents '0' with '6939'
c Var 'aux1695' order represents '1' with '6940'
-6939 6940 0
c Var 'aux1695' direct represents '1' with '6941'
6939 -6940 6941 0
-6941 6940 0
-6941 -6939 0
c Var 'aux1695' direct represents '2' with '-6940'
6939 6941 -6940 0
c Encoding variable: aux1696 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1695))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '6942'
c Var 'aux1696' direct represents '0' with '6942'
c Var 'aux1696' order represents '1' with '6943'
-6942 6943 0
c Var 'aux1696' direct represents '1' with '6944'
6942 -6943 6944 0
-6944 6943 0
-6944 -6942 0
c Var 'aux1696' order represents '2' with '6945'
-6943 6945 0
c Var 'aux1696' direct represents '2' with '6946'
6943 -6945 6946 0
-6946 6945 0
-6946 -6943 0
c Var 'aux1696' direct represents '3' with '-6945'
6942 6944 6946 -6945 0
c Encoding variable: aux1697 with domain: int(0..4) (representing constraint (aux1692 + aux1694))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '6947'
c Var 'aux1697' direct represents '0' with '6947'
c Var 'aux1697' order represents '1' with '6948'
-6947 6948 0
c Var 'aux1697' direct represents '1' with '6949'
6947 -6948 6949 0
-6949 6948 0
-6949 -6947 0
c Var 'aux1697' order represents '2' with '6950'
-6948 6950 0
c Var 'aux1697' direct represents '2' with '6951'
6948 -6950 6951 0
-6951 6950 0
-6951 -6948 0
c Var 'aux1697' order represents '3' with '6952'
-6950 6952 0
c Var 'aux1697' direct represents '3' with '6953'
6950 -6952 6953 0
-6953 6952 0
-6953 -6950 0
c Var 'aux1697' direct represents '4' with '-6952'
6947 6949 6951 6953 -6952 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '6954'
c Var 'aux1698' direct represents '0' with '6954'
c Var 'aux1698' order represents '1' with '6955'
-6954 6955 0
c Var 'aux1698' direct represents '1' with '6956'
6954 -6955 6956 0
-6956 6955 0
-6956 -6954 0
c Var 'aux1698' direct represents '2' with '-6955'
6954 6956 -6955 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '6957'
c Var 'aux1699' direct represents '0' with '6957'
c Var 'aux1699' order represents '1' with '6958'
-6957 6958 0
c Var 'aux1699' direct represents '1' with '6959'
6957 -6958 6959 0
-6959 6958 0
-6959 -6957 0
c Var 'aux1699' direct represents '2' with '-6958'
6957 6959 -6958 0
c Encoding variable: aux1700 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '6960'
c Var 'aux1700' direct represents '0' with '6960'
c Var 'aux1700' order represents '1' with '6961'
-6960 6961 0
c Var 'aux1700' direct represents '1' with '6962'
6960 -6961 6962 0
-6962 6961 0
-6962 -6960 0
c Var 'aux1700' direct represents '2' with '-6961'
6960 6962 -6961 0
c Encoding variable: aux1701 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '6963'
c Var 'aux1701' direct represents '0' with '6963'
c Var 'aux1701' order represents '1' with '6964'
-6963 6964 0
c Var 'aux1701' direct represents '1' with '6965'
6963 -6964 6965 0
-6965 6964 0
-6965 -6963 0
c Var 'aux1701' direct represents '2' with '-6964'
6963 6965 -6964 0
c Encoding variable: aux1702 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1701))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '6966'
c Var 'aux1702' direct represents '0' with '6966'
c Var 'aux1702' order represents '1' with '6967'
-6966 6967 0
c Var 'aux1702' direct represents '1' with '6968'
6966 -6967 6968 0
-6968 6967 0
-6968 -6966 0
c Var 'aux1702' order represents '2' with '6969'
-6967 6969 0
c Var 'aux1702' direct represents '2' with '6970'
6967 -6969 6970 0
-6970 6969 0
-6970 -6967 0
c Var 'aux1702' direct represents '3' with '-6969'
6966 6968 6970 -6969 0
c Encoding variable: aux1703 with domain: int(0..4) (representing constraint (aux1698 + aux1700))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '6971'
c Var 'aux1703' direct represents '0' with '6971'
c Var 'aux1703' order represents '1' with '6972'
-6971 6972 0
c Var 'aux1703' direct represents '1' with '6973'
6971 -6972 6973 0
-6973 6972 0
-6973 -6971 0
c Var 'aux1703' order represents '2' with '6974'
-6972 6974 0
c Var 'aux1703' direct represents '2' with '6975'
6972 -6974 6975 0
-6975 6974 0
-6975 -6972 0
c Var 'aux1703' order represents '3' with '6976'
-6974 6976 0
c Var 'aux1703' direct represents '3' with '6977'
6974 -6976 6977 0
-6977 6976 0
-6977 -6974 0
c Var 'aux1703' direct represents '4' with '-6976'
6971 6973 6975 6977 -6976 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '6978'
c Var 'aux1704' direct represents '0' with '6978'
c Var 'aux1704' order represents '1' with '6979'
-6978 6979 0
c Var 'aux1704' direct represents '1' with '6980'
6978 -6979 6980 0
-6980 6979 0
-6980 -6978 0
c Var 'aux1704' direct represents '2' with '-6979'
6978 6980 -6979 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '6981'
c Var 'aux1705' direct represents '0' with '6981'
c Var 'aux1705' order represents '1' with '6982'
-6981 6982 0
c Var 'aux1705' direct represents '1' with '6983'
6981 -6982 6983 0
-6983 6982 0
-6983 -6981 0
c Var 'aux1705' direct represents '2' with '-6982'
6981 6983 -6982 0
c Encoding variable: aux1706 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '6984'
c Var 'aux1706' direct represents '0' with '6984'
c Var 'aux1706' order represents '1' with '6985'
-6984 6985 0
c Var 'aux1706' direct represents '1' with '6986'
6984 -6985 6986 0
-6986 6985 0
-6986 -6984 0
c Var 'aux1706' direct represents '2' with '-6985'
6984 6986 -6985 0
c Encoding variable: aux1707 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '6987'
c Var 'aux1707' direct represents '0' with '6987'
c Var 'aux1707' order represents '1' with '6988'
-6987 6988 0
c Var 'aux1707' direct represents '1' with '6989'
6987 -6988 6989 0
-6989 6988 0
-6989 -6987 0
c Var 'aux1707' direct represents '2' with '-6988'
6987 6989 -6988 0
c Encoding variable: aux1708 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1707))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '6990'
c Var 'aux1708' direct represents '0' with '6990'
c Var 'aux1708' order represents '1' with '6991'
-6990 6991 0
c Var 'aux1708' direct represents '1' with '6992'
6990 -6991 6992 0
-6992 6991 0
-6992 -6990 0
c Var 'aux1708' order represents '2' with '6993'
-6991 6993 0
c Var 'aux1708' direct represents '2' with '6994'
6991 -6993 6994 0
-6994 6993 0
-6994 -6991 0
c Var 'aux1708' direct represents '3' with '-6993'
6990 6992 6994 -6993 0
c Encoding variable: aux1709 with domain: int(0..4) (representing constraint (aux1704 + aux1706))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '6995'
c Var 'aux1709' direct represents '0' with '6995'
c Var 'aux1709' order represents '1' with '6996'
-6995 6996 0
c Var 'aux1709' direct represents '1' with '6997'
6995 -6996 6997 0
-6997 6996 0
-6997 -6995 0
c Var 'aux1709' order represents '2' with '6998'
-6996 6998 0
c Var 'aux1709' direct represents '2' with '6999'
6996 -6998 6999 0
-6999 6998 0
-6999 -6996 0
c Var 'aux1709' order represents '3' with '7000'
-6998 7000 0
c Var 'aux1709' direct represents '3' with '7001'
6998 -7000 7001 0
-7001 7000 0
-7001 -6998 0
c Var 'aux1709' direct represents '4' with '-7000'
6995 6997 6999 7001 -7000 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '7002'
c Var 'aux1710' direct represents '0' with '7002'
c Var 'aux1710' order represents '1' with '7003'
-7002 7003 0
c Var 'aux1710' direct represents '1' with '7004'
7002 -7003 7004 0
-7004 7003 0
-7004 -7002 0
c Var 'aux1710' direct represents '2' with '-7003'
7002 7004 -7003 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '7005'
c Var 'aux1711' direct represents '0' with '7005'
c Var 'aux1711' order represents '1' with '7006'
-7005 7006 0
c Var 'aux1711' direct represents '1' with '7007'
7005 -7006 7007 0
-7007 7006 0
-7007 -7005 0
c Var 'aux1711' direct represents '2' with '-7006'
7005 7007 -7006 0
c Encoding variable: aux1712 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '7008'
c Var 'aux1712' direct represents '0' with '7008'
c Var 'aux1712' order represents '1' with '7009'
-7008 7009 0
c Var 'aux1712' direct represents '1' with '7010'
7008 -7009 7010 0
-7010 7009 0
-7010 -7008 0
c Var 'aux1712' direct represents '2' with '-7009'
7008 7010 -7009 0
c Encoding variable: aux1713 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '7011'
c Var 'aux1713' direct represents '0' with '7011'
c Var 'aux1713' order represents '1' with '7012'
-7011 7012 0
c Var 'aux1713' direct represents '1' with '7013'
7011 -7012 7013 0
-7013 7012 0
-7013 -7011 0
c Var 'aux1713' direct represents '2' with '-7012'
7011 7013 -7012 0
c Encoding variable: aux1714 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1713))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '7014'
c Var 'aux1714' direct represents '0' with '7014'
c Var 'aux1714' order represents '1' with '7015'
-7014 7015 0
c Var 'aux1714' direct represents '1' with '7016'
7014 -7015 7016 0
-7016 7015 0
-7016 -7014 0
c Var 'aux1714' order represents '2' with '7017'
-7015 7017 0
c Var 'aux1714' direct represents '2' with '7018'
7015 -7017 7018 0
-7018 7017 0
-7018 -7015 0
c Var 'aux1714' direct represents '3' with '-7017'
7014 7016 7018 -7017 0
c Encoding variable: aux1715 with domain: int(0..4) (representing constraint (aux1710 + aux1712))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '7019'
c Var 'aux1715' direct represents '0' with '7019'
c Var 'aux1715' order represents '1' with '7020'
-7019 7020 0
c Var 'aux1715' direct represents '1' with '7021'
7019 -7020 7021 0
-7021 7020 0
-7021 -7019 0
c Var 'aux1715' order represents '2' with '7022'
-7020 7022 0
c Var 'aux1715' direct represents '2' with '7023'
7020 -7022 7023 0
-7023 7022 0
-7023 -7020 0
c Var 'aux1715' order represents '3' with '7024'
-7022 7024 0
c Var 'aux1715' direct represents '3' with '7025'
7022 -7024 7025 0
-7025 7024 0
-7025 -7022 0
c Var 'aux1715' direct represents '4' with '-7024'
7019 7021 7023 7025 -7024 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '7026'
c Var 'aux1716' direct represents '0' with '7026'
c Var 'aux1716' order represents '1' with '7027'
-7026 7027 0
c Var 'aux1716' direct represents '1' with '7028'
7026 -7027 7028 0
-7028 7027 0
-7028 -7026 0
c Var 'aux1716' direct represents '2' with '-7027'
7026 7028 -7027 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '7029'
c Var 'aux1717' direct represents '0' with '7029'
c Var 'aux1717' order represents '1' with '7030'
-7029 7030 0
c Var 'aux1717' direct represents '1' with '7031'
7029 -7030 7031 0
-7031 7030 0
-7031 -7029 0
c Var 'aux1717' direct represents '2' with '-7030'
7029 7031 -7030 0
c Encoding variable: aux1718 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '7032'
c Var 'aux1718' direct represents '0' with '7032'
c Var 'aux1718' order represents '1' with '7033'
-7032 7033 0
c Var 'aux1718' direct represents '1' with '7034'
7032 -7033 7034 0
-7034 7033 0
-7034 -7032 0
c Var 'aux1718' direct represents '2' with '-7033'
7032 7034 -7033 0
c Encoding variable: aux1719 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '7035'
c Var 'aux1719' direct represents '0' with '7035'
c Var 'aux1719' order represents '1' with '7036'
-7035 7036 0
c Var 'aux1719' direct represents '1' with '7037'
7035 -7036 7037 0
-7037 7036 0
-7037 -7035 0
c Var 'aux1719' direct represents '2' with '-7036'
7035 7037 -7036 0
c Encoding variable: aux1720 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1719))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '7038'
c Var 'aux1720' direct represents '0' with '7038'
c Var 'aux1720' order represents '1' with '7039'
-7038 7039 0
c Var 'aux1720' direct represents '1' with '7040'
7038 -7039 7040 0
-7040 7039 0
-7040 -7038 0
c Var 'aux1720' order represents '2' with '7041'
-7039 7041 0
c Var 'aux1720' direct represents '2' with '7042'
7039 -7041 7042 0
-7042 7041 0
-7042 -7039 0
c Var 'aux1720' direct represents '3' with '-7041'
7038 7040 7042 -7041 0
c Encoding variable: aux1721 with domain: int(0..4) (representing constraint (aux1716 + aux1718))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '7043'
c Var 'aux1721' direct represents '0' with '7043'
c Var 'aux1721' order represents '1' with '7044'
-7043 7044 0
c Var 'aux1721' direct represents '1' with '7045'
7043 -7044 7045 0
-7045 7044 0
-7045 -7043 0
c Var 'aux1721' order represents '2' with '7046'
-7044 7046 0
c Var 'aux1721' direct represents '2' with '7047'
7044 -7046 7047 0
-7047 7046 0
-7047 -7044 0
c Var 'aux1721' order represents '3' with '7048'
-7046 7048 0
c Var 'aux1721' direct represents '3' with '7049'
7046 -7048 7049 0
-7049 7048 0
-7049 -7046 0
c Var 'aux1721' direct represents '4' with '-7048'
7043 7045 7047 7049 -7048 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '7050'
c Var 'aux1722' direct represents '0' with '7050'
c Var 'aux1722' order represents '1' with '7051'
-7050 7051 0
c Var 'aux1722' direct represents '1' with '7052'
7050 -7051 7052 0
-7052 7051 0
-7052 -7050 0
c Var 'aux1722' direct represents '2' with '-7051'
7050 7052 -7051 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '7053'
c Var 'aux1723' direct represents '0' with '7053'
c Var 'aux1723' order represents '1' with '7054'
-7053 7054 0
c Var 'aux1723' direct represents '1' with '7055'
7053 -7054 7055 0
-7055 7054 0
-7055 -7053 0
c Var 'aux1723' direct represents '2' with '-7054'
7053 7055 -7054 0
c Encoding variable: aux1724 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '7056'
c Var 'aux1724' direct represents '0' with '7056'
c Var 'aux1724' order represents '1' with '7057'
-7056 7057 0
c Var 'aux1724' direct represents '1' with '7058'
7056 -7057 7058 0
-7058 7057 0
-7058 -7056 0
c Var 'aux1724' direct represents '2' with '-7057'
7056 7058 -7057 0
c Encoding variable: aux1725 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '7059'
c Var 'aux1725' direct represents '0' with '7059'
c Var 'aux1725' order represents '1' with '7060'
-7059 7060 0
c Var 'aux1725' direct represents '1' with '7061'
7059 -7060 7061 0
-7061 7060 0
-7061 -7059 0
c Var 'aux1725' direct represents '2' with '-7060'
7059 7061 -7060 0
c Encoding variable: aux1726 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1725))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '7062'
c Var 'aux1726' direct represents '0' with '7062'
c Var 'aux1726' order represents '1' with '7063'
-7062 7063 0
c Var 'aux1726' direct represents '1' with '7064'
7062 -7063 7064 0
-7064 7063 0
-7064 -7062 0
c Var 'aux1726' order represents '2' with '7065'
-7063 7065 0
c Var 'aux1726' direct represents '2' with '7066'
7063 -7065 7066 0
-7066 7065 0
-7066 -7063 0
c Var 'aux1726' direct represents '3' with '-7065'
7062 7064 7066 -7065 0
c Encoding variable: aux1727 with domain: int(0..4) (representing constraint (aux1722 + aux1724))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '7067'
c Var 'aux1727' direct represents '0' with '7067'
c Var 'aux1727' order represents '1' with '7068'
-7067 7068 0
c Var 'aux1727' direct represents '1' with '7069'
7067 -7068 7069 0
-7069 7068 0
-7069 -7067 0
c Var 'aux1727' order represents '2' with '7070'
-7068 7070 0
c Var 'aux1727' direct represents '2' with '7071'
7068 -7070 7071 0
-7071 7070 0
-7071 -7068 0
c Var 'aux1727' order represents '3' with '7072'
-7070 7072 0
c Var 'aux1727' direct represents '3' with '7073'
7070 -7072 7073 0
-7073 7072 0
-7073 -7070 0
c Var 'aux1727' direct represents '4' with '-7072'
7067 7069 7071 7073 -7072 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '7074'
c Var 'aux1728' direct represents '0' with '7074'
c Var 'aux1728' order represents '1' with '7075'
-7074 7075 0
c Var 'aux1728' direct represents '1' with '7076'
7074 -7075 7076 0
-7076 7075 0
-7076 -7074 0
c Var 'aux1728' direct represents '2' with '-7075'
7074 7076 -7075 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '7077'
c Var 'aux1729' direct represents '0' with '7077'
c Var 'aux1729' order represents '1' with '7078'
-7077 7078 0
c Var 'aux1729' direct represents '1' with '7079'
7077 -7078 7079 0
-7079 7078 0
-7079 -7077 0
c Var 'aux1729' direct represents '2' with '-7078'
7077 7079 -7078 0
c Encoding variable: aux1730 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '7080'
c Var 'aux1730' direct represents '0' with '7080'
c Var 'aux1730' order represents '1' with '7081'
-7080 7081 0
c Var 'aux1730' direct represents '1' with '7082'
7080 -7081 7082 0
-7082 7081 0
-7082 -7080 0
c Var 'aux1730' direct represents '2' with '-7081'
7080 7082 -7081 0
c Encoding variable: aux1731 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '7083'
c Var 'aux1731' direct represents '0' with '7083'
c Var 'aux1731' order represents '1' with '7084'
-7083 7084 0
c Var 'aux1731' direct represents '1' with '7085'
7083 -7084 7085 0
-7085 7084 0
-7085 -7083 0
c Var 'aux1731' direct represents '2' with '-7084'
7083 7085 -7084 0
c Encoding variable: aux1732 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1731))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '7086'
c Var 'aux1732' direct represents '0' with '7086'
c Var 'aux1732' order represents '1' with '7087'
-7086 7087 0
c Var 'aux1732' direct represents '1' with '7088'
7086 -7087 7088 0
-7088 7087 0
-7088 -7086 0
c Var 'aux1732' order represents '2' with '7089'
-7087 7089 0
c Var 'aux1732' direct represents '2' with '7090'
7087 -7089 7090 0
-7090 7089 0
-7090 -7087 0
c Var 'aux1732' direct represents '3' with '-7089'
7086 7088 7090 -7089 0
c Encoding variable: aux1733 with domain: int(0..4) (representing constraint (aux1728 + aux1730))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '7091'
c Var 'aux1733' direct represents '0' with '7091'
c Var 'aux1733' order represents '1' with '7092'
-7091 7092 0
c Var 'aux1733' direct represents '1' with '7093'
7091 -7092 7093 0
-7093 7092 0
-7093 -7091 0
c Var 'aux1733' order represents '2' with '7094'
-7092 7094 0
c Var 'aux1733' direct represents '2' with '7095'
7092 -7094 7095 0
-7095 7094 0
-7095 -7092 0
c Var 'aux1733' order represents '3' with '7096'
-7094 7096 0
c Var 'aux1733' direct represents '3' with '7097'
7094 -7096 7097 0
-7097 7096 0
-7097 -7094 0
c Var 'aux1733' direct represents '4' with '-7096'
7091 7093 7095 7097 -7096 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '7098'
c Var 'aux1734' direct represents '0' with '7098'
c Var 'aux1734' order represents '1' with '7099'
-7098 7099 0
c Var 'aux1734' direct represents '1' with '7100'
7098 -7099 7100 0
-7100 7099 0
-7100 -7098 0
c Var 'aux1734' direct represents '2' with '-7099'
7098 7100 -7099 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '7101'
c Var 'aux1735' direct represents '0' with '7101'
c Var 'aux1735' order represents '1' with '7102'
-7101 7102 0
c Var 'aux1735' direct represents '1' with '7103'
7101 -7102 7103 0
-7103 7102 0
-7103 -7101 0
c Var 'aux1735' direct represents '2' with '-7102'
7101 7103 -7102 0
c Encoding variable: aux1736 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '7104'
c Var 'aux1736' direct represents '0' with '7104'
c Var 'aux1736' order represents '1' with '7105'
-7104 7105 0
c Var 'aux1736' direct represents '1' with '7106'
7104 -7105 7106 0
-7106 7105 0
-7106 -7104 0
c Var 'aux1736' direct represents '2' with '-7105'
7104 7106 -7105 0
c Encoding variable: aux1737 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '7107'
c Var 'aux1737' direct represents '0' with '7107'
c Var 'aux1737' order represents '1' with '7108'
-7107 7108 0
c Var 'aux1737' direct represents '1' with '7109'
7107 -7108 7109 0
-7109 7108 0
-7109 -7107 0
c Var 'aux1737' direct represents '2' with '-7108'
7107 7109 -7108 0
c Encoding variable: aux1738 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1737))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7110'
c Var 'aux1738' direct represents '0' with '7110'
c Var 'aux1738' order represents '1' with '7111'
-7110 7111 0
c Var 'aux1738' direct represents '1' with '7112'
7110 -7111 7112 0
-7112 7111 0
-7112 -7110 0
c Var 'aux1738' order represents '2' with '7113'
-7111 7113 0
c Var 'aux1738' direct represents '2' with '7114'
7111 -7113 7114 0
-7114 7113 0
-7114 -7111 0
c Var 'aux1738' direct represents '3' with '-7113'
7110 7112 7114 -7113 0
c Encoding variable: aux1739 with domain: int(0..4) (representing constraint (aux1734 + aux1736))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7115'
c Var 'aux1739' direct represents '0' with '7115'
c Var 'aux1739' order represents '1' with '7116'
-7115 7116 0
c Var 'aux1739' direct represents '1' with '7117'
7115 -7116 7117 0
-7117 7116 0
-7117 -7115 0
c Var 'aux1739' order represents '2' with '7118'
-7116 7118 0
c Var 'aux1739' direct represents '2' with '7119'
7116 -7118 7119 0
-7119 7118 0
-7119 -7116 0
c Var 'aux1739' order represents '3' with '7120'
-7118 7120 0
c Var 'aux1739' direct represents '3' with '7121'
7118 -7120 7121 0
-7121 7120 0
-7121 -7118 0
c Var 'aux1739' direct represents '4' with '-7120'
7115 7117 7119 7121 -7120 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7122'
c Var 'aux1740' direct represents '0' with '7122'
c Var 'aux1740' order represents '1' with '7123'
-7122 7123 0
c Var 'aux1740' direct represents '1' with '7124'
7122 -7123 7124 0
-7124 7123 0
-7124 -7122 0
c Var 'aux1740' direct represents '2' with '-7123'
7122 7124 -7123 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7125'
c Var 'aux1741' direct represents '0' with '7125'
c Var 'aux1741' order represents '1' with '7126'
-7125 7126 0
c Var 'aux1741' direct represents '1' with '7127'
7125 -7126 7127 0
-7127 7126 0
-7127 -7125 0
c Var 'aux1741' direct represents '2' with '-7126'
7125 7127 -7126 0
c Encoding variable: aux1742 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7128'
c Var 'aux1742' direct represents '0' with '7128'
c Var 'aux1742' order represents '1' with '7129'
-7128 7129 0
c Var 'aux1742' direct represents '1' with '7130'
7128 -7129 7130 0
-7130 7129 0
-7130 -7128 0
c Var 'aux1742' direct represents '2' with '-7129'
7128 7130 -7129 0
c Encoding variable: aux1743 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7131'
c Var 'aux1743' direct represents '0' with '7131'
c Var 'aux1743' order represents '1' with '7132'
-7131 7132 0
c Var 'aux1743' direct represents '1' with '7133'
7131 -7132 7133 0
-7133 7132 0
-7133 -7131 0
c Var 'aux1743' direct represents '2' with '-7132'
7131 7133 -7132 0
c Encoding variable: aux1744 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1743))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7134'
c Var 'aux1744' direct represents '0' with '7134'
c Var 'aux1744' order represents '1' with '7135'
-7134 7135 0
c Var 'aux1744' direct represents '1' with '7136'
7134 -7135 7136 0
-7136 7135 0
-7136 -7134 0
c Var 'aux1744' order represents '2' with '7137'
-7135 7137 0
c Var 'aux1744' direct represents '2' with '7138'
7135 -7137 7138 0
-7138 7137 0
-7138 -7135 0
c Var 'aux1744' direct represents '3' with '-7137'
7134 7136 7138 -7137 0
c Encoding variable: aux1745 with domain: int(0..4) (representing constraint (aux1740 + aux1742))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7139'
c Var 'aux1745' direct represents '0' with '7139'
c Var 'aux1745' order represents '1' with '7140'
-7139 7140 0
c Var 'aux1745' direct represents '1' with '7141'
7139 -7140 7141 0
-7141 7140 0
-7141 -7139 0
c Var 'aux1745' order represents '2' with '7142'
-7140 7142 0
c Var 'aux1745' direct represents '2' with '7143'
7140 -7142 7143 0
-7143 7142 0
-7143 -7140 0
c Var 'aux1745' order represents '3' with '7144'
-7142 7144 0
c Var 'aux1745' direct represents '3' with '7145'
7142 -7144 7145 0
-7145 7144 0
-7145 -7142 0
c Var 'aux1745' direct represents '4' with '-7144'
7139 7141 7143 7145 -7144 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7146'
c Var 'aux1746' direct represents '0' with '7146'
c Var 'aux1746' order represents '1' with '7147'
-7146 7147 0
c Var 'aux1746' direct represents '1' with '7148'
7146 -7147 7148 0
-7148 7147 0
-7148 -7146 0
c Var 'aux1746' direct represents '2' with '-7147'
7146 7148 -7147 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7149'
c Var 'aux1747' direct represents '0' with '7149'
c Var 'aux1747' order represents '1' with '7150'
-7149 7150 0
c Var 'aux1747' direct represents '1' with '7151'
7149 -7150 7151 0
-7151 7150 0
-7151 -7149 0
c Var 'aux1747' direct represents '2' with '-7150'
7149 7151 -7150 0
c Encoding variable: aux1748 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7152'
c Var 'aux1748' direct represents '0' with '7152'
c Var 'aux1748' order represents '1' with '7153'
-7152 7153 0
c Var 'aux1748' direct represents '1' with '7154'
7152 -7153 7154 0
-7154 7153 0
-7154 -7152 0
c Var 'aux1748' direct represents '2' with '-7153'
7152 7154 -7153 0
c Encoding variable: aux1749 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7155'
c Var 'aux1749' direct represents '0' with '7155'
c Var 'aux1749' order represents '1' with '7156'
-7155 7156 0
c Var 'aux1749' direct represents '1' with '7157'
7155 -7156 7157 0
-7157 7156 0
-7157 -7155 0
c Var 'aux1749' direct represents '2' with '-7156'
7155 7157 -7156 0
c Encoding variable: aux1750 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1749))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7158'
c Var 'aux1750' direct represents '0' with '7158'
c Var 'aux1750' order represents '1' with '7159'
-7158 7159 0
c Var 'aux1750' direct represents '1' with '7160'
7158 -7159 7160 0
-7160 7159 0
-7160 -7158 0
c Var 'aux1750' order represents '2' with '7161'
-7159 7161 0
c Var 'aux1750' direct represents '2' with '7162'
7159 -7161 7162 0
-7162 7161 0
-7162 -7159 0
c Var 'aux1750' direct represents '3' with '-7161'
7158 7160 7162 -7161 0
c Encoding variable: aux1751 with domain: int(0..4) (representing constraint (aux1746 + aux1748))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7163'
c Var 'aux1751' direct represents '0' with '7163'
c Var 'aux1751' order represents '1' with '7164'
-7163 7164 0
c Var 'aux1751' direct represents '1' with '7165'
7163 -7164 7165 0
-7165 7164 0
-7165 -7163 0
c Var 'aux1751' order represents '2' with '7166'
-7164 7166 0
c Var 'aux1751' direct represents '2' with '7167'
7164 -7166 7167 0
-7167 7166 0
-7167 -7164 0
c Var 'aux1751' order represents '3' with '7168'
-7166 7168 0
c Var 'aux1751' direct represents '3' with '7169'
7166 -7168 7169 0
-7169 7168 0
-7169 -7166 0
c Var 'aux1751' direct represents '4' with '-7168'
7163 7165 7167 7169 -7168 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7170'
c Var 'aux1752' direct represents '0' with '7170'
c Var 'aux1752' order represents '1' with '7171'
-7170 7171 0
c Var 'aux1752' direct represents '1' with '7172'
7170 -7171 7172 0
-7172 7171 0
-7172 -7170 0
c Var 'aux1752' direct represents '2' with '-7171'
7170 7172 -7171 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7173'
c Var 'aux1753' direct represents '0' with '7173'
c Var 'aux1753' order represents '1' with '7174'
-7173 7174 0
c Var 'aux1753' direct represents '1' with '7175'
7173 -7174 7175 0
-7175 7174 0
-7175 -7173 0
c Var 'aux1753' direct represents '2' with '-7174'
7173 7175 -7174 0
c Encoding variable: aux1754 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7176'
c Var 'aux1754' direct represents '0' with '7176'
c Var 'aux1754' order represents '1' with '7177'
-7176 7177 0
c Var 'aux1754' direct represents '1' with '7178'
7176 -7177 7178 0
-7178 7177 0
-7178 -7176 0
c Var 'aux1754' direct represents '2' with '-7177'
7176 7178 -7177 0
c Encoding variable: aux1755 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7179'
c Var 'aux1755' direct represents '0' with '7179'
c Var 'aux1755' order represents '1' with '7180'
-7179 7180 0
c Var 'aux1755' direct represents '1' with '7181'
7179 -7180 7181 0
-7181 7180 0
-7181 -7179 0
c Var 'aux1755' direct represents '2' with '-7180'
7179 7181 -7180 0
c Encoding variable: aux1756 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1755))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7182'
c Var 'aux1756' direct represents '0' with '7182'
c Var 'aux1756' order represents '1' with '7183'
-7182 7183 0
c Var 'aux1756' direct represents '1' with '7184'
7182 -7183 7184 0
-7184 7183 0
-7184 -7182 0
c Var 'aux1756' order represents '2' with '7185'
-7183 7185 0
c Var 'aux1756' direct represents '2' with '7186'
7183 -7185 7186 0
-7186 7185 0
-7186 -7183 0
c Var 'aux1756' direct represents '3' with '-7185'
7182 7184 7186 -7185 0
c Encoding variable: aux1757 with domain: int(0..4) (representing constraint (aux1752 + aux1754))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7187'
c Var 'aux1757' direct represents '0' with '7187'
c Var 'aux1757' order represents '1' with '7188'
-7187 7188 0
c Var 'aux1757' direct represents '1' with '7189'
7187 -7188 7189 0
-7189 7188 0
-7189 -7187 0
c Var 'aux1757' order represents '2' with '7190'
-7188 7190 0
c Var 'aux1757' direct represents '2' with '7191'
7188 -7190 7191 0
-7191 7190 0
-7191 -7188 0
c Var 'aux1757' order represents '3' with '7192'
-7190 7192 0
c Var 'aux1757' direct represents '3' with '7193'
7190 -7192 7193 0
-7193 7192 0
-7193 -7190 0
c Var 'aux1757' direct represents '4' with '-7192'
7187 7189 7191 7193 -7192 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7194'
c Var 'aux1758' direct represents '0' with '7194'
c Var 'aux1758' order represents '1' with '7195'
-7194 7195 0
c Var 'aux1758' direct represents '1' with '7196'
7194 -7195 7196 0
-7196 7195 0
-7196 -7194 0
c Var 'aux1758' direct represents '2' with '-7195'
7194 7196 -7195 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7197'
c Var 'aux1759' direct represents '0' with '7197'
c Var 'aux1759' order represents '1' with '7198'
-7197 7198 0
c Var 'aux1759' direct represents '1' with '7199'
7197 -7198 7199 0
-7199 7198 0
-7199 -7197 0
c Var 'aux1759' direct represents '2' with '-7198'
7197 7199 -7198 0
c Encoding variable: aux1760 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7200'
c Var 'aux1760' direct represents '0' with '7200'
c Var 'aux1760' order represents '1' with '7201'
-7200 7201 0
c Var 'aux1760' direct represents '1' with '7202'
7200 -7201 7202 0
-7202 7201 0
-7202 -7200 0
c Var 'aux1760' direct represents '2' with '-7201'
7200 7202 -7201 0
c Encoding variable: aux1761 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7203'
c Var 'aux1761' direct represents '0' with '7203'
c Var 'aux1761' order represents '1' with '7204'
-7203 7204 0
c Var 'aux1761' direct represents '1' with '7205'
7203 -7204 7205 0
-7205 7204 0
-7205 -7203 0
c Var 'aux1761' direct represents '2' with '-7204'
7203 7205 -7204 0
c Encoding variable: aux1762 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1761))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7206'
c Var 'aux1762' direct represents '0' with '7206'
c Var 'aux1762' order represents '1' with '7207'
-7206 7207 0
c Var 'aux1762' direct represents '1' with '7208'
7206 -7207 7208 0
-7208 7207 0
-7208 -7206 0
c Var 'aux1762' order represents '2' with '7209'
-7207 7209 0
c Var 'aux1762' direct represents '2' with '7210'
7207 -7209 7210 0
-7210 7209 0
-7210 -7207 0
c Var 'aux1762' direct represents '3' with '-7209'
7206 7208 7210 -7209 0
c Encoding variable: aux1763 with domain: int(0..4) (representing constraint (aux1758 + aux1760))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7211'
c Var 'aux1763' direct represents '0' with '7211'
c Var 'aux1763' order represents '1' with '7212'
-7211 7212 0
c Var 'aux1763' direct represents '1' with '7213'
7211 -7212 7213 0
-7213 7212 0
-7213 -7211 0
c Var 'aux1763' order represents '2' with '7214'
-7212 7214 0
c Var 'aux1763' direct represents '2' with '7215'
7212 -7214 7215 0
-7215 7214 0
-7215 -7212 0
c Var 'aux1763' order represents '3' with '7216'
-7214 7216 0
c Var 'aux1763' direct represents '3' with '7217'
7214 -7216 7217 0
-7217 7216 0
-7217 -7214 0
c Var 'aux1763' direct represents '4' with '-7216'
7211 7213 7215 7217 -7216 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7218'
c Var 'aux1764' direct represents '0' with '7218'
c Var 'aux1764' order represents '1' with '7219'
-7218 7219 0
c Var 'aux1764' direct represents '1' with '7220'
7218 -7219 7220 0
-7220 7219 0
-7220 -7218 0
c Var 'aux1764' direct represents '2' with '-7219'
7218 7220 -7219 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7221'
c Var 'aux1765' direct represents '0' with '7221'
c Var 'aux1765' order represents '1' with '7222'
-7221 7222 0
c Var 'aux1765' direct represents '1' with '7223'
7221 -7222 7223 0
-7223 7222 0
-7223 -7221 0
c Var 'aux1765' direct represents '2' with '-7222'
7221 7223 -7222 0
c Encoding variable: aux1766 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7224'
c Var 'aux1766' direct represents '0' with '7224'
c Var 'aux1766' order represents '1' with '7225'
-7224 7225 0
c Var 'aux1766' direct represents '1' with '7226'
7224 -7225 7226 0
-7226 7225 0
-7226 -7224 0
c Var 'aux1766' direct represents '2' with '-7225'
7224 7226 -7225 0
c Encoding variable: aux1767 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7227'
c Var 'aux1767' direct represents '0' with '7227'
c Var 'aux1767' order represents '1' with '7228'
-7227 7228 0
c Var 'aux1767' direct represents '1' with '7229'
7227 -7228 7229 0
-7229 7228 0
-7229 -7227 0
c Var 'aux1767' direct represents '2' with '-7228'
7227 7229 -7228 0
c Encoding variable: aux1768 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1767))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7230'
c Var 'aux1768' direct represents '0' with '7230'
c Var 'aux1768' order represents '1' with '7231'
-7230 7231 0
c Var 'aux1768' direct represents '1' with '7232'
7230 -7231 7232 0
-7232 7231 0
-7232 -7230 0
c Var 'aux1768' order represents '2' with '7233'
-7231 7233 0
c Var 'aux1768' direct represents '2' with '7234'
7231 -7233 7234 0
-7234 7233 0
-7234 -7231 0
c Var 'aux1768' direct represents '3' with '-7233'
7230 7232 7234 -7233 0
c Encoding variable: aux1769 with domain: int(0..4) (representing constraint (aux1764 + aux1766))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7235'
c Var 'aux1769' direct represents '0' with '7235'
c Var 'aux1769' order represents '1' with '7236'
-7235 7236 0
c Var 'aux1769' direct represents '1' with '7237'
7235 -7236 7237 0
-7237 7236 0
-7237 -7235 0
c Var 'aux1769' order represents '2' with '7238'
-7236 7238 0
c Var 'aux1769' direct represents '2' with '7239'
7236 -7238 7239 0
-7239 7238 0
-7239 -7236 0
c Var 'aux1769' order represents '3' with '7240'
-7238 7240 0
c Var 'aux1769' direct represents '3' with '7241'
7238 -7240 7241 0
-7241 7240 0
-7241 -7238 0
c Var 'aux1769' direct represents '4' with '-7240'
7235 7237 7239 7241 -7240 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7242'
c Var 'aux1770' direct represents '0' with '7242'
c Var 'aux1770' order represents '1' with '7243'
-7242 7243 0
c Var 'aux1770' direct represents '1' with '7244'
7242 -7243 7244 0
-7244 7243 0
-7244 -7242 0
c Var 'aux1770' direct represents '2' with '-7243'
7242 7244 -7243 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7245'
c Var 'aux1771' direct represents '0' with '7245'
c Var 'aux1771' order represents '1' with '7246'
-7245 7246 0
c Var 'aux1771' direct represents '1' with '7247'
7245 -7246 7247 0
-7247 7246 0
-7247 -7245 0
c Var 'aux1771' direct represents '2' with '-7246'
7245 7247 -7246 0
c Encoding variable: aux1772 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7248'
c Var 'aux1772' direct represents '0' with '7248'
c Var 'aux1772' order represents '1' with '7249'
-7248 7249 0
c Var 'aux1772' direct represents '1' with '7250'
7248 -7249 7250 0
-7250 7249 0
-7250 -7248 0
c Var 'aux1772' direct represents '2' with '-7249'
7248 7250 -7249 0
c Encoding variable: aux1773 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7251'
c Var 'aux1773' direct represents '0' with '7251'
c Var 'aux1773' order represents '1' with '7252'
-7251 7252 0
c Var 'aux1773' direct represents '1' with '7253'
7251 -7252 7253 0
-7253 7252 0
-7253 -7251 0
c Var 'aux1773' direct represents '2' with '-7252'
7251 7253 -7252 0
c Encoding variable: aux1774 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1773))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7254'
c Var 'aux1774' direct represents '0' with '7254'
c Var 'aux1774' order represents '1' with '7255'
-7254 7255 0
c Var 'aux1774' direct represents '1' with '7256'
7254 -7255 7256 0
-7256 7255 0
-7256 -7254 0
c Var 'aux1774' order represents '2' with '7257'
-7255 7257 0
c Var 'aux1774' direct represents '2' with '7258'
7255 -7257 7258 0
-7258 7257 0
-7258 -7255 0
c Var 'aux1774' direct represents '3' with '-7257'
7254 7256 7258 -7257 0
c Encoding variable: aux1775 with domain: int(0..4) (representing constraint (aux1770 + aux1772))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7259'
c Var 'aux1775' direct represents '0' with '7259'
c Var 'aux1775' order represents '1' with '7260'
-7259 7260 0
c Var 'aux1775' direct represents '1' with '7261'
7259 -7260 7261 0
-7261 7260 0
-7261 -7259 0
c Var 'aux1775' order represents '2' with '7262'
-7260 7262 0
c Var 'aux1775' direct represents '2' with '7263'
7260 -7262 7263 0
-7263 7262 0
-7263 -7260 0
c Var 'aux1775' order represents '3' with '7264'
-7262 7264 0
c Var 'aux1775' direct represents '3' with '7265'
7262 -7264 7265 0
-7265 7264 0
-7265 -7262 0
c Var 'aux1775' direct represents '4' with '-7264'
7259 7261 7263 7265 -7264 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7266'
c Var 'aux1776' direct represents '0' with '7266'
c Var 'aux1776' order represents '1' with '7267'
-7266 7267 0
c Var 'aux1776' direct represents '1' with '7268'
7266 -7267 7268 0
-7268 7267 0
-7268 -7266 0
c Var 'aux1776' direct represents '2' with '-7267'
7266 7268 -7267 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7269'
c Var 'aux1777' direct represents '0' with '7269'
c Var 'aux1777' order represents '1' with '7270'
-7269 7270 0
c Var 'aux1777' direct represents '1' with '7271'
7269 -7270 7271 0
-7271 7270 0
-7271 -7269 0
c Var 'aux1777' direct represents '2' with '-7270'
7269 7271 -7270 0
c Encoding variable: aux1778 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7272'
c Var 'aux1778' direct represents '0' with '7272'
c Var 'aux1778' order represents '1' with '7273'
-7272 7273 0
c Var 'aux1778' direct represents '1' with '7274'
7272 -7273 7274 0
-7274 7273 0
-7274 -7272 0
c Var 'aux1778' direct represents '2' with '-7273'
7272 7274 -7273 0
c Encoding variable: aux1779 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7275'
c Var 'aux1779' direct represents '0' with '7275'
c Var 'aux1779' order represents '1' with '7276'
-7275 7276 0
c Var 'aux1779' direct represents '1' with '7277'
7275 -7276 7277 0
-7277 7276 0
-7277 -7275 0
c Var 'aux1779' direct represents '2' with '-7276'
7275 7277 -7276 0
c Encoding variable: aux1780 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1779))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7278'
c Var 'aux1780' direct represents '0' with '7278'
c Var 'aux1780' order represents '1' with '7279'
-7278 7279 0
c Var 'aux1780' direct represents '1' with '7280'
7278 -7279 7280 0
-7280 7279 0
-7280 -7278 0
c Var 'aux1780' order represents '2' with '7281'
-7279 7281 0
c Var 'aux1780' direct represents '2' with '7282'
7279 -7281 7282 0
-7282 7281 0
-7282 -7279 0
c Var 'aux1780' direct represents '3' with '-7281'
7278 7280 7282 -7281 0
c Encoding variable: aux1781 with domain: int(0..4) (representing constraint (aux1776 + aux1778))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7283'
c Var 'aux1781' direct represents '0' with '7283'
c Var 'aux1781' order represents '1' with '7284'
-7283 7284 0
c Var 'aux1781' direct represents '1' with '7285'
7283 -7284 7285 0
-7285 7284 0
-7285 -7283 0
c Var 'aux1781' order represents '2' with '7286'
-7284 7286 0
c Var 'aux1781' direct represents '2' with '7287'
7284 -7286 7287 0
-7287 7286 0
-7287 -7284 0
c Var 'aux1781' order represents '3' with '7288'
-7286 7288 0
c Var 'aux1781' direct represents '3' with '7289'
7286 -7288 7289 0
-7289 7288 0
-7289 -7286 0
c Var 'aux1781' direct represents '4' with '-7288'
7283 7285 7287 7289 -7288 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7290'
c Var 'aux1782' direct represents '0' with '7290'
c Var 'aux1782' order represents '1' with '7291'
-7290 7291 0
c Var 'aux1782' direct represents '1' with '7292'
7290 -7291 7292 0
-7292 7291 0
-7292 -7290 0
c Var 'aux1782' direct represents '2' with '-7291'
7290 7292 -7291 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7293'
c Var 'aux1783' direct represents '0' with '7293'
c Var 'aux1783' order represents '1' with '7294'
-7293 7294 0
c Var 'aux1783' direct represents '1' with '7295'
7293 -7294 7295 0
-7295 7294 0
-7295 -7293 0
c Var 'aux1783' direct represents '2' with '-7294'
7293 7295 -7294 0
c Encoding variable: aux1784 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7296'
c Var 'aux1784' direct represents '0' with '7296'
c Var 'aux1784' order represents '1' with '7297'
-7296 7297 0
c Var 'aux1784' direct represents '1' with '7298'
7296 -7297 7298 0
-7298 7297 0
-7298 -7296 0
c Var 'aux1784' direct represents '2' with '-7297'
7296 7298 -7297 0
c Encoding variable: aux1785 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7299'
c Var 'aux1785' direct represents '0' with '7299'
c Var 'aux1785' order represents '1' with '7300'
-7299 7300 0
c Var 'aux1785' direct represents '1' with '7301'
7299 -7300 7301 0
-7301 7300 0
-7301 -7299 0
c Var 'aux1785' direct represents '2' with '-7300'
7299 7301 -7300 0
c Encoding variable: aux1786 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1785))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7302'
c Var 'aux1786' direct represents '0' with '7302'
c Var 'aux1786' order represents '1' with '7303'
-7302 7303 0
c Var 'aux1786' direct represents '1' with '7304'
7302 -7303 7304 0
-7304 7303 0
-7304 -7302 0
c Var 'aux1786' order represents '2' with '7305'
-7303 7305 0
c Var 'aux1786' direct represents '2' with '7306'
7303 -7305 7306 0
-7306 7305 0
-7306 -7303 0
c Var 'aux1786' direct represents '3' with '-7305'
7302 7304 7306 -7305 0
c Encoding variable: aux1787 with domain: int(0..4) (representing constraint (aux1782 + aux1784))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7307'
c Var 'aux1787' direct represents '0' with '7307'
c Var 'aux1787' order represents '1' with '7308'
-7307 7308 0
c Var 'aux1787' direct represents '1' with '7309'
7307 -7308 7309 0
-7309 7308 0
-7309 -7307 0
c Var 'aux1787' order represents '2' with '7310'
-7308 7310 0
c Var 'aux1787' direct represents '2' with '7311'
7308 -7310 7311 0
-7311 7310 0
-7311 -7308 0
c Var 'aux1787' order represents '3' with '7312'
-7310 7312 0
c Var 'aux1787' direct represents '3' with '7313'
7310 -7312 7313 0
-7313 7312 0
-7313 -7310 0
c Var 'aux1787' direct represents '4' with '-7312'
7307 7309 7311 7313 -7312 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7314'
c Var 'aux1788' direct represents '0' with '7314'
c Var 'aux1788' order represents '1' with '7315'
-7314 7315 0
c Var 'aux1788' direct represents '1' with '7316'
7314 -7315 7316 0
-7316 7315 0
-7316 -7314 0
c Var 'aux1788' direct represents '2' with '-7315'
7314 7316 -7315 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7317'
c Var 'aux1789' direct represents '0' with '7317'
c Var 'aux1789' order represents '1' with '7318'
-7317 7318 0
c Var 'aux1789' direct represents '1' with '7319'
7317 -7318 7319 0
-7319 7318 0
-7319 -7317 0
c Var 'aux1789' direct represents '2' with '-7318'
7317 7319 -7318 0
c Encoding variable: aux1790 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7320'
c Var 'aux1790' direct represents '0' with '7320'
c Var 'aux1790' order represents '1' with '7321'
-7320 7321 0
c Var 'aux1790' direct represents '1' with '7322'
7320 -7321 7322 0
-7322 7321 0
-7322 -7320 0
c Var 'aux1790' direct represents '2' with '-7321'
7320 7322 -7321 0
c Encoding variable: aux1791 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7323'
c Var 'aux1791' direct represents '0' with '7323'
c Var 'aux1791' order represents '1' with '7324'
-7323 7324 0
c Var 'aux1791' direct represents '1' with '7325'
7323 -7324 7325 0
-7325 7324 0
-7325 -7323 0
c Var 'aux1791' direct represents '2' with '-7324'
7323 7325 -7324 0
c Encoding variable: aux1792 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1791))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7326'
c Var 'aux1792' direct represents '0' with '7326'
c Var 'aux1792' order represents '1' with '7327'
-7326 7327 0
c Var 'aux1792' direct represents '1' with '7328'
7326 -7327 7328 0
-7328 7327 0
-7328 -7326 0
c Var 'aux1792' order represents '2' with '7329'
-7327 7329 0
c Var 'aux1792' direct represents '2' with '7330'
7327 -7329 7330 0
-7330 7329 0
-7330 -7327 0
c Var 'aux1792' direct represents '3' with '-7329'
7326 7328 7330 -7329 0
c Encoding variable: aux1793 with domain: int(0..4) (representing constraint (aux1788 + aux1790))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7331'
c Var 'aux1793' direct represents '0' with '7331'
c Var 'aux1793' order represents '1' with '7332'
-7331 7332 0
c Var 'aux1793' direct represents '1' with '7333'
7331 -7332 7333 0
-7333 7332 0
-7333 -7331 0
c Var 'aux1793' order represents '2' with '7334'
-7332 7334 0
c Var 'aux1793' direct represents '2' with '7335'
7332 -7334 7335 0
-7335 7334 0
-7335 -7332 0
c Var 'aux1793' order represents '3' with '7336'
-7334 7336 0
c Var 'aux1793' direct represents '3' with '7337'
7334 -7336 7337 0
-7337 7336 0
-7337 -7334 0
c Var 'aux1793' direct represents '4' with '-7336'
7331 7333 7335 7337 -7336 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7338'
c Var 'aux1794' direct represents '0' with '7338'
c Var 'aux1794' order represents '1' with '7339'
-7338 7339 0
c Var 'aux1794' direct represents '1' with '7340'
7338 -7339 7340 0
-7340 7339 0
-7340 -7338 0
c Var 'aux1794' direct represents '2' with '-7339'
7338 7340 -7339 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7341'
c Var 'aux1795' direct represents '0' with '7341'
c Var 'aux1795' order represents '1' with '7342'
-7341 7342 0
c Var 'aux1795' direct represents '1' with '7343'
7341 -7342 7343 0
-7343 7342 0
-7343 -7341 0
c Var 'aux1795' direct represents '2' with '-7342'
7341 7343 -7342 0
c Encoding variable: aux1796 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7344'
c Var 'aux1796' direct represents '0' with '7344'
c Var 'aux1796' order represents '1' with '7345'
-7344 7345 0
c Var 'aux1796' direct represents '1' with '7346'
7344 -7345 7346 0
-7346 7345 0
-7346 -7344 0
c Var 'aux1796' direct represents '2' with '-7345'
7344 7346 -7345 0
c Encoding variable: aux1797 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7347'
c Var 'aux1797' direct represents '0' with '7347'
c Var 'aux1797' order represents '1' with '7348'
-7347 7348 0
c Var 'aux1797' direct represents '1' with '7349'
7347 -7348 7349 0
-7349 7348 0
-7349 -7347 0
c Var 'aux1797' direct represents '2' with '-7348'
7347 7349 -7348 0
c Encoding variable: aux1798 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1797))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7350'
c Var 'aux1798' direct represents '0' with '7350'
c Var 'aux1798' order represents '1' with '7351'
-7350 7351 0
c Var 'aux1798' direct represents '1' with '7352'
7350 -7351 7352 0
-7352 7351 0
-7352 -7350 0
c Var 'aux1798' order represents '2' with '7353'
-7351 7353 0
c Var 'aux1798' direct represents '2' with '7354'
7351 -7353 7354 0
-7354 7353 0
-7354 -7351 0
c Var 'aux1798' direct represents '3' with '-7353'
7350 7352 7354 -7353 0
c Encoding variable: aux1799 with domain: int(0..4) (representing constraint (aux1794 + aux1796))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7355'
c Var 'aux1799' direct represents '0' with '7355'
c Var 'aux1799' order represents '1' with '7356'
-7355 7356 0
c Var 'aux1799' direct represents '1' with '7357'
7355 -7356 7357 0
-7357 7356 0
-7357 -7355 0
c Var 'aux1799' order represents '2' with '7358'
-7356 7358 0
c Var 'aux1799' direct represents '2' with '7359'
7356 -7358 7359 0
-7359 7358 0
-7359 -7356 0
c Var 'aux1799' order represents '3' with '7360'
-7358 7360 0
c Var 'aux1799' direct represents '3' with '7361'
7358 -7360 7361 0
-7361 7360 0
-7361 -7358 0
c Var 'aux1799' direct represents '4' with '-7360'
7355 7357 7359 7361 -7360 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7362'
c Var 'aux1800' direct represents '0' with '7362'
c Var 'aux1800' order represents '1' with '7363'
-7362 7363 0
c Var 'aux1800' direct represents '1' with '7364'
7362 -7363 7364 0
-7364 7363 0
-7364 -7362 0
c Var 'aux1800' direct represents '2' with '-7363'
7362 7364 -7363 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7365'
c Var 'aux1801' direct represents '0' with '7365'
c Var 'aux1801' order represents '1' with '7366'
-7365 7366 0
c Var 'aux1801' direct represents '1' with '7367'
7365 -7366 7367 0
-7367 7366 0
-7367 -7365 0
c Var 'aux1801' direct represents '2' with '-7366'
7365 7367 -7366 0
c Encoding variable: aux1802 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7368'
c Var 'aux1802' direct represents '0' with '7368'
c Var 'aux1802' order represents '1' with '7369'
-7368 7369 0
c Var 'aux1802' direct represents '1' with '7370'
7368 -7369 7370 0
-7370 7369 0
-7370 -7368 0
c Var 'aux1802' direct represents '2' with '-7369'
7368 7370 -7369 0
c Encoding variable: aux1803 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7371'
c Var 'aux1803' direct represents '0' with '7371'
c Var 'aux1803' order represents '1' with '7372'
-7371 7372 0
c Var 'aux1803' direct represents '1' with '7373'
7371 -7372 7373 0
-7373 7372 0
-7373 -7371 0
c Var 'aux1803' direct represents '2' with '-7372'
7371 7373 -7372 0
c Encoding variable: aux1804 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1803))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7374'
c Var 'aux1804' direct represents '0' with '7374'
c Var 'aux1804' order represents '1' with '7375'
-7374 7375 0
c Var 'aux1804' direct represents '1' with '7376'
7374 -7375 7376 0
-7376 7375 0
-7376 -7374 0
c Var 'aux1804' order represents '2' with '7377'
-7375 7377 0
c Var 'aux1804' direct represents '2' with '7378'
7375 -7377 7378 0
-7378 7377 0
-7378 -7375 0
c Var 'aux1804' direct represents '3' with '-7377'
7374 7376 7378 -7377 0
c Encoding variable: aux1805 with domain: int(0..4) (representing constraint (aux1800 + aux1802))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7379'
c Var 'aux1805' direct represents '0' with '7379'
c Var 'aux1805' order represents '1' with '7380'
-7379 7380 0
c Var 'aux1805' direct represents '1' with '7381'
7379 -7380 7381 0
-7381 7380 0
-7381 -7379 0
c Var 'aux1805' order represents '2' with '7382'
-7380 7382 0
c Var 'aux1805' direct represents '2' with '7383'
7380 -7382 7383 0
-7383 7382 0
-7383 -7380 0
c Var 'aux1805' order represents '3' with '7384'
-7382 7384 0
c Var 'aux1805' direct represents '3' with '7385'
7382 -7384 7385 0
-7385 7384 0
-7385 -7382 0
c Var 'aux1805' direct represents '4' with '-7384'
7379 7381 7383 7385 -7384 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7386'
c Var 'aux1806' direct represents '0' with '7386'
c Var 'aux1806' order represents '1' with '7387'
-7386 7387 0
c Var 'aux1806' direct represents '1' with '7388'
7386 -7387 7388 0
-7388 7387 0
-7388 -7386 0
c Var 'aux1806' direct represents '2' with '-7387'
7386 7388 -7387 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7389'
c Var 'aux1807' direct represents '0' with '7389'
c Var 'aux1807' order represents '1' with '7390'
-7389 7390 0
c Var 'aux1807' direct represents '1' with '7391'
7389 -7390 7391 0
-7391 7390 0
-7391 -7389 0
c Var 'aux1807' direct represents '2' with '-7390'
7389 7391 -7390 0
c Encoding variable: aux1808 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7392'
c Var 'aux1808' direct represents '0' with '7392'
c Var 'aux1808' order represents '1' with '7393'
-7392 7393 0
c Var 'aux1808' direct represents '1' with '7394'
7392 -7393 7394 0
-7394 7393 0
-7394 -7392 0
c Var 'aux1808' direct represents '2' with '-7393'
7392 7394 -7393 0
c Encoding variable: aux1809 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7395'
c Var 'aux1809' direct represents '0' with '7395'
c Var 'aux1809' order represents '1' with '7396'
-7395 7396 0
c Var 'aux1809' direct represents '1' with '7397'
7395 -7396 7397 0
-7397 7396 0
-7397 -7395 0
c Var 'aux1809' direct represents '2' with '-7396'
7395 7397 -7396 0
c Encoding variable: aux1810 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1809))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7398'
c Var 'aux1810' direct represents '0' with '7398'
c Var 'aux1810' order represents '1' with '7399'
-7398 7399 0
c Var 'aux1810' direct represents '1' with '7400'
7398 -7399 7400 0
-7400 7399 0
-7400 -7398 0
c Var 'aux1810' order represents '2' with '7401'
-7399 7401 0
c Var 'aux1810' direct represents '2' with '7402'
7399 -7401 7402 0
-7402 7401 0
-7402 -7399 0
c Var 'aux1810' direct represents '3' with '-7401'
7398 7400 7402 -7401 0
c Encoding variable: aux1811 with domain: int(0..4) (representing constraint (aux1806 + aux1808))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7403'
c Var 'aux1811' direct represents '0' with '7403'
c Var 'aux1811' order represents '1' with '7404'
-7403 7404 0
c Var 'aux1811' direct represents '1' with '7405'
7403 -7404 7405 0
-7405 7404 0
-7405 -7403 0
c Var 'aux1811' order represents '2' with '7406'
-7404 7406 0
c Var 'aux1811' direct represents '2' with '7407'
7404 -7406 7407 0
-7407 7406 0
-7407 -7404 0
c Var 'aux1811' order represents '3' with '7408'
-7406 7408 0
c Var 'aux1811' direct represents '3' with '7409'
7406 -7408 7409 0
-7409 7408 0
-7409 -7406 0
c Var 'aux1811' direct represents '4' with '-7408'
7403 7405 7407 7409 -7408 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7410'
c Var 'aux1812' direct represents '0' with '7410'
c Var 'aux1812' order represents '1' with '7411'
-7410 7411 0
c Var 'aux1812' direct represents '1' with '7412'
7410 -7411 7412 0
-7412 7411 0
-7412 -7410 0
c Var 'aux1812' direct represents '2' with '-7411'
7410 7412 -7411 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7413'
c Var 'aux1813' direct represents '0' with '7413'
c Var 'aux1813' order represents '1' with '7414'
-7413 7414 0
c Var 'aux1813' direct represents '1' with '7415'
7413 -7414 7415 0
-7415 7414 0
-7415 -7413 0
c Var 'aux1813' direct represents '2' with '-7414'
7413 7415 -7414 0
c Encoding variable: aux1814 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7416'
c Var 'aux1814' direct represents '0' with '7416'
c Var 'aux1814' order represents '1' with '7417'
-7416 7417 0
c Var 'aux1814' direct represents '1' with '7418'
7416 -7417 7418 0
-7418 7417 0
-7418 -7416 0
c Var 'aux1814' direct represents '2' with '-7417'
7416 7418 -7417 0
c Encoding variable: aux1815 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7419'
c Var 'aux1815' direct represents '0' with '7419'
c Var 'aux1815' order represents '1' with '7420'
-7419 7420 0
c Var 'aux1815' direct represents '1' with '7421'
7419 -7420 7421 0
-7421 7420 0
-7421 -7419 0
c Var 'aux1815' direct represents '2' with '-7420'
7419 7421 -7420 0
c Encoding variable: aux1816 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1815))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7422'
c Var 'aux1816' direct represents '0' with '7422'
c Var 'aux1816' order represents '1' with '7423'
-7422 7423 0
c Var 'aux1816' direct represents '1' with '7424'
7422 -7423 7424 0
-7424 7423 0
-7424 -7422 0
c Var 'aux1816' order represents '2' with '7425'
-7423 7425 0
c Var 'aux1816' direct represents '2' with '7426'
7423 -7425 7426 0
-7426 7425 0
-7426 -7423 0
c Var 'aux1816' direct represents '3' with '-7425'
7422 7424 7426 -7425 0
c Encoding variable: aux1817 with domain: int(0..4) (representing constraint (aux1812 + aux1814))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7427'
c Var 'aux1817' direct represents '0' with '7427'
c Var 'aux1817' order represents '1' with '7428'
-7427 7428 0
c Var 'aux1817' direct represents '1' with '7429'
7427 -7428 7429 0
-7429 7428 0
-7429 -7427 0
c Var 'aux1817' order represents '2' with '7430'
-7428 7430 0
c Var 'aux1817' direct represents '2' with '7431'
7428 -7430 7431 0
-7431 7430 0
-7431 -7428 0
c Var 'aux1817' order represents '3' with '7432'
-7430 7432 0
c Var 'aux1817' direct represents '3' with '7433'
7430 -7432 7433 0
-7433 7432 0
-7433 -7430 0
c Var 'aux1817' direct represents '4' with '-7432'
7427 7429 7431 7433 -7432 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7434'
c Var 'aux1818' direct represents '0' with '7434'
c Var 'aux1818' order represents '1' with '7435'
-7434 7435 0
c Var 'aux1818' direct represents '1' with '7436'
7434 -7435 7436 0
-7436 7435 0
-7436 -7434 0
c Var 'aux1818' direct represents '2' with '-7435'
7434 7436 -7435 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7437'
c Var 'aux1819' direct represents '0' with '7437'
c Var 'aux1819' order represents '1' with '7438'
-7437 7438 0
c Var 'aux1819' direct represents '1' with '7439'
7437 -7438 7439 0
-7439 7438 0
-7439 -7437 0
c Var 'aux1819' direct represents '2' with '-7438'
7437 7439 -7438 0
c Encoding variable: aux1820 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7440'
c Var 'aux1820' direct represents '0' with '7440'
c Var 'aux1820' order represents '1' with '7441'
-7440 7441 0
c Var 'aux1820' direct represents '1' with '7442'
7440 -7441 7442 0
-7442 7441 0
-7442 -7440 0
c Var 'aux1820' direct represents '2' with '-7441'
7440 7442 -7441 0
c Encoding variable: aux1821 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7443'
c Var 'aux1821' direct represents '0' with '7443'
c Var 'aux1821' order represents '1' with '7444'
-7443 7444 0
c Var 'aux1821' direct represents '1' with '7445'
7443 -7444 7445 0
-7445 7444 0
-7445 -7443 0
c Var 'aux1821' direct represents '2' with '-7444'
7443 7445 -7444 0
c Encoding variable: aux1822 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1821))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7446'
c Var 'aux1822' direct represents '0' with '7446'
c Var 'aux1822' order represents '1' with '7447'
-7446 7447 0
c Var 'aux1822' direct represents '1' with '7448'
7446 -7447 7448 0
-7448 7447 0
-7448 -7446 0
c Var 'aux1822' order represents '2' with '7449'
-7447 7449 0
c Var 'aux1822' direct represents '2' with '7450'
7447 -7449 7450 0
-7450 7449 0
-7450 -7447 0
c Var 'aux1822' direct represents '3' with '-7449'
7446 7448 7450 -7449 0
c Encoding variable: aux1823 with domain: int(0..4) (representing constraint (aux1818 + aux1820))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7451'
c Var 'aux1823' direct represents '0' with '7451'
c Var 'aux1823' order represents '1' with '7452'
-7451 7452 0
c Var 'aux1823' direct represents '1' with '7453'
7451 -7452 7453 0
-7453 7452 0
-7453 -7451 0
c Var 'aux1823' order represents '2' with '7454'
-7452 7454 0
c Var 'aux1823' direct represents '2' with '7455'
7452 -7454 7455 0
-7455 7454 0
-7455 -7452 0
c Var 'aux1823' order represents '3' with '7456'
-7454 7456 0
c Var 'aux1823' direct represents '3' with '7457'
7454 -7456 7457 0
-7457 7456 0
-7457 -7454 0
c Var 'aux1823' direct represents '4' with '-7456'
7451 7453 7455 7457 -7456 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7458'
c Var 'aux1824' direct represents '0' with '7458'
c Var 'aux1824' order represents '1' with '7459'
-7458 7459 0
c Var 'aux1824' direct represents '1' with '7460'
7458 -7459 7460 0
-7460 7459 0
-7460 -7458 0
c Var 'aux1824' direct represents '2' with '-7459'
7458 7460 -7459 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7461'
c Var 'aux1825' direct represents '0' with '7461'
c Var 'aux1825' order represents '1' with '7462'
-7461 7462 0
c Var 'aux1825' direct represents '1' with '7463'
7461 -7462 7463 0
-7463 7462 0
-7463 -7461 0
c Var 'aux1825' direct represents '2' with '-7462'
7461 7463 -7462 0
c Encoding variable: aux1826 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7464'
c Var 'aux1826' direct represents '0' with '7464'
c Var 'aux1826' order represents '1' with '7465'
-7464 7465 0
c Var 'aux1826' direct represents '1' with '7466'
7464 -7465 7466 0
-7466 7465 0
-7466 -7464 0
c Var 'aux1826' direct represents '2' with '-7465'
7464 7466 -7465 0
c Encoding variable: aux1827 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7467'
c Var 'aux1827' direct represents '0' with '7467'
c Var 'aux1827' order represents '1' with '7468'
-7467 7468 0
c Var 'aux1827' direct represents '1' with '7469'
7467 -7468 7469 0
-7469 7468 0
-7469 -7467 0
c Var 'aux1827' direct represents '2' with '-7468'
7467 7469 -7468 0
c Encoding variable: aux1828 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1827))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7470'
c Var 'aux1828' direct represents '0' with '7470'
c Var 'aux1828' order represents '1' with '7471'
-7470 7471 0
c Var 'aux1828' direct represents '1' with '7472'
7470 -7471 7472 0
-7472 7471 0
-7472 -7470 0
c Var 'aux1828' order represents '2' with '7473'
-7471 7473 0
c Var 'aux1828' direct represents '2' with '7474'
7471 -7473 7474 0
-7474 7473 0
-7474 -7471 0
c Var 'aux1828' direct represents '3' with '-7473'
7470 7472 7474 -7473 0
c Encoding variable: aux1829 with domain: int(0..4) (representing constraint (aux1824 + aux1826))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7475'
c Var 'aux1829' direct represents '0' with '7475'
c Var 'aux1829' order represents '1' with '7476'
-7475 7476 0
c Var 'aux1829' direct represents '1' with '7477'
7475 -7476 7477 0
-7477 7476 0
-7477 -7475 0
c Var 'aux1829' order represents '2' with '7478'
-7476 7478 0
c Var 'aux1829' direct represents '2' with '7479'
7476 -7478 7479 0
-7479 7478 0
-7479 -7476 0
c Var 'aux1829' order represents '3' with '7480'
-7478 7480 0
c Var 'aux1829' direct represents '3' with '7481'
7478 -7480 7481 0
-7481 7480 0
-7481 -7478 0
c Var 'aux1829' direct represents '4' with '-7480'
7475 7477 7479 7481 -7480 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7482'
c Var 'aux1830' direct represents '0' with '7482'
c Var 'aux1830' order represents '1' with '7483'
-7482 7483 0
c Var 'aux1830' direct represents '1' with '7484'
7482 -7483 7484 0
-7484 7483 0
-7484 -7482 0
c Var 'aux1830' direct represents '2' with '-7483'
7482 7484 -7483 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7485'
c Var 'aux1831' direct represents '0' with '7485'
c Var 'aux1831' order represents '1' with '7486'
-7485 7486 0
c Var 'aux1831' direct represents '1' with '7487'
7485 -7486 7487 0
-7487 7486 0
-7487 -7485 0
c Var 'aux1831' direct represents '2' with '-7486'
7485 7487 -7486 0
c Encoding variable: aux1832 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7488'
c Var 'aux1832' direct represents '0' with '7488'
c Var 'aux1832' order represents '1' with '7489'
-7488 7489 0
c Var 'aux1832' direct represents '1' with '7490'
7488 -7489 7490 0
-7490 7489 0
-7490 -7488 0
c Var 'aux1832' direct represents '2' with '-7489'
7488 7490 -7489 0
c Encoding variable: aux1833 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7491'
c Var 'aux1833' direct represents '0' with '7491'
c Var 'aux1833' order represents '1' with '7492'
-7491 7492 0
c Var 'aux1833' direct represents '1' with '7493'
7491 -7492 7493 0
-7493 7492 0
-7493 -7491 0
c Var 'aux1833' direct represents '2' with '-7492'
7491 7493 -7492 0
c Encoding variable: aux1834 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1833))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7494'
c Var 'aux1834' direct represents '0' with '7494'
c Var 'aux1834' order represents '1' with '7495'
-7494 7495 0
c Var 'aux1834' direct represents '1' with '7496'
7494 -7495 7496 0
-7496 7495 0
-7496 -7494 0
c Var 'aux1834' order represents '2' with '7497'
-7495 7497 0
c Var 'aux1834' direct represents '2' with '7498'
7495 -7497 7498 0
-7498 7497 0
-7498 -7495 0
c Var 'aux1834' direct represents '3' with '-7497'
7494 7496 7498 -7497 0
c Encoding variable: aux1835 with domain: int(0..4) (representing constraint (aux1830 + aux1832))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7499'
c Var 'aux1835' direct represents '0' with '7499'
c Var 'aux1835' order represents '1' with '7500'
-7499 7500 0
c Var 'aux1835' direct represents '1' with '7501'
7499 -7500 7501 0
-7501 7500 0
-7501 -7499 0
c Var 'aux1835' order represents '2' with '7502'
-7500 7502 0
c Var 'aux1835' direct represents '2' with '7503'
7500 -7502 7503 0
-7503 7502 0
-7503 -7500 0
c Var 'aux1835' order represents '3' with '7504'
-7502 7504 0
c Var 'aux1835' direct represents '3' with '7505'
7502 -7504 7505 0
-7505 7504 0
-7505 -7502 0
c Var 'aux1835' direct represents '4' with '-7504'
7499 7501 7503 7505 -7504 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7506'
c Var 'aux1836' direct represents '0' with '7506'
c Var 'aux1836' order represents '1' with '7507'
-7506 7507 0
c Var 'aux1836' direct represents '1' with '7508'
7506 -7507 7508 0
-7508 7507 0
-7508 -7506 0
c Var 'aux1836' direct represents '2' with '-7507'
7506 7508 -7507 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7509'
c Var 'aux1837' direct represents '0' with '7509'
c Var 'aux1837' order represents '1' with '7510'
-7509 7510 0
c Var 'aux1837' direct represents '1' with '7511'
7509 -7510 7511 0
-7511 7510 0
-7511 -7509 0
c Var 'aux1837' direct represents '2' with '-7510'
7509 7511 -7510 0
c Encoding variable: aux1838 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7512'
c Var 'aux1838' direct represents '0' with '7512'
c Var 'aux1838' order represents '1' with '7513'
-7512 7513 0
c Var 'aux1838' direct represents '1' with '7514'
7512 -7513 7514 0
-7514 7513 0
-7514 -7512 0
c Var 'aux1838' direct represents '2' with '-7513'
7512 7514 -7513 0
c Encoding variable: aux1839 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7515'
c Var 'aux1839' direct represents '0' with '7515'
c Var 'aux1839' order represents '1' with '7516'
-7515 7516 0
c Var 'aux1839' direct represents '1' with '7517'
7515 -7516 7517 0
-7517 7516 0
-7517 -7515 0
c Var 'aux1839' direct represents '2' with '-7516'
7515 7517 -7516 0
c Encoding variable: aux1840 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1839))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7518'
c Var 'aux1840' direct represents '0' with '7518'
c Var 'aux1840' order represents '1' with '7519'
-7518 7519 0
c Var 'aux1840' direct represents '1' with '7520'
7518 -7519 7520 0
-7520 7519 0
-7520 -7518 0
c Var 'aux1840' order represents '2' with '7521'
-7519 7521 0
c Var 'aux1840' direct represents '2' with '7522'
7519 -7521 7522 0
-7522 7521 0
-7522 -7519 0
c Var 'aux1840' direct represents '3' with '-7521'
7518 7520 7522 -7521 0
c Encoding variable: aux1841 with domain: int(0..4) (representing constraint (aux1836 + aux1838))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7523'
c Var 'aux1841' direct represents '0' with '7523'
c Var 'aux1841' order represents '1' with '7524'
-7523 7524 0
c Var 'aux1841' direct represents '1' with '7525'
7523 -7524 7525 0
-7525 7524 0
-7525 -7523 0
c Var 'aux1841' order represents '2' with '7526'
-7524 7526 0
c Var 'aux1841' direct represents '2' with '7527'
7524 -7526 7527 0
-7527 7526 0
-7527 -7524 0
c Var 'aux1841' order represents '3' with '7528'
-7526 7528 0
c Var 'aux1841' direct represents '3' with '7529'
7526 -7528 7529 0
-7529 7528 0
-7529 -7526 0
c Var 'aux1841' direct represents '4' with '-7528'
7523 7525 7527 7529 -7528 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7530'
c Var 'aux1842' direct represents '0' with '7530'
c Var 'aux1842' order represents '1' with '7531'
-7530 7531 0
c Var 'aux1842' direct represents '1' with '7532'
7530 -7531 7532 0
-7532 7531 0
-7532 -7530 0
c Var 'aux1842' direct represents '2' with '-7531'
7530 7532 -7531 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7533'
c Var 'aux1843' direct represents '0' with '7533'
c Var 'aux1843' order represents '1' with '7534'
-7533 7534 0
c Var 'aux1843' direct represents '1' with '7535'
7533 -7534 7535 0
-7535 7534 0
-7535 -7533 0
c Var 'aux1843' direct represents '2' with '-7534'
7533 7535 -7534 0
c Encoding variable: aux1844 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7536'
c Var 'aux1844' direct represents '0' with '7536'
c Var 'aux1844' order represents '1' with '7537'
-7536 7537 0
c Var 'aux1844' direct represents '1' with '7538'
7536 -7537 7538 0
-7538 7537 0
-7538 -7536 0
c Var 'aux1844' direct represents '2' with '-7537'
7536 7538 -7537 0
c Encoding variable: aux1845 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7539'
c Var 'aux1845' direct represents '0' with '7539'
c Var 'aux1845' order represents '1' with '7540'
-7539 7540 0
c Var 'aux1845' direct represents '1' with '7541'
7539 -7540 7541 0
-7541 7540 0
-7541 -7539 0
c Var 'aux1845' direct represents '2' with '-7540'
7539 7541 -7540 0
c Encoding variable: aux1846 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1845))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7542'
c Var 'aux1846' direct represents '0' with '7542'
c Var 'aux1846' order represents '1' with '7543'
-7542 7543 0
c Var 'aux1846' direct represents '1' with '7544'
7542 -7543 7544 0
-7544 7543 0
-7544 -7542 0
c Var 'aux1846' order represents '2' with '7545'
-7543 7545 0
c Var 'aux1846' direct represents '2' with '7546'
7543 -7545 7546 0
-7546 7545 0
-7546 -7543 0
c Var 'aux1846' direct represents '3' with '-7545'
7542 7544 7546 -7545 0
c Encoding variable: aux1847 with domain: int(0..4) (representing constraint (aux1842 + aux1844))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7547'
c Var 'aux1847' direct represents '0' with '7547'
c Var 'aux1847' order represents '1' with '7548'
-7547 7548 0
c Var 'aux1847' direct represents '1' with '7549'
7547 -7548 7549 0
-7549 7548 0
-7549 -7547 0
c Var 'aux1847' order represents '2' with '7550'
-7548 7550 0
c Var 'aux1847' direct represents '2' with '7551'
7548 -7550 7551 0
-7551 7550 0
-7551 -7548 0
c Var 'aux1847' order represents '3' with '7552'
-7550 7552 0
c Var 'aux1847' direct represents '3' with '7553'
7550 -7552 7553 0
-7553 7552 0
-7553 -7550 0
c Var 'aux1847' direct represents '4' with '-7552'
7547 7549 7551 7553 -7552 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7554'
c Var 'aux1848' direct represents '0' with '7554'
c Var 'aux1848' order represents '1' with '7555'
-7554 7555 0
c Var 'aux1848' direct represents '1' with '7556'
7554 -7555 7556 0
-7556 7555 0
-7556 -7554 0
c Var 'aux1848' direct represents '2' with '-7555'
7554 7556 -7555 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7557'
c Var 'aux1849' direct represents '0' with '7557'
c Var 'aux1849' order represents '1' with '7558'
-7557 7558 0
c Var 'aux1849' direct represents '1' with '7559'
7557 -7558 7559 0
-7559 7558 0
-7559 -7557 0
c Var 'aux1849' direct represents '2' with '-7558'
7557 7559 -7558 0
c Encoding variable: aux1850 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7560'
c Var 'aux1850' direct represents '0' with '7560'
c Var 'aux1850' order represents '1' with '7561'
-7560 7561 0
c Var 'aux1850' direct represents '1' with '7562'
7560 -7561 7562 0
-7562 7561 0
-7562 -7560 0
c Var 'aux1850' direct represents '2' with '-7561'
7560 7562 -7561 0
c Encoding variable: aux1851 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7563'
c Var 'aux1851' direct represents '0' with '7563'
c Var 'aux1851' order represents '1' with '7564'
-7563 7564 0
c Var 'aux1851' direct represents '1' with '7565'
7563 -7564 7565 0
-7565 7564 0
-7565 -7563 0
c Var 'aux1851' direct represents '2' with '-7564'
7563 7565 -7564 0
c Encoding variable: aux1852 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1851))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7566'
c Var 'aux1852' direct represents '0' with '7566'
c Var 'aux1852' order represents '1' with '7567'
-7566 7567 0
c Var 'aux1852' direct represents '1' with '7568'
7566 -7567 7568 0
-7568 7567 0
-7568 -7566 0
c Var 'aux1852' order represents '2' with '7569'
-7567 7569 0
c Var 'aux1852' direct represents '2' with '7570'
7567 -7569 7570 0
-7570 7569 0
-7570 -7567 0
c Var 'aux1852' direct represents '3' with '-7569'
7566 7568 7570 -7569 0
c Encoding variable: aux1853 with domain: int(0..4) (representing constraint (aux1848 + aux1850))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7571'
c Var 'aux1853' direct represents '0' with '7571'
c Var 'aux1853' order represents '1' with '7572'
-7571 7572 0
c Var 'aux1853' direct represents '1' with '7573'
7571 -7572 7573 0
-7573 7572 0
-7573 -7571 0
c Var 'aux1853' order represents '2' with '7574'
-7572 7574 0
c Var 'aux1853' direct represents '2' with '7575'
7572 -7574 7575 0
-7575 7574 0
-7575 -7572 0
c Var 'aux1853' order represents '3' with '7576'
-7574 7576 0
c Var 'aux1853' direct represents '3' with '7577'
7574 -7576 7577 0
-7577 7576 0
-7577 -7574 0
c Var 'aux1853' direct represents '4' with '-7576'
7571 7573 7575 7577 -7576 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7578'
c Var 'aux1854' direct represents '0' with '7578'
c Var 'aux1854' order represents '1' with '7579'
-7578 7579 0
c Var 'aux1854' direct represents '1' with '7580'
7578 -7579 7580 0
-7580 7579 0
-7580 -7578 0
c Var 'aux1854' direct represents '2' with '-7579'
7578 7580 -7579 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7581'
c Var 'aux1855' direct represents '0' with '7581'
c Var 'aux1855' order represents '1' with '7582'
-7581 7582 0
c Var 'aux1855' direct represents '1' with '7583'
7581 -7582 7583 0
-7583 7582 0
-7583 -7581 0
c Var 'aux1855' direct represents '2' with '-7582'
7581 7583 -7582 0
c Encoding variable: aux1856 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7584'
c Var 'aux1856' direct represents '0' with '7584'
c Var 'aux1856' order represents '1' with '7585'
-7584 7585 0
c Var 'aux1856' direct represents '1' with '7586'
7584 -7585 7586 0
-7586 7585 0
-7586 -7584 0
c Var 'aux1856' direct represents '2' with '-7585'
7584 7586 -7585 0
c Encoding variable: aux1857 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7587'
c Var 'aux1857' direct represents '0' with '7587'
c Var 'aux1857' order represents '1' with '7588'
-7587 7588 0
c Var 'aux1857' direct represents '1' with '7589'
7587 -7588 7589 0
-7589 7588 0
-7589 -7587 0
c Var 'aux1857' direct represents '2' with '-7588'
7587 7589 -7588 0
c Encoding variable: aux1858 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1857))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7590'
c Var 'aux1858' direct represents '0' with '7590'
c Var 'aux1858' order represents '1' with '7591'
-7590 7591 0
c Var 'aux1858' direct represents '1' with '7592'
7590 -7591 7592 0
-7592 7591 0
-7592 -7590 0
c Var 'aux1858' order represents '2' with '7593'
-7591 7593 0
c Var 'aux1858' direct represents '2' with '7594'
7591 -7593 7594 0
-7594 7593 0
-7594 -7591 0
c Var 'aux1858' direct represents '3' with '-7593'
7590 7592 7594 -7593 0
c Encoding variable: aux1859 with domain: int(0..4) (representing constraint (aux1854 + aux1856))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7595'
c Var 'aux1859' direct represents '0' with '7595'
c Var 'aux1859' order represents '1' with '7596'
-7595 7596 0
c Var 'aux1859' direct represents '1' with '7597'
7595 -7596 7597 0
-7597 7596 0
-7597 -7595 0
c Var 'aux1859' order represents '2' with '7598'
-7596 7598 0
c Var 'aux1859' direct represents '2' with '7599'
7596 -7598 7599 0
-7599 7598 0
-7599 -7596 0
c Var 'aux1859' order represents '3' with '7600'
-7598 7600 0
c Var 'aux1859' direct represents '3' with '7601'
7598 -7600 7601 0
-7601 7600 0
-7601 -7598 0
c Var 'aux1859' direct represents '4' with '-7600'
7595 7597 7599 7601 -7600 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7602'
c Var 'aux1860' direct represents '0' with '7602'
c Var 'aux1860' order represents '1' with '7603'
-7602 7603 0
c Var 'aux1860' direct represents '1' with '7604'
7602 -7603 7604 0
-7604 7603 0
-7604 -7602 0
c Var 'aux1860' direct represents '2' with '-7603'
7602 7604 -7603 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7605'
c Var 'aux1861' direct represents '0' with '7605'
c Var 'aux1861' order represents '1' with '7606'
-7605 7606 0
c Var 'aux1861' direct represents '1' with '7607'
7605 -7606 7607 0
-7607 7606 0
-7607 -7605 0
c Var 'aux1861' direct represents '2' with '-7606'
7605 7607 -7606 0
c Encoding variable: aux1862 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7608'
c Var 'aux1862' direct represents '0' with '7608'
c Var 'aux1862' order represents '1' with '7609'
-7608 7609 0
c Var 'aux1862' direct represents '1' with '7610'
7608 -7609 7610 0
-7610 7609 0
-7610 -7608 0
c Var 'aux1862' direct represents '2' with '-7609'
7608 7610 -7609 0
c Encoding variable: aux1863 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7611'
c Var 'aux1863' direct represents '0' with '7611'
c Var 'aux1863' order represents '1' with '7612'
-7611 7612 0
c Var 'aux1863' direct represents '1' with '7613'
7611 -7612 7613 0
-7613 7612 0
-7613 -7611 0
c Var 'aux1863' direct represents '2' with '-7612'
7611 7613 -7612 0
c Encoding variable: aux1864 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1863))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7614'
c Var 'aux1864' direct represents '0' with '7614'
c Var 'aux1864' order represents '1' with '7615'
-7614 7615 0
c Var 'aux1864' direct represents '1' with '7616'
7614 -7615 7616 0
-7616 7615 0
-7616 -7614 0
c Var 'aux1864' order represents '2' with '7617'
-7615 7617 0
c Var 'aux1864' direct represents '2' with '7618'
7615 -7617 7618 0
-7618 7617 0
-7618 -7615 0
c Var 'aux1864' direct represents '3' with '-7617'
7614 7616 7618 -7617 0
c Encoding variable: aux1865 with domain: int(0..4) (representing constraint (aux1860 + aux1862))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7619'
c Var 'aux1865' direct represents '0' with '7619'
c Var 'aux1865' order represents '1' with '7620'
-7619 7620 0
c Var 'aux1865' direct represents '1' with '7621'
7619 -7620 7621 0
-7621 7620 0
-7621 -7619 0
c Var 'aux1865' order represents '2' with '7622'
-7620 7622 0
c Var 'aux1865' direct represents '2' with '7623'
7620 -7622 7623 0
-7623 7622 0
-7623 -7620 0
c Var 'aux1865' order represents '3' with '7624'
-7622 7624 0
c Var 'aux1865' direct represents '3' with '7625'
7622 -7624 7625 0
-7625 7624 0
-7625 -7622 0
c Var 'aux1865' direct represents '4' with '-7624'
7619 7621 7623 7625 -7624 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7626'
c Var 'aux1866' direct represents '0' with '7626'
c Var 'aux1866' order represents '1' with '7627'
-7626 7627 0
c Var 'aux1866' direct represents '1' with '7628'
7626 -7627 7628 0
-7628 7627 0
-7628 -7626 0
c Var 'aux1866' direct represents '2' with '-7627'
7626 7628 -7627 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7629'
c Var 'aux1867' direct represents '0' with '7629'
c Var 'aux1867' order represents '1' with '7630'
-7629 7630 0
c Var 'aux1867' direct represents '1' with '7631'
7629 -7630 7631 0
-7631 7630 0
-7631 -7629 0
c Var 'aux1867' direct represents '2' with '-7630'
7629 7631 -7630 0
c Encoding variable: aux1868 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7632'
c Var 'aux1868' direct represents '0' with '7632'
c Var 'aux1868' order represents '1' with '7633'
-7632 7633 0
c Var 'aux1868' direct represents '1' with '7634'
7632 -7633 7634 0
-7634 7633 0
-7634 -7632 0
c Var 'aux1868' direct represents '2' with '-7633'
7632 7634 -7633 0
c Encoding variable: aux1869 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7635'
c Var 'aux1869' direct represents '0' with '7635'
c Var 'aux1869' order represents '1' with '7636'
-7635 7636 0
c Var 'aux1869' direct represents '1' with '7637'
7635 -7636 7637 0
-7637 7636 0
-7637 -7635 0
c Var 'aux1869' direct represents '2' with '-7636'
7635 7637 -7636 0
c Encoding variable: aux1870 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1869))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7638'
c Var 'aux1870' direct represents '0' with '7638'
c Var 'aux1870' order represents '1' with '7639'
-7638 7639 0
c Var 'aux1870' direct represents '1' with '7640'
7638 -7639 7640 0
-7640 7639 0
-7640 -7638 0
c Var 'aux1870' order represents '2' with '7641'
-7639 7641 0
c Var 'aux1870' direct represents '2' with '7642'
7639 -7641 7642 0
-7642 7641 0
-7642 -7639 0
c Var 'aux1870' direct represents '3' with '-7641'
7638 7640 7642 -7641 0
c Encoding variable: aux1871 with domain: int(0..4) (representing constraint (aux1866 + aux1868))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7643'
c Var 'aux1871' direct represents '0' with '7643'
c Var 'aux1871' order represents '1' with '7644'
-7643 7644 0
c Var 'aux1871' direct represents '1' with '7645'
7643 -7644 7645 0
-7645 7644 0
-7645 -7643 0
c Var 'aux1871' order represents '2' with '7646'
-7644 7646 0
c Var 'aux1871' direct represents '2' with '7647'
7644 -7646 7647 0
-7647 7646 0
-7647 -7644 0
c Var 'aux1871' order represents '3' with '7648'
-7646 7648 0
c Var 'aux1871' direct represents '3' with '7649'
7646 -7648 7649 0
-7649 7648 0
-7649 -7646 0
c Var 'aux1871' direct represents '4' with '-7648'
7643 7645 7647 7649 -7648 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7650'
c Var 'aux1872' direct represents '0' with '7650'
c Var 'aux1872' order represents '1' with '7651'
-7650 7651 0
c Var 'aux1872' direct represents '1' with '7652'
7650 -7651 7652 0
-7652 7651 0
-7652 -7650 0
c Var 'aux1872' direct represents '2' with '-7651'
7650 7652 -7651 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7653'
c Var 'aux1873' direct represents '0' with '7653'
c Var 'aux1873' order represents '1' with '7654'
-7653 7654 0
c Var 'aux1873' direct represents '1' with '7655'
7653 -7654 7655 0
-7655 7654 0
-7655 -7653 0
c Var 'aux1873' direct represents '2' with '-7654'
7653 7655 -7654 0
c Encoding variable: aux1874 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7656'
c Var 'aux1874' direct represents '0' with '7656'
c Var 'aux1874' order represents '1' with '7657'
-7656 7657 0
c Var 'aux1874' direct represents '1' with '7658'
7656 -7657 7658 0
-7658 7657 0
-7658 -7656 0
c Var 'aux1874' direct represents '2' with '-7657'
7656 7658 -7657 0
c Encoding variable: aux1875 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7659'
c Var 'aux1875' direct represents '0' with '7659'
c Var 'aux1875' order represents '1' with '7660'
-7659 7660 0
c Var 'aux1875' direct represents '1' with '7661'
7659 -7660 7661 0
-7661 7660 0
-7661 -7659 0
c Var 'aux1875' direct represents '2' with '-7660'
7659 7661 -7660 0
c Encoding variable: aux1876 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1875))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7662'
c Var 'aux1876' direct represents '0' with '7662'
c Var 'aux1876' order represents '1' with '7663'
-7662 7663 0
c Var 'aux1876' direct represents '1' with '7664'
7662 -7663 7664 0
-7664 7663 0
-7664 -7662 0
c Var 'aux1876' order represents '2' with '7665'
-7663 7665 0
c Var 'aux1876' direct represents '2' with '7666'
7663 -7665 7666 0
-7666 7665 0
-7666 -7663 0
c Var 'aux1876' direct represents '3' with '-7665'
7662 7664 7666 -7665 0
c Encoding variable: aux1877 with domain: int(0..4) (representing constraint (aux1872 + aux1874))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7667'
c Var 'aux1877' direct represents '0' with '7667'
c Var 'aux1877' order represents '1' with '7668'
-7667 7668 0
c Var 'aux1877' direct represents '1' with '7669'
7667 -7668 7669 0
-7669 7668 0
-7669 -7667 0
c Var 'aux1877' order represents '2' with '7670'
-7668 7670 0
c Var 'aux1877' direct represents '2' with '7671'
7668 -7670 7671 0
-7671 7670 0
-7671 -7668 0
c Var 'aux1877' order represents '3' with '7672'
-7670 7672 0
c Var 'aux1877' direct represents '3' with '7673'
7670 -7672 7673 0
-7673 7672 0
-7673 -7670 0
c Var 'aux1877' direct represents '4' with '-7672'
7667 7669 7671 7673 -7672 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7674'
c Var 'aux1878' direct represents '0' with '7674'
c Var 'aux1878' order represents '1' with '7675'
-7674 7675 0
c Var 'aux1878' direct represents '1' with '7676'
7674 -7675 7676 0
-7676 7675 0
-7676 -7674 0
c Var 'aux1878' direct represents '2' with '-7675'
7674 7676 -7675 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7677'
c Var 'aux1879' direct represents '0' with '7677'
c Var 'aux1879' order represents '1' with '7678'
-7677 7678 0
c Var 'aux1879' direct represents '1' with '7679'
7677 -7678 7679 0
-7679 7678 0
-7679 -7677 0
c Var 'aux1879' direct represents '2' with '-7678'
7677 7679 -7678 0
c Encoding variable: aux1880 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7680'
c Var 'aux1880' direct represents '0' with '7680'
c Var 'aux1880' order represents '1' with '7681'
-7680 7681 0
c Var 'aux1880' direct represents '1' with '7682'
7680 -7681 7682 0
-7682 7681 0
-7682 -7680 0
c Var 'aux1880' direct represents '2' with '-7681'
7680 7682 -7681 0
c Encoding variable: aux1881 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7683'
c Var 'aux1881' direct represents '0' with '7683'
c Var 'aux1881' order represents '1' with '7684'
-7683 7684 0
c Var 'aux1881' direct represents '1' with '7685'
7683 -7684 7685 0
-7685 7684 0
-7685 -7683 0
c Var 'aux1881' direct represents '2' with '-7684'
7683 7685 -7684 0
c Encoding variable: aux1882 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1881))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7686'
c Var 'aux1882' direct represents '0' with '7686'
c Var 'aux1882' order represents '1' with '7687'
-7686 7687 0
c Var 'aux1882' direct represents '1' with '7688'
7686 -7687 7688 0
-7688 7687 0
-7688 -7686 0
c Var 'aux1882' order represents '2' with '7689'
-7687 7689 0
c Var 'aux1882' direct represents '2' with '7690'
7687 -7689 7690 0
-7690 7689 0
-7690 -7687 0
c Var 'aux1882' direct represents '3' with '-7689'
7686 7688 7690 -7689 0
c Encoding variable: aux1883 with domain: int(0..4) (representing constraint (aux1878 + aux1880))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7691'
c Var 'aux1883' direct represents '0' with '7691'
c Var 'aux1883' order represents '1' with '7692'
-7691 7692 0
c Var 'aux1883' direct represents '1' with '7693'
7691 -7692 7693 0
-7693 7692 0
-7693 -7691 0
c Var 'aux1883' order represents '2' with '7694'
-7692 7694 0
c Var 'aux1883' direct represents '2' with '7695'
7692 -7694 7695 0
-7695 7694 0
-7695 -7692 0
c Var 'aux1883' order represents '3' with '7696'
-7694 7696 0
c Var 'aux1883' direct represents '3' with '7697'
7694 -7696 7697 0
-7697 7696 0
-7697 -7694 0
c Var 'aux1883' direct represents '4' with '-7696'
7691 7693 7695 7697 -7696 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7698'
c Var 'aux1884' direct represents '0' with '7698'
c Var 'aux1884' order represents '1' with '7699'
-7698 7699 0
c Var 'aux1884' direct represents '1' with '7700'
7698 -7699 7700 0
-7700 7699 0
-7700 -7698 0
c Var 'aux1884' direct represents '2' with '-7699'
7698 7700 -7699 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7701'
c Var 'aux1885' direct represents '0' with '7701'
c Var 'aux1885' order represents '1' with '7702'
-7701 7702 0
c Var 'aux1885' direct represents '1' with '7703'
7701 -7702 7703 0
-7703 7702 0
-7703 -7701 0
c Var 'aux1885' direct represents '2' with '-7702'
7701 7703 -7702 0
c Encoding variable: aux1886 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7704'
c Var 'aux1886' direct represents '0' with '7704'
c Var 'aux1886' order represents '1' with '7705'
-7704 7705 0
c Var 'aux1886' direct represents '1' with '7706'
7704 -7705 7706 0
-7706 7705 0
-7706 -7704 0
c Var 'aux1886' direct represents '2' with '-7705'
7704 7706 -7705 0
c Encoding variable: aux1887 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7707'
c Var 'aux1887' direct represents '0' with '7707'
c Var 'aux1887' order represents '1' with '7708'
-7707 7708 0
c Var 'aux1887' direct represents '1' with '7709'
7707 -7708 7709 0
-7709 7708 0
-7709 -7707 0
c Var 'aux1887' direct represents '2' with '-7708'
7707 7709 -7708 0
c Encoding variable: aux1888 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1887))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7710'
c Var 'aux1888' direct represents '0' with '7710'
c Var 'aux1888' order represents '1' with '7711'
-7710 7711 0
c Var 'aux1888' direct represents '1' with '7712'
7710 -7711 7712 0
-7712 7711 0
-7712 -7710 0
c Var 'aux1888' order represents '2' with '7713'
-7711 7713 0
c Var 'aux1888' direct represents '2' with '7714'
7711 -7713 7714 0
-7714 7713 0
-7714 -7711 0
c Var 'aux1888' direct represents '3' with '-7713'
7710 7712 7714 -7713 0
c Encoding variable: aux1889 with domain: int(0..4) (representing constraint (aux1884 + aux1886))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7715'
c Var 'aux1889' direct represents '0' with '7715'
c Var 'aux1889' order represents '1' with '7716'
-7715 7716 0
c Var 'aux1889' direct represents '1' with '7717'
7715 -7716 7717 0
-7717 7716 0
-7717 -7715 0
c Var 'aux1889' order represents '2' with '7718'
-7716 7718 0
c Var 'aux1889' direct represents '2' with '7719'
7716 -7718 7719 0
-7719 7718 0
-7719 -7716 0
c Var 'aux1889' order represents '3' with '7720'
-7718 7720 0
c Var 'aux1889' direct represents '3' with '7721'
7718 -7720 7721 0
-7721 7720 0
-7721 -7718 0
c Var 'aux1889' direct represents '4' with '-7720'
7715 7717 7719 7721 -7720 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7722'
c Var 'aux1890' direct represents '0' with '7722'
c Var 'aux1890' order represents '1' with '7723'
-7722 7723 0
c Var 'aux1890' direct represents '1' with '7724'
7722 -7723 7724 0
-7724 7723 0
-7724 -7722 0
c Var 'aux1890' direct represents '2' with '-7723'
7722 7724 -7723 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7725'
c Var 'aux1891' direct represents '0' with '7725'
c Var 'aux1891' order represents '1' with '7726'
-7725 7726 0
c Var 'aux1891' direct represents '1' with '7727'
7725 -7726 7727 0
-7727 7726 0
-7727 -7725 0
c Var 'aux1891' direct represents '2' with '-7726'
7725 7727 -7726 0
c Encoding variable: aux1892 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7728'
c Var 'aux1892' direct represents '0' with '7728'
c Var 'aux1892' order represents '1' with '7729'
-7728 7729 0
c Var 'aux1892' direct represents '1' with '7730'
7728 -7729 7730 0
-7730 7729 0
-7730 -7728 0
c Var 'aux1892' direct represents '2' with '-7729'
7728 7730 -7729 0
c Encoding variable: aux1893 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7731'
c Var 'aux1893' direct represents '0' with '7731'
c Var 'aux1893' order represents '1' with '7732'
-7731 7732 0
c Var 'aux1893' direct represents '1' with '7733'
7731 -7732 7733 0
-7733 7732 0
-7733 -7731 0
c Var 'aux1893' direct represents '2' with '-7732'
7731 7733 -7732 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7734'
c Var 'aux1894' direct represents '0' with '7734'
c Var 'aux1894' order represents '1' with '7735'
-7734 7735 0
c Var 'aux1894' direct represents '1' with '7736'
7734 -7735 7736 0
-7736 7735 0
-7736 -7734 0
c Var 'aux1894' direct represents '2' with '-7735'
7734 7736 -7735 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7737'
c Var 'aux1895' direct represents '0' with '7737'
c Var 'aux1895' order represents '1' with '7738'
-7737 7738 0
c Var 'aux1895' direct represents '1' with '7739'
7737 -7738 7739 0
-7739 7738 0
-7739 -7737 0
c Var 'aux1895' direct represents '2' with '-7738'
7737 7739 -7738 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7740'
c Var 'aux1896' direct represents '0' with '7740'
c Var 'aux1896' order represents '1' with '7741'
-7740 7741 0
c Var 'aux1896' direct represents '1' with '7742'
7740 -7741 7742 0
-7742 7741 0
-7742 -7740 0
c Var 'aux1896' direct represents '2' with '-7741'
7740 7742 -7741 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7743'
c Var 'aux1897' direct represents '0' with '7743'
c Var 'aux1897' order represents '1' with '7744'
-7743 7744 0
c Var 'aux1897' direct represents '1' with '7745'
7743 -7744 7745 0
-7745 7744 0
-7745 -7743 0
c Var 'aux1897' direct represents '2' with '-7744'
7743 7745 -7744 0
c Encoding variable: aux1898 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7746'
c Var 'aux1898' direct represents '0' with '7746'
c Var 'aux1898' order represents '1' with '7747'
-7746 7747 0
c Var 'aux1898' direct represents '1' with '7748'
7746 -7747 7748 0
-7748 7747 0
-7748 -7746 0
c Var 'aux1898' direct represents '2' with '-7747'
7746 7748 -7747 0
c Encoding variable: aux1899 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7749'
c Var 'aux1899' direct represents '0' with '7749'
c Var 'aux1899' order represents '1' with '7750'
-7749 7750 0
c Var 'aux1899' direct represents '1' with '7751'
7749 -7750 7751 0
-7751 7750 0
-7751 -7749 0
c Var 'aux1899' direct represents '2' with '-7750'
7749 7751 -7750 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7752'
c Var 'aux1900' direct represents '0' with '7752'
c Var 'aux1900' order represents '1' with '7753'
-7752 7753 0
c Var 'aux1900' direct represents '1' with '7754'
7752 -7753 7754 0
-7754 7753 0
-7754 -7752 0
c Var 'aux1900' direct represents '2' with '-7753'
7752 7754 -7753 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7755'
c Var 'aux1901' direct represents '0' with '7755'
c Var 'aux1901' order represents '1' with '7756'
-7755 7756 0
c Var 'aux1901' direct represents '1' with '7757'
7755 -7756 7757 0
-7757 7756 0
-7757 -7755 0
c Var 'aux1901' direct represents '2' with '-7756'
7755 7757 -7756 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7758'
c Var 'aux1902' direct represents '0' with '7758'
c Var 'aux1902' order represents '1' with '7759'
-7758 7759 0
c Var 'aux1902' direct represents '1' with '7760'
7758 -7759 7760 0
-7760 7759 0
-7760 -7758 0
c Var 'aux1902' direct represents '2' with '-7759'
7758 7760 -7759 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7761'
c Var 'aux1903' direct represents '0' with '7761'
c Var 'aux1903' order represents '1' with '7762'
-7761 7762 0
c Var 'aux1903' direct represents '1' with '7763'
7761 -7762 7763 0
-7763 7762 0
-7763 -7761 0
c Var 'aux1903' direct represents '2' with '-7762'
7761 7763 -7762 0
c Encoding variable: aux1904 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7764'
c Var 'aux1904' direct represents '0' with '7764'
c Var 'aux1904' order represents '1' with '7765'
-7764 7765 0
c Var 'aux1904' direct represents '1' with '7766'
7764 -7765 7766 0
-7766 7765 0
-7766 -7764 0
c Var 'aux1904' direct represents '2' with '-7765'
7764 7766 -7765 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7767'
c Var 'aux1905' direct represents '0' with '7767'
c Var 'aux1905' order represents '1' with '7768'
-7767 7768 0
c Var 'aux1905' direct represents '1' with '7769'
7767 -7768 7769 0
-7769 7768 0
-7769 -7767 0
c Var 'aux1905' direct represents '2' with '-7768'
7767 7769 -7768 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7770'
c Var 'aux1906' direct represents '0' with '7770'
c Var 'aux1906' order represents '1' with '7771'
-7770 7771 0
c Var 'aux1906' direct represents '1' with '7772'
7770 -7771 7772 0
-7772 7771 0
-7772 -7770 0
c Var 'aux1906' direct represents '2' with '-7771'
7770 7772 -7771 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7773'
c Var 'aux1907' direct represents '0' with '7773'
c Var 'aux1907' order represents '1' with '7774'
-7773 7774 0
c Var 'aux1907' direct represents '1' with '7775'
7773 -7774 7775 0
-7775 7774 0
-7775 -7773 0
c Var 'aux1907' direct represents '2' with '-7774'
7773 7775 -7774 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7776'
c Var 'aux1908' direct represents '0' with '7776'
c Var 'aux1908' order represents '1' with '7777'
-7776 7777 0
c Var 'aux1908' direct represents '1' with '7778'
7776 -7777 7778 0
-7778 7777 0
-7778 -7776 0
c Var 'aux1908' direct represents '2' with '-7777'
7776 7778 -7777 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7779'
c Var 'aux1909' direct represents '0' with '7779'
c Var 'aux1909' order represents '1' with '7780'
-7779 7780 0
c Var 'aux1909' direct represents '1' with '7781'
7779 -7780 7781 0
-7781 7780 0
-7781 -7779 0
c Var 'aux1909' direct represents '2' with '-7780'
7779 7781 -7780 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7782'
c Var 'aux1910' direct represents '0' with '7782'
c Var 'aux1910' order represents '1' with '7783'
-7782 7783 0
c Var 'aux1910' direct represents '1' with '7784'
7782 -7783 7784 0
-7784 7783 0
-7784 -7782 0
c Var 'aux1910' direct represents '2' with '-7783'
7782 7784 -7783 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7785'
c Var 'aux1911' direct represents '0' with '7785'
c Var 'aux1911' order represents '1' with '7786'
-7785 7786 0
c Var 'aux1911' direct represents '1' with '7787'
7785 -7786 7787 0
-7787 7786 0
-7787 -7785 0
c Var 'aux1911' direct represents '2' with '-7786'
7785 7787 -7786 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7788'
c Var 'aux1912' direct represents '0' with '7788'
c Var 'aux1912' order represents '1' with '7789'
-7788 7789 0
c Var 'aux1912' direct represents '1' with '7790'
7788 -7789 7790 0
-7790 7789 0
-7790 -7788 0
c Var 'aux1912' direct represents '2' with '-7789'
7788 7790 -7789 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7791'
c Var 'aux1913' direct represents '0' with '7791'
c Var 'aux1913' order represents '1' with '7792'
-7791 7792 0
c Var 'aux1913' direct represents '1' with '7793'
7791 -7792 7793 0
-7793 7792 0
-7793 -7791 0
c Var 'aux1913' direct represents '2' with '-7792'
7791 7793 -7792 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7794'
c Var 'aux1914' direct represents '0' with '7794'
c Var 'aux1914' order represents '1' with '7795'
-7794 7795 0
c Var 'aux1914' direct represents '1' with '7796'
7794 -7795 7796 0
-7796 7795 0
-7796 -7794 0
c Var 'aux1914' direct represents '2' with '-7795'
7794 7796 -7795 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7797'
c Var 'aux1915' direct represents '0' with '7797'
c Var 'aux1915' order represents '1' with '7798'
-7797 7798 0
c Var 'aux1915' direct represents '1' with '7799'
7797 -7798 7799 0
-7799 7798 0
-7799 -7797 0
c Var 'aux1915' direct represents '2' with '-7798'
7797 7799 -7798 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7800'
c Var 'aux1916' direct represents '0' with '7800'
c Var 'aux1916' order represents '1' with '7801'
-7800 7801 0
c Var 'aux1916' direct represents '1' with '7802'
7800 -7801 7802 0
-7802 7801 0
-7802 -7800 0
c Var 'aux1916' direct represents '2' with '-7801'
7800 7802 -7801 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7803'
c Var 'aux1917' direct represents '0' with '7803'
c Var 'aux1917' order represents '1' with '7804'
-7803 7804 0
c Var 'aux1917' direct represents '1' with '7805'
7803 -7804 7805 0
-7805 7804 0
-7805 -7803 0
c Var 'aux1917' direct represents '2' with '-7804'
7803 7805 -7804 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7806'
c Var 'aux1918' direct represents '0' with '7806'
c Var 'aux1918' order represents '1' with '7807'
-7806 7807 0
c Var 'aux1918' direct represents '1' with '7808'
7806 -7807 7808 0
-7808 7807 0
-7808 -7806 0
c Var 'aux1918' direct represents '2' with '-7807'
7806 7808 -7807 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7809'
c Var 'aux1919' direct represents '0' with '7809'
c Var 'aux1919' order represents '1' with '7810'
-7809 7810 0
c Var 'aux1919' direct represents '1' with '7811'
7809 -7810 7811 0
-7811 7810 0
-7811 -7809 0
c Var 'aux1919' direct represents '2' with '-7810'
7809 7811 -7810 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7812'
c Var 'aux1920' direct represents '0' with '7812'
c Var 'aux1920' order represents '1' with '7813'
-7812 7813 0
c Var 'aux1920' direct represents '1' with '7814'
7812 -7813 7814 0
-7814 7813 0
-7814 -7812 0
c Var 'aux1920' direct represents '2' with '-7813'
7812 7814 -7813 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7815'
c Var 'aux1921' direct represents '0' with '7815'
c Var 'aux1921' order represents '1' with '7816'
-7815 7816 0
c Var 'aux1921' direct represents '1' with '7817'
7815 -7816 7817 0
-7817 7816 0
-7817 -7815 0
c Var 'aux1921' direct represents '2' with '-7816'
7815 7817 -7816 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7818'
c Var 'aux1922' direct represents '0' with '7818'
c Var 'aux1922' order represents '1' with '7819'
-7818 7819 0
c Var 'aux1922' direct represents '1' with '7820'
7818 -7819 7820 0
-7820 7819 0
-7820 -7818 0
c Var 'aux1922' direct represents '2' with '-7819'
7818 7820 -7819 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7821'
c Var 'aux1923' direct represents '0' with '7821'
c Var 'aux1923' order represents '1' with '7822'
-7821 7822 0
c Var 'aux1923' direct represents '1' with '7823'
7821 -7822 7823 0
-7823 7822 0
-7823 -7821 0
c Var 'aux1923' direct represents '2' with '-7822'
7821 7823 -7822 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '7824'
c Var 'aux1924' direct represents '0' with '7824'
c Var 'aux1924' order represents '1' with '7825'
-7824 7825 0
c Var 'aux1924' direct represents '1' with '7826'
7824 -7825 7826 0
-7826 7825 0
-7826 -7824 0
c Var 'aux1924' direct represents '2' with '-7825'
7824 7826 -7825 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '7827'
c Var 'aux1925' direct represents '0' with '7827'
c Var 'aux1925' order represents '1' with '7828'
-7827 7828 0
c Var 'aux1925' direct represents '1' with '7829'
7827 -7828 7829 0
-7829 7828 0
-7829 -7827 0
c Var 'aux1925' direct represents '2' with '-7828'
7827 7829 -7828 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '7830'
c Var 'aux1926' direct represents '0' with '7830'
c Var 'aux1926' order represents '1' with '7831'
-7830 7831 0
c Var 'aux1926' direct represents '1' with '7832'
7830 -7831 7832 0
-7832 7831 0
-7832 -7830 0
c Var 'aux1926' direct represents '2' with '-7831'
7830 7832 -7831 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '7833'
c Var 'aux1927' direct represents '0' with '7833'
c Var 'aux1927' order represents '1' with '7834'
-7833 7834 0
c Var 'aux1927' direct represents '1' with '7835'
7833 -7834 7835 0
-7835 7834 0
-7835 -7833 0
c Var 'aux1927' direct represents '2' with '-7834'
7833 7835 -7834 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '7836'
c Var 'aux1928' direct represents '0' with '7836'
c Var 'aux1928' order represents '1' with '7837'
-7836 7837 0
c Var 'aux1928' direct represents '1' with '7838'
7836 -7837 7838 0
-7838 7837 0
-7838 -7836 0
c Var 'aux1928' direct represents '2' with '-7837'
7836 7838 -7837 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '7839'
c Var 'aux1929' direct represents '0' with '7839'
c Var 'aux1929' order represents '1' with '7840'
-7839 7840 0
c Var 'aux1929' direct represents '1' with '7841'
7839 -7840 7841 0
-7841 7840 0
-7841 -7839 0
c Var 'aux1929' direct represents '2' with '-7840'
7839 7841 -7840 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '7842'
c Var 'aux1930' direct represents '0' with '7842'
c Var 'aux1930' order represents '1' with '7843'
-7842 7843 0
c Var 'aux1930' direct represents '1' with '7844'
7842 -7843 7844 0
-7844 7843 0
-7844 -7842 0
c Var 'aux1930' direct represents '2' with '-7843'
7842 7844 -7843 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '7845'
c Var 'aux1931' direct represents '0' with '7845'
c Var 'aux1931' order represents '1' with '7846'
-7845 7846 0
c Var 'aux1931' direct represents '1' with '7847'
7845 -7846 7847 0
-7847 7846 0
-7847 -7845 0
c Var 'aux1931' direct represents '2' with '-7846'
7845 7847 -7846 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '7848'
c Var 'aux1932' direct represents '0' with '7848'
c Var 'aux1932' order represents '1' with '7849'
-7848 7849 0
c Var 'aux1932' direct represents '1' with '7850'
7848 -7849 7850 0
-7850 7849 0
-7850 -7848 0
c Var 'aux1932' direct represents '2' with '-7849'
7848 7850 -7849 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '7851'
c Var 'aux1933' direct represents '0' with '7851'
c Var 'aux1933' order represents '1' with '7852'
-7851 7852 0
c Var 'aux1933' direct represents '1' with '7853'
7851 -7852 7853 0
-7853 7852 0
-7853 -7851 0
c Var 'aux1933' direct represents '2' with '-7852'
7851 7853 -7852 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '7854'
c Var 'aux1934' direct represents '0' with '7854'
c Var 'aux1934' order represents '1' with '7855'
-7854 7855 0
c Var 'aux1934' direct represents '1' with '7856'
7854 -7855 7856 0
-7856 7855 0
-7856 -7854 0
c Var 'aux1934' direct represents '2' with '-7855'
7854 7856 -7855 0
c Encoding variable: aux1935 with domain: bool (representing constraint ((aux427 + shift(x_00001_00002, -1) + shift(x_00001_00003, -1))<=21))
c Var 'aux1935' direct represents '0' with '-7857'
c Var 'aux1935' direct represents '1' with '7857'
c Var 'aux1935' order represents '1' with '1'
c Var 'aux1935' order represents '0' with '-7857'
c Encoding variable: aux1936 with domain: bool (representing constraint (21<=(aux427 + shift(x_00001_00002, -1) + shift(x_00001_00003, -1))))
c Var 'aux1936' direct represents '0' with '-7858'
c Var 'aux1936' direct represents '1' with '7858'
c Var 'aux1936' order represents '1' with '1'
c Var 'aux1936' order represents '0' with '-7858'
c Encoding variable: aux1937 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006)<=3))
c Var 'aux1937' direct represents '0' with '-7859'
c Var 'aux1937' direct represents '1' with '7859'
c Var 'aux1937' order represents '1' with '1'
c Var 'aux1937' order represents '0' with '-7859'
c Encoding variable: aux1938 with domain: bool (representing constraint (3<=(x_00001_00005 + x_00001_00006)))
c Var 'aux1938' direct represents '0' with '-7860'
c Var 'aux1938' direct represents '1' with '7860'
c Var 'aux1938' order represents '1' with '1'
c Var 'aux1938' order represents '0' with '-7860'
c Encoding variable: aux1939 with domain: bool (representing constraint ((x_00001_00007 + x_00001_00008)<=11))
c Var 'aux1939' direct represents '0' with '-7861'
c Var 'aux1939' direct represents '1' with '7861'
c Var 'aux1939' order represents '1' with '1'
c Var 'aux1939' order represents '0' with '-7861'
c Encoding variable: aux1940 with domain: bool (representing constraint (11<=(x_00001_00007 + x_00001_00008)))
c Var 'aux1940' direct represents '0' with '-7862'
c Var 'aux1940' direct represents '1' with '7862'
c Var 'aux1940' order represents '1' with '1'
c Var 'aux1940' order represents '0' with '-7862'
c Encoding variable: aux1941 with domain: bool (representing constraint ((aux428 + shift(x_00003_00008, -1) + shift(x_00003_00009, -1))<=17))
c Var 'aux1941' direct represents '0' with '-7863'
c Var 'aux1941' direct represents '1' with '7863'
c Var 'aux1941' order represents '1' with '1'
c Var 'aux1941' order represents '0' with '-7863'
c Encoding variable: aux1942 with domain: bool (representing constraint (17<=(aux428 + shift(x_00003_00008, -1) + shift(x_00003_00009, -1))))
c Var 'aux1942' direct represents '0' with '-7864'
c Var 'aux1942' direct represents '1' with '7864'
c Var 'aux1942' order represents '1' with '1'
c Var 'aux1942' order represents '0' with '-7864'
c Encoding variable: aux1943 with domain: bool (representing constraint ((x_00002_00002 + x_00002_00003 + x_00002_00004)<=18))
c Var 'aux1943' direct represents '0' with '-7865'
c Var 'aux1943' direct represents '1' with '7865'
c Var 'aux1943' order represents '1' with '1'
c Var 'aux1943' order represents '0' with '-7865'
c Encoding variable: aux1944 with domain: bool (representing constraint (18<=(x_00002_00002 + x_00002_00003 + x_00002_00004)))
c Var 'aux1944' direct represents '0' with '-7866'
c Var 'aux1944' direct represents '1' with '7866'
c Var 'aux1944' order represents '1' with '1'
c Var 'aux1944' order represents '0' with '-7866'
c Encoding variable: aux1945 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006)<=7))
c Var 'aux1945' direct represents '0' with '-7867'
c Var 'aux1945' direct represents '1' with '7867'
c Var 'aux1945' order represents '1' with '1'
c Var 'aux1945' order represents '0' with '-7867'
c Encoding variable: aux1946 with domain: bool (representing constraint (7<=(x_00002_00005 + x_00002_00006)))
c Var 'aux1946' direct represents '0' with '-7868'
c Var 'aux1946' direct represents '1' with '7868'
c Var 'aux1946' order represents '1' with '1'
c Var 'aux1946' order represents '0' with '-7868'
c Encoding variable: aux1947 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00003_00007)<=13))
c Var 'aux1947' direct represents '0' with '-7869'
c Var 'aux1947' direct represents '1' with '7869'
c Var 'aux1947' order represents '1' with '1'
c Var 'aux1947' order represents '0' with '-7869'
c Encoding variable: aux1948 with domain: bool (representing constraint (13<=(x_00002_00007 + x_00002_00008 + x_00003_00007)))
c Var 'aux1948' direct represents '0' with '-7870'
c Var 'aux1948' direct represents '1' with '7870'
c Var 'aux1948' order represents '1' with '1'
c Var 'aux1948' order represents '0' with '-7870'
c Encoding variable: aux1949 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002)<=5))
c Var 'aux1949' direct represents '0' with '-7871'
c Var 'aux1949' direct represents '1' with '7871'
c Var 'aux1949' order represents '1' with '1'
c Var 'aux1949' order represents '0' with '-7871'
c Encoding variable: aux1950 with domain: bool (representing constraint (5<=(x_00003_00001 + x_00003_00002)))
c Var 'aux1950' direct represents '0' with '-7872'
c Var 'aux1950' direct represents '1' with '7872'
c Var 'aux1950' order represents '1' with '1'
c Var 'aux1950' order represents '0' with '-7872'
c Encoding variable: aux1951 with domain: bool (representing constraint ((x_00003_00004 + x_00004_00004 + x_00004_00005)<=16))
c Var 'aux1951' direct represents '0' with '-7873'
c Var 'aux1951' direct represents '1' with '7873'
c Var 'aux1951' order represents '1' with '1'
c Var 'aux1951' order represents '0' with '-7873'
c Encoding variable: aux1952 with domain: bool (representing constraint (16<=(x_00003_00004 + x_00004_00004 + x_00004_00005)))
c Var 'aux1952' direct represents '0' with '-7874'
c Var 'aux1952' direct represents '1' with '7874'
c Var 'aux1952' order represents '1' with '1'
c Var 'aux1952' order represents '0' with '-7874'
c Encoding variable: aux1953 with domain: bool (representing constraint ((x_00003_00005 + x_00003_00006)<=14))
c Var 'aux1953' direct represents '0' with '-7875'
c Var 'aux1953' direct represents '1' with '7875'
c Var 'aux1953' order represents '1' with '1'
c Var 'aux1953' order represents '0' with '-7875'
c Encoding variable: aux1954 with domain: bool (representing constraint (14<=(x_00003_00005 + x_00003_00006)))
c Var 'aux1954' direct represents '0' with '-7876'
c Var 'aux1954' direct represents '1' with '7876'
c Var 'aux1954' order represents '1' with '1'
c Var 'aux1954' order represents '0' with '-7876'
c Encoding variable: aux1955 with domain: bool (representing constraint ((x_00004_00001 + x_00005_00001 + x_00006_00001)<=8))
c Var 'aux1955' direct represents '0' with '-7877'
c Var 'aux1955' direct represents '1' with '7877'
c Var 'aux1955' order represents '1' with '1'
c Var 'aux1955' order represents '0' with '-7877'
c Encoding variable: aux1956 with domain: bool (representing constraint (8<=(x_00004_00001 + x_00005_00001 + x_00006_00001)))
c Var 'aux1956' direct represents '0' with '-7878'
c Var 'aux1956' direct represents '1' with '7878'
c Var 'aux1956' order represents '1' with '1'
c Var 'aux1956' order represents '0' with '-7878'
c Encoding variable: aux1957 with domain: bool (representing constraint ((x_00004_00002 + x_00004_00003)<=14))
c Var 'aux1957' direct represents '0' with '-7879'
c Var 'aux1957' direct represents '1' with '7879'
c Var 'aux1957' order represents '1' with '1'
c Var 'aux1957' order represents '0' with '-7879'
c Encoding variable: aux1958 with domain: bool (representing constraint (14<=(x_00004_00002 + x_00004_00003)))
c Var 'aux1958' direct represents '0' with '-7880'
c Var 'aux1958' direct represents '1' with '7880'
c Var 'aux1958' order represents '1' with '1'
c Var 'aux1958' order represents '0' with '-7880'
c Encoding variable: aux1959 with domain: bool (representing constraint ((aux429 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1))<=16))
c Var 'aux1959' direct represents '0' with '-7881'
c Var 'aux1959' direct represents '1' with '7881'
c Var 'aux1959' order represents '1' with '1'
c Var 'aux1959' order represents '0' with '-7881'
c Encoding variable: aux1960 with domain: bool (representing constraint (16<=(aux429 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1))))
c Var 'aux1960' direct represents '0' with '-7882'
c Var 'aux1960' direct represents '1' with '7882'
c Var 'aux1960' order represents '1' with '1'
c Var 'aux1960' order represents '0' with '-7882'
c Encoding variable: aux1961 with domain: bool (representing constraint ((x_00004_00007 + x_00004_00008 + x_00005_00008)<=11))
c Var 'aux1961' direct represents '0' with '-7883'
c Var 'aux1961' direct represents '1' with '7883'
c Var 'aux1961' order represents '1' with '1'
c Var 'aux1961' order represents '0' with '-7883'
c Encoding variable: aux1962 with domain: bool (representing constraint (11<=(x_00004_00007 + x_00004_00008 + x_00005_00008)))
c Var 'aux1962' direct represents '0' with '-7884'
c Var 'aux1962' direct represents '1' with '7884'
c Var 'aux1962' order represents '1' with '1'
c Var 'aux1962' order represents '0' with '-7884'
c Encoding variable: aux1963 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009 + x_00006_00009)<=16))
c Var 'aux1963' direct represents '0' with '-7885'
c Var 'aux1963' direct represents '1' with '7885'
c Var 'aux1963' order represents '1' with '1'
c Var 'aux1963' order represents '0' with '-7885'
c Encoding variable: aux1964 with domain: bool (representing constraint (16<=(x_00004_00009 + x_00005_00009 + x_00006_00009)))
c Var 'aux1964' direct represents '0' with '-7886'
c Var 'aux1964' direct represents '1' with '7886'
c Var 'aux1964' order represents '1' with '1'
c Var 'aux1964' order represents '0' with '-7886'
c Encoding variable: aux1965 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002 + x_00006_00003)<=18))
c Var 'aux1965' direct represents '0' with '-7887'
c Var 'aux1965' direct represents '1' with '7887'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-7887'
c Encoding variable: aux1966 with domain: bool (representing constraint (18<=(x_00005_00002 + x_00006_00002 + x_00006_00003)))
c Var 'aux1966' direct represents '0' with '-7888'
c Var 'aux1966' direct represents '1' with '7888'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-7888'
c Encoding variable: aux1967 with domain: bool (representing constraint ((x_00005_00003 + x_00005_00004 + x_00006_00004)<=16))
c Var 'aux1967' direct represents '0' with '-7889'
c Var 'aux1967' direct represents '1' with '7889'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-7889'
c Encoding variable: aux1968 with domain: bool (representing constraint (16<=(x_00005_00003 + x_00005_00004 + x_00006_00004)))
c Var 'aux1968' direct represents '0' with '-7890'
c Var 'aux1968' direct represents '1' with '7890'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-7890'
c Encoding variable: aux1969 with domain: bool (representing constraint ((x_00007_00006 + x_00006_00005 + x_00006_00006)<=15))
c Var 'aux1969' direct represents '0' with '-7891'
c Var 'aux1969' direct represents '1' with '7891'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-7891'
c Encoding variable: aux1970 with domain: bool (representing constraint (15<=(x_00007_00006 + x_00006_00005 + x_00006_00006)))
c Var 'aux1970' direct represents '0' with '-7892'
c Var 'aux1970' direct represents '1' with '7892'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-7892'
c Encoding variable: aux1971 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)<=15))
c Var 'aux1971' direct represents '0' with '-7893'
c Var 'aux1971' direct represents '1' with '7893'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-7893'
c Encoding variable: aux1972 with domain: bool (representing constraint (15<=(x_00006_00007 + x_00006_00008)))
c Var 'aux1972' direct represents '0' with '-7894'
c Var 'aux1972' direct represents '1' with '7894'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-7894'
c Encoding variable: aux1973 with domain: bool (representing constraint ((shift(x_00007_00002, -1) + aux430 + shift(x_00008_00001, -1))<=21))
c Var 'aux1973' direct represents '0' with '-7895'
c Var 'aux1973' direct represents '1' with '7895'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-7895'
c Encoding variable: aux1974 with domain: bool (representing constraint (21<=(shift(x_00007_00002, -1) + aux430 + shift(x_00008_00001, -1))))
c Var 'aux1974' direct represents '0' with '-7896'
c Var 'aux1974' direct represents '1' with '7896'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-7896'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00007_00003 + x_00008_00002 + x_00008_00003)<=14))
c Var 'aux1975' direct represents '0' with '-7897'
c Var 'aux1975' direct represents '1' with '7897'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-7897'
c Encoding variable: aux1976 with domain: bool (representing constraint (14<=(x_00007_00003 + x_00008_00002 + x_00008_00003)))
c Var 'aux1976' direct represents '0' with '-7898'
c Var 'aux1976' direct represents '1' with '7898'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-7898'
c Encoding variable: aux1977 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005)<=12))
c Var 'aux1977' direct represents '0' with '-7899'
c Var 'aux1977' direct represents '1' with '7899'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-7899'
c Encoding variable: aux1978 with domain: bool (representing constraint (12<=(x_00007_00004 + x_00007_00005)))
c Var 'aux1978' direct represents '0' with '-7900'
c Var 'aux1978' direct represents '1' with '7900'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-7900'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009)<=7))
c Var 'aux1979' direct represents '0' with '-7901'
c Var 'aux1979' direct represents '1' with '7901'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-7901'
c Encoding variable: aux1980 with domain: bool (representing constraint (7<=(x_00007_00008 + x_00007_00009)))
c Var 'aux1980' direct represents '0' with '-7902'
c Var 'aux1980' direct represents '1' with '7902'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-7902'
c Encoding variable: aux1981 with domain: bool (representing constraint ((x_00008_00004 + x_00008_00005)<=3))
c Var 'aux1981' direct represents '0' with '-7903'
c Var 'aux1981' direct represents '1' with '7903'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-7903'
c Encoding variable: aux1982 with domain: bool (representing constraint (3<=(x_00008_00004 + x_00008_00005)))
c Var 'aux1982' direct represents '0' with '-7904'
c Var 'aux1982' direct represents '1' with '7904'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-7904'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00008_00006 + x_00008_00007 + x_00008_00008)<=19))
c Var 'aux1983' direct represents '0' with '-7905'
c Var 'aux1983' direct represents '1' with '7905'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-7905'
c Encoding variable: aux1984 with domain: bool (representing constraint (19<=(x_00008_00006 + x_00008_00007 + x_00008_00008)))
c Var 'aux1984' direct represents '0' with '-7906'
c Var 'aux1984' direct represents '1' with '7906'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-7906'
c Encoding variable: aux1985 with domain: bool (representing constraint ((x_00009_00002 + x_00009_00003)<=6))
c Var 'aux1985' direct represents '0' with '-7907'
c Var 'aux1985' direct represents '1' with '7907'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-7907'
c Encoding variable: aux1986 with domain: bool (representing constraint (6<=(x_00009_00002 + x_00009_00003)))
c Var 'aux1986' direct represents '0' with '-7908'
c Var 'aux1986' direct represents '1' with '7908'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-7908'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00009_00004 + x_00009_00005)<=13))
c Var 'aux1987' direct represents '0' with '-7909'
c Var 'aux1987' direct represents '1' with '7909'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-7909'
c Encoding variable: aux1988 with domain: bool (representing constraint (13<=(x_00009_00004 + x_00009_00005)))
c Var 'aux1988' direct represents '0' with '-7910'
c Var 'aux1988' direct represents '1' with '7910'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-7910'
c Encoding variable: aux1989 with domain: bool (representing constraint ((aux431 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1))<=13))
c Var 'aux1989' direct represents '0' with '-7911'
c Var 'aux1989' direct represents '1' with '7911'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-7911'
c Encoding variable: aux1990 with domain: bool (representing constraint (13<=(aux431 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1))))
c Var 'aux1990' direct represents '0' with '-7912'
c Var 'aux1990' direct represents '1' with '7912'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-7912'
c Encoding variable: aux1991 with domain: bool (representing constraint ((aux433 + aux436 + aux437)<=1))
c Var 'aux1991' direct represents '0' with '-7913'
c Var 'aux1991' direct represents '1' with '7913'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-7913'
c Encoding variable: aux1992 with domain: bool (representing constraint (1<=(aux433 + aux436 + aux437)))
c Var 'aux1992' direct represents '0' with '-7914'
c Var 'aux1992' direct represents '1' with '7914'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-7914'
c Encoding variable: aux1993 with domain: bool (representing constraint ((aux439 + aux442 + aux443)<=1))
c Var 'aux1993' direct represents '0' with '-7915'
c Var 'aux1993' direct represents '1' with '7915'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-7915'
c Encoding variable: aux1994 with domain: bool (representing constraint (1<=(aux439 + aux442 + aux443)))
c Var 'aux1994' direct represents '0' with '-7916'
c Var 'aux1994' direct represents '1' with '7916'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-7916'
c Encoding variable: aux1995 with domain: bool (representing constraint ((aux445 + aux448 + aux449)<=1))
c Var 'aux1995' direct represents '0' with '-7917'
c Var 'aux1995' direct represents '1' with '7917'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-7917'
c Encoding variable: aux1996 with domain: bool (representing constraint (1<=(aux445 + aux448 + aux449)))
c Var 'aux1996' direct represents '0' with '-7918'
c Var 'aux1996' direct represents '1' with '7918'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-7918'
c Encoding variable: aux1997 with domain: bool (representing constraint ((aux451 + aux454 + aux455)<=1))
c Var 'aux1997' direct represents '0' with '-7919'
c Var 'aux1997' direct represents '1' with '7919'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-7919'
c Encoding variable: aux1998 with domain: bool (representing constraint (1<=(aux451 + aux454 + aux455)))
c Var 'aux1998' direct represents '0' with '-7920'
c Var 'aux1998' direct represents '1' with '7920'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-7920'
c Encoding variable: aux1999 with domain: bool (representing constraint ((aux457 + aux460 + aux461)<=1))
c Var 'aux1999' direct represents '0' with '-7921'
c Var 'aux1999' direct represents '1' with '7921'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-7921'
c Encoding variable: aux2000 with domain: bool (representing constraint (1<=(aux457 + aux460 + aux461)))
c Var 'aux2000' direct represents '0' with '-7922'
c Var 'aux2000' direct represents '1' with '7922'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-7922'
c Encoding variable: aux2001 with domain: bool (representing constraint ((aux463 + aux466 + aux467)<=1))
c Var 'aux2001' direct represents '0' with '-7923'
c Var 'aux2001' direct represents '1' with '7923'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-7923'
c Encoding variable: aux2002 with domain: bool (representing constraint (1<=(aux463 + aux466 + aux467)))
c Var 'aux2002' direct represents '0' with '-7924'
c Var 'aux2002' direct represents '1' with '7924'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-7924'
c Encoding variable: aux2003 with domain: bool (representing constraint ((aux469 + aux472 + aux473)<=1))
c Var 'aux2003' direct represents '0' with '-7925'
c Var 'aux2003' direct represents '1' with '7925'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-7925'
c Encoding variable: aux2004 with domain: bool (representing constraint (1<=(aux469 + aux472 + aux473)))
c Var 'aux2004' direct represents '0' with '-7926'
c Var 'aux2004' direct represents '1' with '7926'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-7926'
c Encoding variable: aux2005 with domain: bool (representing constraint ((aux475 + aux478 + aux479)<=1))
c Var 'aux2005' direct represents '0' with '-7927'
c Var 'aux2005' direct represents '1' with '7927'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-7927'
c Encoding variable: aux2006 with domain: bool (representing constraint (1<=(aux475 + aux478 + aux479)))
c Var 'aux2006' direct represents '0' with '-7928'
c Var 'aux2006' direct represents '1' with '7928'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-7928'
c Encoding variable: aux2007 with domain: bool (representing constraint ((aux481 + aux484 + aux485)<=1))
c Var 'aux2007' direct represents '0' with '-7929'
c Var 'aux2007' direct represents '1' with '7929'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-7929'
c Encoding variable: aux2008 with domain: bool (representing constraint (1<=(aux481 + aux484 + aux485)))
c Var 'aux2008' direct represents '0' with '-7930'
c Var 'aux2008' direct represents '1' with '7930'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-7930'
c Encoding variable: aux2009 with domain: bool (representing constraint ((aux487 + aux490 + aux491)<=1))
c Var 'aux2009' direct represents '0' with '-7931'
c Var 'aux2009' direct represents '1' with '7931'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-7931'
c Encoding variable: aux2010 with domain: bool (representing constraint (1<=(aux487 + aux490 + aux491)))
c Var 'aux2010' direct represents '0' with '-7932'
c Var 'aux2010' direct represents '1' with '7932'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-7932'
c Encoding variable: aux2011 with domain: bool (representing constraint ((aux493 + aux496 + aux497)<=1))
c Var 'aux2011' direct represents '0' with '-7933'
c Var 'aux2011' direct represents '1' with '7933'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-7933'
c Encoding variable: aux2012 with domain: bool (representing constraint (1<=(aux493 + aux496 + aux497)))
c Var 'aux2012' direct represents '0' with '-7934'
c Var 'aux2012' direct represents '1' with '7934'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-7934'
c Encoding variable: aux2013 with domain: bool (representing constraint ((aux499 + aux502 + aux503)<=1))
c Var 'aux2013' direct represents '0' with '-7935'
c Var 'aux2013' direct represents '1' with '7935'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-7935'
c Encoding variable: aux2014 with domain: bool (representing constraint (1<=(aux499 + aux502 + aux503)))
c Var 'aux2014' direct represents '0' with '-7936'
c Var 'aux2014' direct represents '1' with '7936'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-7936'
c Encoding variable: aux2015 with domain: bool (representing constraint ((aux505 + aux508 + aux509)<=1))
c Var 'aux2015' direct represents '0' with '-7937'
c Var 'aux2015' direct represents '1' with '7937'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-7937'
c Encoding variable: aux2016 with domain: bool (representing constraint (1<=(aux505 + aux508 + aux509)))
c Var 'aux2016' direct represents '0' with '-7938'
c Var 'aux2016' direct represents '1' with '7938'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-7938'
c Encoding variable: aux2017 with domain: bool (representing constraint ((aux511 + aux514 + aux515)<=1))
c Var 'aux2017' direct represents '0' with '-7939'
c Var 'aux2017' direct represents '1' with '7939'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-7939'
c Encoding variable: aux2018 with domain: bool (representing constraint (1<=(aux511 + aux514 + aux515)))
c Var 'aux2018' direct represents '0' with '-7940'
c Var 'aux2018' direct represents '1' with '7940'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-7940'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux517 + aux520 + aux521)<=1))
c Var 'aux2019' direct represents '0' with '-7941'
c Var 'aux2019' direct represents '1' with '7941'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-7941'
c Encoding variable: aux2020 with domain: bool (representing constraint (1<=(aux517 + aux520 + aux521)))
c Var 'aux2020' direct represents '0' with '-7942'
c Var 'aux2020' direct represents '1' with '7942'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-7942'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux523 + aux526 + aux527)<=1))
c Var 'aux2021' direct represents '0' with '-7943'
c Var 'aux2021' direct represents '1' with '7943'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-7943'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux523 + aux526 + aux527)))
c Var 'aux2022' direct represents '0' with '-7944'
c Var 'aux2022' direct represents '1' with '7944'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-7944'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux529 + aux532 + aux533)<=1))
c Var 'aux2023' direct represents '0' with '-7945'
c Var 'aux2023' direct represents '1' with '7945'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-7945'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux529 + aux532 + aux533)))
c Var 'aux2024' direct represents '0' with '-7946'
c Var 'aux2024' direct represents '1' with '7946'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-7946'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux535 + aux538 + aux539)<=1))
c Var 'aux2025' direct represents '0' with '-7947'
c Var 'aux2025' direct represents '1' with '7947'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-7947'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux535 + aux538 + aux539)))
c Var 'aux2026' direct represents '0' with '-7948'
c Var 'aux2026' direct represents '1' with '7948'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-7948'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux541 + aux544 + aux545)<=1))
c Var 'aux2027' direct represents '0' with '-7949'
c Var 'aux2027' direct represents '1' with '7949'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-7949'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux541 + aux544 + aux545)))
c Var 'aux2028' direct represents '0' with '-7950'
c Var 'aux2028' direct represents '1' with '7950'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-7950'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux547 + aux550 + aux551)<=1))
c Var 'aux2029' direct represents '0' with '-7951'
c Var 'aux2029' direct represents '1' with '7951'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-7951'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux547 + aux550 + aux551)))
c Var 'aux2030' direct represents '0' with '-7952'
c Var 'aux2030' direct represents '1' with '7952'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-7952'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux553 + aux556 + aux557)<=1))
c Var 'aux2031' direct represents '0' with '-7953'
c Var 'aux2031' direct represents '1' with '7953'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-7953'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux553 + aux556 + aux557)))
c Var 'aux2032' direct represents '0' with '-7954'
c Var 'aux2032' direct represents '1' with '7954'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-7954'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux559 + aux562 + aux563)<=1))
c Var 'aux2033' direct represents '0' with '-7955'
c Var 'aux2033' direct represents '1' with '7955'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-7955'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux559 + aux562 + aux563)))
c Var 'aux2034' direct represents '0' with '-7956'
c Var 'aux2034' direct represents '1' with '7956'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-7956'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux565 + aux568 + aux569)<=1))
c Var 'aux2035' direct represents '0' with '-7957'
c Var 'aux2035' direct represents '1' with '7957'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-7957'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux565 + aux568 + aux569)))
c Var 'aux2036' direct represents '0' with '-7958'
c Var 'aux2036' direct represents '1' with '7958'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-7958'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux571 + aux574 + aux575)<=1))
c Var 'aux2037' direct represents '0' with '-7959'
c Var 'aux2037' direct represents '1' with '7959'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-7959'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux571 + aux574 + aux575)))
c Var 'aux2038' direct represents '0' with '-7960'
c Var 'aux2038' direct represents '1' with '7960'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-7960'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux577 + aux580 + aux581)<=1))
c Var 'aux2039' direct represents '0' with '-7961'
c Var 'aux2039' direct represents '1' with '7961'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-7961'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux577 + aux580 + aux581)))
c Var 'aux2040' direct represents '0' with '-7962'
c Var 'aux2040' direct represents '1' with '7962'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-7962'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux583 + aux586 + aux587)<=1))
c Var 'aux2041' direct represents '0' with '-7963'
c Var 'aux2041' direct represents '1' with '7963'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-7963'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux583 + aux586 + aux587)))
c Var 'aux2042' direct represents '0' with '-7964'
c Var 'aux2042' direct represents '1' with '7964'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-7964'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux589 + aux592 + aux593)<=1))
c Var 'aux2043' direct represents '0' with '-7965'
c Var 'aux2043' direct represents '1' with '7965'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-7965'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux589 + aux592 + aux593)))
c Var 'aux2044' direct represents '0' with '-7966'
c Var 'aux2044' direct represents '1' with '7966'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-7966'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux595 + aux598 + aux599)<=1))
c Var 'aux2045' direct represents '0' with '-7967'
c Var 'aux2045' direct represents '1' with '7967'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-7967'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux595 + aux598 + aux599)))
c Var 'aux2046' direct represents '0' with '-7968'
c Var 'aux2046' direct represents '1' with '7968'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-7968'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux601 + aux604 + aux605)<=1))
c Var 'aux2047' direct represents '0' with '-7969'
c Var 'aux2047' direct represents '1' with '7969'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-7969'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux601 + aux604 + aux605)))
c Var 'aux2048' direct represents '0' with '-7970'
c Var 'aux2048' direct represents '1' with '7970'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-7970'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux607 + aux610 + aux611)<=1))
c Var 'aux2049' direct represents '0' with '-7971'
c Var 'aux2049' direct represents '1' with '7971'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-7971'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux607 + aux610 + aux611)))
c Var 'aux2050' direct represents '0' with '-7972'
c Var 'aux2050' direct represents '1' with '7972'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-7972'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux613 + aux616 + aux617)<=1))
c Var 'aux2051' direct represents '0' with '-7973'
c Var 'aux2051' direct represents '1' with '7973'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-7973'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux613 + aux616 + aux617)))
c Var 'aux2052' direct represents '0' with '-7974'
c Var 'aux2052' direct represents '1' with '7974'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-7974'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux619 + aux622 + aux623)<=1))
c Var 'aux2053' direct represents '0' with '-7975'
c Var 'aux2053' direct represents '1' with '7975'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-7975'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux619 + aux622 + aux623)))
c Var 'aux2054' direct represents '0' with '-7976'
c Var 'aux2054' direct represents '1' with '7976'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-7976'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux625 + aux628 + aux629)<=1))
c Var 'aux2055' direct represents '0' with '-7977'
c Var 'aux2055' direct represents '1' with '7977'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-7977'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux625 + aux628 + aux629)))
c Var 'aux2056' direct represents '0' with '-7978'
c Var 'aux2056' direct represents '1' with '7978'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-7978'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux631 + aux634 + aux635)<=1))
c Var 'aux2057' direct represents '0' with '-7979'
c Var 'aux2057' direct represents '1' with '7979'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-7979'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux631 + aux634 + aux635)))
c Var 'aux2058' direct represents '0' with '-7980'
c Var 'aux2058' direct represents '1' with '7980'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-7980'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux637 + aux640 + aux641)<=1))
c Var 'aux2059' direct represents '0' with '-7981'
c Var 'aux2059' direct represents '1' with '7981'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-7981'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux637 + aux640 + aux641)))
c Var 'aux2060' direct represents '0' with '-7982'
c Var 'aux2060' direct represents '1' with '7982'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-7982'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux643 + aux646 + aux647)<=1))
c Var 'aux2061' direct represents '0' with '-7983'
c Var 'aux2061' direct represents '1' with '7983'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-7983'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux643 + aux646 + aux647)))
c Var 'aux2062' direct represents '0' with '-7984'
c Var 'aux2062' direct represents '1' with '7984'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-7984'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux649 + aux652 + aux653)<=1))
c Var 'aux2063' direct represents '0' with '-7985'
c Var 'aux2063' direct represents '1' with '7985'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-7985'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux649 + aux652 + aux653)))
c Var 'aux2064' direct represents '0' with '-7986'
c Var 'aux2064' direct represents '1' with '7986'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-7986'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux655 + aux658 + aux659)<=1))
c Var 'aux2065' direct represents '0' with '-7987'
c Var 'aux2065' direct represents '1' with '7987'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-7987'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux655 + aux658 + aux659)))
c Var 'aux2066' direct represents '0' with '-7988'
c Var 'aux2066' direct represents '1' with '7988'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-7988'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux661 + aux664 + aux665)<=1))
c Var 'aux2067' direct represents '0' with '-7989'
c Var 'aux2067' direct represents '1' with '7989'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-7989'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux661 + aux664 + aux665)))
c Var 'aux2068' direct represents '0' with '-7990'
c Var 'aux2068' direct represents '1' with '7990'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-7990'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux667 + aux670 + aux671)<=1))
c Var 'aux2069' direct represents '0' with '-7991'
c Var 'aux2069' direct represents '1' with '7991'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-7991'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux667 + aux670 + aux671)))
c Var 'aux2070' direct represents '0' with '-7992'
c Var 'aux2070' direct represents '1' with '7992'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-7992'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux673 + aux676 + aux677)<=1))
c Var 'aux2071' direct represents '0' with '-7993'
c Var 'aux2071' direct represents '1' with '7993'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-7993'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux673 + aux676 + aux677)))
c Var 'aux2072' direct represents '0' with '-7994'
c Var 'aux2072' direct represents '1' with '7994'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-7994'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux679 + aux682 + aux683)<=1))
c Var 'aux2073' direct represents '0' with '-7995'
c Var 'aux2073' direct represents '1' with '7995'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-7995'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux679 + aux682 + aux683)))
c Var 'aux2074' direct represents '0' with '-7996'
c Var 'aux2074' direct represents '1' with '7996'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-7996'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux685 + aux688 + aux689)<=1))
c Var 'aux2075' direct represents '0' with '-7997'
c Var 'aux2075' direct represents '1' with '7997'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-7997'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux685 + aux688 + aux689)))
c Var 'aux2076' direct represents '0' with '-7998'
c Var 'aux2076' direct represents '1' with '7998'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-7998'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux691 + aux694 + aux695)<=1))
c Var 'aux2077' direct represents '0' with '-7999'
c Var 'aux2077' direct represents '1' with '7999'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-7999'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux691 + aux694 + aux695)))
c Var 'aux2078' direct represents '0' with '-8000'
c Var 'aux2078' direct represents '1' with '8000'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-8000'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux697 + aux700 + aux701)<=1))
c Var 'aux2079' direct represents '0' with '-8001'
c Var 'aux2079' direct represents '1' with '8001'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-8001'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux697 + aux700 + aux701)))
c Var 'aux2080' direct represents '0' with '-8002'
c Var 'aux2080' direct represents '1' with '8002'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-8002'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux703 + aux706 + aux707)<=1))
c Var 'aux2081' direct represents '0' with '-8003'
c Var 'aux2081' direct represents '1' with '8003'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-8003'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux703 + aux706 + aux707)))
c Var 'aux2082' direct represents '0' with '-8004'
c Var 'aux2082' direct represents '1' with '8004'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-8004'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux709 + aux712 + aux713)<=1))
c Var 'aux2083' direct represents '0' with '-8005'
c Var 'aux2083' direct represents '1' with '8005'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-8005'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux709 + aux712 + aux713)))
c Var 'aux2084' direct represents '0' with '-8006'
c Var 'aux2084' direct represents '1' with '8006'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-8006'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux715 + aux718 + aux719)<=1))
c Var 'aux2085' direct represents '0' with '-8007'
c Var 'aux2085' direct represents '1' with '8007'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-8007'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux715 + aux718 + aux719)))
c Var 'aux2086' direct represents '0' with '-8008'
c Var 'aux2086' direct represents '1' with '8008'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-8008'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux721 + aux724 + aux725)<=1))
c Var 'aux2087' direct represents '0' with '-8009'
c Var 'aux2087' direct represents '1' with '8009'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-8009'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux721 + aux724 + aux725)))
c Var 'aux2088' direct represents '0' with '-8010'
c Var 'aux2088' direct represents '1' with '8010'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-8010'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux727 + aux730 + aux731)<=1))
c Var 'aux2089' direct represents '0' with '-8011'
c Var 'aux2089' direct represents '1' with '8011'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-8011'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux727 + aux730 + aux731)))
c Var 'aux2090' direct represents '0' with '-8012'
c Var 'aux2090' direct represents '1' with '8012'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-8012'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux733 + aux736 + aux737)<=1))
c Var 'aux2091' direct represents '0' with '-8013'
c Var 'aux2091' direct represents '1' with '8013'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-8013'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux733 + aux736 + aux737)))
c Var 'aux2092' direct represents '0' with '-8014'
c Var 'aux2092' direct represents '1' with '8014'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-8014'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux739 + aux742 + aux743)<=1))
c Var 'aux2093' direct represents '0' with '-8015'
c Var 'aux2093' direct represents '1' with '8015'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-8015'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux739 + aux742 + aux743)))
c Var 'aux2094' direct represents '0' with '-8016'
c Var 'aux2094' direct represents '1' with '8016'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-8016'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux745 + aux748 + aux749)<=1))
c Var 'aux2095' direct represents '0' with '-8017'
c Var 'aux2095' direct represents '1' with '8017'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-8017'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux745 + aux748 + aux749)))
c Var 'aux2096' direct represents '0' with '-8018'
c Var 'aux2096' direct represents '1' with '8018'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-8018'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux751 + aux754 + aux755)<=1))
c Var 'aux2097' direct represents '0' with '-8019'
c Var 'aux2097' direct represents '1' with '8019'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-8019'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux751 + aux754 + aux755)))
c Var 'aux2098' direct represents '0' with '-8020'
c Var 'aux2098' direct represents '1' with '8020'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-8020'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux757 + aux760 + aux761)<=1))
c Var 'aux2099' direct represents '0' with '-8021'
c Var 'aux2099' direct represents '1' with '8021'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-8021'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux757 + aux760 + aux761)))
c Var 'aux2100' direct represents '0' with '-8022'
c Var 'aux2100' direct represents '1' with '8022'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-8022'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux763 + aux766 + aux767)<=1))
c Var 'aux2101' direct represents '0' with '-8023'
c Var 'aux2101' direct represents '1' with '8023'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-8023'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux763 + aux766 + aux767)))
c Var 'aux2102' direct represents '0' with '-8024'
c Var 'aux2102' direct represents '1' with '8024'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-8024'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux769 + aux772 + aux773)<=1))
c Var 'aux2103' direct represents '0' with '-8025'
c Var 'aux2103' direct represents '1' with '8025'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-8025'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux769 + aux772 + aux773)))
c Var 'aux2104' direct represents '0' with '-8026'
c Var 'aux2104' direct represents '1' with '8026'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-8026'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux775 + aux778 + aux779)<=1))
c Var 'aux2105' direct represents '0' with '-8027'
c Var 'aux2105' direct represents '1' with '8027'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-8027'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux775 + aux778 + aux779)))
c Var 'aux2106' direct represents '0' with '-8028'
c Var 'aux2106' direct represents '1' with '8028'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-8028'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux781 + aux784 + aux785)<=1))
c Var 'aux2107' direct represents '0' with '-8029'
c Var 'aux2107' direct represents '1' with '8029'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-8029'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux781 + aux784 + aux785)))
c Var 'aux2108' direct represents '0' with '-8030'
c Var 'aux2108' direct represents '1' with '8030'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-8030'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux787 + aux790 + aux791)<=1))
c Var 'aux2109' direct represents '0' with '-8031'
c Var 'aux2109' direct represents '1' with '8031'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-8031'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux787 + aux790 + aux791)))
c Var 'aux2110' direct represents '0' with '-8032'
c Var 'aux2110' direct represents '1' with '8032'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-8032'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux793 + aux796 + aux797)<=1))
c Var 'aux2111' direct represents '0' with '-8033'
c Var 'aux2111' direct represents '1' with '8033'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-8033'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux793 + aux796 + aux797)))
c Var 'aux2112' direct represents '0' with '-8034'
c Var 'aux2112' direct represents '1' with '8034'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-8034'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux799 + aux802 + aux803)<=1))
c Var 'aux2113' direct represents '0' with '-8035'
c Var 'aux2113' direct represents '1' with '8035'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-8035'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux799 + aux802 + aux803)))
c Var 'aux2114' direct represents '0' with '-8036'
c Var 'aux2114' direct represents '1' with '8036'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-8036'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux805 + aux808 + aux809)<=1))
c Var 'aux2115' direct represents '0' with '-8037'
c Var 'aux2115' direct represents '1' with '8037'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-8037'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux805 + aux808 + aux809)))
c Var 'aux2116' direct represents '0' with '-8038'
c Var 'aux2116' direct represents '1' with '8038'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-8038'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux811 + aux814 + aux815)<=1))
c Var 'aux2117' direct represents '0' with '-8039'
c Var 'aux2117' direct represents '1' with '8039'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-8039'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux811 + aux814 + aux815)))
c Var 'aux2118' direct represents '0' with '-8040'
c Var 'aux2118' direct represents '1' with '8040'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-8040'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux817 + aux820 + aux821)<=1))
c Var 'aux2119' direct represents '0' with '-8041'
c Var 'aux2119' direct represents '1' with '8041'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-8041'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux817 + aux820 + aux821)))
c Var 'aux2120' direct represents '0' with '-8042'
c Var 'aux2120' direct represents '1' with '8042'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-8042'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux823 + aux826 + aux827)<=1))
c Var 'aux2121' direct represents '0' with '-8043'
c Var 'aux2121' direct represents '1' with '8043'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-8043'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux823 + aux826 + aux827)))
c Var 'aux2122' direct represents '0' with '-8044'
c Var 'aux2122' direct represents '1' with '8044'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-8044'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux829 + aux832 + aux833)<=1))
c Var 'aux2123' direct represents '0' with '-8045'
c Var 'aux2123' direct represents '1' with '8045'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-8045'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux829 + aux832 + aux833)))
c Var 'aux2124' direct represents '0' with '-8046'
c Var 'aux2124' direct represents '1' with '8046'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-8046'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux835 + aux838 + aux839)<=1))
c Var 'aux2125' direct represents '0' with '-8047'
c Var 'aux2125' direct represents '1' with '8047'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-8047'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux835 + aux838 + aux839)))
c Var 'aux2126' direct represents '0' with '-8048'
c Var 'aux2126' direct represents '1' with '8048'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-8048'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux841 + aux844 + aux845)<=1))
c Var 'aux2127' direct represents '0' with '-8049'
c Var 'aux2127' direct represents '1' with '8049'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-8049'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux841 + aux844 + aux845)))
c Var 'aux2128' direct represents '0' with '-8050'
c Var 'aux2128' direct represents '1' with '8050'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-8050'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux847 + aux850 + aux851)<=1))
c Var 'aux2129' direct represents '0' with '-8051'
c Var 'aux2129' direct represents '1' with '8051'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-8051'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux847 + aux850 + aux851)))
c Var 'aux2130' direct represents '0' with '-8052'
c Var 'aux2130' direct represents '1' with '8052'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-8052'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux853 + aux856 + aux857)<=1))
c Var 'aux2131' direct represents '0' with '-8053'
c Var 'aux2131' direct represents '1' with '8053'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-8053'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux853 + aux856 + aux857)))
c Var 'aux2132' direct represents '0' with '-8054'
c Var 'aux2132' direct represents '1' with '8054'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-8054'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux859 + aux862 + aux863)<=1))
c Var 'aux2133' direct represents '0' with '-8055'
c Var 'aux2133' direct represents '1' with '8055'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-8055'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux859 + aux862 + aux863)))
c Var 'aux2134' direct represents '0' with '-8056'
c Var 'aux2134' direct represents '1' with '8056'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8056'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux865 + aux868 + aux869)<=1))
c Var 'aux2135' direct represents '0' with '-8057'
c Var 'aux2135' direct represents '1' with '8057'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8057'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux865 + aux868 + aux869)))
c Var 'aux2136' direct represents '0' with '-8058'
c Var 'aux2136' direct represents '1' with '8058'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8058'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux871 + aux874 + aux875)<=1))
c Var 'aux2137' direct represents '0' with '-8059'
c Var 'aux2137' direct represents '1' with '8059'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8059'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux871 + aux874 + aux875)))
c Var 'aux2138' direct represents '0' with '-8060'
c Var 'aux2138' direct represents '1' with '8060'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8060'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux877 + aux880 + aux881)<=1))
c Var 'aux2139' direct represents '0' with '-8061'
c Var 'aux2139' direct represents '1' with '8061'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8061'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux877 + aux880 + aux881)))
c Var 'aux2140' direct represents '0' with '-8062'
c Var 'aux2140' direct represents '1' with '8062'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8062'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux883 + aux886 + aux887)<=1))
c Var 'aux2141' direct represents '0' with '-8063'
c Var 'aux2141' direct represents '1' with '8063'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8063'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux883 + aux886 + aux887)))
c Var 'aux2142' direct represents '0' with '-8064'
c Var 'aux2142' direct represents '1' with '8064'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8064'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux889 + aux892 + aux893)<=1))
c Var 'aux2143' direct represents '0' with '-8065'
c Var 'aux2143' direct represents '1' with '8065'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8065'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux889 + aux892 + aux893)))
c Var 'aux2144' direct represents '0' with '-8066'
c Var 'aux2144' direct represents '1' with '8066'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8066'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux895 + aux898 + aux899)<=1))
c Var 'aux2145' direct represents '0' with '-8067'
c Var 'aux2145' direct represents '1' with '8067'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8067'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux895 + aux898 + aux899)))
c Var 'aux2146' direct represents '0' with '-8068'
c Var 'aux2146' direct represents '1' with '8068'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8068'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux901 + aux904 + aux905)<=1))
c Var 'aux2147' direct represents '0' with '-8069'
c Var 'aux2147' direct represents '1' with '8069'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8069'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux901 + aux904 + aux905)))
c Var 'aux2148' direct represents '0' with '-8070'
c Var 'aux2148' direct represents '1' with '8070'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8070'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux907 + aux910 + aux911)<=1))
c Var 'aux2149' direct represents '0' with '-8071'
c Var 'aux2149' direct represents '1' with '8071'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8071'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux907 + aux910 + aux911)))
c Var 'aux2150' direct represents '0' with '-8072'
c Var 'aux2150' direct represents '1' with '8072'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8072'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux913 + aux916 + aux917)<=1))
c Var 'aux2151' direct represents '0' with '-8073'
c Var 'aux2151' direct represents '1' with '8073'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8073'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux913 + aux916 + aux917)))
c Var 'aux2152' direct represents '0' with '-8074'
c Var 'aux2152' direct represents '1' with '8074'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8074'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux919 + aux922 + aux923)<=1))
c Var 'aux2153' direct represents '0' with '-8075'
c Var 'aux2153' direct represents '1' with '8075'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8075'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux919 + aux922 + aux923)))
c Var 'aux2154' direct represents '0' with '-8076'
c Var 'aux2154' direct represents '1' with '8076'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8076'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux925 + aux928 + aux929)<=1))
c Var 'aux2155' direct represents '0' with '-8077'
c Var 'aux2155' direct represents '1' with '8077'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8077'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux925 + aux928 + aux929)))
c Var 'aux2156' direct represents '0' with '-8078'
c Var 'aux2156' direct represents '1' with '8078'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8078'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux931 + aux934 + aux935)<=1))
c Var 'aux2157' direct represents '0' with '-8079'
c Var 'aux2157' direct represents '1' with '8079'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8079'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux931 + aux934 + aux935)))
c Var 'aux2158' direct represents '0' with '-8080'
c Var 'aux2158' direct represents '1' with '8080'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8080'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux937 + aux940 + aux941)<=1))
c Var 'aux2159' direct represents '0' with '-8081'
c Var 'aux2159' direct represents '1' with '8081'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8081'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux937 + aux940 + aux941)))
c Var 'aux2160' direct represents '0' with '-8082'
c Var 'aux2160' direct represents '1' with '8082'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8082'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux943 + aux946 + aux947)<=1))
c Var 'aux2161' direct represents '0' with '-8083'
c Var 'aux2161' direct represents '1' with '8083'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8083'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux943 + aux946 + aux947)))
c Var 'aux2162' direct represents '0' with '-8084'
c Var 'aux2162' direct represents '1' with '8084'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8084'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux949 + aux952 + aux953)<=1))
c Var 'aux2163' direct represents '0' with '-8085'
c Var 'aux2163' direct represents '1' with '8085'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8085'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux949 + aux952 + aux953)))
c Var 'aux2164' direct represents '0' with '-8086'
c Var 'aux2164' direct represents '1' with '8086'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8086'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux955 + aux958 + aux959)<=1))
c Var 'aux2165' direct represents '0' with '-8087'
c Var 'aux2165' direct represents '1' with '8087'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8087'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux955 + aux958 + aux959)))
c Var 'aux2166' direct represents '0' with '-8088'
c Var 'aux2166' direct represents '1' with '8088'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8088'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux961 + aux964 + aux965)<=1))
c Var 'aux2167' direct represents '0' with '-8089'
c Var 'aux2167' direct represents '1' with '8089'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8089'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux961 + aux964 + aux965)))
c Var 'aux2168' direct represents '0' with '-8090'
c Var 'aux2168' direct represents '1' with '8090'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8090'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux967 + aux970 + aux971)<=1))
c Var 'aux2169' direct represents '0' with '-8091'
c Var 'aux2169' direct represents '1' with '8091'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8091'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux967 + aux970 + aux971)))
c Var 'aux2170' direct represents '0' with '-8092'
c Var 'aux2170' direct represents '1' with '8092'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8092'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux973 + aux976 + aux977)<=1))
c Var 'aux2171' direct represents '0' with '-8093'
c Var 'aux2171' direct represents '1' with '8093'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8093'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux973 + aux976 + aux977)))
c Var 'aux2172' direct represents '0' with '-8094'
c Var 'aux2172' direct represents '1' with '8094'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8094'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux979 + aux982 + aux983)<=1))
c Var 'aux2173' direct represents '0' with '-8095'
c Var 'aux2173' direct represents '1' with '8095'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8095'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux979 + aux982 + aux983)))
c Var 'aux2174' direct represents '0' with '-8096'
c Var 'aux2174' direct represents '1' with '8096'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8096'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux985 + aux988 + aux989)<=1))
c Var 'aux2175' direct represents '0' with '-8097'
c Var 'aux2175' direct represents '1' with '8097'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8097'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux985 + aux988 + aux989)))
c Var 'aux2176' direct represents '0' with '-8098'
c Var 'aux2176' direct represents '1' with '8098'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8098'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux991 + aux994 + aux995)<=1))
c Var 'aux2177' direct represents '0' with '-8099'
c Var 'aux2177' direct represents '1' with '8099'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8099'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux991 + aux994 + aux995)))
c Var 'aux2178' direct represents '0' with '-8100'
c Var 'aux2178' direct represents '1' with '8100'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8100'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux997 + aux1000 + aux1001)<=1))
c Var 'aux2179' direct represents '0' with '-8101'
c Var 'aux2179' direct represents '1' with '8101'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8101'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux997 + aux1000 + aux1001)))
c Var 'aux2180' direct represents '0' with '-8102'
c Var 'aux2180' direct represents '1' with '8102'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8102'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux1003 + aux1006 + aux1007)<=1))
c Var 'aux2181' direct represents '0' with '-8103'
c Var 'aux2181' direct represents '1' with '8103'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8103'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux1003 + aux1006 + aux1007)))
c Var 'aux2182' direct represents '0' with '-8104'
c Var 'aux2182' direct represents '1' with '8104'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8104'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux1009 + aux1012 + aux1013)<=1))
c Var 'aux2183' direct represents '0' with '-8105'
c Var 'aux2183' direct represents '1' with '8105'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8105'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux1009 + aux1012 + aux1013)))
c Var 'aux2184' direct represents '0' with '-8106'
c Var 'aux2184' direct represents '1' with '8106'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8106'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux1015 + aux1018 + aux1019)<=1))
c Var 'aux2185' direct represents '0' with '-8107'
c Var 'aux2185' direct represents '1' with '8107'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8107'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux1015 + aux1018 + aux1019)))
c Var 'aux2186' direct represents '0' with '-8108'
c Var 'aux2186' direct represents '1' with '8108'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8108'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux1021 + aux1024 + aux1025)<=1))
c Var 'aux2187' direct represents '0' with '-8109'
c Var 'aux2187' direct represents '1' with '8109'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8109'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux1021 + aux1024 + aux1025)))
c Var 'aux2188' direct represents '0' with '-8110'
c Var 'aux2188' direct represents '1' with '8110'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8110'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux1027 + aux1030 + aux1031)<=1))
c Var 'aux2189' direct represents '0' with '-8111'
c Var 'aux2189' direct represents '1' with '8111'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8111'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux1027 + aux1030 + aux1031)))
c Var 'aux2190' direct represents '0' with '-8112'
c Var 'aux2190' direct represents '1' with '8112'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8112'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux1033 + aux1036 + aux1037)<=1))
c Var 'aux2191' direct represents '0' with '-8113'
c Var 'aux2191' direct represents '1' with '8113'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8113'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux1033 + aux1036 + aux1037)))
c Var 'aux2192' direct represents '0' with '-8114'
c Var 'aux2192' direct represents '1' with '8114'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8114'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux1039 + aux1042 + aux1043)<=1))
c Var 'aux2193' direct represents '0' with '-8115'
c Var 'aux2193' direct represents '1' with '8115'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8115'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux1039 + aux1042 + aux1043)))
c Var 'aux2194' direct represents '0' with '-8116'
c Var 'aux2194' direct represents '1' with '8116'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8116'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux1045 + aux1048 + aux1049)<=1))
c Var 'aux2195' direct represents '0' with '-8117'
c Var 'aux2195' direct represents '1' with '8117'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8117'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux1045 + aux1048 + aux1049)))
c Var 'aux2196' direct represents '0' with '-8118'
c Var 'aux2196' direct represents '1' with '8118'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8118'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux1051 + aux1054 + aux1055)<=1))
c Var 'aux2197' direct represents '0' with '-8119'
c Var 'aux2197' direct represents '1' with '8119'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8119'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux1051 + aux1054 + aux1055)))
c Var 'aux2198' direct represents '0' with '-8120'
c Var 'aux2198' direct represents '1' with '8120'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8120'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux1057 + aux1060 + aux1061)<=1))
c Var 'aux2199' direct represents '0' with '-8121'
c Var 'aux2199' direct represents '1' with '8121'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8121'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux1057 + aux1060 + aux1061)))
c Var 'aux2200' direct represents '0' with '-8122'
c Var 'aux2200' direct represents '1' with '8122'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8122'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux1063 + aux1066 + aux1067)<=1))
c Var 'aux2201' direct represents '0' with '-8123'
c Var 'aux2201' direct represents '1' with '8123'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8123'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux1063 + aux1066 + aux1067)))
c Var 'aux2202' direct represents '0' with '-8124'
c Var 'aux2202' direct represents '1' with '8124'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8124'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux1069 + aux1072 + aux1073)<=1))
c Var 'aux2203' direct represents '0' with '-8125'
c Var 'aux2203' direct represents '1' with '8125'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8125'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux1069 + aux1072 + aux1073)))
c Var 'aux2204' direct represents '0' with '-8126'
c Var 'aux2204' direct represents '1' with '8126'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8126'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux1075 + aux1078 + aux1079)<=1))
c Var 'aux2205' direct represents '0' with '-8127'
c Var 'aux2205' direct represents '1' with '8127'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8127'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux1075 + aux1078 + aux1079)))
c Var 'aux2206' direct represents '0' with '-8128'
c Var 'aux2206' direct represents '1' with '8128'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8128'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux1081 + aux1084 + aux1085)<=1))
c Var 'aux2207' direct represents '0' with '-8129'
c Var 'aux2207' direct represents '1' with '8129'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8129'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux1081 + aux1084 + aux1085)))
c Var 'aux2208' direct represents '0' with '-8130'
c Var 'aux2208' direct represents '1' with '8130'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8130'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux1087 + aux1090 + aux1091)<=1))
c Var 'aux2209' direct represents '0' with '-8131'
c Var 'aux2209' direct represents '1' with '8131'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8131'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux1087 + aux1090 + aux1091)))
c Var 'aux2210' direct represents '0' with '-8132'
c Var 'aux2210' direct represents '1' with '8132'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8132'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux1093 + aux1096 + aux1097)<=1))
c Var 'aux2211' direct represents '0' with '-8133'
c Var 'aux2211' direct represents '1' with '8133'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8133'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux1093 + aux1096 + aux1097)))
c Var 'aux2212' direct represents '0' with '-8134'
c Var 'aux2212' direct represents '1' with '8134'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8134'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux1099 + aux1102 + aux1103)<=1))
c Var 'aux2213' direct represents '0' with '-8135'
c Var 'aux2213' direct represents '1' with '8135'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8135'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux1099 + aux1102 + aux1103)))
c Var 'aux2214' direct represents '0' with '-8136'
c Var 'aux2214' direct represents '1' with '8136'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8136'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux1105 + aux1108 + aux1109)<=1))
c Var 'aux2215' direct represents '0' with '-8137'
c Var 'aux2215' direct represents '1' with '8137'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8137'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux1105 + aux1108 + aux1109)))
c Var 'aux2216' direct represents '0' with '-8138'
c Var 'aux2216' direct represents '1' with '8138'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8138'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1111 + aux1114 + aux1115)<=1))
c Var 'aux2217' direct represents '0' with '-8139'
c Var 'aux2217' direct represents '1' with '8139'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8139'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1111 + aux1114 + aux1115)))
c Var 'aux2218' direct represents '0' with '-8140'
c Var 'aux2218' direct represents '1' with '8140'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8140'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1117 + aux1120 + aux1121)<=1))
c Var 'aux2219' direct represents '0' with '-8141'
c Var 'aux2219' direct represents '1' with '8141'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8141'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1117 + aux1120 + aux1121)))
c Var 'aux2220' direct represents '0' with '-8142'
c Var 'aux2220' direct represents '1' with '8142'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8142'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1123 + aux1126 + aux1127)<=1))
c Var 'aux2221' direct represents '0' with '-8143'
c Var 'aux2221' direct represents '1' with '8143'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8143'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1123 + aux1126 + aux1127)))
c Var 'aux2222' direct represents '0' with '-8144'
c Var 'aux2222' direct represents '1' with '8144'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8144'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1129 + aux1132 + aux1133)<=1))
c Var 'aux2223' direct represents '0' with '-8145'
c Var 'aux2223' direct represents '1' with '8145'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8145'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1129 + aux1132 + aux1133)))
c Var 'aux2224' direct represents '0' with '-8146'
c Var 'aux2224' direct represents '1' with '8146'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8146'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1135 + aux1138 + aux1139)<=1))
c Var 'aux2225' direct represents '0' with '-8147'
c Var 'aux2225' direct represents '1' with '8147'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8147'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1135 + aux1138 + aux1139)))
c Var 'aux2226' direct represents '0' with '-8148'
c Var 'aux2226' direct represents '1' with '8148'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8148'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1141 + aux1144 + aux1145)<=1))
c Var 'aux2227' direct represents '0' with '-8149'
c Var 'aux2227' direct represents '1' with '8149'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8149'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1141 + aux1144 + aux1145)))
c Var 'aux2228' direct represents '0' with '-8150'
c Var 'aux2228' direct represents '1' with '8150'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8150'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1147 + aux1150 + aux1151)<=1))
c Var 'aux2229' direct represents '0' with '-8151'
c Var 'aux2229' direct represents '1' with '8151'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8151'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1147 + aux1150 + aux1151)))
c Var 'aux2230' direct represents '0' with '-8152'
c Var 'aux2230' direct represents '1' with '8152'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8152'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1153 + aux1156 + aux1157)<=1))
c Var 'aux2231' direct represents '0' with '-8153'
c Var 'aux2231' direct represents '1' with '8153'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8153'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1153 + aux1156 + aux1157)))
c Var 'aux2232' direct represents '0' with '-8154'
c Var 'aux2232' direct represents '1' with '8154'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8154'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1159 + aux1162 + aux1163)<=1))
c Var 'aux2233' direct represents '0' with '-8155'
c Var 'aux2233' direct represents '1' with '8155'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8155'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1159 + aux1162 + aux1163)))
c Var 'aux2234' direct represents '0' with '-8156'
c Var 'aux2234' direct represents '1' with '8156'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8156'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1165 + aux1168 + aux1169)<=1))
c Var 'aux2235' direct represents '0' with '-8157'
c Var 'aux2235' direct represents '1' with '8157'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8157'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1165 + aux1168 + aux1169)))
c Var 'aux2236' direct represents '0' with '-8158'
c Var 'aux2236' direct represents '1' with '8158'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8158'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1171 + aux1174 + aux1175)<=1))
c Var 'aux2237' direct represents '0' with '-8159'
c Var 'aux2237' direct represents '1' with '8159'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8159'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1171 + aux1174 + aux1175)))
c Var 'aux2238' direct represents '0' with '-8160'
c Var 'aux2238' direct represents '1' with '8160'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8160'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1177 + aux1180 + aux1181)<=1))
c Var 'aux2239' direct represents '0' with '-8161'
c Var 'aux2239' direct represents '1' with '8161'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8161'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1177 + aux1180 + aux1181)))
c Var 'aux2240' direct represents '0' with '-8162'
c Var 'aux2240' direct represents '1' with '8162'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8162'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1183 + aux1186 + aux1187)<=1))
c Var 'aux2241' direct represents '0' with '-8163'
c Var 'aux2241' direct represents '1' with '8163'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8163'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1183 + aux1186 + aux1187)))
c Var 'aux2242' direct represents '0' with '-8164'
c Var 'aux2242' direct represents '1' with '8164'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8164'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1189 + aux1192 + aux1193)<=1))
c Var 'aux2243' direct represents '0' with '-8165'
c Var 'aux2243' direct represents '1' with '8165'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8165'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1189 + aux1192 + aux1193)))
c Var 'aux2244' direct represents '0' with '-8166'
c Var 'aux2244' direct represents '1' with '8166'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8166'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1195 + aux1198 + aux1199)<=1))
c Var 'aux2245' direct represents '0' with '-8167'
c Var 'aux2245' direct represents '1' with '8167'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8167'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1195 + aux1198 + aux1199)))
c Var 'aux2246' direct represents '0' with '-8168'
c Var 'aux2246' direct represents '1' with '8168'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8168'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1201 + aux1204 + aux1205)<=1))
c Var 'aux2247' direct represents '0' with '-8169'
c Var 'aux2247' direct represents '1' with '8169'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8169'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1201 + aux1204 + aux1205)))
c Var 'aux2248' direct represents '0' with '-8170'
c Var 'aux2248' direct represents '1' with '8170'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8170'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1207 + aux1210 + aux1211)<=1))
c Var 'aux2249' direct represents '0' with '-8171'
c Var 'aux2249' direct represents '1' with '8171'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8171'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1207 + aux1210 + aux1211)))
c Var 'aux2250' direct represents '0' with '-8172'
c Var 'aux2250' direct represents '1' with '8172'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8172'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1213 + aux1216 + aux1217)<=1))
c Var 'aux2251' direct represents '0' with '-8173'
c Var 'aux2251' direct represents '1' with '8173'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8173'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1213 + aux1216 + aux1217)))
c Var 'aux2252' direct represents '0' with '-8174'
c Var 'aux2252' direct represents '1' with '8174'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8174'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1219 + aux1222 + aux1223)<=1))
c Var 'aux2253' direct represents '0' with '-8175'
c Var 'aux2253' direct represents '1' with '8175'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8175'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1219 + aux1222 + aux1223)))
c Var 'aux2254' direct represents '0' with '-8176'
c Var 'aux2254' direct represents '1' with '8176'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8176'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1225 + aux1228 + aux1229)<=1))
c Var 'aux2255' direct represents '0' with '-8177'
c Var 'aux2255' direct represents '1' with '8177'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8177'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1225 + aux1228 + aux1229)))
c Var 'aux2256' direct represents '0' with '-8178'
c Var 'aux2256' direct represents '1' with '8178'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8178'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1231 + aux1234 + aux1235)<=1))
c Var 'aux2257' direct represents '0' with '-8179'
c Var 'aux2257' direct represents '1' with '8179'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8179'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1231 + aux1234 + aux1235)))
c Var 'aux2258' direct represents '0' with '-8180'
c Var 'aux2258' direct represents '1' with '8180'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8180'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1237 + aux1240 + aux1241)<=1))
c Var 'aux2259' direct represents '0' with '-8181'
c Var 'aux2259' direct represents '1' with '8181'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8181'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1237 + aux1240 + aux1241)))
c Var 'aux2260' direct represents '0' with '-8182'
c Var 'aux2260' direct represents '1' with '8182'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8182'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1243 + aux1246 + aux1247)<=1))
c Var 'aux2261' direct represents '0' with '-8183'
c Var 'aux2261' direct represents '1' with '8183'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8183'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1243 + aux1246 + aux1247)))
c Var 'aux2262' direct represents '0' with '-8184'
c Var 'aux2262' direct represents '1' with '8184'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8184'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1249 + aux1252 + aux1253)<=1))
c Var 'aux2263' direct represents '0' with '-8185'
c Var 'aux2263' direct represents '1' with '8185'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8185'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1249 + aux1252 + aux1253)))
c Var 'aux2264' direct represents '0' with '-8186'
c Var 'aux2264' direct represents '1' with '8186'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8186'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1255 + aux1258 + aux1259)<=1))
c Var 'aux2265' direct represents '0' with '-8187'
c Var 'aux2265' direct represents '1' with '8187'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8187'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1255 + aux1258 + aux1259)))
c Var 'aux2266' direct represents '0' with '-8188'
c Var 'aux2266' direct represents '1' with '8188'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8188'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1261 + aux1264 + aux1265)<=1))
c Var 'aux2267' direct represents '0' with '-8189'
c Var 'aux2267' direct represents '1' with '8189'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8189'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1261 + aux1264 + aux1265)))
c Var 'aux2268' direct represents '0' with '-8190'
c Var 'aux2268' direct represents '1' with '8190'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8190'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1267 + aux1270 + aux1271)<=1))
c Var 'aux2269' direct represents '0' with '-8191'
c Var 'aux2269' direct represents '1' with '8191'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8191'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1267 + aux1270 + aux1271)))
c Var 'aux2270' direct represents '0' with '-8192'
c Var 'aux2270' direct represents '1' with '8192'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8192'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1273 + aux1276 + aux1277)<=1))
c Var 'aux2271' direct represents '0' with '-8193'
c Var 'aux2271' direct represents '1' with '8193'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8193'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1273 + aux1276 + aux1277)))
c Var 'aux2272' direct represents '0' with '-8194'
c Var 'aux2272' direct represents '1' with '8194'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8194'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1279 + aux1282 + aux1283)<=1))
c Var 'aux2273' direct represents '0' with '-8195'
c Var 'aux2273' direct represents '1' with '8195'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8195'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1279 + aux1282 + aux1283)))
c Var 'aux2274' direct represents '0' with '-8196'
c Var 'aux2274' direct represents '1' with '8196'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8196'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1285 + aux1288 + aux1289)<=1))
c Var 'aux2275' direct represents '0' with '-8197'
c Var 'aux2275' direct represents '1' with '8197'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8197'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1285 + aux1288 + aux1289)))
c Var 'aux2276' direct represents '0' with '-8198'
c Var 'aux2276' direct represents '1' with '8198'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8198'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1291 + aux1294 + aux1295)<=1))
c Var 'aux2277' direct represents '0' with '-8199'
c Var 'aux2277' direct represents '1' with '8199'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8199'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1291 + aux1294 + aux1295)))
c Var 'aux2278' direct represents '0' with '-8200'
c Var 'aux2278' direct represents '1' with '8200'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8200'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1297 + aux1300 + aux1301)<=1))
c Var 'aux2279' direct represents '0' with '-8201'
c Var 'aux2279' direct represents '1' with '8201'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8201'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1297 + aux1300 + aux1301)))
c Var 'aux2280' direct represents '0' with '-8202'
c Var 'aux2280' direct represents '1' with '8202'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8202'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1303 + aux1306 + aux1307)<=1))
c Var 'aux2281' direct represents '0' with '-8203'
c Var 'aux2281' direct represents '1' with '8203'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8203'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1303 + aux1306 + aux1307)))
c Var 'aux2282' direct represents '0' with '-8204'
c Var 'aux2282' direct represents '1' with '8204'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8204'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1309 + aux1312 + aux1313)<=1))
c Var 'aux2283' direct represents '0' with '-8205'
c Var 'aux2283' direct represents '1' with '8205'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8205'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1309 + aux1312 + aux1313)))
c Var 'aux2284' direct represents '0' with '-8206'
c Var 'aux2284' direct represents '1' with '8206'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8206'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1315 + aux1318 + aux1319)<=1))
c Var 'aux2285' direct represents '0' with '-8207'
c Var 'aux2285' direct represents '1' with '8207'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8207'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1315 + aux1318 + aux1319)))
c Var 'aux2286' direct represents '0' with '-8208'
c Var 'aux2286' direct represents '1' with '8208'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8208'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1321 + aux1324 + aux1325)<=1))
c Var 'aux2287' direct represents '0' with '-8209'
c Var 'aux2287' direct represents '1' with '8209'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8209'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1321 + aux1324 + aux1325)))
c Var 'aux2288' direct represents '0' with '-8210'
c Var 'aux2288' direct represents '1' with '8210'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8210'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1327 + aux1330 + aux1331)<=1))
c Var 'aux2289' direct represents '0' with '-8211'
c Var 'aux2289' direct represents '1' with '8211'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8211'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1327 + aux1330 + aux1331)))
c Var 'aux2290' direct represents '0' with '-8212'
c Var 'aux2290' direct represents '1' with '8212'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8212'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1333 + aux1336 + aux1337)<=1))
c Var 'aux2291' direct represents '0' with '-8213'
c Var 'aux2291' direct represents '1' with '8213'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8213'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1333 + aux1336 + aux1337)))
c Var 'aux2292' direct represents '0' with '-8214'
c Var 'aux2292' direct represents '1' with '8214'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8214'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1339 + aux1342 + aux1343)<=1))
c Var 'aux2293' direct represents '0' with '-8215'
c Var 'aux2293' direct represents '1' with '8215'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8215'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1339 + aux1342 + aux1343)))
c Var 'aux2294' direct represents '0' with '-8216'
c Var 'aux2294' direct represents '1' with '8216'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8216'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1345 + aux1348 + aux1349)<=1))
c Var 'aux2295' direct represents '0' with '-8217'
c Var 'aux2295' direct represents '1' with '8217'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8217'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1345 + aux1348 + aux1349)))
c Var 'aux2296' direct represents '0' with '-8218'
c Var 'aux2296' direct represents '1' with '8218'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8218'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1351 + aux1354 + aux1355)<=1))
c Var 'aux2297' direct represents '0' with '-8219'
c Var 'aux2297' direct represents '1' with '8219'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8219'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1351 + aux1354 + aux1355)))
c Var 'aux2298' direct represents '0' with '-8220'
c Var 'aux2298' direct represents '1' with '8220'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8220'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1357 + aux1360 + aux1361)<=1))
c Var 'aux2299' direct represents '0' with '-8221'
c Var 'aux2299' direct represents '1' with '8221'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8221'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1357 + aux1360 + aux1361)))
c Var 'aux2300' direct represents '0' with '-8222'
c Var 'aux2300' direct represents '1' with '8222'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8222'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1363 + aux1366 + aux1367)<=1))
c Var 'aux2301' direct represents '0' with '-8223'
c Var 'aux2301' direct represents '1' with '8223'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8223'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1363 + aux1366 + aux1367)))
c Var 'aux2302' direct represents '0' with '-8224'
c Var 'aux2302' direct represents '1' with '8224'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8224'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1369 + aux1372 + aux1373)<=1))
c Var 'aux2303' direct represents '0' with '-8225'
c Var 'aux2303' direct represents '1' with '8225'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8225'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1369 + aux1372 + aux1373)))
c Var 'aux2304' direct represents '0' with '-8226'
c Var 'aux2304' direct represents '1' with '8226'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8226'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1375 + aux1378 + aux1379)<=1))
c Var 'aux2305' direct represents '0' with '-8227'
c Var 'aux2305' direct represents '1' with '8227'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8227'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1375 + aux1378 + aux1379)))
c Var 'aux2306' direct represents '0' with '-8228'
c Var 'aux2306' direct represents '1' with '8228'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8228'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1381 + aux1384 + aux1385)<=1))
c Var 'aux2307' direct represents '0' with '-8229'
c Var 'aux2307' direct represents '1' with '8229'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8229'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1381 + aux1384 + aux1385)))
c Var 'aux2308' direct represents '0' with '-8230'
c Var 'aux2308' direct represents '1' with '8230'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8230'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1387 + aux1390 + aux1391)<=1))
c Var 'aux2309' direct represents '0' with '-8231'
c Var 'aux2309' direct represents '1' with '8231'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8231'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1387 + aux1390 + aux1391)))
c Var 'aux2310' direct represents '0' with '-8232'
c Var 'aux2310' direct represents '1' with '8232'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8232'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1393 + aux1396 + aux1397)<=1))
c Var 'aux2311' direct represents '0' with '-8233'
c Var 'aux2311' direct represents '1' with '8233'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8233'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1393 + aux1396 + aux1397)))
c Var 'aux2312' direct represents '0' with '-8234'
c Var 'aux2312' direct represents '1' with '8234'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8234'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1399 + aux1402 + aux1403)<=1))
c Var 'aux2313' direct represents '0' with '-8235'
c Var 'aux2313' direct represents '1' with '8235'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8235'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1399 + aux1402 + aux1403)))
c Var 'aux2314' direct represents '0' with '-8236'
c Var 'aux2314' direct represents '1' with '8236'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8236'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1405 + aux1408 + aux1409)<=1))
c Var 'aux2315' direct represents '0' with '-8237'
c Var 'aux2315' direct represents '1' with '8237'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8237'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1405 + aux1408 + aux1409)))
c Var 'aux2316' direct represents '0' with '-8238'
c Var 'aux2316' direct represents '1' with '8238'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8238'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1411 + aux1414 + aux1415)<=1))
c Var 'aux2317' direct represents '0' with '-8239'
c Var 'aux2317' direct represents '1' with '8239'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8239'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1411 + aux1414 + aux1415)))
c Var 'aux2318' direct represents '0' with '-8240'
c Var 'aux2318' direct represents '1' with '8240'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8240'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1417 + aux1420 + aux1421)<=1))
c Var 'aux2319' direct represents '0' with '-8241'
c Var 'aux2319' direct represents '1' with '8241'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8241'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1417 + aux1420 + aux1421)))
c Var 'aux2320' direct represents '0' with '-8242'
c Var 'aux2320' direct represents '1' with '8242'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8242'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1423 + aux1426 + aux1427)<=1))
c Var 'aux2321' direct represents '0' with '-8243'
c Var 'aux2321' direct represents '1' with '8243'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8243'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1423 + aux1426 + aux1427)))
c Var 'aux2322' direct represents '0' with '-8244'
c Var 'aux2322' direct represents '1' with '8244'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8244'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1429 + aux1432 + aux1433)<=1))
c Var 'aux2323' direct represents '0' with '-8245'
c Var 'aux2323' direct represents '1' with '8245'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8245'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1429 + aux1432 + aux1433)))
c Var 'aux2324' direct represents '0' with '-8246'
c Var 'aux2324' direct represents '1' with '8246'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8246'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1435 + aux1438 + aux1439)<=1))
c Var 'aux2325' direct represents '0' with '-8247'
c Var 'aux2325' direct represents '1' with '8247'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8247'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1435 + aux1438 + aux1439)))
c Var 'aux2326' direct represents '0' with '-8248'
c Var 'aux2326' direct represents '1' with '8248'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8248'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1441 + aux1444 + aux1445)<=1))
c Var 'aux2327' direct represents '0' with '-8249'
c Var 'aux2327' direct represents '1' with '8249'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8249'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1441 + aux1444 + aux1445)))
c Var 'aux2328' direct represents '0' with '-8250'
c Var 'aux2328' direct represents '1' with '8250'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8250'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1447 + aux1450 + aux1451)<=1))
c Var 'aux2329' direct represents '0' with '-8251'
c Var 'aux2329' direct represents '1' with '8251'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8251'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1447 + aux1450 + aux1451)))
c Var 'aux2330' direct represents '0' with '-8252'
c Var 'aux2330' direct represents '1' with '8252'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8252'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1453 + aux1456 + aux1457)<=1))
c Var 'aux2331' direct represents '0' with '-8253'
c Var 'aux2331' direct represents '1' with '8253'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8253'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1453 + aux1456 + aux1457)))
c Var 'aux2332' direct represents '0' with '-8254'
c Var 'aux2332' direct represents '1' with '8254'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8254'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1459 + aux1462 + aux1463)<=1))
c Var 'aux2333' direct represents '0' with '-8255'
c Var 'aux2333' direct represents '1' with '8255'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8255'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1459 + aux1462 + aux1463)))
c Var 'aux2334' direct represents '0' with '-8256'
c Var 'aux2334' direct represents '1' with '8256'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8256'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1465 + aux1468 + aux1469)<=1))
c Var 'aux2335' direct represents '0' with '-8257'
c Var 'aux2335' direct represents '1' with '8257'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8257'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1465 + aux1468 + aux1469)))
c Var 'aux2336' direct represents '0' with '-8258'
c Var 'aux2336' direct represents '1' with '8258'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8258'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1471 + aux1474 + aux1475)<=1))
c Var 'aux2337' direct represents '0' with '-8259'
c Var 'aux2337' direct represents '1' with '8259'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8259'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1471 + aux1474 + aux1475)))
c Var 'aux2338' direct represents '0' with '-8260'
c Var 'aux2338' direct represents '1' with '8260'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8260'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1477 + aux1480 + aux1481)<=1))
c Var 'aux2339' direct represents '0' with '-8261'
c Var 'aux2339' direct represents '1' with '8261'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8261'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1477 + aux1480 + aux1481)))
c Var 'aux2340' direct represents '0' with '-8262'
c Var 'aux2340' direct represents '1' with '8262'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8262'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1483 + aux1486 + aux1487)<=1))
c Var 'aux2341' direct represents '0' with '-8263'
c Var 'aux2341' direct represents '1' with '8263'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8263'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1483 + aux1486 + aux1487)))
c Var 'aux2342' direct represents '0' with '-8264'
c Var 'aux2342' direct represents '1' with '8264'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8264'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1489 + aux1492 + aux1493)<=1))
c Var 'aux2343' direct represents '0' with '-8265'
c Var 'aux2343' direct represents '1' with '8265'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8265'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1489 + aux1492 + aux1493)))
c Var 'aux2344' direct represents '0' with '-8266'
c Var 'aux2344' direct represents '1' with '8266'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8266'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1495 + aux1498 + aux1499)<=1))
c Var 'aux2345' direct represents '0' with '-8267'
c Var 'aux2345' direct represents '1' with '8267'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8267'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1495 + aux1498 + aux1499)))
c Var 'aux2346' direct represents '0' with '-8268'
c Var 'aux2346' direct represents '1' with '8268'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8268'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1501 + aux1504 + aux1505)<=1))
c Var 'aux2347' direct represents '0' with '-8269'
c Var 'aux2347' direct represents '1' with '8269'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8269'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1501 + aux1504 + aux1505)))
c Var 'aux2348' direct represents '0' with '-8270'
c Var 'aux2348' direct represents '1' with '8270'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8270'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1507 + aux1510 + aux1511)<=1))
c Var 'aux2349' direct represents '0' with '-8271'
c Var 'aux2349' direct represents '1' with '8271'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8271'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1507 + aux1510 + aux1511)))
c Var 'aux2350' direct represents '0' with '-8272'
c Var 'aux2350' direct represents '1' with '8272'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8272'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1513 + aux1516 + aux1517)<=1))
c Var 'aux2351' direct represents '0' with '-8273'
c Var 'aux2351' direct represents '1' with '8273'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8273'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1513 + aux1516 + aux1517)))
c Var 'aux2352' direct represents '0' with '-8274'
c Var 'aux2352' direct represents '1' with '8274'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8274'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1519 + aux1522 + aux1523)<=1))
c Var 'aux2353' direct represents '0' with '-8275'
c Var 'aux2353' direct represents '1' with '8275'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8275'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1519 + aux1522 + aux1523)))
c Var 'aux2354' direct represents '0' with '-8276'
c Var 'aux2354' direct represents '1' with '8276'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8276'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1525 + aux1528 + aux1529)<=1))
c Var 'aux2355' direct represents '0' with '-8277'
c Var 'aux2355' direct represents '1' with '8277'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8277'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1525 + aux1528 + aux1529)))
c Var 'aux2356' direct represents '0' with '-8278'
c Var 'aux2356' direct represents '1' with '8278'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8278'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1531 + aux1534 + aux1535)<=1))
c Var 'aux2357' direct represents '0' with '-8279'
c Var 'aux2357' direct represents '1' with '8279'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8279'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1531 + aux1534 + aux1535)))
c Var 'aux2358' direct represents '0' with '-8280'
c Var 'aux2358' direct represents '1' with '8280'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8280'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1537 + aux1540 + aux1541)<=1))
c Var 'aux2359' direct represents '0' with '-8281'
c Var 'aux2359' direct represents '1' with '8281'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8281'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1537 + aux1540 + aux1541)))
c Var 'aux2360' direct represents '0' with '-8282'
c Var 'aux2360' direct represents '1' with '8282'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8282'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1543 + aux1546 + aux1547)<=1))
c Var 'aux2361' direct represents '0' with '-8283'
c Var 'aux2361' direct represents '1' with '8283'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8283'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1543 + aux1546 + aux1547)))
c Var 'aux2362' direct represents '0' with '-8284'
c Var 'aux2362' direct represents '1' with '8284'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8284'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1549 + aux1552 + aux1553)<=1))
c Var 'aux2363' direct represents '0' with '-8285'
c Var 'aux2363' direct represents '1' with '8285'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8285'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1549 + aux1552 + aux1553)))
c Var 'aux2364' direct represents '0' with '-8286'
c Var 'aux2364' direct represents '1' with '8286'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8286'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1555 + aux1558 + aux1559)<=1))
c Var 'aux2365' direct represents '0' with '-8287'
c Var 'aux2365' direct represents '1' with '8287'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8287'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1555 + aux1558 + aux1559)))
c Var 'aux2366' direct represents '0' with '-8288'
c Var 'aux2366' direct represents '1' with '8288'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8288'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1561 + aux1564 + aux1565)<=1))
c Var 'aux2367' direct represents '0' with '-8289'
c Var 'aux2367' direct represents '1' with '8289'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8289'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1561 + aux1564 + aux1565)))
c Var 'aux2368' direct represents '0' with '-8290'
c Var 'aux2368' direct represents '1' with '8290'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8290'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1567 + aux1570 + aux1571)<=1))
c Var 'aux2369' direct represents '0' with '-8291'
c Var 'aux2369' direct represents '1' with '8291'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8291'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1567 + aux1570 + aux1571)))
c Var 'aux2370' direct represents '0' with '-8292'
c Var 'aux2370' direct represents '1' with '8292'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8292'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1573 + aux1576 + aux1577)<=1))
c Var 'aux2371' direct represents '0' with '-8293'
c Var 'aux2371' direct represents '1' with '8293'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8293'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1573 + aux1576 + aux1577)))
c Var 'aux2372' direct represents '0' with '-8294'
c Var 'aux2372' direct represents '1' with '8294'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8294'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1579 + aux1582 + aux1583)<=1))
c Var 'aux2373' direct represents '0' with '-8295'
c Var 'aux2373' direct represents '1' with '8295'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8295'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1579 + aux1582 + aux1583)))
c Var 'aux2374' direct represents '0' with '-8296'
c Var 'aux2374' direct represents '1' with '8296'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8296'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1585 + aux1588 + aux1589)<=1))
c Var 'aux2375' direct represents '0' with '-8297'
c Var 'aux2375' direct represents '1' with '8297'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8297'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1585 + aux1588 + aux1589)))
c Var 'aux2376' direct represents '0' with '-8298'
c Var 'aux2376' direct represents '1' with '8298'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8298'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1591 + aux1594 + aux1595)<=1))
c Var 'aux2377' direct represents '0' with '-8299'
c Var 'aux2377' direct represents '1' with '8299'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8299'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1591 + aux1594 + aux1595)))
c Var 'aux2378' direct represents '0' with '-8300'
c Var 'aux2378' direct represents '1' with '8300'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8300'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1597 + aux1600 + aux1601)<=1))
c Var 'aux2379' direct represents '0' with '-8301'
c Var 'aux2379' direct represents '1' with '8301'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8301'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1597 + aux1600 + aux1601)))
c Var 'aux2380' direct represents '0' with '-8302'
c Var 'aux2380' direct represents '1' with '8302'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8302'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1603 + aux1606 + aux1607)<=1))
c Var 'aux2381' direct represents '0' with '-8303'
c Var 'aux2381' direct represents '1' with '8303'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8303'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1603 + aux1606 + aux1607)))
c Var 'aux2382' direct represents '0' with '-8304'
c Var 'aux2382' direct represents '1' with '8304'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8304'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1609 + aux1612 + aux1613)<=1))
c Var 'aux2383' direct represents '0' with '-8305'
c Var 'aux2383' direct represents '1' with '8305'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8305'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1609 + aux1612 + aux1613)))
c Var 'aux2384' direct represents '0' with '-8306'
c Var 'aux2384' direct represents '1' with '8306'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8306'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1615 + aux1618 + aux1619)<=1))
c Var 'aux2385' direct represents '0' with '-8307'
c Var 'aux2385' direct represents '1' with '8307'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8307'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1615 + aux1618 + aux1619)))
c Var 'aux2386' direct represents '0' with '-8308'
c Var 'aux2386' direct represents '1' with '8308'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8308'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1621 + aux1624 + aux1625)<=1))
c Var 'aux2387' direct represents '0' with '-8309'
c Var 'aux2387' direct represents '1' with '8309'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8309'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1621 + aux1624 + aux1625)))
c Var 'aux2388' direct represents '0' with '-8310'
c Var 'aux2388' direct represents '1' with '8310'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8310'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1627 + aux1630 + aux1631)<=1))
c Var 'aux2389' direct represents '0' with '-8311'
c Var 'aux2389' direct represents '1' with '8311'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8311'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1627 + aux1630 + aux1631)))
c Var 'aux2390' direct represents '0' with '-8312'
c Var 'aux2390' direct represents '1' with '8312'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8312'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1633 + aux1636 + aux1637)<=1))
c Var 'aux2391' direct represents '0' with '-8313'
c Var 'aux2391' direct represents '1' with '8313'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8313'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1633 + aux1636 + aux1637)))
c Var 'aux2392' direct represents '0' with '-8314'
c Var 'aux2392' direct represents '1' with '8314'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8314'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1639 + aux1642 + aux1643)<=1))
c Var 'aux2393' direct represents '0' with '-8315'
c Var 'aux2393' direct represents '1' with '8315'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8315'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1639 + aux1642 + aux1643)))
c Var 'aux2394' direct represents '0' with '-8316'
c Var 'aux2394' direct represents '1' with '8316'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8316'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1645 + aux1648 + aux1649)<=1))
c Var 'aux2395' direct represents '0' with '-8317'
c Var 'aux2395' direct represents '1' with '8317'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8317'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1645 + aux1648 + aux1649)))
c Var 'aux2396' direct represents '0' with '-8318'
c Var 'aux2396' direct represents '1' with '8318'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8318'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1651 + aux1654 + aux1655)<=1))
c Var 'aux2397' direct represents '0' with '-8319'
c Var 'aux2397' direct represents '1' with '8319'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8319'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1651 + aux1654 + aux1655)))
c Var 'aux2398' direct represents '0' with '-8320'
c Var 'aux2398' direct represents '1' with '8320'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8320'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1657 + aux1660 + aux1661)<=1))
c Var 'aux2399' direct represents '0' with '-8321'
c Var 'aux2399' direct represents '1' with '8321'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8321'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1657 + aux1660 + aux1661)))
c Var 'aux2400' direct represents '0' with '-8322'
c Var 'aux2400' direct represents '1' with '8322'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8322'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1663 + aux1666 + aux1667)<=1))
c Var 'aux2401' direct represents '0' with '-8323'
c Var 'aux2401' direct represents '1' with '8323'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8323'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1663 + aux1666 + aux1667)))
c Var 'aux2402' direct represents '0' with '-8324'
c Var 'aux2402' direct represents '1' with '8324'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8324'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1669 + aux1672 + aux1673)<=1))
c Var 'aux2403' direct represents '0' with '-8325'
c Var 'aux2403' direct represents '1' with '8325'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8325'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1669 + aux1672 + aux1673)))
c Var 'aux2404' direct represents '0' with '-8326'
c Var 'aux2404' direct represents '1' with '8326'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8326'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1675 + aux1678 + aux1679)<=1))
c Var 'aux2405' direct represents '0' with '-8327'
c Var 'aux2405' direct represents '1' with '8327'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8327'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1675 + aux1678 + aux1679)))
c Var 'aux2406' direct represents '0' with '-8328'
c Var 'aux2406' direct represents '1' with '8328'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8328'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1681 + aux1684 + aux1685)<=1))
c Var 'aux2407' direct represents '0' with '-8329'
c Var 'aux2407' direct represents '1' with '8329'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8329'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1681 + aux1684 + aux1685)))
c Var 'aux2408' direct represents '0' with '-8330'
c Var 'aux2408' direct represents '1' with '8330'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8330'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1687 + aux1690 + aux1691)<=1))
c Var 'aux2409' direct represents '0' with '-8331'
c Var 'aux2409' direct represents '1' with '8331'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8331'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1687 + aux1690 + aux1691)))
c Var 'aux2410' direct represents '0' with '-8332'
c Var 'aux2410' direct represents '1' with '8332'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8332'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1693 + aux1696 + aux1697)<=1))
c Var 'aux2411' direct represents '0' with '-8333'
c Var 'aux2411' direct represents '1' with '8333'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8333'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1693 + aux1696 + aux1697)))
c Var 'aux2412' direct represents '0' with '-8334'
c Var 'aux2412' direct represents '1' with '8334'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8334'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1699 + aux1702 + aux1703)<=1))
c Var 'aux2413' direct represents '0' with '-8335'
c Var 'aux2413' direct represents '1' with '8335'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8335'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1699 + aux1702 + aux1703)))
c Var 'aux2414' direct represents '0' with '-8336'
c Var 'aux2414' direct represents '1' with '8336'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8336'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1705 + aux1708 + aux1709)<=1))
c Var 'aux2415' direct represents '0' with '-8337'
c Var 'aux2415' direct represents '1' with '8337'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8337'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1705 + aux1708 + aux1709)))
c Var 'aux2416' direct represents '0' with '-8338'
c Var 'aux2416' direct represents '1' with '8338'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8338'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1711 + aux1714 + aux1715)<=1))
c Var 'aux2417' direct represents '0' with '-8339'
c Var 'aux2417' direct represents '1' with '8339'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8339'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1711 + aux1714 + aux1715)))
c Var 'aux2418' direct represents '0' with '-8340'
c Var 'aux2418' direct represents '1' with '8340'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8340'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1717 + aux1720 + aux1721)<=1))
c Var 'aux2419' direct represents '0' with '-8341'
c Var 'aux2419' direct represents '1' with '8341'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8341'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1717 + aux1720 + aux1721)))
c Var 'aux2420' direct represents '0' with '-8342'
c Var 'aux2420' direct represents '1' with '8342'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8342'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1723 + aux1726 + aux1727)<=1))
c Var 'aux2421' direct represents '0' with '-8343'
c Var 'aux2421' direct represents '1' with '8343'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8343'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1723 + aux1726 + aux1727)))
c Var 'aux2422' direct represents '0' with '-8344'
c Var 'aux2422' direct represents '1' with '8344'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8344'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1729 + aux1732 + aux1733)<=1))
c Var 'aux2423' direct represents '0' with '-8345'
c Var 'aux2423' direct represents '1' with '8345'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8345'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1729 + aux1732 + aux1733)))
c Var 'aux2424' direct represents '0' with '-8346'
c Var 'aux2424' direct represents '1' with '8346'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8346'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1735 + aux1738 + aux1739)<=1))
c Var 'aux2425' direct represents '0' with '-8347'
c Var 'aux2425' direct represents '1' with '8347'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8347'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1735 + aux1738 + aux1739)))
c Var 'aux2426' direct represents '0' with '-8348'
c Var 'aux2426' direct represents '1' with '8348'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8348'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1741 + aux1744 + aux1745)<=1))
c Var 'aux2427' direct represents '0' with '-8349'
c Var 'aux2427' direct represents '1' with '8349'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8349'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1741 + aux1744 + aux1745)))
c Var 'aux2428' direct represents '0' with '-8350'
c Var 'aux2428' direct represents '1' with '8350'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8350'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1747 + aux1750 + aux1751)<=1))
c Var 'aux2429' direct represents '0' with '-8351'
c Var 'aux2429' direct represents '1' with '8351'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8351'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1747 + aux1750 + aux1751)))
c Var 'aux2430' direct represents '0' with '-8352'
c Var 'aux2430' direct represents '1' with '8352'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8352'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1753 + aux1756 + aux1757)<=1))
c Var 'aux2431' direct represents '0' with '-8353'
c Var 'aux2431' direct represents '1' with '8353'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8353'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1753 + aux1756 + aux1757)))
c Var 'aux2432' direct represents '0' with '-8354'
c Var 'aux2432' direct represents '1' with '8354'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8354'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1759 + aux1762 + aux1763)<=1))
c Var 'aux2433' direct represents '0' with '-8355'
c Var 'aux2433' direct represents '1' with '8355'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8355'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1759 + aux1762 + aux1763)))
c Var 'aux2434' direct represents '0' with '-8356'
c Var 'aux2434' direct represents '1' with '8356'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8356'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1765 + aux1768 + aux1769)<=1))
c Var 'aux2435' direct represents '0' with '-8357'
c Var 'aux2435' direct represents '1' with '8357'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8357'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1765 + aux1768 + aux1769)))
c Var 'aux2436' direct represents '0' with '-8358'
c Var 'aux2436' direct represents '1' with '8358'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8358'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1771 + aux1774 + aux1775)<=1))
c Var 'aux2437' direct represents '0' with '-8359'
c Var 'aux2437' direct represents '1' with '8359'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8359'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1771 + aux1774 + aux1775)))
c Var 'aux2438' direct represents '0' with '-8360'
c Var 'aux2438' direct represents '1' with '8360'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8360'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1777 + aux1780 + aux1781)<=1))
c Var 'aux2439' direct represents '0' with '-8361'
c Var 'aux2439' direct represents '1' with '8361'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8361'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1777 + aux1780 + aux1781)))
c Var 'aux2440' direct represents '0' with '-8362'
c Var 'aux2440' direct represents '1' with '8362'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8362'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1783 + aux1786 + aux1787)<=1))
c Var 'aux2441' direct represents '0' with '-8363'
c Var 'aux2441' direct represents '1' with '8363'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8363'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1783 + aux1786 + aux1787)))
c Var 'aux2442' direct represents '0' with '-8364'
c Var 'aux2442' direct represents '1' with '8364'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8364'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1789 + aux1792 + aux1793)<=1))
c Var 'aux2443' direct represents '0' with '-8365'
c Var 'aux2443' direct represents '1' with '8365'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8365'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1789 + aux1792 + aux1793)))
c Var 'aux2444' direct represents '0' with '-8366'
c Var 'aux2444' direct represents '1' with '8366'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8366'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1795 + aux1798 + aux1799)<=1))
c Var 'aux2445' direct represents '0' with '-8367'
c Var 'aux2445' direct represents '1' with '8367'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8367'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1795 + aux1798 + aux1799)))
c Var 'aux2446' direct represents '0' with '-8368'
c Var 'aux2446' direct represents '1' with '8368'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8368'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1801 + aux1804 + aux1805)<=1))
c Var 'aux2447' direct represents '0' with '-8369'
c Var 'aux2447' direct represents '1' with '8369'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8369'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1801 + aux1804 + aux1805)))
c Var 'aux2448' direct represents '0' with '-8370'
c Var 'aux2448' direct represents '1' with '8370'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8370'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1807 + aux1810 + aux1811)<=1))
c Var 'aux2449' direct represents '0' with '-8371'
c Var 'aux2449' direct represents '1' with '8371'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8371'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1807 + aux1810 + aux1811)))
c Var 'aux2450' direct represents '0' with '-8372'
c Var 'aux2450' direct represents '1' with '8372'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8372'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1813 + aux1816 + aux1817)<=1))
c Var 'aux2451' direct represents '0' with '-8373'
c Var 'aux2451' direct represents '1' with '8373'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8373'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1813 + aux1816 + aux1817)))
c Var 'aux2452' direct represents '0' with '-8374'
c Var 'aux2452' direct represents '1' with '8374'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8374'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1819 + aux1822 + aux1823)<=1))
c Var 'aux2453' direct represents '0' with '-8375'
c Var 'aux2453' direct represents '1' with '8375'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8375'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1819 + aux1822 + aux1823)))
c Var 'aux2454' direct represents '0' with '-8376'
c Var 'aux2454' direct represents '1' with '8376'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8376'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1825 + aux1828 + aux1829)<=1))
c Var 'aux2455' direct represents '0' with '-8377'
c Var 'aux2455' direct represents '1' with '8377'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8377'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1825 + aux1828 + aux1829)))
c Var 'aux2456' direct represents '0' with '-8378'
c Var 'aux2456' direct represents '1' with '8378'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8378'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1831 + aux1834 + aux1835)<=1))
c Var 'aux2457' direct represents '0' with '-8379'
c Var 'aux2457' direct represents '1' with '8379'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8379'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1831 + aux1834 + aux1835)))
c Var 'aux2458' direct represents '0' with '-8380'
c Var 'aux2458' direct represents '1' with '8380'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8380'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1837 + aux1840 + aux1841)<=1))
c Var 'aux2459' direct represents '0' with '-8381'
c Var 'aux2459' direct represents '1' with '8381'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8381'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1837 + aux1840 + aux1841)))
c Var 'aux2460' direct represents '0' with '-8382'
c Var 'aux2460' direct represents '1' with '8382'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8382'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1843 + aux1846 + aux1847)<=1))
c Var 'aux2461' direct represents '0' with '-8383'
c Var 'aux2461' direct represents '1' with '8383'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8383'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1843 + aux1846 + aux1847)))
c Var 'aux2462' direct represents '0' with '-8384'
c Var 'aux2462' direct represents '1' with '8384'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8384'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1849 + aux1852 + aux1853)<=1))
c Var 'aux2463' direct represents '0' with '-8385'
c Var 'aux2463' direct represents '1' with '8385'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8385'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1849 + aux1852 + aux1853)))
c Var 'aux2464' direct represents '0' with '-8386'
c Var 'aux2464' direct represents '1' with '8386'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8386'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1855 + aux1858 + aux1859)<=1))
c Var 'aux2465' direct represents '0' with '-8387'
c Var 'aux2465' direct represents '1' with '8387'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8387'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1855 + aux1858 + aux1859)))
c Var 'aux2466' direct represents '0' with '-8388'
c Var 'aux2466' direct represents '1' with '8388'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8388'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1861 + aux1864 + aux1865)<=1))
c Var 'aux2467' direct represents '0' with '-8389'
c Var 'aux2467' direct represents '1' with '8389'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8389'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1861 + aux1864 + aux1865)))
c Var 'aux2468' direct represents '0' with '-8390'
c Var 'aux2468' direct represents '1' with '8390'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8390'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1867 + aux1870 + aux1871)<=1))
c Var 'aux2469' direct represents '0' with '-8391'
c Var 'aux2469' direct represents '1' with '8391'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8391'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1867 + aux1870 + aux1871)))
c Var 'aux2470' direct represents '0' with '-8392'
c Var 'aux2470' direct represents '1' with '8392'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8392'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1873 + aux1876 + aux1877)<=1))
c Var 'aux2471' direct represents '0' with '-8393'
c Var 'aux2471' direct represents '1' with '8393'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8393'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1873 + aux1876 + aux1877)))
c Var 'aux2472' direct represents '0' with '-8394'
c Var 'aux2472' direct represents '1' with '8394'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8394'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1879 + aux1882 + aux1883)<=1))
c Var 'aux2473' direct represents '0' with '-8395'
c Var 'aux2473' direct represents '1' with '8395'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8395'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1879 + aux1882 + aux1883)))
c Var 'aux2474' direct represents '0' with '-8396'
c Var 'aux2474' direct represents '1' with '8396'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8396'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1885 + aux1888 + aux1889)<=1))
c Var 'aux2475' direct represents '0' with '-8397'
c Var 'aux2475' direct represents '1' with '8397'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8397'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1885 + aux1888 + aux1889)))
c Var 'aux2476' direct represents '0' with '-8398'
c Var 'aux2476' direct represents '1' with '8398'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8398'
c (((aux427 + shift(x_00001_00002, -1) + shift(x_00001_00003, -1))<=21)=tv=SATLiteral(7857))
-7857 41 1764 0
-7857 43 1762 0
-7857 45 1760 0
-7857 17 39 1764 0
-7857 17 41 1762 0
-7857 17 43 1760 0
-7857 17 45 1758 0
-7857 18 37 1764 0
-7857 18 39 1762 0
-7857 18 41 1760 0
-7857 18 43 1758 0
-7857 18 45 1756 0
-7857 20 35 1764 0
-7857 20 37 1762 0
-7857 20 39 1760 0
-7857 20 41 1758 0
-7857 20 43 1756 0
-7857 20 45 1754 0
-7857 22 33 1764 0
-7857 22 35 1762 0
-7857 22 37 1760 0
-7857 22 39 1758 0
-7857 22 41 1756 0
-7857 22 43 1754 0
-7857 22 45 1752 0
-7857 24 32 1764 0
-7857 24 33 1762 0
-7857 24 35 1760 0
-7857 24 37 1758 0
-7857 24 39 1756 0
-7857 24 41 1754 0
-7857 24 43 1752 0
-7857 24 45 1750 0
-7857 26 1764 0
-7857 26 32 1762 0
-7857 26 33 1760 0
-7857 26 35 1758 0
-7857 26 37 1756 0
-7857 26 39 1754 0
-7857 26 41 1752 0
-7857 26 43 1750 0
-7857 26 45 1748 0
-7857 28 1762 0
-7857 28 32 1760 0
-7857 28 33 1758 0
-7857 28 35 1756 0
-7857 28 37 1754 0
-7857 28 39 1752 0
-7857 28 41 1750 0
-7857 28 43 1748 0
-7857 28 45 1746 0
-7857 30 1760 0
-7857 30 32 1758 0
-7857 30 33 1756 0
-7857 30 35 1754 0
-7857 30 37 1752 0
-7857 30 39 1750 0
-7857 30 41 1748 0
-7857 30 43 1746 0
-7857 30 45 1744 0
7857 -1744 0
7857 -45 -1746 0
7857 -43 -1748 0
7857 -41 -1750 0
7857 -39 -1752 0
7857 -37 -1754 0
7857 -35 -1756 0
7857 -33 -1758 0
7857 -32 -1760 0
7857 -30 -1746 0
7857 -30 -45 -1748 0
7857 -30 -43 -1750 0
7857 -30 -41 -1752 0
7857 -30 -39 -1754 0
7857 -30 -37 -1756 0
7857 -30 -35 -1758 0
7857 -30 -33 -1760 0
7857 -30 -32 -1762 0
7857 -28 -1748 0
7857 -28 -45 -1750 0
7857 -28 -43 -1752 0
7857 -28 -41 -1754 0
7857 -28 -39 -1756 0
7857 -28 -37 -1758 0
7857 -28 -35 -1760 0
7857 -28 -33 -1762 0
7857 -28 -32 -1764 0
7857 -26 -1750 0
7857 -26 -45 -1752 0
7857 -26 -43 -1754 0
7857 -26 -41 -1756 0
7857 -26 -39 -1758 0
7857 -26 -37 -1760 0
7857 -26 -35 -1762 0
7857 -26 -33 -1764 0
7857 -26 -32 0
7857 -24 -1752 0
7857 -24 -45 -1754 0
7857 -24 -43 -1756 0
7857 -24 -41 -1758 0
7857 -24 -39 -1760 0
7857 -24 -37 -1762 0
7857 -24 -35 -1764 0
7857 -24 -33 0
7857 -24 -32 0
7857 -22 -1754 0
7857 -22 -45 -1756 0
7857 -22 -43 -1758 0
7857 -22 -41 -1760 0
7857 -22 -39 -1762 0
7857 -22 -37 -1764 0
7857 -22 -35 0
7857 -22 -33 0
7857 -22 -32 0
7857 -20 -1756 0
7857 -20 -45 -1758 0
7857 -20 -43 -1760 0
7857 -20 -41 -1762 0
7857 -20 -39 -1764 0
7857 -20 -37 0
7857 -20 -35 0
7857 -20 -33 0
7857 -20 -32 0
7857 -18 -1758 0
7857 -18 -45 -1760 0
7857 -18 -43 -1762 0
7857 -18 -41 -1764 0
7857 -18 -39 0
7857 -18 -37 0
7857 -18 -35 0
7857 -18 -33 0
7857 -18 -32 0
7857 -17 -1760 0
7857 -17 -45 -1762 0
7857 -17 -43 -1764 0
7857 -17 -41 0
7857 -17 -39 0
7857 -17 -37 0
7857 -17 -35 0
7857 -17 -33 0
7857 -17 -32 0
c ((21<=(aux427 + shift(x_00001_00002, -1) + shift(x_00001_00003, -1)))=tv=SATLiteral(7858))
-7858 -1742 0
-7858 -45 -1744 0
-7858 -43 -1746 0
-7858 -41 -1748 0
-7858 -39 -1750 0
-7858 -37 -1752 0
-7858 -35 -1754 0
-7858 -33 -1756 0
-7858 -32 -1758 0
-7858 -30 -1744 0
-7858 -30 -45 -1746 0
-7858 -30 -43 -1748 0
-7858 -30 -41 -1750 0
-7858 -30 -39 -1752 0
-7858 -30 -37 -1754 0
-7858 -30 -35 -1756 0
-7858 -30 -33 -1758 0
-7858 -30 -32 -1760 0
-7858 -28 -1746 0
-7858 -28 -45 -1748 0
-7858 -28 -43 -1750 0
-7858 -28 -41 -1752 0
-7858 -28 -39 -1754 0
-7858 -28 -37 -1756 0
-7858 -28 -35 -1758 0
-7858 -28 -33 -1760 0
-7858 -28 -32 -1762 0
-7858 -26 -1748 0
-7858 -26 -45 -1750 0
-7858 -26 -43 -1752 0
-7858 -26 -41 -1754 0
-7858 -26 -39 -1756 0
-7858 -26 -37 -1758 0
-7858 -26 -35 -1760 0
-7858 -26 -33 -1762 0
-7858 -26 -32 -1764 0
-7858 -24 -1750 0
-7858 -24 -45 -1752 0
-7858 -24 -43 -1754 0
-7858 -24 -41 -1756 0
-7858 -24 -39 -1758 0
-7858 -24 -37 -1760 0
-7858 -24 -35 -1762 0
-7858 -24 -33 -1764 0
-7858 -24 -32 0
-7858 -22 -1752 0
-7858 -22 -45 -1754 0
-7858 -22 -43 -1756 0
-7858 -22 -41 -1758 0
-7858 -22 -39 -1760 0
-7858 -22 -37 -1762 0
-7858 -22 -35 -1764 0
-7858 -22 -33 0
-7858 -22 -32 0
-7858 -20 -1754 0
-7858 -20 -45 -1756 0
-7858 -20 -43 -1758 0
-7858 -20 -41 -1760 0
-7858 -20 -39 -1762 0
-7858 -20 -37 -1764 0
-7858 -20 -35 0
-7858 -20 -33 0
-7858 -20 -32 0
-7858 -18 -1756 0
-7858 -18 -45 -1758 0
-7858 -18 -43 -1760 0
-7858 -18 -41 -1762 0
-7858 -18 -39 -1764 0
-7858 -18 -37 0
-7858 -18 -35 0
-7858 -18 -33 0
-7858 -18 -32 0
-7858 -17 -1758 0
-7858 -17 -45 -1760 0
-7858 -17 -43 -1762 0
-7858 -17 -41 -1764 0
-7858 -17 -39 0
-7858 -17 -37 0
-7858 -17 -35 0
-7858 -17 -33 0
-7858 -17 -32 0
7858 39 1764 0
7858 41 1762 0
7858 43 1760 0
7858 45 1758 0
7858 17 37 1764 0
7858 17 39 1762 0
7858 17 41 1760 0
7858 17 43 1758 0
7858 17 45 1756 0
7858 18 35 1764 0
7858 18 37 1762 0
7858 18 39 1760 0
7858 18 41 1758 0
7858 18 43 1756 0
7858 18 45 1754 0
7858 20 33 1764 0
7858 20 35 1762 0
7858 20 37 1760 0
7858 20 39 1758 0
7858 20 41 1756 0
7858 20 43 1754 0
7858 20 45 1752 0
7858 22 32 1764 0
7858 22 33 1762 0
7858 22 35 1760 0
7858 22 37 1758 0
7858 22 39 1756 0
7858 22 41 1754 0
7858 22 43 1752 0
7858 22 45 1750 0
7858 24 1764 0
7858 24 32 1762 0
7858 24 33 1760 0
7858 24 35 1758 0
7858 24 37 1756 0
7858 24 39 1754 0
7858 24 41 1752 0
7858 24 43 1750 0
7858 24 45 1748 0
7858 26 1762 0
7858 26 32 1760 0
7858 26 33 1758 0
7858 26 35 1756 0
7858 26 37 1754 0
7858 26 39 1752 0
7858 26 41 1750 0
7858 26 43 1748 0
7858 26 45 1746 0
7858 28 1760 0
7858 28 32 1758 0
7858 28 33 1756 0
7858 28 35 1754 0
7858 28 37 1752 0
7858 28 39 1750 0
7858 28 41 1748 0
7858 28 43 1746 0
7858 28 45 1744 0
7858 30 1758 0
7858 30 32 1756 0
7858 30 33 1754 0
7858 30 35 1752 0
7858 30 37 1750 0
7858 30 39 1748 0
7858 30 41 1746 0
7858 30 43 1744 0
7858 30 45 1742 0
c (((x_00001_00005 + x_00001_00006)<=3)=tv=SATLiteral(7859))
-7859 78 0
-7859 62 77 0
-7859 63 0
-7859 65 0
-7859 67 0
-7859 69 0
-7859 71 0
-7859 73 0
-7859 75 0
7859 -63 -77 0
7859 -62 -78 0
c ((3<=(x_00001_00005 + x_00001_00006))=tv=SATLiteral(7860))
-7860 -62 -77 0
7860 77 0
7860 62 0
7860 63 0
7860 65 0
7860 67 0
7860 69 0
7860 71 0
7860 73 0
7860 75 0
c (((x_00001_00007 + x_00001_00008)<=11)=tv=SATLiteral(7861))
-7861 93 120 0
-7861 95 118 0
-7861 97 116 0
-7861 99 114 0
-7861 101 112 0
-7861 103 110 0
-7861 105 108 0
7861 -108 0
7861 -105 -110 0
7861 -103 -112 0
7861 -101 -114 0
7861 -99 -116 0
7861 -97 -118 0
7861 -95 -120 0
7861 -93 0
7861 -92 0
c ((11<=(x_00001_00007 + x_00001_00008))=tv=SATLiteral(7862))
-7862 -107 0
-7862 -105 -108 0
-7862 -103 -110 0
-7862 -101 -112 0
-7862 -99 -114 0
-7862 -97 -116 0
-7862 -95 -118 0
-7862 -93 -120 0
-7862 -92 0
7862 92 120 0
7862 93 118 0
7862 95 116 0
7862 97 114 0
7862 99 112 0
7862 101 110 0
7862 103 108 0
7862 105 107 0
c (((aux428 + shift(x_00003_00008, -1) + shift(x_00003_00009, -1))<=17)=tv=SATLiteral(7863))
-7863 393 1795 0
-7863 395 1793 0
-7863 397 1791 0
-7863 399 1789 0
-7863 401 1787 0
-7863 403 1785 0
-7863 405 1783 0
-7863 377 392 1795 0
-7863 377 393 1793 0
-7863 377 395 1791 0
-7863 377 397 1789 0
-7863 377 399 1787 0
-7863 377 401 1785 0
-7863 377 403 1783 0
-7863 377 405 1781 0
-7863 378 1795 0
-7863 378 392 1793 0
-7863 378 393 1791 0
-7863 378 395 1789 0
-7863 378 397 1787 0
-7863 378 399 1785 0
-7863 378 401 1783 0
-7863 378 403 1781 0
-7863 378 405 1779 0
-7863 380 1793 0
-7863 380 392 1791 0
-7863 380 393 1789 0
-7863 380 395 1787 0
-7863 380 397 1785 0
-7863 380 399 1783 0
-7863 380 401 1781 0
-7863 380 403 1779 0
-7863 380 405 1777 0
-7863 382 1791 0
-7863 382 392 1789 0
-7863 382 393 1787 0
-7863 382 395 1785 0
-7863 382 397 1783 0
-7863 382 399 1781 0
-7863 382 401 1779 0
-7863 382 403 1777 0
-7863 382 405 1775 0
-7863 384 1789 0
-7863 384 392 1787 0
-7863 384 393 1785 0
-7863 384 395 1783 0
-7863 384 397 1781 0
-7863 384 399 1779 0
-7863 384 401 1777 0
-7863 384 403 1775 0
-7863 384 405 1773 0
-7863 386 1787 0
-7863 386 392 1785 0
-7863 386 393 1783 0
-7863 386 395 1781 0
-7863 386 397 1779 0
-7863 386 399 1777 0
-7863 386 401 1775 0
-7863 386 403 1773 0
-7863 386 405 1771 0
-7863 388 1785 0
-7863 388 392 1783 0
-7863 388 393 1781 0
-7863 388 395 1779 0
-7863 388 397 1777 0
-7863 388 399 1775 0
-7863 388 401 1773 0
-7863 388 403 1771 0
-7863 388 405 1769 0
-7863 390 1783 0
-7863 390 392 1781 0
-7863 390 393 1779 0
-7863 390 395 1777 0
-7863 390 397 1775 0
-7863 390 399 1773 0
-7863 390 401 1771 0
-7863 390 403 1769 0
-7863 390 405 1767 0
7863 -1767 0
7863 -405 -1769 0
7863 -403 -1771 0
7863 -401 -1773 0
7863 -399 -1775 0
7863 -397 -1777 0
7863 -395 -1779 0
7863 -393 -1781 0
7863 -392 -1783 0
7863 -390 -1769 0
7863 -390 -405 -1771 0
7863 -390 -403 -1773 0
7863 -390 -401 -1775 0
7863 -390 -399 -1777 0
7863 -390 -397 -1779 0
7863 -390 -395 -1781 0
7863 -390 -393 -1783 0
7863 -390 -392 -1785 0
7863 -388 -1771 0
7863 -388 -405 -1773 0
7863 -388 -403 -1775 0
7863 -388 -401 -1777 0
7863 -388 -399 -1779 0
7863 -388 -397 -1781 0
7863 -388 -395 -1783 0
7863 -388 -393 -1785 0
7863 -388 -392 -1787 0
7863 -386 -1773 0
7863 -386 -405 -1775 0
7863 -386 -403 -1777 0
7863 -386 -401 -1779 0
7863 -386 -399 -1781 0
7863 -386 -397 -1783 0
7863 -386 -395 -1785 0
7863 -386 -393 -1787 0
7863 -386 -392 -1789 0
7863 -384 -1775 0
7863 -384 -405 -1777 0
7863 -384 -403 -1779 0
7863 -384 -401 -1781 0
7863 -384 -399 -1783 0
7863 -384 -397 -1785 0
7863 -384 -395 -1787 0
7863 -384 -393 -1789 0
7863 -384 -392 -1791 0
7863 -382 -1777 0
7863 -382 -405 -1779 0
7863 -382 -403 -1781 0
7863 -382 -401 -1783 0
7863 -382 -399 -1785 0
7863 -382 -397 -1787 0
7863 -382 -395 -1789 0
7863 -382 -393 -1791 0
7863 -382 -392 -1793 0
7863 -380 -1779 0
7863 -380 -405 -1781 0
7863 -380 -403 -1783 0
7863 -380 -401 -1785 0
7863 -380 -399 -1787 0
7863 -380 -397 -1789 0
7863 -380 -395 -1791 0
7863 -380 -393 -1793 0
7863 -380 -392 -1795 0
7863 -378 -1781 0
7863 -378 -405 -1783 0
7863 -378 -403 -1785 0
7863 -378 -401 -1787 0
7863 -378 -399 -1789 0
7863 -378 -397 -1791 0
7863 -378 -395 -1793 0
7863 -378 -393 -1795 0
7863 -378 -392 0
7863 -377 -1783 0
7863 -377 -405 -1785 0
7863 -377 -403 -1787 0
7863 -377 -401 -1789 0
7863 -377 -399 -1791 0
7863 -377 -397 -1793 0
7863 -377 -395 -1795 0
7863 -377 -393 0
7863 -377 -392 0
c ((17<=(aux428 + shift(x_00003_00008, -1) + shift(x_00003_00009, -1)))=tv=SATLiteral(7864))
-7864 -1766 0
-7864 -405 -1767 0
-7864 -403 -1769 0
-7864 -401 -1771 0
-7864 -399 -1773 0
-7864 -397 -1775 0
-7864 -395 -1777 0
-7864 -393 -1779 0
-7864 -392 -1781 0
-7864 -390 -1767 0
-7864 -390 -405 -1769 0
-7864 -390 -403 -1771 0
-7864 -390 -401 -1773 0
-7864 -390 -399 -1775 0
-7864 -390 -397 -1777 0
-7864 -390 -395 -1779 0
-7864 -390 -393 -1781 0
-7864 -390 -392 -1783 0
-7864 -388 -1769 0
-7864 -388 -405 -1771 0
-7864 -388 -403 -1773 0
-7864 -388 -401 -1775 0
-7864 -388 -399 -1777 0
-7864 -388 -397 -1779 0
-7864 -388 -395 -1781 0
-7864 -388 -393 -1783 0
-7864 -388 -392 -1785 0
-7864 -386 -1771 0
-7864 -386 -405 -1773 0
-7864 -386 -403 -1775 0
-7864 -386 -401 -1777 0
-7864 -386 -399 -1779 0
-7864 -386 -397 -1781 0
-7864 -386 -395 -1783 0
-7864 -386 -393 -1785 0
-7864 -386 -392 -1787 0
-7864 -384 -1773 0
-7864 -384 -405 -1775 0
-7864 -384 -403 -1777 0
-7864 -384 -401 -1779 0
-7864 -384 -399 -1781 0
-7864 -384 -397 -1783 0
-7864 -384 -395 -1785 0
-7864 -384 -393 -1787 0
-7864 -384 -392 -1789 0
-7864 -382 -1775 0
-7864 -382 -405 -1777 0
-7864 -382 -403 -1779 0
-7864 -382 -401 -1781 0
-7864 -382 -399 -1783 0
-7864 -382 -397 -1785 0
-7864 -382 -395 -1787 0
-7864 -382 -393 -1789 0
-7864 -382 -392 -1791 0
-7864 -380 -1777 0
-7864 -380 -405 -1779 0
-7864 -380 -403 -1781 0
-7864 -380 -401 -1783 0
-7864 -380 -399 -1785 0
-7864 -380 -397 -1787 0
-7864 -380 -395 -1789 0
-7864 -380 -393 -1791 0
-7864 -380 -392 -1793 0
-7864 -378 -1779 0
-7864 -378 -405 -1781 0
-7864 -378 -403 -1783 0
-7864 -378 -401 -1785 0
-7864 -378 -399 -1787 0
-7864 -378 -397 -1789 0
-7864 -378 -395 -1791 0
-7864 -378 -393 -1793 0
-7864 -378 -392 -1795 0
-7864 -377 -1781 0
-7864 -377 -405 -1783 0
-7864 -377 -403 -1785 0
-7864 -377 -401 -1787 0
-7864 -377 -399 -1789 0
-7864 -377 -397 -1791 0
-7864 -377 -395 -1793 0
-7864 -377 -393 -1795 0
-7864 -377 -392 0
7864 392 1795 0
7864 393 1793 0
7864 395 1791 0
7864 397 1789 0
7864 399 1787 0
7864 401 1785 0
7864 403 1783 0
7864 405 1781 0
7864 377 1795 0
7864 377 392 1793 0
7864 377 393 1791 0
7864 377 395 1789 0
7864 377 397 1787 0
7864 377 399 1785 0
7864 377 401 1783 0
7864 377 403 1781 0
7864 377 405 1779 0
7864 378 1793 0
7864 378 392 1791 0
7864 378 393 1789 0
7864 378 395 1787 0
7864 378 397 1785 0
7864 378 399 1783 0
7864 378 401 1781 0
7864 378 403 1779 0
7864 378 405 1777 0
7864 380 1791 0
7864 380 392 1789 0
7864 380 393 1787 0
7864 380 395 1785 0
7864 380 397 1783 0
7864 380 399 1781 0
7864 380 401 1779 0
7864 380 403 1777 0
7864 380 405 1775 0
7864 382 1789 0
7864 382 392 1787 0
7864 382 393 1785 0
7864 382 395 1783 0
7864 382 397 1781 0
7864 382 399 1779 0
7864 382 401 1777 0
7864 382 403 1775 0
7864 382 405 1773 0
7864 384 1787 0
7864 384 392 1785 0
7864 384 393 1783 0
7864 384 395 1781 0
7864 384 397 1779 0
7864 384 399 1777 0
7864 384 401 1775 0
7864 384 403 1773 0
7864 384 405 1771 0
7864 386 1785 0
7864 386 392 1783 0
7864 386 393 1781 0
7864 386 395 1779 0
7864 386 397 1777 0
7864 386 399 1775 0
7864 386 401 1773 0
7864 386 403 1771 0
7864 386 405 1769 0
7864 388 1783 0
7864 388 392 1781 0
7864 388 393 1779 0
7864 388 395 1777 0
7864 388 397 1775 0
7864 388 399 1773 0
7864 388 401 1771 0
7864 388 403 1769 0
7864 388 405 1767 0
7864 390 1781 0
7864 390 392 1779 0
7864 390 393 1777 0
7864 390 395 1775 0
7864 390 397 1773 0
7864 390 399 1771 0
7864 390 401 1769 0
7864 390 403 1767 0
7864 390 405 1766 0
c (((x_00002_00002 + x_00002_00003 + x_00002_00004)<=18)=tv=SATLiteral(7865))
-7865 180 195 0
-7865 152 178 195 0
-7865 152 180 193 0
-7865 153 176 195 0
-7865 153 178 193 0
-7865 153 180 191 0
-7865 155 174 195 0
-7865 155 176 193 0
-7865 155 178 191 0
-7865 155 180 189 0
-7865 157 172 195 0
-7865 157 174 193 0
-7865 157 176 191 0
-7865 157 178 189 0
-7865 157 180 187 0
-7865 159 170 195 0
-7865 159 172 193 0
-7865 159 174 191 0
-7865 159 176 189 0
-7865 159 178 187 0
-7865 159 180 185 0
-7865 161 168 195 0
-7865 161 170 193 0
-7865 161 172 191 0
-7865 161 174 189 0
-7865 161 176 187 0
-7865 161 178 185 0
-7865 161 180 183 0
-7865 163 167 195 0
-7865 163 168 193 0
-7865 163 170 191 0
-7865 163 172 189 0
-7865 163 174 187 0
-7865 163 176 185 0
-7865 163 178 183 0
-7865 163 180 182 0
-7865 165 195 0
-7865 165 167 193 0
-7865 165 168 191 0
-7865 165 170 189 0
-7865 165 172 187 0
-7865 165 174 185 0
-7865 165 176 183 0
-7865 165 178 182 0
-7865 165 180 0
7865 -180 -182 0
7865 -178 -183 0
7865 -176 -185 0
7865 -174 -187 0
7865 -172 -189 0
7865 -170 -191 0
7865 -168 -193 0
7865 -167 -195 0
7865 -165 -182 0
7865 -165 -180 -183 0
7865 -165 -178 -185 0
7865 -165 -176 -187 0
7865 -165 -174 -189 0
7865 -165 -172 -191 0
7865 -165 -170 -193 0
7865 -165 -168 -195 0
7865 -165 -167 0
7865 -163 -183 0
7865 -163 -180 -185 0
7865 -163 -178 -187 0
7865 -163 -176 -189 0
7865 -163 -174 -191 0
7865 -163 -172 -193 0
7865 -163 -170 -195 0
7865 -163 -168 0
7865 -163 -167 0
7865 -161 -185 0
7865 -161 -180 -187 0
7865 -161 -178 -189 0
7865 -161 -176 -191 0
7865 -161 -174 -193 0
7865 -161 -172 -195 0
7865 -161 -170 0
7865 -161 -168 0
7865 -161 -167 0
7865 -159 -187 0
7865 -159 -180 -189 0
7865 -159 -178 -191 0
7865 -159 -176 -193 0
7865 -159 -174 -195 0
7865 -159 -172 0
7865 -159 -170 0
7865 -159 -168 0
7865 -159 -167 0
7865 -157 -189 0
7865 -157 -180 -191 0
7865 -157 -178 -193 0
7865 -157 -176 -195 0
7865 -157 -174 0
7865 -157 -172 0
7865 -157 -170 0
7865 -157 -168 0
7865 -157 -167 0
7865 -155 -191 0
7865 -155 -180 -193 0
7865 -155 -178 -195 0
7865 -155 -176 0
7865 -155 -174 0
7865 -155 -172 0
7865 -155 -170 0
7865 -155 -168 0
7865 -155 -167 0
7865 -153 -193 0
7865 -153 -180 -195 0
7865 -153 -178 0
7865 -153 -176 0
7865 -153 -174 0
7865 -153 -172 0
7865 -153 -170 0
7865 -153 -168 0
7865 -153 -167 0
7865 -152 -195 0
7865 -152 -180 0
7865 -152 -178 0
7865 -152 -176 0
7865 -152 -174 0
7865 -152 -172 0
7865 -152 -170 0
7865 -152 -168 0
7865 -152 -167 0
c ((18<=(x_00002_00002 + x_00002_00003 + x_00002_00004))=tv=SATLiteral(7866))
-7866 -178 -182 0
-7866 -176 -183 0
-7866 -174 -185 0
-7866 -172 -187 0
-7866 -170 -189 0
-7866 -168 -191 0
-7866 -167 -193 0
-7866 -165 -180 -182 0
-7866 -165 -178 -183 0
-7866 -165 -176 -185 0
-7866 -165 -174 -187 0
-7866 -165 -172 -189 0
-7866 -165 -170 -191 0
-7866 -165 -168 -193 0
-7866 -165 -167 -195 0
-7866 -163 -182 0
-7866 -163 -180 -183 0
-7866 -163 -178 -185 0
-7866 -163 -176 -187 0
-7866 -163 -174 -189 0
-7866 -163 -172 -191 0
-7866 -163 -170 -193 0
-7866 -163 -168 -195 0
-7866 -163 -167 0
-7866 -161 -183 0
-7866 -161 -180 -185 0
-7866 -161 -178 -187 0
-7866 -161 -176 -189 0
-7866 -161 -174 -191 0
-7866 -161 -172 -193 0
-7866 -161 -170 -195 0
-7866 -161 -168 0
-7866 -161 -167 0
-7866 -159 -185 0
-7866 -159 -180 -187 0
-7866 -159 -178 -189 0
-7866 -159 -176 -191 0
-7866 -159 -174 -193 0
-7866 -159 -172 -195 0
-7866 -159 -170 0
-7866 -159 -168 0
-7866 -159 -167 0
-7866 -157 -187 0
-7866 -157 -180 -189 0
-7866 -157 -178 -191 0
-7866 -157 -176 -193 0
-7866 -157 -174 -195 0
-7866 -157 -172 0
-7866 -157 -170 0
-7866 -157 -168 0
-7866 -157 -167 0
-7866 -155 -189 0
-7866 -155 -180 -191 0
-7866 -155 -178 -193 0
-7866 -155 -176 -195 0
-7866 -155 -174 0
-7866 -155 -172 0
-7866 -155 -170 0
-7866 -155 -168 0
-7866 -155 -167 0
-7866 -153 -191 0
-7866 -153 -180 -193 0
-7866 -153 -178 -195 0
-7866 -153 -176 0
-7866 -153 -174 0
-7866 -153 -172 0
-7866 -153 -170 0
-7866 -153 -168 0
-7866 -153 -167 0
-7866 -152 -193 0
-7866 -152 -180 -195 0
-7866 -152 -178 0
-7866 -152 -176 0
-7866 -152 -174 0
-7866 -152 -172 0
-7866 -152 -170 0
-7866 -152 -168 0
-7866 -152 -167 0
7866 178 195 0
7866 180 193 0
7866 152 176 195 0
7866 152 178 193 0
7866 152 180 191 0
7866 153 174 195 0
7866 153 176 193 0
7866 153 178 191 0
7866 153 180 189 0
7866 155 172 195 0
7866 155 174 193 0
7866 155 176 191 0
7866 155 178 189 0
7866 155 180 187 0
7866 157 170 195 0
7866 157 172 193 0
7866 157 174 191 0
7866 157 176 189 0
7866 157 178 187 0
7866 157 180 185 0
7866 159 168 195 0
7866 159 170 193 0
7866 159 172 191 0
7866 159 174 189 0
7866 159 176 187 0
7866 159 178 185 0
7866 159 180 183 0
7866 161 167 195 0
7866 161 168 193 0
7866 161 170 191 0
7866 161 172 189 0
7866 161 174 187 0
7866 161 176 185 0
7866 161 178 183 0
7866 161 180 182 0
7866 163 195 0
7866 163 167 193 0
7866 163 168 191 0
7866 163 170 189 0
7866 163 172 187 0
7866 163 174 185 0
7866 163 176 183 0
7866 163 178 182 0
7866 163 180 0
7866 165 193 0
7866 165 167 191 0
7866 165 168 189 0
7866 165 170 187 0
7866 165 172 185 0
7866 165 174 183 0
7866 165 176 182 0
7866 165 178 0
7866 165 180 0
c (((x_00002_00005 + x_00002_00006)<=7)=tv=SATLiteral(7867))
-7867 221 0
-7867 197 219 0
-7867 198 217 0
-7867 200 215 0
-7867 202 213 0
-7867 204 212 0
-7867 206 0
-7867 208 0
-7867 210 0
7867 -206 -212 0
7867 -204 -213 0
7867 -202 -215 0
7867 -200 -217 0
7867 -198 -219 0
7867 -197 -221 0
c ((7<=(x_00002_00005 + x_00002_00006))=tv=SATLiteral(7868))
-7868 -204 -212 0
-7868 -202 -213 0
-7868 -200 -215 0
-7868 -198 -217 0
-7868 -197 -219 0
7868 219 0
7868 197 217 0
7868 198 215 0
7868 200 213 0
7868 202 212 0
7868 204 0
7868 206 0
7868 208 0
7868 210 0
c (((x_00002_00007 + x_00002_00008 + x_00003_00007)<=13)=tv=SATLiteral(7869))
-7869 245 375 0
-7869 247 373 0
-7869 249 371 0
-7869 251 369 0
-7869 253 367 0
-7869 255 365 0
-7869 227 243 375 0
-7869 227 245 373 0
-7869 227 247 371 0
-7869 227 249 369 0
-7869 227 251 367 0
-7869 227 253 365 0
-7869 227 255 363 0
-7869 228 242 375 0
-7869 228 243 373 0
-7869 228 245 371 0
-7869 228 247 369 0
-7869 228 249 367 0
-7869 228 251 365 0
-7869 228 253 363 0
-7869 228 255 362 0
-7869 230 375 0
-7869 230 242 373 0
-7869 230 243 371 0
-7869 230 245 369 0
-7869 230 247 367 0
-7869 230 249 365 0
-7869 230 251 363 0
-7869 230 253 362 0
-7869 230 255 0
-7869 232 373 0
-7869 232 242 371 0
-7869 232 243 369 0
-7869 232 245 367 0
-7869 232 247 365 0
-7869 232 249 363 0
-7869 232 251 362 0
-7869 232 253 0
-7869 232 255 0
-7869 234 371 0
-7869 234 242 369 0
-7869 234 243 367 0
-7869 234 245 365 0
-7869 234 247 363 0
-7869 234 249 362 0
-7869 234 251 0
-7869 234 253 0
-7869 234 255 0
-7869 236 369 0
-7869 236 242 367 0
-7869 236 243 365 0
-7869 236 245 363 0
-7869 236 247 362 0
-7869 236 249 0
-7869 236 251 0
-7869 236 253 0
-7869 236 255 0
-7869 238 367 0
-7869 238 242 365 0
-7869 238 243 363 0
-7869 238 245 362 0
-7869 238 247 0
-7869 238 249 0
-7869 238 251 0
-7869 238 253 0
-7869 238 255 0
-7869 240 365 0
-7869 240 242 363 0
-7869 240 243 362 0
-7869 240 245 0
-7869 240 247 0
-7869 240 249 0
-7869 240 251 0
-7869 240 253 0
-7869 240 255 0
7869 -245 -362 0
7869 -243 -363 0
7869 -242 -365 0
7869 -240 -247 -362 0
7869 -240 -245 -363 0
7869 -240 -243 -365 0
7869 -240 -242 -367 0
7869 -238 -249 -362 0
7869 -238 -247 -363 0
7869 -238 -245 -365 0
7869 -238 -243 -367 0
7869 -238 -242 -369 0
7869 -236 -251 -362 0
7869 -236 -249 -363 0
7869 -236 -247 -365 0
7869 -236 -245 -367 0
7869 -236 -243 -369 0
7869 -236 -242 -371 0
7869 -234 -253 -362 0
7869 -234 -251 -363 0
7869 -234 -249 -365 0
7869 -234 -247 -367 0
7869 -234 -245 -369 0
7869 -234 -243 -371 0
7869 -234 -242 -373 0
7869 -232 -255 -362 0
7869 -232 -253 -363 0
7869 -232 -251 -365 0
7869 -232 -249 -367 0
7869 -232 -247 -369 0
7869 -232 -245 -371 0
7869 -232 -243 -373 0
7869 -232 -242 -375 0
7869 -230 -362 0
7869 -230 -255 -363 0
7869 -230 -253 -365 0
7869 -230 -251 -367 0
7869 -230 -249 -369 0
7869 -230 -247 -371 0
7869 -230 -245 -373 0
7869 -230 -243 -375 0
7869 -230 -242 0
7869 -228 -363 0
7869 -228 -255 -365 0
7869 -228 -253 -367 0
7869 -228 -251 -369 0
7869 -228 -249 -371 0
7869 -228 -247 -373 0
7869 -228 -245 -375 0
7869 -228 -243 0
7869 -228 -242 0
7869 -227 -365 0
7869 -227 -255 -367 0
7869 -227 -253 -369 0
7869 -227 -251 -371 0
7869 -227 -249 -373 0
7869 -227 -247 -375 0
7869 -227 -245 0
7869 -227 -243 0
7869 -227 -242 0
c ((13<=(x_00002_00007 + x_00002_00008 + x_00003_00007))=tv=SATLiteral(7870))
-7870 -243 -362 0
-7870 -242 -363 0
-7870 -240 -245 -362 0
-7870 -240 -243 -363 0
-7870 -240 -242 -365 0
-7870 -238 -247 -362 0
-7870 -238 -245 -363 0
-7870 -238 -243 -365 0
-7870 -238 -242 -367 0
-7870 -236 -249 -362 0
-7870 -236 -247 -363 0
-7870 -236 -245 -365 0
-7870 -236 -243 -367 0
-7870 -236 -242 -369 0
-7870 -234 -251 -362 0
-7870 -234 -249 -363 0
-7870 -234 -247 -365 0
-7870 -234 -245 -367 0
-7870 -234 -243 -369 0
-7870 -234 -242 -371 0
-7870 -232 -253 -362 0
-7870 -232 -251 -363 0
-7870 -232 -249 -365 0
-7870 -232 -247 -367 0
-7870 -232 -245 -369 0
-7870 -232 -243 -371 0
-7870 -232 -242 -373 0
-7870 -230 -255 -362 0
-7870 -230 -253 -363 0
-7870 -230 -251 -365 0
-7870 -230 -249 -367 0
-7870 -230 -247 -369 0
-7870 -230 -245 -371 0
-7870 -230 -243 -373 0
-7870 -230 -242 -375 0
-7870 -228 -362 0
-7870 -228 -255 -363 0
-7870 -228 -253 -365 0
-7870 -228 -251 -367 0
-7870 -228 -249 -369 0
-7870 -228 -247 -371 0
-7870 -228 -245 -373 0
-7870 -228 -243 -375 0
-7870 -228 -242 0
-7870 -227 -363 0
-7870 -227 -255 -365 0
-7870 -227 -253 -367 0
-7870 -227 -251 -369 0
-7870 -227 -249 -371 0
-7870 -227 -247 -373 0
-7870 -227 -245 -375 0
-7870 -227 -243 0
-7870 -227 -242 0
7870 243 375 0
7870 245 373 0
7870 247 371 0
7870 249 369 0
7870 251 367 0
7870 253 365 0
7870 255 363 0
7870 227 242 375 0
7870 227 243 373 0
7870 227 245 371 0
7870 227 247 369 0
7870 227 249 367 0
7870 227 251 365 0
7870 227 253 363 0
7870 227 255 362 0
7870 228 375 0
7870 228 242 373 0
7870 228 243 371 0
7870 228 245 369 0
7870 228 247 367 0
7870 228 249 365 0
7870 228 251 363 0
7870 228 253 362 0
7870 228 255 0
7870 230 373 0
7870 230 242 371 0
7870 230 243 369 0
7870 230 245 367 0
7870 230 247 365 0
7870 230 249 363 0
7870 230 251 362 0
7870 230 253 0
7870 230 255 0
7870 232 371 0
7870 232 242 369 0
7870 232 243 367 0
7870 232 245 365 0
7870 232 247 363 0
7870 232 249 362 0
7870 232 251 0
7870 232 253 0
7870 232 255 0
7870 234 369 0
7870 234 242 367 0
7870 234 243 365 0
7870 234 245 363 0
7870 234 247 362 0
7870 234 249 0
7870 234 251 0
7870 234 253 0
7870 234 255 0
7870 236 367 0
7870 236 242 365 0
7870 236 243 363 0
7870 236 245 362 0
7870 236 247 0
7870 236 249 0
7870 236 251 0
7870 236 253 0
7870 236 255 0
7870 238 365 0
7870 238 242 363 0
7870 238 243 362 0
7870 238 245 0
7870 238 247 0
7870 238 249 0
7870 238 251 0
7870 238 253 0
7870 238 255 0
7870 240 363 0
7870 240 242 362 0
7870 240 243 0
7870 240 245 0
7870 240 247 0
7870 240 249 0
7870 240 251 0
7870 240 253 0
7870 240 255 0
c (((x_00003_00001 + x_00003_00002)<=5)=tv=SATLiteral(7871))
-7871 292 0
-7871 272 290 0
-7871 273 288 0
-7871 275 287 0
-7871 277 0
-7871 279 0
-7871 281 0
-7871 283 0
-7871 285 0
7871 -277 -287 0
7871 -275 -288 0
7871 -273 -290 0
7871 -272 -292 0
c ((5<=(x_00003_00001 + x_00003_00002))=tv=SATLiteral(7872))
-7872 -275 -287 0
-7872 -273 -288 0
-7872 -272 -290 0
7872 290 0
7872 272 288 0
7872 273 287 0
7872 275 0
7872 277 0
7872 279 0
7872 281 0
7872 283 0
7872 285 0
c (((x_00003_00004 + x_00004_00004 + x_00004_00005)<=16)=tv=SATLiteral(7873))
-7873 461 480 0
-7873 463 478 0
-7873 465 476 0
-7873 317 459 480 0
-7873 317 461 478 0
-7873 317 463 476 0
-7873 317 465 474 0
-7873 318 457 480 0
-7873 318 459 478 0
-7873 318 461 476 0
-7873 318 463 474 0
-7873 318 465 472 0
-7873 320 455 480 0
-7873 320 457 478 0
-7873 320 459 476 0
-7873 320 461 474 0
-7873 320 463 472 0
-7873 320 465 470 0
-7873 322 453 480 0
-7873 322 455 478 0
-7873 322 457 476 0
-7873 322 459 474 0
-7873 322 461 472 0
-7873 322 463 470 0
-7873 322 465 468 0
-7873 324 452 480 0
-7873 324 453 478 0
-7873 324 455 476 0
-7873 324 457 474 0
-7873 324 459 472 0
-7873 324 461 470 0
-7873 324 463 468 0
-7873 324 465 467 0
-7873 326 480 0
-7873 326 452 478 0
-7873 326 453 476 0
-7873 326 455 474 0
-7873 326 457 472 0
-7873 326 459 470 0
-7873 326 461 468 0
-7873 326 463 467 0
-7873 326 465 0
-7873 328 478 0
-7873 328 452 476 0
-7873 328 453 474 0
-7873 328 455 472 0
-7873 328 457 470 0
-7873 328 459 468 0
-7873 328 461 467 0
-7873 328 463 0
-7873 328 465 0
-7873 330 476 0
-7873 330 452 474 0
-7873 330 453 472 0
-7873 330 455 470 0
-7873 330 457 468 0
-7873 330 459 467 0
-7873 330 461 0
-7873 330 463 0
-7873 330 465 0
7873 -461 -467 0
7873 -459 -468 0
7873 -457 -470 0
7873 -455 -472 0
7873 -453 -474 0
7873 -452 -476 0
7873 -330 -463 -467 0
7873 -330 -461 -468 0
7873 -330 -459 -470 0
7873 -330 -457 -472 0
7873 -330 -455 -474 0
7873 -330 -453 -476 0
7873 -330 -452 -478 0
7873 -328 -465 -467 0
7873 -328 -463 -468 0
7873 -328 -461 -470 0
7873 -328 -459 -472 0
7873 -328 -457 -474 0
7873 -328 -455 -476 0
7873 -328 -453 -478 0
7873 -328 -452 -480 0
7873 -326 -467 0
7873 -326 -465 -468 0
7873 -326 -463 -470 0
7873 -326 -461 -472 0
7873 -326 -459 -474 0
7873 -326 -457 -476 0
7873 -326 -455 -478 0
7873 -326 -453 -480 0
7873 -326 -452 0
7873 -324 -468 0
7873 -324 -465 -470 0
7873 -324 -463 -472 0
7873 -324 -461 -474 0
7873 -324 -459 -476 0
7873 -324 -457 -478 0
7873 -324 -455 -480 0
7873 -324 -453 0
7873 -324 -452 0
7873 -322 -470 0
7873 -322 -465 -472 0
7873 -322 -463 -474 0
7873 -322 -461 -476 0
7873 -322 -459 -478 0
7873 -322 -457 -480 0
7873 -322 -455 0
7873 -322 -453 0
7873 -322 -452 0
7873 -320 -472 0
7873 -320 -465 -474 0
7873 -320 -463 -476 0
7873 -320 -461 -478 0
7873 -320 -459 -480 0
7873 -320 -457 0
7873 -320 -455 0
7873 -320 -453 0
7873 -320 -452 0
7873 -318 -474 0
7873 -318 -465 -476 0
7873 -318 -463 -478 0
7873 -318 -461 -480 0
7873 -318 -459 0
7873 -318 -457 0
7873 -318 -455 0
7873 -318 -453 0
7873 -318 -452 0
7873 -317 -476 0
7873 -317 -465 -478 0
7873 -317 -463 -480 0
7873 -317 -461 0
7873 -317 -459 0
7873 -317 -457 0
7873 -317 -455 0
7873 -317 -453 0
7873 -317 -452 0
c ((16<=(x_00003_00004 + x_00004_00004 + x_00004_00005))=tv=SATLiteral(7874))
-7874 -459 -467 0
-7874 -457 -468 0
-7874 -455 -470 0
-7874 -453 -472 0
-7874 -452 -474 0
-7874 -330 -461 -467 0
-7874 -330 -459 -468 0
-7874 -330 -457 -470 0
-7874 -330 -455 -472 0
-7874 -330 -453 -474 0
-7874 -330 -452 -476 0
-7874 -328 -463 -467 0
-7874 -328 -461 -468 0
-7874 -328 -459 -470 0
-7874 -328 -457 -472 0
-7874 -328 -455 -474 0
-7874 -328 -453 -476 0
-7874 -328 -452 -478 0
-7874 -326 -465 -467 0
-7874 -326 -463 -468 0
-7874 -326 -461 -470 0
-7874 -326 -459 -472 0
-7874 -326 -457 -474 0
-7874 -326 -455 -476 0
-7874 -326 -453 -478 0
-7874 -326 -452 -480 0
-7874 -324 -467 0
-7874 -324 -465 -468 0
-7874 -324 -463 -470 0
-7874 -324 -461 -472 0
-7874 -324 -459 -474 0
-7874 -324 -457 -476 0
-7874 -324 -455 -478 0
-7874 -324 -453 -480 0
-7874 -324 -452 0
-7874 -322 -468 0
-7874 -322 -465 -470 0
-7874 -322 -463 -472 0
-7874 -322 -461 -474 0
-7874 -322 -459 -476 0
-7874 -322 -457 -478 0
-7874 -322 -455 -480 0
-7874 -322 -453 0
-7874 -322 -452 0
-7874 -320 -470 0
-7874 -320 -465 -472 0
-7874 -320 -463 -474 0
-7874 -320 -461 -476 0
-7874 -320 -459 -478 0
-7874 -320 -457 -480 0
-7874 -320 -455 0
-7874 -320 -453 0
-7874 -320 -452 0
-7874 -318 -472 0
-7874 -318 -465 -474 0
-7874 -318 -463 -476 0
-7874 -318 -461 -478 0
-7874 -318 -459 -480 0
-7874 -318 -457 0
-7874 -318 -455 0
-7874 -318 -453 0
-7874 -318 -452 0
-7874 -317 -474 0
-7874 -317 -465 -476 0
-7874 -317 -463 -478 0
-7874 -317 -461 -480 0
-7874 -317 -459 0
-7874 -317 -457 0
-7874 -317 -455 0
-7874 -317 -453 0
-7874 -317 -452 0
7874 459 480 0
7874 461 478 0
7874 463 476 0
7874 465 474 0
7874 317 457 480 0
7874 317 459 478 0
7874 317 461 476 0
7874 317 463 474 0
7874 317 465 472 0
7874 318 455 480 0
7874 318 457 478 0
7874 318 459 476 0
7874 318 461 474 0
7874 318 463 472 0
7874 318 465 470 0
7874 320 453 480 0
7874 320 455 478 0
7874 320 457 476 0
7874 320 459 474 0
7874 320 461 472 0
7874 320 463 470 0
7874 320 465 468 0
7874 322 452 480 0
7874 322 453 478 0
7874 322 455 476 0
7874 322 457 474 0
7874 322 459 472 0
7874 322 461 470 0
7874 322 463 468 0
7874 322 465 467 0
7874 324 480 0
7874 324 452 478 0
7874 324 453 476 0
7874 324 455 474 0
7874 324 457 472 0
7874 324 459 470 0
7874 324 461 468 0
7874 324 463 467 0
7874 324 465 0
7874 326 478 0
7874 326 452 476 0
7874 326 453 474 0
7874 326 455 472 0
7874 326 457 470 0
7874 326 459 468 0
7874 326 461 467 0
7874 326 463 0
7874 326 465 0
7874 328 476 0
7874 328 452 474 0
7874 328 453 472 0
7874 328 455 470 0
7874 328 457 468 0
7874 328 459 467 0
7874 328 461 0
7874 328 463 0
7874 328 465 0
7874 330 474 0
7874 330 452 472 0
7874 330 453 470 0
7874 330 455 468 0
7874 330 457 467 0
7874 330 459 0
7874 330 461 0
7874 330 463 0
7874 330 465 0
c (((x_00003_00005 + x_00003_00006)<=14)=tv=SATLiteral(7875))
-7875 339 360 0
-7875 341 358 0
-7875 343 356 0
-7875 345 354 0
7875 -354 0
7875 -345 -356 0
7875 -343 -358 0
7875 -341 -360 0
7875 -339 0
7875 -337 0
7875 -335 0
7875 -333 0
7875 -332 0
c ((14<=(x_00003_00005 + x_00003_00006))=tv=SATLiteral(7876))
-7876 -352 0
-7876 -345 -354 0
-7876 -343 -356 0
-7876 -341 -358 0
-7876 -339 -360 0
-7876 -337 0
-7876 -335 0
-7876 -333 0
-7876 -332 0
7876 337 360 0
7876 339 358 0
7876 341 356 0
7876 343 354 0
7876 345 352 0
c (((x_00004_00001 + x_00005_00001 + x_00006_00001)<=8)=tv=SATLiteral(7877))
-7877 686 0
-7877 542 684 0
-7877 543 682 0
-7877 545 680 0
-7877 547 678 0
-7877 549 677 0
-7877 551 0
-7877 553 0
-7877 555 0
-7877 407 684 0
-7877 407 542 682 0
-7877 407 543 680 0
-7877 407 545 678 0
-7877 407 547 677 0
-7877 407 549 0
-7877 407 551 0
-7877 407 553 0
-7877 407 555 0
-7877 408 682 0
-7877 408 542 680 0
-7877 408 543 678 0
-7877 408 545 677 0
-7877 408 547 0
-7877 408 549 0
-7877 408 551 0
-7877 408 553 0
-7877 408 555 0
-7877 410 680 0
-7877 410 542 678 0
-7877 410 543 677 0
-7877 410 545 0
-7877 410 547 0
-7877 410 549 0
-7877 410 551 0
-7877 410 553 0
-7877 410 555 0
-7877 412 678 0
-7877 412 542 677 0
-7877 412 543 0
-7877 412 545 0
-7877 412 547 0
-7877 412 549 0
-7877 412 551 0
-7877 412 553 0
-7877 412 555 0
-7877 414 677 0
-7877 414 542 0
-7877 414 543 0
-7877 414 545 0
-7877 414 547 0
-7877 414 549 0
-7877 414 551 0
-7877 414 553 0
-7877 414 555 0
-7877 416 0
-7877 416 542 0
-7877 416 543 0
-7877 416 545 0
-7877 416 547 0
-7877 416 549 0
-7877 416 551 0
-7877 416 553 0
-7877 416 555 0
-7877 418 0
-7877 418 542 0
-7877 418 543 0
-7877 418 545 0
-7877 418 547 0
-7877 418 549 0
-7877 418 551 0
-7877 418 553 0
-7877 418 555 0
-7877 420 0
-7877 420 542 0
-7877 420 543 0
-7877 420 545 0
-7877 420 547 0
-7877 420 549 0
-7877 420 551 0
-7877 420 553 0
-7877 420 555 0
7877 -416 -542 -677 0
7877 -414 -543 -677 0
7877 -414 -542 -678 0
7877 -412 -545 -677 0
7877 -412 -543 -678 0
7877 -412 -542 -680 0
7877 -410 -547 -677 0
7877 -410 -545 -678 0
7877 -410 -543 -680 0
7877 -410 -542 -682 0
7877 -408 -549 -677 0
7877 -408 -547 -678 0
7877 -408 -545 -680 0
7877 -408 -543 -682 0
7877 -408 -542 -684 0
7877 -407 -551 -677 0
7877 -407 -549 -678 0
7877 -407 -547 -680 0
7877 -407 -545 -682 0
7877 -407 -543 -684 0
7877 -407 -542 -686 0
c ((8<=(x_00004_00001 + x_00005_00001 + x_00006_00001))=tv=SATLiteral(7878))
-7878 -414 -542 -677 0
-7878 -412 -543 -677 0
-7878 -412 -542 -678 0
-7878 -410 -545 -677 0
-7878 -410 -543 -678 0
-7878 -410 -542 -680 0
-7878 -408 -547 -677 0
-7878 -408 -545 -678 0
-7878 -408 -543 -680 0
-7878 -408 -542 -682 0
-7878 -407 -549 -677 0
-7878 -407 -547 -678 0
-7878 -407 -545 -680 0
-7878 -407 -543 -682 0
-7878 -407 -542 -684 0
7878 684 0
7878 542 682 0
7878 543 680 0
7878 545 678 0
7878 547 677 0
7878 549 0
7878 551 0
7878 553 0
7878 555 0
7878 407 682 0
7878 407 542 680 0
7878 407 543 678 0
7878 407 545 677 0
7878 407 547 0
7878 407 549 0
7878 407 551 0
7878 407 553 0
7878 407 555 0
7878 408 680 0
7878 408 542 678 0
7878 408 543 677 0
7878 408 545 0
7878 408 547 0
7878 408 549 0
7878 408 551 0
7878 408 553 0
7878 408 555 0
7878 410 678 0
7878 410 542 677 0
7878 410 543 0
7878 410 545 0
7878 410 547 0
7878 410 549 0
7878 410 551 0
7878 410 553 0
7878 410 555 0
7878 412 677 0
7878 412 542 0
7878 412 543 0
7878 412 545 0
7878 412 547 0
7878 412 549 0
7878 412 551 0
7878 412 553 0
7878 412 555 0
7878 414 0
7878 414 542 0
7878 414 543 0
7878 414 545 0
7878 414 547 0
7878 414 549 0
7878 414 551 0
7878 414 553 0
7878 414 555 0
7878 416 0
7878 416 542 0
7878 416 543 0
7878 416 545 0
7878 416 547 0
7878 416 549 0
7878 416 551 0
7878 416 553 0
7878 416 555 0
7878 418 0
7878 418 542 0
7878 418 543 0
7878 418 545 0
7878 418 547 0
7878 418 549 0
7878 418 551 0
7878 418 553 0
7878 418 555 0
7878 420 0
7878 420 542 0
7878 420 543 0
7878 420 545 0
7878 420 547 0
7878 420 549 0
7878 420 551 0
7878 420 553 0
7878 420 555 0
c (((x_00004_00002 + x_00004_00003)<=14)=tv=SATLiteral(7879))
-7879 429 450 0
-7879 431 448 0
-7879 433 446 0
-7879 435 444 0
7879 -444 0
7879 -435 -446 0
7879 -433 -448 0
7879 -431 -450 0
7879 -429 0
7879 -427 0
7879 -425 0
7879 -423 0
7879 -422 0
c ((14<=(x_00004_00002 + x_00004_00003))=tv=SATLiteral(7880))
-7880 -442 0
-7880 -435 -444 0
-7880 -433 -446 0
-7880 -431 -448 0
-7880 -429 -450 0
-7880 -427 0
-7880 -425 0
-7880 -423 0
-7880 -422 0
7880 427 450 0
7880 429 448 0
7880 431 446 0
7880 433 444 0
7880 435 442 0
c (((aux429 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1))<=16)=tv=SATLiteral(7881))
-7881 617 1826 0
-7881 618 1824 0
-7881 620 1822 0
-7881 622 1820 0
-7881 624 1818 0
-7881 626 1816 0
-7881 628 1814 0
-7881 630 1812 0
-7881 602 1826 0
-7881 602 617 1824 0
-7881 602 618 1822 0
-7881 602 620 1820 0
-7881 602 622 1818 0
-7881 602 624 1816 0
-7881 602 626 1814 0
-7881 602 628 1812 0
-7881 602 630 1810 0
-7881 603 1824 0
-7881 603 617 1822 0
-7881 603 618 1820 0
-7881 603 620 1818 0
-7881 603 622 1816 0
-7881 603 624 1814 0
-7881 603 626 1812 0
-7881 603 628 1810 0
-7881 603 630 1808 0
-7881 605 1822 0
-7881 605 617 1820 0
-7881 605 618 1818 0
-7881 605 620 1816 0
-7881 605 622 1814 0
-7881 605 624 1812 0
-7881 605 626 1810 0
-7881 605 628 1808 0
-7881 605 630 1806 0
-7881 607 1820 0
-7881 607 617 1818 0
-7881 607 618 1816 0
-7881 607 620 1814 0
-7881 607 622 1812 0
-7881 607 624 1810 0
-7881 607 626 1808 0
-7881 607 628 1806 0
-7881 607 630 1804 0
-7881 609 1818 0
-7881 609 617 1816 0
-7881 609 618 1814 0
-7881 609 620 1812 0
-7881 609 622 1810 0
-7881 609 624 1808 0
-7881 609 626 1806 0
-7881 609 628 1804 0
-7881 609 630 1802 0
-7881 611 1816 0
-7881 611 617 1814 0
-7881 611 618 1812 0
-7881 611 620 1810 0
-7881 611 622 1808 0
-7881 611 624 1806 0
-7881 611 626 1804 0
-7881 611 628 1802 0
-7881 611 630 1800 0
-7881 613 1814 0
-7881 613 617 1812 0
-7881 613 618 1810 0
-7881 613 620 1808 0
-7881 613 622 1806 0
-7881 613 624 1804 0
-7881 613 626 1802 0
-7881 613 628 1800 0
-7881 613 630 1798 0
-7881 615 1812 0
-7881 615 617 1810 0
-7881 615 618 1808 0
-7881 615 620 1806 0
-7881 615 622 1804 0
-7881 615 624 1802 0
-7881 615 626 1800 0
-7881 615 628 1798 0
-7881 615 630 1797 0
7881 -1797 0
7881 -630 -1798 0
7881 -628 -1800 0
7881 -626 -1802 0
7881 -624 -1804 0
7881 -622 -1806 0
7881 -620 -1808 0
7881 -618 -1810 0
7881 -617 -1812 0
7881 -615 -1798 0
7881 -615 -630 -1800 0
7881 -615 -628 -1802 0
7881 -615 -626 -1804 0
7881 -615 -624 -1806 0
7881 -615 -622 -1808 0
7881 -615 -620 -1810 0
7881 -615 -618 -1812 0
7881 -615 -617 -1814 0
7881 -613 -1800 0
7881 -613 -630 -1802 0
7881 -613 -628 -1804 0
7881 -613 -626 -1806 0
7881 -613 -624 -1808 0
7881 -613 -622 -1810 0
7881 -613 -620 -1812 0
7881 -613 -618 -1814 0
7881 -613 -617 -1816 0
7881 -611 -1802 0
7881 -611 -630 -1804 0
7881 -611 -628 -1806 0
7881 -611 -626 -1808 0
7881 -611 -624 -1810 0
7881 -611 -622 -1812 0
7881 -611 -620 -1814 0
7881 -611 -618 -1816 0
7881 -611 -617 -1818 0
7881 -609 -1804 0
7881 -609 -630 -1806 0
7881 -609 -628 -1808 0
7881 -609 -626 -1810 0
7881 -609 -624 -1812 0
7881 -609 -622 -1814 0
7881 -609 -620 -1816 0
7881 -609 -618 -1818 0
7881 -609 -617 -1820 0
7881 -607 -1806 0
7881 -607 -630 -1808 0
7881 -607 -628 -1810 0
7881 -607 -626 -1812 0
7881 -607 -624 -1814 0
7881 -607 -622 -1816 0
7881 -607 -620 -1818 0
7881 -607 -618 -1820 0
7881 -607 -617 -1822 0
7881 -605 -1808 0
7881 -605 -630 -1810 0
7881 -605 -628 -1812 0
7881 -605 -626 -1814 0
7881 -605 -624 -1816 0
7881 -605 -622 -1818 0
7881 -605 -620 -1820 0
7881 -605 -618 -1822 0
7881 -605 -617 -1824 0
7881 -603 -1810 0
7881 -603 -630 -1812 0
7881 -603 -628 -1814 0
7881 -603 -626 -1816 0
7881 -603 -624 -1818 0
7881 -603 -622 -1820 0
7881 -603 -620 -1822 0
7881 -603 -618 -1824 0
7881 -603 -617 -1826 0
7881 -602 -1812 0
7881 -602 -630 -1814 0
7881 -602 -628 -1816 0
7881 -602 -626 -1818 0
7881 -602 -624 -1820 0
7881 -602 -622 -1822 0
7881 -602 -620 -1824 0
7881 -602 -618 -1826 0
7881 -602 -617 0
c ((16<=(aux429 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1)))=tv=SATLiteral(7882))
-7882 -630 -1797 0
-7882 -628 -1798 0
-7882 -626 -1800 0
-7882 -624 -1802 0
-7882 -622 -1804 0
-7882 -620 -1806 0
-7882 -618 -1808 0
-7882 -617 -1810 0
-7882 -615 -1797 0
-7882 -615 -630 -1798 0
-7882 -615 -628 -1800 0
-7882 -615 -626 -1802 0
-7882 -615 -624 -1804 0
-7882 -615 -622 -1806 0
-7882 -615 -620 -1808 0
-7882 -615 -618 -1810 0
-7882 -615 -617 -1812 0
-7882 -613 -1798 0
-7882 -613 -630 -1800 0
-7882 -613 -628 -1802 0
-7882 -613 -626 -1804 0
-7882 -613 -624 -1806 0
-7882 -613 -622 -1808 0
-7882 -613 -620 -1810 0
-7882 -613 -618 -1812 0
-7882 -613 -617 -1814 0
-7882 -611 -1800 0
-7882 -611 -630 -1802 0
-7882 -611 -628 -1804 0
-7882 -611 -626 -1806 0
-7882 -611 -624 -1808 0
-7882 -611 -622 -1810 0
-7882 -611 -620 -1812 0
-7882 -611 -618 -1814 0
-7882 -611 -617 -1816 0
-7882 -609 -1802 0
-7882 -609 -630 -1804 0
-7882 -609 -628 -1806 0
-7882 -609 -626 -1808 0
-7882 -609 -624 -1810 0
-7882 -609 -622 -1812 0
-7882 -609 -620 -1814 0
-7882 -609 -618 -1816 0
-7882 -609 -617 -1818 0
-7882 -607 -1804 0
-7882 -607 -630 -1806 0
-7882 -607 -628 -1808 0
-7882 -607 -626 -1810 0
-7882 -607 -624 -1812 0
-7882 -607 -622 -1814 0
-7882 -607 -620 -1816 0
-7882 -607 -618 -1818 0
-7882 -607 -617 -1820 0
-7882 -605 -1806 0
-7882 -605 -630 -1808 0
-7882 -605 -628 -1810 0
-7882 -605 -626 -1812 0
-7882 -605 -624 -1814 0
-7882 -605 -622 -1816 0
-7882 -605 -620 -1818 0
-7882 -605 -618 -1820 0
-7882 -605 -617 -1822 0
-7882 -603 -1808 0
-7882 -603 -630 -1810 0
-7882 -603 -628 -1812 0
-7882 -603 -626 -1814 0
-7882 -603 -624 -1816 0
-7882 -603 -622 -1818 0
-7882 -603 -620 -1820 0
-7882 -603 -618 -1822 0
-7882 -603 -617 -1824 0
-7882 -602 -1810 0
-7882 -602 -630 -1812 0
-7882 -602 -628 -1814 0
-7882 -602 -626 -1816 0
-7882 -602 -624 -1818 0
-7882 -602 -622 -1820 0
-7882 -602 -620 -1822 0
-7882 -602 -618 -1824 0
-7882 -602 -617 -1826 0
7882 1826 0
7882 617 1824 0
7882 618 1822 0
7882 620 1820 0
7882 622 1818 0
7882 624 1816 0
7882 626 1814 0
7882 628 1812 0
7882 630 1810 0
7882 602 1824 0
7882 602 617 1822 0
7882 602 618 1820 0
7882 602 620 1818 0
7882 602 622 1816 0
7882 602 624 1814 0
7882 602 626 1812 0
7882 602 628 1810 0
7882 602 630 1808 0
7882 603 1822 0
7882 603 617 1820 0
7882 603 618 1818 0
7882 603 620 1816 0
7882 603 622 1814 0
7882 603 624 1812 0
7882 603 626 1810 0
7882 603 628 1808 0
7882 603 630 1806 0
7882 605 1820 0
7882 605 617 1818 0
7882 605 618 1816 0
7882 605 620 1814 0
7882 605 622 1812 0
7882 605 624 1810 0
7882 605 626 1808 0
7882 605 628 1806 0
7882 605 630 1804 0
7882 607 1818 0
7882 607 617 1816 0
7882 607 618 1814 0
7882 607 620 1812 0
7882 607 622 1810 0
7882 607 624 1808 0
7882 607 626 1806 0
7882 607 628 1804 0
7882 607 630 1802 0
7882 609 1816 0
7882 609 617 1814 0
7882 609 618 1812 0
7882 609 620 1810 0
7882 609 622 1808 0
7882 609 624 1806 0
7882 609 626 1804 0
7882 609 628 1802 0
7882 609 630 1800 0
7882 611 1814 0
7882 611 617 1812 0
7882 611 618 1810 0
7882 611 620 1808 0
7882 611 622 1806 0
7882 611 624 1804 0
7882 611 626 1802 0
7882 611 628 1800 0
7882 611 630 1798 0
7882 613 1812 0
7882 613 617 1810 0
7882 613 618 1808 0
7882 613 620 1806 0
7882 613 622 1804 0
7882 613 624 1802 0
7882 613 626 1800 0
7882 613 628 1798 0
7882 613 630 1797 0
7882 615 1810 0
7882 615 617 1808 0
7882 615 618 1806 0
7882 615 620 1804 0
7882 615 622 1802 0
7882 615 624 1800 0
7882 615 626 1798 0
7882 615 628 1797 0
7882 615 630 0
c (((x_00004_00007 + x_00004_00008 + x_00005_00008)<=11)=tv=SATLiteral(7883))
-7883 512 660 0
-7883 513 658 0
-7883 515 656 0
-7883 517 654 0
-7883 519 652 0
-7883 521 650 0
-7883 523 648 0
-7883 525 647 0
-7883 497 660 0
-7883 497 512 658 0
-7883 497 513 656 0
-7883 497 515 654 0
-7883 497 517 652 0
-7883 497 519 650 0
-7883 497 521 648 0
-7883 497 523 647 0
-7883 497 525 0
-7883 498 658 0
-7883 498 512 656 0
-7883 498 513 654 0
-7883 498 515 652 0
-7883 498 517 650 0
-7883 498 519 648 0
-7883 498 521 647 0
-7883 498 523 0
-7883 498 525 0
-7883 500 656 0
-7883 500 512 654 0
-7883 500 513 652 0
-7883 500 515 650 0
-7883 500 517 648 0
-7883 500 519 647 0
-7883 500 521 0
-7883 500 523 0
-7883 500 525 0
-7883 502 654 0
-7883 502 512 652 0
-7883 502 513 650 0
-7883 502 515 648 0
-7883 502 517 647 0
-7883 502 519 0
-7883 502 521 0
-7883 502 523 0
-7883 502 525 0
-7883 504 652 0
-7883 504 512 650 0
-7883 504 513 648 0
-7883 504 515 647 0
-7883 504 517 0
-7883 504 519 0
-7883 504 521 0
-7883 504 523 0
-7883 504 525 0
-7883 506 650 0
-7883 506 512 648 0
-7883 506 513 647 0
-7883 506 515 0
-7883 506 517 0
-7883 506 519 0
-7883 506 521 0
-7883 506 523 0
-7883 506 525 0
-7883 508 648 0
-7883 508 512 647 0
-7883 508 513 0
-7883 508 515 0
-7883 508 517 0
-7883 508 519 0
-7883 508 521 0
-7883 508 523 0
-7883 508 525 0
-7883 510 647 0
-7883 510 512 0
-7883 510 513 0
-7883 510 515 0
-7883 510 517 0
-7883 510 519 0
-7883 510 521 0
-7883 510 523 0
-7883 510 525 0
7883 -512 -647 0
7883 -510 -513 -647 0
7883 -510 -512 -648 0
7883 -508 -515 -647 0
7883 -508 -513 -648 0
7883 -508 -512 -650 0
7883 -506 -517 -647 0
7883 -506 -515 -648 0
7883 -506 -513 -650 0
7883 -506 -512 -652 0
7883 -504 -519 -647 0
7883 -504 -517 -648 0
7883 -504 -515 -650 0
7883 -504 -513 -652 0
7883 -504 -512 -654 0
7883 -502 -521 -647 0
7883 -502 -519 -648 0
7883 -502 -517 -650 0
7883 -502 -515 -652 0
7883 -502 -513 -654 0
7883 -502 -512 -656 0
7883 -500 -523 -647 0
7883 -500 -521 -648 0
7883 -500 -519 -650 0
7883 -500 -517 -652 0
7883 -500 -515 -654 0
7883 -500 -513 -656 0
7883 -500 -512 -658 0
7883 -498 -525 -647 0
7883 -498 -523 -648 0
7883 -498 -521 -650 0
7883 -498 -519 -652 0
7883 -498 -517 -654 0
7883 -498 -515 -656 0
7883 -498 -513 -658 0
7883 -498 -512 -660 0
7883 -497 -647 0
7883 -497 -525 -648 0
7883 -497 -523 -650 0
7883 -497 -521 -652 0
7883 -497 -519 -654 0
7883 -497 -517 -656 0
7883 -497 -515 -658 0
7883 -497 -513 -660 0
7883 -497 -512 0
c ((11<=(x_00004_00007 + x_00004_00008 + x_00005_00008))=tv=SATLiteral(7884))
-7884 -510 -512 -647 0
-7884 -508 -513 -647 0
-7884 -508 -512 -648 0
-7884 -506 -515 -647 0
-7884 -506 -513 -648 0
-7884 -506 -512 -650 0
-7884 -504 -517 -647 0
-7884 -504 -515 -648 0
-7884 -504 -513 -650 0
-7884 -504 -512 -652 0
-7884 -502 -519 -647 0
-7884 -502 -517 -648 0
-7884 -502 -515 -650 0
-7884 -502 -513 -652 0
-7884 -502 -512 -654 0
-7884 -500 -521 -647 0
-7884 -500 -519 -648 0
-7884 -500 -517 -650 0
-7884 -500 -515 -652 0
-7884 -500 -513 -654 0
-7884 -500 -512 -656 0
-7884 -498 -523 -647 0
-7884 -498 -521 -648 0
-7884 -498 -519 -650 0
-7884 -498 -517 -652 0
-7884 -498 -515 -654 0
-7884 -498 -513 -656 0
-7884 -498 -512 -658 0
-7884 -497 -525 -647 0
-7884 -497 -523 -648 0
-7884 -497 -521 -650 0
-7884 -497 -519 -652 0
-7884 -497 -517 -654 0
-7884 -497 -515 -656 0
-7884 -497 -513 -658 0
-7884 -497 -512 -660 0
7884 660 0
7884 512 658 0
7884 513 656 0
7884 515 654 0
7884 517 652 0
7884 519 650 0
7884 521 648 0
7884 523 647 0
7884 525 0
7884 497 658 0
7884 497 512 656 0
7884 497 513 654 0
7884 497 515 652 0
7884 497 517 650 0
7884 497 519 648 0
7884 497 521 647 0
7884 497 523 0
7884 497 525 0
7884 498 656 0
7884 498 512 654 0
7884 498 513 652 0
7884 498 515 650 0
7884 498 517 648 0
7884 498 519 647 0
7884 498 521 0
7884 498 523 0
7884 498 525 0
7884 500 654 0
7884 500 512 652 0
7884 500 513 650 0
7884 500 515 648 0
7884 500 517 647 0
7884 500 519 0
7884 500 521 0
7884 500 523 0
7884 500 525 0
7884 502 652 0
7884 502 512 650 0
7884 502 513 648 0
7884 502 515 647 0
7884 502 517 0
7884 502 519 0
7884 502 521 0
7884 502 523 0
7884 502 525 0
7884 504 650 0
7884 504 512 648 0
7884 504 513 647 0
7884 504 515 0
7884 504 517 0
7884 504 519 0
7884 504 521 0
7884 504 523 0
7884 504 525 0
7884 506 648 0
7884 506 512 647 0
7884 506 513 0
7884 506 515 0
7884 506 517 0
7884 506 519 0
7884 506 521 0
7884 506 523 0
7884 506 525 0
7884 508 647 0
7884 508 512 0
7884 508 513 0
7884 508 515 0
7884 508 517 0
7884 508 519 0
7884 508 521 0
7884 508 523 0
7884 508 525 0
7884 510 0
7884 510 512 0
7884 510 513 0
7884 510 515 0
7884 510 517 0
7884 510 519 0
7884 510 521 0
7884 510 523 0
7884 510 525 0
c (((x_00004_00009 + x_00005_00009 + x_00006_00009)<=16)=tv=SATLiteral(7885))
-7885 671 810 0
-7885 673 808 0
-7885 675 806 0
-7885 527 669 810 0
-7885 527 671 808 0
-7885 527 673 806 0
-7885 527 675 804 0
-7885 528 667 810 0
-7885 528 669 808 0
-7885 528 671 806 0
-7885 528 673 804 0
-7885 528 675 802 0
-7885 530 665 810 0
-7885 530 667 808 0
-7885 530 669 806 0
-7885 530 671 804 0
-7885 530 673 802 0
-7885 530 675 800 0
-7885 532 663 810 0
-7885 532 665 808 0
-7885 532 667 806 0
-7885 532 669 804 0
-7885 532 671 802 0
-7885 532 673 800 0
-7885 532 675 798 0
-7885 534 662 810 0
-7885 534 663 808 0
-7885 534 665 806 0
-7885 534 667 804 0
-7885 534 669 802 0
-7885 534 671 800 0
-7885 534 673 798 0
-7885 534 675 797 0
-7885 536 810 0
-7885 536 662 808 0
-7885 536 663 806 0
-7885 536 665 804 0
-7885 536 667 802 0
-7885 536 669 800 0
-7885 536 671 798 0
-7885 536 673 797 0
-7885 536 675 0
-7885 538 808 0
-7885 538 662 806 0
-7885 538 663 804 0
-7885 538 665 802 0
-7885 538 667 800 0
-7885 538 669 798 0
-7885 538 671 797 0
-7885 538 673 0
-7885 538 675 0
-7885 540 806 0
-7885 540 662 804 0
-7885 540 663 802 0
-7885 540 665 800 0
-7885 540 667 798 0
-7885 540 669 797 0
-7885 540 671 0
-7885 540 673 0
-7885 540 675 0
7885 -671 -797 0
7885 -669 -798 0
7885 -667 -800 0
7885 -665 -802 0
7885 -663 -804 0
7885 -662 -806 0
7885 -540 -673 -797 0
7885 -540 -671 -798 0
7885 -540 -669 -800 0
7885 -540 -667 -802 0
7885 -540 -665 -804 0
7885 -540 -663 -806 0
7885 -540 -662 -808 0
7885 -538 -675 -797 0
7885 -538 -673 -798 0
7885 -538 -671 -800 0
7885 -538 -669 -802 0
7885 -538 -667 -804 0
7885 -538 -665 -806 0
7885 -538 -663 -808 0
7885 -538 -662 -810 0
7885 -536 -797 0
7885 -536 -675 -798 0
7885 -536 -673 -800 0
7885 -536 -671 -802 0
7885 -536 -669 -804 0
7885 -536 -667 -806 0
7885 -536 -665 -808 0
7885 -536 -663 -810 0
7885 -536 -662 0
7885 -534 -798 0
7885 -534 -675 -800 0
7885 -534 -673 -802 0
7885 -534 -671 -804 0
7885 -534 -669 -806 0
7885 -534 -667 -808 0
7885 -534 -665 -810 0
7885 -534 -663 0
7885 -534 -662 0
7885 -532 -800 0
7885 -532 -675 -802 0
7885 -532 -673 -804 0
7885 -532 -671 -806 0
7885 -532 -669 -808 0
7885 -532 -667 -810 0
7885 -532 -665 0
7885 -532 -663 0
7885 -532 -662 0
7885 -530 -802 0
7885 -530 -675 -804 0
7885 -530 -673 -806 0
7885 -530 -671 -808 0
7885 -530 -669 -810 0
7885 -530 -667 0
7885 -530 -665 0
7885 -530 -663 0
7885 -530 -662 0
7885 -528 -804 0
7885 -528 -675 -806 0
7885 -528 -673 -808 0
7885 -528 -671 -810 0
7885 -528 -669 0
7885 -528 -667 0
7885 -528 -665 0
7885 -528 -663 0
7885 -528 -662 0
7885 -527 -806 0
7885 -527 -675 -808 0
7885 -527 -673 -810 0
7885 -527 -671 0
7885 -527 -669 0
7885 -527 -667 0
7885 -527 -665 0
7885 -527 -663 0
7885 -527 -662 0
c ((16<=(x_00004_00009 + x_00005_00009 + x_00006_00009))=tv=SATLiteral(7886))
-7886 -669 -797 0
-7886 -667 -798 0
-7886 -665 -800 0
-7886 -663 -802 0
-7886 -662 -804 0
-7886 -540 -671 -797 0
-7886 -540 -669 -798 0
-7886 -540 -667 -800 0
-7886 -540 -665 -802 0
-7886 -540 -663 -804 0
-7886 -540 -662 -806 0
-7886 -538 -673 -797 0
-7886 -538 -671 -798 0
-7886 -538 -669 -800 0
-7886 -538 -667 -802 0
-7886 -538 -665 -804 0
-7886 -538 -663 -806 0
-7886 -538 -662 -808 0
-7886 -536 -675 -797 0
-7886 -536 -673 -798 0
-7886 -536 -671 -800 0
-7886 -536 -669 -802 0
-7886 -536 -667 -804 0
-7886 -536 -665 -806 0
-7886 -536 -663 -808 0
-7886 -536 -662 -810 0
-7886 -534 -797 0
-7886 -534 -675 -798 0
-7886 -534 -673 -800 0
-7886 -534 -671 -802 0
-7886 -534 -669 -804 0
-7886 -534 -667 -806 0
-7886 -534 -665 -808 0
-7886 -534 -663 -810 0
-7886 -534 -662 0
-7886 -532 -798 0
-7886 -532 -675 -800 0
-7886 -532 -673 -802 0
-7886 -532 -671 -804 0
-7886 -532 -669 -806 0
-7886 -532 -667 -808 0
-7886 -532 -665 -810 0
-7886 -532 -663 0
-7886 -532 -662 0
-7886 -530 -800 0
-7886 -530 -675 -802 0
-7886 -530 -673 -804 0
-7886 -530 -671 -806 0
-7886 -530 -669 -808 0
-7886 -530 -667 -810 0
-7886 -530 -665 0
-7886 -530 -663 0
-7886 -530 -662 0
-7886 -528 -802 0
-7886 -528 -675 -804 0
-7886 -528 -673 -806 0
-7886 -528 -671 -808 0
-7886 -528 -669 -810 0
-7886 -528 -667 0
-7886 -528 -665 0
-7886 -528 -663 0
-7886 -528 -662 0
-7886 -527 -804 0
-7886 -527 -675 -806 0
-7886 -527 -673 -808 0
-7886 -527 -671 -810 0
-7886 -527 -669 0
-7886 -527 -667 0
-7886 -527 -665 0
-7886 -527 -663 0
-7886 -527 -662 0
7886 669 810 0
7886 671 808 0
7886 673 806 0
7886 675 804 0
7886 527 667 810 0
7886 527 669 808 0
7886 527 671 806 0
7886 527 673 804 0
7886 527 675 802 0
7886 528 665 810 0
7886 528 667 808 0
7886 528 669 806 0
7886 528 671 804 0
7886 528 673 802 0
7886 528 675 800 0
7886 530 663 810 0
7886 530 665 808 0
7886 530 667 806 0
7886 530 669 804 0
7886 530 671 802 0
7886 530 673 800 0
7886 530 675 798 0
7886 532 662 810 0
7886 532 663 808 0
7886 532 665 806 0
7886 532 667 804 0
7886 532 669 802 0
7886 532 671 800 0
7886 532 673 798 0
7886 532 675 797 0
7886 534 810 0
7886 534 662 808 0
7886 534 663 806 0
7886 534 665 804 0
7886 534 667 802 0
7886 534 669 800 0
7886 534 671 798 0
7886 534 673 797 0
7886 534 675 0
7886 536 808 0
7886 536 662 806 0
7886 536 663 804 0
7886 536 665 802 0
7886 536 667 800 0
7886 536 669 798 0
7886 536 671 797 0
7886 536 673 0
7886 536 675 0
7886 538 806 0
7886 538 662 804 0
7886 538 663 802 0
7886 538 665 800 0
7886 538 667 798 0
7886 538 669 797 0
7886 538 671 0
7886 538 673 0
7886 538 675 0
7886 540 804 0
7886 540 662 802 0
7886 540 663 800 0
7886 540 665 798 0
7886 540 667 797 0
7886 540 669 0
7886 540 671 0
7886 540 673 0
7886 540 675 0
c (((x_00005_00002 + x_00006_00002 + x_00006_00003)<=18)=tv=SATLiteral(7887))
-7887 705 720 0
-7887 557 703 720 0
-7887 557 705 718 0
-7887 558 701 720 0
-7887 558 703 718 0
-7887 558 705 716 0
-7887 560 699 720 0
-7887 560 701 718 0
-7887 560 703 716 0
-7887 560 705 714 0
-7887 562 697 720 0
-7887 562 699 718 0
-7887 562 701 716 0
-7887 562 703 714 0
-7887 562 705 712 0
-7887 564 695 720 0
-7887 564 697 718 0
-7887 564 699 716 0
-7887 564 701 714 0
-7887 564 703 712 0
-7887 564 705 710 0
-7887 566 693 720 0
-7887 566 695 718 0
-7887 566 697 716 0
-7887 566 699 714 0
-7887 566 701 712 0
-7887 566 703 710 0
-7887 566 705 708 0
-7887 568 692 720 0
-7887 568 693 718 0
-7887 568 695 716 0
-7887 568 697 714 0
-7887 568 699 712 0
-7887 568 701 710 0
-7887 568 703 708 0
-7887 568 705 707 0
-7887 570 720 0
-7887 570 692 718 0
-7887 570 693 716 0
-7887 570 695 714 0
-7887 570 697 712 0
-7887 570 699 710 0
-7887 570 701 708 0
-7887 570 703 707 0
-7887 570 705 0
7887 -705 -707 0
7887 -703 -708 0
7887 -701 -710 0
7887 -699 -712 0
7887 -697 -714 0
7887 -695 -716 0
7887 -693 -718 0
7887 -692 -720 0
7887 -570 -707 0
7887 -570 -705 -708 0
7887 -570 -703 -710 0
7887 -570 -701 -712 0
7887 -570 -699 -714 0
7887 -570 -697 -716 0
7887 -570 -695 -718 0
7887 -570 -693 -720 0
7887 -570 -692 0
7887 -568 -708 0
7887 -568 -705 -710 0
7887 -568 -703 -712 0
7887 -568 -701 -714 0
7887 -568 -699 -716 0
7887 -568 -697 -718 0
7887 -568 -695 -720 0
7887 -568 -693 0
7887 -568 -692 0
7887 -566 -710 0
7887 -566 -705 -712 0
7887 -566 -703 -714 0
7887 -566 -701 -716 0
7887 -566 -699 -718 0
7887 -566 -697 -720 0
7887 -566 -695 0
7887 -566 -693 0
7887 -566 -692 0
7887 -564 -712 0
7887 -564 -705 -714 0
7887 -564 -703 -716 0
7887 -564 -701 -718 0
7887 -564 -699 -720 0
7887 -564 -697 0
7887 -564 -695 0
7887 -564 -693 0
7887 -564 -692 0
7887 -562 -714 0
7887 -562 -705 -716 0
7887 -562 -703 -718 0
7887 -562 -701 -720 0
7887 -562 -699 0
7887 -562 -697 0
7887 -562 -695 0
7887 -562 -693 0
7887 -562 -692 0
7887 -560 -716 0
7887 -560 -705 -718 0
7887 -560 -703 -720 0
7887 -560 -701 0
7887 -560 -699 0
7887 -560 -697 0
7887 -560 -695 0
7887 -560 -693 0
7887 -560 -692 0
7887 -558 -718 0
7887 -558 -705 -720 0
7887 -558 -703 0
7887 -558 -701 0
7887 -558 -699 0
7887 -558 -697 0
7887 -558 -695 0
7887 -558 -693 0
7887 -558 -692 0
7887 -557 -720 0
7887 -557 -705 0
7887 -557 -703 0
7887 -557 -701 0
7887 -557 -699 0
7887 -557 -697 0
7887 -557 -695 0
7887 -557 -693 0
7887 -557 -692 0
c ((18<=(x_00005_00002 + x_00006_00002 + x_00006_00003))=tv=SATLiteral(7888))
-7888 -703 -707 0
-7888 -701 -708 0
-7888 -699 -710 0
-7888 -697 -712 0
-7888 -695 -714 0
-7888 -693 -716 0
-7888 -692 -718 0
-7888 -570 -705 -707 0
-7888 -570 -703 -708 0
-7888 -570 -701 -710 0
-7888 -570 -699 -712 0
-7888 -570 -697 -714 0
-7888 -570 -695 -716 0
-7888 -570 -693 -718 0
-7888 -570 -692 -720 0
-7888 -568 -707 0
-7888 -568 -705 -708 0
-7888 -568 -703 -710 0
-7888 -568 -701 -712 0
-7888 -568 -699 -714 0
-7888 -568 -697 -716 0
-7888 -568 -695 -718 0
-7888 -568 -693 -720 0
-7888 -568 -692 0
-7888 -566 -708 0
-7888 -566 -705 -710 0
-7888 -566 -703 -712 0
-7888 -566 -701 -714 0
-7888 -566 -699 -716 0
-7888 -566 -697 -718 0
-7888 -566 -695 -720 0
-7888 -566 -693 0
-7888 -566 -692 0
-7888 -564 -710 0
-7888 -564 -705 -712 0
-7888 -564 -703 -714 0
-7888 -564 -701 -716 0
-7888 -564 -699 -718 0
-7888 -564 -697 -720 0
-7888 -564 -695 0
-7888 -564 -693 0
-7888 -564 -692 0
-7888 -562 -712 0
-7888 -562 -705 -714 0
-7888 -562 -703 -716 0
-7888 -562 -701 -718 0
-7888 -562 -699 -720 0
-7888 -562 -697 0
-7888 -562 -695 0
-7888 -562 -693 0
-7888 -562 -692 0
-7888 -560 -714 0
-7888 -560 -705 -716 0
-7888 -560 -703 -718 0
-7888 -560 -701 -720 0
-7888 -560 -699 0
-7888 -560 -697 0
-7888 -560 -695 0
-7888 -560 -693 0
-7888 -560 -692 0
-7888 -558 -716 0
-7888 -558 -705 -718 0
-7888 -558 -703 -720 0
-7888 -558 -701 0
-7888 -558 -699 0
-7888 -558 -697 0
-7888 -558 -695 0
-7888 -558 -693 0
-7888 -558 -692 0
-7888 -557 -718 0
-7888 -557 -705 -720 0
-7888 -557 -703 0
-7888 -557 -701 0
-7888 -557 -699 0
-7888 -557 -697 0
-7888 -557 -695 0
-7888 -557 -693 0
-7888 -557 -692 0
7888 703 720 0
7888 705 718 0
7888 557 701 720 0
7888 557 703 718 0
7888 557 705 716 0
7888 558 699 720 0
7888 558 701 718 0
7888 558 703 716 0
7888 558 705 714 0
7888 560 697 720 0
7888 560 699 718 0
7888 560 701 716 0
7888 560 703 714 0
7888 560 705 712 0
7888 562 695 720 0
7888 562 697 718 0
7888 562 699 716 0
7888 562 701 714 0
7888 562 703 712 0
7888 562 705 710 0
7888 564 693 720 0
7888 564 695 718 0
7888 564 697 716 0
7888 564 699 714 0
7888 564 701 712 0
7888 564 703 710 0
7888 564 705 708 0
7888 566 692 720 0
7888 566 693 718 0
7888 566 695 716 0
7888 566 697 714 0
7888 566 699 712 0
7888 566 701 710 0
7888 566 703 708 0
7888 566 705 707 0
7888 568 720 0
7888 568 692 718 0
7888 568 693 716 0
7888 568 695 714 0
7888 568 697 712 0
7888 568 699 710 0
7888 568 701 708 0
7888 568 703 707 0
7888 568 705 0
7888 570 718 0
7888 570 692 716 0
7888 570 693 714 0
7888 570 695 712 0
7888 570 697 710 0
7888 570 699 708 0
7888 570 701 707 0
7888 570 703 0
7888 570 705 0
c (((x_00005_00003 + x_00005_00004 + x_00006_00004)<=16)=tv=SATLiteral(7889))
-7889 596 735 0
-7889 598 733 0
-7889 600 731 0
-7889 572 594 735 0
-7889 572 596 733 0
-7889 572 598 731 0
-7889 572 600 729 0
-7889 573 592 735 0
-7889 573 594 733 0
-7889 573 596 731 0
-7889 573 598 729 0
-7889 573 600 727 0
-7889 575 590 735 0
-7889 575 592 733 0
-7889 575 594 731 0
-7889 575 596 729 0
-7889 575 598 727 0
-7889 575 600 725 0
-7889 577 588 735 0
-7889 577 590 733 0
-7889 577 592 731 0
-7889 577 594 729 0
-7889 577 596 727 0
-7889 577 598 725 0
-7889 577 600 723 0
-7889 579 587 735 0
-7889 579 588 733 0
-7889 579 590 731 0
-7889 579 592 729 0
-7889 579 594 727 0
-7889 579 596 725 0
-7889 579 598 723 0
-7889 579 600 722 0
-7889 581 735 0
-7889 581 587 733 0
-7889 581 588 731 0
-7889 581 590 729 0
-7889 581 592 727 0
-7889 581 594 725 0
-7889 581 596 723 0
-7889 581 598 722 0
-7889 581 600 0
-7889 583 733 0
-7889 583 587 731 0
-7889 583 588 729 0
-7889 583 590 727 0
-7889 583 592 725 0
-7889 583 594 723 0
-7889 583 596 722 0
-7889 583 598 0
-7889 583 600 0
-7889 585 731 0
-7889 585 587 729 0
-7889 585 588 727 0
-7889 585 590 725 0
-7889 585 592 723 0
-7889 585 594 722 0
-7889 585 596 0
-7889 585 598 0
-7889 585 600 0
7889 -596 -722 0
7889 -594 -723 0
7889 -592 -725 0
7889 -590 -727 0
7889 -588 -729 0
7889 -587 -731 0
7889 -585 -598 -722 0
7889 -585 -596 -723 0
7889 -585 -594 -725 0
7889 -585 -592 -727 0
7889 -585 -590 -729 0
7889 -585 -588 -731 0
7889 -585 -587 -733 0
7889 -583 -600 -722 0
7889 -583 -598 -723 0
7889 -583 -596 -725 0
7889 -583 -594 -727 0
7889 -583 -592 -729 0
7889 -583 -590 -731 0
7889 -583 -588 -733 0
7889 -583 -587 -735 0
7889 -581 -722 0
7889 -581 -600 -723 0
7889 -581 -598 -725 0
7889 -581 -596 -727 0
7889 -581 -594 -729 0
7889 -581 -592 -731 0
7889 -581 -590 -733 0
7889 -581 -588 -735 0
7889 -581 -587 0
7889 -579 -723 0
7889 -579 -600 -725 0
7889 -579 -598 -727 0
7889 -579 -596 -729 0
7889 -579 -594 -731 0
7889 -579 -592 -733 0
7889 -579 -590 -735 0
7889 -579 -588 0
7889 -579 -587 0
7889 -577 -725 0
7889 -577 -600 -727 0
7889 -577 -598 -729 0
7889 -577 -596 -731 0
7889 -577 -594 -733 0
7889 -577 -592 -735 0
7889 -577 -590 0
7889 -577 -588 0
7889 -577 -587 0
7889 -575 -727 0
7889 -575 -600 -729 0
7889 -575 -598 -731 0
7889 -575 -596 -733 0
7889 -575 -594 -735 0
7889 -575 -592 0
7889 -575 -590 0
7889 -575 -588 0
7889 -575 -587 0
7889 -573 -729 0
7889 -573 -600 -731 0
7889 -573 -598 -733 0
7889 -573 -596 -735 0
7889 -573 -594 0
7889 -573 -592 0
7889 -573 -590 0
7889 -573 -588 0
7889 -573 -587 0
7889 -572 -731 0
7889 -572 -600 -733 0
7889 -572 -598 -735 0
7889 -572 -596 0
7889 -572 -594 0
7889 -572 -592 0
7889 -572 -590 0
7889 -572 -588 0
7889 -572 -587 0
c ((16<=(x_00005_00003 + x_00005_00004 + x_00006_00004))=tv=SATLiteral(7890))
-7890 -594 -722 0
-7890 -592 -723 0
-7890 -590 -725 0
-7890 -588 -727 0
-7890 -587 -729 0
-7890 -585 -596 -722 0
-7890 -585 -594 -723 0
-7890 -585 -592 -725 0
-7890 -585 -590 -727 0
-7890 -585 -588 -729 0
-7890 -585 -587 -731 0
-7890 -583 -598 -722 0
-7890 -583 -596 -723 0
-7890 -583 -594 -725 0
-7890 -583 -592 -727 0
-7890 -583 -590 -729 0
-7890 -583 -588 -731 0
-7890 -583 -587 -733 0
-7890 -581 -600 -722 0
-7890 -581 -598 -723 0
-7890 -581 -596 -725 0
-7890 -581 -594 -727 0
-7890 -581 -592 -729 0
-7890 -581 -590 -731 0
-7890 -581 -588 -733 0
-7890 -581 -587 -735 0
-7890 -579 -722 0
-7890 -579 -600 -723 0
-7890 -579 -598 -725 0
-7890 -579 -596 -727 0
-7890 -579 -594 -729 0
-7890 -579 -592 -731 0
-7890 -579 -590 -733 0
-7890 -579 -588 -735 0
-7890 -579 -587 0
-7890 -577 -723 0
-7890 -577 -600 -725 0
-7890 -577 -598 -727 0
-7890 -577 -596 -729 0
-7890 -577 -594 -731 0
-7890 -577 -592 -733 0
-7890 -577 -590 -735 0
-7890 -577 -588 0
-7890 -577 -587 0
-7890 -575 -725 0
-7890 -575 -600 -727 0
-7890 -575 -598 -729 0
-7890 -575 -596 -731 0
-7890 -575 -594 -733 0
-7890 -575 -592 -735 0
-7890 -575 -590 0
-7890 -575 -588 0
-7890 -575 -587 0
-7890 -573 -727 0
-7890 -573 -600 -729 0
-7890 -573 -598 -731 0
-7890 -573 -596 -733 0
-7890 -573 -594 -735 0
-7890 -573 -592 0
-7890 -573 -590 0
-7890 -573 -588 0
-7890 -573 -587 0
-7890 -572 -729 0
-7890 -572 -600 -731 0
-7890 -572 -598 -733 0
-7890 -572 -596 -735 0
-7890 -572 -594 0
-7890 -572 -592 0
-7890 -572 -590 0
-7890 -572 -588 0
-7890 -572 -587 0
7890 594 735 0
7890 596 733 0
7890 598 731 0
7890 600 729 0
7890 572 592 735 0
7890 572 594 733 0
7890 572 596 731 0
7890 572 598 729 0
7890 572 600 727 0
7890 573 590 735 0
7890 573 592 733 0
7890 573 594 731 0
7890 573 596 729 0
7890 573 598 727 0
7890 573 600 725 0
7890 575 588 735 0
7890 575 590 733 0
7890 575 592 731 0
7890 575 594 729 0
7890 575 596 727 0
7890 575 598 725 0
7890 575 600 723 0
7890 577 587 735 0
7890 577 588 733 0
7890 577 590 731 0
7890 577 592 729 0
7890 577 594 727 0
7890 577 596 725 0
7890 577 598 723 0
7890 577 600 722 0
7890 579 735 0
7890 579 587 733 0
7890 579 588 731 0
7890 579 590 729 0
7890 579 592 727 0
7890 579 594 725 0
7890 579 596 723 0
7890 579 598 722 0
7890 579 600 0
7890 581 733 0
7890 581 587 731 0
7890 581 588 729 0
7890 581 590 727 0
7890 581 592 725 0
7890 581 594 723 0
7890 581 596 722 0
7890 581 598 0
7890 581 600 0
7890 583 731 0
7890 583 587 729 0
7890 583 588 727 0
7890 583 590 725 0
7890 583 592 723 0
7890 583 594 722 0
7890 583 596 0
7890 583 598 0
7890 583 600 0
7890 585 729 0
7890 585 587 727 0
7890 585 588 725 0
7890 585 590 723 0
7890 585 592 722 0
7890 585 594 0
7890 585 596 0
7890 585 598 0
7890 585 600 0
c (((x_00007_00006 + x_00006_00005 + x_00006_00006)<=15)=tv=SATLiteral(7891))
-7891 744 765 0
-7891 746 763 0
-7891 748 761 0
-7891 750 759 0
-7891 887 742 765 0
-7891 887 744 763 0
-7891 887 746 761 0
-7891 887 748 759 0
-7891 887 750 757 0
-7891 888 740 765 0
-7891 888 742 763 0
-7891 888 744 761 0
-7891 888 746 759 0
-7891 888 748 757 0
-7891 888 750 755 0
-7891 890 738 765 0
-7891 890 740 763 0
-7891 890 742 761 0
-7891 890 744 759 0
-7891 890 746 757 0
-7891 890 748 755 0
-7891 890 750 753 0
-7891 892 737 765 0
-7891 892 738 763 0
-7891 892 740 761 0
-7891 892 742 759 0
-7891 892 744 757 0
-7891 892 746 755 0
-7891 892 748 753 0
-7891 892 750 752 0
-7891 894 765 0
-7891 894 737 763 0
-7891 894 738 761 0
-7891 894 740 759 0
-7891 894 742 757 0
-7891 894 744 755 0
-7891 894 746 753 0
-7891 894 748 752 0
-7891 894 750 0
-7891 896 763 0
-7891 896 737 761 0
-7891 896 738 759 0
-7891 896 740 757 0
-7891 896 742 755 0
-7891 896 744 753 0
-7891 896 746 752 0
-7891 896 748 0
-7891 896 750 0
-7891 898 761 0
-7891 898 737 759 0
-7891 898 738 757 0
-7891 898 740 755 0
-7891 898 742 753 0
-7891 898 744 752 0
-7891 898 746 0
-7891 898 748 0
-7891 898 750 0
-7891 900 759 0
-7891 900 737 757 0
-7891 900 738 755 0
-7891 900 740 753 0
-7891 900 742 752 0
-7891 900 744 0
-7891 900 746 0
-7891 900 748 0
-7891 900 750 0
7891 -744 -752 0
7891 -742 -753 0
7891 -740 -755 0
7891 -738 -757 0
7891 -737 -759 0
7891 -900 -746 -752 0
7891 -900 -744 -753 0
7891 -900 -742 -755 0
7891 -900 -740 -757 0
7891 -900 -738 -759 0
7891 -900 -737 -761 0
7891 -898 -748 -752 0
7891 -898 -746 -753 0
7891 -898 -744 -755 0
7891 -898 -742 -757 0
7891 -898 -740 -759 0
7891 -898 -738 -761 0
7891 -898 -737 -763 0
7891 -896 -750 -752 0
7891 -896 -748 -753 0
7891 -896 -746 -755 0
7891 -896 -744 -757 0
7891 -896 -742 -759 0
7891 -896 -740 -761 0
7891 -896 -738 -763 0
7891 -896 -737 -765 0
7891 -894 -752 0
7891 -894 -750 -753 0
7891 -894 -748 -755 0
7891 -894 -746 -757 0
7891 -894 -744 -759 0
7891 -894 -742 -761 0
7891 -894 -740 -763 0
7891 -894 -738 -765 0
7891 -894 -737 0
7891 -892 -753 0
7891 -892 -750 -755 0
7891 -892 -748 -757 0
7891 -892 -746 -759 0
7891 -892 -744 -761 0
7891 -892 -742 -763 0
7891 -892 -740 -765 0
7891 -892 -738 0
7891 -892 -737 0
7891 -890 -755 0
7891 -890 -750 -757 0
7891 -890 -748 -759 0
7891 -890 -746 -761 0
7891 -890 -744 -763 0
7891 -890 -742 -765 0
7891 -890 -740 0
7891 -890 -738 0
7891 -890 -737 0
7891 -888 -757 0
7891 -888 -750 -759 0
7891 -888 -748 -761 0
7891 -888 -746 -763 0
7891 -888 -744 -765 0
7891 -888 -742 0
7891 -888 -740 0
7891 -888 -738 0
7891 -888 -737 0
7891 -887 -759 0
7891 -887 -750 -761 0
7891 -887 -748 -763 0
7891 -887 -746 -765 0
7891 -887 -744 0
7891 -887 -742 0
7891 -887 -740 0
7891 -887 -738 0
7891 -887 -737 0
c ((15<=(x_00007_00006 + x_00006_00005 + x_00006_00006))=tv=SATLiteral(7892))
-7892 -742 -752 0
-7892 -740 -753 0
-7892 -738 -755 0
-7892 -737 -757 0
-7892 -900 -744 -752 0
-7892 -900 -742 -753 0
-7892 -900 -740 -755 0
-7892 -900 -738 -757 0
-7892 -900 -737 -759 0
-7892 -898 -746 -752 0
-7892 -898 -744 -753 0
-7892 -898 -742 -755 0
-7892 -898 -740 -757 0
-7892 -898 -738 -759 0
-7892 -898 -737 -761 0
-7892 -896 -748 -752 0
-7892 -896 -746 -753 0
-7892 -896 -744 -755 0
-7892 -896 -742 -757 0
-7892 -896 -740 -759 0
-7892 -896 -738 -761 0
-7892 -896 -737 -763 0
-7892 -894 -750 -752 0
-7892 -894 -748 -753 0
-7892 -894 -746 -755 0
-7892 -894 -744 -757 0
-7892 -894 -742 -759 0
-7892 -894 -740 -761 0
-7892 -894 -738 -763 0
-7892 -894 -737 -765 0
-7892 -892 -752 0
-7892 -892 -750 -753 0
-7892 -892 -748 -755 0
-7892 -892 -746 -757 0
-7892 -892 -744 -759 0
-7892 -892 -742 -761 0
-7892 -892 -740 -763 0
-7892 -892 -738 -765 0
-7892 -892 -737 0
-7892 -890 -753 0
-7892 -890 -750 -755 0
-7892 -890 -748 -757 0
-7892 -890 -746 -759 0
-7892 -890 -744 -761 0
-7892 -890 -742 -763 0
-7892 -890 -740 -765 0
-7892 -890 -738 0
-7892 -890 -737 0
-7892 -888 -755 0
-7892 -888 -750 -757 0
-7892 -888 -748 -759 0
-7892 -888 -746 -761 0
-7892 -888 -744 -763 0
-7892 -888 -742 -765 0
-7892 -888 -740 0
-7892 -888 -738 0
-7892 -888 -737 0
-7892 -887 -757 0
-7892 -887 -750 -759 0
-7892 -887 -748 -761 0
-7892 -887 -746 -763 0
-7892 -887 -744 -765 0
-7892 -887 -742 0
-7892 -887 -740 0
-7892 -887 -738 0
-7892 -887 -737 0
7892 742 765 0
7892 744 763 0
7892 746 761 0
7892 748 759 0
7892 750 757 0
7892 887 740 765 0
7892 887 742 763 0
7892 887 744 761 0
7892 887 746 759 0
7892 887 748 757 0
7892 887 750 755 0
7892 888 738 765 0
7892 888 740 763 0
7892 888 742 761 0
7892 888 744 759 0
7892 888 746 757 0
7892 888 748 755 0
7892 888 750 753 0
7892 890 737 765 0
7892 890 738 763 0
7892 890 740 761 0
7892 890 742 759 0
7892 890 744 757 0
7892 890 746 755 0
7892 890 748 753 0
7892 890 750 752 0
7892 892 765 0
7892 892 737 763 0
7892 892 738 761 0
7892 892 740 759 0
7892 892 742 757 0
7892 892 744 755 0
7892 892 746 753 0
7892 892 748 752 0
7892 892 750 0
7892 894 763 0
7892 894 737 761 0
7892 894 738 759 0
7892 894 740 757 0
7892 894 742 755 0
7892 894 744 753 0
7892 894 746 752 0
7892 894 748 0
7892 894 750 0
7892 896 761 0
7892 896 737 759 0
7892 896 738 757 0
7892 896 740 755 0
7892 896 742 753 0
7892 896 744 752 0
7892 896 746 0
7892 896 748 0
7892 896 750 0
7892 898 759 0
7892 898 737 757 0
7892 898 738 755 0
7892 898 740 753 0
7892 898 742 752 0
7892 898 744 0
7892 898 746 0
7892 898 748 0
7892 898 750 0
7892 900 757 0
7892 900 737 755 0
7892 900 738 753 0
7892 900 740 752 0
7892 900 742 0
7892 900 744 0
7892 900 746 0
7892 900 748 0
7892 900 750 0
c (((x_00006_00007 + x_00006_00008)<=15)=tv=SATLiteral(7893))
-7893 776 795 0
-7893 778 793 0
-7893 780 791 0
7893 -791 0
7893 -780 -793 0
7893 -778 -795 0
7893 -776 0
7893 -774 0
7893 -772 0
7893 -770 0
7893 -768 0
7893 -767 0
c ((15<=(x_00006_00007 + x_00006_00008))=tv=SATLiteral(7894))
-7894 -789 0
-7894 -780 -791 0
-7894 -778 -793 0
-7894 -776 -795 0
-7894 -774 0
-7894 -772 0
-7894 -770 0
-7894 -768 0
-7894 -767 0
7894 774 795 0
7894 776 793 0
7894 778 791 0
7894 780 789 0
c (((shift(x_00007_00002, -1) + aux430 + shift(x_00008_00001, -1))<=21)=tv=SATLiteral(7895))
-7895 956 1857 0
-7895 958 1855 0
-7895 960 1853 0
-7895 827 954 1857 0
-7895 827 956 1855 0
-7895 827 958 1853 0
-7895 827 960 1851 0
-7895 828 952 1857 0
-7895 828 954 1855 0
-7895 828 956 1853 0
-7895 828 958 1851 0
-7895 828 960 1849 0
-7895 830 950 1857 0
-7895 830 952 1855 0
-7895 830 954 1853 0
-7895 830 956 1851 0
-7895 830 958 1849 0
-7895 830 960 1847 0
-7895 832 948 1857 0
-7895 832 950 1855 0
-7895 832 952 1853 0
-7895 832 954 1851 0
-7895 832 956 1849 0
-7895 832 958 1847 0
-7895 832 960 1845 0
-7895 834 947 1857 0
-7895 834 948 1855 0
-7895 834 950 1853 0
-7895 834 952 1851 0
-7895 834 954 1849 0
-7895 834 956 1847 0
-7895 834 958 1845 0
-7895 834 960 1843 0
-7895 836 1857 0
-7895 836 947 1855 0
-7895 836 948 1853 0
-7895 836 950 1851 0
-7895 836 952 1849 0
-7895 836 954 1847 0
-7895 836 956 1845 0
-7895 836 958 1843 0
-7895 836 960 1841 0
-7895 838 1855 0
-7895 838 947 1853 0
-7895 838 948 1851 0
-7895 838 950 1849 0
-7895 838 952 1847 0
-7895 838 954 1845 0
-7895 838 956 1843 0
-7895 838 958 1841 0
-7895 838 960 1839 0
-7895 840 1853 0
-7895 840 947 1851 0
-7895 840 948 1849 0
-7895 840 950 1847 0
-7895 840 952 1845 0
-7895 840 954 1843 0
-7895 840 956 1841 0
-7895 840 958 1839 0
-7895 840 960 1837 0
7895 -1837 0
7895 -960 -1839 0
7895 -958 -1841 0
7895 -956 -1843 0
7895 -954 -1845 0
7895 -952 -1847 0
7895 -950 -1849 0
7895 -948 -1851 0
7895 -947 -1853 0
7895 -840 -1839 0
7895 -840 -960 -1841 0
7895 -840 -958 -1843 0
7895 -840 -956 -1845 0
7895 -840 -954 -1847 0
7895 -840 -952 -1849 0
7895 -840 -950 -1851 0
7895 -840 -948 -1853 0
7895 -840 -947 -1855 0
7895 -838 -1841 0
7895 -838 -960 -1843 0
7895 -838 -958 -1845 0
7895 -838 -956 -1847 0
7895 -838 -954 -1849 0
7895 -838 -952 -1851 0
7895 -838 -950 -1853 0
7895 -838 -948 -1855 0
7895 -838 -947 -1857 0
7895 -836 -1843 0
7895 -836 -960 -1845 0
7895 -836 -958 -1847 0
7895 -836 -956 -1849 0
7895 -836 -954 -1851 0
7895 -836 -952 -1853 0
7895 -836 -950 -1855 0
7895 -836 -948 -1857 0
7895 -836 -947 0
7895 -834 -1845 0
7895 -834 -960 -1847 0
7895 -834 -958 -1849 0
7895 -834 -956 -1851 0
7895 -834 -954 -1853 0
7895 -834 -952 -1855 0
7895 -834 -950 -1857 0
7895 -834 -948 0
7895 -834 -947 0
7895 -832 -1847 0
7895 -832 -960 -1849 0
7895 -832 -958 -1851 0
7895 -832 -956 -1853 0
7895 -832 -954 -1855 0
7895 -832 -952 -1857 0
7895 -832 -950 0
7895 -832 -948 0
7895 -832 -947 0
7895 -830 -1849 0
7895 -830 -960 -1851 0
7895 -830 -958 -1853 0
7895 -830 -956 -1855 0
7895 -830 -954 -1857 0
7895 -830 -952 0
7895 -830 -950 0
7895 -830 -948 0
7895 -830 -947 0
7895 -828 -1851 0
7895 -828 -960 -1853 0
7895 -828 -958 -1855 0
7895 -828 -956 -1857 0
7895 -828 -954 0
7895 -828 -952 0
7895 -828 -950 0
7895 -828 -948 0
7895 -828 -947 0
7895 -827 -1853 0
7895 -827 -960 -1855 0
7895 -827 -958 -1857 0
7895 -827 -956 0
7895 -827 -954 0
7895 -827 -952 0
7895 -827 -950 0
7895 -827 -948 0
7895 -827 -947 0
c ((21<=(shift(x_00007_00002, -1) + aux430 + shift(x_00008_00001, -1)))=tv=SATLiteral(7896))
-7896 -1835 0
-7896 -960 -1837 0
-7896 -958 -1839 0
-7896 -956 -1841 0
-7896 -954 -1843 0
-7896 -952 -1845 0
-7896 -950 -1847 0
-7896 -948 -1849 0
-7896 -947 -1851 0
-7896 -840 -1837 0
-7896 -840 -960 -1839 0
-7896 -840 -958 -1841 0
-7896 -840 -956 -1843 0
-7896 -840 -954 -1845 0
-7896 -840 -952 -1847 0
-7896 -840 -950 -1849 0
-7896 -840 -948 -1851 0
-7896 -840 -947 -1853 0
-7896 -838 -1839 0
-7896 -838 -960 -1841 0
-7896 -838 -958 -1843 0
-7896 -838 -956 -1845 0
-7896 -838 -954 -1847 0
-7896 -838 -952 -1849 0
-7896 -838 -950 -1851 0
-7896 -838 -948 -1853 0
-7896 -838 -947 -1855 0
-7896 -836 -1841 0
-7896 -836 -960 -1843 0
-7896 -836 -958 -1845 0
-7896 -836 -956 -1847 0
-7896 -836 -954 -1849 0
-7896 -836 -952 -1851 0
-7896 -836 -950 -1853 0
-7896 -836 -948 -1855 0
-7896 -836 -947 -1857 0
-7896 -834 -1843 0
-7896 -834 -960 -1845 0
-7896 -834 -958 -1847 0
-7896 -834 -956 -1849 0
-7896 -834 -954 -1851 0
-7896 -834 -952 -1853 0
-7896 -834 -950 -1855 0
-7896 -834 -948 -1857 0
-7896 -834 -947 0
-7896 -832 -1845 0
-7896 -832 -960 -1847 0
-7896 -832 -958 -1849 0
-7896 -832 -956 -1851 0
-7896 -832 -954 -1853 0
-7896 -832 -952 -1855 0
-7896 -832 -950 -1857 0
-7896 -832 -948 0
-7896 -832 -947 0
-7896 -830 -1847 0
-7896 -830 -960 -1849 0
-7896 -830 -958 -1851 0
-7896 -830 -956 -1853 0
-7896 -830 -954 -1855 0
-7896 -830 -952 -1857 0
-7896 -830 -950 0
-7896 -830 -948 0
-7896 -830 -947 0
-7896 -828 -1849 0
-7896 -828 -960 -1851 0
-7896 -828 -958 -1853 0
-7896 -828 -956 -1855 0
-7896 -828 -954 -1857 0
-7896 -828 -952 0
-7896 -828 -950 0
-7896 -828 -948 0
-7896 -828 -947 0
-7896 -827 -1851 0
-7896 -827 -960 -1853 0
-7896 -827 -958 -1855 0
-7896 -827 -956 -1857 0
-7896 -827 -954 0
-7896 -827 -952 0
-7896 -827 -950 0
-7896 -827 -948 0
-7896 -827 -947 0
7896 954 1857 0
7896 956 1855 0
7896 958 1853 0
7896 960 1851 0
7896 827 952 1857 0
7896 827 954 1855 0
7896 827 956 1853 0
7896 827 958 1851 0
7896 827 960 1849 0
7896 828 950 1857 0
7896 828 952 1855 0
7896 828 954 1853 0
7896 828 956 1851 0
7896 828 958 1849 0
7896 828 960 1847 0
7896 830 948 1857 0
7896 830 950 1855 0
7896 830 952 1853 0
7896 830 954 1851 0
7896 830 956 1849 0
7896 830 958 1847 0
7896 830 960 1845 0
7896 832 947 1857 0
7896 832 948 1855 0
7896 832 950 1853 0
7896 832 952 1851 0
7896 832 954 1849 0
7896 832 956 1847 0
7896 832 958 1845 0
7896 832 960 1843 0
7896 834 1857 0
7896 834 947 1855 0
7896 834 948 1853 0
7896 834 950 1851 0
7896 834 952 1849 0
7896 834 954 1847 0
7896 834 956 1845 0
7896 834 958 1843 0
7896 834 960 1841 0
7896 836 1855 0
7896 836 947 1853 0
7896 836 948 1851 0
7896 836 950 1849 0
7896 836 952 1847 0
7896 836 954 1845 0
7896 836 956 1843 0
7896 836 958 1841 0
7896 836 960 1839 0
7896 838 1853 0
7896 838 947 1851 0
7896 838 948 1849 0
7896 838 950 1847 0
7896 838 952 1845 0
7896 838 954 1843 0
7896 838 956 1841 0
7896 838 958 1839 0
7896 838 960 1837 0
7896 840 1851 0
7896 840 947 1849 0
7896 840 948 1847 0
7896 840 950 1845 0
7896 840 952 1843 0
7896 840 954 1841 0
7896 840 956 1839 0
7896 840 958 1837 0
7896 840 960 1835 0
c (((x_00007_00003 + x_00008_00002 + x_00008_00003)<=14)=tv=SATLiteral(7897))
-7897 967 990 0
-7897 969 988 0
-7897 971 986 0
-7897 973 984 0
-7897 975 982 0
-7897 842 965 990 0
-7897 842 967 988 0
-7897 842 969 986 0
-7897 842 971 984 0
-7897 842 973 982 0
-7897 842 975 980 0
-7897 843 963 990 0
-7897 843 965 988 0
-7897 843 967 986 0
-7897 843 969 984 0
-7897 843 971 982 0
-7897 843 973 980 0
-7897 843 975 978 0
-7897 845 962 990 0
-7897 845 963 988 0
-7897 845 965 986 0
-7897 845 967 984 0
-7897 845 969 982 0
-7897 845 971 980 0
-7897 845 973 978 0
-7897 845 975 977 0
-7897 847 990 0
-7897 847 962 988 0
-7897 847 963 986 0
-7897 847 965 984 0
-7897 847 967 982 0
-7897 847 969 980 0
-7897 847 971 978 0
-7897 847 973 977 0
-7897 847 975 0
-7897 849 988 0
-7897 849 962 986 0
-7897 849 963 984 0
-7897 849 965 982 0
-7897 849 967 980 0
-7897 849 969 978 0
-7897 849 971 977 0
-7897 849 973 0
-7897 849 975 0
-7897 851 986 0
-7897 851 962 984 0
-7897 851 963 982 0
-7897 851 965 980 0
-7897 851 967 978 0
-7897 851 969 977 0
-7897 851 971 0
-7897 851 973 0
-7897 851 975 0
-7897 853 984 0
-7897 853 962 982 0
-7897 853 963 980 0
-7897 853 965 978 0
-7897 853 967 977 0
-7897 853 969 0
-7897 853 971 0
-7897 853 973 0
-7897 853 975 0
-7897 855 982 0
-7897 855 962 980 0
-7897 855 963 978 0
-7897 855 965 977 0
-7897 855 967 0
-7897 855 969 0
-7897 855 971 0
-7897 855 973 0
-7897 855 975 0
7897 -967 -977 0
7897 -965 -978 0
7897 -963 -980 0
7897 -962 -982 0
7897 -855 -969 -977 0
7897 -855 -967 -978 0
7897 -855 -965 -980 0
7897 -855 -963 -982 0
7897 -855 -962 -984 0
7897 -853 -971 -977 0
7897 -853 -969 -978 0
7897 -853 -967 -980 0
7897 -853 -965 -982 0
7897 -853 -963 -984 0
7897 -853 -962 -986 0
7897 -851 -973 -977 0
7897 -851 -971 -978 0
7897 -851 -969 -980 0
7897 -851 -967 -982 0
7897 -851 -965 -984 0
7897 -851 -963 -986 0
7897 -851 -962 -988 0
7897 -849 -975 -977 0
7897 -849 -973 -978 0
7897 -849 -971 -980 0
7897 -849 -969 -982 0
7897 -849 -967 -984 0
7897 -849 -965 -986 0
7897 -849 -963 -988 0
7897 -849 -962 -990 0
7897 -847 -977 0
7897 -847 -975 -978 0
7897 -847 -973 -980 0
7897 -847 -971 -982 0
7897 -847 -969 -984 0
7897 -847 -967 -986 0
7897 -847 -965 -988 0
7897 -847 -963 -990 0
7897 -847 -962 0
7897 -845 -978 0
7897 -845 -975 -980 0
7897 -845 -973 -982 0
7897 -845 -971 -984 0
7897 -845 -969 -986 0
7897 -845 -967 -988 0
7897 -845 -965 -990 0
7897 -845 -963 0
7897 -845 -962 0
7897 -843 -980 0
7897 -843 -975 -982 0
7897 -843 -973 -984 0
7897 -843 -971 -986 0
7897 -843 -969 -988 0
7897 -843 -967 -990 0
7897 -843 -965 0
7897 -843 -963 0
7897 -843 -962 0
7897 -842 -982 0
7897 -842 -975 -984 0
7897 -842 -973 -986 0
7897 -842 -971 -988 0
7897 -842 -969 -990 0
7897 -842 -967 0
7897 -842 -965 0
7897 -842 -963 0
7897 -842 -962 0
c ((14<=(x_00007_00003 + x_00008_00002 + x_00008_00003))=tv=SATLiteral(7898))
-7898 -965 -977 0
-7898 -963 -978 0
-7898 -962 -980 0
-7898 -855 -967 -977 0
-7898 -855 -965 -978 0
-7898 -855 -963 -980 0
-7898 -855 -962 -982 0
-7898 -853 -969 -977 0
-7898 -853 -967 -978 0
-7898 -853 -965 -980 0
-7898 -853 -963 -982 0
-7898 -853 -962 -984 0
-7898 -851 -971 -977 0
-7898 -851 -969 -978 0
-7898 -851 -967 -980 0
-7898 -851 -965 -982 0
-7898 -851 -963 -984 0
-7898 -851 -962 -986 0
-7898 -849 -973 -977 0
-7898 -849 -971 -978 0
-7898 -849 -969 -980 0
-7898 -849 -967 -982 0
-7898 -849 -965 -984 0
-7898 -849 -963 -986 0
-7898 -849 -962 -988 0
-7898 -847 -975 -977 0
-7898 -847 -973 -978 0
-7898 -847 -971 -980 0
-7898 -847 -969 -982 0
-7898 -847 -967 -984 0
-7898 -847 -965 -986 0
-7898 -847 -963 -988 0
-7898 -847 -962 -990 0
-7898 -845 -977 0
-7898 -845 -975 -978 0
-7898 -845 -973 -980 0
-7898 -845 -971 -982 0
-7898 -845 -969 -984 0
-7898 -845 -967 -986 0
-7898 -845 -965 -988 0
-7898 -845 -963 -990 0
-7898 -845 -962 0
-7898 -843 -978 0
-7898 -843 -975 -980 0
-7898 -843 -973 -982 0
-7898 -843 -971 -984 0
-7898 -843 -969 -986 0
-7898 -843 -967 -988 0
-7898 -843 -965 -990 0
-7898 -843 -963 0
-7898 -843 -962 0
-7898 -842 -980 0
-7898 -842 -975 -982 0
-7898 -842 -973 -984 0
-7898 -842 -971 -986 0
-7898 -842 -969 -988 0
-7898 -842 -967 -990 0
-7898 -842 -965 0
-7898 -842 -963 0
-7898 -842 -962 0
7898 965 990 0
7898 967 988 0
7898 969 986 0
7898 971 984 0
7898 973 982 0
7898 975 980 0
7898 842 963 990 0
7898 842 965 988 0
7898 842 967 986 0
7898 842 969 984 0
7898 842 971 982 0
7898 842 973 980 0
7898 842 975 978 0
7898 843 962 990 0
7898 843 963 988 0
7898 843 965 986 0
7898 843 967 984 0
7898 843 969 982 0
7898 843 971 980 0
7898 843 973 978 0
7898 843 975 977 0
7898 845 990 0
7898 845 962 988 0
7898 845 963 986 0
7898 845 965 984 0
7898 845 967 982 0
7898 845 969 980 0
7898 845 971 978 0
7898 845 973 977 0
7898 845 975 0
7898 847 988 0
7898 847 962 986 0
7898 847 963 984 0
7898 847 965 982 0
7898 847 967 980 0
7898 847 969 978 0
7898 847 971 977 0
7898 847 973 0
7898 847 975 0
7898 849 986 0
7898 849 962 984 0
7898 849 963 982 0
7898 849 965 980 0
7898 849 967 978 0
7898 849 969 977 0
7898 849 971 0
7898 849 973 0
7898 849 975 0
7898 851 984 0
7898 851 962 982 0
7898 851 963 980 0
7898 851 965 978 0
7898 851 967 977 0
7898 851 969 0
7898 851 971 0
7898 851 973 0
7898 851 975 0
7898 853 982 0
7898 853 962 980 0
7898 853 963 978 0
7898 853 965 977 0
7898 853 967 0
7898 853 969 0
7898 853 971 0
7898 853 973 0
7898 853 975 0
7898 855 980 0
7898 855 962 978 0
7898 855 963 977 0
7898 855 965 0
7898 855 967 0
7898 855 969 0
7898 855 971 0
7898 855 973 0
7898 855 975 0
c (((x_00007_00004 + x_00007_00005)<=12)=tv=SATLiteral(7899))
-7899 860 885 0
-7899 862 883 0
-7899 864 881 0
-7899 866 879 0
-7899 868 877 0
-7899 870 875 0
7899 -875 0
7899 -870 -877 0
7899 -868 -879 0
7899 -866 -881 0
7899 -864 -883 0
7899 -862 -885 0
7899 -860 0
7899 -858 0
7899 -857 0
c ((12<=(x_00007_00004 + x_00007_00005))=tv=SATLiteral(7900))
-7900 -873 0
-7900 -870 -875 0
-7900 -868 -877 0
-7900 -866 -879 0
-7900 -864 -881 0
-7900 -862 -883 0
-7900 -860 -885 0
-7900 -858 0
-7900 -857 0
7900 858 885 0
7900 860 883 0
7900 862 881 0
7900 864 879 0
7900 866 877 0
7900 868 875 0
7900 870 873 0
c (((x_00007_00008 + x_00007_00009)<=7)=tv=SATLiteral(7901))
-7901 941 0
-7901 917 939 0
-7901 918 937 0
-7901 920 935 0
-7901 922 933 0
-7901 924 932 0
-7901 926 0
-7901 928 0
-7901 930 0
7901 -926 -932 0
7901 -924 -933 0
7901 -922 -935 0
7901 -920 -937 0
7901 -918 -939 0
7901 -917 -941 0
c ((7<=(x_00007_00008 + x_00007_00009))=tv=SATLiteral(7902))
-7902 -924 -932 0
-7902 -922 -933 0
-7902 -920 -935 0
-7902 -918 -937 0
-7902 -917 -939 0
7902 939 0
7902 917 937 0
7902 918 935 0
7902 920 933 0
7902 922 932 0
7902 924 0
7902 926 0
7902 928 0
7902 930 0
c (((x_00008_00004 + x_00008_00005)<=3)=tv=SATLiteral(7903))
-7903 1008 0
-7903 992 1007 0
-7903 993 0
-7903 995 0
-7903 997 0
-7903 999 0
-7903 1001 0
-7903 1003 0
-7903 1005 0
7903 -993 -1007 0
7903 -992 -1008 0
c ((3<=(x_00008_00004 + x_00008_00005))=tv=SATLiteral(7904))
-7904 -992 -1007 0
7904 1007 0
7904 992 0
7904 993 0
7904 995 0
7904 997 0
7904 999 0
7904 1001 0
7904 1003 0
7904 1005 0
c (((x_00008_00006 + x_00008_00007 + x_00008_00008)<=19)=tv=SATLiteral(7905))
-7905 1022 1050 1065 0
-7905 1023 1048 1065 0
-7905 1023 1050 1063 0
-7905 1025 1046 1065 0
-7905 1025 1048 1063 0
-7905 1025 1050 1061 0
-7905 1027 1044 1065 0
-7905 1027 1046 1063 0
-7905 1027 1048 1061 0
-7905 1027 1050 1059 0
-7905 1029 1042 1065 0
-7905 1029 1044 1063 0
-7905 1029 1046 1061 0
-7905 1029 1048 1059 0
-7905 1029 1050 1057 0
-7905 1031 1040 1065 0
-7905 1031 1042 1063 0
-7905 1031 1044 1061 0
-7905 1031 1046 1059 0
-7905 1031 1048 1057 0
-7905 1031 1050 1055 0
-7905 1033 1038 1065 0
-7905 1033 1040 1063 0
-7905 1033 1042 1061 0
-7905 1033 1044 1059 0
-7905 1033 1046 1057 0
-7905 1033 1048 1055 0
-7905 1033 1050 1053 0
-7905 1035 1037 1065 0
-7905 1035 1038 1063 0
-7905 1035 1040 1061 0
-7905 1035 1042 1059 0
-7905 1035 1044 1057 0
-7905 1035 1046 1055 0
-7905 1035 1048 1053 0
-7905 1035 1050 1052 0
7905 -1052 0
7905 -1050 -1053 0
7905 -1048 -1055 0
7905 -1046 -1057 0
7905 -1044 -1059 0
7905 -1042 -1061 0
7905 -1040 -1063 0
7905 -1038 -1065 0
7905 -1037 0
7905 -1035 -1053 0
7905 -1035 -1050 -1055 0
7905 -1035 -1048 -1057 0
7905 -1035 -1046 -1059 0
7905 -1035 -1044 -1061 0
7905 -1035 -1042 -1063 0
7905 -1035 -1040 -1065 0
7905 -1035 -1038 0
7905 -1035 -1037 0
7905 -1033 -1055 0
7905 -1033 -1050 -1057 0
7905 -1033 -1048 -1059 0
7905 -1033 -1046 -1061 0
7905 -1033 -1044 -1063 0
7905 -1033 -1042 -1065 0
7905 -1033 -1040 0
7905 -1033 -1038 0
7905 -1033 -1037 0
7905 -1031 -1057 0
7905 -1031 -1050 -1059 0
7905 -1031 -1048 -1061 0
7905 -1031 -1046 -1063 0
7905 -1031 -1044 -1065 0
7905 -1031 -1042 0
7905 -1031 -1040 0
7905 -1031 -1038 0
7905 -1031 -1037 0
7905 -1029 -1059 0
7905 -1029 -1050 -1061 0
7905 -1029 -1048 -1063 0
7905 -1029 -1046 -1065 0
7905 -1029 -1044 0
7905 -1029 -1042 0
7905 -1029 -1040 0
7905 -1029 -1038 0
7905 -1029 -1037 0
7905 -1027 -1061 0
7905 -1027 -1050 -1063 0
7905 -1027 -1048 -1065 0
7905 -1027 -1046 0
7905 -1027 -1044 0
7905 -1027 -1042 0
7905 -1027 -1040 0
7905 -1027 -1038 0
7905 -1027 -1037 0
7905 -1025 -1063 0
7905 -1025 -1050 -1065 0
7905 -1025 -1048 0
7905 -1025 -1046 0
7905 -1025 -1044 0
7905 -1025 -1042 0
7905 -1025 -1040 0
7905 -1025 -1038 0
7905 -1025 -1037 0
7905 -1023 -1065 0
7905 -1023 -1050 0
7905 -1023 -1048 0
7905 -1023 -1046 0
7905 -1023 -1044 0
7905 -1023 -1042 0
7905 -1023 -1040 0
7905 -1023 -1038 0
7905 -1023 -1037 0
7905 -1022 0
7905 -1022 -1050 0
7905 -1022 -1048 0
7905 -1022 -1046 0
7905 -1022 -1044 0
7905 -1022 -1042 0
7905 -1022 -1040 0
7905 -1022 -1038 0
7905 -1022 -1037 0
c ((19<=(x_00008_00006 + x_00008_00007 + x_00008_00008))=tv=SATLiteral(7906))
-7906 -1050 -1052 0
-7906 -1048 -1053 0
-7906 -1046 -1055 0
-7906 -1044 -1057 0
-7906 -1042 -1059 0
-7906 -1040 -1061 0
-7906 -1038 -1063 0
-7906 -1037 -1065 0
-7906 -1035 -1052 0
-7906 -1035 -1050 -1053 0
-7906 -1035 -1048 -1055 0
-7906 -1035 -1046 -1057 0
-7906 -1035 -1044 -1059 0
-7906 -1035 -1042 -1061 0
-7906 -1035 -1040 -1063 0
-7906 -1035 -1038 -1065 0
-7906 -1035 -1037 0
-7906 -1033 -1053 0
-7906 -1033 -1050 -1055 0
-7906 -1033 -1048 -1057 0
-7906 -1033 -1046 -1059 0
-7906 -1033 -1044 -1061 0
-7906 -1033 -1042 -1063 0
-7906 -1033 -1040 -1065 0
-7906 -1033 -1038 0
-7906 -1033 -1037 0
-7906 -1031 -1055 0
-7906 -1031 -1050 -1057 0
-7906 -1031 -1048 -1059 0
-7906 -1031 -1046 -1061 0
-7906 -1031 -1044 -1063 0
-7906 -1031 -1042 -1065 0
-7906 -1031 -1040 0
-7906 -1031 -1038 0
-7906 -1031 -1037 0
-7906 -1029 -1057 0
-7906 -1029 -1050 -1059 0
-7906 -1029 -1048 -1061 0
-7906 -1029 -1046 -1063 0
-7906 -1029 -1044 -1065 0
-7906 -1029 -1042 0
-7906 -1029 -1040 0
-7906 -1029 -1038 0
-7906 -1029 -1037 0
-7906 -1027 -1059 0
-7906 -1027 -1050 -1061 0
-7906 -1027 -1048 -1063 0
-7906 -1027 -1046 -1065 0
-7906 -1027 -1044 0
-7906 -1027 -1042 0
-7906 -1027 -1040 0
-7906 -1027 -1038 0
-7906 -1027 -1037 0
-7906 -1025 -1061 0
-7906 -1025 -1050 -1063 0
-7906 -1025 -1048 -1065 0
-7906 -1025 -1046 0
-7906 -1025 -1044 0
-7906 -1025 -1042 0
-7906 -1025 -1040 0
-7906 -1025 -1038 0
-7906 -1025 -1037 0
-7906 -1023 -1063 0
-7906 -1023 -1050 -1065 0
-7906 -1023 -1048 0
-7906 -1023 -1046 0
-7906 -1023 -1044 0
-7906 -1023 -1042 0
-7906 -1023 -1040 0
-7906 -1023 -1038 0
-7906 -1023 -1037 0
-7906 -1022 -1065 0
-7906 -1022 -1050 0
-7906 -1022 -1048 0
-7906 -1022 -1046 0
-7906 -1022 -1044 0
-7906 -1022 -1042 0
-7906 -1022 -1040 0
-7906 -1022 -1038 0
-7906 -1022 -1037 0
7906 1050 1065 0
7906 1022 1048 1065 0
7906 1022 1050 1063 0
7906 1023 1046 1065 0
7906 1023 1048 1063 0
7906 1023 1050 1061 0
7906 1025 1044 1065 0
7906 1025 1046 1063 0
7906 1025 1048 1061 0
7906 1025 1050 1059 0
7906 1027 1042 1065 0
7906 1027 1044 1063 0
7906 1027 1046 1061 0
7906 1027 1048 1059 0
7906 1027 1050 1057 0
7906 1029 1040 1065 0
7906 1029 1042 1063 0
7906 1029 1044 1061 0
7906 1029 1046 1059 0
7906 1029 1048 1057 0
7906 1029 1050 1055 0
7906 1031 1038 1065 0
7906 1031 1040 1063 0
7906 1031 1042 1061 0
7906 1031 1044 1059 0
7906 1031 1046 1057 0
7906 1031 1048 1055 0
7906 1031 1050 1053 0
7906 1033 1037 1065 0
7906 1033 1038 1063 0
7906 1033 1040 1061 0
7906 1033 1042 1059 0
7906 1033 1044 1057 0
7906 1033 1046 1055 0
7906 1033 1048 1053 0
7906 1033 1050 1052 0
7906 1035 1065 0
7906 1035 1037 1063 0
7906 1035 1038 1061 0
7906 1035 1040 1059 0
7906 1035 1042 1057 0
7906 1035 1044 1055 0
7906 1035 1046 1053 0
7906 1035 1048 1052 0
7906 1035 1050 0
c (((x_00009_00002 + x_00009_00003)<=6)=tv=SATLiteral(7907))
-7907 1119 0
-7907 1097 1117 0
-7907 1098 1115 0
-7907 1100 1113 0
-7907 1102 1112 0
-7907 1104 0
-7907 1106 0
-7907 1108 0
-7907 1110 0
7907 -1104 -1112 0
7907 -1102 -1113 0
7907 -1100 -1115 0
7907 -1098 -1117 0
7907 -1097 -1119 0
c ((6<=(x_00009_00002 + x_00009_00003))=tv=SATLiteral(7908))
-7908 -1102 -1112 0
-7908 -1100 -1113 0
-7908 -1098 -1115 0
-7908 -1097 -1117 0
7908 1117 0
7908 1097 1115 0
7908 1098 1113 0
7908 1100 1112 0
7908 1102 0
7908 1104 0
7908 1106 0
7908 1108 0
7908 1110 0
c (((x_00009_00004 + x_00009_00005)<=13)=tv=SATLiteral(7909))
-7909 1132 1155 0
-7909 1134 1153 0
-7909 1136 1151 0
-7909 1138 1149 0
-7909 1140 1147 0
7909 -1147 0
7909 -1140 -1149 0
7909 -1138 -1151 0
7909 -1136 -1153 0
7909 -1134 -1155 0
7909 -1132 0
7909 -1130 0
7909 -1128 0
7909 -1127 0
c ((13<=(x_00009_00004 + x_00009_00005))=tv=SATLiteral(7910))
-7910 -1145 0
-7910 -1140 -1147 0
-7910 -1138 -1149 0
-7910 -1136 -1151 0
-7910 -1134 -1153 0
-7910 -1132 -1155 0
-7910 -1130 0
-7910 -1128 0
-7910 -1127 0
7910 1130 1155 0
7910 1132 1153 0
7910 1134 1151 0
7910 1136 1149 0
7910 1138 1147 0
7910 1140 1145 0
c (((aux431 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1))<=13)=tv=SATLiteral(7911))
-7911 1884 0
-7911 1187 1882 0
-7911 1188 1880 0
-7911 1190 1878 0
-7911 1192 1876 0
-7911 1194 1874 0
-7911 1196 1872 0
-7911 1198 1870 0
-7911 1200 1868 0
-7911 1172 1882 0
-7911 1172 1187 1880 0
-7911 1172 1188 1878 0
-7911 1172 1190 1876 0
-7911 1172 1192 1874 0
-7911 1172 1194 1872 0
-7911 1172 1196 1870 0
-7911 1172 1198 1868 0
-7911 1172 1200 1866 0
-7911 1173 1880 0
-7911 1173 1187 1878 0
-7911 1173 1188 1876 0
-7911 1173 1190 1874 0
-7911 1173 1192 1872 0
-7911 1173 1194 1870 0
-7911 1173 1196 1868 0
-7911 1173 1198 1866 0
-7911 1173 1200 1864 0
-7911 1175 1878 0
-7911 1175 1187 1876 0
-7911 1175 1188 1874 0
-7911 1175 1190 1872 0
-7911 1175 1192 1870 0
-7911 1175 1194 1868 0
-7911 1175 1196 1866 0
-7911 1175 1198 1864 0
-7911 1175 1200 1862 0
-7911 1177 1876 0
-7911 1177 1187 1874 0
-7911 1177 1188 1872 0
-7911 1177 1190 1870 0
-7911 1177 1192 1868 0
-7911 1177 1194 1866 0
-7911 1177 1196 1864 0
-7911 1177 1198 1862 0
-7911 1177 1200 1860 0
-7911 1179 1874 0
-7911 1179 1187 1872 0
-7911 1179 1188 1870 0
-7911 1179 1190 1868 0
-7911 1179 1192 1866 0
-7911 1179 1194 1864 0
-7911 1179 1196 1862 0
-7911 1179 1198 1860 0
-7911 1179 1200 1859 0
-7911 1181 1872 0
-7911 1181 1187 1870 0
-7911 1181 1188 1868 0
-7911 1181 1190 1866 0
-7911 1181 1192 1864 0
-7911 1181 1194 1862 0
-7911 1181 1196 1860 0
-7911 1181 1198 1859 0
-7911 1181 1200 0
-7911 1183 1870 0
-7911 1183 1187 1868 0
-7911 1183 1188 1866 0
-7911 1183 1190 1864 0
-7911 1183 1192 1862 0
-7911 1183 1194 1860 0
-7911 1183 1196 1859 0
-7911 1183 1198 0
-7911 1183 1200 0
-7911 1185 1868 0
-7911 1185 1187 1866 0
-7911 1185 1188 1864 0
-7911 1185 1190 1862 0
-7911 1185 1192 1860 0
-7911 1185 1194 1859 0
-7911 1185 1196 0
-7911 1185 1198 0
-7911 1185 1200 0
7911 -1196 -1859 0
7911 -1194 -1860 0
7911 -1192 -1862 0
7911 -1190 -1864 0
7911 -1188 -1866 0
7911 -1187 -1868 0
7911 -1185 -1198 -1859 0
7911 -1185 -1196 -1860 0
7911 -1185 -1194 -1862 0
7911 -1185 -1192 -1864 0
7911 -1185 -1190 -1866 0
7911 -1185 -1188 -1868 0
7911 -1185 -1187 -1870 0
7911 -1183 -1200 -1859 0
7911 -1183 -1198 -1860 0
7911 -1183 -1196 -1862 0
7911 -1183 -1194 -1864 0
7911 -1183 -1192 -1866 0
7911 -1183 -1190 -1868 0
7911 -1183 -1188 -1870 0
7911 -1183 -1187 -1872 0
7911 -1181 -1859 0
7911 -1181 -1200 -1860 0
7911 -1181 -1198 -1862 0
7911 -1181 -1196 -1864 0
7911 -1181 -1194 -1866 0
7911 -1181 -1192 -1868 0
7911 -1181 -1190 -1870 0
7911 -1181 -1188 -1872 0
7911 -1181 -1187 -1874 0
7911 -1179 -1860 0
7911 -1179 -1200 -1862 0
7911 -1179 -1198 -1864 0
7911 -1179 -1196 -1866 0
7911 -1179 -1194 -1868 0
7911 -1179 -1192 -1870 0
7911 -1179 -1190 -1872 0
7911 -1179 -1188 -1874 0
7911 -1179 -1187 -1876 0
7911 -1177 -1862 0
7911 -1177 -1200 -1864 0
7911 -1177 -1198 -1866 0
7911 -1177 -1196 -1868 0
7911 -1177 -1194 -1870 0
7911 -1177 -1192 -1872 0
7911 -1177 -1190 -1874 0
7911 -1177 -1188 -1876 0
7911 -1177 -1187 -1878 0
7911 -1175 -1864 0
7911 -1175 -1200 -1866 0
7911 -1175 -1198 -1868 0
7911 -1175 -1196 -1870 0
7911 -1175 -1194 -1872 0
7911 -1175 -1192 -1874 0
7911 -1175 -1190 -1876 0
7911 -1175 -1188 -1878 0
7911 -1175 -1187 -1880 0
7911 -1173 -1866 0
7911 -1173 -1200 -1868 0
7911 -1173 -1198 -1870 0
7911 -1173 -1196 -1872 0
7911 -1173 -1194 -1874 0
7911 -1173 -1192 -1876 0
7911 -1173 -1190 -1878 0
7911 -1173 -1188 -1880 0
7911 -1173 -1187 -1882 0
7911 -1172 -1868 0
7911 -1172 -1200 -1870 0
7911 -1172 -1198 -1872 0
7911 -1172 -1196 -1874 0
7911 -1172 -1194 -1876 0
7911 -1172 -1192 -1878 0
7911 -1172 -1190 -1880 0
7911 -1172 -1188 -1882 0
7911 -1172 -1187 -1884 0
c ((13<=(aux431 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1)))=tv=SATLiteral(7912))
-7912 -1194 -1859 0
-7912 -1192 -1860 0
-7912 -1190 -1862 0
-7912 -1188 -1864 0
-7912 -1187 -1866 0
-7912 -1185 -1196 -1859 0
-7912 -1185 -1194 -1860 0
-7912 -1185 -1192 -1862 0
-7912 -1185 -1190 -1864 0
-7912 -1185 -1188 -1866 0
-7912 -1185 -1187 -1868 0
-7912 -1183 -1198 -1859 0
-7912 -1183 -1196 -1860 0
-7912 -1183 -1194 -1862 0
-7912 -1183 -1192 -1864 0
-7912 -1183 -1190 -1866 0
-7912 -1183 -1188 -1868 0
-7912 -1183 -1187 -1870 0
-7912 -1181 -1200 -1859 0
-7912 -1181 -1198 -1860 0
-7912 -1181 -1196 -1862 0
-7912 -1181 -1194 -1864 0
-7912 -1181 -1192 -1866 0
-7912 -1181 -1190 -1868 0
-7912 -1181 -1188 -1870 0
-7912 -1181 -1187 -1872 0
-7912 -1179 -1859 0
-7912 -1179 -1200 -1860 0
-7912 -1179 -1198 -1862 0
-7912 -1179 -1196 -1864 0
-7912 -1179 -1194 -1866 0
-7912 -1179 -1192 -1868 0
-7912 -1179 -1190 -1870 0
-7912 -1179 -1188 -1872 0
-7912 -1179 -1187 -1874 0
-7912 -1177 -1860 0
-7912 -1177 -1200 -1862 0
-7912 -1177 -1198 -1864 0
-7912 -1177 -1196 -1866 0
-7912 -1177 -1194 -1868 0
-7912 -1177 -1192 -1870 0
-7912 -1177 -1190 -1872 0
-7912 -1177 -1188 -1874 0
-7912 -1177 -1187 -1876 0
-7912 -1175 -1862 0
-7912 -1175 -1200 -1864 0
-7912 -1175 -1198 -1866 0
-7912 -1175 -1196 -1868 0
-7912 -1175 -1194 -1870 0
-7912 -1175 -1192 -1872 0
-7912 -1175 -1190 -1874 0
-7912 -1175 -1188 -1876 0
-7912 -1175 -1187 -1878 0
-7912 -1173 -1864 0
-7912 -1173 -1200 -1866 0
-7912 -1173 -1198 -1868 0
-7912 -1173 -1196 -1870 0
-7912 -1173 -1194 -1872 0
-7912 -1173 -1192 -1874 0
-7912 -1173 -1190 -1876 0
-7912 -1173 -1188 -1878 0
-7912 -1173 -1187 -1880 0
-7912 -1172 -1866 0
-7912 -1172 -1200 -1868 0
-7912 -1172 -1198 -1870 0
-7912 -1172 -1196 -1872 0
-7912 -1172 -1194 -1874 0
-7912 -1172 -1192 -1876 0
-7912 -1172 -1190 -1878 0
-7912 -1172 -1188 -1880 0
-7912 -1172 -1187 -1882 0
7912 1882 0
7912 1187 1880 0
7912 1188 1878 0
7912 1190 1876 0
7912 1192 1874 0
7912 1194 1872 0
7912 1196 1870 0
7912 1198 1868 0
7912 1200 1866 0
7912 1172 1880 0
7912 1172 1187 1878 0
7912 1172 1188 1876 0
7912 1172 1190 1874 0
7912 1172 1192 1872 0
7912 1172 1194 1870 0
7912 1172 1196 1868 0
7912 1172 1198 1866 0
7912 1172 1200 1864 0
7912 1173 1878 0
7912 1173 1187 1876 0
7912 1173 1188 1874 0
7912 1173 1190 1872 0
7912 1173 1192 1870 0
7912 1173 1194 1868 0
7912 1173 1196 1866 0
7912 1173 1198 1864 0
7912 1173 1200 1862 0
7912 1175 1876 0
7912 1175 1187 1874 0
7912 1175 1188 1872 0
7912 1175 1190 1870 0
7912 1175 1192 1868 0
7912 1175 1194 1866 0
7912 1175 1196 1864 0
7912 1175 1198 1862 0
7912 1175 1200 1860 0
7912 1177 1874 0
7912 1177 1187 1872 0
7912 1177 1188 1870 0
7912 1177 1190 1868 0
7912 1177 1192 1866 0
7912 1177 1194 1864 0
7912 1177 1196 1862 0
7912 1177 1198 1860 0
7912 1177 1200 1859 0
7912 1179 1872 0
7912 1179 1187 1870 0
7912 1179 1188 1868 0
7912 1179 1190 1866 0
7912 1179 1192 1864 0
7912 1179 1194 1862 0
7912 1179 1196 1860 0
7912 1179 1198 1859 0
7912 1179 1200 0
7912 1181 1870 0
7912 1181 1187 1868 0
7912 1181 1188 1866 0
7912 1181 1190 1864 0
7912 1181 1192 1862 0
7912 1181 1194 1860 0
7912 1181 1196 1859 0
7912 1181 1198 0
7912 1181 1200 0
7912 1183 1868 0
7912 1183 1187 1866 0
7912 1183 1188 1864 0
7912 1183 1190 1862 0
7912 1183 1192 1860 0
7912 1183 1194 1859 0
7912 1183 1196 0
7912 1183 1198 0
7912 1183 1200 0
7912 1185 1866 0
7912 1185 1187 1864 0
7912 1185 1188 1862 0
7912 1185 1190 1860 0
7912 1185 1192 1859 0
7912 1185 1194 0
7912 1185 1196 0
7912 1185 1198 0
7912 1185 1200 0
c (((aux433 + aux436 + aux437)<=1)=tv=SATLiteral(7913))
-7913 1908 0
-7913 1902 1907 0
-7913 1903 0
-7913 1905 0
-7913 1893 1907 0
-7913 1893 1902 0
-7913 1893 1903 0
-7913 1893 1905 0
-7913 1894 0
-7913 1894 1902 0
-7913 1894 1903 0
-7913 1894 1905 0
7913 -1894 -1902 -1907 0
7913 -1893 -1903 -1907 0
7913 -1893 -1902 -1908 0
c ((1<=(aux433 + aux436 + aux437))=tv=SATLiteral(7914))
-7914 -1893 -1902 -1907 0
7914 1907 0
7914 1902 0
7914 1903 0
7914 1905 0
7914 1893 0
7914 1893 1902 0
7914 1893 1903 0
7914 1893 1905 0
7914 1894 0
7914 1894 1902 0
7914 1894 1903 0
7914 1894 1905 0
c (((aux439 + aux442 + aux443)<=1)=tv=SATLiteral(7915))
-7915 1932 0
-7915 1926 1931 0
-7915 1927 0
-7915 1929 0
-7915 1917 1931 0
-7915 1917 1926 0
-7915 1917 1927 0
-7915 1917 1929 0
-7915 1918 0
-7915 1918 1926 0
-7915 1918 1927 0
-7915 1918 1929 0
7915 -1918 -1926 -1931 0
7915 -1917 -1927 -1931 0
7915 -1917 -1926 -1932 0
c ((1<=(aux439 + aux442 + aux443))=tv=SATLiteral(7916))
-7916 -1917 -1926 -1931 0
7916 1931 0
7916 1926 0
7916 1927 0
7916 1929 0
7916 1917 0
7916 1917 1926 0
7916 1917 1927 0
7916 1917 1929 0
7916 1918 0
7916 1918 1926 0
7916 1918 1927 0
7916 1918 1929 0
c (((aux445 + aux448 + aux449)<=1)=tv=SATLiteral(7917))
-7917 1956 0
-7917 1950 1955 0
-7917 1951 0
-7917 1953 0
-7917 1941 1955 0
-7917 1941 1950 0
-7917 1941 1951 0
-7917 1941 1953 0
-7917 1942 0
-7917 1942 1950 0
-7917 1942 1951 0
-7917 1942 1953 0
7917 -1942 -1950 -1955 0
7917 -1941 -1951 -1955 0
7917 -1941 -1950 -1956 0
c ((1<=(aux445 + aux448 + aux449))=tv=SATLiteral(7918))
-7918 -1941 -1950 -1955 0
7918 1955 0
7918 1950 0
7918 1951 0
7918 1953 0
7918 1941 0
7918 1941 1950 0
7918 1941 1951 0
7918 1941 1953 0
7918 1942 0
7918 1942 1950 0
7918 1942 1951 0
7918 1942 1953 0
c (((aux451 + aux454 + aux455)<=1)=tv=SATLiteral(7919))
-7919 1980 0
-7919 1974 1979 0
-7919 1975 0
-7919 1977 0
-7919 1965 1979 0
-7919 1965 1974 0
-7919 1965 1975 0
-7919 1965 1977 0
-7919 1966 0
-7919 1966 1974 0
-7919 1966 1975 0
-7919 1966 1977 0
7919 -1966 -1974 -1979 0
7919 -1965 -1975 -1979 0
7919 -1965 -1974 -1980 0
c ((1<=(aux451 + aux454 + aux455))=tv=SATLiteral(7920))
-7920 -1965 -1974 -1979 0
7920 1979 0
7920 1974 0
7920 1975 0
7920 1977 0
7920 1965 0
7920 1965 1974 0
7920 1965 1975 0
7920 1965 1977 0
7920 1966 0
7920 1966 1974 0
7920 1966 1975 0
7920 1966 1977 0
c (((aux457 + aux460 + aux461)<=1)=tv=SATLiteral(7921))
-7921 2004 0
-7921 1998 2003 0
-7921 1999 0
-7921 2001 0
-7921 1989 2003 0
-7921 1989 1998 0
-7921 1989 1999 0
-7921 1989 2001 0
-7921 1990 0
-7921 1990 1998 0
-7921 1990 1999 0
-7921 1990 2001 0
7921 -1990 -1998 -2003 0
7921 -1989 -1999 -2003 0
7921 -1989 -1998 -2004 0
c ((1<=(aux457 + aux460 + aux461))=tv=SATLiteral(7922))
-7922 -1989 -1998 -2003 0
7922 2003 0
7922 1998 0
7922 1999 0
7922 2001 0
7922 1989 0
7922 1989 1998 0
7922 1989 1999 0
7922 1989 2001 0
7922 1990 0
7922 1990 1998 0
7922 1990 1999 0
7922 1990 2001 0
c (((aux463 + aux466 + aux467)<=1)=tv=SATLiteral(7923))
-7923 2028 0
-7923 2022 2027 0
-7923 2023 0
-7923 2025 0
-7923 2013 2027 0
-7923 2013 2022 0
-7923 2013 2023 0
-7923 2013 2025 0
-7923 2014 0
-7923 2014 2022 0
-7923 2014 2023 0
-7923 2014 2025 0
7923 -2014 -2022 -2027 0
7923 -2013 -2023 -2027 0
7923 -2013 -2022 -2028 0
c ((1<=(aux463 + aux466 + aux467))=tv=SATLiteral(7924))
-7924 -2013 -2022 -2027 0
7924 2027 0
7924 2022 0
7924 2023 0
7924 2025 0
7924 2013 0
7924 2013 2022 0
7924 2013 2023 0
7924 2013 2025 0
7924 2014 0
7924 2014 2022 0
7924 2014 2023 0
7924 2014 2025 0
c (((aux469 + aux472 + aux473)<=1)=tv=SATLiteral(7925))
-7925 2052 0
-7925 2046 2051 0
-7925 2047 0
-7925 2049 0
-7925 2037 2051 0
-7925 2037 2046 0
-7925 2037 2047 0
-7925 2037 2049 0
-7925 2038 0
-7925 2038 2046 0
-7925 2038 2047 0
-7925 2038 2049 0
7925 -2038 -2046 -2051 0
7925 -2037 -2047 -2051 0
7925 -2037 -2046 -2052 0
c ((1<=(aux469 + aux472 + aux473))=tv=SATLiteral(7926))
-7926 -2037 -2046 -2051 0
7926 2051 0
7926 2046 0
7926 2047 0
7926 2049 0
7926 2037 0
7926 2037 2046 0
7926 2037 2047 0
7926 2037 2049 0
7926 2038 0
7926 2038 2046 0
7926 2038 2047 0
7926 2038 2049 0
c (((aux475 + aux478 + aux479)<=1)=tv=SATLiteral(7927))
-7927 2076 0
-7927 2070 2075 0
-7927 2071 0
-7927 2073 0
-7927 2061 2075 0
-7927 2061 2070 0
-7927 2061 2071 0
-7927 2061 2073 0
-7927 2062 0
-7927 2062 2070 0
-7927 2062 2071 0
-7927 2062 2073 0
7927 -2062 -2070 -2075 0
7927 -2061 -2071 -2075 0
7927 -2061 -2070 -2076 0
c ((1<=(aux475 + aux478 + aux479))=tv=SATLiteral(7928))
-7928 -2061 -2070 -2075 0
7928 2075 0
7928 2070 0
7928 2071 0
7928 2073 0
7928 2061 0
7928 2061 2070 0
7928 2061 2071 0
7928 2061 2073 0
7928 2062 0
7928 2062 2070 0
7928 2062 2071 0
7928 2062 2073 0
c (((aux481 + aux484 + aux485)<=1)=tv=SATLiteral(7929))
-7929 2100 0
-7929 2094 2099 0
-7929 2095 0
-7929 2097 0
-7929 2085 2099 0
-7929 2085 2094 0
-7929 2085 2095 0
-7929 2085 2097 0
-7929 2086 0
-7929 2086 2094 0
-7929 2086 2095 0
-7929 2086 2097 0
7929 -2086 -2094 -2099 0
7929 -2085 -2095 -2099 0
7929 -2085 -2094 -2100 0
c ((1<=(aux481 + aux484 + aux485))=tv=SATLiteral(7930))
-7930 -2085 -2094 -2099 0
7930 2099 0
7930 2094 0
7930 2095 0
7930 2097 0
7930 2085 0
7930 2085 2094 0
7930 2085 2095 0
7930 2085 2097 0
7930 2086 0
7930 2086 2094 0
7930 2086 2095 0
7930 2086 2097 0
c (((aux487 + aux490 + aux491)<=1)=tv=SATLiteral(7931))
-7931 2124 0
-7931 2118 2123 0
-7931 2119 0
-7931 2121 0
-7931 2109 2123 0
-7931 2109 2118 0
-7931 2109 2119 0
-7931 2109 2121 0
-7931 2110 0
-7931 2110 2118 0
-7931 2110 2119 0
-7931 2110 2121 0
7931 -2110 -2118 -2123 0
7931 -2109 -2119 -2123 0
7931 -2109 -2118 -2124 0
c ((1<=(aux487 + aux490 + aux491))=tv=SATLiteral(7932))
-7932 -2109 -2118 -2123 0
7932 2123 0
7932 2118 0
7932 2119 0
7932 2121 0
7932 2109 0
7932 2109 2118 0
7932 2109 2119 0
7932 2109 2121 0
7932 2110 0
7932 2110 2118 0
7932 2110 2119 0
7932 2110 2121 0
c (((aux493 + aux496 + aux497)<=1)=tv=SATLiteral(7933))
-7933 2148 0
-7933 2142 2147 0
-7933 2143 0
-7933 2145 0
-7933 2133 2147 0
-7933 2133 2142 0
-7933 2133 2143 0
-7933 2133 2145 0
-7933 2134 0
-7933 2134 2142 0
-7933 2134 2143 0
-7933 2134 2145 0
7933 -2134 -2142 -2147 0
7933 -2133 -2143 -2147 0
7933 -2133 -2142 -2148 0
c ((1<=(aux493 + aux496 + aux497))=tv=SATLiteral(7934))
-7934 -2133 -2142 -2147 0
7934 2147 0
7934 2142 0
7934 2143 0
7934 2145 0
7934 2133 0
7934 2133 2142 0
7934 2133 2143 0
7934 2133 2145 0
7934 2134 0
7934 2134 2142 0
7934 2134 2143 0
7934 2134 2145 0
c (((aux499 + aux502 + aux503)<=1)=tv=SATLiteral(7935))
-7935 2172 0
-7935 2166 2171 0
-7935 2167 0
-7935 2169 0
-7935 2157 2171 0
-7935 2157 2166 0
-7935 2157 2167 0
-7935 2157 2169 0
-7935 2158 0
-7935 2158 2166 0
-7935 2158 2167 0
-7935 2158 2169 0
7935 -2158 -2166 -2171 0
7935 -2157 -2167 -2171 0
7935 -2157 -2166 -2172 0
c ((1<=(aux499 + aux502 + aux503))=tv=SATLiteral(7936))
-7936 -2157 -2166 -2171 0
7936 2171 0
7936 2166 0
7936 2167 0
7936 2169 0
7936 2157 0
7936 2157 2166 0
7936 2157 2167 0
7936 2157 2169 0
7936 2158 0
7936 2158 2166 0
7936 2158 2167 0
7936 2158 2169 0
c (((aux505 + aux508 + aux509)<=1)=tv=SATLiteral(7937))
-7937 2196 0
-7937 2190 2195 0
-7937 2191 0
-7937 2193 0
-7937 2181 2195 0
-7937 2181 2190 0
-7937 2181 2191 0
-7937 2181 2193 0
-7937 2182 0
-7937 2182 2190 0
-7937 2182 2191 0
-7937 2182 2193 0
7937 -2182 -2190 -2195 0
7937 -2181 -2191 -2195 0
7937 -2181 -2190 -2196 0
c ((1<=(aux505 + aux508 + aux509))=tv=SATLiteral(7938))
-7938 -2181 -2190 -2195 0
7938 2195 0
7938 2190 0
7938 2191 0
7938 2193 0
7938 2181 0
7938 2181 2190 0
7938 2181 2191 0
7938 2181 2193 0
7938 2182 0
7938 2182 2190 0
7938 2182 2191 0
7938 2182 2193 0
c (((aux511 + aux514 + aux515)<=1)=tv=SATLiteral(7939))
-7939 2220 0
-7939 2214 2219 0
-7939 2215 0
-7939 2217 0
-7939 2205 2219 0
-7939 2205 2214 0
-7939 2205 2215 0
-7939 2205 2217 0
-7939 2206 0
-7939 2206 2214 0
-7939 2206 2215 0
-7939 2206 2217 0
7939 -2206 -2214 -2219 0
7939 -2205 -2215 -2219 0
7939 -2205 -2214 -2220 0
c ((1<=(aux511 + aux514 + aux515))=tv=SATLiteral(7940))
-7940 -2205 -2214 -2219 0
7940 2219 0
7940 2214 0
7940 2215 0
7940 2217 0
7940 2205 0
7940 2205 2214 0
7940 2205 2215 0
7940 2205 2217 0
7940 2206 0
7940 2206 2214 0
7940 2206 2215 0
7940 2206 2217 0
c (((aux517 + aux520 + aux521)<=1)=tv=SATLiteral(7941))
-7941 2244 0
-7941 2238 2243 0
-7941 2239 0
-7941 2241 0
-7941 2229 2243 0
-7941 2229 2238 0
-7941 2229 2239 0
-7941 2229 2241 0
-7941 2230 0
-7941 2230 2238 0
-7941 2230 2239 0
-7941 2230 2241 0
7941 -2230 -2238 -2243 0
7941 -2229 -2239 -2243 0
7941 -2229 -2238 -2244 0
c ((1<=(aux517 + aux520 + aux521))=tv=SATLiteral(7942))
-7942 -2229 -2238 -2243 0
7942 2243 0
7942 2238 0
7942 2239 0
7942 2241 0
7942 2229 0
7942 2229 2238 0
7942 2229 2239 0
7942 2229 2241 0
7942 2230 0
7942 2230 2238 0
7942 2230 2239 0
7942 2230 2241 0
c (((aux523 + aux526 + aux527)<=1)=tv=SATLiteral(7943))
-7943 2268 0
-7943 2262 2267 0
-7943 2263 0
-7943 2265 0
-7943 2253 2267 0
-7943 2253 2262 0
-7943 2253 2263 0
-7943 2253 2265 0
-7943 2254 0
-7943 2254 2262 0
-7943 2254 2263 0
-7943 2254 2265 0
7943 -2254 -2262 -2267 0
7943 -2253 -2263 -2267 0
7943 -2253 -2262 -2268 0
c ((1<=(aux523 + aux526 + aux527))=tv=SATLiteral(7944))
-7944 -2253 -2262 -2267 0
7944 2267 0
7944 2262 0
7944 2263 0
7944 2265 0
7944 2253 0
7944 2253 2262 0
7944 2253 2263 0
7944 2253 2265 0
7944 2254 0
7944 2254 2262 0
7944 2254 2263 0
7944 2254 2265 0
c (((aux529 + aux532 + aux533)<=1)=tv=SATLiteral(7945))
-7945 2292 0
-7945 2286 2291 0
-7945 2287 0
-7945 2289 0
-7945 2277 2291 0
-7945 2277 2286 0
-7945 2277 2287 0
-7945 2277 2289 0
-7945 2278 0
-7945 2278 2286 0
-7945 2278 2287 0
-7945 2278 2289 0
7945 -2278 -2286 -2291 0
7945 -2277 -2287 -2291 0
7945 -2277 -2286 -2292 0
c ((1<=(aux529 + aux532 + aux533))=tv=SATLiteral(7946))
-7946 -2277 -2286 -2291 0
7946 2291 0
7946 2286 0
7946 2287 0
7946 2289 0
7946 2277 0
7946 2277 2286 0
7946 2277 2287 0
7946 2277 2289 0
7946 2278 0
7946 2278 2286 0
7946 2278 2287 0
7946 2278 2289 0
c (((aux535 + aux538 + aux539)<=1)=tv=SATLiteral(7947))
-7947 2316 0
-7947 2310 2315 0
-7947 2311 0
-7947 2313 0
-7947 2301 2315 0
-7947 2301 2310 0
-7947 2301 2311 0
-7947 2301 2313 0
-7947 2302 0
-7947 2302 2310 0
-7947 2302 2311 0
-7947 2302 2313 0
7947 -2302 -2310 -2315 0
7947 -2301 -2311 -2315 0
7947 -2301 -2310 -2316 0
c ((1<=(aux535 + aux538 + aux539))=tv=SATLiteral(7948))
-7948 -2301 -2310 -2315 0
7948 2315 0
7948 2310 0
7948 2311 0
7948 2313 0
7948 2301 0
7948 2301 2310 0
7948 2301 2311 0
7948 2301 2313 0
7948 2302 0
7948 2302 2310 0
7948 2302 2311 0
7948 2302 2313 0
c (((aux541 + aux544 + aux545)<=1)=tv=SATLiteral(7949))
-7949 2340 0
-7949 2334 2339 0
-7949 2335 0
-7949 2337 0
-7949 2325 2339 0
-7949 2325 2334 0
-7949 2325 2335 0
-7949 2325 2337 0
-7949 2326 0
-7949 2326 2334 0
-7949 2326 2335 0
-7949 2326 2337 0
7949 -2326 -2334 -2339 0
7949 -2325 -2335 -2339 0
7949 -2325 -2334 -2340 0
c ((1<=(aux541 + aux544 + aux545))=tv=SATLiteral(7950))
-7950 -2325 -2334 -2339 0
7950 2339 0
7950 2334 0
7950 2335 0
7950 2337 0
7950 2325 0
7950 2325 2334 0
7950 2325 2335 0
7950 2325 2337 0
7950 2326 0
7950 2326 2334 0
7950 2326 2335 0
7950 2326 2337 0
c (((aux547 + aux550 + aux551)<=1)=tv=SATLiteral(7951))
-7951 2364 0
-7951 2358 2363 0
-7951 2359 0
-7951 2361 0
-7951 2349 2363 0
-7951 2349 2358 0
-7951 2349 2359 0
-7951 2349 2361 0
-7951 2350 0
-7951 2350 2358 0
-7951 2350 2359 0
-7951 2350 2361 0
7951 -2350 -2358 -2363 0
7951 -2349 -2359 -2363 0
7951 -2349 -2358 -2364 0
c ((1<=(aux547 + aux550 + aux551))=tv=SATLiteral(7952))
-7952 -2349 -2358 -2363 0
7952 2363 0
7952 2358 0
7952 2359 0
7952 2361 0
7952 2349 0
7952 2349 2358 0
7952 2349 2359 0
7952 2349 2361 0
7952 2350 0
7952 2350 2358 0
7952 2350 2359 0
7952 2350 2361 0
c (((aux553 + aux556 + aux557)<=1)=tv=SATLiteral(7953))
-7953 2388 0
-7953 2382 2387 0
-7953 2383 0
-7953 2385 0
-7953 2373 2387 0
-7953 2373 2382 0
-7953 2373 2383 0
-7953 2373 2385 0
-7953 2374 0
-7953 2374 2382 0
-7953 2374 2383 0
-7953 2374 2385 0
7953 -2374 -2382 -2387 0
7953 -2373 -2383 -2387 0
7953 -2373 -2382 -2388 0
c ((1<=(aux553 + aux556 + aux557))=tv=SATLiteral(7954))
-7954 -2373 -2382 -2387 0
7954 2387 0
7954 2382 0
7954 2383 0
7954 2385 0
7954 2373 0
7954 2373 2382 0
7954 2373 2383 0
7954 2373 2385 0
7954 2374 0
7954 2374 2382 0
7954 2374 2383 0
7954 2374 2385 0
c (((aux559 + aux562 + aux563)<=1)=tv=SATLiteral(7955))
-7955 2412 0
-7955 2406 2411 0
-7955 2407 0
-7955 2409 0
-7955 2397 2411 0
-7955 2397 2406 0
-7955 2397 2407 0
-7955 2397 2409 0
-7955 2398 0
-7955 2398 2406 0
-7955 2398 2407 0
-7955 2398 2409 0
7955 -2398 -2406 -2411 0
7955 -2397 -2407 -2411 0
7955 -2397 -2406 -2412 0
c ((1<=(aux559 + aux562 + aux563))=tv=SATLiteral(7956))
-7956 -2397 -2406 -2411 0
7956 2411 0
7956 2406 0
7956 2407 0
7956 2409 0
7956 2397 0
7956 2397 2406 0
7956 2397 2407 0
7956 2397 2409 0
7956 2398 0
7956 2398 2406 0
7956 2398 2407 0
7956 2398 2409 0
c (((aux565 + aux568 + aux569)<=1)=tv=SATLiteral(7957))
-7957 2436 0
-7957 2430 2435 0
-7957 2431 0
-7957 2433 0
-7957 2421 2435 0
-7957 2421 2430 0
-7957 2421 2431 0
-7957 2421 2433 0
-7957 2422 0
-7957 2422 2430 0
-7957 2422 2431 0
-7957 2422 2433 0
7957 -2422 -2430 -2435 0
7957 -2421 -2431 -2435 0
7957 -2421 -2430 -2436 0
c ((1<=(aux565 + aux568 + aux569))=tv=SATLiteral(7958))
-7958 -2421 -2430 -2435 0
7958 2435 0
7958 2430 0
7958 2431 0
7958 2433 0
7958 2421 0
7958 2421 2430 0
7958 2421 2431 0
7958 2421 2433 0
7958 2422 0
7958 2422 2430 0
7958 2422 2431 0
7958 2422 2433 0
c (((aux571 + aux574 + aux575)<=1)=tv=SATLiteral(7959))
-7959 2460 0
-7959 2454 2459 0
-7959 2455 0
-7959 2457 0
-7959 2445 2459 0
-7959 2445 2454 0
-7959 2445 2455 0
-7959 2445 2457 0
-7959 2446 0
-7959 2446 2454 0
-7959 2446 2455 0
-7959 2446 2457 0
7959 -2446 -2454 -2459 0
7959 -2445 -2455 -2459 0
7959 -2445 -2454 -2460 0
c ((1<=(aux571 + aux574 + aux575))=tv=SATLiteral(7960))
-7960 -2445 -2454 -2459 0
7960 2459 0
7960 2454 0
7960 2455 0
7960 2457 0
7960 2445 0
7960 2445 2454 0
7960 2445 2455 0
7960 2445 2457 0
7960 2446 0
7960 2446 2454 0
7960 2446 2455 0
7960 2446 2457 0
c (((aux577 + aux580 + aux581)<=1)=tv=SATLiteral(7961))
-7961 2484 0
-7961 2478 2483 0
-7961 2479 0
-7961 2481 0
-7961 2469 2483 0
-7961 2469 2478 0
-7961 2469 2479 0
-7961 2469 2481 0
-7961 2470 0
-7961 2470 2478 0
-7961 2470 2479 0
-7961 2470 2481 0
7961 -2470 -2478 -2483 0
7961 -2469 -2479 -2483 0
7961 -2469 -2478 -2484 0
c ((1<=(aux577 + aux580 + aux581))=tv=SATLiteral(7962))
-7962 -2469 -2478 -2483 0
7962 2483 0
7962 2478 0
7962 2479 0
7962 2481 0
7962 2469 0
7962 2469 2478 0
7962 2469 2479 0
7962 2469 2481 0
7962 2470 0
7962 2470 2478 0
7962 2470 2479 0
7962 2470 2481 0
c (((aux583 + aux586 + aux587)<=1)=tv=SATLiteral(7963))
-7963 2508 0
-7963 2502 2507 0
-7963 2503 0
-7963 2505 0
-7963 2493 2507 0
-7963 2493 2502 0
-7963 2493 2503 0
-7963 2493 2505 0
-7963 2494 0
-7963 2494 2502 0
-7963 2494 2503 0
-7963 2494 2505 0
7963 -2494 -2502 -2507 0
7963 -2493 -2503 -2507 0
7963 -2493 -2502 -2508 0
c ((1<=(aux583 + aux586 + aux587))=tv=SATLiteral(7964))
-7964 -2493 -2502 -2507 0
7964 2507 0
7964 2502 0
7964 2503 0
7964 2505 0
7964 2493 0
7964 2493 2502 0
7964 2493 2503 0
7964 2493 2505 0
7964 2494 0
7964 2494 2502 0
7964 2494 2503 0
7964 2494 2505 0
c (((aux589 + aux592 + aux593)<=1)=tv=SATLiteral(7965))
-7965 2532 0
-7965 2526 2531 0
-7965 2527 0
-7965 2529 0
-7965 2517 2531 0
-7965 2517 2526 0
-7965 2517 2527 0
-7965 2517 2529 0
-7965 2518 0
-7965 2518 2526 0
-7965 2518 2527 0
-7965 2518 2529 0
7965 -2518 -2526 -2531 0
7965 -2517 -2527 -2531 0
7965 -2517 -2526 -2532 0
c ((1<=(aux589 + aux592 + aux593))=tv=SATLiteral(7966))
-7966 -2517 -2526 -2531 0
7966 2531 0
7966 2526 0
7966 2527 0
7966 2529 0
7966 2517 0
7966 2517 2526 0
7966 2517 2527 0
7966 2517 2529 0
7966 2518 0
7966 2518 2526 0
7966 2518 2527 0
7966 2518 2529 0
c (((aux595 + aux598 + aux599)<=1)=tv=SATLiteral(7967))
-7967 2556 0
-7967 2550 2555 0
-7967 2551 0
-7967 2553 0
-7967 2541 2555 0
-7967 2541 2550 0
-7967 2541 2551 0
-7967 2541 2553 0
-7967 2542 0
-7967 2542 2550 0
-7967 2542 2551 0
-7967 2542 2553 0
7967 -2542 -2550 -2555 0
7967 -2541 -2551 -2555 0
7967 -2541 -2550 -2556 0
c ((1<=(aux595 + aux598 + aux599))=tv=SATLiteral(7968))
-7968 -2541 -2550 -2555 0
7968 2555 0
7968 2550 0
7968 2551 0
7968 2553 0
7968 2541 0
7968 2541 2550 0
7968 2541 2551 0
7968 2541 2553 0
7968 2542 0
7968 2542 2550 0
7968 2542 2551 0
7968 2542 2553 0
c (((aux601 + aux604 + aux605)<=1)=tv=SATLiteral(7969))
-7969 2580 0
-7969 2574 2579 0
-7969 2575 0
-7969 2577 0
-7969 2565 2579 0
-7969 2565 2574 0
-7969 2565 2575 0
-7969 2565 2577 0
-7969 2566 0
-7969 2566 2574 0
-7969 2566 2575 0
-7969 2566 2577 0
7969 -2566 -2574 -2579 0
7969 -2565 -2575 -2579 0
7969 -2565 -2574 -2580 0
c ((1<=(aux601 + aux604 + aux605))=tv=SATLiteral(7970))
-7970 -2565 -2574 -2579 0
7970 2579 0
7970 2574 0
7970 2575 0
7970 2577 0
7970 2565 0
7970 2565 2574 0
7970 2565 2575 0
7970 2565 2577 0
7970 2566 0
7970 2566 2574 0
7970 2566 2575 0
7970 2566 2577 0
c (((aux607 + aux610 + aux611)<=1)=tv=SATLiteral(7971))
-7971 2604 0
-7971 2598 2603 0
-7971 2599 0
-7971 2601 0
-7971 2589 2603 0
-7971 2589 2598 0
-7971 2589 2599 0
-7971 2589 2601 0
-7971 2590 0
-7971 2590 2598 0
-7971 2590 2599 0
-7971 2590 2601 0
7971 -2590 -2598 -2603 0
7971 -2589 -2599 -2603 0
7971 -2589 -2598 -2604 0
c ((1<=(aux607 + aux610 + aux611))=tv=SATLiteral(7972))
-7972 -2589 -2598 -2603 0
7972 2603 0
7972 2598 0
7972 2599 0
7972 2601 0
7972 2589 0
7972 2589 2598 0
7972 2589 2599 0
7972 2589 2601 0
7972 2590 0
7972 2590 2598 0
7972 2590 2599 0
7972 2590 2601 0
c (((aux613 + aux616 + aux617)<=1)=tv=SATLiteral(7973))
-7973 2628 0
-7973 2622 2627 0
-7973 2623 0
-7973 2625 0
-7973 2613 2627 0
-7973 2613 2622 0
-7973 2613 2623 0
-7973 2613 2625 0
-7973 2614 0
-7973 2614 2622 0
-7973 2614 2623 0
-7973 2614 2625 0
7973 -2614 -2622 -2627 0
7973 -2613 -2623 -2627 0
7973 -2613 -2622 -2628 0
c ((1<=(aux613 + aux616 + aux617))=tv=SATLiteral(7974))
-7974 -2613 -2622 -2627 0
7974 2627 0
7974 2622 0
7974 2623 0
7974 2625 0
7974 2613 0
7974 2613 2622 0
7974 2613 2623 0
7974 2613 2625 0
7974 2614 0
7974 2614 2622 0
7974 2614 2623 0
7974 2614 2625 0
c (((aux619 + aux622 + aux623)<=1)=tv=SATLiteral(7975))
-7975 2652 0
-7975 2646 2651 0
-7975 2647 0
-7975 2649 0
-7975 2637 2651 0
-7975 2637 2646 0
-7975 2637 2647 0
-7975 2637 2649 0
-7975 2638 0
-7975 2638 2646 0
-7975 2638 2647 0
-7975 2638 2649 0
7975 -2638 -2646 -2651 0
7975 -2637 -2647 -2651 0
7975 -2637 -2646 -2652 0
c ((1<=(aux619 + aux622 + aux623))=tv=SATLiteral(7976))
-7976 -2637 -2646 -2651 0
7976 2651 0
7976 2646 0
7976 2647 0
7976 2649 0
7976 2637 0
7976 2637 2646 0
7976 2637 2647 0
7976 2637 2649 0
7976 2638 0
7976 2638 2646 0
7976 2638 2647 0
7976 2638 2649 0
c (((aux625 + aux628 + aux629)<=1)=tv=SATLiteral(7977))
-7977 2676 0
-7977 2670 2675 0
-7977 2671 0
-7977 2673 0
-7977 2661 2675 0
-7977 2661 2670 0
-7977 2661 2671 0
-7977 2661 2673 0
-7977 2662 0
-7977 2662 2670 0
-7977 2662 2671 0
-7977 2662 2673 0
7977 -2662 -2670 -2675 0
7977 -2661 -2671 -2675 0
7977 -2661 -2670 -2676 0
c ((1<=(aux625 + aux628 + aux629))=tv=SATLiteral(7978))
-7978 -2661 -2670 -2675 0
7978 2675 0
7978 2670 0
7978 2671 0
7978 2673 0
7978 2661 0
7978 2661 2670 0
7978 2661 2671 0
7978 2661 2673 0
7978 2662 0
7978 2662 2670 0
7978 2662 2671 0
7978 2662 2673 0
c (((aux631 + aux634 + aux635)<=1)=tv=SATLiteral(7979))
-7979 2700 0
-7979 2694 2699 0
-7979 2695 0
-7979 2697 0
-7979 2685 2699 0
-7979 2685 2694 0
-7979 2685 2695 0
-7979 2685 2697 0
-7979 2686 0
-7979 2686 2694 0
-7979 2686 2695 0
-7979 2686 2697 0
7979 -2686 -2694 -2699 0
7979 -2685 -2695 -2699 0
7979 -2685 -2694 -2700 0
c ((1<=(aux631 + aux634 + aux635))=tv=SATLiteral(7980))
-7980 -2685 -2694 -2699 0
7980 2699 0
7980 2694 0
7980 2695 0
7980 2697 0
7980 2685 0
7980 2685 2694 0
7980 2685 2695 0
7980 2685 2697 0
7980 2686 0
7980 2686 2694 0
7980 2686 2695 0
7980 2686 2697 0
c (((aux637 + aux640 + aux641)<=1)=tv=SATLiteral(7981))
-7981 2724 0
-7981 2718 2723 0
-7981 2719 0
-7981 2721 0
-7981 2709 2723 0
-7981 2709 2718 0
-7981 2709 2719 0
-7981 2709 2721 0
-7981 2710 0
-7981 2710 2718 0
-7981 2710 2719 0
-7981 2710 2721 0
7981 -2710 -2718 -2723 0
7981 -2709 -2719 -2723 0
7981 -2709 -2718 -2724 0
c ((1<=(aux637 + aux640 + aux641))=tv=SATLiteral(7982))
-7982 -2709 -2718 -2723 0
7982 2723 0
7982 2718 0
7982 2719 0
7982 2721 0
7982 2709 0
7982 2709 2718 0
7982 2709 2719 0
7982 2709 2721 0
7982 2710 0
7982 2710 2718 0
7982 2710 2719 0
7982 2710 2721 0
c (((aux643 + aux646 + aux647)<=1)=tv=SATLiteral(7983))
-7983 2748 0
-7983 2742 2747 0
-7983 2743 0
-7983 2745 0
-7983 2733 2747 0
-7983 2733 2742 0
-7983 2733 2743 0
-7983 2733 2745 0
-7983 2734 0
-7983 2734 2742 0
-7983 2734 2743 0
-7983 2734 2745 0
7983 -2734 -2742 -2747 0
7983 -2733 -2743 -2747 0
7983 -2733 -2742 -2748 0
c ((1<=(aux643 + aux646 + aux647))=tv=SATLiteral(7984))
-7984 -2733 -2742 -2747 0
7984 2747 0
7984 2742 0
7984 2743 0
7984 2745 0
7984 2733 0
7984 2733 2742 0
7984 2733 2743 0
7984 2733 2745 0
7984 2734 0
7984 2734 2742 0
7984 2734 2743 0
7984 2734 2745 0
c (((aux649 + aux652 + aux653)<=1)=tv=SATLiteral(7985))
-7985 2772 0
-7985 2766 2771 0
-7985 2767 0
-7985 2769 0
-7985 2757 2771 0
-7985 2757 2766 0
-7985 2757 2767 0
-7985 2757 2769 0
-7985 2758 0
-7985 2758 2766 0
-7985 2758 2767 0
-7985 2758 2769 0
7985 -2758 -2766 -2771 0
7985 -2757 -2767 -2771 0
7985 -2757 -2766 -2772 0
c ((1<=(aux649 + aux652 + aux653))=tv=SATLiteral(7986))
-7986 -2757 -2766 -2771 0
7986 2771 0
7986 2766 0
7986 2767 0
7986 2769 0
7986 2757 0
7986 2757 2766 0
7986 2757 2767 0
7986 2757 2769 0
7986 2758 0
7986 2758 2766 0
7986 2758 2767 0
7986 2758 2769 0
c (((aux655 + aux658 + aux659)<=1)=tv=SATLiteral(7987))
-7987 2796 0
-7987 2790 2795 0
-7987 2791 0
-7987 2793 0
-7987 2781 2795 0
-7987 2781 2790 0
-7987 2781 2791 0
-7987 2781 2793 0
-7987 2782 0
-7987 2782 2790 0
-7987 2782 2791 0
-7987 2782 2793 0
7987 -2782 -2790 -2795 0
7987 -2781 -2791 -2795 0
7987 -2781 -2790 -2796 0
c ((1<=(aux655 + aux658 + aux659))=tv=SATLiteral(7988))
-7988 -2781 -2790 -2795 0
7988 2795 0
7988 2790 0
7988 2791 0
7988 2793 0
7988 2781 0
7988 2781 2790 0
7988 2781 2791 0
7988 2781 2793 0
7988 2782 0
7988 2782 2790 0
7988 2782 2791 0
7988 2782 2793 0
c (((aux661 + aux664 + aux665)<=1)=tv=SATLiteral(7989))
-7989 2820 0
-7989 2814 2819 0
-7989 2815 0
-7989 2817 0
-7989 2805 2819 0
-7989 2805 2814 0
-7989 2805 2815 0
-7989 2805 2817 0
-7989 2806 0
-7989 2806 2814 0
-7989 2806 2815 0
-7989 2806 2817 0
7989 -2806 -2814 -2819 0
7989 -2805 -2815 -2819 0
7989 -2805 -2814 -2820 0
c ((1<=(aux661 + aux664 + aux665))=tv=SATLiteral(7990))
-7990 -2805 -2814 -2819 0
7990 2819 0
7990 2814 0
7990 2815 0
7990 2817 0
7990 2805 0
7990 2805 2814 0
7990 2805 2815 0
7990 2805 2817 0
7990 2806 0
7990 2806 2814 0
7990 2806 2815 0
7990 2806 2817 0
c (((aux667 + aux670 + aux671)<=1)=tv=SATLiteral(7991))
-7991 2844 0
-7991 2838 2843 0
-7991 2839 0
-7991 2841 0
-7991 2829 2843 0
-7991 2829 2838 0
-7991 2829 2839 0
-7991 2829 2841 0
-7991 2830 0
-7991 2830 2838 0
-7991 2830 2839 0
-7991 2830 2841 0
7991 -2830 -2838 -2843 0
7991 -2829 -2839 -2843 0
7991 -2829 -2838 -2844 0
c ((1<=(aux667 + aux670 + aux671))=tv=SATLiteral(7992))
-7992 -2829 -2838 -2843 0
7992 2843 0
7992 2838 0
7992 2839 0
7992 2841 0
7992 2829 0
7992 2829 2838 0
7992 2829 2839 0
7992 2829 2841 0
7992 2830 0
7992 2830 2838 0
7992 2830 2839 0
7992 2830 2841 0
c (((aux673 + aux676 + aux677)<=1)=tv=SATLiteral(7993))
-7993 2868 0
-7993 2862 2867 0
-7993 2863 0
-7993 2865 0
-7993 2853 2867 0
-7993 2853 2862 0
-7993 2853 2863 0
-7993 2853 2865 0
-7993 2854 0
-7993 2854 2862 0
-7993 2854 2863 0
-7993 2854 2865 0
7993 -2854 -2862 -2867 0
7993 -2853 -2863 -2867 0
7993 -2853 -2862 -2868 0
c ((1<=(aux673 + aux676 + aux677))=tv=SATLiteral(7994))
-7994 -2853 -2862 -2867 0
7994 2867 0
7994 2862 0
7994 2863 0
7994 2865 0
7994 2853 0
7994 2853 2862 0
7994 2853 2863 0
7994 2853 2865 0
7994 2854 0
7994 2854 2862 0
7994 2854 2863 0
7994 2854 2865 0
c (((aux679 + aux682 + aux683)<=1)=tv=SATLiteral(7995))
-7995 2892 0
-7995 2886 2891 0
-7995 2887 0
-7995 2889 0
-7995 2877 2891 0
-7995 2877 2886 0
-7995 2877 2887 0
-7995 2877 2889 0
-7995 2878 0
-7995 2878 2886 0
-7995 2878 2887 0
-7995 2878 2889 0
7995 -2878 -2886 -2891 0
7995 -2877 -2887 -2891 0
7995 -2877 -2886 -2892 0
c ((1<=(aux679 + aux682 + aux683))=tv=SATLiteral(7996))
-7996 -2877 -2886 -2891 0
7996 2891 0
7996 2886 0
7996 2887 0
7996 2889 0
7996 2877 0
7996 2877 2886 0
7996 2877 2887 0
7996 2877 2889 0
7996 2878 0
7996 2878 2886 0
7996 2878 2887 0
7996 2878 2889 0
c (((aux685 + aux688 + aux689)<=1)=tv=SATLiteral(7997))
-7997 2916 0
-7997 2910 2915 0
-7997 2911 0
-7997 2913 0
-7997 2901 2915 0
-7997 2901 2910 0
-7997 2901 2911 0
-7997 2901 2913 0
-7997 2902 0
-7997 2902 2910 0
-7997 2902 2911 0
-7997 2902 2913 0
7997 -2902 -2910 -2915 0
7997 -2901 -2911 -2915 0
7997 -2901 -2910 -2916 0
c ((1<=(aux685 + aux688 + aux689))=tv=SATLiteral(7998))
-7998 -2901 -2910 -2915 0
7998 2915 0
7998 2910 0
7998 2911 0
7998 2913 0
7998 2901 0
7998 2901 2910 0
7998 2901 2911 0
7998 2901 2913 0
7998 2902 0
7998 2902 2910 0
7998 2902 2911 0
7998 2902 2913 0
c (((aux691 + aux694 + aux695)<=1)=tv=SATLiteral(7999))
-7999 2940 0
-7999 2934 2939 0
-7999 2935 0
-7999 2937 0
-7999 2925 2939 0
-7999 2925 2934 0
-7999 2925 2935 0
-7999 2925 2937 0
-7999 2926 0
-7999 2926 2934 0
-7999 2926 2935 0
-7999 2926 2937 0
7999 -2926 -2934 -2939 0
7999 -2925 -2935 -2939 0
7999 -2925 -2934 -2940 0
c ((1<=(aux691 + aux694 + aux695))=tv=SATLiteral(8000))
-8000 -2925 -2934 -2939 0
8000 2939 0
8000 2934 0
8000 2935 0
8000 2937 0
8000 2925 0
8000 2925 2934 0
8000 2925 2935 0
8000 2925 2937 0
8000 2926 0
8000 2926 2934 0
8000 2926 2935 0
8000 2926 2937 0
c (((aux697 + aux700 + aux701)<=1)=tv=SATLiteral(8001))
-8001 2964 0
-8001 2958 2963 0
-8001 2959 0
-8001 2961 0
-8001 2949 2963 0
-8001 2949 2958 0
-8001 2949 2959 0
-8001 2949 2961 0
-8001 2950 0
-8001 2950 2958 0
-8001 2950 2959 0
-8001 2950 2961 0
8001 -2950 -2958 -2963 0
8001 -2949 -2959 -2963 0
8001 -2949 -2958 -2964 0
c ((1<=(aux697 + aux700 + aux701))=tv=SATLiteral(8002))
-8002 -2949 -2958 -2963 0
8002 2963 0
8002 2958 0
8002 2959 0
8002 2961 0
8002 2949 0
8002 2949 2958 0
8002 2949 2959 0
8002 2949 2961 0
8002 2950 0
8002 2950 2958 0
8002 2950 2959 0
8002 2950 2961 0
c (((aux703 + aux706 + aux707)<=1)=tv=SATLiteral(8003))
-8003 2988 0
-8003 2982 2987 0
-8003 2983 0
-8003 2985 0
-8003 2973 2987 0
-8003 2973 2982 0
-8003 2973 2983 0
-8003 2973 2985 0
-8003 2974 0
-8003 2974 2982 0
-8003 2974 2983 0
-8003 2974 2985 0
8003 -2974 -2982 -2987 0
8003 -2973 -2983 -2987 0
8003 -2973 -2982 -2988 0
c ((1<=(aux703 + aux706 + aux707))=tv=SATLiteral(8004))
-8004 -2973 -2982 -2987 0
8004 2987 0
8004 2982 0
8004 2983 0
8004 2985 0
8004 2973 0
8004 2973 2982 0
8004 2973 2983 0
8004 2973 2985 0
8004 2974 0
8004 2974 2982 0
8004 2974 2983 0
8004 2974 2985 0
c (((aux709 + aux712 + aux713)<=1)=tv=SATLiteral(8005))
-8005 3012 0
-8005 3006 3011 0
-8005 3007 0
-8005 3009 0
-8005 2997 3011 0
-8005 2997 3006 0
-8005 2997 3007 0
-8005 2997 3009 0
-8005 2998 0
-8005 2998 3006 0
-8005 2998 3007 0
-8005 2998 3009 0
8005 -2998 -3006 -3011 0
8005 -2997 -3007 -3011 0
8005 -2997 -3006 -3012 0
c ((1<=(aux709 + aux712 + aux713))=tv=SATLiteral(8006))
-8006 -2997 -3006 -3011 0
8006 3011 0
8006 3006 0
8006 3007 0
8006 3009 0
8006 2997 0
8006 2997 3006 0
8006 2997 3007 0
8006 2997 3009 0
8006 2998 0
8006 2998 3006 0
8006 2998 3007 0
8006 2998 3009 0
c (((aux715 + aux718 + aux719)<=1)=tv=SATLiteral(8007))
-8007 3036 0
-8007 3030 3035 0
-8007 3031 0
-8007 3033 0
-8007 3021 3035 0
-8007 3021 3030 0
-8007 3021 3031 0
-8007 3021 3033 0
-8007 3022 0
-8007 3022 3030 0
-8007 3022 3031 0
-8007 3022 3033 0
8007 -3022 -3030 -3035 0
8007 -3021 -3031 -3035 0
8007 -3021 -3030 -3036 0
c ((1<=(aux715 + aux718 + aux719))=tv=SATLiteral(8008))
-8008 -3021 -3030 -3035 0
8008 3035 0
8008 3030 0
8008 3031 0
8008 3033 0
8008 3021 0
8008 3021 3030 0
8008 3021 3031 0
8008 3021 3033 0
8008 3022 0
8008 3022 3030 0
8008 3022 3031 0
8008 3022 3033 0
c (((aux721 + aux724 + aux725)<=1)=tv=SATLiteral(8009))
-8009 3060 0
-8009 3054 3059 0
-8009 3055 0
-8009 3057 0
-8009 3045 3059 0
-8009 3045 3054 0
-8009 3045 3055 0
-8009 3045 3057 0
-8009 3046 0
-8009 3046 3054 0
-8009 3046 3055 0
-8009 3046 3057 0
8009 -3046 -3054 -3059 0
8009 -3045 -3055 -3059 0
8009 -3045 -3054 -3060 0
c ((1<=(aux721 + aux724 + aux725))=tv=SATLiteral(8010))
-8010 -3045 -3054 -3059 0
8010 3059 0
8010 3054 0
8010 3055 0
8010 3057 0
8010 3045 0
8010 3045 3054 0
8010 3045 3055 0
8010 3045 3057 0
8010 3046 0
8010 3046 3054 0
8010 3046 3055 0
8010 3046 3057 0
c (((aux727 + aux730 + aux731)<=1)=tv=SATLiteral(8011))
-8011 3084 0
-8011 3078 3083 0
-8011 3079 0
-8011 3081 0
-8011 3069 3083 0
-8011 3069 3078 0
-8011 3069 3079 0
-8011 3069 3081 0
-8011 3070 0
-8011 3070 3078 0
-8011 3070 3079 0
-8011 3070 3081 0
8011 -3070 -3078 -3083 0
8011 -3069 -3079 -3083 0
8011 -3069 -3078 -3084 0
c ((1<=(aux727 + aux730 + aux731))=tv=SATLiteral(8012))
-8012 -3069 -3078 -3083 0
8012 3083 0
8012 3078 0
8012 3079 0
8012 3081 0
8012 3069 0
8012 3069 3078 0
8012 3069 3079 0
8012 3069 3081 0
8012 3070 0
8012 3070 3078 0
8012 3070 3079 0
8012 3070 3081 0
c (((aux733 + aux736 + aux737)<=1)=tv=SATLiteral(8013))
-8013 3108 0
-8013 3102 3107 0
-8013 3103 0
-8013 3105 0
-8013 3093 3107 0
-8013 3093 3102 0
-8013 3093 3103 0
-8013 3093 3105 0
-8013 3094 0
-8013 3094 3102 0
-8013 3094 3103 0
-8013 3094 3105 0
8013 -3094 -3102 -3107 0
8013 -3093 -3103 -3107 0
8013 -3093 -3102 -3108 0
c ((1<=(aux733 + aux736 + aux737))=tv=SATLiteral(8014))
-8014 -3093 -3102 -3107 0
8014 3107 0
8014 3102 0
8014 3103 0
8014 3105 0
8014 3093 0
8014 3093 3102 0
8014 3093 3103 0
8014 3093 3105 0
8014 3094 0
8014 3094 3102 0
8014 3094 3103 0
8014 3094 3105 0
c (((aux739 + aux742 + aux743)<=1)=tv=SATLiteral(8015))
-8015 3132 0
-8015 3126 3131 0
-8015 3127 0
-8015 3129 0
-8015 3117 3131 0
-8015 3117 3126 0
-8015 3117 3127 0
-8015 3117 3129 0
-8015 3118 0
-8015 3118 3126 0
-8015 3118 3127 0
-8015 3118 3129 0
8015 -3118 -3126 -3131 0
8015 -3117 -3127 -3131 0
8015 -3117 -3126 -3132 0
c ((1<=(aux739 + aux742 + aux743))=tv=SATLiteral(8016))
-8016 -3117 -3126 -3131 0
8016 3131 0
8016 3126 0
8016 3127 0
8016 3129 0
8016 3117 0
8016 3117 3126 0
8016 3117 3127 0
8016 3117 3129 0
8016 3118 0
8016 3118 3126 0
8016 3118 3127 0
8016 3118 3129 0
c (((aux745 + aux748 + aux749)<=1)=tv=SATLiteral(8017))
-8017 3156 0
-8017 3150 3155 0
-8017 3151 0
-8017 3153 0
-8017 3141 3155 0
-8017 3141 3150 0
-8017 3141 3151 0
-8017 3141 3153 0
-8017 3142 0
-8017 3142 3150 0
-8017 3142 3151 0
-8017 3142 3153 0
8017 -3142 -3150 -3155 0
8017 -3141 -3151 -3155 0
8017 -3141 -3150 -3156 0
c ((1<=(aux745 + aux748 + aux749))=tv=SATLiteral(8018))
-8018 -3141 -3150 -3155 0
8018 3155 0
8018 3150 0
8018 3151 0
8018 3153 0
8018 3141 0
8018 3141 3150 0
8018 3141 3151 0
8018 3141 3153 0
8018 3142 0
8018 3142 3150 0
8018 3142 3151 0
8018 3142 3153 0
c (((aux751 + aux754 + aux755)<=1)=tv=SATLiteral(8019))
-8019 3180 0
-8019 3174 3179 0
-8019 3175 0
-8019 3177 0
-8019 3165 3179 0
-8019 3165 3174 0
-8019 3165 3175 0
-8019 3165 3177 0
-8019 3166 0
-8019 3166 3174 0
-8019 3166 3175 0
-8019 3166 3177 0
8019 -3166 -3174 -3179 0
8019 -3165 -3175 -3179 0
8019 -3165 -3174 -3180 0
c ((1<=(aux751 + aux754 + aux755))=tv=SATLiteral(8020))
-8020 -3165 -3174 -3179 0
8020 3179 0
8020 3174 0
8020 3175 0
8020 3177 0
8020 3165 0
8020 3165 3174 0
8020 3165 3175 0
8020 3165 3177 0
8020 3166 0
8020 3166 3174 0
8020 3166 3175 0
8020 3166 3177 0
c (((aux757 + aux760 + aux761)<=1)=tv=SATLiteral(8021))
-8021 3204 0
-8021 3198 3203 0
-8021 3199 0
-8021 3201 0
-8021 3189 3203 0
-8021 3189 3198 0
-8021 3189 3199 0
-8021 3189 3201 0
-8021 3190 0
-8021 3190 3198 0
-8021 3190 3199 0
-8021 3190 3201 0
8021 -3190 -3198 -3203 0
8021 -3189 -3199 -3203 0
8021 -3189 -3198 -3204 0
c ((1<=(aux757 + aux760 + aux761))=tv=SATLiteral(8022))
-8022 -3189 -3198 -3203 0
8022 3203 0
8022 3198 0
8022 3199 0
8022 3201 0
8022 3189 0
8022 3189 3198 0
8022 3189 3199 0
8022 3189 3201 0
8022 3190 0
8022 3190 3198 0
8022 3190 3199 0
8022 3190 3201 0
c (((aux763 + aux766 + aux767)<=1)=tv=SATLiteral(8023))
-8023 3228 0
-8023 3222 3227 0
-8023 3223 0
-8023 3225 0
-8023 3213 3227 0
-8023 3213 3222 0
-8023 3213 3223 0
-8023 3213 3225 0
-8023 3214 0
-8023 3214 3222 0
-8023 3214 3223 0
-8023 3214 3225 0
8023 -3214 -3222 -3227 0
8023 -3213 -3223 -3227 0
8023 -3213 -3222 -3228 0
c ((1<=(aux763 + aux766 + aux767))=tv=SATLiteral(8024))
-8024 -3213 -3222 -3227 0
8024 3227 0
8024 3222 0
8024 3223 0
8024 3225 0
8024 3213 0
8024 3213 3222 0
8024 3213 3223 0
8024 3213 3225 0
8024 3214 0
8024 3214 3222 0
8024 3214 3223 0
8024 3214 3225 0
c (((aux769 + aux772 + aux773)<=1)=tv=SATLiteral(8025))
-8025 3252 0
-8025 3246 3251 0
-8025 3247 0
-8025 3249 0
-8025 3237 3251 0
-8025 3237 3246 0
-8025 3237 3247 0
-8025 3237 3249 0
-8025 3238 0
-8025 3238 3246 0
-8025 3238 3247 0
-8025 3238 3249 0
8025 -3238 -3246 -3251 0
8025 -3237 -3247 -3251 0
8025 -3237 -3246 -3252 0
c ((1<=(aux769 + aux772 + aux773))=tv=SATLiteral(8026))
-8026 -3237 -3246 -3251 0
8026 3251 0
8026 3246 0
8026 3247 0
8026 3249 0
8026 3237 0
8026 3237 3246 0
8026 3237 3247 0
8026 3237 3249 0
8026 3238 0
8026 3238 3246 0
8026 3238 3247 0
8026 3238 3249 0
c (((aux775 + aux778 + aux779)<=1)=tv=SATLiteral(8027))
-8027 3276 0
-8027 3270 3275 0
-8027 3271 0
-8027 3273 0
-8027 3261 3275 0
-8027 3261 3270 0
-8027 3261 3271 0
-8027 3261 3273 0
-8027 3262 0
-8027 3262 3270 0
-8027 3262 3271 0
-8027 3262 3273 0
8027 -3262 -3270 -3275 0
8027 -3261 -3271 -3275 0
8027 -3261 -3270 -3276 0
c ((1<=(aux775 + aux778 + aux779))=tv=SATLiteral(8028))
-8028 -3261 -3270 -3275 0
8028 3275 0
8028 3270 0
8028 3271 0
8028 3273 0
8028 3261 0
8028 3261 3270 0
8028 3261 3271 0
8028 3261 3273 0
8028 3262 0
8028 3262 3270 0
8028 3262 3271 0
8028 3262 3273 0
c (((aux781 + aux784 + aux785)<=1)=tv=SATLiteral(8029))
-8029 3300 0
-8029 3294 3299 0
-8029 3295 0
-8029 3297 0
-8029 3285 3299 0
-8029 3285 3294 0
-8029 3285 3295 0
-8029 3285 3297 0
-8029 3286 0
-8029 3286 3294 0
-8029 3286 3295 0
-8029 3286 3297 0
8029 -3286 -3294 -3299 0
8029 -3285 -3295 -3299 0
8029 -3285 -3294 -3300 0
c ((1<=(aux781 + aux784 + aux785))=tv=SATLiteral(8030))
-8030 -3285 -3294 -3299 0
8030 3299 0
8030 3294 0
8030 3295 0
8030 3297 0
8030 3285 0
8030 3285 3294 0
8030 3285 3295 0
8030 3285 3297 0
8030 3286 0
8030 3286 3294 0
8030 3286 3295 0
8030 3286 3297 0
c (((aux787 + aux790 + aux791)<=1)=tv=SATLiteral(8031))
-8031 3324 0
-8031 3318 3323 0
-8031 3319 0
-8031 3321 0
-8031 3309 3323 0
-8031 3309 3318 0
-8031 3309 3319 0
-8031 3309 3321 0
-8031 3310 0
-8031 3310 3318 0
-8031 3310 3319 0
-8031 3310 3321 0
8031 -3310 -3318 -3323 0
8031 -3309 -3319 -3323 0
8031 -3309 -3318 -3324 0
c ((1<=(aux787 + aux790 + aux791))=tv=SATLiteral(8032))
-8032 -3309 -3318 -3323 0
8032 3323 0
8032 3318 0
8032 3319 0
8032 3321 0
8032 3309 0
8032 3309 3318 0
8032 3309 3319 0
8032 3309 3321 0
8032 3310 0
8032 3310 3318 0
8032 3310 3319 0
8032 3310 3321 0
c (((aux793 + aux796 + aux797)<=1)=tv=SATLiteral(8033))
-8033 3348 0
-8033 3342 3347 0
-8033 3343 0
-8033 3345 0
-8033 3333 3347 0
-8033 3333 3342 0
-8033 3333 3343 0
-8033 3333 3345 0
-8033 3334 0
-8033 3334 3342 0
-8033 3334 3343 0
-8033 3334 3345 0
8033 -3334 -3342 -3347 0
8033 -3333 -3343 -3347 0
8033 -3333 -3342 -3348 0
c ((1<=(aux793 + aux796 + aux797))=tv=SATLiteral(8034))
-8034 -3333 -3342 -3347 0
8034 3347 0
8034 3342 0
8034 3343 0
8034 3345 0
8034 3333 0
8034 3333 3342 0
8034 3333 3343 0
8034 3333 3345 0
8034 3334 0
8034 3334 3342 0
8034 3334 3343 0
8034 3334 3345 0
c (((aux799 + aux802 + aux803)<=1)=tv=SATLiteral(8035))
-8035 3372 0
-8035 3366 3371 0
-8035 3367 0
-8035 3369 0
-8035 3357 3371 0
-8035 3357 3366 0
-8035 3357 3367 0
-8035 3357 3369 0
-8035 3358 0
-8035 3358 3366 0
-8035 3358 3367 0
-8035 3358 3369 0
8035 -3358 -3366 -3371 0
8035 -3357 -3367 -3371 0
8035 -3357 -3366 -3372 0
c ((1<=(aux799 + aux802 + aux803))=tv=SATLiteral(8036))
-8036 -3357 -3366 -3371 0
8036 3371 0
8036 3366 0
8036 3367 0
8036 3369 0
8036 3357 0
8036 3357 3366 0
8036 3357 3367 0
8036 3357 3369 0
8036 3358 0
8036 3358 3366 0
8036 3358 3367 0
8036 3358 3369 0
c (((aux805 + aux808 + aux809)<=1)=tv=SATLiteral(8037))
-8037 3396 0
-8037 3390 3395 0
-8037 3391 0
-8037 3393 0
-8037 3381 3395 0
-8037 3381 3390 0
-8037 3381 3391 0
-8037 3381 3393 0
-8037 3382 0
-8037 3382 3390 0
-8037 3382 3391 0
-8037 3382 3393 0
8037 -3382 -3390 -3395 0
8037 -3381 -3391 -3395 0
8037 -3381 -3390 -3396 0
c ((1<=(aux805 + aux808 + aux809))=tv=SATLiteral(8038))
-8038 -3381 -3390 -3395 0
8038 3395 0
8038 3390 0
8038 3391 0
8038 3393 0
8038 3381 0
8038 3381 3390 0
8038 3381 3391 0
8038 3381 3393 0
8038 3382 0
8038 3382 3390 0
8038 3382 3391 0
8038 3382 3393 0
c (((aux811 + aux814 + aux815)<=1)=tv=SATLiteral(8039))
-8039 3420 0
-8039 3414 3419 0
-8039 3415 0
-8039 3417 0
-8039 3405 3419 0
-8039 3405 3414 0
-8039 3405 3415 0
-8039 3405 3417 0
-8039 3406 0
-8039 3406 3414 0
-8039 3406 3415 0
-8039 3406 3417 0
8039 -3406 -3414 -3419 0
8039 -3405 -3415 -3419 0
8039 -3405 -3414 -3420 0
c ((1<=(aux811 + aux814 + aux815))=tv=SATLiteral(8040))
-8040 -3405 -3414 -3419 0
8040 3419 0
8040 3414 0
8040 3415 0
8040 3417 0
8040 3405 0
8040 3405 3414 0
8040 3405 3415 0
8040 3405 3417 0
8040 3406 0
8040 3406 3414 0
8040 3406 3415 0
8040 3406 3417 0
c (((aux817 + aux820 + aux821)<=1)=tv=SATLiteral(8041))
-8041 3444 0
-8041 3438 3443 0
-8041 3439 0
-8041 3441 0
-8041 3429 3443 0
-8041 3429 3438 0
-8041 3429 3439 0
-8041 3429 3441 0
-8041 3430 0
-8041 3430 3438 0
-8041 3430 3439 0
-8041 3430 3441 0
8041 -3430 -3438 -3443 0
8041 -3429 -3439 -3443 0
8041 -3429 -3438 -3444 0
c ((1<=(aux817 + aux820 + aux821))=tv=SATLiteral(8042))
-8042 -3429 -3438 -3443 0
8042 3443 0
8042 3438 0
8042 3439 0
8042 3441 0
8042 3429 0
8042 3429 3438 0
8042 3429 3439 0
8042 3429 3441 0
8042 3430 0
8042 3430 3438 0
8042 3430 3439 0
8042 3430 3441 0
c (((aux823 + aux826 + aux827)<=1)=tv=SATLiteral(8043))
-8043 3468 0
-8043 3462 3467 0
-8043 3463 0
-8043 3465 0
-8043 3453 3467 0
-8043 3453 3462 0
-8043 3453 3463 0
-8043 3453 3465 0
-8043 3454 0
-8043 3454 3462 0
-8043 3454 3463 0
-8043 3454 3465 0
8043 -3454 -3462 -3467 0
8043 -3453 -3463 -3467 0
8043 -3453 -3462 -3468 0
c ((1<=(aux823 + aux826 + aux827))=tv=SATLiteral(8044))
-8044 -3453 -3462 -3467 0
8044 3467 0
8044 3462 0
8044 3463 0
8044 3465 0
8044 3453 0
8044 3453 3462 0
8044 3453 3463 0
8044 3453 3465 0
8044 3454 0
8044 3454 3462 0
8044 3454 3463 0
8044 3454 3465 0
c (((aux829 + aux832 + aux833)<=1)=tv=SATLiteral(8045))
-8045 3492 0
-8045 3486 3491 0
-8045 3487 0
-8045 3489 0
-8045 3477 3491 0
-8045 3477 3486 0
-8045 3477 3487 0
-8045 3477 3489 0
-8045 3478 0
-8045 3478 3486 0
-8045 3478 3487 0
-8045 3478 3489 0
8045 -3478 -3486 -3491 0
8045 -3477 -3487 -3491 0
8045 -3477 -3486 -3492 0
c ((1<=(aux829 + aux832 + aux833))=tv=SATLiteral(8046))
-8046 -3477 -3486 -3491 0
8046 3491 0
8046 3486 0
8046 3487 0
8046 3489 0
8046 3477 0
8046 3477 3486 0
8046 3477 3487 0
8046 3477 3489 0
8046 3478 0
8046 3478 3486 0
8046 3478 3487 0
8046 3478 3489 0
c (((aux835 + aux838 + aux839)<=1)=tv=SATLiteral(8047))
-8047 3516 0
-8047 3510 3515 0
-8047 3511 0
-8047 3513 0
-8047 3501 3515 0
-8047 3501 3510 0
-8047 3501 3511 0
-8047 3501 3513 0
-8047 3502 0
-8047 3502 3510 0
-8047 3502 3511 0
-8047 3502 3513 0
8047 -3502 -3510 -3515 0
8047 -3501 -3511 -3515 0
8047 -3501 -3510 -3516 0
c ((1<=(aux835 + aux838 + aux839))=tv=SATLiteral(8048))
-8048 -3501 -3510 -3515 0
8048 3515 0
8048 3510 0
8048 3511 0
8048 3513 0
8048 3501 0
8048 3501 3510 0
8048 3501 3511 0
8048 3501 3513 0
8048 3502 0
8048 3502 3510 0
8048 3502 3511 0
8048 3502 3513 0
c (((aux841 + aux844 + aux845)<=1)=tv=SATLiteral(8049))
-8049 3540 0
-8049 3534 3539 0
-8049 3535 0
-8049 3537 0
-8049 3525 3539 0
-8049 3525 3534 0
-8049 3525 3535 0
-8049 3525 3537 0
-8049 3526 0
-8049 3526 3534 0
-8049 3526 3535 0
-8049 3526 3537 0
8049 -3526 -3534 -3539 0
8049 -3525 -3535 -3539 0
8049 -3525 -3534 -3540 0
c ((1<=(aux841 + aux844 + aux845))=tv=SATLiteral(8050))
-8050 -3525 -3534 -3539 0
8050 3539 0
8050 3534 0
8050 3535 0
8050 3537 0
8050 3525 0
8050 3525 3534 0
8050 3525 3535 0
8050 3525 3537 0
8050 3526 0
8050 3526 3534 0
8050 3526 3535 0
8050 3526 3537 0
c (((aux847 + aux850 + aux851)<=1)=tv=SATLiteral(8051))
-8051 3564 0
-8051 3558 3563 0
-8051 3559 0
-8051 3561 0
-8051 3549 3563 0
-8051 3549 3558 0
-8051 3549 3559 0
-8051 3549 3561 0
-8051 3550 0
-8051 3550 3558 0
-8051 3550 3559 0
-8051 3550 3561 0
8051 -3550 -3558 -3563 0
8051 -3549 -3559 -3563 0
8051 -3549 -3558 -3564 0
c ((1<=(aux847 + aux850 + aux851))=tv=SATLiteral(8052))
-8052 -3549 -3558 -3563 0
8052 3563 0
8052 3558 0
8052 3559 0
8052 3561 0
8052 3549 0
8052 3549 3558 0
8052 3549 3559 0
8052 3549 3561 0
8052 3550 0
8052 3550 3558 0
8052 3550 3559 0
8052 3550 3561 0
c (((aux853 + aux856 + aux857)<=1)=tv=SATLiteral(8053))
-8053 3588 0
-8053 3582 3587 0
-8053 3583 0
-8053 3585 0
-8053 3573 3587 0
-8053 3573 3582 0
-8053 3573 3583 0
-8053 3573 3585 0
-8053 3574 0
-8053 3574 3582 0
-8053 3574 3583 0
-8053 3574 3585 0
8053 -3574 -3582 -3587 0
8053 -3573 -3583 -3587 0
8053 -3573 -3582 -3588 0
c ((1<=(aux853 + aux856 + aux857))=tv=SATLiteral(8054))
-8054 -3573 -3582 -3587 0
8054 3587 0
8054 3582 0
8054 3583 0
8054 3585 0
8054 3573 0
8054 3573 3582 0
8054 3573 3583 0
8054 3573 3585 0
8054 3574 0
8054 3574 3582 0
8054 3574 3583 0
8054 3574 3585 0
c (((aux859 + aux862 + aux863)<=1)=tv=SATLiteral(8055))
-8055 3612 0
-8055 3606 3611 0
-8055 3607 0
-8055 3609 0
-8055 3597 3611 0
-8055 3597 3606 0
-8055 3597 3607 0
-8055 3597 3609 0
-8055 3598 0
-8055 3598 3606 0
-8055 3598 3607 0
-8055 3598 3609 0
8055 -3598 -3606 -3611 0
8055 -3597 -3607 -3611 0
8055 -3597 -3606 -3612 0
c ((1<=(aux859 + aux862 + aux863))=tv=SATLiteral(8056))
-8056 -3597 -3606 -3611 0
8056 3611 0
8056 3606 0
8056 3607 0
8056 3609 0
8056 3597 0
8056 3597 3606 0
8056 3597 3607 0
8056 3597 3609 0
8056 3598 0
8056 3598 3606 0
8056 3598 3607 0
8056 3598 3609 0
c (((aux865 + aux868 + aux869)<=1)=tv=SATLiteral(8057))
-8057 3636 0
-8057 3630 3635 0
-8057 3631 0
-8057 3633 0
-8057 3621 3635 0
-8057 3621 3630 0
-8057 3621 3631 0
-8057 3621 3633 0
-8057 3622 0
-8057 3622 3630 0
-8057 3622 3631 0
-8057 3622 3633 0
8057 -3622 -3630 -3635 0
8057 -3621 -3631 -3635 0
8057 -3621 -3630 -3636 0
c ((1<=(aux865 + aux868 + aux869))=tv=SATLiteral(8058))
-8058 -3621 -3630 -3635 0
8058 3635 0
8058 3630 0
8058 3631 0
8058 3633 0
8058 3621 0
8058 3621 3630 0
8058 3621 3631 0
8058 3621 3633 0
8058 3622 0
8058 3622 3630 0
8058 3622 3631 0
8058 3622 3633 0
c (((aux871 + aux874 + aux875)<=1)=tv=SATLiteral(8059))
-8059 3660 0
-8059 3654 3659 0
-8059 3655 0
-8059 3657 0
-8059 3645 3659 0
-8059 3645 3654 0
-8059 3645 3655 0
-8059 3645 3657 0
-8059 3646 0
-8059 3646 3654 0
-8059 3646 3655 0
-8059 3646 3657 0
8059 -3646 -3654 -3659 0
8059 -3645 -3655 -3659 0
8059 -3645 -3654 -3660 0
c ((1<=(aux871 + aux874 + aux875))=tv=SATLiteral(8060))
-8060 -3645 -3654 -3659 0
8060 3659 0
8060 3654 0
8060 3655 0
8060 3657 0
8060 3645 0
8060 3645 3654 0
8060 3645 3655 0
8060 3645 3657 0
8060 3646 0
8060 3646 3654 0
8060 3646 3655 0
8060 3646 3657 0
c (((aux877 + aux880 + aux881)<=1)=tv=SATLiteral(8061))
-8061 3684 0
-8061 3678 3683 0
-8061 3679 0
-8061 3681 0
-8061 3669 3683 0
-8061 3669 3678 0
-8061 3669 3679 0
-8061 3669 3681 0
-8061 3670 0
-8061 3670 3678 0
-8061 3670 3679 0
-8061 3670 3681 0
8061 -3670 -3678 -3683 0
8061 -3669 -3679 -3683 0
8061 -3669 -3678 -3684 0
c ((1<=(aux877 + aux880 + aux881))=tv=SATLiteral(8062))
-8062 -3669 -3678 -3683 0
8062 3683 0
8062 3678 0
8062 3679 0
8062 3681 0
8062 3669 0
8062 3669 3678 0
8062 3669 3679 0
8062 3669 3681 0
8062 3670 0
8062 3670 3678 0
8062 3670 3679 0
8062 3670 3681 0
c (((aux883 + aux886 + aux887)<=1)=tv=SATLiteral(8063))
-8063 3708 0
-8063 3702 3707 0
-8063 3703 0
-8063 3705 0
-8063 3693 3707 0
-8063 3693 3702 0
-8063 3693 3703 0
-8063 3693 3705 0
-8063 3694 0
-8063 3694 3702 0
-8063 3694 3703 0
-8063 3694 3705 0
8063 -3694 -3702 -3707 0
8063 -3693 -3703 -3707 0
8063 -3693 -3702 -3708 0
c ((1<=(aux883 + aux886 + aux887))=tv=SATLiteral(8064))
-8064 -3693 -3702 -3707 0
8064 3707 0
8064 3702 0
8064 3703 0
8064 3705 0
8064 3693 0
8064 3693 3702 0
8064 3693 3703 0
8064 3693 3705 0
8064 3694 0
8064 3694 3702 0
8064 3694 3703 0
8064 3694 3705 0
c (((aux889 + aux892 + aux893)<=1)=tv=SATLiteral(8065))
-8065 3732 0
-8065 3726 3731 0
-8065 3727 0
-8065 3729 0
-8065 3717 3731 0
-8065 3717 3726 0
-8065 3717 3727 0
-8065 3717 3729 0
-8065 3718 0
-8065 3718 3726 0
-8065 3718 3727 0
-8065 3718 3729 0
8065 -3718 -3726 -3731 0
8065 -3717 -3727 -3731 0
8065 -3717 -3726 -3732 0
c ((1<=(aux889 + aux892 + aux893))=tv=SATLiteral(8066))
-8066 -3717 -3726 -3731 0
8066 3731 0
8066 3726 0
8066 3727 0
8066 3729 0
8066 3717 0
8066 3717 3726 0
8066 3717 3727 0
8066 3717 3729 0
8066 3718 0
8066 3718 3726 0
8066 3718 3727 0
8066 3718 3729 0
c (((aux895 + aux898 + aux899)<=1)=tv=SATLiteral(8067))
-8067 3756 0
-8067 3750 3755 0
-8067 3751 0
-8067 3753 0
-8067 3741 3755 0
-8067 3741 3750 0
-8067 3741 3751 0
-8067 3741 3753 0
-8067 3742 0
-8067 3742 3750 0
-8067 3742 3751 0
-8067 3742 3753 0
8067 -3742 -3750 -3755 0
8067 -3741 -3751 -3755 0
8067 -3741 -3750 -3756 0
c ((1<=(aux895 + aux898 + aux899))=tv=SATLiteral(8068))
-8068 -3741 -3750 -3755 0
8068 3755 0
8068 3750 0
8068 3751 0
8068 3753 0
8068 3741 0
8068 3741 3750 0
8068 3741 3751 0
8068 3741 3753 0
8068 3742 0
8068 3742 3750 0
8068 3742 3751 0
8068 3742 3753 0
c (((aux901 + aux904 + aux905)<=1)=tv=SATLiteral(8069))
-8069 3780 0
-8069 3774 3779 0
-8069 3775 0
-8069 3777 0
-8069 3765 3779 0
-8069 3765 3774 0
-8069 3765 3775 0
-8069 3765 3777 0
-8069 3766 0
-8069 3766 3774 0
-8069 3766 3775 0
-8069 3766 3777 0
8069 -3766 -3774 -3779 0
8069 -3765 -3775 -3779 0
8069 -3765 -3774 -3780 0
c ((1<=(aux901 + aux904 + aux905))=tv=SATLiteral(8070))
-8070 -3765 -3774 -3779 0
8070 3779 0
8070 3774 0
8070 3775 0
8070 3777 0
8070 3765 0
8070 3765 3774 0
8070 3765 3775 0
8070 3765 3777 0
8070 3766 0
8070 3766 3774 0
8070 3766 3775 0
8070 3766 3777 0
c (((aux907 + aux910 + aux911)<=1)=tv=SATLiteral(8071))
-8071 3804 0
-8071 3798 3803 0
-8071 3799 0
-8071 3801 0
-8071 3789 3803 0
-8071 3789 3798 0
-8071 3789 3799 0
-8071 3789 3801 0
-8071 3790 0
-8071 3790 3798 0
-8071 3790 3799 0
-8071 3790 3801 0
8071 -3790 -3798 -3803 0
8071 -3789 -3799 -3803 0
8071 -3789 -3798 -3804 0
c ((1<=(aux907 + aux910 + aux911))=tv=SATLiteral(8072))
-8072 -3789 -3798 -3803 0
8072 3803 0
8072 3798 0
8072 3799 0
8072 3801 0
8072 3789 0
8072 3789 3798 0
8072 3789 3799 0
8072 3789 3801 0
8072 3790 0
8072 3790 3798 0
8072 3790 3799 0
8072 3790 3801 0
c (((aux913 + aux916 + aux917)<=1)=tv=SATLiteral(8073))
-8073 3828 0
-8073 3822 3827 0
-8073 3823 0
-8073 3825 0
-8073 3813 3827 0
-8073 3813 3822 0
-8073 3813 3823 0
-8073 3813 3825 0
-8073 3814 0
-8073 3814 3822 0
-8073 3814 3823 0
-8073 3814 3825 0
8073 -3814 -3822 -3827 0
8073 -3813 -3823 -3827 0
8073 -3813 -3822 -3828 0
c ((1<=(aux913 + aux916 + aux917))=tv=SATLiteral(8074))
-8074 -3813 -3822 -3827 0
8074 3827 0
8074 3822 0
8074 3823 0
8074 3825 0
8074 3813 0
8074 3813 3822 0
8074 3813 3823 0
8074 3813 3825 0
8074 3814 0
8074 3814 3822 0
8074 3814 3823 0
8074 3814 3825 0
c (((aux919 + aux922 + aux923)<=1)=tv=SATLiteral(8075))
-8075 3852 0
-8075 3846 3851 0
-8075 3847 0
-8075 3849 0
-8075 3837 3851 0
-8075 3837 3846 0
-8075 3837 3847 0
-8075 3837 3849 0
-8075 3838 0
-8075 3838 3846 0
-8075 3838 3847 0
-8075 3838 3849 0
8075 -3838 -3846 -3851 0
8075 -3837 -3847 -3851 0
8075 -3837 -3846 -3852 0
c ((1<=(aux919 + aux922 + aux923))=tv=SATLiteral(8076))
-8076 -3837 -3846 -3851 0
8076 3851 0
8076 3846 0
8076 3847 0
8076 3849 0
8076 3837 0
8076 3837 3846 0
8076 3837 3847 0
8076 3837 3849 0
8076 3838 0
8076 3838 3846 0
8076 3838 3847 0
8076 3838 3849 0
c (((aux925 + aux928 + aux929)<=1)=tv=SATLiteral(8077))
-8077 3876 0
-8077 3870 3875 0
-8077 3871 0
-8077 3873 0
-8077 3861 3875 0
-8077 3861 3870 0
-8077 3861 3871 0
-8077 3861 3873 0
-8077 3862 0
-8077 3862 3870 0
-8077 3862 3871 0
-8077 3862 3873 0
8077 -3862 -3870 -3875 0
8077 -3861 -3871 -3875 0
8077 -3861 -3870 -3876 0
c ((1<=(aux925 + aux928 + aux929))=tv=SATLiteral(8078))
-8078 -3861 -3870 -3875 0
8078 3875 0
8078 3870 0
8078 3871 0
8078 3873 0
8078 3861 0
8078 3861 3870 0
8078 3861 3871 0
8078 3861 3873 0
8078 3862 0
8078 3862 3870 0
8078 3862 3871 0
8078 3862 3873 0
c (((aux931 + aux934 + aux935)<=1)=tv=SATLiteral(8079))
-8079 3900 0
-8079 3894 3899 0
-8079 3895 0
-8079 3897 0
-8079 3885 3899 0
-8079 3885 3894 0
-8079 3885 3895 0
-8079 3885 3897 0
-8079 3886 0
-8079 3886 3894 0
-8079 3886 3895 0
-8079 3886 3897 0
8079 -3886 -3894 -3899 0
8079 -3885 -3895 -3899 0
8079 -3885 -3894 -3900 0
c ((1<=(aux931 + aux934 + aux935))=tv=SATLiteral(8080))
-8080 -3885 -3894 -3899 0
8080 3899 0
8080 3894 0
8080 3895 0
8080 3897 0
8080 3885 0
8080 3885 3894 0
8080 3885 3895 0
8080 3885 3897 0
8080 3886 0
8080 3886 3894 0
8080 3886 3895 0
8080 3886 3897 0
c (((aux937 + aux940 + aux941)<=1)=tv=SATLiteral(8081))
-8081 3924 0
-8081 3918 3923 0
-8081 3919 0
-8081 3921 0
-8081 3909 3923 0
-8081 3909 3918 0
-8081 3909 3919 0
-8081 3909 3921 0
-8081 3910 0
-8081 3910 3918 0
-8081 3910 3919 0
-8081 3910 3921 0
8081 -3910 -3918 -3923 0
8081 -3909 -3919 -3923 0
8081 -3909 -3918 -3924 0
c ((1<=(aux937 + aux940 + aux941))=tv=SATLiteral(8082))
-8082 -3909 -3918 -3923 0
8082 3923 0
8082 3918 0
8082 3919 0
8082 3921 0
8082 3909 0
8082 3909 3918 0
8082 3909 3919 0
8082 3909 3921 0
8082 3910 0
8082 3910 3918 0
8082 3910 3919 0
8082 3910 3921 0
c (((aux943 + aux946 + aux947)<=1)=tv=SATLiteral(8083))
-8083 3948 0
-8083 3942 3947 0
-8083 3943 0
-8083 3945 0
-8083 3933 3947 0
-8083 3933 3942 0
-8083 3933 3943 0
-8083 3933 3945 0
-8083 3934 0
-8083 3934 3942 0
-8083 3934 3943 0
-8083 3934 3945 0
8083 -3934 -3942 -3947 0
8083 -3933 -3943 -3947 0
8083 -3933 -3942 -3948 0
c ((1<=(aux943 + aux946 + aux947))=tv=SATLiteral(8084))
-8084 -3933 -3942 -3947 0
8084 3947 0
8084 3942 0
8084 3943 0
8084 3945 0
8084 3933 0
8084 3933 3942 0
8084 3933 3943 0
8084 3933 3945 0
8084 3934 0
8084 3934 3942 0
8084 3934 3943 0
8084 3934 3945 0
c (((aux949 + aux952 + aux953)<=1)=tv=SATLiteral(8085))
-8085 3972 0
-8085 3966 3971 0
-8085 3967 0
-8085 3969 0
-8085 3957 3971 0
-8085 3957 3966 0
-8085 3957 3967 0
-8085 3957 3969 0
-8085 3958 0
-8085 3958 3966 0
-8085 3958 3967 0
-8085 3958 3969 0
8085 -3958 -3966 -3971 0
8085 -3957 -3967 -3971 0
8085 -3957 -3966 -3972 0
c ((1<=(aux949 + aux952 + aux953))=tv=SATLiteral(8086))
-8086 -3957 -3966 -3971 0
8086 3971 0
8086 3966 0
8086 3967 0
8086 3969 0
8086 3957 0
8086 3957 3966 0
8086 3957 3967 0
8086 3957 3969 0
8086 3958 0
8086 3958 3966 0
8086 3958 3967 0
8086 3958 3969 0
c (((aux955 + aux958 + aux959)<=1)=tv=SATLiteral(8087))
-8087 3996 0
-8087 3990 3995 0
-8087 3991 0
-8087 3993 0
-8087 3981 3995 0
-8087 3981 3990 0
-8087 3981 3991 0
-8087 3981 3993 0
-8087 3982 0
-8087 3982 3990 0
-8087 3982 3991 0
-8087 3982 3993 0
8087 -3982 -3990 -3995 0
8087 -3981 -3991 -3995 0
8087 -3981 -3990 -3996 0
c ((1<=(aux955 + aux958 + aux959))=tv=SATLiteral(8088))
-8088 -3981 -3990 -3995 0
8088 3995 0
8088 3990 0
8088 3991 0
8088 3993 0
8088 3981 0
8088 3981 3990 0
8088 3981 3991 0
8088 3981 3993 0
8088 3982 0
8088 3982 3990 0
8088 3982 3991 0
8088 3982 3993 0
c (((aux961 + aux964 + aux965)<=1)=tv=SATLiteral(8089))
-8089 4020 0
-8089 4014 4019 0
-8089 4015 0
-8089 4017 0
-8089 4005 4019 0
-8089 4005 4014 0
-8089 4005 4015 0
-8089 4005 4017 0
-8089 4006 0
-8089 4006 4014 0
-8089 4006 4015 0
-8089 4006 4017 0
8089 -4006 -4014 -4019 0
8089 -4005 -4015 -4019 0
8089 -4005 -4014 -4020 0
c ((1<=(aux961 + aux964 + aux965))=tv=SATLiteral(8090))
-8090 -4005 -4014 -4019 0
8090 4019 0
8090 4014 0
8090 4015 0
8090 4017 0
8090 4005 0
8090 4005 4014 0
8090 4005 4015 0
8090 4005 4017 0
8090 4006 0
8090 4006 4014 0
8090 4006 4015 0
8090 4006 4017 0
c (((aux967 + aux970 + aux971)<=1)=tv=SATLiteral(8091))
-8091 4044 0
-8091 4038 4043 0
-8091 4039 0
-8091 4041 0
-8091 4029 4043 0
-8091 4029 4038 0
-8091 4029 4039 0
-8091 4029 4041 0
-8091 4030 0
-8091 4030 4038 0
-8091 4030 4039 0
-8091 4030 4041 0
8091 -4030 -4038 -4043 0
8091 -4029 -4039 -4043 0
8091 -4029 -4038 -4044 0
c ((1<=(aux967 + aux970 + aux971))=tv=SATLiteral(8092))
-8092 -4029 -4038 -4043 0
8092 4043 0
8092 4038 0
8092 4039 0
8092 4041 0
8092 4029 0
8092 4029 4038 0
8092 4029 4039 0
8092 4029 4041 0
8092 4030 0
8092 4030 4038 0
8092 4030 4039 0
8092 4030 4041 0
c (((aux973 + aux976 + aux977)<=1)=tv=SATLiteral(8093))
-8093 4068 0
-8093 4062 4067 0
-8093 4063 0
-8093 4065 0
-8093 4053 4067 0
-8093 4053 4062 0
-8093 4053 4063 0
-8093 4053 4065 0
-8093 4054 0
-8093 4054 4062 0
-8093 4054 4063 0
-8093 4054 4065 0
8093 -4054 -4062 -4067 0
8093 -4053 -4063 -4067 0
8093 -4053 -4062 -4068 0
c ((1<=(aux973 + aux976 + aux977))=tv=SATLiteral(8094))
-8094 -4053 -4062 -4067 0
8094 4067 0
8094 4062 0
8094 4063 0
8094 4065 0
8094 4053 0
8094 4053 4062 0
8094 4053 4063 0
8094 4053 4065 0
8094 4054 0
8094 4054 4062 0
8094 4054 4063 0
8094 4054 4065 0
c (((aux979 + aux982 + aux983)<=1)=tv=SATLiteral(8095))
-8095 4092 0
-8095 4086 4091 0
-8095 4087 0
-8095 4089 0
-8095 4077 4091 0
-8095 4077 4086 0
-8095 4077 4087 0
-8095 4077 4089 0
-8095 4078 0
-8095 4078 4086 0
-8095 4078 4087 0
-8095 4078 4089 0
8095 -4078 -4086 -4091 0
8095 -4077 -4087 -4091 0
8095 -4077 -4086 -4092 0
c ((1<=(aux979 + aux982 + aux983))=tv=SATLiteral(8096))
-8096 -4077 -4086 -4091 0
8096 4091 0
8096 4086 0
8096 4087 0
8096 4089 0
8096 4077 0
8096 4077 4086 0
8096 4077 4087 0
8096 4077 4089 0
8096 4078 0
8096 4078 4086 0
8096 4078 4087 0
8096 4078 4089 0
c (((aux985 + aux988 + aux989)<=1)=tv=SATLiteral(8097))
-8097 4116 0
-8097 4110 4115 0
-8097 4111 0
-8097 4113 0
-8097 4101 4115 0
-8097 4101 4110 0
-8097 4101 4111 0
-8097 4101 4113 0
-8097 4102 0
-8097 4102 4110 0
-8097 4102 4111 0
-8097 4102 4113 0
8097 -4102 -4110 -4115 0
8097 -4101 -4111 -4115 0
8097 -4101 -4110 -4116 0
c ((1<=(aux985 + aux988 + aux989))=tv=SATLiteral(8098))
-8098 -4101 -4110 -4115 0
8098 4115 0
8098 4110 0
8098 4111 0
8098 4113 0
8098 4101 0
8098 4101 4110 0
8098 4101 4111 0
8098 4101 4113 0
8098 4102 0
8098 4102 4110 0
8098 4102 4111 0
8098 4102 4113 0
c (((aux991 + aux994 + aux995)<=1)=tv=SATLiteral(8099))
-8099 4140 0
-8099 4134 4139 0
-8099 4135 0
-8099 4137 0
-8099 4125 4139 0
-8099 4125 4134 0
-8099 4125 4135 0
-8099 4125 4137 0
-8099 4126 0
-8099 4126 4134 0
-8099 4126 4135 0
-8099 4126 4137 0
8099 -4126 -4134 -4139 0
8099 -4125 -4135 -4139 0
8099 -4125 -4134 -4140 0
c ((1<=(aux991 + aux994 + aux995))=tv=SATLiteral(8100))
-8100 -4125 -4134 -4139 0
8100 4139 0
8100 4134 0
8100 4135 0
8100 4137 0
8100 4125 0
8100 4125 4134 0
8100 4125 4135 0
8100 4125 4137 0
8100 4126 0
8100 4126 4134 0
8100 4126 4135 0
8100 4126 4137 0
c (((aux997 + aux1000 + aux1001)<=1)=tv=SATLiteral(8101))
-8101 4164 0
-8101 4158 4163 0
-8101 4159 0
-8101 4161 0
-8101 4149 4163 0
-8101 4149 4158 0
-8101 4149 4159 0
-8101 4149 4161 0
-8101 4150 0
-8101 4150 4158 0
-8101 4150 4159 0
-8101 4150 4161 0
8101 -4150 -4158 -4163 0
8101 -4149 -4159 -4163 0
8101 -4149 -4158 -4164 0
c ((1<=(aux997 + aux1000 + aux1001))=tv=SATLiteral(8102))
-8102 -4149 -4158 -4163 0
8102 4163 0
8102 4158 0
8102 4159 0
8102 4161 0
8102 4149 0
8102 4149 4158 0
8102 4149 4159 0
8102 4149 4161 0
8102 4150 0
8102 4150 4158 0
8102 4150 4159 0
8102 4150 4161 0
c (((aux1003 + aux1006 + aux1007)<=1)=tv=SATLiteral(8103))
-8103 4188 0
-8103 4182 4187 0
-8103 4183 0
-8103 4185 0
-8103 4173 4187 0
-8103 4173 4182 0
-8103 4173 4183 0
-8103 4173 4185 0
-8103 4174 0
-8103 4174 4182 0
-8103 4174 4183 0
-8103 4174 4185 0
8103 -4174 -4182 -4187 0
8103 -4173 -4183 -4187 0
8103 -4173 -4182 -4188 0
c ((1<=(aux1003 + aux1006 + aux1007))=tv=SATLiteral(8104))
-8104 -4173 -4182 -4187 0
8104 4187 0
8104 4182 0
8104 4183 0
8104 4185 0
8104 4173 0
8104 4173 4182 0
8104 4173 4183 0
8104 4173 4185 0
8104 4174 0
8104 4174 4182 0
8104 4174 4183 0
8104 4174 4185 0
c (((aux1009 + aux1012 + aux1013)<=1)=tv=SATLiteral(8105))
-8105 4212 0
-8105 4206 4211 0
-8105 4207 0
-8105 4209 0
-8105 4197 4211 0
-8105 4197 4206 0
-8105 4197 4207 0
-8105 4197 4209 0
-8105 4198 0
-8105 4198 4206 0
-8105 4198 4207 0
-8105 4198 4209 0
8105 -4198 -4206 -4211 0
8105 -4197 -4207 -4211 0
8105 -4197 -4206 -4212 0
c ((1<=(aux1009 + aux1012 + aux1013))=tv=SATLiteral(8106))
-8106 -4197 -4206 -4211 0
8106 4211 0
8106 4206 0
8106 4207 0
8106 4209 0
8106 4197 0
8106 4197 4206 0
8106 4197 4207 0
8106 4197 4209 0
8106 4198 0
8106 4198 4206 0
8106 4198 4207 0
8106 4198 4209 0
c (((aux1015 + aux1018 + aux1019)<=1)=tv=SATLiteral(8107))
-8107 4236 0
-8107 4230 4235 0
-8107 4231 0
-8107 4233 0
-8107 4221 4235 0
-8107 4221 4230 0
-8107 4221 4231 0
-8107 4221 4233 0
-8107 4222 0
-8107 4222 4230 0
-8107 4222 4231 0
-8107 4222 4233 0
8107 -4222 -4230 -4235 0
8107 -4221 -4231 -4235 0
8107 -4221 -4230 -4236 0
c ((1<=(aux1015 + aux1018 + aux1019))=tv=SATLiteral(8108))
-8108 -4221 -4230 -4235 0
8108 4235 0
8108 4230 0
8108 4231 0
8108 4233 0
8108 4221 0
8108 4221 4230 0
8108 4221 4231 0
8108 4221 4233 0
8108 4222 0
8108 4222 4230 0
8108 4222 4231 0
8108 4222 4233 0
c (((aux1021 + aux1024 + aux1025)<=1)=tv=SATLiteral(8109))
-8109 4260 0
-8109 4254 4259 0
-8109 4255 0
-8109 4257 0
-8109 4245 4259 0
-8109 4245 4254 0
-8109 4245 4255 0
-8109 4245 4257 0
-8109 4246 0
-8109 4246 4254 0
-8109 4246 4255 0
-8109 4246 4257 0
8109 -4246 -4254 -4259 0
8109 -4245 -4255 -4259 0
8109 -4245 -4254 -4260 0
c ((1<=(aux1021 + aux1024 + aux1025))=tv=SATLiteral(8110))
-8110 -4245 -4254 -4259 0
8110 4259 0
8110 4254 0
8110 4255 0
8110 4257 0
8110 4245 0
8110 4245 4254 0
8110 4245 4255 0
8110 4245 4257 0
8110 4246 0
8110 4246 4254 0
8110 4246 4255 0
8110 4246 4257 0
c (((aux1027 + aux1030 + aux1031)<=1)=tv=SATLiteral(8111))
-8111 4284 0
-8111 4278 4283 0
-8111 4279 0
-8111 4281 0
-8111 4269 4283 0
-8111 4269 4278 0
-8111 4269 4279 0
-8111 4269 4281 0
-8111 4270 0
-8111 4270 4278 0
-8111 4270 4279 0
-8111 4270 4281 0
8111 -4270 -4278 -4283 0
8111 -4269 -4279 -4283 0
8111 -4269 -4278 -4284 0
c ((1<=(aux1027 + aux1030 + aux1031))=tv=SATLiteral(8112))
-8112 -4269 -4278 -4283 0
8112 4283 0
8112 4278 0
8112 4279 0
8112 4281 0
8112 4269 0
8112 4269 4278 0
8112 4269 4279 0
8112 4269 4281 0
8112 4270 0
8112 4270 4278 0
8112 4270 4279 0
8112 4270 4281 0
c (((aux1033 + aux1036 + aux1037)<=1)=tv=SATLiteral(8113))
-8113 4308 0
-8113 4302 4307 0
-8113 4303 0
-8113 4305 0
-8113 4293 4307 0
-8113 4293 4302 0
-8113 4293 4303 0
-8113 4293 4305 0
-8113 4294 0
-8113 4294 4302 0
-8113 4294 4303 0
-8113 4294 4305 0
8113 -4294 -4302 -4307 0
8113 -4293 -4303 -4307 0
8113 -4293 -4302 -4308 0
c ((1<=(aux1033 + aux1036 + aux1037))=tv=SATLiteral(8114))
-8114 -4293 -4302 -4307 0
8114 4307 0
8114 4302 0
8114 4303 0
8114 4305 0
8114 4293 0
8114 4293 4302 0
8114 4293 4303 0
8114 4293 4305 0
8114 4294 0
8114 4294 4302 0
8114 4294 4303 0
8114 4294 4305 0
c (((aux1039 + aux1042 + aux1043)<=1)=tv=SATLiteral(8115))
-8115 4332 0
-8115 4326 4331 0
-8115 4327 0
-8115 4329 0
-8115 4317 4331 0
-8115 4317 4326 0
-8115 4317 4327 0
-8115 4317 4329 0
-8115 4318 0
-8115 4318 4326 0
-8115 4318 4327 0
-8115 4318 4329 0
8115 -4318 -4326 -4331 0
8115 -4317 -4327 -4331 0
8115 -4317 -4326 -4332 0
c ((1<=(aux1039 + aux1042 + aux1043))=tv=SATLiteral(8116))
-8116 -4317 -4326 -4331 0
8116 4331 0
8116 4326 0
8116 4327 0
8116 4329 0
8116 4317 0
8116 4317 4326 0
8116 4317 4327 0
8116 4317 4329 0
8116 4318 0
8116 4318 4326 0
8116 4318 4327 0
8116 4318 4329 0
c (((aux1045 + aux1048 + aux1049)<=1)=tv=SATLiteral(8117))
-8117 4356 0
-8117 4350 4355 0
-8117 4351 0
-8117 4353 0
-8117 4341 4355 0
-8117 4341 4350 0
-8117 4341 4351 0
-8117 4341 4353 0
-8117 4342 0
-8117 4342 4350 0
-8117 4342 4351 0
-8117 4342 4353 0
8117 -4342 -4350 -4355 0
8117 -4341 -4351 -4355 0
8117 -4341 -4350 -4356 0
c ((1<=(aux1045 + aux1048 + aux1049))=tv=SATLiteral(8118))
-8118 -4341 -4350 -4355 0
8118 4355 0
8118 4350 0
8118 4351 0
8118 4353 0
8118 4341 0
8118 4341 4350 0
8118 4341 4351 0
8118 4341 4353 0
8118 4342 0
8118 4342 4350 0
8118 4342 4351 0
8118 4342 4353 0
c (((aux1051 + aux1054 + aux1055)<=1)=tv=SATLiteral(8119))
-8119 4380 0
-8119 4374 4379 0
-8119 4375 0
-8119 4377 0
-8119 4365 4379 0
-8119 4365 4374 0
-8119 4365 4375 0
-8119 4365 4377 0
-8119 4366 0
-8119 4366 4374 0
-8119 4366 4375 0
-8119 4366 4377 0
8119 -4366 -4374 -4379 0
8119 -4365 -4375 -4379 0
8119 -4365 -4374 -4380 0
c ((1<=(aux1051 + aux1054 + aux1055))=tv=SATLiteral(8120))
-8120 -4365 -4374 -4379 0
8120 4379 0
8120 4374 0
8120 4375 0
8120 4377 0
8120 4365 0
8120 4365 4374 0
8120 4365 4375 0
8120 4365 4377 0
8120 4366 0
8120 4366 4374 0
8120 4366 4375 0
8120 4366 4377 0
c (((aux1057 + aux1060 + aux1061)<=1)=tv=SATLiteral(8121))
-8121 4404 0
-8121 4398 4403 0
-8121 4399 0
-8121 4401 0
-8121 4389 4403 0
-8121 4389 4398 0
-8121 4389 4399 0
-8121 4389 4401 0
-8121 4390 0
-8121 4390 4398 0
-8121 4390 4399 0
-8121 4390 4401 0
8121 -4390 -4398 -4403 0
8121 -4389 -4399 -4403 0
8121 -4389 -4398 -4404 0
c ((1<=(aux1057 + aux1060 + aux1061))=tv=SATLiteral(8122))
-8122 -4389 -4398 -4403 0
8122 4403 0
8122 4398 0
8122 4399 0
8122 4401 0
8122 4389 0
8122 4389 4398 0
8122 4389 4399 0
8122 4389 4401 0
8122 4390 0
8122 4390 4398 0
8122 4390 4399 0
8122 4390 4401 0
c (((aux1063 + aux1066 + aux1067)<=1)=tv=SATLiteral(8123))
-8123 4428 0
-8123 4422 4427 0
-8123 4423 0
-8123 4425 0
-8123 4413 4427 0
-8123 4413 4422 0
-8123 4413 4423 0
-8123 4413 4425 0
-8123 4414 0
-8123 4414 4422 0
-8123 4414 4423 0
-8123 4414 4425 0
8123 -4414 -4422 -4427 0
8123 -4413 -4423 -4427 0
8123 -4413 -4422 -4428 0
c ((1<=(aux1063 + aux1066 + aux1067))=tv=SATLiteral(8124))
-8124 -4413 -4422 -4427 0
8124 4427 0
8124 4422 0
8124 4423 0
8124 4425 0
8124 4413 0
8124 4413 4422 0
8124 4413 4423 0
8124 4413 4425 0
8124 4414 0
8124 4414 4422 0
8124 4414 4423 0
8124 4414 4425 0
c (((aux1069 + aux1072 + aux1073)<=1)=tv=SATLiteral(8125))
-8125 4452 0
-8125 4446 4451 0
-8125 4447 0
-8125 4449 0
-8125 4437 4451 0
-8125 4437 4446 0
-8125 4437 4447 0
-8125 4437 4449 0
-8125 4438 0
-8125 4438 4446 0
-8125 4438 4447 0
-8125 4438 4449 0
8125 -4438 -4446 -4451 0
8125 -4437 -4447 -4451 0
8125 -4437 -4446 -4452 0
c ((1<=(aux1069 + aux1072 + aux1073))=tv=SATLiteral(8126))
-8126 -4437 -4446 -4451 0
8126 4451 0
8126 4446 0
8126 4447 0
8126 4449 0
8126 4437 0
8126 4437 4446 0
8126 4437 4447 0
8126 4437 4449 0
8126 4438 0
8126 4438 4446 0
8126 4438 4447 0
8126 4438 4449 0
c (((aux1075 + aux1078 + aux1079)<=1)=tv=SATLiteral(8127))
-8127 4476 0
-8127 4470 4475 0
-8127 4471 0
-8127 4473 0
-8127 4461 4475 0
-8127 4461 4470 0
-8127 4461 4471 0
-8127 4461 4473 0
-8127 4462 0
-8127 4462 4470 0
-8127 4462 4471 0
-8127 4462 4473 0
8127 -4462 -4470 -4475 0
8127 -4461 -4471 -4475 0
8127 -4461 -4470 -4476 0
c ((1<=(aux1075 + aux1078 + aux1079))=tv=SATLiteral(8128))
-8128 -4461 -4470 -4475 0
8128 4475 0
8128 4470 0
8128 4471 0
8128 4473 0
8128 4461 0
8128 4461 4470 0
8128 4461 4471 0
8128 4461 4473 0
8128 4462 0
8128 4462 4470 0
8128 4462 4471 0
8128 4462 4473 0
c (((aux1081 + aux1084 + aux1085)<=1)=tv=SATLiteral(8129))
-8129 4500 0
-8129 4494 4499 0
-8129 4495 0
-8129 4497 0
-8129 4485 4499 0
-8129 4485 4494 0
-8129 4485 4495 0
-8129 4485 4497 0
-8129 4486 0
-8129 4486 4494 0
-8129 4486 4495 0
-8129 4486 4497 0
8129 -4486 -4494 -4499 0
8129 -4485 -4495 -4499 0
8129 -4485 -4494 -4500 0
c ((1<=(aux1081 + aux1084 + aux1085))=tv=SATLiteral(8130))
-8130 -4485 -4494 -4499 0
8130 4499 0
8130 4494 0
8130 4495 0
8130 4497 0
8130 4485 0
8130 4485 4494 0
8130 4485 4495 0
8130 4485 4497 0
8130 4486 0
8130 4486 4494 0
8130 4486 4495 0
8130 4486 4497 0
c (((aux1087 + aux1090 + aux1091)<=1)=tv=SATLiteral(8131))
-8131 4524 0
-8131 4518 4523 0
-8131 4519 0
-8131 4521 0
-8131 4509 4523 0
-8131 4509 4518 0
-8131 4509 4519 0
-8131 4509 4521 0
-8131 4510 0
-8131 4510 4518 0
-8131 4510 4519 0
-8131 4510 4521 0
8131 -4510 -4518 -4523 0
8131 -4509 -4519 -4523 0
8131 -4509 -4518 -4524 0
c ((1<=(aux1087 + aux1090 + aux1091))=tv=SATLiteral(8132))
-8132 -4509 -4518 -4523 0
8132 4523 0
8132 4518 0
8132 4519 0
8132 4521 0
8132 4509 0
8132 4509 4518 0
8132 4509 4519 0
8132 4509 4521 0
8132 4510 0
8132 4510 4518 0
8132 4510 4519 0
8132 4510 4521 0
c (((aux1093 + aux1096 + aux1097)<=1)=tv=SATLiteral(8133))
-8133 4548 0
-8133 4542 4547 0
-8133 4543 0
-8133 4545 0
-8133 4533 4547 0
-8133 4533 4542 0
-8133 4533 4543 0
-8133 4533 4545 0
-8133 4534 0
-8133 4534 4542 0
-8133 4534 4543 0
-8133 4534 4545 0
8133 -4534 -4542 -4547 0
8133 -4533 -4543 -4547 0
8133 -4533 -4542 -4548 0
c ((1<=(aux1093 + aux1096 + aux1097))=tv=SATLiteral(8134))
-8134 -4533 -4542 -4547 0
8134 4547 0
8134 4542 0
8134 4543 0
8134 4545 0
8134 4533 0
8134 4533 4542 0
8134 4533 4543 0
8134 4533 4545 0
8134 4534 0
8134 4534 4542 0
8134 4534 4543 0
8134 4534 4545 0
c (((aux1099 + aux1102 + aux1103)<=1)=tv=SATLiteral(8135))
-8135 4572 0
-8135 4566 4571 0
-8135 4567 0
-8135 4569 0
-8135 4557 4571 0
-8135 4557 4566 0
-8135 4557 4567 0
-8135 4557 4569 0
-8135 4558 0
-8135 4558 4566 0
-8135 4558 4567 0
-8135 4558 4569 0
8135 -4558 -4566 -4571 0
8135 -4557 -4567 -4571 0
8135 -4557 -4566 -4572 0
c ((1<=(aux1099 + aux1102 + aux1103))=tv=SATLiteral(8136))
-8136 -4557 -4566 -4571 0
8136 4571 0
8136 4566 0
8136 4567 0
8136 4569 0
8136 4557 0
8136 4557 4566 0
8136 4557 4567 0
8136 4557 4569 0
8136 4558 0
8136 4558 4566 0
8136 4558 4567 0
8136 4558 4569 0
c (((aux1105 + aux1108 + aux1109)<=1)=tv=SATLiteral(8137))
-8137 4596 0
-8137 4590 4595 0
-8137 4591 0
-8137 4593 0
-8137 4581 4595 0
-8137 4581 4590 0
-8137 4581 4591 0
-8137 4581 4593 0
-8137 4582 0
-8137 4582 4590 0
-8137 4582 4591 0
-8137 4582 4593 0
8137 -4582 -4590 -4595 0
8137 -4581 -4591 -4595 0
8137 -4581 -4590 -4596 0
c ((1<=(aux1105 + aux1108 + aux1109))=tv=SATLiteral(8138))
-8138 -4581 -4590 -4595 0
8138 4595 0
8138 4590 0
8138 4591 0
8138 4593 0
8138 4581 0
8138 4581 4590 0
8138 4581 4591 0
8138 4581 4593 0
8138 4582 0
8138 4582 4590 0
8138 4582 4591 0
8138 4582 4593 0
c (((aux1111 + aux1114 + aux1115)<=1)=tv=SATLiteral(8139))
-8139 4620 0
-8139 4614 4619 0
-8139 4615 0
-8139 4617 0
-8139 4605 4619 0
-8139 4605 4614 0
-8139 4605 4615 0
-8139 4605 4617 0
-8139 4606 0
-8139 4606 4614 0
-8139 4606 4615 0
-8139 4606 4617 0
8139 -4606 -4614 -4619 0
8139 -4605 -4615 -4619 0
8139 -4605 -4614 -4620 0
c ((1<=(aux1111 + aux1114 + aux1115))=tv=SATLiteral(8140))
-8140 -4605 -4614 -4619 0
8140 4619 0
8140 4614 0
8140 4615 0
8140 4617 0
8140 4605 0
8140 4605 4614 0
8140 4605 4615 0
8140 4605 4617 0
8140 4606 0
8140 4606 4614 0
8140 4606 4615 0
8140 4606 4617 0
c (((aux1117 + aux1120 + aux1121)<=1)=tv=SATLiteral(8141))
-8141 4644 0
-8141 4638 4643 0
-8141 4639 0
-8141 4641 0
-8141 4629 4643 0
-8141 4629 4638 0
-8141 4629 4639 0
-8141 4629 4641 0
-8141 4630 0
-8141 4630 4638 0
-8141 4630 4639 0
-8141 4630 4641 0
8141 -4630 -4638 -4643 0
8141 -4629 -4639 -4643 0
8141 -4629 -4638 -4644 0
c ((1<=(aux1117 + aux1120 + aux1121))=tv=SATLiteral(8142))
-8142 -4629 -4638 -4643 0
8142 4643 0
8142 4638 0
8142 4639 0
8142 4641 0
8142 4629 0
8142 4629 4638 0
8142 4629 4639 0
8142 4629 4641 0
8142 4630 0
8142 4630 4638 0
8142 4630 4639 0
8142 4630 4641 0
c (((aux1123 + aux1126 + aux1127)<=1)=tv=SATLiteral(8143))
-8143 4668 0
-8143 4662 4667 0
-8143 4663 0
-8143 4665 0
-8143 4653 4667 0
-8143 4653 4662 0
-8143 4653 4663 0
-8143 4653 4665 0
-8143 4654 0
-8143 4654 4662 0
-8143 4654 4663 0
-8143 4654 4665 0
8143 -4654 -4662 -4667 0
8143 -4653 -4663 -4667 0
8143 -4653 -4662 -4668 0
c ((1<=(aux1123 + aux1126 + aux1127))=tv=SATLiteral(8144))
-8144 -4653 -4662 -4667 0
8144 4667 0
8144 4662 0
8144 4663 0
8144 4665 0
8144 4653 0
8144 4653 4662 0
8144 4653 4663 0
8144 4653 4665 0
8144 4654 0
8144 4654 4662 0
8144 4654 4663 0
8144 4654 4665 0
c (((aux1129 + aux1132 + aux1133)<=1)=tv=SATLiteral(8145))
-8145 4692 0
-8145 4686 4691 0
-8145 4687 0
-8145 4689 0
-8145 4677 4691 0
-8145 4677 4686 0
-8145 4677 4687 0
-8145 4677 4689 0
-8145 4678 0
-8145 4678 4686 0
-8145 4678 4687 0
-8145 4678 4689 0
8145 -4678 -4686 -4691 0
8145 -4677 -4687 -4691 0
8145 -4677 -4686 -4692 0
c ((1<=(aux1129 + aux1132 + aux1133))=tv=SATLiteral(8146))
-8146 -4677 -4686 -4691 0
8146 4691 0
8146 4686 0
8146 4687 0
8146 4689 0
8146 4677 0
8146 4677 4686 0
8146 4677 4687 0
8146 4677 4689 0
8146 4678 0
8146 4678 4686 0
8146 4678 4687 0
8146 4678 4689 0
c (((aux1135 + aux1138 + aux1139)<=1)=tv=SATLiteral(8147))
-8147 4716 0
-8147 4710 4715 0
-8147 4711 0
-8147 4713 0
-8147 4701 4715 0
-8147 4701 4710 0
-8147 4701 4711 0
-8147 4701 4713 0
-8147 4702 0
-8147 4702 4710 0
-8147 4702 4711 0
-8147 4702 4713 0
8147 -4702 -4710 -4715 0
8147 -4701 -4711 -4715 0
8147 -4701 -4710 -4716 0
c ((1<=(aux1135 + aux1138 + aux1139))=tv=SATLiteral(8148))
-8148 -4701 -4710 -4715 0
8148 4715 0
8148 4710 0
8148 4711 0
8148 4713 0
8148 4701 0
8148 4701 4710 0
8148 4701 4711 0
8148 4701 4713 0
8148 4702 0
8148 4702 4710 0
8148 4702 4711 0
8148 4702 4713 0
c (((aux1141 + aux1144 + aux1145)<=1)=tv=SATLiteral(8149))
-8149 4740 0
-8149 4734 4739 0
-8149 4735 0
-8149 4737 0
-8149 4725 4739 0
-8149 4725 4734 0
-8149 4725 4735 0
-8149 4725 4737 0
-8149 4726 0
-8149 4726 4734 0
-8149 4726 4735 0
-8149 4726 4737 0
8149 -4726 -4734 -4739 0
8149 -4725 -4735 -4739 0
8149 -4725 -4734 -4740 0
c ((1<=(aux1141 + aux1144 + aux1145))=tv=SATLiteral(8150))
-8150 -4725 -4734 -4739 0
8150 4739 0
8150 4734 0
8150 4735 0
8150 4737 0
8150 4725 0
8150 4725 4734 0
8150 4725 4735 0
8150 4725 4737 0
8150 4726 0
8150 4726 4734 0
8150 4726 4735 0
8150 4726 4737 0
c (((aux1147 + aux1150 + aux1151)<=1)=tv=SATLiteral(8151))
-8151 4764 0
-8151 4758 4763 0
-8151 4759 0
-8151 4761 0
-8151 4749 4763 0
-8151 4749 4758 0
-8151 4749 4759 0
-8151 4749 4761 0
-8151 4750 0
-8151 4750 4758 0
-8151 4750 4759 0
-8151 4750 4761 0
8151 -4750 -4758 -4763 0
8151 -4749 -4759 -4763 0
8151 -4749 -4758 -4764 0
c ((1<=(aux1147 + aux1150 + aux1151))=tv=SATLiteral(8152))
-8152 -4749 -4758 -4763 0
8152 4763 0
8152 4758 0
8152 4759 0
8152 4761 0
8152 4749 0
8152 4749 4758 0
8152 4749 4759 0
8152 4749 4761 0
8152 4750 0
8152 4750 4758 0
8152 4750 4759 0
8152 4750 4761 0
c (((aux1153 + aux1156 + aux1157)<=1)=tv=SATLiteral(8153))
-8153 4788 0
-8153 4782 4787 0
-8153 4783 0
-8153 4785 0
-8153 4773 4787 0
-8153 4773 4782 0
-8153 4773 4783 0
-8153 4773 4785 0
-8153 4774 0
-8153 4774 4782 0
-8153 4774 4783 0
-8153 4774 4785 0
8153 -4774 -4782 -4787 0
8153 -4773 -4783 -4787 0
8153 -4773 -4782 -4788 0
c ((1<=(aux1153 + aux1156 + aux1157))=tv=SATLiteral(8154))
-8154 -4773 -4782 -4787 0
8154 4787 0
8154 4782 0
8154 4783 0
8154 4785 0
8154 4773 0
8154 4773 4782 0
8154 4773 4783 0
8154 4773 4785 0
8154 4774 0
8154 4774 4782 0
8154 4774 4783 0
8154 4774 4785 0
c (((aux1159 + aux1162 + aux1163)<=1)=tv=SATLiteral(8155))
-8155 4812 0
-8155 4806 4811 0
-8155 4807 0
-8155 4809 0
-8155 4797 4811 0
-8155 4797 4806 0
-8155 4797 4807 0
-8155 4797 4809 0
-8155 4798 0
-8155 4798 4806 0
-8155 4798 4807 0
-8155 4798 4809 0
8155 -4798 -4806 -4811 0
8155 -4797 -4807 -4811 0
8155 -4797 -4806 -4812 0
c ((1<=(aux1159 + aux1162 + aux1163))=tv=SATLiteral(8156))
-8156 -4797 -4806 -4811 0
8156 4811 0
8156 4806 0
8156 4807 0
8156 4809 0
8156 4797 0
8156 4797 4806 0
8156 4797 4807 0
8156 4797 4809 0
8156 4798 0
8156 4798 4806 0
8156 4798 4807 0
8156 4798 4809 0
c (((aux1165 + aux1168 + aux1169)<=1)=tv=SATLiteral(8157))
-8157 4836 0
-8157 4830 4835 0
-8157 4831 0
-8157 4833 0
-8157 4821 4835 0
-8157 4821 4830 0
-8157 4821 4831 0
-8157 4821 4833 0
-8157 4822 0
-8157 4822 4830 0
-8157 4822 4831 0
-8157 4822 4833 0
8157 -4822 -4830 -4835 0
8157 -4821 -4831 -4835 0
8157 -4821 -4830 -4836 0
c ((1<=(aux1165 + aux1168 + aux1169))=tv=SATLiteral(8158))
-8158 -4821 -4830 -4835 0
8158 4835 0
8158 4830 0
8158 4831 0
8158 4833 0
8158 4821 0
8158 4821 4830 0
8158 4821 4831 0
8158 4821 4833 0
8158 4822 0
8158 4822 4830 0
8158 4822 4831 0
8158 4822 4833 0
c (((aux1171 + aux1174 + aux1175)<=1)=tv=SATLiteral(8159))
-8159 4860 0
-8159 4854 4859 0
-8159 4855 0
-8159 4857 0
-8159 4845 4859 0
-8159 4845 4854 0
-8159 4845 4855 0
-8159 4845 4857 0
-8159 4846 0
-8159 4846 4854 0
-8159 4846 4855 0
-8159 4846 4857 0
8159 -4846 -4854 -4859 0
8159 -4845 -4855 -4859 0
8159 -4845 -4854 -4860 0
c ((1<=(aux1171 + aux1174 + aux1175))=tv=SATLiteral(8160))
-8160 -4845 -4854 -4859 0
8160 4859 0
8160 4854 0
8160 4855 0
8160 4857 0
8160 4845 0
8160 4845 4854 0
8160 4845 4855 0
8160 4845 4857 0
8160 4846 0
8160 4846 4854 0
8160 4846 4855 0
8160 4846 4857 0
c (((aux1177 + aux1180 + aux1181)<=1)=tv=SATLiteral(8161))
-8161 4884 0
-8161 4878 4883 0
-8161 4879 0
-8161 4881 0
-8161 4869 4883 0
-8161 4869 4878 0
-8161 4869 4879 0
-8161 4869 4881 0
-8161 4870 0
-8161 4870 4878 0
-8161 4870 4879 0
-8161 4870 4881 0
8161 -4870 -4878 -4883 0
8161 -4869 -4879 -4883 0
8161 -4869 -4878 -4884 0
c ((1<=(aux1177 + aux1180 + aux1181))=tv=SATLiteral(8162))
-8162 -4869 -4878 -4883 0
8162 4883 0
8162 4878 0
8162 4879 0
8162 4881 0
8162 4869 0
8162 4869 4878 0
8162 4869 4879 0
8162 4869 4881 0
8162 4870 0
8162 4870 4878 0
8162 4870 4879 0
8162 4870 4881 0
c (((aux1183 + aux1186 + aux1187)<=1)=tv=SATLiteral(8163))
-8163 4908 0
-8163 4902 4907 0
-8163 4903 0
-8163 4905 0
-8163 4893 4907 0
-8163 4893 4902 0
-8163 4893 4903 0
-8163 4893 4905 0
-8163 4894 0
-8163 4894 4902 0
-8163 4894 4903 0
-8163 4894 4905 0
8163 -4894 -4902 -4907 0
8163 -4893 -4903 -4907 0
8163 -4893 -4902 -4908 0
c ((1<=(aux1183 + aux1186 + aux1187))=tv=SATLiteral(8164))
-8164 -4893 -4902 -4907 0
8164 4907 0
8164 4902 0
8164 4903 0
8164 4905 0
8164 4893 0
8164 4893 4902 0
8164 4893 4903 0
8164 4893 4905 0
8164 4894 0
8164 4894 4902 0
8164 4894 4903 0
8164 4894 4905 0
c (((aux1189 + aux1192 + aux1193)<=1)=tv=SATLiteral(8165))
-8165 4932 0
-8165 4926 4931 0
-8165 4927 0
-8165 4929 0
-8165 4917 4931 0
-8165 4917 4926 0
-8165 4917 4927 0
-8165 4917 4929 0
-8165 4918 0
-8165 4918 4926 0
-8165 4918 4927 0
-8165 4918 4929 0
8165 -4918 -4926 -4931 0
8165 -4917 -4927 -4931 0
8165 -4917 -4926 -4932 0
c ((1<=(aux1189 + aux1192 + aux1193))=tv=SATLiteral(8166))
-8166 -4917 -4926 -4931 0
8166 4931 0
8166 4926 0
8166 4927 0
8166 4929 0
8166 4917 0
8166 4917 4926 0
8166 4917 4927 0
8166 4917 4929 0
8166 4918 0
8166 4918 4926 0
8166 4918 4927 0
8166 4918 4929 0
c (((aux1195 + aux1198 + aux1199)<=1)=tv=SATLiteral(8167))
-8167 4956 0
-8167 4950 4955 0
-8167 4951 0
-8167 4953 0
-8167 4941 4955 0
-8167 4941 4950 0
-8167 4941 4951 0
-8167 4941 4953 0
-8167 4942 0
-8167 4942 4950 0
-8167 4942 4951 0
-8167 4942 4953 0
8167 -4942 -4950 -4955 0
8167 -4941 -4951 -4955 0
8167 -4941 -4950 -4956 0
c ((1<=(aux1195 + aux1198 + aux1199))=tv=SATLiteral(8168))
-8168 -4941 -4950 -4955 0
8168 4955 0
8168 4950 0
8168 4951 0
8168 4953 0
8168 4941 0
8168 4941 4950 0
8168 4941 4951 0
8168 4941 4953 0
8168 4942 0
8168 4942 4950 0
8168 4942 4951 0
8168 4942 4953 0
c (((aux1201 + aux1204 + aux1205)<=1)=tv=SATLiteral(8169))
-8169 4980 0
-8169 4974 4979 0
-8169 4975 0
-8169 4977 0
-8169 4965 4979 0
-8169 4965 4974 0
-8169 4965 4975 0
-8169 4965 4977 0
-8169 4966 0
-8169 4966 4974 0
-8169 4966 4975 0
-8169 4966 4977 0
8169 -4966 -4974 -4979 0
8169 -4965 -4975 -4979 0
8169 -4965 -4974 -4980 0
c ((1<=(aux1201 + aux1204 + aux1205))=tv=SATLiteral(8170))
-8170 -4965 -4974 -4979 0
8170 4979 0
8170 4974 0
8170 4975 0
8170 4977 0
8170 4965 0
8170 4965 4974 0
8170 4965 4975 0
8170 4965 4977 0
8170 4966 0
8170 4966 4974 0
8170 4966 4975 0
8170 4966 4977 0
c (((aux1207 + aux1210 + aux1211)<=1)=tv=SATLiteral(8171))
-8171 5004 0
-8171 4998 5003 0
-8171 4999 0
-8171 5001 0
-8171 4989 5003 0
-8171 4989 4998 0
-8171 4989 4999 0
-8171 4989 5001 0
-8171 4990 0
-8171 4990 4998 0
-8171 4990 4999 0
-8171 4990 5001 0
8171 -4990 -4998 -5003 0
8171 -4989 -4999 -5003 0
8171 -4989 -4998 -5004 0
c ((1<=(aux1207 + aux1210 + aux1211))=tv=SATLiteral(8172))
-8172 -4989 -4998 -5003 0
8172 5003 0
8172 4998 0
8172 4999 0
8172 5001 0
8172 4989 0
8172 4989 4998 0
8172 4989 4999 0
8172 4989 5001 0
8172 4990 0
8172 4990 4998 0
8172 4990 4999 0
8172 4990 5001 0
c (((aux1213 + aux1216 + aux1217)<=1)=tv=SATLiteral(8173))
-8173 5028 0
-8173 5022 5027 0
-8173 5023 0
-8173 5025 0
-8173 5013 5027 0
-8173 5013 5022 0
-8173 5013 5023 0
-8173 5013 5025 0
-8173 5014 0
-8173 5014 5022 0
-8173 5014 5023 0
-8173 5014 5025 0
8173 -5014 -5022 -5027 0
8173 -5013 -5023 -5027 0
8173 -5013 -5022 -5028 0
c ((1<=(aux1213 + aux1216 + aux1217))=tv=SATLiteral(8174))
-8174 -5013 -5022 -5027 0
8174 5027 0
8174 5022 0
8174 5023 0
8174 5025 0
8174 5013 0
8174 5013 5022 0
8174 5013 5023 0
8174 5013 5025 0
8174 5014 0
8174 5014 5022 0
8174 5014 5023 0
8174 5014 5025 0
c (((aux1219 + aux1222 + aux1223)<=1)=tv=SATLiteral(8175))
-8175 5052 0
-8175 5046 5051 0
-8175 5047 0
-8175 5049 0
-8175 5037 5051 0
-8175 5037 5046 0
-8175 5037 5047 0
-8175 5037 5049 0
-8175 5038 0
-8175 5038 5046 0
-8175 5038 5047 0
-8175 5038 5049 0
8175 -5038 -5046 -5051 0
8175 -5037 -5047 -5051 0
8175 -5037 -5046 -5052 0
c ((1<=(aux1219 + aux1222 + aux1223))=tv=SATLiteral(8176))
-8176 -5037 -5046 -5051 0
8176 5051 0
8176 5046 0
8176 5047 0
8176 5049 0
8176 5037 0
8176 5037 5046 0
8176 5037 5047 0
8176 5037 5049 0
8176 5038 0
8176 5038 5046 0
8176 5038 5047 0
8176 5038 5049 0
c (((aux1225 + aux1228 + aux1229)<=1)=tv=SATLiteral(8177))
-8177 5076 0
-8177 5070 5075 0
-8177 5071 0
-8177 5073 0
-8177 5061 5075 0
-8177 5061 5070 0
-8177 5061 5071 0
-8177 5061 5073 0
-8177 5062 0
-8177 5062 5070 0
-8177 5062 5071 0
-8177 5062 5073 0
8177 -5062 -5070 -5075 0
8177 -5061 -5071 -5075 0
8177 -5061 -5070 -5076 0
c ((1<=(aux1225 + aux1228 + aux1229))=tv=SATLiteral(8178))
-8178 -5061 -5070 -5075 0
8178 5075 0
8178 5070 0
8178 5071 0
8178 5073 0
8178 5061 0
8178 5061 5070 0
8178 5061 5071 0
8178 5061 5073 0
8178 5062 0
8178 5062 5070 0
8178 5062 5071 0
8178 5062 5073 0
c (((aux1231 + aux1234 + aux1235)<=1)=tv=SATLiteral(8179))
-8179 5100 0
-8179 5094 5099 0
-8179 5095 0
-8179 5097 0
-8179 5085 5099 0
-8179 5085 5094 0
-8179 5085 5095 0
-8179 5085 5097 0
-8179 5086 0
-8179 5086 5094 0
-8179 5086 5095 0
-8179 5086 5097 0
8179 -5086 -5094 -5099 0
8179 -5085 -5095 -5099 0
8179 -5085 -5094 -5100 0
c ((1<=(aux1231 + aux1234 + aux1235))=tv=SATLiteral(8180))
-8180 -5085 -5094 -5099 0
8180 5099 0
8180 5094 0
8180 5095 0
8180 5097 0
8180 5085 0
8180 5085 5094 0
8180 5085 5095 0
8180 5085 5097 0
8180 5086 0
8180 5086 5094 0
8180 5086 5095 0
8180 5086 5097 0
c (((aux1237 + aux1240 + aux1241)<=1)=tv=SATLiteral(8181))
-8181 5124 0
-8181 5118 5123 0
-8181 5119 0
-8181 5121 0
-8181 5109 5123 0
-8181 5109 5118 0
-8181 5109 5119 0
-8181 5109 5121 0
-8181 5110 0
-8181 5110 5118 0
-8181 5110 5119 0
-8181 5110 5121 0
8181 -5110 -5118 -5123 0
8181 -5109 -5119 -5123 0
8181 -5109 -5118 -5124 0
c ((1<=(aux1237 + aux1240 + aux1241))=tv=SATLiteral(8182))
-8182 -5109 -5118 -5123 0
8182 5123 0
8182 5118 0
8182 5119 0
8182 5121 0
8182 5109 0
8182 5109 5118 0
8182 5109 5119 0
8182 5109 5121 0
8182 5110 0
8182 5110 5118 0
8182 5110 5119 0
8182 5110 5121 0
c (((aux1243 + aux1246 + aux1247)<=1)=tv=SATLiteral(8183))
-8183 5148 0
-8183 5142 5147 0
-8183 5143 0
-8183 5145 0
-8183 5133 5147 0
-8183 5133 5142 0
-8183 5133 5143 0
-8183 5133 5145 0
-8183 5134 0
-8183 5134 5142 0
-8183 5134 5143 0
-8183 5134 5145 0
8183 -5134 -5142 -5147 0
8183 -5133 -5143 -5147 0
8183 -5133 -5142 -5148 0
c ((1<=(aux1243 + aux1246 + aux1247))=tv=SATLiteral(8184))
-8184 -5133 -5142 -5147 0
8184 5147 0
8184 5142 0
8184 5143 0
8184 5145 0
8184 5133 0
8184 5133 5142 0
8184 5133 5143 0
8184 5133 5145 0
8184 5134 0
8184 5134 5142 0
8184 5134 5143 0
8184 5134 5145 0
c (((aux1249 + aux1252 + aux1253)<=1)=tv=SATLiteral(8185))
-8185 5172 0
-8185 5166 5171 0
-8185 5167 0
-8185 5169 0
-8185 5157 5171 0
-8185 5157 5166 0
-8185 5157 5167 0
-8185 5157 5169 0
-8185 5158 0
-8185 5158 5166 0
-8185 5158 5167 0
-8185 5158 5169 0
8185 -5158 -5166 -5171 0
8185 -5157 -5167 -5171 0
8185 -5157 -5166 -5172 0
c ((1<=(aux1249 + aux1252 + aux1253))=tv=SATLiteral(8186))
-8186 -5157 -5166 -5171 0
8186 5171 0
8186 5166 0
8186 5167 0
8186 5169 0
8186 5157 0
8186 5157 5166 0
8186 5157 5167 0
8186 5157 5169 0
8186 5158 0
8186 5158 5166 0
8186 5158 5167 0
8186 5158 5169 0
c (((aux1255 + aux1258 + aux1259)<=1)=tv=SATLiteral(8187))
-8187 5196 0
-8187 5190 5195 0
-8187 5191 0
-8187 5193 0
-8187 5181 5195 0
-8187 5181 5190 0
-8187 5181 5191 0
-8187 5181 5193 0
-8187 5182 0
-8187 5182 5190 0
-8187 5182 5191 0
-8187 5182 5193 0
8187 -5182 -5190 -5195 0
8187 -5181 -5191 -5195 0
8187 -5181 -5190 -5196 0
c ((1<=(aux1255 + aux1258 + aux1259))=tv=SATLiteral(8188))
-8188 -5181 -5190 -5195 0
8188 5195 0
8188 5190 0
8188 5191 0
8188 5193 0
8188 5181 0
8188 5181 5190 0
8188 5181 5191 0
8188 5181 5193 0
8188 5182 0
8188 5182 5190 0
8188 5182 5191 0
8188 5182 5193 0
c (((aux1261 + aux1264 + aux1265)<=1)=tv=SATLiteral(8189))
-8189 5220 0
-8189 5214 5219 0
-8189 5215 0
-8189 5217 0
-8189 5205 5219 0
-8189 5205 5214 0
-8189 5205 5215 0
-8189 5205 5217 0
-8189 5206 0
-8189 5206 5214 0
-8189 5206 5215 0
-8189 5206 5217 0
8189 -5206 -5214 -5219 0
8189 -5205 -5215 -5219 0
8189 -5205 -5214 -5220 0
c ((1<=(aux1261 + aux1264 + aux1265))=tv=SATLiteral(8190))
-8190 -5205 -5214 -5219 0
8190 5219 0
8190 5214 0
8190 5215 0
8190 5217 0
8190 5205 0
8190 5205 5214 0
8190 5205 5215 0
8190 5205 5217 0
8190 5206 0
8190 5206 5214 0
8190 5206 5215 0
8190 5206 5217 0
c (((aux1267 + aux1270 + aux1271)<=1)=tv=SATLiteral(8191))
-8191 5244 0
-8191 5238 5243 0
-8191 5239 0
-8191 5241 0
-8191 5229 5243 0
-8191 5229 5238 0
-8191 5229 5239 0
-8191 5229 5241 0
-8191 5230 0
-8191 5230 5238 0
-8191 5230 5239 0
-8191 5230 5241 0
8191 -5230 -5238 -5243 0
8191 -5229 -5239 -5243 0
8191 -5229 -5238 -5244 0
c ((1<=(aux1267 + aux1270 + aux1271))=tv=SATLiteral(8192))
-8192 -5229 -5238 -5243 0
8192 5243 0
8192 5238 0
8192 5239 0
8192 5241 0
8192 5229 0
8192 5229 5238 0
8192 5229 5239 0
8192 5229 5241 0
8192 5230 0
8192 5230 5238 0
8192 5230 5239 0
8192 5230 5241 0
c (((aux1273 + aux1276 + aux1277)<=1)=tv=SATLiteral(8193))
-8193 5268 0
-8193 5262 5267 0
-8193 5263 0
-8193 5265 0
-8193 5253 5267 0
-8193 5253 5262 0
-8193 5253 5263 0
-8193 5253 5265 0
-8193 5254 0
-8193 5254 5262 0
-8193 5254 5263 0
-8193 5254 5265 0
8193 -5254 -5262 -5267 0
8193 -5253 -5263 -5267 0
8193 -5253 -5262 -5268 0
c ((1<=(aux1273 + aux1276 + aux1277))=tv=SATLiteral(8194))
-8194 -5253 -5262 -5267 0
8194 5267 0
8194 5262 0
8194 5263 0
8194 5265 0
8194 5253 0
8194 5253 5262 0
8194 5253 5263 0
8194 5253 5265 0
8194 5254 0
8194 5254 5262 0
8194 5254 5263 0
8194 5254 5265 0
c (((aux1279 + aux1282 + aux1283)<=1)=tv=SATLiteral(8195))
-8195 5292 0
-8195 5286 5291 0
-8195 5287 0
-8195 5289 0
-8195 5277 5291 0
-8195 5277 5286 0
-8195 5277 5287 0
-8195 5277 5289 0
-8195 5278 0
-8195 5278 5286 0
-8195 5278 5287 0
-8195 5278 5289 0
8195 -5278 -5286 -5291 0
8195 -5277 -5287 -5291 0
8195 -5277 -5286 -5292 0
c ((1<=(aux1279 + aux1282 + aux1283))=tv=SATLiteral(8196))
-8196 -5277 -5286 -5291 0
8196 5291 0
8196 5286 0
8196 5287 0
8196 5289 0
8196 5277 0
8196 5277 5286 0
8196 5277 5287 0
8196 5277 5289 0
8196 5278 0
8196 5278 5286 0
8196 5278 5287 0
8196 5278 5289 0
c (((aux1285 + aux1288 + aux1289)<=1)=tv=SATLiteral(8197))
-8197 5316 0
-8197 5310 5315 0
-8197 5311 0
-8197 5313 0
-8197 5301 5315 0
-8197 5301 5310 0
-8197 5301 5311 0
-8197 5301 5313 0
-8197 5302 0
-8197 5302 5310 0
-8197 5302 5311 0
-8197 5302 5313 0
8197 -5302 -5310 -5315 0
8197 -5301 -5311 -5315 0
8197 -5301 -5310 -5316 0
c ((1<=(aux1285 + aux1288 + aux1289))=tv=SATLiteral(8198))
-8198 -5301 -5310 -5315 0
8198 5315 0
8198 5310 0
8198 5311 0
8198 5313 0
8198 5301 0
8198 5301 5310 0
8198 5301 5311 0
8198 5301 5313 0
8198 5302 0
8198 5302 5310 0
8198 5302 5311 0
8198 5302 5313 0
c (((aux1291 + aux1294 + aux1295)<=1)=tv=SATLiteral(8199))
-8199 5340 0
-8199 5334 5339 0
-8199 5335 0
-8199 5337 0
-8199 5325 5339 0
-8199 5325 5334 0
-8199 5325 5335 0
-8199 5325 5337 0
-8199 5326 0
-8199 5326 5334 0
-8199 5326 5335 0
-8199 5326 5337 0
8199 -5326 -5334 -5339 0
8199 -5325 -5335 -5339 0
8199 -5325 -5334 -5340 0
c ((1<=(aux1291 + aux1294 + aux1295))=tv=SATLiteral(8200))
-8200 -5325 -5334 -5339 0
8200 5339 0
8200 5334 0
8200 5335 0
8200 5337 0
8200 5325 0
8200 5325 5334 0
8200 5325 5335 0
8200 5325 5337 0
8200 5326 0
8200 5326 5334 0
8200 5326 5335 0
8200 5326 5337 0
c (((aux1297 + aux1300 + aux1301)<=1)=tv=SATLiteral(8201))
-8201 5364 0
-8201 5358 5363 0
-8201 5359 0
-8201 5361 0
-8201 5349 5363 0
-8201 5349 5358 0
-8201 5349 5359 0
-8201 5349 5361 0
-8201 5350 0
-8201 5350 5358 0
-8201 5350 5359 0
-8201 5350 5361 0
8201 -5350 -5358 -5363 0
8201 -5349 -5359 -5363 0
8201 -5349 -5358 -5364 0
c ((1<=(aux1297 + aux1300 + aux1301))=tv=SATLiteral(8202))
-8202 -5349 -5358 -5363 0
8202 5363 0
8202 5358 0
8202 5359 0
8202 5361 0
8202 5349 0
8202 5349 5358 0
8202 5349 5359 0
8202 5349 5361 0
8202 5350 0
8202 5350 5358 0
8202 5350 5359 0
8202 5350 5361 0
c (((aux1303 + aux1306 + aux1307)<=1)=tv=SATLiteral(8203))
-8203 5388 0
-8203 5382 5387 0
-8203 5383 0
-8203 5385 0
-8203 5373 5387 0
-8203 5373 5382 0
-8203 5373 5383 0
-8203 5373 5385 0
-8203 5374 0
-8203 5374 5382 0
-8203 5374 5383 0
-8203 5374 5385 0
8203 -5374 -5382 -5387 0
8203 -5373 -5383 -5387 0
8203 -5373 -5382 -5388 0
c ((1<=(aux1303 + aux1306 + aux1307))=tv=SATLiteral(8204))
-8204 -5373 -5382 -5387 0
8204 5387 0
8204 5382 0
8204 5383 0
8204 5385 0
8204 5373 0
8204 5373 5382 0
8204 5373 5383 0
8204 5373 5385 0
8204 5374 0
8204 5374 5382 0
8204 5374 5383 0
8204 5374 5385 0
c (((aux1309 + aux1312 + aux1313)<=1)=tv=SATLiteral(8205))
-8205 5412 0
-8205 5406 5411 0
-8205 5407 0
-8205 5409 0
-8205 5397 5411 0
-8205 5397 5406 0
-8205 5397 5407 0
-8205 5397 5409 0
-8205 5398 0
-8205 5398 5406 0
-8205 5398 5407 0
-8205 5398 5409 0
8205 -5398 -5406 -5411 0
8205 -5397 -5407 -5411 0
8205 -5397 -5406 -5412 0
c ((1<=(aux1309 + aux1312 + aux1313))=tv=SATLiteral(8206))
-8206 -5397 -5406 -5411 0
8206 5411 0
8206 5406 0
8206 5407 0
8206 5409 0
8206 5397 0
8206 5397 5406 0
8206 5397 5407 0
8206 5397 5409 0
8206 5398 0
8206 5398 5406 0
8206 5398 5407 0
8206 5398 5409 0
c (((aux1315 + aux1318 + aux1319)<=1)=tv=SATLiteral(8207))
-8207 5436 0
-8207 5430 5435 0
-8207 5431 0
-8207 5433 0
-8207 5421 5435 0
-8207 5421 5430 0
-8207 5421 5431 0
-8207 5421 5433 0
-8207 5422 0
-8207 5422 5430 0
-8207 5422 5431 0
-8207 5422 5433 0
8207 -5422 -5430 -5435 0
8207 -5421 -5431 -5435 0
8207 -5421 -5430 -5436 0
c ((1<=(aux1315 + aux1318 + aux1319))=tv=SATLiteral(8208))
-8208 -5421 -5430 -5435 0
8208 5435 0
8208 5430 0
8208 5431 0
8208 5433 0
8208 5421 0
8208 5421 5430 0
8208 5421 5431 0
8208 5421 5433 0
8208 5422 0
8208 5422 5430 0
8208 5422 5431 0
8208 5422 5433 0
c (((aux1321 + aux1324 + aux1325)<=1)=tv=SATLiteral(8209))
-8209 5460 0
-8209 5454 5459 0
-8209 5455 0
-8209 5457 0
-8209 5445 5459 0
-8209 5445 5454 0
-8209 5445 5455 0
-8209 5445 5457 0
-8209 5446 0
-8209 5446 5454 0
-8209 5446 5455 0
-8209 5446 5457 0
8209 -5446 -5454 -5459 0
8209 -5445 -5455 -5459 0
8209 -5445 -5454 -5460 0
c ((1<=(aux1321 + aux1324 + aux1325))=tv=SATLiteral(8210))
-8210 -5445 -5454 -5459 0
8210 5459 0
8210 5454 0
8210 5455 0
8210 5457 0
8210 5445 0
8210 5445 5454 0
8210 5445 5455 0
8210 5445 5457 0
8210 5446 0
8210 5446 5454 0
8210 5446 5455 0
8210 5446 5457 0
c (((aux1327 + aux1330 + aux1331)<=1)=tv=SATLiteral(8211))
-8211 5484 0
-8211 5478 5483 0
-8211 5479 0
-8211 5481 0
-8211 5469 5483 0
-8211 5469 5478 0
-8211 5469 5479 0
-8211 5469 5481 0
-8211 5470 0
-8211 5470 5478 0
-8211 5470 5479 0
-8211 5470 5481 0
8211 -5470 -5478 -5483 0
8211 -5469 -5479 -5483 0
8211 -5469 -5478 -5484 0
c ((1<=(aux1327 + aux1330 + aux1331))=tv=SATLiteral(8212))
-8212 -5469 -5478 -5483 0
8212 5483 0
8212 5478 0
8212 5479 0
8212 5481 0
8212 5469 0
8212 5469 5478 0
8212 5469 5479 0
8212 5469 5481 0
8212 5470 0
8212 5470 5478 0
8212 5470 5479 0
8212 5470 5481 0
c (((aux1333 + aux1336 + aux1337)<=1)=tv=SATLiteral(8213))
-8213 5508 0
-8213 5502 5507 0
-8213 5503 0
-8213 5505 0
-8213 5493 5507 0
-8213 5493 5502 0
-8213 5493 5503 0
-8213 5493 5505 0
-8213 5494 0
-8213 5494 5502 0
-8213 5494 5503 0
-8213 5494 5505 0
8213 -5494 -5502 -5507 0
8213 -5493 -5503 -5507 0
8213 -5493 -5502 -5508 0
c ((1<=(aux1333 + aux1336 + aux1337))=tv=SATLiteral(8214))
-8214 -5493 -5502 -5507 0
8214 5507 0
8214 5502 0
8214 5503 0
8214 5505 0
8214 5493 0
8214 5493 5502 0
8214 5493 5503 0
8214 5493 5505 0
8214 5494 0
8214 5494 5502 0
8214 5494 5503 0
8214 5494 5505 0
c (((aux1339 + aux1342 + aux1343)<=1)=tv=SATLiteral(8215))
-8215 5532 0
-8215 5526 5531 0
-8215 5527 0
-8215 5529 0
-8215 5517 5531 0
-8215 5517 5526 0
-8215 5517 5527 0
-8215 5517 5529 0
-8215 5518 0
-8215 5518 5526 0
-8215 5518 5527 0
-8215 5518 5529 0
8215 -5518 -5526 -5531 0
8215 -5517 -5527 -5531 0
8215 -5517 -5526 -5532 0
c ((1<=(aux1339 + aux1342 + aux1343))=tv=SATLiteral(8216))
-8216 -5517 -5526 -5531 0
8216 5531 0
8216 5526 0
8216 5527 0
8216 5529 0
8216 5517 0
8216 5517 5526 0
8216 5517 5527 0
8216 5517 5529 0
8216 5518 0
8216 5518 5526 0
8216 5518 5527 0
8216 5518 5529 0
c (((aux1345 + aux1348 + aux1349)<=1)=tv=SATLiteral(8217))
-8217 5556 0
-8217 5550 5555 0
-8217 5551 0
-8217 5553 0
-8217 5541 5555 0
-8217 5541 5550 0
-8217 5541 5551 0
-8217 5541 5553 0
-8217 5542 0
-8217 5542 5550 0
-8217 5542 5551 0
-8217 5542 5553 0
8217 -5542 -5550 -5555 0
8217 -5541 -5551 -5555 0
8217 -5541 -5550 -5556 0
c ((1<=(aux1345 + aux1348 + aux1349))=tv=SATLiteral(8218))
-8218 -5541 -5550 -5555 0
8218 5555 0
8218 5550 0
8218 5551 0
8218 5553 0
8218 5541 0
8218 5541 5550 0
8218 5541 5551 0
8218 5541 5553 0
8218 5542 0
8218 5542 5550 0
8218 5542 5551 0
8218 5542 5553 0
c (((aux1351 + aux1354 + aux1355)<=1)=tv=SATLiteral(8219))
-8219 5580 0
-8219 5574 5579 0
-8219 5575 0
-8219 5577 0
-8219 5565 5579 0
-8219 5565 5574 0
-8219 5565 5575 0
-8219 5565 5577 0
-8219 5566 0
-8219 5566 5574 0
-8219 5566 5575 0
-8219 5566 5577 0
8219 -5566 -5574 -5579 0
8219 -5565 -5575 -5579 0
8219 -5565 -5574 -5580 0
c ((1<=(aux1351 + aux1354 + aux1355))=tv=SATLiteral(8220))
-8220 -5565 -5574 -5579 0
8220 5579 0
8220 5574 0
8220 5575 0
8220 5577 0
8220 5565 0
8220 5565 5574 0
8220 5565 5575 0
8220 5565 5577 0
8220 5566 0
8220 5566 5574 0
8220 5566 5575 0
8220 5566 5577 0
c (((aux1357 + aux1360 + aux1361)<=1)=tv=SATLiteral(8221))
-8221 5604 0
-8221 5598 5603 0
-8221 5599 0
-8221 5601 0
-8221 5589 5603 0
-8221 5589 5598 0
-8221 5589 5599 0
-8221 5589 5601 0
-8221 5590 0
-8221 5590 5598 0
-8221 5590 5599 0
-8221 5590 5601 0
8221 -5590 -5598 -5603 0
8221 -5589 -5599 -5603 0
8221 -5589 -5598 -5604 0
c ((1<=(aux1357 + aux1360 + aux1361))=tv=SATLiteral(8222))
-8222 -5589 -5598 -5603 0
8222 5603 0
8222 5598 0
8222 5599 0
8222 5601 0
8222 5589 0
8222 5589 5598 0
8222 5589 5599 0
8222 5589 5601 0
8222 5590 0
8222 5590 5598 0
8222 5590 5599 0
8222 5590 5601 0
c (((aux1363 + aux1366 + aux1367)<=1)=tv=SATLiteral(8223))
-8223 5628 0
-8223 5622 5627 0
-8223 5623 0
-8223 5625 0
-8223 5613 5627 0
-8223 5613 5622 0
-8223 5613 5623 0
-8223 5613 5625 0
-8223 5614 0
-8223 5614 5622 0
-8223 5614 5623 0
-8223 5614 5625 0
8223 -5614 -5622 -5627 0
8223 -5613 -5623 -5627 0
8223 -5613 -5622 -5628 0
c ((1<=(aux1363 + aux1366 + aux1367))=tv=SATLiteral(8224))
-8224 -5613 -5622 -5627 0
8224 5627 0
8224 5622 0
8224 5623 0
8224 5625 0
8224 5613 0
8224 5613 5622 0
8224 5613 5623 0
8224 5613 5625 0
8224 5614 0
8224 5614 5622 0
8224 5614 5623 0
8224 5614 5625 0
c (((aux1369 + aux1372 + aux1373)<=1)=tv=SATLiteral(8225))
-8225 5652 0
-8225 5646 5651 0
-8225 5647 0
-8225 5649 0
-8225 5637 5651 0
-8225 5637 5646 0
-8225 5637 5647 0
-8225 5637 5649 0
-8225 5638 0
-8225 5638 5646 0
-8225 5638 5647 0
-8225 5638 5649 0
8225 -5638 -5646 -5651 0
8225 -5637 -5647 -5651 0
8225 -5637 -5646 -5652 0
c ((1<=(aux1369 + aux1372 + aux1373))=tv=SATLiteral(8226))
-8226 -5637 -5646 -5651 0
8226 5651 0
8226 5646 0
8226 5647 0
8226 5649 0
8226 5637 0
8226 5637 5646 0
8226 5637 5647 0
8226 5637 5649 0
8226 5638 0
8226 5638 5646 0
8226 5638 5647 0
8226 5638 5649 0
c (((aux1375 + aux1378 + aux1379)<=1)=tv=SATLiteral(8227))
-8227 5676 0
-8227 5670 5675 0
-8227 5671 0
-8227 5673 0
-8227 5661 5675 0
-8227 5661 5670 0
-8227 5661 5671 0
-8227 5661 5673 0
-8227 5662 0
-8227 5662 5670 0
-8227 5662 5671 0
-8227 5662 5673 0
8227 -5662 -5670 -5675 0
8227 -5661 -5671 -5675 0
8227 -5661 -5670 -5676 0
c ((1<=(aux1375 + aux1378 + aux1379))=tv=SATLiteral(8228))
-8228 -5661 -5670 -5675 0
8228 5675 0
8228 5670 0
8228 5671 0
8228 5673 0
8228 5661 0
8228 5661 5670 0
8228 5661 5671 0
8228 5661 5673 0
8228 5662 0
8228 5662 5670 0
8228 5662 5671 0
8228 5662 5673 0
c (((aux1381 + aux1384 + aux1385)<=1)=tv=SATLiteral(8229))
-8229 5700 0
-8229 5694 5699 0
-8229 5695 0
-8229 5697 0
-8229 5685 5699 0
-8229 5685 5694 0
-8229 5685 5695 0
-8229 5685 5697 0
-8229 5686 0
-8229 5686 5694 0
-8229 5686 5695 0
-8229 5686 5697 0
8229 -5686 -5694 -5699 0
8229 -5685 -5695 -5699 0
8229 -5685 -5694 -5700 0
c ((1<=(aux1381 + aux1384 + aux1385))=tv=SATLiteral(8230))
-8230 -5685 -5694 -5699 0
8230 5699 0
8230 5694 0
8230 5695 0
8230 5697 0
8230 5685 0
8230 5685 5694 0
8230 5685 5695 0
8230 5685 5697 0
8230 5686 0
8230 5686 5694 0
8230 5686 5695 0
8230 5686 5697 0
c (((aux1387 + aux1390 + aux1391)<=1)=tv=SATLiteral(8231))
-8231 5724 0
-8231 5718 5723 0
-8231 5719 0
-8231 5721 0
-8231 5709 5723 0
-8231 5709 5718 0
-8231 5709 5719 0
-8231 5709 5721 0
-8231 5710 0
-8231 5710 5718 0
-8231 5710 5719 0
-8231 5710 5721 0
8231 -5710 -5718 -5723 0
8231 -5709 -5719 -5723 0
8231 -5709 -5718 -5724 0
c ((1<=(aux1387 + aux1390 + aux1391))=tv=SATLiteral(8232))
-8232 -5709 -5718 -5723 0
8232 5723 0
8232 5718 0
8232 5719 0
8232 5721 0
8232 5709 0
8232 5709 5718 0
8232 5709 5719 0
8232 5709 5721 0
8232 5710 0
8232 5710 5718 0
8232 5710 5719 0
8232 5710 5721 0
c (((aux1393 + aux1396 + aux1397)<=1)=tv=SATLiteral(8233))
-8233 5748 0
-8233 5742 5747 0
-8233 5743 0
-8233 5745 0
-8233 5733 5747 0
-8233 5733 5742 0
-8233 5733 5743 0
-8233 5733 5745 0
-8233 5734 0
-8233 5734 5742 0
-8233 5734 5743 0
-8233 5734 5745 0
8233 -5734 -5742 -5747 0
8233 -5733 -5743 -5747 0
8233 -5733 -5742 -5748 0
c ((1<=(aux1393 + aux1396 + aux1397))=tv=SATLiteral(8234))
-8234 -5733 -5742 -5747 0
8234 5747 0
8234 5742 0
8234 5743 0
8234 5745 0
8234 5733 0
8234 5733 5742 0
8234 5733 5743 0
8234 5733 5745 0
8234 5734 0
8234 5734 5742 0
8234 5734 5743 0
8234 5734 5745 0
c (((aux1399 + aux1402 + aux1403)<=1)=tv=SATLiteral(8235))
-8235 5772 0
-8235 5766 5771 0
-8235 5767 0
-8235 5769 0
-8235 5757 5771 0
-8235 5757 5766 0
-8235 5757 5767 0
-8235 5757 5769 0
-8235 5758 0
-8235 5758 5766 0
-8235 5758 5767 0
-8235 5758 5769 0
8235 -5758 -5766 -5771 0
8235 -5757 -5767 -5771 0
8235 -5757 -5766 -5772 0
c ((1<=(aux1399 + aux1402 + aux1403))=tv=SATLiteral(8236))
-8236 -5757 -5766 -5771 0
8236 5771 0
8236 5766 0
8236 5767 0
8236 5769 0
8236 5757 0
8236 5757 5766 0
8236 5757 5767 0
8236 5757 5769 0
8236 5758 0
8236 5758 5766 0
8236 5758 5767 0
8236 5758 5769 0
c (((aux1405 + aux1408 + aux1409)<=1)=tv=SATLiteral(8237))
-8237 5796 0
-8237 5790 5795 0
-8237 5791 0
-8237 5793 0
-8237 5781 5795 0
-8237 5781 5790 0
-8237 5781 5791 0
-8237 5781 5793 0
-8237 5782 0
-8237 5782 5790 0
-8237 5782 5791 0
-8237 5782 5793 0
8237 -5782 -5790 -5795 0
8237 -5781 -5791 -5795 0
8237 -5781 -5790 -5796 0
c ((1<=(aux1405 + aux1408 + aux1409))=tv=SATLiteral(8238))
-8238 -5781 -5790 -5795 0
8238 5795 0
8238 5790 0
8238 5791 0
8238 5793 0
8238 5781 0
8238 5781 5790 0
8238 5781 5791 0
8238 5781 5793 0
8238 5782 0
8238 5782 5790 0
8238 5782 5791 0
8238 5782 5793 0
c (((aux1411 + aux1414 + aux1415)<=1)=tv=SATLiteral(8239))
-8239 5820 0
-8239 5814 5819 0
-8239 5815 0
-8239 5817 0
-8239 5805 5819 0
-8239 5805 5814 0
-8239 5805 5815 0
-8239 5805 5817 0
-8239 5806 0
-8239 5806 5814 0
-8239 5806 5815 0
-8239 5806 5817 0
8239 -5806 -5814 -5819 0
8239 -5805 -5815 -5819 0
8239 -5805 -5814 -5820 0
c ((1<=(aux1411 + aux1414 + aux1415))=tv=SATLiteral(8240))
-8240 -5805 -5814 -5819 0
8240 5819 0
8240 5814 0
8240 5815 0
8240 5817 0
8240 5805 0
8240 5805 5814 0
8240 5805 5815 0
8240 5805 5817 0
8240 5806 0
8240 5806 5814 0
8240 5806 5815 0
8240 5806 5817 0
c (((aux1417 + aux1420 + aux1421)<=1)=tv=SATLiteral(8241))
-8241 5844 0
-8241 5838 5843 0
-8241 5839 0
-8241 5841 0
-8241 5829 5843 0
-8241 5829 5838 0
-8241 5829 5839 0
-8241 5829 5841 0
-8241 5830 0
-8241 5830 5838 0
-8241 5830 5839 0
-8241 5830 5841 0
8241 -5830 -5838 -5843 0
8241 -5829 -5839 -5843 0
8241 -5829 -5838 -5844 0
c ((1<=(aux1417 + aux1420 + aux1421))=tv=SATLiteral(8242))
-8242 -5829 -5838 -5843 0
8242 5843 0
8242 5838 0
8242 5839 0
8242 5841 0
8242 5829 0
8242 5829 5838 0
8242 5829 5839 0
8242 5829 5841 0
8242 5830 0
8242 5830 5838 0
8242 5830 5839 0
8242 5830 5841 0
c (((aux1423 + aux1426 + aux1427)<=1)=tv=SATLiteral(8243))
-8243 5868 0
-8243 5862 5867 0
-8243 5863 0
-8243 5865 0
-8243 5853 5867 0
-8243 5853 5862 0
-8243 5853 5863 0
-8243 5853 5865 0
-8243 5854 0
-8243 5854 5862 0
-8243 5854 5863 0
-8243 5854 5865 0
8243 -5854 -5862 -5867 0
8243 -5853 -5863 -5867 0
8243 -5853 -5862 -5868 0
c ((1<=(aux1423 + aux1426 + aux1427))=tv=SATLiteral(8244))
-8244 -5853 -5862 -5867 0
8244 5867 0
8244 5862 0
8244 5863 0
8244 5865 0
8244 5853 0
8244 5853 5862 0
8244 5853 5863 0
8244 5853 5865 0
8244 5854 0
8244 5854 5862 0
8244 5854 5863 0
8244 5854 5865 0
c (((aux1429 + aux1432 + aux1433)<=1)=tv=SATLiteral(8245))
-8245 5892 0
-8245 5886 5891 0
-8245 5887 0
-8245 5889 0
-8245 5877 5891 0
-8245 5877 5886 0
-8245 5877 5887 0
-8245 5877 5889 0
-8245 5878 0
-8245 5878 5886 0
-8245 5878 5887 0
-8245 5878 5889 0
8245 -5878 -5886 -5891 0
8245 -5877 -5887 -5891 0
8245 -5877 -5886 -5892 0
c ((1<=(aux1429 + aux1432 + aux1433))=tv=SATLiteral(8246))
-8246 -5877 -5886 -5891 0
8246 5891 0
8246 5886 0
8246 5887 0
8246 5889 0
8246 5877 0
8246 5877 5886 0
8246 5877 5887 0
8246 5877 5889 0
8246 5878 0
8246 5878 5886 0
8246 5878 5887 0
8246 5878 5889 0
c (((aux1435 + aux1438 + aux1439)<=1)=tv=SATLiteral(8247))
-8247 5916 0
-8247 5910 5915 0
-8247 5911 0
-8247 5913 0
-8247 5901 5915 0
-8247 5901 5910 0
-8247 5901 5911 0
-8247 5901 5913 0
-8247 5902 0
-8247 5902 5910 0
-8247 5902 5911 0
-8247 5902 5913 0
8247 -5902 -5910 -5915 0
8247 -5901 -5911 -5915 0
8247 -5901 -5910 -5916 0
c ((1<=(aux1435 + aux1438 + aux1439))=tv=SATLiteral(8248))
-8248 -5901 -5910 -5915 0
8248 5915 0
8248 5910 0
8248 5911 0
8248 5913 0
8248 5901 0
8248 5901 5910 0
8248 5901 5911 0
8248 5901 5913 0
8248 5902 0
8248 5902 5910 0
8248 5902 5911 0
8248 5902 5913 0
c (((aux1441 + aux1444 + aux1445)<=1)=tv=SATLiteral(8249))
-8249 5940 0
-8249 5934 5939 0
-8249 5935 0
-8249 5937 0
-8249 5925 5939 0
-8249 5925 5934 0
-8249 5925 5935 0
-8249 5925 5937 0
-8249 5926 0
-8249 5926 5934 0
-8249 5926 5935 0
-8249 5926 5937 0
8249 -5926 -5934 -5939 0
8249 -5925 -5935 -5939 0
8249 -5925 -5934 -5940 0
c ((1<=(aux1441 + aux1444 + aux1445))=tv=SATLiteral(8250))
-8250 -5925 -5934 -5939 0
8250 5939 0
8250 5934 0
8250 5935 0
8250 5937 0
8250 5925 0
8250 5925 5934 0
8250 5925 5935 0
8250 5925 5937 0
8250 5926 0
8250 5926 5934 0
8250 5926 5935 0
8250 5926 5937 0
c (((aux1447 + aux1450 + aux1451)<=1)=tv=SATLiteral(8251))
-8251 5964 0
-8251 5958 5963 0
-8251 5959 0
-8251 5961 0
-8251 5949 5963 0
-8251 5949 5958 0
-8251 5949 5959 0
-8251 5949 5961 0
-8251 5950 0
-8251 5950 5958 0
-8251 5950 5959 0
-8251 5950 5961 0
8251 -5950 -5958 -5963 0
8251 -5949 -5959 -5963 0
8251 -5949 -5958 -5964 0
c ((1<=(aux1447 + aux1450 + aux1451))=tv=SATLiteral(8252))
-8252 -5949 -5958 -5963 0
8252 5963 0
8252 5958 0
8252 5959 0
8252 5961 0
8252 5949 0
8252 5949 5958 0
8252 5949 5959 0
8252 5949 5961 0
8252 5950 0
8252 5950 5958 0
8252 5950 5959 0
8252 5950 5961 0
c (((aux1453 + aux1456 + aux1457)<=1)=tv=SATLiteral(8253))
-8253 5988 0
-8253 5982 5987 0
-8253 5983 0
-8253 5985 0
-8253 5973 5987 0
-8253 5973 5982 0
-8253 5973 5983 0
-8253 5973 5985 0
-8253 5974 0
-8253 5974 5982 0
-8253 5974 5983 0
-8253 5974 5985 0
8253 -5974 -5982 -5987 0
8253 -5973 -5983 -5987 0
8253 -5973 -5982 -5988 0
c ((1<=(aux1453 + aux1456 + aux1457))=tv=SATLiteral(8254))
-8254 -5973 -5982 -5987 0
8254 5987 0
8254 5982 0
8254 5983 0
8254 5985 0
8254 5973 0
8254 5973 5982 0
8254 5973 5983 0
8254 5973 5985 0
8254 5974 0
8254 5974 5982 0
8254 5974 5983 0
8254 5974 5985 0
c (((aux1459 + aux1462 + aux1463)<=1)=tv=SATLiteral(8255))
-8255 6012 0
-8255 6006 6011 0
-8255 6007 0
-8255 6009 0
-8255 5997 6011 0
-8255 5997 6006 0
-8255 5997 6007 0
-8255 5997 6009 0
-8255 5998 0
-8255 5998 6006 0
-8255 5998 6007 0
-8255 5998 6009 0
8255 -5998 -6006 -6011 0
8255 -5997 -6007 -6011 0
8255 -5997 -6006 -6012 0
c ((1<=(aux1459 + aux1462 + aux1463))=tv=SATLiteral(8256))
-8256 -5997 -6006 -6011 0
8256 6011 0
8256 6006 0
8256 6007 0
8256 6009 0
8256 5997 0
8256 5997 6006 0
8256 5997 6007 0
8256 5997 6009 0
8256 5998 0
8256 5998 6006 0
8256 5998 6007 0
8256 5998 6009 0
c (((aux1465 + aux1468 + aux1469)<=1)=tv=SATLiteral(8257))
-8257 6036 0
-8257 6030 6035 0
-8257 6031 0
-8257 6033 0
-8257 6021 6035 0
-8257 6021 6030 0
-8257 6021 6031 0
-8257 6021 6033 0
-8257 6022 0
-8257 6022 6030 0
-8257 6022 6031 0
-8257 6022 6033 0
8257 -6022 -6030 -6035 0
8257 -6021 -6031 -6035 0
8257 -6021 -6030 -6036 0
c ((1<=(aux1465 + aux1468 + aux1469))=tv=SATLiteral(8258))
-8258 -6021 -6030 -6035 0
8258 6035 0
8258 6030 0
8258 6031 0
8258 6033 0
8258 6021 0
8258 6021 6030 0
8258 6021 6031 0
8258 6021 6033 0
8258 6022 0
8258 6022 6030 0
8258 6022 6031 0
8258 6022 6033 0
c (((aux1471 + aux1474 + aux1475)<=1)=tv=SATLiteral(8259))
-8259 6060 0
-8259 6054 6059 0
-8259 6055 0
-8259 6057 0
-8259 6045 6059 0
-8259 6045 6054 0
-8259 6045 6055 0
-8259 6045 6057 0
-8259 6046 0
-8259 6046 6054 0
-8259 6046 6055 0
-8259 6046 6057 0
8259 -6046 -6054 -6059 0
8259 -6045 -6055 -6059 0
8259 -6045 -6054 -6060 0
c ((1<=(aux1471 + aux1474 + aux1475))=tv=SATLiteral(8260))
-8260 -6045 -6054 -6059 0
8260 6059 0
8260 6054 0
8260 6055 0
8260 6057 0
8260 6045 0
8260 6045 6054 0
8260 6045 6055 0
8260 6045 6057 0
8260 6046 0
8260 6046 6054 0
8260 6046 6055 0
8260 6046 6057 0
c (((aux1477 + aux1480 + aux1481)<=1)=tv=SATLiteral(8261))
-8261 6084 0
-8261 6078 6083 0
-8261 6079 0
-8261 6081 0
-8261 6069 6083 0
-8261 6069 6078 0
-8261 6069 6079 0
-8261 6069 6081 0
-8261 6070 0
-8261 6070 6078 0
-8261 6070 6079 0
-8261 6070 6081 0
8261 -6070 -6078 -6083 0
8261 -6069 -6079 -6083 0
8261 -6069 -6078 -6084 0
c ((1<=(aux1477 + aux1480 + aux1481))=tv=SATLiteral(8262))
-8262 -6069 -6078 -6083 0
8262 6083 0
8262 6078 0
8262 6079 0
8262 6081 0
8262 6069 0
8262 6069 6078 0
8262 6069 6079 0
8262 6069 6081 0
8262 6070 0
8262 6070 6078 0
8262 6070 6079 0
8262 6070 6081 0
c (((aux1483 + aux1486 + aux1487)<=1)=tv=SATLiteral(8263))
-8263 6108 0
-8263 6102 6107 0
-8263 6103 0
-8263 6105 0
-8263 6093 6107 0
-8263 6093 6102 0
-8263 6093 6103 0
-8263 6093 6105 0
-8263 6094 0
-8263 6094 6102 0
-8263 6094 6103 0
-8263 6094 6105 0
8263 -6094 -6102 -6107 0
8263 -6093 -6103 -6107 0
8263 -6093 -6102 -6108 0
c ((1<=(aux1483 + aux1486 + aux1487))=tv=SATLiteral(8264))
-8264 -6093 -6102 -6107 0
8264 6107 0
8264 6102 0
8264 6103 0
8264 6105 0
8264 6093 0
8264 6093 6102 0
8264 6093 6103 0
8264 6093 6105 0
8264 6094 0
8264 6094 6102 0
8264 6094 6103 0
8264 6094 6105 0
c (((aux1489 + aux1492 + aux1493)<=1)=tv=SATLiteral(8265))
-8265 6132 0
-8265 6126 6131 0
-8265 6127 0
-8265 6129 0
-8265 6117 6131 0
-8265 6117 6126 0
-8265 6117 6127 0
-8265 6117 6129 0
-8265 6118 0
-8265 6118 6126 0
-8265 6118 6127 0
-8265 6118 6129 0
8265 -6118 -6126 -6131 0
8265 -6117 -6127 -6131 0
8265 -6117 -6126 -6132 0
c ((1<=(aux1489 + aux1492 + aux1493))=tv=SATLiteral(8266))
-8266 -6117 -6126 -6131 0
8266 6131 0
8266 6126 0
8266 6127 0
8266 6129 0
8266 6117 0
8266 6117 6126 0
8266 6117 6127 0
8266 6117 6129 0
8266 6118 0
8266 6118 6126 0
8266 6118 6127 0
8266 6118 6129 0
c (((aux1495 + aux1498 + aux1499)<=1)=tv=SATLiteral(8267))
-8267 6156 0
-8267 6150 6155 0
-8267 6151 0
-8267 6153 0
-8267 6141 6155 0
-8267 6141 6150 0
-8267 6141 6151 0
-8267 6141 6153 0
-8267 6142 0
-8267 6142 6150 0
-8267 6142 6151 0
-8267 6142 6153 0
8267 -6142 -6150 -6155 0
8267 -6141 -6151 -6155 0
8267 -6141 -6150 -6156 0
c ((1<=(aux1495 + aux1498 + aux1499))=tv=SATLiteral(8268))
-8268 -6141 -6150 -6155 0
8268 6155 0
8268 6150 0
8268 6151 0
8268 6153 0
8268 6141 0
8268 6141 6150 0
8268 6141 6151 0
8268 6141 6153 0
8268 6142 0
8268 6142 6150 0
8268 6142 6151 0
8268 6142 6153 0
c (((aux1501 + aux1504 + aux1505)<=1)=tv=SATLiteral(8269))
-8269 6180 0
-8269 6174 6179 0
-8269 6175 0
-8269 6177 0
-8269 6165 6179 0
-8269 6165 6174 0
-8269 6165 6175 0
-8269 6165 6177 0
-8269 6166 0
-8269 6166 6174 0
-8269 6166 6175 0
-8269 6166 6177 0
8269 -6166 -6174 -6179 0
8269 -6165 -6175 -6179 0
8269 -6165 -6174 -6180 0
c ((1<=(aux1501 + aux1504 + aux1505))=tv=SATLiteral(8270))
-8270 -6165 -6174 -6179 0
8270 6179 0
8270 6174 0
8270 6175 0
8270 6177 0
8270 6165 0
8270 6165 6174 0
8270 6165 6175 0
8270 6165 6177 0
8270 6166 0
8270 6166 6174 0
8270 6166 6175 0
8270 6166 6177 0
c (((aux1507 + aux1510 + aux1511)<=1)=tv=SATLiteral(8271))
-8271 6204 0
-8271 6198 6203 0
-8271 6199 0
-8271 6201 0
-8271 6189 6203 0
-8271 6189 6198 0
-8271 6189 6199 0
-8271 6189 6201 0
-8271 6190 0
-8271 6190 6198 0
-8271 6190 6199 0
-8271 6190 6201 0
8271 -6190 -6198 -6203 0
8271 -6189 -6199 -6203 0
8271 -6189 -6198 -6204 0
c ((1<=(aux1507 + aux1510 + aux1511))=tv=SATLiteral(8272))
-8272 -6189 -6198 -6203 0
8272 6203 0
8272 6198 0
8272 6199 0
8272 6201 0
8272 6189 0
8272 6189 6198 0
8272 6189 6199 0
8272 6189 6201 0
8272 6190 0
8272 6190 6198 0
8272 6190 6199 0
8272 6190 6201 0
c (((aux1513 + aux1516 + aux1517)<=1)=tv=SATLiteral(8273))
-8273 6228 0
-8273 6222 6227 0
-8273 6223 0
-8273 6225 0
-8273 6213 6227 0
-8273 6213 6222 0
-8273 6213 6223 0
-8273 6213 6225 0
-8273 6214 0
-8273 6214 6222 0
-8273 6214 6223 0
-8273 6214 6225 0
8273 -6214 -6222 -6227 0
8273 -6213 -6223 -6227 0
8273 -6213 -6222 -6228 0
c ((1<=(aux1513 + aux1516 + aux1517))=tv=SATLiteral(8274))
-8274 -6213 -6222 -6227 0
8274 6227 0
8274 6222 0
8274 6223 0
8274 6225 0
8274 6213 0
8274 6213 6222 0
8274 6213 6223 0
8274 6213 6225 0
8274 6214 0
8274 6214 6222 0
8274 6214 6223 0
8274 6214 6225 0
c (((aux1519 + aux1522 + aux1523)<=1)=tv=SATLiteral(8275))
-8275 6252 0
-8275 6246 6251 0
-8275 6247 0
-8275 6249 0
-8275 6237 6251 0
-8275 6237 6246 0
-8275 6237 6247 0
-8275 6237 6249 0
-8275 6238 0
-8275 6238 6246 0
-8275 6238 6247 0
-8275 6238 6249 0
8275 -6238 -6246 -6251 0
8275 -6237 -6247 -6251 0
8275 -6237 -6246 -6252 0
c ((1<=(aux1519 + aux1522 + aux1523))=tv=SATLiteral(8276))
-8276 -6237 -6246 -6251 0
8276 6251 0
8276 6246 0
8276 6247 0
8276 6249 0
8276 6237 0
8276 6237 6246 0
8276 6237 6247 0
8276 6237 6249 0
8276 6238 0
8276 6238 6246 0
8276 6238 6247 0
8276 6238 6249 0
c (((aux1525 + aux1528 + aux1529)<=1)=tv=SATLiteral(8277))
-8277 6276 0
-8277 6270 6275 0
-8277 6271 0
-8277 6273 0
-8277 6261 6275 0
-8277 6261 6270 0
-8277 6261 6271 0
-8277 6261 6273 0
-8277 6262 0
-8277 6262 6270 0
-8277 6262 6271 0
-8277 6262 6273 0
8277 -6262 -6270 -6275 0
8277 -6261 -6271 -6275 0
8277 -6261 -6270 -6276 0
c ((1<=(aux1525 + aux1528 + aux1529))=tv=SATLiteral(8278))
-8278 -6261 -6270 -6275 0
8278 6275 0
8278 6270 0
8278 6271 0
8278 6273 0
8278 6261 0
8278 6261 6270 0
8278 6261 6271 0
8278 6261 6273 0
8278 6262 0
8278 6262 6270 0
8278 6262 6271 0
8278 6262 6273 0
c (((aux1531 + aux1534 + aux1535)<=1)=tv=SATLiteral(8279))
-8279 6300 0
-8279 6294 6299 0
-8279 6295 0
-8279 6297 0
-8279 6285 6299 0
-8279 6285 6294 0
-8279 6285 6295 0
-8279 6285 6297 0
-8279 6286 0
-8279 6286 6294 0
-8279 6286 6295 0
-8279 6286 6297 0
8279 -6286 -6294 -6299 0
8279 -6285 -6295 -6299 0
8279 -6285 -6294 -6300 0
c ((1<=(aux1531 + aux1534 + aux1535))=tv=SATLiteral(8280))
-8280 -6285 -6294 -6299 0
8280 6299 0
8280 6294 0
8280 6295 0
8280 6297 0
8280 6285 0
8280 6285 6294 0
8280 6285 6295 0
8280 6285 6297 0
8280 6286 0
8280 6286 6294 0
8280 6286 6295 0
8280 6286 6297 0
c (((aux1537 + aux1540 + aux1541)<=1)=tv=SATLiteral(8281))
-8281 6324 0
-8281 6318 6323 0
-8281 6319 0
-8281 6321 0
-8281 6309 6323 0
-8281 6309 6318 0
-8281 6309 6319 0
-8281 6309 6321 0
-8281 6310 0
-8281 6310 6318 0
-8281 6310 6319 0
-8281 6310 6321 0
8281 -6310 -6318 -6323 0
8281 -6309 -6319 -6323 0
8281 -6309 -6318 -6324 0
c ((1<=(aux1537 + aux1540 + aux1541))=tv=SATLiteral(8282))
-8282 -6309 -6318 -6323 0
8282 6323 0
8282 6318 0
8282 6319 0
8282 6321 0
8282 6309 0
8282 6309 6318 0
8282 6309 6319 0
8282 6309 6321 0
8282 6310 0
8282 6310 6318 0
8282 6310 6319 0
8282 6310 6321 0
c (((aux1543 + aux1546 + aux1547)<=1)=tv=SATLiteral(8283))
-8283 6348 0
-8283 6342 6347 0
-8283 6343 0
-8283 6345 0
-8283 6333 6347 0
-8283 6333 6342 0
-8283 6333 6343 0
-8283 6333 6345 0
-8283 6334 0
-8283 6334 6342 0
-8283 6334 6343 0
-8283 6334 6345 0
8283 -6334 -6342 -6347 0
8283 -6333 -6343 -6347 0
8283 -6333 -6342 -6348 0
c ((1<=(aux1543 + aux1546 + aux1547))=tv=SATLiteral(8284))
-8284 -6333 -6342 -6347 0
8284 6347 0
8284 6342 0
8284 6343 0
8284 6345 0
8284 6333 0
8284 6333 6342 0
8284 6333 6343 0
8284 6333 6345 0
8284 6334 0
8284 6334 6342 0
8284 6334 6343 0
8284 6334 6345 0
c (((aux1549 + aux1552 + aux1553)<=1)=tv=SATLiteral(8285))
-8285 6372 0
-8285 6366 6371 0
-8285 6367 0
-8285 6369 0
-8285 6357 6371 0
-8285 6357 6366 0
-8285 6357 6367 0
-8285 6357 6369 0
-8285 6358 0
-8285 6358 6366 0
-8285 6358 6367 0
-8285 6358 6369 0
8285 -6358 -6366 -6371 0
8285 -6357 -6367 -6371 0
8285 -6357 -6366 -6372 0
c ((1<=(aux1549 + aux1552 + aux1553))=tv=SATLiteral(8286))
-8286 -6357 -6366 -6371 0
8286 6371 0
8286 6366 0
8286 6367 0
8286 6369 0
8286 6357 0
8286 6357 6366 0
8286 6357 6367 0
8286 6357 6369 0
8286 6358 0
8286 6358 6366 0
8286 6358 6367 0
8286 6358 6369 0
c (((aux1555 + aux1558 + aux1559)<=1)=tv=SATLiteral(8287))
-8287 6396 0
-8287 6390 6395 0
-8287 6391 0
-8287 6393 0
-8287 6381 6395 0
-8287 6381 6390 0
-8287 6381 6391 0
-8287 6381 6393 0
-8287 6382 0
-8287 6382 6390 0
-8287 6382 6391 0
-8287 6382 6393 0
8287 -6382 -6390 -6395 0
8287 -6381 -6391 -6395 0
8287 -6381 -6390 -6396 0
c ((1<=(aux1555 + aux1558 + aux1559))=tv=SATLiteral(8288))
-8288 -6381 -6390 -6395 0
8288 6395 0
8288 6390 0
8288 6391 0
8288 6393 0
8288 6381 0
8288 6381 6390 0
8288 6381 6391 0
8288 6381 6393 0
8288 6382 0
8288 6382 6390 0
8288 6382 6391 0
8288 6382 6393 0
c (((aux1561 + aux1564 + aux1565)<=1)=tv=SATLiteral(8289))
-8289 6420 0
-8289 6414 6419 0
-8289 6415 0
-8289 6417 0
-8289 6405 6419 0
-8289 6405 6414 0
-8289 6405 6415 0
-8289 6405 6417 0
-8289 6406 0
-8289 6406 6414 0
-8289 6406 6415 0
-8289 6406 6417 0
8289 -6406 -6414 -6419 0
8289 -6405 -6415 -6419 0
8289 -6405 -6414 -6420 0
c ((1<=(aux1561 + aux1564 + aux1565))=tv=SATLiteral(8290))
-8290 -6405 -6414 -6419 0
8290 6419 0
8290 6414 0
8290 6415 0
8290 6417 0
8290 6405 0
8290 6405 6414 0
8290 6405 6415 0
8290 6405 6417 0
8290 6406 0
8290 6406 6414 0
8290 6406 6415 0
8290 6406 6417 0
c (((aux1567 + aux1570 + aux1571)<=1)=tv=SATLiteral(8291))
-8291 6444 0
-8291 6438 6443 0
-8291 6439 0
-8291 6441 0
-8291 6429 6443 0
-8291 6429 6438 0
-8291 6429 6439 0
-8291 6429 6441 0
-8291 6430 0
-8291 6430 6438 0
-8291 6430 6439 0
-8291 6430 6441 0
8291 -6430 -6438 -6443 0
8291 -6429 -6439 -6443 0
8291 -6429 -6438 -6444 0
c ((1<=(aux1567 + aux1570 + aux1571))=tv=SATLiteral(8292))
-8292 -6429 -6438 -6443 0
8292 6443 0
8292 6438 0
8292 6439 0
8292 6441 0
8292 6429 0
8292 6429 6438 0
8292 6429 6439 0
8292 6429 6441 0
8292 6430 0
8292 6430 6438 0
8292 6430 6439 0
8292 6430 6441 0
c (((aux1573 + aux1576 + aux1577)<=1)=tv=SATLiteral(8293))
-8293 6468 0
-8293 6462 6467 0
-8293 6463 0
-8293 6465 0
-8293 6453 6467 0
-8293 6453 6462 0
-8293 6453 6463 0
-8293 6453 6465 0
-8293 6454 0
-8293 6454 6462 0
-8293 6454 6463 0
-8293 6454 6465 0
8293 -6454 -6462 -6467 0
8293 -6453 -6463 -6467 0
8293 -6453 -6462 -6468 0
c ((1<=(aux1573 + aux1576 + aux1577))=tv=SATLiteral(8294))
-8294 -6453 -6462 -6467 0
8294 6467 0
8294 6462 0
8294 6463 0
8294 6465 0
8294 6453 0
8294 6453 6462 0
8294 6453 6463 0
8294 6453 6465 0
8294 6454 0
8294 6454 6462 0
8294 6454 6463 0
8294 6454 6465 0
c (((aux1579 + aux1582 + aux1583)<=1)=tv=SATLiteral(8295))
-8295 6492 0
-8295 6486 6491 0
-8295 6487 0
-8295 6489 0
-8295 6477 6491 0
-8295 6477 6486 0
-8295 6477 6487 0
-8295 6477 6489 0
-8295 6478 0
-8295 6478 6486 0
-8295 6478 6487 0
-8295 6478 6489 0
8295 -6478 -6486 -6491 0
8295 -6477 -6487 -6491 0
8295 -6477 -6486 -6492 0
c ((1<=(aux1579 + aux1582 + aux1583))=tv=SATLiteral(8296))
-8296 -6477 -6486 -6491 0
8296 6491 0
8296 6486 0
8296 6487 0
8296 6489 0
8296 6477 0
8296 6477 6486 0
8296 6477 6487 0
8296 6477 6489 0
8296 6478 0
8296 6478 6486 0
8296 6478 6487 0
8296 6478 6489 0
c (((aux1585 + aux1588 + aux1589)<=1)=tv=SATLiteral(8297))
-8297 6516 0
-8297 6510 6515 0
-8297 6511 0
-8297 6513 0
-8297 6501 6515 0
-8297 6501 6510 0
-8297 6501 6511 0
-8297 6501 6513 0
-8297 6502 0
-8297 6502 6510 0
-8297 6502 6511 0
-8297 6502 6513 0
8297 -6502 -6510 -6515 0
8297 -6501 -6511 -6515 0
8297 -6501 -6510 -6516 0
c ((1<=(aux1585 + aux1588 + aux1589))=tv=SATLiteral(8298))
-8298 -6501 -6510 -6515 0
8298 6515 0
8298 6510 0
8298 6511 0
8298 6513 0
8298 6501 0
8298 6501 6510 0
8298 6501 6511 0
8298 6501 6513 0
8298 6502 0
8298 6502 6510 0
8298 6502 6511 0
8298 6502 6513 0
c (((aux1591 + aux1594 + aux1595)<=1)=tv=SATLiteral(8299))
-8299 6540 0
-8299 6534 6539 0
-8299 6535 0
-8299 6537 0
-8299 6525 6539 0
-8299 6525 6534 0
-8299 6525 6535 0
-8299 6525 6537 0
-8299 6526 0
-8299 6526 6534 0
-8299 6526 6535 0
-8299 6526 6537 0
8299 -6526 -6534 -6539 0
8299 -6525 -6535 -6539 0
8299 -6525 -6534 -6540 0
c ((1<=(aux1591 + aux1594 + aux1595))=tv=SATLiteral(8300))
-8300 -6525 -6534 -6539 0
8300 6539 0
8300 6534 0
8300 6535 0
8300 6537 0
8300 6525 0
8300 6525 6534 0
8300 6525 6535 0
8300 6525 6537 0
8300 6526 0
8300 6526 6534 0
8300 6526 6535 0
8300 6526 6537 0
c (((aux1597 + aux1600 + aux1601)<=1)=tv=SATLiteral(8301))
-8301 6564 0
-8301 6558 6563 0
-8301 6559 0
-8301 6561 0
-8301 6549 6563 0
-8301 6549 6558 0
-8301 6549 6559 0
-8301 6549 6561 0
-8301 6550 0
-8301 6550 6558 0
-8301 6550 6559 0
-8301 6550 6561 0
8301 -6550 -6558 -6563 0
8301 -6549 -6559 -6563 0
8301 -6549 -6558 -6564 0
c ((1<=(aux1597 + aux1600 + aux1601))=tv=SATLiteral(8302))
-8302 -6549 -6558 -6563 0
8302 6563 0
8302 6558 0
8302 6559 0
8302 6561 0
8302 6549 0
8302 6549 6558 0
8302 6549 6559 0
8302 6549 6561 0
8302 6550 0
8302 6550 6558 0
8302 6550 6559 0
8302 6550 6561 0
c (((aux1603 + aux1606 + aux1607)<=1)=tv=SATLiteral(8303))
-8303 6588 0
-8303 6582 6587 0
-8303 6583 0
-8303 6585 0
-8303 6573 6587 0
-8303 6573 6582 0
-8303 6573 6583 0
-8303 6573 6585 0
-8303 6574 0
-8303 6574 6582 0
-8303 6574 6583 0
-8303 6574 6585 0
8303 -6574 -6582 -6587 0
8303 -6573 -6583 -6587 0
8303 -6573 -6582 -6588 0
c ((1<=(aux1603 + aux1606 + aux1607))=tv=SATLiteral(8304))
-8304 -6573 -6582 -6587 0
8304 6587 0
8304 6582 0
8304 6583 0
8304 6585 0
8304 6573 0
8304 6573 6582 0
8304 6573 6583 0
8304 6573 6585 0
8304 6574 0
8304 6574 6582 0
8304 6574 6583 0
8304 6574 6585 0
c (((aux1609 + aux1612 + aux1613)<=1)=tv=SATLiteral(8305))
-8305 6612 0
-8305 6606 6611 0
-8305 6607 0
-8305 6609 0
-8305 6597 6611 0
-8305 6597 6606 0
-8305 6597 6607 0
-8305 6597 6609 0
-8305 6598 0
-8305 6598 6606 0
-8305 6598 6607 0
-8305 6598 6609 0
8305 -6598 -6606 -6611 0
8305 -6597 -6607 -6611 0
8305 -6597 -6606 -6612 0
c ((1<=(aux1609 + aux1612 + aux1613))=tv=SATLiteral(8306))
-8306 -6597 -6606 -6611 0
8306 6611 0
8306 6606 0
8306 6607 0
8306 6609 0
8306 6597 0
8306 6597 6606 0
8306 6597 6607 0
8306 6597 6609 0
8306 6598 0
8306 6598 6606 0
8306 6598 6607 0
8306 6598 6609 0
c (((aux1615 + aux1618 + aux1619)<=1)=tv=SATLiteral(8307))
-8307 6636 0
-8307 6630 6635 0
-8307 6631 0
-8307 6633 0
-8307 6621 6635 0
-8307 6621 6630 0
-8307 6621 6631 0
-8307 6621 6633 0
-8307 6622 0
-8307 6622 6630 0
-8307 6622 6631 0
-8307 6622 6633 0
8307 -6622 -6630 -6635 0
8307 -6621 -6631 -6635 0
8307 -6621 -6630 -6636 0
c ((1<=(aux1615 + aux1618 + aux1619))=tv=SATLiteral(8308))
-8308 -6621 -6630 -6635 0
8308 6635 0
8308 6630 0
8308 6631 0
8308 6633 0
8308 6621 0
8308 6621 6630 0
8308 6621 6631 0
8308 6621 6633 0
8308 6622 0
8308 6622 6630 0
8308 6622 6631 0
8308 6622 6633 0
c (((aux1621 + aux1624 + aux1625)<=1)=tv=SATLiteral(8309))
-8309 6660 0
-8309 6654 6659 0
-8309 6655 0
-8309 6657 0
-8309 6645 6659 0
-8309 6645 6654 0
-8309 6645 6655 0
-8309 6645 6657 0
-8309 6646 0
-8309 6646 6654 0
-8309 6646 6655 0
-8309 6646 6657 0
8309 -6646 -6654 -6659 0
8309 -6645 -6655 -6659 0
8309 -6645 -6654 -6660 0
c ((1<=(aux1621 + aux1624 + aux1625))=tv=SATLiteral(8310))
-8310 -6645 -6654 -6659 0
8310 6659 0
8310 6654 0
8310 6655 0
8310 6657 0
8310 6645 0
8310 6645 6654 0
8310 6645 6655 0
8310 6645 6657 0
8310 6646 0
8310 6646 6654 0
8310 6646 6655 0
8310 6646 6657 0
c (((aux1627 + aux1630 + aux1631)<=1)=tv=SATLiteral(8311))
-8311 6684 0
-8311 6678 6683 0
-8311 6679 0
-8311 6681 0
-8311 6669 6683 0
-8311 6669 6678 0
-8311 6669 6679 0
-8311 6669 6681 0
-8311 6670 0
-8311 6670 6678 0
-8311 6670 6679 0
-8311 6670 6681 0
8311 -6670 -6678 -6683 0
8311 -6669 -6679 -6683 0
8311 -6669 -6678 -6684 0
c ((1<=(aux1627 + aux1630 + aux1631))=tv=SATLiteral(8312))
-8312 -6669 -6678 -6683 0
8312 6683 0
8312 6678 0
8312 6679 0
8312 6681 0
8312 6669 0
8312 6669 6678 0
8312 6669 6679 0
8312 6669 6681 0
8312 6670 0
8312 6670 6678 0
8312 6670 6679 0
8312 6670 6681 0
c (((aux1633 + aux1636 + aux1637)<=1)=tv=SATLiteral(8313))
-8313 6708 0
-8313 6702 6707 0
-8313 6703 0
-8313 6705 0
-8313 6693 6707 0
-8313 6693 6702 0
-8313 6693 6703 0
-8313 6693 6705 0
-8313 6694 0
-8313 6694 6702 0
-8313 6694 6703 0
-8313 6694 6705 0
8313 -6694 -6702 -6707 0
8313 -6693 -6703 -6707 0
8313 -6693 -6702 -6708 0
c ((1<=(aux1633 + aux1636 + aux1637))=tv=SATLiteral(8314))
-8314 -6693 -6702 -6707 0
8314 6707 0
8314 6702 0
8314 6703 0
8314 6705 0
8314 6693 0
8314 6693 6702 0
8314 6693 6703 0
8314 6693 6705 0
8314 6694 0
8314 6694 6702 0
8314 6694 6703 0
8314 6694 6705 0
c (((aux1639 + aux1642 + aux1643)<=1)=tv=SATLiteral(8315))
-8315 6732 0
-8315 6726 6731 0
-8315 6727 0
-8315 6729 0
-8315 6717 6731 0
-8315 6717 6726 0
-8315 6717 6727 0
-8315 6717 6729 0
-8315 6718 0
-8315 6718 6726 0
-8315 6718 6727 0
-8315 6718 6729 0
8315 -6718 -6726 -6731 0
8315 -6717 -6727 -6731 0
8315 -6717 -6726 -6732 0
c ((1<=(aux1639 + aux1642 + aux1643))=tv=SATLiteral(8316))
-8316 -6717 -6726 -6731 0
8316 6731 0
8316 6726 0
8316 6727 0
8316 6729 0
8316 6717 0
8316 6717 6726 0
8316 6717 6727 0
8316 6717 6729 0
8316 6718 0
8316 6718 6726 0
8316 6718 6727 0
8316 6718 6729 0
c (((aux1645 + aux1648 + aux1649)<=1)=tv=SATLiteral(8317))
-8317 6756 0
-8317 6750 6755 0
-8317 6751 0
-8317 6753 0
-8317 6741 6755 0
-8317 6741 6750 0
-8317 6741 6751 0
-8317 6741 6753 0
-8317 6742 0
-8317 6742 6750 0
-8317 6742 6751 0
-8317 6742 6753 0
8317 -6742 -6750 -6755 0
8317 -6741 -6751 -6755 0
8317 -6741 -6750 -6756 0
c ((1<=(aux1645 + aux1648 + aux1649))=tv=SATLiteral(8318))
-8318 -6741 -6750 -6755 0
8318 6755 0
8318 6750 0
8318 6751 0
8318 6753 0
8318 6741 0
8318 6741 6750 0
8318 6741 6751 0
8318 6741 6753 0
8318 6742 0
8318 6742 6750 0
8318 6742 6751 0
8318 6742 6753 0
c (((aux1651 + aux1654 + aux1655)<=1)=tv=SATLiteral(8319))
-8319 6780 0
-8319 6774 6779 0
-8319 6775 0
-8319 6777 0
-8319 6765 6779 0
-8319 6765 6774 0
-8319 6765 6775 0
-8319 6765 6777 0
-8319 6766 0
-8319 6766 6774 0
-8319 6766 6775 0
-8319 6766 6777 0
8319 -6766 -6774 -6779 0
8319 -6765 -6775 -6779 0
8319 -6765 -6774 -6780 0
c ((1<=(aux1651 + aux1654 + aux1655))=tv=SATLiteral(8320))
-8320 -6765 -6774 -6779 0
8320 6779 0
8320 6774 0
8320 6775 0
8320 6777 0
8320 6765 0
8320 6765 6774 0
8320 6765 6775 0
8320 6765 6777 0
8320 6766 0
8320 6766 6774 0
8320 6766 6775 0
8320 6766 6777 0
c (((aux1657 + aux1660 + aux1661)<=1)=tv=SATLiteral(8321))
-8321 6804 0
-8321 6798 6803 0
-8321 6799 0
-8321 6801 0
-8321 6789 6803 0
-8321 6789 6798 0
-8321 6789 6799 0
-8321 6789 6801 0
-8321 6790 0
-8321 6790 6798 0
-8321 6790 6799 0
-8321 6790 6801 0
8321 -6790 -6798 -6803 0
8321 -6789 -6799 -6803 0
8321 -6789 -6798 -6804 0
c ((1<=(aux1657 + aux1660 + aux1661))=tv=SATLiteral(8322))
-8322 -6789 -6798 -6803 0
8322 6803 0
8322 6798 0
8322 6799 0
8322 6801 0
8322 6789 0
8322 6789 6798 0
8322 6789 6799 0
8322 6789 6801 0
8322 6790 0
8322 6790 6798 0
8322 6790 6799 0
8322 6790 6801 0
c (((aux1663 + aux1666 + aux1667)<=1)=tv=SATLiteral(8323))
-8323 6828 0
-8323 6822 6827 0
-8323 6823 0
-8323 6825 0
-8323 6813 6827 0
-8323 6813 6822 0
-8323 6813 6823 0
-8323 6813 6825 0
-8323 6814 0
-8323 6814 6822 0
-8323 6814 6823 0
-8323 6814 6825 0
8323 -6814 -6822 -6827 0
8323 -6813 -6823 -6827 0
8323 -6813 -6822 -6828 0
c ((1<=(aux1663 + aux1666 + aux1667))=tv=SATLiteral(8324))
-8324 -6813 -6822 -6827 0
8324 6827 0
8324 6822 0
8324 6823 0
8324 6825 0
8324 6813 0
8324 6813 6822 0
8324 6813 6823 0
8324 6813 6825 0
8324 6814 0
8324 6814 6822 0
8324 6814 6823 0
8324 6814 6825 0
c (((aux1669 + aux1672 + aux1673)<=1)=tv=SATLiteral(8325))
-8325 6852 0
-8325 6846 6851 0
-8325 6847 0
-8325 6849 0
-8325 6837 6851 0
-8325 6837 6846 0
-8325 6837 6847 0
-8325 6837 6849 0
-8325 6838 0
-8325 6838 6846 0
-8325 6838 6847 0
-8325 6838 6849 0
8325 -6838 -6846 -6851 0
8325 -6837 -6847 -6851 0
8325 -6837 -6846 -6852 0
c ((1<=(aux1669 + aux1672 + aux1673))=tv=SATLiteral(8326))
-8326 -6837 -6846 -6851 0
8326 6851 0
8326 6846 0
8326 6847 0
8326 6849 0
8326 6837 0
8326 6837 6846 0
8326 6837 6847 0
8326 6837 6849 0
8326 6838 0
8326 6838 6846 0
8326 6838 6847 0
8326 6838 6849 0
c (((aux1675 + aux1678 + aux1679)<=1)=tv=SATLiteral(8327))
-8327 6876 0
-8327 6870 6875 0
-8327 6871 0
-8327 6873 0
-8327 6861 6875 0
-8327 6861 6870 0
-8327 6861 6871 0
-8327 6861 6873 0
-8327 6862 0
-8327 6862 6870 0
-8327 6862 6871 0
-8327 6862 6873 0
8327 -6862 -6870 -6875 0
8327 -6861 -6871 -6875 0
8327 -6861 -6870 -6876 0
c ((1<=(aux1675 + aux1678 + aux1679))=tv=SATLiteral(8328))
-8328 -6861 -6870 -6875 0
8328 6875 0
8328 6870 0
8328 6871 0
8328 6873 0
8328 6861 0
8328 6861 6870 0
8328 6861 6871 0
8328 6861 6873 0
8328 6862 0
8328 6862 6870 0
8328 6862 6871 0
8328 6862 6873 0
c (((aux1681 + aux1684 + aux1685)<=1)=tv=SATLiteral(8329))
-8329 6900 0
-8329 6894 6899 0
-8329 6895 0
-8329 6897 0
-8329 6885 6899 0
-8329 6885 6894 0
-8329 6885 6895 0
-8329 6885 6897 0
-8329 6886 0
-8329 6886 6894 0
-8329 6886 6895 0
-8329 6886 6897 0
8329 -6886 -6894 -6899 0
8329 -6885 -6895 -6899 0
8329 -6885 -6894 -6900 0
c ((1<=(aux1681 + aux1684 + aux1685))=tv=SATLiteral(8330))
-8330 -6885 -6894 -6899 0
8330 6899 0
8330 6894 0
8330 6895 0
8330 6897 0
8330 6885 0
8330 6885 6894 0
8330 6885 6895 0
8330 6885 6897 0
8330 6886 0
8330 6886 6894 0
8330 6886 6895 0
8330 6886 6897 0
c (((aux1687 + aux1690 + aux1691)<=1)=tv=SATLiteral(8331))
-8331 6924 0
-8331 6918 6923 0
-8331 6919 0
-8331 6921 0
-8331 6909 6923 0
-8331 6909 6918 0
-8331 6909 6919 0
-8331 6909 6921 0
-8331 6910 0
-8331 6910 6918 0
-8331 6910 6919 0
-8331 6910 6921 0
8331 -6910 -6918 -6923 0
8331 -6909 -6919 -6923 0
8331 -6909 -6918 -6924 0
c ((1<=(aux1687 + aux1690 + aux1691))=tv=SATLiteral(8332))
-8332 -6909 -6918 -6923 0
8332 6923 0
8332 6918 0
8332 6919 0
8332 6921 0
8332 6909 0
8332 6909 6918 0
8332 6909 6919 0
8332 6909 6921 0
8332 6910 0
8332 6910 6918 0
8332 6910 6919 0
8332 6910 6921 0
c (((aux1693 + aux1696 + aux1697)<=1)=tv=SATLiteral(8333))
-8333 6948 0
-8333 6942 6947 0
-8333 6943 0
-8333 6945 0
-8333 6933 6947 0
-8333 6933 6942 0
-8333 6933 6943 0
-8333 6933 6945 0
-8333 6934 0
-8333 6934 6942 0
-8333 6934 6943 0
-8333 6934 6945 0
8333 -6934 -6942 -6947 0
8333 -6933 -6943 -6947 0
8333 -6933 -6942 -6948 0
c ((1<=(aux1693 + aux1696 + aux1697))=tv=SATLiteral(8334))
-8334 -6933 -6942 -6947 0
8334 6947 0
8334 6942 0
8334 6943 0
8334 6945 0
8334 6933 0
8334 6933 6942 0
8334 6933 6943 0
8334 6933 6945 0
8334 6934 0
8334 6934 6942 0
8334 6934 6943 0
8334 6934 6945 0
c (((aux1699 + aux1702 + aux1703)<=1)=tv=SATLiteral(8335))
-8335 6972 0
-8335 6966 6971 0
-8335 6967 0
-8335 6969 0
-8335 6957 6971 0
-8335 6957 6966 0
-8335 6957 6967 0
-8335 6957 6969 0
-8335 6958 0
-8335 6958 6966 0
-8335 6958 6967 0
-8335 6958 6969 0
8335 -6958 -6966 -6971 0
8335 -6957 -6967 -6971 0
8335 -6957 -6966 -6972 0
c ((1<=(aux1699 + aux1702 + aux1703))=tv=SATLiteral(8336))
-8336 -6957 -6966 -6971 0
8336 6971 0
8336 6966 0
8336 6967 0
8336 6969 0
8336 6957 0
8336 6957 6966 0
8336 6957 6967 0
8336 6957 6969 0
8336 6958 0
8336 6958 6966 0
8336 6958 6967 0
8336 6958 6969 0
c (((aux1705 + aux1708 + aux1709)<=1)=tv=SATLiteral(8337))
-8337 6996 0
-8337 6990 6995 0
-8337 6991 0
-8337 6993 0
-8337 6981 6995 0
-8337 6981 6990 0
-8337 6981 6991 0
-8337 6981 6993 0
-8337 6982 0
-8337 6982 6990 0
-8337 6982 6991 0
-8337 6982 6993 0
8337 -6982 -6990 -6995 0
8337 -6981 -6991 -6995 0
8337 -6981 -6990 -6996 0
c ((1<=(aux1705 + aux1708 + aux1709))=tv=SATLiteral(8338))
-8338 -6981 -6990 -6995 0
8338 6995 0
8338 6990 0
8338 6991 0
8338 6993 0
8338 6981 0
8338 6981 6990 0
8338 6981 6991 0
8338 6981 6993 0
8338 6982 0
8338 6982 6990 0
8338 6982 6991 0
8338 6982 6993 0
c (((aux1711 + aux1714 + aux1715)<=1)=tv=SATLiteral(8339))
-8339 7020 0
-8339 7014 7019 0
-8339 7015 0
-8339 7017 0
-8339 7005 7019 0
-8339 7005 7014 0
-8339 7005 7015 0
-8339 7005 7017 0
-8339 7006 0
-8339 7006 7014 0
-8339 7006 7015 0
-8339 7006 7017 0
8339 -7006 -7014 -7019 0
8339 -7005 -7015 -7019 0
8339 -7005 -7014 -7020 0
c ((1<=(aux1711 + aux1714 + aux1715))=tv=SATLiteral(8340))
-8340 -7005 -7014 -7019 0
8340 7019 0
8340 7014 0
8340 7015 0
8340 7017 0
8340 7005 0
8340 7005 7014 0
8340 7005 7015 0
8340 7005 7017 0
8340 7006 0
8340 7006 7014 0
8340 7006 7015 0
8340 7006 7017 0
c (((aux1717 + aux1720 + aux1721)<=1)=tv=SATLiteral(8341))
-8341 7044 0
-8341 7038 7043 0
-8341 7039 0
-8341 7041 0
-8341 7029 7043 0
-8341 7029 7038 0
-8341 7029 7039 0
-8341 7029 7041 0
-8341 7030 0
-8341 7030 7038 0
-8341 7030 7039 0
-8341 7030 7041 0
8341 -7030 -7038 -7043 0
8341 -7029 -7039 -7043 0
8341 -7029 -7038 -7044 0
c ((1<=(aux1717 + aux1720 + aux1721))=tv=SATLiteral(8342))
-8342 -7029 -7038 -7043 0
8342 7043 0
8342 7038 0
8342 7039 0
8342 7041 0
8342 7029 0
8342 7029 7038 0
8342 7029 7039 0
8342 7029 7041 0
8342 7030 0
8342 7030 7038 0
8342 7030 7039 0
8342 7030 7041 0
c (((aux1723 + aux1726 + aux1727)<=1)=tv=SATLiteral(8343))
-8343 7068 0
-8343 7062 7067 0
-8343 7063 0
-8343 7065 0
-8343 7053 7067 0
-8343 7053 7062 0
-8343 7053 7063 0
-8343 7053 7065 0
-8343 7054 0
-8343 7054 7062 0
-8343 7054 7063 0
-8343 7054 7065 0
8343 -7054 -7062 -7067 0
8343 -7053 -7063 -7067 0
8343 -7053 -7062 -7068 0
c ((1<=(aux1723 + aux1726 + aux1727))=tv=SATLiteral(8344))
-8344 -7053 -7062 -7067 0
8344 7067 0
8344 7062 0
8344 7063 0
8344 7065 0
8344 7053 0
8344 7053 7062 0
8344 7053 7063 0
8344 7053 7065 0
8344 7054 0
8344 7054 7062 0
8344 7054 7063 0
8344 7054 7065 0
c (((aux1729 + aux1732 + aux1733)<=1)=tv=SATLiteral(8345))
-8345 7092 0
-8345 7086 7091 0
-8345 7087 0
-8345 7089 0
-8345 7077 7091 0
-8345 7077 7086 0
-8345 7077 7087 0
-8345 7077 7089 0
-8345 7078 0
-8345 7078 7086 0
-8345 7078 7087 0
-8345 7078 7089 0
8345 -7078 -7086 -7091 0
8345 -7077 -7087 -7091 0
8345 -7077 -7086 -7092 0
c ((1<=(aux1729 + aux1732 + aux1733))=tv=SATLiteral(8346))
-8346 -7077 -7086 -7091 0
8346 7091 0
8346 7086 0
8346 7087 0
8346 7089 0
8346 7077 0
8346 7077 7086 0
8346 7077 7087 0
8346 7077 7089 0
8346 7078 0
8346 7078 7086 0
8346 7078 7087 0
8346 7078 7089 0
c (((aux1735 + aux1738 + aux1739)<=1)=tv=SATLiteral(8347))
-8347 7116 0
-8347 7110 7115 0
-8347 7111 0
-8347 7113 0
-8347 7101 7115 0
-8347 7101 7110 0
-8347 7101 7111 0
-8347 7101 7113 0
-8347 7102 0
-8347 7102 7110 0
-8347 7102 7111 0
-8347 7102 7113 0
8347 -7102 -7110 -7115 0
8347 -7101 -7111 -7115 0
8347 -7101 -7110 -7116 0
c ((1<=(aux1735 + aux1738 + aux1739))=tv=SATLiteral(8348))
-8348 -7101 -7110 -7115 0
8348 7115 0
8348 7110 0
8348 7111 0
8348 7113 0
8348 7101 0
8348 7101 7110 0
8348 7101 7111 0
8348 7101 7113 0
8348 7102 0
8348 7102 7110 0
8348 7102 7111 0
8348 7102 7113 0
c (((aux1741 + aux1744 + aux1745)<=1)=tv=SATLiteral(8349))
-8349 7140 0
-8349 7134 7139 0
-8349 7135 0
-8349 7137 0
-8349 7125 7139 0
-8349 7125 7134 0
-8349 7125 7135 0
-8349 7125 7137 0
-8349 7126 0
-8349 7126 7134 0
-8349 7126 7135 0
-8349 7126 7137 0
8349 -7126 -7134 -7139 0
8349 -7125 -7135 -7139 0
8349 -7125 -7134 -7140 0
c ((1<=(aux1741 + aux1744 + aux1745))=tv=SATLiteral(8350))
-8350 -7125 -7134 -7139 0
8350 7139 0
8350 7134 0
8350 7135 0
8350 7137 0
8350 7125 0
8350 7125 7134 0
8350 7125 7135 0
8350 7125 7137 0
8350 7126 0
8350 7126 7134 0
8350 7126 7135 0
8350 7126 7137 0
c (((aux1747 + aux1750 + aux1751)<=1)=tv=SATLiteral(8351))
-8351 7164 0
-8351 7158 7163 0
-8351 7159 0
-8351 7161 0
-8351 7149 7163 0
-8351 7149 7158 0
-8351 7149 7159 0
-8351 7149 7161 0
-8351 7150 0
-8351 7150 7158 0
-8351 7150 7159 0
-8351 7150 7161 0
8351 -7150 -7158 -7163 0
8351 -7149 -7159 -7163 0
8351 -7149 -7158 -7164 0
c ((1<=(aux1747 + aux1750 + aux1751))=tv=SATLiteral(8352))
-8352 -7149 -7158 -7163 0
8352 7163 0
8352 7158 0
8352 7159 0
8352 7161 0
8352 7149 0
8352 7149 7158 0
8352 7149 7159 0
8352 7149 7161 0
8352 7150 0
8352 7150 7158 0
8352 7150 7159 0
8352 7150 7161 0
c (((aux1753 + aux1756 + aux1757)<=1)=tv=SATLiteral(8353))
-8353 7188 0
-8353 7182 7187 0
-8353 7183 0
-8353 7185 0
-8353 7173 7187 0
-8353 7173 7182 0
-8353 7173 7183 0
-8353 7173 7185 0
-8353 7174 0
-8353 7174 7182 0
-8353 7174 7183 0
-8353 7174 7185 0
8353 -7174 -7182 -7187 0
8353 -7173 -7183 -7187 0
8353 -7173 -7182 -7188 0
c ((1<=(aux1753 + aux1756 + aux1757))=tv=SATLiteral(8354))
-8354 -7173 -7182 -7187 0
8354 7187 0
8354 7182 0
8354 7183 0
8354 7185 0
8354 7173 0
8354 7173 7182 0
8354 7173 7183 0
8354 7173 7185 0
8354 7174 0
8354 7174 7182 0
8354 7174 7183 0
8354 7174 7185 0
c (((aux1759 + aux1762 + aux1763)<=1)=tv=SATLiteral(8355))
-8355 7212 0
-8355 7206 7211 0
-8355 7207 0
-8355 7209 0
-8355 7197 7211 0
-8355 7197 7206 0
-8355 7197 7207 0
-8355 7197 7209 0
-8355 7198 0
-8355 7198 7206 0
-8355 7198 7207 0
-8355 7198 7209 0
8355 -7198 -7206 -7211 0
8355 -7197 -7207 -7211 0
8355 -7197 -7206 -7212 0
c ((1<=(aux1759 + aux1762 + aux1763))=tv=SATLiteral(8356))
-8356 -7197 -7206 -7211 0
8356 7211 0
8356 7206 0
8356 7207 0
8356 7209 0
8356 7197 0
8356 7197 7206 0
8356 7197 7207 0
8356 7197 7209 0
8356 7198 0
8356 7198 7206 0
8356 7198 7207 0
8356 7198 7209 0
c (((aux1765 + aux1768 + aux1769)<=1)=tv=SATLiteral(8357))
-8357 7236 0
-8357 7230 7235 0
-8357 7231 0
-8357 7233 0
-8357 7221 7235 0
-8357 7221 7230 0
-8357 7221 7231 0
-8357 7221 7233 0
-8357 7222 0
-8357 7222 7230 0
-8357 7222 7231 0
-8357 7222 7233 0
8357 -7222 -7230 -7235 0
8357 -7221 -7231 -7235 0
8357 -7221 -7230 -7236 0
c ((1<=(aux1765 + aux1768 + aux1769))=tv=SATLiteral(8358))
-8358 -7221 -7230 -7235 0
8358 7235 0
8358 7230 0
8358 7231 0
8358 7233 0
8358 7221 0
8358 7221 7230 0
8358 7221 7231 0
8358 7221 7233 0
8358 7222 0
8358 7222 7230 0
8358 7222 7231 0
8358 7222 7233 0
c (((aux1771 + aux1774 + aux1775)<=1)=tv=SATLiteral(8359))
-8359 7260 0
-8359 7254 7259 0
-8359 7255 0
-8359 7257 0
-8359 7245 7259 0
-8359 7245 7254 0
-8359 7245 7255 0
-8359 7245 7257 0
-8359 7246 0
-8359 7246 7254 0
-8359 7246 7255 0
-8359 7246 7257 0
8359 -7246 -7254 -7259 0
8359 -7245 -7255 -7259 0
8359 -7245 -7254 -7260 0
c ((1<=(aux1771 + aux1774 + aux1775))=tv=SATLiteral(8360))
-8360 -7245 -7254 -7259 0
8360 7259 0
8360 7254 0
8360 7255 0
8360 7257 0
8360 7245 0
8360 7245 7254 0
8360 7245 7255 0
8360 7245 7257 0
8360 7246 0
8360 7246 7254 0
8360 7246 7255 0
8360 7246 7257 0
c (((aux1777 + aux1780 + aux1781)<=1)=tv=SATLiteral(8361))
-8361 7284 0
-8361 7278 7283 0
-8361 7279 0
-8361 7281 0
-8361 7269 7283 0
-8361 7269 7278 0
-8361 7269 7279 0
-8361 7269 7281 0
-8361 7270 0
-8361 7270 7278 0
-8361 7270 7279 0
-8361 7270 7281 0
8361 -7270 -7278 -7283 0
8361 -7269 -7279 -7283 0
8361 -7269 -7278 -7284 0
c ((1<=(aux1777 + aux1780 + aux1781))=tv=SATLiteral(8362))
-8362 -7269 -7278 -7283 0
8362 7283 0
8362 7278 0
8362 7279 0
8362 7281 0
8362 7269 0
8362 7269 7278 0
8362 7269 7279 0
8362 7269 7281 0
8362 7270 0
8362 7270 7278 0
8362 7270 7279 0
8362 7270 7281 0
c (((aux1783 + aux1786 + aux1787)<=1)=tv=SATLiteral(8363))
-8363 7308 0
-8363 7302 7307 0
-8363 7303 0
-8363 7305 0
-8363 7293 7307 0
-8363 7293 7302 0
-8363 7293 7303 0
-8363 7293 7305 0
-8363 7294 0
-8363 7294 7302 0
-8363 7294 7303 0
-8363 7294 7305 0
8363 -7294 -7302 -7307 0
8363 -7293 -7303 -7307 0
8363 -7293 -7302 -7308 0
c ((1<=(aux1783 + aux1786 + aux1787))=tv=SATLiteral(8364))
-8364 -7293 -7302 -7307 0
8364 7307 0
8364 7302 0
8364 7303 0
8364 7305 0
8364 7293 0
8364 7293 7302 0
8364 7293 7303 0
8364 7293 7305 0
8364 7294 0
8364 7294 7302 0
8364 7294 7303 0
8364 7294 7305 0
c (((aux1789 + aux1792 + aux1793)<=1)=tv=SATLiteral(8365))
-8365 7332 0
-8365 7326 7331 0
-8365 7327 0
-8365 7329 0
-8365 7317 7331 0
-8365 7317 7326 0
-8365 7317 7327 0
-8365 7317 7329 0
-8365 7318 0
-8365 7318 7326 0
-8365 7318 7327 0
-8365 7318 7329 0
8365 -7318 -7326 -7331 0
8365 -7317 -7327 -7331 0
8365 -7317 -7326 -7332 0
c ((1<=(aux1789 + aux1792 + aux1793))=tv=SATLiteral(8366))
-8366 -7317 -7326 -7331 0
8366 7331 0
8366 7326 0
8366 7327 0
8366 7329 0
8366 7317 0
8366 7317 7326 0
8366 7317 7327 0
8366 7317 7329 0
8366 7318 0
8366 7318 7326 0
8366 7318 7327 0
8366 7318 7329 0
c (((aux1795 + aux1798 + aux1799)<=1)=tv=SATLiteral(8367))
-8367 7356 0
-8367 7350 7355 0
-8367 7351 0
-8367 7353 0
-8367 7341 7355 0
-8367 7341 7350 0
-8367 7341 7351 0
-8367 7341 7353 0
-8367 7342 0
-8367 7342 7350 0
-8367 7342 7351 0
-8367 7342 7353 0
8367 -7342 -7350 -7355 0
8367 -7341 -7351 -7355 0
8367 -7341 -7350 -7356 0
c ((1<=(aux1795 + aux1798 + aux1799))=tv=SATLiteral(8368))
-8368 -7341 -7350 -7355 0
8368 7355 0
8368 7350 0
8368 7351 0
8368 7353 0
8368 7341 0
8368 7341 7350 0
8368 7341 7351 0
8368 7341 7353 0
8368 7342 0
8368 7342 7350 0
8368 7342 7351 0
8368 7342 7353 0
c (((aux1801 + aux1804 + aux1805)<=1)=tv=SATLiteral(8369))
-8369 7380 0
-8369 7374 7379 0
-8369 7375 0
-8369 7377 0
-8369 7365 7379 0
-8369 7365 7374 0
-8369 7365 7375 0
-8369 7365 7377 0
-8369 7366 0
-8369 7366 7374 0
-8369 7366 7375 0
-8369 7366 7377 0
8369 -7366 -7374 -7379 0
8369 -7365 -7375 -7379 0
8369 -7365 -7374 -7380 0
c ((1<=(aux1801 + aux1804 + aux1805))=tv=SATLiteral(8370))
-8370 -7365 -7374 -7379 0
8370 7379 0
8370 7374 0
8370 7375 0
8370 7377 0
8370 7365 0
8370 7365 7374 0
8370 7365 7375 0
8370 7365 7377 0
8370 7366 0
8370 7366 7374 0
8370 7366 7375 0
8370 7366 7377 0
c (((aux1807 + aux1810 + aux1811)<=1)=tv=SATLiteral(8371))
-8371 7404 0
-8371 7398 7403 0
-8371 7399 0
-8371 7401 0
-8371 7389 7403 0
-8371 7389 7398 0
-8371 7389 7399 0
-8371 7389 7401 0
-8371 7390 0
-8371 7390 7398 0
-8371 7390 7399 0
-8371 7390 7401 0
8371 -7390 -7398 -7403 0
8371 -7389 -7399 -7403 0
8371 -7389 -7398 -7404 0
c ((1<=(aux1807 + aux1810 + aux1811))=tv=SATLiteral(8372))
-8372 -7389 -7398 -7403 0
8372 7403 0
8372 7398 0
8372 7399 0
8372 7401 0
8372 7389 0
8372 7389 7398 0
8372 7389 7399 0
8372 7389 7401 0
8372 7390 0
8372 7390 7398 0
8372 7390 7399 0
8372 7390 7401 0
c (((aux1813 + aux1816 + aux1817)<=1)=tv=SATLiteral(8373))
-8373 7428 0
-8373 7422 7427 0
-8373 7423 0
-8373 7425 0
-8373 7413 7427 0
-8373 7413 7422 0
-8373 7413 7423 0
-8373 7413 7425 0
-8373 7414 0
-8373 7414 7422 0
-8373 7414 7423 0
-8373 7414 7425 0
8373 -7414 -7422 -7427 0
8373 -7413 -7423 -7427 0
8373 -7413 -7422 -7428 0
c ((1<=(aux1813 + aux1816 + aux1817))=tv=SATLiteral(8374))
-8374 -7413 -7422 -7427 0
8374 7427 0
8374 7422 0
8374 7423 0
8374 7425 0
8374 7413 0
8374 7413 7422 0
8374 7413 7423 0
8374 7413 7425 0
8374 7414 0
8374 7414 7422 0
8374 7414 7423 0
8374 7414 7425 0
c (((aux1819 + aux1822 + aux1823)<=1)=tv=SATLiteral(8375))
-8375 7452 0
-8375 7446 7451 0
-8375 7447 0
-8375 7449 0
-8375 7437 7451 0
-8375 7437 7446 0
-8375 7437 7447 0
-8375 7437 7449 0
-8375 7438 0
-8375 7438 7446 0
-8375 7438 7447 0
-8375 7438 7449 0
8375 -7438 -7446 -7451 0
8375 -7437 -7447 -7451 0
8375 -7437 -7446 -7452 0
c ((1<=(aux1819 + aux1822 + aux1823))=tv=SATLiteral(8376))
-8376 -7437 -7446 -7451 0
8376 7451 0
8376 7446 0
8376 7447 0
8376 7449 0
8376 7437 0
8376 7437 7446 0
8376 7437 7447 0
8376 7437 7449 0
8376 7438 0
8376 7438 7446 0
8376 7438 7447 0
8376 7438 7449 0
c (((aux1825 + aux1828 + aux1829)<=1)=tv=SATLiteral(8377))
-8377 7476 0
-8377 7470 7475 0
-8377 7471 0
-8377 7473 0
-8377 7461 7475 0
-8377 7461 7470 0
-8377 7461 7471 0
-8377 7461 7473 0
-8377 7462 0
-8377 7462 7470 0
-8377 7462 7471 0
-8377 7462 7473 0
8377 -7462 -7470 -7475 0
8377 -7461 -7471 -7475 0
8377 -7461 -7470 -7476 0
c ((1<=(aux1825 + aux1828 + aux1829))=tv=SATLiteral(8378))
-8378 -7461 -7470 -7475 0
8378 7475 0
8378 7470 0
8378 7471 0
8378 7473 0
8378 7461 0
8378 7461 7470 0
8378 7461 7471 0
8378 7461 7473 0
8378 7462 0
8378 7462 7470 0
8378 7462 7471 0
8378 7462 7473 0
c (((aux1831 + aux1834 + aux1835)<=1)=tv=SATLiteral(8379))
-8379 7500 0
-8379 7494 7499 0
-8379 7495 0
-8379 7497 0
-8379 7485 7499 0
-8379 7485 7494 0
-8379 7485 7495 0
-8379 7485 7497 0
-8379 7486 0
-8379 7486 7494 0
-8379 7486 7495 0
-8379 7486 7497 0
8379 -7486 -7494 -7499 0
8379 -7485 -7495 -7499 0
8379 -7485 -7494 -7500 0
c ((1<=(aux1831 + aux1834 + aux1835))=tv=SATLiteral(8380))
-8380 -7485 -7494 -7499 0
8380 7499 0
8380 7494 0
8380 7495 0
8380 7497 0
8380 7485 0
8380 7485 7494 0
8380 7485 7495 0
8380 7485 7497 0
8380 7486 0
8380 7486 7494 0
8380 7486 7495 0
8380 7486 7497 0
c (((aux1837 + aux1840 + aux1841)<=1)=tv=SATLiteral(8381))
-8381 7524 0
-8381 7518 7523 0
-8381 7519 0
-8381 7521 0
-8381 7509 7523 0
-8381 7509 7518 0
-8381 7509 7519 0
-8381 7509 7521 0
-8381 7510 0
-8381 7510 7518 0
-8381 7510 7519 0
-8381 7510 7521 0
8381 -7510 -7518 -7523 0
8381 -7509 -7519 -7523 0
8381 -7509 -7518 -7524 0
c ((1<=(aux1837 + aux1840 + aux1841))=tv=SATLiteral(8382))
-8382 -7509 -7518 -7523 0
8382 7523 0
8382 7518 0
8382 7519 0
8382 7521 0
8382 7509 0
8382 7509 7518 0
8382 7509 7519 0
8382 7509 7521 0
8382 7510 0
8382 7510 7518 0
8382 7510 7519 0
8382 7510 7521 0
c (((aux1843 + aux1846 + aux1847)<=1)=tv=SATLiteral(8383))
-8383 7548 0
-8383 7542 7547 0
-8383 7543 0
-8383 7545 0
-8383 7533 7547 0
-8383 7533 7542 0
-8383 7533 7543 0
-8383 7533 7545 0
-8383 7534 0
-8383 7534 7542 0
-8383 7534 7543 0
-8383 7534 7545 0
8383 -7534 -7542 -7547 0
8383 -7533 -7543 -7547 0
8383 -7533 -7542 -7548 0
c ((1<=(aux1843 + aux1846 + aux1847))=tv=SATLiteral(8384))
-8384 -7533 -7542 -7547 0
8384 7547 0
8384 7542 0
8384 7543 0
8384 7545 0
8384 7533 0
8384 7533 7542 0
8384 7533 7543 0
8384 7533 7545 0
8384 7534 0
8384 7534 7542 0
8384 7534 7543 0
8384 7534 7545 0
c (((aux1849 + aux1852 + aux1853)<=1)=tv=SATLiteral(8385))
-8385 7572 0
-8385 7566 7571 0
-8385 7567 0
-8385 7569 0
-8385 7557 7571 0
-8385 7557 7566 0
-8385 7557 7567 0
-8385 7557 7569 0
-8385 7558 0
-8385 7558 7566 0
-8385 7558 7567 0
-8385 7558 7569 0
8385 -7558 -7566 -7571 0
8385 -7557 -7567 -7571 0
8385 -7557 -7566 -7572 0
c ((1<=(aux1849 + aux1852 + aux1853))=tv=SATLiteral(8386))
-8386 -7557 -7566 -7571 0
8386 7571 0
8386 7566 0
8386 7567 0
8386 7569 0
8386 7557 0
8386 7557 7566 0
8386 7557 7567 0
8386 7557 7569 0
8386 7558 0
8386 7558 7566 0
8386 7558 7567 0
8386 7558 7569 0
c (((aux1855 + aux1858 + aux1859)<=1)=tv=SATLiteral(8387))
-8387 7596 0
-8387 7590 7595 0
-8387 7591 0
-8387 7593 0
-8387 7581 7595 0
-8387 7581 7590 0
-8387 7581 7591 0
-8387 7581 7593 0
-8387 7582 0
-8387 7582 7590 0
-8387 7582 7591 0
-8387 7582 7593 0
8387 -7582 -7590 -7595 0
8387 -7581 -7591 -7595 0
8387 -7581 -7590 -7596 0
c ((1<=(aux1855 + aux1858 + aux1859))=tv=SATLiteral(8388))
-8388 -7581 -7590 -7595 0
8388 7595 0
8388 7590 0
8388 7591 0
8388 7593 0
8388 7581 0
8388 7581 7590 0
8388 7581 7591 0
8388 7581 7593 0
8388 7582 0
8388 7582 7590 0
8388 7582 7591 0
8388 7582 7593 0
c (((aux1861 + aux1864 + aux1865)<=1)=tv=SATLiteral(8389))
-8389 7620 0
-8389 7614 7619 0
-8389 7615 0
-8389 7617 0
-8389 7605 7619 0
-8389 7605 7614 0
-8389 7605 7615 0
-8389 7605 7617 0
-8389 7606 0
-8389 7606 7614 0
-8389 7606 7615 0
-8389 7606 7617 0
8389 -7606 -7614 -7619 0
8389 -7605 -7615 -7619 0
8389 -7605 -7614 -7620 0
c ((1<=(aux1861 + aux1864 + aux1865))=tv=SATLiteral(8390))
-8390 -7605 -7614 -7619 0
8390 7619 0
8390 7614 0
8390 7615 0
8390 7617 0
8390 7605 0
8390 7605 7614 0
8390 7605 7615 0
8390 7605 7617 0
8390 7606 0
8390 7606 7614 0
8390 7606 7615 0
8390 7606 7617 0
c (((aux1867 + aux1870 + aux1871)<=1)=tv=SATLiteral(8391))
-8391 7644 0
-8391 7638 7643 0
-8391 7639 0
-8391 7641 0
-8391 7629 7643 0
-8391 7629 7638 0
-8391 7629 7639 0
-8391 7629 7641 0
-8391 7630 0
-8391 7630 7638 0
-8391 7630 7639 0
-8391 7630 7641 0
8391 -7630 -7638 -7643 0
8391 -7629 -7639 -7643 0
8391 -7629 -7638 -7644 0
c ((1<=(aux1867 + aux1870 + aux1871))=tv=SATLiteral(8392))
-8392 -7629 -7638 -7643 0
8392 7643 0
8392 7638 0
8392 7639 0
8392 7641 0
8392 7629 0
8392 7629 7638 0
8392 7629 7639 0
8392 7629 7641 0
8392 7630 0
8392 7630 7638 0
8392 7630 7639 0
8392 7630 7641 0
c (((aux1873 + aux1876 + aux1877)<=1)=tv=SATLiteral(8393))
-8393 7668 0
-8393 7662 7667 0
-8393 7663 0
-8393 7665 0
-8393 7653 7667 0
-8393 7653 7662 0
-8393 7653 7663 0
-8393 7653 7665 0
-8393 7654 0
-8393 7654 7662 0
-8393 7654 7663 0
-8393 7654 7665 0
8393 -7654 -7662 -7667 0
8393 -7653 -7663 -7667 0
8393 -7653 -7662 -7668 0
c ((1<=(aux1873 + aux1876 + aux1877))=tv=SATLiteral(8394))
-8394 -7653 -7662 -7667 0
8394 7667 0
8394 7662 0
8394 7663 0
8394 7665 0
8394 7653 0
8394 7653 7662 0
8394 7653 7663 0
8394 7653 7665 0
8394 7654 0
8394 7654 7662 0
8394 7654 7663 0
8394 7654 7665 0
c (((aux1879 + aux1882 + aux1883)<=1)=tv=SATLiteral(8395))
-8395 7692 0
-8395 7686 7691 0
-8395 7687 0
-8395 7689 0
-8395 7677 7691 0
-8395 7677 7686 0
-8395 7677 7687 0
-8395 7677 7689 0
-8395 7678 0
-8395 7678 7686 0
-8395 7678 7687 0
-8395 7678 7689 0
8395 -7678 -7686 -7691 0
8395 -7677 -7687 -7691 0
8395 -7677 -7686 -7692 0
c ((1<=(aux1879 + aux1882 + aux1883))=tv=SATLiteral(8396))
-8396 -7677 -7686 -7691 0
8396 7691 0
8396 7686 0
8396 7687 0
8396 7689 0
8396 7677 0
8396 7677 7686 0
8396 7677 7687 0
8396 7677 7689 0
8396 7678 0
8396 7678 7686 0
8396 7678 7687 0
8396 7678 7689 0
c (((aux1885 + aux1888 + aux1889)<=1)=tv=SATLiteral(8397))
-8397 7716 0
-8397 7710 7715 0
-8397 7711 0
-8397 7713 0
-8397 7701 7715 0
-8397 7701 7710 0
-8397 7701 7711 0
-8397 7701 7713 0
-8397 7702 0
-8397 7702 7710 0
-8397 7702 7711 0
-8397 7702 7713 0
8397 -7702 -7710 -7715 0
8397 -7701 -7711 -7715 0
8397 -7701 -7710 -7716 0
c ((1<=(aux1885 + aux1888 + aux1889))=tv=SATLiteral(8398))
-8398 -7701 -7710 -7715 0
8398 7715 0
8398 7710 0
8398 7711 0
8398 7713 0
8398 7701 0
8398 7701 7710 0
8398 7701 7711 0
8398 7701 7713 0
8398 7702 0
8398 7702 7710 0
8398 7702 7711 0
8398 7702 7713 0
c ((SATLiteral(7857) /\ SATLiteral(7858))=tv=SATLiteral(1308))
1308 -7857 -7858 0
7857 -1308 0
7858 -1308 0
c ((SATLiteral(7859) /\ SATLiteral(7860))=tv=SATLiteral(1309))
1309 -7859 -7860 0
7859 -1309 0
7860 -1309 0
c ((SATLiteral(7861) /\ SATLiteral(7862))=tv=SATLiteral(1310))
1310 -7861 -7862 0
7861 -1310 0
7862 -1310 0
c ((SATLiteral(7863) /\ SATLiteral(7864))=tv=SATLiteral(1311))
1311 -7863 -7864 0
7863 -1311 0
7864 -1311 0
c ((SATLiteral(7865) /\ SATLiteral(7866))=tv=SATLiteral(1312))
1312 -7865 -7866 0
7865 -1312 0
7866 -1312 0
c ((SATLiteral(7867) /\ SATLiteral(7868))=tv=SATLiteral(1313))
1313 -7867 -7868 0
7867 -1313 0
7868 -1313 0
c ((SATLiteral(7869) /\ SATLiteral(7870))=tv=SATLiteral(1314))
1314 -7869 -7870 0
7869 -1314 0
7870 -1314 0
c ((SATLiteral(7871) /\ SATLiteral(7872))=tv=SATLiteral(1315))
1315 -7871 -7872 0
7871 -1315 0
7872 -1315 0
c ((SATLiteral(7873) /\ SATLiteral(7874))=tv=SATLiteral(1316))
1316 -7873 -7874 0
7873 -1316 0
7874 -1316 0
c ((SATLiteral(7875) /\ SATLiteral(7876))=tv=SATLiteral(1317))
1317 -7875 -7876 0
7875 -1317 0
7876 -1317 0
c ((SATLiteral(7877) /\ SATLiteral(7878))=tv=SATLiteral(1318))
1318 -7877 -7878 0
7877 -1318 0
7878 -1318 0
c ((SATLiteral(7879) /\ SATLiteral(7880))=tv=SATLiteral(1319))
1319 -7879 -7880 0
7879 -1319 0
7880 -1319 0
c ((SATLiteral(7881) /\ SATLiteral(7882))=tv=SATLiteral(1320))
1320 -7881 -7882 0
7881 -1320 0
7882 -1320 0
c ((SATLiteral(7883) /\ SATLiteral(7884))=tv=SATLiteral(1321))
1321 -7883 -7884 0
7883 -1321 0
7884 -1321 0
c ((SATLiteral(7885) /\ SATLiteral(7886))=tv=SATLiteral(1322))
1322 -7885 -7886 0
7885 -1322 0
7886 -1322 0
c ((SATLiteral(7887) /\ SATLiteral(7888))=tv=SATLiteral(1323))
1323 -7887 -7888 0
7887 -1323 0
7888 -1323 0
c ((SATLiteral(7889) /\ SATLiteral(7890))=tv=SATLiteral(1324))
1324 -7889 -7890 0
7889 -1324 0
7890 -1324 0
c ((SATLiteral(7891) /\ SATLiteral(7892))=tv=SATLiteral(1325))
1325 -7891 -7892 0
7891 -1325 0
7892 -1325 0
c ((SATLiteral(7893) /\ SATLiteral(7894))=tv=SATLiteral(1326))
1326 -7893 -7894 0
7893 -1326 0
7894 -1326 0
c ((SATLiteral(7895) /\ SATLiteral(7896))=tv=SATLiteral(1327))
1327 -7895 -7896 0
7895 -1327 0
7896 -1327 0
c ((SATLiteral(7897) /\ SATLiteral(7898))=tv=SATLiteral(1328))
1328 -7897 -7898 0
7897 -1328 0
7898 -1328 0
c ((SATLiteral(7899) /\ SATLiteral(7900))=tv=SATLiteral(1329))
1329 -7899 -7900 0
7899 -1329 0
7900 -1329 0
c ((SATLiteral(7901) /\ SATLiteral(7902))=tv=SATLiteral(1330))
1330 -7901 -7902 0
7901 -1330 0
7902 -1330 0
c ((SATLiteral(7903) /\ SATLiteral(7904))=tv=SATLiteral(1331))
1331 -7903 -7904 0
7903 -1331 0
7904 -1331 0
c ((SATLiteral(7905) /\ SATLiteral(7906))=tv=SATLiteral(1332))
1332 -7905 -7906 0
7905 -1332 0
7906 -1332 0
c ((SATLiteral(7907) /\ SATLiteral(7908))=tv=SATLiteral(1333))
1333 -7907 -7908 0
7907 -1333 0
7908 -1333 0
c ((SATLiteral(7909) /\ SATLiteral(7910))=tv=SATLiteral(1334))
1334 -7909 -7910 0
7909 -1334 0
7910 -1334 0
c ((SATLiteral(7911) /\ SATLiteral(7912))=tv=SATLiteral(1335))
1335 -7911 -7912 0
7911 -1335 0
7912 -1335 0
c ((x_00001_00005 != x_00001_00006)=tv=SATLiteral(1336))
-62 77 1336 0
-64 79 1336 0
-66 81 1336 0
-68 83 1336 0
-70 85 1336 0
-72 87 1336 0
-74 89 1336 0
-76 91 1336 0
75 -90 1336 0
-77 62 1336 0
-79 64 1336 0
-81 66 1336 0
-83 68 1336 0
-85 70 1336 0
-87 72 1336 0
-89 74 1336 0
-91 76 1336 0
90 -75 1336 0
-62 -77 -1336 0
-64 -79 -1336 0
-66 -81 -1336 0
-68 -83 -1336 0
-70 -85 -1336 0
-72 -87 -1336 0
-74 -89 -1336 0
-76 -91 -1336 0
75 90 -1336 0
c ((x_00001_00007 != x_00001_00008)=tv=SATLiteral(1337))
-92 107 1337 0
-94 109 1337 0
-96 111 1337 0
-98 113 1337 0
-100 115 1337 0
-102 117 1337 0
-104 119 1337 0
-106 121 1337 0
105 -120 1337 0
-107 92 1337 0
-109 94 1337 0
-111 96 1337 0
-113 98 1337 0
-115 100 1337 0
-117 102 1337 0
-119 104 1337 0
-121 106 1337 0
120 -105 1337 0
-92 -107 -1337 0
-94 -109 -1337 0
-96 -111 -1337 0
-98 -113 -1337 0
-100 -115 -1337 0
-102 -117 -1337 0
-104 -119 -1337 0
-106 -121 -1337 0
105 120 -1337 0
c ((x_00002_00005 != x_00002_00006)=tv=SATLiteral(1338))
-197 212 1338 0
-199 214 1338 0
-201 216 1338 0
-203 218 1338 0
-205 220 1338 0
-207 222 1338 0
-209 224 1338 0
-211 226 1338 0
210 -225 1338 0
-212 197 1338 0
-214 199 1338 0
-216 201 1338 0
-218 203 1338 0
-220 205 1338 0
-222 207 1338 0
-224 209 1338 0
-226 211 1338 0
225 -210 1338 0
-197 -212 -1338 0
-199 -214 -1338 0
-201 -216 -1338 0
-203 -218 -1338 0
-205 -220 -1338 0
-207 -222 -1338 0
-209 -224 -1338 0
-211 -226 -1338 0
210 225 -1338 0
c ((x_00003_00001 != x_00003_00002)=tv=SATLiteral(1339))
-272 287 1339 0
-274 289 1339 0
-276 291 1339 0
-278 293 1339 0
-280 295 1339 0
-282 297 1339 0
-284 299 1339 0
-286 301 1339 0
285 -300 1339 0
-287 272 1339 0
-289 274 1339 0
-291 276 1339 0
-293 278 1339 0
-295 280 1339 0
-297 282 1339 0
-299 284 1339 0
-301 286 1339 0
300 -285 1339 0
-272 -287 -1339 0
-274 -289 -1339 0
-276 -291 -1339 0
-278 -293 -1339 0
-280 -295 -1339 0
-282 -297 -1339 0
-284 -299 -1339 0
-286 -301 -1339 0
285 300 -1339 0
c ((x_00003_00005 != x_00003_00006)=tv=SATLiteral(1340))
-332 347 1340 0
-334 349 1340 0
-336 351 1340 0
-338 353 1340 0
-340 355 1340 0
-342 357 1340 0
-344 359 1340 0
-346 361 1340 0
345 -360 1340 0
-347 332 1340 0
-349 334 1340 0
-351 336 1340 0
-353 338 1340 0
-355 340 1340 0
-357 342 1340 0
-359 344 1340 0
-361 346 1340 0
360 -345 1340 0
-332 -347 -1340 0
-334 -349 -1340 0
-336 -351 -1340 0
-338 -353 -1340 0
-340 -355 -1340 0
-342 -357 -1340 0
-344 -359 -1340 0
-346 -361 -1340 0
345 360 -1340 0
c ((x_00004_00002 != x_00004_00003)=tv=SATLiteral(1341))
-422 437 1341 0
-424 439 1341 0
-426 441 1341 0
-428 443 1341 0
-430 445 1341 0
-432 447 1341 0
-434 449 1341 0
-436 451 1341 0
435 -450 1341 0
-437 422 1341 0
-439 424 1341 0
-441 426 1341 0
-443 428 1341 0
-445 430 1341 0
-447 432 1341 0
-449 434 1341 0
-451 436 1341 0
450 -435 1341 0
-422 -437 -1341 0
-424 -439 -1341 0
-426 -441 -1341 0
-428 -443 -1341 0
-430 -445 -1341 0
-432 -447 -1341 0
-434 -449 -1341 0
-436 -451 -1341 0
435 450 -1341 0
c ((x_00006_00007 != x_00006_00008)=tv=SATLiteral(1342))
-767 782 1342 0
-769 784 1342 0
-771 786 1342 0
-773 788 1342 0
-775 790 1342 0
-777 792 1342 0
-779 794 1342 0
-781 796 1342 0
780 -795 1342 0
-782 767 1342 0
-784 769 1342 0
-786 771 1342 0
-788 773 1342 0
-790 775 1342 0
-792 777 1342 0
-794 779 1342 0
-796 781 1342 0
795 -780 1342 0
-767 -782 -1342 0
-769 -784 -1342 0
-771 -786 -1342 0
-773 -788 -1342 0
-775 -790 -1342 0
-777 -792 -1342 0
-779 -794 -1342 0
-781 -796 -1342 0
780 795 -1342 0
c ((x_00007_00004 != x_00007_00005)=tv=SATLiteral(1343))
-857 872 1343 0
-859 874 1343 0
-861 876 1343 0
-863 878 1343 0
-865 880 1343 0
-867 882 1343 0
-869 884 1343 0
-871 886 1343 0
870 -885 1343 0
-872 857 1343 0
-874 859 1343 0
-876 861 1343 0
-878 863 1343 0
-880 865 1343 0
-882 867 1343 0
-884 869 1343 0
-886 871 1343 0
885 -870 1343 0
-857 -872 -1343 0
-859 -874 -1343 0
-861 -876 -1343 0
-863 -878 -1343 0
-865 -880 -1343 0
-867 -882 -1343 0
-869 -884 -1343 0
-871 -886 -1343 0
870 885 -1343 0
c ((x_00007_00008 != x_00007_00009)=tv=SATLiteral(1344))
-917 932 1344 0
-919 934 1344 0
-921 936 1344 0
-923 938 1344 0
-925 940 1344 0
-927 942 1344 0
-929 944 1344 0
-931 946 1344 0
930 -945 1344 0
-932 917 1344 0
-934 919 1344 0
-936 921 1344 0
-938 923 1344 0
-940 925 1344 0
-942 927 1344 0
-944 929 1344 0
-946 931 1344 0
945 -930 1344 0
-917 -932 -1344 0
-919 -934 -1344 0
-921 -936 -1344 0
-923 -938 -1344 0
-925 -940 -1344 0
-927 -942 -1344 0
-929 -944 -1344 0
-931 -946 -1344 0
930 945 -1344 0
c ((x_00008_00004 != x_00008_00005)=tv=SATLiteral(1345))
-992 1007 1345 0
-994 1009 1345 0
-996 1011 1345 0
-998 1013 1345 0
-1000 1015 1345 0
-1002 1017 1345 0
-1004 1019 1345 0
-1006 1021 1345 0
1005 -1020 1345 0
-1007 992 1345 0
-1009 994 1345 0
-1011 996 1345 0
-1013 998 1345 0
-1015 1000 1345 0
-1017 1002 1345 0
-1019 1004 1345 0
-1021 1006 1345 0
1020 -1005 1345 0
-992 -1007 -1345 0
-994 -1009 -1345 0
-996 -1011 -1345 0
-998 -1013 -1345 0
-1000 -1015 -1345 0
-1002 -1017 -1345 0
-1004 -1019 -1345 0
-1006 -1021 -1345 0
1005 1020 -1345 0
c ((x_00009_00002 != x_00009_00003)=tv=SATLiteral(1346))
-1097 1112 1346 0
-1099 1114 1346 0
-1101 1116 1346 0
-1103 1118 1346 0
-1105 1120 1346 0
-1107 1122 1346 0
-1109 1124 1346 0
-1111 1126 1346 0
1110 -1125 1346 0
-1112 1097 1346 0
-1114 1099 1346 0
-1116 1101 1346 0
-1118 1103 1346 0
-1120 1105 1346 0
-1122 1107 1346 0
-1124 1109 1346 0
-1126 1111 1346 0
1125 -1110 1346 0
-1097 -1112 -1346 0
-1099 -1114 -1346 0
-1101 -1116 -1346 0
-1103 -1118 -1346 0
-1105 -1120 -1346 0
-1107 -1122 -1346 0
-1109 -1124 -1346 0
-1111 -1126 -1346 0
1110 1125 -1346 0
c ((x_00009_00004 != x_00009_00005)=tv=SATLiteral(1347))
-1127 1142 1347 0
-1129 1144 1347 0
-1131 1146 1347 0
-1133 1148 1347 0
-1135 1150 1347 0
-1137 1152 1347 0
-1139 1154 1347 0
-1141 1156 1347 0
1140 -1155 1347 0
-1142 1127 1347 0
-1144 1129 1347 0
-1146 1131 1347 0
-1148 1133 1347 0
-1150 1135 1347 0
-1152 1137 1347 0
-1154 1139 1347 0
-1156 1141 1347 0
1155 -1140 1347 0
-1127 -1142 -1347 0
-1129 -1144 -1347 0
-1131 -1146 -1347 0
-1133 -1148 -1347 0
-1135 -1150 -1347 0
-1137 -1152 -1347 0
-1139 -1154 -1347 0
-1141 -1156 -1347 0
1140 1155 -1347 0
c ((SATLiteral(7913) /\ SATLiteral(7914))=tv=SATLiteral(1348))
1348 -7913 -7914 0
7913 -1348 0
7914 -1348 0
c ((SATLiteral(7915) /\ SATLiteral(7916))=tv=SATLiteral(1349))
1349 -7915 -7916 0
7915 -1349 0
7916 -1349 0
c ((SATLiteral(7917) /\ SATLiteral(7918))=tv=SATLiteral(1350))
1350 -7917 -7918 0
7917 -1350 0
7918 -1350 0
c ((SATLiteral(7919) /\ SATLiteral(7920))=tv=SATLiteral(1351))
1351 -7919 -7920 0
7919 -1351 0
7920 -1351 0
c ((SATLiteral(7921) /\ SATLiteral(7922))=tv=SATLiteral(1352))
1352 -7921 -7922 0
7921 -1352 0
7922 -1352 0
c ((SATLiteral(7923) /\ SATLiteral(7924))=tv=SATLiteral(1353))
1353 -7923 -7924 0
7923 -1353 0
7924 -1353 0
c ((SATLiteral(7925) /\ SATLiteral(7926))=tv=SATLiteral(1354))
1354 -7925 -7926 0
7925 -1354 0
7926 -1354 0
c ((SATLiteral(7927) /\ SATLiteral(7928))=tv=SATLiteral(1355))
1355 -7927 -7928 0
7927 -1355 0
7928 -1355 0
c ((SATLiteral(7929) /\ SATLiteral(7930))=tv=SATLiteral(1356))
1356 -7929 -7930 0
7929 -1356 0
7930 -1356 0
c ((SATLiteral(7931) /\ SATLiteral(7932))=tv=SATLiteral(1357))
1357 -7931 -7932 0
7931 -1357 0
7932 -1357 0
c ((SATLiteral(7933) /\ SATLiteral(7934))=tv=SATLiteral(1358))
1358 -7933 -7934 0
7933 -1358 0
7934 -1358 0
c ((SATLiteral(7935) /\ SATLiteral(7936))=tv=SATLiteral(1359))
1359 -7935 -7936 0
7935 -1359 0
7936 -1359 0
c ((SATLiteral(7937) /\ SATLiteral(7938))=tv=SATLiteral(1360))
1360 -7937 -7938 0
7937 -1360 0
7938 -1360 0
c ((SATLiteral(7939) /\ SATLiteral(7940))=tv=SATLiteral(1361))
1361 -7939 -7940 0
7939 -1361 0
7940 -1361 0
c ((SATLiteral(7941) /\ SATLiteral(7942))=tv=SATLiteral(1362))
1362 -7941 -7942 0
7941 -1362 0
7942 -1362 0
c ((SATLiteral(7943) /\ SATLiteral(7944))=tv=SATLiteral(1363))
1363 -7943 -7944 0
7943 -1363 0
7944 -1363 0
c ((SATLiteral(7945) /\ SATLiteral(7946))=tv=SATLiteral(1364))
1364 -7945 -7946 0
7945 -1364 0
7946 -1364 0
c ((SATLiteral(7947) /\ SATLiteral(7948))=tv=SATLiteral(1365))
1365 -7947 -7948 0
7947 -1365 0
7948 -1365 0
c ((SATLiteral(7949) /\ SATLiteral(7950))=tv=SATLiteral(1366))
1366 -7949 -7950 0
7949 -1366 0
7950 -1366 0
c ((SATLiteral(7951) /\ SATLiteral(7952))=tv=SATLiteral(1367))
1367 -7951 -7952 0
7951 -1367 0
7952 -1367 0
c ((SATLiteral(7953) /\ SATLiteral(7954))=tv=SATLiteral(1368))
1368 -7953 -7954 0
7953 -1368 0
7954 -1368 0
c ((SATLiteral(7955) /\ SATLiteral(7956))=tv=SATLiteral(1369))
1369 -7955 -7956 0
7955 -1369 0
7956 -1369 0
c ((SATLiteral(7957) /\ SATLiteral(7958))=tv=SATLiteral(1370))
1370 -7957 -7958 0
7957 -1370 0
7958 -1370 0
c ((SATLiteral(7959) /\ SATLiteral(7960))=tv=SATLiteral(1371))
1371 -7959 -7960 0
7959 -1371 0
7960 -1371 0
c ((SATLiteral(7961) /\ SATLiteral(7962))=tv=SATLiteral(1372))
1372 -7961 -7962 0
7961 -1372 0
7962 -1372 0
c ((SATLiteral(7963) /\ SATLiteral(7964))=tv=SATLiteral(1373))
1373 -7963 -7964 0
7963 -1373 0
7964 -1373 0
c ((SATLiteral(7965) /\ SATLiteral(7966))=tv=SATLiteral(1374))
1374 -7965 -7966 0
7965 -1374 0
7966 -1374 0
c ((SATLiteral(7967) /\ SATLiteral(7968))=tv=SATLiteral(1375))
1375 -7967 -7968 0
7967 -1375 0
7968 -1375 0
c ((SATLiteral(7969) /\ SATLiteral(7970))=tv=SATLiteral(1376))
1376 -7969 -7970 0
7969 -1376 0
7970 -1376 0
c ((SATLiteral(7971) /\ SATLiteral(7972))=tv=SATLiteral(1377))
1377 -7971 -7972 0
7971 -1377 0
7972 -1377 0
c ((SATLiteral(7973) /\ SATLiteral(7974))=tv=SATLiteral(1378))
1378 -7973 -7974 0
7973 -1378 0
7974 -1378 0
c ((SATLiteral(7975) /\ SATLiteral(7976))=tv=SATLiteral(1379))
1379 -7975 -7976 0
7975 -1379 0
7976 -1379 0
c ((SATLiteral(7977) /\ SATLiteral(7978))=tv=SATLiteral(1380))
1380 -7977 -7978 0
7977 -1380 0
7978 -1380 0
c ((SATLiteral(7979) /\ SATLiteral(7980))=tv=SATLiteral(1381))
1381 -7979 -7980 0
7979 -1381 0
7980 -1381 0
c ((SATLiteral(7981) /\ SATLiteral(7982))=tv=SATLiteral(1382))
1382 -7981 -7982 0
7981 -1382 0
7982 -1382 0
c ((SATLiteral(7983) /\ SATLiteral(7984))=tv=SATLiteral(1383))
1383 -7983 -7984 0
7983 -1383 0
7984 -1383 0
c ((SATLiteral(7985) /\ SATLiteral(7986))=tv=SATLiteral(1384))
1384 -7985 -7986 0
7985 -1384 0
7986 -1384 0
c ((SATLiteral(7987) /\ SATLiteral(7988))=tv=SATLiteral(1385))
1385 -7987 -7988 0
7987 -1385 0
7988 -1385 0
c ((SATLiteral(7989) /\ SATLiteral(7990))=tv=SATLiteral(1386))
1386 -7989 -7990 0
7989 -1386 0
7990 -1386 0
c ((SATLiteral(7991) /\ SATLiteral(7992))=tv=SATLiteral(1387))
1387 -7991 -7992 0
7991 -1387 0
7992 -1387 0
c ((SATLiteral(7993) /\ SATLiteral(7994))=tv=SATLiteral(1388))
1388 -7993 -7994 0
7993 -1388 0
7994 -1388 0
c ((SATLiteral(7995) /\ SATLiteral(7996))=tv=SATLiteral(1389))
1389 -7995 -7996 0
7995 -1389 0
7996 -1389 0
c ((SATLiteral(7997) /\ SATLiteral(7998))=tv=SATLiteral(1390))
1390 -7997 -7998 0
7997 -1390 0
7998 -1390 0
c ((SATLiteral(7999) /\ SATLiteral(8000))=tv=SATLiteral(1391))
1391 -7999 -8000 0
7999 -1391 0
8000 -1391 0
c ((SATLiteral(8001) /\ SATLiteral(8002))=tv=SATLiteral(1392))
1392 -8001 -8002 0
8001 -1392 0
8002 -1392 0
c ((SATLiteral(8003) /\ SATLiteral(8004))=tv=SATLiteral(1393))
1393 -8003 -8004 0
8003 -1393 0
8004 -1393 0
c ((SATLiteral(8005) /\ SATLiteral(8006))=tv=SATLiteral(1394))
1394 -8005 -8006 0
8005 -1394 0
8006 -1394 0
c ((SATLiteral(8007) /\ SATLiteral(8008))=tv=SATLiteral(1395))
1395 -8007 -8008 0
8007 -1395 0
8008 -1395 0
c ((SATLiteral(8009) /\ SATLiteral(8010))=tv=SATLiteral(1396))
1396 -8009 -8010 0
8009 -1396 0
8010 -1396 0
c ((SATLiteral(8011) /\ SATLiteral(8012))=tv=SATLiteral(1397))
1397 -8011 -8012 0
8011 -1397 0
8012 -1397 0
c ((SATLiteral(8013) /\ SATLiteral(8014))=tv=SATLiteral(1398))
1398 -8013 -8014 0
8013 -1398 0
8014 -1398 0
c ((SATLiteral(8015) /\ SATLiteral(8016))=tv=SATLiteral(1399))
1399 -8015 -8016 0
8015 -1399 0
8016 -1399 0
c ((SATLiteral(8017) /\ SATLiteral(8018))=tv=SATLiteral(1400))
1400 -8017 -8018 0
8017 -1400 0
8018 -1400 0
c ((SATLiteral(8019) /\ SATLiteral(8020))=tv=SATLiteral(1401))
1401 -8019 -8020 0
8019 -1401 0
8020 -1401 0
c ((SATLiteral(8021) /\ SATLiteral(8022))=tv=SATLiteral(1402))
1402 -8021 -8022 0
8021 -1402 0
8022 -1402 0
c ((SATLiteral(8023) /\ SATLiteral(8024))=tv=SATLiteral(1403))
1403 -8023 -8024 0
8023 -1403 0
8024 -1403 0
c ((SATLiteral(8025) /\ SATLiteral(8026))=tv=SATLiteral(1404))
1404 -8025 -8026 0
8025 -1404 0
8026 -1404 0
c ((SATLiteral(8027) /\ SATLiteral(8028))=tv=SATLiteral(1405))
1405 -8027 -8028 0
8027 -1405 0
8028 -1405 0
c ((SATLiteral(8029) /\ SATLiteral(8030))=tv=SATLiteral(1406))
1406 -8029 -8030 0
8029 -1406 0
8030 -1406 0
c ((SATLiteral(8031) /\ SATLiteral(8032))=tv=SATLiteral(1407))
1407 -8031 -8032 0
8031 -1407 0
8032 -1407 0
c ((SATLiteral(8033) /\ SATLiteral(8034))=tv=SATLiteral(1408))
1408 -8033 -8034 0
8033 -1408 0
8034 -1408 0
c ((SATLiteral(8035) /\ SATLiteral(8036))=tv=SATLiteral(1409))
1409 -8035 -8036 0
8035 -1409 0
8036 -1409 0
c ((SATLiteral(8037) /\ SATLiteral(8038))=tv=SATLiteral(1410))
1410 -8037 -8038 0
8037 -1410 0
8038 -1410 0
c ((SATLiteral(8039) /\ SATLiteral(8040))=tv=SATLiteral(1411))
1411 -8039 -8040 0
8039 -1411 0
8040 -1411 0
c ((SATLiteral(8041) /\ SATLiteral(8042))=tv=SATLiteral(1412))
1412 -8041 -8042 0
8041 -1412 0
8042 -1412 0
c ((SATLiteral(8043) /\ SATLiteral(8044))=tv=SATLiteral(1413))
1413 -8043 -8044 0
8043 -1413 0
8044 -1413 0
c ((SATLiteral(8045) /\ SATLiteral(8046))=tv=SATLiteral(1414))
1414 -8045 -8046 0
8045 -1414 0
8046 -1414 0
c ((SATLiteral(8047) /\ SATLiteral(8048))=tv=SATLiteral(1415))
1415 -8047 -8048 0
8047 -1415 0
8048 -1415 0
c ((SATLiteral(8049) /\ SATLiteral(8050))=tv=SATLiteral(1416))
1416 -8049 -8050 0
8049 -1416 0
8050 -1416 0
c ((SATLiteral(8051) /\ SATLiteral(8052))=tv=SATLiteral(1417))
1417 -8051 -8052 0
8051 -1417 0
8052 -1417 0
c ((SATLiteral(8053) /\ SATLiteral(8054))=tv=SATLiteral(1418))
1418 -8053 -8054 0
8053 -1418 0
8054 -1418 0
c ((SATLiteral(8055) /\ SATLiteral(8056))=tv=SATLiteral(1419))
1419 -8055 -8056 0
8055 -1419 0
8056 -1419 0
c ((SATLiteral(8057) /\ SATLiteral(8058))=tv=SATLiteral(1420))
1420 -8057 -8058 0
8057 -1420 0
8058 -1420 0
c ((SATLiteral(8059) /\ SATLiteral(8060))=tv=SATLiteral(1421))
1421 -8059 -8060 0
8059 -1421 0
8060 -1421 0
c ((SATLiteral(8061) /\ SATLiteral(8062))=tv=SATLiteral(1422))
1422 -8061 -8062 0
8061 -1422 0
8062 -1422 0
c ((SATLiteral(8063) /\ SATLiteral(8064))=tv=SATLiteral(1423))
1423 -8063 -8064 0
8063 -1423 0
8064 -1423 0
c ((SATLiteral(8065) /\ SATLiteral(8066))=tv=SATLiteral(1424))
1424 -8065 -8066 0
8065 -1424 0
8066 -1424 0
c ((SATLiteral(8067) /\ SATLiteral(8068))=tv=SATLiteral(1425))
1425 -8067 -8068 0
8067 -1425 0
8068 -1425 0
c ((SATLiteral(8069) /\ SATLiteral(8070))=tv=SATLiteral(1426))
1426 -8069 -8070 0
8069 -1426 0
8070 -1426 0
c ((SATLiteral(8071) /\ SATLiteral(8072))=tv=SATLiteral(1427))
1427 -8071 -8072 0
8071 -1427 0
8072 -1427 0
c ((SATLiteral(8073) /\ SATLiteral(8074))=tv=SATLiteral(1428))
1428 -8073 -8074 0
8073 -1428 0
8074 -1428 0
c ((SATLiteral(8075) /\ SATLiteral(8076))=tv=SATLiteral(1429))
1429 -8075 -8076 0
8075 -1429 0
8076 -1429 0
c ((SATLiteral(8077) /\ SATLiteral(8078))=tv=SATLiteral(1430))
1430 -8077 -8078 0
8077 -1430 0
8078 -1430 0
c ((SATLiteral(8079) /\ SATLiteral(8080))=tv=SATLiteral(1431))
1431 -8079 -8080 0
8079 -1431 0
8080 -1431 0
c ((SATLiteral(8081) /\ SATLiteral(8082))=tv=SATLiteral(1432))
1432 -8081 -8082 0
8081 -1432 0
8082 -1432 0
c ((SATLiteral(8083) /\ SATLiteral(8084))=tv=SATLiteral(1433))
1433 -8083 -8084 0
8083 -1433 0
8084 -1433 0
c ((SATLiteral(8085) /\ SATLiteral(8086))=tv=SATLiteral(1434))
1434 -8085 -8086 0
8085 -1434 0
8086 -1434 0
c ((SATLiteral(8087) /\ SATLiteral(8088))=tv=SATLiteral(1435))
1435 -8087 -8088 0
8087 -1435 0
8088 -1435 0
c ((SATLiteral(8089) /\ SATLiteral(8090))=tv=SATLiteral(1436))
1436 -8089 -8090 0
8089 -1436 0
8090 -1436 0
c ((SATLiteral(8091) /\ SATLiteral(8092))=tv=SATLiteral(1437))
1437 -8091 -8092 0
8091 -1437 0
8092 -1437 0
c ((SATLiteral(8093) /\ SATLiteral(8094))=tv=SATLiteral(1438))
1438 -8093 -8094 0
8093 -1438 0
8094 -1438 0
c ((SATLiteral(8095) /\ SATLiteral(8096))=tv=SATLiteral(1439))
1439 -8095 -8096 0
8095 -1439 0
8096 -1439 0
c ((SATLiteral(8097) /\ SATLiteral(8098))=tv=SATLiteral(1440))
1440 -8097 -8098 0
8097 -1440 0
8098 -1440 0
c ((SATLiteral(8099) /\ SATLiteral(8100))=tv=SATLiteral(1441))
1441 -8099 -8100 0
8099 -1441 0
8100 -1441 0
c ((SATLiteral(8101) /\ SATLiteral(8102))=tv=SATLiteral(1442))
1442 -8101 -8102 0
8101 -1442 0
8102 -1442 0
c ((SATLiteral(8103) /\ SATLiteral(8104))=tv=SATLiteral(1443))
1443 -8103 -8104 0
8103 -1443 0
8104 -1443 0
c ((SATLiteral(8105) /\ SATLiteral(8106))=tv=SATLiteral(1444))
1444 -8105 -8106 0
8105 -1444 0
8106 -1444 0
c ((SATLiteral(8107) /\ SATLiteral(8108))=tv=SATLiteral(1445))
1445 -8107 -8108 0
8107 -1445 0
8108 -1445 0
c ((SATLiteral(8109) /\ SATLiteral(8110))=tv=SATLiteral(1446))
1446 -8109 -8110 0
8109 -1446 0
8110 -1446 0
c ((SATLiteral(8111) /\ SATLiteral(8112))=tv=SATLiteral(1447))
1447 -8111 -8112 0
8111 -1447 0
8112 -1447 0
c ((SATLiteral(8113) /\ SATLiteral(8114))=tv=SATLiteral(1448))
1448 -8113 -8114 0
8113 -1448 0
8114 -1448 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1449))
1449 -8115 -8116 0
8115 -1449 0
8116 -1449 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1450))
1450 -8117 -8118 0
8117 -1450 0
8118 -1450 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1451))
1451 -8119 -8120 0
8119 -1451 0
8120 -1451 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1452))
1452 -8121 -8122 0
8121 -1452 0
8122 -1452 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1453))
1453 -8123 -8124 0
8123 -1453 0
8124 -1453 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1454))
1454 -8125 -8126 0
8125 -1454 0
8126 -1454 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1455))
1455 -8127 -8128 0
8127 -1455 0
8128 -1455 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1456))
1456 -8129 -8130 0
8129 -1456 0
8130 -1456 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1457))
1457 -8131 -8132 0
8131 -1457 0
8132 -1457 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1458))
1458 -8133 -8134 0
8133 -1458 0
8134 -1458 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1459))
1459 -8135 -8136 0
8135 -1459 0
8136 -1459 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1460))
1460 -8137 -8138 0
8137 -1460 0
8138 -1460 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1461))
1461 -8139 -8140 0
8139 -1461 0
8140 -1461 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1462))
1462 -8141 -8142 0
8141 -1462 0
8142 -1462 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1463))
1463 -8143 -8144 0
8143 -1463 0
8144 -1463 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1464))
1464 -8145 -8146 0
8145 -1464 0
8146 -1464 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1465))
1465 -8147 -8148 0
8147 -1465 0
8148 -1465 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1466))
1466 -8149 -8150 0
8149 -1466 0
8150 -1466 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1467))
1467 -8151 -8152 0
8151 -1467 0
8152 -1467 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1468))
1468 -8153 -8154 0
8153 -1468 0
8154 -1468 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1469))
1469 -8155 -8156 0
8155 -1469 0
8156 -1469 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1470))
1470 -8157 -8158 0
8157 -1470 0
8158 -1470 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1471))
1471 -8159 -8160 0
8159 -1471 0
8160 -1471 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1472))
1472 -8161 -8162 0
8161 -1472 0
8162 -1472 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1473))
1473 -8163 -8164 0
8163 -1473 0
8164 -1473 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1474))
1474 -8165 -8166 0
8165 -1474 0
8166 -1474 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1475))
1475 -8167 -8168 0
8167 -1475 0
8168 -1475 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1476))
1476 -8169 -8170 0
8169 -1476 0
8170 -1476 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1477))
1477 -8171 -8172 0
8171 -1477 0
8172 -1477 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1478))
1478 -8173 -8174 0
8173 -1478 0
8174 -1478 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1479))
1479 -8175 -8176 0
8175 -1479 0
8176 -1479 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1480))
1480 -8177 -8178 0
8177 -1480 0
8178 -1480 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1481))
1481 -8179 -8180 0
8179 -1481 0
8180 -1481 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1482))
1482 -8181 -8182 0
8181 -1482 0
8182 -1482 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1483))
1483 -8183 -8184 0
8183 -1483 0
8184 -1483 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1484))
1484 -8185 -8186 0
8185 -1484 0
8186 -1484 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1485))
1485 -8187 -8188 0
8187 -1485 0
8188 -1485 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1486))
1486 -8189 -8190 0
8189 -1486 0
8190 -1486 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1487))
1487 -8191 -8192 0
8191 -1487 0
8192 -1487 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1488))
1488 -8193 -8194 0
8193 -1488 0
8194 -1488 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1489))
1489 -8195 -8196 0
8195 -1489 0
8196 -1489 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1490))
1490 -8197 -8198 0
8197 -1490 0
8198 -1490 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1491))
1491 -8199 -8200 0
8199 -1491 0
8200 -1491 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1492))
1492 -8201 -8202 0
8201 -1492 0
8202 -1492 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1493))
1493 -8203 -8204 0
8203 -1493 0
8204 -1493 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1494))
1494 -8205 -8206 0
8205 -1494 0
8206 -1494 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1495))
1495 -8207 -8208 0
8207 -1495 0
8208 -1495 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1496))
1496 -8209 -8210 0
8209 -1496 0
8210 -1496 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1497))
1497 -8211 -8212 0
8211 -1497 0
8212 -1497 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1498))
1498 -8213 -8214 0
8213 -1498 0
8214 -1498 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1499))
1499 -8215 -8216 0
8215 -1499 0
8216 -1499 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1500))
1500 -8217 -8218 0
8217 -1500 0
8218 -1500 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1501))
1501 -8219 -8220 0
8219 -1501 0
8220 -1501 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1502))
1502 -8221 -8222 0
8221 -1502 0
8222 -1502 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1503))
1503 -8223 -8224 0
8223 -1503 0
8224 -1503 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1504))
1504 -8225 -8226 0
8225 -1504 0
8226 -1504 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1505))
1505 -8227 -8228 0
8227 -1505 0
8228 -1505 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1506))
1506 -8229 -8230 0
8229 -1506 0
8230 -1506 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1507))
1507 -8231 -8232 0
8231 -1507 0
8232 -1507 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1508))
1508 -8233 -8234 0
8233 -1508 0
8234 -1508 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1509))
1509 -8235 -8236 0
8235 -1509 0
8236 -1509 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1510))
1510 -8237 -8238 0
8237 -1510 0
8238 -1510 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1511))
1511 -8239 -8240 0
8239 -1511 0
8240 -1511 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1512))
1512 -8241 -8242 0
8241 -1512 0
8242 -1512 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1513))
1513 -8243 -8244 0
8243 -1513 0
8244 -1513 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1514))
1514 -8245 -8246 0
8245 -1514 0
8246 -1514 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1515))
1515 -8247 -8248 0
8247 -1515 0
8248 -1515 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1516))
1516 -8249 -8250 0
8249 -1516 0
8250 -1516 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1517))
1517 -8251 -8252 0
8251 -1517 0
8252 -1517 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1518))
1518 -8253 -8254 0
8253 -1518 0
8254 -1518 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1519))
1519 -8255 -8256 0
8255 -1519 0
8256 -1519 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1520))
1520 -8257 -8258 0
8257 -1520 0
8258 -1520 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1521))
1521 -8259 -8260 0
8259 -1521 0
8260 -1521 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1522))
1522 -8261 -8262 0
8261 -1522 0
8262 -1522 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1523))
1523 -8263 -8264 0
8263 -1523 0
8264 -1523 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1524))
1524 -8265 -8266 0
8265 -1524 0
8266 -1524 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1525))
1525 -8267 -8268 0
8267 -1525 0
8268 -1525 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1526))
1526 -8269 -8270 0
8269 -1526 0
8270 -1526 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1527))
1527 -8271 -8272 0
8271 -1527 0
8272 -1527 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1528))
1528 -8273 -8274 0
8273 -1528 0
8274 -1528 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1529))
1529 -8275 -8276 0
8275 -1529 0
8276 -1529 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1530))
1530 -8277 -8278 0
8277 -1530 0
8278 -1530 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1531))
1531 -8279 -8280 0
8279 -1531 0
8280 -1531 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1532))
1532 -8281 -8282 0
8281 -1532 0
8282 -1532 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1533))
1533 -8283 -8284 0
8283 -1533 0
8284 -1533 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1534))
1534 -8285 -8286 0
8285 -1534 0
8286 -1534 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1535))
1535 -8287 -8288 0
8287 -1535 0
8288 -1535 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1536))
1536 -8289 -8290 0
8289 -1536 0
8290 -1536 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1537))
1537 -8291 -8292 0
8291 -1537 0
8292 -1537 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1538))
1538 -8293 -8294 0
8293 -1538 0
8294 -1538 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1539))
1539 -8295 -8296 0
8295 -1539 0
8296 -1539 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1540))
1540 -8297 -8298 0
8297 -1540 0
8298 -1540 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1541))
1541 -8299 -8300 0
8299 -1541 0
8300 -1541 0
c ((SATLiteral(8301) /\ SATLiteral(8302))=tv=SATLiteral(1542))
1542 -8301 -8302 0
8301 -1542 0
8302 -1542 0
c ((SATLiteral(8303) /\ SATLiteral(8304))=tv=SATLiteral(1543))
1543 -8303 -8304 0
8303 -1543 0
8304 -1543 0
c ((SATLiteral(8305) /\ SATLiteral(8306))=tv=SATLiteral(1544))
1544 -8305 -8306 0
8305 -1544 0
8306 -1544 0
c ((SATLiteral(8307) /\ SATLiteral(8308))=tv=SATLiteral(1545))
1545 -8307 -8308 0
8307 -1545 0
8308 -1545 0
c ((SATLiteral(8309) /\ SATLiteral(8310))=tv=SATLiteral(1546))
1546 -8309 -8310 0
8309 -1546 0
8310 -1546 0
c ((SATLiteral(8311) /\ SATLiteral(8312))=tv=SATLiteral(1547))
1547 -8311 -8312 0
8311 -1547 0
8312 -1547 0
c ((SATLiteral(8313) /\ SATLiteral(8314))=tv=SATLiteral(1548))
1548 -8313 -8314 0
8313 -1548 0
8314 -1548 0
c ((SATLiteral(8315) /\ SATLiteral(8316))=tv=SATLiteral(1549))
1549 -8315 -8316 0
8315 -1549 0
8316 -1549 0
c ((SATLiteral(8317) /\ SATLiteral(8318))=tv=SATLiteral(1550))
1550 -8317 -8318 0
8317 -1550 0
8318 -1550 0
c ((SATLiteral(8319) /\ SATLiteral(8320))=tv=SATLiteral(1551))
1551 -8319 -8320 0
8319 -1551 0
8320 -1551 0
c ((SATLiteral(8321) /\ SATLiteral(8322))=tv=SATLiteral(1552))
1552 -8321 -8322 0
8321 -1552 0
8322 -1552 0
c ((SATLiteral(8323) /\ SATLiteral(8324))=tv=SATLiteral(1553))
1553 -8323 -8324 0
8323 -1553 0
8324 -1553 0
c ((SATLiteral(8325) /\ SATLiteral(8326))=tv=SATLiteral(1554))
1554 -8325 -8326 0
8325 -1554 0
8326 -1554 0
c ((SATLiteral(8327) /\ SATLiteral(8328))=tv=SATLiteral(1555))
1555 -8327 -8328 0
8327 -1555 0
8328 -1555 0
c ((SATLiteral(8329) /\ SATLiteral(8330))=tv=SATLiteral(1556))
1556 -8329 -8330 0
8329 -1556 0
8330 -1556 0
c ((SATLiteral(8331) /\ SATLiteral(8332))=tv=SATLiteral(1557))
1557 -8331 -8332 0
8331 -1557 0
8332 -1557 0
c ((SATLiteral(8333) /\ SATLiteral(8334))=tv=SATLiteral(1558))
1558 -8333 -8334 0
8333 -1558 0
8334 -1558 0
c ((SATLiteral(8335) /\ SATLiteral(8336))=tv=SATLiteral(1559))
1559 -8335 -8336 0
8335 -1559 0
8336 -1559 0
c ((SATLiteral(8337) /\ SATLiteral(8338))=tv=SATLiteral(1560))
1560 -8337 -8338 0
8337 -1560 0
8338 -1560 0
c ((SATLiteral(8339) /\ SATLiteral(8340))=tv=SATLiteral(1561))
1561 -8339 -8340 0
8339 -1561 0
8340 -1561 0
c ((SATLiteral(8341) /\ SATLiteral(8342))=tv=SATLiteral(1562))
1562 -8341 -8342 0
8341 -1562 0
8342 -1562 0
c ((SATLiteral(8343) /\ SATLiteral(8344))=tv=SATLiteral(1563))
1563 -8343 -8344 0
8343 -1563 0
8344 -1563 0
c ((SATLiteral(8345) /\ SATLiteral(8346))=tv=SATLiteral(1564))
1564 -8345 -8346 0
8345 -1564 0
8346 -1564 0
c ((SATLiteral(8347) /\ SATLiteral(8348))=tv=SATLiteral(1565))
1565 -8347 -8348 0
8347 -1565 0
8348 -1565 0
c ((SATLiteral(8349) /\ SATLiteral(8350))=tv=SATLiteral(1566))
1566 -8349 -8350 0
8349 -1566 0
8350 -1566 0
c ((SATLiteral(8351) /\ SATLiteral(8352))=tv=SATLiteral(1567))
1567 -8351 -8352 0
8351 -1567 0
8352 -1567 0
c ((SATLiteral(8353) /\ SATLiteral(8354))=tv=SATLiteral(1568))
1568 -8353 -8354 0
8353 -1568 0
8354 -1568 0
c ((SATLiteral(8355) /\ SATLiteral(8356))=tv=SATLiteral(1569))
1569 -8355 -8356 0
8355 -1569 0
8356 -1569 0
c ((SATLiteral(8357) /\ SATLiteral(8358))=tv=SATLiteral(1570))
1570 -8357 -8358 0
8357 -1570 0
8358 -1570 0
c ((SATLiteral(8359) /\ SATLiteral(8360))=tv=SATLiteral(1571))
1571 -8359 -8360 0
8359 -1571 0
8360 -1571 0
c ((SATLiteral(8361) /\ SATLiteral(8362))=tv=SATLiteral(1572))
1572 -8361 -8362 0
8361 -1572 0
8362 -1572 0
c ((SATLiteral(8363) /\ SATLiteral(8364))=tv=SATLiteral(1573))
1573 -8363 -8364 0
8363 -1573 0
8364 -1573 0
c ((SATLiteral(8365) /\ SATLiteral(8366))=tv=SATLiteral(1574))
1574 -8365 -8366 0
8365 -1574 0
8366 -1574 0
c ((SATLiteral(8367) /\ SATLiteral(8368))=tv=SATLiteral(1575))
1575 -8367 -8368 0
8367 -1575 0
8368 -1575 0
c ((SATLiteral(8369) /\ SATLiteral(8370))=tv=SATLiteral(1576))
1576 -8369 -8370 0
8369 -1576 0
8370 -1576 0
c ((SATLiteral(8371) /\ SATLiteral(8372))=tv=SATLiteral(1577))
1577 -8371 -8372 0
8371 -1577 0
8372 -1577 0
c ((SATLiteral(8373) /\ SATLiteral(8374))=tv=SATLiteral(1578))
1578 -8373 -8374 0
8373 -1578 0
8374 -1578 0
c ((SATLiteral(8375) /\ SATLiteral(8376))=tv=SATLiteral(1579))
1579 -8375 -8376 0
8375 -1579 0
8376 -1579 0
c ((SATLiteral(8377) /\ SATLiteral(8378))=tv=SATLiteral(1580))
1580 -8377 -8378 0
8377 -1580 0
8378 -1580 0
c ((SATLiteral(8379) /\ SATLiteral(8380))=tv=SATLiteral(1581))
1581 -8379 -8380 0
8379 -1581 0
8380 -1581 0
c ((SATLiteral(8381) /\ SATLiteral(8382))=tv=SATLiteral(1582))
1582 -8381 -8382 0
8381 -1582 0
8382 -1582 0
c ((SATLiteral(8383) /\ SATLiteral(8384))=tv=SATLiteral(1583))
1583 -8383 -8384 0
8383 -1583 0
8384 -1583 0
c ((SATLiteral(8385) /\ SATLiteral(8386))=tv=SATLiteral(1584))
1584 -8385 -8386 0
8385 -1584 0
8386 -1584 0
c ((SATLiteral(8387) /\ SATLiteral(8388))=tv=SATLiteral(1585))
1585 -8387 -8388 0
8387 -1585 0
8388 -1585 0
c ((SATLiteral(8389) /\ SATLiteral(8390))=tv=SATLiteral(1586))
1586 -8389 -8390 0
8389 -1586 0
8390 -1586 0
c ((SATLiteral(8391) /\ SATLiteral(8392))=tv=SATLiteral(1587))
1587 -8391 -8392 0
8391 -1587 0
8392 -1587 0
c ((SATLiteral(8393) /\ SATLiteral(8394))=tv=SATLiteral(1588))
1588 -8393 -8394 0
8393 -1588 0
8394 -1588 0
c ((SATLiteral(8395) /\ SATLiteral(8396))=tv=SATLiteral(1589))
1589 -8395 -8396 0
8395 -1589 0
8396 -1589 0
c ((SATLiteral(8397) /\ SATLiteral(8398))=tv=SATLiteral(1590))
1590 -8397 -8398 0
8397 -1590 0
8398 -1590 0
c (((SATLiteral(17) + SATLiteral(32) + aux1890)<=1)=tv=SATLiteral(1591))
-1591 7723 0
-1591 -32 7722 0
-1591 -17 7722 0
-1591 -17 -32 0
1591 32 -7722 0
1591 17 -7722 0
1591 17 32 -7723 0
c (((SATLiteral(19) + SATLiteral(34) + aux1891)<=1)=tv=SATLiteral(1592))
-1592 7726 0
-1592 -34 7725 0
-1592 -19 7725 0
-1592 -19 -34 0
1592 34 -7725 0
1592 19 -7725 0
1592 19 34 -7726 0
c (((SATLiteral(21) + SATLiteral(36) + aux1892)<=1)=tv=SATLiteral(1593))
-1593 7729 0
-1593 -36 7728 0
-1593 -21 7728 0
-1593 -21 -36 0
1593 36 -7728 0
1593 21 -7728 0
1593 21 36 -7729 0
c (((SATLiteral(23) + SATLiteral(38) + aux1893)<=1)=tv=SATLiteral(1594))
-1594 7732 0
-1594 -38 7731 0
-1594 -23 7731 0
-1594 -23 -38 0
1594 38 -7731 0
1594 23 -7731 0
1594 23 38 -7732 0
c (((SATLiteral(25) + SATLiteral(40) + aux1894)<=1)=tv=SATLiteral(1595))
-1595 7735 0
-1595 -40 7734 0
-1595 -25 7734 0
-1595 -25 -40 0
1595 40 -7734 0
1595 25 -7734 0
1595 25 40 -7735 0
c (((SATLiteral(27) + SATLiteral(42) + aux1895)<=1)=tv=SATLiteral(1596))
-1596 7738 0
-1596 -42 7737 0
-1596 -27 7737 0
-1596 -27 -42 0
1596 42 -7737 0
1596 27 -7737 0
1596 27 42 -7738 0
c (((SATLiteral(29) + SATLiteral(44) + aux1896)<=1)=tv=SATLiteral(1597))
-1597 7741 0
-1597 -44 7740 0
-1597 -29 7740 0
-1597 -29 -44 0
1597 44 -7740 0
1597 29 -7740 0
1597 29 44 -7741 0
c (((SATLiteral(31) + SATLiteral(46) + aux1897)<=1)=tv=SATLiteral(1598))
-1598 7744 0
-1598 -46 7743 0
-1598 -31 7743 0
-1598 -31 -46 0
1598 46 -7743 0
1598 31 -7743 0
1598 31 46 -7744 0
c (((SATLiteral(-30) + SATLiteral(-45) + aux1898)<=1)=tv=SATLiteral(1599))
-1599 7747 0
-1599 45 7746 0
-1599 30 7746 0
-1599 30 45 0
1599 -45 -7746 0
1599 -30 -7746 0
1599 -30 -45 -7747 0
c (((SATLiteral(392) + SATLiteral(122) + aux1899)<=1)=tv=SATLiteral(1600))
-1600 7750 0
-1600 -122 7749 0
-1600 -392 7749 0
-1600 -392 -122 0
1600 122 -7749 0
1600 392 -7749 0
1600 392 122 -7750 0
c (((SATLiteral(394) + SATLiteral(124) + aux1900)<=1)=tv=SATLiteral(1601))
-1601 7753 0
-1601 -124 7752 0
-1601 -394 7752 0
-1601 -394 -124 0
1601 124 -7752 0
1601 394 -7752 0
1601 394 124 -7753 0
c (((SATLiteral(396) + SATLiteral(126) + aux1901)<=1)=tv=SATLiteral(1602))
-1602 7756 0
-1602 -126 7755 0
-1602 -396 7755 0
-1602 -396 -126 0
1602 126 -7755 0
1602 396 -7755 0
1602 396 126 -7756 0
c (((SATLiteral(398) + SATLiteral(128) + aux1902)<=1)=tv=SATLiteral(1603))
-1603 7759 0
-1603 -128 7758 0
-1603 -398 7758 0
-1603 -398 -128 0
1603 128 -7758 0
1603 398 -7758 0
1603 398 128 -7759 0
c (((SATLiteral(400) + SATLiteral(130) + aux1903)<=1)=tv=SATLiteral(1604))
-1604 7762 0
-1604 -130 7761 0
-1604 -400 7761 0
-1604 -400 -130 0
1604 130 -7761 0
1604 400 -7761 0
1604 400 130 -7762 0
c (((SATLiteral(402) + SATLiteral(132) + aux1904)<=1)=tv=SATLiteral(1605))
-1605 7765 0
-1605 -132 7764 0
-1605 -402 7764 0
-1605 -402 -132 0
1605 132 -7764 0
1605 402 -7764 0
1605 402 132 -7765 0
c (((SATLiteral(404) + SATLiteral(134) + aux1905)<=1)=tv=SATLiteral(1606))
-1606 7768 0
-1606 -134 7767 0
-1606 -404 7767 0
-1606 -404 -134 0
1606 134 -7767 0
1606 404 -7767 0
1606 404 134 -7768 0
c (((SATLiteral(406) + SATLiteral(136) + aux1906)<=1)=tv=SATLiteral(1607))
-1607 7771 0
-1607 -136 7770 0
-1607 -406 7770 0
-1607 -406 -136 0
1607 136 -7770 0
1607 406 -7770 0
1607 406 136 -7771 0
c (((SATLiteral(-405) + SATLiteral(-135) + aux1907)<=1)=tv=SATLiteral(1608))
-1608 7774 0
-1608 135 7773 0
-1608 405 7773 0
-1608 405 135 0
1608 -135 -7773 0
1608 -405 -7773 0
1608 -405 -135 -7774 0
c (((SATLiteral(152) + SATLiteral(167) + SATLiteral(182))<=1)=tv=SATLiteral(1609))
-1609 -167 -182 0
-1609 -152 -182 0
-1609 -152 -167 0
1609 167 182 0
1609 152 182 0
1609 152 167 0
c (((SATLiteral(154) + SATLiteral(169) + SATLiteral(184))<=1)=tv=SATLiteral(1610))
-1610 -169 -184 0
-1610 -154 -184 0
-1610 -154 -169 0
1610 169 184 0
1610 154 184 0
1610 154 169 0
c (((SATLiteral(156) + SATLiteral(171) + SATLiteral(186))<=1)=tv=SATLiteral(1611))
-1611 -171 -186 0
-1611 -156 -186 0
-1611 -156 -171 0
1611 171 186 0
1611 156 186 0
1611 156 171 0
c (((SATLiteral(158) + SATLiteral(173) + SATLiteral(188))<=1)=tv=SATLiteral(1612))
-1612 -173 -188 0
-1612 -158 -188 0
-1612 -158 -173 0
1612 173 188 0
1612 158 188 0
1612 158 173 0
c (((SATLiteral(160) + SATLiteral(175) + SATLiteral(190))<=1)=tv=SATLiteral(1613))
-1613 -175 -190 0
-1613 -160 -190 0
-1613 -160 -175 0
1613 175 190 0
1613 160 190 0
1613 160 175 0
c (((SATLiteral(162) + SATLiteral(177) + SATLiteral(192))<=1)=tv=SATLiteral(1614))
-1614 -177 -192 0
-1614 -162 -192 0
-1614 -162 -177 0
1614 177 192 0
1614 162 192 0
1614 162 177 0
c (((SATLiteral(164) + SATLiteral(179) + SATLiteral(194))<=1)=tv=SATLiteral(1615))
-1615 -179 -194 0
-1615 -164 -194 0
-1615 -164 -179 0
1615 179 194 0
1615 164 194 0
1615 164 179 0
c (((SATLiteral(166) + SATLiteral(181) + SATLiteral(196))<=1)=tv=SATLiteral(1616))
-1616 -181 -196 0
-1616 -166 -196 0
-1616 -166 -181 0
1616 181 196 0
1616 166 196 0
1616 166 181 0
c (((SATLiteral(-165) + SATLiteral(-180) + SATLiteral(-195))<=1)=tv=SATLiteral(1617))
-1617 180 195 0
-1617 165 195 0
-1617 165 180 0
1617 -180 -195 0
1617 -165 -195 0
1617 -165 -180 0
c (((SATLiteral(362) + SATLiteral(227) + SATLiteral(242))<=1)=tv=SATLiteral(1618))
-1618 -227 -242 0
-1618 -362 -242 0
-1618 -362 -227 0
1618 227 242 0
1618 362 242 0
1618 362 227 0
c (((SATLiteral(364) + SATLiteral(229) + SATLiteral(244))<=1)=tv=SATLiteral(1619))
-1619 -229 -244 0
-1619 -364 -244 0
-1619 -364 -229 0
1619 229 244 0
1619 364 244 0
1619 364 229 0
c (((SATLiteral(366) + SATLiteral(231) + SATLiteral(246))<=1)=tv=SATLiteral(1620))
-1620 -231 -246 0
-1620 -366 -246 0
-1620 -366 -231 0
1620 231 246 0
1620 366 246 0
1620 366 231 0
c (((SATLiteral(368) + SATLiteral(233) + SATLiteral(248))<=1)=tv=SATLiteral(1621))
-1621 -233 -248 0
-1621 -368 -248 0
-1621 -368 -233 0
1621 233 248 0
1621 368 248 0
1621 368 233 0
c (((SATLiteral(370) + SATLiteral(235) + SATLiteral(250))<=1)=tv=SATLiteral(1622))
-1622 -235 -250 0
-1622 -370 -250 0
-1622 -370 -235 0
1622 235 250 0
1622 370 250 0
1622 370 235 0
c (((SATLiteral(372) + SATLiteral(237) + SATLiteral(252))<=1)=tv=SATLiteral(1623))
-1623 -237 -252 0
-1623 -372 -252 0
-1623 -372 -237 0
1623 237 252 0
1623 372 252 0
1623 372 237 0
c (((SATLiteral(374) + SATLiteral(239) + SATLiteral(254))<=1)=tv=SATLiteral(1624))
-1624 -239 -254 0
-1624 -374 -254 0
-1624 -374 -239 0
1624 239 254 0
1624 374 254 0
1624 374 239 0
c (((SATLiteral(376) + SATLiteral(241) + SATLiteral(256))<=1)=tv=SATLiteral(1625))
-1625 -241 -256 0
-1625 -376 -256 0
-1625 -376 -241 0
1625 241 256 0
1625 376 256 0
1625 376 241 0
c (((SATLiteral(-375) + SATLiteral(-240) + SATLiteral(-255))<=1)=tv=SATLiteral(1626))
-1626 240 255 0
-1626 375 255 0
-1626 375 240 0
1626 -240 -255 0
1626 -375 -255 0
1626 -375 -240 0
c (((SATLiteral(317) + SATLiteral(452) + SATLiteral(467))<=1)=tv=SATLiteral(1627))
-1627 -452 -467 0
-1627 -317 -467 0
-1627 -317 -452 0
1627 452 467 0
1627 317 467 0
1627 317 452 0
c (((SATLiteral(319) + SATLiteral(454) + SATLiteral(469))<=1)=tv=SATLiteral(1628))
-1628 -454 -469 0
-1628 -319 -469 0
-1628 -319 -454 0
1628 454 469 0
1628 319 469 0
1628 319 454 0
c (((SATLiteral(321) + SATLiteral(456) + SATLiteral(471))<=1)=tv=SATLiteral(1629))
-1629 -456 -471 0
-1629 -321 -471 0
-1629 -321 -456 0
1629 456 471 0
1629 321 471 0
1629 321 456 0
c (((SATLiteral(323) + SATLiteral(458) + SATLiteral(473))<=1)=tv=SATLiteral(1630))
-1630 -458 -473 0
-1630 -323 -473 0
-1630 -323 -458 0
1630 458 473 0
1630 323 473 0
1630 323 458 0
c (((SATLiteral(325) + SATLiteral(460) + SATLiteral(475))<=1)=tv=SATLiteral(1631))
-1631 -460 -475 0
-1631 -325 -475 0
-1631 -325 -460 0
1631 460 475 0
1631 325 475 0
1631 325 460 0
c (((SATLiteral(327) + SATLiteral(462) + SATLiteral(477))<=1)=tv=SATLiteral(1632))
-1632 -462 -477 0
-1632 -327 -477 0
-1632 -327 -462 0
1632 462 477 0
1632 327 477 0
1632 327 462 0
c (((SATLiteral(329) + SATLiteral(464) + SATLiteral(479))<=1)=tv=SATLiteral(1633))
-1633 -464 -479 0
-1633 -329 -479 0
-1633 -329 -464 0
1633 464 479 0
1633 329 479 0
1633 329 464 0
c (((SATLiteral(331) + SATLiteral(466) + SATLiteral(481))<=1)=tv=SATLiteral(1634))
-1634 -466 -481 0
-1634 -331 -481 0
-1634 -331 -466 0
1634 466 481 0
1634 331 481 0
1634 331 466 0
c (((SATLiteral(-330) + SATLiteral(-465) + SATLiteral(-480))<=1)=tv=SATLiteral(1635))
-1635 465 480 0
-1635 330 480 0
-1635 330 465 0
1635 -465 -480 0
1635 -330 -480 0
1635 -330 -465 0
c (((SATLiteral(677) + SATLiteral(407) + SATLiteral(542))<=1)=tv=SATLiteral(1636))
-1636 -407 -542 0
-1636 -677 -542 0
-1636 -677 -407 0
1636 407 542 0
1636 677 542 0
1636 677 407 0
c (((SATLiteral(679) + SATLiteral(409) + SATLiteral(544))<=1)=tv=SATLiteral(1637))
-1637 -409 -544 0
-1637 -679 -544 0
-1637 -679 -409 0
1637 409 544 0
1637 679 544 0
1637 679 409 0
c (((SATLiteral(681) + SATLiteral(411) + SATLiteral(546))<=1)=tv=SATLiteral(1638))
-1638 -411 -546 0
-1638 -681 -546 0
-1638 -681 -411 0
1638 411 546 0
1638 681 546 0
1638 681 411 0
c (((SATLiteral(683) + SATLiteral(413) + SATLiteral(548))<=1)=tv=SATLiteral(1639))
-1639 -413 -548 0
-1639 -683 -548 0
-1639 -683 -413 0
1639 413 548 0
1639 683 548 0
1639 683 413 0
c (((SATLiteral(685) + SATLiteral(415) + SATLiteral(550))<=1)=tv=SATLiteral(1640))
-1640 -415 -550 0
-1640 -685 -550 0
-1640 -685 -415 0
1640 415 550 0
1640 685 550 0
1640 685 415 0
c (((SATLiteral(687) + SATLiteral(417) + SATLiteral(552))<=1)=tv=SATLiteral(1641))
-1641 -417 -552 0
-1641 -687 -552 0
-1641 -687 -417 0
1641 417 552 0
1641 687 552 0
1641 687 417 0
c (((SATLiteral(689) + SATLiteral(419) + SATLiteral(554))<=1)=tv=SATLiteral(1642))
-1642 -419 -554 0
-1642 -689 -554 0
-1642 -689 -419 0
1642 419 554 0
1642 689 554 0
1642 689 419 0
c (((SATLiteral(691) + SATLiteral(421) + SATLiteral(556))<=1)=tv=SATLiteral(1643))
-1643 -421 -556 0
-1643 -691 -556 0
-1643 -691 -421 0
1643 421 556 0
1643 691 556 0
1643 691 421 0
c (((SATLiteral(-690) + SATLiteral(-420) + SATLiteral(-555))<=1)=tv=SATLiteral(1644))
-1644 420 555 0
-1644 690 555 0
-1644 690 420 0
1644 -420 -555 0
1644 -690 -555 0
1644 -690 -420 0
c (((aux1908 + SATLiteral(602) + SATLiteral(617))<=1)=tv=SATLiteral(1645))
-1645 7777 0
-1645 -617 7776 0
-1645 -602 7776 0
-1645 -602 -617 0
1645 617 -7776 0
1645 602 -7776 0
1645 602 617 -7777 0
c (((aux1909 + SATLiteral(604) + SATLiteral(619))<=1)=tv=SATLiteral(1646))
-1646 7780 0
-1646 -619 7779 0
-1646 -604 7779 0
-1646 -604 -619 0
1646 619 -7779 0
1646 604 -7779 0
1646 604 619 -7780 0
c (((aux1910 + SATLiteral(606) + SATLiteral(621))<=1)=tv=SATLiteral(1647))
-1647 7783 0
-1647 -621 7782 0
-1647 -606 7782 0
-1647 -606 -621 0
1647 621 -7782 0
1647 606 -7782 0
1647 606 621 -7783 0
c (((aux1911 + SATLiteral(608) + SATLiteral(623))<=1)=tv=SATLiteral(1648))
-1648 7786 0
-1648 -623 7785 0
-1648 -608 7785 0
-1648 -608 -623 0
1648 623 -7785 0
1648 608 -7785 0
1648 608 623 -7786 0
c (((aux1912 + SATLiteral(610) + SATLiteral(625))<=1)=tv=SATLiteral(1649))
-1649 7789 0
-1649 -625 7788 0
-1649 -610 7788 0
-1649 -610 -625 0
1649 625 -7788 0
1649 610 -7788 0
1649 610 625 -7789 0
c (((aux1913 + SATLiteral(612) + SATLiteral(627))<=1)=tv=SATLiteral(1650))
-1650 7792 0
-1650 -627 7791 0
-1650 -612 7791 0
-1650 -612 -627 0
1650 627 -7791 0
1650 612 -7791 0
1650 612 627 -7792 0
c (((aux1914 + SATLiteral(614) + SATLiteral(629))<=1)=tv=SATLiteral(1651))
-1651 7795 0
-1651 -629 7794 0
-1651 -614 7794 0
-1651 -614 -629 0
1651 629 -7794 0
1651 614 -7794 0
1651 614 629 -7795 0
c (((aux1915 + SATLiteral(616) + SATLiteral(631))<=1)=tv=SATLiteral(1652))
-1652 7798 0
-1652 -631 7797 0
-1652 -616 7797 0
-1652 -616 -631 0
1652 631 -7797 0
1652 616 -7797 0
1652 616 631 -7798 0
c (((aux1916 + SATLiteral(-615) + SATLiteral(-630))<=1)=tv=SATLiteral(1653))
-1653 7801 0
-1653 630 7800 0
-1653 615 7800 0
-1653 615 630 0
1653 -630 -7800 0
1653 -615 -7800 0
1653 -615 -630 -7801 0
c (((SATLiteral(497) + SATLiteral(512) + SATLiteral(647))<=1)=tv=SATLiteral(1654))
-1654 -512 -647 0
-1654 -497 -647 0
-1654 -497 -512 0
1654 512 647 0
1654 497 647 0
1654 497 512 0
c (((SATLiteral(499) + SATLiteral(514) + SATLiteral(649))<=1)=tv=SATLiteral(1655))
-1655 -514 -649 0
-1655 -499 -649 0
-1655 -499 -514 0
1655 514 649 0
1655 499 649 0
1655 499 514 0
c (((SATLiteral(501) + SATLiteral(516) + SATLiteral(651))<=1)=tv=SATLiteral(1656))
-1656 -516 -651 0
-1656 -501 -651 0
-1656 -501 -516 0
1656 516 651 0
1656 501 651 0
1656 501 516 0
c (((SATLiteral(503) + SATLiteral(518) + SATLiteral(653))<=1)=tv=SATLiteral(1657))
-1657 -518 -653 0
-1657 -503 -653 0
-1657 -503 -518 0
1657 518 653 0
1657 503 653 0
1657 503 518 0
c (((SATLiteral(505) + SATLiteral(520) + SATLiteral(655))<=1)=tv=SATLiteral(1658))
-1658 -520 -655 0
-1658 -505 -655 0
-1658 -505 -520 0
1658 520 655 0
1658 505 655 0
1658 505 520 0
c (((SATLiteral(507) + SATLiteral(522) + SATLiteral(657))<=1)=tv=SATLiteral(1659))
-1659 -522 -657 0
-1659 -507 -657 0
-1659 -507 -522 0
1659 522 657 0
1659 507 657 0
1659 507 522 0
c (((SATLiteral(509) + SATLiteral(524) + SATLiteral(659))<=1)=tv=SATLiteral(1660))
-1660 -524 -659 0
-1660 -509 -659 0
-1660 -509 -524 0
1660 524 659 0
1660 509 659 0
1660 509 524 0
c (((SATLiteral(511) + SATLiteral(526) + SATLiteral(661))<=1)=tv=SATLiteral(1661))
-1661 -526 -661 0
-1661 -511 -661 0
-1661 -511 -526 0
1661 526 661 0
1661 511 661 0
1661 511 526 0
c (((SATLiteral(-510) + SATLiteral(-525) + SATLiteral(-660))<=1)=tv=SATLiteral(1662))
-1662 525 660 0
-1662 510 660 0
-1662 510 525 0
1662 -525 -660 0
1662 -510 -660 0
1662 -510 -525 0
c (((SATLiteral(797) + SATLiteral(527) + SATLiteral(662))<=1)=tv=SATLiteral(1663))
-1663 -527 -662 0
-1663 -797 -662 0
-1663 -797 -527 0
1663 527 662 0
1663 797 662 0
1663 797 527 0
c (((SATLiteral(799) + SATLiteral(529) + SATLiteral(664))<=1)=tv=SATLiteral(1664))
-1664 -529 -664 0
-1664 -799 -664 0
-1664 -799 -529 0
1664 529 664 0
1664 799 664 0
1664 799 529 0
c (((SATLiteral(801) + SATLiteral(531) + SATLiteral(666))<=1)=tv=SATLiteral(1665))
-1665 -531 -666 0
-1665 -801 -666 0
-1665 -801 -531 0
1665 531 666 0
1665 801 666 0
1665 801 531 0
c (((SATLiteral(803) + SATLiteral(533) + SATLiteral(668))<=1)=tv=SATLiteral(1666))
-1666 -533 -668 0
-1666 -803 -668 0
-1666 -803 -533 0
1666 533 668 0
1666 803 668 0
1666 803 533 0
c (((SATLiteral(805) + SATLiteral(535) + SATLiteral(670))<=1)=tv=SATLiteral(1667))
-1667 -535 -670 0
-1667 -805 -670 0
-1667 -805 -535 0
1667 535 670 0
1667 805 670 0
1667 805 535 0
c (((SATLiteral(807) + SATLiteral(537) + SATLiteral(672))<=1)=tv=SATLiteral(1668))
-1668 -537 -672 0
-1668 -807 -672 0
-1668 -807 -537 0
1668 537 672 0
1668 807 672 0
1668 807 537 0
c (((SATLiteral(809) + SATLiteral(539) + SATLiteral(674))<=1)=tv=SATLiteral(1669))
-1669 -539 -674 0
-1669 -809 -674 0
-1669 -809 -539 0
1669 539 674 0
1669 809 674 0
1669 809 539 0
c (((SATLiteral(811) + SATLiteral(541) + SATLiteral(676))<=1)=tv=SATLiteral(1670))
-1670 -541 -676 0
-1670 -811 -676 0
-1670 -811 -541 0
1670 541 676 0
1670 811 676 0
1670 811 541 0
c (((SATLiteral(-810) + SATLiteral(-540) + SATLiteral(-675))<=1)=tv=SATLiteral(1671))
-1671 540 675 0
-1671 810 675 0
-1671 810 540 0
1671 -540 -675 0
1671 -810 -675 0
1671 -810 -540 0
c (((SATLiteral(692) + SATLiteral(707) + SATLiteral(557))<=1)=tv=SATLiteral(1672))
-1672 -707 -557 0
-1672 -692 -557 0
-1672 -692 -707 0
1672 707 557 0
1672 692 557 0
1672 692 707 0
c (((SATLiteral(694) + SATLiteral(709) + SATLiteral(559))<=1)=tv=SATLiteral(1673))
-1673 -709 -559 0
-1673 -694 -559 0
-1673 -694 -709 0
1673 709 559 0
1673 694 559 0
1673 694 709 0
c (((SATLiteral(696) + SATLiteral(711) + SATLiteral(561))<=1)=tv=SATLiteral(1674))
-1674 -711 -561 0
-1674 -696 -561 0
-1674 -696 -711 0
1674 711 561 0
1674 696 561 0
1674 696 711 0
c (((SATLiteral(698) + SATLiteral(713) + SATLiteral(563))<=1)=tv=SATLiteral(1675))
-1675 -713 -563 0
-1675 -698 -563 0
-1675 -698 -713 0
1675 713 563 0
1675 698 563 0
1675 698 713 0
c (((SATLiteral(700) + SATLiteral(715) + SATLiteral(565))<=1)=tv=SATLiteral(1676))
-1676 -715 -565 0
-1676 -700 -565 0
-1676 -700 -715 0
1676 715 565 0
1676 700 565 0
1676 700 715 0
c (((SATLiteral(702) + SATLiteral(717) + SATLiteral(567))<=1)=tv=SATLiteral(1677))
-1677 -717 -567 0
-1677 -702 -567 0
-1677 -702 -717 0
1677 717 567 0
1677 702 567 0
1677 702 717 0
c (((SATLiteral(704) + SATLiteral(719) + SATLiteral(569))<=1)=tv=SATLiteral(1678))
-1678 -719 -569 0
-1678 -704 -569 0
-1678 -704 -719 0
1678 719 569 0
1678 704 569 0
1678 704 719 0
c (((SATLiteral(706) + SATLiteral(721) + SATLiteral(571))<=1)=tv=SATLiteral(1679))
-1679 -721 -571 0
-1679 -706 -571 0
-1679 -706 -721 0
1679 721 571 0
1679 706 571 0
1679 706 721 0
c (((SATLiteral(-705) + SATLiteral(-720) + SATLiteral(-570))<=1)=tv=SATLiteral(1680))
-1680 720 570 0
-1680 705 570 0
-1680 705 720 0
1680 -720 -570 0
1680 -705 -570 0
1680 -705 -720 0
c (((SATLiteral(722) + SATLiteral(572) + SATLiteral(587))<=1)=tv=SATLiteral(1681))
-1681 -572 -587 0
-1681 -722 -587 0
-1681 -722 -572 0
1681 572 587 0
1681 722 587 0
1681 722 572 0
c (((SATLiteral(724) + SATLiteral(574) + SATLiteral(589))<=1)=tv=SATLiteral(1682))
-1682 -574 -589 0
-1682 -724 -589 0
-1682 -724 -574 0
1682 574 589 0
1682 724 589 0
1682 724 574 0
c (((SATLiteral(726) + SATLiteral(576) + SATLiteral(591))<=1)=tv=SATLiteral(1683))
-1683 -576 -591 0
-1683 -726 -591 0
-1683 -726 -576 0
1683 576 591 0
1683 726 591 0
1683 726 576 0
c (((SATLiteral(728) + SATLiteral(578) + SATLiteral(593))<=1)=tv=SATLiteral(1684))
-1684 -578 -593 0
-1684 -728 -593 0
-1684 -728 -578 0
1684 578 593 0
1684 728 593 0
1684 728 578 0
c (((SATLiteral(730) + SATLiteral(580) + SATLiteral(595))<=1)=tv=SATLiteral(1685))
-1685 -580 -595 0
-1685 -730 -595 0
-1685 -730 -580 0
1685 580 595 0
1685 730 595 0
1685 730 580 0
c (((SATLiteral(732) + SATLiteral(582) + SATLiteral(597))<=1)=tv=SATLiteral(1686))
-1686 -582 -597 0
-1686 -732 -597 0
-1686 -732 -582 0
1686 582 597 0
1686 732 597 0
1686 732 582 0
c (((SATLiteral(734) + SATLiteral(584) + SATLiteral(599))<=1)=tv=SATLiteral(1687))
-1687 -584 -599 0
-1687 -734 -599 0
-1687 -734 -584 0
1687 584 599 0
1687 734 599 0
1687 734 584 0
c (((SATLiteral(736) + SATLiteral(586) + SATLiteral(601))<=1)=tv=SATLiteral(1688))
-1688 -586 -601 0
-1688 -736 -601 0
-1688 -736 -586 0
1688 586 601 0
1688 736 601 0
1688 736 586 0
c (((SATLiteral(-735) + SATLiteral(-585) + SATLiteral(-600))<=1)=tv=SATLiteral(1689))
-1689 585 600 0
-1689 735 600 0
-1689 735 585 0
1689 -585 -600 0
1689 -735 -600 0
1689 -735 -585 0
c (((SATLiteral(737) + SATLiteral(752) + SATLiteral(887))<=1)=tv=SATLiteral(1690))
-1690 -752 -887 0
-1690 -737 -887 0
-1690 -737 -752 0
1690 752 887 0
1690 737 887 0
1690 737 752 0
c (((SATLiteral(739) + SATLiteral(754) + SATLiteral(889))<=1)=tv=SATLiteral(1691))
-1691 -754 -889 0
-1691 -739 -889 0
-1691 -739 -754 0
1691 754 889 0
1691 739 889 0
1691 739 754 0
c (((SATLiteral(741) + SATLiteral(756) + SATLiteral(891))<=1)=tv=SATLiteral(1692))
-1692 -756 -891 0
-1692 -741 -891 0
-1692 -741 -756 0
1692 756 891 0
1692 741 891 0
1692 741 756 0
c (((SATLiteral(743) + SATLiteral(758) + SATLiteral(893))<=1)=tv=SATLiteral(1693))
-1693 -758 -893 0
-1693 -743 -893 0
-1693 -743 -758 0
1693 758 893 0
1693 743 893 0
1693 743 758 0
c (((SATLiteral(745) + SATLiteral(760) + SATLiteral(895))<=1)=tv=SATLiteral(1694))
-1694 -760 -895 0
-1694 -745 -895 0
-1694 -745 -760 0
1694 760 895 0
1694 745 895 0
1694 745 760 0
c (((SATLiteral(747) + SATLiteral(762) + SATLiteral(897))<=1)=tv=SATLiteral(1695))
-1695 -762 -897 0
-1695 -747 -897 0
-1695 -747 -762 0
1695 762 897 0
1695 747 897 0
1695 747 762 0
c (((SATLiteral(749) + SATLiteral(764) + SATLiteral(899))<=1)=tv=SATLiteral(1696))
-1696 -764 -899 0
-1696 -749 -899 0
-1696 -749 -764 0
1696 764 899 0
1696 749 899 0
1696 749 764 0
c (((SATLiteral(751) + SATLiteral(766) + SATLiteral(901))<=1)=tv=SATLiteral(1697))
-1697 -766 -901 0
-1697 -751 -901 0
-1697 -751 -766 0
1697 766 901 0
1697 751 901 0
1697 751 766 0
c (((SATLiteral(-750) + SATLiteral(-765) + SATLiteral(-900))<=1)=tv=SATLiteral(1698))
-1698 765 900 0
-1698 750 900 0
-1698 750 765 0
1698 -765 -900 0
1698 -750 -900 0
1698 -750 -765 0
c (((aux1917 + SATLiteral(1082) + SATLiteral(812))<=1)=tv=SATLiteral(1699))
-1699 7804 0
-1699 -812 7803 0
-1699 -1082 7803 0
-1699 -1082 -812 0
1699 812 -7803 0
1699 1082 -7803 0
1699 1082 812 -7804 0
c (((aux1918 + SATLiteral(1084) + SATLiteral(814))<=1)=tv=SATLiteral(1700))
-1700 7807 0
-1700 -814 7806 0
-1700 -1084 7806 0
-1700 -1084 -814 0
1700 814 -7806 0
1700 1084 -7806 0
1700 1084 814 -7807 0
c (((aux1919 + SATLiteral(1086) + SATLiteral(816))<=1)=tv=SATLiteral(1701))
-1701 7810 0
-1701 -816 7809 0
-1701 -1086 7809 0
-1701 -1086 -816 0
1701 816 -7809 0
1701 1086 -7809 0
1701 1086 816 -7810 0
c (((aux1920 + SATLiteral(1088) + SATLiteral(818))<=1)=tv=SATLiteral(1702))
-1702 7813 0
-1702 -818 7812 0
-1702 -1088 7812 0
-1702 -1088 -818 0
1702 818 -7812 0
1702 1088 -7812 0
1702 1088 818 -7813 0
c (((aux1921 + SATLiteral(1090) + SATLiteral(820))<=1)=tv=SATLiteral(1703))
-1703 7816 0
-1703 -820 7815 0
-1703 -1090 7815 0
-1703 -1090 -820 0
1703 820 -7815 0
1703 1090 -7815 0
1703 1090 820 -7816 0
c (((aux1922 + SATLiteral(1092) + SATLiteral(822))<=1)=tv=SATLiteral(1704))
-1704 7819 0
-1704 -822 7818 0
-1704 -1092 7818 0
-1704 -1092 -822 0
1704 822 -7818 0
1704 1092 -7818 0
1704 1092 822 -7819 0
c (((aux1923 + SATLiteral(1094) + SATLiteral(824))<=1)=tv=SATLiteral(1705))
-1705 7822 0
-1705 -824 7821 0
-1705 -1094 7821 0
-1705 -1094 -824 0
1705 824 -7821 0
1705 1094 -7821 0
1705 1094 824 -7822 0
c (((aux1924 + SATLiteral(1096) + SATLiteral(826))<=1)=tv=SATLiteral(1706))
-1706 7825 0
-1706 -826 7824 0
-1706 -1096 7824 0
-1706 -1096 -826 0
1706 826 -7824 0
1706 1096 -7824 0
1706 1096 826 -7825 0
c (((aux1925 + SATLiteral(-1095) + SATLiteral(-825))<=1)=tv=SATLiteral(1707))
-1707 7828 0
-1707 825 7827 0
-1707 1095 7827 0
-1707 1095 825 0
1707 -825 -7827 0
1707 -1095 -7827 0
1707 -1095 -825 -7828 0
c (((SATLiteral(962) + SATLiteral(977) + SATLiteral(842))<=1)=tv=SATLiteral(1708))
-1708 -977 -842 0
-1708 -962 -842 0
-1708 -962 -977 0
1708 977 842 0
1708 962 842 0
1708 962 977 0
c (((SATLiteral(964) + SATLiteral(979) + SATLiteral(844))<=1)=tv=SATLiteral(1709))
-1709 -979 -844 0
-1709 -964 -844 0
-1709 -964 -979 0
1709 979 844 0
1709 964 844 0
1709 964 979 0
c (((SATLiteral(966) + SATLiteral(981) + SATLiteral(846))<=1)=tv=SATLiteral(1710))
-1710 -981 -846 0
-1710 -966 -846 0
-1710 -966 -981 0
1710 981 846 0
1710 966 846 0
1710 966 981 0
c (((SATLiteral(968) + SATLiteral(983) + SATLiteral(848))<=1)=tv=SATLiteral(1711))
-1711 -983 -848 0
-1711 -968 -848 0
-1711 -968 -983 0
1711 983 848 0
1711 968 848 0
1711 968 983 0
c (((SATLiteral(970) + SATLiteral(985) + SATLiteral(850))<=1)=tv=SATLiteral(1712))
-1712 -985 -850 0
-1712 -970 -850 0
-1712 -970 -985 0
1712 985 850 0
1712 970 850 0
1712 970 985 0
c (((SATLiteral(972) + SATLiteral(987) + SATLiteral(852))<=1)=tv=SATLiteral(1713))
-1713 -987 -852 0
-1713 -972 -852 0
-1713 -972 -987 0
1713 987 852 0
1713 972 852 0
1713 972 987 0
c (((SATLiteral(974) + SATLiteral(989) + SATLiteral(854))<=1)=tv=SATLiteral(1714))
-1714 -989 -854 0
-1714 -974 -854 0
-1714 -974 -989 0
1714 989 854 0
1714 974 854 0
1714 974 989 0
c (((SATLiteral(976) + SATLiteral(991) + SATLiteral(856))<=1)=tv=SATLiteral(1715))
-1715 -991 -856 0
-1715 -976 -856 0
-1715 -976 -991 0
1715 991 856 0
1715 976 856 0
1715 976 991 0
c (((SATLiteral(-975) + SATLiteral(-990) + SATLiteral(-855))<=1)=tv=SATLiteral(1716))
-1716 990 855 0
-1716 975 855 0
-1716 975 990 0
1716 -990 -855 0
1716 -975 -855 0
1716 -975 -990 0
c (((SATLiteral(1022) + SATLiteral(1037) + SATLiteral(1052))<=1)=tv=SATLiteral(1717))
-1717 -1037 -1052 0
-1717 -1022 -1052 0
-1717 -1022 -1037 0
1717 1037 1052 0
1717 1022 1052 0
1717 1022 1037 0
c (((SATLiteral(1024) + SATLiteral(1039) + SATLiteral(1054))<=1)=tv=SATLiteral(1718))
-1718 -1039 -1054 0
-1718 -1024 -1054 0
-1718 -1024 -1039 0
1718 1039 1054 0
1718 1024 1054 0
1718 1024 1039 0
c (((SATLiteral(1026) + SATLiteral(1041) + SATLiteral(1056))<=1)=tv=SATLiteral(1719))
-1719 -1041 -1056 0
-1719 -1026 -1056 0
-1719 -1026 -1041 0
1719 1041 1056 0
1719 1026 1056 0
1719 1026 1041 0
c (((SATLiteral(1028) + SATLiteral(1043) + SATLiteral(1058))<=1)=tv=SATLiteral(1720))
-1720 -1043 -1058 0
-1720 -1028 -1058 0
-1720 -1028 -1043 0
1720 1043 1058 0
1720 1028 1058 0
1720 1028 1043 0
c (((SATLiteral(1030) + SATLiteral(1045) + SATLiteral(1060))<=1)=tv=SATLiteral(1721))
-1721 -1045 -1060 0
-1721 -1030 -1060 0
-1721 -1030 -1045 0
1721 1045 1060 0
1721 1030 1060 0
1721 1030 1045 0
c (((SATLiteral(1032) + SATLiteral(1047) + SATLiteral(1062))<=1)=tv=SATLiteral(1722))
-1722 -1047 -1062 0
-1722 -1032 -1062 0
-1722 -1032 -1047 0
1722 1047 1062 0
1722 1032 1062 0
1722 1032 1047 0
c (((SATLiteral(1034) + SATLiteral(1049) + SATLiteral(1064))<=1)=tv=SATLiteral(1723))
-1723 -1049 -1064 0
-1723 -1034 -1064 0
-1723 -1034 -1049 0
1723 1049 1064 0
1723 1034 1064 0
1723 1034 1049 0
c (((SATLiteral(1036) + SATLiteral(1051) + SATLiteral(1066))<=1)=tv=SATLiteral(1724))
-1724 -1051 -1066 0
-1724 -1036 -1066 0
-1724 -1036 -1051 0
1724 1051 1066 0
1724 1036 1066 0
1724 1036 1051 0
c (((SATLiteral(-1035) + SATLiteral(-1050) + SATLiteral(-1065))<=1)=tv=SATLiteral(1725))
-1725 1050 1065 0
-1725 1035 1065 0
-1725 1035 1050 0
1725 -1050 -1065 0
1725 -1035 -1065 0
1725 -1035 -1050 0
c (((aux1926 + SATLiteral(1172) + SATLiteral(1187))<=1)=tv=SATLiteral(1726))
-1726 7831 0
-1726 -1187 7830 0
-1726 -1172 7830 0
-1726 -1172 -1187 0
1726 1187 -7830 0
1726 1172 -7830 0
1726 1172 1187 -7831 0
c (((aux1927 + SATLiteral(1174) + SATLiteral(1189))<=1)=tv=SATLiteral(1727))
-1727 7834 0
-1727 -1189 7833 0
-1727 -1174 7833 0
-1727 -1174 -1189 0
1727 1189 -7833 0
1727 1174 -7833 0
1727 1174 1189 -7834 0
c (((aux1928 + SATLiteral(1176) + SATLiteral(1191))<=1)=tv=SATLiteral(1728))
-1728 7837 0
-1728 -1191 7836 0
-1728 -1176 7836 0
-1728 -1176 -1191 0
1728 1191 -7836 0
1728 1176 -7836 0
1728 1176 1191 -7837 0
c (((aux1929 + SATLiteral(1178) + SATLiteral(1193))<=1)=tv=SATLiteral(1729))
-1729 7840 0
-1729 -1193 7839 0
-1729 -1178 7839 0
-1729 -1178 -1193 0
1729 1193 -7839 0
1729 1178 -7839 0
1729 1178 1193 -7840 0
c (((aux1930 + SATLiteral(1180) + SATLiteral(1195))<=1)=tv=SATLiteral(1730))
-1730 7843 0
-1730 -1195 7842 0
-1730 -1180 7842 0
-1730 -1180 -1195 0
1730 1195 -7842 0
1730 1180 -7842 0
1730 1180 1195 -7843 0
c (((aux1931 + SATLiteral(1182) + SATLiteral(1197))<=1)=tv=SATLiteral(1731))
-1731 7846 0
-1731 -1197 7845 0
-1731 -1182 7845 0
-1731 -1182 -1197 0
1731 1197 -7845 0
1731 1182 -7845 0
1731 1182 1197 -7846 0
c (((aux1932 + SATLiteral(1184) + SATLiteral(1199))<=1)=tv=SATLiteral(1732))
-1732 7849 0
-1732 -1199 7848 0
-1732 -1184 7848 0
-1732 -1184 -1199 0
1732 1199 -7848 0
1732 1184 -7848 0
1732 1184 1199 -7849 0
c (((aux1933 + SATLiteral(1186) + SATLiteral(1201))<=1)=tv=SATLiteral(1733))
-1733 7852 0
-1733 -1201 7851 0
-1733 -1186 7851 0
-1733 -1186 -1201 0
1733 1201 -7851 0
1733 1186 -7851 0
1733 1186 1201 -7852 0
c (((aux1934 + SATLiteral(-1185) + SATLiteral(-1200))<=1)=tv=SATLiteral(1734))
-1734 7855 0
-1734 1200 7854 0
-1734 1185 7854 0
-1734 1185 1200 0
1734 -1200 -7854 0
1734 -1185 -7854 0
1734 -1185 -1200 -7855 0
c (SATLiteral(1276) -> SATLiteral(1308))
-1276 1308 0
c (SATLiteral(1277) -> SATLiteral(1309))
-1277 1309 0
c (SATLiteral(1278) -> SATLiteral(1310))
-1278 1310 0
c (SATLiteral(1279) -> SATLiteral(1311))
-1279 1311 0
c (SATLiteral(1280) -> SATLiteral(142))
-1280 142 0
c (SATLiteral(1281) -> SATLiteral(1312))
-1281 1312 0
c (SATLiteral(1282) -> SATLiteral(1313))
-1282 1313 0
c (SATLiteral(1283) -> SATLiteral(1314))
-1283 1314 0
c (SATLiteral(1284) -> SATLiteral(1315))
-1284 1315 0
c (SATLiteral(1285) -> SATLiteral(308))
-1285 308 0
c (SATLiteral(1286) -> SATLiteral(1316))
-1286 1316 0
c (SATLiteral(1287) -> SATLiteral(1317))
-1287 1317 0
c (SATLiteral(1288) -> SATLiteral(1318))
-1288 1318 0
c (SATLiteral(1289) -> SATLiteral(1319))
-1289 1319 0
c (SATLiteral(1290) -> SATLiteral(1320))
-1290 1320 0
c (SATLiteral(1291) -> SATLiteral(1321))
-1291 1321 0
c (SATLiteral(1292) -> SATLiteral(1322))
-1292 1322 0
c (SATLiteral(1293) -> SATLiteral(1323))
-1293 1323 0
c (SATLiteral(1294) -> SATLiteral(1324))
-1294 1324 0
c (SATLiteral(1295) -> SATLiteral(1325))
-1295 1325 0
c (SATLiteral(1296) -> SATLiteral(1326))
-1296 1326 0
c (SATLiteral(1297) -> SATLiteral(1327))
-1297 1327 0
c (SATLiteral(1298) -> SATLiteral(1328))
-1298 1328 0
c (SATLiteral(1299) -> SATLiteral(1329))
-1299 1329 0
c (SATLiteral(1300) -> SATLiteral(907))
-1300 907 0
c (SATLiteral(1301) -> SATLiteral(1330))
-1301 1330 0
c (SATLiteral(1302) -> SATLiteral(1331))
-1302 1331 0
c (SATLiteral(1303) -> SATLiteral(1332))
-1303 1332 0
c (SATLiteral(1304) -> SATLiteral(1070))
-1304 1070 0
c (SATLiteral(1305) -> SATLiteral(1333))
-1305 1333 0
c (SATLiteral(1306) -> SATLiteral(1334))
-1306 1334 0
c (SATLiteral(1307) -> SATLiteral(1335))
-1307 1335 0
c (SATLiteral(1245) -> SATLiteral(1336))
-1245 1336 0
c (SATLiteral(1246) -> SATLiteral(1337))
-1246 1337 0
c (SATLiteral(1250) -> SATLiteral(1338))
-1250 1338 0
c (SATLiteral(1252) -> SATLiteral(1339))
-1252 1339 0
c (SATLiteral(1255) -> SATLiteral(1340))
-1255 1340 0
c (SATLiteral(1257) -> SATLiteral(1341))
-1257 1341 0
c (SATLiteral(1264) -> SATLiteral(1342))
-1264 1342 0
c (SATLiteral(1267) -> SATLiteral(1343))
-1267 1343 0
c (SATLiteral(1269) -> SATLiteral(1344))
-1269 1344 0
c (SATLiteral(1270) -> SATLiteral(1345))
-1270 1345 0
c (SATLiteral(1273) -> SATLiteral(1346))
-1273 1346 0
c (SATLiteral(1274) -> SATLiteral(1347))
-1274 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1217) -> SATLiteral(1349))
-1217 1349 0
c (SATLiteral(1217) -> SATLiteral(1350))
-1217 1350 0
c (SATLiteral(1217) -> SATLiteral(1351))
-1217 1351 0
c (SATLiteral(1217) -> SATLiteral(1352))
-1217 1352 0
c (SATLiteral(1217) -> SATLiteral(1353))
-1217 1353 0
c (SATLiteral(1217) -> SATLiteral(1354))
-1217 1354 0
c (SATLiteral(1217) -> SATLiteral(1355))
-1217 1355 0
c (SATLiteral(1217) -> SATLiteral(1356))
-1217 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1218) -> SATLiteral(1358))
-1218 1358 0
c (SATLiteral(1218) -> SATLiteral(1359))
-1218 1359 0
c (SATLiteral(1218) -> SATLiteral(1360))
-1218 1360 0
c (SATLiteral(1218) -> SATLiteral(1361))
-1218 1361 0
c (SATLiteral(1218) -> SATLiteral(1362))
-1218 1362 0
c (SATLiteral(1218) -> SATLiteral(1363))
-1218 1363 0
c (SATLiteral(1218) -> SATLiteral(1364))
-1218 1364 0
c (SATLiteral(1218) -> SATLiteral(1365))
-1218 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1219) -> SATLiteral(1367))
-1219 1367 0
c (SATLiteral(1219) -> SATLiteral(1368))
-1219 1368 0
c (SATLiteral(1219) -> SATLiteral(1369))
-1219 1369 0
c (SATLiteral(1219) -> SATLiteral(1370))
-1219 1370 0
c (SATLiteral(1219) -> SATLiteral(1371))
-1219 1371 0
c (SATLiteral(1219) -> SATLiteral(1372))
-1219 1372 0
c (SATLiteral(1219) -> SATLiteral(1373))
-1219 1373 0
c (SATLiteral(1219) -> SATLiteral(1374))
-1219 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1220) -> SATLiteral(1376))
-1220 1376 0
c (SATLiteral(1220) -> SATLiteral(1377))
-1220 1377 0
c (SATLiteral(1220) -> SATLiteral(1378))
-1220 1378 0
c (SATLiteral(1220) -> SATLiteral(1379))
-1220 1379 0
c (SATLiteral(1220) -> SATLiteral(1380))
-1220 1380 0
c (SATLiteral(1220) -> SATLiteral(1381))
-1220 1381 0
c (SATLiteral(1220) -> SATLiteral(1382))
-1220 1382 0
c (SATLiteral(1220) -> SATLiteral(1383))
-1220 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1221) -> SATLiteral(1385))
-1221 1385 0
c (SATLiteral(1221) -> SATLiteral(1386))
-1221 1386 0
c (SATLiteral(1221) -> SATLiteral(1387))
-1221 1387 0
c (SATLiteral(1221) -> SATLiteral(1388))
-1221 1388 0
c (SATLiteral(1221) -> SATLiteral(1389))
-1221 1389 0
c (SATLiteral(1221) -> SATLiteral(1390))
-1221 1390 0
c (SATLiteral(1221) -> SATLiteral(1391))
-1221 1391 0
c (SATLiteral(1221) -> SATLiteral(1392))
-1221 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1222) -> SATLiteral(1394))
-1222 1394 0
c (SATLiteral(1222) -> SATLiteral(1395))
-1222 1395 0
c (SATLiteral(1222) -> SATLiteral(1396))
-1222 1396 0
c (SATLiteral(1222) -> SATLiteral(1397))
-1222 1397 0
c (SATLiteral(1222) -> SATLiteral(1398))
-1222 1398 0
c (SATLiteral(1222) -> SATLiteral(1399))
-1222 1399 0
c (SATLiteral(1222) -> SATLiteral(1400))
-1222 1400 0
c (SATLiteral(1222) -> SATLiteral(1401))
-1222 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1223) -> SATLiteral(1403))
-1223 1403 0
c (SATLiteral(1223) -> SATLiteral(1404))
-1223 1404 0
c (SATLiteral(1223) -> SATLiteral(1405))
-1223 1405 0
c (SATLiteral(1223) -> SATLiteral(1406))
-1223 1406 0
c (SATLiteral(1223) -> SATLiteral(1407))
-1223 1407 0
c (SATLiteral(1223) -> SATLiteral(1408))
-1223 1408 0
c (SATLiteral(1223) -> SATLiteral(1409))
-1223 1409 0
c (SATLiteral(1223) -> SATLiteral(1410))
-1223 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1224) -> SATLiteral(1412))
-1224 1412 0
c (SATLiteral(1224) -> SATLiteral(1413))
-1224 1413 0
c (SATLiteral(1224) -> SATLiteral(1414))
-1224 1414 0
c (SATLiteral(1224) -> SATLiteral(1415))
-1224 1415 0
c (SATLiteral(1224) -> SATLiteral(1416))
-1224 1416 0
c (SATLiteral(1224) -> SATLiteral(1417))
-1224 1417 0
c (SATLiteral(1224) -> SATLiteral(1418))
-1224 1418 0
c (SATLiteral(1224) -> SATLiteral(1419))
-1224 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1225) -> SATLiteral(1421))
-1225 1421 0
c (SATLiteral(1225) -> SATLiteral(1422))
-1225 1422 0
c (SATLiteral(1225) -> SATLiteral(1423))
-1225 1423 0
c (SATLiteral(1225) -> SATLiteral(1424))
-1225 1424 0
c (SATLiteral(1225) -> SATLiteral(1425))
-1225 1425 0
c (SATLiteral(1225) -> SATLiteral(1426))
-1225 1426 0
c (SATLiteral(1225) -> SATLiteral(1427))
-1225 1427 0
c (SATLiteral(1225) -> SATLiteral(1428))
-1225 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1226) -> SATLiteral(1430))
-1226 1430 0
c (SATLiteral(1226) -> SATLiteral(1431))
-1226 1431 0
c (SATLiteral(1226) -> SATLiteral(1432))
-1226 1432 0
c (SATLiteral(1226) -> SATLiteral(1433))
-1226 1433 0
c (SATLiteral(1226) -> SATLiteral(1434))
-1226 1434 0
c (SATLiteral(1226) -> SATLiteral(1435))
-1226 1435 0
c (SATLiteral(1226) -> SATLiteral(1436))
-1226 1436 0
c (SATLiteral(1226) -> SATLiteral(1437))
-1226 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1227) -> SATLiteral(1439))
-1227 1439 0
c (SATLiteral(1227) -> SATLiteral(1440))
-1227 1440 0
c (SATLiteral(1227) -> SATLiteral(1441))
-1227 1441 0
c (SATLiteral(1227) -> SATLiteral(1442))
-1227 1442 0
c (SATLiteral(1227) -> SATLiteral(1443))
-1227 1443 0
c (SATLiteral(1227) -> SATLiteral(1444))
-1227 1444 0
c (SATLiteral(1227) -> SATLiteral(1445))
-1227 1445 0
c (SATLiteral(1227) -> SATLiteral(1446))
-1227 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1228) -> SATLiteral(1448))
-1228 1448 0
c (SATLiteral(1228) -> SATLiteral(1449))
-1228 1449 0
c (SATLiteral(1228) -> SATLiteral(1450))
-1228 1450 0
c (SATLiteral(1228) -> SATLiteral(1451))
-1228 1451 0
c (SATLiteral(1228) -> SATLiteral(1452))
-1228 1452 0
c (SATLiteral(1228) -> SATLiteral(1453))
-1228 1453 0
c (SATLiteral(1228) -> SATLiteral(1454))
-1228 1454 0
c (SATLiteral(1228) -> SATLiteral(1455))
-1228 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1229) -> SATLiteral(1457))
-1229 1457 0
c (SATLiteral(1229) -> SATLiteral(1458))
-1229 1458 0
c (SATLiteral(1229) -> SATLiteral(1459))
-1229 1459 0
c (SATLiteral(1229) -> SATLiteral(1460))
-1229 1460 0
c (SATLiteral(1229) -> SATLiteral(1461))
-1229 1461 0
c (SATLiteral(1229) -> SATLiteral(1462))
-1229 1462 0
c (SATLiteral(1229) -> SATLiteral(1463))
-1229 1463 0
c (SATLiteral(1229) -> SATLiteral(1464))
-1229 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1230) -> SATLiteral(1466))
-1230 1466 0
c (SATLiteral(1230) -> SATLiteral(1467))
-1230 1467 0
c (SATLiteral(1230) -> SATLiteral(1468))
-1230 1468 0
c (SATLiteral(1230) -> SATLiteral(1469))
-1230 1469 0
c (SATLiteral(1230) -> SATLiteral(1470))
-1230 1470 0
c (SATLiteral(1230) -> SATLiteral(1471))
-1230 1471 0
c (SATLiteral(1230) -> SATLiteral(1472))
-1230 1472 0
c (SATLiteral(1230) -> SATLiteral(1473))
-1230 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1231) -> SATLiteral(1475))
-1231 1475 0
c (SATLiteral(1231) -> SATLiteral(1476))
-1231 1476 0
c (SATLiteral(1231) -> SATLiteral(1477))
-1231 1477 0
c (SATLiteral(1231) -> SATLiteral(1478))
-1231 1478 0
c (SATLiteral(1231) -> SATLiteral(1479))
-1231 1479 0
c (SATLiteral(1231) -> SATLiteral(1480))
-1231 1480 0
c (SATLiteral(1231) -> SATLiteral(1481))
-1231 1481 0
c (SATLiteral(1231) -> SATLiteral(1482))
-1231 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1232) -> SATLiteral(1484))
-1232 1484 0
c (SATLiteral(1232) -> SATLiteral(1485))
-1232 1485 0
c (SATLiteral(1232) -> SATLiteral(1486))
-1232 1486 0
c (SATLiteral(1232) -> SATLiteral(1487))
-1232 1487 0
c (SATLiteral(1232) -> SATLiteral(1488))
-1232 1488 0
c (SATLiteral(1232) -> SATLiteral(1489))
-1232 1489 0
c (SATLiteral(1232) -> SATLiteral(1490))
-1232 1490 0
c (SATLiteral(1232) -> SATLiteral(1491))
-1232 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1233) -> SATLiteral(1493))
-1233 1493 0
c (SATLiteral(1233) -> SATLiteral(1494))
-1233 1494 0
c (SATLiteral(1233) -> SATLiteral(1495))
-1233 1495 0
c (SATLiteral(1233) -> SATLiteral(1496))
-1233 1496 0
c (SATLiteral(1233) -> SATLiteral(1497))
-1233 1497 0
c (SATLiteral(1233) -> SATLiteral(1498))
-1233 1498 0
c (SATLiteral(1233) -> SATLiteral(1499))
-1233 1499 0
c (SATLiteral(1233) -> SATLiteral(1500))
-1233 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1234) -> SATLiteral(1502))
-1234 1502 0
c (SATLiteral(1234) -> SATLiteral(1503))
-1234 1503 0
c (SATLiteral(1234) -> SATLiteral(1504))
-1234 1504 0
c (SATLiteral(1234) -> SATLiteral(1505))
-1234 1505 0
c (SATLiteral(1234) -> SATLiteral(1506))
-1234 1506 0
c (SATLiteral(1234) -> SATLiteral(1507))
-1234 1507 0
c (SATLiteral(1234) -> SATLiteral(1508))
-1234 1508 0
c (SATLiteral(1234) -> SATLiteral(1509))
-1234 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1235) -> SATLiteral(1511))
-1235 1511 0
c (SATLiteral(1235) -> SATLiteral(1512))
-1235 1512 0
c (SATLiteral(1235) -> SATLiteral(1513))
-1235 1513 0
c (SATLiteral(1235) -> SATLiteral(1514))
-1235 1514 0
c (SATLiteral(1235) -> SATLiteral(1515))
-1235 1515 0
c (SATLiteral(1235) -> SATLiteral(1516))
-1235 1516 0
c (SATLiteral(1235) -> SATLiteral(1517))
-1235 1517 0
c (SATLiteral(1235) -> SATLiteral(1518))
-1235 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1236) -> SATLiteral(1520))
-1236 1520 0
c (SATLiteral(1236) -> SATLiteral(1521))
-1236 1521 0
c (SATLiteral(1236) -> SATLiteral(1522))
-1236 1522 0
c (SATLiteral(1236) -> SATLiteral(1523))
-1236 1523 0
c (SATLiteral(1236) -> SATLiteral(1524))
-1236 1524 0
c (SATLiteral(1236) -> SATLiteral(1525))
-1236 1525 0
c (SATLiteral(1236) -> SATLiteral(1526))
-1236 1526 0
c (SATLiteral(1236) -> SATLiteral(1527))
-1236 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1237) -> SATLiteral(1529))
-1237 1529 0
c (SATLiteral(1237) -> SATLiteral(1530))
-1237 1530 0
c (SATLiteral(1237) -> SATLiteral(1531))
-1237 1531 0
c (SATLiteral(1237) -> SATLiteral(1532))
-1237 1532 0
c (SATLiteral(1237) -> SATLiteral(1533))
-1237 1533 0
c (SATLiteral(1237) -> SATLiteral(1534))
-1237 1534 0
c (SATLiteral(1237) -> SATLiteral(1535))
-1237 1535 0
c (SATLiteral(1237) -> SATLiteral(1536))
-1237 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1238) -> SATLiteral(1538))
-1238 1538 0
c (SATLiteral(1238) -> SATLiteral(1539))
-1238 1539 0
c (SATLiteral(1238) -> SATLiteral(1540))
-1238 1540 0
c (SATLiteral(1238) -> SATLiteral(1541))
-1238 1541 0
c (SATLiteral(1238) -> SATLiteral(1542))
-1238 1542 0
c (SATLiteral(1238) -> SATLiteral(1543))
-1238 1543 0
c (SATLiteral(1238) -> SATLiteral(1544))
-1238 1544 0
c (SATLiteral(1238) -> SATLiteral(1545))
-1238 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1239) -> SATLiteral(1547))
-1239 1547 0
c (SATLiteral(1239) -> SATLiteral(1548))
-1239 1548 0
c (SATLiteral(1239) -> SATLiteral(1549))
-1239 1549 0
c (SATLiteral(1239) -> SATLiteral(1550))
-1239 1550 0
c (SATLiteral(1239) -> SATLiteral(1551))
-1239 1551 0
c (SATLiteral(1239) -> SATLiteral(1552))
-1239 1552 0
c (SATLiteral(1239) -> SATLiteral(1553))
-1239 1553 0
c (SATLiteral(1239) -> SATLiteral(1554))
-1239 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1240) -> SATLiteral(1556))
-1240 1556 0
c (SATLiteral(1240) -> SATLiteral(1557))
-1240 1557 0
c (SATLiteral(1240) -> SATLiteral(1558))
-1240 1558 0
c (SATLiteral(1240) -> SATLiteral(1559))
-1240 1559 0
c (SATLiteral(1240) -> SATLiteral(1560))
-1240 1560 0
c (SATLiteral(1240) -> SATLiteral(1561))
-1240 1561 0
c (SATLiteral(1240) -> SATLiteral(1562))
-1240 1562 0
c (SATLiteral(1240) -> SATLiteral(1563))
-1240 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1241) -> SATLiteral(1565))
-1241 1565 0
c (SATLiteral(1241) -> SATLiteral(1566))
-1241 1566 0
c (SATLiteral(1241) -> SATLiteral(1567))
-1241 1567 0
c (SATLiteral(1241) -> SATLiteral(1568))
-1241 1568 0
c (SATLiteral(1241) -> SATLiteral(1569))
-1241 1569 0
c (SATLiteral(1241) -> SATLiteral(1570))
-1241 1570 0
c (SATLiteral(1241) -> SATLiteral(1571))
-1241 1571 0
c (SATLiteral(1241) -> SATLiteral(1572))
-1241 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1242) -> SATLiteral(1574))
-1242 1574 0
c (SATLiteral(1242) -> SATLiteral(1575))
-1242 1575 0
c (SATLiteral(1242) -> SATLiteral(1576))
-1242 1576 0
c (SATLiteral(1242) -> SATLiteral(1577))
-1242 1577 0
c (SATLiteral(1242) -> SATLiteral(1578))
-1242 1578 0
c (SATLiteral(1242) -> SATLiteral(1579))
-1242 1579 0
c (SATLiteral(1242) -> SATLiteral(1580))
-1242 1580 0
c (SATLiteral(1242) -> SATLiteral(1581))
-1242 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1243) -> SATLiteral(1583))
-1243 1583 0
c (SATLiteral(1243) -> SATLiteral(1584))
-1243 1584 0
c (SATLiteral(1243) -> SATLiteral(1585))
-1243 1585 0
c (SATLiteral(1243) -> SATLiteral(1586))
-1243 1586 0
c (SATLiteral(1243) -> SATLiteral(1587))
-1243 1587 0
c (SATLiteral(1243) -> SATLiteral(1588))
-1243 1588 0
c (SATLiteral(1243) -> SATLiteral(1589))
-1243 1589 0
c (SATLiteral(1243) -> SATLiteral(1590))
-1243 1590 0
c (SATLiteral(1244) -> SATLiteral(1591))
-1244 1591 0
c (SATLiteral(1244) -> SATLiteral(1592))
-1244 1592 0
c (SATLiteral(1244) -> SATLiteral(1593))
-1244 1593 0
c (SATLiteral(1244) -> SATLiteral(1594))
-1244 1594 0
c (SATLiteral(1244) -> SATLiteral(1595))
-1244 1595 0
c (SATLiteral(1244) -> SATLiteral(1596))
-1244 1596 0
c (SATLiteral(1244) -> SATLiteral(1597))
-1244 1597 0
c (SATLiteral(1244) -> SATLiteral(1598))
-1244 1598 0
c (SATLiteral(1244) -> SATLiteral(1599))
-1244 1599 0
c (SATLiteral(1247) -> SATLiteral(1600))
-1247 1600 0
c (SATLiteral(1247) -> SATLiteral(1601))
-1247 1601 0
c (SATLiteral(1247) -> SATLiteral(1602))
-1247 1602 0
c (SATLiteral(1247) -> SATLiteral(1603))
-1247 1603 0
c (SATLiteral(1247) -> SATLiteral(1604))
-1247 1604 0
c (SATLiteral(1247) -> SATLiteral(1605))
-1247 1605 0
c (SATLiteral(1247) -> SATLiteral(1606))
-1247 1606 0
c (SATLiteral(1247) -> SATLiteral(1607))
-1247 1607 0
c (SATLiteral(1247) -> SATLiteral(1608))
-1247 1608 0
c (SATLiteral(1249) -> SATLiteral(1609))
-1249 1609 0
c (SATLiteral(1249) -> SATLiteral(1610))
-1249 1610 0
c (SATLiteral(1249) -> SATLiteral(1611))
-1249 1611 0
c (SATLiteral(1249) -> SATLiteral(1612))
-1249 1612 0
c (SATLiteral(1249) -> SATLiteral(1613))
-1249 1613 0
c (SATLiteral(1249) -> SATLiteral(1614))
-1249 1614 0
c (SATLiteral(1249) -> SATLiteral(1615))
-1249 1615 0
c (SATLiteral(1249) -> SATLiteral(1616))
-1249 1616 0
c (SATLiteral(1249) -> SATLiteral(1617))
-1249 1617 0
c (SATLiteral(1251) -> SATLiteral(1618))
-1251 1618 0
c (SATLiteral(1251) -> SATLiteral(1619))
-1251 1619 0
c (SATLiteral(1251) -> SATLiteral(1620))
-1251 1620 0
c (SATLiteral(1251) -> SATLiteral(1621))
-1251 1621 0
c (SATLiteral(1251) -> SATLiteral(1622))
-1251 1622 0
c (SATLiteral(1251) -> SATLiteral(1623))
-1251 1623 0
c (SATLiteral(1251) -> SATLiteral(1624))
-1251 1624 0
c (SATLiteral(1251) -> SATLiteral(1625))
-1251 1625 0
c (SATLiteral(1251) -> SATLiteral(1626))
-1251 1626 0
c (SATLiteral(1254) -> SATLiteral(1627))
-1254 1627 0
c (SATLiteral(1254) -> SATLiteral(1628))
-1254 1628 0
c (SATLiteral(1254) -> SATLiteral(1629))
-1254 1629 0
c (SATLiteral(1254) -> SATLiteral(1630))
-1254 1630 0
c (SATLiteral(1254) -> SATLiteral(1631))
-1254 1631 0
c (SATLiteral(1254) -> SATLiteral(1632))
-1254 1632 0
c (SATLiteral(1254) -> SATLiteral(1633))
-1254 1633 0
c (SATLiteral(1254) -> SATLiteral(1634))
-1254 1634 0
c (SATLiteral(1254) -> SATLiteral(1635))
-1254 1635 0
c (SATLiteral(1256) -> SATLiteral(1636))
-1256 1636 0
c (SATLiteral(1256) -> SATLiteral(1637))
-1256 1637 0
c (SATLiteral(1256) -> SATLiteral(1638))
-1256 1638 0
c (SATLiteral(1256) -> SATLiteral(1639))
-1256 1639 0
c (SATLiteral(1256) -> SATLiteral(1640))
-1256 1640 0
c (SATLiteral(1256) -> SATLiteral(1641))
-1256 1641 0
c (SATLiteral(1256) -> SATLiteral(1642))
-1256 1642 0
c (SATLiteral(1256) -> SATLiteral(1643))
-1256 1643 0
c (SATLiteral(1256) -> SATLiteral(1644))
-1256 1644 0
c (SATLiteral(1258) -> SATLiteral(1645))
-1258 1645 0
c (SATLiteral(1258) -> SATLiteral(1646))
-1258 1646 0
c (SATLiteral(1258) -> SATLiteral(1647))
-1258 1647 0
c (SATLiteral(1258) -> SATLiteral(1648))
-1258 1648 0
c (SATLiteral(1258) -> SATLiteral(1649))
-1258 1649 0
c (SATLiteral(1258) -> SATLiteral(1650))
-1258 1650 0
c (SATLiteral(1258) -> SATLiteral(1651))
-1258 1651 0
c (SATLiteral(1258) -> SATLiteral(1652))
-1258 1652 0
c (SATLiteral(1258) -> SATLiteral(1653))
-1258 1653 0
c (SATLiteral(1259) -> SATLiteral(1654))
-1259 1654 0
c (SATLiteral(1259) -> SATLiteral(1655))
-1259 1655 0
c (SATLiteral(1259) -> SATLiteral(1656))
-1259 1656 0
c (SATLiteral(1259) -> SATLiteral(1657))
-1259 1657 0
c (SATLiteral(1259) -> SATLiteral(1658))
-1259 1658 0
c (SATLiteral(1259) -> SATLiteral(1659))
-1259 1659 0
c (SATLiteral(1259) -> SATLiteral(1660))
-1259 1660 0
c (SATLiteral(1259) -> SATLiteral(1661))
-1259 1661 0
c (SATLiteral(1259) -> SATLiteral(1662))
-1259 1662 0
c (SATLiteral(1260) -> SATLiteral(1663))
-1260 1663 0
c (SATLiteral(1260) -> SATLiteral(1664))
-1260 1664 0
c (SATLiteral(1260) -> SATLiteral(1665))
-1260 1665 0
c (SATLiteral(1260) -> SATLiteral(1666))
-1260 1666 0
c (SATLiteral(1260) -> SATLiteral(1667))
-1260 1667 0
c (SATLiteral(1260) -> SATLiteral(1668))
-1260 1668 0
c (SATLiteral(1260) -> SATLiteral(1669))
-1260 1669 0
c (SATLiteral(1260) -> SATLiteral(1670))
-1260 1670 0
c (SATLiteral(1260) -> SATLiteral(1671))
-1260 1671 0
c (SATLiteral(1261) -> SATLiteral(1672))
-1261 1672 0
c (SATLiteral(1261) -> SATLiteral(1673))
-1261 1673 0
c (SATLiteral(1261) -> SATLiteral(1674))
-1261 1674 0
c (SATLiteral(1261) -> SATLiteral(1675))
-1261 1675 0
c (SATLiteral(1261) -> SATLiteral(1676))
-1261 1676 0
c (SATLiteral(1261) -> SATLiteral(1677))
-1261 1677 0
c (SATLiteral(1261) -> SATLiteral(1678))
-1261 1678 0
c (SATLiteral(1261) -> SATLiteral(1679))
-1261 1679 0
c (SATLiteral(1261) -> SATLiteral(1680))
-1261 1680 0
c (SATLiteral(1262) -> SATLiteral(1681))
-1262 1681 0
c (SATLiteral(1262) -> SATLiteral(1682))
-1262 1682 0
c (SATLiteral(1262) -> SATLiteral(1683))
-1262 1683 0
c (SATLiteral(1262) -> SATLiteral(1684))
-1262 1684 0
c (SATLiteral(1262) -> SATLiteral(1685))
-1262 1685 0
c (SATLiteral(1262) -> SATLiteral(1686))
-1262 1686 0
c (SATLiteral(1262) -> SATLiteral(1687))
-1262 1687 0
c (SATLiteral(1262) -> SATLiteral(1688))
-1262 1688 0
c (SATLiteral(1262) -> SATLiteral(1689))
-1262 1689 0
c (SATLiteral(1263) -> SATLiteral(1690))
-1263 1690 0
c (SATLiteral(1263) -> SATLiteral(1691))
-1263 1691 0
c (SATLiteral(1263) -> SATLiteral(1692))
-1263 1692 0
c (SATLiteral(1263) -> SATLiteral(1693))
-1263 1693 0
c (SATLiteral(1263) -> SATLiteral(1694))
-1263 1694 0
c (SATLiteral(1263) -> SATLiteral(1695))
-1263 1695 0
c (SATLiteral(1263) -> SATLiteral(1696))
-1263 1696 0
c (SATLiteral(1263) -> SATLiteral(1697))
-1263 1697 0
c (SATLiteral(1263) -> SATLiteral(1698))
-1263 1698 0
c (SATLiteral(1265) -> SATLiteral(1699))
-1265 1699 0
c (SATLiteral(1265) -> SATLiteral(1700))
-1265 1700 0
c (SATLiteral(1265) -> SATLiteral(1701))
-1265 1701 0
c (SATLiteral(1265) -> SATLiteral(1702))
-1265 1702 0
c (SATLiteral(1265) -> SATLiteral(1703))
-1265 1703 0
c (SATLiteral(1265) -> SATLiteral(1704))
-1265 1704 0
c (SATLiteral(1265) -> SATLiteral(1705))
-1265 1705 0
c (SATLiteral(1265) -> SATLiteral(1706))
-1265 1706 0
c (SATLiteral(1265) -> SATLiteral(1707))
-1265 1707 0
c (SATLiteral(1266) -> SATLiteral(1708))
-1266 1708 0
c (SATLiteral(1266) -> SATLiteral(1709))
-1266 1709 0
c (SATLiteral(1266) -> SATLiteral(1710))
-1266 1710 0
c (SATLiteral(1266) -> SATLiteral(1711))
-1266 1711 0
c (SATLiteral(1266) -> SATLiteral(1712))
-1266 1712 0
c (SATLiteral(1266) -> SATLiteral(1713))
-1266 1713 0
c (SATLiteral(1266) -> SATLiteral(1714))
-1266 1714 0
c (SATLiteral(1266) -> SATLiteral(1715))
-1266 1715 0
c (SATLiteral(1266) -> SATLiteral(1716))
-1266 1716 0
c (SATLiteral(1271) -> SATLiteral(1717))
-1271 1717 0
c (SATLiteral(1271) -> SATLiteral(1718))
-1271 1718 0
c (SATLiteral(1271) -> SATLiteral(1719))
-1271 1719 0
c (SATLiteral(1271) -> SATLiteral(1720))
-1271 1720 0
c (SATLiteral(1271) -> SATLiteral(1721))
-1271 1721 0
c (SATLiteral(1271) -> SATLiteral(1722))
-1271 1722 0
c (SATLiteral(1271) -> SATLiteral(1723))
-1271 1723 0
c (SATLiteral(1271) -> SATLiteral(1724))
-1271 1724 0
c (SATLiteral(1271) -> SATLiteral(1725))
-1271 1725 0
c (SATLiteral(1275) -> SATLiteral(1726))
-1275 1726 0
c (SATLiteral(1275) -> SATLiteral(1727))
-1275 1727 0
c (SATLiteral(1275) -> SATLiteral(1728))
-1275 1728 0
c (SATLiteral(1275) -> SATLiteral(1729))
-1275 1729 0
c (SATLiteral(1275) -> SATLiteral(1730))
-1275 1730 0
c (SATLiteral(1275) -> SATLiteral(1731))
-1275 1731 0
c (SATLiteral(1275) -> SATLiteral(1732))
-1275 1732 0
c (SATLiteral(1275) -> SATLiteral(1733))
-1275 1733 0
c (SATLiteral(1275) -> SATLiteral(1734))
-1275 1734 0
c (( - aux427 + shift(x_00001_00001, -1) + shift(x_00001_00004, -1))<=0)
47 -1735 0
48 -1736 0
50 -1738 0
52 -1740 0
54 -1742 0
56 -1744 0
58 -1746 0
60 -1748 0
2 -1735 0
2 47 -1736 0
2 48 -1738 0
2 50 -1740 0
2 52 -1742 0
2 54 -1744 0
2 56 -1746 0
2 58 -1748 0
2 60 -1750 0
3 -1736 0
3 47 -1738 0
3 48 -1740 0
3 50 -1742 0
3 52 -1744 0
3 54 -1746 0
3 56 -1748 0
3 58 -1750 0
3 60 -1752 0
5 -1738 0
5 47 -1740 0
5 48 -1742 0
5 50 -1744 0
5 52 -1746 0
5 54 -1748 0
5 56 -1750 0
5 58 -1752 0
5 60 -1754 0
7 -1740 0
7 47 -1742 0
7 48 -1744 0
7 50 -1746 0
7 52 -1748 0
7 54 -1750 0
7 56 -1752 0
7 58 -1754 0
7 60 -1756 0
9 -1742 0
9 47 -1744 0
9 48 -1746 0
9 50 -1748 0
9 52 -1750 0
9 54 -1752 0
9 56 -1754 0
9 58 -1756 0
9 60 -1758 0
11 -1744 0
11 47 -1746 0
11 48 -1748 0
11 50 -1750 0
11 52 -1752 0
11 54 -1754 0
11 56 -1756 0
11 58 -1758 0
11 60 -1760 0
13 -1746 0
13 47 -1748 0
13 48 -1750 0
13 50 -1752 0
13 52 -1754 0
13 54 -1756 0
13 56 -1758 0
13 58 -1760 0
13 60 -1762 0
15 -1748 0
15 47 -1750 0
15 48 -1752 0
15 50 -1754 0
15 52 -1756 0
15 54 -1758 0
15 56 -1760 0
15 58 -1762 0
15 60 -1764 0
c (0<=( - aux427 + shift(x_00001_00001, -1) + shift(x_00001_00004, -1)))
-60 1764 0
-58 1762 0
-56 1760 0
-54 1758 0
-52 1756 0
-50 1754 0
-48 1752 0
-47 1750 0
-15 1764 0
-15 -60 1762 0
-15 -58 1760 0
-15 -56 1758 0
-15 -54 1756 0
-15 -52 1754 0
-15 -50 1752 0
-15 -48 1750 0
-15 -47 1748 0
-13 1762 0
-13 -60 1760 0
-13 -58 1758 0
-13 -56 1756 0
-13 -54 1754 0
-13 -52 1752 0
-13 -50 1750 0
-13 -48 1748 0
-13 -47 1746 0
-11 1760 0
-11 -60 1758 0
-11 -58 1756 0
-11 -56 1754 0
-11 -54 1752 0
-11 -52 1750 0
-11 -50 1748 0
-11 -48 1746 0
-11 -47 1744 0
-9 1758 0
-9 -60 1756 0
-9 -58 1754 0
-9 -56 1752 0
-9 -54 1750 0
-9 -52 1748 0
-9 -50 1746 0
-9 -48 1744 0
-9 -47 1742 0
-7 1756 0
-7 -60 1754 0
-7 -58 1752 0
-7 -56 1750 0
-7 -54 1748 0
-7 -52 1746 0
-7 -50 1744 0
-7 -48 1742 0
-7 -47 1740 0
-5 1754 0
-5 -60 1752 0
-5 -58 1750 0
-5 -56 1748 0
-5 -54 1746 0
-5 -52 1744 0
-5 -50 1742 0
-5 -48 1740 0
-5 -47 1738 0
-3 1752 0
-3 -60 1750 0
-3 -58 1748 0
-3 -56 1746 0
-3 -54 1744 0
-3 -52 1742 0
-3 -50 1740 0
-3 -48 1738 0
-3 -47 1736 0
-2 1750 0
-2 -60 1748 0
-2 -58 1746 0
-2 -56 1744 0
-2 -54 1742 0
-2 -52 1740 0
-2 -50 1738 0
-2 -48 1736 0
-2 -47 1735 0
c (( - aux428 + shift(x_00001_00009, -1) + shift(x_00002_00009, -1))<=0)
257 -1766 0
258 -1767 0
260 -1769 0
262 -1771 0
264 -1773 0
266 -1775 0
268 -1777 0
270 -1779 0
122 -1766 0
122 257 -1767 0
122 258 -1769 0
122 260 -1771 0
122 262 -1773 0
122 264 -1775 0
122 266 -1777 0
122 268 -1779 0
122 270 -1781 0
123 -1767 0
123 257 -1769 0
123 258 -1771 0
123 260 -1773 0
123 262 -1775 0
123 264 -1777 0
123 266 -1779 0
123 268 -1781 0
123 270 -1783 0
125 -1769 0
125 257 -1771 0
125 258 -1773 0
125 260 -1775 0
125 262 -1777 0
125 264 -1779 0
125 266 -1781 0
125 268 -1783 0
125 270 -1785 0
127 -1771 0
127 257 -1773 0
127 258 -1775 0
127 260 -1777 0
127 262 -1779 0
127 264 -1781 0
127 266 -1783 0
127 268 -1785 0
127 270 -1787 0
129 -1773 0
129 257 -1775 0
129 258 -1777 0
129 260 -1779 0
129 262 -1781 0
129 264 -1783 0
129 266 -1785 0
129 268 -1787 0
129 270 -1789 0
131 -1775 0
131 257 -1777 0
131 258 -1779 0
131 260 -1781 0
131 262 -1783 0
131 264 -1785 0
131 266 -1787 0
131 268 -1789 0
131 270 -1791 0
133 -1777 0
133 257 -1779 0
133 258 -1781 0
133 260 -1783 0
133 262 -1785 0
133 264 -1787 0
133 266 -1789 0
133 268 -1791 0
133 270 -1793 0
135 -1779 0
135 257 -1781 0
135 258 -1783 0
135 260 -1785 0
135 262 -1787 0
135 264 -1789 0
135 266 -1791 0
135 268 -1793 0
135 270 -1795 0
c (0<=( - aux428 + shift(x_00001_00009, -1) + shift(x_00002_00009, -1)))
-270 1795 0
-268 1793 0
-266 1791 0
-264 1789 0
-262 1787 0
-260 1785 0
-258 1783 0
-257 1781 0
-135 1795 0
-135 -270 1793 0
-135 -268 1791 0
-135 -266 1789 0
-135 -264 1787 0
-135 -262 1785 0
-135 -260 1783 0
-135 -258 1781 0
-135 -257 1779 0
-133 1793 0
-133 -270 1791 0
-133 -268 1789 0
-133 -266 1787 0
-133 -264 1785 0
-133 -262 1783 0
-133 -260 1781 0
-133 -258 1779 0
-133 -257 1777 0
-131 1791 0
-131 -270 1789 0
-131 -268 1787 0
-131 -266 1785 0
-131 -264 1783 0
-131 -262 1781 0
-131 -260 1779 0
-131 -258 1777 0
-131 -257 1775 0
-129 1789 0
-129 -270 1787 0
-129 -268 1785 0
-129 -266 1783 0
-129 -264 1781 0
-129 -262 1779 0
-129 -260 1777 0
-129 -258 1775 0
-129 -257 1773 0
-127 1787 0
-127 -270 1785 0
-127 -268 1783 0
-127 -266 1781 0
-127 -264 1779 0
-127 -262 1777 0
-127 -260 1775 0
-127 -258 1773 0
-127 -257 1771 0
-125 1785 0
-125 -270 1783 0
-125 -268 1781 0
-125 -266 1779 0
-125 -264 1777 0
-125 -262 1775 0
-125 -260 1773 0
-125 -258 1771 0
-125 -257 1769 0
-123 1783 0
-123 -270 1781 0
-123 -268 1779 0
-123 -266 1777 0
-123 -264 1775 0
-123 -262 1773 0
-123 -260 1771 0
-123 -258 1769 0
-123 -257 1767 0
-122 1781 0
-122 -270 1779 0
-122 -268 1777 0
-122 -266 1775 0
-122 -264 1773 0
-122 -262 1771 0
-122 -260 1769 0
-122 -258 1767 0
-122 -257 1766 0
c (( - aux429 + shift(x_00005_00007, -1) + shift(x_00004_00006, -1))<=0)
482 -1797 0
483 -1798 0
485 -1800 0
487 -1802 0
489 -1804 0
491 -1806 0
493 -1808 0
495 -1810 0
632 -1797 0
632 482 -1798 0
632 483 -1800 0
632 485 -1802 0
632 487 -1804 0
632 489 -1806 0
632 491 -1808 0
632 493 -1810 0
632 495 -1812 0
633 -1798 0
633 482 -1800 0
633 483 -1802 0
633 485 -1804 0
633 487 -1806 0
633 489 -1808 0
633 491 -1810 0
633 493 -1812 0
633 495 -1814 0
635 -1800 0
635 482 -1802 0
635 483 -1804 0
635 485 -1806 0
635 487 -1808 0
635 489 -1810 0
635 491 -1812 0
635 493 -1814 0
635 495 -1816 0
637 -1802 0
637 482 -1804 0
637 483 -1806 0
637 485 -1808 0
637 487 -1810 0
637 489 -1812 0
637 491 -1814 0
637 493 -1816 0
637 495 -1818 0
639 -1804 0
639 482 -1806 0
639 483 -1808 0
639 485 -1810 0
639 487 -1812 0
639 489 -1814 0
639 491 -1816 0
639 493 -1818 0
639 495 -1820 0
641 -1806 0
641 482 -1808 0
641 483 -1810 0
641 485 -1812 0
641 487 -1814 0
641 489 -1816 0
641 491 -1818 0
641 493 -1820 0
641 495 -1822 0
643 -1808 0
643 482 -1810 0
643 483 -1812 0
643 485 -1814 0
643 487 -1816 0
643 489 -1818 0
643 491 -1820 0
643 493 -1822 0
643 495 -1824 0
645 -1810 0
645 482 -1812 0
645 483 -1814 0
645 485 -1816 0
645 487 -1818 0
645 489 -1820 0
645 491 -1822 0
645 493 -1824 0
645 495 -1826 0
c (0<=( - aux429 + shift(x_00005_00007, -1) + shift(x_00004_00006, -1)))
-495 1826 0
-493 1824 0
-491 1822 0
-489 1820 0
-487 1818 0
-485 1816 0
-483 1814 0
-482 1812 0
-645 1826 0
-645 -495 1824 0
-645 -493 1822 0
-645 -491 1820 0
-645 -489 1818 0
-645 -487 1816 0
-645 -485 1814 0
-645 -483 1812 0
-645 -482 1810 0
-643 1824 0
-643 -495 1822 0
-643 -493 1820 0
-643 -491 1818 0
-643 -489 1816 0
-643 -487 1814 0
-643 -485 1812 0
-643 -483 1810 0
-643 -482 1808 0
-641 1822 0
-641 -495 1820 0
-641 -493 1818 0
-641 -491 1816 0
-641 -489 1814 0
-641 -487 1812 0
-641 -485 1810 0
-641 -483 1808 0
-641 -482 1806 0
-639 1820 0
-639 -495 1818 0
-639 -493 1816 0
-639 -491 1814 0
-639 -489 1812 0
-639 -487 1810 0
-639 -485 1808 0
-639 -483 1806 0
-639 -482 1804 0
-637 1818 0
-637 -495 1816 0
-637 -493 1814 0
-637 -491 1812 0
-637 -489 1810 0
-637 -487 1808 0
-637 -485 1806 0
-637 -483 1804 0
-637 -482 1802 0
-635 1816 0
-635 -495 1814 0
-635 -493 1812 0
-635 -491 1810 0
-635 -489 1808 0
-635 -487 1806 0
-635 -485 1804 0
-635 -483 1802 0
-635 -482 1800 0
-633 1814 0
-633 -495 1812 0
-633 -493 1810 0
-633 -491 1808 0
-633 -489 1806 0
-633 -487 1804 0
-633 -485 1802 0
-633 -483 1800 0
-633 -482 1798 0
-632 1812 0
-632 -495 1810 0
-632 -493 1808 0
-632 -491 1806 0
-632 -489 1804 0
-632 -487 1802 0
-632 -485 1800 0
-632 -483 1798 0
-632 -482 1797 0
c ((shift(x_00007_00001, -1) - aux430 + shift(x_00009_00001, -1))<=0)
1082 -1828 0
1083 -1829 0
1085 -1831 0
1087 -1833 0
1089 -1835 0
1091 -1837 0
1093 -1839 0
1095 -1841 0
812 -1828 0
812 1082 -1829 0
812 1083 -1831 0
812 1085 -1833 0
812 1087 -1835 0
812 1089 -1837 0
812 1091 -1839 0
812 1093 -1841 0
812 1095 -1843 0
813 -1829 0
813 1082 -1831 0
813 1083 -1833 0
813 1085 -1835 0
813 1087 -1837 0
813 1089 -1839 0
813 1091 -1841 0
813 1093 -1843 0
813 1095 -1845 0
815 -1831 0
815 1082 -1833 0
815 1083 -1835 0
815 1085 -1837 0
815 1087 -1839 0
815 1089 -1841 0
815 1091 -1843 0
815 1093 -1845 0
815 1095 -1847 0
817 -1833 0
817 1082 -1835 0
817 1083 -1837 0
817 1085 -1839 0
817 1087 -1841 0
817 1089 -1843 0
817 1091 -1845 0
817 1093 -1847 0
817 1095 -1849 0
819 -1835 0
819 1082 -1837 0
819 1083 -1839 0
819 1085 -1841 0
819 1087 -1843 0
819 1089 -1845 0
819 1091 -1847 0
819 1093 -1849 0
819 1095 -1851 0
821 -1837 0
821 1082 -1839 0
821 1083 -1841 0
821 1085 -1843 0
821 1087 -1845 0
821 1089 -1847 0
821 1091 -1849 0
821 1093 -1851 0
821 1095 -1853 0
823 -1839 0
823 1082 -1841 0
823 1083 -1843 0
823 1085 -1845 0
823 1087 -1847 0
823 1089 -1849 0
823 1091 -1851 0
823 1093 -1853 0
823 1095 -1855 0
825 -1841 0
825 1082 -1843 0
825 1083 -1845 0
825 1085 -1847 0
825 1087 -1849 0
825 1089 -1851 0
825 1091 -1853 0
825 1093 -1855 0
825 1095 -1857 0
c (0<=(shift(x_00007_00001, -1) - aux430 + shift(x_00009_00001, -1)))
-1095 1857 0
-1093 1855 0
-1091 1853 0
-1089 1851 0
-1087 1849 0
-1085 1847 0
-1083 1845 0
-1082 1843 0
-825 1857 0
-825 -1095 1855 0
-825 -1093 1853 0
-825 -1091 1851 0
-825 -1089 1849 0
-825 -1087 1847 0
-825 -1085 1845 0
-825 -1083 1843 0
-825 -1082 1841 0
-823 1855 0
-823 -1095 1853 0
-823 -1093 1851 0
-823 -1091 1849 0
-823 -1089 1847 0
-823 -1087 1845 0
-823 -1085 1843 0
-823 -1083 1841 0
-823 -1082 1839 0
-821 1853 0
-821 -1095 1851 0
-821 -1093 1849 0
-821 -1091 1847 0
-821 -1089 1845 0
-821 -1087 1843 0
-821 -1085 1841 0
-821 -1083 1839 0
-821 -1082 1837 0
-819 1851 0
-819 -1095 1849 0
-819 -1093 1847 0
-819 -1091 1845 0
-819 -1089 1843 0
-819 -1087 1841 0
-819 -1085 1839 0
-819 -1083 1837 0
-819 -1082 1835 0
-817 1849 0
-817 -1095 1847 0
-817 -1093 1845 0
-817 -1091 1843 0
-817 -1089 1841 0
-817 -1087 1839 0
-817 -1085 1837 0
-817 -1083 1835 0
-817 -1082 1833 0
-815 1847 0
-815 -1095 1845 0
-815 -1093 1843 0
-815 -1091 1841 0
-815 -1089 1839 0
-815 -1087 1837 0
-815 -1085 1835 0
-815 -1083 1833 0
-815 -1082 1831 0
-813 1845 0
-813 -1095 1843 0
-813 -1093 1841 0
-813 -1091 1839 0
-813 -1089 1837 0
-813 -1087 1835 0
-813 -1085 1833 0
-813 -1083 1831 0
-813 -1082 1829 0
-812 1843 0
-812 -1095 1841 0
-812 -1093 1839 0
-812 -1091 1837 0
-812 -1089 1835 0
-812 -1087 1833 0
-812 -1085 1831 0
-812 -1083 1829 0
-812 -1082 1828 0
c (( - aux431 + shift(x_00009_00006, -1) + shift(x_00009_00009, -1))<=0)
1202 -1859 0
1203 -1860 0
1205 -1862 0
1207 -1864 0
1209 -1866 0
1211 -1868 0
1213 -1870 0
1215 -1872 0
1157 -1859 0
1157 1202 -1860 0
1157 1203 -1862 0
1157 1205 -1864 0
1157 1207 -1866 0
1157 1209 -1868 0
1157 1211 -1870 0
1157 1213 -1872 0
1157 1215 -1874 0
1158 -1860 0
1158 1202 -1862 0
1158 1203 -1864 0
1158 1205 -1866 0
1158 1207 -1868 0
1158 1209 -1870 0
1158 1211 -1872 0
1158 1213 -1874 0
1158 1215 -1876 0
1160 -1862 0
1160 1202 -1864 0
1160 1203 -1866 0
1160 1205 -1868 0
1160 1207 -1870 0
1160 1209 -1872 0
1160 1211 -1874 0
1160 1213 -1876 0
1160 1215 -1878 0
1162 -1864 0
1162 1202 -1866 0
1162 1203 -1868 0
1162 1205 -1870 0
1162 1207 -1872 0
1162 1209 -1874 0
1162 1211 -1876 0
1162 1213 -1878 0
1162 1215 -1880 0
1164 -1866 0
1164 1202 -1868 0
1164 1203 -1870 0
1164 1205 -1872 0
1164 1207 -1874 0
1164 1209 -1876 0
1164 1211 -1878 0
1164 1213 -1880 0
1164 1215 -1882 0
1166 -1868 0
1166 1202 -1870 0
1166 1203 -1872 0
1166 1205 -1874 0
1166 1207 -1876 0
1166 1209 -1878 0
1166 1211 -1880 0
1166 1213 -1882 0
1166 1215 -1884 0
1168 -1870 0
1168 1202 -1872 0
1168 1203 -1874 0
1168 1205 -1876 0
1168 1207 -1878 0
1168 1209 -1880 0
1168 1211 -1882 0
1168 1213 -1884 0
1168 1215 -1886 0
1170 -1872 0
1170 1202 -1874 0
1170 1203 -1876 0
1170 1205 -1878 0
1170 1207 -1880 0
1170 1209 -1882 0
1170 1211 -1884 0
1170 1213 -1886 0
1170 1215 -1888 0
c (0<=( - aux431 + shift(x_00009_00006, -1) + shift(x_00009_00009, -1)))
-1215 1888 0
-1213 1886 0
-1211 1884 0
-1209 1882 0
-1207 1880 0
-1205 1878 0
-1203 1876 0
-1202 1874 0
-1170 1888 0
-1170 -1215 1886 0
-1170 -1213 1884 0
-1170 -1211 1882 0
-1170 -1209 1880 0
-1170 -1207 1878 0
-1170 -1205 1876 0
-1170 -1203 1874 0
-1170 -1202 1872 0
-1168 1886 0
-1168 -1215 1884 0
-1168 -1213 1882 0
-1168 -1211 1880 0
-1168 -1209 1878 0
-1168 -1207 1876 0
-1168 -1205 1874 0
-1168 -1203 1872 0
-1168 -1202 1870 0
-1166 1884 0
-1166 -1215 1882 0
-1166 -1213 1880 0
-1166 -1211 1878 0
-1166 -1209 1876 0
-1166 -1207 1874 0
-1166 -1205 1872 0
-1166 -1203 1870 0
-1166 -1202 1868 0
-1164 1882 0
-1164 -1215 1880 0
-1164 -1213 1878 0
-1164 -1211 1876 0
-1164 -1209 1874 0
-1164 -1207 1872 0
-1164 -1205 1870 0
-1164 -1203 1868 0
-1164 -1202 1866 0
-1162 1880 0
-1162 -1215 1878 0
-1162 -1213 1876 0
-1162 -1211 1874 0
-1162 -1209 1872 0
-1162 -1207 1870 0
-1162 -1205 1868 0
-1162 -1203 1866 0
-1162 -1202 1864 0
-1160 1878 0
-1160 -1215 1876 0
-1160 -1213 1874 0
-1160 -1211 1872 0
-1160 -1209 1870 0
-1160 -1207 1868 0
-1160 -1205 1866 0
-1160 -1203 1864 0
-1160 -1202 1862 0
-1158 1876 0
-1158 -1215 1874 0
-1158 -1213 1872 0
-1158 -1211 1870 0
-1158 -1209 1868 0
-1158 -1207 1866 0
-1158 -1205 1864 0
-1158 -1203 1862 0
-1158 -1202 1860 0
-1157 1874 0
-1157 -1215 1872 0
-1157 -1213 1870 0
-1157 -1211 1868 0
-1157 -1209 1866 0
-1157 -1207 1864 0
-1157 -1205 1862 0
-1157 -1203 1860 0
-1157 -1202 1859 0
c ((SATLiteral(2) + SATLiteral(47) - aux1890)<=0)
-47 -7722 0
-2 -7722 0
-2 -47 -7723 0
c (0<=(SATLiteral(2) + SATLiteral(47) - aux1890))
47 7723 0
2 7723 0
2 47 7722 0
c ((SATLiteral(4) + SATLiteral(49) - aux1891)<=0)
-49 -7725 0
-4 -7725 0
-4 -49 -7726 0
c (0<=(SATLiteral(4) + SATLiteral(49) - aux1891))
49 7726 0
4 7726 0
4 49 7725 0
c ((SATLiteral(6) + SATLiteral(51) - aux1892)<=0)
-51 -7728 0
-6 -7728 0
-6 -51 -7729 0
c (0<=(SATLiteral(6) + SATLiteral(51) - aux1892))
51 7729 0
6 7729 0
6 51 7728 0
c ((SATLiteral(8) + SATLiteral(53) - aux1893)<=0)
-53 -7731 0
-8 -7731 0
-8 -53 -7732 0
c (0<=(SATLiteral(8) + SATLiteral(53) - aux1893))
53 7732 0
8 7732 0
8 53 7731 0
c ((SATLiteral(10) + SATLiteral(55) - aux1894)<=0)
-55 -7734 0
-10 -7734 0
-10 -55 -7735 0
c (0<=(SATLiteral(10) + SATLiteral(55) - aux1894))
55 7735 0
10 7735 0
10 55 7734 0
c ((SATLiteral(12) + SATLiteral(57) - aux1895)<=0)
-57 -7737 0
-12 -7737 0
-12 -57 -7738 0
c (0<=(SATLiteral(12) + SATLiteral(57) - aux1895))
57 7738 0
12 7738 0
12 57 7737 0
c ((SATLiteral(14) + SATLiteral(59) - aux1896)<=0)
-59 -7740 0
-14 -7740 0
-14 -59 -7741 0
c (0<=(SATLiteral(14) + SATLiteral(59) - aux1896))
59 7741 0
14 7741 0
14 59 7740 0
c ((SATLiteral(16) + SATLiteral(61) - aux1897)<=0)
-61 -7743 0
-16 -7743 0
-16 -61 -7744 0
c (0<=(SATLiteral(16) + SATLiteral(61) - aux1897))
61 7744 0
16 7744 0
16 61 7743 0
c ((SATLiteral(-15) + SATLiteral(-60) - aux1898)<=0)
60 -7746 0
15 -7746 0
15 60 -7747 0
c (0<=(SATLiteral(-15) + SATLiteral(-60) - aux1898))
-60 7747 0
-15 7747 0
-15 -60 7746 0
c ((SATLiteral(377) - aux1899 + SATLiteral(257))<=0)
-257 -7749 0
-377 -7749 0
-377 -257 -7750 0
c (0<=(SATLiteral(377) - aux1899 + SATLiteral(257)))
257 7750 0
377 7750 0
377 257 7749 0
c ((SATLiteral(379) - aux1900 + SATLiteral(259))<=0)
-259 -7752 0
-379 -7752 0
-379 -259 -7753 0
c (0<=(SATLiteral(379) - aux1900 + SATLiteral(259)))
259 7753 0
379 7753 0
379 259 7752 0
c ((SATLiteral(381) - aux1901 + SATLiteral(261))<=0)
-261 -7755 0
-381 -7755 0
-381 -261 -7756 0
c (0<=(SATLiteral(381) - aux1901 + SATLiteral(261)))
261 7756 0
381 7756 0
381 261 7755 0
c ((SATLiteral(383) - aux1902 + SATLiteral(263))<=0)
-263 -7758 0
-383 -7758 0
-383 -263 -7759 0
c (0<=(SATLiteral(383) - aux1902 + SATLiteral(263)))
263 7759 0
383 7759 0
383 263 7758 0
c ((SATLiteral(385) - aux1903 + SATLiteral(265))<=0)
-265 -7761 0
-385 -7761 0
-385 -265 -7762 0
c (0<=(SATLiteral(385) - aux1903 + SATLiteral(265)))
265 7762 0
385 7762 0
385 265 7761 0
c ((SATLiteral(387) - aux1904 + SATLiteral(267))<=0)
-267 -7764 0
-387 -7764 0
-387 -267 -7765 0
c (0<=(SATLiteral(387) - aux1904 + SATLiteral(267)))
267 7765 0
387 7765 0
387 267 7764 0
c ((SATLiteral(389) - aux1905 + SATLiteral(269))<=0)
-269 -7767 0
-389 -7767 0
-389 -269 -7768 0
c (0<=(SATLiteral(389) - aux1905 + SATLiteral(269)))
269 7768 0
389 7768 0
389 269 7767 0
c ((SATLiteral(391) - aux1906 + SATLiteral(271))<=0)
-271 -7770 0
-391 -7770 0
-391 -271 -7771 0
c (0<=(SATLiteral(391) - aux1906 + SATLiteral(271)))
271 7771 0
391 7771 0
391 271 7770 0
c ((SATLiteral(-390) - aux1907 + SATLiteral(-270))<=0)
270 -7773 0
390 -7773 0
390 270 -7774 0
c (0<=(SATLiteral(-390) - aux1907 + SATLiteral(-270)))
-270 7774 0
-390 7774 0
-390 -270 7773 0
c (( - aux1908 + SATLiteral(482) + SATLiteral(632))<=0)
-632 -7776 0
-482 -7776 0
-482 -632 -7777 0
c (0<=( - aux1908 + SATLiteral(482) + SATLiteral(632)))
632 7777 0
482 7777 0
482 632 7776 0
c (( - aux1909 + SATLiteral(484) + SATLiteral(634))<=0)
-634 -7779 0
-484 -7779 0
-484 -634 -7780 0
c (0<=( - aux1909 + SATLiteral(484) + SATLiteral(634)))
634 7780 0
484 7780 0
484 634 7779 0
c (( - aux1910 + SATLiteral(486) + SATLiteral(636))<=0)
-636 -7782 0
-486 -7782 0
-486 -636 -7783 0
c (0<=( - aux1910 + SATLiteral(486) + SATLiteral(636)))
636 7783 0
486 7783 0
486 636 7782 0
c (( - aux1911 + SATLiteral(488) + SATLiteral(638))<=0)
-638 -7785 0
-488 -7785 0
-488 -638 -7786 0
c (0<=( - aux1911 + SATLiteral(488) + SATLiteral(638)))
638 7786 0
488 7786 0
488 638 7785 0
c (( - aux1912 + SATLiteral(490) + SATLiteral(640))<=0)
-640 -7788 0
-490 -7788 0
-490 -640 -7789 0
c (0<=( - aux1912 + SATLiteral(490) + SATLiteral(640)))
640 7789 0
490 7789 0
490 640 7788 0
c (( - aux1913 + SATLiteral(492) + SATLiteral(642))<=0)
-642 -7791 0
-492 -7791 0
-492 -642 -7792 0
c (0<=( - aux1913 + SATLiteral(492) + SATLiteral(642)))
642 7792 0
492 7792 0
492 642 7791 0
c (( - aux1914 + SATLiteral(494) + SATLiteral(644))<=0)
-644 -7794 0
-494 -7794 0
-494 -644 -7795 0
c (0<=( - aux1914 + SATLiteral(494) + SATLiteral(644)))
644 7795 0
494 7795 0
494 644 7794 0
c (( - aux1915 + SATLiteral(496) + SATLiteral(646))<=0)
-646 -7797 0
-496 -7797 0
-496 -646 -7798 0
c (0<=( - aux1915 + SATLiteral(496) + SATLiteral(646)))
646 7798 0
496 7798 0
496 646 7797 0
c (( - aux1916 + SATLiteral(-495) + SATLiteral(-645))<=0)
645 -7800 0
495 -7800 0
495 645 -7801 0
c (0<=( - aux1916 + SATLiteral(-495) + SATLiteral(-645)))
-645 7801 0
-495 7801 0
-495 -645 7800 0
c ((SATLiteral(947) - aux1917 + SATLiteral(827))<=0)
-827 -7803 0
-947 -7803 0
-947 -827 -7804 0
c (0<=(SATLiteral(947) - aux1917 + SATLiteral(827)))
827 7804 0
947 7804 0
947 827 7803 0
c ((SATLiteral(949) - aux1918 + SATLiteral(829))<=0)
-829 -7806 0
-949 -7806 0
-949 -829 -7807 0
c (0<=(SATLiteral(949) - aux1918 + SATLiteral(829)))
829 7807 0
949 7807 0
949 829 7806 0
c ((SATLiteral(951) - aux1919 + SATLiteral(831))<=0)
-831 -7809 0
-951 -7809 0
-951 -831 -7810 0
c (0<=(SATLiteral(951) - aux1919 + SATLiteral(831)))
831 7810 0
951 7810 0
951 831 7809 0
c ((SATLiteral(953) - aux1920 + SATLiteral(833))<=0)
-833 -7812 0
-953 -7812 0
-953 -833 -7813 0
c (0<=(SATLiteral(953) - aux1920 + SATLiteral(833)))
833 7813 0
953 7813 0
953 833 7812 0
c ((SATLiteral(955) - aux1921 + SATLiteral(835))<=0)
-835 -7815 0
-955 -7815 0
-955 -835 -7816 0
c (0<=(SATLiteral(955) - aux1921 + SATLiteral(835)))
835 7816 0
955 7816 0
955 835 7815 0
c ((SATLiteral(957) - aux1922 + SATLiteral(837))<=0)
-837 -7818 0
-957 -7818 0
-957 -837 -7819 0
c (0<=(SATLiteral(957) - aux1922 + SATLiteral(837)))
837 7819 0
957 7819 0
957 837 7818 0
c ((SATLiteral(959) - aux1923 + SATLiteral(839))<=0)
-839 -7821 0
-959 -7821 0
-959 -839 -7822 0
c (0<=(SATLiteral(959) - aux1923 + SATLiteral(839)))
839 7822 0
959 7822 0
959 839 7821 0
c ((SATLiteral(961) - aux1924 + SATLiteral(841))<=0)
-841 -7824 0
-961 -7824 0
-961 -841 -7825 0
c (0<=(SATLiteral(961) - aux1924 + SATLiteral(841)))
841 7825 0
961 7825 0
961 841 7824 0
c ((SATLiteral(-960) - aux1925 + SATLiteral(-840))<=0)
840 -7827 0
960 -7827 0
960 840 -7828 0
c (0<=(SATLiteral(-960) - aux1925 + SATLiteral(-840)))
-840 7828 0
-960 7828 0
-960 -840 7827 0
c (( - aux1926 + SATLiteral(1157) + SATLiteral(1202))<=0)
-1202 -7830 0
-1157 -7830 0
-1157 -1202 -7831 0
c (0<=( - aux1926 + SATLiteral(1157) + SATLiteral(1202)))
1202 7831 0
1157 7831 0
1157 1202 7830 0
c (( - aux1927 + SATLiteral(1159) + SATLiteral(1204))<=0)
-1204 -7833 0
-1159 -7833 0
-1159 -1204 -7834 0
c (0<=( - aux1927 + SATLiteral(1159) + SATLiteral(1204)))
1204 7834 0
1159 7834 0
1159 1204 7833 0
c (( - aux1928 + SATLiteral(1161) + SATLiteral(1206))<=0)
-1206 -7836 0
-1161 -7836 0
-1161 -1206 -7837 0
c (0<=( - aux1928 + SATLiteral(1161) + SATLiteral(1206)))
1206 7837 0
1161 7837 0
1161 1206 7836 0
c (( - aux1929 + SATLiteral(1163) + SATLiteral(1208))<=0)
-1208 -7839 0
-1163 -7839 0
-1163 -1208 -7840 0
c (0<=( - aux1929 + SATLiteral(1163) + SATLiteral(1208)))
1208 7840 0
1163 7840 0
1163 1208 7839 0
c (( - aux1930 + SATLiteral(1165) + SATLiteral(1210))<=0)
-1210 -7842 0
-1165 -7842 0
-1165 -1210 -7843 0
c (0<=( - aux1930 + SATLiteral(1165) + SATLiteral(1210)))
1210 7843 0
1165 7843 0
1165 1210 7842 0
c (( - aux1931 + SATLiteral(1167) + SATLiteral(1212))<=0)
-1212 -7845 0
-1167 -7845 0
-1167 -1212 -7846 0
c (0<=( - aux1931 + SATLiteral(1167) + SATLiteral(1212)))
1212 7846 0
1167 7846 0
1167 1212 7845 0
c (( - aux1932 + SATLiteral(1169) + SATLiteral(1214))<=0)
-1214 -7848 0
-1169 -7848 0
-1169 -1214 -7849 0
c (0<=( - aux1932 + SATLiteral(1169) + SATLiteral(1214)))
1214 7849 0
1169 7849 0
1169 1214 7848 0
c (( - aux1933 + SATLiteral(1171) + SATLiteral(1216))<=0)
-1216 -7851 0
-1171 -7851 0
-1171 -1216 -7852 0
c (0<=( - aux1933 + SATLiteral(1171) + SATLiteral(1216)))
1216 7852 0
1171 7852 0
1171 1216 7851 0
c (( - aux1934 + SATLiteral(-1170) + SATLiteral(-1215))<=0)
1215 -7854 0
1170 -7854 0
1170 1215 -7855 0
c (0<=( - aux1934 + SATLiteral(-1170) + SATLiteral(-1215)))
-1215 7855 0
-1170 7855 0
-1170 -1215 7854 0
c ((SATLiteral(272) - aux432 + SATLiteral(542))<=0)
-542 -1890 0
-272 -1890 0
-272 -542 -1891 0
c (0<=(SATLiteral(272) - aux432 + SATLiteral(542)))
542 1891 0
272 1891 0
272 542 1890 0
c ((SATLiteral(947) - aux433 + SATLiteral(812))<=0)
-812 -1893 0
-947 -1893 0
-947 -812 -1894 0
c (0<=(SATLiteral(947) - aux433 + SATLiteral(812)))
812 1894 0
947 1894 0
947 812 1893 0
c (( - aux434 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -1896 0
-677 -1896 0
-677 -137 -1897 0
c (0<=( - aux434 + SATLiteral(677) + SATLiteral(137)))
137 1897 0
677 1897 0
677 137 1896 0
c (( - aux435 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -1899 0
-407 -1899 0
-407 -1082 -1900 0
c (0<=( - aux435 + SATLiteral(407) + SATLiteral(1082)))
1082 1900 0
407 1900 0
407 1082 1899 0
c ((aux435 - aux436 + SATLiteral(2))<=0)
1899 -1902 0
1900 -1903 0
-2 -1902 0
-2 1899 -1903 0
-2 1900 -1905 0
c (0<=(aux435 - aux436 + SATLiteral(2)))
-1900 1905 0
-1899 1903 0
2 1905 0
2 -1900 1903 0
2 -1899 1902 0
c ((aux432 + aux434 - aux437)<=0)
1896 -1907 0
1897 -1908 0
1890 -1907 0
1890 1896 -1908 0
1890 1897 -1910 0
1891 -1908 0
1891 1896 -1910 0
1891 1897 -1912 0
c (0<=(aux432 + aux434 - aux437))
-1897 1912 0
-1896 1910 0
-1891 1912 0
-1891 -1897 1910 0
-1891 -1896 1908 0
-1890 1910 0
-1890 -1897 1908 0
-1890 -1896 1907 0
c ((SATLiteral(274) - aux438 + SATLiteral(544))<=0)
-544 -1914 0
-274 -1914 0
-274 -544 -1915 0
c (0<=(SATLiteral(274) - aux438 + SATLiteral(544)))
544 1915 0
274 1915 0
274 544 1914 0
c ((SATLiteral(949) - aux439 + SATLiteral(814))<=0)
-814 -1917 0
-949 -1917 0
-949 -814 -1918 0
c (0<=(SATLiteral(949) - aux439 + SATLiteral(814)))
814 1918 0
949 1918 0
949 814 1917 0
c (( - aux440 + SATLiteral(679) + SATLiteral(138))<=0)
-138 -1920 0
-679 -1920 0
-679 -138 -1921 0
c (0<=( - aux440 + SATLiteral(679) + SATLiteral(138)))
138 1921 0
679 1921 0
679 138 1920 0
c (( - aux441 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -1923 0
-409 -1923 0
-409 -1084 -1924 0
c (0<=( - aux441 + SATLiteral(409) + SATLiteral(1084)))
1084 1924 0
409 1924 0
409 1084 1923 0
c ((aux441 - aux442 + SATLiteral(4))<=0)
1923 -1926 0
1924 -1927 0
-4 -1926 0
-4 1923 -1927 0
-4 1924 -1929 0
c (0<=(aux441 - aux442 + SATLiteral(4)))
-1924 1929 0
-1923 1927 0
4 1929 0
4 -1924 1927 0
4 -1923 1926 0
c ((aux438 + aux440 - aux443)<=0)
1920 -1931 0
1921 -1932 0
1914 -1931 0
1914 1920 -1932 0
1914 1921 -1934 0
1915 -1932 0
1915 1920 -1934 0
1915 1921 -1936 0
c (0<=(aux438 + aux440 - aux443))
-1921 1936 0
-1920 1934 0
-1915 1936 0
-1915 -1921 1934 0
-1915 -1920 1932 0
-1914 1934 0
-1914 -1921 1932 0
-1914 -1920 1931 0
c ((SATLiteral(276) - aux444 + SATLiteral(546))<=0)
-546 -1938 0
-276 -1938 0
-276 -546 -1939 0
c (0<=(SATLiteral(276) - aux444 + SATLiteral(546)))
546 1939 0
276 1939 0
276 546 1938 0
c ((SATLiteral(951) - aux445 + SATLiteral(816))<=0)
-816 -1941 0
-951 -1941 0
-951 -816 -1942 0
c (0<=(SATLiteral(951) - aux445 + SATLiteral(816)))
816 1942 0
951 1942 0
951 816 1941 0
c (( - aux446 + SATLiteral(681) + SATLiteral(139))<=0)
-139 -1944 0
-681 -1944 0
-681 -139 -1945 0
c (0<=( - aux446 + SATLiteral(681) + SATLiteral(139)))
139 1945 0
681 1945 0
681 139 1944 0
c (( - aux447 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -1947 0
-411 -1947 0
-411 -1086 -1948 0
c (0<=( - aux447 + SATLiteral(411) + SATLiteral(1086)))
1086 1948 0
411 1948 0
411 1086 1947 0
c ((aux447 - aux448 + SATLiteral(6))<=0)
1947 -1950 0
1948 -1951 0
-6 -1950 0
-6 1947 -1951 0
-6 1948 -1953 0
c (0<=(aux447 - aux448 + SATLiteral(6)))
-1948 1953 0
-1947 1951 0
6 1953 0
6 -1948 1951 0
6 -1947 1950 0
c ((aux444 + aux446 - aux449)<=0)
1944 -1955 0
1945 -1956 0
1938 -1955 0
1938 1944 -1956 0
1938 1945 -1958 0
1939 -1956 0
1939 1944 -1958 0
1939 1945 -1960 0
c (0<=(aux444 + aux446 - aux449))
-1945 1960 0
-1944 1958 0
-1939 1960 0
-1939 -1945 1958 0
-1939 -1944 1956 0
-1938 1958 0
-1938 -1945 1956 0
-1938 -1944 1955 0
c ((SATLiteral(278) - aux450 + SATLiteral(548))<=0)
-548 -1962 0
-278 -1962 0
-278 -548 -1963 0
c (0<=(SATLiteral(278) - aux450 + SATLiteral(548)))
548 1963 0
278 1963 0
278 548 1962 0
c ((SATLiteral(953) - aux451 + SATLiteral(818))<=0)
-818 -1965 0
-953 -1965 0
-953 -818 -1966 0
c (0<=(SATLiteral(953) - aux451 + SATLiteral(818)))
818 1966 0
953 1966 0
953 818 1965 0
c (( - aux452 + SATLiteral(683) + SATLiteral(140))<=0)
-140 -1968 0
-683 -1968 0
-683 -140 -1969 0
c (0<=( - aux452 + SATLiteral(683) + SATLiteral(140)))
140 1969 0
683 1969 0
683 140 1968 0
c (( - aux453 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -1971 0
-413 -1971 0
-413 -1088 -1972 0
c (0<=( - aux453 + SATLiteral(413) + SATLiteral(1088)))
1088 1972 0
413 1972 0
413 1088 1971 0
c ((aux453 - aux454 + SATLiteral(8))<=0)
1971 -1974 0
1972 -1975 0
-8 -1974 0
-8 1971 -1975 0
-8 1972 -1977 0
c (0<=(aux453 - aux454 + SATLiteral(8)))
-1972 1977 0
-1971 1975 0
8 1977 0
8 -1972 1975 0
8 -1971 1974 0
c ((aux450 + aux452 - aux455)<=0)
1968 -1979 0
1969 -1980 0
1962 -1979 0
1962 1968 -1980 0
1962 1969 -1982 0
1963 -1980 0
1963 1968 -1982 0
1963 1969 -1984 0
c (0<=(aux450 + aux452 - aux455))
-1969 1984 0
-1968 1982 0
-1963 1984 0
-1963 -1969 1982 0
-1963 -1968 1980 0
-1962 1982 0
-1962 -1969 1980 0
-1962 -1968 1979 0
c ((SATLiteral(280) - aux456 + SATLiteral(550))<=0)
-550 -1986 0
-280 -1986 0
-280 -550 -1987 0
c (0<=(SATLiteral(280) - aux456 + SATLiteral(550)))
550 1987 0
280 1987 0
280 550 1986 0
c ((SATLiteral(955) - aux457 + SATLiteral(820))<=0)
-820 -1989 0
-955 -1989 0
-955 -820 -1990 0
c (0<=(SATLiteral(955) - aux457 + SATLiteral(820)))
820 1990 0
955 1990 0
955 820 1989 0
c (( - aux458 + SATLiteral(685) + SATLiteral(141))<=0)
-141 -1992 0
-685 -1992 0
-685 -141 -1993 0
c (0<=( - aux458 + SATLiteral(685) + SATLiteral(141)))
141 1993 0
685 1993 0
685 141 1992 0
c (( - aux459 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -1995 0
-415 -1995 0
-415 -1090 -1996 0
c (0<=( - aux459 + SATLiteral(415) + SATLiteral(1090)))
1090 1996 0
415 1996 0
415 1090 1995 0
c ((aux459 - aux460 + SATLiteral(10))<=0)
1995 -1998 0
1996 -1999 0
-10 -1998 0
-10 1995 -1999 0
-10 1996 -2001 0
c (0<=(aux459 - aux460 + SATLiteral(10)))
-1996 2001 0
-1995 1999 0
10 2001 0
10 -1996 1999 0
10 -1995 1998 0
c ((aux456 + aux458 - aux461)<=0)
1992 -2003 0
1993 -2004 0
1986 -2003 0
1986 1992 -2004 0
1986 1993 -2006 0
1987 -2004 0
1987 1992 -2006 0
1987 1993 -2008 0
c (0<=(aux456 + aux458 - aux461))
-1993 2008 0
-1992 2006 0
-1987 2008 0
-1987 -1993 2006 0
-1987 -1992 2004 0
-1986 2006 0
-1986 -1993 2004 0
-1986 -1992 2003 0
c ((SATLiteral(282) - aux462 + SATLiteral(552))<=0)
-552 -2010 0
-282 -2010 0
-282 -552 -2011 0
c (0<=(SATLiteral(282) - aux462 + SATLiteral(552)))
552 2011 0
282 2011 0
282 552 2010 0
c ((SATLiteral(957) - aux463 + SATLiteral(822))<=0)
-822 -2013 0
-957 -2013 0
-957 -822 -2014 0
c (0<=(SATLiteral(957) - aux463 + SATLiteral(822)))
822 2014 0
957 2014 0
957 822 2013 0
c (( - aux464 + SATLiteral(687) + SATLiteral(142))<=0)
-142 -2016 0
-687 -2016 0
-687 -142 -2017 0
c (0<=( - aux464 + SATLiteral(687) + SATLiteral(142)))
142 2017 0
687 2017 0
687 142 2016 0
c (( - aux465 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2019 0
-417 -2019 0
-417 -1092 -2020 0
c (0<=( - aux465 + SATLiteral(417) + SATLiteral(1092)))
1092 2020 0
417 2020 0
417 1092 2019 0
c ((aux465 - aux466 + SATLiteral(12))<=0)
2019 -2022 0
2020 -2023 0
-12 -2022 0
-12 2019 -2023 0
-12 2020 -2025 0
c (0<=(aux465 - aux466 + SATLiteral(12)))
-2020 2025 0
-2019 2023 0
12 2025 0
12 -2020 2023 0
12 -2019 2022 0
c ((aux462 + aux464 - aux467)<=0)
2016 -2027 0
2017 -2028 0
2010 -2027 0
2010 2016 -2028 0
2010 2017 -2030 0
2011 -2028 0
2011 2016 -2030 0
2011 2017 -2032 0
c (0<=(aux462 + aux464 - aux467))
-2017 2032 0
-2016 2030 0
-2011 2032 0
-2011 -2017 2030 0
-2011 -2016 2028 0
-2010 2030 0
-2010 -2017 2028 0
-2010 -2016 2027 0
c ((SATLiteral(284) - aux468 + SATLiteral(554))<=0)
-554 -2034 0
-284 -2034 0
-284 -554 -2035 0
c (0<=(SATLiteral(284) - aux468 + SATLiteral(554)))
554 2035 0
284 2035 0
284 554 2034 0
c ((SATLiteral(959) - aux469 + SATLiteral(824))<=0)
-824 -2037 0
-959 -2037 0
-959 -824 -2038 0
c (0<=(SATLiteral(959) - aux469 + SATLiteral(824)))
824 2038 0
959 2038 0
959 824 2037 0
c (( - aux470 + SATLiteral(689) + SATLiteral(143))<=0)
-143 -2040 0
-689 -2040 0
-689 -143 -2041 0
c (0<=( - aux470 + SATLiteral(689) + SATLiteral(143)))
143 2041 0
689 2041 0
689 143 2040 0
c (( - aux471 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2043 0
-419 -2043 0
-419 -1094 -2044 0
c (0<=( - aux471 + SATLiteral(419) + SATLiteral(1094)))
1094 2044 0
419 2044 0
419 1094 2043 0
c ((aux471 - aux472 + SATLiteral(14))<=0)
2043 -2046 0
2044 -2047 0
-14 -2046 0
-14 2043 -2047 0
-14 2044 -2049 0
c (0<=(aux471 - aux472 + SATLiteral(14)))
-2044 2049 0
-2043 2047 0
14 2049 0
14 -2044 2047 0
14 -2043 2046 0
c ((aux468 + aux470 - aux473)<=0)
2040 -2051 0
2041 -2052 0
2034 -2051 0
2034 2040 -2052 0
2034 2041 -2054 0
2035 -2052 0
2035 2040 -2054 0
2035 2041 -2056 0
c (0<=(aux468 + aux470 - aux473))
-2041 2056 0
-2040 2054 0
-2035 2056 0
-2035 -2041 2054 0
-2035 -2040 2052 0
-2034 2054 0
-2034 -2041 2052 0
-2034 -2040 2051 0
c ((SATLiteral(286) - aux474 + SATLiteral(556))<=0)
-556 -2058 0
-286 -2058 0
-286 -556 -2059 0
c (0<=(SATLiteral(286) - aux474 + SATLiteral(556)))
556 2059 0
286 2059 0
286 556 2058 0
c ((SATLiteral(961) - aux475 + SATLiteral(826))<=0)
-826 -2061 0
-961 -2061 0
-961 -826 -2062 0
c (0<=(SATLiteral(961) - aux475 + SATLiteral(826)))
826 2062 0
961 2062 0
961 826 2061 0
c (( - aux476 + SATLiteral(691) + SATLiteral(144))<=0)
-144 -2064 0
-691 -2064 0
-691 -144 -2065 0
c (0<=( - aux476 + SATLiteral(691) + SATLiteral(144)))
144 2065 0
691 2065 0
691 144 2064 0
c (( - aux477 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2067 0
-421 -2067 0
-421 -1096 -2068 0
c (0<=( - aux477 + SATLiteral(421) + SATLiteral(1096)))
1096 2068 0
421 2068 0
421 1096 2067 0
c ((aux477 - aux478 + SATLiteral(16))<=0)
2067 -2070 0
2068 -2071 0
-16 -2070 0
-16 2067 -2071 0
-16 2068 -2073 0
c (0<=(aux477 - aux478 + SATLiteral(16)))
-2068 2073 0
-2067 2071 0
16 2073 0
16 -2068 2071 0
16 -2067 2070 0
c ((aux474 + aux476 - aux479)<=0)
2064 -2075 0
2065 -2076 0
2058 -2075 0
2058 2064 -2076 0
2058 2065 -2078 0
2059 -2076 0
2059 2064 -2078 0
2059 2065 -2080 0
c (0<=(aux474 + aux476 - aux479))
-2065 2080 0
-2064 2078 0
-2059 2080 0
-2059 -2065 2078 0
-2059 -2064 2076 0
-2058 2078 0
-2058 -2065 2076 0
-2058 -2064 2075 0
c ((SATLiteral(-285) - aux480 + SATLiteral(-555))<=0)
555 -2082 0
285 -2082 0
285 555 -2083 0
c (0<=(SATLiteral(-285) - aux480 + SATLiteral(-555)))
-555 2083 0
-285 2083 0
-285 -555 2082 0
c ((SATLiteral(-960) - aux481 + SATLiteral(-825))<=0)
825 -2085 0
960 -2085 0
960 825 -2086 0
c (0<=(SATLiteral(-960) - aux481 + SATLiteral(-825)))
-825 2086 0
-960 2086 0
-960 -825 2085 0
c (( - aux482 + SATLiteral(-690) + SATLiteral(145))<=0)
-145 -2088 0
690 -2088 0
690 -145 -2089 0
c (0<=( - aux482 + SATLiteral(-690) + SATLiteral(145)))
145 2089 0
-690 2089 0
-690 145 2088 0
c (( - aux483 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2091 0
420 -2091 0
420 1095 -2092 0
c (0<=( - aux483 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2092 0
-420 2092 0
-420 -1095 2091 0
c ((aux483 - aux484 + SATLiteral(-15))<=0)
2091 -2094 0
2092 -2095 0
15 -2094 0
15 2091 -2095 0
15 2092 -2097 0
c (0<=(aux483 - aux484 + SATLiteral(-15)))
-2092 2097 0
-2091 2095 0
-15 2097 0
-15 -2092 2095 0
-15 -2091 2094 0
c ((aux480 + aux482 - aux485)<=0)
2088 -2099 0
2089 -2100 0
2082 -2099 0
2082 2088 -2100 0
2082 2089 -2102 0
2083 -2100 0
2083 2088 -2102 0
2083 2089 -2104 0
c (0<=(aux480 + aux482 - aux485))
-2089 2104 0
-2088 2102 0
-2083 2104 0
-2083 -2089 2102 0
-2083 -2088 2100 0
-2082 2102 0
-2082 -2089 2100 0
-2082 -2088 2099 0
c ((SATLiteral(287) - aux486 + SATLiteral(557))<=0)
-557 -2106 0
-287 -2106 0
-287 -557 -2107 0
c (0<=(SATLiteral(287) - aux486 + SATLiteral(557)))
557 2107 0
287 2107 0
287 557 2106 0
c ((SATLiteral(962) - aux487 + SATLiteral(827))<=0)
-827 -2109 0
-962 -2109 0
-962 -827 -2110 0
c (0<=(SATLiteral(962) - aux487 + SATLiteral(827)))
827 2110 0
962 2110 0
962 827 2109 0
c (( - aux488 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2112 0
-692 -2112 0
-692 -152 -2113 0
c (0<=( - aux488 + SATLiteral(692) + SATLiteral(152)))
152 2113 0
692 2113 0
692 152 2112 0
c (( - aux489 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2115 0
-422 -2115 0
-422 -1097 -2116 0
c (0<=( - aux489 + SATLiteral(422) + SATLiteral(1097)))
1097 2116 0
422 2116 0
422 1097 2115 0
c ((aux489 - aux490 + SATLiteral(17))<=0)
2115 -2118 0
2116 -2119 0
-17 -2118 0
-17 2115 -2119 0
-17 2116 -2121 0
c (0<=(aux489 - aux490 + SATLiteral(17)))
-2116 2121 0
-2115 2119 0
17 2121 0
17 -2116 2119 0
17 -2115 2118 0
c ((aux486 + aux488 - aux491)<=0)
2112 -2123 0
2113 -2124 0
2106 -2123 0
2106 2112 -2124 0
2106 2113 -2126 0
2107 -2124 0
2107 2112 -2126 0
2107 2113 -2128 0
c (0<=(aux486 + aux488 - aux491))
-2113 2128 0
-2112 2126 0
-2107 2128 0
-2107 -2113 2126 0
-2107 -2112 2124 0
-2106 2126 0
-2106 -2113 2124 0
-2106 -2112 2123 0
c ((SATLiteral(289) - aux492 + SATLiteral(559))<=0)
-559 -2130 0
-289 -2130 0
-289 -559 -2131 0
c (0<=(SATLiteral(289) - aux492 + SATLiteral(559)))
559 2131 0
289 2131 0
289 559 2130 0
c ((SATLiteral(964) - aux493 + SATLiteral(829))<=0)
-829 -2133 0
-964 -2133 0
-964 -829 -2134 0
c (0<=(SATLiteral(964) - aux493 + SATLiteral(829)))
829 2134 0
964 2134 0
964 829 2133 0
c (( - aux494 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2136 0
-694 -2136 0
-694 -154 -2137 0
c (0<=( - aux494 + SATLiteral(694) + SATLiteral(154)))
154 2137 0
694 2137 0
694 154 2136 0
c (( - aux495 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2139 0
-424 -2139 0
-424 -1099 -2140 0
c (0<=( - aux495 + SATLiteral(424) + SATLiteral(1099)))
1099 2140 0
424 2140 0
424 1099 2139 0
c ((aux495 - aux496 + SATLiteral(19))<=0)
2139 -2142 0
2140 -2143 0
-19 -2142 0
-19 2139 -2143 0
-19 2140 -2145 0
c (0<=(aux495 - aux496 + SATLiteral(19)))
-2140 2145 0
-2139 2143 0
19 2145 0
19 -2140 2143 0
19 -2139 2142 0
c ((aux492 + aux494 - aux497)<=0)
2136 -2147 0
2137 -2148 0
2130 -2147 0
2130 2136 -2148 0
2130 2137 -2150 0
2131 -2148 0
2131 2136 -2150 0
2131 2137 -2152 0
c (0<=(aux492 + aux494 - aux497))
-2137 2152 0
-2136 2150 0
-2131 2152 0
-2131 -2137 2150 0
-2131 -2136 2148 0
-2130 2150 0
-2130 -2137 2148 0
-2130 -2136 2147 0
c ((SATLiteral(291) - aux498 + SATLiteral(561))<=0)
-561 -2154 0
-291 -2154 0
-291 -561 -2155 0
c (0<=(SATLiteral(291) - aux498 + SATLiteral(561)))
561 2155 0
291 2155 0
291 561 2154 0
c ((SATLiteral(966) - aux499 + SATLiteral(831))<=0)
-831 -2157 0
-966 -2157 0
-966 -831 -2158 0
c (0<=(SATLiteral(966) - aux499 + SATLiteral(831)))
831 2158 0
966 2158 0
966 831 2157 0
c (( - aux500 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2160 0
-696 -2160 0
-696 -156 -2161 0
c (0<=( - aux500 + SATLiteral(696) + SATLiteral(156)))
156 2161 0
696 2161 0
696 156 2160 0
c (( - aux501 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2163 0
-426 -2163 0
-426 -1101 -2164 0
c (0<=( - aux501 + SATLiteral(426) + SATLiteral(1101)))
1101 2164 0
426 2164 0
426 1101 2163 0
c ((aux501 - aux502 + SATLiteral(21))<=0)
2163 -2166 0
2164 -2167 0
-21 -2166 0
-21 2163 -2167 0
-21 2164 -2169 0
c (0<=(aux501 - aux502 + SATLiteral(21)))
-2164 2169 0
-2163 2167 0
21 2169 0
21 -2164 2167 0
21 -2163 2166 0
c ((aux498 + aux500 - aux503)<=0)
2160 -2171 0
2161 -2172 0
2154 -2171 0
2154 2160 -2172 0
2154 2161 -2174 0
2155 -2172 0
2155 2160 -2174 0
2155 2161 -2176 0
c (0<=(aux498 + aux500 - aux503))
-2161 2176 0
-2160 2174 0
-2155 2176 0
-2155 -2161 2174 0
-2155 -2160 2172 0
-2154 2174 0
-2154 -2161 2172 0
-2154 -2160 2171 0
c ((SATLiteral(293) - aux504 + SATLiteral(563))<=0)
-563 -2178 0
-293 -2178 0
-293 -563 -2179 0
c (0<=(SATLiteral(293) - aux504 + SATLiteral(563)))
563 2179 0
293 2179 0
293 563 2178 0
c ((SATLiteral(968) - aux505 + SATLiteral(833))<=0)
-833 -2181 0
-968 -2181 0
-968 -833 -2182 0
c (0<=(SATLiteral(968) - aux505 + SATLiteral(833)))
833 2182 0
968 2182 0
968 833 2181 0
c (( - aux506 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2184 0
-698 -2184 0
-698 -158 -2185 0
c (0<=( - aux506 + SATLiteral(698) + SATLiteral(158)))
158 2185 0
698 2185 0
698 158 2184 0
c (( - aux507 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2187 0
-428 -2187 0
-428 -1103 -2188 0
c (0<=( - aux507 + SATLiteral(428) + SATLiteral(1103)))
1103 2188 0
428 2188 0
428 1103 2187 0
c ((aux507 - aux508 + SATLiteral(23))<=0)
2187 -2190 0
2188 -2191 0
-23 -2190 0
-23 2187 -2191 0
-23 2188 -2193 0
c (0<=(aux507 - aux508 + SATLiteral(23)))
-2188 2193 0
-2187 2191 0
23 2193 0
23 -2188 2191 0
23 -2187 2190 0
c ((aux504 + aux506 - aux509)<=0)
2184 -2195 0
2185 -2196 0
2178 -2195 0
2178 2184 -2196 0
2178 2185 -2198 0
2179 -2196 0
2179 2184 -2198 0
2179 2185 -2200 0
c (0<=(aux504 + aux506 - aux509))
-2185 2200 0
-2184 2198 0
-2179 2200 0
-2179 -2185 2198 0
-2179 -2184 2196 0
-2178 2198 0
-2178 -2185 2196 0
-2178 -2184 2195 0
c ((SATLiteral(295) - aux510 + SATLiteral(565))<=0)
-565 -2202 0
-295 -2202 0
-295 -565 -2203 0
c (0<=(SATLiteral(295) - aux510 + SATLiteral(565)))
565 2203 0
295 2203 0
295 565 2202 0
c ((SATLiteral(970) - aux511 + SATLiteral(835))<=0)
-835 -2205 0
-970 -2205 0
-970 -835 -2206 0
c (0<=(SATLiteral(970) - aux511 + SATLiteral(835)))
835 2206 0
970 2206 0
970 835 2205 0
c (( - aux512 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2208 0
-700 -2208 0
-700 -160 -2209 0
c (0<=( - aux512 + SATLiteral(700) + SATLiteral(160)))
160 2209 0
700 2209 0
700 160 2208 0
c (( - aux513 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2211 0
-430 -2211 0
-430 -1105 -2212 0
c (0<=( - aux513 + SATLiteral(430) + SATLiteral(1105)))
1105 2212 0
430 2212 0
430 1105 2211 0
c ((aux513 - aux514 + SATLiteral(25))<=0)
2211 -2214 0
2212 -2215 0
-25 -2214 0
-25 2211 -2215 0
-25 2212 -2217 0
c (0<=(aux513 - aux514 + SATLiteral(25)))
-2212 2217 0
-2211 2215 0
25 2217 0
25 -2212 2215 0
25 -2211 2214 0
c ((aux510 + aux512 - aux515)<=0)
2208 -2219 0
2209 -2220 0
2202 -2219 0
2202 2208 -2220 0
2202 2209 -2222 0
2203 -2220 0
2203 2208 -2222 0
2203 2209 -2224 0
c (0<=(aux510 + aux512 - aux515))
-2209 2224 0
-2208 2222 0
-2203 2224 0
-2203 -2209 2222 0
-2203 -2208 2220 0
-2202 2222 0
-2202 -2209 2220 0
-2202 -2208 2219 0
c ((SATLiteral(297) - aux516 + SATLiteral(567))<=0)
-567 -2226 0
-297 -2226 0
-297 -567 -2227 0
c (0<=(SATLiteral(297) - aux516 + SATLiteral(567)))
567 2227 0
297 2227 0
297 567 2226 0
c ((SATLiteral(972) - aux517 + SATLiteral(837))<=0)
-837 -2229 0
-972 -2229 0
-972 -837 -2230 0
c (0<=(SATLiteral(972) - aux517 + SATLiteral(837)))
837 2230 0
972 2230 0
972 837 2229 0
c (( - aux518 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2232 0
-702 -2232 0
-702 -162 -2233 0
c (0<=( - aux518 + SATLiteral(702) + SATLiteral(162)))
162 2233 0
702 2233 0
702 162 2232 0
c (( - aux519 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2235 0
-432 -2235 0
-432 -1107 -2236 0
c (0<=( - aux519 + SATLiteral(432) + SATLiteral(1107)))
1107 2236 0
432 2236 0
432 1107 2235 0
c ((aux519 - aux520 + SATLiteral(27))<=0)
2235 -2238 0
2236 -2239 0
-27 -2238 0
-27 2235 -2239 0
-27 2236 -2241 0
c (0<=(aux519 - aux520 + SATLiteral(27)))
-2236 2241 0
-2235 2239 0
27 2241 0
27 -2236 2239 0
27 -2235 2238 0
c ((aux516 + aux518 - aux521)<=0)
2232 -2243 0
2233 -2244 0
2226 -2243 0
2226 2232 -2244 0
2226 2233 -2246 0
2227 -2244 0
2227 2232 -2246 0
2227 2233 -2248 0
c (0<=(aux516 + aux518 - aux521))
-2233 2248 0
-2232 2246 0
-2227 2248 0
-2227 -2233 2246 0
-2227 -2232 2244 0
-2226 2246 0
-2226 -2233 2244 0
-2226 -2232 2243 0
c ((SATLiteral(299) - aux522 + SATLiteral(569))<=0)
-569 -2250 0
-299 -2250 0
-299 -569 -2251 0
c (0<=(SATLiteral(299) - aux522 + SATLiteral(569)))
569 2251 0
299 2251 0
299 569 2250 0
c ((SATLiteral(974) - aux523 + SATLiteral(839))<=0)
-839 -2253 0
-974 -2253 0
-974 -839 -2254 0
c (0<=(SATLiteral(974) - aux523 + SATLiteral(839)))
839 2254 0
974 2254 0
974 839 2253 0
c (( - aux524 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2256 0
-704 -2256 0
-704 -164 -2257 0
c (0<=( - aux524 + SATLiteral(704) + SATLiteral(164)))
164 2257 0
704 2257 0
704 164 2256 0
c (( - aux525 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2259 0
-434 -2259 0
-434 -1109 -2260 0
c (0<=( - aux525 + SATLiteral(434) + SATLiteral(1109)))
1109 2260 0
434 2260 0
434 1109 2259 0
c ((aux525 - aux526 + SATLiteral(29))<=0)
2259 -2262 0
2260 -2263 0
-29 -2262 0
-29 2259 -2263 0
-29 2260 -2265 0
c (0<=(aux525 - aux526 + SATLiteral(29)))
-2260 2265 0
-2259 2263 0
29 2265 0
29 -2260 2263 0
29 -2259 2262 0
c ((aux522 + aux524 - aux527)<=0)
2256 -2267 0
2257 -2268 0
2250 -2267 0
2250 2256 -2268 0
2250 2257 -2270 0
2251 -2268 0
2251 2256 -2270 0
2251 2257 -2272 0
c (0<=(aux522 + aux524 - aux527))
-2257 2272 0
-2256 2270 0
-2251 2272 0
-2251 -2257 2270 0
-2251 -2256 2268 0
-2250 2270 0
-2250 -2257 2268 0
-2250 -2256 2267 0
c ((SATLiteral(301) - aux528 + SATLiteral(571))<=0)
-571 -2274 0
-301 -2274 0
-301 -571 -2275 0
c (0<=(SATLiteral(301) - aux528 + SATLiteral(571)))
571 2275 0
301 2275 0
301 571 2274 0
c ((SATLiteral(976) - aux529 + SATLiteral(841))<=0)
-841 -2277 0
-976 -2277 0
-976 -841 -2278 0
c (0<=(SATLiteral(976) - aux529 + SATLiteral(841)))
841 2278 0
976 2278 0
976 841 2277 0
c (( - aux530 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2280 0
-706 -2280 0
-706 -166 -2281 0
c (0<=( - aux530 + SATLiteral(706) + SATLiteral(166)))
166 2281 0
706 2281 0
706 166 2280 0
c (( - aux531 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2283 0
-436 -2283 0
-436 -1111 -2284 0
c (0<=( - aux531 + SATLiteral(436) + SATLiteral(1111)))
1111 2284 0
436 2284 0
436 1111 2283 0
c ((aux531 - aux532 + SATLiteral(31))<=0)
2283 -2286 0
2284 -2287 0
-31 -2286 0
-31 2283 -2287 0
-31 2284 -2289 0
c (0<=(aux531 - aux532 + SATLiteral(31)))
-2284 2289 0
-2283 2287 0
31 2289 0
31 -2284 2287 0
31 -2283 2286 0
c ((aux528 + aux530 - aux533)<=0)
2280 -2291 0
2281 -2292 0
2274 -2291 0
2274 2280 -2292 0
2274 2281 -2294 0
2275 -2292 0
2275 2280 -2294 0
2275 2281 -2296 0
c (0<=(aux528 + aux530 - aux533))
-2281 2296 0
-2280 2294 0
-2275 2296 0
-2275 -2281 2294 0
-2275 -2280 2292 0
-2274 2294 0
-2274 -2281 2292 0
-2274 -2280 2291 0
c ((SATLiteral(-300) - aux534 + SATLiteral(-570))<=0)
570 -2298 0
300 -2298 0
300 570 -2299 0
c (0<=(SATLiteral(-300) - aux534 + SATLiteral(-570)))
-570 2299 0
-300 2299 0
-300 -570 2298 0
c ((SATLiteral(-975) - aux535 + SATLiteral(-840))<=0)
840 -2301 0
975 -2301 0
975 840 -2302 0
c (0<=(SATLiteral(-975) - aux535 + SATLiteral(-840)))
-840 2302 0
-975 2302 0
-975 -840 2301 0
c (( - aux536 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2304 0
705 -2304 0
705 165 -2305 0
c (0<=( - aux536 + SATLiteral(-705) + SATLiteral(-165)))
-165 2305 0
-705 2305 0
-705 -165 2304 0
c (( - aux537 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2307 0
435 -2307 0
435 1110 -2308 0
c (0<=( - aux537 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2308 0
-435 2308 0
-435 -1110 2307 0
c ((aux537 - aux538 + SATLiteral(-30))<=0)
2307 -2310 0
2308 -2311 0
30 -2310 0
30 2307 -2311 0
30 2308 -2313 0
c (0<=(aux537 - aux538 + SATLiteral(-30)))
-2308 2313 0
-2307 2311 0
-30 2313 0
-30 -2308 2311 0
-30 -2307 2310 0
c ((aux534 + aux536 - aux539)<=0)
2304 -2315 0
2305 -2316 0
2298 -2315 0
2298 2304 -2316 0
2298 2305 -2318 0
2299 -2316 0
2299 2304 -2318 0
2299 2305 -2320 0
c (0<=(aux534 + aux536 - aux539))
-2305 2320 0
-2304 2318 0
-2299 2320 0
-2299 -2305 2318 0
-2299 -2304 2316 0
-2298 2318 0
-2298 -2305 2316 0
-2298 -2304 2315 0
c ((SATLiteral(302) - aux540 + SATLiteral(572))<=0)
-572 -2322 0
-302 -2322 0
-302 -572 -2323 0
c (0<=(SATLiteral(302) - aux540 + SATLiteral(572)))
572 2323 0
302 2323 0
302 572 2322 0
c ((SATLiteral(977) - aux541 + SATLiteral(842))<=0)
-842 -2325 0
-977 -2325 0
-977 -842 -2326 0
c (0<=(SATLiteral(977) - aux541 + SATLiteral(842)))
842 2326 0
977 2326 0
977 842 2325 0
c (( - aux542 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2328 0
-707 -2328 0
-707 -167 -2329 0
c (0<=( - aux542 + SATLiteral(707) + SATLiteral(167)))
167 2329 0
707 2329 0
707 167 2328 0
c (( - aux543 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2331 0
-437 -2331 0
-437 -1112 -2332 0
c (0<=( - aux543 + SATLiteral(437) + SATLiteral(1112)))
1112 2332 0
437 2332 0
437 1112 2331 0
c ((aux543 - aux544 + SATLiteral(32))<=0)
2331 -2334 0
2332 -2335 0
-32 -2334 0
-32 2331 -2335 0
-32 2332 -2337 0
c (0<=(aux543 - aux544 + SATLiteral(32)))
-2332 2337 0
-2331 2335 0
32 2337 0
32 -2332 2335 0
32 -2331 2334 0
c ((aux540 + aux542 - aux545)<=0)
2328 -2339 0
2329 -2340 0
2322 -2339 0
2322 2328 -2340 0
2322 2329 -2342 0
2323 -2340 0
2323 2328 -2342 0
2323 2329 -2344 0
c (0<=(aux540 + aux542 - aux545))
-2329 2344 0
-2328 2342 0
-2323 2344 0
-2323 -2329 2342 0
-2323 -2328 2340 0
-2322 2342 0
-2322 -2329 2340 0
-2322 -2328 2339 0
c ((SATLiteral(303) - aux546 + SATLiteral(574))<=0)
-574 -2346 0
-303 -2346 0
-303 -574 -2347 0
c (0<=(SATLiteral(303) - aux546 + SATLiteral(574)))
574 2347 0
303 2347 0
303 574 2346 0
c ((SATLiteral(979) - aux547 + SATLiteral(844))<=0)
-844 -2349 0
-979 -2349 0
-979 -844 -2350 0
c (0<=(SATLiteral(979) - aux547 + SATLiteral(844)))
844 2350 0
979 2350 0
979 844 2349 0
c (( - aux548 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2352 0
-709 -2352 0
-709 -169 -2353 0
c (0<=( - aux548 + SATLiteral(709) + SATLiteral(169)))
169 2353 0
709 2353 0
709 169 2352 0
c (( - aux549 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2355 0
-439 -2355 0
-439 -1114 -2356 0
c (0<=( - aux549 + SATLiteral(439) + SATLiteral(1114)))
1114 2356 0
439 2356 0
439 1114 2355 0
c ((aux549 - aux550 + SATLiteral(34))<=0)
2355 -2358 0
2356 -2359 0
-34 -2358 0
-34 2355 -2359 0
-34 2356 -2361 0
c (0<=(aux549 - aux550 + SATLiteral(34)))
-2356 2361 0
-2355 2359 0
34 2361 0
34 -2356 2359 0
34 -2355 2358 0
c ((aux546 + aux548 - aux551)<=0)
2352 -2363 0
2353 -2364 0
2346 -2363 0
2346 2352 -2364 0
2346 2353 -2366 0
2347 -2364 0
2347 2352 -2366 0
2347 2353 -2368 0
c (0<=(aux546 + aux548 - aux551))
-2353 2368 0
-2352 2366 0
-2347 2368 0
-2347 -2353 2366 0
-2347 -2352 2364 0
-2346 2366 0
-2346 -2353 2364 0
-2346 -2352 2363 0
c ((SATLiteral(304) - aux552 + SATLiteral(576))<=0)
-576 -2370 0
-304 -2370 0
-304 -576 -2371 0
c (0<=(SATLiteral(304) - aux552 + SATLiteral(576)))
576 2371 0
304 2371 0
304 576 2370 0
c ((SATLiteral(981) - aux553 + SATLiteral(846))<=0)
-846 -2373 0
-981 -2373 0
-981 -846 -2374 0
c (0<=(SATLiteral(981) - aux553 + SATLiteral(846)))
846 2374 0
981 2374 0
981 846 2373 0
c (( - aux554 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2376 0
-711 -2376 0
-711 -171 -2377 0
c (0<=( - aux554 + SATLiteral(711) + SATLiteral(171)))
171 2377 0
711 2377 0
711 171 2376 0
c (( - aux555 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2379 0
-441 -2379 0
-441 -1116 -2380 0
c (0<=( - aux555 + SATLiteral(441) + SATLiteral(1116)))
1116 2380 0
441 2380 0
441 1116 2379 0
c ((aux555 - aux556 + SATLiteral(36))<=0)
2379 -2382 0
2380 -2383 0
-36 -2382 0
-36 2379 -2383 0
-36 2380 -2385 0
c (0<=(aux555 - aux556 + SATLiteral(36)))
-2380 2385 0
-2379 2383 0
36 2385 0
36 -2380 2383 0
36 -2379 2382 0
c ((aux552 + aux554 - aux557)<=0)
2376 -2387 0
2377 -2388 0
2370 -2387 0
2370 2376 -2388 0
2370 2377 -2390 0
2371 -2388 0
2371 2376 -2390 0
2371 2377 -2392 0
c (0<=(aux552 + aux554 - aux557))
-2377 2392 0
-2376 2390 0
-2371 2392 0
-2371 -2377 2390 0
-2371 -2376 2388 0
-2370 2390 0
-2370 -2377 2388 0
-2370 -2376 2387 0
c ((SATLiteral(305) - aux558 + SATLiteral(578))<=0)
-578 -2394 0
-305 -2394 0
-305 -578 -2395 0
c (0<=(SATLiteral(305) - aux558 + SATLiteral(578)))
578 2395 0
305 2395 0
305 578 2394 0
c ((SATLiteral(983) - aux559 + SATLiteral(848))<=0)
-848 -2397 0
-983 -2397 0
-983 -848 -2398 0
c (0<=(SATLiteral(983) - aux559 + SATLiteral(848)))
848 2398 0
983 2398 0
983 848 2397 0
c (( - aux560 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2400 0
-713 -2400 0
-713 -173 -2401 0
c (0<=( - aux560 + SATLiteral(713) + SATLiteral(173)))
173 2401 0
713 2401 0
713 173 2400 0
c (( - aux561 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2403 0
-443 -2403 0
-443 -1118 -2404 0
c (0<=( - aux561 + SATLiteral(443) + SATLiteral(1118)))
1118 2404 0
443 2404 0
443 1118 2403 0
c ((aux561 - aux562 + SATLiteral(38))<=0)
2403 -2406 0
2404 -2407 0
-38 -2406 0
-38 2403 -2407 0
-38 2404 -2409 0
c (0<=(aux561 - aux562 + SATLiteral(38)))
-2404 2409 0
-2403 2407 0
38 2409 0
38 -2404 2407 0
38 -2403 2406 0
c ((aux558 + aux560 - aux563)<=0)
2400 -2411 0
2401 -2412 0
2394 -2411 0
2394 2400 -2412 0
2394 2401 -2414 0
2395 -2412 0
2395 2400 -2414 0
2395 2401 -2416 0
c (0<=(aux558 + aux560 - aux563))
-2401 2416 0
-2400 2414 0
-2395 2416 0
-2395 -2401 2414 0
-2395 -2400 2412 0
-2394 2414 0
-2394 -2401 2412 0
-2394 -2400 2411 0
c ((SATLiteral(306) - aux564 + SATLiteral(580))<=0)
-580 -2418 0
-306 -2418 0
-306 -580 -2419 0
c (0<=(SATLiteral(306) - aux564 + SATLiteral(580)))
580 2419 0
306 2419 0
306 580 2418 0
c ((SATLiteral(985) - aux565 + SATLiteral(850))<=0)
-850 -2421 0
-985 -2421 0
-985 -850 -2422 0
c (0<=(SATLiteral(985) - aux565 + SATLiteral(850)))
850 2422 0
985 2422 0
985 850 2421 0
c (( - aux566 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2424 0
-715 -2424 0
-715 -175 -2425 0
c (0<=( - aux566 + SATLiteral(715) + SATLiteral(175)))
175 2425 0
715 2425 0
715 175 2424 0
c (( - aux567 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2427 0
-445 -2427 0
-445 -1120 -2428 0
c (0<=( - aux567 + SATLiteral(445) + SATLiteral(1120)))
1120 2428 0
445 2428 0
445 1120 2427 0
c ((aux567 - aux568 + SATLiteral(40))<=0)
2427 -2430 0
2428 -2431 0
-40 -2430 0
-40 2427 -2431 0
-40 2428 -2433 0
c (0<=(aux567 - aux568 + SATLiteral(40)))
-2428 2433 0
-2427 2431 0
40 2433 0
40 -2428 2431 0
40 -2427 2430 0
c ((aux564 + aux566 - aux569)<=0)
2424 -2435 0
2425 -2436 0
2418 -2435 0
2418 2424 -2436 0
2418 2425 -2438 0
2419 -2436 0
2419 2424 -2438 0
2419 2425 -2440 0
c (0<=(aux564 + aux566 - aux569))
-2425 2440 0
-2424 2438 0
-2419 2440 0
-2419 -2425 2438 0
-2419 -2424 2436 0
-2418 2438 0
-2418 -2425 2436 0
-2418 -2424 2435 0
c ((SATLiteral(307) - aux570 + SATLiteral(582))<=0)
-582 -2442 0
-307 -2442 0
-307 -582 -2443 0
c (0<=(SATLiteral(307) - aux570 + SATLiteral(582)))
582 2443 0
307 2443 0
307 582 2442 0
c ((SATLiteral(987) - aux571 + SATLiteral(852))<=0)
-852 -2445 0
-987 -2445 0
-987 -852 -2446 0
c (0<=(SATLiteral(987) - aux571 + SATLiteral(852)))
852 2446 0
987 2446 0
987 852 2445 0
c (( - aux572 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2448 0
-717 -2448 0
-717 -177 -2449 0
c (0<=( - aux572 + SATLiteral(717) + SATLiteral(177)))
177 2449 0
717 2449 0
717 177 2448 0
c (( - aux573 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2451 0
-447 -2451 0
-447 -1122 -2452 0
c (0<=( - aux573 + SATLiteral(447) + SATLiteral(1122)))
1122 2452 0
447 2452 0
447 1122 2451 0
c ((aux573 - aux574 + SATLiteral(42))<=0)
2451 -2454 0
2452 -2455 0
-42 -2454 0
-42 2451 -2455 0
-42 2452 -2457 0
c (0<=(aux573 - aux574 + SATLiteral(42)))
-2452 2457 0
-2451 2455 0
42 2457 0
42 -2452 2455 0
42 -2451 2454 0
c ((aux570 + aux572 - aux575)<=0)
2448 -2459 0
2449 -2460 0
2442 -2459 0
2442 2448 -2460 0
2442 2449 -2462 0
2443 -2460 0
2443 2448 -2462 0
2443 2449 -2464 0
c (0<=(aux570 + aux572 - aux575))
-2449 2464 0
-2448 2462 0
-2443 2464 0
-2443 -2449 2462 0
-2443 -2448 2460 0
-2442 2462 0
-2442 -2449 2460 0
-2442 -2448 2459 0
c ((SATLiteral(308) - aux576 + SATLiteral(584))<=0)
-584 -2466 0
-308 -2466 0
-308 -584 -2467 0
c (0<=(SATLiteral(308) - aux576 + SATLiteral(584)))
584 2467 0
308 2467 0
308 584 2466 0
c ((SATLiteral(989) - aux577 + SATLiteral(854))<=0)
-854 -2469 0
-989 -2469 0
-989 -854 -2470 0
c (0<=(SATLiteral(989) - aux577 + SATLiteral(854)))
854 2470 0
989 2470 0
989 854 2469 0
c (( - aux578 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2472 0
-719 -2472 0
-719 -179 -2473 0
c (0<=( - aux578 + SATLiteral(719) + SATLiteral(179)))
179 2473 0
719 2473 0
719 179 2472 0
c (( - aux579 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2475 0
-449 -2475 0
-449 -1124 -2476 0
c (0<=( - aux579 + SATLiteral(449) + SATLiteral(1124)))
1124 2476 0
449 2476 0
449 1124 2475 0
c ((aux579 - aux580 + SATLiteral(44))<=0)
2475 -2478 0
2476 -2479 0
-44 -2478 0
-44 2475 -2479 0
-44 2476 -2481 0
c (0<=(aux579 - aux580 + SATLiteral(44)))
-2476 2481 0
-2475 2479 0
44 2481 0
44 -2476 2479 0
44 -2475 2478 0
c ((aux576 + aux578 - aux581)<=0)
2472 -2483 0
2473 -2484 0
2466 -2483 0
2466 2472 -2484 0
2466 2473 -2486 0
2467 -2484 0
2467 2472 -2486 0
2467 2473 -2488 0
c (0<=(aux576 + aux578 - aux581))
-2473 2488 0
-2472 2486 0
-2467 2488 0
-2467 -2473 2486 0
-2467 -2472 2484 0
-2466 2486 0
-2466 -2473 2484 0
-2466 -2472 2483 0
c ((SATLiteral(309) - aux582 + SATLiteral(586))<=0)
-586 -2490 0
-309 -2490 0
-309 -586 -2491 0
c (0<=(SATLiteral(309) - aux582 + SATLiteral(586)))
586 2491 0
309 2491 0
309 586 2490 0
c ((SATLiteral(991) - aux583 + SATLiteral(856))<=0)
-856 -2493 0
-991 -2493 0
-991 -856 -2494 0
c (0<=(SATLiteral(991) - aux583 + SATLiteral(856)))
856 2494 0
991 2494 0
991 856 2493 0
c (( - aux584 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2496 0
-721 -2496 0
-721 -181 -2497 0
c (0<=( - aux584 + SATLiteral(721) + SATLiteral(181)))
181 2497 0
721 2497 0
721 181 2496 0
c (( - aux585 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2499 0
-451 -2499 0
-451 -1126 -2500 0
c (0<=( - aux585 + SATLiteral(451) + SATLiteral(1126)))
1126 2500 0
451 2500 0
451 1126 2499 0
c ((aux585 - aux586 + SATLiteral(46))<=0)
2499 -2502 0
2500 -2503 0
-46 -2502 0
-46 2499 -2503 0
-46 2500 -2505 0
c (0<=(aux585 - aux586 + SATLiteral(46)))
-2500 2505 0
-2499 2503 0
46 2505 0
46 -2500 2503 0
46 -2499 2502 0
c ((aux582 + aux584 - aux587)<=0)
2496 -2507 0
2497 -2508 0
2490 -2507 0
2490 2496 -2508 0
2490 2497 -2510 0
2491 -2508 0
2491 2496 -2510 0
2491 2497 -2512 0
c (0<=(aux582 + aux584 - aux587))
-2497 2512 0
-2496 2510 0
-2491 2512 0
-2491 -2497 2510 0
-2491 -2496 2508 0
-2490 2510 0
-2490 -2497 2508 0
-2490 -2496 2507 0
c ((SATLiteral(310) - aux588 + SATLiteral(-585))<=0)
585 -2514 0
-310 -2514 0
-310 585 -2515 0
c (0<=(SATLiteral(310) - aux588 + SATLiteral(-585)))
-585 2515 0
310 2515 0
310 -585 2514 0
c ((SATLiteral(-990) - aux589 + SATLiteral(-855))<=0)
855 -2517 0
990 -2517 0
990 855 -2518 0
c (0<=(SATLiteral(-990) - aux589 + SATLiteral(-855)))
-855 2518 0
-990 2518 0
-990 -855 2517 0
c (( - aux590 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2520 0
720 -2520 0
720 180 -2521 0
c (0<=( - aux590 + SATLiteral(-720) + SATLiteral(-180)))
-180 2521 0
-720 2521 0
-720 -180 2520 0
c (( - aux591 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2523 0
450 -2523 0
450 1125 -2524 0
c (0<=( - aux591 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2524 0
-450 2524 0
-450 -1125 2523 0
c ((aux591 - aux592 + SATLiteral(-45))<=0)
2523 -2526 0
2524 -2527 0
45 -2526 0
45 2523 -2527 0
45 2524 -2529 0
c (0<=(aux591 - aux592 + SATLiteral(-45)))
-2524 2529 0
-2523 2527 0
-45 2529 0
-45 -2524 2527 0
-45 -2523 2526 0
c ((aux588 + aux590 - aux593)<=0)
2520 -2531 0
2521 -2532 0
2514 -2531 0
2514 2520 -2532 0
2514 2521 -2534 0
2515 -2532 0
2515 2520 -2534 0
2515 2521 -2536 0
c (0<=(aux588 + aux590 - aux593))
-2521 2536 0
-2520 2534 0
-2515 2536 0
-2515 -2521 2534 0
-2515 -2520 2532 0
-2514 2534 0
-2514 -2521 2532 0
-2514 -2520 2531 0
c ((SATLiteral(317) - aux594 + SATLiteral(587))<=0)
-587 -2538 0
-317 -2538 0
-317 -587 -2539 0
c (0<=(SATLiteral(317) - aux594 + SATLiteral(587)))
587 2539 0
317 2539 0
317 587 2538 0
c ((SATLiteral(992) - aux595 + SATLiteral(857))<=0)
-857 -2541 0
-992 -2541 0
-992 -857 -2542 0
c (0<=(SATLiteral(992) - aux595 + SATLiteral(857)))
857 2542 0
992 2542 0
992 857 2541 0
c (( - aux596 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2544 0
-722 -2544 0
-722 -182 -2545 0
c (0<=( - aux596 + SATLiteral(722) + SATLiteral(182)))
182 2545 0
722 2545 0
722 182 2544 0
c (( - aux597 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2547 0
-452 -2547 0
-452 -1127 -2548 0
c (0<=( - aux597 + SATLiteral(452) + SATLiteral(1127)))
1127 2548 0
452 2548 0
452 1127 2547 0
c ((aux597 - aux598 + SATLiteral(47))<=0)
2547 -2550 0
2548 -2551 0
-47 -2550 0
-47 2547 -2551 0
-47 2548 -2553 0
c (0<=(aux597 - aux598 + SATLiteral(47)))
-2548 2553 0
-2547 2551 0
47 2553 0
47 -2548 2551 0
47 -2547 2550 0
c ((aux594 + aux596 - aux599)<=0)
2544 -2555 0
2545 -2556 0
2538 -2555 0
2538 2544 -2556 0
2538 2545 -2558 0
2539 -2556 0
2539 2544 -2558 0
2539 2545 -2560 0
c (0<=(aux594 + aux596 - aux599))
-2545 2560 0
-2544 2558 0
-2539 2560 0
-2539 -2545 2558 0
-2539 -2544 2556 0
-2538 2558 0
-2538 -2545 2556 0
-2538 -2544 2555 0
c ((SATLiteral(319) - aux600 + SATLiteral(589))<=0)
-589 -2562 0
-319 -2562 0
-319 -589 -2563 0
c (0<=(SATLiteral(319) - aux600 + SATLiteral(589)))
589 2563 0
319 2563 0
319 589 2562 0
c ((SATLiteral(994) - aux601 + SATLiteral(859))<=0)
-859 -2565 0
-994 -2565 0
-994 -859 -2566 0
c (0<=(SATLiteral(994) - aux601 + SATLiteral(859)))
859 2566 0
994 2566 0
994 859 2565 0
c (( - aux602 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2568 0
-724 -2568 0
-724 -184 -2569 0
c (0<=( - aux602 + SATLiteral(724) + SATLiteral(184)))
184 2569 0
724 2569 0
724 184 2568 0
c (( - aux603 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2571 0
-454 -2571 0
-454 -1129 -2572 0
c (0<=( - aux603 + SATLiteral(454) + SATLiteral(1129)))
1129 2572 0
454 2572 0
454 1129 2571 0
c ((aux603 - aux604 + SATLiteral(49))<=0)
2571 -2574 0
2572 -2575 0
-49 -2574 0
-49 2571 -2575 0
-49 2572 -2577 0
c (0<=(aux603 - aux604 + SATLiteral(49)))
-2572 2577 0
-2571 2575 0
49 2577 0
49 -2572 2575 0
49 -2571 2574 0
c ((aux600 + aux602 - aux605)<=0)
2568 -2579 0
2569 -2580 0
2562 -2579 0
2562 2568 -2580 0
2562 2569 -2582 0
2563 -2580 0
2563 2568 -2582 0
2563 2569 -2584 0
c (0<=(aux600 + aux602 - aux605))
-2569 2584 0
-2568 2582 0
-2563 2584 0
-2563 -2569 2582 0
-2563 -2568 2580 0
-2562 2582 0
-2562 -2569 2580 0
-2562 -2568 2579 0
c ((SATLiteral(321) - aux606 + SATLiteral(591))<=0)
-591 -2586 0
-321 -2586 0
-321 -591 -2587 0
c (0<=(SATLiteral(321) - aux606 + SATLiteral(591)))
591 2587 0
321 2587 0
321 591 2586 0
c ((SATLiteral(996) - aux607 + SATLiteral(861))<=0)
-861 -2589 0
-996 -2589 0
-996 -861 -2590 0
c (0<=(SATLiteral(996) - aux607 + SATLiteral(861)))
861 2590 0
996 2590 0
996 861 2589 0
c (( - aux608 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2592 0
-726 -2592 0
-726 -186 -2593 0
c (0<=( - aux608 + SATLiteral(726) + SATLiteral(186)))
186 2593 0
726 2593 0
726 186 2592 0
c (( - aux609 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2595 0
-456 -2595 0
-456 -1131 -2596 0
c (0<=( - aux609 + SATLiteral(456) + SATLiteral(1131)))
1131 2596 0
456 2596 0
456 1131 2595 0
c ((aux609 - aux610 + SATLiteral(51))<=0)
2595 -2598 0
2596 -2599 0
-51 -2598 0
-51 2595 -2599 0
-51 2596 -2601 0
c (0<=(aux609 - aux610 + SATLiteral(51)))
-2596 2601 0
-2595 2599 0
51 2601 0
51 -2596 2599 0
51 -2595 2598 0
c ((aux606 + aux608 - aux611)<=0)
2592 -2603 0
2593 -2604 0
2586 -2603 0
2586 2592 -2604 0
2586 2593 -2606 0
2587 -2604 0
2587 2592 -2606 0
2587 2593 -2608 0
c (0<=(aux606 + aux608 - aux611))
-2593 2608 0
-2592 2606 0
-2587 2608 0
-2587 -2593 2606 0
-2587 -2592 2604 0
-2586 2606 0
-2586 -2593 2604 0
-2586 -2592 2603 0
c ((SATLiteral(323) - aux612 + SATLiteral(593))<=0)
-593 -2610 0
-323 -2610 0
-323 -593 -2611 0
c (0<=(SATLiteral(323) - aux612 + SATLiteral(593)))
593 2611 0
323 2611 0
323 593 2610 0
c ((SATLiteral(998) - aux613 + SATLiteral(863))<=0)
-863 -2613 0
-998 -2613 0
-998 -863 -2614 0
c (0<=(SATLiteral(998) - aux613 + SATLiteral(863)))
863 2614 0
998 2614 0
998 863 2613 0
c (( - aux614 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2616 0
-728 -2616 0
-728 -188 -2617 0
c (0<=( - aux614 + SATLiteral(728) + SATLiteral(188)))
188 2617 0
728 2617 0
728 188 2616 0
c (( - aux615 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2619 0
-458 -2619 0
-458 -1133 -2620 0
c (0<=( - aux615 + SATLiteral(458) + SATLiteral(1133)))
1133 2620 0
458 2620 0
458 1133 2619 0
c ((aux615 - aux616 + SATLiteral(53))<=0)
2619 -2622 0
2620 -2623 0
-53 -2622 0
-53 2619 -2623 0
-53 2620 -2625 0
c (0<=(aux615 - aux616 + SATLiteral(53)))
-2620 2625 0
-2619 2623 0
53 2625 0
53 -2620 2623 0
53 -2619 2622 0
c ((aux612 + aux614 - aux617)<=0)
2616 -2627 0
2617 -2628 0
2610 -2627 0
2610 2616 -2628 0
2610 2617 -2630 0
2611 -2628 0
2611 2616 -2630 0
2611 2617 -2632 0
c (0<=(aux612 + aux614 - aux617))
-2617 2632 0
-2616 2630 0
-2611 2632 0
-2611 -2617 2630 0
-2611 -2616 2628 0
-2610 2630 0
-2610 -2617 2628 0
-2610 -2616 2627 0
c ((SATLiteral(325) - aux618 + SATLiteral(595))<=0)
-595 -2634 0
-325 -2634 0
-325 -595 -2635 0
c (0<=(SATLiteral(325) - aux618 + SATLiteral(595)))
595 2635 0
325 2635 0
325 595 2634 0
c ((SATLiteral(1000) - aux619 + SATLiteral(865))<=0)
-865 -2637 0
-1000 -2637 0
-1000 -865 -2638 0
c (0<=(SATLiteral(1000) - aux619 + SATLiteral(865)))
865 2638 0
1000 2638 0
1000 865 2637 0
c (( - aux620 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2640 0
-730 -2640 0
-730 -190 -2641 0
c (0<=( - aux620 + SATLiteral(730) + SATLiteral(190)))
190 2641 0
730 2641 0
730 190 2640 0
c (( - aux621 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2643 0
-460 -2643 0
-460 -1135 -2644 0
c (0<=( - aux621 + SATLiteral(460) + SATLiteral(1135)))
1135 2644 0
460 2644 0
460 1135 2643 0
c ((aux621 - aux622 + SATLiteral(55))<=0)
2643 -2646 0
2644 -2647 0
-55 -2646 0
-55 2643 -2647 0
-55 2644 -2649 0
c (0<=(aux621 - aux622 + SATLiteral(55)))
-2644 2649 0
-2643 2647 0
55 2649 0
55 -2644 2647 0
55 -2643 2646 0
c ((aux618 + aux620 - aux623)<=0)
2640 -2651 0
2641 -2652 0
2634 -2651 0
2634 2640 -2652 0
2634 2641 -2654 0
2635 -2652 0
2635 2640 -2654 0
2635 2641 -2656 0
c (0<=(aux618 + aux620 - aux623))
-2641 2656 0
-2640 2654 0
-2635 2656 0
-2635 -2641 2654 0
-2635 -2640 2652 0
-2634 2654 0
-2634 -2641 2652 0
-2634 -2640 2651 0
c ((SATLiteral(327) - aux624 + SATLiteral(597))<=0)
-597 -2658 0
-327 -2658 0
-327 -597 -2659 0
c (0<=(SATLiteral(327) - aux624 + SATLiteral(597)))
597 2659 0
327 2659 0
327 597 2658 0
c ((SATLiteral(1002) - aux625 + SATLiteral(867))<=0)
-867 -2661 0
-1002 -2661 0
-1002 -867 -2662 0
c (0<=(SATLiteral(1002) - aux625 + SATLiteral(867)))
867 2662 0
1002 2662 0
1002 867 2661 0
c (( - aux626 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2664 0
-732 -2664 0
-732 -192 -2665 0
c (0<=( - aux626 + SATLiteral(732) + SATLiteral(192)))
192 2665 0
732 2665 0
732 192 2664 0
c (( - aux627 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2667 0
-462 -2667 0
-462 -1137 -2668 0
c (0<=( - aux627 + SATLiteral(462) + SATLiteral(1137)))
1137 2668 0
462 2668 0
462 1137 2667 0
c ((aux627 - aux628 + SATLiteral(57))<=0)
2667 -2670 0
2668 -2671 0
-57 -2670 0
-57 2667 -2671 0
-57 2668 -2673 0
c (0<=(aux627 - aux628 + SATLiteral(57)))
-2668 2673 0
-2667 2671 0
57 2673 0
57 -2668 2671 0
57 -2667 2670 0
c ((aux624 + aux626 - aux629)<=0)
2664 -2675 0
2665 -2676 0
2658 -2675 0
2658 2664 -2676 0
2658 2665 -2678 0
2659 -2676 0
2659 2664 -2678 0
2659 2665 -2680 0
c (0<=(aux624 + aux626 - aux629))
-2665 2680 0
-2664 2678 0
-2659 2680 0
-2659 -2665 2678 0
-2659 -2664 2676 0
-2658 2678 0
-2658 -2665 2676 0
-2658 -2664 2675 0
c ((SATLiteral(329) - aux630 + SATLiteral(599))<=0)
-599 -2682 0
-329 -2682 0
-329 -599 -2683 0
c (0<=(SATLiteral(329) - aux630 + SATLiteral(599)))
599 2683 0
329 2683 0
329 599 2682 0
c ((SATLiteral(1004) - aux631 + SATLiteral(869))<=0)
-869 -2685 0
-1004 -2685 0
-1004 -869 -2686 0
c (0<=(SATLiteral(1004) - aux631 + SATLiteral(869)))
869 2686 0
1004 2686 0
1004 869 2685 0
c (( - aux632 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2688 0
-734 -2688 0
-734 -194 -2689 0
c (0<=( - aux632 + SATLiteral(734) + SATLiteral(194)))
194 2689 0
734 2689 0
734 194 2688 0
c (( - aux633 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2691 0
-464 -2691 0
-464 -1139 -2692 0
c (0<=( - aux633 + SATLiteral(464) + SATLiteral(1139)))
1139 2692 0
464 2692 0
464 1139 2691 0
c ((aux633 - aux634 + SATLiteral(59))<=0)
2691 -2694 0
2692 -2695 0
-59 -2694 0
-59 2691 -2695 0
-59 2692 -2697 0
c (0<=(aux633 - aux634 + SATLiteral(59)))
-2692 2697 0
-2691 2695 0
59 2697 0
59 -2692 2695 0
59 -2691 2694 0
c ((aux630 + aux632 - aux635)<=0)
2688 -2699 0
2689 -2700 0
2682 -2699 0
2682 2688 -2700 0
2682 2689 -2702 0
2683 -2700 0
2683 2688 -2702 0
2683 2689 -2704 0
c (0<=(aux630 + aux632 - aux635))
-2689 2704 0
-2688 2702 0
-2683 2704 0
-2683 -2689 2702 0
-2683 -2688 2700 0
-2682 2702 0
-2682 -2689 2700 0
-2682 -2688 2699 0
c ((SATLiteral(331) - aux636 + SATLiteral(601))<=0)
-601 -2706 0
-331 -2706 0
-331 -601 -2707 0
c (0<=(SATLiteral(331) - aux636 + SATLiteral(601)))
601 2707 0
331 2707 0
331 601 2706 0
c ((SATLiteral(1006) - aux637 + SATLiteral(871))<=0)
-871 -2709 0
-1006 -2709 0
-1006 -871 -2710 0
c (0<=(SATLiteral(1006) - aux637 + SATLiteral(871)))
871 2710 0
1006 2710 0
1006 871 2709 0
c (( - aux638 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2712 0
-736 -2712 0
-736 -196 -2713 0
c (0<=( - aux638 + SATLiteral(736) + SATLiteral(196)))
196 2713 0
736 2713 0
736 196 2712 0
c (( - aux639 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2715 0
-466 -2715 0
-466 -1141 -2716 0
c (0<=( - aux639 + SATLiteral(466) + SATLiteral(1141)))
1141 2716 0
466 2716 0
466 1141 2715 0
c ((aux639 - aux640 + SATLiteral(61))<=0)
2715 -2718 0
2716 -2719 0
-61 -2718 0
-61 2715 -2719 0
-61 2716 -2721 0
c (0<=(aux639 - aux640 + SATLiteral(61)))
-2716 2721 0
-2715 2719 0
61 2721 0
61 -2716 2719 0
61 -2715 2718 0
c ((aux636 + aux638 - aux641)<=0)
2712 -2723 0
2713 -2724 0
2706 -2723 0
2706 2712 -2724 0
2706 2713 -2726 0
2707 -2724 0
2707 2712 -2726 0
2707 2713 -2728 0
c (0<=(aux636 + aux638 - aux641))
-2713 2728 0
-2712 2726 0
-2707 2728 0
-2707 -2713 2726 0
-2707 -2712 2724 0
-2706 2726 0
-2706 -2713 2724 0
-2706 -2712 2723 0
c ((SATLiteral(-330) - aux642 + SATLiteral(-600))<=0)
600 -2730 0
330 -2730 0
330 600 -2731 0
c (0<=(SATLiteral(-330) - aux642 + SATLiteral(-600)))
-600 2731 0
-330 2731 0
-330 -600 2730 0
c ((SATLiteral(-1005) - aux643 + SATLiteral(-870))<=0)
870 -2733 0
1005 -2733 0
1005 870 -2734 0
c (0<=(SATLiteral(-1005) - aux643 + SATLiteral(-870)))
-870 2734 0
-1005 2734 0
-1005 -870 2733 0
c (( - aux644 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2736 0
735 -2736 0
735 195 -2737 0
c (0<=( - aux644 + SATLiteral(-735) + SATLiteral(-195)))
-195 2737 0
-735 2737 0
-735 -195 2736 0
c (( - aux645 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2739 0
465 -2739 0
465 1140 -2740 0
c (0<=( - aux645 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2740 0
-465 2740 0
-465 -1140 2739 0
c ((aux645 - aux646 + SATLiteral(-60))<=0)
2739 -2742 0
2740 -2743 0
60 -2742 0
60 2739 -2743 0
60 2740 -2745 0
c (0<=(aux645 - aux646 + SATLiteral(-60)))
-2740 2745 0
-2739 2743 0
-60 2745 0
-60 -2740 2743 0
-60 -2739 2742 0
c ((aux642 + aux644 - aux647)<=0)
2736 -2747 0
2737 -2748 0
2730 -2747 0
2730 2736 -2748 0
2730 2737 -2750 0
2731 -2748 0
2731 2736 -2750 0
2731 2737 -2752 0
c (0<=(aux642 + aux644 - aux647))
-2737 2752 0
-2736 2750 0
-2731 2752 0
-2731 -2737 2750 0
-2731 -2736 2748 0
-2730 2750 0
-2730 -2737 2748 0
-2730 -2736 2747 0
c ((SATLiteral(332) - aux648 + SATLiteral(602))<=0)
-602 -2754 0
-332 -2754 0
-332 -602 -2755 0
c (0<=(SATLiteral(332) - aux648 + SATLiteral(602)))
602 2755 0
332 2755 0
332 602 2754 0
c ((SATLiteral(1007) - aux649 + SATLiteral(872))<=0)
-872 -2757 0
-1007 -2757 0
-1007 -872 -2758 0
c (0<=(SATLiteral(1007) - aux649 + SATLiteral(872)))
872 2758 0
1007 2758 0
1007 872 2757 0
c (( - aux650 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2760 0
-737 -2760 0
-737 -197 -2761 0
c (0<=( - aux650 + SATLiteral(737) + SATLiteral(197)))
197 2761 0
737 2761 0
737 197 2760 0
c (( - aux651 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2763 0
-467 -2763 0
-467 -1142 -2764 0
c (0<=( - aux651 + SATLiteral(467) + SATLiteral(1142)))
1142 2764 0
467 2764 0
467 1142 2763 0
c ((aux651 - aux652 + SATLiteral(62))<=0)
2763 -2766 0
2764 -2767 0
-62 -2766 0
-62 2763 -2767 0
-62 2764 -2769 0
c (0<=(aux651 - aux652 + SATLiteral(62)))
-2764 2769 0
-2763 2767 0
62 2769 0
62 -2764 2767 0
62 -2763 2766 0
c ((aux648 + aux650 - aux653)<=0)
2760 -2771 0
2761 -2772 0
2754 -2771 0
2754 2760 -2772 0
2754 2761 -2774 0
2755 -2772 0
2755 2760 -2774 0
2755 2761 -2776 0
c (0<=(aux648 + aux650 - aux653))
-2761 2776 0
-2760 2774 0
-2755 2776 0
-2755 -2761 2774 0
-2755 -2760 2772 0
-2754 2774 0
-2754 -2761 2772 0
-2754 -2760 2771 0
c ((SATLiteral(334) - aux654 + SATLiteral(604))<=0)
-604 -2778 0
-334 -2778 0
-334 -604 -2779 0
c (0<=(SATLiteral(334) - aux654 + SATLiteral(604)))
604 2779 0
334 2779 0
334 604 2778 0
c ((SATLiteral(1009) - aux655 + SATLiteral(874))<=0)
-874 -2781 0
-1009 -2781 0
-1009 -874 -2782 0
c (0<=(SATLiteral(1009) - aux655 + SATLiteral(874)))
874 2782 0
1009 2782 0
1009 874 2781 0
c (( - aux656 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2784 0
-739 -2784 0
-739 -199 -2785 0
c (0<=( - aux656 + SATLiteral(739) + SATLiteral(199)))
199 2785 0
739 2785 0
739 199 2784 0
c (( - aux657 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2787 0
-469 -2787 0
-469 -1144 -2788 0
c (0<=( - aux657 + SATLiteral(469) + SATLiteral(1144)))
1144 2788 0
469 2788 0
469 1144 2787 0
c ((aux657 - aux658 + SATLiteral(64))<=0)
2787 -2790 0
2788 -2791 0
-64 -2790 0
-64 2787 -2791 0
-64 2788 -2793 0
c (0<=(aux657 - aux658 + SATLiteral(64)))
-2788 2793 0
-2787 2791 0
64 2793 0
64 -2788 2791 0
64 -2787 2790 0
c ((aux654 + aux656 - aux659)<=0)
2784 -2795 0
2785 -2796 0
2778 -2795 0
2778 2784 -2796 0
2778 2785 -2798 0
2779 -2796 0
2779 2784 -2798 0
2779 2785 -2800 0
c (0<=(aux654 + aux656 - aux659))
-2785 2800 0
-2784 2798 0
-2779 2800 0
-2779 -2785 2798 0
-2779 -2784 2796 0
-2778 2798 0
-2778 -2785 2796 0
-2778 -2784 2795 0
c ((SATLiteral(336) - aux660 + SATLiteral(606))<=0)
-606 -2802 0
-336 -2802 0
-336 -606 -2803 0
c (0<=(SATLiteral(336) - aux660 + SATLiteral(606)))
606 2803 0
336 2803 0
336 606 2802 0
c ((SATLiteral(1011) - aux661 + SATLiteral(876))<=0)
-876 -2805 0
-1011 -2805 0
-1011 -876 -2806 0
c (0<=(SATLiteral(1011) - aux661 + SATLiteral(876)))
876 2806 0
1011 2806 0
1011 876 2805 0
c (( - aux662 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2808 0
-741 -2808 0
-741 -201 -2809 0
c (0<=( - aux662 + SATLiteral(741) + SATLiteral(201)))
201 2809 0
741 2809 0
741 201 2808 0
c (( - aux663 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2811 0
-471 -2811 0
-471 -1146 -2812 0
c (0<=( - aux663 + SATLiteral(471) + SATLiteral(1146)))
1146 2812 0
471 2812 0
471 1146 2811 0
c ((aux663 - aux664 + SATLiteral(66))<=0)
2811 -2814 0
2812 -2815 0
-66 -2814 0
-66 2811 -2815 0
-66 2812 -2817 0
c (0<=(aux663 - aux664 + SATLiteral(66)))
-2812 2817 0
-2811 2815 0
66 2817 0
66 -2812 2815 0
66 -2811 2814 0
c ((aux660 + aux662 - aux665)<=0)
2808 -2819 0
2809 -2820 0
2802 -2819 0
2802 2808 -2820 0
2802 2809 -2822 0
2803 -2820 0
2803 2808 -2822 0
2803 2809 -2824 0
c (0<=(aux660 + aux662 - aux665))
-2809 2824 0
-2808 2822 0
-2803 2824 0
-2803 -2809 2822 0
-2803 -2808 2820 0
-2802 2822 0
-2802 -2809 2820 0
-2802 -2808 2819 0
c ((SATLiteral(338) - aux666 + SATLiteral(608))<=0)
-608 -2826 0
-338 -2826 0
-338 -608 -2827 0
c (0<=(SATLiteral(338) - aux666 + SATLiteral(608)))
608 2827 0
338 2827 0
338 608 2826 0
c ((SATLiteral(1013) - aux667 + SATLiteral(878))<=0)
-878 -2829 0
-1013 -2829 0
-1013 -878 -2830 0
c (0<=(SATLiteral(1013) - aux667 + SATLiteral(878)))
878 2830 0
1013 2830 0
1013 878 2829 0
c (( - aux668 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2832 0
-743 -2832 0
-743 -203 -2833 0
c (0<=( - aux668 + SATLiteral(743) + SATLiteral(203)))
203 2833 0
743 2833 0
743 203 2832 0
c (( - aux669 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2835 0
-473 -2835 0
-473 -1148 -2836 0
c (0<=( - aux669 + SATLiteral(473) + SATLiteral(1148)))
1148 2836 0
473 2836 0
473 1148 2835 0
c ((aux669 - aux670 + SATLiteral(68))<=0)
2835 -2838 0
2836 -2839 0
-68 -2838 0
-68 2835 -2839 0
-68 2836 -2841 0
c (0<=(aux669 - aux670 + SATLiteral(68)))
-2836 2841 0
-2835 2839 0
68 2841 0
68 -2836 2839 0
68 -2835 2838 0
c ((aux666 + aux668 - aux671)<=0)
2832 -2843 0
2833 -2844 0
2826 -2843 0
2826 2832 -2844 0
2826 2833 -2846 0
2827 -2844 0
2827 2832 -2846 0
2827 2833 -2848 0
c (0<=(aux666 + aux668 - aux671))
-2833 2848 0
-2832 2846 0
-2827 2848 0
-2827 -2833 2846 0
-2827 -2832 2844 0
-2826 2846 0
-2826 -2833 2844 0
-2826 -2832 2843 0
c ((SATLiteral(340) - aux672 + SATLiteral(610))<=0)
-610 -2850 0
-340 -2850 0
-340 -610 -2851 0
c (0<=(SATLiteral(340) - aux672 + SATLiteral(610)))
610 2851 0
340 2851 0
340 610 2850 0
c ((SATLiteral(1015) - aux673 + SATLiteral(880))<=0)
-880 -2853 0
-1015 -2853 0
-1015 -880 -2854 0
c (0<=(SATLiteral(1015) - aux673 + SATLiteral(880)))
880 2854 0
1015 2854 0
1015 880 2853 0
c (( - aux674 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2856 0
-745 -2856 0
-745 -205 -2857 0
c (0<=( - aux674 + SATLiteral(745) + SATLiteral(205)))
205 2857 0
745 2857 0
745 205 2856 0
c (( - aux675 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2859 0
-475 -2859 0
-475 -1150 -2860 0
c (0<=( - aux675 + SATLiteral(475) + SATLiteral(1150)))
1150 2860 0
475 2860 0
475 1150 2859 0
c ((aux675 - aux676 + SATLiteral(70))<=0)
2859 -2862 0
2860 -2863 0
-70 -2862 0
-70 2859 -2863 0
-70 2860 -2865 0
c (0<=(aux675 - aux676 + SATLiteral(70)))
-2860 2865 0
-2859 2863 0
70 2865 0
70 -2860 2863 0
70 -2859 2862 0
c ((aux672 + aux674 - aux677)<=0)
2856 -2867 0
2857 -2868 0
2850 -2867 0
2850 2856 -2868 0
2850 2857 -2870 0
2851 -2868 0
2851 2856 -2870 0
2851 2857 -2872 0
c (0<=(aux672 + aux674 - aux677))
-2857 2872 0
-2856 2870 0
-2851 2872 0
-2851 -2857 2870 0
-2851 -2856 2868 0
-2850 2870 0
-2850 -2857 2868 0
-2850 -2856 2867 0
c ((SATLiteral(342) - aux678 + SATLiteral(612))<=0)
-612 -2874 0
-342 -2874 0
-342 -612 -2875 0
c (0<=(SATLiteral(342) - aux678 + SATLiteral(612)))
612 2875 0
342 2875 0
342 612 2874 0
c ((SATLiteral(1017) - aux679 + SATLiteral(882))<=0)
-882 -2877 0
-1017 -2877 0
-1017 -882 -2878 0
c (0<=(SATLiteral(1017) - aux679 + SATLiteral(882)))
882 2878 0
1017 2878 0
1017 882 2877 0
c (( - aux680 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -2880 0
-747 -2880 0
-747 -207 -2881 0
c (0<=( - aux680 + SATLiteral(747) + SATLiteral(207)))
207 2881 0
747 2881 0
747 207 2880 0
c (( - aux681 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -2883 0
-477 -2883 0
-477 -1152 -2884 0
c (0<=( - aux681 + SATLiteral(477) + SATLiteral(1152)))
1152 2884 0
477 2884 0
477 1152 2883 0
c ((aux681 - aux682 + SATLiteral(72))<=0)
2883 -2886 0
2884 -2887 0
-72 -2886 0
-72 2883 -2887 0
-72 2884 -2889 0
c (0<=(aux681 - aux682 + SATLiteral(72)))
-2884 2889 0
-2883 2887 0
72 2889 0
72 -2884 2887 0
72 -2883 2886 0
c ((aux678 + aux680 - aux683)<=0)
2880 -2891 0
2881 -2892 0
2874 -2891 0
2874 2880 -2892 0
2874 2881 -2894 0
2875 -2892 0
2875 2880 -2894 0
2875 2881 -2896 0
c (0<=(aux678 + aux680 - aux683))
-2881 2896 0
-2880 2894 0
-2875 2896 0
-2875 -2881 2894 0
-2875 -2880 2892 0
-2874 2894 0
-2874 -2881 2892 0
-2874 -2880 2891 0
c ((SATLiteral(344) - aux684 + SATLiteral(614))<=0)
-614 -2898 0
-344 -2898 0
-344 -614 -2899 0
c (0<=(SATLiteral(344) - aux684 + SATLiteral(614)))
614 2899 0
344 2899 0
344 614 2898 0
c ((SATLiteral(1019) - aux685 + SATLiteral(884))<=0)
-884 -2901 0
-1019 -2901 0
-1019 -884 -2902 0
c (0<=(SATLiteral(1019) - aux685 + SATLiteral(884)))
884 2902 0
1019 2902 0
1019 884 2901 0
c (( - aux686 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -2904 0
-749 -2904 0
-749 -209 -2905 0
c (0<=( - aux686 + SATLiteral(749) + SATLiteral(209)))
209 2905 0
749 2905 0
749 209 2904 0
c (( - aux687 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -2907 0
-479 -2907 0
-479 -1154 -2908 0
c (0<=( - aux687 + SATLiteral(479) + SATLiteral(1154)))
1154 2908 0
479 2908 0
479 1154 2907 0
c ((aux687 - aux688 + SATLiteral(74))<=0)
2907 -2910 0
2908 -2911 0
-74 -2910 0
-74 2907 -2911 0
-74 2908 -2913 0
c (0<=(aux687 - aux688 + SATLiteral(74)))
-2908 2913 0
-2907 2911 0
74 2913 0
74 -2908 2911 0
74 -2907 2910 0
c ((aux684 + aux686 - aux689)<=0)
2904 -2915 0
2905 -2916 0
2898 -2915 0
2898 2904 -2916 0
2898 2905 -2918 0
2899 -2916 0
2899 2904 -2918 0
2899 2905 -2920 0
c (0<=(aux684 + aux686 - aux689))
-2905 2920 0
-2904 2918 0
-2899 2920 0
-2899 -2905 2918 0
-2899 -2904 2916 0
-2898 2918 0
-2898 -2905 2916 0
-2898 -2904 2915 0
c ((SATLiteral(346) - aux690 + SATLiteral(616))<=0)
-616 -2922 0
-346 -2922 0
-346 -616 -2923 0
c (0<=(SATLiteral(346) - aux690 + SATLiteral(616)))
616 2923 0
346 2923 0
346 616 2922 0
c ((SATLiteral(1021) - aux691 + SATLiteral(886))<=0)
-886 -2925 0
-1021 -2925 0
-1021 -886 -2926 0
c (0<=(SATLiteral(1021) - aux691 + SATLiteral(886)))
886 2926 0
1021 2926 0
1021 886 2925 0
c (( - aux692 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -2928 0
-751 -2928 0
-751 -211 -2929 0
c (0<=( - aux692 + SATLiteral(751) + SATLiteral(211)))
211 2929 0
751 2929 0
751 211 2928 0
c (( - aux693 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -2931 0
-481 -2931 0
-481 -1156 -2932 0
c (0<=( - aux693 + SATLiteral(481) + SATLiteral(1156)))
1156 2932 0
481 2932 0
481 1156 2931 0
c ((aux693 - aux694 + SATLiteral(76))<=0)
2931 -2934 0
2932 -2935 0
-76 -2934 0
-76 2931 -2935 0
-76 2932 -2937 0
c (0<=(aux693 - aux694 + SATLiteral(76)))
-2932 2937 0
-2931 2935 0
76 2937 0
76 -2932 2935 0
76 -2931 2934 0
c ((aux690 + aux692 - aux695)<=0)
2928 -2939 0
2929 -2940 0
2922 -2939 0
2922 2928 -2940 0
2922 2929 -2942 0
2923 -2940 0
2923 2928 -2942 0
2923 2929 -2944 0
c (0<=(aux690 + aux692 - aux695))
-2929 2944 0
-2928 2942 0
-2923 2944 0
-2923 -2929 2942 0
-2923 -2928 2940 0
-2922 2942 0
-2922 -2929 2940 0
-2922 -2928 2939 0
c ((SATLiteral(-345) - aux696 + SATLiteral(-615))<=0)
615 -2946 0
345 -2946 0
345 615 -2947 0
c (0<=(SATLiteral(-345) - aux696 + SATLiteral(-615)))
-615 2947 0
-345 2947 0
-345 -615 2946 0
c ((SATLiteral(-1020) - aux697 + SATLiteral(-885))<=0)
885 -2949 0
1020 -2949 0
1020 885 -2950 0
c (0<=(SATLiteral(-1020) - aux697 + SATLiteral(-885)))
-885 2950 0
-1020 2950 0
-1020 -885 2949 0
c (( - aux698 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -2952 0
750 -2952 0
750 210 -2953 0
c (0<=( - aux698 + SATLiteral(-750) + SATLiteral(-210)))
-210 2953 0
-750 2953 0
-750 -210 2952 0
c (( - aux699 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -2955 0
480 -2955 0
480 1155 -2956 0
c (0<=( - aux699 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 2956 0
-480 2956 0
-480 -1155 2955 0
c ((aux699 - aux700 + SATLiteral(-75))<=0)
2955 -2958 0
2956 -2959 0
75 -2958 0
75 2955 -2959 0
75 2956 -2961 0
c (0<=(aux699 - aux700 + SATLiteral(-75)))
-2956 2961 0
-2955 2959 0
-75 2961 0
-75 -2956 2959 0
-75 -2955 2958 0
c ((aux696 + aux698 - aux701)<=0)
2952 -2963 0
2953 -2964 0
2946 -2963 0
2946 2952 -2964 0
2946 2953 -2966 0
2947 -2964 0
2947 2952 -2966 0
2947 2953 -2968 0
c (0<=(aux696 + aux698 - aux701))
-2953 2968 0
-2952 2966 0
-2947 2968 0
-2947 -2953 2966 0
-2947 -2952 2964 0
-2946 2966 0
-2946 -2953 2964 0
-2946 -2952 2963 0
c ((SATLiteral(347) - aux702 + SATLiteral(617))<=0)
-617 -2970 0
-347 -2970 0
-347 -617 -2971 0
c (0<=(SATLiteral(347) - aux702 + SATLiteral(617)))
617 2971 0
347 2971 0
347 617 2970 0
c ((SATLiteral(1022) - aux703 + SATLiteral(887))<=0)
-887 -2973 0
-1022 -2973 0
-1022 -887 -2974 0
c (0<=(SATLiteral(1022) - aux703 + SATLiteral(887)))
887 2974 0
1022 2974 0
1022 887 2973 0
c (( - aux704 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -2976 0
-752 -2976 0
-752 -212 -2977 0
c (0<=( - aux704 + SATLiteral(752) + SATLiteral(212)))
212 2977 0
752 2977 0
752 212 2976 0
c (( - aux705 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -2979 0
-482 -2979 0
-482 -1157 -2980 0
c (0<=( - aux705 + SATLiteral(482) + SATLiteral(1157)))
1157 2980 0
482 2980 0
482 1157 2979 0
c ((aux705 - aux706 + SATLiteral(77))<=0)
2979 -2982 0
2980 -2983 0
-77 -2982 0
-77 2979 -2983 0
-77 2980 -2985 0
c (0<=(aux705 - aux706 + SATLiteral(77)))
-2980 2985 0
-2979 2983 0
77 2985 0
77 -2980 2983 0
77 -2979 2982 0
c ((aux702 + aux704 - aux707)<=0)
2976 -2987 0
2977 -2988 0
2970 -2987 0
2970 2976 -2988 0
2970 2977 -2990 0
2971 -2988 0
2971 2976 -2990 0
2971 2977 -2992 0
c (0<=(aux702 + aux704 - aux707))
-2977 2992 0
-2976 2990 0
-2971 2992 0
-2971 -2977 2990 0
-2971 -2976 2988 0
-2970 2990 0
-2970 -2977 2988 0
-2970 -2976 2987 0
c ((SATLiteral(349) - aux708 + SATLiteral(619))<=0)
-619 -2994 0
-349 -2994 0
-349 -619 -2995 0
c (0<=(SATLiteral(349) - aux708 + SATLiteral(619)))
619 2995 0
349 2995 0
349 619 2994 0
c ((SATLiteral(1024) - aux709 + SATLiteral(889))<=0)
-889 -2997 0
-1024 -2997 0
-1024 -889 -2998 0
c (0<=(SATLiteral(1024) - aux709 + SATLiteral(889)))
889 2998 0
1024 2998 0
1024 889 2997 0
c (( - aux710 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3000 0
-754 -3000 0
-754 -214 -3001 0
c (0<=( - aux710 + SATLiteral(754) + SATLiteral(214)))
214 3001 0
754 3001 0
754 214 3000 0
c (( - aux711 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3003 0
-484 -3003 0
-484 -1159 -3004 0
c (0<=( - aux711 + SATLiteral(484) + SATLiteral(1159)))
1159 3004 0
484 3004 0
484 1159 3003 0
c ((aux711 - aux712 + SATLiteral(79))<=0)
3003 -3006 0
3004 -3007 0
-79 -3006 0
-79 3003 -3007 0
-79 3004 -3009 0
c (0<=(aux711 - aux712 + SATLiteral(79)))
-3004 3009 0
-3003 3007 0
79 3009 0
79 -3004 3007 0
79 -3003 3006 0
c ((aux708 + aux710 - aux713)<=0)
3000 -3011 0
3001 -3012 0
2994 -3011 0
2994 3000 -3012 0
2994 3001 -3014 0
2995 -3012 0
2995 3000 -3014 0
2995 3001 -3016 0
c (0<=(aux708 + aux710 - aux713))
-3001 3016 0
-3000 3014 0
-2995 3016 0
-2995 -3001 3014 0
-2995 -3000 3012 0
-2994 3014 0
-2994 -3001 3012 0
-2994 -3000 3011 0
c ((SATLiteral(351) - aux714 + SATLiteral(621))<=0)
-621 -3018 0
-351 -3018 0
-351 -621 -3019 0
c (0<=(SATLiteral(351) - aux714 + SATLiteral(621)))
621 3019 0
351 3019 0
351 621 3018 0
c ((SATLiteral(1026) - aux715 + SATLiteral(891))<=0)
-891 -3021 0
-1026 -3021 0
-1026 -891 -3022 0
c (0<=(SATLiteral(1026) - aux715 + SATLiteral(891)))
891 3022 0
1026 3022 0
1026 891 3021 0
c (( - aux716 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3024 0
-756 -3024 0
-756 -216 -3025 0
c (0<=( - aux716 + SATLiteral(756) + SATLiteral(216)))
216 3025 0
756 3025 0
756 216 3024 0
c (( - aux717 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3027 0
-486 -3027 0
-486 -1161 -3028 0
c (0<=( - aux717 + SATLiteral(486) + SATLiteral(1161)))
1161 3028 0
486 3028 0
486 1161 3027 0
c ((aux717 - aux718 + SATLiteral(81))<=0)
3027 -3030 0
3028 -3031 0
-81 -3030 0
-81 3027 -3031 0
-81 3028 -3033 0
c (0<=(aux717 - aux718 + SATLiteral(81)))
-3028 3033 0
-3027 3031 0
81 3033 0
81 -3028 3031 0
81 -3027 3030 0
c ((aux714 + aux716 - aux719)<=0)
3024 -3035 0
3025 -3036 0
3018 -3035 0
3018 3024 -3036 0
3018 3025 -3038 0
3019 -3036 0
3019 3024 -3038 0
3019 3025 -3040 0
c (0<=(aux714 + aux716 - aux719))
-3025 3040 0
-3024 3038 0
-3019 3040 0
-3019 -3025 3038 0
-3019 -3024 3036 0
-3018 3038 0
-3018 -3025 3036 0
-3018 -3024 3035 0
c ((SATLiteral(353) - aux720 + SATLiteral(623))<=0)
-623 -3042 0
-353 -3042 0
-353 -623 -3043 0
c (0<=(SATLiteral(353) - aux720 + SATLiteral(623)))
623 3043 0
353 3043 0
353 623 3042 0
c ((SATLiteral(1028) - aux721 + SATLiteral(893))<=0)
-893 -3045 0
-1028 -3045 0
-1028 -893 -3046 0
c (0<=(SATLiteral(1028) - aux721 + SATLiteral(893)))
893 3046 0
1028 3046 0
1028 893 3045 0
c (( - aux722 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3048 0
-758 -3048 0
-758 -218 -3049 0
c (0<=( - aux722 + SATLiteral(758) + SATLiteral(218)))
218 3049 0
758 3049 0
758 218 3048 0
c (( - aux723 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3051 0
-488 -3051 0
-488 -1163 -3052 0
c (0<=( - aux723 + SATLiteral(488) + SATLiteral(1163)))
1163 3052 0
488 3052 0
488 1163 3051 0
c ((aux723 - aux724 + SATLiteral(83))<=0)
3051 -3054 0
3052 -3055 0
-83 -3054 0
-83 3051 -3055 0
-83 3052 -3057 0
c (0<=(aux723 - aux724 + SATLiteral(83)))
-3052 3057 0
-3051 3055 0
83 3057 0
83 -3052 3055 0
83 -3051 3054 0
c ((aux720 + aux722 - aux725)<=0)
3048 -3059 0
3049 -3060 0
3042 -3059 0
3042 3048 -3060 0
3042 3049 -3062 0
3043 -3060 0
3043 3048 -3062 0
3043 3049 -3064 0
c (0<=(aux720 + aux722 - aux725))
-3049 3064 0
-3048 3062 0
-3043 3064 0
-3043 -3049 3062 0
-3043 -3048 3060 0
-3042 3062 0
-3042 -3049 3060 0
-3042 -3048 3059 0
c ((SATLiteral(355) - aux726 + SATLiteral(625))<=0)
-625 -3066 0
-355 -3066 0
-355 -625 -3067 0
c (0<=(SATLiteral(355) - aux726 + SATLiteral(625)))
625 3067 0
355 3067 0
355 625 3066 0
c ((SATLiteral(1030) - aux727 + SATLiteral(895))<=0)
-895 -3069 0
-1030 -3069 0
-1030 -895 -3070 0
c (0<=(SATLiteral(1030) - aux727 + SATLiteral(895)))
895 3070 0
1030 3070 0
1030 895 3069 0
c (( - aux728 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3072 0
-760 -3072 0
-760 -220 -3073 0
c (0<=( - aux728 + SATLiteral(760) + SATLiteral(220)))
220 3073 0
760 3073 0
760 220 3072 0
c (( - aux729 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3075 0
-490 -3075 0
-490 -1165 -3076 0
c (0<=( - aux729 + SATLiteral(490) + SATLiteral(1165)))
1165 3076 0
490 3076 0
490 1165 3075 0
c ((aux729 - aux730 + SATLiteral(85))<=0)
3075 -3078 0
3076 -3079 0
-85 -3078 0
-85 3075 -3079 0
-85 3076 -3081 0
c (0<=(aux729 - aux730 + SATLiteral(85)))
-3076 3081 0
-3075 3079 0
85 3081 0
85 -3076 3079 0
85 -3075 3078 0
c ((aux726 + aux728 - aux731)<=0)
3072 -3083 0
3073 -3084 0
3066 -3083 0
3066 3072 -3084 0
3066 3073 -3086 0
3067 -3084 0
3067 3072 -3086 0
3067 3073 -3088 0
c (0<=(aux726 + aux728 - aux731))
-3073 3088 0
-3072 3086 0
-3067 3088 0
-3067 -3073 3086 0
-3067 -3072 3084 0
-3066 3086 0
-3066 -3073 3084 0
-3066 -3072 3083 0
c ((SATLiteral(357) - aux732 + SATLiteral(627))<=0)
-627 -3090 0
-357 -3090 0
-357 -627 -3091 0
c (0<=(SATLiteral(357) - aux732 + SATLiteral(627)))
627 3091 0
357 3091 0
357 627 3090 0
c ((SATLiteral(1032) - aux733 + SATLiteral(897))<=0)
-897 -3093 0
-1032 -3093 0
-1032 -897 -3094 0
c (0<=(SATLiteral(1032) - aux733 + SATLiteral(897)))
897 3094 0
1032 3094 0
1032 897 3093 0
c (( - aux734 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3096 0
-762 -3096 0
-762 -222 -3097 0
c (0<=( - aux734 + SATLiteral(762) + SATLiteral(222)))
222 3097 0
762 3097 0
762 222 3096 0
c (( - aux735 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3099 0
-492 -3099 0
-492 -1167 -3100 0
c (0<=( - aux735 + SATLiteral(492) + SATLiteral(1167)))
1167 3100 0
492 3100 0
492 1167 3099 0
c ((aux735 - aux736 + SATLiteral(87))<=0)
3099 -3102 0
3100 -3103 0
-87 -3102 0
-87 3099 -3103 0
-87 3100 -3105 0
c (0<=(aux735 - aux736 + SATLiteral(87)))
-3100 3105 0
-3099 3103 0
87 3105 0
87 -3100 3103 0
87 -3099 3102 0
c ((aux732 + aux734 - aux737)<=0)
3096 -3107 0
3097 -3108 0
3090 -3107 0
3090 3096 -3108 0
3090 3097 -3110 0
3091 -3108 0
3091 3096 -3110 0
3091 3097 -3112 0
c (0<=(aux732 + aux734 - aux737))
-3097 3112 0
-3096 3110 0
-3091 3112 0
-3091 -3097 3110 0
-3091 -3096 3108 0
-3090 3110 0
-3090 -3097 3108 0
-3090 -3096 3107 0
c ((SATLiteral(359) - aux738 + SATLiteral(629))<=0)
-629 -3114 0
-359 -3114 0
-359 -629 -3115 0
c (0<=(SATLiteral(359) - aux738 + SATLiteral(629)))
629 3115 0
359 3115 0
359 629 3114 0
c ((SATLiteral(1034) - aux739 + SATLiteral(899))<=0)
-899 -3117 0
-1034 -3117 0
-1034 -899 -3118 0
c (0<=(SATLiteral(1034) - aux739 + SATLiteral(899)))
899 3118 0
1034 3118 0
1034 899 3117 0
c (( - aux740 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3120 0
-764 -3120 0
-764 -224 -3121 0
c (0<=( - aux740 + SATLiteral(764) + SATLiteral(224)))
224 3121 0
764 3121 0
764 224 3120 0
c (( - aux741 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3123 0
-494 -3123 0
-494 -1169 -3124 0
c (0<=( - aux741 + SATLiteral(494) + SATLiteral(1169)))
1169 3124 0
494 3124 0
494 1169 3123 0
c ((aux741 - aux742 + SATLiteral(89))<=0)
3123 -3126 0
3124 -3127 0
-89 -3126 0
-89 3123 -3127 0
-89 3124 -3129 0
c (0<=(aux741 - aux742 + SATLiteral(89)))
-3124 3129 0
-3123 3127 0
89 3129 0
89 -3124 3127 0
89 -3123 3126 0
c ((aux738 + aux740 - aux743)<=0)
3120 -3131 0
3121 -3132 0
3114 -3131 0
3114 3120 -3132 0
3114 3121 -3134 0
3115 -3132 0
3115 3120 -3134 0
3115 3121 -3136 0
c (0<=(aux738 + aux740 - aux743))
-3121 3136 0
-3120 3134 0
-3115 3136 0
-3115 -3121 3134 0
-3115 -3120 3132 0
-3114 3134 0
-3114 -3121 3132 0
-3114 -3120 3131 0
c ((SATLiteral(361) - aux744 + SATLiteral(631))<=0)
-631 -3138 0
-361 -3138 0
-361 -631 -3139 0
c (0<=(SATLiteral(361) - aux744 + SATLiteral(631)))
631 3139 0
361 3139 0
361 631 3138 0
c ((SATLiteral(1036) - aux745 + SATLiteral(901))<=0)
-901 -3141 0
-1036 -3141 0
-1036 -901 -3142 0
c (0<=(SATLiteral(1036) - aux745 + SATLiteral(901)))
901 3142 0
1036 3142 0
1036 901 3141 0
c (( - aux746 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3144 0
-766 -3144 0
-766 -226 -3145 0
c (0<=( - aux746 + SATLiteral(766) + SATLiteral(226)))
226 3145 0
766 3145 0
766 226 3144 0
c (( - aux747 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3147 0
-496 -3147 0
-496 -1171 -3148 0
c (0<=( - aux747 + SATLiteral(496) + SATLiteral(1171)))
1171 3148 0
496 3148 0
496 1171 3147 0
c ((aux747 - aux748 + SATLiteral(91))<=0)
3147 -3150 0
3148 -3151 0
-91 -3150 0
-91 3147 -3151 0
-91 3148 -3153 0
c (0<=(aux747 - aux748 + SATLiteral(91)))
-3148 3153 0
-3147 3151 0
91 3153 0
91 -3148 3151 0
91 -3147 3150 0
c ((aux744 + aux746 - aux749)<=0)
3144 -3155 0
3145 -3156 0
3138 -3155 0
3138 3144 -3156 0
3138 3145 -3158 0
3139 -3156 0
3139 3144 -3158 0
3139 3145 -3160 0
c (0<=(aux744 + aux746 - aux749))
-3145 3160 0
-3144 3158 0
-3139 3160 0
-3139 -3145 3158 0
-3139 -3144 3156 0
-3138 3158 0
-3138 -3145 3156 0
-3138 -3144 3155 0
c ((SATLiteral(-360) - aux750 + SATLiteral(-630))<=0)
630 -3162 0
360 -3162 0
360 630 -3163 0
c (0<=(SATLiteral(-360) - aux750 + SATLiteral(-630)))
-630 3163 0
-360 3163 0
-360 -630 3162 0
c ((SATLiteral(-1035) - aux751 + SATLiteral(-900))<=0)
900 -3165 0
1035 -3165 0
1035 900 -3166 0
c (0<=(SATLiteral(-1035) - aux751 + SATLiteral(-900)))
-900 3166 0
-1035 3166 0
-1035 -900 3165 0
c (( - aux752 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3168 0
765 -3168 0
765 225 -3169 0
c (0<=( - aux752 + SATLiteral(-765) + SATLiteral(-225)))
-225 3169 0
-765 3169 0
-765 -225 3168 0
c (( - aux753 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3171 0
495 -3171 0
495 1170 -3172 0
c (0<=( - aux753 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3172 0
-495 3172 0
-495 -1170 3171 0
c ((aux753 - aux754 + SATLiteral(-90))<=0)
3171 -3174 0
3172 -3175 0
90 -3174 0
90 3171 -3175 0
90 3172 -3177 0
c (0<=(aux753 - aux754 + SATLiteral(-90)))
-3172 3177 0
-3171 3175 0
-90 3177 0
-90 -3172 3175 0
-90 -3171 3174 0
c ((aux750 + aux752 - aux755)<=0)
3168 -3179 0
3169 -3180 0
3162 -3179 0
3162 3168 -3180 0
3162 3169 -3182 0
3163 -3180 0
3163 3168 -3182 0
3163 3169 -3184 0
c (0<=(aux750 + aux752 - aux755))
-3169 3184 0
-3168 3182 0
-3163 3184 0
-3163 -3169 3182 0
-3163 -3168 3180 0
-3162 3182 0
-3162 -3169 3180 0
-3162 -3168 3179 0
c ((SATLiteral(362) - aux756 + SATLiteral(632))<=0)
-632 -3186 0
-362 -3186 0
-362 -632 -3187 0
c (0<=(SATLiteral(362) - aux756 + SATLiteral(632)))
632 3187 0
362 3187 0
362 632 3186 0
c ((SATLiteral(1037) - aux757 + SATLiteral(902))<=0)
-902 -3189 0
-1037 -3189 0
-1037 -902 -3190 0
c (0<=(SATLiteral(1037) - aux757 + SATLiteral(902)))
902 3190 0
1037 3190 0
1037 902 3189 0
c (( - aux758 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3192 0
-767 -3192 0
-767 -227 -3193 0
c (0<=( - aux758 + SATLiteral(767) + SATLiteral(227)))
227 3193 0
767 3193 0
767 227 3192 0
c (( - aux759 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3195 0
-497 -3195 0
-497 -1172 -3196 0
c (0<=( - aux759 + SATLiteral(497) + SATLiteral(1172)))
1172 3196 0
497 3196 0
497 1172 3195 0
c ((aux759 - aux760 + SATLiteral(92))<=0)
3195 -3198 0
3196 -3199 0
-92 -3198 0
-92 3195 -3199 0
-92 3196 -3201 0
c (0<=(aux759 - aux760 + SATLiteral(92)))
-3196 3201 0
-3195 3199 0
92 3201 0
92 -3196 3199 0
92 -3195 3198 0
c ((aux756 + aux758 - aux761)<=0)
3192 -3203 0
3193 -3204 0
3186 -3203 0
3186 3192 -3204 0
3186 3193 -3206 0
3187 -3204 0
3187 3192 -3206 0
3187 3193 -3208 0
c (0<=(aux756 + aux758 - aux761))
-3193 3208 0
-3192 3206 0
-3187 3208 0
-3187 -3193 3206 0
-3187 -3192 3204 0
-3186 3206 0
-3186 -3193 3204 0
-3186 -3192 3203 0
c ((SATLiteral(364) - aux762 + SATLiteral(634))<=0)
-634 -3210 0
-364 -3210 0
-364 -634 -3211 0
c (0<=(SATLiteral(364) - aux762 + SATLiteral(634)))
634 3211 0
364 3211 0
364 634 3210 0
c ((SATLiteral(1039) - aux763 + SATLiteral(903))<=0)
-903 -3213 0
-1039 -3213 0
-1039 -903 -3214 0
c (0<=(SATLiteral(1039) - aux763 + SATLiteral(903)))
903 3214 0
1039 3214 0
1039 903 3213 0
c (( - aux764 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3216 0
-769 -3216 0
-769 -229 -3217 0
c (0<=( - aux764 + SATLiteral(769) + SATLiteral(229)))
229 3217 0
769 3217 0
769 229 3216 0
c (( - aux765 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3219 0
-499 -3219 0
-499 -1174 -3220 0
c (0<=( - aux765 + SATLiteral(499) + SATLiteral(1174)))
1174 3220 0
499 3220 0
499 1174 3219 0
c ((aux765 - aux766 + SATLiteral(94))<=0)
3219 -3222 0
3220 -3223 0
-94 -3222 0
-94 3219 -3223 0
-94 3220 -3225 0
c (0<=(aux765 - aux766 + SATLiteral(94)))
-3220 3225 0
-3219 3223 0
94 3225 0
94 -3220 3223 0
94 -3219 3222 0
c ((aux762 + aux764 - aux767)<=0)
3216 -3227 0
3217 -3228 0
3210 -3227 0
3210 3216 -3228 0
3210 3217 -3230 0
3211 -3228 0
3211 3216 -3230 0
3211 3217 -3232 0
c (0<=(aux762 + aux764 - aux767))
-3217 3232 0
-3216 3230 0
-3211 3232 0
-3211 -3217 3230 0
-3211 -3216 3228 0
-3210 3230 0
-3210 -3217 3228 0
-3210 -3216 3227 0
c ((SATLiteral(366) - aux768 + SATLiteral(636))<=0)
-636 -3234 0
-366 -3234 0
-366 -636 -3235 0
c (0<=(SATLiteral(366) - aux768 + SATLiteral(636)))
636 3235 0
366 3235 0
366 636 3234 0
c ((SATLiteral(1041) - aux769 + SATLiteral(904))<=0)
-904 -3237 0
-1041 -3237 0
-1041 -904 -3238 0
c (0<=(SATLiteral(1041) - aux769 + SATLiteral(904)))
904 3238 0
1041 3238 0
1041 904 3237 0
c (( - aux770 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3240 0
-771 -3240 0
-771 -231 -3241 0
c (0<=( - aux770 + SATLiteral(771) + SATLiteral(231)))
231 3241 0
771 3241 0
771 231 3240 0
c (( - aux771 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3243 0
-501 -3243 0
-501 -1176 -3244 0
c (0<=( - aux771 + SATLiteral(501) + SATLiteral(1176)))
1176 3244 0
501 3244 0
501 1176 3243 0
c ((aux771 - aux772 + SATLiteral(96))<=0)
3243 -3246 0
3244 -3247 0
-96 -3246 0
-96 3243 -3247 0
-96 3244 -3249 0
c (0<=(aux771 - aux772 + SATLiteral(96)))
-3244 3249 0
-3243 3247 0
96 3249 0
96 -3244 3247 0
96 -3243 3246 0
c ((aux768 + aux770 - aux773)<=0)
3240 -3251 0
3241 -3252 0
3234 -3251 0
3234 3240 -3252 0
3234 3241 -3254 0
3235 -3252 0
3235 3240 -3254 0
3235 3241 -3256 0
c (0<=(aux768 + aux770 - aux773))
-3241 3256 0
-3240 3254 0
-3235 3256 0
-3235 -3241 3254 0
-3235 -3240 3252 0
-3234 3254 0
-3234 -3241 3252 0
-3234 -3240 3251 0
c ((SATLiteral(368) - aux774 + SATLiteral(638))<=0)
-638 -3258 0
-368 -3258 0
-368 -638 -3259 0
c (0<=(SATLiteral(368) - aux774 + SATLiteral(638)))
638 3259 0
368 3259 0
368 638 3258 0
c ((SATLiteral(1043) - aux775 + SATLiteral(905))<=0)
-905 -3261 0
-1043 -3261 0
-1043 -905 -3262 0
c (0<=(SATLiteral(1043) - aux775 + SATLiteral(905)))
905 3262 0
1043 3262 0
1043 905 3261 0
c (( - aux776 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3264 0
-773 -3264 0
-773 -233 -3265 0
c (0<=( - aux776 + SATLiteral(773) + SATLiteral(233)))
233 3265 0
773 3265 0
773 233 3264 0
c (( - aux777 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3267 0
-503 -3267 0
-503 -1178 -3268 0
c (0<=( - aux777 + SATLiteral(503) + SATLiteral(1178)))
1178 3268 0
503 3268 0
503 1178 3267 0
c ((aux777 - aux778 + SATLiteral(98))<=0)
3267 -3270 0
3268 -3271 0
-98 -3270 0
-98 3267 -3271 0
-98 3268 -3273 0
c (0<=(aux777 - aux778 + SATLiteral(98)))
-3268 3273 0
-3267 3271 0
98 3273 0
98 -3268 3271 0
98 -3267 3270 0
c ((aux774 + aux776 - aux779)<=0)
3264 -3275 0
3265 -3276 0
3258 -3275 0
3258 3264 -3276 0
3258 3265 -3278 0
3259 -3276 0
3259 3264 -3278 0
3259 3265 -3280 0
c (0<=(aux774 + aux776 - aux779))
-3265 3280 0
-3264 3278 0
-3259 3280 0
-3259 -3265 3278 0
-3259 -3264 3276 0
-3258 3278 0
-3258 -3265 3276 0
-3258 -3264 3275 0
c ((SATLiteral(370) - aux780 + SATLiteral(640))<=0)
-640 -3282 0
-370 -3282 0
-370 -640 -3283 0
c (0<=(SATLiteral(370) - aux780 + SATLiteral(640)))
640 3283 0
370 3283 0
370 640 3282 0
c ((SATLiteral(1045) - aux781 + SATLiteral(906))<=0)
-906 -3285 0
-1045 -3285 0
-1045 -906 -3286 0
c (0<=(SATLiteral(1045) - aux781 + SATLiteral(906)))
906 3286 0
1045 3286 0
1045 906 3285 0
c (( - aux782 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3288 0
-775 -3288 0
-775 -235 -3289 0
c (0<=( - aux782 + SATLiteral(775) + SATLiteral(235)))
235 3289 0
775 3289 0
775 235 3288 0
c (( - aux783 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3291 0
-505 -3291 0
-505 -1180 -3292 0
c (0<=( - aux783 + SATLiteral(505) + SATLiteral(1180)))
1180 3292 0
505 3292 0
505 1180 3291 0
c ((aux783 - aux784 + SATLiteral(100))<=0)
3291 -3294 0
3292 -3295 0
-100 -3294 0
-100 3291 -3295 0
-100 3292 -3297 0
c (0<=(aux783 - aux784 + SATLiteral(100)))
-3292 3297 0
-3291 3295 0
100 3297 0
100 -3292 3295 0
100 -3291 3294 0
c ((aux780 + aux782 - aux785)<=0)
3288 -3299 0
3289 -3300 0
3282 -3299 0
3282 3288 -3300 0
3282 3289 -3302 0
3283 -3300 0
3283 3288 -3302 0
3283 3289 -3304 0
c (0<=(aux780 + aux782 - aux785))
-3289 3304 0
-3288 3302 0
-3283 3304 0
-3283 -3289 3302 0
-3283 -3288 3300 0
-3282 3302 0
-3282 -3289 3300 0
-3282 -3288 3299 0
c ((SATLiteral(372) - aux786 + SATLiteral(642))<=0)
-642 -3306 0
-372 -3306 0
-372 -642 -3307 0
c (0<=(SATLiteral(372) - aux786 + SATLiteral(642)))
642 3307 0
372 3307 0
372 642 3306 0
c ((SATLiteral(1047) - aux787 + SATLiteral(907))<=0)
-907 -3309 0
-1047 -3309 0
-1047 -907 -3310 0
c (0<=(SATLiteral(1047) - aux787 + SATLiteral(907)))
907 3310 0
1047 3310 0
1047 907 3309 0
c (( - aux788 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3312 0
-777 -3312 0
-777 -237 -3313 0
c (0<=( - aux788 + SATLiteral(777) + SATLiteral(237)))
237 3313 0
777 3313 0
777 237 3312 0
c (( - aux789 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3315 0
-507 -3315 0
-507 -1182 -3316 0
c (0<=( - aux789 + SATLiteral(507) + SATLiteral(1182)))
1182 3316 0
507 3316 0
507 1182 3315 0
c ((aux789 - aux790 + SATLiteral(102))<=0)
3315 -3318 0
3316 -3319 0
-102 -3318 0
-102 3315 -3319 0
-102 3316 -3321 0
c (0<=(aux789 - aux790 + SATLiteral(102)))
-3316 3321 0
-3315 3319 0
102 3321 0
102 -3316 3319 0
102 -3315 3318 0
c ((aux786 + aux788 - aux791)<=0)
3312 -3323 0
3313 -3324 0
3306 -3323 0
3306 3312 -3324 0
3306 3313 -3326 0
3307 -3324 0
3307 3312 -3326 0
3307 3313 -3328 0
c (0<=(aux786 + aux788 - aux791))
-3313 3328 0
-3312 3326 0
-3307 3328 0
-3307 -3313 3326 0
-3307 -3312 3324 0
-3306 3326 0
-3306 -3313 3324 0
-3306 -3312 3323 0
c ((SATLiteral(374) - aux792 + SATLiteral(644))<=0)
-644 -3330 0
-374 -3330 0
-374 -644 -3331 0
c (0<=(SATLiteral(374) - aux792 + SATLiteral(644)))
644 3331 0
374 3331 0
374 644 3330 0
c ((SATLiteral(1049) - aux793 + SATLiteral(908))<=0)
-908 -3333 0
-1049 -3333 0
-1049 -908 -3334 0
c (0<=(SATLiteral(1049) - aux793 + SATLiteral(908)))
908 3334 0
1049 3334 0
1049 908 3333 0
c (( - aux794 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3336 0
-779 -3336 0
-779 -239 -3337 0
c (0<=( - aux794 + SATLiteral(779) + SATLiteral(239)))
239 3337 0
779 3337 0
779 239 3336 0
c (( - aux795 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3339 0
-509 -3339 0
-509 -1184 -3340 0
c (0<=( - aux795 + SATLiteral(509) + SATLiteral(1184)))
1184 3340 0
509 3340 0
509 1184 3339 0
c ((aux795 - aux796 + SATLiteral(104))<=0)
3339 -3342 0
3340 -3343 0
-104 -3342 0
-104 3339 -3343 0
-104 3340 -3345 0
c (0<=(aux795 - aux796 + SATLiteral(104)))
-3340 3345 0
-3339 3343 0
104 3345 0
104 -3340 3343 0
104 -3339 3342 0
c ((aux792 + aux794 - aux797)<=0)
3336 -3347 0
3337 -3348 0
3330 -3347 0
3330 3336 -3348 0
3330 3337 -3350 0
3331 -3348 0
3331 3336 -3350 0
3331 3337 -3352 0
c (0<=(aux792 + aux794 - aux797))
-3337 3352 0
-3336 3350 0
-3331 3352 0
-3331 -3337 3350 0
-3331 -3336 3348 0
-3330 3350 0
-3330 -3337 3348 0
-3330 -3336 3347 0
c ((SATLiteral(376) - aux798 + SATLiteral(646))<=0)
-646 -3354 0
-376 -3354 0
-376 -646 -3355 0
c (0<=(SATLiteral(376) - aux798 + SATLiteral(646)))
646 3355 0
376 3355 0
376 646 3354 0
c ((SATLiteral(1051) - aux799 + SATLiteral(909))<=0)
-909 -3357 0
-1051 -3357 0
-1051 -909 -3358 0
c (0<=(SATLiteral(1051) - aux799 + SATLiteral(909)))
909 3358 0
1051 3358 0
1051 909 3357 0
c (( - aux800 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3360 0
-781 -3360 0
-781 -241 -3361 0
c (0<=( - aux800 + SATLiteral(781) + SATLiteral(241)))
241 3361 0
781 3361 0
781 241 3360 0
c (( - aux801 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3363 0
-511 -3363 0
-511 -1186 -3364 0
c (0<=( - aux801 + SATLiteral(511) + SATLiteral(1186)))
1186 3364 0
511 3364 0
511 1186 3363 0
c ((aux801 - aux802 + SATLiteral(106))<=0)
3363 -3366 0
3364 -3367 0
-106 -3366 0
-106 3363 -3367 0
-106 3364 -3369 0
c (0<=(aux801 - aux802 + SATLiteral(106)))
-3364 3369 0
-3363 3367 0
106 3369 0
106 -3364 3367 0
106 -3363 3366 0
c ((aux798 + aux800 - aux803)<=0)
3360 -3371 0
3361 -3372 0
3354 -3371 0
3354 3360 -3372 0
3354 3361 -3374 0
3355 -3372 0
3355 3360 -3374 0
3355 3361 -3376 0
c (0<=(aux798 + aux800 - aux803))
-3361 3376 0
-3360 3374 0
-3355 3376 0
-3355 -3361 3374 0
-3355 -3360 3372 0
-3354 3374 0
-3354 -3361 3372 0
-3354 -3360 3371 0
c ((SATLiteral(-375) - aux804 + SATLiteral(-645))<=0)
645 -3378 0
375 -3378 0
375 645 -3379 0
c (0<=(SATLiteral(-375) - aux804 + SATLiteral(-645)))
-645 3379 0
-375 3379 0
-375 -645 3378 0
c ((SATLiteral(-1050) - aux805 + SATLiteral(910))<=0)
-910 -3381 0
1050 -3381 0
1050 -910 -3382 0
c (0<=(SATLiteral(-1050) - aux805 + SATLiteral(910)))
910 3382 0
-1050 3382 0
-1050 910 3381 0
c (( - aux806 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3384 0
780 -3384 0
780 240 -3385 0
c (0<=( - aux806 + SATLiteral(-780) + SATLiteral(-240)))
-240 3385 0
-780 3385 0
-780 -240 3384 0
c (( - aux807 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3387 0
510 -3387 0
510 1185 -3388 0
c (0<=( - aux807 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3388 0
-510 3388 0
-510 -1185 3387 0
c ((aux807 - aux808 + SATLiteral(-105))<=0)
3387 -3390 0
3388 -3391 0
105 -3390 0
105 3387 -3391 0
105 3388 -3393 0
c (0<=(aux807 - aux808 + SATLiteral(-105)))
-3388 3393 0
-3387 3391 0
-105 3393 0
-105 -3388 3391 0
-105 -3387 3390 0
c ((aux804 + aux806 - aux809)<=0)
3384 -3395 0
3385 -3396 0
3378 -3395 0
3378 3384 -3396 0
3378 3385 -3398 0
3379 -3396 0
3379 3384 -3398 0
3379 3385 -3400 0
c (0<=(aux804 + aux806 - aux809))
-3385 3400 0
-3384 3398 0
-3379 3400 0
-3379 -3385 3398 0
-3379 -3384 3396 0
-3378 3398 0
-3378 -3385 3396 0
-3378 -3384 3395 0
c ((SATLiteral(377) - aux810 + SATLiteral(647))<=0)
-647 -3402 0
-377 -3402 0
-377 -647 -3403 0
c (0<=(SATLiteral(377) - aux810 + SATLiteral(647)))
647 3403 0
377 3403 0
377 647 3402 0
c ((SATLiteral(1052) - aux811 + SATLiteral(917))<=0)
-917 -3405 0
-1052 -3405 0
-1052 -917 -3406 0
c (0<=(SATLiteral(1052) - aux811 + SATLiteral(917)))
917 3406 0
1052 3406 0
1052 917 3405 0
c (( - aux812 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3408 0
-782 -3408 0
-782 -242 -3409 0
c (0<=( - aux812 + SATLiteral(782) + SATLiteral(242)))
242 3409 0
782 3409 0
782 242 3408 0
c (( - aux813 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3411 0
-512 -3411 0
-512 -1187 -3412 0
c (0<=( - aux813 + SATLiteral(512) + SATLiteral(1187)))
1187 3412 0
512 3412 0
512 1187 3411 0
c ((aux813 - aux814 + SATLiteral(107))<=0)
3411 -3414 0
3412 -3415 0
-107 -3414 0
-107 3411 -3415 0
-107 3412 -3417 0
c (0<=(aux813 - aux814 + SATLiteral(107)))
-3412 3417 0
-3411 3415 0
107 3417 0
107 -3412 3415 0
107 -3411 3414 0
c ((aux810 + aux812 - aux815)<=0)
3408 -3419 0
3409 -3420 0
3402 -3419 0
3402 3408 -3420 0
3402 3409 -3422 0
3403 -3420 0
3403 3408 -3422 0
3403 3409 -3424 0
c (0<=(aux810 + aux812 - aux815))
-3409 3424 0
-3408 3422 0
-3403 3424 0
-3403 -3409 3422 0
-3403 -3408 3420 0
-3402 3422 0
-3402 -3409 3420 0
-3402 -3408 3419 0
c ((SATLiteral(379) - aux816 + SATLiteral(649))<=0)
-649 -3426 0
-379 -3426 0
-379 -649 -3427 0
c (0<=(SATLiteral(379) - aux816 + SATLiteral(649)))
649 3427 0
379 3427 0
379 649 3426 0
c ((SATLiteral(1054) - aux817 + SATLiteral(919))<=0)
-919 -3429 0
-1054 -3429 0
-1054 -919 -3430 0
c (0<=(SATLiteral(1054) - aux817 + SATLiteral(919)))
919 3430 0
1054 3430 0
1054 919 3429 0
c (( - aux818 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3432 0
-784 -3432 0
-784 -244 -3433 0
c (0<=( - aux818 + SATLiteral(784) + SATLiteral(244)))
244 3433 0
784 3433 0
784 244 3432 0
c (( - aux819 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3435 0
-514 -3435 0
-514 -1189 -3436 0
c (0<=( - aux819 + SATLiteral(514) + SATLiteral(1189)))
1189 3436 0
514 3436 0
514 1189 3435 0
c ((aux819 - aux820 + SATLiteral(109))<=0)
3435 -3438 0
3436 -3439 0
-109 -3438 0
-109 3435 -3439 0
-109 3436 -3441 0
c (0<=(aux819 - aux820 + SATLiteral(109)))
-3436 3441 0
-3435 3439 0
109 3441 0
109 -3436 3439 0
109 -3435 3438 0
c ((aux816 + aux818 - aux821)<=0)
3432 -3443 0
3433 -3444 0
3426 -3443 0
3426 3432 -3444 0
3426 3433 -3446 0
3427 -3444 0
3427 3432 -3446 0
3427 3433 -3448 0
c (0<=(aux816 + aux818 - aux821))
-3433 3448 0
-3432 3446 0
-3427 3448 0
-3427 -3433 3446 0
-3427 -3432 3444 0
-3426 3446 0
-3426 -3433 3444 0
-3426 -3432 3443 0
c ((SATLiteral(381) - aux822 + SATLiteral(651))<=0)
-651 -3450 0
-381 -3450 0
-381 -651 -3451 0
c (0<=(SATLiteral(381) - aux822 + SATLiteral(651)))
651 3451 0
381 3451 0
381 651 3450 0
c ((SATLiteral(1056) - aux823 + SATLiteral(921))<=0)
-921 -3453 0
-1056 -3453 0
-1056 -921 -3454 0
c (0<=(SATLiteral(1056) - aux823 + SATLiteral(921)))
921 3454 0
1056 3454 0
1056 921 3453 0
c (( - aux824 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3456 0
-786 -3456 0
-786 -246 -3457 0
c (0<=( - aux824 + SATLiteral(786) + SATLiteral(246)))
246 3457 0
786 3457 0
786 246 3456 0
c (( - aux825 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3459 0
-516 -3459 0
-516 -1191 -3460 0
c (0<=( - aux825 + SATLiteral(516) + SATLiteral(1191)))
1191 3460 0
516 3460 0
516 1191 3459 0
c ((aux825 - aux826 + SATLiteral(111))<=0)
3459 -3462 0
3460 -3463 0
-111 -3462 0
-111 3459 -3463 0
-111 3460 -3465 0
c (0<=(aux825 - aux826 + SATLiteral(111)))
-3460 3465 0
-3459 3463 0
111 3465 0
111 -3460 3463 0
111 -3459 3462 0
c ((aux822 + aux824 - aux827)<=0)
3456 -3467 0
3457 -3468 0
3450 -3467 0
3450 3456 -3468 0
3450 3457 -3470 0
3451 -3468 0
3451 3456 -3470 0
3451 3457 -3472 0
c (0<=(aux822 + aux824 - aux827))
-3457 3472 0
-3456 3470 0
-3451 3472 0
-3451 -3457 3470 0
-3451 -3456 3468 0
-3450 3470 0
-3450 -3457 3468 0
-3450 -3456 3467 0
c ((SATLiteral(383) - aux828 + SATLiteral(653))<=0)
-653 -3474 0
-383 -3474 0
-383 -653 -3475 0
c (0<=(SATLiteral(383) - aux828 + SATLiteral(653)))
653 3475 0
383 3475 0
383 653 3474 0
c ((SATLiteral(1058) - aux829 + SATLiteral(923))<=0)
-923 -3477 0
-1058 -3477 0
-1058 -923 -3478 0
c (0<=(SATLiteral(1058) - aux829 + SATLiteral(923)))
923 3478 0
1058 3478 0
1058 923 3477 0
c (( - aux830 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3480 0
-788 -3480 0
-788 -248 -3481 0
c (0<=( - aux830 + SATLiteral(788) + SATLiteral(248)))
248 3481 0
788 3481 0
788 248 3480 0
c (( - aux831 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3483 0
-518 -3483 0
-518 -1193 -3484 0
c (0<=( - aux831 + SATLiteral(518) + SATLiteral(1193)))
1193 3484 0
518 3484 0
518 1193 3483 0
c ((aux831 - aux832 + SATLiteral(113))<=0)
3483 -3486 0
3484 -3487 0
-113 -3486 0
-113 3483 -3487 0
-113 3484 -3489 0
c (0<=(aux831 - aux832 + SATLiteral(113)))
-3484 3489 0
-3483 3487 0
113 3489 0
113 -3484 3487 0
113 -3483 3486 0
c ((aux828 + aux830 - aux833)<=0)
3480 -3491 0
3481 -3492 0
3474 -3491 0
3474 3480 -3492 0
3474 3481 -3494 0
3475 -3492 0
3475 3480 -3494 0
3475 3481 -3496 0
c (0<=(aux828 + aux830 - aux833))
-3481 3496 0
-3480 3494 0
-3475 3496 0
-3475 -3481 3494 0
-3475 -3480 3492 0
-3474 3494 0
-3474 -3481 3492 0
-3474 -3480 3491 0
c ((SATLiteral(385) - aux834 + SATLiteral(655))<=0)
-655 -3498 0
-385 -3498 0
-385 -655 -3499 0
c (0<=(SATLiteral(385) - aux834 + SATLiteral(655)))
655 3499 0
385 3499 0
385 655 3498 0
c ((SATLiteral(1060) - aux835 + SATLiteral(925))<=0)
-925 -3501 0
-1060 -3501 0
-1060 -925 -3502 0
c (0<=(SATLiteral(1060) - aux835 + SATLiteral(925)))
925 3502 0
1060 3502 0
1060 925 3501 0
c (( - aux836 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3504 0
-790 -3504 0
-790 -250 -3505 0
c (0<=( - aux836 + SATLiteral(790) + SATLiteral(250)))
250 3505 0
790 3505 0
790 250 3504 0
c (( - aux837 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3507 0
-520 -3507 0
-520 -1195 -3508 0
c (0<=( - aux837 + SATLiteral(520) + SATLiteral(1195)))
1195 3508 0
520 3508 0
520 1195 3507 0
c ((aux837 - aux838 + SATLiteral(115))<=0)
3507 -3510 0
3508 -3511 0
-115 -3510 0
-115 3507 -3511 0
-115 3508 -3513 0
c (0<=(aux837 - aux838 + SATLiteral(115)))
-3508 3513 0
-3507 3511 0
115 3513 0
115 -3508 3511 0
115 -3507 3510 0
c ((aux834 + aux836 - aux839)<=0)
3504 -3515 0
3505 -3516 0
3498 -3515 0
3498 3504 -3516 0
3498 3505 -3518 0
3499 -3516 0
3499 3504 -3518 0
3499 3505 -3520 0
c (0<=(aux834 + aux836 - aux839))
-3505 3520 0
-3504 3518 0
-3499 3520 0
-3499 -3505 3518 0
-3499 -3504 3516 0
-3498 3518 0
-3498 -3505 3516 0
-3498 -3504 3515 0
c ((SATLiteral(387) - aux840 + SATLiteral(657))<=0)
-657 -3522 0
-387 -3522 0
-387 -657 -3523 0
c (0<=(SATLiteral(387) - aux840 + SATLiteral(657)))
657 3523 0
387 3523 0
387 657 3522 0
c ((SATLiteral(1062) - aux841 + SATLiteral(927))<=0)
-927 -3525 0
-1062 -3525 0
-1062 -927 -3526 0
c (0<=(SATLiteral(1062) - aux841 + SATLiteral(927)))
927 3526 0
1062 3526 0
1062 927 3525 0
c (( - aux842 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3528 0
-792 -3528 0
-792 -252 -3529 0
c (0<=( - aux842 + SATLiteral(792) + SATLiteral(252)))
252 3529 0
792 3529 0
792 252 3528 0
c (( - aux843 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3531 0
-522 -3531 0
-522 -1197 -3532 0
c (0<=( - aux843 + SATLiteral(522) + SATLiteral(1197)))
1197 3532 0
522 3532 0
522 1197 3531 0
c ((aux843 - aux844 + SATLiteral(117))<=0)
3531 -3534 0
3532 -3535 0
-117 -3534 0
-117 3531 -3535 0
-117 3532 -3537 0
c (0<=(aux843 - aux844 + SATLiteral(117)))
-3532 3537 0
-3531 3535 0
117 3537 0
117 -3532 3535 0
117 -3531 3534 0
c ((aux840 + aux842 - aux845)<=0)
3528 -3539 0
3529 -3540 0
3522 -3539 0
3522 3528 -3540 0
3522 3529 -3542 0
3523 -3540 0
3523 3528 -3542 0
3523 3529 -3544 0
c (0<=(aux840 + aux842 - aux845))
-3529 3544 0
-3528 3542 0
-3523 3544 0
-3523 -3529 3542 0
-3523 -3528 3540 0
-3522 3542 0
-3522 -3529 3540 0
-3522 -3528 3539 0
c ((SATLiteral(389) - aux846 + SATLiteral(659))<=0)
-659 -3546 0
-389 -3546 0
-389 -659 -3547 0
c (0<=(SATLiteral(389) - aux846 + SATLiteral(659)))
659 3547 0
389 3547 0
389 659 3546 0
c ((SATLiteral(1064) - aux847 + SATLiteral(929))<=0)
-929 -3549 0
-1064 -3549 0
-1064 -929 -3550 0
c (0<=(SATLiteral(1064) - aux847 + SATLiteral(929)))
929 3550 0
1064 3550 0
1064 929 3549 0
c (( - aux848 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3552 0
-794 -3552 0
-794 -254 -3553 0
c (0<=( - aux848 + SATLiteral(794) + SATLiteral(254)))
254 3553 0
794 3553 0
794 254 3552 0
c (( - aux849 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3555 0
-524 -3555 0
-524 -1199 -3556 0
c (0<=( - aux849 + SATLiteral(524) + SATLiteral(1199)))
1199 3556 0
524 3556 0
524 1199 3555 0
c ((aux849 - aux850 + SATLiteral(119))<=0)
3555 -3558 0
3556 -3559 0
-119 -3558 0
-119 3555 -3559 0
-119 3556 -3561 0
c (0<=(aux849 - aux850 + SATLiteral(119)))
-3556 3561 0
-3555 3559 0
119 3561 0
119 -3556 3559 0
119 -3555 3558 0
c ((aux846 + aux848 - aux851)<=0)
3552 -3563 0
3553 -3564 0
3546 -3563 0
3546 3552 -3564 0
3546 3553 -3566 0
3547 -3564 0
3547 3552 -3566 0
3547 3553 -3568 0
c (0<=(aux846 + aux848 - aux851))
-3553 3568 0
-3552 3566 0
-3547 3568 0
-3547 -3553 3566 0
-3547 -3552 3564 0
-3546 3566 0
-3546 -3553 3564 0
-3546 -3552 3563 0
c ((SATLiteral(391) - aux852 + SATLiteral(661))<=0)
-661 -3570 0
-391 -3570 0
-391 -661 -3571 0
c (0<=(SATLiteral(391) - aux852 + SATLiteral(661)))
661 3571 0
391 3571 0
391 661 3570 0
c ((SATLiteral(1066) - aux853 + SATLiteral(931))<=0)
-931 -3573 0
-1066 -3573 0
-1066 -931 -3574 0
c (0<=(SATLiteral(1066) - aux853 + SATLiteral(931)))
931 3574 0
1066 3574 0
1066 931 3573 0
c (( - aux854 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3576 0
-796 -3576 0
-796 -256 -3577 0
c (0<=( - aux854 + SATLiteral(796) + SATLiteral(256)))
256 3577 0
796 3577 0
796 256 3576 0
c (( - aux855 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3579 0
-526 -3579 0
-526 -1201 -3580 0
c (0<=( - aux855 + SATLiteral(526) + SATLiteral(1201)))
1201 3580 0
526 3580 0
526 1201 3579 0
c ((aux855 - aux856 + SATLiteral(121))<=0)
3579 -3582 0
3580 -3583 0
-121 -3582 0
-121 3579 -3583 0
-121 3580 -3585 0
c (0<=(aux855 - aux856 + SATLiteral(121)))
-3580 3585 0
-3579 3583 0
121 3585 0
121 -3580 3583 0
121 -3579 3582 0
c ((aux852 + aux854 - aux857)<=0)
3576 -3587 0
3577 -3588 0
3570 -3587 0
3570 3576 -3588 0
3570 3577 -3590 0
3571 -3588 0
3571 3576 -3590 0
3571 3577 -3592 0
c (0<=(aux852 + aux854 - aux857))
-3577 3592 0
-3576 3590 0
-3571 3592 0
-3571 -3577 3590 0
-3571 -3576 3588 0
-3570 3590 0
-3570 -3577 3588 0
-3570 -3576 3587 0
c ((SATLiteral(-390) - aux858 + SATLiteral(-660))<=0)
660 -3594 0
390 -3594 0
390 660 -3595 0
c (0<=(SATLiteral(-390) - aux858 + SATLiteral(-660)))
-660 3595 0
-390 3595 0
-390 -660 3594 0
c ((SATLiteral(-1065) - aux859 + SATLiteral(-930))<=0)
930 -3597 0
1065 -3597 0
1065 930 -3598 0
c (0<=(SATLiteral(-1065) - aux859 + SATLiteral(-930)))
-930 3598 0
-1065 3598 0
-1065 -930 3597 0
c (( - aux860 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3600 0
795 -3600 0
795 255 -3601 0
c (0<=( - aux860 + SATLiteral(-795) + SATLiteral(-255)))
-255 3601 0
-795 3601 0
-795 -255 3600 0
c (( - aux861 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3603 0
525 -3603 0
525 1200 -3604 0
c (0<=( - aux861 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3604 0
-525 3604 0
-525 -1200 3603 0
c ((aux861 - aux862 + SATLiteral(-120))<=0)
3603 -3606 0
3604 -3607 0
120 -3606 0
120 3603 -3607 0
120 3604 -3609 0
c (0<=(aux861 - aux862 + SATLiteral(-120)))
-3604 3609 0
-3603 3607 0
-120 3609 0
-120 -3604 3607 0
-120 -3603 3606 0
c ((aux858 + aux860 - aux863)<=0)
3600 -3611 0
3601 -3612 0
3594 -3611 0
3594 3600 -3612 0
3594 3601 -3614 0
3595 -3612 0
3595 3600 -3614 0
3595 3601 -3616 0
c (0<=(aux858 + aux860 - aux863))
-3601 3616 0
-3600 3614 0
-3595 3616 0
-3595 -3601 3614 0
-3595 -3600 3612 0
-3594 3614 0
-3594 -3601 3612 0
-3594 -3600 3611 0
c ((SATLiteral(392) - aux864 + SATLiteral(662))<=0)
-662 -3618 0
-392 -3618 0
-392 -662 -3619 0
c (0<=(SATLiteral(392) - aux864 + SATLiteral(662)))
662 3619 0
392 3619 0
392 662 3618 0
c ((SATLiteral(1067) - aux865 + SATLiteral(932))<=0)
-932 -3621 0
-1067 -3621 0
-1067 -932 -3622 0
c (0<=(SATLiteral(1067) - aux865 + SATLiteral(932)))
932 3622 0
1067 3622 0
1067 932 3621 0
c (( - aux866 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3624 0
-797 -3624 0
-797 -257 -3625 0
c (0<=( - aux866 + SATLiteral(797) + SATLiteral(257)))
257 3625 0
797 3625 0
797 257 3624 0
c (( - aux867 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3627 0
-527 -3627 0
-527 -1202 -3628 0
c (0<=( - aux867 + SATLiteral(527) + SATLiteral(1202)))
1202 3628 0
527 3628 0
527 1202 3627 0
c ((aux867 - aux868 + SATLiteral(122))<=0)
3627 -3630 0
3628 -3631 0
-122 -3630 0
-122 3627 -3631 0
-122 3628 -3633 0
c (0<=(aux867 - aux868 + SATLiteral(122)))
-3628 3633 0
-3627 3631 0
122 3633 0
122 -3628 3631 0
122 -3627 3630 0
c ((aux864 + aux866 - aux869)<=0)
3624 -3635 0
3625 -3636 0
3618 -3635 0
3618 3624 -3636 0
3618 3625 -3638 0
3619 -3636 0
3619 3624 -3638 0
3619 3625 -3640 0
c (0<=(aux864 + aux866 - aux869))
-3625 3640 0
-3624 3638 0
-3619 3640 0
-3619 -3625 3638 0
-3619 -3624 3636 0
-3618 3638 0
-3618 -3625 3636 0
-3618 -3624 3635 0
c ((SATLiteral(394) - aux870 + SATLiteral(664))<=0)
-664 -3642 0
-394 -3642 0
-394 -664 -3643 0
c (0<=(SATLiteral(394) - aux870 + SATLiteral(664)))
664 3643 0
394 3643 0
394 664 3642 0
c ((SATLiteral(1068) - aux871 + SATLiteral(934))<=0)
-934 -3645 0
-1068 -3645 0
-1068 -934 -3646 0
c (0<=(SATLiteral(1068) - aux871 + SATLiteral(934)))
934 3646 0
1068 3646 0
1068 934 3645 0
c (( - aux872 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3648 0
-799 -3648 0
-799 -259 -3649 0
c (0<=( - aux872 + SATLiteral(799) + SATLiteral(259)))
259 3649 0
799 3649 0
799 259 3648 0
c (( - aux873 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3651 0
-529 -3651 0
-529 -1204 -3652 0
c (0<=( - aux873 + SATLiteral(529) + SATLiteral(1204)))
1204 3652 0
529 3652 0
529 1204 3651 0
c ((aux873 - aux874 + SATLiteral(124))<=0)
3651 -3654 0
3652 -3655 0
-124 -3654 0
-124 3651 -3655 0
-124 3652 -3657 0
c (0<=(aux873 - aux874 + SATLiteral(124)))
-3652 3657 0
-3651 3655 0
124 3657 0
124 -3652 3655 0
124 -3651 3654 0
c ((aux870 + aux872 - aux875)<=0)
3648 -3659 0
3649 -3660 0
3642 -3659 0
3642 3648 -3660 0
3642 3649 -3662 0
3643 -3660 0
3643 3648 -3662 0
3643 3649 -3664 0
c (0<=(aux870 + aux872 - aux875))
-3649 3664 0
-3648 3662 0
-3643 3664 0
-3643 -3649 3662 0
-3643 -3648 3660 0
-3642 3662 0
-3642 -3649 3660 0
-3642 -3648 3659 0
c ((SATLiteral(396) - aux876 + SATLiteral(666))<=0)
-666 -3666 0
-396 -3666 0
-396 -666 -3667 0
c (0<=(SATLiteral(396) - aux876 + SATLiteral(666)))
666 3667 0
396 3667 0
396 666 3666 0
c ((SATLiteral(1069) - aux877 + SATLiteral(936))<=0)
-936 -3669 0
-1069 -3669 0
-1069 -936 -3670 0
c (0<=(SATLiteral(1069) - aux877 + SATLiteral(936)))
936 3670 0
1069 3670 0
1069 936 3669 0
c (( - aux878 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3672 0
-801 -3672 0
-801 -261 -3673 0
c (0<=( - aux878 + SATLiteral(801) + SATLiteral(261)))
261 3673 0
801 3673 0
801 261 3672 0
c (( - aux879 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3675 0
-531 -3675 0
-531 -1206 -3676 0
c (0<=( - aux879 + SATLiteral(531) + SATLiteral(1206)))
1206 3676 0
531 3676 0
531 1206 3675 0
c ((aux879 - aux880 + SATLiteral(126))<=0)
3675 -3678 0
3676 -3679 0
-126 -3678 0
-126 3675 -3679 0
-126 3676 -3681 0
c (0<=(aux879 - aux880 + SATLiteral(126)))
-3676 3681 0
-3675 3679 0
126 3681 0
126 -3676 3679 0
126 -3675 3678 0
c ((aux876 + aux878 - aux881)<=0)
3672 -3683 0
3673 -3684 0
3666 -3683 0
3666 3672 -3684 0
3666 3673 -3686 0
3667 -3684 0
3667 3672 -3686 0
3667 3673 -3688 0
c (0<=(aux876 + aux878 - aux881))
-3673 3688 0
-3672 3686 0
-3667 3688 0
-3667 -3673 3686 0
-3667 -3672 3684 0
-3666 3686 0
-3666 -3673 3684 0
-3666 -3672 3683 0
c ((SATLiteral(398) - aux882 + SATLiteral(668))<=0)
-668 -3690 0
-398 -3690 0
-398 -668 -3691 0
c (0<=(SATLiteral(398) - aux882 + SATLiteral(668)))
668 3691 0
398 3691 0
398 668 3690 0
c ((SATLiteral(1070) - aux883 + SATLiteral(938))<=0)
-938 -3693 0
-1070 -3693 0
-1070 -938 -3694 0
c (0<=(SATLiteral(1070) - aux883 + SATLiteral(938)))
938 3694 0
1070 3694 0
1070 938 3693 0
c (( - aux884 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3696 0
-803 -3696 0
-803 -263 -3697 0
c (0<=( - aux884 + SATLiteral(803) + SATLiteral(263)))
263 3697 0
803 3697 0
803 263 3696 0
c (( - aux885 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3699 0
-533 -3699 0
-533 -1208 -3700 0
c (0<=( - aux885 + SATLiteral(533) + SATLiteral(1208)))
1208 3700 0
533 3700 0
533 1208 3699 0
c ((aux885 - aux886 + SATLiteral(128))<=0)
3699 -3702 0
3700 -3703 0
-128 -3702 0
-128 3699 -3703 0
-128 3700 -3705 0
c (0<=(aux885 - aux886 + SATLiteral(128)))
-3700 3705 0
-3699 3703 0
128 3705 0
128 -3700 3703 0
128 -3699 3702 0
c ((aux882 + aux884 - aux887)<=0)
3696 -3707 0
3697 -3708 0
3690 -3707 0
3690 3696 -3708 0
3690 3697 -3710 0
3691 -3708 0
3691 3696 -3710 0
3691 3697 -3712 0
c (0<=(aux882 + aux884 - aux887))
-3697 3712 0
-3696 3710 0
-3691 3712 0
-3691 -3697 3710 0
-3691 -3696 3708 0
-3690 3710 0
-3690 -3697 3708 0
-3690 -3696 3707 0
c ((SATLiteral(400) - aux888 + SATLiteral(670))<=0)
-670 -3714 0
-400 -3714 0
-400 -670 -3715 0
c (0<=(SATLiteral(400) - aux888 + SATLiteral(670)))
670 3715 0
400 3715 0
400 670 3714 0
c ((SATLiteral(1071) - aux889 + SATLiteral(940))<=0)
-940 -3717 0
-1071 -3717 0
-1071 -940 -3718 0
c (0<=(SATLiteral(1071) - aux889 + SATLiteral(940)))
940 3718 0
1071 3718 0
1071 940 3717 0
c (( - aux890 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3720 0
-805 -3720 0
-805 -265 -3721 0
c (0<=( - aux890 + SATLiteral(805) + SATLiteral(265)))
265 3721 0
805 3721 0
805 265 3720 0
c (( - aux891 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3723 0
-535 -3723 0
-535 -1210 -3724 0
c (0<=( - aux891 + SATLiteral(535) + SATLiteral(1210)))
1210 3724 0
535 3724 0
535 1210 3723 0
c ((aux891 - aux892 + SATLiteral(130))<=0)
3723 -3726 0
3724 -3727 0
-130 -3726 0
-130 3723 -3727 0
-130 3724 -3729 0
c (0<=(aux891 - aux892 + SATLiteral(130)))
-3724 3729 0
-3723 3727 0
130 3729 0
130 -3724 3727 0
130 -3723 3726 0
c ((aux888 + aux890 - aux893)<=0)
3720 -3731 0
3721 -3732 0
3714 -3731 0
3714 3720 -3732 0
3714 3721 -3734 0
3715 -3732 0
3715 3720 -3734 0
3715 3721 -3736 0
c (0<=(aux888 + aux890 - aux893))
-3721 3736 0
-3720 3734 0
-3715 3736 0
-3715 -3721 3734 0
-3715 -3720 3732 0
-3714 3734 0
-3714 -3721 3732 0
-3714 -3720 3731 0
c ((SATLiteral(402) - aux894 + SATLiteral(672))<=0)
-672 -3738 0
-402 -3738 0
-402 -672 -3739 0
c (0<=(SATLiteral(402) - aux894 + SATLiteral(672)))
672 3739 0
402 3739 0
402 672 3738 0
c ((SATLiteral(1072) - aux895 + SATLiteral(942))<=0)
-942 -3741 0
-1072 -3741 0
-1072 -942 -3742 0
c (0<=(SATLiteral(1072) - aux895 + SATLiteral(942)))
942 3742 0
1072 3742 0
1072 942 3741 0
c (( - aux896 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3744 0
-807 -3744 0
-807 -267 -3745 0
c (0<=( - aux896 + SATLiteral(807) + SATLiteral(267)))
267 3745 0
807 3745 0
807 267 3744 0
c (( - aux897 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3747 0
-537 -3747 0
-537 -1212 -3748 0
c (0<=( - aux897 + SATLiteral(537) + SATLiteral(1212)))
1212 3748 0
537 3748 0
537 1212 3747 0
c ((aux897 - aux898 + SATLiteral(132))<=0)
3747 -3750 0
3748 -3751 0
-132 -3750 0
-132 3747 -3751 0
-132 3748 -3753 0
c (0<=(aux897 - aux898 + SATLiteral(132)))
-3748 3753 0
-3747 3751 0
132 3753 0
132 -3748 3751 0
132 -3747 3750 0
c ((aux894 + aux896 - aux899)<=0)
3744 -3755 0
3745 -3756 0
3738 -3755 0
3738 3744 -3756 0
3738 3745 -3758 0
3739 -3756 0
3739 3744 -3758 0
3739 3745 -3760 0
c (0<=(aux894 + aux896 - aux899))
-3745 3760 0
-3744 3758 0
-3739 3760 0
-3739 -3745 3758 0
-3739 -3744 3756 0
-3738 3758 0
-3738 -3745 3756 0
-3738 -3744 3755 0
c ((SATLiteral(404) - aux900 + SATLiteral(674))<=0)
-674 -3762 0
-404 -3762 0
-404 -674 -3763 0
c (0<=(SATLiteral(404) - aux900 + SATLiteral(674)))
674 3763 0
404 3763 0
404 674 3762 0
c ((SATLiteral(1073) - aux901 + SATLiteral(944))<=0)
-944 -3765 0
-1073 -3765 0
-1073 -944 -3766 0
c (0<=(SATLiteral(1073) - aux901 + SATLiteral(944)))
944 3766 0
1073 3766 0
1073 944 3765 0
c (( - aux902 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3768 0
-809 -3768 0
-809 -269 -3769 0
c (0<=( - aux902 + SATLiteral(809) + SATLiteral(269)))
269 3769 0
809 3769 0
809 269 3768 0
c (( - aux903 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3771 0
-539 -3771 0
-539 -1214 -3772 0
c (0<=( - aux903 + SATLiteral(539) + SATLiteral(1214)))
1214 3772 0
539 3772 0
539 1214 3771 0
c ((aux903 - aux904 + SATLiteral(134))<=0)
3771 -3774 0
3772 -3775 0
-134 -3774 0
-134 3771 -3775 0
-134 3772 -3777 0
c (0<=(aux903 - aux904 + SATLiteral(134)))
-3772 3777 0
-3771 3775 0
134 3777 0
134 -3772 3775 0
134 -3771 3774 0
c ((aux900 + aux902 - aux905)<=0)
3768 -3779 0
3769 -3780 0
3762 -3779 0
3762 3768 -3780 0
3762 3769 -3782 0
3763 -3780 0
3763 3768 -3782 0
3763 3769 -3784 0
c (0<=(aux900 + aux902 - aux905))
-3769 3784 0
-3768 3782 0
-3763 3784 0
-3763 -3769 3782 0
-3763 -3768 3780 0
-3762 3782 0
-3762 -3769 3780 0
-3762 -3768 3779 0
c ((SATLiteral(406) - aux906 + SATLiteral(676))<=0)
-676 -3786 0
-406 -3786 0
-406 -676 -3787 0
c (0<=(SATLiteral(406) - aux906 + SATLiteral(676)))
676 3787 0
406 3787 0
406 676 3786 0
c ((SATLiteral(1074) - aux907 + SATLiteral(946))<=0)
-946 -3789 0
-1074 -3789 0
-1074 -946 -3790 0
c (0<=(SATLiteral(1074) - aux907 + SATLiteral(946)))
946 3790 0
1074 3790 0
1074 946 3789 0
c (( - aux908 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3792 0
-811 -3792 0
-811 -271 -3793 0
c (0<=( - aux908 + SATLiteral(811) + SATLiteral(271)))
271 3793 0
811 3793 0
811 271 3792 0
c (( - aux909 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3795 0
-541 -3795 0
-541 -1216 -3796 0
c (0<=( - aux909 + SATLiteral(541) + SATLiteral(1216)))
1216 3796 0
541 3796 0
541 1216 3795 0
c ((aux909 - aux910 + SATLiteral(136))<=0)
3795 -3798 0
3796 -3799 0
-136 -3798 0
-136 3795 -3799 0
-136 3796 -3801 0
c (0<=(aux909 - aux910 + SATLiteral(136)))
-3796 3801 0
-3795 3799 0
136 3801 0
136 -3796 3799 0
136 -3795 3798 0
c ((aux906 + aux908 - aux911)<=0)
3792 -3803 0
3793 -3804 0
3786 -3803 0
3786 3792 -3804 0
3786 3793 -3806 0
3787 -3804 0
3787 3792 -3806 0
3787 3793 -3808 0
c (0<=(aux906 + aux908 - aux911))
-3793 3808 0
-3792 3806 0
-3787 3808 0
-3787 -3793 3806 0
-3787 -3792 3804 0
-3786 3806 0
-3786 -3793 3804 0
-3786 -3792 3803 0
c ((SATLiteral(-405) - aux912 + SATLiteral(-675))<=0)
675 -3810 0
405 -3810 0
405 675 -3811 0
c (0<=(SATLiteral(-405) - aux912 + SATLiteral(-675)))
-675 3811 0
-405 3811 0
-405 -675 3810 0
c ((SATLiteral(1075) - aux913 + SATLiteral(-945))<=0)
945 -3813 0
-1075 -3813 0
-1075 945 -3814 0
c (0<=(SATLiteral(1075) - aux913 + SATLiteral(-945)))
-945 3814 0
1075 3814 0
1075 -945 3813 0
c (( - aux914 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3816 0
810 -3816 0
810 270 -3817 0
c (0<=( - aux914 + SATLiteral(-810) + SATLiteral(-270)))
-270 3817 0
-810 3817 0
-810 -270 3816 0
c (( - aux915 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3819 0
540 -3819 0
540 1215 -3820 0
c (0<=( - aux915 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3820 0
-540 3820 0
-540 -1215 3819 0
c ((aux915 - aux916 + SATLiteral(-135))<=0)
3819 -3822 0
3820 -3823 0
135 -3822 0
135 3819 -3823 0
135 3820 -3825 0
c (0<=(aux915 - aux916 + SATLiteral(-135)))
-3820 3825 0
-3819 3823 0
-135 3825 0
-135 -3820 3823 0
-135 -3819 3822 0
c ((aux912 + aux914 - aux917)<=0)
3816 -3827 0
3817 -3828 0
3810 -3827 0
3810 3816 -3828 0
3810 3817 -3830 0
3811 -3828 0
3811 3816 -3830 0
3811 3817 -3832 0
c (0<=(aux912 + aux914 - aux917))
-3817 3832 0
-3816 3830 0
-3811 3832 0
-3811 -3817 3830 0
-3811 -3816 3828 0
-3810 3830 0
-3810 -3817 3828 0
-3810 -3816 3827 0
c (( - aux918 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3834 0
-2 -3834 0
-2 -122 -3835 0
c (0<=( - aux918 + SATLiteral(2) + SATLiteral(122)))
122 3835 0
2 3835 0
2 122 3834 0
c (( - aux919 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3837 0
-17 -3837 0
-17 -107 -3838 0
c (0<=( - aux919 + SATLiteral(17) + SATLiteral(107)))
107 3838 0
17 3838 0
17 107 3837 0
c (( - aux920 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3840 0
-47 -3840 0
-47 -92 -3841 0
c (0<=( - aux920 + SATLiteral(47) + SATLiteral(92)))
92 3841 0
47 3841 0
47 92 3840 0
c (( - aux921 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3843 0
-62 -3843 0
-62 -77 -3844 0
c (0<=( - aux921 + SATLiteral(62) + SATLiteral(77)))
77 3844 0
62 3844 0
62 77 3843 0
c ((aux921 - aux922 + SATLiteral(32))<=0)
3843 -3846 0
3844 -3847 0
-32 -3846 0
-32 3843 -3847 0
-32 3844 -3849 0
c (0<=(aux921 - aux922 + SATLiteral(32)))
-3844 3849 0
-3843 3847 0
32 3849 0
32 -3844 3847 0
32 -3843 3846 0
c ((aux918 + aux920 - aux923)<=0)
3840 -3851 0
3841 -3852 0
3834 -3851 0
3834 3840 -3852 0
3834 3841 -3854 0
3835 -3852 0
3835 3840 -3854 0
3835 3841 -3856 0
c (0<=(aux918 + aux920 - aux923))
-3841 3856 0
-3840 3854 0
-3835 3856 0
-3835 -3841 3854 0
-3835 -3840 3852 0
-3834 3854 0
-3834 -3841 3852 0
-3834 -3840 3851 0
c (( - aux924 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3858 0
-4 -3858 0
-4 -124 -3859 0
c (0<=( - aux924 + SATLiteral(4) + SATLiteral(124)))
124 3859 0
4 3859 0
4 124 3858 0
c (( - aux925 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3861 0
-19 -3861 0
-19 -109 -3862 0
c (0<=( - aux925 + SATLiteral(19) + SATLiteral(109)))
109 3862 0
19 3862 0
19 109 3861 0
c (( - aux926 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3864 0
-49 -3864 0
-49 -94 -3865 0
c (0<=( - aux926 + SATLiteral(49) + SATLiteral(94)))
94 3865 0
49 3865 0
49 94 3864 0
c (( - aux927 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3867 0
-64 -3867 0
-64 -79 -3868 0
c (0<=( - aux927 + SATLiteral(64) + SATLiteral(79)))
79 3868 0
64 3868 0
64 79 3867 0
c ((aux927 - aux928 + SATLiteral(34))<=0)
3867 -3870 0
3868 -3871 0
-34 -3870 0
-34 3867 -3871 0
-34 3868 -3873 0
c (0<=(aux927 - aux928 + SATLiteral(34)))
-3868 3873 0
-3867 3871 0
34 3873 0
34 -3868 3871 0
34 -3867 3870 0
c ((aux924 + aux926 - aux929)<=0)
3864 -3875 0
3865 -3876 0
3858 -3875 0
3858 3864 -3876 0
3858 3865 -3878 0
3859 -3876 0
3859 3864 -3878 0
3859 3865 -3880 0
c (0<=(aux924 + aux926 - aux929))
-3865 3880 0
-3864 3878 0
-3859 3880 0
-3859 -3865 3878 0
-3859 -3864 3876 0
-3858 3878 0
-3858 -3865 3876 0
-3858 -3864 3875 0
c (( - aux930 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -3882 0
-6 -3882 0
-6 -126 -3883 0
c (0<=( - aux930 + SATLiteral(6) + SATLiteral(126)))
126 3883 0
6 3883 0
6 126 3882 0
c (( - aux931 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -3885 0
-21 -3885 0
-21 -111 -3886 0
c (0<=( - aux931 + SATLiteral(21) + SATLiteral(111)))
111 3886 0
21 3886 0
21 111 3885 0
c (( - aux932 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -3888 0
-51 -3888 0
-51 -96 -3889 0
c (0<=( - aux932 + SATLiteral(51) + SATLiteral(96)))
96 3889 0
51 3889 0
51 96 3888 0
c (( - aux933 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -3891 0
-66 -3891 0
-66 -81 -3892 0
c (0<=( - aux933 + SATLiteral(66) + SATLiteral(81)))
81 3892 0
66 3892 0
66 81 3891 0
c ((aux933 - aux934 + SATLiteral(36))<=0)
3891 -3894 0
3892 -3895 0
-36 -3894 0
-36 3891 -3895 0
-36 3892 -3897 0
c (0<=(aux933 - aux934 + SATLiteral(36)))
-3892 3897 0
-3891 3895 0
36 3897 0
36 -3892 3895 0
36 -3891 3894 0
c ((aux930 + aux932 - aux935)<=0)
3888 -3899 0
3889 -3900 0
3882 -3899 0
3882 3888 -3900 0
3882 3889 -3902 0
3883 -3900 0
3883 3888 -3902 0
3883 3889 -3904 0
c (0<=(aux930 + aux932 - aux935))
-3889 3904 0
-3888 3902 0
-3883 3904 0
-3883 -3889 3902 0
-3883 -3888 3900 0
-3882 3902 0
-3882 -3889 3900 0
-3882 -3888 3899 0
c (( - aux936 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -3906 0
-8 -3906 0
-8 -128 -3907 0
c (0<=( - aux936 + SATLiteral(8) + SATLiteral(128)))
128 3907 0
8 3907 0
8 128 3906 0
c (( - aux937 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -3909 0
-23 -3909 0
-23 -113 -3910 0
c (0<=( - aux937 + SATLiteral(23) + SATLiteral(113)))
113 3910 0
23 3910 0
23 113 3909 0
c (( - aux938 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -3912 0
-53 -3912 0
-53 -98 -3913 0
c (0<=( - aux938 + SATLiteral(53) + SATLiteral(98)))
98 3913 0
53 3913 0
53 98 3912 0
c (( - aux939 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -3915 0
-68 -3915 0
-68 -83 -3916 0
c (0<=( - aux939 + SATLiteral(68) + SATLiteral(83)))
83 3916 0
68 3916 0
68 83 3915 0
c ((aux939 - aux940 + SATLiteral(38))<=0)
3915 -3918 0
3916 -3919 0
-38 -3918 0
-38 3915 -3919 0
-38 3916 -3921 0
c (0<=(aux939 - aux940 + SATLiteral(38)))
-3916 3921 0
-3915 3919 0
38 3921 0
38 -3916 3919 0
38 -3915 3918 0
c ((aux936 + aux938 - aux941)<=0)
3912 -3923 0
3913 -3924 0
3906 -3923 0
3906 3912 -3924 0
3906 3913 -3926 0
3907 -3924 0
3907 3912 -3926 0
3907 3913 -3928 0
c (0<=(aux936 + aux938 - aux941))
-3913 3928 0
-3912 3926 0
-3907 3928 0
-3907 -3913 3926 0
-3907 -3912 3924 0
-3906 3926 0
-3906 -3913 3924 0
-3906 -3912 3923 0
c (( - aux942 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -3930 0
-10 -3930 0
-10 -130 -3931 0
c (0<=( - aux942 + SATLiteral(10) + SATLiteral(130)))
130 3931 0
10 3931 0
10 130 3930 0
c (( - aux943 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -3933 0
-25 -3933 0
-25 -115 -3934 0
c (0<=( - aux943 + SATLiteral(25) + SATLiteral(115)))
115 3934 0
25 3934 0
25 115 3933 0
c (( - aux944 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -3936 0
-55 -3936 0
-55 -100 -3937 0
c (0<=( - aux944 + SATLiteral(55) + SATLiteral(100)))
100 3937 0
55 3937 0
55 100 3936 0
c (( - aux945 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -3939 0
-70 -3939 0
-70 -85 -3940 0
c (0<=( - aux945 + SATLiteral(70) + SATLiteral(85)))
85 3940 0
70 3940 0
70 85 3939 0
c ((aux945 - aux946 + SATLiteral(40))<=0)
3939 -3942 0
3940 -3943 0
-40 -3942 0
-40 3939 -3943 0
-40 3940 -3945 0
c (0<=(aux945 - aux946 + SATLiteral(40)))
-3940 3945 0
-3939 3943 0
40 3945 0
40 -3940 3943 0
40 -3939 3942 0
c ((aux942 + aux944 - aux947)<=0)
3936 -3947 0
3937 -3948 0
3930 -3947 0
3930 3936 -3948 0
3930 3937 -3950 0
3931 -3948 0
3931 3936 -3950 0
3931 3937 -3952 0
c (0<=(aux942 + aux944 - aux947))
-3937 3952 0
-3936 3950 0
-3931 3952 0
-3931 -3937 3950 0
-3931 -3936 3948 0
-3930 3950 0
-3930 -3937 3948 0
-3930 -3936 3947 0
c (( - aux948 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -3954 0
-12 -3954 0
-12 -132 -3955 0
c (0<=( - aux948 + SATLiteral(12) + SATLiteral(132)))
132 3955 0
12 3955 0
12 132 3954 0
c (( - aux949 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -3957 0
-27 -3957 0
-27 -117 -3958 0
c (0<=( - aux949 + SATLiteral(27) + SATLiteral(117)))
117 3958 0
27 3958 0
27 117 3957 0
c (( - aux950 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -3960 0
-57 -3960 0
-57 -102 -3961 0
c (0<=( - aux950 + SATLiteral(57) + SATLiteral(102)))
102 3961 0
57 3961 0
57 102 3960 0
c (( - aux951 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -3963 0
-72 -3963 0
-72 -87 -3964 0
c (0<=( - aux951 + SATLiteral(72) + SATLiteral(87)))
87 3964 0
72 3964 0
72 87 3963 0
c ((aux951 - aux952 + SATLiteral(42))<=0)
3963 -3966 0
3964 -3967 0
-42 -3966 0
-42 3963 -3967 0
-42 3964 -3969 0
c (0<=(aux951 - aux952 + SATLiteral(42)))
-3964 3969 0
-3963 3967 0
42 3969 0
42 -3964 3967 0
42 -3963 3966 0
c ((aux948 + aux950 - aux953)<=0)
3960 -3971 0
3961 -3972 0
3954 -3971 0
3954 3960 -3972 0
3954 3961 -3974 0
3955 -3972 0
3955 3960 -3974 0
3955 3961 -3976 0
c (0<=(aux948 + aux950 - aux953))
-3961 3976 0
-3960 3974 0
-3955 3976 0
-3955 -3961 3974 0
-3955 -3960 3972 0
-3954 3974 0
-3954 -3961 3972 0
-3954 -3960 3971 0
c (( - aux954 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -3978 0
-14 -3978 0
-14 -134 -3979 0
c (0<=( - aux954 + SATLiteral(14) + SATLiteral(134)))
134 3979 0
14 3979 0
14 134 3978 0
c (( - aux955 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -3981 0
-29 -3981 0
-29 -119 -3982 0
c (0<=( - aux955 + SATLiteral(29) + SATLiteral(119)))
119 3982 0
29 3982 0
29 119 3981 0
c (( - aux956 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -3984 0
-59 -3984 0
-59 -104 -3985 0
c (0<=( - aux956 + SATLiteral(59) + SATLiteral(104)))
104 3985 0
59 3985 0
59 104 3984 0
c (( - aux957 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -3987 0
-74 -3987 0
-74 -89 -3988 0
c (0<=( - aux957 + SATLiteral(74) + SATLiteral(89)))
89 3988 0
74 3988 0
74 89 3987 0
c ((aux957 - aux958 + SATLiteral(44))<=0)
3987 -3990 0
3988 -3991 0
-44 -3990 0
-44 3987 -3991 0
-44 3988 -3993 0
c (0<=(aux957 - aux958 + SATLiteral(44)))
-3988 3993 0
-3987 3991 0
44 3993 0
44 -3988 3991 0
44 -3987 3990 0
c ((aux954 + aux956 - aux959)<=0)
3984 -3995 0
3985 -3996 0
3978 -3995 0
3978 3984 -3996 0
3978 3985 -3998 0
3979 -3996 0
3979 3984 -3998 0
3979 3985 -4000 0
c (0<=(aux954 + aux956 - aux959))
-3985 4000 0
-3984 3998 0
-3979 4000 0
-3979 -3985 3998 0
-3979 -3984 3996 0
-3978 3998 0
-3978 -3985 3996 0
-3978 -3984 3995 0
c (( - aux960 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4002 0
-16 -4002 0
-16 -136 -4003 0
c (0<=( - aux960 + SATLiteral(16) + SATLiteral(136)))
136 4003 0
16 4003 0
16 136 4002 0
c (( - aux961 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -4005 0
-31 -4005 0
-31 -121 -4006 0
c (0<=( - aux961 + SATLiteral(31) + SATLiteral(121)))
121 4006 0
31 4006 0
31 121 4005 0
c (( - aux962 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -4008 0
-61 -4008 0
-61 -106 -4009 0
c (0<=( - aux962 + SATLiteral(61) + SATLiteral(106)))
106 4009 0
61 4009 0
61 106 4008 0
c (( - aux963 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -4011 0
-76 -4011 0
-76 -91 -4012 0
c (0<=( - aux963 + SATLiteral(76) + SATLiteral(91)))
91 4012 0
76 4012 0
76 91 4011 0
c ((aux963 - aux964 + SATLiteral(46))<=0)
4011 -4014 0
4012 -4015 0
-46 -4014 0
-46 4011 -4015 0
-46 4012 -4017 0
c (0<=(aux963 - aux964 + SATLiteral(46)))
-4012 4017 0
-4011 4015 0
46 4017 0
46 -4012 4015 0
46 -4011 4014 0
c ((aux960 + aux962 - aux965)<=0)
4008 -4019 0
4009 -4020 0
4002 -4019 0
4002 4008 -4020 0
4002 4009 -4022 0
4003 -4020 0
4003 4008 -4022 0
4003 4009 -4024 0
c (0<=(aux960 + aux962 - aux965))
-4009 4024 0
-4008 4022 0
-4003 4024 0
-4003 -4009 4022 0
-4003 -4008 4020 0
-4002 4022 0
-4002 -4009 4020 0
-4002 -4008 4019 0
c (( - aux966 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -4026 0
15 -4026 0
15 135 -4027 0
c (0<=( - aux966 + SATLiteral(-15) + SATLiteral(-135)))
-135 4027 0
-15 4027 0
-15 -135 4026 0
c (( - aux967 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -4029 0
30 -4029 0
30 120 -4030 0
c (0<=( - aux967 + SATLiteral(-30) + SATLiteral(-120)))
-120 4030 0
-30 4030 0
-30 -120 4029 0
c (( - aux968 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -4032 0
60 -4032 0
60 105 -4033 0
c (0<=( - aux968 + SATLiteral(-60) + SATLiteral(-105)))
-105 4033 0
-60 4033 0
-60 -105 4032 0
c (( - aux969 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -4035 0
75 -4035 0
75 90 -4036 0
c (0<=( - aux969 + SATLiteral(-75) + SATLiteral(-90)))
-90 4036 0
-75 4036 0
-75 -90 4035 0
c ((aux969 - aux970 + SATLiteral(-45))<=0)
4035 -4038 0
4036 -4039 0
45 -4038 0
45 4035 -4039 0
45 4036 -4041 0
c (0<=(aux969 - aux970 + SATLiteral(-45)))
-4036 4041 0
-4035 4039 0
-45 4041 0
-45 -4036 4039 0
-45 -4035 4038 0
c ((aux966 + aux968 - aux971)<=0)
4032 -4043 0
4033 -4044 0
4026 -4043 0
4026 4032 -4044 0
4026 4033 -4046 0
4027 -4044 0
4027 4032 -4046 0
4027 4033 -4048 0
c (0<=(aux966 + aux968 - aux971))
-4033 4048 0
-4032 4046 0
-4027 4048 0
-4027 -4033 4046 0
-4027 -4032 4044 0
-4026 4046 0
-4026 -4033 4044 0
-4026 -4032 4043 0
c (( - aux972 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4050 0
-137 -4050 0
-137 -257 -4051 0
c (0<=( - aux972 + SATLiteral(137) + SATLiteral(257)))
257 4051 0
137 4051 0
137 257 4050 0
c (( - aux973 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4053 0
-152 -4053 0
-152 -242 -4054 0
c (0<=( - aux973 + SATLiteral(152) + SATLiteral(242)))
242 4054 0
152 4054 0
152 242 4053 0
c (( - aux974 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4056 0
-182 -4056 0
-182 -227 -4057 0
c (0<=( - aux974 + SATLiteral(182) + SATLiteral(227)))
227 4057 0
182 4057 0
182 227 4056 0
c (( - aux975 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4059 0
-197 -4059 0
-197 -212 -4060 0
c (0<=( - aux975 + SATLiteral(197) + SATLiteral(212)))
212 4060 0
197 4060 0
197 212 4059 0
c ((aux975 - aux976 + SATLiteral(167))<=0)
4059 -4062 0
4060 -4063 0
-167 -4062 0
-167 4059 -4063 0
-167 4060 -4065 0
c (0<=(aux975 - aux976 + SATLiteral(167)))
-4060 4065 0
-4059 4063 0
167 4065 0
167 -4060 4063 0
167 -4059 4062 0
c ((aux972 + aux974 - aux977)<=0)
4056 -4067 0
4057 -4068 0
4050 -4067 0
4050 4056 -4068 0
4050 4057 -4070 0
4051 -4068 0
4051 4056 -4070 0
4051 4057 -4072 0
c (0<=(aux972 + aux974 - aux977))
-4057 4072 0
-4056 4070 0
-4051 4072 0
-4051 -4057 4070 0
-4051 -4056 4068 0
-4050 4070 0
-4050 -4057 4068 0
-4050 -4056 4067 0
c (( - aux978 + SATLiteral(138) + SATLiteral(259))<=0)
-259 -4074 0
-138 -4074 0
-138 -259 -4075 0
c (0<=( - aux978 + SATLiteral(138) + SATLiteral(259)))
259 4075 0
138 4075 0
138 259 4074 0
c (( - aux979 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4077 0
-154 -4077 0
-154 -244 -4078 0
c (0<=( - aux979 + SATLiteral(154) + SATLiteral(244)))
244 4078 0
154 4078 0
154 244 4077 0
c (( - aux980 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4080 0
-184 -4080 0
-184 -229 -4081 0
c (0<=( - aux980 + SATLiteral(184) + SATLiteral(229)))
229 4081 0
184 4081 0
184 229 4080 0
c (( - aux981 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4083 0
-199 -4083 0
-199 -214 -4084 0
c (0<=( - aux981 + SATLiteral(199) + SATLiteral(214)))
214 4084 0
199 4084 0
199 214 4083 0
c ((aux981 - aux982 + SATLiteral(169))<=0)
4083 -4086 0
4084 -4087 0
-169 -4086 0
-169 4083 -4087 0
-169 4084 -4089 0
c (0<=(aux981 - aux982 + SATLiteral(169)))
-4084 4089 0
-4083 4087 0
169 4089 0
169 -4084 4087 0
169 -4083 4086 0
c ((aux978 + aux980 - aux983)<=0)
4080 -4091 0
4081 -4092 0
4074 -4091 0
4074 4080 -4092 0
4074 4081 -4094 0
4075 -4092 0
4075 4080 -4094 0
4075 4081 -4096 0
c (0<=(aux978 + aux980 - aux983))
-4081 4096 0
-4080 4094 0
-4075 4096 0
-4075 -4081 4094 0
-4075 -4080 4092 0
-4074 4094 0
-4074 -4081 4092 0
-4074 -4080 4091 0
c (( - aux984 + SATLiteral(139) + SATLiteral(261))<=0)
-261 -4098 0
-139 -4098 0
-139 -261 -4099 0
c (0<=( - aux984 + SATLiteral(139) + SATLiteral(261)))
261 4099 0
139 4099 0
139 261 4098 0
c (( - aux985 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4101 0
-156 -4101 0
-156 -246 -4102 0
c (0<=( - aux985 + SATLiteral(156) + SATLiteral(246)))
246 4102 0
156 4102 0
156 246 4101 0
c (( - aux986 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4104 0
-186 -4104 0
-186 -231 -4105 0
c (0<=( - aux986 + SATLiteral(186) + SATLiteral(231)))
231 4105 0
186 4105 0
186 231 4104 0
c (( - aux987 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4107 0
-201 -4107 0
-201 -216 -4108 0
c (0<=( - aux987 + SATLiteral(201) + SATLiteral(216)))
216 4108 0
201 4108 0
201 216 4107 0
c ((aux987 - aux988 + SATLiteral(171))<=0)
4107 -4110 0
4108 -4111 0
-171 -4110 0
-171 4107 -4111 0
-171 4108 -4113 0
c (0<=(aux987 - aux988 + SATLiteral(171)))
-4108 4113 0
-4107 4111 0
171 4113 0
171 -4108 4111 0
171 -4107 4110 0
c ((aux984 + aux986 - aux989)<=0)
4104 -4115 0
4105 -4116 0
4098 -4115 0
4098 4104 -4116 0
4098 4105 -4118 0
4099 -4116 0
4099 4104 -4118 0
4099 4105 -4120 0
c (0<=(aux984 + aux986 - aux989))
-4105 4120 0
-4104 4118 0
-4099 4120 0
-4099 -4105 4118 0
-4099 -4104 4116 0
-4098 4118 0
-4098 -4105 4116 0
-4098 -4104 4115 0
c (( - aux990 + SATLiteral(140) + SATLiteral(263))<=0)
-263 -4122 0
-140 -4122 0
-140 -263 -4123 0
c (0<=( - aux990 + SATLiteral(140) + SATLiteral(263)))
263 4123 0
140 4123 0
140 263 4122 0
c (( - aux991 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4125 0
-158 -4125 0
-158 -248 -4126 0
c (0<=( - aux991 + SATLiteral(158) + SATLiteral(248)))
248 4126 0
158 4126 0
158 248 4125 0
c (( - aux992 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4128 0
-188 -4128 0
-188 -233 -4129 0
c (0<=( - aux992 + SATLiteral(188) + SATLiteral(233)))
233 4129 0
188 4129 0
188 233 4128 0
c (( - aux993 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4131 0
-203 -4131 0
-203 -218 -4132 0
c (0<=( - aux993 + SATLiteral(203) + SATLiteral(218)))
218 4132 0
203 4132 0
203 218 4131 0
c ((aux993 - aux994 + SATLiteral(173))<=0)
4131 -4134 0
4132 -4135 0
-173 -4134 0
-173 4131 -4135 0
-173 4132 -4137 0
c (0<=(aux993 - aux994 + SATLiteral(173)))
-4132 4137 0
-4131 4135 0
173 4137 0
173 -4132 4135 0
173 -4131 4134 0
c ((aux990 + aux992 - aux995)<=0)
4128 -4139 0
4129 -4140 0
4122 -4139 0
4122 4128 -4140 0
4122 4129 -4142 0
4123 -4140 0
4123 4128 -4142 0
4123 4129 -4144 0
c (0<=(aux990 + aux992 - aux995))
-4129 4144 0
-4128 4142 0
-4123 4144 0
-4123 -4129 4142 0
-4123 -4128 4140 0
-4122 4142 0
-4122 -4129 4140 0
-4122 -4128 4139 0
c (( - aux996 + SATLiteral(141) + SATLiteral(265))<=0)
-265 -4146 0
-141 -4146 0
-141 -265 -4147 0
c (0<=( - aux996 + SATLiteral(141) + SATLiteral(265)))
265 4147 0
141 4147 0
141 265 4146 0
c (( - aux997 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4149 0
-160 -4149 0
-160 -250 -4150 0
c (0<=( - aux997 + SATLiteral(160) + SATLiteral(250)))
250 4150 0
160 4150 0
160 250 4149 0
c (( - aux998 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4152 0
-190 -4152 0
-190 -235 -4153 0
c (0<=( - aux998 + SATLiteral(190) + SATLiteral(235)))
235 4153 0
190 4153 0
190 235 4152 0
c (( - aux999 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4155 0
-205 -4155 0
-205 -220 -4156 0
c (0<=( - aux999 + SATLiteral(205) + SATLiteral(220)))
220 4156 0
205 4156 0
205 220 4155 0
c ((aux999 - aux1000 + SATLiteral(175))<=0)
4155 -4158 0
4156 -4159 0
-175 -4158 0
-175 4155 -4159 0
-175 4156 -4161 0
c (0<=(aux999 - aux1000 + SATLiteral(175)))
-4156 4161 0
-4155 4159 0
175 4161 0
175 -4156 4159 0
175 -4155 4158 0
c ((aux996 + aux998 - aux1001)<=0)
4152 -4163 0
4153 -4164 0
4146 -4163 0
4146 4152 -4164 0
4146 4153 -4166 0
4147 -4164 0
4147 4152 -4166 0
4147 4153 -4168 0
c (0<=(aux996 + aux998 - aux1001))
-4153 4168 0
-4152 4166 0
-4147 4168 0
-4147 -4153 4166 0
-4147 -4152 4164 0
-4146 4166 0
-4146 -4153 4164 0
-4146 -4152 4163 0
c (( - aux1002 + SATLiteral(142) + SATLiteral(267))<=0)
-267 -4170 0
-142 -4170 0
-142 -267 -4171 0
c (0<=( - aux1002 + SATLiteral(142) + SATLiteral(267)))
267 4171 0
142 4171 0
142 267 4170 0
c (( - aux1003 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4173 0
-162 -4173 0
-162 -252 -4174 0
c (0<=( - aux1003 + SATLiteral(162) + SATLiteral(252)))
252 4174 0
162 4174 0
162 252 4173 0
c (( - aux1004 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4176 0
-192 -4176 0
-192 -237 -4177 0
c (0<=( - aux1004 + SATLiteral(192) + SATLiteral(237)))
237 4177 0
192 4177 0
192 237 4176 0
c (( - aux1005 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4179 0
-207 -4179 0
-207 -222 -4180 0
c (0<=( - aux1005 + SATLiteral(207) + SATLiteral(222)))
222 4180 0
207 4180 0
207 222 4179 0
c ((aux1005 - aux1006 + SATLiteral(177))<=0)
4179 -4182 0
4180 -4183 0
-177 -4182 0
-177 4179 -4183 0
-177 4180 -4185 0
c (0<=(aux1005 - aux1006 + SATLiteral(177)))
-4180 4185 0
-4179 4183 0
177 4185 0
177 -4180 4183 0
177 -4179 4182 0
c ((aux1002 + aux1004 - aux1007)<=0)
4176 -4187 0
4177 -4188 0
4170 -4187 0
4170 4176 -4188 0
4170 4177 -4190 0
4171 -4188 0
4171 4176 -4190 0
4171 4177 -4192 0
c (0<=(aux1002 + aux1004 - aux1007))
-4177 4192 0
-4176 4190 0
-4171 4192 0
-4171 -4177 4190 0
-4171 -4176 4188 0
-4170 4190 0
-4170 -4177 4188 0
-4170 -4176 4187 0
c (( - aux1008 + SATLiteral(143) + SATLiteral(269))<=0)
-269 -4194 0
-143 -4194 0
-143 -269 -4195 0
c (0<=( - aux1008 + SATLiteral(143) + SATLiteral(269)))
269 4195 0
143 4195 0
143 269 4194 0
c (( - aux1009 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4197 0
-164 -4197 0
-164 -254 -4198 0
c (0<=( - aux1009 + SATLiteral(164) + SATLiteral(254)))
254 4198 0
164 4198 0
164 254 4197 0
c (( - aux1010 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4200 0
-194 -4200 0
-194 -239 -4201 0
c (0<=( - aux1010 + SATLiteral(194) + SATLiteral(239)))
239 4201 0
194 4201 0
194 239 4200 0
c (( - aux1011 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4203 0
-209 -4203 0
-209 -224 -4204 0
c (0<=( - aux1011 + SATLiteral(209) + SATLiteral(224)))
224 4204 0
209 4204 0
209 224 4203 0
c ((aux1011 - aux1012 + SATLiteral(179))<=0)
4203 -4206 0
4204 -4207 0
-179 -4206 0
-179 4203 -4207 0
-179 4204 -4209 0
c (0<=(aux1011 - aux1012 + SATLiteral(179)))
-4204 4209 0
-4203 4207 0
179 4209 0
179 -4204 4207 0
179 -4203 4206 0
c ((aux1008 + aux1010 - aux1013)<=0)
4200 -4211 0
4201 -4212 0
4194 -4211 0
4194 4200 -4212 0
4194 4201 -4214 0
4195 -4212 0
4195 4200 -4214 0
4195 4201 -4216 0
c (0<=(aux1008 + aux1010 - aux1013))
-4201 4216 0
-4200 4214 0
-4195 4216 0
-4195 -4201 4214 0
-4195 -4200 4212 0
-4194 4214 0
-4194 -4201 4212 0
-4194 -4200 4211 0
c (( - aux1014 + SATLiteral(144) + SATLiteral(271))<=0)
-271 -4218 0
-144 -4218 0
-144 -271 -4219 0
c (0<=( - aux1014 + SATLiteral(144) + SATLiteral(271)))
271 4219 0
144 4219 0
144 271 4218 0
c (( - aux1015 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4221 0
-166 -4221 0
-166 -256 -4222 0
c (0<=( - aux1015 + SATLiteral(166) + SATLiteral(256)))
256 4222 0
166 4222 0
166 256 4221 0
c (( - aux1016 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4224 0
-196 -4224 0
-196 -241 -4225 0
c (0<=( - aux1016 + SATLiteral(196) + SATLiteral(241)))
241 4225 0
196 4225 0
196 241 4224 0
c (( - aux1017 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4227 0
-211 -4227 0
-211 -226 -4228 0
c (0<=( - aux1017 + SATLiteral(211) + SATLiteral(226)))
226 4228 0
211 4228 0
211 226 4227 0
c ((aux1017 - aux1018 + SATLiteral(181))<=0)
4227 -4230 0
4228 -4231 0
-181 -4230 0
-181 4227 -4231 0
-181 4228 -4233 0
c (0<=(aux1017 - aux1018 + SATLiteral(181)))
-4228 4233 0
-4227 4231 0
181 4233 0
181 -4228 4231 0
181 -4227 4230 0
c ((aux1014 + aux1016 - aux1019)<=0)
4224 -4235 0
4225 -4236 0
4218 -4235 0
4218 4224 -4236 0
4218 4225 -4238 0
4219 -4236 0
4219 4224 -4238 0
4219 4225 -4240 0
c (0<=(aux1014 + aux1016 - aux1019))
-4225 4240 0
-4224 4238 0
-4219 4240 0
-4219 -4225 4238 0
-4219 -4224 4236 0
-4218 4238 0
-4218 -4225 4236 0
-4218 -4224 4235 0
c (( - aux1020 + SATLiteral(145) + SATLiteral(-270))<=0)
270 -4242 0
-145 -4242 0
-145 270 -4243 0
c (0<=( - aux1020 + SATLiteral(145) + SATLiteral(-270)))
-270 4243 0
145 4243 0
145 -270 4242 0
c (( - aux1021 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4245 0
165 -4245 0
165 255 -4246 0
c (0<=( - aux1021 + SATLiteral(-165) + SATLiteral(-255)))
-255 4246 0
-165 4246 0
-165 -255 4245 0
c (( - aux1022 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4248 0
195 -4248 0
195 240 -4249 0
c (0<=( - aux1022 + SATLiteral(-195) + SATLiteral(-240)))
-240 4249 0
-195 4249 0
-195 -240 4248 0
c (( - aux1023 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4251 0
210 -4251 0
210 225 -4252 0
c (0<=( - aux1023 + SATLiteral(-210) + SATLiteral(-225)))
-225 4252 0
-210 4252 0
-210 -225 4251 0
c ((aux1023 - aux1024 + SATLiteral(-180))<=0)
4251 -4254 0
4252 -4255 0
180 -4254 0
180 4251 -4255 0
180 4252 -4257 0
c (0<=(aux1023 - aux1024 + SATLiteral(-180)))
-4252 4257 0
-4251 4255 0
-180 4257 0
-180 -4252 4255 0
-180 -4251 4254 0
c ((aux1020 + aux1022 - aux1025)<=0)
4248 -4259 0
4249 -4260 0
4242 -4259 0
4242 4248 -4260 0
4242 4249 -4262 0
4243 -4260 0
4243 4248 -4262 0
4243 4249 -4264 0
c (0<=(aux1020 + aux1022 - aux1025))
-4249 4264 0
-4248 4262 0
-4243 4264 0
-4243 -4249 4262 0
-4243 -4248 4260 0
-4242 4262 0
-4242 -4249 4260 0
-4242 -4248 4259 0
c ((SATLiteral(272) + SATLiteral(392) - aux1026)<=0)
-392 -4266 0
-272 -4266 0
-272 -392 -4267 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1026))
392 4267 0
272 4267 0
272 392 4266 0
c ((SATLiteral(287) + SATLiteral(377) - aux1027)<=0)
-377 -4269 0
-287 -4269 0
-287 -377 -4270 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1027))
377 4270 0
287 4270 0
287 377 4269 0
c ((SATLiteral(317) + SATLiteral(362) - aux1028)<=0)
-362 -4272 0
-317 -4272 0
-317 -362 -4273 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1028))
362 4273 0
317 4273 0
317 362 4272 0
c ((SATLiteral(332) + SATLiteral(347) - aux1029)<=0)
-347 -4275 0
-332 -4275 0
-332 -347 -4276 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1029))
347 4276 0
332 4276 0
332 347 4275 0
c ((SATLiteral(302) + aux1029 - aux1030)<=0)
4275 -4278 0
4276 -4279 0
-302 -4278 0
-302 4275 -4279 0
-302 4276 -4281 0
c (0<=(SATLiteral(302) + aux1029 - aux1030))
-4276 4281 0
-4275 4279 0
302 4281 0
302 -4276 4279 0
302 -4275 4278 0
c ((aux1026 + aux1028 - aux1031)<=0)
4272 -4283 0
4273 -4284 0
4266 -4283 0
4266 4272 -4284 0
4266 4273 -4286 0
4267 -4284 0
4267 4272 -4286 0
4267 4273 -4288 0
c (0<=(aux1026 + aux1028 - aux1031))
-4273 4288 0
-4272 4286 0
-4267 4288 0
-4267 -4273 4286 0
-4267 -4272 4284 0
-4266 4286 0
-4266 -4273 4284 0
-4266 -4272 4283 0
c ((SATLiteral(274) + SATLiteral(394) - aux1032)<=0)
-394 -4290 0
-274 -4290 0
-274 -394 -4291 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1032))
394 4291 0
274 4291 0
274 394 4290 0
c ((SATLiteral(289) + SATLiteral(379) - aux1033)<=0)
-379 -4293 0
-289 -4293 0
-289 -379 -4294 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1033))
379 4294 0
289 4294 0
289 379 4293 0
c ((SATLiteral(319) + SATLiteral(364) - aux1034)<=0)
-364 -4296 0
-319 -4296 0
-319 -364 -4297 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1034))
364 4297 0
319 4297 0
319 364 4296 0
c ((SATLiteral(334) + SATLiteral(349) - aux1035)<=0)
-349 -4299 0
-334 -4299 0
-334 -349 -4300 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1035))
349 4300 0
334 4300 0
334 349 4299 0
c ((SATLiteral(303) + aux1035 - aux1036)<=0)
4299 -4302 0
4300 -4303 0
-303 -4302 0
-303 4299 -4303 0
-303 4300 -4305 0
c (0<=(SATLiteral(303) + aux1035 - aux1036))
-4300 4305 0
-4299 4303 0
303 4305 0
303 -4300 4303 0
303 -4299 4302 0
c ((aux1032 + aux1034 - aux1037)<=0)
4296 -4307 0
4297 -4308 0
4290 -4307 0
4290 4296 -4308 0
4290 4297 -4310 0
4291 -4308 0
4291 4296 -4310 0
4291 4297 -4312 0
c (0<=(aux1032 + aux1034 - aux1037))
-4297 4312 0
-4296 4310 0
-4291 4312 0
-4291 -4297 4310 0
-4291 -4296 4308 0
-4290 4310 0
-4290 -4297 4308 0
-4290 -4296 4307 0
c ((SATLiteral(276) + SATLiteral(396) - aux1038)<=0)
-396 -4314 0
-276 -4314 0
-276 -396 -4315 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1038))
396 4315 0
276 4315 0
276 396 4314 0
c ((SATLiteral(291) + SATLiteral(381) - aux1039)<=0)
-381 -4317 0
-291 -4317 0
-291 -381 -4318 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1039))
381 4318 0
291 4318 0
291 381 4317 0
c ((SATLiteral(321) + SATLiteral(366) - aux1040)<=0)
-366 -4320 0
-321 -4320 0
-321 -366 -4321 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1040))
366 4321 0
321 4321 0
321 366 4320 0
c ((SATLiteral(336) + SATLiteral(351) - aux1041)<=0)
-351 -4323 0
-336 -4323 0
-336 -351 -4324 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1041))
351 4324 0
336 4324 0
336 351 4323 0
c ((SATLiteral(304) + aux1041 - aux1042)<=0)
4323 -4326 0
4324 -4327 0
-304 -4326 0
-304 4323 -4327 0
-304 4324 -4329 0
c (0<=(SATLiteral(304) + aux1041 - aux1042))
-4324 4329 0
-4323 4327 0
304 4329 0
304 -4324 4327 0
304 -4323 4326 0
c ((aux1038 + aux1040 - aux1043)<=0)
4320 -4331 0
4321 -4332 0
4314 -4331 0
4314 4320 -4332 0
4314 4321 -4334 0
4315 -4332 0
4315 4320 -4334 0
4315 4321 -4336 0
c (0<=(aux1038 + aux1040 - aux1043))
-4321 4336 0
-4320 4334 0
-4315 4336 0
-4315 -4321 4334 0
-4315 -4320 4332 0
-4314 4334 0
-4314 -4321 4332 0
-4314 -4320 4331 0
c ((SATLiteral(278) + SATLiteral(398) - aux1044)<=0)
-398 -4338 0
-278 -4338 0
-278 -398 -4339 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1044))
398 4339 0
278 4339 0
278 398 4338 0
c ((SATLiteral(293) + SATLiteral(383) - aux1045)<=0)
-383 -4341 0
-293 -4341 0
-293 -383 -4342 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1045))
383 4342 0
293 4342 0
293 383 4341 0
c ((SATLiteral(323) + SATLiteral(368) - aux1046)<=0)
-368 -4344 0
-323 -4344 0
-323 -368 -4345 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1046))
368 4345 0
323 4345 0
323 368 4344 0
c ((SATLiteral(338) + SATLiteral(353) - aux1047)<=0)
-353 -4347 0
-338 -4347 0
-338 -353 -4348 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1047))
353 4348 0
338 4348 0
338 353 4347 0
c ((SATLiteral(305) + aux1047 - aux1048)<=0)
4347 -4350 0
4348 -4351 0
-305 -4350 0
-305 4347 -4351 0
-305 4348 -4353 0
c (0<=(SATLiteral(305) + aux1047 - aux1048))
-4348 4353 0
-4347 4351 0
305 4353 0
305 -4348 4351 0
305 -4347 4350 0
c ((aux1044 + aux1046 - aux1049)<=0)
4344 -4355 0
4345 -4356 0
4338 -4355 0
4338 4344 -4356 0
4338 4345 -4358 0
4339 -4356 0
4339 4344 -4358 0
4339 4345 -4360 0
c (0<=(aux1044 + aux1046 - aux1049))
-4345 4360 0
-4344 4358 0
-4339 4360 0
-4339 -4345 4358 0
-4339 -4344 4356 0
-4338 4358 0
-4338 -4345 4356 0
-4338 -4344 4355 0
c ((SATLiteral(280) + SATLiteral(400) - aux1050)<=0)
-400 -4362 0
-280 -4362 0
-280 -400 -4363 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1050))
400 4363 0
280 4363 0
280 400 4362 0
c ((SATLiteral(295) + SATLiteral(385) - aux1051)<=0)
-385 -4365 0
-295 -4365 0
-295 -385 -4366 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1051))
385 4366 0
295 4366 0
295 385 4365 0
c ((SATLiteral(325) + SATLiteral(370) - aux1052)<=0)
-370 -4368 0
-325 -4368 0
-325 -370 -4369 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1052))
370 4369 0
325 4369 0
325 370 4368 0
c ((SATLiteral(340) + SATLiteral(355) - aux1053)<=0)
-355 -4371 0
-340 -4371 0
-340 -355 -4372 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1053))
355 4372 0
340 4372 0
340 355 4371 0
c ((SATLiteral(306) + aux1053 - aux1054)<=0)
4371 -4374 0
4372 -4375 0
-306 -4374 0
-306 4371 -4375 0
-306 4372 -4377 0
c (0<=(SATLiteral(306) + aux1053 - aux1054))
-4372 4377 0
-4371 4375 0
306 4377 0
306 -4372 4375 0
306 -4371 4374 0
c ((aux1050 + aux1052 - aux1055)<=0)
4368 -4379 0
4369 -4380 0
4362 -4379 0
4362 4368 -4380 0
4362 4369 -4382 0
4363 -4380 0
4363 4368 -4382 0
4363 4369 -4384 0
c (0<=(aux1050 + aux1052 - aux1055))
-4369 4384 0
-4368 4382 0
-4363 4384 0
-4363 -4369 4382 0
-4363 -4368 4380 0
-4362 4382 0
-4362 -4369 4380 0
-4362 -4368 4379 0
c ((SATLiteral(282) + SATLiteral(402) - aux1056)<=0)
-402 -4386 0
-282 -4386 0
-282 -402 -4387 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1056))
402 4387 0
282 4387 0
282 402 4386 0
c ((SATLiteral(297) + SATLiteral(387) - aux1057)<=0)
-387 -4389 0
-297 -4389 0
-297 -387 -4390 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1057))
387 4390 0
297 4390 0
297 387 4389 0
c ((SATLiteral(327) + SATLiteral(372) - aux1058)<=0)
-372 -4392 0
-327 -4392 0
-327 -372 -4393 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1058))
372 4393 0
327 4393 0
327 372 4392 0
c ((SATLiteral(342) + SATLiteral(357) - aux1059)<=0)
-357 -4395 0
-342 -4395 0
-342 -357 -4396 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1059))
357 4396 0
342 4396 0
342 357 4395 0
c ((SATLiteral(307) + aux1059 - aux1060)<=0)
4395 -4398 0
4396 -4399 0
-307 -4398 0
-307 4395 -4399 0
-307 4396 -4401 0
c (0<=(SATLiteral(307) + aux1059 - aux1060))
-4396 4401 0
-4395 4399 0
307 4401 0
307 -4396 4399 0
307 -4395 4398 0
c ((aux1056 + aux1058 - aux1061)<=0)
4392 -4403 0
4393 -4404 0
4386 -4403 0
4386 4392 -4404 0
4386 4393 -4406 0
4387 -4404 0
4387 4392 -4406 0
4387 4393 -4408 0
c (0<=(aux1056 + aux1058 - aux1061))
-4393 4408 0
-4392 4406 0
-4387 4408 0
-4387 -4393 4406 0
-4387 -4392 4404 0
-4386 4406 0
-4386 -4393 4404 0
-4386 -4392 4403 0
c ((SATLiteral(284) + SATLiteral(404) - aux1062)<=0)
-404 -4410 0
-284 -4410 0
-284 -404 -4411 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1062))
404 4411 0
284 4411 0
284 404 4410 0
c ((SATLiteral(299) + SATLiteral(389) - aux1063)<=0)
-389 -4413 0
-299 -4413 0
-299 -389 -4414 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1063))
389 4414 0
299 4414 0
299 389 4413 0
c ((SATLiteral(329) + SATLiteral(374) - aux1064)<=0)
-374 -4416 0
-329 -4416 0
-329 -374 -4417 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1064))
374 4417 0
329 4417 0
329 374 4416 0
c ((SATLiteral(344) + SATLiteral(359) - aux1065)<=0)
-359 -4419 0
-344 -4419 0
-344 -359 -4420 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1065))
359 4420 0
344 4420 0
344 359 4419 0
c ((SATLiteral(308) + aux1065 - aux1066)<=0)
4419 -4422 0
4420 -4423 0
-308 -4422 0
-308 4419 -4423 0
-308 4420 -4425 0
c (0<=(SATLiteral(308) + aux1065 - aux1066))
-4420 4425 0
-4419 4423 0
308 4425 0
308 -4420 4423 0
308 -4419 4422 0
c ((aux1062 + aux1064 - aux1067)<=0)
4416 -4427 0
4417 -4428 0
4410 -4427 0
4410 4416 -4428 0
4410 4417 -4430 0
4411 -4428 0
4411 4416 -4430 0
4411 4417 -4432 0
c (0<=(aux1062 + aux1064 - aux1067))
-4417 4432 0
-4416 4430 0
-4411 4432 0
-4411 -4417 4430 0
-4411 -4416 4428 0
-4410 4430 0
-4410 -4417 4428 0
-4410 -4416 4427 0
c ((SATLiteral(286) + SATLiteral(406) - aux1068)<=0)
-406 -4434 0
-286 -4434 0
-286 -406 -4435 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1068))
406 4435 0
286 4435 0
286 406 4434 0
c ((SATLiteral(301) + SATLiteral(391) - aux1069)<=0)
-391 -4437 0
-301 -4437 0
-301 -391 -4438 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1069))
391 4438 0
301 4438 0
301 391 4437 0
c ((SATLiteral(331) + SATLiteral(376) - aux1070)<=0)
-376 -4440 0
-331 -4440 0
-331 -376 -4441 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1070))
376 4441 0
331 4441 0
331 376 4440 0
c ((SATLiteral(346) + SATLiteral(361) - aux1071)<=0)
-361 -4443 0
-346 -4443 0
-346 -361 -4444 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1071))
361 4444 0
346 4444 0
346 361 4443 0
c ((SATLiteral(309) + aux1071 - aux1072)<=0)
4443 -4446 0
4444 -4447 0
-309 -4446 0
-309 4443 -4447 0
-309 4444 -4449 0
c (0<=(SATLiteral(309) + aux1071 - aux1072))
-4444 4449 0
-4443 4447 0
309 4449 0
309 -4444 4447 0
309 -4443 4446 0
c ((aux1068 + aux1070 - aux1073)<=0)
4440 -4451 0
4441 -4452 0
4434 -4451 0
4434 4440 -4452 0
4434 4441 -4454 0
4435 -4452 0
4435 4440 -4454 0
4435 4441 -4456 0
c (0<=(aux1068 + aux1070 - aux1073))
-4441 4456 0
-4440 4454 0
-4435 4456 0
-4435 -4441 4454 0
-4435 -4440 4452 0
-4434 4454 0
-4434 -4441 4452 0
-4434 -4440 4451 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1074)<=0)
405 -4458 0
285 -4458 0
285 405 -4459 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1074))
-405 4459 0
-285 4459 0
-285 -405 4458 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1075)<=0)
390 -4461 0
300 -4461 0
300 390 -4462 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1075))
-390 4462 0
-300 4462 0
-300 -390 4461 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1076)<=0)
375 -4464 0
330 -4464 0
330 375 -4465 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1076))
-375 4465 0
-330 4465 0
-330 -375 4464 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1077)<=0)
360 -4467 0
345 -4467 0
345 360 -4468 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1077))
-360 4468 0
-345 4468 0
-345 -360 4467 0
c ((SATLiteral(310) + aux1077 - aux1078)<=0)
4467 -4470 0
4468 -4471 0
-310 -4470 0
-310 4467 -4471 0
-310 4468 -4473 0
c (0<=(SATLiteral(310) + aux1077 - aux1078))
-4468 4473 0
-4467 4471 0
310 4473 0
310 -4468 4471 0
310 -4467 4470 0
c ((aux1074 + aux1076 - aux1079)<=0)
4464 -4475 0
4465 -4476 0
4458 -4475 0
4458 4464 -4476 0
4458 4465 -4478 0
4459 -4476 0
4459 4464 -4478 0
4459 4465 -4480 0
c (0<=(aux1074 + aux1076 - aux1079))
-4465 4480 0
-4464 4478 0
-4459 4480 0
-4459 -4465 4478 0
-4459 -4464 4476 0
-4458 4478 0
-4458 -4465 4476 0
-4458 -4464 4475 0
c (( - aux1080 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4482 0
-407 -4482 0
-407 -527 -4483 0
c (0<=( - aux1080 + SATLiteral(407) + SATLiteral(527)))
527 4483 0
407 4483 0
407 527 4482 0
c (( - aux1081 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4485 0
-422 -4485 0
-422 -512 -4486 0
c (0<=( - aux1081 + SATLiteral(422) + SATLiteral(512)))
512 4486 0
422 4486 0
422 512 4485 0
c (( - aux1082 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4488 0
-452 -4488 0
-452 -497 -4489 0
c (0<=( - aux1082 + SATLiteral(452) + SATLiteral(497)))
497 4489 0
452 4489 0
452 497 4488 0
c (( - aux1083 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4491 0
-467 -4491 0
-467 -482 -4492 0
c (0<=( - aux1083 + SATLiteral(467) + SATLiteral(482)))
482 4492 0
467 4492 0
467 482 4491 0
c ((aux1083 - aux1084 + SATLiteral(437))<=0)
4491 -4494 0
4492 -4495 0
-437 -4494 0
-437 4491 -4495 0
-437 4492 -4497 0
c (0<=(aux1083 - aux1084 + SATLiteral(437)))
-4492 4497 0
-4491 4495 0
437 4497 0
437 -4492 4495 0
437 -4491 4494 0
c ((aux1080 + aux1082 - aux1085)<=0)
4488 -4499 0
4489 -4500 0
4482 -4499 0
4482 4488 -4500 0
4482 4489 -4502 0
4483 -4500 0
4483 4488 -4502 0
4483 4489 -4504 0
c (0<=(aux1080 + aux1082 - aux1085))
-4489 4504 0
-4488 4502 0
-4483 4504 0
-4483 -4489 4502 0
-4483 -4488 4500 0
-4482 4502 0
-4482 -4489 4500 0
-4482 -4488 4499 0
c (( - aux1086 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4506 0
-409 -4506 0
-409 -529 -4507 0
c (0<=( - aux1086 + SATLiteral(409) + SATLiteral(529)))
529 4507 0
409 4507 0
409 529 4506 0
c (( - aux1087 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4509 0
-424 -4509 0
-424 -514 -4510 0
c (0<=( - aux1087 + SATLiteral(424) + SATLiteral(514)))
514 4510 0
424 4510 0
424 514 4509 0
c (( - aux1088 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4512 0
-454 -4512 0
-454 -499 -4513 0
c (0<=( - aux1088 + SATLiteral(454) + SATLiteral(499)))
499 4513 0
454 4513 0
454 499 4512 0
c (( - aux1089 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4515 0
-469 -4515 0
-469 -484 -4516 0
c (0<=( - aux1089 + SATLiteral(469) + SATLiteral(484)))
484 4516 0
469 4516 0
469 484 4515 0
c ((aux1089 - aux1090 + SATLiteral(439))<=0)
4515 -4518 0
4516 -4519 0
-439 -4518 0
-439 4515 -4519 0
-439 4516 -4521 0
c (0<=(aux1089 - aux1090 + SATLiteral(439)))
-4516 4521 0
-4515 4519 0
439 4521 0
439 -4516 4519 0
439 -4515 4518 0
c ((aux1086 + aux1088 - aux1091)<=0)
4512 -4523 0
4513 -4524 0
4506 -4523 0
4506 4512 -4524 0
4506 4513 -4526 0
4507 -4524 0
4507 4512 -4526 0
4507 4513 -4528 0
c (0<=(aux1086 + aux1088 - aux1091))
-4513 4528 0
-4512 4526 0
-4507 4528 0
-4507 -4513 4526 0
-4507 -4512 4524 0
-4506 4526 0
-4506 -4513 4524 0
-4506 -4512 4523 0
c (( - aux1092 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4530 0
-411 -4530 0
-411 -531 -4531 0
c (0<=( - aux1092 + SATLiteral(411) + SATLiteral(531)))
531 4531 0
411 4531 0
411 531 4530 0
c (( - aux1093 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4533 0
-426 -4533 0
-426 -516 -4534 0
c (0<=( - aux1093 + SATLiteral(426) + SATLiteral(516)))
516 4534 0
426 4534 0
426 516 4533 0
c (( - aux1094 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4536 0
-456 -4536 0
-456 -501 -4537 0
c (0<=( - aux1094 + SATLiteral(456) + SATLiteral(501)))
501 4537 0
456 4537 0
456 501 4536 0
c (( - aux1095 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4539 0
-471 -4539 0
-471 -486 -4540 0
c (0<=( - aux1095 + SATLiteral(471) + SATLiteral(486)))
486 4540 0
471 4540 0
471 486 4539 0
c ((aux1095 - aux1096 + SATLiteral(441))<=0)
4539 -4542 0
4540 -4543 0
-441 -4542 0
-441 4539 -4543 0
-441 4540 -4545 0
c (0<=(aux1095 - aux1096 + SATLiteral(441)))
-4540 4545 0
-4539 4543 0
441 4545 0
441 -4540 4543 0
441 -4539 4542 0
c ((aux1092 + aux1094 - aux1097)<=0)
4536 -4547 0
4537 -4548 0
4530 -4547 0
4530 4536 -4548 0
4530 4537 -4550 0
4531 -4548 0
4531 4536 -4550 0
4531 4537 -4552 0
c (0<=(aux1092 + aux1094 - aux1097))
-4537 4552 0
-4536 4550 0
-4531 4552 0
-4531 -4537 4550 0
-4531 -4536 4548 0
-4530 4550 0
-4530 -4537 4548 0
-4530 -4536 4547 0
c (( - aux1098 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4554 0
-413 -4554 0
-413 -533 -4555 0
c (0<=( - aux1098 + SATLiteral(413) + SATLiteral(533)))
533 4555 0
413 4555 0
413 533 4554 0
c (( - aux1099 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4557 0
-428 -4557 0
-428 -518 -4558 0
c (0<=( - aux1099 + SATLiteral(428) + SATLiteral(518)))
518 4558 0
428 4558 0
428 518 4557 0
c (( - aux1100 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4560 0
-458 -4560 0
-458 -503 -4561 0
c (0<=( - aux1100 + SATLiteral(458) + SATLiteral(503)))
503 4561 0
458 4561 0
458 503 4560 0
c (( - aux1101 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4563 0
-473 -4563 0
-473 -488 -4564 0
c (0<=( - aux1101 + SATLiteral(473) + SATLiteral(488)))
488 4564 0
473 4564 0
473 488 4563 0
c ((aux1101 - aux1102 + SATLiteral(443))<=0)
4563 -4566 0
4564 -4567 0
-443 -4566 0
-443 4563 -4567 0
-443 4564 -4569 0
c (0<=(aux1101 - aux1102 + SATLiteral(443)))
-4564 4569 0
-4563 4567 0
443 4569 0
443 -4564 4567 0
443 -4563 4566 0
c ((aux1098 + aux1100 - aux1103)<=0)
4560 -4571 0
4561 -4572 0
4554 -4571 0
4554 4560 -4572 0
4554 4561 -4574 0
4555 -4572 0
4555 4560 -4574 0
4555 4561 -4576 0
c (0<=(aux1098 + aux1100 - aux1103))
-4561 4576 0
-4560 4574 0
-4555 4576 0
-4555 -4561 4574 0
-4555 -4560 4572 0
-4554 4574 0
-4554 -4561 4572 0
-4554 -4560 4571 0
c (( - aux1104 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4578 0
-415 -4578 0
-415 -535 -4579 0
c (0<=( - aux1104 + SATLiteral(415) + SATLiteral(535)))
535 4579 0
415 4579 0
415 535 4578 0
c (( - aux1105 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4581 0
-430 -4581 0
-430 -520 -4582 0
c (0<=( - aux1105 + SATLiteral(430) + SATLiteral(520)))
520 4582 0
430 4582 0
430 520 4581 0
c (( - aux1106 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4584 0
-460 -4584 0
-460 -505 -4585 0
c (0<=( - aux1106 + SATLiteral(460) + SATLiteral(505)))
505 4585 0
460 4585 0
460 505 4584 0
c (( - aux1107 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4587 0
-475 -4587 0
-475 -490 -4588 0
c (0<=( - aux1107 + SATLiteral(475) + SATLiteral(490)))
490 4588 0
475 4588 0
475 490 4587 0
c ((aux1107 - aux1108 + SATLiteral(445))<=0)
4587 -4590 0
4588 -4591 0
-445 -4590 0
-445 4587 -4591 0
-445 4588 -4593 0
c (0<=(aux1107 - aux1108 + SATLiteral(445)))
-4588 4593 0
-4587 4591 0
445 4593 0
445 -4588 4591 0
445 -4587 4590 0
c ((aux1104 + aux1106 - aux1109)<=0)
4584 -4595 0
4585 -4596 0
4578 -4595 0
4578 4584 -4596 0
4578 4585 -4598 0
4579 -4596 0
4579 4584 -4598 0
4579 4585 -4600 0
c (0<=(aux1104 + aux1106 - aux1109))
-4585 4600 0
-4584 4598 0
-4579 4600 0
-4579 -4585 4598 0
-4579 -4584 4596 0
-4578 4598 0
-4578 -4585 4596 0
-4578 -4584 4595 0
c (( - aux1110 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4602 0
-417 -4602 0
-417 -537 -4603 0
c (0<=( - aux1110 + SATLiteral(417) + SATLiteral(537)))
537 4603 0
417 4603 0
417 537 4602 0
c (( - aux1111 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4605 0
-432 -4605 0
-432 -522 -4606 0
c (0<=( - aux1111 + SATLiteral(432) + SATLiteral(522)))
522 4606 0
432 4606 0
432 522 4605 0
c (( - aux1112 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4608 0
-462 -4608 0
-462 -507 -4609 0
c (0<=( - aux1112 + SATLiteral(462) + SATLiteral(507)))
507 4609 0
462 4609 0
462 507 4608 0
c (( - aux1113 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4611 0
-477 -4611 0
-477 -492 -4612 0
c (0<=( - aux1113 + SATLiteral(477) + SATLiteral(492)))
492 4612 0
477 4612 0
477 492 4611 0
c ((aux1113 - aux1114 + SATLiteral(447))<=0)
4611 -4614 0
4612 -4615 0
-447 -4614 0
-447 4611 -4615 0
-447 4612 -4617 0
c (0<=(aux1113 - aux1114 + SATLiteral(447)))
-4612 4617 0
-4611 4615 0
447 4617 0
447 -4612 4615 0
447 -4611 4614 0
c ((aux1110 + aux1112 - aux1115)<=0)
4608 -4619 0
4609 -4620 0
4602 -4619 0
4602 4608 -4620 0
4602 4609 -4622 0
4603 -4620 0
4603 4608 -4622 0
4603 4609 -4624 0
c (0<=(aux1110 + aux1112 - aux1115))
-4609 4624 0
-4608 4622 0
-4603 4624 0
-4603 -4609 4622 0
-4603 -4608 4620 0
-4602 4622 0
-4602 -4609 4620 0
-4602 -4608 4619 0
c (( - aux1116 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4626 0
-419 -4626 0
-419 -539 -4627 0
c (0<=( - aux1116 + SATLiteral(419) + SATLiteral(539)))
539 4627 0
419 4627 0
419 539 4626 0
c (( - aux1117 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4629 0
-434 -4629 0
-434 -524 -4630 0
c (0<=( - aux1117 + SATLiteral(434) + SATLiteral(524)))
524 4630 0
434 4630 0
434 524 4629 0
c (( - aux1118 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4632 0
-464 -4632 0
-464 -509 -4633 0
c (0<=( - aux1118 + SATLiteral(464) + SATLiteral(509)))
509 4633 0
464 4633 0
464 509 4632 0
c (( - aux1119 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4635 0
-479 -4635 0
-479 -494 -4636 0
c (0<=( - aux1119 + SATLiteral(479) + SATLiteral(494)))
494 4636 0
479 4636 0
479 494 4635 0
c ((aux1119 - aux1120 + SATLiteral(449))<=0)
4635 -4638 0
4636 -4639 0
-449 -4638 0
-449 4635 -4639 0
-449 4636 -4641 0
c (0<=(aux1119 - aux1120 + SATLiteral(449)))
-4636 4641 0
-4635 4639 0
449 4641 0
449 -4636 4639 0
449 -4635 4638 0
c ((aux1116 + aux1118 - aux1121)<=0)
4632 -4643 0
4633 -4644 0
4626 -4643 0
4626 4632 -4644 0
4626 4633 -4646 0
4627 -4644 0
4627 4632 -4646 0
4627 4633 -4648 0
c (0<=(aux1116 + aux1118 - aux1121))
-4633 4648 0
-4632 4646 0
-4627 4648 0
-4627 -4633 4646 0
-4627 -4632 4644 0
-4626 4646 0
-4626 -4633 4644 0
-4626 -4632 4643 0
c (( - aux1122 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4650 0
-421 -4650 0
-421 -541 -4651 0
c (0<=( - aux1122 + SATLiteral(421) + SATLiteral(541)))
541 4651 0
421 4651 0
421 541 4650 0
c (( - aux1123 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4653 0
-436 -4653 0
-436 -526 -4654 0
c (0<=( - aux1123 + SATLiteral(436) + SATLiteral(526)))
526 4654 0
436 4654 0
436 526 4653 0
c (( - aux1124 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4656 0
-466 -4656 0
-466 -511 -4657 0
c (0<=( - aux1124 + SATLiteral(466) + SATLiteral(511)))
511 4657 0
466 4657 0
466 511 4656 0
c (( - aux1125 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4659 0
-481 -4659 0
-481 -496 -4660 0
c (0<=( - aux1125 + SATLiteral(481) + SATLiteral(496)))
496 4660 0
481 4660 0
481 496 4659 0
c ((aux1125 - aux1126 + SATLiteral(451))<=0)
4659 -4662 0
4660 -4663 0
-451 -4662 0
-451 4659 -4663 0
-451 4660 -4665 0
c (0<=(aux1125 - aux1126 + SATLiteral(451)))
-4660 4665 0
-4659 4663 0
451 4665 0
451 -4660 4663 0
451 -4659 4662 0
c ((aux1122 + aux1124 - aux1127)<=0)
4656 -4667 0
4657 -4668 0
4650 -4667 0
4650 4656 -4668 0
4650 4657 -4670 0
4651 -4668 0
4651 4656 -4670 0
4651 4657 -4672 0
c (0<=(aux1122 + aux1124 - aux1127))
-4657 4672 0
-4656 4670 0
-4651 4672 0
-4651 -4657 4670 0
-4651 -4656 4668 0
-4650 4670 0
-4650 -4657 4668 0
-4650 -4656 4667 0
c (( - aux1128 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4674 0
420 -4674 0
420 540 -4675 0
c (0<=( - aux1128 + SATLiteral(-420) + SATLiteral(-540)))
-540 4675 0
-420 4675 0
-420 -540 4674 0
c (( - aux1129 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4677 0
435 -4677 0
435 525 -4678 0
c (0<=( - aux1129 + SATLiteral(-435) + SATLiteral(-525)))
-525 4678 0
-435 4678 0
-435 -525 4677 0
c (( - aux1130 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4680 0
465 -4680 0
465 510 -4681 0
c (0<=( - aux1130 + SATLiteral(-465) + SATLiteral(-510)))
-510 4681 0
-465 4681 0
-465 -510 4680 0
c (( - aux1131 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4683 0
480 -4683 0
480 495 -4684 0
c (0<=( - aux1131 + SATLiteral(-480) + SATLiteral(-495)))
-495 4684 0
-480 4684 0
-480 -495 4683 0
c ((aux1131 - aux1132 + SATLiteral(-450))<=0)
4683 -4686 0
4684 -4687 0
450 -4686 0
450 4683 -4687 0
450 4684 -4689 0
c (0<=(aux1131 - aux1132 + SATLiteral(-450)))
-4684 4689 0
-4683 4687 0
-450 4689 0
-450 -4684 4687 0
-450 -4683 4686 0
c ((aux1128 + aux1130 - aux1133)<=0)
4680 -4691 0
4681 -4692 0
4674 -4691 0
4674 4680 -4692 0
4674 4681 -4694 0
4675 -4692 0
4675 4680 -4694 0
4675 4681 -4696 0
c (0<=(aux1128 + aux1130 - aux1133))
-4681 4696 0
-4680 4694 0
-4675 4696 0
-4675 -4681 4694 0
-4675 -4680 4692 0
-4674 4694 0
-4674 -4681 4692 0
-4674 -4680 4691 0
c (( - aux1134 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4698 0
-542 -4698 0
-542 -662 -4699 0
c (0<=( - aux1134 + SATLiteral(542) + SATLiteral(662)))
662 4699 0
542 4699 0
542 662 4698 0
c (( - aux1135 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4701 0
-557 -4701 0
-557 -647 -4702 0
c (0<=( - aux1135 + SATLiteral(557) + SATLiteral(647)))
647 4702 0
557 4702 0
557 647 4701 0
c (( - aux1136 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4704 0
-587 -4704 0
-587 -632 -4705 0
c (0<=( - aux1136 + SATLiteral(587) + SATLiteral(632)))
632 4705 0
587 4705 0
587 632 4704 0
c (( - aux1137 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4707 0
-602 -4707 0
-602 -617 -4708 0
c (0<=( - aux1137 + SATLiteral(602) + SATLiteral(617)))
617 4708 0
602 4708 0
602 617 4707 0
c ((aux1137 - aux1138 + SATLiteral(572))<=0)
4707 -4710 0
4708 -4711 0
-572 -4710 0
-572 4707 -4711 0
-572 4708 -4713 0
c (0<=(aux1137 - aux1138 + SATLiteral(572)))
-4708 4713 0
-4707 4711 0
572 4713 0
572 -4708 4711 0
572 -4707 4710 0
c ((aux1134 + aux1136 - aux1139)<=0)
4704 -4715 0
4705 -4716 0
4698 -4715 0
4698 4704 -4716 0
4698 4705 -4718 0
4699 -4716 0
4699 4704 -4718 0
4699 4705 -4720 0
c (0<=(aux1134 + aux1136 - aux1139))
-4705 4720 0
-4704 4718 0
-4699 4720 0
-4699 -4705 4718 0
-4699 -4704 4716 0
-4698 4718 0
-4698 -4705 4716 0
-4698 -4704 4715 0
c (( - aux1140 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4722 0
-544 -4722 0
-544 -664 -4723 0
c (0<=( - aux1140 + SATLiteral(544) + SATLiteral(664)))
664 4723 0
544 4723 0
544 664 4722 0
c (( - aux1141 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4725 0
-559 -4725 0
-559 -649 -4726 0
c (0<=( - aux1141 + SATLiteral(559) + SATLiteral(649)))
649 4726 0
559 4726 0
559 649 4725 0
c (( - aux1142 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4728 0
-589 -4728 0
-589 -634 -4729 0
c (0<=( - aux1142 + SATLiteral(589) + SATLiteral(634)))
634 4729 0
589 4729 0
589 634 4728 0
c (( - aux1143 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4731 0
-604 -4731 0
-604 -619 -4732 0
c (0<=( - aux1143 + SATLiteral(604) + SATLiteral(619)))
619 4732 0
604 4732 0
604 619 4731 0
c ((aux1143 - aux1144 + SATLiteral(574))<=0)
4731 -4734 0
4732 -4735 0
-574 -4734 0
-574 4731 -4735 0
-574 4732 -4737 0
c (0<=(aux1143 - aux1144 + SATLiteral(574)))
-4732 4737 0
-4731 4735 0
574 4737 0
574 -4732 4735 0
574 -4731 4734 0
c ((aux1140 + aux1142 - aux1145)<=0)
4728 -4739 0
4729 -4740 0
4722 -4739 0
4722 4728 -4740 0
4722 4729 -4742 0
4723 -4740 0
4723 4728 -4742 0
4723 4729 -4744 0
c (0<=(aux1140 + aux1142 - aux1145))
-4729 4744 0
-4728 4742 0
-4723 4744 0
-4723 -4729 4742 0
-4723 -4728 4740 0
-4722 4742 0
-4722 -4729 4740 0
-4722 -4728 4739 0
c (( - aux1146 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4746 0
-546 -4746 0
-546 -666 -4747 0
c (0<=( - aux1146 + SATLiteral(546) + SATLiteral(666)))
666 4747 0
546 4747 0
546 666 4746 0
c (( - aux1147 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4749 0
-561 -4749 0
-561 -651 -4750 0
c (0<=( - aux1147 + SATLiteral(561) + SATLiteral(651)))
651 4750 0
561 4750 0
561 651 4749 0
c (( - aux1148 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4752 0
-591 -4752 0
-591 -636 -4753 0
c (0<=( - aux1148 + SATLiteral(591) + SATLiteral(636)))
636 4753 0
591 4753 0
591 636 4752 0
c (( - aux1149 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4755 0
-606 -4755 0
-606 -621 -4756 0
c (0<=( - aux1149 + SATLiteral(606) + SATLiteral(621)))
621 4756 0
606 4756 0
606 621 4755 0
c ((aux1149 - aux1150 + SATLiteral(576))<=0)
4755 -4758 0
4756 -4759 0
-576 -4758 0
-576 4755 -4759 0
-576 4756 -4761 0
c (0<=(aux1149 - aux1150 + SATLiteral(576)))
-4756 4761 0
-4755 4759 0
576 4761 0
576 -4756 4759 0
576 -4755 4758 0
c ((aux1146 + aux1148 - aux1151)<=0)
4752 -4763 0
4753 -4764 0
4746 -4763 0
4746 4752 -4764 0
4746 4753 -4766 0
4747 -4764 0
4747 4752 -4766 0
4747 4753 -4768 0
c (0<=(aux1146 + aux1148 - aux1151))
-4753 4768 0
-4752 4766 0
-4747 4768 0
-4747 -4753 4766 0
-4747 -4752 4764 0
-4746 4766 0
-4746 -4753 4764 0
-4746 -4752 4763 0
c (( - aux1152 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4770 0
-548 -4770 0
-548 -668 -4771 0
c (0<=( - aux1152 + SATLiteral(548) + SATLiteral(668)))
668 4771 0
548 4771 0
548 668 4770 0
c (( - aux1153 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4773 0
-563 -4773 0
-563 -653 -4774 0
c (0<=( - aux1153 + SATLiteral(563) + SATLiteral(653)))
653 4774 0
563 4774 0
563 653 4773 0
c (( - aux1154 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4776 0
-593 -4776 0
-593 -638 -4777 0
c (0<=( - aux1154 + SATLiteral(593) + SATLiteral(638)))
638 4777 0
593 4777 0
593 638 4776 0
c (( - aux1155 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4779 0
-608 -4779 0
-608 -623 -4780 0
c (0<=( - aux1155 + SATLiteral(608) + SATLiteral(623)))
623 4780 0
608 4780 0
608 623 4779 0
c ((aux1155 - aux1156 + SATLiteral(578))<=0)
4779 -4782 0
4780 -4783 0
-578 -4782 0
-578 4779 -4783 0
-578 4780 -4785 0
c (0<=(aux1155 - aux1156 + SATLiteral(578)))
-4780 4785 0
-4779 4783 0
578 4785 0
578 -4780 4783 0
578 -4779 4782 0
c ((aux1152 + aux1154 - aux1157)<=0)
4776 -4787 0
4777 -4788 0
4770 -4787 0
4770 4776 -4788 0
4770 4777 -4790 0
4771 -4788 0
4771 4776 -4790 0
4771 4777 -4792 0
c (0<=(aux1152 + aux1154 - aux1157))
-4777 4792 0
-4776 4790 0
-4771 4792 0
-4771 -4777 4790 0
-4771 -4776 4788 0
-4770 4790 0
-4770 -4777 4788 0
-4770 -4776 4787 0
c (( - aux1158 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4794 0
-550 -4794 0
-550 -670 -4795 0
c (0<=( - aux1158 + SATLiteral(550) + SATLiteral(670)))
670 4795 0
550 4795 0
550 670 4794 0
c (( - aux1159 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4797 0
-565 -4797 0
-565 -655 -4798 0
c (0<=( - aux1159 + SATLiteral(565) + SATLiteral(655)))
655 4798 0
565 4798 0
565 655 4797 0
c (( - aux1160 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4800 0
-595 -4800 0
-595 -640 -4801 0
c (0<=( - aux1160 + SATLiteral(595) + SATLiteral(640)))
640 4801 0
595 4801 0
595 640 4800 0
c (( - aux1161 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4803 0
-610 -4803 0
-610 -625 -4804 0
c (0<=( - aux1161 + SATLiteral(610) + SATLiteral(625)))
625 4804 0
610 4804 0
610 625 4803 0
c ((aux1161 - aux1162 + SATLiteral(580))<=0)
4803 -4806 0
4804 -4807 0
-580 -4806 0
-580 4803 -4807 0
-580 4804 -4809 0
c (0<=(aux1161 - aux1162 + SATLiteral(580)))
-4804 4809 0
-4803 4807 0
580 4809 0
580 -4804 4807 0
580 -4803 4806 0
c ((aux1158 + aux1160 - aux1163)<=0)
4800 -4811 0
4801 -4812 0
4794 -4811 0
4794 4800 -4812 0
4794 4801 -4814 0
4795 -4812 0
4795 4800 -4814 0
4795 4801 -4816 0
c (0<=(aux1158 + aux1160 - aux1163))
-4801 4816 0
-4800 4814 0
-4795 4816 0
-4795 -4801 4814 0
-4795 -4800 4812 0
-4794 4814 0
-4794 -4801 4812 0
-4794 -4800 4811 0
c (( - aux1164 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4818 0
-552 -4818 0
-552 -672 -4819 0
c (0<=( - aux1164 + SATLiteral(552) + SATLiteral(672)))
672 4819 0
552 4819 0
552 672 4818 0
c (( - aux1165 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4821 0
-567 -4821 0
-567 -657 -4822 0
c (0<=( - aux1165 + SATLiteral(567) + SATLiteral(657)))
657 4822 0
567 4822 0
567 657 4821 0
c (( - aux1166 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4824 0
-597 -4824 0
-597 -642 -4825 0
c (0<=( - aux1166 + SATLiteral(597) + SATLiteral(642)))
642 4825 0
597 4825 0
597 642 4824 0
c (( - aux1167 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4827 0
-612 -4827 0
-612 -627 -4828 0
c (0<=( - aux1167 + SATLiteral(612) + SATLiteral(627)))
627 4828 0
612 4828 0
612 627 4827 0
c ((aux1167 - aux1168 + SATLiteral(582))<=0)
4827 -4830 0
4828 -4831 0
-582 -4830 0
-582 4827 -4831 0
-582 4828 -4833 0
c (0<=(aux1167 - aux1168 + SATLiteral(582)))
-4828 4833 0
-4827 4831 0
582 4833 0
582 -4828 4831 0
582 -4827 4830 0
c ((aux1164 + aux1166 - aux1169)<=0)
4824 -4835 0
4825 -4836 0
4818 -4835 0
4818 4824 -4836 0
4818 4825 -4838 0
4819 -4836 0
4819 4824 -4838 0
4819 4825 -4840 0
c (0<=(aux1164 + aux1166 - aux1169))
-4825 4840 0
-4824 4838 0
-4819 4840 0
-4819 -4825 4838 0
-4819 -4824 4836 0
-4818 4838 0
-4818 -4825 4836 0
-4818 -4824 4835 0
c (( - aux1170 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4842 0
-554 -4842 0
-554 -674 -4843 0
c (0<=( - aux1170 + SATLiteral(554) + SATLiteral(674)))
674 4843 0
554 4843 0
554 674 4842 0
c (( - aux1171 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4845 0
-569 -4845 0
-569 -659 -4846 0
c (0<=( - aux1171 + SATLiteral(569) + SATLiteral(659)))
659 4846 0
569 4846 0
569 659 4845 0
c (( - aux1172 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4848 0
-599 -4848 0
-599 -644 -4849 0
c (0<=( - aux1172 + SATLiteral(599) + SATLiteral(644)))
644 4849 0
599 4849 0
599 644 4848 0
c (( - aux1173 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4851 0
-614 -4851 0
-614 -629 -4852 0
c (0<=( - aux1173 + SATLiteral(614) + SATLiteral(629)))
629 4852 0
614 4852 0
614 629 4851 0
c ((aux1173 - aux1174 + SATLiteral(584))<=0)
4851 -4854 0
4852 -4855 0
-584 -4854 0
-584 4851 -4855 0
-584 4852 -4857 0
c (0<=(aux1173 - aux1174 + SATLiteral(584)))
-4852 4857 0
-4851 4855 0
584 4857 0
584 -4852 4855 0
584 -4851 4854 0
c ((aux1170 + aux1172 - aux1175)<=0)
4848 -4859 0
4849 -4860 0
4842 -4859 0
4842 4848 -4860 0
4842 4849 -4862 0
4843 -4860 0
4843 4848 -4862 0
4843 4849 -4864 0
c (0<=(aux1170 + aux1172 - aux1175))
-4849 4864 0
-4848 4862 0
-4843 4864 0
-4843 -4849 4862 0
-4843 -4848 4860 0
-4842 4862 0
-4842 -4849 4860 0
-4842 -4848 4859 0
c (( - aux1176 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4866 0
-556 -4866 0
-556 -676 -4867 0
c (0<=( - aux1176 + SATLiteral(556) + SATLiteral(676)))
676 4867 0
556 4867 0
556 676 4866 0
c (( - aux1177 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4869 0
-571 -4869 0
-571 -661 -4870 0
c (0<=( - aux1177 + SATLiteral(571) + SATLiteral(661)))
661 4870 0
571 4870 0
571 661 4869 0
c (( - aux1178 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4872 0
-601 -4872 0
-601 -646 -4873 0
c (0<=( - aux1178 + SATLiteral(601) + SATLiteral(646)))
646 4873 0
601 4873 0
601 646 4872 0
c (( - aux1179 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -4875 0
-616 -4875 0
-616 -631 -4876 0
c (0<=( - aux1179 + SATLiteral(616) + SATLiteral(631)))
631 4876 0
616 4876 0
616 631 4875 0
c ((aux1179 - aux1180 + SATLiteral(586))<=0)
4875 -4878 0
4876 -4879 0
-586 -4878 0
-586 4875 -4879 0
-586 4876 -4881 0
c (0<=(aux1179 - aux1180 + SATLiteral(586)))
-4876 4881 0
-4875 4879 0
586 4881 0
586 -4876 4879 0
586 -4875 4878 0
c ((aux1176 + aux1178 - aux1181)<=0)
4872 -4883 0
4873 -4884 0
4866 -4883 0
4866 4872 -4884 0
4866 4873 -4886 0
4867 -4884 0
4867 4872 -4886 0
4867 4873 -4888 0
c (0<=(aux1176 + aux1178 - aux1181))
-4873 4888 0
-4872 4886 0
-4867 4888 0
-4867 -4873 4886 0
-4867 -4872 4884 0
-4866 4886 0
-4866 -4873 4884 0
-4866 -4872 4883 0
c (( - aux1182 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -4890 0
555 -4890 0
555 675 -4891 0
c (0<=( - aux1182 + SATLiteral(-555) + SATLiteral(-675)))
-675 4891 0
-555 4891 0
-555 -675 4890 0
c (( - aux1183 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -4893 0
570 -4893 0
570 660 -4894 0
c (0<=( - aux1183 + SATLiteral(-570) + SATLiteral(-660)))
-660 4894 0
-570 4894 0
-570 -660 4893 0
c (( - aux1184 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -4896 0
600 -4896 0
600 645 -4897 0
c (0<=( - aux1184 + SATLiteral(-600) + SATLiteral(-645)))
-645 4897 0
-600 4897 0
-600 -645 4896 0
c (( - aux1185 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -4899 0
615 -4899 0
615 630 -4900 0
c (0<=( - aux1185 + SATLiteral(-615) + SATLiteral(-630)))
-630 4900 0
-615 4900 0
-615 -630 4899 0
c ((aux1185 - aux1186 + SATLiteral(-585))<=0)
4899 -4902 0
4900 -4903 0
585 -4902 0
585 4899 -4903 0
585 4900 -4905 0
c (0<=(aux1185 - aux1186 + SATLiteral(-585)))
-4900 4905 0
-4899 4903 0
-585 4905 0
-585 -4900 4903 0
-585 -4899 4902 0
c ((aux1182 + aux1184 - aux1187)<=0)
4896 -4907 0
4897 -4908 0
4890 -4907 0
4890 4896 -4908 0
4890 4897 -4910 0
4891 -4908 0
4891 4896 -4910 0
4891 4897 -4912 0
c (0<=(aux1182 + aux1184 - aux1187))
-4897 4912 0
-4896 4910 0
-4891 4912 0
-4891 -4897 4910 0
-4891 -4896 4908 0
-4890 4910 0
-4890 -4897 4908 0
-4890 -4896 4907 0
c ((SATLiteral(677) + SATLiteral(797) - aux1188)<=0)
-797 -4914 0
-677 -4914 0
-677 -797 -4915 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1188))
797 4915 0
677 4915 0
677 797 4914 0
c ((SATLiteral(692) + SATLiteral(782) - aux1189)<=0)
-782 -4917 0
-692 -4917 0
-692 -782 -4918 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1189))
782 4918 0
692 4918 0
692 782 4917 0
c ((SATLiteral(722) + SATLiteral(767) - aux1190)<=0)
-767 -4920 0
-722 -4920 0
-722 -767 -4921 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1190))
767 4921 0
722 4921 0
722 767 4920 0
c ((SATLiteral(737) + SATLiteral(752) - aux1191)<=0)
-752 -4923 0
-737 -4923 0
-737 -752 -4924 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1191))
752 4924 0
737 4924 0
737 752 4923 0
c ((SATLiteral(707) + aux1191 - aux1192)<=0)
4923 -4926 0
4924 -4927 0
-707 -4926 0
-707 4923 -4927 0
-707 4924 -4929 0
c (0<=(SATLiteral(707) + aux1191 - aux1192))
-4924 4929 0
-4923 4927 0
707 4929 0
707 -4924 4927 0
707 -4923 4926 0
c ((aux1188 + aux1190 - aux1193)<=0)
4920 -4931 0
4921 -4932 0
4914 -4931 0
4914 4920 -4932 0
4914 4921 -4934 0
4915 -4932 0
4915 4920 -4934 0
4915 4921 -4936 0
c (0<=(aux1188 + aux1190 - aux1193))
-4921 4936 0
-4920 4934 0
-4915 4936 0
-4915 -4921 4934 0
-4915 -4920 4932 0
-4914 4934 0
-4914 -4921 4932 0
-4914 -4920 4931 0
c ((SATLiteral(679) + SATLiteral(799) - aux1194)<=0)
-799 -4938 0
-679 -4938 0
-679 -799 -4939 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1194))
799 4939 0
679 4939 0
679 799 4938 0
c ((SATLiteral(694) + SATLiteral(784) - aux1195)<=0)
-784 -4941 0
-694 -4941 0
-694 -784 -4942 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1195))
784 4942 0
694 4942 0
694 784 4941 0
c ((SATLiteral(724) + SATLiteral(769) - aux1196)<=0)
-769 -4944 0
-724 -4944 0
-724 -769 -4945 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1196))
769 4945 0
724 4945 0
724 769 4944 0
c ((SATLiteral(739) + SATLiteral(754) - aux1197)<=0)
-754 -4947 0
-739 -4947 0
-739 -754 -4948 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1197))
754 4948 0
739 4948 0
739 754 4947 0
c ((SATLiteral(709) + aux1197 - aux1198)<=0)
4947 -4950 0
4948 -4951 0
-709 -4950 0
-709 4947 -4951 0
-709 4948 -4953 0
c (0<=(SATLiteral(709) + aux1197 - aux1198))
-4948 4953 0
-4947 4951 0
709 4953 0
709 -4948 4951 0
709 -4947 4950 0
c ((aux1194 + aux1196 - aux1199)<=0)
4944 -4955 0
4945 -4956 0
4938 -4955 0
4938 4944 -4956 0
4938 4945 -4958 0
4939 -4956 0
4939 4944 -4958 0
4939 4945 -4960 0
c (0<=(aux1194 + aux1196 - aux1199))
-4945 4960 0
-4944 4958 0
-4939 4960 0
-4939 -4945 4958 0
-4939 -4944 4956 0
-4938 4958 0
-4938 -4945 4956 0
-4938 -4944 4955 0
c ((SATLiteral(681) + SATLiteral(801) - aux1200)<=0)
-801 -4962 0
-681 -4962 0
-681 -801 -4963 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1200))
801 4963 0
681 4963 0
681 801 4962 0
c ((SATLiteral(696) + SATLiteral(786) - aux1201)<=0)
-786 -4965 0
-696 -4965 0
-696 -786 -4966 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1201))
786 4966 0
696 4966 0
696 786 4965 0
c ((SATLiteral(726) + SATLiteral(771) - aux1202)<=0)
-771 -4968 0
-726 -4968 0
-726 -771 -4969 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1202))
771 4969 0
726 4969 0
726 771 4968 0
c ((SATLiteral(741) + SATLiteral(756) - aux1203)<=0)
-756 -4971 0
-741 -4971 0
-741 -756 -4972 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1203))
756 4972 0
741 4972 0
741 756 4971 0
c ((SATLiteral(711) + aux1203 - aux1204)<=0)
4971 -4974 0
4972 -4975 0
-711 -4974 0
-711 4971 -4975 0
-711 4972 -4977 0
c (0<=(SATLiteral(711) + aux1203 - aux1204))
-4972 4977 0
-4971 4975 0
711 4977 0
711 -4972 4975 0
711 -4971 4974 0
c ((aux1200 + aux1202 - aux1205)<=0)
4968 -4979 0
4969 -4980 0
4962 -4979 0
4962 4968 -4980 0
4962 4969 -4982 0
4963 -4980 0
4963 4968 -4982 0
4963 4969 -4984 0
c (0<=(aux1200 + aux1202 - aux1205))
-4969 4984 0
-4968 4982 0
-4963 4984 0
-4963 -4969 4982 0
-4963 -4968 4980 0
-4962 4982 0
-4962 -4969 4980 0
-4962 -4968 4979 0
c ((SATLiteral(683) + SATLiteral(803) - aux1206)<=0)
-803 -4986 0
-683 -4986 0
-683 -803 -4987 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1206))
803 4987 0
683 4987 0
683 803 4986 0
c ((SATLiteral(698) + SATLiteral(788) - aux1207)<=0)
-788 -4989 0
-698 -4989 0
-698 -788 -4990 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1207))
788 4990 0
698 4990 0
698 788 4989 0
c ((SATLiteral(728) + SATLiteral(773) - aux1208)<=0)
-773 -4992 0
-728 -4992 0
-728 -773 -4993 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1208))
773 4993 0
728 4993 0
728 773 4992 0
c ((SATLiteral(743) + SATLiteral(758) - aux1209)<=0)
-758 -4995 0
-743 -4995 0
-743 -758 -4996 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1209))
758 4996 0
743 4996 0
743 758 4995 0
c ((SATLiteral(713) + aux1209 - aux1210)<=0)
4995 -4998 0
4996 -4999 0
-713 -4998 0
-713 4995 -4999 0
-713 4996 -5001 0
c (0<=(SATLiteral(713) + aux1209 - aux1210))
-4996 5001 0
-4995 4999 0
713 5001 0
713 -4996 4999 0
713 -4995 4998 0
c ((aux1206 + aux1208 - aux1211)<=0)
4992 -5003 0
4993 -5004 0
4986 -5003 0
4986 4992 -5004 0
4986 4993 -5006 0
4987 -5004 0
4987 4992 -5006 0
4987 4993 -5008 0
c (0<=(aux1206 + aux1208 - aux1211))
-4993 5008 0
-4992 5006 0
-4987 5008 0
-4987 -4993 5006 0
-4987 -4992 5004 0
-4986 5006 0
-4986 -4993 5004 0
-4986 -4992 5003 0
c ((SATLiteral(685) + SATLiteral(805) - aux1212)<=0)
-805 -5010 0
-685 -5010 0
-685 -805 -5011 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1212))
805 5011 0
685 5011 0
685 805 5010 0
c ((SATLiteral(700) + SATLiteral(790) - aux1213)<=0)
-790 -5013 0
-700 -5013 0
-700 -790 -5014 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1213))
790 5014 0
700 5014 0
700 790 5013 0
c ((SATLiteral(730) + SATLiteral(775) - aux1214)<=0)
-775 -5016 0
-730 -5016 0
-730 -775 -5017 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1214))
775 5017 0
730 5017 0
730 775 5016 0
c ((SATLiteral(745) + SATLiteral(760) - aux1215)<=0)
-760 -5019 0
-745 -5019 0
-745 -760 -5020 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1215))
760 5020 0
745 5020 0
745 760 5019 0
c ((SATLiteral(715) + aux1215 - aux1216)<=0)
5019 -5022 0
5020 -5023 0
-715 -5022 0
-715 5019 -5023 0
-715 5020 -5025 0
c (0<=(SATLiteral(715) + aux1215 - aux1216))
-5020 5025 0
-5019 5023 0
715 5025 0
715 -5020 5023 0
715 -5019 5022 0
c ((aux1212 + aux1214 - aux1217)<=0)
5016 -5027 0
5017 -5028 0
5010 -5027 0
5010 5016 -5028 0
5010 5017 -5030 0
5011 -5028 0
5011 5016 -5030 0
5011 5017 -5032 0
c (0<=(aux1212 + aux1214 - aux1217))
-5017 5032 0
-5016 5030 0
-5011 5032 0
-5011 -5017 5030 0
-5011 -5016 5028 0
-5010 5030 0
-5010 -5017 5028 0
-5010 -5016 5027 0
c ((SATLiteral(687) + SATLiteral(807) - aux1218)<=0)
-807 -5034 0
-687 -5034 0
-687 -807 -5035 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1218))
807 5035 0
687 5035 0
687 807 5034 0
c ((SATLiteral(702) + SATLiteral(792) - aux1219)<=0)
-792 -5037 0
-702 -5037 0
-702 -792 -5038 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1219))
792 5038 0
702 5038 0
702 792 5037 0
c ((SATLiteral(732) + SATLiteral(777) - aux1220)<=0)
-777 -5040 0
-732 -5040 0
-732 -777 -5041 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1220))
777 5041 0
732 5041 0
732 777 5040 0
c ((SATLiteral(747) + SATLiteral(762) - aux1221)<=0)
-762 -5043 0
-747 -5043 0
-747 -762 -5044 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1221))
762 5044 0
747 5044 0
747 762 5043 0
c ((SATLiteral(717) + aux1221 - aux1222)<=0)
5043 -5046 0
5044 -5047 0
-717 -5046 0
-717 5043 -5047 0
-717 5044 -5049 0
c (0<=(SATLiteral(717) + aux1221 - aux1222))
-5044 5049 0
-5043 5047 0
717 5049 0
717 -5044 5047 0
717 -5043 5046 0
c ((aux1218 + aux1220 - aux1223)<=0)
5040 -5051 0
5041 -5052 0
5034 -5051 0
5034 5040 -5052 0
5034 5041 -5054 0
5035 -5052 0
5035 5040 -5054 0
5035 5041 -5056 0
c (0<=(aux1218 + aux1220 - aux1223))
-5041 5056 0
-5040 5054 0
-5035 5056 0
-5035 -5041 5054 0
-5035 -5040 5052 0
-5034 5054 0
-5034 -5041 5052 0
-5034 -5040 5051 0
c ((SATLiteral(689) + SATLiteral(809) - aux1224)<=0)
-809 -5058 0
-689 -5058 0
-689 -809 -5059 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1224))
809 5059 0
689 5059 0
689 809 5058 0
c ((SATLiteral(704) + SATLiteral(794) - aux1225)<=0)
-794 -5061 0
-704 -5061 0
-704 -794 -5062 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1225))
794 5062 0
704 5062 0
704 794 5061 0
c ((SATLiteral(734) + SATLiteral(779) - aux1226)<=0)
-779 -5064 0
-734 -5064 0
-734 -779 -5065 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1226))
779 5065 0
734 5065 0
734 779 5064 0
c ((SATLiteral(749) + SATLiteral(764) - aux1227)<=0)
-764 -5067 0
-749 -5067 0
-749 -764 -5068 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1227))
764 5068 0
749 5068 0
749 764 5067 0
c ((SATLiteral(719) + aux1227 - aux1228)<=0)
5067 -5070 0
5068 -5071 0
-719 -5070 0
-719 5067 -5071 0
-719 5068 -5073 0
c (0<=(SATLiteral(719) + aux1227 - aux1228))
-5068 5073 0
-5067 5071 0
719 5073 0
719 -5068 5071 0
719 -5067 5070 0
c ((aux1224 + aux1226 - aux1229)<=0)
5064 -5075 0
5065 -5076 0
5058 -5075 0
5058 5064 -5076 0
5058 5065 -5078 0
5059 -5076 0
5059 5064 -5078 0
5059 5065 -5080 0
c (0<=(aux1224 + aux1226 - aux1229))
-5065 5080 0
-5064 5078 0
-5059 5080 0
-5059 -5065 5078 0
-5059 -5064 5076 0
-5058 5078 0
-5058 -5065 5076 0
-5058 -5064 5075 0
c ((SATLiteral(691) + SATLiteral(811) - aux1230)<=0)
-811 -5082 0
-691 -5082 0
-691 -811 -5083 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1230))
811 5083 0
691 5083 0
691 811 5082 0
c ((SATLiteral(706) + SATLiteral(796) - aux1231)<=0)
-796 -5085 0
-706 -5085 0
-706 -796 -5086 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1231))
796 5086 0
706 5086 0
706 796 5085 0
c ((SATLiteral(736) + SATLiteral(781) - aux1232)<=0)
-781 -5088 0
-736 -5088 0
-736 -781 -5089 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1232))
781 5089 0
736 5089 0
736 781 5088 0
c ((SATLiteral(751) + SATLiteral(766) - aux1233)<=0)
-766 -5091 0
-751 -5091 0
-751 -766 -5092 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1233))
766 5092 0
751 5092 0
751 766 5091 0
c ((SATLiteral(721) + aux1233 - aux1234)<=0)
5091 -5094 0
5092 -5095 0
-721 -5094 0
-721 5091 -5095 0
-721 5092 -5097 0
c (0<=(SATLiteral(721) + aux1233 - aux1234))
-5092 5097 0
-5091 5095 0
721 5097 0
721 -5092 5095 0
721 -5091 5094 0
c ((aux1230 + aux1232 - aux1235)<=0)
5088 -5099 0
5089 -5100 0
5082 -5099 0
5082 5088 -5100 0
5082 5089 -5102 0
5083 -5100 0
5083 5088 -5102 0
5083 5089 -5104 0
c (0<=(aux1230 + aux1232 - aux1235))
-5089 5104 0
-5088 5102 0
-5083 5104 0
-5083 -5089 5102 0
-5083 -5088 5100 0
-5082 5102 0
-5082 -5089 5100 0
-5082 -5088 5099 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1236)<=0)
810 -5106 0
690 -5106 0
690 810 -5107 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1236))
-810 5107 0
-690 5107 0
-690 -810 5106 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1237)<=0)
795 -5109 0
705 -5109 0
705 795 -5110 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1237))
-795 5110 0
-705 5110 0
-705 -795 5109 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1238)<=0)
780 -5112 0
735 -5112 0
735 780 -5113 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1238))
-780 5113 0
-735 5113 0
-735 -780 5112 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1239)<=0)
765 -5115 0
750 -5115 0
750 765 -5116 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1239))
-765 5116 0
-750 5116 0
-750 -765 5115 0
c ((SATLiteral(-720) + aux1239 - aux1240)<=0)
5115 -5118 0
5116 -5119 0
720 -5118 0
720 5115 -5119 0
720 5116 -5121 0
c (0<=(SATLiteral(-720) + aux1239 - aux1240))
-5116 5121 0
-5115 5119 0
-720 5121 0
-720 -5116 5119 0
-720 -5115 5118 0
c ((aux1236 + aux1238 - aux1241)<=0)
5112 -5123 0
5113 -5124 0
5106 -5123 0
5106 5112 -5124 0
5106 5113 -5126 0
5107 -5124 0
5107 5112 -5126 0
5107 5113 -5128 0
c (0<=(aux1236 + aux1238 - aux1241))
-5113 5128 0
-5112 5126 0
-5107 5128 0
-5107 -5113 5126 0
-5107 -5112 5124 0
-5106 5126 0
-5106 -5113 5124 0
-5106 -5112 5123 0
c (( - aux1242 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5130 0
-812 -5130 0
-812 -932 -5131 0
c (0<=( - aux1242 + SATLiteral(812) + SATLiteral(932)))
932 5131 0
812 5131 0
812 932 5130 0
c (( - aux1243 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5133 0
-827 -5133 0
-827 -917 -5134 0
c (0<=( - aux1243 + SATLiteral(827) + SATLiteral(917)))
917 5134 0
827 5134 0
827 917 5133 0
c (( - aux1244 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5136 0
-857 -5136 0
-857 -902 -5137 0
c (0<=( - aux1244 + SATLiteral(857) + SATLiteral(902)))
902 5137 0
857 5137 0
857 902 5136 0
c (( - aux1245 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5139 0
-872 -5139 0
-872 -887 -5140 0
c (0<=( - aux1245 + SATLiteral(872) + SATLiteral(887)))
887 5140 0
872 5140 0
872 887 5139 0
c ((aux1245 - aux1246 + SATLiteral(842))<=0)
5139 -5142 0
5140 -5143 0
-842 -5142 0
-842 5139 -5143 0
-842 5140 -5145 0
c (0<=(aux1245 - aux1246 + SATLiteral(842)))
-5140 5145 0
-5139 5143 0
842 5145 0
842 -5140 5143 0
842 -5139 5142 0
c ((aux1242 + aux1244 - aux1247)<=0)
5136 -5147 0
5137 -5148 0
5130 -5147 0
5130 5136 -5148 0
5130 5137 -5150 0
5131 -5148 0
5131 5136 -5150 0
5131 5137 -5152 0
c (0<=(aux1242 + aux1244 - aux1247))
-5137 5152 0
-5136 5150 0
-5131 5152 0
-5131 -5137 5150 0
-5131 -5136 5148 0
-5130 5150 0
-5130 -5137 5148 0
-5130 -5136 5147 0
c (( - aux1248 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5154 0
-814 -5154 0
-814 -934 -5155 0
c (0<=( - aux1248 + SATLiteral(814) + SATLiteral(934)))
934 5155 0
814 5155 0
814 934 5154 0
c (( - aux1249 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5157 0
-829 -5157 0
-829 -919 -5158 0
c (0<=( - aux1249 + SATLiteral(829) + SATLiteral(919)))
919 5158 0
829 5158 0
829 919 5157 0
c (( - aux1250 + SATLiteral(859) + SATLiteral(903))<=0)
-903 -5160 0
-859 -5160 0
-859 -903 -5161 0
c (0<=( - aux1250 + SATLiteral(859) + SATLiteral(903)))
903 5161 0
859 5161 0
859 903 5160 0
c (( - aux1251 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5163 0
-874 -5163 0
-874 -889 -5164 0
c (0<=( - aux1251 + SATLiteral(874) + SATLiteral(889)))
889 5164 0
874 5164 0
874 889 5163 0
c ((aux1251 - aux1252 + SATLiteral(844))<=0)
5163 -5166 0
5164 -5167 0
-844 -5166 0
-844 5163 -5167 0
-844 5164 -5169 0
c (0<=(aux1251 - aux1252 + SATLiteral(844)))
-5164 5169 0
-5163 5167 0
844 5169 0
844 -5164 5167 0
844 -5163 5166 0
c ((aux1248 + aux1250 - aux1253)<=0)
5160 -5171 0
5161 -5172 0
5154 -5171 0
5154 5160 -5172 0
5154 5161 -5174 0
5155 -5172 0
5155 5160 -5174 0
5155 5161 -5176 0
c (0<=(aux1248 + aux1250 - aux1253))
-5161 5176 0
-5160 5174 0
-5155 5176 0
-5155 -5161 5174 0
-5155 -5160 5172 0
-5154 5174 0
-5154 -5161 5172 0
-5154 -5160 5171 0
c (( - aux1254 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5178 0
-816 -5178 0
-816 -936 -5179 0
c (0<=( - aux1254 + SATLiteral(816) + SATLiteral(936)))
936 5179 0
816 5179 0
816 936 5178 0
c (( - aux1255 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5181 0
-831 -5181 0
-831 -921 -5182 0
c (0<=( - aux1255 + SATLiteral(831) + SATLiteral(921)))
921 5182 0
831 5182 0
831 921 5181 0
c (( - aux1256 + SATLiteral(861) + SATLiteral(904))<=0)
-904 -5184 0
-861 -5184 0
-861 -904 -5185 0
c (0<=( - aux1256 + SATLiteral(861) + SATLiteral(904)))
904 5185 0
861 5185 0
861 904 5184 0
c (( - aux1257 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5187 0
-876 -5187 0
-876 -891 -5188 0
c (0<=( - aux1257 + SATLiteral(876) + SATLiteral(891)))
891 5188 0
876 5188 0
876 891 5187 0
c ((aux1257 - aux1258 + SATLiteral(846))<=0)
5187 -5190 0
5188 -5191 0
-846 -5190 0
-846 5187 -5191 0
-846 5188 -5193 0
c (0<=(aux1257 - aux1258 + SATLiteral(846)))
-5188 5193 0
-5187 5191 0
846 5193 0
846 -5188 5191 0
846 -5187 5190 0
c ((aux1254 + aux1256 - aux1259)<=0)
5184 -5195 0
5185 -5196 0
5178 -5195 0
5178 5184 -5196 0
5178 5185 -5198 0
5179 -5196 0
5179 5184 -5198 0
5179 5185 -5200 0
c (0<=(aux1254 + aux1256 - aux1259))
-5185 5200 0
-5184 5198 0
-5179 5200 0
-5179 -5185 5198 0
-5179 -5184 5196 0
-5178 5198 0
-5178 -5185 5196 0
-5178 -5184 5195 0
c (( - aux1260 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5202 0
-818 -5202 0
-818 -938 -5203 0
c (0<=( - aux1260 + SATLiteral(818) + SATLiteral(938)))
938 5203 0
818 5203 0
818 938 5202 0
c (( - aux1261 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5205 0
-833 -5205 0
-833 -923 -5206 0
c (0<=( - aux1261 + SATLiteral(833) + SATLiteral(923)))
923 5206 0
833 5206 0
833 923 5205 0
c (( - aux1262 + SATLiteral(863) + SATLiteral(905))<=0)
-905 -5208 0
-863 -5208 0
-863 -905 -5209 0
c (0<=( - aux1262 + SATLiteral(863) + SATLiteral(905)))
905 5209 0
863 5209 0
863 905 5208 0
c (( - aux1263 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5211 0
-878 -5211 0
-878 -893 -5212 0
c (0<=( - aux1263 + SATLiteral(878) + SATLiteral(893)))
893 5212 0
878 5212 0
878 893 5211 0
c ((aux1263 - aux1264 + SATLiteral(848))<=0)
5211 -5214 0
5212 -5215 0
-848 -5214 0
-848 5211 -5215 0
-848 5212 -5217 0
c (0<=(aux1263 - aux1264 + SATLiteral(848)))
-5212 5217 0
-5211 5215 0
848 5217 0
848 -5212 5215 0
848 -5211 5214 0
c ((aux1260 + aux1262 - aux1265)<=0)
5208 -5219 0
5209 -5220 0
5202 -5219 0
5202 5208 -5220 0
5202 5209 -5222 0
5203 -5220 0
5203 5208 -5222 0
5203 5209 -5224 0
c (0<=(aux1260 + aux1262 - aux1265))
-5209 5224 0
-5208 5222 0
-5203 5224 0
-5203 -5209 5222 0
-5203 -5208 5220 0
-5202 5222 0
-5202 -5209 5220 0
-5202 -5208 5219 0
c (( - aux1266 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5226 0
-820 -5226 0
-820 -940 -5227 0
c (0<=( - aux1266 + SATLiteral(820) + SATLiteral(940)))
940 5227 0
820 5227 0
820 940 5226 0
c (( - aux1267 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5229 0
-835 -5229 0
-835 -925 -5230 0
c (0<=( - aux1267 + SATLiteral(835) + SATLiteral(925)))
925 5230 0
835 5230 0
835 925 5229 0
c (( - aux1268 + SATLiteral(865) + SATLiteral(906))<=0)
-906 -5232 0
-865 -5232 0
-865 -906 -5233 0
c (0<=( - aux1268 + SATLiteral(865) + SATLiteral(906)))
906 5233 0
865 5233 0
865 906 5232 0
c (( - aux1269 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5235 0
-880 -5235 0
-880 -895 -5236 0
c (0<=( - aux1269 + SATLiteral(880) + SATLiteral(895)))
895 5236 0
880 5236 0
880 895 5235 0
c ((aux1269 - aux1270 + SATLiteral(850))<=0)
5235 -5238 0
5236 -5239 0
-850 -5238 0
-850 5235 -5239 0
-850 5236 -5241 0
c (0<=(aux1269 - aux1270 + SATLiteral(850)))
-5236 5241 0
-5235 5239 0
850 5241 0
850 -5236 5239 0
850 -5235 5238 0
c ((aux1266 + aux1268 - aux1271)<=0)
5232 -5243 0
5233 -5244 0
5226 -5243 0
5226 5232 -5244 0
5226 5233 -5246 0
5227 -5244 0
5227 5232 -5246 0
5227 5233 -5248 0
c (0<=(aux1266 + aux1268 - aux1271))
-5233 5248 0
-5232 5246 0
-5227 5248 0
-5227 -5233 5246 0
-5227 -5232 5244 0
-5226 5246 0
-5226 -5233 5244 0
-5226 -5232 5243 0
c (( - aux1272 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5250 0
-822 -5250 0
-822 -942 -5251 0
c (0<=( - aux1272 + SATLiteral(822) + SATLiteral(942)))
942 5251 0
822 5251 0
822 942 5250 0
c (( - aux1273 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5253 0
-837 -5253 0
-837 -927 -5254 0
c (0<=( - aux1273 + SATLiteral(837) + SATLiteral(927)))
927 5254 0
837 5254 0
837 927 5253 0
c (( - aux1274 + SATLiteral(867) + SATLiteral(907))<=0)
-907 -5256 0
-867 -5256 0
-867 -907 -5257 0
c (0<=( - aux1274 + SATLiteral(867) + SATLiteral(907)))
907 5257 0
867 5257 0
867 907 5256 0
c (( - aux1275 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5259 0
-882 -5259 0
-882 -897 -5260 0
c (0<=( - aux1275 + SATLiteral(882) + SATLiteral(897)))
897 5260 0
882 5260 0
882 897 5259 0
c ((aux1275 - aux1276 + SATLiteral(852))<=0)
5259 -5262 0
5260 -5263 0
-852 -5262 0
-852 5259 -5263 0
-852 5260 -5265 0
c (0<=(aux1275 - aux1276 + SATLiteral(852)))
-5260 5265 0
-5259 5263 0
852 5265 0
852 -5260 5263 0
852 -5259 5262 0
c ((aux1272 + aux1274 - aux1277)<=0)
5256 -5267 0
5257 -5268 0
5250 -5267 0
5250 5256 -5268 0
5250 5257 -5270 0
5251 -5268 0
5251 5256 -5270 0
5251 5257 -5272 0
c (0<=(aux1272 + aux1274 - aux1277))
-5257 5272 0
-5256 5270 0
-5251 5272 0
-5251 -5257 5270 0
-5251 -5256 5268 0
-5250 5270 0
-5250 -5257 5268 0
-5250 -5256 5267 0
c (( - aux1278 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5274 0
-824 -5274 0
-824 -944 -5275 0
c (0<=( - aux1278 + SATLiteral(824) + SATLiteral(944)))
944 5275 0
824 5275 0
824 944 5274 0
c (( - aux1279 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5277 0
-839 -5277 0
-839 -929 -5278 0
c (0<=( - aux1279 + SATLiteral(839) + SATLiteral(929)))
929 5278 0
839 5278 0
839 929 5277 0
c (( - aux1280 + SATLiteral(869) + SATLiteral(908))<=0)
-908 -5280 0
-869 -5280 0
-869 -908 -5281 0
c (0<=( - aux1280 + SATLiteral(869) + SATLiteral(908)))
908 5281 0
869 5281 0
869 908 5280 0
c (( - aux1281 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5283 0
-884 -5283 0
-884 -899 -5284 0
c (0<=( - aux1281 + SATLiteral(884) + SATLiteral(899)))
899 5284 0
884 5284 0
884 899 5283 0
c ((aux1281 - aux1282 + SATLiteral(854))<=0)
5283 -5286 0
5284 -5287 0
-854 -5286 0
-854 5283 -5287 0
-854 5284 -5289 0
c (0<=(aux1281 - aux1282 + SATLiteral(854)))
-5284 5289 0
-5283 5287 0
854 5289 0
854 -5284 5287 0
854 -5283 5286 0
c ((aux1278 + aux1280 - aux1283)<=0)
5280 -5291 0
5281 -5292 0
5274 -5291 0
5274 5280 -5292 0
5274 5281 -5294 0
5275 -5292 0
5275 5280 -5294 0
5275 5281 -5296 0
c (0<=(aux1278 + aux1280 - aux1283))
-5281 5296 0
-5280 5294 0
-5275 5296 0
-5275 -5281 5294 0
-5275 -5280 5292 0
-5274 5294 0
-5274 -5281 5292 0
-5274 -5280 5291 0
c (( - aux1284 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5298 0
-826 -5298 0
-826 -946 -5299 0
c (0<=( - aux1284 + SATLiteral(826) + SATLiteral(946)))
946 5299 0
826 5299 0
826 946 5298 0
c (( - aux1285 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5301 0
-841 -5301 0
-841 -931 -5302 0
c (0<=( - aux1285 + SATLiteral(841) + SATLiteral(931)))
931 5302 0
841 5302 0
841 931 5301 0
c (( - aux1286 + SATLiteral(871) + SATLiteral(909))<=0)
-909 -5304 0
-871 -5304 0
-871 -909 -5305 0
c (0<=( - aux1286 + SATLiteral(871) + SATLiteral(909)))
909 5305 0
871 5305 0
871 909 5304 0
c (( - aux1287 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5307 0
-886 -5307 0
-886 -901 -5308 0
c (0<=( - aux1287 + SATLiteral(886) + SATLiteral(901)))
901 5308 0
886 5308 0
886 901 5307 0
c ((aux1287 - aux1288 + SATLiteral(856))<=0)
5307 -5310 0
5308 -5311 0
-856 -5310 0
-856 5307 -5311 0
-856 5308 -5313 0
c (0<=(aux1287 - aux1288 + SATLiteral(856)))
-5308 5313 0
-5307 5311 0
856 5313 0
856 -5308 5311 0
856 -5307 5310 0
c ((aux1284 + aux1286 - aux1289)<=0)
5304 -5315 0
5305 -5316 0
5298 -5315 0
5298 5304 -5316 0
5298 5305 -5318 0
5299 -5316 0
5299 5304 -5318 0
5299 5305 -5320 0
c (0<=(aux1284 + aux1286 - aux1289))
-5305 5320 0
-5304 5318 0
-5299 5320 0
-5299 -5305 5318 0
-5299 -5304 5316 0
-5298 5318 0
-5298 -5305 5316 0
-5298 -5304 5315 0
c (( - aux1290 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5322 0
825 -5322 0
825 945 -5323 0
c (0<=( - aux1290 + SATLiteral(-825) + SATLiteral(-945)))
-945 5323 0
-825 5323 0
-825 -945 5322 0
c (( - aux1291 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5325 0
840 -5325 0
840 930 -5326 0
c (0<=( - aux1291 + SATLiteral(-840) + SATLiteral(-930)))
-930 5326 0
-840 5326 0
-840 -930 5325 0
c (( - aux1292 + SATLiteral(-870) + SATLiteral(910))<=0)
-910 -5328 0
870 -5328 0
870 -910 -5329 0
c (0<=( - aux1292 + SATLiteral(-870) + SATLiteral(910)))
910 5329 0
-870 5329 0
-870 910 5328 0
c (( - aux1293 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5331 0
885 -5331 0
885 900 -5332 0
c (0<=( - aux1293 + SATLiteral(-885) + SATLiteral(-900)))
-900 5332 0
-885 5332 0
-885 -900 5331 0
c ((aux1293 - aux1294 + SATLiteral(-855))<=0)
5331 -5334 0
5332 -5335 0
855 -5334 0
855 5331 -5335 0
855 5332 -5337 0
c (0<=(aux1293 - aux1294 + SATLiteral(-855)))
-5332 5337 0
-5331 5335 0
-855 5337 0
-855 -5332 5335 0
-855 -5331 5334 0
c ((aux1290 + aux1292 - aux1295)<=0)
5328 -5339 0
5329 -5340 0
5322 -5339 0
5322 5328 -5340 0
5322 5329 -5342 0
5323 -5340 0
5323 5328 -5342 0
5323 5329 -5344 0
c (0<=(aux1290 + aux1292 - aux1295))
-5329 5344 0
-5328 5342 0
-5323 5344 0
-5323 -5329 5342 0
-5323 -5328 5340 0
-5322 5342 0
-5322 -5329 5340 0
-5322 -5328 5339 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1296)<=0)
-1067 -5346 0
-947 -5346 0
-947 -1067 -5347 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1296))
1067 5347 0
947 5347 0
947 1067 5346 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1297)<=0)
-1052 -5349 0
-962 -5349 0
-962 -1052 -5350 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1297))
1052 5350 0
962 5350 0
962 1052 5349 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1298)<=0)
-1037 -5352 0
-992 -5352 0
-992 -1037 -5353 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1298))
1037 5353 0
992 5353 0
992 1037 5352 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1299)<=0)
-1022 -5355 0
-1007 -5355 0
-1007 -1022 -5356 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1299))
1022 5356 0
1007 5356 0
1007 1022 5355 0
c ((SATLiteral(977) + aux1299 - aux1300)<=0)
5355 -5358 0
5356 -5359 0
-977 -5358 0
-977 5355 -5359 0
-977 5356 -5361 0
c (0<=(SATLiteral(977) + aux1299 - aux1300))
-5356 5361 0
-5355 5359 0
977 5361 0
977 -5356 5359 0
977 -5355 5358 0
c ((aux1296 + aux1298 - aux1301)<=0)
5352 -5363 0
5353 -5364 0
5346 -5363 0
5346 5352 -5364 0
5346 5353 -5366 0
5347 -5364 0
5347 5352 -5366 0
5347 5353 -5368 0
c (0<=(aux1296 + aux1298 - aux1301))
-5353 5368 0
-5352 5366 0
-5347 5368 0
-5347 -5353 5366 0
-5347 -5352 5364 0
-5346 5366 0
-5346 -5353 5364 0
-5346 -5352 5363 0
c ((SATLiteral(949) + SATLiteral(1068) - aux1302)<=0)
-1068 -5370 0
-949 -5370 0
-949 -1068 -5371 0
c (0<=(SATLiteral(949) + SATLiteral(1068) - aux1302))
1068 5371 0
949 5371 0
949 1068 5370 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1303)<=0)
-1054 -5373 0
-964 -5373 0
-964 -1054 -5374 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1303))
1054 5374 0
964 5374 0
964 1054 5373 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1304)<=0)
-1039 -5376 0
-994 -5376 0
-994 -1039 -5377 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1304))
1039 5377 0
994 5377 0
994 1039 5376 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1305)<=0)
-1024 -5379 0
-1009 -5379 0
-1009 -1024 -5380 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1305))
1024 5380 0
1009 5380 0
1009 1024 5379 0
c ((SATLiteral(979) + aux1305 - aux1306)<=0)
5379 -5382 0
5380 -5383 0
-979 -5382 0
-979 5379 -5383 0
-979 5380 -5385 0
c (0<=(SATLiteral(979) + aux1305 - aux1306))
-5380 5385 0
-5379 5383 0
979 5385 0
979 -5380 5383 0
979 -5379 5382 0
c ((aux1302 + aux1304 - aux1307)<=0)
5376 -5387 0
5377 -5388 0
5370 -5387 0
5370 5376 -5388 0
5370 5377 -5390 0
5371 -5388 0
5371 5376 -5390 0
5371 5377 -5392 0
c (0<=(aux1302 + aux1304 - aux1307))
-5377 5392 0
-5376 5390 0
-5371 5392 0
-5371 -5377 5390 0
-5371 -5376 5388 0
-5370 5390 0
-5370 -5377 5388 0
-5370 -5376 5387 0
c ((SATLiteral(951) + SATLiteral(1069) - aux1308)<=0)
-1069 -5394 0
-951 -5394 0
-951 -1069 -5395 0
c (0<=(SATLiteral(951) + SATLiteral(1069) - aux1308))
1069 5395 0
951 5395 0
951 1069 5394 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1309)<=0)
-1056 -5397 0
-966 -5397 0
-966 -1056 -5398 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1309))
1056 5398 0
966 5398 0
966 1056 5397 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1310)<=0)
-1041 -5400 0
-996 -5400 0
-996 -1041 -5401 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1310))
1041 5401 0
996 5401 0
996 1041 5400 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1311)<=0)
-1026 -5403 0
-1011 -5403 0
-1011 -1026 -5404 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1311))
1026 5404 0
1011 5404 0
1011 1026 5403 0
c ((SATLiteral(981) + aux1311 - aux1312)<=0)
5403 -5406 0
5404 -5407 0
-981 -5406 0
-981 5403 -5407 0
-981 5404 -5409 0
c (0<=(SATLiteral(981) + aux1311 - aux1312))
-5404 5409 0
-5403 5407 0
981 5409 0
981 -5404 5407 0
981 -5403 5406 0
c ((aux1308 + aux1310 - aux1313)<=0)
5400 -5411 0
5401 -5412 0
5394 -5411 0
5394 5400 -5412 0
5394 5401 -5414 0
5395 -5412 0
5395 5400 -5414 0
5395 5401 -5416 0
c (0<=(aux1308 + aux1310 - aux1313))
-5401 5416 0
-5400 5414 0
-5395 5416 0
-5395 -5401 5414 0
-5395 -5400 5412 0
-5394 5414 0
-5394 -5401 5412 0
-5394 -5400 5411 0
c ((SATLiteral(953) + SATLiteral(1070) - aux1314)<=0)
-1070 -5418 0
-953 -5418 0
-953 -1070 -5419 0
c (0<=(SATLiteral(953) + SATLiteral(1070) - aux1314))
1070 5419 0
953 5419 0
953 1070 5418 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1315)<=0)
-1058 -5421 0
-968 -5421 0
-968 -1058 -5422 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1315))
1058 5422 0
968 5422 0
968 1058 5421 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1316)<=0)
-1043 -5424 0
-998 -5424 0
-998 -1043 -5425 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1316))
1043 5425 0
998 5425 0
998 1043 5424 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1317)<=0)
-1028 -5427 0
-1013 -5427 0
-1013 -1028 -5428 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1317))
1028 5428 0
1013 5428 0
1013 1028 5427 0
c ((SATLiteral(983) + aux1317 - aux1318)<=0)
5427 -5430 0
5428 -5431 0
-983 -5430 0
-983 5427 -5431 0
-983 5428 -5433 0
c (0<=(SATLiteral(983) + aux1317 - aux1318))
-5428 5433 0
-5427 5431 0
983 5433 0
983 -5428 5431 0
983 -5427 5430 0
c ((aux1314 + aux1316 - aux1319)<=0)
5424 -5435 0
5425 -5436 0
5418 -5435 0
5418 5424 -5436 0
5418 5425 -5438 0
5419 -5436 0
5419 5424 -5438 0
5419 5425 -5440 0
c (0<=(aux1314 + aux1316 - aux1319))
-5425 5440 0
-5424 5438 0
-5419 5440 0
-5419 -5425 5438 0
-5419 -5424 5436 0
-5418 5438 0
-5418 -5425 5436 0
-5418 -5424 5435 0
c ((SATLiteral(955) + SATLiteral(1071) - aux1320)<=0)
-1071 -5442 0
-955 -5442 0
-955 -1071 -5443 0
c (0<=(SATLiteral(955) + SATLiteral(1071) - aux1320))
1071 5443 0
955 5443 0
955 1071 5442 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1321)<=0)
-1060 -5445 0
-970 -5445 0
-970 -1060 -5446 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1321))
1060 5446 0
970 5446 0
970 1060 5445 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1322)<=0)
-1045 -5448 0
-1000 -5448 0
-1000 -1045 -5449 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1322))
1045 5449 0
1000 5449 0
1000 1045 5448 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1323)<=0)
-1030 -5451 0
-1015 -5451 0
-1015 -1030 -5452 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1323))
1030 5452 0
1015 5452 0
1015 1030 5451 0
c ((SATLiteral(985) + aux1323 - aux1324)<=0)
5451 -5454 0
5452 -5455 0
-985 -5454 0
-985 5451 -5455 0
-985 5452 -5457 0
c (0<=(SATLiteral(985) + aux1323 - aux1324))
-5452 5457 0
-5451 5455 0
985 5457 0
985 -5452 5455 0
985 -5451 5454 0
c ((aux1320 + aux1322 - aux1325)<=0)
5448 -5459 0
5449 -5460 0
5442 -5459 0
5442 5448 -5460 0
5442 5449 -5462 0
5443 -5460 0
5443 5448 -5462 0
5443 5449 -5464 0
c (0<=(aux1320 + aux1322 - aux1325))
-5449 5464 0
-5448 5462 0
-5443 5464 0
-5443 -5449 5462 0
-5443 -5448 5460 0
-5442 5462 0
-5442 -5449 5460 0
-5442 -5448 5459 0
c ((SATLiteral(957) + SATLiteral(1072) - aux1326)<=0)
-1072 -5466 0
-957 -5466 0
-957 -1072 -5467 0
c (0<=(SATLiteral(957) + SATLiteral(1072) - aux1326))
1072 5467 0
957 5467 0
957 1072 5466 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1327)<=0)
-1062 -5469 0
-972 -5469 0
-972 -1062 -5470 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1327))
1062 5470 0
972 5470 0
972 1062 5469 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1328)<=0)
-1047 -5472 0
-1002 -5472 0
-1002 -1047 -5473 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1328))
1047 5473 0
1002 5473 0
1002 1047 5472 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1329)<=0)
-1032 -5475 0
-1017 -5475 0
-1017 -1032 -5476 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1329))
1032 5476 0
1017 5476 0
1017 1032 5475 0
c ((SATLiteral(987) + aux1329 - aux1330)<=0)
5475 -5478 0
5476 -5479 0
-987 -5478 0
-987 5475 -5479 0
-987 5476 -5481 0
c (0<=(SATLiteral(987) + aux1329 - aux1330))
-5476 5481 0
-5475 5479 0
987 5481 0
987 -5476 5479 0
987 -5475 5478 0
c ((aux1326 + aux1328 - aux1331)<=0)
5472 -5483 0
5473 -5484 0
5466 -5483 0
5466 5472 -5484 0
5466 5473 -5486 0
5467 -5484 0
5467 5472 -5486 0
5467 5473 -5488 0
c (0<=(aux1326 + aux1328 - aux1331))
-5473 5488 0
-5472 5486 0
-5467 5488 0
-5467 -5473 5486 0
-5467 -5472 5484 0
-5466 5486 0
-5466 -5473 5484 0
-5466 -5472 5483 0
c ((SATLiteral(959) + SATLiteral(1073) - aux1332)<=0)
-1073 -5490 0
-959 -5490 0
-959 -1073 -5491 0
c (0<=(SATLiteral(959) + SATLiteral(1073) - aux1332))
1073 5491 0
959 5491 0
959 1073 5490 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1333)<=0)
-1064 -5493 0
-974 -5493 0
-974 -1064 -5494 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1333))
1064 5494 0
974 5494 0
974 1064 5493 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1334)<=0)
-1049 -5496 0
-1004 -5496 0
-1004 -1049 -5497 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1334))
1049 5497 0
1004 5497 0
1004 1049 5496 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1335)<=0)
-1034 -5499 0
-1019 -5499 0
-1019 -1034 -5500 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1335))
1034 5500 0
1019 5500 0
1019 1034 5499 0
c ((SATLiteral(989) + aux1335 - aux1336)<=0)
5499 -5502 0
5500 -5503 0
-989 -5502 0
-989 5499 -5503 0
-989 5500 -5505 0
c (0<=(SATLiteral(989) + aux1335 - aux1336))
-5500 5505 0
-5499 5503 0
989 5505 0
989 -5500 5503 0
989 -5499 5502 0
c ((aux1332 + aux1334 - aux1337)<=0)
5496 -5507 0
5497 -5508 0
5490 -5507 0
5490 5496 -5508 0
5490 5497 -5510 0
5491 -5508 0
5491 5496 -5510 0
5491 5497 -5512 0
c (0<=(aux1332 + aux1334 - aux1337))
-5497 5512 0
-5496 5510 0
-5491 5512 0
-5491 -5497 5510 0
-5491 -5496 5508 0
-5490 5510 0
-5490 -5497 5508 0
-5490 -5496 5507 0
c ((SATLiteral(961) + SATLiteral(1074) - aux1338)<=0)
-1074 -5514 0
-961 -5514 0
-961 -1074 -5515 0
c (0<=(SATLiteral(961) + SATLiteral(1074) - aux1338))
1074 5515 0
961 5515 0
961 1074 5514 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1339)<=0)
-1066 -5517 0
-976 -5517 0
-976 -1066 -5518 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1339))
1066 5518 0
976 5518 0
976 1066 5517 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1340)<=0)
-1051 -5520 0
-1006 -5520 0
-1006 -1051 -5521 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1340))
1051 5521 0
1006 5521 0
1006 1051 5520 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1341)<=0)
-1036 -5523 0
-1021 -5523 0
-1021 -1036 -5524 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1341))
1036 5524 0
1021 5524 0
1021 1036 5523 0
c ((SATLiteral(991) + aux1341 - aux1342)<=0)
5523 -5526 0
5524 -5527 0
-991 -5526 0
-991 5523 -5527 0
-991 5524 -5529 0
c (0<=(SATLiteral(991) + aux1341 - aux1342))
-5524 5529 0
-5523 5527 0
991 5529 0
991 -5524 5527 0
991 -5523 5526 0
c ((aux1338 + aux1340 - aux1343)<=0)
5520 -5531 0
5521 -5532 0
5514 -5531 0
5514 5520 -5532 0
5514 5521 -5534 0
5515 -5532 0
5515 5520 -5534 0
5515 5521 -5536 0
c (0<=(aux1338 + aux1340 - aux1343))
-5521 5536 0
-5520 5534 0
-5515 5536 0
-5515 -5521 5534 0
-5515 -5520 5532 0
-5514 5534 0
-5514 -5521 5532 0
-5514 -5520 5531 0
c ((SATLiteral(-960) + SATLiteral(1075) - aux1344)<=0)
-1075 -5538 0
960 -5538 0
960 -1075 -5539 0
c (0<=(SATLiteral(-960) + SATLiteral(1075) - aux1344))
1075 5539 0
-960 5539 0
-960 1075 5538 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1345)<=0)
1065 -5541 0
975 -5541 0
975 1065 -5542 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1345))
-1065 5542 0
-975 5542 0
-975 -1065 5541 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1346)<=0)
1050 -5544 0
1005 -5544 0
1005 1050 -5545 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1346))
-1050 5545 0
-1005 5545 0
-1005 -1050 5544 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1347)<=0)
1035 -5547 0
1020 -5547 0
1020 1035 -5548 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1347))
-1035 5548 0
-1020 5548 0
-1020 -1035 5547 0
c ((SATLiteral(-990) + aux1347 - aux1348)<=0)
5547 -5550 0
5548 -5551 0
990 -5550 0
990 5547 -5551 0
990 5548 -5553 0
c (0<=(SATLiteral(-990) + aux1347 - aux1348))
-5548 5553 0
-5547 5551 0
-990 5553 0
-990 -5548 5551 0
-990 -5547 5550 0
c ((aux1344 + aux1346 - aux1349)<=0)
5544 -5555 0
5545 -5556 0
5538 -5555 0
5538 5544 -5556 0
5538 5545 -5558 0
5539 -5556 0
5539 5544 -5558 0
5539 5545 -5560 0
c (0<=(aux1344 + aux1346 - aux1349))
-5545 5560 0
-5544 5558 0
-5539 5560 0
-5539 -5545 5558 0
-5539 -5544 5556 0
-5538 5558 0
-5538 -5545 5556 0
-5538 -5544 5555 0
c (( - aux1350 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5562 0
-1082 -5562 0
-1082 -1202 -5563 0
c (0<=( - aux1350 + SATLiteral(1082) + SATLiteral(1202)))
1202 5563 0
1082 5563 0
1082 1202 5562 0
c (( - aux1351 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5565 0
-1097 -5565 0
-1097 -1187 -5566 0
c (0<=( - aux1351 + SATLiteral(1097) + SATLiteral(1187)))
1187 5566 0
1097 5566 0
1097 1187 5565 0
c (( - aux1352 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5568 0
-1127 -5568 0
-1127 -1172 -5569 0
c (0<=( - aux1352 + SATLiteral(1127) + SATLiteral(1172)))
1172 5569 0
1127 5569 0
1127 1172 5568 0
c (( - aux1353 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5571 0
-1142 -5571 0
-1142 -1157 -5572 0
c (0<=( - aux1353 + SATLiteral(1142) + SATLiteral(1157)))
1157 5572 0
1142 5572 0
1142 1157 5571 0
c ((aux1353 - aux1354 + SATLiteral(1112))<=0)
5571 -5574 0
5572 -5575 0
-1112 -5574 0
-1112 5571 -5575 0
-1112 5572 -5577 0
c (0<=(aux1353 - aux1354 + SATLiteral(1112)))
-5572 5577 0
-5571 5575 0
1112 5577 0
1112 -5572 5575 0
1112 -5571 5574 0
c ((aux1350 + aux1352 - aux1355)<=0)
5568 -5579 0
5569 -5580 0
5562 -5579 0
5562 5568 -5580 0
5562 5569 -5582 0
5563 -5580 0
5563 5568 -5582 0
5563 5569 -5584 0
c (0<=(aux1350 + aux1352 - aux1355))
-5569 5584 0
-5568 5582 0
-5563 5584 0
-5563 -5569 5582 0
-5563 -5568 5580 0
-5562 5582 0
-5562 -5569 5580 0
-5562 -5568 5579 0
c (( - aux1356 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5586 0
-1084 -5586 0
-1084 -1204 -5587 0
c (0<=( - aux1356 + SATLiteral(1084) + SATLiteral(1204)))
1204 5587 0
1084 5587 0
1084 1204 5586 0
c (( - aux1357 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5589 0
-1099 -5589 0
-1099 -1189 -5590 0
c (0<=( - aux1357 + SATLiteral(1099) + SATLiteral(1189)))
1189 5590 0
1099 5590 0
1099 1189 5589 0
c (( - aux1358 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5592 0
-1129 -5592 0
-1129 -1174 -5593 0
c (0<=( - aux1358 + SATLiteral(1129) + SATLiteral(1174)))
1174 5593 0
1129 5593 0
1129 1174 5592 0
c (( - aux1359 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5595 0
-1144 -5595 0
-1144 -1159 -5596 0
c (0<=( - aux1359 + SATLiteral(1144) + SATLiteral(1159)))
1159 5596 0
1144 5596 0
1144 1159 5595 0
c ((aux1359 - aux1360 + SATLiteral(1114))<=0)
5595 -5598 0
5596 -5599 0
-1114 -5598 0
-1114 5595 -5599 0
-1114 5596 -5601 0
c (0<=(aux1359 - aux1360 + SATLiteral(1114)))
-5596 5601 0
-5595 5599 0
1114 5601 0
1114 -5596 5599 0
1114 -5595 5598 0
c ((aux1356 + aux1358 - aux1361)<=0)
5592 -5603 0
5593 -5604 0
5586 -5603 0
5586 5592 -5604 0
5586 5593 -5606 0
5587 -5604 0
5587 5592 -5606 0
5587 5593 -5608 0
c (0<=(aux1356 + aux1358 - aux1361))
-5593 5608 0
-5592 5606 0
-5587 5608 0
-5587 -5593 5606 0
-5587 -5592 5604 0
-5586 5606 0
-5586 -5593 5604 0
-5586 -5592 5603 0
c (( - aux1362 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5610 0
-1086 -5610 0
-1086 -1206 -5611 0
c (0<=( - aux1362 + SATLiteral(1086) + SATLiteral(1206)))
1206 5611 0
1086 5611 0
1086 1206 5610 0
c (( - aux1363 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5613 0
-1101 -5613 0
-1101 -1191 -5614 0
c (0<=( - aux1363 + SATLiteral(1101) + SATLiteral(1191)))
1191 5614 0
1101 5614 0
1101 1191 5613 0
c (( - aux1364 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5616 0
-1131 -5616 0
-1131 -1176 -5617 0
c (0<=( - aux1364 + SATLiteral(1131) + SATLiteral(1176)))
1176 5617 0
1131 5617 0
1131 1176 5616 0
c (( - aux1365 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5619 0
-1146 -5619 0
-1146 -1161 -5620 0
c (0<=( - aux1365 + SATLiteral(1146) + SATLiteral(1161)))
1161 5620 0
1146 5620 0
1146 1161 5619 0
c ((aux1365 - aux1366 + SATLiteral(1116))<=0)
5619 -5622 0
5620 -5623 0
-1116 -5622 0
-1116 5619 -5623 0
-1116 5620 -5625 0
c (0<=(aux1365 - aux1366 + SATLiteral(1116)))
-5620 5625 0
-5619 5623 0
1116 5625 0
1116 -5620 5623 0
1116 -5619 5622 0
c ((aux1362 + aux1364 - aux1367)<=0)
5616 -5627 0
5617 -5628 0
5610 -5627 0
5610 5616 -5628 0
5610 5617 -5630 0
5611 -5628 0
5611 5616 -5630 0
5611 5617 -5632 0
c (0<=(aux1362 + aux1364 - aux1367))
-5617 5632 0
-5616 5630 0
-5611 5632 0
-5611 -5617 5630 0
-5611 -5616 5628 0
-5610 5630 0
-5610 -5617 5628 0
-5610 -5616 5627 0
c (( - aux1368 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5634 0
-1088 -5634 0
-1088 -1208 -5635 0
c (0<=( - aux1368 + SATLiteral(1088) + SATLiteral(1208)))
1208 5635 0
1088 5635 0
1088 1208 5634 0
c (( - aux1369 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5637 0
-1103 -5637 0
-1103 -1193 -5638 0
c (0<=( - aux1369 + SATLiteral(1103) + SATLiteral(1193)))
1193 5638 0
1103 5638 0
1103 1193 5637 0
c (( - aux1370 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5640 0
-1133 -5640 0
-1133 -1178 -5641 0
c (0<=( - aux1370 + SATLiteral(1133) + SATLiteral(1178)))
1178 5641 0
1133 5641 0
1133 1178 5640 0
c (( - aux1371 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5643 0
-1148 -5643 0
-1148 -1163 -5644 0
c (0<=( - aux1371 + SATLiteral(1148) + SATLiteral(1163)))
1163 5644 0
1148 5644 0
1148 1163 5643 0
c ((aux1371 - aux1372 + SATLiteral(1118))<=0)
5643 -5646 0
5644 -5647 0
-1118 -5646 0
-1118 5643 -5647 0
-1118 5644 -5649 0
c (0<=(aux1371 - aux1372 + SATLiteral(1118)))
-5644 5649 0
-5643 5647 0
1118 5649 0
1118 -5644 5647 0
1118 -5643 5646 0
c ((aux1368 + aux1370 - aux1373)<=0)
5640 -5651 0
5641 -5652 0
5634 -5651 0
5634 5640 -5652 0
5634 5641 -5654 0
5635 -5652 0
5635 5640 -5654 0
5635 5641 -5656 0
c (0<=(aux1368 + aux1370 - aux1373))
-5641 5656 0
-5640 5654 0
-5635 5656 0
-5635 -5641 5654 0
-5635 -5640 5652 0
-5634 5654 0
-5634 -5641 5652 0
-5634 -5640 5651 0
c (( - aux1374 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5658 0
-1090 -5658 0
-1090 -1210 -5659 0
c (0<=( - aux1374 + SATLiteral(1090) + SATLiteral(1210)))
1210 5659 0
1090 5659 0
1090 1210 5658 0
c (( - aux1375 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5661 0
-1105 -5661 0
-1105 -1195 -5662 0
c (0<=( - aux1375 + SATLiteral(1105) + SATLiteral(1195)))
1195 5662 0
1105 5662 0
1105 1195 5661 0
c (( - aux1376 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5664 0
-1135 -5664 0
-1135 -1180 -5665 0
c (0<=( - aux1376 + SATLiteral(1135) + SATLiteral(1180)))
1180 5665 0
1135 5665 0
1135 1180 5664 0
c (( - aux1377 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5667 0
-1150 -5667 0
-1150 -1165 -5668 0
c (0<=( - aux1377 + SATLiteral(1150) + SATLiteral(1165)))
1165 5668 0
1150 5668 0
1150 1165 5667 0
c ((aux1377 - aux1378 + SATLiteral(1120))<=0)
5667 -5670 0
5668 -5671 0
-1120 -5670 0
-1120 5667 -5671 0
-1120 5668 -5673 0
c (0<=(aux1377 - aux1378 + SATLiteral(1120)))
-5668 5673 0
-5667 5671 0
1120 5673 0
1120 -5668 5671 0
1120 -5667 5670 0
c ((aux1374 + aux1376 - aux1379)<=0)
5664 -5675 0
5665 -5676 0
5658 -5675 0
5658 5664 -5676 0
5658 5665 -5678 0
5659 -5676 0
5659 5664 -5678 0
5659 5665 -5680 0
c (0<=(aux1374 + aux1376 - aux1379))
-5665 5680 0
-5664 5678 0
-5659 5680 0
-5659 -5665 5678 0
-5659 -5664 5676 0
-5658 5678 0
-5658 -5665 5676 0
-5658 -5664 5675 0
c (( - aux1380 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5682 0
-1092 -5682 0
-1092 -1212 -5683 0
c (0<=( - aux1380 + SATLiteral(1092) + SATLiteral(1212)))
1212 5683 0
1092 5683 0
1092 1212 5682 0
c (( - aux1381 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5685 0
-1107 -5685 0
-1107 -1197 -5686 0
c (0<=( - aux1381 + SATLiteral(1107) + SATLiteral(1197)))
1197 5686 0
1107 5686 0
1107 1197 5685 0
c (( - aux1382 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5688 0
-1137 -5688 0
-1137 -1182 -5689 0
c (0<=( - aux1382 + SATLiteral(1137) + SATLiteral(1182)))
1182 5689 0
1137 5689 0
1137 1182 5688 0
c (( - aux1383 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5691 0
-1152 -5691 0
-1152 -1167 -5692 0
c (0<=( - aux1383 + SATLiteral(1152) + SATLiteral(1167)))
1167 5692 0
1152 5692 0
1152 1167 5691 0
c ((aux1383 - aux1384 + SATLiteral(1122))<=0)
5691 -5694 0
5692 -5695 0
-1122 -5694 0
-1122 5691 -5695 0
-1122 5692 -5697 0
c (0<=(aux1383 - aux1384 + SATLiteral(1122)))
-5692 5697 0
-5691 5695 0
1122 5697 0
1122 -5692 5695 0
1122 -5691 5694 0
c ((aux1380 + aux1382 - aux1385)<=0)
5688 -5699 0
5689 -5700 0
5682 -5699 0
5682 5688 -5700 0
5682 5689 -5702 0
5683 -5700 0
5683 5688 -5702 0
5683 5689 -5704 0
c (0<=(aux1380 + aux1382 - aux1385))
-5689 5704 0
-5688 5702 0
-5683 5704 0
-5683 -5689 5702 0
-5683 -5688 5700 0
-5682 5702 0
-5682 -5689 5700 0
-5682 -5688 5699 0
c (( - aux1386 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5706 0
-1094 -5706 0
-1094 -1214 -5707 0
c (0<=( - aux1386 + SATLiteral(1094) + SATLiteral(1214)))
1214 5707 0
1094 5707 0
1094 1214 5706 0
c (( - aux1387 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5709 0
-1109 -5709 0
-1109 -1199 -5710 0
c (0<=( - aux1387 + SATLiteral(1109) + SATLiteral(1199)))
1199 5710 0
1109 5710 0
1109 1199 5709 0
c (( - aux1388 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5712 0
-1139 -5712 0
-1139 -1184 -5713 0
c (0<=( - aux1388 + SATLiteral(1139) + SATLiteral(1184)))
1184 5713 0
1139 5713 0
1139 1184 5712 0
c (( - aux1389 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5715 0
-1154 -5715 0
-1154 -1169 -5716 0
c (0<=( - aux1389 + SATLiteral(1154) + SATLiteral(1169)))
1169 5716 0
1154 5716 0
1154 1169 5715 0
c ((aux1389 - aux1390 + SATLiteral(1124))<=0)
5715 -5718 0
5716 -5719 0
-1124 -5718 0
-1124 5715 -5719 0
-1124 5716 -5721 0
c (0<=(aux1389 - aux1390 + SATLiteral(1124)))
-5716 5721 0
-5715 5719 0
1124 5721 0
1124 -5716 5719 0
1124 -5715 5718 0
c ((aux1386 + aux1388 - aux1391)<=0)
5712 -5723 0
5713 -5724 0
5706 -5723 0
5706 5712 -5724 0
5706 5713 -5726 0
5707 -5724 0
5707 5712 -5726 0
5707 5713 -5728 0
c (0<=(aux1386 + aux1388 - aux1391))
-5713 5728 0
-5712 5726 0
-5707 5728 0
-5707 -5713 5726 0
-5707 -5712 5724 0
-5706 5726 0
-5706 -5713 5724 0
-5706 -5712 5723 0
c (( - aux1392 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5730 0
-1096 -5730 0
-1096 -1216 -5731 0
c (0<=( - aux1392 + SATLiteral(1096) + SATLiteral(1216)))
1216 5731 0
1096 5731 0
1096 1216 5730 0
c (( - aux1393 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5733 0
-1111 -5733 0
-1111 -1201 -5734 0
c (0<=( - aux1393 + SATLiteral(1111) + SATLiteral(1201)))
1201 5734 0
1111 5734 0
1111 1201 5733 0
c (( - aux1394 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5736 0
-1141 -5736 0
-1141 -1186 -5737 0
c (0<=( - aux1394 + SATLiteral(1141) + SATLiteral(1186)))
1186 5737 0
1141 5737 0
1141 1186 5736 0
c (( - aux1395 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5739 0
-1156 -5739 0
-1156 -1171 -5740 0
c (0<=( - aux1395 + SATLiteral(1156) + SATLiteral(1171)))
1171 5740 0
1156 5740 0
1156 1171 5739 0
c ((aux1395 - aux1396 + SATLiteral(1126))<=0)
5739 -5742 0
5740 -5743 0
-1126 -5742 0
-1126 5739 -5743 0
-1126 5740 -5745 0
c (0<=(aux1395 - aux1396 + SATLiteral(1126)))
-5740 5745 0
-5739 5743 0
1126 5745 0
1126 -5740 5743 0
1126 -5739 5742 0
c ((aux1392 + aux1394 - aux1397)<=0)
5736 -5747 0
5737 -5748 0
5730 -5747 0
5730 5736 -5748 0
5730 5737 -5750 0
5731 -5748 0
5731 5736 -5750 0
5731 5737 -5752 0
c (0<=(aux1392 + aux1394 - aux1397))
-5737 5752 0
-5736 5750 0
-5731 5752 0
-5731 -5737 5750 0
-5731 -5736 5748 0
-5730 5750 0
-5730 -5737 5748 0
-5730 -5736 5747 0
c (( - aux1398 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5754 0
1095 -5754 0
1095 1215 -5755 0
c (0<=( - aux1398 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5755 0
-1095 5755 0
-1095 -1215 5754 0
c (( - aux1399 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5757 0
1110 -5757 0
1110 1200 -5758 0
c (0<=( - aux1399 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5758 0
-1110 5758 0
-1110 -1200 5757 0
c (( - aux1400 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5760 0
1140 -5760 0
1140 1185 -5761 0
c (0<=( - aux1400 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5761 0
-1140 5761 0
-1140 -1185 5760 0
c (( - aux1401 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5763 0
1155 -5763 0
1155 1170 -5764 0
c (0<=( - aux1401 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5764 0
-1155 5764 0
-1155 -1170 5763 0
c ((aux1401 - aux1402 + SATLiteral(-1125))<=0)
5763 -5766 0
5764 -5767 0
1125 -5766 0
1125 5763 -5767 0
1125 5764 -5769 0
c (0<=(aux1401 - aux1402 + SATLiteral(-1125)))
-5764 5769 0
-5763 5767 0
-1125 5769 0
-1125 -5764 5767 0
-1125 -5763 5766 0
c ((aux1398 + aux1400 - aux1403)<=0)
5760 -5771 0
5761 -5772 0
5754 -5771 0
5754 5760 -5772 0
5754 5761 -5774 0
5755 -5772 0
5755 5760 -5774 0
5755 5761 -5776 0
c (0<=(aux1398 + aux1400 - aux1403))
-5761 5776 0
-5760 5774 0
-5755 5776 0
-5755 -5761 5774 0
-5755 -5760 5772 0
-5754 5774 0
-5754 -5761 5772 0
-5754 -5760 5771 0
c ((SATLiteral(272) - aux1404 + SATLiteral(167))<=0)
-167 -5778 0
-272 -5778 0
-272 -167 -5779 0
c (0<=(SATLiteral(272) - aux1404 + SATLiteral(167)))
167 5779 0
272 5779 0
272 167 5778 0
c ((SATLiteral(287) - aux1405 + SATLiteral(152))<=0)
-152 -5781 0
-287 -5781 0
-287 -152 -5782 0
c (0<=(SATLiteral(287) - aux1405 + SATLiteral(152)))
152 5782 0
287 5782 0
287 152 5781 0
c ((SATLiteral(2) - aux1406 + SATLiteral(137))<=0)
-137 -5784 0
-2 -5784 0
-2 -137 -5785 0
c (0<=(SATLiteral(2) - aux1406 + SATLiteral(137)))
137 5785 0
2 5785 0
2 137 5784 0
c ((SATLiteral(17) + SATLiteral(32) - aux1407)<=0)
-32 -5787 0
-17 -5787 0
-17 -32 -5788 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1407))
32 5788 0
17 5788 0
17 32 5787 0
c ((SATLiteral(302) + aux1407 - aux1408)<=0)
5787 -5790 0
5788 -5791 0
-302 -5790 0
-302 5787 -5791 0
-302 5788 -5793 0
c (0<=(SATLiteral(302) + aux1407 - aux1408))
-5788 5793 0
-5787 5791 0
302 5793 0
302 -5788 5791 0
302 -5787 5790 0
c ((aux1404 + aux1406 - aux1409)<=0)
5784 -5795 0
5785 -5796 0
5778 -5795 0
5778 5784 -5796 0
5778 5785 -5798 0
5779 -5796 0
5779 5784 -5798 0
5779 5785 -5800 0
c (0<=(aux1404 + aux1406 - aux1409))
-5785 5800 0
-5784 5798 0
-5779 5800 0
-5779 -5785 5798 0
-5779 -5784 5796 0
-5778 5798 0
-5778 -5785 5796 0
-5778 -5784 5795 0
c ((SATLiteral(274) - aux1410 + SATLiteral(169))<=0)
-169 -5802 0
-274 -5802 0
-274 -169 -5803 0
c (0<=(SATLiteral(274) - aux1410 + SATLiteral(169)))
169 5803 0
274 5803 0
274 169 5802 0
c ((SATLiteral(289) - aux1411 + SATLiteral(154))<=0)
-154 -5805 0
-289 -5805 0
-289 -154 -5806 0
c (0<=(SATLiteral(289) - aux1411 + SATLiteral(154)))
154 5806 0
289 5806 0
289 154 5805 0
c ((SATLiteral(4) - aux1412 + SATLiteral(138))<=0)
-138 -5808 0
-4 -5808 0
-4 -138 -5809 0
c (0<=(SATLiteral(4) - aux1412 + SATLiteral(138)))
138 5809 0
4 5809 0
4 138 5808 0
c ((SATLiteral(19) + SATLiteral(34) - aux1413)<=0)
-34 -5811 0
-19 -5811 0
-19 -34 -5812 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1413))
34 5812 0
19 5812 0
19 34 5811 0
c ((SATLiteral(303) + aux1413 - aux1414)<=0)
5811 -5814 0
5812 -5815 0
-303 -5814 0
-303 5811 -5815 0
-303 5812 -5817 0
c (0<=(SATLiteral(303) + aux1413 - aux1414))
-5812 5817 0
-5811 5815 0
303 5817 0
303 -5812 5815 0
303 -5811 5814 0
c ((aux1410 + aux1412 - aux1415)<=0)
5808 -5819 0
5809 -5820 0
5802 -5819 0
5802 5808 -5820 0
5802 5809 -5822 0
5803 -5820 0
5803 5808 -5822 0
5803 5809 -5824 0
c (0<=(aux1410 + aux1412 - aux1415))
-5809 5824 0
-5808 5822 0
-5803 5824 0
-5803 -5809 5822 0
-5803 -5808 5820 0
-5802 5822 0
-5802 -5809 5820 0
-5802 -5808 5819 0
c ((SATLiteral(276) - aux1416 + SATLiteral(171))<=0)
-171 -5826 0
-276 -5826 0
-276 -171 -5827 0
c (0<=(SATLiteral(276) - aux1416 + SATLiteral(171)))
171 5827 0
276 5827 0
276 171 5826 0
c ((SATLiteral(291) - aux1417 + SATLiteral(156))<=0)
-156 -5829 0
-291 -5829 0
-291 -156 -5830 0
c (0<=(SATLiteral(291) - aux1417 + SATLiteral(156)))
156 5830 0
291 5830 0
291 156 5829 0
c ((SATLiteral(6) - aux1418 + SATLiteral(139))<=0)
-139 -5832 0
-6 -5832 0
-6 -139 -5833 0
c (0<=(SATLiteral(6) - aux1418 + SATLiteral(139)))
139 5833 0
6 5833 0
6 139 5832 0
c ((SATLiteral(21) + SATLiteral(36) - aux1419)<=0)
-36 -5835 0
-21 -5835 0
-21 -36 -5836 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1419))
36 5836 0
21 5836 0
21 36 5835 0
c ((SATLiteral(304) + aux1419 - aux1420)<=0)
5835 -5838 0
5836 -5839 0
-304 -5838 0
-304 5835 -5839 0
-304 5836 -5841 0
c (0<=(SATLiteral(304) + aux1419 - aux1420))
-5836 5841 0
-5835 5839 0
304 5841 0
304 -5836 5839 0
304 -5835 5838 0
c ((aux1416 + aux1418 - aux1421)<=0)
5832 -5843 0
5833 -5844 0
5826 -5843 0
5826 5832 -5844 0
5826 5833 -5846 0
5827 -5844 0
5827 5832 -5846 0
5827 5833 -5848 0
c (0<=(aux1416 + aux1418 - aux1421))
-5833 5848 0
-5832 5846 0
-5827 5848 0
-5827 -5833 5846 0
-5827 -5832 5844 0
-5826 5846 0
-5826 -5833 5844 0
-5826 -5832 5843 0
c ((SATLiteral(278) - aux1422 + SATLiteral(173))<=0)
-173 -5850 0
-278 -5850 0
-278 -173 -5851 0
c (0<=(SATLiteral(278) - aux1422 + SATLiteral(173)))
173 5851 0
278 5851 0
278 173 5850 0
c ((SATLiteral(293) - aux1423 + SATLiteral(158))<=0)
-158 -5853 0
-293 -5853 0
-293 -158 -5854 0
c (0<=(SATLiteral(293) - aux1423 + SATLiteral(158)))
158 5854 0
293 5854 0
293 158 5853 0
c ((SATLiteral(8) - aux1424 + SATLiteral(140))<=0)
-140 -5856 0
-8 -5856 0
-8 -140 -5857 0
c (0<=(SATLiteral(8) - aux1424 + SATLiteral(140)))
140 5857 0
8 5857 0
8 140 5856 0
c ((SATLiteral(23) + SATLiteral(38) - aux1425)<=0)
-38 -5859 0
-23 -5859 0
-23 -38 -5860 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1425))
38 5860 0
23 5860 0
23 38 5859 0
c ((SATLiteral(305) + aux1425 - aux1426)<=0)
5859 -5862 0
5860 -5863 0
-305 -5862 0
-305 5859 -5863 0
-305 5860 -5865 0
c (0<=(SATLiteral(305) + aux1425 - aux1426))
-5860 5865 0
-5859 5863 0
305 5865 0
305 -5860 5863 0
305 -5859 5862 0
c ((aux1422 + aux1424 - aux1427)<=0)
5856 -5867 0
5857 -5868 0
5850 -5867 0
5850 5856 -5868 0
5850 5857 -5870 0
5851 -5868 0
5851 5856 -5870 0
5851 5857 -5872 0
c (0<=(aux1422 + aux1424 - aux1427))
-5857 5872 0
-5856 5870 0
-5851 5872 0
-5851 -5857 5870 0
-5851 -5856 5868 0
-5850 5870 0
-5850 -5857 5868 0
-5850 -5856 5867 0
c ((SATLiteral(280) - aux1428 + SATLiteral(175))<=0)
-175 -5874 0
-280 -5874 0
-280 -175 -5875 0
c (0<=(SATLiteral(280) - aux1428 + SATLiteral(175)))
175 5875 0
280 5875 0
280 175 5874 0
c ((SATLiteral(295) - aux1429 + SATLiteral(160))<=0)
-160 -5877 0
-295 -5877 0
-295 -160 -5878 0
c (0<=(SATLiteral(295) - aux1429 + SATLiteral(160)))
160 5878 0
295 5878 0
295 160 5877 0
c ((SATLiteral(10) - aux1430 + SATLiteral(141))<=0)
-141 -5880 0
-10 -5880 0
-10 -141 -5881 0
c (0<=(SATLiteral(10) - aux1430 + SATLiteral(141)))
141 5881 0
10 5881 0
10 141 5880 0
c ((SATLiteral(25) + SATLiteral(40) - aux1431)<=0)
-40 -5883 0
-25 -5883 0
-25 -40 -5884 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1431))
40 5884 0
25 5884 0
25 40 5883 0
c ((SATLiteral(306) + aux1431 - aux1432)<=0)
5883 -5886 0
5884 -5887 0
-306 -5886 0
-306 5883 -5887 0
-306 5884 -5889 0
c (0<=(SATLiteral(306) + aux1431 - aux1432))
-5884 5889 0
-5883 5887 0
306 5889 0
306 -5884 5887 0
306 -5883 5886 0
c ((aux1428 + aux1430 - aux1433)<=0)
5880 -5891 0
5881 -5892 0
5874 -5891 0
5874 5880 -5892 0
5874 5881 -5894 0
5875 -5892 0
5875 5880 -5894 0
5875 5881 -5896 0
c (0<=(aux1428 + aux1430 - aux1433))
-5881 5896 0
-5880 5894 0
-5875 5896 0
-5875 -5881 5894 0
-5875 -5880 5892 0
-5874 5894 0
-5874 -5881 5892 0
-5874 -5880 5891 0
c ((SATLiteral(282) - aux1434 + SATLiteral(177))<=0)
-177 -5898 0
-282 -5898 0
-282 -177 -5899 0
c (0<=(SATLiteral(282) - aux1434 + SATLiteral(177)))
177 5899 0
282 5899 0
282 177 5898 0
c ((SATLiteral(297) - aux1435 + SATLiteral(162))<=0)
-162 -5901 0
-297 -5901 0
-297 -162 -5902 0
c (0<=(SATLiteral(297) - aux1435 + SATLiteral(162)))
162 5902 0
297 5902 0
297 162 5901 0
c ((SATLiteral(12) - aux1436 + SATLiteral(142))<=0)
-142 -5904 0
-12 -5904 0
-12 -142 -5905 0
c (0<=(SATLiteral(12) - aux1436 + SATLiteral(142)))
142 5905 0
12 5905 0
12 142 5904 0
c ((SATLiteral(27) + SATLiteral(42) - aux1437)<=0)
-42 -5907 0
-27 -5907 0
-27 -42 -5908 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1437))
42 5908 0
27 5908 0
27 42 5907 0
c ((SATLiteral(307) + aux1437 - aux1438)<=0)
5907 -5910 0
5908 -5911 0
-307 -5910 0
-307 5907 -5911 0
-307 5908 -5913 0
c (0<=(SATLiteral(307) + aux1437 - aux1438))
-5908 5913 0
-5907 5911 0
307 5913 0
307 -5908 5911 0
307 -5907 5910 0
c ((aux1434 + aux1436 - aux1439)<=0)
5904 -5915 0
5905 -5916 0
5898 -5915 0
5898 5904 -5916 0
5898 5905 -5918 0
5899 -5916 0
5899 5904 -5918 0
5899 5905 -5920 0
c (0<=(aux1434 + aux1436 - aux1439))
-5905 5920 0
-5904 5918 0
-5899 5920 0
-5899 -5905 5918 0
-5899 -5904 5916 0
-5898 5918 0
-5898 -5905 5916 0
-5898 -5904 5915 0
c ((SATLiteral(284) - aux1440 + SATLiteral(179))<=0)
-179 -5922 0
-284 -5922 0
-284 -179 -5923 0
c (0<=(SATLiteral(284) - aux1440 + SATLiteral(179)))
179 5923 0
284 5923 0
284 179 5922 0
c ((SATLiteral(299) - aux1441 + SATLiteral(164))<=0)
-164 -5925 0
-299 -5925 0
-299 -164 -5926 0
c (0<=(SATLiteral(299) - aux1441 + SATLiteral(164)))
164 5926 0
299 5926 0
299 164 5925 0
c ((SATLiteral(14) - aux1442 + SATLiteral(143))<=0)
-143 -5928 0
-14 -5928 0
-14 -143 -5929 0
c (0<=(SATLiteral(14) - aux1442 + SATLiteral(143)))
143 5929 0
14 5929 0
14 143 5928 0
c ((SATLiteral(29) + SATLiteral(44) - aux1443)<=0)
-44 -5931 0
-29 -5931 0
-29 -44 -5932 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1443))
44 5932 0
29 5932 0
29 44 5931 0
c ((SATLiteral(308) + aux1443 - aux1444)<=0)
5931 -5934 0
5932 -5935 0
-308 -5934 0
-308 5931 -5935 0
-308 5932 -5937 0
c (0<=(SATLiteral(308) + aux1443 - aux1444))
-5932 5937 0
-5931 5935 0
308 5937 0
308 -5932 5935 0
308 -5931 5934 0
c ((aux1440 + aux1442 - aux1445)<=0)
5928 -5939 0
5929 -5940 0
5922 -5939 0
5922 5928 -5940 0
5922 5929 -5942 0
5923 -5940 0
5923 5928 -5942 0
5923 5929 -5944 0
c (0<=(aux1440 + aux1442 - aux1445))
-5929 5944 0
-5928 5942 0
-5923 5944 0
-5923 -5929 5942 0
-5923 -5928 5940 0
-5922 5942 0
-5922 -5929 5940 0
-5922 -5928 5939 0
c ((SATLiteral(286) - aux1446 + SATLiteral(181))<=0)
-181 -5946 0
-286 -5946 0
-286 -181 -5947 0
c (0<=(SATLiteral(286) - aux1446 + SATLiteral(181)))
181 5947 0
286 5947 0
286 181 5946 0
c ((SATLiteral(301) - aux1447 + SATLiteral(166))<=0)
-166 -5949 0
-301 -5949 0
-301 -166 -5950 0
c (0<=(SATLiteral(301) - aux1447 + SATLiteral(166)))
166 5950 0
301 5950 0
301 166 5949 0
c ((SATLiteral(16) - aux1448 + SATLiteral(144))<=0)
-144 -5952 0
-16 -5952 0
-16 -144 -5953 0
c (0<=(SATLiteral(16) - aux1448 + SATLiteral(144)))
144 5953 0
16 5953 0
16 144 5952 0
c ((SATLiteral(31) + SATLiteral(46) - aux1449)<=0)
-46 -5955 0
-31 -5955 0
-31 -46 -5956 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1449))
46 5956 0
31 5956 0
31 46 5955 0
c ((SATLiteral(309) + aux1449 - aux1450)<=0)
5955 -5958 0
5956 -5959 0
-309 -5958 0
-309 5955 -5959 0
-309 5956 -5961 0
c (0<=(SATLiteral(309) + aux1449 - aux1450))
-5956 5961 0
-5955 5959 0
309 5961 0
309 -5956 5959 0
309 -5955 5958 0
c ((aux1446 + aux1448 - aux1451)<=0)
5952 -5963 0
5953 -5964 0
5946 -5963 0
5946 5952 -5964 0
5946 5953 -5966 0
5947 -5964 0
5947 5952 -5966 0
5947 5953 -5968 0
c (0<=(aux1446 + aux1448 - aux1451))
-5953 5968 0
-5952 5966 0
-5947 5968 0
-5947 -5953 5966 0
-5947 -5952 5964 0
-5946 5966 0
-5946 -5953 5964 0
-5946 -5952 5963 0
c ((SATLiteral(-285) - aux1452 + SATLiteral(-180))<=0)
180 -5970 0
285 -5970 0
285 180 -5971 0
c (0<=(SATLiteral(-285) - aux1452 + SATLiteral(-180)))
-180 5971 0
-285 5971 0
-285 -180 5970 0
c ((SATLiteral(-300) - aux1453 + SATLiteral(-165))<=0)
165 -5973 0
300 -5973 0
300 165 -5974 0
c (0<=(SATLiteral(-300) - aux1453 + SATLiteral(-165)))
-165 5974 0
-300 5974 0
-300 -165 5973 0
c ((SATLiteral(-15) - aux1454 + SATLiteral(145))<=0)
-145 -5976 0
15 -5976 0
15 -145 -5977 0
c (0<=(SATLiteral(-15) - aux1454 + SATLiteral(145)))
145 5977 0
-15 5977 0
-15 145 5976 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1455)<=0)
45 -5979 0
30 -5979 0
30 45 -5980 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1455))
-45 5980 0
-30 5980 0
-30 -45 5979 0
c ((SATLiteral(310) + aux1455 - aux1456)<=0)
5979 -5982 0
5980 -5983 0
-310 -5982 0
-310 5979 -5983 0
-310 5980 -5985 0
c (0<=(SATLiteral(310) + aux1455 - aux1456))
-5980 5985 0
-5979 5983 0
310 5985 0
310 -5980 5983 0
310 -5979 5982 0
c ((aux1452 + aux1454 - aux1457)<=0)
5976 -5987 0
5977 -5988 0
5970 -5987 0
5970 5976 -5988 0
5970 5977 -5990 0
5971 -5988 0
5971 5976 -5990 0
5971 5977 -5992 0
c (0<=(aux1452 + aux1454 - aux1457))
-5977 5992 0
-5976 5990 0
-5971 5992 0
-5971 -5977 5990 0
-5971 -5976 5988 0
-5970 5990 0
-5970 -5977 5988 0
-5970 -5976 5987 0
c ((SATLiteral(317) - aux1458 + SATLiteral(212))<=0)
-212 -5994 0
-317 -5994 0
-317 -212 -5995 0
c (0<=(SATLiteral(317) - aux1458 + SATLiteral(212)))
212 5995 0
317 5995 0
317 212 5994 0
c ((SATLiteral(332) - aux1459 + SATLiteral(197))<=0)
-197 -5997 0
-332 -5997 0
-332 -197 -5998 0
c (0<=(SATLiteral(332) - aux1459 + SATLiteral(197)))
197 5998 0
332 5998 0
332 197 5997 0
c ((SATLiteral(47) - aux1460 + SATLiteral(182))<=0)
-182 -6000 0
-47 -6000 0
-47 -182 -6001 0
c (0<=(SATLiteral(47) - aux1460 + SATLiteral(182)))
182 6001 0
47 6001 0
47 182 6000 0
c ((SATLiteral(62) + SATLiteral(77) - aux1461)<=0)
-77 -6003 0
-62 -6003 0
-62 -77 -6004 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1461))
77 6004 0
62 6004 0
62 77 6003 0
c ((SATLiteral(347) + aux1461 - aux1462)<=0)
6003 -6006 0
6004 -6007 0
-347 -6006 0
-347 6003 -6007 0
-347 6004 -6009 0
c (0<=(SATLiteral(347) + aux1461 - aux1462))
-6004 6009 0
-6003 6007 0
347 6009 0
347 -6004 6007 0
347 -6003 6006 0
c ((aux1458 + aux1460 - aux1463)<=0)
6000 -6011 0
6001 -6012 0
5994 -6011 0
5994 6000 -6012 0
5994 6001 -6014 0
5995 -6012 0
5995 6000 -6014 0
5995 6001 -6016 0
c (0<=(aux1458 + aux1460 - aux1463))
-6001 6016 0
-6000 6014 0
-5995 6016 0
-5995 -6001 6014 0
-5995 -6000 6012 0
-5994 6014 0
-5994 -6001 6012 0
-5994 -6000 6011 0
c ((SATLiteral(319) - aux1464 + SATLiteral(214))<=0)
-214 -6018 0
-319 -6018 0
-319 -214 -6019 0
c (0<=(SATLiteral(319) - aux1464 + SATLiteral(214)))
214 6019 0
319 6019 0
319 214 6018 0
c ((SATLiteral(334) - aux1465 + SATLiteral(199))<=0)
-199 -6021 0
-334 -6021 0
-334 -199 -6022 0
c (0<=(SATLiteral(334) - aux1465 + SATLiteral(199)))
199 6022 0
334 6022 0
334 199 6021 0
c ((SATLiteral(49) - aux1466 + SATLiteral(184))<=0)
-184 -6024 0
-49 -6024 0
-49 -184 -6025 0
c (0<=(SATLiteral(49) - aux1466 + SATLiteral(184)))
184 6025 0
49 6025 0
49 184 6024 0
c ((SATLiteral(64) + SATLiteral(79) - aux1467)<=0)
-79 -6027 0
-64 -6027 0
-64 -79 -6028 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1467))
79 6028 0
64 6028 0
64 79 6027 0
c ((SATLiteral(349) + aux1467 - aux1468)<=0)
6027 -6030 0
6028 -6031 0
-349 -6030 0
-349 6027 -6031 0
-349 6028 -6033 0
c (0<=(SATLiteral(349) + aux1467 - aux1468))
-6028 6033 0
-6027 6031 0
349 6033 0
349 -6028 6031 0
349 -6027 6030 0
c ((aux1464 + aux1466 - aux1469)<=0)
6024 -6035 0
6025 -6036 0
6018 -6035 0
6018 6024 -6036 0
6018 6025 -6038 0
6019 -6036 0
6019 6024 -6038 0
6019 6025 -6040 0
c (0<=(aux1464 + aux1466 - aux1469))
-6025 6040 0
-6024 6038 0
-6019 6040 0
-6019 -6025 6038 0
-6019 -6024 6036 0
-6018 6038 0
-6018 -6025 6036 0
-6018 -6024 6035 0
c ((SATLiteral(321) - aux1470 + SATLiteral(216))<=0)
-216 -6042 0
-321 -6042 0
-321 -216 -6043 0
c (0<=(SATLiteral(321) - aux1470 + SATLiteral(216)))
216 6043 0
321 6043 0
321 216 6042 0
c ((SATLiteral(336) - aux1471 + SATLiteral(201))<=0)
-201 -6045 0
-336 -6045 0
-336 -201 -6046 0
c (0<=(SATLiteral(336) - aux1471 + SATLiteral(201)))
201 6046 0
336 6046 0
336 201 6045 0
c ((SATLiteral(51) - aux1472 + SATLiteral(186))<=0)
-186 -6048 0
-51 -6048 0
-51 -186 -6049 0
c (0<=(SATLiteral(51) - aux1472 + SATLiteral(186)))
186 6049 0
51 6049 0
51 186 6048 0
c ((SATLiteral(66) + SATLiteral(81) - aux1473)<=0)
-81 -6051 0
-66 -6051 0
-66 -81 -6052 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1473))
81 6052 0
66 6052 0
66 81 6051 0
c ((SATLiteral(351) + aux1473 - aux1474)<=0)
6051 -6054 0
6052 -6055 0
-351 -6054 0
-351 6051 -6055 0
-351 6052 -6057 0
c (0<=(SATLiteral(351) + aux1473 - aux1474))
-6052 6057 0
-6051 6055 0
351 6057 0
351 -6052 6055 0
351 -6051 6054 0
c ((aux1470 + aux1472 - aux1475)<=0)
6048 -6059 0
6049 -6060 0
6042 -6059 0
6042 6048 -6060 0
6042 6049 -6062 0
6043 -6060 0
6043 6048 -6062 0
6043 6049 -6064 0
c (0<=(aux1470 + aux1472 - aux1475))
-6049 6064 0
-6048 6062 0
-6043 6064 0
-6043 -6049 6062 0
-6043 -6048 6060 0
-6042 6062 0
-6042 -6049 6060 0
-6042 -6048 6059 0
c ((SATLiteral(323) - aux1476 + SATLiteral(218))<=0)
-218 -6066 0
-323 -6066 0
-323 -218 -6067 0
c (0<=(SATLiteral(323) - aux1476 + SATLiteral(218)))
218 6067 0
323 6067 0
323 218 6066 0
c ((SATLiteral(338) - aux1477 + SATLiteral(203))<=0)
-203 -6069 0
-338 -6069 0
-338 -203 -6070 0
c (0<=(SATLiteral(338) - aux1477 + SATLiteral(203)))
203 6070 0
338 6070 0
338 203 6069 0
c ((SATLiteral(53) - aux1478 + SATLiteral(188))<=0)
-188 -6072 0
-53 -6072 0
-53 -188 -6073 0
c (0<=(SATLiteral(53) - aux1478 + SATLiteral(188)))
188 6073 0
53 6073 0
53 188 6072 0
c ((SATLiteral(68) + SATLiteral(83) - aux1479)<=0)
-83 -6075 0
-68 -6075 0
-68 -83 -6076 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1479))
83 6076 0
68 6076 0
68 83 6075 0
c ((SATLiteral(353) + aux1479 - aux1480)<=0)
6075 -6078 0
6076 -6079 0
-353 -6078 0
-353 6075 -6079 0
-353 6076 -6081 0
c (0<=(SATLiteral(353) + aux1479 - aux1480))
-6076 6081 0
-6075 6079 0
353 6081 0
353 -6076 6079 0
353 -6075 6078 0
c ((aux1476 + aux1478 - aux1481)<=0)
6072 -6083 0
6073 -6084 0
6066 -6083 0
6066 6072 -6084 0
6066 6073 -6086 0
6067 -6084 0
6067 6072 -6086 0
6067 6073 -6088 0
c (0<=(aux1476 + aux1478 - aux1481))
-6073 6088 0
-6072 6086 0
-6067 6088 0
-6067 -6073 6086 0
-6067 -6072 6084 0
-6066 6086 0
-6066 -6073 6084 0
-6066 -6072 6083 0
c ((SATLiteral(325) - aux1482 + SATLiteral(220))<=0)
-220 -6090 0
-325 -6090 0
-325 -220 -6091 0
c (0<=(SATLiteral(325) - aux1482 + SATLiteral(220)))
220 6091 0
325 6091 0
325 220 6090 0
c ((SATLiteral(340) - aux1483 + SATLiteral(205))<=0)
-205 -6093 0
-340 -6093 0
-340 -205 -6094 0
c (0<=(SATLiteral(340) - aux1483 + SATLiteral(205)))
205 6094 0
340 6094 0
340 205 6093 0
c ((SATLiteral(55) - aux1484 + SATLiteral(190))<=0)
-190 -6096 0
-55 -6096 0
-55 -190 -6097 0
c (0<=(SATLiteral(55) - aux1484 + SATLiteral(190)))
190 6097 0
55 6097 0
55 190 6096 0
c ((SATLiteral(70) + SATLiteral(85) - aux1485)<=0)
-85 -6099 0
-70 -6099 0
-70 -85 -6100 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1485))
85 6100 0
70 6100 0
70 85 6099 0
c ((SATLiteral(355) + aux1485 - aux1486)<=0)
6099 -6102 0
6100 -6103 0
-355 -6102 0
-355 6099 -6103 0
-355 6100 -6105 0
c (0<=(SATLiteral(355) + aux1485 - aux1486))
-6100 6105 0
-6099 6103 0
355 6105 0
355 -6100 6103 0
355 -6099 6102 0
c ((aux1482 + aux1484 - aux1487)<=0)
6096 -6107 0
6097 -6108 0
6090 -6107 0
6090 6096 -6108 0
6090 6097 -6110 0
6091 -6108 0
6091 6096 -6110 0
6091 6097 -6112 0
c (0<=(aux1482 + aux1484 - aux1487))
-6097 6112 0
-6096 6110 0
-6091 6112 0
-6091 -6097 6110 0
-6091 -6096 6108 0
-6090 6110 0
-6090 -6097 6108 0
-6090 -6096 6107 0
c ((SATLiteral(327) - aux1488 + SATLiteral(222))<=0)
-222 -6114 0
-327 -6114 0
-327 -222 -6115 0
c (0<=(SATLiteral(327) - aux1488 + SATLiteral(222)))
222 6115 0
327 6115 0
327 222 6114 0
c ((SATLiteral(342) - aux1489 + SATLiteral(207))<=0)
-207 -6117 0
-342 -6117 0
-342 -207 -6118 0
c (0<=(SATLiteral(342) - aux1489 + SATLiteral(207)))
207 6118 0
342 6118 0
342 207 6117 0
c ((SATLiteral(57) - aux1490 + SATLiteral(192))<=0)
-192 -6120 0
-57 -6120 0
-57 -192 -6121 0
c (0<=(SATLiteral(57) - aux1490 + SATLiteral(192)))
192 6121 0
57 6121 0
57 192 6120 0
c ((SATLiteral(72) + SATLiteral(87) - aux1491)<=0)
-87 -6123 0
-72 -6123 0
-72 -87 -6124 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1491))
87 6124 0
72 6124 0
72 87 6123 0
c ((SATLiteral(357) + aux1491 - aux1492)<=0)
6123 -6126 0
6124 -6127 0
-357 -6126 0
-357 6123 -6127 0
-357 6124 -6129 0
c (0<=(SATLiteral(357) + aux1491 - aux1492))
-6124 6129 0
-6123 6127 0
357 6129 0
357 -6124 6127 0
357 -6123 6126 0
c ((aux1488 + aux1490 - aux1493)<=0)
6120 -6131 0
6121 -6132 0
6114 -6131 0
6114 6120 -6132 0
6114 6121 -6134 0
6115 -6132 0
6115 6120 -6134 0
6115 6121 -6136 0
c (0<=(aux1488 + aux1490 - aux1493))
-6121 6136 0
-6120 6134 0
-6115 6136 0
-6115 -6121 6134 0
-6115 -6120 6132 0
-6114 6134 0
-6114 -6121 6132 0
-6114 -6120 6131 0
c ((SATLiteral(329) - aux1494 + SATLiteral(224))<=0)
-224 -6138 0
-329 -6138 0
-329 -224 -6139 0
c (0<=(SATLiteral(329) - aux1494 + SATLiteral(224)))
224 6139 0
329 6139 0
329 224 6138 0
c ((SATLiteral(344) - aux1495 + SATLiteral(209))<=0)
-209 -6141 0
-344 -6141 0
-344 -209 -6142 0
c (0<=(SATLiteral(344) - aux1495 + SATLiteral(209)))
209 6142 0
344 6142 0
344 209 6141 0
c ((SATLiteral(59) - aux1496 + SATLiteral(194))<=0)
-194 -6144 0
-59 -6144 0
-59 -194 -6145 0
c (0<=(SATLiteral(59) - aux1496 + SATLiteral(194)))
194 6145 0
59 6145 0
59 194 6144 0
c ((SATLiteral(74) + SATLiteral(89) - aux1497)<=0)
-89 -6147 0
-74 -6147 0
-74 -89 -6148 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1497))
89 6148 0
74 6148 0
74 89 6147 0
c ((SATLiteral(359) + aux1497 - aux1498)<=0)
6147 -6150 0
6148 -6151 0
-359 -6150 0
-359 6147 -6151 0
-359 6148 -6153 0
c (0<=(SATLiteral(359) + aux1497 - aux1498))
-6148 6153 0
-6147 6151 0
359 6153 0
359 -6148 6151 0
359 -6147 6150 0
c ((aux1494 + aux1496 - aux1499)<=0)
6144 -6155 0
6145 -6156 0
6138 -6155 0
6138 6144 -6156 0
6138 6145 -6158 0
6139 -6156 0
6139 6144 -6158 0
6139 6145 -6160 0
c (0<=(aux1494 + aux1496 - aux1499))
-6145 6160 0
-6144 6158 0
-6139 6160 0
-6139 -6145 6158 0
-6139 -6144 6156 0
-6138 6158 0
-6138 -6145 6156 0
-6138 -6144 6155 0
c ((SATLiteral(331) - aux1500 + SATLiteral(226))<=0)
-226 -6162 0
-331 -6162 0
-331 -226 -6163 0
c (0<=(SATLiteral(331) - aux1500 + SATLiteral(226)))
226 6163 0
331 6163 0
331 226 6162 0
c ((SATLiteral(346) - aux1501 + SATLiteral(211))<=0)
-211 -6165 0
-346 -6165 0
-346 -211 -6166 0
c (0<=(SATLiteral(346) - aux1501 + SATLiteral(211)))
211 6166 0
346 6166 0
346 211 6165 0
c ((SATLiteral(61) - aux1502 + SATLiteral(196))<=0)
-196 -6168 0
-61 -6168 0
-61 -196 -6169 0
c (0<=(SATLiteral(61) - aux1502 + SATLiteral(196)))
196 6169 0
61 6169 0
61 196 6168 0
c ((SATLiteral(76) + SATLiteral(91) - aux1503)<=0)
-91 -6171 0
-76 -6171 0
-76 -91 -6172 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1503))
91 6172 0
76 6172 0
76 91 6171 0
c ((SATLiteral(361) + aux1503 - aux1504)<=0)
6171 -6174 0
6172 -6175 0
-361 -6174 0
-361 6171 -6175 0
-361 6172 -6177 0
c (0<=(SATLiteral(361) + aux1503 - aux1504))
-6172 6177 0
-6171 6175 0
361 6177 0
361 -6172 6175 0
361 -6171 6174 0
c ((aux1500 + aux1502 - aux1505)<=0)
6168 -6179 0
6169 -6180 0
6162 -6179 0
6162 6168 -6180 0
6162 6169 -6182 0
6163 -6180 0
6163 6168 -6182 0
6163 6169 -6184 0
c (0<=(aux1500 + aux1502 - aux1505))
-6169 6184 0
-6168 6182 0
-6163 6184 0
-6163 -6169 6182 0
-6163 -6168 6180 0
-6162 6182 0
-6162 -6169 6180 0
-6162 -6168 6179 0
c ((SATLiteral(-330) - aux1506 + SATLiteral(-225))<=0)
225 -6186 0
330 -6186 0
330 225 -6187 0
c (0<=(SATLiteral(-330) - aux1506 + SATLiteral(-225)))
-225 6187 0
-330 6187 0
-330 -225 6186 0
c ((SATLiteral(-345) - aux1507 + SATLiteral(-210))<=0)
210 -6189 0
345 -6189 0
345 210 -6190 0
c (0<=(SATLiteral(-345) - aux1507 + SATLiteral(-210)))
-210 6190 0
-345 6190 0
-345 -210 6189 0
c ((SATLiteral(-60) - aux1508 + SATLiteral(-195))<=0)
195 -6192 0
60 -6192 0
60 195 -6193 0
c (0<=(SATLiteral(-60) - aux1508 + SATLiteral(-195)))
-195 6193 0
-60 6193 0
-60 -195 6192 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1509)<=0)
90 -6195 0
75 -6195 0
75 90 -6196 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1509))
-90 6196 0
-75 6196 0
-75 -90 6195 0
c ((SATLiteral(-360) + aux1509 - aux1510)<=0)
6195 -6198 0
6196 -6199 0
360 -6198 0
360 6195 -6199 0
360 6196 -6201 0
c (0<=(SATLiteral(-360) + aux1509 - aux1510))
-6196 6201 0
-6195 6199 0
-360 6201 0
-360 -6196 6199 0
-360 -6195 6198 0
c ((aux1506 + aux1508 - aux1511)<=0)
6192 -6203 0
6193 -6204 0
6186 -6203 0
6186 6192 -6204 0
6186 6193 -6206 0
6187 -6204 0
6187 6192 -6206 0
6187 6193 -6208 0
c (0<=(aux1506 + aux1508 - aux1511))
-6193 6208 0
-6192 6206 0
-6187 6208 0
-6187 -6193 6206 0
-6187 -6192 6204 0
-6186 6206 0
-6186 -6193 6204 0
-6186 -6192 6203 0
c ((SATLiteral(362) - aux1512 + SATLiteral(257))<=0)
-257 -6210 0
-362 -6210 0
-362 -257 -6211 0
c (0<=(SATLiteral(362) - aux1512 + SATLiteral(257)))
257 6211 0
362 6211 0
362 257 6210 0
c ((SATLiteral(377) - aux1513 + SATLiteral(242))<=0)
-242 -6213 0
-377 -6213 0
-377 -242 -6214 0
c (0<=(SATLiteral(377) - aux1513 + SATLiteral(242)))
242 6214 0
377 6214 0
377 242 6213 0
c ((SATLiteral(92) - aux1514 + SATLiteral(227))<=0)
-227 -6216 0
-92 -6216 0
-92 -227 -6217 0
c (0<=(SATLiteral(92) - aux1514 + SATLiteral(227)))
227 6217 0
92 6217 0
92 227 6216 0
c ((SATLiteral(107) + SATLiteral(122) - aux1515)<=0)
-122 -6219 0
-107 -6219 0
-107 -122 -6220 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1515))
122 6220 0
107 6220 0
107 122 6219 0
c ((SATLiteral(392) + aux1515 - aux1516)<=0)
6219 -6222 0
6220 -6223 0
-392 -6222 0
-392 6219 -6223 0
-392 6220 -6225 0
c (0<=(SATLiteral(392) + aux1515 - aux1516))
-6220 6225 0
-6219 6223 0
392 6225 0
392 -6220 6223 0
392 -6219 6222 0
c ((aux1512 + aux1514 - aux1517)<=0)
6216 -6227 0
6217 -6228 0
6210 -6227 0
6210 6216 -6228 0
6210 6217 -6230 0
6211 -6228 0
6211 6216 -6230 0
6211 6217 -6232 0
c (0<=(aux1512 + aux1514 - aux1517))
-6217 6232 0
-6216 6230 0
-6211 6232 0
-6211 -6217 6230 0
-6211 -6216 6228 0
-6210 6230 0
-6210 -6217 6228 0
-6210 -6216 6227 0
c ((SATLiteral(364) - aux1518 + SATLiteral(259))<=0)
-259 -6234 0
-364 -6234 0
-364 -259 -6235 0
c (0<=(SATLiteral(364) - aux1518 + SATLiteral(259)))
259 6235 0
364 6235 0
364 259 6234 0
c ((SATLiteral(379) - aux1519 + SATLiteral(244))<=0)
-244 -6237 0
-379 -6237 0
-379 -244 -6238 0
c (0<=(SATLiteral(379) - aux1519 + SATLiteral(244)))
244 6238 0
379 6238 0
379 244 6237 0
c ((SATLiteral(94) - aux1520 + SATLiteral(229))<=0)
-229 -6240 0
-94 -6240 0
-94 -229 -6241 0
c (0<=(SATLiteral(94) - aux1520 + SATLiteral(229)))
229 6241 0
94 6241 0
94 229 6240 0
c ((SATLiteral(109) + SATLiteral(124) - aux1521)<=0)
-124 -6243 0
-109 -6243 0
-109 -124 -6244 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1521))
124 6244 0
109 6244 0
109 124 6243 0
c ((SATLiteral(394) + aux1521 - aux1522)<=0)
6243 -6246 0
6244 -6247 0
-394 -6246 0
-394 6243 -6247 0
-394 6244 -6249 0
c (0<=(SATLiteral(394) + aux1521 - aux1522))
-6244 6249 0
-6243 6247 0
394 6249 0
394 -6244 6247 0
394 -6243 6246 0
c ((aux1518 + aux1520 - aux1523)<=0)
6240 -6251 0
6241 -6252 0
6234 -6251 0
6234 6240 -6252 0
6234 6241 -6254 0
6235 -6252 0
6235 6240 -6254 0
6235 6241 -6256 0
c (0<=(aux1518 + aux1520 - aux1523))
-6241 6256 0
-6240 6254 0
-6235 6256 0
-6235 -6241 6254 0
-6235 -6240 6252 0
-6234 6254 0
-6234 -6241 6252 0
-6234 -6240 6251 0
c ((SATLiteral(366) - aux1524 + SATLiteral(261))<=0)
-261 -6258 0
-366 -6258 0
-366 -261 -6259 0
c (0<=(SATLiteral(366) - aux1524 + SATLiteral(261)))
261 6259 0
366 6259 0
366 261 6258 0
c ((SATLiteral(381) - aux1525 + SATLiteral(246))<=0)
-246 -6261 0
-381 -6261 0
-381 -246 -6262 0
c (0<=(SATLiteral(381) - aux1525 + SATLiteral(246)))
246 6262 0
381 6262 0
381 246 6261 0
c ((SATLiteral(96) - aux1526 + SATLiteral(231))<=0)
-231 -6264 0
-96 -6264 0
-96 -231 -6265 0
c (0<=(SATLiteral(96) - aux1526 + SATLiteral(231)))
231 6265 0
96 6265 0
96 231 6264 0
c ((SATLiteral(111) + SATLiteral(126) - aux1527)<=0)
-126 -6267 0
-111 -6267 0
-111 -126 -6268 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1527))
126 6268 0
111 6268 0
111 126 6267 0
c ((SATLiteral(396) + aux1527 - aux1528)<=0)
6267 -6270 0
6268 -6271 0
-396 -6270 0
-396 6267 -6271 0
-396 6268 -6273 0
c (0<=(SATLiteral(396) + aux1527 - aux1528))
-6268 6273 0
-6267 6271 0
396 6273 0
396 -6268 6271 0
396 -6267 6270 0
c ((aux1524 + aux1526 - aux1529)<=0)
6264 -6275 0
6265 -6276 0
6258 -6275 0
6258 6264 -6276 0
6258 6265 -6278 0
6259 -6276 0
6259 6264 -6278 0
6259 6265 -6280 0
c (0<=(aux1524 + aux1526 - aux1529))
-6265 6280 0
-6264 6278 0
-6259 6280 0
-6259 -6265 6278 0
-6259 -6264 6276 0
-6258 6278 0
-6258 -6265 6276 0
-6258 -6264 6275 0
c ((SATLiteral(368) - aux1530 + SATLiteral(263))<=0)
-263 -6282 0
-368 -6282 0
-368 -263 -6283 0
c (0<=(SATLiteral(368) - aux1530 + SATLiteral(263)))
263 6283 0
368 6283 0
368 263 6282 0
c ((SATLiteral(383) - aux1531 + SATLiteral(248))<=0)
-248 -6285 0
-383 -6285 0
-383 -248 -6286 0
c (0<=(SATLiteral(383) - aux1531 + SATLiteral(248)))
248 6286 0
383 6286 0
383 248 6285 0
c ((SATLiteral(98) - aux1532 + SATLiteral(233))<=0)
-233 -6288 0
-98 -6288 0
-98 -233 -6289 0
c (0<=(SATLiteral(98) - aux1532 + SATLiteral(233)))
233 6289 0
98 6289 0
98 233 6288 0
c ((SATLiteral(113) + SATLiteral(128) - aux1533)<=0)
-128 -6291 0
-113 -6291 0
-113 -128 -6292 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1533))
128 6292 0
113 6292 0
113 128 6291 0
c ((SATLiteral(398) + aux1533 - aux1534)<=0)
6291 -6294 0
6292 -6295 0
-398 -6294 0
-398 6291 -6295 0
-398 6292 -6297 0
c (0<=(SATLiteral(398) + aux1533 - aux1534))
-6292 6297 0
-6291 6295 0
398 6297 0
398 -6292 6295 0
398 -6291 6294 0
c ((aux1530 + aux1532 - aux1535)<=0)
6288 -6299 0
6289 -6300 0
6282 -6299 0
6282 6288 -6300 0
6282 6289 -6302 0
6283 -6300 0
6283 6288 -6302 0
6283 6289 -6304 0
c (0<=(aux1530 + aux1532 - aux1535))
-6289 6304 0
-6288 6302 0
-6283 6304 0
-6283 -6289 6302 0
-6283 -6288 6300 0
-6282 6302 0
-6282 -6289 6300 0
-6282 -6288 6299 0
c ((SATLiteral(370) - aux1536 + SATLiteral(265))<=0)
-265 -6306 0
-370 -6306 0
-370 -265 -6307 0
c (0<=(SATLiteral(370) - aux1536 + SATLiteral(265)))
265 6307 0
370 6307 0
370 265 6306 0
c ((SATLiteral(385) - aux1537 + SATLiteral(250))<=0)
-250 -6309 0
-385 -6309 0
-385 -250 -6310 0
c (0<=(SATLiteral(385) - aux1537 + SATLiteral(250)))
250 6310 0
385 6310 0
385 250 6309 0
c ((SATLiteral(100) - aux1538 + SATLiteral(235))<=0)
-235 -6312 0
-100 -6312 0
-100 -235 -6313 0
c (0<=(SATLiteral(100) - aux1538 + SATLiteral(235)))
235 6313 0
100 6313 0
100 235 6312 0
c ((SATLiteral(115) + SATLiteral(130) - aux1539)<=0)
-130 -6315 0
-115 -6315 0
-115 -130 -6316 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1539))
130 6316 0
115 6316 0
115 130 6315 0
c ((SATLiteral(400) + aux1539 - aux1540)<=0)
6315 -6318 0
6316 -6319 0
-400 -6318 0
-400 6315 -6319 0
-400 6316 -6321 0
c (0<=(SATLiteral(400) + aux1539 - aux1540))
-6316 6321 0
-6315 6319 0
400 6321 0
400 -6316 6319 0
400 -6315 6318 0
c ((aux1536 + aux1538 - aux1541)<=0)
6312 -6323 0
6313 -6324 0
6306 -6323 0
6306 6312 -6324 0
6306 6313 -6326 0
6307 -6324 0
6307 6312 -6326 0
6307 6313 -6328 0
c (0<=(aux1536 + aux1538 - aux1541))
-6313 6328 0
-6312 6326 0
-6307 6328 0
-6307 -6313 6326 0
-6307 -6312 6324 0
-6306 6326 0
-6306 -6313 6324 0
-6306 -6312 6323 0
c ((SATLiteral(372) - aux1542 + SATLiteral(267))<=0)
-267 -6330 0
-372 -6330 0
-372 -267 -6331 0
c (0<=(SATLiteral(372) - aux1542 + SATLiteral(267)))
267 6331 0
372 6331 0
372 267 6330 0
c ((SATLiteral(387) - aux1543 + SATLiteral(252))<=0)
-252 -6333 0
-387 -6333 0
-387 -252 -6334 0
c (0<=(SATLiteral(387) - aux1543 + SATLiteral(252)))
252 6334 0
387 6334 0
387 252 6333 0
c ((SATLiteral(102) - aux1544 + SATLiteral(237))<=0)
-237 -6336 0
-102 -6336 0
-102 -237 -6337 0
c (0<=(SATLiteral(102) - aux1544 + SATLiteral(237)))
237 6337 0
102 6337 0
102 237 6336 0
c ((SATLiteral(117) + SATLiteral(132) - aux1545)<=0)
-132 -6339 0
-117 -6339 0
-117 -132 -6340 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1545))
132 6340 0
117 6340 0
117 132 6339 0
c ((SATLiteral(402) + aux1545 - aux1546)<=0)
6339 -6342 0
6340 -6343 0
-402 -6342 0
-402 6339 -6343 0
-402 6340 -6345 0
c (0<=(SATLiteral(402) + aux1545 - aux1546))
-6340 6345 0
-6339 6343 0
402 6345 0
402 -6340 6343 0
402 -6339 6342 0
c ((aux1542 + aux1544 - aux1547)<=0)
6336 -6347 0
6337 -6348 0
6330 -6347 0
6330 6336 -6348 0
6330 6337 -6350 0
6331 -6348 0
6331 6336 -6350 0
6331 6337 -6352 0
c (0<=(aux1542 + aux1544 - aux1547))
-6337 6352 0
-6336 6350 0
-6331 6352 0
-6331 -6337 6350 0
-6331 -6336 6348 0
-6330 6350 0
-6330 -6337 6348 0
-6330 -6336 6347 0
c ((SATLiteral(374) - aux1548 + SATLiteral(269))<=0)
-269 -6354 0
-374 -6354 0
-374 -269 -6355 0
c (0<=(SATLiteral(374) - aux1548 + SATLiteral(269)))
269 6355 0
374 6355 0
374 269 6354 0
c ((SATLiteral(389) - aux1549 + SATLiteral(254))<=0)
-254 -6357 0
-389 -6357 0
-389 -254 -6358 0
c (0<=(SATLiteral(389) - aux1549 + SATLiteral(254)))
254 6358 0
389 6358 0
389 254 6357 0
c ((SATLiteral(104) - aux1550 + SATLiteral(239))<=0)
-239 -6360 0
-104 -6360 0
-104 -239 -6361 0
c (0<=(SATLiteral(104) - aux1550 + SATLiteral(239)))
239 6361 0
104 6361 0
104 239 6360 0
c ((SATLiteral(119) + SATLiteral(134) - aux1551)<=0)
-134 -6363 0
-119 -6363 0
-119 -134 -6364 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1551))
134 6364 0
119 6364 0
119 134 6363 0
c ((SATLiteral(404) + aux1551 - aux1552)<=0)
6363 -6366 0
6364 -6367 0
-404 -6366 0
-404 6363 -6367 0
-404 6364 -6369 0
c (0<=(SATLiteral(404) + aux1551 - aux1552))
-6364 6369 0
-6363 6367 0
404 6369 0
404 -6364 6367 0
404 -6363 6366 0
c ((aux1548 + aux1550 - aux1553)<=0)
6360 -6371 0
6361 -6372 0
6354 -6371 0
6354 6360 -6372 0
6354 6361 -6374 0
6355 -6372 0
6355 6360 -6374 0
6355 6361 -6376 0
c (0<=(aux1548 + aux1550 - aux1553))
-6361 6376 0
-6360 6374 0
-6355 6376 0
-6355 -6361 6374 0
-6355 -6360 6372 0
-6354 6374 0
-6354 -6361 6372 0
-6354 -6360 6371 0
c ((SATLiteral(376) - aux1554 + SATLiteral(271))<=0)
-271 -6378 0
-376 -6378 0
-376 -271 -6379 0
c (0<=(SATLiteral(376) - aux1554 + SATLiteral(271)))
271 6379 0
376 6379 0
376 271 6378 0
c ((SATLiteral(391) - aux1555 + SATLiteral(256))<=0)
-256 -6381 0
-391 -6381 0
-391 -256 -6382 0
c (0<=(SATLiteral(391) - aux1555 + SATLiteral(256)))
256 6382 0
391 6382 0
391 256 6381 0
c ((SATLiteral(106) - aux1556 + SATLiteral(241))<=0)
-241 -6384 0
-106 -6384 0
-106 -241 -6385 0
c (0<=(SATLiteral(106) - aux1556 + SATLiteral(241)))
241 6385 0
106 6385 0
106 241 6384 0
c ((SATLiteral(121) + SATLiteral(136) - aux1557)<=0)
-136 -6387 0
-121 -6387 0
-121 -136 -6388 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1557))
136 6388 0
121 6388 0
121 136 6387 0
c ((SATLiteral(406) + aux1557 - aux1558)<=0)
6387 -6390 0
6388 -6391 0
-406 -6390 0
-406 6387 -6391 0
-406 6388 -6393 0
c (0<=(SATLiteral(406) + aux1557 - aux1558))
-6388 6393 0
-6387 6391 0
406 6393 0
406 -6388 6391 0
406 -6387 6390 0
c ((aux1554 + aux1556 - aux1559)<=0)
6384 -6395 0
6385 -6396 0
6378 -6395 0
6378 6384 -6396 0
6378 6385 -6398 0
6379 -6396 0
6379 6384 -6398 0
6379 6385 -6400 0
c (0<=(aux1554 + aux1556 - aux1559))
-6385 6400 0
-6384 6398 0
-6379 6400 0
-6379 -6385 6398 0
-6379 -6384 6396 0
-6378 6398 0
-6378 -6385 6396 0
-6378 -6384 6395 0
c ((SATLiteral(-375) - aux1560 + SATLiteral(-270))<=0)
270 -6402 0
375 -6402 0
375 270 -6403 0
c (0<=(SATLiteral(-375) - aux1560 + SATLiteral(-270)))
-270 6403 0
-375 6403 0
-375 -270 6402 0
c ((SATLiteral(-390) - aux1561 + SATLiteral(-255))<=0)
255 -6405 0
390 -6405 0
390 255 -6406 0
c (0<=(SATLiteral(-390) - aux1561 + SATLiteral(-255)))
-255 6406 0
-390 6406 0
-390 -255 6405 0
c ((SATLiteral(-105) - aux1562 + SATLiteral(-240))<=0)
240 -6408 0
105 -6408 0
105 240 -6409 0
c (0<=(SATLiteral(-105) - aux1562 + SATLiteral(-240)))
-240 6409 0
-105 6409 0
-105 -240 6408 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1563)<=0)
135 -6411 0
120 -6411 0
120 135 -6412 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1563))
-135 6412 0
-120 6412 0
-120 -135 6411 0
c ((SATLiteral(-405) + aux1563 - aux1564)<=0)
6411 -6414 0
6412 -6415 0
405 -6414 0
405 6411 -6415 0
405 6412 -6417 0
c (0<=(SATLiteral(-405) + aux1563 - aux1564))
-6412 6417 0
-6411 6415 0
-405 6417 0
-405 -6412 6415 0
-405 -6411 6414 0
c ((aux1560 + aux1562 - aux1565)<=0)
6408 -6419 0
6409 -6420 0
6402 -6419 0
6402 6408 -6420 0
6402 6409 -6422 0
6403 -6420 0
6403 6408 -6422 0
6403 6409 -6424 0
c (0<=(aux1560 + aux1562 - aux1565))
-6409 6424 0
-6408 6422 0
-6403 6424 0
-6403 -6409 6422 0
-6403 -6408 6420 0
-6402 6422 0
-6402 -6409 6420 0
-6402 -6408 6419 0
c ((SATLiteral(677) - aux1566 + SATLiteral(572))<=0)
-572 -6426 0
-677 -6426 0
-677 -572 -6427 0
c (0<=(SATLiteral(677) - aux1566 + SATLiteral(572)))
572 6427 0
677 6427 0
677 572 6426 0
c ((SATLiteral(692) - aux1567 + SATLiteral(557))<=0)
-557 -6429 0
-692 -6429 0
-692 -557 -6430 0
c (0<=(SATLiteral(692) - aux1567 + SATLiteral(557)))
557 6430 0
692 6430 0
692 557 6429 0
c (( - aux1568 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6432 0
-407 -6432 0
-407 -542 -6433 0
c (0<=( - aux1568 + SATLiteral(407) + SATLiteral(542)))
542 6433 0
407 6433 0
407 542 6432 0
c (( - aux1569 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6435 0
-422 -6435 0
-422 -437 -6436 0
c (0<=( - aux1569 + SATLiteral(422) + SATLiteral(437)))
437 6436 0
422 6436 0
422 437 6435 0
c ((SATLiteral(707) + aux1569 - aux1570)<=0)
6435 -6438 0
6436 -6439 0
-707 -6438 0
-707 6435 -6439 0
-707 6436 -6441 0
c (0<=(SATLiteral(707) + aux1569 - aux1570))
-6436 6441 0
-6435 6439 0
707 6441 0
707 -6436 6439 0
707 -6435 6438 0
c ((aux1566 + aux1568 - aux1571)<=0)
6432 -6443 0
6433 -6444 0
6426 -6443 0
6426 6432 -6444 0
6426 6433 -6446 0
6427 -6444 0
6427 6432 -6446 0
6427 6433 -6448 0
c (0<=(aux1566 + aux1568 - aux1571))
-6433 6448 0
-6432 6446 0
-6427 6448 0
-6427 -6433 6446 0
-6427 -6432 6444 0
-6426 6446 0
-6426 -6433 6444 0
-6426 -6432 6443 0
c ((SATLiteral(679) - aux1572 + SATLiteral(574))<=0)
-574 -6450 0
-679 -6450 0
-679 -574 -6451 0
c (0<=(SATLiteral(679) - aux1572 + SATLiteral(574)))
574 6451 0
679 6451 0
679 574 6450 0
c ((SATLiteral(694) - aux1573 + SATLiteral(559))<=0)
-559 -6453 0
-694 -6453 0
-694 -559 -6454 0
c (0<=(SATLiteral(694) - aux1573 + SATLiteral(559)))
559 6454 0
694 6454 0
694 559 6453 0
c (( - aux1574 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6456 0
-409 -6456 0
-409 -544 -6457 0
c (0<=( - aux1574 + SATLiteral(409) + SATLiteral(544)))
544 6457 0
409 6457 0
409 544 6456 0
c (( - aux1575 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6459 0
-424 -6459 0
-424 -439 -6460 0
c (0<=( - aux1575 + SATLiteral(424) + SATLiteral(439)))
439 6460 0
424 6460 0
424 439 6459 0
c ((SATLiteral(709) + aux1575 - aux1576)<=0)
6459 -6462 0
6460 -6463 0
-709 -6462 0
-709 6459 -6463 0
-709 6460 -6465 0
c (0<=(SATLiteral(709) + aux1575 - aux1576))
-6460 6465 0
-6459 6463 0
709 6465 0
709 -6460 6463 0
709 -6459 6462 0
c ((aux1572 + aux1574 - aux1577)<=0)
6456 -6467 0
6457 -6468 0
6450 -6467 0
6450 6456 -6468 0
6450 6457 -6470 0
6451 -6468 0
6451 6456 -6470 0
6451 6457 -6472 0
c (0<=(aux1572 + aux1574 - aux1577))
-6457 6472 0
-6456 6470 0
-6451 6472 0
-6451 -6457 6470 0
-6451 -6456 6468 0
-6450 6470 0
-6450 -6457 6468 0
-6450 -6456 6467 0
c ((SATLiteral(681) - aux1578 + SATLiteral(576))<=0)
-576 -6474 0
-681 -6474 0
-681 -576 -6475 0
c (0<=(SATLiteral(681) - aux1578 + SATLiteral(576)))
576 6475 0
681 6475 0
681 576 6474 0
c ((SATLiteral(696) - aux1579 + SATLiteral(561))<=0)
-561 -6477 0
-696 -6477 0
-696 -561 -6478 0
c (0<=(SATLiteral(696) - aux1579 + SATLiteral(561)))
561 6478 0
696 6478 0
696 561 6477 0
c (( - aux1580 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6480 0
-411 -6480 0
-411 -546 -6481 0
c (0<=( - aux1580 + SATLiteral(411) + SATLiteral(546)))
546 6481 0
411 6481 0
411 546 6480 0
c (( - aux1581 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6483 0
-426 -6483 0
-426 -441 -6484 0
c (0<=( - aux1581 + SATLiteral(426) + SATLiteral(441)))
441 6484 0
426 6484 0
426 441 6483 0
c ((SATLiteral(711) + aux1581 - aux1582)<=0)
6483 -6486 0
6484 -6487 0
-711 -6486 0
-711 6483 -6487 0
-711 6484 -6489 0
c (0<=(SATLiteral(711) + aux1581 - aux1582))
-6484 6489 0
-6483 6487 0
711 6489 0
711 -6484 6487 0
711 -6483 6486 0
c ((aux1578 + aux1580 - aux1583)<=0)
6480 -6491 0
6481 -6492 0
6474 -6491 0
6474 6480 -6492 0
6474 6481 -6494 0
6475 -6492 0
6475 6480 -6494 0
6475 6481 -6496 0
c (0<=(aux1578 + aux1580 - aux1583))
-6481 6496 0
-6480 6494 0
-6475 6496 0
-6475 -6481 6494 0
-6475 -6480 6492 0
-6474 6494 0
-6474 -6481 6492 0
-6474 -6480 6491 0
c ((SATLiteral(683) - aux1584 + SATLiteral(578))<=0)
-578 -6498 0
-683 -6498 0
-683 -578 -6499 0
c (0<=(SATLiteral(683) - aux1584 + SATLiteral(578)))
578 6499 0
683 6499 0
683 578 6498 0
c ((SATLiteral(698) - aux1585 + SATLiteral(563))<=0)
-563 -6501 0
-698 -6501 0
-698 -563 -6502 0
c (0<=(SATLiteral(698) - aux1585 + SATLiteral(563)))
563 6502 0
698 6502 0
698 563 6501 0
c (( - aux1586 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6504 0
-413 -6504 0
-413 -548 -6505 0
c (0<=( - aux1586 + SATLiteral(413) + SATLiteral(548)))
548 6505 0
413 6505 0
413 548 6504 0
c (( - aux1587 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6507 0
-428 -6507 0
-428 -443 -6508 0
c (0<=( - aux1587 + SATLiteral(428) + SATLiteral(443)))
443 6508 0
428 6508 0
428 443 6507 0
c ((SATLiteral(713) + aux1587 - aux1588)<=0)
6507 -6510 0
6508 -6511 0
-713 -6510 0
-713 6507 -6511 0
-713 6508 -6513 0
c (0<=(SATLiteral(713) + aux1587 - aux1588))
-6508 6513 0
-6507 6511 0
713 6513 0
713 -6508 6511 0
713 -6507 6510 0
c ((aux1584 + aux1586 - aux1589)<=0)
6504 -6515 0
6505 -6516 0
6498 -6515 0
6498 6504 -6516 0
6498 6505 -6518 0
6499 -6516 0
6499 6504 -6518 0
6499 6505 -6520 0
c (0<=(aux1584 + aux1586 - aux1589))
-6505 6520 0
-6504 6518 0
-6499 6520 0
-6499 -6505 6518 0
-6499 -6504 6516 0
-6498 6518 0
-6498 -6505 6516 0
-6498 -6504 6515 0
c ((SATLiteral(685) - aux1590 + SATLiteral(580))<=0)
-580 -6522 0
-685 -6522 0
-685 -580 -6523 0
c (0<=(SATLiteral(685) - aux1590 + SATLiteral(580)))
580 6523 0
685 6523 0
685 580 6522 0
c ((SATLiteral(700) - aux1591 + SATLiteral(565))<=0)
-565 -6525 0
-700 -6525 0
-700 -565 -6526 0
c (0<=(SATLiteral(700) - aux1591 + SATLiteral(565)))
565 6526 0
700 6526 0
700 565 6525 0
c (( - aux1592 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6528 0
-415 -6528 0
-415 -550 -6529 0
c (0<=( - aux1592 + SATLiteral(415) + SATLiteral(550)))
550 6529 0
415 6529 0
415 550 6528 0
c (( - aux1593 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6531 0
-430 -6531 0
-430 -445 -6532 0
c (0<=( - aux1593 + SATLiteral(430) + SATLiteral(445)))
445 6532 0
430 6532 0
430 445 6531 0
c ((SATLiteral(715) + aux1593 - aux1594)<=0)
6531 -6534 0
6532 -6535 0
-715 -6534 0
-715 6531 -6535 0
-715 6532 -6537 0
c (0<=(SATLiteral(715) + aux1593 - aux1594))
-6532 6537 0
-6531 6535 0
715 6537 0
715 -6532 6535 0
715 -6531 6534 0
c ((aux1590 + aux1592 - aux1595)<=0)
6528 -6539 0
6529 -6540 0
6522 -6539 0
6522 6528 -6540 0
6522 6529 -6542 0
6523 -6540 0
6523 6528 -6542 0
6523 6529 -6544 0
c (0<=(aux1590 + aux1592 - aux1595))
-6529 6544 0
-6528 6542 0
-6523 6544 0
-6523 -6529 6542 0
-6523 -6528 6540 0
-6522 6542 0
-6522 -6529 6540 0
-6522 -6528 6539 0
c ((SATLiteral(687) - aux1596 + SATLiteral(582))<=0)
-582 -6546 0
-687 -6546 0
-687 -582 -6547 0
c (0<=(SATLiteral(687) - aux1596 + SATLiteral(582)))
582 6547 0
687 6547 0
687 582 6546 0
c ((SATLiteral(702) - aux1597 + SATLiteral(567))<=0)
-567 -6549 0
-702 -6549 0
-702 -567 -6550 0
c (0<=(SATLiteral(702) - aux1597 + SATLiteral(567)))
567 6550 0
702 6550 0
702 567 6549 0
c (( - aux1598 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6552 0
-417 -6552 0
-417 -552 -6553 0
c (0<=( - aux1598 + SATLiteral(417) + SATLiteral(552)))
552 6553 0
417 6553 0
417 552 6552 0
c (( - aux1599 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6555 0
-432 -6555 0
-432 -447 -6556 0
c (0<=( - aux1599 + SATLiteral(432) + SATLiteral(447)))
447 6556 0
432 6556 0
432 447 6555 0
c ((SATLiteral(717) + aux1599 - aux1600)<=0)
6555 -6558 0
6556 -6559 0
-717 -6558 0
-717 6555 -6559 0
-717 6556 -6561 0
c (0<=(SATLiteral(717) + aux1599 - aux1600))
-6556 6561 0
-6555 6559 0
717 6561 0
717 -6556 6559 0
717 -6555 6558 0
c ((aux1596 + aux1598 - aux1601)<=0)
6552 -6563 0
6553 -6564 0
6546 -6563 0
6546 6552 -6564 0
6546 6553 -6566 0
6547 -6564 0
6547 6552 -6566 0
6547 6553 -6568 0
c (0<=(aux1596 + aux1598 - aux1601))
-6553 6568 0
-6552 6566 0
-6547 6568 0
-6547 -6553 6566 0
-6547 -6552 6564 0
-6546 6566 0
-6546 -6553 6564 0
-6546 -6552 6563 0
c ((SATLiteral(689) - aux1602 + SATLiteral(584))<=0)
-584 -6570 0
-689 -6570 0
-689 -584 -6571 0
c (0<=(SATLiteral(689) - aux1602 + SATLiteral(584)))
584 6571 0
689 6571 0
689 584 6570 0
c ((SATLiteral(704) - aux1603 + SATLiteral(569))<=0)
-569 -6573 0
-704 -6573 0
-704 -569 -6574 0
c (0<=(SATLiteral(704) - aux1603 + SATLiteral(569)))
569 6574 0
704 6574 0
704 569 6573 0
c (( - aux1604 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6576 0
-419 -6576 0
-419 -554 -6577 0
c (0<=( - aux1604 + SATLiteral(419) + SATLiteral(554)))
554 6577 0
419 6577 0
419 554 6576 0
c (( - aux1605 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6579 0
-434 -6579 0
-434 -449 -6580 0
c (0<=( - aux1605 + SATLiteral(434) + SATLiteral(449)))
449 6580 0
434 6580 0
434 449 6579 0
c ((SATLiteral(719) + aux1605 - aux1606)<=0)
6579 -6582 0
6580 -6583 0
-719 -6582 0
-719 6579 -6583 0
-719 6580 -6585 0
c (0<=(SATLiteral(719) + aux1605 - aux1606))
-6580 6585 0
-6579 6583 0
719 6585 0
719 -6580 6583 0
719 -6579 6582 0
c ((aux1602 + aux1604 - aux1607)<=0)
6576 -6587 0
6577 -6588 0
6570 -6587 0
6570 6576 -6588 0
6570 6577 -6590 0
6571 -6588 0
6571 6576 -6590 0
6571 6577 -6592 0
c (0<=(aux1602 + aux1604 - aux1607))
-6577 6592 0
-6576 6590 0
-6571 6592 0
-6571 -6577 6590 0
-6571 -6576 6588 0
-6570 6590 0
-6570 -6577 6588 0
-6570 -6576 6587 0
c ((SATLiteral(691) - aux1608 + SATLiteral(586))<=0)
-586 -6594 0
-691 -6594 0
-691 -586 -6595 0
c (0<=(SATLiteral(691) - aux1608 + SATLiteral(586)))
586 6595 0
691 6595 0
691 586 6594 0
c ((SATLiteral(706) - aux1609 + SATLiteral(571))<=0)
-571 -6597 0
-706 -6597 0
-706 -571 -6598 0
c (0<=(SATLiteral(706) - aux1609 + SATLiteral(571)))
571 6598 0
706 6598 0
706 571 6597 0
c (( - aux1610 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6600 0
-421 -6600 0
-421 -556 -6601 0
c (0<=( - aux1610 + SATLiteral(421) + SATLiteral(556)))
556 6601 0
421 6601 0
421 556 6600 0
c (( - aux1611 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6603 0
-436 -6603 0
-436 -451 -6604 0
c (0<=( - aux1611 + SATLiteral(436) + SATLiteral(451)))
451 6604 0
436 6604 0
436 451 6603 0
c ((SATLiteral(721) + aux1611 - aux1612)<=0)
6603 -6606 0
6604 -6607 0
-721 -6606 0
-721 6603 -6607 0
-721 6604 -6609 0
c (0<=(SATLiteral(721) + aux1611 - aux1612))
-6604 6609 0
-6603 6607 0
721 6609 0
721 -6604 6607 0
721 -6603 6606 0
c ((aux1608 + aux1610 - aux1613)<=0)
6600 -6611 0
6601 -6612 0
6594 -6611 0
6594 6600 -6612 0
6594 6601 -6614 0
6595 -6612 0
6595 6600 -6614 0
6595 6601 -6616 0
c (0<=(aux1608 + aux1610 - aux1613))
-6601 6616 0
-6600 6614 0
-6595 6616 0
-6595 -6601 6614 0
-6595 -6600 6612 0
-6594 6614 0
-6594 -6601 6612 0
-6594 -6600 6611 0
c ((SATLiteral(-690) - aux1614 + SATLiteral(-585))<=0)
585 -6618 0
690 -6618 0
690 585 -6619 0
c (0<=(SATLiteral(-690) - aux1614 + SATLiteral(-585)))
-585 6619 0
-690 6619 0
-690 -585 6618 0
c ((SATLiteral(-705) - aux1615 + SATLiteral(-570))<=0)
570 -6621 0
705 -6621 0
705 570 -6622 0
c (0<=(SATLiteral(-705) - aux1615 + SATLiteral(-570)))
-570 6622 0
-705 6622 0
-705 -570 6621 0
c (( - aux1616 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6624 0
420 -6624 0
420 555 -6625 0
c (0<=( - aux1616 + SATLiteral(-420) + SATLiteral(-555)))
-555 6625 0
-420 6625 0
-420 -555 6624 0
c (( - aux1617 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6627 0
435 -6627 0
435 450 -6628 0
c (0<=( - aux1617 + SATLiteral(-435) + SATLiteral(-450)))
-450 6628 0
-435 6628 0
-435 -450 6627 0
c ((SATLiteral(-720) + aux1617 - aux1618)<=0)
6627 -6630 0
6628 -6631 0
720 -6630 0
720 6627 -6631 0
720 6628 -6633 0
c (0<=(SATLiteral(-720) + aux1617 - aux1618))
-6628 6633 0
-6627 6631 0
-720 6633 0
-720 -6628 6631 0
-720 -6627 6630 0
c ((aux1614 + aux1616 - aux1619)<=0)
6624 -6635 0
6625 -6636 0
6618 -6635 0
6618 6624 -6636 0
6618 6625 -6638 0
6619 -6636 0
6619 6624 -6638 0
6619 6625 -6640 0
c (0<=(aux1614 + aux1616 - aux1619))
-6625 6640 0
-6624 6638 0
-6619 6640 0
-6619 -6625 6638 0
-6619 -6624 6636 0
-6618 6638 0
-6618 -6625 6636 0
-6618 -6624 6635 0
c ((SATLiteral(722) - aux1620 + SATLiteral(617))<=0)
-617 -6642 0
-722 -6642 0
-722 -617 -6643 0
c (0<=(SATLiteral(722) - aux1620 + SATLiteral(617)))
617 6643 0
722 6643 0
722 617 6642 0
c ((SATLiteral(737) - aux1621 + SATLiteral(602))<=0)
-602 -6645 0
-737 -6645 0
-737 -602 -6646 0
c (0<=(SATLiteral(737) - aux1621 + SATLiteral(602)))
602 6646 0
737 6646 0
737 602 6645 0
c (( - aux1622 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6648 0
-452 -6648 0
-452 -587 -6649 0
c (0<=( - aux1622 + SATLiteral(452) + SATLiteral(587)))
587 6649 0
452 6649 0
452 587 6648 0
c (( - aux1623 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6651 0
-467 -6651 0
-467 -482 -6652 0
c (0<=( - aux1623 + SATLiteral(467) + SATLiteral(482)))
482 6652 0
467 6652 0
467 482 6651 0
c ((SATLiteral(752) + aux1623 - aux1624)<=0)
6651 -6654 0
6652 -6655 0
-752 -6654 0
-752 6651 -6655 0
-752 6652 -6657 0
c (0<=(SATLiteral(752) + aux1623 - aux1624))
-6652 6657 0
-6651 6655 0
752 6657 0
752 -6652 6655 0
752 -6651 6654 0
c ((aux1620 + aux1622 - aux1625)<=0)
6648 -6659 0
6649 -6660 0
6642 -6659 0
6642 6648 -6660 0
6642 6649 -6662 0
6643 -6660 0
6643 6648 -6662 0
6643 6649 -6664 0
c (0<=(aux1620 + aux1622 - aux1625))
-6649 6664 0
-6648 6662 0
-6643 6664 0
-6643 -6649 6662 0
-6643 -6648 6660 0
-6642 6662 0
-6642 -6649 6660 0
-6642 -6648 6659 0
c ((SATLiteral(724) - aux1626 + SATLiteral(619))<=0)
-619 -6666 0
-724 -6666 0
-724 -619 -6667 0
c (0<=(SATLiteral(724) - aux1626 + SATLiteral(619)))
619 6667 0
724 6667 0
724 619 6666 0
c ((SATLiteral(739) - aux1627 + SATLiteral(604))<=0)
-604 -6669 0
-739 -6669 0
-739 -604 -6670 0
c (0<=(SATLiteral(739) - aux1627 + SATLiteral(604)))
604 6670 0
739 6670 0
739 604 6669 0
c (( - aux1628 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6672 0
-454 -6672 0
-454 -589 -6673 0
c (0<=( - aux1628 + SATLiteral(454) + SATLiteral(589)))
589 6673 0
454 6673 0
454 589 6672 0
c (( - aux1629 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6675 0
-469 -6675 0
-469 -484 -6676 0
c (0<=( - aux1629 + SATLiteral(469) + SATLiteral(484)))
484 6676 0
469 6676 0
469 484 6675 0
c ((SATLiteral(754) + aux1629 - aux1630)<=0)
6675 -6678 0
6676 -6679 0
-754 -6678 0
-754 6675 -6679 0
-754 6676 -6681 0
c (0<=(SATLiteral(754) + aux1629 - aux1630))
-6676 6681 0
-6675 6679 0
754 6681 0
754 -6676 6679 0
754 -6675 6678 0
c ((aux1626 + aux1628 - aux1631)<=0)
6672 -6683 0
6673 -6684 0
6666 -6683 0
6666 6672 -6684 0
6666 6673 -6686 0
6667 -6684 0
6667 6672 -6686 0
6667 6673 -6688 0
c (0<=(aux1626 + aux1628 - aux1631))
-6673 6688 0
-6672 6686 0
-6667 6688 0
-6667 -6673 6686 0
-6667 -6672 6684 0
-6666 6686 0
-6666 -6673 6684 0
-6666 -6672 6683 0
c ((SATLiteral(726) - aux1632 + SATLiteral(621))<=0)
-621 -6690 0
-726 -6690 0
-726 -621 -6691 0
c (0<=(SATLiteral(726) - aux1632 + SATLiteral(621)))
621 6691 0
726 6691 0
726 621 6690 0
c ((SATLiteral(741) - aux1633 + SATLiteral(606))<=0)
-606 -6693 0
-741 -6693 0
-741 -606 -6694 0
c (0<=(SATLiteral(741) - aux1633 + SATLiteral(606)))
606 6694 0
741 6694 0
741 606 6693 0
c (( - aux1634 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6696 0
-456 -6696 0
-456 -591 -6697 0
c (0<=( - aux1634 + SATLiteral(456) + SATLiteral(591)))
591 6697 0
456 6697 0
456 591 6696 0
c (( - aux1635 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6699 0
-471 -6699 0
-471 -486 -6700 0
c (0<=( - aux1635 + SATLiteral(471) + SATLiteral(486)))
486 6700 0
471 6700 0
471 486 6699 0
c ((SATLiteral(756) + aux1635 - aux1636)<=0)
6699 -6702 0
6700 -6703 0
-756 -6702 0
-756 6699 -6703 0
-756 6700 -6705 0
c (0<=(SATLiteral(756) + aux1635 - aux1636))
-6700 6705 0
-6699 6703 0
756 6705 0
756 -6700 6703 0
756 -6699 6702 0
c ((aux1632 + aux1634 - aux1637)<=0)
6696 -6707 0
6697 -6708 0
6690 -6707 0
6690 6696 -6708 0
6690 6697 -6710 0
6691 -6708 0
6691 6696 -6710 0
6691 6697 -6712 0
c (0<=(aux1632 + aux1634 - aux1637))
-6697 6712 0
-6696 6710 0
-6691 6712 0
-6691 -6697 6710 0
-6691 -6696 6708 0
-6690 6710 0
-6690 -6697 6708 0
-6690 -6696 6707 0
c ((SATLiteral(728) - aux1638 + SATLiteral(623))<=0)
-623 -6714 0
-728 -6714 0
-728 -623 -6715 0
c (0<=(SATLiteral(728) - aux1638 + SATLiteral(623)))
623 6715 0
728 6715 0
728 623 6714 0
c ((SATLiteral(743) - aux1639 + SATLiteral(608))<=0)
-608 -6717 0
-743 -6717 0
-743 -608 -6718 0
c (0<=(SATLiteral(743) - aux1639 + SATLiteral(608)))
608 6718 0
743 6718 0
743 608 6717 0
c (( - aux1640 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6720 0
-458 -6720 0
-458 -593 -6721 0
c (0<=( - aux1640 + SATLiteral(458) + SATLiteral(593)))
593 6721 0
458 6721 0
458 593 6720 0
c (( - aux1641 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6723 0
-473 -6723 0
-473 -488 -6724 0
c (0<=( - aux1641 + SATLiteral(473) + SATLiteral(488)))
488 6724 0
473 6724 0
473 488 6723 0
c ((SATLiteral(758) + aux1641 - aux1642)<=0)
6723 -6726 0
6724 -6727 0
-758 -6726 0
-758 6723 -6727 0
-758 6724 -6729 0
c (0<=(SATLiteral(758) + aux1641 - aux1642))
-6724 6729 0
-6723 6727 0
758 6729 0
758 -6724 6727 0
758 -6723 6726 0
c ((aux1638 + aux1640 - aux1643)<=0)
6720 -6731 0
6721 -6732 0
6714 -6731 0
6714 6720 -6732 0
6714 6721 -6734 0
6715 -6732 0
6715 6720 -6734 0
6715 6721 -6736 0
c (0<=(aux1638 + aux1640 - aux1643))
-6721 6736 0
-6720 6734 0
-6715 6736 0
-6715 -6721 6734 0
-6715 -6720 6732 0
-6714 6734 0
-6714 -6721 6732 0
-6714 -6720 6731 0
c ((SATLiteral(730) - aux1644 + SATLiteral(625))<=0)
-625 -6738 0
-730 -6738 0
-730 -625 -6739 0
c (0<=(SATLiteral(730) - aux1644 + SATLiteral(625)))
625 6739 0
730 6739 0
730 625 6738 0
c ((SATLiteral(745) - aux1645 + SATLiteral(610))<=0)
-610 -6741 0
-745 -6741 0
-745 -610 -6742 0
c (0<=(SATLiteral(745) - aux1645 + SATLiteral(610)))
610 6742 0
745 6742 0
745 610 6741 0
c (( - aux1646 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6744 0
-460 -6744 0
-460 -595 -6745 0
c (0<=( - aux1646 + SATLiteral(460) + SATLiteral(595)))
595 6745 0
460 6745 0
460 595 6744 0
c (( - aux1647 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6747 0
-475 -6747 0
-475 -490 -6748 0
c (0<=( - aux1647 + SATLiteral(475) + SATLiteral(490)))
490 6748 0
475 6748 0
475 490 6747 0
c ((SATLiteral(760) + aux1647 - aux1648)<=0)
6747 -6750 0
6748 -6751 0
-760 -6750 0
-760 6747 -6751 0
-760 6748 -6753 0
c (0<=(SATLiteral(760) + aux1647 - aux1648))
-6748 6753 0
-6747 6751 0
760 6753 0
760 -6748 6751 0
760 -6747 6750 0
c ((aux1644 + aux1646 - aux1649)<=0)
6744 -6755 0
6745 -6756 0
6738 -6755 0
6738 6744 -6756 0
6738 6745 -6758 0
6739 -6756 0
6739 6744 -6758 0
6739 6745 -6760 0
c (0<=(aux1644 + aux1646 - aux1649))
-6745 6760 0
-6744 6758 0
-6739 6760 0
-6739 -6745 6758 0
-6739 -6744 6756 0
-6738 6758 0
-6738 -6745 6756 0
-6738 -6744 6755 0
c ((SATLiteral(732) - aux1650 + SATLiteral(627))<=0)
-627 -6762 0
-732 -6762 0
-732 -627 -6763 0
c (0<=(SATLiteral(732) - aux1650 + SATLiteral(627)))
627 6763 0
732 6763 0
732 627 6762 0
c ((SATLiteral(747) - aux1651 + SATLiteral(612))<=0)
-612 -6765 0
-747 -6765 0
-747 -612 -6766 0
c (0<=(SATLiteral(747) - aux1651 + SATLiteral(612)))
612 6766 0
747 6766 0
747 612 6765 0
c (( - aux1652 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6768 0
-462 -6768 0
-462 -597 -6769 0
c (0<=( - aux1652 + SATLiteral(462) + SATLiteral(597)))
597 6769 0
462 6769 0
462 597 6768 0
c (( - aux1653 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6771 0
-477 -6771 0
-477 -492 -6772 0
c (0<=( - aux1653 + SATLiteral(477) + SATLiteral(492)))
492 6772 0
477 6772 0
477 492 6771 0
c ((SATLiteral(762) + aux1653 - aux1654)<=0)
6771 -6774 0
6772 -6775 0
-762 -6774 0
-762 6771 -6775 0
-762 6772 -6777 0
c (0<=(SATLiteral(762) + aux1653 - aux1654))
-6772 6777 0
-6771 6775 0
762 6777 0
762 -6772 6775 0
762 -6771 6774 0
c ((aux1650 + aux1652 - aux1655)<=0)
6768 -6779 0
6769 -6780 0
6762 -6779 0
6762 6768 -6780 0
6762 6769 -6782 0
6763 -6780 0
6763 6768 -6782 0
6763 6769 -6784 0
c (0<=(aux1650 + aux1652 - aux1655))
-6769 6784 0
-6768 6782 0
-6763 6784 0
-6763 -6769 6782 0
-6763 -6768 6780 0
-6762 6782 0
-6762 -6769 6780 0
-6762 -6768 6779 0
c ((SATLiteral(734) - aux1656 + SATLiteral(629))<=0)
-629 -6786 0
-734 -6786 0
-734 -629 -6787 0
c (0<=(SATLiteral(734) - aux1656 + SATLiteral(629)))
629 6787 0
734 6787 0
734 629 6786 0
c ((SATLiteral(749) - aux1657 + SATLiteral(614))<=0)
-614 -6789 0
-749 -6789 0
-749 -614 -6790 0
c (0<=(SATLiteral(749) - aux1657 + SATLiteral(614)))
614 6790 0
749 6790 0
749 614 6789 0
c (( - aux1658 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6792 0
-464 -6792 0
-464 -599 -6793 0
c (0<=( - aux1658 + SATLiteral(464) + SATLiteral(599)))
599 6793 0
464 6793 0
464 599 6792 0
c (( - aux1659 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6795 0
-479 -6795 0
-479 -494 -6796 0
c (0<=( - aux1659 + SATLiteral(479) + SATLiteral(494)))
494 6796 0
479 6796 0
479 494 6795 0
c ((SATLiteral(764) + aux1659 - aux1660)<=0)
6795 -6798 0
6796 -6799 0
-764 -6798 0
-764 6795 -6799 0
-764 6796 -6801 0
c (0<=(SATLiteral(764) + aux1659 - aux1660))
-6796 6801 0
-6795 6799 0
764 6801 0
764 -6796 6799 0
764 -6795 6798 0
c ((aux1656 + aux1658 - aux1661)<=0)
6792 -6803 0
6793 -6804 0
6786 -6803 0
6786 6792 -6804 0
6786 6793 -6806 0
6787 -6804 0
6787 6792 -6806 0
6787 6793 -6808 0
c (0<=(aux1656 + aux1658 - aux1661))
-6793 6808 0
-6792 6806 0
-6787 6808 0
-6787 -6793 6806 0
-6787 -6792 6804 0
-6786 6806 0
-6786 -6793 6804 0
-6786 -6792 6803 0
c ((SATLiteral(736) - aux1662 + SATLiteral(631))<=0)
-631 -6810 0
-736 -6810 0
-736 -631 -6811 0
c (0<=(SATLiteral(736) - aux1662 + SATLiteral(631)))
631 6811 0
736 6811 0
736 631 6810 0
c ((SATLiteral(751) - aux1663 + SATLiteral(616))<=0)
-616 -6813 0
-751 -6813 0
-751 -616 -6814 0
c (0<=(SATLiteral(751) - aux1663 + SATLiteral(616)))
616 6814 0
751 6814 0
751 616 6813 0
c (( - aux1664 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6816 0
-466 -6816 0
-466 -601 -6817 0
c (0<=( - aux1664 + SATLiteral(466) + SATLiteral(601)))
601 6817 0
466 6817 0
466 601 6816 0
c (( - aux1665 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6819 0
-481 -6819 0
-481 -496 -6820 0
c (0<=( - aux1665 + SATLiteral(481) + SATLiteral(496)))
496 6820 0
481 6820 0
481 496 6819 0
c ((SATLiteral(766) + aux1665 - aux1666)<=0)
6819 -6822 0
6820 -6823 0
-766 -6822 0
-766 6819 -6823 0
-766 6820 -6825 0
c (0<=(SATLiteral(766) + aux1665 - aux1666))
-6820 6825 0
-6819 6823 0
766 6825 0
766 -6820 6823 0
766 -6819 6822 0
c ((aux1662 + aux1664 - aux1667)<=0)
6816 -6827 0
6817 -6828 0
6810 -6827 0
6810 6816 -6828 0
6810 6817 -6830 0
6811 -6828 0
6811 6816 -6830 0
6811 6817 -6832 0
c (0<=(aux1662 + aux1664 - aux1667))
-6817 6832 0
-6816 6830 0
-6811 6832 0
-6811 -6817 6830 0
-6811 -6816 6828 0
-6810 6830 0
-6810 -6817 6828 0
-6810 -6816 6827 0
c ((SATLiteral(-735) - aux1668 + SATLiteral(-630))<=0)
630 -6834 0
735 -6834 0
735 630 -6835 0
c (0<=(SATLiteral(-735) - aux1668 + SATLiteral(-630)))
-630 6835 0
-735 6835 0
-735 -630 6834 0
c ((SATLiteral(-750) - aux1669 + SATLiteral(-615))<=0)
615 -6837 0
750 -6837 0
750 615 -6838 0
c (0<=(SATLiteral(-750) - aux1669 + SATLiteral(-615)))
-615 6838 0
-750 6838 0
-750 -615 6837 0
c (( - aux1670 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6840 0
465 -6840 0
465 600 -6841 0
c (0<=( - aux1670 + SATLiteral(-465) + SATLiteral(-600)))
-600 6841 0
-465 6841 0
-465 -600 6840 0
c (( - aux1671 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6843 0
480 -6843 0
480 495 -6844 0
c (0<=( - aux1671 + SATLiteral(-480) + SATLiteral(-495)))
-495 6844 0
-480 6844 0
-480 -495 6843 0
c ((SATLiteral(-765) + aux1671 - aux1672)<=0)
6843 -6846 0
6844 -6847 0
765 -6846 0
765 6843 -6847 0
765 6844 -6849 0
c (0<=(SATLiteral(-765) + aux1671 - aux1672))
-6844 6849 0
-6843 6847 0
-765 6849 0
-765 -6844 6847 0
-765 -6843 6846 0
c ((aux1668 + aux1670 - aux1673)<=0)
6840 -6851 0
6841 -6852 0
6834 -6851 0
6834 6840 -6852 0
6834 6841 -6854 0
6835 -6852 0
6835 6840 -6854 0
6835 6841 -6856 0
c (0<=(aux1668 + aux1670 - aux1673))
-6841 6856 0
-6840 6854 0
-6835 6856 0
-6835 -6841 6854 0
-6835 -6840 6852 0
-6834 6854 0
-6834 -6841 6852 0
-6834 -6840 6851 0
c ((SATLiteral(767) - aux1674 + SATLiteral(662))<=0)
-662 -6858 0
-767 -6858 0
-767 -662 -6859 0
c (0<=(SATLiteral(767) - aux1674 + SATLiteral(662)))
662 6859 0
767 6859 0
767 662 6858 0
c ((SATLiteral(782) - aux1675 + SATLiteral(647))<=0)
-647 -6861 0
-782 -6861 0
-782 -647 -6862 0
c (0<=(SATLiteral(782) - aux1675 + SATLiteral(647)))
647 6862 0
782 6862 0
782 647 6861 0
c (( - aux1676 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6864 0
-497 -6864 0
-497 -632 -6865 0
c (0<=( - aux1676 + SATLiteral(497) + SATLiteral(632)))
632 6865 0
497 6865 0
497 632 6864 0
c (( - aux1677 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6867 0
-512 -6867 0
-512 -527 -6868 0
c (0<=( - aux1677 + SATLiteral(512) + SATLiteral(527)))
527 6868 0
512 6868 0
512 527 6867 0
c ((SATLiteral(797) + aux1677 - aux1678)<=0)
6867 -6870 0
6868 -6871 0
-797 -6870 0
-797 6867 -6871 0
-797 6868 -6873 0
c (0<=(SATLiteral(797) + aux1677 - aux1678))
-6868 6873 0
-6867 6871 0
797 6873 0
797 -6868 6871 0
797 -6867 6870 0
c ((aux1674 + aux1676 - aux1679)<=0)
6864 -6875 0
6865 -6876 0
6858 -6875 0
6858 6864 -6876 0
6858 6865 -6878 0
6859 -6876 0
6859 6864 -6878 0
6859 6865 -6880 0
c (0<=(aux1674 + aux1676 - aux1679))
-6865 6880 0
-6864 6878 0
-6859 6880 0
-6859 -6865 6878 0
-6859 -6864 6876 0
-6858 6878 0
-6858 -6865 6876 0
-6858 -6864 6875 0
c ((SATLiteral(769) - aux1680 + SATLiteral(664))<=0)
-664 -6882 0
-769 -6882 0
-769 -664 -6883 0
c (0<=(SATLiteral(769) - aux1680 + SATLiteral(664)))
664 6883 0
769 6883 0
769 664 6882 0
c ((SATLiteral(784) - aux1681 + SATLiteral(649))<=0)
-649 -6885 0
-784 -6885 0
-784 -649 -6886 0
c (0<=(SATLiteral(784) - aux1681 + SATLiteral(649)))
649 6886 0
784 6886 0
784 649 6885 0
c (( - aux1682 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -6888 0
-499 -6888 0
-499 -634 -6889 0
c (0<=( - aux1682 + SATLiteral(499) + SATLiteral(634)))
634 6889 0
499 6889 0
499 634 6888 0
c (( - aux1683 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -6891 0
-514 -6891 0
-514 -529 -6892 0
c (0<=( - aux1683 + SATLiteral(514) + SATLiteral(529)))
529 6892 0
514 6892 0
514 529 6891 0
c ((SATLiteral(799) + aux1683 - aux1684)<=0)
6891 -6894 0
6892 -6895 0
-799 -6894 0
-799 6891 -6895 0
-799 6892 -6897 0
c (0<=(SATLiteral(799) + aux1683 - aux1684))
-6892 6897 0
-6891 6895 0
799 6897 0
799 -6892 6895 0
799 -6891 6894 0
c ((aux1680 + aux1682 - aux1685)<=0)
6888 -6899 0
6889 -6900 0
6882 -6899 0
6882 6888 -6900 0
6882 6889 -6902 0
6883 -6900 0
6883 6888 -6902 0
6883 6889 -6904 0
c (0<=(aux1680 + aux1682 - aux1685))
-6889 6904 0
-6888 6902 0
-6883 6904 0
-6883 -6889 6902 0
-6883 -6888 6900 0
-6882 6902 0
-6882 -6889 6900 0
-6882 -6888 6899 0
c ((SATLiteral(771) - aux1686 + SATLiteral(666))<=0)
-666 -6906 0
-771 -6906 0
-771 -666 -6907 0
c (0<=(SATLiteral(771) - aux1686 + SATLiteral(666)))
666 6907 0
771 6907 0
771 666 6906 0
c ((SATLiteral(786) - aux1687 + SATLiteral(651))<=0)
-651 -6909 0
-786 -6909 0
-786 -651 -6910 0
c (0<=(SATLiteral(786) - aux1687 + SATLiteral(651)))
651 6910 0
786 6910 0
786 651 6909 0
c (( - aux1688 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -6912 0
-501 -6912 0
-501 -636 -6913 0
c (0<=( - aux1688 + SATLiteral(501) + SATLiteral(636)))
636 6913 0
501 6913 0
501 636 6912 0
c (( - aux1689 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -6915 0
-516 -6915 0
-516 -531 -6916 0
c (0<=( - aux1689 + SATLiteral(516) + SATLiteral(531)))
531 6916 0
516 6916 0
516 531 6915 0
c ((SATLiteral(801) + aux1689 - aux1690)<=0)
6915 -6918 0
6916 -6919 0
-801 -6918 0
-801 6915 -6919 0
-801 6916 -6921 0
c (0<=(SATLiteral(801) + aux1689 - aux1690))
-6916 6921 0
-6915 6919 0
801 6921 0
801 -6916 6919 0
801 -6915 6918 0
c ((aux1686 + aux1688 - aux1691)<=0)
6912 -6923 0
6913 -6924 0
6906 -6923 0
6906 6912 -6924 0
6906 6913 -6926 0
6907 -6924 0
6907 6912 -6926 0
6907 6913 -6928 0
c (0<=(aux1686 + aux1688 - aux1691))
-6913 6928 0
-6912 6926 0
-6907 6928 0
-6907 -6913 6926 0
-6907 -6912 6924 0
-6906 6926 0
-6906 -6913 6924 0
-6906 -6912 6923 0
c ((SATLiteral(773) - aux1692 + SATLiteral(668))<=0)
-668 -6930 0
-773 -6930 0
-773 -668 -6931 0
c (0<=(SATLiteral(773) - aux1692 + SATLiteral(668)))
668 6931 0
773 6931 0
773 668 6930 0
c ((SATLiteral(788) - aux1693 + SATLiteral(653))<=0)
-653 -6933 0
-788 -6933 0
-788 -653 -6934 0
c (0<=(SATLiteral(788) - aux1693 + SATLiteral(653)))
653 6934 0
788 6934 0
788 653 6933 0
c (( - aux1694 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -6936 0
-503 -6936 0
-503 -638 -6937 0
c (0<=( - aux1694 + SATLiteral(503) + SATLiteral(638)))
638 6937 0
503 6937 0
503 638 6936 0
c (( - aux1695 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -6939 0
-518 -6939 0
-518 -533 -6940 0
c (0<=( - aux1695 + SATLiteral(518) + SATLiteral(533)))
533 6940 0
518 6940 0
518 533 6939 0
c ((SATLiteral(803) + aux1695 - aux1696)<=0)
6939 -6942 0
6940 -6943 0
-803 -6942 0
-803 6939 -6943 0
-803 6940 -6945 0
c (0<=(SATLiteral(803) + aux1695 - aux1696))
-6940 6945 0
-6939 6943 0
803 6945 0
803 -6940 6943 0
803 -6939 6942 0
c ((aux1692 + aux1694 - aux1697)<=0)
6936 -6947 0
6937 -6948 0
6930 -6947 0
6930 6936 -6948 0
6930 6937 -6950 0
6931 -6948 0
6931 6936 -6950 0
6931 6937 -6952 0
c (0<=(aux1692 + aux1694 - aux1697))
-6937 6952 0
-6936 6950 0
-6931 6952 0
-6931 -6937 6950 0
-6931 -6936 6948 0
-6930 6950 0
-6930 -6937 6948 0
-6930 -6936 6947 0
c ((SATLiteral(775) - aux1698 + SATLiteral(670))<=0)
-670 -6954 0
-775 -6954 0
-775 -670 -6955 0
c (0<=(SATLiteral(775) - aux1698 + SATLiteral(670)))
670 6955 0
775 6955 0
775 670 6954 0
c ((SATLiteral(790) - aux1699 + SATLiteral(655))<=0)
-655 -6957 0
-790 -6957 0
-790 -655 -6958 0
c (0<=(SATLiteral(790) - aux1699 + SATLiteral(655)))
655 6958 0
790 6958 0
790 655 6957 0
c (( - aux1700 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -6960 0
-505 -6960 0
-505 -640 -6961 0
c (0<=( - aux1700 + SATLiteral(505) + SATLiteral(640)))
640 6961 0
505 6961 0
505 640 6960 0
c (( - aux1701 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -6963 0
-520 -6963 0
-520 -535 -6964 0
c (0<=( - aux1701 + SATLiteral(520) + SATLiteral(535)))
535 6964 0
520 6964 0
520 535 6963 0
c ((SATLiteral(805) + aux1701 - aux1702)<=0)
6963 -6966 0
6964 -6967 0
-805 -6966 0
-805 6963 -6967 0
-805 6964 -6969 0
c (0<=(SATLiteral(805) + aux1701 - aux1702))
-6964 6969 0
-6963 6967 0
805 6969 0
805 -6964 6967 0
805 -6963 6966 0
c ((aux1698 + aux1700 - aux1703)<=0)
6960 -6971 0
6961 -6972 0
6954 -6971 0
6954 6960 -6972 0
6954 6961 -6974 0
6955 -6972 0
6955 6960 -6974 0
6955 6961 -6976 0
c (0<=(aux1698 + aux1700 - aux1703))
-6961 6976 0
-6960 6974 0
-6955 6976 0
-6955 -6961 6974 0
-6955 -6960 6972 0
-6954 6974 0
-6954 -6961 6972 0
-6954 -6960 6971 0
c ((SATLiteral(777) - aux1704 + SATLiteral(672))<=0)
-672 -6978 0
-777 -6978 0
-777 -672 -6979 0
c (0<=(SATLiteral(777) - aux1704 + SATLiteral(672)))
672 6979 0
777 6979 0
777 672 6978 0
c ((SATLiteral(792) - aux1705 + SATLiteral(657))<=0)
-657 -6981 0
-792 -6981 0
-792 -657 -6982 0
c (0<=(SATLiteral(792) - aux1705 + SATLiteral(657)))
657 6982 0
792 6982 0
792 657 6981 0
c (( - aux1706 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -6984 0
-507 -6984 0
-507 -642 -6985 0
c (0<=( - aux1706 + SATLiteral(507) + SATLiteral(642)))
642 6985 0
507 6985 0
507 642 6984 0
c (( - aux1707 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -6987 0
-522 -6987 0
-522 -537 -6988 0
c (0<=( - aux1707 + SATLiteral(522) + SATLiteral(537)))
537 6988 0
522 6988 0
522 537 6987 0
c ((SATLiteral(807) + aux1707 - aux1708)<=0)
6987 -6990 0
6988 -6991 0
-807 -6990 0
-807 6987 -6991 0
-807 6988 -6993 0
c (0<=(SATLiteral(807) + aux1707 - aux1708))
-6988 6993 0
-6987 6991 0
807 6993 0
807 -6988 6991 0
807 -6987 6990 0
c ((aux1704 + aux1706 - aux1709)<=0)
6984 -6995 0
6985 -6996 0
6978 -6995 0
6978 6984 -6996 0
6978 6985 -6998 0
6979 -6996 0
6979 6984 -6998 0
6979 6985 -7000 0
c (0<=(aux1704 + aux1706 - aux1709))
-6985 7000 0
-6984 6998 0
-6979 7000 0
-6979 -6985 6998 0
-6979 -6984 6996 0
-6978 6998 0
-6978 -6985 6996 0
-6978 -6984 6995 0
c ((SATLiteral(779) - aux1710 + SATLiteral(674))<=0)
-674 -7002 0
-779 -7002 0
-779 -674 -7003 0
c (0<=(SATLiteral(779) - aux1710 + SATLiteral(674)))
674 7003 0
779 7003 0
779 674 7002 0
c ((SATLiteral(794) - aux1711 + SATLiteral(659))<=0)
-659 -7005 0
-794 -7005 0
-794 -659 -7006 0
c (0<=(SATLiteral(794) - aux1711 + SATLiteral(659)))
659 7006 0
794 7006 0
794 659 7005 0
c (( - aux1712 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7008 0
-509 -7008 0
-509 -644 -7009 0
c (0<=( - aux1712 + SATLiteral(509) + SATLiteral(644)))
644 7009 0
509 7009 0
509 644 7008 0
c (( - aux1713 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7011 0
-524 -7011 0
-524 -539 -7012 0
c (0<=( - aux1713 + SATLiteral(524) + SATLiteral(539)))
539 7012 0
524 7012 0
524 539 7011 0
c ((SATLiteral(809) + aux1713 - aux1714)<=0)
7011 -7014 0
7012 -7015 0
-809 -7014 0
-809 7011 -7015 0
-809 7012 -7017 0
c (0<=(SATLiteral(809) + aux1713 - aux1714))
-7012 7017 0
-7011 7015 0
809 7017 0
809 -7012 7015 0
809 -7011 7014 0
c ((aux1710 + aux1712 - aux1715)<=0)
7008 -7019 0
7009 -7020 0
7002 -7019 0
7002 7008 -7020 0
7002 7009 -7022 0
7003 -7020 0
7003 7008 -7022 0
7003 7009 -7024 0
c (0<=(aux1710 + aux1712 - aux1715))
-7009 7024 0
-7008 7022 0
-7003 7024 0
-7003 -7009 7022 0
-7003 -7008 7020 0
-7002 7022 0
-7002 -7009 7020 0
-7002 -7008 7019 0
c ((SATLiteral(781) - aux1716 + SATLiteral(676))<=0)
-676 -7026 0
-781 -7026 0
-781 -676 -7027 0
c (0<=(SATLiteral(781) - aux1716 + SATLiteral(676)))
676 7027 0
781 7027 0
781 676 7026 0
c ((SATLiteral(796) - aux1717 + SATLiteral(661))<=0)
-661 -7029 0
-796 -7029 0
-796 -661 -7030 0
c (0<=(SATLiteral(796) - aux1717 + SATLiteral(661)))
661 7030 0
796 7030 0
796 661 7029 0
c (( - aux1718 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7032 0
-511 -7032 0
-511 -646 -7033 0
c (0<=( - aux1718 + SATLiteral(511) + SATLiteral(646)))
646 7033 0
511 7033 0
511 646 7032 0
c (( - aux1719 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7035 0
-526 -7035 0
-526 -541 -7036 0
c (0<=( - aux1719 + SATLiteral(526) + SATLiteral(541)))
541 7036 0
526 7036 0
526 541 7035 0
c ((SATLiteral(811) + aux1719 - aux1720)<=0)
7035 -7038 0
7036 -7039 0
-811 -7038 0
-811 7035 -7039 0
-811 7036 -7041 0
c (0<=(SATLiteral(811) + aux1719 - aux1720))
-7036 7041 0
-7035 7039 0
811 7041 0
811 -7036 7039 0
811 -7035 7038 0
c ((aux1716 + aux1718 - aux1721)<=0)
7032 -7043 0
7033 -7044 0
7026 -7043 0
7026 7032 -7044 0
7026 7033 -7046 0
7027 -7044 0
7027 7032 -7046 0
7027 7033 -7048 0
c (0<=(aux1716 + aux1718 - aux1721))
-7033 7048 0
-7032 7046 0
-7027 7048 0
-7027 -7033 7046 0
-7027 -7032 7044 0
-7026 7046 0
-7026 -7033 7044 0
-7026 -7032 7043 0
c ((SATLiteral(-780) - aux1722 + SATLiteral(-675))<=0)
675 -7050 0
780 -7050 0
780 675 -7051 0
c (0<=(SATLiteral(-780) - aux1722 + SATLiteral(-675)))
-675 7051 0
-780 7051 0
-780 -675 7050 0
c ((SATLiteral(-795) - aux1723 + SATLiteral(-660))<=0)
660 -7053 0
795 -7053 0
795 660 -7054 0
c (0<=(SATLiteral(-795) - aux1723 + SATLiteral(-660)))
-660 7054 0
-795 7054 0
-795 -660 7053 0
c (( - aux1724 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7056 0
510 -7056 0
510 645 -7057 0
c (0<=( - aux1724 + SATLiteral(-510) + SATLiteral(-645)))
-645 7057 0
-510 7057 0
-510 -645 7056 0
c (( - aux1725 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7059 0
525 -7059 0
525 540 -7060 0
c (0<=( - aux1725 + SATLiteral(-525) + SATLiteral(-540)))
-540 7060 0
-525 7060 0
-525 -540 7059 0
c ((SATLiteral(-810) + aux1725 - aux1726)<=0)
7059 -7062 0
7060 -7063 0
810 -7062 0
810 7059 -7063 0
810 7060 -7065 0
c (0<=(SATLiteral(-810) + aux1725 - aux1726))
-7060 7065 0
-7059 7063 0
-810 7065 0
-810 -7060 7063 0
-810 -7059 7062 0
c ((aux1722 + aux1724 - aux1727)<=0)
7056 -7067 0
7057 -7068 0
7050 -7067 0
7050 7056 -7068 0
7050 7057 -7070 0
7051 -7068 0
7051 7056 -7070 0
7051 7057 -7072 0
c (0<=(aux1722 + aux1724 - aux1727))
-7057 7072 0
-7056 7070 0
-7051 7072 0
-7051 -7057 7070 0
-7051 -7056 7068 0
-7050 7070 0
-7050 -7057 7068 0
-7050 -7056 7067 0
c ((SATLiteral(947) - aux1728 + SATLiteral(842))<=0)
-842 -7074 0
-947 -7074 0
-947 -842 -7075 0
c (0<=(SATLiteral(947) - aux1728 + SATLiteral(842)))
842 7075 0
947 7075 0
947 842 7074 0
c ((SATLiteral(962) - aux1729 + SATLiteral(827))<=0)
-827 -7077 0
-962 -7077 0
-962 -827 -7078 0
c (0<=(SATLiteral(962) - aux1729 + SATLiteral(827)))
827 7078 0
962 7078 0
962 827 7077 0
c (( - aux1730 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7080 0
-1082 -7080 0
-1082 -812 -7081 0
c (0<=( - aux1730 + SATLiteral(1082) + SATLiteral(812)))
812 7081 0
1082 7081 0
1082 812 7080 0
c (( - aux1731 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7083 0
-1097 -7083 0
-1097 -1112 -7084 0
c (0<=( - aux1731 + SATLiteral(1097) + SATLiteral(1112)))
1112 7084 0
1097 7084 0
1097 1112 7083 0
c ((SATLiteral(977) + aux1731 - aux1732)<=0)
7083 -7086 0
7084 -7087 0
-977 -7086 0
-977 7083 -7087 0
-977 7084 -7089 0
c (0<=(SATLiteral(977) + aux1731 - aux1732))
-7084 7089 0
-7083 7087 0
977 7089 0
977 -7084 7087 0
977 -7083 7086 0
c ((aux1728 + aux1730 - aux1733)<=0)
7080 -7091 0
7081 -7092 0
7074 -7091 0
7074 7080 -7092 0
7074 7081 -7094 0
7075 -7092 0
7075 7080 -7094 0
7075 7081 -7096 0
c (0<=(aux1728 + aux1730 - aux1733))
-7081 7096 0
-7080 7094 0
-7075 7096 0
-7075 -7081 7094 0
-7075 -7080 7092 0
-7074 7094 0
-7074 -7081 7092 0
-7074 -7080 7091 0
c ((SATLiteral(949) - aux1734 + SATLiteral(844))<=0)
-844 -7098 0
-949 -7098 0
-949 -844 -7099 0
c (0<=(SATLiteral(949) - aux1734 + SATLiteral(844)))
844 7099 0
949 7099 0
949 844 7098 0
c ((SATLiteral(964) - aux1735 + SATLiteral(829))<=0)
-829 -7101 0
-964 -7101 0
-964 -829 -7102 0
c (0<=(SATLiteral(964) - aux1735 + SATLiteral(829)))
829 7102 0
964 7102 0
964 829 7101 0
c (( - aux1736 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7104 0
-1084 -7104 0
-1084 -814 -7105 0
c (0<=( - aux1736 + SATLiteral(1084) + SATLiteral(814)))
814 7105 0
1084 7105 0
1084 814 7104 0
c (( - aux1737 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7107 0
-1099 -7107 0
-1099 -1114 -7108 0
c (0<=( - aux1737 + SATLiteral(1099) + SATLiteral(1114)))
1114 7108 0
1099 7108 0
1099 1114 7107 0
c ((SATLiteral(979) + aux1737 - aux1738)<=0)
7107 -7110 0
7108 -7111 0
-979 -7110 0
-979 7107 -7111 0
-979 7108 -7113 0
c (0<=(SATLiteral(979) + aux1737 - aux1738))
-7108 7113 0
-7107 7111 0
979 7113 0
979 -7108 7111 0
979 -7107 7110 0
c ((aux1734 + aux1736 - aux1739)<=0)
7104 -7115 0
7105 -7116 0
7098 -7115 0
7098 7104 -7116 0
7098 7105 -7118 0
7099 -7116 0
7099 7104 -7118 0
7099 7105 -7120 0
c (0<=(aux1734 + aux1736 - aux1739))
-7105 7120 0
-7104 7118 0
-7099 7120 0
-7099 -7105 7118 0
-7099 -7104 7116 0
-7098 7118 0
-7098 -7105 7116 0
-7098 -7104 7115 0
c ((SATLiteral(951) - aux1740 + SATLiteral(846))<=0)
-846 -7122 0
-951 -7122 0
-951 -846 -7123 0
c (0<=(SATLiteral(951) - aux1740 + SATLiteral(846)))
846 7123 0
951 7123 0
951 846 7122 0
c ((SATLiteral(966) - aux1741 + SATLiteral(831))<=0)
-831 -7125 0
-966 -7125 0
-966 -831 -7126 0
c (0<=(SATLiteral(966) - aux1741 + SATLiteral(831)))
831 7126 0
966 7126 0
966 831 7125 0
c (( - aux1742 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7128 0
-1086 -7128 0
-1086 -816 -7129 0
c (0<=( - aux1742 + SATLiteral(1086) + SATLiteral(816)))
816 7129 0
1086 7129 0
1086 816 7128 0
c (( - aux1743 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7131 0
-1101 -7131 0
-1101 -1116 -7132 0
c (0<=( - aux1743 + SATLiteral(1101) + SATLiteral(1116)))
1116 7132 0
1101 7132 0
1101 1116 7131 0
c ((SATLiteral(981) + aux1743 - aux1744)<=0)
7131 -7134 0
7132 -7135 0
-981 -7134 0
-981 7131 -7135 0
-981 7132 -7137 0
c (0<=(SATLiteral(981) + aux1743 - aux1744))
-7132 7137 0
-7131 7135 0
981 7137 0
981 -7132 7135 0
981 -7131 7134 0
c ((aux1740 + aux1742 - aux1745)<=0)
7128 -7139 0
7129 -7140 0
7122 -7139 0
7122 7128 -7140 0
7122 7129 -7142 0
7123 -7140 0
7123 7128 -7142 0
7123 7129 -7144 0
c (0<=(aux1740 + aux1742 - aux1745))
-7129 7144 0
-7128 7142 0
-7123 7144 0
-7123 -7129 7142 0
-7123 -7128 7140 0
-7122 7142 0
-7122 -7129 7140 0
-7122 -7128 7139 0
c ((SATLiteral(953) - aux1746 + SATLiteral(848))<=0)
-848 -7146 0
-953 -7146 0
-953 -848 -7147 0
c (0<=(SATLiteral(953) - aux1746 + SATLiteral(848)))
848 7147 0
953 7147 0
953 848 7146 0
c ((SATLiteral(968) - aux1747 + SATLiteral(833))<=0)
-833 -7149 0
-968 -7149 0
-968 -833 -7150 0
c (0<=(SATLiteral(968) - aux1747 + SATLiteral(833)))
833 7150 0
968 7150 0
968 833 7149 0
c (( - aux1748 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7152 0
-1088 -7152 0
-1088 -818 -7153 0
c (0<=( - aux1748 + SATLiteral(1088) + SATLiteral(818)))
818 7153 0
1088 7153 0
1088 818 7152 0
c (( - aux1749 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7155 0
-1103 -7155 0
-1103 -1118 -7156 0
c (0<=( - aux1749 + SATLiteral(1103) + SATLiteral(1118)))
1118 7156 0
1103 7156 0
1103 1118 7155 0
c ((SATLiteral(983) + aux1749 - aux1750)<=0)
7155 -7158 0
7156 -7159 0
-983 -7158 0
-983 7155 -7159 0
-983 7156 -7161 0
c (0<=(SATLiteral(983) + aux1749 - aux1750))
-7156 7161 0
-7155 7159 0
983 7161 0
983 -7156 7159 0
983 -7155 7158 0
c ((aux1746 + aux1748 - aux1751)<=0)
7152 -7163 0
7153 -7164 0
7146 -7163 0
7146 7152 -7164 0
7146 7153 -7166 0
7147 -7164 0
7147 7152 -7166 0
7147 7153 -7168 0
c (0<=(aux1746 + aux1748 - aux1751))
-7153 7168 0
-7152 7166 0
-7147 7168 0
-7147 -7153 7166 0
-7147 -7152 7164 0
-7146 7166 0
-7146 -7153 7164 0
-7146 -7152 7163 0
c ((SATLiteral(955) - aux1752 + SATLiteral(850))<=0)
-850 -7170 0
-955 -7170 0
-955 -850 -7171 0
c (0<=(SATLiteral(955) - aux1752 + SATLiteral(850)))
850 7171 0
955 7171 0
955 850 7170 0
c ((SATLiteral(970) - aux1753 + SATLiteral(835))<=0)
-835 -7173 0
-970 -7173 0
-970 -835 -7174 0
c (0<=(SATLiteral(970) - aux1753 + SATLiteral(835)))
835 7174 0
970 7174 0
970 835 7173 0
c (( - aux1754 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7176 0
-1090 -7176 0
-1090 -820 -7177 0
c (0<=( - aux1754 + SATLiteral(1090) + SATLiteral(820)))
820 7177 0
1090 7177 0
1090 820 7176 0
c (( - aux1755 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7179 0
-1105 -7179 0
-1105 -1120 -7180 0
c (0<=( - aux1755 + SATLiteral(1105) + SATLiteral(1120)))
1120 7180 0
1105 7180 0
1105 1120 7179 0
c ((SATLiteral(985) + aux1755 - aux1756)<=0)
7179 -7182 0
7180 -7183 0
-985 -7182 0
-985 7179 -7183 0
-985 7180 -7185 0
c (0<=(SATLiteral(985) + aux1755 - aux1756))
-7180 7185 0
-7179 7183 0
985 7185 0
985 -7180 7183 0
985 -7179 7182 0
c ((aux1752 + aux1754 - aux1757)<=0)
7176 -7187 0
7177 -7188 0
7170 -7187 0
7170 7176 -7188 0
7170 7177 -7190 0
7171 -7188 0
7171 7176 -7190 0
7171 7177 -7192 0
c (0<=(aux1752 + aux1754 - aux1757))
-7177 7192 0
-7176 7190 0
-7171 7192 0
-7171 -7177 7190 0
-7171 -7176 7188 0
-7170 7190 0
-7170 -7177 7188 0
-7170 -7176 7187 0
c ((SATLiteral(957) - aux1758 + SATLiteral(852))<=0)
-852 -7194 0
-957 -7194 0
-957 -852 -7195 0
c (0<=(SATLiteral(957) - aux1758 + SATLiteral(852)))
852 7195 0
957 7195 0
957 852 7194 0
c ((SATLiteral(972) - aux1759 + SATLiteral(837))<=0)
-837 -7197 0
-972 -7197 0
-972 -837 -7198 0
c (0<=(SATLiteral(972) - aux1759 + SATLiteral(837)))
837 7198 0
972 7198 0
972 837 7197 0
c (( - aux1760 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7200 0
-1092 -7200 0
-1092 -822 -7201 0
c (0<=( - aux1760 + SATLiteral(1092) + SATLiteral(822)))
822 7201 0
1092 7201 0
1092 822 7200 0
c (( - aux1761 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7203 0
-1107 -7203 0
-1107 -1122 -7204 0
c (0<=( - aux1761 + SATLiteral(1107) + SATLiteral(1122)))
1122 7204 0
1107 7204 0
1107 1122 7203 0
c ((SATLiteral(987) + aux1761 - aux1762)<=0)
7203 -7206 0
7204 -7207 0
-987 -7206 0
-987 7203 -7207 0
-987 7204 -7209 0
c (0<=(SATLiteral(987) + aux1761 - aux1762))
-7204 7209 0
-7203 7207 0
987 7209 0
987 -7204 7207 0
987 -7203 7206 0
c ((aux1758 + aux1760 - aux1763)<=0)
7200 -7211 0
7201 -7212 0
7194 -7211 0
7194 7200 -7212 0
7194 7201 -7214 0
7195 -7212 0
7195 7200 -7214 0
7195 7201 -7216 0
c (0<=(aux1758 + aux1760 - aux1763))
-7201 7216 0
-7200 7214 0
-7195 7216 0
-7195 -7201 7214 0
-7195 -7200 7212 0
-7194 7214 0
-7194 -7201 7212 0
-7194 -7200 7211 0
c ((SATLiteral(959) - aux1764 + SATLiteral(854))<=0)
-854 -7218 0
-959 -7218 0
-959 -854 -7219 0
c (0<=(SATLiteral(959) - aux1764 + SATLiteral(854)))
854 7219 0
959 7219 0
959 854 7218 0
c ((SATLiteral(974) - aux1765 + SATLiteral(839))<=0)
-839 -7221 0
-974 -7221 0
-974 -839 -7222 0
c (0<=(SATLiteral(974) - aux1765 + SATLiteral(839)))
839 7222 0
974 7222 0
974 839 7221 0
c (( - aux1766 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7224 0
-1094 -7224 0
-1094 -824 -7225 0
c (0<=( - aux1766 + SATLiteral(1094) + SATLiteral(824)))
824 7225 0
1094 7225 0
1094 824 7224 0
c (( - aux1767 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7227 0
-1109 -7227 0
-1109 -1124 -7228 0
c (0<=( - aux1767 + SATLiteral(1109) + SATLiteral(1124)))
1124 7228 0
1109 7228 0
1109 1124 7227 0
c ((SATLiteral(989) + aux1767 - aux1768)<=0)
7227 -7230 0
7228 -7231 0
-989 -7230 0
-989 7227 -7231 0
-989 7228 -7233 0
c (0<=(SATLiteral(989) + aux1767 - aux1768))
-7228 7233 0
-7227 7231 0
989 7233 0
989 -7228 7231 0
989 -7227 7230 0
c ((aux1764 + aux1766 - aux1769)<=0)
7224 -7235 0
7225 -7236 0
7218 -7235 0
7218 7224 -7236 0
7218 7225 -7238 0
7219 -7236 0
7219 7224 -7238 0
7219 7225 -7240 0
c (0<=(aux1764 + aux1766 - aux1769))
-7225 7240 0
-7224 7238 0
-7219 7240 0
-7219 -7225 7238 0
-7219 -7224 7236 0
-7218 7238 0
-7218 -7225 7236 0
-7218 -7224 7235 0
c ((SATLiteral(961) - aux1770 + SATLiteral(856))<=0)
-856 -7242 0
-961 -7242 0
-961 -856 -7243 0
c (0<=(SATLiteral(961) - aux1770 + SATLiteral(856)))
856 7243 0
961 7243 0
961 856 7242 0
c ((SATLiteral(976) - aux1771 + SATLiteral(841))<=0)
-841 -7245 0
-976 -7245 0
-976 -841 -7246 0
c (0<=(SATLiteral(976) - aux1771 + SATLiteral(841)))
841 7246 0
976 7246 0
976 841 7245 0
c (( - aux1772 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7248 0
-1096 -7248 0
-1096 -826 -7249 0
c (0<=( - aux1772 + SATLiteral(1096) + SATLiteral(826)))
826 7249 0
1096 7249 0
1096 826 7248 0
c (( - aux1773 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7251 0
-1111 -7251 0
-1111 -1126 -7252 0
c (0<=( - aux1773 + SATLiteral(1111) + SATLiteral(1126)))
1126 7252 0
1111 7252 0
1111 1126 7251 0
c ((SATLiteral(991) + aux1773 - aux1774)<=0)
7251 -7254 0
7252 -7255 0
-991 -7254 0
-991 7251 -7255 0
-991 7252 -7257 0
c (0<=(SATLiteral(991) + aux1773 - aux1774))
-7252 7257 0
-7251 7255 0
991 7257 0
991 -7252 7255 0
991 -7251 7254 0
c ((aux1770 + aux1772 - aux1775)<=0)
7248 -7259 0
7249 -7260 0
7242 -7259 0
7242 7248 -7260 0
7242 7249 -7262 0
7243 -7260 0
7243 7248 -7262 0
7243 7249 -7264 0
c (0<=(aux1770 + aux1772 - aux1775))
-7249 7264 0
-7248 7262 0
-7243 7264 0
-7243 -7249 7262 0
-7243 -7248 7260 0
-7242 7262 0
-7242 -7249 7260 0
-7242 -7248 7259 0
c ((SATLiteral(-960) - aux1776 + SATLiteral(-855))<=0)
855 -7266 0
960 -7266 0
960 855 -7267 0
c (0<=(SATLiteral(-960) - aux1776 + SATLiteral(-855)))
-855 7267 0
-960 7267 0
-960 -855 7266 0
c ((SATLiteral(-975) - aux1777 + SATLiteral(-840))<=0)
840 -7269 0
975 -7269 0
975 840 -7270 0
c (0<=(SATLiteral(-975) - aux1777 + SATLiteral(-840)))
-840 7270 0
-975 7270 0
-975 -840 7269 0
c (( - aux1778 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7272 0
1095 -7272 0
1095 825 -7273 0
c (0<=( - aux1778 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7273 0
-1095 7273 0
-1095 -825 7272 0
c (( - aux1779 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7275 0
1110 -7275 0
1110 1125 -7276 0
c (0<=( - aux1779 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7276 0
-1110 7276 0
-1110 -1125 7275 0
c ((SATLiteral(-990) + aux1779 - aux1780)<=0)
7275 -7278 0
7276 -7279 0
990 -7278 0
990 7275 -7279 0
990 7276 -7281 0
c (0<=(SATLiteral(-990) + aux1779 - aux1780))
-7276 7281 0
-7275 7279 0
-990 7281 0
-990 -7276 7279 0
-990 -7275 7278 0
c ((aux1776 + aux1778 - aux1781)<=0)
7272 -7283 0
7273 -7284 0
7266 -7283 0
7266 7272 -7284 0
7266 7273 -7286 0
7267 -7284 0
7267 7272 -7286 0
7267 7273 -7288 0
c (0<=(aux1776 + aux1778 - aux1781))
-7273 7288 0
-7272 7286 0
-7267 7288 0
-7267 -7273 7286 0
-7267 -7272 7284 0
-7266 7286 0
-7266 -7273 7284 0
-7266 -7272 7283 0
c ((SATLiteral(992) - aux1782 + SATLiteral(887))<=0)
-887 -7290 0
-992 -7290 0
-992 -887 -7291 0
c (0<=(SATLiteral(992) - aux1782 + SATLiteral(887)))
887 7291 0
992 7291 0
992 887 7290 0
c ((SATLiteral(1007) - aux1783 + SATLiteral(872))<=0)
-872 -7293 0
-1007 -7293 0
-1007 -872 -7294 0
c (0<=(SATLiteral(1007) - aux1783 + SATLiteral(872)))
872 7294 0
1007 7294 0
1007 872 7293 0
c (( - aux1784 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7296 0
-1127 -7296 0
-1127 -857 -7297 0
c (0<=( - aux1784 + SATLiteral(1127) + SATLiteral(857)))
857 7297 0
1127 7297 0
1127 857 7296 0
c (( - aux1785 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7299 0
-1142 -7299 0
-1142 -1157 -7300 0
c (0<=( - aux1785 + SATLiteral(1142) + SATLiteral(1157)))
1157 7300 0
1142 7300 0
1142 1157 7299 0
c ((SATLiteral(1022) + aux1785 - aux1786)<=0)
7299 -7302 0
7300 -7303 0
-1022 -7302 0
-1022 7299 -7303 0
-1022 7300 -7305 0
c (0<=(SATLiteral(1022) + aux1785 - aux1786))
-7300 7305 0
-7299 7303 0
1022 7305 0
1022 -7300 7303 0
1022 -7299 7302 0
c ((aux1782 + aux1784 - aux1787)<=0)
7296 -7307 0
7297 -7308 0
7290 -7307 0
7290 7296 -7308 0
7290 7297 -7310 0
7291 -7308 0
7291 7296 -7310 0
7291 7297 -7312 0
c (0<=(aux1782 + aux1784 - aux1787))
-7297 7312 0
-7296 7310 0
-7291 7312 0
-7291 -7297 7310 0
-7291 -7296 7308 0
-7290 7310 0
-7290 -7297 7308 0
-7290 -7296 7307 0
c ((SATLiteral(994) - aux1788 + SATLiteral(889))<=0)
-889 -7314 0
-994 -7314 0
-994 -889 -7315 0
c (0<=(SATLiteral(994) - aux1788 + SATLiteral(889)))
889 7315 0
994 7315 0
994 889 7314 0
c ((SATLiteral(1009) - aux1789 + SATLiteral(874))<=0)
-874 -7317 0
-1009 -7317 0
-1009 -874 -7318 0
c (0<=(SATLiteral(1009) - aux1789 + SATLiteral(874)))
874 7318 0
1009 7318 0
1009 874 7317 0
c (( - aux1790 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7320 0
-1129 -7320 0
-1129 -859 -7321 0
c (0<=( - aux1790 + SATLiteral(1129) + SATLiteral(859)))
859 7321 0
1129 7321 0
1129 859 7320 0
c (( - aux1791 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7323 0
-1144 -7323 0
-1144 -1159 -7324 0
c (0<=( - aux1791 + SATLiteral(1144) + SATLiteral(1159)))
1159 7324 0
1144 7324 0
1144 1159 7323 0
c ((SATLiteral(1024) + aux1791 - aux1792)<=0)
7323 -7326 0
7324 -7327 0
-1024 -7326 0
-1024 7323 -7327 0
-1024 7324 -7329 0
c (0<=(SATLiteral(1024) + aux1791 - aux1792))
-7324 7329 0
-7323 7327 0
1024 7329 0
1024 -7324 7327 0
1024 -7323 7326 0
c ((aux1788 + aux1790 - aux1793)<=0)
7320 -7331 0
7321 -7332 0
7314 -7331 0
7314 7320 -7332 0
7314 7321 -7334 0
7315 -7332 0
7315 7320 -7334 0
7315 7321 -7336 0
c (0<=(aux1788 + aux1790 - aux1793))
-7321 7336 0
-7320 7334 0
-7315 7336 0
-7315 -7321 7334 0
-7315 -7320 7332 0
-7314 7334 0
-7314 -7321 7332 0
-7314 -7320 7331 0
c ((SATLiteral(996) - aux1794 + SATLiteral(891))<=0)
-891 -7338 0
-996 -7338 0
-996 -891 -7339 0
c (0<=(SATLiteral(996) - aux1794 + SATLiteral(891)))
891 7339 0
996 7339 0
996 891 7338 0
c ((SATLiteral(1011) - aux1795 + SATLiteral(876))<=0)
-876 -7341 0
-1011 -7341 0
-1011 -876 -7342 0
c (0<=(SATLiteral(1011) - aux1795 + SATLiteral(876)))
876 7342 0
1011 7342 0
1011 876 7341 0
c (( - aux1796 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7344 0
-1131 -7344 0
-1131 -861 -7345 0
c (0<=( - aux1796 + SATLiteral(1131) + SATLiteral(861)))
861 7345 0
1131 7345 0
1131 861 7344 0
c (( - aux1797 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7347 0
-1146 -7347 0
-1146 -1161 -7348 0
c (0<=( - aux1797 + SATLiteral(1146) + SATLiteral(1161)))
1161 7348 0
1146 7348 0
1146 1161 7347 0
c ((SATLiteral(1026) + aux1797 - aux1798)<=0)
7347 -7350 0
7348 -7351 0
-1026 -7350 0
-1026 7347 -7351 0
-1026 7348 -7353 0
c (0<=(SATLiteral(1026) + aux1797 - aux1798))
-7348 7353 0
-7347 7351 0
1026 7353 0
1026 -7348 7351 0
1026 -7347 7350 0
c ((aux1794 + aux1796 - aux1799)<=0)
7344 -7355 0
7345 -7356 0
7338 -7355 0
7338 7344 -7356 0
7338 7345 -7358 0
7339 -7356 0
7339 7344 -7358 0
7339 7345 -7360 0
c (0<=(aux1794 + aux1796 - aux1799))
-7345 7360 0
-7344 7358 0
-7339 7360 0
-7339 -7345 7358 0
-7339 -7344 7356 0
-7338 7358 0
-7338 -7345 7356 0
-7338 -7344 7355 0
c ((SATLiteral(998) - aux1800 + SATLiteral(893))<=0)
-893 -7362 0
-998 -7362 0
-998 -893 -7363 0
c (0<=(SATLiteral(998) - aux1800 + SATLiteral(893)))
893 7363 0
998 7363 0
998 893 7362 0
c ((SATLiteral(1013) - aux1801 + SATLiteral(878))<=0)
-878 -7365 0
-1013 -7365 0
-1013 -878 -7366 0
c (0<=(SATLiteral(1013) - aux1801 + SATLiteral(878)))
878 7366 0
1013 7366 0
1013 878 7365 0
c (( - aux1802 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7368 0
-1133 -7368 0
-1133 -863 -7369 0
c (0<=( - aux1802 + SATLiteral(1133) + SATLiteral(863)))
863 7369 0
1133 7369 0
1133 863 7368 0
c (( - aux1803 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7371 0
-1148 -7371 0
-1148 -1163 -7372 0
c (0<=( - aux1803 + SATLiteral(1148) + SATLiteral(1163)))
1163 7372 0
1148 7372 0
1148 1163 7371 0
c ((SATLiteral(1028) + aux1803 - aux1804)<=0)
7371 -7374 0
7372 -7375 0
-1028 -7374 0
-1028 7371 -7375 0
-1028 7372 -7377 0
c (0<=(SATLiteral(1028) + aux1803 - aux1804))
-7372 7377 0
-7371 7375 0
1028 7377 0
1028 -7372 7375 0
1028 -7371 7374 0
c ((aux1800 + aux1802 - aux1805)<=0)
7368 -7379 0
7369 -7380 0
7362 -7379 0
7362 7368 -7380 0
7362 7369 -7382 0
7363 -7380 0
7363 7368 -7382 0
7363 7369 -7384 0
c (0<=(aux1800 + aux1802 - aux1805))
-7369 7384 0
-7368 7382 0
-7363 7384 0
-7363 -7369 7382 0
-7363 -7368 7380 0
-7362 7382 0
-7362 -7369 7380 0
-7362 -7368 7379 0
c ((SATLiteral(1000) - aux1806 + SATLiteral(895))<=0)
-895 -7386 0
-1000 -7386 0
-1000 -895 -7387 0
c (0<=(SATLiteral(1000) - aux1806 + SATLiteral(895)))
895 7387 0
1000 7387 0
1000 895 7386 0
c ((SATLiteral(1015) - aux1807 + SATLiteral(880))<=0)
-880 -7389 0
-1015 -7389 0
-1015 -880 -7390 0
c (0<=(SATLiteral(1015) - aux1807 + SATLiteral(880)))
880 7390 0
1015 7390 0
1015 880 7389 0
c (( - aux1808 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7392 0
-1135 -7392 0
-1135 -865 -7393 0
c (0<=( - aux1808 + SATLiteral(1135) + SATLiteral(865)))
865 7393 0
1135 7393 0
1135 865 7392 0
c (( - aux1809 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7395 0
-1150 -7395 0
-1150 -1165 -7396 0
c (0<=( - aux1809 + SATLiteral(1150) + SATLiteral(1165)))
1165 7396 0
1150 7396 0
1150 1165 7395 0
c ((SATLiteral(1030) + aux1809 - aux1810)<=0)
7395 -7398 0
7396 -7399 0
-1030 -7398 0
-1030 7395 -7399 0
-1030 7396 -7401 0
c (0<=(SATLiteral(1030) + aux1809 - aux1810))
-7396 7401 0
-7395 7399 0
1030 7401 0
1030 -7396 7399 0
1030 -7395 7398 0
c ((aux1806 + aux1808 - aux1811)<=0)
7392 -7403 0
7393 -7404 0
7386 -7403 0
7386 7392 -7404 0
7386 7393 -7406 0
7387 -7404 0
7387 7392 -7406 0
7387 7393 -7408 0
c (0<=(aux1806 + aux1808 - aux1811))
-7393 7408 0
-7392 7406 0
-7387 7408 0
-7387 -7393 7406 0
-7387 -7392 7404 0
-7386 7406 0
-7386 -7393 7404 0
-7386 -7392 7403 0
c ((SATLiteral(1002) - aux1812 + SATLiteral(897))<=0)
-897 -7410 0
-1002 -7410 0
-1002 -897 -7411 0
c (0<=(SATLiteral(1002) - aux1812 + SATLiteral(897)))
897 7411 0
1002 7411 0
1002 897 7410 0
c ((SATLiteral(1017) - aux1813 + SATLiteral(882))<=0)
-882 -7413 0
-1017 -7413 0
-1017 -882 -7414 0
c (0<=(SATLiteral(1017) - aux1813 + SATLiteral(882)))
882 7414 0
1017 7414 0
1017 882 7413 0
c (( - aux1814 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7416 0
-1137 -7416 0
-1137 -867 -7417 0
c (0<=( - aux1814 + SATLiteral(1137) + SATLiteral(867)))
867 7417 0
1137 7417 0
1137 867 7416 0
c (( - aux1815 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7419 0
-1152 -7419 0
-1152 -1167 -7420 0
c (0<=( - aux1815 + SATLiteral(1152) + SATLiteral(1167)))
1167 7420 0
1152 7420 0
1152 1167 7419 0
c ((SATLiteral(1032) + aux1815 - aux1816)<=0)
7419 -7422 0
7420 -7423 0
-1032 -7422 0
-1032 7419 -7423 0
-1032 7420 -7425 0
c (0<=(SATLiteral(1032) + aux1815 - aux1816))
-7420 7425 0
-7419 7423 0
1032 7425 0
1032 -7420 7423 0
1032 -7419 7422 0
c ((aux1812 + aux1814 - aux1817)<=0)
7416 -7427 0
7417 -7428 0
7410 -7427 0
7410 7416 -7428 0
7410 7417 -7430 0
7411 -7428 0
7411 7416 -7430 0
7411 7417 -7432 0
c (0<=(aux1812 + aux1814 - aux1817))
-7417 7432 0
-7416 7430 0
-7411 7432 0
-7411 -7417 7430 0
-7411 -7416 7428 0
-7410 7430 0
-7410 -7417 7428 0
-7410 -7416 7427 0
c ((SATLiteral(1004) - aux1818 + SATLiteral(899))<=0)
-899 -7434 0
-1004 -7434 0
-1004 -899 -7435 0
c (0<=(SATLiteral(1004) - aux1818 + SATLiteral(899)))
899 7435 0
1004 7435 0
1004 899 7434 0
c ((SATLiteral(1019) - aux1819 + SATLiteral(884))<=0)
-884 -7437 0
-1019 -7437 0
-1019 -884 -7438 0
c (0<=(SATLiteral(1019) - aux1819 + SATLiteral(884)))
884 7438 0
1019 7438 0
1019 884 7437 0
c (( - aux1820 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7440 0
-1139 -7440 0
-1139 -869 -7441 0
c (0<=( - aux1820 + SATLiteral(1139) + SATLiteral(869)))
869 7441 0
1139 7441 0
1139 869 7440 0
c (( - aux1821 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7443 0
-1154 -7443 0
-1154 -1169 -7444 0
c (0<=( - aux1821 + SATLiteral(1154) + SATLiteral(1169)))
1169 7444 0
1154 7444 0
1154 1169 7443 0
c ((SATLiteral(1034) + aux1821 - aux1822)<=0)
7443 -7446 0
7444 -7447 0
-1034 -7446 0
-1034 7443 -7447 0
-1034 7444 -7449 0
c (0<=(SATLiteral(1034) + aux1821 - aux1822))
-7444 7449 0
-7443 7447 0
1034 7449 0
1034 -7444 7447 0
1034 -7443 7446 0
c ((aux1818 + aux1820 - aux1823)<=0)
7440 -7451 0
7441 -7452 0
7434 -7451 0
7434 7440 -7452 0
7434 7441 -7454 0
7435 -7452 0
7435 7440 -7454 0
7435 7441 -7456 0
c (0<=(aux1818 + aux1820 - aux1823))
-7441 7456 0
-7440 7454 0
-7435 7456 0
-7435 -7441 7454 0
-7435 -7440 7452 0
-7434 7454 0
-7434 -7441 7452 0
-7434 -7440 7451 0
c ((SATLiteral(1006) - aux1824 + SATLiteral(901))<=0)
-901 -7458 0
-1006 -7458 0
-1006 -901 -7459 0
c (0<=(SATLiteral(1006) - aux1824 + SATLiteral(901)))
901 7459 0
1006 7459 0
1006 901 7458 0
c ((SATLiteral(1021) - aux1825 + SATLiteral(886))<=0)
-886 -7461 0
-1021 -7461 0
-1021 -886 -7462 0
c (0<=(SATLiteral(1021) - aux1825 + SATLiteral(886)))
886 7462 0
1021 7462 0
1021 886 7461 0
c (( - aux1826 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7464 0
-1141 -7464 0
-1141 -871 -7465 0
c (0<=( - aux1826 + SATLiteral(1141) + SATLiteral(871)))
871 7465 0
1141 7465 0
1141 871 7464 0
c (( - aux1827 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7467 0
-1156 -7467 0
-1156 -1171 -7468 0
c (0<=( - aux1827 + SATLiteral(1156) + SATLiteral(1171)))
1171 7468 0
1156 7468 0
1156 1171 7467 0
c ((SATLiteral(1036) + aux1827 - aux1828)<=0)
7467 -7470 0
7468 -7471 0
-1036 -7470 0
-1036 7467 -7471 0
-1036 7468 -7473 0
c (0<=(SATLiteral(1036) + aux1827 - aux1828))
-7468 7473 0
-7467 7471 0
1036 7473 0
1036 -7468 7471 0
1036 -7467 7470 0
c ((aux1824 + aux1826 - aux1829)<=0)
7464 -7475 0
7465 -7476 0
7458 -7475 0
7458 7464 -7476 0
7458 7465 -7478 0
7459 -7476 0
7459 7464 -7478 0
7459 7465 -7480 0
c (0<=(aux1824 + aux1826 - aux1829))
-7465 7480 0
-7464 7478 0
-7459 7480 0
-7459 -7465 7478 0
-7459 -7464 7476 0
-7458 7478 0
-7458 -7465 7476 0
-7458 -7464 7475 0
c ((SATLiteral(-1005) - aux1830 + SATLiteral(-900))<=0)
900 -7482 0
1005 -7482 0
1005 900 -7483 0
c (0<=(SATLiteral(-1005) - aux1830 + SATLiteral(-900)))
-900 7483 0
-1005 7483 0
-1005 -900 7482 0
c ((SATLiteral(-1020) - aux1831 + SATLiteral(-885))<=0)
885 -7485 0
1020 -7485 0
1020 885 -7486 0
c (0<=(SATLiteral(-1020) - aux1831 + SATLiteral(-885)))
-885 7486 0
-1020 7486 0
-1020 -885 7485 0
c (( - aux1832 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7488 0
1140 -7488 0
1140 870 -7489 0
c (0<=( - aux1832 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7489 0
-1140 7489 0
-1140 -870 7488 0
c (( - aux1833 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7491 0
1155 -7491 0
1155 1170 -7492 0
c (0<=( - aux1833 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7492 0
-1155 7492 0
-1155 -1170 7491 0
c ((SATLiteral(-1035) + aux1833 - aux1834)<=0)
7491 -7494 0
7492 -7495 0
1035 -7494 0
1035 7491 -7495 0
1035 7492 -7497 0
c (0<=(SATLiteral(-1035) + aux1833 - aux1834))
-7492 7497 0
-7491 7495 0
-1035 7497 0
-1035 -7492 7495 0
-1035 -7491 7494 0
c ((aux1830 + aux1832 - aux1835)<=0)
7488 -7499 0
7489 -7500 0
7482 -7499 0
7482 7488 -7500 0
7482 7489 -7502 0
7483 -7500 0
7483 7488 -7502 0
7483 7489 -7504 0
c (0<=(aux1830 + aux1832 - aux1835))
-7489 7504 0
-7488 7502 0
-7483 7504 0
-7483 -7489 7502 0
-7483 -7488 7500 0
-7482 7502 0
-7482 -7489 7500 0
-7482 -7488 7499 0
c ((SATLiteral(1037) - aux1836 + SATLiteral(932))<=0)
-932 -7506 0
-1037 -7506 0
-1037 -932 -7507 0
c (0<=(SATLiteral(1037) - aux1836 + SATLiteral(932)))
932 7507 0
1037 7507 0
1037 932 7506 0
c ((SATLiteral(1052) - aux1837 + SATLiteral(917))<=0)
-917 -7509 0
-1052 -7509 0
-1052 -917 -7510 0
c (0<=(SATLiteral(1052) - aux1837 + SATLiteral(917)))
917 7510 0
1052 7510 0
1052 917 7509 0
c (( - aux1838 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7512 0
-1172 -7512 0
-1172 -902 -7513 0
c (0<=( - aux1838 + SATLiteral(1172) + SATLiteral(902)))
902 7513 0
1172 7513 0
1172 902 7512 0
c (( - aux1839 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7515 0
-1187 -7515 0
-1187 -1202 -7516 0
c (0<=( - aux1839 + SATLiteral(1187) + SATLiteral(1202)))
1202 7516 0
1187 7516 0
1187 1202 7515 0
c ((SATLiteral(1067) + aux1839 - aux1840)<=0)
7515 -7518 0
7516 -7519 0
-1067 -7518 0
-1067 7515 -7519 0
-1067 7516 -7521 0
c (0<=(SATLiteral(1067) + aux1839 - aux1840))
-7516 7521 0
-7515 7519 0
1067 7521 0
1067 -7516 7519 0
1067 -7515 7518 0
c ((aux1836 + aux1838 - aux1841)<=0)
7512 -7523 0
7513 -7524 0
7506 -7523 0
7506 7512 -7524 0
7506 7513 -7526 0
7507 -7524 0
7507 7512 -7526 0
7507 7513 -7528 0
c (0<=(aux1836 + aux1838 - aux1841))
-7513 7528 0
-7512 7526 0
-7507 7528 0
-7507 -7513 7526 0
-7507 -7512 7524 0
-7506 7526 0
-7506 -7513 7524 0
-7506 -7512 7523 0
c ((SATLiteral(1039) - aux1842 + SATLiteral(934))<=0)
-934 -7530 0
-1039 -7530 0
-1039 -934 -7531 0
c (0<=(SATLiteral(1039) - aux1842 + SATLiteral(934)))
934 7531 0
1039 7531 0
1039 934 7530 0
c ((SATLiteral(1054) - aux1843 + SATLiteral(919))<=0)
-919 -7533 0
-1054 -7533 0
-1054 -919 -7534 0
c (0<=(SATLiteral(1054) - aux1843 + SATLiteral(919)))
919 7534 0
1054 7534 0
1054 919 7533 0
c (( - aux1844 + SATLiteral(1174) + SATLiteral(903))<=0)
-903 -7536 0
-1174 -7536 0
-1174 -903 -7537 0
c (0<=( - aux1844 + SATLiteral(1174) + SATLiteral(903)))
903 7537 0
1174 7537 0
1174 903 7536 0
c (( - aux1845 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7539 0
-1189 -7539 0
-1189 -1204 -7540 0
c (0<=( - aux1845 + SATLiteral(1189) + SATLiteral(1204)))
1204 7540 0
1189 7540 0
1189 1204 7539 0
c ((SATLiteral(1068) + aux1845 - aux1846)<=0)
7539 -7542 0
7540 -7543 0
-1068 -7542 0
-1068 7539 -7543 0
-1068 7540 -7545 0
c (0<=(SATLiteral(1068) + aux1845 - aux1846))
-7540 7545 0
-7539 7543 0
1068 7545 0
1068 -7540 7543 0
1068 -7539 7542 0
c ((aux1842 + aux1844 - aux1847)<=0)
7536 -7547 0
7537 -7548 0
7530 -7547 0
7530 7536 -7548 0
7530 7537 -7550 0
7531 -7548 0
7531 7536 -7550 0
7531 7537 -7552 0
c (0<=(aux1842 + aux1844 - aux1847))
-7537 7552 0
-7536 7550 0
-7531 7552 0
-7531 -7537 7550 0
-7531 -7536 7548 0
-7530 7550 0
-7530 -7537 7548 0
-7530 -7536 7547 0
c ((SATLiteral(1041) - aux1848 + SATLiteral(936))<=0)
-936 -7554 0
-1041 -7554 0
-1041 -936 -7555 0
c (0<=(SATLiteral(1041) - aux1848 + SATLiteral(936)))
936 7555 0
1041 7555 0
1041 936 7554 0
c ((SATLiteral(1056) - aux1849 + SATLiteral(921))<=0)
-921 -7557 0
-1056 -7557 0
-1056 -921 -7558 0
c (0<=(SATLiteral(1056) - aux1849 + SATLiteral(921)))
921 7558 0
1056 7558 0
1056 921 7557 0
c (( - aux1850 + SATLiteral(1176) + SATLiteral(904))<=0)
-904 -7560 0
-1176 -7560 0
-1176 -904 -7561 0
c (0<=( - aux1850 + SATLiteral(1176) + SATLiteral(904)))
904 7561 0
1176 7561 0
1176 904 7560 0
c (( - aux1851 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7563 0
-1191 -7563 0
-1191 -1206 -7564 0
c (0<=( - aux1851 + SATLiteral(1191) + SATLiteral(1206)))
1206 7564 0
1191 7564 0
1191 1206 7563 0
c ((SATLiteral(1069) + aux1851 - aux1852)<=0)
7563 -7566 0
7564 -7567 0
-1069 -7566 0
-1069 7563 -7567 0
-1069 7564 -7569 0
c (0<=(SATLiteral(1069) + aux1851 - aux1852))
-7564 7569 0
-7563 7567 0
1069 7569 0
1069 -7564 7567 0
1069 -7563 7566 0
c ((aux1848 + aux1850 - aux1853)<=0)
7560 -7571 0
7561 -7572 0
7554 -7571 0
7554 7560 -7572 0
7554 7561 -7574 0
7555 -7572 0
7555 7560 -7574 0
7555 7561 -7576 0
c (0<=(aux1848 + aux1850 - aux1853))
-7561 7576 0
-7560 7574 0
-7555 7576 0
-7555 -7561 7574 0
-7555 -7560 7572 0
-7554 7574 0
-7554 -7561 7572 0
-7554 -7560 7571 0
c ((SATLiteral(1043) - aux1854 + SATLiteral(938))<=0)
-938 -7578 0
-1043 -7578 0
-1043 -938 -7579 0
c (0<=(SATLiteral(1043) - aux1854 + SATLiteral(938)))
938 7579 0
1043 7579 0
1043 938 7578 0
c ((SATLiteral(1058) - aux1855 + SATLiteral(923))<=0)
-923 -7581 0
-1058 -7581 0
-1058 -923 -7582 0
c (0<=(SATLiteral(1058) - aux1855 + SATLiteral(923)))
923 7582 0
1058 7582 0
1058 923 7581 0
c (( - aux1856 + SATLiteral(1178) + SATLiteral(905))<=0)
-905 -7584 0
-1178 -7584 0
-1178 -905 -7585 0
c (0<=( - aux1856 + SATLiteral(1178) + SATLiteral(905)))
905 7585 0
1178 7585 0
1178 905 7584 0
c (( - aux1857 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7587 0
-1193 -7587 0
-1193 -1208 -7588 0
c (0<=( - aux1857 + SATLiteral(1193) + SATLiteral(1208)))
1208 7588 0
1193 7588 0
1193 1208 7587 0
c ((SATLiteral(1070) + aux1857 - aux1858)<=0)
7587 -7590 0
7588 -7591 0
-1070 -7590 0
-1070 7587 -7591 0
-1070 7588 -7593 0
c (0<=(SATLiteral(1070) + aux1857 - aux1858))
-7588 7593 0
-7587 7591 0
1070 7593 0
1070 -7588 7591 0
1070 -7587 7590 0
c ((aux1854 + aux1856 - aux1859)<=0)
7584 -7595 0
7585 -7596 0
7578 -7595 0
7578 7584 -7596 0
7578 7585 -7598 0
7579 -7596 0
7579 7584 -7598 0
7579 7585 -7600 0
c (0<=(aux1854 + aux1856 - aux1859))
-7585 7600 0
-7584 7598 0
-7579 7600 0
-7579 -7585 7598 0
-7579 -7584 7596 0
-7578 7598 0
-7578 -7585 7596 0
-7578 -7584 7595 0
c ((SATLiteral(1045) - aux1860 + SATLiteral(940))<=0)
-940 -7602 0
-1045 -7602 0
-1045 -940 -7603 0
c (0<=(SATLiteral(1045) - aux1860 + SATLiteral(940)))
940 7603 0
1045 7603 0
1045 940 7602 0
c ((SATLiteral(1060) - aux1861 + SATLiteral(925))<=0)
-925 -7605 0
-1060 -7605 0
-1060 -925 -7606 0
c (0<=(SATLiteral(1060) - aux1861 + SATLiteral(925)))
925 7606 0
1060 7606 0
1060 925 7605 0
c (( - aux1862 + SATLiteral(1180) + SATLiteral(906))<=0)
-906 -7608 0
-1180 -7608 0
-1180 -906 -7609 0
c (0<=( - aux1862 + SATLiteral(1180) + SATLiteral(906)))
906 7609 0
1180 7609 0
1180 906 7608 0
c (( - aux1863 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7611 0
-1195 -7611 0
-1195 -1210 -7612 0
c (0<=( - aux1863 + SATLiteral(1195) + SATLiteral(1210)))
1210 7612 0
1195 7612 0
1195 1210 7611 0
c ((SATLiteral(1071) + aux1863 - aux1864)<=0)
7611 -7614 0
7612 -7615 0
-1071 -7614 0
-1071 7611 -7615 0
-1071 7612 -7617 0
c (0<=(SATLiteral(1071) + aux1863 - aux1864))
-7612 7617 0
-7611 7615 0
1071 7617 0
1071 -7612 7615 0
1071 -7611 7614 0
c ((aux1860 + aux1862 - aux1865)<=0)
7608 -7619 0
7609 -7620 0
7602 -7619 0
7602 7608 -7620 0
7602 7609 -7622 0
7603 -7620 0
7603 7608 -7622 0
7603 7609 -7624 0
c (0<=(aux1860 + aux1862 - aux1865))
-7609 7624 0
-7608 7622 0
-7603 7624 0
-7603 -7609 7622 0
-7603 -7608 7620 0
-7602 7622 0
-7602 -7609 7620 0
-7602 -7608 7619 0
c ((SATLiteral(1047) - aux1866 + SATLiteral(942))<=0)
-942 -7626 0
-1047 -7626 0
-1047 -942 -7627 0
c (0<=(SATLiteral(1047) - aux1866 + SATLiteral(942)))
942 7627 0
1047 7627 0
1047 942 7626 0
c ((SATLiteral(1062) - aux1867 + SATLiteral(927))<=0)
-927 -7629 0
-1062 -7629 0
-1062 -927 -7630 0
c (0<=(SATLiteral(1062) - aux1867 + SATLiteral(927)))
927 7630 0
1062 7630 0
1062 927 7629 0
c (( - aux1868 + SATLiteral(1182) + SATLiteral(907))<=0)
-907 -7632 0
-1182 -7632 0
-1182 -907 -7633 0
c (0<=( - aux1868 + SATLiteral(1182) + SATLiteral(907)))
907 7633 0
1182 7633 0
1182 907 7632 0
c (( - aux1869 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7635 0
-1197 -7635 0
-1197 -1212 -7636 0
c (0<=( - aux1869 + SATLiteral(1197) + SATLiteral(1212)))
1212 7636 0
1197 7636 0
1197 1212 7635 0
c ((SATLiteral(1072) + aux1869 - aux1870)<=0)
7635 -7638 0
7636 -7639 0
-1072 -7638 0
-1072 7635 -7639 0
-1072 7636 -7641 0
c (0<=(SATLiteral(1072) + aux1869 - aux1870))
-7636 7641 0
-7635 7639 0
1072 7641 0
1072 -7636 7639 0
1072 -7635 7638 0
c ((aux1866 + aux1868 - aux1871)<=0)
7632 -7643 0
7633 -7644 0
7626 -7643 0
7626 7632 -7644 0
7626 7633 -7646 0
7627 -7644 0
7627 7632 -7646 0
7627 7633 -7648 0
c (0<=(aux1866 + aux1868 - aux1871))
-7633 7648 0
-7632 7646 0
-7627 7648 0
-7627 -7633 7646 0
-7627 -7632 7644 0
-7626 7646 0
-7626 -7633 7644 0
-7626 -7632 7643 0
c ((SATLiteral(1049) - aux1872 + SATLiteral(944))<=0)
-944 -7650 0
-1049 -7650 0
-1049 -944 -7651 0
c (0<=(SATLiteral(1049) - aux1872 + SATLiteral(944)))
944 7651 0
1049 7651 0
1049 944 7650 0
c ((SATLiteral(1064) - aux1873 + SATLiteral(929))<=0)
-929 -7653 0
-1064 -7653 0
-1064 -929 -7654 0
c (0<=(SATLiteral(1064) - aux1873 + SATLiteral(929)))
929 7654 0
1064 7654 0
1064 929 7653 0
c (( - aux1874 + SATLiteral(1184) + SATLiteral(908))<=0)
-908 -7656 0
-1184 -7656 0
-1184 -908 -7657 0
c (0<=( - aux1874 + SATLiteral(1184) + SATLiteral(908)))
908 7657 0
1184 7657 0
1184 908 7656 0
c (( - aux1875 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7659 0
-1199 -7659 0
-1199 -1214 -7660 0
c (0<=( - aux1875 + SATLiteral(1199) + SATLiteral(1214)))
1214 7660 0
1199 7660 0
1199 1214 7659 0
c ((SATLiteral(1073) + aux1875 - aux1876)<=0)
7659 -7662 0
7660 -7663 0
-1073 -7662 0
-1073 7659 -7663 0
-1073 7660 -7665 0
c (0<=(SATLiteral(1073) + aux1875 - aux1876))
-7660 7665 0
-7659 7663 0
1073 7665 0
1073 -7660 7663 0
1073 -7659 7662 0
c ((aux1872 + aux1874 - aux1877)<=0)
7656 -7667 0
7657 -7668 0
7650 -7667 0
7650 7656 -7668 0
7650 7657 -7670 0
7651 -7668 0
7651 7656 -7670 0
7651 7657 -7672 0
c (0<=(aux1872 + aux1874 - aux1877))
-7657 7672 0
-7656 7670 0
-7651 7672 0
-7651 -7657 7670 0
-7651 -7656 7668 0
-7650 7670 0
-7650 -7657 7668 0
-7650 -7656 7667 0
c ((SATLiteral(1051) - aux1878 + SATLiteral(946))<=0)
-946 -7674 0
-1051 -7674 0
-1051 -946 -7675 0
c (0<=(SATLiteral(1051) - aux1878 + SATLiteral(946)))
946 7675 0
1051 7675 0
1051 946 7674 0
c ((SATLiteral(1066) - aux1879 + SATLiteral(931))<=0)
-931 -7677 0
-1066 -7677 0
-1066 -931 -7678 0
c (0<=(SATLiteral(1066) - aux1879 + SATLiteral(931)))
931 7678 0
1066 7678 0
1066 931 7677 0
c (( - aux1880 + SATLiteral(1186) + SATLiteral(909))<=0)
-909 -7680 0
-1186 -7680 0
-1186 -909 -7681 0
c (0<=( - aux1880 + SATLiteral(1186) + SATLiteral(909)))
909 7681 0
1186 7681 0
1186 909 7680 0
c (( - aux1881 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7683 0
-1201 -7683 0
-1201 -1216 -7684 0
c (0<=( - aux1881 + SATLiteral(1201) + SATLiteral(1216)))
1216 7684 0
1201 7684 0
1201 1216 7683 0
c ((SATLiteral(1074) + aux1881 - aux1882)<=0)
7683 -7686 0
7684 -7687 0
-1074 -7686 0
-1074 7683 -7687 0
-1074 7684 -7689 0
c (0<=(SATLiteral(1074) + aux1881 - aux1882))
-7684 7689 0
-7683 7687 0
1074 7689 0
1074 -7684 7687 0
1074 -7683 7686 0
c ((aux1878 + aux1880 - aux1883)<=0)
7680 -7691 0
7681 -7692 0
7674 -7691 0
7674 7680 -7692 0
7674 7681 -7694 0
7675 -7692 0
7675 7680 -7694 0
7675 7681 -7696 0
c (0<=(aux1878 + aux1880 - aux1883))
-7681 7696 0
-7680 7694 0
-7675 7696 0
-7675 -7681 7694 0
-7675 -7680 7692 0
-7674 7694 0
-7674 -7681 7692 0
-7674 -7680 7691 0
c ((SATLiteral(-1050) - aux1884 + SATLiteral(-945))<=0)
945 -7698 0
1050 -7698 0
1050 945 -7699 0
c (0<=(SATLiteral(-1050) - aux1884 + SATLiteral(-945)))
-945 7699 0
-1050 7699 0
-1050 -945 7698 0
c ((SATLiteral(-1065) - aux1885 + SATLiteral(-930))<=0)
930 -7701 0
1065 -7701 0
1065 930 -7702 0
c (0<=(SATLiteral(-1065) - aux1885 + SATLiteral(-930)))
-930 7702 0
-1065 7702 0
-1065 -930 7701 0
c (( - aux1886 + SATLiteral(-1185) + SATLiteral(910))<=0)
-910 -7704 0
1185 -7704 0
1185 -910 -7705 0
c (0<=( - aux1886 + SATLiteral(-1185) + SATLiteral(910)))
910 7705 0
-1185 7705 0
-1185 910 7704 0
c (( - aux1887 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7707 0
1200 -7707 0
1200 1215 -7708 0
c (0<=( - aux1887 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7708 0
-1200 7708 0
-1200 -1215 7707 0
c ((SATLiteral(1075) + aux1887 - aux1888)<=0)
7707 -7710 0
7708 -7711 0
-1075 -7710 0
-1075 7707 -7711 0
-1075 7708 -7713 0
c (0<=(SATLiteral(1075) + aux1887 - aux1888))
-7708 7713 0
-7707 7711 0
1075 7713 0
1075 -7708 7711 0
1075 -7707 7710 0
c ((aux1884 + aux1886 - aux1889)<=0)
7704 -7715 0
7705 -7716 0
7698 -7715 0
7698 7704 -7716 0
7698 7705 -7718 0
7699 -7716 0
7699 7704 -7718 0
7699 7705 -7720 0
c (0<=(aux1884 + aux1886 - aux1889))
-7705 7720 0
-7704 7718 0
-7699 7720 0
-7699 -7705 7718 0
-7699 -7704 7716 0
-7698 7718 0
-7698 -7705 7716 0
-7698 -7704 7715 0
